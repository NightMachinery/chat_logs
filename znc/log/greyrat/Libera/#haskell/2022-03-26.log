[00:01:35] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[00:01:43] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 260 seconds)
[00:06:32] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[00:06:35] <hololeap> anyone know of a lib like this for haskell? https://rubyapi.org/o/erb
[00:09:34] <tomsmeding> maerwald[m]: can you audit this bwrap command https://github.com/tomsmeding/pastebin-haskell/blob/play/bwrap-files/start.sh
[00:10:22] <Sqaure> If you want to describe a semi simple computation that is both computable and can show the result of each sub expression, what is the right datastructure? 
[00:10:56] <Sqaure> Arrow?
[00:10:59] <maerwald> tomsmeding: this may be interesing for you https://gitlab.haskell.org/haskell/ghcup-hs/-/merge_requests/216/diffs#96eb0d2ea9d3017a76e863d75ffb63f8ec3db41c_24_59
[00:10:59] <sm> hololeap: old answer: https://stackoverflow.com/a/5771359/84401
[00:11:09] <sm> has anyone here managed to build only static, or only dynamic, with stack ?
[00:11:32] <maerwald> tomsmeding: that's a syscall sandboxing tool that I tried to use to verify ghcup behavior and what files it accesses
[00:12:00] <maerwald> some of those files are actually from curl, not from ghcup
[00:12:25] <tomsmeding> maerwald: you're suggesting I use that on ghc?
[00:12:42] <maerwald> ah, no
[00:13:28] <tomsmeding> (though I am impressed the lengths you go to to make ghcup a good citizen :p )
[00:13:32] <tomsmeding> (ghcup is great btw)
[00:13:46] <maerwald> ah so you are following the playground approach or what
[00:13:52] <tomsmeding> yeah
[00:13:56] <sm> +1
[00:13:59] <tomsmeding> it ""works""
[00:14:18] <tomsmeding> as in, there is a <textarea> you can put code in, a <select> with ghcup versions, and a button to run
[00:14:31] <maerwald> yeah, I think the only dir ghc needs write access to is /tmp and possibly current dir
[00:15:03] <tomsmeding> yeah, I don't think I'm giving it more than that currently
[00:15:43] <tomsmeding> it's just that I couldn't find very extensive documentation on using bwrap in a quick search, so I don't know if I missed stuff that I should close off
[00:16:08] <maerwald> I haven't actually used it myself, but it looks reasonable 
[00:16:20] <tomsmeding> the --unshare-all sounded good :p
[00:18:10] <maerwald> how do I test this? 
[00:18:27] <tomsmeding> `cabal run`, then go to `localhost:8123/play`
[00:18:40] <tomsmeding> hopefully it works on a system that is not mine
[00:18:48] <tomsmeding> it expects ~/.ghcup as you saw
[00:19:13] <tomsmeding> (the list of available ghc versions is not sorted, fixing that now :p )
[00:20:04] <hololeap> thanks, sm. I'm thinking dhall might be the way to go here
[00:20:50] <tomsmeding> maerwald: if you find the rate limit obnoxious, change the 1.0 to 0.0 in SpamDetect.hs:40
[00:20:56] <sm> what format are you generating hololeap ?
[00:21:58] *** Joins: rvbcldud (~rvbcldud@2601:602:87f:4220:421e:df9d:15c3:59fa)
[00:22:06] <hololeap> eventually a config format that looks very much like bash, but this is something I have needed/wanted on occasion for a while
[00:22:43] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[00:23:12] <hololeap> Square: a tree?
[00:23:33] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[00:23:45] *** Quits: stepcut (~lordgothi@c-24-13-80-95.hsd1.il.comcast.net) (Remote host closed the connection)
[00:23:50] <sm> https://nickel-lang.org is new, I wonder if that would work
[00:24:47] <sm> background: https://www.tweag.io/blog/2022-03-11-nickel-first-release
[00:26:07] <hololeap> dhall can be used directly as a haskell lib, though
[00:26:44] <sm> ah true
[00:27:57] <maerwald> nickel is written in rust
[00:28:12] <maerwald> so you can use it as a library
[00:28:14] <maerwald> https://docs.rs/nickel-lang/0.1.0/nickel_lang/
[00:29:16] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:29:47] <maerwald> tomsmeding: https://paste.tomsmeding.com/0aZDQ3SX
[00:30:25] <maerwald> it seems snap-server is busted
[00:30:41] <tomsmeding> maerwald: cabal-plan reports that I have snap-server-1.1.2.0 as well
[00:32:13] <tomsmeding> how can this fail
[00:32:27] <maerwald> it has not aged well
[00:32:37] <maerwald> also, I'm using cabal 3.7
[00:32:42] <tomsmeding> maerwald: try https://paste.tomsmeding.com/GIotyusf
[00:32:57] <tomsmeding> oh I'm using cabal 3.6.2.0, but surely that cannot be the issue
[00:33:17] <maerwald> I think that was the issue
[00:33:24] * tomsmeding is confused
[00:34:35] <maerwald> oh, my bwrap doesn't support --perms
[00:36:11] <tomsmeding> maerwald: remove the "--perms 700" and add "bash " at the start of the next line
[00:36:52] <maerwald> yes, that works
[00:37:21] *** Joins: simendsjo (~user@84.211.91.241)
[00:37:23] <maerwald> excellent
[00:39:02] <tomsmeding> maerwald: this needs some love from a person who can actually do web design :p
[00:39:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:35] <tomsmeding> (and spends more than negligible time on it)
[00:39:36] <maerwald> I think next steps are: 1. line numbers for the editor, 2. creating a paste from the playground and 3. creating a playground from a paste
[00:39:46] <maerwald> then I'd already ship it
[00:40:03] <tomsmeding> perhaps even put in one of those fancy editors
[00:41:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[00:41:54] <tomsmeding> maerwald: do you think you're confident that the bwrap command is safe enough to put this on a publicly accessible thing
[00:42:01] <maerwald> I've done a fair amount of react, but it's one of those PTSD things. I can't remember a thing.
[00:42:02] *** Quits: on^ (~on@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[00:42:08] <tomsmeding> or if not, do you know who I might ask
[00:42:10] <tomsmeding> lol
[00:42:16] *** Lord_of_Life_ is now known as Lord_of_Life
[00:42:27] <tomsmeding> I'd _prefer_ this to not use react
[00:42:33] <tomsmeding> simply because it's blatantly unnecessary
[00:42:39] <maerwald> I even *did* write an editor in react.
[00:42:56] <tomsmeding> and did you come out alive
[00:43:07] <maerwald> but I'd need some psychotherapy or hypnosis to remember
[00:43:15] <tomsmeding> right, so partially
[00:43:24] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[00:44:08] *** Joins: nicbk (~nicbk@user/nicbk)
[00:44:11] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Ping timeout: 260 seconds)
[00:45:30] *** Joins: alp (~alp@user/alp)
[00:45:40] <hololeap> is there any way to do a PR for hackage revisions?
[00:46:07] <dminuoso> Mail the maintainer?
[00:46:34] <maerwald> https://github.com/Jungwoo-An/react-editor-js
[00:47:11] <dminuoso> maerwald: Is that your product?
[00:47:15] <maerwald> god no
[00:47:20] <tomsmeding> :')
[00:47:45] <dminuoso> My react experience has been somewhat pleasant.
[00:48:01] <dminuoso> But perhaps that's just relative to what all the alternatives would have been.
[00:48:10] <tomsmeding> maerwald: seems that's a wysiwyg editor?
[00:48:50] <maerwald> I guess
[00:49:35] <maerwald> https://codemirror.net/
[00:50:02] <tomsmeding> https://codemirror.net/6/
[00:50:50] <maerwald> even a haskell shop uses it
[00:51:04] <tomsmeding> :o
[00:57:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:59:53] <tomsmeding> how does one query the linux monotonic clock in haskell
[01:00:08] <tomsmeding> ah, @hackage clock
[01:00:49] <maerwald> as expected, the documentation has all sorts of examples, but no *simple* example
[01:01:02] <tomsmeding> of codemirror?
[01:01:05] <maerwald> yeah
[01:01:44] <tomsmeding> https://codemirror.net/6/docs/guide/ "This is what a minimal viable editor might look like" -- sounds like what you were looking for
[01:02:00] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[01:03:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[01:03:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[01:03:40] <maerwald> was there before, still too much stuff
[01:12:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[01:13:01] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[01:13:05] <Sqaure> is there some library that lets you build expression trees which can be evaluted and also rendered ? Im thinking some GADT type of thing. Simply typed lambda calculus or more. 
[01:13:24] *** Quits: liskin (~liskin@xmonad/liskin) (Ping timeout: 272 seconds)
[01:13:43] *** Joins: liskin (~liskin@xmonad/liskin)
[01:14:01] *** Joins: hololeap (~hololeap@user/hololeap)
[01:15:16] <janus> > a + b
[01:15:17] <lambdabot>  a + b
[01:15:29] <janus> seems like lambdabot does that?
[01:17:19] <geekosaur> no, that's just a clever abuse of Num and Show instances. in particular there isnoevaluation
[01:18:01] <tomsmeding> (the package is this one https://hackage.haskell.org/package/simple-reflect )
[01:18:02] *** Joins: vysn (~vysn@user/vysn)
[01:22:05] <Sqaure> hmm, i realize my question was the wrong one. It would need the ability to abstract away a function to some named black box.
[01:22:06] *** Joins: pnotequalnp (~pnotequal@user/pnotequalnp)
[01:22:46] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[01:23:00] <tomsmeding> Sqaure: not sure what you mean here
[01:24:29] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[01:24:36] *** Joins: ymherklotz (cb2c9cfbdd@2604:bf00:561:2000::29a)
[01:24:45] *** Joins: dcoutts_ (~duncan@host86-151-44-233.range86-151.btcentralplus.com)
[01:27:25] *** Quits: dcoutts (~duncan@host86-151-44-233.range86-151.btcentralplus.com) (Ping timeout: 240 seconds)
[01:32:09] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[01:32:45] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[01:33:27] <Sqaure> tomsmeding, your reply was great but my question was the wrong one. Some functions gets too complicated when you decompose them into their atoms. I need something that just lets you build a tree of an expression variables (input) and application of 1..2-ary functions that can be named. Like : Apply "Fib" (\x -> <insert impl>) (Value 10)
[01:34:55] <tomsmeding> Sqaure: that feels like a usecase that doesn't arise very often, so I wouldn't be surprised if no such library exists
[01:35:19] <tomsmeding> depending on how much functionality you'd want, it wouldn't be hard to write though, I think
[01:35:51] <geekosaur> you're basically writing an interpreter for a simple language.it's more the kind of thing that shows up toward the end of intro haskell courses, than something that would be a library
[01:36:00] <tomsmeding> (would that be `data Exp where Apply :: String -> (a -> b) -> Value a -> Exp b` ?)
[01:36:31] <Sqaure> tomsmeding, basically i just want to be albe to write simple expressions using known functions an be able to show the result of each sub expression instead of just a single result. Presentable to non programmers.
[01:37:31] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[01:37:36] *** Quits: rvbcldud (~rvbcldud@2601:602:87f:4220:421e:df9d:15c3:59fa) (Quit: WeeChat 3.3)
[01:38:57] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 240 seconds)
[01:40:43] *** Joins: pavonia (~user@user/siracusa)
[01:45:51] *** Joins: simendsjo (~user@84.211.91.241)
[01:48:31] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[01:48:39] *** Joins: Techcable (~Techcable@user/Techcable)
[01:52:19] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 260 seconds)
[01:54:20] *** Quits: deadmarshal_ (~deadmarsh@95.38.116.46) (Ping timeout: 268 seconds)
[01:55:29] <tomsmeding> Sqaure: something at all in this direction? https://paste.tomsmeding.com/3CcFbWqg
[01:56:09] *** Joins: kevin_ (~kevin@user/pnotequalnp)
[01:56:22] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[01:56:44] *** Quits: pnotequalnp (~pnotequal@user/pnotequalnp) (Quit: Client closed)
[01:56:49] *** kevin_ is now known as pnotequalnp
[02:01:13] <dminuoso> You can use template haskell for that
[02:01:45] <maerwald> tomsmeding: sheesh, got it working
[02:01:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[02:03:16] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 245 seconds)
[02:03:31] <maerwald> tomsmeding: https://imgur.com/HVF39fR.png
[02:04:14] <tomsmeding> 🎉
[02:04:31] <tomsmeding> what was difficult?
[02:04:43] <maerwald> remembering anything about frontend?
[02:04:48] <maerwald> like the shitty tooling and all
[02:04:54] <tomsmeding> OH this is that editor!
[02:05:01] <maerwald> yeah
[02:05:02] <tomsmeding> that's so cool
[02:06:03] <tomsmeding> PR please? if there's a merge conflict with what I did in the mean time, I can resolve
[02:10:58] <tomsmeding> maerwald: any ideas what should happen if someone does "open as playground" from a paste with >1 file?
[02:10:59] *** Joins: Guest8714 (~Guest87@2a02-842b-0380-5b01-969e-e713-0c3b-e5ac.rev.sfr.net)
[02:11:06] *** Quits: Guest8714 (~Guest87@2a02-842b-0380-5b01-969e-e713-0c3b-e5ac.rev.sfr.net) (Client Quit)
[02:11:08] <tomsmeding> or should that button belong to a file instead of a full paste
[02:11:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:14:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:16:15] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Quit: leaving)
[02:16:34] *** Joins: kevin_ (~kevin@user/pnotequalnp)
[02:16:39] *** kevin_ is now known as pnotequalnp
[02:19:07] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:19:46] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:23:04] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[02:23:46] <maerwald> tomsmeding: the CPP doesn't work here
[02:23:47] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:25:03] <tomsmeding> maerwald: interesting, how does it fail?
[02:25:28] <tomsmeding> it was mostly a gimmick to show that it does something, but maybe CPP is actually a good test
[02:25:43] <tomsmeding> perhaps it's not in one of the --ro-bind'ed bin directories on your system?
[02:27:27] <maerwald> https://github.com/tomsmeding/pastebin-haskell/pull/15
[02:27:32] <tomsmeding> I saw :)
[02:28:05] <tomsmeding> oh man it was such simple js
[02:29:30] <maerwald> https://codemirror.net/6/docs/ref/#highlight
[02:30:11] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.36)
[02:30:37] <tomsmeding> maerwald: does that doRun event listener work? How can that work outside of that window.onload handler
[02:30:57] <maerwald> yeah, works
[02:31:13] <maerwald> or what do you mean
[02:31:44] <tomsmeding> I was under the impression that if the <script> is before the <body>, the elements in the body are not yet there when the script runs, hence that getElementById("btn-run") would return null
[02:31:48] <tomsmeding> but apparently I'm wrong?
[02:31:55] *** Joins: acidjnk (~acidjnk@p200300d0c7049f68816ae2824fdd5aac.dip0.t-ipconnect.de)
[02:32:10] <maerwald> ctrl+enter is broken I think
[02:32:21] <maerwald> prolly because I'm not getting the correct element
[02:32:34] <maerwald> I dunno, js magic :D
[02:32:43] <tomsmeding> shouldn't that be done via some API of that editor thing
[02:32:53] <maerwald> probably
[02:34:03] <tomsmeding> why can I request a review from myself
[02:34:18] <maerwald> because you didn't open the PR
[02:35:01] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.36) (Ping timeout: 256 seconds)
[02:35:15] <sm> cool maerwald, are you needing `window.addEventListener('DOMContentLoaded', (event) => { JSSTATEMENTS; });` ?
[02:35:36] * tomsmeding always does "load", not "DOMContentLoaded", never seen that O.o
[02:35:49] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[02:36:08] <maerwald> sm: I dunno, please fix everything. Have to take care of my blood pressure now after doing js for half an hour.
[02:36:22] <sm> darn. I switched to plain no-query JS only yesterday 
[02:36:23] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[02:36:38] <sm> thx for the tip tomsmeding 
[02:37:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[02:37:29] <maerwald> arjun is good with css, hope he shows up
[02:37:35] <sm> ah, The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.
[02:37:44] <tomsmeding> TIL
[02:38:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:42:04] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[02:43:55] <tomsmeding> maerwald: does 'make bundle.js' work for you? For me it can't find the '@codemirror/basic-setup' module
[02:44:31] <maerwald> tomsmeding: make dependencies
[02:44:36] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[02:45:00] <tomsmeding> what npm dependency is supposed to bring in codemirror?
[02:45:36] <maerwald> I probably forgot --save or so
[02:46:36] <maerwald> hm, works here
[02:46:40] *** Joins: Chargen (~chargen@D964062A.static.ziggozakelijk.nl)
[02:46:40] <maerwald> :D
[02:47:06] <tomsmeding> was the -g install essential? I changed it to a local install before trying
[02:47:25] <maerwald> only for browserify
[02:47:33] <maerwald> because we execute it in the other rule
[02:47:42] <tomsmeding> `npm exec browserify`
[02:47:42] <maerwald> otherwise try npx
[02:49:11] *** Quits: michalz (~michalz@185.246.204.105) (Remote host closed the connection)
[02:51:34] <geekosaur> and people say cabal is hard *eyeroll*
[02:52:13] <tomsmeding> maerwald: `grep codemirror -r .` only has hits in play-index.{j,t}s and some random typesMap.json file
[02:52:16] <tomsmeding> is that correct?
[02:52:33] <tomsmeding> geekosaur: what people are used to is easy
[02:53:03] <hpc> i mean, i have seen people flub "yum install" - maybe packaging is just fundamentally incompatible with developer brains
[02:54:23] <tomsmeding> maerwald: ah, `npm i --save @codemirror/basic-setup @codemirror/lang-javascript`
[02:54:32] <maerwald> tomsmeding: I updated PR
[02:54:47] <tomsmeding> wtf is npx help
[02:56:38] <pnotequalnp> npx is just a shortcut for running executables in node_modules (or just from the npm repo itself, directly)
[03:00:37] <tomsmeding> maerwald: https://paste.tomsmeding.com/7zjFFrY3
[03:01:09] <maerwald> odd
[03:01:22] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[03:01:26] <maerwald> my ts is 4.5.5
[03:02:36] <crazazy> tbh I've been trying to just get my js deps from CDN's and skip all the npm stuff
[03:03:00] <tomsmeding> crazazy: there's some development tools as well in here
[03:03:15] <tomsmeding> which I'm not too happy about tbqh
[03:03:22] <crazazy> i mean yea but also jsdelivr can do the bundling and minifying of libraries for me
[03:04:07] <crazazy> and SRI hashes as well if you need them
[03:04:12] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[03:04:25] <tomsmeding> maerwald: also with tsc 4.5.5 same output
[03:06:14] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[03:08:02] <tomsmeding> maerwald: `npx tsc --lib dom,es2015 play-index.ts` doesn't throw errors anymore?
[03:08:55] <tomsmeding> it works 🎉
[03:11:12] <tomsmeding> but only on browsers that support ES6 classes and stuff :p
[03:12:24] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[03:13:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:13:30] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[03:15:41] <maerwald> there's probably a way to set up a proper project
[03:16:44] <maerwald> and then have it deploy to kubernetes
[03:16:58] <tomsmeding> ._.
[03:17:01] <maerwald> xD
[03:18:41] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[03:18:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:21:17] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[03:22:19] *** Joins: nicbk (~nicbk@user/nicbk)
[03:22:23] <maerwald> this is faster than a local ghci
[03:22:30] <maerwald> for switching ghc versions
[03:22:50] <tomsmeding> it might even be, you know, useful
[03:23:16] <tomsmeding> future stretch goal: open your playground module in ghci
[03:26:30] <maerwald> formatting support would also be cool (and rather easy)
[03:27:57] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:29:51] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[03:30:56] <tomsmeding> maerwald: thanks a lot for the help!
[03:31:10] <tomsmeding> todo items have been merged into TODO.txt, and the code has been merged into 'play'
[03:31:52] <tomsmeding> and now I'm off to bed
[03:32:07] <maerwald> great progress
[03:32:47] *** Quits: acidjnk (~acidjnk@p200300d0c7049f68816ae2824fdd5aac.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:33:54] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[03:34:31] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[03:39:37] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::2ff6) (Killed (zirconium.libera.chat (Nickname regained by services)))
[03:40:00] *** Joins: Guest8730 (~lainon@2601:7c0:c500:4d20::2ff6)
[03:44:46] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 272 seconds)
[03:49:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:50:26] *** Joins: alp (~alp@user/alp)
[03:50:35] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:50:36] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[03:50:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:56:44] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:57:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:59:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:59:29] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:00:18] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[04:01:10] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:02:08] <Sqaure> tomsmeding, thanks for your paste. Definitely something along those lines. But i would need type safety, if at all possible.
[04:02:18] <Sqaure> (had to leave here for a bit)
[04:03:09] <Sqaure> type safety / type agnostic 
[04:06:10] <Sqaure> im surprised if there wasnt some package on hackage doing this. I thought tracable computations was a common thing. 
[04:06:54] <geekosaur> generally you want to add tracing to an existing language
[04:09:43] <Sqaure> geekosaur, oh ok. Do you know any example of that? 
[04:09:59] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[04:10:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:13:40] *** Quits: finsternis (~X@23.226.237.192) (Read error: Connection reset by peer)
[04:14:28] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:15:16] *** Joins: Pickchea (~private@user/pickchea)
[04:17:09] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[04:19:52] <geekosaur> ghc-vis comes to mind, but it only work sin ghci
[04:20:19] <geekosaur> which is the problem with trying to do it as a library: invariably it has to be wired into whatever language you're trying to trace
[04:21:05] <geekosaur> and has to know about its type system (and yes, dynamic languages have type systems, they just work differently), its evaluation model, etc.
[04:22:08] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[04:23:16] *** Joins: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[04:26:56] <ober> is the stream api in vector supposed to be considered internal?
[04:30:53] <Sqaure> geekosaur, thanks. ill look that up
[04:31:03] <toulene> what is the most popular way to learn haskell?
[04:31:22] <toulene> sorry for the annoying question 
[04:31:42] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[04:31:55] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[04:33:28] <sm> toulene: there are a lot of ways to answer that :)
[04:33:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[04:35:27] *** Joins: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[04:35:43] *** Quits: aliosablack (~chomwitt@94.66.60.177) (Ping timeout: 256 seconds)
[04:37:59] *** Quits: ober (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[04:39:59] *** Joins: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[04:41:24] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[04:41:56] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:42:40] *** Quits: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[04:44:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[04:45:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:45:36] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[04:46:38] <toulene> i know there are a lot of ways hence i am undecided
[04:46:46] <toulene> hard to choose
[04:48:36] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[04:49:27] *** Joins: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[04:49:35] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[04:52:17] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:52:28] <hololeap> choose a beginners book and once you think you understand the syntax well enough, start using haskell to get through some programming challenges e.g. advent of code, hackerrank, etc.
[04:52:32] *** Quits: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[04:53:42] <hololeap> I also recommend using haskell-language-server for your editor because that will point out errors as you code in realtime, which might help the learning process
[04:58:29] *** Joins: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[04:58:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[04:59:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:01:19] *** Quits: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[05:01:54] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[05:04:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[05:05:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:07:27] *** Joins: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[05:07:49] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:10:16] *** Quits: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[05:11:17] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::2ff6)
[05:11:21] *** Quits: Guest8730 (~lainon@2601:7c0:c500:4d20::2ff6) (Quit: Leaving)
[05:11:28] *** Joins: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net)
[05:12:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[05:13:55] *** Quits: crazazy (~user@130.89.171.62) (Ping timeout: 260 seconds)
[05:14:15] *** Quits: ober_ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[05:14:30] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[05:17:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[05:18:40] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:19:34] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[05:23:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[05:23:47] <aviladev[m]> <toulene> "i know there are a lot of ways..." <- I started from the Learn You A Haskell book, it's being great so far.
[05:24:14] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[05:25:28] *** Quits: ober__ (~ober@c-73-68-74-41.hsd1.ma.comcast.net) (Quit: Leaving)
[05:30:37] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:33:23] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[05:34:57] *** Joins: jakalx (~jakalx@base.jakalx.net)
[05:35:04] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:38:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:38:32] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[05:39:27] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:41:21] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:42:57] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 240 seconds)
[05:43:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[05:44:39] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:47:28] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:49:52] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Read error: Connection reset by peer)
[05:50:10] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[05:55:43] *** Joins: razetime (~quassel@117.254.34.132)
[05:56:08] <abastro[m]> I heard that while LYAH looks childish in its cover, its explanation, while easier than alternatives, is still quite hard to grasp. Is this true?
[05:56:18] <Sqaure> What would be bad with using GADTs like this for a traceable avaluation? https://paste.tomsmeding.com/6FKxcRh8 
[05:57:06] <Sqaure> will it break down for types with many parameters?  
[06:03:00] <Sqaure> easier to read : https://paste.tomsmeding.com/zlPScFMe
[06:05:15] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:08:31] *** Quits: zyklotomic (~ethan@res380d-128-61-85-225.res.gatech.edu) (Ping timeout: 260 seconds)
[06:10:33] *** Joins: zyklotomic (~ethan@r4-128-61-90-5.res.gatech.edu)
[06:12:21] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:12:43] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[06:13:34] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[06:13:36] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 272 seconds)
[06:22:41] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.36)
[06:26:57] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.36) (Ping timeout: 240 seconds)
[06:30:51] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:31:03] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:38:49] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[06:39:57] *** Joins: nicbk (~nicbk@user/nicbk)
[06:40:47] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:41:11] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[06:41:31] *** Joins: Akiva (~Akiva@user/Akiva)
[06:43:29] *** Joins: vglfr (~vglfr@46.96.132.108)
[06:44:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:01:29] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:06:17] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::2ff6) (Remote host closed the connection)
[07:12:11] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[07:16:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:17:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:17:43] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:17:51] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[07:19:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:19:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[07:22:53] *** Quits: auri (~quassel@fsf/member/auri) (Quit: auri)
[07:23:28] *** Joins: auri (~quassel@fsf/member/auri)
[07:23:35] *** Joins: nicbk (~nicbk@user/nicbk)
[07:24:04] *** Quits: auri (~quassel@fsf/member/auri) (Client Quit)
[07:27:35] *** [_] is now known as [itchyjunk]
[07:28:10] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[07:28:36] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 240 seconds)
[07:35:13] <mon_aaraj> I've been told LYAH isn't as good as the purple book, but I am not really quite sure 
[07:40:55] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[07:49:15] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:55:01] *** Joins: Macbethwin (~chargen@8.21.8.240)
[07:56:34] <sm> toulene: would you like to read online ? read a paper book ? watch video ? listen to audio ? get free coaching in chat ? find a mentor ? pay for professional training ? get on-the-job training ?
[07:57:09] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[07:57:27] *** Quits: Chargen (~chargen@D964062A.static.ziggozakelijk.nl) (Ping timeout: 256 seconds)
[07:57:57] <sm> or, learn by self-study ? discussion ? watching ? doing ?
[07:58:40] <sm> I know you asked "most popular", if that's really what you want to know I'll attempt it :)
[08:01:07] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:09:23] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 260 seconds)
[08:10:58] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[08:11:15] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[08:12:13] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[08:15:55] *** Quits: Macbethwin (~chargen@8.21.8.240) (Ping timeout: 260 seconds)
[08:24:09] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[08:28:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[08:30:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:30:22] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:30:55] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[08:31:50] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.36)
[08:32:33] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:35:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[08:37:22] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 272 seconds)
[08:38:05] <abastro[m]> I think I heard of a good monoid for computing `group`, but forgot it
[08:38:45] <abastro[m]> By `group`, I mean something like [a, b, b, c, c, c, d] => [(a, 1), (b, 2), (c, 3), (d, 1)]
[08:38:59] <abastro[m]> What is a good monoid for such a calculation?
[08:40:51] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:41:54] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[08:48:58] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[08:51:26] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:51:44] *** Joins: vglfr (~vglfr@46.96.132.108)
[08:52:07] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[08:54:21] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[09:00:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[09:02:46] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:05:21] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:10:03] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:10:35] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[09:10:53] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[09:11:57] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[09:15:22] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[09:17:57] *** Quits: pnotequalnp (~kevin@user/pnotequalnp) (Ping timeout: 240 seconds)
[09:19:17] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 240 seconds)
[09:34:16] *** Joins: vysn (~vysn@user/vysn)
[09:34:22] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.36) (Ping timeout: 272 seconds)
[09:41:07] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[09:46:24] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[09:52:42] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[09:55:17] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:58:16] *** Joins: mbuf (~Shakthi@171.61.236.231)
[09:58:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[09:59:48] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:02:06] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:07:51] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[10:09:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[10:10:26] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:12:13] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[10:12:47] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[10:13:56] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:14:24] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[10:14:31] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[10:18:08] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[10:36:51] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[10:36:55] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[10:58:54] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:01:25] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:05:33] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:05:37] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:11:17] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[11:16:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[11:18:00] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[11:22:02] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Ping timeout: 272 seconds)
[11:29:41] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[11:39:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[11:44:45] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 250 seconds)
[11:46:02] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[11:46:06] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[11:48:33] *** Joins: acidjnk (~acidjnk@p200300d0c7049f68816ae2824fdd5aac.dip0.t-ipconnect.de)
[11:49:00] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[11:50:21] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:55:43] *** Quits: razetime (~quassel@117.254.34.132) (Ping timeout: 260 seconds)
[11:58:27] *** Joins: vglfr (~vglfr@46.96.132.108)
[11:59:34] <jackdk> abastro[m]: `MonoidalMap k (Sum v)`, using `Sum` from `Data.Monoid` and `MonoidalMap` from `monoidal-containers`
[12:00:16] *** Joins: _dmc_ (~dcm@27.2.216.148)
[12:00:16] <abastro[m]> Oh my, I should have said that
[12:00:20] <abastro[m]> It is more like group
[12:00:33] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Ping timeout: 256 seconds)
[12:00:47] <abastro[m]> So, [a,a,a,b,a] => [(a,3), (b,1), (a,1)]
[12:02:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:07:38] *** Joins: aliosablack (~chomwitt@2a02:587:dc18:da00:eb71:868b:3400:4636)
[12:08:16] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[12:10:33] *** Quits: _dmc_ (~dcm@27.2.216.148) (Quit: Leaving)
[12:10:51] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[12:12:07] *** Joins: Quenty (uid14882@id-14882.helmsley.irccloud.com)
[12:17:19] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[12:18:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:19:58] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:20:55] *** Quits: zyklotomic (~ethan@r4-128-61-90-5.res.gatech.edu) (Ping timeout: 260 seconds)
[12:22:52] *** Joins: zyklotomic (~ethan@res380d-128-61-81-155.res.gatech.edu)
[12:23:41] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:26:38] *** Joins: razetime (~quassel@117.254.35.76)
[12:26:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:27:37] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[12:27:59] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[12:31:23] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:31:39] *** Joins: img (~img@user/img)
[12:32:05] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:32:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[12:48:07] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:54:42] *** Joins: Pickchea (~private@user/pickchea)
[13:00:00] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.36)
[13:02:37] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[13:03:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:07:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:14:15] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:15:45] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) (Ping timeout: 268 seconds)
[13:19:35] *** Joins: namkeleser (~namkelese@101.175.155.55)
[13:24:16] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[13:24:23] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 260 seconds)
[13:24:52] *** Joins: vglfr (~vglfr@37.73.58.115)
[13:29:57] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.36) (Ping timeout: 240 seconds)
[13:30:14] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (Quit: You have been kicked for being idle)
[13:30:24] *** Joins: alp (~alp@user/alp)
[13:30:24] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Quit: You have been kicked for being idle)
[13:30:54] *** Joins: karim (~karim@102.40.222.144)
[13:31:39] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[13:35:55] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[13:36:10] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[13:40:35] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[13:41:54] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Quit: Leaving)
[13:47:39] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[13:55:08] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[13:57:24] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 240 seconds)
[13:58:35] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[13:58:40] <xerox> > M.toList . M.fromListWith (+) . map (\x -> (x,1)) $ "abcbacbca" -- abastro[m] 
[13:58:42] <lambdabot>  [('a',3),('b',3),('c',3)]
[14:04:36] *** Quits: karim (~karim@102.40.222.144) (Ping timeout: 240 seconds)
[14:04:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:07:07] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[14:07:51] *** Joins: benin (~benin@183.82.24.110)
[14:08:00] *** Joins: yosef36 (~yosefweis@2001:470:69fc:105::1:e501)
[14:11:34] *** Joins: kuribas (~user@ptr-25vy0i9dlr6d4pgg05u.18120a2.ip6.access.telenet.be)
[14:12:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:15:43] *** Quits: acidjnk (~acidjnk@p200300d0c7049f68816ae2824fdd5aac.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:19:35] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[14:20:36] *** Quits: Quenty (uid14882@id-14882.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:23:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[14:26:55] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 260 seconds)
[14:27:44] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[14:28:03] <kuribas> I am trying to "noobify" my code, but I am hesitating between Either and Exceptions.
[14:28:18] <kuribas> Exceptions are easier to understand for outsiders, but I don't like that they are invisible in haskell.
[14:28:35] <kuribas> "foo :: IO Int " does it throw an exception?
[14:30:31] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[14:30:50] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:31:51] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[14:31:52] *** Quits: vglfr (~vglfr@37.73.58.115) (Read error: Connection reset by peer)
[14:32:58] *** Joins: vglfr (~vglfr@37.73.58.115)
[14:36:31] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[14:39:47] *** Quits: vglfr (~vglfr@37.73.58.115) (Ping timeout: 256 seconds)
[14:40:17] *** Joins: Everything (~Everythin@37.115.210.35)
[14:40:32] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:41:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[14:43:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:46:40] <abastro[m]> <kuribas> ""foo :: IO Int " does it throw..." <- Google java checked exception criticism
[14:47:25] <kuribas> I kind of like javas checked exceptions
[14:47:48] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:47:53] <abastro[m]> Yea but (maybe sadly) many hated it
[14:48:16] <kuribas> not surprisingly
[14:48:16] <abastro[m]> And now they say result type is better because part of return type, not the function signature
[14:48:28] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:54:53] <abastro[m]> Not surprising?
[14:55:34] <kuribas> yeah, but then handling becomes painful without monads.
[14:56:24] <abastro[m]> Result monad without the m-word tho
[14:57:08] <abastro[m]> Anyway, for "noobify" I think you need to cater to many ppl's perception
[14:59:46] *** Joins: dextaa_ (~dextaa@user/dextaa)
[15:00:08] *** Joins: vglfr (~vglfr@37.73.58.115)
[15:00:16] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[15:02:23] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:02:37] <kuribas> yeah, then the mainstream solution would be custom syntax for handling errors
[15:03:04] <abastro[m]> Eh, Result type isn't custom syntax isn't it
[15:03:21] <kuribas> the type no.
[15:03:38] <kuribas> But to handle it gracefully you'll need monadic bind.
[15:03:47] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[15:03:54] <abastro[m]> `.flatMap`
[15:05:03] <kuribas> so do mainstream programmers chain .flatMaps?
[15:05:36] <kuribas> Funny how people still end up with monads, despite a general consensus that they are "too academic".
[15:06:38] <abastro[m]> Well, I mean
[15:06:46] <abastro[m]> Mainstream is still just throwing unchecked exception.
[15:07:10] <abastro[m]> Simply that some of them are saying that Result type is better than checked exception
[15:08:43] <abastro[m]> But yea they began using map and filter at least
[15:09:21] <kuribas> funny how functional idioms have been trinkling in other languages steadily.
[15:10:17] <abastro[m]> Yea, think object-oriented idioms are coming into ours as well tho
[15:10:34] <kuribas> are they?
[15:11:22] <kuribas> haven't seen many, but then I probably actively avoid them...
[15:11:40] <abastro[m]> Encapsulation, type&data grouping
[15:11:45] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[15:12:05] <abastro[m]> I mean type&behavior grouping
[15:12:19] <kuribas> records with functions?
[15:12:31] <abastro[m]> Also row-type polymorphism I guess
[15:12:57] <abastro[m]> I meant having a type and behavior on the type listed in proximity.
[15:14:41] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 256 seconds)
[15:17:08] <abastro[m]> IIRC, one could do OOP in any FP language that is not haskell.
[15:17:23] <kuribas> one can do it in haskell as well.
[15:17:33] <kuribas> just closures are enough.
[15:17:38] *** Quits: vglfr (~vglfr@37.73.58.115) (Ping timeout: 272 seconds)
[15:17:41] <Franciman> let over lambda pattern
[15:17:43] <Franciman> amirite?
[15:17:55] <kuribas> rite
[15:18:22] <kuribas> the primary thing I don't like about OO is inheritance.
[15:18:48] <Franciman> there are many articles explaining that it's not part of OO, but just an hack to gain reuse and GC friendliness
[15:18:49] <kuribas> I find interfaces are much more flexible in adding functionality.
[15:19:03] <Franciman> so you can do away 
[15:19:25] <kuribas> rigid class hierarchies make for rigid and hard to maintain code.
[15:19:35] <Franciman> interfaces are gorg
[15:19:47] <abastro[m]> Well some ppl are genuinely offputted by haskell's inability at inheritance tho
[15:20:14] <kuribas> because it doesn't play well with type inference.
[15:20:14] <Franciman> functions are very powerful organizing mechanism
[15:20:50] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Remote host closed the connection)
[15:21:31] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:23:05] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[15:23:10] *** Joins: xkuru (~xkuru@user/xkuru)
[15:23:11] <abastro[m]> Anyway yeah, encapsulation is perhaps the crux of OOP ppl like. Problem is that it is usually encapsulation of local mutable state.
[15:23:26] <abastro[m]> Haskell does not like local mutable state
[15:23:37] <kuribas> You can use an IORef.
[15:23:40] <Franciman> why, there is ST monad
[15:23:43] <Franciman> for local mutable state
[15:23:56] <Franciman> ah you would still retain referential trasparency
[15:25:29] *** Joins: _________ (~nobody@user/noodly)
[15:25:48] <kuribas> IMO haskell is the best imperative language :)
[15:25:53] <kuribas> also the best dynamic language.
[15:25:54] <abastro[m]> You can't have a state in ST monad which carries over multiple call
[15:26:05] <Franciman> you are right 
[15:26:07] <Franciman> sorry
[15:30:23] <abastro[m]> Btw personal grudge on IORef: laziness could get you into trouble
[15:30:36] <Franciman> laziness is lol
[15:30:38] <Franciman> how to put it
[15:30:42] <Franciman> well it's lol
[15:30:56] <Franciman> full of fake promises, but with a bunch of DAMN NEADO use cases
[15:32:11] <kuribas> abastro[m]: your not using unsafePerformIO, do you? ;-)
[15:32:54] <abastro[m]> Ofc not
[15:33:10] <kuribas> Then how could lazyness have an effect on the IORef?
[15:33:16] <kuribas> Or do you mean a space leak?
[15:33:19] <abastro[m]> I mean, you'd usually not think of thunks from IORef
[15:33:27] <abastro[m]> And that leads to performance degradation
[15:33:33] <abastro[m]> Ofc I mean space leak
[15:33:42] <abastro[m]> Oh right, there are other problems of laziness
[15:33:53] <abastro[m]> But I don't mean those
[15:34:45] *** Quits: razetime (~quassel@117.254.35.76) (Ping timeout: 256 seconds)
[15:34:57] <kuribas> It can also be an advantage, for example in a concurrency setting.
[15:35:11] *** Quits: _xor (~xor@74.215.232.169) (Quit: WeeChat 3.4)
[15:35:13] <kuribas> You don't need to hold the MVar, because the lazy update is nearly instantanuous.
[15:35:53] *** Quits: mbuf (~Shakthi@171.61.236.231) (Ping timeout: 256 seconds)
[15:36:55] <kuribas> abastro[m]: but note that the space leak is due to holding on to a value, not due to the nature of an IORef.
[15:37:04] <kuribas> abastro[m]: you'ld have the same problem with StateT.
[15:37:26] <kuribas> I think stateless systems are the way to go.
[15:37:40] <kuribas> It will also help with reducing GC time.
[15:37:53] <kuribas> Just use a database to persist data.
[15:37:54] <abastro[m]> I mean, ppl simply expect IORef to be strict
[15:37:59] <abastro[m]> But ofc it is not.
[15:40:27] <abastro[m]> Sounds like using electric drill to change a lightbulb
[15:41:41] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[15:41:57] <kuribas> the favour of IORef is that it is easy to use when you already have IO.
[15:42:14] *** Joins: gdd (~gdd@129.199.146.230)
[15:42:19] <kuribas> "StateT s IO" is redundant, also doesn't play well with exceptions.
[15:44:05] *** Joins: vglfr (~vglfr@37.73.58.115)
[15:45:08] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[15:45:37] <abastro[m]> Oh this discussion came from OOP
[15:45:42] *** Quits: vglfr (~vglfr@37.73.58.115) (Read error: Connection reset by peer)
[15:45:55] *** Joins: vglfr (~vglfr@37.73.58.115)
[15:46:12] <abastro[m]> What is the reason you think that OOP is considered important for many?
[15:46:25] <abastro[m]> (For code structuring at large)
[15:47:08] <kuribas> who does?  I don't think that...
[15:47:20] <geekosaur> I think a lot of it is that it's just what they learned. also that for many it was the first thing they encountered after C, with all its limitations
[15:47:24] *** Joins: razetime (~quassel@117.254.34.132)
[15:47:40] <geekosaur> (or BASIC, with all *its* limitations)
[15:47:47] <abastro[m]> I mean, if you learn C and think for a while
[15:48:04] <kuribas> Well, I think the original ideas work well on larger levels.  Like immutable message passing, hidden state, concurrency, etc...
[15:48:05] <abastro[m]> You would think that it would be cool to have encapsulating "classes"
[15:48:13] <abastro[m]> Which hides the local state.
[15:48:32] <kuribas> It just doesn't make sense to me to use message passing in order to "append a string", or "sum two numbers".
[15:49:22] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:fe0:b422:790d:35f6) (Ping timeout: 265 seconds)
[15:49:55] <kuribas> But having "ReaderT env IO" for large components involving state is fine IMO...
[15:49:59] <kuribas> No need for classes.
[15:50:00] <abastro[m]> Indeed, I hope no one does that either
[15:50:10] <kuribas> abastro[m]: smalltalk :)
[15:50:15] <abastro[m]> Wait does many ppl do that
[15:50:18] <abastro[m]> Oh
[15:50:20] <abastro[m]> I mean
[15:50:36] <abastro[m]> Smalltalk was a trial, so what about e.g. Java
[15:52:05] <kuribas> Most modern OO languages are just bastardisations.
[15:52:19] <kuribas> like C++, C#, java, ...
[15:52:33] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[15:54:03] <kuribas> At least smalltalk is conceptually consistent.
[15:54:36] <abastro[m]> They are so popular though, and used for designing real software
[15:56:46] <kuribas> that's not what I mean.  They are bastardisations of the original OO principles.
[15:57:16] <kuribas> objective C is closer to them.
[15:57:49] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Remote host closed the connection)
[15:58:26] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[15:59:05] <abastro[m]> I mean, if we were to recognize what OOP is, we should focus on how it is used
[15:59:36] <abastro[m]> Btw I just found a material which grows my depression: https://www.quora.com/Why-didnt-Haskell-do-for-FP-what-Smalltalk-did-for-OOP?share=1
[16:01:28] <kuribas> abastro[m]: yeah, for most people OOP is java, C#, or python
[16:01:30] <Hecate> damn
[16:01:34] <Hecate> I ain't reading this :D
[16:02:17] <abastro[m]> I wish I did not
[16:02:31] <kuribas> haskell is more like the common lisp of lazy functional languages.
[16:02:38] <abastro[m]> Tho I mean, they could have valid logic and they might be right
[16:03:22] <kuribas> haskell is not the only purely function language, but it is the canonical one.
[16:04:19] <kuribas> hehe: "Actually I made up the term "object-oriented ", and I can tell you I did not have C++ in mind. ~ Alan Kay"
[16:04:19] <kuribas>  
[16:06:18] <abastro[m]> I mean yea, but academics do not always have things right
[16:06:35] <kuribas> for whatever "right" means.
[16:06:47] *** Quits: vglfr (~vglfr@37.73.58.115) (Ping timeout: 260 seconds)
[16:06:49] <kuribas> But IMO academics is about exploring, not about "right".
[16:07:19] <abastro[m]> Yep
[16:07:30] <abastro[m]> Maybe Alan Key was wrong on what should be OOP
[16:08:18] <geekosaur> keep in mind, for an example of that, that Kay may have made up the term but SIMULA was arguably the first language with what isnow called OOP
[16:08:38] *** Joins: dut (~dut@user/dut)
[16:09:10] <kuribas> I don't agree much with Alan Key, he is a bit of an ass by dismissing FP.
[16:11:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[16:12:04] <kuribas> And I find the idea of comparing logical building blocks with biological cells a bit disingenious.
[16:12:21] <kuribas> cells are incredibly complex, perhaps more complex than a whole computer.
[16:12:44] <kuribas> The idea that you just make a computer language, and it "organically does the right thing", is very confused.
[16:12:47] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[16:12:59] <kuribas> Still people love the "origanical" analogy.
[16:13:19] <geekosaur> just cell walls are more complex than an entire computer, tbh
[16:15:53] <abastro[m]> We can scale down to individual proteins then.. wait
[16:16:56] <[exa]> depends on how you measure that, the complexity needed to keep the cells running is insanely astronomical, yet still you can't reasonably ask it for adding a few numbers together
[16:17:03] <abastro[m]> (IIRC proteins usually only do one signaling/one reaction and carries only simple states)
[16:19:16] <[exa]> haha no
[16:19:41] <kuribas> [exa]: can't brain cells?
[16:19:53] <abastro[m]> So that is better analogy for OOP then
[16:20:04] <[exa]> there's a bit of bias in that, the proteins are so insanely tiny and dodgy that people are nowadays happy that they have at least 1 kinda function for some
[16:20:12] *** Joins: mbuf (~Shakthi@110.225.247.221)
[16:20:34] <abastro[m]> So OOP classes are like proteins
[16:21:16] <[exa]> while it is clear that the functionality is literally open, everything dynamically reacts to a very open set of tiny changes everywhere
[16:21:42] <[exa]> quantifying that with "internal" and "external" state is basically impossible
[16:21:43] <abastro[m]> Which still does fine job at operating a cell
[16:22:25] *** Quits: mbuf (~Shakthi@110.225.247.221) (Remote host closed the connection)
[16:22:38] <abastro[m]> I mean, e.g. DNAs have a bit of encapsulation
[16:22:54] <[exa]> well
[16:23:03] <[exa]> you can monkeypatch it with whatever chemistry you want
[16:23:26] <[exa]> there's metagenomics, wild stuff that happens in non-coding sequences, ...
[16:24:24] <abastro[m]> Yea, still encapsulates and "passes messages"
[16:24:39] <[exa]> trying to make a correspondence to computer programs KINDA works because stuff really gets compiled somehow there, BUT people tend to underestimate the few billions of years of evolution that was randomly finding random solutions for random problems and encoding them in a random way to random places
[16:25:05] <[exa]> which is the main driving force of biology, not some kind of fun tangible transcriptions
[16:25:23] <abastro[m]> That's true. Though they also often assume that biological solution is great
[16:25:36] <[exa]> yeah it survived™
[16:26:24] <[exa]> anyway sorry I just wanted to share my opinion on how the comparisons between life and computers are kinda off-scale
[16:26:40] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.36)
[16:27:21] <[exa]> btw re OOP, I found it useful to refer to actual OOP properties, a bit like message/agent-oriented programming and encapsulation-based programming, which are indeed 2 separate directions in OOP
[16:28:51] <kuribas> [exa]: wouldn't the agent need to be encapsulated?
[16:29:15] <kuribas> microservices is a bit look OOP, only in a clumsy way...
[16:29:44] <abastro[m]> Did JS have private fields in the past
[16:30:42] <[exa]> it's kinda more about the way you contain the complexity, imagine having a 10-stage data processing pipeline, and you can either represent it as wrapping 10 layers of "input chewing objects", or connecting 10 small objects together to send the messages
[16:31:32] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:31:44] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.36) (Ping timeout: 272 seconds)
[16:33:10] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[16:33:40] *** Joins: xkuru (~xkuru@user/xkuru)
[16:37:47] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:38:22] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[16:39:46] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[16:39:50] <abastro[m]> Anyway there should be a reason why OOP is popular and fairing well now
[16:39:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[16:41:17] <abastro[m]> No way so many ppl are misled and became evangelist on those
[16:41:27] <geekosaur> why? there may be no more reason than C becoming popular before OOP just because it wss more easily available than other languages
[16:42:37] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[16:44:36] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:45:48] <abastro[m]> I'd say, C is a single language, but OOP is a whole paradigm
[16:47:08] <geekosaur> is it, though? OOP looks a wholelot different in Java than it does in Python, which in turn is a whole lot different than C++, etc.
[16:48:43] <geekosaur> and even if you ignore that, there are at least two different OOP paradigms, represented by Smalltalk vs. SIMULA
[16:49:24] <abastro[m]> What is simula's oop
[16:49:31] <geekosaur> actor model
[16:50:12] *** Joins: bahamas (~lucian@84.232.140.158)
[16:51:33] <nomagno> I don't see messages nor actors being used explicitly in any modern OOP language, honestly
[16:54:06] <nomagno> Method calls will always be messages no matter the surrounding context I guess
[16:54:59] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[16:56:31] <abastro[m]> Hmm, true
[16:56:39] <geekosaur> "message" is more a conceptual view. You can view even C/Algol style programming as "message passing" with a very restrictive view of how messages associate with classes/types (and this is even used practically; see gtk+)
[16:56:57] <abastro[m]> Method calls are somewhat unlike the image I get when I hear "message passing"
[16:57:08] <abastro[m]> Btw I dislike how I can even find OOP folks dismissing FP in a reply in Bartosz's blog
[16:57:22] <geekosaur> they're scared :)
[16:58:31] <geekosaur> [26 10:39:21] <kuribas> funny how functional idioms have been trinkling in other languages steadily.
[16:58:57] <nomagno> Not just idioms, many languages are solidly 25% functional at this point
[16:59:01] <abastro[m]> Scared? What do you mean
[17:00:11] <geekosaur> they're used to OOP think, but you have things like not-openly-called-monadic idioms trickling in to make exception handling easier, to use an earlier observation
[17:00:18] *** Joins: machinedgod (~machinedg@24.105.81.50)
[17:00:19] <kuribas> scared of the unknown likely.
[17:00:30] <abastro[m]> Hmm, makes sense
[17:00:33] <geekosaur> the rules are changing and of course people become scared when the rules start to change around them
[17:00:36] <kuribas> or that they have to relearn how to program.
[17:00:44] <maerwald> tomsmeding: https://imgur.com/YmMxtHE.png
[17:00:46] <abastro[m]> Though I wonder if the reaction is from scare
[17:01:02] <geekosaur> it'sa typical fear reaction
[17:01:14] <abastro[m]> Hmmm
[17:01:28] <geekosaur> pretty sure there's a chart from fear to acceptancemirroring the chart for grieving, somewhere
[17:01:47] <abastro[m]> Also OOP folks have successful upcoming languages like Go
[17:01:53] <abastro[m]> Wait is that more procedural
[17:01:57] <nomagno> I'm lowkey only good at purely procedural&imperative thinking, not going to lie
[17:02:01] <nomagno> Working on that
[17:03:42] <abastro[m]> Maybe perspectives depend on how to classify rust
[17:04:17] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[17:05:28] <geekosaur> "classification" is another partof the problem (and why you get fear reactions here)
[17:05:37] <geekosaur> people like to pigeonhole things
[17:06:08] <geekosaur> then the holes start to leak, like FP concepts leaking into OOP languages and cross-paradigm languages like Rust appearing
[17:07:54] <nomagno> Rust is procedural and imperative with functional and object-oriented constructs, but honestly not that many.
[17:08:29] <nomagno> I don't like whatever that borrow-checker paradigm they invented is supposed to be, at all
[17:09:04] <nomagno> I can't really read Rust code from most projects, it allows you to write abysmal code with its compiler guidance
[17:09:41] <nomagno> Every project I've seen has been architecturally clean but its implementations have been less than admirable
[17:09:45] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[17:10:54] <kuribas> tbf, haskell allows you to write abysmal code.
[17:11:16] <geekosaur> "you can write fortran in any language"
[17:11:39] <maerwald> rust has overall lower readability, unless you're reading haskell type level code
[17:11:42] <maerwald> then haskell is worse
[17:11:57] <nomagno> Agreed there
[17:12:05] <maerwald> but it's not really a problem in rust
[17:12:20] <maerwald> it's just noisy and verbose, like C. You get used to it
[17:12:42] <nomagno> Strangely enough I can deal with C no problem
[17:13:09] <nomagno> But, like, I don't have a real interest in writing Rust, so it's tough getting up to speed enough to follow codebases around
[17:13:22] <maerwald> then invest your time in something else :D
[17:14:15] *** Joins: benin (~benin@183.82.24.110)
[17:14:28] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:14:31] <nomagno> Fair. I should probably continue getting familiar with Scheme, else I'll just keep whining recursiveness is scary forever!
[17:16:15] *** Joins: hololeap (~hololeap@user/hololeap)
[17:16:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:17:25] *** Joins: bahamas (~lucian@84.232.140.158)
[17:18:13] <abastro[m]> Well I mean, many people would consider rust more readable than haskell with its mathematical abstractions
[17:19:14] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[17:19:27] <maerwald> it's for sure more pragmatic, although there were some forces pushing for more fancy features as well... I'm not following that closely anymore, but I'm guessing they left
[17:19:59] <maerwald> probably for the better
[17:20:31] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:20:33] <maerwald> I don't believe in language evolution
[17:21:13] <abastro[m]> I heard haskell got worse off due trying to integrate more features
[17:21:21] <abastro[m]> That and aggressive refactoring
[17:21:46] <exarkun> How would you measure something like "worse off"
[17:21:46] <maerwald> I just think you're better off desiging a new language than retro-fitting toys onto an existing one. There may be exceptions.
[17:21:48] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[17:22:02] <exarkun> And after you did, how would you attribute changes to a cause like "trying to integrate more features"
[17:22:26] <maerwald> But when you add stuff to anything, you're usually not considering the entirety of the design-space, but that tiny space that's open due to historical implementation decisions
[17:22:33] <maerwald> how can that lead to something better? I don't know
[17:22:37] <abastro[m]> Well I am not arguing for it, just that many people did think it was one of the biggest problems
[17:23:05] <abastro[m]> Many I met argued that haskell is not a worthy language except for lab settings because it changes too frequently
[17:23:15] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[17:23:16] <maerwald> I can sympathize
[17:23:36] <maerwald> I just use older compilers :D
[17:23:53] <abastro[m]> Hugs?
[17:24:04] <maerwald> ghc 8.10.7
[17:25:37] <abastro[m]> How is 8.10.7 "Old"
[17:25:49] <maerwald> 9.4 is coming soon, 9.6 is already planned
[17:26:16] <abastro[m]> I mean, I found that even HLS does not work well on 9.0+
[17:26:20] <abastro[m]> For now*
[17:26:25] <maerwald> yeah, I don't bother either atm
[17:26:30] <maerwald> but M1 users have to
[17:26:40] <maerwald> because 8.10.7 doesn't get the native codegen
[17:26:50] <abastro[m]> Usually the argument is that haskell as language has changed too much in 10 years
[17:27:18] <abastro[m]> They(I guess enterprise ppl) say it is not production ready if it cannot compile a program from 10 years ago
[17:28:00] <maerwald> there is https://github.com/haskellfoundation/stability
[17:29:55] <abastro[m]> Yep, it is a great step forward
[17:33:02] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[17:36:41] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:12] <abastro[m]> Hm I still did not find a `Monoid` which can do:
[17:39:12] <abastro[m]> `[a, a, a, b, b, a, c, b]` => `[(a, 3), (b, 2), (a, 1), (c, 1), (b, 1)]`
[17:41:35] <abastro[m]> Or well, I should better say, summarizing it as `((a, 3), 2 = max[2,1,1], (b, 1))`
[17:42:42] <geekosaur> I'm missing why you would want a Monoid? (off the top of my head I don't see what mempty would be, unless the first element of the tuple is a Maybe)
[17:42:54] <geekosaur> and it just looks like `group` to me
[17:43:24] <abastro[m]> Yep, it is a group but I want a monoid for a reason
[17:44:02] <abastro[m]> Basically, I want to built up the tree for the monoid calculation
[17:44:26] <abastro[m]> Then change one leaf, which triggers update of the result in O(log n)
[17:47:53] *** Quits: namkeleser (~namkelese@101.175.155.55) (Quit: Client closed)
[17:54:12] <abastro[m]> I got it nearly done, but I am struggling to make this datatype:
[17:54:38] <abastro[m]> One representing `(a, numberOfOccurrence)`
[17:54:57] <abastro[m]> Along with nil-like one for 0 occurrence
[17:56:39] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Remote host closed the connection)
[18:00:11] *** Joins: bahamas (~lucian@84.232.140.158)
[18:02:40] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[18:02:40] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:02:40] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:02:40] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[18:02:40] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[18:02:40] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[18:02:55] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[18:02:55] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:03:02] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:03:03] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[18:04:07] *** Joins: hololeap (~hololeap@user/hololeap)
[18:04:55] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 256 seconds)
[18:05:12] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[18:08:09] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[18:08:33] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:10:48] *** Parts: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Konversation terminated!)
[18:11:48] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[18:11:57] *** Quits: razetime (~quassel@117.254.34.132) (Read error: Connection reset by peer)
[18:15:57] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:19:44] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[18:26:24] *** Quits: kuribas (~user@ptr-25vy0i9dlr6d4pgg05u.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[18:32:41] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[18:39:03] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[18:43:48] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:48:37] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[18:51:47] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:54:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[19:02:25] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Quit: The Lounge - https://thelounge.chat)
[19:03:55] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[19:09:00] *** Quits: pranshukhandal (pranshukha@envs.net) (Quit: the lounge - https://webirc.envs.net)
[19:09:00] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:09:26] *** Joins: pranshukhandal (pranshukha@envs.net)
[19:09:34] *** Joins: sus (zero@user/zeromomentum)
[19:13:16] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[19:13:59] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:14:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[19:14:52] <seydar> I'm trying to translate `(++) <$> Just "john" <*> Just "travolta"` into fmaps, but I'm really struggling. I can come up with `let a = fmap (++) (Just "john"); fmap a (Just "travolta")` but -- and this may shock you -- it doesn't work. What am I missing/misphrasing in my fmap construction?
[19:15:04] *** Joins: bahamas (~lucian@84.232.140.158)
[19:15:13] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[19:16:46] <[exa]> seydar: you need Applicatives to be able to actually combine the functor-ish "wrappers", just Functor is not sufficient to do this
[19:16:47] <seydar> As per usual, now that I typed out my question into IRC, I think what I'm seeing is that I *can't* rewrite it with fmaps
[19:17:26] <seydar> [exa]: and it's because I don't have access to the real component of `Just`, right? I'd have to be inside a function definition for that
[19:18:05] <seydar>  a :: Maybe ([Char] -> [Char]), thus it's not a candidate for the supplied function in fmap
[19:18:11] <[exa]> not sure what does "access to the real component" mean but it might make sense
[19:18:17] <abastro[m]> Hm, this is a bit hard to explain I think
[19:18:37] <seydar> [exa]: what's the term for the `x` part of `Just x`?
[19:18:40] <[exa]> it's nice to have a look at the types of map/fmap/<*>/>>= aligned next to each other, the intuition of what each of these can do is then pretty clean
[19:18:49] <[exa]> lemme google
[19:19:00] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:19:17] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[19:19:40] <abastro[m]> But yeah you can only deal with single `f a` with fmap, you cannot combine `f a` and `f b` and get some `f (a, b)` or something
[19:19:55] *** Joins: alp (~alp@user/alp)
[19:21:21] <seydar> thank you [exa], abastro[m] 
[19:21:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:21:51] *** Quits: n3t (~n3t@s45.mydevil.net) (Changing host)
[19:21:51] *** Joins: n3t (~n3t@user/n3t)
[19:23:16] <[exa]> seydar: https://paste.tomsmeding.com/9UMQd1Un I failed to google this so pastebinned
[19:23:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:23:49] <[exa]> btw the first Monad should be `Monad f`, whoops.
[19:26:10] <[exa]> seydar: a fun little exercise is to see how the <*> and >>= are convertible to/from liftA2 and join, using fmap
[19:27:08] <seydar> oh boy, i'm just getting into liftA2 now -- i'll give it a shot
[19:28:23] <seydar> [exa]: wait, that's exactly what I was trying to do with converting (++) <$> Just "a" <*> Just "b" to fmap. I thought it couldn't be done?
[19:28:42] <seydar> (since lifta2 is just f <$> a <*>)
[19:28:46] <seydar> (since lifta2 is just f <$> a <*> b)8
[19:28:55] <[exa]> you can do it ofcourse, but just `fmap` isn't sufficient. You need applicative tools to be able to combine the 2 Justs
[19:28:56] <seydar> god dammit i'm not correcting my correction any further
[19:29:05] <seydar> hm okay, i'll dig in
[19:29:38] <[exa]> or you basically need to somehow reimplement the applicative yourself by patternmatching
[19:29:46] <[exa]> which was not the task I guess. :D
[19:30:17] <seydar> [exa]: yeah, i think the pattern-matching part was what I needed
[19:30:50] <seydar> now that I'm actually trying to implement liftA2 in terms of fmap, it actually feels... easy? I'm prolly doing it wrong. stand by for pastebin
[19:31:52] <seydar> ah. not so easy. running into the same issue as last time, where now my partially-applied function is wrapped in a functor
[19:32:39] <[exa]> yap, you will eventually need to patternmatch on the 2 Maybes manually to be able to decide what to do with them
[19:32:40] <geekosaur> right, you just hit the part that requires Applicative. liftA (or liftA1 if you like) is just fmap, but the higher ones need Applicative
[19:33:43] <seydar> [exa]: and my implementation will be specific to the Maybe monad, right? I won't be able to generalize my implementation of liftA2 in terms of fmap?
[19:33:49] *** Joins: pavonia (~user@user/siracusa)
[19:34:09] <seydar> I'm guessing it's cheating to use `lift` in my definition of `liftA2` a la fmap?
[19:34:25] <[exa]> yes, liftA2 literally can't be implemented in terms of fmap without either cheating or losing polymorphism
[19:35:05] <seydar> "implement liftA2 in terms of fmap, they said. it'll be fun, they said"
[19:35:25] <geekosaur> well, you'll certainly learn something,just not what you might have expected
[19:35:44] <[exa]> like, there's a theoretical reason why functor is a superclass of applicative, which is a superclass of monad :]
[19:36:25] <[exa]> technically, you may kinda look at this (esp. with simpler types like Maybe) as abstracting common kinds of patternmatches
[19:37:19] <[exa]> Functor gives you a way to "pattermatch" { f (Just a) = doSomething a; f Nothing = Nothing }, only a single Maybe gets in there
[19:37:41] <[exa]> Applicative does the patternmatch over 2 Maybes, like {f (Just a) (Just b) = ....}
[19:38:04] *** Joins: bahamas (~lucian@84.232.140.158)
[19:38:05] <[exa]> Monad patternmatches {f (Just (Just a)) = .....; ...}
[19:39:22] <[exa]> (for the record, I forgot a Just$ in the functor part, before doSomething, but I hope the point is still visible)
[19:40:19] <seydar> https://paste.tomsmeding.com/FwoTYOui
[19:40:54] <seydar> i'm close, but my pattern-matching is inexhaustive (`liftA2' (:) (Just 3) (Just [4])` is my test case)
[19:41:42] *** Joins: vglfr (~vglfr@37.73.58.115)
[19:42:16] *** Joins: Topsi (~Tobias@dyndsl-095-033-022-251.ewe-ip-backbone.de)
[19:45:55] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[19:47:31] <Franciman> are you using adjoint functors in haskell?
[19:47:37] <Franciman> if so, i'd like to watch them happen
[19:48:23] *** Quits: vglfr (~vglfr@37.73.58.115) (Ping timeout: 256 seconds)
[19:49:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[19:50:10] *** Joins: tubogram4 (~tubogram@user/tubogram)
[19:53:30] <maerwald[m]> Franciman: sup
[19:53:56] <Franciman> ohy maerwald[m] 
[19:55:01] *** Joins: vysn (~vysn@user/vysn)
[19:57:22] <seydar> Franciman: what are adjoint functors and how can i try to use them in a way that will be entertaining?
[19:58:41] <Franciman> seydar: i was asking exactly to know the answer to your latter question
[19:59:08] <Franciman> as per the former https://en.wikipedia.org/wiki/Adjoint_functors
[20:03:14] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.36)
[20:03:23] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[20:07:04] *** Joins: wolfshappen (~waff@irc.furworks.de)
[20:09:00] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 240 seconds)
[20:09:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:13:24] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[20:16:22] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[20:17:15] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:21:57] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:23:29] <juri_> how alive is data parallel haskell?
[20:24:21] *** Joins: Pickchea (~private@user/pickchea)
[20:25:04] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[20:25:08] <geekosaur> dead and removed from recent ghcs, iirc
[20:26:10] *** Quits: seydar (~seydar@154-27-113-252.starry-inc.net) (Quit: leaving)
[20:26:20] <juri_> ah, thanks.
[20:28:32] <geekosaur> if I recall the ghc side of things correctly, potentially it could go back in, but someone would have to commit to supporting it. as things were, it was getting in the way of maintaining ghc and nobody who understood it was supporting it
[20:29:07] <juri_> not-it. i'd rather have the Herbie GHC plugin back.
[20:29:33] <abastro[m]> What is data parallel haskell?
[20:29:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:32:39] <geekosaur> https://wiki.haskell.org/GHC/Data_Parallel_Haskell
[20:33:14] <geekosaur> you have to use ghc7.x to get it
[20:42:27] *** Joins: FragByte_ (~christian@user/fragbyte)
[20:44:41] *** Joins: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net)
[20:45:01] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 240 seconds)
[20:45:01] *** FragByte_ is now known as FragByte
[20:45:04] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[20:47:21] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[20:49:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:50:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:01:20] <sm> g'day all. Can cabal build show just a count of packages remaining, without all the logging - like stack build --verbosity error ?
[21:03:52] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:05:58] *** Joins: nicbk (~nicbk@user/nicbk)
[21:06:08] *** Joins: notzmv (~zmv@user/notzmv)
[21:06:12] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:11:41] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:18:08] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[21:18:22] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:20:33] *** Joins: razetime (~quassel@117.254.34.132)
[21:21:58] *** Quits: razetime (~quassel@117.254.34.132) (Client Quit)
[21:22:14] *** Joins: rustacean (~quassel@117.254.34.132)
[21:22:50] <rustacean> hello
[21:23:17] <[exa]> o/
[21:23:21] <rustacean> are there any guides on obfuscated haskell?
[21:23:36] <maerwald> is that a dialect?
[21:23:44] <Franciman> one could argue that regular haskell is already well obfuscated
[21:23:47] <[exa]> like obfusacted C?
[21:23:48] <Franciman> but i won't argue that
[21:23:58] *** Joins: econo (uid147250@user/econo)
[21:24:16] <rustacean> yes, akin to obfuscated C
[21:24:39] <rustacean> like defining map as (<$>((:[])<$>))(=<<)
[21:26:15] <[exa]> I don't recall anyone spending much time publicly with that, but ofcourse you can complicate anything to any level of complexity you want (cf. SK calculus & lambda equivalence)
[21:26:39] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Quit: No Ping reply in 180 seconds.)
[21:26:43] <Franciman> looks regular haskell to me, rustacean 
[21:27:11] <rustacean> well then i would like some help with regular haskell then
[21:27:34] <[exa]> Franciman: "resembles a tribal totem from 90deg angle" is now regular haskell :]
[21:27:41] <Franciman> ^^
[21:27:55] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[21:28:34] <rustacean> i'd like to define foldl in a manner similar to this but i don't exactly understand the tribal totem myself
[21:29:16] <Franciman> an obfuscated foldl i saw is defining foldl in terms of foldr
[21:29:21] <rustacean> or reverse
[21:29:23] <Franciman> but it is not as obfuscated as your example
[21:29:26] <rustacean> interesting!
[21:29:42] <[exa]> rustacean: the expression you have there is an ugly mess of tricks but you can see that the parts make sense, for example (:[]) is basically "make a singleton list", then there's 2 fmaps (aka <$>) that apparently apply it to the list making a (I'd say) kinda list of lists, and (=<<) may at that point be used as a concat
[21:29:44] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[21:30:07] <[exa]> (because >>= for lists is concatMap)
[21:30:24] <rustacean> indeed, what i'm wondering is how the recursion happens there
[21:30:48] <[exa]> rustacean: it's in the fmaps and =<<
[21:30:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[21:31:03] <Franciman> iiuc the idea is to create a singleton for each element of the initial list
[21:31:06] <[exa]> highly recommend to take the expression apart and check types of stuff, it helps a lot
[21:31:12] <Franciman> then you use concatMap
[21:31:21] <Franciman> to apply your function to each singleton and finally concat them
[21:31:28] <Franciman> +1 [exa] 
[21:31:29] <[exa]> :t ((:[])<$>)  -- for example, rustacean
[21:31:30] <lambdabot> Functor f => f a -> f [a]
[21:31:44] *** Joins: zaquest (~notzaques@5.130.79.72)
[21:31:59] <rustacean> i see
[21:32:16] <[exa]> and yeah the obvious trickery everywhere are the operator sections, (whatever <$>) is basically (\x -> whatever <$> x)
[21:35:02] <Franciman> rustacean: http://wiki.haskell.org/Foldl_as_foldr
[21:35:18] <Franciman> not sure it's what you want, but it is tricky
[21:36:20] <[exa]> rustacean: ah one extra trick, the first `<$>` there actually works on functions, not lists
[21:36:27] <rustacean> it is tricky, and funnier in pointfree
[21:36:51] <[exa]> rustacean: easiest way to guess subexpression types btw is to use holes, try this in ghci:
[21:36:51] <Franciman> point free can be nicely obfuscating
[21:36:54] <[exa]> :t (\x -> (fmap::_) x ((:[])<$>))(=<<)
[21:36:55] <lambdabot> (a -> b) -> [a] -> [b]
[21:37:01] <Franciman> also contiunations
[21:37:06] *** Quits: orcus (~orcus@user/brprice) (Quit: ZNC 1.8.2 - https://znc.in)
[21:37:06] *** Quits: dispater (~dispater@user/brprice) (Quit: ZNC 1.8.2 - https://znc.in)
[21:37:13] <[exa]> (it would also report how `fmap` specializes)
[21:38:14] <rustacean> "To use the inferred type, enable PartialTypeSignatures" it says
[21:38:23] <geekosaur> :t (\x -> ?fmap x ((:[])<$>))(=<<) -- another way to do it
[21:38:25] <lambdabot> (?fmap::((a1 -> m b) -> m a1 -> m b) -> (f a2 -> f [a2]) -> t, Monad m, Functor f) => t
[21:38:37] <geekosaur> but it reports a more general type
[21:38:46] *** Joins: dispater (~dispater@user/brprice)
[21:38:49] <[exa]> rustacean: there should be "Found type wildcard `_` standing for: ...."
[21:39:16] <rustacean> standing for ‘(a1 -> b1) -> ((a -> b) -> a1) -> (a -> b) -> b1’ ah ok
[21:39:17] *** Joins: orcus (~orcus@user/brprice)
[21:41:06] <[exa]> rustacean: which is the fmap instance for `Functor ((->) (a -> b))`
[21:42:52] <[exa]> spoiler: fmap for functions is equivalent to (.), so your totem simplifies to: (.((:[])<$>))(=<<)
[21:45:07] *** Quits: zyklotomic (~ethan@res380d-128-61-81-155.res.gatech.edu) (Ping timeout: 260 seconds)
[21:45:45] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:47:11] *** Joins: zyklotomic (~ethan@res388d-128-61-91-192.res.gatech.edu)
[21:48:31] <[exa]> rustacean: just following the typing rules and definitory substitutions, you'd eventually get to something like `totem fn = concatMap $ ((:[]) . fn)`, at which point it's a bit easier to see that the concat + (:[]) kinda cancels out, leaving just `map fn`
[21:49:07] <[exa]> a good topic for a long ghci adventure tho.
[21:49:30] <rustacean> my shallow haskell knowledge is still quivering at this
[21:52:25] *** Joins: rond_ (~rond_@90.254.208.190)
[21:53:02] *** Joins: fendor__ (~fendor@91.141.65.26.wireless.dyn.drei.com)
[21:53:45] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:55:51] *** Quits: fendor_ (~fendor@91.141.68.132.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[21:56:16] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:58:57] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[22:02:59] <[exa]> rustacean: writing obfuscated and hard-to-parse code should be avoided anyway, so I wouldn't worry. :D
[22:03:31] <rustacean> yeah indeed, the book i'm reading is called "Real world haskell"
[22:04:00] *** Joins: weekOldRoadkill (~weekOldRo@pool-108-50-225-254.nwrknj.fios.verizon.net)
[22:04:04] <rustacean> but i am doing this as a one-off thing and i want to do it right (and maybe learn some forbidden knowledge along the way)
[22:07:52] *** Joins: bahamas (~lucian@84.232.140.158)
[22:08:49] <Sqaure> What would be using thing this GADT approach to create traceable evaluation expressions? Is there some obvious case in which it will break down? https://paste.tomsmeding.com/zlPScFMe
[22:09:10] <Sqaure> What would be BAD*
[22:15:42] *** Joins: pnotequalnp (~kevin@user/pnotequalnp)
[22:20:42] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[22:22:02] *** fendor__ is now known as fendor
[22:36:15] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[22:37:44] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Quit: WeeChat 3.4)
[22:37:54] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[22:39:26] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[22:39:43] *** Quits: rustacean (~quassel@117.254.34.132) (Ping timeout: 260 seconds)
[22:42:28] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:44:45] *** Joins: Enrico63 (~Enrico63@81.109.143.226)
[22:45:00] *** Joins: fef (~thedawn@user/thedawn)
[22:46:37] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[22:49:26] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[22:49:49] *** Quits: Enrico63 (~Enrico63@81.109.143.226) (Quit: Client closed)
[22:59:01] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[23:03:08] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.36) (Ping timeout: 272 seconds)
[23:04:09] *** Joins: seydar (~seydar@154-27-113-252.starry-inc.net)
[23:05:34] <seydar> I'm implementing lift2A in fmap for Maybe, but I'm getting a non-exhaustive pattern error. I think I'm missing something obvious: https://paste.tomsmeding.com/rK4RurLY
[23:05:55] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[23:08:22] <[exa]> :t \ f a (Just x) -> fmap (flip x) (fmap f a)    -- seydar: does the type of this match expectations?
[23:08:23] <lambdabot> Functor f => (a1 -> b) -> f a1 -> Maybe (a2 -> b -> c) -> f (a2 -> c)
[23:11:52] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:11:59] <seydar> [exa]: hm i guess not
[23:12:12] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:12:33] <[exa]> the (fmap f a) is okay imo
[23:12:51] <[exa]> gets you a `Maybe (b->c)`
[23:13:12] <[exa]> you just need to throw the `x` to that function inside of Maybe
[23:13:30] <[exa]> one nice hint how to do that:
[23:13:41] <[exa]> > ($ 5) (1+)
[23:13:42] <lambdabot>  6
[23:13:51] <seydar> [exa]: but then doesn't x get used twice?
[23:13:59] <[exa]> (translates to (1+) $ 5 which is (1+) 5 etc
[23:14:01] <seydar> wait i think i misunderstand
[23:14:25] <[exa]> seydar: no the `flip x` doesn't make much sense there because you can't assume that `x` is a function
[23:14:48] *** Joins: califax (~califax@user/califx)
[23:14:50] <seydar> oh, i thought that was the point -- i was assuming x wasn't a function
[23:15:28] <[exa]> `x` in your case is literally just of type `b`, you can't do anything with it except for throwing it into `f` as a second argument
[23:16:48] <[exa]> :t liftA2 -- just to be sure that we know what we're aiming at
[23:16:49] <lambdabot> Applicative f => (a -> b -> c) -> f a -> f b -> f c
[23:17:36] <seydar> do i have my arguments backwards?
[23:18:28] <[exa]> no I guess they are okay, in fact just the (flip x) does a bit different flip than what you want
[23:20:36] <[exa]> (see the hint with $ above)
[23:20:45] <seydar> i'm having trouble understanding why flip isn't right: ((:) 3) [4] seems to be correct to me, but `flip [4] ((:) 3)` fails for me
[23:21:14] <[exa]> continuing on what I posted before:
[23:21:31] <[exa]> > ($ [4]) ((:) 3)
[23:21:33] <lambdabot>  [3,4]
[23:21:35] <seydar> so switching (flip x) to ($ x) works, but i don't understand why
[23:21:53] <[exa]> let's follow the types:
[23:22:01] *** Quits: weekOldRoadkill (~weekOldRo@pool-108-50-225-254.nwrknj.fios.verizon.net) (Quit: Leaving)
[23:22:02] <seydar> ah well it appears i'm an idiot
[23:22:07] <[exa]> :t \f a (Just x) -> fmap f a
[23:22:08] <lambdabot> Functor f => (a1 -> b) -> f a1 -> Maybe a2 -> f b
[23:22:10] <seydar> flip is simply not the right function
[23:22:15] <seydar> because of the types, as you said
[23:22:19] <seydar> :t flip
[23:22:20] <lambdabot> (a -> b -> c) -> b -> a -> c
[23:22:40] <[exa]> nah, the many kinds of flips are surprising
[23:22:49] <seydar> :t ($)
[23:22:50] <lambdabot> (a -> b) -> a -> b
[23:22:55] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:23:07] <[exa]> the magic goes with the operator section there which kinda flips it for yourself
[23:23:13] <[exa]> :t \x -> ($x)
[23:23:14] <lambdabot> a -> (a -> b) -> b
[23:23:56] *** Joins: justOkay (~justache@user/justache)
[23:24:14] <[exa]> @pl \x f -> f x
[23:24:14] <lambdabot> flip id
[23:24:24] <[exa]> tada
[23:25:01] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (Ping timeout: 250 seconds)
[23:26:00] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[23:27:08] <[exa]> anyway, the other way would be to do it in one `fmap`, you can flip your `f` so that it accepts `x` as the first argument, and then it's easy
[23:30:34] <[exa]> > (`elem` [1,2,3]) 5   -- extra codegolfing hint
[23:30:36] <lambdabot>  False
[23:35:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4042:4584:26e0:bc36) (Quit: WeeChat 3.4.1)
[23:39:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a3d9:5253:a1a8:660f)
[23:40:52] <seydar> [exa]: beautiful trick, i should try that
[23:41:13] <seydar> i guess i'm still confused about why my error was "non-exhaustive pattern matching" when i feel like it should've been a type mismatch
[23:41:33] <seydar> (flip id x) works
[23:41:52] <seydar> same with (`id` x)
[23:42:20] <seydar> thank you [exa]! this has been super informative and i like the tricks i've learned!
[23:45:02] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Ping timeout: 240 seconds)
[23:46:44] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[23:47:33] <[exa]> seydar: np, it's actually from a pretty common bag of tricks that I don't know if it's written down somewhere
[23:49:11] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[23:49:27] <[exa]> as an extra useful truth btw, it's good to notice that in this context `($)` is the same as `id` (in fact `($) = id` is a valid definition, though a bit too overly polymorphic)
[23:51:18] <seydar> oh wow
[23:53:25] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:53:39] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[23:53:47] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:57:00] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[23:57:43] *** Joins: Pickchea (~private@user/pickchea)
