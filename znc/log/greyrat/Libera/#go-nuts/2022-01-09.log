[00:02:54] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Quit: boof)
[00:03:16] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:03:58] *** Quits: nocture (~textual@c-xd4ed87fa.cust.hiper.dk) (Quit: nocture)
[00:05:18] *** Quits: RougeR (~RougeR@user/rouger) (Ping timeout: 256 seconds)
[00:06:03] <fogobogo> guys, thats soooo much better. thanks a lot
[00:07:06] *** Joins: bluedust (~bluedust@103.148.20.45)
[00:10:13] *** Quits: bluedust_ (~bluedust@185.248.85.40) (Ping timeout: 240 seconds)
[00:17:52] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:23:00] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[00:23:44] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[00:34:02] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[00:40:33] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[00:41:09] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[00:41:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:51:35] *** Quits: sathylias (~sysadmin@modemcable136.173-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:52:02] *** Quits: tnez (~el@user/tnez) (Ping timeout: 268 seconds)
[00:55:01] *** Quits: Liexei (~Liexei@user/liexei) (Quit: Bye...)
[00:56:03] <b0nn> When did people start using the suite part of testify
[00:56:25] <b0nn> I've only ever come across it in the last 6 months (or so), but now I see it everywhere
[00:56:42] <b0nn> https://pkg.go.dev/github.com/stretchr/testify/suite
[00:57:26] <lazyreader> huh, never seen it myself
[00:59:50] *** Quits: darkmuggle (darkmuggle@here.for-the.chat) (Quit: fBNC - https://bnc4free.com)
[01:00:05] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[01:00:21] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[01:00:21] *** Joins: menace (~someone@user/menace)
[01:00:25] *** menace is now known as Deknos
[01:00:36] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Read error: Connection reset by peer)
[01:01:56] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[01:02:37] *** Joins: sagax (~sagax_nb@user/sagax)
[01:03:03] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[01:03:51] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[01:09:31] *** Quits: trewq (~trewq@li70-4.members.linode.com) (Ping timeout: 245 seconds)
[01:09:44] *** Joins: trewq (~trewq@li70-4.members.linode.com)
[01:11:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:13:28] *** Joins: fikran (~fikran@user/fikran)
[01:15:30] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[01:16:08] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[01:17:53] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (Ping timeout: 252 seconds)
[01:18:02] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[01:18:43] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[01:19:37] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (Ping timeout: 250 seconds)
[01:19:55] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[01:24:29] *** Quits: acosta (~acosta@163.172.62.165) (Ping timeout: 252 seconds)
[01:24:50] *** Joins: acosta (~acosta@163.172.62.165)
[01:29:08] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[01:32:51] *** Quits: aram (~aram@9front.army) (Ping timeout: 245 seconds)
[01:32:59] *** Joins: aram (~aram@9front.army)
[01:32:59] *** ChanServ sets mode: +v aram
[01:42:46] *** Quits: zer0bitz_ (~zer0bitz@196.244.192.61) (Read error: Connection reset by peer)
[01:42:49] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[01:43:14] *** Joins: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291)
[01:44:05] *** Joins: arinov (~arinov@213.194.126.155)
[01:46:37] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[01:48:55] *** Joins: johnjaye (~pi@154.6.152.74)
[01:49:23] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[01:50:30] *** anandn is now known as anandn[away]
[01:50:30] *** Quits: anandn[away] (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:52:29] <pyzozord> can someone explain how init functions work?
[01:53:09] <pyzozord> is it one init function per file, per package, per module? Is it many? if many what's the order of them?
[01:54:45] <fizzie> Many, and in the order they're declared if I remember. If there are multiple files in the same package, I think the relative order between the files is undefined though.
[01:54:48] <ikke> afaik, one per file, run in alphabetical filename order
[01:54:49] <rudi_s> pyzozord: https://go.dev/ref/spec#Package_initialization and scroll down a bit
[01:55:02] <ikke> oh, multiple per file even
[01:55:20] <teocle> pyzozord: also, if package A imports package B, then B's init() runs before A's init()
[01:55:43] <fizzie> "To ensure reproducible initialization behavior, build systems are encouraged to present multiple files belonging to the same package in lexical file name order to a compiler." So it's not guaranteed to be alphabetical, just "encouraged".
[01:55:55] <fizzie> The same way a mobster would encourage a restaurant owner.
[01:56:08] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[01:56:24] *** Joins: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291)
[01:56:38] <pyzozord> ugh so is this like soft UB about init order?
[01:56:53] <pyzozord> s/ugh/uh/
[01:58:05] <rudi_s> Yes, so don't depend on it.
[01:58:10] <pyzozord> Is there a file scope in go? Why are inits per file?
[01:58:39] <fizzie> What do you mean by "per file" exactly?
[01:59:58] <pyzozord> as far as I understand I can define multiple init functions in each file and they all will be called
[02:00:08] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:00:41] <pyzozord> also from here https://go.dev/doc/effective_go#init "each source file can define its own niladic init function"
[02:01:00] <fizzie> "(Actually each file can have multiple init functions.)"
[02:01:00] <ramblebamble> Hi there, I am using Go 1.17.5 and I am unable to build a static binary is there a way to build one at all in 1.17.5 or is that not possible anymore, because from what I gathered it has become increasingly harder to do so over the years
[02:01:07] <fizzie> The only thing that's really file scope is the scope of a package name introduced by an `import` declaration.
[02:01:09] <teocle> pyzozord: yeah, if you want to control the order, just define individual functions and place them in whatever order is necessary in a single init()
[02:01:15] <b0nn> There's no "per file" scope
[02:01:32] <b0nn> So, multiple inits in a package potentially have race conditions
[02:02:05] <pyzozord> oh so they could be potentially executed in different threads?
[02:02:08] <blinux> So, how is the module and package name different? I example.com/greetings for the module name by just "greetings" for the package name.
[02:02:33] <b0nn> a race condition is predicated on the order of completion, single threaded is still racy
[02:02:34] <fizzie> https://go.dev/ref/spec#Declarations_and_scope has a list of 6 different scopes things can have. The only one that's at the file level is: "3. The scope of the package name of an imported package is the file block of the file containing the import declaration."
[02:03:18] <pyzozord> right so no file scope (except package and imports)
[02:03:24] <b0nn> ^ bring back header files!!!
[02:03:40] <b0nn> but only for imports
[02:03:45] <pyzozord> and init function(s) are many per file and executed in arbitrary order
[02:05:31] <b0nn> inits are a side effect of importing, I'm of the opinion that an explicit run once call is better
[02:05:34] <fizzie> blinux: A module is a collection of packages. The "example.com/greetings" module might consist of packages with import paths like "example.com/greetings" and "example.com/greetings/internal/foo". Each package has a package name as well (the thing declared as `package greetings`), and by convention that matches the last component of the import path. And finally, when importing a package you can
[02:05:35] <fizzie> override the identifier used to refer to that package in the file where you import it.
[02:05:44] <pyzozord> that init thing seems flaky, why add this at all, what's the usecase
[02:06:15] <b0nn> guaranteed to be run when imported
[02:06:52] <b0nn> explicit calls require the person importing to know to runa given method
[02:07:01] <pyzozord> well I guess the real usecase is "add non-breaking init logic to your library"
[02:08:02] <b0nn> you often see import _ "foo" // that's the developer running an init (eg for a databse driver)
[02:08:13] <ramblebamble> ok, apparently I am already building a static binary when using ldd I am  greeted with "not a dynamic executable" -.-, can you guys then maybe tell me why it is throwing memory exceptions when run inside a scratch-docker-image?
[02:08:15] <pyzozord> I guess? Because otherwise if I can't control or relay on the order of these imports they are really very limited in usefulness
[02:09:42] <b0nn> ramblebamble: link to the code you are building, the commands that you run, and the errors produced
[02:10:19] <b0nn> Go itself produces a statically linked binary, but if you are doing cgo stuff - I unno
[02:10:59] <b0nn> and, if your code contains unsafe stuff.. also, I unno
[02:12:06] <blinux> fizzie: OK, thank you. It may make more sense to me as I keep going. The module init file and package name and import seemed like maybe they should also specify the module, but the package decleration does not.
[02:12:50] <ramblebamble> b0nn, I have been using various combinations unsuccessfully, -tags "os.....,net", CGO_ENABLED=0 also exporting it, tried go install --installsuffix cgo, and the panic always occures when I try to read the body of an http response(using the build in library)
[02:12:56] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[02:13:56] <b0nn> ramblebamble: Write up a little MVP to show what you are doing
[02:14:24] <b0nn> Also, is that a build time or runtime panic?
[02:14:44] <b0nn> or, just paste the panic somewhere (edit out the embarresing bits if you want)
[02:14:54] <b0nn> embarrassing
[02:15:04] <b0nn> dammit irssi spell check me
[02:20:11] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[02:20:19] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Ping timeout (120 seconds))
[02:22:32] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:22:57] <ramblebamble> b0nn, sorry, pressed the wrong shortcut, again......
[02:22:58] <respite> 4real.
[02:23:03] <ramblebamble> https://pastebin.com/haKLpLLd, b0nn
[02:23:51] <b0nn> ramblebamble: a runtime error where you are trying to access data that's attached to a nil pointer
[02:23:57] <b0nn> the build is fine
[02:24:00] <ramblebamble> I am creating a buffer and read it after the http-library processed it. it is running inside a subroutine
[02:24:28] <b0nn> it looks like keys is nil
[02:24:48] <ramblebamble> yes and it also runs when I run it inside e.g. the google golang docker-container or my system, so the data-access/lifetime should be fine, it only fails, once I try to run it inside a scratch docker-image
[02:25:46] <b0nn> heh, I'm not going to try and troubleshoot via IRC a problem where I am not being given all of the information required or requested.
[02:27:36] <ramblebamble> BAI am currently working on the minimal example, I was actually just hoping for the propper compiler switches(after all they appear to have changed over the years as well), or a note saying, the http-library cannot run in a subroutine without CGO or stuff like that
[02:28:33] <lazyreader> there should be no special compiler switches needed other than CGO_ENABLED=0 to produce a static binary, unless you're actively doing something complicated
[02:29:27] <lazyreader> the stdlib http server runs in a goroutine just fine - everything is in a goroutine in go, in some sense, even main.
[02:30:53] <lazyreader> if it works in a "normal" container but not a scratch container, you must be trying to load something off the filesystem that you're not including in the container.
[02:31:49] <ramblebamble> lazyreader, nope that operation is working fine, b0nn, the minimal example https://pastebin.com/9CyF6cZF
[02:32:35] <ramblebamble> let's ignore the fact that I am not casting the buffer and a matrix is printed, the program runs on my system Linux X64_86, I create the container and try to run the container, it fails
[02:33:07] <ramblebamble> Ah damn wrong error-message,
[02:33:12] <ramblebamble> I will udpate the Dockerfile
[02:33:38] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Remote host closed the connection)
[02:33:50] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 260 seconds)
[02:36:52] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[02:37:05] <lazyreader> if you're hitting issues with `exec format error`, you may need to set GOOS and GOARCH at the build step to match your docker-host
[02:37:19] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:37:20] <lazyreader> i.e. GOOS=linux GOARCH=amd64 if the docker machine is linux-based
[02:38:33] <lazyreader> and that would be totally unrelated to panic: runtime error: invalid memory address or nil pointer dereference that we started this conversation with.
[02:39:34] *** Joins: kinlo (~peter@user/kinlo)
[02:39:44] <ramblebamble> Actually, it isquite peculiar, when all I do is insert println statements, and execute the binary(in the system and in the container) it works, so the build and the steps are correct
[02:41:02] <lazyreader> ok, so let's go back to your nil pointer dereference. what is the _real_ code that you're seeing have this issue? because that error trace doesn't match the code you provided.
[02:41:03] <ramblebamble> lazyreader,b0nn, So I must assume that, although the error-messages are different, the underlying cause might be related as both codes my project and the minimal example, fail the moment I introduce  byte-buffers and access them , so it is my minimal example
[02:41:48] <lazyreader> what do you mean by "introduce byte-buffers and access them"
[02:42:07] <lazyreader> your minimal example prints an empty buffer of 0s and exits when I run it.
[02:42:16] <ramblebamble> yes, have run it inside a docker-container?
[02:42:19] <lazyreader> yes.
[02:42:35] <ramblebamble> What docker-version are you using?
[02:42:50] <ramblebamble> and what golang-version?
[02:43:07] <lazyreader> Docker version 20.10.10, go1.17.5. but that is almost certainly irrelevant.
[02:43:19] <lazyreader> you need to share more of the actual code giving you trouble.
[02:43:24] *** Joins: rambleba1 (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:44:13] <rambleba1> lazyreader, sorry I was disconnected, so I did not get any potential answers, I was inquirig about golang and docker-version
[02:44:25] <lazyreader> Docker version 20.10.10, go1.17.5. but that is almost certainly irrelevant.
[02:44:26] <lazyreader> you need to share more of the actual code giving you trouble.
[02:46:16] *** Joins: smotchkkiss (~smotchkki@193.32.127.228)
[02:47:22] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Ping timeout: 256 seconds)
[02:47:39] <rambleba1> not this code, butsince you can run that code inside your docker container and outside of it, it must be not the code but s.th. in my environment because the pastebin I posted does not run on my system whem executed inside a docker-container
[02:48:08] <rambleba1> and since you cannot reproduce it I am somewhat at a loss, it is not like you can debug my system
[02:48:24] <rambleba1> last question if I may, what is your OS-version?
[02:48:34] <lazyreader> mac 12.
[02:48:49] <rambleba1> k arch with latest kernel on my end.
[02:48:55] <lazyreader> but I built the go binary explicitly with GOOS=linux GOARCH=amd64
[02:49:04] <lazyreader> which matches my target docker environment
[02:50:00] <lazyreader> https://go.dev/play/p/aitnOG-f_OY so, this does not run for you in docker. what error message do you get when you run it?
[02:50:42] <rambleba1> correct, I get standard_init_linux.go:228: exec user process caused: no such file or directory
[02:51:28] <lazyreader> change your dockerfile to replace `entrypoint` with CMD ["/t"]
[02:51:35] <rambleba1> I replaced the entire  function body with fmt.Println("hello") to exclude mistakes made for the docker-setup and it runs and prints hello
[02:52:11] <rambleba1> will do, but I believe an Entrypoint is required, otherwise it should ask for a shell not present on the system
[02:52:27] <lazyreader> incorrect; that's the change I made to make it run locally.
[02:52:36] <lazyreader> well, in docker, locally.
[02:54:15] <lazyreader> the "exec user process" error you're receiving is a docker error, not a go one. it means that docker cannot start your container for that reason.
[02:55:35] <rambleba1> Ah learned s.th. new .
[02:55:47] <rambleba1> So I replaced ENTRYPOINT with CMD, and I am still seeing the same error
[02:56:53] *** Joins: wantless (~wantless@c-73-59-103-110.hsd1.wa.comcast.net)
[02:57:28] <lazyreader> I don't know what to tell you, but those errors are definitely related to your docker setup, not go specifically.
[02:57:46] *** Parts: wantless (~wantless@c-73-59-103-110.hsd1.wa.comcast.net) ()
[02:58:36] <lazyreader> #docker on this very same server may be able to help you more.
[02:59:29] *** Quits: bluedust (~bluedust@103.148.20.45) (Remote host closed the connection)
[02:59:38] <rambleba1> The only customization I had on my docker-setup was usermapping for the namespaces, but the problem persists even after disabling
[02:59:54] <rambleba1> yeah thank you, at least I now know what it is not  cheers
[03:01:41] *** Quits: rambleba1 (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[03:04:21] <pyzozord> make(map[key-type]value-type) seems to allocate memory for a map on heap, is there a waye to allocate a map on stack?
[03:06:03] <lazyreader> https://go.dev/doc/faq#stack_or_heap : if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the garbage-collected heap to avoid dangling pointer errors. Also, if a local variable is very large, it might make more sense to store it on the heap rather than the
[03:06:03] <lazyreader> stack.
[03:06:22] <lazyreader> there's no way to directly control this from the language.
[03:07:41] <lazyreader> why do you want to try and force it onto the stack?
[03:08:35] <pyzozord> because "The storage location does have an effect on writing efficient programs."
[03:08:39] <b0nn> related to a conversation recently about zero values, I'm not 100% sure that maps /can/ be built on the stack
[03:09:19] <b0nn> also, how are you determining if the map is being built on the heap or the stack?
[03:09:48] <pyzozord> I am guessing. It seems easier to implement it on heap from C perspective
[03:09:55] <pyzozord> but that's why I asked
[03:10:22] <b0nn> honestly, the only way to be sure is to inspect the compiler and runtime code
[03:10:37] <b0nn> But, as I say, I'm personally not 100% sure on the rules for maps
[03:10:46] <pyzozord> ok I see
[03:11:22] <pyzozord> the most canonical hashmap example from K&R's C is full of linked lists with each item of a list being a separate heap allocation
[03:11:23] <lazyreader> if you think there's a performance impact, write a Benchmark test to see if it matters
[03:11:51] <b0nn> compile a simple program with a function that has a map, that assigns a key (so it's used) but never prints it or passes it about, and run the escape analyser over it
[03:12:12] <lazyreader> https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d see this blog post for tips on that
[03:14:54] <pyzozord> thanks
[03:15:06] <fizzie> I'd be kind of surprised if the compiler ever did build _actual_ hashmaps on the stack. Seems like it'd be quite the hassle when e.g. resizing the bucket array.
[03:16:03] <pyzozord> yes, that was my assumption to
[03:16:06] <lazyreader> https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics
[03:16:26] <b0nn> https://go.dev/play/p/ce1CMVCWmOC
[03:16:42] <b0nn> Apparently maps don't escape after all (TIL)
[03:16:44] <lazyreader> if you're curious about the details of how go's hashmap is implemented
[03:17:41] <pyzozord> is the idea of escaping a synonim of escaping stack data to heap?
[03:17:49] <lazyreader> yes.
[03:18:11] <pyzozord> in other words, do all "not escaped" values live on stack and all "escaped" values live on heap?
[03:20:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[03:20:39] <lazyreader> I don't know if you'd see someone using the term that broadly. "escape" just means "the compiler believes this value will outlive its function, and therefore 'escapes' into the heap"
[03:21:16] <fizzie> Given that a map value is basically full of pointers, I definitely wouldn't take the fact that the map object doesn't escape as a sign that the actual data of the map is allocated on the stack, if that's what you're mostly curious about.
[03:21:51] <b0nn> I wonder if it's like other objects that are too big for a given stack so get shifted to the heap
[03:21:58] <pyzozord> yes, it seems like the idea of escaping and stack/heap are not tied that closely together
[03:22:01] <lazyreader> again, the point of all this is: don't try and reason too hard about it unless you've determined that it's actually a performance bottleneck
[03:22:16] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:22:17] <pyzozord> when value escapes it always migrates to heap. But that doesn't mean it couldn't have been there already
[03:22:30] <b0nn> that is - once a map gets n keys with values that exceed the limit - off you pop to the heap mr bloaty map
[03:22:49] *** Joins: fikran (~fikran@user/fikran)
[03:24:25] <b0nn> I *think* that proper analysis can be done with dumpheap and dumpstack *or* gaining knowledge about the memory address of the stacks and heap and calculating where the object is
[03:24:34] <b0nn> Or, look at the code
[03:25:19] <pyzozord> seems like go really doesn't want you to think about memory
[03:25:35] <b0nn> Runeimt: https://go.dev/src/runtime/ and Compiler: https://go.dev/src/cmd/compile/
[03:25:36] <pyzozord> but on the other hand it does want you to think about pointers and memory layout in structs
[03:26:09] <b0nn> heh - the whole point of the GC was to take the burden of memory management off devs
[03:26:28] <b0nn> and Go's pointers aren't an exact match to (say) C or C++ pointers
[03:26:34] <lazyreader> it wants you to think about pointers in the sense of "I want a shared copy of this or not", not pointer math
[03:26:44] <b0nn> unsafe.Pointer is closest
[03:27:36] <lazyreader> honestly I haven't see struct memory layout come up too often
[03:27:49] <lazyreader> (as a practical concern)
[03:28:14] <johnjaye> isn't that not a pointer at all then, just a reference?
[03:28:18] <johnjaye> to use java speak
[03:28:24] <pyzozord> I can't quite get into the go headspace
[03:28:28] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[03:28:31] <johnjaye> the whole "point" of pointers is to do arithmetic with them
[03:29:02] <pyzozord> how do you worry about performance with a unpredictable garbage collector, how do you worry about memory without control over stack/heap
[03:29:09] <b0nn> johnjaye: in my mind they are closer to java's references, yes, but, again, they don't overlap exactly
[03:30:18] <pyzozord> Do I just don't worry about it until it's a problem? And then when it's a problem what do I do.
[03:30:45] <lazyreader> honestly: if your constraints are such that you have strong real-time performance requirements and cannot abide unpredictable GC behavior or memory usage, go may not be a good fit for the problem
[03:30:59] <b0nn> pyzozord: what everybody does - look for bottlenecks and see how to optimise them
[03:31:11] *** Joins: hanzo (uid532183@user/hanzo)
[03:31:23] <lazyreader> and go does give you good tools for benchmarking and testing
[03:31:36] <b0nn> pproff is quite the helper
[03:31:38] <pyzozord> ok so I should think of go as a bit closer to python than to c
[03:32:06] <b0nn> closer to java than python :)
[03:32:09] <pyzozord> I put it right in the middle between python and c, and assumed it comes with full control over memory if I want it
[03:32:33] <lazyreader> it's certainly higher-level than C, which wants to pretend the universe is a PDP-7
[03:32:35] <pyzozord> but it seems now that go is actually somewhat closer to python and further from c
[03:32:40] <ramblebamble> lazyreader, just giving some feedback. The error had a .go at the end so I started digging some more, turns out for the simple example with the matrix being printed out, the solution was to ad GOOS and GOARCH, which I thought strage as the images themselves are usually running the same Architecture and OS as the host and go would also build it like that I assume, anyways, fixed that problem, but
[03:32:42] <ramblebamble> not other one, but at this point I cannot care any longer, just opted for alpine, is small enought for me and solves my problem as well
[03:33:14] <lazyreader> the fact that it has a .go at the end is because docker is written in go
[03:33:23] <lazyreader> and the error message is coming out of docker
[03:33:32] * ramblebamble facepalms
[03:33:35] <ramblebamble> ok that makes sense
[03:33:36] <lazyreader> I mentioned GOOS and GOARCH
[03:33:47] <ramblebamble> yes you did
[03:34:06] <ramblebamble> but I did not expect it to matter as I did not want to change my architecture
[03:34:14] <ramblebamble> or the os I am compiling for
[03:34:34] <lazyreader> apparently something differed between your compiler host and your docker environment.
[03:35:39] <ramblebamble> no I punched in GOOS=linux GOARCH=amd64 and those are that is describing my system
[03:36:18] <lazyreader> ok
[03:38:43] *** Joins: todd_ (~todd@gateway/tor-sasl/toddf)
[03:39:03] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[03:42:03] <ramblebamble> anyways, thank you for bearing with me and helping me
[03:45:42] *** anandn is now known as anandn[away]
[03:45:42] *** Quits: anandn[away] (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:45:44] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Quit: Leaving)
[03:49:24] <bpalmer> pyzozord: or perhaps you're assuming too much about what control over memory means.
[03:49:49] <bpalmer> pyzozord: note that C does not require a stack or heap, so the C language does not let you control allocation at that level.
[03:50:38] *** Joins: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291)
[03:52:47] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[03:54:54] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:55:21] <b0nn> Hmm, completely off topic, does a Windows PE have a stack/heap model?
[03:55:53] <b0nn> (assuming I'm right to call it Windows PE - I'm referring to the Windows exectuable format, much like Linux' ELF)
[04:01:23] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:07:37] <fizzie> I would say it's more of a property of the whole operating environment rather than just the executable format, but at least the 16-bit and 32-bit Windows systems have a (per-thread) stack and a... well, several heaps. (GlobalAlloc, LocalAlloc, HeapAlloc, VirtualAlloc, CoTaskMemAlloc, ...; so many ways to allocate memory.)
[04:08:52] <b0nn> hmm, I had googled, but the answer wasn't in the top 2 results so assumed it (the answer) didn't exist
[04:10:16] *** Joins: ADHD (~XXX@user/ADHD)
[04:10:53] <ADHD> What does `.(bool)` mean in line 21 in this code https://termbin.com/gv5u ?
[04:11:04] <b0nn> type assertion
[04:11:21] <ADHD> b0nn: i see.
[04:11:31] <b0nn> https://go.dev/tour/methods/15
[04:11:38] <ADHD> Thanks.
[04:11:54] <b0nn> np - unless you know the name it's a difficult thing to google for
[04:12:17] <ADHD> Yeah
[04:16:13] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[04:41:27] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:42:26] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:57] *** Joins: tnez (~el@user/tnez)
[05:00:23] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:07:22] *** Joins: hoppity (~hoppity@user/hoppity)
[05:07:26] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:07:55] <hoppity> Can I make GPL software with Go?
[05:08:10] <bpalmer> sure.
[05:08:44] <foobaz> i have
[05:15:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[05:15:06] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:16:53] *** Joins: ADHD_ (~XXX@bras-vprn-toroon4834w-lp130-15-184-147-71-53.dsl.bell.ca)
[05:16:55] *** Quits: ADHD_ (~XXX@bras-vprn-toroon4834w-lp130-15-184-147-71-53.dsl.bell.ca) (Client Quit)
[05:17:05] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[05:19:39] *** Quits: ADHD (~XXX@user/ADHD) (Ping timeout: 256 seconds)
[05:21:58] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:22:06] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:25:24] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[05:28:00] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:28:37] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[05:30:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:30:56] *** Joins: shtirlic_ (~shtirlic@178.70.131.230)
[05:32:10] *** Joins: fikran (~fikran@user/fikran)
[05:33:49] *** Quits: shtirlic (~shtirlic@95-55-25-207.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[05:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[05:36:03] *** Joins: s0k1t (~user@vps-f3ad6eb6.vps.ovh.ca)
[05:36:22] <hoppity> thank you
[05:36:39] *** Joins: justIrresolute (~justache@user/justache)
[05:44:40] *** Joins: califax- (~califax@user/califx)
[05:46:45] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:48:24] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:48:25] *** califax- is now known as califax
[05:52:48] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[05:54:58] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[05:55:16] *** Quits: hoppity (~hoppity@user/hoppity) ()
[05:57:21] *** Joins: trafficjam (~trafficja@119.17.42.59)
[05:59:36] *** Joins: neurocyte09172 (~neurocyte@IP-094016064252.dynamic.medianet-world.de)
[05:59:36] *** Quits: neurocyte09172 (~neurocyte@IP-094016064252.dynamic.medianet-world.de) (Changing host)
[05:59:36] *** Joins: neurocyte09172 (~neurocyte@user/neurocyte)
[06:01:25] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:01:25] *** neurocyte09172 is now known as neurocyte0917
[06:04:04] *** Joins: Maxattax97 (~max@2603:900a:1501:a7ca::100)
[06:05:09] *** Joins: cskr (~cskr@49.207.223.217)
[06:11:26] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[06:14:24] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:20:05] *** Joins: gnoirzox (~gnoirzox@user/gnoirzox)
[06:20:09] <gnoirzox> hello
[06:26:06] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[06:26:59] *** Quits: gnoirzox (~gnoirzox@user/gnoirzox) (Quit: WeeChat 2.8)
[06:27:25] *** Quits: zwr (~zwr@2804:d45:b966:fb00:7298:34ad:5290:1c7e) (Ping timeout: 240 seconds)
[06:28:24] *** Joins: zwr (~zwr@2804:d45:b966:fb00:2bd0:5e5e:ca40:5981)
[06:33:22] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[06:36:38] *** Joins: justIrresolute (~justache@user/justache)
[06:40:20] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[06:42:35] *** Quits: jackneillll (~jackneill@20014C4E1821BB00CA0618EC531795A9.dsl.pool.telekom.hu) (Remote host closed the connection)
[06:42:53] *** Joins: jackneillll (~jackneill@20014C4E1821BB006B03410CE4D9FE18.dsl.pool.telekom.hu)
[06:46:13] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[06:51:11] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca) (Quit: WeeChat 3.4)
[06:51:26] *** Joins: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca)
[06:54:59] *** Quits: cskr (~cskr@49.207.223.217) (Quit: Leaving)
[06:57:32] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[06:59:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:02:59] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[07:03:58] *** anandn is now known as anandn[away]
[07:03:58] *** Quits: anandn[away] (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:08:46] *** Joins: anandn (~anandn@98.232.3.180)
[07:09:51] *** Quits: anandn (~anandn@98.232.3.180) (Client Quit)
[07:10:48] *** Joins: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291)
[07:11:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:18:31] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:19:39] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[07:20:17] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 240 seconds)
[07:23:04] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Quit: Tach_)
[07:26:37] *** Quits: jolan (~jolan@ec2.jolan.org) (Quit: leaving)
[07:27:54] *** Joins: jolan (~jolan@ec2.jolan.org)
[07:34:23] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[07:36:37] *** Joins: justIrresolute (~justache@user/justache)
[07:39:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[07:41:32] *** Joins: fikran (~fikran@user/fikran)
[07:42:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:45:47] *** Joins: madsa (~madsa@user/madsa)
[07:52:03] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:53:44] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:00:55] *** Joins: jackneilll (~jackneill@20014C4E181DC800B16B7E98DCB43E06.dsl.pool.telekom.hu)
[08:03:25] *** Quits: jackneillll (~jackneill@20014C4E1821BB006B03410CE4D9FE18.dsl.pool.telekom.hu) (Ping timeout: 240 seconds)
[08:25:22] *** Joins: syg (sid521913@id-521913.lymington.irccloud.com)
[08:25:54] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[08:29:34] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[08:33:34] *** Joins: vptr (~vptr@user/vptr)
[08:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[08:36:37] *** Joins: justIrresolute (~justache@user/justache)
[08:49:54] *** Quits: trafficjam (~trafficja@119.17.42.59) (Ping timeout: 256 seconds)
[08:51:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[08:52:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:53:01] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[09:01:22] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[09:07:39] *** Joins: Kuna (~Kuna@c-73-41-82-119.hsd1.ca.comcast.net)
[09:08:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:13:26] *** Quits: Kuna (~Kuna@c-73-41-82-119.hsd1.ca.comcast.net) (Quit: Client closed)
[09:15:15] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Read error: Connection reset by peer)
[09:15:20] *** Joins: anon__ (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[09:15:36] *** Quits: anon__ (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[09:16:22] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[09:17:21] *** Joins: trafficjam (~trafficja@119.17.42.59)
[09:20:04] *** Quits: trafficjam (~trafficja@119.17.42.59) (Client Quit)
[09:41:25] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:44:43] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:48:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[09:50:54] *** Joins: fikran (~fikran@user/fikran)
[09:52:56] *** Joins: bpalmer` (~user@user/bpalmer)
[09:54:53] *** Quits: bpalmer (~user@user/bpalmer) (Killed (NickServ (GHOST command used by bpalmer`)))
[09:54:57] *** bpalmer` is now known as bpalmer
[09:56:02] *** Joins: bt-01 (~bt-01@49.207.0.191)
[09:56:39] *** Joins: Atque (~Atque@user/atque)
[10:03:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[10:11:10] *** Joins: gnoirzox (~gnoirzox@user/gnoirzox)
[10:15:38] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:18:01] *** Quits: madsa (~madsa@user/madsa) (Quit: Leaving)
[10:32:48] *** Quits: Maxattax97 (~max@2603:900a:1501:a7ca::100) (Quit: WeeChat 3.4)
[10:37:49] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Quit: KonaArctic)
[10:39:30] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[10:43:08] *** Joins: nitrix (~nitrix@user/nitrix)
[10:45:58] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[10:55:42] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:57:54] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:29:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:33:27] *** michele- is now known as michele
[11:41:05] *** Joins: shtirlic (~shtirlic@178.70.131.230)
[11:43:25] *** Quits: shtirlic_ (~shtirlic@178.70.131.230) (Ping timeout: 240 seconds)
[11:49:01] *** Quits: lemmi (~lemmi@user/lemmi) (Remote host closed the connection)
[11:52:37] *** Quits: theoceaniscool (~theoceani@119.12.233.166) (Ping timeout: 240 seconds)
[11:55:56] *** Joins: Atque (~Atque@user/atque)
[11:58:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[12:00:15] *** Joins: fikran (~fikran@user/fikran)
[12:03:35] *** Joins: analogsalad (~analogsal@user/analogsalad)
[12:05:03] *** Joins: theoceaniscool (~theoceani@119.12.233.166)
[12:14:36] *** Quits: theoceaniscool (~theoceani@119.12.233.166) (Ping timeout: 256 seconds)
[12:21:49] *** Quits: bt-01 (~bt-01@49.207.0.191) (Ping timeout: 256 seconds)
[12:22:56] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:25:21] *** Quits: pjs (~pjs@user/pjs) (Ping timeout: 245 seconds)
[12:27:03] *** Joins: pjs (~pjs@user/pjs)
[12:32:27] *** Joins: theoceaniscool (~theoceani@119.12.233.166)
[12:35:05] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[12:35:14] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[12:36:38] *** Joins: justIrresolute (~justache@user/justache)
[12:37:02] *** Joins: Yologuy (~Yologuy@2603-8001-2042-f749-d0c6-3e28-aaa1-215f.res6.spectrum.com)
[12:37:17] *** Joins: lemmi (~lemmi@user/lemmi)
[12:38:32] *** Parts: Yologuy (~Yologuy@2603-8001-2042-f749-d0c6-3e28-aaa1-215f.res6.spectrum.com) ()
[12:40:21] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:44:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[12:52:17] *** Joins: rendar (~rendar@user/rendar)
[13:02:47] *** Joins: avakand_ (~avakand@static.164.226.201.195.clients.your-server.de)
[13:05:08] *** Quits: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:06:26] *** Joins: trafficjam (~qubes@119.17.42.59)
[13:12:35] *** Joins: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291)
[13:17:43] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:21:43] *** Joins: Yologuy (~Yologuy@2603-8001-2042-f749-d0c6-3e28-aaa1-215f.res6.spectrum.com)
[13:24:08] *** Quits: Yologuy (~Yologuy@2603-8001-2042-f749-d0c6-3e28-aaa1-215f.res6.spectrum.com) (Client Quit)
[13:31:00] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[13:31:37] <trafficjam> hello
[13:49:55] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[13:51:39] *** Joins: casastorta (~casastort@172-104-250-171.ip.linodeusercontent.com)
[13:51:40] *** Quits: casastorta (~casastort@172-104-250-171.ip.linodeusercontent.com) (Remote host closed the connection)
[13:52:13] *** Joins: bt-01 (~bt-01@49.207.0.191)
[13:53:13] <pyzozord> how does go store strings?
[13:53:28] <pyzozord> are they stored on stack or on heap?
[13:53:55] <ikke> pyzozord: afaik there are heuristics that determine that
[13:54:14] *** Joins: casastorta (~casastort@172-104-250-171.ip.linodeusercontent.com)
[13:54:27] <pyzozord> oh ok, so it really up to go to decide
[13:57:40] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[13:58:17] <pyzozord> what is the best book for learning golang?
[13:58:33] <pyzozord> the most cult classic / bible kind of book
[14:00:19] <pyzozord> is The Go Programming Language by Kernighan good?
[14:02:00] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[14:02:58] <bookworm> you are worrying about things you don't have to worry about, just let the language handle it
[14:03:14] <bookworm> and yes, it is  If slightly out of date by now
[14:03:41] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[14:03:56] <bookworm> missing some things which are new-ish in the stdlib but with the compatibility promise you can still apply the things they write in there
[14:04:15] <pyzozord> How important is being not outdated in the go world? I read K&R2 last year, which is abook from 80s and it was still very relevant, but possibly because in C world things don't move that fast
[14:04:36] <bookworm> K&R2 is horribly outdated in the C world
[14:04:58] <bookworm> C11 and later specs are a thing
[14:05:10] <pyzozord> yeah they aren't that different
[14:05:19] <bookworm> ehm... sure
[14:05:34] <pyzozord> of course I was learning C from K&R2 and looking at the C18 draft at the same time
[14:06:24] *** Joins: danmurf (uid480399@user/danmurf)
[14:06:31] <pyzozord> it seem like maybe 5-10% of stuff changed between the 80s and now in C
[14:06:37] <bookworm> In any case, Go is not C, don't think about stuff you need to worry in C, worry about things you need to worry about in Go
[14:06:44] <pyzozord> I don't know how fast things go in Go
[14:07:10] <bookworm> you really didn't write enough C if you think the change from C11 and later to K&R C is 10%
[14:07:12] <pyzozord> so I don't know if the Kernigan book is still a good choice
[14:07:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:07:27] <bookworm> read above, it is
[14:08:14] *** Joins: nocture (~textual@c-xd4ed87fa.cust.hiper.dk)
[14:09:36] *** Joins: fikran (~fikran@user/fikran)
[14:09:57] <pyzozord> I don't agree about 10% if you look here https://en.cppreference.com/w/c/language you can see it's not that much. It's even less if you consider things that are really not that major and just focus on some specific subject
[14:11:17] <pyzozord> the language didn't change, it essentially got 10% bigger, and most of this growth don't really have a major impact on how c is written
[14:11:27] <bookworm> let's keep it to go in here
[14:11:54] <pyzozord> sure, well you started I just didn't end it
[14:13:03] *** Quits: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:13:51] <pyzozord> Again question to everone about The Go Programming Language, do you feel it still in vast majority a relevant book today. Asking because I don't know the go community and how fast things change here
[14:16:02] <ikke> I haven't read it, so not sure
[14:17:18] <pyzozord> ikke: would you recommend any other book?
[14:18:00] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[14:19:05] <j416> pyzozord: try Effective Go
[14:19:11] <j416> not a book, but a good resource
[14:20:31] <pyzozord> j416: do you mean this article? https://go.dev/doc/effective_go Yeah I'm planning to go through all of this, but I was thinking that's not enough
[14:20:59] *** Quits: nocture (~textual@c-xd4ed87fa.cust.hiper.dk) (Quit: nocture)
[14:21:01] <j416> that one yes
[14:21:29] <j416> that and the language spec is pretty much all I read when I was new to the language
[14:21:38] <j416> I thought it was plenty enough for the time
[14:22:22] <j416> what's missing are things that are maybe difficult to teach anyway, like idiomatic style and project structure, conventions.
[14:22:38] <j416> but it covers the language well
[14:23:26] <pyzozord> yes the less technical things like engineering with go or more technical things like implementation of go
[14:29:58] <bookworm> go is written in go, you can simply look at the internal for all the nitty gritty details. Higher level summaries are usually available from the gophercon talks
[14:30:20] <bookworm> how the scheduler does its job for instance
[14:31:49] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[14:32:34] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[14:33:54] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[14:36:35] <pyzozord> nice will check out gophercon
[14:37:22] <pyzozord> to be clear, I'm not particularly interested in how go is implemented in code although it's very cool I can just check it out since it's written in go. I'm more interested in high level overview of the low level implementation so to speak
[14:38:18] <pyzozord> I want to understand how it works under the hood without being bothered about what particular code is used to implement these ideas.
[14:39:02] <pyzozord> It's a bit hard to explain what I am looking for. I guess I want a step below the language but not all the way down to looking at the source code of go
[14:39:14] <bookworm> you can't really separate the two as the chosen algorithms and datastructures imply a certain behavior\
[14:39:43] <bookworm> depending on how "deep" you are actually trying to understand it
[14:40:07] <ikke> pyzozord: maybe https://go.dev/ref/spec?
[14:40:09] <bookworm> also relying too much on those things is dangerous
[14:40:18] <ikke> though that's mostly the language specification
[14:40:26] <bookworm> code against the spec, not against the current behavior of the compiler
[14:40:50] <pyzozord> ikke: that's on my list as well, maybe that's in there indeed. I haven't looked at it yet.
[14:40:56] <bookworm> they are free to change the implementation as long as they still adhere to the spec, meaning if you start to micro optimize things because it's faster today it may be horrid in the future
[14:42:05] <pyzozord> yeah that sounds right
[14:42:20] <pyzozord> indeed maybe I just need to read the spec
[14:42:57] <pyzozord> this one seems very friendly to read too, so it shouldn't be a problem
[14:43:10] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[14:44:07] <pyzozord> and for higher level things like idioms and patterns?
[14:45:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:49:08] *** Quits: casastorta (~casastort@172-104-250-171.ip.linodeusercontent.com) (Quit: ZNC 1.8.2 - https://znc.in)
[14:51:23] *** Joins: casastorta (~casastort@172-104-252-23.ip.linodeusercontent.com)
[14:53:45] *** Quits: casastorta (~casastort@172-104-252-23.ip.linodeusercontent.com) (Client Quit)
[14:55:24] *** Joins: casastorta (~casastort@172-104-250-171.ip.linodeusercontent.com)
[14:56:26] *** Quits: casastorta (~casastort@172-104-250-171.ip.linodeusercontent.com) (Client Quit)
[14:57:50] *** Joins: casastorta (~casastort@172-104-252-120.ip.linodeusercontent.com)
[15:03:17] *** Joins: zer0bitz (~zer0bitz@196.244.192.60)
[15:03:24] *** Quits: casastorta (~casastort@172-104-252-120.ip.linodeusercontent.com) (Quit: ZNC 1.8.2 - https://znc.in)
[15:04:52] *** Joins: casastorta (~casastort@neo1.krivokuca.net)
[15:06:15] *** Quits: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne) (Quit: No Ping reply in 180 seconds.)
[15:06:30] *** Joins: naicam|ne (~naicam|ne@wireguard/tunneler/naicamne)
[15:07:38] <carlavilla> I'm starting a project using the Bun ORM, but I don't find an example about how to create a db pool, there's an example?
[15:08:45] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[15:11:32] *** Quits: casastorta (~casastort@neo1.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[15:17:39] <j416> eek
[15:19:47] <j416> (sorry, orm allergy)
[15:20:27] <carlavilla> Yes, but what alternative do I have? Use pgx directly?
[15:23:10] <j416> yes
[15:23:25] <j416> wrap access
[15:23:50] <j416> (so that you can write tests without needing to populate your db each time)
[15:24:06] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[15:24:36] <carlavilla> I'm gonna take a look
[15:27:05] <carlavilla> pgx supports db pool, nice :)
[15:28:31] <j416> I typically have the db access parts implement iterfaces that make sense for the domain; simple example https://go.dev/play/p/txtxnhGr42V
[15:29:08] <j416> then I can easily implement mocks or in-memory variants of that as needed
[15:29:25] <j416> using an ORM makes this very difficult
[15:30:06] *** Joins: casastorta (~casastort@neo1.krivokuca.net)
[15:30:12] <j416> of course you could use an ORM within your specific implementation, but then maybe there's not much benefit anymore
[15:30:33] <j416> and pure SQL is often easier to grok
[15:35:14] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[15:36:04] *** Joins: Atque (~Atque@user/atque)
[15:38:43] <carlavilla> Ok, so I created a file called config/database.go and a file called main.go. there's a way to open the pool each time the program starts and call it from main.go and execute queries? Example: https://go.dev/play/p/WWBGqw_Cgb4
[15:39:15] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[15:40:06] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[15:42:20] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[15:53:24] *** Quits: fling (~fling@user/fling) (Read error: Connection reset by peer)
[15:53:27] <carlavilla> Ok, I need to use ctx context.Context :)
[15:56:14] <fogobogo> yo! give head!
[15:58:32] *** Joins: fling (~fling@user/fling)
[15:58:57] *** Joins: bluedust (~bluedust@103.161.144.146)
[16:12:43] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[16:13:01] *** Quits: rdg (~rdg@user/rdg) (Ping timeout: 256 seconds)
[16:14:35] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[16:14:51] *** Joins: rdg (~rdg@user/rdg)
[16:17:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[16:18:58] *** Joins: fikran (~fikran@user/fikran)
[16:19:46] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:20:10] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:20:11] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[16:29:04] *** Quits: bluedust (~bluedust@103.161.144.146) (Remote host closed the connection)
[16:30:37] *** Quits: bt-01 (~bt-01@49.207.0.191) (Ping timeout: 240 seconds)
[16:31:25] *** Quits: avakand_ (~avakand@static.164.226.201.195.clients.your-server.de) (Remote host closed the connection)
[16:31:40] *** Joins: mrig (~mrig@user/mrig)
[16:38:35] *** Joins: ADHD (~XXX@user/ADHD)
[16:49:57] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 240 seconds)
[16:51:12] *** Joins: mrig (~mrig@user/mrig)
[16:51:13] *** Joins: bt-01 (~bt-01@49.207.0.191)
[16:54:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[16:54:34] *** Quits: shtirlic (~shtirlic@178.70.131.230) (Remote host closed the connection)
[16:55:12] *** Quits: mrig (~mrig@user/mrig) (Client Quit)
[16:57:05] *** Joins: mrig (~mrig@user/mrig)
[17:00:07] *** Joins: avakand (~avakand@static.164.226.201.195.clients.your-server.de)
[17:01:13] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:03:44] *** Joins: bluedust (~bluedust@103.161.144.146)
[17:06:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[17:06:39] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:09:25] *** Quits: bt-01 (~bt-01@49.207.0.191) (Ping timeout: 240 seconds)
[17:14:30] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[17:15:26] *** Joins: skulphant (uid17532@id-17532.tinside.irccloud.com)
[17:15:43] *** Joins: arinov (~arinov@31.142.76.178)
[17:19:51] *** Joins: timtraversy (~timtraver@2601:41:4301:d580:4ece:5420:3d33:2cc7)
[17:24:15] *** Joins: bt-01 (~bt-01@49.207.0.191)
[17:25:20] *** Quits: bluedust (~bluedust@103.161.144.146) (Remote host closed the connection)
[17:26:44] *** Quits: timtraversy (~timtraver@2601:41:4301:d580:4ece:5420:3d33:2cc7) (Quit: WeeChat 3.3)
[17:29:19] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[17:31:36] *** Joins: RougeR (~RougeR@user/rouger)
[17:32:13] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:32:50] <ramblebamble> hi there again, I was here yesterday, and I was trying to solve a substitude problem of mine, because it is not easy to provide a minimal example, which will pretty much be almostmy code and I hate posting my code, anyways. a general question, is there a known instance where the twitter api causes a problem for the net/http module?(we open a stream and basically never close it), it runs locally
[17:32:53] <ramblebamble> but whenever I run res.Body.Read(p) with p :=make([]byte,4096) and res:= http.DefaultClient.do(...) I receive a segfault
[17:33:13] <ramblebamble> I have found some errors which might be related but they are 4 years old and closed due to age https://github.com/golang/go/issues/21466
[17:33:41] <ramblebamble> This is what the code basically looks like https://pastebin.com/aQVFyRMD
[17:33:57] <ramblebamble> Line 10 causes a segFault in a dockerized environment
[17:35:18] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[17:36:23] *** Quits: bt-01 (~bt-01@49.207.0.191) (Remote host closed the connection)
[17:36:41] *** Joins: bt-01 (~bt-01@49.207.0.191)
[17:38:37] *** Joins: christophergray (~christoph@200.119.158.103)
[17:41:51] <fizzie> How about checking for errors from `http.DefaultClient.Do(req)` instead of just ignoring them? :)
[17:42:27] <fizzie> (Unless that was just for the purposes of illustration.)
[17:43:27] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:44:35] * ramblebamble laughs
[17:44:57] <ramblebamble> yeah thanks that solved it, could've been faster if I would have been more through
[17:46:41] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:48:22] <ramblebamble> Here is what happens. the tokens I use are coming from a k8s secret which is is using them in environment variables. those are strings and consequently wrapped in '' by the environment(just double checked i define them without those strings) and the ' are not part of the key, that also explains why it is working locally but not inside a container. I was too obsessed with somme obfuscated reason
[17:49:04] <ramblebamble> and checking it locally will therefore not result in the clue giving error-message I omitted trying to debug that thing in the container
[17:50:47] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Quit: Tach_)
[17:51:06] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[17:51:42] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:52:52] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:53:43] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Client Quit)
[17:54:05] *** Joins: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr)
[17:56:20] <pyzozord> How is go able to do things like go list -f '{{.ImportPath}}' where ImportPath is a struct member? Does go carry structs' metadata in runtime?
[17:57:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:58:29] *** Joins: bluedust (~bluedust@117.204.150.2)
[17:58:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:06:34] <j416> pyzozord: I don't know, but stdlib provides things to work with Go code; I would assume that it makes use of this. https://pkg.go.dev/go
[18:09:14] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Remote host closed the connection)
[18:15:51] <pyzozord> j416: what do you mean by "things to work with Go code"?
[18:18:24] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:18:48] <j416> pyzozord: packages
[18:18:56] <j416> functions, methods, things like this
[18:18:59] <j416> other buzzwords
[18:19:27] <pyzozord> sorry, I guess I was asking more about "work with Go code", what do you mean by that part?
[18:19:33] *** Quits: smotchkkiss (~smotchkki@193.32.127.228) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:20:15] <pyzozord> does go support "reflection"?
[18:20:18] *** Joins: smotchkkiss (~smotchkki@2a03:1b20:a:f011::a03e)
[18:20:47] <ikke> https://pkg.go.dev/reflect
[18:21:04] <pyzozord> ooh yeah that
[18:21:14] <j416> pyzozord: see the link I sent; that's what I meant.
[18:21:14] *** Joins: gts (~gts@183.82.179.216)
[18:21:15] <pyzozord> I guess that go list -f uses reflect then?
[18:21:46] <ikke> pyzozord: It's most likely static parsing
[18:21:51] <ikke> reflect is runtime
[18:21:56] <pyzozord> j416: that looked more like a parser to me
[18:22:16] <ikke> From the AST you can get those details
[18:22:49] <j416> pyzozord: there are many packages.
[18:23:02] <pyzozord> yep yep I know but that would be when one program reads another programs code, but I mean when program knows it's own structs in runtime
[18:23:07] <pyzozord> I think reflect does exactly that
[18:23:10] *** Quits: gts (~gts@183.82.179.216) (Remote host closed the connection)
[18:23:33] <ikke> yes, that's runtime
[18:23:42] <j416> yes, but "go list" is not your own program
[18:24:21] <pyzozord> yeah but I assumed that "go list" is written in go, so I was thinking of it as if that would be my program - how would I be able to write a program like that
[18:24:51] <pyzozord> program that has a struct and based on user input can select fields of that struct
[18:25:01] *** Quits: d42 (~root@user/d42) (Ping timeout: 240 seconds)
[18:25:26] <j416> walk the AST, find the structs, inspect. https://pkg.go.dev/go/ast
[18:25:32] <pyzozord> there are some roundabout ways to achieve this, from go help list descripting an actual struct it seemed like that struct is really implemented inside the that program
[18:25:55] <pyzozord> ok thanks
[18:26:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[18:26:15] <ikke> go list does not need to run (or even compile) your program to get access to that information
[18:26:19] <ikke> something that is required for reflection
[18:26:29] <pyzozord> yes, that was my point
[18:26:30] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[18:26:58] <pyzozord> oh sorry nevermind, now I am confusing things
[18:27:11] <pyzozord> I mean I know go reads my program but I wasn't focusing on that part
[18:27:31] <pyzozord> I just used it as an example of any program that has a struct in memory and is able to dynamically access fields of it's own struct
[18:27:53] <pyzozord> s/I know go reads my program/I k now go list reads my program/
[18:28:19] *** Joins: fikran (~fikran@user/fikran)
[18:28:28] *** Joins: gts (~gts@183.82.179.216)
[18:29:22] *** Joins: SebastianM (~seba@user/sebastianm)
[18:33:08] *** Quits: gts (~gts@183.82.179.216) (Ping timeout: 256 seconds)
[18:37:07] *** Joins: d42 (~root@user/d42)
[18:39:14] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[18:42:12] *** Quits: bt-01 (~bt-01@49.207.0.191) (Ping timeout: 256 seconds)
[18:42:45] <pyzozord> I found it
[18:42:46] <pyzozord> https://github.com/golang/go/blob/master/src/cmd/go/internal/list/list.go#L390
[18:42:57] <pyzozord> that eventually calls reflect https://github.com/golang/go/blob/master/src/text/template/exec.go#L208
[18:44:45] *** Joins: bt-01 (~bt-01@49.207.0.191)
[18:44:45] <pyzozord> need to learn how actually go does reflection, where does it store all the metadata
[18:45:40] *** Quits: Tach_ (~Tach@lfbn-lyo-1-869-115.w86-194.abo.wanadoo.fr) (Quit: Tach_)
[18:46:32] *** Joins: Tach (~Tach@user/tach)
[18:48:19] <pyzozord> It seems like runtime has a struct for each type in memory, I'm not sure how this works https://github.com/golang/go/blob/90860e0c3110ac5898dfe8e0e0fafd0aea8d979a/src/reflect/type.go#L315
[19:01:28] *** Quits: arinov (~arinov@31.142.76.178) (Read error: Connection reset by peer)
[19:01:29] *** Joins: arinov_ (~arinov@31.142.76.178)
[19:01:59] *** Quits: arinov_ (~arinov@31.142.76.178) (Remote host closed the connection)
[19:02:28] *** Joins: arinov (~arinov@31.142.76.178)
[19:04:44] *** Joins: fic (~fic@ip2504fcfc.dynamic.kabel-deutschland.de)
[19:04:58] *** Quits: bt-01 (~bt-01@49.207.0.191) (Read error: Connection reset by peer)
[19:05:38] *** Joins: bt-01 (~bt-01@49.207.0.191)
[19:05:58] *** Quits: fic (~fic@ip2504fcfc.dynamic.kabel-deutschland.de) (Client Quit)
[19:08:57] *** Quits: bt-01 (~bt-01@49.207.0.191) (Client Quit)
[19:11:37] *** Joins: fffiiiccc (~fffiiiccc@ip2504fcfc.dynamic.kabel-deutschland.de)
[19:12:30] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 260 seconds)
[19:19:03] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:19:18] *** Joins: transacid (~transacid@transacid.de)
[19:19:49] *** Quits: arinov (~arinov@31.142.76.178) (Ping timeout: 240 seconds)
[19:19:57] *** Quits: fffiiiccc (~fffiiiccc@ip2504fcfc.dynamic.kabel-deutschland.de) (Quit: leaving)
[19:28:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[19:29:35] *** Joins: EdFletcher (~PKD@user/edfletcher)
[19:30:46] *** Joins: gts (~gts@183.82.179.216)
[19:35:28] *** Quits: gts (~gts@183.82.179.216) (Ping timeout: 256 seconds)
[19:36:11] *** Joins: gts (~gts@183.82.179.216)
[19:36:58] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:40:37] *** Quits: gts (~gts@183.82.179.216) (Ping timeout: 240 seconds)
[19:42:15] *** Joins: arinov (~arinov@213.194.126.155)
[19:43:32] *** Quits: bluedust (~bluedust@117.204.150.2) (Remote host closed the connection)
[19:47:32] *** Joins: gts (~gts@183.82.179.216)
[19:51:49] *** Quits: gts (~gts@183.82.179.216) (Ping timeout: 240 seconds)
[19:53:05] *** Joins: gts (~gts@183.82.179.216)
[19:54:36] *** Quits: skulphant (uid17532@id-17532.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:57:04] *** Quits: henry40408 (~henry4040@175.182.108.239) (Remote host closed the connection)
[19:57:34] *** Quits: gts (~gts@183.82.179.216) (Ping timeout: 256 seconds)
[19:57:34] *** Joins: henry40408 (~henry4040@175.182.108.239)
[19:58:21] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[20:03:25] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[20:07:50] *** Joins: gts (~gts@183.82.179.216)
[20:09:09] *** Quits: henry40408 (~henry4040@175.182.108.239) (Remote host closed the connection)
[20:09:39] *** Joins: henry40408 (~henry4040@175.182.108.239)
[20:13:04] *** Quits: henry40408 (~henry4040@175.182.108.239) (Remote host closed the connection)
[20:13:34] *** Joins: henry40408 (~henry4040@175.182.108.239)
[20:13:39] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[20:13:39] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[20:13:39] *** Joins: menace (~someone@user/menace)
[20:13:47] *** menace is now known as Deknos
[20:18:52] *** Quits: henry40408 (~henry4040@175.182.108.239) (Quit: The Lounge - https://thelounge.chat)
[20:18:54] *** Joins: bluedust (~bluedust@117.204.150.2)
[20:19:22] *** Joins: henry40408 (~henry4040@175.182.108.239)
[20:26:44] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[20:31:02] *** Joins: megamus_prime (~prime@a89-154-196-21.cpe.netcabo.pt)
[20:32:19] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2bd0:5e5e:ca40:5981) (Ping timeout: 268 seconds)
[20:33:15] *** Quits: megamus_prime (~prime@a89-154-196-21.cpe.netcabo.pt) (Client Quit)
[20:35:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[20:35:18] *** Joins: zwr (~zwr@2804:d45:b966:fb00:4170:30cc:d780:488d)
[20:36:01] *** Joins: shka (~herr@109.231.0.226)
[20:37:40] *** Joins: fikran (~fikran@user/fikran)
[20:37:49] *** Joins: isflavior (~isflavior@2001:8a0:5dd8:4100:3d28:8fa9:523f:efd8)
[20:39:48] *** Quits: gts (~gts@183.82.179.216) (Quit: Leaving...)
[20:45:18] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[20:46:30] *** Quits: isflavior (~isflavior@2001:8a0:5dd8:4100:3d28:8fa9:523f:efd8) (Ping timeout: 268 seconds)
[20:51:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec56-c560-562a-bc51.res6.spectrum.com)
[20:59:08] <lazyreader> pyzozord is your goal with this to write go programs, or just learn how go is implemented?
[20:59:41] *** Joins: arinov_ (~arinov@213.194.126.155)
[20:59:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[21:00:09] <pyzozord> both
[21:00:42] <pyzozord> I feel going "one level deeper" is beneficial in having good command of the language
[21:00:59] <pyzozord> doesn't have to be exact implementation but a vague idea of how it works I feel is useful
[21:03:30] <lazyreader> alright. I ask mainly because your questions seem very... undirected? like, as someone who writes a lot of go, they strike me as pretty useless to actually using the language. but you know how you learn best, I suppose.
[21:03:58] <lazyreader> my learning style is very much "solve a real-ish problem with the tool"
[21:04:25] <lazyreader> and then _later_ asking "I wonder how channels work" or something
[21:06:12] *** Joins: Cork (~Cork@user/cork)
[21:06:19] <pyzozord> yes, to be completly honest I'm looking for ways to hang the new knoweledge on the existing things in my brain
[21:12:23] <seebs> in my experience, "knowing how it is actually implemented" is very often actively harmful to attempts to *use* a thing effectively, because "how it is actually implemented" is a transient implementation detail which can change.
[21:12:40] <seebs> if you are thinking about it, you're thinking about something that isn't actually your problem and its problem space and that's usually a loss to effectiveness.
[21:13:57] <pyzozord> I'm not necessairly going to think about it when I write programs. But on odd occasion it comes in useful if only for conceptualization where a bug might be
[21:13:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[21:14:24] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec56-c560-562a-bc51.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:14:56] <pyzozord> in general I don't like the idea of black box, I like to have at least a vague idea how everything works
[21:15:23] <pyzozord> I hope it makes me a better programmer
[21:15:38] *** Quits: bluedust (~bluedust@117.204.150.2) (Remote host closed the connection)
[21:16:44] *** Joins: ustedes (~whaley@2603-6080-a301-33d1-8c46-e0cf-9906-f8cf.res6.spectrum.com)
[21:20:06] *** Quits: moog (~moog@107.77.244.39) (Read error: Connection reset by peer)
[21:22:05] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[21:22:20] *** Joins: moog (~moog@107.77.244.39)
[21:23:38] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec56-c560-562a-bc51.res6.spectrum.com)
[21:25:21] *** Quits: zwr (~zwr@2804:d45:b966:fb00:4170:30cc:d780:488d) (Ping timeout: 268 seconds)
[21:26:38] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[21:31:33] *** Joins: noarb (~noarb@user/noarb)
[21:33:51] *** Quits: noarb (~noarb@user/noarb) (Client Quit)
[21:34:43] *** Joins: analogsalad (~analogsal@user/analogsalad)
[21:35:44] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[21:38:30] <seebs> i think that it *can* make you a better programmer, but usually in my experience, it depends on whether the thing is *supposed* to be a black box or subject to change without notice
[21:38:39] <seebs> there is no The One Way Go Handles Reflection, because there's more than one go implementation
[21:40:06] *** Joins: hanzo (uid532183@user/hanzo)
[21:43:26] *** Quits: ustedes (~whaley@2603-6080-a301-33d1-8c46-e0cf-9906-f8cf.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:45:14] *** Quits: zer0bitz (~zer0bitz@196.244.192.60) (Ping timeout: 256 seconds)
[21:46:53] *** Quits: smotchkkiss (~smotchkki@2a03:1b20:a:f011::a03e) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:48:00] *** Joins: rvalue- (~rvalue@user/rvalue)
[21:51:19] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[21:51:19] *** rvalue- is now known as rvalue
[22:04:39] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[22:04:56] *** Quits: alm (~alm@user/alm) (Quit: .)
[22:06:07] *** Joins: alm (~alm@user/alm)
[22:10:34] *** Quits: christophergray (~christoph@200.119.158.103) (Quit: WeeChat 3.4)
[22:12:22] <pyzozord> yes it's a niuanced subject
[22:15:07] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[22:15:29] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Quit: WeeChat 3.0)
[22:19:08] *** Joins: Jupy7er (~Jupy7er@2001:d08:e3:b1:dd4e:c9da:9c60:5d27)
[22:19:40] *** Quits: Jupy7er (~Jupy7er@2001:d08:e3:b1:dd4e:c9da:9c60:5d27) (Client Quit)
[22:22:00] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[22:22:35] *** Joins: atstefan (~stefan@99-41-248-215.lightspeed.rcsntx.sbcglobal.net)
[22:23:17] *** Joins: Guest53 (~Guest53@2a00:a040:19a:b060:70e7:fd09:5434:17fa)
[22:26:10] *** Quits: alrs (alrs@tilde.team) (Ping timeout: 260 seconds)
[22:26:28] *** Joins: sunbather (~sunbather@c-71-201-34-59.hsd1.il.comcast.net)
[22:28:11] *** Quits: sunbather (~sunbather@c-71-201-34-59.hsd1.il.comcast.net) (Remote host closed the connection)
[22:32:21] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[22:33:47] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ab6a:ec40:1b75:3ae7)
[22:35:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:42:22] <albertito> pyzozord: fwiw I think what you're doing is just fine, learning how something works is often beneficial, and learning not to rely on internals/implementation details too much goes hand in hand with that (as you already mentioned)
[22:44:05] <albertito> pyzozord: regarding your question, I think you might be confused due to "go list"'s use of the template package, which is for text processing (and indeed uses reflection)
[22:44:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[22:45:26] <pyzozord> Thanks :)
[22:45:58] <albertito> pyzozord: what you're seeing there is how to present the list to stdout
[22:46:26] *** Joins: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it)
[22:46:34] <albertito> pyzozord: the output formatting is done using a text/template string, and that module uses reflection. That's documented in the help (which you can find at the top of that file you linked)
[22:46:43] *** Joins: wim (~wim@42.be)
[22:47:02] *** Joins: fikran (~fikran@user/fikran)
[22:49:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec56-c560-562a-bc51.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:50:09] <pyzozord> Oh, I missed that documentation, thanks!
[22:50:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[22:50:36] <albertito> pyzozord: the part you're asking about (how it gets the information about your structs) is not in that file, it's in the "load" and "modload" packages, you can find the calls there, e.g. in the loadPackageList function
[22:50:55] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:51:12] <albertito> pyzozord: and the general answer is: it parses your source code to get that information, it doesn't use your binary
[22:52:20] <pyzozord> got it!
[22:52:39] <albertito> pyzozord: you are also right that (some of) the information _is_ available at runtime though, and available via the reflect package. But that's not what go list uses
[22:52:57] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[22:53:29] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:53:52] *** Joins: mickey8 (~user@user/mickey)
[22:56:02] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec56-c560-562a-bc51.res6.spectrum.com)
[22:56:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[22:58:08] *** Joins: sabry (~sabry@197.37.72.225)
[22:58:49] <pyzozord> Yeah, it's to me clear now. I think there was just too many concepts interacting in that example code and my question was too imprecise and got everbody, including myself, confused.
[22:59:50] *** Quits: Guest53 (~Guest53@2a00:a040:19a:b060:70e7:fd09:5434:17fa) (Quit: Client closed)
[23:00:16] *** Quits: seebs (~seebs@24.196.59.174) (Quit: Leaving)
[23:00:51] *** Joins: arinov (~arinov@31.142.76.178)
[23:02:48] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:04:13] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[23:12:50] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[23:13:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:19:18] *** Joins: skulphant (uid17532@id-17532.tinside.irccloud.com)
[23:25:31] *** Joins: smotchkkiss (~smotchkki@193.32.127.228)
[23:26:22] *** Joins: alrs (~alrs@tilde.team)
[23:28:12] *** Joins: kodah (~kodah@user/kodah)
[23:31:27] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Remote host closed the connection)
[23:32:13] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[23:39:34] *** Quits: sabry (~sabry@197.37.72.225) (Ping timeout: 256 seconds)
[23:41:12] *** Joins: troseman_ (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[23:44:13] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[23:46:11] *** Quits: norbinaa (~be3uykpy@2a00:a040:19a:b060:9111:4671:eba8:9f7c) (Quit: Leaving)
[23:46:30] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:c0f2:c303:204d:502f)
[23:46:36] <be3uykpy> hi
[23:47:32] <be3uykpy> this is more of a helm question but since it uses go's templating language, it might be relevant here? what's the "-" used for in {{- if }} ... {{- end}}    ?
[23:47:48] <be3uykpy> why add "-" when {{ if }} ... {{ end }} works just fine?
[23:49:34] <b0nn> if an action's left delimiter (by default "{{") is followed immediately by a minus sign and white space, all trailing white space is trimmed from the immediately preceding text.
[23:49:45] <b0nn> Similarly, if the right delimiter ("}}") is preceded by white space and a minus sign, all leading white space is trimmed from the immediately following text.
[23:49:52] <b0nn> https://pkg.go.dev/text/template
[23:51:02] <pyzozord> be3uykpy: I think you can find out about it in go doc text/template
[23:51:46] <pyzozord> I think {{- stuff}} trims white space preceeding this token
[23:52:01] <be3uykpy> thanks so much
[23:52:19] <pyzozord> good to know helm uses go templates
[23:58:34] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
