[00:01:22] <haze> just watched a upcoming project select cmake as their build tool. cried a little
[00:12:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Remote host closed the connection)
[00:14:29] <Earnestly> At least it can generate ninja builds
[00:14:45] <Earnestly> (Not a mark against make, but cmake's use of make is quite awful)
[00:15:30] <haze> i like meson
[00:15:37] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[00:17:27] *** Quits: terminalpusher (~terminalp@2a01:586:124a:1:832a:f4bb:6fb9:a240) (Remote host closed the connection)
[00:19:57] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 252 seconds)
[00:38:09] *** Quits: raiaq (0a41c94ab1@user/raiaq) (Remote host closed the connection)
[00:38:19] *** Joins: raiaq (0a41c94ab1@user/raiaq)
[00:38:39] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 252 seconds)
[00:40:13] *** Joins: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[00:44:22] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[00:44:29] *** Joins: Techcable (~Techcable@user/Techcable)
[00:51:47] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[00:52:06] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:53:27] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[00:56:31] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 260 seconds)
[00:59:44] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[01:09:21] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[01:13:47] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 260 seconds)
[01:21:36] *** Quits: fgenesis (~fgenesis@inferno.barfooze.de) (Ping timeout: 245 seconds)
[01:25:58] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:28:02] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[01:30:26] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:32:12] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 240 seconds)
[01:37:27] *** Joins: fgenesis (~fgenesis@inferno.barfooze.de)
[01:41:02] *** Quits: inr (~a@c-4543e555.040-159-73746f16.bbcust.telenor.se) (Remote host closed the connection)
[01:41:22] *** Joins: inr (~a@c-4543e555.040-159-73746f16.bbcust.telenor.se)
[01:45:18] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[01:47:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[01:49:24] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 240 seconds)
[01:52:09] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:59:32] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[02:00:51] <tleydxdy[m]> I'm dealing with vulkan and cmake for the past few weeks
[02:00:53] <tleydxdy[m]> sigh
[02:01:40] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[02:06:50] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[02:35:38] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[02:40:24] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[02:52:26] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4199:73fa:f378:33d) (Ping timeout: 245 seconds)
[03:01:39] *** Quits: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[03:01:59] *** Joins: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[03:04:18] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[03:04:33] *** Joins: bindu (~bindu@user/bindu)
[03:10:16] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[03:14:08] *** Quits: NickH (~hastings@m028070.dynamic.ppp.asahi-net.or.jp) (Remote host closed the connection)
[03:14:17] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 240 seconds)
[03:20:54] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 252 seconds)
[03:21:18] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7::4) (Quit: WeeChat 3.4.1)
[03:27:40] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[03:31:57] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 240 seconds)
[03:36:11] *** Quits: jemius (~imperator@200116b82da1020035eb39ee4b0b1689.dip.versatel-1u1.de) (Quit: Leaving)
[03:36:32] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[03:36:35] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[03:38:35] *** Quits: mikezackles__ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[03:47:24] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[03:51:17] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 240 seconds)
[03:52:34] *** Joins: NickH (~hastings@m028070.dynamic.ppp.asahi-net.or.jp)
[04:02:37] *** Joins: leah2 (~leah@vuxu.org)
[04:05:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:17:47] *** Quits: NickH (~hastings@m028070.dynamic.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[04:19:42] *** Joins: ismustac1 (~ismustach@136.144.19.112)
[04:24:01] *** Quits: ismustac1 (~ismustach@136.144.19.112) (Ping timeout: 256 seconds)
[04:30:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[04:43:35] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[04:47:48] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 240 seconds)
[05:02:31] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[05:03:48] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[05:07:20] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[05:08:10] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c)
[05:09:21] *** Quits: fgenesis (~fgenesis@inferno.barfooze.de) (Ping timeout: 256 seconds)
[05:14:10] *** Joins: fgenesis (~fgenesis@inferno.barfooze.de)
[05:17:51] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:23:33] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[05:36:22] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[05:41:32] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[05:52:33] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[05:53:52] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:06:38] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[06:13:57] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[06:18:33] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 252 seconds)
[06:49:08] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[06:50:29] *** Joins: notzmv (~zmv@user/notzmv)
[06:53:44] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[07:04:53] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[07:24:02] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[07:24:13] *** Quits: skipwich (~skipwich@user/skipwich) (Quit: DISCONNECT)
[07:25:26] *** Joins: skipwich (~skipwich@user/skipwich)
[07:28:24] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 252 seconds)
[07:30:57] *** Quits: skipwich (~skipwich@user/skipwich) (Quit: DISCONNECT)
[07:33:59] *** Joins: skipwich (~skipwich@user/skipwich)
[07:36:47] *** Quits: skipwich (~skipwich@user/skipwich) (Client Quit)
[07:37:28] *** Joins: skipwich (~skipwich@user/skipwich)
[07:38:11] *** Quits: skipwich (~skipwich@user/skipwich) (Client Quit)
[07:52:50] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[07:56:00] *** Joins: NickH (~hastings@p22045-ipngnfx01akatuka.ibaraki.ocn.ne.jp)
[08:00:01] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[08:00:48] *** Joins: skipwich (~skipwich@user/skipwich)
[08:04:42] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 252 seconds)
[08:04:57] *** Quits: skipwich (~skipwich@user/skipwich) (Client Quit)
[08:14:27] *** Joins: skipwich (~skipwich@user/skipwich)
[08:18:44] *** Quits: skipwich (~skipwich@user/skipwich) (Client Quit)
[08:22:06] *** Joins: skipwich (~skipwich@user/skipwich)
[08:29:08] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:29:59] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[08:30:06] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[08:32:48] *** Joins: mooff (mooff@awful.cooking)
[08:33:52] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[08:38:52] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[08:56:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2b3e:70f8:165f:be99) (Ping timeout: 252 seconds)
[08:58:49] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[09:00:36] *** Quits: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[09:06:53] *** Joins: ismustac1 (~ismustach@136.144.19.238)
[09:07:23] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c) (Ping timeout: 252 seconds)
[09:07:23] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 252 seconds)
[09:11:48] *** Quits: ismustac1 (~ismustach@136.144.19.238) (Ping timeout: 272 seconds)
[09:12:17] *** Joins: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[09:12:31] <marler8997> has enyone looked into adding precompiled header support into zig build?
[09:13:11] <daurn> marler8997: is that called `zig translate-c`? :)
[09:20:29] *** Joins: duds- (~duds-@user/duds)
[09:20:29] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:20:35] *** Quits: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[09:23:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:16b7:58d0:d6fd:f99c)
[09:41:31] *** Joins: ismustac1 (~ismustach@193.36.224.17)
[09:47:01] *** Quits: ismustac1 (~ismustach@193.36.224.17) (Ping timeout: 256 seconds)
[10:17:46] *** Joins: ismustac1 (~ismustach@193.36.224.17)
[10:22:44] *** Quits: ismustac1 (~ismustach@193.36.224.17) (Ping timeout: 272 seconds)
[10:27:24] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:53:35] *** Joins: ismustac1 (~ismustach@193.36.224.17)
[10:54:33] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:57:32] *** Joins: winter5 (~winter@user/winter)
[10:58:03] *** Quits: ismustac1 (~ismustach@193.36.224.17) (Ping timeout: 260 seconds)
[10:58:08] *** Quits: winter (~winter@user/winter) (Read error: Connection reset by peer)
[10:58:08] *** winter5 is now known as winter
[11:06:38] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[11:11:53] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[11:12:31] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[11:19:04] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:23:18] <motiejus> I am allocating a well-known sized structure on stack: `res = BoundedArray(os.iovec_const, 16)`, returning `res.constSlice()`. The contents of the slice get messed up somewhere. Is it OK to "return" large things that are allocated on stack, when their size is known?
[11:23:24] <motiejus> or is the slice that's the problem?
[11:25:25] <motiejus> I guess making it a slice is a problem (which reminded me that it's a pointer).
[11:25:38] <bgiannan> ifreund, i add a function called exit, and it got called anytime i did std.os.exit
[11:25:44] <bgiannan> has*
[11:25:46] <bgiannan> had*
[11:27:59] *** Joins: Ayo (~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl)
[11:29:41] *** Joins: ismustac1 (~ismustach@193.36.224.17)
[11:34:22] *** Joins: Gunthor (~Gunthor@2a02:908:1866:ffa0:99ec:c9d9:8c09:fe3f)
[11:34:27] *** Quits: ismustac1 (~ismustach@193.36.224.17) (Ping timeout: 260 seconds)
[11:39:53] <rwb> motiejus: the BoundedArray is created on the stack, and the slice you return points to the value within the stack. therefore returning a constSlice() out is not going to work
[11:40:34] <motiejus> yeah. Returning the `BoundedArray` itself seems to make it work again
[11:40:38] <motiejus> thanks
[11:40:49] <motiejus> (I convert it to a slice in a caller than)
[11:40:52] <motiejus> thenŪ
[11:40:53] <motiejus> then*
[11:41:07] <rwb> if you know the size of your array, you could simply return a [123]T
[11:42:58] *** Quits: rwb (~augh@alogs.space) (Excess Flood)
[11:43:11] *** Joins: rwb (~augh@alogs.space)
[11:44:48] *** rwb is now known as rb
[11:47:07] *** Quits: ikskuh (~xq@v43666.php-friends.de) (Ping timeout: 268 seconds)
[11:55:19] <motiejus> it can be from 8 to 16 :) so I need to return it's length as well, made easy by BoundedArray
[12:01:00] <Ayo> stdlib question: Is the 'Unexpected' error only intended to be used with os.unexpectedErrno(), or could it also be returned from a function directly?
[12:02:15] <Ayo> For context, I'm trying to write a patch for https://github.com/ziglang/zig/issues/11178 - a Dir.Iterator is currently defined to have the error type 'error{ AccessDenied, SystemResources } || os.UnexpectedError'
[12:03:08] <Ayo> The... "correct" approach would be adding another LinuxIsWeird error to that set and return that on EINVAL, but it's such a special case that UnexpectedError seems fine.
[12:05:17] <Ayo> Of course, I could have it just fall back to os.unexpectedErrno(), but then debug builds would panic on a known error code
[12:07:44] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[12:16:44] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[12:21:42] <Gunthor> Ayo: I have not seen the UnexpectedError used in the way you want in the std libraries, so I suspect the intention is to use UnexpectedErrno()
[12:22:21] <Gunthor> The build does not panic then, but give a stack trace so you can debug the unexpected error, which seems like the reasonable thing to do if the error is unexpected :)
[12:23:38] <Gunthor> Disclaimer: I am by no means an expert onthis, just starting out with zig. Bit I have read a fair amount of the std libs in order to understand how they work and how the creators write zig code.
[12:30:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:31:03] <Gunthor> oops... sorry, turns out I'm wrong: there are some functions that directly return error.Unexpected, mainly in the os specific libs.
[12:31:32] *** Joins: xd1le (~xd1le@user/xd1le)
[12:33:24] *** Quits: NickH (~hastings@p22045-ipngnfx01akatuka.ibaraki.ocn.ne.jp) (Ping timeout: 240 seconds)
[12:34:06] <Gunthor> but I still think I would use UnexpectedErrno, because of the stack trace.
[12:37:47] *** Joins: ikskuh (~xq@2a0d:5940:6:163::ad7e)
[12:43:44] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:46:08] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[12:46:24] <Ayo> Hmm. unexpectedErrno() docs say to send a patch if it happens, so I don't suppose that is intended for "known unexpected errors" :/
[12:49:56] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 245 seconds)
[13:00:30] *** Joins: ismustac2 (~ismustach@193.36.224.17)
[13:01:10] <Gunthor> "known unexpected errors" sounds nice :)
[13:02:24] <Gunthor> Maybe you should create a KownUnexpectedError error, as I think the stdlibs unexpected errors are intended to be used for unknown unexpected errors.
[13:04:36] *** Quits: ismustac2 (~ismustach@193.36.224.17) (Ping timeout: 240 seconds)
[13:04:39] <Ayo> so back to an UndocumentedButKnownError error :P
[13:04:54] <Gunthor> Btw the handling of unexpected error conditions is not uniform across the std library. std.fs.File.read graced me with a unreachable when read() returned EINVAL... but as you can just create your own File from a file handle, this shit may happen (and did for me)...
[13:05:36] <Ayo> Ah, but creating an invalid File struct points to a bug in your code, so that seems reasonable
[13:05:52] <Gunthor> nah the struct was perfectly ok, I just did the read wrong :)
[13:06:00] <Gunthor> Hint: it was a signalfd...
[13:06:09] <Ayo> heh
[13:09:12] <Gunthor> but I love it that this was even possible :) The File struct is just a very thin wrapper and is even prepared for this sort of thing.
[13:12:58] <bgiannan> how can i run a command/executable and get its exit code in zig?
[13:20:36] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 240 seconds)
[13:32:03] *** Joins: tenshi (~red@user/tenshi)
[14:02:00] <squeek502> bgiannan, std.ChildProcess.exec
[14:05:49] *** Quits: Earnestly (~earnest@user/earnestly) (Quit: WeeChat 3.4.1)
[14:06:49] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[14:12:27] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[14:15:29] <ifreund> bgiannan: like this? doesn't happen when I run this program... https://0x0.st/oNDJ.txt
[14:15:47] <ifreund> and I'm certainly not aware of any code in the std to do that
[14:16:43] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 250 seconds)
[14:16:50] <bgiannan> ifreund, my function was in a dynlib maybe that's what did it? here is where it happened: https://github.com/giann/buzz/blob/main/lib/buzz_os.zig#L108-L115
[14:18:36] <ifreund> bgiannan: ah, are you linking libc? It does a lot of weird stuff in exit()
[14:18:46] <ifreund> there's a _exit() function that does just the syscall
[14:18:51] *** Joins: Earnestly (~earnest@user/earnestly)
[14:19:26] <bgiannan> ifreund, don't think i am ? https://github.com/giann/buzz/blob/main/build.zig
[14:20:03] *** Joins: NickH (~hastings@m028070.dynamic.ppp.asahi-net.or.jp)
[14:20:22] <ifreund> bgiannan: if you're not running linux, then you are because libc is the only stable syscall API on e.g. mac os
[14:24:20] <ifreund> I'm not sure that's really the cause though, I don't see such behavior documented for libc
[14:25:13] <ifreund> could be unique to apple's dlopen implementation, I don't know
[14:25:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[14:25:55] <ifreund> I know _init() and _fini() are deprecated ways to do this for glibc dlopen
[14:26:15] <ifreund> sorry that libc is such a mess :/
[14:26:49] *** Joins: toulene (~toulene@user/toulene)
[14:29:15] <bgiannan> don't worry, i learned long ago that weird stuff on macOS is to be expected 
[14:38:25] *** Joins: Hugne (~Hugne@78-67-132-140-no506.tbcn.telia.com)
[14:44:46] *** Joins: BratishkaErik (~Bratishka@37.99.44.180)
[14:46:37] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[14:46:39] *** Joins: notzmv (~zmv@user/notzmv)
[14:51:16] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 272 seconds)
[14:54:58] *** Quits: Hugne (~Hugne@78-67-132-140-no506.tbcn.telia.com) (Quit: Client closed)
[15:08:28] <daurn> Gunthor: generally EINVAL *is* unreachable. it means you gave e.g. an invalid pointer
[15:08:46] <daurn> or invalid combination of arguments
[15:09:18] <daurn> ==> invalid arguments is considered an assertable (i.e. unreachable) code path
[15:10:44] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[15:17:22] <ifreund> daurn: I actually think we should stop using unreachable for EINVAL in 99% of cases, it's way too hard for the linux kernel to guarentee that it will only be returned in exactly the documented cases.
[15:17:25] <ifreund> see for example https://github.com/ziglang/zig/issues/11178
[15:18:42] <ifreund> I took a look at tracing back the error code through the kernel code and it seem kinda infeasible, there's just so much code that could have returned EINVAL and no language feature like zig's error sets to restrict that
[15:18:55] <daurn> ifreund: yeah that's a good point. as a general answer you could say nothing should be unreachable because seccomp exists
[15:19:12] <daurn> though you can go down a rabbit hole there and say that debuggers exist and so all assertions are wrong
[15:19:44] <ifreund> no I'm 100% in favor of assertions, but restrict them to the conditions you have 100% control over
[15:20:03] <ifreund> otherwise you make every bug in external systems your bug as well
[15:20:03] <daurn> so what do you say about e.g. `getpid`, which in theory can fail, but even libc pretends it doesn't
[15:21:23] <ifreund> I'd say that probably falls into the 1% of cases where ignoring the error is ok
[15:21:27] <ifreund> e.g. close()
[15:22:32] <ifreund> not sure about getpid though, how does it fail?
[15:22:59] <daurn> e.g. if you use seccomp to ban the getpid syscall
[15:24:05] <daurn> I've used that in the past to confuse closed source software for various purposes
[15:24:44] <ifreund> heh
[15:28:13] *** Joins: moog_ (~moog@98.97.81.153)
[15:28:19] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[15:28:54] <ifreund> what a kludge
[15:29:37] <Earnestly> getpid.2  > These functions are always successful.
[15:29:39] <ifreund> I don't think there's any reasonable way to handle getpid() failure, so either a panic or an assertion makes sense
[15:30:10] <ifreund> (seccomp is the kludge, not your creative use of it to be clear)
[15:30:23] <daurn> Earnestly: libc makes that true.... by caching the value the first time it calls getpid... and hoping that you never call fork yourself. also it pretends the first time can't fail
[15:30:40] <ifreund> daurn: I just read in the man page that glibc doesn't do that any more actually
[15:30:44] <Earnestly> daurn: glibc doesn't cache since 2.25
[15:30:49] *** Quits: moog__ (~moog@98.97.82.161) (Ping timeout: 250 seconds)
[15:31:14] <daurn> oh? did it move to vdso though?
[15:31:19] <Earnestly> So since 2017, still pretty recent
[15:31:19] <daurn> or was that just gettid
[15:31:27] <Earnestly> daurn: No it just calls the syscall, nothing magic
[15:32:11] <daurn> oh why did I think getpid/gettid moved to the vdso
[15:32:37] <Earnestly> It's not unreasonable guess
[15:32:44] *** Joins: moog__ (~moog@98.97.82.161)
[15:33:34] <daurn> I also remember some "fun" when I mixed them with robust mutexes.
[15:35:08] *** Quits: moog_ (~moog@98.97.81.153) (Ping timeout: 252 seconds)
[15:36:12] *** Joins: moog (~moog@98.97.81.153)
[15:36:40] <daurn> or maybe that was just in the same time period as when I learned about gettid stuff
[15:37:29] <Earnestly> It's an interesting thought though.  seccomp essentially invalidates any guarantee these syscalls have when it comes to errors.  People disagree but it's akin to overcommit making every use of malloc 'undefined behaviour'
[15:37:53] *** Quits: moog__ (~moog@98.97.82.161) (Ping timeout: 252 seconds)
[15:38:14] *** Joins: moog_ (~moog@98.97.84.173)
[15:40:26] <ifreund> Here's a thought, instead of seccomp causing the filtered syscalls to return errors it should abort the process
[15:41:15] *** Joins: moog__ (~moog@98.97.84.79)
[15:41:18] *** Quits: moog (~moog@98.97.81.153) (Ping timeout: 272 seconds)
[15:43:25] *** Quits: moog_ (~moog@98.97.84.173) (Ping timeout: 240 seconds)
[15:44:27] <ifreund> why is software so terrible :/
[15:48:54] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::4)
[16:14:14] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 272 seconds)
[16:24:31] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Ping timeout: 245 seconds)
[16:29:13] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[16:30:12] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16b7:58d0:d6fd:f99c) (Ping timeout: 240 seconds)
[16:45:40] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[16:50:19] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 256 seconds)
[16:55:33] <Gunthor> daurn: in this case it meant that I was reading 1 byte where I should have been reading the entire struct at once. So, a proper error returned from read would have sped up finding this by a large margin.
[16:57:39] <Gunthor> my point being, when the syscall returns an error instead of crashing, then the interface to the syscall should also return an error instead of crashing. This error condition clearly was not unreachable.
[16:58:13] <Gunthor> EINVAL is just an invalid argument...
[17:00:37] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[17:00:50] <ifreund> Gunthor: If we could rely on linux to only return EINVAL when the user of the syscall has made a programming error, unreachable would be semantically correct
[17:01:28] <ifreund> there's no way to handle programmer error at runtime, instead we must simply assert that it does not happen
[17:02:10] <ifreund> also, did you not get a nice stack trace pointing to the line with the unreachable?
[17:04:23] <ifreund> Ayo: IMO the correct thing for the standard library to do here would indeed be making EINVAL return error.Unexpected directly
[17:04:56] <Gunthor> I got a stack trace, yes. It was nice, and once I saw that the unreachable location was an EINVAL, I could fix it.
[17:05:15] <Gunthor> However, think of it in the context of an interpreter implemented in zig.
[17:05:18] <ifreund> alternatively introducing error.Undocumented might be a bit cleaner
[17:06:00] <Gunthor> the user might do something in the interpreter that causes this, but the interpreter itself would still be fully working
[17:06:32] <Gunthor> unless it reached an unreachable... in which case either kaboom, or whatever happens in release-fast mode...
[17:07:11] <ifreund> > there's no way to handle programmer error at runtime
[17:07:23] <ifreund> you can't know the extent of the bug
[17:07:25] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[17:07:29] <ifreund> the only safe thing to do is crash
[17:08:26] <ifreund> I'm sure you can find trivial cases where it's OK, but I'm speaking in general terms about the purpose of assertions
[17:08:28] <Gunthor> when the error happens in the interpreter, then there is no need to crash the interpreter. I think, considering that zig seems to mostly follow the C credo to trust the programmer, this is an unneccessary deviation.
[17:09:13] <Gunthor> if you think your program should crash, then go ahead, crash it. Good thing, too. But if I want to handle it, and can do so, then why souldn't I?
[17:09:49] <Gunthor> considering that you're required to handle errors anyway, adding an else => unreachable is not that much of a stretch.
[17:10:18] <Gunthor> or just lettig i bubble up until the program explodes in your face :)
[17:13:24] *** Joins: dbohdan3 (~dbohdan@user/dbohdan)
[17:13:53] *** Quits: dbohdan (~dbohdan@user/dbohdan) (Ping timeout: 256 seconds)
[17:14:24] *** Quits: lumidify (~lumidify@user/lumidify) (Ping timeout: 272 seconds)
[17:14:43] <ifreund> If your goal isn't writing perfect software that's fine, but that's different from the priniciples governing the design of Zig and Zig's standard library
[17:14:49] *** Joins: lumidify (~lumidify@user/lumidify)
[17:15:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[17:16:32] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[17:16:53] <Gunthor> but it is. That's what I'm on about. You can't go crashing an interpreter, because the user of that interpreter made a mistake. The mistake may have been using an exposed os call wrongly. It may have been in interactive mode. There is no need to crash the interpreter. It would me much better to tell the user of the interpreter about their mistake and let them retry.
[17:18:26] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[17:19:35] <ifreund> Gunthor: ah, I misunderstood what you meant. I think exposing zig's std.os syscall wrappers to an interpreter like that is not the way to go
[17:19:57] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[17:20:10] <ifreund> I'd give the interpreted language direct access to the errno values in the case of an error and let them decide what to do with them
[17:20:23] <Gunthor> obviously, because then you can't have perfect software. Which is weird.
[17:21:11] <ifreund> std.os is meant to be used by bug free zig code, not to handle unverified input from an external system
[17:21:22] <ifreund> that's the impedence mismatch here
[17:21:25] <Gunthor> it is not about the os.syscall wrapper, mind you. There are a lot of instances in the os library, where an error causes an unreachable.
[17:22:03] <Gunthor> you obviously can't verify all input from another programing language. Also, you need to handle the errors anyway.
[17:23:09] <Gunthor> you can't use std.os (and a few other libs) to implement the runtime for an interpreted language, because of the errors yielding unreachable (which they obviously no always are).
[17:23:27] <ifreund> I'm saying that your interpereted language should be calling e.g. std.os.system.read() instead of std.os.read()
[17:23:48] <ifreund> the first is the bare syscall, the second is the wrapper converting things to zig errors, handling EINTR, etc
[17:23:52] <Gunthor> in this case, I was callilf File:read
[17:23:57] <Gunthor> calling
[17:24:11] <Gunthor> and File.read did this.
[17:24:21] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 250 seconds)
[17:24:39] <ifreund> you could also just verify the parameters are valid before calling File.read()
[17:25:05] <ifreund> I agree that zig's current std doesn't support your use-case well
[17:25:08] <Gunthor> but you can't know that! Unixen are full of things you can open as files but that have special needs for reading or writing
[17:42:29] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[17:49:54] <bgiannan> ifreund, using ChildProcess i don't really get what ChildExecFailed means ? seems like a macOS only thing?
[17:54:32] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[17:59:15] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 252 seconds)
[18:00:05] *** Joins: pkap (~pkap@193.32.127.225)
[18:18:30] *** Quits: BratishkaErik (~Bratishka@37.99.44.180) (Remote host closed the connection)
[18:18:52] *** Joins: BratishkaErik (~Bratishka@37.99.44.180)
[18:22:26] *** Joins: Anna28 (~Guest56@185.145.245.99)
[18:26:10] *** Quits: Anna28 (~Guest56@185.145.245.99) (Quit: Connection closed)
[18:29:25] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[18:32:30] *** Quits: pkap (~pkap@193.32.127.225) (Quit: Client closed)
[18:34:06] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 260 seconds)
[18:35:02] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[18:39:43] *** Joins: Graham31415 (~Graham@5.33.52.156)
[18:44:37] *** Quits: Gunthor (~Gunthor@2a02:908:1866:ffa0:99ec:c9d9:8c09:fe3f) (Ping timeout: 240 seconds)
[18:44:47] *** Joins: Gunthor (~Gunthor@2a02:908:1866:ffa0:99ec:c9d9:8c09:fe3f)
[18:45:05] *** Joins: pkap (~pkap@193.32.127.225)
[18:46:37] *** Quits: Gunthor (~Gunthor@2a02:908:1866:ffa0:99ec:c9d9:8c09:fe3f) (Client Quit)
[18:49:44] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:53:17] *** Quits: pkap (~pkap@193.32.127.225) (Ping timeout: 256 seconds)
[19:03:25] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[19:07:48] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 240 seconds)
[19:24:57] *** Joins: arkurious (~arkurious@user/arkurious)
[19:40:19] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[19:43:22] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:966d:f1e8:4bae:826f)
[19:44:37] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 256 seconds)
[19:46:28] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:57:26] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:966d:f1e8:4bae:826f) (Ping timeout: 245 seconds)
[19:58:41] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4042:4584:26e0:bc36)
[20:03:07] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[20:04:44] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[20:06:06] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[20:16:08] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[20:21:14] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 272 seconds)
[20:36:23] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:37:25] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[20:42:49] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[20:44:58] *** Joins: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl)
[20:52:28] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[20:56:36] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 240 seconds)
[21:00:22] *** Joins: bindu_ (~bindu@user/bindu)
[21:00:35] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[21:02:08] *** bindu_ is now known as bindu
[21:09:29] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[21:14:03] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 260 seconds)
[21:25:12] *** Quits: Graham31415 (~Graham@5.33.52.156) (Read error: Connection reset by peer)
[21:27:28] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[21:32:11] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Read error: Connection reset by peer)
[21:32:15] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 260 seconds)
[21:32:47] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[21:36:29] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Client Quit)
[21:40:57] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[21:43:13] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Client Quit)
[21:44:16] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[21:48:36] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 252 seconds)
[21:53:54] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[21:53:54] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[21:53:54] *** Joins: tane (~tane@user/tane)
[22:17:20] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[22:21:36] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 252 seconds)
[22:51:52] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[22:56:43] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 256 seconds)
[23:02:51] *** Joins: Graham31415 (~Graham@5.33.52.156)
[23:03:31] *** Joins: jemius (~imperator@200116b82dfbcc0058b00c06a6ec956c.dip.versatel-1u1.de)
[23:03:54] <jemius> btw., where does the name Zig come from?
[23:06:58] <haze> there are a number of answers to that iirc
[23:07:28] <jemius> the german word "zig" means something like "several" or "various" :]
[23:09:11] *** Joins: phaleth (~user@user/phaleth)
[23:28:42] *** Joins: ismustac2 (~ismustach@136.144.19.251)
[23:32:15] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:33:05] *** Quits: ismustac2 (~ismustach@136.144.19.251) (Ping timeout: 252 seconds)
[23:33:17] <haze> from what I remember one source of inspiration was the "take off every zig" line
[23:33:28] <haze> from the "all your base are belong to us" meme https://en.wikipedia.org/wiki/All_your_base_are_belong_to_us
[23:33:38] <haze> but also, andrew needed something that was easily googlable (unlike go)
[23:33:56] <haze> oh, "not take off every zig" its different but you get what im saying
[23:35:44] *** Quits: braewoods (~braewoods@user/braewoods) (Quit: WeeChat 2.8)
[23:41:09] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[23:42:05] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:43:57] <tsmanner> Huh, I always assumed it was related to the idiom "zig when others zag" referring to zig's approach of minimizing the language while others are adding new features
[23:54:39] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:55:43] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:56:57] *** Joins: braewoods (~braewoods@user/braewoods)
[23:58:51] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
