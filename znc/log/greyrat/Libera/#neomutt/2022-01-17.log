[00:39:42] *** Joins: rsaavedra (~rodrigo@user/rsaavedra)
[00:52:37] *** Quits: blaub (~blaub@194-208-201-025.tele.net) (Quit: WeeChat 3.4)
[00:58:57] *** Quits: rittchen (~rittchen@gateway/tor-sasl/rittchen) (Quit: WeeChat 3.3)
[01:40:59] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:42:55] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:59:24] *** Joins: qub411 (~user@14-202-13-18.tpgi.com.au)
[02:00:20] *** Quits: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae) (Ping timeout: 250 seconds)
[02:07:33] *** Joins: pekman (~pekman@user/pekman)
[02:49:19] *** Joins: bsd4me (~IceChat95@user/bsd4me)
[03:08:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:18:52] *** Quits: bsd4me (~IceChat95@user/bsd4me) (Quit: East bound and down, loaded up and truckin')
[03:31:02] *** Quits: Pali (~pali@user/pali) (Ping timeout: 240 seconds)
[04:21:02] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[04:32:47] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:57:07] *** Joins: bsd4me (~IceChat95@user/bsd4me)
[05:32:17] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:34:53] *** Joins: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se)
[05:34:54] *** Quits: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se) (Changing host)
[05:34:54] *** Joins: maetthew (~maetthew@user/maetthew)
[06:06:40] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[06:09:42] *** Quits: pekman (~pekman@user/pekman) (Quit: pekman)
[06:28:15] *** Joins: k33p3r (kexik@2605:6400:c847:1948::8491)
[06:37:15] *** Quits: rsaavedra (~rodrigo@user/rsaavedra) (Quit: WeeChat 3.4)
[06:40:55] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[07:23:27] *** Joins: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55)
[07:34:47] *** Joins: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au)
[07:52:09] *** Quits: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au) (Quit: dcpurton)
[07:52:33] *** Joins: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au)
[09:39:10] *** Quits: sbach (~sbach@user/sbach) (Read error: Connection reset by peer)
[09:41:37] *** Joins: sbach (~sbach@user/sbach)
[09:57:32] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[10:00:24] *** Joins: kzak (~kzak@nat-37.starnet.cz)
[10:17:41] *** Quits: bsd4me (~IceChat95@user/bsd4me) (Quit: Now if you will excuse me, I have a giant ball of oil to throw out my window)
[10:30:25] *** Quits: lunario_ (~no@vmi455770.contaboserver.net) (Ping timeout: 268 seconds)
[10:36:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55) (Ping timeout: 250 seconds)
[10:54:27] <gahr> morning
[10:55:51] *** Joins: guest123 (~guest123@27.34.13.81)
[11:02:17] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[11:05:46] *** Quits: guest123 (~guest123@27.34.13.81) (Quit: Client closed)
[11:06:47] *** Quits: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au) (Ping timeout: 256 seconds)
[11:33:22] *** Parts: nathanael (~nathanael@user/nathanael) ()
[11:41:01] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:07:54] *** Joins: Pali (~pali@user/pali)
[12:46:16] *** Joins: strajder (~strajder@user/strajder)
[12:47:26] <artagnon> Morning.
[12:47:40] <artagnon> gahr: Are you on macOS?
[13:10:26] <gahr> artagnon: hi there!
[13:10:34] <gahr> you've been busy!
[13:10:37] <gahr> :)
[13:10:43] <gahr> macOS.. I can be, yeah
[13:13:32] *** Joins: plastico (~plastico@neomutt/plastico)
[13:21:17] *** Joins: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au)
[13:37:32] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[13:55:03] <artagnon> gahr: Can notmuch be used over an IMAP connection?
[14:00:43] <artagnon> Yeah, probably too enthusiastic about neomutt for my own good ;)
[14:01:37] <artagnon> lens was just a mockup based on an idea that flatcap had.
[14:02:39] <artagnon> If a unified view of IMAP "INBOX" and "Sent" can be achieved painlessly in some other way, I'd be more than happy to drop the code.
[14:02:40] <gahr> no I think you'll need local maildir for notmuch
[14:03:13] <gahr> do you want to limit your functionality to imap?
[14:03:35] <artagnon> Hm, I was mostly looking for feature-parity with web-based email.
[14:04:34] <artagnon> Maybe that's not something that enough users care about?
[14:04:55] <artagnon> Personally, it's unpleasant to see threads broken at every step :(
[14:04:57] <gahr> what exactly would you want to be able to do?
[14:05:07] <gahr> just tell neomutt "please open Inbox + Sent" ?
[14:05:14] <artagnon> Yeah.
[14:05:31] *** Joins: strajder (~strajder@user/strajder)
[14:05:31] <artagnon> Complete the threads in INBOX.
[14:06:09] <gahr> what's wrong with using Inbox as the Sent folder, then?
[14:07:20] <gahr> also, is that limited to Inbox?
[14:07:47] <gahr> if you organize your mails in folders, you might want to have full threads in those too
[14:08:04] <gahr> so, Sent would potentially always be mixed in
[14:08:38] <artagnon> Really, to complete all threads in folders and searches, one would probably need to merge from "All Mail".
[14:08:51] <gahr> in this case, it looks more like a threads specific feature, where you say "please thread this mailbox, but also include emails from `record`"
[14:09:31] <artagnon> Hm, yeah. Sounds like an idea.
[14:09:37] <gahr> so you're trying to replicate GMail's labels?
[14:09:59] <artagnon> I use FastMail, and I'm just trying to get it to show full threads, that's all.
[14:10:36] <artagnon> ... but yeah, FastMail has some "Saved searches".
[14:10:47] <artagnon> I'm not interested in all that.
[14:11:18] <gahr> I see
[14:11:56] <artagnon> I assume a lot of new users would come from GMail, and GMail has similar functionality.
[14:12:57] <artagnon> Mirroring emails locally isn't the best solution -- if you use your phone to do email too, then the local copy would go out-of-sync.
[14:13:13] <artagnon> Perhaps there's a way to sync it, I don't know.
[14:13:39] <gahr> I think most notmuch users use mbsync
[14:14:17] <gahr> IIRC, the threads concept in JMAP (which is what fastmail uses under the hood) is different from IMAP, in that a thread can contain emails from different mailboxes
[14:14:21] <artagnon> Excuse my ignorance, but why is notmuch the more popular solution?
[14:14:28] <artagnon> Why not IMAP search?
[14:14:49] <gahr> I don't know, I use IMAP. I think notmuch is faster (mail are local), and more flexible
[14:14:50] <artagnon> Oh, I see.
[14:15:01] <gahr> you can have views like what you are suggesting
[14:15:18] <artagnon> Hm, for heavy email users, I suppose.
[14:16:24] <gahr> anyway, for your use case, I usually bcc myself :)
[14:16:39] <artagnon> Oh no, two copies on the server :(
[14:17:30] <artagnon> Do you ever respond to email from a web interface or phone/
[14:17:47] <artagnon> Or do you use neomutt exclusively for all email?
[14:21:30] <gahr> it happens that I use other devices
[14:21:41] <gahr> in which case, I'm fine with opening Sent and copying the mail to Inbox
[14:22:04] <gahr> I mean, the fact that you can solve a problem with code doesn't imply that it's a good idea to do so :)
[14:22:58] <artagnon> :)
[14:23:30] <gahr> btw, I'm missing all the context, I don't know what you've discussed with flatcap, I've been totally offline for two weeks
[14:23:37] <gahr> I'm just playing killjoy a bit
[14:23:41] <gahr> and raising concerns
[14:23:42] <artagnon> Let me know if you have a proposal to have nice threads in Inbox.
[14:24:03] <gahr> I do have several: i) bcc, ii) notmuch, iii) copy the mails you're interested in
[14:24:09] <artagnon> No, I'm not enthusiastic about my mockup either -- it's too much grunt work.
[14:24:12] <gahr> i) and iii) are simple
[14:24:14] <gahr> ii) is flexible
[14:24:51] <gahr> your proposal is probably aiming for a more elegant solution, but I'm not sure the complexity is worth it
[14:25:08] <artagnon> I'm aiming for the most elegant solution, yeah.
[14:25:37] <artagnon> It's not the complexity of my mockup that I'm worried about -- it's just redundancy and grunt work.
[14:26:06] <gahr> who calls mutt_lens_mailbox in your PR?
[14:26:44] <artagnon> I haven't had that much time to figure out neomutt! I'm guessing something in init.c, which creates all the mailboxes?
[14:27:31] <artagnon> The mockup proposes to copy three data structures; one of them being a hash table.
[14:27:35] <artagnon> Yuck!
[14:27:43] <gahr> yeah, I fear it's not as simple as that
[14:27:53] <artagnon> Hm.
[14:29:10] <gahr> mailboxes are created on demand, based on a path
[14:29:39] <gahr> so you'd have to arrange the code to work with both the existing Mailbox type and your LensMailbox
[14:30:00] <gahr> everything that can read a Mailbox needs to be able to read a LensMailbox
[14:30:18] <gahr> the next thing is that you want to take into consideration Inbox and SomeOtherFolder
[14:30:26] <gahr> instead of Inbox and Sent
[14:30:32] <gahr> then you want to build complex queries
[14:30:37] <gahr> then you're reinvented NotMuch :)
[14:31:09] <gahr> or, a version of NotMuch that works on top of imap
[14:31:34] <artagnon> Yeah, I know I have to abstract over Mailbox and LensMailbox :\
[14:31:44] <artagnon> Very ugly.
[14:32:02] <artagnon> No, forget the PR. I've dropped it.
[14:32:14] <artagnon> Let me know if you have any other ideas.
[14:33:38] <artagnon> A possible thread_aux_records in threads.c?
[14:35:12] <flatcap> morning all
[14:35:19] <gahr> hi flatcap !
[14:35:23] <flatcap> looks like I've got a bit of catching up to do :-)
[14:35:30] <flatcap> hi gahr. happy new year!
[14:35:38] <gahr> looks like I managed to kill some of artagnon's enthusiasm already :D
[14:35:50] <gahr> oh, no need to thank me :D
[14:36:01] <flatcap> hehe
[14:36:03] <gahr> and a happy new year to you too!
[14:36:09] <flatcap> thanks :-)
[14:36:11] <gahr> I hope all is good up there!
[14:36:41] <flatcap> it is, thanks. how are you?  well rested?  get up to anything exciting?
[14:37:41] <gahr> yeah, well rested. I did a lot of reading and walking
[14:37:44] <gahr> not much else :)
[14:37:55] <flatcap> nice
[14:39:42] <artagnon> I'm definitely a little bummed about %h though -- I thought it would be a really nice feature.
[14:40:43] <flatcap> when you have a second, please can you have a look at the build: all the cirrus builds have stopped working: https://cirrus-ci.com/task/6042360550260736
[14:40:56] <flatcap> the "rocksdb" package seems to have disappeared
[14:41:54] <flatcap> hi artagnon
[14:58:24] <gahr> rocksdb is broken I guess, let me look into it
[14:58:42] <flatcap> thanks.  it used to work
[14:59:04] <dcpurton> morning flatcap
[14:59:09] <flatcap> hi dcpurton 
[14:59:10] <gahr> https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=261187
[15:00:50] <flatcap> ok
[15:01:29] <flatcap> I just don't understand what happened to our build image...
[15:01:46] <flatcap> the packaged _used_ to be there (didn't it? the build used to work)
[15:01:52] <gahr> yeah
[15:02:03] <gahr> rocksdb got updated and that broke the package
[15:02:15] <flatcap> ah, ok
[15:02:33] <flatcap> fair enough, we can just remove it for now
[15:02:48] * flatcap hates the sight of those red crosses
[15:06:02] <gahr> I wouldn't bother
[15:06:12] <gahr> hopefully it's going to be fixed by end of day
[15:06:16] <gahr> or I'll do it
[15:08:07] <flatcap> oh, if it's going to be that quick, I can wait :-)
[15:10:19] <flatcap> dcpurton: I've been thinking some more about compose, and the differences between compose and recv
[15:11:10] <flatcap> (I also had a glance at the 900 line send_message() -- eek!)
[15:12:02] <flatcap> I think I'd like to tweak how compose manages its attachments...
[15:13:02] <flatcap> when the user adds an attachment, I think compose should call mutt_make_multipart()
[15:13:10] <flatcap> (that normally happens in send_message())
[15:13:57] <flatcap> that way, compose would always have *one* attachment at the root, rather than Body, Body->next...
[15:14:57] <flatcap> it'd mean quite a bit of shuffling around
[15:15:39] <flatcap> currently, mutt_make_multipart() is also necessary when postponing emails
[15:16:57] <flatcap> how does that sound?  (and what can I say to encourage you in that direction ;-)
[15:17:36] <flatcap> having a single root attachment would make a transition to TAILQ possible
[15:17:49] <flatcap> (I'm still thinking about the details of _that_)
[15:17:56] <dcpurton> flatcap, without thinking too deeply, there may be some problems with this
[15:18:02] <gahr> tagnon: why isn't the proposed solution of using index_format_hook satisfactory to you?
[15:18:15] <gahr> *artagnon: 
[15:18:50] <flatcap> dcpurton: you're the expert :-)  what do you foresee?
[15:18:54] <dcpurton> leaving PGP aside, the main email can have a bunch of different `Content-Types:`
[15:19:25] <dcpurton> If there is just one plain text attachment, then the Content-Type: of the top level should just be text/plain with not multipart
[15:19:42] <flatcap> for zero attachments, there'll be no change
[15:20:11] <dcpurton> ooo
[15:20:30] <flatcap> for PGP... hmm... I _think_ you'll end up with *another* layer on top anyway -- I need to check this and experiment
[15:20:44] <dcpurton> yes, PGP just wraps everything in another multipart
[15:20:48] <dcpurton> I thinkâ€¦
[15:20:56] <dcpurton> But does it really help?
[15:21:12] <dcpurton> as you add and remove attachments, you'll still need to change the top level
[15:21:13] <artagnon> gahr: ... it's not accurate :\
[15:21:40] <dcpurton> could be anything from text/plain, multipart/alternative, multipart/mixed, multipart/related
[15:21:43] <artagnon> I can't say "earlier today" confidently.
[15:22:38] <flatcap> dcpurton: yes, but I don't think that's any different from ungrouping any other group
[15:23:48] <artagnon> gahr: Don't you think accurate humanized timestamps, along with translations, belongs in core?
[15:23:50] <dcpurton> I wonder if a better option would be not to connect the attachment list to the email until the last minute
[15:24:03] <flatcap> having a single "top" makes things simpler (in my TAILQ future)...
[15:24:41] <flatcap> hmm... I _did_ wonder what we needed the Email for
[15:24:46] <dcpurton> Then you just have your double linked TAILQ thing
[15:25:04] <flatcap> yes and no...
[15:25:07] <dcpurton> and whatever is at the head gets connected to the email header once you're all done
[15:25:29] <flatcap> it boils down to what *type* is Body->children?
[15:26:25] <flatcap> for the received email, there's always a single Body -- for a plain email, or as a wrapper for multiparts
[15:26:41] <flatcap> that "top" Body contains the MIME info like "boundary"
[15:27:00] <dcpurton> yes, but they nest
[15:27:20] <dcpurton> so each child also has a boundary, no?
[15:27:28] <dcpurton> (different from parent)
[15:27:48] <flatcap> if all the code has a single "top", then Body has the member "struct Body *child;"
[15:28:09] <flatcap> yes, more-deeply-nested children also have their own boundary
[15:28:44] <flatcap> if we don't alter compose, then we have a contradiction...
[15:29:31] <flatcap> Compose's Email has multiple Body children, meaning Email has the member "TAILQ_HEAD(Body) child" (something like that)
[15:30:09] <dcpurton> hmm. I think I'm not familar enough with TAILQ to follow
[15:30:09] <flatcap> and the receive code's Email would have a TAILQ with only one item
[15:30:27] <dcpurton> I think I see
[15:30:30] <flatcap> yeah, sorry. it's a little complicated
[15:30:41] <dcpurton> *thinks
[15:31:00] <dcpurton> soâ€¦
[15:31:04] <flatcap> I'll try to draw some diagrams
[15:31:46] <dcpurton> when receiving there's a head (either text/plain or multipart/something)
[15:31:57] <dcpurton> and you want compose to be same
[15:31:59] <flatcap> yes
[15:32:26] <flatcap> because ultimately, that's what the Email->Body* will look like by the time it's sent
[15:33:09] <dcpurton> the other option being text/plain â†’ image/png â†’ â€¦ which is later removed, wrapped in a multipart/mixed and reattached to the email
[15:33:52] <flatcap> sorry, you lost me there
[15:33:56] <dcpurton> haha
[15:34:28] <dcpurton> I'll try again, cause I think I get you
[15:37:44] <dcpurton> I'll use â†’ for same level and â†“ for child
[15:37:58] <flatcap> ooh, fancy :-)
[15:38:14] <dcpurton> when receiving you might have: multipart/mixed â†“ text/plain â†’ image/png
[15:38:17] <dcpurton> one head
[15:38:28] <flatcap> yep
[15:38:34] <dcpurton> or rather one attachment at top level
[15:38:48] <dcpurton> when composing with no attachments you just have
[15:38:51] <dcpurton> text/plain
[15:38:56] <dcpurton> one attachment at top level
[15:38:57] <flatcap> yep
[15:39:07] <dcpurton> but as soon as you add an attachment you get
[15:39:14] <dcpurton> text/plain â†’ image/png
[15:39:21] <dcpurton> two attachments at top level
[15:39:30] <flatcap> yep
[15:39:36] <dcpurton> only at send time does it magically change to:
[15:39:53] <dcpurton> multipart/mixed â†“ text/plain â†’ image/png
[15:39:59] <dcpurton> one attachment at top level
[15:40:01] <flatcap> yes, (or when postponing)
[15:40:19] *** Quits: crest_ (~quassel@user/crest) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:40:38] <dcpurton> so you want to always change things so that while composing the multipart/mixed is inserted whenever it's needed and removed when it's not
[15:40:48] <flatcap> yes
[15:40:51] <dcpurton> that way, alsways one attachment at top level!
[15:41:17] <flatcap> that way we always have the *real* structure of the attachments
[15:43:34] <flatcap> the attachments will be self-contained.  just a `struct Body*`
[15:43:41] <dcpurton> This is kind of related to how attachments are displayed in receive mode
[15:44:01] <flatcap> yes. I think there's something fishy going in in recv
[15:45:19] <dcpurton> remember https://github.com/neomutt/neomutt/pull/3179
[15:45:34] <flatcap> a plain text shows as one line and multiparts hide the top-level wrapper
[15:45:36] *** Joins: crest (~quassel@user/crest)
[15:45:41] <dcpurton> yes
[15:45:54] <dcpurton> it only shows the top level if it makes sense to the user
[15:46:02] <flatcap> yes
[15:46:05] <dcpurton> a user doesn't care that the top level is multipart/mixed
[15:46:16] <flatcap> indeed
[15:46:19] <dcpurton> they they do care if it's multipart/alternative
[15:46:45] <dcpurton> because you need a visual clue that you're only meant to look at one
[15:46:53] <flatcap> so I imagine the same "magic" going on in compose
[15:46:59] <dcpurton> ah
[15:47:17] <dcpurton> so multipart/mixed is hidden
[15:47:57] <dcpurton> but present
[15:48:17] <flatcap> sidenote: recv allows us to collapse groups -- we need some visual feedback (I have some ideas)
[15:49:17] <flatcap> background: I was wondering if the compose and recv attachment windows could share code -- but it's becoming less likely as I understand more :-)
[15:49:51] <dcpurton> they do share some code
[15:49:58] <dcpurton> the tree drawing stuff I think
[15:50:16] <dcpurton> I never fidled with that and was somewhat surprised that it just worked
[15:50:45] <flatcap> some.  I was wondering if we could create an "attachment window" that magically did all the work
[15:51:10] <flatcap> compose and recv would pass flags to "allow editing", etc
[15:51:52] * flatcap always has plans beyond his abilities :-)
[15:52:19] <dcpurton> I fear it would be hard to maintain backward compatibility
[15:52:50] <dcpurton> believe me, you plans are well beyond my abilities
[15:52:57] <flatcap> :-)
[15:53:24] <flatcap> diagrams!  diagrams solve everything :-)
[15:53:32] <dcpurton> haha
[15:55:11] <flatcap> earlier you said "so multipart/mixed is hidden"...
[15:55:32] <flatcap> is recv hiding some parts?  I didn't know / hadn't noticed
[15:56:11] <dcpurton> one backward compat thing would be: I bet there's a clash between OpCompose and OpAttach default keysâ€¦
[15:58:47] <flatcap> that might not be a problem.  the keyhandling is managed by the Menu.  we pass in MENU_ATTACH or MENU_COMPOSE -> OpAttach or OpCompose
[15:59:25] <flatcap> that said, making them compatible would be a smart move
[16:06:49] <flatcap> hmm... the old code didn't allow us to move the fundamental part, the new code does.   if we correct the structure, then the fundamental will be unmoveable again
[16:07:22] <dcpurton> not a problem
[16:07:39] <dcpurton> because there will only be one attachment at the top level
[16:08:11] <flatcap> yeah, probably
[16:08:24] <dcpurton> probably? I thought that was the point?
[16:09:03] <flatcap> sorry, yes :-)
[16:09:04] <dcpurton> for the hidden multipart/mixed, you'll never see this in the received attach list, even if it's sometimes present
[16:09:20] <flatcap> oh
[16:10:22] <flatcap> we could do with some sample emails with lots of different attachment groupings
[16:15:18] <dcpurton> BTW, I think it makes sense to hide multipart/mixed, since it's only necessary from the point of view of your exact use case: an email can only have one top level attachment
[16:15:44] <dcpurton> but a user doesn't care, they just want a list of attachments
[16:15:52] <flatcap> yes
[16:29:01] <dcpurton> oo, there is a case when multipart/mixed appears. It appears for signed or encrypted emails, since only top top level is ever hidden. That's probably a bug
[16:29:24] <flatcap> ah, ok
[16:29:33] <dcpurton> i.e., the multipart/signed is hidden
[16:29:42] <dcpurton> hmmm
[16:29:45] <dcpurton> but you need that!
[16:29:58] <dcpurton> because signature.asc is outside of the multipart/mixed group
[16:30:19] <dcpurton> maybe it should just always display it
[16:31:04] <flatcap> lots of sample emails :-)
[16:36:41] <dcpurton> hmmm. It turns out to be quite hard to construct a PGP multipart/related email that works seemlessly across various mail clientsâ€¦
[16:37:29] <flatcap> oh
[16:38:03] <dcpurton> It's hard to know if this is because PGP is so poorly supported or because I haven't hit the magic set up that fails least often
[16:41:39] <gahr> artagnon: I don't know, I am a bit unconvinced, especially because the accurateness is very subjective.. what if we introduced a format that is 1 if the date is today?
[16:41:52] <gahr> so you could get your accurateness of "earlier today" with index-format-hook :)
[16:43:31] <flatcap> gahr: then you'd potentially need bools for this_week, this_month, this_year
[16:43:56] <flatcap> the date boundaries make it tricky
[16:44:19] <gahr> this_month and this_year are ok
[16:44:26] <gahr> this_week is more tricky
[16:44:34] <gahr> does your week start on su or mo?
[16:44:45] <flatcap> besides the bools, you'd need pattern syntaxes for these
[16:45:05] <gahr> but that's also tricky for %h.. when is "this week"?
[16:45:13] <flatcap> hmm... yeah weeks are tricky
[16:45:47] <gahr> does 1am in the morning matches "earlier today" or it's rather "yesterday"?
[16:45:58] <flatcap> hehe
[16:46:10] <gahr> if I look at it from a work-day perspective, everything before 8am is yesterday
[16:46:22] <flatcap> what if they're in a different timezone!
[16:46:36] * flatcap is getting the hang of this Devil's advocate :-)
[16:47:02] <gahr> we have lua support. what if we offload that to a custom function in lua?
[16:47:12] <gahr> or even, date_filter like display_filter
[16:47:29] <gahr> an external program: it gets the date as seconds since the epoch, and returns whatever text you want it to return
[16:47:49] <flatcap> that would get cripplingly slow
[16:48:00] <gahr> I'd like such a modular approach better than deciding up-front a fixed set of human readable sentences
[16:48:18] <flatcap> lua should be fast enough
[16:48:42] <gahr> can we define lua functions in neomuttrc?
[16:49:42] * flatcap tries to remember how it all works
[16:50:19] <flatcap> neomutt defines some objects and functions that lua can use/call
[16:50:41] <gahr> yeah
[16:51:46] <flatcap> in the lua-samples repo, there's C code that calls luaL_dofile() on a lua script
[16:54:42] <gahr> honestly, I think 
[16:54:48] <gahr> index-format-hook does the job good enough, no?
[16:55:20] <flatcap> I know there was a way to pre-compile lua to make it faster. I don't know if scripts can be cached
[16:55:51] <flatcap> I'm _slightly_ in favour of the code, but yes there are lots of awkward corner cases
[16:57:10] <gahr> is there a standard way to do that, at least?
[16:57:10] <flatcap> we could add a contrib script, with a best attempt
[16:57:56] <flatcap> sorry?  do what?
[16:58:23] <gahr> I'm wondering if there's an industry standard, or a C library, that takes two epoch and returns a string with a humanized version of the duration
[16:58:31] <gahr> so we don't have to reinvent the wheel and take all the nasty decisions
[16:59:08] <flatcap> oh.  I didn't think to look.  I assumed not
[16:59:17] <gahr> return sprintf(buf, "%13s", _(E6h));
[16:59:29] <gahr> btw, this is broken when the translated string is not 13 chars long, isn't it?
[17:00:02] <gahr> why is everything 13 chars anyway?
[17:00:21] <jindraj_> there will be probably 0 C libraries for this use cas and ~1 billion npm modules :D
[17:00:44] <flatcap> hehe how true
[17:01:47] <flatcap> gahr: yeah, they should all be %s and s*N*printf
[17:02:08] <gahr> yep
[17:02:12] <gahr> and the alignment has its own format specifier
[17:02:17] <gahr> jindraj_: yeah
[17:03:56] <flatcap> date(1) can convert practically *anything* into a valid time, but I can't find the reverse
[17:09:08] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[17:15:41] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[17:24:30] <jindraj_> flatcap: there are also multiple ways how to tell the date(1) the same. e.g.: "1 day ago", "yesterday", "-1 day" (+ variants in minutes, secodns etcâ€¦). There must be some conversion logic but I believe this will be one way only.
[17:26:39] <flatcap> yeah
[17:53:10] <flatcap> dcpurton: I figured out how to view your attachments.  there are lots of separate functions
[17:53:57] <flatcap> <view-attach> and <view-mailcap> are very similar letting neomutt/mailcap decide
[17:54:37] <flatcap> then there's <view-pager> that specifically looks for a copiousoutput mailcap entry, e.g. w3m
[17:55:04] <flatcap> and <view-text> will view the raw HTML
[17:58:21] <dcpurton> let me try that!
[17:59:29] <dcpurton> errr
[17:59:37] <dcpurton> what's the bind keyword for that menu?
[17:59:51] <flatcap> 'attach' I think
[18:05:34] <dcpurton> Oh! It works!
[18:06:09] <flatcap> :-)
[18:21:05] <artagnon> 13 chars is a choice chosen in advance, because "earlier today" is the longest string (minus translations), and it's 13 chars long.
[18:22:46] <artagnon> And yeah, there are lots of libs in more high-level languages that do humanization (js, rust, python, ruby).
[18:23:59] *** Joins: wolfshappen (~waff@irc.furworks.de)
[18:25:32] <artagnon> See also: `git log --date=human`.
[18:26:04] <flatcap> good example :-)
[18:26:20] <gahr> right!
[18:26:54] <flatcap> quick, cut'n'paste their code
[18:28:11] * artagnon laughs
[18:29:18] <artagnon> See also: `git log --date=relative`.
[18:30:07] <flatcap> ah.  our repo goes all the way back to "24 years ago" :-)
[18:30:59] <artagnon> I have relative dates turned on by default for git.
[18:31:26] <artagnon> I rarely know what the current date/time on any given day/time.
[18:31:53] <gahr> https://github.com/git/git/blob/e773545c7fe7eca21b134847f4fc2cbc9547fa14/date.c#L131
[18:32:13] <flatcap> aha!
[18:32:55] <flatcap> comment further down: "Centuries is probably overkill"
[18:32:58] <gahr> if we go for a code-based approach, we should seriously consider cut'n'paste
[18:33:07] <gahr> at least for consistency with a hugely used tool
[18:33:21] <flatcap> yeah
[18:34:55] <artagnon> Well, this can be achieved using index-format-hook, as it only checks the diff.
[18:35:13] <flatcap> true
[18:35:45] <artagnon> I'm familiar with the git codebase actually ... I used to be quite an active contributor back in the day.
[18:36:08] <artagnon> I thought we could take some bold decisions, being a much smaller project.
[18:36:27] <flatcap> cool
[18:36:30] <artagnon> git has certain user-expectations and limitations imposed on the dev.
[18:37:33] <flatcap> ok.  let me have a think about it
[18:38:43] <artagnon> git is written in strict C89, and their coding style is pre-clang-format, so you have no choice but to manually review whitespace.
[18:41:26] <flatcap> yeah, we can reformat it.  and it's GPLv2 so there aren't any licensing problems
[18:43:19] *** Joins: blaub (~blaub@194-208-201-025.tele.net)
[18:43:24] <flatcap> right.  lens...  in a word, we need polymorphism
[18:44:24] <flatcap> in the absence of C++ classes, we implement derived classes by having private data on the Account/Mailbox/Email
[18:45:05] <flatcap> the lens Mailbox would have to be the same, so it could be used transparently by the other code
[18:46:37] <artagnon> Yeah.
[18:47:00] <artagnon> In other words, we need to inject lens into core mutt.
[18:47:10] <flatcap> the MXAPI would send commands to the lens backend which would relay them as necessary
[18:47:45] <flatcap> no.  some front-end code would need to know, but I think most would be hidden
[18:48:21] <artagnon> Right. One backend uses the extra field.
[18:48:32] <dcpurton> flatcap, I started to create a matrix of how different mail clients handle the multipart/related emails at https://github.com/neomutt/neomutt/pull/3197
[18:48:40] <dcpurton> If you're keen, feel free to add some more
[18:48:54] <artagnon> Which means that we don't need to copy the hashtable, an especially ugly step.
[18:49:26] <flatcap> dcpurton: nice!
[18:49:41] <flatcap> command:   lens-mailbox my-inbox imap://inbox  imap://sent  etc
[18:49:46] <dcpurton> night
[18:50:15] <flatcap> parse_lens() would do the setup: lens_new(), lens_add(inbox), etc
[18:50:19] <flatcap> dcpurton: night
[18:50:19] *** Quits: blaub (~blaub@194-208-201-025.tele.net) (Quit: WeeChat 3.4)
[18:50:56] <artagnon> Okay, let's step back a minute, and ask if this is a feature worth adding first.
[18:51:14] <artagnon> gahr seemed to have some objection with feature-bloat.
[18:51:23] <artagnon> ... and so did some others.
[18:51:48] <flatcap> ok.  your use-case doesn't thrill me :-) but... it would be a very useful step towards making the notmuch backend work beautifully
[18:52:17] <artagnon> Can you write a comment about this?
[18:52:41] <flatcap> yeah. sorry I didn't get around to it yet.  tied up with attachments
[18:53:11] <flatcap> I'll try to draw some diagrams for you too
[18:53:28] <artagnon> If the side-effect of this feature is very pleasant, we can write the feature nevertheless, even if the use-case is niche.
[18:53:47] <flatcap> yes, that's my feeling
[18:54:14] <flatcap> it's not going to be easy -- but you seem to like a good challenge :-)
[18:54:21] <artagnon> %h is off my hands for now -- it requires subjective decisions.
[18:55:00] <artagnon> As long as we're able to convince other devs, I'm on board.
[18:55:01] *** Quits: dcpurton (~dcpurton@193-115-93-249.tpgi.com.au) (Ping timeout: 256 seconds)
[18:55:18] <flatcap> I need to think a bit more about the mechanics of the lens -- I think I have most of it straight
[18:55:52] <flatcap> that's pretty much just gahr
[18:58:14] <gahr> lens-mailbox, it's pretty much a paradigm shift to me
[18:58:30] <flatcap> have you read the notmuch code?
[18:58:30] <gahr> at that point, I'd upgrade everything to be virtual mailboxes on top of some backend storage
[18:58:52] <gahr> at that point, I'd make notmuch work natively with imap :)
[18:58:57] <flatcap> hehe
[18:59:11] <flatcap> Imap supports plugins -- it could be done
[18:59:53] <gahr> so what happens if you try to write to my-inbox?
[18:59:57] <flatcap> but all my crazy ideas to make notmuch work with emails that don't exist locally, have been shot down (by bremner)
[19:00:06] <gahr> does it write on the first underlying mailbox?
[19:00:11] <gahr> does it refuse to do so?
[19:00:37] <gahr> yeah that doesn't mean retrofitting the approach into neomutt is necessarily a good idea, though
[19:00:48] <flatcap> for the notmuch case, all the children mailboxes would need to be read/write
[19:00:54] <artagnon> It's a lens, gahr. It always passes through to the underlying mailbox.
[19:01:05] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 256 seconds)
[19:01:08] <gahr> so it writes to all of them?
[19:01:23] <flatcap> if you query: all new emails, then mark them read, then sync
[19:01:32] <flatcap> you'd need to commit to all of them
[19:01:41] <artagnon> If the mail is in multiple mailboxes, sure.
[19:01:46] <gahr> no, I'm talking more about save-message my-inbox
[19:02:04] <gahr> say, you are in +Trash and you want to undelete a mail
[19:02:35] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:02:37] <gahr> you'd save-message it to your inbox.. but since your "inbox" is now a lens on multiple mailboxes
[19:02:48] <gahr> you need to pick which one to physically move the message to
[19:03:10] <flatcap> yes
[19:03:22] <flatcap> you could make it read-only some operations
[19:03:29] <artagnon> Every Email comes bundled with a Mailbox that owns it.
[19:03:49] <bremner> flatcap: I prefer "helped to an early landing" to "shot down" :P
[19:03:58] <gahr> :)
[19:03:59] <flatcap> hehe
[19:04:11] <artagnon> I suppose for Trash, we could remember the previous owning Mailbox.
[19:04:16] <gahr> I think the implication of having this feature need to be thought through a bit more
[19:04:23] <gahr> artagnon: down the rabbit hole you go
[19:04:28] <flatcap> yep, that's what I'm still doing
[19:04:53] <gahr> I have the impression that the complexity increase is non-negligible
[19:04:53] <flatcap> unfortunately, I haven't thought of a simpler way to make the notmuch backend work
[19:05:13] <flatcap> yes, it's certainly not simple
[19:06:14] * artagnon scratches his head
[19:06:27] <flatcap> the #ifdef USE_NOTMUCH are scattered throuh the code
[19:06:48] <gahr> I lost context, why are you talking about notmuch
[19:06:51] <flatcap> and it has to lie about the types of Mailboxes to make certain things work
[19:07:13] <gahr> oh, you are looking forward to getting rid of it and implemnent its funtionality in neomutt proper?
[19:07:14] <flatcap> becuase fixing the notmuch backend is *my* goal for the lens
[19:07:37] <gahr> mh but that only works for local mailboxes, doesn't it?
[19:08:03] <flatcap> no, we'd still have the notmuch backend, but its implementation would be simpler if the mailbox could have children
[19:10:31] <flatcap> if you create a notmuch query, then open an email, notmuch does the work calling maildir functions
[19:11:04] <flatcap> I'd like to seen notmuch delegate to the Maildir backend. transparently
[19:13:38] <flatcap> that's the plan.  but I'll still working through the details
[19:19:31] <artagnon> Sounds good to me. Please post a small writeup and re-open the PR. I'll continue working on it after that.
[19:20:13] <flatcap> ok
[19:21:38] <artagnon> In the meantime, gahr and you can reach an agreement on how far %h should go. I'd push for the likes of humanization we see in js libraries, but it's up to the both of you to decide where to draw the line. 
[19:22:10] <flatcap> ok
[19:26:40] <adray> hello everyone
[19:27:05] <gahr> artagnon: I just feel uncomfortable with hard-coding preferences in the code
[19:27:13] <flatcap> hi adray 
[19:27:20] <gahr> if we could at least back them by some industry standard or previous art
[19:27:30] <gahr> at least we could say "hey, we're just doing like X does"
[19:27:46] <gahr> but this looks very much like it should all be configurable to me
[19:28:04] <adray> how's it going, flatcap?
[19:28:21] <artagnon> ... but we do ship with _some_ defaults, don't we?
[19:28:32] <flatcap> good thanks.  busy trying to change the world^Wneomutt
[19:28:40] <artagnon> We can't avoid making choices entirely.
[19:28:58] <artagnon> We do ship _some_ features, and not others, don't we?
[19:29:11] <artagnon> ... and it's dependent on what the user-base wants.
[19:29:17] <gahr> are you referring to something in particular, or just metaphysically speaking?
[19:29:27] <adray> i appear to have joined in the midst of a philosophical discussion
[19:29:27] <artagnon> Metaphysically speaking.
[19:29:37] <gahr> ok, then sure :)
[19:29:59] <gahr> there's a gray area between "we ship a bash script you can tweak" and "we ship an executable you can't configure"
[19:31:07] <artagnon> I agree, but the problem of "humanization" is ill-defined and requires picking hard-coded values.
[19:31:32] <artagnon> I wouldn't like to hammer our user-base with non-configurable choices either.
[19:31:35] <gahr> OR letting each user decide its preference
[19:31:52] <artagnon> ... but for instance, consider `git blame`.
[19:32:11] <gahr> if you can get 90% of what you want with index-format-hook, then to my eyes that's the choice, hands down
[19:32:11] <artagnon> There's `git blame -C`, `git blame -CC`, and `git blame -CCC`.
[19:32:50] <artagnon> It's not about 90% gahr, it's about elegance and perfection :(
[19:33:18] <artagnon> Now, how would you say `git blame -CCC` is different from `git blame -C`?
[19:33:29] <gahr> elegance is subjective, perfection is.. well..
[19:33:57] <artagnon> You can't expect the end-user to understand the complex beast that blame.c is.
[19:34:39] <artagnon> ... and therefore, it's impossible to make it configurable to the end-user, expect using "try harder", "try even harder", "try as hard as you possibly can!".
[19:34:41] <gahr> I can expect a user to understand a sample config we ship that contains https://github.com/neomutt/neomutt/pull/3190#issuecomment-1009904470, though
[19:34:51] <adray> if we're going to provide a %h, I think it should be consistent. convert all dates to hours, days, months, years, decades, centuries, millennia, era, eons, etc. if someone wants specific dates after any point, shouldn't that be handled by index_format_hook?  
[19:34:58] <gahr> I don't know about git blame, let's keep talking about neomutt please :/
[19:35:28] <artagnon> Sorry, I was getting too metaphysical :P
[19:36:18] <gahr> I still think that we could add a same_day, same_week, same_month, and same_year expandos
[19:36:38] <gahr> and possibly a config to tell us when a week starts
[19:36:58] <gahr> that'd be a configurable approach that'd allow you to have everything you want using index-format-hook
[19:37:01] <artagnon> You don't mind config-bloat as much? :)
[19:37:06] *** Martin[XMPP] is now known as Martin
[19:37:06] *** Martin is now known as Martin[XMPP]
[19:37:21] <gahr> I prefer config-bloat to hard-coded-decision-bloat
[19:37:31] <gahr> if I have to pick one
[19:38:10] <gahr> you're gonna have the "is the date the same as today?" code anyway.. the question is what you do with that.. do you hard-code a decision or do you expose it for the user to consume?
[19:38:35] <artagnon> Fwiw, adding 5 new config variables to avoid making a decision for the user seems like a bit of an overkill.
[19:38:56] <gahr> perhaps the best thing would be to (re)figure how to define a lua function in our config files, and call it so each user can make whatever it wants 
[19:39:37] <flatcap> gahr: how about favour tweaking the ~d pattern, e.g.  "~d today"  "~d this_week"
[19:39:49] <flatcap> s/favour//
[19:41:05] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:41:13] <artagnon> Perhaps it's not a common enough feature, but I really can't use neomutt without date-humanization.
[19:41:42] <artagnon> If we can find a way to make humanization configurable and easy to set up, nothing like it.
[19:44:42] <flatcap> ok, that topic has got heated enough for today
[19:44:52] <flatcap> time to talk about unicorns
[19:45:31] <flatcap> ðŸ¦„ ðŸŒˆ
[19:45:38] *** Joins: nyah (~nyah@94.6.71.219)
[19:52:32] <adray> have you seen the proposal for a simple defer() in C?
[19:52:59] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[19:53:08] <flatcap> no. what does that do?
[19:53:21] <ericam> adray: I really like defer() in other languages, but I'm not sure if C is necessarily the best place to introduce control structures like that.  It would absolutely eliminate one of the only uses of `goto`, which is error handling with multiple exit points.
[19:53:39] <flatcap> oh
[19:53:43] <ericam> flatcap: it defers execution of a statement/block to whenever the function exits.
[19:53:46] <adray> flatcap: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2895.htm
[19:54:52] <flatcap> interesting
[19:55:43] <ericam> adray: Is this one Go-style or Zig-style? (end of a function, or end of a block)?
[19:57:16] <adray> end of block/scope from my understanding
[19:57:38] <ericam> Much easier to make it have a deterministic stack usage that way, so it makes sense
[20:00:47] <flatcap> that's neat stuff
[20:03:24] <ericam> I wish C had more Zig-like allocation strategies.  Honestly IDK how we didn't have the idea of passing around allocators before, although maybe I'm enough of a youngin that I don't know about some LISP features that was introduced in '63 haha
[20:04:21] <flatcap> :-)
[20:04:48] <gahr> it was on lobsters yesterday I think
[20:04:57] <gahr> that's also how I learned that C is going to get lambdas
[20:05:09] <adray> lobsters?
[20:05:30] <gahr> https://lobste.rs/
[20:05:32] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 240 seconds)
[20:05:40] <ericam> Huh, isn't that a rust site?
[20:05:40] <gahr> flatcap: how would ~
[20:05:47] <gahr> flatcap: how would ~d today work?
[20:06:30] <gahr> ericam: it does get some rust hype, but no :)
[20:06:59] <adray> looks similar to HackerNews
[20:07:08] <gahr> it's a bit like hackernews but with fewer people, more focussed on computing, and with fewer flames
[20:07:52] <adray> time to bookmark it. thanks for telling me about it
[20:08:13] <flatcap> index-format-hook  date  "~d today"    "earlier today"
[20:08:14] <gahr> yw
[20:08:25] <flatcap> (after some <1H <4H etc)
[20:08:47] <gahr> oh!
[20:08:58] <gahr> for index-format-hook?
[20:09:13] <gahr> "~dtoday" "earlier today" ?
[20:09:15] <flatcap> yes.  that would give you the accuracy without the hard-coding
[20:09:29] <flatcap> ish
[20:09:37] <gahr> sure, I though you were against my is_today, is_this_week, etc expandos
[20:10:36] <flatcap> yes, you said expandos (% things), did you mean patterns (~ things)?
[20:10:49] <gahr> oh!
[20:11:03] <flatcap> ah! ok
[20:11:09] <gahr> sorry :(
[20:14:17] <gahr> (btw, can we give the guy the night to fix the rocksdb pkg? I think he's UTC+<a-lot>
[20:15:58] <flatcap> yeah, no rush
[20:20:18] <gahr> shall we settle on a 
[20:20:27] <gahr> shall we settle on a ~dtoday pattern ? :)
[20:22:24] <flatcap> let me think about it. at least 'til ~dtomorrow
[20:22:46] <gahr> and the winner is..
[20:23:22] <gahr> it's getting late anyway, good night :)
[20:23:37] <flatcap> night gahr
[20:24:39] *** Joins: bsd4me (~IceChat95@user/bsd4me)
[20:26:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:39:38] *** Quits: kzak (~kzak@nat-37.starnet.cz) (Ping timeout: 250 seconds)
[20:44:24] *** Quits: polve (~polve@user/polve) (Ping timeout: 250 seconds)
[20:45:55] <ericam> quick question: is google getting worse or am I just dumber than I used to be
[20:46:12] <ericam> Like, finding relevant results is significantly harder for me than it was ~2016 even
[20:52:37] <flatcap> dunno.  I hadn't noticed any degradation.  perhaps I only search for simple things
[21:19:39] <elshize> ericam: it might be getting smarter, but the size of the web is much larger
[21:19:57] <ericam> elshize: That's true too.  My main thing I notice is an increase in sponsored results
[21:20:00] <elshize> also, google is concerned with you finding what they want you to find, and what you want to find LOL
[21:20:07] <elshize> ericam: exactly :D
[21:22:13] <elshize> can't say about google, I've been using duckduckgo for years now, and only fall back to startpage once in a while (usually without any search improvement, only very rarely)
[21:23:19] <ericam> Okay, on-topic question now: I'm looking at setting up notifications for new mail in neomutt, and I'm confused about `new_mail_command`.  Will I be able to send a notification including the name of the mailbox it has arrived in?
[21:24:13] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[21:25:33] <flatcap> unfortunately, not yet
[21:25:56] <flatcap> it's a very old feature that was piggy-backed on something else
[21:26:16] <flatcap> when the command gets the notification we don't know where it came from
[21:26:29] *** Joins: polve (~polve@user/polve)
[21:26:52] <ericam> hurgh.  On a scale of 1-10 of "how hard is this to solve," I'm guessing this is at least a 7?
[21:28:08] <ericam> Also, can I at least get the subject line of the email?
[21:29:43] *** Joins: polve2 (~polve@user/polve)
[21:29:58] <flatcap> difficulty. er...
[21:30:16] <flatcap> fixing it properly will take time.  we getting there.
[21:30:49] <ericam> Yeah, I understand.  Especially when it's an old codebase
[21:30:53] <flatcap> fixing it quickly, could be done.  we'd want some code adding to the maildir/imap/mbox backends
[21:31:26] <flatcap> the backend knows everything you want, but it doesn't communicate it
[21:31:49] *** Quits: polve (~polve@user/polve) (Ping timeout: 256 seconds)
[21:31:49] <flatcap> it could send a notification with the relevant info
[21:32:25] <flatcap> it would also make sense to improve the command part of it...
[21:32:49] <flatcap> to keep track of ... hmm...
[21:34:06] <flatcap> ok, not too hard.  less than an 7
[21:34:23] <flatcap> I'll have a think about that too :-)
[21:34:35] <ericam> No hurry, I'm sure you've got higher priority stuff
[21:34:39] *** Quits: polve2 (~polve@user/polve) (Ping timeout: 256 seconds)
[21:35:15] *** Joins: polve (~polve@user/polve)
[21:35:34] <flatcap> ok
[21:40:21] <flatcap> food, back later
[22:21:54] *** Quits: bsd4me (~IceChat95@user/bsd4me) (Ping timeout: 250 seconds)
[22:37:20] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[22:37:47] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:06:14] *** Joins: bsd4me (~IceChat95@user/bsd4me)
[23:08:32] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[23:09:22] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[23:26:03] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[23:30:05] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:33:04] *** Joins: strajder (~strajder@user/strajder)
[23:34:54] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[23:40:29] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
