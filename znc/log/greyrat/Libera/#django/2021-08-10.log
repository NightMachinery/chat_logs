[00:11:46] *** Joins: longstride (~longstrid@69.84.252.41)
[00:16:40] *** Quits: longstride (~longstrid@69.84.252.41) (Quit: Client closed)
[00:16:41] *** Quits: barrios (~barrios@D4709A1E.rev.sefiber.dk) (Ping timeout: 248 seconds)
[00:20:09] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[00:28:03] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[00:28:25] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 248 seconds)
[00:30:05] *** Quits: shangxiao (~davids@101.181.108.207) (Quit: WeeChat 3.2)
[00:30:23] *** Parts: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (WeeChat 3.1)
[00:33:14] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[00:35:00] *** Joins: Steve-Dusty (~Steve-Dus@user/steve-dusty)
[00:36:23] <Steve-Dusty> guys help
[00:36:43] <Steve-Dusty> I want to filter a list of classes
[00:37:04] <Steve-Dusty> that corresponds to a specific teacher
[00:37:40] <Steve-Dusty> so if "Mr. Steve" creates Science and math class and "Mr. FunkBob" created Computer Science and Django then it'll display Science math if im logged into Mr Steve
[00:37:52] <Steve-Dusty> and if Im logged into Mr FunKBob it'll display compsci and django
[00:37:58] <Steve-Dusty> But I need to do it in CBVs
[00:46:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:48:18] <GinFuyou> override get_queryset() adding corresponding filter()
[00:50:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:50:49] *** ChanServ sets mode: +v EvilDMP
[00:59:18] <wallbroken> do you know a way to make a diff of a code?
[00:59:41] <wallbroken> i want the new lines with + at the beginning of the line and the deleted lines with -
[01:02:45] *** Quits: alukach (~alukach@node-1w7jr9ycxzz73vlecv077ogs5.ipv6.telus.net) (Quit: Client closed)
[01:05:39] <dodo> wallbroken: are those files in a git repo?
[01:06:00] <wallbroken> no
[01:06:07] <dodo> then see man diff
[01:07:21] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 248 seconds)
[01:08:35] *** Quits: hEXE90 (~hEXE90@ip70-180-255-41.lv.lv.cox.net) (Quit: Client closed)
[01:12:19] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[01:16:55] *** Joins: longstride (~longstrid@69.84.252.41)
[01:34:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:47:29] *** Quits: longstride (~longstrid@69.84.252.41) (Quit: Client closed)
[01:48:17] <b-rex> Steve-Dusty: get_queryset returns Class.object.filter(teacher=request.user) or w/e pretty ezpz!
[01:48:58] <b-rex> ok maybe not exactly that easy but it can be done with a CBV
[01:52:03] *** Joins: serghei (~egrep@user/serghei)
[01:53:55] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (Remote host closed the connection)
[02:01:45] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 248 seconds)
[02:04:07] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[02:07:49] *** Joins: thiras (~thiras@user/thiras)
[02:08:24] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:11:31] *** Joins: twomanytacos (uid366386@id-366386.tooting.irccloud.com)
[02:11:57] *** Joins: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28)
[02:12:09] *** Quits: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28) (Read error: Connection reset by peer)
[02:12:28] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[02:13:14] *** Joins: thiras (~thiras@user/thiras)
[02:16:17] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[02:19:35] *** Joins: Qwerky_ (~Qwerky@37.172.99.29)
[02:20:21] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:22:44] *** Quits: Qwerky (~Qwerky@37.164.246.26) (Ping timeout: 256 seconds)
[02:30:00] *** Joins: thiras (~thiras@user/thiras)
[02:30:15] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:40:25] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:44:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:45:44] <PaulWay[w]> dodo++
[02:45:57] *** Quits: serghei (~egrep@user/serghei) (Quit: serghei)
[02:50:13] <wallbroken> i used WinMerge
[02:51:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:52:26] <jochum> wallbroken: "diff -Naur original new" is what i use
[02:55:15] *** Joins: serghei (~egrep@user/serghei)
[02:55:20] *** Quits: serghei (~egrep@user/serghei) (Client Quit)
[02:55:39] <wallbroken> jochum: i need to create a patch
[02:56:06] <PaulWay[w]> Sad that Windows doesn't include basic tools like diff... :wink:
[02:56:25] <wallbroken> the result should be like this: https://hg.mozilla.org/comm-central/raw-rev/20c21ea84c4a9b4012b31016e096654e3bd60a56
[02:58:48] <PaulWay[w]> Yes.  That's generated by `git diff`.
[03:01:41] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:18:20] <hyper_dave> I couldn't get my head around this. So, I have model "A" which has ManyToMany relation with model "B". And I have model "C" which have foreign keys to models "A" and "C". Now I want to get a list of "C" from "A" as A.b.c. But I'm getting "C"'s from other parent's too.
[03:19:11] <PaulWay[w]> C has a foreign key to C?
[03:19:44] <hyper_dave> C has foreign keys to A and B
[03:19:47] <hyper_dave> soorry my bad
[03:19:54] <PaulWay[w]> Maybe if you used non-abstract names we can reason about it better.
[03:19:59] <hyper_dave> Here is a snippet to make it clear.
[03:20:00] *** Quits: Qwerky_ (~Qwerky@37.172.99.29) (Remote host closed the connection)
[03:20:02] <hyper_dave> http://hastebin.com/edatasumas.py
[03:20:51] *** Joins: tone0 (~tone0@071-011-252-111.res.spectrum.com)
[03:20:56] <PaulWay[w]> You don't need to declare both sides of the relationship in Django.
[03:21:47] <hyper_dave> The Idea is to share SensorParameter specs to multiple sensors.
[03:22:16] <PaulWay[w]> Hmmmm.  Yes, I suppose you aren't doing that here...
[03:22:57] <hyper_dave> So SensorParameters have datatype and other specs in the complete model.
[03:23:13] <PaulWay[w]> Yeah, that's OK.
[03:24:22] <PaulWay[w]> So the problem you're having is... that sensor.parameters.objects.all() lists ... what?
[03:24:36] <PaulWay[w]> Because you won't have a sensor.parameter.records set.
[03:25:13] <PaulWay[w]> But you will be able to filter say on Sensor.objects.filter(parameter__record__value=3)
[03:25:25] <PaulWay[w]> Sorry, parameter__records__value=3
[03:26:15] <hyper_dave> That was not the correct syntax I just wanted to show the idea. I want Sensor.objects.all()[0].parameters.all()[0].records.all() to get the records tied to the sensor.
[03:26:41] <hyper_dave> sensor.parameters.all() returns right parameters.
[03:29:05] <PaulWay[w]> Well, see, the problem there is the way you're selecting things.
[03:29:52] *** Joins: Qwerky (~Qwerky@37.172.99.29)
[03:29:59] <PaulWay[w]> You've got one sensor.  Then you get the first parameter from that.  That Parameter object doesn't know it's linked to the sensor you got previously.
[03:30:45] <PaulWay[w]> So when you ask for the parameter's records, it's not filtering the SensorParameterRecord list by 'sensor' value.
[03:31:05] <PaulWay[w]> You need to look at the Prefetch object and the prefetch_related queryset method.
[03:32:09] <PaulWay[w]> Or just `for sensor in Sensor.objects.all(): for parameter in sensor.parameters.all(): for record in parameter.records.filter(sensor=sensor):` ...
[03:32:24] <PaulWay[w]> hyper_dave: does that make sense?
[03:33:07] <hyper_dave> Never used prefetch before. Looking at the docs.
[03:33:29] <hyper_dave> I am trying to use it with drf. That's why it got confusing.
[03:33:53] <PaulWay[w]> Right, yes.  Then you definitely want to use Prefetch objects where you set the queryset.
[03:34:39] *** Quits: Qwerky (~Qwerky@37.172.99.29) (Ping timeout: 276 seconds)
[03:37:27] <PaulWay[w]> I don't think you can use an OuterRef in there, which is what we kind of want to do.
[03:37:34] <PaulWay[w]> schinckel may know more about this.
[03:38:33] <PaulWay[w]> You might be able to do it by direct filtering in the Sensor query using Sensor.objects.filter(parameter__reports__sensor_id=F('id'))
[03:38:42] <PaulWay[w]> Try that out.
[03:39:00] *** Joins: lorcab (~user@197.251.194.240)
[03:39:01] <PaulWay[w]> May be much simpler than the Prefetch, although prefetching is definitely advised in this situation.
[03:43:53] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 258 seconds)
[03:48:34] <hyper_dave> I don't quite get prefetch.
[03:49:16] <PaulWay[w]> Are you familiar with the prefetch_related queryset method?
[03:49:25] <hyper_dave> Nope.
[03:49:33] <hyper_dave> Was trying to read the docs.
[03:49:36] <PaulWay[w]> OK - are you familiar with the select_related queryset method?
[03:49:52] *** Joins: Qwerky (~Qwerky@37.172.99.29)
[03:50:24] *** Quits: killjoy (~nameless@user/killjoy) (Ping timeout: 258 seconds)
[03:51:14] <PaulWay[w]> The problem is that in your case what's going to happen is that DRF will fetch the Sensors list.  Then when it serialises each SensorParameter it will make a new request for that SensorParameter object.  Then when it serialises the SensorParameterValue for each SensorParameter, it'll make an individual request for that SensorParameterValue.
[03:53:20] <schinckel> No OuterRef inside prefetch. But you can change the prefetch query set.
[03:54:07] *** Joins: killjoy (~nameless@user/killjoy)
[03:54:08] <hyper_dave> I did Sensor.objects.prefetch_related('_parameters__records')[0]._parameters.all()[0].records.all() to verify manually.
[03:54:17] *** Quits: Qwerky (~Qwerky@37.172.99.29) (Ping timeout: 248 seconds)
[03:55:07] <hyper_dave> I have two sensors with only one of them having records. I gott all recordings in both sensor queries.
[03:58:04] *** Joins: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14)
[04:01:24] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (Remote host closed the connection)
[04:01:50] *** Joins: barrios (~barrios@D4709AF7.rev.sefiber.dk)
[04:02:00] *** Quits: barrios (~barrios@D4709AF7.rev.sefiber.dk) (Remote host closed the connection)
[04:04:45] *** Joins: djapo (~archangel@user/djapo)
[04:08:44] <PaulWay[w]> hyper_dave: yeah - that's where you'll need to use a Prefetch object for the prefetch_related.
[04:08:53] <PaulWay[w]> hyper_dave: so you get what prefetch_related is doing?
[04:09:16] <hyper_dave> Yeah.
[04:09:29] <hyper_dave> But what is prefetch object?
[04:09:47] <PaulWay[w]> It's basically the next step up from just saying "prefetch this related data set".
[04:09:58] <PaulWay[w]> It allows you to control the queryset of that related data.
[04:10:32] <PaulWay[w]> schinckel: this is where I think we need your knowledge :-)
[04:11:10] <PaulWay[w]> I'm not sure how to filter that queryset so that the SensorParameterRecord's 'sensor' is the same as the original queryset's 'sensor'.
[04:13:44] <PaulWay[w]> What I want to be able to do is `prefetch_related(Prefetch('parameters__records', queryset=SensorParameterRecord.objects.filter(sensor=OuterRef('sensor'))))`
[04:13:51] <PaulWay[w]> But we can't use an OuterRef there...
[04:19:25] *** Joins: Qwerky (~Qwerky@37.172.99.29)
[04:19:58] *** Quits: Steve-Dusty (~Steve-Dus@user/steve-dusty) (Quit: Client closed)
[04:20:01] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:22:17] <hyper_dave> Got it working somehow.
[04:22:25] <hyper_dave> Half way done.
[04:23:58] *** Quits: Qwerky (~Qwerky@37.172.99.29) (Ping timeout: 268 seconds)
[04:26:27] *** Joins: barrios (~barrios@D4709A01.rev.sefiber.dk)
[04:26:38] *** Quits: barrios (~barrios@D4709A01.rev.sefiber.dk) (Remote host closed the connection)
[04:27:26] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[04:32:50] *** Joins: djapo (~archangel@user/djapo)
[04:37:39] <hyper_dave> PaulWay[w]: Okay got it working. Thanks!
[04:37:44] <schinckel> Prefetch is supposed to already limit to the related objects - you can then limit further using the queryset parameter.
[04:38:00] <PaulWay[w]> hyper_dave: great!
[04:38:03] <hyper_dave> Yes I used queryset.
[04:38:09] <PaulWay[w]> What did you end up using as a queryset?
[04:39:11] *** Quits: lorcab (~user@197.251.194.240) (Remote host closed the connection)
[04:42:04] <hyper_dave> In my viewsets, I have a custom class called NestedModelViewSet. and my urlpattern i used ExtendedDefaultRouter from drf_extensions. And my url patter is something like this. "/api/sensors/pk/parameters/" so in my NestedViewSet I can get parent_lookup dictionary where it populates related parents. So i defined get_queryset method for it and used the populated parent, ie. sensor to define prefetch
[04:42:07] <hyper_dave> queryset.
[04:42:12] <hyper_dave> PaulWay[w]: Does that make sense?
[04:42:29] *** Joins: barrios (~barrios@D4709A01.rev.sefiber.dk)
[04:42:56] <PaulWay[w]> Interesting!
[04:43:17] <PaulWay[w]> I'll have to look at the ExtendedDefaultRouter.
[04:44:10] <dre> is there any way to coerce a relatedmanager to behave like a different queryset without changing the underlying model definition?
[04:45:32] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[04:45:48] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[04:47:17] <schinckel> dre: Can you elaborate? Do you mean using a proxy model?
[04:48:54] <dre> hang on, I'm still trying to define a simple example ...
[04:49:17] <hyper_dave> PaulWay[w]: I'd show you the code but I'm not sure if the client is cool with it.
[04:55:51] <PaulWay[w]> *shrugs* That's OK.
[04:56:48] <dre> schinckel, nvm, I've solved it
[04:56:57] <dre> thanks
[05:25:55] *** Joins: paranoia (~ryan@user/sapi01)
[05:26:18] *** Parts: paranoia (~ryan@user/sapi01) ()
[05:26:53] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:44:29] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:45:05] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:50:33] *** Quits: barrios (~barrios@D4709A01.rev.sefiber.dk) (Ping timeout: 248 seconds)
[05:52:10] *** Joins: himcesjf_ (uid409730@tinside.irccloud.com)
[05:52:19] *** Quits: twomanytacos (uid366386@id-366386.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[05:52:40] *** Joins: dez_ (uid92154@user/dez)
[05:52:41] *** Joins: henbruas_ (~henbruas@ti0003a400-3211.bb.online.no)
[05:53:47] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[05:55:08] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Read error: Connection reset by peer)
[05:55:08] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (Read error: Connection reset by peer)
[05:55:08] *** Quits: dez (uid92154@user/dez) (Read error: Connection reset by peer)
[05:55:08] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[05:55:08] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: No Ping reply in 180 seconds.)
[05:55:08] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 272 seconds)
[05:55:09] *** henbruas_ is now known as henbruas
[05:55:10] *** himcesjf_ is now known as himcesjf
[05:55:11] *** dez_ is now known as dez
[05:55:22] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[05:55:22] *** ChanServ sets mode: +v apollo13
[05:55:36] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[05:55:47] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[05:55:51] <tm007> mornin
[05:56:16] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[05:56:42] *** Joins: Elzington_ (~Elzington@68.235.43.28)
[05:56:58] <PaulWay[w]> OK, what just happened to my network...
[05:56:59] <PaulWay[w]> We didn't go through a net.split did we?
[05:58:01] *** Quits: Elzington (~Elzington@68.235.43.21) (Ping timeout: 248 seconds)
[06:01:45] *** Joins: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28)
[06:01:52] <PaulWay[w]> hyper_dave: how does your NestedModelViewSet work?  Do you have the code anywhere?
[06:03:22] <hyper_dave> http://hastebin.com/oqomopusuw.py
[06:04:01] <hyper_dave> create and delete methods are a bit hacky in an attempt to make a generic solution.
[06:05:50] *** Quits: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28) (Read error: Connection reset by peer)
[06:06:10] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[06:06:22] *** Quits: ente_ (~ente@p200300dc5f058f00b82813af5062e873.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:08:30] *** Joins: ente_ (~ente@p200300dc5f0b7b0077d687d8c50841ea.dip0.t-ipconnect.de)
[06:13:08] <hyper_dave> PaulWay[w]: Have you read it?
[06:14:00] <hyper_dave> Not quite sure if it is the right way to do it.
[06:19:59] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (Remote host closed the connection)
[06:20:06] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[06:20:17] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[06:28:57] *** Quits: hyper_dave (~hyper_dav@197.156.107.78) (Ping timeout: 248 seconds)
[06:30:57] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[06:31:42] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[06:32:03] *** Joins: flynn (~mcbloch@user/flynn)
[06:43:06] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[06:44:59] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[06:50:26] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[06:52:12] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[06:53:32] *** Joins: summersault (~summersau@179.221.251.16)
[06:55:10] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[06:56:24] *** Joins: djapo (~archangel@user/djapo)
[06:58:09] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[06:59:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:00:57] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 248 seconds)
[07:01:48] *** Joins: bambanxx (~bambanx@181-163-45-80.baf.movistar.cl)
[07:03:37] *** Quits: rje (~rje@50.35.241.164) (Remote host closed the connection)
[07:04:09] *** Joins: rje (~rje@65.141.156.170)
[07:07:50] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[07:10:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 272 seconds)
[07:20:08] *** Joins: Steve-Dusty (~Steve-Dus@user/steve-dusty)
[07:20:08] <Steve-Dusty> Guys help
[07:20:12] <Steve-Dusty> I wrote my own custom user model
[07:20:17] <Steve-Dusty> now LoginRequiredMixin won't work
[07:20:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:25:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[07:27:17] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (Remote host closed the connection)
[07:29:33] <Steve-Dusty> is that supposed to happen
[07:31:30] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-175.46.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[07:33:22] <b-rex> did you set AUTH_USER_MODEL in your settings?
[07:36:17] <b-rex> https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-AUTH_USER_MODEL
[07:38:56] *** vinleod is now known as vdamewood
[07:48:17] *** Joins: CapnKernel (foobar@gromit.mixdown.ca)
[07:56:59] *** Joins: djapo (~archangel@user/djapo)
[08:05:16] *** Joins: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28)
[08:05:38] *** Joins: aidos (~aidos@pa49-183-31-105.pa.vic.optusnet.com.au)
[08:06:15] <aidos> I can't see an easy way to inspect any registered templatetags :| template.Library seems to be reinitialized by every app
[08:14:21] *** Quits: Kalov (~Thunderbi@179.56.117.154) (Quit: Kalov)
[08:20:47] *** Joins: Kalov (~Thunderbi@179.56.117.154)
[08:25:12] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:29:36] *** fjmorazan_ is now known as fjmorazan
[08:36:22] <FunkyBob> aidos: each template library creates its own instance... if that's what you mean
[08:37:37] <Steve-Dusty> b-rex ofc
[08:37:41] <Steve-Dusty> the authentication system works
[08:37:43] <Steve-Dusty> it works well
[08:37:51] <Steve-Dusty> the only thing that doesn't work is LoginRequiredMixin
[08:38:01] *** Quits: bambanxx (~bambanx@181-163-45-80.baf.movistar.cl) (Ping timeout: 248 seconds)
[08:38:05] <Steve-Dusty> https://rahmanfadhil.com/django-login-with-email/
[08:38:12] <Steve-Dusty> I followed this tutorial
[08:38:55] <FunkyBob> do you want to allow login by username, also?
[08:38:58] <FunkyBob> or only email?
[08:39:05] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Ping timeout: 248 seconds)
[08:39:33] <FunkyBob> and when you say LoginRequiredMixin "won't work"... what is it doing that you say is "not working"?
[08:39:47] *** Joins: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl)
[08:41:21] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[08:41:29] <FunkyBob> Steve-Dusty: ?
[08:41:49] <Steve-Dusty> I'm going to do login/username for now
[08:41:53] <Steve-Dusty> email*
[08:42:01] <FunkyBob> do you mean email/password ?
[08:42:02] <Steve-Dusty> and when I said it "wont work" it wont redirect to home if user not logged in
[08:42:12] <Steve-Dusty> email/username and password for login*
[08:42:28] <FunkyBob> so "email or username" + password?
[08:42:32] <Steve-Dusty> yes
[08:42:34] <FunkyBob> ok
[08:42:42] <FunkyBob> then the additional auth backend is warranted.
[08:42:54] <Steve-Dusty> yes
[08:43:03] <FunkyBob> and you're sure the user is not logged in because... you just logged out?
[08:43:09] <Steve-Dusty> yes
[08:43:10] <FunkyBob> or you used an incognito window?
[08:43:11] <FunkyBob> or?
[08:43:16] <Steve-Dusty> I wrote a log out function
[08:43:25] <FunkyBob> instead of using the built in one...
[08:43:32] <FunkyBob> why?
[08:43:52] <FunkyBob> what evidence do you have your logout view is working correctly?
[08:44:16] <Steve-Dusty> because if I go to 127.0.0.1/logout it will say url don't exist. my theory is that I didn't add accounts.urls premade  in urls.py
[08:44:28] <Steve-Dusty> and evidence is that if I go create a class it'll error
[08:44:34] <Steve-Dusty> class.teacher must use customusermodel
[08:44:46] <FunkyBob> umm
[08:44:48] <schinckel> aidos: Have you tried https://docs.djangoproject.com/en/3.2/ref/contrib/admin/admindocs/ ?
[08:44:56] <FunkyBob> why would "url doesn't exist' mean your logout is working?
[08:45:13] <Steve-Dusty> you asked me why I didn't use the built-in one
[08:45:23] <Steve-Dusty> I told you because before I custom wrote a logout func it wouldn't work
[08:45:39] <FunkyBob> because you didn't write a url path to hook it in where you wanted it?
[08:45:49] <Steve-Dusty> I didn't yes
[08:46:14] <FunkyBob> so instead of writing a url path to map the url to the view you wanted... you wrote your own view, and still wrote a url path ...
[08:46:36] <FunkyBob> so, the evidence you have that you're not logged in is an error because something that hsouild get a User isn't getting it
[08:46:39] <FunkyBob> or
[08:46:43] <aidos> schinckel ah yeah, https://github.com/django/django/blob/main/django/contrib/admindocs/views.py#L57
[08:46:46] <aidos> thanks
[08:46:47] <FunkyBob> that's what's _implied_ by what you said.... I'd need to see the error to be sure
[08:46:52] <Steve-Dusty> ok
[08:46:56] <Steve-Dusty> one sec
[08:47:48] <Steve-Dusty> https://dpaste.org/UtBU
[08:47:55] <Steve-Dusty> error because it couldnt detect request.user.
[08:48:09] <Steve-Dusty> I filtered get_queryset to show classes from current request.user
[08:48:25] <Steve-Dusty> so if I logged out there would be no current user to filter  so it'd error
[08:48:28] <FunkyBob> and the view?
[08:48:43] <Steve-Dusty> https://dpaste.org/qR42
[08:48:44] <Steve-Dusty> 2nd view
[08:48:44] <FunkyBob>     return Class.objects.filter(teacher=self.request.user)
[08:48:48] <Steve-Dusty> yes
[08:48:58] <Steve-Dusty> but when I login everything works perfectly
[08:49:08] <FunkyBob> also could be written self.request.user.class_set.all()
[08:49:29] <Steve-Dusty> ok I get it
[08:49:42] <FunkyBob> put LoginRequiredMixin first in  the list of parent classes
[08:49:45] <FunkyBob> just as it is in the documentation
[08:49:50] <FunkyBob> https://docs.djangoproject.com/en/3.2/topics/auth/default/#the-loginrequired-mixin
[08:49:57] <dre> https://bpa.st/3LOQ
[08:49:59] <FunkyBob> not certain but this might help
[08:50:07] <dre> is there a way to do something like this?
[08:50:15] <dre> ignore the Enums as Choices
[08:50:45] <FunkyBob> dre: you want to define an enum as the superset of two others?
[08:50:51] <dre> ye
[08:51:15] <schinckel> You might be able to use `field = ChoiceField(choices=CodeBase.choices + CodeControlledLoad.choices)`
[08:51:23] <Steve-Dusty> funky yes
[08:51:26] <Steve-Dusty> funky it worked
[08:51:29] <Steve-Dusty> yes
[08:51:56] <dre> schinckel, what about as a general python question? not so much on the field. I'm trying to think why it wouldn't work but it doesn't.
[08:52:32] <Steve-Dusty> now I need to write tests and CSS
[08:52:51] <FunkyBob> Steve-Dusty: welcome to the world of "member resolution order' and multi-class inheritance
[08:53:09] <FunkyBob> dre: i was about to suggest you ask in #python
[08:54:04] <dre> I got mad at the guy who was just like "well he said no so there"
[08:54:32] <jochum> ^the guy
[08:54:54] <schinckel> dre: Enum's cannot be subclassed: https://docs.python.org/3/library/enum.html#restricted-enum-subclassing
[08:54:59] *** Joins: williampiv (~williampi@cpe-107-185-48-127.socal.res.rr.com)
[08:55:11] <dre> oh shit :D
[08:55:29] <Steve-Dusty> so i need to put loginrequiredmixin first
[08:55:31] <dre> alright alright I'll die on my sword
[08:55:43] <dre> thanks for the help anyway guys, esp jochum <3
[08:55:45] <Steve-Dusty> btw I found 3 members for my  webdev club
[08:56:06] <schinckel> Or more specifically,  Enums that define values cannot be subclassed.
[08:56:27] <jochum> schinckel: thats interesting
[08:57:02] <schinckel> But, you've just helped me think differently about my thing I was doing using Enums -  or more specifically django's *Choices stuff.
[08:57:23] <schinckel> I need ordered, but don't want to output the integer value...and that page has a class that helps with that.
[08:58:04] <jochum> schinckel: ordered as in sorted?
[08:58:13] <schinckel> Well, orderable, really.
[08:58:21] <jochum> ok
[08:58:23] <schinckel> I'm using an enum for status/level.
[08:58:40] <schinckel> Replacing strings 'ERROR', 'WARNING', etc, with an enum.
[08:58:59] <schinckel> But it still needs to render as `"ERROR"` in the JSON I generate.
[08:59:29] <schinckel> Django's IntegerChoices don't - the render as the integer they represent.
[09:01:01] *** Joins: Quacc (~youbuntoe@user/quacc)
[09:01:39] <Steve-Dusty> hi Wacc
[09:01:45] <Quacc> hey stebe
[09:02:16] <FunkyBob> get a room, you two :P
[09:03:23] <jochum> FunkyBob: we get the other?
[09:03:36] <FunkyBob> que?
[09:03:51] <jochum> :)
[09:04:22] <FunkyBob> I think I missed something.
[09:04:32] <jochum> the other room
[09:04:37] <Steve-Dusty> Quacc ask em what's better: sass or tailwindcss
[09:04:57] <dre> tailwind *is* sass (nerd laughter)
[09:05:00] <dre> also tailwind is great
[09:05:29] <dre> I'm wondering what would ber the problem with going something like `AnimalCodes = CatCodes.choices() + FishCodes.choices()
[09:05:30] <dre> `
[09:05:49] <jochum> dre: you wont give up, he? :)
[09:05:53] <FunkyBob> dre: was going to say that may be an option
[09:06:07] <Steve-Dusty> dre wut
[09:06:12] <dre> jochum, of course not, I've got a problem to solve
[09:06:12] <Steve-Dusty> tailwind IS sass?
[09:06:18] <Steve-Dusty> fakke
[09:06:19] <jochum> dre: n1
[09:06:21] <Steve-Dusty> wth
[09:06:29] <dre> Steve-Dusty, uses sass iirc
[09:06:51] <dre> @tailwind is a sass construct
[09:06:53] <Steve-Dusty> Tailwind vs Bootstrap which one do u like better
[09:06:57] <dre> <- knows nothing about css
[09:07:00] <dre> tailwind 100000x
[09:07:01] <Steve-Dusty> I don't like bootstrap that much because it have 9999999999 tags
[09:07:21] <FunkyBob> i dislike bootstrap less now that thy've ditched jquery
[09:07:29] <schinckel> dre: That will give you a list of 2-tuples, and if you have duplicate "key" values...the browser will not be able to distinguish.
[09:07:32] <Quacc> they ditched jquery?
[09:07:33] <Quacc> LETS GOOOOO
[09:07:50] <schinckel> That's the reason Django's TextChoices/IntegerChoices prevent duplicates of the same value.
[09:07:58] <Steve-Dusty> what is `aria-control` and ` aria-labelledby` nobody asked for this shit
[09:08:01] <dre> yeah I don't think it will fix my issue
[09:08:15] <FunkyBob> Steve-Dusty: actually, a LOT of people asked for aria attributes
[09:08:25] <FunkyBob> and in the US, it's required by law for a lot of sites to be accessible
[09:08:37] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[09:08:42] <dre> you know what
[09:08:45] <dre> my entire problem
[09:08:57] <dre> is that I just need to use a Union[..]
[09:09:11] <dre> I'm not specifying other enums, I'm specifying a type, aren't I.
[09:09:21] * dre huddles away and grumbles at stuff
[09:10:11] <Steve-Dusty> FunkyBob then explain how come in normal css it's so much ez to read
[09:10:42] <Quacc> for sass or tailwind?
[09:10:51] <Steve-Dusty> regular css
[09:11:05] <FunkyBob> Steve-Dusty: what has that to do with using accessibility attributes?
[09:11:13] <Steve-Dusty> and why does bootstrap have random ass ids
[09:11:35] <Quacc> regular css does not make templates
[09:11:36] <Steve-Dusty> tabindex??? normal CSS doesn't have that
[09:11:42] *** Quits: williampiv (~williampi@cpe-107-185-48-127.socal.res.rr.com) (Quit: wheee!)
[09:11:46] <Steve-Dusty> idk what you mean Quacc
[09:11:54] *** Joins: IceMichael (~IceMichae@x527162ea.dyn.telefonica.de)
[09:11:54] <FunkyBob> ok... you two need to take your pipe and smoke it elsewhere
[09:12:04] <schinckel> tabindex is part of the HTML spec.
[09:12:10] <Quacc> FunkyBob: *bong
[09:12:11] *** Joins: williampiv (~williampi@cpe-107-185-48-127.socal.res.rr.com)
[09:12:16] <FunkyBob> aria-* are part of the html spec, too
[09:13:07] <FunkyBob> Quacc: well done, you understood that much at least.
[09:14:22] *** Quits: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28) (Remote host closed the connection)
[09:14:44] <Quacc> i am 100% confused
[09:15:38] <FunkyBob> you two are pfaffing on about nonsense in here...
[09:15:56] <FunkyBob> take it elsewhere if you want to bait each other
[09:16:05] <Quacc> he diddnt ask me
[09:16:07] <Quacc> he asked you
[09:16:48] <FunkyBob> the question makes no sense
[09:18:21] <FunkyBob> for one it lacks sifficient context... first he's talking about aria attributes, then asking about "how come normal css is easier to read"
[09:18:31] <FunkyBob> how are these two ideas related?
[09:18:40] <FunkyBob> then you addi n the non-sequiter about templates
[09:18:56] <FunkyBob> you  two were flooding the channel with unrelated nonsense
[09:20:48] *** Quits: aidos (~aidos@pa49-183-31-105.pa.vic.optusnet.com.au) (Quit: Connection closed)
[09:21:28] <Quacc> i dont want to shift the blame onto steve but that was how i interprited the question
[09:21:53] <FunkyBob> ... and which question was that, exactly?
[09:22:20] <Quacc> as of "how come normal css is easier to read"
[09:22:28] <FunkyBob> than what?
[09:22:39] <Quacc> i diddnt say anything else
[09:23:00] *** Joins: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28)
[09:23:07] <FunkyBob> sure, but if it's easier "than' something... what is that something?
[09:23:28] <Steve-Dusty> what?? FunkyBob
[09:23:37] <FunkyBob> 03:56 < Steve-Dusty> FunkyBob then explain how come in normal css it's so much ez to read
[09:23:37] <Steve-Dusty> are you saying I don't understand as much as he does?
[09:23:46] <FunkyBob> no
[09:24:00] <FunkyBob> will someone kick these two trolls, please?
[09:24:02] <Steve-Dusty> i was doing polynomials
[09:24:18] <Steve-Dusty> FunkyBob, yes. Normal CSS don't have aria attributes
[09:24:21] <Steve-Dusty> it's straightforward
[09:24:34] <Steve-Dusty> it don't have weirdass classes and you create them
[09:24:34] <Quacc> its simply a matter of me just not having the entire context of the question
[09:24:35] <FunkyBob> Steve-Dusty: ... well, as mentioned aria attributs are in HTML
[09:24:36] *** Joins: Preston (~liminalcr@2600:6c5a:473f:6494::1a67)
[09:24:36] <Quacc> my mistake
[09:24:42] <Steve-Dusty> ok my bd
[09:24:44] <FunkyBob> css supports them as much as it supports any html attribute
[09:25:03] <FunkyBob> you caan use any of the attribute selectors on them
[09:25:08] <Steve-Dusty> ok btw im not troll
[09:25:11] <Steve-Dusty> I need this irc
[09:26:42] *** Quits: Steve-Dusty (~Steve-Dus@user/steve-dusty) (Quit: Client closed)
[09:26:56] *** Quits: barrios (~barrios@2a02:3035:40c:70e7:61a:e186:cc3b:4b28) (Read error: Connection reset by peer)
[09:27:15] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[09:34:04] *** Quits: williampiv (~williampi@cpe-107-185-48-127.socal.res.rr.com) (Quit: wheee!)
[09:38:38] *** Quits: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:40:47] <schinckel> Well that's really annoying. Python's `enum.Enum` doesn't  let you use arbitrary types as the "value type". If they subclass `object`, then it doesn't do the magic that it does with `int` as the type.
[09:42:43] <schinckel> ...although, int subclasses object.
[09:42:50] <schinckel> So maybe I don't know what's going on... :(
[09:42:59] *** Joins: mattil (~mattil@airio.portalify.com)
[09:47:58] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.2)
[09:49:19] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[09:52:38] <schinckel> Okay, fun hoop to jump through. Might have it...
[09:54:53] <schinckel> Can one define the default JSON encoder class in DRF?
[10:01:29] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[10:03:41] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[10:04:53] *** Joins: williampiv (~williampi@cpe-107-185-48-127.socal.res.rr.com)
[10:07:28] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:09:48] <dre> dammit
[10:10:01] <dre> I hate it when "# type: ignore" doesn't fix my problem
[10:14:44] *** Joins: Quacc (~youbuntoe@user/quacc)
[10:20:09] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.2)
[10:45:35] *** Joins: serghei (~egrep@user/serghei)
[11:04:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:04:05] *** ChanServ sets mode: +v EvilDMP
[11:17:48] *** Quits: Kalov (~Thunderbi@179.56.117.154) (Quit: Kalov)
[11:19:36] *** Quits: Preston (~liminalcr@2600:6c5a:473f:6494::1a67) (Ping timeout: 272 seconds)
[11:27:24] *** Quits: williampiv (~williampi@cpe-107-185-48-127.socal.res.rr.com) (Quit: wheee!)
[11:30:04] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (Remote host closed the connection)
[11:30:28] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[11:30:40] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Remote host closed the connection)
[11:39:53] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Ping timeout: 248 seconds)
[11:41:41] *** Joins: hyper_dave (~hyper_dav@197.156.95.251)
[11:46:12] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[11:47:25] *** Joins: yogoyo (~paddy@user/yogoyo)
[11:51:16] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 272 seconds)
[11:57:36] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[11:57:55] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[12:03:23] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Ping timeout: 268 seconds)
[12:08:14] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[12:11:49] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (Remote host closed the connection)
[12:12:08] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[12:12:19] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Remote host closed the connection)
[12:14:33] *** Quits: holbrode (sid339826@tinside.irccloud.com) (Ping timeout: 252 seconds)
[12:15:05] *** Quits: himcesjf (uid409730@tinside.irccloud.com) (Ping timeout: 248 seconds)
[12:16:00] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[12:16:04] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[12:21:49] *** Joins: _pete_ (~pete@31.132.33.199)
[12:22:45] <_pete_> Morning everyone, does anyone know how to run (and ideally debug) individual django unit tests with VS Code?
[12:22:59] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[12:23:10] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Remote host closed the connection)
[12:23:19] <hyper_dave> Is it a good Idea to merge service script (something that listens to data from a server and writes to db) to django API codebase?
[12:24:38] <hyper_dave> FunkyBob: Lesson learned before asking what something does.
[12:24:48] <hyper_dave> :P
[12:25:48] <dodo> _pete_: start a shell and python manage.py test path.to.test.module.class.method
[12:27:02] <_pete_> dodo: yea that will work but I a) don't really want to have to put the path in each time and more importantly b) may want to debug it
[12:28:02] <dodo> never used vs code, but i assume there must be some django plugin that does this for you automatically..
[12:28:45] <FunkyBob> hyper_dave: ??
[12:29:31] <FunkyBob> _pete_: most shells allow up-arrow to repeat commands...
[12:30:03] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[12:30:17] <_pete_> FunkyBob: I think debugging may be the bigger issue
[12:30:46] <FunkyBob> so open the file in vscode...
[12:30:57] <tm007> debugging is always the bigger issue
[12:30:59] <FunkyBob> am not clear where the problem is...
[12:31:12] <_pete_> Well I want to step through the debugging
[12:31:20] <FunkyBob> pdb does that well
[12:31:23] <tm007> add a breaking point
[12:31:27] <hyper_dave> FunkyBob: So I have a script that runs forever to get data from a server and it sends an API request to my API. Is it a good Idea to put the script in django, (if it is even possible) and just create model instances instead of calling the API?
[12:31:35] <FunkyBob> though I've heard some tell vscode has its own python debugger front end...
[12:31:52] <FunkyBob> hyper_dave: maybe
[12:32:17] <tm007> Anyone worked with pubd?
[12:32:25] <tm007> pudb*
[12:32:59] <tm007> hyper_dave: what do you mean by forever?
[12:34:58] *** Quits: audiocat (~audio@2603-8081-1800-00ad-312c-8a7d-098f-4cc5.res6.spectrum.com) (Remote host closed the connection)
[12:35:07] <hyper_dave> Started and stopped by manage.py and think of it as while True loop.
[12:35:17] *** Joins: audiocat (~audio@2603-8081-1800-00ad-e61c-eef0-ffd7-1da5.res6.spectrum.com)
[12:36:16] <hyper_dave> My main goal is to manage it with the API and performance.
[12:40:29] <FunkyBob> hyper_dave: thing to remember with using the ORM in a persistent  task is to periodically clean up
[12:40:52] <FunkyBob> clear out query logs, clean up connections
[12:41:20] <tm007> FunkyBob: You're a py charmer?
[12:44:31] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:51:48] <hemebond> If one wanted to customise an app (add thumbnail support, etc) would it be worth the effort to use a separate app (or even the project) or should I just edit the app?
[12:52:12] <hemebond> I've been trying to use a separate "theme" app to customise things but it's a bit of a struggle.
[13:02:04] <FunkyBob> tm007: wat?
[13:02:24] <tm007> FunkyBob: what IDE do you use? Pycharm?
[13:03:19] <FunkyBob> tm007: vscode
[13:05:13] <FunkyBob> hemebond: best I've managed with theming is  taking advantage of django's templates_list feature
[13:08:25] *** Quits: hyper_dave (~hyper_dav@197.156.95.251) (Ping timeout: 248 seconds)
[13:10:31] *** Joins: hyper_dave (~hyper_dav@197.156.95.251)
[13:11:42] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:14:06] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[13:17:27] <ExeciN> Hi people. I have a BinaryField in my model and I'm wondering if there is a way to create/update such fields in django admin using hexadecimal notation (0x...) as input.
[13:18:42] <ExeciN> *create/update records with such fields
[13:23:04] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[13:33:52] <hemebond> FunkyBob: The main thing is to separate the "project-specific" stuff from the apps, with all the templates in there and customisations to apps.
[13:34:54] <hemebond> But I'm very tempted to just throw everything (project-specific) into the main app.
[13:36:08] *** Quits: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com) (Ping timeout: 258 seconds)
[13:38:17] *** Joins: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com)
[13:40:41] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[13:54:47] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[13:55:00] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Remote host closed the connection)
[14:03:35] *** Joins: odile (~odile@aclermont-ferrand-257-1-17-125.w92-129.abo.wanadoo.fr)
[14:10:08] <odile> hello I have a problem with django/conf/__init__.py. in django docs https://docs.djangoproject.com/en/3.2/topics/settings/ it says that we can use django-admin with option --settings to manually pass in the settings module.
[14:16:07] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[14:16:09] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Remote host closed the connection)
[14:18:20] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:19:16] <odile> when I use this option the string of the path to the settings module is never converted into a module so it crashes in line 170 of init.py because the parameter settings_module is a string. How should I use the --settings in django-admin
[14:22:18] <FunkyBob> hemebond: or you could throw it in a project level dir
[14:31:20] *** Joins: barrios (~barrios@D4709A79.rev.sefiber.dk)
[14:36:20] *** Quits: hyper_dave (~hyper_dav@197.156.95.251) (Ping timeout: 268 seconds)
[14:37:44] *** Joins: hyper_dave (~hyper_dav@197.156.107.11)
[14:50:54] *** Joins: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net)
[14:54:54] *** Joins: Qwerky (~Qwerky@37.164.235.126)
[15:08:32] <hemebond> FunkyBob: Yeah, that's where I had it. Similar issues though, trying to wrangle the apps using signals. Getting there but feels a bit fragile.
[15:13:58] *** Quits: Qwerky (~Qwerky@37.164.235.126) (Remote host closed the connection)
[15:16:28] *** Joins: thiras (~thiras@user/thiras)
[15:19:22] *** Joins: Qwerky (~Qwerky@37.164.235.126)
[15:31:14] *** Quits: Qwerky (~Qwerky@37.164.235.126) (Remote host closed the connection)
[15:32:38] <davidsmith> I am trying to implement a Django template in Jinja2 (first time I've looked at Jinja). https://dpaste.org/aapV I have an issue with `field.label_tag`. It's a method so it renders as `<bound method ...>` I can call it in the template `field.label_tag()` but then I get a template error ("expected token 'end of print statement', got ':'",). Any thoughts?
[15:33:34] *** Quits: barrios (~barrios@D4709A79.rev.sefiber.dk) (Ping timeout: 272 seconds)
[15:34:08] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[15:35:05] *** Quits: odile (~odile@aclermont-ferrand-257-1-17-125.w92-129.abo.wanadoo.fr) (Ping timeout: 248 seconds)
[15:37:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:41:32] <kezabelle> davidsmith: show full traceback + template that causes it (rather than the one you're adapting?) ... seems like there's maybe an errant ":" somewhere in your template (or template stack)
[15:48:02] *** Quits: enkrypt (~enkrypt@user/enkrypt) (Quit: WeeChat 3.0)
[15:50:34] *** Quits: audiocat (~audio@2603-8081-1800-00ad-e61c-eef0-ffd7-1da5.res6.spectrum.com) (Remote host closed the connection)
[15:50:52] *** Joins: audiocat (~audio@2603-8081-1800-00ad-1e9f-2c4f-a2b5-03f0.res6.spectrum.com)
[15:51:33] *** Quits: hyper_dave (~hyper_dav@197.156.107.11) (Ping timeout: 268 seconds)
[15:53:21] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[16:01:32] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[16:16:26] *** Quits: lod (~lod@cyber-anlage.de) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 252 seconds)
[16:16:59] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 252 seconds)
[16:21:56] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (*.net *.split)
[16:21:56] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (*.net *.split)
[16:21:56] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (*.net *.split)
[16:21:56] *** Quits: rje (~rje@65.141.156.170) (*.net *.split)
[16:21:56] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[16:21:56] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[16:21:56] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[16:21:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[16:21:56] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (*.net *.split)
[16:21:56] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[16:21:56] *** Quits: iomari891 (~iomari891@105.112.138.38) (*.net *.split)
[16:21:56] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[16:21:56] *** Quits: carom (~carom@143.198.135.106) (*.net *.split)
[16:21:56] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[16:21:57] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[16:21:57] *** Quits: yogoyo (~yogoyo@user/yogoyo) (*.net *.split)
[16:21:57] *** Quits: Ergo^ (~ergo@91.238.59.144) (*.net *.split)
[16:21:57] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: _pete_ (~pete@31.132.33.199) (*.net *.split)
[16:21:57] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (*.net *.split)
[16:21:57] *** Quits: zBeeble (~zBeeble@2001:1928:1::35) (*.net *.split)
[16:21:57] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[16:21:57] *** Quits: kenbolton (~kenbolton@2001:470:69fc:105::2d24) (*.net *.split)
[16:21:58] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[16:21:58] *** Quits: NeuroWinter (~NeuroWint@107.172.219.233) (*.net *.split)
[16:21:58] *** Quits: doc (~doc@user/doc) (*.net *.split)
[16:21:58] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[16:21:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[16:21:58] *** Quits: ente_ (~ente@p200300dc5f0b7b0077d687d8c50841ea.dip0.t-ipconnect.de) (*.net *.split)
[16:21:58] *** Quits: mambang[m] (~mambang@user/mambang) (*.net *.split)
[16:21:58] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[16:21:58] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[16:21:59] *** Quits: benjaoming (~benjaomin@37.139.19.237) (*.net *.split)
[16:21:59] *** Quits: optiz0r_ (~quassel@universe.sihnon.net) (*.net *.split)
[16:21:59] *** Quits: jess (~jess@libera/staff/jess) (*.net *.split)
[16:21:59] *** Quits: chiz (~alkjkljkl@72.249.250.67) (*.net *.split)
[16:21:59] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (*.net *.split)
[16:21:59] *** Quits: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (*.net *.split)
[16:21:59] *** Quits: SallyAhaj (sallyahaj@user/sallyahaj) (*.net *.split)
[16:21:59] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: esaym153 (~esaym153@net153.net) (*.net *.split)
[16:21:59] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (*.net *.split)
[16:21:59] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[16:21:59] *** Quits: audiocat (~audio@2603-8081-1800-00ad-1e9f-2c4f-a2b5-03f0.res6.spectrum.com) (*.net *.split)
[16:21:59] *** Quits: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14) (*.net *.split)
[16:21:59] *** Quits: syberspace (~syberspac@xiaoxiao.anvor.at) (*.net *.split)
[16:21:59] *** Quits: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1) (*.net *.split)
[16:21:59] *** Quits: fgau (~fgau@mail.berliner-termindienst.de) (*.net *.split)
[16:22:00] *** Quits: tone0 (~tone0@071-011-252-111.res.spectrum.com) (*.net *.split)
[16:22:00] *** Quits: hemebond (~james@240b:12:12e2:f00:5604:a6ff:fe2c:50df) (*.net *.split)
[16:22:00] *** Quits: schinckel (uid38120@id-38120.charlton.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[16:22:00] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[16:22:00] *** Quits: Lartza (lartza@user/lartza) (*.net *.split)
[16:22:00] *** Quits: felixx (felixx@django/moderator/felixx) (*.net *.split)
[16:22:00] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[16:22:00] *** Quits: Kipe_ (kipe@user/kipe/x-8442575) (*.net *.split)
[16:22:00] *** Quits: serafeim (serafeim@thunix.net) (*.net *.split)
[16:22:00] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[16:22:01] *** Quits: bmbouter[m] (~bmbouter@2001:470:69fc:105::162f) (*.net *.split)
[16:22:01] *** Quits: dongcarl (~dongcarl@96.224.58.144) (*.net *.split)
[16:22:01] *** Quits: kiska (~kiska@user/kiska) (*.net *.split)
[16:22:01] *** Quits: CapnKernel (foobar@gromit.mixdown.ca) (*.net *.split)
[16:22:01] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[16:22:01] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[16:22:01] *** Quits: dang`r`us (~eismann@pg.afoo.at) (*.net *.split)
[16:22:01] *** Quits: mxp (~mxp@82.98.30.69) (*.net *.split)
[16:22:01] *** Quits: derf- (~derf@unprompted.com) (*.net *.split)
[16:22:01] *** Quits: kydd (~kydd@212.237.178.212) (*.net *.split)
[16:22:02] *** Quits: davidsmith (~pi@cpc119776-dudl14-2-0-cust74.16-1.cable.virginm.net) (*.net *.split)
[16:22:02] *** Quits: code1 (~code1@2001:470:69fc:105::c807) (*.net *.split)
[16:22:02] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[16:22:02] *** Quits: puckoh (~pucko@static.244.198.216.95.clients.your-server.de) (*.net *.split)
[16:22:02] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[16:22:02] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[16:22:02] *** Quits: jor (~jor@jor.link) (*.net *.split)
[16:22:02] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[16:22:02] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[16:22:02] *** Quits: MaioroiaM (~toor@django/moderator/doismellburning) (*.net *.split)
[16:22:03] *** Quits: ChOcO-Bn (~choco@user/choco-bn) (*.net *.split)
[16:22:03] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[16:22:03] *** Quits: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net) (*.net *.split)
[16:22:03] *** Quits: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com) (*.net *.split)
[16:22:03] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[16:22:03] *** Quits: serghei (~egrep@user/serghei) (*.net *.split)
[16:22:03] *** Quits: IceMichael (~IceMichae@x527162ea.dyn.telefonica.de) (*.net *.split)
[16:22:03] *** Quits: Elzington_ (~Elzington@68.235.43.28) (*.net *.split)
[16:22:03] *** Quits: killjoy (~nameless@user/killjoy) (*.net *.split)
[16:22:03] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (*.net *.split)
[16:22:03] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (*.net *.split)
[16:22:03] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (*.net *.split)
[16:22:03] *** Quits: lazzurs (~lazzurs@user/lazzurs) (*.net *.split)
[16:22:03] *** Quits: mbrndtgn5 (~mbrndtgn@undecidable.de) (*.net *.split)
[16:22:03] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[16:22:04] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[16:22:04] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[16:22:04] *** Quits: captain_morgan (~morgan@oit.cloud) (*.net *.split)
[16:22:04] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[16:22:04] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[16:22:04] *** Quits: oblikoamorale (~n@user/oblikoamorale) (*.net *.split)
[16:22:04] *** Quits: rwb (~augh@theguntretort.com) (*.net *.split)
[16:22:04] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (*.net *.split)
[16:22:04] *** Quits: blip2 (~blip2@blip2.net) (*.net *.split)
[16:22:04] *** Quits: moldy (~rene@user/moldy) (*.net *.split)
[16:22:04] *** Quits: MarkusH (MarkusH@django/moderator/MarkusH) (*.net *.split)
[16:22:04] *** Quits: pjs (~pjs@user/pjs) (*.net *.split)
[16:22:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[16:22:04] *** Quits: carlio (~carlio@88.198.149.110) (*.net *.split)
[16:22:05] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (*.net *.split)
[16:22:05] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[16:22:05] *** Quits: Damianz_ (~damian@user/damianz) (*.net *.split)
[16:22:05] *** Quits: WayToDoor7 (~WayToDoor@user/waytodoor) (*.net *.split)
[16:22:05] *** Quits: kanzure (~kanzure@user/kanzure) (*.net *.split)
[16:22:05] *** Quits: b-rex (~b@v.dropswitch.net) (*.net *.split)
[16:22:05] *** Quits: jgee (~jgee@186.80.49.20) (*.net *.split)
[16:22:05] *** Quits: bin4ry (~bin4ry@128.199.135.148) (*.net *.split)
[16:22:05] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[16:22:05] *** Quits: abyss_ (~robbins@user/robbins) (*.net *.split)
[16:22:05] *** Quits: ops (~ops@user/echelon) (*.net *.split)
[16:22:05] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[16:22:05] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (*.net *.split)
[16:22:05] *** Quits: mntee (~mntee@2001:19f0:5001:3a15:2020:170f:a0b8:d20e) (*.net *.split)
[16:22:05] *** Quits: askolsam (~askolsam@kamikaze.kaaosunlimited.fi) (*.net *.split)
[16:22:05] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (*.net *.split)
[16:22:05] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[16:22:05] *** Quits: allegary (~allegary@apache/committer/gjm) (*.net *.split)
[16:22:06] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[16:22:06] *** Quits: jasonbraganza (jasonbraga@user/jasonbraganza) (*.net *.split)
[16:22:06] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (*.net *.split)
[16:22:06] *** Quits: elho (~elho@outerspace.elho.net) (*.net *.split)
[16:22:06] *** Quits: justache (~justache@user/justache) (*.net *.split)
[16:22:06] *** Quits: jochum (~jochum@user/jochum) (*.net *.split)
[16:22:06] *** Quits: laman (laman@2600:3c02::f03c:92ff:fe3e:c08d) (*.net *.split)
[16:22:06] *** Quits: Grauwolf (~grauwolf@user/grauwolf) (*.net *.split)
[16:22:06] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[16:22:06] *** Quits: mboehn (mathias@hh1.nuxis.org) (*.net *.split)
[16:22:06] *** Quits: noyb (~noyb@user/noyb) (*.net *.split)
[16:22:06] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[16:22:06] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[16:22:06] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[16:22:06] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (*.net *.split)
[16:22:07] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[16:22:07] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[16:22:07] *** Quits: daniel-k (~daniel-k@192.241.135.211) (*.net *.split)
[16:22:07] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[16:22:07] *** Quits: MapMan (mapman@user/mapman) (*.net *.split)
[16:22:07] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[16:22:07] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[16:22:07] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[16:22:07] *** Quits: Xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[16:22:07] *** Quits: DanDare (~DanDare@user/dandare) (*.net *.split)
[16:22:07] *** Quits: kokotchY (~kokotchY@42.ip-79-137-37.eu) (*.net *.split)
[16:22:07] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (*.net *.split)
[16:22:07] *** Quits: Xeago (~Xeago@user/xeago) (*.net *.split)
[16:22:07] *** Quits: ExeciN (~ExeciN@user/nicexe) (*.net *.split)
[16:22:07] *** Quits: karunamon (~karu@skaianet.tkware.us) (*.net *.split)
[16:22:07] *** Quits: ktosiek (~ktosiek@li1810-126.members.linode.com) (*.net *.split)
[16:22:08] *** Quits: especial (~especial@2a0a:51c0:0:1f:67a7::2) (*.net *.split)
[16:22:08] *** Quits: mebus (~mebus@2a00:8a60:e019:10de::ac22) (*.net *.split)
[16:22:08] *** Quits: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001) (*.net *.split)
[16:22:08] *** Quits: tubogram (~tubogram@user/tubogram) (*.net *.split)
[16:22:08] *** Quits: Trieste_ (T@user/pilgrim) (*.net *.split)
[16:22:08] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[16:22:08] *** Quits: baroobob (~jwbwater@98.215.243.94) (*.net *.split)
[16:22:08] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[16:22:08] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (*.net *.split)
[16:22:08] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[16:22:08] *** Quits: StvnW (~StvnW@user/stvnw) (*.net *.split)
[16:22:08] *** Quits: crowbar (~crowbar@user/crowbar) (*.net *.split)
[16:22:08] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (*.net *.split)
[16:22:08] *** Quits: hackedhead (~hackedhea@li69-210.members.linode.com) (*.net *.split)
[16:22:08] *** Quits: hyperair (~hyperair@49.128.61.210) (*.net *.split)
[16:22:08] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[16:22:08] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[16:22:08] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[16:22:08] *** Quits: matthewwilkes (sid500242@id-500242.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8) (*.net *.split)
[16:22:08] *** Quits: coldmountain (sid484352@id-484352.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[16:22:08] *** Quits: debnet (sid330295@python/afpy/debnet) (*.net *.split)
[16:22:08] *** Quits: andrewgodwin (sid23792@django/member/andrewgodwin) (*.net *.split)
[16:22:08] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[16:22:08] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (*.net *.split)
[16:22:08] *** Quits: dnns01 (~quassel@2a02:c207:3003:651::1) (*.net *.split)
[16:22:08] *** Quits: daniel2 (daniel@user/daniel2) (*.net *.split)
[16:22:08] *** Quits: KramerC (kramer@user/kramerc) (*.net *.split)
[16:23:02] *** Quits: marienz_ (~marienz@libera/staff/marienz) (Ping timeout: 630 seconds)
[16:26:53] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[16:27:44] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[16:27:44] *** Joins: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001)
[16:27:44] *** Joins: mebus (~mebus@2a00:8a60:e019:10de::ac22)
[16:27:44] *** Joins: especial (~especial@2a0a:51c0:0:1f:67a7::2)
[16:27:44] *** Joins: karunamon (~karu@skaianet.tkware.us)
[16:27:44] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[16:27:44] *** Joins: tonitch (~tonitch@user/tonitch)
[16:27:44] *** Joins: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br)
[16:27:44] *** Joins: esaym153 (~esaym153@net153.net)
[16:27:44] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[16:27:44] *** Joins: SallyAhaj (sallyahaj@user/sallyahaj)
[16:27:44] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[16:27:44] *** Joins: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com)
[16:27:44] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[16:27:44] *** Joins: chiz (~alkjkljkl@72.249.250.67)
[16:27:44] *** Joins: jess (~jess@libera/staff/jess)
[16:27:44] *** Joins: optiz0r_ (~quassel@universe.sihnon.net)
[16:27:44] *** Joins: benjaoming (~benjaomin@37.139.19.237)
[16:27:44] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[16:27:44] *** Joins: ente_ (~ente@p200300dc5f0b7b0077d687d8c50841ea.dip0.t-ipconnect.de)
[16:27:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:27:44] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[16:27:44] *** Joins: Qwerky (~Qwerky@37.164.235.126)
[16:27:44] *** Joins: saschi_ (~saschi@user/saschi)
[16:27:44] *** Joins: syberspa1e (~syberspac@xiaoxiao.anvor.at)
[16:27:44] *** Joins: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net)
[16:27:44] *** Joins: harm_ (~urth@geertswei.nl)
[16:27:44] *** Joins: lod__ (~lod@cyber-anlage.de)
[16:27:44] *** Joins: ktosiek (~ktosiek@li1810-126.members.linode.com)
[16:27:44] *** Joins: wyre (~wyre@user/wyre)
[16:27:44] *** Joins: _janus- (~janus@blotter.ld-linux.so)
[16:27:44] *** Joins: ubernost1um (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[16:27:44] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[16:27:44] *** Joins: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de)
[16:27:44] *** Joins: thiras (~thiras@user/thiras)
[16:27:44] *** Joins: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net)
[16:27:44] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[16:27:44] *** Joins: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com)
[16:27:44] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[16:27:44] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:27:44] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:27:44] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[16:27:44] *** Joins: _pete_ (~pete@31.132.33.199)
[16:27:44] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[16:27:44] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[16:27:44] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[16:27:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:27:44] *** iridium.libera.chat sets mode: +v EvilDMP
[16:27:44] *** Joins: serghei (~egrep@user/serghei)
[16:27:44] *** Joins: IceMichael (~IceMichae@x527162ea.dyn.telefonica.de)
[16:27:44] *** Joins: CapnKernel (foobar@gromit.mixdown.ca)
[16:27:44] *** Joins: rje (~rje@65.141.156.170)
[16:27:44] *** Joins: flynn (~mcbloch@user/flynn)
[16:27:44] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[16:27:44] *** Joins: Elzington_ (~Elzington@68.235.43.28)
[16:27:44] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[16:27:44] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[16:27:44] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[16:27:44] *** Joins: dez (uid92154@user/dez)
[16:27:44] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:27:44] *** Joins: killjoy (~nameless@user/killjoy)
[16:27:44] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[16:27:44] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[16:27:44] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[16:27:44] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[16:27:44] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[16:27:44] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[16:27:44] *** Joins: Alan (~alan@user/alan)
[16:27:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:27:44] *** Joins: simplicity (~yti@user/simplicity)
[16:27:44] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[16:27:44] *** Joins: bmbouter[m] (~bmbouter@2001:470:69fc:105::162f)
[16:27:44] *** Joins: kenbolton (~kenbolton@2001:470:69fc:105::2d24)
[16:27:44] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[16:27:44] *** Joins: carom (~carom@143.198.135.106)
[16:27:44] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[16:27:44] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[16:27:44] *** Joins: WayToDoor7 (~WayToDoor@user/waytodoor)
[16:27:44] *** Joins: Damianz_ (~damian@user/damianz)
[16:27:44] *** Joins: kanzure (~kanzure@user/kanzure)
[16:27:44] *** Joins: mbrndtgn5 (~mbrndtgn@undecidable.de)
[16:27:44] *** Joins: FunkyBob (~curtis@vhost3.tinbrain.net)
[16:27:44] *** Joins: doc (~doc@user/doc)
[16:27:44] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[16:27:44] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[16:27:44] *** Joins: Trieste_ (T@user/pilgrim)
[16:27:44] *** Joins: bjs (sid190364@user/bjs)
[16:27:44] *** Joins: dongcarl (~dongcarl@96.224.58.144)
[16:27:44] *** Joins: kiska (~kiska@user/kiska)
[16:27:44] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[16:27:44] *** Joins: baroobob (~jwbwater@98.215.243.94)
[16:27:44] *** Joins: jochum (~jochum@user/jochum)
[16:27:44] *** Joins: elho (~elho@outerspace.elho.net)
[16:27:44] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[16:27:44] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[16:27:44] *** iridium.libera.chat sets mode: +v apollo13
[16:27:44] *** Joins: duoi (~duoi@user/duoi)
[16:27:44] *** Joins: b-rex (~b@v.dropswitch.net)
[16:27:44] *** Joins: jgee (~jgee@186.80.49.20)
[16:27:44] *** Joins: bin4ry (~bin4ry@128.199.135.148)
[16:27:44] *** Joins: captain_morgan (~morgan@oit.cloud)
[16:27:44] *** Joins: oisota (~oisota@user/oisota)
[16:27:44] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[16:27:44] *** Joins: ST47 (~ST47@wikimedia/st47)
[16:27:44] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[16:27:44] *** Joins: zkanda (~zkanda@box.makean.art)
[16:27:44] *** Joins: kevr (~kevr@user/kevr)
[16:27:44] *** Joins: oblikoamorale (~n@user/oblikoamorale)
[16:27:44] *** Joins: MapMan (mapman@user/mapman)
[16:27:44] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:27:44] *** Joins: rwb (~augh@theguntretort.com)
[16:27:44] *** Joins: laman (laman@2600:3c02::f03c:92ff:fe3e:c08d)
[16:27:44] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[16:27:44] *** Joins: jasonbraganza (jasonbraga@user/jasonbraganza)
[16:27:44] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[16:27:44] *** Joins: DanDare (~DanDare@user/dandare)
[16:27:44] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[16:27:44] *** Joins: blip2 (~blip2@blip2.net)
[16:27:44] *** Joins: moldy (~rene@user/moldy)
[16:27:44] *** Joins: MarkusH (MarkusH@django/moderator/MarkusH)
[16:27:44] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[16:27:44] *** Joins: pjs (~pjs@user/pjs)
[16:27:44] *** Joins: derf- (~derf@unprompted.com)
[16:27:44] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[16:27:44] *** Joins: shodan45 (~quassel@107.161.22.155)
[16:27:44] *** Joins: dang`r`us (~eismann@pg.afoo.at)
[16:27:44] *** Joins: StvnW (~StvnW@user/stvnw)
[16:27:44] *** Joins: justache (~justache@user/justache)
[16:27:44] *** Joins: slavfox (~slavfox@93.158.232.111)
[16:27:44] *** Joins: mxp (~mxp@82.98.30.69)
[16:27:44] *** Joins: abyss_ (~robbins@user/robbins)
[16:27:44] *** Joins: hackedhead (~hackedhea@li69-210.members.linode.com)
[16:27:44] *** Joins: bparker (~nobody@user/bparker)
[16:27:44] *** Joins: ops (~ops@user/echelon)
[16:27:44] *** Joins: crowbar (~crowbar@user/crowbar)
[16:27:44] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[16:27:44] *** Joins: hyperair (~hyperair@49.128.61.210)
[16:27:44] *** Joins: bjb (~bjb@sourcerer.ca)
[16:27:44] *** Joins: dnns01 (~quassel@2a02:c207:3003:651::1)
[16:27:44] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[16:27:44] *** Joins: carlio (~carlio@88.198.149.110)
[16:27:44] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[16:27:44] *** Joins: koolazer (~koo@user/koolazer)
[16:27:44] *** iridium.libera.chat sets mode: +v MarkusH
[16:27:44] *** Joins: Grauwolf (~grauwolf@user/grauwolf)
[16:27:44] *** Joins: Byteflux (~byte@byteflux.net)
[16:27:44] *** Joins: tubogram (~tubogram@user/tubogram)
[16:27:44] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:27:44] *** Joins: ChanServ (ChanServ@services.libera.chat)
[16:27:44] *** Joins: Wooble (~Wooble@107.170.27.240)
[16:27:44] *** Joins: Xavierdarkness (~xavierdar@user/xavierdarkness)
[16:27:44] *** Joins: kydd (~kydd@212.237.178.212)
[16:27:44] *** Joins: KramerC (kramer@user/kramerc)
[16:27:44] *** Joins: Xeago (~Xeago@user/xeago)
[16:27:44] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[16:27:44] *** Joins: kokotchY (~kokotchY@42.ip-79-137-37.eu)
[16:27:44] *** Joins: daniel2 (daniel@user/daniel2)
[16:27:44] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[16:27:44] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[16:27:44] *** Joins: andrewgodwin (sid23792@django/member/andrewgodwin)
[16:27:44] *** Joins: adamchainz (~adamj@51.15.34.126)
[16:27:44] *** Joins: debnet (sid330295@python/afpy/debnet)
[16:27:44] *** Joins: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[16:27:44] *** Joins: askolsam (~askolsam@kamikaze.kaaosunlimited.fi)
[16:27:44] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[16:27:44] *** Joins: noyb (~noyb@user/noyb)
[16:27:44] *** Joins: coldmountain (sid484352@id-484352.brockwell.irccloud.com)
[16:27:44] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[16:27:44] *** Joins: mntee (~mntee@2001:19f0:5001:3a15:2020:170f:a0b8:d20e)
[16:27:44] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[16:27:44] *** Joins: mboehn (mathias@hh1.nuxis.org)
[16:27:44] *** Joins: matthewwilkes (sid500242@id-500242.highgate.irccloud.com)
[16:27:44] *** Joins: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8)
[16:27:44] *** iridium.libera.chat sets mode: +o ChanServ
[16:27:50] *** Joins: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14)
[16:27:50] *** Joins: tone0 (~tone0@071-011-252-111.res.spectrum.com)
[16:27:50] *** Joins: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1)
[16:27:50] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[16:27:50] *** Joins: hemebond (~james@240b:12:12e2:f00:5604:a6ff:fe2c:50df)
[16:27:50] *** Joins: schinckel (uid38120@id-38120.charlton.irccloud.com)
[16:27:50] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[16:27:50] *** Joins: strudl (~strudl@user/strudl)
[16:27:50] *** Joins: wallbroken (wallbroken@user/wallbroken)
[16:27:50] *** Joins: Lartza (lartza@user/lartza)
[16:27:50] *** Joins: felixx (felixx@django/moderator/felixx)
[16:27:50] *** Joins: Kipe_ (kipe@user/kipe/x-8442575)
[16:27:50] *** Joins: serafeim (serafeim@thunix.net)
[16:27:50] *** iridium.libera.chat sets mode: +v felixx
[16:27:59] *** Joins: davidsmith (~pi@cpc119776-dudl14-2-0-cust74.16-1.cable.virginm.net)
[16:27:59] *** Joins: code1 (~code1@2001:470:69fc:105::c807)
[16:27:59] *** Joins: puckoh (~pucko@static.244.198.216.95.clients.your-server.de)
[16:27:59] *** Joins: deepy (deepy@user/deepy)
[16:27:59] *** Joins: jor (~jor@jor.link)
[16:27:59] *** Joins: deniska (~denis@user/deniska)
[16:27:59] *** Joins: MaioroiaM (~toor@django/moderator/doismellburning)
[16:27:59] *** Joins: ChOcO-Bn (~choco@user/choco-bn)
[16:27:59] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[16:27:59] *** iridium.libera.chat sets mode: +v MaioroiaM
[16:28:02] <tm007> for django inlie admin I want to have separate read only for add and edit.
[16:28:04] <tm007> Possible?
[16:28:13] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[16:28:25] *** Joins: dlam (~dlam@dlam.me)
[16:29:58] *** Joins: marienz (~marienz@libera/staff/marienz)
[16:31:02] *** Quits: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1) (Ping timeout: 256 seconds)
[16:31:08] *** Quits: code1 (~code1@2001:470:69fc:105::c807) (Ping timeout: 272 seconds)
[16:31:15] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Ping timeout: 268 seconds)
[16:31:24] *** Quits: bmbouter[m] (~bmbouter@2001:470:69fc:105::162f) (Ping timeout: 276 seconds)
[16:39:04] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:41:22] *** Joins: newdimension7 (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[16:42:34] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[16:42:34] *** newdimension7 is now known as newdimension
[16:43:59] *** Joins: djacobs (~IceChat95@109.133.171.241)
[16:45:30] *** Joins: allegary (~allegary@apache/committer/gjm)
[16:47:49] <davidsmith> kezabelle: Thank you for the nudge in the right direction!
[16:51:54] <kezabelle> np
[16:52:12] <kezabelle> my guess is you had {% for x in y: %} or {% if ..: %} somewhere?
[16:57:40] <davidsmith> {% for name, value in attrs.items %}{% if value is not False %} {{ name }}{% if value is not True %}="{{ value|stringformat:'s' }}"{% endif %}{% endif %}{% endfor %}
[16:57:56] <kezabelle> aha :)
[17:06:27] *** Joins: code1 (~code1@2001:470:69fc:105::c807)
[17:09:40] *** Quits: Qwerky (~Qwerky@37.164.235.126) (Remote host closed the connection)
[17:10:02] *** Joins: bmbouter[m] (~bmbouter@2001:470:69fc:105::162f)
[17:10:38] *** Quits: barrios (~barrios@dynamic-046-114-110-196.46.114.pool.telefonica.de) (Remote host closed the connection)
[17:10:58] *** Joins: barrios (~barrios@D4709A15.rev.sefiber.dk)
[17:11:05] *** Quits: barrios (~barrios@D4709A15.rev.sefiber.dk) (Remote host closed the connection)
[17:18:59] *** Joins: Qwerky (~Qwerky@37.164.235.126)
[17:24:24] *** Joins: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1)
[17:25:36] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[17:31:19] *** Quits: Qwerky (~Qwerky@37.164.235.126) (Remote host closed the connection)
[17:36:13] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[17:36:24] *** Joins: mambang[m] (~mambang@user/mambang)
[17:41:13] *** Joins: Qwerky (~Qwerky@37.164.235.126)
[17:44:38] <withered_wolf> if I had a view, where 2 users who had different roles (observer / observee) and the data being returned need to be slightly different for each (one shows items with a published = True status, one shows only items with published = False)... where should that logic live? I've read that having logic in the view is a no-no.
[17:45:38] *** Quits: Qwerky (~Qwerky@37.164.235.126) (Ping timeout: 252 seconds)
[17:45:43] <GinFuyou> > I've read that having logic in the view is a no-no.
[17:45:54] <GinFuyou> That is either using different terms
[17:46:01] <GinFuyou> Or complete nonsense
[17:46:40] <GinFuyou> 1st is most likely. Django "view" is an "adapter"
[17:47:36] <GinFuyou> Not what is "view" in MVC
[17:48:34] <withered_wolf> Django likes fat models and the views to be as logic-free as possible, no? Then any remaining logic to happen at Template level was my understanding.
[17:49:03] <withered_wolf> As that makes things the most easily testable
[17:49:22] <GinFuyou> No
[17:49:30] <withered_wolf> instead of having to test a view that has lots of logic and takes considerably longer to setup in all the various scenarios where you might need to test edge cases?
[17:49:53] <GinFuyou> Fat model is just one of approaches
[17:49:59] <kezabelle> Django doesn't care :)
[17:49:59] <GinFuyou> Views is the place for logic
[17:50:09] <kezabelle> Fat models are some people's preference
[17:50:31] <withered_wolf> My understanding was that Django themselves had that preference (fat models)
[17:50:42] <GinFuyou> Logic in templates is discouraged and limited by DTL itself
[17:51:52] <kezabelle> Meh, fat models are "easier" because proxies are crap and difficult in Python, and Django doesn't allow for _easily_ swapping out an implementation.
[17:51:54] <GinFuyou> My understanding is that Django themself had preference for jazz :P
[17:55:07] *** Joins: AstroBoar (~Falko@92.206.221.21)
[17:55:57] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[18:06:48] *** Joins: audiocat (~audio@2603-8081-1800-00ad-f351-4ddf-8729-f716.res6.spectrum.com)
[18:07:21] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:07:37] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[18:20:39] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[18:27:44] *** Joins: Falc (~Falc@193.191.206.243)
[18:29:27] *** lod__ is now known as lod
[18:33:12] <Falc> Is there a way to have a list_filter in the admin site that uses a property of the model, not a field? I mean, I already know I'll need an admin.SimpleListFilter subclass, but I'm a bit lost as to how to return a QuerySet that filters on a property
[18:33:40] <Falc> Like... If I do .annotate() first, can I then .filter() on the annotation?
[18:37:09] <GinFuyou> yes, but not on property
[18:46:54] *** Quits: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net) (Quit: Leaving...)
[18:52:02] *** Joins: twomanytacos (uid366386@id-366386.tooting.irccloud.com)
[18:55:51] *** Joins: Qwerky (~Qwerky@37.164.235.126)
[18:57:25] *** Joins: Crassus (~Crassus@user/crassus)
[19:02:26] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:05:50] *** Joins: sadg (~odd@cpc113812-lea23-2-0-cust1375.6-3.cable.virginm.net)
[19:07:03] <MarkusH> Can somebody tell my why `django.contrib.postgres` needs to be in the INSTALLED_APPS for OpClass to work? https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/indexes/#django.contrib.postgres.indexes.OpClass
[19:11:20] *** Quits: Falc (~Falc@193.191.206.243) (Quit: Leaving)
[19:16:09] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 258 seconds)
[19:17:32] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 268 seconds)
[19:19:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:24:02] <karunamon> @MarkusH https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/ - tl;dr, it's a Postgres specific feature that requires extra code to support
[19:25:45] <MarkusH> karunamon: https://github.com/django/django/blob/main/django/contrib/postgres/apps.py#L69 is the answer :)
[19:25:56] *** Joins: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi)
[19:26:05] <karunamon> oho, nice :)
[19:27:04] <karunamon> unrelated; is there a way to have my migrations run before/after the django system ones? I'm trying to write a migration that tweaks things in the sites database, but this won't work on a new install since the table doesn't get created until "my" migrations are all done.
[19:29:51] *** Quits: NeuroWinter (~NeuroWint@107.172.219.233) (Quit: ZNC 1.8.2 - https://znc.in)
[19:30:35] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[19:34:04] *** Joins: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl)
[19:37:20] <GinFuyou> If you add a dependency it will run after I believe?
[19:37:51] <GinFuyou> Not sure about before, but is that a problem?
[19:39:59] *** Joins: Safa_[A_Boy] (~Safa@89.148.10.218)
[19:41:41] <Safa_[A_Boy]> Hi all. Using the models defined in the top of this page: https://docs.djangoproject.com/en/3.2/topics/db/aggregation/  How can I fetch the last book published by each publisher alongside with the publisher? I can fetch publishers and their books this way: Publisher.objects.prefetch_related("book_set"). But I just want the last book of each...
[19:41:54] <karunamon> @GinFuyou I'd need to know what that migration is called (how to refer to it in the dependencies list). There's no file generated for the builtin migrations, so I'm not sure where I'd find that.
[19:43:08] <GinFuyou> karunamon, how there is no file generated?
[19:43:20] <GinFuyou> https://github.com/django/django/tree/main/django/contrib/sites/migrations
[19:44:18] <karunamon> GinFuyou: Oh! I meant in my app's migration folder. I wasn't aware that it was using an identical mechanism internally.
[19:44:42] <karunamon> So the right reference would be.. 'django.contrib.sites', '0001_initial'?
[19:45:55] <GinFuyou> probably just 'sites', but I can't say I edited my dependencies a lot
[19:47:29] <karunamon> yeah, this feels like a bit of a hack, in that i'm doing something I probably shouldn't be
[19:48:06] <karunamon> really all I'm trying to do here is force the domain of the initially created site to be something instead of example.com
[19:50:30] <karunamon> i'm a recovering rails dev looking for an equivalent to 'rake db:seed' :P
[19:53:24] <MarkusH> karunamon: `('sites', '0001_initial')` would be correct, as GinFuyou said.
[19:54:43] <GinFuyou> sounds like a rather normal data migration
[20:03:36] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:04:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[20:05:42] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[20:10:11] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[20:11:47] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 245 seconds)
[20:17:32] <Safa_[A_Boy]> No ideas? Using the models defined in the top of this page: https://docs.djangoproject.com/en/3.2/topics/db/aggregation/  How can I fetch the last book published by each publisher alongside with the publisher? I can fetch publishers and their books this way: Publisher.objects.prefetch_related("book_set"). But I just want the last book of each...
[20:18:09] <AstroBoar> join #dina
[20:19:23] <Safa_[A_Boy]> I don't think that answers my question, if it's an answer to my question in the first place
[20:25:11] *** Joins: Quacc (~youbuntoe@user/quacc)
[20:26:31] *** Quits: Quacc (~youbuntoe@user/quacc) (Client Quit)
[20:34:09] *** Quits: _pete_ (~pete@31.132.33.199) (Read error: Connection reset by peer)
[20:44:28] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:48:22] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:56:12] *** Joins: pbgc (~textual@83.240.250.199)
[20:59:06] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:59:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:02:12] *** Quits: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:08:07] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[21:08:45] *** Joins: modesix (~gurk@cpc104848-sgyl39-2-0-cust187.18-2.cable.virginm.net)
[21:12:26] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:13:32] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (Quit: Bye)
[21:15:10] *** Joins: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[21:25:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:25:26] *** ChanServ sets mode: +v EvilDMP
[21:29:31] *** Joins: znpy (~znpy@user/znpy)
[21:30:00] *** Joins: Quacc (~youbuntoe@user/quacc)
[21:30:29] *** Quits: pbgc (~textual@83.240.250.199) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:31:54] *** Joins: y04nn (~y04nn@91.193.4.154)
[21:34:05] *** Joins: pbgc (~textual@83.240.250.199)
[21:36:40] *** Quits: pbgc (~textual@83.240.250.199) (Client Quit)
[21:40:04] *** Joins: fortuno51_ (~fortuno51@37.120.156.254)
[21:41:49] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Ping timeout: 258 seconds)
[21:43:25] *** Joins: pbgc (~textual@83.240.250.199)
[21:44:25] *** Joins: Qwerky_ (~Qwerky@37.165.160.140)
[21:47:21] *** Quits: Qwerky (~Qwerky@37.164.235.126) (Ping timeout: 248 seconds)
[21:51:31] *** Quits: NeuroWinter (~NeuroWint@107.172.219.233) (Quit: ZNC 1.8.2 - https://znc.in)
[21:52:15] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[21:55:27] *** Quits: NeuroWinter (~NeuroWint@107.172.219.233) (Client Quit)
[21:56:14] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[22:02:52] *** Joins: Kalov (~Thunderbi@179.56.117.154)
[22:03:47] *** Quits: NeuroWinter (~NeuroWint@107.172.219.233) (Quit: ZNC 1.8.2 - https://znc.in)
[22:04:31] *** Joins: NeuroWinter (~NeuroWint@107.172.219.233)
[22:09:04] *** Quits: Elzington_ (~Elzington@68.235.43.28) (Quit: Leaving)
[22:21:52] *** Quits: Quacc (~youbuntoe@user/quacc) (Quit: WeeChat 3.2)
[22:24:44] *** Quits: pbgc (~textual@83.240.250.199) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:30:21] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[22:34:20] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[22:34:56] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[22:35:13] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[22:51:58] *** Quits: y04nn (~y04nn@91.193.4.154) (Ping timeout: 258 seconds)
[23:07:54] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[23:11:28] *** Joins: kostkon (~androirc@2a02:587:a110:f169:3115:57c0:a33f:71f6)
[23:17:01] *** Quits: AstroBoar (~Falko@92.206.221.21) (Quit: WeeChat 2.8)
[23:22:14] *** Joins: Quacc (~youbuntoe@user/quacc)
[23:22:45] *** Quits: Quacc (~youbuntoe@user/quacc) (Client Quit)
[23:25:49] *** Joins: y04nn (~y04nn@91.193.4.154)
[23:26:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 258 seconds)
[23:26:33] *** Quits: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi) (Quit: Leaving)
[23:30:59] *** Joins: fikran (~fikran@user/fikran)
[23:31:13] <fikran> I have some django code I stopped working on in around 2017, wondering if I can upgrade it to 2021 Django
[23:31:15] <fikran> and 2021 python...
[23:35:17] <dodo> sure, just do it
[23:39:35] *** Quits: y04nn (~y04nn@91.193.4.154) (Remote host closed the connection)
[23:39:47] *** Joins: y04nn (~y04nn@91.193.4.154)
[23:41:11] <Wooble> if by "2017" you mean django 2.0 and python 3.6, probably trivial. if you mean django 1.something with py2.7, probably a bit more work...
[23:41:30] <fikran> its python3.something, but its 1.9 or so
[23:41:32] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:42:02] <fikran> my understanding of security has changed a lot too, so wondering how database connections work now
[23:42:22] <fikran> it seems that the standard has gone from hardcoding the value in settings.py to an env variable
[23:42:55] <Wooble> the old way should still work. it was never a particularly good idea :)
[23:47:04] *** Quits: derf- (~derf@unprompted.com) (Quit: The Lounge - https://thelounge.chat)
[23:56:56] *** Joins: dkliban (~dkliban@nat-pool-rdu-t.redhat.com)
[23:57:02] *** Joins: pyrrhus (~pyrrhus@user/pyrrhus)
[23:58:22] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[23:58:40] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[23:59:33] <dkliban> i am using sync_to_async(thread_sensitive=True) around ORM calls, but I am still seeing new connections being opened up for each coroutine that is using the ORM
