[00:00:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:03:08] <Alipha> leonardus: btw, in addition to '-Wall -Wextra -Wpedantic -Wconversion -std=c++17', for DEBYG BUILDS, I also recommend '-fsanitize=leak, address,undefined -D_GLIBCXX_DEBUG' in order to catch UB and unfreed memory at runtime
[00:03:16] <Alipha> *DEBUG
[00:18:28] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 250 seconds)
[00:24:07] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[00:28:42] <ville> possibly you'd make your debug build and sanitizer build separate
[00:29:48] <PJBoy> I would definitely run address sanitizer separately
[00:30:01] <PJBoy> as it dies on first error unlike the others
[00:30:42] *** Joins: ivii (~ivan@user/ivii)
[00:34:02] <Alipha> doesn't all but leak die on the first error?
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:39:44] <PJBoy> undefined and thread keep going
[00:39:51] <PJBoy> I've never actually used leak, so not sure
[00:44:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:1181:18a7:7b4:f540) (Quit: Quit)
[00:45:37] <Alipha> Leak gives you a report when the program terminates
[00:45:58] <ville> if you try to debug builds with certain sanitizers gdb/sanitizer will complain about it anyways
[00:46:07] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:46:47] <ville> and also piling on the runtime costs of both, debug build and sanitizers, is perhaps not what you want
[00:56:07] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[00:57:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:57:53] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:acb3:81db:281b:e516)
[01:00:58] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:01:02] *** Joins: markong (~kvirc@213.146.188.203)
[01:06:39] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[01:08:35] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:09:34] *** Joins: pulse (~pulse@user/pulse)
[01:11:05] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[01:17:38] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:23:21] *** Joins: proller (~p@2a02:6b8:b081:8809::1:25)
[01:26:28] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[01:27:23] *** Joins: sigma_ (~sigma@86.57.79.161)
[01:28:39] *** Quits: magla (~gelignite@55d4f325.access.ecotel.net) (Quit: Stay safe!)
[01:32:04] *** Quits: sigma_ (~sigma@86.57.79.161) (Client Quit)
[01:33:49] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:41:34] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[01:41:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:53] *** ChanServ sets mode: +v npaperbot
[01:43:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:4c6e:be10:ad22:f46d)
[01:44:00] <xkoncek> valgrind tends to create ~100 MB crash dumps when a program crashes
[01:47:57] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:49:44] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[01:51:32] *** Quits: tct (~tct@user/tct) (Read error: Connection reset by peer)
[01:51:54] *** Joins: tct (~tct@user/tct)
[01:52:51] <sbrothy> or "-fmax-errors=3" because there's SO MANY! :)
[01:53:10] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[01:54:19] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:56:57] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[01:58:12] *** Joins: c4017w (~c4017@209.52.68.8)
[02:01:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[02:03:22] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d551:c5d6:10bb:b867)
[02:08:30] *** Quits: bingulo (~carlos@2804:431:e7c8:1e13:6aa5:f04b:2b75:a55b) (Remote host closed the connection)
[02:11:10] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:4c6e:be10:ad22:f46d) (Quit: Quit)
[02:13:58] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Read error: Connection reset by peer)
[02:15:24] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[02:15:27] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:19:33] *** Joins: chozorho (~chozorho@2601:146:300:c30::eb69)
[02:19:43] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:23:59] *** Joins: jokoon (~eio@2a01:e0a:542:e160:f1aa:93ea:6649:41de)
[02:26:09] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:26:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:68a2:f73f:5ebb:73b1)
[02:33:47] *** Quits: kilitary (~kilitary@188.242.187.4) (Quit: entering irc ...)
[02:38:01] *** kevr` is now known as kevr
[02:44:10] *** Joins: badone (~badone@209.132.189.152)
[02:45:29] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d551:c5d6:10bb:b867) (Quit: Leaving)
[02:46:26] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 252 seconds)
[02:47:02] *** Quits: jokoon (~eio@2a01:e0a:542:e160:f1aa:93ea:6649:41de) (Quit: Leaving)
[02:56:38] *** Joins: hexingb (~hexingb@60.10.254.229)
[02:57:41] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 250 seconds)
[02:58:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:02:15] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:03:19] *** Quits: segnior (segnior@user/segnior) (Quit: Leaving)
[03:16:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:17:56] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[03:17:57] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[03:22:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:25:28] *** Quits: hexingb (~hexingb@60.10.254.229) (Ping timeout: 256 seconds)
[03:28:40] *** Joins: hexingb (~hexingb@60.10.254.229)
[03:30:53] *** Joins: segnior (segnior@user/segnior)
[03:32:28] *** Quits: segnior (segnior@user/segnior) (Max SendQ exceeded)
[03:33:23] *** Joins: segnior (segnior@user/segnior)
[03:33:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:38:38] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:44:33] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[03:47:58] *** Quits: Leo_V (~Leo@216.154.23.229) (Read error: Connection reset by peer)
[03:49:27] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:50:45] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 256 seconds)
[03:59:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:00:13] *** Quits: MatSharrow (~matthew@117.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[04:00:29] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[04:03:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:03:26] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 252 seconds)
[04:03:59] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 252 seconds)
[04:04:00] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[04:15:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[04:18:10] *** Quits: AmR (~AmREiSa@156.207.146.251) (Ping timeout: 256 seconds)
[04:20:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:22:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:23:33] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:b3c8:85d0:c3eb:15a8) (Quit: Konversation terminated!)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:32:09] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a5a7:9716:6392:26bc) (Ping timeout: 250 seconds)
[04:33:28] *** Quits: hexingb (~hexingb@60.10.254.229) (Ping timeout: 256 seconds)
[04:37:11] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[04:41:57] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:65d6) (Quit: Leaving)
[04:42:53] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[04:44:50] *** Joins: hexingb (~hexingb@36.155.28.147)
[04:46:17] *** Quits: DrMax__ (~DrMax@132.215.96.30) (Ping timeout: 256 seconds)
[04:54:34] <kevr> does anybody know if lcov actually wants to fix their coverage bugs or not?
[04:57:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:59:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:03:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:16:17] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 240 seconds)
[05:25:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:64b2:4d59:ced9:7c72) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:13] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3444:f67f:24ed:5c4c:c6be)
[05:32:38] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:d4ed:731f:8862:bdd6)
[05:36:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:41:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:54] *** ChanServ sets mode: +v npaperbot
[05:46:07] *** Joins: hexingb (~hexingb@2409:8902:7ba1:3159:e935:5bb1:c3ff:9b7a)
[05:51:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[06:00:22] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:03:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:03:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:04:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:06:11] *** Quits: proller (~p@2a02:6b8:b081:8809::1:25) (Ping timeout: 245 seconds)
[06:07:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[06:09:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:56:31] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:57:25] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:59:56] *** Quits: chozorho (~chozorho@2601:146:300:c30::eb69) (Ping timeout: 245 seconds)
[07:00:49] *** Joins: chozorho (~chozorho@2601:146:300:c30::6737)
[07:00:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:02:03] *** Quits: adeliktas (~adeliktas@i59F52D68.versanet.de) (Read error: Connection reset by peer)
[07:02:57] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::3385)
[07:04:12] *** Joins: adeliktas (~adeliktas@i59F4D64A.versanet.de)
[07:04:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:04:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:07:42] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::3385) (Quit: lainon)
[07:15:51] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:16:31] *** Joins: KombuchaKip (~kip@192.252.230.5)
[07:23:40] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:68a2:f73f:5ebb:73b1) (Quit: Quit)
[07:29:38] *** Quits: emerent (~quassel@p200300cd57044358ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:30:17] *** Joins: emerent (~quassel@p200300cd57044321ba27ebfffed28a59.dip0.t-ipconnect.de)
[07:33:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:01:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:04:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[08:12:17] *** Quits: foul_owl (~kerry@174-21-143-101.tukw.qwest.net) (Ping timeout: 250 seconds)
[08:17:08] *** Quits: ville (~ville@user/ville) (Quit: kernel)
[08:18:31] *** Joins: ville (~ville@user/ville)
[08:21:06] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:26:25] *** Joins: foul_owl (~kerry@94.140.8.108)
[08:27:14] *** Quits: jsbach_ (~jsbach@2a01:c23:6421:f700:6d73:7db3:c97a:9054) (Ping timeout: 260 seconds)
[08:30:02] *** Quits: emerent (~quassel@p200300cd57044321ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:31:48] *** Joins: emerent (~quassel@p200300cd57044321ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:56] *** Quits: Kerr (~quassel@2601:602:ce01:1f0:f230:d70f:f8db:83c0) (Remote host closed the connection)
[08:32:02] *** Quits: foul_owl (~kerry@94.140.8.108) (Ping timeout: 256 seconds)
[08:33:46] *** Quits: hexingb (~hexingb@2409:8902:7ba1:3159:e935:5bb1:c3ff:9b7a) (Ping timeout: 260 seconds)
[08:39:23] *** Joins: jsbach_ (~jsbach@2a01:c22:a8a7:a100:4d10:414a:ca48:6842)
[08:40:44] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:46:26] *** Joins: foul_owl (~kerry@94.140.8.107)
[09:01:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:02:37] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:05:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:08:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[09:12:05] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[09:13:28] *** Joins: jkl (~jkl@user/jkl)
[09:17:38] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 260 seconds)
[09:25:40] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:27:07] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[09:32:06] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[09:41:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:54] *** ChanServ sets mode: +v npaperbot
[09:41:54] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:acb3:81db:281b:e516) (Ping timeout: 260 seconds)
[09:59:18] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[10:02:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:05:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:08:35] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[10:31:12] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[10:32:23] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:52:22] *** Quits: jsbach_ (~jsbach@2a01:c22:a8a7:a100:4d10:414a:ca48:6842) (Remote host closed the connection)
[10:57:15] *** Joins: jsbach (~jsbach@2a01:c22:a8a7:a100:c869:d0f9:35d2:8283)
[10:58:47] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:59:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:02:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:06:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:16:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4bc:bc38:6fcd:3dae)
[11:23:44] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:28:47] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[11:29:06] *** Joins: teepee (~teepee@openscad/teepee)
[11:34:47] *** Joins: Uswald (~leandre@37.35.6.200)
[11:34:47] *** Quits: Uswald (~leandre@37.35.6.200) (Changing host)
[11:34:47] *** Joins: Uswald (~leandre@user/Uswald)
[11:34:59] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:35:47] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:35:52] *** Quits: Donno (~donno@58.84.206.182) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:38:00] *** Joins: Donno (~donno@58.84.206.182)
[11:42:16] *** Joins: ivii (~ivan@user/ivii)
[11:49:28] *** Joins: MatSharrow (~matthew@117.20.9.51.dyn.plus.net)
[11:51:16] *** Quits: Fairy (~Fairy@ti0004a400-0210.bb.online.no) (Ping timeout: 268 seconds)
[12:00:02] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:03:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:04:13] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[12:04:51] *** Joins: Terminus- (~null@user/terminus)
[12:05:10] *** Joins: VShell (~shell@user/shell)
[12:05:28] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:05:44] *** Quits: MatSharrow (~matthew@117.20.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[12:06:02] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[12:06:04] *** Quits: Rayke (rayke@user/rayke) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: comrad (~quassel@holarse/comrad) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: oj_ (oj@user/oj) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: Nixx_ (~quassel@bulbasaur.sjorsgielen.nl) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: Shell (~shell@user/shell) (Ping timeout: 268 seconds)
[12:06:05] *** Joins: oj (oj@user/oj)
[12:06:08] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[12:06:36] *** VShell is now known as Shell
[12:06:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:06:37] *** Joins: comrad (~quassel@holarse/comrad)
[12:07:45] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[12:07:46] *** Joins: Rayke (rayke@user/rayke)
[12:09:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[12:09:28] *** Joins: Fairy (~Fairy@2a02:2121:620:c8cb:bdca:3834:e3a2:8cd8)
[12:09:59] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[12:11:03] *** Joins: ville (~ville@user/ville)
[12:14:19] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[12:17:17] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[12:20:31] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[12:22:05] *** Joins: andreasbuhr (~quassel@p549db9a5.dip0.t-ipconnect.de)
[12:22:12] *** Quits: andreasbuhr (~quassel@p549db9a5.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:23:05] *** Joins: andreasbuhr (~quassel@p549db9a5.dip0.t-ipconnect.de)
[12:26:09] *** Joins: AmR (~AmREiSa@156.199.44.128)
[12:32:30] *** Joins: robod34 (~Username@79.113.195.239)
[12:40:27] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:43:25] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 256 seconds)
[12:52:30] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:3992:cb3b:a718:c754)
[12:56:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:56:46] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[13:03:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:07:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[13:07:39] *** Joins: paul424 (~tom@ip-5-172-232-75.multi.internet.cyfrowypolsat.pl)
[13:07:56] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[13:08:10] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 260 seconds)
[13:09:08] *** Joins: celphi (sid97751@user/celphi)
[13:09:31] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[13:09:54] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[13:11:36] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 245 seconds)
[13:12:02] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[13:13:32] *** Joins: buhman (sid411355@user/buhman)
[13:14:26] *** Joins: limubs (~limubs@cgn-89-0-49-98.nc.de)
[13:16:11] *** Joins: plastico (~plastico@neomutt/plastico)
[13:20:22] *** Joins: DSpider (~DSpider@82.79.237.126)
[13:26:09] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:34:42] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:11] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[13:36:19] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[13:36:54] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:39:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[13:40:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[13:41:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:56] *** ChanServ sets mode: +v npaperbot
[14:02:00] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:04:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:05:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:05:29] <Haohmaru> !fact
[14:05:30] <nolyc> Haohmaru: A directory entry that associates a filename with a file.
[14:05:48] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[14:07:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:15:13] *** Quits: AmR (~AmREiSa@156.199.44.128) (Ping timeout: 256 seconds)
[14:19:10] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[14:22:07] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[14:28:18] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[14:28:34] *** Joins: AmR (~AmREiSa@156.199.24.233)
[14:28:42] <PJBoy> o_O
[14:29:10] <PJBoy> clang-tidy changed my `"abcde" + i` to `&"abcde"[ i]`
[14:29:23] <PJBoy> `&"abcde" [ i]` actually
[14:29:29] <PJBoy> what horrible spacing
[14:32:42] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:40] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[14:35:11] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[14:35:41] *** Joins: AmR (~AmREiSa@156.199.24.233)
[14:37:53] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 256 seconds)
[14:38:04] *** kenanmarasli_ is now known as kenanmarasli
[14:38:38] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 250 seconds)
[14:39:31] <PJBoy> clang-tidy seems to be ignoring my .clang-tidy
[14:39:41] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[14:39:54] <PJBoy> I don't get how I keep having so many trivial issues with clang-tidy
[14:40:12] *** Joins: AmR (~AmREiSa@156.199.24.233)
[14:40:44] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3444:f67f:24ed:5c4c:c6be) (Remote host closed the connection)
[14:40:59] <PJBoy> clang-tidy the tool gets it right
[14:41:05] <PJBoy> just not in VS code via clangd
[14:42:56] <Haohmaru> why did i had the impression that sizeof() sometimes doesn't return the actual size of the thing?
[14:43:07] <Haohmaru> ..but like, number of elements
[14:43:51] <PJBoy> too much beer
[14:44:47] <Haohmaru> i don't drink alcohol
[14:44:59] <Haohmaru> so it must be the coffee levels too low again
[14:45:32] <PJBoy> a bulgarian that doesn't drink?
[14:45:39] <PJBoy> that's gotta be a hard life
[14:45:42] *** Joins: cursey (~cursey@user/cursey)
[14:47:38] <PJBoy> according to my partner anyways
[14:49:57] *** Joins: bobb_ (~bobb_@dslb-092-075-159-253.092.075.pools.vodafone-ip.de)
[14:51:08] <Haohmaru> don't listen to alcoholics, they are biased
[14:52:34] <ville> something, possinly clangd/clang-tidy, keeps complaing about xs[0] in code that it changes signedness from int to unsigned
[14:53:03] <PJBoy> the rule that rewrites it complains about pointer arithmetic
[14:53:12] <ville> of course no such warning when compiling. it's just over-eager linter thingie i've not bothered to find out how to disable
[14:53:17] <PJBoy> that bit I'm fine with, it's the whitespace that I find bad
[14:53:36] <ville> that's absolutely idiotic rewrite it has suggested
[14:53:57] <PJBoy> I mean the whitespace is suggests
[14:54:12] <PJBoy> asymmetric whitespace within the square brackets
[14:54:15] <PJBoy> terrible
[14:54:26] <ville> the whitespace is irrelevant. fact it suggests it is already so wrong nothing else needs to be considered
[14:54:41] <ville> person resposible for the rule needs to be shot
[14:54:44] <PJBoy> ahaha
[14:54:56] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[14:55:07] *** Joins: seninha (~seninha@user/seninha)
[14:57:05] <ville> everything from clang-tidy is either borderline garbage or straight up garbage
[14:57:31] <PJBoy> to be fair, if I swapped out an array for a std::array
[14:57:39] <PJBoy> then operator[] could potentially do bounds checking in debug mode
[14:57:56] <PJBoy> whereas the + on a raw pointer can't be helped
[14:57:57] <ville> the only one, if it's result from clang-tidy, is missing "inline" keyword for function definition in a header
[14:58:17] <PJBoy> nah clang-tidy's good
[14:58:35] <PJBoy> it found a real bug in our work code involving an uninitialised variable
[14:58:52] <PJBoy> and explained how it came to that conclusion
[14:59:07] <PJBoy> much like coverity if you've ever used that
[15:02:28] <PJBoy> however, this issue where VS code is ignoring my clang-tidy config
[15:02:31] <PJBoy> this sucks
[15:03:39] <Haohmaru> clang-suxy
[15:04:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:05:04] *** Quits: paul424 (~tom@ip-5-172-232-75.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:06:59] <PJBoy> or no it does read the config file
[15:07:22] <PJBoy> it just ignores my disabling of a load of checks
[15:08:29] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:09:48] <PJBoy> hm, maybe I just didn't spam "reload windows" enough times
[15:10:06] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[15:10:33] *** Joins: AmR (~AmREiSa@156.199.24.233)
[15:14:33] *** Joins: markong (~kvirc@213.146.188.203)
[15:15:07] <PJBoy> ok...
[15:15:31] <PJBoy> so the check disable that it's ignoring is -hicpp-vararg
[15:15:45] <PJBoy> but if I write -hicpp-vararg *twice* then it works
[15:15:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:16:09] <Haohmaru> what happens with thrice?
[15:16:42] <PJBoy> works with thrice
[15:16:50] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[15:17:31] <PJBoy> I get the feeling it's just ignoring the last check in the list of checks
[15:19:59] <PJBoy> yeah that seems to be the case
[15:20:20] <Haohmaru> off-by-one error ;P~
[15:21:46] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[15:22:35] *** Joins: AmR (~AmREiSa@156.199.24.233)
[15:23:21] <very_sneaky> PJBoy: time to swtich to vim? I've had no problems with clang-tidy ;)
[15:23:41] <PJBoy> D:
[15:24:00] <PJBoy> I remember when I used to enjoy coding -_-
[15:24:15] <very_sneaky> was that before contemplating using vim?
[15:24:31] <PJBoy> that was before I got exposed to the tooling ecosystem
[15:24:45] <very_sneaky> lol, yeah it's a lot
[15:24:55] <very_sneaky> i feel like i'm grappling with the tooling now though
[15:25:03] <PJBoy> life's not so bad when you have a small codebase, a text editor, and a compiler
[15:25:12] <Haohmaru> i know what'll make you enjoy coding again
[15:25:28] <Haohmaru> write a toolchain from scratch
[15:25:29] <very_sneaky> vim is still good with large code bases
[15:25:53] <PJBoy> vim makes my fingers want to hang themselves
[15:25:59] <very_sneaky> though, i've realised i've been the hero long enough in this project to become the villain
[15:26:25] <very_sneaky> i've somehow found myself in a position with the stereotypical monolithic unmaintainable codebase, everyones pet hate
[15:26:35] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[15:26:53] <very_sneaky> really? i find it easy on the fingers
[15:26:56] <PJBoy> because build systems are hard
[15:27:05] <PJBoy> it's hard to modularise big code
[15:27:08] *** Joins: AmR (~AmREiSa@156.199.24.233)
[15:27:31] <PJBoy> also design is hard
[15:27:37] <very_sneaky> there's a lot of room for optimisation. it's the traditional story - short deadlines, not enough time to refactor code into a coherent design
[15:28:14] <PJBoy> deadlines are an antipattern
[15:31:41] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:34:26] <very_sneaky> agree
[15:34:30] <very_sneaky> design is hard though
[15:34:42] <very_sneaky> i'm trying to read some books to give me a better foundation
[15:35:09] <PJBoy> yeah I've been struggling with design in my personal project
[15:37:12] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b)
[15:38:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:43:02] <very_sneaky> how are you resolving it?
[15:47:18] <ville> beer
[15:50:13] <PJBoy> procrastination
[15:50:57] <PJBoy> although my procrastination method isn't terribly bad
[15:51:21] <PJBoy> I'll spend a day working out my thoughts and writing them as a comment
[15:51:47] <PJBoy> and then my next day I'll implement those comments without too much thought spared on design
[15:52:44] <very_sneaky> ah the brute force method
[15:52:55] <very_sneaky> classic
[15:55:43] <PJBoy> lately it's been taking me a while to get to grips with my own architecture again
[15:55:52] <very_sneaky> yep. i feel that
[15:55:53] <PJBoy> so I might have to start writing some external documentation
[15:56:04] <very_sneaky> that's a good idea
[15:56:13] <very_sneaky> i haven't even gotten to any external interfaces yet
[15:56:38] <very_sneaky> my procrastination was spending time on tooling
[15:56:48] <very_sneaky> so i have my docs building nicely with sphinx now
[16:00:24] <PJBoy> I haven't come to like any of the in-source documentation systems
[16:00:42] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:00:44] <very_sneaky> what do you use?
[16:01:00] <PJBoy> I just manually write external docs
[16:01:14] <PJBoy> usually in plain text files for my own stuff
[16:01:19] <very_sneaky> ah, gotcha
[16:01:26] <PJBoy> maybe markdown for github projects
[16:01:47] <PJBoy> at work I've written a few diagrams
[16:01:47] <very_sneaky> i mean. I use doxygen to generate the API reference stuff, but yeah that's mostly for in source documentation. It fits nicely into the sphinx autogen stuff
[16:02:27] <PJBoy> yeah I don't like doxygen docs too much
[16:02:34] <very_sneaky> but I use sphinx for manual, external documentation writing mostly. reStructuredText is a really nice format for markup, and i really like that sphinx allows you to build it into multiple different formats - html, pdf and manpages
[16:02:38] <PJBoy> neither reading them nor writing their comments
[16:03:17] <very_sneaky> and that you can change the html themes pretty easily to suit what you want, indepdendently of the content
[16:03:32] <very_sneaky> makes it easy to navigate, search, organise, read
[16:03:51] <PJBoy> autolinking and searching is good actually
[16:03:53] <PJBoy> hm
[16:04:04] <PJBoy> well maybe one day then
[16:04:27] <very_sneaky> i should write a blog post on this
[16:04:50] <very_sneaky> there aren't any examples of how to do it online - the closest is integrating sphinx and doxygen with cmake
[16:05:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:06:14] <very_sneaky> PJBoy: plus, i learnt the other day that you can embed raw latex into the rst if you want, which means that you can embed figures with tikz ;)
[16:07:14] <PJBoy> I kinda wanna write up my instructions for my VS code setup
[16:07:21] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[16:07:24] <very_sneaky> that's a good idea
[16:07:27] <PJBoy> with ssh and cmake and clang-tidy and whatnot
[16:07:44] <PJBoy> but I need to sort out my server
[16:07:51] <PJBoy> which means web dev
[16:07:54] <very_sneaky> lol
[16:07:56] <PJBoy> which means infinite suffering
[16:08:00] <very_sneaky> what's wrong with your server?
[16:08:10] <PJBoy> it's new
[16:08:26] <very_sneaky> yeah gotcha. what will it host?
[16:08:27] <PJBoy> so I need to install nginx, configure it, debug it, reconfigure it
[16:08:29] *** Joins: pulse (~pulse@user/pulse)
[16:08:36] <PJBoy> uninstall it, reinstall it
[16:08:52] <PJBoy> need to point my domain name to it
[16:09:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[16:09:06] <very_sneaky> oh wait, internet facing? you're _actually_ hosting your website on it?
[16:09:08] <PJBoy> sort out HTTPS because reasons
[16:09:24] <PJBoy> which means dealing with letsencrypt again
[16:09:34] <very_sneaky> letsencrypt is pretty easy lol
[16:09:42] <PJBoy> it requires a lot of reading
[16:09:46] <very_sneaky> you can work it out :P
[16:09:47] <very_sneaky> does it?
[16:09:48] <PJBoy> and reading is almost as tiring as debugging
[16:10:04] <PJBoy> yeah it took me a full day to set up letsencrypt the first time
[16:10:19] <very_sneaky> what os are you putting on it
[16:10:33] <PJBoy> ubuntu 20.04, the classic
[16:10:49] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 256 seconds)
[16:10:54] <very_sneaky> PJBoy: https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal
[16:10:58] *** kenanmarasli_ is now known as kenanmarasli
[16:11:36] <very_sneaky> that's the crux of it - your cert "get" command might be a bit more involved if you want to do dns challenge or wildcard, but it's not too bad
[16:12:23] <PJBoy> we shall see
[16:12:32] <PJBoy> I'm not gonna do that for another half a year or so probably
[16:13:04] <very_sneaky> yeah fair, it's a bit of a pain in the ass
[16:13:20] <very_sneaky> i'm running freenas on mine, thinking of switching to proxmox for better docker compatibility
[16:14:11] <very_sneaky> but i can't bring myself to do it - that will be a few days of fiddling around
[16:21:44] *** Joins: proller (~p@2a02:6b8:0:40c:6dd8:f7e8:3ff6:e4db)
[16:27:18] *** Joins: LangerJan (~jan@user/langerjan)
[16:29:23] *** Quits: proller (~p@2a02:6b8:0:40c:6dd8:f7e8:3ff6:e4db) (Ping timeout: 268 seconds)
[16:30:56] *** Joins: proller (~p@2a02:6b8:0:40c:f97f:f38:fba3:4a05)
[16:31:49] <pulse> i wish there was a collection of boilerplate templates for each large library or framework
[16:32:29] <pulse> then you could just plop the files somewhere and start coding
[16:32:34] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:34:39] *** Joins: Leone (~Leo@216.154.23.229)
[16:37:07] <PJBoy> I would want that if I didn't hate the boilerplate code
[16:38:45] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:40:03] <AmR> I need some help with link with mingw-w64 I use that command for linker " -Bstatic -lpthread -lzlib " is that right ?
[16:40:10] <AmR> I use msys2
[16:40:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:40:32] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[16:42:15] <AmR> I use cmake like that " target_link_libraries( ${PROJECT_NAME} PRIVATE -static-libgcc -static-libstdc++ -Bstatic -lpthread -lzlib ) " ?
[16:48:15] <PJBoy> man that's a hard life right there
[16:48:31] <PJBoy> needing helps with the combination of mingw, cmake, and static linking
[16:50:19] <AmR> I need some help with link with mingw-w64 I use that command for linker " -Bstatic -lpthread -lzlib " is that right ? I use cmake like that " target_link_libraries( ${PROJECT_NAME} PRIVATE -static-libgcc -static-libstdc++ -Bstatic -lpthread -lzlib ) " ? And I try that too " set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++" ) " And That set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Bstatic-libgcc -static-libstdc++" ) but that all not
[16:50:20] <AmR> working
[16:50:41] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[16:51:07] *** Joins: AmR (~AmREiSa@156.199.24.233)
[16:55:26] <ville> AmR: what is the minimal, but complete, cmakelists.txt? what are the commands you execute? what are the errors you see?
[16:55:52] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[16:57:45] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b) (Ping timeout: 268 seconds)
[16:58:03] *** Joins: gentooclimax (~gentoocli@2a02-8440-6441-09f8-f134-3215-f19d-90b8.rev.sfr.net)
[17:00:55] <PJBoy> 100 comment thread about adding a "clear" button to the problems tab of VS code :/ https://github.com/microsoft/vscode/issues/66982
[17:02:03] <ville> probably requires a phd to add it
[17:02:06] <PJBoy> three years old now
[17:02:10] <PJBoy> ikr
[17:03:05] <PJBoy> dev opinion seems to be that all extensions should be responsible for cleaning up their own shit
[17:03:22] <PJBoy> and user responses are "but they don't"
[17:05:14] <PJBoy> I guess they do have 5k+ other issues to tend to
[17:05:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:08:30] *** Quits: chozorho (~chozorho@2601:146:300:c30::6737) (Ping timeout: 260 seconds)
[17:08:53] *** Joins: chozorho (~chozorho@2601:146:300:c30::6737)
[17:09:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:09:47] <amosbird> Hello! Is it possible to check if the filesystem is readable via std::filesystem api? NOTE the filesystem might be readonly so I cannot create a test file for reading
[17:13:16] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 245 seconds)
[17:16:35] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Quit: leaving)
[17:18:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::6737) (Ping timeout: 240 seconds)
[17:18:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:19:11] <ville> and yes extensions should clean up after them selves properly
[17:19:25] *** Joins: seninha (~seninha@user/seninha)
[17:20:09] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[17:20:59] <ville> what would it mean for a filesystem to be readable?
[17:23:14] <ville> you only get access to directories, files and links. you don't get access to a "filesystem" object. if some directory maps to your concept of filesystem then you can ask for its permissions or status
[17:24:14] <ville> you don't get access to something that represents say ext4 or brtfs
[17:25:39] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:bf9f:4c9f:d685:ef4c)
[17:26:44] *** Quits: gentooclimax (~gentoocli@2a02-8440-6441-09f8-f134-3215-f19d-90b8.rev.sfr.net) (Ping timeout: 268 seconds)
[17:27:14] *** Joins: gentooclimax (~gentoocli@2a02-8440-6341-2749-cc31-9167-8944-7430.rev.sfr.net)
[17:27:18] *** Joins: ravan (~ravan@42.201.198.151)
[17:27:18] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[17:27:18] *** Joins: ravan (~ravan@user/ravan)
[17:28:16] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[17:30:27] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[17:32:17] *** Quits: gentooclimax (~gentoocli@2a02-8440-6341-2749-cc31-9167-8944-7430.rev.sfr.net) (Ping timeout: 268 seconds)
[17:35:06] <Haohmaru> !fact
[17:35:07] <nolyc> Haohmaru: In Table [tab:time.clock] C1 and C2 denote clock types.
[17:35:35] *** Joins: gentooclimax (~gentoocli@89.207.171.57)
[17:40:02] <amosbird> ville: It's not about permission bits. I'm trying to write a disk health checker which constantly read some bytes from a file of given fs. If it succeed, there is a chance that the file system is ok to serve other reading requests.
[17:41:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:56] *** ChanServ sets mode: +v npaperbot
[17:42:18] *** Joins: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de)
[17:45:27] *** Quits: gentooclimax (~gentoocli@89.207.171.57) (Ping timeout: 256 seconds)
[17:45:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b)
[17:49:01] <ville> well that sounds completely pointless. unless you're the operating system on very specific hardware or you're on specifc operating system doing very operating system things such checks would indicate nothing. you're still going to have to check whether your io operations fail or succede
[17:50:44] <rpav> that is definitely not the way to do it
[17:50:51] <rpav> i mean, what amosbird said
[17:51:39] <rpav> unless this is like DOS, your OS almost certainly caches disk reads, so reading bytes from a file is likely to grab what's already in RAM repeatedly, never accessing the disk
[17:51:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[17:52:43] <ville> and depending on the kind of io you're doing there might not even be a guarantee even if it did retun success that you couldn't then lose the data afterwards anyway
[17:52:49] <rpav> you need to randomly access bytes on the disk with a non-caching low-level API so you can sample the whole drive, but really that's mostly going to kill I/O performance in any case .. probably more useful ot just monitor SMART :p
[17:52:49] *** Quits: bobb_ (~bobb_@dslb-092-075-159-253.092.075.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[17:53:33] <rpav> this is assuming non-SSD, as SSD failure tends to be more obvious from waht i hear
[17:55:18] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Ping timeout: 256 seconds)
[17:59:35] <Haohmaru> the right way is to write a win32 rootkit, of course
[17:59:47] <amosbird> rpav: I see. I'll try to find a SMART client library and use that. Thanks
[18:00:12] <Haohmaru> amosbird just add a messagebox telling the user to enable SMART from the bios
[18:00:54] <amosbird> Haohmaru: ok
[18:00:57] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:01:16] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[18:04:25] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[18:04:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:05:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[18:06:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:10:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[18:12:02] <rpav> `const` with no type ought to mean `const auto`
[18:13:04] <PJBoy> no
[18:13:06] <Haohmaru> is that a wish?
[18:13:34] <Haohmaru> { const x = false; }
[18:13:34] <geordi> error: 'x' does not name a type
[18:13:41] <PJBoy> that would work in JS
[18:13:49] <Haohmaru> f*ck JS
[18:13:56] <Haohmaru> who even writes JS
[18:14:03] <rpav> more people than write C++, but that's irrelevant
[18:14:05] * Haohmaru hides
[18:14:11] <pulse> i like JS
[18:14:17] <pulse> it's very nifty
[18:14:34] <PJBoy> no you don't >:(
[18:14:36] <rpav> so do i, but the point is `const auto` is annoyingly long when `const` alone would suffice
[18:14:58] <Haohmaru> #define konst const auto
[18:15:00] <rpav> and `const auto` is very often what you want
[18:15:10] <pulse> bring back auto_ptr
[18:15:21] <rpav> Haohmaru: right, i mean, you can use various define hacks but it's dumb, when `const` without auto/type is an error now, and it _could_ mean that instead
[18:15:29] <rpav> pulse: it's called unique_ptr
[18:16:04] <pulse> except not as sucky
[18:16:05] <Haohmaru> what's the opposite of "unique" ?
[18:16:14] <pulse> common
[18:16:23] <rpav> Haohmaru: just ptr
[18:16:24] <Haohmaru> common_ptr ;P~
[18:16:53] <pulse> the nice thing about C++ is you can implement your own smart pointers
[18:17:07] <pulse> i call mine hotsauce_ptr
[18:17:51] <Haohmaru> perhaps the silliest name i have is "fumber_t"
[18:18:10] <PJBoy> I had a variable called "slaverage" for a while
[18:18:43] <Haohmaru> signal local average?
[18:18:52] <PJBoy> sliding average
[18:18:58] <Haohmaru> oh, of course
[18:19:06] <PJBoy> but then it looks like "slave rage"
[18:19:19] <PJBoy> so that's a little sketchy
[18:19:29] <Haohmaru> no, slaves *should* rage
[18:19:37] <PJBoy> true
[18:20:08] <pulse> actually they shouldn't
[18:20:39] <Haohmaru> sure, if that's your fetish
[18:20:45] <PJBoy> otherwise my names are pretty boring
[18:20:53] <PJBoy> which I consider good
[18:21:22] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[18:21:45] <Haohmaru> PJBoy also, why don't you call it moving average instead, so moaverage
[18:22:28] <PJBoy> moave is a colour, right?
[18:22:29] <Haohmaru> i'd personally call it movavg
[18:22:36] <pulse> just use long names
[18:22:38] <PJBoy> yeah maybe
[18:22:51] <PJBoy> this was a long time ago now
[18:23:21] <PJBoy> also it was python
[18:23:37] <Haohmaru> moving_average_aka_sliding_average_filter_optimized_implementation
[18:23:38] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:24:05] <Haohmaru> snek? slitheringaverage
[18:24:19] <PJBoy> haha
[18:24:35] <Haohmaru> the snek naturally cannot take sharp turns anyway
[18:25:29] <Haohmaru> but the snek kinda overshoots the desired pad, so it's more like a resonating lowpass filter than a moving avg filter
[18:25:36] <PJBoy> this was for a timing attack against RSA decryption
[18:25:41] <PJBoy> rather than for signal processing
[18:26:01] <Haohmaru> everything is signal processing
[18:26:05] <Haohmaru> je suis DSP
[18:26:42] <Haohmaru> * desired path
[18:27:30] *** Quits: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:27:41] *** Joins: TheSchaf3 (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de)
[18:27:41] *** TheSchaf3 is now known as TheSchaf
[18:27:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:28:27] <ashafq> Haohmaru: Are you into DSP?
[18:28:56] <Haohmaru> you know me
[18:29:16] <ashafq> Nice to meet another DSP person in C++ 😊
[18:29:33] <Haohmaru> nah, the same person with two nicknames
[18:29:54] <ashafq> who??
[18:30:21] <Haohmaru> if i say it i'll wake up the cat @home
[18:30:43] <ashafq> otnna?
[18:30:50] <PJBoy> holy shit what is this code
[18:30:52] <Haohmaru> sey
[18:30:56] <PJBoy> https://github.com/snes9xgit/snes9x/blob/master/screenshot.cpp#L56
[18:31:01] <Haohmaru> minus the typo
[18:31:08] <PJBoy> `if (setjmp(png_jmpbuf(png_ptr)))`
[18:31:34] <PJBoy> is that how libpng works??
[18:31:34] <Haohmaru> uh, wasn't setjmp some very low-level crazy sh*t you don't wanna fiddle with?
[18:31:41] <PJBoy> yeah indeed
[18:31:42] <ashafq> PJBoy: that's 'C+'.
[18:31:46] <PJBoy> ahahaha
[18:32:00] <PJBoy> I've never seen this kind of code before
[18:32:16] <Haohmaru> well, DSP can be funky but dafuq are they doing there?
[18:32:43] <ashafq> I have seen this type of code in C, but the .cpp file extension threw me off.
[18:33:45] <PJBoy> it's a very C-esque codebase tbf
[18:33:46] <ashafq> PJBoy: think of like goto that goes outside the function
[18:33:48] <Haohmaru> i *know* image and multimedia libs (encoders, decoders, converters) tend to have tons of exploits and sh*t, i've never looked into why but i've always wondered why dafuq is that
[18:33:54] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:33:57] *** Quits: limubs (~limubs@cgn-89-0-49-98.nc.de) (Ping timeout: 268 seconds)
[18:34:03] <PJBoy> yeah I know how setjmp works
[18:34:10] <PJBoy> I'm just really surprised
[18:34:39] <Haohmaru> i can't tell wtf that does
[18:38:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:bcaa:50e0:8519:fbfe)
[18:38:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:bcaa:50e0:8519:fbfe) (Changing host)
[18:38:18] *** Joins: skapata (~Skapata@user/skapata)
[18:38:22] <PJBoy> it's basically equivalent to `if (png_dowork()) { /* error handling */ }`
[18:38:42] <PJBoy> except the code being called returns via longjmp instead of return
[18:38:58] <ville> because everything they do is based on "unverified" input and as such it's easy to forget to check "everything" at "every" step
[18:39:17] <rpav> sounds like trying to be clever rather than writing better code
[18:39:30] <PJBoy> or is it more like a while than an if
[18:39:38] <PJBoy> I've never actually *used* setjmp before
[18:40:34] <PJBoy> yeah I think it works like a while
[18:40:57] <Haohmaru> i've written an uncompressed .wav reader/writer much long ago, and while it wasn't spectacular, it did not involve such voodoo magic
[18:40:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:41:04] <PJBoy> or nah that wouldn't make any sense
[18:41:15] <pulse> C programmers are wise and their beards contain magic
[18:41:26] <ville> and c is also fun when you're writing bit-twiddly code, which often may occur in decoders and such, you get an unwanted integer promotion and you only hit the resulting problems with very specific inputs and...
[18:41:27] <pulse> they are allowed to use arcane techniques
[18:41:31] <Haohmaru> if they were wise they'd write C++
[18:41:37] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:41:43] * Haohmaru hides
[18:41:54] <pulse> C++ doesn't even have a stable ABI
[18:42:01] <ville> c++ has the same promotion problems for example
[18:42:11] <PJBoy> C doesn't have an ABI
[18:42:16] <pulse> :(
[18:42:28] <rpav> PJBoy: it definitely does
[18:42:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:42:43] <rpav> it is quite often defined in the architecture documentation however
[18:42:52] <PJBoy> like C's ABI is different on ARM than x86
[18:42:59] <PJBoy> and different on windows than linux
[18:42:59] <rpav> which is why if you want to talk between languages, you talk CABI
[18:43:07] <rpav> well sure
[18:43:26] <PJBoy> so the ABI is non-C
[18:43:27] <rpav> that doesn't make it less of an ABI; C++'s abi differs between _compilers_
[18:43:43] <pulse> at least with C you compile a library once and then use it, with C++ it has to match the underwear color of the programmer who first compiled it
[18:44:02] <PJBoy> eh lifes not that bad
[18:44:10] <PJBoy> compilers have been ABI stable for like 10 years
[18:44:23] <PJBoy> and they use Itanium on linux right?
[18:44:24] <LordKalma> AND THEY SHOULDN'T HAVE
[18:44:26] <PJBoy> on x86
[18:44:33] <PJBoy> so surely linux compilers are all compatible
[18:44:49] <PJBoy> C presumably uses Itanium
[18:45:16] <LordKalma> if clang's <string> is different from gcc's <string> they can be ABI incompatible whilst being both itanium
[18:45:18] <LordKalma> on c++ anyway
[18:46:01] <PJBoy> is that called ABI incompatibility though
[18:46:26] <PJBoy> hm
[18:46:59] <PJBoy> like in C those two string structs would be incompatible too
[18:47:01] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:47:17] <PJBoy> if we were to imagine a C parallel for std::string
[18:47:57] <LordKalma> when you hear about ABI breaks in compilers 99% of tiem you're talking about stdlib
[18:48:55] <Haohmaru> but then stdlib gets better
[18:51:07] <Alipha> Regarding fun variable names, I once worked at a place that had a database bridge table linking networks, insurance providers, and services, named network_insurance_provider_service, which naturally got abbreviated as "nips"
[18:55:25] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[18:56:44] <PJBoy> nice
[19:06:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:07:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b) (Ping timeout: 268 seconds)
[19:09:14] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[19:10:27] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:11:48] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[19:15:11] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[19:15:51] <PJBoy> ok I get that setjmp code now that I'm out my meeting
[19:16:02] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[19:16:16] <PJBoy> presumably libpng longjmp's on error, and the code in the if statement is generic error handling
[19:16:37] *** Joins: myusername (~myusernam@user/myusername)
[19:20:05] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[19:21:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:25:47] <urdh> exceptions for C, pretty much
[19:26:53] <PJBoy> very limited, somewhat precarious exceptions
[19:29:09] <PJBoy> I almost like it
[19:29:17] <PJBoy> saves having to check return values
[19:29:33] *** Joins: KombuchaKip (~kip@192.252.230.5)
[19:29:38] <PJBoy> but ultimately I don't think even I'd opt for that kind of code
[19:30:32] *** Quits: dld (~davidlowr@2601:197:600:1210:5064:96c:65f6:1d79) (Ping timeout: 240 seconds)
[19:31:37] *** Joins: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8)
[19:32:32] *** Quits: proller (~p@2a02:6b8:0:40c:f97f:f38:fba3:4a05) (Ping timeout: 268 seconds)
[19:42:24] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 268 seconds)
[19:54:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[19:58:29] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[20:01:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:02:20] <nightstrike> I'm trying to read specific bytes from an istream into a string.  The read member is nice in that I can do..    char data[5]; myistream.read(data, 5);  // And now data has the 5 bytes from the stream.  Is there a nice way to do the same, but use a std::string instead of a char[]?
[20:03:56] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 256 seconds)
[20:04:43] <PJBoy> `std::string s(5, {}); in.read(s.data(), s.size());`
[20:05:18] <nightstrike> or, perhaps I should ask a higher level question... when trying to read and parse a data file with defined layout characteristics, what's the preferred structure to use?  In my case, for example, the first 4 bytes are a non-null terminated string, the next couple bytes are a data length, then comes the purely binary data itself that I would further decode (for instance, maybe the label int he first 4 bytes tells me that the data
[20:05:18] <nightstrike> payload is a picture)
[20:05:54] <nightstrike> PJBoy: interesting, I didn't know that modifying the string throguh it's char * pointer was ok to do
[20:06:07] <PJBoy> yeah it's completely fine
[20:06:27] <rpav> as long as you _only_ modify the bytes it contains you're good ;)
[20:07:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:07:35] <nightstrike> I could in principle be using a vector<char> I guess, since there's no real use of the data as text
[20:11:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:13:34] <Alipha> nightstrike: two notes: read may not read the full amount specified. check how much was read with myistream.gcount(). secondly, if you read into the std::string, make sure you _resize_ the string to the appropriate size (or initialize it, as PJBoy showed) and NOT _reserve_ it. you're not allowed to write to reserved bytes.
[20:17:00] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:20:40] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:31:52] <nightstrike> Alipha: ok, ty for that
[20:32:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:33:57] <PJBoy> also see the resize_and_overwrite abomination if you wanted to avoid that zero fill operation in C++23
[20:36:54] <nightstrike> For some reason, the OCD in me actually enjoys reading in, parsing, and organizing files into objects :)  I know that sounds absurd.  It would be nice if libstdc++ had nicer facilities to handle that, though.
[20:40:12] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[20:51:50] *** Joins: KombuchaKip (~kip@192.252.230.5)
[21:00:53] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[21:02:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[21:03:39] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:05:08] <ashafq> In C++, are exceptions "expensive"?
[21:06:34] <Alipha> ashafq: only if they're thrown. in which case, it shouldn't matter if they're expensive because they should only occur "exceptionally". there's also a (significant?) space cost because the compiler has to generate all the stack unwinding code. i think it's the latter reason that exceptions are generally banned in embedded environments
[21:07:11] <ashafq> Alipha: Should I throw exception or should I write a `panic()` routine that just aborts the program?
[21:07:34] <ashafq> Because of my throws are really `abort()`
[21:07:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:08:05] <ashafq> Like there's not much you can do if your malloc fails, right?
[21:08:35] <kalven> depends on what you're doing
[21:09:43] <Alipha> ashafq: if you throw an exception and catch it in main (which then you can return from main), then all the destructors will get called. whereas, if you just abort the program, destructors won't get called, which may or may not be important
[21:10:36] <ashafq> Alipha: good point
[21:11:43] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:12:22] <Alipha> ashafq: considering that the OS will free memory, close file handles, etc. for you when the program ends, then it's likely that destructors being run is not important. unless you're doing something like writing out unsaved changes to a file in a destructor or something
[21:13:19] <ashafq> Alipha: Thanks for your input.
[21:19:29] <nightstrike> or if your objects control hardware and destructors reset it to a safe state
[21:20:42] <PJBoy> my dtors are pretty important
[21:20:51] <ville> wonder who came up with the whole "exceptional" spiel...
[21:21:30] <PJBoy> and in my GUI program, memory allocation failure is quite handlable
[21:21:44] <PJBoy> I just tell the user to download more RAM and cancel the operation
[21:21:45] <ville> "oh oh oh! these words look similar! this will make me sound so clever on stage tomorrow/ in my book"
[21:22:55] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b)
[21:24:54] <ville> and the even sadder part are the countless people who bought the schtick and just repeat it like mindless morons
[21:25:05] *** Joins: Good666 (~Good666@120.229.65.173)
[21:25:26] <kalven> is this where you call Alipha a moron?
[21:25:55] <Alipha> !grab kalven
[21:25:57] <nolyc> Alipha: The operation succeeded.
[21:26:00] <ville> sure
[21:26:07] <Alipha> :-(
[21:26:11] <kalven> boom, roasted
[21:26:46] <Alipha> and memorialized forever (or until nolyc's database is reset)
[21:26:57] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[21:26:58] *** Good666 is now known as Nick89
[21:27:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:28:30] <ville> when exceptions were first implemented their performance sucked, so the defence was: "but we'll only use them for the really rare bad ones", now these days you can actually get better performance out of an exception over shuffling error returns
[21:29:35] <ville> not always of course but you can
[21:30:18] <Alipha> ironically, rust moved away from exceptions
[21:34:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:34:53] <PJBoy> s/ron/diot/
[21:35:25] <PJBoy> they might get there one day though
[21:35:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:36:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:36:15] <ville> Alipha: not sure why that would be ironic? it's not like you see anyone benchmarking their error handling to get more performance
[21:36:55] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:37:14] <ville> Alipha: more likely the decission was made because it makes functions more self-documenting over the c++ model/non-checked exceptions
[21:37:44] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[21:37:45] *** Quits: Nick89 (~Good666@120.229.65.173) (Remote host closed the connection)
[21:37:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:37:50] <Alipha> perhaps "unexpected" is a better term than "exceptional". e.g., if i'm working with a std::map, most of the time, i probably want to use std::map::at because it's unexpected for a map key to not exist in most scenarios (and therefore, throw an exception). but in some cases, it is expected that a key may not exist and so you'd end up using std::map::find or something instead.
[21:39:18] <kalven> in that case you have multiple ways of doing the same thing, in other cases there's just a single function so the author makes the decision of whether it's "exceptional" or no
[21:39:50] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[21:41:45] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:41:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:56] *** ChanServ sets mode: +v npaperbot
[21:46:31] *** Joins: magla (~gelignite@55d4be51.access.ecotel.net)
[21:54:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8181:21e:c7e4:e748)
[21:54:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8181:21e:c7e4:e748) (Changing host)
[21:54:21] *** Joins: skapata (~Skapata@user/skapata)
[21:56:37] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:3992:cb3b:a718:c754) (Ping timeout: 240 seconds)
[22:00:15] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:03:22] *** Joins: sigma_ (~sigma@86.57.79.161)
[22:03:54] *** Quits: myusername (~myusernam@user/myusername) (Quit: Leaving)
[22:05:13] <sigma_> hi, i have bug: my program pass from else and i think becuase function loop. how can check where is problem? which loop or varible
[22:06:50] <sigma_> can you theach any technique
[22:07:29] <ashafq> It may be best to paste the code somewhere and share
[22:07:47] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[22:08:24] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:09:16] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[22:09:42] *** Joins: AmR (~AmREiSa@156.199.24.233)
[22:10:04] <ville> sigma_: read up on what a debugger is
[22:11:47] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:13:40] <sigma_> ville: gdb
[22:13:43] *** Quits: andreasbuhr (~quassel@p549db9a5.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:13:51] <sigma_> ville: in vscode
[22:14:40] <ville> sigma_: in that's your choice then now would be a good time to learn how to use those tools
[22:14:44] <ville> err if
[22:21:14] *** Joins: xkuru (~xkuru@user/xkuru)
[22:21:14] *** Quits: adder`` (~adder@user/adder) (Read error: Connection reset by peer)
[22:21:30] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[22:21:51] *** Joins: adder`` (~adder@user/adder)
[22:31:38] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[22:32:08] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[22:39:49] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:41:32] *** Quits: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de) ()
[22:41:32] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[22:49:36] *** Joins: proller (~p@2a02:6b8:0:40c:268:47cd:66a6:ce88)
[22:54:46] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:246f:2937:1ec0:9b42)
[22:56:31] <oj> So one thing about macros that's very useful is that I can write a separate file of just:
[22:56:37] <oj> MACRO(A)
[22:56:42] <oj> MACRO(B)
[22:56:45] <oj> MACRO(C)
[22:56:49] <oj> etc.
[22:56:59] <oj> and then just go
[22:57:15] <oj> #define MACRO(X) blablabla
[22:57:30] <oj> #include "things.def"
[22:57:34] <oj> #undef MACRO
[22:57:43] <oj> Can I somehow do the same with constexpr?
[22:57:44] <imMute> I think that's called the X-Macro Pattern or something like that
[22:57:54] <kalven> yep, https://en.wikipedia.org/wiki/X_Macro
[22:58:38] <Alipha> oj: templates may provide functionality to satisfy your needs, but that depends upon your needs
[22:59:47] <oj> that's what I was thinking
[23:00:10] <oj> so say I have an array of structs containing {key, value}
[23:00:45] <oj> can I generate a switch statement at compile time with constexpr?
[23:02:16] <oj> I guess I could just create a map, but the contents of the thing are constant and known at compile time.
[23:02:20] <oj> So that feels like a waste
[23:03:09] <kalven> that kind of code generation isn't in the language yet. there's a meaty proposal for reflection that can (probably) do that
[23:03:26] <oj> macros it is then
[23:08:29] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[23:08:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:08:56] *** Joins: AmR (~AmREiSa@156.199.24.233)
[23:10:28] <Alipha> oj: are the keys integers?
[23:10:38] <oj> enum values yes
[23:11:04] <oj> but the values are actually lists of different lengths, so that might be a problem for constexpr stuff
[23:11:12] <oj> I just realized that
[23:11:54] <Alipha> oj: sequential enum values?
[23:12:29] <oj> they're not in order in all cases
[23:12:38] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:12:41] <oj> there's two sets of enums, those aren't a problem
[23:12:55] <oj> but then there's a mapping from the one to lists of both
[23:13:22] <oj> the lists are: terminal symbols, nonterminal symbols, and production rules
[23:13:33] <oj> (it's a parser)
[23:14:04] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:20:58] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[23:21:27] *** Joins: AmR (~AmREiSa@156.199.24.233)
[23:25:27] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[23:25:56] *** Joins: AmR (~AmREiSa@156.199.24.233)
[23:27:27] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[23:27:58] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[23:29:59] *** Quits: AmR (~AmREiSa@156.199.24.233) (Remote host closed the connection)
[23:30:30] *** Joins: AmR (~AmREiSa@156.199.24.233)
[23:33:12] *** Quits: AmR (~AmREiSa@156.199.24.233) (Client Quit)
[23:33:36] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:34:02] <Alipha> sad. i can't get the compiler to produce the same asm as the switch statement (see the "C++ source #2" tab). oh well. the code is fairly optimized, even if it's not as concise as the switch statement: https://godbolt.org/z/aE16xfr1K
[23:42:32] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:42:44] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[23:42:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:43:36] *** Joins: MatSharrow (~matthew@117.20.9.51.dyn.plus.net)
[23:49:08] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[23:54:00] *** Quits: proller (~p@2a02:6b8:0:40c:268:47cd:66a6:ce88) (Ping timeout: 268 seconds)
[23:55:22] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[23:55:37] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
