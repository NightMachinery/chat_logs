[00:00:20] <FromDiscord> <kamy> sent a code paste, see https://play.nim-lang.org/#ix=3y1r
[00:01:58] <FromDiscord> <kamy> (edit) "https://play.nim-lang.org/#ix=3y1r" => "https://play.nim-lang.org/#ix=3y1t"
[00:01:59] <FromDiscord> <haxscramper> You can't add type
[00:02:12] <FromDiscord> <haxscramper> Type does not exist at runtime
[00:02:33] <FromDiscord> <haxscramper> You can only have sequence of type instances/objects
[00:02:40] <FromDiscord> <haxscramper> And this is almost always an XY problem
[00:02:44] <FromDiscord> <haxscramper> What are you trying to do?
[00:03:46] <FromDiscord> <kamy> I need a way of storing a bunch of wStaticBitmap because I need to hold them to change later. The amount is variable.
[00:04:36] <FromDiscord> <haxscramper> What is `wStaticBitmap`? Can you show the whole error, I don't think your description matches the code you provided. `sBM` is an object, you are not trying to add type
[00:04:52] <FromDiscord> <haxscramper> ah
[00:04:53] <FromDiscord> <haxscramper> ofc
[00:04:57] <FromDiscord> <haxscramper> `let imgSeq`
[00:04:59] <FromDiscord> <haxscramper> it is immutable
[00:05:09] <FromDiscord> <haxscramper> `var imgSeq`
[00:05:24] <FromDiscord> <kamy> omg what a stupid mistake
[00:05:58] <FromDiscord> <kamy> its working. thanks so much
[00:06:00] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[00:07:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:10:33] <FromDiscord> <chicken mcnuggets> anyone able to help me with my issue?
[00:11:23] <Zevv> it's a typeclass
[00:11:28] <Zevv> and I never understood these
[00:11:40] <Zevv> I'd expect your code to fail or to fit your const into any of the underlying uint types
[00:11:54] <Zevv> I'm probably just not smart enough to understand the docs
[00:23:33] *** Joins: max22- (~maxime@2a01cb08833598005a7785a489aeabb8.ipv6.abo.wanadoo.fr)
[00:32:30] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[00:42:59] <FromDiscord> <x0tic> These are real bots?
[00:44:28] <FromDiscord> <InventorMatt> bots have achieved sentience
[00:58:36] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3y3u
[01:00:42] <FromDiscord> <tandy> can  you have an async `block`?
[01:04:17] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:04:26] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3y3x
[01:05:09] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[01:05:23] *** Joins: flynn (~mcbloch@user/flynn)
[01:05:40] <FromDiscord> <Elegantbeef> Otherwise you'd want a macro
[01:07:16] <FromDiscord> <auxym> Possibly, thanks. good option for a 1-liner. But my original solution allows setting multiple fields with a single template call, which is also important for my use case. I might actually define both.
[01:08:00] <FromDiscord> <Elegantbeef> have you considered the `with` macro?
[01:08:13] <FromDiscord> <auxym> Might look into a macro, but I have to admit I haven't entirely wrapped my head around them yet. Probably unecessary just to have the convenience of a 1 liner, too.
[01:08:29] <FromDiscord> <auxym> Did not know `with`, I'll have a look
[01:08:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3y3y
[01:10:21] <FromDiscord> <Elegantbeef> Think there is a more usable version on nimble but idk i've never usued either
[01:13:10] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 256 seconds)
[01:15:50] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[01:20:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[01:21:11] *** Joins: neurocyte (~neurocyte@IP-213188117211.dialin.heagmedianet.de)
[01:21:11] *** Quits: neurocyte (~neurocyte@IP-213188117211.dialin.heagmedianet.de) (Changing host)
[01:21:11] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[01:25:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Client Quit)
[02:10:03] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:20:25] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[02:29:32] *** Quits: max22- (~maxime@2a01cb08833598005a7785a489aeabb8.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:13:50] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[03:45:11] <FromDiscord> <aleclarson> how do i `import` just one thing?
[03:45:58] <FromDiscord> <aleclarson> oh nvm i found it
[03:46:42] <FromDiscord> <Elegantbeef> `from X import Y` for any lurkers üòÄ
[03:50:10] <FromDiscord> <techno3d> sent a code paste, see https://play.nim-lang.org/#ix=3y3Z
[03:50:41] <FromDiscord> <Elegantbeef> It's not overly idiomatic but nim doesnt care if you do or not
[03:50:46] <FromDiscord> <Elegantbeef> it's useful for things like
[03:50:55] <FromDiscord> <Elegantbeef> !eval var a = 100; echo a
[03:50:59] <NimBot> 100
[03:59:57] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[04:01:05] *** Joins: flynn (~mcbloch@user/flynn)
[04:04:28] <FromDiscord> <techno3d> Oh nice‚Üµ‚ÜµI don't have to give up semicolans
[04:17:44] <FromDiscord> <Yardanico> but bear in mind that having semicolons in usual nim code is a pretty strong code smell :)
[04:17:56] <FromDiscord> <Yardanico> quite a lot of "modern" languages don't require semicolons anymore
[04:22:23] <FromDiscord> <Elegantbeef> Indeed semicolon insertion is lovely
[04:24:19] <FromDiscord> <Iapetus11> sent a code paste, see https://play.nim-lang.org/#ix=3y43
[04:24:52] <FromDiscord> <Iapetus11> (edit) "https://play.nim-lang.org/#ix=3y43" => "https://play.nim-lang.org/#ix=3y44"
[04:24:55] <FromDiscord> <Elegantbeef> Well if this is a library certainly no, secondly it should be `std/random`
[04:25:32] <FromDiscord> <Iapetus11> (edit) "https://play.nim-lang.org/#ix=3y44" => "https://play.nim-lang.org/#ix=3y45"
[04:25:43] <FromDiscord> <Iapetus11> üëç
[04:25:45] <FromDiscord> <aleclarson> what could be the cause of `template/generic instantiation of "some" from here` when using `some` from `options`?
[04:25:55] <FromDiscord> <Yardanico> In reply to @aleclarson "what could be the": that's not the full error message
[04:25:59] <FromDiscord> <Yardanico> show the full error message that the compiler shows
[04:26:14] <FromDiscord> <Elegantbeef> The issue with using `randomize` there is you've now overwritten the state so if someone had seeded it you've fucked them over
[04:26:27] <FromDiscord> <aleclarson> In reply to @Yardanico "that's not the full": it's the full message that VS Code shows, unless there's somewhere else i can look
[04:26:27] <FromDiscord> <Yardanico> yeah it only makes sense to call randomize() in apps
[04:26:33] <FromDiscord> <Yardanico> In reply to @aleclarson "it's the full message": check the compiler output as I said
[04:26:40] <FromDiscord> <Yardanico> compile the nim file and show the compiler output
[04:26:50] <FromDiscord> <Elegantbeef> The compiler is the best way to see issues
[04:27:08] <FromDiscord> <Yardanico> in libraries you don't want to call randomize() as that should be left for the application that's using the library
[04:27:14] <FromDiscord> <Yardanico> at most you can have a local random state
[04:27:21] <FromDiscord> <auxym> @ElegantBeef Is it a new recommendation to prefix stdlib imports with `std/`? I've been seeing it recently but I don't recall hearing about it before
[04:27:32] <FromDiscord> <Yardanico> In reply to @auxym "<@!145405730571288577> Is it a": yes, it is
[04:27:37] <FromDiscord> <aleclarson> In reply to @Yardanico "check the compiler output": oh very nice
[04:27:42] <FromDiscord> <Yardanico> new modules are only created in std/ prefix
[04:27:53] <FromDiscord> <aleclarson> > Cannot prove that 'result' is initialized. This will become a compile time error in the future.
[04:27:55] <FromDiscord> <Yardanico> so it's much better to import all stdlib modules with the std/ prefix
[04:28:01] <FromDiscord> <Elegantbeef> You also may want to expose procs that take a `Rand` object
[04:28:19] <FromDiscord> <auxym> I see. Any further reading? A blog post or changelog or something?
[04:28:19] <FromDiscord> <Yardanico> if you want to import multiple, it's possible the same way as before on a single line - `import std/[strutils, strscans, strformat]`
[04:28:33] <FromDiscord> <Yardanico> In reply to @auxym "I see. Any further": can't think of anything like that, it's not like this change requires some deep reading
[04:28:38] <FromDiscord> <Elegantbeef> The 1.6  docs go so far to put `std/modulename` in the title
[04:28:41] <FromDiscord> <aleclarson> In reply to @aleclarson "> Cannot prove that": so using a `not nil` variable with `options` is discouraged, i guess
[04:28:45] <FromDiscord> <Yardanico> In reply to @Elegantbeef "The 1.6  docs": yeah, that too
[04:29:00] <FromDiscord> <Yardanico> std prefix is there so that user modules (or modules from nimble) don't clash with stdlib ones
[04:29:10] <FromDiscord> <Yardanico> btw, for nimble packages you can use the `pkg` import prefix
[04:29:22] <FromDiscord> <auxym> Well, yeah, just wondering why everyone started doing that
[04:29:25] <FromDiscord> <Yardanico> `import pkg/[regex, mathexpr]`
[04:29:34] <FromDiscord> <Elegantbeef> Makes it harder to clash with modules accidently
[04:29:35] <FromDiscord> <Yardanico> In reply to @auxym "Well, yeah, just wondering": as I said, so that it doesn't clash with user modules
[04:29:44] <FromDiscord> <Elegantbeef> unless you're daft enough to make a folder named `std` \:P
[04:29:44] <FromDiscord> <auxym> I see.
[04:29:53] <FromDiscord> <auxym> try me  üòâ
[04:31:03] <FromDiscord> <auxym> I do like the idea though, when looking at a long list of imports in either nim or python, it's not always easy to know what is stdlib, what is a 3rd party lib, and what is a "local" import
[04:31:52] <FromDiscord> <Elegantbeef> plus there is the bracket import syntax yard just showed, so it's just a nicer way of doing it
[04:32:21] <FromDiscord> <impbox [ftsf]> `import foo/[bar, baz]` does this import foo as well as foo/bar and foo/baz?
[04:32:21] <FromDiscord> <auxym> eh, I think I'll stick to 1 line per import for now
[04:32:32] <FromDiscord> <Yardanico> In reply to @impbox "`import foo/[bar, baz]` does": no
[04:32:38] <FromDiscord> <Elegantbeef> yes impbox
[04:32:38] <FromDiscord> <impbox [ftsf]> ok, good to know
[04:32:42] <FromDiscord> <Yardanico> In reply to @Elegantbeef "yes impbox": are you sure?
[04:32:44] <FromDiscord> <impbox [ftsf]> ...
[04:32:45] <FromDiscord> <Yardanico> it doesn't AFAIK
[04:32:46] <FromDiscord> <Elegantbeef> Nevermind misread
[04:32:48] <FromDiscord> <Yardanico> lol
[04:33:01] <FromDiscord> <Elegantbeef> foo is a directory it cannot import it
[04:33:04] <FromDiscord> <Yardanico> yeah, it doesn't, since `foo` in this case is just treated like a directory or a prefix
[04:33:47] <FromDiscord> <impbox [ftsf]> eg. `import nico/[vec, matrix, quat]` i'd assume this wouldn't import nico
[04:33:54] <FromDiscord> <Yardanico> yes
[04:33:56] <FromDiscord> <Elegantbeef> correct
[04:34:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[04:34:31] <FromDiscord> <impbox [ftsf]> `import nico{,vec,matrix,quat}`
[04:34:35] <FromDiscord> <Elegantbeef> So this i fun with a recursive dependant alternating generic the parameter look up is just borked
[04:35:07] <FromDiscord> <Elegantbeef> It's unlikely that the import statement will get changed much since macros exist \:D
[04:35:33] <FromDiscord> <impbox [ftsf]> yeah, it's fine as is
[04:36:01] <FromDiscord> <Elegantbeef> I did like the idea of being able to do `import std/math`, but met
[04:36:01] <FromDiscord> <Elegantbeef> I did like the idea of being able to do `import std/math`, but meh
[04:40:33] <FromDiscord> <Yardanico> wait, didn't the matrix bridge correctly bridge edits between matrix and discord before?
[04:40:37] <FromDiscord> <Yardanico> now it just resends the message
[04:40:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:41:15] <FromDiscord> <Elegantbeef> It may have, i do notice there are issues with editing on discord -\> matrix, large edited messages disappear
[04:41:52] <FromDiscord> <Yardanico> i mean this https://media.discordapp.net/attachments/371759389889003532/884229375548096512/unknown.png
[04:42:09] <FromDiscord> <Elegantbeef> Yea i know i can read occasionally
[04:42:16] <FromDiscord> <Yardanico> wow
[04:42:21] <FromDiscord> <Yardanico> that's quite unexpected!
[04:42:27] <FromDiscord> <Elegantbeef> Indeed
[04:42:37] <FromDiscord> <Yardanico> don't tell me you can also speak?
[04:43:56] <FromDiscord> <Elegantbeef> not well
[04:43:58] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[04:51:35] <FromDiscord> <aleclarson> is forwarding `varargs` as easy as `otherProc(args)` or is there a helper for that?
[04:52:17] <FromDiscord> <Elegantbeef> if it's at runtime it should be since it's internally an array or seq
[04:53:14] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3y49
[04:53:38] <FromDiscord> <aleclarson> and if i need to map the `varargs` first, what's the best approach?
[04:54:06] <FromDiscord> <aleclarson> iterating and assigning back into the `varargs` i suppose?
[04:54:17] <FromDiscord> <Elegantbeef> I dont follow
[04:55:03] <FromDiscord> <aleclarson> sent a code paste, see https://paste.rs/3jy
[04:55:20] <FromDiscord> <Elegantbeef> No varargs is not mutable
[04:55:31] <FromDiscord> <Elegantbeef> You'd make a seq then map to that
[04:55:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3y4a
[04:55:54] <FromDiscord> <Elegantbeef> Or use sequtils
[04:56:04] <FromDiscord> <aleclarson> niceee
[04:56:40] <FromDiscord> <aleclarson> and i need an overload with `openArray`? or could `proc a` take a `varargs` just as well?
[04:56:52] <FromDiscord> <Elegantbeef> It can be varargs aswell
[04:57:01] <FromDiscord> <aleclarson> thx
[04:57:27] <FromDiscord> <Elegantbeef> varargs is 2 things\: comma delimited values, openarray[T]
[04:57:47] <FromDiscord> <Elegantbeef> You cannot do `10, 20, [30]` so be cognisant
[04:58:31] <FromDiscord> <aleclarson> makes sense, i would just prepend 10 and 20 into the seq and pass the seq only
[04:58:54] <FromDiscord> <aleclarson> in javascript, we have the spread operator `...` \:)
[05:00:05] <FromDiscord> <Elegantbeef> Can technically have it in nim aswell but not placed inside the proc call
[05:00:52] <FromDiscord> <aleclarson> something like `someProc(@[ 10, 20, ...args ])` ?
[05:01:20] <FromDiscord> <Elegantbeef> Still not doable afaik
[05:01:21] <FromDiscord> <aleclarson> (edit) "`someProc(@[" => "`someVarArgProc(@["
[05:02:20] <FromDiscord> <Elegantbeef> Due to the way macros work you cannot do stuff like that inside `[]` or `()`
[05:02:31] <FromDiscord> <aleclarson> oh interesting
[05:02:47] <FromDiscord> <Elegantbeef> you'd need to do something like `someVarArgProc <- (10, 20, ...args)`
[05:04:25] <FromDiscord> <Elegantbeef> Just easier and more readable to do it properly though
[05:04:57] <FromDiscord> <aleclarson> yup, i prefer to be as idiomatic as possible. only reach for macros if it removes lots of boilerplate
[05:22:38] <FromDiscord> <aleclarson> is there something like `Table` that returns nil instead of throwing an exception when a key doesn't exist? prolly a premature optimization to try avoiding `hasKey` but thought I'd ask anyway
[05:23:18] <FromDiscord> <aleclarson> ofc, speaking in context of a ref as table's value type
[05:26:04] <FromDiscord> <Elegantbeef> `getOrDefault`?
[05:27:06] <FromDiscord> <aleclarson> oh yeah whoops, forgot about that. i'm already using it in places \:P
[05:27:37] <FromDiscord> <Elegantbeef> Way to make me deprecated
[05:43:22] *** Joins: neurocyte4 (~neurocyte@45.93.111.173)
[05:43:22] *** Quits: neurocyte4 (~neurocyte@45.93.111.173) (Changing host)
[05:43:22] *** Joins: neurocyte4 (~neurocyte@user/neurocyte)
[05:45:34] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:45:34] *** neurocyte4 is now known as neurocyte
[06:29:02] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[06:34:31] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[06:40:08] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:51:04] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:59:13] <FromDiscord> <Goat> sent a code paste, see https://play.nim-lang.org/#ix=3y4n
[06:59:57] <FromDiscord> <Goat> sent a code paste, see https://play.nim-lang.org/#ix=3y4p
[07:01:01] <FromDiscord> <Goat> (edit) "https://play.nim-lang.org/#ix=3y4n" => "https://play.nim-lang.org/#ix=3y4r"
[07:04:28] <FromDiscord> <impbox [ftsf]> I'm not really sure what you're trying to do...
[07:04:46] <FromDiscord> <Goat> I'm basically rolling dice on tables
[07:04:59] <FromDiscord> <impbox [ftsf]> as in computer science Tables, or physical desk tables?
[07:06:28] <FromDiscord> <impbox [ftsf]> i'm guessing you want to map "d10" to a random function that returns 1..10?
[07:06:39] <FromDiscord> <impbox [ftsf]> and "d6" -> 1..6
[07:06:40] <FromDiscord> <impbox [ftsf]> etc?
[07:06:42] <FromDiscord> <impbox [ftsf]> is that right?
[07:06:59] <FromDiscord> <Goat> It's already mapped to that.
[07:07:26] <FromDiscord> <impbox [ftsf]> ok but i don't understand the goal of your program/library
[07:08:39] <FromDiscord> <Goat> To roll digital dice on a table and return the result, as if you were rolling on a table in a tabletop rpg manual
[07:08:45] <FromDiscord> <Goat> This stuff https://media.discordapp.net/attachments/371759389889003532/884266336245678141/unknown.png
[07:10:17] <FromDiscord> <impbox [ftsf]> "table" is a very overloaded confusing term
[07:11:16] <FromDiscord> <impbox [ftsf]> DiceTable is a seq rather than a `Table`, so I'm guessing you're using "Table" to refer to a physical table here
[07:11:24] <FromDiscord> <Goat> Yes
[07:11:31] <FromDiscord> <impbox [ftsf]> I see
[07:12:39] <FromDiscord> <impbox [ftsf]> and `rollTable` isn't rolling the table, it's rolling dice on a table right? and what's do the inputs mean and what is the output you want?
[07:16:16] <FromDiscord> <Goat> `rollTable` is rolling the dice on a table, yes. The two inputs to it are a DiceTable and the dice that you want to roll on that table. The output is a tuple of the value of the roll and the matching string on the table.
[07:17:10] <FromDiscord> <impbox [ftsf]> eg `rollDiceOnTable(diceTable, "d8") -> "2: Chitlin. Waxy, no hair."`
[07:17:23] <FromDiscord> <impbox [ftsf]> that kind of thing?
[07:17:47] <FromDiscord> <Goat> Yes, exaclty.
[07:18:01] <FromDiscord> <Goat> It already does that, I'm just asking to see if I can improve on it.
[07:18:44] <FromDiscord> <impbox [ftsf]> what is the point of the diceTable? couldn't you just have hairType[rollDice("d8")] -> "Chitlin. Waxy, no hair."
[07:19:46] <FromDiscord> <impbox [ftsf]> oh... "table" isn't refering to the physical table, it's referring to a lookup table of values to strings?
[07:23:55] <FromDiscord> <Goat> Basically, yeah.
[07:24:20] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3y4t this is how i'd do it
[07:26:39] <FromDiscord> <impbox [ftsf]> i think you'd at least want to embed the dice range in your table, rather than having the caller specify what the range is
[07:26:54] <FromDiscord> <impbox [ftsf]> eg passing a d6 to a table that has a range of a d10
[07:28:42] <FromDiscord> <Elegantbeef> Time for the over engineered solution \:D
[07:29:24] <FromDiscord> <impbox [ftsf]> also a case statement will error if you have overlapping ranges
[07:30:04] <FromDiscord> <impbox [ftsf]> though i suspect your data might not be set at compile time, in which case if you're reading the data at runtime the case statement is less useful
[07:32:22] <FromDiscord> <Goat> In reply to @impbox "i think you'd at": I was using the case statement before, but I found it too verbose to write one for every table and have that useless else.
[07:34:35] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3y4y
[07:35:54] <FromDiscord> <impbox [ftsf]> would probably give it a constructor that validated that there's no gaps and the range matches to avoid errors
[07:53:52] <FromDiscord> <Elegantbeef> My overengineered version https://play.nim-lang.org/#ix=3y4C
[07:54:17] <FromDiscord> <impbox [ftsf]> aww no macros
[07:55:35] <FromDiscord> <Elegantbeef> Really could replace `seq[V]` with `array[T, V]` now that i think about it, though limits you to CT ranges
[07:56:25] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3y4D
[07:56:45] <FromDiscord> <Elegantbeef> Dont need a macro for that \:D
[07:57:15] <FromDiscord> <impbox [ftsf]> template magic?
[07:57:30] <FromDiscord> <Elegantbeef> More like you can do most of that with an anonymous proc
[07:57:38] <FromDiscord> <impbox [ftsf]> i guess a lot depends on if you want to define the data in the code or have it loaded externally at runtime
[07:59:57] <FromDiscord> <aleclarson> are procs considered ref types?
[08:00:06] <FromDiscord> <impbox [ftsf]> nope
[08:00:18] <FromDiscord> <Elegantbeef> Dont think they count as `ref` but are pointers
[08:00:18] <FromDiscord> <Elegantbeef> pointer procs atleast
[08:00:21] <FromDiscord> <impbox [ftsf]> you don't want your procs getting garbage collected
[08:00:30] <FromDiscord> <Elegantbeef> doubt they count as `pointer` either
[08:00:57] <FromDiscord> <impbox [ftsf]> but they are not copied
[08:01:05] <FromDiscord> <aleclarson> so a proc argument can never be nil?
[08:01:10] <FromDiscord> <impbox [ftsf]> a proc argument can be nil
[08:01:19] <FromDiscord> <impbox [ftsf]> they are like a pointer
[08:01:31] <FromDiscord> <aleclarson> got it, thx
[08:08:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3y4G
[08:08:49] <FromDiscord> <Elegantbeef> Yes it's just using a anonymous function
[08:11:50] <FromDiscord> <aleclarson> can that arrow function syntax be used anywhere in place of anonymous proc?
[08:12:10] <FromDiscord> <Elegantbeef> anywhere requires `import std/sugar`
[08:12:32] <FromDiscord> <Elegantbeef> has `->` for typedefs and `=>` for anonymous proc defs
[08:12:53] <FromDiscord> <aleclarson> cool
[08:14:00] <FromDiscord> <Elegantbeef> Guess i should note do notation is considered experimental, but works rather well imo
[08:14:03] <FromDiscord> <Goat> sent a code paste, see https://play.nim-lang.org/#ix=3y4I
[08:20:52] <FromDiscord> <aleclarson> do macro pragmas run before the `->` macro?
[08:27:36] <FromDiscord> <Elegantbeef> Well you can easily see the AST to reason this out https://play.nim-lang.org/#ix=3y4L
[08:27:37] <FromDiscord> <Elegantbeef> Notice it's an `infix ->` which means if what it takes in is `typed` the code has to be valid on both sides, which you can see in the macro definition both `->` and `=>` use `untyped` so nope the pragma doesnt change anything in before the calls
[08:27:49] <FromDiscord> <Elegantbeef> Pretty much the answer is "If a macro takes untyped code, macros internally cannot expand before this call"
[08:29:15] <FromDiscord> <aleclarson> oo `dumptree` is nice \:)
[08:29:27] <FromDiscord> <aleclarson> i've just been guessing like a lunatic
[08:29:42] <FromDiscord> <Elegantbeef> there is also `dumpAstGen`
[08:30:22] <FromDiscord> <Elegantbeef> Impbox likes dumpastgen \:P
[08:30:54] <FromDiscord> <aleclarson> oh for copy paste goodness. nice
[08:31:10] <FromDiscord> <Elegantbeef> Well not that i suggest using it, cause it's harder to read/maintain
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:47:37] <FromDiscord> <impbox [ftsf]> @Goat https://play.nim-lang.org/#ix=3y4Q using an ugly macro to create that nice syntax
[08:48:07] <FromDiscord> <impbox [ftsf]> and a good example of the ugly usage of dumpAstGen =)
[08:56:47] <nrds> <06Prestige99> Hey Beef, any wm progress?
[08:58:08] <FromDiscord> <impbox [ftsf]> you're making a window manager beef?
[09:00:49] <FromDiscord> <Yardanico> oops, wanted to go to beef's github page but .. https://media.discordapp.net/attachments/371759389889003532/884294541245546496/unknown.png
[09:01:25] <nrds> <06Prestige99> Hahha
[09:01:42] <FromDiscord> <Elegantbeef> I have been, havent touched it in a while
[09:01:49] <FromDiscord> <Elegantbeef> No i have not prestige
[09:01:58] <nrds> <06Prestige99> Ah okay
[09:02:02] <FromDiscord> <Elegantbeef> I havent done much coding as of late aside from some compiler bodges
[09:03:29] <nrds> <06Prestige99> I've been working on mine a bit again, took a little break from programming on the side
[09:05:59] <FromDiscord> <impbox [ftsf]> Linerino2 coming soon
[09:07:35] <FromDiscord> <Elegantbeef> Lol impbox hardly
[09:50:10] <FromDiscord> <bolino> sent a long message, see http://ix.io/3y50
[09:58:48] <FromDiscord> <impbox [ftsf]> @bolino are you sure the error is coming from that line?
[10:00:25] <FromDiscord> <bolino> In reply to @impbox "<@!509668107665539073> are you sure": You're right, it comes from the result, where I was trying to get the first line (while there weren't any). Sorry for the silly question. Thanks!
[10:00:54] <FromDiscord> <impbox [ftsf]> not a silly question, but more helpful if you include the full error message
[10:03:51] <FromDiscord> <bolino> In reply to @impbox "not a silly question,": I was doing a `echo(len(test[0]))` to test the query, and that was actually were it failed.
[10:04:16] <FromDiscord> <impbox [ftsf]> yep, that makes sense
[10:04:21] <FromDiscord> <bolino> It does
[10:46:53] *** Joins: max22- (~maxime@2a01cb088335980007947e7c941ddf55.ipv6.abo.wanadoo.fr)
[10:54:31] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[11:01:31] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:15:40] <FromDiscord> <cabboose> how significant is the overhead for opening and closing channels
[11:15:56] <FromDiscord> <cabboose> like is it insignificant enough to create and pass around channels specific for jobs
[11:16:06] <FromDiscord> <cabboose> or better to have a channel and unique ids on the jobs or something
[11:21:06] <FromDiscord> <Rika> In reply to @cabboose "or better to have": Why not just do the ID version? It would be simpler
[11:21:33] <NimEventer> New Nimble package! drawim - Simple library to draw stuff on a window, see https://github.com/GabrielLasso/drawim
[11:21:36] <nrds> <12R2D299> 4GitHub: 7"A simple drawing library in Nim, inspired by p5js"
[11:21:39] <FromDiscord> <cabboose> Just trying to get an idea of their flexibility really
[11:23:07] <FromDiscord> <Elegantbeef> Oh that's a nice library
[11:23:12] <FromDiscord> <Elegantbeef> Atleast the premise
[11:28:33] <PMunch> @cabboose, shouldn't be a lot of overhead to open a channel
[11:29:08] <FromDiscord> <cabboose> Thanks PMunch
[11:29:16] <PMunch> It's basically just initialising a lock and a condition variable
[11:29:43] <FromDiscord> <cabboose> fab
[11:41:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[11:45:28] <FromDiscord> <treeform> In reply to @Rika "<@!107140179025735680> is there a": I don't think `wh` is a good idea. I should probably remove it. It should return an IVec2 .. integer version not the float version. Its an old function before we had integer vectors.
[11:46:13] <FromDiscord> <treeform> In reply to @Rika "does treeform mind if": I don't mind.
[11:53:52] <FromDiscord> <Rika> Okay
[11:54:18] <FromDiscord> <cabboose> This is what I understood after reading some of the RFCs for nim
[11:54:23] <FromDiscord> <cabboose>  https://media.discordapp.net/attachments/371759389889003532/884338219494309898/5m0w7d.png
[11:54:33] <FromDiscord> <Rika> In reply to @treeform "I don't think `wh`": Okay, thanks, it would be nice if sizes and positions were vectors instead of separate integers
[11:55:23] <PMunch> @Rika, most people don't seem to mind being pinged. But it might be annoying if people ping you when mentioning you without having a question for you specifically
[11:55:40] <FromDiscord> <Rika> Only happens in IRC heh
[11:55:51] <FromDiscord> <impbox [ftsf]> if you ping someone when you're talking about them rather than talking to them it's pretty annoying
[11:55:55] <PMunch> @cabboose, anything in particular you wonder about async/await?
[11:56:17] <PMunch> It's not a perfect paradigm, but it works fairly well once you're used to it
[11:56:21] <FromDiscord> <cabboose> Just that it seems to light the fire under the nim developer community
[11:56:35] <FromDiscord> <Rika> I don‚Äôt see many fires though
[11:56:40] <FromDiscord> <cabboose> Really
[11:56:46] <PMunch> @Rika, happens automatically on IRC, but some people do it explicitly on other services
[11:56:48] <FromDiscord> <cabboose> I could imagine them throwing knives at each other at some points
[11:56:49] <FromDiscord> <Rika> Just confused people
[11:57:21] <FromDiscord> <cabboose> Oh nah I think async/await is fine (granted it was a pain in the ass and still is to learn some of it when using chronos)
[11:57:21] <PMunch> Well there is the whole CPS thing going on, and the current async implementation isn't perfect (although it has gotten better)
[11:57:48] <FromDiscord> <cabboose> Yeah that's pretty much what I was referring to hahaha. Was a good 3am read last night hahahaha
[11:58:31] <FromDiscord> <cabboose> I use the chronos implementation at this point I am more comfortable with it and want to use the status libp2p impl
[11:58:56] <FromDiscord> <Rika> In reply to @cabboose "Oh nah I think": Most people don‚Äôt use chronos
[11:59:08] <FromDiscord> <Rika> Only either status people or oddballs I would assume
[11:59:17] <FromDiscord> <cabboose> Also I feel like as the current major source of sponsorship for nim their issues will probably be focused/resolved should they come up sooner than later
[11:59:31] <FromDiscord> <cabboose> Then I am odd
[11:59:31] <FromDiscord> <Rika> In reply to @cabboose "Also I feel like": They already do
[11:59:43] <FromDiscord> <Rika> Yeah what is your reason to use chronos?
[11:59:51] <FromDiscord> <cabboose> Libp2p
[11:59:55] <FromDiscord> <cabboose> shrug
[12:00:52] <FromDiscord> <Stuffe> sent a long message, see http://ix.io/3y5j
[12:04:36] <PMunch> I've used chronos in the past, when the official async/await had some weird bug
[12:06:18] <FromDiscord> <Elegantbeef> Then there's me going "People use async"? üòÄ
[12:06:44] <FromDiscord> <cabboose> It seems good for my usecase
[12:06:46] <FromDiscord> <Rika> Man literally makes massive macros yet doesn‚Äôt know how async works
[12:06:51] <FromDiscord> <Rika> How
[12:06:57] <FromDiscord> <Elegantbeef> I know how it works i just dont use it
[12:07:00] <FromDiscord> <Rika> Macro brain rot
[12:07:11] <FromDiscord> <Rika> Why
[12:07:15] <FromDiscord> <Rika> Why don‚Äôt you use it
[12:07:18] <FromDiscord> <cabboose> Doesn't need it probably lol
[12:07:19] <FromDiscord> <Elegantbeef> I dont think any of my code tremendously benefits from async
[12:07:26] <FromDiscord> <Rika> That‚Äôs rare
[12:07:40] <FromDiscord> <Rika> So you have never done networking or anything related?
[12:07:46] <FromDiscord> <cabboose> You're saying that from a biased perspective though Rika
[12:07:53] <FromDiscord> <Elegantbeef> You underestimate how much code i actually write
[12:08:07] <FromDiscord> <cabboose> what if he was just using it for math crunching or something
[12:08:10] <FromDiscord> <Rika> Cabboose you should know that when we talk we‚Äôre not really serious
[12:08:18] <FromDiscord> <Elegantbeef> I've done networking in a game oriented situation
[12:08:20] <FromDiscord> <cabboose> yeah
[12:08:26] <FromDiscord> <impbox [ftsf]> I don't use async
[12:08:28] <FromDiscord> <cabboose> And I overanalyse and am morbose
[12:08:44] <FromDiscord> <Rika> I‚Äôm still seriously surprised there are people who haven‚Äôt used async
[12:08:44] <FromDiscord> <Elegantbeef> Impbox and I are game devs primarily \:D
[12:08:45] <FromDiscord> <impbox [ftsf]> generally game stuff you deal with stuff synchronously/poll
[12:09:00] <FromDiscord> <Elegantbeef> Async doesnt have as many purposes aside from asset loading
[12:09:00] <FromDiscord> <Rika> Async is just a different way to do polling half the time you know
[12:09:04] <FromDiscord> <impbox [ftsf]> yeah
[12:09:09] <FromDiscord> <impbox [ftsf]> i don't like that it hides the polling
[12:09:28] <FromDiscord> <Rika> You don‚Äôt need to use the procs that hide the polling
[12:09:33] <FromDiscord> <cabboose> But I think async has its own overhead that isn't worth it if you don't have long delays in IO right?
[12:09:35] <FromDiscord> <Rika> There‚Äôs quite literally a pill proc
[12:09:40] <FromDiscord> <Rika> Poll
[12:09:55] <FromDiscord> <Rika> In reply to @cabboose "But I think async": Yes
[12:10:01] <FromDiscord> <Rika> Games prolly not optimal for it
[12:10:16] <FromDiscord> <cabboose> How much aids can I generate from spamming Futures I dont discard
[12:10:28] <FromDiscord> <impbox [ftsf]> I'm sure it's useful, but we're doing that stuff anyway in games so I haven't felt the need for it
[12:10:34] <FromDiscord> <Hamid Bluri> !eval import pathutils
[12:10:37] <NimBot> Compile failed: /usercode/in.nim(1, 8) Error: cannot open file: pathutils
[12:10:48] <FromDiscord> <Elegantbeef> !eval import std/pathutils
[12:10:51] <NimBot> Compile failed: /usercode/in.nim(1, 11) Error: cannot open file: std/pathutils
[12:10:51] <FromDiscord> <Rika> Try prefixing with std/
[12:10:52] <FromDiscord> <Rika> Ok
[12:11:01] <FromDiscord> <Hamid Bluri> üòê
[12:11:02] <FromDiscord> <Rika> Probably compiler module
[12:11:07] <FromDiscord> <Elegantbeef> Was going to say
[12:11:12] <FromDiscord> <Hamid Bluri> In reply to @Rika "Probably compiler module": ?
[12:11:20] <FromDiscord> <impbox [ftsf]> `compiler/pathutils`
[12:11:26] <FromDiscord> <Rika> Install ‚Äúcompiler‚Äù module via nimble
[12:11:31] <FromDiscord> <Rika> Then use import compiler
[12:11:53] <FromDiscord> <cabboose> In reply to @Stuffe "I have an unusual": Just whatever your process/application would send to stdout AFAIK
[12:12:37] <FromDiscord> <cabboose> Oh yeah what was the prefix for the nimble packages
[12:12:46] <FromDiscord> <Elegantbeef> `pkg`
[12:12:50] <FromDiscord> <cabboose> i tried pckg a while ago but didnt work
[12:12:53] <FromDiscord> <cabboose> ok that would explain it
[12:12:54] <FromDiscord> <cabboose> rip
[12:13:00] <FromDiscord> <Rika> Lol no c
[12:13:39] <FromDiscord> <cabboose>  https://media.discordapp.net/attachments/371759389889003532/884343068634005544/5m0xla.png
[12:16:40] <FromDiscord> <linux user> üóø
[12:18:21] <FromDiscord> <cabboose> I need to find the <1% of nim users that are australian
[12:18:33] <FromDiscord> <impbox [ftsf]> o/
[12:18:59] <FromDiscord> <Elegantbeef> Quite easy just type "oi cunt" and see how many people come out of the bush
[12:19:07] <FromDiscord> <impbox [ftsf]> yeah nah ay
[12:19:23] <FromDiscord> <Elegantbeef> gday mate
[12:19:34] <FromDiscord> <cabboose> I was thinking more of putting an obscure reference to the gremlin leading melbourne
[12:20:07] <FromDiscord> <Elegantbeef> Do you mean the people may or may not have shit in a macca's bathroom?
[12:20:38] <FromDiscord> <cabboose> The people who shit in a maccas bathroom
[12:20:40] <FromDiscord> <impbox [ftsf]> wow, beef you're knowledgeable about australian politics!
[12:21:34] <FromDiscord> <Rika> What the fuck lmao
[12:21:53] <FromDiscord> <Elegantbeef> I mean it's parliamentary how couldnt i! üòõ
[12:23:32] <FromDiscord> <cabboose> I'm making a pharmacy application, wanted to know who I could ask for help with it if I ever need. It might make money so might be able to make some cheeky passive profits and just sell it off if it does any good
[12:23:38] <FromDiscord> <Elegantbeef> Remember i'm Canadian our politics are equally as silly. Blackface and elbow gate so I have to ensure it's the same elsewhere.
[12:23:54] <FromDiscord> <cabboose> But the apis I use have confidentiality agreements and all that bs I had to sign
[12:24:12] <FromDiscord> <cabboose> ah ya dickhead I thought you were aussie too
[12:24:28] <FromDiscord> <Elegantbeef> Sorry i mislead you
[12:24:35] <FromDiscord> <cabboose> 'sorry'
[12:24:40] <FromDiscord> <cabboose> how could I not know you were canadian
[12:25:06] <FromDiscord> <Elegantbeef> Also you know that "sorry" was pronounced "Sorey"
[12:25:27] <FromDiscord> <cabboose> Sorey fwend
[12:25:56] <FromDiscord> <Elegantbeef> I think impbox is the only active aussie, so you dont have a great pool to pick from \:D
[12:27:12] <FromDiscord> <cabboose>  https://media.discordapp.net/attachments/371759389889003532/884346475495170078/unknown.png
[12:27:31] <FromDiscord> <impbox [ftsf]> a great pool of 1!
[12:30:09] <FromDiscord> <Rika> You‚Äôre Australian? Huh
[12:30:30] <FromDiscord> <Elegantbeef> It's odd cause i swear more than him, i dont believe it myself
[12:31:29] <FromDiscord> <impbox [ftsf]> i don't swear except for exceptional circumstances
[12:31:32] <FromDiscord> <impbox [ftsf]> gotta save it up
[12:31:47] <FromDiscord> <impbox [ftsf]> that was it shocks people when you do
[12:32:17] <FromDiscord> <impbox [ftsf]> (edit) "was" => "way"
[12:32:22] <FromDiscord> <Elegantbeef> Ah if i want to shock people i show them my darwin award
[12:34:47] <FromDiscord> <cabboose> Which glorious state do you represent impbox
[12:35:57] <FromDiscord> <Elegantbeef> I like that question cause it implies people live anywhere but NSW/Victoria üòõ
[12:36:26] <FromDiscord> <cabboose> I don‚Äôt think anyone ‚Äòlives‚Äô there anymore ü§£
[12:36:52] <FromDiscord> <cabboose> True blue western Aussie m8
[12:37:02] <FromDiscord> <cabboose> I‚Äôll rep this side on my own
[12:38:11] <FromDiscord> <impbox [ftsf]> i'm over in the big outbreak state
[12:38:41] <FromDiscord> <cabboose> Refer to the teeth sucking picture above then
[12:39:02] <FromDiscord> <cabboose> Hope you and your family are safe
[12:47:08] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[12:48:19] *** Joins: flynn (~mcbloch@user/flynn)
[12:48:41] <NimEventer> New thread by PMunch: Article series on multitasking in Nim, first installment: async, see https://forum.nim-lang.org/t/8400
[13:01:13] <FromDiscord> <cabboose> Great article PMunch
[13:01:30] <PMunch> Thanks :)
[13:01:51] <PMunch> I hope you clicked through to the actual async article as well
[13:02:06] <FromDiscord> <cabboose> Yes of course thats what I was looking for hahaha
[13:02:22] <FromDiscord> <Elegantbeef> Now if only you wrote about a subject worth using üòõ
[13:02:38] <FromDiscord> <cabboose> ;_;
[13:03:15] <PMunch> Haha, what would you want me to write about ElegantBeef? :P
[13:03:26] <FromDiscord> <Elegantbeef> Nah i'm a boring subject
[13:03:26] <PMunch> I just wrote about something that people seemed to be confused by
[13:05:07] <FromDiscord> <Elegantbeef> I'm joking of course i dont have any requests
[13:09:52] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:18:58] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Ping timeout: 240 seconds)
[13:20:22] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[13:28:43] *** Quits: max22- (~maxime@2a01cb088335980007947e7c941ddf55.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[13:54:20] <FromDiscord> <Stuffe> In reply to @cabboose "Just whatever your process/application": Thanks for the response!
[14:04:20] <FromDiscord> <impbox [ftsf]> @PMunch https://peterme.net/multitasking-in-nim.html i'd recommend making the links to the articles a lot more prominent, it looks like this is the article and the links just look like text
[14:04:38] <FromDiscord> <impbox [ftsf]> i'd probably just put it all on one page with big headings with anchors
[14:04:44] <FromDiscord> <fae> nimpretty does some funny things heh, like semicolon vs comma separator
[14:05:42] <FromDiscord> <fae> sent a code paste, see https://play.nim-lang.org/#ix=3y5N
[14:05:53] <FromDiscord> <fae> but not vice versa, if comma is the first detected
[14:06:06] <FromDiscord> <Rika> Because it‚Äôs recommended to use ;
[14:06:26] <FromDiscord> <Rika> Nim pretty is inflexible
[14:06:44] <FromDiscord> <Rika> I‚Äôve been thinking of making a more flexible formatter
[14:06:50] <FromDiscord> <Rika> But that‚Äôs a lot of work
[14:07:49] <FromDiscord> <fae> I didn't know that `;` was idiomatic Nim, I feel like most code samples I've looked at so far have used `,`
[14:08:53] <FromDiscord> <Rika> Idiomatic does not mean most used
[14:09:04] <FromDiscord> <Rika> Most people use , because it‚Äôs what they‚Äôre used to
[14:09:10] <FromDiscord> <Rika> All other languages use , after all
[14:09:19] <FromDiscord> <Rika> But there‚Äôs a pitfall to it
[14:09:31] <FromDiscord> <Elegantbeef> Well `;` is safer, but yea my brain cannot move towards `;`
[14:10:13] <FromDiscord> <Rika> Kinda do want to make that linter now but I don‚Äôt know where to start lol
[14:11:28] <FromDiscord> <fae> it seems like the main purpose of supporting both is to allow things like this to read better `(x, y, width, height: int; title: string; ...)`
[14:11:37] <FromDiscord> <Rika> Yes
[14:11:37] <FromDiscord> <haxscramper> In reply to @Rika "Because it‚Äôs recommended to": Aren't they just different
[14:11:44] <FromDiscord> <fae> commas for separating variable names, semis for separating types
[14:11:53] <FromDiscord> <Rika> They‚Äôre different but by default it is recommended to use ; over ,
[14:12:05] <FromDiscord> <Rika> Recommended by NEP is what I mean of course
[14:12:29] <FromDiscord> <Elegantbeef> Well the big safety is generics and ensuring you end var lists where you want
[14:12:39] <FromDiscord> <Rika> In reply to @fae "commas for separating variable": Not really? If you have a ‚Äúusing‚Äù statement you‚Äôll need to use ;
[14:12:58] <FromDiscord> <fae> what does idiomatic mean? defined by the spec? the most prevalent style by the official maintainers?
[14:13:10] <FromDiscord> <fae> who determines it i guess
[14:13:14] <FromDiscord> <Rika> Good question
[14:13:23] <FromDiscord> <haxscramper> I rearely see `;` outside of the stdlib, and stdlib doesn not use it all that often either
[14:13:28] <FromDiscord> <Elegantbeef> But it's not too big of a benefit
[14:13:31] <FromDiscord> <fae> because the official docs are littered with mixed usage
[14:13:33] <FromDiscord> <haxscramper> so i don't know where this comes from
[14:13:38] <FromDiscord> <fae> as are a lot of linked resources
[14:13:42] <FromDiscord> <Elegantbeef> Also hello hax, funny you join now cause i think i just fixed the `for x in a[2]: discard` bug üòõ
[14:13:42] <FromDiscord> <Elegantbeef> using `[]` for iterators that is
[14:13:46] <FromDiscord> <impbox [ftsf]> I didn't even realise ; was a thing in arg lists
[14:14:14] <FromDiscord> <haxscramper> In reply to @Elegantbeef "Also hello hax, funny": That sounds great, thanks for workin on it
[14:14:35] <FromDiscord> <Elegantbeef> In a bug fixing mood so scrolling through the issue list looking for bugs i can feasibly fix
[14:14:40] <FromDiscord> <haxscramper> My first encounter with `;` was like 2+ years after starting the language
[14:15:20] <FromDiscord> <haxscramper> And I just subconcously read `;` in argument list as `,` because it seems like every single language in existence that separates arguments does this with comma
[14:15:56] <FromDiscord> <fae> its actually a minor detail for me, i more thought it was interesting how nimpretty will take the first occurrence and apply it to the rest of the file, but only if the first occurrence is a `;`
[14:16:04] <FromDiscord> <fae> kind of confused me for a sec
[14:16:18] <FromDiscord> <haxscramper> Because nimpretty is actually pretty dumb
[14:16:22] <FromDiscord> <haxscramper> tool
[14:16:43] <FromDiscord> <haxscramper> Does not keep track of whether argument separator was a comma or a colon, so puts `;`, since it is safer
[14:16:46] <FromDiscord> <fae> it works nicely for the most part lol
[14:17:03] <FromDiscord> <fae> and its fast
[14:17:30] <FromDiscord> <fae> that's one of the nice things about tooling for nim, its usually written in nim and very fast
[14:17:33] <FromDiscord> <haxscramper> `echo "" > yourfile.nim` is even faster, and it actually removes all bugs as well
[14:17:39] <FromDiscord> <haxscramper> the best tool ever IMO
[14:18:17] <FromDiscord> <haxscramper> In reply to @fae "that's one of the": Nim is a good language to write all sorts of CLI & language-related toolingj
[14:21:05] <FromDiscord> <fae> Yea, I think it could be a great backend for native nodejs modules too. Certain projects in the web FE community are starting to gain a lot of traction (like for example this project named esbuild for compiling/bundling es6 code) because it's written in go and just so much faster than any of the current node solutions. But Nim would be even faster, and would be easier to ship tiny precompiled binaries.
[14:22:46] <FromDiscord> <fae> That's another issue with nodejs, having to compile native modules for target architecture. So it's becoming more common for people to ship prebuilt binaries for various archs
[14:22:53] <FromDiscord> <fae> Nim seems to excel at that
[14:23:19] <FromDiscord> <Rika> Well the only reason Go binaries are large is because of them being static
[14:23:34] <FromDiscord> <Rika> I don‚Äôt know why they make static binaries but they do
[14:23:52] <FromDiscord> <fae> easier to ship? idk
[14:39:03] <PMunch> @impbox, I see what you mean. I guess I could make the link colour a bit more obvious
[14:45:49] <FromDiscord> <fae> In reply to @PMunch "@impbox, I see what": That combined with how they were kind of in the middle of the page kind of fooled me too
[14:46:54] <FromDiscord> <fae> When reading a series I've always appreciated when the authors create a block of links to all articles in the series on each article so you can easily jump between them
[14:47:37] <FromDiscord> <fae> and usually put it at the very top or bottom, prefacing it with a "this is article x of y, here are links to the other articles" or something to that effect
[14:48:06] <FromDiscord> <fae> but i know you haven't written them all yet and that requires going back and editing üôÇ
[14:49:59] <PMunch> That's a good point though, when I add the next one I'll preface them with a little TOC thing
[14:59:35] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:31:25] <FromDiscord> <Varriount> In reply to @PMunch "That's a good point": Give me TOC or give me death
[15:33:03] <FromDiscord> <cabboose> I dunno give me good content first lol
[15:34:10] <FromDiscord> <Rika> Tender ove and care
[15:34:48] <PMunch> Haha, Ove is actually a name here
[15:34:56] <PMunch> But no, Table Of Contents
[15:35:46] <FromDiscord> <Rika> I‚Äôm joking haha
[15:35:54] <FromDiscord> <Rika> It‚Äôs what I thought of second after table of contents
[15:40:52] <PMunch> Is there a fancy function somewhere that parses any kind of call?
[15:40:56] <PMunch> In a macro
[15:41:13] <PMunch> So that it will accept both command, call, and dot calling
[15:43:43] <PMunch> I guess they all share the same structure of name, args so just checking if the kind is in nnkCallKinds should suffice
[15:46:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[15:46:41] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:47:48] *** Joins: flynn (~mcbloch@user/flynn)
[15:55:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[16:10:48] *** Joins: arkurious (~arkurious@user/arkurious)
[16:12:50] <PMunch> Is there a `staticWrite` equivalent to `staticRead`
[16:15:52] <FromDiscord> <Rika> Do normal file write procs not work
[16:16:42] <PMunch> Ah, indeed they do
[16:19:09] <FromDiscord> <Rika> Which begs the question of why do reads need a special proc
[16:19:48] <PMunch> Hmm, I can't open a file though, it appears only writeFile works
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:41:56] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 256 seconds)
[16:52:58] <FromDiscord> <fae> FFI in Nim is fun. I've never really done any FFI stuff before but Nim makes it easy
[16:53:38] <FromDiscord> <fae> I feel like it quickly got me up to speed even though I have little knowledge about how compilers and linkers work
[16:55:00] <FromDiscord> <fae> Last night I was trying to wrap Yoga, but it was bugging me how it was a cpp library, so I went searching for a pure C flexbox implementation and found one made by the Xamarin team
[16:55:33] <FromDiscord> <fae> Anyway, tonight I got that wrapped and actually rendering out some layouts
[16:55:42] <FromDiscord> <Rika> gl
[16:57:46] <FromDiscord> <fae> Sometimes I wonder though if the library is small enough like 1k lines or less if it may just be faster to try porting by hand to pure Nim. But then you forego all the test suites and future updates etc, unless you do a bunch of work to keep stuff up to date.
[16:58:25] <FromDiscord> <Rika> wrapping is almost always faster than porting
[16:58:32] <FromDiscord> <Rika> unless your library is like 100 lines long
[16:58:48] <FromDiscord> <haxscramper> And if it doesn't use any "nice" features of C/C++
[16:59:09] <FromDiscord> <fae> im noticing that a lot of libraries I encounter are doing fancy macro stuff, which makes using c2nim difficult
[16:59:24] <FromDiscord> <fae> im not good enough at tweaking the C code to get a full transpile
[16:59:25] <FromDiscord> <enthus1ast> when i port stuff, i put them block by block into c2nim
[17:00:14] <FromDiscord> <enthus1ast> https://github.com/enthus1ast/nimCToNimGui
[17:00:17] <nrds> <12R2D299> 4GitHub: 7"<No Description>"
[17:00:26] <FromDiscord> <enthus1ast> this is a big help\: https://github.com/enthus1ast/nimCToNimGui/raw/master/img.png
[17:01:19] <FromDiscord> <Rika> that is one hell of a name though
[17:01:48] <FromDiscord> <haxscramper> `echo file.c | entr -rc sh 'c2nim file.c && bat file.nim'`
[17:01:58] <FromDiscord> <enthus1ast> yeah, it was just a hack to help me porting stuff, but i though putting it to github that i do'nt loose it
[17:10:18] <FromDiscord> <fae> Is it ‚Äúbad‚Äù to write a more ergonomic wrapper around a c library with Nim conventions that just calls down to your ffi functions? Like can it be a performance issue.
[17:10:59] <FromDiscord> <enthus1ast> if the ergonomic has runtime implications, yes for sure
[17:11:22] <FromDiscord> <enthus1ast> but a lot can be done already on compile time
[17:11:26] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[17:11:49] <FromDiscord> <fae> I‚Äôm thinking things like slightly changing function names, argument defaults things like that
[17:17:10] <FromDiscord> <haxscramper> no, this does not have any performance impact
[17:17:43] <FromDiscord> <haxscramper> `proc getInt(): int {.importc: "myLIbrary_getInt".}`
[17:18:13] <FromDiscord> <haxscramper> Converting `#define MY_CONST 0` to enum also does not have any perf. impact
[17:21:21] <FromDiscord> <fae> I assumed that simply renaming wouldn‚Äôt have overhead. But having an additional proc that takes args in a different way (like for creating objects) and then calls down to that could be bad
[17:21:25] <FromDiscord> <impbox [ftsf]> Those should probably be cint though
[17:21:37] <FromDiscord> <fae> In a hot path
[17:21:39] <FromDiscord> <impbox [ftsf]> If it's a c function
[17:22:16] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[17:22:22] <FromDiscord> <impbox [ftsf]> And converting int to cint may have performance costs if they're not the same
[17:22:27] <FromDiscord> <fae> That was my next question, is it bad to have a layer that converts between traditional Nim types and C types
[17:22:37] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[17:23:26] <FromDiscord> <fae> Like what‚Äôs the difference between float32 and cfloat
[17:25:29] <FromDiscord> <haxscramper> You can add things like `always_inline` etc‚Üµ(@fae)
[17:25:41] <FromDiscord> <haxscramper> Well, if it is really importantn
[17:26:28] <FromDiscord> <haxscramper> Make nim proc `{.inline.}`, put `cgenDecl: `attribute((alywas\_inline)) $#$#$#\`
[17:26:28] <FromDiscord> <haxscramper> I don't rememerb exact syntax
[17:26:54] <FromDiscord> <haxscramper> Also don't forget about regular inlining, for proc in form of `proc myWrapper() = actualcstuff()` it is very likely to trigger
[17:27:28] <FromDiscord> <haxscramper> Well, you probably need 10 PHDs in compiler construciton to really understand cost analysis that GCC does for inlining
[17:27:47] <FromDiscord> <haxscramper> But generally speaking single `{.inline.}` and `--opt:speed` might be more than enough
[17:28:33] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-codegendecl-pragma
[17:28:57] <FromDiscord> <auxym> well if you're doing type casts/conversions it's still going to add a bit of overhead. Might not be significant though unless it's  a really, really hot path.  At this point (instruction-level optimization) it's probably worth running the code through godbolt with optimization enabled and see what's going on.
[17:29:04] <FromDiscord> <haxscramper> `proc myinterrupt() {.codegenDecl: "attribute((always_inline)) $# $#$#".} =`
[17:29:48] <FromDiscord> <haxscramper> `always_inline` does not guarantee perfect inlining as and probably this is not neded
[17:31:37] <FromDiscord> <fae> Okay, thanks for pointing me to some resources, I will do some reading. Granted this is all premature optimization thought process, just kind of curious how some of this works since I‚Äôm stepping into the foray.
[17:32:17] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[17:34:31] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[17:36:10] <FromDiscord> <auxym> Yeah. Premature optimization is probably not a good idea. Nim and gcc are both smart about optimization, more than you/me in most cases.
[17:36:22] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[18:01:45] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:05:31] <FromDiscord> <cabboose> sent a code paste, see https://play.nim-lang.org/#ix=3y6G
[18:05:43] <FromDiscord> <cabboose> sent a code paste, see https://play.nim-lang.org/#ix=3y6H
[18:05:52] <FromDiscord> <cabboose> why is this shit eating a bag of balls when I throw the pointer to another thread
[18:06:05] <FromDiscord> <cabboose> when it tries to send data to the channel it just chokes and says its reading from nil
[18:06:19] <FromDiscord> <cabboose> even trying to echo a repr of the ptr makes it burn in hell fire
[18:06:53] <FromDiscord> <cabboose> and yes the constructor is ugly but I am just trying to make this work
[18:14:35] <FromDiscord> <Rika> mans mad
[18:14:43] <FromDiscord> <Rika> because youre sending a ref?
[18:14:50] <FromDiscord> <Rika> ah, its shared
[18:14:58] <FromDiscord> <Rika> but eh no its still a ref
[18:15:11] <FromDiscord> <Rika> you're making a shared pointer of a threadlocal ref
[18:15:37] <FromDiscord> <Rika> @cabboose
[18:16:33] <FromDiscord> <Rika> i'd recommend just making a ptr to the actual object... is there a reason its a ref>
[18:17:06] <FromDiscord> <Rika> also the other refs asynclock and asyncevent seem problematic
[18:17:30] <FromDiscord> <Rika> how are you passing such pointer to thread
[18:19:16] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[18:19:33] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[18:34:25] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[18:34:37] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[18:35:24] <PMunch> @Araq, is there a way to get passC/passL on compile-time?
[18:37:54] <Zevv> euh what?
[18:38:20] <Zevv> how do you mean? Generating passC/passL options at compile time?
[18:38:47] <FromDiscord> <Rika> is there a way to get [the value of the] passC/passL [command line parameters] on compile-time
[18:38:51] <FromDiscord> <Rika> is what i assume it means
[18:39:06] <PMunch> No I want to get the declared ones
[18:39:15] <PMunch> Yes
[18:39:19] <Zevv> right. that makes sense.
[18:44:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:45:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:49:31] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[18:49:51] *** Joins: auxym_ (~francis@70.81.118.27)
[18:50:36] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:53:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[19:04:38] *** Quits: auxym_ (~francis@70.81.118.27) (Quit: Konversation terminated!)
[19:04:54] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[19:17:50] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:18:56] *** Joins: flynn (~mcbloch@user/flynn)
[19:21:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[19:22:50] *** Joins: pro (~pro@user/pro)
[19:31:56] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 256 seconds)
[19:33:08] *** Joins: flynn (~mcbloch@user/flynn)
[19:34:54] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[19:35:11] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[19:49:12] <FromDiscord> <aleclarson> can a variable declared by `for..in` be made mutable somehow?
[19:49:31] <FromDiscord> <aleclarson> without separate variable declaration
[19:49:32] <NimEventer> New thread by Neil_H: Accessing object properties where objects are in a sequence, see https://forum.nim-lang.org/t/8401
[19:50:04] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[19:50:14] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[19:50:19] <FromDiscord> <aleclarson> eg: `for var item in items(seq1):`  does not work
[19:53:37] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y7t
[19:56:09] <FromDiscord> <auxym> See also: many types have `mitems` defined, which allows mutation
[19:57:16] <FromDiscord> <aleclarson> nice, but that would mutate `seq1` in my example, i think?
[19:58:21] <FromDiscord> <Goat> @impbox [ftsf] thank you for that macro last night. I made a minor tweak and now it's just right.
[20:00:42] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3y7A
[20:03:07] <FromDiscord> <aleclarson> sent a code paste, see https://paste.rs/BpS
[20:04:45] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=
[20:05:15] <FromDiscord> <auxym> works for arrays, too, which can start at indices other than 0 (actually can be indexed with any Ordinal)
[20:05:50] <FromDiscord> <aleclarson> good to know, thx
[20:05:56] <FromDiscord> <aleclarson> i'm using `for i in 0 ..< s.len:`
[20:06:10] <FromDiscord> <auxym> that works too (for seqs)
[20:06:57] <FromDiscord> <pointystick> you can also use mpairs to get both the index and the value: https://play.nim-lang.org/#ix=3y7C
[20:09:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[20:10:32] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[20:10:47] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:13:37] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:20:39] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[20:21:51] <FromDiscord> <Gumber aka Zachary Carter> well mpairs gives you mutable values
[20:21:54] <FromDiscord> <Gumber aka Zachary Carter> but...
[20:21:58] <FromDiscord> <Gumber aka Zachary Carter> not sure if you care or not
[20:25:40] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[20:25:50] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:31:38] <nrds> <06Prestige99> @PMunch are you around?
[20:32:19] <Zevv> argh fuck I made the key-hole-shaped hole to hang my thingy up side down
[20:32:21] <Zevv> that's pretty stupid
[20:32:40] <FromDiscord> <Rika> ?
[20:33:04] <Zevv> i made a thingy that hangs on the wall
[20:33:17] <Zevv> it has this little opening you can put the screw through and slide it
[20:33:44] <FromDiscord> <Rika> strange thing to say in the main nim channel but ok lol
[20:33:48] <Zevv> oh sorry
[20:33:56] <Zevv> ooops EWRONGCHAN
[20:36:35] <FromDiscord> <Rika> lol
[20:39:04] <FromDiscord> <aleclarson> is there a performance gain from using `func` instead of `proc` or is it just for side effect protection at compile time?
[20:40:47] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[20:40:54] <FromDiscord> <Rika> no gain
[20:41:04] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:41:06] <FromDiscord> <Rika> well, maybe in terms of extra optimisations but no direct gain
[20:52:47] <FromDiscord> <treeform> I also doubt there is a gain, but always measure üôÇ
[20:54:30] <FromDiscord> <aleclarson> i only bother measuring when fixing obvious bottlenecks üòÜ
[20:55:50] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[20:56:04] <FromDiscord> <aleclarson> although, i've had the luxury of not needing optimal performance‚Üµ(yet i still like to be cognizant of easy wins)
[20:56:08] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:59:07] <FromDiscord> <dom96> kinda afraid of what the new Discord Threads will bring
[20:59:16] <FromDiscord> <dom96> in terms of our relays
[21:14:00] <FromDiscord> <aleclarson> where is `do` syntax documented?
[21:16:21] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual_experimental.html#do-notation
[21:19:28] <FromDiscord> <aleclarson> what's the `.experimental` pragma to enable it? docs don't say
[21:20:39] <FromDiscord> <haxscramper> because there is no pragma for it
[21:20:43] <FromDiscord> <haxscramper> it is just enabled
[21:20:55] <FromDiscord> <haxscramper> lf
[21:22:50] <FromDiscord> <haxscramper> In reply to @dom96 "kinda afraid of what": they have to be manually enabled, right?
[21:29:30] <FromDiscord> <Rika> yes
[21:29:36] <FromDiscord> <Rika> they are disabled by default
[21:32:32] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:33:38] *** Joins: flynn (~mcbloch@user/flynn)
[21:41:59] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[21:42:10] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[21:43:29] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:44:35] *** Joins: flynn (~mcbloch@user/flynn)
[21:50:56] <FromDiscord> <kamy> sent a code paste, see https://play.nim-lang.org/#ix=3y88
[21:51:38] <FromDiscord> <kamy> (edit) "https://play.nim-lang.org/#ix=3y88" => "https://play.nim-lang.org/#ix=3y8a"
[21:52:27] <FromDiscord> <kamy> (edit) "https://play.nim-lang.org/#ix=3y8a" => "https://paste.rs/PBC"
[21:53:41] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:57:06] *** Joins: neurocyte (~neurocyte@45.93.111.173)
[21:57:06] *** Quits: neurocyte (~neurocyte@45.93.111.173) (Changing host)
[21:57:06] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[21:58:39] *** Joins: userj (~userjjjj@user/userj)
[22:00:40] <FromDiscord> <dom96> In reply to @haxscramper "they have to be": yes, for now. But they'll be enabled automatically for all on the 9th
[22:00:44] <FromDiscord> <dom96> so in 3 days...
[22:16:27] <FromDiscord> <Rika> You can probably disable it again
[22:19:20] <nrds> <06Prestige99> damn, end is a keyword
[22:21:25] <FromDiscord> <aleclarson> can `=>` and `do` notation be combined?
[22:21:48] <FromDiscord> <aleclarson> to create a multi-line proc
[22:23:09] <FromDiscord> <haxscramper> How this is supposed to work
[22:23:46] <FromDiscord> <haxscramper> You can probably combined them somehow, it is not disallowed, but I wonder whether why not just `proc()` in-place
[22:24:02] <FromDiscord> <aleclarson> doesn't `=>` provide return type inference?
[22:24:56] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y8m
[22:27:17] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3y8n
[22:27:22] <FromDiscord> <haxscramper> `=>` just uses `auto`, there is no special type inference
[22:29:20] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y8o
[22:29:43] <FromDiscord> <haxscramper> can you show the code
[22:30:53] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y8s
[22:31:15] <FromDiscord> <konsumlamm> sent a code paste, see https://play.nim-lang.org/#ix=3y8t
[22:31:52] <FromDiscord> <aleclarson> In reply to @konsumlamm "you can try to": `expression expected, but found 'keyword block'`
[22:32:17] <FromDiscord> <haxscramper> `proc (): auto = foo + 1` in a statement is parsed as regular proc declaration
[22:33:16] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3y8v
[22:33:45] <FromDiscord> <aleclarson> no way around the variable name repetition?
[22:34:23] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3y8w
[22:34:44] <FromDiscord> <haxscramper> also use of `auto` is discouragend
[22:34:45] <FromDiscord> <haxscramper> also use of `auto` is discouraged
[22:34:52] <FromDiscord> <haxscramper> At least in cases like this
[22:35:33] <FromDiscord> <haxscramper> You can use template that I showed
[22:35:44] <FromDiscord> <haxscramper> matrix bridge lag
[22:36:01] <FromDiscord> <haxscramper> ffs, do they really host it on potato
[22:44:25] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Read error: Connection reset by peer)
[22:44:43] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[22:53:02] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[22:53:16] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[22:55:07] <FromDiscord> <aleclarson> how do i combine `Option` with an iterator, without getting the `escapes its stack frame` error
[22:55:10] <FromDiscord> <aleclarson> (edit) "error" => "error?"
[22:56:53] <FromDiscord> <haxscramper> Can you show the code, again? I'm pretty sure that has something to do with `some addr <local-variable>`  or similar
[22:57:14] <FromDiscord> <haxscramper> But the error is weird and it is not clear what is going on from description alone
[22:57:32] <FromDiscord> <haxscramper> just `iterator arg(): Option[int] = yield some 12` should work
[22:58:04] <FromDiscord> <Elegantbeef> what do you mean?
[22:59:43] <FromDiscord> <aleclarson> here's a contrived repro:‚Üµhttps://play.nim-lang.org/#ix=3y8A
[23:00:16] <FromDiscord> <aleclarson> whoops, forgot to `inc(i)` in `foo` but you get the point
[23:01:42] <FromDiscord> <aleclarson> i guess not using `lent` is one workaround \:P
[23:01:51] <FromDiscord> <aleclarson> but it prevents an extra copy, yes?
[23:03:09] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3y8D
[23:03:28] <FromDiscord> <haxscramper> Now the issue itself - you are trying to `lent` a local variable
[23:04:20] <FromDiscord> <haxscramper> After `items()`  is finished execution whatewher borrowed it's results will basically have a reference to a local variable that exited the scope
[23:04:29] <FromDiscord> <haxscramper> > 'data' escapes its stack frame
[23:05:24] <FromDiscord> <aleclarson> ah ok thx for the explanation!
[23:05:54] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3y8H
[23:06:16] <FromDiscord> <haxscramper> `arg[0]` is external, to the proc, so ownership tracking allows you to lent data that is not local
[23:07:04] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[23:08:10] *** Joins: flynn (~mcbloch@user/flynn)
[23:23:00] <nrds> <06Prestige99> How do you handle type name conflicts? I have a type `Line` in my project` but so does another import I'm using
[23:23:03] <FromDiscord> <TennisBowling> does `-d:danger` provide a speedup (even if extremely small) compared to `release`?
[23:23:46] <nrds> <06Prestige99> oh I see
[23:25:48] <FromDiscord> <Recruit_main707> In reply to @TennisBowling "does `-d:danger` provide a": yes
[23:26:00] <FromDiscord> <TennisBowling> cooo
[23:26:03] <FromDiscord> <TennisBowling> (edit) "cooo" => "cool"
[23:26:15] <FromDiscord> <Recruit_main707> i dont remember what exactly changed, i think it had to do with checking segfaults or something
[23:30:08] <FromDiscord> <metamuffin> }n
[23:40:08] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[23:41:14] *** Joins: flynn (~mcbloch@user/flynn)
[23:52:55] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[23:54:01] *** Joins: flynn (~mcbloch@user/flynn)
[23:57:21] <FromDiscord> <Recruit_main707> c2nim changed std::string to nim normal string when wrapping functions, is that correct??
[23:57:24] *** Joins: max22- (~maxime@2a01cb0883359800f259119bb9ba011d.ipv6.abo.wanadoo.fr)
[23:59:22] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b016:723d:fc9f:63a9:639e:eb87)
