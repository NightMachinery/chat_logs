[00:08:33] <Hash[m]> lol
[00:21:38] <muaddib[m]> Haha
[00:25:38] <superkuh> Maintaining flowgraphs through the next minor version update is the other half.
[00:31:16] *** Joins: pcero (~pcero@187.135.226.181)
[00:32:29] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[00:34:06] <Hash[m]> For real, i'd sooner build a whole other computer than sacrifice something that works in a prior version
[00:50:45] <Hash[m]> So I feel like I have a handle on using the Polyphase Synthesizer to send a signal on ten 100kHz spaced channels, then feed that into another Polyphase Synthesizer and turn 10 into 20 channels. Gotta test on hardware when I get home but feels like a path to 240 ISM channels üòÄ
[01:00:23] <willcode4[m]> Hash: Keep in mind that you are dividing your power per channel. 240 channels with the same radio will give you something like 23dB less per channel.
[01:03:15] <muaddib[m]> Sounds like it‚Äôs time to buy an amp, make sure it goes to 11!
[01:13:33] <Hash[m]> <willcode4[m]> "Hash: Keep in mind that you..." <- Thanks, I thought that might be the case and was experimenting with multiply blocks‚Ä¶ any suggested method for handling this?
[01:15:27] <willcode4[m]> It's a physics problem - nothing to do with GNU Radio. More channels in a signal mean less power per channel if they're all active at the same time.
[01:16:25] *** Quits: saba4ka-mumu (~efsearfc@176.59.55.31) (Ping timeout: 260 seconds)
[01:17:46] <Hash[m]> I see what you mean, you‚Äôre saying the SDR will be transmitting less for every channel that is on at the same time
[01:18:39] <Hash[m]> Not loss within GR, but loss on output power of the SDR
[01:18:56] <Hash[m]> Since it‚Äôs spread out over so many channels
[01:23:54] <muaddib[m]> If you‚Äôre OK not sending them all at the exact same time, you could just re-tune your radio 240 times, once at each end of burst. It‚Äôs just important to account for settling time in the radio. I assume you already thought of that though because that kind of defeats the whole purpose of synthesis. sounds like you really need to hit all channels at exact same time?
[01:27:54] <Hash[m]> My plan was to hit all at the same time‚Ä¶ but that could turn out to be problematic :) but really the hopping window is 700mS so Assuming a packet takes about 50mS to send I could send 40 channels at a time or something less, then next 40 and still hit everyone within the hopping window
[01:28:21] <Hash[m]> That‚Äôll be the backup plan
[01:37:35] *** Quits: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net) (Ping timeout: 264 seconds)
[02:03:59] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[02:11:39] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[02:21:54] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Ping timeout: 260 seconds)
[02:29:07] <patchvonbraun[m]> Hash: RF power measurements are always ‚Äúarea under the source‚Äù. So when a. RF amp is rated for let‚Äôs say 100mW that‚Äôs total power across whatever bandwidth it‚Äôs being asked to amplify.
[02:30:20] <patchvonbraun[m]> Curve. Area under the curve. Autocorrect sometimes makes the weirdest choices.
[02:44:27] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[02:49:34] <Hash[m]> <patchvonbraun[m]> "Hash: RF power measurements..." <- Thanks, I can send 20 separate bursts at the same time and the receiver decodes them properly, think I need to feed the signal into another SDR and watch the waterfall to see how it looks as I scale up the channels. 
[02:49:59] <Hash[m]> in lieu of a Spectrum Analyzer to perform actual measurements
[02:51:53] <willcode4[m]> A bank of Delay blocks could be useful.
[02:55:58] <Hash[m]> Yea, so with that route i'd still build a big synthesizer but just slap delay blocks between blocks of 20 channel inputs cascading so chans 0-19 fire,then 20-39 etc until I hit all 240? So never more than 20 or whatever works at a time?
[03:10:49] *** Quits: schwach (~schwach@191.96.170.117) (Quit: The Lounge - https://thelounge.chat)
[03:17:23] <muaddib[m]> You would have way less re-tunes than doing each frequency individually (N/240 where N is the number of channels in the synthesizer) which would cut down on how many times you have to wait for retune. I like the ‚Äúwhatever works ‚Äúmentality too. Like, find your trade-offs with lower synth channel count, but getting higher channel power.
[03:18:42] <muaddib[m]> Just curious, are you doing as a workaround for Learning the hop pattern? Or is this a message actually intended for all rx‚Äôs
[03:22:10] *** Joins: schwach (~schwach@191.96.170.117)
[03:36:14] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:46:42] <Hash[m]> Basically as a way to build a transmitter that can transmit to all smart meters at any time no matter what frequency any of them are on. If you go for hopping pattern then you have to know the ID's of all meters you want to talk to in order to calculate each individual hop pattern and then sync with them. This way, anyone that can receive the signal will will get the data no matter the channel they are currently on... Or so goes the theory
[03:46:55] * Hash[m] uploaded an image: (524KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/abgJHxAqsMqeiWgTbNvqkCmB/image.png >
[03:47:26] <Hash[m]> That's 40 channels spaced 100kHz apart... Modem can still receive it
[03:48:21] <Hash[m]> I think i screwed upon my centering from one synth to another so have to look at that again
[03:48:32] <Hash[m]> s/I think i screwed upon my centering from one synth to another so have to look at that again/I think i screwed up on my centering from one synth to another so have to look at that again/
[04:38:20] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:40:23] <muaddib[m]> Will you be pushing any of this to gr-smartmeters?
[04:43:39] *** Joins: Vonter (~Vonter@user/vonter)
[04:50:14] <Hash[m]> Yea, probably as example flowgraphs to transmit to the meters. Trying to have an accompanying python program that generates the data so you can just define meter ID and other info and it will transmit
[04:58:36] <Hash[m]> Troubleshooting an Underflow that occurs and seems to get worse as I scale up this flowgraph. On my simplest flowgraph feeding into a polyphase synth I get one U for each burst I send. Any ideas on how I can track that down?
[05:08:14] <BarryDuggan[m]> For my transmitters I use an adjustment factor with the Fractional Resampler: 1.0/((usrp_rate/samp_rate)*rs_ratio) where rs_ratio is 1.04 obtained by trial-and-error. Only one U is not bad. I used to get dozens.
[05:10:39] <Hash[m]> On my initial flowgraph I get one U, but as I scale up I get 32 or more per burst and I think it
[05:10:47] <Hash[m]> 's causing errors in the data
[05:11:38] <Hash[m]> but the missed transmissions could be other things and i'm just guessing by trying to solve the Underflow issue
[05:11:42] <BarryDuggan[m]> probably. I had garbled signal on NBFM
[05:18:05] <Hash[m]> Yea, on average I get 40 U
[05:18:16] <Hash[m]> * 40 U's per burst
[05:20:27] <Hash[m]> seems to fluctuate though, but tracing the flowgraph everything seems to line up. Trying to start at the simplest FG that's only getting one U per burst to figure out the root issue 
[05:36:56] <Jacob[m]12> Hash: There is (or at least was) a "quirk" with UHD `tx_eob` tags, and it has to do with the transfer block size. If the `send_frame_size` is 256 samples (1024 bytes) and you give it 250 samples, the last 50 samples will block for a full send frame **AND** the `tx_eob` tag will block as well so the driver thinks there was an underflow. All the `tx_eob` tag really does is tell the driver to shutup about underflow warnings, but the last
[05:36:56] <Jacob[m]12> samples in a burst might be important. 
[05:36:57] <Jacob[m]12> If you need to send 511 samples in this situation, half of your burst is going to be missing. Something to consider.
[05:37:07] <Jacob[m]12> s/**AND**/*and*/
[05:37:30] <Jacob[m]12> more on transport here: https://files.ettus.com/manual/page_transport.html
[05:40:35] <Jacob[m]12> I cannot recall what the default `send_frame_size` is for B2xx; but if you ensure your burst is an exact multiple of that number of samples it should go away
[05:40:45] <Hash[m]> Thanks, that‚Äôs super helpful! Should I focus on padding packets to be a certain size then?
[05:40:56] <Hash[m]> Got it
[05:41:45] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Remote host closed the connection)
[05:42:05] <Jacob[m]12> it can be good to make sure the "U"s go away so that "U"s are actually useful to indicate a problem. Also the whole "i want to be in control of what goes OTA" is good
[05:42:52] <Hash[m]> Yea, it‚Äôs definitely an issue, I can see some bursts are shorter than they should be likely because something‚Äôs getting clogged somewhere
[05:43:53] <Hash[m]> Good news is I can easily pad using the preamble to fit to a desired length
[05:47:02] <Jacob[m]12> there can be other places data can get clogged up but this is a simple way to fix a low hanging issue
[06:00:27] <muaddib[m]> Hash: are you fully stopping your transmitter flowgraph? I‚Äôve had issues with not stopping it completely and that makes the first run of testing have no U‚Äôs then the next run has a bunch. 
[06:00:27] <muaddib[m]> I had to do tx.stop() tx.wait() depending on how you‚Äôre handling the flowgraph this might help. 
[06:01:35] <Hash[m]> no, I don't do anything to start or stop the transmitter, the bursts arrive and it transmits. How do you do that?
[06:02:09] <muaddib[m]> Nvm. I‚Äôm doing this right now and it didn‚Äôt fix it! lol
[06:02:16] <muaddib[m]> Typed too soon!
[06:02:42] <Hash[m]> Jacob: I just tried changing packet length to 510,511,512 and still no change other than the U's start as even values and then increase up to about 40ish cycling around 37 to 43
[06:03:27] <Jacob[m]12> i don't actually know how many symbols are in a transfer
[06:03:33] <Jacob[m]12> that was sort of a guess...
[06:04:14] <Jacob[m]12> you do not want to actually stop your flowgraph, the end goal here is to run the receiver constantly and only tx when you need to
[06:05:55] <Hash[m]> So you'd expect to see one U per burst regardless of how far off your symbols are from what it's expecting? It's just reporting a sungle Underflow for that burst?
[06:06:14] <Hash[m]> s/sungle/single/
[06:06:45] <Jacob[m]12> im not sure tat the number of "U"s is particularly meaningful...
[06:06:52] <Jacob[m]12> s/im/i'm/, s/tat/that/
[06:07:33] <Jacob[m]12> transmitted burst length is very important though, probably will be obvious
[06:11:02] <muaddib[m]> ok, i just fixed my issue which is also dealing with transmitting over ZMQ
[06:11:02] <muaddib[m]> on this page under "Latency and Throughput"
[06:11:02] <muaddib[m]> https://wiki.gnuradio.org/index.php/Handling_Flowgraphs
[06:11:02] <muaddib[m]> try setting the maximum number of output items
[06:12:28] *** Quits: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[06:21:35] <Hash[m]> what did you set it to? Your packet size?
[06:25:30] <muaddib[m]> had to play with it a bit. remember, its not packet or sample size its just number of items its pushing through the graph. it's more scheduler related
[06:26:29] <muaddib[m]> this may be a hack as far as toying with the number, but i THINK it fixed my issue. 
[06:26:29] <muaddib[m]> you're basically just hardcoding the max number of items it processes as a "cannot exceed"
[06:29:32] <muaddib[m]> i've played around a bit with manipulating the scheduler to benchmark blocks and improve performance but the real experts on this are bastibl funkylab and Josh Morman 
[06:30:57] <Hash[m]> Got it, my issue seems to appear when I introduced the Polyphase Synthesizer
[06:31:14] <Hash[m]> s/Got it, my issue seems to appear when I introduced the Polyphase Synthesizer/Got it, my issue seems to have appeared when I introduced the Polyphase Synthesizer/
[06:32:34] <Hash[m]> The flowgraph prior to that runs on a single channel with no Underflows at all, when I scaled up from 1 to 10 then I see the first Underflow appear per burst
[06:36:19] <drmpeg> Polyphase Synthesizer is a pretty processor intensive block.
[06:36:42] <drmpeg> You don't have unlimited CPU cycles.
[06:36:47] <Jacob[m]12> It's possible the PF synth is running too slowly
[06:37:04] <Jacob[m]12> You might want to start looking into using tx_time if you arent
[06:37:49] * Hash[m] uploaded an image: (148KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MHWcqHbNMpYScTgrofMjUwRK/image.png >
[06:37:56] <Jacob[m]12> This opens a whole new level of complexity as you must sync your transmit and receive flowgraph time concept but it'll be important down the line
[06:39:05] <Hash[m]> drmpeg: I thought the same thing on my more complex FG but it doesn't seem to be taxing it and very consistent on the single underflow per burst
[06:39:34] <Jacob[m]12> That plot is heavily averaged. 
[06:40:08] <Hash[m]> maybe have the block buffer before sending the data to USRP?
[06:43:30] <Hash[m]> <Jacob[m]12> "You might want to start looking..." <- Yea, you're right that this will come in handy in the future so perhaps taking a break and reading about this now is a good idea
[06:44:11] <Jacob[m]12> That would be my suggestion. 
[06:44:50] *** Quits: pcero (~pcero@187.135.226.181) (Ping timeout: 258 seconds)
[06:45:14] *** Joins: pcero (~pcero@187.135.226.136)
[06:45:52] <Hash[m]> <drmpeg> "Polyphase Synthesizer is a..." <- Reading this my assumption is the synthesizer processes and sends out some data to the USRP but can't send it fast enough to feed the USRP realtime. Is that what you're saying?
[06:46:50] <drmpeg> I thought you said you had many underflows when you scaled up.
[06:47:31] <drmpeg> to your hoped for number of channels.
[06:48:22] <Jacob[m]12> Hash[m]: This would be my guess as to what's going on. 
[06:48:33] <Hash[m]> Yea, but even on a very basic flowgraph with only one polyphase synth I get one underflow reported per burst. As I scale up I am assuming whatever causes the single one on the simple flowgraph is just multiplying
[06:48:33] <drmpeg> The single U may be just happening at the very start of the burst.
[06:50:28] <Jacob[m]12> Scheduling is complicated it's difficult to draw too many conclusions directly. Possible that the first block execution generates enough data to start the burst, second takes too long and then GR or the OS realizes the computational demand and compensates
[06:51:17] <drmpeg> There may be a remnant stuck mid-buffer from the last burst. When you start the next burst, the remnant gets accepted immediately from UHD and transmitted. But the start of the next packet arrives too late after the remnant.
[06:51:36] <drmpeg> Or something like that.
[06:51:38] <Jacob[m]12> Also very possible.
[06:51:54] *** Quits: pcero (~pcero@187.135.226.136) (Ping timeout: 265 seconds)
[06:52:20] <Jacob[m]12> Hash: you just need a metadata key `tx_time` that is a tuple or pair
[06:52:20] <Jacob[m]12> https://github.com/sandialabs/gr-pdu_utils/blob/master/lib/pdu_to_bursts_impl.cc#L215-L230
[06:52:20] <drmpeg> In my experience, UHD is pretty sensitive to underflowing.
[06:53:12] <Jacob[m]12> You should be able to infer the time of a received burst from the PDU metadata you already have. 
[06:53:58] <Jacob[m]12> IIRC there is a limit to how far you can schedule bursts in the future
[06:55:56] <Hash[m]> Right now, i'm not doing any receiving, just blindly transmitting once every 2 seconds
[06:56:45] <Hash[m]> trying to avoid a ton of complexity
[06:56:55] <Hash[m]> until I get the transmitter working properly
[07:02:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:33:54] <Hash[m]> drmpeg: Have you used a bladerf to transmit at all? I got a new one and was playing with it but when I drop it in place of a USRP to transmit it just seems to send energy at 0Hz and nowhere else
[07:35:23] <drmpeg> I have a bladeRF 1.0
[07:36:30] <Hash[m]> Anything unique about using it to transmit?
[07:37:25] <drmpeg> I've never been able to get the latest firmware to run. It's still on some old release.
[07:37:44] <drmpeg> Do you have a 1.0 or 2.0?
[07:40:33] <Hash[m]> Micro A9
[07:41:06] <Hash[m]> 2.0
[07:41:27] <Hash[m]> Very weird, looks like the burst is right where you would see the DC spike
[07:41:31] <Hash[m]> on receive
[07:46:06] <muaddib[m]> <drmpeg> "Or something like that." <- i think that's about as exact as i was able to get :D
[07:47:32] <drmpeg> Yeah, that's the 2.0. Rob from Nuand gave me a prototype, but it doesn't work with the production software. So no real experience with it except some early testing we did back in 2018.
[07:59:53] <Hash[m]> my guess is sample rate or bandwidth or something is pissing it off and it's just failing weird
[08:10:07] <drmpeg> muaddib: I watched Dune the other night. I very much liked it. But the real question is: Will there be a part two?
[08:11:52] <matt_mills[m]> I watched like an hour ago, IMO they should have taken advantage of the switch to a streaming release and released it as a 6-10 hr movie
[08:14:58] <drmpeg> Not a bad idea. But it was filmed before the pandemic, so they couldn't know.
[08:15:05] *** Quits: koma (~koma@user/koma) (Quit: Arc)
[08:18:10] *** Joins: koma (~koma@user/koma)
[08:20:11] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[08:21:40] <muaddib[m]> drmpeg: thanks for asking! I haven‚Äôt gotten a free couple hours yet, but it‚Äôs first on my list of fun stuff to do. Why is there a question about part 2? I thought they were taking the LOTR approach. No?
[08:21:57] <matt_mills[m]> it apparently hasn't been green lit yet
[08:22:08] <matt_mills[m]> although I can't imagine them not doing it, that'd be fantastically silly
[08:22:11] <muaddib[m]> matt_mills[m]: Oh wow
[08:23:27] <muaddib[m]> matt_mills[m]: Stranger things have happened, but I‚Äôll see the one that‚Äôs out now regardless. Wife and I were planning on seeing it opening weekend but they pushed the dates a few times, so we saw venom instead. 
[08:24:15] <muaddib[m]> drmpeg: what were your initial thoughts on it?
[08:25:28] *** Joins: Vonter (~Vonter@user/vonter)
[08:25:39] <drmpeg> I liked it a lot. But I'm not a good critic. I like pretty much all movies. I've never walked out on a movie.
[08:26:55] <drmpeg> It was certainly better than the 1984 version.
[08:28:04] <matt_mills[m]> lol I watched the 1984 version a few months ago... I didn't think it was bad, just weird, very weird... and you needed a glossary
[08:28:16] <patchvonbraun[m]> I nearly walked out of Smowpiercer.
[08:29:11] <patchvonbraun[m]> I saw the David Lynch version back in the day. It was weird.
[08:29:14] <muaddib[m]> matt_mills[m]: The 1984 one is a favorite of mine. Quite over the top but you can‚Äôt go wrong casting sting and Patrick Stewart in the same movie. 
[08:30:11] <drmpeg> I should watch it again.
[08:30:24] *** Quits: maj[m] (~majgnurad@2001:470:69fc:105::e171) (*.net *.split)
[08:30:24] *** Quits: muaddib[m] (~muaddibgn@2001:470:69fc:105::fd1f) (*.net *.split)
[08:30:24] *** Quits: cmhower[m] (~cmhowergn@2001:470:69fc:105::fce3) (*.net *.split)
[08:30:24] *** Quits: brayan_w[m] (~brayanwgn@2001:470:69fc:105::e755) (*.net *.split)
[08:30:24] *** Quits: twilliam[m] (~twilliamg@2001:470:69fc:105::ec5b) (*.net *.split)
[08:30:24] *** Quits: FelixTRG[m] (~felixtrga@2001:470:69fc:105::ea26) (*.net *.split)
[08:30:24] *** Quits: ChuckAE4CT[m] (~ae4ctgnur@2001:470:69fc:105::e6f4) (*.net *.split)
[08:30:24] *** Quits: mcmang[m] (~mcmanggnu@2001:470:69fc:105::1:88c) (*.net *.split)
[08:30:24] *** Quits: laurenzw[m] (~laurenzwg@2001:470:69fc:105::1:826) (*.net *.split)
[08:30:24] *** Quits: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d) (*.net *.split)
[08:30:24] *** Quits: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927) (*.net *.split)
[08:30:24] *** Quits: DanBryant[m] (~dictamatr@2001:470:69fc:105::1:37f) (*.net *.split)
[08:30:25] *** Quits: chibill[m] (~chibillm]@2001:470:69fc:105::5ce) (*.net *.split)
[08:30:25] *** Quits: schneiderweb[m] (~sasragr@2001:470:69fc:105::253) (*.net *.split)
[08:30:25] *** Quits: Jacob[m] (~jholtomgr@2001:470:69fc:105::1df) (*.net *.split)
[08:30:25] *** Quits: prime (~prime@user/prime) (*.net *.split)
[08:30:25] *** Quits: sdfgsdfg (sdfgsdfg@user/sdfgsdfg) (*.net *.split)
[08:30:25] *** Quits: greenriot (~greenriot@user/gr33nr10t) (*.net *.split)
[08:30:25] *** Quits: StoneTable (~stone@pylon.battleaxe.net) (*.net *.split)
[08:30:25] *** Quits: murrayn (~murray@user/murrayn) (*.net *.split)
[08:31:04] *** Joins: aisrael (~stone@pylon.battleaxe.net)
[08:31:20] <drmpeg> I may be basing my opinion on what I thought in 1984.
[08:31:30] *** Joins: prime (~prime@user/prime)
[08:32:11] *** Joins: murrayn (~murray@static.38.4.181.135.clients.your-server.de)
[08:32:12] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[08:33:13] *** Joins: chibill[m] (~chibillm]@2001:470:69fc:105::5ce)
[08:34:41] *** Joins: sdfgsdfg (sdfgsdfg@user/sdfgsdfg)
[08:34:44] *** Joins: Jacob[m] (~jholtomgr@2001:470:69fc:105::1df)
[08:34:48] *** Joins: schneiderweb[m] (~sasragr@2001:470:69fc:105::253)
[08:38:19] *** Joins: BarryDuggan[m] (~kv4fvgnur@2001:470:69fc:105::3927)
[08:38:19] *** Joins: DanBryant[m] (~dictamatr@2001:470:69fc:105::1:37f)
[08:38:19] *** Joins: patchvonbraun[m] (~patchvonb@2001:470:69fc:105::e18d)
[08:38:22] *** Joins: ChuckAE4CT[m] (~ae4ctgnur@2001:470:69fc:105::e6f4)
[08:38:22] *** Joins: laurenzw[m] (~laurenzwg@2001:470:69fc:105::1:826)
[08:38:22] *** Joins: mcmang[m] (~mcmanggnu@2001:470:69fc:105::1:88c)
[08:38:23] *** Joins: cmhower[m] (~cmhowergn@2001:470:69fc:105::fce3)
[08:38:23] *** Joins: FelixTRG[m] (~felixtrga@2001:470:69fc:105::ea26)
[08:38:24] *** Joins: muaddib[m] (~muaddibgn@2001:470:69fc:105::fd1f)
[08:38:24] *** Joins: brayan_w[m] (~brayanwgn@2001:470:69fc:105::e755)
[08:38:24] *** Joins: maj[m] (~majgnurad@2001:470:69fc:105::e171)
[08:38:24] *** Joins: twilliam[m] (~twilliamg@2001:470:69fc:105::ec5b)
[08:50:38] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[09:12:33] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[09:13:41] *** Joins: Vonter (~Vonter@user/vonter)
[09:17:13] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[09:32:20] *** Quits: murrayn (~murray@static.38.4.181.135.clients.your-server.de) (Changing host)
[09:32:20] *** Joins: murrayn (~murray@user/murrayn)
[09:32:47] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[09:53:23] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[10:10:10] *** Joins: saba4ka-mumu (~efsearfc@176.59.55.31)
[10:29:11] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 244 seconds)
[10:34:53] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[10:35:11] *** Joins: rpdesouza (~rodrigo@dhcp-089-099-028-038.chello.nl)
[10:59:57] *** Joins: Vonter (~Vonter@user/vonter)
[11:16:14] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 260 seconds)
[11:16:29] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[11:20:08] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[11:30:05] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[11:49:09] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:56:26] <danidubok777[m]> I‚Äôm using random source in grc, and when changing the maximum byte the flow graph stack and won‚Äôt work, only using the default value (2) works. Anyone had this problem?
[11:56:32] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Quit: I quit)
[12:30:09] *** Quits: AaronRossetto[NI (~atrnatima@2001:470:69fc:105::e728) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: josejauregui[m] (~josejaure@2001:470:69fc:105::fd19) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: doug[m] (~douggnura@2001:470:69fc:105::fe27) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: glennl[m] (~glennlgnu@2001:470:69fc:105::fe4a) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: kpaulsen[m] (~kpaulseng@2001:470:69fc:105::1:e4) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: miaoski (~miaoski@2001-b011-0001-297f-5de6-74b5-553d-6931.dynamic-ip6.hinet.net) (Quit: WeeChat 2.8)
[12:30:11] *** Quits: cmhower[m] (~cmhowergn@2001:470:69fc:105::fce3) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: twilliam[m] (~twilliamg@2001:470:69fc:105::ec5b) (Quit: You have been kicked for being idle)
[12:32:55] *** Quits: saba4ka-mumu (~efsearfc@176.59.55.31) (Ping timeout: 260 seconds)
[12:41:20] *** Joins: saba4ka-mumu (~efsearfc@176.59.55.31)
[12:48:38] *** Quits: rpdesouza (~rodrigo@dhcp-089-099-028-038.chello.nl) (Quit: Leaving)
[12:48:51] *** Joins: rpdesouza (~rodrigo@dhcp-089-099-028-038.chello.nl)
[12:54:12] *** Quits: rpdesouza (~rodrigo@dhcp-089-099-028-038.chello.nl) (Quit: Leaving)
[12:56:08] *** Joins: miaoski (~miaoski@2001-b011-0001-8ea5-3cec-da56-ec9c-3732.dynamic-ip6.hinet.net)
[13:47:04] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 244 seconds)
[14:04:59] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[14:12:35] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[14:39:38] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Remote host closed the connection)
[14:39:52] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:58a3:e32f:1cf4:bd1f)
[14:49:36] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[15:03:38] *** Joins: Vonter (~Vonter@user/vonter)
[15:08:01] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 245 seconds)
[15:08:41] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[15:39:08] *** Joins: ryu` (~ryu`@67.165.91.34.bc.googleusercontent.com)
[15:41:23] *** Quits: ryu` (~ryu`@67.165.91.34.bc.googleusercontent.com) (Remote host closed the connection)
[15:41:27] *** Quits: saba4ka-mumu (~efsearfc@176.59.55.31) (Ping timeout: 260 seconds)
[15:47:35] *** Joins: ryu` (~ryu`@67.165.91.34.bc.googleusercontent.com)
[16:03:36] *** Joins: electrolytic (~electroly@gateway/tor-sasl/electrolytic)
[16:30:01] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Remote host closed the connection)
[16:39:43] *** Joins: electrolytic (~electroly@gateway/tor-sasl/electrolytic)
[17:13:02] *** Joins: pomeroy3[m] (~pomeroy3g@2001:470:69fc:105::1:230f)
[17:27:42] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 260 seconds)
[17:28:51] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[17:32:03] <mwk088[m]> Derek Kozel: Per your suggestion I took a look at importing the python version of my module (import wifi_python) and I get this error each time (after detangling it) undefined symbol:  typeinfo for gr::eventstream::es_handler 
[17:32:54] <mwk088[m]> Do I need to link the eventstream.es_handler module to wifi via 'pybind11_add_module'? In my CMakeLists file?
[17:36:32] <nki> Hi everyone! does anyone know whether there is a wiki page to get started with USRP devices?
[17:38:57] *** Joins: helinox[m] (~helinoxgn@2001:470:69fc:105::ea67)
[17:38:58] <helinox[m]> nki: The ettus Wiki would be a good place to start - 
[17:38:58] <helinox[m]> https://kb.ettus.com/Knowledge_Base
[17:44:02] <willcode4[m]> v3.9.4.0-rc1 is now available. There were a couple regressions in v3.9.3.0, we've got a couple of good new features/fixes, and it raining outside, so this release comes earlier than expected. Please give it a try if you're so inclined. This will become v3.9.4.0 in about a week if no issues are found. The maint-3.9 branch is frozen until then.
[17:46:08] <helinox[m]> Hey All, what replaced "pmt::pmt_t msg(delete_head_blocking(pmt::mp("in"), MSG_WAIT_TIME));" calls with GnuRadio 3.9 since that functionality was deprecated. In previous versions of GnuRadio that function was utilized to slow down the general_work function from being called for blocks with message inputs and stream outputs that only wanted to return items on a handler function call. With 3.9 I cant figure out what is throttling general_work
[17:46:08] <helinox[m]> as it does not seems like it's being called as fast as the CPU can process (like previous version). Things still work without the blocking call in 3.9 but I'm worried there is inducted latency that may impact tx_time specific applications. Hope that made sense, pretty niche question. 
[17:47:00] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Remote host closed the connection)
[17:51:56] <willcode4[m]> There is some logic in the scheduler that blocks for 250ms if a block has no inputs and does not produce any output on a general_work call.
[17:51:57] <helinox[m]> What I want to do is similar to the PDU to tagged stream. https://github.com/gnuradio/gnuradio/blob/master/gr-pdu/lib/pdu_to_tagged_stream_impl.cc - Looks like delete_head_blocking was changed to delete_head_nowait so i may try and play around with
[17:52:38] <helinox[m]> willcode4:  do messages count as input? So if a handler function was called it will trigger general_work?
[17:53:43] <willcode4[m]> Don't think so.
[17:54:30] <willcode4[m]> Messages and streaming are pretty much independent.
[17:55:04] <helinox[m]> Unless you want messages to trigger output less than 250 ms
[17:55:30] <helinox[m]> general_work output*
[17:55:50] <willcode4[m]> Let me take a look.
[17:58:07] <helinox[m]> so with pdu_to_tagged_stream the nowait call is in the impl.cc file in the calculate_output_stream_length function, but nothing calls calculate_output_stream_length, is that something defined by the gr::block class and utilized by the scheduler?
[18:00:53] <willcode4[m]> I gave up in the middle of the block notification chain ... not sure whether it's possible to unstick a block based on message input.
[18:02:24] *** Quits: electrolytic (~electroly@gateway/tor-sasl/electrolytic) (Ping timeout: 276 seconds)
[18:04:47] <helinox[m]> I'm going to try changing my block type from a general block to a tagged_stream_block since it where calculate_output_stream_length is defined in the base class and just hope the schedule calls general_work when that function returns anything greater than 0. Iit also looks like pdu_to_tagged stream uses no_wait inside of that function in lieu of a traditional boost handler thread like i've always done it in past
[18:06:14] <helinox[m]> I wish I new the scheduler code better to see what that functions return is utilized 
[18:13:51] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:58a3:e32f:1cf4:bd1f) (Quit: uros)
[18:14:00] *** Joins: uros1 (~Thunderbi@bl5-152-18.dsl.telepac.pt)
[18:16:21] *** uros1 is now known as uros
[18:33:18] *** Joins: Guest2696 (~Guest26@2601:5c0:c280:8da0:5914:41c8:eaad:da6)
[18:33:52] <Guest2696> Can anyone please share an example, on how to use "set_output_multiple". 
[18:35:06] <willcode4[m]> `set_output_multiple(4)` üòÄ What would you like to know about it?
[18:36:11] <willcode4[m]> https://wiki.gnuradio.org/index.php/Guided_Tutorial_GNU_Radio_in_C%2B%2B#set_output_multiple.28.29
[18:37:29] <drmpeg> Here's a code example. https://github.com/gnuradio/gnuradio/blob/master/gr-dtv/lib/dvb/dvb_bch_bb_impl.cc#L381
[18:38:24] <drmpeg> The block is really an interpolator, but implemented in a general block.
[18:39:29] <drmpeg> Note how the work loop is implemented. https://github.com/gnuradio/gnuradio/blob/master/gr-dtv/lib/dvb/dvb_bch_bb_impl.cc#L593
[18:40:02] <drmpeg> Just some tricks that I like to use.
[18:41:56] <drmpeg> The forecast is important too. https://github.com/gnuradio/gnuradio/blob/master/gr-dtv/lib/dvb/dvb_bch_bb_impl.cc#L391
[18:44:42] *** Quits: balrog (znc@user/balrog) (Quit: Bye)
[18:49:41] *** Joins: balrog (znc@user/balrog)
[19:01:48] <Guest2696> So, I am running an .grc block. under OFDM Carrier allocator block, I am setting a list of 14 occupied carriers and 1 sync word, so total of 15 lists. each list of 512 point. Output of this is given to an FFT block of 512 points. I need these values for further computataion. I am storing these values in a vector sink. So, I am assuming, data will
[19:01:48] <Guest2696> be stored in vector sink, in each iteration, i.e for first time, it will be 512 point FFT and in the second it will be 1st occupied carrier of 512 point FFT and till 14th occupied carrier. 
[19:02:14] <Guest2696> funkylab[m]suggested to use set_output_multiple(15)
[19:02:53] <Guest2696> so, i am looking how to apply this and where to edit set_output_multiple? 
[19:03:47] <drmpeg> Oh, it only applies to writing your own block.
[19:04:07] <Guest2696> So for my .grc flowgraph, it does generate its own .py file. But, it looks like i need to edit set_output_multiple in some .cpp file
[19:04:59] <drmpeg> You're just trying to feed the OFDM block with data right?
[19:06:28] <Guest2696> I have already set the variables for OFDM block.  flow is  symbols-> OFDM Carrier Allocator -> FFT -> Vector sink. 
[19:06:53] <drmpeg> And what's the problem?
[19:07:56] <Guest2696> i am writing another python file, where i need to extract the values from vector sink and do further computation on these values.  
[19:08:49] <drmpeg> A Python block, or processing it offline?
[19:08:57] <Guest2696> 1st). I am not seeing any values from the vector_sink in new python file, that i am writing.  
[19:09:05] <Guest2696> Its an offline processing. 
[19:09:15] <drmpeg> ok
[19:09:49] <drmpeg> The file is zero length?
[19:10:45] <Guest2696> Some suggested to use python block, i guess this is where set_output_multiple comes into picture. So, If I am writing python block, then only i need to use set_output_multiple within this python block, is it? 
[19:11:05] <drmpeg> Yes.
[19:11:33] <Guest2696> So i did a test case, i generated data with a source and received at vector sink and observe the output. 
[19:11:47] <Guest2696> But with OFDM block, i am not seeing any output. 
[19:12:23] <drmpeg> The vector source is in repeat mode?
[19:13:02] <Guest2696> and pycharm is also throwing some weird error, Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)
[19:13:46] <Guest2696> i did solutions from stack overflow, none seems to fix this error. And I am getting this error only for OFDM block. 
[19:15:16] <Guest2696> Yeah, so for OFDM block, Repeat option yes or no is not mattering. It just throws " Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)" 
[19:16:02] <drmpeg> That's message is from your offline processing?
[19:16:09] <Guest2696> yes
[19:16:36] <drmpeg> You have a bug in your code.
[19:16:53] <Guest2696> I still havent written python block. I got confused with how to use set_output_multiple
[19:17:43] <drmpeg> Why would you try to write a block if your current code doesn't work?
[19:17:53] <Hash[m]> drmpeg: Definitely fewer Underflows when I run the 60 channel synthesizer on a beefier machine. The underlying issue is still there but not as pronounced
[19:18:10] <Guest2696> I was thinking, if i cannot use vector sink, then proceed with creating python block and this is where i need to do set_output_multiple(15), i guess? 
[19:18:40] <drmpeg> No. You need to debug your offline processing.
[19:19:37] <Guest2696> two options i thought. 1) use vector sink   or 2) create python block, if vector sink is not going to work. 
[19:20:25] <drmpeg> Do you get a file of expected length from the vector sink?
[19:20:42] <Guest2696> Vector sink is not necessary in OFDM block, i am just using it store data and then do offline processing. If this is not gonna work, go with creating python block. 
[19:21:09] <Guest2696> for i in range(1):
[19:21:10] <Guest2696>     tb = top_block_cls()
[19:21:10] <Guest2696>     tb.start()
[19:21:11] <Guest2696>     tb.wait()
[19:21:11] <Guest2696>     data1 = np.array(tb.blocks_vector_sink_x_0.data())
[19:21:12] <Guest2696>     #print(data1)
[19:21:12] <Guest2696>     RB1_Data = np.append(RB1_Data, data1)
[19:21:13] <Guest2696>     tb.stop()
[19:21:13] <Guest2696> print(RB1_Data)
[19:21:44] <Guest2696> this is all I am doing, at the moment to extract data from vector_sink block. 
[19:22:31] <drmpeg> Sorry, I don't even know what the vector sink does.
[19:22:40] <Guest2696> Once i get the values, manipulate these for my computation. 
[19:23:18] <Guest2696> my understanding is it stores data, is like a memory place
[19:23:43] <drmpeg> It looks useless to me.
[19:24:15] <Guest2696> any source please on how to use set_output_multiple  in custom python block? 
[19:25:23] <drmpeg> If you're offline processing, just write to a file with the file sink.
[19:30:07] *** Quits: Po84210 (~po84210qo@2001:470:69fc:105::ce0a) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: phowbeau[m] (~phowbeaug@2001:470:69fc:105::1:153) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: WilliamH[m] (~william99@2001:470:69fc:105::ff32) (Quit: You have been kicked for being idle)
[19:31:39] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[19:34:15] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:43:31] <Guest2696> it write anything in file sink
[19:44:16] <Guest2696> vector_source -> throttle -> stream to vector -> FFT -> File_sink 
[19:44:43] <Guest2696> i dont see anything getting written in the .txt file location of File sink.  
[19:44:57] <Guest2696> vector_source -> throttle -> stream to vector -> FFT -> Vector_sink 
[19:45:09] <Guest2696> i am able to see data in the vector_sink though 
[19:52:24] *** Joins: Guest21 (~Guest21@152.96.24.51)
[19:52:50] *** Quits: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt) (Ping timeout: 260 seconds)
[19:52:58] <drmpeg> It seems like you're trying to do something very simple, but making it extremely complex.
[19:55:52] <Guest2696>  i just tested with file sink, to see how it behaves, per your suggestion. Maybe its simple process, i might be getting confused. looking for proper instructions
[20:06:01] *** Joins: pcero (~pcero@187.135.226.136)
[20:06:03] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 260 seconds)
[20:22:42] *** Quits: Guest21 (~Guest21@152.96.24.51) (Quit: Client closed)
[20:23:50] *** Quits: Guest2696 (~Guest26@2601:5c0:c280:8da0:5914:41c8:eaad:da6) (Quit: Client closed)
[20:24:03] *** Joins: Guest91 (~Guest91@152.96.24.51)
[20:30:00] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:34:09] *** Quits: Guest91 (~Guest91@152.96.24.51) (Quit: Client closed)
[20:43:42] *** Joins: Guest2635 (~Guest26@2601:5c0:c280:8da0:5914:41c8:eaad:da6)
[20:44:08] *** Joins: Guest2650 (~Guest26@2601:5c0:c280:8da0:7449:260c:3985:113b)
[20:48:05] *** Quits: Guest2635 (~Guest26@2601:5c0:c280:8da0:5914:41c8:eaad:da6) (Ping timeout: 256 seconds)
[21:20:15] *** Quits: pcero (~pcero@187.135.226.136) (Ping timeout: 260 seconds)
[21:32:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:04:07] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Ping timeout: 260 seconds)
[22:08:09] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[22:08:33] *** Quits: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com) (Client Quit)
[22:09:01] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[22:14:57] *** Joins: cparker (~cparker@c-76-127-239-113.hsd1.ma.comcast.net)
[22:18:11] *** Joins: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt)
[22:22:43] *** Quits: cparker (~cparker@c-76-127-239-113.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[22:37:02] *** Joins: uros1 (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[22:38:43] *** Quits: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt) (Ping timeout: 244 seconds)
[22:38:43] *** uros1 is now known as uros
[22:45:20] *** Joins: cparker (~cparker@c-76-127-239-113.hsd1.ma.comcast.net)
[22:52:06] *** Quits: Guest2650 (~Guest26@2601:5c0:c280:8da0:7449:260c:3985:113b) (Quit: Ping timeout (120 seconds))
[22:59:19] <patchvonbraun[m]> @Guest2696:libera.chat: file sink is NOT an ascii formatted. Also it by default uses buffered I/O so if your rates are slow it‚Äôll take a while to see anything show up in the file.
[23:25:47] *** Quits: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com) (Ping timeout: 260 seconds)
[23:29:20] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[23:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[23:47:33] <nickoe> Is there some doc on what the labels on issues and pull requests mean?
[23:50:41] <nickoe> isss mormj here?
[23:52:51] *** Quits: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com) (Ping timeout: 260 seconds)
[23:53:02] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[23:56:25] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[23:58:47] *** Joins: saba4ka-mumu (~efsearfc@94.25.169.43)
