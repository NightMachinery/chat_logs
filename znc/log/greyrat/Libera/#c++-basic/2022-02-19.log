[00:02:01] <teut> oops had  done " '
[00:02:17] <teut> thanks , it works
[00:03:12] <Alipha> okay, so, right now, what you have is both an interface and an implementation. it's describing what operations can be performed (the interface) and how those operations are implemented (the implementation)
[00:03:30] <teut> no, I don't have the interface
[00:03:47] <teut> I want to first complete the producer consumer model
[00:03:57] <teut> then I will do it the right way
[00:23:44] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:35de:ef41:b031:b2ea)
[00:23:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:35de:ef41:b031:b2ea) (Changing host)
[00:23:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:27:48] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[00:30:16] *** Quits: magla (~gelignite@55d44f7e.access.ecotel.net) (Quit: Stay safe!)
[00:51:30] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[00:51:46] *** Joins: noarb- (~noarb@user/noarb)
[00:52:19] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[00:59:29] *** Joins: noarb (~noarb@user/noarb)
[01:00:52] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 272 seconds)
[01:02:06] <teut> Alipha , the main function also get copied by the include directive, how to avoid it?
[01:02:56] <teut> how do you only import the classes  Scheduler and ScheduledTask ?
[01:07:09] *** Joins: markong (~kvirc@213.146.188.203)
[01:09:43] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Quit: Leaving)
[01:10:20] *** ik is now known as kleiner
[01:10:25] *** kleiner is now known as ik
[01:16:34] <Alipha> teut: you put Scheduler and SchedulerTask in a header file :-p
[01:17:04] <teut> '=D  correct, I should have listened to you
[01:37:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:58:36] <teut>  is this a header file? https://dpaste.org/90dA
[02:00:32] <Alipha> teut: typically you have include guards (or #pragma once), and you need to put `extern Scheduler scheduler;` in the header and put `Scheduler scheduler;` in your cpp
[02:01:48] <teut> ya extern, this is often asked in interviews
[02:02:03] <teut> I have read it but it does not makes much sense
[02:03:23] <teut> https://docs.microsoft.com/en-us/cpp/cpp/header-files-cpp?view=msvc-170 ok I got this article
[02:04:04] <teut> do I need a namespace?
[02:04:13] <Alipha> no
[02:04:27] <Alipha> if foo.cpp and bar.cpp both #include "scheduler.hpp" and scheduler.hpp contains `Scheduler scheduler;`, then the scheduler object is created in both foo.obj and bar.obj because `Scheduler scheduler;` is a definition. Then when foo.obj and bar.obj get linked together, they both contain a definition for the scheduler object and you get a "multiple definitions" error.
[02:05:21] <Alipha> so instead, you put `extern Scheduler scheduler;` so that it is only declared that scheduler exists somewhere so that foo.cpp and bar.cpp both know about its existance, and then put `Scheduler scheduler;` in one .cpp file so that the scheduler object is actually created
[02:05:36] <Alipha> (`extern Scheduler scheduler;` is a declaration)
[02:05:54] <teut> yes  this happened >> you get a "multiple definitions" error.
[02:07:07] <Alipha> alternatively, with c++17, you can put `inline Scheduler scheduler;` in the header and nothing in the cpp. here, inline is saying "i am defining/creating the scheduler object, but if during linking, you find multiple definitions for the scheduler object, just pick one and discard the rest"
[02:08:08] <teut> inline also meant that you copy paste the code where there is a function call, what was that then?
[02:08:15] <teut> the compiler*
[02:08:50] <teut> but ok, I will use extern for now
[02:10:01] <teut> https://github.com/Teut2711/Scheduler
[02:10:36] <teut> let me push, just a min
[02:11:49] <teut> yes, I ve updated it now
[02:11:58] <teut> can you now tell how to correct it?
[02:14:10] <teut> and the lambda, that does not has an interface
[02:19:10] <Alipha> oh, cmp also needs to be extern
[02:19:13] <Alipha> erhm
[02:19:28] <Alipha> just make cmp inline ;-)
[02:20:03] <Alipha> `inline auto cmp = ...`
[02:20:54] <Alipha> and... looking at scheduler.cpp, that's not how you provide function definitions for Scheduler's members
[02:21:19] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Quit: ZNC 1.8.2 - https://znc.in)
[02:21:47] <teut> you mean passing the lambda?
[02:22:37] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[02:22:53] <teut> did you make a pull request?
[02:23:04] <Alipha> no
[02:23:17] <teut> weird , there is one
[02:23:31] <teut> there is nothing under pull requests
[02:23:46] <Alipha> and your scheduler.hpp file was there, but now it's gone
[02:23:58] <teut> https://ibb.co/YbwD1nv
[02:24:08] <teut> I moved it to separate branch
[02:24:36] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[02:34:57] <Alipha> teut: https://wandbox.org/permlink/4C04fZuCbC0NRASl
[02:40:10] <teut> oh you defined the whole header file code as  SCHEDULAR_HPP
[02:40:12] <teut> E*
[02:46:01] *** Joins: ferdna (~ferdna@user/ferdna)
[02:48:24] <teut>   Scheduler() : sleeping(cmp) {}
[02:48:25] <teut>   isnt this the implementation?
[02:48:43] <teut> because its in the header
[02:49:57] <Alipha> it is the implementation of the Scheduler() constructor, yes. and since it's defined inside the class definition, it's implicitly inline. any functions (or constructors) implemented inside a class definition are implicitly inline
[02:50:36] *** Quits: jsbach (~jsbach@2a01:c22:349e:1800:2c43:5ba2:d3cf:5429) (Ping timeout: 252 seconds)
[02:53:48] <teut> I need to read on this inlining thing  a lot
[02:54:18] <teut> thanks for helping me out Alipha . Now I can write header files , atleast a few
[02:55:27] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:59:17] <teut> is Task encapsulated?
[02:59:51] <teut> if someone asks me what part is encapsulated and what is abstracted what can I tell them?
[03:11:20] *** Joins: gehn1 (~gehn@user/gehn)
[03:14:07] *** Quits: gehn1 (~gehn@user/gehn) (Client Quit)
[03:14:30] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 272 seconds)
[03:17:11] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[03:22:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:28:18] *** Quits: DSpider (~DSpider@82.79.237.62) (Quit: Leaving)
[03:42:22] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:56:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:13:24] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[04:32:32] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:6dd8:7cde:f63:8efb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:02:30] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[05:40:47] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6)
[05:50:38] *** Joins: noarb- (~noarb@user/noarb)
[05:50:57] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 272 seconds)
[08:13:53] <undeclared> hey, I'm barely using smart pointers, should I be using them everywhere?
[08:14:19] <undeclared> or is it something that's a case by case.. when it makes sense kind of thing
[08:37:38] <Alipha> undeclared: if you are using `delete`, you should use smart pointers instead (namely std::unique_ptr). if you're using `delete[]`, you should use containers such as std::vector instead.
[08:37:39] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:58:48] *** Quits: AmR (~AmREiSa@156.199.14.65) (Quit: Konversation terminated!)
[09:16:37] <undeclared> Alipha: I usually use qt ->deleteLater() lol
[09:17:40] <undeclared> but I am using delete
[09:17:57] <undeclared> std::unique_ptr instead, or I guess the Qt equivalent in my case
[09:17:59] <undeclared> ok perfect, thank you
[09:18:07] <undeclared> well, depending on the object
[09:21:04] <Alipha> undeclared: qt is designed to use a lot of pointers, but they have their own mechanism for cleaning up memory, so it's normal to use pointers with qt. But everything else, you should consider smart pointers... or just objects
[09:22:35] <Alipha> And raw pointers are fine if you're just using them to access another object whose lifetime is managed by something else
[10:05:48] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[10:08:07] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[10:36:21] <undeclared> yeah that's where I was worried about using it
[10:36:24] <undeclared> if it would work properly
[10:42:10] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:667f)
[11:17:09] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 252 seconds)
[11:20:08] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[11:24:41] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:3172:f058:960c:b5ef:b751) (Remote host closed the connection)
[11:25:16] *** Joins: p-i- (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th)
[13:01:47] *** Joins: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60)
[13:04:08] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:37:02] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:57:27] *** Joins: Firecatmon (~firecatmo@pa49-186-30-228.pa.vic.optusnet.com.au)
[14:31:47] *** Quits: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60) (Ping timeout: 256 seconds)
[14:50:59] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[15:11:59] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:26:30] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:40:49] *** Joins: markong (~kvirc@213.146.188.203)
[15:43:56] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[16:02:14] *** Joins: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60)
[16:33:41] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[16:44:18] *** Quits: Firecatmon (~firecatmo@pa49-186-30-228.pa.vic.optusnet.com.au) (Remote host closed the connection)
[16:44:31] *** Quits: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60) (Ping timeout: 245 seconds)
[17:16:37] *** Joins: NovumDXW (~NovumDXW@2409:8a28:361c:d160:6499:aaab:329a:e347)
[17:25:43] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:9dee:76d0:4ba1:3c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:27:54] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th)
[17:31:39] *** Quits: p-i- (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[18:08:29] *** Joins: teut (~teut@122.161.83.81)
[18:10:40] <teut> https://dpaste.org/R6J5    https://github.com/Teut2711/Scheduler/tree/development
[18:11:12] <teut> Alipha , after running main.cpp I got error of undfined
[18:11:36] <teut> same thing which you help hours back
[18:11:41] <teut> helped*
[18:15:12] <teut> https://wandbox.org/permlink/4C04fZuCbC0NRASl
[18:15:20] <teut> the link you shared
[18:17:40] <teut> Scheduler scheduler;  <--  and   what's the purpose of writing this in the header file?
[18:21:10] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae) (Ping timeout: 250 seconds)
[18:26:31] *** Quits: NovumDXW (~NovumDXW@2409:8a28:361c:d160:6499:aaab:329a:e347) (Read error: Connection reset by peer)
[18:27:05] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:27:11] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[18:27:31] *** Joins: AmR (~AmREiSa@156.199.14.65)
[18:31:59] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:1c7d:c11b:e4be:7014)
[18:33:00] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[18:34:34] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[18:34:59] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:44:30] <Alipha> teut: `extern Scheduler scheduler:` is in the header to tell main.cpp that a scheduler object exists somewhere. Then `Scheduler scheduler;` is supposed to be in scheduler.cpp to actually create the scheduler object. You're missing that from scheduler.cpp
[18:45:47] <Alipha> Though since you're getting those other undefined reference errors too, it looks like you also aren't compiling both scheduler.cpp and main.cpp and linking them together. It looks like you're only compiling main.cpp
[18:56:50] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[18:57:06] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[19:04:09] <teut> oh so the `g++` command takes multiple arguments you mean
[19:04:17] <teut> ?
[19:05:18] <teut> and regarding `Scheduler scheduler;`  , In some other file like main, I want to give the instance another name
[19:05:30] <teut> I don't want to name the instance scheduler
[19:07:24] <teut> https://ibb.co/w6Cx74J
[19:07:42] <teut> this header file thing brings lots of new info in a short span of time
[19:08:45] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th) (Remote host closed the connection)
[19:09:21] *** Joins: p-i- (~Ohmu@183.89.29.122)
[19:12:29] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:12:33] <teut> https://ibb.co/xHSgcx3
[19:15:48] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:25:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Ping timeout: 252 seconds)
[19:25:51] <Alipha> teut: I mean, you actually have to spell scheduler.cpp correctly
[19:26:48] <Alipha> If you want different files to have different names for the variable, does that mean you actually want different Scheduler objects?
[19:27:07] <teut> yes, since Scheduler is a class
[19:27:55] <teut> in python you just do    from  .module_name import  ClassName
[19:28:50] <teut> extern afaik just globally declares the instance across   all cpp files
[19:30:15] <teut>  I have used `scheduler` spelling everywhere
[19:30:20] <Alipha> teut: right, so get rid of `extern Scheduler scheduler;` and just out `Scheduler scheduler;` in main.cpp
[19:30:29] <teut> yes , I did that
[19:30:36] <teut> now how to compile it?
[19:30:53] <teut> and  do I have to do compile header file or the cpp?
[19:30:55] <teut> or both?
[19:32:06] <Alipha> teut: in your first screenshot, your first error is: "fatal error: schedular.cpp: no such file or directory"
[19:32:16] <Alipha> You only compile cpp files
[19:32:31] <teut> let me do it again and share the image
[19:33:40] <teut> https://dpaste.org/2JEg
[19:36:12] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[19:38:25] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[19:41:26] <Alipha> teut: yeah, you put them on the same g++ command: g++ scheduler.cpp main.cpp
[19:41:55] <teut> oh right
[19:41:59] <teut> it compiled now
[19:42:39] <teut> thanks  again
[19:45:41] <Alipha> teut: preferably: g++ -std=c++17 -Wall -Wextra -pedantic scheduler.cpp main.cpp
[19:45:54] <teut> X)
[19:47:25] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:1c7d:c11b:e4be:7014) (Ping timeout: 256 seconds)
[19:48:02] <teut> https://ibb.co/w4SrqXF
[19:49:16] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:50:19] <Alipha> teut: those are just turning on warnings, warnings that are legitimate and should definitely be fixed in my experience
[19:50:23] <Alipha> https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
[19:50:41] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:51:13] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[19:51:36] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:52:12] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:53:07] <teut> https://dpaste.org/aMAd  right
[19:53:45] <teut> clang and cl.exe , are they different?
[19:54:44] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[19:54:48] <Alipha> cl.exe is the visual studio c++ compiler created by Microsoft
[19:55:27] <teut> and how do you run it?
[19:55:42] <teut> g++   / clang++ works
[19:55:57] <teut> but not  cl or cl++  or cl.exe++
[19:57:35] <Alipha> I don't think I've ever used cl.exe from the command line. I compile via the visual studio ide
[19:58:16] <teut> ya there that works
[19:59:35] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:01:09] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:4423:d57:eac1:cd32)
[20:01:39] <teut> g++ -std=c++17 -Wall -Wextra -pedantic main.cpp scheduler.cpp      , if I do this
[20:01:51] <teut> then main.cpp is compiled first , isnt it?
[20:03:14] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[20:04:45] <Alipha> Yes, though the order doesn't matter. Each file is compiled independently and does not affect the compilation of the other files. This is why you must create and #include header files, to inform one file about what another files contains.
[20:07:37] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:4423:d57:eac1:cd32) (Ping timeout: 240 seconds)
[20:16:07] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[20:21:13] *** Joins: toadt (~toadt@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[20:24:57] <teut> hmm, ok
[20:30:19] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[20:31:28] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:3172:f107:35d2:9019:655d)
[20:35:04] *** Quits: p-i- (~Ohmu@183.89.29.122) (Ping timeout: 272 seconds)
[20:35:32] <toadt> can i confirm the scope resolution :: and initialisation list :
[20:36:58] <Alipha> toadt: that's what those two are, yes
[20:37:11] <toadt> class Bar : public Foo{} is Bar is inheriting from Foo
[20:39:32] <toadt> ASErr Plugin::StartupPlugin( SPInterfaceMessage *message )
[20:39:41] <toadt> what exactly is this line doing? with the ::
[20:40:37] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae) (Ping timeout: 240 seconds)
[20:42:48] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:7f62:d43b:89a4:4059)
[20:48:57] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:7f62:d43b:89a4:4059) (Ping timeout: 240 seconds)
[20:49:01] *** Quits: toadt (~toadt@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: toadt)
[20:59:02] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:2cb1:46aa:f3c9:105d)
[20:59:02] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:2cb1:46aa:f3c9:105d) (Changing host)
[20:59:02] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:15:51] *** Joins: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[21:29:17] *** Joins: jsbach_ (~jsbach@2a01:c22:35cd:1200:eb4:bcd3:8626:a5bc)
[21:31:11] *** Quits: jsbach (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae) (Ping timeout: 245 seconds)
[21:33:47] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Quit: ZNC 1.8.2 - https://znc.in)
[21:34:31] *** Quits: jsbach_ (~jsbach@2a01:c22:35cd:1200:eb4:bcd3:8626:a5bc) (Ping timeout: 245 seconds)
[21:52:59] *** Joins: jsbach_ (~jsbach@2a01:c22:35cd:1200:a3c9:e5bf:26eb:f3ae)
[22:15:14] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[22:17:28] *** Joins: toadt (~toadt@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[22:18:01] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[22:30:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[22:34:48] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[22:52:28] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:8bd6:62f1:1b52:da20) (Quit: Leaving)
[23:05:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[23:42:32] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:52:31] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[23:53:34] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:1d79:7c54:c545:7cd5)
