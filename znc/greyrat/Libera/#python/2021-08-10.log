[00:00:04] *** Joins: Auron (~Auron956@user/auron)
[00:00:35] <jinsun> if the thing is within brackets you can
[00:00:52] *** Joins: rndm (~arossi@143.59.164.79)
[00:02:20] <harwiltz> Yup, just figured that part out ;)
[00:02:22] <harwiltz> Thanks!
[00:02:50] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[00:03:02] <rndm> why does mypy complain about assignment of `Dict[str, MutableSequence[int]]` to `Mapping[str, Sequence[int]]`
[00:03:21] *** Joins: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net)
[00:04:01] <bjs> rndm: what exactly is mypy's complaint
[00:04:29] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:05:04] <rndm> it involves reduce: error: Argument 1 to "reduce" has incompatible type "Callable[[Dict[str, MutableSequence[int]], Tuple[int, FieldMeta]], Dict[str, MutableSequence[int]]]"; expected "Callable[[Mapping[str, Sequence[int]], Tuple[int, FieldMeta]], Mapping[str, Sequence[int]]]"
[00:06:31] <bjs> rndm: the problem is the Callable
[00:06:43] <Akuli> you have defined your function to take a Dict, but reduce can call it with any Mapping, not necessarily a Dict
[00:07:05] <bjs> rndm: a function that takes a Dict cannot be passed to something that accepts a function that takes a Mapping
[00:07:08] *** Quits: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72) (Remote host closed the connection)
[00:07:24] <bjs> the other way around is ok
[00:07:31] <rndm> line is reduce(_inv, enumerate(fields), {}), where fields is Sequence[FieldMeta] and _inv is `def _inv(d: TKeyMap, e: Tuple[int, FieldMeta]) -> TKeyMap:`
[00:07:34] <rndm> _inv requires a dict
[00:07:55] *** Joins: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72)
[00:08:01] <Akuli> does it really need to mutate the dict and its values?
[00:08:45] <rndm> Akuli: strictly speaking, no. maybe cleaning that up will simplify
[00:08:46] *** Quits: jokoon (~eio@2a01:e0a:542:e160:30f8:ebee:cb3d:7fb4) (Quit: Leaving)
[00:09:02] *** Joins: mcope (~matt@user/mcope)
[00:09:13] *** Quits: GenTooMan (~cyberman@c-73-214-106-63.hsd1.pa.comcast.net) (Ping timeout: 248 seconds)
[00:09:23] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[00:09:46] <Akuli> so what is the goal with this code? call _inv repeatedly to fill out an empty dict based on the fields?
[00:10:03] <rndm> trying to convert a sequence with repeated entries into a many-valued inverse (map of items to sequences of positions where the items occur)
[00:10:27] <Akuli> so 'aab' --> {'a': [0, 1], 'b': [2]} ?
[00:10:34] <rndm> so ['a', 'a', 'b', 'c'] -> {'a': [0,1], 'b': [2], 'c':[3]}
[00:10:38] <Akuli> yeah
[00:10:54] <Akuli> i would use a for loop with result.setdefault(item, []).append(index) in it
[00:11:09] <bjs> a defaultdict ? :)
[00:11:16] <Akuli> or a defaultdict, yeah, depends on your preference
[00:11:23] <Akuli> it's not as purely functional as reduce() would be, but it's simple and it works really well
[00:11:28] <rndm> gotcha. inv is def _inv(d: TKeyMap, e: Tuple[int, FieldMeta]) -> TKeyMap: i, field = e; d.setdefault(field.name, []).append(i); return d
[00:11:32] <bjs> well if you're calling setdefault on every access it's probably better as setdefault.
[00:11:35] <bjs> rndm: what is TKeyMap?
[00:11:37] <rndm> but yeah it's just cleaner without reduce
[00:11:44] <rndm> TKeyMap = Dict[str, MutableSequence[int]]
[00:11:46] *** Joins: longstride (~longstrid@69.84.252.41)
[00:12:41] *** Joins: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com)
[00:12:44] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Read error: Connection reset by peer)
[00:13:44] *** Joins: zebrag (~chris@user/zebrag)
[00:14:27] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 276 seconds)
[00:14:33] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 248 seconds)
[00:14:36] *** Joins: Pickchea (~private@user/pickchea)
[00:14:59] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[00:16:07] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[00:16:07] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[00:16:10] <bjs> rndm: I'm not sure where your problem is coming from, where is Mapping/Sequence coming from?
[00:16:14] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:16:15] *** Joins: mcope (~matt@user/mcope)
[00:16:17] <bjs> _inv doesn't mention them?
[00:16:21] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[00:16:40] *** Quits: longstride (~longstrid@69.84.252.41) (Quit: Client closed)
[00:16:45] <rndm> bjs: the lhs of an assigment
[00:17:00] <rndm> self.index = reduce(_inv, enumerate(fields), {}) where index: Mapping[str, Sequence[int]]
[00:18:00] *** Quits: henistein (~henistein@2001:8a0:c1b3:6b01:d502:fdf6:12b1:c7b) (Quit: Client closed)
[00:18:09] *** Joins: schumaml (~schumaml@dslb-188-104-179-222.188.104.pools.vodafone-ip.de)
[00:18:10] <rndm> I don't want the interface to offer mutation of index
[00:18:11] <bjs> rndm: there where is MutableSequence coming from? :P
[00:18:23] <bjs> if index isnt mutable, and _inv is annotated with Sequence
[00:18:34] <bjs> uh sorry if fields is
[00:19:07] <rndm> fields is from the initializer (__init__(self, *fields: FieldMeta))
[00:19:17] <bjs> Oh I see now, TKeyMap is annotated as MutableSequence
[00:19:24] *** Joins: Superstars111 (~jared@li227-215.members.linode.com)
[00:19:29] <rndm> yeah, needs to be mutable for append in inv
[00:19:46] *** Quits: schumaml4 (~schumaml@dslb-178-007-205-189.178.007.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[00:19:52] <rndm> seems like the easiest way out is not to abuse reduce for this
[00:20:05] <Akuli> bjs, typeshed defines reduce like "def reduce(function: Callable[[_T, _S], _T], ..., initial: _T) -> _T: ..." so the initial {} gets interpreted as Mapping[str, Sequence[int]], even though the function wanted an incompatible TKeyMap
[00:20:06] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[00:20:20] <Akuli> i agree, reduce isn't the easiest way to do this :D
[00:20:21] *** ChanServ sets mode: +o nedbat
[00:20:25] *** ChanServ sets mode: -o nedbat
[00:20:30] <bjs> oh hi nedbat
[00:20:46] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[00:20:55] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[00:20:55] *** jmcantrell is now known as Guest2124
[00:20:55] *** Quits: Guest2124 (~jmcantrel@user/jmcantrell) (Killed (erbium.libera.chat (Nickname regained by services)))
[00:20:55] *** __jmcantrell__ is now known as jmcantrell
[00:21:09] *** Joins: Guest2124 (~jmcantrel@user/jmcantrell)
[00:21:50] *** Joins: mcope (~matt@user/mcope)
[00:22:12] *** Quits: y1n (~y1n@84-115-64-14.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[00:22:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 258 seconds)
[00:22:48] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[00:23:16] *** Joins: cheater (~Username@user/cheater)
[00:24:09] *** Quits: doc|work (~doc@user/doc) (Ping timeout: 248 seconds)
[00:24:29] <bjs> Akuli: I don't think the reduce is the problem, the reduce should just pass the type along very happily
[00:24:52] <Akuli> so that _T would become TKeyMap?
[00:25:38] <bjs> Akuli: well, that's the question. I think because it's destined for self.index which is annotated as Mapping[...] then _T must be Mapping[...]
[00:25:42] *** Joins: hafat (~hafat@95.70.167.173)
[00:26:06] <Akuli> it would work if _T was any type compatible with Mapping[...], such as TKeyMap, maybe mypy just isn't clever enough to realize it
[00:26:19] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[00:26:23] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[00:26:33] <bjs> if rndm made a temporary variable `index = reduce(...); self.index = index` then mypy would hopefully see the correct binding for _T
[00:26:38] *** Guest2124 is now known as jmcantrell
[00:26:49] <bjs> but probably reduce is a painful thing to use here anyway
[00:26:54] <Akuli> :)
[00:28:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:28:23] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 258 seconds)
[00:28:25] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 248 seconds)
[00:29:02] *** Joins: pgib (~textual@173.38.117.78)
[00:29:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:29:10] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 272 seconds)
[00:29:29] <rndm> bjs you are right. if you introduce a temporary variable idx:TKeyMap = reduce(_inv, enumerate(fields), {}) followed by self.index = idx it all passes
[00:30:21] <Akuli> :DDD
[00:30:35] <bjs> rndm: I can see why mypy did that, if you have `x: T = f()` where `f : _ -> S` then mypy infers `T = S`
[00:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[00:31:01] <Akuli> somehow i assumed that when looking for the correct type, mypy would try all possibilities it sees mentioned and only complain if none of them work
[00:31:09] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:32:07] <bjs> rather than `S <: T` or whatever,  but probably it's harder for mypy to use that constraint
[00:32:20] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:32:41] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 248 seconds)
[00:33:06] *** Joins: audiophile (~notanaudi@c-73-103-94-81.hsd1.in.comcast.net)
[00:33:14] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[00:33:16] <audiophile> hello is 'if element in dict' O(N) or O(1)?
[00:33:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[00:33:58] <rndm> audiophile: O(1) expected
[00:34:29] <audiophile> yeah that's what I expected too but this article says otherwise (?!) https://www.geeksforgeeks.org/complexity-cheat-sheet-for-python-operations/
[00:35:04] *** Joins: y1n (~y1n@84-115-65-73.wifi.dynamic.surfer.at)
[00:35:06] <audiophile> this one too https://blog.finxter.com/complexity-of-python-operations/
[00:35:16] <audiophile> im surprised!
[00:35:39] <Akuli> both of those are about "for k in dict"
[00:35:52] <Akuli> which is a loop over all elements, hence O(n) or slower
[00:35:52] <audiophile> oh for-loops
[00:36:05] <audiophile> wait this? 'Membership	x in l / x not in l	O(n)'
[00:36:10] <Akuli> those are for lists
[00:36:15] <rndm> audiophile: https://wiki.python.org/moin/TimeComplexity
[00:36:20] <audiophile> silly me
[00:36:24] <Akuli> lists aren't clever about it, it really has to loop through the whole list to find it
[00:36:29] <audiophile> official source, thank you
[00:37:31] <rndm> with amortized time, n sequential operations take O(n) time, so the "average" time per op is constant
[00:38:12] <audiophile> gotcha, makes sense now ty
[00:38:56] <rndm> it makes sense to write it that way when in normal use, say, some constant number of operations (over a linear number of operations) may take linear time
[00:39:49] <bjs> rndm: well `x in some_dict` is just worst-case O(n), amortization doesn't help there
[00:39:55] <bjs> infact amoritzation doesn't help with dicts really at all
[00:40:23] <bjs> you might have been thinking about lists where the amortized time is much better?
[00:40:25] <rndm> agree it's worst-case O(n). the amortized analysis includes construction of the dict from empty state
[00:40:44] <bjs> rndm: yes and dicts have amortized O(n) times for all operations
[00:41:04] <bjs> again you might've been thinking about lists ?
[00:41:13] <rndm> right, so O(n) total over n ops means constant expected time per operation
[00:41:18] <bjs> rndm: no
[00:41:23] <bjs> n operations is O(n^2) for dicts
[00:41:28] <bjs> they are *not* amortized O(1)
[00:41:34] <bjs> Again, you might have been thinking about lists
[00:42:29] <bjs> They are average case O(1) (for a sufficiently "average" hash function and inputs) which is also maybe what you're thinking of
[00:42:42] <rndm> bjs, the source of our disagreement is on the defintion of amortized time
[00:42:44] *** Quits: audiophile (~notanaudi@c-73-103-94-81.hsd1.in.comcast.net) (Changing host)
[00:42:44] *** Joins: audiophile (~notanaudi@user/audiophile)
[00:42:53] <bjs> rndm: I think our definition is the same
[00:43:06] <bjs> If you take N operations and the total time is O(N) then it's O(1) amortized time.
[00:43:18] <rndm> > Aggregate analysis determines the upper bound T(n) on the total cost of a sequence of n operations, then calculates the amortized cost to be T(n) / n.
[00:43:19] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[00:43:24] <rndm> from https://en.wikipedia.org/wiki/Amortized_analysis
[00:43:36] <bjs> rndm: yes I know what amortized time means
[00:43:54] <rndm> right okay then I'm missing something about dicts
[00:43:56] <audiophile> is cases when membership check not O(1) due to bucket chaining in hashing?
[00:44:03] <bjs> rndm: N dict operations are worst-case O(N^2), so you get N^2 / N  which is N. Dicts are worst-case amortized O(N) for all operations
[00:44:13] <bjs> This just happens to be a case where amortized analysis doesn't improve the complexity
[00:44:17] <bjs> audiophile: yes.
[00:44:30] <audiophile> thanks makese sensese
[00:45:00] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 276 seconds)
[00:45:00] <bjs> audiophile: (note Python uses open addressing not the more commonly cited chaining methods,  Python dicts are 'flat')
[00:45:05] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Quit: Haxxa flies away.)
[00:45:18] <audiophile> probably silly q: but why do we not say O(n) for membership check then if the entire dict has hash collisions?
[00:45:25] <audiophile> oh whoa
[00:46:08] *** Joins: Haxxa (~Haxxa@122.199.45.186)
[00:46:20] *** Joins: khrbt (~khrbt@user/khrbt)
[00:46:42] <bjs> audiophile: we do
[00:46:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:46:53] <bjs> audiophile: we say it's "average" O(1), but worst-case O(n).   I hope the wiki page above says that...
[00:47:15] <bjs> otherwise it needs a fix :)
[00:48:22] *** Quits: magla (~gelignite@55d4b6ce.access.ecotel.net) (Quit: Stay safe!)
[00:48:24] <audiophile> ah it does indeed!
[00:48:28] <audiophile> ty
[00:49:35] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[00:50:08] <bjs> audiophile: in the "real world" dicts behave like O(1),  but do be aware that malicious users can construct examples that make things go slow
[00:50:21] <bjs> There have been some theoretical attacks based on this,  it's one of the reasons strings have randomized hashes :)
[00:50:43] <audiophile> strings have randomized hashes?!
[00:50:46] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:50:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:51:08] <bjs> audiophile: yes,  each time you run Python you should get a different hash for your string.  Unless you've done something to disable that feature (I dont recommend)
[00:51:33] <bjs> Obviously during the life of one program the hash shouldn't change, bad things would happen then :)
[00:52:36] *** Joins: mcope (~matt@user/mcope)
[00:52:39] *** Quits: roryrjb (~roryrjb@143.244.37.78) (Quit: WeeChat 2.8)
[00:52:39] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[00:53:10] *** Joins: todda7 (~torstein@74.red-83-35-41.dynamicip.rima-tde.net)
[00:53:21] *** Joins: summonner (~summonner@188.24.22.156)
[00:55:50] *** Quits: Matheo_bis (~matheo@user/matheo-bis/x-4309430) (Quit: Konversation terminated!)
[00:57:29] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[00:57:39] <Akuli> O(n) for "if item in dict" is really really bad luck :D
[00:57:55] <Akuli> or a very bad __hash__() method
[00:58:23] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:02:11] <philipp64|work> Hi… Regarding this code fragment, https://pastebin.com/rG4M1wrP … I’m getting an error on line 17 that’s cryptic… struct.error: bad char in struct format
[01:02:36] <bjs> Akuli: or a very bad user
[01:02:41] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:02:55] *** Joins: besnn (~besnn@user/besnn)
[01:03:04] <philipp64|work> If I take out the ‘!’ it works, but generates packing that’s machine specific… I was hoping to generate a network-byte order unsigned 32-bit int, but can’t figure out how to do that in Python 3.7+. What am I missing?
[01:03:11] <bjs> Akuli: even with a good hash function a bad user can pick inputs that give the same hash.
[01:04:16] <Akuli> yeah
[01:04:27] <philipp64|work> According to https://docs.python.org/3.7/library/struct.html#byte-order-size-and-alignment … prefixing with ‘!’ should be all I need to do, but that clearly is failing.
[01:04:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:05:12] <Yhg1s> philipp64|work: you're not *prefixing* with !. The '!' can't be in the middle of the format, it has to be at the start.
[01:05:59] *** Joins: dimbag (~dimbag@pppoe38h127.ppp.kmv.ru)
[01:06:01] <dimbag> hi
[01:06:16] <dimbag> which module do you suggest for websocket ?
[01:06:38] <philipp64|work> Oh. so you can’t have ‘<I … >I … !I…’ and switch formats in the same buffer.  Huh.
[01:06:48] <Yhg1s> philipp64|work: correct.
[01:07:17] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[01:07:21] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 248 seconds)
[01:07:46] <philipp64|work> Odd.  Because some protocols (like NFS) generate both types of header for speed, and the other other side picks the one that’s native…
[01:08:28] <Yhg1s> philipp64|work: the struct module is very basic, and the use-cases it was meant for don't need the switching. There are third-party libraries, like construct, that offer more features.
[01:09:07] <philipp64|work> No, it’s fine… just need to know what I’m up against…
[01:09:18] <philipp64|work> Thanks for setting me straight.
[01:10:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[01:10:46] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[01:11:15] *** Joins: matsaman (~matsaman@user/matsaman)
[01:12:19] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[01:12:42] *** Joins: mcope (~matt@user/mcope)
[01:12:47] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[01:12:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:14:02] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 268 seconds)
[01:14:18] *** Joins: fikran (~fikran@user/fikran)
[01:16:55] *** Joins: longstride (~longstrid@69.84.252.41)
[01:19:46] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Quit: Konversation terminated!)
[01:20:37] *** Joins: aGNU (~Dione@p200300d51f151000410754df067b072f.dip0.t-ipconnect.de)
[01:20:40] *** Quits: payam (~payam@138.106.57.132) (Ping timeout: 246 seconds)
[01:21:32] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 256 seconds)
[01:22:04] *** Quits: y1n (~y1n@84-115-65-73.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[01:22:26] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Ping timeout: 258 seconds)
[01:23:27] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[01:23:36] <aGNU> Hey there, I'm having a bit of trouble configuring my logger through a dictionary. I want to only display messages of the level "INFO", if I set the level to Info it displays info and all logging-levels with a higher priority (e.g. ERROR).
[01:23:58] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Ping timeout: 258 seconds)
[01:25:17] *** Quits: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72) (Remote host closed the connection)
[01:25:41] *** Joins: dermato (~dermatobr@154.21.23.75)
[01:26:53] *** Joins: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72)
[01:27:03] <Yhg1s> aGNU: yes, that's what logging levels mean. What you need is separate handlers on the logger for the different logging levels.
[01:27:05] *** Quits: FatDarrell (~textual@68.91.156.229) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:27:13] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[01:27:54] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Client closed)
[01:27:58] <aGNU> Yhg1s so there is no way to simply filter messages of other logging-levels?
[01:28:14] <Yhg1s> aGNU: yes, there is: setting up different handlers and filtering them appropriately on each.
[01:29:00] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[01:30:09] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:30:52] <Akuli> info_handler.addFilter(lambda record: record.level == logging.INFO) ?
[01:30:59] <Akuli> i probably got some detail wrong, check with docs :D
[01:31:41] <aGNU> Alright, thanks both of you!
[01:33:18] <luckydonald> Because we are already on the topic of logging: when having a context, say a flask request, how can I make it's logging request dad with some meta-data, so I can track the request through the logs with multiple workers?
[01:34:24] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:34:24] *** Joins: y1n (~y1n@84-115-65-115.wifi.dynamic.surfer.at)
[01:34:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:34:59] <dodo> luckydonald: do you pass the request around?
[01:36:27] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[01:36:41] *** Joins: akk (~akk@75.161.157.26)
[01:36:42] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:36:56] <luckydonald> dodo: I'm not sure and watch where are you mean that, currently a pass around a unique hash I generate, and simply prepend that to every logging call. But that means I have to include that in basically every of my functions, which also means that some thing like the request library wouldn't have the unique logging prefix.
[01:39:02] *** Joins: SuperLag (~akulbe@user/superlag)
[01:40:59] <InPhase> luckydonald: I don't know your exact structure, but on general principle you can localize global state with a solution like adding a routine to register the hash with the logging object you will use, and then do this register step at the start of processing each request.
[01:41:17] <luckydonald> And that isn't actually limited to just the flask Web server, it would also be very helpful for the worker instance where I am basically loading a data set from the db and crushing data on it. To have all log gong  calls automatically identify that by some kind of string prefix automatically would help identifying what is this doing currently by simply looking on the last recent output, instead of
[01:41:17] <luckydonald>  having to search for some "now processing entry #4458" or similar
[01:43:54] *** Quits: bkraptor (~bkraptor@80.111.224.110) (Ping timeout: 258 seconds)
[01:44:08] *** Joins: FatDarrell (~textual@68.91.156.229)
[01:45:22] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:46:09] <luckydonald> InPhase: so I basically want to for example have all the debug logs the requests library.    So what I'm thinking is logging.set_prefix("db #4458");  some_func(); logging.drop_prefix()
[01:46:37] *** Quits: aGNU (~Dione@p200300d51f151000410754df067b072f.dip0.t-ipconnect.de) (Quit: Client closed)
[01:47:29] *** Quits: longstride (~longstrid@69.84.252.41) (Quit: Client closed)
[01:48:14] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:49:06] *** Quits: FatDarrell (~textual@68.91.156.229) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:49:21] *** Parts: luckydonald (~luckydona@static.154.109.217.95.clients.your-server.de) (yo!)
[01:49:25] *** Joins: luckydonald (~luckydona@static.154.109.217.95.clients.your-server.de)
[01:49:34] <luckydonald> Bonus points if that also works across async contacts
[01:49:42] <luckydonald> *co
[01:50:24] <luckydonald>  * context
[01:50:44] <luckydonald> Apologies.
[01:53:05] *** Joins: Classic (~root@user/classic)
[01:53:40] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[01:55:22] *** Joins: khrbt (~khrbt@user/khrbt)
[01:57:27] *** Joins: grateful (~grateful@user/grateful)
[01:58:53] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:59:19] <luckydonald>  Sounds like I could use a logging filter. http://docs.python.org/howto/logging-cookbook.html#context-info
[01:59:46] <Lando-SpacePimp> Why was Abraham Lincoln in the bathroom?
[01:59:52] <Lando-SpacePimp> He was making Lincoln Logs.
[02:01:22] <Gustavo6046> Is there a struct-of-arrays equivalent in Python? (Say a gameobject with xy pos, vel, health, etc.)
[02:01:34] <Gustavo6046> Is it as effective?
[02:02:21] <bjs> Gustavo6046: are you looking for classes?  Python doesn't really have anything I'd call a "struct"
[02:02:46] *** Quits: todda7 (~torstein@74.red-83-35-41.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[02:02:46] <Gustavo6046> bjs: I mean as in something that would be analogous to having a struct of arrays instead of an array of strcuts in C
[02:02:49] <phy1729> A dataclass is kinda struct-like
[02:02:59] <Gustavo6046> which is efficient so you don't have to load the entire "struct" if you just want to do many similar operations on one or two fields
[02:03:06] <Gustavo6046> say, each time you update position with velocity
[02:03:19] <AhmedAmerican> within `argparse` is it possible to configure `nargs` to accept one or more arguments ? i tried within `*` but if i run my program without arguments, it's will continue
[02:03:22] <bjs> Gustavo6046: I mean "loading" a value in Python doesn't really matter so much,  if it's in memory already
[02:03:24] <AhmedAmerican> https://docs.python.org/3/library/argparse.html#nargs
[02:03:34] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:03:41] <Gustavo6046> bjs: all values are in memory already
[02:03:45] <bjs> Gustavo6046: so I don't really see much benefit, they'd both be equally slow :)
[02:03:46] <Gustavo6046> i think i mean as in CPU cache? idk?
[02:03:50] <Gustavo6046> well true
[02:03:56] <Gustavo6046> in C there would be a difference
[02:04:00] <Gustavo6046> but Python isn't C is it :D
[02:04:06] <Gustavo6046> hmm
[02:04:06] *** Quits: upsala1 (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:04:07] <bjs> Gustavo6046: Python doesn't exactly have good cache locality
[02:04:13] <Gustavo6046> maybe in Cython it would be more different
[02:04:21] <Gustavo6046> bjs: well, that's where the "effective" part of the question comes in
[02:04:26] <Gustavo6046> in truth I just have to benchmark it
[02:04:29] <Gustavo6046> I dunno how
[02:06:02] <bjs> Gustavo6046: with time.time() :)
[02:06:08] <Gustavo6046> true!
[02:06:10] <Gustavo6046> or timeit
[02:06:14] <Gustavo6046> it's probably a small difference
[02:06:21] <bjs> if you can't tell the difference with time.time() then I tend to think it's not worth trying anything more advanced
[02:06:35] <bjs> that or you need more representative samples
[02:06:37] <Gustavo6046> true
[02:06:39] <Gustavo6046> but I mean as in
[02:06:41] <Gustavo6046> it could vary
[02:06:49] <Gustavo6046> so doing it many times to have many samples would be good
[02:07:11] <bjs> Oh, definitely.  Run it many times and collect many samples.  That's roughly what timeit does.
[02:07:26] <jinsun> AhmedAmerican: `nargs="+"` ?
[02:07:46] <AhmedAmerican> jinsun: Thank you.
[02:07:49] *** Joins: thiras (~thiras@user/thiras)
[02:08:02] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 245 seconds)
[02:08:24] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:09:06] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[02:09:08] *** Joins: mcope (~matt@user/mcope)
[02:09:10] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[02:09:43] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[02:09:59] *** Joins: FatDarrell (~textual@68.91.156.229)
[02:10:15] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Remote host closed the connection)
[02:13:14] *** Joins: thiras (~thiras@user/thiras)
[02:15:21] *** Joins: BlessJah (~BlessJah@user/blessjah)
[02:16:04] <luckydonald> Is there something like threading.local for async operations?
[02:16:10] <luckydonald> https://docs.python.org/3/library/threading.html#threading.local
[02:17:09] <bjs> luckydonald: see https://docs.python.org/3/library/contextvars.html
[02:17:45] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 248 seconds)
[02:19:24] <luckydonald> bjs: sweet, thanks!
[02:20:21] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:21:51] *** Quits: y1n (~y1n@84-115-65-115.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[02:22:28] <Gustavo6046> so
[02:22:30] *** Joins: c10l2 (~c10l@89.34.167.207)
[02:22:34] <Gustavo6046> I have the two implementations to compare
[02:22:53] <Gustavo6046> both attend a generic interface, which honestly isn't even for physics and just to make the comparison easier on me
[02:23:14] <Gustavo6046> so I'll write a test (to make sure I'm not comparing the room-cleaning efficiency of a broom and an apple)
[02:23:18] <Gustavo6046> and a benchmark
[02:23:23] <Gustavo6046> everything with typehints
[02:23:29] <Gustavo6046> I already have the test actually
[02:23:37] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 248 seconds)
[02:23:37] *** c10l2 is now known as c10l
[02:24:03] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:24:14] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:24:22] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[02:24:57] *** Quits: rndm (~arossi@143.59.164.79) (Ping timeout: 268 seconds)
[02:26:56] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[02:28:09] *** Joins: c10l2 (~c10l@89.34.167.207)
[02:30:00] *** Joins: thiras (~thiras@user/thiras)
[02:30:15] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:23] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:32:06] <nedbat> Lando-SpacePimp: wrong channel?
[02:32:54] <Lando-SpacePimp> nedbat, well nobody else was saying anything to luckydonald and he mentioned logging
[02:36:07] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[02:36:44] *** Quits: FatDarrell (~textual@68.91.156.229) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:37:18] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[02:38:52] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:40:25] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:40:37] *** Quits: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:41:10] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[02:42:18] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:42:31] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:44:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:45:30] *** Joins: mci64 (~Guest68@185.242.190.95)
[02:45:34] *** Joins: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d)
[02:45:58] *** Joins: Kvothe (~weechat@user/elodin)
[02:46:36] *** Quits: Allegretto (~allegrett@94-21-172-215.pool.digikabel.hu) (Ping timeout: 272 seconds)
[02:46:41] <Gustavo6046> bjs: SoA ("struct of arrays") seems faster for n=5000
[02:47:00] <Gustavo6046> I kind of want to do a logplot
[02:48:32] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[02:49:50] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:50:53] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[02:51:13] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:51:37] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[02:52:02] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:52:39] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Client Quit)
[02:52:56] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[02:53:17] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 258 seconds)
[02:53:26] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:53:41] *** Joins: zebrag (~chris@user/zebrag)
[02:53:47] <Gustavo6046> huh, I just thought of something
[02:54:04] <Gustavo6046> what if some people competed to write the fastest implementation of this interface that passed the tests?
[02:55:06] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:23] *** Quits: mci64 (~Guest68@185.242.190.95) (Quit: Client closed)
[02:55:28] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 272 seconds)
[02:56:08] *** Joins: mci64 (~mci64@185.242.190.95)
[02:56:31] *** Joins: Celeo (~Celeo@user/celeo)
[02:57:01] *** Quits: oscarcp (~CastleDwe@217.194.54.110) (Quit: oscarcp)
[02:57:06] *** Quits: sunny933 (~sunny93@wireguard/tunneler/sunny93) (Quit: Ping timeout (120 seconds))
[02:57:10] <InPhase> Gustavo6046: The equivalent to struct of arrays in Python is to use numpy storage, and gather collections of these numpy data, which yields huge benefits because numpy operations can give near-native performance.
[02:57:16] <Gustavo6046> ah
[02:57:20] <Gustavo6046> truee, i should have done an impl with numpy too
[02:57:23] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[02:57:32] <Gustavo6046> but even without numpy it is noticeably faster if I plot it
[02:58:06] <InPhase> Gustavo6046: Switching to numpy can easily give a 50x speed up for operations on any non-trivial piles of numerical data.
[02:58:29] *** Joins: Allegretto (~allegrett@89-186-97-71.pool.digikabel.hu)
[02:58:56] <InPhase> Gustavo6046: It's so extreme that it's faster to do more algorithmically stupid approaches in numpy, than to do algorithmically cleaner approaches directly in Python.
[02:59:08] <Gustavo6046> heh, true
[02:59:26] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[02:59:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:59:43] <InPhase> Thus we have all sorts of numpy-hacks that involve more operations than necessary, just to keep it all numpy and work within the confines of what's supported.
[03:00:29] *** bloodninja123 is now known as bloodninja
[03:00:40] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[03:01:24] <InPhase> As a result of this, and the overheads of going into and out of numpy, I can only say "near native".  But it's definitely a major improvement on larger data.  For small data with few operations, numpy is sometimes not faster due to the conversion overhead, but can still be convenient with all of its built-in operations.
[03:01:36] <Gustavo6046> Yeah
[03:01:41] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:02:01] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 248 seconds)
[03:02:08] <Gustavo6046> This is the code I elaborated https://termbin.com/he6k
[03:02:13] <Gustavo6046> It takes a while to benchmark I admit
[03:02:17] <Gustavo6046> But I'll wait and then screenie for us :D
[03:02:45] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[03:02:51] <Gustavo6046> Aw dang it errored. One single comma missing. :P
[03:03:06] <Gustavo6046> Note the X axis is logarithmic
[03:03:08] <Gustavo6046> Perhaps the Y should be too
[03:04:25] *** Joins: BlessJah (~BlessJah@user/blessjah)
[03:04:43] *** Quits: greedom (~greedom@2001:16b8:32cd:4700:b48a:1f5d:fa8:5e72) (Remote host closed the connection)
[03:05:06] *** Quits: Akuli (~Akuli@82-203-160-28.bb.dnainternet.fi) (Quit: Leaving)
[03:05:07] <InPhase> Gustavo6046: Note that one thing numpy does not do well is append.  So you either restructure your interface to take the full dataset, pre-set the size and fill (fastest), or append a list internally then convert to a numpy array to calculate.
[03:05:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:05:21] <Gustavo6046> True
[03:05:26] <Gustavo6046> I could do pool allocation though
[03:06:22] *** Joins: Kvothe (~weechat@user/elodin)
[03:07:10] <InPhase> Gustavo6046: Well, you want to have your numpy array only contain valid data so that you can swap your tick loop with self.pos += self.vel * delta_time
[03:07:28] <Gustavo6046> have it in chunks of, say, 512
[03:07:36] <InPhase> s/only contain/to only contain/
[03:07:47] <Gustavo6046> That's simple
[03:07:52] <Gustavo6046> just reset to zero anytime an object is removed
[03:08:14] <InPhase> If removal is rare compared to ticks, you can just slice and replace your array.
[03:08:21] <Gustavo6046> though then I'd need either a "has_object" bitmap, or an expensive move to the left (and then I'd instead have a list of "occupied" numbers, one for each chunk)
[03:08:44] <Gustavo6046> removal isn't benchmarked, only tick; but it'd still be important if, say, game objects are deleted in runtime
[03:09:31] <nomic> z.z.z.z.z
[03:10:02] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 272 seconds)
[03:11:34] <InPhase> Gustavo6046: You can also make removal artifically rare by having another array that marks objects deleted, and a counter of how many, and then slice and replace after some number N removals.  Insertions could use an argwhere on the invalid objects.  It's just about keeping a small ratio of the most expensive operations.
[03:11:54] <Gustavo6046> Yep
[03:12:00] <InPhase> Doing a small number of extra updates would be very cheap in comparison.
[03:12:10] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:12:34] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:12:39] *** Quits: mci64 (~mci64@185.242.190.95) (Quit: Client closed)
[03:12:53] *** Joins: mci64 (~mci64@185.242.190.95)
[03:14:31] *** Joins: cjb (~cjb@user/cjb)
[03:15:54] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Client Quit)
[03:15:55] *** Joins: kadobanana (~mud@user/kadoban)
[03:16:22] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[03:17:35] *** Joins: y1n (~y1n@84-115-65-235.wifi.dynamic.surfer.at)
[03:18:13] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[03:18:31] *** Joins: luna-is-here (~quassel@ip-95-223-59-176.hsi16.unitymediagroup.de)
[03:19:09] *** Joins: khrbt (~khrbt@user/khrbt)
[03:19:09] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[03:19:49] *** Quits: kadobanana (~mud@user/kadoban) (Read error: Connection reset by peer)
[03:20:06] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:54d9:a686:a64c:8cd9) (Remote host closed the connection)
[03:20:06] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Read error: Connection reset by peer)
[03:20:07] *** Joins: kadobanana (~mud@user/kadoban)
[03:21:22] *** Joins: FatDarrell (~textual@68.91.156.229)
[03:21:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[03:22:50] *** Quits: mci64 (~mci64@185.242.190.95) (Quit: Client closed)
[03:22:53] *** Quits: luna-is-here (~quassel@ip-95-223-59-176.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[03:23:02] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:23:31] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[03:23:36] *** Joins: fikran (~fikran@user/fikran)
[03:26:13] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Ping timeout: 268 seconds)
[03:27:09] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:27:13] *** Joins: mci64 (~mci64@185.242.190.95)
[03:28:09] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 248 seconds)
[03:31:51] *** Joins: rndm (~arossi@2600:1700:5f81:1f50:698c:ce69:6d27:7b65)
[03:31:56] <rndm> how does one specify a settable property with a protocol?
[03:32:43] <FunkyBob> are you referring to the descriptor protocol?
[03:32:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[03:32:59] <FunkyBob> that's the only one I know of related to getters and setters
[03:33:24] <rndm> in the pep 544 sense
[03:33:48] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:35:21] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[03:35:59] *** Joins: khrbt (~khrbt@user/khrbt)
[03:36:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[03:36:53] *** Joins: cjb (~cjb@user/cjb)
[03:37:25] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:37:49] *** Joins: srhm (~ascii@user/srhm)
[03:38:01] *** Parts: stochasticlalo (~stochasti@2804:29b8:508d:d:dd9e:d83:4e9a:4775) ()
[03:38:56] *** Joins: lorcab (~user@197.251.194.240)
[03:39:13] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[03:39:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[03:40:12] *** Joins: zebrag (~chris@user/zebrag)
[03:40:30] *** Quits: luxifer (~luxifer@185.238.253.180) (Ping timeout: 276 seconds)
[03:40:49] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[03:41:40] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[03:42:27] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 276 seconds)
[03:43:05] *** Quits: mci64 (~mci64@185.242.190.95) (Ping timeout: 248 seconds)
[03:43:36] *** Quits: junktext (~junktext@109.201.152.168) (Ping timeout: 272 seconds)
[03:43:41] *** Joins: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com)
[03:44:07] *** Joins: duckmcscrooge (~bsantanad@2806:102e:e:a58e:8484:153e:1c1:9974)
[03:45:37] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:46:59] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[03:47:07] *** Quits: carpediembaby (~carpediem@185-19-224-14.reverse.ipexia.com) (Remote host closed the connection)
[03:47:47] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[03:50:09] *** Joins: gizmo_ (~gizmo@45.91.125.2)
[03:50:38] <Gustavo6046> For positive numbers // truncates toward zero, right?
[03:50:58] <Gustavo6046> Whatever negative numbers do I am not concerned with
[03:51:03] <Gustavo6046> This is for pooled/chunked indexing
[03:51:06] <Gustavo6046> whatever you can call it
[03:53:38] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[03:53:52] <matsaman> https://docs.python.org/3/reference/expressions.html#index-67
[03:54:45] *** Joins: kill (~killown@user/killown)
[03:54:54] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[03:55:29] <kill> is there someway to make a copy of a image that will look different if a tool tries to detect any similarity but the image still keeps the same?
[03:55:53] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 248 seconds)
[03:56:03] <nedbat> kill: the tools are built to be hard to fool, i expect
[03:56:19] <AhmedAmerican> do i really need to use type-hints ?
[03:57:00] <kill> nedbat, even so, there is someway?
[03:57:02] <kill> is there
[03:57:20] <matsaman> there are lots of ways that will work until any human realizes it's happening and the tool is changed
[03:57:33] <matsaman> so not very long
[03:57:38] <matsaman> AhmedAmerican: of course not
[03:58:04] *** Joins: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14)
[03:58:44] <AhmedAmerican> so why almost of codes nowadays include type-hints . even i noticed that many cares about which type hint to use.
[03:59:02] <dre> I literally was about to post a type hint question
[03:59:04] <dre> lol
[03:59:30] <AhmedAmerican> \o that's it :P then you've the answer
[03:59:30] <dre> AhmedAmerican, because it is helpful in reducing bugs when you and the computer can understand what is expected
[03:59:41] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:59:53] <matsaman> AhmedAmerican: humans get bored, it's the cause of literally all of our problems
[04:00:14] <matsaman> also a lot of people have avoided Python and instead used other languages because of typing
[04:00:26] <matsaman> no doubt many people having done that are happy to use python now
[04:00:34] <matsaman> it's still optional, though
[04:01:01] <phy1729> It's nice to have some idea what a variable is without having to read the code to figure out how it's used
[04:01:12] <matsaman> and arguably very unimportant to Python, given its comparatively late support
[04:01:31] <matsaman> phy1729: you really still have to do that, though
[04:01:38] <AhmedAmerican> i see, make sense
[04:01:44] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[04:02:06] <AhmedAmerican> mypy in this case is helpful ?
[04:02:07] <matsaman> they don't magically make people not mistake types or abuse variables etc.
[04:02:21] <matsaman> AhmedAmerican: fair amount of people use it
[04:02:22] <phy1729> There's mypy for that
[04:03:56] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:04:21] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[04:04:45] *** Joins: djapo (~archangel@user/djapo)
[04:04:58] <Gustavo6046> InPhase: okay, I just did an experimental Numpy implementation of the thing
[04:07:06] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:07:06] *** Wulf4 is now known as Wulf
[04:07:43] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[04:08:34] *** Joins: heco (~redrum@user/redrum88)
[04:10:15] <Gustavo6046> I also did some with fixed point numbers internally to see if that would affect performance anyhow.
[04:11:32] *** Quits: duckmcscrooge (~bsantanad@2806:102e:e:a58e:8484:153e:1c1:9974) (Remote host closed the connection)
[04:11:39] *** Quits: y1n (~y1n@84-115-65-235.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[04:13:29] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 248 seconds)
[04:15:22] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:20:00] <dre> what is a one-element wide tuple called? like (2,) as compared to (2)
[04:20:01] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:20:23] <dre> is it just that (2,) is a tuple where (2) is just bracketed and would be simplified out?
[04:20:45] <Yhg1s> dre: (2) is not a tuple, yes.
[04:20:55] <dre> I can't remember but back in py2 days i used to get hung up on the (x,) tuple syntax, maybe I was just overthinking it
[04:20:56] <dre> yeah ok
[04:21:00] <dre> thanks im dum
[04:21:11] <Yhg1s> The tuple syntax hasn't changed in Python 3.
[04:21:57] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[04:23:21] *** Quits: FatDarrell (~textual@68.91.156.229) (Read error: Connection reset by peer)
[04:23:27] *** Joins: y1n (~y1n@84-115-65-53.wifi.dynamic.surfer.at)
[04:23:35] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[04:24:11] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[04:24:52] *** Joins: Naan (~Naan@user/naan)
[04:25:07] <Gustavo6046> aa, my numpy thing passes, as do the fixed point ones
[04:25:10] <Gustavo6046> time for the benchies!
[04:25:15] <Gustavo6046> I'm stoked :D
[04:25:25] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[04:26:28] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[04:27:26] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[04:30:04] <Gustavo6046> InPhase: you were quite right! https://i.imgur.com/RiRLQPh.png
[04:30:17] <Gustavo6046> blue is numpy
[04:30:54] <InPhase> Gustavo6046: Sometimes 100x, but I was trying not to over-promise.  :)
[04:31:03] <Gustavo6046> :D
[04:31:07] <Gustavo6046> It's still great
[04:31:09] <Gustavo6046> Remember it's log-log
[04:31:16] <Gustavo6046> because each benchmark uses 5 times more items than the previous one
[04:31:44] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 272 seconds)
[04:31:54] <InPhase> Your x-axis tick mark labels seem broken, but I get the concept.
[04:32:08] <Gustavo6046> Er
[04:32:09] <Gustavo6046> oops
[04:32:11] <Gustavo6046> lol
[04:32:50] *** Joins: djapo (~archangel@user/djapo)
[04:32:51] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[04:33:48] <Gustavo6046> now I'll instead use base 3 instead of base 5 (to get the item number for each cycle), and go up to degree 8 instead of 5
[04:33:58] <Gustavo6046> er, degree 9
[04:34:57] <Repiphany> You should set the same random seed for each of your tests if you're not already
[04:35:31] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[04:36:08] <Gustavo6046> Repiphany: random is only used to initialize the positions and velocities, and I use uniform to avoid overflows which could in theory affect performance
[04:36:15] <Gustavo6046> https://termbin.com/o7ag new version of code
[04:36:43] <Gustavo6046> this was all by the way originally to benchmark struct-of-arrays stuff
[04:37:08] <Gustavo6046> but now I know which I'll want – array of SoA numpy chunks :)
[04:39:11] *** Quits: lorcab (~user@197.251.194.240) (Remote host closed the connection)
[04:39:37] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 248 seconds)
[04:40:32] <Gustavo6046> this was all over the course of...what
[04:40:39] <Gustavo6046> 3 hours
[04:43:54] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[04:44:13] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 276 seconds)
[04:48:44] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[04:49:15] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[04:50:34] <InPhase> Gustavo6046: You need to rerun.
[04:51:00] <Gustavo6046> hm?
[04:51:06] <Gustavo6046> I'm fixing the graph code
[04:55:02] <InPhase> Gustavo6046: Well, I guess it doesn't matter too much for performance when you have large numbers.  But self.pos = self.pos + self.vel * time_delta_fixed / self.fixed_base; is very different from  self.pos += self.vel * time_delta_fixed / self.fixed_base
[04:55:15] <InPhase> The first one creates a whole new array, and then assigns it.  The second just updates values in place.
[04:56:57] <Gustavo6046> Ohh.
[04:57:06] <Gustavo6046> You're right!
[04:58:57] *** Joins: qlixed (~qlixed@181.44.129.13)
[05:00:05] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[05:01:31] <Gustavo6046> InPhase: I did it, I broke pyplot
[05:01:48] <Gustavo6046> https://i.imgur.com/dfTF84h.png
[05:01:56] <Gustavo6046> Ohh
[05:02:02] <Gustavo6046> I swapped the X and Y graphings
[05:02:13] <InPhase> :)
[05:02:25] <InPhase> Something looked a bit fishy there with that multivalued function.
[05:02:48] <Gustavo6046> https://i.imgur.com/KR5ghuU.png Much better!
[05:03:06] <Gustavo6046> Why does it look worse (or rather, um, "less better") in loglog than linlin?
[05:03:10] <InPhase> Good illustration of the overhead time.
[05:03:11] <Gustavo6046> Maybe it's the overhead
[05:03:14] <Gustavo6046> Ah
[05:03:19] <Gustavo6046> Thanks!
[05:03:53] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[05:04:03] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[05:04:08] <Gustavo6046> I'll do more benchies
[05:04:41] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 248 seconds)
[05:05:28] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[05:05:32] <Gustavo6046> Here this time I just provided timeit 100 timings per thingy https://i.imgur.com/vMfmVW4.png
[05:05:34] <Gustavo6046> Oh wait
[05:05:43] <Gustavo6046> am I supposed to divide the return value by the number of timings?
[05:05:57] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[05:08:58] <Gustavo6046> InPhase: It seems that, while each datapoint varied in the number of items, I didn't correct for times run.
[05:09:21] <Gustavo6046> The big picture becomes way more chaotic. Maybe because of CPU?
[05:09:59] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:11:38] *** Quits: y1n (~y1n@84-115-65-53.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[05:13:16] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:14:10] *** Quits: schumaml (~schumaml@dslb-188-104-179-222.188.104.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[05:15:22] *** Joins: schumaml (~schumaml@dslb-178-002-190-096.178.002.pools.vodafone-ip.de)
[05:15:53] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 248 seconds)
[05:16:20] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[05:16:47] <Gustavo6046> https://i.imgur.com/vqAgHva.png
[05:16:49] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[05:16:56] <Gustavo6046> Maybe I should linlog, instead of loglog.
[05:17:04] *** Joins: nyah (~nyah@90.221.186.180)
[05:18:03] *** Joins: ittner (~ittner@2804:15e4:806b:4b00:d0be:6e97:f0a2:bf68)
[05:18:31] <Gustavo6046> InPhase: so yes, the Numpy speedup is way bigger than it looked in the earlier graphs, but only because I didn't account for the # of timeit samples :D
[05:18:33] *** Quits: ittner (~ittner@2804:15e4:806b:4b00:d0be:6e97:f0a2:bf68) (Client Quit)
[05:18:57] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Quit: Leaving)
[05:20:47] <Gustavo6046> lol
[05:20:53] <Gustavo6046> object creation takes longer than actually ticking
[05:21:06] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:21:08] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 272 seconds)
[05:22:24] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 272 seconds)
[05:22:46] <Gustavo6046> because it's done one at a time
[05:23:15] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[05:24:07] *** Joins: y1n (~y1n@84-115-65-19.wifi.dynamic.surfer.at)
[05:25:10] *** Joins: BlessJah (~BlessJah@user/blessjah)
[05:25:13] *** Joins: xnbq (~xnbq@user/xnbq)
[05:25:21] *** Quits: xnbq (~xnbq@user/xnbq) (Client Quit)
[05:26:11] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[05:26:53] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:30:22] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[05:32:55] *** Joins: fikran (~fikran@user/fikran)
[05:34:00] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[05:34:02] *** Joins: vlm (~vlm@user/vlm)
[05:34:10] *** Joins: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz)
[05:34:31] *** Joins: cjb` (~cjb@user/cjb)
[05:35:08] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[05:35:16] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[05:35:29] *** cjb is now known as Guest8286
[05:35:29] *** cjb` is now known as cjb
[05:35:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:36:09] *** Quits: Guest8286 (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:38:46] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:38:52] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[05:39:08] *** brabrax_ is now known as brabrax
[05:40:26] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[05:43:29] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 252 seconds)
[05:44:09] *** Quits: audiophile (~notanaudi@user/audiophile) (Ping timeout: 248 seconds)
[05:44:29] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:45:05] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:48:50] *** Joins: JavaBean (~JavaBean@user/javabean)
[05:49:56] *** Joins: dulanic2 (~dulanic@47.187.144.163)
[05:50:12] *** Joins: knipster5 (~knipster@user/knipster)
[05:50:33] *** Joins: radu2424078 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[05:50:35] <Gustavo6046> https://termbin.com/pf2x this should be the latest version, mypy doesn't complain (assuming you have data-science-types), I have a good feeling about this one
[05:50:48] *** Joins: asdfasdf (~Barones@2804:48dc:8500:0:cce1:fa73:7a9d:9857)
[05:50:49] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[05:50:59] *** Joins: pacbard_ (~pacbard@user/pacbard)
[05:51:29] <Gustavo6046> This is just Phys2_Numpy of course https://i.imgur.com/w9f6sU9.png
[05:51:32] *** Joins: milosz_ (~milosz@user/milosz)
[05:51:37] <Gustavo6046> Still astonishingly fast! :)
[05:51:39] *** Joins: sunny934 (~sunny93@wireguard/tunneler/sunny93)
[05:51:42] *** Joins: catdog2 (~quassel@2001:470:50f7:cdcd::cd1)
[05:51:56] *** Joins: erica4 (~erica@user/erica)
[05:52:06] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[05:52:11] *** Joins: Maikel8 (~Maikel@130.61.63.136)
[05:52:29] *** Joins: raydeeam_ (uid325131@dgplug/raydeeam)
[05:52:32] *** Joins: dez_ (uid92154@user/dez)
[05:52:33] *** Joins: snalty_ (~Shhh@user/snalty)
[05:52:35] *** Joins: dzz0071 (~dzz007@user/dzz007)
[05:52:36] *** Joins: kenwoodfox_ (~quassel@user/kenwoodfox)
[05:52:39] *** Joins: bim9262_ (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[05:52:39] *** Joins: Milos_ (~Milos@user/milos)
[05:52:41] *** Joins: henbruas_ (~henbruas@ti0003a400-3211.bb.online.no)
[05:52:41] *** Joins: roniez_ (~roniez@nixsec.se)
[05:52:54] *** Joins: nbin_ (~nbin@user/nbin)
[05:53:23] *** Joins: stpz (~stpz@240e:341:2298:ea00:a93f:6a97:6309:aa11)
[05:53:29] *** Joins: andrewSC_ (~andrewSC@archlinux/trusteduser/andrewSC)
[05:53:29] *** Joins: kurtthem1ker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[05:53:35] *** Joins: irrgit_ (~irrgit@192.241.175.183)
[05:53:40] *** Joins: t3nj1n_ (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[05:53:47] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[05:53:50] *** Joins: cyberpear_ (uid364019@fedora/cyberpear)
[05:53:54] *** Joins: rany_ (~rany@user/rany)
[05:54:04] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[05:54:24] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e8d6:b4f8:666:c83e) (Ping timeout: 276 seconds)
[05:54:46] *** Joins: twobitsp1ite (~twobitspr@195.181.171.244)
[05:54:49] *** Joins: AquaL1te_ (~AquaL1te@user/aqual1te)
[05:54:52] *** Joins: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[05:55:01] *** Joins: fflam_ (~mdt@ip70-179-20-127.sd.sd.cox.net)
[05:55:08] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Read error: Connection reset by peer)
[05:55:08] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: knipster (~knipster@user/knipster) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: dzz007 (~dzz007@user/dzz007) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: sus (thelounge@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[05:55:08] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Read error: Connection reset by peer)
[05:55:08] *** Quits: Pandadub (~Barones@2804:48dc:8500:0:c40f:d26f:c0e2:127b) (Remote host closed the connection)
[05:55:08] *** Quits: catdog (~quassel@birdperson.tuxzone.org) (Quit: No Ping reply in 120 seconds.)
[05:55:08] *** Quits: pacbard (~pacbard@user/pacbard) (Remote host closed the connection)
[05:55:08] *** Quits: nbin (~nbin@user/nbin) (Quit: ZNC - https://znc.in)
[05:55:08] *** Quits: dimbag (~dimbag@pppoe38h127.ppp.kmv.ru) (Remote host closed the connection)
[05:55:08] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Remote host closed the connection)
[05:55:08] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Remote host closed the connection)
[05:55:08] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Read error: Connection reset by peer)
[05:55:08] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Quit: No Ping reply in 180 seconds.)
[05:55:08] *** Quits: erica (~erica@user/erica) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:55:08] *** Quits: DerHorst (~derhorst@181.206.208.35.bc.googleusercontent.com) (Quit: ZNC - https://znc.in)
[05:55:08] *** Quits: dez (uid92154@user/dez) (Read error: Connection reset by peer)
[05:55:08] *** Quits: snalty (~Shhh@user/snalty) (Quit: ZNC 1.8.2 - https://znc.in)
[05:55:08] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.9.x-nightly-20210409-e0ffdddd - https://znc.in)
[05:55:08] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[05:55:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[05:55:08] *** Quits: roniez (~roniez@nixsec.se) (Quit: ZNC 1.8.2 - https://znc.in)
[05:55:08] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (Quit: ZNC - https://znc.in)
[05:55:08] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[05:55:08] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) (Read error: Connection reset by peer)
[05:55:08] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Read error: Connection reset by peer)
[05:55:08] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: No Ping reply in 180 seconds.)
[05:55:08] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: Dan39 (~dan@user/dan39) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: irrgit (~irrgit@192.241.175.183) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Remote host closed the connection)
[05:55:08] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: twobitsprite (~twobitspr@195.181.171.244) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: fflam (~mdt@ip70-179-20-127.sd.sd.cox.net) (Remote host closed the connection)
[05:55:08] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Remote host closed the connection)
[05:55:08] *** Quits: Superstars111 (~jared@li227-215.members.linode.com) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 272 seconds)
[05:55:09] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 272 seconds)
[05:55:09] *** Maikel8 is now known as Maikel
[05:55:09] *** dulanic2 is now known as dulanic
[05:55:09] *** knipster5 is now known as knipster
[05:55:09] *** radu2424078 is now known as radu242407
[05:55:09] *** erica4 is now known as erica
[05:55:09] *** sunny934 is now known as sunny93
[05:55:09] *** henbruas_ is now known as henbruas
[05:55:09] *** dzz0071 is now known as dzz007
[05:55:10] *** bim9262_ is now known as bim9262
[05:55:10] *** raydeeam_ is now known as raydeeam
[05:55:11] *** dez_ is now known as dez
[05:55:11] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Remote host closed the connection)
[05:55:11] *** cyberpear_ is now known as cyberpear
[05:55:12] *** Quits: michaelis (~michaelis@193.183.209.17) (Remote host closed the connection)
[05:55:14] *** Quits: KeiraT (~k@lulzsec.co.uk) (Remote host closed the connection)
[05:55:16] *** Quits: digilink (~digilink@user/digilink) (Remote host closed the connection)
[05:55:20] *** Quits: ornxka (~ornxka@user/ornxka) (Remote host closed the connection)
[05:55:20] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:55:22] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[05:55:22] *** Joins: Dan39 (~dan@user/dan39)
[05:55:22] *** Joins: BUSY (~BUSY@user/busy)
[05:55:22] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net)
[05:55:23] *** Joins: iflema (~ian@user/iflema)
[05:55:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:55:26] *** Joins: oatmealraisin (~ryan@2603-7000-4000-7c46-0000-0000-0000-16d9.res6.spectrum.com)
[05:55:34] *** Joins: bn_work (uid268505@highgate.irccloud.com)
[05:55:36] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[05:55:39] *** Joins: digilink (~digilink@user/digilink)
[05:55:43] *** Joins: sus (thelounge@user/zeromomentum)
[05:55:45] *** Joins: ornxka (~ornxka@user/ornxka)
[05:55:46] *** Joins: JavaBean (~JavaBean@user/javabean)
[05:55:47] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[05:55:53] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:55:56] *** Joins: KeiraT (~k@lulzsec.co.uk)
[05:56:02] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[05:56:43] *** Joins: Elzington_ (~Elzington@68.235.43.28)
[05:57:30] *** Joins: icy (~icy@user/icy)
[05:58:01] *** Quits: Elzington (~Elzington@68.235.43.21) (Ping timeout: 248 seconds)
[05:58:26] *** Quits: kmh (~kmh@p200300df5f031500dc05e9b97966e73c.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[05:58:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[05:59:27] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[05:59:33] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[06:00:26] *** Joins: michaelis (~michaelis@193.183.209.17)
[06:01:15] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[06:04:39] *** Quits: Strom (strom@fedora/strom) ()
[06:05:54] <oatmealraisin> Hello all, I'm trying to make a utility class for a set of parameters to another class
[06:06:22] *** Quits: ente_ (~ente@p200300dc5f058f00b82813af5062e873.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:06:44] *** Joins: Strom (strom@fedora/strom)
[06:07:11] <oatmealraisin> it basically needs to be a list of floats, but I'm hoping I can also index it by strings. the list needs to be ordered, though, and the order needs to persist across instances
[06:07:33] <oatmealraisin> Right now i'm just extending the dict in my class, and I have a class variable of the order of the keys that i need
[06:07:48] <oatmealraisin> is that the best way to do that? is there something I'm missing?
[06:07:52] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[06:08:12] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[06:08:30] *** Joins: ente_ (~ente@p200300dc5f0b7b0077d687d8c50841ea.dip0.t-ipconnect.de)
[06:10:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[06:10:20] *** Joins: matsaman (~matsaman@user/matsaman)
[06:11:21] *** Quits: y1n (~y1n@84-115-65-19.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[06:12:03] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[06:12:19] <grym> oatmealraisin: https://bpa.st/7TDQ ?
[06:14:19] <InPhase> oatmealraisin: How do you want to set the values?  Will you always have all keys in the ordered set present in the dict?
[06:16:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[06:16:14] <oatmealraisin> InPhase: it'd be great to be able to create the objects similar to dicts. As a validation step I'm making sure the keys remain the same, although I'm sorting them alpha (they're strings) when they're referenced
[06:16:45] <InPhase> oatmealraisin: Well you can make dicts all at once, or you can fill in values iteratively.
[06:16:51] <oatmealraisin> grym: this is a really cool trick, i'll definitely be using this in the future.. no more huge __init__'s haha
[06:17:06] <InPhase> oatmealraisin: If you fill them iteratively, then there are unset values for a while.
[06:17:09] <grym> oatmealraisin: indeed
[06:17:30] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 272 seconds)
[06:18:00] <oatmealraisin> InPhase: That's a good point. because I'm expecting there to be a set of them, I don't think I can support setting individual values after creation, since then the keys would be out of sync
[06:18:18] <stpz> from urllib.request import urlopen
[06:18:19] <stpz> with urlopen('url_addr') as response:
[06:18:19] <stpz>     for line in response:
[06:18:20] <stpz>         print(line)
[06:18:25] <grym> oatmealraisin: then throw a frozen=True into that @s
[06:18:58] <InPhase> oatmealraisin: Then grym's solution sounds reasonably viable for you.  Note that you can also label in the constructor, like Foo(x=1.1, y=2.2, z=3.3)
[06:19:18] <grym> and you can force naming with kwargs=True
[06:19:40] <grym> i like @attr.s(frozen=True, kw_only=True, auto_attribs=True) for thi s
[06:19:42] <oatmealraisin> grym: do I have to include lines 4 thru 6 in your example? I can't know the variable names ahead of time
[06:19:57] <oatmealraisin> I'm looking up the documentation for attr now
[06:19:57] <grym> oatmealraisin: then you kind of want a dict
[06:20:04] <grym> there is attr.make_class
[06:20:15] <grym> but i kind of hate classes with attributes i don't know about
[06:21:00] <oatmealraisin> Yeah, luckily they're all pretty much the same. This is for a data scientist to use, basically just on OOP representation of a state
[06:21:04] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-8187-3887-37f5-8cee.res6.spectrum.com)
[06:21:15] <oatmealraisin> gets imported from a csv on creation, but the columns change as they try out new fields
[06:21:24] <InPhase> oatmealraisin: Wait wait wait.  How are you going to ensure the keys across instances are the same if you don't know them ahead of time?  Something is missing from the spec here.
[06:21:25] <grym> yich
[06:21:33] <grym> InPhase: "csv" :)
[06:21:44] <InPhase> Ok.
[06:21:45] <oatmealraisin> InPhase: class variables are persistent across instances, yes?
[06:21:58] <InPhase> oatmealraisin: Have you tried just using pandas then?  :)
[06:22:10] <InPhase> This is already a solved problem.
[06:22:54] <oatmealraisin> Yeah maybe i'm trying to force an object structure onto this
[06:22:56] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[06:23:20] <InPhase> DataFrames are an object too.  :)
[06:23:43] <oatmealraisin> True.. i could extend those.. hmm
[06:23:44] <grym> this is a farly pandasy thing to want, yes
[06:23:55] <grym> they're extended enough, thanks!
[06:24:15] <oatmealraisin> hehe right? so much already
[06:24:20] <InPhase> It's probably a bad idea to extend pandas.  What additional functionality do you want?
[06:24:24] *** Joins: y1n (~y1n@84-115-65-19.wifi.dynamic.surfer.at)
[06:24:39] *** Quits: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:25:16] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:25:20] *** Joins: Skyfire (~pyon@user/pyon)
[06:25:45] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Ping timeout: 248 seconds)
[06:25:46] <oatmealraisin> InPhase: just helper functions for exploration, also stuff to help interface with a GraphQL frontend another team is building
[06:26:15] <InPhase> oatmealraisin: You can use functions, or objects containing your dataframe, to solve these sorts of problems.
[06:26:24] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[06:26:27] <InPhase> free functions, that is.
[06:26:35] <oatmealraisin> free functions?
[06:26:41] <oatmealraisin> like not methods?
[06:26:44] <nedbat> oatmealraisin: plain-old functions
[06:26:46] <grym> ohboy
[06:26:46] <InPhase> Right.
[06:26:55] *** Joins: Haxxa (~Haxxa@122-199-44-36.ip4.superloop.com)
[06:27:05] <grym> oatmealraisin: they're first class citizens for a reason
[06:27:24] <InPhase> It will probably be less fragile than extending a very complicated library like pandas.
[06:27:26] <oatmealraisin> grym: im not sure what that means ._.
[06:28:08] <grym> oatmealraisin: python functions are 'first class citizens': they don't need to be tucked away in classes, they're passable, etc.
[06:28:57] *** Quits: hyper_dave (~hyper_dav@197.156.107.78) (Ping timeout: 248 seconds)
[06:29:19] <grym> so just write some that take and return dataframes
[06:29:30] <grym> and then people will import them and call them if needed
[06:30:10] *** Joins: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467)
[06:30:22] *** Quits: blddk (~admin@185.233.252.229) (Quit: ZNC 1.8.2 - https://znc.in)
[06:30:51] *** Joins: blddk (~admin@185.233.252.229)
[06:30:57] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[06:31:00] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[06:31:30] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[06:31:33] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Client Quit)
[06:31:44] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[06:32:08] <stpz> hello, guys! I want to write a small page content getting program and paste a snappet of this code(dont remember where):
[06:32:08] <stpz>         from urllib.request import urlopen
[06:32:09] <stpz>         with urlopen("https://www.163.com") as response:
[06:32:09] <stpz>                 for line in response:
[06:32:10] <stpz>                 print(line)
[06:32:10] <stpz> at first it works fine, but some times later it displays: ModuleNotFoundError: No module named 'http.client'; 'http' is not a package.
[06:32:11] <stpz> How can i fix this? I am new to python, any suggestions would great favour to me.. thanks
[06:34:31] <matsaman> how're you running it?
[06:35:02] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[06:35:08] <stpz> in Idle, python 3.9.6. windows10 64bit
[06:35:13] *** Joins: bigRoo (~user@131.236.55.20)
[06:36:12] <nedbat> stpz: what did you name your file?
[06:36:32] *** Quits: lucasb (uid333435@id-333435.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[06:36:36] <stpz> the first time i run it, it can runs normally, but the second day when i ran again, it run errors
[06:36:41] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:37:23] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:37:36] <stpz> i copy it to several different named files, it all failed then
[06:37:48] <nedbat> stpz: was one of them called http.py?
[06:39:26] <stpz> yes. right, python/lib/http/client.py
[06:39:54] *** Milos_ is now known as Milos
[06:40:24] <nedbat> stpz: let's talk about the names you have given to your file.  did you name it http.py?
[06:40:56] <nedbat> stpz: or, what did you mean by "i copy it"?  Copy what?
[06:41:05] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[06:41:35] *** Joins: irreitug_ (uid23254@id-23254.tooting.irccloud.com)
[06:41:36] <stpz> how do you know that, one of files was named http, another one named browse
[06:42:00] <nedbat> stpz: delete the http.py file you made, and delete the __pycache__ directory if there's one there.
[06:43:06] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[06:43:31] <stpz> ok , i will try it as that
[06:43:48] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:44:59] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[06:45:10] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[06:48:27] *** Quits: emerent (~quassel@p200300cd57058ca1ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:48:53] *** Joins: emerent (~quassel@p200300cd57058c89ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:49:33] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:49:39] <Gustavo6046> I wonder if I can train a decision tree to make tracker music for me
[06:50:26] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[06:50:33] <stpz> thanks to nedbat, with your help the problem is solved, i am so pleased for that. no more words can express my appreciations~
[06:50:42] <Gustavo6046> :)
[06:50:50] <Gustavo6046> wholesome
[06:50:53] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-8187-3887-37f5-8cee.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[06:51:34] <stpz> have lucky! guys
[06:52:12] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[06:53:32] *** Joins: summersault (~summersau@179.221.251.16)
[06:55:10] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[06:55:41] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:56:24] *** Joins: djapo (~archangel@user/djapo)
[06:58:09] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[06:58:32] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:809b:1f79:f476:cd29)
[06:58:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:58:36] *** FinnElija is now known as Guest6250
[06:58:36] *** Quits: Guest6250 (~finn_elij@user/finn-elija/x-0085643) (Killed (sodium.libera.chat (Nickname regained by services)))
[06:58:36] *** finn_elija is now known as FinnElija
[06:59:00] *** irreitug_ is now known as irreitug
[06:59:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:00:57] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 248 seconds)
[07:02:43] <sybariten> how could i write a function to make sure that everyu dictionary item complies to a certain format?  Its a multi dimensional dict so the values contain sub-dictionaries
[07:03:35] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[07:03:59] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[07:07:04] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[07:07:06] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[07:07:57] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[07:10:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 272 seconds)
[07:11:42] *** Quits: y1n (~y1n@84-115-65-19.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[07:12:47] <stpz> new learner i am， don't know what dictionary it is yet. but if your know how to access a directory content int it, this one should be easy i think, it should be a for nestd for structur i think
[07:13:12] <matsaman> sybariten: without knowing how many levels? You'd have to recurse each branch
[07:13:33] <matsaman> the compliance part would be less complicated
[07:13:52] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[07:14:32] <sybariten> matsaman: not sure i understand, but i do know the exact structure myuself yes
[07:15:48] <matsaman> well, what part are you having trouble with? Do you have an example dictionary and format?
[07:15:52] <sybariten> more specifically it's the country_data structure here:  https://bpa.st/YC6A
[07:16:44] <sybariten> As you can see, the countries have areas, id's and populations. But i also know that there are just a few countries that lack some of this data . I somehow need to exclude these countries
[07:17:39] <sybariten> I have no clue yet how to exclude them in further operations but i have a hunch that i will need a function that will simply look at an item (?) and return true or false whether it complies to this struycture or not
[07:20:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:23:38] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[07:25:14] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Ping timeout: 252 seconds)
[07:25:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[07:27:04] *** Joins: beencubed (~beencubed@209.131.238.248)
[07:27:15] <matsaman> sybariten: [i for i in country_data if country_data[i].get('area') and country_data[i].get('population')]
[07:28:57] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[07:29:31] <matsaman> sybariten: just have to loop through the items, and check them and except on them however you please
[07:29:51] <matsaman> obviously you can check if those keys even exist (as with .get())
[07:30:00] <matsaman> and you can further check if their values are valid
[07:30:49] *** Quits: skered (~dereks@user/skered) (Ping timeout: 258 seconds)
[07:30:55] <sybariten> i'm experimenting with len() now ...
[07:30:56] <matsaman> is 'area' a float, is 'id' an int, is 'population' a tuple, and so forth
[07:31:30] <matsaman> yeah, do they have the expected len value, sure
[07:32:37] <sybariten> so, i'm doing this now ...  https://bpa.st/XFAQ   but, i'm probably adressing the wrong thing.  "details"  here will be , uh, gosh i'm too tired to think, but anyuhow the len() is 3
[07:33:38] <sybariten> i wanted to somehow check len(details["area"]) to see that this was 1, meaning that there is a value in "area" . And if area is empty, it would maybe be 0 . But i'm probably thinking wrong. len(details["area"]) was a float, i dunno, its maybe the actual value or something?
[07:34:26] *** Quits: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net) (Quit: Quitting)
[07:34:29] <sybariten> I'm sorry, i don't explain it very well
[07:38:05] <matsaman> I'm not sure why you'd check the length of the values other than the top level
[07:38:35] <matsaman> if you think they all should have 3 values (area, id, population), you can loop through and skip if len(item) != 3
[07:38:56] *** vinleod is now known as vdamewood
[07:39:01] <matsaman> for the rest I would check if they were seen as float, int, & tuple respectively
[07:39:08] <matsaman> and for the tuple you could check its length, I guess
[07:39:17] <sybariten> so len in that case counts... it doesnt count the pairs? It counts just values?
[07:39:53] *** Quits: LiftLeft (~LiftLeft@154.21.28.119) (Ping timeout: 248 seconds)
[07:40:22] <matsaman> well a dictionary has both
[07:40:27] <matsaman> so you could say pairs
[07:40:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:40:58] <matsaman> with {'Afghanistan':{}}, you have one pair, the value is another dictionary
[07:40:59] <sybariten> ok... but if you look at something like Afghanistan there in the paste i posted earlier
[07:41:05] <matsaman> and then in that other dictionary you have more pairs
[07:41:08] <matsaman> of which you desire there to be 3
[07:41:26] <sybariten> yes
[07:42:14] *** Joins: fikran (~fikran@user/fikran)
[07:42:34] <sybariten> so i'm a bit at loss at what i should count, for instance at the top level of afghanistan
[07:43:01] <matsaman> at the top level you can county the length of the value matched to the key ('Afghanistan')
[07:43:11] <matsaman> can count*
[07:43:15] <sybariten> can i count something and see that there are three population values, already from the top level? Or do i need another loop
[07:43:32] <matsaman> you can do that at the same time you do everything else in the loop if you want, yeah
[07:44:45] <sybariten> this here gives three for instance   len(emission_data.country_data["Afghanistan"])
[07:45:01] <matsaman> len(country_data['Afghanistan'].get('population'))
[07:45:12] <sybariten> and i suspect it would give 3 even if there was only two population values instead of the required three?
[07:45:35] <sybariten> what actually happens when you hang a .get method on it there?
[07:45:44] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:45:56] <matsaman> well that's not your issue
[07:46:15] <matsaman> country_data['Afghanistan'] gives you the value for the key Afghanistan
[07:46:31] <matsaman> that value is a dictionary, it's len is 3 because it is a dictionary with three items: area, id, population
[07:46:46] <sybariten> yes
[07:47:06] <matsaman> if instead you get the len of _'population'_ within Afghanistan's value dictionary (len(country_data['Afghanistan'].get('population'))), you will also get 3
[07:47:11] <matsaman> because it is a 3-item tuple
[07:48:00] <matsaman> using .get('foo') instead of ['foo'] can just be useful to avoid errors
[07:49:09] <matsaman> {'foo':1}.get('bar') vs {'foo':1}['bar']
[07:50:11] <matsaman> whether you use .get() or not, ['Afghanistan'] is 3 because of area,id,population and ['Afghanistan']['population'] is 3 because of the three tuple items
[07:50:57] <matsaman> not really clear to me why population has more than one number, and why it should have exactly three if more than one =)
[07:51:04] <matsaman> but that's another matter
[07:54:35] *** Joins: figgle77 (~figgle77@137.28.231.187)
[07:55:01] <sybariten> matsaman: population has three different numbers because it's for three different (fixed) years  :)
[07:55:45] <sybariten> so i'm suspecting i will need to do two tests now then, for each country! something like this:  https://bpa.st/RUCA
[07:56:47] <matsaman> looks fine, although if you check the length of population you may as well check that id is there and an int, and area is there and a float
[07:56:53] <matsaman> but I'm sure you'll work it out
[07:56:56] <sybariten> well, some error there apparently...   TypeError: object of type 'bool' has no len()
[07:56:59] *** Joins: djapo (~archangel@user/djapo)
[07:57:09] <matsaman> sorry
[07:57:48] <matsaman> you probably want
[07:58:45] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[07:58:51] <matsaman> you're missing a closing parenthesis )
[07:59:13] <matsaman> len(details.get('population')) != 3:
[07:59:30] <matsaman> well, you have a parenthesis in the wrong place rather =)
[08:00:04] *** Joins: Samian (~Sami@2620:10d:c091:480::1:ab1a)
[08:00:14] <sybariten> yeah i figure somethign like that
[08:00:43] <Samian> one thing I love about python is that if I have a question about the language, it's so easy to open an terminal, type python, and try the command I have questions about.  Can I test out the c++ as easily? Nope.
[08:01:17] *** Joins: LiftLeft (~LiftLeft@154.21.114.108)
[08:04:26] <sybariten> matsaman: i think it works! it reported false for a country that was incomplete, and true for others i tested!  THANK YOU so much
[08:06:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:07:21] <matsaman> =)
[08:07:30] <sybariten> matsaman: btw another kind of unrelated thing ... if you check the paste i did last now, the one that had a faulty parenthesis somewhere....   my for loop is build like this,  for name, details in countryDict.items():     now, i'm only operating on "details" after that. My IDE maybe finds this strange because the "name" variable is greyed out, the syntax checker sees that it's unused. Should the
[08:07:32] <sybariten> for loop have been written differently?
[08:08:29] <sybariten> bad wording ...  "you can tell that my IDE finds it suspicious that i'm referencing name, cause it is greyed out. Which i guess is because it's not referenced later"
[08:08:31] <matsaman> I mean, arguably, if you never use name
[08:08:44] <jochum> sybariten: for _, details in ... ?
[08:08:50] <matsaman> you can do for details in countryDict:
[08:09:00] <jochum> ^ better
[08:09:21] <sybariten> but if i just do for details.... uh ... how should i say this .... ehm, how will python know that i mean the right column of this imaginary table?  :)
[08:09:24] <matsaman> it's nice your IDE indicates it's unused, but it's really not a big deal
[08:09:38] *** Joins: tijuco (~tijuco@user/tijuco)
[08:09:42] <matsaman> well it's not columns
[08:10:12] <sybariten> that i mean the .. values, and not the keys. "details" is jsut a variable i'm using at run time in the loop, how can it connect a single variable to the right-hand part specifically?  (is this question understandable at all)
[08:10:17] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 268 seconds)
[08:10:24] *** Joins: uuair_cc (~uuair_cc@user/uuair-cc/x-6605542)
[08:10:34] <matsaman> try for details in countryDict: print(details)
[08:10:43] <sybariten> good idea
[08:10:49] *** Quits: LiftLeft (~LiftLeft@154.21.114.108) (Ping timeout: 248 seconds)
[08:12:15] <matsaman> to inform yourself, try that
[08:12:16] <sybariten> But i _did_ get the "left-hand" side now, if i do that. I get the country names
[08:12:19] <jochum> theres also pprint you might like "import pprint; pprint.pprint(countryDict);"
[08:12:45] <matsaman> sybariten: you're trying to get 'area', 'id', 'population'?
[08:12:48] <matsaman> what for?
[08:13:47] <sybariten> no i mean, i'm tryuing to understand this IDE grey thing or more specifically if thjere would have been another way to write that loop. Its no big deal if the IDE greys out a variable , i just want to know if i was doing an unnecessary thing in the for loop
[08:14:13] <sybariten> matsaman: and yes with details only, i was trying to get area,id,population
[08:14:35] <jochum> matsaman: does he mean countryDict.values() ?
[08:14:40] *** Joins: Mija (~Mija@user/mija)
[08:15:17] <matsaman> I'm assuming it means what you guessed it means: that you haven't used the variable
[08:15:23] <matsaman> jochum: <shrug>
[08:15:25] <sybariten> actually i'm operating on countryDict.items() but maybe i'm misunderstanding something
[08:15:28] <matsaman> but I don't know your IDE
[08:15:36] <jochum> matsaman: hehe :/
[08:15:57] <jochum> Can't remember the default ... but in this case its values
[08:17:21] <sybariten> hmm yeah this is not so important but actually we can forget about the IDE  - if we just look at this paste  https://bpa.st/RUCA      is using "for name, details" the most logical way i could have done this, or could i have done something to exclude "name" ?
[08:17:31] <matsaman> you can do for name,details in countryData.items(), or for details in countryData.items(), or for details in countryData
[08:17:52] <matsaman> you can simply omit 'name,' in this case
[08:18:41] <matsaman> and it should work the same, but without a variable you aren't using
[08:18:59] <sybariten> this is what i get using for name, details     {'area': 241038.0, 'id': 195, 'population': (17354395, 27684590, 41166588)}
[08:19:15] <matsaman> that's details
[08:19:23] <sybariten> this is what i get using for details  ('Uzbekistan', {'area': 448978.0, 'id': 201, 'population': (20398347, 26427785, 31959774)})
[08:19:23] <matsaman> if you do for details, you'll also get details
[08:19:39] <matsaman> oh, sorry you're right
[08:19:48] <sybariten> the former is what i want ... but my head is like porridge at this time so i dunno ...
[08:20:07] <matsaman> then maybe what jochum said is the case
[08:20:18] <sybariten> basically i needed to do something like for alpha,beta    i supposew
[08:20:24] <matsaman> .values() instead of .items()
[08:21:09] <sybariten> ahaaaAAAaaaa
[08:21:19] <sybariten> ofcourse . Thats maybe prettier then, in this case
[08:21:25] <matsaman> lot of ways you can do it, but that's probably what you seem to want
[08:21:30] <sybariten> well, bed for me, thanks guys!!
[08:21:35] <matsaman> adios
[08:21:42] <jochum> gute Nacht
[08:21:48] <jochum> good night in German
[08:21:56] <matsaman> =)
[08:22:41] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Remote host closed the connection)
[08:23:32] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 272 seconds)
[08:23:39] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[08:25:12] <sybariten> haha yep i know that one, my girlfriend is from Dresden  ;-)
[08:25:12] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:26:54] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Remote host closed the connection)
[08:27:39] <dre> you're welcome.
[08:27:42] <dre> is there a way in python
[08:27:51] <dre> to have the same value across two enums?
[08:28:01] <dre> seeming as you can't really "extend" enums
[08:28:21] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[08:28:33] <dre> something like "Animals" and "Marsupials" such that Animals.X == Marsupials.X
[08:28:34] <dre>  ?
[08:28:36] *** Quits: oatmealraisin (~ryan@2603-7000-4000-7c46-0000-0000-0000-16d9.res6.spectrum.com) (Ping timeout: 272 seconds)
[08:29:14] <jochum> dre: please give input and output, else I don't understand
[08:29:36] *** fjmorazan_ is now known as fjmorazan
[08:30:02] <jochum> ["Animals", "Marsupials"] -> ?
[08:31:26] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[08:32:24] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Remote host closed the connection)
[08:32:35] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Quit: Leaving)
[08:33:13] <jochum> dre: after thinking what about this: https://stackoverflow.com/a/33680929/3368468 ?
[08:33:46] *** Joins: tims (~tims@61.69.131.46)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:29] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:37] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[08:38:08] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Remote host closed the connection)
[08:39:05] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Ping timeout: 248 seconds)
[08:39:22] *** Quits: mkoskar (~mkoskar@user/mkoskar) (Ping timeout: 272 seconds)
[08:39:57] *** Quits: bn_work (uid268505@highgate.irccloud.com) (Quit: Connection closed for inactivity)
[08:41:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[08:41:21] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[08:42:36] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[08:42:48] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:809b:1f79:f476:cd29) (Quit: Client closed)
[08:42:56] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[08:44:14] <dre> jochum, is there any way to do soemthing like this? https://bpa.st/3LOQ
[08:44:33] <dre> aenum looks a lot hackier than something like ^
[08:44:34] <dre> but i don'
[08:46:23] <jochum> dre: the author of aenum in stackoverlfow claims to be the author of enum too, he says no to your question.
[08:50:31] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[08:52:05] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 258 seconds)
[08:53:18] <FunkyBob> dre: but I see you already did :)
[08:53:23] <dre> :D
[08:56:40] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[08:57:45] *** Quits: pgib (~textual@173.38.117.78) (Ping timeout: 248 seconds)
[08:59:07] *** Joins: mickey8 (~user@user/mickey)
[09:01:51] *** Joins: mci64 (~mci64@185.242.190.95)
[09:02:15] *** Quits: mci64 (~mci64@185.242.190.95) (Client Quit)
[09:03:22] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 256 seconds)
[09:07:00] *** Joins: rany (~rany@user/rany)
[09:08:54] *** Parts: uuair_cc (~uuair_cc@user/uuair-cc/x-6605542) ()
[09:09:07] *** Joins: FatDarrell (~textual@68.91.156.229)
[09:09:37] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[09:10:57] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:11:31] *** Joins: rany_ (~rany@user/rany)
[09:11:37] *** Quits: rany (~rany@user/rany) (Ping timeout: 248 seconds)
[09:12:51] *** Joins: LiftLeft (~LiftLeft@212.102.58.170)
[09:13:53] *** Joins: rany (~rany@user/rany)
[09:13:57] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[09:14:15] *** Quits: stpz (~stpz@240e:341:2298:ea00:a93f:6a97:6309:aa11) (Quit: Client closed)
[09:15:23] *** Joins: rany_ (~rany@user/rany)
[09:15:46] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[09:17:35] *** Joins: bam32_ (~bambams@user/bambams)
[09:19:10] *** Joins: mci64 (~mci64@185.242.190.95)
[09:20:16] *** Joins: rany (~rany@user/rany)
[09:20:20] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[09:20:36] *** Quits: bam32 (~bambams@user/bambams) (Ping timeout: 268 seconds)
[09:21:36] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[09:21:39] *** Joins: rany_ (~rany@user/rany)
[09:24:34] *** Joins: Preston (~liminalcr@2600:6c5a:473f:6494::1a67)
[09:26:33] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 248 seconds)
[09:27:23] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[09:30:12] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[09:30:25] *** Quits: c10l2 (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[09:30:54] *** Joins: c10l2 (~c10l@89.34.167.207)
[09:32:05] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[09:32:51] *** Joins: stranac (~stranac@195.29.239.126)
[09:33:52] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[09:34:23] *** Joins: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz)
[09:34:49] *** Joins: rany (~rany@user/rany)
[09:35:27] <Samian> anyone know an easy way to call a function in a nonblocking manner?
[09:36:05] <Samian> and then have a barrier or synchronize call that waits for the nonblocking calls to finish before continuing?
[09:36:10] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[09:36:16] *** Joins: rany_ (~rany@user/rany)
[09:37:11] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[09:38:14] <jochum> Samian: talking about threading?
[09:38:20] <jochum> Samian: or asyncio ?
[09:38:27] *** Quits: mci64 (~mci64@185.242.190.95) (Quit: Connection closed)
[09:38:54] <jochum> brb for a while
[09:39:08] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[09:39:10] <Samian> i'll try asyncio. this is for code thats half pytorch calls and half numpy and regular python lists and some math
[09:39:38] *** Joins: rany (~rany@user/rany)
[09:40:49] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[09:40:55] *** Joins: mci64 (~mci64@185.242.190.95)
[09:41:26] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 272 seconds)
[09:42:09] *** Joins: rany_ (~rany@user/rany)
[09:44:15] *** Joins: upsala (~zcb@185.213.155.160)
[09:44:22] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:44:38] *** Quits: rany (~rany@user/rany) (Ping timeout: 268 seconds)
[09:44:48] *** Joins: rany- (~rany@user/rany)
[09:47:08] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 272 seconds)
[09:47:39] *** Joins: rany (~rany@user/rany)
[09:49:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[09:50:18] *** Quits: rany- (~rany@user/rany) (Ping timeout: 272 seconds)
[09:51:33] *** Joins: fikran (~fikran@user/fikran)
[09:51:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[09:52:33] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:52:34] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Quit: Leaving)
[09:52:50] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[09:53:31] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[09:55:29] *** Joins: rany (~rany@user/rany)
[09:56:17] <jochum> Samian: I heard in here numpy and asyncio no friends .. let me find proove
[09:58:14] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[09:59:20] <jochum> Samian: I can't find proove, I would wait until there are more people active and then ask again.
[10:00:06] *** Quits: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[10:00:26] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[10:01:29] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[10:03:41] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[10:04:03] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[10:04:17] *** Joins: rany (~rany@user/rany)
[10:06:59] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[10:07:28] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:07:44] <Samian> jochum I'll go with pytorch's multiprocessing calls
[10:08:15] *** Quits: hifi (hifi@m.vi.fi) (Remote host closed the connection)
[10:08:36] *** Joins: hifi (hifi@m.vi.fi)
[10:09:00] <jochum> Samian: does it supports signals?
[10:09:03] <bookworm> that's spawning OS threads though so you need to be a bit careful how to pass the data and it needs to be worth it
[10:10:05] <bookworm> ehw, processes*
[10:13:05] *** Joins: rany_ (~rany@user/rany)
[10:13:09] *** Joins: astrocat (~astrocat@112.134.14.141)
[10:14:15] *** Quits: rany (~rany@user/rany) (Ping timeout: 268 seconds)
[10:15:25] *** Joins: rany (~rany@user/rany)
[10:17:57] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 268 seconds)
[10:17:57] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 258 seconds)
[10:18:34] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[10:18:40] <Samian> jochum not sure. It's a basic fork and join scheme
[10:18:46] *** Joins: rany_ (~rany@user/rany)
[10:21:23] <Samian> is conda remove --all safe to run?
[10:21:27] <Samian> I'm a little paranoid
[10:21:30] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[10:21:39] *** Joins: rany (~rany@user/rany)
[10:22:13] <matsaman> Samian: --dry-run?
[10:22:26] <matsaman> I don't know much about conda
[10:22:30] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[10:23:49] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[10:25:51] *** Joins: dvx (~dvx@185.63.97.64)
[10:26:41] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[10:27:02] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[10:28:52] <bookworm> define save, what do you actually want to do? it's a venv so you can always start from scratch, no harm done
[10:28:58] <bookworm> safe*
[10:30:26] <bookworm> conda is a very shitty package manager though, extremely slow and has some nasty behaviors...
[10:30:58] <bookworm> I hate that thing... sadly it's what the scientific community uses pretty much everywhere
[10:31:07] *** Joins: rany_ (~rany@user/rany)
[10:31:28] *** Quits: astrocat (~astrocat@112.134.14.141) (Ping timeout: 272 seconds)
[10:32:45] <Samian> I ran it. It is safe
[10:32:57] <matsaman> bookworm: yeah but pip is pretty crap, too =)
[10:32:58] <Samian> bookworm  I was worried it would wipe out everything I have installed through conda
[10:32:58] <matsaman> the bar is low
[10:33:20] *** Joins: Blankspace (~abcd@user/blankspace)
[10:33:26] <bookworm> Samian: commands just affect the chosen / activated env
[10:33:42] <bookworm> you can clear the download cache but that's about it
[10:34:00] <Samian> that's what I read, but I've misread things before
[10:34:06] <bookworm> it can't destroy anything you can't get back and you certainly have a requirements file do you?
[10:34:16] <jinsun> I use mamba nowadays as replacement for conda, much faster in solving environmentt
[10:34:33] *** Joins: rany (~rany@user/rany)
[10:34:59] <jinsun> and it does parallel downloads
[10:35:14] <bookworm> there's nothing like waiting 10min for the freaking SAT solver to due it's thing only to end up with an utter useless error output that doesn't actually tell you which package the culprit is
[10:35:23] <bookworm> sums up last Tuesday for me
[10:35:45] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[10:35:54] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 272 seconds)
[10:36:10] <bookworm> the problem with mamba is the interop... it doesn't quite produce the same env as conda would as far as I understood
[10:36:18] <jinsun> yes, conda's output is completely useless when there are conflicts, and it takes an hour to do it
[10:36:32] *** Quits: LiftLeft (~LiftLeft@212.102.58.170) (Ping timeout: 272 seconds)
[10:37:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:37:22] *** Joins: astrocat (~astrocat@112.134.14.141)
[10:37:28] *** Joins: Blankspace (~abcd@user/blankspace)
[10:37:38] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[10:37:48] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Quit: Leaving)
[10:38:06] <bookworm> matsaman: wasn't there a guy who improved pip's resolver as part of some study program or outreachy or whatever? I remember to have seen a talk at one of the python conferences
[10:38:32] *** Joins: rany_ (~rany@user/rany)
[10:38:42] <matsaman> honestly, the resolver wasn't a problem I had with it
[10:38:48] *** Joins: Blankspace (~abcd@user/blankspace)
[10:38:52] <matsaman> (although the lengthy improvement of it caused many problems)
[10:39:01] * matsaman shrugs
[10:39:08] *** Quits: rany (~rany@user/rany) (Ping timeout: 256 seconds)
[10:39:26] *** Quits: ckdcreation (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[10:39:42] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[10:39:57] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[10:40:52] *** Joins: rany (~rany@user/rany)
[10:41:02] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[10:41:03] <FH_thecat> I am using "re" for regex matching
[10:41:08] <FH_thecat> but, first I need to escape special characters in my pattern, such as "=", ">", "(", ")"
[10:41:18] <FH_thecat> the pattern that I am matching is 'same => n,Macro(record)'
[10:41:29] <FH_thecat> print('%s' % args.pattern )
[10:41:29] <FH_thecat> same => n,Macro(record)
[10:41:35] <FH_thecat> print('%s' % re.escape(args.pattern))
[10:41:35] <FH_thecat> same\ =>\ n,Macro\(record\)
[10:41:40] <FH_thecat> this is wrong!
[10:41:46] <FH_thecat> the re.escape escapes spaces instead of "=" or ">"
[10:42:35] <bookworm> neither = nor > are regex special chars
[10:42:39] *** Joins: Blankspace (~abcd@user/blankspace)
[10:42:48] <bookworm> why would you think they get escaped?
[10:42:52] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 272 seconds)
[10:43:04] *** Joins: rany_ (~rany@user/rany)
[10:43:11] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[10:43:15] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[10:43:29] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[10:43:36] *** Joins: Blankspace (~abcd@user/blankspace)
[10:43:36] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Client Quit)
[10:43:50] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[10:44:29] *** Joins: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f)
[10:45:05] <bookworm> considering your example though, regexes might not be the right tool for the job anyhow
[10:45:34] *** Joins: rany (~rany@user/rany)
[10:45:53] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[10:45:53] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:02] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[10:46:13] <FH_thecat> bookworm: OK, so what would be a better solution ?
[10:46:25] *** Joins: seednode (~seednode@user/seednode)
[10:46:26] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[10:46:49] *** Joins: kosh (~kosh@user/kosh)
[10:46:52] <bookworm> what do you actually want to do? same\ =>\ n,Macro\(record\) is nothing that looks reasonable to parse with a regex engine
[10:47:25] *** Joins: Blankspace (~abcd@user/blankspace)
[10:47:35] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[10:48:47] *** Joins: rany_ (~rany@user/rany)
[10:49:57] *** Joins: rendar (~rendar@user/rendar)
[10:50:36] *** Joins: jaggz (~jaggz@user/jaggz)
[10:50:49] *** Quits: rany (~rany@user/rany) (Ping timeout: 248 seconds)
[10:51:08] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[10:51:11] <jaggz> how do I make delete, in vim, gobble up spaces like it would tabs?
[10:51:16] *** Joins: rany (~rany@user/rany)
[10:51:21] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 248 seconds)
[10:51:55] <bookworm> set smarttab
[10:52:00] *** Joins: manti7 (~manti7@176.10.104.94)
[10:52:28] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[10:53:29] *** Joins: sebastianos (~sebastian@user/sebastianos)
[10:53:31] <jaggz> trying. tx
[10:53:48] *** Joins: CombatVet (~c4@user/combatvet)
[10:54:04] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[10:54:17] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[10:54:28] <bookworm> by delete you mean <BS> yes? Or actually the delete key?
[10:55:23] <jaggz> actually I mixed things up. it's usually x X I'm using.. I need those to be smarter when editing py
[10:55:37] *** Quits: rany (~rany@user/rany) (Ping timeout: 248 seconds)
[10:55:58] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[10:56:17] <bookworm> you are doing it wrong if you de-indent with x my dear
[10:56:40] *** Joins: rany (~rany@user/rany)
[10:56:43] <bookworm> << and >> de- and indent respectively in vim
[10:56:54] <bookworm> (in normal mode or visual)
[10:57:39] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[10:57:47] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[10:57:58] *** Joins: Abrax (~Abrax@user/abrax)
[10:57:59] *** Joins: Fluxx (~Fluxx@user/fluxx)
[10:58:07] <jaggz> smarttan does help in insert mode though .. that's nice
[10:58:31] <jaggz> (when I use bs instead of X)
[10:58:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:58:53] <supakeen> <<, >>, for indenting, `dw` for removing all spaces until the next word is my thing.
[10:58:57] <jaggz> bookworm, no, xX normally delete tabs
[10:59:03] *** Joins: rany- (~rany@user/rany)
[10:59:09] <jaggz> which un/ indents
[10:59:29] <supakeen> But there are many ways to do the same thing in vi(m) :)
[10:59:44] <supakeen> So use whichever fits your hands as long as it does what you want.
[10:59:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[11:00:03] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:00:28] <bookworm> it deletes char under cursor in the case of x, which is not the operation you wanna do if you change indention
[11:00:57] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[11:01:04] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[11:01:06] *** Quits: rany (~rany@user/rany) (Ping timeout: 268 seconds)
[11:01:18] *** Lord_of_Life_ is now known as Lord_of_Life
[11:01:39] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 258 seconds)
[11:01:52] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 272 seconds)
[11:02:49] *** Joins: rany (~rany@user/rany)
[11:02:57] *** Joins: gusto (~Augustus@109.255.100.54)
[11:03:50] *** Quits: rany- (~rany@user/rany) (Read error: Connection reset by peer)
[11:04:05] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:06:23] *** Joins: rany_ (~rany@user/rany)
[11:06:47] *** Joins: Blankspace (~abcd@user/blankspace)
[11:08:02] *** Quits: rany (~rany@user/rany) (Ping timeout: 256 seconds)
[11:08:14] <KirkMcDonald> Note, too, that < and > are commands in both normal and command mode, and thus work with both motions and ranges like any other command.
[11:08:31] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[11:09:13] *** Joins: rany (~rany@user/rany)
[11:09:23] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[11:09:33] *** Quits: Blankspace (~abcd@user/blankspace) (Client Quit)
[11:09:45] *** Joins: yogoyo (~paddy@user/yogoyo)
[11:10:27] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[11:10:30] <susam> < and > also works in visual mode. Very handy to select some lines and move them to left or right.
[11:10:31] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:10:38] *** Joins: rany_ (~rany@user/rany)
[11:10:42] <susam> s/works/work/
[11:10:51] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[11:10:59] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[11:11:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[11:12:37] *** Quits: sandb0y (pirate@user/sandb0y) (Quit: WeeChat 3.2)
[11:13:12] *** Joins: rany (~rany@user/rany)
[11:15:05] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[11:15:24] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 256 seconds)
[11:17:30] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:18:01] *** Quits: rany (~rany@user/rany) (Ping timeout: 248 seconds)
[11:18:55] *** Joins: rany (~rany@user/rany)
[11:19:36] *** Quits: Preston (~liminalcr@2600:6c5a:473f:6494::1a67) (Ping timeout: 272 seconds)
[11:19:54] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 240 seconds)
[11:20:47] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[11:21:38] *** Joins: ihristov (~ihristov@217.145.94.71)
[11:23:19] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:23:34] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:24:16] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[11:25:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[11:26:32] *** Quits: Wulf (~Wulf@user/wulf) (Read error: Connection reset by peer)
[11:26:52] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:26:59] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:27:33] *** Joins: Wulf (~Wulf@user/wulf)
[11:27:50] *** Quits: astrocat (~astrocat@112.134.14.141) (Ping timeout: 272 seconds)
[11:29:06] *** Joins: rany_ (~rany@user/rany)
[11:30:42] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[11:30:49] *** Quits: bam32_ (~bambams@user/bambams) (Ping timeout: 248 seconds)
[11:30:50] *** Joins: rany (~rany@user/rany)
[11:31:20] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:31:40] *** Joins: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz)
[11:31:50] *** Joins: shad (~shad@user/shad)
[11:32:07] *** Quits: shad (~shad@user/shad) (Client Quit)
[11:34:01] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 248 seconds)
[11:34:51] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Read error: Connection reset by peer)
[11:34:53] *** Joins: rany_ (~rany@user/rany)
[11:35:22] *** Quits: bigRoo (~user@131.236.55.20) (Remote host closed the connection)
[11:36:00] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[11:36:53] *** Quits: rany (~rany@user/rany) (Ping timeout: 268 seconds)
[11:36:57] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:37:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:37:56] *** Quits: rany_ (~rany@user/rany) (Read error: Connection reset by peer)
[11:37:58] *** Joins: rany (~rany@user/rany)
[11:39:53] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Ping timeout: 248 seconds)
[11:40:54] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 256 seconds)
[11:41:02] *** Joins: palasso (~palasso@user/palasso)
[11:41:41] *** Joins: hyper_dave (~hyper_dav@197.156.95.251)
[11:42:24] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[11:43:02] *** Quits: rany (~rany@user/rany) (Ping timeout: 272 seconds)
[11:44:57] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:45:19] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[11:45:26] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[11:48:48] <yogoyo> how do i install the latest stable release of python into my new venv, please?
[11:49:10] <yogoyo> i tried pip search
[11:49:49] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[11:50:33] <jinsun> pip cannot install python
[11:50:47] <yogoyo> too bad
[11:50:55] <jinsun> the venv has the same python that you used to create it
[11:51:16] <yogoyo> i think i mix a virtualenv tutorial with conda
[11:51:40] *** Joins: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[11:51:53] *** Joins: acresearch (~acresearc@user/acresearch)
[11:52:02] <jinsun> if you are using conda then use conda environments, conda can install different python versions in different conda environements
[11:52:08] <acresearch> people what does this function do?   np.random.default_rng()    i do not understand its purpose
[11:52:17] <yogoyo> ah, yes. thanks jinsun
[11:52:24] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[11:52:45] <jinsun> yogoyo: something like, `conda create -n py39 python=3.9`, then do `conda activate py39` to use python 3.9 environment
[11:53:22] <yogoyo> jinsun: another idea - i should start using pycharm :)
[11:53:50] *** Joins: Gerula_ (~Gerula@user/gerula)
[11:53:50] *** Gerula is now known as Guest9188
[11:53:50] *** Quits: Guest9188 (~Gerula@user/gerula) (Killed (copper.libera.chat (Nickname regained by services)))
[11:53:50] *** Gerula_ is now known as Gerula
[11:54:40] *** Joins: astrocat (~astrocat@112.134.14.141)
[11:56:54] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:57:36] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[11:57:49] <jinsun> acresearch: have you read the docs? https://numpy.org/doc/stable/reference/random/generator.html
[11:57:55] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[11:59:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[11:59:13] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:59:57] <acresearch> jinsun: yes, but i did not understand it
[12:00:03] <acresearch> why would we use it,,,
[12:00:35] <acresearch> i am trying to code a convext hull setup using scipy    and if i do not use this generator i get rubbish results   so i am not sure what it does
[12:00:54] *** Joins: fikran (~fikran@user/fikran)
[12:01:39] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[12:02:12] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[12:02:22] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:02:45] *** Joins: mickey8 (~user@user/mickey)
[12:02:53] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:05:10] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[12:05:33] *** Joins: seednode (~seednode@user/seednode)
[12:09:47] *** Joins: bam32_ (~bambams@user/bambams)
[12:11:16] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:12:03] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[12:14:33] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 252 seconds)
[12:14:33] *** Quits: holbrode (sid339826@tinside.irccloud.com) (Ping timeout: 252 seconds)
[12:14:42] *** Quits: JacobFrost (sid494713@tinside.irccloud.com) (Ping timeout: 272 seconds)
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:15] *** Quits: EWDurbin (sid38710@tinside.irccloud.com) (Ping timeout: 258 seconds)
[12:15:44] *** Quits: bam32_ (~bambams@user/bambams) (Ping timeout: 268 seconds)
[12:15:53] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[12:15:59] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[12:16:06] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[12:16:08] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[12:18:39] *** Joins: Auron (~Auron956@user/auron)
[12:18:44] *** Joins: debayer (~debayer@2603-8000-cf00-0010-6506-f455-c63d-7629.res6.spectrum.com)
[12:18:48] *** Quits: astrocat (~astrocat@112.134.14.141) (Ping timeout: 268 seconds)
[12:19:08] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 272 seconds)
[12:19:39] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[12:20:47] *** Joins: mcope (~matt@user/mcope)
[12:21:23] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:22:48] *** Joins: shad (~shad@user/shad)
[12:23:19] *** Joins: bam32_ (~bambams@user/bambams)
[12:23:53] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[12:24:22] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[12:26:31] *** Joins: astrocat (~astrocat@112.134.14.141)
[12:26:38] *** Quits: astrocat (~astrocat@112.134.14.141) (Remote host closed the connection)
[12:27:21] *** Quits: janemba (~janemba@94.204.254.193) (Quit: WeeChat 3.1)
[12:27:51] *** Joins: Quaking_ (~Quaking@2601:245:c500:7fa0:6c62:5c1a:f584:3e6)
[12:27:54] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:d013:6cb2:eda6:d615) (Ping timeout: 258 seconds)
[12:28:02] *** Joins: janemba (~janemba@94.204.254.193)
[12:28:15] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[12:29:04] <acresearch> people if i have two arrays  mol and vert   what does mol[vert] do?   it is a matrix multiplication?
[12:29:18] <bookworm> indexing
[12:29:37] <bookworm> with a boolean index
[12:30:03] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[12:30:29] <KirkMcDonald> Not necessarily just booleans. You can also just give an array of indexes.
[12:30:36] <acresearch> ah i see ok    i understand
[12:31:07] <KirkMcDonald> e.g. https://bpa.st/O4XA
[12:32:43] <bookworm> ah, right. Numpy isn't pandas is it ;P
[12:33:14] <bookworm> although there I mostly use .loc
[12:34:58] *** Quits: audiocat (~audio@2603-8081-1800-00ad-312c-8a7d-098f-4cc5.res6.spectrum.com) (Remote host closed the connection)
[12:35:17] *** Joins: audiocat (~audio@2603-8081-1800-00ad-e61c-eef0-ffd7-1da5.res6.spectrum.com)
[12:35:29] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:49] *** Joins: kmh_ (~kmh@p200300df5f0d0200dc05e9b97966e73c.dip0.t-ipconnect.de)
[12:38:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:20] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[12:44:31] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:46:06] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:51:21] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 248 seconds)
[12:55:56] *** Joins: Quack (~Quack@185.21.216.169)
[13:00:27] *** Joins: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr)
[13:00:58] *** Quits: debayer (~debayer@2603-8000-cf00-0010-6506-f455-c63d-7629.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[13:02:10] <VaniaPy> hello,i'm struggling to install a conda library in a docker container but i'm failing,did anyone face that issue before?
[13:06:23] *** Joins: plastico (~plastico@neomutt/plastico)
[13:06:24] <FunkyBob> VaniaPy: which package?
[13:08:25] *** Quits: hyper_dave (~hyper_dav@197.156.95.251) (Ping timeout: 248 seconds)
[13:09:53] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:10:31] *** Joins: hyper_dave (~hyper_dav@197.156.95.251)
[13:11:20] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:13:54] <VaniaPy> FunkyBob comcat
[13:14:06] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[13:16:14] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[13:16:15] *** Joins: Naan (~Naan@user/naan)
[13:19:56] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 272 seconds)
[13:20:25] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:20:54] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:21:01] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:21:59] *** Quits: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz) (Quit: My comp has gone to sleep to save energy. ZZZzzz…)
[13:22:09] *** Joins: schumaml1 (~schumaml@dslb-178-007-207-243.178.007.pools.vodafone-ip.de)
[13:23:58] <Julian> VaniaPy: Please share what you ran and what error you got.
[13:25:00] *** Quits: schumaml (~schumaml@dslb-178-002-190-096.178.002.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[13:27:06] <rendar> any help with this? ModuleNotFoundError: No module named '__main__.parser'; '__main__' is not a package
[13:27:16] <Luyin> rendar: how do you get this error?
[13:27:40] <rendar> `from .parser import Parser` and 'parser' is a directory contaning a __init__.py which in turn import parser.py
[13:29:10] <Julian> rendar: What did you run?
[13:29:31] <rendar> it seems that `from parser import Parser` fixes the error
[13:29:33] <rendar> but i don't know why
[13:29:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:31:48] <rendar> it seems that this happens because the directory from where i run the program is not a module itself
[13:32:10] <jinsun> relative imports are allowed only within the package, if you import it from outside you have to use absolute imports
[13:34:11] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[13:35:43] *** sharperguy__ is now known as sharperguy
[13:35:56] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[13:40:41] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[13:42:33] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:43:48] *** Joins: rany (~rany@user/rany)
[13:44:09] *** Quits: chilversc (~chilversc@user/chilversc) (Ping timeout: 248 seconds)
[13:46:25] *** Joins: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at)
[13:48:54] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[13:49:02] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:49:49] *** Joins: rany (~rany@user/rany)
[13:50:20] *** Joins: besnn (~besnn@user/besnn)
[13:50:33] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 248 seconds)
[13:50:33] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:53:33] *** Joins: rany_ (~rany@user/rany)
[13:53:42] *** Joins: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz)
[13:53:42] *** Quits: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz) (Client Quit)
[13:54:18] *** Joins: nyah (~nyah@90.221.186.180)
[13:55:01] *** Quits: rany (~rany@user/rany) (Ping timeout: 268 seconds)
[13:55:04] *** Joins: aha (~aha@user/hmmm)
[13:55:55] *** Joins: chilversc (~chilversc@user/chilversc)
[13:57:20] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[13:58:03] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Remote host closed the connection)
[13:58:16] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[13:58:39] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 276 seconds)
[13:58:43] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[13:59:01] *** Quits: aha (~aha@user/hmmm) (Client Quit)
[13:59:45] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[14:00:06] *** Joins: shad (~shad@user/shad)
[14:03:55] *** Joins: darksun (~darksun@user/darksun)
[14:04:02] <Samian> suppose I have something like [ create_some_object() for _ in range(n) ]
[14:04:31] <Samian> does python run  create_some_object() in parallel ?
[14:04:42] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[14:04:59] <Samian> that list comprehension clearly runs create_some_object() n times.
[14:05:35] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[14:05:37] <Samian> Python should be smart enough to use multiple threads, one thread per create_some_object call
[14:06:04] *** Joins: inom (~inom@176.59.108.224)
[14:06:23] <Samian> psh https://softwareengineering.stackexchange.com/questions/313013/is-python-list-comprehension-using-multi-threading-or-parallelized-in-any-way-by
[14:06:30] <Samian> my question has been asked and answered
[14:06:59] <mweckbecker> is it possible with the click module (https://click.palletsprojects.com/en/8.0.x/) to have EITHER a '--foo' or '--bar' option on the command-line? with foo() and bar() to be called respectively for the command(s). thanks.
[14:08:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[14:08:24] <mweckbecker> at least the documentation of clicks is awful and the examples are casually almost 300 lines of code...
[14:08:32] <Julian> Samian: There's no magic parallelism, no.
[14:09:04] <Julian> mweckbecker: That's two questions in one really, so look for answers separately.
[14:09:51] <Julian> mweckbecker: One answer is you can use ... flag_value, I always forget what it's called, to basically have a `--foo` option put `foo` in a target (say "callme"), and `--bar` put `bar` in the same "callme"`, and then you'll get callme() to call the right function
[14:10:07] <Julian> How you have exclusive options is a different thing, I forget, but I believe there's support in click for them
[14:10:13] *** Joins: fikran (~fikran@user/fikran)
[14:10:20] <mweckbecker> Julian: I'm aware of this, but that's not my question.
[14:10:26] <mweckbecker> try re-reading it
[14:10:48] <Julian> mweckbecker: That's quite a rude response when you're looking for help.
[14:11:02] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 268 seconds)
[14:13:06] *** Joins: bjelleklang (~c@wikipedia/Bjelleklang)
[14:13:13] *** Joins: entuland (~entuland@user/entuland)
[14:13:51] <kieto> What are good projects to learn pytest from?
[14:14:05] <Luyin> kieto: I just started using pytest, that helped a lot
[14:14:17] <kieto> Luyin: it's not for me, it's for a friend
[14:14:27] <Luyin> kieto: then give your friend my answer xD
[14:14:39] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[14:14:51] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:14:53] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[14:15:07] <Julian> kieto: the tutorial is probably the right way to actually *learn* it, but if they want to browse projects, probably looking at things by gaborbernat or asotille (including pre-commit) are reasonable ways to pick up tips
[14:18:36] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[14:21:20] *** Joins: cre (~x@p5b0fb8d8.dip0.t-ipconnect.de)
[14:22:32] *** Quits: VaniaPy (~VaniaPy@79.103.24.224.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[14:23:54] <Samian> how do you guys handle checking if a module exists before importing?
[14:24:14] <Samian> importlib ? try catch?
[14:24:39] <Julian> try/except ImportError, yes.
[14:24:59] <The-Compiler> (or possibly ModuleNotFoundError)
[14:25:32] <kieto> Julian: thanks :)
[14:27:37] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[14:28:03] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[14:28:11] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:28:34] <The-Compiler> kieto: https://pytestbook.com is pretty good too
[14:29:18] <The-Compiler> Huh, did that just break
[14:29:23] <The-Compiler> https://pythontest.com/pytest-book/ if so
[14:30:24] *** Quits: fm (~fm@user/fm) (Quit: fm)
[14:30:52] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[14:32:28] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:32:39] *** Joins: rany (~rany@user/rany)
[14:34:14] *** Joins: pabed (~Thunderbi@89.37.15.34)
[14:34:32] *** Joins: roryrjb (~roryrjb@212.102.49.73)
[14:35:22] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[14:36:20] *** Quits: hyper_dave (~hyper_dav@197.156.95.251) (Ping timeout: 268 seconds)
[14:36:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:36:28] <mweckbecker> FYI: since no one knows and it might be helpful for others: click does not seem to be able to properly handle a scenario as described above even though it's absolutely common. I went back to argügparse (part of python) and it can do it: https://docs.python.org/3/library/argparse.html#mutual-exclusion
[14:36:56] <mweckbecker> s/arg_gparse/argparse/
[14:36:57] *** Quits: rany (~rany@user/rany) (Ping timeout: 248 seconds)
[14:37:44] *** Joins: hyper_dave (~hyper_dav@197.156.107.11)
[14:37:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[14:39:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:39:45] *** Quits: poorboy (~poorboy@104.131.46.87) (Read error: Connection reset by peer)
[14:40:38] *** Quits: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[14:40:51] <Julian> mweckbecker: As I said, you can get this behavior with click, it's here: https://github.com/click-contrib/click-option-group. Next time spend less time being snarky when you're asking for free help from others.
[14:43:34] *** Joins: poorboy (~poorboy@104.131.46.87)
[14:43:52] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[14:43:56] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[14:43:56] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Quit: Leaving)
[14:44:27] *** Joins: Naan (~Naan@user/naan)
[14:44:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[14:45:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:07] *** Joins: rany (~rany@user/rany)
[14:48:11] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:49:13] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[14:50:28] <sharperguy> Is it a mistake to use 'for line in s.makefile().readlines():' on a socket? I noticed that at least in one case, it buffered all the lines and only started the for loop once the connection was closed. Is there a preferred way to do this?
[14:51:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:51:09] <Yhg1s> sharperguy: yes, file.readlines() reads the whole file until EOF. Turning a socket into a file is a bad idea for a number of reasons, quite apart from reading everything until the end with file.readlines().
[14:51:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:51:22] <Yhg1s> (sockets aren't files, and pretending they are creates all kinds of corner cases)
[14:51:53] <Yhg1s> sharperguy: I highly recommend not dealing with sockets directly, but using a higher-level abstraction, like trio or asyncio or twisted.
[14:52:48] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[14:52:50] *** Joins: Error2505 (~Guest71@ip-89-102-14-38.net.upcbroadband.cz)
[14:53:00] <Error2505> greetings
[14:53:33] *** Joins: y1n (~y1n@84-115-65-31.wifi.dynamic.surfer.at)
[14:54:14] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:54:22] *** Joins: tungki (~tngk@subs20-114-142-172-49.three.co.id)
[14:55:03] <sharperguy> hmm ok
[14:56:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[14:56:54] <sharperguy> basically my server needs to accept one connection at a time and process lines individually as commands. What would be the simplest way to do that?
[14:57:23] *** Quits: zegalch (~zegalch@178.128.75.133) (Remote host closed the connection)
[14:57:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:57:33] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:57:56] *** Joins: zegalch (~zegalch@178.128.75.133)
[14:58:07] <Yhg1s> sharperguy: really, trio or asyncio or twisted. They take care of all kinds of corner cases that direct use of sockets would have to explicitly deal with, which is a lot more work than you might think.
[14:58:07] *** Joins: reset (~reset@user/reset)
[14:58:31] *** Quits: bjelleklang (~c@wikipedia/Bjelleklang) (Quit: Leaving)
[14:59:12] *** Joins: trace987 (~trace@95.90.106.112)
[15:01:39] *** Quits: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de) (Quit: ZNC - https://znc.in)
[15:01:45] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[15:03:43] *** Quits: trace987 (~trace@95.90.106.112) (Remote host closed the connection)
[15:04:22] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[15:04:28] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Client Quit)
[15:05:32] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 245 seconds)
[15:06:07] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:07:12] *** Quits: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com) (Ping timeout: 245 seconds)
[15:07:26] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[15:08:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[15:09:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:09:29] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[15:12:00] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[15:12:17] *** Joins: rany (~rany@user/rany)
[15:16:28] *** Joins: thiras (~thiras@user/thiras)
[15:16:50] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[15:17:18] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[15:17:38] *** Quits: tungki (~tngk@subs20-114-142-172-49.three.co.id) (Ping timeout: 268 seconds)
[15:19:23] <rendar> let's say i print 3 lines in python console "Waiting ..." then i do something with asyncio, (sleep, or http request or whatever) then i want to print "OK" just after the first "Waiting ..." but.. aligned at the lines of before
[15:19:30] <rendar> there is a way to do this?
[15:21:27] <bjs> rendar: sounds like you want something like curses/urwid to draw characters at arbitrary places on the screen
[15:21:50] <rendar> yes, but isn't urwid too heavy to just do this?
[15:21:57] <bjs> rendar: "too heavy"?
[15:22:02] <bjs> are you worried your computer will sink
[15:22:02] <jochum> rendar: await asyncio.wait(
[15:22:02] <jochum>         [something_to_wait(), something_else_to_wait()],
[15:22:02] <jochum>         return_when=asyncio.FIRST_COMPLETED)
[15:22:11] <jochum> sorry thought its singeline
[15:22:45] <jochum> may i misunderstood, its the rendering
[15:23:06] <bjs> rendar: if your "waiting..." lines can really be thought of a kind of progress bar then maybe tqdm which is a little library that can put some bars side-by-side like that
[15:23:11] <rendar> bjs: no, but i don't want to include a very big library instead of printing some escape codes
[15:23:35] <bjs> rendar: well I mean you can go read up on all the ansi escape sequences and then print out the escape codes to do the thing you want
[15:24:03] <bjs> (or e.g. use curses)
[15:24:42] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:25:11] <rendar> well
[15:25:53] <rendar> my aim is to have an asyncio-compatible prompt, and a bar just above the prompt with some text
[15:26:21] <bjs> rendar: asyncio is irrelevant here, if you want to write things into the terminal on different "lines" then you need something like curses
[15:26:32] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[15:26:42] <rendar> ok, but asyncio is relevant to prompt *input*
[15:27:02] <bjs> rendar: but "prompt input" is just reading stdin
[15:27:11] <rendar> `while command != "exit": command = await prompt()`
[15:27:15] <rendar> yes!
[15:27:16] <bjs> which is unrelated to the rendering of things on lines
[15:27:26] <rendar> ok
[15:27:48] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: The Lounge - https://thelounge.chat)
[15:28:07] <rendar> the thing is: i used to do some tests with prompt_kit, it also has something to print what i want, problem is i was unable to print a lot of text
[15:28:15] <rendar> it went crazy with a lot of lines
[15:28:22] <rendar> glitches everywhere
[15:28:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Quit: Leaving)
[15:28:47] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[15:28:48] <bjs> rendar: making nicely rendered command-line things is non-trivial because the output to the command line is just a stream of bytes
[15:29:05] <rendar> yes
[15:32:56] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 272 seconds)
[15:33:37] *** Joins: ice9 (~ice9@user/ice9)
[15:34:08] <graingert> nedbat: Changed in version 3.9: All hashlib constructors take a keyword-only argument usedforsecurity with default value True. A false value allows the use of insecure and blocked hashing algorithms in restricted environments. False indicates that the hashing algorithm is not used in a security context, e.g. as a non-cryptographic one-way compression function.
[15:34:18] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[15:34:23] *** Joins: Oddity (Oddity@user/oddity)
[15:34:39] <graingert> Might have helped your md5 "safety" issue
[15:34:50] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 272 seconds)
[15:36:29] *** Joins: georgios (~georgios@user/georgios)
[15:37:02] *** Joins: rany (~rany@user/rany)
[15:37:09] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[15:37:19] *** Quits: ano (~weechat@user/ano) (Ping timeout: 244 seconds)
[15:37:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:38:38] *** Joins: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com)
[15:39:16] <nedbat> graingert: would have helped, yes. assuming these shallow scanners looked for that argument
[15:40:32] *** Quits: y1n (~y1n@84-115-65-31.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[15:41:02] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[15:42:50] *** Joins: nyah (~nyah@51.146.30.113)
[15:44:47] *** Quits: cre (~x@p5b0fb8d8.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[15:44:59] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[15:46:01] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[15:47:15] *** Joins: Karel (~Karel@ptr-9091p55a55gu0o2x7ob.18120a2.ip6.access.telenet.be)
[15:48:02] *** Quits: enkrypt (~enkrypt@user/enkrypt) (Quit: WeeChat 3.0)
[15:49:33] <Karel> Is there an easy way to read data from a socket until the next newline character? There's socket.recv, but that's low-level and tedious. I specifically want to block until the end of the next newline. I'm finding various examples online about how to implement this yourself but there has to be something included, right?
[15:50:06] *** Quits: roryrjb (~roryrjb@212.102.49.73) (Quit: WeeChat 3.0.1)
[15:50:19] <Wulf> Karel: you can wrap this in a buffered text stream (whatever that's called in python)
[15:50:34] *** Quits: audiocat (~audio@2603-8081-1800-00ad-e61c-eef0-ffd7-1da5.res6.spectrum.com) (Remote host closed the connection)
[15:50:52] *** Joins: audiocat (~audio@2603-8081-1800-00ad-1e9f-2c4f-a2b5-03f0.res6.spectrum.com)
[15:51:00] *** Joins: ano (~weechat@user/ano)
[15:51:33] *** Quits: hyper_dave (~hyper_dav@197.156.107.11) (Ping timeout: 268 seconds)
[15:51:55] *** Joins: eriluc (~eriluc@178.97.132.77.rev.sfr.net)
[15:52:05] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Remote host closed the connection)
[15:52:37] *** Joins: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7)
[15:53:21] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[15:53:48] *** Joins: y1n (~y1n@84-115-65-66.wifi.dynamic.surfer.at)
[15:54:51] <Karel> Wulf, Ah looks like there's socket.makefile which returns a TextIO, thanks!
[15:56:46] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:57:23] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Quit: leaving)
[15:58:27] <Yhg1s> Karel: socket.makefile is really not a good solution (because sockets aren't files and pretending they are masks a whole bunch of corner cases, causing weird bugs)
[15:58:46] <Karel> Yhg1s, Hmm that's sad, then why does it exist?
[15:58:50] <Yhg1s> Karel: you're much better off using something like trio or asyncio or twisted, which have mechanisms that will feed your code whole lines as they come in.
[15:59:14] <Yhg1s> Karel: mostly historical accidents. people didn't realise how badly it would work in practice.
[16:00:46] <Karel> Hmm okay, I'll take a look at the other things you mentioned.
[16:01:32] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[16:02:42] *** Quits: p-i- (~Ohmu@2403:6200:8870:1a99:dd69:3740:96a7:b0f7) (Ping timeout: 272 seconds)
[16:04:34] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:04:51] *** Joins: besnn (~besnn@user/besnn)
[16:07:32] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[16:07:53] *** Joins: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz)
[16:10:14] *** Quits: resmo (~resmo@2a00:d420:9:8a00:873b:a3d2:cae1:a6d3) (Ping timeout: 258 seconds)
[16:10:26] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[16:10:47] <nubonix> anyone know how i can use vpn connection / split tunnel with selenium or playwright. what im trying to do is scrape using multiple browsers via multiple vpn connections, a 1:1 ratio
[16:11:08] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:14:33] *** Quits: pyre_ (~pyre@crimeboss.nillas-power.com) (Remote host closed the connection)
[16:14:47] *** Quits: noord (~noord@user/noord) (Ping timeout: 252 seconds)
[16:15:53] *** Quits: shan (shan@user/shan) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: adium (adium@user/adium) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: michele (~eraser@user/michele) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 252 seconds)
[16:16:59] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 252 seconds)
[16:16:59] *** Quits: Jefren (~Jefren@208.104.190.55) (Ping timeout: 252 seconds)
[16:21:56] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[16:21:56] *** Quits: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz) (*.net *.split)
[16:21:56] *** Quits: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch) (*.net *.split)
[16:21:56] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (*.net *.split)
[16:21:56] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (*.net *.split)
[16:21:56] *** Quits: eriluc (~eriluc@178.97.132.77.rev.sfr.net) (*.net *.split)
[16:21:56] *** Quits: pyfisch (~pyfisch@user/pyfisch) (*.net *.split)
[16:21:56] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (*.net *.split)
[16:21:56] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[16:21:56] *** Quits: fikran (~fikran@user/fikran) (*.net *.split)
[16:21:56] *** Quits: darksun (~darksun@user/darksun) (*.net *.split)
[16:21:56] *** Quits: PJBoy (~PJBoy@user/pjboy) (*.net *.split)
[16:21:56] *** Quits: schumaml1 (~schumaml@dslb-178-007-207-243.178.007.pools.vodafone-ip.de) (*.net *.split)
[16:21:56] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (*.net *.split)
[16:21:56] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (*.net *.split)
[16:21:56] *** Quits: bam32_ (~bambams@user/bambams) (*.net *.split)
[16:21:56] *** Quits: mcope (~matt@user/mcope) (*.net *.split)
[16:21:56] *** Quits: seednode (~seednode@user/seednode) (*.net *.split)
[16:21:56] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (*.net *.split)
[16:21:56] *** Quits: Gerula (~Gerula@user/gerula) (*.net *.split)
[16:21:56] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (*.net *.split)
[16:21:56] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[16:21:56] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (*.net *.split)
[16:21:56] *** Quits: gusto (~Augustus@109.255.100.54) (*.net *.split)
[16:21:56] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[16:21:56] *** Quits: Fluxx (~Fluxx@user/fluxx) (*.net *.split)
[16:21:56] *** Quits: sebastianos (~sebastian@user/sebastianos) (*.net *.split)
[16:21:56] *** Quits: upsala (~zcb@185.213.155.160) (*.net *.split)
[16:21:56] *** Quits: c10l2 (~c10l@89.34.167.207) (*.net *.split)
[16:21:56] *** Quits: FatDarrell (~textual@68.91.156.229) (*.net *.split)
[16:21:56] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (*.net *.split)
[16:21:56] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[16:21:56] *** Quits: Haxxa (~Haxxa@122-199-44-36.ip4.superloop.com) (*.net *.split)
[16:21:56] *** Quits: JavaBean (~JavaBean@user/javabean) (*.net *.split)
[16:21:56] *** Quits: iflema (~ian@user/iflema) (*.net *.split)
[16:21:56] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[16:21:56] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[16:21:56] *** Quits: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se) (*.net *.split)
[16:21:56] *** Quits: AquaL1te_ (~AquaL1te@user/aqual1te) (*.net *.split)
[16:21:56] *** Quits: twobitsp1ite (~twobitspr@195.181.171.244) (*.net *.split)
[16:21:56] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[16:21:56] *** Quits: irrgit_ (~irrgit@192.241.175.183) (*.net *.split)
[16:21:56] *** Quits: andrewSC_ (~andrewSC@archlinux/trusteduser/andrewSC) (*.net *.split)
[16:21:56] *** Quits: kurtthem1ker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (*.net *.split)
[16:21:56] *** Quits: nbin_ (~nbin@user/nbin) (*.net *.split)
[16:21:56] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (*.net *.split)
[16:21:56] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[16:21:56] *** Quits: snalty_ (~Shhh@user/snalty) (*.net *.split)
[16:21:56] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[16:21:56] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[16:21:56] *** Quits: milosz_ (~milosz@user/milosz) (*.net *.split)
[16:21:56] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (*.net *.split)
[16:21:56] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (*.net *.split)
[16:21:56] *** Quits: knipster (~knipster@user/knipster) (*.net *.split)
[16:21:56] *** Quits: dulanic (~dulanic@47.187.144.163) (*.net *.split)
[16:21:56] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[16:21:56] *** Quits: gizmo_ (~gizmo@45.91.125.2) (*.net *.split)
[16:21:56] *** Quits: Kvothe (~weechat@user/elodin) (*.net *.split)
[16:21:56] *** Quits: Allegretto (~allegrett@89-186-97-71.pool.digikabel.hu) (*.net *.split)
[16:21:56] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[16:21:56] *** Quits: summonner (~summonner@188.24.22.156) (*.net *.split)
[16:21:56] *** Quits: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[16:21:56] *** Quits: rud0lf (rud0lf@user/rud0lf) (*.net *.split)
[16:21:56] *** Quits: f8e4 (~user@159.89.21.45) (*.net *.split)
[16:21:56] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (*.net *.split)
[16:21:56] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (*.net *.split)
[16:21:56] *** Quits: figgle77 (~figgle77@137.28.231.187) (*.net *.split)
[16:21:56] *** Quits: pan (~quassel@pankid.club) (*.net *.split)
[16:21:56] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[16:21:56] *** Quits: Hackerpcs (~user@user/hackerpcs) (*.net *.split)
[16:21:56] *** Quits: nrg (~NRG@user/nrg) (*.net *.split)
[16:21:56] *** Quits: cdown_ (~cdown@163.114.131.1) (*.net *.split)
[16:21:56] *** Quits: molt (~molt@79.140.150.21) (*.net *.split)
[16:21:56] *** Quits: iomari891 (~iomari891@105.112.138.38) (*.net *.split)
[16:21:56] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[16:21:56] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (*.net *.split)
[16:21:56] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[16:21:56] *** Quits: Moyst (~moyst@user/moyst) (*.net *.split)
[16:21:56] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[16:21:56] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[16:21:56] *** Quits: sud (~sud@user/sud) (*.net *.split)
[16:21:56] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[16:21:56] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[16:21:56] *** Quits: bbear (~znc@21212.s.t4vps.eu) (*.net *.split)
[16:21:56] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[16:21:56] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[16:21:56] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[16:21:56] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (*.net *.split)
[16:21:56] *** Quits: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se) (*.net *.split)
[16:21:56] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[16:21:56] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[16:21:56] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[16:21:56] *** Quits: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com) (*.net *.split)
[16:21:56] *** Quits: lack (~lack@user/lack) (*.net *.split)
[16:21:56] *** Quits: edr (~edr@user/edr) (*.net *.split)
[16:21:56] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (*.net *.split)
[16:21:56] *** Quits: grateful (~grateful@user/grateful) (*.net *.split)
[16:21:57] *** Quits: Karel (~Karel@ptr-9091p55a55gu0o2x7ob.18120a2.ip6.access.telenet.be) (*.net *.split)
[16:21:57] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[16:21:57] *** Quits: i0e (~is0ke3@user/is0ke3) (*.net *.split)
[16:21:57] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (*.net *.split)
[16:21:57] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (*.net *.split)
[16:21:57] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (*.net *.split)
[16:21:57] *** Quits: yogoyo (~yogoyo@user/yogoyo) (*.net *.split)
[16:21:57] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[16:21:57] *** Quits: Ergo^ (~ergo@91.238.59.144) (*.net *.split)
[16:21:57] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (*.net *.split)
[16:21:57] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (*.net *.split)
[16:21:57] *** Quits: Abrax (~Abrax@user/abrax) (*.net *.split)
[16:21:57] *** Quits: rendar (~rendar@user/rendar) (*.net *.split)
[16:21:57] *** Quits: kosh (~kosh@user/kosh) (*.net *.split)
[16:21:57] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (*.net *.split)
[16:21:57] *** Quits: acresearch (~acresearc@user/acresearch) (*.net *.split)
[16:21:57] *** Quits: dvx (~dvx@185.63.97.64) (*.net *.split)
[16:21:57] *** Quits: hifi (hifi@m.vi.fi) (*.net *.split)
[16:21:57] *** Quits: mci64 (~mci64@185.242.190.95) (*.net *.split)
[16:21:57] *** Quits: stranac (~stranac@195.29.239.126) (*.net *.split)
[16:21:57] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (*.net *.split)
[16:21:57] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (*.net *.split)
[16:21:57] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[16:21:57] *** Quits: emerent (~quassel@p200300cd57058c89ba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[16:21:57] *** Quits: blddk (~admin@185.233.252.229) (*.net *.split)
[16:21:57] *** Quits: Skyfire (~pyon@user/pyon) (*.net *.split)
[16:21:57] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[16:21:57] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[16:21:57] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (*.net *.split)
[16:21:57] *** Quits: kmh_ (~kmh@p200300df5f0d0200dc05e9b97966e73c.dip0.t-ipconnect.de) (*.net *.split)
[16:21:57] *** Quits: ackyshake (~ackyshake@user/ackyshake) (*.net *.split)
[16:21:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[16:21:57] *** Quits: sus (thelounge@user/zeromomentum) (*.net *.split)
[16:21:57] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[16:21:57] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[16:21:57] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (*.net *.split)
[16:21:57] *** Quits: Doffi (~doffi@91.132.197.188) (*.net *.split)
[16:21:57] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (*.net *.split)
[16:21:57] *** Quits: mei (~mei@user/mei) (*.net *.split)
[16:21:57] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[16:21:57] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (*.net *.split)
[16:21:58] *** Quits: jbe (~hellother@lysator/root/jbe) (*.net *.split)
[16:21:58] *** Quits: EGH (~EGH@185.25.195.104) (*.net *.split)
[16:21:58] *** Quits: uhu (~uhu@2a01:4f9:c010:1087::2) (*.net *.split)
[16:21:58] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[16:21:58] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[16:21:58] *** Quits: skreech (~skreech@user/skreech) (*.net *.split)
[16:21:58] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[16:21:58] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[16:21:58] *** Quits: lambda (~weechat@cyka.blyat.vodka) (*.net *.split)
[16:21:58] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (*.net *.split)
[16:21:58] *** Quits: Affliction (affliction@user/affliction) (*.net *.split)
[16:21:58] *** Quits: dbg (~dbg@user/dbg) (*.net *.split)
[16:21:58] *** Quits: doc (~doc@user/doc) (*.net *.split)
[16:21:58] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[16:21:58] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[16:21:58] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[16:21:58] *** Quits: inom (~inom@176.59.108.224) (*.net *.split)
[16:21:58] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (*.net *.split)
[16:21:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[16:21:58] *** Quits: ente_ (~ente@p200300dc5f0b7b0077d687d8c50841ea.dip0.t-ipconnect.de) (*.net *.split)
[16:21:58] *** Quits: skeld (~skeld@2601:148:200:ac70:7021:6011:d19c:6413) (*.net *.split)
[16:21:58] *** Quits: Samian (~Sami@2620:10d:c091:480::1:ab1a) (*.net *.split)
[16:21:58] *** Quits: bdeshi (~bdeshi@bdeshi.space) (*.net *.split)
[16:21:58] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[16:21:58] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[16:21:58] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[16:21:58] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[16:21:58] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[16:21:59] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[16:21:59] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[16:21:59] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (*.net *.split)
[16:21:59] *** Quits: axisys_ (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (*.net *.split)
[16:21:59] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[16:21:59] *** Quits: GNUtoo (~GNUtoo@cyberdimension.org) (*.net *.split)
[16:21:59] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (*.net *.split)
[16:21:59] *** Quits: maxking (~maxking@user/maxking) (*.net *.split)
[16:21:59] *** Quits: ldm (~ldm@hacksoc/member) (*.net *.split)
[16:21:59] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[16:21:59] *** Quits: jess (~jess@libera/staff/jess) (*.net *.split)
[16:21:59] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[16:21:59] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (*.net *.split)
[16:21:59] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (*.net *.split)
[16:21:59] *** Quits: m4v (~znc@ubuntu/member/m4v) (*.net *.split)
[16:21:59] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (*.net *.split)
[16:21:59] *** Quits: treefrob (~robx@p57a9648f.dip0.t-ipconnect.de) (*.net *.split)
[16:21:59] *** Quits: dcaro (~dcaro@user/dcaro) (*.net *.split)
[16:21:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[16:21:59] *** Quits: kindablue_ (znc@207.246.111.155) (*.net *.split)
[16:21:59] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[16:21:59] *** Quits: kofuyu (~kofuyu@user/kofuyu) (*.net *.split)
[16:21:59] *** Quits: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: altendky (sid135382@id-135382.stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[16:21:59] *** Quits: Tiago_Paolini (sid172748@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: umamisoup (uid511883@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: llinguini (sid257922@id-257922.stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: {HD} (~{HD}@191.96.185.81) (*.net *.split)
[16:21:59] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (*.net *.split)
[16:21:59] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (*.net *.split)
[16:21:59] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (*.net *.split)
[16:21:59] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (*.net *.split)
[16:21:59] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[16:21:59] *** Quits: wereii (~wereii@37.205.14.89) (*.net *.split)
[16:21:59] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (*.net *.split)
[16:21:59] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[16:21:59] *** Quits: d3x (michal@bielaw.ski) (*.net *.split)
[16:21:59] *** Quits: SallyAhaj (sallyahaj@user/sallyahaj) (*.net *.split)
[16:21:59] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: esaym153 (~esaym153@net153.net) (*.net *.split)
[16:21:59] *** Quits: AM (~techman@87-94-111-135.bb.dnainternet.fi) (*.net *.split)
[16:21:59] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (*.net *.split)
[16:21:59] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (*.net *.split)
[16:21:59] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[16:21:59] *** Quits: dynos01 (~dynos01@2600:3c01:e000:36a::8400) (*.net *.split)
[16:21:59] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[16:21:59] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (*.net *.split)
[16:21:59] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (*.net *.split)
[16:21:59] *** Quits: uuair (~quassel@user/uuair) (*.net *.split)
[16:21:59] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[16:21:59] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[16:21:59] *** Quits: fructose (~fructose@user/fructose) (*.net *.split)
[16:21:59] *** Quits: sharksauce (sharksauce@user/sharksauce) (*.net *.split)
[16:21:59] *** Quits: webmind (~webmind@user/webmind) (*.net *.split)
[16:21:59] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[16:21:59] *** Quits: mgedmin (~mg@user/mgedmin) (*.net *.split)
[16:21:59] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[16:21:59] *** Quits: audiocat (~audio@2603-8081-1800-00ad-1e9f-2c4f-a2b5-03f0.res6.spectrum.com) (*.net *.split)
[16:21:59] *** Quits: pabed (~Thunderbi@89.37.15.34) (*.net *.split)
[16:21:59] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (*.net *.split)
[16:21:59] *** Quits: entuland (~entuland@user/entuland) (*.net *.split)
[16:21:59] *** Quits: azidhaka (~azidhaka@user/azidhaka) (*.net *.split)
[16:21:59] *** Quits: Quaking_ (~Quaking@2601:245:c500:7fa0:6c62:5c1a:f584:3e6) (*.net *.split)
[16:21:59] *** Quits: xrogaan (~xrogaan@user/xrogaan) (*.net *.split)
[16:21:59] *** Quits: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467) (*.net *.split)
[16:21:59] *** Quits: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14) (*.net *.split)
[16:21:59] *** Quits: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d) (*.net *.split)
[16:21:59] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (*.net *.split)
[16:21:59] *** Quits: blackop (~ocloud@user/blackop) (*.net *.split)
[16:21:59] *** Quits: Vultyre (~vultyre@user/vultyre) (*.net *.split)
[16:21:59] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c16b-4385-b975-2303.res6.spectrum.com) (*.net *.split)
[16:21:59] *** Quits: Armen (~Armen@armen138.com) (*.net *.split)
[16:21:59] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[16:21:59] *** Quits: luckydonald (~luckydona@static.154.109.217.95.clients.your-server.de) (*.net *.split)
[16:21:59] *** Quits: dbristow (~dbristow@user/dbristow) (*.net *.split)
[16:22:00] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (*.net *.split)
[16:22:00] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[16:22:00] *** Quits: tone0 (~tone0@071-011-252-111.res.spectrum.com) (*.net *.split)
[16:22:00] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (*.net *.split)
[16:22:00] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-d591-18df-e586-cd75.fixed6.kpn.net) (*.net *.split)
[16:22:00] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[16:22:00] *** Quits: rgp (~rgp@user/rgp) (*.net *.split)
[16:22:00] *** Quits: braxas (sid508886@id-508886.tooting.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: daddy (~ryan@hashbang/bdfl) (*.net *.split)
[16:22:00] *** Quits: seds (sid492514@user/seds) (*.net *.split)
[16:22:00] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[16:22:00] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[16:22:00] *** Quits: DocMors (~DocMors@web.crypticity.net) (*.net *.split)
[16:22:00] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: circuitbone (sid355934@user/circuitbone) (*.net *.split)
[16:22:00] *** Quits: zware (~zach@python/psf/zware) (*.net *.split)
[16:22:00] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: m1dnight (~christoph@188.ip-51-91-158.eu) (*.net *.split)
[16:22:00] *** Quits: enteral (~enteral@discovery.whatbox.ca) (*.net *.split)
[16:22:00] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[16:22:00] *** Quits: xa0s (~xa0s@mab.sdf.org) (*.net *.split)
[16:22:00] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[16:22:00] *** Quits: truth (~truth@user/truth) (*.net *.split)
[16:22:00] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[16:22:00] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2851:91a4:af4c:7957) (*.net *.split)
[16:22:00] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[16:22:00] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[16:22:00] *** Quits: dld (~davidlowr@2601:197:600:1210:90d2:efa1:6a80:6389) (*.net *.split)
[16:22:00] *** Quits: Lartza (lartza@user/lartza) (*.net *.split)
[16:22:00] *** Quits: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au) (*.net *.split)
[16:22:00] *** Quits: flyback (~flyback@2601:540:8201:1e60:bcb9:12e:e899:e26) (*.net *.split)
[16:22:00] *** Quits: tuxifreund (tuxifreund@ubuntuusers/wikiteam/tuxifreund) (*.net *.split)
[16:22:00] *** Quits: sunyibo (~dorsch@2a04:52c0:101:443::) (*.net *.split)
[16:22:00] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[16:22:00] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (*.net *.split)
[16:22:00] *** Quits: Luyin (~daisy@user/luyin) (*.net *.split)
[16:22:00] *** Quits: ntdll (ntdll@user/ntdll) (*.net *.split)
[16:22:00] *** Quits: Chex (~Chex@user/chex) (*.net *.split)
[16:22:00] *** Quits: t2mkn (~t2mkn@user/t2mkn) (*.net *.split)
[16:22:00] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[16:22:00] *** Quits: baloona (~baloona@mail.baloona.de) (*.net *.split)
[16:22:00] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (*.net *.split)
[16:22:00] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (*.net *.split)
[16:22:00] *** Quits: susam (~susam@user/susam) (*.net *.split)
[16:22:00] *** Quits: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1) (*.net *.split)
[16:22:00] *** Quits: dale (dale@user/dale) (*.net *.split)
[16:22:00] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[16:22:00] *** Quits: Madda (~Madda@208.249.9.51.dyn.plus.net) (*.net *.split)
[16:22:00] *** Quits: ephemer0l (~ephemer0l@organizedmagnetism.com) (*.net *.split)
[16:22:00] *** Quits: starz (starz@ns378512.ip-37-59-36.eu) (*.net *.split)
[16:22:00] *** Quits: pavelow (~pavelow@opticalchimp.com) (*.net *.split)
[16:22:00] *** Quits: kieto (~kieto@user/kieto) (*.net *.split)
[16:22:00] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[16:22:00] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (*.net *.split)
[16:22:00] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[16:22:00] *** Quits: kafka (~kafka@user/kafka) (*.net *.split)
[16:22:00] *** Quits: georgios (~georgios@user/georgios) (*.net *.split)
[16:22:00] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (*.net *.split)
[16:22:00] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[16:22:00] *** Quits: kadobanana (~mud@user/kadoban) (*.net *.split)
[16:22:00] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (*.net *.split)
[16:22:00] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[16:22:00] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (*.net *.split)
[16:22:00] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[16:22:00] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[16:22:01] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[16:22:01] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[16:22:01] *** Quits: simone (~nya@user/sx) (*.net *.split)
[16:22:01] *** Quits: kiska (~kiska@user/kiska) (*.net *.split)
[16:22:01] *** Quits: dhch (~dhch@185.213.154.168) (*.net *.split)
[16:22:01] *** Quits: jdmark (~jdmark@67.8.137.130) (*.net *.split)
[16:22:01] *** Quits: bidouille (~user_name@trois.potager.org) (*.net *.split)
[16:22:01] *** Quits: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75) (*.net *.split)
[16:22:01] *** Quits: acid (~acid@user/acid) (*.net *.split)
[16:22:01] *** Quits: luvalon1 (~luva@178.239.167.170) (*.net *.split)
[16:22:01] *** Quits: Masklin (~joel@89-233-200-127.cust.bredband2.com) (*.net *.split)
[16:22:01] *** Quits: maxpowa (~maxpowa@107.150.39.146) (*.net *.split)
[16:22:01] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (*.net *.split)
[16:22:01] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[16:22:01] *** Quits: Thermoriax (Thermoriax@user/thermoriax) (*.net *.split)
[16:22:01] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[16:22:01] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (*.net *.split)
[16:22:01] *** Quits: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de) (*.net *.split)
[16:22:01] *** Quits: flay (~flay@user/flay) (*.net *.split)
[16:22:01] *** Quits: Helenah (~helenah@user/helenah) (*.net *.split)
[16:22:01] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[16:22:01] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[16:22:01] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[16:22:01] *** Quits: dthpulse (~quassel@podciarou.sk) (*.net *.split)
[16:22:01] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (*.net *.split)
[16:22:01] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (*.net *.split)
[16:22:01] *** Quits: Dotz0cat (~Dotz0cat@h186.236.31.71.dynamic.ip.windstream.net) (*.net *.split)
[16:22:01] *** Quits: esv (~esv@72.11.45.232) (*.net *.split)
[16:22:01] *** Quits: mxp (~mxp@82.98.30.69) (*.net *.split)
[16:22:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[16:22:01] *** Quits: dftrace (~dftrace@hopper.lethalbit.com) (*.net *.split)
[16:22:01] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[16:22:01] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (*.net *.split)
[16:22:01] *** Quits: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb) (*.net *.split)
[16:22:01] *** Quits: bluss (~bluss@user/bluss) (*.net *.split)
[16:22:01] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (*.net *.split)
[16:22:01] *** Quits: libussa (~libussa@libussa.net) (*.net *.split)
[16:22:01] *** Quits: randall (~randall@user/randall) (*.net *.split)
[16:22:01] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[16:22:01] *** Quits: acnebs (~acnebs@2604:a880:400:d0::1a64:c001) (*.net *.split)
[16:22:01] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[16:22:01] *** Quits: ironfroggy (sid495156@id-495156.tooting.irccloud.com) (*.net *.split)
[16:22:01] *** Quits: dTal (quassel@dragonbox/wizzard/dtal) (*.net *.split)
[16:22:01] *** Quits: auri (~admin@static.46.108.40.188.clients.your-server.de) (*.net *.split)
[16:22:01] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[16:22:01] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (*.net *.split)
[16:22:01] *** Quits: Darkfoe1 (~chuck@drunk.serverfail.party) (*.net *.split)
[16:22:01] *** Quits: znf (~ibm86@toaster.linge-ma.ro) (*.net *.split)
[16:22:01] *** Quits: hwrd (sid64402@id-64402.tooting.irccloud.com) (*.net *.split)
[16:22:01] *** Quits: LostInWeb (~quassel@narvi.bifroest.eu) (*.net *.split)
[16:22:02] *** Quits: reset (~reset@user/reset) (*.net *.split)
[16:22:02] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[16:22:02] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (*.net *.split)
[16:22:02] *** Quits: martums (martums@user/martums) (*.net *.split)
[16:22:02] *** Quits: Warped (~Warped@user/warped) (*.net *.split)
[16:22:02] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[16:22:02] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[16:22:02] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (*.net *.split)
[16:22:02] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (*.net *.split)
[16:22:02] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[16:22:02] *** Quits: no_maam (~chat@gauss.datenzone.de) (*.net *.split)
[16:22:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[16:22:02] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[16:22:02] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (*.net *.split)
[16:22:02] *** Quits: fearnothing (~fearnothi@user/fearnothing) (*.net *.split)
[16:22:02] *** Quits: j00n (~mario@user/j00n) (*.net *.split)
[16:22:02] *** Quits: Alexer (~alexer@alexer.net) (*.net *.split)
[16:22:02] *** Quits: d3sync (~d3sync@194.219.251.225) (*.net *.split)
[16:22:02] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[16:22:02] *** Quits: waxfire238 (~waxfire@65.119.2.240) (*.net *.split)
[16:22:02] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[16:22:02] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[16:22:02] *** Quits: falx (~falx@user/falx) (*.net *.split)
[16:22:02] *** Quits: etienneme (~etienne@user/etienneme) (*.net *.split)
[16:22:02] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[16:22:02] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[16:22:02] *** Quits: jor (~jor@jor.link) (*.net *.split)
[16:22:02] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[16:22:02] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[16:22:02] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[16:22:02] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[16:22:02] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[16:22:02] *** Quits: `rdvn (~rdvn@user/rdvn) (*.net *.split)
[16:22:02] *** Quits: TML (~tml@user/tml) (*.net *.split)
[16:22:02] *** Quits: matiss (~matiss@almalinux/web/matiss) (*.net *.split)
[16:22:02] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[16:22:02] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[16:22:02] *** Quits: infernix (~nix@2a02:22a0:bbb1:d500::2) (*.net *.split)
[16:22:02] *** Quits: Neoon (~Neoon@2607:5300:60:23a5::1111) (*.net *.split)
[16:22:02] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (*.net *.split)
[16:22:02] *** Quits: Wegge (~wegge@user/wegge) (*.net *.split)
[16:22:03] *** Quits: renrelkha (~renrelkha@user/renrelkha) (*.net *.split)
[16:22:03] *** Quits: ilmostro (~ilmostro@user/ilmostro) (*.net *.split)
[16:22:03] *** Quits: Titore (Titore@user/titore) (*.net *.split)
[16:22:03] *** Quits: ripdog (~quassel@user/ripdog) (*.net *.split)
[16:22:03] *** Quits: yemel (~yemel@user/yemel) (*.net *.split)
[16:22:03] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (*.net *.split)
[16:22:03] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[16:22:03] *** Quits: arza (arza@arza.us) (*.net *.split)
[16:22:03] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[16:22:03] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[16:22:03] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[16:22:03] *** Quits: BlackBishop (dexter@user/blackbishop) (*.net *.split)
[16:22:03] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[16:22:03] *** Quits: Fingel (~fingel@user/fingel) (*.net *.split)
[16:22:03] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[16:22:03] *** Quits: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b) (*.net *.split)
[16:22:03] *** Quits: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1) (*.net *.split)
[16:22:03] *** Quits: greyltc (~greyltc@user/greyltc) (*.net *.split)
[16:22:03] *** Quits: winny (~winny@user/winny) (*.net *.split)
[16:22:03] *** Quits: Ennea (~Ennea@user/ennea) (*.net *.split)
[16:22:03] *** Quits: olasd (~olasd@softwareheritage/olasd) (*.net *.split)
[16:22:03] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[16:22:03] *** Quits: lericson (~toxik@user/lericson) (*.net *.split)
[16:22:03] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (*.net *.split)
[16:22:03] *** Quits: Julian (~tos9@python/site-packages/Julian) (*.net *.split)
[16:22:03] *** Quits: y1n (~y1n@84-115-65-66.wifi.dynamic.surfer.at) (*.net *.split)
[16:22:03] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (*.net *.split)
[16:22:03] *** Quits: ice9 (~ice9@user/ice9) (*.net *.split)
[16:22:03] *** Quits: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com) (*.net *.split)
[16:22:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (*.net *.split)
[16:22:03] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (*.net *.split)
[16:22:03] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (*.net *.split)
[16:22:03] *** Quits: jay-m126 (~jay-m@41.205.30.141) (*.net *.split)
[16:22:03] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (*.net *.split)
[16:22:03] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (*.net *.split)
[16:22:03] *** Quits: poorboy (~poorboy@104.131.46.87) (*.net *.split)
[16:22:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[16:22:03] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (*.net *.split)
[16:22:03] *** Quits: dharrigan (~dharrigan@user/dharrigan) (*.net *.split)
[16:22:03] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[16:22:03] *** Quits: janemba (~janemba@94.204.254.193) (*.net *.split)
[16:22:03] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[16:22:03] *** Quits: Auron (~Auron956@user/auron) (*.net *.split)
[16:22:03] *** Quits: ihristov (~ihristov@217.145.94.71) (*.net *.split)
[16:22:03] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (*.net *.split)
[16:22:03] *** Quits: manti7 (~manti7@176.10.104.94) (*.net *.split)
[16:22:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (*.net *.split)
[16:22:03] *** Quits: mkoskar (~mkoskar@user/mkoskar) (*.net *.split)
[16:22:03] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[16:22:03] *** Quits: tims (~tims@61.69.131.46) (*.net *.split)
[16:22:03] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (*.net *.split)
[16:22:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[16:22:03] *** Quits: icy (~icy@user/icy) (*.net *.split)
[16:22:03] *** Quits: Elzington_ (~Elzington@68.235.43.28) (*.net *.split)
[16:22:03] *** Quits: ornxka (~ornxka@user/ornxka) (*.net *.split)
[16:22:03] *** Quits: KeiraT (~k@lulzsec.co.uk) (*.net *.split)
[16:22:03] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[16:22:03] *** Quits: fflam_ (~mdt@ip70-179-20-127.sd.sd.cox.net) (*.net *.split)
[16:22:03] *** Quits: t3nj1n_ (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (*.net *.split)
[16:22:03] *** Quits: roniez_ (~roniez@nixsec.se) (*.net *.split)
[16:22:03] *** Quits: kenwoodfox_ (~quassel@user/kenwoodfox) (*.net *.split)
[16:22:03] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (*.net *.split)
[16:22:03] *** Quits: erica (~erica@user/erica) (*.net *.split)
[16:22:03] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[16:22:03] *** Quits: pacbard_ (~pacbard@user/pacbard) (*.net *.split)
[16:22:03] *** Quits: BlessJah (~BlessJah@user/blessjah) (*.net *.split)
[16:22:03] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[16:22:03] *** Quits: srhm (~ascii@user/srhm) (*.net *.split)
[16:22:03] *** Quits: Classic (~root@user/classic) (*.net *.split)
[16:22:03] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[16:22:03] *** Quits: dermato (~dermatobr@154.21.23.75) (*.net *.split)
[16:22:03] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (*.net *.split)
[16:22:03] *** Quits: djhankb (~djhankb@208.113.164.68) (*.net *.split)
[16:22:03] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[16:22:03] *** Quits: kenoba (~kenoba@user/kenoba) (*.net *.split)
[16:22:03] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[16:22:03] *** Quits: Socra (~Socra@206.217.216.27) (*.net *.split)
[16:22:03] *** Quits: roadt (~roadt@36.5.94.204) (*.net *.split)
[16:22:03] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[16:22:03] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[16:22:03] *** Quits: jaggz (~jaggz@user/jaggz) (*.net *.split)
[16:22:03] *** Quits: nyah (~nyah@51.146.30.113) (*.net *.split)
[16:22:03] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[16:22:03] *** Quits: Naan (~Naan@user/naan) (*.net *.split)
[16:22:03] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[16:22:03] *** Quits: catdog2 (~quassel@2001:470:50f7:cdcd::cd1) (*.net *.split)
[16:22:03] *** Quits: asdfasdf (~Barones@2804:48dc:8500:0:cce1:fa73:7a9d:9857) (*.net *.split)
[16:22:03] *** Quits: brabrax (~brabrax@user/brabrax) (*.net *.split)
[16:22:03] *** Quits: rndm (~arossi@2600:1700:5f81:1f50:698c:ce69:6d27:7b65) (*.net *.split)
[16:22:03] *** Quits: harwiltz (~harwiltz@modemcable212.231-202-24.mc.videotron.ca) (*.net *.split)
[16:22:03] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (*.net *.split)
[16:22:03] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[16:22:03] *** Quits: DesCaFeinado (~CaFeINA@2001:8a0:ddef:9e00:4563:153b:eb53:663) (*.net *.split)
[16:22:03] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (*.net *.split)
[16:22:03] *** Quits: gambl0re (~gambl0re@24.140.237.124) (*.net *.split)
[16:22:03] *** Quits: MikZyth (~MikZyth@188.65.242.223) (*.net *.split)
[16:22:03] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[16:22:03] *** Quits: rexbinary (~rexbinary@user/rexbinary) (*.net *.split)
[16:22:03] *** Quits: vince (~vince@75.127.14.76) (*.net *.split)
[16:22:03] *** Quits: godlike (~godlike@user/godlike) (*.net *.split)
[16:22:03] *** Quits: az (az@user/azz) (*.net *.split)
[16:22:03] *** Quits: {4144} (~{4144}@46.56.64.31) (*.net *.split)
[16:22:03] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[16:22:03] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[16:22:03] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[16:22:03] *** Quits: encukou_ (~quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[16:22:03] *** Quits: mbrndtgn5 (~mbrndtgn@undecidable.de) (*.net *.split)
[16:22:03] *** Quits: mgubyt_ (u@mgub.yt) (*.net *.split)
[16:22:03] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[16:22:03] *** Quits: fleabag (~sirpengi@li587-65.members.linode.com) (*.net *.split)
[16:22:03] *** Quits: frrs (~ferros@vps-eacaba1b.vps.ovh.net) (*.net *.split)
[16:22:03] *** Quits: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab) (*.net *.split)
[16:22:03] *** Quits: Bardon (~Bardon@user/Bardon) (*.net *.split)
[16:22:03] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[16:22:03] *** Quits: MrNaz (sid133418@id-133418.highgate.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: ormiret (sid314108@id-314108.tooting.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[16:22:03] *** Quits: cmagina (sid286142@user/cmagina) (*.net *.split)
[16:22:03] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[16:22:04] *** Quits: fury (uid193779@id-193779.brockwell.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: monchi (sid347418@id-347418.charlton.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: marienz__ (~marienz@libera/staff/marienz) (*.net *.split)
[16:22:04] *** Quits: stigz (sid371747@id-371747.tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[16:22:04] *** Quits: Repiphany (~Repiphany@user/repiphany) (*.net *.split)
[16:22:04] *** Quits: Pent (sid313808@id-313808.tooting.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: mpmc (~mpmc@user/mpmc) (*.net *.split)
[16:22:04] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[16:22:04] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[16:22:04] *** Quits: rpittau (sid346891@id-346891.tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: syllin (~syllin@user/syllin) (*.net *.split)
[16:22:04] *** Quits: mawk (mawk@wireguard/contributor/mawk) (*.net *.split)
[16:22:04] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[16:22:04] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[16:22:04] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[16:22:04] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[16:22:04] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[16:22:04] *** Quits: jabberwock (~jessy@user/jabberwock) (*.net *.split)
[16:22:04] *** Quits: MercilessDeth (~brad@136.49.61.2) (*.net *.split)
[16:22:04] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (*.net *.split)
[16:22:04] *** Quits: driib (~driib@185.195.233.162) (*.net *.split)
[16:22:04] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (*.net *.split)
[16:22:04] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[16:22:04] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[16:22:04] *** Quits: ilmais1n (~il@irc.oh1cgn.fi) (*.net *.split)
[16:22:04] *** Quits: death916 (~death916@user/death916) (*.net *.split)
[16:22:04] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[16:22:04] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[16:22:04] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[16:22:04] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[16:22:04] *** Quits: Somni (insomnia@77-88-237-24.gci.net) (*.net *.split)
[16:22:04] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (*.net *.split)
[16:22:04] *** Quits: AUDaags (~ubuntu@ec2-3-106-166-31.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[16:22:04] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[16:22:04] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[16:22:04] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (*.net *.split)
[16:22:04] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[16:22:04] *** Quits: trashcatt_ (~trashcatt@znc.trashcat.xyz) (*.net *.split)
[16:22:04] *** Quits: stoneware (~stoneware@user/stoneware) (*.net *.split)
[16:22:04] *** Quits: gry (~quassel@botters/gry) (*.net *.split)
[16:22:04] *** Quits: maxtimbo (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (*.net *.split)
[16:22:04] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[16:22:04] *** Quits: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net) (*.net *.split)
[16:22:04] *** Quits: PocketKiller (PacKetIV@user/packetiv) (*.net *.split)
[16:22:04] *** Quits: odrling (~odrling@korone.aidoru.agency) (*.net *.split)
[16:22:04] *** Quits: alexyov8 (~alexyov@84.22.6.244) (*.net *.split)
[16:22:04] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (*.net *.split)
[16:22:04] *** Quits: KernelPanic (~KernelPan@user/kernelpanic) (*.net *.split)
[16:22:04] *** Quits: Wu (~wu@158.red-83-50-192.dynamicip.rima-tde.net) (*.net *.split)
[16:22:04] *** Quits: nubonix (uid492751@id-492751.charlton.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: Mikro (leo@libera.ninja) (*.net *.split)
[16:22:04] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[16:22:04] *** Quits: eichin (sid27120@tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: Evolver (sid32215@user/evolver) (*.net *.split)
[16:22:04] *** Quits: ziky (sid27087@user/ziky) (*.net *.split)
[16:22:04] *** Quits: darxun (sid504814@tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: Quietus (~quietus@2a04:52c0:101:181::) (*.net *.split)
[16:22:04] *** Quits: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com) (*.net *.split)
[16:22:04] *** Quits: optimant (quasselcor@user/optimant) (*.net *.split)
[16:22:04] *** Quits: visl (visl@user/visl) (*.net *.split)
[16:22:04] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[16:22:04] *** Quits: rwb (~augh@theguntretort.com) (*.net *.split)
[16:22:04] *** Quits: et (~et@user/et) (*.net *.split)
[16:22:04] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[16:22:04] *** Quits: alxndr (~alexander@ybti.net) (*.net *.split)
[16:22:04] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[16:22:04] *** Quits: neltraus (~neltraus@supernova.neltraus.de) (*.net *.split)
[16:22:04] *** Quits: notepad (~notepad@129.159.46.243) (*.net *.split)
[16:22:04] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[16:22:04] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[16:22:04] *** Quits: Ninja3047 (~Ninja3047@3047.ninja) (*.net *.split)
[16:22:04] *** Quits: gabe (~gabe@user/gabe) (*.net *.split)
[16:22:04] *** Quits: philipp64|work (~philipp64@174.27.13.9) (*.net *.split)
[16:22:04] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[16:22:04] *** Quits: FKAShinobi (~shinobi@2601:18c:d07f:f2e9:b36e:b615:5c5f:a300) (*.net *.split)
[16:22:04] *** Quits: colorado (~fluiD@161.97.231.145) (*.net *.split)
[16:22:04] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[16:22:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[16:22:04] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[16:22:04] *** Quits: The-Compiler (~compiler@the-compiler.org) (*.net *.split)
[16:22:04] *** Quits: mikebald (~mikebald@159.203.185.106) (*.net *.split)
[16:22:04] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (*.net *.split)
[16:22:04] *** Quits: tanner (~tanner@tilde.town) (*.net *.split)
[16:22:04] *** Quits: carlio (~carlio@88.198.149.110) (*.net *.split)
[16:22:04] *** Quits: amanr (~therojjha@20.204.87.0) (*.net *.split)
[16:22:04] *** Quits: nigelb (~nigel@zeus.nigelb.me) (*.net *.split)
[16:22:04] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[16:22:04] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[16:22:04] *** Quits: orbatos[m] (~orbatos@user/orbatos) (*.net *.split)
[16:22:04] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (*.net *.split)
[16:22:04] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[16:22:05] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (*.net *.split)
[16:22:05] *** Quits: bambams (~bambams@user/bambams) (*.net *.split)
[16:22:05] *** Quits: HenryTheLongshot (~Henry@46.101.4.181) (*.net *.split)
[16:22:05] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[16:22:05] *** Quits: erhandsome (~erhandsom@user/erhandsome) (*.net *.split)
[16:22:05] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[16:22:05] *** Quits: kgz (~kragniz@nyaa.kragniz.eu) (*.net *.split)
[16:22:05] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[16:22:05] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (*.net *.split)
[16:22:05] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[16:22:05] *** Quits: jootoi (~jootoi@130.61.158.197) (*.net *.split)
[16:22:05] *** Quits: dece (~dece@dece.space) (*.net *.split)
[16:22:05] *** Quits: topoi (~topoi@user/topoi) (*.net *.split)
[16:22:05] *** Quits: umimaso (~umimaso@188.166.147.131) (*.net *.split)
[16:22:05] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[16:22:05] *** Quits: libera- (~utunbu@user/utunbu) (*.net *.split)
[16:22:05] *** Quits: lxdr (~lxdr@user/lxdr) (*.net *.split)
[16:22:05] *** Quits: WayToDoor7 (~WayToDoor@user/waytodoor) (*.net *.split)
[16:22:05] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[16:22:05] *** Quits: mteo (francis@user/francis) (*.net *.split)
[16:22:05] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (*.net *.split)
[16:22:05] *** Quits: habnabit_ (habnabit@python/site-packages/habnabit) (*.net *.split)
[16:22:05] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[16:22:05] *** Quits: chromis (sid150893@id-150893.tinside.irccloud.com) (*.net *.split)
[16:22:05] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[16:22:05] *** Quits: dude-x_ (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (*.net *.split)
[16:22:05] *** Quits: nate44 (~Nathan22@S0106bcd16583c035.gv.shawcable.net) (*.net *.split)
[16:22:05] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[16:22:05] *** Quits: extnct (~extnct@2604:180:2:a54:1::9ce7) (*.net *.split)
[16:22:05] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[16:22:05] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[16:22:05] *** Quits: hjmcnew (sid86092@tinside.irccloud.com) (*.net *.split)
[16:22:05] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[16:22:05] *** Quits: toine42 (~antoine@2001:41d0:e:41f::1) (*.net *.split)
[16:22:05] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[16:22:05] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (*.net *.split)
[16:22:05] *** Quits: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net) (*.net *.split)
[16:22:05] *** Quits: chandankumar (~chandanku@51.159.58.174) (*.net *.split)
[16:22:05] *** Quits: zbe (~zbe@pleiades.zbe.bz) (*.net *.split)
[16:22:05] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[16:22:05] *** Quits: LuKaRo_ (~LuKaRo@p57b15425.dip0.t-ipconnect.de) (*.net *.split)
[16:22:05] *** Quits: leonardo (~leonardo@user/leonardo) (*.net *.split)
[16:22:05] *** Quits: abyss_ (~robbins@user/robbins) (*.net *.split)
[16:22:05] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[16:22:05] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[16:22:05] *** Quits: tvm (~tom@ip-89-103-250-229.net.upcbroadband.cz) (*.net *.split)
[16:22:05] *** Quits: ops (~ops@user/echelon) (*.net *.split)
[16:22:05] *** Quits: d1b (~db@user/d1b) (*.net *.split)
[16:22:05] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[16:22:05] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[16:22:05] *** Quits: jim (~jim@about/linux/staff/jim) (*.net *.split)
[16:22:05] *** Quits: micronn (~micronn@user/micronn) (*.net *.split)
[16:22:05] *** Quits: programmerq (~programme@user/programmerq) (*.net *.split)
[16:22:05] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[16:22:05] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[16:22:05] *** Quits: rud01f (rud0lf@user/rud0lf) (*.net *.split)
[16:22:05] *** Quits: kstar (~kstar@user/kstar) (*.net *.split)
[16:22:05] *** Quits: jpaa (~jpaa@87.118.126.66) (*.net *.split)
[16:22:05] *** Quits: ulif (~nick@user/ulif) (*.net *.split)
[16:22:05] *** Quits: poxifide (deathspawn@user/poxifide) (*.net *.split)
[16:22:05] *** Quits: towel (~towel@user/towel) (*.net *.split)
[16:22:05] *** Quits: amoe (~amoe@visarend.solasistim.net) (*.net *.split)
[16:22:05] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[16:22:05] *** Quits: argoneus (~argoneus@argoneus.com) (*.net *.split)
[16:22:05] *** Quits: ixjlyons (~kenny@li1177-148.members.linode.com) (*.net *.split)
[16:22:05] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (*.net *.split)
[16:22:05] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[16:22:05] *** Quits: kpcyrd (~kpcyrd@archlinux/trusteduser/kpcyrd) (*.net *.split)
[16:22:05] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[16:22:05] *** Quits: SnoopJ (~snoopj@user/snoopj) (*.net *.split)
[16:22:05] *** Quits: mumixam (~m@user/mumixam) (*.net *.split)
[16:22:05] *** Quits: Daemoen (~Daemoen@2604:a880:2:d0::2164:d001) (*.net *.split)
[16:22:05] *** Quits: reda (~reda@user/reda) (*.net *.split)
[16:22:05] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[16:22:05] *** Quits: vinnix (~vinnix@user/vinnix) (*.net *.split)
[16:22:05] *** Quits: sale (~sale@ypocit.initech.link) (*.net *.split)
[16:22:05] *** Quits: phantomcircuit (~phantomci@192.241.205.97) (*.net *.split)
[16:22:05] *** Quits: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net) (*.net *.split)
[16:22:05] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[16:22:05] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[16:22:05] *** Quits: awygle (~quassel@2604:a880:2:d0::5380:3001) (*.net *.split)
[16:22:05] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[16:22:05] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[16:22:05] *** Quits: allegary (~allegary@apache/committer/gjm) (*.net *.split)
[16:22:06] *** Quits: aifa[m] (~aifamatri@2001:470:69fc:105::d06e) (*.net *.split)
[16:22:06] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (*.net *.split)
[16:22:06] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (*.net *.split)
[16:22:06] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (*.net *.split)
[16:22:06] *** Quits: s8n1 (~s8n@user/s8n) (*.net *.split)
[16:22:06] *** Quits: ndim (hun@moooo.n-dimensional.de) (*.net *.split)
[16:22:06] *** Quits: paperManu (~paperManu@138.197.128.151) (*.net *.split)
[16:22:06] *** Quits: MightyMu (~MightyMu@104.131.138.31) (*.net *.split)
[16:22:06] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[16:22:06] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[16:22:06] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[16:22:06] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (*.net *.split)
[16:22:06] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[16:22:06] *** Quits: Techcable_ (~Techcable@168.235.93.147) (*.net *.split)
[16:22:06] *** Quits: wbn (~wbn@user/wbn) (*.net *.split)
[16:22:06] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (*.net *.split)
[16:22:06] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[16:22:06] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[16:22:06] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[16:22:06] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[16:22:06] *** Quits: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net) (*.net *.split)
[16:22:06] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[16:22:06] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (*.net *.split)
[16:22:06] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (*.net *.split)
[16:22:06] *** Quits: theo (~theo@user/theo) (*.net *.split)
[16:22:06] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[16:22:06] *** Quits: BillyZane (~BillyZane@91.196.220.172) (*.net *.split)
[16:22:06] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (*.net *.split)
[16:22:06] *** Quits: damonlynch (~ngaio@c-98-32-237-193.hsd1.in.comcast.net) (*.net *.split)
[16:22:06] *** Quits: zamba (~marius@5.226.162.54) (*.net *.split)
[16:22:06] *** Quits: canton7 (canton7@about/csharp/canton7) (*.net *.split)
[16:22:06] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (*.net *.split)
[16:22:06] *** Quits: supernovah (~supernova@mail.ijk.nz) (*.net *.split)
[16:22:06] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (*.net *.split)
[16:22:06] *** Quits: justache (~justache@user/justache) (*.net *.split)
[16:22:06] *** Quits: jochum (~jochum@user/jochum) (*.net *.split)
[16:22:06] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[16:22:06] *** Quits: Scotteh (~Scotteh@user/scotteh) (*.net *.split)
[16:22:06] *** Quits: dav1d (~dav1d@user/dav1d) (*.net *.split)
[16:22:06] *** Quits: ali1234 (~al@user/ali1234) (*.net *.split)
[16:22:06] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (*.net *.split)
[16:22:06] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[16:22:06] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[16:22:06] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[16:22:06] *** Quits: tf (~tf@user/tf) (*.net *.split)
[16:22:06] *** Quits: Tashtari (~tashtari@user/tashtari) (*.net *.split)
[16:22:06] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[16:22:06] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[16:22:06] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[16:22:06] *** Quits: agronholm (sid403424@id-403424.brockwell.irccloud.com) (*.net *.split)
[16:22:06] *** Quits: h_ (rootvegeta@fsf/member/hays) (*.net *.split)
[16:22:06] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[16:22:06] *** Quits: grawity (grawity@star.nullroute.eu.org) (*.net *.split)
[16:22:06] *** Quits: hexology- (~hexology@user/hexology) (*.net *.split)
[16:22:06] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[16:22:06] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[16:22:06] *** Quits: hsiktas (sid224847@id-224847.tooting.irccloud.com) (*.net *.split)
[16:22:06] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[16:22:06] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[16:22:06] *** Quits: cole (~cole@user/cole) (*.net *.split)
[16:22:06] *** Quits: mboehn (mathias@hh1.nuxis.org) (*.net *.split)
[16:22:06] *** Quits: tudor (~tudor@tomka.hu) (*.net *.split)
[16:22:06] *** Quits: meridion (~meridion@punt.hetgrotebos.org) (*.net *.split)
[16:22:06] *** Quits: b0nn (~shane@user/b0nn) (*.net *.split)
[16:22:06] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[16:22:06] *** Quits: bboles (~bboles@64.94.212.195) (*.net *.split)
[16:22:06] *** Quits: grym (~grym@user/grym) (*.net *.split)
[16:22:06] *** Quits: noyb (~noyb@user/noyb) (*.net *.split)
[16:22:06] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[16:22:06] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[16:22:06] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[16:22:06] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[16:22:06] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[16:22:06] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[16:22:06] *** Quits: gerikson (~gerikson@user/gerikson) (*.net *.split)
[16:22:06] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[16:22:06] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (*.net *.split)
[16:22:06] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[16:22:06] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[16:22:06] *** Quits: Strom (strom@fedora/strom) (*.net *.split)
[16:22:06] *** Quits: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f) (*.net *.split)
[16:22:06] *** Quits: cyberpear (uid364019@fedora/cyberpear) (*.net *.split)
[16:22:06] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[16:22:06] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (*.net *.split)
[16:22:06] *** Quits: nicksloan (sid195124@user/nicksloan) (*.net *.split)
[16:22:06] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (*.net *.split)
[16:22:06] *** Quits: samathy (~samathy@user/samathy) (*.net *.split)
[16:22:06] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[16:22:06] *** Quits: drmessano (sid104353@user/drmessano) (*.net *.split)
[16:22:06] *** Quits: Vonter (~Vonter@user/vonter) (*.net *.split)
[16:22:06] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (*.net *.split)
[16:22:06] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (*.net *.split)
[16:22:07] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (*.net *.split)
[16:22:07] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (*.net *.split)
[16:22:07] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[16:22:07] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[16:22:07] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[16:22:07] *** Quits: dawg (dirtydawg@triton.blinkenshell.org) (*.net *.split)
[16:22:07] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[16:22:07] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[16:22:07] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[16:22:07] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[16:22:07] *** Quits: suffer (znc@mutant.penguin.fyi) (*.net *.split)
[16:22:07] *** Quits: rf` (~envex@cpe-173-91-189-33.neo.res.rr.com) (*.net *.split)
[16:22:07] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[16:22:07] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[16:22:07] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[16:22:07] *** Quits: daniel-k (~daniel-k@192.241.135.211) (*.net *.split)
[16:22:07] *** Quits: r3m (~launch@user/r3m) (*.net *.split)
[16:22:07] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[16:22:07] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (*.net *.split)
[16:22:07] *** Quits: Proxysna (~Proxysna@62.119.254.142) (*.net *.split)
[16:22:07] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[16:22:07] *** Quits: dreamer (~dreamer@user/dreamer) (*.net *.split)
[16:22:07] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[16:22:07] *** Quits: trench (trench@user/trench) (*.net *.split)
[16:22:07] *** Quits: Tritium (~tritium@toxin.sdamon.com) (*.net *.split)
[16:22:07] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[16:22:07] *** Quits: fxrs (~fxrs@192.227.212.130) (*.net *.split)
[16:22:07] *** Quits: glider_ (~glider@user/glider) (*.net *.split)
[16:22:07] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[16:22:07] *** Quits: noarb- (~noarb@user/noarb) (*.net *.split)
[16:22:07] *** Quits: cnsunyour (~sunyour@129.226.182.99) (*.net *.split)
[16:22:07] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[16:22:07] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[16:22:07] *** Quits: zingos (~zingos@46.101.6.21) (*.net *.split)
[16:22:07] *** Quits: Ox4 (~int@0x4.cx) (*.net *.split)
[16:22:07] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[16:22:07] *** Quits: phlixi (~phlixi@aftr-62-216-205-171.dynamic.mnet-online.de) (*.net *.split)
[16:22:07] *** Quits: python (~python@user/demon) (*.net *.split)
[16:22:07] *** Quits: sgn (~sgn@user/sgn) (*.net *.split)
[16:22:07] *** Quits: CodeGeek (~codegeek@about/java/CodeGeek) (*.net *.split)
[16:22:07] *** Quits: Mogget (Mogget@vogon.moshwire.com) (*.net *.split)
[16:22:07] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[16:22:07] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[16:22:07] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[16:22:07] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[16:22:07] *** Quits: Forty-Bot (~kvirc@pool-74-96-87-9.washdc.fios.verizon.net) (*.net *.split)
[16:22:07] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (*.net *.split)
[16:22:07] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[16:22:07] *** Quits: nfc (nfc@tilde.institute) (*.net *.split)
[16:22:07] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[16:22:07] *** Quits: ttkap_ (~ttkap@user/ttkap) (*.net *.split)
[16:22:07] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[16:22:07] *** Quits: launchd (examknow@bitbot/launchd) (*.net *.split)
[16:22:07] *** Quits: Widdershins (widders@ps.mad.cash) (*.net *.split)
[16:22:07] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[16:22:07] *** Quits: kmikita (uid461814@id-461814.brockwell.irccloud.com) (*.net *.split)
[16:22:07] *** Quits: Xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[16:22:07] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[16:22:07] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[16:22:07] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[16:22:07] *** Quits: someguy1233 (~someguy@user/someguy123) (*.net *.split)
[16:22:07] *** Quits: tumbleweed (~stefanor@ubuntu/member/tumbleweed) (*.net *.split)
[16:22:07] *** Quits: AmyMalik (ellenor@vice-chairwoman.of.freenode.management) (*.net *.split)
[16:22:07] *** Quits: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6) (*.net *.split)
[16:22:07] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[16:22:07] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[16:22:07] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[16:22:07] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (*.net *.split)
[16:22:07] *** Quits: tardisx (~tardisx@2400:8902::f03c:91ff:fe89:d107) (*.net *.split)
[16:22:07] *** Quits: sco1 (~sco1@charon.whatbox.ca) (*.net *.split)
[16:22:07] *** Quits: emptynine (tkk@cybertron.redlight.li) (*.net *.split)
[16:22:07] *** Quits: Xeago (~Xeago@user/xeago) (*.net *.split)
[16:22:07] *** Quits: dartmouthed (~blackunsp@li761-35.members.linode.com) (*.net *.split)
[16:22:07] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[16:22:07] *** Quits: Error2505 (~Guest71@ip-89-102-14-38.net.upcbroadband.cz) (*.net *.split)
[16:22:07] *** Quits: ExeciN (~ExeciN@user/nicexe) (*.net *.split)
[16:22:07] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[16:22:07] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[16:22:07] *** Quits: kindablue (znc@irc.tpurist.com) (*.net *.split)
[16:22:07] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[16:22:07] *** Quits: xernaron (~xernaron@box.xernaron.ch) (*.net *.split)
[16:22:07] *** Quits: mossman93 (~quassel@user/mossman93) (*.net *.split)
[16:22:07] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[16:22:07] *** Quits: thm (~thomas@fedora/thm) (*.net *.split)
[16:22:07] *** Quits: foureyes (foureyes@brought.to.you.by.bnc4free.com) (*.net *.split)
[16:22:07] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (*.net *.split)
[16:22:07] *** Quits: francis (francis@user/francis) (*.net *.split)
[16:22:07] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[16:22:07] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[16:22:07] *** Quits: sandipndev (sandipndev@2600:3c00::f03c:92ff:fe8e:dce6) (*.net *.split)
[16:22:07] *** Quits: northernsage (~dobox@138.197.11.208) (*.net *.split)
[16:22:07] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[16:22:07] *** Quits: laretta (~laretta@user/laretta) (*.net *.split)
[16:22:07] *** Quits: wgwz (~wgwz@45.55.193.150) (*.net *.split)
[16:22:07] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[16:22:07] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[16:22:07] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[16:22:07] *** Quits: user3456 (user3456@user/user3456) (*.net *.split)
[16:22:07] *** Quits: bookworm (~bookworm@neomutt/bookworm) (*.net *.split)
[16:22:07] *** Quits: asd (~noname@user/asd) (*.net *.split)
[16:22:07] *** Quits: crackerjack (crackerjac@pear.bnc4free.com) (*.net *.split)
[16:22:07] *** Quits: b3z (~b3z@user/b3z) (*.net *.split)
[16:22:07] *** Quits: petaflot (~root@lutolf.vserver.nimag.net) (*.net *.split)
[16:22:07] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[16:22:07] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[16:22:08] *** Quits: enrh (~enrh@user/enrh) (*.net *.split)
[16:22:08] *** Quits: especial (~especial@2a0a:51c0:0:1f:67a7::2) (*.net *.split)
[16:22:08] *** Quits: MJ94 (mj94@user/mj94) (*.net *.split)
[16:22:08] *** Quits: aluria (~aluria@canonical/aluria) (*.net *.split)
[16:22:08] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (*.net *.split)
[16:22:08] *** Quits: mspe (~user@tilde.team/user/mspe) (*.net *.split)
[16:22:08] *** Quits: tris (emptystrin@irc1.lessbroken.org) (*.net *.split)
[16:22:08] *** Quits: ThiefMaster (thief@indico/developer/thiefmaster) (*.net *.split)
[16:22:08] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[16:22:08] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (*.net *.split)
[16:22:08] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[16:22:08] *** Quits: ano (~weechat@user/ano) (*.net *.split)
[16:22:08] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (*.net *.split)
[16:22:08] *** Quits: hendursa1 (~weechat@user/hendursaga) (*.net *.split)
[16:22:08] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[16:22:08] *** Quits: mickey8 (~user@user/mickey) (*.net *.split)
[16:22:08] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (*.net *.split)
[16:22:08] *** Quits: CombatVet (~c4@user/combatvet) (*.net *.split)
[16:22:08] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (*.net *.split)
[16:22:08] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (*.net *.split)
[16:22:08] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (*.net *.split)
[16:22:08] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (*.net *.split)
[16:22:08] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (*.net *.split)
[16:22:08] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[16:22:08] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (*.net *.split)
[16:22:08] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[16:22:08] *** Quits: spithash (~spithash@user/spithash) (*.net *.split)
[16:22:08] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (*.net *.split)
[16:22:08] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (*.net *.split)
[16:22:08] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (*.net *.split)
[16:22:08] *** Quits: Leonarbro (~Leonet@user/leonarbro) (*.net *.split)
[16:22:08] *** Quits: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: flagrama (sid145621@id-145621.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (*.net *.split)
[16:22:08] *** Quits: crazysim (sid86009@id-86009.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: Trieste_ (T@user/pilgrim) (*.net *.split)
[16:22:08] *** Quits: Cyp_ (~cyp@192038129116.mbb.telenor.dk) (*.net *.split)
[16:22:08] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[16:22:08] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:d869:df28:2173:ba54) (*.net *.split)
[16:22:08] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[16:22:08] *** Quits: baroobob (~jwbwater@98.215.243.94) (*.net *.split)
[16:22:08] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:f8f2:84a2:79d0:4f6f) (*.net *.split)
[16:22:08] *** Quits: nac (~nac@user/nac) (*.net *.split)
[16:22:08] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[16:22:08] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[16:22:08] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (*.net *.split)
[16:22:08] *** Quits: ShorTie (~ShorTie@130.sub-72-105-241.myvzw.com) (*.net *.split)
[16:22:08] *** Quits: ATAD (~ATAD@user/atad) (*.net *.split)
[16:22:08] *** Quits: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com) (*.net *.split)
[16:22:08] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (*.net *.split)
[16:22:08] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (*.net *.split)
[16:22:08] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:19c1:d739:4799:9431) (*.net *.split)
[16:22:08] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (*.net *.split)
[16:22:08] *** Quits: guntbert (~yesitsme@user/guntbert) (*.net *.split)
[16:22:08] *** Quits: BinarySavior (~BinarySav@user/binarysavior) (*.net *.split)
[16:22:08] *** Quits: onu (~onufn@gibbs.uberspace.de) (*.net *.split)
[16:22:08] *** Quits: baltazar (~baltazar@217-197-188-124.pool.digikabel.hu) (*.net *.split)
[16:22:08] *** Quits: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[16:22:08] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[16:22:08] *** Quits: avu (~jan@user/avu) (*.net *.split)
[16:22:08] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (*.net *.split)
[16:22:08] *** Quits: murr4y (ali@user/murr4y) (*.net *.split)
[16:22:08] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[16:22:08] *** Quits: pr3d4t0r (~zhenya01@user/pr3d4t0r) (*.net *.split)
[16:22:08] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[16:22:08] *** Quits: duracrisis (~kkh@user/duracrisis) (*.net *.split)
[16:22:08] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (*.net *.split)
[16:22:08] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[16:22:08] *** Quits: averell (~averell@user/averell) (*.net *.split)
[16:22:08] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (*.net *.split)
[16:22:08] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (*.net *.split)
[16:22:08] *** Quits: bdeferme1 (~bdeferme@i.ctrl86.com) (*.net *.split)
[16:22:08] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (*.net *.split)
[16:22:08] *** Quits: peterandre (peterandre@2605:6400:c847:1524::4251) (*.net *.split)
[16:22:08] *** Quits: Freso (sid7914@libera/staff/metabrainz.user.Freso) (*.net *.split)
[16:22:08] *** Quits: woky (~woky@li1651-31.members.linode.com) (*.net *.split)
[16:22:08] *** Quits: ouemt (~quassel@user/ouemt) (*.net *.split)
[16:22:08] *** Quits: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[16:22:08] *** Quits: Ninpo (~Ninpo@charlton.qap.la) (*.net *.split)
[16:22:08] *** Quits: k0fein (~esmeralda@user/k0fein) (*.net *.split)
[16:22:08] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[16:22:08] *** Quits: Yasumoto (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com) (*.net *.split)
[16:22:08] *** Quits: bss (bss@rie.incorporeal.org) (*.net *.split)
[16:22:08] *** Quits: u4t (~chat@78.ip-139-99-236.net) (*.net *.split)
[16:22:08] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[16:22:08] *** Quits: Aye (jeda@hellomouse/dev/cryb.jeda) (*.net *.split)
[16:22:08] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[16:22:08] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[16:22:08] *** Quits: roolebo (sid64806@id-64806.charlton.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[16:22:08] *** Quits: neil (~kneel@rockylinux/infra/neil) (*.net *.split)
[16:22:08] *** Quits: hexa- (~hexa-@juno.lossy.network) (*.net *.split)
[16:22:08] *** Quits: liam (sid7517@id-7517.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[16:22:08] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[16:22:08] *** Quits: m0nkey_ (~quassel@user/m0nkey/x-3352227) (*.net *.split)
[16:22:08] *** Quits: _mal (~mal@user/mal/x-8025409) (*.net *.split)
[16:22:08] *** Quits: lf94 (~lf94@2604:a880:cad:d0::cd6:8001) (*.net *.split)
[16:22:08] *** Quits: bjonnh (~jo@about/aquilenet/bjonnh) (*.net *.split)
[16:22:08] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[16:22:08] *** Quits: mindlesstux (sid18072@id-18072.tooting.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[16:22:08] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[16:22:08] *** Quits: A_Dragon (A_D@doom-tower.awesome-dragon.science) (*.net *.split)
[16:22:08] *** Quits: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (*.net *.split)
[16:22:08] *** Quits: _moep_ (~moep@user/moep/x-3358975) (*.net *.split)
[16:22:08] *** Quits: matthewwilkes (sid500242@id-500242.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: nocko (sid501219@user/nocko) (*.net *.split)
[16:22:08] *** Quits: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8) (*.net *.split)
[16:22:08] *** Quits: gbear605 (~gbear605@user/gbear605) (*.net *.split)
[16:22:08] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[16:22:08] *** Quits: ross (sid305269@user/ross) (*.net *.split)
[16:22:08] *** Quits: NiKaN (sid385034@id-385034.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: gossie (~gossie@2a10:3781:328:1:e1d:50cc:c868:ca94) (*.net *.split)
[16:22:08] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[16:22:08] *** Quits: hogarius (hogarius@id-222644.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: coldmountain (sid484352@id-484352.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: han-` (sid293063@id-293063.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: dunc (sid16@id-16.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[16:22:08] *** Quits: jtanner (sid194399@id-194399.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: debnet (sid330295@python/afpy/debnet) (*.net *.split)
[16:22:08] *** Quits: rockSTONE (sid315855@id-315855.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: recursion (sid504862@user/recursion) (*.net *.split)
[16:22:08] *** Quits: bertiger (~bertiger@user/bertiger) (*.net *.split)
[16:22:08] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[16:22:08] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (*.net *.split)
[16:22:08] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[16:22:08] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[16:22:08] *** Quits: Jmtrix (~qed@user/jmtrix) (*.net *.split)
[16:22:08] *** Quits: dnns01 (~quassel@2a02:c207:3003:651::1) (*.net *.split)
[16:22:08] *** Quits: wisefriday (wisefriday@sempiternity.club) (*.net *.split)
[16:22:08] *** Quits: nixture (uid240036@id-240036.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: daniel2 (daniel@user/daniel2) (*.net *.split)
[16:22:08] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[16:22:08] *** Quits: synic (~squish@li74-118.members.linode.com) (*.net *.split)
[16:22:08] *** Quits: wm (~wmy@2a01:4f8:1c1c:7918::1) (*.net *.split)
[16:22:08] *** Quits: genewitch (~genewitch@triggerwarning.projectftm.com) (*.net *.split)
[16:22:08] *** Quits: rodstewart (~dmartins@188.ip-149-56-97.net) (*.net *.split)
[16:22:08] *** Quits: xikkub (me@user/xikkub) (*.net *.split)
[16:22:08] *** Quits: redkrieg (~redkrieg@user/redkrieg) (*.net *.split)
[16:22:08] *** Quits: masterkorp (~masterkor@user/masterkorp) (*.net *.split)
[16:22:08] *** Quits: SrPx (sid108780@id-108780.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[16:23:02] *** Quits: marienz_ (~marienz@libera/staff/marienz) (Ping timeout: 630 seconds)
[16:25:47] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Ping timeout: 252 seconds)
[16:25:47] *** Quits: flimsypondreed[m (~flimsypon@2001:470:69fc:105::cd71) (Ping timeout: 252 seconds)
[16:26:53] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[16:27:42] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[16:27:42] *** Joins: rany (~rany@user/rany)
[16:27:42] *** Joins: Exa (exa@irc.moe)
[16:27:42] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[16:27:42] *** Joins: gerard (~gerard@user/gerard)
[16:27:42] *** Joins: ThiefMaster (thief@indico/developer/thiefmaster)
[16:27:42] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[16:27:42] *** Joins: mspe (~user@tilde.team/user/mspe)
[16:27:42] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[16:27:42] *** Joins: aluria (~aluria@canonical/aluria)
[16:27:42] *** Joins: MJ94 (mj94@user/mj94)
[16:27:42] *** Joins: especial (~especial@2a0a:51c0:0:1f:67a7::2)
[16:27:42] *** Joins: enrh (~enrh@user/enrh)
[16:27:42] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[16:27:42] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[16:27:42] *** Joins: petaflot (~root@lutolf.vserver.nimag.net)
[16:27:42] *** Joins: crackerjack (crackerjac@pear.bnc4free.com)
[16:27:42] *** Joins: asd (~noname@user/asd)
[16:27:42] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[16:27:42] *** Joins: user3456 (user3456@user/user3456)
[16:27:42] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[16:27:42] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[16:27:42] *** Joins: leosilva (~leosilva@canonical/leosilva)
[16:27:42] *** Joins: wgwz (~wgwz@45.55.193.150)
[16:27:42] *** Joins: laretta (~laretta@user/laretta)
[16:27:42] *** Joins: bkhl (~bkhl@user/bkhl)
[16:27:42] *** Joins: northernsage (~dobox@138.197.11.208)
[16:27:42] *** Joins: sandipndev (sandipndev@2600:3c00::f03c:92ff:fe8e:dce6)
[16:27:42] *** Joins: Sadale (~Sadale@user/sadale)
[16:27:42] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[16:27:42] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[16:27:42] *** Joins: foureyes (foureyes@brought.to.you.by.bnc4free.com)
[16:27:42] *** Joins: thm (~thomas@fedora/thm)
[16:27:42] *** Joins: nickodd (~nickodd@user/nickodd)
[16:27:42] *** Joins: mossman93 (~quassel@user/mossman93)
[16:27:42] *** Joins: xernaron (~xernaron@box.xernaron.ch)
[16:27:42] *** Joins: KombuchaKip (~kip@192.252.230.5)
[16:27:42] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[16:27:42] *** Joins: LucaTM (~LucaTM@user/lucatm)
[16:27:42] *** Joins: s1b1 (~s1b1@user/s1b1)
[16:27:42] *** Joins: dfg (dfg@user/dfg)
[16:27:42] *** Joins: shan (shan@user/shan)
[16:27:42] *** Joins: m4v (~znc@ubuntu/member/m4v)
[16:27:42] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[16:27:42] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[16:27:42] *** Joins: mgedmin (~mg@user/mgedmin)
[16:27:42] *** Joins: Celelibi (celelibi@user/celelibi)
[16:27:42] *** Joins: webmind (~webmind@user/webmind)
[16:27:42] *** Joins: sharksauce (sharksauce@user/sharksauce)
[16:27:42] *** Joins: fructose (~fructose@user/fructose)
[16:27:42] *** Joins: tonitch (~tonitch@user/tonitch)
[16:27:42] *** Joins: uuair (~quassel@user/uuair)
[16:27:42] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[16:27:42] *** Joins: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br)
[16:27:42] *** Joins: jkl (~jkl@user/jkl)
[16:27:42] *** Joins: dynos01 (~dynos01@2600:3c01:e000:36a::8400)
[16:27:42] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[16:27:42] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[16:27:42] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[16:27:42] *** Joins: AM (~techman@87-94-111-135.bb.dnainternet.fi)
[16:27:42] *** Joins: esaym153 (~esaym153@net153.net)
[16:27:42] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[16:27:42] *** Joins: SallyAhaj (sallyahaj@user/sallyahaj)
[16:27:42] *** Joins: d3x (michal@bielaw.ski)
[16:27:42] *** Joins: mweckbecker (~matthias@weckbecker.name)
[16:27:42] *** Joins: wereii (~wereii@37.205.14.89)
[16:27:42] *** Joins: hendry (~hendry@210.23.22.2)
[16:27:42] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[16:27:42] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[16:27:42] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[16:27:42] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[16:27:42] *** Joins: llinguini (sid257922@id-257922.stonehaven.irccloud.com)
[16:27:42] *** Joins: morgabra (sid500580@user/morgabra)
[16:27:42] *** Joins: altendky (sid135382@id-135382.stonehaven.irccloud.com)
[16:27:42] *** Joins: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com)
[16:27:42] *** Joins: kofuyu (~kofuyu@user/kofuyu)
[16:27:42] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[16:27:42] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:27:42] *** Joins: dcaro (~dcaro@user/dcaro)
[16:27:42] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[16:27:42] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[16:27:42] *** Joins: yitz (~yitz@exercism/yitz)
[16:27:42] *** Joins: jess (~jess@libera/staff/jess)
[16:27:42] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[16:27:42] *** Joins: ldm (~ldm@hacksoc/member)
[16:27:42] *** Joins: maxking (~maxking@user/maxking)
[16:27:42] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[16:27:42] *** Joins: GNUtoo (~GNUtoo@cyberdimension.org)
[16:27:42] *** Joins: axisys_ (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[16:27:42] *** Joins: Nei (~ailin@user/nemui)
[16:27:42] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[16:27:42] *** Joins: rigid (~rigid@user/rigid)
[16:27:42] *** Joins: dob1 (~dob1@user/dob1)
[16:27:42] *** Joins: phryk (~totallyno@user/phryk)
[16:27:42] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[16:27:42] *** Joins: skeld (~skeld@2601:148:200:ac70:7021:6011:d19c:6413)
[16:27:42] *** Joins: ente_ (~ente@p200300dc5f0b7b0077d687d8c50841ea.dip0.t-ipconnect.de)
[16:27:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:27:42] *** Joins: Samian (~Sami@2620:10d:c091:480::1:ab1a)
[16:27:42] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[16:27:42] *** Joins: inom (~inom@176.59.108.224)
[16:27:42] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[16:27:42] *** Joins: falx (~falx@user/falx)
[16:27:42] *** Joins: {HD} (~{HD}@191.96.185.81)
[16:27:42] *** Joins: renrelkha_ (~renrelkha@user/renrelkha)
[16:27:42] *** Joins: fikran (~fikran@user/fikran)
[16:27:42] *** Joins: adium_ (adium@user/adium)
[16:27:42] *** Joins: MrC (Ben@mrbenc.net)
[16:27:42] *** Joins: saschi_ (~saschi@user/saschi)
[16:27:42] *** Joins: blackop_ (~ocloud@user/blackop)
[16:27:42] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[16:27:42] *** Joins: francis (francis@user/francis)
[16:27:42] *** Joins: Jefren1 (~Jefren@208.104.190.55)
[16:27:42] *** Joins: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net)
[16:27:42] *** Joins: Roey (~Roey@user/Roey)
[16:27:42] *** Joins: syntaxma1 (~wade@li227-215.members.linode.com)
[16:27:42] *** Joins: lgrn_ (~leif@user/lgrn)
[16:27:42] *** Joins: harm_ (~urth@geertswei.nl)
[16:27:42] *** Joins: foo_ (~foo@user/foo/x-8763512)
[16:27:42] *** Joins: kietop (~kieto@user/kieto)
[16:27:42] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[16:27:42] *** Joins: kindablu| (znc@irc.tpurist.com)
[16:27:42] *** Joins: kindablu- (znc@207.246.111.155)
[16:27:42] *** Joins: polyrob (~rob@user/polyrob)
[16:27:42] *** Joins: JoelJoel (~jjshoe@user/joel)
[16:27:42] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[16:27:42] *** Joins: noord_ (~noord@user/noord)
[16:27:42] *** Joins: connor_goodwolf_ (~connor@user/connor-goodwolf/x-2615606)
[16:27:42] *** Joins: Fingel_ (~fingel@user/fingel)
[16:27:42] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[16:27:42] *** Joins: etiennem- (~etienne@user/etienneme)
[16:27:42] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[16:27:42] *** Joins: sirn (~sirn@user/sirn)
[16:27:42] *** Joins: wyre (~wyre@user/wyre)
[16:27:42] *** Joins: _janus- (~janus@blotter.ld-linux.so)
[16:27:42] *** Joins: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com)
[16:27:42] *** Joins: umamisoup (uid511883@id-511883.stonehaven.irccloud.com)
[16:27:42] *** Joins: WarpedAI (~Warped@user/warped)
[16:27:42] *** Joins: martums (martums@user/martums)
[16:27:42] *** Joins: Armen (~Armen@armen138.com)
[16:27:42] *** Joins: waxfire238 (~waxfire@65.119.2.240)
[16:27:42] *** Joins: michele_ (~eraser@user/michele)
[16:27:42] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:27:42] *** Joins: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz)
[16:27:42] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[16:27:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:27:42] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:27:42] *** Joins: y1n (~y1n@84-115-65-66.wifi.dynamic.surfer.at)
[16:27:42] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[16:27:42] *** Joins: ano (~weechat@user/ano)
[16:27:42] *** Joins: Karel (~Karel@ptr-9091p55a55gu0o2x7ob.18120a2.ip6.access.telenet.be)
[16:27:42] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[16:27:42] *** Joins: nyah (~nyah@51.146.30.113)
[16:27:42] *** Joins: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com)
[16:27:42] *** Joins: georgios (~georgios@user/georgios)
[16:27:42] *** Joins: Oddity (Oddity@user/oddity)
[16:27:42] *** Joins: ice9 (~ice9@user/ice9)
[16:27:42] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[16:27:42] *** Joins: thiras (~thiras@user/thiras)
[16:27:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:27:42] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[16:27:42] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[16:27:42] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[16:27:42] *** Joins: zegalch (~zegalch@178.128.75.133)
[16:27:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:27:42] *** Joins: Error2505 (~Guest71@ip-89-102-14-38.net.upcbroadband.cz)
[16:27:42] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[16:27:42] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[16:27:42] *** Joins: Naan (~Naan@user/naan)
[16:27:42] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[16:27:42] *** Joins: poorboy (~poorboy@104.131.46.87)
[16:27:42] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:27:42] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[16:27:42] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:27:42] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[16:27:42] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[16:27:42] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[16:27:42] *** Joins: darksun (~darksun@user/darksun)
[16:27:42] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[16:27:42] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[16:27:42] *** Joins: chilversc (~chilversc@user/chilversc)
[16:27:42] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[16:27:42] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[16:27:42] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:27:42] *** Joins: schumaml1 (~schumaml@dslb-178-007-207-243.178.007.pools.vodafone-ip.de)
[16:27:42] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[16:27:42] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[16:27:42] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:27:42] *** Joins: plastico (~plastico@neomutt/plastico)
[16:27:42] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:27:42] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[16:27:42] *** Joins: kmh_ (~kmh@p200300df5f0d0200dc05e9b97966e73c.dip0.t-ipconnect.de)
[16:27:42] *** Joins: hendursa1 (~weechat@user/hendursaga)
[16:27:42] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[16:27:42] *** Joins: janemba (~janemba@94.204.254.193)
[16:27:42] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[16:27:42] *** Joins: bam32_ (~bambams@user/bambams)
[16:27:42] *** Joins: mcope (~matt@user/mcope)
[16:27:42] *** Joins: Auron (~Auron956@user/auron)
[16:27:42] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[16:27:42] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[16:27:42] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[16:27:42] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[16:27:42] *** Joins: seednode (~seednode@user/seednode)
[16:27:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:27:42] *** Joins: mickey8 (~user@user/mickey)
[16:27:42] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[16:27:42] *** Joins: Gerula (~Gerula@user/gerula)
[16:27:42] *** Joins: acresearch (~acresearc@user/acresearch)
[16:27:42] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[16:27:42] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[16:27:42] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[16:27:42] *** Joins: Wulf (~Wulf@user/wulf)
[16:27:42] *** Joins: ihristov (~ihristov@217.145.94.71)
[16:27:42] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[16:27:42] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[16:27:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:27:42] *** Joins: gusto (~Augustus@109.255.100.54)
[16:27:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[16:27:42] *** Joins: Abrax (~Abrax@user/abrax)
[16:27:42] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[16:27:42] *** Joins: CombatVet (~c4@user/combatvet)
[16:27:42] *** Joins: sebastianos (~sebastian@user/sebastianos)
[16:27:42] *** Joins: manti7 (~manti7@176.10.104.94)
[16:27:42] *** Joins: jaggz (~jaggz@user/jaggz)
[16:27:42] *** Joins: rendar (~rendar@user/rendar)
[16:27:42] *** Joins: kosh (~kosh@user/kosh)
[16:27:42] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[16:27:42] *** Joins: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f)
[16:27:42] *** Joins: dvx (~dvx@185.63.97.64)
[16:27:42] *** Joins: hifi (hifi@m.vi.fi)
[16:27:42] *** Joins: upsala (~zcb@185.213.155.160)
[16:27:42] *** Joins: mci64 (~mci64@185.242.190.95)
[16:27:42] *** Joins: stranac (~stranac@195.29.239.126)
[16:27:42] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[16:27:42] *** Joins: c10l2 (~c10l@89.34.167.207)
[16:27:42] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[16:27:42] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[16:27:42] *** Joins: FatDarrell (~textual@68.91.156.229)
[16:27:42] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[16:27:42] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:27:42] *** Joins: tims (~tims@61.69.131.46)
[16:27:42] *** Joins: figgle77 (~figgle77@137.28.231.187)
[16:27:42] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[16:27:42] *** Joins: beencubed (~beencubed@209.131.238.248)
[16:27:42] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:27:42] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[16:27:42] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[16:27:42] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:27:42] *** Joins: emerent (~quassel@p200300cd57058c89ba27ebfffed28a59.dip0.t-ipconnect.de)
[16:27:42] *** Joins: blddk (~admin@185.233.252.229)
[16:27:42] *** Joins: Haxxa (~Haxxa@122-199-44-36.ip4.superloop.com)
[16:27:42] *** Joins: Skyfire (~pyon@user/pyon)
[16:27:42] *** Joins: Strom (strom@fedora/strom)
[16:27:42] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[16:27:42] *** Joins: michaelis (~michaelis@193.183.209.17)
[16:27:42] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[16:27:42] *** Joins: icy (~icy@user/icy)
[16:27:42] *** Joins: Elzington_ (~Elzington@68.235.43.28)
[16:27:42] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[16:27:42] *** Joins: KeiraT (~k@lulzsec.co.uk)
[16:27:42] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[16:27:42] *** Joins: JavaBean (~JavaBean@user/javabean)
[16:27:42] *** Joins: ornxka (~ornxka@user/ornxka)
[16:27:42] *** Joins: sus (thelounge@user/zeromomentum)
[16:27:42] *** Joins: digilink (~digilink@user/digilink)
[16:27:42] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[16:27:42] *** Joins: iflema (~ian@user/iflema)
[16:27:42] *** Joins: BUSY (~BUSY@user/busy)
[16:27:42] *** Joins: Dan39 (~dan@user/dan39)
[16:27:42] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[16:27:42] *** Joins: fflam_ (~mdt@ip70-179-20-127.sd.sd.cox.net)
[16:27:42] *** Joins: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[16:27:42] *** Joins: AquaL1te_ (~AquaL1te@user/aqual1te)
[16:27:42] *** Joins: twobitsp1ite (~twobitspr@195.181.171.244)
[16:27:42] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[16:27:42] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[16:27:42] *** Joins: t3nj1n_ (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[16:27:42] *** Joins: irrgit_ (~irrgit@192.241.175.183)
[16:27:42] *** Joins: kurtthem1ker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[16:27:42] *** Joins: andrewSC_ (~andrewSC@archlinux/trusteduser/andrewSC)
[16:27:42] *** Joins: nbin_ (~nbin@user/nbin)
[16:27:42] *** Joins: roniez_ (~roniez@nixsec.se)
[16:27:42] *** Joins: Milos (~Milos@user/milos)
[16:27:42] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[16:27:42] *** Joins: kenwoodfox_ (~quassel@user/kenwoodfox)
[16:27:42] *** Joins: dzz007 (~dzz007@user/dzz007)
[16:27:42] *** Joins: snalty_ (~Shhh@user/snalty)
[16:27:42] *** Joins: dez (uid92154@user/dez)
[16:27:42] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[16:27:42] *** Joins: Maikel (~Maikel@130.61.63.136)
[16:27:42] *** Joins: erica (~erica@user/erica)
[16:27:42] *** Joins: catdog2 (~quassel@2001:470:50f7:cdcd::cd1)
[16:27:42] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[16:27:42] *** Joins: milosz_ (~milosz@user/milosz)
[16:27:42] *** Joins: pacbard_ (~pacbard@user/pacbard)
[16:27:42] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[16:27:42] *** Joins: asdfasdf (~Barones@2804:48dc:8500:0:cce1:fa73:7a9d:9857)
[16:27:42] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[16:27:42] *** Joins: knipster (~knipster@user/knipster)
[16:27:42] *** Joins: dulanic (~dulanic@47.187.144.163)
[16:27:42] *** Joins: brabrax (~brabrax@user/brabrax)
[16:27:42] *** Joins: vlm (~vlm@user/vlm)
[16:27:42] *** Joins: BlessJah (~BlessJah@user/blessjah)
[16:27:42] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[16:27:42] *** Joins: gizmo_ (~gizmo@45.91.125.2)
[16:27:42] *** Joins: srhm (~ascii@user/srhm)
[16:27:42] *** Joins: rndm (~arossi@2600:1700:5f81:1f50:698c:ce69:6d27:7b65)
[16:27:42] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:27:42] *** Joins: kadobanana (~mud@user/kadoban)
[16:27:42] *** Joins: Kvothe (~weechat@user/elodin)
[16:27:42] *** Joins: Allegretto (~allegrett@89-186-97-71.pool.digikabel.hu)
[16:27:42] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[16:27:42] *** Joins: grateful (~grateful@user/grateful)
[16:27:42] *** Joins: Classic (~root@user/classic)
[16:27:42] *** Joins: SuperLag (~akulbe@user/superlag)
[16:27:42] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[16:27:42] *** Joins: dermato (~dermatobr@154.21.23.75)
[16:27:42] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[16:27:42] *** Joins: summonner (~summonner@188.24.22.156)
[16:27:42] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:27:42] *** Joins: cheater (~Username@user/cheater)
[16:27:42] *** Joins: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com)
[16:27:42] *** Joins: kenoba (~kenoba@user/kenoba)
[16:27:42] *** Joins: harwiltz (~harwiltz@modemcable212.231-202-24.mc.videotron.ca)
[16:27:42] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[16:27:42] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[16:27:42] *** Joins: dxrt (~dxrt@user/dxrt)
[16:27:42] *** Joins: rud0lf (rud0lf@user/rud0lf)
[16:27:42] *** Joins: nicksloan (sid195124@user/nicksloan)
[16:27:42] *** Joins: f8e4 (~user@159.89.21.45)
[16:27:42] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[16:27:42] *** Joins: sybariten (~jake@157.90.217.120)
[16:27:42] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:27:42] *** Joins: Socra (~Socra@206.217.216.27)
[16:27:42] *** Joins: roadt (~roadt@36.5.94.204)
[16:27:42] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[16:27:42] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[16:27:42] *** Joins: nate44 (~Nathan22@S0106bcd16583c035.gv.shawcable.net)
[16:27:42] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[16:27:42] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[16:27:42] *** Joins: Doffi (~doffi@91.132.197.188)
[16:27:42] *** Joins: eichin (sid27120@tinside.irccloud.com)
[16:27:42] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[16:27:42] *** Joins: pan (~quassel@pankid.club)
[16:27:42] *** Joins: synbiose (~synbiose@user/synbiose)
[16:27:42] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[16:27:42] *** Joins: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133)
[16:27:42] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[16:27:42] *** Joins: Hackerpcs (~user@user/hackerpcs)
[16:27:42] *** Joins: edr (~edr@user/edr)
[16:27:42] *** Joins: samathy (~samathy@user/samathy)
[16:27:42] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[16:27:42] *** Joins: nrg (~NRG@user/nrg)
[16:27:42] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[16:27:42] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:27:42] *** Joins: vince (~vince@75.127.14.76)
[16:27:42] *** Joins: mei (~mei@user/mei)
[16:27:42] *** Joins: MikZyth (~MikZyth@188.65.242.223)
[16:27:42] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[16:27:42] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[16:27:42] *** Joins: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com)
[16:27:42] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[16:27:42] *** Joins: hodapp (~mawson@user/hodapp)
[16:27:42] *** Joins: az (az@user/azz)
[16:27:42] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[16:27:42] *** Joins: molt (~molt@79.140.150.21)
[16:27:42] *** Joins: wolfshappen (~waff@irc.furworks.de)
[16:27:42] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[16:27:42] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[16:27:42] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[16:27:42] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[16:27:42] *** Joins: Alan (~alan@user/alan)
[16:27:42] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[16:27:42] *** Joins: drmessano (sid104353@user/drmessano)
[16:27:42] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:27:42] *** Joins: simplicity (~yti@user/simplicity)
[16:27:42] *** Joins: Vonter (~Vonter@user/vonter)
[16:27:42] *** Joins: jab416171 (~jab416171@c-174-52-176-66.hsd1.ut.comcast.net)
[16:27:42] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[16:27:42] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[16:27:42] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[16:27:42] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[16:27:42] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[16:27:42] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[16:27:42] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[16:27:42] *** Joins: niko (~niko@libera/staff/niko)
[16:27:42] *** Joins: trashbird (~trashbird@user/trashbird)
[16:27:42] *** Joins: JanC (~janc@user/janc)
[16:27:42] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[16:27:42] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[16:27:42] *** Joins: bambams (~bambams@user/bambams)
[16:27:42] *** Joins: Moyst (~moyst@user/moyst)
[16:27:42] *** Joins: HenryTheLongshot (~Henry@46.101.4.181)
[16:27:42] *** Joins: Ara (~Ara@user/ara)
[16:27:42] *** Joins: kgz (~kragniz@nyaa.kragniz.eu)
[16:27:42] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[16:27:42] *** Joins: DCTWD (~dc@uz.utmappro.com)
[16:27:42] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[16:27:42] *** Joins: sud (~sud@user/sud)
[16:27:42] *** Joins: jfb4 (~jfb4@178.62.2.68)
[16:27:42] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[16:27:42] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[16:27:42] *** Joins: Karyon (~Karyon@user/karyon)
[16:27:42] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[16:27:42] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[16:27:42] *** Joins: achilleas (~ach@user/achilleas)
[16:27:42] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[16:27:42] *** Joins: dece (~dece@dece.space)
[16:27:42] *** Joins: jootoi (~jootoi@130.61.158.197)
[16:27:42] *** Joins: Pixi (~Pixi@user/pixi)
[16:27:42] *** Joins: asix (~Anders@user/asix)
[16:27:42] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[16:27:42] *** Joins: umimaso (~umimaso@188.166.147.131)
[16:27:42] *** Joins: topoi (~topoi@user/topoi)
[16:27:42] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[16:27:42] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[16:27:42] *** Joins: purplex (~purplex@user/purplex)
[16:27:42] *** Joins: frrs (~ferros@vps-eacaba1b.vps.ovh.net)
[16:27:42] *** Joins: lxdr (~lxdr@user/lxdr)
[16:27:42] *** Joins: libera- (~utunbu@user/utunbu)
[16:27:42] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[16:27:42] *** Joins: lack (~lack@user/lack)
[16:27:42] *** Joins: WayToDoor7 (~WayToDoor@user/waytodoor)
[16:27:42] *** Joins: s8n1 (~s8n@user/s8n)
[16:27:42] *** Joins: carbolymer (~carbolyme@dropacid.net)
[16:27:42] *** Joins: mteo (francis@user/francis)
[16:27:42] *** Joins: ndim (hun@moooo.n-dimensional.de)
[16:27:42] *** Joins: paperManu (~paperManu@138.197.128.151)
[16:27:42] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[16:27:42] *** Joins: MightyMu (~MightyMu@104.131.138.31)
[16:27:42] *** Joins: godlike (~godlike@user/godlike)
[16:27:42] *** Joins: zwindl (~abc@user/abc)
[16:27:42] *** Joins: Spydar007 (~spydar007@user/spydar007)
[16:27:42] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[16:27:42] *** Joins: {4144} (~{4144}@46.56.64.31)
[16:27:42] *** Joins: erry (~erry@errietta.me)
[16:27:42] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[16:27:42] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[16:27:42] *** Joins: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com)
[16:27:42] *** Joins: BigShip (~BigShip@user/bigship)
[16:27:42] *** Joins: encukou_ (~quassel@nat-pool-brq-t.redhat.com)
[16:27:42] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[16:27:42] *** Joins: wbn (~wbn@user/wbn)
[16:27:42] *** Joins: mgubyt_ (u@mgub.yt)
[16:27:42] *** Joins: mbrndtgn5 (~mbrndtgn@undecidable.de)
[16:27:42] *** Joins: FunkyBob (~curtis@vhost3.tinbrain.net)
[16:27:42] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[16:27:42] *** Joins: Teacup (~teacup@user/teacup)
[16:27:42] *** Joins: gaken (~gaken@user/galen)
[16:27:42] *** Joins: oprypin (~irc@pryp.in)
[16:27:42] *** Joins: tabakhase (tabakhase@user/tabakhase)
[16:27:42] *** Joins: doc (~doc@user/doc)
[16:27:42] *** Joins: dbg (~dbg@user/dbg)
[16:27:42] *** Joins: Affliction (affliction@user/affliction)
[16:27:42] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[16:27:42] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[16:27:42] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[16:27:42] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[16:27:42] *** Joins: skreech (~skreech@user/skreech)
[16:27:42] *** Joins: Isthmusi (~Isthmus@user/isveni)
[16:27:42] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[16:27:42] *** Joins: EGH (~EGH@185.25.195.104)
[16:27:42] *** Joins: jbe (~hellother@lysator/root/jbe)
[16:27:42] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[16:27:42] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[16:27:42] *** Joins: BernieMont (~BernieMon@2001:558:6005:3:f8c7:b5aa:4b69:d5ab)
[16:27:42] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[16:27:42] *** Joins: Bardon (~Bardon@user/Bardon)
[16:27:42] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[16:27:42] *** Joins: de-facto (~de-facto@user/de-facto)
[16:27:42] *** Joins: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com)
[16:27:42] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[16:27:42] *** Joins: flagrama (sid145621@id-145621.stonehaven.irccloud.com)
[16:27:42] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[16:27:42] *** Joins: crazysim (sid86009@id-86009.stonehaven.irccloud.com)
[16:27:42] *** Joins: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com)
[16:27:42] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[16:27:42] *** Joins: Trieste_ (T@user/pilgrim)
[16:27:42] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[16:27:42] *** Joins: mcglk (~mcglk@131.191.49.120)
[16:27:42] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[16:27:42] *** Joins: MrNaz (sid133418@id-133418.highgate.irccloud.com)
[16:27:42] *** Joins: bjs (sid190364@user/bjs)
[16:27:42] *** Joins: ormiret (sid314108@id-314108.tooting.irccloud.com)
[16:27:42] *** Joins: OPK (~OPK@user/opk)
[16:27:42] *** Joins: cmagina (sid286142@user/cmagina)
[16:27:42] *** Joins: defn (~n0b0dy@user/defn)
[16:27:42] *** Joins: mpmc (~mpmc@user/mpmc)
[16:27:42] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[16:27:42] *** Joins: fury (uid193779@id-193779.brockwell.irccloud.com)
[16:27:42] *** Joins: dskull (~dskull@user/dskull)
[16:27:42] *** Joins: monchi (sid347418@id-347418.charlton.irccloud.com)
[16:27:42] *** Joins: stigz (sid371747@id-371747.tinside.irccloud.com)
[16:27:42] *** Joins: r0bby (r0bby@user/r0bby)
[16:27:42] *** Joins: Repiphany (~Repiphany@user/repiphany)
[16:27:42] *** Joins: simone (~nya@user/sx)
[16:27:42] *** Joins: Pent (sid313808@id-313808.tooting.irccloud.com)
[16:27:42] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[16:27:42] *** Joins: kiska (~kiska@user/kiska)
[16:27:42] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[16:27:42] *** Joins: rpittau (sid346891@id-346891.tinside.irccloud.com)
[16:27:42] *** Joins: syllin (~syllin@user/syllin)
[16:27:42] *** Joins: fluter (~fluter@user/fluter)
[16:27:42] *** Joins: jinsun (~quassel@user/jinsun)
[16:27:42] *** Joins: dhch (~dhch@185.213.154.168)
[16:27:42] *** Joins: RoyK (~roy@user/royk)
[16:27:42] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[16:27:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:27:42] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[16:27:42] *** Joins: jabberwock (~jessy@user/jabberwock)
[16:27:42] *** Joins: jdmark (~jdmark@67.8.137.130)
[16:27:42] *** Joins: MercilessDeth (~brad@136.49.61.2)
[16:27:42] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[16:27:42] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:d869:df28:2173:ba54)
[16:27:42] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[16:27:42] *** Joins: baroobob (~jwbwater@98.215.243.94)
[16:27:42] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[16:27:42] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:f8f2:84a2:79d0:4f6f)
[16:27:42] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[16:27:42] *** Joins: driib (~driib@185.195.233.162)
[16:27:42] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[16:27:42] *** Joins: Jigsy (~Jigsy@user/jigsy)
[16:27:42] *** Joins: dude-x_ (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[16:27:42] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[16:27:42] *** Joins: bidouille (~user_name@trois.potager.org)
[16:27:42] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[16:27:42] *** Joins: ilmais1n (~il@irc.oh1cgn.fi)
[16:27:42] *** Joins: acid (~acid@user/acid)
[16:27:42] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:27:42] *** Joins: FKAShinobi (~shinobi@2601:18c:d07f:f2e9:b36e:b615:5c5f:a300)
[16:27:42] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[16:27:42] *** Joins: death916 (~death916@user/death916)
[16:27:42] *** Joins: ShorTie (~ShorTie@130.sub-72-105-241.myvzw.com)
[16:27:42] *** Joins: Antibody (~Antibody@107.170.145.30)
[16:27:42] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[16:27:42] *** Joins: buhman (sid411355@user/buhman)
[16:27:42] *** Joins: habnabit_ (habnabit@python/site-packages/habnabit)
[16:27:42] *** Joins: byzandula (~byzandula@beerbq.net)
[16:27:42] *** Joins: finsternis (~X@23.226.237.192)
[16:27:42] *** Joins: ario (~ario@159.65.220.102)
[16:27:42] *** Joins: BytesAndCoffee (~libera@bytes.coffee)
[16:27:42] *** Joins: duoi (~duoi@user/duoi)
[16:27:42] *** Joins: AUDaags (~ubuntu@ec2-3-106-166-31.ap-southeast-2.compute.amazonaws.com)
[16:27:42] *** Joins: n1000 (~n1000@user/n1000)
[16:27:42] *** Joins: chromis (sid150893@id-150893.tinside.irccloud.com)
[16:27:42] *** Joins: dfch (~dfch@user/dfch)
[16:27:42] *** Joins: a1paca_ (~a1paca@user/a1paca)
[16:27:42] *** Joins: dgw (dgw@sopel/admin/dgw)
[16:27:42] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[16:27:42] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[16:27:42] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[16:27:42] *** Joins: trashcatt_ (~trashcatt@znc.trashcat.xyz)
[16:27:42] *** Joins: suffer (znc@mutant.penguin.fyi)
[16:27:42] *** Joins: rf` (~envex@cpe-173-91-189-33.neo.res.rr.com)
[16:27:42] *** Joins: harleypig (thelounge@harleypig.com)
[16:27:42] *** Joins: stoneware (~stoneware@user/stoneware)
[16:27:42] *** Joins: oisota (~oisota@user/oisota)
[16:27:42] *** Joins: akaWolf (~akaWolf@akawolf.org)
[16:27:42] *** Joins: gry (~quassel@botters/gry)
[16:27:42] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[16:27:42] *** Joins: maxtimbo (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[16:27:42] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[16:27:42] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:27:42] *** Joins: nac (~nac@user/nac)
[16:27:42] *** Joins: ST47 (~ST47@wikimedia/st47)
[16:27:42] *** Joins: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net)
[16:27:42] *** Joins: extnct (~extnct@2604:180:2:a54:1::9ce7)
[16:27:42] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[16:27:42] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[16:27:42] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[16:27:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[16:27:42] *** Joins: odrling (~odrling@korone.aidoru.agency)
[16:27:42] *** Joins: r3m (~launch@user/r3m)
[16:27:42] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[16:27:42] *** Joins: cyphase (~cyphase@user/cyphase)
[16:27:42] *** Joins: alexyov8 (~alexyov@84.22.6.244)
[16:27:42] *** Joins: theo (~theo@user/theo)
[16:27:42] *** Joins: ATAD (~ATAD@user/atad)
[16:27:42] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[16:27:42] *** Joins: Cienisty (Cienisty@user/cienisty)
[16:27:42] *** Joins: KernelPanic (~KernelPan@user/kernelpanic)
[16:27:42] *** Joins: luvalon1 (~luva@178.239.167.170)
[16:27:42] *** Joins: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com)
[16:27:42] *** Joins: Wu (~wu@158.red-83-50-192.dynamicip.rima-tde.net)
[16:27:42] *** Joins: nubonix (uid492751@id-492751.charlton.irccloud.com)
[16:27:42] *** Joins: Mikro (leo@libera.ninja)
[16:27:42] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[16:27:42] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[16:27:42] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[16:27:42] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[16:27:42] *** Joins: kevr (~kevr@user/kevr)
[16:27:42] *** Joins: hjmcnew (sid86092@tinside.irccloud.com)
[16:27:42] *** Joins: BillyZane (~BillyZane@91.196.220.172)
[16:27:42] *** Joins: Evolver (sid32215@user/evolver)
[16:27:42] *** Joins: ziky (sid27087@user/ziky)
[16:27:42] *** Joins: darxun (sid504814@tinside.irccloud.com)
[16:27:42] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:19c1:d739:4799:9431)
[16:27:42] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[16:27:42] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[16:27:42] *** Joins: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com)
[16:27:42] *** Joins: optimant (quasselcor@user/optimant)
[16:27:42] *** Joins: visl (visl@user/visl)
[16:27:42] *** Joins: Masklin (~joel@89-233-200-127.cust.bredband2.com)
[16:27:42] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[16:27:42] *** Joins: damonlynch (~ngaio@c-98-32-237-193.hsd1.in.comcast.net)
[16:27:42] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[16:27:42] *** Joins: maxpowa (~maxpowa@107.150.39.146)
[16:27:42] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:27:42] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:27:42] *** Joins: kpcyrd (~kpcyrd@archlinux/trusteduser/kpcyrd)
[16:27:42] *** Joins: rwb (~augh@theguntretort.com)
[16:27:42] *** Joins: spithash (~spithash@user/spithash)
[16:27:42] *** Joins: zamba (~marius@5.226.162.54)
[16:27:42] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[16:27:42] *** Joins: et (~et@user/et)
[16:27:42] *** Joins: llua (~llua@zsh/developer/llua)
[16:27:42] *** Joins: alxndr (~alexander@ybti.net)
[16:27:42] *** Joins: Thermoriax (Thermoriax@user/thermoriax)
[16:27:42] *** Joins: lf94 (~lf94@2604:a880:cad:d0::cd6:8001)
[16:27:42] *** Joins: guntbert (~yesitsme@user/guntbert)
[16:27:42] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[16:27:42] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[16:27:42] *** Joins: canton7 (canton7@about/csharp/canton7)
[16:27:42] *** Joins: neltraus (~neltraus@supernova.neltraus.de)
[16:27:42] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[16:27:42] *** Joins: notepad (~notepad@129.159.46.243)
[16:27:42] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[16:27:42] *** Joins: BinarySavior (~BinarySav@user/binarysavior)
[16:27:42] *** Joins: onu (~onufn@gibbs.uberspace.de)
[16:27:42] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[16:27:42] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[16:27:42] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[16:27:42] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[16:27:42] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[16:27:42] *** Joins: Trashlord (~trash@user/trashlord)
[16:27:42] *** Joins: baltazar (~baltazar@217-197-188-124.pool.digikabel.hu)
[16:27:42] *** Joins: Ninja3047 (~Ninja3047@3047.ninja)
[16:27:42] *** Joins: gabe (~gabe@user/gabe)
[16:27:42] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[16:27:42] *** Joins: dreamer (~dreamer@user/dreamer)
[16:27:42] *** Joins: ldlework (~hexeme@user/hexeme)
[16:27:42] *** Joins: philipp64|work (~philipp64@174.27.13.9)
[16:27:42] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:27:42] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[16:27:42] *** Joins: fuz (~fuz@user/fuz)
[16:27:42] *** Joins: chandankumar (~chandanku@51.159.58.174)
[16:27:42] *** Joins: colorado (~fluiD@161.97.231.145)
[16:27:42] *** Joins: amoe (~amoe@visarend.solasistim.net)
[16:27:42] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[16:27:42] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[16:27:42] *** Joins: Helenah (~helenah@user/helenah)
[16:27:42] *** Joins: Stx (stx@libera/staff/stx)
[16:27:42] *** Joins: trench (trench@user/trench)
[16:27:42] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[16:27:42] *** Joins: effprime (~effprime@user/effprime)
[16:27:42] *** Joins: zbe (~zbe@pleiades.zbe.bz)
[16:27:42] *** Joins: Confusioned (~AnySomebo@p5b15fbbc.dip0.t-ipconnect.de)
[16:27:42] *** Joins: fxrs (~fxrs@192.227.212.130)
[16:27:42] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[16:27:42] *** Joins: flay (~flay@user/flay)
[16:27:42] *** Joins: infobob (~infobob@python/bot/infobob)
[16:27:42] *** Joins: dthpulse (~quassel@podciarou.sk)
[16:27:42] *** Joins: shodan45 (~quassel@107.161.22.155)
[16:27:42] *** Joins: bboles (~bboles@64.94.212.195)
[16:27:42] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[16:27:42] *** Joins: avu (~jan@user/avu)
[16:27:42] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[16:27:42] *** Joins: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb)
[16:27:42] *** Joins: Dotz0cat (~Dotz0cat@h186.236.31.71.dynamic.ip.windstream.net)
[16:27:42] *** Joins: esv (~esv@72.11.45.232)
[16:27:42] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[16:27:42] *** Joins: supernovah (~supernova@mail.ijk.nz)
[16:27:42] *** Joins: vinnix (~vinnix@user/vinnix)
[16:27:42] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[16:27:42] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[16:27:42] *** Joins: LuKaRo_ (~LuKaRo@p57b15425.dip0.t-ipconnect.de)
[16:27:42] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[16:27:42] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[16:27:42] *** Joins: justache (~justache@user/justache)
[16:27:42] *** Joins: jochum (~jochum@user/jochum)
[16:27:42] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[16:27:42] *** Joins: murr4y (ali@user/murr4y)
[16:27:42] *** Joins: nisstyre (~wes@user/nisstyre)
[16:27:42] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[16:27:42] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[16:27:42] *** Joins: Scotteh (~Scotteh@user/scotteh)
[16:27:42] *** Joins: glider_ (~glider@user/glider)
[16:27:42] *** Joins: duracrisis (~kkh@user/duracrisis)
[16:27:42] *** Joins: mabi (~m42e@pb42.de)
[16:27:42] *** Joins: noarb- (~noarb@user/noarb)
[16:27:42] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[16:27:42] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[16:27:42] *** Joins: njt (~njt@zaph.org)
[16:27:42] *** Joins: zingos (~zingos@46.101.6.21)
[16:27:42] *** Joins: dav1d (~dav1d@user/dav1d)
[16:27:42] *** Joins: Ox4 (~int@0x4.cx)
[16:27:42] *** Joins: slavfox (~slavfox@93.158.232.111)
[16:27:42] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[16:27:42] *** Joins: mxp (~mxp@82.98.30.69)
[16:27:42] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:27:42] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[16:27:42] *** Joins: phlixi (~phlixi@aftr-62-216-205-171.dynamic.mnet-online.de)
[16:27:42] *** Joins: averell (~averell@user/averell)
[16:27:42] *** Joins: ali1234 (~al@user/ali1234)
[16:27:42] *** Joins: leonardo (~leonardo@user/leonardo)
[16:27:42] *** Joins: abyss_ (~robbins@user/robbins)
[16:27:42] *** Joins: python (~python@user/demon)
[16:27:42] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[16:27:42] *** Joins: recursion (sid504862@user/recursion)
[16:27:42] *** Joins: sgn (~sgn@user/sgn)
[16:27:42] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[16:27:42] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[16:27:42] *** Joins: Forty-Bot (~kvirc@pool-74-96-87-9.washdc.fios.verizon.net)
[16:27:42] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[16:27:42] *** Joins: zoid (~zoid@user/taxationistheft)
[16:27:42] *** Joins: dftrace (~dftrace@hopper.lethalbit.com)
[16:27:42] *** Joins: mgocobachi (~m@ancrae.com)
[16:27:42] *** Joins: tvm (~tom@ip-89-103-250-229.net.upcbroadband.cz)
[16:27:42] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[16:27:42] *** Joins: ops (~ops@user/echelon)
[16:27:42] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[16:27:42] *** Joins: k0fein (~esmeralda@user/k0fein)
[16:27:42] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[16:27:42] *** Joins: Mogget (Mogget@vogon.moshwire.com)
[16:27:42] *** Joins: bdeferme1 (~bdeferme@i.ctrl86.com)
[16:27:42] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[16:27:42] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[16:27:42] *** Joins: peterandre (peterandre@2605:6400:c847:1524::4251)
[16:27:42] *** Joins: SoF (~skius@user/skius)
[16:27:42] *** Joins: d1b (~db@user/d1b)
[16:27:42] *** Joins: AkechiShiro (~licht@user/akechishiro)
[16:27:42] *** Joins: tf (~tf@user/tf)
[16:27:42] *** Joins: Freso (sid7914@libera/staff/metabrainz.user.Freso)
[16:27:42] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[16:27:42] *** Joins: Ninpo (~Ninpo@charlton.qap.la)
[16:27:42] *** Joins: Tashtari (~tashtari@user/tashtari)
[16:27:42] *** Joins: woky (~woky@li1651-31.members.linode.com)
[16:27:42] *** Joins: ouemt (~quassel@user/ouemt)
[16:27:42] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[16:27:42] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[16:27:42] *** Joins: b0nn (~shane@user/b0nn)
[16:27:42] *** Joins: Yasumoto (~Yasumoto@ec2-34-212-228-153.us-west-2.compute.amazonaws.com)
[16:27:42] *** Joins: jancoow (~jancoow@user/jancoow)
[16:27:42] *** Joins: bjb (~bjb@sourcerer.ca)
[16:27:42] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[16:27:42] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[16:27:42] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[16:27:42] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[16:27:42] *** Joins: bss (bss@rie.incorporeal.org)
[16:27:42] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[16:27:42] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[16:27:42] *** Joins: mastardet (~mastardet@user/mastardet)
[16:27:42] *** Joins: nfc (nfc@tilde.institute)
[16:27:42] *** Joins: DaPinkOne (~Dap@user/dap)
[16:27:42] *** Joins: Jmtrix (~qed@user/jmtrix)
[16:27:42] *** Joins: bluss (~bluss@user/bluss)
[16:27:42] *** Joins: amanr (~therojjha@20.204.87.0)
[16:27:42] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[16:27:42] *** Joins: carlio (~carlio@88.198.149.110)
[16:27:42] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[16:27:42] *** Joins: ttkap_ (~ttkap@user/ttkap)
[16:27:42] *** Joins: Aye (jeda@hellomouse/dev/cryb.jeda)
[16:27:42] *** Joins: notevil (~notevil@user/notevil)
[16:27:42] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[16:27:42] *** Joins: programmerq (~programme@user/programmerq)
[16:27:42] *** Joins: koolazer (~koo@user/koolazer)
[16:27:42] *** Joins: jim (~jim@about/linux/staff/jim)
[16:27:42] *** Joins: micronn (~micronn@user/micronn)
[16:27:42] *** Joins: Dev0n (~Dev0n@user/dev0n)
[16:27:42] *** Joins: The-Compiler (~compiler@the-compiler.org)
[16:27:42] *** Joins: taru9 (~realTaru9@user/taru9)
[16:27:42] *** Joins: mikebald (~mikebald@159.203.185.106)
[16:27:42] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[16:27:42] *** Joins: tanner (~tanner@tilde.town)
[16:27:42] *** Joins: agronholm (sid403424@id-403424.brockwell.irccloud.com)
[16:27:42] *** Joins: h_ (rootvegeta@fsf/member/hays)
[16:27:42] *** Joins: explodes (~explodes@user/explodes)
[16:27:42] *** Joins: grawity (grawity@star.nullroute.eu.org)
[16:27:42] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[16:27:42] *** Joins: hexology- (~hexology@user/hexology)
[16:27:42] *** Joins: ebb (ebb@user/ebb)
[16:27:42] *** Joins: hsiktas (sid224847@id-224847.tooting.irccloud.com)
[16:27:42] *** Joins: roolebo (sid64806@id-64806.charlton.irccloud.com)
[16:27:42] *** Joins: neil (~kneel@rockylinux/infra/neil)
[16:27:42] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[16:27:42] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[16:27:42] *** Joins: hexa- (~hexa-@juno.lossy.network)
[16:27:42] *** Joins: Byteflux (~byte@byteflux.net)
[16:27:42] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[16:27:42] *** Joins: liam (sid7517@id-7517.brockwell.irccloud.com)
[16:27:42] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[16:27:42] *** Joins: gerikson (~gerikson@user/gerikson)
[16:27:42] *** Joins: NiKaN (sid385034@id-385034.brockwell.irccloud.com)
[16:27:42] *** Joins: launchd (examknow@bitbot/launchd)
[16:27:42] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[16:27:42] *** Joins: Widdershins (widders@ps.mad.cash)
[16:27:42] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[16:27:42] *** Joins: rud01f (rud0lf@user/rud0lf)
[16:27:42] *** Joins: kmikita (uid461814@id-461814.brockwell.irccloud.com)
[16:27:42] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:27:42] *** Joins: bjonnh (~jo@about/aquilenet/bjonnh)
[16:27:42] *** Joins: wisefriday (wisefriday@sempiternity.club)
[16:27:42] *** Joins: sabet (~sabet@user/sabet)
[16:27:42] *** Joins: m0nkey_ (~quassel@user/m0nkey/x-3352227)
[16:27:42] *** Joins: _mal (~mal@user/mal/x-8025409)
[16:27:42] *** Joins: Wooble (~Wooble@107.170.27.240)
[16:27:42] *** Joins: Xavierdarkness (~xavierdar@user/xavierdarkness)
[16:27:42] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[16:27:42] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[16:27:42] *** Joins: Retr0id (~Retr0id@user/retr0id)
[16:27:42] *** Joins: someguy1233 (~someguy@user/someguy123)
[16:27:42] *** Joins: ross (sid305269@user/ross)
[16:27:42] *** Joins: ulif (~nick@user/ulif)
[16:27:42] *** Joins: genewitch (~genewitch@triggerwarning.projectftm.com)
[16:27:42] *** Joins: libussa (~libussa@libussa.net)
[16:27:42] *** Joins: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8)
[16:27:42] *** Joins: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78)
[16:27:42] *** Joins: SrPx (sid108780@id-108780.highgate.irccloud.com)
[16:27:42] *** Joins: taeaad (~taeaad@user/taeaad)
[16:27:42] *** Joins: synic (~squish@li74-118.members.linode.com)
[16:27:42] *** Joins: wm (~wmy@2a01:4f8:1c1c:7918::1)
[16:27:42] *** Joins: rodstewart (~dmartins@188.ip-149-56-97.net)
[16:27:42] *** Joins: xikkub (me@user/xikkub)
[16:27:42] *** Joins: redkrieg (~redkrieg@user/redkrieg)
[16:27:42] *** Joins: masterkorp (~masterkor@user/masterkorp)
[16:27:42] *** Joins: mdk (~mdk@python/psf/mdk)
[16:27:42] *** Joins: dartmouthed (~blackunsp@li761-35.members.linode.com)
[16:27:42] *** Joins: Xeago (~Xeago@user/xeago)
[16:27:42] *** Joins: emptynine (tkk@cybertron.redlight.li)
[16:27:42] *** Joins: sco1 (~sco1@charon.whatbox.ca)
[16:27:42] *** Joins: tardisx (~tardisx@2400:8902::f03c:91ff:fe89:d107)
[16:27:42] *** Joins: nvz (~user@nvz.farted.online)
[16:27:42] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[16:27:42] *** Joins: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[16:27:42] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[16:27:42] *** Joins: daniel2 (daniel@user/daniel2)
[16:27:42] *** Joins: nixture (uid240036@id-240036.brockwell.irccloud.com)
[16:27:42] *** Joins: dnns01 (~quassel@2a02:c207:3003:651::1)
[16:27:42] *** Joins: Geronimo (~Geronimo@user/geronimo)
[16:27:42] *** Joins: Catatonic (~Catatonic@ariel.whatbox.ca)
[16:27:42] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[16:27:42] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[16:27:42] *** Joins: bertiger (~bertiger@user/bertiger)
[16:27:42] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[16:27:42] *** Joins: InPhase (~InPhase@openscad/inphase)
[16:27:42] *** Joins: awygle (~quassel@2604:a880:2:d0::5380:3001)
[16:27:42] *** Joins: themill (~stuart@debian/stuart)
[16:27:42] *** Joins: orkim (~orkim@user/orkim)
[16:27:42] *** Joins: remedan (~remedan@balak.me)
[16:27:42] *** Joins: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net)
[16:27:42] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[16:27:42] *** Joins: phantomcircuit (~phantomci@192.241.205.97)
[16:27:42] *** Joins: sale (~sale@ypocit.initech.link)
[16:27:42] *** Joins: adamchainz (~adamj@51.15.34.126)
[16:27:42] *** Joins: tpr (~tpr@user/tpr)
[16:27:42] *** Joins: meejah (~meejah@rutas.meejah.ca)
[16:27:42] *** Joins: reda (~reda@user/reda)
[16:27:42] *** Joins: Daemoen (~Daemoen@2604:a880:2:d0::2164:d001)
[16:27:42] *** Joins: mumixam (~m@user/mumixam)
[16:27:42] *** Joins: SnoopJ (~snoopj@user/snoopj)
[16:27:42] *** Joins: mdw (~root@159.65.86.163)
[16:27:42] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[16:27:42] *** Joins: hogarius (hogarius@id-222644.highgate.irccloud.com)
[16:27:42] *** Joins: debnet (sid330295@python/afpy/debnet)
[16:27:42] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[16:27:42] *** Joins: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[16:27:42] *** Joins: ixjlyons (~kenny@li1177-148.members.linode.com)
[16:27:42] *** Joins: argoneus (~argoneus@argoneus.com)
[16:27:42] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[16:27:42] *** Joins: dunc (sid16@id-16.highgate.irccloud.com)
[16:27:42] *** Joins: jocke-l (jocke-l@a.x0.is)
[16:27:42] *** Joins: rockSTONE (sid315855@id-315855.brockwell.irccloud.com)
[16:27:42] *** Joins: noyb (~noyb@user/noyb)
[16:27:42] *** Joins: coldmountain (sid484352@id-484352.brockwell.irccloud.com)
[16:27:42] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[16:27:42] *** Joins: towel (~towel@user/towel)
[16:27:42] *** Joins: litharge (litharge@libera/bot/litharge)
[16:27:42] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[16:27:42] *** Joins: jtanner (sid194399@id-194399.brockwell.irccloud.com)
[16:27:42] *** iridium.libera.chat sets mode: +o litharge
[16:27:42] *** Joins: han-` (sid293063@id-293063.brockwell.irccloud.com)
[16:27:42] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[16:27:42] *** Joins: grym (~grym@user/grym)
[16:27:42] *** Joins: poxifide (deathspawn@user/poxifide)
[16:27:42] *** Joins: Riviera (Riviera@user/riviera)
[16:27:42] *** Joins: percY- (~percY@138.68.239.19)
[16:27:42] *** Joins: AmyMalik (ellenor@vice-chairwoman.of.freenode.management)
[16:27:42] *** Joins: tumbleweed (~stefanor@ubuntu/member/tumbleweed)
[16:27:42] *** Joins: tudor (~tudor@tomka.hu)
[16:27:42] *** Joins: jpaa (~jpaa@87.118.126.66)
[16:27:42] *** Joins: kstar (~kstar@user/kstar)
[16:27:42] *** Joins: cole (~cole@user/cole)
[16:27:42] *** Joins: mboehn (mathias@hh1.nuxis.org)
[16:27:42] *** Joins: meridion (~meridion@punt.hetgrotebos.org)
[16:27:42] *** Joins: gossie (~gossie@2a10:3781:328:1:e1d:50cc:c868:ca94)
[16:27:42] *** Joins: BlueShark (sid10311@user/blueshark)
[16:27:42] *** Joins: gbear605 (~gbear605@user/gbear605)
[16:27:42] *** Joins: matthewwilkes (sid500242@id-500242.highgate.irccloud.com)
[16:27:42] *** Joins: nocko (sid501219@user/nocko)
[16:27:42] *** Joins: A_Dragon (A_D@doom-tower.awesome-dragon.science)
[16:27:42] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[16:27:42] *** Joins: LostInWeb (~quassel@narvi.bifroest.eu)
[16:27:42] *** Joins: mindlesstux (sid18072@id-18072.tooting.irccloud.com)
[16:27:42] *** Joins: hwrd (sid64402@id-64402.tooting.irccloud.com)
[16:27:42] *** Joins: Darkfoe1 (~chuck@drunk.serverfail.party)
[16:27:42] *** Joins: znf (~ibm86@toaster.linge-ma.ro)
[16:27:42] *** Joins: dTal (quassel@dragonbox/wizzard/dtal)
[16:27:42] *** Joins: auri (~admin@static.46.108.40.188.clients.your-server.de)
[16:27:42] *** Joins: ironfroggy (sid495156@id-495156.tooting.irccloud.com)
[16:27:42] *** Joins: TallonRain (sid214799@user/tallonrain)
[16:27:42] *** Joins: andi_ (~andi@user/andi/x-3467420)
[16:27:42] *** Joins: acnebs (~acnebs@2604:a880:400:d0::1a64:c001)
[16:27:42] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[16:27:42] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[16:27:42] *** Joins: MacGyver (~macgyver@user/macgyver)
[16:27:42] *** Joins: randall (~randall@user/randall)
[16:27:42] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[16:27:49] *** Joins: besnn (~besnn@user/besnn)
[16:27:50] *** Joins: pabed (~Thunderbi@89.37.15.34)
[16:27:50] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[16:27:50] *** Joins: entuland (~entuland@user/entuland)
[16:27:50] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[16:27:50] *** Joins: Quaking_ (~Quaking@2601:245:c500:7fa0:6c62:5c1a:f584:3e6)
[16:27:50] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:27:50] *** Joins: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467)
[16:27:50] *** Joins: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14)
[16:27:50] *** Joins: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d)
[16:27:50] *** Joins: luckydonald (~luckydona@static.154.109.217.95.clients.your-server.de)
[16:27:50] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[16:27:50] *** Joins: Vultyre (~vultyre@user/vultyre)
[16:27:50] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c16b-4385-b975-2303.res6.spectrum.com)
[16:27:50] *** Joins: somlis (~somlis@user/somlis)
[16:27:50] *** Joins: dbristow (~dbristow@user/dbristow)
[16:27:50] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[16:27:50] *** Joins: ringo_ (~ringo@157.230.117.128)
[16:27:50] *** Joins: tone0 (~tone0@071-011-252-111.res.spectrum.com)
[16:27:50] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-d591-18df-e586-cd75.fixed6.kpn.net)
[16:27:50] *** Joins: shrysr (~shrysr@user/shrysr)
[16:27:50] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[16:27:50] *** Joins: rgp (~rgp@user/rgp)
[16:27:50] *** Joins: braxas (sid508886@id-508886.tooting.irccloud.com)
[16:27:50] *** Joins: tofran (~tofran@37.189.158.134)
[16:27:50] *** Joins: seds (sid492514@user/seds)
[16:27:50] *** Joins: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com)
[16:27:50] *** Joins: circuitbone (sid355934@user/circuitbone)
[16:27:50] *** Joins: zware (~zach@python/psf/zware)
[16:27:50] *** Joins: enteral (~enteral@discovery.whatbox.ca)
[16:27:50] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[16:27:50] *** Joins: m1dnight (~christoph@188.ip-51-91-158.eu)
[16:27:50] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[16:27:50] *** Joins: xa0s (~xa0s@mab.sdf.org)
[16:27:50] *** Joins: truth (~truth@user/truth)
[16:27:50] *** Joins: strudl (~strudl@user/strudl)
[16:27:50] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2851:91a4:af4c:7957)
[16:27:50] *** Joins: jiffe (~jiffe@mail.nsab.us)
[16:27:50] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[16:27:50] *** Joins: dld (~davidlowr@2601:197:600:1210:90d2:efa1:6a80:6389)
[16:27:50] *** Joins: Lartza (lartza@user/lartza)
[16:27:50] *** Joins: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au)
[16:27:50] *** Joins: flyback (~flyback@2601:540:8201:1e60:bcb9:12e:e899:e26)
[16:27:50] *** Joins: tuxifreund (tuxifreund@ubuntuusers/wikiteam/tuxifreund)
[16:27:50] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[16:27:50] *** Joins: Luyin (~daisy@user/luyin)
[16:27:50] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[16:27:50] *** Joins: ntdll (ntdll@user/ntdll)
[16:27:50] *** Joins: Chex (~Chex@user/chex)
[16:27:50] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[16:27:50] *** Joins: baloona (~baloona@mail.baloona.de)
[16:27:50] *** Joins: el_kevino (~mote@2604:a880:400:d1::901:5001)
[16:27:50] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
[16:27:50] *** Joins: susam (~susam@user/susam)
[16:27:50] *** Joins: tnez (~el@user/tnez)
[16:27:50] *** Joins: DragoonAethis (~quassel@2a01:4f8:c2c:3359::1)
[16:27:50] *** Joins: dale (dale@user/dale)
[16:27:50] *** Joins: Madda (~Madda@208.249.9.51.dyn.plus.net)
[16:27:50] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[16:27:50] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[16:27:50] *** Joins: pavelow (~pavelow@opticalchimp.com)
[16:27:50] *** Joins: zeus (~user@user/kamyl)
[16:27:50] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[16:27:50] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[16:27:50] *** Joins: kafka (~kafka@user/kafka)
[16:27:50] *** Quits: tofran (~tofran@37.189.158.134) (Max SendQ exceeded)
[16:27:50] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[16:27:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Max SendQ exceeded)
[16:27:59] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[16:27:59] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[16:27:59] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[16:27:59] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[16:27:59] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[16:27:59] *** Joins: j00n (~mario@user/j00n)
[16:27:59] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[16:27:59] *** Joins: energizer (~energizer@user/energizer)
[16:27:59] *** Joins: no_maam (~chat@gauss.datenzone.de)
[16:27:59] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[16:27:59] *** Joins: ThomasJ (~ThomasJ@user/thomasj)
[16:27:59] *** Joins: Alexer (~alexer@alexer.net)
[16:27:59] *** Joins: d3sync (~d3sync@194.219.251.225)
[16:27:59] *** Joins: deepy (deepy@user/deepy)
[16:27:59] *** Joins: Koffa (jkohvakk@user/koffa)
[16:27:59] *** Joins: Neoon (~Neoon@2607:5300:60:23a5::1111)
[16:27:59] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[16:27:59] *** Joins: TML (~tml@user/tml)
[16:27:59] *** Joins: matiss (~matiss@almalinux/web/matiss)
[16:27:59] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[16:27:59] *** Joins: infernix (~nix@2a02:22a0:bbb1:d500::2)
[16:27:59] *** Joins: mjsir911 (~bnc@user/mjsir911)
[16:27:59] *** Joins: jor (~jor@jor.link)
[16:27:59] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[16:27:59] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[16:27:59] *** Joins: _0ne (~one@user/0ne/x-2101768)
[16:27:59] *** Joins: `rdvn (~rdvn@user/rdvn)
[16:27:59] *** Joins: deniska (~denis@user/deniska)
[16:27:59] *** Joins: Wegge (~wegge@user/wegge)
[16:27:59] *** Joins: BlackBishop (dexter@user/blackbishop)
[16:27:59] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[16:27:59] *** Joins: Titore (Titore@user/titore)
[16:27:59] *** Joins: ripdog (~quassel@user/ripdog)
[16:27:59] *** Joins: yemel (~yemel@user/yemel)
[16:27:59] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[16:27:59] *** Joins: vodkra (~vodkra@user/vodkra)
[16:27:59] *** Joins: arza (arza@arza.us)
[16:27:59] *** Joins: Henry151 (~bishop@user/henry151)
[16:27:59] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[16:27:59] *** Joins: OverCoder (~OverCoder@user/overcoder)
[16:27:59] *** Joins: winny (~winny@user/winny)
[16:27:59] *** Joins: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b)
[16:27:59] *** Joins: greyltc (~greyltc@user/greyltc)
[16:27:59] *** Joins: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[16:27:59] *** Joins: n-st (~n-st@user/n-st)
[16:27:59] *** Joins: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1)
[16:27:59] *** Joins: olasd (~olasd@softwareheritage/olasd)
[16:27:59] *** Joins: Ennea (~Ennea@user/ennea)
[16:27:59] *** Joins: Soni (~quassel@autistic.space)
[16:27:59] *** Joins: lericson (~toxik@user/lericson)
[16:28:00] *** Quits: launchd (examknow@bitbot/launchd) (Excess Flood)
[16:28:02] *** Quits: n-st (~n-st@user/n-st) (Max SendQ exceeded)
[16:28:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[16:28:13] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[16:28:19] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[16:28:19] *** Joins: n-st- (~n-st@user/n-st)
[16:28:23] *** Joins: tofran (~tofran@37.189.158.134)
[16:28:32] *** Joins: dlam (~dlam@dlam.me)
[16:28:53] *** Joins: launchd (examknow@bitbot/launchd)
[16:29:05] *** n-st- is now known as n-st
[16:29:12] *** Joins: daddy (~ryan@hashbang/bdfl)
[16:29:16] *** Joins: greenbagels (~gb@user/greenbagels)
[16:29:22] *** Joins: reset (~reset@user/reset)
[16:29:38] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 252 seconds)
[16:29:51] *** Joins: marienz (~marienz@libera/staff/marienz)
[16:30:44] *** Quits: jwon (~jwon@user/jwon) (Ping timeout: 252 seconds)
[16:30:44] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Ping timeout: 252 seconds)
[16:30:44] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 252 seconds)
[16:31:02] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (Ping timeout: 256 seconds)
[16:31:08] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Ping timeout: 272 seconds)
[16:31:08] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (Ping timeout: 272 seconds)
[16:31:12] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Ping timeout: 272 seconds)
[16:31:12] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Ping timeout: 272 seconds)
[16:31:14] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[16:31:15] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Ping timeout: 268 seconds)
[16:31:15] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Ping timeout: 268 seconds)
[16:31:34] *** Joins: ice99 (~ice9@user/ice9)
[16:34:43] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[16:35:40] *** Joins: fredrikhl (~fhl@myrsnipa.uio.no)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:20] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[16:36:54] *** Joins: zeden (~zeden@user/zeden)
[16:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:13] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:38:07] <ses1984>   /j #squid
[16:38:17] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[16:38:31] <ses1984> oops
[16:39:44] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[16:40:54] *** Quits: y1n (~y1n@84-115-65-66.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[16:41:18] *** Joins: shad (~shad@user/shad)
[16:41:22] *** Joins: newdimension7 (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[16:42:03] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[16:42:34] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[16:42:34] *** newdimension7 is now known as newdimension
[16:43:30] *** Joins: kstolen (~kStolen@2a00:fa40:2aaa:1::539:82de)
[16:45:32] *** Joins: allegary (~allegary@apache/committer/gjm)
[16:46:10] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[16:46:16] *** Joins: qk1z (~qk1z@193-82-226-146.tpgi.com.au)
[16:46:40] *** Quits: qk1z (~qk1z@193-82-226-146.tpgi.com.au) (Client Quit)
[16:48:17] *** Quits: roadt (~roadt@36.5.94.204) (Ping timeout: 268 seconds)
[16:49:02] *** Joins: bam32 (~bambams@user/bambams)
[16:50:18] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[16:50:18] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:51:36] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[16:51:53] *** Quits: bam32_ (~bambams@user/bambams) (Ping timeout: 248 seconds)
[16:53:46] *** Joins: y1n (~y1n@84-115-65-66.wifi.dynamic.surfer.at)
[16:55:20] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[16:56:10] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Remote host closed the connection)
[16:56:43] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[16:57:59] *** Joins: besnn (~besnn@user/besnn)
[16:58:42] *** Joins: jwon (~jwon@user/jwon)
[16:59:05] *** Quits: m0nkey_ (~quassel@user/m0nkey/x-3352227) (Quit: Quit)
[16:59:21] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Ping timeout: 276 seconds)
[17:00:34] *** Quits: c10l2 (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[17:00:50] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[17:01:04] *** Joins: c10l2 (~c10l@89.34.167.207)
[17:01:09] *** Joins: besnn (~besnn@user/besnn)
[17:04:56] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 268 seconds)
[17:05:09] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:07:17] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:09:51] *** Joins: push-f (~martin@push-f.com)
[17:11:45] *** Joins: frost (~frost@59.71.240.119)
[17:14:30] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:15:03] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[17:16:41] *** Joins: matkor (~matkor@93.179.197.152)
[17:18:13] *** Joins: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net)
[17:19:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:20:27] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[17:21:18] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:22:37] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 245 seconds)
[17:25:37] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[17:28:18] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Ping timeout: 240 seconds)
[17:29:29] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[17:30:06] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:32:41] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[17:33:34] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[17:34:07] *** Joins: psydroid (~psydroid@user/psydroid)
[17:35:30] <mav`rik> Hi all. I've started to use anyio, and I'm getting a traceback on my integration tests - https://bpa.st/ARJQ - the code is running under uvicorn and trio isn't installed (because the eventloop _should_ be asyncio), so I'm wondering how/why it's discovered trip as the asynclib? I've set up the anyio_backend in conftest.py, so all help appreciated here.
[17:36:18] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[17:37:53] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:38:07] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[17:38:30] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[17:39:02] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[17:39:48] *** Quits: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com) (Read error: Connection reset by peer)
[17:40:39] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[17:40:43] *** Quits: y1n (~y1n@84-115-65-66.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[17:40:44] *** Quits: pabed (~Thunderbi@89.37.15.34) (Ping timeout: 256 seconds)
[17:41:43] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[17:42:43] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:43:02] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 245 seconds)
[17:44:09] *** Quits: rndm (~arossi@2600:1700:5f81:1f50:698c:ce69:6d27:7b65) (Ping timeout: 258 seconds)
[17:46:34] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[17:46:47] *** Joins: netsan (~netsan@user/netsan)
[17:50:47] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[17:52:27] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[17:52:31] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[17:52:41] *** Joins: y1n (~y1n@046125249012.public.t-mobile.at)
[17:53:58] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[17:54:17] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 248 seconds)
[17:55:27] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[17:55:40] *** Joins: CyberShadow (vladimir@89.28.117.31)
[17:55:44] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[17:57:32] *** Quits: FKAShinobi (~shinobi@2601:18c:d07f:f2e9:b36e:b615:5c5f:a300) (Remote host closed the connection)
[17:58:27] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[17:58:33] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 248 seconds)
[17:59:26] *** Quits: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467) (Ping timeout: 256 seconds)
[17:59:30] *** Quits: GNUtoo (~GNUtoo@cyberdimension.org) (Quit: leaving)
[17:59:45] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:00:59] *** Joins: bninja (~bloodninj@user/bloodninja)
[18:02:04] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[18:02:35] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[18:04:05] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[18:04:25] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 248 seconds)
[18:05:06] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[18:05:23] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d)
[18:06:00] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[18:06:00] *** Quits: bninja (~bloodninj@user/bloodninja) (Ping timeout: 258 seconds)
[18:06:05] *** lukedashjr is now known as luke-jr
[18:06:37] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[18:06:41] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[18:06:48] *** Joins: audiocat (~audio@2603-8081-1800-00ad-f351-4ddf-8729-f716.res6.spectrum.com)
[18:06:54] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[18:07:29] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:07:35] *** Joins: jmft2 (~JMFT@82.3.54.26)
[18:07:36] *** Joins: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr)
[18:07:37] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[18:09:29] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:10:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:10:55] *** Joins: Pandadub (~Barones@2804:7f3:8987:3add:6606:9a7a:2302:96c3)
[18:13:27] *** Quits: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Ping timeout: 276 seconds)
[18:14:38] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[18:15:42] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[18:16:02] *** Joins: MercilessDeth (~brad@136.49.61.2)
[18:16:19] <mav`rik> Answering my own question, it looks like conftest.py isn't loaded if it's in a directory above that whose tests are executed (for example, `pytest tests/integration` will not load `tests/conftest.py`). Maybe I should have expected this.
[18:19:06] *** Joins: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416)
[18:21:29] *** Quits: y1n (~y1n@046125249012.public.t-mobile.at) (Ping timeout: 248 seconds)
[18:23:11] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:25:56] *** Joins: yusif (~Akera4@149.255.222.27)
[18:26:03] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Quit: Leaving)
[18:26:35] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:26:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[18:27:39] *** Joins: Falc (~Falc@193.191.206.243)
[18:27:54] *** Quits: Cyp_ (~cyp@192038129116.mbb.telenor.dk) (Ping timeout: 240 seconds)
[18:28:19] *** Quits: yusif (~Akera4@149.255.222.27) (Quit: Client closed)
[18:28:44] *** Joins: akk (~akk@75.161.157.26)
[18:28:49] *** Joins: fikran (~fikran@user/fikran)
[18:28:52] <nedbat> mav`rik: that surprises me, but maybe i don't have a repo structured like that
[18:29:41] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[18:30:59] *** Quits: ihristov (~ihristov@217.145.94.71) (Quit: Connection closed)
[18:31:28] <phy1729> inspect.getmodule(type((x for x in ())))     appears to claim that the generator class is a builtin; however both generator and builtins.generator aren't defined. How do I get ahold of the generator class?
[18:32:00] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:32:34] <jinsun> https://docs.python.org/3/library/types.html#types.GeneratorType probably
[18:32:53] *** Joins: p-i- (~Ohmu@171.6.224.140)
[18:33:08] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[18:33:11] <mav`rik> nedbat: Indeed, I felt similarly until I added the same top-level asyncio fixture to the subdirectory's conftest.py - I'd spent a good few hours on this too.
[18:33:20] <phy1729> weird, but thanks jinsun!
[18:33:26] *** Joins: y1n (~y1n@84-115-65-175.wifi.dynamic.surfer.at)
[18:33:43] <Yhg1s> phy1729: they're builtin types, but not types in the builtin module.
[18:34:11] *** Joins: Pickchea (~private@user/pickchea)
[18:34:49] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d) (Quit: Leaving)
[18:35:32] <nedbat> phy1729: what will you do with the generator class?
[18:35:50] <phy1729> nedbat: be a terrible person and use forbiddenfruit on it :)
[18:36:30] <nedbat> phy1729: and what would you monkeypatch onto generators?
[18:36:34] *** Joins: daoudr (~daoudr@178.197.212.193)
[18:37:53] *** Quits: Pandadub (~Barones@2804:7f3:8987:3add:6606:9a7a:2302:96c3) (Ping timeout: 252 seconds)
[18:40:10] *** Joins: junktext (~junktext@109.201.152.161)
[18:40:40] <phy1729> nedbat: well I was going to spy on __next__ but it seems that isn't supported
[18:40:47] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[18:41:56] <Yhg1s> 'spy' in what sense? Why can't you wrap the generator in your own generator instead?
[18:42:21] <phy1729> Well the idea was make a pytest plugin that fails the test if any generator raises StopIteration twice.
[18:42:45] *** blackop_ is now known as blackop
[18:44:14] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 268 seconds)
[18:46:32] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[18:46:48] *** snalty_ is now known as snalty
[18:46:49] <mav`rik> phy1729: Won't all of them do that anyway? https://bpa.st/2JJA
[18:47:37] <phy1729> mav`rik: not if you accidentally iterate over the same generator twice and then get behavior that's hard to explain
[18:48:10] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[18:48:28] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[18:49:07] *** Joins: magla (~gelignite@55d43c1b.access.ecotel.net)
[18:49:19] <rendar> after hours of testing i still can print to the same line from coroutines :( why a so simple thing is so difficult to do?!
[18:49:30] <rendar> can't*
[18:49:46] <Yhg1s> phy1729: it's going to be basically impossible to intercept that, not in the least because there's plenty of legitimate code that relies on that behaviour.
[18:50:23] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[18:51:04] <phy1729> Yhg1s: really? Have any examples handy? I was thinking of a decorator to opt-out as well (plus no one needs to install the plugin)
[18:51:21] *** Quits: mcope (~matt@user/mcope) (Ping timeout: 248 seconds)
[18:51:25] *** Joins: mcope_ (~matt@user/mcope)
[18:52:02] <rendar> any help?
[18:52:02] <Yhg1s> phy1729: nope, no examples I can directly point you to, but I've written code that relies on it many, many times. One pattern is using a for loop to look for something, breaking out of the loop, and the coninuing the loop later.
[18:52:22] <Yhg1s> rendar: you know how this works. *Show us code and output*.
[18:52:25] *** Quits: twobitsp1ite (~twobitspr@195.181.171.244) (Ping timeout: 248 seconds)
[18:52:29] <rendar> ok
[18:52:58] <rendar> Yhg1s https://bpa.st/WKEQ
[18:53:03] *** Joins: xnbq (~xnbq@user/xnbq)
[18:53:22] <rendar> i simply want that a coroutine prints "Waiting ..." while its working, then prints "Done!" in the *same* line of the initial Waiting... string
[18:53:25] <Yhg1s> rendar: okay, and what's the output, and what did you expect the output to be?
[18:53:25] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Quit: Leaving)
[18:53:27] <rendar> even if new lines has been printed
[18:53:28] *** Joins: twobitsprite (~twobitspr@195.181.171.244)
[18:53:37] <Yhg1s> rendar: print() adds newlines.
[18:53:40] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[18:53:41] <Yhg1s> (you can tell it not to, though.)
[18:53:54] <rendar> Yhg1s: print(.., end='') is not enough here
[18:53:54] *** Joins: vodkra (~vodkra@user/vodkra)
[18:53:55] <Yhg1s> (this is nothing what so ever to do with coroutines)
[18:54:06] <rendar> it's useless here
[18:54:11] <Yhg1s> rendar: why do you think this?
[18:54:16] <rendar> i have tested it!
[18:54:20] <mav`rik> rendar: for that (printing to a given location on screen even if other output has occurred) you need more control over your terminal.
[18:54:22] <Yhg1s> okay, so show that code. And the output.
[18:54:46] <rendar> mav`rik: really? i didn't know that! serioulsy, i know that, but still i can't figure out how to do a so simple task
[18:54:52] <rendar> Yhg1s :ok
[18:54:59] <mav`rik> rendar: it's not a simple task.
[18:57:01] <rendar> Yhg1s: https://bpa.st/OWNQ
[18:57:01] *** Quits: dvx (~dvx@185.63.97.64) (Read error: Connection reset by peer)
[18:57:43] *** Joins: Crassus (~Crassus@user/crassus)
[18:58:14] <bjs> rendar: you need something like curses or urwid to be able to write to arbitrary places on the screen
[18:58:26] <rendar> Yhg1s: in addition to that, end='' makes stdout not flushing! so that coroutine doesn't print ANYTHING before sleeping ends and prints \n
[18:58:32] <mav`rik> bjs: thanks, I was trying to remember urwid's name :(
[18:58:33] *** Joins: s1b1 (~s1b1@user/s1b1)
[18:58:40] <rendar> bjs: i have tried curses without any success
[18:58:40] <bjs> once you do that, you can just have each coro write to whatever part of the screen you want
[18:58:43] <Yhg1s> rendar: as mav`rik said, the problem is that it *is* doing what you ask for, but 'the current line' isn't what you think it is. You can only write where the cursor is. Controlling the cursor, moving it to where it was before, is a lot of work. Look at urwid or curses if you really want to do this, but realise that it is difficult and fragile.
[18:58:48] <bjs> rendar: you can sys.stdout.flush()
[18:58:57] <Yhg1s> rendar: I wouldn't bother.
[18:58:59] <rendar> bjs: i know, but it's irrelevant
[18:59:10] <bjs> rendar: well it's not irrelevant to the problem of not flushing :)
[18:59:48] <rendar> bjs: with flushing i get the same output, only some text is printed before sleeping
[19:00:16] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 268 seconds)
[19:00:20] *** Quits: xnbq (~xnbq@user/xnbq) (Quit: The Lounge - https://thelounge.chat)
[19:01:08] *** Joins: zebrag (~chris@user/zebrag)
[19:01:14] <bjs> rendar: well the text you print() will be seen once you flush()
[19:01:32] <bjs> rendar: but you still need something like curses to print to arbitrary places (or better, something like urwid that does it correctly for you)
[19:01:44] <rendar> yeah i guess urwid is the only solution here
[19:01:58] <grym> blessings is simpler
[19:02:05] <grym> or .. blessed? whichever the cross platform one is
[19:02:26] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:02:32] <rendar> grym: blessings can do that? i don't think so
[19:02:41] <mav`rik> grym: that's the one that made a reasonable attempt at working in a Windows/DOS console a while ago along with Unix style tty?
[19:02:57] <grym> mav`rik: yes
[19:05:28] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[19:05:50] *** Joins: sadg (~odd@cpc113812-lea23-2-0-cust1375.6-3.cable.virginm.net)
[19:06:22] *** Joins: rndm (~rndm@143.59.164.79)
[19:07:53] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 248 seconds)
[19:07:56] *** Quits: matrixskp (~matrixskp@121-75-182-31.dyn.vf.net.nz) (Quit: My comp has gone to sleep to save energy. ZZZzzz…)
[19:09:21] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 276 seconds)
[19:09:42] *** Joins: derelict (~derelict@user/derelict)
[19:11:20] *** Quits: Falc (~Falc@193.191.206.243) (Quit: Leaving)
[19:11:23] *** mcope_ is now known as mcope
[19:15:21] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[19:16:09] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 258 seconds)
[19:16:43] *** Joins: besnn (~besnn@user/besnn)
[19:18:42] *** Quits: p-i- (~Ohmu@171.6.224.140) (Read error: Connection reset by peer)
[19:19:05] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[19:19:20] *** Joins: p-i- (~Ohmu@2403:6200:8870:5670:4433:9a17:7eb:6d2e)
[19:19:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:20:26] *** Joins: cul8r (~cul8r@198.133.178.20)
[19:21:52] *** Joins: Matheo_bis (~yaaic@user/matheo-bis/x-4309430)
[19:21:59] *** Joins: higeki (~higeki@2001:470:69fc:105::d51d)
[19:22:28] *** Quits: y1n (~y1n@84-115-65-175.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[19:22:28] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-193e-00d5-a539-86a3.res6.spectrum.com)
[19:23:09] *** JoelJoel is now known as JOel
[19:23:12] *** JOel is now known as Joel
[19:25:11] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[19:25:25] *** Quits: Error2505 (~Guest71@ip-89-102-14-38.net.upcbroadband.cz) (Quit: Client closed)
[19:25:46] *** Joins: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi)
[19:26:38] *** Quits: mci64 (~mci64@185.242.190.95) (Ping timeout: 272 seconds)
[19:28:02] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:28:56] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[19:30:28] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[19:30:35] *** Quits: netsan (~netsan@user/netsan) (Quit: Leaving)
[19:30:56] *** Quits: higeki (~higeki@2001:470:69fc:105::d51d) (Quit: Reconnecting)
[19:31:12] *** Joins: higeki (~higeki@2001:470:69fc:105::d51d)
[19:31:25] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:32:13] *** Joins: molt (~molt@62.4.57.182)
[19:32:27] *** Quits: kurtthem1ker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Remote host closed the connection)
[19:35:30] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 244 seconds)
[19:35:33] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[19:36:28] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 258 seconds)
[19:37:17] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[19:40:24] *** Joins: LiftLeft (~LiftLeft@154.21.114.33)
[19:41:00] *** Quits: Matheo_bis (~yaaic@user/matheo-bis/x-4309430) (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
[19:44:15] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 268 seconds)
[19:44:58] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[19:44:58] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:45:35] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Remote host closed the connection)
[19:45:47] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[19:46:11] *** Joins: Matheo_bis (~yaaic@user/matheo-bis/x-4309430)
[19:48:08] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:48:59] *** Parts: higeki (~higeki@2001:470:69fc:105::d51d) ()
[19:50:21] *** Quits: MikZyth (~MikZyth@188.65.242.223) (Quit: WeeChat 3.1)
[19:53:39] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[19:54:18] *** foo_ is now known as foo
[19:54:51] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[19:59:08] *** Joins: DocMors (~DocMors@web.crypticity.net)
[19:59:31] *** Joins: pgib (~textual@173.38.117.66)
[19:59:40] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:00:42] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[20:02:18] *** Quits: Matheo_bis (~yaaic@user/matheo-bis/x-4309430) (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
[20:03:46] *** Quits: nate44 (~Nathan22@S0106bcd16583c035.gv.shawcable.net) (Ping timeout: 240 seconds)
[20:04:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[20:05:26] *** Joins: qlixed (~qlixed@2800:810:548:cc6::100c)
[20:06:57] *** hexology- is now known as hexology
[20:07:02] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:09:05] *** Joins: cloudcell (sid48145@user/cloudcell)
[20:10:11] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[20:10:32] *** Joins: chris_99 (uid26561@id-26561.tooting.irccloud.com)
[20:12:05] <chris_99> Hi, i'm just wondering, there's no reason to really have both tp_dealloc and tp_finalize functions is there? like i could just put everything in a tp_dealloc function
[20:12:56] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:13:27] *** Joins: rsrx (~rsrx@103.225.150.81)
[20:15:25] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[20:17:20] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[20:21:18] *** Joins: mci64 (~mci64@185.242.190.95)
[20:22:04] <mav`rik> chris_99: tp_finalize is more specifically for dealing with things like cycle-breaking for isolated self-referential stuff if your object permits that, or generator finalization, whereas tp_dealloc might not have safe access to the objects in the cycle, tp_finalize does, and I think it's guaranteed to only be called once so it's a bit harder to screw up :)
[20:23:37] <chris_99> oh interesting thanks, so i could maybe only use tp_finalize
[20:23:54] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[20:25:32] *** Joins: minip (minip@user/minip)
[20:25:35] <mav`rik> chris_99: I guess it depends. How is your implementation allocating memory? Are _other_ things taking care of that aspect?
[20:27:06] *** Joins: Liblx (~Alex@2a02:810c:280:59c:7471:c11:7e53:10ff)
[20:27:47] *** Quits: Liblx (~Alex@2a02:810c:280:59c:7471:c11:7e53:10ff) (Client Quit)
[20:28:13] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 258 seconds)
[20:28:17] *** Quits: matkor (~matkor@93.179.197.152) (Quit: Konversation terminated!)
[20:29:25] <chris_99> i think i need to do more reading, i was thinking tp_finalize was called just before tp_dealloc,  but it sounds like from what you say there's some differences between what goes in each of those
[20:30:54] <mav`rik> chris_99: the docs (and associated PEP) are pretty good here - https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_finalize and https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dealloc
[20:31:01] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:31:45] <chris_99> cheers
[20:32:34] *** Joins: jrun (~jrun@bras-base-mtrlpq4706w-grc-12-174-88-164-150.dsl.bell.ca)
[20:32:40] *** Parts: jrun (~jrun@bras-base-mtrlpq4706w-grc-12-174-88-164-150.dsl.bell.ca) ()
[20:32:52] *** Joins: pmn (~jrun@bras-base-mtrlpq4706w-grc-12-174-88-164-150.dsl.bell.ca)
[20:33:25] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[20:33:43] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[20:34:00] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 268 seconds)
[20:34:40] <pmn> is it possible to catch exception on this? `Class foo(bar, baz)` as opposed to `Class foo()`: __init__(self): try import bar, baz except ImportError: print("missing bar or baz")`
[20:35:14] *** Quits: qunzhong_luxian (~qunzhong_@user/qunzhong-luxian/x-4995416) (Ping timeout: 268 seconds)
[20:35:16] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[20:35:31] *** Quits: asdfasdf (~Barones@2804:48dc:8500:0:cce1:fa73:7a9d:9857) (Remote host closed the connection)
[20:35:45] *** Joins: asdfasdf (~Barones@2804:48dc:8500:0:dbf:1f3a:3be6:2a1e)
[20:36:28] <mav`rik> pmn: do you have a more complete example of what you're trying to achieve you could share on the paste site in the topic?
[20:36:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[20:36:35] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[20:36:40] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:37:49] *** Quits: shan (shan@user/shan) (Changing host)
[20:37:49] *** Joins: shan (shan@cyblog/maintainer/shan)
[20:38:08] *** Joins: fikran (~fikran@user/fikran)
[20:38:18] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:38:48] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:39:32] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 268 seconds)
[20:40:52] *** Joins: roryrjb (~roryrjb@212.102.49.189)
[20:42:32] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[20:42:39] *** Joins: nrg (~NRG@user/nrg)
[20:42:41] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1001)
[20:42:47] *** Quits: molt (~molt@62.4.57.182) (Read error: Connection reset by peer)
[20:43:26] *** Joins: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net)
[20:43:31] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:43:39] <sybariten> if i have a dictionary, simple key:value pairs, and i want to iterate over it and build up a new one, how do i do that? The idea is to use a helper function i have made. It returns true or false for each key value i feed into it, depending on a lookup it does in another thing
[20:43:41] *** Joins: molt (~molt@79.140.150.21)
[20:44:21] *** Joins: irreitug (uid23254@id-23254.tooting.irccloud.com)
[20:44:28] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:45:22] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[20:46:19] <pmn> mav`rik: https://github.com/257/mkosi/blob/gentoo-next-tmp/mkosi/gentoo.py
[20:46:28] <pmn> mav`rik: Class Gentoo
[20:47:47] <pmn> effectivly getting rid of portage.* imports and inherenting them via class declaration/definition
[20:48:13] *** Joins: georgios (~georgios@user/georgios)
[20:48:22] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:48:32] <pmn> on platform that don't have portage installed this must print some pointer for user to install it and so on.
[20:49:06] *** Joins: upsala (~zcb@185.213.155.160)
[20:49:44] <zware> pmn: I'd probably put your portage imports at the top level of the `gentoo` module and only import the `gentoo` module on the platform(s) that need it
[20:50:24] <pmn> zware: right, it's done here: checkRestriction
[20:50:40] <pmn> oops! here: https://github.com/257/mkosi/blob/e53fc125c9036edc51f45f139f5a71665c6a3bc3/mkosi/__init__.py#L2129
[20:50:50] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[20:50:55] <pmn> we land there only if gentoo is requested
[20:51:42] <sybariten> oh and very basal question: if i know that i have a dictionary (well, or other objects too), what is the typical python way to inspect that object? type(theDictionary) ?
[20:52:12] *** Joins: besnn (~besnn@user/besnn)
[20:52:20] <sybariten> Actually the optimal thing would be to have an output telling me how many items or "rows" there are in the dicitonary but i guess that isn't exactly built-in
[20:52:56] <pmn> zware: well, not exactly. we import gentoo there...
[20:53:08] <zware> pmn: Then I'd move your portage imports to global scope (like all the others) and handle that ImportError the same way you do the ImportError for `from .gentoo import Gentoo`
[20:53:31] <zware> pmn: But I feel like I'm not quite getting what you're asking :)
[20:53:35] <pmn> what i want is really avoiding silly things like this: https://github.com/257/mkosi/blob/e53fc125c9036edc51f45f139f5a71665c6a3bc3/mkosi/gentoo.py#L58
[20:54:20] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 268 seconds)
[20:54:40] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 272 seconds)
[20:54:43] <nedbat> pmn: I would put this at the top of the file:  try: import portage.const;; except ImportError: portage = None
[20:54:45] <pmn> maintaining that list is silly, i rather inheret does attributes (and others even if i'm not using them) and be done with it
[20:54:56] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[20:55:03] <nedbat> pmn: then you can test `portage` in the code and die if it is None, and otherwise go ahead and use it.
[20:55:04] <zware> pmn: At top-level in that module, `from portage import const` and use e.g. `const.CUSTOM_PROFILE_PATH` where you need it
[20:58:09] <zware> pmn: Or if you want to keep the possible ImportError at class instanciation time, just do `from portage import const;self.const = const` where you have the import now, and use `self.const.CUSTOM_PROFILE_PATH` instead of `self.CUSTOM_PROFILE_PATH`
[20:58:29] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[20:59:06] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:59:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:16] *** Quits: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[20:59:16] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[20:59:35] <zware> pmn: Or define `__getattr__` to check `const` for an attribute, but that seems like overkill :)
[21:00:08] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:01:52] *** Joins: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr)
[21:02:18] *** Joins: zebrag (~chris@user/zebrag)
[21:03:06] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 258 seconds)
[21:04:08] *** Joins: dimbag (~dimbag@pppoe246h31.ppp.kmv.ru)
[21:04:26] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[21:05:11] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[21:05:32] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[21:05:57] *** Joins: Lando-SpaceIzzle (~Lando@user/lando-spacepimp)
[21:06:09] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Quit: So long king bowser!)
[21:06:19] *** Lando-SpaceIzzle is now known as Lando-SpacePimp
[21:06:28] *** Joins: CyberReloaded (vladimir@89.28.117.31)
[21:06:41] *** Quits: CyberShadow (vladimir@89.28.117.31) (Ping timeout: 268 seconds)
[21:06:41] *** CyberReloaded is now known as CyberShadow
[21:06:49] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 248 seconds)
[21:07:42] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[21:08:07] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[21:08:43] *** Joins: rsx (~dummy@ppp-188-174-147-136.dynamic.mnet-online.de)
[21:08:58] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[21:09:23] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:09:53] *** Joins: martums1 (~martums@user/martums)
[21:10:23] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[21:12:31] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:13:21] <nedbat> pmn: are these suggestions helping?
[21:13:32] *** Quits: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com) (Quit: Bye)
[21:14:05] *** Quits: martums (martums@user/martums) (Ping timeout: 268 seconds)
[21:14:05] *** martums1 is now known as martums
[21:14:07] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:14:33] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:15:10] *** Joins: newdimension (~newdimnes@ec2-3-129-202-216.us-east-2.compute.amazonaws.com)
[21:15:34] *** Joins: georgios (~georgios@user/georgios)
[21:15:53] *** Quits: magla (~gelignite@55d43c1b.access.ecotel.net) (Quit: Stay safe!)
[21:16:31] *** Quits: p-i- (~Ohmu@2403:6200:8870:5670:4433:9a17:7eb:6d2e) (Remote host closed the connection)
[21:17:18] *** Joins: Pickchea (~private@user/pickchea)
[21:18:23] *** Joins: paravida (~myChateau@user/paravida)
[21:18:25] *** Quits: rsx (~dummy@ppp-188-174-147-136.dynamic.mnet-online.de) (Quit: rsx)
[21:18:45] *** Joins: p-i- (~Ohmu@2403:6200:8870:5670:615b:125a:9fc7:7e66)
[21:19:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:20:27] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:20:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:21:35] *** dcaro is now known as dcaro_away
[21:22:42] *** Joins: Betal (~Betal@user/betal)
[21:23:07] *** Quits: p-i- (~Ohmu@2403:6200:8870:5670:615b:125a:9fc7:7e66) (Remote host closed the connection)
[21:23:29] *** Joins: p-i- (~Ohmu@2403:6200:8870:5670:615b:125a:9fc7:7e66)
[21:23:38] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:25:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:25:47] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 268 seconds)
[21:30:44] *** Joins: Akuli (~Akuli@82-203-165-178.bb.dnainternet.fi)
[21:30:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[21:31:54] *** Joins: y04nn (~y04nn@91.193.4.154)
[21:32:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:33:42] *** Quits: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com) (Quit: leaving)
[21:35:50] *** Quits: Karel (~Karel@ptr-9091p55a55gu0o2x7ob.18120a2.ip6.access.telenet.be) (Ping timeout: 272 seconds)
[21:38:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:38:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:39:33] *** Joins: crised (~crised@200.112.228.39)
[21:39:55] <crised> What is the name of this odd syntax (0, 1)[True]?
[21:40:04] *** Joins: fortuno51_ (~fortuno51@37.120.156.254)
[21:40:32] <crised> I understand the ouput, but I have never seen it before. Any comments?
[21:40:45] *** Joins: ckdcreation (~ckdCreati@147.55.133.134)
[21:40:57] *** Quits: xcombelle (~Xavier_Co@abayonne-651-1-41-161.w92-156.abo.wanadoo.fr) (Ping timeout: 248 seconds)
[21:41:30] <Wooble> it's just normal indexing of a tuple.
[21:41:35] <zware> crised: That's just indexing a tuple; the same as `t = (0, 1); result = t[True]`.  It's a bit odd because one usually wouldn't use `True` as an index, but True is just 1
[21:41:49] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Ping timeout: 258 seconds)
[21:42:07] <nedbat> crised: that's an old way to do an if-expression.
[21:44:04] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[21:44:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[21:44:27] <zware> nedbat: Hmm, it seems to predate me and I'm missing some context :).  How is it meant to work?  `result = (r_if_false, r_if_true)[condition]`?
[21:44:52] <zware> nedbat: As opposed to `result = r_if_true if condition else r_if_false`?
[21:44:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:45:03] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:45:19] <Wooble> you need a bool() around the condition to really make it equivalent.
[21:45:55] <Wooble> I feel like (0, 1)[some_bool] might be a premature optimizer's way to spell "int(some_bool)".
[21:46:02] <Akuli> some legacy code also uses this (assuming if r_if_true happens to be a truthy value):   condition and r_if_true or r_if_false
[21:46:18] *** Quits: crazysim (sid86009@id-86009.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:46:20] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[21:46:41] *** Joins: crazysim (sid86009@id-86009.stonehaven.irccloud.com)
[21:46:47] <nedbat> zware: yes
[21:47:19] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:47:57] <gcbirzan> Akuli: Except, that's even harder to read :)
[21:48:05] <gcbirzan> than  (r_if_false, r_if_true)[condition]
[21:48:14] <Akuli> yeah, it's not very well suited for python programming
[21:48:30] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 272 seconds)
[21:48:32] <Akuli> it makes more sense in shell scripting:   do something && handle success || handle error
[21:48:37] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 268 seconds)
[21:50:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[21:50:33] *** Quits: umamisoup (uid511883@id-511883.stonehaven.irccloud.com) (Ping timeout: 276 seconds)
[21:50:42] *** Quits: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:50:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:52:48] <deniska> (if_true, if_false)[len(str(condition)) - 4]
[21:52:50] *** Quits: Cyp_ (~cyp@192038129116.mbb.telenor.dk) (Remote host closed the connection)
[21:53:09] <Akuli> :DDDDD
[21:53:22] *** Joins: Blankspace (~abcd@user/blankspace)
[21:53:40] <Akuli> (if_false, if_true)[len(str(condition)) - 5]    even more readable now
[21:53:43] *** Joins: Pr0phet (sid505706@stonehaven.irccloud.com)
[21:53:57] <nedbat> very clever
[21:54:18] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:54:42] *** Quits: llinguini (sid257922@id-257922.stonehaven.irccloud.com) (Ping timeout: 245 seconds)
[21:54:43] <gcbirzan> bool(5 - (len(str(condition)))) you can go full circle
[21:54:43] *** Joins: cypris (uid507362@user/cypris)
[21:54:50] <cypris> hello
[21:55:30] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 240 seconds)
[21:56:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[21:56:37] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 268 seconds)
[21:56:49] *** Joins: greedom (~greedom@2001:16b8:2e6e:f900:c740:67ea:2ea6:bbe6)
[21:56:49] <crised> Wooble zware nedbat +1
[21:56:55] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[21:57:10] *** Joins: llinguini (sid257922@stonehaven.irccloud.com)
[21:57:12] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 245 seconds)
[21:57:24] *** Quits: greedom (~greedom@2001:16b8:2e6e:f900:c740:67ea:2ea6:bbe6) (Remote host closed the connection)
[21:57:54] *** Quits: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:57:55] *** Quits: p-i- (~Ohmu@2403:6200:8870:5670:615b:125a:9fc7:7e66) (Ping timeout: 258 seconds)
[21:58:01] *** Joins: umamisoup (uid511883@stonehaven.irccloud.com)
[21:58:16] *** Joins: greedom (~greedom@2001:16b8:2e6e:f900:c740:67ea:2ea6:bbe6)
[21:58:32] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[21:58:34] *** Joins: morgabra (sid500580@user/morgabra)
[21:58:49] *** Quits: Pr0phet (sid505706@stonehaven.irccloud.com) (Read error: Connection reset by peer)
[21:59:01] *** Joins: p-i- (~Ohmu@2001:44c8:4611:9ac3:b01d:42c4:7693:5cb3)
[21:59:04] *** Quits: qlixed (~qlixed@2800:810:548:cc6::100c) (Ping timeout: 258 seconds)
[21:59:38] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 252 seconds)
[22:00:00] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[22:00:31] *** Quits: morgabra (sid500580@user/morgabra) (Max SendQ exceeded)
[22:00:34] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[22:00:46] *** Joins: Pr0phet (sid505706@stonehaven.irccloud.com)
[22:00:57] *** Quits: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com) (Ping timeout: 276 seconds)
[22:02:03] *** Joins: morgabra (sid500580@user/morgabra)
[22:02:23] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:04:15] *** Joins: JayDoubleu (sid339529@stonehaven.irccloud.com)
[22:04:38] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[22:05:22] *** Joins: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com)
[22:05:23] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[22:05:33] *** Joins: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com)
[22:05:33] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[22:06:04] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[22:06:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:06:59] <phy1729> Akuli: as an aside, don't do A && B || C because C will run if B fails too; use a proper if block
[22:08:24] <zware> phy1729: Unless you want a failure in B handled the same way as a failure in A :)
[22:09:04] *** Quits: Elzington_ (~Elzington@68.235.43.28) (Quit: Leaving)
[22:09:26] <phy1729> and if you do I'd expect a comment because the construct is more often used incorrectly than correctly
[22:09:46] *** Joins: Duckle (~Duckle@user/duckle)
[22:12:01] *** Joins: paravida (~myChateau@user/paravida)
[22:13:17] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 268 seconds)
[22:13:59] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[22:15:09] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:16:09] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 248 seconds)
[22:17:38] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 272 seconds)
[22:18:20] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[22:18:27] *** Parts: Blankspace (~abcd@user/blankspace) (Quit)
[22:20:05] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:20:31] *** Joins: d00gy (~d00gy@user/d00gy)
[22:20:53] *** Joins: magla (~gelignite@55d43c1b.access.ecotel.net)
[22:21:55] *** Quits: crised (~crised@200.112.228.39) (Ping timeout: 268 seconds)
[22:26:34] *** Joins: qlixed (~qlixed@2800:810:548:cc6::100c)
[22:26:49] *** Quits: figgle77 (~figgle77@137.28.231.187) (Ping timeout: 248 seconds)
[22:29:52] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[22:30:21] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[22:30:30] *** Quits: pmn (~jrun@bras-base-mtrlpq4706w-grc-12-174-88-164-150.dsl.bell.ca) (Quit: WeeChat 3.1)
[22:31:10] *** Joins: julia (~quassel@user/julia)
[22:32:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:34:20] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[22:34:48] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[22:34:56] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[22:35:05] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[22:35:13] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[22:37:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[22:39:13] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[22:42:24] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[22:43:56] <DPA> A && (B,1) || C
[22:45:07] <DPA> Oh, wait, this wasn't the C channel, sorry...
[22:45:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[22:46:35] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[22:47:26] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[22:47:29] *** Joins: fikran (~fikran@user/fikran)
[22:50:32] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[22:51:01] <DPA> I guess "A && ( B || true ) || C" would be the shell equivalent.
[22:51:58] *** Quits: y04nn (~y04nn@91.193.4.154) (Ping timeout: 258 seconds)
[22:52:55] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:53:02] <phy1729> You'd want to use { } not ( ) to avoid the needless subshell, but an if command is idiomatic and far clearer.
[22:53:44] <push-f> hey folks what python libraries do you consider part of your toolset?
[22:53:57] <mawk> numpy, matplotlib, requests
[22:54:00] <push-f> I've done much with bottle, requests and lxml
[22:54:23] <Staunch> selenium, requests, screenpy, a lot of the stdlib
[22:54:32] <push-f> my latest discovery is pydantic ... I think it's quite nice
[22:55:53] *** syntaxma1 is now known as syntaxman
[22:56:53] *** Joins: gdarko (~me@dg.mk)
[22:59:47] *** Joins: MikZyth (~MikZyth@188.65.242.223)
[23:02:09] <push-f> why doesn't pypi.org display dependencies of packages?
[23:02:18] <push-f> I guess it's because of setup.py but other websites manage it
[23:02:40] *** Joins: Keira (~k@lulzsec.co.uk)
[23:03:12] *** Quits: chris_99 (uid26561@id-26561.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[23:04:14] <sco1> https://dustingram.com/articles/2018/03/05/why-pypi-doesnt-know-dependencies/
[23:05:16] <push-f> then how does libraries.io do it?
[23:05:38] <zware> push-f: At a guess, incompletely :)
[23:05:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:06:08] <push-f> i'd argue incomplete is still better than nothing
[23:06:23] <Wooble> patches welcome, i'm sure?
[23:07:38] <Wooble> (although if dustin thinks it wouldn't be useful/possible, maybe not *very* welcomed. :) )
[23:07:39] <raek> push-f: pytest, hypothesis, cffi, requests, flask, urwid, tqdm, mypy
[23:07:54] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[23:08:45] *** Joins: georgios (~georgios@user/georgios)
[23:09:06] <push-f> ah I guess the relevant issue is https://github.com/pypa/packaging-problems/issues/54
[23:09:57] <push-f> from 2014 :(
[23:10:12] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 272 seconds)
[23:11:11] *** Joins: kostkon (~androirc@2a02:587:a110:f169:3115:57c0:a33f:71f6)
[23:12:16] <dale> Hm, bit of a bummer that typing.Union and other friends in typing can't be used at runtime in isinstance/issubclass.
[23:12:41] <push-f> can isinstance take anything from typing?
[23:13:33] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[23:13:53] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[23:13:59] <bjs> push-f: no,  typing is explicitly designed for static, not runtime, checks.
[23:14:11] <push-f> that's what I thought
[23:14:41] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[23:14:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:15:01] <Wooble> bjs: well, there's typing.runtime_checkable() :P
[23:15:19] *** Joins: mickey8 (~user@user/mickey)
[23:15:28] <bjs> Wooble: for Protocol's?  Yeah,  but really it's not very good
[23:15:50] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:16:19] <dale> It's annoying when combining functools.singledispatch with typing.Union.
[23:16:53] <dale> Or, rather, when you just type a function normally and were expecting it to "just work" with singledispatch.
[23:17:16] <dale> Maybe a few Python versions hence this'll get worked out.
[23:17:42] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[23:18:51] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 268 seconds)
[23:19:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:19:52] *** Joins: BlessJah (~BlessJah@user/blessjah)
[23:20:18] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[23:20:41] <dale> OTOH singledispatch has always felt fairly unloved.
[23:21:15] *** Joins: y1n (~y1n@84-115-65-215.wifi.dynamic.surfer.at)
[23:25:49] *** Joins: y04nn (~y04nn@91.193.4.154)
[23:26:02] *** Quits: mci64 (~mci64@185.242.190.95) (Quit: Connection closed)
[23:26:05] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 258 seconds)
[23:26:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 258 seconds)
[23:26:18] *** Joins: mci64 (~mci64@185.242.190.95)
[23:26:33] *** Quits: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi) (Quit: Leaving)
[23:27:15] *** Joins: Pr0phet_ (sid505706@id-505706.stonehaven.irccloud.com)
[23:27:24] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[23:27:37] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 248 seconds)
[23:27:37] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 248 seconds)
[23:27:37] *** Quits: Pr0phet (sid505706@stonehaven.irccloud.com) (Ping timeout: 248 seconds)
[23:27:37] *** Pr0phet_ is now known as Pr0phet
[23:27:51] *** Joins: llinguini_ (sid257922@id-257922.stonehaven.irccloud.com)
[23:27:54] *** Quits: umamisoup (uid511883@stonehaven.irccloud.com) (Ping timeout: 268 seconds)
[23:27:56] *** Quits: JayDoubleu (sid339529@stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:28:00] *** Quits: llinguini (sid257922@stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:28:00] *** llinguini_ is now known as llinguini
[23:28:04] *** Joins: umamisoup (uid511883@id-511883.stonehaven.irccloud.com)
[23:28:04] *** Joins: ELFrederich (~ELFrederi@134.244.29.70)
[23:28:04] *** Joins: morgabra_ (sid500580@user/morgabra)
[23:28:10] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[23:28:26] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[23:28:29] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[23:28:48] <ELFrederich> is it possible to do a yaml.load() and a yaml.dump() and preserve the order of keys?  I thought maybe with the latest Python3 where dicts are ordered it might just work but I always seem to get alphabetical when I dump
[23:29:01] *** Joins: Betal (~Betal@user/betal)
[23:29:08] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 268 seconds)
[23:29:08] *** morgabra_ is now known as morgabra
[23:29:13] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 248 seconds)
[23:29:22] <push-f> ELFrederich: sort_keys=False
[23:30:36] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[23:30:47] <mike18> hi - question to plotly
[23:30:50] <ELFrederich> push-f, actually... it looks like it's getting sorted on the way in.  When I do a yaml.load() and just iterate over the keys they're sorted
[23:31:04] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 258 seconds)
[23:31:20] <mike18> question to plotly - i look at this code: https://github.com/yvonnegitau/flask-Dashboard/blob/master/templates/index.html where does the static directory need to be?
[23:32:24] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[23:32:49] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[23:34:20] <zware> ELFrederich: Can't reproduce; do you have an example?
[23:34:34] <ELFrederich> zware, sure... let me hook up a minimal example
[23:35:41] <zware> ELFrederich: I can reproduce sorting at dump, which `sort_keys=False` prevents as push-f mentioned
[23:37:09] <InPhase> ELFrederich: For comparison, do in the same python that you're seeing the issue:  print(sys.version, 'yaml:', yaml.__version__)
[23:37:57] *** Joins: waynew (~wayne@user/waynew)
[23:38:49] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[23:39:35] *** Quits: y04nn (~y04nn@91.193.4.154) (Remote host closed the connection)
[23:39:47] *** Joins: y04nn (~y04nn@91.193.4.154)
[23:40:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[23:40:24] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d)
[23:41:32] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:42:29] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[23:43:01] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d) (Client Quit)
[23:43:36] *** Joins: binchickin (~binchicki@165.22.169.69)
[23:44:14] *** Quits: p-i- (~Ohmu@2001:44c8:4611:9ac3:b01d:42c4:7693:5cb3) (Ping timeout: 252 seconds)
[23:44:48] <ELFrederich> zware, InPhase push-f https://bpa.st/RENA
[23:45:46] <mike18> hi - is there a way to outout an object with logging.info?
[23:45:51] <mike18> output
[23:45:52] *** Joins: mickey86 (~user@user/mickey)
[23:47:04] *** Quits: harwiltz (~harwiltz@modemcable212.231-202-24.mc.videotron.ca) (Quit: WeeChat 3.1)
[23:47:09] *** Joins: hafat (~hafat@159.146.87.68)
[23:47:38] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 244 seconds)
[23:47:38] *** mickey86 is now known as mickey8
[23:48:16] <push-f> ELFrederich: have you tried setting sort_keys=False for yaml.dump?
[23:48:19] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 258 seconds)
[23:49:10] <ELFrederich> push-f, it happens at load I believe.  I'll try though
[23:50:06] *** Joins: weibullguy (DRowland@gateway/vpn/protonvpn/weibullguy)
[23:51:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:52:07] *** Joins: georgios (~georgios@user/georgios)
[23:52:33] *** Quits: kindablu- (znc@207.246.111.155) (Ping timeout: 268 seconds)
[23:52:43] <ELFrederich> okay... sort_keys seems to work.  I was mistaken because I was using the same script to both decode, then subsequently encode.  If I have sort_keys=False from the beginning it works.
[23:53:55] <push-f> great :)
[23:55:04] *** Joins: p-i- (~Ohmu@2001:44c8:460c:6b40:652d:171c:5ea2:c7fa)
[23:56:09] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[23:58:09] <zware> ELFrederich: Yep, that's still a pretty big example :).  My test cases were `yaml.safe_load('b: 1\nc: 2\na: 3')` and `yaml.safe_dump(_)`
[23:58:17] <zware> mike18: How do you mean?
[23:58:42] <zware> mike18: `logging.info('some object: %s', your_object)` works
[23:58:43] <ELFrederich> zware, yeah, I realized that and had this one ready to go... https://bpa.st/OL3A
[23:58:43] *** Joins: matsaman (~matsaman@user/matsaman)
[23:58:52] <mike18> zware: i have an object in python and want to log it using logging.info
