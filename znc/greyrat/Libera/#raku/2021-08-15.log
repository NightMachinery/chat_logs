[00:01:40] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; $a.gist.say
[00:01:40] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§(1 2 3)‚ê§¬ª
[00:01:45] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; $a.gist.say; $a.gist.say
[00:01:45] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§(1 2 3)‚ê§(1 2 3)‚ê§¬ª
[00:02:04] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; .say for $a; .say for $a
[00:02:05] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§(1 2 3)‚ê§(1 2 3)‚ê§¬ª
[00:02:15] <Xliff> m: my $a = Seq(1, 2, 3); $a.^name.say; $a.elems.say; $a.^name.say; .say for $a; .say for $a
[00:02:15] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Seq‚ê§3‚ê§Seq‚ê§(1 2 3)‚ê§(1 2 3)‚ê§¬ª
[00:02:37] <Xliff> Why isn't that Seq complaining about it being used up?
[00:04:05] <moon-child> Seq is an Iterable, not an Iterator
[00:07:48] *** Joins: Sgeo (~Sgeo@user/sgeo)
[00:15:17] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:23:03] *** Joins: mattil (~mattil@84-253-224-16.bb.dnainternet.fi)
[00:27:44] <mjgardner> Can someone explain `first` and smartmatch (`~~`) to me? I‚Äôm trying to use them in the attached script that uses Perl‚Äôs WWW::Mechanize, and although I can do a regular `eq` in `first` I can‚Äôt see how to check against a list (`$rss_types` in the example). https://www.irccloud.com/pastebin/lmQ7jGHc
[00:28:32] *** Joins: juanfra__ (~juanfra@user/juanfra)
[00:30:14] <lizmat> m: dd "a" ~~ <a b c d>   # mjgardner smartmatch won't work that way
[00:30:14] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Bool::False‚ê§¬ª
[00:30:44] <lizmat> m: dd "a" (elem) <a b c d>   # mjgardner perhaps this will?
[00:30:44] <camelia> rakudo-moar 548803393: OUTPUT: ¬´Bool::True‚ê§¬ª
[00:30:53] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[00:31:12] <[Coke]> https://docs.raku.org/routine/ACCEPTS - this shows what smartmatch does with a list, btw.
[00:31:33] *** Quits: Shaeto (~Shaeto@94.25.234.248) (Quit: WeeChat 3.1)
[00:31:55] <[Coke]> elem should work, an explicit junction should work  ~~ any($rss_types)
[00:32:53] <mjgardner> lizmat: (elem) works üôÇ
[00:35:31] <mjgardner> [Coke]: `say $alt_links.first(*.attrs<type> ~~ any($rss_types)).url;` gets me a compiler error: Function "any" may not be called without arguments (please use () or whitespace to denote arguments, or &any to refer to the function as a noun, or use .any if you meant to call it as a method on $_)
[00:36:15] <mjgardner> But (elem) works so I‚Äôll go with that.
[00:36:22] <[Coke]> try 'eq' instead of ~~ there.
[00:38:52] <mjgardner> Nope, that gets me Nil.
[00:41:19] <MasterDuke> what if you give $rss_types a `@` sigil?
[00:42:00] <MasterDuke> m: my $a = <a b ab abc d>; say "abc" ~~ any($a); my @b = <a b ab abc d>; say "abc" ~~ any(@b)
[00:42:01] <camelia> rakudo-moar 548803393: OUTPUT: ¬´False‚ê§True‚ê§¬ª
[00:44:14] <[Coke]> Apologies for the bad advice, always trust lizmat. :)
[00:48:43] <mjgardner> MasterDuke: That only works if I do `.first( {$_.attrs<type> ~~ any(@rss_types) } )`, but that‚Äôs a bit noisier than lizmat‚Äôs (elem), so I‚Äôm going with the latter.
[00:50:03] <MasterDuke> sure. elem going to be faster anyway, just showing how it could/would work
[00:53:21] <mjgardner> Thanks for the help all.
[00:54:16] *** Quits: mattil (~mattil@84-253-224-16.bb.dnainternet.fi) (Read error: Connection reset by peer)
[01:02:32] *** Joins: codesections (4b03ec84@67.205.143.82)
[01:03:49] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[01:11:50] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[01:11:50] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Read error: Connection reset by peer)
[01:16:21] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[01:19:06] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[01:19:48] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 268 seconds)
[01:25:29] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 252 seconds)
[01:25:40] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[01:30:49] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 248 seconds)
[01:48:59] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[01:52:12] <japhb> andinus: There's some rough stuff in https://github.com/japhb/Terminal-QuickCharts, but that's more for making a CLI output a chart, than to have live charts going in a TUI app.  There's also https://github.com/ab5tract/Terminal-Print which is relatively low level.  (It has the underlying code to do animatable widgets, but it has NO widget library.  Just the low-level bits.)
[02:37:26] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[02:50:29] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[03:50:29] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[03:50:29] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:29] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:50:30] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[03:50:53] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:50:59] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[03:51:00] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[03:51:46] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[03:52:39] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[03:52:47] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[03:52:49] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[03:53:18] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[03:53:21] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[03:53:34] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[04:51:35] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[04:51:51] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[04:52:33] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[04:52:54] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[04:52:56] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[04:53:38] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[05:22:31] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:35:33] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:51:41] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[05:52:40] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[06:25:46] *** Joins: Max (~Max@n110-22-87-29.sun3.vic.optusnet.com.au)
[06:26:09] *** Max is now known as Guest1367
[06:27:02] *** Quits: Guest1367 (~Max@n110-22-87-29.sun3.vic.optusnet.com.au) (Client Quit)
[07:09:41] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[08:09:41] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:09:41] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:09:41] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:11:23] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:40:15] *** Joins: frost (~frost@59.71.240.119)
[09:03:19] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:11:30] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:38:35] <mjgardner> Realizing this may be a stupid question but I only just started learning, so: I want to exit my MAIN sub in a script with an error message and code but no line numbers. Would it be better/more idiomatic to 1) just say the error to STDERR and exit, or 2) die with a CATCH block that does that? https://www.irccloud.com/pastebin/TUSlZ1m7
[09:53:26] <moritz> mjgardner: 2) sounds cleaner
[09:54:57] <mjgardner> moritz: It seems more verbose though. What are the advantages?
[09:58:48] <moritz> mjgardner: in time when MAIN grows, there might be more places that need error handling. Having a CATCH neatly encapsulates that in one position
[09:59:51] <moon-child> sub error($msg) { $*ERR.say($msg); exit 1 }
[09:59:53] <moon-child> ez
[10:03:06] <mjgardner> moritz: That‚Äôs a good point. If this is just for a toy program in a blog post, though?
[10:07:29] <mjgardner> I‚Äôm writing the same toy program in Perl 5 as a comparison, and I don‚Äôt want to set up Raku as a straw man that appears more verbose than necessary.
[10:10:16] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[10:16:22] <moritz> if it's just for a toy, do as you want :D
[10:26:16] <mjgardner> Thanks.
[10:33:06] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:33:36] <CIAvash> mjgardner: You can use `note` instead of `$*ERR.say` https://docs.raku.org/routine/note
[10:35:36] <mjgardner> CIAvash: Neat! Thanks!
[10:37:34] <CIAvash> also you can write it as `note .message and exit 1`
[10:48:04] <mjgardner> That‚Äôs more of a golfing move, though. It‚Äôs not like `note .message` will ever evaluate to false.
[10:48:39] <moon-child> well, it's like english.  'note the message and [then] exit'
[10:49:15] <mjgardner> So is every ; as a statement separator.
[10:49:20] <moon-child> yes
[10:51:16] * moon-child has, at this point, given up on trying to avoid abusing notation.  It's there to be abused!
[10:54:04] <mjgardner> As it turns out my message (I went with just the note and exit) is kinda long, so putting `and exit 1` at the end of the line gets lost when reading. But thanks for the suggestion.
[11:21:08] *** Joins: mattil (~mattil@87-92-192-25.rev.dnainternet.fi)
[11:26:07] *** Quits: xinming (~xinming@115.219.32.87) (Quit: WeeChat 3.2)
[11:34:41] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:46:43] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[11:54:24] *** Joins: Frozenset (~Frozenset@5.177.238.234)
[12:41:08] *** Joins: matti_ (~mattil@87-92-192-25.rev.dnainternet.fi)
[12:44:55] *** Quits: mattil (~mattil@87-92-192-25.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[13:24:24] <andinus> japhb: i see, thanks. unfortunately Terminal::Print doesn't work on obsd, Terminal::QuickCharts is cool, i could combine it with Terminal::UI or Curses to make something
[13:39:54] <andinus> there was a channel publishing ncurses tutorials on raku, seems like they were taken down recentl
[13:44:55] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:44:55] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:45:21] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:45:31] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:01:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:15:27] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[14:17:14] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 272 seconds)
[14:53:24] <samcv> The highlighting on https://learnxinyminutes.com/docs/raku/ has been broken for at least a year due to the Pygments raku syntax highlighter not supporting =begin and =end without a blank newline after the =end.
[14:54:09] <samcv> I am going to just change those sections into normal block # comments to fix it. Other alternative would be to modify pygments to fix it.
[14:55:33] <samcv> Or adding a newline before the =end also works. But I think just adding block comments is the cleanest, otherwise someone may try and remove the extra newline later on
[15:02:05] <lizmat> agree :-)
[15:03:56] *** Quits: oodani (~oodani@00dani.me) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[15:04:37] *** Joins: oodani (~oodani@00dani.me)
[15:31:27] *** Parts: ddeimeke (~ddeimeke@ubuntu/member/ddeimeke) (The Lounge - https://thelounge.chat)
[15:41:23] <andinus> i have an array of hashes and want to make a change to every "3" hash index of the elements in array, currently i'm looping over @list.end and making the change, is there a better way to do this?
[15:42:18] <andinus> m: my @list = %(0=> "z",1=> "a", 2=> "b", 3 => "c"),;
[15:42:19] <camelia> rakudo-moar 289a62f4a: ( no output )
[15:44:21] <lizmat> .<3> = 42 for @list   ??
[15:45:30] <andinus> makes sense, i was thinking of .map
[15:46:10] <andinus> also, can i convert that list of hash to a list of lists since the keys are just numbers from 0..5, 
[15:46:21] <andinus> i tried @list.map(*.values)
[15:47:01] <andinus> @list.map(|*.values) actually but it returns the values in random order it seems 
[15:47:37] <lizmat> yes, .keys and .values will return in random order for hashes
[15:58:49] <codesections> andinus: you can do `@list.map(*.sort¬ª.values)`
[15:59:15] <andinus> i'm parsing a csv, it seems hyper is faster than race, it has to do extra work right for ordering?
[15:59:52] <andinus> i see, thanks codesections, that works
[16:01:57] <andinus> i did @list.map(*.sort.map(|*.values)); needed that slip, it returns a seq otherwise
[16:02:15] <Frozenset> codesections: did you mean `value` at the end instead of `values`?
[16:02:24] <Frozenset> andinus: If keys are all 0..5, I think you can also do a hash slice as `@list>>.{0..5}`
[16:03:19] <Frozenset> or sans the dot: `@list>>{0..5}`
[16:05:11] <codesections> Frozenset: .value works for that example code but gets you a list of Str.  andinus asked about converting the hashes to a lol ‚Äì either way works, depending on what you want 
[16:07:29] <andinus> thanks Frozenset, the keys are 0..5, that works
[16:08:10] <andinus> looks like .value does what i want, it returns the same thing as .map(|*.values);
[16:08:48] <andinus> and *.sort.map(*.value) too
[16:08:58] <andinus> i'll do >>.{0..5}
[16:10:00] <codesections> m: my @list = %(0=> "z",1=> "a", 2=> "b", 3 => "c"),; say @list¬ª{*}
[16:10:00] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´((c a z b))‚ê§¬ª
[16:10:26] <codesections> m: my @list = %(0=> "z",1=> "a", 2=> "b", 3 => "c"),; say @list¬ª{0..3}
[16:10:27] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´((z a b c))‚ê§¬ª
[16:10:59] <codesections> Interesting to see that ^^^ those two are different 
[16:11:57] <andinus>  m: my @list = %(0=> "z",1=> "a", 2=> "b", 3 => "c"),; say @list>>{0..*};
[16:11:58] <lizmat> codesections: any run will produce different ordering, even within a single process
[16:12:16] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 64459440 bytes‚ê§¬ª
[16:12:17] <lizmat> see algorithmic complexity attacks 
[16:12:44] <lizmat> andinus: interesting
[16:12:47] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:12:47] <codesections> lizmat yeah, I know that in general for .values
[16:13:14] <lizmat> and .keys and .pairs and .kv: anything that takes an iterator on the hash
[16:13:34] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:13:42] <andinus> it eats up all memory on my system too, rakudo 2021.02
[16:13:48] <codesections> yeah. I just wasn't sure if .{*} would have the same semantics as .values or as .{0..5} 
[16:14:10] <lizmat> looks like there's no laziness check on the indexing like that
[16:14:50] <andinus> what is it trying to do? index from 0..Inf?
[16:15:08] <lizmat> yup
[16:15:19] <lizmat> and build a result list of empty containers
[16:15:38] <andinus> ah makes sense, i was wondering why it was eating memory
[16:15:41] <lizmat> m: my %h; %h<a b c> = 1,2,3; dd %h
[16:15:42] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´Hash %h = {:a(1), :b(2), :c(3)}‚ê§¬ª
[16:16:12] <lizmat> that builds a list of 3 empty containers, and then assigns the 1,2,3 list to those containers
[16:17:12] <lizmat> m: my %h = :42a, :666b; dd %h{ <a b>.lazy }   # that should probably complain about not being able to index using a lazy list
[16:17:12] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´(42, 666)‚ê§¬ª
[16:17:34] *** Joins: xinming (~xinming@115.219.36.19)
[16:17:49] <Frozenset> codesections: I see, thanks for the explanation. I thought list of lists but not list of list of lists :ƒü
[16:18:25] <Frozenset> and with the sort approach I think a care is needed if a key exceeds 10 since it does string comparison
[16:23:04] <lizmat> then sort on +*.value
[16:26:00] *** Quits: frost (~frost@59.71.240.119) (Quit: Ping timeout (120 seconds))
[16:29:30] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:32:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:35:28] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:43:19] <CIAvash> samcv: or you could tell them to use Chroma instead of Pygments and you would only need to remove one space to get it highlighted correctly üòÄ (using the latest commit)
[17:16:59] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[17:31:56] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[17:40:13] <Frozenset> Xliff: Your last two Seq examples do give X::Seq::Consumed if you change the variable to be sigilless
[17:40:49] <Frozenset> m: my \a = Seq(1, 2, 3); a.^name.say; a.elems.say; .say for a; .say for a;
[17:40:49] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´Seq‚ê§The iterator of this Seq is already in use/consumed by another Seq (you‚ê§might solve this by adding .cache on usages of the Seq, or by assigning‚ê§the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§3‚ê§1‚ê§2‚ê§3‚ê§¬ª
[17:41:21] <Frozenset> therefore I don't think "Seq is an Iterable, not an Iterator" is the reason
[17:42:48] <Frozenset> so I guess assigning it to a $-sigiled variable has a similar effect as assigning it to a @-sigiled variable
[17:44:13] <Frozenset> but I might be wrong altogether
[17:47:45] *** Quits: Frozenset (~Frozenset@5.177.238.234) (Quit: Connection closed)
[17:54:56] *** Quits: b2gills (~brad@64.191.7.0) (Ping timeout: 252 seconds)
[17:55:53] *** Quits: xinming (~xinming@115.219.36.19) (Ping timeout: 248 seconds)
[17:56:15] *** Joins: xinming (~xinming@115.219.36.19)
[18:21:22] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 244 seconds)
[18:23:56] *** Joins: tejr (~tejr@user/tejr)
[18:34:46] *** Quits: codesections (4b03ec84@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[18:49:19] *** Quits: gordonfish (~gordonfis@user/gordonfish) ()
[19:34:46] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:47:25] <andinus> does adding .race.cache to loops make any difference?
[19:47:43] <andinus> i have a for loop performing multiple operations on lists of lists (hence .cache)
[20:34:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:34:47] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:36:36] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:37:09] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[21:37:09] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:37:09] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:37:09] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:09] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:10] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:37:10] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[21:38:02] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[21:38:27] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[21:38:36] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[21:39:33] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[21:39:42] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[21:39:53] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[21:40:29] *** Joins: b2gills (~brad@64.191.7.0)
[22:03:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:07:23] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[22:23:52] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[22:26:24] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Client Quit)
[22:26:53] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[22:39:35] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[22:39:38] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[22:40:12] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[22:56:05] <japhb> andinus: Terminal::Print doesn't work on obsd?  That's news to me!  What doesn't work?  Unrecognized terminal or somesuch?
[23:36:21] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[23:38:42] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
