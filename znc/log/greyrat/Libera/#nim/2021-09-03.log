[00:11:55] <FromDiscord> <auxym> or toSeq from sequtils. eg. `toSeq(table.values)`. Which is a template that produces a for loop
[00:20:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[00:21:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:42:22] <FromDiscord> <Cark> ah man, i was pretty suspicious about the whole asyncdispatch thing because it seemed to lack many features, but it's all in asyncfutures, the doc for which isn't linked from the standard library page
[00:44:05] <FromDiscord> <Cark> and of course it was a simple as clicking on any Future in the asyndispatch doc >>
[00:44:08] <FromDiscord> <Cark> (edit) ">>" => "><"
[00:44:15] <FromDiscord> <Cark> (edit) "a" => "as"
[00:53:42] <FromDiscord> <aleclarson> In reply to @haxscramper "You can' in theory": nim wouldn't compile until i did this. does that seem right?â†µ`cast[ptr napi_value](cast[int](args[0].unsafeAddr) + argc)`
[00:57:05] <FromDiscord> <aleclarson> where `argc` is `args.len`
[00:57:13] <FromDiscord> <aleclarson> (edit) "`args.len`" => "`argv.len`"
[00:57:26] <FromDiscord> <aleclarson> i don't really understand why i'm adding `argc` though
[00:58:49] <FromDiscord> <ynfle (ynfle)> What's the difference between macros.copyNimNode & macros.copyNimTree
[01:00:28] <FromDiscord> <phargob> Hi, is there a way to get the directory of a source file during compile?
[01:02:50] <FromDiscord> <phargob> like file in python
[01:03:45] <FromDiscord> <phargob> oh dear, like dunder file ðŸ™‚
[01:07:06] *** Quits: max22- (~maxime@2a01cb08833598004d1bbe70867eb08c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:07:18] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:08:32] *** Joins: flynn (~mcbloch@user/flynn)
[01:17:18] <FromDiscord> <RattleyCooper> In reply to @ynfle (ynfle) "What's the difference between": Source makes it look like they do the same thing
[01:18:01] *** Quits: userj (~userjjjj@user/userj) (Ping timeout: 252 seconds)
[01:20:34] <FromDiscord> <ynfle (ynfle)> Why do you say that? They are different magic procs
[01:29:17] <FromDiscord> <RattleyCooper> In reply to @ynfle (ynfle) "Why do you say": Bc I wasn't sure what `magic` does and when I google it there isn't much on it except "only used in system modules"
[01:29:38] <FromDiscord> <RattleyCooper> Have you tried to run both procedures to see what the difference is?
[01:30:37] <FromDiscord> <ynfle (ynfle)> I have a hard time inspecting NimNodes.
[01:31:45] <FromDiscord> <ynfle (ynfle)> `magic` means implemented by the compiler directly so you can't see the source code ðŸ‘…
[01:32:10] <FromDiscord> <ynfle (ynfle)> Although, you can go see the compiler source. It's written in Nim
[01:40:56] <FromDiscord> <RattleyCooper> Oh jeez yeah I have no clue lol.  Seems like actual magic
[01:40:56] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[01:44:11] <FromDiscord> <ynfle (ynfle)> Yup it is
[01:44:39] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3xMG
[01:44:48] <FromDiscord> <retkid> is there anyway os.sleep() can return nil?
[01:45:36] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3xMH
[01:50:03] <FromDiscord> <ynfle (ynfle)> It doesn't return
[01:50:13] <FromDiscord> <ynfle (ynfle)> What's the code you are using?
[01:52:18] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3xMJ
[01:52:22] <FromDiscord> <retkid> thats everything predating the os.sleep
[01:53:05] <FromDiscord> <RattleyCooper> In reply to @phargob "Hi, is there a": Check the `macros.getProjectPath` proc
[01:53:44] <FromDiscord> <RattleyCooper> or `system.currentSourcePath`
[01:58:52] <FromDiscord> <phargob> In reply to @RattleyCooper "Check the `macros.getProjectPath` proc": Thanks - system.currentSourcePath is exactly what I was looking for.
[01:59:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:00:29] *** Joins: flynn (~mcbloch@user/flynn)
[02:08:38] <FromDiscord> <ynfle (ynfle)> Why are you using os.sleep and not just sleep?
[02:08:57] <FromDiscord> <Elegantbeef> wait ynfle this isnt python? ðŸ˜›
[02:09:37] <FromDiscord> <ynfle (ynfle)> Unfortunately not... [codemirror/CodeMirror#5437](https://github.com/codemirror/CodeMirror/issues/5437)
[02:10:36] <FromDiscord> <Yardanico> discord does support nim though (since it uses highlight.js)
[02:10:48] <FromDiscord> <Yardanico> (just not sure what was codemirror remark was about)
[02:11:10] <FromDiscord> <Elegantbeef> Ynfle is on gitter iirc so maybe they use code mirror
[02:11:17] <FromDiscord> <Elegantbeef> Cause element also supports nim it seems
[02:11:54] <FromDiscord> <Yardanico> oh, yeah, I assumed no one uses gitter nowadays :)
[02:12:32] <FromDiscord> <Yardanico> and since now gitter is matrix, gitter users are shown the same as matrix users
[02:13:17] <FromDiscord> <ynfle (ynfle)> Nah. It's for exercism.org (formerly exercism.io)
[02:13:52] <FromDiscord> <Yardanico> oh, really weird
[02:14:01] <FromDiscord> <Yardanico> do they just use the original codemirror without changes?
[02:14:50] <FromDiscord> <Yardanico> because exercism had nim before (I even was mentoring the nim track for a short amount of time), and iirc for their new exercism they even wrote some of their tooling in nim
[02:16:50] <FromDiscord> <Yardanico> oh :P https://media.discordapp.net/attachments/371759389889003532/883105711511461928/unknown.png
[02:17:07] <FromDiscord> <Yardanico> i guess I should solve nim exercises of exercism myself first
[02:18:11] <FromDiscord> <Elegantbeef> Exercise your demons
[02:18:27] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[02:18:47] <FromDiscord> <ynfle (ynfle)> ðŸ’ª
[02:19:01] <FromDiscord> <ynfle (ynfle)> Nim can be demonic sometimes
[02:19:40] <FromDiscord> <Elegantbeef> That just means you're using generics/concepts
[02:19:50] <FromDiscord> <ynfle (ynfle)> They switched to codemirror because of accessibility reasons mid-way through development and I didn't realize it didn't have nim support
[02:19:56] <FromDiscord> <ynfle (ynfle)> @beef. So...
[02:20:15] <FromDiscord> <Yardanico> also I noticed a bug in their editor already
[02:20:23] <FromDiscord> <ynfle (ynfle)> https://www.npmjs.com/package/nim-codemirror-mode
[02:20:30] <FromDiscord> <ynfle (ynfle)> What is the bug? @\_discord\_177365113899057152\:t2bot.io
[02:20:39] <FromDiscord> <ynfle (ynfle)> @Yardanico
[02:20:40] <FromDiscord> <Yardanico> if your iterator passes all tests but you don't click "submit" and go back to the main (or any other) page, then return - you won't be able to click submit
[02:20:45] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/883106698775126036/unknown.png
[02:21:15] <FromDiscord> <Yardanico> so I clicked "run tests",  they completed, I went to main page, then returned, and now I can't submit unless I change the code so it re-runs the tests and only then I'll be able to submit
[02:21:50] <FromDiscord> <Yardanico> because if you don't modify the code clicking on the "run tests" will say that there's nothing to test since the code haven't changed
[02:22:05] <FromDiscord> <ynfle (ynfle)> Can you make an issue on https://github.com/exercism/exercism
[02:22:12] <FromDiscord> <Yardanico> another one too, but I guess this one has to do with Nim error message parsing or something https://media.discordapp.net/attachments/371759389889003532/883107063541166100/unknown.png
[02:22:20] <FromDiscord> <Yardanico> \n is not considered a newline :P
[02:23:18] <FromDiscord> <Yardanico> @ynfle current exercism website is the v3 one, right?
[02:23:29] <FromDiscord> <Yardanico> ah it's the default
[02:24:05] <FromDiscord> <ynfle (ynfle)> Yes it's v3
[02:24:24] <FromDiscord> <ynfle (ynfle)> It could be the automatic escaping of the `json` module
[02:26:54] <FromDiscord> <Yardanico> https://github.com/exercism/exercism/issues/5701
[02:30:10] <FromDiscord> <ynfle (ynfle)> Can you also create one for the `\n` issue on https://github.com/exercism/nim-test-runner?
[02:34:49] <FromDiscord> <Yardanico> yeah, sure
[02:36:36] <FromDiscord> <ynfle (ynfle)> Thanks
[02:44:48] <FromDiscord> <Yardanico> @ynfle is there a way to refer to lines of code specifically when making comments?
[02:45:04] <FromDiscord> <Yardanico> I see this, but it doesn't seem to do anything at all https://media.discordapp.net/attachments/371759389889003532/883112816758894592/unknown.png
[02:47:38] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:47:51] <FromDiscord> <ynfle (ynfle)> That linking is just linking the iteration with comments about that iteration
[02:48:01] <FromDiscord> <ynfle (ynfle)> Referring to lines isn't implemented yet
[02:48:08] <FromDiscord> <Yardanico> oh okay
[02:49:56] <FromDiscord> <Yardanico> also, am I supposed to comment on code parts that can be shortened or not (generally on exercism)?
[02:50:16] <FromDiscord> <Yardanico> like to use a better way of calculating things, not that related to the language itself
[02:50:54] <FromDiscord> <ynfle (ynfle)> Ya I think so
[02:51:00] <FromDiscord> <ynfle (ynfle)> For practice exercises definitely
[02:51:36] <FromDiscord> <Yardanico> okay
[02:58:50] <FromDiscord> <Yardanico> i hope they'll add referring to lines soon, it can help in bigger files a lot :)
[02:59:27] <FromDiscord> <Yardanico> Like a few days ago I did my usual "search for new Nim projects on GitHub" and randomly decided to PR making the code a bit nicer - https://github.com/Justaus3r/Ccube/pull/1
[03:01:40] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 240 seconds)
[03:02:57] *** Joins: audiophile_ (~audiophil@user/audiophile)
[03:09:20] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 244 seconds)
[03:36:11] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:37:18] *** Joins: flynn (~mcbloch@user/flynn)
[03:48:39] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[03:51:28] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 252 seconds)
[04:14:35] *** Joins: beshr (~beshr@user/beshr)
[04:19:59] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:21:07] *** Joins: flynn (~mcbloch@user/flynn)
[04:41:21] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:04:50] <FromDiscord> <auxym> any ideas to check if an `int` is a valid value for a given enum type?
[05:05:11] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[05:05:43] <FromDiscord> <Elegantbeef> is it a holey enum?
[05:06:09] <FromDiscord> <impbox [ftsf]> test for RangeDefect
[05:06:10] <FromDiscord> <Elegantbeef> If it's contigious you can do `if i in YourEnum.low.ord .. YouEnum.high.ord`
[05:06:22] <FromDiscord> <Elegantbeef> Impbox you can leave right this instant
[05:06:34] <FromDiscord> <Elegantbeef> You do not catch `defects` ðŸ˜€
[05:06:43] <FromDiscord> <impbox [ftsf]> you except them =)
[05:06:49] <FromDiscord> <Elegantbeef> No you do not
[05:06:54] <FromDiscord> <impbox [ftsf]> you can!
[05:06:57] <FromDiscord> <impbox [ftsf]> i just tried it
[05:07:05] <FromDiscord> <Elegantbeef> now try with `-d:danger`
[05:07:11] <FromDiscord> <impbox [ftsf]> sounds dangerous =p
[05:07:23] <FromDiscord> <impbox [ftsf]> but fair
[05:07:48] <FromDiscord> <Elegantbeef> I'm going to spam this forever now someone shouldnt let me write forum posts https://forum.nim-lang.org/t/8342#53776
[05:08:14] <FromDiscord> <impbox [ftsf]> aye, though the compiler should probably throw an error/warning if you try
[05:08:42] <FromDiscord> <Elegantbeef> defects just shouldnt be catchable imo
[05:08:48] <FromDiscord> <impbox [ftsf]> I agree
[05:09:10] <FromDiscord> <impbox [ftsf]> or at least throw a warning
[05:09:24] <FromDiscord> <auxym> yeah, wanted to avoid having to catch anything, thanks @ElegantBeef. I'll be avoiding holes due to https://github.com/nim-lang/Nim/issues/13980
[05:09:27] <FromDiscord> <impbox [ftsf]> but I do think out of Range should be catchable
[05:10:10] <FromDiscord> <Elegantbeef> Eh using exception handling for something rather simple seems odd, but what do i know
[05:10:31] <FromDiscord> <impbox [ftsf]> shrugs
[05:10:50] <FromDiscord> <impbox [ftsf]> but yeah, `if val in EnumType:` might be nicer
[05:10:56] <FromDiscord> <Elegantbeef> the what do i know wasnt meant to be condescending, just an actuality
[05:11:38] <FromDiscord> <auxym> @impbox [ftsf] yeah. probably implementable as a template? My template-fu isn't extremely strong
[05:11:42] <FromDiscord> <Elegantbeef> Consider a PR to http://nim-lang.github.io/Nim/enumutils.html
[05:12:00] <FromDiscord> <Elegantbeef> It's implementable as a procedure, generic that takes a `typedesc[enum]`
[05:12:23] <FromDiscord> <Elegantbeef> Assuming it's not holey
[05:12:40] <FromDiscord> <Elegantbeef> https://forum.nim-lang.org/t/8188 for a bunch of solutions
[05:13:10] <FromDiscord> <auxym> cheers. good reading.
[05:15:41] <FromDiscord> <impbox [ftsf]> actually, excepting defects may make sense when running nimscript for example
[05:15:52] <FromDiscord> <impbox [ftsf]> and reporting errors
[05:16:01] <FromDiscord> <Elegantbeef> Perhaps
[05:16:10] <FromDiscord> <impbox [ftsf]> you can't fix the problem, but you can report about it
[05:17:39] <FromDiscord> <Elegantbeef> Catching defects in nim code though is just asking for trouble since you can easily stop that from happening which will cause hidden bugs
[05:17:43] *** Gustavo6046 is now known as Gustava6046
[05:25:17] *** Gustava6046 is now known as Gustavo6046
[05:28:13] *** Joins: byanka (~byanka@185.176.110.253)
[05:34:29] <cornfeedhobo> anyone have opinions one which vscode extension to use?
[05:34:41] <FromDiscord> <Elegantbeef> nimsaem's
[05:34:52] <cornfeedhobo> thanks
[05:34:59] <FromDiscord> <impbox [ftsf]> VSCodeVim
[05:35:18] <cornfeedhobo> lol. i meant nim specific :p
[05:35:20] <FromDiscord> <Elegantbeef> You mean onivim? ðŸ˜›
[05:35:29] <cornfeedhobo> look what you started
[05:35:33] <FromDiscord> <impbox [ftsf]> sorry
[05:35:44] <cornfeedhobo> hehe
[05:35:56] <FromDiscord> <Elegantbeef> Impbox might actually like onivim2 though ðŸ˜€
[05:43:44] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[05:44:50] *** Joins: flynn (~mcbloch@user/flynn)
[05:45:32] *** Joins: neurocyte2 (~neurocyte@94.46.75.10)
[05:45:32] *** Quits: neurocyte2 (~neurocyte@94.46.75.10) (Changing host)
[05:45:32] *** Joins: neurocyte2 (~neurocyte@user/neurocyte)
[05:47:23] <FromDiscord> <impbox [ftsf]> can a macro determine the type of a thing?
[05:47:31] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:47:31] *** neurocyte2 is now known as neurocyte
[05:47:38] <FromDiscord> <Elegantbeef> If the macro arg is `typed`
[05:47:50] <FromDiscord> <Elegantbeef> it cannot get a type inside the macro though
[05:47:56] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://paste.rs/PFV
[05:48:41] <FromDiscord> <Elegantbeef> you could do `root[^2] = newCall(ident"typeof", root[^])`
[05:51:19] <FromDiscord> <impbox [ftsf]> woo! magic!
[05:51:21] <FromDiscord> <impbox [ftsf]> thanks
[05:51:32] <FromDiscord> <Elegantbeef> No problem
[05:51:51] <FromDiscord> <Elegantbeef> Whatcha working on?
[05:51:59] <FromDiscord> <impbox [ftsf]> >_>
[05:52:37] <FromDiscord> <Elegantbeef> I mean i can only think of one use case for the above, and that's with modifying type defs \:P
[05:53:08] <FromDiscord> <impbox [ftsf]> https://github.com/Glasses-Neo/OOlib saw this and thought it's cool, but it _couldn't_ infer types from defaults...
[05:53:39] <FromDiscord> <Elegantbeef> Hey i was right! ðŸ˜€
[05:53:51] <FromDiscord> <Elegantbeef> https://github.com/beef331/constructor#defaults thought it was something like this
[05:54:09] <FromDiscord> <impbox [ftsf]> indeed
[05:56:22] <FromDiscord> <impbox [ftsf]> for people like me who sometimes like basic oopy stuff
[05:56:40] <FromDiscord> <impbox [ftsf]> i do miss class data
[05:57:52] <cornfeedhobo> what defines a package name? where is the line between repo name and package name?
[05:58:00] <FromDiscord> <Elegantbeef> If you're doing anything with inheritance may want to use https://nimdocs.com/beef331/oopsie/oopsie.html
[05:58:15] <FromDiscord> <Elegantbeef> Repo name should be the package name to make everyone happier
[05:59:06] <cornfeedhobo> suuuuure, but consider when you implement the same thing in multiple languages. it's common to prefix $lang-$library
[05:59:34] <cornfeedhobo> but within the language, you just want to use $library
[06:03:44] <cornfeedhobo> oh, is package name the name of the .nimble file?
[06:03:56] <FromDiscord> <Elegantbeef> I believe so
[06:04:18] <FromDiscord> <Elegantbeef> It only really matters for the nimble directory since if you use git urls it's the repo
[06:04:40] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 240 seconds)
[06:07:11] *** Quits: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com) (Ping timeout: 250 seconds)
[06:09:00] <FromDiscord> <Cark> sent a code paste, see https://play.nim-lang.org/#ix=3xNq
[06:09:19] <FromDiscord> <Elegantbeef> `for x in myseq.mitems: dostuff(x)`
[06:09:33] <FromDiscord> <Cark> oh i need to try this, thanks
[06:09:51] <FromDiscord> <Elegantbeef> `mitems` is the `mutable` items iterator that is conventionally named  as such
[06:10:12] <FromDiscord> <Elegantbeef> Each element is yielded as a mutable reference to `x`
[06:11:00] <FromDiscord> <Cark> indeed that works, thanks !
[06:16:55] *** Joins: Freneticks (~Frenetick@gw.ptr-80-238-209-252.customer.ch.netstream.com)
[06:18:54] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 256 seconds)
[06:25:57] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[06:27:14] *** Joins: flynn (~mcbloch@user/flynn)
[06:29:09] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[07:11:10] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:30:34] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[07:31:56] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: Ping timeout (120 seconds))
[07:32:08] *** Joins: neurocyte (~neurocyte@94.46.75.10)
[07:32:08] *** Quits: neurocyte (~neurocyte@94.46.75.10) (Changing host)
[07:32:08] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[07:33:59] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Client Quit)
[07:35:19] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[07:36:33] *** Joins: flynn (~mcbloch@user/flynn)
[07:46:56] <madprops> how should I do this with karax ... 
[07:46:56] <madprops> tdiv(id = "options-switch", onclick = () => (kdom.getElementById("options-switch").style.display = "block"))
[07:47:58] <madprops> oh wait nvm
[07:48:42] <madprops> I was getting the wrong element
[07:49:36] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:45:43] <madprops> hey, something weird happened
[08:46:17] <madprops> some choosenim process got cpu heavy https://i.imgur.com/zNKySQV.jpg
[08:46:24] <madprops> i don't know why it was running
[08:47:13] <madprops> i was compiling some karax code into js
[08:47:20] <madprops> maybe it got stuck on some failed compilation or something
[08:57:18] <FromDiscord> <Rika> nimsuggest can bug out like that
[08:57:25] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[08:58:31] *** Joins: flynn (~mcbloch@user/flynn)
[09:25:52] <FromDiscord> <garett> sent a code paste, see https://play.nim-lang.org/#ix=3xNF
[09:26:37] <FromDiscord> <garett> I've definitely seen `nimsuggest` bug out and go nuts on CPU
[09:26:42] <FromDiscord> <xflywind> `include a`
[09:27:01] <FromDiscord> <garett> @xflywind thank you
[09:27:38] <FromDiscord> <xflywind> np
[09:28:43] <FromDiscord> <garett> moved all the `{.pragma:...}` to `pragmas.nim`
[09:28:50] <FromDiscord> <garett> worked like a charm
[09:29:10] <FromDiscord> <garett> seems like an inconsistency
[09:29:37] <FromDiscord> <xflywind> that's what stdlib does
[09:29:44] <FromDiscord> <xflywind> like `include "system/inclrtl"`
[09:30:28] <FromDiscord> <xflywind> > # Pragmas for RTL generation. Has to be an include, because user-definedâ†µ> # pragmas cannot be exported.
[09:33:25] <FromDiscord> <impbox [ftsf]> is there any way in a macro to determine if a method should use {.base.}, ie, check if the method is defined in its parent and add {.base.} if not?
[09:38:01] <FromDiscord> <Ï€Ï„ (pi man)> so I managed to get debugging working through VSC, but the variable names are all T<number>_, any way to get the actual variable names?
[09:39:07] <FromDiscord> <Ï€Ï„ (pi man)>  https://media.discordapp.net/attachments/371759389889003532/883217018835333160/unknown.png
[09:39:37] <FromDiscord> <Ï€Ï„ (pi man)> `nimble --lineDir:on --debuginfo --debugger:native -d:useRealtimeGC -d:nimTypeNames build`â†µthis is my build command
[09:39:58] <FromDiscord> <Elegantbeef> put those commands after build
[09:40:02] <FromDiscord> <Elegantbeef> i believe atleast
[09:40:34] <FromDiscord> <Ï€Ï„ (pi man)> it works either way
[09:40:39] <FromDiscord> <xflywind> use `nim-gdb.py` to get better messages
[09:42:26] <FromDiscord> <Elegantbeef> Yea follow https://github.com/saem/vscode-nim#debugging if you havent
[09:42:55] <FromDiscord> <Elegantbeef> @impbox [ftsf]\: so yes macros can figure out if it should be base, but no i dont think they can figure out soon enough to remove the warning ðŸ˜€
[09:44:21] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3xNJ annoyingly
[09:46:44] <FromDiscord> <impbox [ftsf]> dang
[09:46:55] <FromDiscord> <impbox [ftsf]> _needs to get better at this macro stuff_
[09:47:14] <FromDiscord> <Elegantbeef> Hmm wonder if we can push a `when compiles`
[09:47:40] <FromDiscord> <Ï€Ï„ (pi man)> In reply to @Elegantbeef "Yea follow https://github.com/saem/vscode-nim#debug": oh, this on is lldb not gdb
[09:47:43] <FromDiscord> <Elegantbeef> Mix a when compiles with a warning as error to get this behaviour
[09:54:37] <FromDiscord> <Elegantbeef> @impbox [ftsf]\: so yea this works but not that is smart or clean ðŸ˜€ https://play.nim-lang.org/#ix=3xNM
[09:54:58] <FromDiscord> <Ï€Ï„ (pi man)> sent a code paste, see https://play.nim-lang.org/#ix=3xNN
[09:55:06] <FromDiscord> <impbox [ftsf]> @ElegantBeef evil! I like it
[09:55:50] <FromDiscord> <Elegantbeef> Eh i want to make this a bit smarter
[09:55:56] <FromDiscord> <Elegantbeef> Atleast to reduce the amount of time spent on semming
[09:57:00] <FromDiscord> <impbox [ftsf]> i'm trying to add class constants to oolib, i figure they need to be methods for dynamic dispatch
[09:58:08] <FromDiscord> <Elegantbeef> Well this is a bit more sane since it's just the header now instead of the entire body https://play.nim-lang.org/#ix=3xNP
[09:58:47] <FromDiscord> <impbox [ftsf]> pretty cool!
[09:58:50] <FromDiscord> <Elegantbeef> Wait are you executing `nim-gdb.py` yourself?
[09:59:37] <FromDiscord> <Ï€Ï„ (pi man)> am I not supposed to?
[09:59:45] <FromDiscord> <Elegantbeef> Nope
[10:00:40] <FromDiscord> <Elegantbeef> Did you read the setup guide i linked?
[10:01:42] <FromDiscord> <Elegantbeef> I atleast dont think you're supposed to run the python file yourself
[10:02:59] <FromDiscord> <Elegantbeef> dont know what a class constant is so no clue what you mean ðŸ˜€â†µ(@impbox [ftsf])
[10:03:30] <FromDiscord> <impbox [ftsf]> i guess a constant that is specific to that class, rather than linked to an instance of that class
[10:03:58] <FromDiscord> <Ï€Ï„ (pi man)> In reply to @Elegantbeef "Yea follow https://github.com/saem/vscode-nim#debug": reading this again, looks like I need a second nim extension?
[10:04:14] <FromDiscord> <impbox [ftsf]> (edit) "class," => "class (and its children unless overriden),"
[10:04:24] <FromDiscord> <Elegantbeef> I just use that extension so idk ðŸ˜€
[10:04:25] <FromDiscord> <Ï€Ï„ (pi man)> also I can't find it through VSC
[10:05:24] <FromDiscord> <Elegantbeef> Well isnt a method going to give you a constant linked to the class?
[10:05:38] <FromDiscord> <impbox [ftsf]> that's the idea of using a method
[10:06:05] <FromDiscord> <Elegantbeef> I mean linked to an instance
[10:06:24] <FromDiscord> <impbox [ftsf]> hmm i see what you mean
[10:06:36] <FromDiscord> <impbox [ftsf]> yes, it is just a method
[10:06:37] <FromDiscord> <Elegantbeef> Like you cannot do `Banana.size` it's `Banana().size`
[10:06:52] <FromDiscord> <impbox [ftsf]> i just want to generate those methods
[10:07:52] <FromDiscord> <Elegantbeef> Ah ok so if there is no `myObject.size` you do `myObject.super.size` which does the same internally
[10:08:01] <FromDiscord> <Elegantbeef> So its a bunch of super calls all the way up ðŸ˜€
[10:08:39] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3xNR
[10:08:44] <FromDiscord> <impbox [ftsf]> something like this is what i'm going for
[10:09:22] <FromDiscord> <impbox [ftsf]> which works, just whinges about {.base.}
[10:11:00] <FromDiscord> <Elegantbeef> Yea so guess you get to use my silly work around untill someone suggests something better
[10:11:26] <FromDiscord> <impbox [ftsf]> aye =)
[10:12:28] <NimEventer> New Nimble package! htmlAntiCopy - Block copy of any text in HTML, see https://github.com/thisago/htmlAntiCopy
[10:12:47] <FromDiscord> <impbox [ftsf]> that looks like a terrible package D:
[10:12:58] <FromDiscord> <impbox [ftsf]> i want to copy text
[10:13:59] <FromDiscord> <Elegantbeef> Yea it's quite odd
[10:16:39] <FromDiscord> <Rika> its really easy to bypass anyway i assu,
[10:16:41] <FromDiscord> <Rika> assume
[10:17:10] <FromDiscord> <Rika> ah its server side
[10:17:11] <FromDiscord> <Rika> lmao
[10:17:34] <FromDiscord> <Rika> whats the point tho if you can just like
[10:17:45] <FromDiscord> <Rika> screenshot the text and then maybe if you really want OCR
[10:18:35] <FromDiscord> <Elegantbeef> Clearly it's for preventing people from cheating on exams ðŸ˜›
[10:19:07] <FromDiscord> <Rika> to prevent them from what, copying the text? what are they stupid to not know how to google or type?
[10:19:37] <FromDiscord> <Elegantbeef> Indeed!
[10:20:32] <FromDiscord> <Rika> damn
[10:32:10] <FromDiscord> <Ï€Ï„ (pi man)> hmm, ok, switched to lldb and it's better but not great
[10:33:14] <FromDiscord> <Elegantbeef> I havent used a debugger much so i sadly cannot help
[10:35:18] <FromDiscord> <Ï€Ï„ (pi man)> the local variables are still all T<umber>_â†µbut now there are static and globals (looks like the same list though) that are the global variables with the correct names but with extra stuff added to the name
[10:36:19] <FromDiscord> <Ï€Ï„ (pi man)> (edit) "T<umber>_â†µbut" => "T<number>_â†µbut"
[10:38:54] <FromDiscord> <Elegantbeef> Well due to how nim emits C code the symbols will not be 1\:1
[10:39:14] <FromDiscord> <Elegantbeef> Cause remember you can have infinite global scoped `thisT`
[10:40:33] <FromDiscord> <Rika> and C does not have overloading
[10:41:31] <madprops> I'm glad nim uses github for distribution, one account less to manage
[10:42:09] <FromDiscord> <Elegantbeef> Microsoft screams "huzzah" from the rooftops
[10:58:15] *** Joins: userj (~userjjjj@user/userj)
[10:58:44] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b008:864b:ef0a:309f:3e32:427b)
[11:20:02] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:40:25] *** Joins: max22- (~maxime@2a01cb0883359800f71e865f3b8a9569.ipv6.abo.wanadoo.fr)
[11:43:35] *** Joins: PersonMcGuy (~PersonMcG@2603-8080-700a-3700-6920-ec9f-e92b-9bc3.res6.spectrum.com)
[11:44:35] <PersonMcGuy> Hello everyone. I checked and didn't see anything, but I wanted to be sure: is there any proc like zeroMem that will fill with some arbitrary int instead of 0?
[11:45:55] <FromDiscord> <Elegantbeef> For what?
[11:46:02] <FromDiscord> <Elegantbeef> An array, a seq...?
[11:48:00] <PersonMcGuy> I guess just a pointer? I'm going off zeroMem's documentation:     copyMem(dest, source: pointer; size: Natural)
[11:48:18] <PersonMcGuy> Sorry, wrong one:    zeroMem(p: pointer; size: Natural)
[11:50:06] <FromDiscord> <Elegantbeef> Appears there is not
[11:50:48] <PersonMcGuy> Alright, just wanted to be sure
[11:50:51] <PersonMcGuy> Thanks
[11:52:10] <FromDiscord> <impbox [ftsf]> PersonMcGuy it'd be tricky because it doesn't know the size of each element
[11:52:30] <FromDiscord> <impbox [ftsf]> if you want to do it you'd probably better do a loop and set it
[11:53:07] <PersonMcGuy> I was thinking about copying a definition under system/memory.nim for nimSetMem and working with that
[11:54:29] <PersonMcGuy> I just thought it was odd that there wasn't an exported proc for it like there is for nimZeroMem -> zeroMem, but I barely know what I'm doing so I don't know lol
[11:54:53] <FromDiscord> <Elegantbeef> Well here's what i'd do https://play.nim-lang.org/#ix=3xO2
[11:55:11] <FromDiscord> <impbox [ftsf]> aye, that's what i was thinking but nicer
[11:55:13] <FromDiscord> <Elegantbeef> Is there a reason you're doing low level stuff? ðŸ˜€
[11:55:36] <FromDiscord> <Elegantbeef> Oh you had a nicer impl? \:P
[11:55:45] <FromDiscord> <impbox [ftsf]> no yours is nicer
[11:56:28] <PersonMcGuy> @Elegantbeef I'm probably out of my depth, but I'm trying to convert a C header to nim for the solana sdk 
[11:56:50] <PersonMcGuy> I tried searching to see if anyone else had done it or something similar, but I didn't find anything
[11:57:19] <FromDiscord> <Elegantbeef> Well the best way of learning to swim is to submerge your feet in concrete blocks and jump in a lake
[11:57:31] <PersonMcGuy> I like your implementation by the way. Is it okay if I use it?
[11:57:32] <FromDiscord> <Elegantbeef> Though now that i say that i think i've mistaken the best way to hide a body
[11:57:52] <PersonMcGuy> lol right? I just like to go straight at the code and see what happens
[11:58:06] <FromDiscord> <Elegantbeef> Absolutely not i shared it so we could admire my big brain ðŸ˜›
[11:58:16] <FromDiscord> <Elegantbeef> Yes you can of course use it
[11:58:28] <FromDiscord> <Elegantbeef> Where is my disclaimer of "If i share code anyone can use it"
[11:58:59] <FromDiscord> <Elegantbeef> Do you have a link to the header file?
[11:59:14] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3xO5 i was thinking more something like this where the cast is inside
[11:59:27] <FromDiscord> <impbox [ftsf]> mostly because i hate having to think about casting
[12:00:28] <FromDiscord> <Elegantbeef> I avoid raw pointers as much as possible since i view `ptr T` different to a ptr array
[12:00:59] <FromDiscord> <Elegantbeef> `createU` and it's friend `create` are quite nice though
[12:01:13] <FromDiscord> <Elegantbeef> a typed pointer is noice
[12:03:00] <FromDiscord> <impbox [ftsf]> PersonMcGuy, what's is the c code you're trying to imitate doing? maybe there's a nicer way in nim
[12:03:31] <PersonMcGuy> I'm trying to find a link on their github but it's not the same as the one from the release itself
[12:03:35] <FromDiscord> <Elegantbeef> a `template createPtrArray(T: typedesc, count: int): ptr UncheckedArray[T] = cast[ptr UncheckedArray[T]](create(T, count))` would be a nice little addition in some stdlib
[12:04:11] <FromDiscord> <Elegantbeef> Though i figure it's not overly needed so probably not \:D
[12:06:59] <PersonMcGuy> While I'm looking, the code that I was trying to port:
[12:07:02] <PersonMcGuy>  * Fill a byte string with a byte value
[12:07:02] <PersonMcGuy>  */
[12:07:03] <PersonMcGuy> static void *sol_memset(void *b, int c, size_t len) {
[12:07:03] <PersonMcGuy>   uint8_t *a = (uint8_t *) b;
[12:07:04] <PersonMcGuy>   while (len > 0) {
[12:07:04] <PersonMcGuy>     *a = c;
[12:07:05] <PersonMcGuy>     a++;
[12:07:05] <PersonMcGuy>     len--;
[12:07:06] <PersonMcGuy>   }
[12:07:06] <PersonMcGuy> }
[12:07:24] <PersonMcGuy> lol *)  is * )
[12:07:32] <FromDiscord> <Elegantbeef> Ok so that's identical to what we have
[12:07:38] <FromDiscord> <Elegantbeef> Plus you can use paste sites ðŸ˜€
[12:09:23] <PersonMcGuy> Ahhhh duh, I should have thought about that. Sorry.
[12:09:24] <PersonMcGuy> https://pastebin.com/LQ06i7EB
[12:14:53] <FromDiscord> <Elegantbeef> You're replicating this API in nim eh?
[12:15:17] <FromDiscord> <Elegantbeef> Cause if that's the case you dont need to use `ptr uint8` you can just use a `seq[uint8`
[12:16:06] <PersonMcGuy> Trying to at least.  I wanted to see if it would work because I would love to write stuff with the sdk with nim instead of C if possible.
[12:16:24] <PersonMcGuy> Though I'm worried about memory safety the more I think about it
[12:16:55] <FromDiscord> <Elegantbeef> Well that's why you use Nim's more safe tools where you can
[12:17:41] <FromDiscord> <impbox [ftsf]> if you're worried about memory safety, i wouldn't start by copying C =)
[12:18:05] <PersonMcGuy> Sorry, I think I meant more like GC stuff. I'm not really sure what's going to happen
[12:18:28] <FromDiscord> <Elegantbeef> In what way?
[12:19:26] <FromDiscord> <Elegantbeef> Reading this over `SolBytes` -\> `string` or \`seq[bytes]
[12:19:45] <FromDiscord> <Elegantbeef> A lot of the pointers can be `seq[uint8]` really
[12:19:47] <FromDiscord> <impbox [ftsf]> if you use `--gc:arc` you can work without a GC
[12:20:09] <FromDiscord> <Elegantbeef> And it's deterministic, you can expand the code to see the memory frees
[12:21:02] <FromDiscord> <Elegantbeef> One thing i dont get is how this API even works
[12:21:14] <PersonMcGuy> @impbox [ftsf] Yeah I was actually going to try that, but I was worried I might just be trying to stick a bandaid on the whole problem without fully understanding potential issues with GC stuff
[12:21:19] <FromDiscord> <impbox [ftsf]> blockchain magic?
[12:21:34] <PersonMcGuy> I'm not super experienced with low level programming in general
[12:22:30] <PersonMcGuy> lol pretty much, I barely understand what I'm looking at. I more so wanted to see if it was even possible before I just resigned to my fate with C.
[12:22:50] <FromDiscord> <impbox [ftsf]> well if you can do it in C, you can probably do it nicer in Nim =)
[12:23:40] <FromDiscord> <Elegantbeef> Well even if you are scared of the gc(you shouldnt be) you can reimplement the code 1\:1
[12:23:52] <FromDiscord> <Elegantbeef> So then it's just all pointers and smoke and mirrors or something like that ðŸ˜›
[12:24:48] <FromDiscord> <Elegantbeef> I dont imagine arc is cryptographically insecure, but i'm also not knowledgable in cryptography
[12:25:21] <PersonMcGuy> That's good to know. Here's hoping everything goes well. If so, I'll put this out on github so that someone can hopefully use this as a starting point
[12:26:36] <PersonMcGuy> Though I did have one more question. In the start of the header, they typedef'd a lot of things that have a nim equvialent, like "typedef signed char int8_t;"
[12:27:32] <PersonMcGuy> I'm assuming I would be okay to just use int8 for all those "int8_t"s right? I'm trying to copy things as closely as possible, but I figure there's not much point to having an intermediate type like that
[12:27:42] <FromDiscord> <Elegantbeef> Yea `int8` is 1 byte
[12:27:59] <FromDiscord> <Elegantbeef> If you notice they put asserts after, which is the important part
[12:28:12] <FromDiscord> <Elegantbeef> Since they're the same size they're golden
[12:28:39] <PersonMcGuy> Perfect! Thanks again to you both for all the help, I really appreciate it
[12:29:35] <FromDiscord> <Elegantbeef> This is going to be a rather cutdown clone if my brief glancing at it is any indication
[12:30:45] <PersonMcGuy> Yeah, there's a ton of stuff that I don't think I need with nim
[12:34:26] <FromDiscord> <Elegantbeef> Oh wait this depends on something, that's what i was missing
[12:34:48] <FromDiscord> <Elegantbeef> So the afforementioned string/seq[uint8] probably isnt true then
[12:42:57] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[12:43:55] *** Joins: greaser|q (greaser@antihype.space)
[12:59:22] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:05:53] <PMunch> Two new articles out: Multitasking in Nim: https://peterme.net/multitasking-in-nim.html and Asynchronous programming in Nim: https://peterme.net/asynchronous-programming-in-nim.html
[13:09:00] <FromDiscord> <haxscramper> What tool did you use to create timing diagrams?
[13:09:54] <PMunch> Vim
[13:09:59] <PMunch> I just typed them out :P
[13:13:19] <Zevv> no cps. missed chance pmunch! :)
[13:14:19] <PMunch> I said that there's room for more ;)
[13:14:48] <PMunch> Are there any good CPS libraries in Nim yet? Or is that still being worked on?
[13:14:56] <Zevv> no one is using that shit
[13:15:44] <Zevv> joking aside: leorize is in the progress of making a cps-oriented stdlib for IO and event queus and all that
[13:15:48] <Zevv> but it's not in a working state
[13:16:06] <Zevv> I have this little test project where I just push and poke at CPS to see where it can bring me and where it breaks: https://github.com/zevv/cpstest
[13:16:24] <Zevv> it has a basic async ipv4/ipv6 socket layer and HTTP/HTTPS server and client and some other stuff
[13:16:27] <Zevv> but it's the bare minimum
[13:17:49] <supakeen> clearly it should *all* be based on io_uring+bpf
[13:18:08] <Zevv> yeah until someone comes around complaining it doesn't run on windows, right
[13:18:14] <supakeen> :>
[13:18:27] <Zevv> lets be honest: overoptimization on these kind of things makes no sense for 99% of the cases
[13:18:43] <Zevv> how many apps did you ever deploy doing gigabytes of I/O on 100k clients
[13:19:16] <supakeen> you can make the same case for any asynchronous paradigm :)
[13:19:20] <Zevv> This thing is a complete epoll based async event queue mechanism for CPS. No dependencies execpt for posix. https://github.com/zevv/cpstest/blob/master/evq.nim
[13:19:33] <Zevv> I prefer simplicity and correctness over performance, at this time in the project
[13:19:34] <supakeen> yea, i've put it in my reading list for the weekend!
[13:21:04] <PMunch> I still struggle a bit to see how this differs from what I was doing with closure iterators.. But maybe I'm just being a dumbo, guess I should do some reading as well..
[13:22:02] <Zevv> PMunch: I struggle as well. I tried to get there with iterators a few times and always got stuck somewhere. I'd *love* to see someone make something similar to this based on iterators.
[13:23:00] <Zevv> The nice thing of CPS is that it actually mostly works these days. Once you're in 'cps land' you type your code just synchronously. No 'async', 'away', 'future[]', etc. You just do `let s = s.recvLine()` and the stuff does what's needed to get you a line
[13:24:30] <supakeen> i'm still confused by the abbreviation
[13:25:17] <PMunch> Hmm, is it just me or is `callback=` from asyncstreams completely broken?
[13:25:20] <FromDiscord> <Elegantbeef> Continuation Passing Style if my memory is right ðŸ˜€
[13:25:45] <Zevv> supakeen: https://raw.githubusercontent.com/disruptek/cps/master/docs/cps.svg
[13:26:00] <supakeen> yes, but generally CPS means passing callbacks explicitly
[13:26:11] <Zevv> we do that for you
[13:26:14] <FromDiscord> <Elegantbeef> I'm not allowed to talk about CPS directly after the incident
[13:26:18] <supakeen> exactly, this is implicit CPS
[13:26:23] <supakeen> which: cool
[13:27:20] <Zevv> the nice thing is: you still /can/ do that. You can just juggle with continuations and and use them as you see fit
[13:27:34] <Zevv> that's the added flexibility. It's a first class citizen, not something hidden in the compiler impl
[13:27:37] <PMunch> Hmm, I think I see how this differs quite a bit
[13:28:01] <supakeen> doesn't it make it hard to reason about where a race could happen
[13:28:15] <supakeen> if you don't explicitly show where it could happen (with await or a callback)
[13:28:26] <supakeen> actually i shouldn't ask all this before i actually read
[13:28:28] <supakeen> disregard
[13:28:33] <Zevv> will do
[13:30:45] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[13:31:21] <Zevv> note that this is concurrency, not paralellism
[13:31:31] <Zevv> when you go parallel, you need to sit on your hands before you type
[13:31:53] *** Joins: flynn (~mcbloch@user/flynn)
[13:32:20] <Zevv> ideally we'd like to get to some kind of share-nothing, golang channels like
[13:32:20] <supakeen> yes
[13:32:43] <supakeen> but even with concurrency you generally still share things such as database connections
[13:32:45] <Zevv> arc has the nice promise of allowing moves over threads, but in practice I didn't get this to work without tripping asan
[13:33:14] <supakeen> (sadly)
[13:33:16] <Zevv> supakeen: sure, but these can be abstracted away.
[13:33:30] <Zevv> You can send a query, stash the continuation and revive it when the response comes in
[13:33:41] <supakeen> yes but then you get into the bits i generally don't like which is that any concurrency runtime needs its own libraries
[13:33:59] <Zevv> you can't have your cake and eat it
[13:34:05] <supakeen> yea but it fragments :)
[13:34:12] <PMunch> Okay, so the callback of a FutureStream takes the stream itself, but I can't seem to create a valid signature for it. If I make the callback async it adds the Future[void] return type, but I need to be able to call read to get any data from it
[13:34:25] <PMunch> I guess waitfor would be safe in that context since I know it has data..
[13:34:57] *** Quits: userj (~userjjjj@user/userj) (Remote host closed the connection)
[14:07:23] <FromDiscord> <dom96> there are definitely many improvements to be made for FutureStream
[14:08:00] <FromDiscord> <dom96> (and possibly a redesign of its API, but it should sort of work at least :))
[14:20:11] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:21:19] *** Joins: flynn (~mcbloch@user/flynn)
[14:33:37] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:34:52] *** Joins: flynn (~mcbloch@user/flynn)
[14:35:47] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[14:36:53] *** Joins: xet7 (~xet7@user/xet7)
[14:44:07] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:45:13] *** Joins: flynn (~mcbloch@user/flynn)
[14:48:13] <FromDiscord> <hyu1996> why foo is not TestFoo https://media.discordapp.net/attachments/371759389889003532/883294801603203113/unknown.png
[14:49:51] <FromDiscord> <Rika> void is not a "type" per se
[14:49:59] <FromDiscord> <Rika> so it wont match that
[14:50:14] <FromDiscord> <Rika> : T usually means "actually returns something" so it cant be void
[14:52:15] <FromDiscord> <hyu1996> In reply to @Rika ": T usually means": soga, thx bro
[14:54:40] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 240 seconds)
[14:59:20] *** Joins: flynn (~mcbloch@user/flynn)
[15:08:00] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:09:07] *** Joins: flynn (~mcbloch@user/flynn)
[15:18:02] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:19:08] *** Joins: flynn (~mcbloch@user/flynn)
[15:30:29] <FromDiscord> <hyu1996> https://nim-lang.github.io/Nim/manual_experimental.html#void-type
[15:30:30] <FromDiscord> <hyu1996> The document says "aÂ voidÂ type cannot be inferred in generic code"
[15:34:45] <FromDiscord> <Rika> yes
[15:39:49] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[15:48:21] *** Quits: PersonMcGuy (~PersonMcG@2603-8080-700a-3700-6920-ec9f-e92b-9bc3.res6.spectrum.com) (Ping timeout: 256 seconds)
[15:53:26] <PMunch> @dom96, I was trying to respond to this and got stuck writing a proper callback: https://forum.nim-lang.org/t/8392
[15:53:31] <PMunch> Not sure if I like my solution either..
[15:54:30] <PMunch> Damn, 191 page hits for my async article already :P
[15:54:44] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:55:51] *** Joins: flynn (~mcbloch@user/flynn)
[15:56:22] <NimEventer> New post on r/nim by PMunch: Article series on multitasking in Nim, first installment: async, see https://reddit.com/r/nim/comments/ph39h4/article_series_on_multitasking_in_nim_first/
[16:06:02] <FromDiscord> <dom96> hmmm, there is a better way
[16:11:36] <FromDiscord> <dom96> The `callback=` is really just confusing it seems
[16:12:03] <FromDiscord> <dom96> PMunch: I replied to the thread
[16:24:17] <PMunch> Ah, yeah I would also do it like that. But I assumed they had wanted to use the callback for a specific reason
[16:28:08] <FromDiscord> <dom96> You should assume they don't have a good reason to do so ðŸ™‚
[16:29:32] <FromDiscord> <enthus1ast> never used callback= before, and i've written a lot of async code
[16:29:53] <FromDiscord> <dom96> That goes for most things. It's why I always ask people to describe their high level goal when they are asking a specific question of how to do x. Often they are following the wrong path.
[16:32:14] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:32:38] *** Joins: arkurious (~arkurious@user/arkurious)
[16:32:44] *** Quits: max22- (~maxime@2a01cb0883359800f71e865f3b8a9569.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:43:03] <FromDiscord> <Cark> @enthus1ast i've been giving a go at your service example, because my implementation silently fails, but it looks like oldwinapi doesn't compile anymore ? or maybe something wrong with my setup ?
[16:44:52] <FromDiscord> <Cark> trying to compile with oldwinapi, i get a crazy error stating that  2147746288 cannot be converted to a DWORD, which i beleive fits in a DWORD ><
[16:45:59] <FromDiscord> <Cark> then again DWORD is defined as int32 in oldwinapi, so obviously not
[16:53:40] <FromDiscord> <Cark> ah but it works with winim and some slight adjustments
[17:05:47] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[17:06:53] *** Joins: flynn (~mcbloch@user/flynn)
[18:05:58] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:07:45] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[18:07:53] *** Joins: rockcavera (~rc@192.12.112.97)
[18:07:53] *** Quits: rockcavera (~rc@192.12.112.97) (Changing host)
[18:07:53] *** Joins: rockcavera (~rc@user/rockcavera)
[18:14:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 244 seconds)
[18:14:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:16:12] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[18:26:49] <FromDiscord> <Cark> my issue is that adding --threads:on while compiling makes it crash ... no idea how to fix this
[18:30:53] <FromDiscord> <Cark> would it be possible to sidestep the nim threading facilities and use platform threads directly ? would this expose me to subtle bugs ?
[18:31:24] <FromDiscord> <Cark> (by not using --threads:on)
[18:38:46] <FromDiscord> <treeform> I tried that, I got mystery bugs, decided to do other stuff.
[18:40:17] <FromDiscord> <Cark> mhh damn that's a show stopper... at some point i'll need to serve some gui via http for that windows service, and i guess there is no doing this without threads
[18:40:40] <FromDiscord> <Cark> outside writing my own http server, which i don't want to do =)
[18:48:19] *** Joins: max22- (~maxime@2a01cb0883359800fe0ea54f1b68cc60.ipv6.abo.wanadoo.fr)
[18:53:02] <FromDiscord> <enthus1ast> @Cark\: try to use winim
[18:53:17] <FromDiscord> <enthus1ast> Could just work
[18:53:33] <FromDiscord> <Cark> @enthus1ast I did, there is a PR on your project about it
[18:53:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[18:53:46] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[18:53:53] <FromDiscord> <enthus1ast> Yeah platform threads could work
[18:54:08] <FromDiscord> <enthus1ast> Ah nice
[18:54:16] <FromDiscord> <Cark> i'll give it a try, thanks =)
[18:54:43] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:55:27] <FromDiscord> <enthus1ast> Will merge it later when not on mobile
[18:55:27] <FromDiscord> <dom96> @Cark what are you working on?
[18:56:04] <FromDiscord> <enthus1ast> BUT also consider NSSM as your service, works quite nicely
[18:56:19] *** Gustavo6046_ is now known as Gustavo6046
[18:56:53] <FromDiscord> <enthus1ast> Then you don't have the hassle working with the service stuff on windows and just write normal binaries
[18:56:55] <FromDiscord> <Cark> @dom96 pretty simple spying program to instill fear in my daughter, I did catch her talking to strangers on discord, she's too young for that.... but the real goal is to evaluate nim, so I go as deep as possible into system programming, threading and stuff
[18:57:44] <FromDiscord> <enthus1ast> Better talk than hack imho ðŸ˜‰
[18:57:59] <FromDiscord> <Cark> @enthus1ast i'm trying to learn how to effectively use nim
[18:58:08] <FromDiscord> <Cark> so i'll go the hard way
[18:58:40] <FromDiscord> <dom96> Wait, are you serious or joking. Spying on your daughter is a really bad idea
[18:59:10] <FromDiscord> <Cark> there is no secret about it...and she's 8
[18:59:24] <FromDiscord> <Cark> there will be a toast notification too
[19:00:34] <FromDiscord> <Cark> i don't even intend to acdtually spy, just show that i can =)
[19:00:37] <FromDiscord> <dom96> I see, that's better, but then your daughter will just find a different way to use Discord
[19:00:50] <FromDiscord> <dom96> and trust you less (which is why this is a bad idea)
[19:01:08] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[19:01:09] <FromDiscord> <Cark> she would trust less if i was doing it secretly
[19:01:36] *** Joins: vicfred (~vicfred@user/vicfred)
[19:01:40] <FromDiscord> <Cark> we had a big talk about discord, she knows she messed up, and she's ok with it
[19:04:36] <FromDiscord> <Cark> real end goal is to build callshop point of sales software, have the telephony routing and messaging going through a windows service
[19:05:16] <FromDiscord> <Cark> that's a little too big to just go at it with nim without prior experience
[19:05:40] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[19:06:44] *** Joins: sdmcallister (~sdmcallis@cpe84948cd54813-cm84948cd54810.cpe.net.cable.rogers.com)
[19:08:52] *** Quits: sdmcallister (~sdmcallis@cpe84948cd54813-cm84948cd54810.cpe.net.cable.rogers.com) (Client Quit)
[19:10:51] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 244 seconds)
[19:30:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:31:17] *** Joins: flynn (~mcbloch@user/flynn)
[19:35:19] <FromDiscord> <garuse> Hi! I mostly work from terminal (tmux) and it would be nice if i  could access nim documentation from there. Is there a nim tool/pkg that can search and print documentation to stdout?
[19:38:55] <FromDiscord> <enthus1ast> @garuse\: maybe use links or w3m
[20:07:42] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[20:28:50] <FromDiscord> <moein> is there any tutorial on how to compile and use a nim app in android? I wrote a simple text search functioanlity and i'd like to use it an android project
[20:29:00] <FromDiscord> <moein> (edit) "functioanlity" => "functionality"
[20:29:55] <FromDiscord> <Rika> i was doing this right now
[20:29:59] <FromDiscord> <Rika> doing that
[20:30:11] <FromDiscord> <Rika> reading https://github.com/yglukhov/jnim and https://github.com/GordonBGood/NimHelloJNI/
[20:30:13] <nrds> <12R2D299> 4GitHub: 7"Nim - Java bridge"
[20:38:47] <FromDiscord> <Ayy Lmao> Does anyone with discord developer with experience know if it is possible to send audio from your computer to a discord bot? I've been looking into https://github.com/krisppurg/dimscord but it looks like the audio stuff isn't complete yet.
[20:38:50] <nrds> <12R2D299> 4GitHub: 7"A Discord Bot & REST Library for Nim."
[20:39:44] <FromDiscord> <moein> In reply to @Rika "reading https://github.com/yglukhov/jnim and https:": I guess i did not explain good enough, by nim app i mean exposing a nim proc to android and using it in a android project that's written with kotlin.
[20:39:47] <nrds> <12R2D299> 4GitHub: 7"Nim - Java bridge"
[20:40:01] <FromDiscord> <Rika> In reply to @moein "I guess i did": yes that is still relevant
[20:40:05] <FromDiscord> <Rika> that is what i am doing as well
[20:40:22] <FromDiscord> <Rika> `Nim Hello JNI is an Android sample that uses JNI to call C code from a Android Java Activity, with the C code generated from the Nim computer language instead of directly from C source files.`
[20:46:04] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[20:47:10] *** Joins: flynn (~mcbloch@user/flynn)
[20:50:15] <FromDiscord> <Ayy Lmao> sent a code paste, see https://paste.rs/N53
[20:50:25] <FromDiscord> <Ayy Lmao> Is there some downside to this that I'm not thinking of?
[20:54:44] <FromDiscord> <Yardanico> > converter
[20:54:47] <FromDiscord> <Yardanico> that's why :)
[20:55:15] <FromDiscord> <Yardanico> converters can result in some really weird interactions in the code, and make your compilation errors really confusing sometimes
[20:55:50] <FromDiscord> <Rika> ~~i mean look at js~~
[20:56:37] <FromDiscord> <Rika> get will raise when none, so you might turn something that doesnt raise into something that does
[20:56:54] <FromDiscord> <Ayy Lmao> Converters probably aren't the best way of dealing with it, but I was just using it as an example to show how it would work. I've just seen a few languages that have optional values as more of a builtin type and streamline dealing with them
[20:57:06] <FromDiscord> <Yardanico> nim might get a built-in Opt type
[20:57:17] <FromDiscord> <Yardanico> also, converters are only used thrice in the whole nim stdlib
[20:57:25] <FromDiscord> <Rika> ooh where
[20:57:43] <FromDiscord> <Ayy Lmao> In reply to @Yardanico "nim might get a": That would be really cool
[20:57:47] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/blob/devel/lib/js/dom.nim#L1678 https://github.com/nim-lang/Nim/blob/devel/lib/pure/httpcore.nim#L172 https://github.com/nim-lang/Nim/blob/devel/lib/system/widestrs.nim#L53
[20:57:55] <FromDiscord> <Yardanico> maybe more, but github only showed these
[21:01:46] <FromDiscord> <Ayy Lmao> I'm also not a huge fan of having to specify the type when using `none`
[21:02:31] <FromDiscord> <Ayy Lmao> I suppose it's necessary if you want to use type inference, but other than that it seems clunky
[21:04:40] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:05:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:06:16] *** Joins: flynn (~mcbloch@user/flynn)
[21:12:00] <FromDiscord> <Rika> i keep on saying its a side effect of the lack of "backward inference" but im not sure if thats the only reason
[21:14:24] <FromDiscord> <Yardanico> In reply to @Rika "i keep on saying": Even with return type interference it will only be possible if you assign to already existing variables, otherwise you'll have to specify the type anyway
[21:14:52] <FromDiscord> <Rika> or arguments
[21:15:04] <FromDiscord> <Rika> theyre possible with arguments i would assume
[21:15:10] <FromDiscord> <Yardanico> and for existing variables it's really easy to just make a none template overload
[21:15:12] <FromDiscord> <Rika> unless there are many matching arguments ofc
[21:27:56] <FromDiscord> <Ayy Lmao> In reply to @Yardanico "Even with return type": I think that is the case where it would be nice to have it. Specifically for dealing with existing variables and early `return none` in functions that return optional values.
[21:28:10] <FromDiscord> <Yardanico> you can just use "return" in this case fyi
[21:28:19] <FromDiscord> <Yardanico> default Option value is none
[21:28:27] <FromDiscord> <Ayy Lmao> Interesting, I didn't realize that
[21:28:36] <FromDiscord> <Ayy Lmao> That makes things a bit easier
[21:28:57] <FromDiscord> <Ayy Lmao> I've been doing return none(whatever) this whole time haha
[21:51:18] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b008:864b:ef0a:309f:3e32:427b) (Quit: Leaving)
[21:51:25] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:52:32] *** Joins: flynn (~mcbloch@user/flynn)
[22:12:34] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 252 seconds)
[22:17:09] *** Joins: flynn (~mcbloch@user/flynn)
[22:27:12] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:28:18] *** Joins: flynn (~mcbloch@user/flynn)
[22:49:32] <FromDiscord> <Neko~Neko~ni> sent a code paste, see https://play.nim-lang.org/#ix=3xR3
[22:51:29] <FromDiscord> <Yardanico> what version is your gcc?
[22:51:31] <FromDiscord> <Yardanico> g++ -v
[22:51:40] <FromDiscord> <Neko~Neko~ni> lemme check\
[22:51:54] <FromDiscord> <Neko~Neko~ni> 4.4.1
[22:51:58] <FromDiscord> <Yardanico> yeah, that's very old
[22:52:02] <FromDiscord> <Yardanico> gnu++14 requires gcc 6.1 at least
[22:52:17] <FromDiscord> <Yardanico> i assume you're using mingw?
[22:52:23] <FromDiscord> <Neko~Neko~ni> Yeas
[22:52:28] <FromDiscord> <Neko~Neko~ni> (edit) "Yeas" => "Yes"
[22:52:48] <FromDiscord> <Yardanico> then you can install https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/mingw-w64-v9.0.0.zip/download and add it to PATH
[22:52:50] <FromDiscord> <Neko~Neko~ni> so i should update
[22:52:52] <FromDiscord> <Yardanico> and remove the other mingw installation from path
[22:53:44] <FromDiscord> <Neko~Neko~ni> i don't think i installed g++ myself,or so i think.desn't nim install that stuff with its installation
[22:53:46] <FromDiscord> <Neko~Neko~ni> ?
[22:53:58] <FromDiscord> <Neko~Neko~ni> (edit) "think.desn't" => "think.doesn't"
[22:54:25] <FromDiscord> <Yardanico> how did you install nim?
[22:54:42] <FromDiscord> <Neko~Neko~ni> from zip file i think
[22:54:53] <FromDiscord> <Neko~Neko~ni> the official installation process
[22:54:55] <FromDiscord> <Yardanico> hm, weird, the shipped compiler should've been updated there
[22:55:24] <FromDiscord> <Yardanico> lemme check
[22:56:21] <FromDiscord> <Yardanico> no, the mingw shipped with the nim is the last one, what nim version did you install?
[22:56:31] <FromDiscord> <Yardanico> or maybe you have an older mingw install from some time before?
[22:56:31] <FromDiscord> <Neko~Neko~ni> nvm i think this was problem on my end.i had Falcon C++ installed which also installed gcc and g++.
[22:56:34] <FromDiscord> <Yardanico> yeah
[22:56:38] *** Quits: max22- (~maxime@2a01cb0883359800fe0ea54f1b68cc60.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:56:43] <FromDiscord> <Neko~Neko~ni> Thanks anyway
[22:56:55] <FromDiscord> <Yardanico> nim windows installer downloads mingw with gcc 11.1
[22:58:12] <FromDiscord> <Neko~Neko~ni> removing the g++,gcc from PATH should do trick(i mean the gcc,g++ that was bundles with falcon)
[22:58:26] <FromDiscord> <Neko~Neko~ni> (edit) "bundles" => "bundled"
[22:58:27] <FromDiscord> <Yardanico> yes
[22:58:54] <FromDiscord> <Yardanico> it's just 1 folder though, since in gcc/mingw all binaries are kept in the single "bin" folder, so just check all directories you have in your path and remove that one
[22:59:43] <FromDiscord> <Neko~Neko~ni> And wow my PATH variable is a mess.lol.Thanks for the help
[23:10:46] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[23:11:53] *** Joins: flynn (~mcbloch@user/flynn)
[23:26:08] *** Joins: max22- (~maxime@2a01cb08833598002548cafda19f7929.ipv6.abo.wanadoo.fr)
[23:37:28] *** Quits: NimEventer (~NimBot@static.224.140.47.78.clients.your-server.de) (Remote host closed the connection)
[23:37:35] *** Joins: NimEventer (~NimBot@static.224.140.47.78.clients.your-server.de)
