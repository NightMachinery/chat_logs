[00:00:20] <opalvaults[m]> let me push my nyxt config so you can see that as well
[00:04:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:04:57] <opalvaults[m]> https://github.com/opalvault/dotfiles/blob/master/Nyxt.org
[00:05:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[00:08:43] <opalvaults[m]> waleee: also this -vvv option is incredibly helpful thanks :D
[00:08:48] <waleee> opalvaults[m]: I noticed something when looking at the raw .org file for you config, you don't set a (in-package :nyxt) (or 'nyxt if you prefer it)
[00:09:27] <opalvaults[m]> (in-package :nyxt) is in the Functions section, I'll move it up to the top
[00:09:29] <opalvaults[m]> thanks for helping btw
[00:12:11] <waleee> well, wait until after it you get it working :P
[00:16:22] <waleee> opalvaults[m]: if you keep having issues there's always the nuclear option and moving it entirely into guix-land like ambrevar did, https://gitlab.com/ambrevar/dotfiles
[00:17:08] <opalvaults[m]> okay, so I've made a little progress. I was unable to load /home/opal/.config/nyxt/my-slink.lisp from Nyxt. No matter how I did the paths Nyxt would not pick up on it with (load-after-system :slynk "path/to/my-slink.lisp)
[00:17:26] <opalvaults[m]> but! I was able to get slynk to load into Nyxt
[00:17:49] <opalvaults[m]> (in-package :nyxt)
[00:17:49] <opalvaults[m]> (load "~/quicklisp/setup.lisp")
[00:17:49] <opalvaults[m]> (ql:quickload 'slynk)
[00:18:11] <opalvaults[m]> and then I've moved the (define-command-global start-slink ...) into the init.lisp
[00:18:47] <opalvaults[m]> and now when I do M-x start-slynk it works
[00:19:33] <opalvaults[m]> aartaka: maybe you can possibly weight in if that is an intended way to use quicklisp with Nyxt
[00:20:29] <waleee> opalvaults[m]: fileesystem paths in cl is a bit wonky, there's a helper called nyxt-init-file that would have transformed that (load-after...) into (load-after-system :slynk (nyxt-init-file "my-slynk.lisp"))
[00:20:30] <opalvaults[m]> and I can confirm I am able to hook into slynk with M-x sly connect localhost 4006
[00:22:47] <opalvaults[m]> waleee: i'm unsure I understand. Which load-after are you referring to when you say nyxt-init-file would have transformed (load-after..) into (load-after-system :slynk (nyxt-init-file "my-slink.lisp"))
[00:23:46] <opalvaults[m]> i only ask so that maybe I'm able to clarify the documentation for future folks
[00:24:02] <waleee> load-after-system, but I was trying to avoid writing out the entire function
[00:24:44] <waleee> well for the user logs then, this channel isn't logged
[00:25:09] <opalvaults[m]> i have Matrix so it's logged on my local machine
[00:25:49] <opalvaults[m]> insofar that I can scroll backup, however I meant that maybe I could clarify in the developer documentation
[00:26:20] <opalvaults[m]> because the method used to load in my-slink.lisp doesn't seem to work correctly? Unless I've misconfigured
[00:27:05] <waleee> opalvaults[m]: found this issue, https://github.com/atlas-engineer/nyxt/issues/1916
[00:29:50] <waleee> (... which documents this problem)
[00:30:31] <opalvaults[m]> hmm, that appears to be the same issue I've run into.
[00:30:31] <waleee> although as you said and mentioned in the issue, it the dev README.org needs updating
[00:30:44] <waleee> oops. s/it//
[00:31:06] <opalvaults[m]> before I do a pull request for that, is the way I have done it with loading ~/quicklisp/setup.lisp and then ql:quickload 'slynk the best way to do this?
[00:32:16] <waleee> not sure if there's a better way, I do a source build so I don't encounter this
[00:32:47] <opalvaults[m]> ah, gotcha!
[00:38:37] <waleee> aartaka is somewhere UTC+3 or a more eastward timezone I think so he might have gone to bed
[00:39:23] <waleee> (he do use guix so he might have better input on that)
[00:44:23] <aartaka> opalvaults[m]: load-after-system uses quicklisp if it's available. Should work if you put it after the quicklisp loading.
[00:45:17] <opalvaults[m]> okay, i'll test that out then
[00:47:46] <aartaka> opalvaults[m]: The best way to manage Nyxt deps on Guix is to install those as Guix packages â€” Nyxt will find those just fine. Installing cl-slynk should save you all these rituals of setting quicklisp up :)
[00:50:03] <opalvaults[m]> oh?
[00:50:12] <opalvaults[m]> that makes sense. I've been meaning to switch to emacs for this as well..
[00:59:24] <opalvaults[m]> Could not load the init file: Couldn't load "~/.config/nyxt/my-slynk.lisp":
[00:59:24] <opalvaults[m]>                               file does not exist.
[01:00:29] <opalvaults[m]> So I have cl-slynk installed, I have
[01:00:29] <opalvaults[m]> (in-package :nyxt)
[01:00:29] <opalvaults[m]> (load "~/quicklisp/setup.lisp")
[01:00:29] <opalvaults[m]> (ql:quickload 'slynk)
[01:00:31] <waleee> did you try the nyxt-init-file trick?
[01:00:58] <waleee> ah
[01:01:00] <opalvaults[m]> What is the nyxt-init-file trick? The documentation in the describe doesn't give syntax
[01:01:57] <waleee> it insert's a cl friendly path to init.lisp (assuming you have all nyxt related files in ~/.config/nyxt)
[01:02:19] <opalvaults[m]> so just doing (nyxt-init-file) will suffice? Let me try
[01:02:45] <waleee> opalvaults[m]: (nyxt-init-file "my-slynk.lisp")
[01:05:10] <opalvaults[m]> waleee: That did the trick. I'll update the documentation.
[01:05:23] <opalvaults[m]> Thank you :)
[01:05:37] <opalvaults[m]> ah dangit
[01:06:16] <opalvaults[m]> nope, it did not load in my-slink.lisp :(
[01:06:40] <opalvaults[m]> wait lemme try something else
[01:07:17] <waleee> just checkingyou did't
[01:08:39] <opalvaults[m]> (load-after-system :slynk (nyxt-init-file "my-slink.lisp"))
[01:08:48] <waleee> * just write (nyxt-init-file "my-slynk.lisp") instead of (load-after-system :slynk (nyxt-init-file "my-slink.lisp")
[01:08:55] <opalvaults[m]> is the trick
[01:09:24] <opalvaults[m]> just writing (nyxt-init-file "my-slink.lisp") didn't load the command into M-x or (interactive) in emacs-speak
[01:09:46] <waleee> no, it just inserts the correct path for cl
[01:12:23] <opalvaults[m]> okay so in total the declarations needed to get from point A -> B were:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/4f2e94f0e477a88181294466be2adb126eb9adeb)
[01:12:45] <waleee> opalvaults[m]: in general you can't depend on eg ~ expanding to the expacted path when loading stuff in cl
[01:13:06] <opalvaults[m]> :(
[01:13:26] <opalvaults[m]> is ~ not posix?
[01:13:41] <waleee> to be fair it *is* a shell convention, not a general programming convention
[01:14:19] <waleee> I don't remember if eg python handles it in the same way as sh
[01:14:38] <opalvaults[m]> Python allows for ~
[01:15:05] <opalvaults[m]> it's a much better syntax tbf than having to specify absolute paths, with relative paths being a close second but those are nebulous imo
[01:17:18] <opalvaults[m]> but that's neither here nor there. I'll get used to it
[01:17:41] <opalvaults[m]> does CL understand $HOME?
[01:17:51] <opalvaults[m]> or any environmental variables?
[01:18:18] <waleee> uiop (a package) understands them
[01:19:33] <opalvaults[m]> I'm a bit surprised the official way to deal with dependencies is to install them with guix install, but the official way of installing Nyxt is not by Guix install?
[01:20:36] <opalvaults[m]> as far as Guix is concerned anyways.
[01:23:06] <waleee> the instruction in the developer readme to use the .scm in build-scripts is to enable building from the git repo with guix
[01:24:30] <waleee> (excuse the sluggish replies, I'm eating insert-generic-cheeze-snack and type doing the finger dance with my left hand)
[01:24:52] <opalvaults[m]> Oh no worries! Thank you for the information! :)
[01:25:34] <opalvaults[m]> I'm gonna make a pull request with what worked for me. Maybe someone can provide a counter to why it wouldn't work in other scenarios. But I'm adding the (load-after-system...(nyxt-init-file..))
[01:26:09] <opalvaults[m]> I wonder if there is an environmental variable that Nyxt could follow in terms of the quicklisp installation dir
[01:26:41] <opalvaults[m]> since ~/quicklisp/setup.lisp is obviously going to be unreliable
[01:27:26] <waleee> it works in some places
[01:28:03] <waleee> (with some functions)
[01:29:06] <waleee> the asdf stuff mentioned in the github issue is related to tha
[01:29:10] <waleee> +t
[01:29:53] <waleee> * the quicklisp paths and other paths to source asdf can find
[01:33:32] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:38:40] <pjb> opalvaults[m]: CL has (user-homedir-pathname) ; it may be initialized from the HOME environment variable on implementations working on posix systems.
[01:44:12] <opalvaults[m]> excellent, it appears (load (merge-pathnames #p"quicklisp/setup.lisp" (user-homedir-pathname))) would work then
[01:44:43] <opalvaults[m]> and it evaluates as T in nyxt so I assume that's basically saying "yes, that file exists, loading it"
[01:45:36] <opalvaults[m]> unsure what #p means however
[01:57:10] <pjb> opalvaults[m]: #P<<expression>> is equivalent to #.(parse-namestring '<<expression>>), except that #P is not affected by *read-eval*.
[01:59:44] <opalvaults[m]> hmm, so it has nothing to do explicitely with path pjb?
[01:59:59] <pjb> parse-namestring produces a pathname.
[02:00:06] <opalvaults[m]> ah!
[02:00:06] <pjb> it's rather explicit.
[02:00:12] <opalvaults[m]> okay, sorry, and thank you for the clarification
[02:00:58] <opalvaults[m]> Looks like that's a pretty reliable method for using whatever the host OS filesystem hierarchy reflects
[02:33:56] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Quit: later)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:53] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:45:27] <opalvaults[m]> lagash: What I ended up doing is what aartaka mentioned, which was inserting those two functions (set-url, and set-url-new-buffer) in my init.lisp swapping the sources. Now when I attempt to open a new URL bookmarks is listed first.
[03:45:58] <opalvaults[m]> waleee, pjb , thanks as well for your help in troubleshooting sly/slynk
[03:46:02] <opalvaults[m]> :)
[03:46:12] <opalvaults[m]> and for general common-lisp advice.
[04:16:40] <opalvaults[m]> aartaka: this is interesting: https://github.com/CommonDoc/codex -- A documentation generator, using CL. Would someone be something Nyxt could leverage?
[04:16:57] <opalvaults[m]> s/someone/this
[04:20:34] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[04:25:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:31:57] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[04:38:35] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:28:31] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[05:41:14] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:43:43] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[05:57:50] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:11:07] *** Joins: taiju (~taiju@47.177.138.210.rev.vmobile.jp)
[07:01:55] *** Quits: taiju (~taiju@47.177.138.210.rev.vmobile.jp) (Read error: Connection reset by peer)
[07:02:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[07:07:37] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:53:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[07:55:55] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:45:55] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[10:09:01] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Ping timeout: 250 seconds)
[10:48:04] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:16:00] *** Joins: shka (~herr@109.231.0.226)
[11:45:06] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[11:45:26] <aartaka> opalvaults[m]: Codex looks interesting. Not sure how to integrate it with our `describe-*` commands
[11:45:42] <aartaka> , though.
[11:48:42] *** Joins: ano (~ano@user/ano)
[15:47:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:59:00] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[16:04:05] *** Joins: ano (~ano@user/ano)
[16:17:21] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[17:00:33] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:02:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:16:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:18:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:19:29] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:43:26] *** Joins: ardon (~user@user/ardon)
[18:48:54] <ardon> I'm trying to make a custom mode instantiation add a resource-request-hook on the buffer it's activated on by including `(hooks:add-hook (request-resource-hook (buffer mode)) (make-handler-resource #'my-handler))' on said custom's constructor, but if I try to modify the request-data in that handler, my Nyxt freezes without any errors. In short, can I add `request-resource-hook's on a per-mode basis or is this not supported?
[19:03:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[19:04:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:47:15] <aartaka> ardon: you can look at blocker-mode definition and see how it's done there. Right now I can't see any problem in what you describe. It won't hurt if you provide the definition of your mode and handler :)
[19:49:33] <ardon> aartaka: I was just going to mentioned blocker-mode :p , the handler works fine when I invoke the mode from the command prompt. I just have to reload the page and the change on the request data (a redirect) gets applied. I probably should have mentioned the freeze happens when applying this mode to auto-mode.
[19:50:30] <aartaka> ardon: Hmmmmm, that feels like a bug.
[19:51:20] <aartaka> ardon: So Nyxt hangs when your mode is enabled on page load by auto-mode, right?
[19:54:36] <ardon> aartaka: Yes, so basically I've come up with a custom mode that applies URL redirects by leveraging auto-mode. So each auto-mode rule will instantiate this custom mode with this new mode. Then, in this custom's mode constructor I add the aforementioned request resource hook handler, which tries to modify the request data with the new URL to redirect to.
[19:55:02] <ardon> s/with this new mode/a new URL mapping/
[19:56:44] <ardon> aartaka: And the redirect itself seems to work, as when I force kill the Nyxt window I get a "'Nyxt: Nyxt - <redirect-url>...' is not responding.  Would you like to kill it? (y or n) y" on EXWM, I just can't understand why it happens.
[19:58:54] <aartaka> ardon: Why not just use one handler with a map from one URL to another?
[19:59:44] <aartaka> ardon: While I more or less understand what you're doing, I'd still like to look at the code, as language is insufficient, when we talk of hooks :D
[20:00:22] <ardon> I'll send you the link privately :). Thanks for helping me out!
[20:01:06] <aartaka> ardon: And I'll be AFK for an hour or so, but will definitely get back to your problem. And, if you don't mind, please, open a GitHub issue, as this seems to be a bug :)
[20:01:53] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[20:03:22] *** Joins: amk (~amk@109.255.169.126)
[21:00:02] <lagash> Merry Christmas everyone!
[21:00:37] <lagash> opalvaults[m]: honestly the sources list there should be refactored out - actually, most of set-url etc should, I'm rather annoyed at all this code duplication..
[23:04:14] <opalvaults[m]> You'd know more than me regarding that stuff lagash . It was just a hack to get it working.
[23:04:28] <opalvaults[m]> also merry christmas :)
[23:15:42] <waleee> (christmas-celebration-date-heretics-p)
[23:15:44] <waleee> T
[23:16:25] <waleee> jokes aside, merry christmas to everyone who celebrate the holiday today
[23:22:33] * aartaka celebrates Christmas on 7th of January *_*
[23:27:39] <waleee> your christmas gift giver has a pretty badass name as compensation for the historic calendar mishap
[23:28:15] <opalvaults[m]> found how that the keepass interface works with wl-clipboard (a wayland alternative to xclip)
[23:28:52] <opalvaults[m]> apparently keepassxc-cli's 'clip' picks on up on, so no need for extra configuration afaict
[23:29:06] <opalvaults[m]> s/on up on/ up on it
