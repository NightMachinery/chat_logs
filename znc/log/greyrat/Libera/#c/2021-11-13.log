[00:00:02] <candide> nomagno: no output: a = 5
[00:00:37] <nomagno> Thats's what I mean ^
[00:00:57] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:01:02] <fizzie> I think that's from gdb `info locals`.
[00:01:46] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[00:02:06] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[00:02:39] <roxlu> am I correct that MSVC doesn't have support for c11 threads.h ?
[00:02:51] <sham1> thrd
[00:03:11] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[00:03:24] <roxlu> ?
[00:03:39] *** Quits: acaciause (~acaciause@cpc140764-burn9-2-0-cust788.10-1.cable.virginm.net) (Quit: Konversation terminated!)
[00:03:59] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:bc25:5662:e421:bb76) (Quit: This computer has gone to sleep)
[00:04:11] *** Joins: Klinda (~superleag@user/klinda)
[00:04:48] <fizzie> nomagno: https://0x0.st/-Ro5.txt -- adding a breakpoint programmatically at the last statement of main left as an exercise for the reader.
[00:08:38] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Ping timeout: 260 seconds)
[00:08:40] *** Quits: Alhazred (~Alhazred@86.106.74.46) (Ping timeout: 268 seconds)
[00:09:07] <chiselfuse> How can I make something fail to compile based on an #if conditional?
[00:09:25] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[00:10:28] <fizzie> #if expression \n #error "too bad" \n #endif
[00:11:22] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[00:11:52] <fizzie> A conforming implementation "shall not successfully translate a preprocessing translation unit containing a `#error` preprocessing directive unless it is part of a group skipped by conditional inclusion" (C11 4p4).
[00:13:42] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[00:15:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:17:30] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[00:23:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[00:24:09] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[00:24:55] *** Joins: X-Scale` (~ARM@46.50.4.208)
[00:26:55] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[00:27:04] *** Joins: mimmy (~mimmy@72.142.88.18)
[00:27:59] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[00:29:08] *** X-Scale` is now known as X-Scale
[00:30:49] *** Quits: jurjen (~jurjen@31-161-184-96.mobile.kpn.net) (Read error: Connection reset by peer)
[00:32:52] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[00:33:06] <De4nWhit3> Hello everyone.
[00:33:51] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:34:35] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 264 seconds)
[00:35:10] <mplio> hi
[00:36:10] *** Joins: jurjen (~jurjen@31-161-184-96.mobile.kpn.net)
[00:36:45] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[00:36:51] *** Quits: reset (~reset@user/reset) (Quit: reset)
[00:42:35] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[00:42:43] *** Parts: kuoi (~kuoi@109.175.166.58) ()
[00:46:06] *** Joins: AsenMx (~AsenMx@user/asenmx)
[00:47:56] <nortoh> hi mpliol
[00:49:43] *** Joins: kuoi (~kuoi@109.175.166.58)
[00:50:28] <nightstrike> I'm confusing myself on some old legacy code...  I need an idiot check on implicit casting...    unsigned long long a, b; unsigned int c; unsigned int * d;       *d += (unsigned int)(a - b) / c;    /// What converts to what where?
[00:50:47] <nightstrike> Is this the channel with an explain bot command that pulls it apart?
[00:51:13] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 268 seconds)
[00:51:21] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[00:53:30] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[00:54:22] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[00:56:39] <nomagno> https://en.m.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B
[00:56:39] <nomagno> `In both C and C++, one can define nested struct types, but the scope is interpreted differently: in C++, a nested struct is defined only within the scope/namespace of the outer struct, whereas in C the inner struct is also defined outside the outer struct.`
[00:56:50] <nomagno> This sounds made up. How can I actually verify this behaviour with code? Because I can't figure it out
[00:57:00] *** Joins: mimmy (~mimmy@72.142.88.18)
[00:57:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[00:58:46] <caze> nomagno: You can't verify anything in C with code.
[00:59:16] <caze> ,cc -w int i = 0; i = i++;
[00:59:18] <candide> caze: no output: i = 0
[00:59:22] <nightstrike> nomagno: it means that if you do..   struct A { ... struct B { ... }};  Then you can use "struct B" outside of "struct A".  Whereas in C++, you can't.
[00:59:31] <nightstrike> You'd have to do A::B in C++
[01:01:25] <nomagno> I can definitely verify that behaviour. Phew, I thought it was something much more weird
[01:01:26] <caze> nomagno: Although that code demonstrates a particular behavior, you cannot use what you've observed to infer what the rules of C are.
[01:01:39] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:02:44] <caze> nomagno: For instance, the same code on a different implementation may have different behavior.
[01:02:57] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 256 seconds)
[01:03:38] <nomagno> caze: I know a lot of things are undefined. However my issue here is I could not figure out a syntactically valid way to test what I interpreted that statement meant
[01:03:44] <caze> nomagno: The thing you have to understand is that the implementation of C that you are using and the C language are not one and the same.
[01:04:29] <twkm> nightstrike: yes it is.
[01:05:14] <nightstrike> twkm: how do you use it?
[01:05:40] <twkm> it's: ,english expr
[01:05:47] <caze> nightstrike: Where does d point? Actually, afaict, it's irrelevant that d is a pointer. Might as well just make it an unsigned int.
[01:06:38] <nomagno> nightstrike: I understand the C standard implies all operations are to be performed with doubles, so does it really matter?
[01:06:50] <nightstrike> nomagno: wtf?
[01:07:01] <caze> doubles are a real type.
[01:07:10] <twkm> nomagno doesn't really know c.
[01:07:10] <nightstrike> ,english unsigned long long a, b; unsigned int c; unsigned int * d;       *d += (unsigned int)(a - b) / c; 
[01:07:11] <candide> nightstrike: Declare `a` and `b` as unsigned long long. Then declare `c` as a unsigned int. Then declare `d` as a pointer to unsigned int. Finally, increment the dereference of `d` by (`a` minus `b`) converted to unsigned int divided by `c`.
[01:08:29] <caze> nightstrike: What are you confused about? They are all unsigned, so there will be wraparound behavior all over the place.
[01:08:31] <nightstrike> ok, so the bug I'm trying to track down isn't in this line of code as long as "a-b" is within the domain of unsigned int
[01:09:27] <nightstrike> it's not ideal, but it's just a red herring for now
[01:10:18] *** Joins: constxd (~brad@192.75.101.164)
[01:10:24] <caze> ,c11 6.3.1.3p2
[01:10:24] <candide> http://www.iso-9899.info/n1570.html#6.3.1.3p2 [Signed and unsigned integers] Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more than the maximum value that can be represented in the new type until the value is in the range of the new type.60) FOOTNOTE.60 The rules describe arithmetic on the mathematical value, not the value of a given type of expression.
[01:11:30] *** Joins: moose (~moose@user/moose)
[01:12:01] <nightstrike> I don't think I'm getting wraparound.  I think I'm just looking in the wrong place
[01:12:08] <nightstrike> thanks though
[01:12:21] <caze> nightstrike: So `3 - 2` is -1, which is out or range for unsigned int. "adding... one more than the maximum value that can be represented" to -1 is: -1 + (1 + INT_MAX) gives you INT_MAX.
[01:13:07] <caze> ,cc 3u - 2u;
[01:13:10] <candide> caze: no output: 3u - 2u = 1
[01:13:16] <caze> Oops.
[01:13:24] <caze> ,cc 2u - 3u;
[01:13:27] <candide> caze: no output: 2u - 3u = 4294967295
[01:13:33] <caze> ,cc INT_MAX
[01:13:37] <candide> caze: Success (no output).
[01:13:53] <caze> Hmm. UINT_MAX
[01:14:03] <caze> My brain.
[01:14:17] <caze> ,cc printf("%u", UINT_MAX);
[01:14:20] <candide> caze: 4294967295
[01:15:33] <caze> nightstrike: The takeaway is that `a - b` is *guaranteed* to always be in the domain of unsigned int.
[01:15:41] <nomagno> twkm: Can you please actually try to say something constructive? The standard definitely denotes that for all operations involving floating types, all operands are to be converted to the largest floating type involved
[01:16:09] <caze> nomagno: There's no floating type involved.
[01:17:01] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:19:52] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:20:36] <nomagno> case: I swear I read double somewhere in the original question
[01:20:44] <nomagno> Clearly I though I did, but didn't
[01:21:26] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:21:54] *** Joins: aradesh (~aradesh@user/aradesh)
[01:22:20] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[01:25:05] *** Quits: constxd (~brad@192.75.101.164) (Quit: WeeChat 2.8)
[01:25:19] *** Quits: PSEP1 (~kaliyuga@2601:601:200:5b30::de00) (Quit: Leaving)
[01:26:02] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 240 seconds)
[01:30:46] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 260 seconds)
[01:31:13] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[01:31:29] *** topside_ is now known as topside
[01:31:39] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[01:37:07] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[01:38:13] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:38:31] *** Joins: strajder (~strajder@user/strajder)
[01:41:28] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[01:43:04] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[01:43:21] *** Quits: jrqc (~rofl@2603:3016:1e01:b960:68cb:6460:9f4d:2934) (Read error: Connection reset by peer)
[01:43:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:45:44] *** Joins: cousteau (~cousteau@user/cousteau)
[01:46:19] *** Joins: Viewday118 (~Viewday@user/viewday)
[01:46:29] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:47:55] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:48:10] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:48:18] *** Viewday118 is now known as Viewday11
[01:49:39] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[01:52:40] <bruda> Woot. Did K & R exercise 1-13. Both horizontal and vertical histograms. Without searching online for hints or help. Proud of myself :)
[01:55:17] <twkm> excellent!
[01:55:23] *** Quits: jurjen (~jurjen@31-161-184-96.mobile.kpn.net) (Read error: Connection reset by peer)
[01:57:06] <bruda> pseudocode definitely helped me think out the logic.
[01:59:26] <bruda> now for Exercise 1-14. Write a program to print a histogram of the frequencies of different characters 
[01:59:33] <bruda> in its input.
[02:00:58] <floatcomplex> e is about 600 Hz
[02:01:51] <bruda> lol I'm not gonna overthink the freqencie thing. I assume it means how many times the character appears in the input :P
[02:01:56] <floatcomplex> :)
[02:02:23] <bruda> s/freqencie/frequencie/
[02:02:34] <earnestly> close enough
[02:02:41] <bruda> lol yea
[02:02:43] * bruda shrugs
[02:03:21] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:05:18] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:05:28] <cousteau> bruda: heh, that's how I program.  I start by writing the program in English, and then replacing each sentence with actual code
[02:05:57] *** Joins: Soni (~quassel@autistic.space)
[02:06:03] <bruda> It works. I learned about pseudo code when I was learning vb6 at ITT around 2001.
[02:06:12] <cousteau> floatcomplex: hahaha
[02:06:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:07:39] <bruda> this new exercise kinda had me wondering for a moment. But then I realized I can use the numerical representation of the characters as array indexes.
[02:10:59] <cousteau> yeah that sounds reasonable
[02:11:17] <cousteau> (...but be careful with potential negative chars!)
[02:11:46] *** Joins: kurahaupo_ (~kurahaupo@pa49-181-130-72.pa.nsw.optusnet.com.au)
[02:12:40] <cousteau> you could first verify that the char is in a valid range (say, 0..127 for ASCII chars), and if it's not you ignore it.
[02:13:02] <bruda> looking at the ascii list I don't see any negative numbers. Just 0-255
[02:13:08] <cousteau> (Also, that way you can ensure that it'll be within the range of the array of counters.)
[02:13:27] <cousteau> bruda: well, technically ASCII is only 0..127
[02:13:37] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:13:46] <cousteau> and a char may be signed or unsigned.  On a PC it is usually signed.
[02:13:54] <cousteau> So the range is actually -128..127
[02:13:58] *** Joins: themarktyzer (~marcotizz@host-87-18-92-176.retail.telecomitalia.it)
[02:14:01] <fizzie> ,cc char c = getchar(); printf("%d", c); -stdin=ä
[02:14:03] <candide> fizzie: -28
[02:14:10] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[02:14:11] <bruda> Yea, though there's an extended codes list with other things like quotes, weird chars, etc.
[02:14:29] <cousteau> there are many extended lists, in fact
[02:14:58] <bruda> I suppose 127 would be adequate unless i use quotes, cent sign, etc.
[02:15:03] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[02:15:09] <cousteau> but yeah, most of them are the same in the range 0..127, and some variation in 128..255 (which would map to -128..-1 if chars are signed)
[02:15:15] <bruda> tilde, less than, greater than, etc.
[02:15:18] <cousteau> bruda: better just check
[02:15:33] <cousteau> `<> are ASCII though
[02:15:41] <cousteau> er, ~<>
[02:15:44] <bruda> Yea in the extended list it appears.
[02:15:54] <cousteau> in the regular one too
[02:16:22] <bruda> ah I see, they are different but basically the same symbols
[02:16:34] <cousteau> or do you mean like the tiny ones that area actually quotes?
[02:16:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:16:57] <cousteau> like « » but a single one of them, not sure how to type it
[02:16:59] <bruda> like 155 for instance.
[02:17:02] <bruda> looks like >
[02:17:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[02:17:20] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:17:45] <cousteau> maybe in Windows cp1252 (which is just one of the many "extended ASCII" tables there is)
[02:18:07] <fizzie> ASCII-1963 (or formally ASA X3.4-1963) didn't have a ~. Or lowercase letters. ;)
[02:18:14] <bruda> I'm looking at https://www.ascii-code.com/
[02:18:16] <candide> Title of bruda's link: ASCII Code - The extended ASCII table
[02:18:34] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[02:18:36] <fizzie> "The table below is according to Windows-1252 --"
[02:18:47] <fizzie> Silly to call it "8-bit ASCII table" though.
[02:18:52] <cousteau> UTF-8 (which might be the most common encoding nowadays) uses 0..127 as ASCII, and combinations of chars within 128..255 for the rest
[02:19:12] <cousteau> fizzie: indeed.  ASCII is officially 7 bits.
[02:19:24] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-130-72.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[02:19:38] <cousteau> Silly to call a site "ascii-code.com" and plant a code that is some weird variation of ASCII.
[02:20:41] <bruda> What site to you prefer for look at ascii code lists?
[02:20:41] *** Quits: mimmy (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[02:21:42] <bruda> Any of them actually list any negative numbers representing a character?
[02:22:14] <cousteau> bruda: that's the thing, the tables themselves won't have negative numbers
[02:22:58] <themarktyzer> leave
[02:23:01] *** Parts: themarktyzer (~marcotizz@host-87-18-92-176.retail.telecomitalia.it) ()
[02:23:05] <cousteau> and well, if your file has a char outside of the range 0..127, that's NOT ascii.  If you can ensure that your file is ASCII before feeding it to your program then you wouldn't need to check.  But it's always better to check, just in case.
[02:23:22] *** Quits: msmhbvd^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[02:23:49] <bruda> This program is just taking input from stdin. It's a basic exercise covering standard input/output.
[02:24:17] <bruda> And right now covering arrays in this part of the chapter.
[02:24:22] <X-Scale> bruda: https://www.asciitable.com/asciifull.gif
[02:24:39] <fizzie> `man ascii` (of the Linux man-pages project) is what I tend to refer to if I want to see a table. But like cousteau says, the part of how the `char` type is signed on many implementations is kind of orthogonal to that.
[02:25:07] <sham1> I'd wish the signedness of char would just get specified
[02:25:21] <bruda> oh snap, that's cool didn't realize there was a man page for ascii. Heh
[02:25:23] <sham1> Even if it were made to be signed by default, that'd still be better than what we have now
[02:25:48] <sham1> At least then it'd be consistent
[02:26:42] <fizzie> Doing a histogram for character values 0..127 inclusive, or possibly 0..CHAR_MAX inclusive, is definitely sufficient for the exercise, but it's still a good idea to explicitly ignore values outside the range. Although I guess there's the potential drawback of getting a spurious "comparison is always false" warning from a noisy compiler.
[02:28:07] <fizzie> ,clang -funsigned-char -Wtautological-unsigned-zero-compare  char c = getchar(); if (c >= 0) putchar((unsigned char) c);  -stdin=x
[02:28:09] <candide> fizzie: [warning: result of comparison of unsigned expression >= 0 is always true [-Wtautological-unsigned-zero-compare]] x
[02:28:22] <cousteau> bruda: so basically, some encodings, such as Windows cp1252, or the similar ISO-8859-1, are extensions to ASCII where code points 0 to 127 are the same characters as ASCII, and 128 to 255 are non-ASCII characters
[02:28:33] <bruda> I suppose it won't hurt to be safe. But I fail to see how I'd break the code with anything I can type on this keyboard.
[02:29:05] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:29:06] <cousteau> on a machine that has 8-bit bytes and where `char` is unsigned, that'll map 0..127 to 0..127 and 128..255 to 128..255, obviously
[02:29:24] <cousteau> on a machine that has 8-bit bytes and where `char` is SIGNED, that'll map 0..127 to 0..127 and 128..255 to -128..-1, usually
[02:29:44] <cousteau> bruda: hmm... Alt-codes?
[02:29:55] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:30:03] <fizzie> I kind of imagine most keyboard mappings tend to have *some* ways of typing accented characters, even if a little obscure. But maybe US ones don't.
[02:30:04] <bruda> I suppose alt-codes could really put things to the test. Yeah.
[02:30:12] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[02:30:35] <cousteau> bruda: in any case, if you're reading the file character by character, say, with fgetc(), you'll get an int from 0 to 255 anyway
[02:30:43] <bruda> I think if I get a basic example of the code working it would be sufficient enough for me to move forward with the chapter.
[02:31:16] <bruda> It's not like I'm giving my homework code to anyone. It's just for my own educational purposes.
[02:31:31] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[02:31:32] <cousteau> fizzie: only the alt-keypad ones, I think.  They don't even have an AltGr.  Unless you set up the US-International layout.
[02:31:36] <bruda> I'm still in chapter 1 anyways.
[02:31:54] *** Joins: AsenMx (~AsenMx@user/asenmx)
[02:32:06] <cousteau> bruda: yeah, I was just going pedantic with the requirements
[02:32:30] <fizzie> This one has a couple of non-ASCII characters even printed on it. ¬, £, € and one silly key that's printed as the U+00A6 broken bar ¦, but actually just types in the regular pipe |.
[02:32:31] <cousteau> (which might be bad practice, btw.  First get it working, then worry about the details.)
[02:32:38] <bruda> Yea I understand. Worth a mention.
[02:32:53] *** Quits: pizdets (~pizdets@183.182.110.210) (Ping timeout: 250 seconds)
[02:33:13] <fizzie> Bash should have a feature where ¦ makes a regular pipeline except any attempt to write to the pipe just fails with EPIPE.
[02:33:15] <cousteau> fizzie: yeah I don't get why most keyboards have ¦ painted on them but actually type |.
[02:33:19] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[02:33:35] <cousteau> I think | used to look like |, e.g. in K&R2 I think that's what it looks like.
[02:33:39] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[02:33:47] <cousteau> er, that | used to look like ¦
[02:33:50] *** Joins: pizdets (~pizdets@183.182.114.166)
[02:33:50] <bruda> While I'm not exactly new to C I've interrupted my study of it repeatedly over the years. Especially trying to do LCTHW.
[02:34:03] <cousteau> ,lcthw
[02:34:03] <candide> Learn C The Hard Way is an online book that should be avoided. It does not teach you C, but rather shows how C might work on a specific implementation. It contains numerous errors, bad examples and absurd arguments. See http://hentenaar.com/dont-learn-c-the-wrong-way and https://kellett.im/a/hardway
[02:34:34] <fizzie> cousteau: Yeah, the thing is, the UK layout has *both* a printed | and a printed ¦, but both type as |.
[02:34:43] <cousteau> fizzie: yep, I've seen them
[02:34:48] <cousteau> oh wait, they do?
[02:34:55] <bruda> Yea someone in #programming pointed me to K&R 2nd edition to get a better runthrough.
[02:35:03] <cousteau> I was pretty sure they printed the right one
[02:35:17] <bruda> So far I'm enjoying this book better than the other course.
[02:35:22] <cousteau> bruda: I've also heard good things about K.N.King's book
[02:35:52] <fizzie> I imagine it's just that nobody *wants* to type in the ¦ so whoever made this keyboard mapping (for X11?) decided to make both produce a |.
[02:35:53] <bruda> I'm down to get any other books that might help. I have hundreds of computer related ebooks. 
[02:36:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:36:39] <bruda> I have kindle unlimited but not all books are covered in my subscription. I'm poor folk hehe.
[02:37:41] <cousteau> fizzie: where's this key btw?  I have a Spanish keyboard but I think I configured the Irish (similar to British) layout once
[02:38:15] <cousteau> ah no, actually it's "British (with dead keys)"
[02:38:19] <cousteau> ¦
[02:38:32] <fizzie> The ¦ is printed as the ISO level 3 shift ("AltGr") symbol of the left-from-1 key, which produces ` unshifted and ¬ shifted. The | is the shifted symbol of the left-from-z key, which produces the \ unshifted.
[02:38:42] <cousteau> ok it's AltGr plus the key left of the 1
[02:38:52] <bruda> woops. I found the 2nd edition PDF for K.N.King on google.
[02:39:01] <cousteau> so I get ¦ and |
[02:39:18] <fizzie> Hmm. Well, it's of course up to the operating system, so.
[02:39:35] <cousteau> Works For Me™.  Although I might have modified the layout
[02:39:50] <cousteau> fizzie: X11 too...
[02:40:23] <mplio> why are you talking about keyboard layouts xD
[02:40:59] <bruda> Long story short, I'm doing an exercise that is meant to count the frequency of characters in input.
[02:41:12] <bruda> so we got to talking about all the possible characters
[02:41:23] <mplio> oh so pretty deep in the rabbit hole
[02:41:25] <mplio> gotcha
[02:41:37] <mplio> keep on diggin by all means xD
[02:42:14] *** Joins: coruja (~coruja@user/coruja)
[02:42:53] <mplio> but you could simplify this to asking what encoding you need to support then could make a hash table or smth
[02:42:56] <bruda> lol
[02:43:48] <bruda> I'm just doing an exercise from K&R 2nd edition. Exercise 1-14.
[02:44:00] <fizzie> ,kr1-14
[02:44:00] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-14. Write a program to print a histogram of the frequencies of different characters in its input.
[02:44:03] <bruda> Write a program to print a histogram of the frequencies of different characters 
[02:44:05] <bruda> in its input
[02:44:06] <mplio> arent you bored of doing exercises?
[02:44:41] <bruda> not really. Kinda fun for me. I enjoy coding.
[02:44:43] *** Joins: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au)
[02:44:57] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Quit: Leaving)
[02:45:00] <bruda> I've been trying to learn C for years but I kept getting interrupted. But I think I needed better books too.
[02:45:05] <mplio> yeah programming and book exercises are two distinct things
[02:45:32] <mplio> personally I can recomend "Modern C" by Jens Gustedt but only after you get through the basics
[02:45:45] <cousteau> I think learning C is like learning any other language.  You learn it by practice, specially if you need to use it a lot.
[02:45:53] <bruda> Well yea. In programming I'd be more vigilant with potential bugs and more destructive in my testing.
[02:45:57] <mplio> the practice could be in a useful project
[02:46:33] <mplio> im sure you got something you want to create or a tool you need
[02:47:02] <bruda> Yea. Usually those ideas come later when I've covered most of the essentials in a language.
[02:47:13] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[02:47:24] <mplio> whatever works for you, C is the absolute best
[02:47:35] <bruda> Especially after being exposed to a lot of simple projects.
[02:47:51] *** Joins: kurahaupo (~kurahaupo@pa49-181-5-240.pa.nsw.optusnet.com.au)
[02:47:58] *** Joins: quartz (~quartz@user/quartz)
[02:48:02] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Quit: leaving)
[02:48:02] *** Joins: ferdna (~ferdna@user/ferdna)
[02:48:08] <bruda> Yea I see the benefits. Though I know it's easy to bring on an armegaddon with poorly written code lol
[02:48:34] <mplio> if you approach things from first principles, a first project in a language can be of arbitrary complexity, you just gotta know when to throw it out if you realize you dug some deep bad hole
[02:48:55] *** Quits: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[02:49:19] <mplio> the important additional skill you gain from a complex project is architecture
[02:49:42] <nomagno> ^
[02:49:52] <bruda> Yea. C isn't my first language so I've definitely wrote a lot of excessive code and learned to try to simplify if things start to seem crazy. Even if I have to start over.
[02:50:29] <nomagno> Also, I keep finding ways to progressively simplify chunks of code at such a pace I'm not sure my codebase is growing as I add features! Probably just a testament to how bad I was when I started
[02:50:37] <bruda> got my start in web development actually. 
[02:50:44] *** Joins: echoSMILE (uid504326@user/echosmile)
[02:50:45] * bruda ducks
[02:51:12] <mplio> C will help you write cleaner code. The simplicity motivates you to think purely of the problem so data transformations and not have to "debug" your knowledge of the language along the way once you get the basics
[02:51:21] <bruda> But I've been coding in some form or another for about 20 years. Never went full pro but I've always enjoyed coding.
[02:52:07] <mplio> are you finding anything thats hard in particular?
[02:52:25] <bruda> Maybe trying to get through LCTHW lol.
[02:52:35] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[02:52:35] <nitrix> ,lcthw
[02:52:35] <candide> Learn C The Hard Way is an online book that should be avoided. It does not teach you C, but rather shows how C might work on a specific implementation. It contains numerous errors, bad examples and absurd arguments. See http://hentenaar.com/dont-learn-c-the-wrong-way and https://kellett.im/a/hardway
[02:53:10] <bruda> Early in the books the simpler stuff is a breeze. As long as I'm not working with broken code examples I usually figure things out.
[02:53:34] <mplio> Take a look at these https://i1.wp.com/aticleworld.com/wp-content/uploads/2018/08/C-Reserved-words1.png?fit=603%2C249&ssl=1
[02:53:43] <mplio> are there any keywords you dont know how to use?
[02:53:54] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:54:03] <bruda> Hmm lets see
[02:54:48] <bruda> I've got a general understanding of most of those. Though register and volatile I might need reintroduction. But I'm sure I'll get there.
[02:54:59] *** Quits: kurahaupo (~kurahaupo@pa49-181-5-240.pa.nsw.optusnet.com.au) (Ping timeout: 264 seconds)
[02:55:41] <mplio> those 2 are quite rare, volatile may be used in some lock implementations if CAS is not available
[02:55:53] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:54] <floatcomplex> realistically, register doesn't do anything unless used with the asm keyword
[02:55:55] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:56:02] <floatcomplex> and use of those two together is an admission of defeat
[02:56:10] <mplio> haha
[02:56:51] <bruda> Ah. So nothing I need to dive right into right now. I'll work my way up there. So far the K&R 2nd edition is pretty comfortable for me.
[02:57:27] *** Joins: soapsudsxx (~soapsudsx@141.193.188.148)
[02:58:02] <bruda> I found the k.n.king C programming book online. Plus I have a few other odd books on C. I might eventually cover them all just to really soak up everything I can.
[02:58:24] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[02:58:28] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:58:38] <mplio> once you start doing projects, the language will become second nature so I suggest you don't get hung up on books too much
[02:59:13] <nitrix> Use of volatile is being lazy. With C11 you can control order and consistency (C11 7.17.3) with fine control instead of resorting to volatile.
[02:59:13] <mplio> the really critical part of learning C is to really understand how the syntax is defined and to know all keywords
[02:59:19] <bruda> Oh I agree. In Go I was writing code more than I was reading. And all I needed was their provided documentation like the tour, specification, etc.
[03:00:14] <nitrix> I disagree. The grammar (syntax and keywords) is probably the least important aspect of the language.
[03:00:34] <cousteau> nitrix: woah wait, C11 has something better than volatile?
[03:00:35] <bruda> LCTHW had me memorizing keywords. I got most of them down well enough to know them.
[03:00:52] <nitrix> cousteau, Atomics and Generics, it's kind of the selling point.
[03:01:07] <mplio> _Alignas as well
[03:01:07] <cousteau> oh right
[03:01:34] <cousteau> ...well, that doesn't cover the use I often have for volatile, which is "stop messing around and actually write this thing to memory"
[03:01:43] <cousteau> which I'd say is orthogonal to the use of volatile
[03:01:56] <mplio> volatile is inefficient
[03:01:59] <bruda> Sadly I don't always have internet so these fun conversations won't always be available. 
[03:01:59] <mplio> dont use it
[03:02:14] <bruda> We had to borrow a free hotspot from the library. Only get it 2 weeks out of the month.
[03:02:26] <cousteau> mplio: there are times where you MUST use it
[03:02:40] <cousteau> it's like saying "floating point is inefficient, use only integers"
[03:02:56] <mplio> Atomics are similar to volatile
[03:03:03] <mplio> a similar mechanism
[03:03:09] <mplio> also a lock on bus
[03:03:12] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[03:03:19] <mplio> and flush of write buffer
[03:03:20] <cousteau> something can be atomic and not volatile, or volatile and not atomic
[03:03:44] <floatcomplex> floating point isn't inefficient, but it should be treated as inexact in almost all cases
[03:03:54] <floatcomplex> sometimes that's unacceptable
[03:04:02] <cousteau> volatile just means "write this for real", which in embedded systems can be quite important
[03:04:07] <floatcomplex> relying on ieee to make it exact for you makes it inefficient
[03:04:09] <mplio> why are you saying floating point is inefficient
[03:04:38] <cousteau> because it's usually slower than integer arithmetic
[03:04:43] <floatcomplex> cousteau: but it's not
[03:05:04] <floatcomplex> cousteau: or rather, for a given platform, it's knowable whether it is or not
[03:05:21] <floatcomplex> it's either as fast as integer arithmetic or it is so slow that it shouldn't be used at all
[03:05:27] <bruda> I think he was just trying to make a point.
[03:05:55] <cousteau> my point is, if floating point is slower than integer arith, should I say "do not ever use floating point, it is inefficient"?
[03:06:12] <cousteau> or rather, "avoid using floating point unnecessarily, but do use it when needed"?
[03:06:48] <mplio> the reality is that on x86 its as fast as for ints
[03:06:51] <floatcomplex> and arm
[03:07:06] <floatcomplex> above cortex-m4 anyway
[03:07:17] <cousteau> double precision too?
[03:07:23] <floatcomplex> no
[03:07:24] <floatcomplex> but who cares
[03:07:35] <mplio> ARM has NEON
[03:07:42] <edk> it's manufacturer-dependent on cortex-m
[03:07:42] <floatcomplex> double precision is dumb
[03:07:55] <cousteau> come on, be honest, when was the last time you declared a float rather than a double?
[03:08:02] <floatcomplex> cousteau: literally look at my name
[03:08:04] <mplio> its useful e.g. in sparme matrix muls
[03:08:08] <mplio> sparse*
[03:08:11] <cousteau> yeah I meant except floatcomplex obviously
[03:08:29] <floatcomplex> cousteau: there is LOTS of hardware where floats are implemented in hardware and doubles are not
[03:08:42] <floatcomplex> not just in the embedded space. a lot of GPUs for example
[03:08:53] <cousteau> floatcomplex: perfect.  Should I say "never use double, it's inefficient"?
[03:08:57] <floatcomplex> no
[03:09:04] *** Joins: kurahaupo (~kurahaupo@pa49-179-144-232.pa.nsw.optusnet.com.au)
[03:09:06] <cousteau> good!
[03:09:07] <floatcomplex> you should say never use double, use float or size_t L)
[03:09:10] <floatcomplex> :)
[03:09:15] <cousteau> bad!
[03:09:16] <mplio> guys pls
[03:09:30] <mplio> I only said not to use volatile as a principle not a rule
[03:09:31] <floatcomplex> if you think 23 significant bits is not enough, is 53? or do you actually need more
[03:09:37] <edk> we should really have a #c-opinionjail
[03:10:04] <cousteau> anyway.  volatile has its place sometimes.  But I bet the case mplio was referring to was not one of those times.  Like being too lazy to do the right thing
[03:10:13] <nitrix> cousteau, I think memory_order_seq_cst gives you sequential + consistent. The sequential means you have acquire and release constraints (nothing can be re-ordered before an acquire, and nothing can be re-ordered after a release). As for the consistent part, there's a total order amongst all threads (not just the current one). It's the most extreme, yet it's STILL better than volatile which cannot be optimized at all.
[03:10:21] <cousteau> mplio: you said "don't use it" and didn't clarify any further
[03:10:23] <edk> mplio: so a principle is like a rule that you don't always follow?
[03:10:25] <bruda> #c-debate-arena
[03:10:27] <mplio> cousteau, yeah exactly, thats why i said principle
[03:10:37] <edk> you have a solid career as a politician
[03:10:45] <cousteau> you said that, like, a lot later
[03:10:54] <mplio> I was saying this to bruda who just started learning the lang to let him know
[03:10:54] <cousteau> when I was already in full complaining mode
[03:11:01] <cousteau> ah
[03:11:33] <mplio> also wtf, stop complaining and enjoy the landscape of C-people <3
[03:11:48] <bruda> Yea. Right now I'm taking a break to add another book to my collection for later.
[03:11:51] <cousteau> but complaining is fun!
[03:11:56] <mplio> haha
[03:12:01] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[03:12:05] <cousteau> on a similar note... bruda: don't use register
[03:12:12] <mplio> yes
[03:12:18] <bruda> heh
[03:12:21] <cousteau> I'm pretty sure that one is mostly meaningless nowadays
[03:12:41] <bruda> Well I might use it in a learning excise to understand it, but I'm sure it'll be clear why it's not recommended.
[03:13:12] <edk> i don't think there's any particular reason *not* to use register; just don't expect it to do anything except prevent you from taking the address
[03:13:16] <mplio> your only motivation may be performance and there one test and you'll know its actually having no or a negative effect
[03:13:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5)
[03:13:49] *** Joins: monkey_ (~user@190.104.116.153)
[03:14:04] <cousteau> you might learn const though, that's pretty important to get right, and once you do, if you ever need to learn about volatile, e.g. if doing embedded stuff, just know that its use is similar to const (with a different meaning, though)
[03:14:17] <mplio> const char*const ;)
[03:14:21] <cousteau> (like, a totally different and unrelated meaning, but the same syntactic rules)
[03:14:55] <pragma-> #c-mute-people-i-disagree-with
[03:15:10] <mplio> cousteau, what do you mean different on embedded?
[03:15:44] <mplio> pragma-, what do you disagree with?
[03:16:20] <cousteau> mplio: I said that volatile has a different meaning to const
[03:16:36] <cousteau> not that volatile has a different meaning in embedded than outside of embedded
[03:16:41] <pragma-> mplio: People were throwing out suggestions for naming a "#c-opinionjail"
[03:16:45] <mplio> pragma once, pragma twice, pragma chicken soup with rice
[03:17:17] <cousteau> `const` and `volatile` are the same kind of keyword with the same syntactic rules, but obviously have different meanings, is what I meant to say
[03:17:24] <mplio> cousteau, tbh const might mean nothing on embedded, there often is not memory protection
[03:18:02] <mplio> compiler will just generate sections like .rodata and you just copy them into ram somewhere, thats it
[03:18:18] <cousteau> actually const means "you're not allowed to touch this, and I as a compiler am going to enforce it unless you trick me into letting me touch the thing"
[03:18:23] *** Quits: kurahaupo (~kurahaupo@pa49-179-144-232.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[03:18:29] <mplio> yup
[03:18:39] <bruda> I don't condone it typically but it appears there's a freely available photocopied PDF of K.N.King's C book.
[03:19:19] <cousteau> whereas volatile means the opposite for the opposite side, i.e. "ah, you think you have complete control over this variable?  you think if you don't touch it no one else can touch it?  Well, you are wrong!"
[03:19:53] <mplio> I wouldnt define it like that
[03:21:10] <cousteau> const = "you can't modify it"; volatile = "something out of your control may read or modify it (so make sure you actually read it and write it every time)"; the default assumption is that you can touch things and nothing outside of your program is going to read/write them
[03:21:11] <mplio> but one thing I think we can all agree on, bruda is making the right choice when learning C :>
[03:21:19] <bruda> :)
[03:21:20] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[03:21:20] <floatcomplex> yeah that definition of volatile has nothing to do with why it makes kahan summation start working again after turning on -ffast-math
[03:21:24] <cousteau> yeah definitely
[03:22:08] <cousteau> I'm starting to think that kahan summation thing has to do with why kids love the taste of cinnamon toast crunch
[03:22:18] <floatcomplex> basically it means "don't assume you know what's in this variable, you have to actually read it"
[03:22:24] <mplio> why are you using kahan summation?
[03:22:29] <floatcomplex> mplio: i'm not
[03:22:32] <cousteau> floatcomplex: is it because kahan summation is horribly ill-conditioned?
[03:22:37] <floatcomplex> cousteau: yes
[03:22:48] <cousteau> sounded like it :>
[03:22:49] <mplio> I believe there are better methods now
[03:23:08] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[03:23:08] <floatcomplex> mplio: it's merely a thing people point to when they say don't use -ffast-math because it breaks X
[03:23:31] <mplio> never encountered that tbh
[03:23:40] <cousteau> just don't use floating point arith at all
[03:23:42] <cousteau> problem solved
[03:23:51] <mplio> dont stir the pot man
[03:23:57] <mplio> floatcomplex will eat you alive
[03:24:14] <floatcomplex> don't use fp if you need bit for bit repeatability across anything other than a rerun of the same binary with the same input
[03:24:29] <floatcomplex> ieee 754 aims to provide just that repeatability, but at a horrible cost
[03:24:57] <mplio> in games programming its a hard choice floatcomplex 
[03:24:59] <floatcomplex> if what you need is a fuzzy approximation of real numbers, absolutely use fp
[03:25:11] <cousteau> yeah basically don't use fp if you want exact values, since the entire thing of fp is that it doesn't have infinite precision
[03:25:31] <cousteau> and since it doesn't, be careful with ill-conditioned algorithms
[03:25:56] <floatcomplex> basically you can and should use -ffast-math to fuzz your floating point math even if you don't end up releasing with it enabled
[03:26:13] <cousteau> -ffast-math basically means "I trust the conditioning of my algorithm is good enough"
[03:26:16] <mplio> thats an interesting approaxh
[03:26:17] <floatcomplex> if your program behaves wildly different with it enabled, and your program is not a libc implementation, you should probably refactor it
[03:26:45] <mplio> I never actually used -ffast-math
[03:27:07] <cousteau> if someone says "don't use -ffast-math" they're pretty much saying "don't use floating point arithmetic in a way that might lose precision"
[03:27:22] <cousteau> which, in my head, translates to "don't use floating point"
[03:27:55] <floatcomplex> well that's too big of a leap
[03:28:01] <cousteau> and "problem solved"
[03:28:25] <mplio> floatcomplex, go back to your complex numbers man xD
[03:28:32] <floatcomplex> if you are doing anything remotely related to security stuff, don't use floating point at all. the fact that all javascript numbers are doubles, and ieee 754 doubles admit denormals which must be handled in software with much slower operations, and it's attacker-controlled whether a number is denormal or not, has been used as an actual spectre attack vector
[03:28:42] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[03:29:00] <floatcomplex> tl dr ieee 754 is a security hole
[03:29:01] <cousteau> yeah, javascript going all doubles kinda blows my mind
[03:29:19] <mplio> what about typed arrays?
[03:29:22] <mplio> in JS
[03:29:28] <cousteau> oh wow, didn't know that had been used in spectre
[03:29:34] <floatcomplex> pretty much any attacker-controlled runtime should be assumed to somehow eventually be an exploitable security hole
[03:29:39] <floatcomplex> even if YOU can't imagine how, today
[03:29:42] <floatcomplex> someone will
[03:29:43] <cousteau> spectre the branch-prediction ghost?
[03:29:54] <floatcomplex> s/runtime/run time/
[03:30:03] <cousteau> the angry ghost with a branch in its hand?  that spectre?
[03:30:07] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[03:30:51] *** Quits: mahmutov (~mahmutov@176.30.255.33) (Ping timeout: 256 seconds)
[03:30:53] <mplio> any of you into game engine writing?
[03:31:11] <mplio> from scratch ofc
[03:31:12] *** Joins: kurahaupo (~kurahaupo@pa49-180-23-83.pa.nsw.optusnet.com.au)
[03:31:57] <cousteau> floatcomplex: so in short, don't use algorithms that will make someone say "don't use fast math", right?
[03:32:15] <floatcomplex> i'd go that far, for my own code, yes
[03:32:31] <cousteau> I'd say that's good practice
[03:32:34] *** Quits: alch (~alch@151.36.37.189) (Read error: Connection reset by peer)
[03:32:47] <floatcomplex> if you're writing a libc you need to handle all of the edge cases that you can't even correctly detect if -ffast-math is enabled
[03:32:54] <floatcomplex> so a libc itself cannot be developed with that practice
[03:33:00] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:33:32] <cousteau> "don't use algorithms that will make someone say "don't use fast math", or cousteau here will jump and say "dOn'T uSe FlOaTiNg PoInT""
[03:33:48] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[03:33:52] *** Joins: teepee (~teepee@openscad/teepee)
[03:34:01] *** Joins: jinsun___ (~quassel@user/jinsun)
[03:34:04] *** Quits: Richard_Cavell (uid165693@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:34:14] <floatcomplex> it's more like "don't write code that is only defined to be correct if it does exactly what ieee 754 guarantees"
[03:34:20] <cousteau> floatcomplex: I'd say that's a special case
[03:34:24] <cousteau> the libc thing
[03:34:27] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[03:34:33] <floatcomplex> it's a pretty fucking important one though
[03:34:54] <floatcomplex> you're always gonna have some jackass that comes along and tries to compile libc with -ffast-math
[03:35:20] <floatcomplex> i don't even have to tell you what linux distro they're using
[03:36:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[03:37:13] <cousteau> not the one I do, that's for sure
[03:37:19] <cousteau> it already has a libc in it
[03:37:28] *** Joins: alch (~alch@151.82.58.148)
[03:38:06] <floatcomplex> there are good and bad reasons to not use fast-math. good reasons include not being able to detect corner cases that you might need to. bad reasons include "because hpc scientist types are counting on it" guess what, they're not. they're saying "lol if you add 1e-20 to this expression it goes faster"
[03:38:20] *** Joins: rgrinberg (~textual@190.113.102.153)
[03:38:20] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[03:38:43] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[03:38:51] <mikoto-chan> >The expression x&(x-1) clears the rightmost non-zero bit of x.
[03:39:01] <mikoto-chan> weird, I have tested this and it seems to be false?
[03:39:13] *** Joins: trampel (~trampel@2601:602:9c00:921:747b:6c01:3983:1464)
[03:39:27] <floatcomplex> mikoto-chan: what is the type of x, in the original author's context?
[03:40:12] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:40:31] <mikoto-chan> floatcomplex: uint64
[03:43:54] <mikoto-chan> nvm, I found the issue
[03:49:20] <bruda> Ok I'm too distracted. I need to do this exercise now lol
[03:49:21] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:50:47] <cousteau> mikoto-chan: the only use I knew for that was for checking if a number is a power of 2
[03:51:08] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:51:31] <cousteau> but... yeah, xxxxx1000 & xxxxx0111 = xxxxx0000, effectively clearing that 1 and leaving the xxxxx intact
[03:52:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5) (Quit: Leaving)
[03:52:49] <fizzie> It can also be used to iterate over the set bits of a value without having to consider the unset ones.
[03:53:12] <fizzie> Sometimes useful when representing sets as bitmaps.
[03:53:28] <fizzie> ,cc void decompose(uint32_t n) { while (n) { uint32_t t = n&(n-1); n ^= t; printf(" %08"PRIx32, n); n = t; } } decompose(0x30107);
[03:53:31] <candide> fizzie: 00000001 00000002 00000004 00000100 00010000 00020000
[03:53:57] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[03:54:28] *** Joins: loganlee (~Thunderbi@user/loganlee)
[03:55:32] <cousteau> oh that's cool
[03:55:38] <cousteau> ,bithacks
[03:55:38] <candide> bithacks is http://graphics.stanford.edu/~seander/bithacks.html
[03:55:45] <cousteau> I need to read that more often
[03:56:13] *** Joins: teepee (~teepee@openscad/teepee)
[03:56:36] <fizzie> I think a variant of that is in there as one of the "count the set bits" alternatives.
[03:56:52] <fizzie> Though it then goes on to fancier things.
[03:57:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:57:28] <cousteau> speaking of which, I seem to recall that RISC-V's B extension was going to have a bit counting instruction
[03:57:35] <cousteau> for use in, like, bit stuff
[03:57:41] *** Joins: testusr (~byterusty@user/testusr)
[03:58:36] <mikoto-chan> fizzie: I used it for population count basically
[03:58:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:00:38] <floatcomplex> cousteau: most things have a popcount instruction already
[04:01:07] <floatcomplex> __builtin_popcount() gives you access to it, or one of these listed bit hacks as a backup, from gcc or clang
[04:01:22] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[04:01:29] <floatcomplex> presumably there is a portable C idiom that gcc recognizes and converts to __builtin_popcount() but idk what it is
[04:01:43] <cousteau> well, RISC-V didn't (officially) until recently, I think
[04:01:55] <floatcomplex> RISC-V doesn't have a lot of things
[04:02:06] <floatcomplex> it's not going to affect how i write code that has to be battery efficient on arm
[04:02:07] <cousteau> first hit of "b extension" says:
[04:02:16] <cousteau> "usb type b extension cable: Amazon.com"
[04:03:11] <cousteau> floatcomplex: yeah I didn't say you shouldn't use it
[04:03:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873)
[04:03:41] <cousteau> I just found it interesting that it included it, since I'm not sure it's something you'd use in everyday operations
[04:05:43] <floatcomplex> the spec for riscv-v is total madness, and even though there aren't implementations of it in the real world yet, the madness is infecting new intel revisions too
[04:05:44] <cousteau> "The  GCC  builtin  function  __builtin_popcount  (unsigned  int  x)  is  implemented  by cpop  on  RV32  and  by  cpopw  on  RV64"  -- ah cool
[04:05:47] <fizzie> I think it comes up in (en)coding and crypto things.
[04:06:18] <fizzie> I kind of like the parallel O(log n) approach, even though I'm not at all sure it's in objective terms a good one.
[04:07:02] <bruda> woot exercise 1-14 accomplished. Well enough anyways. For fun I could give these histograms a little more styling.
[04:07:51] <floatcomplex> make it play a tone at the frequency of occurrency of each letter :)
[04:08:00] <floatcomplex> s/occurrency/occurrence/
[04:08:30] <bruda> Haven't gotten that far yet; playing sounds via code.
[04:09:13] <cousteau> huh, I'd have sworn the latest doc for the B extension already mentioned the Zbk set of crypto stuff
[04:09:15] <floatcomplex> you've not lived until you've written a function called regular_ass_sdl_audio_callback()
[04:11:20] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[04:11:35] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[04:11:39] <cousteau> I remember writing crap to some /dev block device that would play 8-bit audio
[04:12:59] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[04:13:35] <fizzie> Probably /dev/audio.
[04:13:39] <cousteau> /dev/pcm I think
[04:13:42] <cousteau> or maybe that
[04:14:26] *** Joins: Praise (~Fat@user/praise)
[04:14:58] <fizzie> IIRC, /dev/audio is the old Sun defaults-to-8kHz-PCM thing. /dev/dsp was the OSS one, and /dev/snd/pcm* the fancy modern ALSA things.
[04:15:00] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[04:15:26] *** jinsun___ is now known as jinsun
[04:15:44] <cousteau> and well, I could just write bytes, and each byte would become a sample from 0 to 255, at like 8 kHz sampling frequency, and that was good enough for playing the Popeye the Sailor melody on the pc's speaker, which back in the day was my hello world in anything programmable with a speaker
[04:16:01] <cousteau> ah maybe it was dsp not pcm, can't remember
[04:18:12] <floatcomplex> dsp in that context being a complely misleading name, unless it was meant to stand for digital sample player
[04:18:18] <floatcomplex> digital sample putter
[04:18:23] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 264 seconds)
[04:18:59] <fizzie> I had a SPARCstation 5 at one point, and catted something to /dev/audio, and got real scared when actual sound came out. Didn't realize there was a built-in speaker that was capable of actual sound. Not very loud, but still. I was more used to things that just went beep, like the PC speaker. (Of course people did use PWM trickery to play PCM samples on the PC speaker too, but that was always pretty
[04:19:01] <fizzie> crappy.)
[04:19:09] <floatcomplex> lol
[04:19:16] <cousteau> yeah I remember the name was misleading, but I think it was pcm (it didn't use PCM at all)
[04:19:43] *** Joins: Wulf (~Wulf@user/wulf)
[04:21:17] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 256 seconds)
[04:22:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[04:23:02] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[04:24:29] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:24:57] <fizzie> Aw... `padsp` is supposed to allow programs that write to /dev/audio to still work, but at least on this system it just doesn't. :/ Was trying to write some music with bash.
[04:25:15] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:26:17] *** Quits: testusr (~byterusty@user/testusr) (Quit: Leaving...)
[04:26:37] *** Joins: kurahaupo_ (~kurahaupo@pa49-181-84-172.pa.nsw.optusnet.com.au)
[04:27:50] *** Quits: trampel (~trampel@2601:602:9c00:921:747b:6c01:3983:1464) (Quit: Leaving)
[04:28:32] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[04:29:38] <cousteau> Hm, my system doesn't have a /dev/dsp nor /dev/pcm
[04:29:56] <cousteau> but I heard newer distros have a /dev/pcr
[04:30:08] *** Quits: kurahaupo (~kurahaupo@pa49-180-23-83.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[04:30:12] <cousteau> it's a block device that tests if you have covid
[04:32:08] <fizzie> I don't think OSS emulation is really on by default these days very much. It's all /dev/snd/* now. (And I'd guesstimate on most systems, even *those* are mediated through PulseAudio or PipeWire rather than accessed directly.)
[04:33:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:33:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:33:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:34:38] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:a13f:e926:76dd:8e6f)
[04:34:43] *** Joins: kuku (~kuku@user/kuku)
[04:43:23] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-84-172.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[04:43:46] *** Joins: Klinda (~superleag@user/klinda)
[04:44:01] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[04:45:17] *** Joins: Nspace (~Nspace@user/nspace)
[04:47:58] <bruda> What are the various escape characters in C? Like \n \t...
[04:48:03] <bruda> is there a list somewhere?
[04:48:15] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[04:48:42] <cousteau> probably in the standard
[04:49:08] <cousteau> https://www.iso-9899.info/n1570.html#5.2.2
[04:49:24] <cousteau> \a\b\f\n\r\t\v
[04:50:02] *** Quits: LuKaRo (~LuKaRo@p4fc32052.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:50:28] *** Joins: LuKaRo_ (~LuKaRo@p57b1560c.dip0.t-ipconnect.de)
[04:50:43] *** Quits: magla (~gelignite@55d446ec.access.ecotel.net) (Quit: Stay safe!)
[04:50:44] <cousteau> where \n is newline, \t is tab, \r is I accidentally opened a text file as binary in Windows, and \a \b \f \v are weird stuff I've rarely seen used in practice
[04:50:53] <bruda> The only reason I ask is because I was trying to think of a text representation for a single space. My histogram looks weird with a empty space labeling one of the bars.
[04:51:19] <cousteau> how about ' '
[04:51:22] <cousteau> with single quotes
[04:52:06] <cousteau> I've seen sp used for that purpose before
[04:52:14] <cousteau> (an ASCII table, in fact)
[04:52:15] <bruda> Yea. I guess I could do that. Maybe I can do that for all the individual characters in the label for consistencie.
[04:52:26] <pragma-> ,english '\v'
[04:52:26] <candide> pragma-: A vertical tab.
[04:52:34] <cousteau> be careful with the newline though
[04:52:37] <cousteau> pragma-: oh wow
[04:53:06] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:53:31] <pragma-> ,english '\a'; '\b'; '\f';
[04:53:32] <candide> pragma-: An alert character. Then a backspace character. Finally, a form-feed character.
[04:53:33] <fizzie> There's also \' \" \? \\ and \<1-3 octal digits> as well as \x<any number of hex digits>.
[04:53:42] <fizzie> (C11 6.4.4.4p1)
[04:53:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:54:15] <cousteau> well yeah but those are just protecting the character
[04:54:30] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[04:54:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:54:43] <cousteau> and octal/hex are ...well, what I mean is that they're not "names" of characters
[04:55:10] <cousteau> but yeah I suppose you could use \40 or \x20 (assuming ASCII)
[04:55:10] <fizzie> They're still escape sequences though. And then there's universal character names, which are kind of same but different.
[04:55:13] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:55:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[04:56:04] <fizzie> ,cc int \u03c0 = 3;
[04:56:06] <candide> fizzie: no output: π = 3
[04:56:43] <pragma-> close enough
[04:56:52] <cousteau> bruda: for future reference, https://www.iso-9899.info/n1570.html is what I use if I want to make sure I get the real definition.  A bit hard to search for, but feasible if you know what you're looking for
[04:57:08] <bruda> got it, thanks
[04:57:10] <pragma-> ,c11
[04:57:10] <candide> C1X/C11 draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf - C1X Charter: http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1250.pdf - C1X Overview: http://en.wikipedia.org/wiki/C1X - Changes from C99: http://en.wikipedia.org/wiki/C1X#Changes_from_C99 - C Overview: http://en.wikipedia.org/wiki/C_programming - HTML draft: http://port70.net/~nsz/c/c11/n1570.html
[04:57:21] <pragma-> the html draft there is probably better than the one at iso-9899.info
[04:57:21] <cousteau> for example, say you want to know all the %f %x stuff
[04:57:23] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 264 seconds)
[04:57:33] *** Quits: linguist (~autistic@user/linguist) (Ping timeout: 256 seconds)
[04:57:37] <pragma-> i made the iso-9899 one for candide and it has some minor formatting issues here and there
[04:57:48] <fizzie> The port70.net has a TOC with links, that's its killer feature.
[04:57:50] <cousteau> you Ctrl-F for "[The printf", and it'll take you to the title of "[The printf function]"
[04:58:08] <cousteau> (which itself references [The fprintf function])
[04:58:09] <pragma-> yeah, candide didn't need the toc. it just needed a hyperlink directly to a section of the draft. 
[04:58:28] <pragma-> i discovered the port70 html ones a couple of years later
[04:58:30] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[04:58:51] <pragma-> had i found port70 first, i wouldn't have needed to try to convert the pdf to html myself for candide's purposes
[04:58:54] <pragma-> alas
[04:59:11] <cousteau> I mostly use the iso-9899 ones because it's what candide links, and what's already in quick dial in my browser's URL bar
[04:59:32] <cousteau> pragma-: ouch
[04:59:44] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[04:59:54] <pragma-> i hope the port70 guy converts the c23 draft soon
[04:59:59] <pragma-> my tools aren't as good as his
[05:00:21] <pragma-> wait, doesn't he have his tools online too
[05:01:11] *** Joins: Aloli_92641 (~Administr@223.167.213.234)
[05:01:26] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[05:01:39] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:02:48] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[05:03:20] <pragma-> not that I can see. shame.
[05:03:23] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:a13f:e926:76dd:8e6f) (Ping timeout: 264 seconds)
[05:08:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873) (Remote host closed the connection)
[05:08:23] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[05:08:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b)
[05:09:03] *** Joins: Aloli_92642 (~Administr@223.167.213.234)
[05:10:44] *** Joins: Aloli_92643 (~Administr@223.167.213.234)
[05:11:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b) (Remote host closed the connection)
[05:11:30] *** Quits: Aloli_92641 (~Administr@223.167.213.234) (Ping timeout: 260 seconds)
[05:13:50] *** Quits: Aloli_92642 (~Administr@223.167.213.234) (Ping timeout: 260 seconds)
[05:16:10] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[05:16:22] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:16:26] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[05:17:29] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[05:17:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:18:35] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Quit: WeeChat 3.3)
[05:23:25] *** Joins: superboot (~agentgasm@user/superboot)
[05:24:07] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[05:32:41] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:34:59] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:39:59] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 264 seconds)
[05:43:22] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[05:44:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:46:16] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[05:48:23] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 264 seconds)
[05:48:23] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 264 seconds)
[05:48:32] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[05:48:55] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:49:13] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[05:50:24] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:50:25] <bruda> Another fun day of learning. Think I have everything I need to keep working offline too. Library hotspot goes back next week.
[05:51:24] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[05:52:06] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 260 seconds)
[05:53:21] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[05:55:10] <mikoto-chan> can someone explain me bit clearing?
[05:55:13] <mikoto-chan> I really don't get it
[05:55:35] <mikoto-chan> 0011 &^ 0101 = 0010
[05:56:27] <mikoto-chan> 0011 & 0101 = 0001
[05:56:39] <mikoto-chan> ^0001 = 1110
[05:58:07] <mikoto-chan> ah, NOT takes precendence
[05:58:26] <mikoto-chan> so 0011 & 1010 = 0010
[05:59:09] <Twix> ^ is not not in C
[05:59:19] <Twix> is xor
[06:03:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[06:06:21] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[06:15:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:18:28] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[06:18:44] <mikoto-chan> ~, oops
[06:18:49] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[06:20:36] <Twix> that makes sense now
[06:24:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98)
[06:24:56] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[06:30:01] *** Quits: Arw (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[06:32:24] *** Joins: dohtem (uid524096@user/dohtem)
[06:32:51] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:33:49] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[06:35:01] *** Quits: bruda (~bruda@172.58.63.98) (Ping timeout: 256 seconds)
[06:36:53] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:44:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:45:33] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:45:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:47:31] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:f051:c808:206f:eb93)
[06:52:20] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:06] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:02:46] <|smlckz|> hmm, in musl libc, printf prompts don't work.. for now, i'm using setvbuf(stdout, NULL, _IONBF, 0); can i do it before main()?
[07:04:12] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[07:06:21] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:08:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[07:11:44] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Quit: Leaving)
[07:14:04] *** Quits: joev (~joev@user/joev) (Quit: WeeChat 2.3)
[07:15:25] *** Joins: bindu (~bindu@user/bindu)
[07:15:43] *** Quits: AmR (~AmREiSa@156.199.86.69) (Quit: Konversation terminated!)
[07:16:10] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[07:16:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:17:15] *** Joins: joev (~joev@user/joev)
[07:18:13] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[07:19:05] <mcf> maybe you forgot to fflush after the printf?
[07:25:47] *** Joins: tinyweasel (~weasel@user/tinyweasel)
[07:29:17] <|smlckz|> mcf: then i have to put fflush() after every printf prompt, right?
[07:30:06] <mcf> if you want to flush the output at those points, yes
[07:30:13] *** Joins: Raguile (~Raguile@user/raguile)
[07:33:56] *** Quits: alch (~alch@151.82.58.148) (Read error: Connection reset by peer)
[07:34:39] <|smlckz|> this is exercises given by college, everyone is using dev-c++ on windows.. most of them learning C for the first time.. and prof doesn't like when the few who know some C beforehand ''show off'' that.. 
[07:34:49] *** Quits: Raguile (~Raguile@user/raguile) (Remote host closed the connection)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:02] <|smlckz|> so i want to keep my programs like what the professor would like to see.. not a great experience..
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:16] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[07:37:43] *** Joins: alch (~alch@to-18-77-126.service.infuturo.it)
[07:38:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:38:17] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[07:41:22] <|smlckz|> he doesn't scold directly, but the way he says makes me feel sick.. ''if you know ''all'' of c, you may leave my class, you don't have to attend these classes''
[07:42:05] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[07:43:31] *** Joins: pi0 (~default@user/pi0)
[07:45:40] <mcf> i don't see why calling fflush() would be considered showing off. can you explain to him that it's necessary to show the prompt on your operating system?
[07:46:46] *** Joins: gaboflowers (~gaboflowe@2800:150:128:adf:b4a1:9e6f:d41b:b645)
[07:46:51] <pi0> https://dpaste.org/OiOG
[07:47:03] <pi0> not sure how to resolve these
[07:49:08] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:a13f:e926:76dd:8e6f)
[07:49:48] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:50:04] <gaboflowers> pi0 line 24 i think it should be printf("%d", response), or any numeric fmt to print the enum
[07:50:38] *** Quits: Aloli_92643 (~Administr@223.167.213.234) (Ping timeout: 260 seconds)
[07:51:10] <pi0> i updated that , however i am still getting that char * error 
[07:51:17] <mcf> probably should be an explicit cast to int, since CURLcode is an enum type. printf("%d", (int)response);
[07:51:28] <gaboflowers> pi0 got a solution for curlcodes https://stackoverflow.com/a/7166165
[07:51:31] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 250 seconds)
[07:51:32] *** jmiehe1 is now known as jmiehe
[07:51:46] *** Parts: mikess (~sam@user/mikess) ()
[07:52:06] <mcf> first error is because you passed a function as an fprintf argument, where it expected a string (for %s). you probably meant to call the curl_easy_strerror() function
[07:52:46] <gaboflowers> ooh, i thought it was just a weird redef
[07:54:42] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[07:55:21] *** Joins: arinov (~arinov@213.194.126.155)
[07:56:32] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[07:57:48] *** Joins: pulse (~pulse@user/pulse)
[08:01:48] <pi0> thank you gaboflowers 
[08:02:07] *** Joins: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de)
[08:03:22] *** Joins: jinsun__ (~quassel@user/jinsun)
[08:03:34] <pi0> sorry fellas new to c
[08:03:40] <pi0> programming in general
[08:03:42] <pi0> CString str;
[08:03:43] <pi0> str.Format("%d", res);
[08:03:56] <pi0> i should use these instead based off the stackexchange?
[08:04:12] <|smlckz|> mcf, another student only mentioned ''float'' while prof was talking about ints, that student [ comparable to the youtubers ] got roasted.. i can't imagine how i'll be roasted if i dare to tell him about stdout buffering.. DX
[08:04:44] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[08:05:25] <pi0> actually not sure how to resolve this issue
[08:06:50] <caze> pi0: Do you know what types are?
[08:07:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[08:07:36] <pi0> i do
[08:07:55] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[08:07:57] <pi0> for example like the primative ones?
[08:08:09] <caze> pi0: What type is curl_easy_strerrror?
[08:08:45] <pi0> i would say of type curl
[08:08:47] <|smlckz|> <pi0> str.Format("%d", res); << either this is not C.. or i don't know how it works..
[08:08:55] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Client Quit)
[08:09:09] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[08:09:30] <caze> pi0: It has type `const char * (*)(CURLcode)`
[08:09:36] *** Quits: gaboflowers (~gaboflowe@2800:150:128:adf:b4a1:9e6f:d41b:b645) (Quit: Leaving)
[08:09:47] <caze> pi0: It's a function pointer.
[08:10:00] <caze> pi0: Maybe look up the documentation for it?
[08:10:21] <caze> ,g curl_easy_strerror
[08:10:22] <candide> caze: (13,700 results) libcurl - curl_easy_strerror(): <https://curl.se/libcurl/c/curl_easy_strerror.html>
[08:10:58] <caze> const char *curl_easy_strerror(CURLcode errornum); Description The curl_easy_strerror function returns a string describing the CURLcode error code passed in the argument errornum.
[08:12:06] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[08:13:24] <pi0> fprintf(stderr, "curl_easy_perform() failed: %s\n",
[08:13:26] <pi0>             curl_easy_strerror(response));
[08:14:01] <derpadmin> hello everyone... I made a hello world server in C... I am self-taught and not that good... https://termbin.com/e8p3 can you spot some gross errors I might have done?
[08:14:22] <pi0> boom nice! its for a silly project to get the daily lotto numbers 
[08:14:56] <pi0> i was not sure on what other project to create lol i will eventually build more on this 
[08:15:09] <derpadmin> I still have the strtol explanation from caze that I saved... so I know the level of skills here is quit high
[08:16:01] <derpadmin> my main goal is more to learn C than anything...
[08:17:04] <pi0> thank you guys! mcf, caze, |smlckz|
[08:18:22] *** Joins: reset (~reset@user/reset)
[08:26:57] <pi0> caze: am i able to man those examples too?
[08:28:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[08:29:03] <pi0> compiles nicely!
[08:30:47] <Xgc> derpadmin: Small issue with all your functions which are defined to return an int, yet they don't actually return a value.  Use void instead or make sure you do return a value.
[08:31:37] <derpadmin> thanks Xgc
[08:31:49] <derpadmin> I have obviously no idea what i'm doing :)
[08:33:26] <derpadmin> it makes sense...
[08:34:20] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[08:34:33] <pi0> caze: do you recommend a tutorial for learning c
[08:34:52] <pi0> my code was based off a youtube tutorial
[08:36:29] <Xgc> derpadmin: What compiler do you use?
[08:36:39] <derpadmin> gcc
[08:36:54] <Xgc> derpadmin: Compile with at least these options: gcc -Wall -W ...
[08:37:09] <Xgc> derpadmin: You'll see a few warnings.
[08:37:09] <derpadmin> will do
[08:37:12] <derpadmin> ah
[08:37:46] <|smlckz|> -W ... ?
[08:43:43] <derpadmin> I don't find the capital -W in the gcc manual
[08:43:51] <derpadmin> is it the same as lowecase -w ?
[08:49:30] <Xgc> derpadmin: That's an older option (still supported).  The new version of the option is: -Wextra
[08:49:36] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[08:49:45] <derpadmin> got it, thank you
[08:49:48] <Xgc> -w is completely different.
[08:50:08] <derpadmin> I was able to fix an error so far
[08:50:29] <derpadmin> I will always compile with -Wall and -Wextra from now on...
[08:54:53] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:57:25] <derpadmin> I guess I can ignore the warning about unused variable "int set_socket_port_reuse = setsockopt(tcp_socket, SOL_SOCKET,  SO_REUSEPORT, &TRUE, sizeof(TRUE));" since I use that int to check the return code of setsockopt
[08:58:54] <derpadmin> ah no, the compiler was right
[08:59:52] <derpadmin> I was checking set_socket_reuse twice instead of checking set_socket_port_reuse
[08:59:54] <derpadmin> derp
[09:00:02] <derpadmin> thanks for your help!
[09:03:57] <regulate> 3
[09:07:15] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:09:53] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[09:16:26] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:16:52] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[09:18:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98) (Ping timeout: 264 seconds)
[09:22:01] <pi0> caze: you there?
[09:26:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[09:29:06] *** Joins: jbauer (~jbauer@146.71.11.98)
[09:29:29] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[09:33:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:35:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:38:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:38:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:38:03] *** Joins: wroathe (~wroathe@user/wroathe)
[09:42:07] *** Quits: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de) (Quit: Leaving)
[09:42:56] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[09:43:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[09:44:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[09:45:51] *** Joins: Atque (~Atque@user/atque)
[09:49:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:41b0:6e8:d3fa:5cea)
[09:49:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:41b0:6e8:d3fa:5cea) (Changing host)
[09:49:58] *** Joins: skapata (~Skapata@user/skapata)
[09:55:53] *** Joins: cation21 (cation@user/cation)
[09:56:00] *** Joins: Batzy (~Batzy@user/batzy)
[09:56:05] <Batzy> what's the channel for c++
[09:56:12] *** Joins: skeels (uid493124@uxbridge.irccloud.com)
[09:57:06] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[09:57:09] <Batzy> oh it's ##c++ nice
[09:57:32] <skeels> why does line 9 give a warning? "assignment to ‘list *’ from incompatible pointer type ‘struct list *’" https://bpa.st/LASQ
[09:59:07] <skeels> why can't i do "list *next" in struct typedef?
[09:59:10] *** cation21 is now known as cation
[09:59:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:59:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:59:29] *** Joins: wroathe (~wroathe@user/wroathe)
[10:01:03] <tusko> rust
[10:02:01] <floatcomplex> nope
[10:02:01] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[10:02:26] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:02:59] <dave0> skeels: aha you didn't give your struct a tag
[10:03:36] <dave0> skeels: typedef struct list { int item; struct list *next; } list;
[10:04:00] * rcf continues to recoil at the idea of such typedefs but will not complain too much
[10:04:02] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[10:04:04] <floatcomplex> or just struct list { int item; struct list * next; }
[10:05:15] *** Joins: mahmutov (~mahmutov@37.155.41.41)
[10:05:32] <skeels> dave0: that works but i still don't understand what was wrong
[10:05:43] <floatcomplex> skeels: you never typed "list"
[10:06:12] <skeels> floatcomplex: that won't let me do `list *head` complains it should always be `struct list *head`
[10:06:20] <floatcomplex> yep
[10:06:24] <floatcomplex> because it should
[10:06:30] <skeels> floatcomplex: i did, after the }
[10:07:16] <dave0> skeels: http://www.c-faq.com/decl/selfrefstruct.html
[10:08:03] <floatcomplex> that page would be a lot shorter without typedef
[10:13:23] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:16:02] <skeels> struct declares a struct and typedef lets me use that without writing "struct"
[10:16:05] <skeels> is that correct?
[10:17:14] <Batzy> If I ask a c++-ish question here because #c++ is dead how fast will i get kicked
[10:19:07] <Batzy> https://bpa.st/IE7Q why is line 14 segfaulting, and anything for that pointer is just filling it with "nan". the dtsrv is from http://www.netlib.org/lapack/explore-html/de/da4/group__double__blas__level1_gad2a01dd62718b28e35b752dbad8474ab.html
[10:19:08] <candide> Title of Batzy's link: LAPACK: dtrsv
[10:19:33] <Batzy> it's bothering me pretty bad
[10:19:33] <floatcomplex> skeels: yes, typedef lets you do that, but that's not a thing you should necessarily want to do
[10:23:13] <skeels> how is `typedef struct {} list` different from `struct list {}`?
[10:23:15] <floatcomplex> Batzy: can you reproduce the behaviour in a call to dtrsv_ from C code? and what are those (double *) casts for, what is the data type without doing thet
[10:23:33] <floatcomplex> skeels: one of them is a typedwf
[10:23:45] <floatcomplex> don't use a typedef for that
[10:23:52] <skeels> floatcomplex: they behave the same
[10:24:00] <floatcomplex> just type struct list when you want to use it
[10:24:03] <Batzy> floatcomplex: well dtsrv_ needs a (double *), the regular type is what you see x declared as
[10:24:03] *** Quits: Posterdati (~posterdat@host-82-63-88-92.business.telecomitalia.it) (Ping timeout: 250 seconds)
[10:24:11] <Batzy> it comes from a library called Eigen for doing linear algbera
[10:24:29] <floatcomplex> Batzy: what is it
[10:24:38] <Batzy> for an eigen type x there is an underyling x.data() which is just an array
[10:24:40] <floatcomplex> Batzy: before you cast it to double
[10:24:41] <Batzy> double array
[10:24:50] <floatcomplex> then why do you need to cast it
[10:25:00] <Batzy> i need to cast it as a pointer
[10:25:01] <floatcomplex> if you need to cast it something's wrong
[10:25:06] <Batzy> look at the signature for dtsrv i linked
[10:25:15] <floatcomplex> yes i know i've called it from c code
[10:25:19] <floatcomplex> never from c++
[10:25:22] <floatcomplex> never needed a cast
[10:25:25] <Batzy> yes do you want to see the error
[10:25:28] <Batzy> if i dont cast
[10:26:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[10:27:34] <Batzy> floatcomplex: okay so it doesnt err, but if I cout x.data() I just get a memory address?
[10:28:30] <Batzy> so I think I need to cast, didnt i?
[10:29:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:30:11] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:30:59] <floatcomplex> what is the type of x.data()
[10:32:29] <floatcomplex> you're calling a fortran abi function using a c definition of it, which is safe, except your preconceptions from the c++ type system seem to be getting in the way
[10:32:49] *** Joins: b0b_ (~xosap@82.15.39.69)
[10:33:13] <Batzy> yeah i have no idea what to do
[10:33:19] <floatcomplex> just don't fucking cast it
[10:33:43] <floatcomplex> see if it works when you call it from C code
[10:34:55] <Batzy> i didnt cast it
[10:35:03] <Batzy> i told you just now i tried it without casting
[10:35:21] <Batzy> then if i cout x.data() it just gives me a memory addr
[10:35:30] <Batzy> if I cout x i get nan
[10:35:44] <floatcomplex> none of that is a segfault
[10:35:51] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[10:35:56] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[10:36:01] <Batzy> int dtrsv_(const char *UPLO, const char *TRANS, const char *DIAG,
[10:36:03] <Batzy>            const int *N, const double *A, const int *LDA,
[10:36:05] <Batzy>            double *X, const int *INCX);
[10:36:13] <Batzy> oops... anyways thats my prototype for dtrsv
[10:36:30] <floatcomplex> cout isn't going to help you with this
[10:36:35] <Batzy> hm
[10:36:39] <floatcomplex> just write C, or as close to it as you can
[10:36:43] <Batzy> either way it's "not working"
[10:36:55] <Batzy> I can't because I am using Eigen for this
[10:36:58] *** Joins: Posterdati (~posterdat@host-95-233-159-142.retail.telecomitalia.it)
[10:36:59] <floatcomplex> did it stop segfaulting?
[10:37:18] <floatcomplex> also why are you mixing eigen and lapack
[10:37:24] <Batzy> Ano
[10:37:25] <supakeen> doesnt it just need a deref
[10:37:30] <Batzy> it's still segfaulting
[10:37:42] <Batzy> for larger matrices, it segfaults
[10:38:05] <Batzy> for comparison, ive programmed the backsubstitution algo by hand, and it's working fine
[10:38:11] <floatcomplex> Batzy: figure out how to call dtrsv_ from a minkmal C example
[10:38:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:38:22] <floatcomplex> then do that in c++ without eigen
[10:38:26] <Batzy> i casted it
[10:38:28] <floatcomplex> then do it with eigen
[10:38:29] <Batzy> to do that
[10:38:38] <floatcomplex> if you need to cast, something is wrong
[10:38:44] <Batzy> yes i did that, im trying to do it with eigen now
[10:40:05] <floatcomplex> and if you already have a naive back substitution algorithm and it's fast enough for the use case, absolutely use that instead of lapack
[10:40:27] <floatcomplex> i wrote a shitty one in c a couple years ago and benchmarked against the lapack one and the lapack one was dog slow
[10:40:36] <Batzy> lapack is much faster
[10:40:40] <Batzy> usually
[10:40:50] <Batzy> anyways id like to see it or get it working
[10:41:23] <floatcomplex> well if you have to cast, or think you have to cast, it's probably going to keep segfaulting
[10:41:26] <floatcomplex> those things are related
[10:41:38] <Batzy> it segfaults with or without a cast
[10:41:56] <Batzy> i have no idea what's going on with it or how to fix it
[10:42:14] <floatcomplex> Batzy: do you have non-eigen c or c++ code that calls dtrsv_ without segfaulting
[10:42:24] <floatcomplex> and returns the expected answer
[10:43:10] <Batzy> not really but i did it with dgemm
[10:43:20] <floatcomplex> do it with this one
[10:43:23] <Batzy> nah
[10:43:35] <floatcomplex> make sure it's not expecting an array of arrays and you've giving it a single block of memory, or vice versa
[10:43:37] <Batzy> it's not going to be very illuminating
[10:43:49] <Batzy> it works with eigen
[10:43:57] <Batzy> well, with eigen's .data() thing
[10:44:02] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:44:12] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:44:43] <Batzy> eigen is even column major and so on
[10:44:50] <floatcomplex> those words don't mean anything
[10:45:00] <floatcomplex> to the computer
[10:45:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:45:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:45:54] *** Joins: wroathe (~wroathe@user/wroathe)
[10:46:09] <Batzy> this isn't very useful
[10:46:16] <floatcomplex> if you have your own handrolled dgrsv_ routine that is working, make it have exactly the same API as the lapack one, and figure out where yours breaks when you call it with the eigen stuff
[10:46:33] *** Joins: retroid_ (~retro@176.255.22.26)
[10:46:46] <floatcomplex> dtrsv_ whatever
[10:46:51] <Batzy> all i've learned is that i might not need to cast, but maybe i do
[10:46:56] <Batzy> either way the behavior is the same
[10:49:16] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:49:32] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:50:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[10:50:47] *** Quits: soapsudsxx (~soapsudsx@141.193.188.148) (Remote host closed the connection)
[10:51:22] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[10:51:40] *** Joins: soapsudsxx (~soapsudsx@141.193.188.148)
[10:52:04] <Batzy> I fixed it floatcomplex 
[10:52:15] <Batzy> dimension issues, I should've used R.rows() instead of R.size()
[10:52:46] *** Quits: soapsudsxx (~soapsudsx@141.193.188.148) (Remote host closed the connection)
[10:53:16] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[10:53:17] *** Joins: mrig (~AdiIRC@user/mrig)
[10:53:32] <Batzy> lata
[10:53:33] *** Parts: Batzy (~Batzy@user/batzy) (WeeChat 3.3)
[10:55:44] *** Joins: soapsudsxx (~soapsudsx@141.193.188.148)
[10:57:20] *** Joins: caveman_ (~caveman@gateway/tor-sasl/caveman)
[10:57:26] *** Quits: soapsudsxx (~soapsudsx@141.193.188.148) (Read error: Connection reset by peer)
[10:57:47] *** Joins: soapsudsxx (~soapsudsx@141.193.188.148)
[10:58:25] *** Quits: soapsudsxx (~soapsudsx@141.193.188.148) (Read error: Connection reset by peer)
[10:58:35] *** Joins: soapsudsxx (~soapsudsx@141.193.188.148)
[10:58:55] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:00:25] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:01:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:04:48] *** Quits: b0b_ (~xosap@82.15.39.69) (Quit: Leaving)
[11:12:16] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[11:12:21] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.174)
[11:23:12] *** Joins: supajerm_ (~supajerm@gateway/vpn/pia/supajerm)
[11:26:51] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 256 seconds)
[11:31:21] *** Quits: rahl (~rahl@102.114.43.243) (Ping timeout: 245 seconds)
[11:33:01] *** Quits: alch (~alch@to-18-77-126.service.infuturo.it) (Read error: Connection reset by peer)
[11:33:21] *** Joins: rahl (~rahl@102.114.106.30)
[11:33:29] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[11:37:01] *** Joins: alch (~alch@mi-18-14-73.service.infuturo.it)
[11:39:44] *** Joins: bango (~bango@80.255.7.101)
[11:41:25] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[11:42:09] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[11:43:19] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[11:45:12] *** Quits: caveman_ (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:48:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:52:52] *** Joins: Everything (~Everythin@37.115.210.35)
[11:54:10] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Ping timeout: 260 seconds)
[11:55:57] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:fc90:4caa:3207:adaf)
[11:58:20] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Quit: leaving)
[12:00:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Read error: Connection reset by peer)
[12:04:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:06:42] *** Quits: bango (~bango@80.255.7.101) (Quit: Leaving)
[12:09:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:11:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:12:11] *** Joins: bango (~bango@80.255.7.101)
[12:12:22] *** Joins: katnis (uid15849@helmsley.irccloud.com)
[12:13:07] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:15:17] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[12:18:42] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:19:53] *** jinsun__ is now known as jinusun
[12:19:57] *** jinusun is now known as jinsun
[12:22:08] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[12:23:59] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[12:31:34] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[12:33:56] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[12:41:29] *** Joins: lleo (~leo@31-161-146-159.mobile.kpn.net)
[12:42:09] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:44:30] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[12:45:04] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:45:19] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:45:23] *** Quits: echoSMILE (uid504326@user/echosmile) (Ping timeout: 264 seconds)
[12:46:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:46:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:46:12] *** Joins: wroathe (~wroathe@user/wroathe)
[12:46:45] *** Quits: subvisor (sid502026@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[12:46:56] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[12:47:10] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[12:48:51] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[12:48:59] *** Joins: echoSMILE (uid504326@user/echosmile)
[12:49:01] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:49:03] *** Joins: ullbeking (sid5364@user/ullbeking)
[12:49:32] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Max SendQ exceeded)
[12:49:35] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: Manouchehri (sid384576@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[12:49:46] *** Joins: Pent (sid313808@lymington.irccloud.com)
[12:49:58] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[12:50:09] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[12:50:28] *** Joins: subvisor (sid502026@helmsley.irccloud.com)
[12:50:31] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[12:51:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[12:51:13] *** Joins: Manouchehri (sid384576@hampstead.irccloud.com)
[12:51:23] *** Quits: zx2c4 (sid204921@gentoo/developer/zx2c4) (Ping timeout: 264 seconds)
[12:51:23] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 264 seconds)
[12:52:21] *** Joins: earnestly (~earnest@user/earnestly)
[12:52:24] *** Joins: katnis (uid15849@helmsley.irccloud.com)
[12:53:33] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[12:53:48] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[12:53:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:54:52] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[12:55:16] *** Quits: ullbeking (sid5364@user/ullbeking) (Max SendQ exceeded)
[12:55:42] *** Joins: zx2c4 (sid204921@gentoo/developer/zx2c4)
[12:56:11] *** Quits: nohit (sid334887@tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:57:06] *** Joins: bjs (sid190364@user/bjs)
[12:57:07] *** Joins: nohit (sid334887@tinside.irccloud.com)
[12:57:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:58:14] *** Joins: ullbeking (sid5364@user/ullbeking)
[12:59:18] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[13:04:14] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:05:05] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:12:49] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[13:15:01] *** Quits: bango (~bango@80.255.7.101) (Quit: Leaving)
[13:15:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:20:47] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 264 seconds)
[13:21:24] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[13:22:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[13:22:49] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[13:26:29] *** Joins: aliosablack (~chomwitt@ppp-94-67-200-81.home.otenet.gr)
[13:28:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[13:32:40] *** Joins: aradesh (~aradesh@user/aradesh)
[13:37:55] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[13:45:50] <f0xb4t> I have problem with openmpi, when calling it by mpicc it returns error, but with mpiCC it works, when both points to the same file? https://bpa.st/KUUQ
[13:47:15] <f0xb4t> I don't understand this case
[13:49:51] *** Joins: Famine_ (~Famine@user/famine)
[13:51:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[13:52:20] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 246 seconds)
[13:54:35] *** Quits: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it) (Ping timeout: 244 seconds)
[13:58:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:00:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:01:04] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[14:04:54] *** Quits: mahmutov (~mahmutov@37.155.41.41) (Ping timeout: 260 seconds)
[14:09:11] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 268 seconds)
[14:09:22] *** Joins: immibis (~hexchat@62.156.144.218)
[14:10:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:12:29] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:14:49] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[14:15:15] *** Quits: aliosablack (~chomwitt@ppp-94-67-200-81.home.otenet.gr) (Quit: Leaving)
[14:16:50] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:17:36] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Client Quit)
[14:19:13] *** imm__ is now known as imm_
[14:20:25] *** Quits: mniip (mniip@libera/staff/mniip) (Quit: This page is intentionally left blank.)
[14:22:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[14:23:42] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:27:48] *** Joins: mniip (mniip@libera/staff/mniip)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:34:19] *** Joins: pulse (~pulse@user/pulse)
[14:41:25] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[14:41:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[14:44:29] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[14:45:03] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[14:49:31] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.180)
[14:50:06] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.174) (Ping timeout: 245 seconds)
[14:51:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[14:52:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:52:57] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.213)
[14:53:55] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[14:54:22] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.180) (Ping timeout: 260 seconds)
[14:55:44] *** Joins: FragByte (~christian@user/fragbyte)
[14:58:53] *** Joins: rkta_ (~rkta_@2a00:f48:1003:1::8bee:ec40)
[15:01:40] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[15:11:11] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[15:13:12] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[15:13:21] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:15:25] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[15:18:34] *** Joins: arinov (~arinov@178.240.135.64)
[15:19:31] *** Joins: bindu (~bindu@user/bindu)
[15:20:16] *** Joins: cousteau (~cousteau@user/cousteau)
[15:33:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[15:35:22] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:35:37] *** Quits: alch (~alch@mi-18-14-73.service.infuturo.it) (Ping timeout: 256 seconds)
[15:35:56] *** Joins: metallic (~AdminUser@231.red-83-53-214.dynamicip.rima-tde.net)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b)
[15:37:20] *** Joins: alch (~alch@to-18-75-65.service.infuturo.it)
[15:42:54] *** Joins: random-nick (~random-ni@87.116.176.55)
[15:43:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[15:49:40] <tk> f0xb4t: so aside from this being a C channel, mpicc being a C compiler wrapper and *.cpp being indicative of either a set of C++ files or C pre processor files (stupid extension) it sounds like your particular system expects you to pass -lm to the compiler for some math.h functions
[15:51:05] <tk> f0xb4t: a passing glance at the man pages which you should probably have, indicates that if indeed you do intend to use a C compiler to compile your files ending in ".cpp" and you need to pass extra flags at link-time then you can use mpicc -showme:compile and mpicc -showme:link to retrieve the list of flags which mpicc would have passed had you used it as a pure wrapper
[15:52:21] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:54:35] *** Quits: skeels (uid493124@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:55:49] *** Quits: kuoi (~kuoi@109.175.166.58) (Quit: kuoi)
[15:58:28] *** Joins: Rounin (~david@84.212.130.215)
[15:59:42] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[16:03:57] *** Joins: kuoi (~kuoi@109.175.166.58)
[16:04:10] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[16:05:07] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[16:09:18] *** Joins: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de)
[16:12:50] *** Joins: Klinda (~superleag@user/klinda)
[16:13:00] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[16:13:18] *** Joins: de-facto (~de-facto@user/de-facto)
[16:16:07] *** Quits: metallic (~AdminUser@231.red-83-53-214.dynamicip.rima-tde.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:16:22] *** Joins: metallic (~AdminUser@231.red-83-53-214.dynamicip.rima-tde.net)
[16:26:32] *** Quits: metallic (~AdminUser@231.red-83-53-214.dynamicip.rima-tde.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:26:50] *** Joins: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net)
[16:27:20] *** Quits: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net) (Client Quit)
[16:27:37] *** Joins: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net)
[16:29:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[16:30:13] *** Joins: terminalpusher (~terminalp@2a01:586:9939:1:4737:6a0e:c20e:4e13)
[16:31:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:35:29] *** Quits: lleo (~leo@31-161-146-159.mobile.kpn.net) (Ping timeout: 265 seconds)
[16:39:39] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:33] <f0xb4t> tk: sounds logically but how can he knows it, when both mpicc and mpiCC are symplink to exactly same file? both 'man mpicc' and 'man mpiCC' shows the same man page?
[16:42:53] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[16:43:13] <f0xb4t> tk: ok I did: mpicc -showme:link -showme:compile
[16:43:24] <f0xb4t> tk: then I did: mpiCC -showme:link -showme:compile
[16:43:29] *** Quits: zacts (~zacts@user/zacts) (Quit: leaving)
[16:43:54] <f0xb4t> tk: and the only difference between them was '-lmpi_cxx' in mpiCC
[16:44:18] <f0xb4t> tk and now, how it happens when both are symlinks to exactly same file???
[16:44:35] <fizzie> A program is told the name it's invoked with (in argv[0]), and can make decisions based on that.
[16:44:45] *** Joins: seninha (~seninha@user/seninha)
[16:44:52] *** Joins: myon98 (~myon98@user/myon98)
[16:46:51] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[16:49:18] *** Quits: arinov (~arinov@178.240.135.64) (Ping timeout: 256 seconds)
[16:51:16] *** Joins: shivesh (~shivesh@user/shivesh)
[16:51:28] *** Joins: cart_man (~rynot@2a00:23c4:2b81:5401:34b0:3739:9242:110c)
[16:56:25] *** Joins: nyah (~nyah@94.6.71.219)
[16:56:40] <f0xb4t> fizzie: ?
[16:56:47] <f0xb4t> fizzie: what do you mean?
[16:57:43] *** Joins: magla (~gelignite@55d45814.access.ecotel.net)
[16:59:32] *** Joins: plastico (~plastico@neomutt/plastico)
[16:59:58] <fizzie> When you call `mpicc ...`, argv[0] will contain the string "mpicc"; when you call `mpiCC ...`, it will contain "mpiCC". The program can, based on that difference, use different libraries.
[17:00:09] <fizzie> It's not all that uncommon. `aplay` and `arecord` are the same binary; `xz` and `xzcat` are the same binary; `true` and `false` sometimes do that; on resource-constrained systems people use busybox, which implements a whole lot of different commands in a single binary.
[17:00:57] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:01:34] *** Joins: mahmutov (~mahmutov@37.155.41.41)
[17:01:51] <tk> ,cc int main(int argc, char **argv) { if (argv[0]) puts(argv[0]); }
[17:01:54] <candide> tk: prog
[17:02:05] <tk> ,sh ln -s prog f0xb4t
[17:02:05] <candide> tk: Success (no output).
[17:02:09] <tk> ,sh ./f0xb4t
[17:02:10] <candide> tk: ./f​0xb4t
[17:02:21] <tk> f0xb4t: ^ hopefully you can see what just happened right?
[17:02:47] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.213) (Ping timeout: 264 seconds)
[17:03:52] <f0xb4t> yeah, see now
[17:03:54] <f0xb4t> thaks
[17:03:57] <f0xb4t> tnaks
[17:04:00] <f0xb4t> eh
[17:04:02] <f0xb4t> thanks
[17:04:03] <f0xb4t> :)
[17:04:03] <candide> f0xb4t: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[17:04:37] <f0xb4t> I know, I know - sorry about that
[17:09:25] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[17:09:26] <owensjrw> ls
[17:09:41] <owensjrw> Good morning all.
[17:10:02] *** Joins: kurahaupo (~kurahaupo@pa49-181-111-71.pa.nsw.optusnet.com.au)
[17:10:50] <owensjrw> Quick question. How do I know if the compiler I have will support C17 or C11 at max?
[17:11:34] *** Joins: [SyntaxError] (~user@user/syntaxerror/x-9308191)
[17:12:03] <owensjrw> Should I just run the flag -std= with all standard versions?
[17:12:37] <kurahaupo> owensjrw: Do you mean you want to be sure it does not support C2x?
[17:12:45] <fizzie> You could also consult the compiler's documentation.
[17:13:47] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[17:13:50] <kurahaupo> fizzie++
[17:14:03] *** Joins: de-facto (~de-facto@user/de-facto)
[17:14:39] <owensjrw> Kurahauop: Is C2x an option? What would __STDC_VERSION__ equate to?
[17:15:02] <fizzie> ,cc -std=c2x printf("%d", __STDC_VERSION__);
[17:15:04] <candide> fizzie: 202000
[17:15:26] <fizzie> Whatever the compiler decides, more or less, since it's not like the standard's ready yet.
[17:15:46] <fizzie> Guess 202000 is kind of reasonable way of saying "2x" though.
[17:16:25] *** Joins: V-T60 (~v@91.203.24.166)
[17:17:30] <owensjrw> Thanks.. You both were helpful.
[17:17:42] <fizzie> In retrospect, maybe the question was more like, "in a configure script or equivalent, how can I figure out which standards are supported", in which case reading the documentation would be kind of AI-complete. But it's not like the flag to select the dialect has to be `-std=...` either, so there's no general answer, only special ones.
[17:18:29] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:19:03] <fizzie> Also, I did printed that wrong, it should've been %ld; it's explicitly a constant with the type `long int`.
[17:19:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[17:20:18] <fizzie> ,cc -std=c2x #define S(x) S_(x) \n #define S_(x) #x \n puts(S(__STDC_VERSION__)); // can't pass -std=c2x to ,expand
[17:20:20] <candide> fizzie: 202000L
[17:21:14] <owensjrw> Last one of the day.. Is it more appropriate to use short, int, long... or the fix width int8, int16, ect.?
[17:22:26] *** Joins: linguist (~autistic@user/linguist)
[17:26:41] *** Quits: linguist (~autistic@user/linguist) (Ping timeout: 256 seconds)
[17:30:56] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:31:18] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[17:33:14] <omegatron> owensjrw: use the datatype with the appropiate value range you need
[17:33:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:34:21] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[17:34:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[17:35:39] <owensjrw> I think I remembering reading somewhere that int or one of the others may be different bit size depending on the hardware. Would the fixed width not solve this?
[17:36:52] <fizzie> It's one of those things people will never agree on. I default to the standard integer types (int, long, long long) for general use, and the fixed-width types when working with network protocols or file formats, since those kind of have to be more specific. And size_t where appropriate.
[17:37:37] <fizzie> "The problem" with the fixed-width types is that they're not required to exist, if the implementation doesn't provide suitable types, so it's at least a theoretical portability problem.
[17:38:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[17:38:48] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[17:39:23] <fizzie> You could argue the int_leastN_t and int_fastN_t types (which are required for N = 8, 16, 32, 64) have the best of both worlds (less vague value ranges, but still available on any conforming implementation), but they're just so long.
[17:39:34] <pragma-> generally, using the least width types will be at least as big as you need. sometimes bigger. so if an exactly fixed-width type doesn't exist, your program will still attempt to use a bigger type and still run.
[17:40:02] <omegatron> i'm always explicit, therefore I use UInt8, SInt8, etc., so that the compiler and human know, that a variable is always of the specified size - if this requires to have somewhere some logic to make sure UInt32 is really 32 bits (with "typedef" or whatever) then I do so
[17:40:26] <pragma-> fixed width types are often misused when the user really just needs an at-least-as-big type. so the user ends up needlessly restricting their programs.
[17:41:05] *** Joins: Atque (~Atque@user/atque)
[17:41:07] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:41:10] *** Joins: testusr (~byterusty@user/testusr)
[17:41:16] <pragma-> fixed width types have their place, but a lot of users often use them when they don't really need them.
[17:41:21] <fizzie> If an implementation doesn't provide a 32-bit type, you can't really have an UInt32 typedef.
[17:41:39] *** Joins: clamiax (~clamiax@net-37-182-97-22.cust.vodafonedsl.it)
[17:41:53] <omegatron> sure I can .. I then just concatenate two UInt16 ..  or four UInt8
[17:42:17] <fizzie> Then you can't use the `+` operator on it, so you would have to wrap all operations into macros or function calls.
[17:42:23] <omegatron> correct
[17:42:34] <omegatron> that's what I do
[17:42:41] <fizzie> That sounds like a painful way to write code.
[17:43:09] <omegatron> it's actually great, because your code runs everywhere
[17:43:42] <omegatron> but sure, it's slower than if the target machine would have a native 16/32/64 Bit type ..
[17:47:41] *** Quits: V-T60 (~v@91.203.24.166) (Remote host closed the connection)
[17:48:00] <fizzie> How about when the target machine doesn't provide any 8-bit type either? Well, I guess if you're wrapping *all* operations with macros/functions, you could emulate one with a wider type and suitable clamping. But that's just weird. I'd much rather use int_leastN_t and just keep in mind the type can be bigger, in order to be able to "write normally".
[17:48:13] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[17:49:39] *** Joins: monkey_ (~user@190.104.116.153)
[17:49:53] <omegatron> well, our framework starts from 4 bit and goes up to 8192 bit, including some "exotic" sizes like 12 bit, 24 bit, 80 bit etc. (for various reasons)
[17:50:00] <cousteau> owensjrw: the rule of thumb is, if an int is good for you, use an int; otherwise, use something else
[17:50:44] <cousteau> int is usually some sort of "native type that is probably more efficient than other types"
[17:51:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b) (Quit: Leaving)
[17:52:21] <cousteau> if you want a type that is exactly 16-bit, signed, and 2's complement, use int16_t
[17:53:13] <cousteau> (but be warned that some weird platforms might not have that)
[17:53:26] <cousteau> if you want a type that is at least 16-bit, signed, not necessarily 2's complement, and the smallest one fulfilling these requirements, use int_least16_t
[17:54:01] <cousteau> if you want a type that is at least 16-bit, signed, not necessarily 2's complement, and which the implementation considers "the most efficient", use int_fast16_t (which will likely just be an int)
[17:54:16] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:55:18] <rcf> For the most general case I'd strongly argue for unsigned in place of int, because you can't use anything signed without wrapping arithmetic to avoid overflow and the resulting UB. 
[17:55:25] <cousteau> if you want to store a character use char, if you want to store a byte use unsigned char, if you want to store a size or an element count use size_t, and that covers pretty much most cases
[17:55:39] *** Joins: dohtem (uid524096@user/dohtem)
[17:56:00] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[17:56:06] <cousteau> rcf: unsigned can do very weird things for arithmetic operations
[17:56:14] <rcf> Yes, but you know what they are. 
[17:56:20] <rcf> Not so with signed. 
[17:56:46] *** Quits: terminalpusher (~terminalp@2a01:586:9939:1:4737:6a0e:c20e:4e13) (Remote host closed the connection)
[17:57:21] <cousteau> like x+y/2 where y is "negative" stored as an unsigned
[17:57:53] <fizzie> "The problem" with unsigned types is that it puts the unavoidable discontinuity right next to 0, which is a lot more common number than INT_MIN. That's the rationale for why Go uses signed types even for "naturally unsigned" quantities, like lengths. (Of course the context is a little different, because the arithmetic on Go's signed types is fully defined too.)
[17:58:16] <cousteau> basically, don't use unsigned if you intend to perform arithmetic operations with them and keep your sanity
[17:58:20] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[17:58:26] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[17:58:32] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[17:58:33] <rcf> I mean, that'd be true... if signed were fully defined. 
[17:58:42] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[17:58:45] <cousteau> and don't use signed if you're going to be overflowing it, or performing any bit operation, like shifts and bitwise masks
[17:59:21] <fizzie> Basically, don't use any types, and you won't have any problems either.
[17:59:30] <cousteau> and don't use floating point :)
[18:00:08] <cousteau> but yeah, what fizzie said.  Having the discontinuity right in the 0 will give you trouble if you do arithmetic.  I've had that happen to me.
[18:00:41] <cousteau> (perfectly rational, defined, and explainable trouble; but trouble after all)
[18:00:51] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[18:01:15] <rcf> Perhaps more usefully, I'd also reject any notion of 'char' relating to actual characters given modern encodings (modern meaning anything since the 1980s and the extension of ASCII)
[18:01:39] <cousteau> but it's how you store strings in the most usual way
[18:02:22] <cousteau> I mean, if we get technical, there is no concept of "character" in C as Unicode defines it; the closest you get is "Unicode code points"
[18:03:13] <rcf> Indeed, which is why they should be seen as bytes with implementation-defined signedness and nothing more. 
[18:03:49] <cousteau> let's just refer to them as "text-encoding units" and leave it at that
[18:04:00] *** Quits: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[18:04:43] <cousteau> basically the only use for char is as char* or char[], to hold strings
[18:05:11] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:a13f:e926:76dd:8e6f) (Quit: Leaving.)
[18:05:16] <cousteau> for "array of bytes" I'd use unsigned char [] rather than char [], since it's sort of the "universal type"
[18:07:01] <cousteau> (everything can be accessed as an array of "character type" (char/signed char/unsigned char), and unsigned char is guaranteed to have no trap representations, and being unsigned somewhat matches my previous "use unsigned types for binary stuff" comment)
[18:07:29] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[18:07:32] *** Quits: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:07:45] <cart_man> Is there anybody here who are familiar with Curl lib?
[18:08:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:12:43] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[18:12:51] <omegatron> if your software project is important enough, you are better off to make your own small testsuite program, where you check, if your choice of compiler (and options) produces code, which works on the target machine as expected, especially around the topic of arithmetic ... then you really know and can adapt your code/options, if it does not
[18:13:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7)
[18:13:50] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[18:14:10] <rcf> Or just code to the standard and avoid any and all breakage without the need to test anything. 
[18:15:36] <rcf> The amount of old code I have seen which made bad assumptions based on old implementations in the name of cleverness is too damn high 
[18:17:00] <cousteau> in my previous x+y/2 example, if you use unsigned, you still have to check if y is supposed to be representing a negative number before proceeding
[18:17:22] <rcf> True
[18:17:44] <cousteau> if you use signed, and know that x+y/2 will not overflow, because of the range of values x and y can have or whatever, then you don't need to  check anything
[18:18:07] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:18:42] <cousteau> (and what's worse, you may not realize that doing x+y/2 with unsigned numbers that represent signed amounts is wrong until it's too late.  After all, all other operations work, + - *)
[18:19:37] <rcf> I suppose what is really needed is an integer type with defined overflow behavior, which would be *really* easy to put in the standard now that two's complement is mandatory. 
[18:20:14] <rcf> (supplementary type, of course, to keep the old fogeys from whining too much) 
[18:20:16] <cousteau> the reason for the standard to not define the behavior on signed overflow is precisely to allow compilers to not consider that case, and thus allow them generate more efficient code.  If you force the use of unsigned unnecessarily, you might be limiting potential optimizations
[18:21:40] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[18:22:04] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Quit: ZNC - https://znc.in)
[18:22:56] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[18:23:11] <cousteau> an example I like a lot is   int will_overflow(int x) { return (x+1) < x; }   A compiler with optimizations enabled might realize that there is no valid case where x+1 will be less than x, and optimize that function to a simple `return 0;`
[18:23:20] <rcf> Obviously the existing types should be left alone as much as they have been so far. 
[18:24:10] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[18:24:24] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[18:25:31] *** Quits: shivesh (~shivesh@user/shivesh) (Ping timeout: 245 seconds)
[18:26:09] <cousteau> another example is when I suggested the Arduino developers to enable -fwrapv by default (GCC's flag for "make signed integers wrap in the same way unsigned integers do"), since their documentation said that it's perfectly ok to "roll over" the ints, and they told me that they wouldn't do it as it seemed to affect performance (or at least code size)
[18:26:19] <cousteau> but hey, at least they eventually changed the documentation
[18:27:19] <owensjrw> Thanks for all the conversation. Have a great day.
[18:27:53] <cousteau> rcf: anyway I don't think it's easy to make SOME signed integer types wrap and SOME not.  That'd imply having two kinds of signed types, which I don't think compilers would be too happy with
[18:28:04] <cousteau> owensjrw: thanks, you too!
[18:30:20] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[18:30:26] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[18:31:50] *** Joins: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com)
[18:32:27] *** Joins: shivesh (~shivesh@user/shivesh)
[18:32:33] *** Joins: xsaew (~xosap@82.15.39.69)
[18:32:43] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Quit: ZNC 1.8.2 - https://znc.in)
[18:33:03] <rcf> cousteau: provided it's purely an additional set of types, it wouldn't be any different from stdatomic, right down to the potential for a substantial drop in performance when using them. 
[18:34:00] <cousteau> I was thinking more on the mess that is adding a new type, or set of types, with different rules
[18:34:25] <cousteau> consider that all the [u]int*_t types introduced in C99 are just aliases to existing types
[18:34:27] *** Quits: testusr (~byterusty@user/testusr) (Quit: Leaving...)
[18:34:58] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[18:35:16] <cousteau> and the mess that forcing the existence of a `long long` native type of 64 bits or more might have been
[18:35:47] <cousteau> so they MIGHT be reluctant to introducing the sort of type you propose.  Then again, maybe not; GCC has lots of weird stuff already
[18:37:19] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:38:25] <fstd> ...but does it have strings?
[18:40:12] <rcf> cousteau: Following the stdatomic approach, if changing the rules is indeed much too difficult for some implementation, a macro could be defined indicating that overflow-safe types don't exist. 
[18:41:32] *** Quits: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com) (Quit: HaMsTeRs)
[18:41:49] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[18:42:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:42:20] *** Joins: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com)
[18:42:34] *** Quits: cart_man (~rynot@2a00:23c4:2b81:5401:34b0:3739:9242:110c) (Remote host closed the connection)
[18:43:12] <cousteau> fstd: goddammit!  :D
[18:44:47] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[18:49:46] *** Quits: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com) (Remote host closed the connection)
[18:50:08] *** Joins: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com)
[18:51:35] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[18:57:06] *** Joins: AmR (~AmREiSa@156.199.219.108)
[18:57:14] *** Joins: mrig (~mrig@user/mrig)
[19:02:11] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:fc90:4caa:3207:adaf) (Ping timeout: 264 seconds)
[19:04:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:05:43] *** Quits: alch (~alch@to-18-75-65.service.infuturo.it) (Read error: Connection reset by peer)
[19:06:02] *** Quits: Richard_Cavell (uid165693@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:06:41] *** Joins: quartz (~quartz@user/quartz)
[19:07:07] *** Joins: Richard_Cavell (uid165693@ilkley.irccloud.com)
[19:08:01] *** Joins: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net)
[19:08:13] *** Joins: alch (~alch@151.38.169.34)
[19:08:45] *** Joins: cart_man (~rynot@2a00:23c4:2b81:5401:7493:3190:5141:6d12)
[19:11:25] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[19:11:30] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 260 seconds)
[19:11:53] *** Joins: quartz (~quartz@user/quartz)
[19:12:17] *** Joins: echoSMILE (uid504326@user/echosmile)
[19:12:26] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[19:15:27] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:16:52] <fstd> godverdomme
[19:21:13] *** Joins: node1 (~node1@user/node1)
[19:23:20] *** Quits: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com) (Quit: HaMsTeRs)
[19:24:17] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:28:55] *** Quits: cart_man (~rynot@2a00:23c4:2b81:5401:7493:3190:5141:6d12) (Remote host closed the connection)
[19:28:57] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[19:29:09] *** Joins: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de)
[19:30:06] *** Quits: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985) (Quit: You have been kicked for being idle)
[19:30:07] *** Joins: cart_man (~rynot@2a00:23c4:2b81:5401:b887:5e96:a7fa:a864)
[19:33:57] *** Joins: V-T60 (~v@91.203.24.166)
[19:34:18] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[19:34:40] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[19:35:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:36:34] *** Quits: V-T60 (~v@91.203.24.166) (Remote host closed the connection)
[19:39:51] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[19:42:47] *** Joins: Hax0r (~Hax0r@146.251.73.156)
[19:44:02] <Bou> potverdrie
[19:45:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:45:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:45:43] *** Joins: wroathe (~wroathe@user/wroathe)
[19:45:59] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:48:45] *** Joins: pulse (~pulse@user/pulse)
[19:49:02] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[19:49:39] *** Joins: node1 (~node1@user/node1)
[19:50:26] *** Joins: kr173562 (~kr173562@117.195.211.1)
[19:50:38] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:50:53] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:51:58] *** Quits: kr173562 (~kr173562@117.195.211.1) (Remote host closed the connection)
[19:52:17] *** Joins: kr173562 (~kr173562@117.195.211.1)
[19:53:28] *** Quits: Hax0r (~Hax0r@146.251.73.156) (Remote host closed the connection)
[19:54:27] *** Quits: kr173562 (~kr173562@117.195.211.1) (Client Quit)
[19:55:06] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) ()
[19:55:26] *** Joins: Atque (~Atque@user/atque)
[19:55:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:56:14] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[20:01:15] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[20:01:31] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Read error: Connection reset by peer)
[20:02:06] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:02:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:03:59] *** Quits: cart_man (~rynot@2a00:23c4:2b81:5401:b887:5e96:a7fa:a864) (Ping timeout: 264 seconds)
[20:04:13] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[20:04:26] *** Joins: cart_man (~rynot@2a00:23c4:2b81:5401:d596:ecd3:b25f:1ade)
[20:08:51] *** Quits: kuoi (~kuoi@109.175.166.58) (Quit: kuoi)
[20:08:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:10:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[20:11:41] *** Joins: Atque (~Atque@user/atque)
[20:14:08] *** Joins: Nselm (~Nselm@p200300d56f367683b08fa78cb7502f6a.dip0.t-ipconnect.de)
[20:17:11] *** Quits: geeknix (~pi@2001:e68:5432:ee80:f8c7:29cb:a70c:cc82) (Ping timeout: 245 seconds)
[20:17:42] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41)
[20:17:42] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41) (Changing host)
[20:17:42] *** Joins: skapata (~Skapata@user/skapata)
[20:18:17] <tk> so
[20:18:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:18:24] *** Joins: kuoi (~kuoi@109.175.166.58)
[20:18:30] <tk> I want to replace systemd --user management
[20:18:34] <tk> but it's werd
[20:18:39] <tk> I just worked out how systemd does things
[20:18:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41)
[20:18:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:60e3:f790:778c:1e41) (Changing host)
[20:18:46] *** Joins: skapata (~Skapata@user/skapata)
[20:18:51] <tk> specifically how things line DBUS_SESSION_BUS_ADDRESS gets set
[20:18:55] <tk> like*
[20:19:25] <tk> (first of all, it's a bit dodgy that you can just override DBUS_SESSION_BUS_ADDRESS for all future children of the user session manager as an unprivileged user)
[20:19:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:19:52] <tk> but specifically I want to handle: XDG_RUNTIME_DIR and DBUS_SESSION_BUS_ADDRESS at least
[20:20:19] <tk> ideally expanding to handling running the window manager too, and it would be nice to do rootless X correctly through this
[20:20:29] <tk> the only issue is that systemd seems to be cheating a bit
[20:20:38] <tk> wait, this is the wrong channel
[20:20:44] <tk> Oh well, it was too quiet anyway
[20:20:50] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[20:21:55] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[20:24:26] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:25:23] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[20:27:47] <omegatron> very funny ..
[20:29:50] *** Joins: bruda (~bruda@172.58.62.194)
[20:30:05] *** Joins: bruda_ (~bruda@172.58.62.194)
[20:30:33] *** Joins: geeknix (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e)
[20:37:59] *** Parts: bruda_ (~bruda@172.58.62.194) ()
[20:38:46] *** Quits: bruda (~bruda@172.58.62.194) (Quit: leaving)
[20:39:04] *** Joins: bruda (~bruda@172.58.62.194)
[20:39:24] *** Joins: op0x0f05 (uid512716@tinside.irccloud.com)
[20:39:49] <bruda> Hello again. Back to my studies. K&R chapter 1 must be one of the longest chapters I've worked through in any programming book.
[20:40:35] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[20:41:28] *** Quits: cart_man (~rynot@2a00:23c4:2b81:5401:d596:ecd3:b25f:1ade) (Remote host closed the connection)
[20:42:27] *** Joins: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de)
[20:48:01] *** Quits: missogra (~missogra@dynamic-077-006-183-078.77.6.pool.telefonica.de) (Ping timeout: 245 seconds)
[20:51:26] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[20:53:06] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:f051:c808:206f:eb93) (Quit: simon323)
[20:53:18] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[20:55:33] *** Joins: jess (~jess@libera/staff/jess)
[20:56:14] *** Joins: pulse (~pulse@user/pulse)
[21:00:44] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:02:17] *** Quits: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net) (Ping timeout: 265 seconds)
[21:04:47] *** Joins: wwilly (~wwilly@217.140.99.251)
[21:06:09] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[21:11:46] <Wulf> 30 pages, in my print. Is that long compared to other books or did you simply not work through other books?
[21:11:52] *** Joins: bindu (~bindu@user/bindu)
[21:12:41] <bruda> Maybe it feels so long BECAUSE I'm working through all of it.
[21:12:43] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[21:13:07] *** Quits: twinkiecream (~tux@c-73-164-191-17.hsd1.or.comcast.net) (Remote host closed the connection)
[21:14:41] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[21:14:42] *** Quits: soapsudsxx (~soapsudsx@141.193.188.148) (Ping timeout: 260 seconds)
[21:17:04] <bruda> Maybe it just feels long for a first chapter.
[21:17:18] *** Joins: cart_man (~rynot@2a00:23c4:2b81:5401:b9aa:2f9b:f73:835c)
[21:17:27] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[21:18:33] *** Joins: defiant (~defiant@user/defiant)
[21:19:38] *** Joins: aradesh (~aradesh@user/aradesh)
[21:20:03] *** Quits: cart_man (~rynot@2a00:23c4:2b81:5401:b9aa:2f9b:f73:835c) (Client Quit)
[21:20:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[21:22:36] *** Joins: HolyFishPaste90 (~HolyFishP@75.183.229.154)
[21:22:52] *** Quits: HolyFishPaste90 (~HolyFishP@75.183.229.154) (Remote host closed the connection)
[21:23:18] *** Joins: HolyFishPaste90 (~HolyFishP@75.183.229.154)
[21:23:46] *** Quits: shivesh (~shivesh@user/shivesh) (Read error: Connection reset by peer)
[21:24:02] *** Quits: HolyFishPaste90 (~HolyFishP@75.183.229.154) (Client Quit)
[21:24:40] *** Joins: cousteau (~cousteau@user/cousteau)
[21:25:11] *** Quits: cousteau (~cousteau@user/cousteau) (Client Quit)
[21:29:09] *** Quits: [SyntaxError] (~user@user/syntaxerror/x-9308191) (Quit: see you soon)
[21:33:45] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[21:35:59] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[21:37:03] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[21:40:15] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Client Quit)
[21:40:35] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 268 seconds)
[21:40:45] *** Joins: tombobcat (~tombobcat@8.41.6.165)
[21:42:01] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[21:42:01] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[21:42:55] *** Joins: nehsou^ (~nehsou@h50.174.139.63.static.ip.windstream.net)
[21:43:08] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[21:45:06] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[21:46:43] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:47:00] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[21:47:51] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 250 seconds)
[21:48:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:48:28] *** Joins: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net)
[21:48:29] *** Quits: tombobcat (~tombobcat@8.41.6.165) (Quit: Leaving...)
[21:50:03] <twkm> fairly information dense.
[21:50:14] *** Quits: Nselm (~Nselm@p200300d56f367683b08fa78cb7502f6a.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:50:17] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:52:51] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[21:59:01] <nomagno> Reading trough the definition of `float.h`... If none of the fundamental constants are set to 'indeterminable' or other undefined value, can you handle any implementation's floats fully portably just with these macros, or is something missing?
[22:00:21] *** Joins: ferdna (~ferdna@user/ferdna)
[22:01:31] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[22:02:40] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:03:36] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[22:03:36] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Client Quit)
[22:04:25] *** Joins: tiotags (~tiotags@user/tiotags)
[22:06:00] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:08:00] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:12:40] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[22:17:00] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.213)
[22:19:00] *** Joins: van3ll0pe (~van3ll0pe@2a01:e0a:53d:ab30:c079:dce5:c29c:7968)
[22:21:18] *** Quits: bruda (~bruda@172.58.62.194) (Quit: crappy internet today.)
[22:22:40] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[22:23:35] <van3ll0pe> printf("hello"); :)
[22:25:27] <fizzie> Even if none of the macros use the "indeterminable" values, it's still the case that (C11 5.2.4.2.2p6) "the accuracy of the floating-point operations (+, -, *, /) and of the library functions in <math.h> and <complex.h> that return floating-point results is implementation-defined", so depending on what exactly you mean by "fully portably", perhaps not.
[22:25:35] <fizzie> Also, the macros cannot describe, for example, what sort of subnormal numbers the implementation might support.
[22:27:28] *** Joins: quartz (~quartz@user/quartz)
[22:28:10] <fizzie> (Unless {FLT,DBL,LDBL}_HAS_SUBNORM == 1 means it supports exactly the "usual" subnormal numbers, it's a little vague.)
[22:31:34] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[22:33:56] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[22:35:25] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:37:03] *** Quits: metallic (~quassel@231.red-83-53-214.dynamicip.rima-tde.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:37:06] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[22:37:11] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[22:38:51] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:39:17] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Remote host closed the connection)
[22:39:17] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[22:40:03] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[22:45:41] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:45:55] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:24] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:49:38] *** Joins: system_error (~SystemErr@user/systemerror)
[22:50:07] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[22:51:50] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Client Quit)
[23:04:53] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 264 seconds)
[23:05:16] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:05:40] *** Quits: alch (~alch@151.38.169.34) (Read error: Connection reset by peer)
[23:08:35] *** Joins: alch (~alch@151.38.169.188)
[23:13:32] *** Quits: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:13:39] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[23:15:23] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.213) (Ping timeout: 264 seconds)
[23:19:02] *** Quits: op0x0f05 (uid512716@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:21:32] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[23:22:19] *** eldritch_ is now known as eldritch
[23:22:25] *** Quits: van3ll0pe (~van3ll0pe@2a01:e0a:53d:ab30:c079:dce5:c29c:7968) (Quit: Leaving)
[23:23:16] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[23:24:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:25:57] *** Quits: xsaew (~xosap@82.15.39.69) (Ping timeout: 256 seconds)
[23:27:27] *** Quits: cpuid (~cpuid@co5.at) (Quit: ZNC 1.8.2 - https://znc.in)
[23:28:17] *** Joins: cpuid (~cpuid@co5.at)
[23:31:41] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.3)
[23:32:02] *** Joins: Beastie (~lcu@user/thebeastie)
[23:33:42] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[23:43:22] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:45:33] *** Joins: maxxe (~maxxe@user/maxxe)
[23:48:24] *** Joins: V-T60 (~v@91.203.24.166)
[23:52:47] *** Joins: van3ll0pe (~van3ll0pe@2a01:e0a:53d:ab30:c079:dce5:c29c:7968)
[23:54:57] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:58:16] *** Joins: strajder (~strajder@user/strajder)
