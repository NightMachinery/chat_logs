[00:02:42] <FromDiscord> <IsaacPaul> sent a code paste, see https://paste.rs/Fwl
[00:04:03] <FromDiscord> <IsaacPaul> If you create the type Board before Square then nim (or rather c) knows how to build Square. However, it comes after it then it gets stuck. So it's important for the code to be in the right order
[00:04:44] <FromDiscord> <Smarc> In reply to @Solitude "it breaks the dependency": Yes it did
[00:05:22] <FromDiscord> <Smarc> In reply to @IsaacPaul "Compilation works from the": Interesting, never had any problems with that yet. Thanks for clarification!
[00:05:58] <FromDiscord> <ag> In reply to @IsaacPaul "If you create the": Are any plans to change this? This seems like an unnecessary limitation
[00:06:04] <FromDiscord> <ag> (edit) "In reply to @IsaacPaul "If you create the": Are ... any" 03added "there"
[00:06:23] <FromDiscord> <IsaacPaul> In reply to @ag "Are there any plans": There is already this: `{.experimental: "codeReordering".}`
[00:06:32] <FromDiscord> <ag> Cool
[00:06:57] <FromDiscord> <Smarc> How/Where to use it actually?
[00:07:39] <FromDiscord> <IsaacPaul> Place it at the top of your file or pass it as a flag in the compiler
[00:07:54] <FromDiscord> <IsaacPaul> (edit) "in the compiler" => "when compiling"
[00:08:44] <FromDiscord> <IsaacPaul> It's not perfect tho: https://github.com/nim-lang/Nim/issues/10867
[00:09:26] <FromDiscord> <Smarc> Mh, I'm kinda confused now
[00:11:07] <FromDiscord> <Yardanico> In reply to @IsaacPaul "There is already this:": That's not for cyclic dependencies
[00:11:18] <FromDiscord> <IsaacPaul> oh
[00:11:21] <FromDiscord> <IsaacPaul> lmbo
[00:11:39] <FromDiscord> <Yardanico> It's only when you want a different order for stuff like procs in your module so you don't have to define a lot of forward declarations
[00:15:12] <FromDiscord> <IsaacPaul> In reply to @ag "Cool": Sorry I lied. lol
[00:17:14] *** Joins: vicfred (~vicfred@user/vicfred)
[00:27:12] <NimEventer> New thread by Devosalain2: Garbage collection of nim vs pony language, see https://forum.nim-lang.org/t/8649
[01:19:25] <FromDiscord> <Lemon Pecan Pie> good evening↵i'm trying to install nim on ubuntu 20.04 64-bit, but i get this message instead: https://media.discordapp.net/attachments/371759389889003532/912459780860297267/Screenshot_from_2021-11-22_16-48-40.png
[01:19:32] <FromDiscord> <Lemon Pecan Pie> does anyone know what i should do?
[01:19:37] <FromDiscord> <Lemon Pecan Pie> thx in advance
[01:23:45] <FromDiscord> <Solitude> You should just build nim from git.
[01:26:08] <FromDiscord> <Lemon Pecan Pie> k thx
[01:26:49] <FromDiscord> <Elegantbeef> I mean choosenim should work, but could just be an issue with `/tmp`
[01:27:27] <FromDiscord> <Lemon Pecan Pie> i'm completely new to nim but it seems like choosenim would be the easiest option in the long run
[01:27:50] <FromDiscord> <Elegantbeef> Yea it really should be, i've not had that issue before
[01:28:02] <FromDiscord> <pyautogui> Hi - I am interested in contributing to the stdlib. Where should I get started?
[01:28:43] <FromDiscord> <Elegantbeef> In my experience py you can just make a PR and as long as you write ok code and have a test added for it you'll get pointed in the direction
[01:29:01] <FromDiscord> <Lemon Pecan Pie> In reply to @Elegantbeef "Yea it really should": would it help if i screenshotted my tmp directory?
[01:29:20] <FromDiscord> <pyautogui> Got it. Is there any module specifically that could use work?
[01:29:34] <FromDiscord> <Elegantbeef> I mean you can just check if `choosenim-0.8.2_linux_amd64` exists
[01:29:48] <FromDiscord> <Elegantbeef> You can look at the github issue tracker and find stdlib related issues and work on them
[01:29:54] <FromDiscord> <pyautogui> Thanks
[01:30:03] <FromDiscord> <Lemon Pecan Pie> In reply to @Elegantbeef "I mean you can": not in `tmp`
[01:30:19] <FromDiscord> <Elegantbeef> Does it happen if you run it again?
[01:30:43] <FromDiscord> <Lemon Pecan Pie> In reply to @Elegantbeef "Does it happen if": i've run the command about 15 times already lol, same result every time
[01:30:47] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/issues?q=is%3Aopen+is%3Aissue+label%3AStdlib here you go py
[01:31:05] <FromDiscord> <pyautogui> Thank you.
[01:31:12] <FromDiscord> <Elegantbeef> Ok can you try a different directory like \~?
[01:31:22] <FromDiscord> <Elegantbeef> I'm just guessing it's playing dumb
[01:32:51] <FromDiscord> <dom96> yeah, try another dir. Why are you running it from /tmp anyway? 🙂
[01:34:03] <FromDiscord> <dom96> In reply to @pyautogui "Got it. Is there": there are a few issues here https://github.com/nim-lang/Nim/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+label%3AStdlib
[01:34:22] <FromDiscord> <Lemon Pecan Pie>  https://media.discordapp.net/attachments/371759389889003532/912463540965744701/Screenshot_from_2021-11-22_17-04-08.png
[01:35:04] <FromDiscord> <Lemon Pecan Pie> In reply to @dom96 "yeah, try another dir.": i tried runnig the command from ~ and the message was talking about a directory in tmp
[01:36:03] <FromDiscord> <dom96> do you have `curl` and/or `wget`?
[01:36:13] <FromDiscord> <dom96> I mean you must
[01:36:19] <FromDiscord> <dom96> since you're using it for the script lol
[01:36:29] <FromDiscord> <Lemon Pecan Pie> In reply to @dom96 "since you're using it": i probably do : )
[01:36:35] <FromDiscord> <dom96> https://github.com/dom96/choosenim/blob/master/scripts/choosenim-unix-init.sh#L61
[01:36:44] <FromDiscord> <dom96> the script is pretty simple to follow if you want to diagnose it
[01:37:35] <FromDiscord> <Lemon Pecan Pie> In reply to @dom96 "the script is pretty": i'll give it a shot, thx
[01:37:56] <FromDiscord> <Lemon Pecan Pie> oh
[01:38:01] <FromDiscord> <Lemon Pecan Pie> ok
[01:38:07] <FromDiscord> <Lemon Pecan Pie> i ran `sudo apt-get install curl`
[01:38:12] <FromDiscord> <Lemon Pecan Pie> curl installed
[01:38:17] <FromDiscord> <Lemon Pecan Pie> i ran the original command again
[01:38:19] <FromDiscord> <Lemon Pecan Pie> and it worked
[01:38:26] <FromDiscord> <Lemon Pecan Pie> 😄 thx so much for the help!
[01:38:27] <FromDiscord> <Elegantbeef> Lol not checking if curl is in the path
[01:38:41] <FromDiscord> <dom96> huh
[01:38:46] <FromDiscord> <Elegantbeef> Wait how the fuck did run choosenim
[01:38:50] <FromDiscord> <dom96> but you've used `curl` to get the init.sh script
[01:38:51] <FromDiscord> <Elegantbeef> Rather the init
[01:39:17] <FromDiscord> <Lemon Pecan Pie>  https://media.discordapp.net/attachments/371759389889003532/912464778511925269/Screenshot_from_2021-11-22_17-09-00.png
[01:39:30] <FromDiscord> <Elegantbeef> Hmmm interesting bug....
[01:40:24] <FromDiscord> <Elegantbeef> The fact you fetched the init.sh and ran it but didnt have curl will scare me till the end of time
[01:40:25] <FromDiscord> <dom96> whatttt, what was the original `curl` then
[01:41:06] <FromDiscord> <Lemon Pecan Pie> In reply to @dom96 "whatttt, what was the": idk, i'm completely clueless as to what just happened
[01:41:23] <FromDiscord> <Lemon Pecan Pie> but it works : D
[01:41:33] <FromDiscord> <Elegantbeef> So computers are powered by magic pixie dust, i knew it!
[01:43:57] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 256 seconds)
[01:45:56] *** Joins: anddam (~anddam@user/anddam)
[01:49:47] <FromDiscord> <IsaacPaul> around 10 years ago I ran into an app bug that only appeared when I deleted a comment then reappeared when I added back the comment.
[01:50:13] <FromDiscord> <IsaacPaul> I really hope it's fixed 😂
[01:50:33] <FromDiscord> <IsaacPaul> (edit) "an app" => "a compiler"
[01:53:57] *** Quits: advesperacit (~advespera@84.17.36.141) (Remote host closed the connection)
[02:11:15] *** Quits: Raflemakt (~Skugfisk@fwa5cce-64.bb.online.no) (Ping timeout: 264 seconds)
[02:13:06] *** Joins: Raflemakt (~Skugfisk@fwa5cab-144.bb.online.no)
[02:21:02] <FromDiscord> <evoalg> In my noob brain, nim compiles from foo.nim to C source code and then from there to an executable.  Is this right? When i do `nim c foo.nim` does it store any C source files anywhere (if I even wanted to look at them)?
[02:21:36] <FromDiscord> <IsaacPaul> yea
[02:22:06] <FromDiscord> <Elegantbeef> Yes you can even make it output to a specific folder with `--nimCache:someDir`
[02:22:07] <FromDiscord> <IsaacPaul> In reply to @evoalg "In my noob brain,": add something like `--nimcache:out` and nim will put all the files in there
[02:22:23] <FromDiscord> <Elegantbeef> Otherwise it's in `.cache/nim/projectnam_somesymbols`
[02:22:55] <FromDiscord> <evoalg> Nice thank you ... gosh I hope I'd never actually have to look at them ever 😉
[02:24:23] <FromDiscord> <Elegantbeef> Hey it's fun "What the fuck is this code" is like a murder mystery written by the Nim compiler
[02:24:38] <FromDiscord> <evoalg> hehehe
[02:27:45] <FromDiscord> <Elegantbeef> It does help when compiler devving 😛
[02:28:14] <FromDiscord> <evoalg> Another noob question: I was reading above about all this talk about enums and I've never used them (as I don't really understand them and the code snippets I've seen in the doc's leaves me wondering how it would be an advantage to use them) ... I tried testing the example given here a few hours ago, but it doesn't compile: https://play.nim-lang.org/#ix=3FOD
[02:28:36] <FromDiscord> <Elegantbeef> No no no evol
[02:28:41] <FromDiscord> <Elegantbeef> We dont do that here!
[02:29:00] <FromDiscord> <Elegantbeef> That's the Nim way
[02:29:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FOE
[02:29:05] <FromDiscord> <evoalg> oh!
[02:29:15] <FromDiscord> <Elegantbeef> It's identical to what you wanted, just not such a pain in the arse!
[02:29:37] <FromDiscord> <Elegantbeef> So now you can do things like `assert Mon notin weekend`
[02:29:47] <FromDiscord> <Elegantbeef> Worth noting in this case `const` is preferable to \`let
[02:31:44] <FromDiscord> <evoalg> ahh interesting. How would this be used to benefit me though? ... is it to make things clearer (like a named tuple is clearer) or is it to restrict things to catch bugs?
[02:32:05] <FromDiscord> <Elegantbeef> Which part?
[02:32:39] <FromDiscord> <evoalg> I mean that enum example, ... I guess I'm wondering: why do people use these things?
[02:34:14] <FromDiscord> <Elegantbeef> They're the best method and cleanest to represent fixed sizes
[02:34:14] <FromDiscord> <Elegantbeef> Like you could of course do `type Day = 0..6` but now you have to remember "0\` is Monday or is Sunday or is it Saturaday....
[02:34:15] <FromDiscord> <Elegantbeef> And now you have to document it
[02:34:15] <FromDiscord> <Elegantbeef> With the Enum you know `Monday` is `0`
[02:34:50] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FOG
[02:35:17] <FromDiscord> <Elegantbeef> So now you have a efficient data type with stringification that makes your life so simple
[02:35:24] <FromDiscord> <Elegantbeef> Enums afterall are just integers
[02:37:23] <FromDiscord> <evoalg> So I can think of them as a subset of integers with nice names?
[02:37:39] <FromDiscord> <Elegantbeef> Yes
[02:38:02] <FromDiscord> <evoalg> Nice!  ... and could this be done as an object instead of an enum?
[02:38:05] <FromDiscord> <Elegantbeef> And when you do `{Sat, Sun}` that's an efficient bitset so in this case it takes 1 byte to represent the entire data(7 entries)
[02:38:28] <FromDiscord> <evoalg> ah nice!
[02:38:53] <FromDiscord> <Elegantbeef> I suppose you could do it with an object but it'd be nowhere as nice
[02:43:22] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3FOJ they're quite simple to work with
[02:43:54] <FromDiscord> <Elegantbeef> Within a few lines of code we can easily get the next day of the week wrapped around(succ/pred over/underflow respectively from the stdlib)
[02:45:14] <FromDiscord> <evoalg> wow ... thank you, you're the best Elegantbeef !
[02:45:37] <FromDiscord> <impbox [ftsf]> they are indeed the best Elegantbeef!
[02:45:47] <FromDiscord> <Elegantbeef> Well i'm also the worst
[02:45:48] <FromDiscord> <impbox [ftsf]> there is no comparison
[02:54:03] <arkanoid> which tools does nim have to graphically represent code? I want to think about the architecture of a program from an abtract point of view
[02:55:21] <FromDiscord> <impbox [ftsf]> i don't think there's anything nim specific for that?
[02:55:26] <FromDiscord> <impbox [ftsf]> is there something you have in mind?
[02:56:54] <arkanoid> well, the best would be a visualization of the places where shared mutation happens
[02:57:22] <FromDiscord> <Elegantbeef> Hax has https://github.com/haxscramper/nimtrail though no clue if it even approaches what you want
[02:58:50] <arkanoid> no, what I was thinking about what something out from nim compiler internal knowledge
[02:59:06] <FromDiscord> <impbox [ftsf]> what is the output you want?
[02:59:41] <FromDiscord> <impbox [ftsf]> that sourcetrail thing looks cool
[02:59:43] <arkanoid> well, call graph would be nice, also module dependencies
[03:00:14] <FromDiscord> <Elegantbeef> This is where i say the famous words of "PR welcomed"
[03:00:23] <arkanoid> :)
[03:00:31] <FromDiscord> <Elegantbeef> The information is of course there, docgen for instance generates module dependancies
[03:00:58] <FromDiscord> <Elegantbeef> Source trail might give the call graph but yea nothing in the compiler that i know of
[03:01:12] <FromDiscord> <impbox [ftsf]> https://github.com/petermora/nimTracelog
[03:02:10] <arkanoid> interesting
[03:06:14] <arkanoid> also --expandArc:f is something
[03:21:13] *** Joins: adium (adium@user/adium)
[03:31:53] *** TechAspirer is now known as kayabaNerve
[03:38:21] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:00:06] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[04:03:16] <FromDiscord> <pyautogui> Is the {.extern.} pragma supposed to work with functions that take typeclass arguments?
[04:04:55] <FromDiscord> <Elegantbeef> Probably not since you cannot know the code required
[05:14:55] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3FP8
[05:15:56] <FromDiscord> <Elegantbeef> I mean it starts showing it but gives up
[05:15:58] <FromDiscord> <Elegantbeef> Which is odd
[05:16:07] <FromDiscord> <impbox [ftsf]> yeah. mid line
[05:16:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:16:53] <FromDiscord> <Elegantbeef> There might be an existent issue, you're not using MT are you?
[05:17:18] <FromDiscord> <lenis> sent a code paste, see https://play.nim-lang.org/#ix=3FP9
[05:17:37] <FromDiscord> <Elegantbeef> Indeed hell on earth 😛
[05:19:32] <FromDiscord> <impbox [ftsf]> In reply to @Elegantbeef "There might be an": threads are enabled though i don't think i have them doing anything
[05:19:45] <FromDiscord> <tsoj> sent a code paste, see https://play.nim-lang.org/#ix=3FPb
[05:21:30] <FromDiscord> <codic> do you have a very old version perhaps?
[05:22:02] <FromDiscord> <tsoj> Doesn't seem so: `nimble v0.13.1 compiled at 2021-10-19 01:07:39`
[05:29:04] <FromDiscord> <lenis> maybe an issue with your nible cache or something
[05:30:05] <FromDiscord> <gdquest> Is there a function to do regex replace by calling a function on each match like in Python? Or anything that would make it convenient to process each match? ↵I have code in which I need to process every match to insert extra HTML before it.↵I'm using `re.findBounds()` right now as an alternative to just find each portion of the string and process it. Works well but it's not as convenient
[05:30:54] <FromDiscord> <gdquest> I couldn't find that in the standard lib, so if I'm not missing anything, I was wondering if someone had that kind of code out there.
[05:31:59] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3FPe
[05:32:02] <FromDiscord> <impbox [ftsf]> I seem to recall you showing something similar beef?
[05:33:44] <FromDiscord> <lenis> In reply to @gdquest "Is there a function": you can process each match using findAll, but you cant modify the string in the iterator
[05:34:18] <FromDiscord> <lenis> https://nim-lang.org/docs/re.html#findAll.i%2Cstring%2CRegex%2Cint
[05:35:56] <FromDiscord> <lenis> hmm, that isnt really useful for your usecase I think
[05:37:27] <FromDiscord> <lenis> im guessing you could take inspirtation from https://github.com/nim-lang/Nim/blob/version-1-6/lib/impure/re.nim#L447
[05:38:15] <FromDiscord> <gdquest> In reply to @lenis "you can process each": Thanks, yup saw that. That'd work if it returned the bounds but there it doesn't.
[05:38:34] <FromDiscord> <gdquest> And yeah the code I have is very similar
[05:38:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FPf
[05:39:15] <FromDiscord> <gdquest> I keep forgetting to look at the std's source code, that's a great resource to learn, thanks!
[05:39:55] <FromDiscord> <lenis> You're welcome 😅
[05:40:03] <FromDiscord> <lenis> yeah the std source is pretty useful
[05:40:09] <FromDiscord> <lenis> and the nim docs link to the source for each function
[05:40:18] <FromDiscord> <impbox [ftsf]> @ElegantBeef thanks!
[05:40:44] <FromDiscord> <lenis> https://i.gyazo.com/f056d7f255819d771362b7f6984bb08a.png
[05:40:52] <FromDiscord> <Elegantbeef> you can even drop the `@` if you want
[05:41:03] <FromDiscord> <lenis> https://i.gyazo.com/f056d7f255819d771362b7f6984bb08a.png
[05:42:10] <FromDiscord> <IsaacPaul> @gdquest ↵Use split, then recombine them with the replacement string inbetween? I'm not sure what you mean by bounds tho..
[05:42:15] <FromDiscord> <lenis> In reply to @lenis "and the nim docs": Its a useful life hack. @gdquest
[05:46:14] <FromDiscord> <gdquest> In reply to @IsaacPaul "<@!202865241971884032>  Use split,": Split doesn't work in this case because it doesn't return the separating regex. The things I'm looking to replace are strings like ``SomeClassName``
[05:46:19] <FromDiscord> <gdquest> (edit) "``SomeClassName``" => "`\`SomeClassName\``"
[05:46:28] <FromDiscord> <gdquest> (edit) "`\`SomeClassName\``" => "\`SomeClassName\`"
[05:46:57] <FromDiscord> <gdquest> findBounds returns the start and end index of a found pattern based on a regexp
[05:47:16] <FromDiscord> <gdquest> That's what I'm calling bounds - it allows me to capture the string and feed it to a function
[05:53:37] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:54:05] <FromDiscord> <IsaacPaul> ah ya that makes sense
[06:05:42] <FromDiscord> <evoalg> @gdquest sorry I'm wondering why you don't use `replace` from the re or regex modules?
[06:11:10] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[06:14:31] *** Joins: tiorock (~rc@192.12.113.68)
[06:14:31] *** Quits: tiorock (~rc@192.12.113.68) (Changing host)
[06:14:31] *** Joins: tiorock (~rc@user/rockcavera)
[06:14:31] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (platinum.libera.chat (Nickname regained by services)))
[06:14:31] *** tiorock is now known as rockcavera
[06:31:15] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:50:06] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:02:00] <FromDiscord> <Lincent> Hello
[07:02:17] <FromDiscord> <evoalg> Hi
[07:02:28] <FromDiscord> <Lincent> nim is a cool lang
[07:02:39] <FromDiscord> <Lincent> I found it on wikipedia lol
[07:03:20] <FromDiscord> <Elegantbeef> It's indeed
[07:03:37] <FromDiscord> <Elegantbeef> Any questions?!
[07:03:47] <FromDiscord> <Elegantbeef> I'm sure evo will be more than happy to answer them
[07:03:50] <FromDiscord> <Elegantbeef> 😛
[07:03:52] <FromDiscord> <Lincent> would nim be a hight tier language or a mid tier?
[07:04:06] <FromDiscord> <Lincent> or maybe both concurrently?
[07:05:05] <FromDiscord> <Elegantbeef> Well it can be used like a fancy C, but can also be used as a automatically memory managed language
[07:05:38] <FromDiscord> <Elegantbeef> Like evo here is relatively new to Nim from python and probably doesnt find it that confusing
[07:07:03] <FromDiscord> <Lincent> likewise
[07:07:11] <FromDiscord> <Lincent> I noticed it is very similar to python
[07:07:16] <FromDiscord> <Lincent> but also C
[07:07:32] <FromDiscord> <evoalg> hehe yes it can be used as a high level language like python, so you can get into the nitty gritty behind the scenes stuff if you want to or need to
[07:07:58] <FromDiscord> <evoalg> I mean but you can...
[07:09:00] <FromDiscord> <evoalg> I tend to use it it high level and nothing fancy (as I don't know much) but it still runs at C-like-speed
[07:09:47] <FromDiscord> <evoalg> I had to (and still am having to) get around the typed vars as I'm not used to that
[07:10:08] <FromDiscord> <Lincent> yea that's a very C thing lol
[07:10:26] <FromDiscord> <Lincent> I wonder does it have something like an auto type from C++?
[07:10:36] <FromDiscord> <Elegantbeef> Nim defaults to inferred types
[07:10:42] <FromDiscord> <Elegantbeef> `var a = 300`
[07:10:50] <FromDiscord> <Lincent> ok cool
[07:10:52] <FromDiscord> <Elegantbeef> We only use type annotations for proc defs typically
[07:11:29] <FromDiscord> <Lincent> seems straightforward
[07:11:55] <FromDiscord> <Lincent> I think my goal will be to do something with nimbers in nim
[07:12:02] <FromDiscord> <Lincent> just because :D
[07:20:49] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3FPx
[07:22:43] <FromDiscord> <Elegantbeef> evolag leaves out that there's also me which is neither knowledgeable or shaping anything 😛
[07:22:56] <FromDiscord> <evoalg> not true!
[07:23:14] <FromDiscord> <Lincent> you've been very helpful so far, thanks
[07:23:31] <FromDiscord> <Lincent> there's 2k people on this server
[07:23:47] <FromDiscord> <Lincent> I'm sure one if I ask might answer if I have a question
[07:24:02] <FromDiscord> <Lincent> and there's always github and google
[07:25:13] <FromDiscord> <evoalg> I can tell you already know more than me about programming in general ... I think you'll be fine
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:06:49] <FromDiscord> <lenis> In reply to @evoalg "Personally, nim's been a": some of the docs are lacking. memory management, dll generation and threading could use more info
[09:07:08] <FromDiscord> <lenis> you have to resort to the blog or forum posts for some things
[09:09:50] <FromDiscord> <evoalg> In reply to @lenis "you have to resort": Thank you. Oh and I wanted to ask, when you were testing different gc's for mem usage, did you do that with some sort of debugger / profiler?
[09:11:49] <FromDiscord> <lenis> No i used Araq's test from his ORC post https://nim-lang.org/blog/2020/12/08/introducing-orc.html↵↵Later i switched to using benchy to avoid the overhead of the async http server which has cycles.
[09:12:03] <FromDiscord> <evoalg> nice
[09:12:37] <FromDiscord> <lenis> I still dont fully understand why ORC was so much slower in my final test case, I need to do some further research.↵I think it has to do with the number of ref object allocations but im not certain
[09:13:12] <FromDiscord> <lenis> just goes to show that you should write your nim code, and then benchmark it with several GCs to figure out which one is best for your code
[09:13:49] <FromDiscord> <lenis> the biggest advantage of ORC is that it has the cycles collector optimization which makes it the only viable option if sub 100ms latency is important
[09:14:35] <FromDiscord> <lenis> and for most use-cases ORC performs similarly to refc
[09:15:50] <FromDiscord> <evoalg> Is refc the default gc in nim 1.6? I've noticed when doing different programs, sometimes orc is good and sometimes arc is good and sometimes default
[09:17:02] <FromDiscord> <lenis> I think refc is still the default.
[09:17:10] <FromDiscord> <evoalg> Also for some things `nim -d:danger --passC:-flto c foo.nim` is the fastest
[09:17:23] <FromDiscord> <lenis> refc has surprisingly good latency and trhougput as long as the cycle collector doesnt run
[09:19:15] <FromDiscord> <lenis> lto only makes sense when your application will always (or almost always) be used in the same way
[09:19:31] <FromDiscord> <evoalg> ... but you may know that I don't know what I'm talking about ... I don't know what latency and throughput is? ... should I be looking at more than the speed of the executable to run?
[09:20:22] <FromDiscord> <Elegantbeef> Latency and throughput are two marks you can use to bench long running programs
[09:20:44] <FromDiscord> <lenis> throughput is simply how much work your application can perform in a given amount of time.↵For a webserver that's requests per second. for a game that's frames per second, etc.
[09:20:56] <FromDiscord> <Elegantbeef> Latency is "how long inbetween messages" and throughput is the overall "how many messages per second"
[09:21:15] <FromDiscord> <lenis> ^^^
[09:21:38] <FromDiscord> <Elegantbeef> So with ORC you get lower latency but you dont get as much throughput cause the cycle collector takes some time
[09:21:47] <FromDiscord> <lenis> latency in the context of GC means how long your request (for web) or frame (for games) will take in a worse-case scenario during a GC cycle
[09:22:00] <FromDiscord> <lenis> (edit) "latency in the context of GC ... means" 03added "latency"
[09:22:25] <FromDiscord> <lenis> (edit) "games)" => "games/UI)"
[09:22:37] <FromDiscord> <evoalg> bad latency should decrease throughput though?
[09:22:54] <FromDiscord> <lenis> that depends
[09:23:19] <FromDiscord> <lenis> traditional GCs like markAndSweep defer all deallocation work so it can do it all at once more efficiently
[09:24:00] <FromDiscord> <lenis> this means that the latency is greater, because your application is frozen while doing garbage collection, but the overall time spent deallocating memory is less than when doing reference counting
[09:24:10] <FromDiscord> <lenis> at least in theory, in practice it's more complicated
[09:24:20] <FromDiscord> <evoalg> ahhh ok!
[09:24:33] <FromDiscord> <lenis> ORC/ARC are well optimized so sometimes they can actually have better througput than markAndSweep
[09:25:40] <FromDiscord> <lenis> thats mainly because ARC/ORC only manage memory that is being mutated. where as markAndSweep has to check the entire heap
[09:25:41] <FromDiscord> <evoalg> ok ... as usual, things are more complex that I first thought 😉
[09:25:54] <FromDiscord> <evoalg> (edit) "that" => "than"
[09:26:07] <FromDiscord> <Elegantbeef> Well in your case fast is fast 😛
[09:26:35] <FromDiscord> <evoalg> lol ... no I actually understand the diff between latency and throughput now!
[09:26:56] <FromDiscord> <evoalg> (but really I just care about fast, you're right)
[09:27:13] <FromDiscord> <lenis> yeah
[09:27:31] <FromDiscord> <lenis> in summary, latency is how responsive your application is, throughput is how fast your application is
[09:27:44] <FromDiscord> <lenis> latency isnt always important though
[09:28:10] <FromDiscord> <lenis> i mean, professionally I only use Java. So I ought to know.
[09:28:22] <FromDiscord> <Elegantbeef> Lol
[09:28:43] <FromDiscord> <lenis> Java actually has surprisingly good throughput, but worst-in-class latency
[09:28:55] <FromDiscord> <Elegantbeef> Sorry i didnt get that the world stopped
[09:29:15] <FromDiscord> <evoalg> makes sense ... I think people were battling with this stuff with voip when it first came out, as bad lags are unacceptable even if they only happen every now & then
[09:29:51] <FromDiscord> <lenis> exactly
[09:30:19] <FromDiscord> <lenis> VOIP, video players, UIs, etc. all require low latency because any "lag spike" is unacceptable
[09:30:51] <FromDiscord> <lenis> pursists will tell you that if latency matters at all you should allocate memory manually
[09:31:04] <FromDiscord> <lenis> but these guys just like to spent all their time in memory profilers
[09:31:18] <FromDiscord> <lenis> they're like people who make their own pasta
[09:31:26] <FromDiscord> <Elegantbeef> Whereas Email servers and webhooks can handle a few seconds of latency and throughput is actually better 😀
[09:31:50] <FromDiscord> <lenis> yes
[09:32:08] <FromDiscord> <lenis> seconds is rare though
[09:33:17] <FromDiscord> <Elegantbeef> Hey exaggeration never killed anyone, i swear i thought the car was kilometres away
[09:33:18] <FromDiscord> <lenis> usually GC cycles take somewhere in the neighborhood of 30-500ms
[09:33:32] <FromDiscord> <lenis> nim gives you plenty of options
[09:33:39] <FromDiscord> <lenis> just not generational garbage collectors
[09:34:20] <FromDiscord> <evoalg> nice
[09:34:41] <FromDiscord> <Elegantbeef> Worst comes to worst you have `alloc` and `dealloc` 😛
[09:34:55] <FromDiscord> <lenis> blasphemy
[09:35:47] <FromDiscord> <Elegantbeef> Hey it's a system language afterall, what else are you supposed to do with those procs?!
[09:36:11] <FromDiscord> <lenis> set them to discard
[09:36:17] <FromDiscord> <lenis> 😛
[09:36:45] <FromDiscord> <lenis> no im kidding. alloc/dealloc has its use-cases
[09:37:19] <FromDiscord> <lenis> my favorite thing coming from Java in Nim though, is that you can allocate objects on the stack
[09:37:26] <FromDiscord> <lenis> in Java all objects are ref objects
[09:37:46] <FromDiscord> <lenis> only primitives are allocated on the stack
[09:37:54] <FromDiscord> <Rika> is refc not a generational?
[09:38:26] <FromDiscord> <Elegantbeef> Yea that's one thing i laugh at java about
[09:39:03] <FromDiscord> <Rika> In reply to @lenis "in Java all objects": its not even a jvm limitation
[09:39:16] <FromDiscord> <lenis> No. refc is deferred reference counting + markAndSweep cycle collector
[09:39:17] <FromDiscord> <Rika> java just decided that "ok lets fuck with all our future users" /s
[09:39:30] <FromDiscord> <Elegantbeef> Want to make a game with your own vector type, die to lack of stack allocated types!
[09:42:49] <FromDiscord> <lenis> sent a long message, see http://ix.io/3FPP
[09:44:00] <FromDiscord> <lenis> refc is faster in theory but when a cheap reference counting cycle doesnt clear enough memory refc runs a full markAndSweep cycle which means that sometimes it does double work
[09:44:25] <FromDiscord> <Rika> yeah
[09:44:46] <FromDiscord> <Rika> orc and arc should be advertised less as "better" and more as it really is, deterministic, i guess
[09:45:01] <FromDiscord> <Elegantbeef> Well orc isnt deterministic
[09:45:11] <FromDiscord> <Rika> it's "kinda" deterministic
[09:45:23] <FromDiscord> <Rika> as araq says
[09:45:38] <FromDiscord> <lenis> a generational gc however (like, Java's G1 GC) works by keeping a counter with each object in memory that is incremented whenever it "survives" a GC cycle.↵After a certain number of survived cycles, the memory is concidered old and moved to a seperate area in the heap that is checked much less frequently
[09:46:56] <FromDiscord> <lenis> the idea of a generational GC is that most memory is short-lived. and the memory that isn't short lived is unlikely to be deallocacted. so the GC can skip tracing the old memory most of the time
[09:47:18] <FromDiscord> <lenis> where as something like markAndSweep scans the entire heap every cycle
[09:47:31] <FromDiscord> <lenis> (edit) "scans" => "traces"
[09:48:09] <FromDiscord> <Rika> boehm is generational
[09:48:37] <FromDiscord> <lenis> ah. i hadnt looked into boehm because it requires a dll
[09:49:10] <FromDiscord> <Rika> time to check if it works well for you(r use case) 😛
[09:49:59] <FromDiscord> <lenis> maybe another day
[09:50:07] <FromDiscord> <lenis> I have a meeting in 2 hours and I have yet to go to sleep
[09:50:40] <FromDiscord> <Rika> see you then, get ready for that meeting
[10:02:04] <FromDiscord> <haxscramper> arkanoid\:Nimtral that beef linked is just a dependency of haxdoc, and yes, haxdoc is able to do this, but I need to fix up the CI and installation in order for it to be at least somewhat useful, and before that I want to get some other things finished, so in short - no, there are no tools that can do things like that
[10:02:17] <FromDiscord> <haxscramper> And most likely haxdoc will target nimskull anyway
[10:03:38] <FromDiscord> <haxscramper> Even though for now it is just a cloud of vaporware with nothing that can be considered folly finished
[10:05:11] *** Joins: Guest9 (~Guest9@70.123.55.208)
[10:05:51] *** Quits: Raflemakt (~Skugfisk@fwa5cab-144.bb.online.no) (Ping timeout: 264 seconds)
[10:07:11] *** Quits: Guest9 (~Guest9@70.123.55.208) (Client Quit)
[10:17:28] <FromDiscord> <evoalg> @ElegantBeef I just realized you put a const in a proc (in your enum example) ... for some reason I never thought about ever doing that
[10:18:12] <FromDiscord> <Elegantbeef> Well there's a reason why you'd want to 😛
[10:18:44] <FromDiscord> <evoalg> if some can be determined at compile time then it should be a const?
[10:19:26] <FromDiscord> <Elegantbeef> Yep
[10:19:47] <FromDiscord> <Elegantbeef> You should go `const` -\> `let` -\> `var`
[10:20:01] <FromDiscord> <evoalg> it wasn't clear to me, as that proc is some sort of generic, that's called by another proc (am I right about that?)
[10:20:03] <FromDiscord> <Elegantbeef> The thing is making the mutability is little as possible to remove any error
[10:20:28] <FromDiscord> <Elegantbeef> Nah a generic is instantiated  replacing the parameters with those passed
[10:20:38] <FromDiscord> <Elegantbeef> So in this case it replaces `T` with `Weekdays`
[10:20:53] <FromDiscord> <Elegantbeef> You can even manually do that and you'd see the same results
[10:21:18] <FromDiscord> <evoalg> and this is done at CT?
[10:21:48] <FromDiscord> <Rika> yes
[10:21:49] <FromDiscord> <Elegantbeef> Yes
[10:22:07] <FromDiscord> <Elegantbeef> When you call a generic procedure at the callsite if it hasnt been called before will instantiate a new procedure
[10:22:18] <FromDiscord> <Elegantbeef> Otherwise it refers to the old one
[10:22:31] <FromDiscord> <evoalg> ahhh ok
[10:25:23] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=t%20wr you can run this to follow the CT logic
[10:27:30] <FromDiscord> <Elegantbeef> ... ix gave me a bad link
[10:28:34] <FromDiscord> <Elegantbeef> Hopefully this one is better https://play.nim-lang.org/#ix=3FPX
[10:29:24] <FromDiscord> <evoalg> I was wondering why you gave me that hehe
[10:35:53] <FromDiscord> <evoalg> that's a really nice example ... it shows me that the proc that calls it makes it instantiated, even if the proc that calls it hasn't been called yet ... and I learned about "static: echo" and the error pragma ... 3 birds, one stone
[10:38:16] <FromDiscord> <Elegantbeef> lol
[10:38:38] <FromDiscord> <Elegantbeef> `static: echo` isnt special you can use static for most nim code, whenever you want to run code that doesnt rely on C interop at compile time 😀
[10:39:33] <FromDiscord> <evoalg> what sort of things besides echo doesn't require C interop?
[10:39:46] <FromDiscord> <Elegantbeef> Pure Nim code 😛
[10:40:24] <FromDiscord> <Elegantbeef> For instance `Zippy` and `supersnappy` both run at compile time, one is file archiver, and the other a compression algorithim
[10:40:25] <FromDiscord> <evoalg> All of that example you gave me was pure nim? ... well I mean it was written in nim
[10:41:01] <FromDiscord> <Elegantbeef> Yes
[10:41:18] <FromDiscord> <Elegantbeef> https://github.com/guzba/zippy for reference
[10:42:42] <FromDiscord> <evoalg> So if I had a program to recursively work out the factorial of 30, and I make it all run in compile time?
[10:43:07] <FromDiscord> <evoalg> (sorry it's a new concept for me)
[10:44:03] <FromDiscord> <Elegantbeef> You can do it, it might be slow or hit the stack but you can
[10:44:16] <FromDiscord> <Elegantbeef> The funny thing is you can use Nim code both at CT and run time without any magic
[10:46:14] <FromDiscord> <evoalg> my factorial example is a silly one, but for interest, how would I tell it to do it all at CT? when I do `static: proc fact(...` and `static: echo fact(30)` or I bet I can pass a compile fag ... and I bet there's a proc pragma too
[10:46:23] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FQ6
[10:46:31] <FromDiscord> <evoalg> ooooooo
[10:46:45] <FromDiscord> <Elegantbeef> `static` is how you'd tell it to do it at `CT` you can do `static: for x in 0..10: echo x` if you wanted
[10:47:29] <FromDiscord> <Rika> ~~also `const a = ...` works differently from `let a = static: ...`~~
[10:48:45] <FromDiscord> <evoalg> In reply to @Rika "~~also `const a =": what does that strike-through font mean?
[10:49:45] *** Joins: Raflemakt (~Skugfisk@129-241-229-203-gw.cgn.ntnu.no)
[10:49:54] <FromDiscord> <Elegantbeef> It means the there is a difference between const and let
[10:50:05] <FromDiscord> <Rika> a difference between const and let static
[10:50:19] <FromDiscord> <Rika> some people might think theyre basically the same
[10:51:02] <FromDiscord> <evoalg> ok I think I get why ... makes sense ... but your sentence had a strike-through font style and I'm wonder why you used that?
[10:51:13] <FromDiscord> <Rika> i just often do that
[10:51:36] <FromDiscord> <evoalg> hehe young people!
[10:51:51] <FromDiscord> <evoalg> I can never understand them
[10:52:04] <FromDiscord> <Elegantbeef> He says praising me whenever I explain stuff
[10:52:21] <FromDiscord> <Rika> beef isnt much older than me apparently
[10:52:47] <FromDiscord> <evoalg> beef is old in spirit, everyone knows that
[10:52:59] <FromDiscord> <Rika> i would have thought he was older than you
[10:53:15] <FromDiscord> <evoalg> mentally I think so
[10:54:56] <FromDiscord> <Elegantbeef> Aw fuck am i already senile, i knew something was up
[10:55:12] <FromDiscord> <Rika> dude you say that with those spelling skills?
[10:56:10] <FromDiscord> <Elegantbeef> Sorry rika i never had to learn to spell since i had spell check
[10:56:27] <FromDiscord> <Rika> even then people usually learned the spelling once they use spell check
[10:57:14] <FromDiscord> <Elegantbeef> Why would i have to i just get close enough and it takes care of it, i write fast and proofread faster
[10:57:38] <FromDiscord> <Rika> you waste time every next occurrence of a misspell
[10:57:50] <FromDiscord> <Rika> just realised i used two commonly misspelled words lmao
[10:57:57] <FromDiscord> <Elegantbeef> That implies i always correct it
[10:58:12] <FromDiscord> <Rika> true, i doubt you ever
[10:58:15] <FromDiscord> <Rika> 😛
[10:58:15] <FromDiscord> <Elegantbeef> I'm the epitome of a dumb dumb
[11:06:23] <FromDiscord> <evoalg> so not only does the generic get instantiated at CT on first call, but the calling site is replaced inline, right?
[11:06:57] <FromDiscord> <Elegantbeef> Nope it just gets instantiated
[11:07:20] <FromDiscord> <evoalg> ahhh is it only templates that are inlined?
[11:08:24] <FromDiscord> <Elegantbeef> Templates/macros are inlined but also procs can be if the C compiler says "yep i should inline this"
[11:08:33] <FromDiscord> <Elegantbeef> templates/macros are inlined 100% of the time
[11:09:21] <FromDiscord> <evoalg> nice, thank you for being so easy to understand
[11:10:13] <FromDiscord> <Elegantbeef> It's the senility  much closer to your mental age 😛
[11:10:17] <FromDiscord> <Rika> how do you have so much time
[11:10:48] <FromDiscord> <Elegantbeef> Havent we been over this?
[11:11:09] <FromDiscord> <evoalg> who? ... me? I don't have much time left as you (thanks for reminding me)
[11:11:22] <FromDiscord> <Rika> oh are you sure about that
[11:11:29] <FromDiscord> <Rika> for all ya know i could be deathly sick
[11:11:32] <FromDiscord> <Elegantbeef> Jeez so rude rika
[11:11:38] <FromDiscord> <Elegantbeef> We could only hope
[11:11:45] <FromDiscord> <evoalg> then I'd feel pretty bad right now
[11:11:46] <FromDiscord> <Rika> that i die first?
[11:12:06] <FromDiscord> <evoalg> not the first time I put my foot in it
[11:12:14] <FromDiscord> <Rika> ( i dont actually know what you mean by hope )
[11:12:25] <FromDiscord> <Elegantbeef> I was jokingly saying it'd be good rika
[11:12:44] <FromDiscord> <Rika> thats exactly what im asking, wtf do you refer to when you say "it"
[11:13:30] <FromDiscord> <Rika> i should probably get to converting my processing script into nim/pixie or something ig
[11:13:49] <FromDiscord> <Elegantbeef> What's the processing code do?
[11:13:56] <FromDiscord> <Rika> uh display shit
[11:14:01] <FromDiscord> <Rika> what else does processing code do
[11:14:09] <FromDiscord> <Elegantbeef> Well ii more mean https://github.com/GabrielLasso/drawim does this work for you
[11:14:18] <FromDiscord> <Rika> i know
[11:14:31] <FromDiscord> <Rika> i need stroke weight hto
[11:14:33] <FromDiscord> <Rika> (edit) "hto" => "tho"
[11:16:55] <FromDiscord> <evoalg> With those generics you did for enums, will a different proc be created for each enum type that calls it?
[11:17:03] <FromDiscord> <Elegantbeef> Yep
[11:17:08] <FromDiscord> <Elegantbeef> That's how generics work
[11:17:16] <FromDiscord> <evoalg> gotcha ok
[11:17:26] <FromDiscord> <Elegantbeef> They take the types replace them then instantiate a new proc
[11:17:57] <FromDiscord> <Elegantbeef> There is a bit more logic in the back than that but it's the gis
[11:17:57] <FromDiscord> <evoalg> ahhh cheers
[11:18:33] <FromDiscord> <evoalg> no there isn't - I know everything now!
[11:25:13] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[11:26:14] *** Joins: xet7 (~xet7@user/xet7)
[11:38:16] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 245 seconds)
[11:40:03] *** Quits: LyndsySimon (sid34452@lymington.irccloud.com) (Ping timeout: 264 seconds)
[11:44:29] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[11:47:07] <FromDiscord> <lenis> In reply to @Elegantbeef "https://github.com/guzba/zippy for reference": someone made a pure nim implementation of zip? nice
[11:51:02] *** Joins: xet7 (~xet7@user/xet7)
[12:00:22] <FromDiscord> <claude> was it always allowed for `foo()` in `type T = foo()` to return an nkObjectTy? i'm guessing it was since it the implementation looks like it allows it, but when i tried a long time ago it didn't work
[12:02:14] <FromDiscord> <claude> apparently it's not allowed, but nkEnumTy is
[12:16:59] *** Joins: lumo_e (~enrico@151.29.48.90)
[12:20:51] *** Joins: PMunch (~PMunch@user/pmunch)
[12:29:22] *** Joins: Guest9 (~Guest9@70.123.55.208)
[12:29:45] *** Quits: Guest9 (~Guest9@70.123.55.208) (Client Quit)
[12:53:45] *** Quits: Raflemakt (~Skugfisk@129-241-229-203-gw.cgn.ntnu.no) (Ping timeout: 256 seconds)
[12:56:11] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 245 seconds)
[12:56:13] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[12:56:37] *** Joins: xet7 (~xet7@user/xet7)
[12:57:50] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[12:59:10] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:59:34] *** Joins: xet7 (~xet7@user/xet7)
[13:00:26] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[13:12:34] *** Joins: Raflemakt (~Skugfisk@129-241-229-203-gw.cgn.ntnu.no)
[13:33:44] <PMunch> Hmm, the "Which of these features do you use" section has an odd choice of options
[13:34:15] <PMunch> I mean I know that Nim has an effect system, I don't really use it for anything in particular, but I wouldn't say I don't have any need for it
[13:34:35] <PMunch> I'm just not sure what I'd use it for
[13:42:27] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 264 seconds)
[13:50:20] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (Quit: dv^_^)
[13:52:48] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[13:55:23] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (Client Quit)
[13:56:22] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[14:11:53] <FromDiscord> <tandy> if i want to get the nim code for a certain 2d seq
[14:12:05] <FromDiscord> <tandy> can i just do `dumpAst:`?
[14:13:02] <FromDiscord> <tandy> dumpAstGen\
[14:15:01] <FromDiscord> <Rika> Hm? What do you mean?
[14:15:09] <FromDiscord> <Rika> That will return AST and not code
[14:25:35] <FromDiscord> <tandy> tru
[14:25:41] <FromDiscord> <tandy> nvm i jst handwrote the 2d array
[14:26:14] <FromDiscord> <tandy> so i have a seq[seq[GridSquare]], but when i compare two of them to check for equality, it doesnt work
[14:26:36] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3FQX
[14:27:19] <FromDiscord> <Rika> Doesn’t work like?
[14:27:41] <FromDiscord> <tandy> do i need another function to compare `seq[seq[GridSquare]]`?
[14:28:07] <FromDiscord> <Rika> I don’t think so
[14:28:26] <FromDiscord> <Rika> Are you getting an error or is it just not behaving as expected
[14:28:42] <FromDiscord> <Rika> Think you might need an == for seq in seq but I don’t remember
[14:28:51] <FromDiscord> <tandy> o wait i  think i know what i need to do↵(@Rika)
[14:28:59] <FromDiscord> <tandy> il try that and come back
[14:29:52] <FromDiscord> <tandy> ok i fixed it \:)))
[14:30:52] <FromDiscord> <Marisol> I saw func keyword is just a macro for proc no side effects... but when to use func and when to use proc?
[14:31:07] <FromDiscord> <Rika> Not a macro
[14:31:23] <FromDiscord> <Rika> Use func if you want a guarantee of no side effects
[14:31:26] <FromDiscord> <Rika> Otherwise use proc
[14:38:20] <FromDiscord> <Marisol> Ah ok
[14:40:03] *** Quits: Raflemakt (~Skugfisk@129-241-229-203-gw.cgn.ntnu.no) (Ping timeout: 264 seconds)
[14:49:52] *** Joins: Raflemakt (~Skugfisk@129-241-230-15-gw.cgn.ntnu.no)
[14:55:54] <FromDiscord> <evoalg> func is just an alias for proc with no side effects (if I've got that right), and the idea is that if you are intending to produce no side effects, use func as good programming practice, so that if you did create side effects then it's a bug and the compiler will tell you about it when you compile (so errors can be caught early). Side effects are things like IO (but I'm not sure what else)
[14:58:05] <FromDiscord> <Rika> Anything relating to “modifying anything else other than inputs and outputs of the function”
[14:58:13] <FromDiscord> <Rika> IO, global state, etc
[14:58:44] <FromDiscord> <Rika> Actually not just modifying
[14:59:00] <FromDiscord> <Rika> “Being dependent on anything else…” is more accurate
[14:59:27] <FromDiscord> <Rika> So yeah there’s a lot of limitation unless you declare a lot of things as parameters
[14:59:42] <FromDiscord> <evoalg> thank you!
[15:00:28] <FromDiscord> <Rika> If you know math in a higher than elementary context (I guess?) then it is the same idea
[15:05:46] <qwr> IO can be considered modifing global state (ie external world being part of global state), so the func is proc that do not change global state
[15:06:11] <qwr> but modification of var arguments is allowed
[15:08:47] <qwr> as nim views var arguments as part of "return value", a bit like returning multiple values in some other languages
[15:13:16] <PMunch> You can't read global state either
[15:13:40] <PMunch> Because that would mean that this is possible myFunc(100) != myFunc(100)
[15:14:15] <PMunch> Or maybe I'm wrong
[15:16:07] <FromDiscord> <Yardanico> you're right
[15:16:33] <FromDiscord> <Yardanico> you can only use `const` globals in `func`s
[15:23:53] <FromDiscord> <evoalg> interesting!
[15:25:47] <arkanoid> haxscramper, thanks for the feedback
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:38] <FromDiscord> <hmmm> what was the format of pre declaring procs before defining? proc thingy() =?
[15:38:59] <FromDiscord> <hmmm> compiler complains about nests 🤔
[15:39:19] <FromDiscord> <enthus1ast> prof foo(baa\: int)\: int
[15:39:21] <FromDiscord> <enthus1ast> proc
[15:39:22] <FromDiscord> <enthus1ast> ...
[15:39:25] <FromDiscord> <hmmm> why do we even have to pre declare stuff ffs
[15:39:28] <FromDiscord> <hmmm> so no equal
[15:39:55] <FromDiscord> <enthus1ast> to forward declare stuff
[15:41:11] <FromDiscord> <enthus1ast> i think for most stuff you can use the experimental code reordering
[15:41:13] <FromDiscord> <Rika> In reply to @hmmm "why do we even": Limitation as of now, no idea if any plans to remove
[15:41:40] <FromDiscord> <enthus1ast> think Araq mentioned it in the forum post
[15:43:05] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FRp
[15:45:13] <FromDiscord> <enthus1ast> but a Version\: 2.x  goal, so currently, just forward declare and call it a day 😊
[15:45:51] <FromDiscord> <enthus1ast> or restructure and not forward declare
[15:45:52] <FromDiscord> <enthus1ast> ;)
[15:48:34] <FromDiscord> <hmmm> I slapped a nice introductory section with #pre declare hacks, see you in 2.x. And predeclared all my stuff away, so now I am free like a birdbeer
[15:54:40] <FromDiscord> <enthus1ast> what i often do is while hacking i just forward declare, then in the end i restructure and i end with just a few forward declarations if any
[15:56:24] <Amun-Ra> I've never used object inheritance in Nim before, I got a little problem: https://play.nim-lang.org/#ix=3FRu
[15:57:40] <FromDiscord> <Yardanico> why are you using owned here though?
[15:58:52] <FromDiscord> <Yardanico> but about your question - can't you just do something like this?
[15:58:59] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3FRw
[15:59:09] <FromDiscord> <Yardanico> (forgot to put the s into the newStringStream call though)
[16:09:28] <Amun-Ra> hmm
[16:11:03] <Amun-Ra> that's invalid object conversion
[16:13:21] <FromDiscord> <Yardanico> hm, yeah, I don't think you can do that
[16:13:28] <FromDiscord> <Yardanico> or maybe you can
[16:13:32] <FromDiscord> <Yardanico> I'm not good at OOP in Nim :)
[16:13:37] <Amun-Ra> same here ;>
[16:14:36] <Amun-Ra> in worst case scenarion I'll just put string in proxy object as a member
[16:14:41] <Amun-Ra> scenario*
[16:19:13] <FromDiscord> <gdquest> In reply to @evoalg "<@!202865241971884032> sorry I'm wondering": Because it doesn't fit my requirements. I need to replace with different things depending on the match - things that require processing each match individually
[16:32:06] <FromDiscord> <hmmm> hey how do I reset x = 5 to a clean var x : int state?
[16:32:31] <FromDiscord> <Rika> x = default(typeof(x))
[16:32:33] <FromDiscord> <Rika> Perhaps?
[16:32:36] <FromDiscord> <hmmm> jesus
[16:32:38] <FromDiscord> <hmmm> looks ugly
[16:33:01] <FromDiscord> <Rika> For all integers 0 is the default anyway
[16:33:06] <FromDiscord> <Rika> If you want to use that instead
[16:33:13] <FromDiscord> <hmmm> hmm okok
[16:33:39] <Zevv> or make a nice little template for the ugly solution, right
[16:34:02] <Zevv> reset(var) will do
[16:34:30] <FromDiscord> <Rika> Sure
[16:34:59] <FromDiscord> <Rika> I’d prefer using a proc for that though
[16:35:45] <Zevv> no, I mean, reset() is what you need. it's already there.
[16:37:29] <FromDiscord> <hmmm> when I get spaceX money I will employ a google sized force to fork nim to have synthax identical to python
[16:38:04] <FromDiscord> <Rika> It exists? Okay
[16:38:08] <FromDiscord> <Rika> I think I forgot about it
[16:38:15] <FromDiscord> <Rika> In reply to @hmmm "when I get spaceX": Why?
[16:38:32] <FromDiscord> <Rika> There are reasons for some of them being missing
[16:38:47] <FromDiscord> <Rika> What are you missing from Python
[16:39:03] <FromDiscord> <hmmm> yea but the google sized force will make it work 1:1
[16:39:17] <FromDiscord> <Rika> Well why
[16:39:39] <FromDiscord> <Rika> At that point just use Python with another implementation
[16:39:50] <FromDiscord> <Rika> There are plenty
[16:40:25] <FromDiscord> <hmmm> because that's what I like lol
[16:40:33] <FromDiscord> <hmmm> I like nim and I like python synthax
[16:40:35] <FromDiscord> <Rika> Then use Python
[16:40:38] <FromDiscord> <hmmm> NU
[16:41:01] <FromDiscord> <Rika> A Python syntaxed Nim is not Nim like at all
[16:41:07] <FromDiscord> <Rika> It’s just Python
[16:41:09] <FromDiscord> <Rika> Think about it
[16:41:31] <FromDiscord> <hmmm> don't worry my google sized force will think about everything it will be glorious
[16:41:51] <FromDiscord> <hmmm> I'll worry about the funding by investing in exoteric bitcoins
[16:41:56] <FromDiscord> <Rika> No, it’s literally contradicting to be “Nim like” and have “Python syntax”
[16:42:33] <FromDiscord> <enthus1ast> nim syntax often is superior
[16:42:39] <FromDiscord> <enthus1ast> not always but often
[16:43:27] <FromDiscord> <enthus1ast> `os.path.join("foo" , "baa")`   vs  `"foo" / "baa"`
[16:43:46] <FromDiscord> <enthus1ast> always hate it when i must write python
[16:43:48] <FromDiscord> <Rika> Path lib in Python has /
[16:43:54] <FromDiscord> <enthus1ast> ok ;)
[16:44:04] <FromDiscord> <Rika> Path(“foo”) / “bar”
[16:44:12] <FromDiscord> <Rika> I think is how that works
[16:44:19] <FromDiscord> <Rika> But that’s not a limitation of syntax
[16:45:56] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FRP
[16:47:48] <FromDiscord> <hmmm> hmm I don't know, when I search for "how to do thingy on x on python" you mostly get stackoverflow solutions like : just call x.thingy. Nim has the same thing but you must search pretty hard, it has a different name that is less simple and you probably need to import a module. Also you need to check if the module you are importing is the right one or the abandoned one from 7years ago
[16:48:27] <FromDiscord> <hmmm> I guess the difference is half stack overflow presence, half simple names and half batteries included for a cool 150% sum in total
[16:48:49] <FromDiscord> <enthus1ast> sure you must be familiar with the docu and tools you use.
[16:48:52] <FromDiscord> <Rika> That is not syntax then
[16:48:57] <FromDiscord> <Rika> That is just library difference
[16:49:40] <FromDiscord> <Rika> You can always create your own standard library, I was planning to until I got hit by other plans
[16:49:52] <FromDiscord> <enthus1ast> python tk for me is like\:  "is it TK or Tk or tkinter or Tkinter..."
[16:50:19] <FromDiscord> <hmmm> my google sized force will take care of the std/lib no prob rika
[16:50:25] <FromDiscord> <enthus1ast> then you copy paste stuff, then ohh no its not correct....
[16:51:01] *** Joins: arkurious (~arkurious@user/arkurious)
[16:51:20] <FromDiscord> <Rika> In reply to @hmmm "my google sized force": I personally would not like a Python like standard library though
[16:51:23] <FromDiscord> <enthus1ast> i often find it easier to just read nim code than to resort to pythons documentation
[16:51:42] <FromDiscord> <Rika> I honestly don’t like Python’s documentation
[16:51:47] <FromDiscord> <enthus1ast> me neither
[16:52:03] <FromDiscord> <Rika> Nor the cruft of its bloated “batteries included” library
[16:52:23] <FromDiscord> <Rika> Haha url lib
[16:52:28] <FromDiscord> <Rika> Very fun to deal with
[16:53:56] <FromDiscord> <evoalg> In reply to @hmmm "I guess the difference": why do you use Nim instead of Python? For speed?
[16:54:23] <FromDiscord> <enthus1ast> @evoalg\: because deep inside he knows that its the better lang ;)
[16:55:05] <FromDiscord> <hmmm> at the start I needed small exe, nim took care of it fast and easy
[16:55:15] <FromDiscord> <hmmm> then I stayed for the landscape I guess lol
[16:55:16] <FromDiscord> <Rika> I really wish somehow the “split the stdlib into a nimble package” plan pulled through
[16:55:29] <FromDiscord> <enthus1ast> small exe == malware?
[16:55:31] <FromDiscord> <hmmm> I don't need much tbh, I'm still learning lol
[16:55:33] <FromDiscord> <Rika> But I can see the massive headache that would be
[16:55:51] <FromDiscord> <hmmm> nunu exe like small utility for myself
[16:55:59] <FromDiscord> <Rika> No really Python can’t really be made into an executable
[16:56:18] <FromDiscord> <hmmm> I needed to shop it around and didn't want to shop a 50mb slo py bloat for a very simple utility
[16:56:28] <FromDiscord> <Rika> Yes
[16:56:48] <FromDiscord> <enthus1ast> i mean pyinstaller can create a dir, then just put the various exes in the dir -\> win
[16:57:14] <FromDiscord> <Rika> Yes but have you seen the sizes
[16:57:15] <FromDiscord> <hmmm> it was still cumbersome, Nim was easy to transition to
[16:57:16] <FromDiscord> <Rika> They’re massive
[17:06:36] <FromDiscord> <enthus1ast> i've written an vacation planner, exporter etc, with excel reader and tk gui in python, it has around 6mb
[17:06:43] <FromDiscord> <enthus1ast> not too bad
[17:07:11] <FromDiscord> <enthus1ast> the reason it is in python because back then we did not had a macos gui library
[17:08:04] <FromDiscord> <enthus1ast> and today i would still write it in python because we (still) have no cross platform gui (ok gtk, but gtk is terrible)
[17:08:34] <FromDiscord> <enthus1ast> and gtk would bloat it to much more then 6mb i guess
[17:09:35] <FromDiscord> <enthus1ast> BF2142Unlocker\_v0.9.6\_win.zip   15.1 mb
[17:10:21] <FromDiscord> <enthus1ast> most of this size ^   is gtk for windows
[17:13:43] <FromDiscord> <enthus1ast> so please if anyone (with time and leisure) PLEASE write a crossplatform gui!
[17:38:05] *** Joins: luis_ (~luis@172.58.188.250)
[17:41:17] <FromDiscord> <hmmm> lol we should just jump the shark and make nim godot usable. People are starting to write 2d gui on godot because it's often easier than using the gui behemots. I plan to try and convert some of my small gui apps in godot because why the hell not lol
[17:49:53] <FromDiscord> <IsaacPaul> In reply to @enthus1ast "so please if anyone": Something I've been wanting to do for a while. I actually spent a lot of time reworking flutter (removing dart and unnecessary cruft) and trying to turn it into a crossplatform gui library.
[17:51:25] <FromDiscord> <IsaacPaul> it's on the back burner tho
[17:51:49] *** Quits: Raflemakt (~Skugfisk@129-241-230-15-gw.cgn.ntnu.no) (Ping timeout: 256 seconds)
[17:53:20] <FromDiscord> <IsaacPaul> In reply to @hmmm "lol we should just": Godot is actually pretty slow, which is why I'm avoiding it. ↵↵Unity as much as I hate to say it has a pretty good UI api.
[17:54:27] *** Quits: luis_ (~luis@172.58.188.250) (Ping timeout: 264 seconds)
[17:56:51] <FromDiscord> <hmmm> still it's telling people are abusing 3D stuff just to avoid having to deal with QT / Gtk and the likes. No one likes to use that stuff
[18:00:56] <FromDiscord> <IsaacPaul> There's also dear imgui but.. sigh. it's immediate mode.
[18:01:29] <FromDiscord> <Yardanico> I think it's more suitable for standalone UIs than Godot though :D
[18:01:36] <FromDiscord> <Yardanico> and some people actually do use it as such
[18:01:39] <FromDiscord> <Yardanico> with transparent background
[18:02:40] <FromDiscord> <Yardanico> and for imgui inspiration you can always see the examples of imgui GUIs
[18:02:43] <FromDiscord> <Yardanico> the newest thread is https://github.com/ocornut/imgui/issues/4451
[18:02:45] <FromDiscord> <enthus1ast> imho the most sane gui currently is lazarus ....
[18:02:56] <FromDiscord> <Yardanico> did you get far with the nim lcl binding?
[18:03:23] <FromDiscord> <enthus1ast> yeah did the stuff i needed by hand
[18:03:27] <FromDiscord> <Yardanico> nice
[18:03:31] <FromDiscord> <Yardanico> lcl might be a very good choice for Nim
[18:03:38] <FromDiscord> <Yardanico> for small native UIs
[18:03:45] <FromDiscord> <enthus1ast> yes
[18:07:44] <FromDiscord> <Yardanico> In reply to @Yardanico "the newest thread is": also it's really funny that game cheat developers show off their ImGUI layouts in these threads :)
[18:08:26] <FromDiscord> <enthus1ast> yeah imgui is nice and has alot of good widgets
[18:08:37] <FromDiscord> <enthus1ast> only stuff like copy paste etc must be done manually
[18:08:56] <FromDiscord> <enthus1ast> so there is still some hacky work todo
[18:09:54] <FromDiscord> <Yardanico> found some interesting projects from these threads, but that's for #offtopic
[18:19:51] *** Joins: Raflemakt (~Skugfisk@129-241-229-244-gw.cgn.ntnu.no)
[18:26:34] <FromDiscord> <Yardanico> On that note, initial Nim support (as in default templates and stuff) was merged to https://github.com/aduros/wasm4 !
[18:26:39] <FromDiscord> <Yardanico> I'll probably add it to TMWN
[18:26:46] <FromDiscord> <Yardanico> https://github.com/aduros/wasm4/pull/167
[18:28:19] <PMunch> Hmm, I was waiting for whoever was wrapping Sciter with Futhark to put it in TMWN
[18:28:34] <FromDiscord> <Yardanico> aaaaaaaa
[18:28:35] <PMunch> Wait, wasn't that you Yardanico?
[18:28:48] <FromDiscord> <Yardanico> 😿
[18:28:54] <FromDiscord> <Yardanico> yes yes i will try today
[18:32:51] <FromDiscord> <dom96> In reply to @Yardanico "On that note, initial": 👏
[18:33:16] <FromDiscord> <dom96> We need a Nim MVP of the Month award 😄
[18:36:59] <FromDiscord> <Yardanico> In reply to @PMunch "Hmm, I was waiting": do you have the gist with the options you used for sciter?  i only have this saved - https://gist.github.com/Yardanico/45c4c588449b49b3bcf514c64460ee4c
[18:37:06] <FromDiscord> <Yardanico> but it fails because of uint16_t
[18:37:20] <FromDiscord> <Yardanico> ah right cushort
[18:37:25] <FromDiscord> <Yardanico> or not
[18:41:49] <PMunch> Hmm, I don't think I used any compiler args for it
[18:42:58] <PMunch> But I need to go now. I'll check on this chat in a little while though
[18:43:01] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:56:37] <FromDiscord> <gdquest> In reply to @IsaacPaul "Godot is actually pretty": Did you have performance issues with Godot's UI?
[18:56:59] <FromDiscord> <gdquest> The Godot editor uses it, I've never had performance problems with that
[19:01:09] *** Joins: Vladar (~Vladar@46.162.2.53)
[19:01:49] <FromDiscord> <IsaacPaul> sent a long message, see http://ix.io/3FSS
[19:02:20] <FromDiscord> <gdquest> Okay so it's just things you've heard
[19:02:25] <FromDiscord> <IsaacPaul> yup
[19:02:46] <FromDiscord> <gdquest> Well the UI isn't slow at all. As I mentioned, Godot's editor is written in Godot, and it runs on cheap notebooks no problem
[19:03:11] <FromDiscord> <gdquest> The 3D engine's rendering performance has no relation with the performance of other areas - they kinda work in silos
[19:04:14] <FromDiscord> <gdquest> Now as to using Godot to make apps... we're doing it right now, it's good if you use Godot itself, but definitely not adapted to Nim or other external languages
[19:04:26] <FromDiscord> <gdquest> I mean it works with the native bindings tech, and you get near C++ performance
[19:04:52] <FromDiscord> <gdquest> But it's not designed as a UI toolkit
[19:04:57] <FromDiscord> <gdquest> Note Tesla uses Godot UI in their cars
[19:05:09] <FromDiscord> <gdquest> Their android app and dashboard is made in Godot
[19:05:14] <FromDiscord> <gdquest> (edit) "in" => "with"
[19:05:24] <FromDiscord> <IsaacPaul> In reply to @gdquest "Now as to using": Very interesting.. so is the UI built on top of the 2d engine? or is that separate
[19:06:02] <FromDiscord> <gdquest> It's on the 2D engine, which is quite optimized by now - there's ongoing work happening on performance in all areas of the engine actually
[19:06:33] <FromDiscord> <IsaacPaul> well that's good.
[19:07:21] <FromDiscord> <gdquest> But if you look at the source code basically the UI has its own logic code but calls into the RenderingServer for all drawing.
[19:07:34] <FromDiscord> <gdquest> Which does it all through the 2D renderer.
[19:07:51] <FromDiscord> <gdquest> This means you can strip Godot's physics engine, 3d, audio, and everything else to use just the GUI part
[19:08:41] <FromDiscord> <gdquest> This guy is making a Digital Audio Workstation this way - using Godot just for the GUI <https://twitter.com/colugomusic>
[19:08:42] <FromDiscord> <IsaacPaul> I'll have to check out godot again.. though the last time I did.. I saw that an http request was a 'node' on the scene and that.. was just weird.
[19:09:10] <FromDiscord> <IsaacPaul> I guess the scene is the context/controller
[19:09:11] <FromDiscord> <gdquest> In reply to @IsaacPaul "I'll have to check": I don't think it's ever been that way. It's just people use nodes a lot to attach code to their scene.
[19:09:42] <FromDiscord> <IsaacPaul> It's really designed at beginners and that scares me away xD
[19:09:46] <FromDiscord> <gdquest> You'll always have one viewport node created by the engine, but that aside nodes are optional
[19:11:31] <FromDiscord> <hmmm> gdquest have you tried the godot nim bindings yet?
[19:11:54] <FromDiscord> <hmmm> I'm curious if it works or it's too much of a hassle
[19:12:06] <FromDiscord> <gdquest> No, but I know someone who did and they worked fine for them
[19:12:33] <FromDiscord> <gdquest> Right now using GDNative - the base tech for all those external language bindings - is a little tedious to set up
[19:12:55] <FromDiscord> <gdquest> Well it's just you have to download and compile the right GDNative headers (C++) to get started
[19:13:07] <FromDiscord> <Yardanico> In reply to @hmmm "gdquest have you tried": there has been at 3 commercial games made in godot with nim
[19:13:11] <FromDiscord> <Yardanico> two mobile, one steam
[19:13:20] <FromDiscord> <Yardanico> there are probably more that we don't know about :)
[19:13:35] <FromDiscord> <gdquest> The bindings seem reliable at least yeah that's what this colleague told me
[19:13:40] <FromDiscord> <Yardanico> https://frayhem.com/en/↵https://summonage.com/en/↵https://store.steampowered.com/app/1444480/Turing_Complete/
[19:14:37] <FromDiscord> <hmmm> nice, I need to try them
[19:17:11] <FromDiscord> <IsaacPaul> I would love to look through an example nim/godot project if anyone finds one lol
[19:17:37] <FromDiscord> <hmmm> yea! we need to see the good stuff
[19:27:51] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 245 seconds)
[19:28:55] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[19:33:38] <FromDiscord> <lenis> In reply to @gdquest "Note Tesla uses Godot": Really? thats cool
[19:33:55] <FromDiscord> <lenis> I thought that using Godot for UI development was more of a gimmick
[19:34:26] <nrds> <06Prestige99> hm I would assume the same, really
[19:34:51] <FromDiscord> <Yardanico> In reply to @lenis "Really? thats cool": they had a job offering for a godot developer for UI
[19:34:58] <FromDiscord> <Yardanico> it's no longer up though
[19:35:19] <FromDiscord> <Yardanico> http://web.archive.org/web/20210828105259/https://www.tesla.com/careers/search/job/software-engineerenergymobilewebui-72387
[19:35:27] <FromDiscord> <gdquest> We know that Tesla and Google use Godot
[19:35:30] <nrds> <06Prestige99> Maybe they'll ship games inside their cars :P
[19:35:36] <FromDiscord> <Yardanico> they already do :)
[19:35:50] <FromDiscord> <gdquest> Tesla for sure in their car apps for UI and UI animation, people found Godot data files in there
[19:35:51] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 264 seconds)
[19:36:01] <FromDiscord> <gdquest> Google uses it for unreleased internal projects
[19:36:03] <FromDiscord> <Yardanico> @Prestige https://www.motortrend.com/features/tesla-arcade-video-gaming-review-model-s-plaid/
[19:36:38] <nrds> <06Prestige99> Well, it only makes sense I guess haha
[19:36:52] <FromDiscord> <gdquest> In reply to @lenis "I thought that using": It's really cool, you have programs made with Godot like MaterialMaker (procedural material and texture creation like Substance designer), Pixelorama (pixel art program) and some others
[19:37:03] <FromDiscord> <lenis> are there good docs on how to use godot for UI?
[19:37:08] <FromDiscord> <gdquest> Godot's editor is made with the Godot UI framework
[19:37:18] <FromDiscord> <gdquest> Actually Godot is a Godot game technically
[19:38:04] <FromDiscord> <gdquest> In reply to @lenis "are there good docs": The class reference is good but the docs and usability not as good as some more popular alternatives. It's getting better, and we hired a UX designer/dev to improve the usability already
[19:38:27] *** Joins: robertmeta (sid514@user/robertmeta)
[19:38:34] <FromDiscord> <lenis> thats good to hear
[19:38:46] <FromDiscord> <gdquest> You can get by - we certainly do - but I think with Godot 4 the experience will be much smoother
[19:39:21] <FromDiscord> <gdquest> We're waiting on the redesign to make some free resources and likely a paid companion course dedicated to UI
[19:39:27] <nrds> <06Prestige99> I'll probably do some nim/godot things after 4 comes out
[19:39:32] <FromDiscord> <gdquest> (edit) "redesign" => "usability improvements"
[19:39:52] <FromDiscord> <gdquest> Yeah Godot 4 even for us long term users brings so many improvements we're all waiting for it
[19:40:02] <FromDiscord> <lenis> Godot 4 sure it taking its time
[19:40:27] <FromDiscord> <gdquest> It's the scope is insane. Also devs backport many features to Godot 3 so we're still getting major updates
[19:40:36] <nrds> <06Prestige99> I'd rather have the devs take their time
[19:40:39] <FromDiscord> <gdquest> It's a complete rewrite of a 10 year-old engine
[19:41:02] <FromDiscord> <gdquest> Making almost everything modern, bringing multithreading and perf improvements to many areas
[19:41:38] <FromDiscord> <no name fits> So I'm working with Vulkan which means I have a cstringArray. How do I push to a cstringArray exactly?
[19:41:42] <FromDiscord> <lenis> I tried using godot at one point. but i found that in many areas its just lacking. such as terrain editing, big scenes, working with shaders↵↵And it had a cool window for generating patch files for game data, but the code for it was never implemented
[19:42:11] <FromDiscord> <enthus1ast> then maybe my reported my 2d physic engine bug will be fixed \:)
[19:42:13] <FromDiscord> <gdquest> Yeah terrain editing is still not coming either. At least not yet.
[19:42:15] <FromDiscord> <enthus1ast> after 5+ years \:D
[19:42:40] <FromDiscord> <gdquest> You'd have to check if it's still relevant, as so much changed already
[19:43:03] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 264 seconds)
[19:43:43] *** Joins: rockcavera (~rc@192.12.112.201)
[19:43:43] *** Quits: rockcavera (~rc@192.12.112.201) (Changing host)
[19:43:43] *** Joins: rockcavera (~rc@user/rockcavera)
[19:43:45] <FromDiscord> <no name fits> I can only find how to convert cstringArray to seq in the docs, but I just need to push one more cstring to the array
[19:43:57] <FromDiscord> <lenis> well if Godot becomes easily compatible with Nim ill give it another shot haha
[19:44:05] <FromDiscord> <lenis> I think i actually still have one of your courses for Godot 😛
[19:44:49] <FromDiscord> <gdquest> Ah! Thanks 🙂
[20:44:38] <FromDiscord> <b1tt> Nim is amazing
[20:45:35] <Amun-Ra> yes it is
[20:46:53] <FromDiscord> <hmmm> I just found the hard way I cannot name a proc mod
[20:46:58] <FromDiscord> <hmmm> 🧐
[20:47:45] <FromDiscord> <hmmm> why compiler sama can't just say "hey dude that is already reserved, stop using stupid names"
[20:48:07] <FromDiscord> <hmmm> instead of Error: identifier expected, but got 'keyword mod'
[20:48:18] <Amun-Ra> hmm: you can, proc `mod`(): discard
[20:48:35] <Amun-Ra> not that would be a good idea
[20:48:35] <FromDiscord> <hmmm> whot
[20:49:02] <FromDiscord> <hmmm> try proc mod(a : int) =
[20:49:11] <Amun-Ra> you can extend what "mod" operates on by escaping the name with ``
[20:49:51] <FromDiscord> <hmmm> lol I just want to avoid all the hassle regarding mod, I didn't know there was already a mod in existance
[20:50:22] <FromDiscord> <Yardanico> In reply to @hmmm "whot": he used backticks for stropping
[20:50:24] <FromDiscord> <hmmm> from now it will be modx, mody and the likes
[20:50:27] <FromDiscord> <Yardanico> in discord those are used for monospace font
[20:50:31] <FromDiscord> <Yardanico> so you didn't see the backticks
[20:50:43] <FromDiscord> <hmmm> ah ok
[20:50:43] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3FTu
[20:50:45] <Amun-Ra> hmm: https://play.nim-lang.org/#ix=3FTt (but that's bad as overloading in C++)
[20:50:56] <FromDiscord> <hmmm> nono backticks for me thanks I'm already confused enough
[20:52:26] <Amun-Ra> what if I escape backticks: \`mod\`
[20:54:09] <FromDiscord> <IsaacPaul> yea then you can see it
[20:54:18] <Amun-Ra> hmm
[20:55:24] <FromDiscord> <@droptweetrxd_twitter-5a0487c2d7> sent a code paste, see https://paste.rs/VJF
[20:56:25] <FromDiscord> <@droptweetrxd_twitter-5a0487c2d7> I'm using Ubuntu with WSL on Windows.  Nim 1.6.0 with  nimble v0.13.1 compiled at 2021-10-19 01\:07\:39
[20:57:53] <FromDiscord> <hmmm> hey dude are you really named @droptweetrxd_twitter-5a0487c2d7?
[20:58:39] *** Quits: Raflemakt (~Skugfisk@129-241-229-244-gw.cgn.ntnu.no) (Ping timeout: 264 seconds)
[20:59:32] <FromDiscord> <@droptweetrxd_twitter-5a0487c2d7> versus a nicer name?  I authenticated using my twitter login and that's the name I was given???
[21:00:00] <FromDiscord> <hmmm> I see 🧐
[21:00:14] <FromDiscord> <@droptweetrxd_twitter-5a0487c2d7> apologies.  new to gitter
[21:00:24] <FromDiscord> <hmmm> np 😋
[21:00:40] <FromDiscord> <Rika> ah gitter
[21:02:04] <FromDiscord> <@droptweetrxd_twitter-5a0487c2d7> Do you have any guesses as to what I did incorrectly to result in the error message?
[21:02:11] <FromDiscord> <Rika> nothing
[21:03:41] <FromDiscord> <@droptweetrxd_twitter-5a0487c2d7> weird.  switching to devel lets me install properly, but stable doesn't
[21:07:22] <FromDiscord> <Rika> i installed it on stable successfully
[21:15:51] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3FTL
[21:16:44] <Amun-Ra> Yardanico: btw, I ended up implementing my own stream object
[21:32:53] *** Joins: PMunch (~PMunch@user/pmunch)
[21:44:05] <FromDiscord> <pmunch> Well that pretty much is what it's saying, just in a bit nicer way \:P↵(@hmmm)
[21:47:03] <FromDiscord> <dom96> In reply to @IsaacPaul "if you remove all": https://github.com/nim-lang/nimble/issues/945
[21:47:15] <FromDiscord> <dom96> Best guess: the new Nimble is causing you problems.
[21:47:24] <FromDiscord> <dom96> but I dunno how you'd get it with 1.6.0
[21:47:46] <FromDiscord> <dom96> you can try `nimble refresh` as well
[21:47:49] *** Joins: Raflemakt (~Skugfisk@fwa5cfa-248.bb.online.no)
[21:47:53] <FromDiscord> <IsaacPaul> @droptweetrxd_twitter-5a0487c2d7↵^
[21:49:11] <FromDiscord> <Rika> he said it was on 0.13.1 though
[21:49:58] <FromDiscord> <dom96> there was a period of time when the new Nimble had that version number :/
[21:51:48] <FromDiscord> <pmunch> 0.13.1? That's ancient!
[21:54:02] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[21:54:26] <FromDiscord> <dom96> that's the latest release lol
[21:56:52] <FromDiscord> <Rika> nimble, not nim
[21:57:04] <FromDiscord> <Rika> In reply to @dom96 "there was a period": aw fuk
[22:09:11] <FromDiscord> <pmunch> Ah right 😋
[22:20:10] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3FU6
[22:20:21] <FromDiscord> <codic> https://www.toptal.com/developers/hastebin/ekoyicukup.rb wtf are these c errors?
[22:20:52] <FromDiscord> <codic> it looks like it is having trouble compiling `x = none y`
[22:21:06] <FromDiscord> <codic> where x: Option[y]
[22:24:23] <FromDiscord> <Rika> needs more context
[22:24:27] <FromDiscord> <Rika> code sample perhaps?
[22:32:36] *** Parts: Raflemakt (~Skugfisk@fwa5cfa-248.bb.online.no) ()
[22:33:00] <FromDiscord> <codic> sure
[22:33:14] <FromDiscord> <codic> 1s
[22:33:54] <FromDiscord> <codic> sent a code paste, see https://paste.rs/0Zo
[22:34:21] <FromDiscord> <codic> https://github.com/nim-lang/Nim/issues/11228 according to this you get this C error when  the types are different, but in this case it's uint on both sides
[22:37:34] <FromDiscord> <codic> also:↵before I was using Nim 1.4.8 @ Void, was working fine↵then I distrohopped to Debian Sid and got Nim 1.6.0, working fine↵then again to Artix, and got Nim 1.4.8, not working fine
[22:37:38] <FromDiscord> <codic> I don't see why
[22:39:37] <FromDiscord> <Rika> Maybe force a recompile
[22:39:48] <FromDiscord> <Rika> -f in the compile command I assume
[22:40:28] <FromDiscord> <hmmm> In reply to @pmunch "Well that pretty much": I want a compiler flag just for me -d:stupid. It will be very explicit for the easy errors (You forgot the = at the end of proc declaration you idiot, it is now the <counter>th time) and very cryptic for general type errors "Dude some thingy error happened at line 298. Fix that line. I spare you the 2000 lines of details you wouldn't get anyway"
[22:43:41] <FromDiscord> <codic> I'm using Nimble, but no, that doesn't seem to do anything
[22:43:48] <FromDiscord> <codic> Nor does creating a new project & copying over the code
[22:43:57] <FromDiscord> <codic> or removing ~/.cache/nim
[22:51:10] <FromDiscord> <codic> oh it works with 1.6.0 with choosenim
[22:51:12] <FromDiscord> <codic> weird.....
[22:51:16] <FromDiscord> <codic> what broke??
[22:51:53] *** Joins: fputs5 (~fputs@67.59.83.166)
[22:54:22] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 268 seconds)
[22:54:23] *** fputs5 is now known as fputs
[22:58:45] *** Joins: src (~src@user/src)
[23:11:45] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[23:12:11] *** Joins: anddam (~anddam@user/anddam)
[23:15:24] *** Quits: anddam (~anddam@user/anddam) (Client Quit)
[23:15:42] *** Joins: anddam (~anddam@user/anddam)
[23:18:17] *** Quits: anddam (~anddam@user/anddam) (Client Quit)
[23:20:35] *** Joins: anddam (~anddam@user/anddam)
[23:20:58] <nixfreaknim[m]> trying to load a sample rss feed like so: let feed = loadRSS("http://data.xssed.org/news.rss")
[23:21:06] <nixfreaknim[m]> and read pubDate 
[23:21:21] <nixfreaknim[m]> echo feed.pubDate
[23:21:49] <nixfreaknim[m]> https://github.com/achesak/nim-rss/blob/master/src/rss.nim
[23:24:16] <nixfreaknim[m]> Keep getting error Users/.choosenim/toolchains/nim-#version-1-6/lib/system/io.nim(853) readFile
[23:24:16] <nixfreaknim[m]> Error: unhandled exception: cannot open: http://data.xssed.org/news.rss [IOError]
[23:24:16] <nixfreaknim[m]> Error: execution of an external program failed: '/Users/tmp/read_rss '
[23:25:27] <FromDiscord> <Elegantbeef> `getRSS`
[23:25:38] <FromDiscord> <Elegantbeef> `load` is from local `getRss` is remote
[23:32:41] <nixfreaknim[m]> so getRSS("http://data.xssed.org/news.rss") 
[23:33:24] <nixfreaknim[m]> let x = getRSS("http://data.xssed.org/news.rss")
[23:33:24] <FromDiscord> <Elegantbeef> yep
[23:33:51] <nixfreaknim[m]> echo x.pubDate ? 
[23:34:46] <FromDiscord> <Elegantbeef> Should be
[23:36:25] <nixfreaknim[m]> yeah not getting anything back from it 
[23:36:28] <nixfreaknim[m]> just blank 
[23:37:09] <FromDiscord> <Elegantbeef> well there is no pub date for the parent node
[23:37:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3FUz
[23:38:25] <nixfreaknim[m]> oh because its under item node 
[23:40:11] <nixfreaknim[m]> <channel>... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f36fca0fd409eeff9aeeb2a4509963184893c218)
[23:40:41] <FromDiscord> <hmmm> is there a sane way of assigning the string of a proc name to a var?
[23:41:20] <FromDiscord> <Elegantbeef> What?
[23:41:41] <FromDiscord> <Elegantbeef> You want to take a string input and get the proc of that name?
[23:41:44] <FromDiscord> <hmmm> I have a proc named thingy I want var x = "thingy"
[23:42:16] <FromDiscord> <Elegantbeef> well you can with a bit more mechanisms
[23:42:25] <FromDiscord> <Elegantbeef> Are these procs all the same types?
[23:42:34] <FromDiscord> <hmmm> hmm
[23:43:09] <FromDiscord> <Elegantbeef> If not there isnt really a way to do this neatly
[23:43:18] <FromDiscord> <hmmm> they take and return different types if that's what you are asking
[23:43:40] <FromDiscord> <Elegantbeef> So they have different signatures, are they all unique or do the fall under a specific set of procedures?
[23:44:03] <FromDiscord> <hmmm> 👀
[23:44:09] <FromDiscord> <hmmm> can I have a reserve question
[23:44:41] <FromDiscord> <Elegantbeef> Elaboration is all i need to be able to provide a solution
[23:44:51] <FromDiscord> <hmmm> hmm
[23:45:28] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Quit: The Lounge - https://thelounge.chat)
[23:45:48] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[23:46:48] <FromDiscord> <hmmm> even google seem puzzled by my request
[23:46:56] <FromDiscord> <hmmm> thought it was something normal
[23:47:34] <FromDiscord> <hmmm> isn't there a function somewhere that gets out all of the symbols?
[23:47:55] <FromDiscord> <hmmm> woa
[23:47:56] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3FUB
[23:48:07] <FromDiscord> <enthus1ast> but might not work in any case
[23:48:18] <FromDiscord> <hmmm> lemme try a quick copy paste then I will try to understand what is doin
[23:48:34] <FromDiscord> <Elegantbeef> Tis is just taking in a symbol and returning the ast of it
[23:48:45] <FromDiscord> <enthus1ast> what do you try to do this?
[23:48:47] <FromDiscord> <enthus1ast> why
[23:49:15] <FromDiscord> <IsaacPaul> ... uh but _why_ do you need the name of procs? what are you trying to do. I have a feeling there maybe a better solution to your problem because you're essentially asking for some sort reflection for procs.
[23:49:21] <FromDiscord> <hmmm> yea it is what I want
[23:49:29] <FromDiscord> <hmmm> but there is too magic I don't get in there
[23:49:36] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/SMB
[23:49:38] <FromDiscord> <hmmm> jeesus
[23:49:58] <FromDiscord> <enthus1ast> > ↵> The less silly version of the above↵> \:(↵>
[23:50:06] <FromDiscord> <IsaacPaul> lol
[23:50:20] <FromDiscord> <Elegantbeef> Well what you're wanting isnt overly needed, getting procs by name like this is only available at CT
[23:50:32] <FromDiscord> <Elegantbeef> Sorry enthus it's just the truth 😛
[23:51:30] <FromDiscord> <Elegantbeef> Either way we probably should've done `obj: typed{proc}` and `p: proc{proc}` respectively
[23:52:03] <nixfreaknim[m]> So can I access the item node.pubDate ? 
[23:52:14] <FromDiscord> <Elegantbeef> But yea hmmm elaborate what you're doing instead of making us guess, my assumption is you want to have strings change a proc call
[23:52:25] <FromDiscord> <Elegantbeef> https://github.com/achesak/nim-rss/blob/master/src/rss.nim#L18-L39
[23:54:19] <FromDiscord> <hmmm> hmm I was just trying to spare me some typing, I have to refactor my weekend project with proper names and I have procs and later strings that refer to them and I was thinking it would be neat to tie the strings to the proc so if later I change the proc names again I don't need to change the strings
[23:55:02] <FromDiscord> <Elegantbeef> Why do the proc names matter in relation to strings
[23:55:49] <FromDiscord> <hmmm> well the strings are just terminal output that say: hey we now "push" things and there is indeed a push proc
[23:56:07] <FromDiscord> <hmmm> or something like that lol the more I write about it the more I get confuus'd
[23:56:11] <FromDiscord> <Elegantbeef> Ok here we go
[23:56:20] <FromDiscord> <Elegantbeef> Here we go you want keys -\> procs
[23:56:27] <FromDiscord> <hmmm> yea?
[23:56:31] <FromDiscord> <hmmm> YEA I WANT THAT
[23:56:52] <FromDiscord> <hmmm> how do I activate this magic protocol
[23:56:53] <FromDiscord> <Elegantbeef> So what do the procs signatures look like `proc doStuff(args: openarray[string])`?
[23:57:19] <FromDiscord> <Elegantbeef> Well we first need to see what your requirement is
[23:58:07] <FromDiscord> <Elegantbeef> You need to think about "what procs are needed"
[23:59:46] <FromDiscord> <hmmm> they are mostly normal simple procs like proc push(x :int) =
