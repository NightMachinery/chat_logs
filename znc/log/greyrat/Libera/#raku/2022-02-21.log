[00:10:24] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[00:50:25] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:54:03] <Geth> ¦ problem-solving: vrurg assigned to codesections Issue Uniform approach to distributing important messages within Raku community https://github.com/Raku/problem-solving/issues/317
[01:42:56] <Xliff> Where does Bisectable keep it's builds?
[01:47:08] <MasterDuke> shareable6: 2022.01
[01:47:08] <shareable6> MasterDuke, https://whateverable.6lang.org/2022.01
[01:47:32] <MasterDuke> Xliff: ^^^ there
[01:50:25] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:51:34] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:51:44] <discord-raku-bot> <Nemokosch#9980> I tend to mess up the diplomatics so this time I will just ask, please don't think that what I'm saying is meant in a bad way, more just random feedback
[01:52:28] <discord-raku-bot> <Nemokosch#9980> so I was reading up on a problem solving issue (<https://github.com/Raku/problem-solving/issues/290>) and I bumped into an interesting statement
[01:52:38] <discord-raku-bot> <Nemokosch#9980> _We optimize for readers of the code before we optimize for the writers of code._
[01:53:48] <discord-raku-bot> <Nemokosch#9980> And I was like... "Really? 🤔 "
[01:53:48] <discord-raku-bot> <Nemokosch#9980> It absolutely doesn't feel like that to me
[01:55:51] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[01:56:10] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[01:56:23] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[01:57:56] <discord-raku-bot> <Nemokosch#9980> And honestly I even found it a nice trait of Raku that it's insanely prototyping-friendly and you can kind of "vent" with your code
[01:59:57] <MasterDuke> well, i say that's true compared to Perl, but maybe less so compared to (some/many/) other languages
[02:00:33] <MasterDuke> e.g., Raku regexes are more verbose than Perl regexes
[02:08:16] <discord-raku-bot> <Nemokosch#9980> yes, regexes are pretty reader-friendly compared to most regex syntaxes (perhaps all I have seen)
[02:12:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[02:12:24] <discord-raku-bot> <Nemokosch#9980> but "magic variables" (I don't know if this is the right term, I mean $_ and $/ in particular) for example are rather tricky for someone not used to the Perl family
[02:12:43] <discord-raku-bot> <Nemokosch#9980> again, that doesn't mean they are bad, the topic variable is a bit like good old Pascal `with` for me, it removes unnecessary repetition of a term
[02:14:28] <discord-raku-bot> <Nemokosch#9980> for me it feels they are more for refactoring than easy readability
[02:14:39] *** Joins: tejr (~tejr@user/tejr)
[02:18:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:30:05] <MasterDuke> i wasn't around during the early parts of the language creation, but i wonder if timtoady has a slightly different sense of read the code than one might usually think. i.e., he's talked about being inspired by natural language constructs (e.g., postfix `if`, `unless`), maybe he is/was thinking of reading in a more general sense of understanding
[02:30:06] <MasterDuke> what's going on than knowing exactly how everything you read is implemented
[02:36:19] <MasterDuke> so one might look at `$/<good-name-here>` and not know exactly *how* the contents of `$/` are populated, but if that name is in fact descriptive, you have a good guess at what's going on. compared to a fictitious example `match_result.named_matches.get('good-name-here')`, there's just a lot more stuff obscuring what you actually care about
[02:36:42] <MasterDuke> but this is all just speculation on my part
[03:18:27] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:18:27] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:19:21] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:20:59] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:29:39] <japhb> The list of magic variables is actually *much* reduced from Perl.  And that was intentional.
[03:30:58] <leont> Yeah, there are only $_, $/ and $!, and the last one is barely magical.
[03:31:10] <Xliff> MasterDuke++
[03:32:01] <Xliff> MasterDuke: Getting a 404 from that URL
[03:32:38] <Xliff> leont: Don't the dynamics count?
[03:32:59] <leont> I wouldn't consider them magical, TBH
[03:33:27] <Xliff> OK
[03:36:59] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:41:05] <leont> They're just differently namespaced
[04:02:22] *** Quits: timm (~timm@user/timm) (Remote host closed the connection)
[04:03:03] *** Joins: timm (~timm@user/timm)
[04:07:52] *** Quits: timm (~timm@user/timm) (Remote host closed the connection)
[04:13:56] *** Joins: timm (~timm@user/timm)
[04:18:57] <guifa> Nemokosch: the topic actually is a bit different between Perl and Raku.  The idea of the topic in perl is from pro-drop languages (Larry is a linguist by trade).  In, e.g., Spanish, I can say "El perro es grande. Es negro.  Ladra."  (literally: The dog is big. Is black. Barks").  There's no need to repeat the subject
[04:19:46] <guifa> Each followed the natural language convention that a topic is established and continued, but Perl did it at a line-by-line level, and Raku does it a block level
[04:21:13] <guifa> Generally, you shouldn't need to reference the topics, just like in such pro-drop languages, you'd rarely use the subject explicitly except for emphasis 
[04:22:02] <guifa> to me, given $foo { .bar; .baz; .abc; .say } is a bit clearer than $foo.bar; $foo.baz, $foo.abc, $foo.say
[04:22:43] <guifa> I guess with is probably the better control word there but both work
[04:24:40] <guifa>  The nice thing though is, just like my students learning Spanish, you're not *required* to use it.  AFAIK, every structure in Raku that might use a topic variable has a way to use an explicit named variable instead, at the cost of a bit more line noise (although, no more than most other programming languages)
[04:35:02] <discord-raku-bot> <Nemokosch#9980> the dynamics don't count in my opinion, even though they also seem to be a "writers first" feature
[04:35:02] <discord-raku-bot> <Nemokosch#9980> for the topic variable, I don't know how it is in Perl and I suspected it got simplified in Raku
[04:37:06] <discord-raku-bot> <Nemokosch#9980> still, I think it's useful to think "inside the box", and outside of the Perl macroverse
[04:37:10] <discord-raku-bot> <Nemokosch#9980> I'm no ambassador of outsiders but I have the impression many people would raise their eyebrows if you told them that Raku was designed with the outsider reader in mind
[04:39:11] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:39:58] <discord-raku-bot> <Nemokosch#9980> >  to me, given $foo { .bar; .baz; .abc; .say } is a bit clearer than $foo.bar; $foo.baz, $foo.abc, $foo.say
[04:39:58] <discord-raku-bot> <Nemokosch#9980> I kind of agree, also, this kind of code is a pleasure to refactor even with notepad
[04:42:18] *** Quits: xinming (~xinming@115.221.11.48) (Ping timeout: 272 seconds)
[04:44:04] *** Joins: xinming (~xinming@115.221.15.154)
[04:50:11] *** Joins: f00 (~timm@user/timm)
[04:50:57] *** Quits: timm (~timm@user/timm) (Read error: Connection reset by peer)
[04:54:22] *** Quits: f00 (~timm@user/timm) (Read error: Connection reset by peer)
[04:54:41] *** Joins: f00 (~timm@user/timm)
[04:59:26] *** Quits: f00 (~timm@user/timm) (Ping timeout: 250 seconds)
[05:59:27] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:27] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:27] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:59:27] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:27] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:59:49] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[05:59:56] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:00:12] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[06:00:13] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[06:00:18] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[06:00:20] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[06:00:30] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:00:47] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:00:54] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:01:05] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[06:02:12] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[06:07:28] *** Quits: xinming (~xinming@115.221.15.154) (Ping timeout: 250 seconds)
[06:07:51] *** Joins: xinming (~xinming@115.221.15.154)
[06:10:16] <guifa> Nemokosch: using the topic variable definitely takes a little bit to get used to, but once you do, it's very easy on the eye as a user.  At the very least, though, starting a line with a .foo should signal to a non-Raku user that *something* is going on, and hopefully it doesn't take long to find out it's acting on the topic
[06:13:02] <leont> And unlike in Perl (where it's essentially a dynamic variable) it's lexical, so it doesn't have weird action at a distance issues.
[06:59:47] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:01:24] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:01:52] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[07:53:48] *** Quits: xinming (~xinming@115.221.15.154) (Ping timeout: 240 seconds)
[07:54:11] *** Joins: xinming (~xinming@115.221.15.154)
[08:00:11] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:02:28] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:38:20] *** Joins: toastloop (~toastloop@user/toastloop)
[09:00:48] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:19:27] *** Joins: mexen (uid495612@user/mexen)
[09:37:28] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:48:49] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[09:51:32] *** Joins: Altai-man_ (~koto@94.142.239.45)
[09:52:33] *** Quits: Altai-man_ (~koto@94.142.239.45) (Client Quit)
[10:00:00] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[10:07:58] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[10:15:37] *** Quits: Altai-man (~koto@94.142.239.45) (Quit: Leaving)
[10:18:52] *** Joins: sena_kun (~koto@94.142.239.45)
[10:18:53] *** Quits: sena_kun (~koto@94.142.239.45) (Client Quit)
[10:39:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:49:58] *** Quits: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[10:54:31] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[10:59:02] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 256 seconds)
[10:59:51] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[11:01:12] *** Joins: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net)
[11:22:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[11:36:21] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:37:04] *** Joins: Sgeo (~Sgeo@user/sgeo)
[11:37:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:00:26] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[12:04:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[12:15:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:27] *** Joins: toastloop (~toastloop@user/toastloop)
[12:21:14] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:30:18] *** Joins: f00 (~timm@user/timm)
[12:48:57] *** Quits: patrickb (1e10e02c48@2604:bf00:561:2000::2fa) (Ping timeout: 240 seconds)
[12:49:14] *** Joins: patrickb (1e10e02c48@2604:bf00:561:2000::2fa)
[13:05:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[13:11:16] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:11:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:20:23] *** Parts: toastloop (~toastloop@user/toastloop) (Leaving)
[13:32:26] <Voldenet> I consider dynamic variables mostly an antipattern
[13:33:22] <Voldenet> the biggest issue with them is when you need to use some process using changing dynamic variable
[13:35:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:36:18] <Voldenet> `my $*unclear = "a"; code(); { my $*unclear="b"; code(); }; code()` vs `code("a"); code("b"); code("a");`
[13:36:38] <discord-raku-bot> <Nemokosch#9980> they are essentially hidden globals
[13:36:42] <discord-raku-bot> <Nemokosch#9980> again, okay for prototyping
[13:37:27] <Voldenet> I'd say okay for rarely used code that never needs to switch context, like loggers
[13:38:30] *** Parts: f00 (~timm@user/timm) (Leaving)
[13:40:46] <discord-raku-bot> <Nemokosch#9980> what would that look like?
[13:41:18] <Voldenet> for instance: `my $*sql-executing = -> $_ { .query.say }; some-complicated-process-using-sql($conn.start-transaction)`
[13:42:47] <Voldenet> however, `$conn.sql-executing = …` would be as fine
[13:43:58] <Voldenet> but then it would pollute connection's state, so it would start logging things outside of the current routine
[13:44:54] <discord-raku-bot> <Nemokosch#9980> tbh it's hard to come up with a good use
[13:46:58] <discord-raku-bot> <Nemokosch#9980> one thing is sure: it's never unavoidable
[14:03:21] <lizmat> please note that dynamic variables are used extensively internally, without it e.g. react / whenever would not work
[14:03:57] <lizmat> (or at least be a lot harder to implement)
[14:08:20] <Voldenet> While there are good examples where it makes sense, "avoid it until you decide that you can't" is a good rule
[14:09:50] <discord-raku-bot> <Nemokosch#9980> I'm sure there are good examples, I've just never come across them so far 😛
[14:15:45] <lizmat> dynamic variables make excellent default values for parameters
[14:16:45] <lizmat> take e.g. the $*SCHEDULER variable.  If you want to use another scheduler for your code, you don't need to pass it along everywhere, you just need to specify it in the outer dynamic scope of your code
[14:19:22] <El_Che> (who schedules the scheduler?)
[14:19:37] <lizmat> the core does  :-)
[14:20:40] <El_Che> and who cores the core? :)
[14:20:52] <El_Che> (weirdly enough, it's a verb)
[14:21:43] <lizmat> I don't think I can verb my way out of this  :-)
[14:21:52] <El_Che> :)
[14:22:17] <discord-raku-bot> <Nemokosch#9980> 😂
[14:22:19] <El_Che> Star Trek famously ejects the core more often than not
[14:23:21] <El_Che> Efforts to speed up the raku core should be under the Scotty umbrella
[14:26:45] <Voldenet> scheduler can schedule the scheduler just fine
[14:29:18] <El_Che> and decides it's fine?
[14:31:10] <Voldenet> "fine" is a decision made based on sanity of the original author
[14:31:32] <Voldenet> m: my $*SCHEDULER = class :: { method cue($code) { my $*SCHEDULER = CurrentThreadScheduler.new; start $code(); } }.new; await start { "why though".say };
[14:31:32] <camelia> rakudo-moar 6ddf75296: OUTPUT: «why though␤»
[14:32:49] <discord-raku-bot> <Nemokosch#9980> :DD
[14:36:18] <El_Che> Voldenet: so we end up with the "Lary is always right" axioma :)
[14:38:51] <Voldenet> I've seen threading apis using schedulers as method arguments and… uh, end result was difficult to understand
[14:41:45] <El_Che> I imagine
[14:42:00] <El_Che> "Imagine there is no scheduleeeeeer"
[14:42:10] <Voldenet> Scheduler is an implementation detail
[14:42:39] <lizmat> the default scheduler is an implementation detail, yes
[14:42:51] <lizmat> but you can write your own, if you want to
[14:42:52] <Voldenet> so it's useful to keep it hidden from people
[14:43:15] <lizmat> well, most people don't know of its existence, so I think that part worked out  :-)
[14:46:37] <El_Che> lizmat: I see you play the long game :)
[14:46:54] <lizmat> well, if you can't tell that by now...  :-)
[14:47:24] <El_Che> sue me, write me a open letter :P
[14:47:29] <El_Che> an
[14:47:49] <El_Che> (I need to drink less coffee monday morning :) )
[14:51:15] <El_Che> https://c.tenor.com/E-pWfHWt2xUAAAAd/tweaking-tweek-tweak.gif
[14:54:05] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:54:05] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:54:34] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[14:55:15] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:56:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[14:56:58] <Voldenet> If you think you've had too much coffee, you need more of it
[15:02:55] <El_Che> Voldenet: it sounds like a hangover fix
[15:25:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:27:21] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:30:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[15:37:27] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:41:01] <qorg11> Any way to convert bytes to base32?
[15:53:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:55:23] *** Joins: frost (~frost@user/frost)
[15:57:37] <lizmat> m: dd 42.base(32)   
[15:57:37] <camelia> rakudo-moar 6ddf75296: OUTPUT: «"1A"␤»
[15:57:49] <lizmat> qorg11 ^^
[16:04:10] <qorg11> Is that the encoding?
[16:04:13] <qorg11> Like base64 but base32?
[16:05:49] <lizmat> m: dd 65.base(32)
[16:05:50] <camelia> rakudo-moar 6ddf75296: OUTPUT: «"21"␤»
[16:05:55] <lizmat> m: dd 63.base(32)
[16:05:56] <camelia> rakudo-moar 6ddf75296: OUTPUT: «"1V"␤»
[16:06:03] <Voldenet> it's not rfc4648 base32
[16:06:31] <CIAvash> qorg11: didn't find anything in the ecosystem for base32, but maybe this will help: https://github.com/ugexe/Perl6-Base64/blob/master/lib/Base64.pm6
[16:06:33] <Voldenet> it's base32 hex
[16:07:40] <lizmat> there's also https://raku.land/zef:raku-community-modules/MIME::Base64
[16:27:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[16:38:16] *** Joins: hankache (~hankache@user/hankache)
[16:47:45] *** Quits: hankache (~hankache@user/hankache) (Quit: Quit)
[17:07:06] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b) (Ping timeout: 260 seconds)
[17:30:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:32:58] <lizmat> And yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2022/02/21/2022-08-grammarly-co-op/
[17:36:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:38:36] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[17:42:26] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[18:09:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[18:11:45] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[18:15:39] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Changing host)
[18:15:39] *** Joins: qorg11 (~lain@user/qorg)
[18:16:25] *** Quits: qorg11 (~lain@user/qorg) (Quit: WeeChat 3.3)
[18:16:40] *** Joins: gotem (~lain@user/qorg)
[18:25:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[18:32:12] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 240 seconds)
[18:33:54] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[18:39:59] *** Joins: curiosa (~curiosa@37.169.29.116)
[18:44:32] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 268 seconds)
[18:44:49] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[18:55:32] <discord-raku-bot> <Nemokosch#9980> um, the second example of the second task is faulty again... where would you report?
[18:55:45] <discord-raku-bot> <Nemokosch#9980> talking about the weekly challenge
[19:14:30] <Geth> ¦ ecosystem: c11ebef951 | (Elizabeth Mattijsen)++ | META.list
[19:14:30] <Geth> ¦ ecosystem: Remove Color, Web::App and Web::App::MVC
[19:14:30] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/c11ebef951
[19:19:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[19:28:33] * [Coke] reads the weekly #153, and is not surprised that factorions seem a little scarce.
[19:38:46] <Geth> ¦ ecosystem: e62f923cf6 | (Elizabeth Mattijsen)++ | META.list
[19:38:46] <Geth> ¦ ecosystem: Move Andrew Egeler's modules to raku-community-modules
[19:38:46] <Geth> ¦ ecosystem: 
[19:38:46] <Geth> ¦ ecosystem: Well, for those that now live in the Raku Community Modules
[19:38:46] <Geth> ¦ ecosystem: Adoption Center.
[19:38:46] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/e62f923cf6
[19:39:15] <guifa> Nemokosch: I definitely agree that dynamics are something to be used sparingly.  But they are really useful when you hit those cases.  One semi-useful place has been where I have a large number of small subs that need to be passed mostly the same variables, but I'm too lazy to write it out
[19:40:11] <guifa> my %formatters = a => { $*day }, b => { $*month }, c => { $*date-delimiter }  
[19:41:05] <lizmat> guifa: you could also let those subs share a lexical scope  :-)
[19:41:19] <guifa> I mean, yes, assuming that works in the code structure
[19:41:50] *** Quits: patrickb (1e10e02c48@2604:bf00:561:2000::2fa) (Remote host closed the connection)
[19:42:02] <guifa> then you can just set those, and do something like $fmt-string.comb.map({ %formatters{$_}() }).join et violà 
[19:42:07] <Geth> ¦ ecosystem: 9d0c359b7d | (Elizabeth Mattijsen)++ | META.list
[19:42:07] <Geth> ¦ ecosystem: Freeze Net::SMTP
[19:42:07] <Geth> ¦ ecosystem: 
[19:42:07] <Geth> ¦ ecosystem: While we're moving it to the zef ecosystem
[19:42:07] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/9d0c359b7d
[19:42:52] *** Joins: patrickb (1e10e02c48@2604:bf00:561:2000::2fa)
[19:43:13] <guifa> lizmat hence I said "semi-useful".  Given that the code for formatters for the international datetime formatting is severla hundred lines long, it makes sense to pull it to a different scope (module, even, I think is how I last left it, but that module is ripe for a massive rewrite with RAST)
[19:43:27] <lizmat> :-)
[19:43:31] <lizmat> ok
[19:43:42] * guifa ended up using $^vars though
[19:43:55] <guifa> turns out those are the fastest way to pass args into a block
[19:44:03] <guifa> at least as of last year when I benchmarked it
[19:44:16] <lizmat> ah?  faster than an explicit signature ?
[19:44:23] <guifa> indeed!  It was quite surprising to me
[19:44:26] <lizmat> I thought they codegenned to the same thing?
[19:45:00] <guifa> in RAST at least, they have separate nodes, but maybe at the QAST level they are handled the same
[19:46:11] <lizmat> well, I'm not seeing any difference between:
[19:46:12] <lizmat> my $a = { $^a + $^b }; $a(42,666) for ^10000000
[19:46:21] <lizmat> and 
[19:46:22] <lizmat> my $a = -> $a, $b { $a + $b }; $a(42,666) for ^10000000
[19:46:23] <lizmat> now
[19:46:50] <guifa> Almost certainly newdisp touched on some of that stuff, yeah?
[19:47:15] <lizmat> wouldn't think so
[19:47:49] <lizmat> what it touched is how the infix:<+> is dispatched
[19:48:23] <guifa> hmm, I dunno then
[19:48:24] <guifa> oh
[19:48:25] <guifa> jeez
[19:48:30] <guifa> my benchmark is even older than last year
[19:48:31] <guifa> https://github.com/alabamenhu/IntlFormatDateTime/blob/main/lib/Intl/Format/DateTime/Formatters.pm6
[19:48:37] <lizmat> m: my $a = -> $a, $b { $a + $b }; dd $a.signature
[19:48:37] <camelia> rakudo-moar 451ad0ea6: OUTPUT: «:($a, $b)␤»
[19:48:47] <guifa> "As of Dec 2020 in Rakudo, implicit positionals are the fastest"
[19:48:58] <lizmat> m: my $a = { $^a + $^b }; dd $a.signature
[19:48:59] <camelia> rakudo-moar 451ad0ea6: OUTPUT: «:($a, $b)␤»
[19:49:19] <lizmat> ok, not sure what changed since then
[19:50:18] <guifa> I'd almost do a new benchmark now with my code except … that's a lot of refactoring to do to test with when I'm just gonna gut it all ;-) 
[19:50:39] <lizmat> yeah, sure. no pb  :-)
[19:50:55] <lizmat> I think there *is* a difference between handling of \a and $a in a signature nowadays
[19:51:08] <lizmat> if it can be proven that $a is *not* an Iterable at compile time
[19:51:46] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 272 seconds)
[19:53:04] <guifa> oh yeah, this also reminds me I need to start working on DateTime::Calendars
[19:53:51] * guifa stares forbodingly at the book on his shelf titled Calendrical Calculations and the insane amounts of math and astronomical calculations and stuff
[19:54:09] <lizmat> :-)
[19:56:05] <guifa> I guess an initial test could be one of the ones that's identical to gregorian, but for the epoch.  I'm just curious if there's a way I can somehow get ::Calendars and ::Timezones to play nicely, such that they can be called in either order, and/or independently, deep in module scope or at top level scope
[19:56:38] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[20:02:01] <guifa> I *think* it would be easier if CORE::DateTime had a .calendar, .era, .cycle, .quarter attributes (easily supplied with initial attributes of 'gregorian', {.year > 0}, 0, { (.month + 2) % 3 }, but I think that'll be a summer project for me to figure out all that
[20:02:46] <lizmat> I think to have that in core, would be troublesome performance wise for the cases that don't need it  :-(
[20:03:38] <discord-raku-bot> <Anton Antonov#7232> I have a regex that parses code lines, for example,  ```
[20:03:38] <discord-raku-bot> <Anton Antonov#7232> my regex CodeLine {
[20:03:38] <discord-raku-bot> <Anton Antonov#7232>     ^^
[20:03:38] <discord-raku-bot> <Anton Antonov#7232>     $<indent>=(\h ** 2)
[20:03:38] <discord-raku-bot> <Anton Antonov#7232>     $<code>=(<-[\h]> [<alpha> | '(' | ')' | '_' | '.' | \s | '::' | '$']+ )
[20:03:39] <discord-raku-bot> <Anton Antonov#7232>     $$
[20:03:39] <discord-raku-bot> <Anton Antonov#7232> }
[20:03:40] <discord-raku-bot> <Anton Antonov#7232> ```
[20:03:40] <discord-raku-bot> <Anton Antonov#7232> I want to be able to use a variable to specify the number of indentation spaces (it is hard coded as 2 above.) Can specify that as an argument for the regex above, or should I make a function that creates regexes using a quantifier as an argument?
[20:05:19] <guifa> my regex CodeLine($indent) { … \h ** $indent … } 
[20:06:47] <guifa> err
[20:09:06] <guifa> that $indent  needs to go into a code block
[20:09:12] <guifa> \h ** {$indent}
[20:09:42] <guifa> Although it looks like passing that variable to the regex is annoying outside of grammars… so maybe use ..... 
[20:10:00] * guifa pauses while scrolling up and looking at Nemokosch quietly ;-) 
[20:10:05] <guifa> dynamic variable :D 
[20:11:31] <discord-raku-bot> <Anton Antonov#7232> @guifa Thanks!
[20:12:04] <guifa> m: my regex foo { \h ** {$*indent} }; my $*indent = 2; say ' ' ~~ &foo; say '  ' ~~ &foo;
[20:12:05] <camelia> rakudo-moar 451ad0ea6: OUTPUT: «Nil␤｢  ｣␤»
[20:13:35] <discord-raku-bot> <Anton Antonov#7232> @guifa Yes, I tried that you suggest in the last line first without the curly brackets around `$indent` , so, yes, that works.
[20:28:12] *** Quits: patrickb (1e10e02c48@2604:bf00:561:2000::2fa) (Remote host closed the connection)
[20:30:27] *** Quits: vrurg (~vrurg@45.74.95.181) (Remote host closed the connection)
[20:31:19] *** Joins: vrurg (~vrurg@45.74.95.181)
[20:34:40] *** Joins: patrickb (1e10e02c48@2604:bf00:561:2000::2fa)
[20:37:15] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:768b:1849:a78b:4ad)
[20:38:07] <Geth> ¦ ecosystem: 22ec24e8b2 | (Elizabeth Mattijsen)++ | META.list
[20:38:07] <Geth> ¦ ecosystem: Freeze Email::Simple
[20:38:07] <Geth> ¦ ecosystem: 
[20:38:07] <Geth> ¦ ecosystem: While we're moving it to the zef ecosystem
[20:38:07] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/22ec24e8b2
[20:43:34] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[20:51:15] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:56:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[20:59:30] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 260 seconds)
[20:59:45] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[21:01:10] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:02:40] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[21:04:48] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 256 seconds)
[21:11:02] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 256 seconds)
[21:18:10] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[21:21:04] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 272 seconds)
[21:37:37] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:37:58] *** Quits: curiosa (~curiosa@37.169.29.116) (Quit: Client closed)
[21:49:37] *** Quits: MasterDuke (~MasterDuk@94.0.188.131) (Remote host closed the connection)
[21:53:44] <Geth> ¦ ecosystem: 9d0d47bc59 | (Elizabeth Mattijsen)++ | META.list
[21:53:44] <Geth> ¦ ecosystem: Freeze Net::IMAP
[21:53:44] <Geth> ¦ ecosystem: 
[21:53:44] <Geth> ¦ ecosystem: While we move it to the zef ecosystem
[21:53:44] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/9d0d47bc59
[22:51:08] *** Joins: vrurg (~vrurg@45.74.95.181)
[23:06:59] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:768b:1849:a78b:4ad) (Ping timeout: 252 seconds)
[23:29:31] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[23:40:25] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:50:48] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
