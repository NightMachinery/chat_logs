[00:17:15] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[01:13:07] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[01:58:40] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 260 seconds)
[02:09:04] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[02:22:21] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[02:41:37] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[02:42:22] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[02:42:23] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[02:46:44] *** Joins: selwyn (~selwyn@user/selwyn)
[02:50:36] * hayley uploaded an image: (87KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wIuFMqsvoYHTnLPVOfxchvfj/laserbracha.jpg >
[02:50:37] <hayley> mrw mandatory typing
[03:03:25] <selwyn> hayley: this is a long shot but are you familiar with an australian cover of biggie smalls - juicy
[03:03:42] <hayley> Nope.
[03:04:32] <selwyn> wonder how i am going to find it lol, listened to it ages ago
[03:08:57] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[03:09:16] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Write error: Connection reset by peer)
[03:09:16] *** Quits: hendursaga (~weechat@user/hendursaga) (Write error: Connection reset by peer)
[03:09:16] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Write error: Connection reset by peer)
[03:09:59] <hayley> https://twitter.com/Transhumanian/status/1436814810579193859
[03:10:11] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:33:56] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[03:35:51] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:48:40] <hayley> https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-FactoringRedundancy.html
[03:48:40] -ixelp- "Factoring Redundancy", Comm. of the ACM 34,5 (May 1991), 98-99.
[03:51:57] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:00:55] <hayley> gilberth: Baker mentioned an accidental prefetch due to barriers: "Accessing the portion of tospace where the object is being copied will also likely cause cache misses and replacements, although any tospace information brought into the mutator
[04:00:55] <hayley> cache in this way will very likely be referenced, and we may have performed a beneficial prefetch."
[04:01:32] <dave0> maw
[04:02:03] <hayley> Hey dave0
[04:02:18] <dave0> hey how are you?
[04:02:31] <hayley> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.9807&rep=rep1&type=pdf PCOPYB or smth idk vectorised garbage collection
[04:02:32] <hayley> Okay, how are you?
[04:02:36] <dave0> alright
[04:02:52] <dave0> just chilling until my walk
[04:05:33] <hayley> Hm, so we need vector gather/scatter instructions. Surprisingly, AVX2 has VPGATHERQQ and friends to gather.
[04:09:47] <hayley> Apparently they aren't much faster than doing separate loads, but if the rest of this is faster...
[04:12:24] <hayley> Appel tests on a Cray supercomputer with vector lengths of 16, 64 and 2048. No fair.
[04:15:49] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:20:33] <hayley> https://www.youtube.com/watch?v=fH2ii2OqoE0
[04:20:33] -ixelp- Gary Numan This Wreckage Hammersmith 1980 - YouTube
[04:33:35] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[04:47:34] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[04:48:12] <hayley> "Furthermore, in a parallel system with multiple mutators, each processor can lazily allocate in its own private stack without any interference from the other processors." So part of the want for stack allocation is thread locality?
[05:38:58] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[05:41:26] <hayley> http://lamport.azurewebsites.net/video/video5.html "This lecture is about matrimony."
[05:58:24] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[06:41:21] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[06:41:43] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[07:33:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[07:41:08] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Quit: Leaving)
[08:19:56] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:21:05] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:27:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:09:10] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:26:42] <moon-child> 'vector-mode garbage collection performs up to 9 times faster than scalar-mode collection'  wot
[09:26:59] <dave0> maw
[09:29:07] <moon-child> oh, wow.  'The STAR's vector pipeline is a memory to memory pipe, which supports vector lengths of up to 65,536 elements.'  Very cool, but...good luck replicating that?
[09:32:55] <hayley> Yeah, we'd only get 4 element vectors assuming 64 bit pointers and AVX2.
[09:33:54] <hayley> Though once I "microcoded" SBCL's GC to use AVX2 for scanning arrays of element type T, basically skipping over fixnums quicker. This saved 30% if you had a huge vector with all fixnums for some reason.
[09:40:19] <gilberth> Terrific! dpANS:setup-sections.tex says: "A new version of this file can be generated with KMP's Lispm commands by explicitly doing Update ANSI Section Index. This action also occurs implicitly whenever a new source is checkpointed with Checkpoint ANSI Sources." --- And now?
[09:42:08] <gilberth> Did they run TeX on the Lisp machine?
[09:54:33] <hayley> IIRC TeX was a test of the Pascal->Lisp system?
[09:56:22] * hayley uploaded an image: (65KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/GZTcEeadEhjZgMbipSQWbnNN/go-on.jpg >
[10:00:27] <gilberth> hayley: That would make sense.
[10:12:00] <hayley> https://www.youtube.com/watch?v=qfIFsCwh1MM
[10:12:00] -ixelp- [YTP] Too Much Fiddling With The Coffee - YouTube
[10:14:24] <gilberth> Apropos coffee, I could need some.
[10:17:24] <dave0> https://youtu.be/SumbwvXKwz4
[10:17:25] -ixelp- Make Coffee With The French Press or Plunger - The easy way! - YouTube
[10:18:41] <hayley> https://www.youtube.com/watch?v=WqRnblmVjRc
[10:18:42] -ixelp- Abaddon's Bolero (Live At Olympic Stadium, Montreal, 1977) - YouTube
[10:19:56] <gilberth> dave0: I prefer filter coffee, made with this: <https://upload.wikimedia.org/wikipedia/commons/a/ae/Kaffeefilter.jpg>
[10:20:42] <dave0> oh that's different
[10:22:06] <dave0> is there a fresh brew?
[10:22:15] * dave0 wants a free coffee lol
[10:23:40] *** Joins: shka (~herr@109.231.62.239)
[10:25:46] <moon-child> I am sorely tempted to get an espresso machine
[10:25:56] <moon-child> but they are expeeensive
[10:27:29] <gilberth> dave0: You're at the Lisp Caf√©, so help yourself. What you mean by "fresh"? The powder I use is ready-made, so I'd call it semi-fresh.
[10:29:02] <gilberth> moon-child: These <https://m.media-amazon.com/images/I/61VBIF4WAaL._AC_SL1500_.jpg> are not expensive and you'd get pretty good espresso.
[10:30:07] <dave0> gilberth: oh fresh as in recently made, just out of the machine
[10:30:08] <moon-child> ooh
[10:30:58] <gilberth> dave0: I would usually prepare just one mug, so it's always pretty fresh.
[10:31:25] <dave0> nice
[10:31:33] <gilberth> dave0: And there is no machine. I brew manually.
[10:31:41] <moon-child> I did not realise those were a thing!
[11:23:06] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[11:58:15] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[12:07:55] <gilberth> What I don't like at all, is that DVI files depend on the metrics of the fonts used.
[12:12:53] *** Joins: treflip (~user@95.79.32.99)
[12:14:23] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477)
[12:19:03] *** Joins: ln43 (~ln43@user/ln43)
[12:20:40] *** Parts: treflip (~user@95.79.32.99) (ERC (IRC client for Emacs 27.2))
[12:36:10] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:59:02] <gilberth> How does TeX derive the default width of a space from a font?
[13:01:53] <ln43> Hi all, is there an easy way using Emacs and Slime to see where (list all the occurrences of) a symbol is used ?
[13:02:24] <gilberth> Ah, it's in the tfm file. Funny how the tftopl tool of TeX outputs s-expressions.
[13:03:32] <ln43> in my case i'm trying to see where a global variable is accessed ... but how to do that from whithin Emacs ?
[13:03:49] <ln43> accessed / used
[13:04:32] * gilberth steals the superfluous spaces.
[13:07:02] <gilberth> ln43: Try one of the sime-who-... commands.
[13:07:47] <ln43> ah ok, i was looking at slime-apropos* right now
[13:09:48] <ln43> many thanks gilberth
[13:11:17] <ln43> wow, it's impressive how Slime works well...
[13:22:37] <ck_> gilberth: if you want to improve your coffee experience, I can recommend getting a coffee grinder -- manual or automatic -- and grinding the beans immediately before making your cup
[13:54:14] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477) (Remote host closed the connection)
[13:54:33] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477)
[13:57:21] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[14:02:47] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.7.5 - https://znc.in)
[14:03:08] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[14:22:26] <gilberth> ck_: What is sure a nice idea. I could see what kind of grinders are available. Can't get fresher than that, I guess.
[14:26:05] <gilberth> I have a bold idea. Why not just let TeX typeset dpANS as usual, but insert \special{} in those macros whose semantics I want to carry over. Then read the DVI and reassemble lines and paragraphs. Those \special{}s pop up in the DVI in the middle of a line, right where they are in the TeX input, just like a character. Then I'd do \def\term#1{\special{(term}...<original stuff>...\special{)}} and be set.
[14:38:38] <gilberth> Then I could disable hyphenation and set the font to cmtt to get rid of ligartures and kerning.
[14:46:06] <gilberth> This way I can't miss anything.
[14:49:01] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:33:48] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477) (Remote host closed the connection)
[15:34:02] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477)
[15:35:29] <kakuhen> ok i have managed to get this go client working on OS X 10.4 - 10.15
[15:35:37] <kakuhen> and it only cost me some sleep deprivation
[15:35:38] <kakuhen> orz
[15:35:42] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:38:31] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477) (Ping timeout: 252 seconds)
[16:18:34] *** Joins: retropikzel (~retropikz@83.245.254.255)
[17:00:37] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[17:02:41] <mfiano> Just realized I left this channel some months ago due to how distracting it was. Here's to trying again :)
[17:03:22] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:03:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:07:13] *** Joins: semz (~none@user/semz)
[17:08:09] <mfiano> In other news, I'm stumped. I've been papering over several (bad) ideas for several days regarding an abstraction for representing data efficiently in a graphics simulation.
[17:08:49] <mfiano> It makes me want to quit programming when I feel this dumb for this long. How do you all get through this, or does it only happen to me? :/
[17:09:30] <hayley> Once beach "comforted" me by saying his incremental parsing data structure (I think) took ten years to come up with.
[17:10:49] <mfiano> Wow
[17:11:59] <mfiano> I think I need some external ideas.
[17:12:14] <hayley> This was right about at the local minima of confidence in inventing 42nd at Threadmill, where I realised I just discovered false sharing.
[17:15:28] <mfiano> My plan is to do mostly cellular automata and constraint propagation algorithms on large grids in near real-time, with cells possibly close to the pixel level, and whose data is some arbitrary standard instance.
[17:15:56] <mfiano> Where "large" may be infinite, but only a portion is viewable/scrollable on screen
[17:16:26] <hayley> Right. What have you found hard to design for? I'm not entirely familiar with the domain.
[17:17:20] <mfiano> Good separation of concerns and overall good design without totally ruining acceptable performance. I am very picky about code quality heh
[17:17:45] <mfiano> I want extensibility, not some ad-hoc thing that I have to modify constantly
[17:17:46] * hayley nods
[17:18:37] <hayley> I heard of hashlife for Conway's Game of Life, and iirc stylewarning implemented it too. Would memoization like that help?
[17:19:12] <mfiano> I think I have heard the term before, but I would have to go read about it
[17:23:43] <hayley> That said, memoization isn't very "real time" in that latency can vary wildly. But apparently you can simulate ridiculously fast with hashlife, probably as it exploits a sort of temporal locality with repeated patterns. So YMMV as usual.
[17:23:52] <mfiano> Yeah I think that is too specialized for Life
[17:24:50] <mfiano> It actually exploits temporal and spatial coherency if I am understanding it correctly
[17:28:58] <mfiano> Currently I'm trying to decide if I want 2x2 or 3x3 chunks
[17:31:49] <mfiano> With 2x2, I mean the starting configuration would have 4 adjacent screen-sized chunks of data positioned such that the corner they all share is at screen center, so half of each chunk is off screen, and then erase/add chunks depending on how far you scroll on whatever axis
[17:32:14] <mfiano> vs a 3x3 version, where central chunk is the size of the screen and positioned exactly on the screen
[17:56:20] <hendursaga> mfiano: I assume you've looked at Golly before?
[18:00:41] <mfiano> I haven'
[18:00:43] <mfiano> t
[18:00:53] <mfiano> I'm going more general than CA though
[18:01:08] <mfiano> Like, I have a WFC implementation I'd like to visualize too
[18:04:20] <hendursaga> mfiano: WFC?
[18:04:51] <gilberth> Here you go! dpANS chapter 3 rendered by TeX as plain text: <http://clim.rocks/gilbert/tex/dpans-chap-3.txt>
[18:05:54] <mfiano> hendursaga: Wave Function Collapse, a constraint solver useful for generating locally similar images. Think of it as a Sudoku solver to the max
[18:06:34] <hendursaga> Still, Golly has some good, optimized algorithms you'd want to take a look at..
[18:06:43] <hayley> Unrelated, Baker claims in a footnote "Although CDR-coding is currently out of fashion due to not being required by Tak and 8Queens, the inexorable pressure to reduce off-chip bandwidth will force its revival."
[18:06:46] <hayley> Any day now.....
[18:10:41] <mfiano> hehe
[18:12:56] <hayley> But he agrees with my findings that some kinds of GC barriers can also incidentally be prefetches if you are lucky.
[18:23:23] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:32:57] <gilberth> I wonder whether I could turn dpANS into manpages to fight back as Perl keeps installing its documentation as manpages, which sometimes get into the way?
[18:34:05] <mfiano> hendursaga: I will take a look as long as it isnt heavily templated. I really dislike reading most C++ projects...
[18:34:06] <gilberth> So that there will be read(3cl), write(3cl), open(3cl), and close(3cl). :)
[18:34:20] <hendursaga> mfiano: ah, I do not like C++ myself
[18:38:39] <shka> i find cl easy to read
[18:39:03] <shka> not easy to browse though
[18:49:56] <pjb> hayley: note that some systems do compress pages, instead of or in addition to writing them to a swap file.  Compressing a page with data1 ptr data2 ptr+8 data3 ptr+16 etc..  should quickly be equivalent to cdr-coding‚Ä¶
[19:11:43] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[19:12:49] <shka> https://www.youtube.com/watch?v=egLAkA4HrXU
[19:12:49] -ixelp- Sacrifice by LONDON AFTER MIDNIGHT [with lyrics] - YouTube
[19:25:04] *** Joins: Alfr (~Alfr@user/alfr)
[19:48:46] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[19:49:16] *** Joins: Alfr (~Alfr@user/alfr)
[20:12:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:30:20] *** Joins: dra (~dra@2a04:4540:641e:b500:ece8:867a:9e59:aae8)
[20:30:24] <dra> Hello!
[21:11:49] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[21:25:28] <ck_> Hello yes this is dog
[21:39:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[21:42:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:44:11] <gilberth> Hello dog, this is owl speaking.
[21:59:49] <mfiano> It appears our pets explored the lawn during cubensis season again.
[22:03:44] <gilberth> hayley: My cdrcoding benchmark confirms that. In 2003 I measured a turn-around at a list length of 30k elements, while now I have that at tiny lists of 500 elements already. For 500 elements I traverse these at 40% time needed for normal cdrs. While the "AMD Athlon(tm) XP 1600+" in 2003 needed 154% the time for cdr-coding. The turnaround kicked in at 30k and peeked at 23% needed for 50k.
[22:04:43] <gilberth> Thus: I wonder, whether 32-bit or perhaps 48-bit pointers would be faster than full 64-bit pointers.
[22:06:37] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[22:06:46] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[22:07:56] <gilberth> Long time ago I made a few "real" CL benchmarks, mostly compiling stuff with CMUCL an machines ranging for a 486 to said Athlon. And what I found was that the speed increase was less than the clock rate increase. I should have kept those benchmarks. However that would also indicate that we are much more bandwidth restricted than clock rate restricted. DRAM really didn't get faster with time.
[22:11:57] <gilberth> This would also explain why read barriers have almost zero costs. These days. I guess, I have to adjust my idea of what is fast and what is slow. Used to be way easier to estimate at a time with no caches and no TLBs, and in-order execution. Dammit, I am olde.
[22:12:18] <humasect> l1/l2 cache etc ?
[22:12:43] <gilberth> ?
[22:12:53] <pjb> And things can change, so we should probably do something like the linux kernel, which is to benchmark algorithms for which speed is important and select the best one for the current machine.
[22:13:11] <humasect> gilberth: instead of 1kb cache we have like 4mb on chip
[22:14:07] <pjb> New architectures often pack some more RAM close to the processors.
[22:14:34] <gilberth> humasect: Yes, a five hundred times the RAM my first machine had, and one-tenth of the capacity of my first hard disk. But pointers are also four times as long.
[22:14:49] <pjb> (nVidia, Tesla Dojo, etc).
[22:14:51] <gilberth> pjb: That idea would call for JIT.
[22:14:52] <humasect> hehe
[22:14:53] <humasect> page it
[22:15:14] <pjb> gilberth: well, it'd be more a configuration at initialization time.
[22:15:54] <humasect> i was just reading about octal and hex. i've always been fine with using power of 2 (64,256,etc) with base 10
[22:16:05] <pjb> I guess that depend what kind of compiler you have, indeed.  So loading fasl files would indeed some JIT.
[22:16:18] <gilberth> pjb: A hypothetical JITing CL could perhaps be configured once.
[22:16:41] <pjb> humasect: but it's easier when you do bit banging to think in base 8 or 16.
[22:17:02] <pjb> humasect: the masks are obvious in those bases.
[22:17:24] <gilberth> Anyhow, bbl, chores waiting.
[22:26:22] <humasect> pjb: yeah =) 
[22:39:56] *** Joins: vats (~vats@103.70.83.191)
[22:53:22] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
