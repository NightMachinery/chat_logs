[00:00:03] *** Joins: inlight (~thomas@82.221.128.46)
[00:00:03] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[00:00:03] *** Joins: inlight (~thomas@user/inlight)
[00:02:21] *** Quits: Goblins (~mz@12.231.191.170) (Quit: Leaving.)
[00:04:31] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:05:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[00:06:11] *** Joins: Goblins (~mz@12.231.191.170)
[00:08:35] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[00:10:08] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[00:10:44] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:11:55] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:12:16] <SamuelMarks> novns - So is my `break` a good conditional?
[00:12:37] * SamuelMarks can read fron MemoServ or GitHub later if I'm offline
[00:12:48] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[00:13:01] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:13:44] <novns> SamuelMarks, that code is so confusing, I'm not sure what and where is good
[00:13:57] <inlight> C ON D O M
[00:14:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[00:15:08] <novns> SamuelMarks, did you write it yourself or did copypaste it from some random examples?
[00:15:16] <novns> *or did you
[00:16:27] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[00:17:29] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 252 seconds)
[00:20:59] <ZenWalker> https://gitlab.gnome.org/World/Phosh/phosh/-/blob/main/src/monitor/head.c#L601
[00:21:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[00:21:08] <ZenWalker> undefined behavior? (int) (float) ^^^
[00:21:35] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[00:23:52] <twkm> risky.
[00:24:13] <sham1> Shouldn't be undefined behaviour, you just round towards something. Can't remember if float->int conversion rounds towards -\infty or 0. Probably the latter. And yeah, it's more just odd
[00:24:21] <twkm> truncate.
[00:24:51] <sham1> Which is the same thing as rounding towards zero
[00:26:19] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[00:27:26] <ZenWalker> https://gitlab.gnome.org/World/Phosh/phosh/-/merge_requests/1018/diffs
[00:27:33] <ZenWalker> this is better? or the same behavior?
[00:31:05] <twkm> float to int has the same potential risk.
[00:31:30] <twkm> (as float to int, as before)
[00:31:39] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:31:57] <sham1> 4
[00:32:09] <sham1> Chosen by a fair dice roll!
[00:32:34] *** Joins: seninha (~seninha@user/seninha)
[00:32:55] <ZenWalker> maybe float to long is better?
[00:33:35] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[00:34:01] <twkm> same risk.
[00:34:10] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:34:54] <twkm> if you know the range possible it might cause you to consider the risk mitigated -- beware all changes to code related to the float.
[00:35:45] <fizzie> ,cc int i = 1234567890; int j = (int) (float) i; printf("%d -> %d: %+d", i, j, j-i);
[00:35:46] <candide> fizzie: 1234567890 -> 1234567936: +46
[00:36:02] <ZenWalker> twkm: round? no risks?
[00:36:30] <twkm> explosive decompression, or boredom, or ...
[00:36:31] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[00:36:36] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[00:36:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[00:37:44] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:38:12] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[00:39:00] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:40:10] <ZenWalker> twkm: roundf ? :)
[00:42:20] *** Joins: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com)
[00:45:17] <twkm> the key is the conversion to a type that might not have sufficient range.
[00:45:32] <twkm> see fizzie's example.
[00:46:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:46:52] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:47:21] *** Quits: magla (~gelignite@55d46452.access.ecotel.net) (Quit: Stay safe!)
[00:47:24] <caze> ZenWalker: <caze> ZenWalker: You're casting a function call?
[00:47:41] <caze> <ZenWalker> the line shows this warning twice ^^
[00:47:46] <caze> You're doing it twice.
[00:48:40] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[00:49:23] <caze> ZenWalker: Probably what you want to do is to see if the value of the function call is within some epsilon of 0.
[00:49:31] <caze> 0.0f, that is.
[00:52:13] *** Joins: zacts (~zacts@user/zacts)
[00:54:39] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:55:18] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-23.cspire.com)
[00:56:15] <caze> ZenWalker: The thing you have to understand about fp is that values don't represent one number. They represent a range of numbers.
[00:57:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com)
[00:59:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:02:08] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[01:02:33] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[01:03:09] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[01:07:58] *** Joins: Charadon (~Charadon@155.138.164.183)
[01:16:06] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[01:16:21] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:16:49] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:ec27:d5d6:5ec7:a96c) (Quit: Leaving)
[01:18:03] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[01:18:33] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (Quit: circo)
[01:19:47] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91)
[01:20:05] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it)
[01:20:27] <ZenWalker> thanks :)
[01:21:24] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 250 seconds)
[01:21:39] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: rebooter)
[01:22:00] *** Joins: trn (jhj@sourcehut/user/trn)
[01:23:19] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[01:23:31] *** Quits: kilobyte1 (~kbch@77.109.171.85) (Quit: WeeChat 2.3)
[01:24:46] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[01:24:53] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:30:20] *** Joins: abf (~abf@user/abf)
[01:33:44] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[01:37:15] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[01:37:17] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[01:37:57] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (Remote host closed the connection)
[01:39:35] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 250 seconds)
[01:39:56] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it)
[01:40:01] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:41:38] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[01:43:40] *** Joins: freepp (~freepppp@62.1.79.42.dsl.dyn.forthnet.gr)
[01:44:12] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[01:44:21] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[01:45:09] *** Quits: Akuli (~Akuli@82-203-164-244.bb.dnainternet.fi) (Quit: Akuli)
[01:45:16] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:46:58] *** Quits: freep (~freepppp@62.1.79.42.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[01:50:31] *** Joins: BCMM (~BCMM@user/bcmm)
[01:55:01] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[01:56:08] *** Quits: constxd (~brad@142.134.79.191) (Quit: WeeChat 2.8)
[01:56:17] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[01:56:22] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Quit: Leaving)
[01:58:05] *** Joins: inlight (~thomas@82.221.128.46)
[01:58:05] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[01:58:05] *** Joins: inlight (~thomas@user/inlight)
[01:59:20] *** Quits: cosimone (~user@93-34-133-254.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:00:24] *** Joins: karakedi (~eAC53C340@user/karakedi)
[02:00:26] *** Joins: zacts (~zacts@user/zacts)
[02:01:47] *** Quits: wyfnt (~wyfnt1232@103.214.137.74) (Quit: Leaving)
[02:03:23] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[02:03:47] *** aqua is now known as kish`
[02:04:07] *** Quits: Goblins (~mz@12.231.191.170) (Ping timeout: 256 seconds)
[02:04:22] *** Joins: inlight (~thomas@82.221.128.46)
[02:04:22] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[02:04:22] *** Joins: inlight (~thomas@user/inlight)
[02:04:34] *** Joins: Goblins (~mz@12.231.191.170)
[02:06:56] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[02:09:41] *** Joins: seninha (~seninha@user/seninha)
[02:11:00] *** Quits: odoood (~odoood@2601:c8:c000:c4e0:f799:b570:9765:917c) (Quit: Leaving)
[02:11:04] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[02:14:55] *** Joins: seninha_ (~seninha@user/seninha)
[02:15:16] *** Joins: PoliticsUSA (~USAPoliti@4.7.61.70)
[02:15:17] <PoliticsUSA> Here is an interesting oral argument from the North Carolina Supreme Court on criminal calendaring abuses. I cant believe this is happening. https://www.youtube.com/watch?v=4TQOltG7zJc&t=4712s
[02:15:40] *** Quits: PoliticsUSA (~USAPoliti@4.7.61.70) (K-Lined)
[02:15:41] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:16:02] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[02:16:15] *** Quits: Goblins (~mz@12.231.191.170) (Ping timeout: 256 seconds)
[02:16:40] *** Joins: Goblins (~mz@12.231.191.170)
[02:16:49] *** Quits: Goblins (~mz@12.231.191.170) (Max SendQ exceeded)
[02:17:05] *** Joins: Goblins (~mz@12.231.191.170)
[02:17:34] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:17:34] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[02:19:04] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[02:19:11] *** Joins: seninha (~seninha@user/seninha)
[02:20:55] *** Joins: malloy (~jimery@116.30.220.175)
[02:21:17] *** Quits: Goblins (~mz@12.231.191.170) (Ping timeout: 240 seconds)
[02:25:01] *** Joins: Goblins (~mz@12.231.191.170)
[02:25:21] *** Joins: foul_owl (~kerry@71.212.148.11)
[02:25:34] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:26:34] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:30:10] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:30:26] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:4a12:1d56:537b:22cc)
[02:30:29] <agoodm> anyone here able to explain this? https://pastebin.com/1yHepfej I was expecting this, cblack or dmaxp to have uninit contents?
[02:31:39] *** Quits: Goblins (~mz@12.231.191.170) (Quit: Leaving.)
[02:32:01] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[02:32:09] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[02:33:31] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:33:41] *** Quits: pizdets (~pizdets@183.182.114.142) (Ping timeout: 245 seconds)
[02:33:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:34:02] *** Joins: pizdets_ (~pizdets@183.182.115.213)
[02:34:57] *** Quits: alch (~alch@151.34.94.171) (Read error: Connection reset by peer)
[02:35:17] *** Quits: hashfuncd0d (~user@162.254.115.155) (Ping timeout: 256 seconds)
[02:36:05] <fizzie> Sharing the relevant code might help too. But if it's the #1 web search result for the file name, the expression also involves `val`, which derives from an image.
[02:36:21] *** Quits: foul_owl (~kerry@71.212.148.11) (Ping timeout: 250 seconds)
[02:36:35] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:38:20] <fizzie> `unsigned short val = imgdata.rawdata.raw_image[...]; if (val > cblack[cc]) ...` should logically trip Memcheck's "depends on uninitialized values" warning if whatever array element that accessed was uninitialized, which isn't related to `this`, `cblack` or `dmaxp`.
[02:38:52] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:39:01] *** Joins: alch (~alch@151.68.72.20)
[02:45:03] <agoodm> fizzie, thanks
[02:49:17] *** Joins: cmburn (~Charlie_B@2607:ea00:107:3c07:39a3:d617:ccf1:90ef)
[02:51:01] *** Joins: foul_owl (~kerry@94.140.8.52)
[02:53:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:04] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[02:55:58] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:57:38] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[02:57:54] *** Joins: inlight (~thomas@user/inlight)
[02:57:56] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:59:46] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:01:52] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[03:04:58] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[03:05:26] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:06:26] *** Joins: soapsudsxx (~soapsudsx@209.221.40.130)
[03:06:35] *** Joins: seninha (~seninha@user/seninha)
[03:07:02] <agoodm> fizzie, so you're saying cc isnt initialized? or?
[03:09:31] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[03:12:15] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:12:19] <twkm> specifically if cblack[cc] wasn't initialized or assigned a value, which might be the case if cc is.
[03:13:15] <twkm> err, if cc is uninitialized nor assigned a value it might name an element of cblack that wasn't initialized or assigned.
[03:13:34] <agoodm> my poor brain is breaking :-D
[03:13:41] *** Quits: mahmutov (~mahmutov@37.155.78.233) (Ping timeout: 245 seconds)
[03:15:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:15:47] <agoodm> @twkm, is it possible to check if an entire array is initialized somehow?
[03:16:00] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:16:08] <twkm> with valgrind?  read every element.
[03:16:20] <fizzie> I was saying the value from where `val` came from isn't initialized.
[03:16:29] <twkm> without a debugging tool, nothing that's standard.
[03:17:02] <agoodm> so nothing in gdb?
[03:17:05] <twkm> (all debugging tools are non-standard, even if commonly used)
[03:17:28] *** Quits: freepp (~freepppp@62.1.79.42.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:17:49] <twkm> gdb is a debugger which i don't believe has that ability, but then i don't use it much.
[03:18:11] <agoodm> if you cant tell im trying to get my head around this crashing testcase, derived from fuzzing but so far cant track where the uninitialized stuff comes from.
[03:18:45] <twkm> valgrind can.  if the compiler has a sanitizer try compiling with it then reading all the elements in your code.
[03:19:28] *** Joins: Goblins (~mz@99-104-124-13.lightspeed.sntcca.sbcglobal.net)
[03:19:39] *** Quits: Goblins (~mz@99-104-124-13.lightspeed.sntcca.sbcglobal.net) (Max SendQ exceeded)
[03:19:41] <agoodm> yeah as per above, I am attempting to do this.
[03:20:36] <twkm> ,cc -fsanitize=undefined int a[4], cc /* both are uninitialized*/; a[cc];
[03:20:38] <candide> twkm:  value has been optimized out
[03:21:02] <twkm> bastard bot/compiler.
[03:21:42] <agoodm> twkm, please could you explain in idiot speak for me?
[03:22:09] <fizzie> Didn't you show it in gdb with Valgrind's gdbserver already?
[03:22:19] <fizzie> That's what those `monitor get_vbits` stuff looked like to me.
[03:22:40] <agoodm> yes I did, I am poking around trying to figure out what is undefined
[03:22:47] <agoodm> or uninitialized rather
[03:22:52] <fizzie> Well, then you should be able to just look at what are the relevant variable values at the point where it failed, and narrow it down to a specific memory address to check.
[03:26:01] <agoodm> fizzie, thats what I thought; but everything I look at seems to be initialized: https://pastebin.com/ZAjnUMxr
[03:26:17] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[03:26:30] <fizzie> I'm guessing it's `val`, and I don't know how you'd check it when it's in a register.
[03:26:38] <fizzie> Memcheck does track the bits for those as well.
[03:26:59] <fizzie> But you can check the expression `val` was set from, from right above that line.
[03:27:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[03:28:12] <agoodm> fizzie, you mean line 276?
[03:30:45] <fizzie> If it's the same file I was looking at, yes.
[03:31:20] <fizzie> As in, `p &imgdata.rawdata.raw_image[(row + S.top_margin) * S.raw_pitch / 2 + (col + S.left_margin)]` and then check the bits at that address.
[03:32:04] <agoodm> yes thats the right file
[03:32:18] <agoodm> so I set a break point on 276 and at that point val isnt yet set
[03:32:27] <agoodm> i think its set on line 277, so I step forward
[03:32:42] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[03:33:01] <agoodm> and val becomes whatever is in r14, but I dont understand how to check if a register was initialized?
[03:33:51] <fizzie> The point with memcheck is to track the provenance of *values*. If you initialize a register from a value in memory, whether the thing in the register counts as initialized is the same as whether that value in memory was initialized.
[03:34:10] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:34:13] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[03:34:24] <fizzie> And none of those other values (row, col) change between setting `val` and the memcheck trap, so you don't need any breakpoints.
[03:34:50] <fizzie> Just run it, and examine what `&imgdata.rawdata.raw_image[(row + S.top_margin) * S.raw_pitch / 2 + (col + S.left_margin)]` is once it has stopped at the signal from Valgrind.
[03:35:35] <fizzie> At any rate, the documentation does also tell you how to check the validity bits for a register: "To get the validity bits of a register, you must start Valgrind with the option --vgdb-shadow-registers=yes. The validity bits of a register can then be obtained by printing the 'shadow 1' corresponding register."
[03:36:22] <fizzie> So you can do that as well, and check `p /x $r14s1` or some-such.
[03:38:45] <agoodm> ok so I restarted the debug session with no break points and got it to the memcheck trap again
[03:40:52] <agoodm> I'm guessing I am running into a limit now though: print sizeof(imgdata.rawdata.raw_image) results in value of type `libraw_data_t' requires 381016 bytes, which is more than max-value-size
[03:42:13] <fizzie> Don't try to print all of it. `print &imgdata.rawdata.raw_image[(row + S.top_margin) * S.raw_pitch / 2 + (col + S.left_margin)]` (if it works, anyway) should just be a pointer.
[03:42:42] <agoodm> print &imgdata.rawdata.raw_image[(row + S.top_margin) * S.raw_pitch / 2 + (col + S.left_margin)]
[03:42:45] <agoodm> oops
[03:43:00] <agoodm> it says attempt to extract component of a value that isnt a structure
[03:44:14] <fizzie> Huh. Well. Admittedly I can't tell from the code what `S` is supposed to be, either.
[03:44:20] <agoodm> if I print &imgdata.rawdata.raw_image I get a memory address back, should 381016 bytes of that be initialized?
[03:46:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[03:46:39] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[03:49:11] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[03:49:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[03:50:00] <fizzie> Well, whichever bytes that `(row + S.top_margin) * S.raw_pitch / 2 + (col + S.left_margin)` refers to should be. But if gdb can't evaluate it, that might be a little tricky to test.
[03:50:29] <agoodm> I suppose I could test by trying with a testcase which is similar but does not trigger this crash?
[03:50:44] *** Quits: BCMM (~BCMM@user/bcmm) (Read error: Connection reset by peer)
[03:51:00] <fizzie> It might only crash at a specific point.
[03:51:09] <fizzie> Although I guess you could at least print row & col.
[03:51:12] <agoodm> reason I ask is monitor get_vbits 0x1ffef74020 381016 does have an uninitialized chunk in the output...
[03:52:09] <agoodm> 13/15 are 869 and 3516
[03:52:13] <agoodm> row/col that is
[03:52:20] <agoodm> row is r13 = 869 etc
[03:53:11] <agoodm> i guess you mean print row and col on a good test case?
[03:53:35] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:53:47] <fizzie> No, specifically when it fails. Which I guess you did. Because since they're non-zero, it means it managed to get through quite a few iterations of that loop before running into problems.
[03:54:20] <agoodm> yeah that would make sense cus the test case is missing tons of image data...
[03:55:01] <fizzie> Does `print &imgdata.rawdata.raw_image[(row + imgdata.sizes.top_margin) * imgdata.sizes.raw_pitch / 2 + (col + imgdata.sizes.left_margin)]` work, by any chance?
[03:55:53] <agoodm> so my initial thought was that 'garbage' is therefore getting into the output; cus on a related program memcheck reports write(buf) which includes the image data contains uninit value, but not for this program which had me puzzled
[03:57:20] <agoodm> ill try it, takes about a minute to get to the crash
[03:58:06] <agoodm> yes: $1 = (ushort *) 0x5d61e80
[03:58:14] <agoodm> thats at the memcheck break
[03:58:22] <fizzie> And would there be uninitialized data at that address?
[03:58:47] <agoodm> yeah
[03:59:58] <agoodm> so libraw makes a buffer, then loads my testcase which has incomplete image data for its supposed size into imgdata.rawdata.raw_image and then tries to process it
[04:00:07] <agoodm> but has not initialized the entire buffer with data?
[04:00:12] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:00:31] <fizzie> Sounds plausible. With Valgrind/memcheck, exactly where it crashes depends on where the program first does some sort of a conditional operation that depends on the value. Because it allows you to copy the data around in memory if you don't inspect it. So depending on circumstances, you could have "uninitialized" data without tripping any checks until you're actually trying to write it to a file, but in
[04:00:33] <fizzie> a different context (when it's doing some processing on it) it may also fail earlier.
[04:01:35] *** Joins: Wulf (~Wulf@user/wulf)
[04:02:48] <agoodm> yeah I suppose that makes sense, unprocessed_raw fails in a few places (theres some problem in lense data too) but ultimately it writes the contents of the unprocessed image out to disk and includes the uninitialized memory
[04:02:48] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-23.cspire.com) (Read error: Connection reset by peer)
[04:02:56] <agoodm> triggering a message
[04:03:28] <agoodm> but dcraw_emu takes the image data and processes it to apply params from the image file to the image data
[04:03:43] <agoodm> so it crashes earlier
[04:04:16] <agoodm> I suppose then the uninitialized data is processed and written to the output buffer, at that point that data is 'initialized'?
[04:04:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:04:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:04:23] *** Joins: wroathe (~wroathe@user/wroathe)
[04:04:25] <agoodm> all be it from garbage source?
[04:06:12] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[04:07:05] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:07:42] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:08:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com)
[04:09:05] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[04:09:45] <agoodm> the above seems to check out, if I set break point on the 280 line and retry, then get the memory address for row/col 0 its initialized
[04:09:56] *** Joins: quartz (~user_name@user/quartz)
[04:10:37] <agoodm> many thanks for your help @fizzie I now have an understanding of what I have uncovered and when I report my bug I will look like less of an idiot :-D
[04:10:39] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:10:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Client Quit)
[04:11:19] <fizzie> Notwithstanding the wording of Valgrind error message ("depends on uninitialized values"), it's maybe better to call it valid/invalid rather than initialized, since the latter term has a particular C meaning. The memcheck manual (specifically chapter 4.5 "Details of Memcheck's checking machinery") has a detailed description of the concepts.
[04:12:11] <agoodm> fizzie, thats a fair point. I always seem to get the same output image from the test case
[04:12:33] <agoodm> so perhaps the memory I am getting back relates to my request, but wasnt initialized?
[04:12:41] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[04:13:42] <fizzie> Computers tend to be pretty deterministic for the most part. Even when you allocate memory and don't initialize it, as long as _nothing_ else about the program execution changes, the contents tend to stay the same too. They've just not been explicitly given any specific values.
[04:13:43] <agoodm> if I was returning an image derived from untouched memory I may expect to get a different image every time?
[04:14:03] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:950f:44b:1738:cff9)
[04:14:31] <agoodm> yeah that makes sense
[04:15:51] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:950f:44b:1738:cff9) (Client Quit)
[04:15:57] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[04:16:11] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[04:20:04] *** Joins: crashrep (~crashrep@user/crashrep)
[04:21:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:22:45] *** Quits: cmburn (~Charlie_B@2607:ea00:107:3c07:39a3:d617:ccf1:90ef) (Quit: Leaving.)
[04:24:21] <quartz> What are some things you don't like about C you wish you could change?
[04:26:38] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[04:26:54] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[04:29:21] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[04:30:10] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-23.cspire.com)
[04:30:29] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[04:33:39] *** Joins: vicfred (~vicfred@user/vicfred)
[04:33:53] *** Quits: msk (~Thunderbi@89.205.124.19) (Quit: msk)
[04:34:31] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:34:55] *** Joins: hub (~hub@user/hub)
[04:38:05] *** Joins: Rounin (~david@84.212.130.215)
[04:39:24] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[04:39:37] *** Quits: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com) (Remote host closed the connection)
[04:40:18] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:40:37] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:43:21] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:43:25] *** Joins: llh (~llh@user/llh)
[04:44:10] *** Quits: heiner_ (~heiner@94.31.81.196) (Remote host closed the connection)
[04:44:17] <ravella> quartz: standardize the way libc functions indicate errors
[04:44:27] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[04:44:32] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[04:44:56] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:46:15] *** Joins: de-facto_ (~de-facto@user/de-facto)
[04:46:35] *** Joins: BUSY (~BUSY@user/busy)
[04:47:01] *** Quits: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e) (Ping timeout: 240 seconds)
[04:47:05] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[04:47:06] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[04:47:14] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[04:48:08] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[04:48:46] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[04:48:53] *** Joins: teepee (~teepee@openscad/teepee)
[04:48:57] *** Joins: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e)
[04:50:06] *** de-facto_ is now known as de-facto
[04:50:36] *** Joins: hub (~hub@user/hub)
[04:50:38] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 256 seconds)
[04:52:08] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[04:52:11] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[04:53:03] *** Joins: novns (~novns@user/novns)
[04:53:30] <quartz> Static has a totally different meaning inside a function and outside one
[04:54:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[04:54:15] <SamuelMarks> novns - back now
[04:54:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:54:35] *** Joins: SamuelMa1ks (~samuel@user/samuelmarks)
[04:54:36] *** Joins: SamuelMa2ks (~samuel@user/samuelmarks)
[04:55:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:56:02] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[04:57:45] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:58:11] <nightstrike> is this legal?   int const x = getInt(&x);   ?
[04:58:32] <nightstrike> I assume not
[05:00:12] <zwr> add a "library" linkage which means your function or variable is visible outside the program. After that, external linkage should mean the function is visible in other translation units but only within the current program. You basically need extensions to write libraries in C
[05:02:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:02:52] *** Joins: Viewday11 (~Viewday@user/viewday)
[05:04:22] <fizzie> It's legal to *say* that, but the value in `x` will be indeterminate during the call to `getInt`.
[05:05:14] <fizzie> ,cc void *p = &p; // points at itself
[05:05:16] <candide> fizzie: no output: p = 0x7fffffffe318
[05:06:50] *** vinleod is now known as vdamewood
[05:08:31] <fizzie> ,cc void *p = &p; printf("%p %p %p", (void *) &p, p, *(void **) p); // fun for the whole family
[05:08:33] <candide> fizzie: 0x7fffffffe308 0x7fffffffe308 0x7fffffffe308
[05:09:55] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Closing Window)
[05:11:10] <nightstrike> fizzie: that's ok to a point, if it's an output only argument
[05:12:22] <fizzie> Well... it doesn't really make sense as an output-only argument either, since whatever you might write through the pointer would get overwritten when the return value of `getInt` is used to initialize it.
[05:12:52] <nightstrike> yes, that's right :(
[05:13:00] <nightstrike> nvm
[05:13:34] <fizzie> ,cc int silly(int *x) { *x = 123; return 456; } int i = silly(&i); printf("%d", i); // just for the exercise
[05:13:36] <candide> fizzie: 456
[05:15:17] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[05:16:07] *** Quits: christoph__ (~christoph@ip1f12fa3f.dynamic.kabel-deutschland.de) (Quit: christoph__)
[05:18:30] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[05:19:11] <nightstrike> yeah, sometimes I write in too many languages, and I get confused.  I was trying to deal with wrapping an API that always returns status ints from every call, and uses pointers to set actual outputs, and I guess I was trying to do something stupid that C doesn't support
[05:19:41] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91)
[05:22:27] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91) (Ping timeout: 256 seconds)
[05:22:55] <SamuelMarks> How do I correctly read from a socket to a dynamically `malloc`/`realloc` `char*`? - I'm assuming this [broken] code is 3x too long for this task: https://github.com/offscale/cauthflow/blob/44581e2/cauthflow/tiny_web_server.c#L120-L287
[05:23:43] * SamuelMarks understands that he has querystring parsing in that same function; feel free to ignore it. I've just rewritten this function 3 different ways and each way fails (memcpy instead of strcat, strcat_s from Safe C lib instead of strcat)
[05:26:43] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:27:22] *** Joins: vysn (~vysn@user/vysn)
[05:28:03] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[05:28:41] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:230e:6411:bf4c:835d:709d)
[05:29:57] <fizzie> I prefer the no-extra-copies option of `read`ing directly to where you want the bytes to go to.
[05:30:00] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[05:30:12] <fizzie> ,cc char *buf = 0; size_t used = 0, size = 0; const size_t chunk = 2; while (1) { if (used + chunk > size) { size = used + chunk; buf = realloc(buf, size); } ssize_t got = read(0, buf + used, chunk); if (got <= 0) break; used += got; } write(1, buf, used); -stdin=hello there
[05:30:13] <candide> fizzie: hello there
[05:30:31] <fizzie> (With error checks omitted, and with an unrealistic chunk size of 2.)
[05:31:11] <novns> SamuelMarks, if you need to get the job done, consider using more suitable languages, where you don't have to reinvent wheels
[05:31:48] <fizzie> In particular, even if it's a case where you "know" there's no embedded 0s in the input, if you're reading from a socket I wouldn't assume that.
[05:31:50] <SamuelMarks> novns - This is the last piece of my puzzle
[05:32:00] <novns> SamuelMarks, and if you are interested in learning C, don't start with a task that's too complicated
[05:32:13] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[05:33:03] <novns> you ave to learn basic things first - how allocating of memory works, how "strings" work with terminating '\0'
[05:33:06] <novns> *have
[05:33:53] <SamuelMarks> I think my issue is I read K&R and most of Deep C secrets without a computer (just reading through)
[05:34:00] <novns> I see you didn't bother to read any book, you just start with copypasted examples
[05:34:12] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[05:34:48] <novns> and it won't work this way, you are too confused with things
[05:34:52] <SamuelMarks> I think my issue is I read K&R and most of Deep C secrets without a computer (just reading through)
[05:35:02] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:35:11] <SamuelMarks> novns - Yeah I was confused so I started copypasta
[05:35:20] <SamuelMarks> and mixing copypasta examples together
[05:36:56] <novns> if you want to learn C, start learning it again
[05:38:52] <novns> if you want to get a working web app - use more suitable language for the job
[05:41:11] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34)
[05:43:23] <Jenna16bit> like PHP
[05:43:45] <Jenna16bit> or not, whatever, do what's fun
[05:44:29] <Jenna16bit> unless you're getting paid, then do what's fast
[05:45:10] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[05:45:18] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[05:46:10] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:46:12] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:47:30] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[05:49:22] *** Joins: d (~DSee@173.237.207.12)
[05:50:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:51:04] *** Joins: DSee (~DSee@173.237.207.12)
[05:51:07] *** Parts: d (~DSee@173.237.207.12) (Quit)
[05:52:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:613c:f1e3:33fb:ee34) (Ping timeout: 250 seconds)
[06:03:59] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-23.cspire.com) (Read error: Connection reset by peer)
[06:04:38] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:12:52] <tusko> I have the binary executable of what I believe is a very simple c program.
[06:13:01] <tusko> Is there a way to decompile it and get the source back?
[06:13:30] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[06:13:30] *** Quits: SamuelMa1ks (~samuel@user/samuelmarks) (Quit: leaving)
[06:13:30] *** Quits: SamuelMa2ks (~samuel@user/samuelmarks) (Quit: leaving)
[06:13:57] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[06:16:55] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:d81a:67aa:24b1:1817)
[06:20:52] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[06:21:06] *** Joins: de-facto (~de-facto@user/de-facto)
[06:22:23] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[06:22:47] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[06:23:12] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[06:24:16] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:25:03] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91)
[06:27:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:27:26] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91) (Ping timeout: 245 seconds)
[06:28:02] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (Read error: Connection reset by peer)
[06:29:36] *** Quits: kts (~kts@103.73.237.104) (Quit: Konversation terminated!)
[06:31:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:33:51] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:35:55] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[06:36:12] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[06:37:29] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[06:37:49] *** Quits: alch (~alch@151.68.72.20) (Ping timeout: 256 seconds)
[06:39:23] *** Joins: alch (~alch@151.34.25.130)
[06:40:08] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[06:41:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:41:33] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e00d:69c0:db02:528b)
[06:43:44] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91)
[06:44:54] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[06:46:50] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91) (Ping timeout: 260 seconds)
[06:47:32] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:34c4:a993:d6b3:eab5)
[06:49:19] *** Quits: ed (~ed@2404:160:181:8fa4:bea2:187f:879a:b950) (Quit: Konversation terminated!)
[06:50:23] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:52:17] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[06:52:50] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:52] *** Parts: cmburn (~Charlie_B@2601:441:4c00:67d:34c4:a993:d6b3:eab5) ()
[06:53:40] *** Joins: CaCode (~CaCode@user/cacode)
[06:53:54] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-24ac-525a-4fc3-ed91.inf6.spectrum.com)
[06:55:49] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:24ac:525a:4fc3:ed91) (Ping timeout: 240 seconds)
[06:57:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e00d:69c0:db02:528b) (Ping timeout: 240 seconds)
[06:59:09] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 250 seconds)
[06:59:23] <Jenna16bit> tusko - not without debug symbols ;-) I mean, you can decompile it and get an approximation though yes
[06:59:36] <Jenna16bit> but things like variable names are lost, like tears in the rain
[06:59:50] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[06:59:57] <Jenna16bit> and if you compiled with heavy optimization flow will change, etc etc
[07:00:17] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:230e:6411:bf4c:835d:709d) (Ping timeout: 240 seconds)
[07:01:03] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:01:35] <tusko> what is the tool wise one?
[07:03:04] <tusko> I see a lot of info about how to like terminate a program when Ctrl-D is read in by say fgetc() but what if I want to terminate as soon as a user presses that?
[07:03:58] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[07:04:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:04:46] <dave0> tusko: like ctrl-c ?
[07:04:58] <tusko> eh, not exactly
[07:05:41] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[07:07:00] <tusko> more like  if (fgets(c, BUF, f) == NULL) { /* handle error */ }
[07:07:01] <tusko>  if (strchr(c, EOL) != NULL) {
[07:07:01] <tusko>   puts(c);
[07:07:01] <tusko>  } else {break; }
[07:07:13] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:17] *** Quits: foul_owl (~kerry@94.140.8.52) (Ping timeout: 256 seconds)
[07:07:38] <tusko> except I want to read from SDTIN which seems more difficult than it should be
[07:07:38] <dave0> not sure what you're asking
[07:07:46] <tusko> How are you not sure?
[07:07:56] <tusko> Ctrl-c is a signal
[07:08:19] <tusko> Ctrl-d is something else
[07:09:03] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:09:35] <dave0> if you want to get a character without pressing return, you have to set it up with termios
[07:09:57] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:10:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:10:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:10:02] *** Joins: wroathe (~wroathe@user/wroathe)
[07:10:17] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d)
[07:10:23] <dave0> it sounds like you want to catch ctrl-d like that
[07:10:44] *** Joins: xiongxin (~Thunderbi@117.136.79.118)
[07:11:05] *** Joins: nebu (~user@user/wavion)
[07:11:31] <dave0> you can make ctrl-d just another character (probably ascii 4) and set up termios to deliver it as soon as it's pressed
[07:12:10] *** Quits: ixokani (~swinnenb@user/swinnenb) (Remote host closed the connection)
[07:14:08] <Maxdamantus> you can send a single character by typing it then pressing ctrl-d
[07:14:40] <Maxdamantus> ctrl-d just makes the input buffer readable, whether it has 0 bytes or more.
[07:15:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:17:58] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[07:18:30] *** Joins: globs (~globs@c-73-35-251-224.hsd1.wa.comcast.net)
[07:20:45] *** Joins: karakedi (~eAC53C340@user/karakedi)
[07:21:54] *** Joins: ferdna (~ferdna@user/ferdna)
[07:21:57] *** Joins: foul_owl (~kerry@94.140.8.25)
[07:32:36] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[07:33:37] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[07:34:36] *** Joins: Sadale (~Sadale@user/sadale)
[07:35:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[07:35:19] *** Joins: oxfuxxx (~oxfuxxx@87.101.92.73)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:49] *** Quits: oxfuxxx (~oxfuxxx@87.101.92.73) (Ping timeout: 256 seconds)
[07:40:51] *** Quits: globs (~globs@c-73-35-251-224.hsd1.wa.comcast.net) (Quit: Leaving)
[07:42:39] *** Quits: xiongxin (~Thunderbi@117.136.79.118) (Ping timeout: 256 seconds)
[07:43:35] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:44:34] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:49:38] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:50:46] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[07:53:56] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b) (Quit: Leaving)
[07:55:31] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:01:30] *** Quits: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:df3e:ef17:255f:ee78) (Remote host closed the connection)
[08:03:49] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[08:04:12] *** Joins: maybe_ (~maybe@2001:16a2:7a94:4900:f872:931a:166a:f7b6)
[08:04:54] *** Joins: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:63be:4b7:5b8:1ce3)
[08:06:47] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[08:07:15] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1)
[08:08:18] *** Quits: maybe_ (~maybe@2001:16a2:7a94:4900:f872:931a:166a:f7b6) (Ping timeout: 250 seconds)
[08:11:06] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[08:12:37] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[08:19:12] <|smlckz|> please provide suggestions for improvements (functions with suffix -r are supposed to be ''readable''; am aware of incompatibility of declarations with the original functions): http://sprunge.us/H0ZPpu
[08:23:42] <System_Error> for (uint8_t i = 1, j=SOMETHING-1; i <= 10; i++,j = WHATEVER(i)) <- this apparently works. Am I correct j also "uint8_t"?
[08:24:02] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[08:24:30] <System_Error> but this: for (uint8_t i = 1, uint16_t j=SOMETHING-1; i <= 10; i++,j = WHATEVER(i)) <- does not works.
[08:24:53] <System_Error> is it possible to have different types like that, using C99-style declaration?
[08:25:38] <dave0> System_Error: not that i know of ... there's space for one line which can be a declaration but it's only one line
[08:26:01] <tusko> interesting
[08:26:07] <dave0> System_Error: int a, short b;  has never been valid c, putting it in for doesn't make it valid
[08:27:14] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[08:27:28] <dave0> |smlckz|: it all looks okay, does it work?
[08:28:10] <|smlckz|> yes, at least for me.. ;)
[08:28:12] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.72)
[08:28:34] <dave0> |smlckz|: you realize you're reinventing the wheel?
[08:28:37] <System_Error> dave0: ye, I wonder, is there way to declare different localvars for for if I want different types?
[08:29:05] <DavidMilestone> Hi, I'm not sure what exactly the problem is here. The output is not what I expected it to be. https://bpa.st/JK4Q
[08:29:07] <|smlckz|> dave0: yes, but this is homework, so what can i say?
[08:29:15] <dave0> System_Error: not for different types.. cant it be int?
[08:29:33] <dave0> |smlckz|: oh okay well if it works you should get an A :-)
[08:29:54] <|smlckz|> :D
[08:30:50] <System_Error> dave0: I want guaranteed fixed width types for other reasons, not abstract "int". And in perfect world its better to be 2 different ones.
[08:32:26] <dave0> DavidMilestone: scanf doesn't really play nicely with fgets ... the best answer is change   scanf("%d", &n);   to     char buf[100]; fgets(buf, 100, stdin); sscanf(buf, "%d", &n);
[08:32:29] <System_Error> so makes me wonder, I can declare >1 var but limited to 1 type for all of them? Or?
[08:32:43] *** Joins: SudoBash (~SudoBash@45.43.99.99)
[08:32:49] <SudoBash> is there an objective C channel?
[08:32:50] <dave0> System_Error: yep, one type, many variables
[08:32:58] <DavidMilestone> Or can I add a `getchar()` after the scanf()?
[08:33:12] <dave0> DavidMilestone: ehh that's not the best answer
[08:33:56] <DavidMilestone> Why is this happening though? Is it because of an extra newline character?
[08:33:57] <|smlckz|> System_Error: you can always do `{ uint8_t  i = ...; uint16_t j = ...; for (; ...;...) {...} }`
[08:34:55] <dave0> DavidMilestone: yes its from the newline character... scanf("%d", ...); stops at newline but does not remove the newline ... if you getchar() it will consume the newline
[08:35:26] <dave0> DavidMilestone: because scanf does not remove the newline, the fgets will see it and think you entered an empty line
[08:35:29] <System_Error> |smlckz|: yea, just wondered about this particular construct vs local vars in C99 style
[08:35:34] <dave0> DavidMilestone: the best answer is always use fgets
[08:35:38] <|smlckz|> DavidMilestone: another thing you can do is scanf("%d%*c", &n); to remove the newline as well
[08:36:12] <DavidMilestone> Adding `getchar()` is giving me the correct output. But I'm not sure if it's the standard approach to this problem.
[08:36:27] <dave0> DavidMilestone: fgets
[08:36:45] <DavidMilestone> Can I also use fgets for int values?
[08:36:46] <|smlckz|> System_Error: the construct i showed you is valid C89 iirc (sans those [u]intN_t types)
[08:37:08] <dave0> DavidMilestone: you use fgets to get a line of input... if you want an int, use  sscanf  on the line
[08:37:15] <DavidMilestone> Okay
[08:37:32] <DavidMilestone> What's the difference between sscanf() and scanf() if I may ask?
[08:37:45] <dave0> DavidMilestone: scanf reads from stdin, sscanf works on a string
[08:38:25] <DavidMilestone> On a string? What does that mean? Does it convert the input into string first?
[08:38:40] <dave0> DavidMilestone: the reason fgets is the best answer is because you already use fgets to read the subject name and code... it is far easier to use fgets for everything
[08:38:53] <System_Error> |smlckz|: yea, just a bit more verbose code, I've been wondering what mentioned style can swallow :)
[08:39:22] <dave0> ,cc char *string = "50"; int n; sscanf(string, "%d", &n); printf("n=%d ", n);
[08:39:24] <candide> dave0: n=50
[08:39:29] <System_Error> either way I think I more or less got my answers, ty everyone involved
[08:39:34] <DavidMilestone> And what about the rest of the code? Am I following the standard rules? dave0
[08:39:41] <dave0> DavidMilestone: rest of the code is fine
[08:40:08] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.72) (Ping timeout: 256 seconds)
[08:40:09] <DavidMilestone> So when should one use sscanf() over scanf()?
[08:40:25] <SudoBash> looks for an objective-c coder to help update UIWebView to WKWebView
[08:40:34] <DavidMilestone> I've been using scanf() (to read int) + fgets() (to read strings) till now
[08:40:39] <SudoBash> for https://github.com/AppXprt/ManifoldCordova
[08:40:47] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[08:41:58] <dave0> DavidMilestone: the idea is consistently using scanf or fgets but not both in the same program.. technically you can mix and match, but it is far simpler to pick one (scanf/fgets) and use that throughout
[08:42:16] <dave0> DavidMilestone: sscanf is only needed because fgets reads a string
[08:42:33] <dave0> DavidMilestone: whereas scanf can convert as it reads from stdin
[08:42:46] *** Joins: malina (~malina@user/malina)
[08:42:54] <DavidMilestone> Oh, right. So I should only use sscanf() when using fgets() to read strings?
[08:42:54] <SudoBash> please
[08:43:02] <dave0> DavidMilestone: yep exactly
[08:43:10] <DavidMilestone> Okay, gotcha.
[08:44:11] <DavidMilestone> Also, is there a way to dynamically allocate unions like we allocate structures? For instance, I don't know how many objects of a given union type are to be stored in a program.
[08:44:31] <dave0> DavidMilestone: yep, exactly the same as a struct
[08:45:03] <DavidMilestone> Okay
[08:45:07] <DavidMilestone> Thank you!
[08:45:12] <dave0> no worries
[08:45:41] <DavidMilestone> Is there a good resource I can follow to learn about C in more depth?
[08:47:12] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:53:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:53:35] *** Joins: unixpro1970 (~unixpro19@2601:603:4e00:168:6600:6aff:fe50:e69c)
[08:55:57] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 240 seconds)
[08:56:10] *** Joins: ironman_ (~ironman@152.57.241.86)
[08:56:49] *** Joins: ferdna (~ferdna@user/ferdna)
[08:58:17] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[08:58:26] *** ironman_ is now known as ironman
[09:00:17] *** Quits: unixpro1970 (~unixpro19@2601:603:4e00:168:6600:6aff:fe50:e69c) (Ping timeout: 240 seconds)
[09:02:33] *** Joins: savolla (~quassel@84.44.28.28)
[09:02:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:03:33] <DavidMilestone> dave0, I want to separate out the input prompts by a newline in between. I'm trying to do '\n' and then getchar() but the output is not correct.
[09:04:18] <dave0> what's the code?
[09:04:38] <SudoBash> try '\r\n'
[09:05:05] *** Quits: soapsudsxx (~soapsudsx@209.221.40.130) (Remote host closed the connection)
[09:05:50] <DavidMilestone> https://bpa.st/MDCQ
[09:06:21] <dave0> DavidMilestone: you don't need getchar() at all
[09:06:45] <dave0> DavidMilestone: printf("\n"); on line 27 is fine
[09:06:50] <DavidMilestone> But the next fgets() will read the newline, right?
[09:07:16] <dave0> DavidMilestone: nope... printf sends it to stdout, whereas fgets recieves it from stdin
[09:07:29] <DavidMilestone> ...oh wait, yes
[09:07:30] *** Quits: ironman (~ironman@152.57.241.86) (Quit: Leaving)
[09:07:45] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[09:08:06] *** Joins: ironman (~ironman@49.36.50.55)
[09:08:07] <DavidMilestone> I got confused. Thanks again, guys.
[09:08:19] <dave0> DavidMilestone: oh there's a problem
[09:08:31] <dave0> DavidMilestone: move line 13 to line 17
[09:08:34] <caze> dave0: You use n before it has a value.
[09:09:05] <caze> DavidMilestone: ^
[09:09:22] <DavidMilestone> Yep, thanks
[09:09:33] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:10:46] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[09:10:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:10:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:10:48] *** Joins: wroathe (~wroathe@user/wroathe)
[09:11:05] *** Joins: Oddity (~Oddity@user/oddity)
[09:11:39] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:11:43] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:12:42] <DavidMilestone> Wait, @caze, can I allocate memory without knowing the var size in all cases? Or is it exclusive to the cases involving sscanf()?
[09:13:10] <caze> DavidMilestone: You can allocate memory without knowing the size in no cases.
[09:14:10] <DavidMilestone> Oh I thought you said "You can use n before it has a value."
[09:14:20] <DavidMilestone> Sorry, I misread it
[09:14:39] <DavidMilestone> '=D
[09:14:55] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.72)
[09:15:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:15:46] <caze> DavidMilestone: Also, the allocation is better like this: subject *sub1 = malloc(n * sizeof *sub1);
[09:16:10] <ski> ,malloc
[09:16:10] <candide> There is no need to cast the result of library functions that return void *; it makes your code hard to read, adds no value, and can hide a bug if you don't have a valid prototype in scope. See http://c-faq.com/malloc/mallocnocast.html
[09:16:17] <DavidMilestone> Oh
[09:16:43] <nitrix> ski, You want ,mallocidiom
[09:17:24] <ski> oh, perhaps. i was mostly thinking about the casting though, there. ty
[09:17:33] <nitrix> Oh they got both wrong.
[09:17:39] <nitrix> Poor soul.
[09:18:03] <dave0> oh
[09:18:08] <SudoBash> can someone please explain this objective c? [self.wrappedDelegate webView:webView shouldStartLoadWithRequest:request navigationType:navigationType];
[09:18:23] <caze> DavidMilestone: Also, personally, I would keep using buff in the loop where you read the name and code, and copy it into the struct after you've trimmed the '\n'.
[09:18:24] <dave0> SudoBash: come on guy, this is c
[09:18:39] <DavidMilestone> I got this habit of casting malloc from leetcode problems. The partial code that they provide typecasts malloc
[09:18:50] <DavidMilestone> I didn't know it was a bad practice
[09:19:38] <nitrix> DavidMilestone, (sub1 + i)->subject_code is a pretty ridiculous way of writing sub1[i].subject_code
[09:19:45] <ski> DavidMilestone : instead of .. what nitrix said :)
[09:20:19] <SudoBash> there isn't an objective-c channel!
[09:20:45] <DavidMilestone> Lol, yes I need to correct my concepts
[09:21:30] *** Joins: oxfuxxx (~oxfuxxx@87.101.92.75)
[09:21:47] <nitrix> DavidMilestone, I also would get rid of that unnecessary typedef. They're useful for aliasing integer types of different widths, not practical for structs.
[09:22:06] <DavidMilestone> Oh
[09:22:23] *** Joins: lleo (~leo@31-161-189-89.mobile.kpn.net)
[09:22:42] *** Quits: SudoBash (~SudoBash@45.43.99.99) (Quit: Connection closed)
[09:23:31] <DavidMilestone> Okay, I'll remove typedef if it's not a standard rule. Use buff to copy values into the structure, and change the current format to the sub[i].subject_xxx format
[09:23:36] <nitrix> You're picking all the bad habits people fall for when they start learning C using old/incorrect resources online. You still have the chance of rectifying the situation before it becomes muscle memory and you start justifying it with silly excuses.
[09:24:10] <DavidMilestone> Yes, I do want to rectify this situation.
[09:24:23] <dave0> there's lots of little things and at least one big thing you could do.. but making it work is a big step
[09:24:36] <dave0> the big thing is there's no error checking
[09:25:36] <nitrix> I don't like that magical number 100 repeated everywhere.
[09:25:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:25:55] <DavidMilestone> Why did the code work correctly before n was even declared? I had mistakenly left the structure declaration at the top of the code and didn't notice it until you told me
[09:26:08] <DavidMilestone> Yes, I should use `#define MAX_SIZE 100` right?
[09:26:08] <dave0> DavidMilestone: coincidence
[09:26:34] <DavidMilestone> I see
[09:27:19] <nitrix> DavidMilestone, Either that or maybe `sizeof sub1.subject_name`. As long as it's at one place so that if someone updates it they don't have to find out everywhere in the code where things break.
[09:27:42] <DavidMilestone> That's right. I should use `sizeof` more often
[09:28:10] <DavidMilestone> Can you point out more mistakes in my code? I don't want to become a bad programmer...
[09:28:36] <dave0> the thing about these nits are they aren't technically wrong
[09:28:52] <dave0> but i guess it's best to learn good style as soon as possible
[09:29:00] <DavidMilestone> Yeah
[09:30:06] <dave0> it's a lot to pile on a beginner
[09:30:52] <DavidMilestone> That's a required constraint. I guess I was following the wrong resources till now
[09:32:31] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:8ef:9383:e8bb:73b3:7c08)
[09:32:57] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[09:34:14] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:34:35] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[09:40:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:44:38] <DavidMilestone> "Some C compilers may require to cast the type of conversion. The (int *) means coercion to an integer pointer. Coercion to the correct pointer type is very important to ensure pointer arithmetic is performed correctly. I personally use it as a means of ensuring that I am totally correct in my coding and use cast all the time."
[09:44:38] <DavidMilestone> I don't know what to follow and what to avoid. Can someone please guide me?
[09:44:49] <DavidMilestone> oops, it is `int *`
[09:45:31] *** Joins: ekathva (~ekathva@2001:999:50:cab1:7400:254b:2f47:2e82)
[09:45:44] <caze> DavidMilestone: Whoever wrote that is confusing a C compiler with a C++ compiler.
[09:46:01] <caze> DavidMilestone: The C specification requires that a cast is *not* required.
[09:46:16] <caze> DavidMilestone: This is not optional for a compiler.
[09:46:24] <caze> (a C compiler)
[09:46:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[09:46:43] <DavidMilestone> The GNU C Programming - is the resource where I got this statement from
[09:47:05] *** Quits: ironman (~ironman@49.36.50.55) (Quit: Leaving)
[09:47:09] <dave0> sorry i don't know what book to recommend :-(
[09:47:13] <DavidMilestone> :(
[09:47:42] <caze> DavidMilestone: Also, they make it sound as if they are performing pointer arithmetic -- is this at the same time as the memory allocation?
[09:48:15] <DavidMilestone> Yeah, they're doing  `int *ip; ip = (int *) malloc(100*sizeof(int));`
[09:48:26] <caze> Because typically, you do the memory allocation, and then you check to see if the allocation was successfull, and only then do you utilize the allocated memory (via pointer arithmetic).
[09:48:41] <DavidMilestone> int *ip;
[09:48:41] <DavidMilestone> ip = (int*)malloc(100 * sizeof(int));
[09:48:47] <caze> DavidMilestone: That is not pointer arithmetic.
[09:49:00] <DavidMilestone> So they're wrong here?
[09:49:05] <caze> DavidMilestone: Yes.
[09:49:16] <caze> That is just determining the size of the allocation.
[09:49:24] <DavidMilestone> Who should I follow then?
[09:49:48] <caze> It can screw up pointer arithmetic later on, but it is not in of itself pointer arithmetic.
[09:50:22] <DavidMilestone> I tried CS50's Introduction to Computer Science course, they used `typedef` with structs all the time. And I just learned that it's a bad habit.
[09:50:26] *** Joins: zacts (~zacts@user/zacts)
[09:50:35] <DavidMilestone> :(
[09:50:41] <ChoHag> It's neither bad nor a habit.
[09:50:44] <ChoHag> I do it all the time.
[09:51:20] <ChoHag> I don't know who I would follow in your shoes but I can advise you that GNU code is not *good* code.
[09:51:38] <DavidMilestone> Right...what about Schildt's book?
[09:51:58] *** zacts is now known as z4kpi
[09:52:07] <ChoHag> Is it full of code or does the author like the look of his own prose?
[09:52:19] <ski> "Stuff that should be avoided ... * Books written by Herb Schildt." -- <https://www.iso-9899.info/wiki/Books> (in topic)
[09:52:34] * ChoHag shrugs
[09:52:37] <DavidMilestone> Wow
[09:52:41] <ChoHag> I never read that many coding books.
[09:52:59] <ChoHag> Those that I did, I mostly just copied out the code.
[09:53:04] <dave0> ,books
[09:53:04] <candide> See http://www.iso-9899.info/wiki/Books for some useful book recommendations, including free online resources.
[09:53:29] <dave0> endorsed by candide, the #c robot
[09:53:29] *** Quits: brdb (~alarm@24.61.226.255) (Read error: Connection reset by peer)
[09:53:44] <caze> DavidMilestone: https://users.cs.cf.ac.uk/Dave.Marshall/C/CE.html Is this what you were reading?
[09:53:46] <candide> Title of caze's link: Programming in C
[09:54:02] <DavidMilestone> Yeah
[09:54:26] <DavidMilestone> I only checked that website for malloc and typecasting
[09:54:52] *** Joins: libc (~archer@user/tessio)
[09:54:55] <DavidMilestone> "The Art of Unix Programming" seems like a reliable resource
[09:55:10] * ski doesn't have a strong opinion on `typedef'ing `struct's
[09:55:19] <ChoHag> "There was an opportunity here to explain what multibyte characters actually are, but it seems to have been missed, possibly because of the lack of space."
[09:55:31] <ChoHag> Pun intended?
[09:55:41] <dave0> haaaa! nice
[09:56:06] <DavidMilestone> ?
[09:56:23] <libc> good morning dave0 :)
[09:56:33] <ChoHag> DavidMilestone: Trying to figure out what's wrong with Schildt led me here: https://www.lysator.liu.se/c/schildt.html
[09:56:36] <dave0> maw libc
[09:56:53] <ski> (if you're going to be accessing the members, then i could see why people could argue that it's better not to `typedef'. if you're not, then i don't see why using `typedef' would have to be a bad idea)
[09:57:07] <ChoHag> And given the introduction I agree: ... the book is commenting on a very carefully designed document, and one that has to be read precisely.  If the annotator cannot get things right, then the book is not just useless, but is a positive danger to those who do not have the time to read and analyse every word of the standard.
[09:58:29] <libc> ChoHag how about 'The ANSI C Programming Language ?
[09:58:31] <libc> '
[09:58:38] <dave0> i've never read it but i heard good things about King ... (from the wiki/Books page) ... C Programming: A Modern Approach, by King, ISBN: 0393969452
[09:59:03] *** Joins: brdb (~alarm@24.61.226.255)
[09:59:32] <DavidMilestone> ski, thanks so much :)
[09:59:46] <DavidMilestone> ChoHag, is the standard C book the best resource available?
[10:00:55] <ski> DavidMilestone : for the link ?
[10:02:17] <DavidMilestone> for the explanation on using `typedef` with struct
[10:02:43] <ski> others in the channel may have more crystallized opinion on the subject. those are just my 2c
[10:02:57] <DavidMilestone> Okay, I think I'll give the book by King a try. Seems like a good resource.
[10:02:57] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[10:03:12] <DavidMilestone> yeah
[10:03:24] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[10:04:20] <ChoHag> "The standard" and in a way yes but not really.
[10:04:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[10:05:01] *** Quits: nebu (~user@user/wavion) (Ping timeout: 240 seconds)
[10:05:06] <ChoHag> You'll certainly want to know *about* it and possibly even refer to it occasionally but it's not a beginner's document.
[10:05:16] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[10:05:26] <DavidMilestone> Yeah, it's a difficult read.
[10:05:29] <ChoHag> However it does lay down the law and the lore that the compilers all try to obey.
[10:05:40] <DavidMilestone> That's why I had to look for easier books
[10:05:41] <caze> The only thing about reading the standard as a book is that you'll want to look up the terms that it uses, which means hopping all over the document just to read a single paragraph.
[10:06:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:06:41] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[10:06:43] <DavidMilestone> Must be a harrowing experience for a beginner.
[10:06:55] <z4kpi> how about this book? https://nostarch.com/Effective_C
[10:07:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:8ef:9383:e8bb:73b3:7c08) (Ping timeout: 240 seconds)
[10:07:43] <ski> (btw, "if you're not [going to be accessing the members]" means when you're offering an abstract data type interface to a user. so *your* implementation will be accessing the members of the `struct' (why else use a `struct' ?). but the *user*'s usage of your interface will not be doing so, but just use the type as an abstract type (most commonly via having pointers to it). so, in that case, it's not clear to me
[10:07:49] <caze> It's a skill that people should learn, not just for the C spec, but for effectively reading any technical document.
[10:07:49] <ski> why they ought to be writing `struct foo' rather than `foo')
[10:08:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:08:28] <ChoHag> I think what scares people off typedefs is pointer typedefs.
[10:08:35] <DavidMilestone> oh, I'm following NoStarch's book on Python. It's really good. I didn't know they have a book for C too
[10:08:41] <ChoHag> And then pointers to thoise.
[10:08:45] <ChoHag> those
[10:09:10] <DavidMilestone> Yep, I'm still scared of functions that that have multiple *'s in front of them
[10:09:27] *** Joins: masoudd (~masoudd@user/masoudd)
[10:09:47] <caze> The primary reason not to typedef a pointer is because things like + have different semantics.
[10:09:47] <ChoHag> typedef struct foo * bar; is asking for trouble. typedef struct foo bar; is merely questionable.
[10:09:58] <ski> well, same point applies. if you do care that your `typedef' is actually a pointer type, then perhaps it's better not to use that `typedef', but rather the pointer type directly. if you don't care, then i'm not sure what the problem is
[10:10:19] <caze> T x, y; y = x + 1;
[10:10:49] <caze> If T is a pointer, then x + 1 means something very different than if T were say, an integer.
[10:10:51] <ski> DavidMilestone : functions, or function parameters ?
[10:10:56] <ski> caze : yes
[10:11:25] <DavidMilestone> functions that have multiple asterisks in front of them. for instance, struct Node****(struct node *s, int s) and etc
[10:11:34] <ski> (or function results, i guess)
[10:11:55] <ski> ah, you're thinking about functions returning pointers to pointers
[10:12:01] <DavidMilestone> yep
[10:12:54] <ChoHag> I think that's what people try to hide with pointer typedefs.
[10:13:07] *** Joins: kts (~kts@103.73.237.62)
[10:13:29] <ChoHag> But an attempt to make it appear less confusing only makes it more so.
[10:13:34] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:4c90:9dff:b681:4dc7)
[10:13:36] <ski> caze : i suppose one concern is that people could accidentally start using such arithmetic on such types, and then get confused. valid point
[10:13:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:14:11] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[10:17:07] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-24ac-525a-4fc3-ed91.inf6.spectrum.com) (Ping timeout: 256 seconds)
[10:17:08] <ski> DavidMilestone : i think rarely there's a use for more than two `*'s in a row
[10:18:50] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:4c90:9dff:b681:4dc7)
[10:19:13] <libc> say what you want about typedef struct for bar
[10:19:22] <libc> it's just in every major project you will ever encounter
[10:19:29] <libc> s/for/foo
[10:19:38] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:4c90:9dff:b681:4dc7) (Ping timeout: 260 seconds)
[10:19:51] <ChoHag> "for" works grammatically. Not everything needs to be able to compile :P
[10:19:59] <DavidMilestone> ski,  I see
[10:20:29] <ChoHag> And yes. "Don't use typedef (on structs)" is one of those rules that's there so you think before you break it.
[10:20:53] <DavidMilestone> lol
[10:21:18] <ski> that's good advice, on most rules/suggestions
[10:21:19] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[10:21:38] *** Joins: diiirt (~diiirt@user/diiirt)
[10:21:40] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:4c90:9dff:b681:4dc7)
[10:21:57] <ski> "Don't use X, unless you know why you shouldn't use X."
[10:21:59] <libc> the biggest problems i faced in programming in general is that i don't have mathematical thinking ... pure and ismple
[10:22:03] <ChoHag> Don't thank me it was Pratchett. Rules are there so you think before you break them.
[10:22:15] <libc> it's just not for everyone i guess
[10:22:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:22:29] <ChoHag> I have not found mathematics to be particularly helpful.
[10:22:38] <ski> mathematical thinking can be improved
[10:22:39] <libc> it's not mathematics per se
[10:22:40] <ChoHag> And mathematicians are possitively annoying.
[10:22:58] <DavidMilestone> Math is very much required in algorithm design and optimizing software
[10:23:00] <ski> also, mathematics is not just limits, derivatives, integrals, and such
[10:23:05] <z4kpi> typedefs of structs?
[10:23:18] <libc> it's the way you see things, which is most often say that you also good in math ..
[10:23:31] <ChoHag> libc: Well it's never held me back.
[10:23:40] <ski> math is just as much about logic, sets, graphs, trees, refactoring and reasoning. making definitions, characterizations, reformulations
[10:23:51] <ski> analogical thinking
[10:23:52] <DavidMilestone> Mathematical thinking can be improved, I agree.
[10:23:58] <ChoHag> I eventually got good at basic arithmetic and algebra and then got bored of maths.
[10:23:59] <z4kpi> is it not recommended to typedef a struct?
[10:24:06] <libc> i stated "math" because to emphasize a systematic thinking
[10:24:24] <ChoHag> z4kpi: Not until you know why you shouldn't.
[10:24:37] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:4c90:9dff:b681:4dc7) (Ping timeout: 240 seconds)
[10:24:41] <ski> (also, schools in general really do a bad job at teaching math, give a bad impression of what math is about. if your only exposure to math is through school, odds are you have a warped understanding of math)
[10:24:41] <libc> for example
[10:24:59] <bparker> z4kpi: people do it literally all the time, don't pay attention to the purists
[10:25:08] <DavidMilestone> Yeah, math is a beautiful subject if you have found a great teacher.
[10:25:29] <ChoHag> libc: Kids learn it.
[10:25:35] <ChoHag> Systemic thinking has nothing to do with it.
[10:25:53] * ski had the great fortune of having an older brother explain primes, factorizations, equations, functions, congruences, %c. to them, at an early age
[10:26:05] <ChoHag> Shere bloody mindedness will be the most helpful mental trait.
[10:26:10] <DavidMilestone> I recommend checking out MIT's 6.042J by Tom Leighton: Mathematics for Computer Science
[10:26:11] <DavidMilestone> Such a great course man. You'll fall in love with math
[10:26:29] <ChoHag> Remember you are telling a piece of rock what to do. If you can't get it right then you are literally dumber than a rock. Don't let it win.
[10:27:03] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[10:27:17] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: WeeChat 2.8)
[10:27:18] <ski> ChoHag : arithmetic, algebra, and logic, are the most useful basic parts of math, for programming
[10:27:21] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[10:27:31] <ChoHag> Beat the computer into the shape of your choosing, then look up and wonder where your life went.
[10:27:41] <ski> (btw, math education, even in universities, generally also tend to teach logic badly (to the extent they teach it at all))
[10:28:11] <ChoHag> ski: I thought I knew logic, but then they made up more logics.
[10:28:31] *** Quits: z4kpi (~zacts@user/zacts) (Quit: Client closed)
[10:28:34] <ChoHag> I don't see the logic in that.
[10:28:39] <ski> if you don't know Natural Deduction, then you don't really know logic, afaic
[10:28:48] <ski> (most mathematicians don't really know ND ..)
[10:29:13] <DavidMilestone> Is information theory a part of discrete math?
[10:29:37] *** Quits: foul_owl (~kerry@94.140.8.25) (Ping timeout: 240 seconds)
[10:30:10] <ski> (another way to express it is that they have an implicit knowledge of it. but not an explicit knowledge. they're supposed to learn it, solely through osmosis, seldom by any explicit discussion. and then, the few students that make it through this gets so used to this state of affairs, that they don't see the problem, when they start teaching new students)
[10:31:56] <ski> ChoHag : logics are tools. different logics may be required, in different situations
[10:32:34] *** Quits: kts (~kts@103.73.237.62) (Quit: Konversation terminated!)
[10:32:41] <ski> DavidMilestone : basically, yes. large parts of computing science can be regarded as parts of math
[10:33:18] <ChoHag> However computer science is a tiny fraction of programming.
[10:33:30] <DavidMilestone> I see. I'm taking a Discrete Math course in college atm
[10:33:32] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:33:33] <ChoHag> I never learned it and everyone I met who did was clueless.
[10:33:39] <ChoHag> (In context)
[10:34:35] <ChoHag> (The context usually being an attempt to [find] work as a developer)
[10:35:54] <ChoHag> Some unis have attempted to fix this but AFAIK in much the same way schools treat "teaching computers" as "teaching MS Office".
[10:36:53] <ski> this is one reason why i prefer to say "computing science" (over "computer science")
[10:37:11] *** Quits: alch (~alch@151.34.25.130) (Ping timeout: 256 seconds)
[10:37:12] <ChoHag> Yeah I saw that. I thought you were just foreign or young.
[10:37:49] <ski> "Computer science is no more about computers than astronomy is about telescopes." -- Dijkstra
[10:38:13] <DavidMilestone> Wise words
[10:38:41] *** Joins: alch (~alch@151.34.67.233)
[10:39:25] <ChoHag> The whole field was still wedged in academia then, mind. Basic forays into the real world only.
[10:39:40] <ChoHag> What computer science was and wasn't was still becoming clear.
[10:39:48] <ChoHag> Is and isn't, I should say.
[10:39:59] <ski> anyway, people commonly measure what's easier to measure, than what's more relevant to measure
[10:40:40] <ski> (and put too much faith in numbers, or in "computers". "The computer said it, so it must be true.")
[10:41:02] <ChoHag> cf. 2020-2022.
[10:43:38] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[10:44:02] *** Joins: foul_owl (~kerry@71.212.148.11)
[10:45:08] *** Quits: ekathva (~ekathva@2001:999:50:cab1:7400:254b:2f47:2e82) (Remote host closed the connection)
[10:46:44] <DavidMilestone> Do you recommend using Sublime Text (or VSCode) for C programming? Or is there a more standard alternative?
[10:46:53] *** Joins: ekathva (~ekathva@2001:999:50:cab1:caa4:5c66:a03b:aeba)
[10:46:59] *** Joins: xiongxin (~Thunderbi@117.136.39.240)
[10:47:30] <ChoHag> Programmers generally prefer to use a magnetised pin and a steady hand.
[10:48:07] <vdamewood> I use butterflies
[10:48:12] <sham1> Oh, here come the flamewar bait
[10:48:55] <ChoHag> Oh I tried but I do a lot of coding at night and moths are a lot less useful.
[10:48:58] *** Quits: ekathva (~ekathva@2001:999:50:cab1:caa4:5c66:a03b:aeba) (Remote host closed the connection)
[10:49:09] <DavidMilestone> =L
[10:49:11] * ski tends to prefer using editors over the IDE stuff
[10:50:13] <ChoHag> These days I've settled on unix so the computer is the IDE.
[10:50:20] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[10:50:44] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[10:50:44] *** Joins: ekathva (~ekathva@2001:999:50:cab1:57c0:d735:9d33:c719)
[10:51:14] <ChoHag> DavidMilestone: I know someone who codes in notepad. Use whatever's comfortable.
[10:51:43] <DavidMilestone> Yeah, but VSCode raises the "include error path" error every other day
[10:51:58] <ChoHag> You're going to have a bad enough time butting up against the compiler you don't want to go to war with your editor too.
[10:52:03] <sham1> Well that's easy, you just need to set up the build properly
[10:52:25] <ChoHag> Also bugger windows off. Learn C in a C environment.
[10:52:49] <ChoHag> You can return to kindergarten afterwards if you feel like it.
[10:53:04] <DavidMilestone>  I read the official VSCode docs- and was able to solve the issue, but the errors appeared again in a new directory on a new day...
[10:56:58] <ski> (in my case, editor means Emacs. but i'm sure Vim is a fine alternative)
[10:57:42] <sham1> Can confirm, I use both. Both is good
[10:57:48] <DavidMilestone> I do have Vim enabled on VSCode
[10:57:54] <ChoHag> Editors are like a^Wopinions. Everybody's got one.
[10:58:11] <NRK> ^W ?
[10:58:19] <ski> "delete last word"
[10:59:05] *** Quits: ekathva (~ekathva@2001:999:50:cab1:57c0:d735:9d33:c719) (Remote host closed the connection)
[10:59:08] <DavidMilestone> Yeah
[10:59:13] *** Quits: zwr (~zwr@2804:d45:b966:fb00:be03:2bc0:ec84:6a34) (Ping timeout: 250 seconds)
[10:59:22] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:a89e:b347:cccb:c7e5) (Read error: Connection reset by peer)
[10:59:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130)
[10:59:42] <DavidMilestone> "delete inside word" and then the `.` is a killer combination
[10:59:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:768:90c7:1da:f56f)
[11:00:40] *** Joins: ekathva (~ekathva@2001:999:50:cab1:3235:c247:f7c8:bce3)
[11:01:55] <ski> `stty -a' will print here (among other stuff) "werase = ^W", and `man stty' page says "* werase CHAR    CHAR will erase the last word typed". it's a terminal thing. people semi-commonly write `^W' humorously, to indicate a (faked) failed attempt to delete the last word, replacing it with something else. you somewhat more commonly see people writing `^H's (for "delete last character")
[11:03:14] <ChoHag> C-M-h also works and sometimes M-h.
[11:04:13] <ChoHag> Or ^[^h and ^[h for the heathens.
[11:04:27] <DavidMilestone> oh
[11:05:19] <DavidMilestone> Is there a terminal for Vim? Or do you prefer running Vim in a terminal?
[11:05:43] <ChoHag> Basically ^ and C- mean ctrl, ^[ is ESC which is equivalent (usually) to the ALT key or M-.
[11:06:02] <sham1> Or, w ll, Escape
[11:06:05] *** Quits: oxfuxxx (~oxfuxxx@87.101.92.75) (Ping timeout: 256 seconds)
[11:06:23] *** Joins: oxfuxxx (~oxfuxxx@131.255.4.84)
[11:07:28] * ski prefers running Emacs in the terminal (`emacs -nw',`emacsclient -nw') (under GNU Screen) .. perhaps slightly heretical
[11:07:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[11:07:45] <dave0> i'd like to see a terminal that lets you edit the line with the arrow keys
[11:07:46] <markand> DavidMilestone, vim in terminal or gvim (gtk3)
[11:08:32] <DavidMilestone> Yeah
[11:09:27] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[11:11:56] <dave0> could linus decree that?
[11:14:09] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:15:38] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:20:15] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:20:40] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[11:21:03] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:22:15] *** Joins: Akiva (~Akiva@user/Akiva)
[11:22:36] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[11:24:19] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:25:21] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[11:26:17] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[11:27:24] <sham1> But yeah. For C especially, the idea of the "OS is the IDE" works very well
[11:27:42] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[11:27:59] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[11:28:21] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:29:27] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:31:25] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[11:32:48] *** Joins: freep (~freepppp@62.1.79.42.dsl.dyn.forthnet.gr)
[11:32:49] *** Joins: mrig (~mrig@user/mrig)
[11:33:17] *** Quits: brdb (~alarm@24.61.226.255) (Ping timeout: 256 seconds)
[11:34:03] *** Quits: caze (~caze@user/caze) (Quit: caze)
[11:35:07] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au)
[11:35:18] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:37:50] *** ironman_ is now known as ironman
[11:38:30] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:38:52] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[11:39:01] *** Quits: Trigraph (~Trigraph@user/trigraph) (Read error: Connection reset by peer)
[11:39:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:42:55] *** Quits: oxfuxxx (~oxfuxxx@131.255.4.84) (Ping timeout: 256 seconds)
[11:43:08] *** Joins: Rounin (~david@84.212.130.215)
[11:44:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:45:05] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[11:49:12] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:51:36] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 245 seconds)
[11:52:19] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:54:41] *** Quits: lleo (~leo@31-161-189-89.mobile.kpn.net) (Quit: institute budget)
[11:56:26] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[11:59:22] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[11:59:42] *** Quits: xiongxin (~Thunderbi@117.136.39.240) (Read error: Connection reset by peer)
[12:05:24] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:12:03] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[12:13:12] *** Quits: knusbaum (~knusbaum@23.249.37.254) (Quit: ZNC 1.8.2 - https://znc.in)
[12:13:24] *** Emet-Selch is now known as Azem
[12:17:02] *** Joins: knusbaum (~knusbaum@23.249.37.254)
[12:18:42] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:93a:f816:bc7c:4b35:fc6b)
[12:25:44] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[12:28:43] *** Joins: brdb (~alarm@24.61.226.255)
[12:29:16] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:29:29] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[12:31:03] *** Quits: highrate (~presonic@user/highrate) ()
[12:31:20] *** Quits: ckdCreations (~ckdCreati@147.55.133.136) (Read error: Connection reset by peer)
[12:31:42] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[12:32:07] *** Joins: wyfnt (~wyfnt1232@103.214.137.74)
[12:32:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[12:35:26] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:36:11] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:37:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:40:12] *** Joins: Red (~Red@41.92-221-233.customer.lyse.net)
[12:40:37] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:41:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:41:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:41:25] *** Joins: wroathe (~wroathe@user/wroathe)
[12:43:01] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[12:43:54] *** Joins: inlight (~thomas@82.221.128.46)
[12:43:54] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[12:43:54] *** Joins: inlight (~thomas@user/inlight)
[12:44:15] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[12:44:31] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[12:44:38] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[12:46:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[12:46:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:46:45] *** Joins: inlight (~thomas@user/inlight)
[12:46:58] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1) (Quit: Leaving)
[12:49:28] *** Quits: foul_owl (~kerry@71.212.148.11) (Ping timeout: 256 seconds)
[12:51:02] *** Joins: arinov (~arinov@213.194.126.155)
[12:51:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:52:27] *** Joins: msk (~Thunderbi@89.205.124.59)
[12:53:15] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:54:44] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[12:56:03] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[12:56:14] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au)
[12:56:15] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[12:56:28] *** Quits: wyfnt (~wyfnt1232@103.214.137.74) (Quit: Leaving)
[12:56:43] *** Joins: wyfnt (~wyfnt1232@103.214.137.74)
[12:57:23] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[13:03:17] *** Joins: foul_owl (~kerry@94.140.8.194)
[13:03:29] <libc> OS is the IDE ?
[13:03:32] <libc> that's new to me
[13:07:21] *** Quits: brdb (~alarm@24.61.226.255) (Ping timeout: 256 seconds)
[13:08:06] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:93a:f816:bc7c:4b35:fc6b) (Ping timeout: 260 seconds)
[13:08:28] <ski> the shell is the UI to the OS
[13:08:48] *** Joins: brdb (~alarm@24.61.226.255)
[13:09:37] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[13:09:52] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:11:20] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:41] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[13:15:01] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[13:15:15] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[13:15:16] *** Joins: kish` (~aqua@user/aqua)
[13:15:34] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[13:15:59] *** Joins: kish` (~aqua@user/aqua)
[13:16:49] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:17:37] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Remote host closed the connection)
[13:17:52] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:20:46] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:cd86:7de:f671:cc73)
[13:20:55] *** Joins: merrinx (~merrinx@dhcp2894-stud.wifi.uit.no)
[13:22:12] *** Quits: wyfnt (~wyfnt1232@103.214.137.74) (Quit: Leaving)
[13:23:30] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:4c90:9dff:b681:4dc7) (Ping timeout: 260 seconds)
[13:23:47] *** Quits: vboykox (~user@95.134.34.68) (Ping timeout: 256 seconds)
[13:23:49] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[13:25:42] *** Joins: vboykox (~user@138-63-134-95.pool.ukrtel.net)
[13:29:10] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:29:46] *** Joins: aradesh (~aradesh@user/aradesh)
[13:30:58] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 260 seconds)
[13:31:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:32:51] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 256 seconds)
[13:33:36] *** Joins: Sadale (~Sadale@user/sadale)
[13:36:13] *** Quits: foul_owl (~kerry@94.140.8.194) (Ping timeout: 240 seconds)
[13:36:35] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 256 seconds)
[13:36:49] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[13:40:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:43:14] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1)
[13:44:12] *** Joins: crankslider (~slidercra@user/slidercrank)
[13:44:30] *** Quits: hecanjog2 (~hecanjog@2a01:4f9:6a:5326::2) (Quit: WeeChat 3.0)
[13:44:46] *** Joins: hecanjog (~hecanjog@2a01:4f9:6a:5326::2)
[13:44:59] *** Joins: Elladan (~elladan@user/elladan)
[13:47:31] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[13:49:05] *** Joins: foul_owl (~kerry@71.212.133.174)
[13:49:14] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[13:52:07] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[13:54:25] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[13:56:25] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[13:57:28] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:57:30] *** Joins: mrig (~mrig@user/mrig)
[14:01:11] *** Joins: cryptone1tor (~nico@24.28.108.183)
[14:01:21] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:01:45] *** Joins: gonogo_ (~gonogo@167.88.62.87)
[14:02:03] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[14:02:20] *** Joins: Sadale (~Sadale@user/sadale)
[14:02:33] *** Joins: skyfall9 (~skyfall@user/skyfall)
[14:02:33] *** Joins: sunny934 (~sunny93@wireguard/tunneler/sunny93)
[14:03:09] *** Joins: cust (amaama@blackbox.amaama.org)
[14:03:17] *** Joins: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at)
[14:03:24] *** Joins: gdarko (~me@dg.mk)
[14:03:25] *** Quits: MrC (~Ben@mrbenc.net) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[14:03:25] *** Joins: MrC (Ben@mrbenc.net)
[14:03:27] *** Joins: Nadalle (~elladan@user/elladan)
[14:03:34] *** Joins: jack_rabbit (~knusbaum@23.249.37.254)
[14:03:37] *** Joins: haniaF (~haniaF@83.24.223.148.ipv4.supernova.orange.pl)
[14:03:41] *** Joins: cursey_ (~cursey@user/cursey)
[14:04:06] *** Joins: [RMS] (~rs@genoce.org)
[14:04:24] *** Joins: sham1_ (~sham1@212-146-44-107.aboa.net)
[14:04:29] *** Joins: towel_ (~towel@user/towel)
[14:04:42] *** Joins: dansan_ (~daniel@75.81.148.51)
[14:05:14] *** Joins: Dreg- (~Dreg@fr33project.org)
[14:05:26] *** Joins: Fleck (~fleck@user/fleck)
[14:05:29] *** Joins: ai (nukedclx@shell.k4be.pl)
[14:05:31] *** Joins: novns_ (~novns@user/novns)
[14:05:41] *** Joins: HisShadow_ (~HisShadow@user/hisshadow)
[14:06:00] *** Joins: jmpeax_ (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[14:06:01] *** Joins: Tordek_ (tordek@triton.blinkenshell.org)
[14:06:04] *** Joins: pi0_ (~default@23.95.234.10)
[14:06:04] *** Joins: gjvc_ (~gjvc@user/gjvc)
[14:06:04] *** Joins: thesemic1lons (~thesemico@user/thesemicolons)
[14:06:05] *** Joins: vancz_ (~vancz@user/vancz)
[14:06:09] *** Joins: nop (~Murray@89.109-247-180.customer.lyse.net)
[14:06:11] *** Joins: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[14:06:12] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[14:06:13] *** Joins: jiffe1 (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[14:06:17] *** Joins: g2anj_ (~v@58.228.230.4)
[14:06:23] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[14:06:24] *** Joins: pooryori1k (~pooryoric@87-119-174-173.tll.elisa.ee)
[14:06:26] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[14:06:29] *** Joins: joev1 (~joev@user/joev)
[14:06:29] *** Joins: alch_ (~alch@151.34.67.233)
[14:06:33] *** nop is now known as Guest1160
[14:06:37] *** Joins: ZedHedTe1 (~ZedHedTed@pool-173-76-96-161.bstnma.fios.verizon.net)
[14:06:41] *** Joins: mikoto-c1 (~mikoto-ch@84.199.144.235)
[14:06:44] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[14:06:47] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:06:57] *** Joins: robyndrake (~robyndrak@154.16.118.240)
[14:07:08] *** sudden is now known as Guest3567
[14:07:15] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[14:07:17] *** Joins: inlight_ (~thomas@82.221.128.46)
[14:07:21] *** robyndrake is now known as Guest5214
[14:08:48] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:08:52] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:09:07] *** Joins: elemongw_ (~elemongw@20.107.36.50)
[14:09:09] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[14:09:23] *** Joins: Sadale (~Sadale@user/sadale)
[14:10:02] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:2efb:49eb:5abc:71c2:a5ba)
[14:10:10] *** Joins: \o\ (~i.am@177.16.50.140)
[14:10:40] *** Joins: TheCoffeMaker_ (~TheCoffeM@200.126.129.149)
[14:11:02] *** Quits: foul_owl (~kerry@71.212.133.174) (*.net *.split)
[14:11:02] *** Quits: Elladan (~elladan@user/elladan) (*.net *.split)
[14:11:02] *** Quits: crankslider (~slidercra@user/slidercrank) (*.net *.split)
[14:11:02] *** Quits: inlight (~thomas@user/inlight) (*.net *.split)
[14:11:02] *** Quits: knusbaum (~knusbaum@23.249.37.254) (*.net *.split)
[14:11:02] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (*.net *.split)
[14:11:02] *** Quits: alch (~alch@151.34.67.233) (*.net *.split)
[14:11:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (*.net *.split)
[14:11:02] *** Quits: DSee (~DSee@173.237.207.12) (*.net *.split)
[14:11:02] *** Quits: novns (~novns@user/novns) (*.net *.split)
[14:11:02] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[14:11:02] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (*.net *.split)
[14:11:02] *** Quits: silky (~silkworks@ctrl-c.club) (*.net *.split)
[14:11:02] *** Quits: cryptonector (~nico@24.28.108.183) (*.net *.split)
[14:11:02] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (*.net *.split)
[14:11:02] *** Quits: csrf (~csrf@user/csrf) (*.net *.split)
[14:11:02] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (*.net *.split)
[14:11:02] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (*.net *.split)
[14:11:02] *** Quits: moose (~moose@user/moose) (*.net *.split)
[14:11:02] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[14:11:02] *** Quits: joev (~joev@user/joev) (*.net *.split)
[14:11:02] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[14:11:02] *** Quits: Flecks (~fleck@user/fleck) (*.net *.split)
[14:11:02] *** Quits: mrec (~markus@sundtek.de) (*.net *.split)
[14:11:02] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[14:11:02] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[14:11:02] *** Quits: kubrickdave (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (*.net *.split)
[14:11:02] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[14:11:02] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[14:11:02] *** Quits: skyfall (~skyfall@user/skyfall) (*.net *.split)
[14:11:02] *** Quits: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net) (*.net *.split)
[14:11:02] *** Quits: haniaF_ (~haniaF@83.24.223.148.ipv4.supernova.orange.pl) (*.net *.split)
[14:11:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[14:11:02] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[14:11:02] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[14:11:02] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[14:11:02] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[14:11:02] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[14:11:02] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[14:11:02] *** Quits: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: overrider (~overrider@user/overrider) (*.net *.split)
[14:11:03] *** Quits: Dreg (~Dreg@fr33project.org) (*.net *.split)
[14:11:03] *** Quits: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net) (*.net *.split)
[14:11:03] *** Quits: gdarko_ (~me@dg.mk) (*.net *.split)
[14:11:03] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[14:11:03] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[14:11:03] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[14:11:03] *** Quits: ntwk (~ntwk@user/ntwk) (*.net *.split)
[14:11:03] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[14:11:03] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[14:11:03] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[14:11:03] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[14:11:03] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[14:11:03] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[14:11:03] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (*.net *.split)
[14:11:03] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[14:11:03] *** Quits: cust_ (amaama@blackbox.amaama.org) (*.net *.split)
[14:11:03] *** Quits: robyn (~robyndrak@user/robyndrake) (*.net *.split)
[14:11:03] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[14:11:03] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[14:11:03] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[14:11:03] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (*.net *.split)
[14:11:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[14:11:03] *** Quits: towel (~towel@user/towel) (*.net *.split)
[14:11:03] *** Quits: gonogo (~gonogo@167.88.62.87) (*.net *.split)
[14:11:03] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[14:11:03] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (*.net *.split)
[14:11:03] *** Quits: nukedclx (~ai@shell.k4be.pl) (*.net *.split)
[14:11:03] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[14:11:03] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[14:11:03] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[14:11:03] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[14:11:03] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[14:11:03] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[14:11:03] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[14:11:03] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[14:11:03] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[14:11:03] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[14:11:03] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[14:11:03] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[14:11:03] *** Quits: cyphics (~cyphix@user/cyphics) (*.net *.split)
[14:11:03] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[14:11:03] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[14:11:03] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[14:11:03] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (*.net *.split)
[14:11:03] *** Quits: pi0 (~default@user/pi0) (*.net *.split)
[14:11:03] *** Quits: Tordek (~tordek@triton.blinkenshell.org) (*.net *.split)
[14:11:03] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[14:11:03] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[14:11:03] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[14:11:03] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[14:11:03] *** Quits: eletrotupi (~eletrotup@user/eletrotupi) (*.net *.split)
[14:11:03] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[14:11:03] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[14:11:03] *** Quits: les_ (~whome@user/les) (*.net *.split)
[14:11:03] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (*.net *.split)
[14:11:03] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[14:11:03] *** Quits: ntdll_ (~ntdll@shion.saiban.me) (*.net *.split)
[14:11:03] *** Quits: aesin_ (~aesin@81.211.127.107) (*.net *.split)
[14:11:03] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[14:11:03] *** Quits: koollman (~samson_t@user/koollman) (*.net *.split)
[14:11:03] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[14:11:03] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[14:11:03] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[14:11:03] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[14:11:03] *** elemongw_ is now known as elemongw
[14:11:04] *** Nadalle is now known as Elladan
[14:11:04] *** skyfall9 is now known as skyfall
[14:11:06] *** sunny934 is now known as sunny93
[14:12:09] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[14:12:14] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[14:12:24] *** Joins: DavidMilestone69 (~DavidMile@182.64.6.188)
[14:12:34] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[14:14:13] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 256 seconds)
[14:14:40] *** Maxdaman1us is now known as Maxdamantus
[14:15:35] *** Quits: merrinx (~merrinx@dhcp2894-stud.wifi.uit.no) (Quit: WeeChat 3.4)
[14:16:12] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[14:16:12] *** Joins: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net)
[14:16:12] *** Joins: DSee (~DSee@173.237.207.12)
[14:16:12] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[14:16:12] *** Joins: silky (~silkworks@ctrl-c.club)
[14:16:12] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[14:16:12] *** Joins: moose (~moose@user/moose)
[14:16:12] *** Joins: mrec (~markus@sundtek.de)
[14:16:12] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[14:16:12] *** Joins: s1b1 (~s1b1@user/s1b1)
[14:16:12] *** Joins: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de)
[14:16:12] *** Joins: overrider (~overrider@user/overrider)
[14:16:12] *** Joins: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net)
[14:16:12] *** Joins: shachaf (~shachaf@user/shachaf)
[14:16:12] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[14:16:12] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[14:16:12] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[14:16:12] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:16:12] *** Joins: abraham (~abraham@143.244.185.86)
[14:16:12] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[14:16:12] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[14:16:12] *** Joins: lowin (~lowin@user/lowin)
[14:16:12] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[14:16:12] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[14:16:12] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[14:16:12] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[14:16:12] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[14:16:12] *** Joins: justGhost (~justache@user/justache)
[14:16:12] *** Joins: cehteh (~ct@git.pipapo.org)
[14:16:12] *** Joins: sebito91 (~sborza@45.55.74.66)
[14:16:12] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[14:16:12] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[14:16:12] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[14:16:12] *** Joins: blinky42 (~quassel@user/blinky42)
[14:16:12] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[14:16:12] *** Joins: Spydar007 (~spydar007@user/spydar007)
[14:16:12] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[14:16:12] *** Joins: eletrotupi (~eletrotup@user/eletrotupi)
[14:16:12] *** Joins: n1000 (~n1000@user/n1000)
[14:16:12] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[14:16:12] *** Joins: andjjj23_ (~irc@107.170.228.47)
[14:16:12] *** Joins: les_ (~whome@user/les)
[14:16:12] *** Joins: corelax (~corelax@user/corelax)
[14:16:12] *** Joins: ntdll_ (~ntdll@shion.saiban.me)
[14:16:12] *** Joins: aesin_ (~aesin@81.211.127.107)
[14:16:12] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[14:16:12] *** Joins: koollman (~samson_t@user/koollman)
[14:16:12] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[14:16:12] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[14:16:12] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[14:16:12] *** Joins: flynn (~mcbloch@user/flynn)
[14:16:50] *** Joins: crankslider (~slidercra@user/slidercrank)
[14:17:01] *** Joins: cyphics (~cyphix@user/cyphics)
[14:17:04] *** DavidMilestone69 is now known as DavidMilestone-n
[14:17:49] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[14:18:06] *** Joins: ntwk (~ntwk@user/ntwk)
[14:18:06] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[14:18:20] *** Joins: foul_owl (~kerry@71.212.133.174)
[14:18:29] *** Joins: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net)
[14:19:00] *** imm__ is now known as im_
[14:19:07] *** im_ is now known as imm_
[14:23:37] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[14:24:11] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:24:22] *** Joins: coruja (~coruja@user/coruja)
[14:25:30] *** Joins: Zenton (~user@user/zenton)
[14:29:02] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:29:16] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:30:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:32:10] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[14:32:56] *** Joins: System_Error (~SystemErr@user/systemerror)
[14:33:29] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:33:29] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[14:34:11] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[14:34:23] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[14:34:41] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:36:16] *** pooryori1k is now known as yoric
[14:36:20] *** yoric is now known as pooryorick
[14:37:25] *** Quits: alch_ (~alch@151.34.67.233) (Ping timeout: 240 seconds)
[14:38:56] *** Joins: Klinda (~superleag@user/klinda)
[14:39:25] *** Joins: alch (~alch@151.68.146.160)
[14:46:15] *** Joins: Emet-Selch (~haise01@user/haise01)
[14:46:31] *** Emet-Selch is now known as haise01
[14:46:37] *** Quits: inlight_ (~thomas@82.221.128.46) (Ping timeout: 240 seconds)
[14:49:49] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[14:52:08] *** haise01 is now known as Azem
[14:54:27] *** Quits: DavidMilestone-n (~DavidMile@182.64.6.188) (Ping timeout: 256 seconds)
[14:54:36] *** Joins: lightningwright (~lightning@user/lightningwright)
[14:54:47] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[14:55:01] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Ping timeout: 256 seconds)
[14:55:02] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:55:09] *** Joins: cassepipe (~Thunderbi@81-66-251-102.rev.numericable.fr)
[14:56:41] *** Quits: cassepipe (~Thunderbi@81-66-251-102.rev.numericable.fr) (Client Quit)
[14:57:02] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[14:58:53] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:59:23] <DavidMilestone> Can someone explain this concept to me?
[14:59:23] <DavidMilestone> https://bpa.st/3MLA
[14:59:49] *** Joins: kts (~kts@103.73.237.62)
[15:00:57] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:07:30] *** Quits: lightningwright (~lightning@user/lightningwright) (Remote host closed the connection)
[15:07:49] *** Joins: lightningwright (~lightning@user/lightningwright)
[15:08:00] <fizzie> Don't print pointers with %d. Not sure what there's specifically to explain. Pointer arithmetic is defined in terms of units of the pointed-to type, so incrementing an `int *` "moves" it by one `int`, while incrementing an `int (*)[5]` moves it by one `int[5]`.
[15:08:14] *** Quits: kts (~kts@103.73.237.62) (Quit: Konversation terminated!)
[15:09:58] <fizzie> ,cc int arr[5], *p = arr, (*q)[5] = &arr; p++; q++; printf("arr %p, p %p, q %p", (void *) arr, (void *) p, (void *) q); // the context
[15:10:00] <candide> fizzie: arr 0x7fffffffe2f0, p 0x7fffffffe2f4, q 0x7fffffffe304
[15:10:05] <DavidMilestone> Yep, that's what I wanted to confirm. I'd never seen the `int (*)[5]` format until now.
[15:10:27] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[15:11:07] <DavidMilestone> &arr and *arr were initially the same addresses, right?
[15:11:14] <DavidMilestone> I mean, &add, and arr
[15:11:19] <DavidMilestone> &arr and arr*
[15:11:33] <fizzie> Yes. Same address, different type.
[15:11:38] <DavidMilestone> Ah
[15:12:01] <DavidMilestone> So can I say that doing &arr makes q point to the whole array
[15:12:40] <fizzie> Yes. And strictly speaking `arr` also refers to the whole array. It's just that expressions with an array type are in most contexts converted into a pointer to the array's first element, or &arr[0].
[15:13:10] <fizzie> (The exceptions being `sizeof` and the unary & operator.)
[15:13:14] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[15:13:54] <DavidMilestone> Got it. Also, if there were another `int *` as the lvalue, then on doing q++, p++ - we would have gotten the same address right?
[15:15:38] <fizzie> That part I didn't quite follow. Did that mean if q and p were both `int *`s? If so, yes.
[15:16:52] <DavidMilestone> Yes
[15:18:49] <DavidMilestone> Another question: what would be the result if it were `int **(q)[5]` ?
[15:18:49] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[15:19:46] <fizzie> With the parentheses that way, that's `int **q[5]`, aka an array of 5 pointers to pointers to int. You couldn't increment it, since it's an array.
[15:20:12] <DavidMilestone> Ah
[15:20:32] <fizzie> If it was `int (**q)[5]` (a pointer to a pointer to an array of 5 ints), incrementing it by one would move it by one `int (*)[5]` aka one pointer, but you couldn't point it at `arr` in the first place, you'd need an intermediate pointer object to point at.
[15:20:51] <fizzie> ,english int **(p)[5]; int (**q)[5];
[15:20:52] <candide> fizzie: Does not compute; I only understand valid C11 code.
[15:21:18] <fizzie> Hmm, doesn't like the (legal) redundant parentheses it seems.
[15:21:20] <fizzie> ,english int **p[5]; int (**q)[5];
[15:21:21] <candide> fizzie: Declare `p` as an array of 5 elements of pointer to pointer to int and then declare `q` as a pointer to pointer to an array of 5 elements of int.
[15:21:35] <DavidMilestone> Wow, I love this explanation.
[15:22:21] <DavidMilestone> So it always moves by one unit of "pointed-to-type" right?
[15:22:24] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:22:55] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[15:23:17] <DavidMilestone> If it's int (**q)[5], it moves by one (*q)[5]. If it's int (***q)[5] - it moves by one (**q)[5].
[15:24:05] <fizzie> Yes. `p++;` (where the value isn't used) is the same as `p = p + 1;`, and the definition of adding a pointer and an integer is: if the pointer points at the N'th element of an array of the relevant type, then the result will point at the N+1'th element.
[15:24:26] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 252 seconds)
[15:25:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:25:16] <DavidMilestone> Correct. Thank you so much for this amazing explanation.
[15:27:11] *** Quits: foul_owl (~kerry@71.212.133.174) (Ping timeout: 252 seconds)
[15:28:08] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:28:09] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:cd86:7de:f671:cc73)
[15:29:46] *** Joins: argonautx (~argonautx@i5E86735B.versanet.de)
[15:30:16] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:01] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:cd86:7de:f671:cc73) (Ping timeout: 240 seconds)
[15:31:04] *** Joins: csrf (~csrf@user/csrf)
[15:31:39] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: inlight_ (~thomas@82.221.128.46)
[15:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:43:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:2efb:49eb:5abc:71c2:a5ba) (Ping timeout: 250 seconds)
[15:43:58] *** Quits: LuKaRo (~LuKaRo@p200300dfa72f4b3100000000000001f9.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:46:55] *** sham1_ is now known as sham1
[15:51:12] <DavidMilestone> I'm trying to implement a similar program (wrt structures) using a union. https://bpa.st/KTHA but the output is not correct. I don't know what I'm doing wrong here.
[15:51:53] *** Joins: katsuragi (katsuragi@tilde.institute)
[15:55:18] <DavidMilestone> https://bpa.st/R4ZQ this is what I implemented using a structure.
[15:55:19] <DavidMilestone> This is what I'm trying to do with a union. https://bpa.st/R4ZQ
[15:56:03] <DavidMilestone> https://bpa.st/BHFA is the second link. My bad.
[15:56:31] *** Joins: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[15:57:30] <ChoHag> A union's members are access used a struct-like syntax but they are not structs.
[15:57:55] <ChoHag> All members of a union have the same memory address.
[15:58:40] <DavidMilestone> Yeah, I know that we can only access one member at a time. I'm not sure how to dynamically allocate space for a union. And I'm trying to print the total amount for now.
[15:58:48] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[15:58:53] <ChoHag> &p[n].price == &p[n].qty so first you fill an int-sized blob with the price, then you fill the same int-sized blob with the quantity.
[15:59:28] <ChoHag> Oh well I guess since you're reading them straight out they won't interfere with each other
[15:59:43] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:59:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:00:09] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:2a6:96e7:82a0:9aab:fe7f)
[16:00:50] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[16:00:52] <DavidMilestone> `&p[n].price == &p[n].qty` I don't understand this line.
[16:00:59] <ChoHag> What's wring with it then?
[16:01:24] <DavidMilestone> The output ends after the price input prompt
[16:01:25] *** Quits: lightningwright (~lightning@user/lightningwright) (Ping timeout: 268 seconds)
[16:03:15] <ChoHag> Buffered?
[16:04:10] <DavidMilestone> A newline in the output and the program stops running...
[16:04:17] <sham1> I'll make a guess and guess that the input prompt is a scanf
[16:04:22] <sham1> Which will lead to problems
[16:04:24] <DavidMilestone> nope
[16:04:31] <DavidMilestone> I ditched scanf today
[16:04:37] <sham1> Okay good
[16:04:43] <sham1> That's very good actually
[16:04:43] <DavidMilestone> After I was convinced that it's a bad habit
[16:05:55] <sham1> Then it's something else
[16:06:25] <DavidMilestone> Am I supposed to write `&product.price` in sscanf?
[16:08:32] <DavidMilestone> It works now
[16:08:43] <DavidMilestone> But I'm not sure why...
[16:12:02] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:2a6:96e7:82a0:9aab:fe7f) (Ping timeout: 240 seconds)
[16:12:05] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[16:14:47] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[16:15:04] *** Quits: savolla (~quassel@84.44.28.28) (Remote host closed the connection)
[16:15:30] *** Joins: pulse (~pulse@user/pulse)
[16:16:02] *** Quits: mikoto-c1 (~mikoto-ch@84.199.144.235) (Quit: mikoto-c1)
[16:17:15] <DavidMilestone> https://bpa.st/EB7Q
[16:17:15] <DavidMilestone> The value of `temp_product_name` isn't getting printed. What have I done wrong here?
[16:18:37] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[16:20:30] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Quit: leaving)
[16:21:08] <Neui[m]> You never write to `temp_product_name`.
[16:21:21] <fizzie> Those `strcpy`s would appear to be the wrong way around, judging from the rest.
[16:21:40] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[16:22:27] <DavidMilestone> What's the correct method then?
[16:22:49] <fizzie> It's a reasonable function to use, it's just that it's strcpy(dest, src), not strcpy(src, dest).
[16:23:46] <DavidMilestone> Oh okay
[16:24:54] *** Joins: wyfnt (~wyfnt1232@103.214.137.74)
[16:25:03] <DavidMilestone> Is the rest of the code correct w.r.t the standard norms?
[16:27:34] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[16:33:02] *** Joins: orbifx (~Thunderbi@orbitalfox.eu)
[16:33:24] <orbifx> ehlo
[16:34:02] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[16:34:49] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[16:38:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cd96:474c:cc93:ce17)
[16:38:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cd96:474c:cc93:ce17) (Changing host)
[16:38:21] *** Joins: skapata (~Skapata@user/skapata)
[16:39:44] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Quit: Client closed)
[16:40:53] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[16:41:51] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.4)
[16:48:56] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[16:50:52] *** Joins: Charadon (~Charadon@155.138.164.183)
[16:55:45] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[16:57:48] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[16:57:49] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Client Quit)
[17:01:01] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[17:01:20] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[17:01:35] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:09:23] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:b100:660e:389f:deb)
[17:09:30] *** Joins: sabry (~sabry@197.37.49.72)
[17:12:25] *** Joins: kts (~kts@103.73.237.4)
[17:13:06] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:cd86:7de:f671:cc73) (Ping timeout: 260 seconds)
[17:14:28] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:14:54] <silky> strcpy() is probably thinking in (portable) assembler: MOV DST, SRC
[17:16:00] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:39f1:cd12:5ec6:c7c1) (Quit: Leaving)
[17:16:13] <orbifx> silky: ?
[17:16:33] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:17:06] <sham1> Well it's moving to a destination from a source, but in a loop
[17:18:32] *** Joins: caze (~caze@user/caze)
[17:20:25] <silky> exactly
[17:21:30] <silky> sometimes it bothers me, as i have to change my mental syntax when reading back code, i'd have preferred "strcopy the source to the dest"
[17:22:39] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[17:22:42] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Remote host closed the connection)
[17:23:24] *** Joins: meator (~meator@user/meator)
[17:24:00] <sham1> Well it's consistent with things like memcpy, memmove and such
[17:24:35] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:6907:7874:261b:1cc8)
[17:24:55] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:25:10] *** Joins: cosimone (~user@93-47-228-191.ip115.fastwebnet.it)
[17:25:13] <fizzie> It's also consistent with, you know, the assignment operator.
[17:25:18] <fizzie> (`dst = src;`.)
[17:25:39] <sham1> That too
[17:26:22] <sham1> `src =: dst;`, although I suppose using an arrow there might be even clearer
[17:26:50] <sham1> If one is to think about how a source-expression-first assignment would look
[17:27:03] *** jiffe1 is now known as jiffe
[17:27:06] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[17:27:06] <fizzie> Just use arrows, then it's clear which way things are going.
[17:27:25] <fizzie> `x → y;` could be equivalent to `y ← x;`.
[17:27:26] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Remote host closed the connection)
[17:27:41] <clarity> fizzie->meow()
[17:28:05] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-79.cspire.com)
[17:28:31] <fizzie> Now I'm wondering if there's any inconsistent copy-ish functions in the standard. There's definitely a lot of `copy(from, to);` functions outside in "third-party" code. But even `va_copy` is in (dest, src) order.
[17:30:46] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Ping timeout: 245 seconds)
[17:32:28] *** joev1 is now known as joev
[17:33:08] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:33:19] <ZenWalker> howto compare float with zero?
[17:34:00] <Earnestly> epsilon
[17:38:31] *** Joins: hornbill (~hornbill0@111.92.77.217)
[17:39:39] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[17:40:03] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[17:40:15] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 256 seconds)
[17:40:16] *** Quits: Spydar007 (~spydar007@user/spydar007) (Quit: Quit)
[17:41:29] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[17:42:06] *** Joins: lightningwright (~lightning@user/lightningwright)
[17:43:03] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[17:43:41] *** Joins: seninha (~seninha@user/seninha)
[17:44:38] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[17:46:05] *** Joins: Spydar007 (~spydar007@user/spydar007)
[17:46:33] *** Quits: orbifx (~Thunderbi@orbitalfox.eu) (Ping timeout: 250 seconds)
[17:46:35] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[17:46:39] <fizzie> Just don't use FLT_EPSILON or DBL_EPSILON for that. Just because it has the word (letter?) epsilon in it doesn't mean that's what it's for.
[17:47:55] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[17:49:00] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:49:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:49:57] *** Joins: wroathe (~wroathe@user/wroathe)
[17:53:34] <roxlu> hey, a bit offtopic, but how would you rotate logs when you creat a file logger? E.g. I want to create a new log file for each day. I could check the day each time I log something but that seems a bit much. Do you maybe have a suggestion?
[17:53:56] *** Joins: orbifx (~Thunderbi@orbitalfox.eu)
[17:54:59] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 256 seconds)
[17:55:39] *** Joins: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676)
[17:55:44] <trenka> install logrotate
[17:57:36] <roxlu> yeah was thinking about that, might be the best solution
[17:59:25] <Earnestly> logrotate has problem of not being able to store logs forever, so people workaround it by using high rotation counts
[17:59:41] <Earnestly> But for logging of little things I use svlogd
[17:59:52] <Earnestly> Has rotation built in
[18:00:24] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:01:24] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[18:01:38] *** Joins: JanC (~janc@user/janc)
[18:02:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[18:02:12] *** Joins: SudoBash (~SudoBash@45.43.99.99)
[18:02:43] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[18:05:59] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.72) (Remote host closed the connection)
[18:08:15] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[18:08:35] *** Quits: cosimone (~user@93-47-228-191.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[18:09:01] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[18:09:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:10:33] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[18:12:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:13:03] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[18:14:59] *** Quits: ekathva (~ekathva@2001:999:50:cab1:3235:c247:f7c8:bce3) (Quit: Leaving)
[18:16:29] *** Quits: inlight_ (~thomas@82.221.128.46) (Quit: WeeChat 3.3)
[18:17:00] *** Joins: pulse (~pulse@user/pulse)
[18:18:41] *** Quits: orbifx (~Thunderbi@orbitalfox.eu) (Ping timeout: 245 seconds)
[18:19:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:21:13] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 250 seconds)
[18:21:28] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130) (Read error: Connection reset by peer)
[18:22:35] *** imm__ is now known as imm_
[18:25:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:25:31] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-79.cspire.com) (Read error: Connection reset by peer)
[18:25:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:25:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:25:42] *** Joins: wroathe (~wroathe@user/wroathe)
[18:27:09] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d)
[18:27:18] *** Joins: Left_Turn (~Matthew@2a00:23c8:5f92:1801:80f1:f70f:75be:3480)
[18:27:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:28:45] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[18:28:58] *** Quits: libc (~archer@user/tessio) (Quit: WeeChat 3.4)
[18:29:01] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[18:30:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:31:49] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:32:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:32:49] *** Joins: inlight (~thomas@82.221.128.46)
[18:32:49] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[18:32:49] *** Joins: inlight (~thomas@user/inlight)
[18:33:45] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 256 seconds)
[18:35:27] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[18:36:37] *** cross_ is now known as cross
[18:36:38] *** Quits: alch (~alch@151.68.146.160) (Ping timeout: 250 seconds)
[18:37:06] *** Quits: SudoBash (~SudoBash@45.43.99.99) (Quit: Connection closed)
[18:38:42] *** Joins: alch (~alch@151.68.131.52)
[18:39:44] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[18:41:11] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:43:14] *** Joins: meator (~meator@user/meator)
[18:43:21] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[18:46:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:47:57] *** Quits: vboykox (~user@138-63-134-95.pool.ukrtel.net) (Ping timeout: 240 seconds)
[18:48:24] *** Joins: r1d1 (~tom@0543dbad.skybroadband.com)
[18:50:08] *** Joins: vysn (~vysn@user/vysn)
[18:51:32] <r1d1> there's an article called "C Is Not a Low-level Language: Your computer is not a fast PDP-11" (https://queue.acm.org/detail.cfm?id=3212479) in which the author says that hardware has changed so much since C was designed that a lot of magic is required at the hardware level to simulate what C expects. I'm wondering if this is true of ARM processors as well? Particularly those found in simple single-board computers like the raspberry pi
[18:51:35] <candide> Title of r1d1's link: C Is Not a Low-level Language - ACM Queue
[18:52:59] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[18:54:15] <vysn> its a lowish language
[18:54:28] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[18:55:45] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-103.cspire.com)
[18:56:07] *** Azem is now known as haise01
[18:56:15] <r1d1> personally, what the article misses (imo) is that a fast pdp-11 is exactly what I want, hence why I'm wondering if the ARM processors are more simple in that way
[18:56:26] *** Joins: ferdna (~ferdna@user/ferdna)
[18:56:52] *** Parts: Left_Turn (~Matthew@2a00:23c8:5f92:1801:80f1:f70f:75be:3480) (Leaving)
[19:00:10] <Earnestly> You'll have find a non-ISO compiler if you want C
[19:03:20] <r1d1> for the pdp-11? well I'm just asking in theory really, wondering if C is still a low-level language for ARM processors if their architecture is simpler or more traditional
[19:05:30] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[19:05:37] <pragma-> there's a counter-point article to that ACM article somewhere
[19:06:24] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[19:06:24] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-103.cspire.com) (Read error: Connection reset by peer)
[19:08:16] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:4a12:1d56:537b:22cc) (Ping timeout: 250 seconds)
[19:09:28] *** Joins: crashrep (~crashrep@user/crashrep)
[19:09:39] <roxlu> thansk Earnestly I'll have look
[19:10:25] <clarity> I don't think C ever was a low level language
[19:10:34] *** Joins: katsuragi (katsuragi@tilde.institute)
[19:11:00] <roxlu> I'm also wondering, when I log something like: `printf("%s [%s] %s", entry->date, entry->file, entry->message)` is there a way to make sure every `entry->message` is printed at the same column/position ?
[19:12:15] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:449a:8386:45e2:fff0)
[19:13:28] <pragma-> you can use field widths and truncate entry->file if it exceeds the width
[19:14:09] <pragma-> with field widths, names that are shorter than the width will be padded with spaces. names longer will just exceed the width unless you manually truncate them.
[19:14:34] <ntwk> The OED defines "low-level" as "reflecting the structure of a particular kind of computer; specifically in which each instruction corresponds to a single instruction in machine language."
[19:15:30] <ntwk> By that definition, C is, and always was, some measure away.
[19:15:38] <roxlu> pragma-: ok thanks, that does mean that I have to set a field width for each item right?
[19:15:49] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:b100:660e:389f:deb) (Ping timeout: 250 seconds)
[19:16:37] <pragma-> just the ones that have variable lengths
[19:18:42] *** Joins: SudoBash (~SudoBash@45.43.99.99)
[19:19:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[19:19:48] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:4f50:b971:96fe:56ef)
[19:20:44] <roxlu> ok thanks, I think I'll use that.
[19:23:02] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[19:26:27] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[19:29:11] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[19:32:48] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:32:54] *** Quits: sabry (~sabry@197.37.49.72) (Quit: Client closed)
[19:34:21] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[19:34:41] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:449a:8386:45e2:fff0)
[19:37:26] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:449a:8386:45e2:fff0) (Ping timeout: 245 seconds)
[19:39:37] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 240 seconds)
[19:40:30] *** Joins: rgrinberg (~textual@187.223.115.137)
[19:41:57] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-11.cspire.com)
[19:43:21] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:46:15] *** Joins: epony (~epony@user/epony)
[19:56:17] *** Joins: uskerine (~uskerine@109.190.78.188.dynamic.jazztel.es)
[19:56:50] <uskerine> I always forget this, if I do this: int myarray[6];   how can I initialize the array to 0s at the same time of defining the array?
[19:56:51] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-11.cspire.com) (Read error: Connection reset by peer)
[19:57:07] <pragma-> = {0};
[19:57:11] <uskerine> and, is that dependant on the C standard? like how does it work in C89 and C99?
[19:57:20] <pragma-> it's standard
[19:57:34] <uskerine> so it will work in C89 too
[19:57:39] <uskerine> (that is just curiosity)
[19:58:06] <pragma-> yes
[19:58:17] <uskerine> thanks
[19:58:56] <SaltHillStroller> pragma-: You have a link the counter? I'm interested
[19:59:42] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[20:00:37] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:02:03] <pragma-> SaltHillStroller: https://www.yodaiken.com/2021/05/21/your-computer-is-a-fast-pdp-11-and-more-on-c-the-c-standard-and-computer-architecture/
[20:02:15] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:03:22] <pragma-> r1d1: you may be interested in ^
[20:03:44] <r1d1> ah brilliant, thank you pragma-!
[20:06:31] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 250 seconds)
[20:07:15] <NRK> r1d1: IIRC the original article also claimed that virtual memory was to keep C programmers happy. which isn't true because virtual memory predates C and were used on lisp machines (a language which doesn't have raw pointers).
[20:08:54] *** Joins: inlight (~thomas@157.35.15.83)
[20:08:54] *** Quits: inlight (~thomas@157.35.15.83) (Changing host)
[20:08:54] *** Joins: inlight (~thomas@user/inlight)
[20:13:33] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[20:14:11] *** Joins: mahmutov (~mahmutov@5.176.14.188)
[20:14:49] *** Quits: mahmutov (~mahmutov@5.176.14.188) (Client Quit)
[20:15:34] *** Joins: mahmutov (~mahmutov@5.176.14.188)
[20:15:49] *** Joins: magla (~gelignite@55d43657.access.ecotel.net)
[20:15:56] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[20:19:07] <SaltHillStroller> pragma-: Thanks, very interesting
[20:21:38] <pragma-> np
[20:22:04] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-8539-66fb-194-3daf.fixed6.kpn.net)
[20:25:19] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[20:25:22] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 260 seconds)
[20:27:10] *** Joins: bdax (~tom@0543dbad.skybroadband.com)
[20:27:29] *** Quits: r1d1 (~tom@0543dbad.skybroadband.com) (Read error: Connection reset by peer)
[20:28:08] *** Joins: inlight (~thomas@82.221.128.46)
[20:28:08] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[20:28:08] *** Joins: inlight (~thomas@user/inlight)
[20:31:09] *** Joins: ekathva (~ekathva@2001:999:50:cab1:d271:1874:582c:870e)
[20:31:23] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-8539-66fb-194-3daf.fixed6.kpn.net) (Ping timeout: 256 seconds)
[20:32:45] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:59] *** Quits: ekathva (~ekathva@2001:999:50:cab1:d271:1874:582c:870e) (Remote host closed the connection)
[20:35:57] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) (Remote host closed the connection)
[20:36:34] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-25.cspire.com)
[20:39:42] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d)
[20:40:46] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[20:41:51] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[20:42:23] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 256 seconds)
[20:42:30] *** Joins: inlight (~thomas@82.221.128.46)
[20:42:30] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[20:42:30] *** Joins: inlight (~thomas@user/inlight)
[20:44:27] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[20:45:08] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-25.cspire.com) (Read error: Connection reset by peer)
[20:45:19] *** Joins: Xeroine (~Xeroine@user/xeroine)
[20:45:31] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:4f50:b971:96fe:56ef) (Remote host closed the connection)
[20:45:48] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:b126:2fa5:7642:598c)
[20:48:03] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[20:48:48] *** Quits: Valeria (~Valeria@user/valeria) (Quit: Textual IRC Client: www.textualapp.com)
[20:49:25] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[20:49:53] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[20:50:05] *** cryptone1tor is now known as cryptonector
[20:56:03] *** Joins: tiotags (~tiotags@user/tiotags)
[20:58:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[21:01:32] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[21:02:31] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[21:05:03] *** Joins: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi)
[21:06:40] *** Joins: Everything (~Everythin@37.115.210.35)
[21:08:15] *** Joins: terminalpusher (~terminalp@2a01:586:c811:1:5c46:8c99:ea68:5e78)
[21:11:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:ed3c:cb5a:50ec:f83d) (Ping timeout: 240 seconds)
[21:12:01] *** Quits: hornbill (~hornbill0@111.92.77.217) (Remote host closed the connection)
[21:21:16] *** Joins: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net)
[21:23:43] *** Joins: freakazoid343 (~matt@35.136.233.205)
[21:24:05] *** Joins: Akiva (~Akiva@user/Akiva)
[21:24:15] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[21:24:19] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:24:19] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[21:25:22] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[21:25:28] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[21:25:30] <sonny> What can be placed between the type and function keyword? E.g. for the function `int main()`, can something be put between int and main?
[21:25:47] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[21:25:47] *** Quits: exocom (~exocom4@217-180-232-30.sycmilaa.metronetinc.net) (Quit: Leaving)
[21:26:10] *** Quits: terminalpusher (~terminalp@2a01:586:c811:1:5c46:8c99:ea68:5e78) (Remote host closed the connection)
[21:26:32] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:449a:8386:45e2:fff0) (Ping timeout: 240 seconds)
[21:26:45] *** Quits: argonautx (~argonautx@i5E86735B.versanet.de) (Quit: Leaving)
[21:26:57] <caze> function keyword
[21:27:01] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 240 seconds)
[21:30:18] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Client Quit)
[21:30:34] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[21:30:48] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[21:31:38] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[21:32:21] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:32:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:32:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:33:02] *** Quits: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[21:33:06] <caze> sonny: Type qualifiers and function specifiers.
[21:33:23] <sonny> thanks
[21:33:38] <caze> sonny: And you mean identifer, not keyword.
[21:33:48] <sonny> I was trying to figure out how the calling covention things are allowed in windows
[21:34:11] <caze> Calling convention is non-standard.
[21:34:17] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 256 seconds)
[21:36:05] <sonny> oh
[21:36:51] *** Quits: SudoBash (~SudoBash@45.43.99.99) (Quit: writing a bot to report all wordpress sites for gdpr violations because you all suck)
[21:37:57] *** Joins: Betal (~Betal@user/betal)
[21:39:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:41:05] *** Joins: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi)
[21:43:22] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:d81a:67aa:24b1:1817) (Quit: fe23)
[21:44:41] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[21:45:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:48:17] *** Joins: rgrinberg (~textual@187.223.115.137)
[21:48:22] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[21:48:35] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Ping timeout: 250 seconds)
[21:49:04] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Quit: Left)
[21:50:26] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:52:46] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Client Quit)
[21:53:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com)
[21:53:59] *** Quits: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676) (Quit: Leaving)
[21:54:05] <fizzie> Also more tokens of the type specifier can go there. Well, not as one of the standard forms of main. But in `int unsigned foo(void);` or `int long bar(void);`. And some storage-class specifiers (typedef, extern, static), though placing there anywhere "other than at the beginning of the declaration specifiers is an obsolescent feature." (C11 6.11.5)
[21:54:40] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[21:54:49] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:59:40] *** Parts: eletrotupi (~eletrotup@user/eletrotupi) (WeeChat 3.4)
[21:59:42] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[22:00:09] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[22:01:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:02:21] *** Joins: nebu (~user@user/wavion)
[22:02:23] <agoodm> so last night we worked out that I have a test case which causes LibRaw to generate an image output based largely on uninitialized memory.  Today I've figured out that all of the 'uninitialized' memory appears to *always* be nulls.  I was kind of expecting uninitialized memory to be less consistent?
[22:02:24] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:03:01] <agoodm> certainly previously I managed to leak uninitialized memory from a single process -> multiple request system and got contents of previous requests?
[22:03:39] <ChoHag> Depends. New pages are often allocated by copying a page of zeros.
[22:03:58] <agoodm> wouldnt valgrind then say it was initialized though?
[22:03:58] <fizzie> Well, in that case. But if it's a one-shot program that's only ever allocating "fresh" memory (and then exiting), getting zeroes is pretty expected.
[22:04:09] <fizzie> No, because it wasn't initialized by the program.
[22:05:46] <agoodm> im confused... The test case creates an image which triggers valgrind to say an if depends on uninitialized memory, tracing through the code yesterday I found that its mallocing a buffer of a certain size but then running out of input data to fill said buffer and processing uninitialized memory into the output.  But today I've found its always nulls
[22:06:08] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it) (Quit: brb)
[22:06:38] <ChoHag> The processing might cause it to ignore those bytes if it knows they've not been written but it might read them into a buffer or something first.
[22:06:54] <fizzie> There's nothing inconsistent about (under specific circumstances) uninitialized memory containing consistently zeroes.
[22:07:01] <agoodm> this is 1 process -> 1 output.  My only previous experience is 1 process -> multiple inputs/outputs and the uninit memory I leaked there was 'interesting'
[22:07:01] <fizzie> The point is just that it's not a property you can rely on.
[22:07:17] *** Joins: Guest27 (~Guest27@188.243.43.145)
[22:07:25] <fizzie> So memcheck will treat all memory returned from a `malloc` call as uninitialized.
[22:07:27] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it)
[22:07:31] <ChoHag> If you want to shut valgrind up you can replace the malloc call with calloc which does zero-out the memory returned.
[22:07:41] <ChoHag> I'm pretty sure that's standard not os/implementation-dependent.
[22:07:58] <fizzie> But of course the bytes must have *some* values, and if it's new pages allocated to the process, they can't exactly be memory from other processes either.
[22:08:00] <agoodm> im trying to work out if the fact ive discovered this behaviour is 'interesting' - ie can I leak memory with it
[22:08:51] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 256 seconds)
[22:09:02] <fizzie> Leak information, you mean? (Leaking memory generally refers to not releasing resources, instead.)
[22:09:17] <agoodm> so am I seeing nulls because something else is 'clearing' the memory? or am I seeing nulls because im just not happening across other data?
[22:09:27] <agoodm> leak information; yes; sorry
[22:09:34] <ChoHag> You're seeing zeros because the memory you got had zeros in it.
[22:10:36] <agoodm> so hypothetically if I made a vm which had just barely enough memory to manage (rather than the one I am running at the minute with more than plenty) and then re ran my test which is running the test case in a tight loop and md5sum the output I might see some variation?
[22:11:00] <ChoHag> Possibly. Depends on the kernel.
[22:11:08] <ChoHag> And the C library.
[22:11:33] <fizzie> It's unlikely to have anything to do with the *rest* of the system, because giving one process pages that contain data from others would be not exactly security-conscious.
[22:11:40] *** Joins: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676)
[22:11:51] <agoodm> 5.11.0-46-generic - ie ive got an infinite while loop running that testcase, then md5summing the output across 4 cores on this monster box, but not seeing any variation at the minute.  This is running in a VM
[22:12:18] <ChoHag> PRobably not, because of what fizzie said.
[22:12:21] <ChoHag> But possibly.
[22:13:15] <fizzie> Just because the contents are always zero in your specific circumstances, though, doesn't make the program any more correct. The same code might be used in a different context (for example, to process several images by a single execution of the program, if applicable to your case) which might change the outcome.
[22:13:59] <agoodm> yeah; its certainly a bug which I will report as such, im just trying to work out if I can get it to do anything 'interesting'
[22:14:35] <agoodm> I know for example that google is running this software to convert raw images... They have invited me to try and leak memory from their sandbox
[22:15:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2895-9d6c-4909-5f81.res6.spectrum.com)
[22:15:51] <ChoHag> Outsourced QA?
[22:16:00] <agoodm> well via bug bounty
[22:16:10] <ChoHag> So they don't even have to pay you for your work?
[22:16:42] <agoodm> I've fuzzed various software that they use and found corner cases which leaked memory from their systems before
[22:17:07] <agoodm> the last one I found looked very promising, but they deduced that the memory I was leaking related to my own request *cries*
[22:17:15] <ChoHag> You're doing god's work, son.
[22:17:20] <ChoHag> And by god I do of course mean Google.
[22:17:29] <fizzie> Well, it's got a lot of the same letters.
[22:17:37] <agoodm> well indeed
[22:17:52] <agoodm> its a hobby for sure, but i guess im learning new stuff
[22:18:09] <agoodm> ie this time im actively trying to figure out what/if im leaking data so I can go with a more concrete case
[22:18:30] <ChoHag> These days you can pretty safely assume newly allocated memory is empty.
[22:18:39] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[22:18:42] <ChoHag> IF it's been allocated to that process before it MIGHT have something interesting it.
[22:18:55] *** Joins: inlight (~thomas@82.221.128.46)
[22:18:55] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[22:18:55] *** Joins: inlight (~thomas@user/inlight)
[22:18:56] <ChoHag> Better to look for pointers hanging around after they're freed.
[22:19:26] <ChoHag> Or walking off the end.
[22:19:43] <agoodm> as in buffer over reads?
[22:20:11] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[22:20:30] *** Joins: inlight (~thomas@user/inlight)
[22:21:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[22:21:05] <ChoHag> I guess.
[22:21:15] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[22:21:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:21:30] *** Joins: ASUS (~ASUS@user/ASUS)
[22:21:54] <pinheadmz> can someone help me understand this line?         hsk_dns_rr_t rr = { .type = HSK_DNS_OPT };
[22:22:09] <pinheadmz> I dont understand the curly braces or the expression beginning with a dot
[22:22:41] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[22:22:52] <fizzie> It's a designated initializer.
[22:23:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:23:03] <fizzie> ,cc struct foo { int x, int y; }; struct foo rr = { .y = 123 };
[22:23:04] <candide> fizzie: error: expected identifier or '(' before 'int'
[22:23:08] <ZenWalker> I search and search... but I can see easy way to compare float to 0
[22:23:09] <fizzie> ,cc struct foo { int x, y; }; struct foo rr = { .y = 123 };
[22:23:12] <candide> fizzie: no output: rr = {x = 0, y = 123}
[22:23:22] <fizzie> pinheadmz: It does ^ the above.
[22:23:26] *** Quits: mahmutov (~mahmutov@5.176.14.188) (Ping timeout: 260 seconds)
[22:23:27] <pinheadmz> fizzie ahhh thanks
[22:23:43] *** Parts: ASUS (~ASUS@user/ASUS) (Leaving)
[22:24:14] <agoodm> ChoHag, So why can you safely assume that newly allocated memory is empty nowadays?
[22:24:16] <vdamewood> ZenWalker: can?
[22:25:20] *** Quits: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676) (Quit: Leaving)
[22:25:32] <ChoHag> Because script kiddies found out that sometimes it had interesting stuff in it and closing that loophole was easy when virtual memory came along.
[22:25:45] <ZenWalker> I can't find tutorial to do this job, the condition 'if (varfloat == 0)' shows warning
[22:25:52] *** Quits: Guest27 (~Guest27@188.243.43.145) (Quit: Client closed)
[22:26:17] <gl> u
[22:26:23] <gl> oops, sorry
[22:26:31] <ChoHag> ZenWalker: Change it to something else that isn't potentially incorrect.
[22:26:53] *** Joins: ASUS (~ASUS@user/ASUS)
[22:27:10] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 260 seconds)
[22:28:04] *** Joins: oxfuxxx (~oxfuxxx@2a01:cb18:5c0:cb00:ccd4:ea7:e733:c5f8)
[22:28:40] <vdamewood> ZenWalker: So, what's the warning, and what's the problem?
[22:28:42] *** Joins: drbeco (~beco@2804:351c:dd00:9600:7e60:24d6:7e4a:7676)
[22:31:07] *** Joins: Akuli2 (~Akuli@82-203-163-139.bb.dnainternet.fi)
[22:31:09] *** Quits: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi) (Killed (NickServ (GHOST command used by Akuli2)))
[22:31:11] *** Akuli2 is now known as Akuli
[22:31:14] *** Joins: mahmutov (~mahmutov@37.155.28.224)
[22:32:17] *** Joins: semeion (~semeion@user/semeion)
[22:32:55] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:449a:8386:45e2:fff0)
[22:33:14] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[22:34:55] *** Quits: alch (~alch@151.68.131.52) (Read error: Connection reset by peer)
[22:34:57] *** Quits: freakazoid343 (~matt@35.136.233.205) (Ping timeout: 250 seconds)
[22:35:16] <ZenWalker> https://github.com/sc0w/phosh/blob/head_Wbad-function-cast/src/monitor/head.c#L601
[22:35:18] <ZenWalker> ../src/monitor/head.c:601:7: warning: cast from function call of type 'float' to non-matching type 'int' [-Wbad-function-cast]
[22:35:55] <ZenWalker> no, it isnt the warning, wait...
[22:36:49] <ZenWalker> ../src/monitor/head.c:601:36: warning: comparing floating-point with '==' or '!=' is unsafe [-Wfloat-equal]
[22:36:55] <ZenWalker> this is the warning
[22:37:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[22:37:12] <ChoHag> Don't compare your floating-point value with == or != then.
[22:38:14] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[22:38:28] <ZenWalker> yes, I know, that is the question, how to compare to 0 ?
[22:39:03] *** Joins: alch (~alch@151.34.213.206)
[22:39:25] <ChoHag> Floating point numbers are (often) inexact. Equality comparisons are almost always incorrect and should check that the value in question is within a certain distance of the desired value.
[22:39:48] <fizzie> How about instead of rounding and comparing whether the result is equal to 0, you use matching <= and >= comparisons on the result of `fmodf`.
[22:39:56] *** Joins: mrig (~mrig@user/mrig)
[22:40:01] <fizzie> That's presumably what `roundf(...) == 0` is supposed to do.
[22:40:49] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[22:40:56] <fizzie> Assuming width, height and scale are all nonnegative, a simple `fmodf(width, scale) <= 0.5f` or `fmodf(width, scale) < 1.f` or something along those lines might be accomplishing the desired operation.
[22:41:07] <ASUS> torvalds says "nothing better than C"
[22:41:09] <ASUS> is he right
[22:41:18] *** Joins: vysn (~vysn@user/vysn)
[22:41:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:41:45] <ChoHag> Linux only uses C so in that sense yes, it uses nothing better than C.
[22:42:03] <ChoHag> And make. And probably sh/bash.
[22:42:19] <ChoHag> Whether they're better than C is up for debate but they're usually written in it.
[22:43:34] <ChoHag> Nice attempt to troll tho.
[22:44:19] <ZenWalker> fizzie: thanks
[22:44:47] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[22:48:09] <Xeroine> Hello, I get that you're supposed to put "break;" to break out of the switch statement after the tested value matches one of the case values but for example here https://bpa.st/7ASA why does "case 2" get executed if I input 1 as value for cmd? shouldn't it be ignored since cmd is 1 and not 2?
[22:49:01] <ASUS> a switch statement will keep executing cases until it reaches a break
[22:49:19] <ASUS> you need to but a break in the case 1 block
[22:49:35] *** Quits: wyfnt (~wyfnt1232@103.214.137.74) (Quit: Leaving)
[22:49:49] <ChoHag> What, exactly, do you get?
[22:49:52] <fizzie> Or another perspective on it: `case` labels are just like regular labels. The cases aren't in any way distinct. You're just jumping to a specific point in the switch body, and then continuing execution as normal.
[22:50:09] <ChoHag> Because whatever it is you get about break is not correct.
[22:50:45] <Xeroine> ChoHag: well if I put 1 then it prints "Hello" and "Hello2"
[22:51:24] <ChoHag> You can think of "switch X" as "if (X == 1) goto case 1; else if (X == 2) goto case 2; else if ..." and "break" as "goto };".
[22:51:57] *** Quits: bdax (~tom@0543dbad.skybroadband.com) (Remote host closed the connection)
[22:52:05] *** Joins: somlis (~somlis@user/somlis)
[22:52:19] <Xeroine> oh
[22:52:23] <ChoHag> Without that "goto };", nothing's going to go to }.
[22:52:26] <ASUS> Xeroine, also, your main method return type is int, but you don't return anything
[22:52:35] <Xeroine> it's just an example
[22:52:37] <ASUS> with warnings enabled you might get an error
[22:52:54] <ASUS> try void main :)
[22:52:58] <Xeroine> yeah
[22:53:10] <Xeroine> anyways thanks everyone
[22:53:13] <ASUS> also programs should return an int tho if you're in unix
[22:53:17] <fizzie> Reaching the } that terminates `main` is specifically allowed as an exception from the general rule.
[22:53:22] <fizzie> It is equivalent to returning zero.
[22:53:24] <ASUS> oh
[22:53:30] <fizzie> (Since C99 onwards, anyway.)
[22:53:54] <Xeroine> haha I did not know that
[22:54:13] <ASUS> I was tought ANSI C
[22:54:17] <ASUS> not C99
[22:54:27] <ASUS> c89 I think
[22:54:39] <ASUS> ie K&R book C
[22:54:40] <ChoHag> Xeroine: You should turn all warnings on and ideally into errors, especially while you're learning.
[22:55:06] <Xeroine> I guess yea
[22:55:15] <ASUS> -Wall?
[22:55:19] <ChoHag> -Wall will not turn on all warnings, of course, because nothing could be that simple.
[22:55:21] <fizzie> Obligatory standards reference, C11 5.1.2.2.3p1: "--; reaching the } that terminates the `main` function returns a value of 0."
[22:55:33] *** Joins: bdax (~tom@0543dbad.skybroadband.com)
[22:55:38] <ASUS> wow
[22:55:40] <ASUS> cool
[22:56:17] <fizzie> It's a little annoying that C99 *added* that bit, but removed the implicit `int` type, because it would have made the oft-quoted "minimal" C program `main(){}` legal otherwise.
[22:56:45] <fizzie> As it stands, in C89 it's missing a return statement, and in C99 it's missing a type specifier. :/
[22:56:57] <ASUS> “object-oriented programming is an exceptionally bad idea which could only have originated in California.” - Edsger Dijkstra
[22:57:09] <ChoHag> Yeah but they gave us acid too.
[22:57:10] <ASUS> I'd willing to place my bets on Edsger
[22:57:51] <ASUS> you can formally prove non OOP programs I think
[22:57:56] <ChoHag> Dijkstra leans somewhat towards old man shouts at cloud sometimes.
[22:59:07] <ASUS> but he did create Dijkstra's algo
[22:59:20] <ASUS> shortest path
[22:59:29] <ChoHag> He did a little more than that.
[22:59:34] <ASUS> yes I know
[22:59:41] <ASUS> lots of research
[22:59:45] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[23:00:05] <slact[m]> Dijkstra's lament
[23:00:26] <slact[m]> and the celebrated production Dijkstra's Hamlet
[23:00:27] <ChoHag> *Go to* Dijkstra's lement.
[23:00:36] <ChoHag> Bah! Lament.
[23:00:38] <ASUS> C has a goto statement right
[23:00:48] <ChoHag> It has a few.
[23:00:56] <slact[m]> yeah, i use goto all the time
[23:01:04] <ASUS> GOTO CONSIDERED HARMFUL
[23:01:26] <ASUS> once you use goto, proving your program becomes much harder
[23:01:35] <slact[m]> how else are ya gonna write zero-cost reentrant coros in C?
[23:01:56] <BtbN> error handling without goto is a massive pain. As long as you only ever jump forwards, it's fine.
[23:02:03] <ChoHag> Proof is left as an exercise for the reader.
[23:02:25] <SaltHillStroller> I've often seen that goto is acceptable as long it's only forwards, but I don't understand what distinction that makes
[23:02:38] <BtbN> No Spagetth
[23:02:47] <ChoHag> SaltHillStroller: Nonsense cargo culting.
[23:02:49] *** Joins: DavidMilestone (~DavidMile@182.64.6.188)
[23:03:08] <ChoHag> Goto wherever you wish. Mostly just fail though.
[23:03:25] <BtbN> You can build incredibly non-obviousy nonsense with random gotos
[23:03:39] <BtbN> like, jumping into the middle of a loop from outside or some shit
[23:03:40] <ChoHag> Yeah but don't do that.
[23:03:48] <slact[m]> oh nevermind, you actually don't need gotos for knuth-style coros in C
[23:04:04] <slact[m]> case LINE: is enough
[23:04:12] <ChoHag> That's just goto with syntax.
[23:04:30] <slact[m]> Mr. Duff would like a word...
[23:04:55] <ChoHag> As long as he leaves his strange contraptions at the door.
[23:05:06] <ChoHag> They give me the willies.
[23:06:43] <ChoHag> I have 83 gotos and 7 switches in 4388 lines of code. Some of them are backwards and one or two are into some other block.
[23:06:43] <fizzie> Yeah, there's nothing anyone could possibly complain about in https://ideone.com/eBRkNG because all the gotos only jump forward. ;)
[23:08:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[23:11:38] <slact[m]> i actually have no problem with that, insofar as this is goto's fault. you could be equally redundant by splitting up those labels into functions and that would make it no better
[23:12:20] *** Joins: argonautx (~argonautx@i5E86735B.versanet.de)
[23:12:29] *** Quits: lightningwright (~lightning@user/lightningwright) (Ping timeout: 252 seconds)
[23:12:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:14:29] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:15:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:15:37] *** Quits: dld (~davidlowr@2601:197:600:1210:3c77:90a4:f938:18fe) (Ping timeout: 240 seconds)
[23:16:50] *** Joins: dld (~davidlowr@2601:197:600:1210:5c9e:f676:ddc7:b9f7)
[23:17:24] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:812f:5f2:565:d856)
[23:17:49] <ChoHag> I think Dijkstra's point was mostly that although goto is the foundation of all control constructs, that doesn't mean it has to be the only control construct.
[23:18:14] <sham1> Dijkstra was all in on the "structured programming" thing, and for a good reason IMO
[23:18:29] <sham1> And of course the GO TO he was talking about isn't the same goto as in C and such
[23:18:30] <ChoHag> Yeah. Because it's bloody obvious.
[23:18:57] *** Quits: bdax (~tom@0543dbad.skybroadband.com) (Remote host closed the connection)
[23:19:11] <sham1> Well it's bloody obvious to us, because we're used to it. Was it so obvious back then for a bunch of assembly programmers? Maybe not as much
[23:19:14] <ChoHag> It's basically the same argument as "don't use globals for everything".
[23:19:15] *** Joins: bdax (~tom@0543dbad.skybroadband.com)
[23:19:20] <sham1> Or even those of FORTRAN
[23:20:04] <ChoHag> I think even Lovelace and Babbage understood the basic idea of an encapsulated procedure.
[23:20:52] <sham1> Well sure, functions have existed in mathematics for… a long time. I think the non-obvious part of not doing globals and doing GOTOs was efficiency
[23:21:10] <sham1> Could a compiler match the efficiency of a GOTO? Yes. But was that known at the time? Maybe not
[23:21:23] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:449a:8386:45e2:fff0) (Ping timeout: 256 seconds)
[23:21:37] <sham1> Err, could a compiler lower a structured program to being as efficient as one with GOTO
[23:22:14] *** Joins: ferdna (~ferdna@user/ferdna)
[23:22:35] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[23:22:54] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[23:22:56] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[23:27:49] *** Quits: bionade24 (~bionade24@2a03:4000:33:45b::1) (Remote host closed the connection)
[23:29:18] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[23:29:52] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[23:31:00] *** Quits: DavidMilestone (~DavidMile@182.64.6.188) (Quit: Client closed)
[23:31:03] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[23:31:56] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:32:20] <uskerine> what does a continue inside an if which is inside a while loop do?
[23:32:26] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 245 seconds)
[23:32:34] <uskerine> while { if { .... continue; } .... }
[23:32:42] <ChoHag> Jump to the end of the loop and consider going again.
[23:33:03] <uskerine> ok
[23:33:03] *** Quits: oxfuxxx (~oxfuxxx@2a01:cb18:5c0:cb00:ccd4:ea7:e733:c5f8) (Remote host closed the connection)
[23:35:09] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[23:36:23] *** Joins: lightningwright (~lightning@user/lightningwright)
[23:37:23] * ski . o O ( "Sacrificing the calf of flexibility on the altar of reliability" by Peter J. Denning in 1976 at <http://dl.acm.org/ft_gateway.cfm?id=807704&type=pdf> )
[23:37:37] <ski> BtbN : i did a loop, with a `goto' out of it, and one back into it, at one point ..
[23:38:19] *** Joins: zacts (~zacts@user/zacts)
[23:38:45] <ski> (.. although, i first imagined the algorithm in my head, then wrote it down as a flowchart, and finally translated it into using as much structured programming (`if'-`else' and `for') as possible)
[23:39:03] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:39:04] <SamuelMarks> hi
[23:39:49] <SamuelMarks> How do I decide what size chunk to get? `read(client_fd, response, 2048)` is 2048 but not sure why 2048 is a good number
[23:40:12] <sham1> Well it's a power of two, those are always good choices
[23:40:36] * SamuelMarks will be malloc/realloc the same number (or more specifically the returned number of bytes) to his `response` char*
[23:40:51] <SamuelMarks> sham1: sure but why not 4096? - Or some much larger number?
[23:41:10] *** zacts is now known as z4kpi
[23:41:16] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Ping timeout: 250 seconds)
[23:41:31] <sham1> *shrug* well, 4096 would be nice as well because it's one page-width
[23:43:24] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[23:43:27] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:43:52] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 250 seconds)
[23:44:24] <Inline> and why not 8192 ?
[23:44:28] <Inline> lol
[23:45:57] <SamuelMarks> sham1 - So should I use `sysconf(_SC_PAGESIZE)` so that I don't hard code that? - I'm trying to avoid magic numbers here!
[23:46:04] * ski . o O ( 8128 )
[23:47:01] <sham1> Well maybe. Or whatever the maximum number one can fit in a pipe
[23:47:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:48:44] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:48:44] <SamuelMarks> sham1 - PIPE_BUF ?
[23:49:01] <sham1> Ye
[23:49:29] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[23:49:42] <SamuelMarks> So I should always `read` PIPE_BUF from the socket? - Hmmmmmm - that reminds me why I set my `#define STACK_SIZE` to 65535
[23:49:55] <SamuelMarks> Great to avoid magic numbers =D
[23:50:28] <SamuelMarks> Although I'm now thinking I'll always overallocate :(
[23:50:45] <sham1> Well don't over-allocate
[23:50:55] <sham1> Look at what the return value of `read` i
[23:50:56] <sham1> is
[23:51:14] *** Joins: inlight (~thomas@157.35.15.187)
[23:51:14] *** Quits: inlight (~thomas@157.35.15.187) (Changing host)
[23:51:14] *** Joins: inlight (~thomas@user/inlight)
[23:51:16] <SamuelMarks> Ignoring error handling, something like: `malloc(read(client_fd, response, PIPE_BUF))`
[23:51:27] <sham1> Yeah
[23:51:33] <SamuelMarks> neat
[23:51:42] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-8539-66fb-194-3daf.fixed6.kpn.net)
[23:52:45] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[23:53:13] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[23:53:55] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[23:54:31] *** Joins: bionade24 (~bionade24@2a03:4000:33:45b::1)
[23:56:29] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-8539-66fb-194-3daf.fixed6.kpn.net) (Ping timeout: 252 seconds)
[23:56:45] <nomagno> I kinda avoid over-allocating by trying to make my programs have very clear stances on input data format and such
[23:57:00] <nomagno> Of course that isn't always possible
[23:57:10] <SamuelMarks> nomagno - yeah but I might give this arbitrary server output to handle
[23:57:27] <nomagno> Fair
[23:57:37] <SamuelMarks> easy to DoS :P
[23:57:51] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[23:57:56] <fizzie> Meh, `malloc(read(...))` kind of implies you're going to read bytes to location X only to copy them into the newly allocated memory Y, as opposed to just directly reading them into where they need to go.
[23:58:16] *** Joins: noarb (~noarb@user/noarb)
[23:58:35] *** Quits: duds- (~duds-@user/duds) (Read error: Connection reset by peer)
[23:58:36] <SamuelMarks> fizzie - how to I just take whatever buffer is underneath and return it?
[23:58:44] <nomagno> Doesn't malloc(read(...)) have the issue of writing before allocating?
[23:58:46] <SamuelMarks> maybe copying ti first
[23:59:05] <nomagno> Unless I'm misunderstanding how functions arguments are evaluated
[23:59:56] <fizzie> nomagno: The address passed to `read` would be a temporary buffer of some sort.
[23:59:57] <SamuelMarks> nomagno - my actual code checks if it's 0 or -1 so doesn't matter, I was just asking that way
