[00:07:57] *** Joins: vicfred (~vicfred@user/vicfred)
[00:14:14] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[00:36:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[00:48:52] <arkanoid> what is slicerator?
[00:50:42] <FromDiscord> <kporika (kporika)> let settings = jester.newSettings(port=port)
[00:50:47] <FromDiscord> <kporika (kporika)> sent a long message, see http://ix.io/3Nq2
[00:59:15] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:65bb:7e4c:2cd0:965)
[01:08:58] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3Nqa
[01:09:19] <FromDiscord> <Elegantbeef> Slicerator is my iterator package with a bunch of goodies
[01:09:43] <FromDiscord> <Elegantbeef> It started off mainly for just implementing a bunch of useful iterators for openarrays, but i've since added more functionality
[01:10:03] <FromDiscord> <Elegantbeef> It now has the abillity to create closure iterators from inline and reset or peek them
[01:10:37] <FromDiscord> <mratsim> Nim v2: slicing creates openarray by default
[01:10:43] <arkanoid> evoalg, isn't "for el in mysel.toOpenArray(newlow, newhigh)" even more efficient?
[01:10:46] <FromDiscord> <mratsim> cc @Araq
[01:11:09] <FromDiscord> <Elegantbeef> Arkanoid that's what my iterator does internally
[01:11:16] <FromDiscord> <Elegantbeef> It does a 0 copy iteration over the openarray slice you want
[01:11:48] <arkanoid> good! Sure, I'm writing custom slicing view on my arrow lib right now, so I feel on the right path
[01:12:05] <arkanoid> problem is how to do pythons step aka [low:end:step]
[01:12:09] <FromDiscord> <Elegantbeef> Funny if true given until 1.6 Nim couldnt use `[]` for iterators 😀↵(@mratsim)
[01:12:17] <FromDiscord> <mratsim> I think you can just copy my view @Arkanoid
[01:12:32] <FromDiscord> <mratsim> since you will likely need to do strided slices
[01:12:52] <arkanoid> yes
[01:13:32] <FromDiscord> <mratsim> https://github.com/mratsim/constantine/blob/master/research/kzg_poly_commit/strided_views.nim
[01:14:07] <FromDiscord> <Elegantbeef> And i mean even if slicerator's `[]` is pointless there are still nice utilities there 😀
[01:14:14] <arkanoid> I've answered in #nim-science
[01:21:36] <FromDiscord> <hmmm> beefy can I play with your package with the colored ball? that seemed fun in an inim way
[01:21:57] <FromDiscord> <hmmm> or is not ready yet
[01:24:14] <FromDiscord> <IsaacPaul> Just in case anyone wants to know how to print a nim string in lldb:↵`p (char)myString.p.data`↵and so I can search it later 🙃
[01:24:28] <FromDiscord> <Elegantbeef> Colored ball?
[01:24:33] <FromDiscord> <Elegantbeef> The nimscripter  stuff?
[01:25:19] <FromDiscord> <hmmm> yes
[01:25:21] <FromDiscord> <Elegantbeef> https://www.jasonbeetham.com/snake/nicoscripter.html i mean you can play with this easily, otherwise use nimscripter and interop with your favourite graphics library be it drawim or nico
[01:25:55] <FromDiscord> <Elegantbeef> That wasnt a package i was working on i was just using nimscripter in a graphics environment to test it live
[01:26:35] <FromDiscord> <hmmm> ah ok 😊
[01:27:02] <FromDiscord> <Elegantbeef> An example program is here https://github.com/beef331/nimscripter/blob/master/examples/macrorepl/macrorepl.nim
[01:27:24] <FromDiscord> <Elegantbeef> https://streamable.com/c6farb here it is in action
[01:31:38] <FromDiscord> <hmmm> woah this is so cool
[02:07:38] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:09:23] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[02:30:21] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:39:14] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 268 seconds)
[02:52:36] *** Joins: rockcavera (~rc@192.12.114.201)
[02:52:36] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[02:52:36] *** Joins: rockcavera (~rc@user/rockcavera)
[03:41:24] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:65bb:7e4c:2cd0:965) (Remote host closed the connection)
[03:49:34] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:50:19] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[03:50:53] <FromDiscord> <ynfle> Beef, can I ask you some questions about `sigmatch.typeRel`?
[04:01:08] <FromDiscord> <Elegantbeef> sure
[04:03:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:03:38] <FromDiscord> <ynfle> It doesn't show up on the stacktrace
[04:03:53] <FromDiscord> <ynfle> Is that because it just returns the wrong result?
[04:04:46] <FromDiscord> <Elegantbeef> Yes it's doing the type comparisons for the calls, so it uses the return value
[04:04:58] <FromDiscord> <ynfle> It seems that the `typed` case return `isGeneric`. What is the "correct" return value? I think I need one that would say they are compatible types
[04:06:22] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/32d4bf352585a4fc4a6fa1bd24b270af087b0372/compiler/types.nim#L29-L43
[04:06:43] <FromDiscord> <Elegantbeef> I think the issue is in typerel it might be elsewhere
[04:07:31] <FromDiscord> <Elegantbeef> You'll need to investigate going up with the stack trace
[04:07:56] <FromDiscord> <Elegantbeef> I just assumed it came from there it might be in other places
[04:08:04] <FromDiscord> <Elegantbeef> You need to play detective to fix X doesnt work but should
[04:09:52] <FromDiscord> <ynfle> It seems it return none
[04:09:58] <FromDiscord> <ynfle> `isNone`
[04:12:49] <FromDiscord> <Elegantbeef> That's the process i take, use the stack trace to know where the problem goes and figure out why it thinks it's wrong
[04:13:13] <FromDiscord> <Elegantbeef> So then time for you to figure out why it does
[04:13:17] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Excess Flood)
[04:13:37] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[04:14:06] <FromDiscord> <ynfle> Thanks man
[04:14:16] <FromDiscord> <ynfle> Thanks individual
[04:14:19] <FromDiscord> <ynfle> Sorry
[04:16:25] <FromDiscord> <ynfle> What does `aOrig` represent the candidate match?
[04:16:30] <FromDiscord> <ynfle> (edit) "represent" => "represent,"
[04:16:41] <FromDiscord> <Elegantbeef> The actual
[04:18:03] <FromDiscord> <Elegantbeef> you can `echo aOrig, " ", formal`
[04:18:59] <FromDiscord> <ynfle> I did
[04:19:20] <FromDiscord> <ynfle> It seems like it's a candidate sym when it's a nnkclosedsymchoice
[04:21:11] <FromDiscord> <ynfle> Ok. so varargs returns isnone, while typed itself return isgeneric
[04:27:45] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:33:13] <FromDiscord> <ynfle> What is a supposed to represent? More specifically `a.flags`?
[04:34:02] <FromDiscord> <Elegantbeef> those are type flags
[04:34:08] <FromDiscord> <Elegantbeef> You can read most of the flags
[04:34:21] <FromDiscord> <Elegantbeef> it holds a bunch of information for type
[04:45:09] <FromDiscord> <ynfle> What does `tfVarargs in a.flags` mean?
[04:45:29] <FromDiscord> <Elegantbeef> `a.flags` is a bitset so if `tfVarags in a.flags`
[04:45:51] <FromDiscord> <ynfle> What would it mean if tfVarargs is in a.flags?
[04:46:21] <FromDiscord> <Elegantbeef> `a` is a varargs i assume
[04:47:15] <FromDiscord> <Elegantbeef> Ah sorry that's C style varargs
[04:47:24] <FromDiscord> <Elegantbeef> The flags have documentation
[04:47:24] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/devel/compiler/ast.nim#L505
[04:47:42] <FromDiscord> <ynfle> No. It would have kind of tyVarargs if itself was varargs
[04:48:03] <FromDiscord> <ynfle> Can I import the compiler?
[04:48:23] <FromDiscord> <Elegantbeef> Yes the compiler can be used as a library
[04:49:09] <FromDiscord> <Elegantbeef> Not that it matters for this problem
[04:49:28] <FromDiscord> <ynfle> https://play.nim-lang.org/#ix=3NqV
[04:49:52] <FromDiscord> <Elegantbeef> Well yea it's not in path
[04:49:55] <FromDiscord> <ynfle> In reply to @Elegantbeef "Not that it matters": It help with debugging enum. nim-gdb.py isn't so helpful just gives the  number not the string value
[04:50:04] <FromDiscord> <ynfle> In reply to @Elegantbeef "Well yea it's not": How do I get it in path
[04:50:06] <FromDiscord> <Elegantbeef> I mean just echo
[04:50:17] <FromDiscord> <Elegantbeef> echo works
[04:51:41] <FromDiscord> <ynfle> in gdb? How?
[04:51:51] <FromDiscord> <ynfle> echo aOrig.flags↵aOrig.flags
[04:51:56] <FromDiscord> <ynfle> This is what I get
[04:51:58] <FromDiscord> <Elegantbeef> I mean put an echo in the compiler
[04:52:08] <FromDiscord> <ynfle> RIght, but I have to recompile
[04:52:14] <FromDiscord> <ynfle> Either way I just installed using nimble
[04:52:41] <FromDiscord> <Elegantbeef> Yea but the recompile shouldnt be too long
[04:52:56] <FromDiscord> <ynfle> Ya but then i'd have to restart the debug session
[04:52:59] <FromDiscord> <Elegantbeef> `./koch temp c ./yourTestFile.nim`
[04:53:20] <FromDiscord> <Elegantbeef> Dont use a debugger
[04:54:32] <FromDiscord> <ynfle> Why? I find it helps alot
[04:54:41] <FromDiscord> <Elegantbeef> Not that i've often used a debugger anywhere, so i'm biased, there isnt any weird flow logic so printing values is more than enough
[04:55:43] <FromDiscord> <Elegantbeef> I can probably count on one hand the amount of times i've reached for a debugger 😀
[04:55:50] <FromDiscord> <ynfle> Nice
[04:56:07] <FromDiscord> <Elegantbeef> So my view is mostly swayed that thay're not overly needed
[04:57:19] <FromDiscord> <Elegantbeef> Nim's temp compiler takes like 10s t orecompile depending on what you're touching so it's bad but not horrendous to debug/test things ime
[05:00:14] <FromDiscord> <Valdar> I never use a debugger in Nim either. With echo and .repr , you can get pretty much any value you need.
[05:00:34] <FromDiscord> <ynfle> @Valdar for the compiler?
[05:01:02] <FromDiscord> <Elegantbeef> A wild valdar appears 😀
[05:01:56] <FromDiscord> <Valdar> Hey, I've appeared often 🙂
[05:02:08] <FromDiscord> <Valdar> sort of
[05:03:59] <FromDiscord> <Valdar> I just caught the tail end of the convo. I wasn't referring to the compiler specifically.
[05:05:02] <FromDiscord> <ynfle> Oh ok
[05:05:20] <FromDiscord> <ynfle> I agree about non compiler stuff, but the compiler is just too overwhelming
[05:05:51] <FromDiscord> <congusbongus> a debugger can be super useful especially in cases where the state is very hard to set up↵I've been trying to set up nim debugging, disappointed that it's not easy to set up
[05:06:25] <FromDiscord> <Elegantbeef> I'm not saying it's not useful, but i've never personally found the usage beneficial to understanding the compiler
[05:06:38] <FromDiscord> <ynfle> In reply to @congusbongus "a debugger can be": I actually had good success this time with vscode integration
[05:06:42] <FromDiscord> <Elegantbeef> Reading the little bit of comments and echoing the cases out is more than enough ime to understand it
[05:07:55] <FromDiscord> <Elegantbeef> It's a complex system. Just you're touching such a small surface area to fix these X doesnt work but should" you only need to print flags and kind
[05:08:22] <FromDiscord> <Elegantbeef> Atleast that's my view
[05:11:08] <FromDiscord> <Elegantbeef> And i know that's a shared debug process by multiple developers that work on the compiler
[05:15:47] <FromDiscord> <ynfle> Cause you guys know what's going on
[05:16:01] <FromDiscord> <Elegantbeef> I didnt know what was going on when i started
[05:18:46] <FromDiscord> <Elegantbeef> I will say if you want to have very noisey but filled of information view `import astalgo` and do `debug yourType`
[05:19:08] <FromDiscord> <Elegantbeef> Personally i find it absolutely useless but I do know some appreciate all the information being visible
[05:19:53] <FromDiscord> <ynfle> That's way to overwhelming
[05:20:03] <FromDiscord> <ynfle> Especially for such a hot path
[05:20:25] <FromDiscord> <Elegantbeef> You can limit to to a specific condition or file
[05:21:36] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NqX
[05:22:34] <FromDiscord> <ynfle> I couldn't get `conf`
[05:22:42] <FromDiscord> <ynfle> It's not a variable in scope
[05:23:03] <FromDiscord> <ynfle> and info isn't initialized
[05:24:01] <FromDiscord> <Elegantbeef> the TCandidate has `c` which is context which has `c.graph.config`
[05:25:06] <FromDiscord> <ynfle> and which info should I use
[05:25:11] <FromDiscord> <ynfle> aorig or f
[05:25:33] <FromDiscord> <Patitotective> is there some project working on _Qt_ bindings for _Nim_? or there is not?
[05:25:41] <FromDiscord> <Elegantbeef> doesnt matter in this case since they're in the same file
[05:25:59] <FromDiscord> <ynfle> In reply to @Elegantbeef "doesnt matter in this": Its nil sometimes
[05:26:39] <FromDiscord> <Rika> In reply to @Patitotective "is there some project": QML
[05:27:46] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3NqY
[05:27:57] <FromDiscord> <Elegantbeef> Well i guess disregard me
[05:28:00] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:28:14] <FromDiscord> <Patitotective> In reply to @Rika "QML": i mean qt, not qt quick↵like pyqt or pyside
[05:28:19] <FromDiscord> <Rika> No
[05:28:41] <FromDiscord> <Patitotective> :(
[05:36:30] <FromDiscord> <ynfle> Sleep time
[05:43:52] <FromDiscord> <Patitotective> 🌃
[05:51:41] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:59:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:22:31] <FromDiscord> <evoalg> for me, `print` is so much more convenient than `echo` when debugging
[06:23:43] <FromDiscord> <Elegantbeef> the topic was more along writing debugging vs debugger debugging 😀
[06:24:06] <FromDiscord> <evoalg> yep 😉
[06:24:42] <FromDiscord> <evoalg> but it's just so good I had to mention it 😄
[06:32:18] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:48:36] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:18:50] <FromDiscord> <Elegantbeef> @SirOlaf\: Could i bother you to shoot me a diff one last time for that borrow stuff, want to take a shot it 🙂
[10:07:02] <FromDiscord> <Evrensel Kişilik> why is Android SDK this bad?
[10:12:37] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[10:17:08] *** Joins: rienske (~rie@185.254.75.31)
[10:45:23] <haakon> Is there no way to return "lack of value" from a proc? Like `None` in Python or `null` in Java? It looks like the common thing is to make up an "empty" value within the return type, like the empty string. But this is not distinguishable from a legitimate value, so in other languages it would be bad practice. Hope I'm overlooking something
[10:46:28] <FromDiscord> <Elegantbeef> `std/options` or `ref T`
[10:47:31] <haakon> Oh, there is an option type :-)
[11:16:22] <PMunch> By the way, for reference or pointer types you can use nil
[11:16:57] <haakon> Yeah I noticed that. Hadn't gotten that far into the tutorials yet :-P
[11:17:22] <haakon> Naively speaking, it does seem like more of the stdlib should do this instead of returning empty strings and whatnot (like the sqlite module)
[11:19:25] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Quit: Ping timeout (120 seconds))
[11:19:46] *** Joins: Goodbye_Vincent (~Goodbye_V@freakshells.net)
[11:20:17] <FromDiscord> <Elegantbeef> Well remember that Nim also has exceptions so some of that optional stuff is done through that
[11:21:12] <haakon> Sure, but a lot seems to be done through sentinel values
[11:21:50] <FromDiscord> <Elegantbeef> Surprisingly most of what i use aside from `find` does not 😀
[11:21:54] <Amun-Ra> haakon: you can't return nil from proc foo(): string
[11:21:59] <FromDiscord> <Elegantbeef> Just an observation 😀
[11:22:19] <haakon> Good to hear, Elegantbeef :-)
[11:22:36] <haakon> Amun-Ra: yeah, it would affect the type signature
[11:25:00] <FromDiscord> <Elegantbeef> Perhaps it might be a valid change for Nim 2.0
[11:25:17] <PMunch> To do what @Elegantbeef?
[11:25:59] <FromDiscord> <Elegantbeef> Introduce options instead of constant returns in places it makes sense
[11:26:13] <PMunch> Ah right
[11:27:52] <PMunch> Hmm, is there a way to get the name mangling table in Nim?
[11:28:45] <FromDiscord> <Elegantbeef> I dont think so
[11:29:44] <PMunch> Hmm, that's annoying
[11:30:06] <PMunch> I want to wrap a C tool that outputs symbols to show the Nim symbols instead
[11:30:34] <PMunch> Hmm, how does the GDB extension do it?
[11:32:11] <FromDiscord> <Elegantbeef> \Whistles whilst pointing in the sky"
[11:34:09] <PMunch> Hmm, I guess that would be the frame define stuff
[11:48:38] <PMunch> Hmm, or maybe not
[11:56:03] <arkanoid> Apart from being runtime/compiletime are inline functions like templates?
[11:57:36] <FromDiscord> <Elegantbeef> They arent guaranteed to be inlined but for the most part yes
[12:00:18] <PMunch> {.inline.} is just giving a hint to the C compiler
[12:00:30] <PMunch> But it's smart and will inline stuff anyways
[12:01:23] <arkanoid> Thanks
[12:33:17] <PMunch> Hmm, I could potentially grep the file and then look for the closest nimfr_ call
[12:33:18] <Amun-Ra> that works kind of 'inline' in C standard, it's just a hint
[12:33:27] <PMunch> It's an ugly hack though
[12:33:39] <PMunch> Amun-Ra, it is 'inline from the C standard
[12:35:37] <arkanoid> Is there any difference between a byte and a char in nim?
[12:35:56] <Amun-Ra> yes
[12:36:03] <PMunch> Well, they're different types
[12:36:13] <FromDiscord> <Elegantbeef> No
[12:36:21] <PMunch> They're both stored the same though
[12:36:23] <Amun-Ra> let foo: byte = 'a'
[12:36:25] <Amun-Ra> ¯\(ツ)/¯﻿
[12:36:27] <FromDiscord> <Elegantbeef> They're both 8 bit
[12:36:41] <PMunch> !eval let foo: byte = 'a'
[12:36:44] <NimBot> Compile failed: /usercode/in.nim(1, 17) Error: type mismatch: got 'char' for ''a'' but expected 'byte = uint8'
[12:36:45] <FromDiscord> <Elegantbeef> A char is a distinct uint8 basically
[12:36:54] <Amun-Ra> and that is a difference
[12:36:58] <FromDiscord> <Elegantbeef> I figured you were talking about internal representation
[12:39:11] <arkanoid> Ok, but if I have to store binary data that *may* also be interpreted as string, is it better to handle it as a bytes or chars? I know I can reinterpret it at any time, but is just which one is known to be a better choice
[12:39:45] <FromDiscord> <Elegantbeef> i'd go with the string personally
[12:40:07] <FromDiscord> <vindaar> I'd go with `byte` to be honest. That's a more honest representation of what the data is you're dealing with, no?
[12:40:25] <FromDiscord> <Elegantbeef> Yea it's purely preference and how you manage it
[12:40:25] <Amun-Ra> esp. if that's a part of some interop
[12:40:26] <FromDiscord> <vindaar> unless "may" refers to "can always be"
[12:41:12] <FromDiscord> <Rika> Well what exactly is this data
[12:41:16] <FromDiscord> <Elegantbeef> Remember you can always make your own types
[12:42:49] <FromDiscord> <Elegantbeef> Knowing arkanoid it's going to be apache arrow stuff
[12:43:17] <FromDiscord> <Elegantbeef> So it's going to be data stored inside a binary buffer
[12:43:57] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[12:44:28] <FromDiscord> <Elegantbeef> I say data but i mean objects
[12:44:33] <arkanoid> Yes, the physical layout is w "variable size binary", but the logical type inside can be utf8 or binary
[12:44:43] <arkanoid> *is always
[12:47:37] <FromDiscord> <Rika> The byte sequence then
[12:47:55] <FromDiscord> <Elegantbeef> byte is probably more descriptive than `uint8` or `char`
[12:49:06] <arkanoid> Yup, thanks
[12:50:15] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:601e:b34d:f58c:b5e8)
[12:51:36] *** Parts: yassernasc (~yassernas@2804:29b8:505a:f33d:601e:b34d:f58c:b5e8) ()
[13:01:10] <FromDiscord> <mratsim> In reply to @arkanoid "Ok, but if I": If you don't use byte, I'll have to ban you: https://github.com/nim-lang/RFCs/issues/32
[13:02:58] <FromDiscord> <Elegantbeef> Lol
[13:03:30] <FromDiscord> <Elegantbeef> byte just makes the most sense when dealing with presently untyped data
[13:04:11] <FromDiscord> <Elegantbeef> I dont know if it's just my love of distincts but i feel i question whether instead of an alias it gets turned into a distinct 😛
[13:06:06] <FromDiscord> <Rika> Personally I wish Nim went with the Python distinction of representation and stringification
[13:06:27] <FromDiscord> <mratsim> pray tell
[13:06:31] <FromDiscord> <mratsim> I'm not aware of that
[13:06:50] <FromDiscord> <mratsim> `$` is stringification and `toHex` is representation no?
[13:07:03] <FromDiscord> <Rika> It’s no convention though
[13:07:16] <FromDiscord> <Rika> And in Python it’s for every type, standardised by repr and str
[13:08:22] <FromDiscord> <mratsim> oh
[13:08:29] <FromDiscord> <mratsim> I agree
[13:10:07] <FromDiscord> <mratsim> I can't believe there was a time where arrays didn't have `$`
[13:10:13] <FromDiscord> <Clonkk> A while ago I made a small package to convert between string / seq[byte] https://github.com/Clonkk/bytesequtils↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[13:10:39] <FromDiscord> <Elegantbeef> Oh boy copying data 😛
[13:11:18] <FromDiscord> <mratsim> @Clonkk, where is prepareMutation declared? https://github.com/Clonkk/bytesequtils/blob/main/src/bytesequtils.nim#L49
[13:11:20] <FromDiscord> <Evrensel Kişilik> 😱
[13:11:23] <FromDiscord> <Evrensel Kişilik> hruuuuuuuuuuuuuuuuuuuuuuuuu
[13:11:39] <FromDiscord> <Clonkk> system.nim ?↵(@mratsim)
[13:11:41] <FromDiscord> <Elegantbeef> It's a system procedure
[13:11:42] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#prepareMutation%2Cstring
[13:12:32] <FromDiscord> <mratsim> that's not true, if you do newString(len) it will automatically be \0 terminated: https://github.com/Clonkk/bytesequtils/blob/main/src/bytesequtils.nim#L54-L57
[13:12:45] <FromDiscord> <Evrensel Kişilik> In reply to @Clonkk "system.nim ? (<@570268431522201601>)": how can i setup this documentation thing on github.io?
[13:13:03] <FromDiscord> <Clonkk> Either manually or github action↵(@Evrensel Kişilik)
[13:13:10] <FromDiscord> <Evrensel Kişilik> In reply to @Clonkk "Either manually or github": 😱
[13:13:14] <FromDiscord> <Evrensel Kişilik> how?
[13:13:22] <FromDiscord> <Elegantbeef> `nim doc` generates nim docs
[13:13:36] <FromDiscord> <Evrensel Kişilik> i want to make a documentation thing for my debugger
[13:13:37] <FromDiscord> <mratsim> Thankfully the GC doesn't insult you when you do raw pointer casting between GC-ed types: https://github.com/Clonkk/bytesequtils/blob/main/src/bytesequtils.nim#L50
[13:13:44] <FromDiscord> <Elegantbeef> I did make an issue on nimble.directory since docs were not generated
[13:14:12] <FromDiscord> <Clonkk> Manually something like nimbledoc --proect src/myfile?nim --out\:docs/ and enable github pages on docs/ folder↵(@Evrensel Kişilik)
[13:14:33] <FromDiscord> <Evrensel Kişilik> In reply to @Clonkk "Manually something like nimbledoc": oh it is not a Nim thing
[13:14:34] <FromDiscord> <Clonkk> With github actions something like this https://github.com/SciNim/nimfftw3/blob/master/.github/workflows/docs.yml
[13:14:50] <FromDiscord> <Evrensel Kişilik> In reply to @Clonkk "Manually something like nimbledoc": i want to make a documentation thing for this https://github.com/rohanrhu/gdb-frontend
[13:14:55] <FromDiscord> <Clonkk> nimble doc is pretty much an alias for nim doc i think↵(@Evrensel Kişilik)
[13:15:06] <FromDiscord> <Clonkk> Then the result is static html file hosted on github
[13:15:08] <FromDiscord> <Evrensel Kişilik> In reply to @Clonkk "nimble doc is pretty": hmmmmmmmmmmmmmmmm
[13:15:20] <FromDiscord> <Elegantbeef> Nim has a doc generator built into it
[13:15:32] <FromDiscord> <Evrensel Kişilik> sooooooooooooooooooooooooo
[13:15:37] <FromDiscord> <Clonkk> Yeah it's unsafe and totally shouldn't be used for crypto or anything serious but if you just want so raw buffer passing between API it does the job↵(@mratsim)
[13:15:46] <FromDiscord> <Evrensel Kişilik> i will create a repo like "gdb-frontend-docs"
[13:15:57] <FromDiscord> <Evrensel Kişilik> and we will manage it with markdowns right?
[13:15:58] <FromDiscord> <Clonkk> I basically could have made the whole thing using `pointer`
[13:16:09] <FromDiscord> <Elegantbeef> Nim's doc gen uses RST
[13:16:11] <FromDiscord> <Evrensel Kişilik> Markdowns on Git repo
[13:16:16] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Nim's doc gen uses": hmmmmmmmmmmmmmmmm
[13:16:23] <FromDiscord> <Evrensel Kişilik> what is that?
[13:16:34] <FromDiscord> <Elegantbeef> There are things like nimibook or nimib if you want to use MD with Nim code
[13:16:39] <FromDiscord> <enthus1ast> you can use the gh-pages  branch
[13:16:40] <FromDiscord> <enthus1ast> https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site
[13:16:44] <FromDiscord> <mratsim> Last time someone did a seq[byte] -> string cast it was between a blob and an http endpoint and it crashed in the C lib :/
[13:17:00] <FromDiscord> <Clonkk> The main idea was just to be able to reconcile API that expects  `seq[byte]` with API that expects `string`↵(@mratsim)
[13:17:03] <FromDiscord> <Elegantbeef> How to mis a nu;l char
[13:17:06] <FromDiscord> <Evrensel Kişilik> i want it to be manageable with Markdowns on Git
[13:17:53] <FromDiscord> <mratsim> In reply to @Clonkk "The main idea was": for that you can use `proc foo[T:  byte:char](input: openarray[T])`↵↵For better or worse string decay in openarray[char]
[13:18:01] <FromDiscord> <Clonkk> Well yeah, It says so in the readme that it doesn't deal with null terminated stuff well and that you absolutly shouldn't interface thatwith cstring↵(@mratsim)
[13:18:36] <FromDiscord> <mratsim> in Arraymancer it's worse because I have to prefix `proc toTensor[T: not char](a: openarray[T]): Tensor[T]`
[13:19:18] <FromDiscord> <Evrensel Kişilik> soooooooooooooooooooooooooo
[13:19:19] <FromDiscord> <Evrensel Kişilik> https://github.com/rohanrhu/gdb-frontend-docs
[13:19:22] <FromDiscord> <Evrensel Kişilik> i made this
[13:19:26] <FromDiscord> <mratsim> https://github.com/mratsim/constantine/blob/master/constantine/hashes/h_sha256.nim#L350-L352↵this accepts string/seq[byte]
[13:19:55] <FromDiscord> <Clonkk> But you control your own API↵(@mratsim)
[13:20:37] <FromDiscord> <ynfle> Is there any way to print the current line and filename?
[13:21:10] <FromDiscord> <Clonkk> If you have a seq[byte] for a resizable buffer (which makes sense to use) and an API that expects a Nim string holding a buffer (so no null terminated issue) and you have no control over said API, well a dirty cast can help you
[13:21:17] <FromDiscord> <mratsim> In reply to @ynfle "Is there any way": instantiationInfo() in system.nim
[13:21:20] <FromDiscord> <Evrensel Kişilik> In reply to @ynfle "Is there any way": `LINE` and `FILE`
[13:21:41] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "`__LINE__` and `__FILE__`": that would give you the C line not the Nim line
[13:21:49] <FromDiscord> <mratsim> unless you compile with --debugger:native
[13:22:04] <FromDiscord> <mratsim> or --lineinfo and --linedir iirc
[13:22:56] <FromDiscord> <ynfle> In reply to @mratsim "instantiationInfo() in system.nim": It doens't seem to work. What should the index be?
[13:23:10] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/mvB
[13:23:31] <FromDiscord> <Elegantbeef> Or are chararrays just not allowed?
[13:23:31] <PMunch> @Evrensel_Kişilik, ooh I've been looking for a nice Gdb frontend
[13:23:49] <FromDiscord> <Elegantbeef> Their frontend is pretty snazzy
[13:24:17] <FromDiscord> <Evrensel Kişilik> In reply to @PMunch "@Evrensel_Kişilik, ooh I've been": oh 😱
[13:24:26] <FromDiscord> <Evrensel Kişilik> im glad you found it finally xD
[13:24:51] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Their frontend is pretty": thank youuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
[13:25:10] <PMunch> I mean I haven't tried it yet, but it looks neat
[13:25:13] <FromDiscord> <mratsim> you'll have cannot instantiate T I think no?
[13:25:21] <PMunch> I'll have to look into it next time I want to use GDB
[13:25:39] <FromDiscord> <ynfle> In reply to @Evrensel Kişilik "`__LINE__` and `__FILE__`": Says invalid token
[13:25:41] <FromDiscord> <Evrensel Kişilik> In reply to @PMunch "I'll have to look": sure feel free to suggest me new things
[13:25:53] <FromDiscord> <mratsim> In reply to @Elegantbeef "Not ideal i gues": we want string -> Tensor[string] not Tensor[char]
[13:25:55] <FromDiscord> <Evrensel Kişilik> In reply to @ynfle "Says invalid token": sure because they are C things xD
[13:26:02] <PMunch> A section on how to use it for Nim in the documentation? :D
[13:26:13] <FromDiscord> <ynfle> In reply to @Evrensel Kişilik "sure because they are": So it doesn't help me
[13:26:14] <FromDiscord> <Elegantbeef> Ah thought you just didnt want string in there↵(@mratsim)
[13:26:22] <FromDiscord> <mratsim> @ynfle see https://github.com/nim-lang/Nim/issues/11689
[13:26:32] <FromDiscord> <Evrensel Kişilik> In reply to @PMunch "A section on how": sure im planning to make documentation
[13:26:45] <FromDiscord> <Evrensel Kişilik> i just tried it for Nim debugging
[13:26:49] <FromDiscord> <Evrensel Kişilik> it is pretty compatible
[13:27:54] <FromDiscord> <Evrensel Kişilik> In reply to @ynfle "So it doesn't help": i don't think soo cuz you can write C in Nim
[13:28:26] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "i don't think soo": You can even write Cuda, OpenCL or Assembly
[13:29:07] <FromDiscord> <mratsim> Cuda: https://github.com/mratsim/Arraymancer/blob/master/src/arraymancer/tensor/private/p_kernels_interface_cuda.nim#L40-L71
[13:29:47] <FromDiscord> <Evrensel Kişilik> i still think C and preprocessor is the best for everything xD
[13:29:47] <FromDiscord> <mratsim> compile-time assembler: https://github.com/mratsim/constantine/blob/master/constantine/arithmetic/assembly/limbs_asm_mul_x86_adx_bmi2.nim#L73-L112
[13:30:12] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "i still think C": https://tenor.com/view/game-of-thrones-i-demand-a-trial-by-combat-tyrion-lannister-gif-16328126
[13:30:19] <FromDiscord> <Elegantbeef> Preprocessor sucks
[13:30:31] <FromDiscord> <Evrensel Kişilik> buuuuuuut im happy with being your debugger person xD i want to make it more usable for Nim debugging with special features
[13:30:38] <FromDiscord> <Elegantbeef> Do type introspection with preprocessor and i'll guarantee you'd prefer death
[13:31:13] <FromDiscord> <Elegantbeef> Can GDB even print out proper sets/enums/tagged unions?
[13:31:39] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Can GDB even print": sooooo you can use ExpressionEvaluater thing
[13:32:02] <FromDiscord> <Elegantbeef> I know they get turned into C arrays, ints, and unions in C. Dont know if it can get the accurate representation in a Nim environment
[13:32:45] <FromDiscord> <Evrensel Kişilik> this is ExpressionEvaluater https://media.discordapp.net/attachments/371759389889003532/935474759922225162/connected-expressions.png
[13:32:53] <FromDiscord> <Evrensel Kişilik> expressions are connected in that
[13:32:58] <FromDiscord> <mratsim> my eyes, they burn
[13:33:07] <FromDiscord> <mratsim> I took an arrow in the knee
[13:33:13] <FromDiscord> <mratsim> so many arrows
[13:33:24] <FromDiscord> <mratsim> seems interesting though
[13:33:28] <FromDiscord> <Elegantbeef> Yea but i mean `var a = {true, false}` isnt going display as `{true, false}`
[13:33:28] <FromDiscord> <Evrensel Kişilik> In reply to @mratsim "so many arrows": you can turn off them
[13:34:03] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Yea but i mean": soooooooo what is that? `{1, 0}`?
[13:34:13] <FromDiscord> <Elegantbeef> That'd be `0b11`
[13:34:18] <FromDiscord> <Elegantbeef> It's a bit set
[13:34:20] <FromDiscord> <Evrensel Kişilik> soooooooo
[13:34:29] <FromDiscord> <Evrensel Kişilik> is that an auto array?
[13:34:32] <FromDiscord> <Elegantbeef> It'd be the integer 3
[13:34:34] <FromDiscord> <Elegantbeef> No
[13:34:39] <FromDiscord> <Evrensel Kişilik> huh
[13:34:39] <FromDiscord> <Elegantbeef> It's a bitset
[13:34:44] <FromDiscord> <Evrensel Kişilik> i mean in C
[13:34:45] <FromDiscord> <mratsim> like C flags
[13:34:45] <FromDiscord> <Elegantbeef> You know C bitflags
[13:34:50] <FromDiscord> <Elegantbeef> Where you or constants togethers
[13:34:54] <FromDiscord> <Evrensel Kişilik> soooooooooo
[13:35:00] <FromDiscord> <Elegantbeef> It's an integer in this case
[13:35:01] <FromDiscord> <Evrensel Kişilik> idk what is that in Nim
[13:35:07] <FromDiscord> <Elegantbeef> For larger values it's an array of integers
[13:35:15] <FromDiscord> <mratsim> A = 0b1, B = 0b10, and you have A | B
[13:35:25] <Amun-Ra> for larger values you'd have to use hashset
[13:35:25] <FromDiscord> <mratsim> with A | B = 0b11
[13:35:31] <FromDiscord> <Tanguy> My Gameboy emulator based on C preprocessor for the instructions↵https://github.com/Menduist/gbmu/blob/master/instructions.c#L223↵https://github.com/Menduist/gbmu/blob/master/opcodes
[13:35:44] <FromDiscord> <Evrensel Kişilik> soooooo what is C source output of  `var a = {true, false}`?
[13:35:52] <FromDiscord> <Elegantbeef> an integer
[13:35:53] <FromDiscord> <Elegantbeef> or byte
[13:35:59] <FromDiscord> <Elegantbeef> Whatever you want to call an 8bit integer
[13:36:00] <FromDiscord> <Evrensel Kişilik> can you type it?
[13:36:06] <FromDiscord> <Evrensel Kişilik> the C line
[13:36:29] <FromDiscord> <Evrensel Kişilik> gimme C
[13:36:50] <FromDiscord> <Evrensel Kişilik> i want to C only C
[13:36:51] <FromDiscord> <Evrensel Kişilik> 😱
[13:36:58] <FromDiscord> <haxscramper> this is a bitset literal
[13:36:58] <FromDiscord> <mratsim> In reply to @Tanguy "My Gameboy emulator based": Nim is prettier: https://github.com/mratsim/glyph/blob/master/glyph/snes/opcodes.nim#L16-L32 😉
[13:37:06] <FromDiscord> <haxscramper> bool is an enum
[13:37:54] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "can you type it?": do you know the mmap bitflags? https://github.com/mratsim/photon-jit/blob/master/photon_jit/photon_osalloc.nim#L15-L19
[13:37:59] <FromDiscord> <mratsim> it's similar to this
[13:38:03] *** Joins: [R] (~rs@genoce.org)
[13:38:12] <FromDiscord> <mratsim> or chmod
[13:38:23] <FromDiscord> <mratsim> the base one are power of 2
[13:38:37] <FromDiscord> <mratsim> and 3 is ProtRead + ProtWrite
[13:38:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/MAl
[13:38:43] <Amun-Ra> mratsim: how does it perform when it comes to speed?
[13:39:05] <FromDiscord> <mratsim> In reply to @Amun-Ra "<@570268431522201601>: how does it": the emulator? Unfortunately I don't have 48 hours per day xD
[13:39:11] <FromDiscord> <Elegantbeef> Wait a minute
[13:39:20] <FromDiscord> <Evrensel Kişilik> sent a code paste, see https://play.nim-lang.org/#ix=3NsI
[13:39:34] <FromDiscord> <Elegantbeef> `N_LIB_PRIVATE tySet_tyBoolVaVACK0bpYmqIQ0mKcHfQQ atest_1 = 3;`
[13:39:37] <FromDiscord> <Elegantbeef> There you go
[13:39:41] <FromDiscord> <Elegantbeef> `typedef NU8 tySet_tyBoolVaVACK0bpYmqIQ0mKcHfQQ;`
[13:39:44] <FromDiscord> <Evrensel Kişilik> are these names unique in the universe?
[13:39:52] <Amun-Ra> mratsim: I wrote Z80 emulator and used typical 256 case switch, that'll probably be converted to jump tables
[13:39:53] <FromDiscord> <mratsim> also speed for a snes meeh, but if you want to optimize a VM here are tricks: https://github.com/status-im/nimbus-eth1/wiki/Interpreter-optimization-resources
[13:39:57] <FromDiscord> <Evrensel Kişilik> it is impossible to be always unique 😱
[13:39:59] <FromDiscord> <Elegantbeef> They're generated from a language with generics
[13:40:08] <FromDiscord> <mratsim> In reply to @Amun-Ra "<@570268431522201601>: I wrote Z80": use computed gotos.
[13:40:14] <FromDiscord> <Evrensel Kişilik> you are using my dynamic library
[13:40:18] <FromDiscord> <Evrensel Kişilik> and oh
[13:40:25] <FromDiscord> <Evrensel Kişilik> names can conflict
[13:40:38] <Amun-Ra> mratsim: mhm
[13:40:40] <FromDiscord> <Elegantbeef> Generating symbols is kinda required to map to C from Nim
[13:40:40] <FromDiscord> <Evrensel Kişilik> (edit) "can" => "may"
[13:40:46] <FromDiscord> <haxscramper> In reply to @Evrensel Kişilik "are these names unique": They use signature hash for the type IIRC
[13:40:53] <FromDiscord> <haxscramper> md5 digest of the symbol
[13:40:56] <FromDiscord> <Evrensel Kişilik> oh
[13:41:00] <FromDiscord> <Evrensel Kişilik> sooooo
[13:41:12] <FromDiscord> <Evrensel Kişilik> what if our symbols are longer than md5 hashes?
[13:41:17] <Amun-Ra> mratsim: but your code gave me an idea for case optimizations with macros
[13:41:27] <FromDiscord> <Evrensel Kişilik> 😱  THEY WILL REPEAT 😱
[13:41:28] <FromDiscord> <haxscramper> they are not cryptographically secure in any case, but I doubt you can run into collisions
[13:41:50] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "😱  THEY WILL": it appends a _1 and _2 if there is a collision
[13:41:51] <FromDiscord> <Elegantbeef> Well it'll  be fun the day someone does
[13:42:01] <FromDiscord> <mratsim> I did have collisions
[13:42:06] <FromDiscord> <Elegantbeef> Millions of lines of code compiled and no reported collisions yet
[13:42:17] <FromDiscord> <mratsim> because the compiler kept duplicating concept procs
[13:42:20] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Millions of lines of": :BANNED:
[13:42:45] <FromDiscord> <mratsim>  https://media.discordapp.net/attachments/371759389889003532/935477282573787136/79279951-783f1c80-7eaf-11ea-8d1a-0118f7e62bd8.png
[13:42:53] <FromDiscord> <Evrensel Kişilik> 😱  LEAVE ME ALONE I'M CRYING 😱
[13:43:03] <FromDiscord> <haxscramper> maybe using the name-based mangling would've been better, but in any case if there are identical symbols they will produce collisions of course
[13:43:06] <FromDiscord> <mratsim> @ElegantBeef : https://github.com/nim-lang/Nim/issues/13982
[13:43:22] <FromDiscord> <Elegantbeef> Shit you got me
[13:43:48] <FromDiscord> <Evrensel Kişilik> im crying
[13:43:49] <FromDiscord> <mratsim> 457 collisions https://media.discordapp.net/attachments/371759389889003532/935477553592958976/79350704-137bd480-7f38-11ea-8dfc-f3505c79fd17.png
[13:44:00] <FromDiscord> <Elegantbeef> Thought that's not the name mangling and more generating, no?
[13:44:03] <FromDiscord> <Evrensel Kişilik> 😱
[13:44:28] <FromDiscord> <haxscramper> the procs appear to be identical, right?
[13:44:29] <FromDiscord> <Evrensel Kişilik> why don't we give C names?
[13:44:32] <FromDiscord> <Evrensel Kişilik> 😱
[13:44:42] <FromDiscord> <Evrensel Kişilik> we can give PREFIXES
[13:44:45] <FromDiscord> <Evrensel Kişilik> oh no
[13:44:47] <FromDiscord> <haxscramper> wrt. to implementation
[13:44:49] <FromDiscord> <Evrensel Kişilik> oh nooooooooooooooooooooooooooooooooooooo
[13:44:51] <FromDiscord> <mratsim> In reply to @haxscramper "the procs appear to": they are, it's co-recursive concepts that caused this.
[13:44:58] <FromDiscord> <Evrensel Kişilik> allow us to give PREFIXES
[13:45:12] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "allow us to give": use {.exportc.} to set the name
[13:45:20] <FromDiscord> <Evrensel Kişilik> lemme add that feature to Nim
[13:45:23] <FromDiscord> <haxscramper> In reply to @Evrensel Kişilik "lemme add that feature": https://nim-lang.org/docs/manual.html#foreign-function-interface-exportc-pragma
[13:45:23] <FromDiscord> <Evrensel Kişilik> gimme the source
[13:45:26] <FromDiscord> <mratsim> use {.exportc:"my_pretty_C_name".}
[13:45:29] <FromDiscord> <haxscramper> `proc p(s: string) {.exportc: "prefix$1".} =`
[13:46:01] <FromDiscord> <Evrensel Kişilik> looooook im here for being your debugger person but you want me to add features to the language
[13:46:05] <FromDiscord> <Evrensel Kişilik> 😱
[13:46:15] <FromDiscord> <Evrensel Kişilik> In reply to @mratsim "use {.exportc:"my_pretty_C_name".}": what is this?
[13:46:19] <FromDiscord> <Evrensel Kişilik> is it prefix?
[13:46:20] <Amun-Ra> there' nimgdb
[13:46:22] <FromDiscord> <haxscramper> I bet the concept codegen replication was caused by broken generic cache that got triggered for each attempt to process concept
[13:46:29] <FromDiscord> <mratsim> In reply to @Evrensel Kişilik "what is this?": no it's completely replace
[13:46:34] <FromDiscord> <Evrensel Kişilik> 😱
[13:46:37] <FromDiscord> <haxscramper> that's my hypothesis at least
[13:46:42] <FromDiscord> <Evrensel Kişilik> soooooooooooooooo
[13:46:44] <FromDiscord> <Evrensel Kişilik> we need PREFIXES
[13:46:47] <FromDiscord> <mratsim> use $1 if you want to interpolate the proc name
[13:47:12] <FromDiscord> <mratsim> `{.exportc:"your_ad_here_$1".}`
[13:47:13] <FromDiscord> <Evrensel Kişilik> im gonna go to cry
[13:47:16] <FromDiscord> <Evrensel Kişilik> leave me alone
[13:47:16] <FromDiscord> <haxscramper> if you compile to C++ you can also use `--compileToNamespace=spc` if you want
[13:47:45] <FromDiscord> <Evrensel Kişilik> ALLOW ME TO SEND GIFS
[13:47:45] <FromDiscord> <Evrensel Kişilik> pls
[13:47:49] <FromDiscord> <Evrensel Kişilik> bots
[13:47:52] <Amun-Ra> no
[13:48:00] <FromDiscord> <Evrensel Kişilik> In reply to @Amun-Ra "no": :BANNED:
[13:48:25] <FromDiscord> <Evrensel Kişilik> 😭
[13:48:34] <FromDiscord> <Elegantbeef> Anyway the point was more talking about sets 😀
[13:48:35] <FromDiscord> <Elegantbeef> Nim has ergonomic methods of creating bitsets which map into 8bit integers in C, using each bit as a flag just like bit flags. I dont know if GDB can support pretty printing that
[13:48:46] <FromDiscord> <mratsim> or 16-bit
[13:49:04] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Nim has ergonomic methods": looooooooooooooooook i will add special things to debugger for Nim
[13:49:12] <FromDiscord> <mratsim> maybe the pascal extension can 😉
[13:49:16] <FromDiscord> <Evrensel Kişilik> but i need to list them first
[13:50:46] <FromDiscord> <Elegantbeef> Does nim's gdb script print sets nicely?
[13:50:57] <FromDiscord> <Elegantbeef> I'm a complete fool when it comes to debuggers
[13:51:32] <FromDiscord> <mratsim> I use backtrace and a lot of imagination
[13:51:46] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Does nim's gdb script": you mean that to not handle them not as C things?
[13:51:50] <FromDiscord> <Evrensel Kişilik> instead Nim things
[13:51:51] <FromDiscord> <Evrensel Kişilik> ummmmmmmmmmmm
[13:52:06] <FromDiscord> <mratsim> set are special, the rest the repr matches C
[13:52:08] <FromDiscord> <Evrensel Kişilik> (edit) "not" => ""
[13:52:17] <FromDiscord> <Evrensel Kişilik> lemme check
[13:52:19] <FromDiscord> <Evrensel Kişilik> gimme code
[13:52:29] <FromDiscord> <Elegantbeef> `var a = {true, false}`
[13:52:37] <FromDiscord> <Elegantbeef> It's going to be `3`
[13:52:37] <FromDiscord> <mratsim> true false is a bad example
[13:52:39] <FromDiscord> <mratsim> use colors
[13:52:57] <FromDiscord> <Elegantbeef> `{'a'..'z'}`
[13:53:02] <FromDiscord> <Elegantbeef> Is that better mratsim
[13:53:15] <FromDiscord> <Rika> Where are the colours smh
[13:53:19] <FromDiscord> <mratsim> sent a code paste, see https://play.nim-lang.org/#ix=3NsK
[13:53:25] <FromDiscord> <haxscramper> @Evrensel Kişilik for quick testing of the genrated code you can run nim compiler with `nim c --stacktrace=off --gc=arc --linetrace=off --nimcache=cache file.nim` and it will generate relatively clean code in the `cache` directory
[13:53:35] <FromDiscord> <haxscramper> and then you can inspect how different types are represented
[13:53:39] <FromDiscord> <Evrensel Kişilik> In reply to @haxscramper "<@!359071052397281280> for quick testing": oh
[13:53:40] <FromDiscord> <mratsim> Red is assigned 0, Blue 1 and Green 3, and so the set will be 0b11 as internal repr
[13:53:45] <FromDiscord> <Elegantbeef> why not just `-c`
[13:53:56] <FromDiscord> <mratsim> (edit) "3," => "2,"
[13:54:15] <FromDiscord> <mratsim> and {Red, BLue, Green} will be 0b111
[13:54:20] <FromDiscord> <mratsim> (edit) "BLue," => "Blue,"
[13:55:33] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3NsM
[13:55:43] <FromDiscord> <Evrensel Kişilik>  https://media.discordapp.net/attachments/371759389889003532/935480547118047232/unknown.png
[13:55:46] <FromDiscord> <Evrensel Kişilik> this
[13:55:55] <FromDiscord> <Evrensel Kişilik> what should this look like?
[13:56:12] <FromDiscord> <haxscramper> you can set specific values of the enum elements, this affects layout, you can also set `{.bitsize.}` for enum, it might also affect representation
[13:57:02] <FromDiscord> <Elegantbeef> It should look like `{Red, Blue}` ideally
[13:57:26] <FromDiscord> <Elegantbeef> `3` isnt a useful value for a collection of flags
[13:57:28] <FromDiscord> <haxscramper> there is an additional RTTI for the types IIRC in the genrated code
[13:57:29] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "It should look like": soooooooooooooo
[13:58:01] <FromDiscord> <Evrensel Kişilik> you mean `{Red, Blue}` only?
[13:58:05] <FromDiscord> <Evrensel Kişilik> not expandable?
[13:58:07] <FromDiscord> <Elegantbeef> Yes
[13:58:11] <FromDiscord> <Evrensel Kişilik> ok
[13:58:21] <FromDiscord> <Evrensel Kişilik> let me looooook
[13:58:28] <FromDiscord> <Elegantbeef> It should be the set that it'd have been declared in Nim
[13:59:26] <FromDiscord> <Evrensel Kişilik> sooooooo since it is a C source actually, how could i understand it is a special Nim thing indeed?
[13:59:54] <FromDiscord> <Elegantbeef> Not a clue, there is apparently RTTI one can use
[14:00:33] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Not a clue, there": what is RTII?
[14:01:07] <FromDiscord> <haxscramper> runtime type information, and no apparently it is not present for sets
[14:01:29] <FromDiscord> <Evrensel Kişilik>  https://media.discordapp.net/attachments/371759389889003532/935482001752997928/unknown.png
[14:01:30] <FromDiscord> <Elegantbeef> Ah nice 😀
[14:01:36] <FromDiscord> <Elegantbeef> So no can make them nice
[14:01:43] <FromDiscord> <Evrensel Kişilik> In reply to @haxscramper "runtime type information, and": how can i get that?
[14:02:35] <FromDiscord> <mratsim> I think it's fine to say that item 0, 1, 2, 12, 42 in the enum are present in the set.
[14:02:41] <FromDiscord> <Evrensel Kişilik>  https://media.discordapp.net/attachments/371759389889003532/935482296981655592/unknown.png
[14:03:08] <FromDiscord> <Evrensel Kişilik> soooooo
[14:03:15] <FromDiscord> <Elegantbeef> I guess printing it as binary or a group of which bits are on is the best one can do with what's given
[14:03:17] <FromDiscord> <Evrensel Kişilik> i need to get Nim-specific information about symbols
[14:03:43] <FromDiscord> <Evrensel Kişilik> is there something in memory
[14:03:43] <FromDiscord> <Evrensel Kişilik> or
[14:03:56] <FromDiscord> <Evrensel Kişilik> some file that includes these informations?
[14:04:32] <FromDiscord> <Evrensel Kişilik> soooo i could interpret them as Nim things
[14:09:38] <FromDiscord> <mratsim> nop, it's all optimized away so it can be fast
[14:09:53] <FromDiscord> <mratsim> but it's named tySet_tyEnum
[14:10:05] <FromDiscord> <Evrensel Kişilik> oh no
[14:10:13] <FromDiscord> <Evrensel Kişilik> 😱  THE NAME 😱
[14:10:15] <FromDiscord> <mratsim> unless they are renamed via {.exportc:....}
[14:10:17] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/devel/tools/nim-gdb.py#L413-L443
[14:10:17] <FromDiscord> <Elegantbeef> Supposedly the `nim-gdb.py` can support it
[14:10:36] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "https://github.com/nim-lang/Nim/blob/devel/tools/ni": yes
[14:10:40] <FromDiscord> <Evrensel Kişilik> THE NAMEEEEEEEEE
[14:10:52] <FromDiscord> <Evrensel Kişilik> 😱
[14:11:04] <FromDiscord> <Evrensel Kişilik> then
[14:11:09] <FromDiscord> <Evrensel Kişilik> i will check names
[14:11:11] <FromDiscord> <Evrensel Kişilik> xd
[14:11:22] <FromDiscord> <Evrensel Kişilik> soooooooooooooooooooooooo
[14:11:30] <FromDiscord> <Evrensel Kişilik> you will see Nim things in evaluater
[14:11:44] <FromDiscord> <mratsim> :banana_dance:
[14:11:58] <FromDiscord> <Evrensel Kişilik> 😱
[14:12:09] <FromDiscord> <Evrensel Kişilik> GIMME GIFS
[14:12:16] <FromDiscord> <Evrensel Kişilik> BOTS
[14:12:28] <FromDiscord> <Elegantbeef> Bots are too dumb for that
[14:12:39] <FromDiscord> <mratsim> ElegantGIF
[14:12:47] <FromDiscord> <Evrensel Kişilik> In reply to @Elegantbeef "Bots are too dumb": bad bots
[14:12:49] <FromDiscord> <Evrensel Kişilik> i dont love you
[14:12:57] <FromDiscord> <Elegantbeef> Good no one does
[14:15:21] <FromDiscord> <mratsim> mic drop
[14:15:48] <FromDiscord> <Evrensel Kişilik> soooooooooooooooooooooooooooooooooooo
[14:15:53] <FromDiscord> <Evrensel Kişilik> i will let you know when i do it
[14:19:19] <FromDiscord> <Phil> In reply to @Elegantbeef "Good no one does": I only love the things you create that save me work
[14:19:34] <FromDiscord> <Evrensel Kişilik> In reply to @Isofruit "I only love the": don't love it
[14:19:35] <FromDiscord> <Evrensel Kişilik> it is a bot
[14:19:54] <FromDiscord> <Phil> My love is free!
[14:19:58] <FromDiscord> <Phil> Viva la revolution!
[14:20:43] <FromDiscord> <Phil> Sidenote, the element client to access discord is alright, not sure I'd get used to it though
[14:20:58] <FromDiscord> <Evrensel Kişilik> In reply to @Isofruit "Sidenote, the element client": what is that?
[14:21:27] <FromDiscord> <isofruitus> This is that↵(@Evrensel Kişilik)
[14:21:54] <FromDiscord> <Phil> It's matrix's front end if I understood it in the 30 seconds I took to read over the webpage
[14:21:55] <FromDiscord> <Evrensel Kişilik> In reply to @isofruitus "This is that (<@359071052397281280>)": 😱  oh noooo i don't want more BOTS 😱
[14:22:43] <FromDiscord> <Evrensel Kişilik> how do they know Discord protocol?
[14:22:48] <FromDiscord> <Evrensel Kişilik> reverse engineering?
[14:22:55] <arkanoid> mycstring[^1] will be last char or null char?
[14:23:35] <FromDiscord> <Evrensel Kişilik> In reply to @arkanoid "mycstring[^1] will be last": if it is a `cstring` i think it must be a NULL char
[14:24:18] <FromDiscord> <Evrensel Kişilik> otherwise that syntatic sugar must be giving the last char
[14:24:22] <FromDiscord> <Evrensel Kişilik> before NULL char
[14:24:24] <FromDiscord> <Evrensel Kişilik> i have no idea
[14:24:28] <FromDiscord> <Evrensel Kişilik> i would make it like this
[14:24:57] <FromDiscord> <Phil> In reply to @Evrensel Kişilik "reverse engineering?": The power of love and computermagivs
[14:24:59] <FromDiscord> <Phil> (edit) "computermagivs" => "computermagics"
[14:25:01] <FromDiscord> <Phil> or sth
[14:26:01] <arkanoid> apparently csting type doesn't support backward index
[14:26:49] <FromDiscord> <mratsim> In reply to @arkanoid "apparently csting type doesn't": they can't since to know the length of a cstring you need to iterate first
[14:27:01] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3NsS
[14:27:08] <arkanoid> yes, it makes sense, I just had to wrap my head around it
[14:27:11] <FromDiscord> <mratsim> the length isn't stored in the string.
[14:27:17] <FromDiscord> <Phil> In reply to @arkanoid "mycstring[^1] will be last": If you can tell me how to instantiate a cstring I can check in inim
[14:27:21] <FromDiscord> <mratsim> they are very inefficient.
[14:27:38] <FromDiscord> <mratsim> everyone is avoiding them everywhere except for printf xD
[14:27:50] <FromDiscord> <Evrensel Kişilik> sent a code paste, see https://play.nim-lang.org/#ix=3NsT
[14:28:03] <FromDiscord> <Evrensel Kişilik> gimme more 😱
[14:28:06] <FromDiscord> <Phil> If cstrings are that terrible, why do we even bother dealing with them? What are they good for? Efficient copying?
[14:28:22] <arkanoid> because C give you cstrings
[14:28:47] <arkanoid> and shitload of existing software uses null character to terminate string
[14:29:21] <arkanoid> a lot of software that hates to iterate strings backwards efficiently
[14:32:28] <PMunch> @Phil, they're efficient in terms of memory usage if all you need to do is print them out to a terminal or something
[14:33:21] <FromDiscord> <Rika> Not by much
[14:33:40] <PMunch> I mean a Nim string like "Hello" is 8 bytes for the size, 8 bytes for the capacity of the underlying buffer, and 6 bytes for the null terminated string, that's 42 bytes of memory for storing 5 bytes of data
[14:34:03] <PMunch> A cstring would be 6 bytes of data
[14:34:46] <PMunch> This doesn't matter a whole lot to us living in the gigabytes of ram and terabytes of hard-drive world, but to early programmers that would've been seen as a crazy amount of data to just throw awy
[14:35:24] <FromDiscord> <Phil> Makes sense. I mean for some small devices it might actually still make a difference
[14:36:44] <PMunch> Definitely! I'm programming micro-controllers and there you count every single byte
[14:37:30] <Amun-Ra> small string are often stored in registers as a value in some implementationss
[14:37:47] <Amun-Ra> strings*
[14:38:28] <PMunch> I've considered trying to implement alternative encodings in order to save bytes for those devices
[14:38:39] <FromDiscord> <Rika> Back then it sure mattered but it’s not great that it’s stil relied on now
[14:38:45] <PMunch> Amun-Ra, those would have to be some tiny strings
[14:39:01] <PMunch> @Rika, oh for sure, I was just giving some historical context
[14:39:06] <Amun-Ra> PMunch: yes
[14:39:41] <Amun-Ra> PMunch: gcc does this for strings up to 7 chars (storing it inside uint64_t)
[14:41:20] <arkanoid> my nick won't fit :(
[14:41:30] <arkanoid> I feel fat
[14:42:55] <FromDiscord> <Phil> I feel your pain
[14:43:51] <Amun-Ra> arkanoid: just wait for 128-bit cpus
[14:44:07] <FromDiscord> <Phil> ~~for another 50 years~~
[14:46:02] <arkanoid> better turn into a quantum nick
[14:50:05] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[14:56:37] <FromDiscord> <mratsim> In reply to @PMunch "<@180601887916163073>, they're efficient in": their is no difference, a byte vs an int or an int32.
[14:57:19] <FromDiscord> <mratsim> and in the past lengths were stored in a byte anyway
[14:57:59] <FromDiscord> <Rika> ?
[14:57:59] <FromDiscord> <mratsim> In reply to @Amun-Ra "<@210739784761475072>: just wait for": 128-bit isn't really useful. We are only using ~48-bit for memory addressing nowadays.
[15:14:02] <PMunch> @mratsim, not sure I get what you're trying to say
[15:14:42] <PMunch> Length as a byte limits you to 256 character long strings though. Fine for log messages and such though
[15:15:46] *** Quits: szahid (~szahid@user/szahid) (Quit: leaving)
[15:30:03] <FromDiscord> <ynfle> In reply to @mratsim "<@!767093711112241162> see https://github.com/nim-l": I don't get it. Doesn't work in regular procs?
[15:30:49] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[15:31:55] <FromDiscord> <Yardanico> no
[15:33:16] <FromDiscord> <ynfle> So is there any solution for regular procs? Can I emit c code `FILE` and `LINE` and have `--debuginfo` for the compiler?
[15:34:27] <FromDiscord> <mratsim> In reply to @PMunch "<@570268431522201601>, not sure I": that Pascal strings can be as space efficient as C string
[15:34:40] <FromDiscord> <mratsim> if you store lengthas a byte
[15:34:50] <FromDiscord> <mratsim> for microcontrollers
[15:35:19] <FromDiscord> <mratsim> and way faster because no need to iterate to fetch the length all the time
[15:42:17] <PMunch> Sure, but if you never need to check length that serial send loop is now tracking and decrementing a pointer instead of just comparing the byte it just loaded from memory to null before sending it. So if the only thing you need to do is sending strings byte-by-byte C strings should still be faster/smaller
[15:42:52] <PMunch> Well, might depend on the CPU architecture
[15:43:39] <PMunch> My point was just that keeping data small is still a concern in some domains
[15:44:07] <PMunch> And the domain that C strings was designed for is closer to that than to modern computers
[15:45:40] <FromDiscord> <mratsim> In reply to @PMunch "Sure, but if you": You often need to preallocate a buffer before sending anything, for that you need the length
[15:47:25] <PMunch> Not on the sender side? At least for AVR you just set a register to the byte you want to send and wait for another register to go to the "ready" state before assigning another byte.
[15:47:30] <PMunch> No pre-allocation required
[15:49:21] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[15:57:38] <FromDiscord> <claude> did anyone else know about this? does this differ for Nim across backends? https://media.discordapp.net/attachments/371759389889003532/935511227017351168/Screenshot_20220125_145804_org.mozilla.firefox.jpg https://media.discordapp.net/attachments/371759389889003532/935511227235463198/Screenshot_20220125_145156_org.mozilla.firefox.jpg
[16:01:24] <FromDiscord> <ynfle> That isn't in nim
[16:03:15] <FromDiscord> <ynfle> Can someone answer some questions about the internals of the compiler for me? I'm trying to do a bug fix
[16:03:25] <PMunch> I think he meant if you wrote the equivalent Nim code and compiled it for C and JS, would you see the same difference of output
[16:06:54] <FromDiscord> <ynfle> After testing, yes
[16:13:51] <PMunch> Well that's not great
[16:15:58] <PMunch> What is JS actually doing there though?
[16:18:21] <PMunch> Is it some kind of variable scoping rule?
[16:19:40] <FromDiscord> <ynfle> In reply to @PMunch "Is it some kind": Probably
[16:38:35] <FromDiscord> <ynfle> Any guidance on this bug would be much appreciated https://github.com/nim-lang/Nim/issues/19446
[16:45:32] *** Joins: szahid (~szahid@user/szahid)
[17:00:00] *** Joins: keypey (~keypey@2a02:a31d:e040:8200:ea6a:64ff:fedb:28bb)
[17:05:57] *** Quits: keypey (~keypey@2a02:a31d:e040:8200:ea6a:64ff:fedb:28bb) (Quit: Leaving)
[17:06:17] *** Joins: keypey (~keypey@2a02:a31d:e040:8200:ea6a:64ff:fedb:28bb)
[17:46:57] <FromDiscord> <Benjamin> Isn't it just that JS has different semantics for \`+=\`? I.e., looking up the value of the left-hand side before evaluating the right-hand side.
[17:58:44] <FromDiscord> <Evrensel Kişilik> Unity is making me crazy
[17:58:49] <FromDiscord> <Evrensel Kişilik> gimme Godot
[18:00:22] <FromDiscord> <Rika> there is a nim godot binding
[18:01:14] <FromDiscord> <hmmm> can we unity stuff on nim yet? 🤔
[18:01:53] <FromDiscord> <Evrensel Kişilik> In reply to @Rika "there is a nim": oh no im happy with GDScript
[18:02:01] <FromDiscord> <xflywind> And there is a plan rewrite binding to support godot 4.0; see https://discord.com/channels/371759389889003530/845770858470965258/897354249405616139
[18:02:03] <FromDiscord> <Rika> LOL
[18:02:44] <FromDiscord> <xflywind> (edit) "And there is a plan ... rewrite4.0" 03added "to" | "4.0;" => "4.0 (gdextension);"
[18:03:19] <FromDiscord> <hmmm> how can you be fine with that fake python noodle lang when you can use num 🧐
[18:03:28] <FromDiscord> <hmmm> nim
[18:03:51] <FromDiscord> <Evrensel Kişilik> In reply to @hmmm "can we unity stuff": C###################
[18:04:46] <FromDiscord> <mratsim> In reply to @hmmm "can we unity stuff": I remember Unreal Engine: https://github.com/pragmagic/nimue4
[18:04:59] <FromDiscord> <mratsim> and plenty of other engines
[18:05:08] <FromDiscord> <mratsim> it's like a competition to make game engine bindings in Nim
[18:15:35] *** Joins: arkurious (~arkurious@user/arkurious)
[18:18:55] <FromDiscord> <Phil> ~~Why can't we have a competition of making the perfect nim orm so that my life becomes easier~~
[18:19:17] <PMunch> You bring the price money, I'll bring the competition
[18:20:56] <PMunch> Oh well, gotta go
[18:20:57] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[18:25:32] *** Quits: keypey (~keypey@2a02:a31d:e040:8200:ea6a:64ff:fedb:28bb) (Quit: Leaving)
[18:26:43] <FromDiscord> <Phil> ... I'm willing to throw in 50-100€... which is basically nothing but I'm not rich yet
[18:28:29] <FromDiscord> <hmmm> I'll throw in a lemon flavoured ice cream 🍋
[18:34:21] <FromDiscord> <haolian9 (高浩亮)> hi all, i was reading nim for [python programmer](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers#Sets), and i found the proc's naming convention changed to camel in nim 1.6.2 `to_table -> toTable`; does the doc needs an updation?
[18:34:41] <FromDiscord> <Rika> nim supports either convention
[18:34:48] <FromDiscord> <Rika> preferred is camel
[18:34:59] <FromDiscord> <Rika> i dont know if docs should reflect the preferred
[18:39:29] <FromDiscord> <enthus1ast> Imho they should
[18:44:23] <FromDiscord> <huantian> Having differing casing in the docs is probably just unnecessarily confusing
[18:44:36] <FromDiscord> <huantian> ~~or displeasing to the eye~~
[18:48:51] <FromDiscord> <xflywind> In official docs, camel cases are enforced. As for that wiki article which is managed by the community, snake cases are all over there, which are consistent with the Python version.
[19:04:18] <FromDiscord> <konsumlamm> In reply to @haolian9 (高浩亮) "hi all, i was": the naming convention didn't change in 1.6.2, it always was camelCase
[19:08:17] <FromDiscord> <haolian9 (高浩亮)> thank you, seems i just need to read more doc, like https://nim-lang.org/docs/nep1.html
[19:27:23] <FromDiscord> <ajusa> Nim's pretty close to hitting 2k open issues, big milestone coming up
[19:32:29] <FromDiscord> <huantian> Time to make up some bugs
[19:38:49] <FromDiscord> <konsumlamm> no need to make them up, just run all tests in the VM
[19:48:32] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 240 seconds)
[20:01:12] <FromDiscord> <mratsim> There was a time, must have been prehistory, when we wanted to squash all bugs and go beyond 1k
[20:01:26] <FromDiscord> <mratsim> iirc it was 2018 and Nim had 1.1 or 1.2 open bugs.
[20:20:18] <FromDiscord> <Patitotective> Uuh, I'm tired of my parser, the comments sometimes not work, and when I fix them, the indentation stuff breaks 😭
[20:20:43] *** Joins: rockcavera (~rc@192.12.114.201)
[20:20:43] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[20:20:43] *** Joins: rockcavera (~rc@user/rockcavera)
[20:23:26] <FromDiscord> <leorize> maybe your parser is too complex \:p
[20:23:59] <FromDiscord> <Patitotective> In reply to @leorize "maybe your parser is": how do i simplify it? ;-;
[20:24:15] <FromDiscord> <leorize> how are you writing your parser?
[20:24:20] <FromDiscord> <Patitotective> _npeg_
[20:24:31] <FromDiscord> <Patitotective> `peg` macro
[20:24:33] <FromDiscord> <leorize> yea... that's a problem \:p
[20:25:11] <FromDiscord> <Patitotective> and some other `grammar` macros to parse strings and numbers
[20:25:26] <FromDiscord> <Patitotective> In reply to @leorize "yea... that's a problem": is there a better way?
[20:25:40] <FromDiscord> <leorize> I guess it really depends on how you're structuring your grammar
[20:27:40] <FromDiscord> <leorize> are you composing them from tokens?
[20:28:18] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Nva
[20:28:35] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3Nva" => "https://paste.rs/YnB"
[20:29:10] <FromDiscord> <Patitotective> I remove the code block captures
[20:29:11] <FromDiscord> <Patitotective> (edit) "remove" => "removed"
[20:30:09] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3Nvf" => "https://play.nim-lang.org/#ix=3Nve"
[20:30:25] <FromDiscord> <Patitotective> `number` and `str` are the other `grammar`s
[20:30:52] <FromDiscord> <Patitotective> (edit) "other `grammar`s" => "`grammar` macros"
[20:30:56] <FromDiscord> <leorize> looks like your paser tokenize and try to make sense of them at the same time
[20:32:00] <FromDiscord> <Patitotective> So, I should only tokenize it?
[20:32:07] <FromDiscord> <Patitotective> (edit) "So, ... I" 03added "should" | 04removed "should"
[20:32:12] <FromDiscord> <leorize> maybe what you should be looking at is to first tokenize, then produce groupings of them, then interpret that
[20:32:14] <FromDiscord> <Patitotective> (edit) "it?" => "it in the `peg` macro?"
[20:32:31] <FromDiscord> <leorize> ie. `indent` can be a token
[20:33:16] <FromDiscord> <leorize> then you run your parser on the token stream to compress indent into semantic meaning
[20:33:42] <FromDiscord> <Patitotective> In reply to @leorize "maybe what you should": when you say produce groupings you mean objects? like nim nodes?
[20:35:09] <FromDiscord> <leorize> yea, things like that
[20:35:14] <FromDiscord> <leorize> nim nodes are very memory inefficient, but they are a good start
[20:35:32] <FromDiscord> <Patitotective> do you have any article or video about it? :p
[20:35:47] *** Joins: PMunch (~PMunch@user/pmunch)
[20:36:45] <FromDiscord> <Patitotective> https://www.youtube.com/watch?v=bxpc9Pp5pZM ? lol
[20:39:11] <FromDiscord> <leorize> https://craftinginterpreters.com/scanning.html
[20:39:34] <FromDiscord> <leorize> it's about writing a programming language but much of the stuff in here can be reused to parse any complex structured language
[20:40:00] <FromDiscord> <Patitotective> 👍
[20:40:01] <FromDiscord> <Patitotective> thanks
[20:40:02] <FromDiscord> <Patitotective> 🙃
[20:40:20] <FromDiscord> <leorize> you should only need the concepts from this and not the implementations
[20:40:47] <FromDiscord> <leorize> npeg is pretty capable of parsing just about anything, even custom token streams
[20:42:19] <PMunch> npeg is a gem of library
[20:48:52] <FromDiscord> <eyecon> I'm a zealot for honeycomb, I find it much more intuitive
[20:49:02] <FromDiscord> <eyecon> Just wrote a duration parser in that
[20:49:23] <FromDiscord> <eyecon> In early stages for sure but I find the definitions readable
[20:50:10] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3Nvn
[20:53:25] *** Joins: vicfred (~vicfred@user/vicfred)
[20:54:51] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[20:57:40] *** Quits: vicfred (~vicfred@user/vicfred) (Client Quit)
[21:29:20] <Zevv> you guys should see Xpeg, that's even nicer
[21:35:20] <Amun-Ra> not to mention the jpeg
[21:40:27] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:50:24] <FromDiscord> <lpha3ch0> Can anyone help with good resources for learning concurrency in Nim? I looked at "Nim in Action" but it just wasn't enough.
[21:52:47] *** Joins: neceve (~quassel@2.26.93.228)
[21:53:46] <Zevv>  ha
[21:54:12] <Zevv> araq will have a talk at fosdem next week about just that subject, i believe
[21:56:54] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:02:32] <FromDiscord> <Patitotective> In reply to @leorize "you should only need": actually the implementations look easier than _npeg_ hehe
[22:06:15] *** Quits: NimEventer (~NimBot@78.47.140.224) (Remote host closed the connection)
[22:12:31] *** Joins: NimEventer (~NimBot@78.47.140.224)
[22:12:37] *** Quits: NimEventer (~NimBot@78.47.140.224) (Remote host closed the connection)
[22:12:45] *** Joins: NimEventer (~NimBot@78.47.140.224)
[22:15:35] <FromDiscord> <gcao> sent a code paste, see https://play.nim-lang.org/#ix=3NvQ
[22:17:18] *** Quits: NimEventer (~NimBot@78.47.140.224) (Ping timeout: 250 seconds)
[22:17:47] *** Joins: NimEventer (~NimBot@78.47.140.224)
[22:20:58] <FromDiscord> <mratsim> In reply to @Patitotective "So, should I only": separate the Lexer and the Parser
[22:21:12] <FromDiscord> <mratsim> that would be easier to debug and test.
[22:22:06] <FromDiscord> <mratsim> Then if you want to interleave them for efficiency of what not, you can use the great COBOL trick that accelerated their compilers by 70x more  than 50 years ago: coroutines (or closure iterators in Nim).
[22:23:29] <FromDiscord> <mratsim> In reply to @gcao "hi how do I": yes
[22:24:21] <FromDiscord> <mratsim> In reply to @lpha3ch0 "Can anyone help with": Nim asyncdispatch is very similar to Python async/await
[22:25:04] <FromDiscord> <mratsim> Basically, when you call an async function, you are given a handle called a Future, that will allow you to retrieve the result.
[22:25:28] <FromDiscord> <lpha3ch0> In reply to @mratsim "Nim asyncdispatch is very": I never learned asyc programming in Python. As I said, I've only done concurrency in Golang, once, and just managed to make a simple example work.
[22:25:30] <FromDiscord> <mratsim> you do whatever, and at an appropriate place you `await` the future.
[22:26:01] <FromDiscord> <mratsim> or `waitFor` if you are in a normal function (not `async`).
[22:26:14] <FromDiscord> <gcao> In reply to @mratsim "yes": Thank you. But I'm getting error that indicates that what I passed in is not treated as a varargs.↵index 1 not in 0 .. 0
[22:26:26] <FromDiscord> <gcao> In my seq there are two values.
[22:26:33] <FromDiscord> <mratsim> what happens in the background when you wall await is that if it's still not ready, it will proceed with other stuff.
[22:27:16] <FromDiscord> <gcao> (edit) "values." => "values.↵BTW I'm actually passing in a slice of seq."
[22:27:41] <FromDiscord> <mratsim> In reply to @gcao "In my seq there": can you try with a seq[int] just to rule out your string being interpreted as a seq[char]
[22:33:40] <FromDiscord> <demotomohiro> @lpha3ch0 Here is tutorial to learn asyncnet: https://xmonader.github.io/nimdays/day15_tcprouter.html
[22:39:12] <FromDiscord> <lpha3ch0> In reply to @demotomohiro "<@275045322705862656> Here is tutorial": thank you
[22:40:56] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[22:41:57] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[22:46:16] *** Joins: unmatched-paren (~user@2a00:23c6:ce06:7900:bdc3:b5a:bd38:49c0)
[22:53:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[23:04:33] <FromDiscord> <Shiba> what is incremental compiling
[23:04:35] <FromDiscord> <Shiba> (edit) "compiling" => "compiling?"
[23:06:16] <FromDiscord> <Patitotective> In reply to @mratsim "separate the Lexer and": hmmm, and should i use a library for the lexer?
[23:06:39] <FromDiscord> <Patitotective> or from scratch?
[23:14:29] <unmatched-paren> hello! i'm adding nim support to Guix, which builds packages from source in a chroot in /tmp. obviously, this means that I can't use libraries conventionally; i'll have to figure out how to vendor dependencies instead of downloading them from nimble (the chroot intentionally has no internet access.) but before i do that, i have to get nimble working, which means vendoring std. is there a flag or env var that can set the location o
[23:14:29] <unmatched-paren> like the one that can set the search path for packages? (i understand from the manual that std and packages use separate search paths; correct me if i'm wrong.)
[23:15:52] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Nw9
[23:30:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:40:17] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Nwg
[23:53:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[23:57:41] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Nwo
[23:58:42] <FromDiscord> <mratsim> In reply to @IsaacPaul "Any way to do": np
[23:58:47] <FromDiscord> <mratsim> (edit) "np" => "no"
[23:59:00] <FromDiscord> <IsaacPaul> aw I was excited for a moment
[23:59:44] <FromDiscord> <mratsim> tbh if you use an {.inline.} proc the compiler will be able to do constant-folding at compile-time
