[01:05:24] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[01:07:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[01:32:19] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[01:38:08] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Remote host closed the connection)
[01:41:43] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[01:49:35] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:03:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:23:49] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[02:26:50] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[02:49:50] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[03:20:32] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Quit: Lost terminal)
[03:38:59] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[03:42:10] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:45:57] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Ping timeout: 240 seconds)
[03:48:13] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[04:19:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:53:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[04:55:03] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Quit: leaving)
[06:02:50] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:06:11] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:42:34] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[06:42:59] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[06:50:46] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:24:54] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:36:50] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[07:46:53] *** Joins: vicfred (~vicfred@user/vicfred)
[08:31:08] *** Joins: libertyprime (~libertypr@151.210.173.26)
[08:52:21] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Quit: Connection closed)
[09:03:50] <westrom[m]> So I'm coming from Clojure (LISP dialect on the JVM), so dealing with types explicitly is a bit foreign, not to mention the various mathematical terminology I haven't wrapped my head around.
[09:03:50] <westrom[m]> I'm wondering if you can help me out with something I'm trying to do. I just jumped in without a tutorial, just enough to know the syntax for functions and type annotation.
[09:03:50] <westrom[m]> https://bpa.st/WAIA
[09:21:20] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:45:49] *** Quits: libertyprime (~libertypr@151.210.173.26) (Ping timeout: 256 seconds)
[09:55:38] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:02:27] *** Joins: libertyprime (~libertypr@203.97.185.98)
[10:11:09] <enikar> westrom[m]: I don't speak english very easy. But it's impossible to escape from IO (well i's not absolute true, but haskell enforce this practice). You should modify: `remainingLife :: Day -> CalendarDiffDays -> CalendarDiffDays` to match the type: `remainingLife :: Day -> CalendarDiffDays -> IO CalendarDiffDays`
[10:20:12] <westrom[m]> ah, so rather than return a type return the IO monad with the type?
[10:20:57] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 240 seconds)
[10:25:47] <westrom[m]> <enikar> "westrom: I don't speak english..." <- How would I then transform the final statement? In other words, how can I make `diffGregorianDurationClip` take an `IO CalendarDiffDays`?
[10:28:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:29:12] <enikar> you can use fmap for that. IO is also a functor, then to apply a function f for the value "inside" a functor, use: fmap f t
[10:29:50] <enikar> where t :: IO CalendarDiffDays
[10:34:33] *** Quits: libertyprime (~libertypr@203.97.185.98) (Ping timeout: 256 seconds)
[10:36:05] <enikar> a simple example is better, I guess. The action readline has the type: readline :: IO String
[10:37:08] <westrom[m]> <enikar> "you can use fmap for that. IO is..." <- Something like this? https://bpa.st/DAEA
[10:38:13] <enikar> I want to split into words the read line. The function words can be apply to a String, and has type words :: String -> [String].
[10:38:52] <enikar> So the function:  fmap words readline :: IO [String]
[10:39:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[10:39:48] *** Joins: libertyprime (~libertypr@219-89-121-197.adsl.xtra.co.nz)
[10:39:54] <enikar> we stay in IO. Alternatively, we can also a do block, and use return to put the result into the IO action.
[10:41:05] *** Joins: mvk (~mvk@173.33.176.132)
[10:42:41] <westrom[m]> Ah, so more like this? https://bpa.st/NQZQ
[10:43:00] <enikar> westrom[m]: the <- extract *localy* (inside the do block that has the type of (Monad m) => m :: Something)
[10:45:19] *** Quits: libertyprime (~libertypr@219-89-121-197.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[10:46:49] <westrom[m]> enikar: Ok, so I see that fmap can extract a value that is monadic. How do I now use a non-monadic value with it?
[10:46:49] <westrom[m]> https://bpa.st/BQBA
[10:47:13] <westrom[m]> It expected `IO Day` but I have `Day`.
[10:47:33] <enikar> for non-monadic value, you can apply a function directly.
[10:50:20] <enikar> I suggest you, decompose each action.
[10:50:44] <westrom[m]> Is there a way to set local values to a function?
[10:50:56] <westrom[m]> Other than `do` and `<-`.
[10:51:37] <enikar> yes you can use a let expression.
[10:52:38] <westrom[m]> Ah, ok. And then I can use a do block after it.
[10:53:04] <enikar> you can use a let within a do block.
[10:53:34] <enikar> but I see there are many type error in your sample of code.
[10:56:43] <westrom[m]> Yeah, I'm trying to figure out how to make my idea work within the type system.
[10:57:09] <westrom[m]> Do I need to rewrite every function to take the IO monad? That doesn't seem right.
[10:59:10] <enikar> no, you don't need to rewrite every functions, luckily!
[10:59:32] <westrom[m]> enikar: Ok, that's good.
[10:59:48] <westrom[m]> Everything made sense until I had to deal with IO, through getting the current time.
[11:00:07] <enikar> it's better to write as many as possible functions outside of IO monad.
[11:00:12] <xsperry> westrom[m], remainingLife could accept current time/day as an argument
[11:00:47] <westrom[m]> Ah, ok. I can do that.
[11:00:50] *** Joins: libertyprime (~libertypr@151.210.173.26)
[11:02:17] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 240 seconds)
[11:05:09] <xsperry> it makes the function simpler and it is easier to write tests for it
[11:06:03] *** Joins: frx (~bc8147f2@cerf.good1.com)
[11:06:13] <westrom[m]> enikar xsperry:  This now returns no errors. https://bpa.st/VBTA
[11:06:13] <westrom[m]> Not sure how I'll integrate them both, but this will do for now.
[11:06:25] <westrom[m]> Thank you very much!
[11:07:33] <frx> hi. what is a good web scaper for haskell?
[11:15:32] <westrom[m]> <frx> "hi. what is a good web scaper..." <- You need something to parse html?
[11:20:17] <frx> westrom[m] yes. possibly malformed html, from the web
[11:20:39] <frx> web scraper*
[11:22:06] <westrom[m]> I'm not experienced, but a quick search reveals [`scalpel`](https://hackage.haskell.org/package/scalpel).
[11:27:48] <westrom[m]> s/I'm not experienced, but a quick search reveals [`scalpel`](https://hackage.haskell.org/package/scalpel)./frx: I'm not experienced, but a quick search reveals [scalpel](https://hackage.haskell.org/package/scalpel)./
[11:29:56] <frx> it looks good
[11:32:37] *** Quits: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de) (Ping timeout: 240 seconds)
[11:32:47] *** Joins: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de)
[11:34:58] <frx> thanks!
[11:37:37] *** Quits: libertyprime (~libertypr@151.210.173.26) (Ping timeout: 240 seconds)
[11:40:15] <westrom[m]> I'm familiar with both unit testing and generative testing. What are the defacto libraries used for these purposes?
[11:45:14] <westrom[m]> * and generative/property testing.
[11:51:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:53:17] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:53:18] <frx> westrom[m] I have used quickcheck in the past, and I liked it, but I'm not sure if that's the recommended library these days
[11:53:53] <frx> it probably isn't for writing your own tests
[11:54:11] *** Quits: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de) (Quit: WeeChat 3.4)
[11:54:23] *** Joins: polyphem (~rod@2a02:810d:840:8754:b6f3:5141:3b3:83de)
[11:54:47] <westrom[m]> frx: Ah quickcheck! I've used something inspired by it in Clojure! That should do.
[12:26:22] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[12:30:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:33:00] *** Joins: joes (~joes@hardfought/member/joes)
[12:47:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:44] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:47] *** allbery_b is now known as geekosaur
[13:14:36] *** Joins: libertyprime (~libertypr@203.211.106.46)
[13:25:17] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:31:02] *** Quits: libertyprime (~libertypr@203.211.106.46) (Ping timeout: 240 seconds)
[14:01:04] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:03:50] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[14:21:21] *** Quits: joes (~joes@hardfought/member/joes) (Quit: Leaving)
[15:07:54] *** Quits: frx (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[16:00:07] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:34:34] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[17:14:43] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[17:43:30] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:11:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:13:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:17:46] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[18:55:42] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[18:57:21] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[19:41:52] *** Joins: benin (~benin@183.82.31.24)
[20:14:00] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:47:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[21:26:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[21:29:25] *** Joins: jespada (~jespada@87.74.36.188)
[22:08:10] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:39:19] *** Quits: benin (~benin@183.82.31.24) (Quit: Ping timeout (120 seconds))
[22:39:37] *** Joins: benin (~benin@183.82.31.24)
[22:40:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:44:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:18:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[23:49:15] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[23:50:37] *** Joins: hololeap (~hololeap@user/hololeap)
