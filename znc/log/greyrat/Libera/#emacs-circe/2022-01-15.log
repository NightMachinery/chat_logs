[01:34:43] *** Joins: irek (~irek@public-gprs206216.centertel.pl)
[02:02:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:21:12] *** Quits: irek (~irek@public-gprs206216.centertel.pl) (Ping timeout: 250 seconds)
[02:42:24] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[03:05:20] *** GNUHacker is now known as GNUHacker_testin
[03:06:15] *** GNUHacker_testin is now known as GNUHackertesting
[03:21:00] *** GNUHackertesting is now known as GNUHacker
[04:32:55] *** Joins: notzmv (~zmv@user/notzmv)
[04:36:45] *** Quits: GNUHacker (~foobar@fsf/member/GNUHacker) (Quit: I support RMS! https://stallmansupport.org)
[05:00:33] *** Joins: Thaodan (~Thaodan@thaodan.de)
[05:03:05] *** Joins: fsbot` (~fsbot@69.90.132.173)
[05:09:06] *** Quits: Thaodan_ (~Thaodan@thaodan.de) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: fsbot (~fsbot@69.90.132.173) (Ping timeout: 240 seconds)
[05:28:41] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:55:58] *** Quits: pwolf (~pwolf@user/pwolf) (Ping timeout: 250 seconds)
[08:59:59] *** Joins: pwolf (~pwolf@user/pwolf)
[10:04:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:01:17] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[12:16:13] *** Joins: notzmv (~zmv@user/notzmv)
[13:17:52] <ctietze> found out that changing the buffer-s mode to e.g. `fundamental-mode` will do the trick and NOT leave the channel because the mode-specific buffer teardown is skipped (:
[13:18:21] <ctietze> that seems to be a way to work around closing channel buffers without making the bouncer leave them
[13:27:01] <wasamasa> if you don't want to kill emacs, you could use /quit or /gquit, provided you haven't changed the customizable that makes them kill buffers on quit
[13:29:27] <ctietze> wasamasa: wouldn't that also leave all channels, or is it the bouncer's job to not forward that command?
[13:29:49] <wasamasa> bouncers ignore that, yes
[13:30:12] <ctietze> ah that's stupid of me, not to have looked this up. Lemme try
[13:31:55] <ctietze> that kind of worked: circe still asked if I wanted to leave the channel after the disconnect
[13:32:33] <wasamasa> yeah, you can customize it to not ask
[13:33:58] <ctietze> circe-channel-killed-confirmation probably?
[13:34:17] <wasamasa> no
[13:34:44] <wasamasa> circe-server-killed-confirmation
[13:38:02] <ctietze> Expected that to apply to 'Circe Server' buffers only, not to the channels tbh
[13:41:10] <wasamasa> the /quit command kills the server
[13:41:16] <wasamasa> it might kill associated buffers
[13:47:29] <wasamasa> arguably, the customizable is pretty confusing
[13:49:09] *** Quits: baduck (~bad@2a01:170:1025:1:10be:7e95:9691:9384) (Ping timeout: 268 seconds)
[14:05:09] *** Joins: irek (~irek@public-gprs206216.centertel.pl)
[14:36:21] *** Joins: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr)
[14:42:29] <ctietze> Found out that killing the server buffer breaks all kinds of things :)
[14:47:34] <irek> ctietze: Like what?  I'm using circe v2.11 and never noticed any issues.  Could you elaborate.  I would like to know what to watch out for.
[14:48:48] *** Parts: GNUHacker (~foobar@fsf/member/GNUHacker) (https://gnu.org/malware/)
[14:50:49] <ctietze> To test if circe-server-killed-confirmation triggers when I'm killing the server buffer, I noticed that none of the rooms would work anymore and circe warned that functionality is limited b/c server buffer has died. Reconnecting didn't help. Running (circe) again didn't work as expected either and I ended up with duplicate but still non-functional room buffers; I closed all buffers and ran (circe) afterwards. That helped.
[14:51:50] <wasamasa> well
[14:51:56] <wasamasa> what the fuck do you expect really
[14:52:07] <wasamasa> I mean, you shut down the IRC functionality
[14:52:12] <wasamasa> the buffers still linger around
[14:52:21] <wasamasa> you can still read them or whatever else it is you planned to do
[14:52:38] <wasamasa> but you cannot interact with the IRC server because you shut down the connection
[14:52:56] <wasamasa> that's kind of like complaining that a knife is sharp
[14:53:08] <ctietze> Not complaining
[14:53:27] <ctietze> I'm looking at the code to see if there would be a sensible way to re-use the buffers later if they already exist. What surprised me was that the new room's buffers spawned the same warning when I typed
[14:56:02] <irek> ctietze: as far as I remember default behavior of circe is that after you kill server buffer all chat buffers are removed as well
[14:56:14] <wasamasa> yeah, this is about what happens when that behavior is changed
[14:56:21] <wasamasa> it's customizable after all
[14:57:14] <ctietze> I set it to `nil` to "Kill first, ask never". Am I misinterpreting that?
[14:57:50] <ctietze> After all `kill-all - Don‚Äôt ask the user, and kill all associated buffers` sounds similar tbh but more verbose. Maybe that's the one I was looking for.
[14:57:51] <wasamasa> should mean that it kills just the server and doesn't ask at all
[14:59:14] <wasamasa> I bet reconnecting works perfectly fine if you kill server and all chat buffers
[14:59:28] <wasamasa> because the chat buffers point to the killed server
[14:59:42] <wasamasa> hence the warning
[14:59:58] <ctietze> Yeah 'kill-all' kills ... all, and `(circe)` afterwards works as usual
[15:00:47] <wasamasa> it's debatable whether it should work for the half-assed state of a killed server buffer and remaining chat buffers
[15:01:09] <wasamasa> doesn't feel obviously correct to me
[15:01:15] <ctietze> Tried the `nil` value again and now the new buffers work. So was likely my fault
[15:01:23] <wasamasa> huh
[15:01:44] <ctietze> old buffers still spawn the warning of course and I can't chat with these :)
[15:01:59] <wasamasa> yeah, but why
[15:02:06] <wasamasa> why would you keep them around and then try to reuse them
[15:02:11] <wasamasa> why not kill and recreate them?
[15:02:51] <ctietze> idk, no useful reason. Trying to figure out the behavior of the package. 
[15:03:13] <wasamasa> you may find that inconsistent state makes reasoning about it a lot more difficult than consistent state
[15:03:23] <wasamasa> so I'm not surprised that's not handled well at all
[15:04:07] <wasamasa> suppose you only shut down the connection, do whatever you want to do with those chat buffers, then kill them all and reconnect, it should work fine again
[15:05:21] <ctietze> üëç
[15:08:08] <ctietze> WDYT, would it be a useful addition to change channel buffer to read-only-mode if users don't kill them?
[15:09:32] <wasamasa> uh, they're already mostly read-only
[15:15:48] <ctietze> ok I take that as a "no" ;) probably a fringe thing anyway to be able to type in disconnected channel buffers
[15:24:22] <wasamasa> pretty much
[15:24:50] <wasamasa> you could disable that field, but what for, you'll get an error anyway if you send anything
[15:25:00] <wasamasa> and you've been warned already
[15:54:36] *** Joins: baduck (~bad@2a01:170:1025:1:8de5:56e9:ebb5:d5f4)
[16:08:27] *** Quits: irek (~irek@public-gprs206216.centertel.pl) (Quit: Using Circe, the loveliest of all IRC clients)
[19:46:05] <lagash> my first thought would be a flowchart would make things more clearer..
[20:22:35] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:23:40] *** Quits: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[20:23:59] *** Joins: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr)
[20:28:37] *** Quits: jlrnick (~josephler@2a01cb040a1594007c4273d50a89f6ac.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[21:54:34] *** Joins: ElPresidente (~Gordon@172-125-150-28.lightspeed.tukrga.sbcglobal.net)
