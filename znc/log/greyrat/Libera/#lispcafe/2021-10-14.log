[00:12:55] *** Mandus_ is now known as Mandus
[00:13:02] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:34:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:43] *** Joins: aeth (~aeth@user/aeth)
[00:40:38] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[00:40:59] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[00:57:47] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:12:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[01:28:08] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:30:52] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:40:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:47:28] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 268 seconds)
[01:48:28] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[01:56:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:58:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:17:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:20:11] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[03:09:28] *** Quits: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:13:16] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:13:43] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:13:45] <hayley> http://www.e-basteln.de/computing/65f02/65f02/
[03:13:46] -ixelp- The 100 MHz 6502 · e-basteln
[03:34:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[03:39:29] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[03:46:13] *** Joins: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de)
[03:46:13] *** ChanServ sets mode: +o gilberth
[03:52:23] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:14:14] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[04:20:40] <gilberth> Something is curious. When I run the CADR on the fast machine, which emulates it twice as fast, as my slow machine, the reading of files over Chaosnet takes twice as much. The former runs Linux, the latter macOS. The Linux box has plenty of cores, while the poor i5 only has two, but still wins. macOS-Linux: 1-0?
[04:21:59] <hayley> Hooray, the university finally got my payment. Now I can enrol for classes for next year even though it's still only October.
[04:22:32] <hayley> ...and even though I have a cheat sheet for subjects from applying for credit.
[04:32:15] <hayley> And of course, they are only running the boring electives, like databases and machine learning.
[04:33:42] <hayley> We got databases, 3D graphics, machine learning, robots and data science.
[04:55:54] <hayley> Can't do robots - the system knows about requirements, but only tells you when you try to enrol. Fun.
[05:01:31] <hayley> No databases, but I can do machine learning. Apparently that's easier.
[05:51:47] <mfiano> Morning.
[05:54:51] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[05:57:23] <hayley> Morning.
[05:57:29] <hayley> Whew, and I got 90% on the maths assignment too!
[06:01:08] <mfiano> Heh. Raku has operators that specifically operate on operators.
[06:02:09] *** Joins: ln43 (~ln43@user/ln43)
[06:03:10] <ln43> hi all !
[06:03:42] <ln43> water resiliency is one of the most important points for the future ... or not ?
[06:07:55] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[06:12:11] *** Joins: cyberbanjo (~user@2607:fb90:42a5:932d:729f:7d3b:9271:89d4)
[06:30:08] <GreaseMonkey> if someone wants a programming challenge: make an algorithm to work out the minimal number of rectangles needed to draw each of the VGA 8x16 CP437 glyphs
[06:30:20] <GreaseMonkey> currently having a go at allowing setting rectangles and clearing rectangles together
[06:32:14] <GreaseMonkey> a greedy algorithm based on brute-forcing the entire space and picking the first thing with the greatest reduction of number of mismatched bits from the target is decent but as expected suboptimal
[06:32:33] <GreaseMonkey> i suspect it may perform better if i only allow setting, not clearing
[06:33:40] <GreaseMonkey> the char 2 smiley is a notorious case where it does 5 ops to draw the backing and the corners, whereas the optimial for that is 2 ops
[06:40:31] *** Quits: ixelp (~ixelp@p5492d7b6.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:51:01] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:04:50] *** Joins: semz (~none@user/semz)
[07:46:57] <White_Flame> GreaseMonkey: is this for rendering glyphs with vectors/polygons?
[07:48:40] <White_Flame> (also, have fun with the 3 halftone glyphs :-P)
[08:07:25] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[08:25:03] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:25:35] <dave0> maw
[08:33:11] <dimadima> maw
[08:33:23] <hayley> maw
[08:38:24] <dave0> hi dimadima, hayley 
[08:38:57] <dimadima> hey dave0 
[08:50:22] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[09:01:13] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[09:01:47] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[09:05:33] <hayley> https://www.tbray.org/ongoing/When/202x/2021/10/08/The-WOrst-Case
[09:09:20] <mfiano> Hyper operators, are...something.
[09:12:15] <mfiano> So, if I understand correctly the zip operator is like (mapcar #'list ...), and the zip meta-operator is like (mapcar #'foo ...)
[09:13:22] <mfiano> and I suppose then the normal a hyper operator with the arrows facing outward would be the same as the zip meta operator?
[09:14:05] <mfiano> <1 2 3> Z+ <4 5 6> # (5 7 9)
[09:14:22] <mfiano> <1 2 3> <<+>> <4 5 6> # (5 7 9)
[09:14:33] <mfiano> Seems to compute?
[09:15:04] <Mondenkind> <1 2 3> <<+>> 4 --> (5 6 7)
[09:15:11] <Mondenkind> <1 2 3> Z+ 4 --> (5)
[09:15:23] <mfiano> Ah
[09:17:19] <manicennui> https://www.reddit.com/r/scheme/comments/q7jf61/virtual_racketcon/
[09:17:47] <mfiano> But, Racket
[09:18:35] * Mondenkind has not played tennis in probably 8 years
[09:20:42] <mfiano> So given the #'list / #'foo difference between zip and meta-zip above, is there a list function, and if so, does that remove the need for the normal zip operator?
[09:22:20] <mfiano> I admit all these HOF reader macros in Raku are hard to keep in my head.
[09:23:06] <Mondenkind> most of them are available as functions too
[09:23:17] <Mondenkind> e.g. 'zip <1 2 3>, <4 5 6>, :with(&infix:<+>)'
[09:23:27] <mfiano> I meant is there a prefix "list" operator
[09:24:12] <mfiano> Idk, ignore me. I just find zip kind of a strange function if the higher-order variant exists
[09:24:19] <mfiano> s/function/operator/
[09:24:41] <Mondenkind> there is ,.  So 'x Z y' ←→ 'x Z, y' (I think)
[09:26:34] <Mondenkind> mfiano: raku has lots of redundancies like that.  'TIMTOWTDI' or so
[09:26:34] <mfiano> Apparently simplifies to 'x , y'
[09:26:46] <hayley> Problem: I've done the wrong transformation to try to make a e^x curve linear, but it still looks linear somehow.
[09:26:51] <mfiano> Oh no nevermind
[09:27:23] <mfiano> But <<,>> == Z == Z,
[09:27:50] <hayley> Oh, so for f(x)=e^(-x), f(f(x)) is a sigmoid curve. Well, it looks pretty flat in some parts.
[09:28:07] <mfiano> desmos?
[09:28:25] <Mondenkind> 'make a curve linear' what does that mean?  I mean, presumably something harder than ln(x)?
[09:28:30] <hayley> Yes.
[09:28:52] <hayley> Mondenkind: I have a dataset that looks like it follows e^(-x), and I need to make it linear to do linear regression.
[09:29:44] *** sham1_ is now known as sham1
[09:30:51] <GreaseMonkey> White_Flame: it's for rendering with rectangles as a bit of a thought experiment or something
[09:38:28] <hayley> Nah, I think I have it wrong, e^-x is the inverse of the transformation that I want.
[09:40:05] <hayley> For e.g. {e^x : x \in [0, 10]} the distance between elements increases rapidly as x increases, which is sort of what I have.
[09:42:12] <mfiano> That just means it isn't linear, not necessarily exponential
[09:43:32] <hayley> Sure. But x^(-n) is more annoying to work with (and looks more different, subjectively).
[10:02:08] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[10:02:34] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:02:39] <hayley> Oh, the other thing is that the price follows some sort of "decay" curve, which should be made linear too.
[10:02:58] <hayley> But if I do that, it's hard to make English sentences out of any of the model.
[10:12:44] <mfiano> Bah, I can't computer today.
[10:12:49] <mfiano> Be back later maybe
[10:58:11] *** Joins: random-nick (~random-ni@87.116.183.117)
[11:00:59] *** Joins: makomo_ (~makomo@user/makomo)
[11:01:46] *** Quits: malaclyps (~mala@user/malaclyps) (Ping timeout: 245 seconds)
[11:39:48] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:40:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:52:42] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[11:53:21] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[12:02:16] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[12:49:41] *** Joins: makomo_ (~makomo@user/makomo)
[12:58:20] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[12:58:49] *** Joins: makomo_ (~makomo@user/makomo)
[13:11:10] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:15:08] *** Joins: cranium (~cranium@user/cranium)
[13:15:58] *** Joins: treflip (~user@95.79.32.99)
[13:26:27] *** Quits: cyberbanjo (~user@2607:fb90:42a5:932d:729f:7d3b:9271:89d4) (Remote host closed the connection)
[14:14:15] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:48:55] *** Quits: cranium (~cranium@user/cranium) (Ping timeout: 252 seconds)
[15:01:50] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[15:04:04] <hayley> gilberth: Would you rather DFAs to closures or bytecode? The former avoids opcode dispatch, the latter avoids so many function calls.
[15:13:54] <hayley> The number of function calls seem to make CL-PPCRE total crap on ABCL and ECL, whereas they run pretty well with one-more-re-nightmare. Though I'd need an opcode vector, and a data vector for values to compare and exit maps too.
[15:15:43] <hayley> Though the data vector shouldn't be much worse for cache than loading stuff in closure environments, I think.
[15:20:18] <gilberth> Good morning #lispcafe!
[15:20:29] <hayley> Good morning gilberth!
[15:21:01] <gilberth> hayley: Let me sip some coffee. Our applications are very different.
[15:22:13] <gilberth> But from experience I would say, that a well written bc interpreter could do. If you really want to avoid the CL compiler.
[15:22:24] <hayley> I suspect I could implement a scanner with minimal changes to the compiler. Just make the compiled code yell at you in case of lossage, rather than trying the next position.
[15:23:25] <gilberth> Remember <http://clim.rocks/gilbert/tiny-bc/benchmark.html> ?
[15:23:43] <gilberth> hayley: A scanner would do way more dispatch.
[15:23:47] <hayley> Yes. And this time I get to declare (safety 0) as I generated the BC.
[15:24:18] <hayley> True, but that doesn't disappear in compiled code.
[15:24:47] <gilberth> I really don't know. But with Go, a BC was faster than nested closures.
[15:25:29] <gilberth> hayley: Well, I have all the time I need to actually compiler. You want a fast online response, I suppose.
[15:25:57] <hayley> Yes, for sufficiently short greps we'd better just interpret the DFA.
[15:26:25] <gilberth> Yep, and you only would have very few instructions in your ISA.
[15:26:33] <hayley> At least affine tags + BC would hopefully make everything fit into L1 cache, without spending too much time optimizing.
[15:26:57] <gilberth> Give it a shot, milady.
[15:27:28] <hayley> Though I found SBCL was slower on SIMPLE-BASE-STRING rather than (SIMPLE-ARRAY CHARACTER 1). Seems SBCL has to unbox the index on every AREF, and doesn't just leave it unboxed.
[15:28:08] <gilberth> You still care for those silly 8-bit characters?
[15:28:22] <hayley> Not really, but recall that a bytecode has bytes.
[15:29:16] <gilberth> A byte could have more than eight bits.
[15:29:54] <hayley> Apparently the Rust NFA interpreter uses 24 byte instructions. https://github.com/rust-lang/regex/blob/master/src/prog.rs#L250-L296
[15:31:50] <gilberth> I'd go with just 32-bit.
[15:32:26] <gilberth> You could nicely fit either a character or two register indexes into that plus an opcode.
[15:32:43] <hayley> Yeah, you're screwed if you need more than, say, 24 bits of jump distance.
[15:33:00] <mfiano> Morning gilberth 
[15:33:09] <gilberth> You're screwed when your DFA has more than 16M states.
[15:33:29] <gilberth> mfiano: Hello!
[15:34:14] <hayley> Though I'm not sure that every element will fit inline, as I don't want to over-specialize the compiler to bytes and characters. But I guess I do specialize already to each "layout", and there'd be layouts that can be packed and layouts that can't.
[15:34:44] <dave0> maw gilberth !
[15:35:00] <hayley> Better, have the byte^Wword code vector and a constant vector. Either grab from the constant vector, or an immediate in the instruction, when doing JE.
[15:35:02] * gilberth claims the space.
[15:35:49] <hayley> Though I'd want two operands...the literal/constant index and the jump distance. Guess it's just two words then?
[15:35:53] <hayley> Still better than 24 bytes!
[15:37:31] <gilberth> hayley: From my experience inline constants were way faster, even if that entails that an instruction is a word. And: Again, characters are 21 bits, you could live with states being 24-bit, and registers 12 bit. Or: Just use a 4-bit opcode, which should be suffice, for 14-bit register addresses and 256M states. This should be more than suffice.
[15:37:52] <hayley> Yeah. But say someone wants to match (unsigned-byte 32)s now...
[15:38:05] <mfiano> I don't think these types of optimizations should be made from observations on a small number of hardware.
[15:38:19] <gilberth> hayley: Yes. An octet code turned out slower for my LAP than just a word-code with constants right in the instruction vector.
[15:38:26] <hayley> It's not likely, and probably pretty stupid, but I'd like to allow it.
[15:38:59] * mfiano realizes we're probably talking about LM emulation
[15:39:07] <hayley> mfiano: Well, the only real assumption we're making is "memory is slow, try to hit cache when possible". And this is generally true.
[15:39:37] <gilberth> mfiano: No. hayley wants to avoid the CL compiler and we are talking about executing DFAs.
[15:39:40] <hayley> LM = Linear regex engine with submatches Machine?
[15:39:52] <mfiano> Lisp Machine (CADR)
[15:40:23] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[15:40:29] <gilberth> LRESM?
[15:41:00] <hayley> LM = "It's a MeeeeEEEEEEEEEAAAAAALY machine! It's a moooOOOOOOOOOnad!!" - Joe Armstrong
[15:41:35] <hayley> https://youtu.be/ed7A7r6DBsM?t=2143
[15:41:38] <gilberth> Yep. Is a Mealy automation a DFA? What's the definition?
[15:42:01] <hayley> "I learnt a big word yesterday." - Joe
[15:42:05] <gilberth> I'd say it's still finite.
[15:43:17] <hayley> Reminds me that I basically copied the idea of specifying a protocol with types and a FSM from this presentation, and then someone came up with the idea of just hashing the types in order to get a universal protocol identifier.
[15:43:31] *** Joins: makomo_ (~makomo@user/makomo)
[15:43:33] <gilberth> mfiano: For the CADR, I might want to play with compiling the microcode via C to machine code.
[15:45:15] <gilberth> hayley: Anyhow. Here is my hunch: Use a BC and have constants inline in 32-bit instructions, and give it a shot. 400MIPS should be easy to achieve. Perhaps even more.
[15:45:24] <hayley> Sure.
[15:45:54] <hayley> Probably easier than having 24 byte instructions; that shit doesn't even line up on cache lines.
[15:46:17] <gilberth> My B32 (ttl cpu) simulator runs at >800MIPS. With an indirection in each instruction even, as the ISA has no immediates.
[15:46:43] <dave0> gilberth: i like your B32 ! it is awesome
[15:46:54] <gilberth> hayley: Yep. And you fetch once and have the op and the immediate.
[15:46:54] * hayley puts https://www.youtube.com/watch?v=IJr61z44m6c on jukebox yet again.
[15:47:33] <gilberth> dave0: Yes, I still have to construct it. But I make progress and get better each day on average.
[15:47:44] <hayley> My test-and-branch would have another operand, but it'd usually be about the same.
[15:47:54] <gilberth> Where is ixelp? I really need to make it reconnect automatically.
[15:48:46] <gilberth> hayley: What about a SKIP-IF-BLAH? I don't know.
[15:49:11] <hayley> I thought about it, but then you'd need two instruction decodes on one path. Hard to tell.
[15:49:55] <hayley> So, register-register assignment, register-position assignment, increment position, compare and branch, test EOF, win, and lose?
[15:50:02] <gilberth> Right. Well, in general I don't like ISAs with SKIPy instructions. You need to bench. This was just an idea.
[15:50:07] <hayley> Also unconditional branch too.
[15:50:31] <hayley> 8 instructions!
[15:50:36] <gilberth> register = P + constant?
[15:50:59] <gilberth> hayley: Yes, and that should roam. The less instructions the faster the BC from my experience.
[15:51:29] <hayley> Guess so. Though I said no global analysis...eh, length inference is fast enough. I just don't have a P + c pass.
[15:52:03] <gilberth> You could add it later.
[15:52:28] <dave0> is hayley targetting your B32 ?
[15:52:31] <hayley> Well, I still have 8 instructions to go for 4 bits.
[15:52:33] <hayley> dave0: Nope.
[15:52:45] <gilberth> hayley: How would you handle the PSETQ needed?
[15:53:48] <hayley> I don't have any PSETQs, everything is fine to do sequentially.
[15:54:06] <gilberth> hayley: Oh! Really?
[15:54:27] <hayley> Not sure how exactly. But I really just don't have any.
[15:55:18] <gilberth> Interesting. This surprises me. *scratcheshead* .oO(Do I even have PSETQ?)
[15:56:54] <hayley> I recall thinking about it once, but AFAICT my affine tags just never create any tags where we flip between e.g. t^0_0 and t^0_1 without a temporary.
[15:57:39] <gilberth> And with just 8 instructions you could even ditch a jump table, a binary search could be faster, though I believe modern CPU even do bracnh-prediction on indirect jumps.
[15:58:22] <gilberth> Something I proposed to my prof in like '97 and he thought that branch prediction on indirect jumps were neither feasible nor a good idea. So much for that.
[15:58:33] <hayley> IIRC binary search was faster than SBCL's jump tables for the Netfarm VM.
[15:58:41] <gilberth> ok
[15:59:01] <hayley> But I admit that I can't think of a RE which would generate such a loop now.
[15:59:03] <mfiano> Is netfarm still being developed?
[15:59:03] <gilberth> How wide is the Netfarm opcode?
[15:59:14] <hayley> gilberth: One byte.
[15:59:42] <hayley> mfiano: No. See http://lettingthedaysgoby.altervista.org/stuff/winter-21.html if you want a list of things tangetically related to why.
[15:59:54] <gilberth> hayley: When your regex starts with a constant in like "foo", you will have a tight loop searching for the #\f.
[16:00:33] <hayley> I suppose I could still afford "interpreting" BMH with lookup tables.
[16:01:05] <gilberth> hayley: And then there are still equivalence classes of characters. lex(1) uses that to "compress" the machine. I don't do that though, turned out to be not a win.
[16:02:29] <gilberth> It would go like q' = q[equivlance[nextinput]]
[16:02:48] <mfiano> "and I got in a lot of trouble for that" -- do tell.
[16:03:08] <gilberth> But that was feasible with 8-bit characters, no so with 21-bit characters.
[16:03:21] <hayley> I got banned from r/lisp, and was told my reaction was disappointing by someone close-ish.
[16:04:01] <gilberth> hayley: For real? Well, I guess that will be a time saver for you then. ;)
[16:05:24] <hayley> gilberth: Hand-wavy proof of why I don't need psetq: We don't reuse tag numbers when doing derivatives, only keeping them live where possible. So no loops there. Next, fixing up to reuse loops is the inverse of some composition of such derivatives, which also does not reuse. As such, it's fine to just append the two and have a sequential SETQ.
[16:05:33] <hayley> gilberth: Only for a month, sadly.
[16:06:26] <gilberth> hayley: Ok. I neve proofed it, but, yes, that feels like being true. Thanks!
[16:06:35] <hayley> (Or, rather, tag numbers are monotonically increasing, so no loops. In any case, we could only reuse numbers if the tags were proven dead, which precludes a loop.)
[16:06:38] <gilberth> * have NOT
[16:07:25] <gilberth> hayley: Sure, sure. I'd give it some thought. Should be possible to proof. Curious, I missed that.
[16:08:17] <hayley> Hm, that said, proving variables being killed on a local scale is probably how you mess it up. idk
[16:08:45] <gilberth> "We don't need a PSETQ here because .. [23]" "References [23] Personal communication on #lispcafe."
[16:09:30] <hayley> Last I checked, you include the name of the person. (:
[16:10:21] <gilberth> Of course, I'll do.
[16:12:40] <gilberth> All my TCP connections to my MacMini broke over night, and I already said in system preferences, that it should not sleep. Guessed I missed sth.
[16:13:40] <gilberth> I said "Put computer to sleep: Never" Is there another "never"?
[16:15:30] <gilberth> hayley: Is there a fundamental difference between a BC and just interpreting the DFA itself?
[16:16:41] <hayley> Locality of reference?
[16:18:05] <gilberth> What happens if you stash the whole DFA into just one vector with relative pointers?
[16:18:24] <hayley> What's the difference between that and BC?
[16:18:40] <gilberth> I was just asking and wondering.
[16:18:51] <hayley> Well, there would be a difference, but IMO basically the same thing.
[16:19:27] <hayley> Though having DFA states would avoid some noise about instruction decoding and tests. Sure.
[16:19:49] <gilberth> Anyhow, give it a shot. I am very interested to know how performance compares to compiled code.
[16:22:06] <mfiano> 'Selling Lisp by the Pound' omission of 'is' in '...and the way in which this handled...'
[16:22:38] <gilberth> I want a file system that knows that a file was in a tar archive xyz downloaded from thereandthere.
[16:24:06] <semz> just finished Selling Lisp by the Pound, pretty solid summary of the problem imo
[16:25:59] <Gnuxie> Did it get posted somewhere? 
[16:26:18] <hayley> In Winter '21.
[16:26:26] <Gnuxie> Oh 
[16:26:51] <Gnuxie> Oh it is not winter 21 yet 
[16:27:08] <hayley> Here, winter finished a month ago.
[16:27:37] <Gnuxie> Oh there is Australia 
[16:28:22] <hayley> gilberth: Small problem, come to think of it. We have sets of {a,b,c} and negative sets {x : x \notin {a, b, c}}. Not sure how to handle negative sets immediately, but I would guess we only have one negative set at a time.
[16:28:42] * hayley complains that matrix ate the backslash n.
[16:30:37] <hayley> I'd need to re-read my own DERIVATIVE-CLASSES and Owens, but I suspect that to be the case.
[16:33:22] <mfiano> I too enjoyed 'Lisp by the Pound', particularly the part about ugly/fast not being mutually exclusive. I never really thought about that before.
[16:33:28] <gilberth> hayley: Have you looked at my ISUM datatype? It handles complements just fine.
[16:33:34] <mfiano> hayley: Great job!
[16:34:16] <gilberth> hayley, and besides your domain is known and finite.
[16:35:12] <hayley> gilberth: I should, but the idea is that, supposing I have IF X = a GO b ELSE IF X = c GO d ... ELSE GO z then I need to reframe things that way. Else, I have to pick a better dispatch method.
[16:35:50] <gilberth> hayley: I have (isum-complement (isum-range 100 200)) => (NIL 100 200)
[16:36:18] <hayley> Sure. I probably should have an isum one day, but the general idea still holds to me.
[16:36:34] <gilberth> You want (if (< x a) (go there)) to handle ranges like [a-z]
[16:37:03] <hayley> ...that I have to be careful about representation. Though a triple <negative, low, high> could work.
[16:37:07] <gilberth> And do it like a binary search.
[16:37:15] <hayley> Ah yeah.
[16:37:35] <gilberth> hayley: Just borrow my ISUM datatype. It's general, compact and fast.
[16:38:18] <mfiano> Second to last paragraph, I would mention the plethora of semantics-altering generic function metaclass libraries to bring static dispatch. That totally breaking the "system" aspect.
[16:38:26] <mfiano> hayley: ^
[16:38:31] <hayley> mfiano: Well, more that I'd rather have "ugly and fast or pretty and slow" rather than "ugly and fast or still ugly and slow", and C/C++ gives you the latter.
[16:39:01] <hayley> Sure!
[16:39:17] <mfiano> s/breaking/breaks/
[16:39:33] <gilberth> http://clim.rocks/gilbert/isum.lisp ;It even has comments.
[16:39:57] <Gnuxie> When someone putting it on HN to stir the pot a bit 
[16:40:08] <mfiano> Very nice article, and you convey a lot of my thoughts that I couldn't put into as nice of words for years.
[16:40:08] <hayley> Beautiful. /me just needs to hash cons.
[16:40:29] <gilberth> Or <http://clim.rocks/gilbert/isum-case.lisp> for isum-case, which does binary search and dispatch.
[16:40:29] <Gnuxie> I feel like /r/lisp would finally ban you 
[16:40:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[16:40:47] <hayley> I didn't think my words were very nice, but sure.
[16:41:38] <dave0> nite all
[16:42:01] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:42:58] <hayley> Calling most Lisp derived languages terrible, one repository a "big fucking lie", claiming Clojure programmers say "Fuck it, we don't need identity anyway", claiming one is up shit's creek for debugging sometimes...
[16:43:10] <hayley> I could write a PG-rated version.
[16:44:46] <mfiano> Did you see my typo to correct above?
[16:45:11] <hayley> Yes, thanks.
[16:46:53] <hayley> (That's PG as in "no swear words", it's probably not Paul Graham friendly.)
[16:48:01] <mfiano> I boosted it along the webosphere
[16:51:24] <hayley> Well, thanks. Though I wonder if I should be terrified, as it probably comes off as peak smug CL weenie.
[16:51:24] *** Joins: cranium (~cranium@user/cranium)
[16:52:30] <hayley> It really is, of course, but it's not an attractive look, y'know?
[16:52:47] <mfiano> Sometimes the truth is ugly.
[16:53:14] <hayley> Sure. Still, people shoot the messenger.
[16:53:28] <mfiano> It is something people should read regardless. Better than spoonfeeding them bullshit by the pound.
[16:55:20] <hayley> (What's funny is that, about a week after getting unbanned, I was made an "approved user" of r/lisp. It's pointless until they restrict posting...maybe it bypasses the spam filter, I dunno. But that happened.)
[16:56:51] <mfiano> ha
[16:57:47] <hayley> Well, it is about 00:30 so I'm going to go sleep. Good luck!
[17:00:02] <Gnuxie> there's probably one moderator who doesn't like you and the rest don't care 
[17:04:36] <hayley> gilberth: One inconsequential counter example: suppose we have a transition from a state to itself, and we have the assignment [B <- A] due to the derivative. Then we compute the inverse as [A <- B], and we note that (given B is dead) this is a no-op. So we aren't exactly looking for a loop, I think. I dunno.
[17:05:50] <gilberth> We would need for sth like [A <- B, B <- A] could that happen?
[17:07:04] <hayley> I can imagine it happening if you don't do affine tags with e.g. a*
[17:08:02] <gilberth> Hmm. (?:(a)a)* ?
[17:08:25] <gilberth> Nah. (?:(a)a?)
[17:08:31] <hayley> The derivative of [B <- A]a* is [C <- B]a*. Then we spot reuse, and come up with [A <- B][B <- A]a* = a*
[17:08:36] <hayley> Fucking Markdown!
[17:08:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:08:57] <gilberth> hayley: Nice.
[17:09:03] <hayley> It's not even consistent between the phone and desktop...
[17:09:27] <gilberth> Which markdown do you use?
[17:10:19] <mfiano> Ok I finished all my PR for the day. Forgot game jam begins tonight too :)
[17:10:23] <hayley> Not sure, the markdowns that the element.io developers use.
[17:11:08] * edgar-rft is getting depression from all that markdowns
[17:11:26] <hayley> mfiano: Still, for you, it seems like a risky move if you also run the Lisp game jam(?). Meanwhile I'm probably established as a grump by now.
[17:13:16] <mfiano> I don't think so. Also I am likely going to restructure the Lisp Game Jam in a future installment to be about Common Lisp. People using Foolang in Lisp's clothing is getting old, and doesn't help anyone imo.
[17:13:30] <mfiano> We get tons of those types of submissions
[17:13:41] <hayley> Well, okay.
[17:14:18] <mfiano> Besides it's already on Reddit, HN, Lobsters, and fedi
[17:14:24] <hayley> Again, best of luck. I honestly don't wish my situation on anyone.
[17:14:26] <mfiano> Can't stop it now!
[17:14:52] <gilberth> Not everything that uses parenthesis is a Lisp, indeed.
[17:15:33] <hayley> "So you have chosen death" or something.
[17:16:58] <hayley> "Ah yes, Hayley Patton the whiny little bitch from don't build your own lisp [1], another classic article in the tradition of smug lisp weenie elitism"
[17:17:15] <gilberth> lol
[17:17:43] <mfiano> I really do not mind ridiculing Clojurists. I think it's the worst thing that has come to Lisp.
[17:17:43] <mfiano> Heh, well I will tell it like it is. I'm not one to put on a plastic smile. If people don't like me for that, who cares.
[17:18:11] <hayley> Very hardcore.
[17:18:20] <gilberth> BTW my license plate reads PLÖ-GB-1337 :)
[17:18:57] <mfiano> Factual truth should be heard, even if that means upsetting some people. People get upset over everything these days. It's not going to make me change who I am.
[17:19:00] <gilberth> So I am fine being called an elitist.
[17:19:24] <hayley> But I think I am looking for another property other than "assignments don't loop". I just can't think of what it is.
[17:20:26] <mfiano> hayley: Don't sell yourself so short.
[17:21:05] <hayley> Well, there's still only one assignment to a variable in the code (a requisite for affine tags, also for RE states too). But that's uninteresting.
[17:21:34] <hayley> Thanks. I still just don't imagine this going too well.
[17:22:41] <mfiano> Then we do it again and repeat until people pull the stick out of their ass and the shit out of their eyes.
[17:22:48] <hayley> Even if it's the truth (dunno, I think I'm somewhat too aggressive), and even if it's right, that's not going down nicely with anyone. Though "Hell is other people's REPLs" was similar.
[17:22:53] <hayley> Wow!
[17:25:37] <mfiano> Well I have a lot of thoughts that have piled up in recent years that can't justify my reasoning in a short amount of time.
[17:26:55] <mfiano> What drove the article home for me, was the link to borodust's stuff.
[17:27:57] <mfiano> I have been against that model for years, and have been telling him so. It provides little to no utility in the longterm.
[17:27:57] <hayley> Yeah, surely that's not going down either. I've also already bickered with borodust before, and I don't write games, so I can safely just not work with those people.
[17:29:32] <hayley> Really, yes, I write what I write because I don't feel like I can lose any more. I can critique "ethical software" cause they haven't even heard of me, I can talk shit about Lisp cause I don't usually go anywhere other than #lispcafe and #sicl...
[17:30:06] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:30:13] <mfiano> I saw the article in a positive light.
[17:30:35] <mfiano> It mocked other Lisps yes, but ones that ignore the true power of Lisp.
[17:30:51] <mfiano> But it explained what true power is and why it isn't going away.
[17:31:12] *** Joins: makomo_ (~makomo@user/makomo)
[17:31:31] <hayley> Okay, attempt #2: We can't have loops involving variables which are still live, which means that we can't kill the loop if we wanted to.
[17:32:25] <mfiano> McCarthy himself said Lisp must have a GC in his description of Lisp. One can not just wrap parentheses are C code.
[17:32:34] <hayley> I have a similar "normalization" problem with affine DFAs, you could turn φ(A + B) into φA + φB and be seemingly non-linear. But we can normalize to a linear form, so it's morally okay.
[17:32:46] * hayley still isn't sleeping until she works out this proof sadly.
[17:32:56] * mfiano will shut up then
[17:33:55] <hayley> Well, you could copy everything. It wasn't until later that we got mutable conses and thus object identity.
[17:35:13] <hayley> But I think this "normalization" property nails the requirement for not PSETQing. So, at 1:05am I may finally sleep
[17:35:49] <hayley> Night!
[17:36:49] <gilberth> Take care!
[17:38:10] <mfiano> Night
[17:39:46] *** Parts: treflip (~user@95.79.32.99) (ERC (IRC client for Emacs 27.2))
[17:47:10] *** Joins: robin_ (~robin@user/terpri)
[17:47:39] *** Quits: robin (~robin@user/terpri) (Ping timeout: 265 seconds)
[17:47:50] *** Quits: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it) (Read error: Connection reset by peer)
[17:47:58] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[17:48:24] *** Joins: robin_ (~robin@user/terpri)
[17:51:59] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[17:52:57] *** Joins: robin_ (~robin@user/terpri)
[17:53:28] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[17:54:00] *** Joins: robin_ (~robin@user/terpri)
[18:03:31] *** Joins: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it)
[18:07:59] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[18:08:34] *** Joins: robin_ (~robin@user/terpri)
[18:09:29] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[18:10:04] *** Joins: robin_ (~robin@user/terpri)
[18:16:15] *** Quits: robin_ (~robin@user/terpri) (Read error: Connection reset by peer)
[18:17:03] *** Joins: robin (~robin@user/terpri)
[18:42:07] *** Quits: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[18:53:07] *** Joins: treflip (~user@95.79.32.99)
[18:54:18] *** Joins: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it)
[18:54:52] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:55:31] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:56:10] *** Quits: treflip (~user@95.79.32.99) (Client Quit)
[18:58:33] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[18:59:56] *** Joins: aeth (~aeth@user/aeth)
[19:05:12] <gilberth> Ok. Using READ-^DLINE, I am at like 100kB/s read speed over Chaosnet. That's still like 351 cycles per character.
[19:05:48] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[19:06:03] *** Joins: robin (~robin@user/terpri)
[19:06:52] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[19:07:09] <gilberth> But that should be suffice, my 486 machine wasn't any faster at reading IIRC
[19:07:09] *** Joins: robin (~robin@user/terpri)
[19:09:33] <mfiano> hit the turbo button
[19:13:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:19:42] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:19:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:19] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:21:59] <gilberth> mfiano: My CADR emulator already has a TURBO button. I could at an option pace it to the original 5MHz clock speed.
[19:36:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:38:51] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[19:41:40] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:44:01] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:44:01] *** Joins: sp (~sp@user/susam)
[19:46:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:47:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:47:53] <Alfr> Wasn't it running many times too fast some days ago, gilberth? I think you rather need a slow down button. :)
[19:54:50] <copec> People conflate S-expressions with being a Lisp
[19:59:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:03:44] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:06:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:11:21] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[20:26:13] *** Joins: mala (~mala@user/malaclyps)
[20:41:19] <gilberth> Alfr: What ever you call it. I could pace it 200ns per cycle, which is the original speed, to experience how fast^Wslow the real thing was. I could also slow down the virtual disk. What was too fast, was the emulated hardware, generating an interrupt at the very time an action was queued from the perspective of the CADR, the microcode wasn't expecting this.
[20:47:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:47:14] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:47:59] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[20:49:03] <gilberth> w/o TURBO I am 5k/s. Poor. Was the machine really that slow?
[20:53:09] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[21:03:16] <gilberth> That can't be right. Hmm.
[21:07:00] *** Joins: makomo_ (~makomo@user/makomo)
[21:17:44] <Alfr> gilberth, that was just me randomly commenting -- which I sometimes do, when not too busy. ;)
[21:22:48] *** Joins: LispyLights (~LispyLigh@user/lispylights)
[21:23:05] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Killed (NickServ (GHOST command used by LispyLights)))
[21:23:11] *** LispyLights is now known as Aurora_v_kosmose
[21:27:39] <clothespin> good morning
[21:28:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:33:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:45:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:14:23] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[23:19:35] <dimadima> good afternoon
[23:19:44] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:27:27] <ck_> and good night
[23:35:15] <gilberth> Night? Not to my definition.
[23:35:44] <gilberth> Anyhow, while interrupts are disabled, interrupts are just discarded by the CADR emulator, which doesn't seem right.
