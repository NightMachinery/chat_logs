[00:01:17] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.117) (Quit: mikoto-chan)
[00:08:13] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:11:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[00:11:47] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[00:13:01] *** Joins: solomon (~solomon@cpe-76-168-7-139.socal.res.rr.com)
[00:14:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:24:19] *** Quits: MQ-17J (~MQ-17J@2607:fb90:884d:3b56:d10e:dfdb:4d5e:86f1) (Read error: Connection reset by peer)
[00:24:37] *** Joins: MQ-17J (~MQ-17J@8.6.144.197)
[00:30:39] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:32:39] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[00:35:28] *** Joins: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[00:36:04] *** Joins: jle` (~justin@cpe-23-240-75-236.socal.res.rr.com)
[00:37:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:40:35] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 264 seconds)
[00:41:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[00:43:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[00:47:40] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[00:48:43] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Quit: Leaving)
[00:53:39] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[00:54:11] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[00:55:59] *** Quits: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl) (Ping timeout: 260 seconds)
[00:56:13] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[00:59:01] *** Quits: solomon (~solomon@cpe-76-168-7-139.socal.res.rr.com) (Ping timeout: 256 seconds)
[00:59:27] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:01:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[01:02:32] <jackdk> Conduit question: I have a ConduitT () ByteString m r representing a large file, and I want to process it in chunks, where each chunk is between some minimum and maximum (constant) number of bytes. I feel like I would want to write a function like `chunksBetween :: Monad m => Integer -> Integer -> ConduitT i ByteString m r -> ConduitT i (ConduitT i ByteString m ()) m r` that streams smoothly from the input conduit.
[01:02:53] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:03:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:03:53] <maerwald> jackdk: too bad you're not using streamly :D
[01:04:02] <maerwald> https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html#v:chunksOf
[01:04:11] <jackdk> Pipes appears to have this operator in `pipes-group`, as some kind of crazy lens that lets you look at it as a `FreeT` or something, and I can't make heads or tails of it. Streaming looks like it could give you a `Stream (Of (Stream (Of o))`, which is what's driving my intuitions about where I want conduit to go. The other option would be conduit's connect-and-resume `SealedConduit` stuff, but the library I'm using only accepts a conduit
[01:05:20] <maerwald> jackdk: https://hackage.haskell.org/package/conduit-1.3.4.2/docs/Data-Conduit-Combinators.html#v:chunksOfE
[01:05:22] <maerwald> ?
[01:08:32] <juri_> hmm. if you've got a test suite written using quickcheck and `shouldbe` from hunit, is there a way, when a test is falsifiable, to see the sets of values that didn't fail?
[01:08:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:09:31] *** Joins: neotod (~manjaro-u@95.85.66.41)
[01:09:41] *** Quits: neotod (~manjaro-u@95.85.66.41) (Client Quit)
[01:11:03] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[01:11:52] <jackdk> maerwald: right, now the full hardmode context. I'm helping Axman6 with amazonka-s3-streaming. The high-level goal: create a multipart upload in S3, and perform upload part requests such that each chunk is between some minimum and maximum size. amazonka can accept a conduit describing the body to upload. This makes me think about generating a stream of conduits, where each one streams from the outer conduit with minimal rechunking
[01:12:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[01:13:30] <maerwald> multipart upload works easier from the frontend side :p
[01:13:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:13:44] <jackdk> maerwald: ?
[01:13:58] <maerwald> yep, you can do multipart upload from the fronted to S3
[01:14:13] <maerwald> with a tokenish link
[01:14:20] <maerwald> I forgot the details
[01:14:21] <jackdk> I mean sure, but also this library is a tool that is useful to people
[01:14:26] <maerwald> yeah sure
[01:14:48] <maerwald> but it's less efficient, in a way
[01:15:02] <maerwald> because you stream to the backend and then from the backend to S3
[01:15:23] *** Quits: ubert (~Thunderbi@178.115.36.180.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[01:15:42] <jackdk> that's only if amazonka-s3-streaming is used in the context of a webapp, no?
[01:15:48] <maerwald> yeah
[01:16:05] <jackdk> we want minimal unnecessary rechunking at the S3 multipart upload level (so like if we're just under our target part size, just throw the next chunk in - don't split it), and also once the first part is uploaded, we need to be able to send the remainder of the conduit to the next part
[01:16:24] <jackdk> and do that without buffering an entire part's worth of chunks
[01:16:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Ping timeout: 264 seconds)
[01:17:07] <maerwald> yeah, I don't think that exists... there's only chunksOfE and chunksOfExactlyE
[01:18:01] <jackdk> juri_: I don't use quickcheck but is there a setting that controls general test verbosity? I wonder if the `shouldbe` stuff is a red herring?
[01:18:21] <maerwald> https://hackage.haskell.org/package/conduit-1.3.4.2/docs/src/Data.Conduit.Combinators.html#chunksOfE
[01:18:27] <maerwald> but you can probably just leverage the code
[01:19:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:391b:b1e6:7bfa:182e) (Remote host closed the connection)
[01:19:53] *** Joins: Null_A (~null_a@2601:645:8700:2290:391b:b1e6:7bfa:182e)
[01:24:30] <jackdk> right, but there are two levels of grouping going on here - I want to group the ByteStrings in such a way that I send between minPartSize and maxPartSize to each amazonka upload-part request. Then within each part, I want to emit at least minChunkSize chunks
[01:25:04] *** Quits: fendor (~fendor@77.119.200.17.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[01:25:57] <jackdk> and do this two-level grouping without buffering each part, and with a minimum of reallocations
[01:27:46] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[01:34:43] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:35:11] *** Quits: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr) (Ping timeout: 260 seconds)
[01:35:43] <maerwald> jackdk: do you have a link to the ticket/PR?
[01:36:17] <jackdk> there isn't one yet, Axman6 and I have been hashing it out 1-1
[01:36:42] <jackdk> (chunkedbody uploads have been broken in amazonka for a while anyway, so this stream grouping stuff hasn't even been an option yet)
[01:36:48] *** Quits: jespada (~jespada@181.28.253.200) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:37:07] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:37:14] <maerwald> that's why I went with frontend-side uploads back when I needed that
[01:39:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:39:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:39:48] *** Joins: wroathe (~wroathe@user/wroathe)
[01:40:35] *** Quits: emf (~emf@2620:10d:c090:400::5:b46d) (Ping timeout: 264 seconds)
[01:40:49] <maerwald> https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createPresignedPost-property
[01:40:52] <maerwald> that one
[01:42:16] *** Joins: emf (~emf@2620:10d:c091:480::1:1c3a)
[01:46:48] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[01:50:17] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[01:51:06] *** justHaunt is now known as justache
[01:52:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[01:56:27] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[01:56:46] *** Quits: emf (~emf@2620:10d:c091:480::1:1c3a) (Ping timeout: 245 seconds)
[01:59:08] *** Joins: emf (~emf@2620:10d:c090:400::5:5ca4)
[02:02:16] *** Quits: alx741 (~alx741@181.196.69.72) (Quit: alx741)
[02:02:30] *** Quits: ouroboros (~ouroboros@user/ouroboros) (Quit: Bye.)
[02:02:55] *** Joins: neotod (~manjaro-u@95.85.66.41)
[02:03:17] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[02:03:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[02:05:29] *** Quits: michalz (~michalz@185.246.204.125) (Remote host closed the connection)
[02:20:59] *** Quits: neotod (~manjaro-u@95.85.66.41) (Quit: Konversation terminated!)
[02:22:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-053.wadham.ox.ac.uk) (Remote host closed the connection)
[02:23:27] *** Quits: Null_A (~null_a@2601:645:8700:2290:391b:b1e6:7bfa:182e) (Remote host closed the connection)
[02:26:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:27:54] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:30:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:33:57] <Axman6> To be clear, I am also ok with just storing data in memory in a Builder and writing it out - the amount of data in memory should be bounded (though might have some issues if someone maliciously sends very large bytestring - someone like jackdk)
[02:35:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[02:37:15] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[02:46:36] *** Quits: Guest82 (~Guest82@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:49:20] <Axman6> (To be more clear, jackdk is not (necessarily) malicious, but he did think about this possibly being a problem)
[02:49:55] *** Quits: jle` (~justin@cpe-23-240-75-236.socal.res.rr.com) (Quit: WeeChat 2.7)
[02:50:47] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d5160a532b196255ee8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:54:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[02:56:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[02:59:24] *** Joins: solomon (~solomon@cpe-76-168-7-139.socal.res.rr.com)
[03:07:28] <jackdk> It's more that I am always willing to troll Axman6 
[03:07:59] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:07:59] <Axman6> chaotic good
[03:08:23] <jackdk> but also that the maximum size of a multipart upload part is 5GB, and if we could stream parts of that size rather than buffer 5GB, that'd be grand
[03:09:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:10:32] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 258 seconds)
[03:10:42] *** Quits: kayprish (~kayprish@46.240.130.158) (Remote host closed the connection)
[03:13:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[03:13:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:13:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:13:29] *** Joins: wroathe (~wroathe@user/wroathe)
[03:13:30] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (Ping timeout: 260 seconds)
[03:18:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[03:19:46] <Axman6> yeah - need to add something to cap that chunksize too...
[03:20:36] <Axman6> so... a lot of these problems could be fixed with threads and channels potentially
[03:20:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:22:14] <Axman6> stream in bytestring chunks, fork a thread for each upload chunk when needed then push chunks into the channel. in the thread, making a conduit which reads from the channel is pretty easy and would allow concurrent upload and input. at the moment they're interleaved which isn't ideal
[03:22:34] *** Joins: fluffyballoon (~user@131.93.208.196)
[03:22:44] <Axman6> if I bound the size of the channel then it should provide the appropriate backpressure to prevent filling up ram if something going wrong
[03:23:31] *** Quits: solomon (~solomon@cpe-76-168-7-139.socal.res.rr.com) (Quit: Client closed)
[03:24:37] *** Joins: PuzzledSA (~PuzzledSA@cache0-req.hlcrwi.sol.net)
[03:27:17] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[03:32:56] <PuzzledSA> Good day, I had a question about installing ghc and cabal-install from source.  For various reasons, it is impractical to use prepackaged versions, and I need it to be installed in /opt.  I've successfully bootstrapped ghc (using a prepackaged version on a temporary system to build it) along with Cabal libs, but could find no clear instructions,
[03:32:57] <PuzzledSA> muddled through some of cabal-install and dependencies, and got stuck on ghc-prim with an error I don't understand.  I'm more of a sysadmin than a developer and was hoping someone could interpret this for me? 
[03:36:20] <PuzzledSA> I had been doing "runhaskell Setup configure --prefix=/opt; runhaskell Setup build; runhaskell Setup install" inside each package, and have installed Cabal, echo, network, th-compat, network-uri, HTTP, hashable, async, base16-bytestring, resolv, zlib, cryptohash-sha256, splitmix, random, edit-distance, and base64-bytestring successfully. Upon
[03:36:21] <PuzzledSA> trying to build ghc-prim as a dependency for ed25519, I came up against "Setup: Error: could not find module: GHC.CString with any suffix: ["hi"] in the search path: ["dist/build"]
[03:38:37] <PuzzledSA> If anyone has a pointer to a recent set of instructions on how to build this from source, or can explain what needs to happen to correct the error I'm seeing, I'd be grateful.
[03:41:56] <geekosaur> if you have ghc then it should have installed ghc-prim along with it
[03:44:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[03:44:24] <geekosaur> so this suggests something is wrong with your ghc install, or you are simply trying to install a package that cannot be installed standalone like that
[03:44:51] <geekosaur> ghc-prim should be listed in `ghc-pkg list --global`
[03:45:27] <geekosaur> (I don't think ghc-prim can be installed from outside the GHC source tree)
[03:47:14] <PuzzledSA> looking...  thanks.  It does look like ghc-prim 0.6.1 is installed.  Let me chase down dependencies here and see what the reason is for this.
[03:47:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:48:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:48:29] <geekosaur> (also, welcome! I'm an ex-sysadmin myself.)
[03:49:08] *** Lord_of_Life_ is now known as Lord_of_Life
[03:50:03] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[03:50:38] <PuzzledSA> cabal-install-3.6.0.0 is asking for hackage-security >=0.6.0.1 && < 0.7.  hackage-security-0.6.0.1 wants ed25519 >= 0.0 && <0.1.  ed25519 wants ghc-prim >=0.1 && <0.5, so the installed version of 0.6.1 does not fulfill the dependency
[03:51:13] <PuzzledSA> I'm totally unfamiliar with Haskell but totally familiar with dependency hell (thanks, Perl, Node, PHP, etc. heheh)
[03:51:28] <geekosaur> thatâ€¦ sounds odd. afaik 3.6.0.0 and deps shouldbuild with ghc 8.10.7 and its ghc-prim
[03:51:50] <sclv> wait are you trying to build cabal with ghc 9?
[03:52:06] <geekosaur> 0.6.1 is with my 8.10.7
[03:52:12] <PuzzledSA> this is ghc-8.10.7
[03:52:53] <sclv> ah ok maybe try a newer cabal install? 3.6.2.0?
[03:53:25] <PuzzledSA> it is possible something went awry during the bootstrap, I suppose, I had to use ghc-8.6.3 to boorstrap
[03:53:35] <PuzzledSA> aaaaah bootstrap
[03:56:31] <PuzzledSA> 3.6.0.0 is the latest listed on the downloads page at https://www.haskell.org/cabal/download.html
[03:57:17] <PuzzledSA> trawling round...
[03:57:27] <sclv> yeah we need to update that sigh. You can find the newer in the dir structure but it shouldnâ€™t matter
[03:57:38] <sclv> For bootstrapping look at the github repo
[03:57:50] <PuzzledSA> ok found https://hackage.haskell.org/package/cabal-install-3.6.2.0/cabal-install-3.6.2.0.tar.gz
[03:58:00] <PuzzledSA> lemme give this a shot
[03:58:06] <sclv> Thereâ€™s scripts there, in the repo
[03:58:38] <sclv> https://github.com/haskell/cabal/tree/master/bootstrap
[03:59:01] *** Joins: op_4 (~op_4@user/op-4/x-9116473)
[04:00:14] <op_4> does anyone have a resource/quick explanation for what monad transformers are, assuming i know sufficiently much category theory?
[04:02:05] <PuzzledSA> Unfortunately the target machines do not have direct Internet access so git is a bit painful.  cabal-install-3.6.2.0 has the same dependency on hackage-security >=0.6.0.1 && <0.7
[04:02:36] <geekosaur> op_4, imo you don't need category theory to understand monad transformers
[04:03:34] <op_4> geekosaur: ah, sorry, perhaps i misrepresented my stance: what if i want to know what monad transformers are, categorically? :p
[04:03:39] <geekosaur> https://www.fpcomplete.com/haskell/tutorial/monad-transformers/ https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.71.596&rep=rep1&type=pdf
[04:04:04] <geekosaur> not sure they have one, they're more of an adaptation to haskell limitations I think
[04:04:13] <geekosaur> just as haskell monads are not full CT monads
[04:04:37] <op_4> geekosaur: ok, great, that's useful to know too. Thanks for the links!
[04:04:48] <jackdk> "endofunctors on the category of monads", perhaps? https://hackage.haskell.org/package/mmorph-1.2.0/docs/Control-Monad-Morph.html
[04:04:59] *** Quits: xff0x (~xff0x@2001:1a81:53d3:900:4e53:4d86:e32e:4caf) (Ping timeout: 260 seconds)
[04:05:02] <jackdk> I don't know CT well enough to say - I'm just banging words together
[04:05:33] <op_4> geekosaur: what do you mean they're not actually monads? Is this something like laws for unit and multiplication aren't actually enforced?
[04:05:47] *** Quits: Cale (~cale@2607:fea8:995f:d3e0:a7e3:45a3:f953:e812) (Ping timeout: 264 seconds)
[04:05:50] <op_4> jackdk: interesting, thanks, that certainly seems reasonable
[04:05:50] *** Joins: xff0x (~xff0x@2001:1a81:53d3:900:1ab0:e69a:7282:ec2c)
[04:06:07] <geekosaur> more like they're limited to the (pseudo)category Hask instead of all categories
[04:06:41] <geekosaur> that is, theyy are only defined in the not-quite-a-category of Haskell types
[04:08:31] <PuzzledSA> okay, I see what may be the issue here.  The webpage for ed25519 at https://hackage.haskell.org/package/ed25519 describes the ghc-prim dependency as >= 0.1 && < 0.7  but when I run the configure in ed25519-0.0.5.0 it says the dependency is >= 0.1 && <0.5
[04:08:45] <op_4> geekosaur: oh, sure. i don't know that this robs them of being monads in any meaningful way. Covariant powerset is a monoid only on set, but it's still a monad.
[04:09:14] <op_4> geekosaur: but you did say something completely new to me. What do you mean by pseudo-category?
[04:09:22] <geekosaur> Note: This package has metadata revisions in the cabal description newer than included in the tarball. To unpack the package including the revisions, use 'cabal get'.
[04:10:09] <geekosaur> I mean that Hask is commonly considered a category, but because of bottom it isn't one. There are extensions to categories that would admit it, but I don't know how much theoreticla work has gone into that
[04:10:43] <sclv> PuzzledSA: since youâ€™re building everything by hand you can do that manually
[04:10:49] <sclv> The change
[04:10:49] <op_4> afaik, a pseudo-category is a weakened category object in a 2-category where composition is only associative and unital up to structured 2-cells
[04:10:52] <PuzzledSA> I am trying to *build* cabal in the first place...  can I just edit the "ed25519.cabal" file?
[04:10:55] <op_4> geekosaur: aha, i see, thanks!
[04:12:08] <geekosaur> PuzzledSA, yes, that's whyat a metadata revision is
[04:12:21] <PuzzledSA> It builds and seems to be fine.
[04:12:22] <geekosaur> so you should be able to simply change the upper bound to < 7
[04:13:44] <PuzzledSA> Already did and it works.  Thanks, broke the dependency logjam (at least for now!)
[04:16:16] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[04:18:29] *** Quits: echoSMILE (~echoSMILE@user/echosmile) (Ping timeout: 256 seconds)
[04:18:55] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:19:45] <PuzzledSA> Okay that got me through several more.  I'm now working on "base" which is giving me three repeated stanzas of "<interactive>:1:1: error: attempting to use module 'main:Prelude' (./Prelude.hs) which is not loaded"
[04:19:55] *** Quits: MQ-17J (~MQ-17J@8.6.144.197) (Ping timeout: 260 seconds)
[04:20:22] <geekosaur> you have another dependency issue somewhere, base can't be installed outside of ghc
[04:20:38] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:20:49] <geekosaur> you should have base 4.14.3.0 installed already
[04:20:52] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[04:21:22] <PuzzledSA> Okay, looking around.  This is due to tar-0.5.1.1 wanting base >=4 && <4.14 ...  will inspect things a bit
[04:21:44] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:22:07] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[04:22:21] <PuzzledSA> 4.17 on the webpage
[04:22:44] <geekosaur> metadata rev 4 bumped the base revision to >=4 and <4.17
[04:23:10] <PuzzledSA> so if I skip trying to build base and just bump tar dependency for base to 4.17 it looks good
[04:23:21] <geekosaur> metadata revisions do complicate doing things this way
[04:23:57] <geekosaur> but they greatly simplify hackage administration, when all that's needed is a rev bump in the cabal file and not a whole new upload
[04:24:21] <awpr> download the whole 00-index.tgz and extract the cabal files?
[04:24:21] <PuzzledSA> Yeah, sorry, and I'm coming into this with zero familiarity with the tools, so I wasn't even really sure where to look at first
[04:24:33] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[04:25:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 260 seconds)
[04:25:15] <geekosaur> basically, if you're pulling stuff from hackage, look for the string "metadata revisions". it's a link. follow the link to see what package dependency revisions have been made
[04:25:17] <awpr> Hackage uses the, uh, _interesting_ technique of appending revised cabal files to the .tar, so the last one will overwrite all the others and will be the most recent
[04:25:58] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[04:26:00] <awpr> so if you put that index tarball on the target machine, you can just grab the latest .cabal file for the current package out of it
[04:27:05] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 260 seconds)
[04:27:49] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:30:58] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[04:31:08] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[04:35:00] <PuzzledSA> awpr, ah, I see.  Okay, well, I think I am past my logjam here, and I appreciate the hints folks
[04:36:02] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:46:31] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[04:46:35] <sclv> You can download the revised cabal files from hackage directly too
[05:02:24] *** Joins: Guest4914 (~Guest49@99-125-181-14.lightspeed.miamfl.sbcglobal.net)
[05:05:11] *** Quits: xff0x (~xff0x@2001:1a81:53d3:900:1ab0:e69a:7282:ec2c) (Ping timeout: 260 seconds)
[05:05:56] *** Joins: xff0x (~xff0x@2001:1a81:53d3:900:7766:a729:f554:f683)
[05:06:01] *** Quits: Guest4914 (~Guest49@99-125-181-14.lightspeed.miamfl.sbcglobal.net) (Client Quit)
[05:08:50] *** Joins: dd (~dd@99-125-181-14.lightspeed.miamfl.sbcglobal.net)
[05:09:31] *** Quits: dd (~dd@99-125-181-14.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[05:16:52] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[05:17:09] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:17:11] *** Quits: xff0x (~xff0x@2001:1a81:53d3:900:7766:a729:f554:f683) (Ping timeout: 245 seconds)
[05:19:15] *** Joins: xff0x (~xff0x@2001:1a81:5218:9100:819b:8b2:7ae0:c230)
[05:19:16] <PuzzledSA> WOO SUCCESS!  Some more various dependencies later, it all builds.  Thanks very much geekosaur and awpr, your assistance is much appreciated
[05:19:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[05:22:25] *** Joins: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net)
[05:22:25] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[05:23:07] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:23:10] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:30:04] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[05:30:56] *** Joins: trillp (~user@69.233.98.238)
[05:35:25] *** Quits: PuzzledSA (~PuzzledSA@cache0-req.hlcrwi.sol.net) (Quit: Client closed)
[05:40:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:44:42] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[05:48:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:49:29] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:54:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:59:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[06:02:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:03:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:05:23] *** Quits: td_ (~td@94.134.91.24) (Ping timeout: 260 seconds)
[06:07:00] *** Joins: td_ (~td@muedsl-82-207-238-060.citykom.de)
[06:07:58] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[06:10:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:10:59] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[06:11:40] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:14:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:18:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:23:34] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[06:29:04] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Quit: Leaving)
[06:29:22] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[06:34:15] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[06:36:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[06:41:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:41:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:41:34] *** Joins: wroathe (~wroathe@user/wroathe)
[06:42:40] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:47:16] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Quit: Leaving)
[06:47:35] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[06:52:03] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[06:53:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:58:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[07:00:24] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[07:00:37] *** Joins: zebrag (~chris@user/zebrag)
[07:03:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:04:47] *** Joins: trillp` (~user@2600:1700:28e2:14d0:4e6b:a714:bd6d:a4b5)
[07:05:26] *** Quits: trillp (~user@69.233.98.238) (Ping timeout: 260 seconds)
[07:11:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:13:31] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 260 seconds)
[07:13:35] *** Joins: jinsun (~quassel@user/jinsun)
[07:16:49] *** trillp` is now known as trillp
[07:28:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:28:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:28:10] *** Joins: wroathe (~wroathe@user/wroathe)
[07:30:47] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[07:33:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:36:26] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[07:36:29] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[07:36:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:40:56] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[07:42:35] *** Joins: jinsun (~quassel@user/jinsun)
[07:42:47] *** Quits: evertedsphere (sid434122@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:45:25] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Ping timeout: 260 seconds)
[07:45:55] *** Joins: phma_ (~phma@host-67-44-208-16.hnremote.net)
[07:47:00] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[07:48:59] *** Quits: phma (~phma@host-67-44-208-12.hnremote.net) (Ping timeout: 260 seconds)
[07:55:11] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[08:11:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:34] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[08:35:06] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:42:49] *** Quits: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[08:45:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[08:45:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:46:00] *** phma_ is now known as phma
[08:46:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:46:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:52:54] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[08:58:40] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[08:59:49] *** Joins: mei (~mei@user/mei)
[09:01:06] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:05:14] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[09:13:27] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[09:14:38] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:14:41] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[09:17:37] *** Joins: Liudvikas (~Liudvikas@213.197.176.162)
[09:19:55] *** Joins: jinsun (~quassel@user/jinsun)
[09:21:22] *** Quits: trillp (~user@2600:1700:28e2:14d0:4e6b:a714:bd6d:a4b5) (Remote host closed the connection)
[09:25:56] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[09:29:55] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[09:30:15] *** Joins: alzgh (~alzgh@user/alzgh)
[09:31:04] *** Quits: Liudvikas (~Liudvikas@213.197.176.162) (Quit: Konversation terminated!)
[09:31:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:33:30] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:33:31] *** Quits: xff0x (~xff0x@2001:1a81:5218:9100:819b:8b2:7ae0:c230) (Ping timeout: 260 seconds)
[09:34:12] *** Joins: xff0x (~xff0x@2001:1a81:5218:9100:c348:b23d:7d32:f26e)
[09:36:10] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[09:36:43] *** Joins: michalz (~michalz@185.246.204.125)
[09:47:33] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[09:54:01] *** Joins: mishugana (~mishugana@user/mishugana)
[09:54:24] <mishugana> hello folks, has anybody read the book, "functional programming made easier" by Scalfani? (The book teached purescript)
[09:54:53] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:54:59] <mishugana> if so, can you please share your review briefly?
[09:55:35] *** Quits: xff0x (~xff0x@2001:1a81:5218:9100:c348:b23d:7d32:f26e) (Ping timeout: 264 seconds)
[09:56:23] *** Joins: xff0x (~xff0x@2001:1a81:5218:9100:27b2:477a:f50:38f5)
[09:56:50] <mishugana> also, if possible, a comparison to "haskell programming from first principles" would be useful for me
[09:57:23] <mishugana> for reference, I've devoured Graham Hutton's "Programming in Haskell", now wish to start learning Haskell for real-world projects
[09:57:34] <mishugana> merci beaucoup!
[09:59:59] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[10:04:45] <mishugana> anybody?
[10:05:54] <jackdk> Possibly a better fit for a discussion forum - you are asking for an in-depth comparison between multiple large books
[10:06:25] *** Joins: fendor (~fendor@77.119.200.17.wireless.dyn.drei.com)
[10:08:05] <mishugana> Hmmm
[10:08:19] *** Joins: kuribas (~user@ptr-25vy0i9jhzblfidtsev.18120a2.ip6.access.telenet.be)
[10:09:38] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374)
[10:10:16] *** Quits: michalz (~michalz@185.246.204.125) (Remote host closed the connection)
[10:13:49] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[10:14:15] *** Joins: michalz (~michalz@185.246.204.109)
[10:19:46] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:19:48] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[10:20:55] *** Joins: michalz (~michalz@185.246.204.109)
[10:23:50] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:25:07] *** Joins: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr)
[10:26:24] *** Joins: zincy (~tom@2a00:23c8:970c:4801:d180:6949:f6bd:3923)
[10:27:22] *** Joins: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[10:30:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:31:45] *** Quits: mishugana (~mishugana@user/mishugana) (Quit: leaving)
[10:36:37] *** Joins: chele (~chele@user/chele)
[10:38:43] <Inst> @mishugana use ##programming for that, this is #haskell central and has a #haskell-offtopic
[10:38:43] <lambdabot> Unknown command, try @list
[10:40:13] *** Parts: marinelli (~marinelli@gateway/tor-sasl/marinelli) ()
[10:40:31] <yushyin> also this is IRC, you don't need @ before of nicks
[10:45:07] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:49:00] *** Joins: mbuf (~Shakthi@122.178.244.237)
[10:50:55] <ski> (in fact, it's confusing, since `@', in connection with nicknames, is already used to mean something else. if you mean to refer to, or address, someone, simply mention their nickname)
[10:51:03] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[10:53:23] *** Joins: ub (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[11:02:46] *** Quits: ub (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Quit: ub)
[11:03:16] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:05:46] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:07:58] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:08:15] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 265 seconds)
[11:09:02] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[11:09:46] *** Joins: fef (~thedawn@user/thedawn)
[11:12:17] <dminuoso> Conflating naming conventions is an ubiquitous problem. The way we name channels in IRC is how twitter identifies processible tags
[11:12:18] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 260 seconds)
[11:16:38] * ski always wondered how it distinguished between different topics, whose tags happen to be spelled the same way
[11:16:43] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Quit: ubert)
[11:26:22] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:30:07] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[11:33:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[11:34:28] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d51605dadc8a3f75380.dip0.t-ipconnect.de)
[11:34:33] *** Joins: cfricke (~cfricke@user/cfricke)
[11:35:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:20] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:45:45] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[11:46:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[11:47:33] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:47:35] *** Joins: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl)
[11:50:43] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[11:54:52] <zincy> applyToFive :: (forall a. a -> a) -> Int
[11:54:54] <zincy> applyToFive f = f 5
[11:55:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[11:55:43] <zincy> Is rankN types all about delaying the instantiation of type parameters?
[11:56:31] <ski> i suppose that's one way to phrase it
[11:56:55] <ski> but it's also about controlling *who* gets to pick and choose (caller or callee)
[11:56:55] *** Quits: echoSMILE (~echoSMILE@user/echosmile) (Ping timeout: 256 seconds)
[11:57:22] *** Joins: osewingsn (~ngpc@2603-8081-3e05-e2d0-bb2d-8519-eb6b-baf1.res6.spectrum.com)
[11:57:27] <ski> and about restricting the scope of the tyvar. and possibly being able to pick more than one time, for a single call to the main operation
[11:57:48] *** Quits: osewingsn (~ngpc@2603-8081-3e05-e2d0-bb2d-8519-eb6b-baf1.res6.spectrum.com) (Client Quit)
[11:57:59] <zincy> So applyToFive is basically delegating the responsibility of ensuring tyVar a is picked correctly to the caller
[11:58:06] <ski> and can be used for hiding of implementation details (which type(s) your implementation actually operates with)
[11:58:22] <zincy> Is that hiding related to existential types
[11:58:36] <ski> somewhat
[11:58:51] <zincy> I am trying to understand existential types as I heard that information hiding is tantamount to existential types
[11:59:14] <ski> from `exists a. (..a.. -> ...)', `(forall a. ..a..) -> ...' follows (but not vice versa, in general)
[11:59:24] <ski> yes
[12:00:03] *** Quits: xff0x (~xff0x@2001:1a81:5218:9100:27b2:477a:f50:38f5) (Ping timeout: 260 seconds)
[12:00:42] <ski> in your case, you could just as well think of it as `applyToFive :: exists a. (a -> a) -> Int' (because you only pick a single type for `a', and it doesn't depend on any run-time input (arguments) to `applyToFive')
[12:01:29] <ski> (but if you had `foo f = (f (5 :: Int),f False)', then you couldn't express it like that)
[12:02:08] <zincy> oh so rankNTypes are somewhat related to information hiding, but existential types are directly related??
[12:02:38] *** Joins: xff0x (~xff0x@2001:1a81:5218:9100:27b2:477a:f50:38f5)
[12:03:37] *** Joins: nschoe (~quassel@178.251.84.79)
[12:06:20] <zincy> Just to clarify,  `applyToFive :: (forall a. a -> a) -> Int` can be thought of as `applyToFive :: exists a. (a -> a) -> Int
[12:06:25] <zincy> Is that right?
[12:06:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:07:01] *** Joins: jumper149 (~jumper149@80.240.31.34)
[12:08:08] <ski> `Rank2Types' refers to being able to use `forall' in an argument type. `RankNTypes' to also be able to use `forall' in argument types of (callback) arguments types, and so on
[12:08:56] <zincy> So N is the number of nestings of our quantifier
[12:09:13] <ski> `forall' and `exists' are dual, they give opposite patterns of who gets to pick a type and who has to handle whatever is picked (without knowing what the choice was, in general), out of caller vs. callee
[12:09:26] <ski> the number of *left*-nestings inside `->', yes
[12:10:03] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:11:01] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:11:05] <ski> <zincy> Just to clarify,  `applyToFive :: (forall a. a -> a) -> Int` can be thought of as `applyToFive :: exists a. (a -> a) -> Int
[12:11:29] <ski> not in general. in this particular case, yes, because you're picking `a' exactly once (and not depending on run-time input)
[12:11:48] <ski> consider
[12:11:57] <ski>   length :: forall a. ([a] -> Int)
[12:12:25] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[12:12:25] <ski> this says that, for all types `a', `length' can be called with a list of `a's, and will produce an `Int' as result
[12:12:32] <ski> now, this is equivalent to
[12:12:42] <ski>   length :: (exists a. [a]) -> Int
[12:13:15] <ski> which says that, calling `length' will produce an `Int' as result, provided there exists some type `a' such that the argument is a list of `a's
[12:13:45] <ski> in general, `(exists a. ..a..) -> ...' is equivalent to `forall a. (..a.. -> ...)'
[12:14:04] <ski> also, `... -> (forall a. ..a..)' is equivalent to `forall a. (... -> ..a..)'
[12:14:17] <ski> so, e.g.
[12:14:29] <ski>   replicate :: forall a. (Int -> a -> [a])
[12:14:33] <ski> is equivalent to
[12:14:43] <ski>   replicate :: Int -> (forall a. a -> [a])
[12:14:57] *** Joins: osewingsn (~ngpc@2603-8081-3e05-e2d0-bb2d-8519-eb6b-baf1.res6.spectrum.com)
[12:14:57] <ski> zincy : this making any sense, so far ?
[12:15:21] *** Quits: osewingsn (~ngpc@2603-8081-3e05-e2d0-bb2d-8519-eb6b-baf1.res6.spectrum.com) (Remote host closed the connection)
[12:16:30] <zincy> So the normal length (no lang extensions) function can be thought of as 'exists'?
[12:17:49] <ski> you could think of the *argument* type as being wrapped in an `exists', sure
[12:18:37] <ski> `length' doesn't care about the element type. as long as there exists some element type such that the argument is a lost of such elements, `length' will work fine
[12:18:45] <zincy> *argument* type is (exists a. [a]) -> Int ?
[12:18:57] <zincy> I mean  (exists a. [a])
[12:19:05] <ski> no, `exists a. [a]' is the argument type there
[12:19:06] <ski> yea
[12:19:26] <ski> `forall' is what expresses polymorphism
[12:19:45] <ski> a polymorphic value is one whose type has a shape `forall a. ..a..'
[12:20:46] <zincy> I am confused about how in  `length :: forall a. ([a] -> Int)` [a] can be thought as (exists a [a]) 
[12:21:02] <ski> and it means it has type `..Int..',`..Bool..',`..[String,Bool -> IO ()]..', &c. .. for any possible (concrete) type that you can plug (consistently) for `a', it has that type
[12:21:12] <ski> no
[12:22:38] <ski> consider `\x -> x'. this has type `Int -> Int'. but it can also be given the type `Bool -> Bool', as well as the type `[(String,Bool -> IO ())] -> [(String,Bool -> IO ())]' .. in short, for all types `a', it has type `a -> a'
[12:22:55] <ski> and we express this by saying it has type `forall a. a -> a'
[12:23:39] <zincy> Right, the forall is saying that every parameterisation is treated the same
[12:23:45] <ski> now, a value of type `exists a. ..a..' doesn't have type `..a..' for *all* types `a' .. but rather, there exists *some* (unknown/forgotten/abstract/opque/skolem) type `a' such that it has type `..a..'
[12:23:56] <ski> take `[False,True,False]'
[12:23:58] <ski> we have
[12:24:07] <ski>   [False,True,False] :: [Bool]
[12:24:16] <ski> therefore, we can also claim
[12:24:23] <ski>   [False,True,False] :: exists a. [a]
[12:24:40] <ski> meaning : there exists some type `a' such that `[False,True,False]' is a list of `a's
[12:24:58] <ski> therefore, we can apply `length :: (exists a. [a]) -> Int' to this list, getting back an `Int'
[12:25:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[12:25:55] <ski> for `forall', we can go from `blah :: forall a. ..a..' *to* `blah :: ..T..', by picking/choosing a *particular* type `T'
[12:25:57] <zincy> Ah I think that makes sense
[12:26:20] <zincy> So in the general case you can go from forall to exists but not backwards
[12:26:30] *** Quits: Tordek_ (tordek@triton.blinkenshell.org) (Ping timeout: 260 seconds)
[12:26:45] <ski> while for `exists', we can go *to* `blah :: exists a. ..a..' *from* `blah :: ..T..', by *forgetting/hiding* which type `T' we had used, hiding it behind the tyvar `a'
[12:27:13] <ski> now, consider again `... -> (forall a. ..a..)' -- this usage of `forall' is not "serious"
[12:27:57] <ski> in the sense that it gives us nothing new, no extra expressivity. because this is equivalent to `forall a. (... -> ..a..)'. and we already know how to interpret `forall's occuring just after the `::' in a type signature
[12:28:05] *** Joins: Guest39 (~Guest39@2601:645:4101:b390:4521:34c:ac77:836e)
[12:28:21] *** Quits: Guest39 (~Guest39@2601:645:4101:b390:4521:34c:ac77:836e) (Client Quit)
[12:28:55] <ski> now, `(forall a. ..a..) -> ...' *is* a "serious" use of `forall', giving us a new power. so this is what (`PolymorphicComponents' and) `Rank2Types' and `RankNTypes' gives us
[12:29:28] <ski> (note, all those three now turn on `RankNTypes' in GHC, so there's no difference between them there)
[12:30:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Ping timeout: 245 seconds)
[12:30:24] <ski> similarly, `(exists a. ..a..) -> ...' is not "serious", since this is equivalent to `forall a. (..a.. -> ...)', which we already understand from ordinary polymorphism
[12:30:44] <ski> however, `... -> (exists a. ..a..)' *would* be a "serious" usage of `exists'
[12:31:18] <ski> likewise, putting `exists' inside some data structure, e.g. `[exists a. ..a..]' or `Map String (exists a. ..a..)'
[12:32:07] <kritzefitz> would `exists a. ..a..` where the exists comes directly after `::` also be serious?
[12:32:08] <zincy> So the extra expressiveness comes from pushing the forall inside the LHS of an arrow which is supplied by the caller
[12:32:40] <ski> kritzefitz : yes
[12:33:48] <ski> (also `forall' inside other type constructors .. but that's `ImpredicativeTypes', which for a long time didn't work properly. there's a recent new implementation around now, though, which hopefully works better)
[12:34:03] <ski> anyway, consider e.g.
[12:34:29] <ski>   foo :: Bool -> exists a. (a,a -> a,a -> String)
[12:34:42] <ski>   foo False = (False,not,show)
[12:35:00] <ski>   foo True  = ("True",reverse,id)
[12:35:55] <ski> note how, despite the two bodies here seemingly having different types, they actually share the common *abstract* type `exists a. (a,a -> a,a -> String)'
[12:36:08] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[12:36:18] <ski> and note that the type that is picked by `foo' for `a' here *depends* on the argument passed to `foo'
[12:36:48] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:38:58] <zincy> Interesting
[12:39:30] <zincy> So from the callers perspective what is the return type?
[12:39:37] <zincy> Changes based on the argument?
[12:40:24] <zincy> Kind of like an interface hiding information about how polymorphic it really is to the caller
[12:40:40] *** Joins: ikex1 (~ash@user/ikex)
[12:41:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:41:47] *** Quits: ikex (~ash@user/ikex) (Ping timeout: 264 seconds)
[12:41:47] *** ikex1 is now known as ikex
[12:43:09] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[12:43:41] *** Joins: michalz (~michalz@185.246.204.104)
[12:44:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:44:44] <ski> zincy : well, consider a polymorphic value `blah :: forall a. ..a..'. the caller/consumer/user of it may pick and choose any type they like for `a'. the callee/producer/definer/implementor must be prepared to handle any possible choice, and furthermore can't inspect or depend on which choice was made (except if special provisions were made for that)
[12:46:28] <ski> zincy : now, for an "abstract" value `bleh :: exists a. ..a..', the callee/producer/definer/implementor may pick and choose whatever type they like for `a'. while now, otoh, the caller/consumer/user must be prepared to handle any possible choice, and furthermore can't inspect or depend on which choice was made (except if special provisions were made)
[12:46:35] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (Quit: Bye!)
[12:46:54] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[12:47:18] <zincy> ski: Need to go out for a bit but will be back in a couple of hours
[12:47:19] <ski> zincy : so, `forall' vs. `exists' swaps/reverses the rÃ´les that the caller/consumer/user vs. callee/producer/definer/implementor has, with regards to handling the type `a'
[12:47:49] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:48:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[12:48:59] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:49:12] <ski> now, the left part of the function arrow `->' is known to swap the rules of caller vs. callee. therefore, `(forall a. ..a..) -> ...' is bound to be "similar" to `exists a. (..a.. -> ...)' (which not exactly the same, as i hinted at previously, both involve the *callee* choosing some type(s) for `a', and the caller having to make do with that/those choice(s))
[12:49:37] *** Joins: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr)
[12:50:06] <ski> (while `(exist a. ..a..) -> ...' is completely equivalent to `forall a. (..a..) -> ...')
[12:50:42] <ski> this means that it's incorrect to refer to all the rank-`n' types as some kind of "higher polymorphism"
[12:50:55] <ski> sure, `foo :: forall a. ..a..' is polymorphism
[12:52:04] <ski> but `foo :: (forall a. ..a..) -> ...' is not like polymorphism, it's more like "abstraction" (if i may use that term for whatever feature it is that allowing `exists' in types enable)
[12:53:35] <ski> while `foo :: ((forall a. ..a..) -> ...) -> ...' *is* quite like polymorphism (as with polymorphism, it's the *callee* of `foo' (via the callback, receiving a polymorphic argument) that gets to pick and choose `a'
[12:53:40] <ski> )
[12:53:45] <arahael> With coredata, is it possible to create the code generation for the models and stuff on the command line, without relying on the xcode GUI?
[12:53:56] <ski> so it alternates
[12:57:48] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[12:58:17] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[12:58:53] *** Joins: michalz (~michalz@185.246.204.125)
[13:00:50] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:04:07] *** Joins: fendor_ (~fendor@178.165.200.199.wireless.dyn.drei.com)
[13:05:30] *** Joins: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[13:06:24] *** Quits: michalz (~michalz@185.246.204.125) (Remote host closed the connection)
[13:06:49] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[13:06:50] *** Quits: fendor (~fendor@77.119.200.17.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[13:06:56] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Client Quit)
[13:06:58] *** Joins: michalz (~michalz@185.246.204.125)
[13:13:18] *** Joins: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[13:19:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[13:21:45] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[13:27:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:29:00] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[13:35:18] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:39:21] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:44:02] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Remote host closed the connection)
[13:44:50] *** Joins: evertedsphere (uid434122@id-434122.hampstead.irccloud.com)
[13:45:07] *** Joins: drownbes (~drownbes@200-149-20-81.sta.estpak.ee)
[13:50:55] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[13:50:58] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[13:54:10] *** Joins: oxide (~lambda@user/oxide)
[13:56:07] *** Joins: mei (~mei@user/mei)
[13:57:37] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 252 seconds)
[13:59:07] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[14:13:42] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[14:15:23] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:17:30] *** Quits: drownbes (~drownbes@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[14:24:17] *** Joins: __monty__ (~toonn@user/toonn)
[14:28:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[14:29:51] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 260 seconds)
[14:31:06] *** Joins: jespada (~jespada@181.28.253.200)
[14:32:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Ping timeout: 245 seconds)
[14:32:52] *** Quits: xff0x (~xff0x@2001:1a81:5218:9100:27b2:477a:f50:38f5) (Ping timeout: 258 seconds)
[14:33:51] *** Joins: xff0x (~xff0x@2001:1a81:5218:9100:aa26:25c9:f09a:101d)
[14:37:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:41:52] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:42:18] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (*.net *.split)
[14:42:18] *** Quits: jumper149 (~jumper149@80.240.31.34) (*.net *.split)
[14:42:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[14:42:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[14:42:18] *** Quits: deni (~deni@user/deni) (*.net *.split)
[14:42:18] *** Quits: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net) (*.net *.split)
[14:42:18] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (*.net *.split)
[14:42:18] *** Quits: mcglk_ (~mcglk@131.191.49.120) (*.net *.split)
[14:42:18] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[14:42:18] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[14:42:18] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[14:42:18] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (*.net *.split)
[14:42:18] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[14:42:18] *** Quits: micro (~micro@user/micro) (*.net *.split)
[14:42:18] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (*.net *.split)
[14:42:18] *** Quits: platz (~platz@user/platz) (*.net *.split)
[14:42:18] *** Quits: Partmedia (~kevinz@172-221-159-029.res.spectrum.com) (*.net *.split)
[14:42:18] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[14:42:18] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[14:42:18] *** Quits: emergence (~emergence@vm0.max-p.me) (*.net *.split)
[14:42:18] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[14:42:18] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[14:42:18] *** Quits: tv (~tv@user/tv) (*.net *.split)
[14:42:18] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[14:42:18] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[14:42:18] *** Quits: CannabisIndica (~herb@user/mesaboogie) (*.net *.split)
[14:42:18] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (*.net *.split)
[14:42:18] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[14:42:18] *** Quits: cls (~cls@chalk.lubutu.com) (*.net *.split)
[14:42:18] *** Quits: Hecate (~mariposa@user/hecate) (*.net *.split)
[14:42:18] *** Quits: gnyeki (~gnyeki@li578-216.members.linode.com) (*.net *.split)
[14:42:19] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (*.net *.split)
[14:42:19] *** Quits: hueso (~root@user/hueso) (*.net *.split)
[14:42:19] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[14:42:19] *** Quits: whez (sid470288@lymington.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: TMA (tma@twin.jikos.cz) (*.net *.split)
[14:42:19] *** Quits: _xor (~xor@72.49.199.147) (*.net *.split)
[14:42:19] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[14:42:19] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: iteratee (~kyle@162.218.222.107) (*.net *.split)
[14:42:19] *** Quits: astra` (sid289983@user/amish) (*.net *.split)
[14:42:19] *** Quits: etrepum (sid763@uxbridge.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[14:42:19] *** Quits: sm[i]_ (~user@li229-222.members.linode.com) (*.net *.split)
[14:42:19] *** Quits: davl (~davl@207.154.228.18) (*.net *.split)
[14:42:19] *** Quits: Megant (megant@user/megant) (*.net *.split)
[14:42:19] *** Quits: cjay (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[14:42:19] *** Quits: p3n (~p3n@217.198.124.246) (*.net *.split)
[14:42:19] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[14:42:19] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[14:42:19] *** Quits: tput (~tim@S0106a84e3fe54613.ed.shawcable.net) (*.net *.split)
[14:42:19] *** Quits: tlax (tlax@kapsi.fi) (*.net *.split)
[14:42:19] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[14:45:27] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:45:27] *** Joins: jumper149 (~jumper149@80.240.31.34)
[14:45:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:45:27] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:45:27] *** Joins: deni (~deni@user/deni)
[14:45:27] *** Joins: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net)
[14:45:27] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[14:45:27] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[14:45:27] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[14:45:27] *** Joins: Unode (~Unode@194.94.44.220)
[14:45:27] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[14:45:27] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[14:45:27] *** Joins: micro (~micro@user/micro)
[14:45:27] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[14:45:27] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[14:45:27] *** Joins: platz (~platz@user/platz)
[14:45:27] *** Joins: Partmedia (~kevinz@172-221-159-029.res.spectrum.com)
[14:45:27] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[14:45:27] *** Joins: drdo (~drdo@roach0.drdo.eu)
[14:45:27] *** Joins: emergence (~emergence@vm0.max-p.me)
[14:45:27] *** Joins: sshine (~simon@hubris.eta.solutions)
[14:45:27] *** Joins: fluxit (~fluxit@techsmix.net)
[14:45:27] *** Joins: tv (~tv@user/tv)
[14:45:27] *** Joins: sm2n (~sm2n@user/sm2n)
[14:45:27] *** Joins: nitrix (~nitrix@user/nitrix)
[14:45:27] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[14:45:27] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[14:45:27] *** Joins: ellie (~ellie@user/ellie)
[14:45:27] *** Joins: cls (~cls@chalk.lubutu.com)
[14:45:27] *** Joins: Hecate (~mariposa@user/hecate)
[14:45:27] *** Joins: gnyeki (~gnyeki@li578-216.members.linode.com)
[14:45:27] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[14:45:27] *** Joins: hueso (~root@user/hueso)
[14:45:27] *** Joins: hubvu (sid495858@user/hubvu)
[14:45:27] *** Joins: whez (sid470288@lymington.irccloud.com)
[14:45:27] *** Joins: TMA (tma@twin.jikos.cz)
[14:45:27] *** Joins: _xor (~xor@72.49.199.147)
[14:45:27] *** Joins: ski (~ski@remote12.chalmers.se)
[14:45:27] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[14:45:27] *** Joins: iteratee (~kyle@162.218.222.107)
[14:45:27] *** Joins: astra` (sid289983@user/amish)
[14:45:27] *** Joins: etrepum (sid763@uxbridge.irccloud.com)
[14:45:27] *** Joins: niko (~niko@libera/staff/niko)
[14:45:27] *** Joins: sm[i]_ (~user@li229-222.members.linode.com)
[14:45:27] *** Joins: davl (~davl@207.154.228.18)
[14:45:27] *** Joins: Megant (megant@user/megant)
[14:45:27] *** Joins: cjay (cjay@nerdbox.nerd2nerd.org)
[14:45:27] *** Joins: p3n (~p3n@217.198.124.246)
[14:45:27] *** Joins: a1paca (~a1paca@user/a1paca)
[14:45:27] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[14:45:27] *** Joins: tput (~tim@S0106a84e3fe54613.ed.shawcable.net)
[14:45:27] *** Joins: tlax (tlax@kapsi.fi)
[14:45:27] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[14:46:11] *** Joins: trcc (~trcc@users-1190.st.net.au.dk)
[14:47:24] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 244 seconds)
[14:48:33] *** Quits: achapman (~ajc@vmx14030.hosting24.com.au) (Quit: WeeChat 1.9.1)
[15:01:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:05:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[15:07:58] *** Joins: ksqsf (~user@211.86.152.198)
[15:08:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:08:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:08:01] *** Joins: wroathe (~wroathe@user/wroathe)
[15:10:59] *** Quits: connrs (~connrs@user/connrs) (Quit: ZNC 1.8.2 - https://znc.in)
[15:12:00] *** Joins: connrs (~connrs@user/connrs)
[15:12:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[15:12:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:12:55] *** Joins: phma_ (~phma@host-67-44-208-16.hnremote.net)
[15:13:45] *** Joins: themc47 (~mc47@xmonad/TheMC47)
[15:13:53] *** Joins: Gestotterd (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net)
[15:13:59] *** Joins: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[15:14:02] *** Joins: maxime_ (~maxime@2a01cb0883359800bfca837605fff927.ipv6.abo.wanadoo.fr)
[15:14:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[15:14:04] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[15:14:08] *** allbery_b is now known as geekosaur
[15:14:28] *** Joins: ncopa0 (~ncopa@gbr2-dev1.alpinelinux.org)
[15:14:49] *** Joins: ub (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[15:14:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:15:10] *** Joins: gregberns___ (sid315709@id-315709.helmsley.irccloud.com)
[15:15:10] *** Joins: parseval_ (sid239098@id-239098.helmsley.irccloud.com)
[15:15:10] *** Joins: b20n_ (sid115913@id-115913.uxbridge.irccloud.com)
[15:15:11] *** Joins: alanz_ (sid110616@id-110616.uxbridge.irccloud.com)
[15:15:12] *** Joins: philpax__ (sid516926@id-516926.lymington.irccloud.com)
[15:15:12] *** Joins: dsal_ (sid13060@id-13060.lymington.irccloud.com)
[15:15:15] *** Joins: christiaanb_ (sid84827@id-84827.lymington.irccloud.com)
[15:15:16] *** Joins: brettgilio7 (~brettgili@x-node.gq)
[15:15:17] *** Joins: kaychaks___ (sid236345@id-236345.helmsley.irccloud.com)
[15:15:20] *** Joins: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[15:15:20] *** Joins: taeaad_ (~taeaad@user/taeaad)
[15:15:24] *** Joins: sndr (~sander@user/sander)
[15:15:33] *** Joins: Andrew_ (~andrew@user/andrewyu)
[15:15:37] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[15:15:42] *** Joins: int-e_ (~noone@int-e.eu)
[15:15:43] *** Joins: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[15:15:50] *** Quits: int-e (~noone@int-e.eu) (Killed (NickServ (GHOST command used by int-e_)))
[15:15:57] *** int-e_ is now known as int-e
[15:16:58] *** Joins: obfusk_ (~quassel@a82-161-150-56.adsl.xs4all.nl)
[15:17:01] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[15:17:17] *** Joins: nschoe_ (~quassel@178.251.84.79)
[15:17:31] *** Joins: mjrosenb_ (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[15:17:46] *** Joins: byorgey_ (~byorgey@155.138.238.211)
[15:17:54] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[15:18:00] *** Joins: gdd1 (~gdd@129.199.146.230)
[15:18:03] *** Joins: AWizzArd_ (~code@gehrels.uberspace.de)
[15:18:08] *** Joins: kjak_ (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[15:18:14] *** Joins: kritzefitz_ (~kritzefit@212.86.56.80)
[15:18:17] *** Joins: hrdl_ (~hrdl@mail.hrdl.eu)
[15:18:18] *** Joins: finstern1s (~X@23.226.237.192)
[15:18:18] *** Joins: ringo__ (~ringo@157.230.117.128)
[15:18:24] *** Joins: eco_ (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[15:19:11] *** Joins: kmein_ (~weechat@user/kmein)
[15:19:12] *** Joins: robbert (~robbert@robbertvanderhelm.nl)
[15:19:39] *** Quits: robbert (~robbert@robbertvanderhelm.nl) (Client Quit)
[15:19:51] *** Quits: byorgey (~byorgey@155.138.238.211) (Killed (NickServ (GHOST command used by byorgey_)))
[15:19:55] *** Joins: robbert (~robbert@robbertvanderhelm.nl)
[15:19:57] *** byorgey_ is now known as byorgey
[15:21:00] *** Joins: orhan89_ (~orhan89@151.91.188.35.bc.googleusercontent.com)
[15:21:09] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[15:21:12] *** Joins: stefan-__ (~cri@42dots.de)
[15:21:26] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (Killed (silver.libera.chat (Nickname regained by services)))
[15:21:26] *** robbert is now known as robbert-vdh
[15:22:11] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Killed (silver.libera.chat (Nickname regained by services)))
[15:22:11] *** kritzefitz_ is now known as kritzefitz
[15:22:27] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (*.net *.split)
[15:22:27] *** Quits: michalz (~michalz@185.246.204.125) (*.net *.split)
[15:22:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (*.net *.split)
[15:22:27] *** Quits: nschoe (~quassel@178.251.84.79) (*.net *.split)
[15:22:27] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (*.net *.split)
[15:22:27] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (*.net *.split)
[15:22:27] *** Quits: phma (~phma@host-67-44-208-16.hnremote.net) (*.net *.split)
[15:22:27] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[15:22:27] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[15:22:27] *** Quits: juhp (~juhp@128.106.188.220) (*.net *.split)
[15:22:27] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[15:22:27] *** Quits: Stotteren (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net) (*.net *.split)
[15:22:27] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[15:22:27] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[15:22:27] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[15:22:27] *** Quits: stefan-_ (~cri@42dots.de) (*.net *.split)
[15:22:27] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (*.net *.split)
[15:22:27] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[15:22:27] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[15:22:27] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[15:22:27] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[15:22:27] *** Quits: acowley_ (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[15:22:27] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[15:22:27] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[15:22:27] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[15:22:27] *** Quits: APic (apic@apic.name) (*.net *.split)
[15:22:27] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[15:22:27] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[15:22:27] *** Quits: sander (~sander@user/sander) (*.net *.split)
[15:22:27] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[15:22:27] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[15:22:27] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (*.net *.split)
[15:22:27] *** Quits: Xnuk (~xnuk@45.76.202.58) (*.net *.split)
[15:22:27] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[15:22:27] *** Quits: hrdl (~hrdl@mail.hrdl.eu) (*.net *.split)
[15:22:27] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[15:22:27] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[15:22:27] *** Quits: AWizzArd (~code@user/awizzard) (*.net *.split)
[15:22:27] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[15:22:27] *** Quits: kaychaks__ (sid236345@helmsley.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: gregberns__ (sid315709@helmsley.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: parseval (sid239098@helmsley.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: dsal (sid13060@lymington.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: b20n (sid115913@uxbridge.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[15:22:27] *** Quits: philpax_ (sid516926@lymington.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: typedfern_ (~Typedfern@171.red-83-51-60.dynamicip.rima-tde.net) (*.net *.split)
[15:22:27] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[15:22:27] *** Quits: dmwit (~dmwit@pool-173-73-185-183.washdc.fios.verizon.net) (*.net *.split)
[15:22:27] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[15:22:27] *** Quits: orhan89 (~orhan89@151.91.188.35.bc.googleusercontent.com) (*.net *.split)
[15:22:28] *** brettgilio7 is now known as brettgilio
[15:22:28] *** sndr is now known as sander
[15:22:28] *** ncopa0 is now known as ncopa
[15:22:28] *** gregberns___ is now known as gregberns__
[15:22:28] *** parseval_ is now known as parseval
[15:22:28] *** ub is now known as ubert
[15:22:29] *** dsal_ is now known as dsal
[15:22:29] *** b20n_ is now known as b20n
[15:22:29] *** alanz_ is now known as alanz
[15:22:29] *** kaychaks___ is now known as kaychaks__
[15:22:29] *** christiaanb_ is now known as christiaanb
[15:22:31] *** philpax__ is now known as philpax_
[15:22:31] *** Joins: TheCoffeMaker_ (~TheCoffeM@125-121-245-190.fibertel.com.ar)
[15:23:04] *** Joins: dmwit (~dmwit@pool-173-73-185-183.washdc.fios.verizon.net)
[15:23:09] *** Joins: jjhoo (jahakala@user/jjhoo)
[15:23:13] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[15:23:14] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[15:23:19] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[15:23:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[15:23:41] *** kritzefitz is now known as kritzefitz_
[15:23:53] *** kritzefitz_ is now known as kritzefitz[m]
[15:24:01] *** kritzefitz[m] is now known as kritzefitz
[15:24:27] *** Joins: Xnuk (~xnuk@vultr.xnu.kr)
[15:28:12] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[15:28:18] *** Joins: MQ-17J (~MQ-17J@8.6.144.240)
[15:28:37] *** Joins: APic (apic@apic.name)
[15:28:55] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[15:29:04] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[15:29:25] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[15:29:37] *** Joins: typedfern_ (~Typedfern@171.red-83-51-60.dynamicip.rima-tde.net)
[15:30:20] *** Quits: maxime_ (~maxime@2a01cb0883359800bfca837605fff927.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[15:30:48] *** Joins: ubert1 (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[15:30:59] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 260 seconds)
[15:31:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[15:33:34] *** Joins: mmhat (~mmh@55d4b27c.access.ecotel.net)
[15:33:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:36:05] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:36:40] *** Quits: fendor_ (~fendor@178.165.200.199.wireless.dyn.drei.com) (Remote host closed the connection)
[15:37:54] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:41:27] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:50:24] *** Joins: michalz (~michalz@185.246.204.97)
[15:52:13] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:53:20] *** Joins: Farzad (~FarzadBek@178.131.26.34)
[15:53:36] *** Joins: Pickchea (~private@user/pickchea)
[15:54:10] *** Joins: guniberas (~guniberas@42.191.188.121)
[16:10:19] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[16:16:18] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[16:19:37] *** kmein_ is now known as kmein
[16:25:58] *** Quits: ubert1 (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[16:26:29] *** Quits: NieDzejkob (~quassel@212.87.13.106) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:26:31] *** Quits: trcc (~trcc@users-1190.st.net.au.dk) (Ping timeout: 260 seconds)
[16:27:07] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Quit: Leaving)
[16:27:14] *** Quits: kritzefitz (~kritzefit@212.86.56.80) (Changing host)
[16:27:14] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[16:29:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[16:33:25] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:34:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Ping timeout: 245 seconds)
[16:39:10] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[16:42:51] *** Joins: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com)
[16:51:34] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[16:57:36] *** Quits: oxide (~lambda@user/oxide) (Ping timeout: 245 seconds)
[16:58:15] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d51605dadc8a3f75380.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:59:19] *** hrdl_ is now known as hrdl
[16:59:25] *** Joins: oxide (~lambda@user/oxide)
[16:59:35] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[17:06:33] *** Joins: maxime_ (~maxime@2a01cb0883359800dd400544f01795c9.ipv6.abo.wanadoo.fr)
[17:08:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:12:28] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[17:13:45] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:19:26] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[17:19:54] *** Joins: Pickchea (~private@user/pickchea)
[17:26:09] *** Quits: agoraphobic (~agoraphob@ip11-173.bon.riksnet.se) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:27:53] *** Joins: agoraphobic (~agoraphob@ip11-173.bon.riksnet.se)
[17:29:29] *** Quits: MQ-17J (~MQ-17J@8.6.144.240) (Ping timeout: 268 seconds)
[17:30:03] *** Andrew_ is now known as AndrewYu
[17:30:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:37:24] *** Joins: ub (~Thunderbi@91.141.46.110.wireless.dyn.drei.com)
[17:37:45] *** Joins: vpan (~0@212.117.1.172)
[17:38:11] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[17:38:11] *** ub is now known as ubert
[17:39:42] *** phma_ is now known as phma
[17:40:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[17:40:06] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[17:40:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[17:40:25] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[17:40:34] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 260 seconds)
[17:45:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:46:31] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:50:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:54:15] *** Joins: Inst_ (~Inst@2600:1006:b01a:69bf:f8cc:5081:41af:e624)
[17:55:40] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:6dd4:3be6:70ce:10d9)
[17:55:40] *** Quits: Inst_ (~Inst@2600:1006:b01a:69bf:f8cc:5081:41af:e624) (Read error: Network is unreachable)
[17:57:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:c4ab:4275:2f29:1458) (Ping timeout: 264 seconds)
[18:06:27] *** Joins: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it)
[18:06:28] *** Quits: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it) (Changing host)
[18:06:28] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:12:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[18:12:26] *** Quits: ksqsf (~user@211.86.152.198) (Remote host closed the connection)
[18:12:52] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[18:14:36] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:7603:23f2:b945:e694)
[18:15:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:15:16] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:16:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[18:19:27] *** Quits: chele (~chele@user/chele) (Ping timeout: 260 seconds)
[18:20:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[18:23:50] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[18:24:22] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[18:24:26] *** Quits: Farzad (~FarzadBek@178.131.26.34) (Quit: Leaving)
[18:26:55] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:28:50] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[18:30:19] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:7603:23f2:b945:e694) (Quit: Leaving)
[18:30:30] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:7603:23f2:b945:e694)
[18:30:49] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:30:54] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:31:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[18:32:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[18:32:37] *** Joins: fef (~thedawn@user/thedawn)
[18:33:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:34:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[18:35:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Ping timeout: 245 seconds)
[18:35:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[18:45:55] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[18:46:57] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[18:51:33] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:53:32] *** Joins: pavonia (~user@user/siracusa)
[18:53:45] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[18:54:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Remote host closed the connection)
[18:54:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:55:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:01:19] *** Joins: chele (~chele@user/chele)
[19:04:37] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[19:05:27] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:08:24] *** Quits: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr) (Quit: WeeChat 2.8)
[19:08:26] *** Joins: Guest91 (~Guest91@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:09:05] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[19:11:27] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:7603:23f2:b945:e694) (Quit: Leaving)
[19:13:06] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:16:30] *** themc47 is now known as mc47
[19:17:14] *** Joins: Guest73 (~Guest73@24-116-245-6.cpe.sparklight.net)
[19:19:04] <Guest73> Having some trouble running wai server (I think the problem is there, I'm trying to get a servant API up).  To reproduce:
[19:19:38] <Guest73> stack new my-project servant; cd my-project; stack build; stack exec my-project-exe
[19:19:42] <Guest73> freezes there.  help?
[19:19:46] *** Quits: echoSMILE (~echoSMILE@user/echosmile) (Quit: Client closed)
[19:21:00] <c_wraith> how is "freezes" distinct from "works correctly"?
[19:21:18] <c_wraith> It is supposed to block there
[19:21:40] <Guest73> shouldn't it report that it's running on {port} or something?  if I browse to localhost:8080 I get a blank page
[19:22:17] <c_wraith> a blank page or an error page?
[19:22:32] <c_wraith> because if there wasn't a server running on localhost at port 8080, you'd get an error page
[19:23:15] <Guest73> blank when i use firefox.  404 when i use chromium
[19:23:16] <c_wraith> that is, your browser would tell you it can't connect
[19:23:24] <c_wraith> 404 means there is a server running
[19:24:03] <c_wraith> not running would be "can't find the server at localhost:8080"
[19:24:24] <Guest73> ok, pebkac for sure
[19:24:27] <c_wraith> now, it's possible something is still broken.
[19:24:40] *** Quits: evertedsphere (uid434122@id-434122.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:24:45] <c_wraith> It could be the case that something *else* is running on localhost:8080
[19:25:01] <Guest73> no i'm good, was just confused, thanks.  localhost:8080/users returns expected results
[19:25:07] <c_wraith> ah, good
[19:25:19] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[19:26:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[19:27:11] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:27:29] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:29:52] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Remote host closed the connection)
[19:30:02] *** Quits: werneta_ (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Remote host closed the connection)
[19:30:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:30:30] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:31:07] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:31:26] *** Quits: Guest73 (~Guest73@24-116-245-6.cpe.sparklight.net) (Quit: Client closed)
[19:32:11] *** Quits: chele (~chele@user/chele) (Ping timeout: 245 seconds)
[19:32:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[19:35:46] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:35:59] *** Joins: thyriaen (~thyriaen@dynamic-077-013-059-156.77.13.pool.telefonica.de)
[19:40:51] <dsal> Is it possible to compose FromRow instances in PostgreSQL-simple?  I might try it and see what happens.
[19:41:21] *** Quits: nschoe_ (~quassel@178.251.84.79) (Ping timeout: 245 seconds)
[19:46:55] *** Joins: hippoid (~idris@184.105.6.88)
[19:47:42] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[19:48:32] *** Quits: Guest91 (~Guest91@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[19:49:05] <hippoid> :t (>>=) (Just (Just 1)) id
[19:49:06] <lambdabot> Num b => Maybe b
[19:49:17] <hippoid> :t (>>=)
[19:49:18] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[19:50:03] <hippoid> Why am I able to pass `id`, when (>>=) requires a (a-> m b) for the 2nd arg, and `id` is (a->a)?
[19:50:28] <hippoid> I thought I'd need a (a -> m b) for the 2nd arg of >>=
[19:51:03] <c_wraith> hippoid: a can be m b
[19:51:12] <c_wraith> hippoid: then id :: m b -> m b
[19:51:45] <hippoid> ah right, something about universal quantification?
[19:52:00] <c_wraith> yes.  and unification in general
[19:52:44] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:53:01] <c_wraith> When you look at the types of id and (>>=), the a in each type is a different type variable.  that's the universal quantification part
[19:53:21] <c_wraith> So when you unify the types, those variables are different
[19:53:54] <c_wraith> So you can say "the a from id is the same as the m b from from (>>=)" to unify those types
[19:54:21] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[19:54:29] <hippoid> I try to learn more unification, but I don't find any resources where the unification constraints are solved in something other than writing out a full program to solve it. I'd rather solve the unification constraints with paper at first, to get a better intuition about it.
[19:54:45] <hippoid> Do you recommend any resources that are like that?
[19:55:44] <yrlnry> Does lambdabot have a help function?  I tried `:h` `:help` :?` but got no response.
[19:56:27] <geekosaur> not much of one
[19:56:30] <geekosaur> @help
[19:56:30] <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
[19:56:33] <geekosaur> @list
[19:56:33] <lambdabot> What module?  Try @listmodules for some ideas.
[19:57:02] <yrlnry> Thanks.
[20:00:25] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[20:01:30] <geekosaur> this only does a subset of the commands plus one I added back when I was running one, but it's also the only reference I'm aware of for the admin commands. http://users.ece.cmu.edu/~allbery/lambdabot/COMMANDS.more
[20:02:06] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[20:02:41] *** Joins: fef (~thedawn@user/thedawn)
[20:05:29] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[20:05:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[20:10:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[20:10:44] *** Joins: vicfred (~vicfred@user/vicfred)
[20:12:16] *** Joins: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548)
[20:14:00] *** Joins: econo (uid147250@user/econo)
[20:17:32] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[20:18:05] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 264 seconds)
[20:21:19] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 268 seconds)
[20:22:31] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[20:29:36] *** Quits: maxime_ (~maxime@2a01cb0883359800dd400544f01795c9.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:30:37] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:32:47] *** Joins: aegon (~mike@174.127.249.180)
[20:35:10] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[20:35:46] *** Quits: mbuf (~Shakthi@122.178.244.237) (Quit: Leaving)
[20:55:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:25a5:cf0c:746a:f835)
[21:00:20] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (Remote host closed the connection)
[21:00:34] *** Joins: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[21:09:19] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[21:14:28] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[21:16:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[21:17:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:18:00] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 260 seconds)
[21:23:13] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[21:26:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:29:24] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[21:31:12] *** Joins: echoSMILE7 (~echoSMILE@user/echosmile)
[21:31:44] *** echoSMILE7 is now known as echosmile7000
[21:31:44] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[21:32:13] *** Joins: ystael (~ystael@user/ystael)
[21:32:39] *** Quits: echoSMILE (~echoSMILE@user/echosmile) (Ping timeout: 256 seconds)
[21:32:40] *** Quits: hippoid (~idris@184.105.6.88) (Quit: Lost terminal)
[21:34:18] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[21:35:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[21:37:11] *** Quits: justache (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[21:37:18] *** Joins: zincy_89 (~zincy_@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[21:38:02] *** Joins: justache (~justache@user/justache)
[21:41:55] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[21:44:47] *** Quits: echosmile7000 (~echoSMILE@user/echosmile) (Quit: Client closed)
[21:45:39] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:51:36] *** Joins: vicfred (~vicfred@user/vicfred)
[21:55:15] *** Joins: alx741 (~alx741@181.196.69.72)
[21:55:57] <zincy_> ski: I am back, sorry it took a while, I think your explanation makes sense thanks!
[21:56:23] *** Joins: max22- (~maxime@2a01cb0883359800f0a95b292418059d.ipv6.abo.wanadoo.fr)
[21:56:24] *** Joins: echoSMILE (~echoSMILE@user/echosmile)
[21:58:12] *** Quits: max22- (~maxime@2a01cb0883359800f0a95b292418059d.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[22:00:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:01:07] *** Quits: td_ (~td@muedsl-82-207-238-060.citykom.de) (Ping timeout: 260 seconds)
[22:02:46] *** Joins: td_ (~td@94.134.91.76)
[22:04:08] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[22:04:45] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:06:40] <unit73e> looks like HLS doesn't like Paths_* with GHC 9.0.1 for some reason
[22:06:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:06:57] <unit73e> I'm using the latest releases
[22:08:06] <unit73e> I'm going to complete the text example and share here to see if it's just me. It will take a while though.
[22:09:27] <unit73e> also hello
[22:10:59] <shapr> hi unit73e !
[22:11:25] <shapr> unit73e: you may get a response from the devs on #haskell-language-server
[22:11:34] <shapr> high latency, but probably at some point :-)
[22:11:41] <shapr> or you could report a bug on the github repo
[22:12:06] <unit73e> shapr, thanks. I'll do that. My bet is that it's not very compatible with 9.x yet
[22:12:44] <unit73e> or I'm being a noob lol
[22:13:47] *** Joins: boxscape_ (~boxscape_@i577BCBDC.versanet.de)
[22:16:23] <boxscape_> I don't need this for anything at the moment but I'm curious - is there a combinator you could replace <*> with in `gcd <*> minimum <$> maximum` that would evaluate minimum and maximum in parallel?
[22:16:25] <boxscape_>  (in this particular case you could implement a function that computes the minimum and maximum in one pass, but other cases might not allow this)
[22:17:22] <boxscape_> (I suppose maybe you would have to use something other than <$> as well)
[22:18:47] <awpr> this looks like the Applicative instance of https://hackage.haskell.org/package/foldl-1.4.12/docs/Control-Foldl.html
[22:19:07] <boxscape_> Ah, nice, thank you
[22:19:23] <awpr> generally "I want the Applicative operators to mean parallel/concurrent/simultaneous operation" means "I want something that's intentionally not also a Monad"
[22:19:31] <boxscape_> right, that makes sense
[22:19:39] <awpr> unless you're Haxl, which just ignores that law
[22:19:45] <awpr> (last I heard)
[22:26:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[22:26:36] <remexre> 2 unrelated questions
[22:26:54] <remexre> - are lawful monad instances unique?
[22:27:03] *** Joins: mei (~mei@user/mei)
[22:27:39] *** Joins: Guest30 (~Guest30@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:27:43] *** Quits: Guest30 (~Guest30@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Client Quit)
[22:27:47] <monochrom> No.
[22:28:11] *** Joins: Guest21 (~Guest21@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:29:57] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:9ce5:6f05:3959:43f5)
[22:29:57] <remexre> is there a noteworthy counterexample?
[22:31:10] <remexre> second question, what logging library do people recommend for an application that's mostly ResourceT (ReaderT r IO), so I'm only really logging in IO. Ideally it'd have structured logging (via Generic?), at least three log levels, and be configurable
[22:31:59] <monochrom> I think that something like tardis shows that S->(a,S) can be a monad in two ways. (And then tardis goes on to combine them into one monster monad.)
[22:32:44] <monochrom> OTOH I know a lengthy proof of why, e.g., "data P a = MkP a a" is a monad in a unique way.
[22:33:07] <monochrom> So, uniqueness happens for some types but not some others.
[22:33:11] <remexre> what's the way that isn't the normal state monad? for s->(a, s)?
[22:33:16] <remexre> or is that only for concrete S
[22:33:22] <maerwald> remexre: roll your own logger
[22:33:28] <maerwald> it takes only a couple of lines
[22:33:39] <remexre> maerwald: fair, ok
[22:33:51] *** Quits: Inst__ (~Inst@2601:6c4:4080:3f80:6dd4:3be6:70ce:10d9) (Ping timeout: 245 seconds)
[22:33:58] <remexre> oh wait tardis is a package not a username lol
[22:34:06] <remexre> oh neat
[22:34:13] <maerwald> even if you shove it into ReaderT or use LabelOptics, it's still only a couple of lines
[22:34:44] <maerwald> logging is, imo, application specific
[22:35:03] <maerwald> no point fighting libraries
[22:35:12] <remexre> LabelOptics == the Optics.Label module?
[22:35:46] <maerwald> yeah
[22:36:40] <maerwald> it's a neat way to separate your application state elegantly
[22:36:45] <remexre> huh, should I be using optics-core, etc; if I'm using microlens now?
[22:36:59] <remexre> yeah not having to namespace my record fields would be very nice :)
[22:37:16] *** Quits: kuribas (~user@ptr-25vy0i9jhzblfidtsev.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[22:37:18] <monochrom> Oh yeah actually logging, or simply the writer monad, may show two ways of being a monad.
[22:37:23] <remexre> been waiting for ghc2021 for the record changes, but if this works, might as well use it
[22:37:38] <remexre> monochrom: oh, take-rightmost versus join-left-and-right?
[22:37:48] <remexre> or is that unlawful
[22:37:49] <maerwald> yeah, never used Write for logging... I print to screen or write to log files
[22:38:03] <boxscape_> I did find a couple of the features in RIOs logging library quite nice, like displaying the line/column of the logging call (via a HasCallStack constraint) when you're in verbose mode
[22:38:11] <monochrom> join right and left
[22:38:45] <boxscape_> (admittedly still fairly easy to write but I wouldn't have thought on it without using a logging library)
[22:38:48] <boxscape_> s/on/of
[22:39:10] <monochrom> W a w1 >>= k  =  case unW (k a) of W b w2 -> W b (w2 <> w1)  -- so, the other order
[22:39:33] <remexre> ah yeah
[22:39:51] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[22:39:52] <maerwald> I forgot... doesn't Writer leak memory?
[22:39:54] <remexre> yeah I'll probably do HasCallStack too; never used rio, but from the readme it sounds potentially nice
[22:40:09] <remexre> yeah, I think the standard advice is to always use State to impl Writer
[22:41:00] <monochrom> Some ways of using Writer leaks memory. But some other ways don't.  I'm a scientist and when I see both I attribute to the difference, not the commonality.
[22:41:26] <monochrom> But programmers are pastors not scientists.
[22:41:46] <zincy_> Programmers should be scientists
[22:42:04] <maerwald> There's no such separation of programmer vs scientist.
[22:42:11] <monochrom> "pastors" means people who write weekly blogs on their religious beliefs.
[22:42:30] <zincy_> I feel like at the heart of every emotional opinion in software there is a deep truth which can be explained rationally
[22:42:46] <geekosaur> not always
[22:42:49] <monochrom> zincy_: Politicians should be honest, rational, and moral people, too.  Bwahahahaha.
[22:43:01] <geekosaur> programming has its share of flat-earthers
[22:43:10] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[22:43:11] <zincy_> hahaha
[22:43:14] <maerwald> The thing is... programming isn't just about technology. It's also about art.
[22:44:16] <zincy_> What I mean to say isnt that every programmer opinion is valid but its either logically falsifiable or nonsense and can be just discarded
[22:44:29] <zincy_> I guess I just negated myself oops
[22:44:31] <maerwald> Well, it isn't that easy.
[22:44:41] <maerwald> Because once *art* is involved, opinion becomes more complicated.
[22:44:50] <unit73e> imo programming itself doesn't really make you a scientist, engineer or flat-earther imo, it depends on what you do
[22:44:59] <unit73e> I like doing simple programs correctly
[22:45:05] <zincy_> I believe a lot more of the *art* is logic/science than people realise
[22:45:11] <unit73e> some like adding features and making things pretty
[22:45:16] <zincy_> Thats what I am trying to get across
[22:45:18] <maerwald> zincy_: I don't understand that sentence
[22:45:57] <maerwald> unit73e: sounds like you *believe* in the unix principle. It has mostly been lost today.
[22:46:47] <maerwald> The latest addition to the anti-unix fleet has been nix. Now apparently, you can't do anything without it (like... installing GHCJS).
[22:46:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55)
[22:47:01] *** Quits: boxscape_ (~boxscape_@i577BCBDC.versanet.de) (Quit: Connection closed)
[22:47:01] <zincy_> A lot of seemingly subjective statements programmers make can be ruled out as wrong even though they *feel* subjective
[22:47:07] <unit73e> maerwald, yeah I guess it's becoming rare but I see it resurecting often. One example, IDEs are being replaced with modular editors. Not perfect but better than nothing.
[22:47:29] <maerwald> well, I'm not sure how I feel about LSP
[22:47:43] <geekosaur> so they're reinventing emacs (probably poorly)?
[22:47:48] <unit73e> yup
[22:47:58] <unit73e> that's what vscode and friends are
[22:48:03] <unit73e> and atom
[22:48:21] <maerwald> I mean... now we have client-server architecture everywhere and my editor consumes large chunks of json that gets then dumped into my home folder and that I have to look at pretty often, because the server crashes or my client forgot what to do
[22:48:39] <unit73e> I use neovim but emacs is nice
[22:48:46] <geekosaur> atom I can surely say does so poorly; I waited a few versions for it to stabilize, installed it, ran it, leaving it open overnight nearly killed my system
[22:48:49] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:48:53] <geekosaur> uninstalled it and didn't look back
[22:49:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:49:07] <geekosaur> I may try vscode at some point but am betting it's not much better
[22:49:20] <unit73e> vscode is better but it's kind of weird in some ways
[22:49:41] <maerwald> vscode was bearable with the vim plugin, but it had a lot of shortcomings and bugs
[22:50:39] *** Quits: Guest21 (~Guest21@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[22:52:30] <maerwald> it feels more like a social media platform to me... there's constantly popups and stuff trying to get my attention
[22:52:56] <unit73e> that's one thing I don't like about vscode
[22:53:00] <geekosaur> this is making me want to stay with emacs
[22:53:14] <unit73e> vscode feels like IDE light
[22:53:22] <unit73e> too much distractions
[22:53:28] *** Quits: zincy_89 (~zincy_@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Quit: Client closed)
[22:53:28] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[22:53:38] <maerwald> those give you dopamine kicks and increase screen time
[22:53:53] <unit73e> but it's the best GUI only editor I've used so far
[22:54:02] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[22:54:03] <unit73e> that's something
[22:54:06] <maerwald> not a coincidence that MS spearheaded all this popup nonsense
[22:54:12] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:54:32] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[22:54:50] <unit73e> I feel like it was some Microsoft Joe that was sick and tired of Visual Studio that made vscode
[22:55:06] <maerwald> https://github.com/microsoft/vscode/issues/14840
[22:55:30] <maerwald> "I am CONSTANTLY hitting escape to get rid of them so I can see my code."
[22:55:32] <maerwald> xD
[22:56:05] <monochrom> s/Joe/Bob/  # right? RIGHT?  >:)
[22:56:29] <unit73e> lol Bob is better yes
[22:56:36] <monochrom> or Paperclip
[22:57:10] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[22:57:29] <maerwald> but vscode has a nice plugin where you can save your settings into a github gist
[23:00:47] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[23:02:10] <sm> vscode is great (even as a lifelong emacser)
[23:02:16] <sm> the power to weight ratio is high!
[23:06:21] <jneira[m]> i missed the total power to customize emacs last time i had to fight with the vscode api
[23:08:10] <maerwald> if I was new to programming today, I totally would pick vscode
[23:08:14] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[23:08:29] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[23:08:37] <maerwald> the only reason I stuck to vim was that I had a phase where I enjoyed wasting days and days configuring it
[23:09:24] <geekosaur> I did most of my emacs configuration in the mid-80s :Ã¾
[23:10:01] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:10:02] <geekosaur> I think the only change I've had to make since then is (require 'cl) instead of the old common lisp compatibility stuff
[23:10:24] <geekosaur> well, and adding haskell-mode :)
[23:12:53] <zincy_> mid-80s wow
[23:13:45] <maerwald> there was great music back then
[23:13:53] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 264 seconds)
[23:13:58] <maerwald> and software was still fast
[23:14:29] <geekosaur> actually I have that backwards, common lisp compat is now standard and I had to remove (require 'cl)
[23:14:58] <monochrom> https://www.gnu.org/fun/jokes/ed-msg.en.html
[23:15:21] *** AWizzArd_ is now known as AWizzArd
[23:15:32] <monochrom> Note how emacs took up 6e37 bytes.
[23:16:36] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Quit: WeeChat 3.2)
[23:17:01] <zincy_> Im sure I read somewhere that Bryan O Sullivan still uses Ed
[23:17:09] <monochrom> (Note how the whole world could not possibly have that much disk space back then :) )
[23:17:58] <sm> I got legimitately use ed for work yesterday
[23:18:30] <sm> I needed to insert the contents of a file after a certain line in another file
[23:19:02] * geekosaur used to script ed in buildscripts. (didn't get to use fancy build systems, they wouldn't even try to build on the pmaxen)
[23:19:03] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[23:19:08] *** Quits: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net) (Quit: WeeChat 3.3)
[23:19:24] *** Joins: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net)
[23:19:28] <sm> correction, I needed to insert a bash heredoc after a certain line
[23:19:46] <monochrom> Nice, maybe I should teach ed in my unix course too.
[23:19:48] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[23:20:09] <zincy_> you're teaching a course just on unix?
[23:20:14] *** Quits: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net) (Client Quit)
[23:21:08] <monochrom> Don't worry, it would be pitched as another program you could use in a shell script, for inserting a file into the middle of another file, like you said.
[23:21:51] <monochrom> I teach a c-and-unix course in summers.
[23:22:41] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[23:23:01] <zincy_> oh cool
[23:23:07] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Client Quit)
[23:23:25] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[23:25:46] <maerwald> "how to configure systemd"
[23:26:39] <monochrom> I think something smug like "you don't configure it, you program it" is in order :)
[23:26:46] *** Quits: thyriaen (~thyriaen@dynamic-077-013-059-156.77.13.pool.telefonica.de) (Remote host closed the connection)
[23:26:56] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[23:27:29] <monochrom> Aaannnddd.... let's have a sequel to the "what's interpreter vs compiler" discussion....
[23:27:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:27:42] <monochrom> What's configuration vs programming? >:)
[23:28:39] <trcc> I have a function that in success cases returns a stablePointer, but in failure cases I have to return a nullPtr. However, stablePtr and nullPtr do not seem to match very well, i.e. expected type: IO (StablePtr (IORef (FMIT.FMIComponent a)))        Actual type: IO (Ptr a0) 
[23:28:45] <trcc> am I being to explicit about my type or?
[23:28:52] <maerwald> configuration is what I don't get paid for
[23:29:38] <geekosaur> https://github.com/CleverRaven/Cataclysm-DDA/blob/master/data/json/portal_storm_effect_on_condition.json
[23:31:11] <monochrom> ooohhh... using the amount of {}s to define "programming" :)
[23:32:35] <maerwald> "software engineer" is just a marketing term 
[23:32:47] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[23:32:49] <maerwald> it looks better on my CV
[23:33:22] <maerwald> what if I wrote "I put libraries together, of which I don't understand 95%"
[23:33:46] <monochrom> trcc: So perhaps you should always return Ptr. In the success case, use castStablePtrToPtr.
[23:33:57] <jneira[m]> put the program in the configuration and bang, money again
[23:33:57] <sm> software technician
[23:37:07] *** Quits: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com) (Quit: ubert)
[23:37:09] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:25] *** Joins: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com)
[23:39:07] <trcc> monochrom: I am vorried about Ptr because it shall not be garbage collected, therefore StablePtr
[23:39:40] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[23:41:13] <monochrom> Pretty sure GC isn't actually told about the types.
[23:41:53] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:44:48] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[23:45:00] *** Quits: alx741 (~alx741@181.196.69.72) (Ping timeout: 260 seconds)
[23:45:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:45:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:45:21] <monochrom> Also pretty sure Ptr obtained from malloc is not GCed or moved either.
[23:45:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:45:58] <monochrom> And Ptr obtained from alloca, in the duration when the alloca call hasn't terminated.
[23:47:09] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d76b9ac87bdf676c186.dip0.t-ipconnect.de)
[23:47:29] <monochrom> Generally anything that says "you need to call freeFoo or write a finalizer to free".
[23:48:19] <trcc> monochrom: thanks, but it is because of the docs in StablePtr that reads: "A stable pointer is a reference to a Haskell expression that is guaranteed not to be affected by garbage collection, i.e., it will neither be deallocated nor will the value of the stable pointer itself change during garbage collection (ordinary references may be relocated during garbage collection). Consequently, stable pointers can be passed to fore
[23:48:19] <trcc> ign code, which can treat it as an opaque reference to a Haskell value."
[23:48:26] <trcc> and I am exactly passing it to foreign code
[23:49:51] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[23:50:01] <trcc> anywas, found a castPtrToStablePtr
[23:52:16] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:53:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[23:54:32] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[23:54:41] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[23:56:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:57:37] *** Joins: alx741 (~alx741@186.178.109.79)
