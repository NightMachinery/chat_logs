[00:14:35] <FromDiscord> <System64 ~ Flandre Scarlet> Does it search a dll? https://media.discordapp.net/attachments/371759389889003532/863143616141590548/unknown.png
[00:32:08] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/liu
[00:32:40] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3stY
[00:33:47] <FromDiscord> <haxscramper> you actually need `echo cast[int](addr tmp)`
[00:36:13] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[00:43:25] *** Quits: MightyJoe (~joe@201.159.98.32) (Read error: Connection reset by peer)
[00:47:14] *** Joins: cyraxjoe (~joe@201.159.98.32)
[00:52:06] <FromDiscord> <System64 ~ Flandre Scarlet> SIGSEGV: Illegal storage access. (Attempt to read from nil?)SIGSEGV: Illegal storage access. (Attempt to read from nil?)â†µâ†µSame thing as NilAccessDefect exception?
[01:03:39] <FromDiscord> <haxscramper> Yes
[01:03:58] <FromDiscord> <RattleyCooper> Is there a list of special operators like ``[]=``?
[01:04:07] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[01:04:12] <FromDiscord> <haxscramper> `{}`, `[]`, `[]=`, `{}=`
[01:04:21] <FromDiscord> <haxscramper> The list if fixed
[01:04:27] <FromDiscord> <RattleyCooper> Ok cool, thank you ðŸ˜„
[01:05:19] <FromDiscord> <RattleyCooper> Do you know what the syntax is for `[]` operator when creating custom operator?
[01:05:26] <FromDiscord> <RattleyCooper> Like the `proc` arguments?
[01:05:46] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3su3
[01:05:48] <FromDiscord> <RattleyCooper> Oh wow, easy enough, thanks!
[01:05:53] <FromDiscord> <haxscramper> Second and all subsequent arguments go to `[]`
[01:06:04] <FromDiscord> <haxscramper> With `[]=` last argument goes to `= <last argument>`
[01:06:35] <FromDiscord> <haxscramper> Under what circumstances `{.deprecated: "XXXX".}` might not work? I'm running compilation as `nim c --skipUserCfg --skipProjCfg --skipParentCfg '--warning[Deprecated]:on' make_wrap.nim` and it does not output expected deprecation warnings.
[01:08:54] <FromDiscord> <haxscramper> I have no `{.warning[Deprecated]: off.}` anywhere
[01:09:39] <FromDiscord> <haxscramper> And I also added explicit `{.warning[Deprecated]:on.}` in the code
[01:11:48] <FromDiscord> <haxscramper> Alright, I had to put `{.warning[Deprecated]:on.}` literally on top of the function I've deprecated and now it works
[01:12:14] <FromDiscord> <haxscramper> Is there any way to debug things like this? Like what warnings are turned on/off and where
[01:17:25] *** Joins: pro (~pro@user/pro)
[01:17:36] <FromDiscord> <haxscramper> No, now I need to enable it per-module
[01:22:44] *** Quits: cyraxjoe (~joe@201.159.98.32) (Ping timeout: 268 seconds)
[01:32:48] <FromDiscord> <System64 ~ Flandre Scarlet> is it possible to have the classic for loop in Nim?
[01:33:08] <FromDiscord> <System64 ~ Flandre Scarlet> the C-style for
[01:33:44] <FromDiscord> <ElegantBeef> i mean `for x in 0..y` is the "classic"
[01:33:55] <FromDiscord> <ElegantBeef> alternatively `countUp` and `countDown`
[01:34:01] <fn> <11ForumUpdaterBot99> New thread by Sixte: New concepts, visibility and mount points , see https://forum.nim-lang.org/t/8219
[01:34:05] <FromDiscord> <ElegantBeef> Otherwise a while loop works
[01:43:22] <FromDiscord> <ElegantBeef> @treeform yea i'll give flatty a try though it's a pretty large api i need to get in nimscript so going to be tedious
[01:47:31] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[01:49:12] <FromDiscord> <System64 ~ Flandre Scarlet> ``int sample_nr = user_data;`` in C, supposing user_data is a pointerâ†µThat's the same thing as ``var sample_nr = cast[ptr cint](userdata)`` in Nim right?
[01:49:30] <FromDiscord> <ElegantBeef> `userdata.addr`
[01:49:55] <FromDiscord> <System64 ~ Flandre Scarlet> ah thanks
[01:50:30] <FromDiscord> <System64 ~ Flandre Scarlet> it says expression has no address
[01:53:33] <FromDiscord> <treeform> In reply to @ElegantBeef "<@!107140179025735680> yea i'll give": Not sure what you mean, don't you just import a file?
[01:54:10] <FromDiscord> <treeform> I though when you said nim script you meant some thing like `static data: string = foo.toFlatty()`
[01:54:17] <FromDiscord> <ElegantBeef> Nope
[01:54:32] <FromDiscord> <treeform> that runs flatty in "nimscript"
[01:54:35] <FromDiscord> <treeform> during the compiler phase
[01:54:39] <FromDiscord> <ElegantBeef> Yea i know
[01:54:55] <FromDiscord> <treeform> I though that is what you meant
[01:55:10] <FromDiscord> <ElegantBeef> Nope i'm running a nim vm from a nim program, and communicating between the two
[01:55:24] <FromDiscord> <ElegantBeef> If it works in the nim vm it might be as simple as getting people to include flatty in their nimscript stdlib
[01:55:25] <FromDiscord> <treeform> Yeah I have not done that. So flatty is not tested there.
[01:55:34] <FromDiscord> <ElegantBeef> Well it's still the NimVm
[01:55:44] <FromDiscord> <treeform> yeah in theory it should just import and work
[01:58:22] <FromDiscord> <treeform> you might combine flatty.nim and objvar.nim into a single file to make it easier include in the vm
[01:58:42] <FromDiscord> <treeform> I feel like objvar.nim should be part of std/typetraits or some thing...
[02:02:11] <FromDiscord> <ElegantBeef> Oh yay `Error: internal error: environment misses: a`
[02:03:02] <FromDiscord> <haxscramper> @ElegantBeef have you considered converting objects from nim side to PNode in the nimscript? It is used internally for object representation, so it might be the fastest
[02:03:17] <FromDiscord> <haxscramper> Since any other deserialization would have to be converted to PNode anyway
[02:03:33] <FromDiscord> <ElegantBeef> Dont quite follow what you mean
[02:04:49] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/rgM
[02:04:55] <FromDiscord> <haxscramper> It is a tree repr of the VM data
[02:05:11] <FromDiscord> <haxscramper> I have an example for this, if I could find it
[02:05:26] <FromDiscord> <ElegantBeef> Doesnt that require so much more serialization logiic
[02:06:00] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/test3.nim
[02:06:27] <FromDiscord> <haxscramper> In reply to @ElegantBeef "Doesnt that require so": Yes, and? Any other way the VM would have to do it in the end
[02:06:56] <FromDiscord> <haxscramper> So if you are passing sequence of ints for example, with flatty you would encode it, then decode in the VM, and then VM would construct an object
[02:07:02] <FromDiscord> <haxscramper> That would be represented as PNode
[02:07:25] <FromDiscord> <haxscramper> In reply to @haxscramper "https://github.com/haxscramper/hack/blob/master/tes": You can dump different things, like enums etc
[02:07:31] <FromDiscord> <haxscramper> To see what is going on
[02:08:49] <FromDiscord> <haxscramper> hnimast is needed for treeDump of the PNode, otherwise you can use astalgo/dump
[02:09:03] <FromDiscord> <Bung> cant see how it works from your link
[02:09:27] <FromDiscord> <Bung> you feed static code data
[02:10:18] <FromDiscord> <ElegantBeef> So in this case i'd override the vm procedures with the parsing of pnodes?
[02:10:59] <FromDiscord> <haxscramper> No. You should somehow just pass PNode and directly cast inside of a VM, or somehow trick compiler into thinking
[02:11:17] <FromDiscord> <haxscramper> So you create VM data manually
[02:11:26] <FromDiscord> <haxscramper> And then convince it is the real deal
[02:11:28] <FromDiscord> <ElegantBeef> then how does nimscript call Nim code
[02:11:46] <FromDiscord> <haxscramper> We are talking about passing data?
[02:11:56] <FromDiscord> <ElegantBeef> Well it's both
[02:12:02] <FromDiscord> <haxscramper> And optimizing it
[02:12:25] <FromDiscord> <ElegantBeef> I'm trying to understand how your suggestion would work
[02:14:15] <FromDiscord> <haxscramper> I think I need to make an example, probably not going to explain it good enough
[02:14:48] <FromDiscord> <Bung> it looks to me it need give a PNode for data structure and the data in memory , then use them deserialize ?
[02:14:51] <FromDiscord> <haxscramper> Certainly not now, with 30% brainpower remaining
[02:14:51] <FromDiscord> <ElegantBeef> Well i understand you get the pnodes directly then convert to/from, but i dont see how the interop is going to happen them
[02:15:03] <FromDiscord> <ElegantBeef> (edit) "them" => "then"
[02:15:34] <FromDiscord> <haxscramper> Maybe I'm missing something, I will make an example tomorrow
[02:17:12] <FromDiscord> <ElegantBeef> Well flatty doesnt work in the nimVm it lacks `copyMem`
[02:29:35] *** Quits: pro (~pro@user/pro) (Ping timeout: 252 seconds)
[02:31:07] *** Joins: cyraxjoe (~joe@201.159.98.32)
[02:31:08] *** Quits: cyraxjoe (~joe@201.159.98.32) (Client Quit)
[02:32:55] *** Joins: cyraxjoe (~joe@201.159.98.32)
[02:34:20] *** Quits: cyraxjoe (~joe@201.159.98.32) (Client Quit)
[02:36:01] *** Joins: cyraxjoe (~joe@201.159.98.32)
[03:10:54] <FromDiscord> <garett> I'm trying to figure out how to use `hasCustomPragma`, and it is not working as I expect it toâ†µHere is what I'm trying: https://play.nim-lang.org/#ix=3suy
[03:11:33] <FromDiscord> <garett> I want my `test` macro to be able to find the `{.swizzle.}` custom pragma attached to the `proc r`
[03:13:20] <FromDiscord> <garett> Anyone here familiar with using `hasCustomPragma` in a macro?
[03:18:22] <FromDiscord> <garett> sent a code paste, see https://play.nim-lang.org/#ix=3suC
[03:22:23] <FromDiscord> <Bung> https://github.com/bung87/scorper/blob/devel/src/scorper/http/routermacros.nim
[03:22:43] <FromDiscord> <Bung> I have this one
[03:24:23] <FromDiscord> <Bung> well, you check on proc call, it should check on proc def
[03:25:28] <FromDiscord> <garett> When you say def, is that accessible by `getType`, `getTypeInst`, or `getTypeImpl`?
[03:26:03] <FromDiscord> <Bung> am not familar with getType family apis.
[03:26:06] <FromDiscord> <garett> I see you're doing this in a template, I wonder whether it cannot be done in a macro?
[03:26:36] <FromDiscord> <Bung> maybe you try procSym.getTypeImpl.hasCustomPragma
[03:28:52] <FromDiscord> <garett> I tried it and discovered that `hasCustomPragma` can only operate on `{nnkSym, nnkBracketExpr, nnkDotExpr, nnkCheckedFieldExpr, nnkTypeOfExpr}`
[03:30:05] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:31:32] <FromDiscord> <Bung> weird, not including procTy
[03:32:46] <FromDiscord> <garett> looks like you can check `hasCustomPragma` only at runtime, not at compile time
[03:32:52] <FromDiscord> <garett> This is pretty disappointing ðŸ™‚
[03:55:02] <FromDiscord> <treeform> In reply to @System64 "seems they doesn't support": What kind of callbacks do you need?
[04:02:30] *** Joins: aeverr (~deodex@ai126162145141.56.access-internet.ne.jp)
[04:05:18] *** Quits: aeverr_ (~deodex@ai126250185187.11.tss.access-internet.ne.jp) (Ping timeout: 265 seconds)
[04:51:11] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @treeform "What kind of callbacks": filling a buffer
[04:51:50] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3suR
[04:55:14] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3suT
[04:56:05] *** Joins: jkl (~jkl@user/jkl)
[05:19:33] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[05:20:24] *** Joins: jkl (~jkl@user/jkl)
[05:24:59] *** Quits: jkl (~jkl@user/jkl) (Remote host closed the connection)
[05:26:53] *** Joins: jkl (~jkl@user/jkl)
[05:36:02] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 255 seconds)
[06:16:42] *** Quits: cyraxjoe (~joe@201.159.98.32) (Ping timeout: 272 seconds)
[06:39:21] <FromDiscord> <vishnumad> What's the best way to do wrapping arithmetic in Nim? Looking for the Nim equivalent to Rust's `wrapping_add` or Wrappingâ†µhttps://doc.rust-lang.org/std/num/struct.Wrapping.html
[06:40:08] <FromDiscord> <ElegantBeef> !eval echo 0u32 - 1u32
[06:40:13] <NimBot> 4294967295
[06:40:45] <FromDiscord> <ElegantBeef> Atleast if i understand the question properly
[06:40:59] <FromDiscord> <ElegantBeef> Nim's unsigned doesnt have overflow protections so just work that way
[06:41:23] <FromDiscord> <vishnumad> Thanks! That works
[06:42:47] <FromDiscord> <vishnumad> I was using `byte`, but changing it to `uint8` makes the compiler happy
[06:43:08] *** Joins: cyraxjoe (~joe@201.159.98.32)
[06:43:18] <FromDiscord> <ElegantBeef> It's an alias so that shouldnt matter
[06:44:22] <FromDiscord> <vishnumad> It's erroring out if I try to do `let a: uint8 = 0` and then later try to do `a += 256` ðŸ¤”
[06:44:44] <FromDiscord> <ElegantBeef> `256u8`
[06:44:49] <FromDiscord> <ElegantBeef> (edit) "`256u8`" => "`255u8`"
[06:44:58] <FromDiscord> <ElegantBeef> bytes only can have 0..255 ðŸ˜„
[06:45:04] <FromDiscord> <ElegantBeef> also `var a`
[06:45:11] <FromDiscord> <vishnumad> Yeah, I'm trying to make it overflow
[06:46:26] <FromDiscord> <ElegantBeef> with that the issue is `+=` uses `SomeInteger`
[06:46:31] <FromDiscord> <ElegantBeef> (edit) "`SomeInteger`" => "`T: SomeInteger`"
[06:48:20] <FromDiscord> <ElegantBeef> !eval var a = 255u8; a += 3; echo a
[06:48:23] <NimBot> 2
[06:50:02] <FromDiscord> <vishnumad> Yup that works, thanks for the help!
[06:50:35] <FromDiscord> <ElegantBeef> the value has to be in the valid range or this gets really odd ðŸ˜„
[06:51:19] <FromDiscord> <vishnumad> Something like `wrapping_add` would be convenient. I supposed I can do the math manually.
[06:56:24] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3svj something like this?
[06:56:34] <FromDiscord> <ElegantBeef> Excuse the bad maths ðŸ˜„
[06:59:20] <FromDiscord> <ElegantBeef> There is `+%` and `-%` but they only work for homogeneous signed types
[07:00:00] <FromDiscord> <vishnumad> I just went back to Rust's `wrapping_add` and it works the exact same way as Nim's add for unsigned ints so I was misremembering.
[07:00:23] <FromDiscord> <ElegantBeef> You cannot use `255u8 + 256`?
[07:01:19] <FromDiscord> <vishnumad> Don't believe so. https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=160157b9c207f8835f8e91c461d67d63
[07:01:56] <FromDiscord> <ElegantBeef> Ah nice
[07:02:15] <FromDiscord> <ElegantBeef> Though some do have their views against Nim's default lack of overflow protection on uints ðŸ˜„
[07:03:43] <FromDiscord> <vishnumad> I prefer opting into overflow as well, but at least I can do what I need to ðŸ˜„
[07:08:33] *** Quits: cyraxjoe (~joe@201.159.98.32) (Ping timeout: 252 seconds)
[07:10:33] <FromDiscord> <ElegantBeef> Hey atleast it's relatively simple to override(though not certain if this is right) https://play.nim-lang.org/#ix=3svn
[07:16:44] *** Joins: cyraxjoe (~joe@201.159.98.32)
[07:16:44] *** Quits: cyraxjoe (~joe@201.159.98.32) (Client Quit)
[07:24:28] *** Joins: cyraxjoe (~joe@201.159.98.32)
[07:30:40] *** Joins: MightyJoe (~joe@201.159.98.32)
[07:33:20] *** Quits: cyraxjoe (~joe@201.159.98.32) (Ping timeout: 272 seconds)
[07:36:21] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:43:20] <FromDiscord> <Bung> @ElegantBeef am wondering cant the json data part serialize using json module directly?
[08:47:21] <FromDiscord> <ElegantBeef> json is slow, vastly slower than my marshal method
[08:47:58] <FromDiscord> <Bung> that's the only reason ?
[08:48:06] <FromDiscord> <ElegantBeef> yes
[08:48:17] <FromDiscord> <ElegantBeef> I originally used json for the communication, and it was stupid slow
[08:48:37] <FromDiscord> <Bung> oh, no , use it make your lib complete right ?
[08:49:15] <FromDiscord> <Bung> json module is safe to use
[08:50:31] <FromDiscord> <Bung> if performance is concerns have you tried packedjson
[08:51:54] <FromDiscord> <ElegantBeef> I had not, i went straight into this method of binary stream communication
[08:52:18] <FromDiscord> <ElegantBeef> I can rather easily add a flag for using json in the new rewrite
[08:52:28] <FromDiscord> <ElegantBeef> The code is much cleaner so easier to append to
[08:54:15] <FromDiscord> <Bung> ok, atleast I know that's the only reason, I can also try it in my fork.
[08:54:17] <FromDiscord> <ElegantBeef> https://github.com/beef331/nimscripter/blob/bigrewrite/src/nimscripter/macros.nim for reference
[08:54:57] <FromDiscord> <ElegantBeef> Well the macro in the old version is a mess to maintain, so highly suggest forking the rewrite ðŸ˜„
[08:55:54] <FromDiscord> <ElegantBeef> It works slightly different you now do `exportToScript: someName` then you do `const yourProcs = implNimscriptModule(someName)` and pass that to `loadScript`
[08:56:30] <FromDiscord> <Bung> guess I just need write few lines in marshalns.nim
[08:56:46] <FromDiscord> <ElegantBeef> You can just delete the marshalns mostly
[08:57:07] <FromDiscord> <ElegantBeef> Just make the parameters send as a string and be recieved as a string
[08:57:17] <FromDiscord> <Bung> why is that , your big rewrite no need it now ?
[08:57:38] <FromDiscord> <ElegantBeef> so if you have 5 parameters just do `%(a, b, c, d, e, f)`
[08:58:04] <FromDiscord> <ElegantBeef> Nah it's just with json you're only needing the string logic which the vm gives you automagically
[08:59:44] <FromDiscord> <ElegantBeef> If you want to give me a few minutes i can make a json switch on the rewrite branch ðŸ˜„
[09:02:58] <FromDiscord> <Bung> have a json switch much better
[09:03:47] <FromDiscord> <Bung> In reply to @ElegantBeef "You can just delete": I was thinking this, it will need wraps marcos to my procs.
[09:22:19] <FromDiscord> <Hi02Hi> how do i deep copy on arc since system.deepCopy is not an option?
[09:26:06] <FromDiscord> <ElegantBeef> @Bung well generics + sym's are not playing nice so this sucks ðŸ˜„
[09:26:31] <FromDiscord> <xflywind> In reply to @Hi02Hi "how do i deep": --deepcopy:on|off         enable 'system.deepCopy' for ``--gc:arc|orc``
[09:35:09] <FromDiscord> <Bung> @ElegantBeef am waiting your json switch.
[09:35:30] <FromDiscord> <ElegantBeef> I'm working on it, tuples are annoying
[09:47:30] <FromDiscord> <ElegantBeef> Well hit an issue that needs to be fixed now, cannot use a devel version of the compiler which is needed to fix an issue with `std` imports
[09:50:25] *** Joins: pro (~pro@user/pro)
[09:59:36] <FromDiscord> <Hi02Hi> In reply to @flywind "--deepcopy:on|off   ": it errors with invalid cmdline option, i think im on too old nim
[09:59:40] <FromDiscord> <Bung> well , use compiler package also will face compatibility issue
[09:59:50] <FromDiscord> <ElegantBeef> I dont know what you mean
[10:00:31] <FromDiscord> <ElegantBeef> There was an issue with the `std/import` with the embedded nimscript that i resolved, which is needed to use json now, but i cannot compile the most recent compiler
[10:00:42] <FromDiscord> <ElegantBeef> So i can only push my changes and make an issue since i cannot see how to resolve this issue
[10:01:10] <FromDiscord> <Bung> compiler package relys something from nim , that may changes when you switch nim version
[10:01:52] <FromDiscord> <ElegantBeef> I'm using nightly nim and the most recent compiler package, so idk seems like a regression to me
[10:02:19] <FromDiscord> <ElegantBeef> Hax you around? You capable of building with compiler 1.5.1?
[10:02:53] *** Quits: MightyJoe (~joe@201.159.98.32) (Quit: I'm out!)
[10:03:13] <FromDiscord> <ElegantBeef> Ok so now it's working ðŸ˜„
[10:03:19] <FromDiscord> <ElegantBeef> Odd behaviour here folks
[10:03:35] <FromDiscord> <ElegantBeef> I spent a good 10 minutes trying to find where the regression happened
[10:03:38] <FromDiscord> <xflywind> well add your package to importantant-packages, if you have tests.
[10:03:44] <FromDiscord> <xflywind> (edit) "importantant-packages," => "important-packages,"
[10:04:25] *** Joins: cyraxjoe (~joe@201.159.98.32)
[10:07:49] <FromDiscord> <xflywind> Especially when you called compiler procs.
[10:10:26] *** Quits: cyraxjoe (~joe@201.159.98.32) (Quit: I'm out!)
[10:10:52] <FromDiscord> <gogolxdong (liuxiaodong)> Why there are so many libraries about GUI instead of a popular one?
[10:15:33] <FromDiscord> <j-james> Because GUI is hard and libraries are competing to be the least bad, and because there aren't an awful lot of Nim programs that make extensive use of GUI
[10:15:49] <FromDiscord> <j-james> I think Rust's in a similar place
[10:17:59] <FromDiscord> <ElegantBeef> Ugh everywhere i go there is an issue ðŸ˜„
[10:18:19] <FromDiscord> <ElegantBeef> Excuse me whilst i just nuke nimscripter so i dont fee like i have any need to continue this ðŸ˜›
[10:25:54] <FromDiscord> <Bung> where is nimscripted.nim?
[10:26:03] <FromDiscord> <ElegantBeef> In the rewrite?
[10:26:20] <FromDiscord> <Bung> yes
[10:26:36] <FromDiscord> <ElegantBeef> Nuked to hell and back, it's present dumb name is `macros`
[10:27:03] <FromDiscord> <Bung> better your macros file have a prefix
[10:27:41] <FromDiscord> <ElegantBeef> Like i said it's dumbly named i just started writting and named it macros, will change the name before a proper release
[10:37:10] <FromDiscord> <ElegantBeef> There i've cleaned up a bit, but stdlib json is the main meanie now due to not supporting tuple serializationg
[10:39:53] <FromDiscord> <ElegantBeef> Do hope that this is easier to work with since the last was a fucking monster ðŸ˜›
[10:43:04] <FromDiscord> <Bung> `Error: invalid pragma: exportToScript`
[10:43:16] <FromDiscord> <Bung> tests/exportedprocs
[10:43:47] <FromDiscord> <ElegantBeef> I just tested and it worked, so might be on old commit?
[10:48:15] <FromDiscord> <ElegantBeef> But i'm taking a break for now, hopefully hax can show what they meant and i can implement it
[10:48:51] <FromDiscord> <Bung> oh you changed tests file
[10:54:38] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[10:54:38] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (*.net *.split)
[10:54:38] *** Quits: fn (~NimBot@ns501209.ip-142-4-210.net) (*.net *.split)
[10:54:38] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[10:54:39] *** Quits: pjz (~pjz@place.org) (*.net *.split)
[10:54:39] *** Quits: federico3 (~quassel@debian/federico) (*.net *.split)
[10:54:57] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[10:54:57] *** Joins: fn (~NimBot@ns501209.ip-142-4-210.net)
[10:54:57] *** Joins: nisstyre (~wes@user/nisstyre)
[10:54:57] *** Joins: pjz (~pjz@place.org)
[10:54:57] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[10:54:57] *** Joins: federico3 (~quassel@debian/federico)
[11:00:38] <FromDiscord> <haxscramper> Alright, I'm back, now going to build an example for what I was talking earlier @ElegantBeef
[11:00:39] <FromDiscord> <Bung> `Error: cannot instantiate: 'getFromBuffer[int]'`
[11:01:20] <FromDiscord> <ElegantBeef> Uhh
[11:01:38] <FromDiscord> <Bung> https://github.com/bung87/nimscripter/tree/slim
[11:02:03] <FromDiscord> <garett> I was looking in std/macros today, and it appears to me that pragmas should appear in the last node of a ProcTy, but I always get nnkEmpty even when I have a custom pragma on my proc
[11:02:26] <FromDiscord> <garett> (edit) "I always get" => "dumpTree shows"
[11:03:53] <FromDiscord> <ElegantBeef> You have an older marshalns no?
[11:04:12] <FromDiscord> <garett> https://play.nim-lang.org/#ix=3suy
[11:05:54] <FromDiscord> <garett> Maybe I need to try an older version of Nim to check whether this ever worked
[11:06:46] <FromDiscord> <garett> The Nim manual suggests that macros can check for custom pragmas, but maybe it never worked for procs?
[11:06:53] <FromDiscord> <Bung> oh yes, thats one
[11:07:51] <FromDiscord> <ElegantBeef> @garett pst https://play.nim-lang.org/#ix=3swd
[11:08:41] <FromDiscord> <ElegantBeef> notice the output of `getImpl.treeRepr` does have them
[11:11:40] <FromDiscord> <garett> Thanks, beef!
[11:12:07] <FromDiscord> <garett> Looks like hasCustomPragma has a bug or is incomplete
[11:14:35] <FromDiscord> <garett> Now I can easily use a pragma to control how I rewrite Nim vector swizzle procs in HLSL
[11:16:49] <FromDiscord> <garett> Ideally, I would like to express many of the rewrite rules with pragmas.  Currently I have a lookup table to map Vec4f to float4, etc
[11:18:48] <FromDiscord> <Bung> @ElegantBeef hmm, where you handle json? I only see you import json module ..
[11:20:36] <FromDiscord> <ElegantBeef> It's not implemented 100% yet
[11:20:40] <FromDiscord> <ElegantBeef> Due to stdlib issues
[11:24:01] <FromDiscord> <Bung> ðŸ˜©
[11:24:15] <FromDiscord> <ElegantBeef> Yea hoping hax has something nice
[11:45:45] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:47:58] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/test10/test10.nim#L28 alright, so my claim is basically - this is the fastest way to pass data around, because all other methods would force VM to do the same internally
[11:48:28] <FromDiscord> <haxscramper> `dump` on object inside of a VM looks like this https://media.discordapp.net/attachments/371759389889003532/863318236627075082/unknown.png
[11:49:34] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3swq
[11:49:43] <FromDiscord> <haxscramper> Also constructs list of nkExprColonExpr nodes
[11:50:27] <FromDiscord> <haxscramper> In reply to @haxscramper "https://github.com/haxscramper/hack/blob/master/tes": I used `hnimast` and my other libraries because I don't want to reimplement get-list-of-fields-from-type-in-macro for 100th time
[11:51:11] <FromDiscord> <haxscramper> https://haxscramper.github.io/hnimast/src/hnimast/object_decl.html#ObjectField `for field in iterateFields(impl)` iterates over this objects
[11:53:42] <FromDiscord> <haxscramper> God, I absolutely HATE this horrible error messages in invalid kind for variant
[11:53:44] <FromDiscord> <haxscramper> `Error: unhandled exception: 'node' is not accessible using discriminant 'kind' of type 'TFullReg'`
[11:53:56] <FromDiscord> <haxscramper> using discriminant `'kind'`
[11:54:09] <FromDiscord> <haxscramper> which god damn value you found and what the hell did you expect?
[11:54:12] <FromDiscord> <haxscramper> nope, just "error"
[11:58:07] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/pull/11955 at least shows current value
[12:06:40] <FromDiscord> <Bung> that should be `foo.f2` is not ...
[12:08:18] <FromDiscord> <haxscramper> I want to have just something
[12:08:33] <FromDiscord> <haxscramper> concrete word placement can be fixed later
[12:12:12] <FromDiscord> <Bung> get merged always after years..
[12:12:43] <FromDiscord> <haxscramper> `> Aug 15, 2019`
[12:14:39] <FromDiscord> <ElegantBeef> Hmm still have to figure out a way to do the communication with this Pnode
[12:15:04] <FromDiscord> <ElegantBeef> Guess i could instead of a mangled proc have a tuple or similar to hold args/ret which is then accessed
[12:16:00] <FromDiscord> <haxscramper> What do you mean "figure out a way to do the communication"? You accept `PNode` and convert it to object, or create `PNode` and `setResult` to return data to VM
[12:17:09] <FromDiscord> <ElegantBeef> I havent looked at it much, just cursory look
[12:28:49] *** Joins: max22- (~maxime@2a01cb08833598000a9761b167f7894b.ipv6.abo.wanadoo.fr)
[12:29:07] *** Quits: max22- (~maxime@2a01cb08833598000a9761b167f7894b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:29:30] *** Joins: max22- (~maxime@2a01cb08833598000a9761b167f7894b.ipv6.abo.wanadoo.fr)
[12:36:33] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[13:29:41] *** Quits: pro (~pro@user/pro) (Ping timeout: 252 seconds)
[13:34:32] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[14:16:42] *** Quits: max22- (~maxime@2a01cb08833598000a9761b167f7894b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:23:26] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[14:34:54] *** Joins: Tejas (~Tejas@103.94.113.216)
[14:35:05] <Tejas> hi
[14:38:04] <FromDiscord> <whyy cant i install choosenim> https://nohello.net
[14:38:13] <FromDiscord> <whyy cant i install choosenim> (edit) "https://nohello.net" => "https://nohello.com"
[14:38:35] <FromDiscord> <whyy cant i install choosenim> https:/nohello.net
[14:38:40] <FromDiscord> <whyy cant i install choosenim> (edit) "https:/nohello.net" => "https://nohello.net"
[14:38:43] <FromDiscord> <whyy cant i install choosenim> whyy
[14:39:02] <FromDiscord> <whyy cant i install choosenim> https://nohello.net/
[14:39:17] <FromDiscord> <whyy cant i install choosenim> https://nohello.net/
[14:40:24] <FromDiscord> <Rika> Hello, whatâ€™s up?
[14:43:05] *** Tejas is now known as TejasAgarwal
[14:50:41] <FromDiscord> <PsychoClay> is there a way to get more info on an illformed ast error?
[14:53:08] *** Quits: TejasAgarwal (~Tejas@103.94.113.216) (Quit: Client closed)
[14:54:51] <FromDiscord> <haxscramper> No, it is used like `assert` in compiler
[14:54:57] <FromDiscord> <konsumlamm> posting the code here maybe
[14:54:58] <FromDiscord> <haxscramper> So not a lot of additional information available
[14:55:15] <FromDiscord> <haxscramper> You can do `dumpTree` and compare expected structure vs what you got
[14:56:21] <FromDiscord> <PsychoClay> i tried dumptree but i dont really know what a correct ast looks like
[14:57:05] <FromDiscord> <vindaar> feel free to paste the tree. maybe we can help
[15:00:30] <FromDiscord> <PsychoClay> https://pastebin.com/f6jLtkAf
[15:01:53] <FromDiscord> <dom96> In reply to @richard stallmen(crazy GNU guy) "https://nohello.net/": This only applies to PMs or pings.
[15:03:04] <FromDiscord> <Rika> In reply to @dom96 "This only applies to": I think it applies in general, I just do not like the way he put it
[15:04:38] <FromDiscord> <haxscramper> people sometimes starts with two consecutive messages here
[15:04:41] <FromDiscord> <haxscramper> hi
[15:04:42] <FromDiscord> <haxscramper> <question>
[15:04:47] <FromDiscord> <dom96> Itâ€™s okay to join a chat channel and say hello. Not everybody has questions to ask
[15:04:59] <FromDiscord> <dom96> Maybe they just want to say hello? ðŸ™‚
[15:06:42] <FromDiscord> <vindaar> @PsychoClay\: that AST looks fine, no? The tree is just the output of that `dumpTree` call
[15:06:51] <FromDiscord> <PsychoClay> yea
[15:07:02] <FromDiscord> <vindaar> so where is your problem
[15:07:03] <FromDiscord> <vindaar> ?
[15:07:36] <FromDiscord> <PsychoClay>  https://media.discordapp.net/attachments/371759389889003532/863368350427774976/unknown.png
[15:08:04] <FromDiscord> <vindaar> how is that code generated though?
[15:08:31] <FromDiscord> <PsychoClay> with a template, its in the pastebin at the bottom
[15:09:40] <FromDiscord> <vindaar> not sure, but injecting a local variable with the same name as the template into the calling scope seems fishy to me
[15:10:23] <FromDiscord> <haxscramper> I'm not sure but `--hint[MsgOrigin]:on` might show which compiler check is reponsible for the message
[15:15:37] <FromDiscord> <PsychoClay> In reply to @vindaar "not sure, but injecting": renaming the templates doesnt seem to change anything
[15:20:32] <FromDiscord> <vindaar> I honestly don't really understand how the template is supposed to work. Why do these templates need to be nested in this way? Can't you define them individually?
[15:21:03] <FromDiscord> <PsychoClay> i could but then the varibles in the outer template would be unavailble in the inner ones
[15:21:59] <FromDiscord> <vindaar> ah you mean those `headerData` and friends variables
[15:22:02] <FromDiscord> <PsychoClay> yea
[15:22:15] <FromDiscord> <PsychoClay> maybe i should just redesign the whole thing
[15:24:16] <FromDiscord> <vindaar> without being able to compile this locally I don't really see the issue (aside from being confused, haha)
[15:31:25] <fn> <04enthus1ast[web]99> what is the preferred way to test if a value is valid enum data?
[15:32:04] <fn> <04enthus1ast[web]99> before i build a macro that generates a case i was wondering if there is something like this already
[15:32:46] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (Ping timeout: 272 seconds)
[15:32:53] <fn> <04enthus1ast[web]99> i could do a parseEnum[MyEnum](myEnum)
[15:33:01] <fn> <04enthus1ast[web]99> i could do a parseEnum[MyEnum]($myEnum)
[15:33:44] *** Joins: xet7 (~xet7@user/xet7)
[15:33:51] <FromDiscord> <PsychoClay> In reply to @vindaar "without being able to": https://github.com/PsychoClay/aberrant
[15:33:52] <fn> <12R2D299> 4GitHub: 7"some webscraper in nim"
[15:40:45] <FromDiscord> <haxscramper> In reply to @fn "<enthus1ast[web]> what is the": Your enum has holes or not?
[15:41:15] <FromDiscord> <haxscramper> If it doesn't have holes you can simply check for `ord() in ord(low(E)) .. ord(high(E))`
[15:41:23] <FromDiscord> <haxscramper> (edit) "`ord()" => "`value"
[15:42:42] <fn> <04enthus1ast[web]99> it hast holes
[15:42:44] <fn> <04enthus1ast[web]99> has
[15:47:52] <FromDiscord> <haxscramper> `devel` has `std/enumutils.items` that can iterate over enum with holes https://github.com/nim-lang/Nim/blob/devel/lib/std/enumutils.nim#L79
[15:48:19] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[15:48:23] <FromDiscord> <haxscramper> Otherwise you need to write custom macro or something simila
[15:53:48] <fn> <04enthus1ast[web]99> ah nice, thank youÂ  haxscramper i'll have a look at this
[15:56:37] <fn> <04enthus1ast[web]99> i wonder why testing if an enum has correct values is not yet in the stdlib
[15:56:58] <fn> <04enthus1ast[web]99> looks like a common job to me :)
[15:57:09] <FromDiscord> <Rika> prolly was neglected
[15:57:37] <FromDiscord> <Rika> we're a pretty small community, its relatively difficult for things to be worked on (i think)
[16:21:13] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:13] <fn> <11ForumUpdaterBot99> New post on r/nim by thelolrus: Nim livestream | Jambone template language | Episode 2, see https://reddit.com/r/nim/comments/ohhi29/nim_livestream_jambone_template_language_episode_2/
[16:47:14] <FromDiscord> <Hastur> I am investigating how to call Nim from C.â†µAccording to the "Nim Backend Integration", `NimMain` is required for garbage collection, but is it necessary to call `NimMain` even if `--gc:arc` is specified?
[16:58:52] <FromDiscord> <offbeat-stuff (offbeat-stuff)> Hi how can i get .79 to become 0.79 in nim. I tried dot operator but only `.`79 works with macros
[16:59:01] <FromDiscord> <offbeat-stuff (offbeat-stuff)> \`.\`79
[17:00:01] <FromDiscord> <System64 ~ Flandre Scarlet> I have to put NimMain for garbage collection?
[17:12:32] *** Joins: max22- (~maxime@2a01cb0883359800a8f112ee5ab208b9.ipv6.abo.wanadoo.fr)
[17:15:26] <FromDiscord> <haxscramper> This is not supported, but can hack it with `.` operator, but I don't know why you would want this
[17:15:27] <FromDiscord> <haxscramper> You want to write `echo .79` instead of `echo 0.79`?
[17:21:09] <FromDiscord> <Hastur> sent a long message, see http://ix.io/3sxJ
[17:21:43] <FromDiscord> <Hastur> sent a long message, see http://ix.io/3sxK
[17:28:52] *** Joins: beshr (~beshr@user/beshr)
[17:32:56] <FromDiscord> <Kingherring> Livestream of some Nim programming begins in 1hr!!!! (10am EST). https://www.youtube.com/watch?v=rJzUanZ35c8 or https://www.twitch.tv/kingherringâ†µYouTube
[17:33:24] <FromDiscord> <Kingherring> oh I see the reddit post was posted above. ðŸ™‚
[17:42:23] *** Joins: pro (~pro@user/pro)
[17:44:20] *** Quits: max22- (~maxime@2a01cb0883359800a8f112ee5ab208b9.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[18:02:18] <FromDiscord> <dom96> In reply to @Hastur "I am investigating how": probably is yeah, NimMain also runs initialisation procs for each module (so if you have top-level code in a module it gets run)
[18:04:11] *** Joins: arkurious (~arkurious@user/arkurious)
[18:37:34] <FromDiscord> <Hastur> In reply to @dom96 "probably is yeah, NimMain": Thanks you!â†µIt is true that the top level code was not executed without calling `NimMain`.
[19:14:17] <FromDiscord> <Bung> @haxscramper how you get type string representation put into parsePNodeStr ?
[19:15:01] <FromDiscord> <haxscramper> I don't understand the question. `parsePNodeStr` accepts string and returns node
[19:15:40] <FromDiscord> <haxscramper> If you need to convert `PNode` to string use `compiler/renderer.$`
[19:16:22] <FromDiscord> <Bung> well, your example show's the type string representation is static string
[19:17:16] <FromDiscord> <haxscramper> what is "type string" and which example you are talking about
[19:17:23] *** Joins: cyraxjoe (~joe@201.159.98.32)
[19:18:42] <FromDiscord> <Bung> let node = """â†µtype Type = objectâ†µ  hello: floatâ†µ""".parsePNodeStr()
[19:21:20] <FromDiscord> <haxscramper> https://haxscramper.github.io/hnimast/src/hnimast/obj_field_macros.html#parseObject%2CN%2Cbool%2Cseq%5BN%5D
[19:22:12] <FromDiscord> <haxscramper> Also `enum_decl` has `parseEnum`
[19:22:50] <FromDiscord> <Bung> so I can put a type name not just  string representation
[19:24:39] <FromDiscord> <haxscramper> `parse_object` accepts `PNode or NimNode` and returns you a structured object that at unparsed from the noed
[19:24:57] <FromDiscord> <haxscramper> as good as it managed to do this\
[19:25:27] <FromDiscord> <haxscramper> Due to some ugly quirks in typed AST it requires additional hacks, like passing constant values separately
[19:26:20] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3syg
[19:27:42] <FromDiscord> <Bung> then how to restore instance by using parse_object returns?
[19:28:25] <FromDiscord> <haxscramper> `.toNNode()`
[19:28:50] <FromDiscord> <haxscramper> The round-trip conversion does loose some information, and in general it was designed to do only one-way conversion
[19:29:03] <FromDiscord> <haxscramper> Either generate object declarations, or process existing ondes
[19:32:53] <FromDiscord> <Bung> oh, it works as that does it means I actually have dynamic type?
[19:33:58] <FromDiscord> <haxscramper> no, it does not have any dynamic type or anything related. It is just an IR for object structure
[19:35:01] <FromDiscord> <Bung> but I can put any type declartion string into parsePNodeStr ?
[19:35:49] <FromDiscord> <haxscramper> yes, you can put any syntactically valid nim code in here
[19:39:39] <FromDiscord> <Bung> wait , toNNode just get type structure, dont event put data into it
[19:40:33] <FromDiscord> <haxscramper> yes, because there is no object to put data into
[19:40:49] <FromDiscord> <haxscramper> `ObjectDecl` describe structure of the object declaration
[19:41:22] <FromDiscord> <haxscramper> `ObjectField` has `value: Option[N]`, but it is not
[19:41:26] <FromDiscord> <haxscramper> Used by `toNNode()`
[19:41:33] <FromDiscord> <haxscramper> Since it would generate invalid AST
[19:41:50] <FromDiscord> <haxscramper> So I can parse object with `field: type = default`, but won't render it back again
[19:42:30] <FromDiscord> <Bung> I thought it works like protobuf, like you get type structure and data, restore back to a instance
[19:42:56] <FromDiscord> <haxscramper> No, it has nothing to do with data and everything to do with declaration
[19:43:05] <FromDiscord> <haxscramper> If you want to use it fo
[19:43:06] <FromDiscord> <haxscramper> hmm
[19:43:16] <FromDiscord> <haxscramper> Example for nimscript interop I showed earlier used `getObjectStructure()`
[19:43:30] <FromDiscord> <haxscramper> It internally calls `parseObject()` and I used it in macro to unpack fields
[19:43:42] <FromDiscord> <Bung> so how could it be used in nimscript
[19:44:05] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/test10/test10.nim#L33
[19:45:13] <FromDiscord> <haxscramper> Let's put the question differently - what are you trying to do?
[19:46:59] <FromDiscord> <Bung> am trying to use nimscript but it has problem  with marshal things
[19:48:08] <FromDiscord> <haxscramper> Have you looked at my example?
[19:50:00] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[19:50:27] <FromDiscord> <Bung> yes, vmNode: untyped is what
[19:51:29] <FromDiscord> <haxscramper> `PNode`
[19:52:07] <FromDiscord> <haxscramper> Well, it all based on my assumption that cheapest way to interface with VM is to directly operate on `PNode`s
[19:52:19] <FromDiscord> <haxscramper> So in deserializes PNode to type
[19:52:23] <FromDiscord> <haxscramper> And serializes type to PNode
[19:52:50] <FromDiscord> <haxscramper> Identical to json serialization, except all conversion happen on the caller side
[19:53:02] <FromDiscord> <haxscramper> In onther words - compiled nim code
[19:53:09] <FromDiscord> <haxscramper> And no conversion are performed in the VM
[19:53:31] <FromDiscord> <haxscramper> While all other ideas - json/flatty rely on code runnin in VM as well
[19:53:40] *** Joins: max22- (~maxime@2a01cb0883359800e8362f8bd3aea055.ipv6.abo.wanadoo.fr)
[19:59:33] <FromDiscord> <Bung> it I call vm proc I do toVm on args then fromVm get results ?
[20:01:22] <FromDiscord> <haxscramper> `fromVm` is used to convert data that came from vm to your nim code. `toVm` is used to send data to vm
[20:01:34] <FromDiscord> <haxscramper> So `args.setResult toVM(<some nim runtime data>)`
[20:02:15] <FromDiscord> <haxscramper> Or `let passedFromVm = fromVm(<some concrete type>, args.getNode(0))`
[20:02:57] <FromDiscord> <haxscramper> A little more involved than this, but core ide stays the same, regardless of the number of `case` checks
[20:03:32] <FromDiscord> <Bung> looks like it will works in this use case I'll try it
[20:09:54] <FromDiscord> <EMPTY> Hi
[20:15:49] <FromDiscord> <whyy cant i install choosenim> there we go again
[20:16:52] <FromDiscord> <shadow.> what's the easiest way for me to create a string with a certain len
[20:16:53] <FromDiscord> <shadow.> (edit) "len" => "len?"
[20:17:08] <FromDiscord> <vindaar> `newString(<myLen>)`
[20:17:35] <FromDiscord> <shadow.> where is that defined?
[20:17:38] <FromDiscord> <shadow.> i didnt see it in strutils
[20:17:44] <FromDiscord> <vindaar> it's in system
[20:17:56] <FromDiscord> <vindaar> https://nim-lang.github.io/Nim/system.html#newString%2CNatural
[20:18:19] <FromDiscord> <shadow.> ah okay
[20:18:20] <FromDiscord> <shadow.> thanks
[20:19:29] <FromDiscord> <EMPTY> Do anyone have a good tutorial on a simple chat app?
[20:22:49] <FromDiscord> <zetashift> The Nim in Action book has a great one, it's paid tho, there is also this https://xmonader.github.io/nimdays/day19_witai.html
[20:23:26] <FromDiscord> <dom96> you can access the example from the book freely though https://github.com/dom96/nim-in-action-code/tree/v1.2.6/Chapter3/ChatApp
[20:23:47] <FromDiscord> <EMPTY> Thanks guys, imma check those out
[20:25:54] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:37:52] <FromDiscord> <EMPTY> Sorry to annoy you guys but I just want to create a little server and client that can just send strings between them, how is it possible?
[21:01:21] <FromDiscord> <EMPTY> No thanks, I got something working that I base on a reverse-shell
[21:02:43] <FromDiscord> <EMPTY> sent a long message, see https://paste.rs/g6L
[21:03:42] <FromDiscord> <EMPTY> sent a code paste, see https://paste.rs/JuK
[21:10:02] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[21:10:02] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[21:10:02] *** Joins: beshr (~beshr@user/beshr)
[21:10:04] <FromDiscord> <dom96> You can literally just copy the example I gave, it's fairly simple and has plenty of comments
[21:13:09] <FromDiscord> <EMPTY> Yes but it's more than what I need, I said I wanted a chat app just to get something that can send basic strings between 2 software, yours iw yes simple but uses more things that I wanted so I would have to remove like 80% of the code, mine is as simplest as it could be.â†µâ†µBut when I need something to chat I'll try yours
[21:18:54] *** Joins: SebastianM (~seba@user/sebastianm)
[21:21:21] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3szb
[21:21:23] <FromDiscord> <haxscramper> This code does not give any errors
[21:22:13] <FromDiscord> <haxscramper> No generics, nothing
[21:22:14] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3szc
[21:22:44] <FromDiscord> <haxscramper> Changing `func`/`proc` does not affect it in any way of course
[21:30:44] *** Quits: pro (~pro@user/pro) (Ping timeout: 252 seconds)
[21:54:53] <FromDiscord> <hamidb80> why do i get this ? â†µnote: the code compiles successfully https://media.discordapp.net/attachments/371759389889003532/863470845593780233/unknown.png
[21:55:20] <FromDiscord> <hamidb80> example from here: https://github.com/karaxnim/karax#event-model
[21:55:21] <fn> <12R2D299> 4GitHub: 7"Karax. Single page applications for Nim."
[22:03:14] <FromDiscord> <hugogranstrom> I think it's a false positive (read it in one of the tutorials on Karax sometime ago)â†µ(@hamidb80)
[22:15:48] <FromDiscord> <aleclarson> What is "Undefined symbols for architecture" saying when I know the symbols exist in a header included with `header` pragma?
[22:16:49] <FromDiscord> <aleclarson> What's weird is that symbols in `/usr/local/include/node/node_api.h` are found by the linker, but not symbols in `/usr/local/include/node/js_native_api.h` (even though `node_api.h` includes that header)
[22:17:00] <FromDiscord> <Hi02Hi> closure iterator bug: https://play.nim-lang.org/#ix=3szz
[22:17:32] <FromDiscord> <hamidb80> In reply to @Hi02Hi "closure iterator bug: https://play.nim-lang.org/#ix": whaaaat
[22:17:40] <FromDiscord> <aleclarson> (edit) "header)" => "header)â†µMaybe this is better suited for stackoverflow"
[22:17:45] <FromDiscord> <Hi02Hi> i only goes through 1 iteration
[22:17:51] <FromDiscord> <Hi02Hi> (edit) "i" => "`i`"
[22:18:13] <FromDiscord> <hamidb80> open an issue for it
[22:19:10] <FromDiscord> <hamidb80> In reply to @hugogranstrom "I think it's a": should i care about it? is there any solution ,.. ?
[22:19:15] <FromDiscord> <hamidb80> (edit) "solution" => "solutions"
[22:21:06] <FromDiscord> <hugogranstrom> The message I got from reading it was that I just shouldn't care or hope someone fixes it. Not sure how thoughâ†µ(@hamidb80)
[22:23:57] <FromDiscord> <hugogranstrom> @hamidb80 here's the link to it: https://moigagoo.svbtle.com/exploring-karax
[22:24:07] <FromDiscord> <hugogranstrom> Seems to be a nimsuggest bug
[22:24:56] <FromDiscord> <hamidb80> oh, thank u
[22:26:31] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[22:28:41] <FromDiscord> <Hi02Hi> https://github.com/nim-lang/Nim/issues/18474
[22:30:51] <FromDiscord> <EMPTY> Yeah this kind of jug appears a lot, I mean my IDE frics a lot sometime but the program runs and compiles correctlyâ†µ(@hamidb80)
[22:46:22] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[22:59:56] <FromDiscord> <aleclarson> How do i find what version of `clang` nim uses? Is it the system-wide clang?
[23:03:07] <FromDiscord> <aleclarson> only 469 #nim-lang questions on stackoverflow ðŸ¤¯
[23:03:24] <fn> <11ForumUpdaterBot99> New question by aleclarson: Clang linker finding some symbols but not others, see https://stackoverflow.com/questions/68330584/clang-linker-finding-some-symbols-but-not-others
[23:20:28] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[23:51:33] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:51:57] *** Joins: supakeen (~user@python/site-packages/supakeen)
