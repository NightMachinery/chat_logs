[00:06:04] <FromDiscord> <exelotl> I always found "Learn Nim in X Minutes" to be really confusing
[00:14:35] <FromDiscord> <exelotl> it's kinda disorganised and starts with the wrong basics (`when`, `discard` and `tuple` ???)
[00:16:06] *** Joins: max22- (~maxime@2a01cb08833598002e27d7fffeabcac8.ipv6.abo.wanadoo.fr)
[00:17:27] <FromDiscord> <konsumlamm> `discard` is quite basic though
[00:23:28] <FromDiscord> <exelotl> yeah fair I'll give them that. But they demonstrate it multiple times too
[00:29:00] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[00:29:30] *** Joins: leth (~user@h-37-123-182-177.A328.priv.bahnhof.se)
[00:30:11] *** Quits: leth (~user@h-37-123-182-177.A328.priv.bahnhof.se) (Quit: nor eason)
[00:41:18] <FromDiscord> <planetis> this is equivalent to `proc some_function(x: int): int {.some_macro.} =`‚Üµ(@dain)
[00:42:51] <FromDiscord> <planetis> can modify a procedure this way
[00:46:51] <FromDiscord> <dain> In reply to @planetis "this is equivalent to": oh neato
[00:46:55] <FromDiscord> <dain> that makes it cleaner
[00:47:15] <FromDiscord> <dain> didn't know you could define custom pragmas
[00:48:12] <FromDiscord> <dain> wait, is this how the `pure` pragma is implemented? scan the function body for any calls to a blacklisted function that performs I/O?
[00:48:33] <FromDiscord> <dain> (edit) "`pure`" => "`noSideEffect`"
[01:06:21] <FromDiscord> <ElegantBeef> Nah no side effect is apart of the compiler
[01:15:55] <FromDiscord> <Quibono> Is there any good comparison between Nim and similar languages like V/Zig?
[01:16:53] <FromDiscord> <konsumlamm> V isn't all that similar tbh
[01:19:02] <FromDiscord> <Quibono> I ask because they're targeting similar niches.
[01:19:17] <FromDiscord> <codic> V is a language that promises far more than what it delivers
[01:19:34] <FromDiscord> <codic> the developer claims far too much that is nowhere near reality at all, i'd stay away from it
[01:20:05] <FromDiscord> <codic> zig is pretty cool but it's more of a C replacement, so you'll usually do more things by hand than nim
[01:20:13] <FromDiscord> <konsumlamm> as for Zig: they have very different philosophies
[01:20:16] <FromDiscord> <codic> does https://github.com/treeform/ws support server side ssl?
[01:20:18] <fn> <12R2D299> 4GitHub: 7"Simple WebSocket library for nim."
[01:20:28] <FromDiscord> <codic> yeah zig is very "keep it small, no macros, explicitness"
[01:20:32] <FromDiscord> <codic> whereas nim has lots of syntax sugar
[01:21:06] <FromDiscord> <konsumlamm> ye, Zig has a lot of intentional "limitations", like no GC, no macros, no default arguments
[01:21:19] <FromDiscord> <konsumlamm> the first two are the most significand differences i'd say
[01:21:26] <FromDiscord> <Quibono> Do you think the syntactic sugar is well born out versus the simplistic approach?
[01:21:29] <FromDiscord> <konsumlamm> (although you can technically use Nim without GC)
[01:21:42] <FromDiscord> <konsumlamm> "well born out"?
[01:22:12] <FromDiscord> <Quibono> Erm, is it worth it? I think limited options as to how you do things can wind up being nice.
[01:22:25] <FromDiscord> <konsumlamm> imo definitely, but ymmv
[01:23:07] <FromDiscord> <vindaar> I feel like half of my libraries would be more verbose without it üòÖ‚Üµ(@Quibono)
[01:23:37] <FromDiscord> <ElegantBeef> Different strokes for different folks, but Vlang is for no one üòõ
[01:23:53] <FromDiscord> <Quibono> Eh, i actually find V to not be that bad nowadays
[01:23:59] <FromDiscord> <Quibono> But different conversation
[01:24:14] <FromDiscord> <haxscramper> they did full rewrite of the compiler since the start IIRC
[01:24:37] <FromDiscord> <konsumlamm> at some point the author realized that the promise of not using an AST isn't realistic
[01:24:39] <FromDiscord> <haxscramper> so it's like completely different implementation, aside from basic syntax
[01:25:17] <FromDiscord> <haxscramper> Also very strange project planning when they are offically writing an os in V
[01:25:26] <FromDiscord> <konsumlamm> V has so many false promises that i wouldn't even wanna use it if it was good some day
[01:25:44] <FromDiscord> <Quibono> They definitely use an ast, idk when they rewrote it, and yeah the OS is ongoing
[01:25:45] <FromDiscord> <haxscramper> they have excess contributors or something
[01:25:58] <FromDiscord> <haxscramper> OS, browser, compiler, editor
[01:26:02] <FromDiscord> <konsumlamm> In reply to @Quibono "They definitely use an": ye, but the author originally claimed that it won't need an AST
[01:26:25] <FromDiscord> <Quibono> In reply to @konsumlamm "ye, but the author": Yeah fair he over promises, the language isn‚Äôt as bad as people make it seem tho.
[01:26:35] <FromDiscord> <ElegantBeef> They also claimed no memory leaks without GC or a RC üòÑ
[01:26:46] <FromDiscord> <ElegantBeef> So that bitch leaked
[01:26:57] <FromDiscord> <konsumlamm> it was that bad at some point though
[01:27:01] <FromDiscord> <konsumlamm> maybe it's better now7
[01:27:20] <FromDiscord> <konsumlamm> half the "WIP"s are still not implemented though
[01:27:52] <FromDiscord> <haxscramper> they certainly have a lot of attention though
[01:28:08] <FromDiscord> <haxscramper> And since people are into "minimal" languages these days
[01:28:13] <FromDiscord> <konsumlamm> and look, now it uses a GC afaik, after claiming that "memory management will be like Rust but wthout ownership/borrowing"
[01:28:30] <FromDiscord> <haxscramper> btw, I think ARC is close to what they claim to add
[01:28:37] <FromDiscord> <haxscramper> really close
[01:28:46] <FromDiscord> <konsumlamm> In reply to @haxscramper "And since people are": it's not as minimal as people make it out to be from what i've seen
[01:28:49] <FromDiscord> <haxscramper> no GC, deterministic, no borrowing
[01:28:55] <FromDiscord> <konsumlamm> and a lot of stuff is builtin, that shouldn't be
[01:29:01] <FromDiscord> <Quibono> So yeah they basically use a GC for part of it and then ‚Äúautofree‚Äù which is basically comptime reference counting.
[01:29:05] <FromDiscord> <konsumlamm> In reply to @haxscramper "no GC, deterministic, no": ARC is definitely a GC in my mind
[01:29:21] <FromDiscord> <ElegantBeef> Well it's memory management but it's not a garbage collector
[01:30:20] <FromDiscord> <haxscramper> In reply to @konsumlamm "it's not as minimal": they don't have `while` loop https://github.com/vlang/v/blob/master/doc/docs.md#bare-for
[01:30:27] <FromDiscord> <haxscramper> `minimal` confirmed
[01:30:31] <FromDiscord> <Quibono> So anyway, ya‚Äôll should try it, but I‚Äôm more interested in /Why Nim/
[01:30:52] <FromDiscord> <konsumlamm> In reply to @haxscramper "they don't have `while`": ye, because they use `for` for 5 different things, including while loops
[01:30:59] <FromDiscord> <ElegantBeef> macros, lovely syntax, pretty good CTE
[01:31:01] <FromDiscord> <konsumlamm> so it has while loops, they're just called for loops
[01:31:15] <FromDiscord> <haxscramper> In reply to @konsumlamm "ARC is definitely a": well, that mostly a PR talk, really. I don't care about concrete definitions, but since people sometimes have weird reactions to GC
[01:31:40] <FromDiscord> <haxscramper> And really into "no GC" sometimes
[01:31:48] <FromDiscord> <konsumlamm> that's another issue
[01:32:00] <FromDiscord> <konsumlamm> In reply to @ElegantBeef "Well it's memory management": according to wikipedia it is :P
[01:32:08] <FromDiscord> <ElegantBeef> Indeed üòÑ
[01:32:19] <FromDiscord> <haxscramper> but I personally don't have enough expertise to argue how we should call ARC
[01:32:45] <FromDiscord> <haxscramper> In reply to @Quibono "So anyway, ya‚Äôll should": C++ interop
[01:33:02] <FromDiscord> <haxscramper> Probably the best you can get, though haxe might be better
[01:33:09] <FromDiscord> <Quibono> CTE?
[01:33:10] <FromDiscord> <haxscramper> but they've build whole language around this
[01:33:15] <FromDiscord> <ElegantBeef> Compile time evaluation
[01:33:16] <FromDiscord> <konsumlamm> honestly, i (personally) would use orc over arc any time anyway
[01:33:26] <FromDiscord> <haxscramper> well, yes, orc will be default
[01:33:30] <FromDiscord> <ElegantBeef> Well ofc cause it only introduces cycle collection where needed
[01:33:32] <FromDiscord> <konsumlamm> i'm not confident enough to be sure that i'd never make ref cycles
[01:33:33] <FromDiscord> <ElegantBeef> So no cycles = arc üòÑ
[01:34:01] <FromDiscord> <konsumlamm> but i can't imagine any useful definition of GC that wouldn't include orc
[01:34:21] <FromDiscord> <ElegantBeef> Eh it think it's a moot thing to debate about, more merits in functional use and benefits
[01:35:17] <FromDiscord> <haxscramper> `ref bool`
[01:35:47] <FromDiscord> <konsumlamm> In reply to @Quibono "CTE?": that's one of the most unique features of Nim: you can call almost any function at compile time
[01:36:09] <FromDiscord> <konsumlamm> together with the macro system, which allows you transform Nim code at compile time (using Nim code)
[01:36:47] <FromDiscord> <haxscramper> In reply to @Quibono "So anyway, ya‚Äôll should": To be honest I sometimes find this question kind of hard to answer, because if I start just listing language features, some of them might need somewhat boring explanation
[01:37:01] <FromDiscord> <haxscramper> but in general I find nim to be in line of how I want to do things
[01:37:25] <FromDiscord> <haxscramper> language does what I want it to and not being too smart about "the one way" to do things
[01:37:44] <FromDiscord> <haxscramper> I don't like these "one way" languages, so
[01:37:46] <FromDiscord> <konsumlamm> In reply to @Quibono "So anyway, ya‚Äôll should": i'm curious what you like so much about it though, it doesn't have any interesting features imo, other than "being fast" ig (as long as you don't encounter a bug :P)
[01:39:08] <FromDiscord> <haxscramper> it can be considered a better go, at least if you don't do threading/async whatever google optimized go for
[01:39:19] <FromDiscord> <haxscramper> and people like go for some reason
[01:39:27] <FromDiscord> <konsumlamm> ~~i don't understand that either~~
[01:41:46] <FromDiscord> <Quibono> It‚Äôs fast, simple, active community, I kinda do like the ‚Äòone way‚Äô mentality to an extent... uh, yeah pretty much that. I like that it mostly doesn‚Äôt have a GC although I‚Äôd like that to be more true
[01:42:09] <FromDiscord> <haxscramper> do you write high-performance code?
[01:42:15] <FromDiscord> <haxscramper> like hard realtime?
[01:42:33] <FromDiscord> <Quibono> I want to yes.
[01:42:57] <FromDiscord> <Quibono> Soft real-time at least.
[01:44:07] <FromDiscord> <dom96> In reply to @konsumlamm "that's one of the": these days there is actually many more languages that support it, D, Zig, Rust
[01:44:26] <FromDiscord> <konsumlamm> ye, but it's still not very wide spread
[01:44:42] <FromDiscord> <konsumlamm> and as much as i like Rust, it's CTFE can't be compared to that of Nim or D
[01:45:07] <FromDiscord> <Canelhas> sent a long message, see http://ix.io/3rRR
[01:45:32] <FromDiscord> <konsumlamm> i only wish it didn't have so many bugs üòÖ
[01:45:44] <FromDiscord> <dom96> so I'm lacking context, what are we discussing? üôÇ
[01:45:49] <FromDiscord> <konsumlamm> Nim
[01:45:54] <FromDiscord> <Canelhas> In reply to @dom96 "so I'm lacking context,": why nim
[01:46:03] <FromDiscord> <haxscramper> one of the very nice features of nim is support for lazy evaluation
[01:46:09] <FromDiscord> <konsumlamm> wat
[01:46:11] <FromDiscord> <haxscramper> no haskell-level
[01:46:17] <FromDiscord> <haxscramper> but you can get smart with templates
[01:46:35] <FromDiscord> <dom96> In reply to @Canelhas "why nim": ahh cool, for me no other language fits the bill of "fast Python"
[01:46:46] <FromDiscord> <konsumlamm> any language with closures/lambdas can implement lazy evaluation though
[01:46:54] <FromDiscord> <dom96> Nim is just as expressive as Python and gives me compiled binaries
[01:47:08] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rRS
[01:47:22] <FromDiscord> <haxscramper> Idk, but I think this too is called lazy
[01:47:24] <FromDiscord> <Canelhas> the only thing that i wish was better is tooling‚Üµi'm a pleb using vscode + win10‚Üµand tooling isn't quite there yet
[01:47:42] <FromDiscord> <haxscramper> but that's not what regular definition of lazy evaluiation means of course
[01:47:44] <FromDiscord> <Canelhas> ( but i come from java so i might be spoiled in that regard )
[01:48:25] <FromDiscord> <konsumlamm> the most annoying part imo is that error highlighting only highlights the first character
[01:51:50] <FromDiscord> <haxscramper> also bitsets, variant types and arrays
[01:52:08] <FromDiscord> <haxscramper> if I were to choose one feature that I wanted to add to every language, it would probably be this one
[01:52:41] <FromDiscord> <haxscramper> all nim's `enum`-related stuff is just great
[01:53:08] <FromDiscord> <haxscramper> When #368 is implemented, it would be almost perfect
[01:53:28] <FromDiscord> <Canelhas> In reply to @haxscramper "When #368 is implemented,": whats changing?
[01:53:43] <FromDiscord> <haxscramper> you can have same field in different branches
[01:54:17] <FromDiscord> <haxscramper> well, the syntax looks a little different but the behavior matches
[01:59:23] <FromDiscord> <ElegantBeef> The contains -> `in` and `notin` is fantastic üòõ
[02:01:21] <FromDiscord> <haxscramper> `if len(myset  {flag1, flag2}) > 0`
[02:01:35] <FromDiscord> <haxscramper> `myset ‚à© {flag1, flag2}`
[02:06:25] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[02:06:25] *** Joins: greaser|q (greaser@user/greasemonkey)
[02:06:27] *** greaser|q is now known as GreaseMonkey
[02:09:05] <FromDiscord> <Bung> https://github.com/bung87/lsp_client/blob/master/tests/test1.nim I get io error ommunication to nimlsp server use asynctools, any idea?
[02:22:26] <FromDiscord> <Jasmine and Don't Forget!~> I actually don't have a job! it was an mlm
[02:22:45] <FromDiscord> <Jasmine and Don't Forget!~> Woot! woot!
[02:25:55] <FromDiscord> <mratsim> wot?
[02:28:57] <FromDiscord> <Jasmine and Don't Forget!~> Yeah, an old coworker was like here's a job and I needed a job and it was a pyramid scheme
[02:31:24] <FromDiscord> <codic> does https://github.com/treeform/ws support server side ssl?
[02:31:27] <fn> <12R2D299> 4GitHub: 7"Simple WebSocket library for nim."
[02:36:31] <FromDiscord> <mratsim> Yet another weekend lost fighting/setuping CI :/
[02:36:55] <FromDiscord> <ElegantBeef> Just use NI also known as Never Intergration üòÑ
[02:37:00] <FromDiscord> <vindaar> I was just looking at github and seeing your last pushes. Sorry to hear it üòêÔ∏è
[02:37:57] <FromDiscord> <codic> or is it nim integration
[02:39:13] <FromDiscord> <treeform> In reply to @demotomohiro "You might already know,": I have read this before, but still tanks for sending it!
[02:41:06] <FromDiscord> <treeform> In reply to @codic "does https://github.com/treeform/ws support server": No it does not. But is a bad idea. What I do is wrap it with nginx with letsencrypt, much better then supporting it internally.
[02:41:08] <fn> <12R2D299> 4GitHub: 7"Simple WebSocket library for nim."
[02:41:34] <FromDiscord> <garett> sent a code paste, see https://play.nim-lang.org/#ix=3rS3
[02:42:00] <FromDiscord> <treeform> In reply to @codic "does https://github.com/treeform/ws support server": You can also wrap it with cloudflare, even simpler.
[02:42:02] <fn> <12R2D299> 4GitHub: 7"Simple WebSocket library for nim."
[02:42:02] <FromDiscord> <codic> In reply to @treeform "No it does not.": oh that is a good idea
[02:42:46] <FromDiscord> <treeform> SSL is complex and I would just rather others handle it.
[02:43:21] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3rS4
[02:49:06] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[02:53:46] <FromDiscord> <PressF> Hey people.‚ÜµI'm thinking about going throw a book on Nim live after my exams are over. Any free book suggestion (something like rust's book or "learn Go with tests")
[03:16:55] <FromDiscord> <ElegantBeef> Book wise there isnt much out there, do have http://ssalewski.de/nimprogramming.html though.
[03:17:12] <FromDiscord> <ElegantBeef> Also "Nim in Action" but that isnt free
[03:29:30] <fn> <11ForumUpdaterBot99> New thread by Iortega: Cannot properly internationalize, see https://forum.nim-lang.org/t/8191
[03:33:21] <FromDiscord> <aleclarson> Can I take ownership of a ref, so I have to dealloc it manually or it leaks?
[03:33:53] <FromDiscord> <aleclarson> (edit) "Can I take ownership of a ref, so ... I`dealloc`" 03added "that" | "dealloc" => "`dealloc`"
[03:34:04] <FromDiscord> <aleclarson> (edit) "Can I take ownership of a ref, so that I have to `dealloc` it manually or ... it" 03added "else"
[03:34:13] <FromDiscord> <ElegantBeef> You mean of an already existent ref?
[03:34:17] <FromDiscord> <aleclarson> Right
[03:36:03] <FromDiscord> <ElegantBeef> If you can, I imagine it'd depend on the GC you're using so probably inadvisable
[03:36:08] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rSc
[03:37:21] <FromDiscord> <ElegantBeef> There is a `GC_unref` though
[03:37:37] <FromDiscord> <haxscramper> It evaluates argument as a tuple and just uses first or second field
[03:38:10] <FromDiscord> <ElegantBeef> Yea so you'd `GC_ref(yourRef)` then to dealloc it you'd `GC_unref(yourRef)`
[03:38:17] <FromDiscord> <ElegantBeef> Though i do wonder if that has any implications on arc
[03:38:52] <FromDiscord> <treeform> In reply to @codic "so I just set": Yeah, I have single entry for whole server, no need to do it per path
[03:45:35] <FromDiscord> <aleclarson> In reply to @ElegantBeef "Yea so you'd `GC_ref(yourRef)`": Oh interesting thx!
[03:48:30] <FromDiscord> <treeform> In reply to @codic "so I just set": https://seanthegeek.net/1035/how-to-configure-a-nginx-reverse-proxy-with-lets-encrypt-certificates/ this is the setup I used. Certbot and nginx.
[03:51:31] *** Quits: max22- (~maxime@2a01cb08833598002e27d7fffeabcac8.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:14:28] <FromDiscord> <‚Éü‚Éü> why is this not working?
[04:14:29] <FromDiscord> <‚Éü‚Éü> sent a code paste, see https://play.nim-lang.org/#ix=3rSh
[04:16:18] <FromDiscord> <exelotl> Nim's case insensitivity does not apply to the first character in an identifier
[04:17:02] <FromDiscord> <‚Éü‚Éü> i see
[04:17:25] <FromDiscord> <exelotl> this is useful to prevent variables and types from clashing‚Üµe.g. `var foo: Foo` is allowed
[04:17:43] <FromDiscord> <‚Éü‚Éü> this feature does not support greek letters?
[04:18:11] <FromDiscord> <exelotl> hmm I imagine not
[04:18:23] <FromDiscord> <‚Éü‚Éü> why
[04:19:00] <FromDiscord> <exelotl> I would assume it only works for ASCII but I've never tried it
[04:21:03] <FromDiscord> <‚Éü‚Éü> it seems you are correct from my test
[04:21:11] <FromDiscord> <‚Éü‚Éü> now the question is why does it not support greek
[04:25:19] <FromDiscord> <ElegantBeef> Cause unicode is complex
[04:25:55] <FromDiscord> <ElegantBeef> Ascii is simple to lowercase unicode is complicated to do
[04:26:26] <FromDiscord> <‚Éü‚Éü> if the reason is it would be too complex to implement i would not have had it work for just latin characters
[04:26:38] <FromDiscord> <ElegantBeef> Well ascii is what most people use
[04:27:16] <FromDiscord> <exelotl> the main purpose of the feature is to allow you to use whatever style you want in your own project, even if the libraries you depend on are using a different style
[04:27:31] <FromDiscord> <‚Éü‚Éü> what about non english speakers
[04:28:31] <FromDiscord> <exelotl> it's very unlikely that a library would be exporting an API with non ascii glyphs in it's public API
[04:28:33] <FromDiscord> <ElegantBeef> Well then you dont benefit from it anyway
[04:28:53] <FromDiscord> <exelotl> (edit) "an API" => "identifiers"
[04:29:26] <FromDiscord> <ElegantBeef> How much code is written in a language with unicode characters as the exported symbols?
[04:30:07] <FromDiscord> <‚Éü‚Éü> i mean that depends
[04:30:09] <FromDiscord> <ElegantBeef> Not to say it's not possible since `unicode` does have `toLower`
[04:30:23] <FromDiscord> <ElegantBeef> So it could always be possible
[04:30:26] <FromDiscord> <‚Éü‚Éü> i would probably use œÄ in certain libraries
[04:30:40] <FromDiscord> <codic> no, just use `pi`
[04:30:55] <FromDiscord> <‚Éü‚Éü> i would have pi and œÄ
[04:30:59] <FromDiscord> <codic> so that a non greek keyboard can easily type it
[04:31:15] <FromDiscord> <‚Éü‚Éü> actually in that case i guess it wouldnt matter since the first character is excluded
[04:31:19] <FromDiscord> <ElegantBeef> But that's a single character so doesnt benefit from style insenstivity
[04:31:21] <FromDiscord> <ElegantBeef> Yep
[04:31:29] <FromDiscord> <codic> would you want the symbols `Œ†` `œÄ` `œñ` to be equivalent
[04:31:38] <FromDiscord> <codic> assuming they werent used as the first character
[04:31:52] <FromDiscord> <ElegantBeef> It's more about style insensitivity between libraries and your code
[04:31:59] <FromDiscord> <ElegantBeef> So if you want to usue snake case with the stdlib for instance
[04:32:05] <FromDiscord> <‚Éü‚Éü> i would not, but i would not want `p` and `P` to be treated the same either
[04:32:35] <FromDiscord> <ElegantBeef> Well then do `--styleCHeck:error`
[04:32:38] <FromDiscord> <ElegantBeef> (edit) "`--styleCHeck:error`" => "`--styleCheck:error`"
[04:32:55] <FromDiscord> <ElegantBeef> Style insensitivity is lovely to have, but to each their own
[04:33:07] <FromDiscord> <‚Éü‚Éü> but also you said "symbols" but for some they are letters used in their language
[04:33:33] <FromDiscord> <ElegantBeef> Letters are symbols
[04:34:14] <FromDiscord> <‚Éü‚Éü> but not all symbols are letters
[04:34:25] <FromDiscord> <‚Éü‚Éü> for example `>`
[04:34:43] <FromDiscord> <ElegantBeef> Ok i'm loosing the point of this conversation now
[04:35:10] <FromDiscord> <‚Éü‚Éü> the point is i find it not consistent that it only supports latin letters
[04:35:17] <FromDiscord> <ElegantBeef> Well congrats it's not
[04:36:03] <FromDiscord> <ElegantBeef> making an RFC is probably the best you can do in this case
[04:36:26] <FromDiscord> <codic> i think the current style using latin letters is fine
[04:36:51] <FromDiscord> <codic> i have not seen any code (except something trying to be obfuscated) where names are not written in the latin script
[04:37:04] <FromDiscord> <ElegantBeef> Well there is some merit using unicode in math libraries
[04:37:23] <FromDiscord> <ElegantBeef> But i generally dislike unicode since i'm not overly competent of inputing it
[04:37:59] <FromDiscord> <‚Éü‚Éü> one use case is in math so you can copy a formula more closely to how it is usually written
[04:38:17] <FromDiscord> <‚Éü‚Éü> and that is for programmers who are english speakers
[04:38:38] <FromDiscord> <‚Éü‚Éü> if you speak greek for example you might use greek for names
[04:39:33] <FromDiscord> <ElegantBeef> Fun unicode conversation can be found here https://github.com/nim-lang/RFCs/issues/388
[04:40:55] <FromDiscord> <codic> i can already imagine it
[04:41:00] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3rSl
[04:41:20] <FromDiscord> <codic> ellenika demokratia arithmos!
[04:42:28] <FromDiscord> <‚Éü‚Éü> wait does it allow me to define custom operators?
[04:42:47] <FromDiscord> <ElegantBeef> Not presently using unicode
[04:42:54] <FromDiscord> <ElegantBeef> That's what that RFC is addressing
[04:43:15] <FromDiscord> <ElegantBeef> unicode is just taken as the string presently since it's not in 0..255
[04:44:02] <FromDiscord> <ElegantBeef> I've seen clyybber start writting like 3 messages now just to dismiss me ;P
[04:45:36] <FromDiscord> <‚Éü‚Éü> why does it have that restriction
[04:46:25] <FromDiscord> <clyybber> In reply to @ElegantBeef "I've seen clyybber start": haha I was just using the textbox to find out what funky unicode chars make up @‚Éü‚Éü 's name :D
[04:46:37] <FromDiscord> <ElegantBeef> Cause operators presently can only be made with a specific set of characters
[04:47:02] <FromDiscord> <clyybber> theres an RFC for unicode operators
[04:47:07] <FromDiscord> <clyybber> oh
[04:47:07] <FromDiscord> <ElegantBeef> I linked it!
[04:47:10] <FromDiscord> <clyybber> Haha
[04:47:42] <FromDiscord> <‚Éü‚Éü> wait does the previous rule apply to operators too
[04:47:50] <FromDiscord> <‚Éü‚Éü> `and = aNd`?
[04:47:58] <FromDiscord> <ElegantBeef> yes
[04:48:11] <FromDiscord> <ElegantBeef> It applies to all identifiers
[04:51:06] <FromDiscord> <‚Éü‚Éü> could i overload an operator so that it could work like `30 operator`
[04:51:43] <FromDiscord> <ElegantBeef> postfix is generally no
[04:52:12] <FromDiscord> <ElegantBeef> The only postfix operator i can think of is the export marker
[04:53:27] <FromDiscord> <‚Éü‚Éü> also
[04:53:38] <FromDiscord> <‚Éü‚Éü> since it dosent use `{}` for blocks
[04:54:08] <FromDiscord> <ElegantBeef> Have you just read a "Nim in X seconds" and decided to give insight on features you've never used? üòÑ
[04:54:59] <FromDiscord> <‚Éü‚Éü> couldn't it have used `[]` for function call, `{}` for lists, and `()` for equations
[04:55:19] <FromDiscord> <codic> whatd you use for generics
[04:55:19] <FromDiscord> <ElegantBeef> `{}` is for sets/table constructors
[04:55:46] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3rSo
[04:55:51] <FromDiscord> <‚Éü‚Éü> maybe `{}`
[04:55:52] <FromDiscord> <ElegantBeef> and `()` works for equations
[04:56:03] <FromDiscord> <codic> `proc x{T}(arg: T)`
[04:56:06] <FromDiscord> <codic> meh, dont like it
[04:56:08] <FromDiscord> <codic> rather have <>
[04:56:11] <FromDiscord> <codic> but [] is superior
[04:56:15] <FromDiscord> <‚Éü‚Éü> wait i forgot
[04:56:20] <FromDiscord> <ElegantBeef> Well we presently have `{}` which mirrors mathematical set construction
[04:56:38] <FromDiscord> <‚Éü‚Éü> there is also `<>` but i would probably not use it since it is also used for comparison
[04:56:51] <FromDiscord> <ElegantBeef> I mean it theoretically could use anything, but it doesnt
[04:56:56] <FromDiscord> <‚Éü‚Éü> `proc f{T}[a T]`
[04:57:10] <FromDiscord> <‚Éü‚Éü> `f{int}[5]`
[04:57:14] <FromDiscord> <codic> no thank you
[04:57:20] <FromDiscord> <‚Éü‚Éü> it looks kind of bad
[04:57:33] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3rSp
[04:57:55] <FromDiscord> <codic> (edit) "https://play.nim-lang.org/#ix=3rSp" => "https://play.nim-lang.org/#ix=3rSq"
[04:57:58] <FromDiscord> <ElegantBeef> Go does it right with `proc(T)(args)` no confusion whatsoever it's so clear that Go language design is i nthe trash!
[04:58:02] <FromDiscord> <codic> (edit) "https://play.nim-lang.org/#ix=3rSq" => "https://play.nim-lang.org/#ix=3rSp"
[04:58:04] <FromDiscord> <ElegantBeef> (edit) "i nthe" => "in the"
[04:58:14] <FromDiscord> <codic> lmao
[04:58:17] <FromDiscord> <codic> no generics lol
[04:58:22] <FromDiscord> <ElegantBeef> They have generics soon
[04:58:25] <FromDiscord> <codic> ‚Ñ¢Ô∏è
[04:58:25] <FromDiscord> <ElegantBeef> That's the RFC for it
[04:58:32] <FromDiscord> <ElegantBeef> Or w/e their process is
[04:58:33] <FromDiscord> <codic> they dont have proc they have func
[04:58:34] <FromDiscord> <codic> ü§î
[04:58:46] <FromDiscord> <ElegantBeef> proc is in place of the functionname dingo
[04:58:48] <FromDiscord> <codic> generics are set to ship in 2022
[04:59:02] <FromDiscord> <codic> zig has it right, no generics, but every type has the type `type`
[04:59:06] <FromDiscord> <ElegantBeef> lol
[04:59:09] <FromDiscord> <codic> therefore you can write
[04:59:20] <FromDiscord> <codic> `fn genericFunction(comptime T: type, x: T)`
[04:59:37] <FromDiscord> <codic> c++ does it right because everyone loves writing c++
[04:59:45] <FromDiscord> <ElegantBeef> I feel like > is just suggesting things based off reading the description of features still, not realizing nim is presently 1.0'd and these suggestions would go right into the shredder
[04:59:52] <FromDiscord> <‚Éü‚Éü> i like that idea
[05:00:00] <FromDiscord> <‚Éü‚Éü> it means a new syntax is not needed
[05:00:05] <FromDiscord> <ElegantBeef> Well it works in nim
[05:00:06] <FromDiscord> <ElegantBeef> So be happy
[05:00:10] <FromDiscord> <codic> it does/
[05:00:11] <FromDiscord> <codic> (edit) "does/" => "does?"
[05:00:13] <FromDiscord> <codic> very interesting
[05:00:14] <FromDiscord> <ElegantBeef> yes
[05:00:19] <FromDiscord> <codic> how do you acept a parameter of type type
[05:00:24] <FromDiscord> <ElegantBeef> `proc name(yourType: typedesc, args)`
[05:00:29] <FromDiscord> <ElegantBeef> (edit) "args)`" => "args: yourType)`"
[05:00:30] <FromDiscord> <codic> ü§î
[05:00:31] <FromDiscord> <codic> nice
[05:00:34] <FromDiscord> <codic> not as nice as
[05:01:13] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3rSr
[05:01:14] <FromDiscord> <codic> as some silly style guides want you to write
[05:01:21] <FromDiscord> <codic> embrace the whitespace
[05:01:21] <FromDiscord> <ElegantBeef> Ah the sarcasm is in full force today
[05:01:44] <FromDiscord> <codic> lol
[05:01:50] <FromDiscord> <codic> ive seen real code that looks like that
[05:02:10] <FromDiscord> <ElegantBeef> Ah you mean shit, yea that's just how C++ looks üòõ
[05:03:01] <FromDiscord> <‚Éü‚Éü> can all forms of automatic resource management be disabled and be made compile errors?
[05:03:09] <FromDiscord> <‚Éü‚Éü> is there a flag for it?
[05:03:11] <FromDiscord> <codic> --gc:none
[05:03:15] <FromDiscord> <codic> plus
[05:03:21] <FromDiscord> <codic> --warningAsError:on
[05:03:35] <FromDiscord> <ElegantBeef> Now any use of gc memory will stop compilation
[05:03:43] <FromDiscord> <ElegantBeef> Though still uncertain why you'd really want that
[05:03:46] <FromDiscord> <codic> or you can do --warningAsError[thespecifcerroriforgetthename]:on
[05:05:07] <FromDiscord> <‚Éü‚Éü> if i do this will it make most of the standard library not work?
[05:05:13] <FromDiscord> <ElegantBeef> Yes
[05:06:23] <FromDiscord> <ElegantBeef> Anything that deals with `seq` or `string` will stop working
[05:06:28] <FromDiscord> <‚Éü‚Éü> in c++ certain things support using custom memory allocation, does this language not do this?
[05:06:41] <FromDiscord> <ElegantBeef> You can change the global allocator or allocate on your own
[05:07:28] <FromDiscord> <‚Éü‚Éü> if i did that would the standard library work but i just have to manually free?
[05:08:09] <FromDiscord> <ElegantBeef> Well with a different global allocator it'd just free as normal, but with manual allocations it's like using `malloc`, you're the memory management
[05:08:22] <FromDiscord> <aleclarson> Is there a special term for `{ "foo": bar }` data structure?
[05:08:29] <FromDiscord> <codic> set
[05:08:30] <FromDiscord> <ElegantBeef> table constructor
[05:08:37] <FromDiscord> <codic> oh
[05:08:38] <FromDiscord> <ElegantBeef> set is `{a, b}`
[05:09:06] <FromDiscord> <aleclarson> It evaluates to an array of tuples
[05:09:41] <FromDiscord> <aleclarson> Don't tables need `toTable`?
[05:09:49] <FromDiscord> <ElegantBeef> Well it's called a table constructor internally
[05:09:58] <FromDiscord> <ElegantBeef>  https://media.discordapp.net/attachments/371759389889003532/861043624795045898/unknown.png
[05:10:20] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/macros.html#the-ast-in-nim if you want to read about the entire AST
[05:10:36] <FromDiscord> <fleud> can you use strformat to round a float64?
[05:11:52] <FromDiscord> <‚Éü‚Éü> round to what
[05:12:01] <FromDiscord> <ElegantBeef> !eval import std/strformat;echo fmt"{3.14156: .3}"
[05:12:06] <NimBot>  3.14
[05:12:26] <FromDiscord> <ElegantBeef> If you mean round to specific decimal
[05:12:47] <FromDiscord> <ElegantBeef> if you mean round to nearest just
[05:12:58] <FromDiscord> <ElegantBeef> !eval import std/strformat;echo 3.14156.round.int
[05:13:01] <NimBot> Compile failed: /usercode/in.nim(1, 34) Error: undeclared field: 'round' for type system.float64 [declared in /playground/nim/lib/system.nim(28, 3)] 
[05:13:10] <FromDiscord> <ElegantBeef> it's in math isnt it
[05:13:10] <FromDiscord> <‚Éü‚Éü> !eval echo hi
[05:13:13] <NimBot> Compile failed: /usercode/in.nim(1, 6) Error: undeclared identifier: 'hi'
[05:13:21] <FromDiscord> <‚Éü‚Éü> !eval echo "hi"
[05:13:25] <NimBot> hi
[05:13:46] <FromDiscord> <‚Éü‚Éü> !eval echo ("a"  2)
[05:13:49] <NimBot> Compile failed: /usercode/in.nim(1, 11) Error: invalid token:  (\29)
[05:14:17] <FromDiscord> <ElegantBeef> !eval echo ('a'.ord  2)
[05:14:20] <FromDiscord> <ElegantBeef> But quit spamming it üòÑ
[05:14:20] <NimBot> Compile failed: /usercode/in.nim(1, 15) Error: invalid token:  (\29)
[05:14:49] <FromDiscord> <ElegantBeef> Ah this bastard using unicode
[05:15:18] <FromDiscord> <‚Éü‚Éü> its not
[05:15:39] <FromDiscord> <ElegantBeef> Odd
[05:15:45] <FromDiscord> <fleud> this is the line im using, i just need answer rounded to the 10th decimal place. sorry im kinda new lol‚Üµ`return &"[{n}, {answer}]"`
[05:16:07] <FromDiscord> <ElegantBeef> yea so it's `{yourfloat: .1}`
[05:16:14] <FromDiscord> <ElegantBeef> `.number` is how many decimals
[05:16:33] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/strformat.html#formatting-floats
[05:16:43] <FromDiscord> <fleud> yea i saw it in there im just bad at interpreting it lol
[05:16:58] <FromDiscord> <‚Éü‚Éü> but do you want it as a float or string?
[05:17:03] <FromDiscord> <fleud> string
[05:17:10] <FromDiscord> <fleud> is there a way to remove this space thing https://media.discordapp.net/attachments/371759389889003532/861045432087478272/unknown.png
[05:17:10] <FromDiscord> <‚Éü‚Éü> how would you round a float im curious
[05:17:12] <FromDiscord> <ElegantBeef> Well they're string formatting
[05:17:38] <FromDiscord> <ElegantBeef> By not putting it in your strformat
[05:17:51] <FromDiscord> <fleud> trueeeee
[05:17:53] <FromDiscord> <fleud> lmfao
[05:18:13] <FromDiscord> <ElegantBeef> Well the easiest is `round(yourFloat / nearest)  nearest`
[05:18:25] <FromDiscord> <ElegantBeef> but floats are fickle so that will not work exactly
[05:19:51] <FromDiscord> <ElegantBeef> But assuming you dont need exact decimals, it's fine
[05:19:51] <FromDiscord> <fleud> apparently they dont always want it round this far if it ends in a 0 https://media.discordapp.net/attachments/371759389889003532/861046113141391400/unknown.png
[05:20:31] <FromDiscord> <‚Éü‚Éü> can your application be changed to use fractions?
[05:20:36] <FromDiscord> <fleud> no
[05:21:31] <FromDiscord> <fleud> its just a codewars question lol i have the answer right they just want it in this format
[05:23:01] <FromDiscord> <ElegantBeef> Can also use https://nim-lang.org/docs/strutils.html#formatEng%2CBiggestFloat%2Crange%5B%5D%2Cbool%2Cbool%2Cstring%2Cchar
[05:23:17] <FromDiscord> <‚Éü‚Éü> can i make a packed struct
[05:23:19] <FromDiscord> <ElegantBeef> But wrong one üòÑ
[05:23:28] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/manual.html#foreign-function-interface-packed-pragma
[05:23:29] <FromDiscord> <ElegantBeef> Yes
[05:23:39] <FromDiscord> <‚Éü‚Éü> would it then be safe to used simd operations on it?
[05:23:56] <FromDiscord> <ElegantBeef> Here's the proper one https://nim-lang.org/docs/strutils.html#formatFloat%2Cfloat%2CFloatFormatMode%2Crange%5B%5D%2Cchar
[05:24:11] <FromDiscord> <ElegantBeef> No clue, there are nim libraries that use simd
[05:25:32] <FromDiscord> <dan> @ElegantBeef You deserve a raise ... really workin overtime here
[05:25:59] <FromDiscord> <‚Éü‚Éü> two more questions
[05:26:31] <FromDiscord> <fleud> formatEng worked thank you üòÑ
[05:26:33] <FromDiscord> <ElegantBeef> In reply to @dan "<@!145405730571288577> You deserve a": Well i'll throw down a hat and people can throw pennies in
[05:26:35] <FromDiscord> <‚Éü‚Éü> can i use `{}` for blocks, and can i use C libraries automatically without having to re define every function
[05:26:44] <FromDiscord> <ElegantBeef> No you cannot use `{}`
[05:27:06] <FromDiscord> <ElegantBeef> You also cannot use C libraries automatically, you need bindings, but nimterop and c2nim exist to make it easier
[05:27:26] <FromDiscord> <ElegantBeef> In reply to @ElegantBeef "Well i'll throw down": Though i'm Canadian and we dont have pennies so hey say amount!
[05:27:51] <FromDiscord> <ElegantBeef> (edit) "say" => "same"
[05:29:48] <FromDiscord> <ElegantBeef> You can use `()` for blocks though, but it's fugly
[05:34:28] *** Joins: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[05:34:42] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 252 seconds)
[06:02:07] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:15:47] <fn> <11ForumUpdaterBot99> New thread by Stu002: Compiler error: "... is T too nested for type matching", see https://forum.nim-lang.org/t/8192
[06:16:25] <FromDiscord> <stu002> Can someone advise on this compiler error `... is T too nested for type matching`  https://forum.nim-lang.org/t/8192#52694
[06:16:45] <FromDiscord> <stu002> Can I change the limit for "too nested"?
[06:16:53] <FromDiscord> <ElegantBeef> Can we get the full concepts?
[06:18:30] <FromDiscord> <stu002> Very similar to https://github.com/andreaferretti/emmy/blob/master/emmy/structures.nim but will collate them into one file and put up a gist (they're across seven different files ATM
[06:18:35] <FromDiscord> <ElegantBeef> Cause in the example you dont need `B or C`
[06:18:45] <FromDiscord> <ElegantBeef> Since they're jus aliases of `A`
[06:18:48] <FromDiscord> <ElegantBeef> (edit) "jus" => "just"
[06:19:00] <FromDiscord> <stu002> B and C have B and C specific functions
[06:21:52] <FromDiscord> <ElegantBeef> The alternative is to compose your concepts like this https://play.nim-lang.org/#ix=3rSE
[06:24:37] <FromDiscord> <stu002> In reply to @ElegantBeef "The alternative is to": That's interesting thanks. I guess my Field concept would be like `Field is AddMagma and MulMagma and AddSemigroup and MulSemigroup and AddMonoid and MulMonoid and AddGroup and Mulgroup...` for a 14 element type definition.
[06:25:16] <FromDiscord> <stu002> Or I could build up each with a type definition at each level for 7 types I think.
[06:28:05] <FromDiscord> <ElegantBeef> Well couldnt you make `Semigroup` which is `MulSemigroup and AddSemigroup` and basically break these into easily composable concepts?
[06:28:10] <FromDiscord> <stu002> Interestingly if I combine all modules in one file https://play.nim-lang.org/#ix=3rSI the error goes away
[06:28:52] <FromDiscord> <ElegantBeef> Odd, havent used concepts enough to give any reason to why
[06:29:19] <FromDiscord> <stu002> In reply to @ElegantBeef "Well couldnt you make": Yes -- but with parallel hierarchies of types for additive, multiplicative, abstract etc
[06:29:36] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3rSJ
[06:29:50] <FromDiscord> <stu002> Can I change the magic number 7?
[06:30:13] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3rSK
[06:30:26] <FromDiscord> <stu002> In reply to @ElegantBeef "Like these are just": Yes -- these will have semigroup specific axioms that take (x, y, z: Semigroup) parameters
[06:30:32] <FromDiscord> <ElegantBeef> ah ok
[06:30:34] <FromDiscord> <stu002> But I haven't written them yet
[06:31:11] <FromDiscord> <stu002> Not sure why the error goes away for all-in-one-file code
[06:31:31] <FromDiscord> <ElegantBeef> No clue, either maybe check nim's issues or hope someone with a brain can help you üòõ
[07:12:52] <FromDiscord> <Bung> @treeform can I simply detete a deep json key  use `jsony`?
[07:16:48] <FromDiscord> <stu002> In reply to @ElegantBeef "No clue, either maybe": Your brain looks very useful from here üëç
[07:17:38] <FromDiscord> <ElegantBeef> In reply to @stu002 "Your brain looks very": Ah your optometrist called time for your annual checkup üòõ
[07:30:38] <FromDiscord> <Varriount> Zevv: Out of curiosity, why does NPeg require using an asterisk to join identifiers? Wouldn't command syntax have allowed doing without them?
[07:34:15] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @narimiran  - just started looking at the BigInt codebase - I think I'll add   support for bitwise operators myself as this seems fairly trivial? Is there anything I'm missing?
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:55:52] *** Joins: xet7 (~xet7@user/xet7)
[09:26:31] <FromDiscord> <treeform> In reply to @Bung "<@!107140179025735680> can I simply": I don't understand, jsony ignores keys that are not part of num objects.
[09:29:49] <FromDiscord> <Bung> nvm, I thought omit one deep field if the key exists from json obj or json string, not needed anymore.
[10:35:27] <FromDiscord> <Bung> It seems I can't get ref object from dll proc returns
[10:45:07] <FromDiscord> <saem> Is the syntax highlighting for nim as part of github derived from this repo?
[10:45:08] <FromDiscord> <saem> https://github.com/nim-lang/NimLime
[10:45:11] <fn> <12R2D299> 4GitHub: 7"Super Nim Plugin for Sublime Text 2/3"
[10:47:34] *** Quits: kots (~kots@li1473-207.members.linode.com) (Quit: leaving)
[10:48:29] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[10:49:03] <FromDiscord> <Bung> std module? no
[10:49:48] *** Joins: kots (~kots@li1473-207.members.linode.com)
[10:50:19] <FromDiscord> <Bung> NimLime is plugin for sublime, it use tmLanguage file
[10:51:25] <FromDiscord> <Bung> oh, wait ,you mean github site use?
[10:51:29] <FromDiscord> <saem> I realize what it is. IIRC github's syntax highlighting used to derive from that.
[10:51:32] <FromDiscord> <saem> Yes
[10:52:17] <FromDiscord> <saem> found it\: https://github.com/github/linguist/tree/master/vendor/grammars
[10:52:28] <FromDiscord> <Bung> that can be improve I think, pragmaigic's tmLanguage seems fine.
[10:53:00] <FromDiscord> <saem> yeah, not really
[10:53:14] <FromDiscord> <saem> It's old, doesn't support recent features like user defined literals.
[10:53:52] <FromDiscord> <Bung> better than github current looking
[10:54:07] <FromDiscord> <saem> how so?
[10:54:16] <FromDiscord> <Bung> that's smart , github use all sublime plugin.
[10:55:28] <FromDiscord> <saem> OK, so you don't have any reason for why it looks better than github.... or?
[10:56:25] <FromDiscord> <Bung> I use that tmlanguage for my vscode plugin, looking is better
[10:57:14] <FromDiscord> <saem> so, which one do you use?
[10:57:30] <FromDiscord> <saem> nimlime's or pragmagics?
[10:58:21] <FromDiscord> <Bung> pragmagics
[11:00:24] <FromDiscord> <Bung> if you want alternative to std highlite module , check https://github.com/bung87/rehighlite
[11:00:27] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[11:21:15] *** Quits: aeverr (~deodex@ai126162220090.56.access-internet.ne.jp) (Ping timeout: 258 seconds)
[11:31:30] <FromDiscord> <zevv> Varriount#0883\: npeg grammar is Nim AST, so it is limited by what Nim can parse
[11:32:12] *** Joins: max22- (~maxime@2a01cb08833598004e9b9f8416fa5d25.ipv6.abo.wanadoo.fr)
[11:39:33] *** Quits: max22- (~maxime@2a01cb08833598004e9b9f8416fa5d25.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[11:48:14] *** Quits: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Remote host closed the connection)
[11:48:36] *** Joins: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[12:11:52] *** Joins: max22- (~maxime@2a01cb08833598004858ae90d3b1d62e.ipv6.abo.wanadoo.fr)
[12:31:39] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:38:42] <FromDiscord> <Quantumly> Is it possible to specify the proc name in the compilation result?
[12:40:19] <FromDiscord> <Rika> What do you mean?
[12:40:26] <FromDiscord> <Rika> Compilation result as in the binary?
[13:02:48] *** Parts: pgimeno (~pgimeno@user/pgimeno) (This is the default part message)
[13:06:20] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[13:12:58] <fn> <11ForumUpdaterBot99> New thread by Mantielero: Fixing dependencies, see https://forum.nim-lang.org/t/8193
[13:16:15] <FromDiscord> <vindaar> who of you broke nimble? üòõ I can't install any of my packages anymore
[13:16:39] <FromDiscord> <vindaar> and `nimble list` only shows 311 packages
[13:18:45] <FromDiscord> <ElegantBeef> You did it
[13:19:09] <FromDiscord> <vindaar> then tell me how so I can fix it üòâ
[13:19:24] <FromDiscord> <ElegantBeef> Very carefully
[13:20:09] <FromDiscord> <vindaar> niiiice
[13:20:23] <FromDiscord> <vindaar> and btw we allow packages in nimble with the license "proprietary"?
[13:20:55] <FromDiscord> <vindaar> https://github.com/nim-lang/packages/pull/1954
[13:22:49] *** Quits: max22- (~maxime@2a01cb08833598004858ae90d3b1d62e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:25:19] *** Joins: max22- (~maxime@2a01cb0883359800dd2a05e2f0b5bba5.ipv6.abo.wanadoo.fr)
[13:26:07] <FromDiscord> <haxscramper> https://github.com/al6x/pl0t/blob/main/license#L9
[13:26:20] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rTS
[13:27:10] <FromDiscord> <vindaar> lovely. so why do I need to be able to `nimble install` that?
[13:28:04] <FromDiscord> <haxscramper> No idea. And I don't quite understand what this package does anyway
[13:30:34] <FromDiscord> <ElegantBeef> Oh yay i get to insult his software even more!
[13:33:28] <FromDiscord> <ElegantBeef> Based off his forum posts is a plotting library to replicate TS code
[13:34:11] <FromDiscord> <haxscramper> which post?
[13:34:37] <FromDiscord> <vindaar> https://forum.nim-lang.org/t/8169
[13:34:39] <FromDiscord> <ElegantBeef> This joyous one https://forum.nim-lang.org/t/8169
[13:35:02] <FromDiscord> <ElegantBeef> doesnt want to talk about his code anymore to prevent actually insulting him
[13:35:29] <FromDiscord> <vindaar> yeah, I didn't comment any further for good reasons
[13:35:39] <FromDiscord> <ElegantBeef> cheers
[13:36:29] <FromDiscord> <haxscramper> nice, we have another 83-line module https://github.com/nim-lang/Nim/blob/devel/lib/std/genasts.nim#L3
[13:36:45] <FromDiscord> <haxscramper> that could perfectly well be placed in macros or whatever
[13:37:48] <FromDiscord> <saem> Yeah....
[13:38:12] <FromDiscord> <ElegantBeef> Excuse me whilst i cross my fingers and hope no one mentions setutils
[13:38:56] <FromDiscord> <haxscramper> `std/enumerate`
[13:39:18] <FromDiscord> <haxscramper> maybe we could clean this up in 2.0
[13:39:43] <FromDiscord> <vindaar> yes please
[13:41:48] <FromDiscord> <Rika> Y‚Äôall so rude sometimes I swear
[13:42:17] <FromDiscord> <saem> For the new stuff at least raising the bar on docs and tests would be nice. The docs for genasts are insufficient and the tests are really really hard to follow.
[13:42:41] <FromDiscord> <ElegantBeef> Do think we should have a module RFC process for new modules to make them larger at the start instead of a gradual growth
[13:42:56] <FromDiscord> <ElegantBeef> Like setutils started off cause i though `toSet` was needed üòÑ
[13:43:08] <FromDiscord> <ElegantBeef> (edit) "though" => "thought"
[13:43:11] <FromDiscord> <haxscramper> I think every new module should be mentioned in RFC somewhere
[13:43:20] <FromDiscord> <haxscramper> or at least have some tracking issue
[13:43:34] <FromDiscord> <haxscramper> because I constantly find new random one-two proc modules that pop up at random
[13:43:53] <FromDiscord> <haxscramper> "oh, now devel has <random module> that does add <literally one proc>"
[13:44:05] <FromDiscord> <dom96> Until this makes it into a release we can still fix it. So let‚Äôs do so
[13:44:29] <FromDiscord> <haxscramper> yes, but the argument was "it would break someone's `enumerate` implementation"
[13:44:41] <FromDiscord> <haxscramper> though genast could be moved to macros for sure
[13:45:06] <FromDiscord> <saem> Would be nice to have some API design guidelines. Things like naming conventions and the usual bits, but also how to make APIs so they're less likely to require breaking changes.
[13:46:20] <FromDiscord> <ElegantBeef> Yea, also using an RFC would make them less barren hopefully due to having more people to provide "What should it contain"
[13:47:09] <FromDiscord> <vindaar> @dom96 since you're around could you check if `nimble` is kinda broken for you locally as well? after pulling the latest packages.json, the file only has \~4200 lines with \~310 packages
[13:47:11] <FromDiscord> <haxscramper> then we get into fusion situation where people start pulling it apart
[13:47:17] <FromDiscord> <haxscramper> because "too much stuff in stdlib"
[13:47:30] <FromDiscord> <saem> The docs could just be the RFC. \:D
[13:47:32] <FromDiscord> <haxscramper> just add this one convenience proc,
[13:47:36] <FromDiscord> <saem> And tests
[13:47:44] <FromDiscord> <haxscramper> or whatever you need
[13:47:57] <FromDiscord> <dom96> In reply to @vindaar "<@132595483838251008> since you're around": On mobile. So no. But can check later once I get out of bed üôÇ
[13:47:59] <FromDiscord> <haxscramper> we have this "stdlib evolution" RFCs and then crap creeps into anyway
[13:48:04] <FromDiscord> <haxscramper> (edit) "we have this "stdlib evolution" RFCs and then crap creeps into ... anyway" 03added "stdlib"
[13:48:08] <FromDiscord> <haxscramper> just in small pieces
[13:48:15] <FromDiscord> <vindaar> thanks!‚Üµ(@dom96)
[13:51:07] <FromDiscord> <haxscramper> https://github.com/nim-lang/RFCs/issues/398 nimble RFC published
[13:51:24] <FromDiscord> <saem> I haven't looked at the data, but if memory serves those paper cuts have only a few culprits.
[13:51:35] <FromDiscord> <haxscramper> Still not sure whether that's exactly how I want to present some of the ideas
[13:51:46] <FromDiscord> <haxscramper> but I don't think I would do much better anywa
[13:52:24] <FromDiscord> <haxscramper> there is a tl;dr recap at the end
[13:53:18] <FromDiscord> <vindaar> thanks for putting in the time for that!
[13:54:14] <FromDiscord> <ElegantBeef> Seems good to me so far üòÑ
[13:54:18] *** Joins: Schnouki (~schnouki@user/schnouki)
[13:54:41] <FromDiscord> <haxscramper> yeah, I think we are not in the situation where breaking changes would be accepted
[13:54:51] <FromDiscord> <haxscramper> so kept everything to bare minimum
[13:55:02] <FromDiscord> <haxscramper> though leorize would probably disagree on that
[13:55:45] <FromDiscord> <vindaar> I think breaking changes should at least be discussed in terms of what value they may provide
[13:55:56] <FromDiscord> <vindaar> but I understand you kept it simple for now
[13:56:19] <FromDiscord> <haxscramper> true, but breaking package management system is probably bad idea all around
[13:56:24] <FromDiscord> <haxscramper> also
[13:56:37] <FromDiscord> <haxscramper> if we keep PM and compiler largely separate we can experiment
[13:57:18] <FromDiscord> <dom96> I am curious what you‚Äôd break if you could
[13:57:20] <FromDiscord> <haxscramper> RFC puts some focus on that - formalize communication between PM and compiler so others can plug in their stuff if they want
[13:58:18] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[14:00:18] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 240 seconds)
[14:00:24] <FromDiscord> <ElegantBeef> hax your one line diff doesnt have a url üòÑ
[14:01:17] <FromDiscord> <haxscramper> I've removed large portion of the diff because in cargo it is quite long
[14:01:47] <FromDiscord> <haxscramper> actually cargo does not use url
[14:01:59] <FromDiscord> <ElegantBeef> Then how does it know where to go?
[14:02:55] <FromDiscord> <haxscramper> they store all packages as well
[14:03:01] <FromDiscord> <haxscramper> I will fix that
[14:03:45] <FromDiscord> <ElegantBeef> Changing things to accommodate my small brain, noice üòõ
[14:07:27] *** Joins: aeverr (~deodex@ai126250185187.11.tss.access-internet.ne.jp)
[14:09:04] <FromDiscord> <haxscramper> `> Total commit count 203328`
[14:09:54] *** Quits: max22- (~maxime@2a01cb0883359800dd2a05e2f0b5bba5.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:11:35] <FromDiscord> <ElegantBeef> Is that how many edits i've done for fixing typos?
[14:31:06] <FromDiscord> <saem> If I was up for breaking nimble, I would completely redo the file format. It should focus on the artifacts and everything else should follow from that. Their common, shared, and unique dependencies. Key and relevant tasks, and their dependencies. Where to get things and how. But it needs to focus on the goal. Right now they're declared poorly in one place and all relationship information is lost.
[14:31:42] <FromDiscord> <haxscramper> Ôªøsaem\:  by artifacts you mean specifically library/binary build results?
[14:31:48] <FromDiscord> <saem> Yes
[14:32:09] <FromDiscord> <haxscramper> Also, I don't quite understand the "dependencies are common to all artifacts of which there can be many, you mention intra task dependencies but I might have missed it for artifacts" part - I haven't mentioned build artifacts anywhere, but
[14:32:32] <FromDiscord> <haxscramper> but mainly because I don't really deal with them. If you can expand your comment with suggestion it would be nice
[14:33:02] <FromDiscord> <haxscramper> like what is the current problem, and how you propose to solve it
[14:33:25] <fn> <11ForumUpdaterBot99> New thread by Mratsim: Announcing Arraymancer v0.7.0 "Memories of Ice", see https://forum.nim-lang.org/t/8194
[14:34:58] <FromDiscord> <saem> I'll see about writing it up tomorrow
[14:36:23] <FromDiscord> <saem> Simple version, it should be a hierarchy, Foo the artifact should list its dependencies, and Bar its own. They can put common stuff in a common area.
[14:36:55] <FromDiscord> <haxscramper> so like makefile build graph?
[14:37:17] <FromDiscord> <saem> This is more just requires.
[14:37:46] <FromDiscord> <saem> So data dependency vs task, there are some differences. But sure
[14:38:51] <FromDiscord> <haxscramper> ?
[14:38:55] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rU9
[14:39:06] <FromDiscord> <saem> Putting tasks under an artifact are too indicate they're contextual/related.
[14:41:31] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:42:41] <FromDiscord> <saem> sent a long message, see http://ix.io/3rUa
[14:43:00] <FromDiscord> <saem> That's didn't quite work, but hope it rendered ok for you.
[14:43:21] <FromDiscord> <saem> Can't believe I did that on my phone.
[14:43:31] <FromDiscord> <Rika> sounds cool
[14:44:43] <FromDiscord> <haxscramper> yes, that sounds really nice
[14:45:00] <FromDiscord> <saem> Right now if I have a frontend and backend in a web app, there is only one place to specify backends. Dependencies for one are mixed up with the other. Could make a bunch of nimble files, kinda sucks.
[14:46:05] <FromDiscord> <saem> Or if I just want to pull something down and only build the cli version and not the daemon.
[14:47:06] <FromDiscord> <haxscramper> or don't build anything if I use hybrid package as a library
[14:47:50] <FromDiscord> <saem> Just put the point of the whole thing first. The library(s) or binary(s). Everything else is supporting cast.
[14:47:57] <FromDiscord> <haxscramper> artifacts can be mapped to package features as well, and it would be easier to have bigger packages that provide optional features
[14:49:54] <FromDiscord> <saem> Yup, nobody wants dependencies, tasks, versions, ... it's all secondary. So as long as nimble focuses on the point and the file, which is the key doesn't lose sight if it, most everything else follows.
[14:50:49] *** Joins: max22- (~maxime@2a01cb088335980074fe08c913b17c48.ipv6.abo.wanadoo.fr)
[14:51:07] *** Quits: max22- (~maxime@2a01cb088335980074fe08c913b17c48.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:51:28] *** Joins: max22- (~maxime@2a01cb088335980074fe08c913b17c48.ipv6.abo.wanadoo.fr)
[14:52:18] <FromDiscord> <saem> Anyhow, it doesn't need to be perfect, but could nudge that way. I think the first step would be a version number so automated migration can happen.
[14:53:49] <FromDiscord> <haxscramper> The version number is necessary to migrate from old `bin =` to better-designed artifact approac?
[14:54:43] <FromDiscord> <saem> Yeah, a file format version to show migration.
[14:54:44] <FromDiscord> <haxscramper> Out of 2013
[14:54:45] <FromDiscord> <haxscramper> `namedBin` used in 9 packages right now
[14:54:54] <FromDiscord> <haxscramper> `bin` is in 124
[14:55:10] <FromDiscord> <saem> It's not the worst, the json output can be fixed so it reveals the napping.
[14:56:09] <FromDiscord> <haxscramper> No, it's even less. `nimble` had some tests with `bin =`, so right now it's exactly 100 packages
[14:56:30] <FromDiscord> <saem> Ha
[14:57:46] <FromDiscord> <haxscramper> Only two has unusual `bin =` `nwsync   stFiles(thisDir())`
[14:57:59] <FromDiscord> <planetis> So whats your opinions on nake? Could it be better than nims
[15:00:35] <FromDiscord> <haxscramper> Less than 40% out of binary or hybrid packages don't have matching "package name" and "bin"
[15:00:59] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rUc
[15:01:30] <FromDiscord> <saem> Not at all surprising.
[15:01:37] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rUd
[15:01:59] <FromDiscord> <haxscramper> so we can really just jump to new version and PR fixes to these packages, I think this can be automated
[15:02:25] <FromDiscord> <haxscramper> similar to how yardanico was helping with ARC fixes
[15:02:31] <FromDiscord> <saem> Honestly imperative stuff like Nake is absolutely and positively uninteresting to be and that's the kindest I can be about it.
[15:03:29] <FromDiscord> <saem> I'd still put in a version number, won't always be able to do this.
[15:03:31] <FromDiscord> <haxscramper> yes, it is really hard to reason about dependencies and all that kind of stuff if you just have nondeclarative code
[15:03:39] *** Joins: sagax (~sagax@213.138.71.146)
[15:03:54] <FromDiscord> <saem> Version your data formats, it's a rule of distributed computing.
[15:04:28] <FromDiscord> <saem> \:D
[15:16:12] <FromDiscord> <haxscramper> after we finish initial discussion of things I've missed (like artifacts) and settle on some final plan I'm going to write a finished roadmap/spec, similar to what I did for #245  https://github.com/nim-lang/RFCs/issues/245#issuecomment-697897542
[15:29:31] *** Quits: max22- (~maxime@2a01cb088335980074fe08c913b17c48.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[15:34:32] <FromDiscord> <vindaar> just received a lesson in hash collisions \:P in a `seq[string]` of \~160,000 elements I produce 4 collisions. TIL don't just use stdlib hashing without thinking
[15:35:11] <FromDiscord> <vindaar> (this is for a uniqueness test)
[15:35:58] *** Joins: Schnouki (~schnouki@user/schnouki)
[15:39:32] <FromDiscord> <Rika> hash is meant for tables i believe so collisions arent a concern
[15:41:03] <FromDiscord> <vindaar> yeah, I'm aware. Initially this wasn't a problem in my application because I didn't think I'd ever deal with N \> 10 elements in practice. Then one starts to (ab)use things and suddenly those "ah, collisions shouldn't matter" bite you in the ass
[15:42:08] <FromDiscord> <vindaar> not quite sure what a good solution is though. I can't properly add an additional `==` check for collisions, because I'm only using hashes to work around the problem of dealing with different types
[15:57:06] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 240 seconds)
[15:57:34] <fn> <11ForumUpdaterBot99> New thread by Ingo: Float or iterator choise --> template?, see https://forum.nim-lang.org/t/8195
[16:19:32] <FromDiscord> <ynfle (ynfle)> Can someone help me with using pthread in nim? The thread just hang
[16:20:39] <FromDiscord> <ynfle (ynfle)> \threads
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:18] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:54:56] <FromDiscord> <deech> Why does is an empty `cstring` not `isNil`? eg. `let c : cstring = ""; echo c.isNil()` is `false`
[16:55:20] <FromDiscord> <haxscramper> that's not empty cstring, it has nul terminaltor
[16:55:26] <FromDiscord> <haxscramper> `nil` means `NULL` pointer
[16:55:33] <FromDiscord> <deech> Ah, thanks!
[16:59:48] <FromDiscord> <TheBiggestNubThun> sent a code paste, see https://play.nim-lang.org/#ix=3rUQ
[17:01:15] <FromDiscord> <TheBiggestNubThun> (edit) "https://play.nim-lang.org/#ix=3rUQ" => "https://play.nim-lang.org/#ix=3rUR"
[17:06:21] <FromDiscord> <haxscramper> devel has it https://github.com/nim-lang/Nim/pull/18274
[17:09:10] <FromDiscord> <TheBiggestNubThun> ah cool, thanks, I'll check it out
[17:09:19] *** Joins: arkurious (~arkurious@user/arkurious)
[17:18:04] <FromDiscord> <dom96> In reply to @saem "Right now if I": multiple nimble files is how this should be done. The simpler things are the better
[17:19:00] <FromDiscord> <dom96> but I think we should consider the problem we are trying to solve instead of just looking at the solution
[17:24:34] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3rUV
[17:24:41] <FromDiscord> <dom96> (edit) 
[17:29:33] <FromDiscord> <dom96> (the problem this solves is: it's not easy to tell Nimble how to build a `bin` binary)
[17:38:48] <FromDiscord> <haxscramper> `build` is probably better than `bin` since it's generic. also we can move `bin = @[...]` to different build sections
[17:39:07] <FromDiscord> <Bung> how to create set conains a enum type all fields?
[17:39:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rV1
[17:39:21] <FromDiscord> <haxscramper> `{ low(Enum} .. high(Enum) }`
[17:39:33] <FromDiscord> <Bung> ooh, cool
[17:41:12] <FromDiscord> <haxscramper> In reply to @haxscramper "`build` is probably better": I mean `bin ... : requires ... `
[17:41:17] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3rV2
[17:41:53] <FromDiscord> <haxscramper> also saem mentioned matrix testing
[17:41:57] *** Joins: max22- (~maxime@2a01cb0883359800a215e866b525bba8.ipv6.abo.wanadoo.fr)
[17:42:10] <FromDiscord> <haxscramper> not sure if this can be considered a `build`,
[17:56:42] *** Quits: max22- (~maxime@2a01cb0883359800a215e866b525bba8.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:04:42] *** Joins: max22- (~maxime@2a01cb0883359800b4b9c2f6746deeb9.ipv6.abo.wanadoo.fr)
[18:49:36] <FromDiscord> <gerwy> omg, does anyone know how the name is of that one module? Im looking for it and i can't find it in nimble or on github‚ÜµIt was basically some framework that has useful macros/procedures to create some terminal stuff, like progress bar, question with yes or not, multiple option question, colorful text etc.
[18:49:50] <FromDiscord> <gerwy> i know i saw it, im not insane
[18:52:44] <FromDiscord> <dom96> `nimble search terminal` might help
[18:52:55] <FromDiscord> <gerwy> i tried that already
[18:53:23] <FromDiscord> <gerwy> a looked at all 76 packages i saw and i didn't saw that one package, maybe it was one of them but don't think so
[18:53:37] <FromDiscord> <vindaar> @dom96\: did you check whether nimble does any weird things for you?
[18:55:48] <FromDiscord> <dom96> what weird things should I look for?
[18:56:02] <FromDiscord> <vindaar> how many packages are in your local `packages.json` after updating?
[18:56:17] <FromDiscord> <gerwy> for a moment i thought it was ncurses but no, i remember that it was something specifically made for nim, maybe it isn't published in nimble
[18:58:28] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[18:59:06] <FromDiscord> <gerwy> YES FOUND IT
[18:59:26] <FromDiscord> <gerwy> termui
[18:59:27] <FromDiscord> <gerwy> https://github.com/jjv360/nim-termui
[18:59:29] <fn> <12R2D299> 4GitHub: 7"Simple UI widgets for the terminal."
[18:59:31] <FromDiscord> <dom96> In reply to @vindaar "how many packages are": a lot, I think they're all there
[18:59:39] <FromDiscord> <gerwy> it was in nimble, idk i didn't saw it
[19:01:33] <FromDiscord> <Rika> what's better in termui vs illwill?
[19:02:42] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3rVr
[19:02:46] <FromDiscord> <dom96> (obviously not the real count)
[19:03:38] <FromDiscord> <vindaar> this is after a nimble refresh?
[19:04:37] <FromDiscord> <gerwy> In reply to @Rika "what's better in termui": probably illwill now because termui gives me errors even if i don't do anything just import it
[19:05:29] <FromDiscord> <gerwy> > /Users/mihau/.nimble/pkgs/termui-0.1.8/termui/inputfield.nim(9, 7) template/generic instantiation of `class` from here‚Üµ> ‚Üµ> /Users/mihau/.nimble/pkgs/termui-0.1.8/termui/inputfield.nim(34, 12) Error: method is not a base‚ÜµYeah im on OSX
[19:05:38] <FromDiscord> <gerwy> literally just imported it
[19:05:46] *** Joins: xet7 (~xet7@user/xet7)
[19:11:06] <FromDiscord> <vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3rVu
[19:12:48] <FromDiscord> <dom96> In reply to @vindaar "this is after a": yep
[19:13:07] <FromDiscord> <dom96> In reply to @vindaar "I'm sorry, but nimble": can you do `nimble refresh --debug`?
[19:13:30] <FromDiscord> <vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3rVw
[19:13:47] <FromDiscord> <dom96> well there you go
[19:13:50] <FromDiscord> <vindaar> trying `google.com`?
[19:13:52] <FromDiscord> <vindaar> what
[19:14:07] <FromDiscord> <dom96> it sounds like you ran nimble's test suite at some point and it didn't clear the nimble config properly
[19:14:14] <FromDiscord> <dom96> modify `/home/basti/.config/nimble/nimble.ini`
[19:14:30] <FromDiscord> <dom96> I should probably remove `http://nim-lang.org/nimble/packages.json`
[19:14:32] <FromDiscord> <ajusa> sent a long message, see http://ix.io/3rVx
[19:14:38] <FromDiscord> <dom96> or update it üôÇ
[19:16:02] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3rVy
[19:16:14] <FromDiscord> <dom96> (edit) "https://play.nim-lang.org/#ix=3rVy" => "https://play.nim-lang.org/#ix=3rVz"
[19:16:24] <FromDiscord> <vindaar> that fixed it indeed. Thanks. That's not something that should happen so silently üò™
[19:16:50] <FromDiscord> <Bung> json module not work for set typee?
[19:17:02] <FromDiscord> <ajusa> In reply to @dom96 "use an object variant:": Cool, thanks! That's what I figured I'd have to do probably, wasn't sure if that was the cleanest or easiest way. üòÑ
[19:29:03] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[20:20:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[22:00:59] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[22:01:57] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[22:02:40] *** Server sets mode: +nt 
[22:26:23] <FromDiscord> <Quantumly> sent a code paste, see https://play.nim-lang.org/#ix=3rWO
[22:51:27] <FromDiscord> <haxscramper> In reply to @Quantumly "Im trying to translate": it is really necessary to do this one-by-one?
[22:51:43] <FromDiscord> <haxscramper> I think you could just loop through array
[22:51:47] <FromDiscord> <haxscramper> in C and in nim
[22:52:18] <FromDiscord> <Quantumly> Atm Im just trying to get a 1-1 replica since the original C code was bootstrapped by the simulator
[22:53:25] <FromDiscord> <Quantumly> I tried making the types `ptr seq[cint]` but that made the types in the header be `tySequence9apztJSmgERYU8fZOjI4pOg AIOut`
[22:57:04] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rWW
[22:57:29] <FromDiscord> <haxscramper> if you really need `volatile int` you might try to use `ptr UnckedArray[cint]`
[22:57:45] <FromDiscord> <haxscramper> maybe something else, I don't know how this maps to nim exactly
[22:58:33] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[22:58:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:20:15] *** Quits: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Quit: Leaving)
[23:20:30] *** Joins: beshr (~beshr@user/beshr)
[23:23:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_145405730571288577\:t2bot.io  - git an interesting problem for ya
[23:23:43] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a code paste, see https://play.nim-lang.org/#ix=3rX3
[23:23:56] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I meant to type @ElegantBeef
[23:24:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'd want to do this without having to do `var a = Module(name="a")`
[23:24:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Perhaps I'm looking for a Macro?
[23:34:35] <FromDiscord> <aleclarson> Can a generic proc use varargs, what is the syntax?
[23:35:01] <FromDiscord> <aleclarson> (edit) "Can a generic proc ... use" 03added "type"
[23:35:55] <FromDiscord> <timotheecour> read system.echo
[23:36:33] <FromDiscord> <timotheecour> (edit) "system.echo" => "system.echo. only non-variadic varargs until someone implements variadics"
[23:37:19] <FromDiscord> <leorize> note that only echo can use `varargs[typed]`
[23:39:39] <FromDiscord> <timotheecour> sent a code paste, see https://play.nim-lang.org/#ix=3rXc
[23:40:03] <FromDiscord> <@bracketmaster-5a708063d73408ce4> essentially, earlier, I was wondering how can I instantiate a type using the name of the variable to the left of a var statement in Nim
[23:40:29] <FromDiscord> <timotheecour> (edit) "https://play.nim-lang.org/#ix=3rXc" => "https://play.nim-lang.org/#ix=3rXe"
[23:41:42] <FromDiscord> <timotheecour> see how byaddr is implemented
[23:46:11] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rXh
[23:46:17] <FromDiscord> <aleclarson> i want my macro to take any proc type
[23:47:06] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rXi
[23:50:13] <FromDiscord> <aleclarson> where `myproc` is a macro
[23:51:06] <FromDiscord> <timotheecour> `Impl[any, any]` is not a concrete type
[23:55:17] <FromDiscord> <timotheecour> sent a code paste, see https://play.nim-lang.org/#ix=3rXj
