[00:03:43] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[00:19:03] *** Joins: rgrinberg (~textual@187.223.248.37)
[00:26:43] <d_bot> <cemerick> imagine my surprise to discover that `Random` always starts with the same seed, i.e. doesn't "initialize" itself
[00:27:25] <d_bot> <cemerick> I can't say I've encountered such a default in any other language
[00:28:50] <d_bot> <cemerick> hah, apparently golang does this too ðŸ™ƒ
[00:29:16] <octachron> companion_cube, for a module with a dependency on a C library? You probably need at least one innocent soul as a sacrifice. More seriously, why zip?
[00:30:00] <companion_cube> hm, whose innocent soul can I sacrifice thenâ€¦ is gasche around?
[00:30:10] <companion_cube> well, it's hard to find something that doesn't support deflate somewhere
[00:30:17] <companion_cube> and it's absolutely universal
[00:33:55] <sadiq> lz4 now that would be fun
[00:34:19] <companion_cube> if I had to pick something modern, it'd be zstd
[00:34:26] <companion_cube> but it's absurd to have zstd and not zlib
[00:34:33] <companion_cube> literally everyone knows how to speak zlib
[00:34:38] <sadiq> I was thinking more of something that could be done in pure OCaml
[00:34:41] <companion_cube> (well, deflate)
[00:34:53] <companion_cube> why is that better than using zlib? :p
[00:36:12] <sadiq> lz4 is quick enough you can normally throw it into any kind of streaming thing and it's a win
[00:36:42] <sadiq> (as in, where io is involved)
[00:37:41] <sadiq> though I guess that is slowly shifting. PCIe 4 drives you can probably read sequentially at a throughput you can't decompress on a single core.
[00:37:54] <companion_cube> but lz4 isâ€¦ less common
[00:38:09] <companion_cube> can chrome open a trace.json.lz4? I doubt so :p
[00:38:17] <companion_cube> it can open trace.json.gz though
[00:38:24] <sadiq> oh sure
[00:38:35] <companion_cube> which is why it should be godamn standard
[00:38:43] <sadiq> I wasn't being entirely serious
[00:38:53] *** Joins: vicfred (~vicfred@user/vicfred)
[00:38:56] <sadiq> (nor do I think it's likely we'd see either of them in the stdlib)
[00:41:12] <companion_cube> yeah I know
[00:41:36] <companion_cube> and camlzip is fundamentally limited right now, because channels still suck
[00:41:39] <companion_cube> :/
[00:47:20] *** Quits: rgrinberg (~textual@187.223.248.37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:56:59] *** Quits: mro (~mro@port-92-195-201-166.dynamic.as20676.net) (Quit: Leaving...)
[00:58:40] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:05:56] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[01:16:06] *** Quits: gdd (~gdd@129.199.146.230) (Read error: Connection reset by peer)
[01:29:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:37:23] *** Joins: gdd (~gdd@129.199.146.230)
[01:56:50] *** Joins: namkeleser (~namkelese@101.175.102.188)
[01:59:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:04:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[02:06:28] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[02:15:39] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[02:16:35] *** Quits: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:55:12] *** Joins: rgrinberg (~textual@187.223.248.37)
[03:01:35] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[03:07:16] *** Joins: rgrinberg (~textual@187.223.248.37)
[03:21:25] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[03:26:35] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[03:26:56] *** Joins: rgrinberg (~textual@187.223.144.204)
[03:28:21] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 252 seconds)
[03:28:39] *** Joins: Colt (~Colt@user/colt)
[03:31:01] *** Joins: zebrag (~chris@user/zebrag)
[03:32:20] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[03:37:50] *** Joins: zebrag (~chris@user/zebrag)
[03:42:09] *** Quits: rgrinberg (~textual@187.223.144.204) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:21:33] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[04:52:36] <d_bot> <Et7f3> C also
[05:03:50] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[05:49:10] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[06:03:33] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[07:13:29] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[07:15:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[07:21:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[07:21:58] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[07:39:18] *** Joins: rgrinberg (~textual@187.223.250.159)
[07:39:34] *** Joins: xiongxin (~Thunderbi@119.123.103.170)
[07:44:21] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 256 seconds)
[07:46:43] *** Joins: average (uid473595@user/average)
[07:51:17] *** Joins: rgrinberg (~textual@187.223.250.159)
[08:03:41] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 256 seconds)
[08:04:36] <d_bot> <antron> indeed in agreement with @Et7f3, C (and therefore C++, though not sure what the "new" `<random>` does). so this was typical to deal with throughout the 80s, 90s, 2000s, and probably still is for many programmers
[08:07:40] <d_bot> <cemerick> I thankfully haven't done anything in C except hardware-related stuff for a looong time, tho I suspect I didn't need any randomness then, there
[08:10:28] <companion_cube> <random> must be a C++ thing
[08:10:38] <companion_cube> but doesn't libc ship with a basic random() function?
[08:10:48] <companion_cube> like a Mersenne twister or something like that
[08:33:17] *** Joins: rgrinberg (~textual@187.223.144.204)
[08:35:22] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:48:22] <d_bot> <Ethan__Hunt> Is there anyone who can help me in understanding the Building Interpreter using OCaml?
[08:49:11] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 252 seconds)
[09:07:16] *** Joins: mbuf (~Shakthi@171.61.205.226)
[09:27:33] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:29:22] *** Joins: shawnw (~shawn_w@2601:600:9b7f:d7f0:d0d6:6bc9:6acf:eb7e)
[09:31:31] *** Joins: rgrinberg (~textual@187.223.144.204)
[09:56:23] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[09:59:51] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[10:18:50] *** Joins: rgrinberg (~textual@187.223.250.159)
[10:37:32] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 252 seconds)
[10:43:34] *** Joins: average (uid473595@user/average)
[10:53:34] *** Joins: rgrinberg (~textual@187.223.248.37)
[11:05:59] *** Quits: rgrinberg (~textual@187.223.248.37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:12:15] *** Joins: rgrinberg (~textual@187.223.248.37)
[11:28:49] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[11:30:11] *** Quits: spip (~bobo@2a01:e0a:8d3:a300:ca60:ff:fe98:ce57) (Remote host closed the connection)
[11:30:56] *** Joins: rgrinberg (~textual@187.223.250.159)
[11:41:17] *** Quits: rwmjones (~rwmjones@26.54.187.81.in-addr.arpa) (Ping timeout: 256 seconds)
[11:44:55] *** Joins: rwmjones (~rwmjones@26.54.187.81.in-addr.arpa)
[11:54:15] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 256 seconds)
[11:58:18] *** Joins: rgrinberg (~textual@187.223.250.159)
[12:14:53] *** Joins: chrisz (tqvxg871mt@55d41b38.access.ecotel.net)
[12:28:20] *** Quits: rgrinberg (~textual@187.223.250.159) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:37:45] <d_bot> <Et7f3> Just describe what command you did and the errors
[12:47:05] *** Joins: olle_ (~olle@i5E866D87.versanet.de)
[13:13:39] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:22:40] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[13:31:04] *** Joins: bartholin (~bartholin@109.53.7.179)
[13:34:03] *** Quits: mbuf (~Shakthi@171.61.205.226) (Quit: Leaving)
[13:47:23] *** Quits: kurfen (~kurfen@lfbn-ann-1-320-249.w86-200.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[13:52:04] *** Joins: kurfen (~kurfen@160.238.38.225)
[14:05:13] *** Quits: olle_ (~olle@i5E866D87.versanet.de) (Ping timeout: 256 seconds)
[14:16:29] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[14:28:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:43:32] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[14:55:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[15:06:21] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[15:08:34] <Anarchos> What are the preconisations wrt logging framework in ocaml large codebase ?
[15:13:46] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:22:37] *** Quits: bartholin (~bartholin@109.53.7.179) (Ping timeout: 252 seconds)
[15:29:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[15:32:33] *** Joins: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se)
[15:35:25] *** Joins: bartholin (~bartholin@109.53.2.47)
[15:55:42] <d_bot> <antron> yes, `rand`, and `srand` to seed it
[15:57:24] <d_bot> <antron> Anarchos, what do you need it to do? is using logs (<https://github.com/dbuenzli/logs>) enough?
[16:06:50] <Anarchos> antron should be. i will look for that, thanks
[16:06:53] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[16:13:39] *** Joins: xd1le (~xd1le@user/xd1le)
[16:19:48] <d_bot> <zakkor> how come you can curry `+` but not `<>`?
[16:19:48] <d_bot> <zakkor>
[16:19:50] <d_bot> <zakkor> ```ocaml
[16:19:51] <d_bot> <zakkor> # let plus_two = + 2;;
[16:19:52] <d_bot> <zakkor> val plus_two : int = 2
[16:19:53] <d_bot> <zakkor>
[16:19:55] <d_bot> <zakkor> # let not_newline = <> "\n";;
[16:19:56] <d_bot> <zakkor> Error: Syntax error
[16:19:57] <d_bot> <zakkor> ```
[16:20:42] <d_bot> <NULL> You can curry both but you need special syntax
[16:20:49] <d_bot> <zakkor> ohhhh
[16:20:56] <d_bot> <zakkor> I see now, the first one is just `2`, lol!
[16:21:18] <d_bot> <zakkor> ```ocaml
[16:21:19] <d_bot> <zakkor> # let not_newline = (<>) "\n";;
[16:21:21] <d_bot> <zakkor> val not_newline : string -> bool = <fun>
[16:21:22] <d_bot> <zakkor> ```
[16:21:24] <d_bot> <zakkor> dope!
[16:22:08] <d_bot> <NULL> You found how before I could write it. Dang smartphone keyboard, can't type fast
[16:23:20] <d_bot> <NULL> Just note that you need spaces around the operator in the parentheses if there are * on its edges so the parser doesn't take it for a comment
[16:24:57] <d_bot> <zakkor> Righto, thanks. Yeah, ocamlformat places spaces between the parens
[16:32:52] <theblatte> and if you want the unary operator you need to add ~, eg the - in -5 is (~-)
[16:37:53] *** Joins: olle_ (~olle@i5E866D87.versanet.de)
[16:43:27] *** Joins: Techcable (~Techcable@168.235.93.147)
[17:11:01] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[17:12:58] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:19:52] *** Quits: xiongxin (~Thunderbi@119.123.103.170) (Remote host closed the connection)
[17:22:55] *** Quits: bartholin (~bartholin@109.53.2.47) (Ping timeout: 256 seconds)
[17:36:29] *** Joins: bartholin (~bartholin@109.53.5.226)
[17:42:59] *** Joins: romildo (~Romildo@ip-191-5-86-89.isp.valenet.com.br)
[17:46:01] *** Joins: mro (~mro@2002:5cc3:f2d8:0:a8a0:4cd3:b0f8:ee8f)
[17:49:14] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[17:54:27] *** Quits: mro (~mro@2002:5cc3:f2d8:0:a8a0:4cd3:b0f8:ee8f) (Remote host closed the connection)
[18:15:00] *** Quits: chrisz (tqvxg871mt@55d41b38.access.ecotel.net) (Quit: leaving)
[18:24:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[18:25:23] *** Joins: zebrag (~chris@user/zebrag)
[18:26:23] *** Joins: mro (~mro@2002:5cc3:f2d8:0:a8a0:4cd3:b0f8:ee8f)
[18:32:19] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[18:38:50] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[18:39:32] <CalimeroTeknik> hello! I remember there is a library of network sockets where a program that could potentially read from a closed socket does not compile. what's its name?
[18:59:19] *** Quits: shawnw (~shawn_w@2601:600:9b7f:d7f0:d0d6:6bc9:6acf:eb7e) (Ping timeout: 252 seconds)
[19:04:25] *** Quits: olle_ (~olle@i5E866D87.versanet.de) (Ping timeout: 256 seconds)
[19:09:48] <Anarchos> who encounters also this error with haikuporter : 'NoneType' object has no attribute 'replace'
[19:14:48] * Anarchos is sorry, this message was for another channel
[19:16:25] * rwmjones is wondering if the new M.(...) syntax lets you write this any better:
[19:16:27] <rwmjones> allocated := Int64.add !allocated (Int64.of_int32 len)
[19:16:33] <rwmjones> (allocated is an int64 ref)
[19:16:36] <rwmjones> I came up with:
[19:16:43] <rwmjones> allocated := Int64.( add !allocated (of_int32 len) )
[19:16:59] <rwmjones> but it would be nicer if I could use regular "+" there or at least infix
[19:17:10] <rwmjones> and autoconvert the int32 len
[19:18:17] <rwmjones> and += ...
[19:22:47] *** Quits: bartholin (~bartholin@109.53.5.226) (Ping timeout: 252 seconds)
[19:24:43] <CalimeroTeknik> (I found the types I was talking about - session types)
[19:25:14] <rwmjones> CalimeroTeknik: I'm interested in the answer - got a link to that topic?
[19:26:09] <rwmjones> https://link.springer.com/chapter/10.1007%2F978-3-319-59746-1_6 maybe?
[19:29:53] <CalimeroTeknik> yes, that and FuSe apparently
[19:32:25] <CalimeroTeknik> this is applied to what I was talking about, at a satisfying level of abstraction: "communication" http://www.dcs.gla.ac.uk/~ornela/publications/DGS12.pdf
[19:35:30] *** Joins: bartholin (~bartholin@109.53.1.232)
[19:38:31] <Anarchos> CalimeroTeknik seems to be linear logic related topic ?
[19:40:33] <CalimeroTeknik> sorry, I can't tell; I don't really understand the wikipedia page "linear logic"
[19:47:49] <CalimeroTeknik> intimidating words like that are the reason Ocaml hasn't completely taken over the world yet :)
[19:49:24] <Anarchos> CalimeroTeknik linear logic is the same as propositionnal logic, but you take into account the number of times a variables is used in a formula
[19:49:27] <Anarchos> rough speaking
[19:50:12] <CalimeroTeknik> ah, yes, the article does say that you "use up" the truth
[19:51:22] <Corbin> CalimeroTeknik: Lucky 10000: Stoichiometry, the arithmetic used to balance chemical equations, gives a linear logic. Whenever we have resources which are conserved, the logic which describes them is usually linear somehow.
[19:52:09] <Corbin> On top of that, OCaml doesn't actually ship linear types, AFAIK. The reason why OCaml isn't that popular is because only a tiny number of languages can ever be popular at once; it's random and extremely lucky whether a language becomes popular.
[19:56:27] *** Quits: mro (~mro@2002:5cc3:f2d8:0:a8a0:4cd3:b0f8:ee8f) (Remote host closed the connection)
[19:57:14] <d_bot> <darrenldl> absolutely agree: popularity of lang, or even tooling in general, is very luck based
[19:57:45] <d_bot> <darrenldl> having a huge marketing budget helps in some cases
[20:06:05] *** Joins: gravicappa (~gravicapp@145.255.11.160)
[20:06:09] <CalimeroTeknik> I see two important factors: the first to (happen to) be in use (e.g. JS in web browsers) just takes the cake and keeps it; and when that doesn't apply, that the languages that manage to advertise themselves for a particular practical purpose share it
[20:09:39] <CalimeroTeknik> rational and irrational feelings of "easy" (marketed as "simple") and "convenient" also count, and that was what I was stressing: jargon certainly doesn't seem easy and convenient
[20:10:58] <CalimeroTeknik> that's the rational part that's distinct from sheer luck; I've been driven away from ocaml for years for this sole reason: lack of familiarity with the vocabulary used
[20:11:02] <Corbin> Neither of those would explain why C got popular. Network effects explain it, though; C was the native language of UNIX.
[20:12:57] <CalimeroTeknik> indeed, for UNIX; C doesn't have particularly elaborate concepts besides pointers though, does it?
[20:14:48] <Corbin> const, * in types vs * in expressions, malloc() and free(), extern, division, promotion/widening/narrowing, etc.
[20:16:08] *** Quits: bartholin (~bartholin@109.53.1.232) (Ping timeout: 252 seconds)
[20:18:56] <haesbaert> One of the main reasons C got popular is because it was the closest thing to portable asm and writing a compiler for it was considerably easy
[20:19:26] <CalimeroTeknik> indeed, easy over simple
[20:20:51] <CalimeroTeknik> counter-argument 1/2: for those of these C concepts that appear in actual names or keywords in the language (const, extern, etc.), they can be explained tersely in layman terms, which is either impossible or not done for Ocaml
[20:21:19] <Corbin> haesbaert: Do you have evidence for those memes?
[20:21:25] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 256 seconds)
[20:21:57] <haesbaert> as if I cared about providing evidence to a random idiot on the internet
[20:22:07] <companion_cube> rwmjones: yeah you can overload + in an extension of Int64
[20:22:13] <CalimeroTeknik> counter-argument 2/2: no terse explanation in layman terms of category theory terms used in actual Ocaml docs and even function names were available when I looked for them
[20:22:29] <Corbin> haesbaert: Hey, you're the one spreading misinformation~ But I just wanted to double-check. I'm open to learning things, but if you aren't, then don't worry about it.
[20:23:10] <CalimeroTeknik> haesbaert, that was just rude, period
[20:23:27] <d_bot> <antron> CalimeroTeknik: do you recall where in the docs the terms were used? sounds like something worth making a PR to fix
[20:24:16] <CalimeroTeknik> oh. I did get that the project was open to suggestions for higher clarity, but I didn't imagine it was this much
[20:24:54] <Corbin> CalimeroTeknik: Careful not to fall for the monad-tutorial effect; it's easy to come into an ecosystem with unfamiliar jargon and have a cycle of "I don't understand" => "the words need to change to be simpler" => "I grok it now and you overcomplicated it" => "I need to write tutorials with new simple words so that everybody will see the glory of this language"
[20:25:56] <CalimeroTeknik> I am indeed of the opinion "I grok it now and you misnamed the things"
[20:25:59] <companion_cube> Space suit burritos
[20:26:31] <Corbin> Which names are frustrating? I could guess "functor" and "module".
[20:28:02] <CalimeroTeknik> yes, exactly, as well as monad, monoid
[20:28:14] <CalimeroTeknik> I was thinking of calling them associables or combinables
[20:28:31] *** Joins: bartholin (~bartholin@109.53.7.49)
[20:28:53] <d_bot> <NULL> Where did you encounter monoid ?
[20:29:23] <companion_cube> associable, like List.assoc? ðŸ¤”
[20:30:34] <Corbin> How do you feel about "triple" for monads? For "monoid", the ship might have sailed; the name comes from Bourbaki in the 1940s and is about as standard as "semigroup".
[20:30:51] <d_bot> <antron> @NULL just grepped for it, it's on the `let` syntax page: https://ocaml.org/manual/bindingops.html
[20:31:18] <d_bot> <NULL> Thanks
[20:31:22] <companion_cube> For monad the ship has sailed too
[20:31:39] <Corbin> Following the mixin shift (https://www.dreamsongs.com/Files/Incommensurability.pdf), "module" is the right name for the sort of feature OCaml has with that name.
[20:31:52] <d_bot> <antron> all usages of "monad" in the manual are also on this page
[20:31:57] <companion_cube> (how does "triple" apply anyway?)
[20:33:48] <Corbin> ("triple" is one of the old terms for monads, before we understood them well. The name comes from three pieces of data: the carrier type, the unit arrow, and the join arrow.)
[20:34:33] <companion_cube> That's an incredibly bad name :D
[20:34:36] <d_bot> <antron> triple is a bogus term for monads, it's too general. it's like calling groups "pairs"
[20:34:37] <CalimeroTeknik> as a name it is very generic, it just means three things associated
[20:34:50] <d_bot> <antron> "a group is a pair of a set (type) and a binary operation satisfying ..."
[20:35:09] <companion_cube> Groups have like 5 or 6 things in them, but yeah, it's terrible
[20:35:11] <d_bot> <NULL> Did you mean monoid ?
[20:35:53] <Corbin> https://mathoverflow.net/a/338282/172672 suggests that Bourbaki thought "monoid" was a better name than "semigroup". Not sure about the history, but today "monoid" lines up well with "monad" and they can be understood together.
[20:36:13] <CalimeroTeknik> semigroup does sound much better!
[20:36:19] <CalimeroTeknik> at least I get an idea that it has items
[20:36:39] *** Joins: rgrinberg (~textual@187.223.248.37)
[20:37:14] <CalimeroTeknik> "monoid" could mean "singleton" as far as I'm concerned, and I wouldn't notice anything fishy going on
[20:38:31] <companion_cube> Monoid allows you to always combine things into one
[20:38:37] <companion_cube> That's kind of nice :)
[20:39:01] <CalimeroTeknik> I did suggest "combinable" earlier precisely for that reason
[20:40:24] <Corbin> Hm. What would "commutative monoid" become? (Is "commutative" better than "Abelian"?)
[20:40:51] <CalimeroTeknik> the core of the matter is that the name does not make it apparent that it is a set, to begin with
[20:41:27] <d_bot> <NULL> Semigroup now has a definition which is different to monoid
[20:41:57] <companion_cube> commutative is a lot better than Abelian
[20:42:15] <CalimeroTeknik> yes!
[20:42:55] <CalimeroTeknik> NielsEnrikAbel-ian is not very transparent and meaningful
[20:43:03] <CalimeroTeknik> Henrik*
[20:44:05] <CalimeroTeknik> at least it should be not too hard to agree on not naming library functions after their inventor :)
[20:44:25] <Corbin> CalimeroTeknik: Ah! This is an important detail; a monoid has an underlying set, but it is not inherently a set. This is a recurring theme in abstract algebra.
[20:45:23] <d_bot> <NULL> CalimeroTeknik: Would you change "currification" ?
[20:45:58] <d_bot> <antron> to currying?
[20:46:51] <CalimeroTeknik> ideally, though since the concept can be explained in layman terms using only the term "function", that was manageable
[20:48:00] <d_bot> <NULL> Would you say monoid and monad cannot be explaied in layman terms ?
[20:49:59] <CalimeroTeknik> actually I have proof by example that they can be! but I haven't seen that much in the wild
[20:50:57] <d_bot> <NULL> Monoid : set with an operation that is associative (ie you treat arguments as if they were in a list, only their order counts)
[20:51:03] <CalimeroTeknik> oh wait, this is not too horrible, although it uses the term "closed" https://en.wiktionary.org/wiki/monoid#Noun
[20:51:14] <companion_cube> NULL: that's just the definitionâ€¦
[20:51:32] <Corbin> The laity doesn't know what a function is. I hear that, among young students, the majority no longer know what a filesystem is. Programming concepts only exist in the laity because we teach it to them.
[20:53:18] <d_bot> <NULL> Then I argue the definition only uses layman terms
[20:53:24] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[20:56:01] <companion_cube> Corbin: young students know nothing, as always, because they need to learn :p
[20:56:06] <CalimeroTeknik> I have an even better one actually: a type, a function of two arguments of the type whose order don't matter and that returns the type, and a value of the type that, when supplied to the function, makes it return the other argument
[20:56:39] <CalimeroTeknik> *this* is what I needed to hear as the definition of a monoid applied to programming; anything more would have been too hard
[20:56:40] <companion_cube> the order does matter though
[20:56:51] <companion_cube> but you also just said the definition, with words instead of 2 short equations
[20:56:51] <CalimeroTeknik> commutative = order doesn't matter
[20:57:03] <d_bot> <NULL> Monoid: associative though
[20:57:24] <CalimeroTeknik> oh wait; associative not commutative?
[20:57:25] <companion_cube> not all monoids are commutative, indeed
[20:57:32] <companion_cube> (e.g. list)
[20:57:45] <CalimeroTeknik> see, it's too hard already, I'm mixing up jargon terms (associative and commutative)
[20:58:27] <companion_cube> it's like confusing size and alignment in C
[20:58:29] <companion_cube> just learn :p
[20:58:53] <companion_cube> (alignmentâ€¦ talk about "simple" concepts)
[20:59:06] <d_bot> <NULL> Basic algebra should be part of the maths basics programmer have to learn
[20:59:10] <CalimeroTeknik> it is, in the head of the assembly zombie
[20:59:20] <d_bot> <Et7f3> I have learn the term but too hard to remember those deconnected like abelian ... wtf just because abel described it
[20:59:29] <CalimeroTeknik> you also assume unlimited attention ability from the layman, which is far from the truth, companion_cube
[21:00:04] <companion_cube> sounds like advocating for C, yes
[21:00:18] <companion_cube> each line can hide a bug ðŸŽ‰
[21:00:19] <d_bot> <NULL> I think everyone here agrees that Abelian should be replaced by commutative
[21:01:57] <d_bot> <Et7f3> also ring <> group. I think group is smaller ?
[21:02:09] <d_bot> <NULL> Has less operations*
[21:02:12] <companion_cube> ring > group
[21:02:13] <d_bot> <NULL> (1 vs 2)
[21:02:34] <companion_cube> ring is group + monoid (or semi group? I forget) + some distributivity between the two, iirc
[21:02:36] <companion_cube> it's been a while
[21:02:56] <d_bot> <antron> people argue about whether the second operation has to have a unit or not
[21:03:21] <d_bot> <antron> so different universities can favor different definitions of rings
[21:03:27] <companion_cube> heh, fun
[21:03:34] <companion_cube> does "positive" mean > 0 or >= 0 ?
[21:03:38] <d_bot> <antron> probably even varies by office as you go down the math corridors ðŸ™‚
[21:03:40] <companion_cube> depends on your country!
[21:04:07] <d_bot> <antron> or natural numbers start with 0 in computer science but sometimes with 1 in "classical" mathematics departments
[21:04:37] <d_bot> <Et7f3> I have saw N* for N\\{0}
[21:04:44] <companion_cube> for a logician it's obviously 0 included :p
[21:04:48] <d_bot> <NULL> Are there people to argue "positive = n >0" is the better choice ?
[21:04:54] <companion_cube> ðŸ¤·
[21:04:56] <d_bot> <antron> i've seen even J for natural numbers, starting with 1 ðŸ™‚
[21:05:16] <d_bot> <antron> i was always exposed to postiive is > 0. >= 0 is non-negative
[21:05:27] <d_bot> <NULL> Some countries have N+ for N with 0
[21:05:59] <d_bot> <NULL> But is it a better convention to always name the useful set as "the non-negatives" ?
[21:06:12] <companion_cube> @antron in france it's "positive" and "strictly positive"
[21:06:40] <d_bot> <antron> "very strictly positive": 2,3,4,...
[21:06:51] <d_bot> <antron> very very strictly positive
[21:07:00] <d_bot> <antron> counting in unary here i guess
[21:07:16] <companion_cube> the british would say "positive, quite"
[21:07:16] <d_bot> <Et7f3> (I don't remeber what is positive in my country) but positive should be > 0 so we are explicit and we say positiv or nul for >=0
[21:07:31] <d_bot> <NULL> In fact, it just replaces >= with >
[21:07:50] <d_bot> <NULL> Why tho ?
[21:08:09] <d_bot> <antron> because is zero both positive and negative, or is it neither?
[21:08:23] <d_bot> <NULL> It is both (in France)
[21:08:24] <d_bot> <Et7f3> this sign is called > describe greater(one word one symbol) and >= describe greater or equal (2words 2 symbols)
[21:08:26] <companion_cube> why not both?
[21:08:38] <CalimeroTeknik> I use the word "count" for numbers â‰¥0
[21:08:46] <companion_cube> 0+ and 0-, just like with floats :)
[21:08:48] <d_bot> <antron> no reason why not. but wherever i was, it was neither ðŸ™‚
[21:09:01] <CalimeroTeknik> er, for integers â‰¥0
[21:09:14] <d_bot> <Et7f3> oops wrong encoding
[21:09:14] <d_bot> <NULL> I argue >= should be greater than, > being strictly gt
[21:09:24] <d_bot> <antron> the IRC bridge is failing with whatever that symbol is suppoesd to be
[21:09:40] <d_bot> <antron> >= is read as "greater than or equal"
[21:09:42] <d_bot> <NULL> (It's also failing with â€¦)
[21:09:46] <d_bot> <Et7f3> we see two time the same sequence
[21:10:01] <d_bot> <antron> and > is "greater than"
[21:10:02] <CalimeroTeknik> me? ASCII version: "I use the word "count" for integers >=0"
[21:10:15] <d_bot> <antron> "greater" is already greatER
[21:10:17] <d_bot> <Et7f3> yes thanx
[21:10:45] <companion_cube> > should be greaterer
[21:10:51] <CalimeroTeknik> -0 and +0 sound like they should be plus or minus epsilon, formally speaking
[21:10:55] <companion_cube> and >=, greaterish
[21:10:59] <d_bot> <NULL> I know, but that's also a bad convention. Having comparisons be strict by default is strictly less good
[21:11:03] <d_bot> <antron> companion_cube: can agree ðŸ™‚
[21:11:35] <d_bot> <NULL> But I don't think it can realistically be changed
[21:11:44] <d_bot> <NULL> So it's just unfortunate
[21:12:08] <d_bot> <Et7f3> why less good ?
[21:12:13] <d_bot> <antron> i don't see how it's strictly less good. it follows the meaning of comparative adjectives
[21:12:19] <companion_cube> less good, or less or equal good?
[21:12:28] <d_bot> <Et7f3> ðŸ˜¦
[21:12:29] <d_bot> <antron> nice
[21:12:31] <d_bot> <NULL> At least in French it's somewhat ambiguous whether it is strict or not (though people tend to default to strict)
[21:12:33] <d_bot> <Et7f3> ðŸ˜‚
[21:12:42] <companion_cube> I do think >= is better than > as a "default"
[21:13:03] <d_bot> <antron> in english its unambigous, comparative adjectives denote strict comparisons
[21:13:43] <d_bot> <NULL> I know, and I think it is a bad convention, but one which cannot be realistically changed
[21:14:35] <d_bot> <Et7f3> even in french >= read "supÃ©rieur ou Ã©gal" and > "supÃ©rieur"
[21:15:17] <CalimeroTeknik> in math class, > is strict, is this true all over the world?
[21:15:17] <CalimeroTeknik> at least we have consistency
[21:15:35] <d_bot> <NULL> In practice, you say "plus grand que" which is ambiguous but usually refers to >= because that's the one people use
[21:15:52] <d_bot> <NULL> I'm pretty sure at least that is universal
[21:15:53] <d_bot> <Et7f3> britain and french disagree at least
[21:15:55] <CalimeroTeknik> really? "plus grand que" refers to > as I was taught in French
[21:16:07] <companion_cube> for me it was always ambiguous
[21:16:14] <CalimeroTeknik> alright
[21:16:27] <d_bot> <NULL> supÃ©rieur Ã  is unambiguously >=
[21:16:34] <d_bot> <NULL> >**
[21:16:44] <CalimeroTeknik> yes, that much is true
[21:16:58] <companion_cube> and that's why symbols > words
[21:17:00] <d_bot> <NULL> In fact, I'm not so sure
[21:17:31] <CalimeroTeknik> in doubt, math teachers use "strictement supÃ©rieur" and "supÃ©rieur ou Ã©gal"
[21:17:51] <d_bot> <NULL> Yeah
[21:18:11] <companion_cube> yep
[21:19:01] <d_bot> <Et7f3> ðŸ¤” Is paul taller than simon ?/Est-ce que paul est plus grand que simon ? I think we can answer: "No he is as tall as simon/Non il est aussi grand que" so event in french "plus grand que" should be ">"
[21:19:18] <companion_cube> to be fair I'm not that tal
[21:19:20] <companion_cube> l
[21:19:48] <d_bot> <Et7f3> ðŸ˜‚ (oops you revealer your real name)
[21:20:01] <companion_cube> no big secret here :)
[21:20:05] <d_bot> <NULL> I said somewhat ambiguous; some people wouldn't say being as tall is contradictory to being taller (in French, I am of those people)
[21:20:08] <Armael> big mistake!
[21:20:27] <companion_cube> oh no, now you can use magic on me, you know my real name
[21:22:02] <d_bot> <Et7f3> Hopefully we can translate many definitions with math symbol so it is less ambiguous
[21:22:47] <CalimeroTeknik> and you get APL
[21:23:17] <d_bot> <NULL> APL ?
[21:23:28] <companion_cube> no, you get LaTeX
[21:24:55] <CalimeroTeknik> https://en.wikipedia.org/wiki/APL_(programming_language)
[21:26:08] <Anarchos> CalimeroTeknik good luck with APL.
[21:26:22] * Anarchos never approches APL from within 10 meters , without a good stick
[21:27:36] <CalimeroTeknik> my intention was to use it as a cautionary tale in response to "representing definitions with math symbols"
[21:27:45] *** Joins: kurfen_ (~kurfen@160.238.38.230)
[21:28:17] *** Quits: kurfen (~kurfen@160.238.38.225) (Ping timeout: 256 seconds)
[21:32:35] *** Quits: romildo (~Romildo@ip-191-5-86-89.isp.valenet.com.br) (Quit: Leaving)
[21:39:11] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 252 seconds)
[21:42:16] *** Joins: rgrinberg (~textual@187.223.250.159)
[21:47:22] *** Quits: rgrinberg (~textual@187.223.250.159) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:53:47] *** Joins: rgrinberg (~textual@187.223.250.159)
[21:58:59] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 252 seconds)
[22:05:02] *** Quits: gravicappa (~gravicapp@145.255.11.160) (Ping timeout: 252 seconds)
[22:10:29] *** Joins: mro (~mro@port-92-195-242-216.dynamic.as20676.net)
[22:14:45] *** Quits: mro (~mro@port-92-195-242-216.dynamic.as20676.net) (Ping timeout: 252 seconds)
[22:16:27] *** Quits: bartholin (~bartholin@109.53.7.49) (Ping timeout: 256 seconds)
[22:21:28] *** Joins: rgrinberg (~textual@187.223.250.159)
[22:23:33] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[22:29:34] *** Joins: bartholin (~bartholin@109.53.7.101)
[22:31:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:48:16] *** Joins: vicfred (~vicfred@user/vicfred)
[22:49:19] *** Quits: rgrinberg (~textual@187.223.250.159) (Ping timeout: 256 seconds)
[23:01:47] *** Quits: bartholin (~bartholin@109.53.7.101) (Ping timeout: 256 seconds)
[23:05:26] *** Joins: rgrinberg (~textual@187.223.250.159)
[23:10:33] *** Quits: rgrinberg (~textual@187.223.250.159) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:32:25] *** Joins: bartholin (~bartholin@158.110.70.215)
[23:44:08] *** Joins: mro (~mro@2002:5cc3:f2d8:0:a8a0:4cd3:b0f8:ee8f)
[23:44:45] *** Joins: rgrinberg (~textual@187.223.250.159)
