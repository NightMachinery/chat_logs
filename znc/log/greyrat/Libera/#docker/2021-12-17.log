[00:00:10] <bencc1> how can I check context swithces?
[00:00:16] <programmerq> it sounds like chrome is competing for resources that other chrome instances are trying to use.
[00:00:25] <bencc1> I agree
[00:00:31] <bencc1> sound reasonable
[00:00:38] <bencc1> I don't know how to limit the resources
[00:00:46] <programmerq> https://www.slashroot.in/linux-cpu-performance-monitoring-tutorial#:~:text=Now%20how%20to%20check%20the,second%20interval%20as%20shown%20below.&text=The%20cs%20column%20shown%20in,of%20context%20switches%20per%20second.
[00:00:47] <bencc1> tried using cpuset but it didn't hel
[00:01:05] <tabakhase> "vms" as in - have you compared say, KVM vs docker on your hardware? - or were talkign "someone elses vm" (who may have a $4k xenon under that and not a ryzen thats been frankensteined from 4cpus? ;-) )
[00:02:13] <rawtaz> thanks for that link programmer
[00:02:28] <programmerq> it ended up being uglier than I hoped, lol
[00:03:00] <bencc1> don't understand why ryzen should be the problem here
[00:03:01] *** Quits: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de) (Ping timeout: 256 seconds)
[00:03:21] <bencc1> I start seeing the difference when using 2 containers compared to 1 container
[00:03:32] <statusbot4> Status update: We are working on an issue with authentication being slower than normal. This will impact page load times on hub. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bba29851fec9053d6139d8
[00:03:34] <bencc1> pinning cpus to containers doesn't help
[00:03:45] <bencc1> that's 99.999% software issue
[00:03:59] <bencc1> might be chrome being a desktop app not built for a server
[00:04:01] <bencc1> I don't know
[00:04:12] *** Joins: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de)
[00:04:19] <bencc1> and yes, I'm talking about kvm instead of docker
[00:04:29] <bencc1> to get isolation and test
[00:04:44] <bencc1> if it'll work, it's a software or setting thing, if not than it might be hardware
[00:04:47] <bencc1> but it'll work
[00:04:51] <tabakhase> pinning does help - but only if outside influences dont get over it (clearing caches as you pin, but dont make cores exclusive))
[00:06:23] *** Joins: C4Crawford (~C4Crawfor@162-238-18-201.lightspeed.bcvloh.sbcglobal.net)
[00:07:24] <bencc1> how do I know if I have too many context switching?
[00:07:26] <rawtaz> bencc1: not sure if this quesiton applies but have you tried running the same processes that you run in your containers, outside of docker? i mean, just running them alongside each other on the same system but having removed docker out of the equation?
[00:07:39] <bencc1> I see the cs column in "vmstat 1"
[00:07:41] *** Joins: mz` (~mz`@user/mz/x-8532539)
[00:07:46] <rawtaz> if not, wouldnt that be a useful test to isolate?
[00:08:08] <bencc1> rawtaz: yes, I want to try it
[00:08:20] <bencc1> need to change the architecture to do it
[00:08:22] <programmerq> there are some kernel syscalls that become a single bottleneck. Like, openat on a file that doesn't exist will force a context switch and go to sleep. The more processes on a given system that context switch like that, the slower each one of those requests will take on average.
[00:08:49] <programmerq> bencc1 compare the context switches per second when you have one chrome process running vs 2 vs 4 etc...
[00:08:56] <bencc1> ok
[00:08:58] <tabakhase> its no "hard number where it goes bad"
[00:09:00] <bencc1> good suggestion
[00:09:15] <programmerq> the "where it goes bad" depends mostly on what the workload is and how impactful that particular bottleneck is
[00:09:16] <rawtaz> indeed
[00:10:57] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[00:11:22] <programmerq> https://sysdig.com/blog/container-isolation-gone-wrong/ - here's an (older) blog post about using sysdig to time certain syscalls and identify that. The post basically points out that containers "don't completely isolate", but that's just because containers are a fancy way to run processes all on one system. So you still of course run into shared things like the kernel. This is with a contrived
[00:11:25] <programmerq> example where they just try to open random files like crazy and then see what happens. Something similar could be happening here.
[00:11:37] <programmerq> honestly, sysdig is a fantastic tool to capture exactly what's going on on the system
[00:11:47] <programmerq> (disclosure I did work at sysdig for a bit. it's a great tool)
[00:11:57] <programmerq> that blog post covers their open source tool, so you don't need any of the paid stuff.
[00:12:05] <programmerq> I still use it from time to time.
[00:12:22] <bencc1> I've read it
[00:12:38] <bencc1> what I learned from it is that's above my level of expertise
[00:12:58] <bencc1> and if containers have such challenges I won't be able to fix and use them for this task
[00:13:22] <bencc1> I'm using containers for other jobs but this specific task cause me issues for a long time
[00:13:40] <bencc1> I finally decided to try and improve the profrmance
[00:14:04] <bencc1> using firecracker to workaround sounds reasonable to me
[00:14:20] <bencc1> but it's not as user friendly as docker to use
[00:16:06] *** Quits: weedmic (~weedmic@109-186-195-63.bb.netvision.net.il) (Quit: Konversation terminated!)
[00:16:16] <rawtaz> programmerq: next time, you can use this link:  https://www.slashroot.in/linux-cpu-performance-monitoring-tutorial
[00:16:19] <rawtaz> :)
[00:20:36] <tabakhase> that more looked like chromes "copy link to text" feature ;-)
[00:21:07] <tabakhase> a godsend when there are no #tag-a´s ;D
[00:22:41] *** Joins: mz` (~mz`@user/mz/x-8532539)
[00:25:54] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[00:26:52] <statusbot4> Status update: Things seem to be stabilizing. We are continuing to monitor load times. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bba29851fec9053d6139d8
[00:28:49] <bencc1> programmerq: 0 containers = 400 per second
[00:29:01] <bencc1> 1 containers = 10000 cs per second
[00:29:12] <bencc1> 4 containers = 40000 cs per second
[00:30:26] <bencc1> but cpu usage of 1 container is 1 core and cpu usage of 4 containers is 1.3 cores per container
[00:30:54] <bencc1> I don't know if 10K or 40K context switches is high and how to make it lower
[00:31:39] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (Ping timeout: 250 seconds)
[00:36:02] <statusbot4> Status update: All services are now operating normally. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bba29851fec9053d6139d8
[00:37:40] *** Joins: mz` (~mz`@user/mz/x-8532539)
[00:40:41] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[00:43:15] *** Quits: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl) (Quit: Leaving)
[00:45:55] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:51:24] *** Joins: Tach (~Tach@user/tach)
[00:53:12] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[00:56:09] *** Quits: Ryu945 (Ryu945@gateway/vpn/protonvpn/ryu945) (Quit: Leaving)
[00:58:20] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:01:29] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[01:02:20] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:226:6685:3dd4:7093) (Quit: Leaving)
[01:02:25] *** Quits: sakhd__ (~lehinsun@188.113.178.220) (Quit: Leaving)
[01:04:00] <blackwood821> Hi. I have a docker-compose file that specifies one nginx container and a volume for that container. The only thing I need the volume for is to place the SSL cert and key. I have the SSL cert and key locally when I create the stack but I don't want to rely on my local machine once the stack is created. Is there some automated way for me to get the SSL cert into the volume at stack creation time?
[01:04:51] <blackwood821> I'm basically wanting to feed a SSL cert to each NGINX container I create and not sure how to go about it
[01:05:17] <tabakhase> blackwood821 are we talking stack as in "docker stack" - or as in "the stack you build with this compose file using docker-compose"?
[01:05:48] <blackwood821> tabakhase: the latter
[01:05:59] *** Quits: Tach (~Tach@user/tach) (Read error: Connection reset by peer)
[01:06:00] <programmerq> yeah, if you're using 'docker stack deploy' with that compose file, you can put the tls cert/key into a swarm config and/or secret object.
[01:06:00] <blackwood821> Guess I shouldn't say stack
[01:07:28] *** Joins: Tach (~Tach@user/tach)
[01:07:34] <blackwood821> programmerq: Hmm, is swarm the only way to do this? I don't think one of our environments supports docker swarm
[01:07:39] <tabakhase> blackwood821 bindmount? - but the "each" in your "each nginx" has a smell...
[01:08:20] <blackwood821> tabakhase: "each" as in each of our customer systems will have 1 nginx container, not multiple nginx containers per system
[01:08:22] <programmerq> swarm is the only way to have config and secret objects. Otherwise, you'd need to put those files in place somehow on the docker host where the container is running. compose doesn't have a provision to copy files for you.
[01:08:25] <tabakhase> (and uually dockerland lets the servers get the ssl themself, be it certbotting or using traefik/caddy in place of nginx (cause nginx has a dns-problem that makes it not-so-dockerish anyhow)
[01:08:26] <blackwood821> And each customer will have a unique SSL cert
[01:09:25] <programmerq> if you copy the compose file to the remote system, and ssh and run 'docker-compose up -d' then you can take advantage of a bind mount. I have a few older containers that use certs that are stored somewhere under somewhere like /etc/ssl or similar.
[01:09:56] <tabakhase> bindmounts are kinda the poor-mans "docker secret" for the local dockerDaemon yea :P
[01:10:44] <blackwood821> Yea I was using bindmounts for the SSL cert and key when running Docker desktop which worked fine, but now I need to get it working for remote systems
[01:11:20] <blackwood821> I'll see if swarm is an option in this environment. Otherwise, sounds like I'll need to script uploading the cert to the remote volume that gets created
[01:11:28] <programmerq> blackwood821▸ are you going to ssh to the remote system and then run docker-compose there? or are you doing DOCKER_HOST=abcxyz docker-compose up -d
[01:11:37] <tabakhase> but by the smells that sounds like just putting ssl in the hands of containers entirely will give you more happytime in the end (assuming were just talking domainvalidated certs)
[01:11:52] <programmerq> if the latter, you'll need to copy the certs to the remote system. You can still do a bind mount, but you'll just need to specify the location where the cert is stored.
[01:12:26] <programmerq> but yes, there's also things like traefik that can try to get a letsencrypt certificate for you, for example.
[01:12:55] <programmerq> you could even put a custom entrypoint in your nginx container that runs certbot and tries to get the certificate
[01:12:57] <blackwood821> programmerq: using DOCKER_HOST=abcxyz docker-compose up -d
[01:13:07] <programmerq> that'll depend heavily on what those environments are and what cert requirements you have.
[01:14:07] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[01:14:26] <tabakhase> when sayn "websites for multiple customers" id imagine a agency that pushes out buncha wordpresses/landingpages - so you want "adding another" likely to be as neat as possible anyhow - "just slap some extra labels: on it" def beats out managing certificates and configfiles :D
[01:14:55] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:15:24] <programmerq> tabakhase▸ it sounds like each of this are individual containers on individual hosts that are owned by different entities
[01:15:31] <programmerq> so one traefik for all won't really help that much.
[01:16:28] <blackwood821> programmerq: yea I'm thinking I'll just copy the cert to the remote system (on the remote volume specified in the docker-compose file) right after running `docker-compose`
[01:16:42] <programmerq> blackwood821▸ another thing you could do is: docker volume create mycerts; docker create -v mycerts:/certs --name certcopy busybox; docker cp cert.pem key.pem certcopy:/certs/; docker rm certcopy
[01:17:00] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Client Quit)
[01:17:02] <blackwood821> We're currently not using letsencrypt but if we switch to that I definitely like the idea of having the entrypoint get the cert automatically
[01:17:09] <programmerq> basically, you create a named volume, create (but not start) a container, docker cp the files there, and then delete the container (but not the volume).
[01:17:12] <blackwood821> I'll check out traefik so I'm familiar with what it can do
[01:17:19] <programmerq> you still need to copy the certs, but you can do so with just the docker api
[01:17:27] <tabakhase> "customer systems" is indeed a question, were talking "there system" as in there stuff, or "there rootserver" (at what point it kinda becomes generic configmanagement)
[01:17:28] <programmerq> and it'll be in a volume named however you like
[01:17:37] <programmerq> and you can just refer to that volume in your compose file as an external valume.
[01:18:17] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[01:18:30] <programmerq> blackwood821▸ usually traefik is the one ingress point that handles routing to various containers based on hostnames or other criteria. it allows containers to be created and removed on the fly and the corresponding certificates can be generated as needed (via letsencrypt).
[01:18:55] <programmerq> it's overkill if you literally only need one nginx service running on a host in a fairly static configuration. it really shines when you want several services all coming through one ingress point.
[01:19:50] *** Quits: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de) (Ping timeout: 268 seconds)
[01:20:27] <blackwood821> Ah ok. Makes sense. Yea, sounds like overkill for this scenario. I'll consider that early volume creation approach. Will have to see if creating a temporary container each time is acceptable or not.
[01:20:36] <blackwood821> Thanks for the input guys
[01:21:01] <blackwood821> Actually, one more thought
[01:21:49] <blackwood821> Is it possible to pass the cert content as metadata to the container and then have the entrypoint grab that and write it to a file?
[01:22:11] <blackwood821> Or is that basically what you said swarm is needed for
[01:22:35] *** Quits: maret_ (~maret@nat-88-212-37-89.antik.sk) (Quit: maret_)
[01:23:10] <tabakhase> where do you expect it to "come from"? is that some CI pipeline doing the DOCKER_HOST=ssh... docker... - or "you on your notebook" or such?
[01:25:08] <tabakhase> cause sure you can stash it into env and write them out (and i think there is even a templating to put them "inline" in the config) (data:$variable >=1.15.10 it seems)
[01:27:27] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[01:28:20] <programmerq> yes, you could do an environment variable, but I wouldn't recommend putting any private key there at all.
[01:28:48] <rawtaz> so what else could bencc1 look at now that they established that the context switches are linear?
[01:28:56] <programmerq> container runtime has only a few options for populating: env, command/arguments/volumes/bind mounts
[01:34:20] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:36:01] <blackwood821> We have a default wildcard cert (eg. *.example.com) that we'll probably put in our source code repo that contains the docker-compose file and that by default each customer nginx instance will be configured for <customer>.example.com
[01:36:22] <blackwood821> and then if they have their own cert then we'll add in their cert after the fact
[01:36:29] <blackwood821> So I guess that falls under "you on your notebook"
[01:36:31] *** Quits: bouncy (~ben@user/benoit) (Ping timeout: 256 seconds)
[01:36:40] <tabakhase> horrific :D
[01:37:25] <blackwood821> tabakhase: which part?
[01:37:33] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[01:39:32] <tabakhase> production secrets outside of production + secrets in git in general (even a expired cert is still supposed to be kinda secret as you can use it to decode recorded traffic in edgecases) ((exceptions obvs. apply))
[01:40:15] <rawtaz> yeah you should not store sensitive info such as certs in the VCS
[01:40:51] <blackwood821> Ok valid points. We don't have it in there yet. Was just something I was considering. How about baking the default cert into our custom nginx image?
[01:41:16] <rawtaz> no, instead you should inject it into the container
[01:41:29] <tabakhase> and this isnt rly about "this doesnt need to be secure" either - but a "in 5 years someone gonna slap you when that audit finds that cert that every single dev has access to"
[01:41:32] <rawtaz> (which also has the benefit of being able to replace the cert easily)
[01:41:44] <rawtaz> yeah its just about doing the right thing :)
[01:42:26] <rawtaz> theres simply no reason to not do it right 
[01:43:18] <blackwood821> Ok then we'll consider our options for how best to inject it into the container based on our setup. Thanks for all the input.
[01:43:39] <tabakhase> id prob setup a 3liner ansible/puppet/chef and just let that take care of dasihng out files one can use as bindmounts in compose then - with for localdev just a selfsign that can be stuffed into git to make compose work on its own  ((and then use COMPOSE_FILE / -f to merge in a extra compose file with those binds for prod-deploy or so))
[01:44:45] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[01:44:55] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:45:08] <tabakhase> ideally it wouldnt be "you" that deploys, but your ci pipeline (what usually offers its own way to store secrets) -- but that may depend a bit on how you map "customers to code" (different projects vs same project multiple times deployed and so)
[01:45:36] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:47:48] <tabakhase> deploy master to 5 nodes VS deploay a.git to 1, b.git to 2, c.git.... VS branch-a to 1, branch-b to 2... or smth else entirely (as you for the very least may need to update that cert even if app never changes)
[01:47:53] <blackwood821> Hmm, we do use Jenkins minimally for some automated builds. I'll see if Jenkins secrets will fit into this.
[01:48:05] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[01:48:18] <blackwood821> In our case it's one project deployed to multiple nodes with different configurations
[01:48:54] <rawtaz> just dont overdo it :)
[01:49:08] <blackwood821> I didn't realize docker-compose could merge multiple files. That might come in handy
[01:49:16] <tabakhase> then that "list of nodes" likely has more config to it than just the cert hm? (hostname, dbdetails, who knows...) - so you need a kinda shimlayer anyhow
[01:49:51] <rawtaz> oh yeah. and theres also https://docs.docker.com/compose/compose-file/compose-file-v3/#extension-fields
[01:51:02] <blackwood821> rawtaz: Thanks. I was just going to ask next about how to feed in different .env files...
[01:51:08] *** Parts: kitzman (~kitzman@user/dekenevs) (C-x k)
[01:51:20] <tabakhase> (the merge stuff is SUPER handy, also "by default" it checks for a docker-compose.override.yml (that can be gitignored and is sweet to uickly hack in something) and you can store COMPOSE_FILE inside the ".env" file, so one can "configure his local stack" ("for local-dev, add the bindmount&db compose files" and such things)
[01:52:44] <tabakhase> different ".env"-file into compose is afaik a "you dont" 
[01:52:54] <rawtaz> blackwood821: i highly recommend noodling around in that link i gave you, there's a lot of good stuff to know about which files are used
[01:53:17] <rawtaz> well you *can* define to use multiple env_file:'s i think?
[01:53:38] <rawtaz> they're only for populating the environment in the contianer though, they dont go into the docker compose file evaluation
[01:54:08] <tabakhase> ^^ yepyep
[01:54:35] <blackwood821> Ok, I'll check out the extension fields and multiple compose files. Thanks!~
[01:54:43] <tabakhase> clostest you get to "different .env files" is likely spooking around with -P / COMPOSE_PROJECT_NAME
[01:55:24] <tabakhase> and that not gonna be nice...
[01:56:04] <tabakhase> (using project name itself is perfectly fine just to be clear)
[01:56:46] *** Joins: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de)
[01:58:18] <blackwood821> Ok, I'll check all this out. Thanks guys.
[01:58:46] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:59:31] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[02:01:35] <rawtaz> yw :)
[02:02:09] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[02:04:17] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[02:04:51] *** Quits: cognoscente (~cognoscen@75-164-195-169.ptld.qwest.net) (Ping timeout: 268 seconds)
[02:05:57] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 240 seconds)
[02:08:12] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[02:11:32] *** Quits: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03) (Read error: Connection reset by peer)
[02:11:52] *** Joins: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03)
[02:14:19] <bn_work> If one installs JRE/JDK in a base image/container (ex: alpine) do I need to give it special CAP_ADMIN_ privs?
[02:15:13] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[02:18:24] <tianon> bn_work: only if the application you want to run actually needs those (and I would really hope it doesn't)
[02:20:40] *** Joins: mz` (~mz`@user/mz/x-8532539)
[02:23:58] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[02:30:18] <bn_work> tianon: yeah, I agree, it's unclear to me what/when they are... all I do remember is when I installed the standalone CQLSH client in a different container, I did have to apply CAP_NET_ADMIN (IIRC).  For JRE, since it seems to be one of those "special" type of frameworks, I'm not sure
[02:31:08] <tianon> anytime you need CAP_NET_ADMIN, that's a red flag -- I've used cqlsh in containers a fair amount and never needed to give them CAP_NET_ADMIN 😬
[02:32:02] <tianon> https://manpages.debian.org/bullseye/manpages/capabilities.7.en.html#CAP_NET_ADMIN might be a helpful resource (it lists a number of privileged operations that are gated by that kernel cap)
[02:39:57] *** Quits: vidbina (~vid@dynamic-078-054-228-027.78.54.pool.telefonica.de) (Ping timeout: 240 seconds)
[02:40:46] *** Joins: mz` (~mz`@user/mz/x-8532539)
[02:42:32] *** Quits: rpthms (~rpthms@user/rpthms) (Remote host closed the connection)
[02:44:05] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[02:46:36] *** Joins: cognoscente (~cognoscen@75-164-195-169.ptld.qwest.net)
[03:00:03] *** Joins: Tach (~Tach@user/tach)
[03:01:19] *** Joins: mz` (~mz`@user/mz/x-8532539)
[03:04:35] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[03:05:56] <ash_worksi> tabakhase: is a node server a situation where you do not use alpine?
[03:06:41] <ash_worksi> (I was developing on alpine with node and I ran into issues installing things because of glibc stuff)
[03:06:52] <ash_worksi> (to which gcompat worked... until it didn't)
[03:07:16] <ash_worksi> I am ever so grateful you opened my eyes to that installer btw
[03:09:17] <rawtaz> which installer? gcompat?
[03:15:22] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[03:17:12] *** Joins: rpthms (~rpthms@user/rpthms)
[03:22:08] *** Joins: mz` (~mz`@user/mz/x-8532539)
[03:23:28] <tabakhase> i dont rly do much node so no clue there... - installer i guess you mean the docker-php-extension-installer thing? yea its fantastic, been using it pretty much since it existed and never had a single issue with it anywhere
[03:24:10] <rawtaz> oh
[03:24:19] <rawtaz> what was the url again?
[03:24:27] <rawtaz> or name
[03:25:27] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[03:25:53] *** Quits: tex (~super@user/dix) (Ping timeout: 256 seconds)
[03:25:57] *** Quits: rpthms (~rpthms@user/rpthms) (Remote host closed the connection)
[03:28:01] *** Joins: rpthms (~rpthms@user/rpthms)
[03:30:52] <ash_worksi> tabakhase: yes, I did mean that
[03:31:10] <tabakhase> rawtaz https://github.com/mlocati/docker-php-extension-installer
[03:31:59] <ash_worksi> does anyone have any experience with creating microservices with graphql? 
[03:32:52] <ash_worksi> actually, #nodejs
[03:37:28] *** Joins: mz` (~mz`@user/mz/x-8532539)
[03:37:47] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 256 seconds)
[03:40:50] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[03:42:20] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[03:44:09] *** Quits: DoofusCanadensis (~DoofusCan@207.229.38.10) (Quit: So as you can see from this flowchSQUIRREL!!)
[03:44:28] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[03:47:38] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:49:19] *** Quits: frittro (~frittro@user/frittro) (Remote host closed the connection)
[03:49:48] *** Joins: frittro (~frittro@user/frittro)
[03:52:09] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[03:52:36] *** Joins: mz` (~mz`@user/mz/x-8532539)
[03:56:01] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[04:04:28] <ash_worksi> to support multiple versions of an api, do you just run them in multiple containers? like `example-api:v1` and `example-api:v2` ?
[04:05:27] <rawtaz> isnt that a matter of the software providing those APIs?
[04:05:45] <rawtaz> if a container supports both versions, or not
[04:06:54] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[04:08:49] *** Quits: calm-steam (~calm-stea@2a02:810a:980:1400:5f98:3a66:b46d:598d) (Ping timeout: 268 seconds)
[04:12:02] *** Joins: mz` (~mz`@user/mz/x-8532539)
[04:13:57] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 240 seconds)
[04:15:24] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[04:30:17] *** Quits: ses (uid38151@id-38151.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:31:10] *** Quits: gedulis120 (~gedulis12@46.251.49.174) (Quit: Lost terminal)
[04:31:17] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 240 seconds)
[04:32:32] *** Joins: mz` (~mz`@user/mz/x-8532539)
[04:35:33] *** Joins: gedulis120 (~gedulis12@46.251.49.174)
[04:35:46] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[04:37:07] *** Quits: gedulis120 (~gedulis12@46.251.49.174) (Remote host closed the connection)
[04:41:26] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 260 seconds)
[04:46:52] *** Joins: sudomann (~sudomann@98.219.211.182)
[04:48:01] *** Quits: cognoscente (~cognoscen@75-164-195-169.ptld.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:51:51] *** Quits: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1) (Ping timeout: 250 seconds)
[04:54:25] *** Joins: mz` (~mz`@user/mz/x-8532539)
[04:55:32] *** Joins: Forsaken87 (~quassel@aftr-37-201-195-107.unity-media.net)
[04:55:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[04:57:51] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[04:58:11] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:11:32] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[05:13:29] *** Joins: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-16-206-172-248-162.dsl.bell.ca)
[05:14:02] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:14:07] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 256 seconds)
[05:14:23] *** Quits: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-16-206-172-248-162.dsl.bell.ca) (Client Quit)
[05:15:23] *** Joins: mz` (~mz`@user/mz/x-8532539)
[05:15:53] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[05:18:31] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[05:19:43] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[05:27:07] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[05:28:31] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:32:59] *** Joins: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-16-206-172-248-162.dsl.bell.ca)
[05:35:39] *** Joins: mz` (~mz`@user/mz/x-8532539)
[05:37:00] *** Quits: Jimmy_H (~Jimmy_H@119.136.154.158) (Ping timeout: 268 seconds)
[05:37:55] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[05:38:42] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[05:46:59] *** Quits: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-16-206-172-248-162.dsl.bell.ca) (Quit: WeeChat 3.3)
[05:48:15] *** Joins: catbehemoth (~vasyl@206.172.248.162)
[05:49:47] *** Joins: sudomann (~sudomann@98.219.211.182)
[05:50:31] *** Joins: mz` (~mz`@user/mz/x-8532539)
[05:51:19] *** Joins: DoofusCanadensis (~DoofusCan@S01061056117e7f56.cg.shawcable.net)
[05:53:42] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[05:53:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[05:54:20] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[05:57:17] *** Quits: rardiol (~quassel@user/rardiol) (Ping timeout: 240 seconds)
[05:59:42] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[06:08:54] *** Quits: DefiantN (~DefiantN@user/defiantn) (Quit: Leaving)
[06:10:21] *** Joins: mz` (~mz`@user/mz/x-8532539)
[06:13:27] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[06:22:48] *** Joins: mz` (~mz`@user/mz/x-8532539)
[06:25:57] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[06:27:01] *** Quits: zoredache (sid295808@id-295808.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[06:28:31] *** Joins: zoredache (sid295808@id-295808.helmsley.irccloud.com)
[06:36:09] *** Joins: mz` (~mz`@user/mz/x-8532539)
[06:39:21] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[06:40:56] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:49:39] *** Joins: mz` (~mz`@user/mz/x-8532539)
[06:51:14] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[06:52:59] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[06:55:32] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[06:57:05] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[07:00:49] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Quit: Leaving)
[07:01:50] *** Joins: mz` (~mz`@user/mz/x-8532539)
[07:04:56] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[07:12:28] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:20:41] *** Joins: mz` (~mz`@user/mz/x-8532539)
[07:23:46] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[07:31:47] *** Joins: mz` (~mz`@user/mz/x-8532539)
[07:34:59] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[07:44:12] *** Joins: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net)
[07:45:01] *** Joins: mz` (~mz`@user/mz/x-8532539)
[07:48:13] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[07:58:16] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:00:09] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 256 seconds)
[08:01:26] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[08:02:06] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[08:16:45] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:19:56] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[08:30:23] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:33:23] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[08:41:53] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:45:01] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[08:51:00] *** Joins: sudomann (~sudomann@98.219.211.182)
[08:51:50] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:54:57] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[08:54:59] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[09:03:06] *** Parts: pagios (~pagios@life.is-a.beauty) (Leaving...)
[09:05:11] *** Joins: mz` (~mz`@user/mz/x-8532539)
[09:08:10] *** Joins: jgrim6669 (~jgrim@d60-65-99-197.col.wideopenwest.com)
[09:08:23] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[09:18:30] *** Quits: jgrim6669 (~jgrim@d60-65-99-197.col.wideopenwest.com) (Quit: Ping timeout (120 seconds))
[09:18:50] *** Joins: jgrim6669 (~jgrim@d60-65-99-197.col.wideopenwest.com)
[09:28:10] *** Joins: Atque (~Atque@user/atque)
[09:28:23] *** Joins: mz` (~mz`@user/mz/x-8532539)
[09:31:38] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[09:36:42] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[09:41:31] *** Quits: DoofusCanadensis (~DoofusCan@S01061056117e7f56.cg.shawcable.net) (Quit: So as you can see from this flowchSQUIRREL!!)
[09:41:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[09:44:40] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[09:55:22] *** Joins: mz` (~mz`@user/mz/x-8532539)
[09:57:21] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:58:30] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[10:05:32] *** Joins: mz` (~mz`@user/mz/x-8532539)
[10:06:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:08:37] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[10:08:59] *** Joins: tex (~super@user/dix)
[10:09:05] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:18:25] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 256 seconds)
[10:20:21] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:23:06] *** Quits: andycooper (uid246432@id-246432.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:26:45] *** Joins: mz` (~mz`@user/mz/x-8532539)
[10:29:26] *** Quits: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com) (Quit: leaving)
[10:29:56] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[10:38:41] *** Joins: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com)
[10:40:37] *** Joins: mz` (~mz`@user/mz/x-8532539)
[10:40:43] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[10:43:46] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[10:49:35] *** Quits: effprime (~effprime@user/effprime) (Ping timeout: 256 seconds)
[10:52:09] *** Joins: effprime (~effprime@user/effprime)
[10:53:44] *** Joins: mz` (~mz`@user/mz/x-8532539)
[10:56:56] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[11:00:23] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[11:03:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:03:57] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 240 seconds)
[11:06:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:19:25] *** Joins: mz` (~mz`@user/mz/x-8532539)
[11:19:41] *** Joins: RV06 (~RV@92.173.180.89)
[11:22:29] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[11:25:40] *** Joins: ksynwa (~ksynwa@5.45.111.57)
[11:26:56] <ksynwa> Can take a look at this dockerfile? To me, it looks like . is being copied to python:3-slim and then just copied again to the distroless image. Can someone tell me if I am reading it wrong?
[11:26:57] <ksynwa> https://github.com/GoogleContainerTools/distroless/blob/main/examples/python3/Dockerfile
[11:27:26] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:37:21] *** Joins: mz` (~mz`@user/mz/x-8532539)
[11:40:33] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[11:43:17] *** Quits: thiras_ (~thiras@user/thiras) (Ping timeout: 240 seconds)
[11:45:11] *** Joins: thiras_ (~thiras@user/thiras)
[11:45:37] <geirha> ksynwa: that's right. So the build-env stage is rather pointless there. It's probably based off a boilerplate dockerfile, and the build-env will likely have something more useful to do in more advanced examples
[11:51:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[11:54:13] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[11:54:23] *** Joins: Jimmy_H (~Jimmy_H@119.136.154.145)
[11:54:23] *** Quits: Jimmy_H (~Jimmy_H@119.136.154.145) (Client Quit)
[12:06:36] *** Quits: thiras_ (~thiras@user/thiras) (Ping timeout: 240 seconds)
[12:06:42] *** Joins: mz` (~mz`@user/mz/x-8532539)
[12:09:46] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[12:13:17] *** Joins: OPK (~OPK@user/opk)
[12:15:35] *** Joins: AnapodoPsalidaki (~AnapodoPs@2a02:587:291b:fbb7:154c:e359:dc9c:a28a)
[12:17:51] *** Joins: mz` (~mz`@user/mz/x-8532539)
[12:21:03] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[12:21:14] *** Joins: AnapodoPsalidi (~AnapodoPs@195.46.31.29)
[12:23:57] *** Joins: Deknos (~someone@user/menace)
[12:24:00] *** Quits: AnapodoPsalidaki (~AnapodoPs@2a02:587:291b:fbb7:154c:e359:dc9c:a28a) (Ping timeout: 268 seconds)
[12:32:37] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[12:38:14] *** Joins: vidbina (~vid@dynamic-077-191-121-138.77.191.pool.telefonica.de)
[12:42:06] *** Joins: mz` (~mz`@user/mz/x-8532539)
[12:44:59] <zitter> hi, is it possibile that evnironment vars are not visibile inside containers? I'm passing them using - MY_ENV_VAR=myVar but if I do a printenv inside container's console I see MY_ENV_VAR empty. Where can I investigate?
[12:45:12] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[12:49:14] *** Joins: jazzy (~jaziz@user/jaziz)
[12:57:44] *** Joins: mz` (~mz`@user/mz/x-8532539)
[12:58:16] *** Quits: iomari891 (~iomari891@197.210.53.158) (Ping timeout: 245 seconds)
[12:59:33] *** Joins: iomari891 (~iomari891@197.210.52.72)
[13:00:53] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[13:02:19] *** Joins: Tach (~Tach@user/tach)
[13:06:09] *** Quits: iomari891 (~iomari891@197.210.52.72) (Ping timeout: 256 seconds)
[13:06:48] *** Joins: iomari891 (~iomari891@197.210.52.72)
[13:06:51] *** Bitflux is now known as Byteflux
[13:07:49] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:14:37] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:15:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:18:10] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[13:18:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[13:19:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:23:40] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[13:25:24] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:25:25] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[13:26:23] *** Joins: AsenMx (~AsenMx@user/asenmx)
[13:28:04] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:28:16] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:31:14] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[13:40:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[13:44:24] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:47:40] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[13:50:56] *** Quits: jonifen_ (~jonifen@user/jonifen) (Ping timeout: 268 seconds)
[13:56:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:57:24] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[13:57:43] *** Joins: mz` (~mz`@user/mz/x-8532539)
[14:00:52] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:05:47] *** Joins: rardiol (~quassel@user/rardiol)
[14:07:56] *** Joins: GoldLeader87 (~GoldLeade@sk.connected.by.freedominter.net)
[14:16:16] *** Joins: mz` (~mz`@user/mz/x-8532539)
[14:19:05] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:25:49] *** Joins: lithium (~lithium@user/lithium)
[14:27:14] *** Joins: mz` (~mz`@user/mz/x-8532539)
[14:27:39] *** Joins: minimal (~minimal@user/minimal)
[14:30:32] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:35:14] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[14:37:57] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[14:41:20] *** Joins: mz` (~mz`@user/mz/x-8532539)
[14:44:20] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:52:18] *** Joins: calm-steam (~calm-stea@2a02:810a:980:1400::9282)
[14:56:02] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 240 seconds)
[15:02:39] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:05:38] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:14:41] <s17> which user did you try inside the container
[15:15:18] *** ajfriesen7 is now known as ajfriesen
[15:19:18] <geirha> zitter: as a simple test:  docker run --rm -e MY_VAR=foo ubuntu printenv   prints MY_VAR=foo as expected
[15:19:40] <zitter> geirha, yes thank you. I've solved, it was my mistake 
[15:19:58] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:23:11] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:27:45] *** Quits: iomari891 (~iomari891@197.210.52.72) (Ping timeout: 268 seconds)
[15:29:01] *** Joins: iomari891 (~iomari891@197.210.77.160)
[15:30:07] *** Quits: calm-steam (~calm-stea@2a02:810a:980:1400::9282) (Quit: Leaving)
[15:30:26] *** Joins: calm-steam (~calm-stea@2a02:810a:980:1400::9282)
[15:37:58] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:41:11] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:50:49] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:52:25] *** Quits: Tach (~Tach@user/tach) (Ping timeout: 268 seconds)
[15:54:04] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:58:26] *** Joins: denningsrogue9 (~denningsr@98.97.131.238)
[15:58:42] *** Joins: bouncy (~ben@user/benoit)
[15:58:59] *** Quits: denningsrogue (~denningsr@98.97.131.238) (Ping timeout: 256 seconds)
[15:59:05] *** denningsrogue9 is now known as denningsrogue
[16:01:51] *** Joins: mz` (~mz`@user/mz/x-8532539)
[16:03:32] *** Quits: iomari891 (~iomari891@197.210.77.160) (Ping timeout: 240 seconds)
[16:04:08] *** Quits: GoldLeader87 (~GoldLeade@sk.connected.by.freedominter.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:04:53] *** Joins: GoldLeader87 (~GoldLeade@sk.connected.by.freedominter.net)
[16:05:05] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[16:05:09] *** Joins: iomari891 (~iomari891@197.210.77.17)
[16:06:13] *** Joins: null23 (~null23@h-37-123-160-123.A251.priv.bahnhof.se)
[16:10:15] *** jazzy is now known as test
[16:10:45] *** test is now known as Guest985
[16:10:56] <null23> hm..... i think each time i restart my docker container... the CSS file is overwritten in the webpage in that container... i need to check if this is the case but if i do like to run commands after website is up and running.. using docker.. any example? 
[16:11:08] *** Guest985 is now known as StNicksrv
[16:12:00] <rawtaz> null23: how/where is that file stored? in the container i suppose, and not in a bind mount or persisted volume?
[16:12:37] <null23> rawtaz: in a bind mount for now
[16:13:42] <rawtaz> so what makes you say that the file is overwritten? have you inspected the file contents on the host and noticed that if you make edits to it while the container is running, and hten restart the container, then the file in the host is reverted when the container restarts?
[16:14:32] *** Quits: vidbina (~vid@dynamic-077-191-121-138.77.191.pool.telefonica.de) (Ping timeout: 240 seconds)
[16:17:30] *** StNicksrv is now known as JingleJazzy
[16:20:12] *** Quits: denningsrogue (~denningsr@98.97.131.238) (Read error: Connection reset by peer)
[16:21:05] *** Joins: denningsrogue (~denningsr@98.97.131.238)
[16:21:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[16:24:54] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[16:28:38] *** Quits: calm-steam (~calm-stea@2a02:810a:980:1400::9282) (Changing host)
[16:28:38] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[16:29:52] *** Quits: JingleJazzy (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[16:32:23] *** Joins: sudomann (~sudomann@98.219.211.182)
[16:33:19] *** Joins: mz` (~mz`@user/mz/x-8532539)
[16:35:57] *** Quits: denningsrogue (~denningsr@98.97.131.238) (Ping timeout: 240 seconds)
[16:36:34] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[16:36:37] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[16:43:52] *** Quits: GoldLeader87 (~GoldLeade@sk.connected.by.freedominter.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:47:32] *** Joins: mz` (~mz`@user/mz/x-8532539)
[16:48:22] *** Joins: denningsrogue (~denningsr@98.97.131.238)
[16:49:53] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[16:50:51] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[16:51:18] <null23> thats what i think... but i need to make a test to try this.. 
[16:52:17] *** Joins: swp1 (~Thunderbi@37.203.60.116)
[16:53:09] <swp1> Hello! What happens when I don't specify the `--dns` for the Docker daemon? I can't find this in the documentation.
[16:59:30] *** Joins: mz` (~mz`@user/mz/x-8532539)
[17:01:33] <GyrosGeier> hm
[17:01:51] <GyrosGeier> is there a way to move a container including its volumes to another host quickly?
[17:02:25] <GyrosGeier> (one of the hosts is not powered on 24/7, so I don't quite trust the swarm to do the right thing)
[17:02:45] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[17:05:04] <rawtaz> null23: please do. it's probably something simple. if you are bind mounting that file from the host into the container and the container resets it, then its presumably some initialization script in there that does it.
[17:06:41] <rawtaz> swp1: see https://docs.docker.com/config/containers/container-networking/#dns-services 
[17:12:02] *** Joins: dob1_ (~dob1@user/dob1)
[17:12:13] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 240 seconds)
[17:13:50] *** Joins: mz` (~mz`@user/mz/x-8532539)
[17:14:44] *** Joins: ses (uid38151@id-38151.hampstead.irccloud.com)
[17:15:53] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[17:16:58] *** Quits: dob1_ (~dob1@user/dob1) (Ping timeout: 260 seconds)
[17:17:03] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[17:21:02] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 252 seconds)
[17:37:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[17:39:25] *** Joins: mz` (~mz`@user/mz/x-8532539)
[17:42:41] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[17:49:47] *** Joins: vidbina (~vid@2a02:3032:1:568f:80d6:a5e0:d099:f634)
[17:53:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[17:56:49] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[18:00:41] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[18:00:46] <ada_> swp1: docker uses whatever is in your /etc/resolv.conf file as your "upstream" nameserver
[18:01:02] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[18:01:27] <ada_> swp1: by *not* setting the --dns flag, you're *not* adding additional upstream nameservers to your daemon's config
[18:01:38] *** Joins: pgloor (~petergloo@mix.cubus.space)
[18:02:02] <ada_> GyrosGeier: there's no way built into docker to move volumes, unless the volume driver you're using supports moveable volumes
[18:02:25] <ada_> GyrosGeier: standard named volumes using the local volume driver are not moveable by docker.  rsync the contents to the new server, start up the same containers
[18:05:18] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:06:30] *** Joins: mz` (~mz`@user/mz/x-8532539)
[18:08:09] <null23> rawtaz: made some changes in css within the website-container and everything looks ok.. but now to the test.. when i try to find the css file using root on docker host to veryfy time-stamps before restart the container... i cannot find css file within the /data/ folder. When i compare to wordpress installation its diffrent (what i try to achive works on wordpress docker container but not this web-application) 
[18:08:52] <null23> perhaps every restart its unpacked and redeployed to prevent changes? Is that usual these days? :S
[18:09:34] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[18:10:37] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[18:11:07] <null23> here goes nothing, im just restarting and see whats happens :D
[18:14:14] <null23> ok. the restart didnt change the .css file... then it might be everytime i redeploy the container.. well then i need to fix docker-compose file to include my fixes :)
[18:17:38] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:21:28] *** Joins: mz` (~mz`@user/mz/x-8532539)
[18:24:38] *** Joins: thiras_ (~thiras@user/thiras)
[18:24:39] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[18:29:09] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[18:30:03] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:32:46] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:33:14] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[18:35:14] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[18:35:50] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:39:28] *** Joins: mz` (~mz`@user/mz/x-8532539)
[18:40:30] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 260 seconds)
[18:41:33] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:42:38] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[18:46:09] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[18:47:20] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:47:56] *** Joins: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28)
[18:49:36] <jim87> Hello! I need to let a container enter a VPN, which requires administrative privileges (within the container itself). As I don't want to run the container as root, I was wondering if it would be possible to setup the image so that it is run as an unprivileged user, but allowing it to use sudo... is it possible?
[18:52:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[18:52:10] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 260 seconds)
[18:53:05] *** Joins: sudomann (~sudomann@98.219.211.182)
[18:55:26] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[18:56:36] <programmerq> jim87▸ a container that runs as uid0 has tons of capabilities dropped already. stuff like iptables fails becaues it isn't true root, for example. If you do --privileged, then that container really is root and has CAP_NET_ADMIN and CAP_SUPERUSER, etc...
[18:56:55] <programmerq> it's not unheard of to have a vpn specific container that has net_admin added in, and runs as uid0
[18:57:04] <programmerq> and then another container tries to connect through that.
[18:57:08] <programmerq> but it's not a great pattern.
[18:58:59] *** Joins: andycooper (uid246432@id-246432.helmsley.irccloud.com)
[19:00:30] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 268 seconds)
[19:02:40] *** Joins: imakestuff (~imakestuf@196.190.154.216)
[19:04:02] <swp1> ada_: Thanks!
[19:04:04] <imakestuff> if i run two containers from images that are "FROM" two different linux distros.. am i basically running two instances of Linux?
[19:07:19] *** Joins: mz` (~mz`@user/mz/x-8532539)
[19:07:33] <programmerq> you're running two processes that have a different isolated userspace, but your whole linux host with it's already running kernel is the only instance of the linux kernel.
[19:10:16] <imakestuff> programmerq: when a dockerfile starts with "FROM debian:jessie" what is it basically including?
[19:10:29] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[19:10:43] <jim87> programmerq: in a PoC I run a container as root and I was able to connect to a VPN (notice: the VPN was available only within the container itself)
[19:10:45] <programmerq> a filesystem that has a minimal debian jessie userspace-- no kernel, no bios, no boot proces.
[19:11:10] <jim87> what I want to achieve is to be able to enter a vpn within the container and then interact with peers within the VPN itself
[19:11:31] <jim87> though I don't want to run whatever I want to run as root by default
[19:11:46] <tabakhase> imakestuff "the os" is only in there so you can abuse apt/yum/apk and there like - its all just dead files
[19:12:06] <jim87> I was thinking about adding the service user to the sudoers list and allow it to execute a single command as root without prompting for password (and only that command)
[19:14:02] <imakestuff> tabakhase: dead files? 
[19:14:32] <imakestuff> tabakhase: i think you mean the base images just get you the utils like package manager etc... 
[19:14:40] *** Joins: rsx (~dummy@ppp-188-174-153-69.dynamic.mnet-online.de)
[19:15:08] <tabakhase> imakestuff pretty much yea
[19:16:27] *** Joins: DoofusCanadensis (~DoofusCan@2604:3d09:47c:f970:20db:b085:d190:79ae)
[19:16:40] <tabakhase> key is that none of the OS in there is actually "running" - all it "costs" is a few MB on the disk
[19:18:59] <imakestuff> tabakhase: got you.. you're just getting the utils from the distros 
[19:19:17] <imakestuff> what is a very lightweight base image that has apt? 
[19:19:37] <tabakhase> debian:*-slim variants likely
[19:19:43] *** Joins: Administrator__ (~Administr@119.136.154.145)
[19:20:00] *** Quits: Administrator__ (~Administr@119.136.154.145) (Client Quit)
[19:20:10] <tabakhase> but for "quick tooling containers" looking into alpine (and apk) can be worth it, the base is a loot smaller
[19:21:46] <tabakhase> like, for deployment noone cares when once a month you need to pull a new 300mb baselayer - but in a ci-pipeline 2 vs 12 seconds can make quite a difference on 10 jobs when the runners are virgin ;-)
[19:21:46] *** Quits: pgloor (~petergloo@mix.cubus.space) (Read error: Connection reset by peer)
[19:22:39] <imakestuff> tabakhase: totally makes sense.. looking into alpine now 
[19:22:49] <blackwood821> Does `docker cp` work in both directions when the container is stopped?
[19:22:59] <programmerq> blackwood821: yes.
[19:23:07] <blackwood821> programmerq: thanks
[19:23:49] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:25:15] *** Joins: Jimmy_H (~Jimmy_H@119.136.154.145)
[19:25:17] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Ping timeout: 240 seconds)
[19:25:50] *** Quits: Jimmy_H (~Jimmy_H@119.136.154.145) (Max SendQ exceeded)
[19:29:20] *** Joins: mz` (~mz`@user/mz/x-8532539)
[19:30:22] *** Quits: RV06 (~RV@92.173.180.89) (Quit: Leaving)
[19:31:02] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[19:31:38] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:32:53] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[19:34:08] *** Quits: pgloor (~petergloo@mix.cubus.space) (Client Quit)
[19:34:18] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:38:36] *** Quits: phylaz (~phylaz@80.203.89.4) (Quit: The Lounge - https://thelounge.chat)
[19:42:59] *** Joins: phylaz (~phylaz@80.203.89.4)
[19:44:25] *** Quits: imakestuff (~imakestuf@196.190.154.216) (Remote host closed the connection)
[19:47:39] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:47:40] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[19:47:50] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:48:00] *** Quits: pgloor (~petergloo@mix.cubus.space) (Client Quit)
[19:49:30] *** Joins: pgloor (~petergloo@mix.cubus.space)
[19:50:09] *** Joins: mz` (~mz`@user/mz/x-8532539)
[19:52:26] *** Joins: lilgopher (~textual@2601:241:8000:38f0:8d58:daf:1eca:e9ec)
[19:53:16] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[19:58:44] *** Quits: swp1 (~Thunderbi@37.203.60.116) (Quit: swp1)
[20:00:06] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[20:05:01] *** Joins: mz` (~mz`@user/mz/x-8532539)
[20:06:42] <statusbot4> Status update: User password can't be changed on Docker Hub. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bcbc9991f9bd053f0c01f9
[20:08:18] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[20:12:02] *** Quits: rsx (~dummy@ppp-188-174-153-69.dynamic.mnet-online.de) (Quit: rsx)
[20:12:40] <statusbot4> Status update: We are investigating authentication issue with Docker Automated builds. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bcbdff3ce760053880e84e
[20:15:20] <statusbot4> Status update: We identified the issue and are working on deploying a fix. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bcbc9991f9bd053f0c01f9
[20:15:39] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[20:20:54] *** Joins: mz` (~mz`@user/mz/x-8532539)
[20:23:57] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[20:25:09] *** Joins: TomyWork (~TomyLobo@p200300e80f0067007d4b96ec9f81334a.dip0.t-ipconnect.de)
[20:32:57] *** Joins: sudomann (~sudomann@98.219.211.182)
[20:36:34] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Read error: Connection reset by peer)
[20:38:13] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[20:43:44] *** Joins: mz` (~mz`@user/mz/x-8532539)
[20:47:02] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[20:47:11] <statusbot4> Status update: We deployed a fix and are currently monitoring. Passwords can now be changed. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bcbc9991f9bd053f0c01f9
[20:52:20] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:55:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[20:56:18] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[20:57:02] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 240 seconds)
[20:58:39] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[21:06:54] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[21:14:00] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:19:37] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[21:22:18] *** Joins: mz` (~mz`@user/mz/x-8532539)
[21:23:55] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[21:25:05] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[21:25:20] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[21:28:57] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[21:32:29] *** Joins: jgrim66698 (~jgrim@172.58.196.185)
[21:34:53] <statusbot4> Status update: Resolved. Account password can be changed. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bcbc9991f9bd053f0c01f9
[21:35:57] *** Quits: jgrim6669 (~jgrim@d60-65-99-197.col.wideopenwest.com) (Ping timeout: 240 seconds)
[21:36:48] <blackwood821> Can a bind mount be adding to an existing container?
[21:36:54] <blackwood821> added*
[21:38:02] *** Joins: jgrim6669 (~jgrim@d60-65-99-197.col.wideopenwest.com)
[21:39:56] *** Quits: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith) (Quit: .)
[21:39:57] *** Quits: jgrim66698 (~jgrim@172.58.196.185) (Ping timeout: 240 seconds)
[21:42:40] *** Joins: mz` (~mz`@user/mz/x-8532539)
[21:45:01] <statusbot4> Status update: We identified the issue and working on a fix. New Docker Automated configurations can't be created. Existed ones can still run their automated builds. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bcbdff3ce760053880e84e
[21:45:41] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[21:45:44] *** Joins: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith)
[21:53:53] *** Quits: TomyWork (~TomyLobo@p200300e80f0067007d4b96ec9f81334a.dip0.t-ipconnect.de) (Quit: Leaving)
[21:56:37] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Read error: Connection reset by peer)
[21:57:11] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[22:00:40] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:01:19] *** Joins: dob1 (~dob1@user/dob1)
[22:03:52] *** Joins: mz` (~mz`@user/mz/x-8532539)
[22:06:48] <programmerq> blackwood821▸ no. you need to recreate the container. If you're using a tool like compose, this is pretty trivial.
[22:06:59] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[22:07:57] <blackwood821> programmerq: ok thanks
[22:09:19] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[22:10:09] *** Quits: iomari891 (~iomari891@197.210.77.17) (Ping timeout: 256 seconds)
[22:11:02] *** Joins: iomari891 (~iomari891@197.210.77.160)
[22:13:45] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Remote host closed the connection)
[22:14:03] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[22:14:33] *** Joins: mz` (~mz`@user/mz/x-8532539)
[22:16:23] *** Quits: iomari891 (~iomari891@197.210.77.160) (Ping timeout: 252 seconds)
[22:17:19] *** Quits: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith) (Quit: .)
[22:17:29] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[22:19:01] *** Joins: iomari891 (~iomari891@197.210.53.158)
[22:24:39] *** Joins: mz` (~mz`@user/mz/x-8532539)
[22:25:31] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:26:18] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[22:27:20] *** Joins: kapil (~kapil@o-k.website)
[22:27:44] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[22:30:37] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Ping timeout: 240 seconds)
[22:35:57] *** Quits: vidbina (~vid@2a02:3032:1:568f:80d6:a5e0:d099:f634) (Ping timeout: 240 seconds)
[22:36:07] *** Joins: artok (~azo@mobile-access-b0481d-183.dhcp.inet.fi)
[22:40:27] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:40:41] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Quit: maret)
[22:44:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[22:45:54] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[22:47:30] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[22:50:40] *** Joins: GailWynand (~GailWynan@195.216.219.1)
[22:52:35] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[22:57:00] *** Joins: mz` (~mz`@user/mz/x-8532539)
[22:58:42] *** Joins: yaalon (~yaalon@2806:2f0:50c0:6c8:10de:c371:b7b8:bf56)
[23:00:06] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[23:04:32] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:01] *** Quits: sehrope_ (~sehrope@23-24-81-162-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[23:08:17] *** Joins: mz` (~mz`@user/mz/x-8532539)
[23:11:24] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[23:16:06] *** Joins: maret (~maret@196.245.151.53)
[23:17:52] <statusbot4> Status update: Scanning is online and backlogged scans have been processed. -- https://status.docker.com/pages/incident/533c6539221ae15e3f000031/61bb421c9604e60540fd1321
[23:18:01] *** Joins: sudomann (~sudomann@98.219.211.182)
[23:18:55] *** Joins: mz` (~mz`@user/mz/x-8532539)
[23:22:05] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[23:22:30] *** Quits: maret (~maret@196.245.151.53) (Quit: maret)
[23:22:41] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[23:24:09] *** Joins: maret (~maret@196.245.151.53)
[23:27:33] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[23:34:20] *** Joins: Sabinno (~Sabinno@173-160-72-180-atlanta.hfc.comcastbusiness.net)
[23:36:21] *** Quits: yaalon (~yaalon@2806:2f0:50c0:6c8:10de:c371:b7b8:bf56) ()
[23:37:43] *** Quits: minimal (~minimal@user/minimal) (Quit: Leaving)
[23:38:09] <Sabinno> If I want to create a database container (or series of containers) on a *single* machine that is redundant to enable 100% uptime (save for physical reboots) during updates or other maintenance, how can I accomplish this?
[23:38:24] <Sabinno> Swarm does not appear to support single-host configurations.
[23:39:40] *** Quits: maret (~maret@196.245.151.53) (Quit: maret)
[23:39:41] *** Joins: mz` (~mz`@user/mz/x-8532539)
[23:42:59] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[23:49:49] *** Quits: lithium (~lithium@user/lithium) (Quit: Textual IRC Client: www.textualapp.com)
[23:53:17] *** Quits: Sabinno (~Sabinno@173-160-72-180-atlanta.hfc.comcastbusiness.net) (Quit: Client closed)
[23:53:43] *** Joins: mz` (~mz`@user/mz/x-8532539)
[23:55:04] *** Joins: raktajino (~raktajino@143.244.180.209)
[23:56:58] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[23:57:03] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[23:59:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
