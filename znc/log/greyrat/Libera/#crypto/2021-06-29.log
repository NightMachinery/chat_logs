[00:00:01] <MacGyver> I'd assume so, yes.
[00:00:04] <brcolow> Lines 670 to 677 of sha256.cpp write 32 * 8 bytes
[00:00:25] <brcolow> Er, no
[00:00:28] <brcolow> sorry. 32 bits 8 times.
[00:00:58] <jarthur_> Right, so 256 bits/32 bytes
[00:01:01] *** jarthur_ is now known as jarthur
[00:01:29] <brcolow> Aye.
[00:07:43] <jarthur> brcolow one thing to be aware of is many of the Bitcoin Core implementations are specially designed to deliver a double-digested result (in case you weren't already aware)
[00:09:06] <brcolow> Yeah I noticed that.
[00:09:32] <brcolow> Quick question.. on this line https://github.com/bitcoin/bitcoin/blob/7fcf53f7b4524572d1d0c9a5fdc388e87eb02416/src/crypto/sha256_avx2.cpp#L63 isn't the out + 32 + offset meaning move fowards 32 + offset BYTES, not bits?
[00:09:55] <brcolow> In which case out would be 256 bytes....not bits
[00:12:32] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[00:13:13] <brcolow> I may be confusing myself
[00:13:48] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[00:15:10] <brcolow> Which leads me back to my original issuse -- we end up with 256 bytes doing the 8way transform (32 bytes * 8) - then need to go "back" to 32 bytes for the final hash
[00:15:22] <brcolow> It must use some type of interleave or something...like select every N bytes
[00:17:43] <brcolow> I think I need to study https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwi9zqeOjLvxAhXB3J4KHY93CtUQFjAAegQIChAD&url=https%3A%2F%2Fwww.intel.com%2Fcontent%2Fdam%2Fwww%2Fpublic%2Fus%2Fen%2Fdocuments%2Fwhite-papers%2Fcommunications-ia-multi-buffer-paper.pdf&usg=AOvVaw3buUrNoiKmVEDh2qyEpgSG
[00:17:48] <brcolow> whoops, sorry for google link!
[00:18:03] <brcolow> https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/communications-ia-multi-buffer-paper.pdf
[00:21:14] <MacGyver> That does look rather odd, yes, but it looks like it's computing 8 hashes vectorized.
[00:21:49] <MacGyver> The result after those 8 calls to Write8 is 8 hashes back-to-back in out.
[00:22:27] <brcolow> Oh...right.....
[00:22:31] <MacGyver> Which is a pretty common technique to apply vectorization.
[00:22:50] <MacGyver> Can't vectorize the internals? Just process multiple inputs side-by-side.
[00:24:32] <brcolow> Thank you.
[00:27:12] *** Quits: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:32:07] *** Joins: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:35:42] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[00:45:48] *** Quits: cehteh (~ct@i59F72C79.versanet.de) (Ping timeout: 272 seconds)
[00:46:00] *** Joins: cehteh (~ct@i6DFA8E2C.versanet.de)
[00:52:41] *** Joins: riv (~river@tilde.team/user/river)
[00:54:33] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Quit: The Lounge - https://thelounge.chat)
[00:59:12] *** Joins: aleck (~aleck@user/aleck)
[01:06:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:10:21] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[01:11:19] *** Quits: instantp10neer (~instantp1@user/instantp10neer) (Read error: Connection reset by peer)
[01:11:59] *** Joins: instantp10neer (~instantp1@user/instantp10neer)
[01:16:50] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 272 seconds)
[01:24:27] *** Joins: aleck (~aleck@user/aleck)
[01:24:32] *** Joins: sleym (~sleym@23.81.181.4)
[01:25:56] *** Joins: mouseghost (~draco@user/mouseghost)
[01:26:34] <frostblade> `/close
[01:26:36] *** Parts: frostblade (onelegend@user/frostblade) (WeeChat 3.2)
[01:30:57] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[01:34:19] *** Quits: sleym (~sleym@23.81.181.4) (Quit: sleym)
[01:37:06] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 272 seconds)
[01:47:02] *** Joins: lithiumpt (~lithiumpt@217.138.203.173)
[01:48:27] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[02:01:23] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:01:54] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:ac06:25a4:7233:bcc6) (Remote host closed the connection)
[02:14:51] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 258 seconds)
[02:29:19] *** Quits: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:30:41] *** Joins: Henry151 (~bishop@user/henry151)
[03:01:19] *** softpaw is now known as harmonik
[03:02:21] *** harmonik is now known as softpaw
[03:05:14] *** Quits: ses (uid38151@id-38151.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:11:20] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.1)
[03:17:44] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[03:18:16] *** Joins: kulak (~kulak@user/kulak)
[03:24:46] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[03:27:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[03:31:15] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[03:32:04] *** Joins: kulak (~kulak@user/kulak)
[03:32:04] *** Quits: CryptoClub (~fafs@62.174.195.52.static.user.ono.com) (Read error: Connection reset by peer)
[03:33:26] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[03:33:34] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:34:19] *** Joins: kulak (~kulak@user/kulak)
[03:34:53] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[03:37:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:37:26] *** Wulf4 is now known as Wulf
[03:37:57] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[03:40:43] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[04:06:18] *** Joins: pinheadmz_ (~pinheadmz@hns-contributor.dev)
[04:07:16] *** Joins: ham (~ham4@user/ham)
[04:08:09] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (Ping timeout: 244 seconds)
[04:11:24] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[04:12:05] *** Joins: ham2 (~ham4@d8D8627D5.access.telenet.be)
[04:12:09] *** Joins: kulak (~kulak@user/kulak)
[04:13:43] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[04:15:26] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 272 seconds)
[04:20:31] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[04:21:31] *** Joins: kulak (~kulak@user/kulak)
[04:25:52] *** Joins: KeterClass6 (~KeterClas@vm0.max-p.me)
[04:25:58] *** Joins: scjosh4 (~scjosh@206.189.79.69)
[04:27:16] *** Quits: yawkat (~yawkat@cats.coffee) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: _- (~orgg@user/orgg) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: s1b1 (~s1b1@user/s1b1) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: scjosh (~scjosh@206.189.79.69) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: _0ne (~one@user/0ne/x-2101768) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: JvD (~jvd@kpa15.kuuskaista.fi) (Ping timeout: 244 seconds)
[04:27:47] *** scjosh4 is now known as scjosh
[04:27:47] *** KeterClass6 is now known as KeterClass
[04:28:00] *** Joins: JvD (~jvd@kpa15.kuuskaista.fi)
[04:28:32] *** Joins: yawkat (~yawkat@cats.coffee)
[04:28:49] *** Joins: _0ne (~one@user/0ne/x-2101768)
[04:28:57] *** Joins: _- (~orgg@20.55.233.57)
[04:29:10] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[04:32:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[04:33:04] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[04:35:18] *** Joins: s1b1 (~s1b1@user/s1b1)
[04:41:45] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 265 seconds)
[04:41:53] *** Joins: ionface_ (~ionface@user/ionface)
[04:54:29] *** Joins: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva)
[04:56:28] *** Joins: Guest62 (~Guest62@69-230-153-205.lightspeed.irvnca.sbcglobal.net)
[05:03:52] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[05:20:48] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:28:27] *** Quits: Toadisattva (~Toadisatt@gateway/tor-sasl/toadisattva) (Quit: Leaving)
[05:30:24] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-bc1c-de87-81b2-e6e2.res6.spectrum.com) (Ping timeout: 250 seconds)
[05:44:17] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f4dd-c36e-b54e-ab9e.res6.spectrum.com)
[05:48:30] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[05:48:50] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[05:51:01] *** Joins: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[05:52:04] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:54:50] *** Joins: andreasbuhr_ (~quassel@p549db957.dip0.t-ipconnect.de)
[05:56:41] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:57:37] *** Joins: pete443 (~pete@user/pete443)
[05:58:57] *** Quits: andreasbuhr (~quassel@p549db92e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:59:35] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 268 seconds)
[06:09:18] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 252 seconds)
[06:13:39] *** Joins: sm2n_ (~sm2n@user/sm2n)
[06:16:16] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 252 seconds)
[06:21:22] *** Quits: Guest62 (~Guest62@69-230-153-205.lightspeed.irvnca.sbcglobal.net) (Quit: Connection closed)
[06:54:42] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[07:00:18] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[07:45:05] *** Quits: CryptoClub (~fafs@62.174.195.52.static.user.ono.com) (Read error: Connection reset by peer)
[07:46:19] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[07:57:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[07:57:26] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:10:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:11:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[08:11:50] *** Lord_of_Life_ is now known as Lord_of_Life
[08:30:54] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[08:31:09] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:56:07] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[09:17:29] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[09:17:53] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[09:20:04] *** Quits: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net) (Ping timeout: 272 seconds)
[09:35:29] <snappy> interesting attack due to weak rng https://github.com/irsl/gcp-dhcp-takeover-code-exec
[09:59:58] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[10:07:05] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[10:21:35] *** Joins: soulisson (~soulisson@user/soulisson)
[10:21:41] <soulisson> Hello
[10:25:07] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[10:25:10] <soulisson> Apologies for this question. I think I don't understand what's a key stream. My english isn't great but I read some articles. My understanding of a key stream is that it's a collection of bytes generateed one after the other in time.
[10:32:14] <riv> so in general a key is secret data
[10:32:34] <riv> a key stream could be part of a stream cipher that needs to be kept secret
[10:33:05] <soulisson> riv, yes, sorry I forgot to mention it was in the context of stream ciphers
[10:33:05] <riv> so you set up your stream cipher with a short key, and it produces an extremely long key stream that is (for example) xor'd against data to encrypt it
[10:36:14] <soulisson> riv, I think I understand of how it's used what I'm not sure of is the definition of a key stream. I understand it as a collection of bytes pseudo-randomly generated bytes one after another in time.
[10:36:43] <wasamasa> you're a learning by the book person, eh
[10:36:57] <wasamasa> the definition can be as misleading as possible, as long as it's from a book, it's fine
[10:37:29] <soulisson> wasamasa, yes. Although I also tried to implement RC4 in python to get a better understanding.
[10:37:47] <wasamasa> a key is a secret crypto parameter
[10:38:04] <wasamasa> fixed number of bytes
[10:38:32] <wasamasa> so far so good?
[10:38:42] <soulisson> yes, sure
[10:40:07] <wasamasa> now, in a stream cipher, a key stream is derived from the crypto parameters
[10:40:11] <wasamasa> it's as many bytes as you need
[10:40:36] <wasamasa> combine with plaintext and you get ciphertext
[10:40:42] <wasamasa> combine with ciphertext and you get plaintext
[10:44:07] <soulisson> wasamasa, ok. Apologies for those stupid questions. In what regards, the description I gave is incorrect? I fail to see it :(
[10:44:16] <wasamasa> it is too generic
[10:44:25] <wasamasa> the output of /dev/urandom would fit your definition
[10:44:30] <wasamasa> but it's not a keystream
[10:44:32] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[10:44:45] <wasamasa> use that for encryption and you can never decrypt something again, lol
[10:47:10] <soulisson> wasamasa, ok, so the missing part in my description is that those bytes are computed from a key? Is the part about being generated "one after another in time" correct?
[10:47:30] <wasamasa> that is too specific
[10:47:49] <wasamasa> AES-CTR turns a block cipher into a stream cipher, one block at a time
[10:50:44] <soulisson> wasamasa, ok, so we could describe the key stream as an n-uple (K0, K1, ...., Kn) where Kn and Kn+1 are generated one after the other and the size depends on the algorithm (it could one byte like RC4 or 128 bits for AES) for instance?
[10:51:19] <wasamasa> you could do that, but it would miss the point
[10:52:36] <soulisson> wasamasa, really sorry. What exactly would miss the point?
[10:52:49] <wasamasa> your suggestion
[10:53:26] <wasamasa> it's a lot more words that don't give you exactly more understanding about the nature of the keystream
[10:55:13] <soulisson> oh ok, I just wanted to emphasize in the last sentence that how the elements of the keystream are generated depends on the algorithm and it might vary in size: RC4 vs AES-CTR. I'm not good at all in explaining my self, even less in english, lol, really sorry
[10:57:14] *** A_Dragon is now known as nogarD_A
[11:01:49] <soulisson> wasamasa, thanks a lot for your help. Sorry about those stupid questions. I'm not bright at all. 
[11:02:17] <wasamasa> the idea is that you can recreate the keystream again with the correct parameters
[11:02:23] <wasamasa> that's why it's described as pseudo-random
[11:02:42] <wasamasa> it looks random and unpredictable, but it's generated from a few numbers
[11:03:19] <wasamasa> it's not actual randomness
[11:03:29] <wasamasa> like when netflix is deriving randomness from lava lamps
[11:03:35] <wasamasa> you cannot reseed lava lamps, lol
[11:05:27] <soulisson> yes, I understood that part. The algorithm is really a Pseudo Random Generator
[11:05:35] <soulisson> :)
[11:13:34] *** Joins: menace (~someone@2001:a61:3456:4d01:b9d6:58d3:4ea7:4453)
[11:13:44] *** Quits: menace (~someone@2001:a61:3456:4d01:b9d6:58d3:4ea7:4453) (Changing host)
[11:13:44] *** Joins: menace (~someone@user/menace)
[11:13:46] *** menace is now known as Deknos
[11:14:02] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:14:10] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:14:35] <wasamasa> the nice thing about CTR is that you can parallelize encryption
[11:14:53] <wasamasa> because the blocks are not depenent on each other
[11:16:04] <yawkat> also no padding.
[11:16:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:20:52] <soulisson> I have another stupid question why PRNG are called number generators? If some algorithm outputs data which do not represent a random number but rather a random string of bytes, doesn't that make it a PRNG as well
[11:21:02] <soulisson> ?
[11:21:57] <yawkat> bytes are also numbers.
[11:22:04] <wasamasa> yeah, small numbers
[11:22:19] <yawkat> large numbers. small numbers are only below 2!
[11:25:01] <soulisson> So a 16 bytes output would be onsidered as a 16 bytes number :) ?
[11:25:33] <wasamasa> it can also be considered 16 byte-sized numbers
[11:28:54] <soulisson> ok, so anything that outputs "random" data based on a seed can be called a PRNG as long it verifies the properties
[11:32:09] <soulisson> yawkat, wasamasa, thanks a lot for the help guys. Deeply sorry about the questions. Most of the time I struggle with simple things and to be honest the lack of sleep doesn't help. I appreciate your help
[11:32:15] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[11:32:20] <Haohmaru> speaking of which, shouldn't a crypto-grade PRNG produce "uniform" distribution?
[11:32:45] <riv> yes it should be indistinguishable from random
[11:34:02] <Haohmaru> so then i guess careful not to reinterpret the numbers as floating point or something similar
[11:34:13] <wasamasa> why?
[11:34:23] <wasamasa> random output is random output
[11:34:33] <wasamasa> it can be interpreted as bytes, long numbers, floats, ...
[11:34:43] <Haohmaru> i gotta actually test what happens if you reinterpret 32bit uniform distribution PRNG integers as float
[11:35:08] <Haohmaru> wasamasa not sure if the distribution would remain uniform then
[11:36:57] <wasamasa> if you don't throw away information...
[11:37:53] <Haohmaru> huh, actually some 32bit values would end up being infinities, NANs, etc..
[11:38:19] <wasamasa> yup
[11:38:44] <wasamasa> NaNs can be very diverse :P
[11:38:55] <riv> yes its meant to be random as bitstrings
[11:38:58] <Haohmaru> so yeah.. if you want floatz then convert to it, altho not sure why anyone would need crypto-grade floating point random numbers
[11:39:01] <riv> not random as real number values
[11:55:23] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 268 seconds)
[11:56:04] *** Quits: CryptoClub (~fafs@62.174.195.52.static.user.ono.com) (Read error: Connection reset by peer)
[11:57:46] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[12:09:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:13:02] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[12:14:39] *** Joins: vernaz (~vernaz@148.63.127.167)
[12:21:53] *** nogarD_A is now known as A_Dragon
[12:23:14] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[12:23:41] *** Joins: kulak (~kulak@user/kulak)
[12:28:59] <Deknos> regarding secret sharing schemes: is there any cryptanalysis on any sharing scheme, where there are k of n parties required to decrypt, but only k-x secrets are available, how hard is the cryptanalyis/bruteforce? does it scale linear to the availability of x parts?
[12:29:14] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[12:29:35] <yawkat> shamir secret sharing is information-theoretically secure
[12:29:49] <yawkat> having fewer than the required shares reveals no information on the secret
[12:30:00] *** Joins: kulak (~kulak@user/kulak)
[12:31:14] *** Quits: riv (~river@tilde.team/user/river) (Quit: Leaving)
[12:39:16] *** Quits: Quiark[m] (~quiarkmat@2001:470:69fc:105::16be) (Quit: Bridge terminating on SIGTERM)
[12:44:45] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:cf3c:697d:723b:8aac)
[12:45:47] <Deknos> so, if you have k-1 secrets, you cannot bruteforce the kth secret and decrypt?
[12:46:20] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[12:47:14] <yawkat> no
[13:05:53] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[13:09:18] <int-e> the way polynomial interpolation works... yes you can, but you can just as easily brute force full the secret directly without involving any of the parties
[13:09:34] <int-e> s/full the/the full/
[13:11:32] <yawkat> if you cant tell what secret is the right one, you cant brute-force it :)
[13:12:17] <int-e> true, of course
[13:12:49] <int-e> but that's not a realistic assumption, is it?
[13:12:53] <Haohmaru> it's hunter2
[13:13:18] <yawkat> int-e: well, for information-theoretic secrecy, it is
[13:13:18] <int-e> yawkat: Also it's kind of covered under the "just as easily" handwave :-)
[13:15:20] <int-e> yawkat: I'll usually assume that the real plaintext has sufficient redundancy to be distinguished from (pseudo-)randomness (which we get from incorrect keys), for these purposes. Of course we need a ciphertext of sufficient length for that. The known plaintext model is far clearer about this of course.
[13:16:15] <yawkat> well even with redundancy, you cant tell, because the info-theoretic security can fix your redundancy as well
[13:16:45] *** Joins: gareppa (~gareppa@user/gareppa)
[13:17:58] <int-e> yawkat: But I'm *not* attacking the secret sharing. :P
[13:18:54] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[13:20:25] *** Quits: R9dmT9g9t (~quassel@45.248.78.188) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:26:56] *** Joins: soulisson_ (~soulisson@160.176.44.243)
[13:27:22] *** Quits: soulisson_ (~soulisson@160.176.44.243) (Changing host)
[13:27:22] *** Joins: soulisson_ (~soulisson@user/soulisson)
[13:27:22] *** Quits: soulisson (~soulisson@user/soulisson) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[13:27:22] *** soulisson_ is now known as soulisson
[13:43:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:44:19] *** Joins: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[13:46:44] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[13:46:51] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[13:48:26] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:48:58] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[13:49:10] *** reedrichards is now known as MrFantastik
[13:57:29] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 256 seconds)
[14:03:25] *** Joins: Ohlov31 (~Ohlov3@dyndsl-080-228-184-148.ewe-ip-backbone.de)
[14:07:15] *** Quits: Ohlov3 (~Ohlov3@dyndsl-095-033-058-193.ewe-ip-backbone.de) (Ping timeout: 265 seconds)
[14:16:11] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 256 seconds)
[14:26:08] *** PJBoy is now known as Guest9410
[14:26:08] *** Quits: Guest9410 (~PJBoy@user/pjboy) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[14:26:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:00:32] *** Joins: rtypo (~alex@user/rtypo)
[15:27:35] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[15:51:06] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 240 seconds)
[15:56:28] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[15:59:03] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[16:07:36] *** Quits: CryptoClub (~fafs@62.174.195.52.static.user.ono.com) (Read error: Connection reset by peer)
[16:09:41] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[16:16:11] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[16:19:41] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:35:48] *** Joins: King_Killa (~brandon@cpe-74-141-31-150.neo.res.rr.com)
[16:35:59] *** Parts: King_Killa (~brandon@cpe-74-141-31-150.neo.res.rr.com) (Leaving)
[16:40:34] *** Quits: ionface_ (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:41:31] *** Joins: functor (~functor@151.51.141.57)
[16:41:33] *** Joins: ionface (~ionface@user/ionface)
[16:49:06] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[16:52:59] *** Joins: d4 (~d4@151.51.141.57)
[16:53:05] *** Parts: functor (~functor@151.51.141.57) ()
[16:56:56] *** Quits: SomeWeirdAnon (~shwn@2a02:8109:abf:ffb4:13:3c3f:fb8a:fb0a) (Ping timeout: 268 seconds)
[17:03:24] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:11:21] *** d4 is now known as functor
[17:16:27] *** Joins: ses (uid38151@id-38151.stonehaven.irccloud.com)
[17:32:54] <Alipha> Haohmaru: converting random bytes to IEEE floating point would result in an "exponential distribution". That is, the distribution would be 2^n where n is uniform
[17:34:05] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[17:34:43] <Haohmaru> yeah, that's sorta what i had in mind too
[17:34:53] <int-e> Hmm. Approximately. You'd be stitching together uniform ranges that end at powers of two; all 2^53 possible doubles in [1,2) are equally likely. (1/2^64 each)
[17:36:16] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:37:31] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[17:41:33] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[17:41:48] <Alipha> yeah, it's (m/2^53)*2^n where m is uniform in (-2^53, 2^53) and n is uniform in [-1022, 1023]
[17:42:24] <Alipha> Hm. Maybe that's not exactly right
[17:42:58] <int-e> it's wrong for 0, and it ignores NaNs and infinities
[17:44:30] <int-e> Hmm, so, no it's not really correct. m should be in range +/-[2^53,2^54), but there are denormals to account for too.
[17:44:32] <Alipha> (1+m/2^53)*2^n. And yeah, 0 and NaN and Inf
[17:45:58] <int-e> I mean we're basically reproducing the whole specification of IEEE floating point numbers (the representation, not the operations on them) right now.
[17:46:14] <int-e> And that one is a bit messy.
[17:47:34] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 246 seconds)
[17:47:51] *** Joins: Wintermute (~Wintermut@94.46.93.221)
[17:48:36] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[17:50:08] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[17:58:34] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[18:01:06] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 240 seconds)
[18:04:26] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[18:12:49] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[18:21:44] *** Joins: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[18:26:05] *** Quits: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 256 seconds)
[18:39:54] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[18:41:06] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[19:10:56] *** Joins: vernaz (~vernaz@148.63.127.167)
[19:12:17] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[19:21:03] <soulisson> Hello again. Sorry to bother one more time. I'm trying to explain in a simple way the concept of electronic signature. Would be incorrect to define a signature as a proof of identity and integrity? For identity, it's a proof for the receiver that the signature comes from the entity it's supposed to come from. For integrity, it's a proof for the receiver that the data they have are the ones that the signing entity agreed to sign.
[19:21:35] *** Quits: TheJollyRoger (~JollyRoge@user/thejollyroger) (Ping timeout: 244 seconds)
[19:22:46] *** Joins: TheJollyRoger (~JollyRoge@user/thejollyroger)
[19:23:06] <Alipha> sure
[19:23:50] <MacGyver> soulisson: It's maybe a bit of a leap to say "identity" there.
[19:24:01] <MacGyver> soulisson: Don't know how simple you want the explanation to be.
[19:24:23] <MacGyver> soulisson: But it's not necessarily the concept of "identity" as we usually understand it as humans.
[19:24:50] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[19:26:35] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[19:27:55] <Alipha> indeed. for identity it is simply that the holder of (a copy of) the private key that was associated with the public key was the one who signed it.
[19:28:02] <MacGyver> Maybe a better word to use here would be "proof of provenance".
[19:29:48] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:30:12] *** Joins: kulak (~kulak@user/kulak)
[19:31:21] <onelegend> do quantum key distributions need to be signed?
[19:31:27] <danieldg> a signature is proof the person possessing the private key signed the document.  The public key might also be signed by a statement (certificate) saying something about the sender's identity.
[19:31:40] <MacGyver> I.e. "somebody in control of the private key must have made this signature", and any guarantees that follow from that are guarantees built *on top* of the basic signature building block
[19:31:54] <MacGyver> It doesn't follow from the signature itself.
[19:34:16] <soulisson> Ok, damn, I thought I was close. I'm trying to explain to some folks how electronic signature is superior to regular signatures (like a bank check, ...)
[19:35:45] <danieldg> if the user registers their public key with their bank, then that's the hard half taken care of.  The nice part about cryptographic signatures is you can't forge them.
[19:36:01] <danieldg> (you can steal the key, though)
[19:36:28] <MacGyver> In that case, all you have to do is add one statement about how the identity verification is built: rather than the bank having a written signature for your account on file to which to compare every other signature you ever make (which will never be exactly the same), they have a public key for your account on file which is *at least* as good as the written signature for identity verification
[19:36:30] <MacGyver> purposes.
[19:37:46] <MacGyver> The assumption being that the key isn't stolen -- but then the assumption with written signatures is also that they're not forged.
[19:38:09] <Alipha> you may also have to deal with being able to revoke a public key in case it's stolen and/or have expiration dates associated with the public key
[19:38:11] <MacGyver> Now it's of course a very bad idea to allow regulation to assume that keys *cannot* be stolen and therefore all fraud is now the customer's fault.
[19:38:33] <MacGyver> But it's definitely easy to argue that digital signatures are *better* than handwritten signatures.
[19:38:40] <yawkat> onelegend: sure
[19:39:06] <soulisson> danieldg, no, I meant in my country, electronic signature is not really used for business purposes (unfortunately). I'm trying to advocate people for it. I thought that my definition without being perfect was technically ok.
[19:39:35] *** Joins: tradar (~tradar@user/tradar)
[19:40:31] * Alipha wonders how difficult it is to reproduce someone's written signature (well enough to fool handwriting experts) by looking at a sample of their signature and practicing writing it
[19:40:59] <onelegend> there are key signing parties which are fun
[19:41:07] <onelegend> Web of Trust
[19:41:29] <onelegend> you take pencil, paper, and a calculator, and sign other people's keys with a pencil
[19:42:44] <soulisson> Alipha, we have ton of issues because of this. Almost half of the businesses in the area I live have faced a signature forgery case.
[19:44:23] <onelegend> I have a completely opposite case to signature forgery. There are special pens, where the ink disappears after a certain amount of time. This means someone could sign a legal document with this pen, but later realize that the document does not contain the signature at all.
[19:46:06] <MacGyver> I doubt that that would stand against forensic scrutiny.
[19:46:09] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:46:18] <MacGyver> Whatever that ink is, it's going to leave some kind of residue.
[19:46:25] <MacGyver> Either chemical or physical.
[19:46:52] <MacGyver> So although funny as a prank, I wouldn't expect that to help you defraud anyone.
[19:46:56] <soulisson> onelegend, a relative faced a similar case. It wasn't special pens. He wasn't carefule enough. It was a prefilled check. The guy just added some numbers
[19:49:39] <soulisson> usually here we add some symbols before and after to prevent those things. He didn't do it
[19:50:36] <MacGyver> soulisson: (There's comparable attacks on badly designed cryptographic schemes with digital signatures, btw, like PGP)
[19:51:03] <MacGyver> soulisson: (That said, a well-designed digital signature scheme at *least* prevents that kind of authenticity / integrity break)
[19:52:11] *** Joins: kulak (~kulak@user/kulak)
[19:53:19] <soulisson> MacGyver, noted :)
[19:53:24] *** Joins: drathir87 (~drathir@wireguard/tunneler/drathir)
[19:53:37] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[19:53:38] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[19:53:55] <MacGyver> soulisson: E.g. consider the case where if I just sign a message saying "I owe you â‚¬100", what's to stop an attacker from intercepting that message and saying that "you" means them, not soulisson.
[19:54:35] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:54:36] <MacGyver> This may seem farcical but it's a serious issue in PGP called surreptitious forwarding.
[19:55:31] *** Joins: byteskep1ical (~amnesia@user/byteskeptical)
[19:55:39] *** Joins: kulak (~kulak@user/kulak)
[19:56:00] <soulisson> MacGyver, you mean that PGP allows the message to be modified even with signature? I'm not sure to understand
[19:56:10] <MacGyver> soulisson: No, you don't modify anything in the message.
[19:56:22] <MacGyver> soulisson: There's crucial information *missing* from the signed part of the message.
[19:56:33] <MacGyver> soulisson: I.e. who the intended recipient is.
[19:56:59] <MacGyver> soulisson: A well-designed scheme has that information automatically embedded as part of the scheme, rather than rely on the users including it.
[19:57:18] <MacGyver> soulisson: Now in most contract settings this won't be an issue because the contract text will always already include those details.
[19:57:49] <MacGyver> soulisson: Just, be aware that simply signing something doesn't mean it's now invulnerable to attack.
[19:58:36] <soulisson> hmm, yes, I understand. 
[19:58:42] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 240 seconds)
[19:58:52] *** Joins: dolor_avis (~dolor_avi@user-5-173-12-123.play-internet.pl)
[19:59:08] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:59:13] <MacGyver> The failings of PGP have actually taught us a *lot* about signature schemes.
[20:00:09] <MacGyver> https://theworld.com/~dtd/sign_encrypt/sign_encrypt7.html is a decent writeup, if you're interested.
[20:00:10] <soulisson> I think I understand your example. Let's someone sends me a signed message "You owe me 100$", I decide to forward it and impersonate the original sender. It could be a problem.
[20:00:20] *** Joins: kulak (~kulak@user/kulak)
[20:03:11] <soulisson> Another question do Message Authentication Codes are as good as signatures if the secret key is not shared with anyone?
[20:04:00] <ms7821> the problem with MACs is authenticating them if you're not the person who holds the key
[20:04:07] <Alipha> soulisson: if it's not shared with anyone, how does anyone validate it?
[20:04:15] <ms7821> they're really best understood as messages to yourself
[20:04:37] <soulisson> Alipha, I was thinking for instance about JWT generated by web applications.
[20:06:50] <MacGyver> soulisson: No, they're objectively worse.
[20:07:04] <MacGyver> Or well, "worse" in *one* property.
[20:07:14] <MacGyver> soulisson: Signatures provide a property we call non-repudiation.
[20:08:05] <MacGyver> soulisson: I.e. if somebody holds a signed message, they can argue that there is no way anyone else but the known holder of the private key signed that message.
[20:08:17] <MacGyver> soulisson: (Bar a stolen key)
[20:08:29] <MacGyver> soulisson: For a MAC, because the key is shared, the recipient can forge messages.
[20:08:41] <MacGyver> soulisson: I.e. MACs don't have a non-repudiation property.
[20:08:49] <MacGyver> soulisson: *depending on context*, this may be considered good.
[20:09:08] <MacGyver> soulisson: But since you're dealing with the setting of contract law, probably it isn't.
[20:09:24] *** Quits: jhed9 (~jhed9@113.189.225.35.bc.googleusercontent.com) (Quit: ZNC 1.8.2 - https://znc.in)
[20:09:33] <soulisson> MacGyver, I understand that non-repudiation is not possible with MACs but for the case of JSON Web Tokens with an HMAC algorithm, is there any difference, since the application is the one generating the MAC and verifying it?
[20:09:47] <soulisson> MacGyver, sorry I just switched of topic
[20:09:58] <MacGyver> soulisson: Ah. Well there you don't actually have a shared key.
[20:10:08] <MacGyver> soulisson: Because the application itself does both the signing and later verification.
[20:10:19] <MacGyver> soulisson: So yeah, it's probably equivalent there.
[20:11:35] *** Joins: jhed9 (~jhed9@113.189.225.35.bc.googleusercontent.com)
[20:12:00] <soulisson> ok :)
[20:12:51] <ms7821> the magic of a signature is that it has a public key that anyone else can use to validate it
[20:13:10] <ms7821> so if your JWTs need to be authenticated by a third party, you need signatures, but not if you're checking the JWT yourself
[20:14:06] <soulisson> ms7821, yes, indeed :)
[20:14:33] <Alipha> an HMAC is generally sufficient for JWT because the server issuing is the server that's verifying, yes
[20:14:34] <soulisson> But even in the context I gave it would be wrong to call a MAC a signature, right?
[20:14:50] <Alipha> soulisson: don't call a MAC a signature :-)
[20:15:06] <Alipha> it's an authentication code
[20:16:08] <Alipha> if you're talking to non-technical people, you could say "it's like a signature but for symmetric encryption" i guess 
[20:17:04] <Alipha> but in the cryptography world, a "signature" is specifically a term for asymmetric crypto
[20:17:07] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:17:19] <soulisson> Alipha, I understand. The reason I asked is because I saw it called that way on several web sites related to JWT including this one: https://jwt.io/introduction
[20:17:36] <Alipha> unfortunately, yes
[20:17:49] <soulisson> it made a little bit unconfortable, I'm not going to lie
[20:17:51] <soulisson> lol
[20:18:20] <ms7821> yeah, I think they're using signing as an umbrella term which is a bit ugh but
[20:18:36] <MacGyver> It *is* the closest to a real-world signature though.
[20:18:40] <MacGyver> As in.
[20:18:51] <ms7821> yeah
[20:18:55] <MacGyver> A real-world signature has the same symmetry.
[20:19:08] <MacGyver> Maybe I should call that analog rather than real-world.
[20:19:10] <soulisson> They also have real signatures for JWT (public/private keys, ....)
[20:19:25] <ms7821> this is why I focus on "it's a message to myself" because people understand that I can validate it but not that anyone else would believe me
[20:19:40] *** Quits: CryptoClub (~fafs@62.174.195.52.static.user.ono.com) (Read error: Connection reset by peer)
[20:19:51] <ms7821> and that I can forget that I even created the message and have someone untrusted give it to me later and I'll still recognise it as mine
[20:19:59] <soulisson> so for me, it's a little bit unfortunate wording. IMO, they could have found a better wording.
[20:21:30] <MacGyver> soulisson: It's fine to say they're wrong.
[20:21:42] <MacGyver> soulisson: We tend to have and voice strong opinions in here ;)
[20:22:05] *** Joins: CryptoClub (~fafs@62.174.195.52.static.user.ono.com)
[20:23:41] <soulisson> lol, we all have our "qualities". Mine is obsessive disorder with terminology. It's fine for studying some topics but not IT.
[20:29:11] *** Joins: Warped (~Warped@user/warped)
[20:40:08] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 252 seconds)
[20:42:34] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 246 seconds)
[20:46:28] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f4dd-c36e-b54e-ab9e.res6.spectrum.com) (Ping timeout: 250 seconds)
[20:47:11] *** Quits: dolor_avis (~dolor_avi@user-5-173-12-123.play-internet.pl) (Quit: dolor_avis)
[20:48:19] *** Quits: byteskep1ical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[20:48:58] *** Quits: drathir87 (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[20:50:56] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[20:51:52] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c9ae-7931-d4d7-9809.res6.spectrum.com)
[20:58:09] *** Quits: functor (~d4@151.51.141.57) (Remote host closed the connection)
[21:24:15] *** Joins: mouseghost (~draco@user/mouseghost)
[21:26:13] *** Quits: onelegend (onelegend@wireguard/tunneler/onelegend) (Quit: WeeChat 3.2)
[21:26:37] *** Joins: sm2n (~sm2n@user/sm2n)
[21:28:53] *** Quits: sm2n_ (~sm2n@user/sm2n) (Ping timeout: 268 seconds)
[21:37:21] *** Joins: luto (~luto@c-76-126-213-153.hsd1.ca.comcast.net)
[21:49:26] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:53:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[21:56:42] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[21:57:48] *** Joins: kulak (~kulak@user/kulak)
[21:59:36] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:00:01] *** Joins: kulak (~kulak@user/kulak)
[22:02:45] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[22:08:50] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:09:28] *** Joins: zro (~zro@user/zro)
[22:11:34] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[22:13:06] *** Quits: soulisson (~soulisson@user/soulisson) (Quit: Leaving)
[22:16:03] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:24:05] *** Quits: luto (~luto@c-76-126-213-153.hsd1.ca.comcast.net) (Quit: luto)
[22:24:40] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: I quit)
[22:25:37] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:34:36] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:37:34] *** Quits: Wintermute (~Wintermut@94.46.93.221) (Quit: Leaving)
[22:44:03] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: I quit)
[22:49:30] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:50:49] *** Joins: riv (~river@tilde.team/user/river)
[22:52:18] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:52:58] *** Joins: luto (~luto@c-76-126-213-153.hsd1.ca.comcast.net)
[22:53:28] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[23:12:12] *** Soni is now known as queeries
[23:16:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:19:37] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[23:38:44] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:39:30] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 240 seconds)
[23:44:32] *** Quits: luto (~luto@c-76-126-213-153.hsd1.ca.comcast.net) (Quit: luto)
[23:48:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:51:06] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 240 seconds)
[23:55:03] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:59:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
