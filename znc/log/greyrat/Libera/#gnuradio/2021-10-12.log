[00:10:35] <flash[m]> using forecast seems a bit inefficient. 
[00:11:40] <flash[m]> I wrote my forecast to always return 8000. It is called the first time with noutput = 4096, then it is called iteratively with 1/2 that value until giving up
[00:12:21] <flash[m]> then it gets called with 7168 (still not enough) and it binary searches to failure
[00:12:28] <flash[m]> is that how it's supposed to work?
[00:14:58] <drmpeg> You probably need to use set_output_multiple(). Here's an example. https://github.com/gnuradio/gnuradio/blob/master/gr-dtv/lib/dvb/dvb_bch_bb_impl.cc#L381-L392
[00:15:41] <flash[m]> my concern is that I may or may not output anything (this think is more like a sink than a processing block)
[00:15:51] <flash[m]> so the output size is irrelevant
[00:16:14] <flash[m]> but I can try that easily enough
[00:16:32] <drmpeg> The scheduler is going to base number of input items on number of output items.
[00:17:48] <drmpeg> So 8000 may be more than it can provide given the number of output items.
[00:27:14] <JoshMorman[m]> if you are not outputting anything, you can make it a sync_block and you don't need a forecast().  Then use set_output_multiple as drmpeg recommended
[00:28:21] <flash[m]> sink != sync :)
[00:28:32] <flash[m]> I was told that sources and sinks should be gr::block
[00:32:13] <JoshMorman[m]> there's no need for sources and sinks to be gr::block because there is no in/out relationship.  sync will work just fine, and in fact it's what modtool spits out when you do source or sink block
[00:32:15] *** Quits: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611) (Quit: uros)
[01:04:25] *** Quits: pcero (~pcero@187.135.224.134) (Ping timeout: 265 seconds)
[01:14:49] *** Joins: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611)
[01:14:49] *** Quits: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611) (Client Quit)
[01:22:38] *** Joins: foz (~mt@76.105.235.106)
[01:26:38] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:d41e:b2c0:3fff:3b59)
[01:36:32] <flash[m]> I think I'm looking at the wrong block. Is there a (simple?) way to identify which block is the bottleneck?
[01:38:19] *** Quits: saba4ka-mumu (~efsearfc@176.59.43.43) (Ping timeout: 250 seconds)
[02:06:09] *** Joins: horseface (~horseface@user/horseface)
[02:34:47] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[02:35:13] *** Joins: spithash (~spithash@user/spithash)
[02:41:57] *** Joins: Guest36 (~Guest36@2601:5c0:c280:8da0:4101:79cd:ee52:1699)
[02:42:20] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:43:36] <Guest36> Hey all,  is there a way to store the values in a memory or 2D Array in GNU Radio? 
[02:45:16] <Guest36> I am lf i can use vector sink. 
[02:46:59] <Guest36> Also is there a method to do simple Mathematics Calculation like squaring, averaging? Not looking for moving average block
[02:48:24] <DerekKozel[m]> Hi Guest36 to do simple mathematics at lower sample rates (<20 MS/s) you can use the Python Block to add custom calculations.
[02:49:43] <DerekKozel[m]> Handling 2D arrays and other datastructures you have to start managing the memory more directly
[02:55:33] <DerekKozel[m]> I was trying to quickly find a good reference for manual memory management, but neither gr-dpd's Stream to GMP Vector, gr-dpd's matrix usage, or gr-doa's armadillo usage are particularly easy to read
[02:56:55] <Guest36> DerekKozel[m] Thanks, I will try with python block. 
[02:57:00] <DerekKozel[m]> Perhaps some other folks will have experience or better examples. Depending on what your goal is it might be better to move from making it with with Streams to using messages to handle packets of data
[02:58:01] <Guest36> DerekKozel[m] Could you please tell more what you mean on managing the memory more directly? For 2D arrays and other Data structures?
[02:58:41] <DerekKozel[m]> GNU Radio just hands you a pointer to a buffer of memory. You can reinterpret it however you want inside your block.
[02:59:33] <DerekKozel[m]> So a 1 by 1000 array of floats could easily be a 5 by 200 2D array
[03:00:57] <DerekKozel[m]> If you're writing blocks in Python you can use the numpy reshape function. In C++ there isn't a fundamental Matrix type, so you're probably going to be managing it directly already.
[03:01:40] <Guest36> DerekKozel[m] I think I understand your statement on a surface level. Can you Please direct me to some resources for more information?
[03:02:04] <DerekKozel[m]> I don't think there is any direct documentation.
[03:02:28] <DerekKozel[m]> You can look up the Numpy reshape function's documentation. But I don't know of any examples in GNU Radio
[03:03:02] <Guest36> Yes, I have a written a working script, need to understand on python block now. 
[03:03:33] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[03:04:23] <DerekKozel[m]> Here's a doc page that describes the internals of a block and examples of each type in C++ and Python
[03:04:24] <DerekKozel[m]> https://wiki.gnuradio.org/index.php/Types_of_Blocks
[03:04:33] <Guest36> so basically, "python block" can be used to do any mathematical computation and can even work with arrays and freely use all feautures of numpy library? 
[03:05:24] *** Quits: horseface (~horseface@user/horseface) (Quit: I am brb I reckon... Sirs.. Ma'am... PATRONS! OF! THE! UNIVERSE!!! AHA!!! <3 !!!)
[03:05:33] <DerekKozel[m]> It is possible, yes
[03:05:52] <Guest36> DerekKozel[m], Thats great then.
[03:06:24] <DerekKozel[m]> Working through Tutorials 9 and 14 might be useful for you.
[03:06:24] <DerekKozel[m]> https://wiki.gnuradio.org/index.php/Tutorials
[03:06:59] <Guest36> Just noticed, there is something called "python module" as well. Wondering on difference between "python module" vs "python block" 
[03:10:24] <DerekKozel[m]> Each block in GNU Radio has a documentation page. They sometimes help describe the functionality.
[03:10:24] <DerekKozel[m]> https://wiki.gnuradio.org/index.php/Python_Module
[03:10:24] <DerekKozel[m]> https://wiki.gnuradio.org/index.php/Embedded_Python_Block
[03:11:03] <Guest36> Thanks, I am going through these. 
[03:11:17] <DerekKozel[m]> The Module lets you add custom Python functions that are available for use in the flowgraph. The Block actually adds a new block.
[03:11:45] <Guest36> Could you give also an idea on whether to use vector sink or go ahead with python block? 
[03:12:19] <DerekKozel[m]> I don't know what you want to do. They are very different blocks
[03:13:23] <DerekKozel[m]> The Vector Sink stores some data for use outside of GNU Radio. The Python Block lets you process some data as part of a flow inside of GNU Radio.
[03:14:26] <DerekKozel[m]> I need to head to sleep. Try out the Python Block, it's worth learning how to use if you are familiar with programming.
[03:17:32] <Guest36> Ok. So, I am using "stream to demux" block, with some " n " number of outputs. Each output has "M" number of values inside. I want to square and average on these M values and store in an array or any Data structure that lets me hold these values ( I guess its "List"?). I will iterate this process for "K" times and finally I want to add the values
[03:17:32] <Guest36> of "N" stored K times.  
[03:19:09] <DerekKozel[m]> If you aren't using the demuxed values anywhere else I'd implement all of that into a single Python Block. It'll run faster and be much simpler.
[03:19:09] <Guest36> Well I suppose you could say, its Energy detection of symbols for some "K" iteration. 
[03:19:23] <DerekKozel[m]> or if you're more familiar, use C++
[03:24:20] <Guest36> Ok, Thanks. 
[03:32:34] <phoenix[m]1> A friend of mine is working on IMBE encoder for school project and asked my help. As a complete noob, I don't know even any better place than this to ask about. 
[03:34:38] <phoenix[m]1> by any chance, is there any gnuradio version available ? IMBE encoder is patented and I'm guessing for sure there is none  :-(
[03:35:38] <phoenix[m]1> Appreciate any suggestions :-)
[03:35:51] <DerekKozel[m]> There's old support for using a USB IMBE encoder
[03:36:40] <DerekKozel[m]> Or depending on the project, there's good modern support for the Codec2 voice codec
[03:37:11] <DerekKozel[m]> Which is both open source and non-patent encumbered
[03:38:24] <JoshMorman[m]> <flash[m]> "I think I'm looking at the wrong..." <- Htop with the thread names shown gives a pretty rough idea. Push a file through with no throttle and the bottleneck should pop up top with 100% cpu
[03:38:28] <DerekKozel[m]> IMBE's patent has expired now, at least for the first gen of the codec
[03:38:35] <phoenix[m]1> Okay.. I'll find out more about the project and requirements and will come back 😀
[03:38:54] <drmpeg> Here's something. https://github.com/balint256/op25/tree/master/op25/gr-op25_repeater/lib/imbe_vocoder
[03:38:55] <DerekKozel[m]> AMBE/AMBE2's hasn't
[03:39:12] *** Quits: Guest36 (~Guest36@2601:5c0:c280:8da0:4101:79cd:ee52:1699) (Ping timeout: 256 seconds)
[03:39:37] <phoenix[m]1> Great!! I'll pass this message 
[03:39:45] <DerekKozel[m]> https://github.com/n7tae/gr-ambe3000
[03:39:53] <DerekKozel[m]> https://github.com/Tom-McDermott/gr-ThumbDV
[03:40:50] <DerekKozel[m]> A standalone IMBE vocoder exists here.
[03:40:50] <DerekKozel[m]> https://github.com/g4klx/imbe_vocoder
[03:43:00] <phoenix[m]1> Thanks Derek Kozel drmpeg  for suggestions and links for these gold mines 😃 
[03:43:37] <DerekKozel[m]> Please to ask your friend to drop by if/when they get dug into their project!
[03:43:53] <DerekKozel[m]> s/to/do/
[03:45:24] <phoenix[m]1> Sure..I'll convey your message and request to join this chat group for further query :-)
[03:46:43] <flash[m]> Josh Morman: thanks. I didn't know about that htop setting. 
[04:01:45] <flash[m]> I actually got the most improvement from calling set_min_output
[04:02:24] <flash[m]> since I finally got instrumentation working, the first block was filling output to 75% before anything else even fired
[04:12:14] *** Joins: Guest36 (~Guest36@2601:5c0:c280:8da0:d0b0:25d6:907f:1323)
[04:12:46] *** Joins: Guest364 (~Guest36@2601:5c0:c280:8da0:5c64:a719:b0d2:ef8e)
[04:16:35] *** Quits: Guest36 (~Guest36@2601:5c0:c280:8da0:d0b0:25d6:907f:1323) (Ping timeout: 256 seconds)
[04:26:47] *** Quits: Guest364 (~Guest36@2601:5c0:c280:8da0:5c64:a719:b0d2:ef8e) (Ping timeout: 256 seconds)
[04:45:52] *** Joins: viktorivan (~ivan@2806:101e:7:4d16:a984:c8cf:eec1:74e0)
[05:04:06] *** Quits: brettgilio (~brettgili@x-node.gq) (Read error: Connection reset by peer)
[05:04:10] *** Quits: Crofton_ (sid401373@lymington.irccloud.com) (Ping timeout: 260 seconds)
[05:04:49] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:05:20] *** Quits: mitsh_ (~mitsh@63.ip-51-254-200.eu) (Ping timeout: 260 seconds)
[05:05:29] *** Joins: mitsh (~mitsh@63.ip-51-254-200.eu)
[05:05:30] *** Joins: Crofton_ (sid401373@id-401373.lymington.irccloud.com)
[05:49:02] *** Joins: horseface (~horseface@user/horseface)
[05:50:23] *** Quits: horseface (~horseface@user/horseface) (Remote host closed the connection)
[05:51:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:56:33] *** Joins: horseface (~horseface@user/horseface)
[06:11:21] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 245 seconds)
[06:17:04] *** Quits: foz (~mt@76.105.235.106) (Ping timeout: 252 seconds)
[06:17:05] *** Joins: deliriousGeorge (mt@gateway/vpn/protonvpn/deliriousgeorge)
[06:36:00] *** Quits: Flash (~Flash@user/flash) (Quit: Leaving...)
[06:50:16] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[07:03:03] *** deliriousGeorge is now known as foz
[07:03:09] *** Quits: foz (mt@gateway/vpn/protonvpn/deliriousgeorge) (Quit: Konversation terminated!)
[07:03:35] *** Joins: Flash (~Flash@user/flash)
[07:11:11] *** Quits: opcode (~nathan@user/opcode) (Quit: WeeChat 3.3)
[07:16:44] *** Quits: yesno (~yesno@109.98.151.179) (Remote host closed the connection)
[07:17:01] *** Joins: yesno (~yesno@109.98.151.179)
[07:17:10] *** Joins: opcode (~nathan@user/opcode)
[07:21:47] *** Joins: cuoops (~cuoops@user/cuoops)
[07:44:16] *** Quits: cuoops (~cuoops@user/cuoops) (Quit: kthxbye)
[07:48:51] *** Quits: viktorivan (~ivan@2806:101e:7:4d16:a984:c8cf:eec1:74e0) (Quit: Leaving.)
[07:49:53] *** Joins: cuoops (~cuoops@user/cuoops)
[08:00:20] *** Quits: harish (~harish@158.140.144.42) (Read error: No route to host)
[08:01:00] *** Joins: harish (~harish@158.140.144.42)
[08:24:45] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:26:18] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:32:40] *** Joins: NaTaSa21F (~KELEBEK@95.70.207.169)
[08:52:35] *** Quits: NaTaSa21F (~KELEBEK@95.70.207.169) (K-Lined)
[08:53:50] *** Joins: ravan (~ravan@user/ravan)
[09:46:49] *** Quits: frgo (~frgo@p548a3042.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:54:36] *** Quits: koma (~koma@user/koma) (Quit: Arc)
[09:55:23] *** Joins: koma (~koma@user/koma)
[10:04:39] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (*.net *.split)
[10:04:39] *** Quits: tkob (tkob@shell.xshellz.com) (*.net *.split)
[10:04:39] *** Quits: jholtom (~holly@user/jholtom) (*.net *.split)
[10:04:39] *** Quits: KotH (~attila@erica.kinali.ch) (*.net *.split)
[10:04:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:26:26] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[10:26:26] *** Joins: tkob (tkob@shell.xshellz.com)
[10:26:26] *** Joins: jholtom (~holly@user/jholtom)
[10:26:26] *** Joins: KotH (~attila@erica.kinali.ch)
[10:26:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:38:14] *** Joins: frgo (~frgo@2a01:1e8:c003:9306:79de:9da9:a990:eb00)
[10:42:46] *** Quits: frgo (~frgo@2a01:1e8:c003:9306:79de:9da9:a990:eb00) (Ping timeout: 252 seconds)
[10:43:39] *** Joins: frgo (~frgo@195.154.189.212)
[10:54:05] *** Joins: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611)
[11:00:27] *** Joins: horseface (~horseface@user/horseface)
[11:06:26] *** Quits: frgo (~frgo@195.154.189.212) (Remote host closed the connection)
[11:18:39] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[11:28:06] *** Joins: jemius (~imperator@2001:16b8:2d8e:c300:a1d0:b27e:52d0:dc85)
[11:28:15] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[11:31:18] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 265 seconds)
[11:57:07] *** Joins: tdaeayusr^ (~tdaeayusr@wsip-70-165-23-55.mc.at.cox.net)
[12:02:54] <jemius> Does anyone know where the filter base function is defined? https://github.com/gnuradio/gnuradio/blob/master/gr-filter/include/gnuradio/filter/fir_filter.h#L44
[12:04:31] <DerekKozel[m]> Probably in gr-filter/lib
[12:04:44] <matt_mills[m]> ( https://github.com/gnuradio/gnuradio/blob/master/gr-filter/lib/fir_filter.cc#L92 )
[12:04:47] <DerekKozel[m]> as a fir_filter_impl.cpp
[12:05:16] <DerekKozel[m]> Yep, you've got it Matt
[12:06:14] <jemius> uff.
[12:10:04] <JDemel[m]> <flash[m]> "I was told that sources and..." <- sind and source are defined by their io signatures. They can potentially be any block.
[12:10:04] <JDemel[m]> However, for the sake of simplicity, a sync block is probably the best choice. `gr::block` exposes quite a lot of features you don't need in a sink or source. Most notably everything related to input/output rate.
[12:10:17] <JDemel[m]> s/sind/sink/
[12:23:12] <jemius> hm, may it be that kernel::fir_filter does not store a filter state, while kernel::fir_filter_with_buffer…x does?
[12:30:08] *** Quits: jayakumar[m] (~jayakumar@2001:470:69fc:105::e721) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: Jayaraj[m] (~jyjnairma@2001:470:69fc:105::8590) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: manjukhece[m] (~manjukhec@2001:470:69fc:105::f539) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: cyclic3[m] (~cyclic3gn@2001:470:69fc:105::f55c) (Quit: You have been kicked for being idle)
[12:30:15] *** Quits: w2naf[m] (~w2nafgnur@2001:470:69fc:105::ec83) (Quit: You have been kicked for being idle)
[12:30:15] *** Quits: tehemp0rer[m] (~tehemp0re@2001:470:69fc:105::ec3d) (Quit: You have been kicked for being idle)
[12:30:16] <drmpeg> Seems like fir_filter_with_buffer is only used in a couple of blocks.
[12:31:33] <drmpeg> fll_band_edge and pfb_synthesizer.
[12:32:10] <drmpeg> I'd say it's some special trick for those blocks.
[12:35:07] <jemius> drmpeg, the strange thing is that in fir_filter nothing is documented, whereas in with_buffer it is.
[12:35:08] <jemius> https://www.gnuradio.org/doc/doxygen/classgr_1_1filter_1_1kernel_1_1fir__filter.html
[12:35:52] <jemius> I'm getting strang behavior with fir_filter::filterN, where the convolution seems to drop samples. That's why I'm interested in the buffer
[12:38:59] <drmpeg> Have you set the history properly?
[12:39:19] *** Joins: goldrak (~goldrak@dsl-113-65.bl27.telepac.pt)
[12:45:04] <drmpeg> https://github.com/gnuradio/gnuradio/blob/master/gr-filter/lib/fir_filter_blk_impl.cc#L41
[12:53:47] <jemius> drmpeg, nope
[12:54:24] *** Joins: frgo (~frgo@195.154.189.212)
[12:59:02] <jemius> but there is no method to set the history https://www.gnuradio.org/doc/doxygen/classgr_1_1filter_1_1kernel_1_1fir__filter.html
[12:59:53] <drmpeg> It's not a filter method, it's a block method.
[13:01:44] <jemius> So in an OOT you have to use the block-class when you need a FIR?
[13:02:51] <drmpeg> Don't you get the block class for free?
[13:03:31] <jemius> It's open source. I get everything for free.
[13:03:54] <drmpeg> No, I mean it's already included.
[13:03:56] <jemius> The point is: It's not obvious to me how you are supposed to use which part of the API. Are the kernels for direct use or are they not?
[13:05:21] <drmpeg> That fir_filter_blk_impl.cc file is your guide.
[13:06:33] <drmpeg> Just to be complete. https://www.gnuradio.org/doc/doxygen/classgr_1_1block.html
[13:21:51] <DerekKozel[m]> If you're using that kernel directly then the memory management task moves from the block (via set_history) to your application.
[13:37:30] <jemius> DerekKozel[m], ok, I get that, i think. Gracias
[13:39:21] *** Quits: jemius (~imperator@2001:16b8:2d8e:c300:a1d0:b27e:52d0:dc85) (Quit: Leaving)
[13:49:55] *** Quits: frgo (~frgo@195.154.189.212) (Remote host closed the connection)
[14:27:55] *** Quits: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611) (Remote host closed the connection)
[14:28:10] *** Joins: uros (~Thunderbi@2001:8a0:6056:700:b112:540a:bd0e:9377)
[14:55:11] *** Joins: frgo (~frgo@p200300deef0cee00c1b0e1d7086384a7.dip0.t-ipconnect.de)
[14:58:42] *** Quits: yesno (~yesno@109.98.151.179) (Quit: Leaving)
[15:10:09] *** Joins: primercuervo[m] (~primercue@2001:470:69fc:105::e191)
[15:19:55] *** Quits: tdaeayusr^ (~tdaeayusr@wsip-70-165-23-55.mc.at.cox.net) (Remote host closed the connection)
[15:53:51] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[16:00:34] *** Joins: saba4ka-mumu (~efsearfc@176.59.40.238)
[16:14:32] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:23:10] *** Joins: ravan_ (~ravan@user/ravan)
[16:24:49] *** Quits: Acinonyx (~acinonyx@user/acinonyx) (Ping timeout: 252 seconds)
[16:25:23] *** Joins: Acinonyx (~acinonyx@user/acinonyx)
[16:25:47] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 250 seconds)
[16:30:17] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:54:42] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:56:56] <Macuser> how the heck am I gonna design a GPS signal and use ephemeris data for Cislunar space
[16:57:27] <Macuser> Seems like no one has recreated GPS signal in gnuradio. I only see gps-sdr-sim written in C.
[16:58:21] <Macuser> it's like 1500 bits per frame
[17:02:32] <atluxity> I suggest doing it one step at a time
[17:02:39] <atluxity> good luck
[17:03:51] <Macuser> yes I'm trying to identify what those steps are to start.
[17:04:04] <drmpeg> Macuser: You want to transmit?
[17:04:16] <Macuser> drmpeg nope. I'm responsible for signal design + receiver design
[17:04:49] <drmpeg> Ok.
[17:04:52] <Macuser> but of course I need a signal before I can design/test the receiver in gnuradio
[17:05:17] <Macuser> I've identified some params so far: BPSK, CDMA, Chip rate: 1.024 Msps. 2 MHz bandwidth
[17:06:15] <Macuser> No. chips/period: 1023
[17:06:23] <Macuser> chip rate: 1.023 MHz*
[17:06:45] <Macuser> 50 bps data rate for the nav signal
[17:08:09] <drmpeg> This project seems current. https://github.com/gnss-sdr/gnss-sdr
[17:09:18] <Macuser> yeah but it's for existing gnss systems
[17:09:49] <Macuser> and it's not in gnuradio blocks
[17:13:10] <DerekKozel[m]> It's in blocks, but not in GNU Radio Companion. I realize that's your point, but just to point out that you can see the individual DSP blocks inside gnss-sdr's source code.
[17:13:45] <Macuser> yeah I see the tracking code now
[17:13:52] <DerekKozel[m]> Hopefully they can be of some use. Any GNSS implementation will be for the existing signals. I don't know what adaptations you're planning
[17:14:51] <Macuser> it's possible I could adapt this with LimeSDR I think
[17:15:31] *** Joins: prime (~prime@user/prime)
[17:15:51] <DerekKozel[m]> Most SDRs should work
[17:19:11] <Macuser> yeah as long as I can do int12_t type
[17:20:45] <DerekKozel[m]> You can convert to/from data types pretty easily if needed
[17:20:58] <Macuser> true
[17:25:07] <drmpeg> I worked with Dr. Jim Spilker (GPS principal architect) many years ago at his company Stanford Telecom. https://en.wikipedia.org/wiki/James_Spilker
[17:27:19] <Macuser> oh wow
[17:27:37] <drmpeg> He was quite a character. Not a large man, and was heavily into body building. Sometimes he'd come to work all buttered up with tanning oil.
[17:27:42] <Macuser> haha
[17:27:56] <Macuser> i do like lifting weights
[17:28:08] <Macuser> he seems smart enough not to get into steroids 
[17:28:27] <Macuser> "Ford Aerospace Corporation" huh
[17:28:54] <drmpeg> He seemed of natural proportions to me.
[17:29:27] * Macuser builds gnss-sdr 
[17:29:29] <drmpeg> Everybody worked at Ford Aerospace back then.
[17:30:07] <Macuser> my senior project for this cislunar PNT is for one of them aerospace corps :)
[17:32:10] <drmpeg> Yeah, I worked at Stanford Telecom from 1983 until 1992. I tried to continue my military contracting career, but ended up pivoting into video compression.
[17:32:45] <drmpeg> Which was a very good move.
[17:34:21] <Macuser> i'm entering my career in military contracting starting next year officially
[17:34:32] <Macuser> yeah that sounds like a good move for that time
[17:34:51] <Macuser> I keep getting contacted by one of those big HFT hedge fund companies about an RF position though.
[17:35:06] <Macuser> the one that has a lot of ex-Google, ex-Apple employees
[17:35:07] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[17:35:36] <drmpeg> Yeah, things fell apart when Bush Sr. became president.
[17:36:20] <drmpeg> But I had a lot of fun as a contractor. For almost all of those years, I rebuilt the DSP satellite (NORAD missile warning) ground communications network.
[17:38:36] <Blupon>  Macuser | the one that has a lot of ex-Google, ex-Apple employees ---> ? please translate for noobs from the EU :D
[17:39:00] <drmpeg> I got to go inside Cheyenne Mountain. Go to Denver strip clubs with base personnel. Get yelled at by Generals when the system did something weird.
[17:42:22] *** Quits: saba4ka-mumu (~efsearfc@176.59.40.238) (Ping timeout: 252 seconds)
[17:43:44] <drmpeg> The system was used to send missile warning (SCUDS) to the Patriot SAMs during Desert Storm.
[17:45:26] <Macuser> Blupon soo high-frequency trading hedge fund companies.. they do stock trading at very fast speeds to make clients money. And lately there is more interest in using HF (high frequency) RF links to get to nanosecond level
[17:45:52] <Macuser> drmpeg i probably will start my TS/SCI paperwork soon
[17:46:10] <Macuser> norad ground comms sounds very neat
[17:46:39] <Macuser> i got a coworker who talked about that. also was active in desert storm
[17:48:08] <drmpeg> Yeah, that system wasn't replaced until 2005 (I still had contact with the maintainer). 80186 and 80386 processors.
[17:48:39] <drmpeg> So 1988 to 2005, 17 years online.
[17:52:12] <drmpeg> I still have some of the source code on 5 1/4 floppies. I should see if they're still readable.
[17:52:50] <drmpeg> Can a floppy disk last 30 years?
[17:53:31] <Hoernchen> yes
[17:53:38] <Macuser> ohh neat DerekKozel[m] the Lime has a LMS_FMT_I16 data type that can be used. there will be link throughput waste but yeah
[17:53:52] <Macuser> the 4 LSB are just zeros
[17:54:21] <DerekKozel[m]> LSB or MSB? But yes, that's pretty common.
[17:54:42] <Macuser> LSB
[17:55:11] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 268 seconds)
[17:55:12] <Macuser> shifted over left 4 bits
[17:55:15] <DerekKozel[m]> I should check what the USRPs use, or if it's scaling on the FPGA
[17:55:27] <DerekKozel[m]> they have an sc12 format as well on some of the radios
[17:55:41] <DerekKozel[m]> Ah, that's where you started. Whoops!
[18:03:39] <Blupon> Macuser: ah, I see. Thanks for explaining
[18:03:48] <Macuser> np
[18:13:46] <matt_mills[m]> hrm, Rafael Micro gave me pricing on tuner chips, so I think I am now obligated to try to make an SDR 
[18:15:54] <bpadalino> it isn't worth it .. just work on the S of SDR and you'll be a lot happier
[18:16:54] <matt_mills[m]> that's kind of the problem, there isn't anything that fits what I want to do right :|
[18:16:56] *** Quits: Flash (~Flash@user/flash) (Quit: Leaving...)
[18:17:25] <matt_mills[m]> although I have a strong suspicion the venn diagram of what I want to do and what is possible is just two seperate circles
[18:18:02] <drmpeg> Is it possible to build any hardware these days with 52 week lead times?
[18:18:53] <bpadalino> if you work hard, and use stuff that is all in stock, then sure .. but any interesting components i think are all used up
[18:19:28] <bpadalino> i have no idea what you want to build, matt_mills[m]  .. but if you don't know if the venn diagrams overlap, you might be in way over your head
[18:19:44] <matt_mills[m]> most definitely
[18:22:50] <matt_mills[m]> but basically a minimum cost rtl-sdr style dongle that can do channelization and maybe some demodulation in an FPGA... fortunately I'm pretty sure I've found decent outsourced contractors for all the bits I really don't know, which is probably most of it
[18:25:08] <matt_mills[m]> probably dual tuner with 6-10 Mhz/Msps each of bandwidth, but channelized in hardware and selectively sent back to the host
[18:25:08] *** Joins: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net)
[18:25:30] <bpadalino> yeah just work on the software side of things, you'll be much happier
[18:25:36] <matt_mills[m]> Maybe single tuner instead since who knows if that'd fit in a cheap enough fpga
[18:25:48] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[18:26:57] <matt_mills[m]> what happened w/ bladeRF that makes you think that way?
[18:27:33] *** Joins: spithash (~spithash@user/spithash)
[18:30:44] <bpadalino> you need a lot of money to build anything in a quantity enough to get a decent discount, and differentiating on price just isn't that great .. it isn't like the software got any better for them .. and the S is just too big of a component of SDR to really ignore .. what are you really trying to build that's any different than what is already out there?
[18:32:10] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[18:33:05] <matt_mills[m]> something that is targeting the scanner crowd moreso than the developer, but I get your point I suppose
[18:34:02] *** Quits: linext_ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[18:34:04] *** Joins: Zero_Chaos (~zerochaos@gentoo/developer/pentoo/zerochaos)
[18:34:38] <Zero_Chaos> can someone make a uhd 4.1.0.4 release instead of just a tag?  having the fpga images with a version mismatch makes me sad
[18:35:25] *** Joins: Guest998 (~Guest99@2601:5c0:c280:8da0:b901:94bd:a64b:d95a)
[18:37:26] <Guest998> Hey all, Can we control/tune the FPGA blocks inside the SDR B210/N210/x310?  In particular DDC and DUC of FPGA inside SDR. 
[18:37:46] <Guest998> through GNU Radio? 
[18:39:49] <Crofton[m]> <Zero_Chaos> "can someone make a uhd 4.1.0.4..." <- You'll need to email someone at ettus to be sure the message is heard
[18:40:31] <Zero_Chaos> Crofton[m]: usually whining here is effective, but if not I can poke ettus directly :-)
[18:41:20] <matt_mills[m]> https://files.ettus.com/binaries/uhd/latest_release/4.1.0.4/ ?
[18:43:50] *** Quits: uros (~Thunderbi@2001:8a0:6056:700:b112:540a:bd0e:9377) (Remote host closed the connection)
[18:44:03] <Guest998> users name ending with [m] meaning?
[18:44:05] *** Joins: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611)
[18:44:25] <matt_mills[m]> btw bpadalino what you said about quantity, just from my amateur perspective, seems true when you're playing with the higher end stuff, but it seems like lower end stuff that is more mass produced / older doesn't quite scale the same way... especially when you can find a chip and kind of use it for a different purpose than intended, like the realtek adc in the rtlsdr
[18:47:55] <mspears-VE3AGS[m>   File "/home/martin/.grc_gnuradio/tetra_demod.py", line 59
[18:47:55] <mspears-VE3AGS[m>     self.mmse_resampler_xx_0 = filter.mmse_resampler_cc(, resampling_ratio)
[18:47:59] <bpadalino> matt_mills[m]: agree to disagree .. you're still taking someone's line over to build your thing .. and the more you build, the less overhead they have to charge
[18:48:09] <mspears-VE3AGS[m> this is the tetra toolkit, does anyone know how to fix
[18:49:03] <Zero_Chaos> matt_mills[m]: usually its on github and for some reason 4.1.0.4 isn't https://github.com/EttusResearch/uhd/releases
[18:50:02] *** Joins: benoit[m]1 (~benoitgnu@2001:470:69fc:105::e73b)
[18:50:31] *** Quits: uros (~Thunderbi@2001:8a0:6056:700:8b2:4253:3bcc:b611) (Ping timeout: 250 seconds)
[18:53:14] <drmpeg> Guest998: Users ending in [m] are on Matrix. There's an IRC to/from Matrix gateway.
[18:53:24] <Zero_Chaos> matt_mills[m]: also the uhd-images_4.1.0.4 file doesn't appear to be there?
[18:56:42] *** Joins: ssbm (~goldrak@bl16-27-108.dsl.telepac.pt)
[18:57:10] *** Quits: goldrak (~goldrak@dsl-113-65.bl27.telepac.pt) (Ping timeout: 252 seconds)
[19:23:17] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:8b2:4253:3bcc:b611)
[19:27:28] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:8b2:4253:3bcc:b611) (Client Quit)
[19:29:58] <Guest998> can anybody please share an example of usage of "vector sink" extracting data? 
[19:30:08] *** Quits: vladstoyanoff[m] (~vladstoya@2001:470:69fc:105::e6df) (Quit: You have been kicked for being idle)
[19:31:41] *** Joins: uros (~Thunderbi@dsl-56-205.bl26.telepac.pt)
[19:33:28] *** Crofton_ is now known as Crofton
[19:33:35] *** Crofton is now known as Crofton|cloud
[19:34:05] *** Crofton|cloud is now known as Crofton
[19:52:44] *** Quits: Guest998 (~Guest99@2601:5c0:c280:8da0:b901:94bd:a64b:d95a) (Ping timeout: 256 seconds)
[19:53:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 265 seconds)
[20:03:30] *** Joins: Guest9984 (~Guest99@2601:5c0:c280:8da0:7dcf:2406:e92c:807)
[20:05:58] *** Joins: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net)
[20:12:33] *** Joins: yesno (~yesno@109.98.151.179)
[20:21:56] *** Joins: uros1 (~Thunderbi@2001:8a0:6074:ad00:8b2:4253:3bcc:b611)
[20:22:32] <DerekKozel[m]>  Guest998, check the test code from the Out of Tree Modules tutorial
[20:22:33] <DerekKozel[m]> https://tutorials.gnuradio.org
[20:23:26] *** Quits: uros (~Thunderbi@dsl-56-205.bl26.telepac.pt) (Ping timeout: 245 seconds)
[20:23:26] *** uros1 is now known as uros
[20:23:31] <DerekKozel[m]> Users with [m] at the end are on the Matrix chat server which is bridged to IRC
[20:33:31] *** Joins: linext_ (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[20:35:43] <Macuser> well damn... LimeUtil --update is taking quite long
[20:36:03] <Macuser> Just shows the "Connected to..." message
[20:36:09] *** Quits: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Ping timeout: 265 seconds)
[20:36:21] <Macuser> wish i could've had that run in verbose..
[20:36:23] *** Joins: viktorivan (~ivan@2806:101e:7:4d16:d94e:a2c9:ddcc:1ced)
[20:45:53] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:8b2:4253:3bcc:b611) (Quit: uros)
[20:46:55] <Macuser> should've only taken a few mins
[20:52:26] <Guest9984> DerekKozel[m], thanks. 
[20:56:02] *** Quits: bandnyquist (~Rheanna@123.158.85.177) (Ping timeout: 260 seconds)
[21:00:23] <DerekKozel[m]> Guest9984: the UHD tune_request let's you directly control the DDC and DUC frequency shifts from GNU Radio. Check the usrp Source or Sink documentation tab
[21:33:37] <clever> i was just thinking, when you tune something in SDR, are you basically just doing `$signal * sin($x Hz)` to shift the target to a pre-determined freq, and then using something like a FIR filter to select the bandwidth your interested in?
[21:35:51] <Hoernchen> yes , something like that. might also  be complex, might get converted to complex later, etc..
[21:36:30] <Hoernchen> the filter might also just be a very selective antenna and the freq might also just be 0
[21:36:52] <clever> yeah, if you dont need to change the freq, thats an option
[21:37:43] <bpadalino> so the big revelation was that software is doing a frequency shift on some samples ?
[21:38:17] <clever> ive known that was a thing for a while, but when playing with the math behind FIR, i saw it in action for the first time
[21:38:38] <clever> https://docs.google.com/spreadsheets/d/19yh8aeR3jPy8g8fDg-ueJREEJvhNLJrYVDUEDwhpsI8/edit#gid=0
[21:39:03] <clever> this will take 2 sine waves of a configurable freq, with a configuable phase offset, and mult them together
[21:39:55] <bpadalino> what does this have to do with a FIR filter ?
[21:40:22] <clever> bpadalino: a FIR filter, is just the sum of the mult for each sample vs the list of coefficients of the filter
[21:41:11] *** Joins: mrdon (~mrdon@pool-100-1-63-143.nwrknj.fios.verizon.net)
[21:41:17] <clever> as the 2 sine waves in my spreadsheet go out of phase, the freq doubled sine wave will shift from 0 to +1, down to -1 to 0
[21:41:42] *** Quits: OnAironaut (~OnAir@user/onaironaut) (Remote host closed the connection)
[21:42:16] <clever> and a FIR filter is just running that entire spreadsheet on the last N input samples, suming it up, then shifting the input by 1 sample and repeating
[21:42:40] <clever> so the target freq will drift in and out of phase, re-creating a new sine wave on the output
[21:43:07] <clever> and by stacking sines in the coefficients table, you can select what freqs come back out
[21:43:17] *** Joins: OnAironaut (~OnAir@user/onaironaut)
[21:44:02] <bpadalino> that's a very OFDM-like way of thinking about it i suppose
[21:45:29] <bpadalino> clever: are you familiar with convolution ?
[21:45:35] <clever> nope
[21:45:46] <bpadalino> how about the dot product ?
[21:45:52] <clever> vaguely
[21:50:37] <bpadalino> the multiply-accumulate is basically the dot product/convolution of the FIR filter .. what you described there
[21:50:52] <bpadalino> the weird part is how you are stacking sine waves to create your filter coefficients
[21:52:08] <clever> i think that is basically what http://t-filter.engineerjs.com/ is doing
[21:52:27] <clever> ive not gotten into that end of the math yet
[21:52:55] <clever> if you design a filter, and then go to the source code tab, youll get plain C that implements the whole thing
[22:02:47] <bpadalino> it says it uses parks-mcclellan .. i don't think that stacks sines
[22:03:27] <clever> ah
[22:04:08] <clever> half the problem is not knowing what things like parks-mcclellan are, and theres just too many unknown words being thrown around to just google each of them in turn
[22:08:23] <bpadalino> clever: are you familiar with complex numbers? that might be a good basis to start at .. positive and negative frequencies
[22:08:29] <bpadalino> and baseband representation
[22:09:30] <clever> i have dabbled in complex numbers years ago, but forgotten most of it
[22:10:28] <bpadalino> might be good to refresh yourself on it
[22:10:47] <clever> i can see how negative freqs may help, because the whole `sine * sine` just adds the freqs, but how do you lower the freq
[22:12:17] <bpadalino> https://en.wikipedia.org/wiki/Frequency_mixer - that is something to read and understand as well .. but frequency shifts happen using complex math
[22:12:39] <bpadalino> mostly at baseband
[22:13:48] <clever> and i think SDR typically works by doing I/Q capture, so it can represent minor phase differences beyond what the sample rate could have captured?
[22:16:32] <bpadalino> i don't understand what you're asking or trying to say
[22:17:17] <clever> more just trying to understand a wide range of SDR topics
[22:17:38] <bpadalino> what is the topic that was trying to address ?
[22:18:10] <clever> i have access to a DSP core on the rpi, and want to write some code to make it accelerate some SDR tasks
[22:18:44] <bpadalino> ah .. pick a function and go for it .. convolution is a good one .. or the FFT is a very popular one
[22:18:51] <clever> yeah
[22:19:16] <clever> ive started working on FIR, and it seems to be working, i just need to get a good output path, so i can capture the result and confirm it works right
[22:19:59] *** Quits: viktorivan (~ivan@2806:101e:7:4d16:d94e:a2c9:ddcc:1ced) (Quit: Leaving.)
[22:23:48] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:8b2:4253:3bcc:b611)
[22:29:50] <patchvonbraun[m]> My wild guess is that the DSP core on the Pi CPU won’t actually in practice make anything faster VS just using NEON volk ops.
[22:32:41] *** Joins: bandnyquist (~Rheanna@123.158.85.213)
[22:33:22] <clever> patchvonbraun[m]: but its not part of the arm core
[22:33:40] <clever> patchvonbraun[m]: so you can use that DSP core, AND neon, at the same time
[22:35:01] <clever> but you do have the added complexity, of splitting the work between 2 different ISA's
[22:37:40] <patchvonbraun[m]> And latency. If it’s anything like GPUs the process getting data in and out in a way that “fits” an existing mostly-CPU DSP flow is generally a killer.
[22:37:54] *** Joins: pcero (~pcero@187.135.224.134)
[22:38:20] *** Joins: saba4ka-mumu (~efsearfc@176.59.40.238)
[22:38:43] <clever> patchvonbraun[m]: it will just involve the usual flushing of the arm l1/l2 cache, but you can arrange for the data to already be in the dsp cache from the start
[22:39:27] <funkylab[m]> clever: on the pi (and a lot of other platforms) you're still very memory-bandwidth limited, so "just flushing L1/L2" can have very disastrous effect on your ARM's performance. 
[22:39:54] <clever> funkylab[m]: but you can also arrange it such that flushing the L1/L2 will write to the DSP's L2 cache instead of ram
[22:40:16] <clever> there is a lot of fun features that are hidden within the hw
[22:40:58] <clever> that second L2 cache is 128kb, and will function more like an L3 cache from the arm's viewpoint
[22:41:17] <clever> so if your careful about how much data you keep hot, youll never actually hit dram
[22:42:05] <funkylab[m]> but GNU Radio is currently far from careful or smart. I feel like I had this exact discussion before...
[22:42:56] <Jacob[m]123> having done some coprocessor DSP, unless what you want to do has a high `processor_complexity / data_volume` ratio , VOLK is probably faster, possibly much faster
[22:44:03] <clever> Jacob[m]123: what if the entire pipeline from gnuradio was done as a single set of operations on the dsp?
[22:44:19] <clever> raw samples in, finished data stream out
[22:44:22] <funkylab[m]> clever: then it wouldn't be called GNU Radio :)
[22:44:39] <clever> funkylab[m]: but you could dynamically assemble that program, based on the flow chart?
[22:45:08] <funkylab[m]> you'd laugh, there's a lot of accelerator/dedicated processing element work going on, but shit's hard
[22:46:15] <Jacob[m]123> clever: an important part of GR is not "can i accomplish this DSP related task as computationally efficiently as possible", its more like "can i accomplish this *pretty damn* efficiently in an extensible and generic way so i'm not writing everything from scratch every time". 
[22:47:05] <clever> Jacob[m]123: yeah, thats why i would need it to automatically convert the entire flow chart into dsp code, or it wouldnt be of any use
[22:47:24] <funkylab[m]> don't forget that GNU Radio is a heavy multithreaded, application-processor running, full-multitasking, memory mapping-providing OS-dependent thing. Your smart ways of keeping data fresh and caches hot between an ARM core and a DSP coproc – I'd have much interest in seeing you demonstrate that without taking that ARM away from the OS'es control and doing nothing but talking to the DSP core with it. That drastically reduces what your
[22:47:24] <funkylab[m]> system can do in the rest
[22:48:12] <funkylab[m]> so, no matter of magic "this should be easy to convert" (which honestly, has yet to manifest, I've seen that idea in talks since 2008), you're probably not going to win over just doing SIMD on all cores and ignoring the DSP core
[22:48:22] <patchvonbraun[m]> Abandoning the string of pearls model has been discussed repeatedly over the last 17 years. Nobody has come up with anything even close to a viable implementation
[22:48:55] <clever> my first thought, is to go thru each node in the flow chart, and list off the different implementations that can do that computation
[22:49:16] <funkylab[m]> yes yes
[22:49:21] <funkylab[m]> there's many proof of concept implementations of that
[22:49:24] <clever> and then if you have 2 nodes that can both run on the dsp, basically just concat the 2 functions, and treat it as one bigger node
[22:49:32] <funkylab[m]> yep
[22:49:49] <funkylab[m]> if you're able to fuse DSP operations, that's really cool :)
[22:49:55] <funkylab[m]> but you need to still move the data
[22:50:01] <funkylab[m]> and you still need the synchronization
[22:50:10] <clever> yeah
[22:50:15] <funkylab[m]> and you still get a DSP that's not orders of magnitude faster but actually pretty limited
[22:50:44] <clever> i think the biggest limitation, is that its integer only, and mults can only take 16bit inputs
[22:50:53] <funkylab[m]> no
[22:51:12] <funkylab[m]> the biggest limitation is the contention of sparse resources and sync primitives with the useful arm cores
[22:52:12] <funkylab[m]> the conversion to a "useful" data format can be done within the effort of the data move, most likely
[22:52:43] <funkylab[m]> I mean, I'm really not saying DSP coprocessors aren't very cool
[22:52:44] <funkylab[m]> they are
[22:53:09] <funkylab[m]> but I must try really hard to think of something that would be worse than the pi in terms of making that useful for GNU Radio
[22:54:28] <clever> funkylab[m]: the rpi also has a hw accelerated way to emit 24bit samples from ram on gpio, at a defined rate
[22:54:44] <clever> add in a few DAC's and youve got half of a tx pipeline
[22:55:06] <clever> then you just need a mixer and rf amp?
[22:55:46] <Jacob[m]123> funkylab: i had a beaglebone running GR for a while. that had a more useless coprocessor :)
[23:01:46] <funkylab[m]> Jacob: thinking about Spectrejan's fun (and Crofton's stories) about the Lyrtech SFF+'s coproc...
[23:01:51] <Hoernchen> the older odroids with the mali gpu that is unfortunately split and the parts are not cache coherent is also quite useless... well the gpu part at least.
[23:03:35] <clever> the rpi can be configured so its coherent at the L3 cache layer, which at least avoids the cost of the dram access
[23:06:37] *** Quits: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net) (Ping timeout: 250 seconds)
[23:10:00] *** Quits: Malvolio (~Malvolio@user/malvolio) (Quit: b1 22 74 69 2e b3 93 92 00 e9 f5 41)
[23:11:36] <mrdon> anyone knows where i can find a list of commands for irc
[23:11:55] <mrdon> sorry for the noob questions
[23:14:25] *** Quits: mrdon (~mrdon@pool-100-1-63-143.nwrknj.fios.verizon.net) ()
[23:16:54] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[23:17:05] *** Joins: Malvolio (~Malvolio@user/malvolio)
[23:22:16] *** Quits: pcero (~pcero@187.135.224.134) (Ping timeout: 252 seconds)
[23:24:31] *** Quits: saba4ka-mumu (~efsearfc@176.59.40.238) (Ping timeout: 252 seconds)
[23:26:28] <Macuser> ok this LimeUtil update is frozen
[23:26:31] <Macuser> it ain't finsihed
[23:29:00] <Macuser> ok ctrl+z and redoing it worked
[23:32:48] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[23:48:35] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:8b2:4253:3bcc:b611) (Quit: uros)
[23:48:59] *** Joins: arch3r- (~ben@185.66.194.78)
[23:49:16] *** Quits: arch3r (~ben@185.66.194.79) (Ping timeout: 245 seconds)
[23:50:24] *** arch3r- is now known as arch3r
[23:58:15] <BarryDuggan[m]> mrdon: try this https://libera.chat/guides/basics#irc-commands-cheat-sheet
[23:58:38] <BarryDuggan[m]> we all started as noobs 😉
