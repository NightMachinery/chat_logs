[00:00:46] <jneira[m]> hmm iirc the script uses the default stack.yaml, i have to check it though
[00:01:45] <jneira[m]> tbh dont know how many people uses the install script nowadays, i know it is used due to some users relative recent reports
[00:04:42] <jneira[m]> but the job is clean up the stack-8.10.7.yaml and overwrite stack.yaml with it, not a big deal
[00:05:19] <jneira[m]> and not a big deal for users neither (but they will suppose more `ln`/`cp` for sure :-P )
[00:08:31] <sm> jneira, I'm not sure what you're saying.. you'd agree three separate stack.yamls for ghc 8.10 is a problem, I guess ?
[00:11:01] <jneira[m]> yeah but i think we should keep 8.10.6 and 8.10.7, and maintain the default one supposes a `cp -rf stack-8.10.7.yaml stack.yaml` each time you changes the original one so ü§∑ 
[00:11:46] <jneira[m]> in exchange all users who want a default stack.yaml has to do the cp when they does a checkout
[00:11:58] <jneira[m]> (cp or ln or whatever)
[00:12:23] <jneira[m]> to avoid `--stack-yaml` in each stack invocation
[00:12:58] <jneira[m]> and absolute beginners will get an error with `stack build`
[00:13:00] <sm> jneira: ok, so you're saying you favour the identical copy solution ? put a comment in stack.yaml saying "this is a copy of stack-8.10.7.yaml" ?
[00:13:05] <jneira[m]> yeah
[00:13:22] <sm> ok, I'll implement that for now
[00:13:32] <jneira[m]> sorry i forgot your proposal 
[00:13:47] <sm> separately, why do you want to keep stack-8.10.6.yaml ?
[00:14:58] <jneira[m]> to support `stack install.hs hls-8.10.6` and to be consistent with the supported ghc versions
[00:15:29] <sm> but you have 8.10.7, and you don't support all minor releases of other ghc versions. Why is 8.10.6 getting special treatment ?
[00:15:33] <jneira[m]> i love consistency but sometimes too much :-P 
[00:15:45] <jneira[m]> 8.10.6 is supported yeah
[00:16:00] <jneira[m]> we support 2 minor versions of the last majoer version
[00:16:34] <sm> I have forgotten what is (are) the reason(s) these stack yaml files exist
[00:16:49] <jneira[m]> when 9.0.2 is released and included in the lts we only will support 8.10.7 but 9.0.1 and 9.0.2
[00:17:20] <sm> 1. to make building easy and reliable for stack users.. 2. to document a known-good build plan for each major ghc version.. 3. to support the install script ?
[00:17:48] <jneira[m]> yeah, a perfect summary
[00:18:13] <sm> and the install script uses the stack yamls.. why ? because they are the most reliable ?
[00:19:02] <sm> and who uses this install script.. a few folks, you reckon ? who don't want to use ghcup ?
[00:19:08] <jneira[m]> historical reasons, in the origin (hie) the mainl way to install the ide was stack via the install script
[00:20:11] <sm> fendor was proposing to drop stack yamls, I guess they don't think the install script is that important
[00:20:28] <jneira[m]> the install script should be changed or removed tbh
[00:20:40] <jneira[m]> changed to not be tied to stack.yaml's
[00:21:08] <jneira[m]> although not sure how could that work for stack
[00:21:12] <sm> could it be retired, now that ghcup is popular ? I had never heard of hls-install
[00:21:30] <jneira[m]> yeah, some users mentions it from time to time
[00:21:49] <jneira[m]> i guess users who start to use the ide when it was the main way to install
[00:22:48] <jneira[m]> but i still would keep those stack.yaml's due to the other reasons you mentioned
[00:23:23] <jneira[m]> although i should not argue about keeping stack yaml files with a stack power user :-P 
[00:25:08] <jneira[m]> ailrun (hls maintainer not here) also uses stack, maybe we should open an issue about and see what does people think
[00:25:12] <sm> excuse my disruptive questions, I'm just pulling on all the strings which seem to prevent cleanup of the stack yamls
[00:26:12] <jneira[m]> no problem at all, things should be revised and reevaluated to help in make progress :-) 
[00:26:24] <sm> as an ignorant outside, it looks there is more maintenance complexity here than you can afford, and perhaps some ruthless decisions would help
[00:27:20] <sm> the install script looks cool, but I wonder 1. who uses it 2. who knows about it 3. how you discover it 4. when it's the best solution 5. why it's needed ....
[00:27:44] * sm built hls with the stack yaml, in the usual way
[00:28:57] <jneira[m]> ok, what do you think about open an issue to discuss the stack.yaml's status and the install script?
[00:29:51] <jneira[m]> i would be opened to remove the script if nobody disagree
[00:30:02] <sm> I would subscribe and try to comment, but I can't really afford to discuss much outside of chat
[00:30:25] <sm> or to stay on-task across multiple days/weeks
[00:30:36] <jneira[m]> dont worry, will open it
[00:30:45] <sm> üëçÔ∏è
[00:35:20] <sm> back to my hls-on-hls startup failure.. here's a simpler example, with cradle referencing the specific file - why isn't this working ? https://bpa.st/NO3A
[00:41:06] <jneira[m]> https://github.com/haskell/haskell-language-server/issues/2491
[00:42:40] <jneira[m]> hmm that is a `stack repl` think, there are several executables named Main.hs and it does not know what to pick
[00:42:52] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[00:42:57] <jneira[m]> if you do `stack repl` in the project root dir i guess stack would tell you the same thing
[00:48:57] <sm> jneira: no, stack repl at the command line with that component works:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/286eb90c52eb26a07dd3973d8d10b457f2cfb725)
[00:49:09] <jneira[m]> but not sure what is going on, it should do a `stack repl haskell-language-server:lib` 
[00:49:12] <sm>  * jneira: no, stack repl at the command line with that component works:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/8f00246d978e90c7329c6b5d44a86fb9e10d4a27)
[00:49:22] <jneira[m]> yeah
[00:49:44] <jneira[m]> ü§î
[00:50:06] <jneira[m]> did you try to load hls with no hie.yaml?
[00:50:17] <jneira[m]> (to compare the behaviour)
[00:55:33] * jneira[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/bb7668f6b0396b7a32dc57a9fad4ce115a711dbb
[00:56:35] <jneira[m]> it will take 30 minutes to warm the cache 
[00:57:04] <sm> jneira: trying again with no hie.yaml now. All yesterday and earlier this morning it was failing in a similar way (ambiguous component), but now it's loading a bunch of files; I don't know why
[01:05:02] <sm> the complex hidden state and numerous failure modes are pretty nightmarish for hls
[01:05:25] <sm> a dream when it all works
[01:05:58] <sm> I'm not blaming hls, I mean to describe the system of hls and all that it has to work with
[01:06:16] <jneira[m]> yeah, too movin pieces and not enough good error reporting imo
[01:06:36] <sm> yes, diagnostics and surfacing the right information to the right user in all cases seems key
[01:06:54] <sm> s/right user/user/
[01:07:31] <jneira[m]> the architecture and sepration of concerns is nice but makes more difficult those things
[01:08:55] <jneira[m]> michaelpj and me talked recently about improve the troubleshooting docs, it wuld help too 
[01:09:12] <jneira[m]> s/wuld/would/
[01:09:17] <sm> yes indeed, docs are usually the cheapest first solution
[01:09:30] <sm> not cheap, but cheapest
[01:10:11] * sm tries not to open that kettle of fish
[01:10:24] <jneira[m]> specially for things which are gonna not be fixed at short term cause they are blocked upstream 
[01:11:00] <jneira[m]> or tied to how things are designed so needs big changes
[01:11:56] <jneira[m]> > Progress 70/231: ghc-lib-parser, haskell-src-exts, pretty-simple
[01:13:35] <jneira[m]> the cradle/hie-bios is one of the weak points, as it has to talk with build tools and their oddities
[01:14:01] <jneira[m]> hope the show-build-info thing will improve that 
[01:20:37] <sm> `/Users/simon/Library/ApplicationSupport/Code/User/globalStorage/haskell.haskell/haskell-language-server-1.5.1-darwin-9.0.1 src/Ide/Main.hs` completed its building and now is giving me ghcide compiled against GHC 9.0.1 but currently using 8.10.7, I don't know why
[01:21:04] <sm> IDKW <- my mantra with hls :-)
[01:26:54] <jneira[m]> you removed the hie.yaml so it is using stack.yaml hence 8.10.7
[01:27:37] <jneira[m]> so `/Users/simon/Library/ApplicationSupport/Code/User/globalStorage/haskell.haskell/haskell-language-server-1.5.1-darwin-8.10.7` should work
[01:28:36] <jneira[m]> (other weak point, how much hls is tied to ghc)
[01:32:25] <sm> jneira: thanks, you're right
[01:35:39] <sm> so I ran haskell-language-server-1.5.1-darwin-9.0.1, but it built everything for 8.10.7. Why 
[01:35:42] <sm> ?
[01:36:24] <sm> I guess with no hie.yaml it detected stack and used the default stack.yaml
[01:36:41] <jneira[m]> yeah just that
[01:36:54] <jneira[m]> <jneira[m]> "you removed the hie.yaml so it..." <- ^^ this, no?
[01:38:29] <sm> so it looks like if I have no hie.yaml and let it use ghc 8.10, I can get hls working on hls. Still wondering why the hie.yaml specifying stack-9.0 doesn't work, but it seems not a blocker
[01:39:46] <jneira[m]> if i would have to tell my coworkers they have to execute a eclipse compiled (not even executed) with the same java version of the project to be loaded in the ide they will think i am totally crazy :-D
[01:40:25] <sm> now, I have no hie.yaml but Start Haskell LSP Server is still starting haskell-language-server version: 1.5.1.0 (GHC: 9.0.1). I wonder why that is.
[01:42:44] <jneira[m]> maybe the lsp log could help
[01:42:56] <jneira[m]> it has a client side output you can set to debug
[01:43:17] <jneira[m]> and it logs the different calls to hls-wrapper and hls
[01:44:01] <jneira[m]> but i would say it should use 8.10.7
[01:52:26] <sm> jneira: the lsp log would be from some helper tool hls is running ? which is that ?
[01:55:36] <jneira[m]> oh sorry i thought you had to check it, it can be found in vscode itself, see https://github.com/haskell/vscode-haskell#investigating-and-reporting-problems
[01:55:54] <sm> thanks!
[01:57:23] <sm> right click Haskell Language Server -> right click Haskell 
[01:57:27] * jneira[m] making progress up to 174/231
[01:59:43] <sm> ouch
[02:00:33] <sm> doh.. this time it starts ghc 8.10. Probably the troubleshooting guide's "restart vs code" step helped. That bites me a lot.
[02:01:12] <jneira[m]> sm: corrected :-) 
[02:03:11] <sm> the implicit cradle doesn't work for all paths, which I guess is expected. "No cradle found for install/src/Stack.hs"
[02:04:08] <sm> I set Haskell ‚Ä∫ Trace: Client to "error", hoping for less noisy output, but didn't notice a difference
[02:04:24] <jneira[m]> yeah, that "subproject" does not work when opened the project root dir
[02:04:38] <sm> the noise makes it very hard to spot the useful log lines
[02:04:53] <jneira[m]> i usually open ./install in vscode when i worked on it
[02:05:18] <sm> I see, that's a good tip
[02:05:20] <jneira[m]> in the lsp log? env vars f.e.?
[02:05:39] <sm> I mean the vs code Output > Haskell pane
[02:06:54] <jneira[m]> ya, in the [client] part, the server one (after the extension executes hls) or both?
[02:07:11] <jneira[m]> the excessive noise i mean
[02:10:47] <sm> jneira: I don't see what you're referring to. I'll answer by pasting the pane's content (a short example): https://termbin.com/xamue . The WARNING hls line is the useful one here, but it's hard to see. This is with Haskell > Trace > Client and Server both set to "off". 
[02:23:23] <jneira[m]> do not you have lines like:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7987ad02b0926997978dbce92042deaa98edcf7e)
[02:23:40] <jneira[m]> well if you have client to off you will not get them
[02:24:28] <jneira[m]> but they are useful cause it logs how the hls executable is discovered
[02:24:55] <jneira[m]> time to go bed, good night!
[02:27:53] <sm> jneira: the paste is all the lines I have there
[02:28:07] <sm> (with these settings). Not to worry. Good night!
[02:30:20] * sm should look for a vs code extension to highlight lines matching patterns in the Output pane
[02:40:40] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:40:57] *** hololeap_ is now known as hololeap
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[03:30:04] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[03:30:04] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[03:30:05] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[03:30:06] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (*.net *.split)
[03:30:06] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[03:30:06] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[03:30:38] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[03:30:47] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[03:30:51] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[03:31:23] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[03:32:52] *** Joins: carbolymer (~carbolyme@dropacid.net)
[03:33:15] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:35:09] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[03:36:28] *** Joins: w1gz (~do@159.89.11.133)
[03:39:56] *** Joins: libertyprime (~libertypr@203.211.78.24)
[03:40:08] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[04:24:20] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:41:05] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[06:36:35] <sm> for the "things that help mac m1 users" how-to:
[06:36:35] <sm> - try very hard to ensure all your haskell tool binaries are arm, or at least not mixed arm and intel ! ghcup may be the best way right now
[06:36:35] <sm> - after changing architecture of haskell tool binaries, rm -rf ~/.cache/hie-bios (and maybe ghcide and any other haskellish dirs)
[07:35:08] <sm> great! Output Colorizer extension is good for vs code users
[07:43:06] <sm> also, in settings.json:
[07:43:06] <sm>     "[Log]": {
[07:43:06] <sm>         "editor.wordWrap": "off"
[07:43:06] <sm>     },
[08:50:39] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[09:11:34] <jneira[m]> <sm> "great! Output Colorizer extensio..." <- nice, will suggest that in the extension readme
[09:11:54] <jneira[m]> > <@simonmic:matrix.org> also, in settings.json:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/461b9f4d0cba23fb4b8324f599ac36513e5ab538)
[09:12:14] <jneira[m]> but logging has to be improved
[09:12:59] <jneira[m]> errors are not reported, proper log levels including at least error, info and debug, etc
[09:41:12] <sm> jneira: non wrapped lines, easier to scan
[15:47:12] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[16:29:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:30:00] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:05:33] *** Joins: arrowd (~arr@2.94.236.140)
[17:26:13] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[18:13:39] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:00:22] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[20:07:13] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:07:51] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:49:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:45:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:57:32] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[21:57:59] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[22:18:30] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Quit: coot)
[22:19:55] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[23:23:48] *** Quits: arrowd (~arr@2.94.236.140) ()
[23:35:19] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
