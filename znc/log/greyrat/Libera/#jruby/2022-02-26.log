[01:19:11] <headius> enebo: I'm going to merge the Random fixes but on the fence about switching to the securerandom gem
[01:19:53] <enebo[m]> headius: because of the out of sync issue with MRI?
[01:20:18] <headius> well that's part of it, but more because we lose our native SecureRandom
[01:20:21] <enebo[m]> ah
[01:20:28] <headius> but the code in there is mostly replaced by native stuff added to Random
[01:20:49] <enebo[m]> so a bit more Ruby around the native pieces
[01:20:56] <headius> the gem has like 100 lines of Ruby code total and backends on the Random bytes feature
[01:21:17] <headius> https://github.com/ruby/securerandom
[01:21:53] <enebo[m]> I guess the larger question is who will end up with this as a transitive dep from their gems?
[01:22:31] <headius> yeah I can check reverse deps on rg.org
[01:22:34] <enebo[m]> If we install the gem then I guess we would also still work so long but we could not install it by default and just have the second impl
[01:22:56] <headius> not many
[01:22:58] <headius> https://rubygems.org/gems/securerandom/reverse_dependencies
[01:23:14] <enebo[m]> I just assume as a non-default a trans dep would just more or less replace the namespace since they would have the same methods
[01:23:22] <headius> but it will be one more library we don't have to maintain
[01:23:28] <headius> it would if explicitly activated yes
[01:23:44] <headius> it might complain about overwriting ours
[01:24:00] <enebo[m]> I think in the long run anything default will end up deep down in trans deps
[01:24:01] <headius> and if not activated it might not get used at all because we will find stdlib version and no default gemspec
[01:24:16] <headius> yeah most likely
[01:24:17] <enebo[m]> So working in the gem is obviously really important but whether we ship it or not is a different question
[01:24:39] <headius> so I guess the main question is whether we want to update our native version to have the same functionality and ship that in the gem, or just use the gem
[01:24:53] <headius> you can see the code is pretty basic 
[01:24:58] <enebo[m]> ok so if it doesn't activate then only issues would be API changed in an unexpected way or there was a security fix
[01:25:09] <headius> yeah
[01:25:28] <enebo[m]> I don't really know how hot this is and obviously I don't even know if there is a perf difference
[01:26:15] <headius> yeah I guess we should just go with the gem and deal with perf if it is a problem (which it probably will not be)
[01:26:26] <enebo[m]> If it is same speed then it seems like moving to gem and default would mean less code for us but more coordination maybe
[01:26:30] <enebo[m]> but we definitely need to have the gem work
[01:26:45] <enebo[m]> yeah seems reasonable to me
[01:26:51] <headius> ok
[01:27:24] <enebo[m]> I have wondered about whether we will have a situation where we decide to ignore a gem or we use some internal version if we detect it is safe to do so
[01:28:02] <headius> yeah there may be cases
[01:28:38] <headius> we also still have to do something about bigdecimal and openssl because their maintainers are fully against merging JRuby code in (which is why I proposed having -java versions of those gems that depend on our gems)
[01:29:39] <enebo[m]> yeah I think that sounds like the right workaround.  They never have to do anything at that point other than perhaps let us know of API changes
[01:30:13] <enebo[m]> They will still get issues opened against them I bet but what can you do?  They have the name of the gem and we all need to work
[01:30:40] <headius> yeah nobu was questioning why we have to merge our impls into their ext gems today
[01:33:36] <enebo[m]> like he didn't understand the basic issue?
[01:34:00] <headius> I didn't get more out of him yet...
[01:34:19] <headius> "Is this kind of full merger really necessary?
[01:34:19] <headius> Eventually two different gem files will be released, and only few files and the version number will be shared."
[01:34:40] <enebo[m]> yeah but we have to release with the same name
[01:34:58] <headius> I explained that but it was likely after hours for him
[01:35:05] <enebo[m]> yeah
[01:35:08] <headius> so I will see what he thinks the alternative is whenever he's back
[01:35:29] <enebo[m]> Also the Ruby calling into the same native methods means Ruby can change for fixes and both work
[01:35:55] <enebo[m]> Obviously that is true for a securerandom but less so for openssl
[01:36:17] <headius> yeah I can understand the reluctance on larger gems but we still have to have the name
[01:36:38] <enebo[m]> and indirecting all of them through an empty top-level name would suck
[01:36:56] <headius> maybe he believes it would be better for us to maintain a separate repo with our version of the gem, but then we're duplicating tests in three places (including CRuby repo) and still have to release in lock step with them or JRuby users break
[01:36:56] <enebo[m]> that also absolves them from keeping us in sync at all
[01:37:16] <headius> so it doesn't seem helpful to split the repo by Ruby impl
[01:37:18] <enebo[m]> and I am not saying they need to do the work as much as not just pretend we will magically fix it after we notice it came out
[01:37:46] <enebo[m]> yeah this is definitely something which needs coordination
[01:38:15] <enebo[m]> I do sympathize that we create some extra burden but it is not a surprise...we have been around for 20 years
[01:38:27] <headius> indeed
[12:30:17] *** Quits: MattWelke[m] (~mattwelke@2001:470:69fc:105::1:34bb) (Quit: You have been kicked for being idle)
[12:30:17] *** Quits: Albertico[m] (~albertico@2001:470:69fc:105::1:3a89) (Quit: You have been kicked for being idle)
