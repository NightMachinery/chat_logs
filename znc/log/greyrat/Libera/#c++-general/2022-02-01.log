[00:09:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:10:41] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[00:11:48] *** Joins: ivii (~ivan@user/ivii)
[00:12:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:8844:e45a:1aab:92c2) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:13:03] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:13:44] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Ping timeout: 268 seconds)
[00:16:44] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[00:17:13] *** gentooclimax is now known as climax
[00:19:52] *** climax is now known as gentooclimax
[00:26:37] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[00:28:20] <rpav> if we had `return break VALUE;` i think things could be done
[00:29:40] <rpav> working on this little shell _thing_ and implementing similar, i think it would work in C++ for the same thing, e.g. for some `T x = a().b().c();` any of the functions could `return break T` causing the expression to be interrupted and setting T to the value
[00:30:02] <LordKalma> whenever I read C++ from this channel I realize I don't know C++
[00:30:27] <rpav> `S foo() break(T) { ... }`
[00:32:28] <rpav> would, i think, solve the chaining-optionals issue; you could chain things returning optionals, and any given function `f() break(std::nullopt_t)` could `return break std::nullopt;`
[00:32:49] <rpav> also would work for variant-error returns and such
[00:32:56] <kalven> c++ programmer discovers monads, more as this unfolds
[00:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:04] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:35:36] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:36:25] <rpav> _might_ actually be able to do that for "local exceptions" too, in like operator= .. you could handle the error at the top of the stack and have some way to return/punt
[00:39:47] *** Joins: proller (~p@2a02:6b8:0:40c:719b:8280:632b:2bf5)
[00:42:21] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[00:43:30] *** Joins: ivii (~ivan@user/ivii)
[00:45:42] *** Quits: magla (~gelignite@55d4be51.access.ecotel.net) (Quit: Stay safe!)
[00:48:11] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:49:09] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[00:51:27] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:52:43] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 256 seconds)
[00:54:39] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:58:27] *** gentooclimax is now known as climax
[01:01:34] <LordKalma> when I read sentences in this channel I realize I don't know shit
[01:01:37] <LordKalma> wtf is a monad
[01:02:05] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87)
[01:02:05] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87) (Changing host)
[01:02:05] *** Joins: skapata (~Skapata@user/skapata)
[01:03:02] <oj> Alipha: thanks! That's already pretty close
[01:03:19] <PJBoy> oh hey I missed this https://gitlab.kitware.com/cmake/cmake/-/issues/18355#note_1134613
[01:03:33] *** climax is now known as gentooclimax
[01:03:35] <PJBoy> MSVC have given their support to CMake
[01:03:38] <PJBoy> for modules
[01:03:44] <LordKalma> yay
[01:04:10] <LordKalma> Hoffmann did say in that talk they'd need "compiler vendors to throw us [cmake] a bone"
[01:04:15] <LordKalma> and that's what he meant
[01:04:17] <LordKalma> great to see it
[01:04:23] <PJBoy> yup yup :)
[01:05:00] <PJBoy> also don't worry, I don't know what a monad is either
[01:05:01] <Alipha> oj: note that there's 3 different implementations on the "C++ source #1"--the first 2 are commented-out. all of which produce the exact same assembly. so, i would go with the first one (that's commented out) instead of the other two, as it's the most straightforward
[01:05:05] <PJBoy> I just know that it doesn't matter
[01:05:23] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[01:05:34] <PJBoy> I think monads are just wrappers
[01:06:15] *** Joins: ivii (~ivan@user/ivii)
[01:06:33] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[01:06:40] *** Joins: markong (~kvirc@213.146.188.203)
[01:07:08] <PJBoy> also those member functions they added to std::optional are "monadic"
[01:07:33] <PJBoy> https://en.cppreference.com/w/cpp/utility/optional#Monadic_operations these ones
[01:08:00] <johnny> it's burrito time
[01:10:12] *** Joins: c4017w (~c4017@209.52.68.8)
[01:10:24] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[01:10:42] <rpav> LordKalma: monads are an overly obtuse name for what you basically get by `cout << a << b << c`
[01:10:56] <LordKalma> https://en.wikipedia.org/wiki/Monad_(functional_programming)#An_example:_Maybe
[01:11:06] <LordKalma> according to wikipedia, std::optional is itself a monad :p
[01:11:08] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[01:11:18] <cbreak> rpav: a stateful object on which you can call operators, that return said object?
[01:11:32] <oj> Alipha: but is that run at compile time?
[01:11:35] <LordKalma> "In functional programming, a monad is a type that wraps another type and gives some form of quality to the underlying type. In addition to wrapping a type, monads define two functions: one to wrap a value in a monad, and another to compose together functions that output monads (these are known as monadic functions). "
[01:12:08] <oj> it's so weird to reason about constexpr
[01:12:18] <rpav> it's just about chaining
[01:12:31] <cbreak> LordKalma: so... crtp enable_shared_from_this is a monad?
[01:12:46] <LordKalma> okay, so nobody here understands monads anyway, got it
[01:12:52] <PJBoy> exactly
[01:12:52] <cbreak> not me.
[01:12:58] <Alipha> oj: in the generated assembly, the for loop got unrolled into 3 compares and 3 jumps.
[01:13:00] <LordKalma> now to learn TMP because that one you see to get
[01:13:04] <PJBoy> I mean I think rpav actually does, 'cause he's into lisp
[01:13:08] <oj> yeah, I just looked at it
[01:13:10] <cbreak> the one thing I was not good at at university.
[01:13:12] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:13:15] <cbreak> well, maybe one of the three things
[01:13:18] <cbreak> or four...
[01:13:34] <oj> I suppose it can't be more efficient than that, really
[01:13:34] <PJBoy> they never taught us about monads in uni
[01:13:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:13:41] <LordKalma> in portugal, grades are given from 0...20, 10 is the minimum passing mark
[01:13:42] <rpav> PJBoy: monads are more a FP thing than a lisp thing
[01:13:47] <PJBoy> although they did teach us some haskell
[01:13:53] <LordKalma> during my years at Uni, I collected all marks from 10 to 20
[01:13:55] <PJBoy> I thought lisp was FP
[01:14:07] <cbreak> at mine they tried, in functional programming course (with haskel). Maybe also in theoretical computer science, but I don't think so
[01:14:12] <LordKalma> ddepending on what I liked haha
[01:14:31] <rpav> and i only remember the bullshitty definitions when i look it up and refresh my memory, but it does not, from anything i've ever seen, give you flow control over the caller
[01:14:49] <LordKalma> as a half-physicist I think I'd learn monads in algebra before I'd learn them in programming
[01:14:55] <LordKalma> but I only had linear algebra
[01:14:56] <Alipha> oj: and being constexpr, `constexpr int blah = get_value(my_enum::foo);` is valid
[01:15:00] <PJBoy> monads aren't in algebra
[01:15:09] <LordKalma> only the real physics majors had real algebra
[01:15:34] <xkoncek> i had algebra
[01:15:35] <cbreak> we had algebra too... :(
[01:15:41] <rpav> possibly in haskell you could sortof implement such by returning something taking advantage of lazy eval or mapping every operation to identity, but not really the same thing and relies on haskelly non-monadic thing
[01:15:52] <xkoncek> rings and crap
[01:15:52] <LordKalma> algebraists do not distinguish between homeomorphic spaces
[01:15:53] <oj> Alipha: that part I understand, it's mostly the fact that the function can also be ran at runtime
[01:15:56] <LordKalma> always remember that
[01:16:00] <cbreak> I think it would have been useful to learn that stuff
[01:16:03] <oj> that I think is confusing my brain
[01:16:10] <PJBoy> LordKalma, nor do git users
[01:16:18] <LordKalma> oj, constexpr is just a suggestion
[01:16:25] <oj> yes, I know
[01:16:29] <LordKalma> it evaluates at compile time if it can
[01:16:34] <LordKalma> just compiles the code if it can't
[01:16:39] <LordKalma> consteval.. not that's real talk
[01:16:42] <LordKalma> *now
[01:16:56] <PJBoy> consteval functions can technically be executed at runtime
[01:17:04] <LordKalma> bbut they had to make consteval complicated with the "consteval context" bullshit
[01:17:06] <PJBoy> they just must be called in a constexpr context
[01:17:12] <LordKalma> ^that
[01:17:15] <LordKalma> for fucks sake
[01:17:18] <PJBoy> hehe
[01:17:29] <PJBoy> it's because the standard doesn't dictate anything about compile time or runtime
[01:17:36] <PJBoy> that's left to the common sense of compiler writers
[01:17:55] <LordKalma> so they have to write around that?
[01:18:13] <oj> constexpr context is a pretty clear concept I think
[01:18:20] <PJBoy> constexpr demands that a function can be used to generate a constant expression
[01:18:22] <LordKalma> man, I tell you, I'm right when I say what the standard decides to acknowledge is just random
[01:18:29] <PJBoy> and constant expressions can be used in various places
[01:18:44] <PJBoy> consteval demands that a function can *only* be used to generate a constant expression
[01:18:46] <LordKalma> filesystems: exists. DLLs: what's that shit
[01:18:46] <oj> constant expressions just happen to be useful at compile time
[01:19:16] <PJBoy> but yeah nothing stops the compiler from making non-constexpr code compile time eval'd, and constexpr code can technically be runtime eval'd
[01:19:26] <PJBoy> the same way that a string literal can be created at runtime
[01:19:44] <kalven> LordKalma: not random at all. filesystem came from boost
[01:19:55] <oj> as long as it's semantically correct, it doesn't matter when it's evaluated imo
[01:19:55] <LordKalma> kalven, not the library
[01:20:30] <PJBoy> and this allows for things like JIT I guess
[01:20:35] <oj> (from a language design perspective)
[01:20:38] <PJBoy> good things come from being incredibly vague
[01:20:45] <kalven> LordKalma: what do you mean then?
[01:20:58] <LordKalma> I mean acknowledging that C++ code runs on machines with file systems is necessary to define <filesystem> in the standard text
[01:21:20] <LordKalma> but at the same time, the standard doesn't acknowledge DLLs
[01:21:35] <kalven> What would you like the standard to say about DLLs?
[01:21:38] <oj> well, you can't write a c++ source file without a file system
[01:21:40] <LordKalma> the standard acknowledges separate compilation, doesn't acknowledge compile-time?
[01:21:43] <PJBoy> modules don't require the concept of files to exist, but there's a filesystem library in stdlib o_O
[01:21:45] <LordKalma> kalven, it's just an example
[01:21:48] <rpav> the standard only barely acknowledges code gets compiled, and i'm still pretty sure it's technically UB
[01:21:55] <PJBoy> ahaha
[01:22:02] <LordKalma> !grab rpav
[01:22:02] <nolyc> LordKalma: The operation succeeded.
[01:22:11] *** Quits: proller (~p@2a02:6b8:0:40c:719b:8280:632b:2bf5) (Ping timeout: 268 seconds)
[01:22:34] <rpav> i searched fairly thoroughly i think and nothing actually explicitly seems to allow code to be compiled :P
[01:22:42] <rpav> it acknowledges one or two things that happen when it _does_
[01:22:46] <PJBoy> what about phase 9 of translation?
[01:22:54] <oj> I think there's a C++ implementation that runs on Micro$oft's Common Language Infrastructure VM
[01:23:08] <LordKalma> oj, not standard C++
[01:23:14] <kalven> oj: there's even one that runs in your browser
[01:23:16] <rpav> PJBoy: where is translation again
[01:23:22] <LordKalma> you're thinking C++/CLR
[01:23:25] <PJBoy> that's what I'm trying to find >_>
[01:23:28] <LordKalma> which is extended
[01:23:37] <PJBoy> http://eel.is/c++draft/lex.phases
[01:23:50] <PJBoy> *phase 8
[01:23:53] <LordKalma> when you standardize something you have to find a balance between like being general and aknowledging the real world. It's just funny the curvy boundaries of the c++ standard
[01:24:02] <PJBoy> or phase 7?
[01:24:13] <LordKalma> like, you can think about for example any kind of law, regulation, or soemthing
[01:24:15] <LordKalma> it's all the same
[01:24:31] <PJBoy> phase 9 talks about linking libraries
[01:24:47] <PJBoy> > All external entity references are resolved. Library components are linked to satisfy external references to entities not defined in the current translation. All such translator output is collected into a program image which contains information needed for execution in its execution environment
[01:25:18] <PJBoy> it doesn't talk about files, but yeah
[01:25:25] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[01:25:53] <oj> I guess they could be stored as objects
[01:25:56] <oj> in object storage
[01:26:01] <PJBoy> exactly
[01:26:13] <PJBoy> or uploaded straight into RAM
[01:26:17] <LordKalma> everything's a dumpster fire
[01:26:24] <PJBoy> which actually happens
[01:27:19] <PJBoy> there's even a note that says "Source files, translation units and translated translation units need not necessarily be stored as files"
[01:27:22] <oj> can you compile a c++ binary straight into the MBR
[01:27:29] <oj> possibly
[01:28:31] <PJBoy> seems like something IBM still rely on
[01:28:41] <rpav> PJBoy: it _may_ be "instantiation unit" but i'm not seeing a definition of such
[01:28:43] <LordKalma> when in doubt, IMB has a system that relies on it
[01:28:58] <rpav> if it's not, i really don't see where compilation fits ;)
[01:29:01] <LordKalma> fuck them, they make the standard lag 20 years technologically
[01:29:29] <LordKalma> anyway, computers are so advanced machines I have no idea how they actually bootstrap into the OS haha
[01:29:31] <PJBoy> rpav, cppreference at least says phase 7 is compilation
[01:29:34] <LordKalma> all the 1232342345 layers of it
[01:29:42] <PJBoy> so if you user cppreference as your rosetta stone...
[01:30:03] <rpav> others are saying "instantiation unit" is a template thing
[01:30:40] <LordKalma> we need a XVI-th century monk to decipher the sacred texts
[01:30:44] <PJBoy> hm
[01:30:47] <rpav> PJBoy: not seeing much in phase 7 unless one grossly bends note 1
[01:31:27] <rpav> plus, this would require compilation happen before templates are instantiated by the sound
[01:31:31] <rpav> or located
[01:31:31] <PJBoy> phase 7 gets you translation units
[01:31:40] <PJBoy> which I believe corresponds to compiled source files
[01:31:46] <rpav> yeah pretty sure it's "the preprocessor runs and substitutes everything and that's a TU"
[01:31:56] <rpav> no the TU is pre-compilation
[01:32:03] <rpav> still tokens
[01:32:07] <LordKalma> yeah, I thought a TU is the unit you compile
[01:32:22] <LordKalma> which may, or may not, be a source file
[01:32:24] <rpav> _uncompiled_ tokens, because that's where ODR applies
[01:32:35] <LordKalma> but it's whatever goes into the black box that is the compiler
[01:32:39] <PJBoy> hm
[01:32:45] <LordKalma> but hey
[01:32:57] <LordKalma> I rest well knowing y'all also know shit
[01:33:02] <PJBoy> cppref notes that some compilers skip a step
[01:33:12] <PJBoy> ( https://en.cppreference.com/w/cpp/language/translation_phases )
[01:33:15] <LordKalma> like msvc skips optimization?
[01:33:19] <PJBoy> ahahaha
[01:33:35] <PJBoy> so in theory 7 is compilation without templates
[01:33:39] <Alipha> also note that there's technically no c++ program that is guaranteed to not produce UB because all environmental parameters (available ram, etc) are implementation defined.
[01:33:42] <PJBoy> and 8 does the templates
[01:33:58] <PJBoy> and in practice compilers are doing 7 and 8 together
[01:34:05] <PJBoy> is how I interpret that
[01:34:28] <PJBoy> I think `int main(){}` is guaranteed to be well defined
[01:34:29] <rpav> sure, but, it's still really not explicitly allowing compilation... only a few handwavey gestures about things that occur during compilation
[01:34:33] <LordKalma> if I program a card reader in C++, meaning a turing machine, but then run it on limited memory, am I creating UB?
[01:34:41] <LordKalma> (read punch card reader)
[01:34:47] <PJBoy> handwavy is right
[01:35:00] <PJBoy> yeah I agree with your conclusion
[01:35:26] <rpav> LordKalma: c/c++ get turing completeness because they can accept unbounded input / do unbounded output
[01:35:44] <LordKalma> but where the program runs doesn't
[01:36:01] <LordKalma> it was about what Alipha said
[01:36:04] <rpav> well, it can .. if it accepts typing on a terminal and outputs to the terminal, that's sufficient
[01:36:30] <yolo> does exception handling mandate -fno-omit-frame-pointer? otherwise how does it unwind
[01:36:33] <rpav> it's left as an exercise to the reader to manually transcribe and input everything necessary on demand
[01:37:10] <rpav> (though files are not bounded by any offset or pointer size either; turing machines only require "move +/-1")
[01:37:16] <LordKalma> monday evenings are the best time of the week to discuss avant-garde computer science
[01:37:29] <PJBoy> yolo, exception tables
[01:37:45] <PJBoy> you need a lot more than stack frames to do stack unwinding
[01:38:15] <PJBoy> you need tables that point to every new scope
[01:38:33] <yolo> so it's safe to default -fomit-frame-pointer(which is the default to save some size nowadays). I saw this flag once a while but never really paid much attention to it
[01:38:40] <PJBoy> yeah
[01:38:46] *** Joins: badone (~badone@209.132.189.152)
[01:38:50] <PJBoy> sanitizers on the other hand want you to use no-omit
[01:39:00] <PJBoy> probably debuggers too
[01:39:40] <rpav> do people care that much about final binary size still
[01:39:54] <PJBoy> 100%
[01:39:57] <PJBoy> my workplace does
[01:39:58] <yolo> by sanitizer you mean all of them? by default i use ASan and USan, but I'm adding TSan(thread) and LSan(leak), not sure if LSan is really that useful considering ASan might did part of it.
[01:39:58] <Alipha> and the tables point to more than every new scope. e.g., if you have { Foo x; Foo y; /* ... */ } then the exception handler needs to be able to handle the case that x's constructor throws, y's constructor throws, or /* ... */ throws
[01:40:01] <kalven> yes
[01:40:24] <yolo> the reason asking omit-frame is indeed I saw the code using Sanitizers are enabling that flag(i.e. -fno-omit...)
[01:40:26] <rpav> PJBoy: general field / target?
[01:40:31] <PJBoy> Alipha, this is why you should declare your comments noexcept
[01:40:43] <Alipha> !grab PJBoy
[01:40:43] <nolyc> Alipha: The operation succeeded.
[01:40:47] <PJBoy> TV software
[01:40:48] <rpav> like for real embedded i can definitely see it but
[01:40:50] <rpav> ahh
[01:40:51] <PJBoy> for little ARM chips
[01:40:57] <rpav> yeah that makes sense
[01:40:59] <Alipha> ... that'll make absolutely no sense out of context
[01:41:04] <PJBoy> not that little, as they need to fit a browser nowadays
[01:41:22] <PJBoy> but still enough to care about binary size
[01:41:42] <rpav> yeah i guess you might try to save a few bytes with wasm too
[01:41:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:49] <rpav> "the new embedded"
[01:41:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:57] *** ChanServ sets mode: +v npaperbot
[01:42:52] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Quit: leaving)
[01:43:23] <yolo> Thanks. I do embedded, and we have 16MB for the router running c++
[01:43:30] <yolo> size matters
[01:43:42] <rpav> 4TB ssd with 50GB OS on machine with 16GB of ram running a 4GB browser in 1GB of ram with the same concern that you fit what you're loading in roughly the size of a floppy disk
[01:43:45] *** gentooclimax is now known as climax
[01:43:56] <rpav> progress
[01:44:03] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[01:44:38] * yolo is adding -fno-omit-frame-pointer to G++ flags when sanitizer is used
[01:44:52] <PJBoy> good good
[01:44:53] <kalven> running c++ in a sandbox without asking people to download a binary is pretty nice
[01:45:05] <PJBoy> that means you can specify -O1 for your sanitizer builds
[01:45:14] <rpav> not -Og?
[01:45:20] <PJBoy> on -O0 frames aren't omitted anyway IIRC
[01:45:26] <PJBoy> the sanitizer docs say -O1
[01:45:27] *** climax is now known as gentooclimax
[01:45:29] * PJBoy shrugs
[01:45:33] <rpav> oh do they? damn
[01:45:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:45:52] <yolo> -Og -g is what I use for debug, -O2 -g is what for release
[01:46:00] <PJBoy> e.g. https://clang.llvm.org/docs/AddressSanitizer.html#usage
[01:46:03] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:46:15] <rpav> yeah i should adjust my build script
[01:46:41] <yolo> the amazing sanitizer and static typing made my bug debugging really rare, most of them are spotted by the editer(along with g++)
[01:46:42] <rpav> oh, "add -O1 or higher" and -O1 for "perfect stack traces"
[01:46:45] <PJBoy> these other docs confirm https://github.com/google/sanitizers/wiki/AddressSanitizer#using-addresssanitizer
[01:46:51] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:246f:2937:1ec0:9b42) (Ping timeout: 268 seconds)
[01:46:53] <rpav> i usually sanitize with -O2
[01:47:12] <yolo> i the past I wrote the code and spent like forever to debug to just get it run, now, if editor has no issues, 95% is runs well
[01:47:18] <yolo> what a progress
[01:47:21] <rpav> sanitizing release builds can easily lead to different results than sanitizing debug builds .. never skimp
[01:47:21] <PJBoy> > The ulimit -v command makes little sense with ASan-ified binaries because ASan consumes 20 terabytes of virtual memory
[01:47:24] <PJBoy> hah
[01:48:22] <dfkfs> where can I read more about <ctype> functions?
[01:48:27] <PJBoy> cppreference
[01:48:57] <PJBoy> https://en.cppreference.com/w/cpp/header/cctype
[01:49:13] <yolo> dfkfs: if you're a terminal guy, than: cppman ctype
[01:55:38] <sbrothy> heh "terminal guy" :)
[01:56:32] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[01:57:52] <sbrothy> im not much of a terminal appearently. i didnt know cppman!. thank you.
[01:57:56] <sbrothy> *guy
[01:58:14] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[01:59:00] <pulse> i prefer to call it ... console
[01:59:12] <pulse> or even ... command prompt
[02:02:00] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:02:48] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:04:26] <sbrothy> yeh. cant imagine life without it :)
[02:04:45] <sbrothy> even tho.. "command prompt"... ;)
[02:04:47] <sbrothy> hmm
[02:04:53] <sbrothy> sorry, ill take to social
[02:04:56] <sbrothy> nvm
[02:06:23] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:06:23] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[02:10:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:10:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:13:50] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:14:36] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[02:15:56] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[02:20:03] *** PJBoy is now known as Guest7020
[02:20:03] *** Quits: Guest7020 (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[02:20:08] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:21:01] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:24:04] *** Joins: proller (~p@80.240.216.69)
[02:27:34] *** gentooclimax is now known as climax
[02:29:16] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:29:40] *** Joins: proller (~p@2a02:6b8:b081:7207::1:14)
[02:38:27] *** Quits: Leone (~Leo@216.154.23.229) (Read error: Connection reset by peer)
[02:38:32] *** Joins: ferdna (~ferdna@user/ferdna)
[02:44:16] *** climax is now known as gentooclimax
[02:47:39] *** Joins: KombuchaKip (~kip@192.252.230.5)
[02:48:30] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:48:51] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[02:52:46] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (Ping timeout: 260 seconds)
[02:53:14] *** Quits: Fairy (~Fairy@2a02:2121:620:c8cb:bdca:3834:e3a2:8cd8) (Ping timeout: 260 seconds)
[02:53:41] <yolo> I'm terminally vim. configure ALE and coc.nvim and manpages then all is good.
[02:55:51] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:57:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:04:58] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 256 seconds)
[03:05:30] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[03:07:40] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[03:11:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:14:43] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[03:14:54] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:15:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:17:13] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 256 seconds)
[03:23:58] <yolo> cc1plus: error: ‘-fsanitize=thread’ is incompatible with ‘-fsanitize=address’
[03:24:06] <yolo> cc1plus: error: ‘-fsanitize=leak’ is incompatible with ‘-fsanitize=thread’
[03:24:29] <yolo> so I can not use them in parallel
[03:30:20] <Alipha> Nope
[03:37:14] *** gentooclimax is now known as climax
[03:41:02] *** climax is now known as gentooclimax
[03:45:12] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[03:48:15] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[03:49:17] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:52:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 268 seconds)
[03:52:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[03:52:48] *** ChanServ sets mode: +v npaperbot
[03:53:27] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:53:37] *** Quits: MatSharrow (~matthew@117.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[03:58:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 268 seconds)
[03:59:42] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Read error: No route to host)
[04:06:34] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[04:11:53] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:13:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:15:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[04:21:24] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:33:58] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 268 seconds)
[04:35:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:38:54] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[04:40:28] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[04:41:10] *** Joins: seninha (~seninha@user/seninha)
[04:45:20] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[04:45:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:46:03] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[04:46:21] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:46:28] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[04:47:32] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[04:48:09] <nightstrike> is it kosher to have factories that return references instead of pointers, assume they're always const?
[04:48:40] <nightstrike> T const & factory() { T x; return x; }
[04:48:58] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[04:49:32] *** Quits: DrMax (~DrMax@node-1w7jra94757g0j6h7g0ijns3x.ipv6.telus.net) (Ping timeout: 240 seconds)
[04:50:00] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 268 seconds)
[04:50:03] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:51:01] *** Joins: ferdna (~ferdna@user/ferdna)
[04:52:05] <Alipha> nightstrike: i'm assuming you meant `T const & factor() { static T x; return x; }` because otherwise that's a dangling reference. returning a reference is fine--you probably want to delete T's copy constructor and copy operator= so you don't accidentally make a copy of the T object. and the constness doesn't matter--in fact, it seems odd to return a reference-to-const
[04:53:14] <nightstrike> Alipha: I was referring to extending the lifetime of a variable through a const ref
[04:53:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:54:07] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[04:54:17] <nightstrike> Alipha: "The lifetime of a temporary object may be extended by binding to a const lvalue reference or to an rvalue reference (since C++11), " << that thing
[04:54:21] <Donno> nightstrike: The life extension rule don't apply in that situation.
[04:56:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:00:53] <nightstrike> I guess I'm doing it wrong
[05:02:34] *** Joins: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net)
[05:03:10] <Alipha> nightstrike: lifetime extension doesn't work across function call boundaries. and x isn't a temporary.
[05:03:30] *** Quits: DSpider (~DSpider@82.79.237.126) (Quit: Leaving)
[05:05:38] *** Joins: epony (epony@user/epony)
[05:05:39] <nightstrike> yeah, I see that now... it's instead...   T factory();  T const & t = factory();  which is quite a bit different
[05:06:28] <nightstrike> on a completely unrelated note, the code you pasted, Alipha, is rendered in my irccloud browser window as a fixed width font in inside a highlighted box. How'd you do that?
[05:06:55] <Alipha> nightstrike: backticks `
[05:07:08] <nightstrike> `ah neat!`
[05:22:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e0a0:4a54:2ebc:8e0b) (Quit: Quit)
[05:25:28] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4bc:bc38:6fcd:3dae) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:26:38] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 256 seconds)
[05:40:34] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[05:41:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:58] *** ChanServ sets mode: +v npaperbot
[05:43:39] *** Quits: proller (~p@2a02:6b8:b081:7207::1:14) (Ping timeout: 268 seconds)
[05:44:36] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[05:47:07] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[05:53:39] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[05:54:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:57:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:58:43] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[06:01:30] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[06:04:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3c4a:c74a:4ba6:aa08)
[06:04:59] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:11:34] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:21:25] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:42:15] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:43:04] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[06:49:41] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:53:52] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[06:54:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:54:28] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[06:54:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:55:22] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[06:56:40] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3c4a:c74a:4ba6:aa08) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:56:43] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[06:58:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[07:00:11] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:01:20] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[07:02:55] *** Joins: adeliktas71 (~adeliktas@i59F52538.versanet.de)
[07:04:54] *** Quits: adeliktas (~adeliktas@i59F4D64A.versanet.de) (Ping timeout: 250 seconds)
[07:04:54] *** adeliktas71 is now known as adeliktas
[07:07:08] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:08:59] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:12:31] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:14:26] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:24:10] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 268 seconds)
[07:30:22] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[07:32:23] *** Quits: emerent (~quassel@p200300cd57044321ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:33:01] *** Joins: emerent (~quassel@p200300cd57044339ba27ebfffed28a59.dip0.t-ipconnect.de)
[07:35:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[07:37:59] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[07:39:32] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:41:17] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[07:43:30] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[07:45:44] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:49:43] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:51:09] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:56:12] *** Joins: EdFletcher (~PKD@user/edfletcher)
[07:59:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:12:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:12:16] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:12:54] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:13:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:16:10] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:16:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:18:34] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[08:20:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:25:17] *** Quits: jsbach (~jsbach@2a01:c22:a8a7:a100:c869:d0f9:35d2:8283) (Ping timeout: 240 seconds)
[08:37:32] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 240 seconds)
[08:38:46] *** Joins: jsbach (~jsbach@2a01:c22:a866:e900:9133:b6ff:33a0:ceec)
[08:38:52] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:41:57] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:bf9f:4c9f:d685:ef4c) (Ping timeout: 240 seconds)
[08:43:27] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:44:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[08:46:17] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:52:32] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:52:53] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:55:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:56:50] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[08:59:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[09:08:36] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[09:24:04] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[09:25:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:41:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:58] *** ChanServ sets mode: +v npaperbot
[09:46:40] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[09:46:47] *** Joins: ravan_ (~ravan@42.201.198.151)
[09:46:47] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[09:46:47] *** Joins: ravan_ (~ravan@user/ravan)
[09:47:04] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:47:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:51:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:54:40] *** Quits: sigma_ (~sigma@86.57.79.161) (Remote host closed the connection)
[09:55:04] *** Joins: sigma_ (~sigma@164.215.206.157)
[09:55:42] *** Joins: kevr` (~kevr@user/kevr)
[09:56:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:56:27] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[09:56:52] *** kevr` is now known as kevr
[09:58:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:58:17] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[09:59:42] *** Joins: ravan (~ravan@42.201.198.151)
[09:59:42] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[09:59:42] *** Joins: ravan (~ravan@user/ravan)
[10:00:07] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 256 seconds)
[10:00:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:00:30] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[10:09:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:11:17] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[10:25:08] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[10:26:17] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[10:31:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:34:41] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 256 seconds)
[10:41:28] *** Joins: ravan (~ravan@42.201.198.151)
[10:41:28] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[10:41:28] *** Joins: ravan (~ravan@user/ravan)
[10:41:45] *** Joins: kaph (~kaph@an-19-174-100.service.infuturo.it)
[10:50:30] *** Quits: kaph (~kaph@an-19-174-100.service.infuturo.it) (Read error: Connection reset by peer)
[10:50:56] *** Joins: kaph (~kaph@an-19-174-100.service.infuturo.it)
[10:56:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:00:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:07:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d44d:e9a:465c:99de)
[11:11:10] *** Joins: kaph_ (~kaph@151.57.50.182)
[11:11:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:11:55] *** Quits: kaph (~kaph@an-19-174-100.service.infuturo.it) (Read error: Connection reset by peer)
[11:25:21] *** Joins: MatSharrow (~matthew@36.115.9.51.dyn.plus.net)
[11:27:04] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[11:28:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[11:28:20] *** Quits: kaph_ (~kaph@151.57.50.182) (Remote host closed the connection)
[11:34:26] *** Joins: kaph (~kaph@151.57.50.182)
[11:35:00] *** Quits: kaph (~kaph@151.57.50.182) (Remote host closed the connection)
[11:39:12] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:39:54] *** Joins: kaph (~kaph@151.57.50.182)
[11:41:40] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:42:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:45:43] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:48:15] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:57:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:57:25] *** Quits: kaph (~kaph@151.57.50.182) (Ping timeout: 256 seconds)
[12:01:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[12:01:47] <Haohmaru> didn't "delete [] ptr;" also set the value of ptr to nullptr at the end?
[12:02:38] <TinoDidriksen> Nope
[12:02:38] <Haohmaru> { uint8_t *p = new uint8_t[2]; delete [] p; cout << p; }
[12:02:39] <geordi>  
[12:02:51] <Haohmaru> { uint8_t *p = new uint8_t[2]; delete [] p; cout << (p == nullptr); }
[12:02:52] <geordi> false
[12:02:57] <TinoDidriksen> delete does not null the pointer.
[12:03:30] <TinoDidriksen> Debug builds sometimes do, or they set it to a detectable "deleted" pattern.
[12:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:10:53] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:17:42] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:683d)
[12:22:06] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:683d) (Ping timeout: 250 seconds)
[12:22:43] *** Joins: DSpider (~DSpider@82.79.237.44)
[12:23:04] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[12:23:40] *** Joins: andreasbuhr (~quassel@p549db65a.dip0.t-ipconnect.de)
[12:27:33] *** Joins: limubs (~limubs@cgn-89-0-49-98.nc.de)
[12:35:40] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[12:38:00] *** Joins: Furai (~Furai@furai.pl)
[12:41:27] *** Joins: robod34 (~Username@79.113.195.239)
[12:44:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:46:32] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:9d7e:f68:f87d:737)
[12:46:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:51:48] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:55:11] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[12:55:21] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[12:57:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:58:07] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Client Quit)
[12:58:08] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:58:45] <Haohmaru> !rq
[12:58:45] <nolyc> Haohmaru: <gggp> please give some explain
[13:01:15] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[13:01:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:03:01] *** Quits: Khoyo (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[13:13:12] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[13:14:57] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:52] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:16:32] *** Joins: Khoyo (~khoyo@user/khoyo)
[13:17:43] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:19:28] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:22:51] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[13:25:27] <MaddHatter> I'm trying /fsanitize=address for the first time. Just turned it on, compiled, and ran the smallest hello-world program I've got with these libraries. It started, ran, and is trying to exit. It's been chewing away on all 8 cores for over an hour now and still hasn't managed to actually exit or produce any output. Is this... normal?
[13:25:59] <MaddHatter> I assume it must not be, so where do I even begin to look at what's going wrong?
[13:28:52] *** Joins: callq (~callq@2409:4062:2d1d:d8fc:fde0:d86a:c786:7f79)
[13:37:26] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[13:39:33] <PJBoy> yeah visual studio asan is painfully slow
[13:39:37] <PJBoy> I'd let it run overnight
[13:40:36] *** Joins: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[13:40:37] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:40:55] <urdh> lol
[13:41:17] *** Quits: callq (~callq@2409:4062:2d1d:d8fc:fde0:d86a:c786:7f79) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:d4ed:731f:8862:bdd6) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: cncr04s (~cncr04s@afxr.net) (Ping timeout: 240 seconds)
[13:41:40] *** Joins: andreyv_ (~andrey@user/andreyv)
[13:41:44] *** Joins: sonOfRa_ (sonOfRa@user/sonofra)
[13:41:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:51] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[13:41:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:57] *** ChanServ sets mode: +v npaperbot
[13:41:57] *** Quits: andreyv (~andrey@user/andreyv) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: miklcct (quasselcor@vps.miklcct.com) (Ping timeout: 240 seconds)
[13:42:05] *** Joins: blackbeard420_ (~blackbear@45.33.85.133)
[13:42:10] *** andreyv_ is now known as andreyv
[13:42:16] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:abd7:e940:874a:7c76)
[13:42:17] *** Quits: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Ping timeout: 240 seconds)
[13:42:29] *** Joins: marius_ (~Username@79.113.195.239)
[13:42:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Ping timeout: 240 seconds)
[13:43:03] *** Joins: miklcct (~quassel@vps.miklcct.com)
[13:43:58] *** Joins: dld (~davidlowr@2601:197:600:1210:9050:7c1d:b33c:2fa8)
[13:45:05] *** Quits: robod34 (~Username@79.113.195.239) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[13:45:06] *** marius_ is now known as robod34
[13:45:39] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Ping timeout: 256 seconds)
[13:47:04] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[13:47:34] *** Joins: ville (~ville@user/ville)
[13:48:47] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[13:50:36] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:56:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[13:56:47] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[13:58:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:02:20] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[14:02:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[14:07:28] *** Quits: limubs (~limubs@cgn-89-0-49-98.nc.de) (Ping timeout: 268 seconds)
[14:11:45] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:12:34] <fiesh> is anybody else experiencing major hiccups with github?  it seems https://github.com/google/googletest/archive/refs/tags/release-1.11.0.zip and https://github.com/google/googletest/archive/release-1.11.0.zip are no longer the same file, and that seems to be not limited to gtest?
[14:13:44] <fiesh> seems they recompressed their zip files or something, since the contents are still the same
[14:13:50] <fiesh> well done
[14:14:05] <cbreak> they might be generated on the fly
[14:15:12] <fiesh> having you CI rely on github is just... omfg
[14:15:37] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:15:59] <cbreak> why? it has to rely on some git server
[14:16:13] *** Joins: Terminus (~null@user/terminus)
[14:16:15] <cbreak> ... unless you use perforce :( or ... mercurial...
[14:16:19] <cbreak> or something else else
[14:16:20] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[14:16:29] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: Terminus- (~null@user/terminus) (Ping timeout: 250 seconds)
[14:17:03] <fiesh> well meson's wraps rely on it
[14:17:09] <fiesh> which... sucks
[14:17:21] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: m42e (~m42e@pb42.de) (Ping timeout: 250 seconds)
[14:17:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:17:44] *** Joins: Uswald (~leandre@37.35.6.200)
[14:17:44] *** Quits: Uswald (~leandre@37.35.6.200) (Changing host)
[14:17:44] *** Joins: Uswald (~leandre@user/Uswald)
[14:18:22] *** Joins: m42e (~m42e@pb42.de)
[14:19:45] *** Joins: seninha (~seninha@user/seninha)
[14:20:47] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:20:57] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:9d7e:f68:f87d:737) (Quit: Konversation terminated!)
[14:21:21] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[14:21:43] <PJBoy> github CI's alright
[14:21:55] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Ping timeout: 256 seconds)
[14:22:38] <PJBoy> even though I don't know how to set it up, I prefer it to jenkins and team city :/
[14:22:57] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[14:23:18] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[14:24:12] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[14:24:38] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[14:26:57] <PJBoy> man, using clang-tidy a lot recently has made me wanna contribute to it
[14:27:34] <PJBoy> there's a fair amount of trivial looking stuff it gets wrong
[14:28:18] <TinoDidriksen> fiesh, it is well known the auto-generated archives from Github are not stable. Can't rely on their checksums. Can only rely on the actual git tag and commit ref.
[14:29:37] *** Quits: mitch0 (~mitch@84-236-21-114.pool.digikabel.hu) (Ping timeout: 240 seconds)
[14:29:37] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[14:30:38] *** Quits: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu) (Ping timeout: 256 seconds)
[14:31:36] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[14:31:41] *** Joins: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu)
[14:32:18] *** Joins: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu)
[14:33:17] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[14:33:20] <cbreak> the archives don't have to be stable I think
[14:33:33] <fiesh> TinoDidriksen: then it's a bug in meson's wrap system, thanks
[14:33:39] <cbreak> and even the content only has to be stable as long as the underlying tag doesn't change
[14:34:22] <cbreak> I agree that if you want to use a dependency via github, then ... it's best used via git.
[14:34:40] <TinoDidriksen> Many other systems require the archive to be stable. You commonly require a URL and a SHA256 of the archive, which Github can't reliable serve.
[14:35:04] *** Quits: sigma_ (~sigma@164.215.206.157) (Quit: Konversation terminated!)
[14:35:18] <cbreak> if I was github, I'd intentionally do that...
[14:35:30] <cbreak> traffic isn't cheap
[14:35:51] <TinoDidriksen> Git traffic is more expensive than grabbing a .tar.gz
[14:35:52] <fiesh> TinoDidriksen: do you have any reference for that?
[14:36:10] <cbreak> (if I was github, github would be a lot less user friendly)
[14:36:26] <fiesh> if they cared about traffic, they wouldn't make it impossible to cache their content
[14:36:26] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[14:37:22] <TinoDidriksen> https://github.com/libgit2/libgit2/issues/4343#issuecomment-328631745
[14:38:36] <TinoDidriksen> Github staff member saying tarballs are not stable.
[14:38:50] <fiesh> ok, couldn't find any official documentation either...
[14:38:56] <fiesh> thanks, sucks they don't have that I guess
[14:39:11] *** Joins: cncr04s (~cncr04s@afxr.net)
[14:39:23] <TinoDidriksen> So if projects want stable archives they need to make their own and upload those.
[14:40:40] <fiesh> that's of course quite unfortunate in many ways, it basically removes the possibility to checksum releases unless they're done manually
[14:40:45] <PJBoy> so as long as you don't check the checksum, it's fine to use the autogen archives?
[14:41:05] <TinoDidriksen> The contents is stable, sure. Just not the checksum.
[14:41:07] <PJBoy> you could probably checksum the contents
[14:41:12] <PJBoy> alright yeah
[14:41:47] <smallville7123> how would one go about unit-testing a backtrack capable parser?
[14:41:54] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[14:42:23] <smallville7123> like, what parts of the parser would need to be tested in what order?
[14:42:43] <fiesh> yeah checksumming the contents assumes unpacking is not a security threat
[14:42:50] <fiesh> which has been proving wrong in the past countless times
[14:42:54] <PJBoy> convert the linux source code to something your parser can parse
[14:42:57] <PJBoy> and then parse that
[14:43:14] <fiesh> *proven
[14:43:15] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:43:26] <PJBoy> if unpacking a tarball is a security issue, I'm not using tarballs anymore
[14:43:33] <smallville7123> when unit-testing a parser capable of backtracking to test alternative rules, what parts of the parser would need to be tested and in what order would they need to be tested?   *
[14:43:56] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:46:13] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[14:46:17] <PJBoy> I mean if you're writing unit tests, test everything
[14:46:22] <TinoDidriksen> geordi --version
[14:46:24] <geordi> GCC 12.0.1 20220201 (experimental)
[14:46:49] <PJBoy> I don't know what kind of answer you're expecting to get
[14:47:26] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:47:45] <smallville7123> PJBoy: like, should i test the backtracking first and the matching second? or should i test the matching first and the backtracking second?
[14:48:00] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[14:49:18] <PJBoy> both surely
[14:49:20] <smallville7123> and when testing matching should i test combinator matching first or should i test character matching first?
[14:49:34] <PJBoy> if the order matters then check both orders
[14:49:50] *** Joins: Trollmann (~Trollmann@user/trollmann)
[14:49:51] <PJBoy> you can never have too many tests
[14:50:31] <PJBoy> unless you have 100% code coverage
[14:50:31] <traxex> once upon a time, there was a smallville who had two apples. he starved to death because he didn't know which one he should eat first
[14:50:39] <PJBoy> then you *might* have too many tests
[14:51:11] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:51:22] <smallville7123> traxex: lmao
[14:51:47] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[14:53:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:55:15] *** Quits: adder`` (~adder@user/adder) (Remote host closed the connection)
[14:59:15] <cbreak> smallville7123: fuzz it :P
[14:59:54] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:00:06] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:00:55] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:01:31] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[15:02:21] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:03:35] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: wielding (~wielding@user/wielding) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Bridge terminating on SIGTERM)
[15:06:09] <PJBoy> bah
[15:06:16] <PJBoy> clang-tidy's -fix has so many issues
[15:06:27] <PJBoy> but it has so much potential ;_;
[15:06:44] <PJBoy> in this case it converted a std::bind into a lambda expression
[15:07:15] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[15:07:49] *** Quits: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu) (Ping timeout: 256 seconds)
[15:07:52] <PJBoy> so it converted `std::bind(&S::mf, p_obj)` into `[capture0 = p_obj] { capture0->m_f(); }`
[15:08:11] <PJBoy> but it forgot to return the result v_v
[15:08:27] <PJBoy> and clang should know better, because this causes a build failure
[15:09:15] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[15:09:26] *** Joins: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu)
[15:10:16] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[15:11:21] <cbreak> PJBoy: why would it butcher that poor std::bind? :(
[15:11:35] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[15:11:35] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[15:11:45] <PJBoy> bind sucks, so it's a welcome transformation
[15:11:49] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[15:11:57] <cbreak> bind is literal
[15:12:04] *** Joins: wielding (~wielding@user/wielding)
[15:12:11] <PJBoy> literally terrible
[15:12:18] <cbreak> descriptive
[15:12:18] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[15:12:26] <PJBoy> tbh I don't disagree
[15:12:30] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[15:12:37] <PJBoy> and I would consider bind_front in C++20
[15:12:41] <cbreak> it's like unique_ptr
[15:12:44] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[15:12:52] *** Joins: markong (~kvirc@213.146.188.203)
[15:12:57] <cbreak> ... well, in the sense that it gives a descriptive name...
[15:12:59] <PJBoy> at the same time though, the lambda is perfectly readable
[15:13:10] <PJBoy> the capture might be slightly excessive, but
[15:13:15] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:13:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[15:13:38] <cbreak> lambdas are more expressive in syntax, so potentially harder to parse
[15:13:57] <cbreak> unless you're looking at boost::lambda's bind, which is extremely expressive, and unparsable by humans
[15:14:22] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:14:40] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:16:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:85ab:562:f728:2658)
[15:17:42] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Remote host closed the connection)
[15:17:42] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Remote host closed the connection)
[15:17:42] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Read error: Connection reset by peer)
[15:17:42] *** Quits: wielding (~wielding@user/wielding) (Read error: Connection reset by peer)
[15:17:42] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Read error: Connection reset by peer)
[15:17:42] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Read error: Connection reset by peer)
[15:17:43] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Remote host closed the connection)
[15:17:43] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Remote host closed the connection)
[15:18:03] *** sonOfRa_ is now known as sonOfRa
[15:18:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:20:39] <PJBoy> wow it took 18 minutes to install boost with vcpkg
[15:21:22] <PJBoy> now to do it again for the 64-bit version >_>
[15:21:25] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[15:21:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:22:06] <Haohmaru> it would've taken 9 minutes if vcpkg was written with boost
[15:24:17] *** gentooclimax is now known as climax
[15:24:36] <PJBoy> hrm, run-clang-tidy is finding stuff that clang-tidy isn't finding
[15:24:44] *** Joins: markong (~kvirc@213.146.188.203)
[15:25:20] <PJBoy> clang-tidy doesn't find that std::bind for some reason
[15:26:06] <Haohmaru> clang-tidy is the new cmake
[15:26:38] <PJBoy> useful, but triggers endless complaints?
[15:27:10] <Haohmaru> there was a phase in this channel where cmake was often mentioned
[15:27:10] <cbreak> PJBoy: different default flags maybe?
[15:27:17] <Haohmaru> now it's clang-tidy phase
[15:27:25] <PJBoy> I think they should both being using my .clang-tidy config file
[15:27:55] <PJBoy> oh wait
[15:27:59] <PJBoy> I just have short term memory loss
[15:28:03] <PJBoy> I disabled that check
[15:28:46] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[15:29:11] <PJBoy> hrm
[15:29:41] <PJBoy> confused why I haven't been seeing this earlier
[15:29:52] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[15:30:43] <PJBoy> I've been running `for f in **/*.cpp; do clang-tidy --quiet -p . -fix $f; done`
[15:30:56] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[15:30:56] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[15:30:57] <PJBoy> does that not dip into subdirectories? :/
[15:31:10] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[15:31:24] *** Joins: wielding (~wielding@user/wielding)
[15:31:27] <PJBoy> I guess not
[15:31:39] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[15:31:51] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[15:32:04] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[15:32:43] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Remote host closed the connection)
[15:32:43] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Remote host closed the connection)
[15:32:43] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Remote host closed the connection)
[15:32:43] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Remote host closed the connection)
[15:32:43] *** Quits: wielding (~wielding@user/wielding) (Remote host closed the connection)
[15:32:43] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Remote host closed the connection)
[15:32:43] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Remote host closed the connection)
[15:32:43] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Remote host closed the connection)
[15:33:12] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:33:14] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[15:33:52] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:34:03] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Ping timeout: 250 seconds)
[15:34:25] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 268 seconds)
[15:34:25] <PJBoy> man globstar was disabled?!?!
[15:34:30] <PJBoy> blurgh
[15:34:39] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[15:34:42] <PJBoy> I thought ** would just not work if that were the case
[15:35:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:37:17] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[15:39:16] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[15:39:57] *** Joins: |7| (~seachdamh@user/seachdamh)
[15:42:26] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[15:43:16] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[15:44:41] <urdh> PJBoy: use find (or fd)?
[15:44:44] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[15:44:44] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[15:44:44] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[15:44:44] *** Joins: wielding (~wielding@user/wielding)
[15:44:55] <PJBoy> not sure how
[15:44:55] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[15:44:58] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[15:45:08] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[15:45:21] <PJBoy> having enabled globstar, all is well
[15:45:31] <PJBoy> so I can't imagine the find version is any simpler
[15:45:47] <PJBoy> although probably more portable
[15:45:52] <urdh> find -name '*.cpp' | xargs -n1 -- clang-tidy --quiet -p . -fix
[15:46:03] <urdh> or something along those lines
[15:46:24] <urdh> could maybe use -exec instead of piping to xargs
[15:48:04] <urdh> with fd it would be `fd --ext cpp --exec 'clang-tidy --quiet -p . --fix {}'`
[15:48:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:52:52] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:53:39] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:54:34] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:58:51] *** Joins: Leone (~Leo@216.154.23.229)
[15:59:15] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[16:01:38] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[16:03:42] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Client limit exceeded: 20000)
[16:03:43] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[16:06:35] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: Client limit exceeded: 20000)
[16:08:36] <PJBoy> that's not so bad actually
[16:08:57] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 268 seconds)
[16:09:32] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[16:09:32] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[16:09:32] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[16:09:37] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Client limit exceeded: 20000)
[16:11:36] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[16:11:41] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[16:14:34] *** Quits: blackbeard420_ (~blackbear@45.33.85.133) (Remote host closed the connection)
[16:14:45] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[16:15:04] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[16:15:47] <fiesh> use `parallel` instead of `xargs`...
[16:15:49] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[16:15:49] *** Joins: wielding (~wielding@user/wielding)
[16:15:49] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[16:16:28] <fiesh> we use jq to extract all files from the compilation database and then run clazy / clang-tidy on them via parallel
[16:16:40] <fiesh> (and then some other things like honoring exclude files etc.)
[16:17:06] <fiesh> plus of course a `find` call to gather the header files that do not appear in the compilation database
[16:17:24] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Quit: Client limit exceeded: 20000)
[16:17:34] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[16:18:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:22:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[16:23:08] *** Joins: bohdan-tymkiv (~bohdan-ty@178.136.237.111)
[16:24:12] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[16:26:30] *** Joins: proller (~p@2a02:6b8:0:40c:2652:db0a:df0:ffb1)
[16:26:57] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Read error: Connection reset by peer)
[16:33:24] *** Joins: AmR (~AmREiSa@156.207.136.200)
[16:33:58] *** Quits: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[16:37:24] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[16:44:04] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[16:44:30] *** Joins: AmR (~AmREiSa@156.207.136.200)
[16:44:36] *** Joins: pulse (~pulse@user/pulse)
[16:45:25] *** Joins: kaph (~kaph@151.37.72.8)
[16:47:22] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:49:30] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:50:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:55:40] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[16:56:10] *** Joins: AmR (~AmREiSa@156.207.136.200)
[16:56:42] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[16:58:19] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[16:59:11] *** Quits: immibis_ (~hexchat@62.156.144.218) (Ping timeout: 250 seconds)
[17:00:43] *** lh_ideapad_ is now known as lh_ideapad
[17:01:25] *** Joins: kaph_ (~kaph@151.35.35.178)
[17:01:39] *** Quits: kaph (~kaph@151.37.72.8) (Read error: Connection reset by peer)
[17:02:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:03:16] *** Quits: AmR (~AmREiSa@156.207.136.200) (Remote host closed the connection)
[17:03:43] *** Joins: AmR (~AmREiSa@156.207.136.200)
[17:03:44] *** Joins: seninha (~seninha@user/seninha)
[17:03:54] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[17:04:27] *** Quits: AmR (~AmREiSa@156.207.136.200) (Client Quit)
[17:07:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:09:49] *** Quits: kaph_ (~kaph@151.35.35.178) (Remote host closed the connection)
[17:10:05] *** Joins: kaph (~kaph@151.35.35.178)
[17:13:29] *** Joins: Simplar (~Simplar@188.163.93.241)
[17:16:02] *** Quits: kaph (~kaph@151.35.35.178) (Read error: Connection reset by peer)
[17:16:20] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[17:16:45] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:18:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:18:08] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:19:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:22:54] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:25:36] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:26:46] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[17:27:05] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:28:43] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:30:42] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[17:31:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[17:33:52] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:35:43] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[17:36:43] *** Joins: immibis (~hexchat@62.156.144.218)
[17:40:00] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:41:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:58] *** ChanServ sets mode: +v npaperbot
[17:48:24] *** Quits: bohdan-tymkiv (~bohdan-ty@178.136.237.111) (Ping timeout: 256 seconds)
[17:48:40] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[17:54:16] *** Joins: bohdan-tymkiv (~bohdan-ty@178.136.237.111)
[17:55:08] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:08:56] *** gentooclimax is now known as climax
[18:13:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:18:51] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[18:19:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:23:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:29:25] *** Joins: temp_user_2022 (~amit@2607:ea00:107:3c07:c6:b66d:9d76:4436)
[18:30:09] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:31:15] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[18:33:19] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:33:27] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:33:41] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[18:41:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[18:41:45] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[18:41:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:46:12] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 268 seconds)
[18:46:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:46:52] <Haohmaru> !fact
[18:46:53] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[18:46:53] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[18:46:53] <nolyc> Haohmaru: Partial specialization declarations themselves are not found by name lookup.
[18:47:13] <Haohmaru> they're found by mere accident
[18:52:32] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:52:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:53:24] *** Joins: callq (~callq@2409:4062:2d1d:d8fc:dd53:71b9:2283:727d)
[18:53:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[18:59:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:00:22] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[19:03:15] *** Joins: gehn (~gehn@user/gehn)
[19:03:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:09:40] *** Joins: bobb_ (~bobb_@dslb-092-074-248-140.092.074.pools.vodafone-ip.de)
[19:12:20] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[19:20:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:20:52] *** Quits: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[19:22:07] <rpav> if ever i had a complaint that the most complicated math i did on a daily basis was "occasionally, division," that is definitely no longer the case ;/
[19:23:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:25:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:28:35] *** Joins: Fairy (~Fairy@2001:464a:4992:0:a98e:f0a9:78ea:918e)
[19:44:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4)
[19:44:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4) (Changing host)
[19:44:00] *** Joins: skapata (~Skapata@user/skapata)
[19:44:57] <Haohmaru> rpav do you mean division by hand?
[19:45:11] <Haohmaru> like in school
[19:46:22] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 2.8)
[19:47:22] <jbalint> i'm reviewing some code that does an std::move on a vector member, what exactly happens? I'm guessing you can't move the member variable
[19:48:09] <ville> jbalint: well std::move() doesn't do anything in of its self. the result of the expression needs to be used
[19:48:55] <jbalint> so firstly, it assigns it to a local variable... does that become a reference?
[19:49:19] <ville> variable's don't change type based on what's assigned to them
[19:49:50] <ville> anyhoo if the result is used then presumably the object passed in as argument to std::move() is now in a moved-from state, whatever that means for a particular type varies
[19:50:10] <jbalint> it's a vector
[19:52:20] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[19:52:37] <rpav> Haohmaru: no i mean in general .. businessy app stuff is like, a few +/- and maybe *, and on a special day, /
[19:52:51] <rpav> unless you're writing like stats stuff or something, but that's more library dev itself
[19:53:08] <Haohmaru> stats should involve some signal processing ;P~
[19:53:31] <Haohmaru> so what kind of mathz did you do now?
[19:53:36] <rpav> isn't it the other way around
[19:53:47] <rpav> stats doesn't always involve signal processing
[19:53:53] <ville> jbalint:  http://www.eelis.net/c++draft/container.requirements#tab:container.req-row-15-column-4-sentence-1
[19:53:57] <rpav> Haohmaru: trig/linalg
[19:54:04] <Haohmaru> funky
[19:54:06] *** Joins: paul424 (~tom@ip-5-172-235-255.multi.internet.cyfrowypolsat.pl)
[19:54:11] <rpav> dredging up so many trig identities the past week x.x
[19:54:19] <jbalint> ville: thanks. i must've missed something in the vector docs, going back
[19:54:53] <Haohmaru> rpav when i was learning C++ (like.. i don't know.. 2007-ish maybe) i went to write a software 3D renderer
[19:55:18] <Haohmaru> i was also just trying to figure out wtf these pointers are
[19:55:42] <Haohmaru> so much kewl mathz in there
[19:56:04] <rpav> yeah software rasterizing definitely involves some of this
[19:56:37] <ville> jbalint: http://www.eelis.net/c++draft/lib.types.movedfrom
[19:57:34] <Haohmaru> not just that, i had the flying camera "free look" thing with WASD for moving
[19:58:27] <ville> jbalint: the "valid but unspecified" generally means you can desturct the moved-from object or you can reassign to the moved-from object if i recall
[20:00:55] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:01:22] <jbalint> ville: unspecified in this general context, but each type should define it, no?
[20:01:36] <ville> jbalint: ...but i can't locate a more concrete specification right now. no they don't have to
[20:02:12] <jbalint> ville: ok, thanks a bunch! I'll spent more time with these. have to go for a few
[20:02:21] <ville> jbalint: i seem to remember, it could have been a different version of the standard for all i know, that said something about what it meant in more concrete terms. and think it was destructible and assignable
[20:03:25] <ville> i guess invariants must hold? so it can't report wrong size for example as a vector if the buffer it now has contains no elements
[20:03:36] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[20:04:56] *** Quits: bohdan-tymkiv (~bohdan-ty@178.136.237.111) (Ping timeout: 245 seconds)
[20:05:24] <jbalint> i was just reading something on cppreference that said it would be empty after the move
[20:12:54] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[20:14:19] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[20:17:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:18:52] *** Joins: Tokamak (~Tokamak@172.58.191.35)
[20:20:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:23:56] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:97a7:467:5dcd:2e09)
[20:23:56] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:97a7:467:5dcd:2e09) (Changing host)
[20:23:56] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:24:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:24:47] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[20:29:31] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:32:15] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:34:09] *** climax is now known as gentooclimax
[20:34:47] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[20:35:42] <ville> jbalint: yes that sounds reasonable, but when has reasonable stood in the way of the standard
[20:39:59] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[20:49:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[20:49:35] *** Joins: jancoow (~jancoow@user/jancoow)
[20:49:42] <PJBoy> unspecified valid is http://www.eelis.net/c++draft/defns.valid
[20:51:23] <PJBoy> jbalint, cppreference say that, but it's Technically not true
[20:51:39] <PJBoy> but it's probably true in practice
[20:52:13] *** Quits: DSpider (~DSpider@82.79.237.44) (Quit: Leaving)
[20:53:37] *** Quits: proller (~p@2a02:6b8:0:40c:2652:db0a:df0:ffb1) (Ping timeout: 250 seconds)
[20:55:11] *** Quits: bobb_ (~bobb_@dslb-092-074-248-140.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:02:29] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 268 seconds)
[21:10:03] <Alipha> jbalint: with moved-from objects, you're best off just not using it after it has been moved from, or assigning it a new object, e.g., v = std::vector<int>();
[21:10:24] *** Joins: magla (~gelignite@55d4daf5.access.ecotel.net)
[21:11:57] *** Quits: paul424 (~tom@ip-5-172-235-255.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[21:18:08] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:abd7:e940:874a:7c76) (Ping timeout: 250 seconds)
[21:19:24] *** Joins: paul424 (~tom@ip-5-172-235-255.multi.internet.cyfrowypolsat.pl)
[21:21:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:23:57] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:683d)
[21:25:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[21:26:12] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[21:30:41] *** Joins: mingodad (~mingo@212.225.225.80)
[21:30:48] <mingodad> I'm looking for someone to give feedback to my fixes to cyclone at https://github.com/mingodad/cyclone
[21:30:53] *** Quits: callq (~callq@2409:4062:2d1d:d8fc:dd53:71b9:2283:727d) (Quit: callq)
[21:30:54] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 260 seconds)
[21:31:09] *** Quits: sbrothy (~sbrothy@192038130232.mbb.telenor.dk) (Quit: leaving)
[21:32:07] <jbalint> thanks PJBoy, Alipha
[21:35:38] *** Joins: Kakurady (~nekoyasha@2607:fea8:fe20:7fa3:1346:2846:42b0:a7a2)
[21:37:07] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:37:20] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[21:39:16] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[21:41:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:58] *** ChanServ sets mode: +v npaperbot
[21:42:55] *** Joins: proller (~p@80.240.216.69)
[21:45:49] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[21:54:06] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[21:54:30] *** Joins: proller (~p@2a02:6b8:b081:a404::1:13)
[21:56:36] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[22:01:13] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[22:01:34] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:03:14] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[22:04:06] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[22:05:00] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[22:11:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:11:52] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[22:12:37] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[22:17:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:21:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:23:19] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[22:25:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:27:08] *** Joins: sbrothy (~sbrothy@192038130232.mbb.telenor.dk)
[22:40:05] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[22:41:47] *** Joins: ivii (~ivan@user/ivii)
[22:43:48] *** Quits: paul424 (~tom@ip-5-172-235-255.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[22:44:47] *** Quits: temp_user_2022 (~amit@2607:ea00:107:3c07:c6:b66d:9d76:4436) (Ping timeout: 252 seconds)
[22:48:01] *** Joins: chozorho (~chozorho@2601:146:300:c30::e75e)
[22:59:06] *** Quits: Kakurady (~nekoyasha@2607:fea8:fe20:7fa3:1346:2846:42b0:a7a2) (Ping timeout: 245 seconds)
[23:01:04] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[23:02:19] *** Joins: ivii (~ivan@user/ivii)
[23:11:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:12:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:13:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:14:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:15:55] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:22:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:25:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:27:15] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:28:38] *** Parts: mingodad (~mingo@212.225.225.80) ()
[23:28:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:47:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[23:48:14] *** Quits: Tokamak (~Tokamak@172.58.191.35) (Ping timeout: 256 seconds)
[23:49:26] *** Joins: x_kuru (~xkuru@user/xkuru)
[23:49:43] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:51:25] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[23:51:58] *** Joins: Tokamak (~Tokamak@mobile-166-170-32-25.mycingular.net)
[23:54:25] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:2deb:4e50:c1b8:266c)
[23:56:34] *** Joins: Tokamak_ (~Tokamak@172.58.191.35)
[23:56:44] *** Quits: Tokamak (~Tokamak@mobile-166-170-32-25.mycingular.net) (Ping timeout: 250 seconds)
