[00:00:10] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[00:00:14] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[00:01:17] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:02:10] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[00:03:17] *** Quits: inom (~inom@176.59.111.80) (Quit: Leaving.)
[00:03:49] *** Joins: thiras (~thiras@user/thiras)
[00:04:40] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[00:07:49] *** Joins: humberto1 (~humbertow@2806:107e:f:5f0c:dd3c:d0f0:f41f:ad03)
[00:10:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:10:29] *** Quits: humbertowoody (~humbertow@2806:107e:f:5f0c:21e2:ad5:71e1:1d2d) (Ping timeout: 258 seconds)
[00:10:48] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:12:06] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:13:28] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 252 seconds)
[00:17:02] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[00:17:36] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 272 seconds)
[00:18:07] *** Joins: netsan (~netsan@user/netsan)
[00:18:24] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[00:18:55] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[00:18:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:19:20] *** Joins: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com)
[00:19:50] <kittonian> hi all. still struggling with this issue and am out of ideas. Hoping someone can assist. I posted details on the Plone forum at https://community.plone.org/t/totp-via-passlib-and-pas/14209
[00:20:52] <aphysically> where can I find what all the context manager for ThreadPoolExecutors is doing?
[00:21:02] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:21:06] <aphysically> the documentation mentions it cleans up the threads but doesn't say specifically what it's doing
[00:21:29] *** Quits: aead (~aead@ec2-52-2-178-231.compute-1.amazonaws.com) (Ping timeout: 248 seconds)
[00:22:37] <graingert[m]> aphysically: The docs list the source code at the top
[00:22:41] <grym> ^
[00:23:00] <aphysically> oh I see
[00:23:12] <aphysically> >.> good tip
[00:23:14] *** Joins: Liblx (~Alex@2a02:810c:280:59c:2199:2be2:6293:d9bf)
[00:23:26] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[00:24:08] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[00:24:11] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:27:56] <graingert[m]> It's mostly a bunch of joins aphysically
[00:29:31] <aphysically> and then an executor.shutdown() at the end I guess?
[00:29:31] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[00:30:05] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:30:21] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[00:30:26] <graingert[m]> aphysically: Yeah mostly I use trio.to_thread when using threads
[00:31:10] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[00:31:18] <aphysically> I was considering associating a threadpool executor as an instance variable of a class that I clean up manually instead of passing around the executor as a parameter
[00:33:09] <aphysically> oh shutdown itself calls the joins
[00:33:22] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[00:33:27] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[00:34:24] <kittonian> can anyone assist with my issue?
[00:34:35] <aphysically> whoa could I do something super fancy like put the shutdown in def __del__(self) of the class that owns the executor as an instance variable?
[00:34:42] *** shangxia1 is now known as shangxiao
[00:34:47] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[00:35:05] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[00:36:20] <sazawal> Hi all. I am working with json encoding/decoding. I have defined an object_hook function to take care of the datetime objects. But it only works if the value of the sub-dictionary is a datetime object. How do I handle it if the value is a list of datetime objects? Here is my json_custom module, https://bpa.st/BPTQ
[00:38:15] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[00:38:41] *** Joins: audiobirb (~audio@2603-8081-1801-3bb5-c203-3fab-d083-5cb4.res6.spectrum.com)
[00:38:58] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[00:39:21] *** Quits: daoudr_ (~daoudr@101.17.104.92.dynamic.wline.res.cust.swisscom.ch) (Quit: Leaving)
[00:40:29] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[00:41:47] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:42:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:45:06] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Quit: Haxxa flies away.)
[00:45:07] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[00:46:24] <BrenBarn> well, I guess you could have your hook check if the value is a list and then check if all values in it match your datetime format
[00:46:40] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[00:46:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:47:44] <sazawal> BrenBarn, Yea, but json must have something to handle the lists. Like how it does for a list of int. If I check for a list object then I have to reimplement the list of int too.
[00:47:58] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[00:48:46] *** Joins: aead (~aead@ec2-52-2-178-231.compute-1.amazonaws.com)
[00:49:23] *** Quits: orion (~orion@user/orion) (Read error: Connection reset by peer)
[00:50:28] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[00:50:53] *** Joins: supakeen (~user@python/site-packages/supakeen)
[00:51:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[00:51:17] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:51:58] *** Quits: akinode (~akinode@2a02:908:1394:cce0:f7:5db1:33e7:f8e) (Quit: Client closed)
[00:52:07] <Julian> sazawal: Subclass JSONEncoder (then cry)
[00:52:10] <Julian> sazawal: See the docs: https://docs.python.org/3/library/json.html#json.JSONEncoder
[00:52:21] <Julian> sazawal: "To extend this to recognize other objects, subclass and implement a default() method" etc
[00:52:53] <BrenBarn> you won't have to reimplement list of int (if I understand what you mean)
[00:52:59] <BrenBarn> like it will decode it and give you a list of ints
[00:53:28] <BrenBarn> you'll have to check if the list contains your datetime strings and then replace them with datetime objects if so, but you won't have to reimplement the part that parses integers
[00:54:19] <sazawal> Julian, Yes I did subclass JSONEncoder if you look at the code I posted.
[00:54:56] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:54:56] * kittonian is feeling a bit ignored
[00:55:06] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[00:55:15] *** Joins: besnn (~besnn@user/besnn)
[00:55:30] <sazawal> BrenBarn, I see.
[00:57:55] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[00:58:08] <BrenBarn> kittonian: I don't really know anything about Plone, but can you somehow print out the `mytoken` object and its type?
[00:58:13] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[00:58:34] <kittonian> BrenBarn, that's what I was doing via the raise Exception
[00:58:42] <kittonian> as far as type, not that I'm aware of
[00:58:55] <kittonian> but all form variables are passed as strings
[00:59:23] *** Joins: jlix (~johannes@81-236-244-23-no298.tbcn.telia.com)
[00:59:33] <Julian> sazawal: I didn't see the code (until now) but I don't follow the question then
[00:59:39] <Julian> sazawal: What's wrong with what you have?
[00:59:53] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[00:59:54] <Julian> sazawal: The correct way to do this is with object_hook
[01:00:10] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 240 seconds)
[01:00:56] <Julian> sazawal: Oh, wait you didn't return a dict, what representation are you trying to implement?
[01:00:59] <Julian> You need to return a dict.
[01:01:41] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Quit: Konversation terminated!)
[01:01:46] *** Joins: extropiator (~extropiat@107.181.178.79)
[01:01:49] <kittonian> BrenBarn, btw, this is nothing specific to Plone or Zope, besides how you obtain the variable through context.REQUEST (or maybe another way that I don't know). This is straight python 3 with passlib.
[01:03:00] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[01:03:01] *** Joins: entuland_ (~entuland@user/entuland)
[01:03:13] <sazawal> Julian, I have the object_hook function. And it works if there is a dict or subdict containing value as datetime.datetime object (for a key,value pair). I didn't check if the value is a list of datetime.datetime objects, assuming it would work anyway.
[01:03:19] *** Joins: Auron (~Auron956@user/auron)
[01:03:21] <sazawal> Julian, I did return a dict
[01:03:34] *** Joins: cedric (~cedric@2a01:cb11:867:c200:7fb9:6452:6094:1bf7)
[01:06:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 240 seconds)
[01:07:07] <BrenBarn> kittonian: is this code running as part of a webserver setup or is this a script you're running on the command line or what?
[01:07:39] <kittonian> this is a python script in zope, inside pluggable auth service (PAS)
[01:08:47] <BrenBarn> note that your `mytoken.encode('ascii')` won't do anything, since that will return a new string and you're not assigning it to anything
[01:09:43] <BrenBarn> but I wouldn't expect that to matter if the string is just ascii digits (since the encoding will be the same in UTF8)
[01:10:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[01:10:38] <BrenBarn> do you have a way to print out the value without raising an exception?  like can you just log the value of `(mytoken, type(mytoken))`?
[01:10:39] *** Joins: ghostbuster (~admin@user/ghostbuster)
[01:10:50] *** Joins: cheater (~Username@user/cheater)
[01:10:51] <ghostbuster> hi, i have a question about using selenium w/ headless firefox for scraping
[01:11:08] <anorthall> ghostbuster: cool
[01:11:52] <ghostbuster> i wrote a few lines of python that takes a url, calls webdriver.get(), then parses with lxml.html, uses an xpath and extracts some text
[01:11:57] <ghostbuster> it works perfectly in a one-shot configuratoin
[01:12:38] <ghostbuster> but i tried to wrap it in a for loop, to get each page of search results, and for some reason my print(results[i].text) doesn't seem to spit out anything until the entire loop has finished
[01:12:58] *** Quits: aead (~aead@ec2-52-2-178-231.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[01:13:33] <ghostbuster> does python somehow buffer multiple calls to print inside a loop?
[01:14:50] <KirkMcDonald> Not inherently, but that sort of thing can happen depending on what stdout *is*, exactly.
[01:15:05] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[01:15:40] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[01:15:49] <KirkMcDonald> Are you printing directly to a terminal?
[01:15:57] <ghostbuster> yeah
[01:16:07] <sazawal> Works great https://bpa.st/OF4Q . Thanks BrenBarn, Julian
[01:16:13] <ghostbuster> doh, sorry i should've googled this. it's fixed by using print('xxx', flush=True)
[01:16:31] <KirkMcDonald> Curious. Normally stdout will be line-buffered, anyway.
[01:16:54] <KirkMcDonald> It stops being line-buffered if you're piping it somewhere, for instance.
[01:17:08] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[01:18:11] *** Quits: extropiator (~extropiat@107.181.178.79) (Quit: Client closed)
[01:18:15] <BrenBarn> it's kind of annoying that the json module doesn't have an equivalent of `object_hook` like `string_hook` or something
[01:18:17] *** Quits: humberto1 (~humbertow@2806:107e:f:5f0c:dd3c:d0f0:f41f:ad03) (Read error: Connection reset by peer)
[01:18:36] <BrenBarn> but also you can always just parse the JSON normally and then have a separate function that walks the tree and replaces anything you want to replace with other stuff
[01:19:13] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[01:19:52] <kittonian> BrenBarn, I just created a new form that posts to a simple script that does nothing except print the token
[01:20:04] <kittonian> works perfectly and the token is shown as 123456
[01:20:04] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[01:20:11] <kittonian> no quotes, no special characters, nothing
[01:21:15] *** Joins: humberto1 (~humbertow@187.202.209.28)
[01:21:27] <kittonian> and just so it would match with me manual hard coding the token, if I add repr() around the call I get exactly what I would expect, which is '123456'
[01:22:03] *** Quits: Liblx (~Alex@2a02:810c:280:59c:2199:2be2:6293:d9bf) (Quit: WeeChat 3.2)
[01:22:42] <aphysically> wow I'm definitely too stupid to subclass string I'll mark this for another day
[01:24:15] <kittonian> is repr() the best way to add single quotes around the string so it's formatted correctly?
[01:24:25] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 248 seconds)
[01:25:04] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[01:25:26] *** Quits: magla (~gelignite@55d4a2ba.access.ecotel.net) (Quit: Stay safe!)
[01:25:52] <grym> kittonian: you could f"'{thestring}'", but quoting games like this almost always wind up being something else going on ime
[01:26:38] <kittonian> grym: I hear you, but if I type '123456' it works. The variable, when printed alone and called from context.REQUEST is returning 123456 without quotes
[01:27:01] <Repiphany> What does type(context.REQUEST.get(...)) return
[01:27:08] <kittonian> so I was thinking that maybe repr() isn't actually inserting the single quotes around it and instead is just showing them when I print(mytoken) and return printed
[01:27:11] <grym> kittonian: it's that "i type" part that makes me wonder
[01:27:24] *** Joins: akinode (~akinode@2a02:908:1394:cce0:f7:5db1:33e7:f8e)
[01:27:54] <kittonian> frym, when I say I type, I mean I manually modify the script as quickly as I can to give it the token manually instead of calling it through a variable
[01:28:01] <kittonian> sorry, grym
[01:28:36] <kittonian> Repiphany, that's what I just described. context.REQUEST.get('intranet_token', None) returns 123456 if I have entered 123456 in the form
[01:28:46] <grym> kittonian: so you're hardcoding.  I bet it still works if you "123456" or """123456"""
[01:28:46] <kittonian> this test script is 3 lines
[01:28:55] <kittonian> grym, it does not
[01:28:58] <grym> kittonian: print(type(... as Repiphany suggested
[01:29:03] <Repiphany> What is the actual type of the variable
[01:29:05] <kittonian> i just did
[01:29:13] <Repiphany> 123456 isn't a type
[01:29:19] *** Joins: jean-luc (~gryster@104.244.73.251)
[01:29:19] <kittonian> any form variable in zope is passed as a string unless you manually set it
[01:29:27] <kittonian> so it's a string
[01:29:42] <grym> kittonian: is that what type() returned
[01:30:09] <Repiphany> So does `context.REQUEST.get(...) == the_token_you_hardcoded` evaluate to True
[01:31:37] <kittonian> is this correct?
[01:31:38] <kittonian> print(type((mytoken)))
[01:31:47] <kittonian> I'm trying to do what you asked and it's erroring
[01:31:52] <kittonian> oh, i see it
[01:32:24] <kittonian> nope, it comes back with name: type is not defined
[01:33:04] *** Joins: luvalon12 (~luva@178.239.173.200)
[01:33:10] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 240 seconds)
[01:33:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[01:34:16] *** Quits: luvalon1 (~luva@178.239.167.170) (Ping timeout: 268 seconds)
[01:34:16] *** luvalon12 is now known as luvalon1
[01:34:22] <grym> __builtins__.type() then, and then remove whatever just clobbered a built in:)
[01:34:30] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:34:51] <kittonian> grym: bear in mind that you have limited access to python functions from within zope
[01:34:58] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[01:35:04] <grym> kittonian: if you can't touch __builtins__ i think the world endsd
[01:35:21] <kittonian> i'm pretty sure you can't
[01:35:30] <grym> ¯\_(ツ)_/¯
[01:35:31] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[01:35:35] <grym> i know nothing of this zope thing
[01:35:43] <grym> but that surprises me if true
[01:36:49] <kittonian> just looked it up and it seems to say that all python builtins are allowed
[01:37:43] <kittonian> my first line of
[01:37:44] <kittonian> mytoken = __builtins__.type(context.REQUEST.get('intranet_token', None))
[01:37:51] *** Joins: Fiji (~Fiji@user/fiji)
[01:37:55] <kittonian> throws a syntax error because I cannot start a name with an underscore
[01:38:36] *** Joins: jaggz (~jaggz@user/jaggz)
[01:38:40] *** Quits: disi (~disi@c-98-207-149-218.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[01:39:02] <jaggz> is there a way to know if you're at the first or last item of a for loop range():
[01:39:04] <grym> if the builtins are allowed, you should be able to just type() then
[01:39:06] <jaggz> for i in range(max(0, index-10), min(index+10, len(rnd)-1))
[01:39:07] <Repiphany> https://zope.readthedocs.io/en/latest/zopebook/BasicScripting.html#built-in-functions lol, what a mess
[01:39:43] <kittonian> Repiphany, yes, I know
[01:40:00] <catbeard> ok so i gotta be doing something dumb
[01:40:02] <kittonian> so I'm trying to do what you asked, but perhaps you could specifically explain how to accomplish what you want me to try?
[01:40:12] <Repiphany> print(isinstance(context.REQUEST.get(...), str))
[01:40:18] <catbeard> i moved the class stanzas into their own files in ./lib/
[01:40:24] <jaggz> or do I really need to assign those to some other variables to test it without repeating the thing, like "if i+1 == min(index+10, len(rnd)-1): we're at the end
[01:40:36] <catbeard> i'm in vscode trying to use debugpy with tcp listener and --wait-for-client
[01:40:55] <catbeard> what import syntax should i be using to include that class
[01:41:07] <kittonian> Repiphany, the response said false
[01:41:17] <grym> kittonian: then whatever you're getting back ain't a string
[01:41:29] <kittonian> ok, this is a good step forward
[01:41:33] <catbeard> i'm doing `import lib.IPValidator` i was doing `from lib import IPValidator`
[01:41:34] <Repiphany> What about print(isinstance(context.REQUEST.get(...), bytes))
[01:41:42] <grym> Repiphany: oooo good guess
[01:41:54] <kittonian> this has been my suspicion, even though the zope docs specifically say everything passed from a form is a string
[01:42:14] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[01:42:15] *** Joins: Voyager2Spirit (~Voyager2S@188.54.164.182)
[01:42:19] <kittonian> nope, false
[01:42:35] <jaggz> because I need to do some more elaborate tests in this list comprehension:
[01:42:36] <jaggz> https://pasteall.org/mVsR
[01:42:38] <nedbat> jaggz: there isn't a way to know if you are on the first or last element.
[01:42:54] <nedbat> jaggz: in some loops, it's impossible to know you are on the last element until after you try to get the next one
[01:43:06] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[01:43:09] <catbeard> "module lib.IPValidator has no attribute 'check'"
[01:43:11] <jaggz> and was going to switch to the stuff in a for loop, but that then means handling the ", " separator
[01:43:35] <jaggz> okay, then I think the best approach is to just append them to a list and join it after.. that'll work too
[01:43:57] <Repiphany> Ok, how about print(context.REQUEST.get(...).__class__)
[01:43:58] <catbeard> i'm just doing https://kopy.io/9nOjO#wFFOdAv5c5Kkip
[01:44:01] <kittonian> Repiphany, just tried int and that also came back false
[01:44:31] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:44:45] <kittonian> Repiphany, __class__ is invalid because it starts with an underscore
[01:45:13] *** Joins: Caesar-EW (~Caesar-EW@84.213.107.109)
[01:45:13] <jaggz> nedbat, hmm.. like an iterator returning 'whatever', until it raises a StopIteration?
[01:45:20] <kittonian> Repiphany, print(context.REQUEST.get('intranet_token', None).__class__)
[01:45:20] <bjs> kittonian: it says it has getattr
[01:45:30] <nedbat> jaggz: like reading from a file.
[01:45:33] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:45:36] <bjs> maybe it doesn't check getattr(..., "__class__")  :)
[01:45:38] <kittonian> bjs, yes, I can use getattr
[01:45:42] <jaggz> I really wish python had repeat: until and for (;;) type loops.
[01:45:53] <bjs> jaggz: it has `while True`
[01:45:55] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[01:46:01] <jaggz> yeah
[01:46:07] <bjs> jaggz: yeah... but?
[01:46:14] <Repiphany> itertools.takewhile
[01:46:19] <jaggz> yeah that's fine.  you're right.
[01:46:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:46:45] <jaggz> a final test with a break is repeat until.. nevermind that irritation of mine. It's actually invalid :)
[01:48:07] <catbeard> i'm trying to call a class method like if __name__ == '__main__': if IPValidator.check(sys.argv[1]): do something
[01:49:31] *** Quits: Karel (~Karel@ptr-9091p58oi38jm0gbi3p.18120a2.ip6.access.telenet.be) (Read error: Connection reset by peer)
[01:49:40] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[01:49:40] *** Quits: death916 (AdiIRC@user/death916) (Ping timeout: 240 seconds)
[01:49:48] *** Joins: Guddddu (~Guddu@190.84.88.92)
[01:50:00] <catbeard> without having to do ipv = IPValidator() ipv.check(sys.argv[1])
[01:50:36] <jaggz> catbeard, if foo().check() ?
[01:50:37] *** Quits: luvalon1 (~luva@178.239.173.200) (Quit: Byebye)
[01:50:59] *** Joins: luvalon1 (~luva@178.239.173.200)
[01:51:10] *** Quits: ubert (~Thunderbi@178.115.48.151.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[01:51:17] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 245 seconds)
[01:51:45] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[01:51:57] <catbeard> module object is not callable
[01:52:08] <catbeard> s/module/'module'/
[01:52:13] <kittonian> Repiphany, any other ideas to try?
[01:52:46] <BrenBarn> did you try doing the `getattr(..., '__class__')` thing?
[01:52:57] <kittonian> yes, i cannot
[01:53:01] *** Quits: Gudddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[01:53:14] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[01:53:39] <Yhg1s> catbeard: sounds like the thing you're calling is a module, not a classmethod. (The actual code and traceback might make it more obvious what's going on.)
[01:53:49] *** Quits: pragmaticenigma (~pragmatic@user/pragmaticenigma) (Quit: Leaving)
[01:54:08] <catbeard> Yhg1s: what would i modify on that kopy.io to make it a classmethod
[01:54:15] <catbeard> (cls, ?): ?
[01:54:38] <kittonian> print(context.REQUEST.getattr('intranet_token', None), '__class__')
[01:55:08] <kittonian> that's the only way I could get it to save the script without an error but the error_log says AttrtibuteError: getattr
[01:55:09] *** Quits: Voxel (~Voxel@ip178-67-155-188.onego.ru) (Quit: Client closed)
[01:55:39] <Yhg1s> catbeard: use 'classmethod' instead of 'staticmethod', if you want a classmethod. Can you pastebin the code that's trying to use the class, and the traceback you get?
[01:55:42] <grym> kittonian: oh, duhhh
[01:55:55] <grym> kittonian: what about print(isinstance(context.REQUEST.get(...), NoneType))
[01:56:37] <grym> if that's true
[01:56:41] <kittonian> NameError: name 'NoneType' is not defined
[01:56:49] <grym> ୧((#Φ益Φ#))୨
[01:56:55] <BrenBarn> getattr won't exist as an attribute, it's a global function
[01:57:10] *** Quits: Voyager2Spirit (~Voyager2S@188.54.164.182) (Remote host closed the connection)
[01:57:19] <grym> kittonian: ok, fine, how about print(isinstance(context.REQUEST.get('intranet_token',''), str))
[01:57:34] <catbeard> Exception has occurred: AttributeError
[01:57:36] <catbeard> module 'lib.IPValidator' has no attribute 'check'
[01:57:57] <kittonian> grym, yes, that comes back True
[01:58:03] <catbeard>     if not IPValidator.check(args.target):
[01:58:22] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[01:58:32] *** Joins: Voyager2Spirit (~Voyager2S@188.54.164.182)
[01:58:40] <catbeard> from lib import BruteWorker, PasswordList, IPValidator
[01:58:41] <Yhg1s> catbeard: that's a very strange way of formatting exceptions. How are you running this? What is the actual code you're running? (Not just the one line, the whole thing)?
[01:58:43] <catbeard> at the top
[01:58:50] <Yhg1s> catbeard: and what is 'lib'?
[01:58:55] <catbeard> it's a folder
[01:59:03] <catbeard> with a blank __init__.py in it
[01:59:07] <catbeard> and other .py modules
[01:59:10] <Yhg1s> catbeard: okay, and it has an IPValidator.py file in it?
[01:59:16] <catbeard> ya
[01:59:22] <Yhg1s> catbeard: then lib.IPValidator is not the class. It's the module.
[01:59:39] <Yhg1s> (It's usually a bad idea to name modules and classes the same way, because you'll get confused about what's what.)
[01:59:43] <grym> kittonian: ok! so.  your .get() is failing to find something with the name 'intranet_token', and so you've been getting None this whole time (because that was what you gave as the default)
[01:59:46] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[02:00:18] <grym> kittonian: (when i had you change the default value to the empty string, you got a string)
[02:00:24] <catbeard> wait so you mean all i need is a different class name?
[02:00:39] <Repiphany> lib.IPValidator.IPValidator.check
[02:00:49] <catbeard> ah
[02:00:50] <kittonian> grym, ok, not going to argue with that, except to say that when I raised the exception on mytoken, it came back with the value I entered, so it must be finding something right?
[02:00:54] *** Quits: Voyager2Spirit (~Voyager2S@188.54.164.182) (Remote host closed the connection)
[02:01:02] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[02:01:24] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:01:32] <Yhg1s> catbeard: no, you need to access the class, not the module that contains the class. The module name is just the thing that's confusing you about what's what.
[02:01:37] <grym> kittonian: i couldn't say
[02:02:37] <Repiphany> kittonian: What do you get if you just do `print(context.REQUEST)`
[02:03:07] *** Joins: pgib (~textual@173.38.117.86)
[02:03:20] *** Joins: Voyager2Spirit (~Voyager2S@188.54.164.182)
[02:03:25] <kittonian> grym, if the error_log showed Exception: 123456 and I had entered 123456 in the input field called intranet_token I have to assume that intranet_token is valid
[02:03:31] <kittonian> Repiphany, trying now
[02:03:55] <grym> kittonian: well, we've demonstrated it isn't being obtained by the .get() approach you're using, anyway
[02:04:07] <grym> valid or not, you're not getting it when you ask
[02:04:29] <kittonian> grym, yes, this is true
[02:04:41] <kittonian> Repiphany, I get a printout of the entire request
[02:04:56] <grym> kittonian: paste that printout!
[02:04:56] <kittonian> and there is a form variable listed of intranet_token with the value I entered
[02:05:07] <grym> ok, well, that's something.
[02:05:11] <Repiphany> Is it pastebinnable without revealing private information
[02:05:16] <kittonian> grym, there's a lot of private info in that request. can't pastebin it
[02:05:16] <aphysically> okay is there anything wrong with the way I subclassed string here? https://bpa.st/RZ3Q is there a way to set the instance attributes without computing getfiltopts twice like I am now?
[02:05:34] <kittonian> hmm, i can remove certain items and pastebin if you wish
[02:05:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Quit: Leaving...)
[02:05:40] <grym> time to reread the docs on REQUEST.get(), i should think
[02:05:52] *** Quits: sazawal (~sazawal@106.213.43.60) (Quit: Leaving)
[02:05:58] *** Quits: Voyager2Spirit (~Voyager2S@188.54.164.182) (Client Quit)
[02:05:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:06:04] <BrenBarn> it's possible the empty string thing means it's using some Zope subclass of str
[02:06:49] <BrenBarn> oh no the earlier one was also isinstance
[02:07:10] *** Quits: expunged (~elonsatos@user/elon-satoshi/x-4242282) (Ping timeout: 240 seconds)
[02:07:38] <BrenBarn> kittonian: yeah pastebin what you can
[02:08:47] <kittonian> here you go - https://pastebin.ubuntu.com/p/82ysKZhmPt/
[02:09:05] <BrenBarn> ha ha, this isn't promising: https://zope.readthedocs.io/en/latest/zopebook/AppendixB.html
[02:09:17] <kittonian> ha, yeah. is that wonderful?
[02:09:26] *** Quits: ganchan (~thomas_w@user/ganchan) (Read error: Connection reset by peer)
[02:09:57] *** Joins: expunged (~elonsatos@user/elon-satoshi/x-4242282)
[02:09:59] <grym> kittonian: "123456", "REQUEST" and "context" do not appear in that paste.
[02:10:12] <grym> oh, but there's intranet_token
[02:10:35] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:10:40] <kittonian> grym, that is the output of print(context.REQUEST)
[02:10:43] <grym> got it, yeah
[02:10:58] *** Parts: ghostbuster (~admin@user/ghostbuster) (WeeChat 2.3)
[02:11:27] *** Joins: thurs8 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:11:27] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[02:11:29] <grym> kittonian: does context.REQUEST.intranet_token work
[02:11:32] <grym> none of this .get()
[02:11:43] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:11:55] <kittonian> just tried it and it comes back with the value I entered
[02:12:16] <grym> https://zope.readthedocs.io/en/latest/zopebook/BasicScripting.html?highlight=request#accessing-the-http-request
[02:12:16] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[02:12:21] <BrenBarn> it's kind of nuts if there isn't even a way to disable these security things for debugging
[02:12:22] *** Quits: resmo (~resmo@135-58-239-77.dyn.cable.fcom.ch) (Quit: Leaving)
[02:12:33] <grym> kittonian: so, job done
[02:12:34] <grym> ?
[02:12:42] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[02:13:12] <kittonian> grym, nope. tried that before in the actual script and it doesn't work either
[02:13:39] <grym> it gets you what you want, though
[02:13:47] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:85bb:303f:a204:f0f2) (Ping timeout: 245 seconds)
[02:13:47] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 245 seconds)
[02:13:54] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:14:00] <kittonian> so does context.REQUEST.get('intranet_token', None)
[02:14:05] <BrenBarn> he just means it shows up as the same thing but still doesn't actually log in
[02:14:06] <kittonian> it prints exactly the same
[02:14:09] <grym> print(isinstance(context.REQUEST.intranet_token, str)) ?
[02:14:38] <kittonian> true
[02:14:51] <grym> ok.  so that's how i'd access that value
[02:14:53] <BrenBarn> didn't that print false before?
[02:14:55] <grym> perhaps you're still using it improperly
[02:14:56] <grym> BrenBarn: no
[02:15:09] <grym> BrenBarn: .get(..., None) was False
[02:15:09] <BrenBarn> oh that was with the get
[02:15:13] *** Joins: nagualcode (~nagualcod@181.221.147.75)
[02:15:21] <nagualcode> how do I parse param1=value1&param2=value2 into a python object?
[02:15:32] <BrenBarn> did you try putting stuff in like `my_token == "123456"` right before the call to verify the token is the same as what it's supposed to be?
[02:15:34] *** Quits: expunged (~elonsatos@user/elon-satoshi/x-4242282) (Ping timeout: 252 seconds)
[02:16:03] <BrenBarn> to be honest if I was using a lib that prevented me from accessing the `type` builtin I would probably just kick that whole framework to the curb
[02:16:07] <Yhg1s> nagualcode: urllib.parse.parse_qs
[02:16:24] *** Joins: rany (~rany@user/rany)
[02:16:35] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Quit: +++)
[02:17:00] <kittonian> BrenBarn, yes. that's what I was talking about when I said I hard coded it. mytoken = '123456'
[02:17:03] <kittonian> that works
[02:17:13] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 252 seconds)
[02:17:15] <kittonian> as long as I'm fast enough to login before the token expires
[02:17:31] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[02:17:35] <kittonian> and I just tried mytoken = context.REQUEST.intranet_token
[02:17:47] <BrenBarn> no but I meat do you actually check whether they are equal in the same run
[02:17:48] <kittonian> and mytoken = repr(context.REQUEST.intranet_token)
[02:17:49] <BrenBarn> er, I mean
[02:17:52] <kittonian> neither work
[02:18:20] *** Joins: lalilulelo (~lalilulel@2804:14d:7680:8ed4:2d57:66ab:41ef:4d0a)
[02:18:52] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[02:19:28] <BrenBarn> I don't mean that, I mean have two separate variables `manual_token` and `request_token` and check if they are equal in the same run of the code
[02:20:23] <BrenBarn> maybe you could write a separate script to modify this script to insert the literal token value :-)
[02:20:31] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[02:20:46] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[02:20:47] <kittonian> BrenBarn, and how might I do that? this is all running through pluggable auth service.
[02:20:55] <nagualcode> Yhg1s: how do I import parse_qs ?
[02:21:06] <kittonian> BrenBarn, you're talking about things that would be done via command line
[02:21:07] <Yhg1s> nagualcode: you import the module, which is urllib.parse
[02:21:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:22:38] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[02:23:08] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[02:23:12] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:23:37] *** Quits: entuland_ (~entuland@user/entuland) (Ping timeout: 248 seconds)
[02:24:15] *** Joins: Fiji (~Fiji@user/fiji)
[02:24:22] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 252 seconds)
[02:24:44] <nagualcode> how can I print ['value1']   without the quotes ?
[02:25:29] <FunkyBob> don't print the whole list?
[02:26:22] <FunkyBob> and don't use repr,
[02:26:31] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[02:26:37] *** Joins: zebrag (~chris@user/zebrag)
[02:26:56] <bjs> nagualcode: print(", ".join(that_list))  # will print each string out side-by-side without quotes with a comma between
[02:27:04] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Excess Flood)
[02:27:05] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[02:27:14] *** Quits: Barones (~Barones@2804:48dc:8500:0:3100:1852:23b9:80b6) (Quit: Leaving)
[02:27:21] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[02:27:26] <bjs> nagualcode: or print(that_list[0]) will print out just the first element of the list
[02:28:25] <BrenBarn> kittonian: well, by one run I mean one request
[02:28:31] <nagualcode> print(that_list[‘param1’])    returns:  [‘value1’]
[02:28:32] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[02:28:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:29:06] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[02:29:16] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[02:29:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:29:43] <grym> nagualcode: print(that_list[‘param1’][0]), maybe?
[02:29:48] <grym> do you have a list of lists?
[02:30:58] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[02:30:59] <nagualcode> i have what urllib.parse.parse_qs gave from a urlencoded
[02:31:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:31:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:33:43] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:34:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[02:34:41] *** Quits: jlix (~johannes@81-236-244-23-no298.tbcn.telia.com) (Ping timeout: 268 seconds)
[02:36:19] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[02:36:27] <nagualcode> grym: [0] made ir
[02:36:30] <nagualcode> thx
[02:37:13] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[02:37:15] *** Joins: jlix (~johannes@81-236-244-23-no298.tbcn.telia.com)
[02:37:47] *** Quits: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[02:38:33] *** Quits: hyper_dave (~hyper_dav@196.191.53.193) (Ping timeout: 248 seconds)
[02:38:33] *** Quits: Narrat (~omnius@p200300df5f15173406ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:40:16] *** Quits: akinode (~akinode@2a02:908:1394:cce0:f7:5db1:33e7:f8e) (Ping timeout: 246 seconds)
[02:40:40] *** Joins: hyper_dave (~hyper_dav@197.156.103.172)
[02:40:40] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 240 seconds)
[02:41:40] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 240 seconds)
[02:41:58] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[02:42:34] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:112f:5e27:48fb:e80)
[02:42:57] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[02:43:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:44:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:46:51] *** Joins: srhm (~srhm@user/srhm)
[02:47:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:47:43] *** Quits: cedric (~cedric@2a01:cb11:867:c200:7fb9:6452:6094:1bf7) (Quit: Konversation terminated!)
[02:50:06] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[02:54:11] *** Quits: nagualcode (~nagualcod@181.221.147.75) (Quit: nagualcode)
[02:56:53] *** Quits: Caesar-EW (~Caesar-EW@84.213.107.109) (Ping timeout: 268 seconds)
[03:00:36] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[03:00:57] *** Joins: bninja (~bloodninj@user/bloodninja)
[03:01:02] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[03:01:14] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[03:03:14] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[03:04:31] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 252 seconds)
[03:10:25] *** Joins: monkey_ (~user@181.114.17.106)
[03:11:13] <kittonian> aha!
[03:11:24] <kittonian> I think I might know why this is not working, but I need some help to try and fix it
[03:11:42] <kittonian> everything that is being processed is within the for loop
[03:11:45] *** Joins: venue (~venue@209.51.86.47)
[03:11:57] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Quit: leaving)
[03:12:17] <kittonian> and the for is changing the context to be a sql script, which I would imagine means that the variable being called from a different context would no longer be accessible
[03:12:39] <kittonian> everything is within for user in context.fetch_user_by_name(login=login):
[03:13:36] <kittonian> so how do I ensure that this variable, accessed from context.REQUEST is accessible within that for loop?
[03:13:43] *** Quits: venue (~venue@209.51.86.47) (Quit: Textual IRC Client: www.textualapp.com)
[03:14:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:15:02] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:16:39] *** Quits: Akuli (~Akuli@82-203-160-234.bb.dnainternet.fi) (Quit: Leaving)
[03:17:37] *** Joins: tg (~tg@rockylinux/infra/tg)
[03:17:47] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[03:17:59] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[03:18:16] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:18:24] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[03:18:47] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 245 seconds)
[03:19:12] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[03:19:58] <kittonian> anyone still around?
[03:20:04] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:21:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[03:23:23] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:25:47] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[03:26:11] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:26:38] *** Joins: mickey (~user@user/mickey)
[03:26:54] <nedbat> kittonian: i think people don't understand your environment, or how to help
[03:27:11] <kittonian> my question now has nothing to do with my environment
[03:27:17] <kittonian> it is straight up python
[03:27:27] <grym> kittonian: then assign a name in the correct scope
[03:27:32] *** Joins: venue (~venue@209.51.86.47)
[03:27:32] *** venue is now known as venuex
[03:27:40] <Yhg1s> kittonian: can you show the code you're trying to describe, instead?
[03:27:53] <kittonian> i can't assign a different context from the context of the for loop
[03:27:54] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 258 seconds)
[03:28:00] <kittonian> this is why the variable is defined at the top of the script
[03:28:11] <kittonian> so i'm asking how I get that variable into the for loop
[03:28:34] <kittonian> Yhg1s, https://community.plone.org/t/totp-via-passlib-and-pas/14209
[03:28:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:28:35] *** Quits: c4017w__ (~c4017@209.52.68.8) (Quit: Leaving)
[03:28:37] <Yhg1s> kittonian: the vague description suggests assignment is the Python answer. If you can't do that, it isn't Python after all. (You know there are Zope forums as well, right?)
[03:28:46] <Repiphany> for loops don't have a separate scope
[03:29:16] <kittonian> hmm, if I raise the exception before the for loop, i get the correct value in the error_log
[03:29:28] <kittonian> if I raise it within the for loop i do not
[03:29:40] <nedbat> kittonian: can you pastebin a clean version of your latest code?
[03:30:30] <kittonian> so i have to assume (and I could be wrong) that because the for loop is for use in context.fetch_user_by_name(login=login) it is changing the scope and thus erasing the mytoken variable
[03:30:43] <kittonian> nedbat, what is posted in that forum post is current
[03:31:04] <nedbat> kittonian: that post has a number of parts. you are asking a lot of volunteer helpers.
[03:31:26] <kittonian> it has a few followups of things I've tried
[03:31:34] <kittonian> but the initial post has the script
[03:31:35] <nedbat> kittonian: yes. it's hard to follow.
[03:32:02] <nedbat> kittonian: you said, "if I raise the exception before the for loop, " etc.  Can you pastebin that version of the code, and the one with the exception inside the loop?
[03:33:12] *** Quits: venuex (~venue@209.51.86.47) (Changing host)
[03:33:12] *** Joins: venuex (~venue@user/venue)
[03:33:26] <kittonian> https://pastebin.ubuntu.com/p/YW6gFT6qhz/
[03:33:39] <kittonian> look at line 8 and you'll see the exception line (it is currently commented)
[03:33:45] <kittonian> that would be above the for loop
[03:34:10] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (Ping timeout: 240 seconds)
[03:34:19] <kittonian> if I move it down into the for loop (i.e. line 24) and make line 24 line 25, it does not work
[03:34:49] <Repiphany> Is this inside a function
[03:35:00] <Repiphany> Where are you returning those tuples to
[03:35:30] *** Joins: cinderconered (~cindercon@035-133-024-130.res.spectrum.com)
[03:35:34] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[03:35:43] <Yhg1s> kittonian: can you please show us the code that doesn't work, exactly as you're using it? Because your description doesn't appear incorrect, but there are a lot of other things that could be wrong. For example, the indentation of the end result. We really need to see the code that doesn't work.
[03:35:48] <kittonian> again this is with pluggable auth service
[03:36:01] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[03:36:15] <kittonian> Yhg1s, this is the code that doesn't work
[03:36:46] <nedbat> kittonian: this code is a syntax error, strictly speaking
[03:36:49] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:37:02] <Yhg1s> kittonian: then I don't understand what you meant when you said "if I move it down into the for loop (i.e. line 24) and make line 24 line 25, it does not work"
[03:37:23] <kittonian> Repiphany, not sure it matters where anything is being returned, if I can hard code the google auth and do away with the context.REQUEST and get it to work
[03:37:40] <Yhg1s> kittonian: what matters is that 'return' is only valid in a function.
[03:37:45] <kittonian> Yhg1s, the exception doesn't work. it doesn't show the value of mytoken
[03:38:03] *** Quits: humberto1 (~humbertow@187.202.209.28) (Read error: Connection reset by peer)
[03:38:07] <nedbat> kittonian: what does it actually show when it doesn't show the value of mytoken?
[03:38:35] <kittonian> Yhg1s, this all works if I hard code the google auth token into line 23 instead of using mytoken (i.e. '123456' instead of mytoken)
[03:38:50] <kittonian> nedbat, zope just throws an unauthorized error. very cryptic
[03:38:56] *** Joins: mickey5 (~user@user/mickey)
[03:39:19] <nedbat> kittonian: can you pastebin that full error report? Is it coming from totp_verify?
[03:39:19] *** Parts: cinderconered (~cindercon@035-133-024-130.res.spectrum.com) ()
[03:39:25] <kittonian> no
[03:39:26] *** Joins: nagualcode (~nagualcod@181.221.147.75)
[03:39:29] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[03:39:32] <kittonian> it is not coming from anywhere except zope
[03:39:41] <kittonian> the full error is literally Unauthorized
[03:39:44] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:39:53] <kittonian> if there were better error logs, this would be a lot easier to resolve :)
[03:40:21] <nedbat> kittonian: why are you using repr on line 6? that seems like it would break the token
[03:40:32] <kittonian> i've tried it without it as well
[03:40:39] *** Joins: heco (~redrum@user/redrum88)
[03:40:46] *** Quits: mickey (~user@user/mickey) (Ping timeout: 244 seconds)
[03:40:47] *** mickey5 is now known as mickey
[03:40:49] <Yhg1s> kittonian: it still sounds very much like this is not about Python, but about Zope.
[03:40:53] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:40:58] <kittonian> the thought was that if I hard code it I have to do so as '123456' and context.REQUEST.intranet_token comes back as 123456 without any qutoes
[03:41:03] <kittonian> but either way it doesn't work
[03:42:09] <nedbat> kittonian: change line 6 to:  mytoken = context.REQUEST.intranet_token;  print(repr(mytoken))
[03:42:19] *** Quits: heco (~redrum@user/redrum88) (Client Quit)
[03:42:33] <kittonian> nedbat, can't do that. this is a script within pluggableauthservice
[03:42:38] <nedbat> kittonian: then see if it works, and either way, compare the printed output to the hardcoded string you can use that does make it work.
[03:42:46] <kittonian> but i have done exactly that previously (today)
[03:42:51] <kittonian> it returns '123456'
[03:43:00] <kittonian> and without repr it returns 123456
[03:43:15] <nedbat> kittonian: you've already done the thing that you can't do? i'm confused.
[03:43:22] <Repiphany> kittonian: https://bpa.st/LIJA
[03:43:33] <kittonian> i setup a test login with a test python scrip that did nothing but print statements
[03:44:06] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 276 seconds)
[03:44:18] <nedbat> kittonian: ok, in the real plugin:  with open("/tmp/tokens.txt", "a") as f: print(repr(mytoken), file=f)
[03:44:58] <kittonian> nedbat, what do you mean in the real plugin?
[03:45:13] <nedbat> kittonian: sorry, in the script within pluggableauthservice
[03:45:20] <nedbat> kittonian: in the real code
[03:45:29] <kittonian> are you talking about ZcPassword.py that has that data in it for passlib and totp?
[03:45:31] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Read error: Connection reset by peer)
[03:45:51] <nedbat> kittonian: this file you put in the pastebin.  add code to output the values
[03:46:14] *** Joins: manin (~x@185.242.190.95)
[03:46:22] <kittonian> i cannot output anything except exception errors because this is one of many portions of pluggableauthservice
[03:46:32] <nedbat> kittonian: you can write files to /tmp, yes?
[03:46:42] <kittonian> there is no /tmp
[03:46:50] <kittonian> and no, you cannot access the linux filesystem
[03:46:55] <kittonian> that's not how zope works
[03:47:39] <nedbat> kittonian: i understand that zope provides other structures.  does that mean they literally prevent you from writing to the filesystem?
[03:47:47] <kittonian> yes, it literally means that
[03:47:57] <nedbat> kittonian: ok, then i'm out of ideas
[03:48:22] *** Joins: duoi (~duoi@user/duoi)
[03:49:02] <nedbat> kittonian: do you happen to know how they prevent you from accessing the file system? Zope is just a large Python program
[03:49:02] *** Quits: nagualcode (~nagualcod@181.221.147.75) (Quit: nagualcode)
[03:49:04] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 252 seconds)
[03:49:26] <nedbat> kittonian: maybe you could humor me and try writing that file?
[03:49:45] <kittonian> nedbat, everything is housed within the zodb. there is no filesystem. there is literally one file that contains everything within zope called Data.fs
[03:50:00] <kittonian> you can't even use most python modules because of the restrictions
[03:50:04] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[03:50:06] <nedbat> kittonian: for my own education, can you try my code, and tell me what happens?
[03:50:11] <kittonian> it's very limited and very security oriented
[03:50:24] <kittonian> i cannot because it will break zope and I will lose access
[03:50:27] <nedbat> ok.
[03:50:48] <kittonian> believe me. i wish i could
[03:50:54] <nedbat> kittonian: we come back to: this is a lot about zope, and zope is strange, and no one understands its limitations and strangenesses.
[03:51:01] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-30fb-2e4a-2d6a-d970.res6.spectrum.com) (Read error: Connection reset by peer)
[03:51:05] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 248 seconds)
[03:51:20] <kittonian> all i am asking about is how to ensure that the variable I am defining at the top of the script is able to be accessed within the for loop
[03:51:22] <kittonian> that's all
[03:51:28] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:51:44] <nedbat> kittonian: there's nothing that would change that variable.
[03:51:57] <nedbat> kittonian: now you will say it changes! and we say, "we don't see how that could be"
[03:52:09] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[03:52:18] <nedbat> kittonian: and we don't have any debugging access to your code, because zope, so we are stuck.
[03:52:27] <kittonian> if you are changing contexts than the variable wouldn't be available any longer right?
[03:52:37] <nedbat> kittonian: i don't know what you mean by context
[03:53:12] <kittonian> context.fetch_user_by_id is saying call the sql method called fetch_user_by_id
[03:53:21] <nedbat> kittonian: a variable defined at the top of the function, and never assigned to again, will be availble throughout the function
[03:53:26] <kittonian> context.REQUEST is saying find a variable within the request
[03:53:45] <Repiphany> kittonian: Can you try running this and see what's printed out, replace mytoken2 as appropriate https://bpa.st/LIJA
[03:53:47] <nedbat> kittonian: those are attributes on objects.  But that isn't what you are doing.
[03:54:01] <nedbat> Repiphany: kittonian says that print won't work.
[03:54:18] <kittonian> Repiphany, again, I would love to but that won't work because it's not auth'ing properly within PAS
[03:54:23] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[03:54:50] *** Joins: adelfino (~adelfino@2800:21c1:c400:a94:19f6:268d:ec2f:b221)
[03:54:56] <nedbat> kittonian: you tell us: what can we do to see the values of variables?
[03:54:59] <kittonian> Repiphany, what I can do, is what I did previously today with you
[03:55:24] <kittonian> which is to use the test login page with a simply python script where nothing is secured by pluggableauthservice and print the variables that return
[03:55:38] <kittonian> however, you and I already know what the output will be because we did this earlier today
[03:55:40] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[03:55:56] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:55:58] *** Joins: rany_ (~rany@user/rany)
[03:56:04] <kittonian> if I enter 123456 in the text field, both mytoken and mytoken2 will come back as 123456
[03:56:28] <Repiphany> What is the actual code that you were running before if it wasn't what was pasted
[03:56:39] <Repiphany> and how is what I pasted different enough to not be able to run
[03:56:40] *** Quits: rany (~rany@user/rany) (Ping timeout: 240 seconds)
[03:56:44] *** rany_ is now known as rany
[03:56:46] <kittonian> Repiphany, you mean for our print stuff earlier?
[03:56:56] <Repiphany> Sure
[03:57:04] <kittonian> print(isinstance(context.REQUEST.intranet_token, str))
[03:57:06] <kittonian> return printed
[03:57:08] <kittonian> that's it
[03:57:09] <adelfino> SnoopJ: it's a shame dale is not on-line. This my war story: remember that buffering problem I was having? Well, I didn't have a buffering problem at all. The file I thought indicated that a process started was touched by another process. So the file always existed, so I tried reading it when I shouldn't. Hope it is clear if you ever come across such a problem.
[03:57:30] <kittonian> i basically setup a test login page and set the form action to this test python script
[03:57:32] <kittonian> that's it
[03:57:34] <Repiphany> and what was the problematic code that you were able to run by changing one line
[03:57:51] <kittonian> i'm sorry, i don't understand the question
[03:58:03] <kittonian> are you asking what I changed to make it work?
[03:58:10] <kittonian> as in hard coding the actual script?
[03:58:33] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Ping timeout: 268 seconds)
[03:58:38] <Repiphany> What the the full working code that you were able to run when you hardcoded mytoken
[03:58:54] <Repiphany> s/the/is/
[03:58:58] <kittonian> it's the same code except this one line
[03:58:59] <kittonian> if not totp_verify(mytoken, user.totp_key):
[03:59:03] <kittonian> was changed to
[03:59:09] <Repiphany> pastebin the whole code with no comments
[03:59:10] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:59:11] <kittonian> if not totp_verify('123456', user.totp_key):
[03:59:11] *** Wulf4 is now known as Wulf
[03:59:13] <kittonian> that's it
[03:59:26] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[03:59:28] <nedbat> kittonian: can you get the exception message if you raise an exception?
[03:59:29] <kittonian> there's nothing to pastebin. it's super simple
[03:59:45] <nedbat> kittonian: it's very frustrating when you refuse to pastebin
[03:59:50] <Repiphany> I can't follow what you're referring to with "the same code" if you don't pastebin explicitly for my small brain
[03:59:59] <nedbat> kittonian: referencing old code, with deltas, is difficult to follow.
[04:00:01] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[04:00:02] <kittonian> nedbat, yes, i showed that in my pastebin. if I raise an exception before the for loop, it will show me Exception: 123456 in the error_log
[04:00:32] <kittonian> Repiphany, line 23 in my paste
[04:00:40] <kittonian> just replacing mytoken with '123456'
[04:00:55] <kittonian> so there's no variable in the equation
[04:01:04] <nedbat> kittonian: before this line `if not totp_verify(mytoken, user.totp_key):`  put:  raise Exception("The token is {0!r}".format(mytoken))
[04:01:28] <nedbat> kittonian: then run that file, and pastebin the whole file, and the exception message you get.
[04:01:29] <kittonian> bear in mind that '123456' is not real. those numbers change every 30 seconds and I am getting the real numbers via Google Authenticator
[04:01:41] <Repiphany> So you're able to run this exact code (with the right '123456') https://bpa.st/KXBA
[04:01:52] <nedbat> kittonian: it's going to be difficult to compare values then, right?
[04:01:55] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[04:02:03] <kittonian> Repiphany, that is correct
[04:02:06] <kittonian> works perfectly
[04:02:08] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:02:10] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[04:03:26] *** Joins: Fiji (~Fiji@user/fiji)
[04:03:38] <Repiphany> kittonian: Does this code also run https://bpa.st/3NAA
[04:03:47] <kittonian> nedbat, Exception: The token is "'111111'"
[04:05:10] <nedbat> kittonian: here is my suggestion for code to try: https://gist.github.com/2e7d5ca17e0f85a4b57462efeda50602
[04:06:55] <kittonian> Repiphany, no. that code does not work
[04:07:22] *** Joins: sri19 (uid477846@id-477846.charlton.irccloud.com)
[04:08:06] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[04:08:43] <nedbat> kittonian: can you try mine?
[04:09:05] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[04:09:36] <kittonian> nedbat, just did. here's the output
[04:09:37] <kittonian> Exception: litworks = False, varworks = True, mytoken = '649777'
[04:09:51] <kittonian> which is the correct token i entered
[04:10:08] *** Quits: ckdcreation (~ckdCreati@147.55.130.34) (Quit: Leaving)
[04:10:08] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[04:10:16] <kittonian> sorry for the delay. it takes a second to put in what you are asking me to do and comment out other things
[04:10:26] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[04:10:32] <hogarius> kittonian: please stop trying to explain away what these people ask.  please just do what they ask. Otherw/ise, please just accept that they cannot help you.
[04:10:34] <nedbat> kittonian: ok, but that's good: the variable worked, which is what you wanted.
[04:10:41] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[04:10:44] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[04:10:52] <nedbat> kittonian: unless you ran slightly different code.
[04:10:53] <kittonian> nedbat, yes. the variable worked
[04:10:57] <nedbat> kittonian: so it's fixed?
[04:11:07] <kittonian> nedbat, nope. i commented out everything but what you asked for
[04:11:13] <kittonian> it's fixed?
[04:11:22] <nedbat> kittonian: wasn't the goal to get the variable to work?
[04:11:30] <kittonian> nothing is different. we just raised an exception and are not calling the totp_verify
[04:11:43] <nedbat> kittonian: the code I gave you calls totp_verify
[04:11:59] <kittonian> nedbat, yes of course we want the variable to work, but i need it to actually auth the user upon login
[04:12:15] <nedbat> kittonian: can you pastebin the code you just ran?
[04:13:09] <kittonian> https://pastebin.ubuntu.com/p/V3k6htQPPx/
[04:13:19] <SnoopJ> adelfino, aha! Glad you found your ghost. As always, "Most bugs are a result of the execution state not being exactly what you think it is." :)
[04:14:37] <nedbat> kittonian: hmm, you've been saying for a while, "literals work, and the variable doesn't".  Now we have the literal failing and the variable working.
[04:14:40] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[04:15:09] <kittonian> the literal only failed because we used 123456 instead of the actual auth code from google authenticator
[04:15:43] <nedbat> kittonian: ok, that mystery solved.  But the variable is working.  Put back the real returns, and see if it works.
[04:16:08] <kittonian> sure, but that's how it was before and it didn't work
[04:16:16] <adelfino> SnoopJ: :) Thanks again for the help
[04:16:25] <nedbat> kittonian: if you want to stop, stop. If you want to continue, let's continue.
[04:16:45] <kittonian> that's not what I said
[04:16:51] <adelfino> SnoopJ: is that taken from https://collincode.wordpress.com/2016/07/19/john-carmack-on-inlined-code/ ?
[04:17:03] <nedbat> kittonian: your sentence had "but" which is a form of "no", which is frustrating.
[04:17:06] <kittonian> and i'm doing it now. but all you are asking me to do is put the script back to the way it was when it wasn't working
[04:17:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[04:17:14] <nedbat> kittonian: yes
[04:17:17] <kittonian> ok
[04:17:40] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[04:18:03] <kittonian> ok, unauthorized error
[04:18:12] <nedbat> kittonian: ok, pastebin that code.
[04:18:27] <SnoopJ> adelfino, I first encountered it by the linked article on Jonathan Blow's blog, yep. The emails themselves are great, but the aphorism itself is far more profound than "don't design C++ castles in the sky when you're writing a game"
[04:18:43] *** Joins: echi (uid501591@id-501591.tooting.irccloud.com)
[04:19:01] <kittonian> https://pastebin.ubuntu.com/p/wW7f5fznKN/
[04:19:33] <adelfino> SnoopJ: nice
[04:20:32] <nedbat> kittonian: if my exception code worked, this code should work. it doesn't make any sense.
[04:20:43] <kittonian> i completely agree
[04:20:51] <kittonian> that's been my issue for two days now
[04:21:23] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[04:21:49] <kittonian> the only thing I can come up with is that mytoken isn't being passed as '123456'
[04:21:58] <kittonian> otherwise, i'm out of ideas
[04:22:15] <kittonian> so that's been how I've been working on solving the issue
[04:22:24] <kittonian> which is why I had repr() around it, but that didn't work either
[04:22:53] *** Joins: newbs (~androirc@2600:380:7e48:247c:60a6:5315:4eaa:42cd)
[04:22:55] <nedbat> kittonian: right, that repr wouldn't fix it.
[04:23:09] <Repiphany> kittonian: Can you try running this? https://bpa.st/EUTA
[04:26:00] <kittonian> Repiphany, just did. it raised no exceptions but came back with the unauthorized error
[04:26:43] <Repiphany> Then the error is (user.id, user.username) isn't what you need to return to "authorize" whatever
[04:26:55] <nedbat> or, you are not running the code you think you are.
[04:27:47] <kittonian> remember that if I hard code in the mytoken value instead of using the variable it logs me in
[04:28:34] <kittonian> i'm 99% sure it's a formatting issue with this variable, because that's the only thing that makes sense
[04:28:45] <nedbat> kittonian: there are other things that make sense.
[04:28:50] <nedbat> kittonian: we've checked the formatting
[04:28:59] <nedbat> kittonian: how is this code run? A return at the top level is a syntax error.
[04:29:28] <kittonian> https://pypi.org/project/Products.PluggableAuthService/
[04:29:37] <kittonian> this is scriptable plugin within that framework
[04:29:48] <kittonian> and this script is one component of the scriptable plugin
[04:31:10] <nedbat> kittonian: i can't find a place in the docs that explains what happens to the code you are showing us.
[04:31:30] <kittonian> a scriptable plugin is a way to write your own plugins for auth
[04:31:43] <kittonian> this one is using passlib installed into the virtualenv via pip
[04:32:45] <kittonian> and then a python module/plugin/script called ZcPassword.py was written on the file system to use passlib with totp that is what is being called at the top of this script
[04:32:48] <nedbat> kittonian: do you see what I mean about the return statements being syntax errors?
[04:33:16] <kittonian> i'm not getting any syntax errors and again, if I hard code the value of mytoken it works
[04:33:44] <nedbat> kittonian: i know you aren't getting syntax errors.  Do you understand that the file you're showing us, if you run it in Python, it will be a syntax error?
[04:33:51] <nedbat> kittonian: there's something unusual about how that code is run.
[04:34:20] <kittonian> that i do not know
[04:35:17] *** Quits: BSaboia (~bsaboia@188-178-217-166-cable.dk.customer.tdc.net) (Quit: Leaving)
[04:36:07] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[04:36:15] <Repiphany> What are the definitions of verify_password and totp_verify in ZcPassword
[04:36:20] <kittonian> but whenever i am debugging something or trying to resolve an issue, i eliminate variables. in this situation, everything is telling me that if I can type '123456' and context.REQUEST.intranet_token is supposed to be '123456' context.REQUEST.intranet_token is not '123456' or else it would work
[04:38:09] <kittonian> this is ZcPassword.py https://pastebin.ubuntu.com/p/TtjTKBKPVW/
[04:38:51] <Repiphany> So they are simple return True/False functions
[04:39:05] <kittonian> yup, very simplistic
[04:40:14] <Repiphany> If your script needs to just return (user.id, user.username) to "authorize" whatever, can you test your script skipping the totp parts altogether and seeing if you authorize
[04:40:27] *** Quits: emerent (~quassel@p200300cd57058c9dba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:40:28] <kittonian> yes, it authorizes without totp
[04:41:10] <Repiphany> Then, if the totp_verify is returning True (i.e. there was no exception raised), then you should be authorizing just fine
[04:41:14] *** Joins: emerent (~quassel@p200300cd57058cd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:41:23] <kittonian> correct. i absolutely should be
[04:41:49] <kittonian> but like i said, it most likely has to do with the formatting of mytoken coming from context.REQUEST
[04:42:09] <Repiphany> But there are no problems with the formatting, the totp_verify function is working just fine with whatever it's given
[04:42:15] <kittonian> there is no other explanation at this point. if I can hard code it in and it works, then the variable formatting is wrong
[04:42:51] <kittonian> but what it's being given from context.REQUEST and what it's being given when hard coding '123456' seem to be two different things
[04:42:55] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[04:43:20] <Repiphany> It doesn't matter, you're either getting True or False from that totp_verify function
[04:43:32] <kittonian> ok
[04:43:34] <Repiphany> If it's False for whatever reason, an exception is raised in the code I gave
[04:44:10] <Repiphany> and if no exceptions were raised, then the code returns (user.id, user.username) which is what you claim authorizes just fine if you skip the totp part altogether
[04:44:11] <kittonian> i can tell you from testing that the exception isn't raised when the formatting is wrong, or when the variable can't be found. in those cases only the unathorized error is given
[04:44:24] <kittonian> so there are various circumstances where the exceptions are not raised
[04:44:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[04:45:33] <Repiphany> totp_verify has a try/except that won't return True if the token is malformed
[04:46:06] <kittonian> what if, instead of overthinking this, we simply specified exactly what we want in that mytoken variable (i.e. 6 digits, no special characters/spaces/etc) and then tried it
[04:46:30] <nyuszika7h> is there a good tool for finding unused code? and I mean actually good tool, not vulture which says everything is unused with 60% confidence (and the majority of them ARE used in other files in the project)
[04:46:31] <kittonian> that's what I've been trying to work with for a while now
[04:46:39] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:47:20] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[04:47:34] <SnoopJ> nyuszika7h, how many entrypoints are there to this code?
[04:48:03] <Repiphany> If you're insisting that https://bpa.st/ZSVA authorizes while https://bpa.st/EUTA doesn't authorize but no Exceptions are raised in either, then I don't know how to help you further
[04:48:49] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[04:48:51] <kittonian> Repiphany, I'm asking you for a way to write the mytoken = line so that only 6 digits, surrounded by single quotes, and nothing else is what the variable will equal
[04:48:57] *** Joins: mickey7 (~user@user/mickey)
[04:49:03] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:49:08] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[04:49:16] <kittonian> that's the only way to ensure that '123456' is the same as what we are passing from the mytoken variable
[04:49:23] <SnoopJ> nyuszika7h, I believe pylance and maybe pylint are capable of some analysis like this. My preferred strategy is to work out invocations that are "important" and run those through coverage.py and see what doesn't get run, but this is more of an exploratory tool than a proper static analysis
[04:49:24] *** brachamh_ is now known as brachamh
[04:49:48] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[04:50:02] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[04:50:23] <nyuszika7h> it's a CLI tool so one main entrypoint, though there are a bunch of small scripts in the code that import a few modules from it as well
[04:50:31] *** Quits: mickey (~user@user/mickey) (Ping timeout: 244 seconds)
[04:50:32] *** mickey7 is now known as mickey
[04:52:10] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[04:52:42] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[04:53:23] <SnoopJ> You'd have to perform the work of "unreachable from none of these" yourself, as I understand it
[04:53:39] <SnoopJ> by separately analyzing each entrypoint and looking at the union of what's reachable from all that
[04:55:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[04:55:17] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[04:55:58] <kittonian> I'll keep working on it. I appreciate all of you that tried to assist - Repiphany nedbat BrenBarn. Thank you for your time. If I'm still stuck on this tomorrow, I'll pop back in to see if perhaps you thought of anything else to try. Have a wonderful evening everyone.
[04:56:12] *** Quits: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com) (Quit: Leaving)
[04:57:09] *** Quits: remline (~remline@user/remline) (Quit: leaving)
[04:57:12] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[04:57:21] *** Quits: adelfino (~adelfino@2800:21c1:c400:a94:19f6:268d:ec2f:b221) (Quit: Leaving)
[04:57:30] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:58:17] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Read error: Connection reset by peer)
[04:58:24] *** Joins: Nivlac (~gabriel@181.223.203.212)
[04:58:37] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[04:58:40] *** Joins: qlixed (~qlixed@181.44.129.13)
[04:58:53] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[04:59:49] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[04:59:52] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[05:01:40] *** Quits: jlix (~johannes@81-236-244-23-no298.tbcn.telia.com) (Ping timeout: 252 seconds)
[05:02:13] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[05:02:19] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[05:04:10] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[05:04:33] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 268 seconds)
[05:04:43] *** Joins: milosz_ (~milosz@user/milosz)
[05:05:03] *** Joins: death916 (AdiIRC@user/death916)
[05:05:10] *** Quits: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au) (Read error: Connection reset by peer)
[05:05:24] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Read error: Connection reset by peer)
[05:05:27] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:06:56] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[05:07:03] *** Joins: iflema (~ian@user/iflema)
[05:08:52] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 268 seconds)
[05:12:33] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[05:12:40] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[05:17:26] <BrenBarn> to be honest if I were doing this I would be worried that even if I got it working I would just later encounter other problems that would be similarly difficult to debug because of Zope's weirdness
[05:17:27] <BrenBarn> I didn't realize Zope was this insane
[05:17:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:18:12] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[05:18:51] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[05:19:37] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 245 seconds)
[05:19:48] *** Joins: Gudddu (~Guddu@190.84.88.92)
[05:20:57] <grym> it's pretty old
[05:23:07] *** Quits: Guddddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[05:23:40] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[05:23:56] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:24:32] *** Parts: echi (uid501591@id-501591.tooting.irccloud.com) ()
[05:30:32] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:38] *** Joins: vlm (~vlm@user/vlm)
[05:37:04] *** Joins: y1n (~y1n@84-115-65-100.wifi.dynamic.surfer.at)
[05:40:27] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[05:40:43] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:50:21] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:52:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:52:16] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[05:55:46] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:56:35] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[05:57:16] *** Joins: mmalter (~mmalter@88.171.43.194)
[05:57:25] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[06:05:09] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[06:05:43] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[06:06:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[06:06:56] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:07:40] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[06:07:41] *** Joins: wyclif (~wyclif@user/wyclif)
[06:08:22] *** Quits: samathy (~samathy@user/samathy) (Ping timeout: 245 seconds)
[06:08:48] *** Joins: samathy (~samathy@user/samathy)
[06:09:52] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 252 seconds)
[06:10:44] *** Quits: Pandadub (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Read error: Connection reset by peer)
[06:11:43] *** Joins: ogis_ (~Android@p311253-omed01.osaka.ocn.ne.jp)
[06:12:53] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[06:14:45] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[06:15:38] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[06:15:48] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Ping timeout: 258 seconds)
[06:15:52] *** Quits: kmh (~kmh@p200300df5f23b40081a23bc675bbdb8a.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:21:19] <mawk> SnoopJ come back it's over
[06:21:22] <mawk> I miss you
[06:22:10] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[06:22:34] *** Quits: lalilulelo (~lalilulel@2804:14d:7680:8ed4:2d57:66ab:41ef:4d0a) (Quit: Leaving)
[06:22:43] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[06:24:43] *** Quits: y1n (~y1n@84-115-65-100.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[06:24:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:26:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[06:26:37] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[06:27:10] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[06:31:19] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Ping timeout: 252 seconds)
[06:32:27] *** Quits: ogis_ (~Android@p311253-omed01.osaka.ocn.ne.jp) (Read error: Connection reset by peer)
[06:32:58] *** Quits: Gudddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[06:33:08] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[06:35:31] *** Quits: launchd (examknow@bitbot/launchd) (Excess Flood)
[06:35:47] *** Joins: launchd (examknow@bitbot/launchd)
[06:35:52] *** Joins: r3m (~launch@user/r3m)
[06:35:58] *** Joins: brabrax (~brabrax@user/brabrax)
[06:36:09] *** Joins: califax (~califax@user/califx)
[06:37:11] *** Joins: y1n (~y1n@84-115-65-100.wifi.dynamic.surfer.at)
[06:37:47] *** Joins: Linux77 (~kvirc@237-182-233-186.raimax.com.br)
[06:38:37] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[06:38:45] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:38:54] *** Quits: r3m (~launch@user/r3m) (Client Quit)
[06:39:09] *** Joins: r3m (~launch@user/r3m)
[06:39:34] *** Joins: Tips|Cloud (sid62231@id-62231.charlton.irccloud.com)
[06:39:55] *** Joins: matsaman (~matsaman@user/matsaman)
[06:40:48] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[06:41:20] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[06:42:59] *** Joins: derelict (~derelict@user/derelict)
[06:46:14] *** Parts: onelegend (onelegend@wireguard/tunneler/onelegend) (WeeChat 2.8)
[06:47:35] *** Joins: annomy (~annomy@103.167.232.4)
[06:49:02] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[06:51:25] *** FinnElija is now known as Guest603
[06:51:25] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:51:25] *** Quits: Guest603 (~finn_elij@user/finn-elija/x-0085643) (Killed (silver.libera.chat (Nickname regained by services)))
[06:51:25] *** finn_elija is now known as FinnElija
[06:51:40] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[06:53:12] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[06:55:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[06:55:31] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[06:55:40] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[06:56:43] <SnoopJ> huh, selectors seem pretty neat, was just having a look at the select module's echo server example
[06:56:50] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Client Quit)
[06:57:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[06:59:42] *** Joins: jboada (~jboada@186-91-18-133.genericrev.cantv.net)
[07:01:25] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 258 seconds)
[07:02:34] *** Parts: annomy (~annomy@103.167.232.4) (WeeChat 3.2)
[07:03:55] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[07:04:21] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[07:05:13] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 248 seconds)
[07:06:17] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[07:06:36] *** Quits: sri19 (uid477846@id-477846.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[07:07:24] *** Joins: jboada25 (~jboada@186-91-18-133.genericrev.cantv.net)
[07:07:42] *** strungout is now known as suffer
[07:08:06] *** Quits: jboada25 (~jboada@186-91-18-133.genericrev.cantv.net) (Client Quit)
[07:08:24] *** Joins: jboada73 (~jboada@186-91-18-133.genericrev.cantv.net)
[07:08:24] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[07:09:13] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[07:09:38] *** Quits: jboada73 (~jboada@186-91-18-133.genericrev.cantv.net) (Client Quit)
[07:09:47] <whatsupdoc> Anyone know how the for...else works in python?
[07:10:38] <whatsupdoc> http://psung.blogspot.com/2007/12/for-else-in-python.html
[07:10:43] <ssbr> whatsupdoc: `else` fires if the loop exits normally (not because of `break`)
[07:10:49] *** Quits: jboada (~jboada@186-91-18-133.genericrev.cantv.net) (Ping timeout: 246 seconds)
[07:11:29] <ssbr> well, the blog post says that much.
[07:11:42] <ssbr> whatsupdoc: do you have a more targeted question?
[07:11:50] <whatsupdoc> is it good code or best to avoid?
[07:12:53] <ssbr> whatsupdoc: that's a matter of opinion. I happen to like it a lot and think more languages should evolve the feature. (It'd fit *extremely* well in Rust, for example.)
[07:13:00] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:13:07] *** Quits: Nivlac (~gabriel@181.223.203.212) (Quit: leaving)
[07:13:46] <ssbr> (in Rust, an infinite loop can break with a value, but for loops cannot, because there's no value to specify for if you don't use `break` -- that's *exactly* what `else` would let you do! Elegance!)
[07:13:54] <SnoopJ> whatsupdoc, it can be useful if you want to keep track of how you exit a for loop, but it's got a high surprise factor to it, I think.
[07:14:27] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Ping timeout: 258 seconds)
[07:15:09] *** Joins: jboada (~jboada@186-91-18-133.genericrev.cantv.net)
[07:15:10] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:16:10] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:17:10] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[07:17:35] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[07:19:14] *** Joins: Kvothe (~weechat@user/elodin)
[07:21:36] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:23:01] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[07:23:41] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[07:24:10] *** Quits: y1n (~y1n@84-115-65-100.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[07:24:12] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Ping timeout: 245 seconds)
[07:27:33] *** Joins: diamondbond (~diamondbo@175.157.205.144)
[07:28:43] *** Quits: diamondbond (~diamondbo@175.157.205.144) (Read error: Connection reset by peer)
[07:30:11] *** Joins: Voxel (~Voxel@ip178-67-155-188.onego.ru)
[07:35:43] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[07:36:33] *** Quits: waveform (~quassel@waveform.plus.com) (Remote host closed the connection)
[07:36:40] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[07:37:02] *** Quits: cheater (~Username@user/cheater) (Remote host closed the connection)
[07:37:32] *** Joins: y1n (~y1n@84-115-65-74.wifi.dynamic.surfer.at)
[07:40:11] *** Joins: cheater (~Username@user/cheater)
[07:40:14] *** Joins: djapo (~archangel@user/djapo)
[07:43:37] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[07:44:13] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:45:12] *** Quits: venuex (~venue@user/venue) (Quit: was tired)
[07:48:29] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:48:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:49:19] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[07:54:02] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[07:54:37] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:58:09] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[08:01:09] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[08:01:21] <newbs> I Hello. How do i Send commands to a program i open in Terminal with python. I tried Subsystem.call and print but still not about to input commands into someone eles program.
[08:01:41] <cloudbender> Aside from tKinter on windows, is there another gui framwork which would not require the .net lins ?
[08:01:48] <cloudbender> ... .net libs
[08:02:10] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[08:03:08] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[08:04:09] *** Quits: hyper_dave (~hyper_dav@197.156.103.172) (Read error: Connection reset by peer)
[08:05:51] *** Joins: diamondbond (~diamondbo@175.157.205.144)
[08:05:51] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[08:06:27] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:06:44] *** Joins: c10l (~c10l@89.34.167.207)
[08:06:56] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[08:07:53] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[08:10:58] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:14:00] <cloudbender> crickets
[08:14:31] *** Joins: fdan (~fdan@192.146.154.3)
[08:15:20] <fdan> a basic question. how can i make this as a dictionary https://dpaste.org/LZVw
[08:15:52] *** Joins: cth (~Cthulchu@213.174.21.101)
[08:16:07] <BrenBarn> cloudbender: well, there's Qt
[08:16:36] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: Ping timeout (120 seconds))
[08:16:56] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[08:18:03] *** Quits: thurs8 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[08:18:36] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[08:19:09] <cloudbender> @fdan I'm not sure, I don't know enough about the newer operators on arrays
[08:19:22] <cloudbender> and dicts, and sets, and lists
[08:20:22] <cloudbender> @brenbarn will look at qt
[08:20:46] <AhmedAmerican> is there a shorter way than the following one --> https://bpa.st/6MBA
[08:21:24] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[08:22:10] *** Joins: hyper_dave (~hyper_dav@197.156.103.172)
[08:23:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[08:24:04] *** Quits: diamondbond (~diamondbo@175.157.205.144) (Ping timeout: 252 seconds)
[08:24:32] *** Joins: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net)
[08:24:58] *** Quits: y1n (~y1n@84-115-65-74.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[08:25:00] <mefistofeles> fdan: this is a bad idea, but something like {key: value for key,value in [element.split() for element in a.split("\n")][:-1]}
[08:25:20] <mefistofeles> fdan: it is better if you unroll it, that is, don't make it a comprehension
[08:26:28] *** Quits: bninja (~bloodninj@user/bloodninja) (Remote host closed the connection)
[08:26:52] *** Joins: bninja (~bloodninj@user/bloodninja)
[08:27:07] <fdan> mefistofeles any other ways?
[08:28:26] <mefistofeles> fdan: sure, you probably can achieve the same in different ways
[08:28:41] * mefistofeles ignores python zen :P
[08:28:42] <InPhase> fdan: I did the same, but with a.strip().split('\n') instead of [:-1].  That's the compact way.  But, your data is not a dictionary, so you've probably misunderstood what you're looking for.
[08:29:07] <InPhase> fdan: You have 0 corresponding to 2 values, and 1 corresponding to 2 values, which dictionaries cannot do.
[08:29:16] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 268 seconds)
[08:29:45] <mefistofeles> yeah, this looks like a xyproblem
[08:30:11] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[08:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[08:30:31] <cloudbender> Is this for some type of vector math ?
[08:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:40] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[08:36:42] <newdimension> Can I activate a poetry venv from outside the project folder?
[08:37:29] *** Joins: y1n (~y1n@84-115-64-53.wifi.dynamic.surfer.at)
[08:38:44] <matsaman> try it
[08:39:43] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[08:39:50] <newdimension> matsaman: I create a new project to install jupyter-lab in a new environment. But then I realized that I don't really need a project folder since jupyter saves everything in other folders. So I deleted the project folder and can't figure out how to activate the venv now
[08:39:52] <newdimension> *I created
[08:42:00] *** Quits: Network2501 (~beard@122-199-54-62.ip4.superloop.com) (Read error: Connection reset by peer)
[08:44:01] *** Quits: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net) (Quit: Leaving)
[08:44:26] *** Joins: zmt01 (~zmt00@user/zmt00)
[08:45:12] *** Joins: cth (~Cthulchu@213.174.21.101)
[08:45:22] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[08:47:07] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[08:47:22] *** Quits: t2mkn (~t2mkn@user/t2mkn) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:47:40] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[08:48:38] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:48:42] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 272 seconds)
[08:48:49] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[08:49:28] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[08:49:38] <rama> is it ok to reuse trailing _ in this case? https://bpa.st/2LSQ or is there a better naming convention to follow in this case?
[08:52:26] *** Joins: mattil (~mattil@87-92-63-124.bb.dnainternet.fi)
[08:53:17] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[08:53:29] *** Quits: t2mkn (~t2mkn@user/t2mkn) (Client Quit)
[08:54:07] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[08:56:28] *** Joins: ByteHackr (~sanroy@43.252.250.113)
[08:58:05] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[08:59:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[08:59:40] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 240 seconds)
[09:00:35] *** Joins: wyclif (~wyclif@user/wyclif)
[09:01:07] <Voxel> rama, do you write the code for yourself or other developers, too?
[09:01:16] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[09:01:27] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[09:01:38] <rama> Voxel: both, in this case its external facing.
[09:01:41] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[09:02:17] <rama> I opted to rename `suffix_` to s.
[09:02:28] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[09:04:23] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[09:04:37] <Voxel> I'm sorry to hear that.
[09:05:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[09:06:19] *** Joins: wyclif (~wyclif@user/wyclif)
[09:07:10] *** Quits: newbs (~androirc@2600:380:7e48:247c:60a6:5315:4eaa:42cd) (Ping timeout: 240 seconds)
[09:07:13] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[09:07:14] <fdan> InPhase that doesnt work. it doesnt add to the dictionary
[09:07:32] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:09:45] <fdan> i know dictionaries hold unique value
[09:10:36] <fdan> but i am not able to add to the dictionary yet
[09:11:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[09:11:46] *** Joins: wyclif (~wyclif@user/wyclif)
[09:12:11] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[09:12:21] <jinsun> fdan: how do you want to handle multiple values for same key? put them in a list?
[09:12:53] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[09:13:12] <fdan> jinsun if it holds multiple values for same key, the last value of the key should be added in the dictionary
[09:13:40] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 240 seconds)
[09:14:38] <jinsun> oh then the earlier provided solutions should work
[09:15:30] <fdan> if at all the first value of the key should be added
[09:15:34] <fdan> what is the change i must make
[09:16:23] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:16:45] <jinsun> if you want the first value, I don't think you can do in a one-liner
[09:16:50] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:17:02] <fdan> yes thats fine
[09:17:46] <jinsun> make an empty dict, then loop over the elements and check if the key is already in the dict, if not then add it
[09:17:56] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[09:18:24] *** Joins: mickey (~user@user/mickey)
[09:18:38] <cloudbender> Maybe a list of discrete key-value dicts is what you need
[09:18:45] <jaggz> ugh.  something in vim is unindenting my else: here https://i.imgur.com/ieg5cM7.png
[09:18:48] <cloudbender> or a good old 2d array
[09:19:26] <cloudbender> wait ... do arrays live on the stack ?
[09:19:28] <jaggz> right when I type a : on the end, it shifts it to the left (where it's seen in the pic, although I typed a space too)
[09:19:57] <jinsun> fdan: something like this (just not in one line, put a newline after the for and if) `output = {}; for key,value in [element.split() for element in a.stript().split("\n")]: if key not in output: output[key] = value`
[09:22:02] <jaggz> i'm guessing it doesn't handle one-line if's (the elif: foo); it just blindly unindents else: when it sees it (and other stuff maybe)
[09:22:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[09:23:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:24:34] *** Quits: y1n (~y1n@84-115-64-53.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[09:24:52] <fdan> thanks jinsun
[09:25:04] <fdan> may i know what this does https://dpaste.org/ZJuf#L2
[09:27:37] *** Joins: Thanatos (~Thanatos@197.210.55.83)
[09:28:17] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[09:28:27] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[09:29:55] <A_Dragon> Is there a way I can use constants as Literals? ie I have `SOME_CONSTANT = 'thing'` defined in file a, I want to use it as a `Literal['thing']` in file_b for an overload
[09:30:03] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:06] *** Quits: emerent (~quassel@p200300cd57058cd4ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[09:31:51] *** Joins: emerent (~quassel@p200300cd57058cd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:35:02] *** Joins: dvx (~dvx@185.63.97.64)
[09:36:27] *** Joins: manin (~x@185.242.190.95)
[09:36:40] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[09:36:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[09:37:41] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:38:00] *** Joins: pycurious (~Adium@user/pycurious)
[09:38:12] *** Joins: y1n (~y1n@84-115-64-53.wifi.dynamic.surfer.at)
[09:40:49] *** Quits: mattil (~mattil@87-92-63-124.bb.dnainternet.fi) (Quit: Leaving)
[09:42:10] *** Quits: cth (~Cthulchu@213.174.21.101) (Ping timeout: 252 seconds)
[09:43:09] *** Joins: HurricaneHarry_ (~quassel@84-85-122-182.fixed.kpn.net)
[09:43:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:43:43] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:44:00] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:44:36] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:d01a:d45:2c8a:8f26)
[09:44:46] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[09:44:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[09:45:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:45:22] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:45:27] *** Quits: nergar (~Nergar@177.225.152.13) (Quit: Leaving)
[09:45:29] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-10d0-99bd-fa0a-4fc9.fixed6.kpn.net) (Ping timeout: 258 seconds)
[09:45:48] *** HurricaneHarry_ is now known as hurricaneharry
[09:48:08] *** Joins: dibic (~sanil@2601:249:8080:58a0:4c89:2991:92d2:6427)
[09:48:23] <jaggz> how do I wrap text, handling non-space-taking terminal sequences (like color codes)?   https://docs.python.org/3/library/textwrap.html
[09:48:30] *** Quits: dibic (~sanil@2601:249:8080:58a0:4c89:2991:92d2:6427) (Quit: Konversation terminated!)
[09:48:39] <jaggz> that doesn't make any mention of term sequences
[09:49:10] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 240 seconds)
[09:49:21] *** Joins: dibic (~sanil@2601:249:8080:58a0:4c89:2991:92d2:6427)
[09:49:44] *** Joins: ubert (~Thunderbi@178.115.48.151.wireless.dyn.drei.com)
[09:49:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[09:51:40] *** Quits: Thanatos (~Thanatos@197.210.55.83) (Ping timeout: 240 seconds)
[09:52:21] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[09:55:55] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 252 seconds)
[09:56:04] <jaggz> https://pypi.org/project/ansiwrap/
[09:57:12] *** Joins: newbs (~androirc@2600:380:7e4b:710b:9c66:3895:ae2e:445b)
[09:58:23] *** Joins: pycurious (~Adium@user/pycurious)
[09:59:18] *** Quits: Mechanismus (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[09:59:35] *** Quits: hurricaneharry (~quassel@84-85-122-182.fixed.kpn.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:59:38] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[10:01:34] *** Joins: HurricaneHarry (~quassel@84-85-122-182.fixed.kpn.net)
[10:05:55] <cloudbender> other than html, htm, and css, what other file types would I gather as assets in the category of 'web assets'
[10:06:09] <cloudbender> images, movies, and scripts are separate
[10:06:14] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7)
[10:06:45] <cloudbender> oh, .ico,
[10:07:32] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 245 seconds)
[10:08:30] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[10:10:42] *** Joins: palasso (~palasso@user/palasso)
[10:11:22] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Ping timeout: 245 seconds)
[10:11:57] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[10:12:07] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 245 seconds)
[10:12:14] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[10:12:34] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[10:13:42] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:13:48] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[10:15:19] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[10:16:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:18:52] *** Joins: Obo (~roberto@78.77.166.185)
[10:19:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:21:40] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[10:21:48] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:c9f1:2820:6c:cce0)
[10:22:04] *** Joins: venue (~venue@user/venue)
[10:23:23] *** Quits: venue (~venue@user/venue) (Client Quit)
[10:23:58] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[10:23:59] *** Joins: manti7 (~manti7@176.10.104.94)
[10:24:36] *** Quits: y1n (~y1n@84-115-64-53.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[10:26:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[10:27:16] *** Quits: Obo (~roberto@78.77.166.185) (Ping timeout: 252 seconds)
[10:27:57] *** Joins: upsala (~zcb@185.213.155.160)
[10:29:40] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[10:31:41] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: Ping timeout (120 seconds))
[10:31:58] *** Joins: dulanic (~dulanic@47.187.144.163)
[10:32:40] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[10:38:37] <jmcantrell> would ValueError be an appropriate error for a missing section in a config file?
[10:38:58] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[10:39:03] *** Joins: ihristov (~ihristov@217.145.94.71)
[10:39:25] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:40:03] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[10:40:18] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[10:41:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:44:18] *** Joins: noctavian_ (~noctavian@gateway/tor-sasl/noctavian)
[10:45:04] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:45:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[10:45:59] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[10:46:20] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:54] *** Joins: seednode (~seednode@user/seednode)
[10:48:06] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[10:52:45] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:52:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[10:53:06] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:53:20] *** Joins: wyclif (~wyclif@user/wyclif)
[10:53:35] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[10:58:40] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:112f:5e27:48fb:e80) (Ping timeout: 240 seconds)
[10:59:38] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[11:05:31] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:08:21] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[11:09:40] *** Quits: newbs (~androirc@2600:380:7e4b:710b:9c66:3895:ae2e:445b) (Ping timeout: 240 seconds)
[11:11:46] *** Joins: gusto (~Augustus@2620:149:e0:6003::72)
[11:12:42] *** Quits: knipster5 (~knipster@user/knipster) (Ping timeout: 268 seconds)
[11:13:30] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[11:15:27] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 245 seconds)
[11:20:13] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[11:22:20] *** Joins: knipster5 (~knipster@user/knipster)
[11:22:26] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Quit: Leaving...)
[11:24:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[11:28:47] *** Joins: kosh (~kosh@user/kosh)
[11:31:03] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[11:31:43] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[11:32:35] <AhmedAmerican> https://bpa.st/EGLA how to solve such case?
[11:34:54] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 256 seconds)
[11:35:02] *** Joins: Thanatos (~Thanatos@197.210.54.9)
[11:35:35] <supakeen> There doesn't seem to be anything to solve.
[11:35:59] *** Quits: Thanatos (~Thanatos@197.210.54.9) (Read error: Connection reset by peer)
[11:36:07] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[11:36:10] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:36b1:82a4:cb60:df91) (Ping timeout: 240 seconds)
[11:36:35] *** Joins: Thanatos (~Thanatos@197.210.55.198)
[11:36:42] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:36:53] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:38:08] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[11:38:17] <AhmedAmerican> supakeen: i included the file content after writing to it which show unicode
[11:38:22] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 245 seconds)
[11:38:29] <Repiphany> If you want unicode to be preserved, json.dump(..., ensure_ascii = True)
[11:38:32] <supakeen> Yes, that is pretty normal in json.
[11:38:36] <Repiphany> Er, False
[11:39:00] <supakeen> You can do what Repiphany said; but seeing those escapes to make sure json is ascii is common.
[11:39:07] *** Joins: rendar (~rendar@user/rendar)
[11:39:43] <AhmedAmerican> supakeen: Now it's fixed using `ensure_ascii=False`
[11:41:21] *** Joins: Vonter (~Vonter@user/vonter)
[11:41:31] *** Joins: sharperguy (~sharpergu@2001:16b8:5cb9:7100:fd25:3463:bca1:1493)
[11:49:17] *** Quits: ckdCreations (~ckdCreati@147.55.130.34) (Read error: Connection reset by peer)
[11:49:31] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[11:54:01] *** Quits: GeorgeK (~GeorgeK@cpe-70-92-5-228.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[11:54:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:56:20] *** Joins: wyclif (~wyclif@user/wyclif)
[11:57:56] *** Joins: slav0nic (slav0nic@python.su)
[11:58:49] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:00:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:01:05] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[12:01:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[12:02:34] *** Joins: wyclif (~wyclif@user/wyclif)
[12:03:20] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[12:03:32] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:a497:ef4b:b3f:c965)
[12:03:52] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 258 seconds)
[12:06:18] *** Joins: zaquest (~notzaques@5.128.210.178)
[12:06:53] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[12:07:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:08:07] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[12:08:10] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[12:09:23] <thm> is there a suggestion for a library to parse date ranges in a human friendly way? timefhuman knows ranges, but is limited to MM/DD/YY format, dateparser supports localization, but not ranges. any other?
[12:09:23] *** Joins: wyclif (~wyclif@user/wyclif)
[12:10:39] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[12:11:24] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:11:29] <aphysically> whoa I can slurp the text of a file with one line using pathlib
[12:11:33] <aphysically> what have I been doing all my life in bash
[12:11:40] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[12:13:47] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[12:14:03] *** Joins: Naan (~Naan@user/naan)
[12:14:48] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[12:15:16] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Client Quit)
[12:19:21] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Ping timeout: 248 seconds)
[12:20:08] <The-Compiler> thm: how does a range look? If a range is two dates with a fixed separator, could you split on that and parse the two dates?
[12:21:28] <thm> The-Compiler: no, it should also cope with stuff like "next week"
[12:21:41] *** Joins: Vonter (~Vonter@user/vonter)
[12:22:08] <The-Compiler> thm: "next week" as a range (the entire week), or as the start/end of one? I'm assuming the former? Not aware of anything then...
[12:22:24] <supakeen> 'bi-weekly'
[12:22:40] *** Quits: Thanatos (~Thanatos@197.210.55.198) (Ping timeout: 240 seconds)
[12:23:09] <thm> the former, yes
[12:23:32] <thm> perhaps something like this, but in python: https://github.com/zoho/hawking
[12:24:01] <xcombelle> aphysically: you mean something like that:
[12:24:06] <xcombelle> >>> with open('workfile') as f:
[12:24:07] <xcombelle> ...     read_data = f.read()
[12:24:36] <aphysically> no, with pathlib if you want to just slurp all the text it's even easier, just path.read_text()
[12:24:44] <aphysically> it opens and closes the file for you, don't even need a context manager
[12:25:34] <jmcantrell> aphysically: in bash, it's `content=$(<file)`. just sayin...
[12:26:14] <aphysically> yeah I read it like this in bash         loudjson=$(<"$normfile")
[12:26:37] *** Joins: shad (~shad@user/shad)
[12:26:40] <The-Compiler> thm: hmm, none of the numerous Python date/time libraries seem to handle that
[12:26:47] *** Joins: Thanatos (~Thanatos@197.210.79.75)
[12:27:38] *** Quits: Thanatos (~Thanatos@197.210.79.75) (Read error: Connection reset by peer)
[12:27:49] <jeho> I keep reading about an O(n) suffix array producing algorithm, but can't find a good example online. Anyone know a good easy to digest example?
[12:27:50] <xcombelle> if it is a dirty thing you can read_data=open('workfile').read() and the file will be closed by reference counting aphysically
[12:28:14] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:28:17] *** Joins: Thanatos (~Thanatos@197.210.84.152)
[12:28:49] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:29:02] <The-Compiler> xcombelle: well, yes, but why not do   pathlib.Path('workfile').read_text()   which is almost as short and ensures the file is closed properly (and immediately)
[12:29:08] *** Quits: Thanatos (~Thanatos@197.210.84.152) (Remote host closed the connection)
[12:29:22] <The-Compiler> (or even shorter, if your path is stored as Path instead of a string in the first place)
[12:29:24] *** Quits: PyT001 (~PyT001@2402:e280:3d22:227:a497:ef4b:b3f:c965) (Quit: Client closed)
[12:29:48] <aphysically> (it is, in fact, already a Path)
[12:31:10] <xcombelle> The-Compiler: it is also immediatly with refcountiung
[12:31:59] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[12:32:25] <jmcantrell> I'm trying to figure out how to handle differences in file locations while developing vs when it's deployed. I've got a config file in `/path/to/project/etc/name/config.json`, but when it's deployed, it'll be `/etc/name/config.json` or `/usr/local/etc/name/config.json`. Anyone know how to handle this the right way?
[12:33:35] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:34:26] <jmcantrell> If it were a shell script, I'd just use sed and s/$PWD/$PREFIX/g when building for packaging.
[12:35:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:09] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[12:42:45] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 244 seconds)
[12:42:50] *** Joins: waveform (~quassel@waveform.plus.com)
[12:45:40] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[12:46:30] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:8208:62c2:1345:18fb)
[12:46:51] *** Joins: gry (~quassel@botters/gry)
[12:49:10] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Ping timeout: 240 seconds)
[12:50:06] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[12:56:45] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[12:57:21] *** Joins: pycurious (~Adium@user/pycurious)
[12:59:10] *** Quits: acresearch (~acresearc@user/acresearch) (Ping timeout: 240 seconds)
[13:00:11] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[13:00:13] *** Joins: acresearch (~acresearc@user/acresearch)
[13:01:09] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[13:01:39] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[13:01:49] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:01:55] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:02:32] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Quit: Bridge terminating on SIGTERM)
[13:02:32] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[13:02:33] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: jwon (~jwon@user/jwon) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (Quit: Bridge terminating on SIGTERM)
[13:02:36] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[13:02:36] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Quit: Bridge terminating on SIGTERM)
[13:02:36] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Quit: Bridge terminating on SIGTERM)
[13:02:36] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: aifa[m] (~aifamatri@2001:470:69fc:105::d06e) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: cotsuka (~cotsuka@user/cotsuka) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: allegary (~allegary@apache/committer/gjm) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Quit: Bridge terminating on SIGTERM)
[13:05:05] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-c0b1-7a9b-d75d-e24d.res6.spectrum.com)
[13:05:30] *** Joins: Juhaz (juhaz@hilla.kapsi.fi)
[13:05:35] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[13:06:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 248 seconds)
[13:06:57] *** Joins: plastico (~plastico@neomutt/plastico)
[13:08:06] *** Joins: davor (~davor@user/davor)
[13:08:20] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[13:09:12] *** Joins: jiffe (~jiffe@mail.nsab.us)
[13:09:27] <davor> hello, I need some help with pandas. Datacamp tells me to provide a `how=` paramater to the dataframe `resample()` method, but I can't find any documentation on this in official pandas docs, even though there is mention of it outside datacamp (like stackoverflow and such): https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html
[13:09:28] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[13:09:28] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[13:09:42] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[13:09:42] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[13:09:42] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[13:09:42] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[13:09:56] *** Joins: jwon (~jwon@user/jwon)
[13:09:57] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[13:09:57] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[13:09:57] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[13:10:11] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[13:10:12] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[13:10:12] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[13:10:12] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[13:10:26] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[13:10:28] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[13:10:28] *** Joins: psydroid (~psydroid@user/psydroid)
[13:10:28] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[13:10:28] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[13:10:28] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[13:10:28] *** Joins: allegary (~allegary@apache/committer/gjm)
[13:10:28] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[13:10:29] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[13:10:29] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[13:10:36] *** Quits: r3m (~launch@user/r3m) (Remote host closed the connection)
[13:11:01] <davor> it seems to have been there in pandas 0.17 and was removed sometime later, but how do I find when it was removed, and what it was replaced with?
[13:12:33] *** Quits: sandb0y (pirate@user/sandb0y) (Quit: I'm going phishing)
[13:12:43] *** Joins: r3m (~launch@user/r3m)
[13:16:25] *** Quits: jboada (~jboada@186-91-18-133.genericrev.cantv.net) (Quit: Client closed)
[13:17:32] <jinsun> davor: what was supposed to be passed the how= parameter in the examples you saw?
[13:21:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:21:14] *** Joins: gtristan (~tristan@223.38.23.3)
[13:21:41] <davor> jinsun: "last"
[13:22:17] <davor> jinsun: ah, found this https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.last.html thank you!
[13:22:47] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:23:17] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[13:23:31] <The-Compiler> jmcantrell: There's not really a "build-time". Often projects check multiple paths and use whatever exists.
[13:24:08] <jinsun> davor: okay now it has to be passed to the rule= parameter probably
[13:25:23] <jmcantrell> The-Compiler: by build time, i meant at the time an operating system package is created
[13:25:46] <davor> jinsun: seems the how= syntax, ie df.resample("1H", how="last") was replaced with adding a method at the end to get a df from a DatetimeIndexResampler object, ie df.resample("1H").last() or df.resample("1H").mean() or such
[13:26:14] *** Joins: besnn (~besnn@user/besnn)
[13:26:24] <jmcantrell> it sounds like i should check os.geteuid() and change where it looks for configs based on that
[13:26:40] <jinsun> davor: ah okay, cool
[13:26:53] <davor> although I don't really understand how the .last() method works when it follows resample(). okay, for example, mean() resamples based on the mean of each time period. but what does last() do?
[13:27:14] <The-Compiler> jinsun: but typically those are well-known locations, not different based on packaging anyways
[13:27:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[13:27:34] <The-Compiler> jinsun: huh, how does os.geteuid() come into play?
[13:27:39] <jinsun> The-Compiler: you mean jmcantrell
[13:27:47] <The-Compiler> err, yes I do, sorry :)
[13:28:27] <davor> I always thought, if I do resample("1H") followed by mean(), that it just splits the data into 1 hour segments and turns each segment into one data point by calculating the mean of all points of that segment/hour period
[13:28:42] *** Joins: RougeR (~rougex250@user/rouger)
[13:28:44] *** Quits: RougeR (~rougex250@user/rouger) (Remote host closed the connection)
[13:29:00] <davor> so does last() then just take the last data point in each hourly segment and use that, truncating all other values?
[13:29:16] <jmcantrell> The-Compiler: it's going to be run as root (has to be, in fact), so i thought that might be a good way to determine if it's running in the installation environment vs dev
[13:30:03] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Read error: Connection reset by peer)
[13:30:09] <habnabit_> jmcantrell, it's pretty rare that something 'needs to' be run as root; more granular permissions are nearly always possible
[13:30:20] <jmcantrell> actually, i don't think i'd use "good". maybe "the only way i can think of right now"
[13:30:38] <The-Compiler> jmcantrell: how would you determine whether to use /etc/name/config.json or /usr/local/etc/name/config.json?
[13:30:54] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[13:30:54] <jmcantrell> habnabit_: well, this must. it's taking btrfs filesystem snapshots, which can only be run as root
[13:31:19] *** Joins: pycurious (~Adium@user/pycurious)
[13:31:21] <The-Compiler> jmcantrell: I assume you'd also run it as root from time to time during development, no?
[13:31:25] <habnabit_> jmcantrell, it imports a library that does btrfs things? or it runs them as subprocess
[13:31:29] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:31:56] <habnabit_> jmcantrell, anyway the 'usual' solution is what The-Compiler alredy said: take config from multiple paths and prefer one location over another
[13:32:03] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[13:32:05] <habnabit_> jmcantrell, no need to muck with euid
[13:32:06] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:32:07] <jmcantrell> The-Compiler: that's what i'm asking. if i've packaged it for an os, it'll be /etc, but if it's installed from a git clone or something, it'll probably be /usr/local/etc
[13:32:27] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[13:32:28] <jmcantrell> The-Compiler: no, i use a fake btrfs command to simulate that part
[13:33:24] <habnabit_> jmcantrell, so you are running btrfs things as commands? it's increasingly common to run _those parts_ as root via one of the things that authenticates sudo or whatever
[13:33:32] <habnabit_> jmcantrell, no need for the whole process to be root
[13:35:16] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:40] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[13:36:21] <jmcantrell> habnabit_: it's going to be installed at the system level, initiated by a systemd timer. i'm not sure what kind of gymnastics would have to happen to make it run as nobody but allow just the necessary commands sudo access
[13:36:30] *** Joins: Perlence (~Perlence@188.114.14.153)
[13:36:49] <habnabit_> jmcantrell, pretty easy with a line or two in a sudoers.d file
[13:36:57] <habnabit_> jmcantrell, principle of least privilege etc
[13:37:05] *** Joins: mozgalom_ (~mozgalom@ipnet-gw.157.157.97.111.simnet.is)
[13:37:29] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Read error: Connection reset by peer)
[13:38:06] <habnabit_> jmcantrell, but certainly you'd have a dedicated user account for the service; 'nobody' is for processes that don't need to authenticate or read files
[13:38:36] <jmcantrell> what if sudo isn't installed? or doas is instead?
[13:38:52] <habnabit_> jmcantrell, never dealt with doas
[13:38:57] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[13:39:34] <jmcantrell> it's gaining popularity. apparently sudo has some security concerns
[13:39:43] <habnabit_> jmcantrell, well sure it is written in C
[13:40:05] <jmcantrell> i still need to solve how to tell if it's installed in /usr or /usr/local
[13:40:45] <habnabit_> jmcantrell, how do you install it?
[13:41:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 245 seconds)
[13:43:10] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:43:23] <jmcantrell> habnabit_: haven't determined that yet. it's going to be packaged for arch linux, but if it's installed from source, normally i'd /bin/install it, but i'm not sure the best way for a python module
[13:43:47] <jmcantrell> "normally" meaning for stuff like shell scripts
[13:45:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:45:40] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[13:45:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:45:59] *** Joins: darksun (~darksun@user/darksun)
[13:47:10] *** Quits: audiobirb (~audio@2603-8081-1801-3bb5-c203-3fab-d083-5cb4.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:47:15] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:47:57] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 245 seconds)
[13:48:57] *** Joins: pycurious (~Adium@user/pycurious)
[13:49:38] *** Quits: darksun (~darksun@user/darksun) (Client Quit)
[13:49:40] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[13:49:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[13:51:42] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[13:51:59] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[13:52:04] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[13:53:13] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 248 seconds)
[13:53:45] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 248 seconds)
[13:58:13] <lericson> pro tip of the day: numpy's np.isin function, tests if each element of an array _is_ _in_ some test set
[13:58:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[13:58:25] *** Joins: kmh_ (~kmh@p5dcc62e1.dip0.t-ipconnect.de)
[13:58:46] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[13:59:10] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[13:59:45] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[13:59:54] *** Joins: ice9 (~ice9@user/ice9)
[14:00:24] *** Joins: MrPink (~MrPink@marco.pinknet.de)
[14:00:40] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[14:00:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:01:21] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[14:01:54] *** Joins: wyclif (~wyclif@user/wyclif)
[14:01:57] <MrPink> Hi. What is the difference between the debian packages "python3-virtualenv" and "python3-venv"? Which should I use?
[14:02:11] *** Joins: Naan (~Naan@user/naan)
[14:03:56] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[14:04:47] *** Joins: Naan (~Naan@user/naan)
[14:05:07] <lericson> how flexible are the type variables of python?
[14:05:09] *** Joins: pycurious (~Adium@user/pycurious)
[14:05:36] <lericson> and how do you line-break type annotations in a good way?
[14:05:38] <lericson> so many questions
[14:06:26] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[14:06:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:07:13] *** Joins: emika3 (~emika@185.207.249.200)
[14:07:21] <shangxiao> MrPink: virtualenv is part of pypa, whereas venv is standard library, iirc
[14:07:40] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 240 seconds)
[14:07:43] <shangxiao> ah yep: venv: https://docs.python.org/3/library/venv.html
[14:07:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:07:59] <shangxiao> virtualenv: https://github.com/pypa/virtualenv
[14:08:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[14:08:02] <lericson> lol wait what, virtualenv is now in the stdlib?
[14:08:09] <shangxiao> venv is
[14:08:34] <lericson> cool
[14:08:41] *** Quits: emika (~emika@83.136.182.164) (Ping timeout: 248 seconds)
[14:08:41] *** emika3 is now known as emika
[14:08:41] *** Joins: califax (~califax@user/califx)
[14:09:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[14:09:24] <shangxiao> :)
[14:09:36] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Ping timeout: 258 seconds)
[14:09:58] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[14:10:31] <SeeM> MrPink: You may install both. Python3-venv gets You a pyvenv executable, and python3-virtualenv containd Python virtualenv module.
[14:10:31] *** Joins: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a)
[14:11:15] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:11:55] <SeeM> As usual, I'm too late. At least have a file listings for both packages: https://packages.debian.org/buster/all/python3-virtualenv/filelist and https://packages.debian.org/buster/amd64/python3-venv/filelist .
[14:11:55] *** Joins: georgios (~georgios@user/georgios)
[14:12:16] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:12:17] <lericson> why would one not want to use the bundled venv?
[14:12:24] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[14:12:55] *** Joins: wyclif (~wyclif@user/wyclif)
[14:13:30] <SeeM> I don't know. I never used alternatives, except for easy_install when it was relevant.
[14:14:02] <lericson> and if venv is in stdlib, why is there a debian package for it?
[14:14:13] <Repiphany> Debian is weird with what it includes in default python
[14:14:25] *** Joins: darksun (~darksun@user/darksun)
[14:15:19] <Repiphany> It's probably better to use something like pyenv to install different versions of python and create virtualenvs from them instead of messing around with system python
[14:15:29] *** Joins: Obo (~roberto@78.77.166.185)
[14:15:51] <SeeM> In Debian generally packets are split up, in case someone don't want every functionality.
[14:16:21] <lericson> that's a funny way to think about it
[14:16:38] <lericson> "my system may inadvertently remove things i use, so i better not use the system facilities to obtain software in case that happens"
[14:16:54] <lericson> i get the practicality of it but it seems backwards
[14:17:43] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 252 seconds)
[14:18:10] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[14:18:21] <jinsun> it is okay to use the system python when you are happy with the packages provided by the system (and the versions)
[14:18:22] <SeeM> It may seems backwards, because they're like that since 2003 (I think 3.0 was a first version I used).
[14:19:01] <jinsun> once you bring pip into the picture then it is better to not mix pip packages with the sytem ones
[14:19:37] <jinsun> and just use a separate python where pip controls all the packages
[14:19:45] <lericson> jinsun: i think at least on macOS, apple is saying you should install your own python no matter what if you use it
[14:19:59] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[14:20:10] <MrPink> shangxiao: Thanks for the info.
[14:21:54] <MrPink> SeeM: Yeah, the file lists differ, so I guess using venv is the way to go, if I'm a noob, because it's part of the stdlib?
[14:22:15] *** Joins: pycurious (~Adium@user/pycurious)
[14:23:09] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:23:16] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[14:23:26] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[14:23:31] *** Joins: ice9 (~ice9@user/ice9)
[14:24:18] <jinsun> lericson: probably because they know people will try to install pip packages and break it even more, also macOS comes with 2.x? built-in, so more reason to not use it
[14:24:33] *** Joins: legola (~legola@46.235.100.27)
[14:24:55] <lericson> jinsun: i think the reasons are multiple
[14:25:15] <lericson> the thing i run into is python uprgading breaking all my virtualenvs
[14:26:22] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[14:26:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:26:32] *** Joins: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de)
[14:27:02] <ksynwa> What is string formatting of this kind called? Trying to find it in the docs. `print('Hello %s' % 'world)`
[14:27:15] <jinsun> printf style formatting?
[14:27:23] <lericson> string interpolation used to be the name
[14:27:24] *** Joins: Adoi (~Adoi@user/adoi)
[14:27:51] <lericson> or %-formatting
[14:27:52] <jinsun> ksynwa: https://docs.python.org/3/library/stdtypes.html#old-string-formatting
[14:28:17] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[14:28:23] <ksynwa> Oh it's old. Is it preferable to use f-strings now?
[14:28:28] <jinsun> yes
[14:28:48] <lericson> it's so old it's been replaced twice in fact
[14:28:49] <Repiphany> fstrings or str.format
[14:29:03] <lericson> thrice if you count the template stuff
[14:29:10] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[14:29:18] <Adoi> hello, in this code: https://bpa.st/C6DA, there must be one whitespace before the first 'o' column, but I get two. I have been trying to correct the code by adding 'if' blocks, but cant make it work. could you help please?
[14:30:21] <lericson> It would be sweet if there was a Python development environment like Jupyter, but more extensible so you could add common operations to a toolbox or something.
[14:30:38] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[14:30:51] *** Joins: legola (~legola@46.235.100.27)
[14:32:35] *** Joins: cth (~Cthulchu@213.174.21.101)
[14:33:37] <Adoi> corrected: https://bpa.st/NMRQ
[14:33:43] <Adoi> this is part of a longer code
[14:34:34] <deniska> Adoi: well, there're two spaces in '  o'
[14:34:54] <Adoi> deniska yes, there must be one space before the first o
[14:35:09] <shangxiao> for the first j just make one space :D
[14:35:27] <Adoi> between | and o, I mean
[14:36:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:36:42] <Adoi> the former link was more correct, though
[14:36:48] <shangxiao> can't you do: `print(percentage + ' ' * e + ' o' + '  o' * c)`
[14:36:58] <shangxiao> or could c be 0?
[14:37:18] <shangxiao> sorry make that c-1 before
[14:38:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:39:49] <Adoi> shangxiao, yes, that's it!
[14:40:23] <shangxiao> ¯\_(ツ)_/¯
[14:40:37] *** Joins: ice99 (~ice9@user/ice9)
[14:40:40] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[14:41:37] <shangxiao> huh, til that 'a' * -1 == ''
[14:41:40] *** Quits: flyback (~flyback@2601:540:8201:1e60:811e:c168:2877:ba60) (Ping timeout: 240 seconds)
[14:41:42] *** Quits: MrPink (~MrPink@marco.pinknet.de) (Quit: WeeChat 3.2)
[14:42:54] *** Joins: ice9 (~ice9@user/ice9)
[14:43:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[14:44:00] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[14:44:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:39] <Adoi> shangxiao, sorry, I overlooked that the output still has an error then; https://bpa.st/LF5Q
[14:44:49] <Adoi> the upper three lines do not contain 'o
[14:45:10] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[14:45:26] *** Joins: ice9 (~ice9@user/ice9)
[14:45:38] <Adoi> sorry; https://bpa.st/LU3Q
[14:46:07] <Adoi> that is the dilemma I have been wrestling with :)
[14:46:10] *** Quits: gtristan (~tristan@223.38.23.3) (Ping timeout: 240 seconds)
[14:46:38] *** Joins: flyback (~flyback@2601:540:8201:1e60:811e:c168:2877:ba60)
[14:46:49] <shangxiao> use math.floor(0, c)
[14:47:21] *** Joins: ice99 (~ice9@user/ice9)
[14:47:28] <shangxiao> oh nope wrong function
[14:48:35] <shangxiao> make that `min(0, c)`
[14:48:48] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[14:49:11] <shangxiao> Adoi: `print(percentage + ' ' * e + ' o' * min(0, c) + '  o' * c - 1)`
[14:49:54] <shangxiao> Adoi: sorry that should be min(1, c)  - it's been a long day!
[14:50:10] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[14:50:39] <shangxiao> so if c is 0, we don't want a ' o' but if c > 0 we only want 1
[14:52:01] *** Joins: pycurious (~Adium@user/pycurious)
[14:52:09] <Adoi> shangxiao, thank you! I will view the output shortly!
[14:52:09] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Ping timeout: 258 seconds)
[14:53:44] *** Joins: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a)
[14:53:45] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:55:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:55:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:56:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[14:56:19] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[14:57:06] <aphysically> does python cache regexes used in a function definition or do I need to compile them globally
[14:57:16] *** Joins: jinsun (~quassel@user/jinsun)
[14:57:41] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[14:58:38] <deniska> aphysically: python caches some amount of previously used regexes
[14:58:49] <aphysically> ok it's probably fine then
[14:58:53] <deniska> aphysically: typically there's no need to use re.compile at all
[14:59:07] <KirkMcDonald> This many: https://github.com/python/cpython/blob/3.9/Lib/re.py#L288
[14:59:20] <Adoi> shangxiao, sorry to say that it didnt work; https://bpa.st/YN7A
[14:59:50] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[15:01:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:01:44] <shangxiao> Adoi: did you use my correction of min(1, c) ?
[15:01:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:02:19] <sunny93> Is python
[15:02:40] <KirkMcDonald> Yes, Python is extant.
[15:02:53] <sunny93> ..
[15:03:36] <sunny93> Does python '\u' notion only support 4 code points? A friend asked me why '\u1F43E' doesn't get https://unicode-table.com/en/1F43E/ the paw.
[15:04:07] <KirkMcDonald> sunny93: \u only supports four digits. \U supports eight.
[15:04:15] <supakeen> sunny93: \u = 4, \U = 8
[15:04:19] <sunny93> god
[15:04:34] <KirkMcDonald> So, '\U0001F43E'
[15:04:56] <sunny93> yes I missed the preceding 000
[15:04:58] <KirkMcDonald> Alternatively, '\N{PAW PRINTS}'
[15:05:22] <sunny93> .. you guys know everything
[15:05:50] <shangxiao> oh nice I didn't know you could use the name
[15:06:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:06:41] <sunny93> thank you
[15:06:46] <sunny93> love you all
[15:07:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:22] <aphysically> deniska: the places where I'm compiling I think it's okay because it split the regex to a different line
[15:07:33] <aphysically> and otherwise it made an unruly line
[15:08:15] *** Quits: ubert (~Thunderbi@178.115.48.151.wireless.dyn.drei.com) (Quit: ubert)
[15:08:25] *** Joins: diamondbond (~diamondbo@175.157.238.245)
[15:08:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[15:09:55] *** Joins: pycurious (~Adium@user/pycurious)
[15:10:34] *** Joins: jazzy (~jaziz@2600:380:4548:2564:9586:3cbe:697a:6fd1)
[15:11:24] <aphysically> I should look into loading up my vim with python static linters or something
[15:11:25] *** Joins: dez (uid92154@user/dez)
[15:12:06] <Adoi> shangxiao, sorry I overlooked your correction, now it is correct!! thank you very much! I will look deeper into it
[15:12:07] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Quit: Konversation terminated!)
[15:12:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[15:13:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:22] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[15:17:59] *** Quits: luersuve (uid512702@id-512702.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:18:06] <DnzAtWrk> wget --user and --pass
[15:18:10] <DnzAtWrk> how do I use them in a python script
[15:18:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:18:10] *** Quits: diamondbond (~diamondbo@175.157.238.245) (Ping timeout: 240 seconds)
[15:18:24] <DnzAtWrk> I need to download some files from a service which auth in that way
[15:18:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:19:13] <jean-luc> https://stackoverflow.com/questions/6999565/python-https-get-with-basic-authentication
[15:19:20] <jean-luc> that should do it
[15:19:40] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:19:49] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[15:20:22] <DnzAtWrk> I see
[15:20:23] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[15:20:31] <DnzAtWrk> --user is a shortcut for the authentication header
[15:21:25] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[15:21:32] <supakeen> Or for 'most' of the HTTP libraries (requests, httpx) it'd be `httpx.get(..., auth=("username", "password"))` (same goes for `requests`).
[15:21:46] <jean-luc> thats also in the stack overflow article
[15:21:49] <DnzAtWrk> which one is the easiest in python 3
[15:21:50] <jean-luc> see solutions 2 and 3
[15:21:52] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:22:01] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[15:22:05] <DnzAtWrk> basically just need to download get into file
[15:22:20] <DnzAtWrk> urllib I guess
[15:22:26] <supakeen> Yes but people tend to read only the first answer which in this case is verbose and just silly (and not easy).
[15:22:56] <DnzAtWrk> I do get it, but it looks really ugly
[15:23:17] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[15:23:18] <DnzAtWrk> next answeris fine
[15:23:21] <DnzAtWrk> answer is*
[15:23:22] <jean-luc> yep
[15:23:26] <jean-luc> it is
[15:23:26] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[15:23:32] *** Quits: rendar (~rendar@user/rendar) ()
[15:23:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:23:41] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[15:24:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:09] *** Quits: ice99 (~ice9@user/ice9) (Quit: Leaving)
[15:25:28] *** Joins: ice9 (~ice9@user/ice9)
[15:25:33] *** Joins: mickey (~user@user/mickey)
[15:25:36] <shangxiao> may i offer: `os.system("wget --user=user --pass=pass <url>")` xD
[15:25:40] *** Quits: noyb (~noyb@user/noyb) (Ping timeout: 240 seconds)
[15:25:51] <DnzAtWrk> naw, then you have to start considering things like delays
[15:25:51] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[15:26:12] <shangxiao> yeah i was being slightly facetious
[15:26:18] <jean-luc> yeah and make url a user input
[15:26:22] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:26:25] <jean-luc> so they can rm rf your /
[15:26:28] <jean-luc> :p
[15:26:46] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[15:27:47] <DnzAtWrk> god damnit google has become so very useless for programming help
[15:28:03] <DnzAtWrk> "requests download to file"
[15:28:11] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 258 seconds)
[15:28:24] <bookworm> if only you'd have official docs and the source of requests available ;P
[15:28:42] <DnzAtWrk> I could do that, or I could add stack overflow to the search
[15:28:46] <DnzAtWrk> and get the answer immidietely
[15:28:59] <DnzAtWrk> but stack overflow should be at top by default
[15:29:00] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[15:29:05] <DnzAtWrk> what is up with these crazy SEO sites
[15:29:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:29:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:30:15] <bookworm> stack overflow should definitely not be the top result no, but the actual docs
[15:30:19] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:30:30] <DnzAtWrk> not when I got an actual question
[15:30:35] <DnzAtWrk> and don't refer to a function
[15:30:35] <bookworm> SO is garbage 90%+ of the time, certainly in languages like python or js
[15:30:53] <DnzAtWrk> but it's gotten so bad
[15:31:00] <shangxiao> you get answers from 2008
[15:31:00] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:06] <DnzAtWrk> I mean, forget google for any kind of windows tech support
[15:31:10] <DnzAtWrk> absolutely useless
[15:31:16] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[15:31:37] *** Joins: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at)
[15:31:38] <DnzAtWrk> they used to be so good at fighting SEO
[15:32:11] <lericson> that ain't profitable
[15:32:25] *** Joins: Naan (~Naan@user/naan)
[15:35:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:35:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:36:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[15:39:18] <jinsun> nowadays my browser history works better than google  when I have to look up the docs
[15:40:25] <lericson> duckduckgo is good
[15:40:31] <lericson> mostly for the shortcuts
[15:40:41] <lericson> the actual search engine is not much
[15:40:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:41:23] <anorthall> jinsun: i feel that
[15:41:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:43:17] <jinsun> the first page of search results are just filled with stuff like w3schools and geeksforgeeks, and the actual docs are on the 2nd or 3rd page
[15:43:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:43:39] <jinsun> it used to be better 5 years ago
[15:45:38] <lericson> the internet used to be better in general
[15:45:56] *** Joins: frost (~frost@59.71.240.119)
[15:45:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:47:02] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:a497:ef4b:b3f:c965)
[15:47:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:47:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:11] <bionade24> How can I count the attributes of a Class without the internal attributes? So similar to dir() but without internals.
[15:48:26] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[15:48:41] <bjs> bionade24: use dir() and then filter out whatever you consider "internal"
[15:48:43] *** Joins: besnn (~besnn@user/besnn)
[15:49:04] <SeeM> jinsun: I noticed this, too. Those blogs have to very well optimised for search indexes.
[15:50:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[15:51:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[15:52:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[15:52:10] <bionade24> bjs: Mmhh yeah sucks but probably only solution. I mean help(class) does give me the data attributes sperately so there has to be something without relying that nothing changes in the module providing the class.
[15:52:19] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[15:52:31] <bjs> bionade24: what do you consider "internal"?
[15:52:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[15:52:43] <bjs> just things with underscores?  If so you can just get dir(), and remove anything that starts with an underscore
[15:52:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:53:14] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:53:20] *** Joins: c10l (~c10l@89.34.167.207)
[15:53:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[15:54:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:54:35] <bionade24> bjs: Everything with an underscore but also a bit more. And I wonder if looping through is a lot worse performance wise than set substraction anyway.
[15:54:43] <bjs> bionade24: "a bit more"?
[15:55:42] <bionade24> bjs: Every method/attribute inherited from genpy.message.Message class
[15:56:16] <bjs> bionade24: well that's going to be very hard to detect because that's not quite how Python works
[15:56:25] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 248 seconds)
[15:56:44] <bionade24> Lets see if I can do set(dir(class))) - set(dir(genpy.message.Message))
[15:56:50] <bionade24> Should be working
[15:57:23] <bjs> bionade24: the problem is the Message class might have a function that goes "self.foo = 42" or whatever
[15:57:37] <bjs> then, how can you tell that "foo" was 'inherited' from Message? there's really no way
[15:58:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:58:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:00:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 258 seconds)
[16:00:48] <bionade24> bjs: Bc I don't overwrite anything in this case, all data I want is defined in my custom class. genpy and also my class are some C stuff, not written in python and generated automatically by .msg files.
[16:00:55] *** Joins: lucifer (sid308373@brockwell.irccloud.com)
[16:01:37] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:02:33] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[16:03:07] <bionade24> Ok the subbing a comparable  class works fine.
[16:03:23] <hexnewbie> bionade24: {attr for attr in vars(cls).keys() if not attr.startswith('_')} # perhaps, giving the purpose of this count may reveal a better solution
[16:03:44] <bionade24> bjs: Thx for you help!
[16:04:13] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:04:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:05:12] <lucifer> hi all! i am having some trouble using mocks. I have read https://docs.python.org/3/library/unittest.mock.html#where-to-patch but am still unsure where the problem lies. https://www.irccloud.com/pastebin/Lgzs2IrZ/
[16:05:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:05:30] <bionade24> hexnewbie: Then I would still have all the attributes that don't have an underscore but that I still don't want. Subbing sets works.
[16:05:41] <hexnewbie> bionade24: What attributes would that be?
[16:05:42] <lucifer> in my test, I have tried patching both listenbrainz_spark.stats.user.entity.get_artists and listenbrainz_spark.stats.user.artist.get_artists but neither works.
[16:06:12] <bionade24> hexnewbie: I also get serialize, serialize_numpy, etc...
[16:06:22] <bjs> lucifer: the problem is your import you say `from listenbrainz_spark.stats.user.artist import get_artists` which means if you later mock get_artists it's too late, because you've already imported the old (non-mocked) one
[16:06:29] <hexnewbie> bionade24: vars(cls) gives you serialize, which is not defined in your own class, but a parent?
[16:06:51] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 268 seconds)
[16:07:08] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:07:38] <lucifer> bjs: uh right. but if i understand https://docs.python.org/3/library/unittest.mock.html#where-to-patch correctly, if i mock it as `listenbrainz_spark.stats.user.entity.get_artists` (the place where it is used) it should work?
[16:07:45] <bjs> lucifer: not with your import
[16:07:52] <lucifer> oh
[16:08:15] <bjs> lucifer: and even if you fixed the import your `entity_handler_map` is being defined at the top level too.
[16:08:54] <bjs> lucifer: basically if this file is imported before you do any mocking then you're out of luck for mocking it unless you restructure.  Possibly the easiest way is just to make the `entity_handler_map` an (optional?) argument to get_entity_week
[16:09:07] <bjs> then you can in your tests just pass a different map with some fake mocks in it
[16:09:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[16:09:34] <hexnewbie> bionade24: I've not been able to get a confirmation of the behaviour of vars(cls), but if it gives you 'serialize' you didn't define, that means all my register() class methods I've ever written are wrong :P
[16:09:36] <bionade24> I now do len(set(dir(CpuCoreStatus)) - set(dir(Int32))) to get what I want. The serialization methods pop out of nowhere (bc that are C modules). That works as expected.
[16:09:49] <bjs> hexnewbie: vars(cls) gives you the attributes of the class object
[16:10:26] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[16:11:16] <hexnewbie> bjs: Well, that's the definition, but whether it includes inherited attributes or not is something I've inferred by testing, not by documentation.
[16:11:58] <bjs> hexnewbie: you won't find the phrase "inherited attributes" anywhere in the Python docs,  what did you mean by that?
[16:12:26] <lucifer> bjs: i see, makes sense. can you point me to some resources where i can read up more?
[16:12:48] <bjs> lucifer: here's a nice writeup about almost exactly your situation https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html
[16:13:04] *** Joins: pycurious (~Adium@user/pycurious)
[16:13:35] <hexnewbie> bjs: More like I don't know *where* in the documentation to look for, and what to look for.
[16:13:54] <lucifer> bjs: thanks!
[16:14:33] <bjs> hexnewbie: https://docs.python.org/3/reference/compound_stmts.html#class describes how the class statement works and how attributes get attached to the class object
[16:14:36] <hexnewbie> My register() methods do things like: «if '_registry' not in vars(cls): cls._registry = {}» to ensure it only registers objects for cls, not the parent classes (I also had crawling type.mro(cls) at some point)
[16:15:14] *** Joins: zeden (~zeden@user/zeden)
[16:15:20] <bjs> hexnewbie: specifically "A class object is then created using the inheritance list for the base classes and the saved local namespace for the attribute dictionary."
[16:16:31] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[16:17:54] <hexnewbie> Um, I read that as “newcls = type('newcls', inheritance_list, namespace) is called, which does something like newcls.__dict__.update(namespace)”
[16:18:46] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:1e06:e94b:c5d4:6a26)
[16:19:16] <bjs> hexnewbie: no it says very explicitly that when `class` is executed a new frame is made, using a new local namespace, then when the class statement finishes executing the class object is then created and that namespace becomes the attribute dictionary for the object
[16:19:40] <bjs> hexnewbie: and the inheritance_list gets stored as the bases for the class object.
[16:21:40] <hexnewbie> If that reading is correct, and the behaviour I observe in https://bpa.st/UV4Q (and rely on in my code) is well-defined, bionade24 can simply use vars(cls).keys() here
[16:21:57] *** Joins: gulzar (~gulzar@175.100.139.186)
[16:22:09] <hexnewbie> Well, witht he respective filtering of _* or __*__
[16:22:13] <bjs> hexnewbie: I think you've missed the key part of bionade24's question, it's not how to get the attributes of a class (they already knew about dir())
[16:22:43] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:23:10] *** Quits: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[16:23:16] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[16:23:26] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[16:24:16] <gulzar> Hi. I got this code from SO https://paste.debian.net/1208205/  , this is returning <itertools.chain object at 0x7fb82737fee0>   I tried list(), np.fromiter()   but I am not getting the list back. list() reurns   [<itertools.chain object at 0x7fb82737fee0>]  and np is giving TypeError: int() argument must be a string, a bytes-like object or a number, not 'itertools.chain'   .    How to get this array.
[16:24:25] <hexnewbie> bjs: Inherited ones (which vars() skips)
[16:24:32] *** Joins: ice99 (~ice9@user/ice9)
[16:24:51] <bjs> hexnewbie: I think you're still missing the *key* part of bionade24's question,  they know how to find attributes of various objects and filter out by name
[16:26:45] *** Joins: LSync (~ls@user/deepspace-link)
[16:26:58] <hexnewbie> It's true, I'm not sure if class attributes in the original question refers to actual class attributes (vars(cls).keys()),  or both instance and class attributes defined by the said class (vars(self).keys() | vars(type(self)).keys()).
[16:27:12] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[16:27:40] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[16:27:48] <bionade24> hexnewbie: bjs Here exactly what the problem is with your solution: https://bpa.st/GBCQ
[16:27:57] <bjs> gulzar: well if list() returns a list of chain objects, try calling list() on each of those chain objects
[16:29:16] <bjs> bionade24: is `output` just all the class attributes of `CpuCoreStatus` ?
[16:29:44] <hexnewbie> bionade24: You didn't redefine serialize in CpuCoreStatus?
[16:29:46] *** Quits: alnr (~alnr@38.125.204.99) (Quit: Leaving)
[16:30:10] <bjs> bionade24: or is there some more or some missing? This seems like, not a good way to do it
[16:30:12] <hexnewbie> bionade24: Because that would mean much of my code is buggy :P
[16:30:55] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[16:30:59] <bjs> hexnewbie: bionade24: the problem is that if Int32 defined something, and then CpuCoreStatus overwrites it, it won't appear in `output`
[16:31:30] <hexnewbie> bjs: I now think that might be bionade24 *wants* though
[16:31:48] <bionade24> bjs: https://bpa.st/F5MA
[16:32:01] <bjs> also `output` won't contain the attributes (the `self.blah = ...`) of a CpuCoreStatus instance,  and also that this might contain things that aren't from CpuCoreStatus or Int32, if there are other classes involved
[16:32:08] <bjs> hexnewbie: sure maybe "problem" isn't the right word
[16:32:36] <bjs> bionade24: this dir() doesn't actually tell me what comes from which class though or really what you're trying to do
[16:32:37] <bionade24> I only calc len(output) not more
[16:32:53] <bjs> bionade24: why does the len matter? What are you going to do with it?
[16:33:14] <hexnewbie> bionade24: What are you doing with these attributes? You may simply use a decorator on the needed methods
[16:33:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[16:34:25] <bionade24> bjs: I need it for a counter, as its not very cost-intensive and works safely enough for checking every attribute is filled
[16:35:04] *** Joins: cedric (~cedric@2a01:cb11:867:c200:9428:858b:ae17:fcc8)
[16:35:10] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[16:35:21] <lucifer> gulzar: np.unique wants an array not an iterator which `IT.chain.from_iterable` will return (assuming this is indeed itertools.chain). so i don't think that code is doing what you expect it to i.e. it won't remove duplicates. looking at https://numpy.org/doc/stable/reference/generated/numpy.unique.html, it seems you don't need that call to `chain` at all. just pass the iterable directly and it should probably work.
[16:35:34] <lucifer> in short, try `indices = np.unique(groups)`
[16:35:39] *** Joins: Crassus (~Crassus@user/crassus)
[16:35:39] *** Joins: Blankspace (~androirc@user/blankspace)
[16:35:56] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:05] *** Joins: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at)
[16:36:16] <bionade24> hexnewbie: bjs The problem and the libraries around putting me into this problem are so specific it's hard to tell you everything without spending half an hour explaining.
[16:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:47] <bjs> bionade24: fair enough but it seems very fragile to look at the *class* to try determine instance attributes (if that's what you're really doing)
[16:37:26] <gulzar> bjs: a for loop with list worked
[16:37:48] <gulzar> lucifer: ok,
[16:40:01] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[16:40:26] <gulzar> lucifer: yes. worked. There are multiple lists in each 'incides'. Needs to merge them into single list.   Thank You
[16:41:03] <bionade24> bjs: I look at the class, not objects. This class actually behaves like a struct in the non-python-interop-space. I don't think it's unsafe in my case, but actually handles Library changes fine, since things will always change in both CpuCoreStatus and Int32.
[16:41:48] <bionade24> bjs: CpuCoreStatus and Int32 are http://wiki.ros.org/msg
[16:43:10] *** Quits: derpadmin (~derpadmin@cloudbase2.200013.net) (Ping timeout: 240 seconds)
[16:45:10] *** Quits: lucifer (sid308373@brockwell.irccloud.com) ()
[16:49:35] <Blankspace> Hi can anyone help me with this simple problem https://ibb.co/x1VMHzj
[16:49:53] <pycurious> I'm trying to parse the output of the "w" command on linux. It gives time in these formats "44:47", "7:12m", "0:00s" - any ideas on how to parse this?
[16:51:37] <hexnewbie> pycurious: python-utmp may save you from having to go through 'w', perhaps
[16:52:23] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:41fe:a791:3bff:33ca)
[16:52:31] <pycurious> hexnewbie: The problem with python-utmp is that it does not parse the idle time
[16:53:06] <pycurious> here is the relevant part of the utmp record -> session=0, sec=1629372817, usec=973016, addr0=855785284, addr1=0, addr2=0, addr3=0, unused=''
[16:53:22] <habnabit_> pycurious, which part of that is the idle time?
[16:54:53] <pycurious> habnabit_: It seems its not parsing the idle time - the utmp. The "w" command gives the idle time, but am not sure what is a good way to parse that time.  Example formats "44:47", "7:12m", "0:00s"
[16:55:10] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:c9f1:2820:6c:cce0) (Ping timeout: 240 seconds)
[16:55:14] <habnabit_> pycurious, yeah, i don't think parsing command output is a good idea either
[16:55:33] <pycurious> habnabit_: Then I'll have to parse /proc/pid/stat - which looks more painful.
[16:56:03] <pycurious> habnabit_: I can actually parse "w" output pretty reliably - the only issue is the idle time
[16:56:15] *** Quits: Obo (~roberto@78.77.166.185) (Quit: WeeChat 2.8)
[16:56:29] <habnabit_> pycurious, "i can do this thing, except that i can't"
[16:57:00] <pycurious> habnabit_: any other ideas?
[16:57:08] <hexnewbie> pycurious: Also, my bad, there are more multiple third-party modules called utmp, perhaps
[16:57:12] <davor> I'm trying to use this package (it's available via pip), and no matter what I do, the plot won't show or save to a file, and no error is thrown. matplotlib is installed, I tried it via the command line (where matplotlib reports TkAgg backend) and with jupyter (jupyter inline backend), with and without a virtualenv, nothing works
[16:57:19] <davor> https://github.com/mmoskon/CosinorPy/blob/master/CosinorPy/cosinor.py
[16:57:41] <davor> it just finishes with no error, but never shows or saves a plot
[16:57:45] <davor> no matter what I specify
[16:57:50] <pycurious> hexnewbie: utmp does not have the idle information
[16:58:02] *** Quits: noctavian_ (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[16:58:16] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[16:58:39] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[16:58:41] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:58:45] <grawity> AFAIK, `w` gets idle time by looking at the mtime of the tty device
[16:59:04] <habnabit_> is that it? that's pretty easy
[16:59:04] <bjs> Blankspace: does "help" mean do it for you?   what kind of help do you need
[16:59:26] <grawity> which the kernel helpfully updates every time there's input on the tty, yes
[16:59:29] <bjs> Blankspace: (also is a weird angle picture of a screen displaying text really the easiest way to distribute text on the web? :P)
[16:59:48] <pycurious> grawity: It seems the mtime is in /proc/pid/stat and not in utmp
[16:59:51] <grawity> just keep in mind that utmp can have non-tty entries where "line" isn't a tty device at all
[17:00:26] <hexnewbie> pycurious: There's no mtime in /proc/$pid/stat (well, the *file* has mtime)
[17:00:43] <pycurious> grawity: type = 7 = UTmpRecordType.user_process ?
[17:00:57] <hexnewbie> pycurious: However, the mtime of /proc/$pid/stat itself does not change when I'm active, whereas the mtime of the TTY device file does
[17:00:57] <grawity> is that a question
[17:01:13] <Blankspace> How do you read input in dictionary
[17:01:26] <Blankspace> I tried for 1 HR
[17:01:28] *** Joins: Appli000 (~Thunderbi@176-161-23-89.abo.bbox.fr)
[17:01:48] <bjs> Blankspace: well what did you try? it's much easier to help if you show what you tried
[17:01:52] <bjs> rather than us guessing what help you need
[17:02:09] <pycurious> grawity: type = 7 is the filter i need to filter out the ssh logins on the machine - which is what i was trying to find.
[17:02:21] <Blankspace> I closed the test time got over In one question
[17:02:31] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:03:03] <bjs> Blankspace: what do you mean
[17:03:06] <pycurious> grawity: where can i get the mtime for a particular utmp pts/tty record?
[17:03:24] <grawity> pycurious: call os.stat() on the tty device
[17:03:25] <hexnewbie> pycurious: os.stat('/dev/pts/0').st_mtime
[17:04:03] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[17:04:09] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[17:04:47] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:05:02] *** Joins: cypris (uid507362@user/cypris)
[17:05:13] <grawity> each utmp record has a field called ut_line, if it begins with "tty" or "pty" or "pts" then put a "/dev/" in front of it, then os.stat()
[17:05:19] *** Quits: PyT001 (~PyT001@2402:e280:3d22:227:a497:ef4b:b3f:c965) (Quit: Client closed)
[17:05:27] *** Joins: shad (~shad@user/shad)
[17:06:49] <nedbat>  i heard someone say something about YouTube making all unlisted videos before 2017 private, and maybe it's true: https://nedbatchelder.com/text/machete.html  Anyone know anything about the PyCon videos and how to get them available again?
[17:07:04] *** Quits: Appli000 (~Thunderbi@176-161-23-89.abo.bbox.fr) (Read error: Connection reset by peer)
[17:07:07] <grawity> or well I guess just result = os.stat(f"/dev/{ut_line}"); if stat.S_ISCHR(result.st_mode): idle_time = time.time() - result.st_mtime; else: it's probably a non-tty entry
[17:07:15] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[17:07:49] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[17:07:54] <pycurious> nedbat: just thinking loud - one way would be to download all of them, and dump them back on youtube using a script?
[17:08:07] <nedbat> pycurious: i don't have a way to download it: it's private.
[17:08:15] <Yhg1s> nedbat: let me ask PyCon people.
[17:09:21] *** Joins: Appli000 (~Thunderbi@176-161-23-89.abo.bbox.fr)
[17:10:02] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:13:04] <Yhg1s> nedbat: PyCon US used to use a different account per year for... reasons I never understood. It's possible that it's just videos of accounts that are inactive. But I imagine the PSF still has access to those youtube accounts, or can regain access to them, so they should be able to fix it.
[17:13:16] *** Quits: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net) (Remote host closed the connection)
[17:13:19] <nedbat> Yhg1s: that would be cool if so :)
[17:13:27] <Yhg1s> nedbat: Jackie Augustine is going to take a look.
[17:13:45] <nedbat> Yhg1s: any clue why YouTube would do this?
[17:14:03] *** Quits: Appli000 (~Thunderbi@176-161-23-89.abo.bbox.fr) (Ping timeout: 268 seconds)
[17:14:17] <Yhg1s> I don't know what happened yet, so no. Since it's YouTube/Google/Alphabet, I can imagine all kinds of bad reasons :)
[17:14:21] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[17:14:27] <nedbat> https://support.google.com/youtube/answer/9230970?hl=en
[17:14:39] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:15:28] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:15:50] <Yhg1s> I'm not sure those old videos were "unlisted", but I've forwarded the link to Jackie
[17:17:36] <pycurious> nedbat: other option is to ask our friends inside Google for help.
[17:17:44] <Yhg1s> pycurious: imagine that.
[17:17:49] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:41fe:a791:3bff:33ca) (Read error: Connection reset by peer)
[17:18:12] <bjs> lol
[17:19:04] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[17:19:33] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[17:19:35] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[17:22:07] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[17:22:39] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Remote host closed the connection)
[17:23:03] *** Joins: AndroUser2 (~androirc@user/blankspace)
[17:23:10] *** Quits: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[17:23:47] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:25:04] <AndroUser2> Https://pastecode.io/s/9a61oe13 BJs my code logic seems wrong
[17:25:09] *** Quits: LSync (~ls@user/deepspace-link) ()
[17:25:10] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[17:25:25] *** Joins: F1R3DoG (~F1R3DoG@2806:108e:19:8b56:cd27:ae2d:9704:7991)
[17:25:35] <bjs> AndroUser2: can you explain what the logic is in English?
[17:26:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Remote host closed the connection)
[17:26:40] *** Quits: Blankspace (~androirc@user/blankspace) (Ping timeout: 240 seconds)
[17:26:50] *** AndroUser2 is now known as Blankspace
[17:26:57] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[17:27:10] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[17:27:11] *** Joins: LSync (~ls@user/deepspace-link)
[17:27:28] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 252 seconds)
[17:27:31] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 246 seconds)
[17:27:43] <hexnewbie> pycurious: Maybe if I could simply reproduce this: https://i.imgur.com/ggZQbkD.png 😜
[17:27:49] *** Joins: moog (~moog@107.126.48.145)
[17:27:49] <Blankspace> BJs I meant it doesn't sum up correctly values of keys when I run my code
[17:27:57] <bjs> Blankspace: I know what you mean
[17:28:09] <bjs> Blankspace: I'm just asking you to explain what the logic is of your code
[17:28:26] <bjs> I can read what the code "actually does", but I can't tell what the logic is you're trying to code.
[17:28:46] <Blankspace> Add values for same key
[17:29:08] <bjs> Blankspace: more detail,  your code seems to have a dictionary and some loops and some sums
[17:29:13] <grawity> it doesn't sum the values correctly because it only ever adds *exactly two* values, and you have more than two of X
[17:29:51] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[17:29:55] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[17:30:03] <grawity> that's the first problem with the "loop in loop" approach in general; find a way to do it with just one loop
[17:31:04] <grawity> (hint: you can actually *change* dict items. like, add to the existing value.)
[17:31:11] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[17:33:00] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:33:20] <Blankspace> Oh if I do dict(list)
[17:34:58] *** Joins: Fiji (~Fiji@user/fiji)
[17:36:15] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[17:36:25] *** Joins: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at)
[17:37:42] <Blankspace> What. Can I correct in my code
[17:37:56] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[17:38:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[17:38:25] *** Quits: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:38:42] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[17:39:26] *** Quits: Strom (strom@fedora/strom) ()
[17:39:27] *** Joins: wyclif (~wyclif@user/wyclif)
[17:40:34] <Blankspace> I think in sum
[17:40:48] <bjs> Blankspace: the logic of what your code is trying to do is just not right
[17:41:01] <bjs> Blankspace: if you try to explain what your code is actually trying to do, and what the loops are doing it might be clearer
[17:41:02] *** Joins: Strom (strom@fedora/strom)
[17:42:18] *** Joins: derelict (~derelict@user/derelict)
[17:42:57] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:d01a:d45:2c8a:8f26) (Ping timeout: 245 seconds)
[17:43:14] *** Quits: ice99 (~ice9@user/ice9) (Remote host closed the connection)
[17:44:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[17:45:29] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[17:45:43] *** Joins: Obo (~roberto@78.77.166.185)
[17:46:16] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[17:46:29] *** Joins: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com)
[17:47:15] *** Joins: reset (~reset@user/reset)
[17:47:47] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:47:57] <pycurious> grawity: the os.stat() function you wrote - does not give the correct idle time - any ideas why that might be giving wrong results? Perhaps "w" gets it from somewhere else?
[17:48:18] *** Joins: thiras (~thiras@user/thiras)
[17:50:01] *** Quits: bninja (~bloodninj@user/bloodninja) (Ping timeout: 252 seconds)
[17:50:25] *** Joins: wyclif (~wyclif@user/wyclif)
[17:51:00] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:51:19] <grawity> pycurious: I re-checked, it does in fact stat() the tty, although it uses the atime rather than mtime
[17:51:50] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[17:51:53] <grawity> but those two seem to be identical for ttys on Linux
[17:53:11] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:54:09] *** Quits: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[17:54:17] *** Quits: Obo (~roberto@78.77.166.185) (Ping timeout: 248 seconds)
[17:56:37] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 268 seconds)
[17:57:30] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:57:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:58:01] *** Joins: pragmaticenigma (~pragmatic@user/pragmaticenigma)
[17:59:10] *** Quits: gulzar (~gulzar@175.100.139.186) (Ping timeout: 240 seconds)
[17:59:50] *** Quits: LSync (~ls@user/deepspace-link) ()
[18:01:34] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[18:01:42] *** Joins: LSync (~ls@user/deepspace-link)
[18:01:56] *** Quits: jazzy (~jaziz@2600:380:4548:2564:9586:3cbe:697a:6fd1) (Read error: Connection reset by peer)
[18:03:41] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[18:04:28] *** Joins: Roey (~Roey@user/Roey)
[18:08:13] *** Quits: spaceone (~spaceone@wc1.wechall.net) (Quit: WeeChat 3.2)
[18:08:23] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[18:11:25] *** Joins: legola (~legola@46.235.100.27)
[18:11:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[18:12:12] *** Quits: F1R3DoG (~F1R3DoG@2806:108e:19:8b56:cd27:ae2d:9704:7991) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:12:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:12:58] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:15:17] *** Parts: Vultyre (~vultyre@user/vultyre) (WeeChat 2.8)
[18:16:38] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[18:16:40] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[18:16:45] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[18:16:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[18:18:47] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 245 seconds)
[18:18:49] *** Joins: srhm (~srhm@user/srhm)
[18:19:07] *** Joins: Kvothe (~weechat@user/elodin)
[18:19:58] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:20:03] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[18:20:10] *** Joins: jazzy (~jaziz@2600:380:4548:2564:9586:3cbe:697a:6fd1)
[18:20:44] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:20:48] <Blankspace> I am not able to understand
[18:20:58] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Read error: Connection reset by peer)
[18:22:00] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[18:22:15] <AhmedAmerican> am struggling with Scrapy ItemLoader to stop ommit None values. someone have clue ?
[18:22:43] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[18:22:46] <hexnewbie> pycurious: How did you determine it's incorrect? Did you subtract it from time.time(), like time.time() - os.stat('/dev/pts/0').st_atime (as grawity suggests atime is the correct field)
[18:23:13] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[18:24:14] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[18:24:22] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[18:25:16] *** lukedashjr is now known as luke-jr
[18:25:44] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:26:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:28:00] *** Joins: Obo (~roberto@78.77.166.185)
[18:28:03] *** Quits: Obo (~roberto@78.77.166.185) (Client Quit)
[18:28:54] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[18:29:08] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:30:28] <Blankspace> Now my code works
[18:30:37] <Blankspace> Thanks gravity
[18:31:20] <very_sneaky> is using pip-compile the best way to ensure i get full dependency resolution when installing packages?
[18:31:21] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:31:36] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[18:31:43] <very_sneaky> or do we live in more evolved times? been a while since i paid any attention
[18:32:09] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:302d:31fb:8cf9:9946)
[18:32:26] *** glider_ is now known as glider
[18:33:28] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[18:33:40] <SnoopJ> very_sneaky, can you elaborate on what kind of incomplete resolution you mean?
[18:33:42] <Yhg1s> very_sneaky: I'm not sure what you mean by 'full dependency resolution'.
[18:33:58] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (Quit: brb, sex)
[18:34:40] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:35:12] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[18:35:23] *** Joins: venue (~venue@user/venue)
[18:36:27] <very_sneaky> that was my understanding of what pip-compile provides? my understanding was that the dependencies that pip identifies were only identified in the order that they were listed in requirements.txt, so there was no recursion if later packages had conflicts that couldn't be resolved with one of the packages selected earlier in the process
[18:36:28] <very_sneaky> or something
[18:36:41] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[18:36:58] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:37:05] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:37:23] <very_sneaky> reading the pypa page on it though, it looks like backtracking was introduced in 20.3 so maybe this isn't necessary anymore?
[18:37:40] *** Quits: emika (~emika@185.207.249.200) (Ping timeout: 240 seconds)
[18:38:10] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:38:15] *** Joins: emika (~emika@185.207.249.163)
[18:38:21] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[18:38:39] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[18:38:41] *** Joins: Leliana (~is@the.one.and.only.revthefox.co.uk)
[18:39:25] *** Joins: F1R3DoG (~F1R3DoG@2806:108e:1f:172b:1882:8e5a:11b1:e9a3)
[18:39:45] *** Joins: mickey (~user@user/mickey)
[18:39:48] <Yhg1s> very_sneaky: what pip-compile helps you do is compile specific versions of transitive dependencies from a list of direct dependencies.
[18:40:03] <Yhg1s> compile a list of specific versions of transitive dependencies, I mean.
[18:40:30] *** Quits: Leliana (~is@the.one.and.only.revthefox.co.uk) (Client Quit)
[18:40:38] <very_sneaky> yes, my understanding was that in the generation of this list, it resolved all dependency conflicts and gave you the list of latest mutually compatible packages
[18:40:52] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[18:41:06] *** Quits: F1R3DoG (~F1R3DoG@2806:108e:1f:172b:1882:8e5a:11b1:e9a3) (Client Quit)
[18:41:11] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:41:17] <very_sneaky> which pip didn't do the last time i looked at this, i don't think
[18:41:24] <Yhg1s> Quite likely, yes.
[18:41:25] *** Quits: shangxiao (~davids@124.182.71.141) (Quit: WeeChat 3.2)
[18:41:41] <SnoopJ> pip doesn't create such a list, but it's not like those transitive dependencies never enter the picture
[18:41:52] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[18:42:16] <very_sneaky> i assume it holds internal state of what this list is as it's resolving the dependencies though, right?
[18:42:25] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[18:43:03] <jinsun> nedbat: what is the difference between the unlisted video you linked on your website and this one? https://www.youtube.com/watch?v=bAcfPzxB3dk
[18:43:18] <very_sneaky> it looks like it has to traverse the tree, and can only resolve issues it identifies at the end of the process by a brute-force method of uninstalling what's existing and installing a new version to check it's compatability: https://pip.pypa.io/en/stable/topics/dependency-resolution/
[18:43:20] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:43:37] <SnoopJ> yea it's not as sophisticated an approach
[18:44:03] <SnoopJ> and can end up in catastrophic failure modes. pip-compile is a more complete view of the dependency problem
[18:44:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 248 seconds)
[18:44:42] <habnabit_> or poetry
[18:44:58] <very_sneaky> yeah, that's what i thought. my understanding was that poetry does something similar in its dependency management? are there any other tools on the scene?
[18:45:02] <very_sneaky> ^
[18:45:17] <very_sneaky> or is pip-compile still the go-to
[18:45:25] <habnabit_> very_sneaky, similar to what?
[18:45:45] <very_sneaky> similar to pip-compile
[18:45:48] <nedbat> jinsun: not sure!
[18:46:06] *** Joins: Adoi (~Adoi@user/adoi)
[18:46:14] <SnoopJ> very_sneaky, I don't know if there is just one go-to, but there are a few tools that do different things. pip-compile cares about *just* this problem, poetry cares about a bunch of stuff
[18:46:29] <nedbat> jinsun: I can link to the public one.  I don't know why there are two. thanks.
[18:46:43] <very_sneaky> SnoopJ: yep appreciated that poetry's scope is much wider
[18:47:01] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[18:47:09] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[18:47:19] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:47:45] *** Joins: upsala (~zcb@185.213.155.160)
[18:48:09] <jinsun> nedbat: oh great, I remembered seeing that from a youtube recommendation, so I thought the one I saw couldn't be unlisted and checked
[18:48:37] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:48:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[18:49:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[18:49:44] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:49:51] <nedbat> Yhg1s: looks like there's a public video already: https://www.youtube.com/watch?v=bAcfPzxB3dk
[18:49:54] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[18:50:27] <Yhg1s> nedbat: hm, how's that different from the old video though?
[18:50:42] <nedbat> Yhg1s: don't know! it looks like the right thing, and it has a bunch of views.
[18:50:43] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[18:50:44] *** Joins: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca)
[18:52:24] <lockywolf> has anybody used IMAPclient here?
[18:52:37] <habnabit_> lockywolf, let's say yes
[18:52:48] <lockywolf> I am trying to fetch the message pushed to me by IDLE, but the resulting dictionary is empty.
[18:53:55] <lockywolf> So, the server sends me [(74698, b'EXISTS')] by IDLE, and I am trying to use this 74698 like this: response2 = server.fetch( [74698], ['RFC822'] )
[18:54:20] <lockywolf> but the resulting dict is empty. What am I doing wrong?
[18:57:58] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:1e06:e94b:c5d4:6a26) (Quit: Leaving)
[18:58:18] *** Joins: Raichvent (~Raichvent@raik.cc)
[18:58:49] *** Quits: wilz (~michel@modemcable036.177-131-66.mc.videotron.ca) (Read error: Connection reset by peer)
[18:59:06] *** Joins: wilz (~michel@modemcable036.177-131-66.mc.videotron.ca)
[18:59:11] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[18:59:46] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[19:00:55] *** Joins: fofoni (~fofoni@user/fofoni)
[19:02:29] <IceMichael> maybe choose proper names for a start
[19:03:00] <IceMichael> ah sorry that was for earlier code
[19:03:53] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[19:05:38] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[19:06:06] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[19:06:08] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:08:25] <Yhg1s> nedbat: I've let Jackie know about the other video, maybe she can sort it out
[19:09:26] <supakeen> mrm i was hoping for a new ned video
[19:09:29] *** Quits: ihristov (~ihristov@217.145.94.71) (Quit: Connection closed)
[19:11:45] <Raichvent> Hm, using dependency-injector, has anyone passed a configuration provider from one container to another?
[19:11:51] <nedbat> Yhg1s: thanks
[19:14:14] *** Joins: bninja (~bloodninj@user/bloodninja)
[19:15:53] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:17:50] *** Quits: bninja (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[19:18:01] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Ping timeout: 252 seconds)
[19:19:18] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:20:32] *** Joins: aifa[m] (~aifamatri@2001:470:69fc:105::d06e)
[19:22:25] *** Joins: Aye (jeda@hellomouse/dev/cryb.jeda)
[19:23:16] *** Quits: Blankspace (~androirc@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:23:45] *** Joins: rsrx (~rsrx@103.225.150.81)
[19:24:13] *** Joins: Fiji (~Fiji@user/fiji)
[19:24:32] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[19:24:56] *** Joins: rndm (~rndm@143.59.164.79)
[19:26:29] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[19:26:47] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:27:02] *** Joins: Naan (~Naan@user/naan)
[19:27:03] <pragmaticenigma> lockywolf: most of the examples seem to be taking output from another method as "messages" ... You might want to inspect what those look like
[19:28:42] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:28:50] *** Joins: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl)
[19:29:22] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 244 seconds)
[19:29:50] *** Joins: spithash (~spithash@user/spithash)
[19:30:05] *** Joins: Naan` (~Naan@user/naan)
[19:30:40] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[19:33:54] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 258 seconds)
[19:35:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[19:36:18] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:36:26] <df_data> hi all, hopeing someone could  help me i have the following code: https://bpa.st/DJUA
[19:36:50] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[19:37:48] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:37:59] <df_data> for some reason CODETT5 is a match on an item in location7 called CODETT5 however, when i save the csv, CODETT5 is saved as CODETT6 this only happens for say 6 entries.
[19:38:02] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[19:38:04] <df_data> i dont know why....
[19:38:07] <df_data> or how
[19:38:49] *** Joins: waynew (~wayne@user/waynew)
[19:39:09] *** Joins: fonsy (~fonsy@84.247.210.222)
[19:39:58] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[19:40:46] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[19:44:07] <rndm> I am building a tree out of frozen dataclasses. I'd like it to be such that hash(root) hashes the whole tree. This almost works except one class has a reference to a complex object type containing a list which is unhashable. I consider the trees equal if they reference the same object. Two questions: (1) is it possible to override the hash to consider only referenced object (so that it's equal when
[19:44:10] <rndm> referencing the same object). (2) does this break anything / is it a bad idea?
[19:46:55] <nedbat> rndm: you can't change how hash(a_list) behaves, if that is what you are asking
[19:47:07] <nedbat> rndm: keep in mind that hash(obj) might change from run to run
[19:47:11] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[19:47:23] *** Joins: programmar (~whatever@118.69.128.37)
[19:47:49] <rndm> nedbat: right and right. list is a member of a complex type, I'm thinking of def __hash__(self): return id(self) the complex type
[19:47:55] <rndm> does this break anything?
[19:48:14] <rndm> I don't have a full understanding of the consequnces of altering __hash__
[19:48:20] <nedbat> rndm: do you sometimes want to use your object as a key in a dict, or a member of a set?
[19:48:24] <programmar> not a professional in twisted but by defauly does twisted TCP sockets provide keepalives ? when i was dealing with raw sockets from the socket module, my TCP connection between the client and server is usually timed out if none of those recieve any message or send anything for a period of time tho, so i am moving to twisted
[19:49:36] <nedbat> rndm: if you didn't define __hash__ in your class, how was it finding your list attribute in the first place?
[19:50:35] <graingert[m]> <rndm> "I am building a tree out of..." <- You can mark some fields in attrs.frozen as not included in the hash
[19:50:35] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[19:50:47] <nedbat> oh, attrs implemented hash
[19:51:01] <SnoopJ> rndm, objects that compare equal must have the same hash value, but your proposed hash does not satisfy this ([] == [] but those aren't the same object so this hypothetical hash does not satisfy that property)
[19:51:03] <graingert[m]> Or you can wrap the object in an identity based object
[19:51:33] <graingert[m]> programmar: You might want to ask in https://gitter.im/twisted/twisted
[19:52:34] <programmar> ook
[19:52:56] <rndm> for clarity here, I don't want to alter the hash of list. I want to alter the hash of a complex object which contains the list as a member. This is based on my belief that hash is recursing through this class
[19:53:10] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[19:53:16] <rndm> and the semantics of the tree are such that two are equal if they reference the same complex object
[19:53:48] <graingert[m]> <programmar> "not a professional in twisted..." <- You might also want to try trio
[19:54:02] <rndm> so it seems like an easy way to short-circuit the problem and have the right semantics
[19:54:05] <df_data> Any pandas pros?
[19:54:06] <programmar> they also do great at TCP sockets ?
[19:54:37] <bjs> rndm: you can make __hash__ do what you want, e.g. to look at the id() of the list instead of trying to hash the list directly
[19:55:16] <bjs> rndm: but note that if the list changes and the tree __eq__ (==) relies on the values in the list then this would break usages as keys in sets/dicts etc
[19:55:46] <pragmaticenigma> programmar: Anything specific about a package, is probably best directed at the community/developers of that package
[19:56:00] <bjs> rndm: Attrs "should" take care of that for you, e.g. if you tell attrs it's not part of the hash it won't be used in the == (I think!) but you need to check if that's really the correct semantics
[19:56:07] <graingert[m]> https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html
[19:56:34] <graingert[m]> programmar: Trio is great at sockets
[19:56:45] <graingert[m]> Probably the best
[19:57:01] <hodapp> tldp.org... been awhile...
[19:57:02] <rndm> bjs: perfect. thank you. I have also not used attrs but will look into that as well.
[19:57:28] <programmar> graingert[m]: well if you say so, i will try
[19:57:43] <programmar> hopefully its socket won't automatically timed out and does keepalive as default
[19:57:46] <graingert[m]> Probably won't help your keepalive
[19:57:50] <bjs> rndm: ah I may have got graingert[m]'s message mixed up with yours,  you can implement __hash__ and __eq__ yourself then
[19:57:51] <programmar> :(
[19:58:39] <graingert[m]> But you can configure timeouts and things and do your own pings at the application layer
[19:58:52] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[19:59:04] <rndm> bjs: thanks
[19:59:29] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:59:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:59:47] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[20:00:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:00:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:01:40] *** Quits: hyper_dave (~hyper_dav@197.156.103.172) (Ping timeout: 240 seconds)
[20:03:05] *** daniel3 is now known as daniel2
[20:03:13] *** Joins: piscvau (~odile@alyon-652-1-90-155.w90-42.abo.wanadoo.fr)
[20:03:13] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:03:17] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[20:03:33] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[20:03:38] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:03:45] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:03:54] *** Quits: fonsy (~fonsy@84.247.210.222) (Remote host closed the connection)
[20:05:07] <piscvau> hello
[20:05:55] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[20:05:58] *** Joins: wrap_socket (~wrap_sock@87.200.253.194)
[20:06:01] <wrap_socket> hi
[20:06:03] <piscvau> Is this the reight plce to get help about loading a sqldump with a python subprocess?
[20:07:10] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 240 seconds)
[20:08:26] *** Joins: c10l (~c10l@89.34.167.207)
[20:09:07] *** Joins: Blankspace (~androirc@user/blankspace)
[20:09:42] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[20:10:52] <wrap_socket> I'm trying to make a GET request through an HTTPS proxy using socket and ssl module. The CONNECT request works fine but then using the same sock I send right away the GET but I didn't get any answer from the server -> https://pastebin.com/9TsFE4Uw
[20:11:04] <wrap_socket> do I need another step after the CONNECT request ?
[20:13:27] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[20:13:28] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[20:13:28] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[20:13:28] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[20:13:44] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[20:13:45] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[20:14:10] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[20:14:22] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[20:15:40] *** Quits: jazzy (~jaziz@2600:380:4548:2564:9586:3cbe:697a:6fd1) (Ping timeout: 240 seconds)
[20:17:25] <Adoi> shangxiao, in the earlier code you helped me with today,  *e* variable was redundant after your solution, removing it retained the output
[20:18:29] <Adoi> oh he is no more online
[20:18:34] <Adoi> or she
[20:19:32] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:19:38] *** Joins: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net)
[20:19:49] *** Joins: molt (~molt@79.140.150.21)
[20:20:37] *** Joins: manin (~x@185.242.190.95)
[20:21:42] *** dcaro is now known as dcaro_away
[20:21:54] *** Joins: daoudr (~daoudr@178.197.204.217)
[20:22:08] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 268 seconds)
[20:22:27] *** Joins: ckdcreation (~ckdCreati@147.55.133.141)
[20:23:53] *** Quits: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net) (Client Quit)
[20:25:03] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[20:25:40] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[20:25:51] *** Joins: zeden (~zeden@user/zeden)
[20:27:21] <bjs> Adoi: if you have a question I'm sure someone else will be able to understand the code and help
[20:27:21] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[20:27:40] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Ping timeout: 240 seconds)
[20:28:55] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[20:30:44] <dale> You're *sure* someone will be able to understand the code?  Challenge accepted!
[20:31:04] <mefistofeles> lol
[20:31:51] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[20:33:02] *** Quits: programmar (~whatever@118.69.128.37) (Quit: Leaving)
[20:33:11] <graingert[m]> <wrap_socket> "I'm trying to make a GET request..." <- ssl.wrap_socket is deprecated
[20:33:34] <wrap_socket> graingert[m]  oh
[20:34:09] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[20:34:10] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:34:13] <graingert[m]> It looks like you got a 200 response though
[20:35:00] *** Joins: Naan` (~Naan@user/naan)
[20:35:17] *** Joins: besnn (~besnn@user/besnn)
[20:35:28] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[20:35:44] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[20:37:46] <wrap_socket> graingert[m] oh yeah it is deprecated so I'm changing the code with SSLContext. Yes I got a 200 from the CONNECT method but then the GET requests give no answer. Wireshark said that the proxy sent an RST packet
[20:38:03] *** Joins: naan (~Naan@user/naan)
[20:38:09] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Client Quit)
[20:38:37] <graingert[m]> wrap_socket: Can you show the full file?
[20:38:42] <graingert[m]> And does the proxy support transparent?
[20:39:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:39:25] <wrap_socket> graingert[m] yes I can show the full file just one minute. I don't think the proxy support transparent
[20:39:36] <gitesh> so list comprehensions is useful in mapping and filter bjs ?
[20:39:57] <gitesh> instead of we use map and filter function we will use list comprehensions
[20:40:09] <bjs> gitesh: yes instead of using the map() and filter() functions you can instead use comprehensions
[20:40:15] <gitesh> okay
[20:40:16] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:40:18] <bjs> I personally think the comprehensions look nicer,  but they are the same.
[20:40:27] <gitesh> okay
[20:40:55] *** Quits: Blankspace (~androirc@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[20:41:17] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[20:41:19] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[20:41:40] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[20:41:58] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[20:42:03] <gitesh> i think syntax is hard bjs
[20:42:11] <gitesh> for list comprehensions
[20:42:18] <gitesh> because you look up the value first
[20:42:52] <gitesh> I'm gonna use it
[20:43:04] *** Joins: computeiro (~Wender@189.15.148.197)
[20:43:12] * enyc meows
[20:44:29] <jean-luc> comprehensions are supa cool
[20:44:36] <jean-luc> like named tuples
[20:44:37] <graingert[m]> gitesh: https://docs.quantifiedcode.com/python-anti-patterns/readability/using_map_or_filter_where_list_comprehension_is_possible.html
[20:44:50] <grym> jean-luc: had us in the first half
[20:45:20] <graingert[m]> > Use map() or filter() for expressions that are too long or complicated to express with a list comprehension.
[20:45:20] <graingert[m]> Is an odd statement though because list comps are always less complicated
[20:46:06] *** Joins: MikZyth (~MikZyth@188.65.243.46)
[20:46:58] <wrap_socket> graingert[m] The missing informations are the proxy + login + password. https://pastebin.com/xH2r9Ymt
[20:47:10] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:48:51] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:49:24] *** Quits: piscvau (~odile@alyon-652-1-90-155.w90-42.abo.wanadoo.fr) (Quit: Leaving)
[20:51:13] <bjs> gitesh: Syntax is always hard at first, you get used to it
[20:52:10] * enyc meows
[20:52:22] * HurricaneHarry pets
[20:52:25] <graingert[m]> <wrap_socket> "graingert The missing informatio..." <- Why not use httpx and it's built in proxy support?
[20:53:18] <wrap_socket> graingert[m] so I'm trying multiple way to do this. It works with pycurl, I will try with httpx but I also need the raw socket
[20:53:23] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[20:53:33] *** Quits: ByteHackr (~sanroy@43.252.250.113) (Quit: Leaving)
[20:53:40] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:54:08] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:54:34] *** Joins: rsx (~dummy@ppp-188-174-130-209.dynamic.mnet-online.de)
[20:57:34] *** Joins: matsaman (~matsaman@user/matsaman)
[20:57:38] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[20:58:04] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:58:30] <gitesh> `[<transformer_expression> for <loop_var> in <sequence> if <filtration_expression>]`
[20:58:59] <gitesh> cool
[20:59:09] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[20:59:48] <rndm> I am getting a mypy error (Unexpected "...") for this: LPTxFunc = Callable[[TRecord, Schema, ...], TRecord]
[21:00:27] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[21:00:29] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[21:00:32] *** Quits: treefrob (~treefrob@p57a9648f.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[21:00:52] <rndm> am I missing something? seems like that _should_ work for things like def fn(r: TRecord, s: Schema, *args: Any) -> TRecord
[21:01:16] *** Joins: F1R3DoG (~F1R3DoG@2806:108e:1f:172b:1882:8e5a:11b1:e9a3)
[21:01:55] *** Joins: treefrob (~treefrob@p2e54235e.dip0.t-ipconnect.de)
[21:03:04] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[21:03:32] <rndm> sorry that's two separate statements. (1) seems like that should work, (2) the goal is to express the type of a variadic function with the first two arguments of a fixed type.
[21:04:12] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:04:37] <HurricaneHarry> lost you at variadic function
[21:04:47] *** Quits: d0ku (~d0ku@178.43.198.70.ipv4.supernova.orange.pl) (Remote host closed the connection)
[21:04:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:05:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Client Quit)
[21:07:07] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[21:07:07] <bjs> rndm: the ... is a substitute for declaring the argument types, it cannot be arbitrary placed at positions
[21:07:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:07:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:07:43] <bjs> rndm: Callable is really for simple callback types,  if you have some complex callable type then maybe you want a Protocol
[21:07:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:08:05] <rndm> bjs: okay cool
[21:08:25] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 248 seconds)
[21:08:41] <dale> +1 I think you need to use Protocol
[21:09:08] *** Joins: Barones (~Barones@2804:48dc:8500:0:50d:e6a:15b7:131f)
[21:09:14] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:09:16] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:09:38] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:09:54] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:11:40] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 240 seconds)
[21:11:54] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[21:12:25] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[21:13:03] *** Quits: LSync (~ls@user/deepspace-link) ()
[21:14:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:15:06] *** Joins: Moyst (~moyst@user/moyst)
[21:15:52] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[21:16:18] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:16:54] *** Joins: anistark (~anistark@223.226.22.23)
[21:16:59] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:19:16] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:19:31] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Quit: Leaving...)
[21:20:05] *** baltazaar is now known as baltazar
[21:21:49] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[21:22:19] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[21:23:25] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[21:24:04] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[21:24:28] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:4c94:ca1:e2f4:e8ad)
[21:25:01] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[21:26:33] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Ping timeout: 248 seconds)
[21:26:39] *** Quits: Perlence (~Perlence@188.114.14.153) (Quit: Client closed)
[21:28:03] *** Joins: RougeR (~rougex250@user/rouger)
[21:28:51] *** Quits: F1R3DoG (~F1R3DoG@2806:108e:1f:172b:1882:8e5a:11b1:e9a3) (Quit: Textual IRC Client: www.textualapp.com)
[21:31:14] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[21:31:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:31:41] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[21:32:34] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[21:33:50] *** Joins: wolfgang_ (~wolfgang@101.174.6.197)
[21:33:52] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Ping timeout: 252 seconds)
[21:34:01] *** Quits: ckdcreation (~ckdCreati@147.55.133.141) (Quit: Leaving)
[21:34:34] *** wolfgang_ is now known as wolfgang
[21:34:46] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[21:35:16] *** Joins: nabuco (~skeksil@139.47.69.197)
[21:35:25] <RougeR> any good recommendations for libraries to use when transforming similar data from multiple APIs
[21:35:48] <RougeR> basically simple API based ETL
[21:36:37] *** Quits: mozgalom_ (~mozgalom@ipnet-gw.157.157.97.111.simnet.is) (Ping timeout: 252 seconds)
[21:38:05] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[21:39:02] <SnoopJ> RougeR, what kind of transformations are you interested in?
[21:39:19] <RougeR> SnoopJ, its really simple stuff tbh at the moment
[21:39:24] <SnoopJ> like what?
[21:40:08] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[21:40:09] <RougeR> things like user, meeting, recordings, participant, chat data from webex, ms teams, zoom etc
[21:40:25] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:40:30] <RougeR> and then transforming it to fit the required db schema
[21:40:34] <SnoopJ> for relatively simple stuff you might be able to get away with writing an attrs/dataclasses class that knows how to ingest/produce data from/for each of the APIs you're interseted in. For more complicated stuff, you probably want a binding to a tool like airflow
[21:40:51] <RougeR> yeah i dont think i ned to go as far as airglowe
[21:40:59] <RougeR> i was thinking about using pydantic weirdly
[21:41:13] <SnoopJ> it's a great tool for data modeling, I'm quite fond of it since I started using FastAPI
[21:41:14] <RougeR> because sometimes i want to do different things depending on which fields are present
[21:41:26] <RougeR> yeah ive used it a bit to play with
[21:41:34] <RougeR> tried fastapi for a little while, quite like it
[21:41:43] <RougeR> shame i cant get work to commit to using any frameworks
[21:41:55] *** Quits: anistark (~anistark@223.226.22.23) (Quit: Client closed)
[21:41:56] <SnoopJ> that's kinda why I mentioned dataclasses
[21:42:10] <SnoopJ> although attrs gives you more headroom for growing complicated features
[21:42:19] <RougeR> mmm
[21:42:32] <RougeR> well im glad my instinct was solid, ill use pydantic
[21:42:56] <RougeR> ive done all the other hard work i.e setting up client classes and auth flows and multi tenancy dynamically
[21:43:13] <SnoopJ> assuming a canonical representation is possible, I'd write e.g. a CanonicalDatum class that has CanonicalDatum.from_foo(foo_data) and CanonicalDatum.from_bar(bar_data) for two APIs foo/bar
[21:43:29] <RougeR> interesting
[21:43:30] <SnoopJ> ideally you keep anything like auth/connection juggling far away from the data modeling portions
[21:43:39] <RougeR> yeah it is extracted away
[21:43:54] <SnoopJ> well, maybe not "far" but I think you know what I mean
[21:43:59] <RougeR> there is a manager class which instantiates the client and ive got oauth clients/database models
[21:44:07] <RougeR> its all fairly well interfaced
[21:44:12] *** Quits: dld (~davidlowr@2601:197:600:1210:3c3c:cf45:60f2:8388) (Ping timeout: 245 seconds)
[21:44:23] <RougeR> its just the transform and what interfaces to call api endpoints with
[21:44:49] <RougeR> atm i have a say "list_user" function on my manager which then calls the relevant function in the api client class
[21:44:59] *** Parts: akk (~akk@174-28-98-206.albq.qwest.net) (+++)
[21:45:05] <RougeR> and then i want to be able to apply transforms after
[21:46:20] *** Joins: dld (~davidlowr@2601:197:600:1210:f4d9:1621:568b:bc19)
[21:46:31] *** Joins: junktext (~junktext@77.247.181.210)
[21:46:46] <RougeR> SnoopJ, yeah i was trying to figure out how to organize the data classes
[21:47:00] <RougeR> your way is interesting, i think its better than what i was  planning
[21:48:24] <RougeR> i was looking at having dataclasses for each integration/transform and then keying it in a dict lookup.
[21:48:37] *** Joins: plitter (~plitter@user/plitter)
[21:49:03] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[21:49:19] *** Quits: wrap_socket (~wrap_sock@87.200.253.194) (Ping timeout: 246 seconds)
[21:49:34] <plitter> are there any libraries for postgresql that you would recommend?
[21:49:40] *** Joins: jokoon (~eio@2a01:e0a:542:b20:3da2:ca44:66c6:d0f8)
[21:49:51] <jokoon> I have a list of tuples
[21:49:58] <RougeR> plitter, to do what
[21:50:04] <RougeR> sqlalchemy is my go to
[21:50:25] <jokoon> can I use list comprehension to only change one element of the tuples inside that list?
[21:50:25] *** Joins: logi (~quassel@83.229.86.115)
[21:50:40] <grym> jokoon: tuples are immutable
[21:50:45] <grym> jokoon: so you'll be making new ones
[21:50:48] <RougeR> ^
[21:50:52] <jokoon> grym, I know that
[21:50:58] *** logi is now known as Logi
[21:51:18] <plitter> RougeR: thanks, I'll check it out, is there any else that in your opinion is worth checking out?
[21:51:26] <jokoon> but those are very long tuples, I am obligated to write (a,b,c,d,e etc) ?
[21:52:38] <RougeR> plitter, are you looking for an ORM?
[21:52:48] <RougeR> or just something to make writing queries easier
[21:52:51] <grym> jokoon: there's probably a nicer way, but https://bpa.st/J5AA
[21:52:59] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:53:08] <grym> that's real simple and clear!
[21:53:40] <jokoon> thanks
[21:54:01] <jokoon> I thought there would a way to do this with list comprehension but that may be a lot to ask
[21:54:13] <plitter> RougeR: not really, it would be cool to expand my knowledge, but it is a bit of a hassle to set up for just updating/inserting things in tables :)
[21:54:13] *** Quits: daoudr (~daoudr@178.197.204.217) (Ping timeout: 252 seconds)
[21:54:50] <grym> jokoon: there probably is, but i don't think it would be amazingly readable
[21:55:01] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[21:55:24] <RougeR> plitter, mmm
[21:55:42] <RougeR> ive got something for you then
[21:56:35] <plitter> oooh lay it on me :)
[21:56:44] <RougeR> aye, 2 secs just  grabbing the links
[21:57:04] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:57:43] <RougeR> if you want a simple lightweight ORM then peewee has always had great reviews
[21:58:07] <RougeR> its very lightweight and the queries are very much sql like
[21:58:10] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 240 seconds)
[21:58:12] <RougeR> if you dont want an orm at all
[21:58:19] <RougeR> then i recommend
[21:58:20] <RougeR> https://github.com/psycopg/psycopg2
[21:58:21] <RougeR> +
[21:58:26] <RougeR> https://github.com/kayak/pypika
[21:58:52] <grym> sqlalchemy-core is also not an ORM
[21:59:00] <RougeR> that is a good  point grym
[21:59:17] <RougeR> sqlalchemy-core is well worth a look. used it a fair bit
[21:59:27] <RougeR> https://docs.sqlalchemy.org/en/14/core/
[21:59:48] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[21:59:49] *** Joins: weltio (~weltio@89.21.53.190)
[21:59:50] <plitter> https://www.sqlalchemy.org/features.html havent gotten to the doc yet :)
[21:59:51] <RougeR> you canalso combine any of these with pypika to add aditional functionaliy
[22:00:19] <RougeR> aye its a bit web2.0
[22:00:26] <plitter> awesome thanks :)
[22:00:39] <RougeR> but yeah, those should cover you for pretty much anything
[22:00:43] <RougeR> good luck
[22:00:54] <plitter> Much appreciated :)
[22:01:16] <RougeR> no worries, your only stumbling blocks with postgres will come with things like psql specific features/syntax
[22:01:17] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:01:26] <RougeR> full text search can be a pain for example
[22:01:35] <weltio> I want to write strings to a file in a buffered manner. but I want to hook into the actual on disk writing procedure - so, is there something liek buffer.write(...); onFlush(buffer, beforeFlushFunction)
[22:01:39] <RougeR> but there are ways of doing that in sqlalchemy and ive seeen way of building it in pypika
[22:01:40] *** Quits: zeden (~zeden@user/zeden) (Ping timeout: 240 seconds)
[22:01:56] <weltio> or do i have to impelemnt my own buffer?
[22:02:26] <plitter> good to know
[22:03:01] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[22:04:34] *** Joins: qlixed (~qlixed@181.45.80.239)
[22:04:52] *** Joins: mattil (~mattil@87-92-63-124.bb.dnainternet.fi)
[22:06:24] *** Joins: zeden (~zeden@user/zeden)
[22:08:17] *** Joins: fofoni (~fofoni@user/fofoni)
[22:09:04] <SnoopJ> weltio, what will your beforeFlushFunction do?
[22:10:41] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[22:11:01] *** Joins: zeden (~zeden@user/zeden)
[22:11:33] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[22:12:04] *** Joins: MrAlexBailey (~MrAlexBai@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[22:13:58] *** Joins: emiel (~emiel@a83-161-198-206.adsl.xs4all.nl)
[22:14:01] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[22:17:57] *** erica is now known as birb
[22:22:56] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[22:24:27] *** Quits: gusto (~Augustus@2620:149:e0:6003::72) (Quit: Textual IRC Client: www.textualapp.com)
[22:24:29] *** Joins: p-i- (~Ohmu@2403:6200:8870:41ad:ddbd:4a28:9a94:dc2)
[22:24:40] *** Quits: zaquest (~notzaques@5.128.210.178) (Ping timeout: 240 seconds)
[22:26:07] *** Joins: Betal (~Betal@user/betal)
[22:28:46] <RougeR> SnoopJ, hm im struggling on the design a bit
[22:28:47] *** Quits: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 245 seconds)
[22:28:51] *** Joins: zaquest (~notzaques@5.128.210.178)
[22:28:56] <p-i-> I'm trying to hit a URL through multiple proxies. But out of 111 proxies listed on https://sslproxies.org/ not one is returning a 200 on a fetch from http://httpbin.org/ip
[22:29:17] <p-i-> https://bpa.st/EFWA <- can anyone see if I'm doing something wrong?
[22:29:25] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:8590:a7d4:8fbd:995e) (Quit: Textual IRC Client: www.textualapp.com)
[22:29:41] <RougeR> ahh i g2g SnoopJ will try this again tommorow
[22:29:45] <p-i-> Is it that http://httpbin.org/ip is http-only and https://sslproxies.org/ is https only?
[22:30:03] <p-i-> Or should one of those proxies work on an http URL
[22:30:12] <RougeR> there is quite a high degree of transformation needed and conditional logic before it can go into a pydantic model or dataclass
[22:30:39] <RougeR> things like start_time  vs createTime and things like if this field is present else use this field
[22:30:48] <RougeR> afk
[22:30:56] <SnoopJ> RougeR, "if this field is present" sounds like different classes where a field is not Optional
[22:31:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:31:04] *** Quits: mattil (~mattil@87-92-63-124.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[22:31:23] <RougeR> SnoopJ, a  simple example would be the User again
[22:32:01] *** Joins: mattil (~mattil@87-92-63-124.bb.dnainternet.fi)
[22:32:08] <RougeR> email is a required field as is external_id but...first_name, last_name, nick_name, display_name
[22:32:10] <RougeR> are all optional
[22:32:21] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[22:32:28] <RougeR> and some  services may have a first_name but an optional last_name
[22:33:00] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[22:33:06] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[22:33:07] <RougeR> and if they dont have a display_name we should try to make one either using the nick_name or the first_name
[22:33:26] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[22:33:27] <RougeR> this example could probably be solved with a customer data loader tbh
[22:34:07] *** Quits: naan (~Naan@user/naan) (Ping timeout: 268 seconds)
[22:34:10] <RougeR> but there are more  complex examples like finding which email is the primary or trying to find who is the host of a meeting
[22:34:13] <RougeR> afk
[22:34:23] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:34:32] <p-i-> I can't find any URL that works for any of these proxies. Surely they can't all be defective...
[22:36:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:36:50] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:37:57] *** Joins: c4017w (~c4017@209.52.68.8)
[22:38:56] <matsaman> don't call me surely
[22:39:37] <jinsun> p-i-: `proxy = {'https': url}` but you the link is http
[22:40:11] <jinsun> I mean the link to the url not the proxy
[22:40:23] <p-i-> jinsun: I was pulling that from https://stackoverflow.com/questions/66642705/why-requests-raise-this-exception-check-hostname-requires-server-hostname
[22:40:51] <p-i-> That topic seems to be saying there's a bug (or something) in the latest requests version.
[22:41:36] *** Joins: naan (~Naan@user/naan)
[22:41:50] *** Joins: nergar (~Nergar@177.225.152.13)
[22:41:54] <p-i-> I get "check_hostname requires server_hostname" if I try using https in the proxy URLs.
[22:42:31] <p-i-> e.g. proxy = {'https': 'https://81.33.4.214:61711'}
[22:42:41] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[22:43:52] <jinsun> p-i-: you going in the wrong direction, change the key of the proxy dict to "http" instead of "https"
[22:44:07] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[22:44:32] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[22:44:50] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[22:45:09] *** Joins: palasso (~palasso@user/palasso)
[22:45:17] <p-i-> ah finally!
[22:46:09] <p-i-> Thanks! I tried that first, but must have had some other bug, and never cycled back to it.
[22:46:13] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[22:46:34] *** Joins: dukenukem3d (~BuggyGent@xdsl-89-1-60-145.nc.de)
[22:46:44] <dukenukem3d> Good Morning!
[22:48:40] <dukenukem3d> in C you can alter argv[0] with some call. Is that also possible with python? It's anoying every process is called 'python3'
[22:49:09] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[22:50:05] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:50:10] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 240 seconds)
[22:51:28] <jinsun> sys.argv[0] = "not_python" ?
[22:51:33] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:8208:62c2:1345:18fb) (Remote host closed the connection)
[22:51:47] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (Ping timeout: 245 seconds)
[22:51:57] <dukenukem3d> sounds like what I need... Will test that
[22:52:35] <KirkMcDonald> Mutating sys.argv doesn't actually mutate the name of the process.
[22:52:41] *** Quits: zingos (~zingos@46.101.6.21) (Quit: The Lounge - https://thelounge.chat)
[22:52:44] <KirkMcDonald> Since it's just a list.
[22:53:27] *** Joins: masoudd (~masoudd@user/masoudd)
[22:53:48] *** Joins: zingos (~zingos@46.101.6.21)
[22:54:49] <KirkMcDonald> There's some libc nonsense you can do for this, but another approach may be to have the script execve itself with a new name when it starts.
[22:55:48] <KirkMcDonald> There are probably third-party modules out there which do the libc nonsense.
[22:55:54] *** Quits: molt (~molt@79.140.150.21) (Read error: Connection reset by peer)
[22:56:18] *** Joins: molt (~molt@79.140.150.21)
[22:56:19] *** Quits: qlixed (~qlixed@181.45.80.239) (Ping timeout: 268 seconds)
[22:56:26] <jinsun> ah ok, dukenukem3d wanted task manager to show different names for different scripts? then defintely mutation sys.argv won't help
[22:56:31] <dukenukem3d> libc nonsense? I see. And execve can alter the "visible" name of the executable? I will read that
[22:56:44] <dukenukem3d> jinsun, just found out that :)
[22:57:33] <dukenukem3d> ..or the kernel killing the biggest program due to few ram. What program exactly? Everything is python in our embedded system LOL
[22:57:46] *** Quits: rsx (~dummy@ppp-188-174-130-209.dynamic.mnet-online.de) (Quit: rsx)
[22:57:55] <jinsun> I thought you just didn't like seeing python3 in sys.argv :D
[22:57:59] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[22:58:07] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:59:00] *** Joins: Akuli (~Akuli@82-203-162-212.bb.dnainternet.fi)
[22:59:07] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:59:07] *** Joins: deviantfero (~deviantfe@179.51.3.47)
[22:59:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:00:14] *** Quits: emiel (~emiel@a83-161-198-206.adsl.xs4all.nl) (Quit: WeeChat 3.2)
[23:00:27] <p-i-> I'm now trying to hit an https endpoint (https://bpa.st/EFWA is as good as any I guess), but I'm getting "{'https': 'http://217.11.66.170:3128'} No connection adapters were found for 217.11.66.170:3128"
[23:01:16] <p-i-> I tried with {'https': 'https://217.11.66.170:3128'} and {'https': 'http://217.11.66.170:3128'}
[23:01:22] <weltio> SnoopJ: e.g. compression
[23:01:39] <weltio> SnoopJ: modification in general
[23:02:48] <SnoopJ> weltio, why do the modifications need to happen at flush time?
[23:02:56] <SnoopJ> (as opposed to put-into-the-buffer time)
[23:05:06] *** MrAlexBailey is now known as Guest3392
[23:05:10] *** Joins: Adoi (~Adoi@user/adoi)
[23:06:19] *** Quits: Guest3392 (~MrAlexBai@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 246 seconds)
[23:06:35] <aphysically> should I just go ahead and rely on the atomicity of setting a boolean or can this bite me in 40 years in some hypothetical GIL-less python
[23:06:54] *** Joins: mikkel (~mike@208.110.120.167)
[23:08:10] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 240 seconds)
[23:09:03] <dukenukem3d> aphysically, are you trying to do thread-save programming with a simple boolean instead of with somelock.. ? DONT
[23:09:10] *** Quits: emika (~emika@185.207.249.163) (Ping timeout: 240 seconds)
[23:09:12] *** Joins: MrAlexBailey (~MrAlexBai@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[23:09:22] *** Joins: emika (~emika@83.136.182.41)
[23:09:59] *** Joins: y1n (~y1n@84-115-64-65.wifi.dynamic.surfer.at)
[23:10:23] <weltio> SnoopJ: odd question, but compression works more performant if you compress a buffer than single chars...
[23:10:48] <aphysically> no I'm using locks, I just have a bool for registering whether or not a status update exists so I can check it before printing to console then clear it
[23:11:01] <weltio> compress('a')+compress('b')...compress('z') is less performant than compress('ab...z')
[23:11:11] <aphysically> I could make it an event but there's really no need because I'm not actually waiting on the event, the console printing timing is separate from the updates
[23:11:18] <weltio> im talking about memory performance obviously :D
[23:11:25] <SnoopJ> weltio, what does that have to do with *flushing*?
[23:11:46] <aphysically> anyway I just protected the bool with a lock anyway it's trivial
[23:12:45] <stealth_> aphysically, if you think you are having issue with GIL you are probably doing something wrong. are you dealing with global variable between threads?
[23:13:02] <weltio> SnoopJ: is there somewhere an answer to the former question? flushing is the process of actually writing to disk - as long as disk is not written, uncompressed data is gathered...
[23:13:14] <weltio> when the buffer is full, its compresed and written to disk...
[23:13:26] <aphysically> mmm I don't think I have any GIL issues
[23:13:30] <weltio> or more generally: a callbackfunction is called...
[23:13:46] <bjs> aphysically: you can set it
[23:13:52] <SnoopJ> weltio, right, I'm not understanding why you care about the flush at all, the "gather a block" part is not dependent on that (OS/implementation) detail
[23:13:57] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[23:14:24] <SnoopJ> I'm not entirely sure if the io hierarchy lets you do something more than writing your own flush()
[23:14:28] <aphysically> I *do* have some threading questions though, I got bit yesterday in my threading experimentation when I was trying to make futures and then appending them to a list in a class for use later, but i ended up with some insanity where the futures were getting duplicated in a way I didn't understand
[23:14:57] <bjs> aphysically: https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe gives a list of operations that are explicitly atomic
[23:15:08] <weltio> SnoopJ: whats your suggestion?
[23:15:08] <bjs> and it includes plain assignment
[23:15:15] <aphysically> I think they are immutable or they change when they spawn something else I'm not sure what was going on, but just making the list inline instead of assigned to the class fixed the code
[23:15:30] <bjs> aphysically: is it possible you just explicitly copied them by mistake?
[23:15:31] <stealth_> list is thread safe
[23:15:40] <aphysically> bjs: is it an implementation detail of CPython or part of spec?
[23:15:49] <bjs> aphysically: or possibly used them in multiple places
[23:16:03] <aphysically> possible....it was 2 am so I threw up my hands and went to bed
[23:16:04] <bjs> aphysically: the spec
[23:16:21] <bjs> aphysically: then I'm going to guess that's what happened unless there's evidence otherwise :)
[23:16:23] <aphysically> I'll try to recreate a minimal example and see if I can figure out what went wrong
[23:16:28] <aphysically> soon (tm)
[23:16:34] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:17:27] *** Quits: feoh (~feoh@ec2-18-224-106-217.us-east-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[23:19:00] <SnoopJ> weltio, I don't have one yet because I don't know if you actually need to worry about flushing, or if you just want streaming compression. If it's the latter, then I'd think you want to do something like bz2.BZ2Compressor which provides compress() (returns a chunk or empty bytestring) and flush() (finalizes and returns whatever might be left in the internal buffer)
[23:19:09] <aphysically> I think that's something I can improve my understanding of more: when things are explicitly copied vs not
[23:19:13] <SnoopJ> and then the data from those would go on to whatever actually has to care about the disk
[23:19:16] *** Quits: Allegretto (~allegrett@94-21-231-38.pool.digikabel.hu) (Ping timeout: 256 seconds)
[23:20:03] <aphysically> bjs: I thought I had even tried just doing future = executor.submit(..), myclass.futurelist.append(future)
[23:20:06] <bjs> aphysically: explicitly? when you say copy.copy() or something
[23:20:13] <aphysically> then waiting on myclass.futurelist
[23:20:19] <aphysically> sorry not explicitly, just in general :P
[23:20:25] <bjs> aphysically: I mean I'm not going to comment on hypothetical outcomes from concurrent code that I cannot see
[23:20:33] <bjs> aphysically: in general? basically never
[23:20:33] *** Joins: qlixed (~qlixed@181.45.80.239)
[23:21:00] <dukenukem3d> Naming question: There are packages calling themselves python3-something. This obviously mean they CAN be run with python3. Or does it mean you NEED python3 to run it? I was thinking about it when naming own packages of cause! Is there a standard?
[23:21:01] <aphysically> append doesn't copy immutable things right? it's just a reference
[23:21:03] *** Joins: ali1234 (~al@user/ali1234)
[23:21:14] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[23:21:16] <SnoopJ> hmm, or zlib.Compress I guess. I don't know if this compress()/flush() interface has a name or anything like that.
[23:21:27] <bjs> aphysically: list.append doesn't even look at the type of the object at all,  yes it just keeps a reference
[23:21:48] <bjs> aphysically: if you find an example that has the weird behaviour i'm sure it can be explained easier than trying to enumerate all the features of the language :P
[23:22:18] <KirkMcDonald> SnoopJ: Not so far as I know.
[23:22:21] <aphysically> bjs: I'll try again here soon maybe andshow you
[23:22:30] <weltio> SnoopJ: compression is jsut a special case. I want general modification after "gathering time" and before "writingtime" - actually a callback on "flush" - whether flush is called on newline or filled buffer or whatever is not my concern
[23:23:10] *** Quits: deviantfero (~deviantfe@179.51.3.47) (Ping timeout: 240 seconds)
[23:23:10] *** Quits: zingos (~zingos@46.101.6.21) (Ping timeout: 240 seconds)
[23:25:00] <SnoopJ> weltio, I don't think I can offer any meaningful suggestions without a notion of why the data can't be prepared before it hits the OS boundary. I don't think there's anything more specific than IOBase.flush(), so you might need your own IO class.
[23:27:12] <SnoopJ> possibly io.BufferedWriter is a closer base
[23:27:47] <stealth_> weltio, do you have a link to code? also using IO flush like that is going to be very expensive (slow)
[23:30:26] *** Quits: lxdr (~lxdr@user/lxdr) (*.net *.split)
[23:30:26] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[23:30:26] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[23:30:27] *** Quits: welrmaron (~welrmaron@sigterm.xyz) (*.net *.split)
[23:30:27] *** Quits: arti (~arti@2001:bb8:4008:2020::f) (*.net *.split)
[23:30:27] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[23:30:27] *** Quits: ripdog (~quassel@user/ripdog) (*.net *.split)
[23:30:27] *** Quits: korros (~korros@li1845-92.members.linode.com) (*.net *.split)
[23:30:27] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[23:30:27] *** Quits: fxrs_ (~fxrs@192.227.212.130) (*.net *.split)
[23:30:27] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (*.net *.split)
[23:30:27] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (*.net *.split)
[23:30:27] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[23:30:27] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (*.net *.split)
[23:30:27] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[23:30:27] *** Quits: no_maam (~chat@gauss.datenzone.de) (*.net *.split)
[23:30:27] *** Quits: ThomasJ (~ThomasJ@user/thomasj) (*.net *.split)
[23:30:27] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[23:30:27] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[23:30:27] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[23:30:27] *** Quits: jor (~jor@jor.link) (*.net *.split)
[23:30:27] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[23:30:27] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[23:30:27] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[23:30:27] *** Quits: matiss (~matiss@almalinux/web/matiss) (*.net *.split)
[23:30:27] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[23:30:27] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[23:30:27] *** Quits: Wegge (~wegge@user/wegge) (*.net *.split)
[23:30:27] *** Quits: `rdvn (~rdvn@user/rdvn) (*.net *.split)
[23:30:27] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (*.net *.split)
[23:30:27] *** Quits: infernix (~nix@2a02:22a0:bbb1:d500::2) (*.net *.split)
[23:30:27] *** Quits: Neoon (~Neoon@2607:5300:60:23a5::1111) (*.net *.split)
[23:30:27] *** Quits: lorenzosu (~lorenzosu@user/lorenzosu) (*.net *.split)
[23:30:27] *** Quits: mgp (~quassel@quassel.woboq.com) (*.net *.split)
[23:30:27] *** Quits: Titore (Titore@user/titore) (*.net *.split)
[23:30:27] *** Quits: yemel (~yemel@user/yemel) (*.net *.split)
[23:30:27] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (*.net *.split)
[23:30:27] *** Quits: arza (arza@arza.us) (*.net *.split)
[23:30:27] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[23:30:27] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[23:30:27] *** Quits: BlackBishop (dexter@user/blackbishop) (*.net *.split)
[23:30:27] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[23:30:27] *** Quits: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b) (*.net *.split)
[23:30:27] *** Quits: Henryx (~ebianchi@2a01:4f8:1c0c:76ad::1) (*.net *.split)
[23:30:27] *** Quits: greyltc (~greyltc@user/greyltc) (*.net *.split)
[23:30:27] *** Quits: lericson (~toxik@user/lericson) (*.net *.split)
[23:30:27] *** Quits: Ennea (~Ennea@user/ennea) (*.net *.split)
[23:30:36] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[23:30:38] *** Joins: ripdog (~quassel@user/ripdog)
[23:30:38] *** Joins: Wegge (~wegge@user/wegge)
[23:30:54] *** Joins: arti (~arti@2001:bb8:4008:2020::f)
[23:31:04] *** Joins: deniska (~denis@user/deniska)
[23:31:07] *** Joins: jor (~jor@jor.link)
[23:31:19] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[23:31:25] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[23:31:26] *** Joins: deepy (deepy@user/deepy)
[23:31:26] *** Joins: dgw (dgw@sopel/admin/dgw)
[23:31:27] *** Joins: Henry151 (~bishop@user/henry151)
[23:31:27] *** Joins: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b)
[23:31:28] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:31:31] *** Joins: welrmaron (~welrmaron@sigterm.xyz)
[23:31:32] *** Joins: fxrs (~fxrs@192.227.212.130)
[23:31:34] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[23:31:54] *** Joins: Allegretto (~allegrett@78-131-16-239.pool.digikabel.hu)
[23:32:00] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Remote host closed the connection)
[23:32:05] *** Joins: Titore (Titore@user/titore)
[23:32:08] *** Joins: lorenzosu (~lorenzosu@user/lorenzosu)
[23:32:37] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[23:32:40] *** Joins: Ennea (~Ennea@user/ennea)
[23:32:45] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[23:33:01] *** Joins: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[23:33:11] *** Joins: ThomasJ (~ThomasJ@user/thomasj)
[23:33:15] *** Joins: mjsir911 (~bnc@user/mjsir911)
[23:33:18] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[23:33:21] *** Joins: _0ne (~one@user/0ne/x-2101768)
[23:33:38] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[23:33:43] *** Joins: yemel (~yemel@user/yemel)
[23:33:45] *** Joins: arza (arza@arza.us)
[23:33:45] *** Joins: lxdr (~lxdr@user/lxdr)
[23:34:28] *** Quits: MrAlexBailey (~MrAlexBai@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Quit: Client closed)
[23:35:05] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[23:35:34] *** Joins: lericson (~toxik@user/lericson)
[23:35:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[23:35:41] *** Joins: rdvn (~rdvn@user/rdvn)
[23:35:41] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:c745:6b49:e157:f17c)
[23:35:53] *** Joins: Koffa (jkohvakk@user/koffa)
[23:36:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:36:39] *** Joins: Auron (~Auron956@user/auron)
[23:38:39] <p-i-> Can anyone recommend a good https URL to use for testing against?
[23:39:29] <SnoopJ> p-i-, good how?
[23:39:30] <weltio> SnoopJ: would I have to use io.BufferedRandom since i have to read and write
[23:39:40] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[23:39:41] <weltio> stealth_: no, im implementing it...
[23:39:52] <SnoopJ> weltio, I have no idea, your requirements are unclear to me
[23:40:22] <weltio> stealth_: what do you mean? what do you assume does the os do when the buffer is full? effectively the same as flush!?
[23:40:32] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[23:40:44] <weltio> SnoopJ: i can not explain it in more detail i assume
[23:40:46] *** Quits: jokoon (~eio@2a01:e0a:542:b20:3da2:ca44:66c6:d0f8) (Quit: Leaving)
[23:40:54] *** Quits: dukenukem3d (~BuggyGent@xdsl-89-1-60-145.nc.de) (Quit: Leaving)
[23:40:57] <weltio> SnoopJ: it sounds pretty obvious to me
[23:41:00] *** Joins: s1b1 (~s1b1@user/s1b1)
[23:41:22] <cluelessperson> p-i-, testing what against?
[23:41:24] <weltio> have a buffer, write to it until its full, call a callback, start over with fresh buffer
[23:41:26] *** Joins: jokoon (~eio@2a01:e0a:542:b20:3da2:ca44:66c6:d0f8)
[23:41:32] <weltio> its not that difficult i think
[23:42:10] <jokoon> d1, d2 being dict, is this okay? : d1 = {**d1, **d2}
[23:43:01] <SnoopJ> weltio, that sounds like a completely different problem that has nothing to do with the OS boundary and disks, hence my confusion. Perhaps someone else will see what is obvious that I have missed and offer to help.
[23:43:35] <stealth_> weltio, flush ensures whatever you wrote is flushed to the disk and metadata is updated, doesn't mean you have to use it ever time you write! flush is automatically called when you close(fd), also there are data only flush.
[23:44:10] <weltio> stealth_: yeah, and I need a callback to be called right before that happens
[23:44:42] <AhmedAmerican> am struggling with Scrapy ItemLoader to stop ommit None values. someone have clue ?
[23:45:02] <stealth_> weltio, right before what happens?
[23:45:10] <cluelessperson> what's a single line way to iterate through the items in a linked list?
[23:45:19] <weltio> the buffer being written :D
[23:45:21] <weltio> stealth_:
[23:45:34] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 272 seconds)
[23:45:39] *** Joins: infernix (nix@spirit.infernix.net)
[23:45:50] <SnoopJ> cluelessperson, `for item in linked_list: do_something(item)`
[23:46:02] <SnoopJ> assuming the list has implemented __iter__
[23:46:08] <weltio> right before the buffer is written, it shall be replaced by the return of a callback with the buffer as argument
[23:46:15] <cluelessperson> ah, it has not implemented __iter__
[23:46:23] <cluelessperson> but that's probably the easiest way to go.
[23:46:43] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[23:47:08] <cluelessperson> SnoopJ, I'm thinking, for each in follow(seq, next):
[23:47:19] <cluelessperson> returning each item.
[23:47:45] <SnoopJ> cluelessperson, you could probably write an awful-looking generator comprehension that does it in one line. Is your editor charging you for every line you use?
[23:47:58] <cluelessperson> no. :P
[23:48:11] <cluelessperson> I just think there's probably an elegant way to do this
[23:48:21] <SnoopJ> the elegant way is to implement __iter__
[23:48:51] * cluelessperson squints rebelliously at SnoopJ 
[23:49:08] *** Quits: dibic (~sanil@2601:249:8080:58a0:4c89:2991:92d2:6427) (Quit: Konversation terminated!)
[23:49:38] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[23:50:16] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Ping timeout: 252 seconds)
[23:50:44] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:44cf:3126:f216:a81c)
[23:51:30] *** Joins: hyper_dave (~hyper_dav@197.156.103.172)
[23:52:30] <SnoopJ> `node = llst; do_something(node); while (node := node.next): do_something(node)` fits on one line, but isn't what I would call "elegant"
[23:52:40] <SnoopJ> there might be a less clumsy way to handle the first element, though
[23:54:07] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[23:54:07] <stealth_> weltio, you know you can set the buffer-size right? or disable it
[23:54:22] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:55:52] <p-i-> SnoopJ: For http I can use http://httpbin.org/ip, just looking for something like that for https
[23:56:04] <p-i-> Just to check if my proxy code is working ok
[23:56:05] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Quit: aead)
[23:56:25] *** Quits: y1n (~y1n@84-115-64-65.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[23:56:27] <SnoopJ> p-i-, python.org serves HTTPS, for instance.
[23:57:13] <SnoopJ> if you don't care about the data you could just try a HEAD request on any site that does, I think
[23:57:58] <cluelessperson> google.com  they can handle ceaseless bandwidth
[23:58:58] <p-i-> google block a lot of proxies tho'
[23:59:08] <jinsun> p-i-:  https://httpbin.org/ip ?
[23:59:32] <p-i-> haha
[23:59:38] <p-i-> That seems too easy
[23:59:47] <p-i-> thanks jinsun
