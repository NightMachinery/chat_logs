[00:00:20] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[00:03:37] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c736cb18d4b31450c12316ac.dip0.t-ipconnect.de)
[00:05:23] *** Joins: acidjnk_new (~acidjnk@p200300d0c74373762d98dd33bce98ac3.dip0.t-ipconnect.de)
[00:08:42] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c736cb18d4b31450c12316ac.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[00:08:43] *** Joins: zebrag (~chris@user/zebrag)
[00:12:48] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:14:21] *** Joins: cjb (~cjbayliss@user/cjb)
[00:14:42] *** Quits: jurjen (~jurjen@89-200-14-25.mobile.kpn.net) (Quit: WeeChat 3.0)
[00:15:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[00:20:22] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:23:14] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[00:25:05] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:25:24] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:25:30] *** Joins: ircbrowse_tom (~ircbrowse@static.162.49.55.162.clients.your-server.de)
[00:28:55] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[00:29:07] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:31:29] *** Quits: edwtjo (~edwtjo@user/edwtjo) (Quit: WeeChat 3.0)
[00:32:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 264 seconds)
[00:34:24] *** Quits: alx741 (~alx741@181.196.68.69) (Ping timeout: 268 seconds)
[00:36:28] *** Joins: edwtjo (~edwtjo@h-109-228-137-133.A213.priv.bahnhof.se)
[00:36:28] *** Quits: edwtjo (~edwtjo@h-109-228-137-133.A213.priv.bahnhof.se) (Changing host)
[00:36:28] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[00:36:49] *** Quits: kuribas (~user@ptr-25vy0i7llzyvxfc43ot.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[00:40:23] *** Quits: Guest6622 (~Guest66@catv-89-134-211-102.catv.broadband.hu) (Quit: Client closed)
[00:43:46] *** Joins: mastarija (~mastarija@2a05:4f46:e06:ff00:9df8:7c4a:6bea:1e5a)
[00:43:54] <[itchyjunk]> Hi, slightly offtopic link https://www.cambridge.org/core/blog/2021/11/11/journal-of-functional-programming-moving-to-open-access/
[00:44:16] <[itchyjunk]> I don't have stomach for reading papers especially FP papers but there must be people who can digest it!
[00:47:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[00:48:22] *** Joins: alx741 (~alx741@181.196.68.69)
[00:52:11] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:54:18] <tomsmeding> yay!
[00:54:56] *** Quits: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:55:14] *** Joins: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de)
[00:57:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:57:56] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[01:01:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:02:05] <tomsmeding> [exa]: I suddenly realise that your regex lib request was for adiff
[01:11:27] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:14:06] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[01:18:17] <[exa]> tomsmeding: precisely
[01:18:18] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[01:18:26] <[exa]> it's a bit on hold
[01:18:38] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:18:40] <[exa]> :]
[01:20:47] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[01:20:47] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 264 seconds)
[01:21:22] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:23:01] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 245 seconds)
[01:23:22] *** Joins: slack1256 (~slack1256@186.11.4.84)
[01:26:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[01:26:34] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[01:28:27] *** Quits: slack1256 (~slack1256@186.11.4.84) (Ping timeout: 265 seconds)
[01:29:45] *** Quits: mastarija (~mastarija@2a05:4f46:e06:ff00:9df8:7c4a:6bea:1e5a) (Quit: Leaving)
[01:34:00] *** Joins: jbox (~jbox@user/jbox)
[01:36:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[01:39:41] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 245 seconds)
[01:48:12] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:48:37] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[01:49:21] <yin> @type flip id
[01:49:22] <lambdabot> b -> (b -> c) -> c
[01:49:28] *** Joins: cheater (~Username@user/cheater)
[01:49:31] <energizer> which other languages have `where`?
[01:49:50] <yin> ^ can anybody quickly help me wrap my head around this?
[01:50:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:51:05] <[exa]> yin: do you know how substitutions and unifications work?
[01:51:22] <yin> not formally but i got the intuition
[01:51:23] <monochrom> Specialize id to (b->c)->(b->c) = (b->c)->b->c, which is ($).
[01:51:31] <[exa]> yin: in short, you have: id :: x->x;  flip :: (a -> (b -> c)) -> b -> (a -> c)
[01:51:58] <[exa]> then you need to make x -> x fit into the first parameter, so you got equation x->x == a->(b->c)
[01:52:10] <[exa]> in turn you'll get a == x == b->c
[01:52:26] <yin> (b -> c) -> b -> (x -> x) -> c
[01:52:27] <yin> ?
[01:52:47] <yin> ah no
[01:52:50] <yin> ok i got it
[01:52:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:53:00] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:53:12] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:53:18] <[exa]> first step you solve x->x == a->(b->c) because you need to smash the `id` into the first argument
[01:53:20] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[01:53:37] <[exa]> solution of a symbolic equation is a substitution of variables that makes the sides equal
[01:53:46] <yin> yeah it clicked
[01:53:50] <yin> thanks
[01:54:05] <yin> i'm tired
[01:54:08] <sshine> x -> x   =   a -> b -> c,   so that is when a = x, and (b -> c) = x.
[01:54:10] <[exa]> (you can wiki "robinson unification" btw, the process is surprisingly straightforward) :]
[01:54:32] <[exa]> anyway, just to finish that, you'll eventually get a fact that a==(b->c)
[01:54:46] <EvanR> energizer, SQL? xD
[01:54:55] <energizer> elixir, apparently
[01:54:59] <[exa]> which should lead to final flip id :: b -> ((b->c) -> c)
[01:55:03] <geekosaur> what variety of `where`?
[01:55:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[01:55:16] <[exa]> EvanR: rofl
[01:55:38] <geekosaur> if you mean where blocks, they exist but are not especially common. I couldn't name any off the top of my head though
[01:56:31] <energizer> https://hexdocs.pm/elixir/guards.html#where-guards-can-be-used
[01:57:15] <energizer> what's the other kind of where in haskell?
[01:57:20] <[exa]> julia has a where keyword for type constraints
[01:57:55] <[exa]> and then there's the SPARQL where but let's not open that box
[01:58:19] <geekosaur> `where` has multiple meanings in haskell. consider `module Foo where`, `class Foo a where`, etc.
[01:58:47] <geekosaur> syntactically they all have the same form, but have varied meanings
[01:58:47] <yin> are we talking about a "where" keyword, or just syntactic sugar for closures in general?
[01:59:17] <[exa]> sugary still a keyword though
[02:09:04] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[02:09:53] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[02:13:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[02:14:15] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[02:14:48] *** cads is now known as DoseMeBoofy
[02:19:14] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[02:21:22] *** Joins: fuzzypixelz (~fuzzypixe@tchebychev.ensimag.fr)
[02:21:30] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[02:21:42] *** Quits: Guest43 (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 268 seconds)
[02:21:47] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (Quit: ZNC 1.8.2 - https://znc.in)
[02:21:50] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[02:22:05] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[02:24:46] *** Joins: zaquest (~notzaques@5.130.79.72)
[02:28:27] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[02:28:39] *** Parts: yin (~z@user/zero) ()
[02:30:05] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:35:16] *** Quits: gawen (~gawen@user/gawen) (Ping timeout: 268 seconds)
[02:37:08] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:38:17] *** Joins: gawen (~gawen@user/gawen)
[02:39:58] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[02:44:27] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[02:44:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[02:44:29] *** allbery_b is now known as geekosaur
[02:50:11] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[02:50:21] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[02:52:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:56:28] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:58:18] *** Joins: AlexNoo_ (~AlexNoo@178.34.150.115)
[03:00:41] *** Quits: AlexZenon (~alzenon@178.34.163.122) (Ping timeout: 250 seconds)
[03:01:46] *** Quits: AlexNoo (~AlexNoo@178.34.163.122) (Ping timeout: 256 seconds)
[03:02:11] *** Quits: Alex_test (~al_test@178.34.163.122) (Ping timeout: 264 seconds)
[03:02:55] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[03:04:53] *** Joins: AlexZenon (~alzenon@178.34.150.115)
[03:05:10] *** Quits: alx741 (~alx741@181.196.68.69) (Ping timeout: 256 seconds)
[03:05:53] *** Joins: Alex_test (~al_test@178.34.150.115)
[03:06:06] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[03:07:11] *** Joins: gawen (~gawen@user/gawen)
[03:11:20] *** Quits: max22- (~maxime@2a01cb088335980063a544fa463a8015.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:14:21] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:16:36] *** Joins: slice (~slice@user/slice)
[03:16:46] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:17:16] *** Joins: jrm (~jrm@156.34.187.65)
[03:18:50] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 260 seconds)
[03:19:34] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:19:59] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[03:20:21] *** Joins: olibiera (~olibiera@a85-138-214-194.cpe.netcabo.pt)
[03:20:56] *** Quits: Alleria (~textual@user/alleria) (Ping timeout: 245 seconds)
[03:21:32] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[03:22:42] <olibiera> hello guys, is there any easy way to turn a string that is a math expression (ex: "4*3") in the result (12)
[03:22:52] <olibiera> ?
[03:23:36] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:24:03] <dsal> olibiera: you write a parser and evaluate the result.
[03:24:13] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[03:24:19] *** Joins: gawen (~gawen@user/gawen)
[03:24:26] <dsal> So, yeah, pretty easy, but you have to do some of the work.
[03:25:06] <olibiera> my english is not really good, can u explain what a parser is pls
[03:25:42] <dibblego> A parser for things is a function from strings to lists of pairs of things and strings.
[03:26:13] <olibiera> oh k ty :)
[03:27:44] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:28:12] *** Joins: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99)
[03:28:58] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:30:30] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[03:32:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:34:32] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[03:38:50] *** Joins: gawen (~gawen@user/gawen)
[03:41:41] *** Quits: olibiera (~olibiera@a85-138-214-194.cpe.netcabo.pt) (Quit: Client closed)
[03:43:31] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[03:46:15] *** Quits: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99) (Read error: Connection reset by peer)
[03:46:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[03:48:16] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[03:49:28] <dibblego> the book Programming in Haskell, Graham Hutton — has an example of a parser
[03:49:49] *** Joins: alx741 (~alx741@181.196.68.69)
[03:52:58] *** Quits: acidjnk_new (~acidjnk@p200300d0c74373762d98dd33bce98ac3.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[03:56:40] <Axman6> who runs yahb again? I was looking for the custom sandbox thing it runs in
[03:57:16] <Axman6> nevermind, I found both answers in my browser history
[03:57:21] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[03:59:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[04:00:02] <geekosaur> haskell is a compiled language, like c and c++ are compiled languages. none of them gives you a simple "here's an expression in a string, compute it and give me the result" function; that's something interpreters do
[04:00:05] <monochrom> I think mniip runs yahb.
[04:00:09] <geekosaur> yeh
[04:00:15] <geekosaur> but they got the answer already
[04:00:34] <monochrom> I didn't read completely, oops, heh.
[04:01:21] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:02:13] <geekosaur> anyway there is a way to get that functionality with ghc, but (a) it's somewhat painful (b) it involves linking the whole compiler into your program just to evaluate the expression
[04:02:28] <geekosaur> this is not usually what you're looking for
[04:02:48] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:06:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:07:13] *** Joins: slice (~slice@user/slice)
[04:07:16] *** Quits: mmhat (~mmh@55d47fa1.access.ecotel.net) (Quit: WeeChat 3.3)
[04:07:35] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[04:09:05] <c_wraith> It's way worse than just linking in the compiler - you also need the .hi files for every library you want.
[04:12:44] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[04:16:51] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[04:17:11] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[04:18:38] <Henson> is there some way for a person to find a Haskell project that needs volunteer coders?  I don't program in Haskell for my job and don't want my Haskell skills to get too rusty, so I'd like to have excuses to code.  I've tried doing Advent Of Code challenges for fun, but the headache-to-coding ratio is too high for it to be enjoyable.
[04:19:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[04:21:45] <geekosaur> look for Haskell projects on github?
[04:22:25] *** Quits: anna_user2_ (~anna_user@207.181.251.46) (Quit: Leaving)
[04:22:36] <geekosaur> mostly the ones that show recent activity
[04:23:02] <geekosaur> (or gitlab, darcsden, etc.)
[04:23:19] *** Joins: hololeap_ (~hololeap@user/hololeap)
[04:23:21] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[04:29:04] <energizer> does recursion get rewritten to foldr under the hood? (or vice versa)
[04:29:17] <Henson> geekosaur: thanks!
[04:29:48] <geekosaur> "recursion" is a broad brush
[04:30:12] <energizer> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#takeWhile vs `takeWhile f = foldr (\x acc -> if f x then x : acc else []) []` 
[04:30:47] <sm> Henson: people ask this periodically on /r/haskell, not sure how to find those threads
[04:31:38] <geekosaur> there are simple maps, there are folds, there are traversals, there are _un_folds, etc.
[04:31:52] <sm> those of us who see it sometimes reply. Most FOSS projects welcome coders, hledger is one
[04:32:24] <Henson> sm: cool, thanks for the suggestion!
[04:33:35] <energizer> does one of those two functions get converted into the other under the hood?
[04:37:26] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 265 seconds)
[04:39:14] *** Quits: alx741 (~alx741@181.196.68.69) (Ping timeout: 256 seconds)
[04:40:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20) (Remote host closed the connection)
[04:41:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20)
[04:42:18] *** Joins: mimmy (~mimmy@45.14.195.121)
[04:47:21] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:48:35] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[04:50:25] <geekosaur> energizer, no
[04:50:56] <geekosaur> there are, iirc, 16 fundamental "recursion schemes". in practice only a handful are useful, so they are the predefined ones
[04:51:16] <geekosaur> but you don't use a fold when you want a map, and you don't use a map when you want a fold
[04:51:40] <geekosaur> moreover, there's two different folds, depending on how you want your function to associate
[04:53:11] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 264 seconds)
[04:53:57] *** Joins: alx741 (~alx741@181.196.68.87)
[04:58:45] <energizer> those two implementations are different ways of writing the same thing, but i guess ghc doesnt care about that
[04:59:16] <geekosaur> hm?
[04:59:32] <geekosaur> > foldl f z [a,b,c]
[04:59:33] <lambdabot>  f (f (f z a) b) c
[04:59:43] <geekosaur> > foldr f z [a,b,c]
[04:59:45] <lambdabot>  f a (f b (f c z))
[04:59:51] <energizer> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#takeWhile vs `takeWhile f = foldr (\x acc -> if f x then x : acc else []) []` 
[05:01:22] <energizer> i see, you were responding to a different question than i thought you were
[05:01:24] *** hololeap_ is now known as hololeap
[05:01:38] <energizer> by "those two functions" i meant those two `takeWhile`s
[05:03:34] <EvanR> you can view the core output for any two versions of some function to see what ghc may think
[05:03:51] <geekosaur> also keep in mind that in Haskell, you get different laziness behavior from different ways of doing things. the foldr definition is lazier than the one actually used
[05:05:15] <geekosaur> strictness vs. laziness has consequences in terms of memory usage and performance, among other things
[05:08:05] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c006-e1aa-bb8d-1172.res6.spectrum.com)
[05:08:15] <unit73e> I never bothered profiling in haskell
[05:08:20] <unit73e> but maybe I should
[05:08:48] <geekosaur> depends on what you're doing. I've never found it necessary but I'm not e.g. building high volume webservers
[05:09:17] <unit73e> i'm builign a game engine so it could be useful
[05:09:23] <unit73e> building*
[05:09:41] <unit73e> seems ghc already has decent tools for it
[05:10:07] <unit73e> for web servers it's not necessary on any framework. just add more metal
[05:10:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:11:23] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[05:12:47] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[05:14:06] <energizer> ...that is a recipe for spending a lot of money unnecessarily
[05:14:46] <energizer> and getting poor latency no matter how much you spend
[05:15:36] <unit73e> there are some optimizations that can be done with web servers but it's mostly in databases or making it more scalable
[05:15:39] <unit73e> and that's rare
[05:15:49] <unit73e> only giant companies do that
[05:16:47] <geekosaur> trust me, getting your laziness/strictness wrong can cost you a *lot*
[05:16:48] <energizer> that's really not right
[05:17:11] <energizer> lots of people care about performance without being giant companies
[05:17:19] <unit73e> laziness/stricness wrong does cost a lot
[05:17:24] <geekosaur> and throwing money or hardware at the problem is not a fix, it's a bandage
[05:17:37] <unit73e> yes and yet that's what medium companies do
[05:17:44] <unit73e> because they don't understand the problem
[05:17:54] <unit73e> I've seen it time and time again
[05:18:14] <geekosaur> yes, I know. :( (I'm an ex-sysadmin, I've seen too much of this)
[05:19:53] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 264 seconds)
[05:20:37] <unit73e> from my experience the biggest problem in webservers is bottlenecks and that's because of a mix of imutable design that popular languages are only picking up right now and mutable code that isn't really good for distributed systems ending up being the bottleneck
[05:21:22] <unit73e> it's as if you'r seeing everyone slowly moving in the same micro-services without understanding why it matters
[05:21:38] <unit73e> and failing at it btw
[05:21:49] <unit73e> fun times
[05:21:54] <geekosaur> yep
[05:23:37] * davean hides his 100kqps/core Haskell webservice
[05:26:28] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[05:34:26] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[05:41:16] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[05:42:30] <a6a45081-2b83> @hoogle (a -> m b) -> Map k a -> m (Map k b)
[05:42:31] <lambdabot> No results found
[05:44:33] <dsal> @hoogle traverseWithKey
[05:44:33] <lambdabot> Data.IntMap.Internal traverseWithKey :: Applicative t => (Key -> a -> t b) -> IntMap a -> t (IntMap b)
[05:44:33] <lambdabot> Data.IntMap.Lazy traverseWithKey :: Applicative t => (Key -> a -> t b) -> IntMap a -> t (IntMap b)
[05:44:33] <lambdabot> Data.IntMap.Strict traverseWithKey :: Applicative t => (Key -> a -> t b) -> IntMap a -> t (IntMap b)
[05:45:09] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[05:50:06] *** Joins: pop3 (~pop3@user/pop3)
[05:50:17] *** Joins: mud (~mud@user/kadoban)
[05:52:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:56:55] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[05:57:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:02:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:03:25] *** Joins: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab)
[06:05:39] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:06:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a5dd:80a5:c74b:fea5)
[06:07:38] *** Joins: slaydr (~seriley@97-120-85-233.ptld.qwest.net)
[06:07:59] *** Quits: gg (~gg@2a01:e0a:819:1510:9018:293a:5d7d:4597) (Remote host closed the connection)
[06:09:56] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:15:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 245 seconds)
[06:21:35] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7900:8288:e51a:352c:7fbc) (Ping timeout: 268 seconds)
[06:23:02] *** Joins: xff0x (~xff0x@2001:1a81:52ee:6600:5c66:cf47:7ae9:a061)
[06:23:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:23:29] <perrierjouet> hi all
[06:23:42] <perrierjouet> is it normal few packages install take 4 GB ?
[06:24:27] <perrierjouet> stack setup, stack install hakyll, already 4 gb install size
[06:25:17] <sm> perrierjouet: 4 seems more than one GHC version and package set would normally take, but yes it's normal
[06:25:19] <geekosaur> hakyll has a lot of dependencies, and the transitive dependency list is even larger
[06:25:25] <sm> one package depends on a hundred others
[06:25:41] <sm> stack-clean-old is a good tool for cleaning up
[06:26:04] <geekosaur> and if you're using stack it may have installed a new ghc for you at the same time
[06:26:55] <perrierjouet> I am on archlinux so I removed ghc from system installer before
[06:28:12] <perrierjouet> will it be slow if I move my home direcotry to another pc ? and have .stack => /mnt/second-pc/homeX/.stack ? is it ok or haskell will be slow ?
[06:29:20] <geekosaur> that may be worse than slow, it might break. stack and cabal are both pretty sensitive about their stores
[06:29:47] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[06:30:07] <geekosaur> and especially if that's a remote mount, yes, things are likely to be slow
[06:32:01] <perrierjouet> ok
[06:32:14] *** Joins: evan (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f)
[06:32:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:32:23] *** evan is now known as Guest8716
[06:33:22] *** Joins: mbuf (~Shakthi@223.184.58.239)
[06:34:32] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[06:34:45] *** Quits: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:37:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:39:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a5dd:80a5:c74b:fea5) (Ping timeout: 264 seconds)
[06:41:11] *** Joins: Cajun (~Cajun@user/cajun)
[06:43:49] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:43:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:43:49] *** finn_elija is now known as FinnElija
[06:45:23] *** Quits: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[06:45:40] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:46:57] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c006-e1aa-bb8d-1172.res6.spectrum.com) (Quit: Konversation terminated!)
[06:47:47] *** Quits: mimmy (~mimmy@45.14.195.121) (Ping timeout: 264 seconds)
[06:49:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:49:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:49:22] *** Joins: wroathe (~wroathe@user/wroathe)
[06:49:51] *** Joins: fuzzypixelz_ (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[06:50:58] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[06:53:39] *** Quits: fuzzypixelz (~fuzzypixe@tchebychev.ensimag.fr) (Ping timeout: 268 seconds)
[06:53:49] *** Joins: mimmy (~mimmy@45.14.195.121)
[06:54:16] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 245 seconds)
[07:04:13] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[07:04:45] *** Joins: hiruji (~hiruji@user/hiruji)
[07:06:06] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[07:07:49] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:12:35] *** Quits: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f) (Ping timeout: 265 seconds)
[07:13:21] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[07:15:25] *** Quits: slaydr (~seriley@97-120-85-233.ptld.qwest.net) (Remote host closed the connection)
[07:15:38] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[07:15:49] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[07:18:09] *** Joins: cjb35394 (~cjbayliss@user/cjb)
[07:18:19] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:20:20] *** Quits: cjb (~cjbayliss@user/cjb) (Ping timeout: 260 seconds)
[07:23:23] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:23:43] *** cjb35394 is now known as cjb
[07:28:35] *** Quits: td_ (~td@muedsl-82-207-238-006.citykom.de) (Ping timeout: 264 seconds)
[07:29:57] *** Joins: td_ (~td@muedsl-82-207-238-041.citykom.de)
[07:30:48] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[07:36:16] *** Quits: cjb (~cjbayliss@user/cjb) ()
[07:41:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:43:03] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:45:56] *** Joins: blackcap (~blackcap@144.89-10-135.nextgentel.com)
[07:47:40] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[07:49:11] *** Quits: akspecs__ (~akspecs@user/akspecs) (Ping timeout: 246 seconds)
[07:49:35] *** Joins: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net)
[07:49:35] *** Quits: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net) (Changing host)
[07:49:35] *** Joins: akspecs__ (~akspecs@user/akspecs)
[07:51:23] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 264 seconds)
[07:51:49] *** Quits: glguy (x@libera/staff/glguy) (Quit: Quit)
[07:52:01] *** Joins: glguy (x@libera/staff/glguy)
[07:52:14] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:53:08] <blackcap> This sucks: http://termbin.com/dwhh
[07:53:24] <blackcap> There are 65 instructions with more than 1 arity
[08:01:26] <blackcap> .. and roughly 4k instructions total
[08:02:11] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[08:06:13] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Quit: Konversation terminated!)
[08:08:06] *** Joins: dajoer (~david@user/gvx)
[08:14:05] *** Joins: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f)
[08:18:59] *** Quits: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f) (Ping timeout: 264 seconds)
[08:24:46] *** Quits: mimmy (~mimmy@45.14.195.121) (Ping timeout: 256 seconds)
[08:32:48] <Axman6> what's the problem?
[08:33:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:34:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[08:34:47] <Axman6> is there not a way to abstract over the argument types? like adc :: (RegOrMem a, RegOrMem b) => a -> b -> ASM ()
[08:35:11] <Axman6> , maybe not
[08:35:11] <blackcap> yes
[08:36:01] <Axman6> at feels like some of this could be stored in a table
[08:36:14] <Axman6> but... this is x86 right? x86 is gross :P
[08:36:18] <blackcap> I'm sure I could use typeclasses in many cases, but there are exceptions to everything
[08:37:12] <blackcap> yeah it's x86
[08:37:36] *** Joins: sagax (~sagax_nb@user/sagax)
[08:37:50] <blackcap> and this gunk is generated from a table, I just want a nice dsl
[08:37:56] <Axman6> it sort of looks like there's 10 things that need to be encoded for each instruction, which makes me feel like you could represent each instruction as a 10-tuple, and at least then it would be more compact
[08:39:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[08:39:41] <Axman6> data Needed a = N | Val a; adc_al_imm8 = (N,N,N,N,N, Val (opcode 0x14), N, Val (\a b -> disp_imm arg1 a), N)
[08:39:56] <Axman6> I guess opcode is needed for all instructions
[08:40:14] <Axman6> omg, this file is enormous
[08:40:19] *** Joins: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99)
[08:41:00] <blackcap> It's only like 1/3rd of it- it got cut off
[08:41:23] <Axman6> like, those comments are nice, but they don't tell the compiler anything useful - you should attempt to make the compiler work for you
[08:42:17] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[08:42:27] <blackcap> I guess I could have a 10-tuple and use template haskell to generate the code
[08:43:40] <blackcap> but I still need to generate the functions, preferably with comments, and it doesn't solve the argument problem
[08:46:06] <aegon> when sending strings over the network (ascii only so no unicode to worry about, non user generated) is it normal to append the null byte at the end cstyle or leave that up to the consumer to figure out
[08:47:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:47:28] <aegon> i'm thinking non-null terminated over the wire
[08:47:48] <Axman6> your choises are something like netstrings, which send their length and then content or null terminated. I would usually prefer the former
[08:48:12] <Axman6> choices*
[08:49:15] <aegon> yeah, i can rely on zeromq's frames to deal with lenght. i just need to double check that the way i'm serializing from ByteString.Char8 is not appending a null, digging into docs
[08:49:43] <aegon> wanted to make sure i wasn't commiting sacrilige by not appending a null
[08:51:43] <Axman6> nah
[08:54:31] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[08:56:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:57:22] <aegon> it doesn't look like ByteString.Char8 pack appends a null but it might depend on whether String is null terminated or not im having trouble finding packChars definition
[08:58:54] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[09:00:26] <aegon> aand, doesn't look like it is nor are Strings null terminated, i can't find the docs on it but from playing around in ghci it looks like a string has no special null things implicit
[09:00:26] *** Quits: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99) (Read error: Connection reset by peer)
[09:00:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[09:02:02] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:02:41] <aegon> i should have just read ByteStrings docs instead of deep diving, its pretty clear on all this :X
[09:03:16] <aegon> heh, its also late, that could hardly be called a 'deep dive' oy. Thanks for the sanity check Axman6 
[09:03:30] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:03:44] *** Joins: slice (~slice@user/slice)
[09:03:46] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 268 seconds)
[09:04:28] *** Joins: img (~img@user/img)
[09:06:15] *** Quits: slice (~slice@user/slice) (Client Quit)
[09:07:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[09:19:18] <Axman6> blackcap: I don't suppose there is a machine readable definition of x86 instructions you could generate this Haskell from is there?
[09:21:24] <blackcap> It's generated from a csv file: https://github.com/StanfordPL/x64asm
[09:21:27] <blackcap> Axman6: 
[09:23:55] <Axman6> all good then! what's to worry about? :P
[09:26:21] <blackcap> well, I just hate that I have to write `adc_al_imm8 foo bar`
[09:27:46] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[09:27:56] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[09:28:11] *** Quits: yaroot (~yaroot@47.70.30.125.dy.iij4u.or.jp) (Quit: The Lounge - https://thelounge.chat)
[09:28:57] *** Joins: yaroot (~yaroot@47.70.30.125.dy.iij4u.or.jp)
[09:31:07] *** Joins: Guest80 (~Guest80@pd9ed7c28.dip0.t-ipconnect.de)
[09:31:12] *** Joins: slice (~slice@user/slice)
[09:32:38] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[09:33:00] <blackcap> it's not always the case that an instruction supports every kind of, say, register
[09:33:12] <blackcap> nor that every variant has the same arity
[09:34:35] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[09:37:55] <opqdonut> could you just have every instruction be a type class, with instances for tuples of arguments it supports?
[09:37:58] <Axman6> you could have class Add a b where add :: a -> b -> ASM (), and then make instances for all the legal ones which use those definitions - at least then you can write add Al (Imm8 0x7)
[09:38:27] <opqdonut> `class Add args where add :: args -> ASM ()` to support variable arities
[09:38:48] <opqdonut> and then `add (Al,Imm8 0x7)` or so
[09:39:07] *** Joins: wei2912 (~wei2912@138.75.71.147)
[09:43:28] <blackcap> also I could do `class Add arg r where add :: arg -> r` and write instances where `r` is `(->)` similar to printf
[09:44:09] <blackcap> I'm worried about type inference and speed though
[09:44:22] <blackcap> there are roughly 4k instructions
[09:46:43] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[09:48:04] <opqdonut> you could group the instructions into classes by similar signatures
[09:48:38] <opqdonut> the only way to know if there's a performance issue is to measure, I wouldn't be worried since each class is so small (in terms of methods & number of instances)
[09:49:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:56:47] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:57:43] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[09:58:02] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[10:00:30] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 268 seconds)
[10:04:09] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:04:20] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[10:05:07] *** Joins: img (~img@user/img)
[10:13:37] <Axman6> depends on what sort of performance you care about too - compile time or runtime. I would guess in this case probably compile time might actually matter more
[10:16:21] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:17:30] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[10:18:32] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:19:13] *** Joins: img (~img@user/img)
[10:20:14] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 268 seconds)
[10:24:37] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[10:25:24] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:25:59] <blackcap> I hope compile-time gets better once it's a compiled library
[10:28:39] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[10:28:39] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[10:28:39] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[10:28:39] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[10:28:39] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[10:28:39] *** Quits: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (*.net *.split)
[10:28:39] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[10:28:39] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (*.net *.split)
[10:28:39] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[10:28:39] *** Quits: liskin (~liskin@xmonad/liskin) (*.net *.split)
[10:28:39] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[10:28:40] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[10:28:40] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[10:28:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[10:28:46] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[10:28:47] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[10:28:52] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[10:28:57] *** Joins: samebchase (~thelounge@51.15.68.182)
[10:29:01] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[10:29:02] *** Joins: asm (~alexander@burner.asm89.io)
[10:29:06] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[10:29:06] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[10:29:08] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[10:29:11] *** Joins: oxytocat (~alloca@2a03:4000:f:7ca:7407:d1ff:fe34:8cd0)
[10:29:12] *** Joins: liskin (~liskin@ackle.nomi.cz)
[10:29:16] *** Quits: oxytocat (~alloca@2a03:4000:f:7ca:7407:d1ff:fe34:8cd0) (Signing in (oxytocat))
[10:29:16] *** Joins: oxytocat (~alloca@user/suppi)
[10:29:23] <blackcap> run-time doesn't matter terribly much, `ASM` here is just `Accum (Endo [Byte])`
[10:29:24] *** Quits: liskin (~liskin@ackle.nomi.cz) (Signing in (liskin))
[10:29:24] *** Joins: liskin (~liskin@xmonad/liskin)
[10:29:33] *** Joins: Raito_Bezarius (~Raito@2a01:e0a:5f9:9681:1c66:fc75:c47c:31bc)
[10:29:41] *** Joins: ringo__ (~ringo@157.230.117.128)
[10:29:43] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:29:55] *** Joins: img (~img@user/img)
[10:30:41] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[10:32:16] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[10:32:41] *** Joins: pavonia (~user@user/siracusa)
[10:32:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[10:32:52] <Axman6> have you considered using Accum Builder? 
[10:33:46] <Axman6> Endo [Byte] is, like, super wasteful
[10:34:14] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[10:34:22] *** Quits: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1) (*.net *.split)
[10:34:22] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[10:34:22] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[10:34:22] *** Quits: cawfee (~root@2406:3003:2077:2758::babe) (*.net *.split)
[10:34:22] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (*.net *.split)
[10:34:23] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[10:34:23] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[10:34:23] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[10:34:23] *** Quits: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0) (*.net *.split)
[10:34:23] *** Quits: averell (~averell@user/averell) (*.net *.split)
[10:34:23] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[10:34:23] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[10:34:23] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[10:34:23] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[10:34:23] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (*.net *.split)
[10:34:34] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[10:34:34] *** Joins: hays (rootvegeta@fsf/member/hays)
[10:34:37] *** Joins: landonf (landonf@mac68k.info)
[10:34:38] *** Joins: averell (~averell@user/averell)
[10:34:41] *** Joins: cawfee (~root@2406:3003:2077:2758::babe)
[10:34:42] <Axman6> like, each Byte would take up...like 5 words in memory, at least
[10:34:42] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[10:34:50] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[10:34:54] *** Joins: sajith_ (~sajith@user/sajith)
[10:34:54] *** Joins: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0)
[10:34:54] *** Joins: Hafydd (~Hafydd@user/hafydd)
[10:34:57] *** Joins: derelict (~derelict@user/derelict)
[10:35:01] *** Joins: martin02 (~silas@141.84.69.76)
[10:35:03] *** Joins: Flow (~none@gentoo/developer/flow)
[10:35:03] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[10:35:04] <blackcap> yeah, I'm defenitly doing that eventually
[10:35:08] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[10:37:57] *** Joins: michalz (~michalz@185.246.204.57)
[10:41:06] <Axman6> though I'm also not sure how efficient Builder is when building one byte at a time, which it looks like this probably does.
[10:46:46] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:47:32] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:48:26] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[10:50:19] *** Joins: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f)
[10:51:24] <blackcap> probably better than a linked list
[10:55:14] *** Quits: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f) (Ping timeout: 265 seconds)
[11:03:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:04:13] <blackcap> typeclasses hardly affected compile-time at all!
[11:04:43] *** Joins: sagax (~sagax_nb@user/sagax)
[11:05:28] <blackcap> I have had bad experiences with typeclasses in the past: https://github.com/BlackCapCoder/oeis/blob/master/src/OEIS/Part2.hs
[11:05:47] <blackcap> but I guess they're fine it there aren't too many instances?
[11:06:21] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[11:17:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:18:36] <tomsmeding> that feels like an uncommon amount of typeclass instances in one module :p
[11:18:49] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 268 seconds)
[11:18:52] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:20:34] *** Joins: chele (~chele@user/chele)
[11:20:52] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[11:22:01] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[11:23:05] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[11:23:06] <blackcap> That's only "Part2"; I had to arbitrarily divide them into separate files to keep compilation time down during development
[11:28:29] <tomsmeding> blackcap: yeah my point was that the fact that your OEIS code compiled slowly doesn't mean that type classes in general are slow; the more likely culprit is the sheer number of instances in that module :)
[11:28:59] <tomsmeding> hence, what you said
[11:29:05] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4f7e:a333:a04f:8257)
[11:31:01] <ozzloy_> https://paste.tomsmeding.com/owRGSS8q lines 26 through 48 are painful.  i think there's a better way to do this, but it's not occurring to me
[11:31:21] <blackcap> I have 4k instances in one file for this assembler, though, and it compiles in about a second
[11:31:25] *** Joins: acidjnk_new (~acidjnk@p200300d0c7437376bc7d0da008ce8c42.dip0.t-ipconnect.de)
[11:33:08] *** Joins: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f)
[11:34:31] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[11:34:35] <blackcap> ozzloy_: how about `foldMap \a -> (Min a, Max a)`
[11:35:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 250 seconds)
[11:36:12] <ozzloy_> blackcap, thanks!
[11:36:19] *** Quits: slice (~slice@user/slice) (Quit: cya)
[11:38:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[11:39:48] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[11:40:27] <ozzloy_> i'm not sure how foldMap works
[11:41:28] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:41:50] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[11:42:24] <ozzloy_> this notation is confusing.  could you tell me what i'm missing here?  that looks like foldMap takes a function that takes one argument and returns a tuple that consists of the minimum of that argument and the maximum of that argument
[11:42:35] <ozzloy_> i'm confused by it, anyways
[11:43:32] <ozzloy_> what is "Min"?  i'm finding results for "min" but not "Min"
[11:43:37] <blackcap> Min and Max are from Data.Semigroup
[11:44:04] <ozzloy_> thanks
[11:44:21] <blackcap> foldMap is folding the list using (<>)
[11:44:57] <ozzloy_> i read that.  i'm not sure how to search for that
[11:45:12] <ozzloy_> thanks
[11:45:19] <blackcap> which is going to be `(<>) = min` and `(<>) = max` for Min and Max
[11:46:08] <ozzloy_> i ... see?
[11:46:59] <blackcap> .. and the tuple is because the Semigroup instance for (,) is `instance (Semigroup a, Semigroup b) => Semigroup (a,b)`
[11:47:38] <blackcap> so fold once, but do both min and max in one go
[11:48:02] <c_wraith> That's not going to have great performance characteristics, sadly
[11:48:19] <ozzloy_> blackcap, thanks for help
[11:48:49] <blackcap> why not, because of the tuple?
[11:49:13] <blackcap> Min and Max are newtypes, so those should be free
[11:49:25] <c_wraith> you need to be using foldMap' at the very least
[11:49:43] *** Joins: max22- (~maxime@2a01cb08833598003ad2294d5328f338.ipv6.abo.wanadoo.fr)
[11:49:43] <ozzloy_> i'll keep that in mind for later.  at the moment, i'm just learning how to express ideas in haskell
[11:49:55] <ozzloy_> and what ideas haskell has to express
[11:50:01] <c_wraith> looks like your function is going to need to force evaluation of its arguments before generating its (,) constructor, too
[11:51:38] <c_wraith> which is why things like this typically use a strict pair - it's ridiculously painful to get evaluation of the components of a tuple with even foldMap'
[11:51:40] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:52:55] <ozzloy_> so ... i have ideas that i already know and would like to express in haskell, but don't know how.  and that feels nearer to me than learning these new-to-me ideas.
[11:53:49] <c_wraith> :t foldMap' (\a -> a `seq` (Min a, Max a))  -- I guess this is strict enough to not leak, at least with types that must be fully evaluated to determine the min and max
[11:53:50] <lambdabot> (Foldable t, Ord a, Bounded a) => t a -> (Min a, Max a)
[11:54:19] <c_wraith> Oh, nope.  It's not.
[11:54:24] <c_wraith> You really do need a strict pair.
[11:54:38] <ozzloy_> i would like to do something like https://paste.tomsmeding.com/N2Eu0Pur
[11:55:41] <ozzloy_> i know that's incorrect.  but the idea i'd like to express is to give a name to the smaller of a and b, and to the larger of a and b, and only compare a and b once to do that
[11:55:43] <c_wraith> You're not really following the spirit of the directions you've got there.
[11:55:50] <ozzloy_> i'm not?
[11:56:10] <ozzloy_> oh, you mean line 31?
[11:56:15] <ozzloy_> foldr?
[11:56:31] <c_wraith> They strongly suggest you should be using compare (or < and >) explicitly, so you can control exactly how many times it's called
[11:56:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 265 seconds)
[11:57:15] <c_wraith> instead of calling sort, min, and max
[11:57:16] <ozzloy_> yeah, i get that.  sorry, i wrote an implementation that gives the correct answer, and now i'm trying to write code that does it in the right way
[11:57:35] <c_wraith> eh.  the right way is to forget the problem spec. :)
[11:57:41] <ozzloy_> heh
[11:57:56] <c_wraith> this is best expressed as a foldl', actually
[11:59:35] <ozzloy_> how do i name the smaller of 2 variables "smaller" and the larger "larger" using only one comparison?
[12:00:02] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:00:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:30] <c_wraith> let (smaller, larger) = if (x < y) then (x, y) else (y, x)
[12:00:38] <ozzloy_> ah, thanks
[12:02:48] <ozzloy_> does that seem like the way someone who was new to haskell would follow these instructions?
[12:03:22] <c_wraith> maybe, if they were comfortable with pattern matching
[12:03:34] <blackcap> http://termbin.com/ucbo
[12:03:36] <ozzloy_> i'm thinking that lines up pretty closely with "process the list of numbers in pairs first with each other"
[12:04:00] <ozzloy_> c_wraith, well initially i had a giant nested if-else
[12:04:25] <ozzloy_> c_wraith, is that beginner-y enough for you?
[12:04:27] <c_wraith> You don't need that, if you take advantage of a let or where to name values
[12:05:26] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[12:06:48] <ozzloy_> blackcap, lol, thanks.  i will turn that in and claim that i wrote it
[12:07:08] <blackcap> if you use explicit recursion you can avoid the `Tup` wrapper
[12:08:27] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:08:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20) (Remote host closed the connection)
[12:09:57] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[12:10:20] *** Quits: Guest80 (~Guest80@pd9ed7c28.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:11:34] <blackcap> if you have a list of native types like Int, import GHC.Exts, get rid of the `I#` wrapper and use `geInt#`
[12:12:07] <ozzloy_> ok, so now i have this https://paste.tomsmeding.com/p5FHTbJV which i think does 3 comparisons for 2 numbers
[12:12:25] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[12:12:35] <ozzloy_> now i need to consume the initial list 2 elements at a time
[12:12:55] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Client Quit)
[12:13:10] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[12:13:41] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[12:13:42] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[12:13:42] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:17:34] *** Quits: fuzzypixelz_ (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 265 seconds)
[12:20:33] <ozzloy_> thanks again blackcap and c_wraith.  i'm off to bed.  will return to this later
[12:26:07] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[12:26:47] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[12:26:47] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[12:26:47] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:30:09] *** Quits: conphiz[m] (~conphizma@2001:470:69fc:105::c052) (Quit: You have been kicked for being idle)
[12:34:39] *** Quits: acidjnk_new (~acidjnk@p200300d0c7437376bc7d0da008ce8c42.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:37:36] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:40:01] <blackcap> If the number of elements is known in advance, you can find the answer probabilistically by checking at most half: http://termbin.com/7ssg
[12:40:32] <blackcap> If the number of elements is infinite, use brents algorithm to find a cycle first: http://termbin.com/1hil
[12:41:36] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[12:43:10] *** Quits: Guest8716 (~evan@2600:1700:ba69:10:41e7:efbb:d2c9:20f) (Quit: WeeChat 3.3)
[12:47:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** allbery_b is now known as geekosaur
[12:48:19] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:48:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:49:39] *** Joins: Pickchea (~private@user/pickchea)
[12:49:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[12:50:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[12:50:56] *** Joins: mastarija (~mastarija@2a05:4f46:e06:ff00:dd0f:baa7:ff4f:4d80)
[12:59:54] *** Joins: ubert (~Thunderbi@p200300ecdf0ba27448631365ce659eb5.dip0.t-ipconnect.de)
[13:09:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3)
[13:10:41] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:14:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3) (Ping timeout: 250 seconds)
[13:16:55] *** Joins: ub (~Thunderbi@p548c9fcb.dip0.t-ipconnect.de)
[13:17:33] *** Quits: ubert (~Thunderbi@p200300ecdf0ba27448631365ce659eb5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[13:17:33] *** ub is now known as ubert
[13:24:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:24:49] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[13:25:06] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:29:41] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[13:34:17] *** Square is now known as Sqaure
[13:40:29] *** Joins: olibiera (~olibiera@a79-169-181-190.cpe.netcabo.pt)
[13:42:20] <olibiera> hi guys i have this piece of code and im trying to call it recursively for every element of ys and zs and not just for y and z... can any1 explain how to?
[13:42:24] <olibiera> replace' :: [String] -> [String] -> [Int] -> [String]
[13:42:25] <olibiera>     replace' xs [] [] = xs
[13:42:25] <olibiera>     replace' xs (y:ys) (z:zs) = replace'' y z xs
[13:42:26] <olibiera>                             where replace'' y z xs = map (\x -> if (y == x) then show z else x) xs
[13:42:52] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:44:26] <[exa]> olibiera: what is it supposed to do? (also, can you paste it on pastebin so we can view it better, preferably along an error message so that we know what to fix?)
[13:45:55] <[exa]> anyway, in general, to recurse to the rest of the lists, you'll need to call something like: replace' _ ys zs
[13:46:45] *** Joins: olibiera52 (~olibiera@a79-169-181-190.cpe.netcabo.pt)
[13:47:14] *** Quits: olibiera (~olibiera@a79-169-181-190.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[13:47:22] *** Quits: olibiera52 (~olibiera@a79-169-181-190.cpe.netcabo.pt) (Client Quit)
[13:47:28] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[13:47:37] *** Joins: olibiera (~olibiera@a79-169-181-190.cpe.netcabo.pt)
[13:48:12] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[13:49:27] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:51:30] *** Joins: cfricke (~cfricke@user/cfricke)
[13:52:13] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[13:53:12] <olibiera> guys i sent my code to https://paste.tomsmeding.com/ , where will the answer be?
[13:56:10] <[exa]> ah you need to send us the precise link (not just to the pastebin frontpage)
[13:56:26] <[exa]> anyway, what's the expected function of the code?
[13:58:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:04:11] <olibiera> https://paste.tomsmeding.com/eiutK5Xl
[14:04:16] <olibiera> okok ty
[14:04:22] <olibiera> here it is
[14:11:37] *** Joins: Sinbad (~Sinbad@user/sinbad)
[14:15:43] *** Quits: mastarija (~mastarija@2a05:4f46:e06:ff00:dd0f:baa7:ff4f:4d80) (Quit: Leaving)
[14:16:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:20:19] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[14:20:19] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[14:20:19] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:23:11] <[exa]> olibiera: so you have a list of strings to find and replace, what does the [Int] mean there?
[14:25:03] <[exa]> olibiera: anyway, I guess you want something like
[14:25:04] *** Joins: Trattue (~Trattue@152.70.182.158)
[14:25:07] <olibiera> the int are the values i want to replace in xs if  the words are equal
[14:25:24] <[exa]> replace' xs (y:ys) (z:zs) = replace' (replace'' y z xs) ys zs
[14:25:28] <olibiera> the words in xs and ys
[14:25:38] <[exa]> there you process one replacement, and continue with replacing the other replacements on the result
[14:27:16] <[exa]> anyway yeah it makes sense now, I got confused by the ordering of the arguments (normally we tend to put the "data" as the last parameter, as you have in replace'')
[14:27:37] <olibiera> ty so much, this is to confusing to me, i ll look slowly in the code
[14:28:52] <olibiera> oh k got it, makes sense
[14:32:31] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 250 seconds)
[14:35:05] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[14:35:09] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[14:36:10] <timCF> Hello! Is there the way to unlift type-level bool to term-level bool, similar to what `symbolVal` is doing with type-level strings?
[14:37:12] <lortabac> @singleton-bool
[14:37:13] <lambdabot> Unknown command, try @list
[14:37:18] <lortabac> @hackage singleton-bool
[14:37:18] <lambdabot> https://hackage.haskell.org/package/singleton-bool
[14:37:25] <lortabac> timCF: ^
[14:39:12] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[14:39:42] <timCF> lortabac: thanks!
[14:42:02] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[14:42:02] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[14:42:02] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:44:39] <timCF> Any ideas why this is not in GHC.TypeLits? Bool is pretty basic type I think
[14:45:25] *** Quits: olibiera (~olibiera@a79-169-181-190.cpe.netcabo.pt) (Quit: Client closed)
[14:50:27] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[14:51:27] <arahael> how easy is it for me to cross compile a cabal project to an rpi target? the target is aarm64 running linux. the host is also aarm64, but running macos.
[14:52:05] <kuribas> it'd be nice to be able to unlift "any" DataKind
[14:53:53] <maerwald> arahael: does docker/qemu work on mac?
[14:54:40] <maerwald> there's https://github.com/multiarch/qemu-user-static
[14:54:48] <timCF> arahael: 64-bit arm should be fine I think. With armv6 you might have some issues
[14:56:25] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (Ping timeout: 265 seconds)
[14:56:30] *** Quits: orcus (~orcus@user/brprice) (Ping timeout: 260 seconds)
[14:57:05] *** Quits: dispater- (~dispater@user/brprice) (Ping timeout: 264 seconds)
[14:57:28] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Ping timeout: 256 seconds)
[14:58:10] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[14:59:20] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[14:59:21] *** Joins: orcus (~orcus@user/brprice)
[14:59:47] *** Joins: dispater (~dispater@user/brprice)
[15:00:51] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[15:00:51] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[15:00:51] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[15:05:29] <arahael> maerwald: Yeah, that's an option, actually I do have linux on an x86, but the mac is already aarm64.
[15:05:50] <arahael> timCF: I don't even know where to start, though.
[15:06:18] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:07:21] <timCF> arahael: :)
[15:07:32] <Sinbad> Using the net-mqtt package I'd like to connect to an mqtt server which has a self signed certificate. I can't see how to configure the client with passing the file path to the certificate. Neither @bar(input):button1
[15:08:54] <arahael> timCF: So, I mean, is there like, an environment variable I have to set before calling 'cabal build'? :)
[15:09:24] <Sinbad> TLSSettings does not seem to have such field.
[15:09:44] *** Joins: __monty__ (~toonn@user/toonn)
[15:09:46] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:11:10] <timCF> arahael: I actually don't know much about how to do it with cabal, but it should be relatively easy to do with nix https://input-output-hk.github.io/haskell.nix/tutorials/cross-compilation/
[15:11:41] <timCF> arahael: But of course it requires at least some nix knowledge 
[15:12:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3)
[15:12:32] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 260 seconds)
[15:12:45] <arahael> timCF: I have _some_ nix knowledge, but wow, that looks like a project on it's own.
[15:13:12] <arahael> I think my best bet is to probably just run an aarch64 VM, and then do the regular haskell build in that.
[15:14:39] <maerwald> "easy to do with nix" ...haha
[15:15:33] <maerwald> ghcup supports building GHC cross toolchains, but 1. it requires you to have the C libs for the correct architecture and 2. I don't know what the state of TH cross-compilation is
[15:16:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3) (Ping timeout: 250 seconds)
[15:17:19] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:21:29] *** Quits: Sinbad (~Sinbad@user/sinbad) (Ping timeout: 250 seconds)
[15:33:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:33:51] *** Joins: notzmv (~zmv@user/notzmv)
[15:35:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:37:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:40:40] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[15:40:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:41:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:45:24] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[15:45:45] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 250 seconds)
[15:46:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:46:48] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[15:47:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:31] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:50:13] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:51:25] *** AlexNoo_ is now known as AlexNoo
[15:52:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:52:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:58:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:58:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:59:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:00:05] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[16:00:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:04:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[16:05:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:06:56] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:10:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[16:10:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:10:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:10:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:11:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:12:32] *** Quits: juhp (~juhp@128.106.188.220) (Quit: juhp)
[16:13:16] *** Quits: max22- (~maxime@2a01cb08833598003ad2294d5328f338.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[16:16:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[16:16:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:17:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[16:17:36] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[16:18:15] *** Joins: puke (~puke@user/puke)
[16:19:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:20:04] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[16:20:04] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[16:20:04] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:20:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:26:50] *** Joins: juhp (~juhp@128.106.188.220)
[16:27:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:27:47] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[16:28:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:33:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:33:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:35:25] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[16:36:51] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Quit: Leaving)
[16:37:07] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[16:39:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:39:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:41:21] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[16:41:43] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[16:41:44] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 256 seconds)
[16:42:06] *** Joins: alzgh (~alzgh@user/alzgh)
[16:42:18] *** Joins: wei2912 (~wei2912@138.75.71.147)
[16:45:08] *** Joins: fuzzypixelz_ (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:46:10] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 260 seconds)
[16:46:21] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[16:49:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:50:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:51:23] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[16:54:01] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:55:27] *** Joins: son0p (~ff@181.136.122.143)
[16:55:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:55:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:58:15] *** Joins: ystael (~ystael@user/ystael)
[16:58:44] *** Quits: alx741 (~alx741@181.196.68.87) (Ping timeout: 256 seconds)
[17:01:37] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[17:04:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:05:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[17:06:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:06:59] *** Joins: Pickchea (~private@user/pickchea)
[17:08:21] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[17:09:02] *** Joins: max22- (~maxime@2a01cb0883359800387721e60f64db31.ipv6.abo.wanadoo.fr)
[17:12:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[17:12:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:13:11] *** Joins: Farzad (~FarzadBek@178.131.26.179)
[17:13:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3)
[17:18:18] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[17:18:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3) (Ping timeout: 268 seconds)
[17:18:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: Reconnecting)
[17:18:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:18:57] *** Joins: pop3 (~pop3@user/pop3)
[17:20:05] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:25:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 265 seconds)
[17:25:50] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[17:29:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:41:58] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[17:42:12] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[17:43:19] *** Joins: alx741 (~alx741@181.196.68.87)
[17:44:09] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[17:44:49] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:45:18] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[17:47:57] *** Quits: fuzzypixelz_ (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 250 seconds)
[17:50:03] *** Joins: Sinbad (~Sinbad@user/sinbad)
[17:51:40] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[17:52:48] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:53:31] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[17:54:55] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:59:05] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[17:59:26] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:02:58] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[18:05:32] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[18:05:54] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[18:06:57] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:07:22] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[18:11:13] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:11:19] *** gehmehgeh_ is now known as gehmehgeh
[18:11:21] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[18:12:12] <boxscape_> I don't suppose there exists a library that lets you parse a Haskell code string into a template haskell Exp?
[18:12:27] <dminuoso> There is
[18:12:29] <merijn> boxscape_: eh...
[18:12:30] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 260 seconds)
[18:12:34] <merijn> "template-haskell"? :p
[18:12:47] <boxscape_> Hm I didn't know template-haskell included a parser
[18:12:47] <merijn> That's what all the quasi quoters do :p
[18:12:47] <dminuoso> ^-
[18:12:53] <boxscape_> oh I se
[18:12:54] <boxscape_> e
[18:12:59] <merijn> boxscape_: Because it's hidden as a quasi-quoter
[18:13:03] <boxscape_> right, ok
[18:13:12] <boxscape_> thanks
[18:13:14] <merijn> % [e|2 + 5|]
[18:13:15] <yahb> merijn: InfixE (Just (LitE (IntegerL 2))) (VarE GHC.Num.+) (Just (LitE (IntegerL 5)))
[18:14:47] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[18:14:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[18:15:46] *** Quits: Farzad (~FarzadBek@178.131.26.179) (Quit: Leaving)
[18:17:17] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:23:00] *** Joins: Guest46 (~Guest46@catv-80-98-84-78.catv.broadband.hu)
[18:23:16] <fcortesi>  Hello
[18:23:17] <fcortesi> Offtopic question: It's better to keep bug reports short and "dry", without much presentation and such? I try to valorate the time of the devs by doing so but I have this feeling of (maybe) being interpreted as rude, specially when nobody knows me in the comunity. On the other hand it feels a bit stupid when trying to make messages a bit more personal an "friendlier"..
[18:24:54] <maerwald> I follow this template, adapted from lkml "Your software is utter sh*t. It's broken. Seriously. Anyway, here's why: <insert bug report>."
[18:26:11] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[18:26:15] <janus> today is Haskell eXchange Novice track : https://skillsmatter.com/conferences/13580-haskell-exchange-2021-novice
[18:26:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:26:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:26:22] *** Joins: wroathe (~wroathe@user/wroathe)
[18:27:03] <kuribas> fcortesi: keep them to the point, but adding information is always a good thing.
[18:27:37] <fcortesi> Ok. Thanks.
[18:28:12] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[18:28:32] <kuribas> elaborating a bit on the error may make it easier for them to find the bug.
[18:29:10] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:29:12] <kritzefitz> fcortesi: If you feel like adding niceties, maybe do so by including a nice sentence like „thanks for your consideration“ or similar at the end. Keeping it separate from the actual problem description helps to not detract from the actual content. But I'd still say it's optional and personally I usually avoid it.
[18:29:18] *** Parts: Guest46 (~Guest46@catv-80-98-84-78.catv.broadband.hu) ()
[18:29:24] <fcortesi> Yes, but often the best way of explaining is just to copy a few lines of code...
[18:29:48] <fcortesi> (answer to kuribas)
[18:31:16] <kritzefitz> fcortesi: if your report consists mostly of a snippet of code (that can be compiled an run standalone) that is often a good thing and usually it doesn't need much more than an explanation of what behavior you are observing and what behavior you would expect instead.
[18:32:22] <fcortesi> kritzefitz: Thanks. I was afraid of that being interpreted negatively.
[18:32:59] <tomsmeding> yeah, saying "I have this small snippet of code, which I expect to do X because of reason R but instead it does Y" is usually a great bug report -- reproducers are very valuable when debugging an issue, so valuable in fact that sometimes that's sufficient nicety for a maintainer to become happy with your report :)
[18:33:58] <fcortesi> Excelent, thanks!
[18:34:34] *** Quits: Sinbad (~Sinbad@user/sinbad) (Quit: WeeChat 3.3)
[18:35:21] <merijn> reliable reproducer >>>>> anything else
[18:35:37] <merijn> Well, a *minimal* reliable reproducer is even better
[18:37:21] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[18:37:24] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[18:37:29] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:37:31] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:37:42] <fcortesi> Yes from a technical perspective I agree, and it's more or less what I see. But I dont know wether everybody here knows each other before declaring something to be wrong with an issue.
[18:38:09] <fcortesi> But I think I got it, thanks.
[18:39:04] *** Joins: sinbad (~sinbad@user/sinbad)
[18:39:22] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e618:9306:a767:ab2)
[18:42:02] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:42:28] *** Quits: fryguybo1 (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[18:42:53] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[18:43:11] <lortabac> a user called fcortesi asks whether they should be polite, how beautiful :P
[18:43:58] <dminuoso> fcortesi: It's a complicated question and depends on how well you can communicate, how much time the other person has to look into your gory details, and whether they have the skill to quickly get a picture of your code and mentally filter.
[18:44:16] <dminuoso> Generally short test cases are the best, but in some cases they can be difficult to produce
[18:44:23] <lortabac> (cortesi means polite in Italian)
[18:45:27] <fcortesi> Seriously? 
[18:45:48] <fcortesi> lortabac: I just don't want to get banned :P.
[18:46:16] <lortabac> :D
[18:47:20] <maerwald> merijn: right, so a good bug report needs: 1. insult, 2. reproducer
[18:47:21] <maerwald> :D
[18:49:09] <fcortesi> I'll try :P.
[18:49:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:50:08] <kritzefitz> If you want to be creative about it, your reproducer insults the developer if buggy, but doesn't when the bug is fixed.
[18:51:03] <maerwald> tbf... angry people on my bug trackers tend to motivate me more. I guess that's PTSD from industry.
[18:51:29] <merijn> It's the opposite for me
[18:51:33] * tomsmeding is not sure that holds for the majority of maintainers
[18:51:44] <maerwald> tomsmeding: yeah, that's what my therapist said
[18:51:47] <merijn> Angers just triggers me "get fucked" response
[18:51:48] <tomsmeding> lol
[18:56:14] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:56:25] <davean> maerwald: there was an angry person a bug tracker last year for a project so I just put it out of my rotation for a bit and I still haven't gotten back to it :-p 
[18:58:24] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[19:00:01] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 265 seconds)
[19:02:04] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:02:42] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:06:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:06:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:06:31] *** Joins: wroathe (~wroathe@user/wroathe)
[19:07:15] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:07:42] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:08:33] *** Quits: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:08:42] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[19:11:37] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[19:11:42] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:11:51] *** Joins: xkuru (~xkuru@user/xkuru)
[19:15:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3)
[19:18:01] *** Quits: ubert (~Thunderbi@p548c9fcb.dip0.t-ipconnect.de) (Quit: ubert)
[19:18:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:19:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7483:71c5:e9d:14d3) (Ping timeout: 268 seconds)
[19:22:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:22:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[19:24:46] *** Joins: ouro_boros (~ouroboros@2804:14c:65e4:93f6::1001)
[19:25:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:26:38] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[19:26:41] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:27:25] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[19:35:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:36:49] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[19:37:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[19:38:10] *** Joins: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com)
[19:39:19] *** Joins: fef (~thedawn@user/thedawn)
[19:39:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:39:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:39:34] *** Joins: wroathe (~wroathe@user/wroathe)
[19:40:48] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 256 seconds)
[19:40:53] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[19:41:28] *** Joins: acidsys (~LSD@2.lsd.systems)
[19:43:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[19:44:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[19:44:25] <pop3> is there any introduction about algebraic effects(like fused-effects) design pattern?
[19:47:20] *** Quits: pop3 (~pop3@user/pop3) (Quit: Leaving.)
[19:47:36] *** Joins: pop3 (~pop3@user/pop3)
[19:48:54] *** Quits: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com) (Quit: leaving)
[19:54:41] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:54:51] *** Joins: chele (~chele@user/chele)
[19:54:52] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4f7e:a333:a04f:8257) (Quit: WeeChat 2.8)
[19:57:26] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[19:58:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2d58:181a:7f09:e906)
[20:03:20] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[20:09:24] *** Joins: vpan (~0@212.117.1.172)
[20:21:33] *** Joins: Farzad (~FarzadBek@151.238.206.168)
[20:27:40] <tomsmeding> pop3: not an answer to your question, but potentially relevant: https://reasonablypolymorphic.com/blog/porting-to-polysemy/index.html
[20:27:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:30:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:31:35] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 264 seconds)
[20:32:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:35:03] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:38:17] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:41:22] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[20:42:53] *** Joins: mimmy (~mimmy@72.142.88.18)
[20:45:32] *** Quits: xff0x (~xff0x@2001:1a81:52ee:6600:5c66:cf47:7ae9:a061) (Ping timeout: 268 seconds)
[20:45:37] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[20:46:18] *** Joins: xff0x (~xff0x@2001:1a81:52ee:6600:9858:fc63:c087:3f3e)
[20:47:50] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[20:48:06] <perrierjouet> hi all
[20:48:33] <geekosaur> œ
[20:51:33] <tomsmeding> geekosaur: is that supposed to represent an IPA vowel?
[20:51:52] <geekosaur> "oe", old style
[20:52:06] <geekosaur> roughly the same as ö but from old english
[20:52:56] <geekosaur> there's also æ
[20:53:02] <tomsmeding> yeah I've seen those :p
[20:53:34] <tomsmeding> just trying to interpret the usage of œ as a response to a greeting :p
[20:53:46] <geekosaur> "oh (hi)"
[20:54:03] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:54:10] <tomsmeding> different sound though :P
[20:54:16] <geekosaur> also drawing just a little bit on SCA :)
[20:54:49] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[20:55:06] * tomsmeding is not sure again https://en.wikipedia.org/wiki/SCA
[20:55:32] <davean> https://en.wikipedia.org/wiki/Oi_(interjection)
[20:55:34] <tomsmeding> "Supercheap Auto" -- sounds like a very reputable car manufacturer
[20:55:43] <geekosaur> https://en.wikipedia.org/wiki/Society_for_Creative_Anachronism
[20:56:13] <tomsmeding> davean: "intensely cockney"
[20:56:18] <geekosaur> where I'm reaching for "Oyez" and admittedly missing a little bit :)
[20:57:15] <tomsmeding> heh neat
[20:59:46] <tomsmeding> https://www.theonion.com/society-for-creative-anachronism-seizes-control-of-russ-1819565189 , though this is -offtopic at this point
[21:00:21] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 250 seconds)
[21:00:57] <EvanR> I'm offended for the ancients by this cultural appropriation
[21:02:31] <geekosaur> tomsmeding, that joke has been around for, er, ages
[21:02:56] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[21:03:47] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:04:14] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[21:08:55] *** Joins: neurocyte0132889 (~neurocyte@94.46.69.238)
[21:08:55] *** Quits: neurocyte0132889 (~neurocyte@94.46.69.238) (Changing host)
[21:08:55] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:09:00] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[21:10:00] *** Joins: MoC (~moc@user/moc)
[21:13:22] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[21:13:59] *** Joins: neurocyte0132889 (~neurocyte@94.46.69.238)
[21:13:59] *** Quits: neurocyte0132889 (~neurocyte@94.46.69.238) (Changing host)
[21:13:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:14:25] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:15:11] *** Quits: the_proffesor (~theproffe@user/theproffesor) (Remote host closed the connection)
[21:16:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e618:9306:a767:ab2) (Ping timeout: 250 seconds)
[21:17:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:20:38] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[21:21:05] *** Joins: fef (~thedawn@user/thedawn)
[21:21:07] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:23:17] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[21:24:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:25:07] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[21:27:10] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:27:18] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[21:27:58] *** Joins: mimmy (~mimmy@72.142.88.18)
[21:29:02] <tomsmeding> ;)
[21:31:25] <monochrom> old style pig says: œnk  >:)
[21:31:41] <sshine> hehe
[21:32:45] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[21:33:14] *** Joins: emf (~emf@162.218.217.186)
[21:33:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[21:35:54] <tomsmeding> 'Henry Ford polymorphism ("any type a as long as it's Int")' -- SPJ
[21:36:46] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[21:36:55] <monochrom> heh
[21:37:49] *** Joins: emf_ (~emf@2620:10d:c090:400::5:91bf)
[21:38:11] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 264 seconds)
[21:38:34] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[21:41:30] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[21:41:34] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[21:48:24] *** Quits: mbuf (~Shakthi@223.184.58.239) (Quit: Leaving)
[21:55:17] <geekosaur> heh
[21:55:23] <geekosaur> (having found the context)
[21:56:12] *** Quits: sinbad (~sinbad@user/sinbad) (Quit: Client closed)
[21:56:30] *** Joins: wonko (~wjc@user/wonko)
[21:57:38] *** Joins: tom_ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[21:58:24] <tom_> davean: How do you decide with machines library whether to use Mealy or write a plan from scratch?
[21:58:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[21:59:05] <davean> tom_: what do you want to say about what you're doing? How do you want to use it? What do you want to represent with your code?
[21:59:11] <davean> code is like poetry, form is meaning
[21:59:37] <tom_> So I have a player in a card game
[21:59:59] <tom_> I want to encode the card game rules as some kind of machines
[21:59:59] *** Joins: econo (uid147250@user/econo)
[22:00:09] <tom_> I am thinking the players are also machines
[22:00:16] *** Joins: aliosablack (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[22:00:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[22:01:15] <tom_> So I was planning on making a player a Mealy machine but I am not sure if using Mealy is correct as changes to the game state such as next turn will trigger changes to players
[22:01:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[22:01:24] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[22:02:04] <davean> It depends on your model of a game - turn change is a symbol in the language of a card game
[22:02:11] <davean> as if recieving a card
[22:02:16] <davean> and you emit your actions
[22:02:28] <davean> it makes sense as a mealy if you want to think about it that way
[22:03:07] <davean> This is very much like SAX parsing
[22:03:20] <davean> if you don't like language analogies
[22:03:27] <davean> (though its ... idential)
[22:03:50] <tom_> The card game turns are represented by a moore machine
[22:04:08] <tom_> So I guess this would emit actions which are read by the player mealys
[22:04:27] <davean> right
[22:04:29] <davean> mealy transforms
[22:04:46] <davean> it transforms a series of card game events into actions specificly
[22:04:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 250 seconds)
[22:05:09] <tom_> How would I do that with the library?
[22:05:22] <tom_> Connect a Moore and multiple Mealys
[22:05:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2d58:181a:7f09:e906) (Remote host closed the connection)
[22:05:41] *** Quits: mcglk (~mcglk@131.191.49.120) (Quit: (seeya))
[22:05:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[22:06:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:06:52] <davean> so a Moore still has inputs
[22:07:07] <davean> what you really want at the top is probably a Source
[22:07:14] <davean> or something
[22:07:29] <davean> you could just use that as a clock source though
[22:08:03] <tom_> Are "actions" the parameters to transition functions?
[22:08:05] *** Joins: mimmy (~mimmy@72.142.88.18)
[22:08:27] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[22:13:41] *** Joins: mark__ (~a@p200300ef973db1d9502293e1a26d2ca1.dip0.t-ipconnect.de)
[22:13:45] <davean> actions in my above usage was the outputs of a player - what they choose to do
[22:14:41] <mark__> Can someone explain or reproduce this: "x :: Maybe Int; x = Nothing"; seq x ()", ":sprint x" -> "x = _" Why?
[22:14:44] <mark__> x is not polymorph. It's a value constructor and seq should force it but doesn't. But print does: "print x", ":sprint x" -> "x = Nothing"
[22:15:29] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7289:19f7:f3fa:e188)
[22:15:46] <mark__> core dump of x:  x = GHC.Maybe.Nothing @ Int
[22:16:07] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:16:28] <EvanR> Prints a value without forcing its evaluation. :sprint is similar to :print, with the difference that unevaluated subterms are not bound to new variables, they are simply denoted by _.
[22:16:33] <EvanR> (docs for :sprint)
[22:17:12] <mark__> Yes but note the "seq x ()"
[22:17:41] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:18:26] <EvanR> I'm not sure the real reason, but the semantics of seq technically don't say that the first arg will be evaluated
[22:18:38] <tom_> davean: If a player has lots of state such as current chips,cards etc would you be inclined to use a MealyT (State PlayerInfo) and put common state there?
[22:18:45] <tom_>  placeBet :: Chips -> (Player, Mealy Action Player)
[22:18:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:19:35] <tom_> I guess that the second type constructor for Mealy is for current state perhaps
[22:19:50] <davean> I have a meeting,will reply later
[22:19:54] <tom_> no worries
[22:20:17] <EvanR> try x::Maybe Int; x = error "BOOM"
[22:20:32] <mark__> EvanR: The docs say "it evaluates the first argument a to weak head normal form (WHNF)."
[22:20:41] <EvanR> which docs
[22:20:58] <mark__> https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/GHC-Prim.html#v:seq
[22:21:41] <EvanR> interesting, well everything else in that documentation is what I thought I knew
[22:22:01] <EvanR> for example, if x is definitely not bottom (somehow we know this), seq is not required to evalauted it
[22:22:42] <EvanR> seq only ensures that if x would explode, seq x foo explodes
[22:22:57] <EvanR> hence my suggested follow up
[22:23:11] *** Quits: xff0x (~xff0x@2001:1a81:52ee:6600:9858:fc63:c087:3f3e) (Ping timeout: 264 seconds)
[22:23:30] *** Joins: xff0x (~xff0x@2001:1a81:52ee:6600:288d:876:4868:af07)
[22:30:00] *** Joins: juhp_ (~juhp@128.106.188.82)
[22:30:45] <mark__> "x :: Maybe Int; x = error "boom"; seq x ()" throws an error. But this is expected because seq is trying to evaluate error "boom" to WHNF.
[22:31:34] <EvanR> it does in this case
[22:31:43] <EvanR> which is good
[22:32:13] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 268 seconds)
[22:32:14] *** juhp_ is now known as juhp
[22:32:23] <EvanR> I put x=Just undefined, then seq x () leaves x=_. But y <- evaluate x results in x=Just _
[22:32:43] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:33:43] <EvanR> otoh x=undefined, y <- evaluate x crashes. Which is good. otoh x=Just undefined, y <- evaluate (seq x ()) results in x=_
[22:34:20] <c_wraith> EvanR: cannot repro.  https://paste.tomsmeding.com/xdLmAFHS
[22:34:39] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4)
[22:34:43] <EvanR> You may want to try putting a non trivial computation in x which is not bottom and see if it's looking at the constant header to avoid evaluating
[22:35:02] <c_wraith> EvanR: that might be your problem, if you've introduced something typeclass-polymorphic
[22:35:28] <c_wraith> You might be hitting the lack of monomorphism restriction
[22:36:13] <EvanR> I reproduced what you got
[22:36:28] <EvanR> and what I got (by adding the type sign on the same line)
[22:36:33] *** Quits: max22- (~maxime@2a01cb0883359800387721e60f64db31.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:36:33] <EvanR> *interesting*
[22:36:46] <c_wraith> and when you allow typeclass polymorphism, https://paste.tomsmeding.com/cFWIjwXR
[22:37:20] <c_wraith> That's why ghci used to have the monomorphism restriction
[22:37:27] <c_wraith> (it no longer does)
[22:37:30] <EvanR> I don't really understand
[22:37:42] <EvanR> more polymorphism results in evaluation
[22:38:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[22:38:10] <c_wraith> bounded (type class) polymorphism makes it a function internally
[22:38:20] <c_wraith> That ghc provides the first function to, automatically
[22:38:24] <EvanR> what type class are we even talking about
[22:38:29] <c_wraith> in my example, Num
[22:38:43] <EvanR> in the original example (let x = Just undefined) ?
[22:39:28] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[22:40:15] <EvanR> anyway it seems that in some circumstance seq (legally) won't evaluate the x, like it knows something sprint doesn't
[22:40:17] <c_wraith> I must not understand what your example is doing, because everything I try works the way I expect.... https://paste.tomsmeding.com/UmfQYs9a
[22:40:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[22:40:51] <EvanR> just to be clear, you can reproduce the original thing just chose not to? xD
[22:41:00] <c_wraith> No, I don't understand it.
[22:41:08] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[22:41:13] <c_wraith> I do what I think you said and get the result I expect.
[22:41:20] <c_wraith> So I must not understand what you did
[22:41:25] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[22:42:07] <EvanR> (btw this wasn't my question it's marks) x::Maybe Int; x = Just undefined; seq x (); :sprint x results in x=_
[22:42:13] <mark__> c_wraith: Is the behavior I posted also what you expect? Do you expect that seq x () does not eval x to WHNF if x is a monomorphic value con like Nothing :: Maybe Int?
[22:42:34] <EvanR> it also happens with Just
[22:43:39] <c_wraith> oh.  You're bamboozling yourself
[22:43:59] <c_wraith> they should never have removed the requirement to use let in ghci
[22:44:38] <EvanR> ah, using let (and the mono type sig) does change it
[22:44:43] <EvanR> what the hell is the difference
[22:44:51] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[22:44:53] <c_wraith> it's one statement instead of two
[22:45:30] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (Ping timeout: 260 seconds)
[22:45:51] <EvanR> um, my question stands xD
[22:45:53] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[22:45:58] <EvanR> oh it becomes polymorphic?
[22:46:17] <EvanR> nope
[22:46:19] <mark__> how would I write it with let?
[22:46:22] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:46:33] <EvanR> let x::Maybe Int; x=Just undefined
[22:46:55] <EvanR> which doesn't result in a different type for x
[22:47:03] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:47:04] <EvanR> but seq treats it differently
[22:47:14] <mark__> I tried this but if i do this ghci waits for more input.
[22:47:17] <c_wraith> My version of ghci doesn't even let me enter what you're doing.
[22:47:32] <c_wraith> If I want to put a type signature there, I need the let
[22:47:40] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 265 seconds)
[22:47:45] <EvanR> so we have three different acting versions of ghci? xD
[22:47:47] *** Joins: desantra (~skykanin@user/skykanin)
[22:47:56] <EvanR> I don't wait for more input and I don't need let
[22:48:13] <c_wraith> This is why I keep pastebinning my examples - it makes it a lot more clear exactly what I'm entering
[22:48:27] *** Quits: aliosablack (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Quit: Leaving)
[22:48:34] <EvanR> i'll pastebin something
[22:49:00] <tomsmeding> c_wraith: https://paste.tomsmeding.com/4ir9lLhI
[22:49:26] <unit73e> I find it hard to believe that simple code doesn't work in a past version of ghci lol
[22:49:33] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[22:49:42] <EvanR> https://paste.tomsmeding.com/EPxbDEmP
[22:49:48] <mark__> Can reproduce! Disabled multiline commands. Now if I do "let x = Nothing :: Maybe Int" I get :sprint = x = Nothing.
[22:50:25] <c_wraith> unit73e: ghci used to be very clear and make perfect sense, and people hated it.  So they kept making it more and more ad-hoc
[22:50:46] <mark__> So what exactly is the difference between "x = Nothing" and "let x = Nothing"?
[22:50:52] <mark__> in ghci
[22:51:11] <EvanR> supposedly no let means it was two commands
[22:51:20] <EvanR> not sure how that matters here
[22:51:40] <c_wraith> I think this is just a ghci bug
[22:51:49] <mark__> Learners should know this because it's the difference between expected and weird behavior.
[22:52:05] *** Joins: mastarija (~mastarija@2a05:4f46:e06:ff00:dd0f:baa7:ff4f:4d80)
[22:52:24] <c_wraith> My fix would be to remove the ability to revert ghci to sane behavior.
[22:52:38] <EvanR> mandatory insanity
[22:52:41] <c_wraith> err.  haha.  that's a confused sentence.
[22:52:54] <c_wraith> Revert ghci to sanity.
[22:53:07] <c_wraith> remove the ability to enter top-level declarations
[22:53:35] <EvanR> so it might be a special treatment of top level objects
[22:53:42] <c_wraith> yeah, and it's buggy
[22:53:49] <c_wraith> that isn't correct behavior
[22:54:10] <EvanR> since it technically doesn't violate seq, maybe no one noticed
[22:54:24] <unit73e> I don't think it matters
[22:54:29] <c_wraith> I mean, it's not a spec violation at all
[22:54:37] <c_wraith> lazy evaluation is *not* a requirement of the Haskell spec
[22:54:46] <c_wraith> it only requires non-strict evaluation
[22:54:59] <tomsmeding> i.e. call by name is also allowed?
[22:55:02] <c_wraith> yes
[22:55:06] <EvanR> it's not a lazy evaluation it's a no evaluation at all
[22:55:11] <c_wraith> and that's the observed behavior in that case
[22:55:16] <EvanR> like a no-call in football
[22:55:23] <c_wraith> No, it's call-by-name evaluation
[22:55:42] <EvanR> oh god... the call-bys
[22:55:42] <c_wraith> ie, it doesn't memoize the result
[22:55:50] <tomsmeding> (in case you don't know that term: re-evaluate at each usage site, instead of only at the first usage and then memoise)
[22:55:51] <mark__> is there a short example to show the differnce between lazy and non-strict evalutation? I always thought it's the same thing.
[22:56:03] <EvanR> so you think it actually evaluates
[22:56:15] <c_wraith> yes.  I think it evaluates it, and then throws it out.
[22:56:37] <mark__> one of them memoizes the other doesn't?
[22:56:42] <c_wraith> yes
[22:57:20] <c_wraith> more specifically: non-strict means...  any strategy that isn't strict.
[22:57:22] <unit73e> just so you know ghci 9.0.1 crashes if you do that
[22:57:35] <c_wraith> ghc 9.0 was really buggy in a lot of ways
[22:57:43] <unit73e> I mean this: x::Maybe Int; x=Just undefined
[22:57:47] <unit73e> throws an exception
[22:57:58] <mark__> so it's eager?
[22:58:00] <EvanR> weird
[22:58:02] <c_wraith> an exception?  or just a compilation error
[22:58:08] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:58:19] <unit73e> exception
[22:58:42] <unit73e> https://paste.tomsmeding.com/4UBU57g1
[22:58:56] <EvanR> ah well you asked for x
[22:58:57] <c_wraith> oh, that's expected.  you tried to print it
[22:58:59] <EvanR> which prints it out
[22:59:12] <c_wraith> that's why we were using :sprint
[22:59:20] <c_wraith> which only prints as much as has been evaluated
[22:59:36] <tomsmeding> the call by name evaluation is inconsistent though: https://paste.tomsmeding.com/tS1PgVlB
[22:59:43] <unit73e> alright lets try again
[23:00:04] <EvanR> *only prints as much as has been evaluated... and then saved
[23:00:07] <c_wraith> tomsmeding: well yes.  I'm certain it's a bug, from GHC's point of view.  It's just not a spec violation
[23:00:34] *** Joins: chianuo (chianuo@gateway/vpn/protonvpn/chianuo)
[23:00:42] * tomsmeding has apparently run into this bug half a million times already
[23:00:46] <mark__> c_wraith: If non-strict means no memoization does this there is no sharing? So square x evalautes to x * x and if x is complicated term it has to compute it every time?
[23:00:49] <tomsmeding> I was certain I had no idea how :sprint worked
[23:00:56] <tomsmeding> because I'd tried this always without 'let'
[23:00:57] <mark__> *mean
[23:01:03] <unit73e> https://paste.tomsmeding.com/cIUqPUcn
[23:01:06] <c_wraith> mark__: non-strict just means "not strict".  It could memoize, or not.
[23:01:07] <unit73e> so.. _
[23:01:11] <EvanR> lazy evaluation (save the result) is a specialized strategy for non-strict
[23:01:14] <unit73e> it does make sense
[23:01:29] <unit73e> not seq nonsense
[23:01:44] *** Quits: Raito_Bezarius (~Raito@2a01:e0a:5f9:9681:1c66:fc75:c47c:31bc) (Changing host)
[23:01:44] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[23:01:52] <unit73e> same result I guess
[23:01:56] <EvanR> so morally, you expect seq to evaluate the argument
[23:02:20] <tomsmeding> consider the program 'let x = ... ; y = ... in x + x'. Suppose you evaluate this program. Strict (call-by-value) evaluation would compute x and y ; lazy (call-by-need) would compute x once ; call-by-name would compute x _twice_
[23:02:26] <c_wraith> not morally.  I expect it to obey its (very precise) specification
[23:02:31] <EvanR> well, it does here
[23:02:55] <EvanR> even if it didn't evaluate due to non-bottom
[23:03:13] <mark__> I learned two things for ghci: 1) Check MMR 2) use "let"
[23:03:17] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:03:24] <tomsmeding> that (1) is a classic in #haskell
[23:03:59] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[23:04:14] <ozzloy_> c_wraith, i hope you got sleep or will get sleep soon
[23:04:16] <c_wraith> typeclass polymorphism often prevents sharing, in ghci
[23:04:29] <c_wraith> ozzloy_: hasn't it been like 10 hours?  I slept.  :)
[23:04:40] <ozzloy_> it has!
[23:04:55] <mark__> tomsmeding: I thought I did not understand :sprint. But truth is, i did not understand ghci :)
[23:05:02] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[23:05:08] *** Quits: mastarija (~mastarija@2a05:4f46:e06:ff00:dd0f:baa7:ff4f:4d80) (Quit: Leaving)
[23:05:36] <tomsmeding> amen
[23:05:50] <c_wraith> I do think you found a ghci bug
[23:05:51] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[23:06:11] <c_wraith> that behavior shouldn't change based on that syntactic difference
[23:06:36] <c_wraith> But I'm pretty sure it's only a ghci bug, and not one that breaks any specified behavior.
[23:11:17] <tomsmeding> is someone going to report this bug? Otherwise I will :p
[23:12:13] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[23:19:29] *** Joins: Guest5126 (~Guest51@180.230.60.84)
[23:20:56] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 268 seconds)
[23:22:25] *** Quits: chianuo (chianuo@gateway/vpn/protonvpn/chianuo) (Quit: WeeChat 3.4-dev)
[23:24:41] <mark__> tomsmeding: yes please. To reproduce 1) bad case:
[23:24:44] <mark__> "x :: Maybe Int; x = Nothing", ":sprint x" -> "x = _", "seq x ()", ":sprint x" -> "x = _" (This is not in WHNF!)
[23:24:47] <mark__> good case:
[23:24:56] <mark__> with let: "let y :: Maybe Int; y = Nothing"; ":sprint y" -> "y = Nothing"
[23:25:32] <tomsmeding> right, including the comparison with my product example, which is inconsistent with "it's just call-by-name"
[23:25:47] * tomsmeding is building a ghc from HEAD to ensure it's not fixed there
[23:27:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[23:27:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[23:27:55] *** Joins: mimmy (~mimmy@72.142.88.18)
[23:28:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:28:55] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:32:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:35:31] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 265 seconds)
[23:36:46] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:04] <Guest5126> Is this the Tom and Jerry market? Send me a private message
[23:40:02] <tomsmeding> mark__: the issue is confused by the essentially orthogonal, but nevertheless related, https://gitlab.haskell.org/ghc/ghc/-/issues/10160
[23:40:24] <tomsmeding> (which is still valid, by my limited testing)
[23:41:11] *** Joins: cjb (~cjbayliss@user/cjb)
[23:42:31] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[23:43:11] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[23:43:33] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[23:44:03] *** Joins: pop3 (~pop3@user/pop3)
[23:45:11] <mark__> Is the fact that y = Nothing is not a thunk but immediately known even though seq/print wasn't used expected behavior or is an instance of 10160?
[23:45:23] <mark__> with respect the good case (2)
[23:45:27] <mark__> *to
[23:46:02] <tomsmeding> "y = Nothing" not yielding a thunk is naively unexpected, but nevertheless correct, behaviour
[23:46:07] <tomsmeding> done for performance reasons
[23:46:20] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:46:58] <tomsmeding> ah but this #10160 is producing redd herrings
[23:47:15] <tomsmeding> mark__: https://paste.tomsmeding.com/Vw5Rz83h
[23:47:31] <EvanR> there's only ever 1 Nothing, [], (), floating around at any given time xD
[23:47:35] <tomsmeding> the fact that Nothing is a plain data constructor changes things
[23:47:35] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[23:49:34] <mark__> the first one looks fine but the second should be _ : _, shouldn't it?
[23:52:14] <tomsmeding> mark__: sorry, the essential comparison missing: https://paste.tomsmeding.com/2e92s4gm
[23:53:09] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:53:25] *** Joins: max22- (~maxime@2a01cb08833598005714d2986a3eb6d2.ipv6.abo.wanadoo.fr)
[23:54:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:54:16] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[23:54:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:54:40] *** Quits: alx741 (~alx741@181.196.68.87) (Ping timeout: 256 seconds)
[23:55:15] *** Joins: aegon (~mike@174.127.249.180)
[23:56:05] <tomsmeding> conjecture: 'seq x ()' leaves a ghci top-level definition 'x' unevaluated precisely if 1. x is defined without 'let', and 2. x is defined as a plain data constructor, not a thunk
[23:56:12] <mark__> c (no let) is simply wrong. That's no WHNF. d (with let) did not stop at the first value con (somehow "overevaluated") but is not wrong.
[23:56:24] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[23:56:43] <tomsmeding> (d) is because of #10160 Ithink
[23:58:19] <mark__> i think technically it's ok because every normal form is also whnf
[23:58:23] <tomsmeding> (ghc HEAD does the same thing in for my last paste)
[23:58:27] <tomsmeding> yeah
