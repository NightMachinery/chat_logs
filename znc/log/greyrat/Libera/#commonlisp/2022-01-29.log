[00:04:39] *** Joins: kpoeck (~kpoeck@2a01:598:91b8:8ed5:c402:d8e7:8b50:ee6)
[00:04:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[00:05:22] <pjb> yottabyte: you must read the documentation of the system, to know what packages it defines, and from what package it exports the names of the functions you want to use.
[00:06:01] <pjb> yottabyte: note: systems are named by lower case strings such as "foo"; while packages are usually named by uppercase string like "FOO".
[00:07:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:10:21] *** Joins: lispy (~lispy@84.69.59.93)
[00:18:07] *** Quits: amb007 (~a_bakic@70.105.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:19:09] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:21:05] *** Quits: artchad (~user@public-gprs225103.centertel.pl) (Read error: Connection reset by peer)
[00:29:59] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:35:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:53] *** Joins: aeth (~aeth@user/aeth)
[00:37:25] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#commonlisp)
[00:51:28] *** Quits: pve (~pve@37-136-195-65.rev.dnainternet.fi) (Quit: leaving)
[00:54:29] *** Joins: dra (~dra@2a04:4540:6410:fa00:1daf:f543:2c33:ce21)
[00:55:35] *** Quits: kpoeck (~kpoeck@2a01:598:91b8:8ed5:c402:d8e7:8b50:ee6) (Quit: Client closed)
[01:01:10] <phoe> didi: cl-interpol
[01:02:00] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:05:53] <_death> Josh_2: I actually stopped pulling changes from iterate because some library that used it broke, iirc
[01:15:40] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:dd6:7aaa:2a1a:9b8d)
[01:16:21] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:5a5f:651a:7d:ff5:1a7f)
[01:18:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:19:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:20:35] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:dd6:7aaa:2a1a:9b8d) (Ping timeout: 268 seconds)
[01:22:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[01:23:54] *** Joins: aeth (~aeth@user/aeth)
[01:26:36] *** Joins: Guest339 (~Guest3@2a02:a31a:e044:fa80:6021:82e8:3fb:abe7)
[01:26:46] *** Quits: Guest339 (~Guest3@2a02:a31a:e044:fa80:6021:82e8:3fb:abe7) (Client Quit)
[01:28:30] *** Joins: jeosol (~jeosol@user/jeosol)
[01:29:31] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[01:33:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[01:33:31] *** Joins: Oladon (~olad@98.43.81.226)
[01:35:20] *** Joins: aeth (~aeth@user/aeth)
[01:46:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:49:02] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:5a5f:651a:7d:ff5:1a7f) (Remote host closed the connection)
[01:49:19] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:5a5f:651a:7d:ff5:1a7f)
[02:01:29] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:5a5f:651a:7d:ff5:1a7f) (Read error: Connection reset by peer)
[02:15:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:15:29] *** Quits: Guest7475 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:15:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:22:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:22:59] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[02:24:00] *** Joins: Catie (~user@user/catie)
[02:24:23] *** Joins: aeth (~aeth@user/aeth)
[02:24:40] *** Quits: dra (~dra@2a04:4540:6410:fa00:1daf:f543:2c33:ce21) (Quit: Leaving)
[02:32:58] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:34:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:35:52] *** Joins: aeth (~aeth@user/aeth)
[02:38:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:39:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:40:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:42:36] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:47:51] *** Quits: occ (~occ@user/occ) (Ping timeout: 245 seconds)
[03:00:10] *** Quits: madand (~user@45.12.27.30) (Ping timeout: 256 seconds)
[03:00:44] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[03:00:51] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:bdda:e08b:9698:a17c)
[03:02:56] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[03:03:49] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:05:27] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:31:33] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[03:36:35] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:39:10] *** Joins: ski (~ski@remote12.chalmers.se)
[03:42:40] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[03:56:37] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:00:11] <neominimum> mzan: I'm a perpetual newbie even though I've been casually using CL for a few years, my style suck-- I mean, my style is unconventional due my solitary practice. I'm trying now to be more conventional, so it's been great to get some specific feedback. Thanks for your suggestions. I wonder what is the reason why TCO needs to be supported by the standard, I mistakenly thought it was an implementation detail. I think I get it though... If the
[04:00:11] <neominimum> standard doesn't require it then implementations may not implement it. Does that make recursive code non-portable? Although my understanding is the standard doesn't require compilers to be optimising, professional users would not consider using one that lacked that facility. Like wise, I am interested to know if there is anyone that would consider a compiler that lacks support for TCO to be "Not Sufficiently Smart (tm)". I'm genuinely
[04:00:11] <neominimum> curious, not attempting to start an argument.
[04:02:46] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:03:45] <jasom> first you need to define "what is tail position" (defun foo () (let ((*bar* 3)) (baz)) ; <-- the call to baz here will likely *not* be tail optimized on any CL compiler due to the dynamic binding of *bar*
[04:04:32] *** jdz_ is now known as jdz
[04:05:01] <jasom> Then once you've done that, you need to ensure that the function is compiled, as most interpreters will not eliminate the stack frame for tail calls
[04:06:02] <jasom> Then once you've done that, you need to ensure that the "optimize" declaration is set sufficiently high (in either the absolute or relative sense; some compilers may use the relative values of optimize v. debug, for example)
[04:06:27] <jasom> Or you could just use iteration
[04:08:01] <jasom> The one place I like to rely on TCO is when implementing state-machines; in that case the non-tail call approach is less readable IMO and will involve passing either closures or a list of function and arguments, both of which are more unweildy than a tail-call
[04:08:10] *** Quits: mrmr (~mrmr@user/mrmr) (Quit: The Lounge - https://thelounge.chat)
[04:08:50] *** Joins: Everything (~Everythin@37.115.210.35)
[04:09:11] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:09:20] <jasom> I should also point out that non-tail-recursive code is *definitely* non-portable; the maximum recursion depth may vary not just from implementation to implementation, but from machine to machine even when using the same implementation
[04:11:11] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#commonlisp)
[04:16:10] <neominimum> Ok, so it's definitely not feasible in some situations due to environmental factors and the use of some language features.
[04:20:35] <neominimum> I do like recursion, more because I find it challenging. To me it definitely looks better than some iterative implementations sometimes, but as they say "When in Rome..."
[04:21:32] <jasom> Oh, there are times when recursion is more readable than iteration, but, in my experience, few of those cases are tail-recursive
[04:22:08] <jasom> The most obvious example is any sort of tree walker; the recursive form is almost trivial, the iterative form involves an explicit stack.
[04:22:54] *** Joins: igemnace (~ian@user/igemnace)
[04:24:26] <jasom> The na√Øve fibonacci is the most readable way to do fibonacci; I think the iterative vs. tail-recursive are of similar readability.
[04:26:06] <EdLangley[m]> Anything that's automactically TCOable can be manually TCOed with a TAGBODY
[04:26:10] <sm2n> for state machines, why not use tagbody?
[04:26:14] <sm2n> hah
[04:26:36] <EdLangley[m]> Clojure's LOOP/RECUR is an example of an abstraction that makes this a bit nicer.
[04:32:52] <jasom> sm2n: tagbody doesn't let you pass arguments
[04:33:34] <EdLangley[m]> If you (psetf arg1 (step arg1) arg2 (step2 arg2)) (go start) you can "pass arguments"
[04:33:40] <EdLangley[m]> This is just making TCO explicit
[04:33:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[04:34:40] <jasom> EdLangley[m]: right, but that's far less clear and sm2n was asking "why not use tagbody"
[04:34:53] <EdLangley[m]> Yeah, but you can solve this with a macro
[04:35:17] <EdLangley[m]> (defun-tco foo (arg1 arg2) ... (recur (step arg1) (step arg2)))
[04:35:19] <neominimum> If I understand correctly now. In the iterative form, walking a non-linear data structure, requires the use of an explicit stack. Compared to the recursive form utilising the implicit call stack.
[04:35:24] <jasom> also if you break in the middle of the state-machine, you more quickly get the information you want with most implementations it will show the current function
[04:36:08] *** Joins: aeth (~aeth@user/aeth)
[04:36:50] <jasom> neominimum: right, my comment was that most of the times that recursion is more clear than iteration, it's due to the implicit call-stack, which means it's not a tail-call.
[04:37:18] <EdLangley[m]> Hmm, expanding to (defun foo (...) (macrolet ((foo () `(go start))) (tagbody start ...))) would mean you could just turn recursive calls into GOs
[04:37:22] *** Quits: raeda (~raeda@72.49.252.109) (Ping timeout: 260 seconds)
[04:37:41] <neominimum> jasom: I see, that's helpful
[04:38:20] <jasom> EdLangley[m]: at that point I'd rather just do a loop/apply/funcall and return a function/args list from each state
[04:38:54] <EdLangley[m]> I personally like the tagbody form
[04:39:19] <EdLangley[m]> I've used it in PHP before when the recursive version of a function was significantly easier to write than the iterative one.
[04:39:43] <jasom> I've done both and I find the tagbody gets unweidly quickly for complicated state machines
[04:40:22] <jasom> macros help a lot, but then can make debugging a bit more "exciting"
[04:40:41] <jasom> anyway, i am off to dinner now.
[04:41:36] *** Joins: raeda (~raeda@72.49.252.109)
[04:49:16] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[04:54:29] *** Joins: occ (~occ@user/occ)
[04:54:33] *** Quits: lispy (~lispy@84.69.59.93) (Ping timeout: 250 seconds)
[05:00:36] *** Joins: lispy (~lispy@84.69.59.93)
[05:03:58] *** Joins: akoana (~ah@user/akoana)
[05:15:23] *** jgkamat- is now known as jgkamat
[05:22:57] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-202.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:27:03] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Read error: Connection reset by peer)
[05:28:10] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[05:29:41] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[05:29:41] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:bdda:e08b:9698:a17c) (Read error: Connection reset by peer)
[05:32:56] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-178.dsl.bell.ca)
[05:35:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:48:13] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Remote host closed the connection)
[05:48:13] *** Joins: [smlckz] (3329f5a75b@198.108.77.17)
[05:48:30] *** Quits: [smlckz] (3329f5a75b@198.108.77.17) (Changing host)
[05:48:30] *** Joins: [smlckz] (3329f5a75b@user/smlckz)
[05:50:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:52:38] *** Joins: aeth (~aeth@user/aeth)
[05:53:15] *** Joins: danilo` (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[05:53:39] *** Quits: danilo` (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Remote host closed the connection)
[06:07:03] *** Quits: lispy (~lispy@84.69.59.93) (Changing host)
[06:07:03] *** Joins: lispy (~lispy@user/lispy)
[06:12:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[06:15:49] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:20:22] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[06:22:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:24:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:24:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:27:17] *** Quits: lispy (~lispy@user/lispy) (Quit: O/)
[06:29:18] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:29:50] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:34:40] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[06:35:22] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:43:57] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[07:30:19] <beach> Good morning everyone!
[07:31:31] *** Joins: igemnace (~ian@user/igemnace)
[07:36:32] <s-liao> Morning
[07:45:44] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[07:56:54] *** Joins: Oddity (~Oddity@user/oddity)
[08:12:07] *** Joins: semz_ (~semz@user/semz)
[08:13:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:14:46] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:16:23] *** semz_ is now known as semz
[08:23:48] *** Joins: contrapunctus_ (a75f5b1571@jabberfr.org)
[08:26:47] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[08:33:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:41:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleepin)
[08:45:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:52:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:54:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:55:51] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:56:21] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:02:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:02:57] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:03:03] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[09:03:29] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[09:03:33] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:05:11] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Read error: Connection reset by peer)
[09:05:29] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[09:06:18] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[09:06:43] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Remote host closed the connection)
[09:08:56] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[09:10:29] *** Joins: Oladon (~olad@98.43.81.226)
[09:22:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:32:00] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[09:32:25] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:247f:ed9b:32f9:1faf)
[09:32:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[09:35:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:36:54] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:45:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:52:42] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[09:53:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:01:46] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[10:02:18] *** Joins: asarch (~asarch@189.250.218.98)
[10:02:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[10:03:14] <asarch> If you have: '(:beers 20 :tacos 3), how would you add the property :pizza 4 to the list?: (:beers 20 :tacos 3 :pizza 4)
[10:04:02] *** Joins: aeth (~aeth@user/aeth)
[10:04:17] <beach> asarch: Does the order matter?
[10:04:20] <asarch> (push :pizza *the-list*) (setf (getf *the-list* :pizza) 4) overwrites a property name: (:pizza 4 20 :tacos 3)
[10:04:27] <asarch> No, it doesn't
[10:04:58] <beach> Then (list* :pizza 4 list)
[10:05:12] <beach> Possibly with (setf list (list* :pizza 4 list)).
[10:05:45] <moon-child> you can simply (setf (getf *the-list* :pizza) 4)
[10:05:59] <beach> Or that.
[10:06:08] <mfiano> The problem might be the original question made a literal list as its example to be mutated.
[10:06:13] <moon-child> this will behave slilghtly differently to beach's suggestion, if pizza happens to already be contained within the property list
[10:06:19] <mfiano> But I didn't read everything, and I'm now out for the night
[10:06:26] <moon-child> mfiano: good point
[10:11:16] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:11:20] <asarch> Thank you!
[10:11:22] <beach> asarch: Also, I would start using more interesting food examples, like :SUSHI, :MAGRET-DE-CANARD,
[10:11:25] <asarch> Thank you very much! :-)
[10:11:26] <beach> etc.
[10:11:36] <asarch> I will
[10:11:42] <lisp123> Now I am hungry..
[10:15:10] <asarch> Iguana
[10:15:19] <asarch> Do you like iguana?
[10:15:46] <beach> Never tried it.  Probably tastes like chicken, right?
[10:16:16] <asarch> Never tried either
[10:16:46] <beach> I had dog meat in Vietnam once.
[10:16:59] * beach stops the off-topic now.
[10:37:20] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[10:40:53] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[10:46:01] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[10:56:31] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[10:57:14] <asarch> Auf wiedersehen und bis bald! :-)
[10:57:14] *** Joins: occ (~occ@user/occ)
[10:57:19] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[11:06:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:29:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:37:17] *** Joins: pve (~pve@37-136-197-20.rev.dnainternet.fi)
[11:39:59] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[11:57:44] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:b1e2:fc8a:5526:e47b)
[12:00:49] <lisp123> Is DEFCONSTANT faster than DEFVAR / DEFPARAMETER?
[12:00:51] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[12:01:29] <phoe> usually, yes
[12:01:32] <beach> I would think at least as fast.
[12:01:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:02:00] <beach> DEFCONSTANT means the compiler can substitute the value for the name when references are compiled.
[12:02:01] <phoe> with constants, the compiler doesn't need to do variable access, it is allowed to splice literal constant values wherever the constant is used
[12:02:02] <moon-child> on sbcl, at least, defconstant improves the quality of code generation
[12:02:09] <lisp123> Thanks!
[12:02:32] <phoe> and that means no global value lookup and no dynamic binding lookup, which speeds things down, and that the compiler can always figure out the type of the value ahead of time
[12:03:09] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:b1e2:fc8a:5526:e47b) (Ping timeout: 268 seconds)
[12:03:55] <lisp123> That all makes sense
[12:25:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:28:19] <lisp123> I was thinking of this idea, let me know if there are any flaws in it: I USE a package, say CLIM, and then I don't use any package qualifiers.
[12:28:56] <lisp123> Later on, I run a function that reads a file, and adds package qualifiers for all symbols not in the current-package or in CL
[12:29:14] <lisp123> Then I simply remove the starting USE PACKAGE
[12:30:40] <phoe> adds package qualifiers? as in, it reads a Lisp file and prints back out package-qualified symbols wherever applicable?
[12:31:34] <beach> lisp123: Certain re-evaluations of the DEFPACKAGE form with different options exposes undefined behavior.
[12:32:05] <beach> lisp123: And why would you intentionally make life harder for the person reading your code by omitting package prefixes the first time around?
[12:32:16] <lisp123> It would be outside of the Lisp Image / System. As in destructively modify the file to add in package prefixes
[12:32:37] <beach> What purpose would that serve?
[12:32:40] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[12:33:03] <beach> Then you have source code that doesn't correspond to what's in the image.
[12:33:06] <lisp123> Not having to write package qualifiers while I'm developing. And once I'm "done" M-x insert-package-qualifiers
[12:33:13] <beach> So you are lying to the person reading the source code.
[12:33:50] <lisp123> Well they would only receive the "final file" with all the package qualifiers
[12:33:57] <beach> lisp123: So you mean, you magically add package prefixes to all your imported symbols later on?
[12:34:08] <lisp123> Yes, then restart the image
[12:34:17] <phoe> I guess it would work, but I wouldn't trust such a piece of software
[12:34:29] <phoe> mostly because wouldn't trust myself that I'd tell it to get all package qualifiers right
[12:34:51] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (Quit: WeeChat 3.4)
[12:35:22] <beach> But if you restart the image, you need to re-evaluate the DEFPACKAGE form, no?
[12:35:36] <phoe> this, plus I generally dislike the :USE option because is dangerous even if you get all package qualifiers right
[12:36:08] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[12:36:31] <beach> There is no such thing as a "package qualifier".
[12:36:51] <lisp123> beach: Yes. So I would manually remove the :USE option before reloading the files (including packages.lisp), although I'm sure there would be a way of finding the defpackage form then destructively modifying the file
[12:37:49] <lisp123> This is basically like a clean up exercise, not meant to be part of the image. Just to save having to type package prefixes during development
[12:38:22] <beach> lisp123: So if you accidentally use an imported symbol as a lexical variable, this symbol is going to have a package prefix later?
[12:38:49] <beach> It sounds like a horrible idea to me.  And for what?  Avoiding some typing?
[12:38:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:38:58] <beach> I mean, use an emacs abbrev instead.
[12:39:08] <lisp123> So if you accidentally use an imported symbol as a lexical variable, this symbol is going to have a package prefix later? -> Thanks
[12:39:15] <lisp123> Didn't think of that :D
[12:39:24] <lisp123> Toss this idea out then
[12:39:29] <beach> Good!
[12:40:16] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[12:46:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:47:17] *** Joins: shka (~herr@109.231.0.226)
[12:54:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[12:56:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:57:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[12:57:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:59:03] *** Joins: s-liao20 (~s-liao@101.86.96.21)
[13:01:11] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:04:36] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[13:06:46] *** Joins: traveller3141 (~chatzilla@95-165-108-8.static.spd-mgts.ru)
[13:19:53] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[13:26:04] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:28:22] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[13:30:41] <chrnybo> I'm golfing on parsing four letters in a-z into a single number; is there a "shift left and add" operation in CL?
[13:31:55] <beach> That would be two operations.
[13:32:13] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[13:33:30] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e0c2:1cb3:66c2:bea2)
[13:33:46] <moon-child> beach: shift and add can be conceived of as a unitary 'append digits' operation.  Most things can be decomposed; that does not mean it is not worthwhile to think of them as atomic in some context
[13:34:17] <beach> moon-child: Why are you telling me this?
[13:34:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:34:40] <moon-child> because you said that 'shift left and add' is two operations
[13:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:35:13] <beach> moon-child: Do you have a Common Lisp operation that will do both?  I can't think of any.
[13:35:39] <moon-child> I do not know of any either
[13:35:52] <beach> That is precisely what I said, no?
[13:36:01] <beach> "That would be two operations."
[13:37:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:37:40] <moon-child> that was not how I interpreted it.  chrnybo asked 'is there a "shift left and add" operation in CL?'  Your response I interpreted as 'that is not an operation, but two', not 'CL has no such operation'
[13:39:05] <phoe> (+ integer-1 (ash integer-2 shift))
[13:39:14] <phoe> should be good enough for practical use‚Ñ¢
[13:43:34] <beach> chrnybo: There is not a single Common Lisp operator that will do both those operations.  So in Common Lisp you need to use two operators to achieve the effect you want.
[13:43:41] <beach> moon-child: ^ better?
[13:44:31] <moon-child> I find that clearer
[13:51:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[13:53:22] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[13:54:14] *** Joins: Krystof (~user@81.174.155.115)
[13:57:43] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[13:59:39] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:55b8:a3b1:cf88:c42b)
[14:03:53] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[14:07:06] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:55b8:a3b1:cf88:c42b) (Ping timeout: 268 seconds)
[14:11:44] <chrnybo> parse-integer n :radix 36 and format t "~36R" killed the fun, though.
[14:13:19] <beach> chrnybo: You did not include digits in your possible characters, so it was not clear that your letters meant the same as they do in Common Lisp.
[14:13:43] *** Quits: s-liao20 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:20:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:21:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:23:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:25:37] <chrnybo> beach: You're right, of course.
[14:32:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:32:22] <scymtym> Xach: phoe: i would like to move lparallel to sharplispers. any objections?
[14:51:49] <phoe> scymtym: no objections, let's do it
[14:53:48] <scymtym> phoe: great. let's see wait Xach thinks
[14:57:37] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[15:17:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:22:36] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[15:23:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:34:50] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:37:12] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[15:40:26] *** Quits: traveller3141 (~chatzilla@95-165-108-8.static.spd-mgts.ru) (Quit: ChatZilla 0.10 [SeaMonkey 2.53.10.2/20211220132845])
[15:45:51] <lisp123> If I need to check if a character is one of a list of characters
[15:45:58] <lisp123> Whats the most efficient way to do it?
[15:46:08] <lisp123> Hash Table?
[15:51:20] <semz> lisp123: Efficient in what sense?
[15:52:06] <lisp123> Speed, I guess
[15:52:11] <ns12> lisp123: Just use a plain list. Hash table has some additional overhead.
[15:52:12] <semz> I don't think optimizing this for runtime is worth it unless your list is huge (in that case a hash table would be a good idea)
[15:52:23] <semz> just use find/position or whatever is convenient and clear
[15:56:17] <lisp123> Looks like SBCL uses arrays
[15:56:27] <lisp123> to determine ALPHANUMERICP
[15:57:25] <lisp123> semz: Because its a low-level function I need (a varaint on ALPHANUMERICP), optimisation is important
[15:59:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:59:39] <pjb> lisp123: it depends on the list of characters.
[15:59:58] <lisp123> I'll use a Hash Table for now, unless someone has a better idea. I assume the char-codes were ordered in a way that allowed SBCL and other implementations to use an array
[16:00:07] <pjb> lisp123: in general the fastest would be to index a vector giving the answer: (aref answer (char-code ch))
[16:00:31] <lisp123> pjb: Thanks!
[16:00:38] <lisp123> I will do that
[16:01:01] <pjb> lisp123: since character sets are usually small  (less than 256), a bit-vector would be quite small (only 32 bytes, less than a hash-table memory overhead!)
[16:01:38] <pjb> lisp123: but if you consider unicode, then the bit-vector will have to be bigger:  139264 bytes.
[16:01:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:01:41] <lisp123> pjb: Thanks. Looking again at the SBCL code, now I suspect they may be doing the same thing you suggest
[16:01:48] <semz> That too depends on the exact set though. Honestly I suspect that optimizing this is a waste of time, but I don't know what lisp123 is using it for.
[16:02:03] <pjb> lisp123: this can be compensated if you can restrict them to some range.
[16:02:37] <lisp123> pjb: Got it
[16:03:02] <lisp123> semz: I have to search for next word in an editor command I am writing, without using the underlying version of Emacs / whatever
[16:04:38] <lisp123> Or go to the next paragraph (which has much more characters to search through). And I don't want to keep a history of start/end points since they can change if the buffer changes
[16:08:19] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[16:15:41] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[16:24:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:39:56] <lisp123> ;; An implementation using ASCII character encoding  might return these values:
[16:39:56] <lisp123> (char-code #\$) =>  36
[16:40:21] <lisp123> Do all implementations return the same value for CHAR-CODE for a given character or does it depend on some file or system level encodings?
[16:41:07] <beach> The standard doesn't specify it.
[16:42:23] <beach> clhs char-code
[16:42:24] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_char_c.htm
[16:42:40] <lisp123> So would I be safe to define it in code, like (defconstant +space-char-code+ (char-code #\Space)) and then use that constant elsewhere to check if a particular character is a space?
[16:43:20] <lisp123> Or is there some weird way the char code may change in between retrieving it, storing it in a constant and then using it in code
[16:44:09] <phoe> no
[16:44:10] <beach> I think you can safely define it as a constant.  I can't see how it could possibly change over time.
[16:44:28] <phoe> AFAIK an implementation should always return a constant char-code for a given character
[16:44:36] <phoe> and you are not going to load one impl's compiled files into another impl
[16:44:46] <phoe> so you can't worry about cross-pollination of any kind
[16:44:50] <lisp123> Thanks!
[16:48:12] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[16:48:13] <lisp123> Okay, so here's a bit of a trivia question: Are both of these forms equivalent in speed: (eql char #\Space) and (eq (char-code char) +space-char-code+)
[16:49:46] <Xach> lisp123: No
[16:49:59] <Xach> (maybe)
[16:50:25] <Xach> lisp123: i would strongly expect the former to perform better
[16:50:52] <beach> lisp123: They *could* generate the same code, but the compiler would have to be good.
[16:51:09] <lisp123> Xach: I think so too, but wonder how char equality is actually done
[16:51:14] <beach> lisp123: But don't use EQ though.
[16:51:42] <beach> lisp123: It is a comparison of a register in a good implementation.
[16:51:43] <lisp123> beach: Not a good idea to use eq for comparing numbers?
[16:51:51] <beach> lisp123: Exactly.
[16:52:11] <lisp123> Thanks, well noted
[16:54:37] <scymtym> Xach: would you be fine with maintaining lparallel in sharplispers?
[16:56:41] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 250 seconds)
[17:01:02] *** Joins: artchad (~user@public-gprs233403.centertel.pl)
[17:02:15] <phoe> what is the best way of checking whether a symbol has ever been the name of a DEFTYPE or DEFCLASS or DEFINE-CONDITION or DEFSTRUCT?
[17:02:29] <phoe> the latter, FIND-CLASS can do; I have an issue with DEFTYPE though
[17:03:10] <phoe> typexpand-1 works, thanks
[17:09:41] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Ping timeout: 250 seconds)
[17:20:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:28:31] *** Joins: morganw (~user@80.225.24.132)
[17:29:37] <Xach> scymtym: yes
[17:29:44] <Xach> scymtym: in general fine with anything
[17:29:55] <scymtym> Xach: i see, thanks
[17:30:42] <mzan> neominimum: you said " In the iterative form, walking a non-linear data structure, requires the use of an explicit stack. Compared to the recursive form utilising the implicit call stack."
[17:31:44] <skeemer> people i was reading practical common lisp, and i was so excited about the higher order function trick that is being used here https://gigamonkeys.com/book/practical-a-simple-database.html
[17:32:16] <skeemer> more precisely this piece of code: https://bpa.st/OYXA
[17:32:27] <mzan> as beach already said, in practice a lot of nested data structures are trees or similar. In these cases you have often a not extremely deep hierarchy, so probably in these case you can write some recursive code, and use the iterative form only for the final leaf.
[17:32:40] <skeemer> i was wondering, are there other of these cool tricks with Higher order functions that can be used in more day-to-day applications?
[17:33:52] <phoe> skeemer: yes
[17:34:04] <phoe> this is a function that returns a closure
[17:34:20] <phoe> and these are very commonly used, e.g. in CL-PPCRE
[17:34:40] <yitzi> skeemer: Its a natural part of CL. Examples are closure construction are all over.
[17:35:11] <skeemer> phoe, i understand the coolness, but probably i cannot come up with other examples where i could use such things...
[17:35:17] <skeemer> can somebody make me other practical examples?
[17:35:35] <skeemer> or how can i practice this? are there any programming exercises online for me to train this ability to code like that?
[17:36:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:36:22] <mzan> neominimum: for example I wrote a rather classical code-formatting function. It accepts as parameter the indentation level, and for each nested scope, it calls itself increasing its parameter. It i recursive. But how many nested scope are there usually? Less than thousands. Then for the instructions inside the current scope, I use a normal iterative loop.
[17:37:07] <mzan> So in many cases you can combine recursion with explicit iterative loops. You use recursion for the hierarchy part, and recursion for the leaf/final-data.
[17:37:28] <skeemer> mzan, why should one use iteration for the final leaf?
[17:37:35] <skeemer> and not again recursion?
[17:37:53] <mzan> *and iteration for the leaf/final-data
[17:38:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:38:24] <mzan> skeemer: because CL does not support in the standard tail-call optimization, so recursion of potentially many data can overflow the stack
[17:39:11] <skeemer> okok
[17:40:37] <Xach> skeemer: i have been very happy with a query system based on simple functions that return object matchers, and then a few logical glue functions that compose simpler functions into arbitrary expressions.
[17:41:10] <Xach> i'm working with a system that produces thousands of sets of change records for certain objects, and i want to select only certain objects of interest interactively at the REPL
[17:42:16] <Xach> so i can write something like (=and (=matches-text "Foo") (=score> 100) (=not (=color "purple")))) -- here the "=" prefix indicates a function that returns a function.
[17:43:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:43:09] <skeemer> Xach, ok so instead of writing a single where function, you have that dispatched to different functions right?
[17:43:31] <skeemer> i meant a single "where" function as in PCL
[17:43:53] <skeemer> Xach, are there other tricks for closures? i mean other cool uses like this one?
[17:44:18] <Xach> skeemer: sicp has a number of examples
[17:44:30] <Xach> like a sort of message-passing object system with closures
[17:44:45] <Xach> not that i'd use that specifically with CLOS handy, but it is educational
[17:44:52] <skeemer> okok Xach
[17:45:03] <Xach> also delayed streams and things like that
[17:47:26] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 245 seconds)
[17:49:31] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[17:53:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:54:54] <_73> In a function docstring is the backquoute/single-quote convention meant to be used to denote any symbol that is not local the function? For example: (defun foo (arg) "This function calls `baz'" ...)
[17:55:19] <beach> _73: There is no such convention.
[17:55:51] <_73> Oh is it just an elisp thing then?
[17:56:23] *** Joins: Bike (~Bike@71.69.170.70)
[18:04:57] *** Joins: dra (~dra@2a04:4540:6422:4100:b557:981:2db:8b1)
[18:07:07] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:09:27] <phoe> some Lisp code uses it, but it isn't widespread in CL code
[18:09:47] <phoe> in particular, CL docstring formatting is Wild West
[18:11:53] <_73> I started using it cause emacs highlights it for me so I figured it was a thing in CL. But then I couldn't find anyone elses code out there using it.
[18:12:13] <lisp123> highlights as in allows you to go to its source?
[18:12:26] <_73> highlights as in applies a face
[18:12:35] <lisp123> ah
[18:12:48] <_death> the elisp reader is case preserving, so `bar' is often used, while CL's reader is upcasing by default so we just say BAR.. some elisp code uses the latter and some CL code uses the former as well
[18:13:18] <lisp123> I find upcasing a good way to write docstrings in CL
[18:14:46] <chrnybo> _73: care to point to relevant emacs documentation on the backquoute/single-quote convention? I don't see it mentioned in (elisp) Function Documentation, but I notice that it works in practice, i.e. a phrase such as `ssh' get highlighted and is a clickable link to the  documentation of the function ssh.
[18:14:46] *** Joins: s-liao90 (~s-liao@101.86.96.21)
[18:15:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:15:15] <phoe> I am upcasing stuff, but e.g. Serapeum uses `foo'
[18:15:18] <lisp123> But then, you have systems like LW, who like to use natural language commands (strings), which is not a bad idea too for end user functions. Not sure if CLIM / Lisp Machines followed the same convention
[18:16:50] *** Joins: McParen (~mcp@user/mcparen)
[18:19:23] <Josh_2> Good afternoon
[18:20:26] <lisp123> The best advice Emacs Documentation Guidelines gave was to prempt likely follow-on questions and include them in the docstring. E.g. one could add to the docstring for NTH "To access elements of a Sequence, use ELT."
[18:20:34] <lisp123> gave to me*
[18:22:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:27:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:29:51] *** Quits: s-liao90 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:32:16] *** Joins: alvaro121 (~aa@201.230.126.66)
[18:55:17] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[19:09:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:17:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[19:17:29] *** Parts: McParen (~mcp@user/mcparen) ()
[19:17:52] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[19:28:45] *** Joins: s-liao50 (~s-liao@101.86.96.21)
[19:29:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:33:12] *** Joins: domovod (~domovod@176.196.122.197)
[19:34:04] *** Quits: s-liao50 (~s-liao@101.86.96.21) (Quit: Client closed)
[19:39:16] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e0c2:1cb3:66c2:bea2) (Remote host closed the connection)
[19:47:51] *** Quits: dra (~dra@2a04:4540:6422:4100:b557:981:2db:8b1) (Remote host closed the connection)
[19:48:09] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[19:49:58] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Remote host closed the connection)
[19:50:43] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[19:56:07] *** Joins: treflip (~user@user/treflip)
[19:58:41] *** Joins: igemnace (~ian@user/igemnace)
[19:59:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[20:03:14] * phoe shaves a yak, sighs, relaxes
[20:03:20] <nij-> Anyone uses parenscript? While it supports some lisp constructs (e.g. let, defun, loop), it misses some too (e.g. mapc, mapcar). Is there a way to extend parenscript to support those without hacking the code base?
[20:06:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:07:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:07:19] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:08:42] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[20:10:02] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[20:10:02] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[20:14:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:16:13] <phoe> nij-: just define mapcar yourself
[20:16:16] <phoe> (parenscript:ps (defun mapcar (function list) (loop for element in list collect (funcall function element))) (mapcar (lambda (x) (+ x 10)) '(1 2 3)))
[20:16:44] <nij-> good idea @@
[20:20:11] *** Joins: josrr (~user@201.141.237.50)
[20:22:36] * josrr nij-: there is the runtime library https://parenscript.common-lisp.dev/reference.html#section-runtime-library
[20:25:39] *** Joins: frodef (~frode@46.212.93.4)
[20:26:17] *** Quits: frodef_ (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[20:29:31] <nij-> josrr Do you understand how to use it? That section is written pretty minimally..
[20:32:32] <josrr> nij-: I think you need to compile ps:*ps-lisp-library*
[20:32:46] <josrr> nij-: (ps:ps* ps:*ps-lisp-library*)
[20:35:11] <nij-> !Nice! I can start writing my own "scripts" and push into *ps-lisp-library* :D
[20:39:08] <josrr> nij-: or not, load somehow the runtime library in the browser
[20:39:27] <nij-> What does the runtime mean here @@?
[20:39:57] <josrr> nij-: the result of (ps:ps* ps:*ps-lisp-library*)
[20:40:09] <nij-> Well.. the lib only contains 7 functions. I suppose I need to write some of the ones i like.
[20:41:19] <josrr> nij-: oh, the word "scripts" confused me
[20:50:26] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:52:47] *** Joins: foxfromabyss (~foxfromab@2a01:c23:6599:4a00:c1ad:b20:e603:2aa1)
[20:54:13] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[20:55:51] <foxfromabyss> hi! is it possible to get something like `:a :b` as a result of a macro expansion, is opposed to `(:a :b)` ?
[20:56:12] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[20:56:16] <nij-> Use ,@
[20:56:35] <foxfromabyss> as the outer form?
[20:56:39] <foxfromabyss> *at the
[20:57:23] <foxfromabyss> `(defmacro splice-into-outer (foo) ,@foo)` ?
[20:58:16] <foxfromabyss> sbcl says "comma not inside backquote"
[20:58:49] <foxfromabyss> and omitting the comma breaks the variable obviously
[20:59:38] <foxfromabyss> i want to basically achieve the following
[20:59:39] <foxfromabyss> `(defparameter foo (list 1 2 3))`
[20:59:39] <foxfromabyss> `(splice-into-outer foo)` `=>` `1 2 3`
[21:00:19] <beach> You mean three values?
[21:00:27] <foxfromabyss> three variables
[21:00:34] <beach> I see no variables.
[21:00:38] <foxfromabyss> i mean..
[21:00:44] <beach> I see three numbers, 1, 2 and 3.
[21:00:47] <foxfromabyss> I know i know
[21:01:03] <foxfromabyss> let me come up with a better example
[21:01:57] <Josh_2> you want to convert a list into multiple-values ?
[21:02:11] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[21:02:12] <beach> Josh_2: Let's see the example first.
[21:02:32] <beach> Josh_2: It doesn't look like foxfromabyss clearly knows what is wanted.
[21:02:57] <beach> Unfortunately I can't stick around.  I need to go fix dinner for my (admittedly small) family.  Sorry.
[21:03:14] <foxfromabyss> what i want to achieve in the bigger scope is this:
[21:03:14] <foxfromabyss> `(splice-into-outer (x y z)` `=>` `:x x :y y :z z`, where the keys have the same name as the variables, and it supports multiple variables
[21:03:14] <Josh_2> Cya beach
[21:03:16] <foxfromabyss> all good
[21:03:17] <foxfromabyss> cya
[21:03:22] <Josh_2> uh
[21:03:29] <phoe> foxfromabyss: you need the outer form to have a ,@
[21:03:35] <Josh_2> maybe you should just keep the list and then use apply
[21:03:38] <phoe> a single macro call can only expand into a single form
[21:03:40] *** Joins: amb007 (~a_bakic@70.105.204.77.rev.sfr.net)
[21:03:59] <phoe> when a macro needs to "contain" multiple forms, it usually expands into a (progn ...)
[21:04:03] <foxfromabyss> i'll make an ever better example of what i want to achieve :P
[21:04:21] <phoe> in particular, something like (list 1 (foo) 3) then this is always a list of length 3 - (FOO) can only expand to a single Lisp value
[21:04:56] <foxfromabyss> https://plaster.tymoon.eu/view/2896#2896
[21:05:16] <foxfromabyss> i really want to deduplicate this :(
[21:05:56] <Josh_2> You can make a macro to access the jsown then apply with make-instance
[21:06:22] <phoe> doesn't jsown have some sort of semiautomated facility to turn json objects into CL instances?
[21:06:45] <foxfromabyss> only with extra libs
[21:06:46] <foxfromabyss> and i am not using the conversion lib on purpose
[21:06:50] <foxfromabyss> > You can make a macro to access the jsown then apply with make-instance
[21:06:51] <foxfromabyss> can you elaborate?
[21:07:15] <Josh_2> foxfromabyss: you do not need to remove the list from (:x x ..) you can simply use (apply #'make-instance <your plist>)
[21:07:37] <foxfromabyss> oh hm, interesting
[21:07:37] <foxfromabyss> very smart
[21:07:38] <foxfromabyss> i see, thanks!
[21:08:11] <Josh_2> (apply #'make-instance '%api-call-failure '(:object 1 :processor 1 :hash 1 :c 1)) => <%API-CALL-FAILURE {1008694863}>
[21:08:55] <foxfromabyss> big thanks
[21:11:13] <Josh_2> No problem
[21:18:53] <chrnybo>  /join #scala
[21:23:34] <foxfromabyss> is it possible to map between keyword and string? i.e. `:key` => `"key"` ?
[21:23:47] <phoe> yes
[21:23:59] <foxfromabyss> how do I achieve that? :D
[21:23:59] <phoe> grab the symbol name, :key ‚Üí "KEY"
[21:24:11] <phoe> and then frob the symbol case properly
[21:24:23] <foxfromabyss> but how do I grab the symbol name though?
[21:24:24] <phoe> you'll likely want some function to convert from Lisp's kebab-case to JSON camelCase
[21:24:28] <phoe> clhs symbol-name
[21:24:28] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_symb_2.htm
[21:24:58] <foxfromabyss> super cool, big thanks!
[21:38:59] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5c8e:2aa6:3648:16e2)
[21:39:14] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:41:23] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:896a:f1bd:bc6a:1089:6410)
[21:41:27] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:247f:ed9b:32f9:1faf) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[21:45:17] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:5c8e:2aa6:3648:16e2) (Ping timeout: 268 seconds)
[21:49:29] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[21:55:19] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:00:59] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:05:37] *** Joins: Bike (~Bike@71.69.170.70)
[22:07:16] <foxfromabyss> Josh_2 `(defclass testobj () ((x :accessor x :initarg :x)))`
[22:07:17] <foxfromabyss> `(apply #'make-instance 'testobj (:x 5))` this fails with `:x` being an undefined function
[22:07:17] <foxfromabyss> i can quote it it this example, but if i do smth like `(apply #'make-instance 'testobj (get-values-for-x))`, i can't quote the values for `apply` :(
[22:07:59] <Josh_2> '(:x 5)
[22:08:17] <foxfromabyss> yes but if i do `get-values-for-x` that returns `(:x 5)` then that fails
[22:08:26] <foxfromabyss> where `get-values-for-x` is actually a macro
[22:08:32] <Josh_2> well thats why
[22:08:35] <Josh_2> use a function
[22:08:40] <Bike> or have (get-values-for-x) expand into '(:x 5)
[22:08:47] <Bike> and not (:x 5)
[22:08:57] <Bike> (list :x 5) would also be fine
[22:09:07] <foxfromabyss> oh hm .. thanks :)
[22:09:51] <Bike> you can do (macroexpand-1 '(get-values-for-x)) to see what ends up there
[22:09:54] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Remote host closed the connection)
[22:10:42] <Xach> Someone keeps emailing me questions about Vecto and fonts, but their email box is full and my replies keep getting held up :(
[22:10:42] <skeemer> what common lisp library do you suggest to plot stuff... i need something similar to matplotlib, or ggplot
[22:13:49] <Josh_2> There are libraries that work for gnuplot
[22:15:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[22:19:02] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[22:20:59] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:22:46] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:24:58] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[22:25:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:27:41] *** Joins: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[22:36:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:896a:f1bd:bc6a:1089:6410) (Read error: Connection reset by peer)
[22:40:17] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[22:42:38] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:44:49] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:45:43] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 268 seconds)
[22:46:37] *** Joins: jealousmonk (~user@2804:431:e7c5:6582:4810:3ee3:3f59:e857)
[22:47:16] <edgar-rft> skeemer: I usually write gnuplot data into a file and then use gnuplot from the commandline, but here are some other alternatives -> https://www.cliki.net/plotting
[22:48:01] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[22:50:55] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:51:12] *** Joins: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1033-static.midco.net)
[22:53:19] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:54:02] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-102F-static.midco.net) (Ping timeout: 240 seconds)
[22:56:53] *** Quits: shozo (~user@178.74.52.55) (Remote host closed the connection)
[23:00:57] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:02:04] <phoe> literate programming time - https://github.com/phoe/articles/blob/main/2022-01-29-static-let/static-let.md
[23:04:32] <edgar-rft> hmm, from where do I get a literate that I can program?
[23:07:25] <White_Flame> isn't literate programming usually about being documentation with code interspersed?
[23:08:18] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[23:10:07] <phoe> White_Flame: I think it is - I kind of abuse this idea to also include stuff that teaches writing Lisp in general
[23:10:33] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:11:39] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:12:01] *** Joins: shozo (~user@178.74.52.55)
[23:12:16] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:15:29] *** Joins: rogersm (~rogersm@90.166.180.250)
[23:19:04] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[23:21:23] <moon-child> phoe: 'we did not supply the second argument to LOAD-TIME-VALUE, which creates constant data'  I think this would be clearer as 'we did not supply a second argument to LOAD-TIME-VALUE, which lets us create constant data'
[23:21:24] *** Joins: tfeb (~tfb@88.98.95.237)
[23:21:51] *** Joins: Bike (~Bike@71.69.170.70)
[23:22:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:22:23] <moon-child> I'm also not sure if the use of the uninterned symbol clarifies or obscures intent.  Depends on your audience, probably, but
[23:23:34] *** Joins: ldb (~user@user/ldb)
[23:24:15] <phoe> moon-child: all fixed, thank you
[23:26:26] *** Quits: amb007 (~a_bakic@70.105.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[23:27:25] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:29:03] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:34:26] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:35:08] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[23:36:57] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[23:40:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:42:00] *** Quits: artchad (~user@public-gprs233403.centertel.pl) (Read error: Connection reset by peer)
[23:44:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:49:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:55:45] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Read error: Connection reset by peer)
[23:58:06] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
