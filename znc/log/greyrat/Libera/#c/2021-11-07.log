[00:01:17] <DPA> fread often also buffers the file.
[00:01:18] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[00:01:20] <floatcomplex> what it comes down to is: use mmap if you know you need nonlinear access to the file. otherwise, assume the file is a pipe, and read it sequentially a bit at a time
[00:01:39] <floatcomplex> DPA: yes, but you're still reading it sequentially
[00:01:51] <floatcomplex> fread doesn't buffer the entire file
[00:02:09] <Franciman> Hi all. Is a pointer to the first element of a struct also a pointer to the struct? let me be more clear, can I safely cast a pointer to the first field of a struct X to a pointer to struct X ?
[00:02:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[00:03:53] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:03:56] <fizzie> Yes. When it's "suitably converted".
[00:04:09] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:04:13] <Franciman> what do you mean by suitably converted?
[00:04:20] <Franciman> also, thank you for the answer
[00:05:01] *** Joins: Raguile (~Raguile@user/raguile)
[00:05:01] <fizzie> C11 6.7.2.1p15: "A pointer to a structure object, suitably converted, points to its initial member ([bit-field-related exception]), and vice versa."
[00:05:32] <u1_> in this code https://termbin.com/x8jq I got *** stack smashing detected ***: terminated
[00:05:54] <Franciman> fizzie: since I don't have access to C99 standard, is this the case for C99 too?
[00:06:09] <fizzie> I've always read the "suitably converted" part to mean that you have to convert from `struct foo *` to `T *` where T is the type of the member, as opposed to doing something else, like just reinterpreting the pointer's object representation.
[00:06:13] <fizzie> And yes, it's the same phrasing in C99.
[00:06:42] <u1_> Franciman: sizeof(your_struct) is not same as sizeof(1st_element)
[00:06:52] <Franciman> ok, I am ok with it
[00:07:00] <Franciman> maybe I should explain my use case
[00:07:38] <Franciman> basically I am fixing a driver in the linux kernel, and I found myself in need of having a data abstraction, so I have a `struct htt_rx_desc`
[00:07:48] <fizzie> u1_: You have an off-by-one error with your loops (or the `threads` array): they loop from 0 to MAX_THREADS, but your array only has elements from 0 to MAX_THREADS - 1.
[00:07:57] <Franciman> and two other structs containing it, and i use container_of to do the downcast
[00:08:00] <fizzie> Either make the array larger, or change the `<=` comparisons to `<` ones.
[00:08:35] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[00:08:37] <Franciman> so, my question is, if I have an unsigned char* pointing to a block of code containg a `struct htt_rx_desc_subtype`
[00:08:47] <DPA> There is a container_of macro in the kernel. You can get the base address of the struct using any member if you know which member it is.
[00:09:00] <Franciman> and `struct htt_rx_desc` is the first field of `struct htt_rx_desc_subtype`
[00:09:04] <Franciman> can I directly do
[00:09:14] <Franciman> struct htt_rx_desc *rxd = buff
[00:09:18] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[00:09:24] <Franciman> or should I use container_of to be more sure?
[00:09:45] <fizzie> I would just use container_of to be more expressive of the intent.
[00:10:03] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:10:07] <Franciman> ok, the problem is that what container_of to use depends on the implementation (it's a dynamic dispatch based on the kind of driver)
[00:10:13] <Franciman> so heh, time to abstract things away!
[00:10:14] <Franciman> thanks
[00:10:22] <extern> will one eventually need to learn make in as the projects get larger and larger ?
[00:10:28] <extern> s/in//
[00:10:35] <Franciman> extern: there are also more modern alternatives
[00:10:40] <Franciman> (note that more modern != better)
[00:10:47] <Franciman> I personally like meson
[00:11:07] <extern> i know about cmake and ninja 
[00:11:37] <extern> as far as i know they are generating make fiels
[00:11:39] <extern> files 
[00:11:47] <Franciman> another thing you should consider is, what build system is the project you are working for using?
[00:11:48] <fizzie> ninja doesn't generate Makefiles.
[00:11:49] <LiaoTao> ninja replaces make in that equation
[00:11:53] <nomagno> I am trying to figure out how to write POSIX make
[00:11:54] <Franciman> you may not always be in charge of choosing it
[00:11:59] <nomagno> Conclusion: really hard
[00:12:04] <Franciman> +1 nomagno 
[00:12:42] <extern> no matter what build system you choose eventually one expect to know make isn't it ?
[00:13:20] <LiaoTao> It's useful to know make so that you know why you should avoid it (and so that you can read legacy project code)
[00:13:31] <nomagno> extern: Make is certainly the most universal and widely-available build system (other than manually inputting commands)
[00:13:40] <DPA> I wouldn't bother with POSIX make. GNU make is usable. POSIX make lacks some basic features I need often.
[00:13:40] *** Quits: earnestly (~earnest@user/earnestly) (Read error: Connection reset by peer)
[00:14:01] *** Joins: magla (~gelignite@55d4f5a2.access.ecotel.net)
[00:14:16] <sedeki> fizzie where can i find the C standard?
[00:14:22] <nomagno> DPA: I admit I will often go to unreasonable lengths to protest GNU vendor lock-in
[00:14:24] <extern> LiaoTao: why one should avoid make ? 
[00:14:24] <sedeki> i mean, the one you're referring to
[00:14:27] <fizzie> ,c11
[00:14:27] <candide> C1X/C11 draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf - C1X Charter: http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1250.pdf - C1X Overview: http://en.wikipedia.org/wiki/C1X - Changes from C99: http://en.wikipedia.org/wiki/C1X#Changes_from_C99 - C Overview: http://en.wikipedia.org/wiki/C_programming - HTML draft: http://port70.net/~nsz/c/c11/n1570.html
[00:14:31] <fizzie> From those links.
[00:14:33] <floatcomplex> availability of gnu make 3.81 or newer is a reasonable assumption to make, even on bsd systems
[00:14:34] <sedeki> thanks
[00:14:48] <LiaoTao> extern, It's clunky and verbose and leads to spaghetti build systems more than any others
[00:15:07] <fizzie> (Or you might pick C18 instead, as the most recent finished version of the standard. I just avoid it because it didn't really change much, and the PDF table of contents is truncated.)
[00:15:48] <floatcomplex> ninja is not useable on its own, like make is, so it's not a drop-in replacement
[00:16:30] <extern> im confused ..
[00:16:44] *** Joins: earnestly (~earnest@user/earnestly)
[00:16:55] <fizzie> Ninja is the low-level build system, meant to be used as a component for high-level ones.
[00:17:10] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:17:14] <fizzie> Like in the CMake + Ninja pair, where CMake generates the Ninja build files (instead of the more traditional Makefiles).
[00:17:28] <extern> so make is obsolete in 2021 in terms of project management ?
[00:17:32] <floatcomplex> no
[00:17:48] <floatcomplex> make is universally available and a lot of projects ship with just a makefile
[00:17:53] <LiaoTao> It is outdated but not obsolete.
[00:17:56] <floatcomplex> even if it is specific to gnu make
[00:18:08] <floatcomplex> gnu make is not a hard prerequisite to safisfy
[00:18:30] <extern> ok so it makes sense to take the route of cmake + make as a beginner right ?
[00:18:34] <floatcomplex> no
[00:19:11] <floatcomplex> cmake is way too complicated for beginners if you don't already understand make and why you might want cmake
[00:19:36] <extern> ok so make make make
[00:19:44] <floatcomplex> cmake solves a different problem entirely, one that not all projects have to solve
[00:19:54] <nomagno> CMake is a Maker Maker
[00:20:29] <LiaoTao> extern, FWIW I would recommend CMake or Meson over Make as a first build system. They aren't more difficult than Make since they use human readable syntax.
[00:20:50] <floatcomplex> there are other opinions
[00:20:58] <LiaoTao> ^
[00:21:12] * extern has suffered serious compilation error
[00:21:13] *** Joins: Fault (~Fault@152.70.112.168)
[00:21:35] <floatcomplex> building cmake itself from source takes *hours* even on a modern machine, which should tell you something about the relative simplicity of it
[00:22:01] <LiaoTao> lolwat no it doesn't
[00:22:04] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:8fa0:ee28:764f:bbbc)
[00:22:25] <floatcomplex> if you want to cross compile anything, cmake will get in your way a way that is different for every project
[00:22:44] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[00:22:55] <u1_> fizzie: I thought it has 4 elemets 
[00:23:23] <fizzie> u1_: No, an `int arr[3]` has three elements: 0, 1 and 2. The size specifier is the size of the array, not the index of the highest element.
[00:24:01] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[00:24:02] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[00:24:25] <u1_> fizzie: lol, I didn't know that.
[00:24:29] *** Joins: EdFletcher (~ubuntu@user/edfletcher)
[00:24:37] *** Parts: Raguile (~Raguile@user/raguile) ()
[00:24:40] *** Joins: Fault (~Fault@152.70.112.168)
[00:24:57] <u1_> such an inconsistency...
[00:25:06] <floatcomplex> ?
[00:25:11] <floatcomplex> where is the inconsistency
[00:25:13] <nitrix> It's very consistent with pointer arithmetic.
[00:25:40] <nitrix> Especially when you know x[y] is equivalent to *(x + y).
[00:25:46] <sedeki> well, off-by-one is a real issue
[00:26:01] <floatcomplex> only for recovering matlab people
[00:26:11] <sedeki> :)
[00:26:29] <nitrix> ptr + 0 is just ptr, like &arr[0] is just arr.
[00:27:05] <sedeki> the types are different in the latter case no?
[00:27:37] <fizzie> `arr` will have an array type, but in most contexts it gets automatically converted to the same type `&arr[0]` has.
[00:27:43] <sedeki> yup
[00:27:55] <u1_> nitrix: *(x + y) will give you x+1 if actual num of elements is used
[00:28:14] <floatcomplex> what
[00:28:19] <u1_> if y=1
[00:28:49] <nitrix> With arithmetic, the operators have identities. 1 is the identity for multiplication, 0 is the identity for addition.
[00:29:12] <nitrix> 1 * x = x and 0 + x = x.
[00:29:27] <nitrix> Counting from 0, indexing from 0, it's all VERY consistent.
[00:30:00] <sedeki> um
[00:30:22] *** Joins: Enitin (~Enitin@82.102.22.85)
[00:30:53] <fizzie> That's an argument for starting the indexing from 0, not for array declarators specifying the size of the array rather than the index of the largest element.
[00:31:03] <sedeki> the group of integers have an identity under addition
[00:31:15] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:31:27] <fizzie> (I do find specifying the size quite natural, but that might be just from getting used to it.)
[00:32:37] <u1_> nitrix it does not look like. declaration int myarray[size], and accessing it with int x = myarray[size], when you need the last element doesn't look naturea when comes to this: int x = myarray[size-1]
[00:32:41] <nitrix> C's aggregates are product types. Their sizes multiplies when nested.
[00:32:52] <fizzie> The context here was really about whether `pthread_t threads[3];` should have the three elements 0, 1 and 2, or the four elements 0, 1, 2 and 3. And I think people sometimes argue it is confusing to have the declaration look like an expression that's invalid.
[00:32:56] <nitrix> Indexing works on an additive principle.
[00:33:30] <sedeki> what?
[00:33:33] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[00:33:56] *** Joins: Fault (~Fault@152.70.112.168)
[00:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:34] <fizzie> There's nothing fundamentally incompatible about having the array declarator `int arr[N]` to create an array with N+1 elements, that has the size (N+1) * sizeof (int). I mean, I think it'd be weird, and not really any more convenient -- for example, it would be "inconsistent" with using something like `malloc` -- but it could have been like that. Arrays of length 0 are illegal anyway.
[00:36:37] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[00:37:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:37:46] <u1_> fizzie: arrays with length 0 are about to be legal, (may be not in C). if you need empty array.
[00:38:01] *** Joins: Fault (~Fault@152.70.112.168)
[00:38:03] <u1_> so strange..
[00:38:10] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[00:38:30] <floatcomplex> what
[00:38:47] *** Joins: seninha (~seninha@user/seninha)
[00:39:08] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:39:10] <u1_> array with len 0 is array with zero elements - sounds sane
[00:39:38] <fizzie> If you think *that* sounds sane, then why would you make array declarators accept the index of the last element rather than the number of elements? 
[00:39:43] <nomagno> I'm fairly sure an array with zero elements is a NULL pointer
[00:40:14] <nitrix> An array of zero element isn't allowed, while a NULL pointer is allowed.
[00:40:15] <nomagno> As in, you can't possibly want anything different out of it
[00:40:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:40:31] <nitrix> Anything different than wanting your code to compile?
[00:40:57] <nomagno> nitrix: My point is a theoretical empty array would not be any better than a NULL pointer
[00:41:15] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[00:41:43] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Read error: Connection reset by peer)
[00:42:00] <kurahaupo> malloc(0) may or may not return NULL
[00:42:15] <floatcomplex> i haven't had enough coffee for this discussion, and i'm not allowed to run the grinder right now because my wife is teaching on zoom. so this conversation is my personal hell
[00:42:25] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[00:42:34] <kurahaupo> (that's the nearest the C std comes to saying anything about an array with 0 elements being NULL)
[00:42:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:43:07] <u1_> it is easier for cpu to work with index starting with 0. that is the ony reason, I think...
[00:43:10] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:43:27] <floatcomplex> no it's because that's how math works
[00:43:30] <nitrix> They don't have the same type at all, you wouldn't be able to make this sort of comparison between the two. Also, the pointer is able to designate one element while your hypothetical array of zero obviously always has zero elements.
[00:43:39] <nomagno> GCC allows it. That doesn't mean it is justified to add such a useless feature to the standard tho
[00:43:42] <System_Error> u1_> array with len 0 is array with zero elements - sounds sane <- But what it really meant to be? :D
[00:43:49] *** Quits: darkstardevx (~darkstard@50.39.114.152) (Read error: Connection reset by peer)
[00:44:00] <u1_> System_Error: empty dynamic array 
[00:44:24] <System_Error> dynamic? And who expands it and where mem comes from?
[00:44:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[00:45:08] <u1_> System_Error: may be not in C, but this is how it's done
[00:45:10] <floatcomplex> the only thing you should assume about the value returned from malloc(0) is that you are allowed to free() it
[00:45:20] <System_Error> I can understand it for e.g. VLAs, but in this case?
[00:45:38] <kurahaupo> nomagno: Sometimes it's useful to distinguish between "I have an empty box" and "I don't have a box"; the distinction between a zero length array and a null pointer can be used where the semantic distinction matters
[00:46:15] <System_Error> e.e. VLAs take mem from stack, its also why ppl tend to dislike them in some cases.
[00:46:23] <kurahaupo> Whether it should be added to std C is a different matter
[00:46:47] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[00:46:54] <kurahaupo> eg sizeof(X)==0 would introduce some weirdness elsewhere
[00:47:06] <System_Error> Aren't VLAs a bit like this already?
[00:47:17] <nomagno> You have: Flexible Array Members, Variable Length Arrays, NULL, macro shenanigans, and malloc. What else do you want to do with boxes?
[00:47:29] <u1_> System_Error: VLA is not dynamic, it is runtime allocated in stack or heap. but length cant be changed easily.
[00:49:06] <floatcomplex> -Wvla is a reasonable compiler flag to use
[00:49:13] <System_Error> then it like pointer + mem (re)alloc in terms of C I guess?
[00:49:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:49:41] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:8fa0:ee28:764f:bbbc) (Ping timeout: 245 seconds)
[00:49:41] <floatcomplex> System_Error: no because that implies it has a lifetime independent of its initial scope
[00:49:48] <floatcomplex> which it very much does not
[00:50:03] <nitrix> kurahaupo, We do have things that equationally have a size of 0, but you cannot use sizeof directly on them. Flexible Array Members for example.
[00:50:09] <u1_> System_Error: I don't know about this much, but I think it is rather something like this: https://stackoverflow.com/questions/22530363/whats-the-point-of-vla-anyway
[00:50:52] <floatcomplex> ugh
[00:51:04] <floatcomplex> VLAs and variably modified types are two different things
[00:51:18] <kurahaupo> nitrix: I know. I was just pointing out what formally adding zero sized arrays would imply
[00:51:23] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[00:51:41] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[00:52:08] <u1_> typedef int A[n]; - I think is not gonna work, because typedef must be compile-time determined.
[00:52:31] <nitrix> In general, things "without a size" or a "size of 0", should probably remain incomplete types at the type level, like we have them now.
[00:52:32] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[00:52:55] <nitrix> I see no need of changing that.
[00:53:28] <fizzie> You are allowed to typedef a VLA type, at least at block scope.
[00:53:28] *** Quits: darkstardevx (~darkstard@50.39.114.152) (Remote host closed the connection)
[00:53:55] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[00:54:24] <u1_> typedef is not classdef, though..
[00:54:27] <fizzie> ,cc { int n = 2; typedef int a[n]; a a1, a2; a1[0] = 0; a1[1] = 1; a2[0] = 2; a2[1] = 3; printf("%d, %d; %d, %d", a1[0], a1[1], a2[0], a2[1]); }
[00:54:29] <candide> fizzie: 0, 1; 2, 3
[00:54:53] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[00:55:09] <floatcomplex> this typedef is not making the code more readable
[00:55:14] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:55:38] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[00:55:53] <nitrix> ,cc { int n = 0; typedef int a[n]; a a1; }
[00:55:55] <candide> nitrix:  runtime error: variable length array bound evaluates to non-positive value 0
[00:55:57] *** Joins: Thedarkb1 (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[00:55:59] <nitrix> Cute.
[00:56:02] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Read error: Connection reset by peer)
[00:56:19] <fizzie> I don't think I've seen a typedef of a VLA or a variably modified type.
[00:56:38] <floatcomplex> how would you even know if you had???
[00:56:49] <floatcomplex> this is underhanded stuff
[00:57:03] <fizzie> Well, knowingly seen, anyway.
[00:57:18] <u1_> arrays should have always been VLA, the fact they were not - is just not enough evolution of compiler.
[00:57:22] <floatcomplex> no
[00:57:35] <nitrix> ,aka u1_ 
[00:57:35] <candide> u​1_ also known as: rcm888, u​1_
[00:57:57] <u1_> Had reconnections
[00:58:10] <floatcomplex> u1_: VLAs were added to the standard as a requirement and then made OPTIONAL in a later version of the standard, for legitimate reasons
[00:58:18] <floatcomplex> has nothing to do with compiler evolution
[00:58:19] <nitrix> You're fine. I was expecting the name of more frequent trolls.
[00:59:01] <u1_> are there any?
[00:59:15] <floatcomplex> VLAs are of limited utility and are dangerous enough in many situations that they felt the need to add a compiler warning flag about them
[00:59:54] <floatcomplex> you can't return a VLA from a function
[01:00:26] <u1_> floatcomplex: for ex you give args to your programm, it should create array with arg elements, say 10 or 20 next time. how would you allocate array on stack?
[01:00:35] <floatcomplex> you wouldn't
[01:01:05] <floatcomplex> attacker controlled stack usage is always a bug
[01:01:10] <fizzie> "The inability to declare arrays whose size is known only at execution time was often cited as a primary deterrent to using C as a numerical computing language. Adoption of some standard notion of execution time arrays was considered crucial for C's acceptance in the numerical computing world." ;)
[01:02:04] <floatcomplex> fizzie: i am that audience (them that would have to use fortran if c99 didn't exist) and i never use VLAs
[01:02:30] <u1_> stack is allocated for primitives and pointers , code does that. there is no reasons not to have stack VLA.
[01:02:43] <nitrix> Stop saying stack, please.
[01:02:51] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:04:11] <floatcomplex> u1_: either you have a known-at-compile time upper bound for the size of the array you want to make, or you do not. in the latter case, the only safe option is to use the heap
[01:04:33] <floatcomplex> the stack is allowed to be a LOT smaller than you think
[01:04:46] <nitrix> You could also NOT have a stack.
[01:05:07] <nitrix> Talking about a stack is an implementation detail and irrelevant when discussing C.
[01:05:10] <u1_> or one could use macro for heap alocated VLA array - it doesn't matter much. heap also can be exhausted. 
[01:06:01] <floatcomplex> by "heap allocated VLA" i assume you mean a variably modified type, which is a distinct language feature
[01:07:02] <u1_> there ony 2 options left - register memory and static segment, but there one can't do much of VLA or other dynamics. One could also have ho heap..
[01:07:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[01:07:53] <nitrix> C never has a stack or a heap.
[01:07:54] *** Joins: Guest88 (~Guest88@189.6.16.180)
[01:08:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[01:08:02] <floatcomplex> nitrix: the possibility of it being implemented on the call stack is sufficient to warrant telling people not to do it in portable c
[01:08:51] <u1_> you can make heap out of static segment, preallocating big chunk of it. but it is technically the same...
[01:09:02] <nitrix> You're saying nonsense.
[01:09:32] <nitrix> C has 4 storage durations: automatic, static, allocated and thread. Use them.
[01:10:22] *** Quits: mahmutov (~mahmutov@37.155.85.233) (Ping timeout: 260 seconds)
[01:10:24] <u1_> static elements are grouped and put to static segment together with strings.
[01:10:28] <nitrix> There isn't a stack, or heap or segments. You certainly can't "allocate on the stack" either,
[01:10:55] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[01:11:09] <nitrix> You're conflating string literals with all strings.
[01:11:45] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:52] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:30fe:722b:f0f0:20e0)
[01:12:30] <u1_> yes. I mean string literals are put to the static segment.
[01:12:40] <nitrix> C doesn't have a static segment.
[01:13:35] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[01:16:05] <floatcomplex> u1_: what programming language are you coming from, for context
[01:16:12] <floatcomplex> is it matlab or lua, or something else
[01:16:24] <nitrix> Only /some implementations/ of C are compiled, only some bother with separate segments, only some place literals in such .rodata segment.
[01:16:48] <u1_> floatcomplex: I read some books, no language in particular.
[01:17:18] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:17:27] <floatcomplex> u1_: ok. i ask because you have made several pronouncements that indexing arithmetic is strange, and wanted to know in comparison to what
[01:18:17] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[01:18:27] *** Quits: alch (~alch@151.36.51.46) (Read error: Connection reset by peer)
[01:19:02] *** Joins: cmburn (~cmburn@2601:441:4c00:67d:d333:655:39a8:230b)
[01:20:20] <u1_> nitrix: but probably data should be kept somewhere, anyway. 
[01:20:39] <nitrix> I have no idea what that means.
[01:20:46] <nitrix> You're using your own made up terminology for things.
[01:21:07] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[01:22:23] <u1_> nitrix: if you create myarray int[16384] - where is it going to be in program?
[01:22:34] *** Joins: alch (~alch@151.38.25.74)
[01:22:50] <ski> it would be nice to be able to return a pointer to a VLA, from a function
[01:23:28] <System_Error> u1_> in most cases in stack, but standard not really mandates it or something I guess.
[01:24:05] <nitrix> You have the definition order wrong, it's int myarray[16384]. The storage would be either static (when at file scope), automatic (in a function or block scope) or allocated if it's part of another type that itself gets allocated.
[01:24:51] <u1_> System_Error: then use pointer to the stack, and pass it to the next stack frame as a memory for work.
[01:25:42] <nitrix> There's no stack or stack frames. We have storage, lifetime and scope.
[01:26:13] *** Quits: c2a1 (~c2a1@cmcust1b-73.131.nulinkdigital.com) (Ping timeout: 256 seconds)
[01:26:44] <nitrix> You're too concerned with implementation details.
[01:26:51] <System_Error> and on second thought it also depends on what nitrix says. I.e. completely valid it its address in RAM. "Pointer to stack" is ... well, CPUs usually have it but you may or may not be able to even access it.
[01:26:54] <u1_> nitrix: so you can artificially implement VLA even if standard doesn't support it. right?
[01:27:03] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:27:18] <floatcomplex> the standard does support it
[01:27:20] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:30fe:722b:f0f0:20e0) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:27:32] <floatcomplex> the standard allows an implementation to not implement it
[01:27:42] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:30fe:722b:f0f0:20e0)
[01:28:18] <floatcomplex> ski: just use malloc for that
[01:28:40] <u1_> floatcomplex: you may have no heap
[01:29:02] <floatcomplex> u1_: yeah and if so, malloc() will return NULL
[01:29:03] <cmburn> if you're that worried about an implementation allowing something on a stack you should probably throw it on the heap
[01:29:11] <ski> (pretty sure you can do neither `struct { size_t n; int (*p)[n]; } foo(void);' nor `int (*foo(size_t n))[n];' .. hm, now how about `void foo(size_t n,int (**p)[n])' ?)
[01:29:25] <System_Error> Oh btw "Standalone" mode is part of C99. IIRC it doesn't mandates *alloc at all like that?
[01:29:25] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[01:29:28] <floatcomplex> u1_: you get no way to handle the case where there is not enough storage for a VLA
[01:29:41] <floatcomplex> ski: VLAs offer no actual capabilities that weren't already present, they are just a convenience, and a rather unsafe one
[01:29:44] <nitrix> u1_, The term you want is freestanding environment, as opposed to hosted environment. A freestanding environment may not provide malloc(), which is used to allocate objects. There's never a heap.
[01:29:49] <u1_> floatcomplex: how much is enough? 1 kb is enough?
[01:30:05] <floatcomplex> ???
[01:30:11] *** Quits: Thedarkb1 (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[01:30:26] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[01:30:28] *** Joins: Viewday5 (~Viewday@user/viewday)
[01:30:28] <floatcomplex> u1_: if you knew 1kB was enough, why would you use a VLA?
[01:30:56] <ski> floatcomplex : unsafe in which sense ?
[01:31:29] <nitrix> System_Error, Freestanding only guarantees float.h, iso646.h, limits.h, stdalign.h, stdarg.h, stdbool.h, stddef.h, stdint.h and stdnoreturn.h.
[01:31:33] <floatcomplex> ski: if you attempt to use more memory than you have available, with a VLA, the BEST possible outcome is a segfault
[01:31:45] <floatcomplex> ski: all other outcomes are worse
[01:32:05] *** Joins: Klinda (~superleag@user/klinda)
[01:32:27] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:32:27] *** Viewday5 is now known as Viewday
[01:32:28] <floatcomplex> ski: malloc() will simply return NULL and you handle it by gracefully exiting or whatever else makes sense in context
[01:33:25] <ski> at the least, VLAs can help document intent, and also, sometimes, avoid explicit index arithmetic (`p[i*n+j]' rather than `*p[i][j]')
[01:33:47] <ski> (er, sorry, `p[i][j]')
[01:34:15] <ski> floatcomplex : i can use VLAs with `malloc'
[01:35:10] <floatcomplex> ski: those aren't VLAs, those are variably modified types
[01:35:28] *** Quits: Guest88 (~Guest88@189.6.16.180) (Quit: Client closed)
[01:35:29] <floatcomplex> you can have a program full of those and no VLAs
[01:35:30] <ski> ah, ty for the terminology correction
[01:35:34] <u1_> floatcomplex: for many reasons. depending on task there may be other use for memory left empty.
[01:35:38] <System_Error> nitrix> yep, and even these arent necessarily fully implemented. E.g. cpu w/o fpu could lack anything about FP.
[01:35:54] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[01:36:03] <System_Error> floatcomplex> ski: malloc() will simply return NULL <- nice theory, but in Linux you'd rather die by OOM killer with default settings.
[01:36:23] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 264 seconds)
[01:36:54] <System_Error> Or by sigsegv, overcommit is kinda funny thing :)
[01:38:27] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:39:04] <ski> so, in `const size_t m = 2,n = 3; int (*p)[m][n] = malloc(sizeof *p);' what is the object referred to by `*p' called, if not a VLA ?
[01:39:43] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:30fe:722b:f0f0:20e0) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:40:03] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:30fe:722b:f0f0:20e0)
[01:40:08] <ski> (iiuc, its *type* is a variably modified type, is that correct terminology ?)
[01:40:23] *** Quits: AmR (~AmREiSa@156.199.218.104) (Ping timeout: 256 seconds)
[01:40:34] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[01:40:41] *** Quits: EdFletcher (~ubuntu@user/edfletcher) (Quit: leaving)
[01:41:07] <floatcomplex> System_Error: yes, but assuming overcommit is in play, you still have to use gigabytes of memory before you get oom killed. you can run into unsafe consequences of using a VLA after kilobytes, even on a machine with gigabytes of memory
[01:41:16] *** Joins: zmt00 (~zmt00@user/zmt00)
[01:41:49] <floatcomplex> ski: yes, it's a variably modified type
[01:41:59] <floatcomplex> it is not a VLA
[01:42:11] <ski> the type `int (*)[m][n]' is a variably modified type, yes (?)
[01:42:18] <ski> but what is the object `*p' ?
[01:42:22] <u1_> ski: probably malloc returns address to 2x3 pointers to type int. compile time determined.
[01:42:45] <ski> or are you saying that the object `*p' is called a "variably modified type" ?
[01:43:03] <ski> (it would seem weird to me to call an object a (such-and-such) type)
[01:43:46] <ski> u1_ : you can make `m' and `n' function parameters, if you prefer
[01:44:31] <floatcomplex> ski: whatever exactly it's called, it is specifically not a VLA
[01:44:37] <ski> (and it's not pointers to `int'. `p' is a pointer to an array of `2' arrays of `3' `int's)
[01:44:47] <ski> floatcomplex : okay, ty
[01:46:48] <u1_> ski: heap is always VL. if m and n are calculated at runtime , compiler is going to generate code for m*n and call malloc with sizeof(int)*(m*n)
[01:47:00] <floatcomplex> no
[01:47:28] <System_Error> floatcomplex> its depends on size of system. On mips router boasting whole 32MB you'll die like that "slightly" faster.
[01:48:05] <u1_> I mean size_t*(m*n) array of pointres to int
[01:48:29] <floatcomplex> System_Error: no, you can't use anywhere near 32 MB of memory for VLAs before getting into trouble on almost any system
[01:48:40] <floatcomplex> u1_: no, malloc is not involved
[01:48:53] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[01:48:54] <System_Error> I know :)
[01:49:23] *** Parts: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) ()
[01:49:38] * ski . o O ( <https://gustedt.wordpress.com/2011/01/09/dont-be-afraid-of-variably-modified-types/> )
[01:49:39] <candide> Title of ski's link: don’t be afraid of variably modified types – Jens Gustedt's Blog
[01:49:56] <Franciman> oh, hi ski 
[01:50:07] <System_Error> u1_> ski: heap is always VL. <- Actually, depends. Nothing wrong to have heap in fixed addresses mapping system.
[01:50:18] <ski> oy
[01:50:39] <Franciman> the irc is a tiny place ^^
[01:51:00] <Franciman> see you around! bb
[01:51:02] <ski> .. i believe u1_ had `malloc(*p)' in my example in mind
[01:51:02] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.3)
[01:52:00] *** Joins: quartz (~quartz@user/quartz)
[01:52:01] <ski> u1_ : and no, not arrays of pointers. i had a pointer to array of array of `int'. not array of array of pointer to `int'
[01:52:03] <u1_> System_Error: you can allocate on heap Variable Length objects. because Length is given at alloc() time.
[01:52:30] <floatcomplex> u1_: even if VLAs were implemented under the hood using malloc() and free(), you should still be terrified to use them, because it means the compiler is silently inserting calls to free()
[01:52:35] <System_Error> ahh you meant that, okay.
[01:54:05] <ski> (i'm not sure why one should be frightened of silent insertions of calls to `free', if it's done transparently)
[01:54:40] <floatcomplex> ski: it means you can no longer reason about whether a bit of code runs in constant time or not
[01:54:58] <floatcomplex> attacker-controlled runtime can be just as bad as attacker-controlled memory usage
[01:55:57] <ski> ah, that `malloc' and `free' may take an unspecified amount of time, as opposed to, in automatic storage, allocating and deallocating (e.g.) a VLA (?) .. fair point
[01:56:29] <floatcomplex> yeah deallocating an array of automatic storage duration is a no-op
[01:56:31] *** Joins: CaCode (~CaCode@user/cacode)
[01:56:59] * ski . o O ( <https://en.wikipedia.org/wiki/Region-based_memory_management> )
[01:58:50] <u1_> constant time VL memory allocation is unsolvable problem for these computer architectures.
[01:59:41] <floatcomplex> and yet, you asserted that all arrays should be VLAs
[02:00:01] <edk> growing the stack is not constant time either on some architectures
[02:00:19] <System_Error> ski in paged memory systems nearly anything can take undefined amount of time.
[02:00:26] <edk> well, on a lot of architectures, really
[02:00:39] <u1_> floatcomplex: when used stack allocation. one can always check params before passing them the the next stage. so stack is not going to be exhausted.
[02:01:08] <floatcomplex> no
[02:01:25] <floatcomplex> u1_: it is not possible to check whether you have enough stack space left for any given purpose
[02:02:19] <u1_> floatcomplex: why not? and look at this from the other side - Intel support paged stack,so it can grow till all system memory if full.
[02:02:33] <floatcomplex> u1_: it's not up to intel, it's up to the kernel and libc
[02:02:41] *** Joins: EdFletcher (~ubuntu@user/edfletcher)
[02:03:53] *** Quits: cmburn (~cmburn@2601:441:4c00:67d:d333:655:39a8:230b) (Quit: Leaving.)
[02:04:05] <edk> generally it is possible to have an unlimited stack but it doesn't seem massively relevant. the point is there's no way of getting any new memory on modern OSes that is always deterministic
[02:04:18] <edk> there's not even a deterministic way of accessing memory you already own
[02:05:31] *** Joins: rando25892 (~user@user/rando25892)
[02:05:49] <floatcomplex> and yet, there are times when it would be irresponsible to call malloc()/free() and times when it is perfectly acceptable to do so
[02:06:59] <edk> yeah, but if you're writing that sort of code you probably know it
[02:07:42] <floatcomplex> edk: right. i'm specifically pushing back against u1_'s apparent assertion that ALL c arrays should be VLAs and it's only a historical accident that they're not
[02:08:06] <edk> ok yeah fair enough that is a bit silly
[02:08:37] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[02:08:40] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:09:15] <floatcomplex> u1_: golang has a stack that behaves the way you expect the C stack to behave
[02:09:47] <floatcomplex> but it's runtime-garbage-collected
[02:10:17] <floatcomplex> but maybe you would find go to be a language that is a better match to your expectations
[02:11:06] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[02:11:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:11:57] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:13:40] <u1_> there is nothing wrong with fair use of stack VLA. besides it is hard for beginners to understand, why their code is not compiling, when they just want create random size array. and they are not yet ready for pointer arithmetic. if one needs fast function where no heap involved, stack VLA is good.
[02:14:26] <floatcomplex> if one is not ready for pointer arithmetic one is not likely to get array indexing right 
[02:14:44] <floatcomplex> and "pointers are hard" is a self fulfilling prophecy
[02:15:21] <u1_> I mean CDECL
[02:19:52] *** Joins: rgrinberg (~textual@190.113.102.153)
[02:21:07] *** Joins: pert (~pert@fsf/member/pert)
[02:21:31] *** Joins: c2a1 (~c2a1@cmcust1b-73.131.nulinkdigital.com)
[02:22:56] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:25:15] <hxztnxt> is it acceptable to use global variables in producer-consumer code?
[02:25:45] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:26:15] <floatcomplex> hxztnxt: sure
[02:26:26] *** Quits: c2a1 (~c2a1@cmcust1b-73.131.nulinkdigital.com) (Ping timeout: 260 seconds)
[02:26:51] <floatcomplex> (assuming it's acceptable to use global variables at all, in whatever wider context)
[02:27:31] <hxztnxt> i see globals are not every accepted
[02:27:36] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:27:38] <masterbuilder> hxztnxt: IMO it's acceptable if you can prove that those variables will only be accessed in a sensible manner, and/or you accept the responsibility
[02:28:14] <masterbuilder> the problem is that it's difficult to demonstrate that, and it's more difficult to reason about programs that rely on updating a global shared state, but there's nothing inherently wrong with that
[02:28:22] <floatcomplex> hxztnxt: well like if you want to have multiple levels of producer-consumer interconnects in one application
[02:28:30] <floatcomplex> using global variables would get in the way of doing so
[02:29:14] <floatcomplex> that interconnect example i sent yesterday doesn't use any, specifically for that reason
[02:29:20] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:29:44] <floatcomplex> so that you can have a nested structure of threads
[02:30:36] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:30:41] <floatcomplex> but that's not an objection that's specific to producer-consumer code
[02:32:13] <hxztnxt> im going to give you some context. The alternative of using global variables would be giving all threads (consumers and producers) a ptr to a struct with some members only used by consumers and others only for producers
[02:32:54] <hxztnxt> so i thought maybe using global variables would be cleaner
[02:32:54] <floatcomplex> that seems reasonable
[02:32:58] <floatcomplex> nah
[02:33:27] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[02:33:31] <Xgc> Your so-called global could be a point of reference to a data structure supporting more dynamic behavior, with a clean API to use for access.
[02:33:39] *** Quits: pizdets_ (~pizdets@183.182.110.19) (Ping timeout: 256 seconds)
[02:33:45] *** Joins: pizdets (~pizdets@183.182.111.35)
[02:35:40] <floatcomplex> there's no actual downside to having more members in that struct than any one thread needs
[02:36:35] *** Quits: masterbuilder (~user@user/masterbuilder) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:37:55] *** Quits: eXeC64 (~eXeC64@80.1.220.46) (Quit: There goes my bouncer)
[02:38:29] *** Joins: eXeC64 (~eXeC64@80.1.220.46)
[02:38:32] <floatcomplex> (that said, if the globals are state that specific threads need and not part of the implementation of the interconnect between threads, then my original objection to globals doesn't apply)
[02:38:42] <hxztnxt> floatcomplex: about the code that you sent yesterday (https://godbolt.org/z/qsah7PMMG), what if there's nothing to read in the consumer pipe, shouldnt there be a way for it to sleep until something comes through?
[02:38:48] <floatcomplex> hxztnxt: it does
[02:38:54] <floatcomplex> the read() will block indefinitely
[02:39:04] <extern> why all.o is created first and then all the rest ? 
[02:39:05] <extern> https://paste.ofcode.org/wUJ4MgVv9Fa7rYpVHLhiBq
[02:39:07] <floatcomplex> until something write()'s to the pipe
[02:39:30] <extern> all.o is the last target
[02:39:52] <hxztnxt> block meaning the thread sleeps?
[02:40:09] <floatcomplex> hxztnxt: yes
[02:40:15] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 268 seconds)
[02:40:18] *** Joins: korg815 (~korg815@user/korg815)
[02:40:39] <hxztnxt> okay, that's cool
[02:40:40] <hxztnxt> ty
[02:41:02] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Quit: Leaving)
[02:41:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:da94:668f:b78c:97b1) (Remote host closed the connection)
[02:41:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:d6e1:9cdb:c2c:75e6)
[02:42:20] <floatcomplex> extern: i can't figure out what you're trying to do
[02:42:49] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:43:24] <floatcomplex> extern: i don't think you need likes 5,6,7,12,13
[02:43:27] <floatcomplex> lines
[02:44:01] <floatcomplex> i also can't imagine why you'd want "make clean" to delete .c files
[02:47:13] *** Joins: shivesh (~shivesh@user/shivesh)
[02:48:19] <extern> it's just a tutorial i saw online however i can't understand why all.c is run before all the other targes
[02:48:56] *** Quits: Brewster (~Brewster@185.145.156.241) (Remote host closed the connection)
[02:54:02] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[02:54:08] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:54:43] *** Quits: extern (~archer@80.246.130.109) (Quit: WeeChat 3.3)
[02:55:04] <fizzie> Generally, the order make follows to build prerequisites is not defined beyond what's required by their own dependencies. It definitely doesn't need to follow the order they're declared in the Makefile or anything.
[02:56:46] *** Joins: zmt01 (~zmt00@user/zmt00)
[02:58:01] *** Joins: loganlee (~Thunderbi@user/loganlee)
[02:58:14] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[02:58:26] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Quit: WeeChat 1.1.1)
[02:58:27] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:58:41] <fizzie> If it seems to behave deterministically, it could have something to do with how there's an explicit rule for how to build all.c, but an implicit rule is used to create foo.c and bar.c. But really it's an implementation detail how actions are ordered when multiple orderings are valid.
[02:58:54] *** Quits: zmt01 (~zmt00@user/zmt00) (Client Quit)
[02:59:13] *** Joins: zmt01 (~zmt00@user/zmt00)
[02:59:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[03:01:22] *** Joins: Brewster (~Brewster@185.145.156.241)
[03:01:48] *** Quits: Brewster (~Brewster@185.145.156.241) (Changing host)
[03:01:48] *** Joins: Brewster (~Brewster@user/brewster)
[03:03:23] *** Joins: fstd (~fstd@xdsl-87-79-44-169.nc.de)
[03:03:26] *** Quits: fstd_ (~fstd@xdsl-81-173-152-177.nc.de) (Ping timeout: 245 seconds)
[03:05:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[03:05:07] *** Joins: rgrinberg (~textual@190.113.102.153)
[03:05:27] *** Joins: darkstarx (~darkstard@185.226.144.76)
[03:07:58] *** Quits: darkstardevx (~darkstard@50.39.114.152) (Ping timeout: 260 seconds)
[03:10:29] *** Joins: darkstardev13 (~darkstard@176.113.72.221)
[03:13:02] *** Quits: darkstarx (~darkstard@185.226.144.76) (Ping timeout: 260 seconds)
[03:15:31] *** Joins: dohtem (uid524096@user/dohtem)
[03:15:56] *** Quits: Narrat (~omnius@p5dcc6c76.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:17:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:18:27] *** Joins: darkstarx (~darkstard@50.39.114.152)
[03:20:56] *** Quits: darkstardev13 (~darkstard@176.113.72.221) (Ping timeout: 245 seconds)
[03:22:43] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:22:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[03:23:09] *** Joins: ntwk (~ntwk@user/ntwk)
[03:23:41] *** Joins: de-facto (~de-facto@user/de-facto)
[03:24:06] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[03:25:53] *** Joins: jess (~jess@libera/staff/jess)
[03:29:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:30:17] *** Quits: Akuli (~Akuli@82-203-166-207.bb.dnainternet.fi) (Quit: Leaving)
[03:31:37] *** Quits: Brewster (~Brewster@user/brewster) (Remote host closed the connection)
[03:31:49] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:32:35] *** Joins: de-facto (~de-facto@user/de-facto)
[03:32:47] *** Quits: alch (~alch@151.38.25.74) (Ping timeout: 264 seconds)
[03:33:35] *** Joins: monkey_ (~user@190.104.116.153)
[03:34:05] *** Joins: alch (~alch@151.44.51.120)
[03:35:01] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[03:36:46] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:37:07] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 256 seconds)
[03:37:16] *** Joins: de-facto (~de-facto@user/de-facto)
[03:38:38] *** Joins: Brewster (~Brewster@185.145.156.241)
[03:40:02] *** Joins: darkstardev13 (~darkstard@89.47.234.174)
[03:41:58] *** Quits: geeknix (~pi@2001:e68:5432:c96:3ce2:cddf:6be2:8763) (Ping timeout: 260 seconds)
[03:42:26] *** Quits: darkstarx (~darkstard@50.39.114.152) (Ping timeout: 260 seconds)
[03:42:42] *** Quits: fstd (~fstd@xdsl-87-79-44-169.nc.de) (Read error: Connection reset by peer)
[03:43:46] *** Joins: c2a1 (~c2a1@cmcust1b-73.131.nulinkdigital.com)
[03:43:49] *** Joins: fstd (~fstd@xdsl-87-79-44-169.nc.de)
[03:46:20] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[03:47:13] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[03:47:29] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:47:48] *** Joins: oriba (~oriba@x4dbf7373.dyn.telefonica.de)
[03:48:26] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:30fe:722b:f0f0:20e0) (Ping timeout: 245 seconds)
[03:49:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:54:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:54:59] *** Quits: Brewster (~Brewster@185.145.156.241) (Remote host closed the connection)
[03:55:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:55:08] *** Joins: geeknix (~pi@2001:e68:5432:ee80:f8c7:29cb:a70c:cc82)
[03:55:53] *** Lord_of_Life_ is now known as Lord_of_Life
[03:57:54] *** Joins: Brewster (~Brewster@185.145.156.241)
[03:57:54] *** Quits: Brewster (~Brewster@185.145.156.241) (Changing host)
[03:57:54] *** Joins: Brewster (~Brewster@user/brewster)
[04:01:44] *** Quits: magla (~gelignite@55d4f5a2.access.ecotel.net) (Quit: Stay safe!)
[04:05:11] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:06:25] *** Joins: gargus (~user@203.220.68.182)
[04:06:42] <Inst> i'm having a really weird situation, unfortunately
[04:06:54] <Inst> does anyone know how to move header files into a main file?
[04:09:34] *** Joins: rgrinberg (~textual@190.113.102.153)
[04:09:36] *** Quits: Atque_ (~Atque@user/atque) (Remote host closed the connection)
[04:10:49] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[04:11:49] *** Joins: Atque (~Atque@user/atque)
[04:11:56] <ioxzev1z> Inst, #include "header.h"
[04:12:35] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:12:52] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[04:13:21] <Inst> sorry, i'm still handling my problem and tearing my hair out
[04:13:37] <Inst> i was about to try composing everything into a single file
[04:13:50] *** Joins: dld (~dld@98.217.187.57)
[04:17:11] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 245 seconds)
[04:17:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:19:20] <de-facto> its a preprocessor instruction, you can also include header.h manually at exactly that place
[04:20:21] *** Joins: masterbuilder (~user@user/masterbuilder)
[04:20:29] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[04:22:20] *** Quits: masterbuilder (~user@user/masterbuilder) (Client Quit)
[04:23:34] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[04:24:59] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 264 seconds)
[04:26:11] *** Joins: Wulf (~Wulf@user/wulf)
[04:26:33] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Remote host closed the connection)
[04:27:43] *** Joins: masterbuilder (~user@user/masterbuilder)
[04:29:16] *** Quits: u1_ (~u1@95.54.109.124) (Quit: Leaving)
[04:30:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:35:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:36:03] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[04:37:14] *** Quits: rgrinberg (~textual@190.113.102.153) (Read error: Connection reset by peer)
[04:38:02] *** Joins: rgrinberg (~textual@190.113.102.153)
[04:38:03] *** Quits: tinyweasel (~weasel@user/tinyweasel) (Quit: quit)
[04:38:44] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[04:43:10] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Ping timeout: 260 seconds)
[04:45:54] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 260 seconds)
[04:47:16] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[04:49:45] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:52:36] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 245 seconds)
[04:54:05] *** Joins: jbauer (~jbauer@146.71.11.98)
[04:54:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[04:55:15] *** Joins: missogra (~missogra@dynamic-095-112-020-078.95.112.pool.telefonica.de)
[04:55:53] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[04:57:25] *** Joins: mad_enz (~mad_enz@2605:8d80:6a0:15d6:7c33:c2b1:86ec:ff1d)
[05:02:02] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[05:02:18] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[05:04:26] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Remote host closed the connection)
[05:06:04] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Remote host closed the connection)
[05:06:06] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[05:09:41] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 245 seconds)
[05:11:58] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Remote host closed the connection)
[05:12:12] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[05:15:09] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:16:01] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:16:20] *** Quits: oriba (~oriba@x4dbf7373.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:18:01] *** Quits: mad_enz (~mad_enz@2605:8d80:6a0:15d6:7c33:c2b1:86ec:ff1d) (Ping timeout: 245 seconds)
[05:23:05] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:23:25] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:23:26] *** Joins: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx)
[05:25:12] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:25:55] *** Quits: darkstardev13 (~darkstard@89.47.234.174) (Ping timeout: 256 seconds)
[05:28:29] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[05:30:44] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[05:31:18] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[05:32:16] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:35:11] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[05:36:23] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[05:37:36] *** Joins: kexec (~kexec@user/kexec)
[05:37:46] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[05:37:50] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:39:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:42:55] *** Joins: pucara (~i@host194.181-14-159.telecom.net.ar)
[05:46:10] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[05:48:58] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Remote host closed the connection)
[05:49:26] *** Joins: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx)
[05:50:07] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[05:51:09] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[05:51:54] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[05:54:43] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[05:57:11] <kexec> i have dynamic array of strings and i want to delete a specific string from this array, in the way that the indexes of following strings will be pushed. is this possible in some simple way?
[05:57:47] <floatcomplex> free() and then memmove()
[05:58:02] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[05:58:04] <floatcomplex> and then set the final one to NULL for safety
[05:58:27] <zwr> yeah you just free() it and memmove() all the arrays above it one down. you might want a different data structure if you're doing that often or with large amounts of strings
[06:00:20] <kexec> thanks, i will look at it
[06:01:54] *** Quits: missogra (~missogra@dynamic-095-112-020-078.95.112.pool.telefonica.de) (Ping timeout: 268 seconds)
[06:02:22] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[06:04:14] <floatcomplex> kexec: to be clear, you memmove the array of pointers, not the strings themselves
[06:04:59] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[06:06:43] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[06:09:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:d6e1:9cdb:c2c:75e6) (Ping timeout: 245 seconds)
[06:10:20] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[06:11:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:11:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:11:04] *** Joins: wroathe (~wroathe@user/wroathe)
[06:13:09] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[06:16:35] *** Quits: c2a1 (~c2a1@cmcust1b-73.131.nulinkdigital.com) (Ping timeout: 264 seconds)
[06:16:40] <kexec> hm, i cant figure out how should it look... lets say i have this simple code. how should the memmove() look like, please? https://bpa.st/GN5Q
[06:17:54] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[06:19:38] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:21:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:22:43] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:25:33] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[06:30:31] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Ping timeout: 256 seconds)
[06:32:47] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:34:25] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:34:51] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[06:38:27] <fizzie> Well, you'd want it to move the values of arr[2]..arr[4] to replace arr[1]..arr[3], respectively. In other words, move the 3 * sizeof (char *) bytes starting at &arr[2] to &arr[1] instead.
[06:40:28] <fizzie> Where the 3 is however many strings remain in the array after the one you're "deleting", so you'd use the values of i and number_of_strings to calculate it.
[06:41:33] <fizzie> And remember to update number_of_strings afterwards too, since there will be one less than there were.
[06:42:17] <kexec> yeah, i got to this: https://bpa.st/G7RQ but if i uncomment also the free(), i get error "(free(): invalid pointer" and "Aborted (core dumped)"
[06:46:32] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[06:47:03] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[06:47:48] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:48:20] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:49:10] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[06:52:26] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 260 seconds)
[06:52:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:54:04] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:11] <floatcomplex> kexec: need to set to NULL the old copy of the last pointer probably
[06:55:40] <floatcomplex> otherwise you free it twice
[06:57:09] <floatcomplex> decrementing number_of_strings as fizzie said would also fix that problem
[06:57:29] <floatcomplex> but also
[06:57:42] <floatcomplex> you're mallocing space for strings
[06:57:47] <floatcomplex> and then not using it
[06:57:58] <kexec> but that error happens immediately after the first free
[06:57:59] <floatcomplex> and then trying to free some string literals
[06:58:20] <floatcomplex> your lines 14-18 are all wrong
[06:58:47] <kexec> oh right, so i need to use strcopy?
[06:58:49] <floatcomplex> you're overwriting the pointer to the space you malloc'd with a pointer to a string literal
[06:59:13] <floatcomplex> and then when you try to free the first one of those it takes the big shit
[06:59:20] <floatcomplex> strdup yes
[06:59:50] <floatcomplex> don't even bother with the malloc
[07:00:19] <floatcomplex> just omit lines 10-12 and use strdup on lines 14-18
[07:00:24] <floatcomplex> if you intend to free it layer
[07:00:27] <floatcomplex> later
[07:02:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[07:02:30] *** Joins: ferdna (~ferdna@user/ferdna)
[07:03:09] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[07:08:38] *** Quits: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com) ()
[07:11:02] <kexec> thanks, but i would like to use this in a bigger code which loads strings from a file to a dynamic array and then several strings will be deleted according to input... so i guess i need the the malloc in for loop and strcopy
[07:13:30] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[07:13:30] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[07:15:47] <fizzie> `strdup` *is* essentially just malloc + strcpy, so that doesn't really follow.
[07:16:24] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[07:23:05] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[07:32:37] *** Quits: alch (~alch@151.44.51.120) (Read error: Connection reset by peer)
[07:35:18] <floatcomplex> don't do malloc and then strdup
[07:35:25] <floatcomplex> do one or the other
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:28] *** Joins: alch (~alch@151.44.95.227)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:30] *** Joins: frost (~frost@user/frost)
[07:45:44] <kexec> thanks
[07:48:37] *** Joins: Famine- (~Famine@user/famine)
[07:51:49] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[07:52:00] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[07:52:07] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 256 seconds)
[07:52:41] *** Joins: System_Error (~SystemErr@user/systemerror)
[07:53:23] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[07:54:13] <kexec> and if i want to delete multiple strings, do i need to modify the control variable inside the foor loop or is it possible to avoid that? eg: https://bpa.st/YGXA
[08:01:11] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[08:07:06] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 260 seconds)
[08:08:25] <nitrix> strdup("two"); // duplicate, you're killing me.
[08:08:54] <nitrix> / strdup() duplicates a string.
[08:15:21] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[08:15:55] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[08:17:00] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:21:27] <kexec> nitrix: if you are referencing to the comment, it means just that there are 2 identical (ie duplicate) strings in the array
[08:24:58] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[08:29:32] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[08:33:13] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[08:39:23] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 264 seconds)
[08:40:05] *** Joins: coruja (~coruja@user/coruja)
[08:42:08] *** Joins: Everything (~Everythin@37.115.210.35)
[08:43:56] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[08:46:56] <caze> If you don't care about preserving order you can just copy the last element to the position of the one you just deleted.
[08:47:42] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 260 seconds)
[08:49:12] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[08:50:56] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[08:53:46] *** Joins: Tempesta (Tempesta@user/tempesta)
[08:53:48] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[08:54:07] *** Joins: Tempesta (Tempesta@183.98.39.112)
[08:54:07] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[08:54:07] *** Joins: Tempesta (Tempesta@user/tempesta)
[08:54:08] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[08:54:27] *** Joins: Tempesta (Tempesta@183.98.39.112)
[08:54:27] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[08:54:27] *** Joins: Tempesta (Tempesta@user/tempesta)
[08:54:28] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[08:54:37] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[08:54:52] *** Joins: Tempesta (Tempesta@183.98.39.112)
[08:54:52] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[08:54:52] *** Joins: Tempesta (Tempesta@user/tempesta)
[08:54:53] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[08:55:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[08:56:02] *** Joins: Tempesta (Tempesta@183.98.39.112)
[08:56:02] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[08:56:02] *** Joins: Tempesta (Tempesta@user/tempesta)
[08:56:03] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[08:57:37] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[09:05:15] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[09:05:30] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:09:53] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[09:10:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:16:22] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[09:21:18] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[09:21:35] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[09:21:56] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[09:25:18] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[09:26:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:33:18] *** Joins: bogdomania (bogdomania@user/bogdomania)
[09:34:16] *** Quits: amorel (~amorel@mx.mompl.net) (Ping timeout: 245 seconds)
[09:36:36] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:7672:64ba:5b07:3435)
[09:43:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:43:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:43:27] *** Joins: wroathe (~wroathe@user/wroathe)
[09:46:59] *** Joins: missogra (~missogra@dynamic-095-116-018-128.95.116.pool.telefonica.de)
[09:48:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:52:54] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[09:56:14] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[09:58:49] *** Joins: johnjay (~pi@192.142.100.50)
[10:01:02] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[10:05:38] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[10:05:39] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Quit: byee)
[10:06:25] *** Quits: missogra (~missogra@dynamic-095-116-018-128.95.116.pool.telefonica.de) (Ping timeout: 256 seconds)
[10:06:52] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[10:07:13] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:07:58] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:08:21] *** Joins: johnjay (~pi@192.142.100.50)
[10:09:11] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:09:42] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:10:28] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:10:55] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:11:37] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:12:12] *** Joins: Hax0r (~Hax0r@93.169.49.84)
[10:12:40] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:13:33] *** Joins: cm007magnum (~Rheanna@112.29.212.29)
[10:14:02] *** Quits: cm007magnum (~Rheanna@112.29.212.29) (Remote host closed the connection)
[10:14:03] *** Joins: erpicht (~erpicht@dslb-092-075-221-177.092.075.pools.vodafone-ip.de)
[10:15:21] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 268 seconds)
[10:19:05] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:20:15] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:20:51] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:21:42] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:24:06] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:24:53] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:27:19] *** Joins: vysn (~vysn@user/vysn)
[10:27:42] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:28:31] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:29:24] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:29:53] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:30:41] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:35:44] *** Joins: cm007magnum (~Rheanna@61.174.60.56)
[10:36:40] *** Quits: cm007magnum (~Rheanna@61.174.60.56) (Remote host closed the connection)
[10:37:41] *** Joins: khoa (~khoa@user/khoa)
[10:45:59] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[10:47:47] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[10:48:14] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[10:48:51] *** Joins: rgrinberg (~textual@190.113.102.153)
[10:50:27] *** Quits: rgrinberg (~textual@190.113.102.153) (Client Quit)
[10:51:38] *** Joins: rgrinberg (~textual@190.113.102.153)
[10:56:30] *** Quits: Hax0r (~Hax0r@93.169.49.84) (Remote host closed the connection)
[10:56:54] *** Joins: Hax0r (~Hax0r@93.169.49.84)
[10:59:42] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[11:03:30] *** Quits: erpicht (~erpicht@dslb-092-075-221-177.092.075.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[11:04:22] *** Joins: cm007magnum (~Rheanna@101.68.251.194)
[11:05:16] *** Joins: mahmutov (~mahmutov@37.155.85.233)
[11:05:42] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Ping timeout: 250 seconds)
[11:06:57] *** Joins: kajiryoji (~kajiryoji@180.160.67.213)
[11:09:45] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:7672:64ba:5b07:3435) (Read error: Connection reset by peer)
[11:10:32] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:7672:64ba:5b07:3435)
[11:18:23] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[11:18:36] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[11:19:15] *** Joins: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de)
[11:28:56] *** Joins: Hercules (~Hercules@user/hercules)
[11:29:09] *** Quits: rahl (~rahl@102.114.5.255) (Ping timeout: 256 seconds)
[11:30:42] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:30:52] *** Joins: rahl (~rahl@102.114.41.136)
[11:35:10] *** Quits: alch (~alch@151.44.95.227) (Ping timeout: 260 seconds)
[11:36:51] *** Joins: alch (~alch@151.44.39.45)
[11:38:56] *** Joins: mrig (~AdiIRC@user/mrig)
[11:44:18] *** Joins: aradesh (~aradesh@user/aradesh)
[11:45:53] *** Joins: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz)
[11:47:10] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::b67c) (Quit: Leaving.)
[11:47:13] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:48:22] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[11:50:48] *** Quits: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz) (Quit: Leaving)
[11:51:12] *** Joins: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz)
[11:51:13] *** Quits: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz) (Remote host closed the connection)
[11:53:02] *** Joins: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz)
[11:53:31] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[11:53:39] *** Quits: saohh (~saohh@ip-78-45-135-51.net.upcbroadband.cz) (Client Quit)
[11:54:41] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:7672:64ba:5b07:3435) (Ping timeout: 245 seconds)
[11:55:19] *** Joins: erpicht (~erpicht@dslb-092-075-221-177.092.075.pools.vodafone-ip.de)
[11:56:54] *** Joins: extern (~archer@80.246.137.4)
[11:57:09] <extern> hello
[11:57:18] <extern> i need to understand the Makefile https://paste.ofcode.org/wUJ4MgVv9Fa7rYpVHLhiBq
[11:57:42] <extern> when running it, it seems that all.o is generated first but foo.o is the first target
[12:06:03] <extern> ?
[12:08:57] *** Joins: kts (~kts@103.73.237.151)
[12:11:38] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:11:50] *** Joins: CaCode (~CaCode@user/cacode)
[12:13:44] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[12:14:03] *** Joins: CaCode (~CaCode@user/cacode)
[12:14:03] *** CaCode is now known as netester
[12:14:22] *** Quits: netester (~CaCode@user/cacode) (Remote host closed the connection)
[12:14:52] *** Joins: netester (~CaCode@user/cacode)
[12:15:08] *** Joins: kurahaupo (~kurahaupo@pa49-195-92-201.pa.nsw.optusnet.com.au)
[12:17:14] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[12:17:15] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[12:17:27] *** Quits: lkronnus (~kron@179097066103.provale.com.br) (Quit: Konversation terminated!)
[12:18:12] *** Joins: lkronnus (~kron@179097066103.provale.com.br)
[12:19:58] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:20:21] *** Joins: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au)
[12:20:21] <pnbeast> extern, maybe a channel about things like Makefiles would work better. (#workingset? does that exist, here?)  Maybe you'll get lucky, here.
[12:20:25] *** Quits: lkronnus (~kron@179097066103.provale.com.br) (Client Quit)
[12:20:51] *** Joins: lkronnus (~kron@179097066103.provale.com.br)
[12:21:38] <extern> pnbeast: cool thanks
[12:23:39] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:24:07] *** Quits: kurahaupo (~kurahaupo@pa49-195-92-201.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[12:24:07] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[12:25:19] *** Joins: vmcs (~vmcs@194.135.153.44)
[12:26:07] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:26:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[12:27:24] *** Lord_of_Life_ is now known as Lord_of_Life
[12:29:12] *** Quits: kts (~kts@103.73.237.151) (Quit: Konversation terminated!)
[12:29:19] *** Joins: jdurand (~jdurand@user/jdurand)
[12:31:42] *** Quits: mahmutov (~mahmutov@37.155.85.233) (Ping timeout: 260 seconds)
[12:31:55] *** Joins: kts (~kts@103.73.237.151)
[12:33:07] *** Quits: kts (~kts@103.73.237.151) (Client Quit)
[12:35:24] *** Joins: kts (~kts@103.73.237.151)
[12:37:24] *** Quits: kts (~kts@103.73.237.151) (Client Quit)
[12:38:01] *** Quits: khoa (~khoa@user/khoa) (Ping timeout: 245 seconds)
[12:38:21] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:39:46] *** Joins: kts (~kts@103.73.237.151)
[12:41:25] *** Quits: kts (~kts@103.73.237.151) (Client Quit)
[12:42:21] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:43:42] *** Joins: kts (~kts@103.73.237.151)
[12:43:49] *** sdk_- is now known as sdk_
[12:45:15] *** Quits: kts (~kts@103.73.237.151) (Client Quit)
[12:46:35] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[12:50:37] *** Quits: erpicht (~erpicht@dslb-092-075-221-177.092.075.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[12:51:23] *** Quits: Hax0r (~Hax0r@93.169.49.84) (Remote host closed the connection)
[12:51:54] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:53:32] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:54:12] *** Quits: ericlee (~ericlee@2601:647:4681:3420::2) (Remote host closed the connection)
[12:54:14] *** Joins: ericlee_ (~ericlee@2601:647:4681:3420::2)
[12:54:23] *** Joins: extern_ (~archer@185.32.176.95)
[12:55:56] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 245 seconds)
[12:56:47] *** Quits: extern (~archer@80.246.137.4) (Remote host closed the connection)
[12:57:45] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:58:19] *** Joins: earnestly (~earnest@user/earnestly)
[12:59:38] *** Quits: vysn (~vysn@user/vysn) (Read error: Connection reset by peer)
[13:00:46] *** netester is now known as CaCode
[13:02:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:06:22] *** Quits: pucara (~i@host194.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[13:14:44] *** Joins: khoa (~khoa@user/khoa)
[13:15:25] *** Joins: erpicht (~erpicht@dslb-092-075-221-177.092.075.pools.vodafone-ip.de)
[13:17:23] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[13:17:37] *** Quits: pnbeast (~pnbeast@2601:140:4280:3c90::1) (Quit: WeeChat 2.7.1)
[13:17:59] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[13:19:11] *** Quits: dcreator (~kjell@208.92-221-37.customer.lyse.net) (Remote host closed the connection)
[13:19:32] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[13:21:09] *** Jmtrix- is now known as Jmtrix
[13:21:09] *** Quits: Jmtrix (~qed@168.235.89.81) (Changing host)
[13:21:09] *** Joins: Jmtrix (~qed@user/jmtrix)
[13:22:34] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[13:25:10] *** Quits: extern_ (~archer@185.32.176.95) (Remote host closed the connection)
[13:26:44] *** Joins: kjell (~kjell@208.92-221-37.customer.lyse.net)
[13:27:02] *** kjell is now known as dcreator
[13:28:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:30:08] *** Quits: justUnited (~justache@user/justache) (Remote host closed the connection)
[13:30:44] *** Joins: justUnited (~justache@user/justache)
[13:36:38] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:41:49] *** Quits: gargus (~user@203.220.68.182) (Quit: Leaving)
[13:55:49] *** Joins: vmcs_ (~vmcs@185.30.88.65)
[13:58:35] *** Quits: vmcs (~vmcs@194.135.153.44) (Ping timeout: 264 seconds)
[14:04:53] *** Joins: larry87 (~quassel@98.40.245.193)
[14:05:19] *** Quits: jdurand (~jdurand@user/jdurand) (Quit: Leaving)
[14:07:37] *** Joins: Nselm (~Nselm@p200300d56f36767abc11a97d0f0c6784.dip0.t-ipconnect.de)
[14:10:34] *** Quits: clamiax (~claudio@net-93-149-158-199.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[14:13:22] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:14:03] *** Quits: kurahaupo_ (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[14:14:28] *** Joins: plastico (~plastico@neomutt/plastico)
[14:15:56] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[14:16:51] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[14:18:20] *** Joins: seninha (~seninha@user/seninha)
[14:18:41] *** Joins: Hercules (~Hercules@user/hercules)
[14:20:10] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Client Quit)
[14:21:19] *** Joins: demon1 (~demon@116.pool85-57-77.dynamic.orange.es)
[14:22:41] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[14:25:36] *** Joins: damxsa (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85)
[14:26:48] *** Quits: demon1 (~demon@116.pool85-57-77.dynamic.orange.es) (Quit: ShellHosting Script www.ShellHosting.org)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[14:33:40] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[14:33:40] *** Joins: Klinda (~superleag@user/klinda)
[14:35:01] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[14:36:12] *** Joins: random-nick (~random-ni@87.116.176.55)
[14:38:56] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:39:16] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[14:40:45] <Nselm> What exactly is the difference between an array of ints and an array of chars? I am asking because trying to print an int-array with %s results in just the first character being printed, while printing an array of chars (which has stored exactly the same values as the array of ints) works just fine.
[14:41:15] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:42:11] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[14:42:21] <Nselm> Example:: https://bpa.st/KOBQ
[14:43:24] <phyto> an int is typically 4 bytes on a 64 bit system, in memory it looks like 'a' 0 0 0, so the printf call reads up to the second byte and stops.
[14:43:48] <phyto> depending on your system's endianness it could print nothing at all
[14:44:13] <phyto> in contrast, a char is 1 byte, so in memory it looks like 'a' 'b' 'c' 'd' 0 and the string prints properly
[14:45:05] <phyto> the padding of 0's is because you typed it as int
[14:46:43] <Nselm> thx. So in a big Endian system it would print nothing at all, right? Because 0 0 0 a
[14:46:49] <phyto> yeah exactly
[14:48:38] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:1c61:c129:bc96:3b27)
[14:51:59] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[14:55:00] *** Joins: eeee (~eeee@user/eeee)
[14:55:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[14:56:04] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Ping timeout: 260 seconds)
[14:56:36] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[14:59:37] *** Joins: AmR (~AmREiSa@156.199.218.104)
[15:00:59] *** Quits: eeee (~eeee@user/eeee) (Ping timeout: 264 seconds)
[15:01:49] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[15:02:19] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:02:44] *** Quits: Samian (~s@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:03:34] *** Joins: eeee (~eeee@user/eeee)
[15:05:03] *** Quits: vmcs_ (~vmcs@185.30.88.65) (Ping timeout: 256 seconds)
[15:07:03] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[15:10:47] <Nselm> Why does int *x = pointer_to_4_elem_char_array not work then? Both should be using the same memory. Is it just because of language specification or is there some reason in memory why it would not work?
[15:11:03] <System_Error> on side note... IIRC its okay to return struct from function. But is it ok if struct would have some array as member?
[15:11:11] *** Quits: eeee (~eeee@user/eeee) (Ping timeout: 264 seconds)
[15:12:00] <System_Error> so one can return array from function like that?
[15:13:31] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:13:58] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[15:14:31] <phyto> that's something to test for sure but i think it would be okay as it's bundled in the struct so that it doesn't decay to a pointer
[15:16:38] <trenka> System_Error: yes, it's ok
[15:16:42] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[15:16:47] <System_Error> hmm... seems typedef -> func of that type (which is struct with few int+array[10]) can fill struct like that and array looks sorta workable. Interesting. Is it part of standard like that?
[15:17:00] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[15:17:18] <System_Error> wonder how it does that internally tho, like builtin memcpy? :D
[15:17:43] <phyto> i think it has nothing to do with the typedef. would have to look over the standard but it logically seems to make sense. and yes it would probably be implemented as a memcpy just like copy-initialization of structs
[15:17:56] <trenka> Nselm: they have different types
[15:18:02] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[15:18:37] <phyto> Nselm: missed this message. the reason is sizeof(int) != sizezof(char) so really they are looking at the memory in different ways
[15:20:13] <System_Error> Furthermore I wonder if (struct) myvar = func(myvar) would it do what I expect? E.g. touching some fields but avoiding duplication of that in RAM? 
[15:20:28] *** Joins: Rounin (~david@84.212.130.215)
[15:21:10] <phyto> it'd do two copies, one into the function and one out, but it'd overwrite the existing memory for myvar yeah
[15:21:25] <Nselm> Thanks
[15:22:47] *** Joins: hxztnxt (~hxztnxt@84.78.24.30)
[15:23:06] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: leaving)
[15:23:23] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[15:24:05] *** Quits: hxztnxt (~hxztnxt@84.78.24.30) (Client Quit)
[15:30:19] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[15:30:37] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:31:17] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[15:33:20] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[15:33:33] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 268 seconds)
[15:33:35] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Remote host closed the connection)
[15:34:06] *** Quits: damxsa (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85) (Ping timeout: 260 seconds)
[15:34:29] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[15:34:47] *** Quits: alch (~alch@151.44.39.45) (Ping timeout: 268 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:11] *** Joins: alch (~alch@151.44.68.167)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:06] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:40:54] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:43:09] *** Quits: Nselm (~Nselm@p200300d56f36767abc11a97d0f0c6784.dip0.t-ipconnect.de) (Quit: Client closed)
[15:43:38] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:51:12] *** Joins: sedeki (~textual@user/sedeki)
[15:52:36] *** Quits: azerty (~azerty@user/badwolf) (Ping timeout: 245 seconds)
[15:54:39] *** Joins: azerty (~azerty@user/badwolf)
[15:55:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:57:46] *** Quits: kajiryoji (~kajiryoji@180.160.67.213) (Ping timeout: 250 seconds)
[16:02:32] *** Quits: e36freak (~e36freak@user/e36freak) (Ping timeout: 268 seconds)
[16:04:58] *** Joins: seninha (~seninha@user/seninha)
[16:10:35] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[16:10:47] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[16:12:04] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[16:15:30] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[16:16:01] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[16:18:05] *** Quits: reset (~reset@user/reset) (Quit: reset)
[16:20:00] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[16:22:59] <Xgc> System_Error: Don't cast the return.  Show a complete example if you think you need a cast.
[16:24:50] *** Joins: Nselm (~Nselm@p200300d56f36767a7833d135788b5191.dip0.t-ipconnect.de)
[16:24:51] *** Joins: cadmio (~cadmio@151.47.185.104)
[16:25:11] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[16:26:05] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[16:27:20] <cadmio> if there's someone familiar with GTK let me know: https://paste.gnome.org/pig8cnmro#line-49 I get -1 here whicht according to the doc. means "If the buffer is not already fully scanned, the total number of occurrences is unknown, and -1 is returned." how can I scan the buffer fully?
[16:28:12] <trenka> every day the same question
[16:29:14] *** Joins: shiroyas1 (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[16:29:36] <Xgc> System_Error: Maybe you didn't mean (struct) as literal C.
[16:29:51] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[16:30:09] *** Joins: quartz (~quartz@user/quartz)
[16:31:32] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[16:32:00] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Quit: ZNC - http://znc.in)
[16:33:26] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Client Quit)
[16:37:10] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[16:37:41] *** Quits: cadmio (~cadmio@151.47.185.104) (Quit: WeeChat 3.0)
[16:40:34] *** Quits: somlis (~somlis@user/somlis) (Remote host closed the connection)
[16:42:49] *** Quits: _4p3 (~ape@kanonenjagd.panzer.ninja) (Remote host closed the connection)
[16:46:12] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[16:50:27] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Ping timeout: 256 seconds)
[16:51:12] *** Joins: malloy (~jimery@120.235.172.205)
[16:52:35] *** Quits: deflected (~deflected@user/deflected) (Ping timeout: 264 seconds)
[16:53:29] *** Quits: shiroyas1 (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.3)
[16:53:43] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[16:57:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:57:54] *** Quits: malloy (~jimery@120.235.172.205) (Quit: WeeChat 3.0)
[16:58:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:02:44] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:03:13] *** Joins: nyah (~nyah@94.6.71.219)
[17:04:55] *** Joins: deflected (~deflected@user/deflected)
[17:05:14] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:07:36] *** Joins: _4p3 (~ape@kanonenjagd.panzer.ninja)
[17:11:49] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[17:14:46] *** Joins: dutch (~DutchIngr@user/dutch)
[17:14:48] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[17:15:27] *** Joins: pulse (~pulse@user/pulse)
[17:19:41] *** Joins: piku (~piku@47.202.122.99)
[17:19:44] *** Joins: somlis (~somlis@user/somlis)
[17:23:09] *** Quits: Nselm (~Nselm@p200300d56f36767a7833d135788b5191.dip0.t-ipconnect.de) (Quit: Client closed)
[17:23:23] *** Quits: erpicht (~erpicht@dslb-092-075-221-177.092.075.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[17:25:48] *** Joins: ARoxdale (~ARoxdale@109.78.38.164)
[17:30:16] *** Joins: shivesh (~shivesh@user/shivesh)
[17:31:47] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[17:32:58] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:33:11] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 268 seconds)
[17:33:35] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[17:34:21] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:34:25] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Client Quit)
[17:34:42] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[17:35:01] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:37:43] *** Joins: Klinda (~superleag@user/klinda)
[17:40:11] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[17:40:27] <De4nWhit3> Hello everyone.
[17:40:37] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[17:42:21] <ozzz> hi! I have strange thing here. FILE fd = NULL; if( NULL == (fd = fopen..)) { unable to open...} <---- leaves "hanged" fd. I see this using lsof
[17:42:45] <ozzz> should that be treated differently?
[17:42:54] <ozzz> or I miss something?
[17:43:00] *** Joins: kajiryoji (~kajiryoji@180.160.59.123)
[17:43:22] <BtbN> What do you mean?
[17:43:35] <BtbN> If you never close it on success after that, it naturally is "hanging"
[17:44:23] <ozzz> :) of course I close fd if it was sucessfully open 
[17:44:58] <ozzz> it hangs on unsucessfull fopen() call
[17:45:24] <ozzz> because fopen returns NULL, so what I should close? NULL?
[17:47:10] <floatcomplex> nothing
[17:47:19] <ozzz> right
[17:47:55] <ozzz> so such unsucessfull  call leaves "hanging" fd
[17:48:13] <floatcomplex> no
[17:48:25] <phyto> you say you see it in lsof, what is the fd there?
[17:48:45] <ozzz> phyto: 8r, 8r, 9r, 10r......
[17:49:05] <fizzie> If your C library leaves around opened file descriptors from an unsuccessful `fopen` call that returned NULL, it'd be a bug in the library, but I rather suspect it's not.
[17:49:37] <fizzie> Most likely you just have a code path you didn't consider (like a conditional `return`) that skips the fclose call.
[17:50:22] <ozzz> fizzie: no. I verified it just before I posted here
[17:50:55] <ozzz> it exits from that function right after getting NULL from fopen
[17:51:10] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164)
[17:51:27] <ozzz> using return 1; if thats matter
[17:51:49] <fizzie> Yeah, and I'm suggesting it's a *different* call to that function that doesn't get a NULL from fopen that leaves those file descriptors around. (Or even a completely different fopen altogether.)
[17:51:57] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Remote host closed the connection)
[17:52:28] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164) (Ping timeout: 260 seconds)
[17:52:31] <phyto> i agree with fizzie if this snippet you posted is as you say it is.
[17:53:47] <phyto> are you able to reproduce the issue independent of anything else? like by calling fopen() on a nonexistent file in a loop and watching lsof for that process?
[17:54:09] <ozzz> https://paste.laravel.io/e6521223-e0f3-4b2d-b50d-d68b31bf6042
[17:54:18] <fizzie> If it's a nonexistent file, it's hard to say how you could even possibly have a file descriptor for it, because `open` wouldn't work on it either.
[17:54:19] <ozzz> here is what reports valgrind
[17:54:57] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[17:54:58] <fizzie> That's a completely different thing than an open file descriptor.
[17:55:17] <fizzie> (And sounds more like the consequences of an un-fclosed `FILE *`.)
[17:55:18] <ozzz> fizzie: but it acts like open fd
[17:55:30] <ozzz> after certain point no fd left to operate
[17:56:08] <ozzz> and in logs I see well known text - too much files opened or how it is :)
[17:56:12] <phyto> i think the issue must be somewhere else. it doesn't make sense for a failed fopen call to reserve an fd and keep it.
[17:56:28] <ozzz> maybe FS type matters?
[17:56:34] <ozzz> it's a ram disk
[17:56:35] <fizzie> Claims of extraordinary bugs need extraordinary evidence. You'll need to provide at least a reproducible example that demonstrates the problem, that has obviously no other fopen calls you forget to fclose anywhere.
[17:57:03] <ozzz> fizzie:  I will try it now
[17:57:15] *** Quits: ARoxdale (~ARoxdale@109.78.38.164) (Ping timeout: 268 seconds)
[17:57:28] <ozzz> some basic fopen stuff in a loop
[17:58:25] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.3)
[17:58:43] *** Joins: Phytolizer (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[17:58:51] <Phytolizer> msg NickServe IDENTITY Phytolizer H3lpm324!
[17:59:02] *** Quits: Phytolizer (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Client Quit)
[17:59:09] <ozzz> Phytolizer: maaaan, change the password right now
[18:00:11] *** Joins: Macuser (~Macuser@216.30.159.201)
[18:00:20] <floatcomplex> oh no, all your bitcoins
[18:00:22] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[18:00:41] <fizzie> Why does your fopen fail and return NULL, anyway? Because all the reasons I can think of come directly from the underlying `open` call failing, and if *that* fails, there's no file descriptor that could be left open, unless you're claiming an OS bug instead.
[18:01:48] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Client Quit)
[18:02:00] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164)
[18:03:35] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[18:03:40] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164) (Ping timeout: 260 seconds)
[18:03:48] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[18:04:04] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[18:04:10] <phyto> apologies for leaving and rejoining so much, i'm new to irc
[18:04:15] *** Joins: kish` (~aqua@user/aqua)
[18:05:09] <Macuser> do you enter and leave the bakery whilst shutting the door loudly every time?
[18:06:00] <phyto> i don't understand, i have been restarting the irc client because i don't know how to navigate it well yet
[18:06:14] *** Quits: X-Scale (~ARM@31.22.160.27) (Ping timeout: 260 seconds)
[18:07:55] *** X-Scale` is now known as X-Scale
[18:09:40] <Macuser> so you don't know how to properly open the bakery's door, so you just keep going in and out to try it out
[18:11:26] <phyto> i was issuing commands and not seeing the output, so my conclusion was that i had set something up wrong and needed to restart the client. i discovered how to switch between open channels so all is well now and i can get /help when i need it.
[18:11:29] <ozzz> fizzie: file may be deleted by other process
[18:12:27] <fizzie> Sure, but again, the only way that may cause `fopen` to fail is if it causes `open` to fail, and that doesn't allocate a file descriptor in the process trying to open it.
[18:13:43] <ozzz> fizzie: yeah. I will write test program, which will try to reproduce that.
[18:15:42] <useretail> i have an uint32_t array with values like 0x8D93B77A how to printf them in hex?
[18:15:59] <phyto> %x or %X for uppercase like you posted
[18:16:01] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 256 seconds)
[18:16:13] <phyto> it won't prepend the 0x, you have to add that yourself
[18:19:55] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:c02b:c826:8dec:a35d) (Quit: ZNC 1.8.2 - https://znc.in)
[18:20:07] *** Joins: Albright (~Albright@149.28.13.173)
[18:20:25] *** Joins: msk (~msk@185.124.240.174)
[18:22:32] *** Quits: euandreh (~euandreh@2804:14c:65c9:5161:4d0f:6b02:d329:b5d2) (Ping timeout: 268 seconds)
[18:23:22] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89e7:f55a:92fd:8abb)
[18:23:59] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::952e)
[18:25:47] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:31:02] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[18:33:42] *** Joins: mahmutov (~mahmutov@37.155.65.40)
[18:33:51] <twkm> you probably want the # flag.
[18:35:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89e7:f55a:92fd:8abb) (Quit: Leaving)
[18:40:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:fbbe:75e0:a944:53e0)
[18:42:30] <useretail> twkm, what's that?
[18:44:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:44:33] *** Joins: marguesto (~marguesto@37.220.203.250)
[18:49:12] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[18:52:05] *** Quits: monchi (~m-6uy5ag@lo3.online) (Remote host closed the connection)
[18:55:34] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[18:55:50] *** Joins: hexteetx (~hexteex@gateway/tor-sasl/hexteex)
[18:58:14] <kurahaupo> phyto: %#x will include 0x
[18:58:27] <phyto> oh, didn't know that! cool.
[18:58:57] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[18:59:00] *** Joins: nbits (~nbits@179.110.23.146)
[18:59:32] *** Quits: nbits (~nbits@179.110.23.146) (Changing host)
[18:59:32] *** Joins: nbits (~nbits@user/nbits)
[19:00:52] *** Joins: monchi (~m-6uy5ag@lo3.online)
[19:01:10] <kurahaupo> fizzie: fopen can also fail ENOMEM if it needs to malloc a buffer and that fails. However that's exceedingly unlikely compared with EMFILE, EPERM, or ENOENT
[19:01:12] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:04:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:04:26] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:04:26] *** Joins: wroathe (~wroathe@user/wroathe)
[19:09:05] *** Quits: heftig (heftig@archlinux/developer/heftig) (Quit: heftig)
[19:09:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[19:09:56] *** Joins: heftig (heftig@archlinux/developer/heftig)
[19:18:00] *** justUnited is now known as justCity
[19:18:10] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[19:19:15] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:21:11] <System_Error> Xgc I dont cast return. That would be rather bad of me. I've added (struct) to explain what var is, but ofc there should be no cast.
[19:21:31] *** hexteetx is now known as hexteex
[19:21:33] *** Quits: nbits (~nbits@user/nbits) (Remote host closed the connection)
[19:21:38] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:21:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:21:39] *** Joins: wroathe (~wroathe@user/wroathe)
[19:22:24] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[19:22:27] <System_Error> So yep, I meant it only as hint what it type supposed to be. Well, full typedef and so on would've been a bit more lengthy
[19:23:36] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:23:43] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.3)
[19:24:17] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:48e0:406d:e67c:af6)
[19:24:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:48e0:406d:e67c:af6) (Changing host)
[19:24:17] *** Joins: skapata (~Skapata@user/skapata)
[19:24:49] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[19:25:30] *** Joins: missogra (~missogra@dynamic-095-116-018-128.95.116.pool.telefonica.de)
[19:28:55] <Xgc> System_Error: Right.  So the assignment (of a structure type) from the return of a function is fine.
[19:32:48] *** Quits: alch (~alch@151.44.68.167) (Read error: Connection reset by peer)
[19:33:52] *** Joins: magla (~gelignite@55d4a5c9.access.ecotel.net)
[19:33:56] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:36:40] *** Joins: alch (~alch@151.44.68.18)
[19:37:53] <System_Error> Xgc I've just wondered if underlying code would merely patch existing one or that would take allocating same entity again and then copying on ret.
[19:38:09] <System_Error> guess that's where I enter implementation/optimizer grounds?
[19:38:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:40:14] *** Quits: janemba (~janemba@185.107.80.152) (Read error: Connection reset by peer)
[19:41:14] <Xgc> System_Error: Not sure what you mean.  The value returned needs to be copied into the object being assigned.  There's no special way to handle that.
[19:41:47] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[19:42:05] <System_Error> I meant if optimizer would skip allocating new struct and rather patch existing one in place as its destintaion anyway. Avoiding double use of stack, etc.
[19:42:27] <System_Error> Guess standard not really specifies how to make abstraction as long as it holds?
[19:42:44] <Xgc> System_Error: It can't skip allocation.  The assigned object will be static, automatic or thread, the way you wrote the code.
[19:43:21] <Xgc> System_Error: and that allocation will have already occurred.  This is just assignment in your example.
[19:43:30] <System_Error> Xgc... hmm, from what I've seen in asm, esp in LTO mode, optimizer can get fairly interesting ideas on that.
[19:43:39] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[19:44:11] <System_Error> Oh so there wouldn't be double alloc on stack at all?
[19:44:14] <Xgc> System_Error: Well, for all the ways assignment can occur, it's not changed by a value coming from a function, unless there's some kind of inline behavior.
[19:44:28] <Xgc> System_Error: Correct.
[19:44:45] <Xgc> System_Error: and using the term "stack" doesn't change the discussion.
[19:45:36] <Xgc> System_Error: It's just automatic storage.  { int k;  k = func();  k is already allocated.  The function call/return does nothing special.
[19:48:24] <System_Error> Ye, I think I got idea. Leaves me wondering how that can transform to asm code, maybe today due to all these arrays discussions I've found what I've been looking for.
[19:49:24] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:49:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[19:49:39] *** Joins: seninha (~seninha@user/seninha)
[19:50:05] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[19:50:14] <Xgc> System_Error: In most implementations, you'll usually see some stack pointer adjustment that leaves room for all required automatic storage within this function.  The assignment into one of the automatic storage objects is into this pre-obtained space.
[19:56:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:56:58] *** Joins: janemba (~janemba@94.204.254.193)
[19:58:01] <Xgc> System_Error: When I say "within this function", you can also read that as "within this block".
[19:58:53] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Quit: Leaving)
[19:59:17] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[19:59:22] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:02:18] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[20:02:30] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:02:36] <System_Error> Xgc I've thrown lil experiment and even rather suspictious code did what I would expect it to do. Strange but it works XD
[20:03:19] <System_Error> even using input_var to do return input_var. Even patched. Hmm, funny.
[20:03:32] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Client Quit)
[20:04:23] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[20:05:14] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[20:06:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:06:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:06:22] *** Joins: wroathe (~wroathe@user/wroathe)
[20:06:54] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[20:06:56] <Xgc> System_Error: It's hard to guess what you think happens when returning a structure value from a function.  Feel free to show your test case.
[20:07:11] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[20:07:20] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:08:07] <Xgc> Lots of potential implementation defined behavior, including use of registers to hold smaller values, etc.
[20:08:26] *** Quits: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[20:08:44] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Remote host closed the connection)
[20:09:09] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:09:17] <System_Error> Xgc... moment... 
[20:09:23] <Xgc> For instance, I don't know what you mean by "patch".  That's not a C term.
[20:10:04] <System_Error> Yes... it more like asm idea :)
[20:10:26] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 268 seconds)
[20:10:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[20:12:17] <Xgc> I'm familiar with assemblers and the concept of patching binary images. I don't see how that would apply.
[20:13:18] <Xgc> or even just patching program logic before being assembled.
[20:14:35] <System_Error> Like that... https://paste.debian.net/1218566/
[20:15:33] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[20:17:47] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[20:18:17] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[20:19:27] <Xgc> System_Error: I see.  This just suggests the object is copied, and it is.  Nothing about the object members survives, unless the called function happens to return it.
[20:19:31] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[20:20:37] <Xgc> System_Error: https://www.ideone.com/khdOte
[20:21:31] <System_Error> Xgc I know it means to revert all local things on ret unless they're static and I've been curious if returning it still ok... 
[20:22:01] <nitrix> C allows functions to return structs. Therefore, implementations must support doing that, but also, do it in a way that will work with other compilers on the same platform, aka the ABI. 
[20:22:03] <Xgc> System_Error: Not sure what you mean.
[20:22:49] <nitrix> SystemV for example wants the caller to provide the storage and a pointer is passed through the %rdi register.
[20:23:10] <Xgc> System_Error: This really doesn't have anything to do with duration.  You could do the same thing with static storage, by passing that into the function and assigning back to that static storage object.
[20:23:57] <kurahaupo> System_Error: "revert" implies there was some previous state for the variables to return to. That's not true: rather, the variables cease to exist. If you have a recursive function, there is a separate variable in each call frame
[20:24:36] <kurahaupo> System_Error: You can see that by taking the address of the variable in each frame and comparing them
[20:25:08] *** Joins: dohtem (uid524096@user/dohtem)
[20:25:12] <kurahaupo> (obviously, BEFORE you return from the innermost function call)
[20:25:44] <Xgc> System_Error: I've adjusted the example to make test2 have static storage.  Same behavior: https://www.ideone.com/vvNcqM
[20:26:32] <System_Error> I've meant normally changes to "in" are lost upon returning myfunc. However as they return'ed seems it survives on upper level.
[20:26:36] *** Quits: Inline (~Inline@2a02:908:1252:7a80:fbbe:75e0:a944:53e0) (Remote host closed the connection)
[20:26:48] *** Quits: msk (~msk@185.124.240.174) (Read error: Connection reset by peer)
[20:26:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[20:27:03] <Xgc> System_Error: The entire object is returned.
[20:27:11] *** Joins: msk (~msk@185.124.240.174)
[20:27:11] <Xgc> System_Error: Changes and all.
[20:28:40] <System_Error> Either way seems both codes do what I expect them to.
[20:28:54] <nitrix> You won't learn much from this experimentally. You're approaching the question from the wrong perspective. 
[20:30:38] <System_Error> nitrix> in some sense you make point, as I can miss UB or implementation specifics. But feel free to say what of these are invalid things to do.
[20:31:25] <System_Error> and in the end I'm interested how bad asm code would look and how much stack it would eat. Ye, this is a bit beyond of C, on C layer I care it to be logically valid.
[20:31:30] <nitrix> Returning a struct and returning a pointer to a struct are both subject to the same semantics, they have to get copied to the caller.
[20:32:20] <nitrix> The difference is that the pointer approach involves more than one object because of the indirection, and the semantics don't extend that far.
[20:32:32] <System_Error> Basically I dont want to deal with pointers. These are easy to get them wrong. So operating on typed data where I've explicitly stated intent is better in terms of static analisys I guess.
[20:33:39] <Xgc> System_Error: Sure. That's fine.  There can be a cost, however.
[20:33:43] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[20:34:52] <System_Error> Xgc possibly. I'm now curious how bad that code could be where I really want something like that. But in context of C I care it to be valid in C terms :)
[20:39:13] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[20:40:22] *** Joins: helper (~helper@86.228.71.37.rev.sfr.net)
[20:40:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 264 seconds)
[20:42:13] *** Joins: khoa (~khoa@user/khoa)
[20:44:32] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[20:44:45] *** Parts: helper (~helper@86.228.71.37.rev.sfr.net) ()
[20:45:12] *** Joins: pynchon (~pynchon@a95-94-153-177.cpe.netcabo.pt)
[20:45:27] *** Joins: Akuli (~Akuli@213.216.210.156)
[20:45:55] <nitrix> You're not going to be able to avoid pointers. I suggest investigating what trips your off instead.
[20:46:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:46:50] <System_Error> nitrix> I know pointers are efficient, etc. Yet if I need fixed-content something I'd rather not to use them.
[20:47:57] <System_Error> Would save me few shooting my legs odd ways a bit. And I do care of this in place where I'm up for this trick
[20:49:03] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:1c61:c129:bc96:3b27) (Quit: simon323)
[20:49:35] <nitrix> An optimizing compiler doesn't care much whether you're working with an object or a pointer to that object. The optimization passes are able to instill or elide indirections at will.
[20:49:55] <nitrix> The pointers are just to describe the semantics of your program. They're for you, not the compiler.
[20:51:27] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[20:52:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:52:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:52:22] *** Joins: wroathe (~wroathe@user/wroathe)
[20:52:22] <nitrix> They don't affect performance unless you're really twisting the optimizer's arm or living in the 1970s.
[20:52:27] <System_Error> nitrix> I've seen some magic lto can do.
[20:52:51] <System_Error> Pointers decrease semantics so badly formal declaration of intent nuked and corectness of this thing is no longer clear.
[20:53:10] *** Joins: vysn (~vysn@user/vysn)
[20:53:32] <nitrix> I disagree. I think what you're observing is your shallow understanding of C (obtained experimentally) crumbling apart.
[20:55:59] <kurahaupo> System_Error: can you please translate "would save me few shooting my legs odd ways a bit" into English?
[20:56:22] *** Joins: yandoogle (~yandoogle@188.232.8.21)
[20:57:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Read error: Connection reset by peer)
[20:57:30] <pynchon> @kurahaupo He probably means avoiding Null pointer exceptions
[20:57:33] <nitrix> It seems to me like, you have this understanding of the innerworkings of some implementations/system and that helps you see maybe a little what C is doing, some of the time, but you're still endlessly confused as to why and when. That confusion stems from having second-hand information, which would be immediately be solved if you bothered learning this whole thing from a different perspective.
[20:59:02] *** Quits: yandoogle (~yandoogle@188.232.8.21) (Client Quit)
[21:00:56] *** Joins: boB_K7IQ (~boB_K7IQ@c-67-161-97-81.hsd1.wa.comcast.net)
[21:01:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:01:35] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 264 seconds)
[21:02:03] <System_Error> nitrix> I know C is relatively simple inside. Yet I think I like structured access to information only using pointers when absolutely necessarily and not a second before.
[21:02:21] <System_Error> but just in case I use 'em to dump raw physical mem, etc =)
[21:03:41] <sham1> Pointers are structured though. Heck, they're even typed
[21:03:43] *** Quits: EdFletcher (~ubuntu@user/edfletcher) (Quit: leaving)
[21:05:20] <nomagno> How can you have anything in C that isn't typed? :P
[21:05:33] <nitrix> The C Standard has terminology and very carefully articulated clauses about all these behaviors that you've observed. It's all very consistent once you start making sense of the big picture, and I'll tell you that no one here is irrationally afraid of pointers like you are.
[21:06:42] <nitrix> In fact, even with all this knowledge, you remind me of beginners having only heard of pointers negatively and shaking when they hear that name... except they normally got over their fear in a couple hours of practice, you built a temple on that fear.
[21:06:45] *** Joins: eyeris (~eyeris@068-119-166-104.res.spectrum.com)
[21:06:57] <System_Error> nitrix> I'd say they are. But e.g. returning of output in INPUT params of funcs some ppl practice is just outright ugly at all to my taste
[21:07:07] <floatcomplex> wtf
[21:07:16] <eyeris> Is there a std function to get a FILE handle from a numeric file descriptor? i.e. the inverse of fileno()
[21:07:21] <floatcomplex> fdopen
[21:07:46] <nitrix> System_Error, How do you return the error code?
[21:08:00] <Xgc> System_Error: Problems people typically have with pointers would not be seen in your examples.  Your use would be safe either way.  You could adjust your declarations to be pointers to const qualified structs, if you really didn't want to change the original object of the caller.
[21:08:09] <eyeris> floatcomplex: TY!
[21:08:12] <kurahaupo> note that calling fdopen on the same number may or may not return the same FILE* pointer each time
[21:08:17] <System_Error> nitrix> like e.g. struct... .result = (success/error/something) :P
[21:09:00] <eyeris> Of course, now that I know if I can read the manpage properly. When I first read the SEE ALSO section I read fdopen as fopen :)
[21:09:06] <nitrix> I see. An academic re-inventing an Optional/Result type to model the nondeterminism.
[21:10:09] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:10:58] <System_Error> Not really academic :). Rather sorta trying to be clear in intent across code, etc. And e.g. raping func input in form of pointers isn't exactly that :P
[21:11:09] <floatcomplex> wtf
[21:11:38] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:13:01] *** Joins: monkey_ (~user@190.104.116.153)
[21:13:10] <System_Error> nitrix> also classic way to return error codes is errno, but this one got rather messed up... 
[21:13:27] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.3)
[21:14:58] *** Quits: eyeris (~eyeris@068-119-166-104.res.spectrum.com) (Quit: leaving)
[21:15:13] *** Joins: Tenn0 (~Tenn0@88.97.110.231)
[21:15:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[21:16:05] <nomagno> System_Error: You don't pass "INPUT" to functions, you pass "ARGUMENTS"
[21:16:12] <nitrix> You're not really intended to mess with errno, the values of the error constants aren't specified by the standard, so there isn't a safe way for a user to claim a range of their own.
[21:16:22] *** Joins: mahmutov_ (~mahmutov@5.176.53.53)
[21:16:25] *** Quits: mahmutov (~mahmutov@37.155.65.40) (Ping timeout: 268 seconds)
[21:16:28] <Xgc> System_Error: There may not be a worse way to handle err_no.  It's pretty bad.
[21:17:41] <nomagno> and the return value is a "RETURN VALUE", not an "OUTPUT"
[21:17:58] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 260 seconds)
[21:18:15] <nomagno> The names are pretty descriptive, its data the subroutine gets when called, and gives when it finishes running. Data in boxes. Not input and output
[21:19:21] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[21:19:36] *** Joins: imp (~imp@189-94-80-115.3g.claro.net.br)
[21:19:44] *** Quits: boB_K7IQ (~boB_K7IQ@c-67-161-97-81.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[21:19:55] <System_Error> nomagno> either way, returning stuff in arguments imo kinda ugly (why ther hare to be func type and return then?).
[21:20:19] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Read error: Connection reset by peer)
[21:20:23] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[21:20:30] <nomagno> The most straightforward model for a function IS input/output. C was invented by the same people that made Unix, of course the it enables this behaviour the most. This doesn't mean there is ANY shame to using arguments as the way to get the "actual" output
[21:20:33] <System_Error> *ther hare -> there have
[21:21:32] <nomagno> System_Error: Well mostly because return values are a nice way to build functions, and C uses types for everything.
[21:21:33] <nitrix> Your function will often appear in controlling expressions, like if (foo()), where it's much more useful to have an error code than a struct to manually build or extract.
[21:21:35] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Remote host closed the connection)
[21:22:01] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:22:10] *** Joins: msk (~msk@185.124.240.174)
[21:22:11] <nitrix> Same with foo() && bar() && baz() or anything else that commonly shows up in regular programming.
[21:22:20] <System_Error> nitrix> yep, you get some point: functions like that would be inconvenient in controlling expressions.
[21:22:50] <nitrix> You're making your life a lot more difficult in other areas, just because of this irrational fear of pointers.
[21:22:58] <System_Error> But it wasn't goal when I asked that question.
[21:23:05] <nitrix> I'm not sure you really took the time to weight the pros and cons of that decision.
[21:23:52] <System_Error> nitrix> I'm to have few rather specific uses for that. In places where I'm not going to do if (foo()) for sure.
[21:23:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0)
[21:24:10] *** Joins: imp_ (~imp@192-141-191-227.alternativaip.net.br)
[21:24:21] <nitrix> It's not just controlling expressions, it's tied to lifetimes giving you problems later too.
[21:24:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[21:26:20] <nitrix> The point of passing things "in/out" by arguments is that you can easily identify that as something being borrowed temporarily. Depending on whether it's marked `const`, you also know whether it's immutable or mutable.
[21:26:37] *** Quits: missogra (~missogra@dynamic-095-116-018-128.95.116.pool.telefonica.de) (Quit: Leaving)
[21:27:21] *** Joins: Papa_ (~papa@user/papa)
[21:27:34] <nitrix> With the struct returned approach, now you have substructural data mixed in there with different lifetimes and you're going to do a mistake at some point copying it to _another_ struct and losing track of who owns what.
[21:28:03] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[21:28:08] *** Quits: imp (~imp@189-94-80-115.3g.claro.net.br) (Ping timeout: 268 seconds)
[21:28:08] *** imp_ is now known as imp
[21:28:44] <System_Error> I don't think I would do this mistake. And looking on long list of CVEs related to pointers... seems one can make mistakes like that too. For structs it eventually gets rather arcane.
[21:28:59] <nitrix> You'll compensate the lack of knowing who's the owner by... drum roll... copying the data.
[21:29:06] <System_Error> Merely looking on some program giving me really arcane shit of pointer to struct alignment stuff under ubsan :P
[21:29:31] <nitrix> You are doing the mistake. You're already copying things as a defense mechanism for getting confused with ownership and lifetimes.
[21:30:04] <System_Error> nitrix> yep, in worst case I can end up with copying. But in cases I really care seems I'll get away with it.
[21:30:19] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[21:30:23] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:30:23] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:30:23] *** Joins: wroathe (~wroathe@user/wroathe)
[21:30:43] *** Quits: Tenn0 (~Tenn0@88.97.110.231) (Quit: WeeChat 3.3)
[21:30:59] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[21:32:26] *** Quits: pynchon (~pynchon@a95-94-153-177.cpe.netcabo.pt) (Quit: Leaving)
[21:33:13] *** Joins: strajder (~strajder@user/strajder)
[21:34:19] <nitrix> Now you're just regurgitating arguments you've heard. Have you taken a look at any of those CVEs? One of the reason why there's more CVEs for C is because those applications are a lot more scrutinized for security and because C is the only language that occupies that space.
[21:35:04] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[21:35:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:35:35] <nitrix> It's not about minute choices like this. In the rare cases that it is, sanitizers like -fsanitize=address,undefined would be million of times more helpful than a made of absurd policy of copying things around.
[21:35:36] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[21:35:56] *** Quits: larry87 (~quassel@98.40.245.193) (Ping timeout: 245 seconds)
[21:36:04] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Quit: WeeChat 3.3)
[21:36:06] *** Joins: novns (~novns@user/novns)
[21:36:20] *** Quits: novns (~novns@user/novns) (Remote host closed the connection)
[21:36:51] *** Joins: novns (~novns@user/novns)
[21:37:16] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[21:38:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:39:05] <nomagno> If you take an argument of type X, and your return value is of type X, sometimes (pretty often) you're better off returning an error code, and taking an X*
[21:39:17] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Client Quit)
[21:39:36] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[21:39:43] <System_Error> nomagno> life shown callers tend to ignore error code like that.
[21:40:36] <kurahaupo> nitrix: To be fair, C has two archaic features that make problems harder to avoid: (1) it doesn't have (or didn't have) "non null pointers" enforced through the type system.  (2) dangling pointers to objects whose lifetimes have ended
[21:41:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:41:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:41:14] *** Joins: wroathe (~wroathe@user/wroathe)
[21:41:26] <nomagno> kurahaupo: I can't figure out a way to get rid of dangling pointers though
[21:41:39] <System_Error> additionally pointers trickery upsets static analisys a lot
[21:42:19] <kurahaupo> nomagno: A common approach is  extending lifetimes to match the existence of any pointer
[21:42:31] *** Quits: humdrumcoffee (~humdrumco@88.97.110.231) (Client Quit)
[21:42:43] <nitrix> kurahaupo, The underlaying point (if I lean into the argument that it's the language's fault), is that if this was another language like JavaScript, you'd have probably many times more CVEs due to other idiosyncrasies of type conversions that they have.
[21:42:46] *** Joins: humdrumcoffee (~humdrumco@88.97.110.231)
[21:42:48] <kurahaupo> type punning makes static analysis much much harder
[21:43:07] <nomagno> kurahaupo: Sounds like exactly the kind of things the wonderful standards committee would NOT define. :(
[21:43:10] <kurahaupo> nitrix:  sure. 
[21:43:10] *** Joins: Hax0r (~Hax0r@128.127.222.243)
[21:43:30] <nitrix> kurahaupo, It's worth noticing that even Rust doesn't blatantly copy these things. They do just like us. Track ownership and lifetimes, and functions borrow data.
[21:43:49] <nitrix> Except ours is done manually, they have do it statically, but the principles are the same.
[21:43:49] <kurahaupo> nomagno: For good reason: it would invalidate almost every existing implementation
[21:44:15] <kurahaupo> Oh I'm not suggesting that blindly copying everything is the answer
[21:44:16] <nitrix> You don't come up with coping mechanisms like that. It's just shifting the problem somewhere else.
[21:44:25] <System_Error> nitrix> oh, js is kinda... calls for all possible kinds of bugs. That's why there're numerous offsprings of that...
[21:44:31] *** Joins: pncl1 (~Hax0r@128.127.222.243)
[21:45:05] *** Quits: pncl1 (~Hax0r@128.127.222.243) (Remote host closed the connection)
[21:45:15] <kurahaupo> Another approach is weak pointers, which become null whenever the referent's lifetime ends, but that's rather more costly.
[21:45:16] <nomagno> kurahaupo: oh definitely. How about we make an extension of C called "C minus varied dangling pointer idiosyncrasies"
[21:45:57] <kurahaupo> The first thing to fix is zero-terminated lists inside fixed sized arrays
[21:46:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[21:46:18] <kurahaupo> Go's slices are a reasonable balance on that point
[21:48:19] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:48:29] <kurahaupo> Yet another approach is to put each scope in a new address, and rely on the VMM to trap when an expired object is accessed (or a pointer to it is dereferenced)
[21:48:30] <nitrix> To be clear, I'm not claiming C doesn't have its flaws. I brought other languages like Rust up to explain that _even_ languages with safer guarantees don't do what System_Error is doing.
[21:48:52] <kurahaupo> nitrix: agreed
[21:49:06] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[21:49:23] <nitrix> In C, ownership and lifetimes are tracked manually. Building abstractions or hiding that makes reasoning about it more difficult, not simpler.
[21:49:25] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[21:50:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:51:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:51:56] <kurahaupo> nitrix: Resource management is the big selling point for constructors & destructors in C++ (and prompt destruction, not waiting for memory pressure to trigger them)
[21:51:57] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:52:07] <nitrix> In System_Error's case, it doesn't look more complex, but it shifts the problem elsewhere in other subtle ways. If the input data contained any form of aliasing, you end up making copies of the alias, thinking you're the sole owner and things go bad down the road.
[21:52:14] *** Quits: Hax0r (~Hax0r@128.127.222.243) (Remote host closed the connection)
[21:52:26] <kurahaupo> yep
[21:52:53] <kurahaupo> The "move constructor" in C++ is a genius idea
[21:52:53] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[21:52:53] <varaindemian> does ida pro has any decompilers?
[21:52:59] <varaindemian> by default
[21:53:26] <nitrix> If it was a function argument, it'd be clear that the data is only, conceptually, "borrowed" (albeit C cannot check that statically).
[21:54:09] <nomagno> I think the lifetimes issue should be solved at the CPU level, at this point
[21:54:13] <ioxzev1z> Just curious but why do people constantly mention -fsanitize-address ? What does it do?
[21:55:06] <nitrix> It's a compiler extension, it injects code in the program during compilation, so that when you program runs, various things that shouldn't happen gets checked.
[21:55:12] <CaCode> kurahaupo, what does it do? turn an rvalue into an lvalue?
[21:55:17] <kurahaupo> nomagno: Whether calling a function loans or gifts an object to that function has to be stated by the programmer
[21:55:47] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:55:49] <nitrix> Thins like accessing memory outside the bounds of an object, doing things that are undefined behavior, race conditions between threads, etc. Depends which sanitizers you enable.
[21:56:48] <nitrix> It's a better approach than Valgrind (which has to try to do this by injecting at the right places into the program), instead the compiler can literally compile the code with the instrumentation at the right spots.
[21:57:31] <kurahaupo> CaCode: A move constructor simultaneously constructs a new object and destroys the old one, with the intention that the value is moves between them. Typically used when returning a value from a function and sometimes when passing arguments to a function
[21:57:48] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[21:57:57] <kurahaupo> s/moves/moved/
[21:58:12] <nitrix> Linear types are great. C++ with the RAII and move stuff did a great job.
[21:58:25] <CaCode> kurahaupo, i see makes sense
[21:58:48] <nitrix> C++ would be a much better language if it didn't try to keep the C compatibility (only an FFI layer) and cuts its losses with the standard library.
[21:58:56] <nomagno> So, garbage collectors basically just drink from memory leaks, right?
[21:59:02] <nitrix> I was hoping Rust would be that language but they went overboard too.
[21:59:22] <nitrix> kurahaupo, https://cdn.discordapp.com/attachments/631979628155895830/906669383655497729/FDhzJYbWQAM7TML.png
[21:59:23] <kurahaupo> It would help to be able to annotate function calls to indicate whether the copy or move constructor should be used for each arg;
[21:59:27] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[21:59:31] <CaCode> nitrix, but with the compatibility if some api or something isn't available for c++ i can use the one availabel for c
[21:59:44] <CaCode> isn't that worth something?
[21:59:47] <nitrix> That's what the FFI is for.
[21:59:52] <CaCode> i see
[21:59:54] <nomagno> ^
[22:00:48] <CaCode> nitrix,  can't the language be branched? one that cuts backward compatibility and one that maintains it?
[22:00:55] <kurahaupo> nomagno: garbage collectors require lazy/late destruction
[22:00:56] <nitrix> Instead they tried to have the language fit into another. Polyglot languages.
[22:01:03] <nitrix> It's like https://ideone.com/KrQj9P which is both valid PHP and C.
[22:01:19] <nitrix> No one would want a language to be able to do that, and yet, C++ decided to with C.
[22:01:25] <kurahaupo> in return, object lifetimes don't end while pointers to them exist
[22:03:40] <sham1> Well you can have resource management that is separate from GC-ing, like with how Python has context managers and C# has "using"
[22:04:33] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[22:05:03] <nomagno> nitrix: I mean, C++ is NOT a completely different language in the same sense as PHP. The relationship between C and C++ can be summarized by the following two words: "C" - "C++"
[22:05:07] <floatcomplex> runtime gc is a failed experiment
[22:05:29] <nomagno> There are clear incentives to preserve a fairly big common subset
[22:05:33] <sham1> Eh
[22:05:41] <nitrix> nomagno, Mhm. I just wish they parted way entirely. That would have made a really rock solid foundation for good replacement.
[22:05:55] <floatcomplex> apple showed that you can take runtime gc away from regular developers and the sky doesn't fall, and the user experience is better for it
[22:07:27] <sham1> What do you mean by "runtime gc" in this?
[22:07:38] <nitrix> nomagno, e.g. new and delete, smart pointers, okay sweet, except you still have access to everything bad about C, so you have to navigate your way in C++ of only the ++ part ignoring the C part. Might as well taken it out entirely.
[22:07:47] <nitrix> nomagno, And just a FFI to interact with it.
[22:08:17] <floatcomplex> sham1: some people think of ARC as compile-time garbage collecting so i'm saying runtime gc to specifically exclude that
[22:08:25] <floatcomplex> ARC as a different class of difficulties
[22:08:43] <nitrix> Cycles :>
[22:08:45] <floatcomplex> s/as/has/
[22:09:14] <floatcomplex> nitrix: yes, but also just the additional cognitive burden on anyone looking at the code
[22:09:30] <floatcomplex> particularly if it has to play nice with non-ARC'd code
[22:10:01] <nitrix> For sure. If it's built-in in the language and done by the compiler though like you said, it's a little bit better.
[22:10:05] <floatcomplex> but runtime garbage collection is no longer at the outer edge of any part of the pareto curve
[22:10:06] <nitrix> I think I would still prefer a GC.
[22:10:57] <nitrix> The concurrent ones like Go are really good. Lower throughput, but it's tweakable and still a function of how much garbage you generate.
[22:11:33] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:11:48] *** Joins: EdFletcher (~ubuntu@user/edfletcher)
[22:12:05] <nitrix> If Go's official implementation didn't have the insane 120ns overhead to call into C functions, due to their calling conventions being incompatible with C's ABI, I'd be using it a whole lot more.
[22:12:58] <nitrix> The overhead was fine for real-time audio processing, but way too much when I tried to make a 3D game.
[22:13:15] <nitrix> On the other hand, the GC _never_ was a problem.
[22:13:36] *** Parts: EdFletcher (~ubuntu@user/edfletcher) ()
[22:14:27] <floatcomplex> well the go GC is responsible for all of the very restrictive rules about what you can and cannot pass back and forth between c and go code
[22:14:32] <floatcomplex> so in that sense it is a problem
[22:15:07] <floatcomplex> afaict you can't use go under the hood to implement, for example, a c api for threads/coroutines
[22:15:33] <nitrix> True. And there's still some annoyances like being unable to do &arr[i], even for just a moment.
[22:15:52] <sham1> Garbage collection, especially with stuff like compaction, can and a lot of the time is very nice and efficient. Especially with a compacting GC, you can get bump allocation while also being able to have stuff actually get deallocated nicely
[22:16:18] <nitrix> Mhm and the cache thanks you for it too.
[22:16:42] *** Quits: chasmo77 (~chas77@71.63.241.168) (Remote host closed the connection)
[22:16:45] <nitrix> Assuming the GC doesn't run too frequently, that trashes the cache.
[22:16:52] *** Joins: mahmutov (~mahmutov@176.30.166.211)
[22:19:56] *** Quits: mahmutov_ (~mahmutov@5.176.53.53) (Ping timeout: 268 seconds)
[22:20:38] <nitrix> Unpopular opinion, I think OOP objects are great. That's how I organize my C code anyway, in terms of objects and operations on them, all in a neat file.
[22:21:16] <nitrix> I think inheritance is where you start getting into trouble, but if you limit yourself to composition, you're good.
[22:21:55] *** Telvana is now known as Rob
[22:22:04] <apotheon> Prototype-based inheritance can be good, too.
[22:22:11] <apotheon> Multiple inheritance is a damned mess.
[22:23:07] <nitrix> I'm usually more annoyed by all the dependency injection needed for testing, and the insane amount of design patterns people come up with.
[22:23:07] *** Quits: marguesto (~marguesto@37.220.203.250) (Quit: leaving)
[22:23:16] <floatcomplex> inheritance is an absolute evil
[22:23:20] *** Joins: Samian (~s@user/samian)
[22:23:25] <floatcomplex> polymorphism too, if that's even a distinct concept
[22:23:29] <nitrix> If people could be reasonable, I'd be so happy with OOP and a GC.
[22:23:39] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 256 seconds)
[22:23:44] <floatcomplex> objects, as a concept, are not the problem with oop
[22:23:55] <floatcomplex> it's all that hide-what's-actually-happening shit
[22:24:21] <nitrix> Agreed. It makes creating layers of abstractions to easy.
[22:24:25] <nitrix> *too
[22:24:35] <floatcomplex> it makes adding layers of abstraction feel like useful work
[22:24:49] <nitrix> Don't we see the same thing in C as well? People trying to typedef pointers, or do cute return value structs, etc.
[22:24:53] <apotheon> nitrix: An interesting statement I found years ago said that a design pattern is a sign of a missing capability in your language.
[22:24:59] <floatcomplex> yeah and it's bad in C when people do that
[22:25:24] <nitrix> apotheon, I think I was the person to popularize that saying, lol.
[22:25:26] <System_Error> that _even_ languages with safer guarantees don't do what System_Error is doing. <- in principle you're right but seems I want few rather specific uses that dont hinder efficiency much in fundamental ways.
[22:25:56] <floatcomplex> if your layer of abstraction results in someone reading the code needing more domain-specific knowledge to debug the code rather than less, then the layer of abstraction should not exist
[22:26:11] <apotheon> nitrix: Really?  I found it in a Ruby mailing list more than a decade ago.
[22:26:35] <apotheon> nitrix: It's a good line.
[22:26:38] <nitrix> apotheon, Not so a missing capability, but a problem with its design that causes you to repeatedly emulate/correct it yourself every time.
[22:26:48] <apotheon> or that
[22:26:55] <apotheon> I don't recall the exact phrasing I first encountered.
[22:27:01] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[22:27:20] <nitrix> I probably wasn't the first though, but I was loud and annoying back then :3
[22:27:34] * nitrix erm, more loud and more annoying.
[22:27:43] <apotheon> Java's approach to dependency injection is a great example of a language's need for the pattern being a sign of something deeply wrong.
[22:28:22] <apotheon> "Oh, you want dependency injection?  Okay.  You need this library, and this boilerplate, and . . ."
[22:28:32] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[22:28:32] <apotheon> C is nice.
[22:28:36] *** Joins: msk (~msk@185.124.240.174)
[22:28:49] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[22:28:57] <apotheon> A complete, but bare-bones, language can make things you thought difficult much easier to do on your own.
[22:29:07] <nitrix> Frameworks are the bane. They take away your main and your control-flow. Your application just becomes callbacks in something bigger.
[22:29:29] <apotheon> I don't think I've ever used a framework in C.
[22:29:41] <sham1> I've used gtk and such
[22:29:46] <apotheon> The closest I recall getting to using frameworks with C is probably a static site generator.
[22:29:49] <System_Error> floatcomplex> there's saying every C++'er speaks their own C++. Some C++'ers I've seen spoken so exotic subdialict nobody else was able to deal with it.
[22:30:04] <floatcomplex> yes
[22:30:11] <apotheon> Yeah, that seems true of C++.
[22:30:22] <nitrix> Ironically, they say the same thing of Lisp.
[22:30:22] <apotheon> It's like Perl that way (or vice versa).
[22:30:37] <sham1> Anyway, what would be the acceptible limit for abstraction after which point stuff becomes too abstracted
[22:30:42] <nitrix> So that's interesting, when you consider the languages are the completely opposite spectrums.
[22:30:43] <APic> Darn.
[22:30:52] * APic should not have left #Language-Comparison
[22:30:54] <APic> 😉
[22:30:56] <sham1> Well Lisp is also a language family more than anything
[22:31:01] <apotheon> yeah
[22:31:08] <apotheon> I'm guessing this is about Common Lisp.
[22:31:12] <nitrix> C is become it's own family too slowly.
[22:31:13] <Xgc> A design pattern is a well worn approach, finally given a name, after years and years of use.
[22:31:38] <sham1> But yeah, the ways one programs in Common Lisp, or the various implementations and dialects of Scheme certainly show this kind of variance
[22:31:39] <apotheon> nitrix: Is that supposed to be the collection of things like C, C++, and Objective-C?
[22:32:07] <nitrix> apotheon, I'd almost fit Rust in there too.
[22:32:11] <apotheon> hmm
[22:32:35] <sham1> Yeah, I don't think I'd agree with that design pattern thing. Like, is iteration a sign of a deficiency in a language just because it's a pattern?
[22:32:36] *** Joins: e36freak (~e36freak@user/e36freak)
[22:32:40] <apotheon> From what I've heard about it, that seems like an uncomfortable fit, but my experience with Rust is basically "hello world", so I don't have anything direct to say about that.
[22:32:46] *** Joins: kish` (~aqua@user/aqua)
[22:32:53] <apotheon> sham1: Is iteration a design pattern?
[22:32:57] <sham1> Well iterators are
[22:33:01] <apotheon> ah
[22:33:10] <apotheon> iterator objects
[22:33:15] <sham1> Iteration is the application of the pattern in a sense
[22:33:34] <apotheon> You can iterate without an iterator object in the design pattern sense.
[22:33:54] <apotheon> for (int i=1; i < 1000; ++i)
[22:34:13] <nitrix> apotheon, It "looks" (semantically too) a lot like C++ and writing it "feels" fairly close to C (you're asking yourself the same questions, about lifetimes, ownership, borrowing, temporary stuff, etc).
[22:34:57] <apotheon> nitrix: A description of Rust that I once saw (and found highly amusing) was that it was like someone who had only ever used Haskell heard someone describe C and tried to implement it based on that description.
[22:35:07] <nitrix> 100%.
[22:35:09] *** Joins: tiotags (~tiotags@user/tiotags)
[22:35:16] <floatcomplex> hahaha
[22:35:21] <apotheon> That almost seems like it should be in the Haskell family.
[22:35:33] <nitrix> It honestly maybe should.
[22:35:48] <nitrix> If the syntax was ML-like, I'd side with that.
[22:35:53] *** Joins: Livio (~livio@host-87-6-217-129.retail.telecomitalia.it)
[22:35:54] <apotheon> Damn.  Now you're feeding my latent interest in Rust again.
[22:36:11] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:36:12] <apotheon> I wish SML was a better-supported language.
[22:36:18] <sham1> Nah. Rust has taken inspiration from MLs, but it's certainly not very much like it
[22:36:19] <apotheon> I'd love to write a lot of code in SML.
[22:37:02] <apotheon> It'd be nice if SML/NJ was kept up to date.
[22:37:15] <nitrix> SML seems to be the sweet spot of "practical world" before you deep dive into Haskell.
[22:37:31] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:37:44] <APic> Mu-ha-ha.
[22:37:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a4ba:4eba:916d:1ed0) (Remote host closed the connection)
[22:37:52] <apotheon> SML feels much simpler to me than Haskell -- maybe like comparing C to C++, except not quite that bad.
[22:38:02] <apotheon> . . . comparing C to Objective-C?
[22:38:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2315:e7f0:55c7:7d49)
[22:38:13] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:38:13] <nitrix> Myeah kinda.
[22:38:26] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[22:38:35] <apotheon> I like SML; Haskell has been a harder sell for me.  Same for C and C++.
[22:38:57] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[22:39:11] *** Parts: kish` (~aqua@user/aqua) (Leaving)
[22:39:32] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Max SendQ exceeded)
[22:40:01] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:41:13] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[22:41:39] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361)
[22:42:31] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361) (Remote host closed the connection)
[22:42:58] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361)
[22:43:12] <nitrix> I see. You want a small elegant design that fits in one's head, but that feels like you can practical things with.
[22:44:04] <apotheon> ideally
[22:44:09] <APic> /t C Programming Community | Paste (>3 lines): https://bpa.st/ or http://sprunge.us/ | Wiki: http://www.iso-9899.info/ | Books: http://www.iso-9899.info/wiki/Books | C2X Charter: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2086.htm | Standard: http://iso-9899.info/wiki/The_Standard | Off-topic: #c-offtopic | C11 trivia game: #c-jeopardy | Language Comparisons: #Language-Comparison 😉
[22:44:13] <apotheon> I do also like Ruby, though, so there's that.
[22:44:17] <candide> Title of APic's link: Main Page - C
[22:44:29] <APic> candide: Thanks, i like You, too.
[22:44:38] <candide> Think nothing of it, A​Pic
[22:44:48] <nitrix> APic, We're just killing time. As soon as someone asks a C question they'll be served x]
[22:44:54] <APic> Good.
[22:45:07] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Quit: Haxxa flies away.)
[22:45:14] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2315:e7f0:55c7:7d49) (Ping timeout: 268 seconds)
[22:45:40] <apotheon> How many C devs does it take to screw in a lightbulb?
[22:45:46] <floatcomplex> what's a pirate's favourite non-statistical programming language
[22:46:05] <apotheon> floatcomplex: What kind of pirate do you mean?
[22:46:18] *** Quits: zacts (~zacts@user/zacts) (Quit: leaving)
[22:46:33] *** Joins: zacts (~zacts@user/zacts)
[22:46:45] <floatcomplex> one what sails the salt sea looking for to maintain his two brothers and he
[22:46:56] <nitrix> apotheon, Two! One to hold the bulb, one to spin the room.
[22:47:22] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[22:47:27] *** Joins: Nselm (~Nselm@p200300d56f3676fb51149a61e900cfaf.dip0.t-ipconnect.de)
[22:47:54] <apotheon> nitrix: nice
[22:48:05] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 244 seconds)
[22:48:28] <apotheon> In C, an incautious programmer can shoot himself in the foot.  In C++, it only allows you to blow off your whole leg.
[22:48:35] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Ping timeout: 256 seconds)
[22:49:07] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[22:49:46] <sham1> You get leg problems but suddenly you also get demons coming out of your nose
[22:50:05] <floatcomplex> what kind of pirate ship is this
[22:50:41] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:50:53] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:51:35] <nitrix> I never liked sayings like this. I've noticed that a lot of programming is built on word of mouth, cargo-culting and worshipping.
[22:51:44] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[22:52:06] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Max SendQ exceeded)
[22:52:36] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:52:42] <floatcomplex> that saying also dates back to before asan and valgrind were a thing
[22:53:15] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[22:53:15] <nitrix> Every one in a while, you heard again the same idioms repeated by people who hear them for the first time, giving them validation in their choices, but all you can do is sigh.
[22:53:19] <nitrix> *once
[22:53:27] <nitrix> I can't type today :<
[22:53:53] <nomagno> ASan and Valgrind are specific tools, not part of the language. Agreed it makes development substantially easier for... Pretty much anything, though
[22:54:38] <floatcomplex> nomagno: the hammer is not part of the nail, that is no shortcoming of the nail
[22:55:31] <apotheon> Isn't asan pretty new?
[22:56:10] <floatcomplex> it's been in gcc and clang since 2014 or so
[22:56:15] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:56:20] <apotheon> Yeah, that's pretty new.
[22:56:52] <apotheon> Hell, I think most C dev these days is still in C99.
[22:56:56] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[22:56:59] <supakeen> Y'all get C99?
[22:57:02] <floatcomplex> valgrind is older but idk if valgrind gets as much developer attention anymore now that asan is nearly universally available
[22:57:20] <nomagno> apotheon: I am on C99, doesn't mean I can't use these tools though
[22:57:23] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[22:57:31] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Max SendQ exceeded)
[22:57:38] <apotheon> A lot of supposed C90 code probably includes C99isms.
[22:57:41] <nitrix> My projects are on C17. No reason why I would need older versions.
[22:57:53] <nomagno> I am using the C99 language, not 1999 toolchains
[22:57:59] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:58:01] <apotheon> nomagno: of course
[22:58:03] <floatcomplex> lol
[22:58:17] <apotheon> I'm just commenting on how slowly C culture moves.
[22:58:26] *** Quits: Matt|home (~matt@adsl-74-233-58-34.mia.bellsouth.net) (Ping timeout: 260 seconds)
[22:58:58] <nitrix> More like people having older projects setup on some old version of MSVC and aren't bothered to upgrade and follow the rest of the world.
[22:59:33] <floatcomplex> if rust had been thought of 3 years later i'm not sure it would have become a thing
[22:59:49] <nomagno> Well if you need portable code, it is not necessarily an inconvenience. There are many projects where you can just specify "latest GNU C is required" or "MSVC-only" and no one will say it is an unreasonable dependency
[22:59:59] <nitrix> floatcomplex, What even do you have in mind?
[23:00:43] <floatcomplex> nitrix: mostly the near universal availability of things like valgrind and asan, which weren't yet a thing when the rust people started trash talking C
[23:00:57] <floatcomplex> also gcc warnings royally sucked back then
[23:01:12] <apotheon> Ah, as expected -- Clang got asan in 2012.
[23:01:17] <apotheon> had to look it up
[23:01:47] <nomagno> I think the "C sux lol git gud!" Phase of the Rust ecosystem is over... Actually, I still known many people that say exactly that
[23:01:49] <sham1> I don't know if the Rust people really cared about C all that much. I remember the scorn being mostly C++, which C being sometimes mentioned in the capacity of "C/C++"
[23:01:49] <nitrix> floatcomplex, Mhm. I find this sort of tooling nicer than wrapping my head around really complicated type signatures.
[23:02:07] <apotheon> nitrix: I would say a GCC-only requirement is an unreasonable dependency.
[23:02:18] *** Quits: zacts (~zacts@user/zacts) (Quit: leaving)
[23:02:24] <floatcomplex> nitrix: and not having to throw out all the code ever written regardless of how battle tested it is
[23:02:25] <apotheon> better provide binaries for my machine
[23:02:28] <nomagno> apotheon: You meant to ping me?
[23:02:32] <nitrix> apotheon, You meant that to nomagno what I agree.
[23:02:34] *** Joins: zacts (~zacts@user/zacts)
[23:02:37] <nitrix> *but
[23:02:45] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[23:02:48] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[23:03:28] <apotheon> oh
[23:03:36] <apotheon> um
[23:03:47] <apotheon> nomagno: Yeah, you.
[23:04:05] <apotheon> nomagno: thanks
[23:04:09] <nitrix> I think MSVC is falling behind (they're catching up to C11 though). Anyhow, you can easily write C17 code and Visual Studio can use Clang to compile your stuff.
[23:04:14] <apotheon> had to re-read to make sure I did actually mean nomagno 
[23:04:19] <APic> ping: Do you want to ping broadcast? Then -b. If not, check your local firewall rules
[23:04:31] <apotheon> MSVC has *always* been falling behind, as far as I'm aware.
[23:04:40] <nitrix> Like Internet Explorer.
[23:04:53] <nitrix> It's a recurring Microsoft theme.
[23:04:55] <APic> WARNING: pinging broadcast address
[23:05:09] <apotheon> I'm rather annoyed that C11 introduced guaranteed zeroing as an optional feature, and basically everyone just said "fine, we don't need it".
[23:05:11] <nomagno> apotheon: I am not saying GCC is a reasonable dependency, I am saying in contexts where you depend on GNU stuff anyways I don't think it would matter all that much. Same with Microsoft and MSVC. I am vocally against GNU vendor lock-in but if you're going to depend on them at least use the rest of the ecosystem
[23:05:29] <apotheon> still stuck having to pull in code from libsodium
[23:05:52] <apotheon> nomagno: Okay, that seems less bad.
[23:05:55] <nitrix> apotheon, I'm bothered VLAs are optional again. I don't like backwards incompatible changes.
[23:06:15] <apotheon> I don't, either.
[23:06:17] <APic> *sigh*
[23:06:21] <nomagno> VLAs are optional? What
[23:06:25] <APic> Those modern Times. Almost as bad as: rm: it is dangerous to operate recursively on '/'
[23:06:30] <APic> rm: use --no-preserve-root to override this failsafe
[23:06:31] <nomagno> That's BS. Lemme look for the rationale
[23:06:40] <nitrix> Every modern compiler supported them, they can't undo C99, so I just don't see the point. I do, but I don't.
[23:06:57] <apotheon> nitrix: What's the point you do see?
[23:07:00] <sham1> BLOW THE STACK
[23:07:13] <APic> Blownfusen versus Corkenpoppen.
[23:07:15] <APic> +e
[23:07:17] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[23:07:19] <nitrix> apotheon, Well some lazy vendor complained to the committee of course.
[23:07:55] <nomagno> apotheon: Making VLAs optional is not necessarily a bad idea. But after 24 years of it being standardized? Too late
[23:07:57] <sham1> One of these lazy vendors has a M as their first letter and is famous for an OS whose name is a part of a building
[23:08:04] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[23:08:09] <apotheon> nomagno: of course
[23:08:20] <nitrix> It makes the implementations more difficult and they had their way because the Standard rationale says it must reduce changes and favorize existing implementations.
[23:08:24] <apotheon> sham1: lovely
[23:08:47] <sham1> Although me being the opinionated grinch, I just say "good riddance" wrt. the whole VLAs being optional thing
[23:09:01] <nomagno> You can't be seriously telling me Michaelsoft Binbows is making the standard comply withthem instead of complying with the standard
[23:09:09] <floatcomplex> -Wvla is a thinf
[23:09:13] <floatcomplex> outside of microsoft
[23:09:24] *** Joins: damxsa (~damx@2001:16a2:df3c:b500:52e7:1c66:409b:139f)
[23:09:51] *** Joins: reset (~reset@user/reset)
[23:09:52] <floatcomplex> code that has to be run more than one time for the purpose of making a figure for a powerpoint presentation should not use VLAs
[23:10:28] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Quit: Leaving)
[23:10:29] <floatcomplex> unfortunately, most code written by the people who apparently clamored for VLAs falls into that category
[23:10:41] <nomagno> MSVC should be ashamed of itself as the official compiler of THE global operating system vendor
[23:11:00] <floatcomplex> wtf
[23:11:31] *** Joins: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85)
[23:11:48] <nomagno> Well, MSVC can not feel and Microsoft isn't the only big bucks OS vendor. But my point got accross
[23:11:49] *** Joins: Matt|home (~matt@adsl-74-233-58-208.mia.bellsouth.net)
[23:13:33] <APic> APIC should be ashamed of itself as the extensively used interrupt controller.
[23:13:35] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[23:13:44] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[23:14:41] <apotheon> Shame should be ashamed of itself for enabling gaslighters and other abusers to brainwash and control their victims.
[23:14:49] *** Quits: damxsa (~damx@2001:16a2:df3c:b500:52e7:1c66:409b:139f) (Ping timeout: 268 seconds)
[23:15:13] <apotheon> Cuil should cuil itcuil before it cuils into its own navel.
[23:15:24] <nitrix> floatcomplex, Curiously, thoughts on Erlang, Prolog and TCL? Whichever you think is worth discussing.
[23:15:38] <apotheon> I think it's spelled/capitalized as "Tcl".
[23:16:01] <apotheon> syntax error
[23:16:02] *** Joins: sedeki (~textual@user/sedeki)
[23:16:22] <floatcomplex> nitrix: i have had almost no exposure to them. my dayjob for most of my career was in hpc and dsp, and now mostly microcontroller stuff
[23:16:22] *** Joins: Titan23 (~Titan23@host109-155-157-194.range109-155.btcentralplus.com)
[23:16:47] <floatcomplex> hence c99, and porting f77 code to c99
[23:16:54] <nitrix> Aye okay. I was thinking to try mixing C and Tcl, it's apparently pretty common.
[23:17:27] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[23:17:27] *** Quits: sedeki (~textual@user/sedeki) (Client Quit)
[23:17:32] <nitrix> I'm working on a game and some aspects of it would be nice to have scriptable.
[23:17:38] <APic> Punchbowl
[23:18:27] <APic> Have You checked ici and IDC and stuffs? ☺
[23:19:48] <System_Error> <floatcomplex> outside of microsoft <- M$ in context of C is... ehm, bad. They didnt had C99 for a while, not sure if they even got it. And C11 would probably take them next century :D
[23:20:24] <sham1> > M$
[23:20:26] * sham1 squints
[23:20:34] <System_Error> disclaimer: I dont use ms products, just vague estimate from C99 thing :P
[23:20:39] <apotheon> MicroDollar
[23:21:48] <APic> Micro$haft
[23:21:57] <floatcomplex> System_Error: the context of "-Wvla is a thing, outside of microsoft" is that there are more reasons to disallow VLAs in a codebase than just to make it microsoft-friendly
[23:22:33] <pragma-> I fucking hate people who still spell Microsoft with a dollar sign in 2021.
[23:22:52] <apotheon> I don't care.
[23:23:00] <System_Error> I'm kinda agree, there was quite a good discussion of that recently and it had its point. But M$ tools standards compliance still hilarious.
[23:23:05] <sham1> It's been cringe since the early 2000s, if not even earlier
[23:23:52] <System_Error> pragma-> corps are all about money, what's wrong in admitting it?
[23:24:00] <pragma-> In my experience, it's just clueless people trying to fit in who spell it that way.
[23:24:10] <nomagno> sham1: Spelling M$ as M$ is cringe, agreed
[23:24:20] <apotheon> Why don't people just add a "y" to "cringe" to make it an adjective?
[23:24:43] <nitrix> cringey is a thing.
[23:25:04] <apotheon> wouldn't know it from this discussion
[23:25:11] <nomagno> Based.
[23:25:53] *** Quits: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85) (Quit: Leaving)
[23:26:03] *** Joins: Chip1972 (~Chip1972@186.206.217.247)
[23:26:15] <floatcomplex> microsoft isn't a great company, but they bear almost no resemblance to the company with that name that existed before 2014 or so
[23:26:30] <APic> In my experience, candide is moar intelligent than its Creator.
[23:26:33] *** Joins: seninha (~seninha@user/seninha)
[23:26:49] <floatcomplex> the company currently called that is a FLAANG wannabe that actually needs to try to meet developers where they are
[23:27:22] <System_Error> floatcomplex> I think they ignored coder woes kinda after 2014 so now nearly all powerful C coders I know gone gcc and clang instead
[23:27:41] <nitrix> No no, it's not FAANG anymore, google is alphabet and facebook is meta x]
[23:28:02] <sham1> So MAANA
[23:28:11] <sham1> Or MAAAN
[23:28:14] <floatcomplex> i dont even remember what faang stands for or whether there is supposed to be an L in it
[23:28:39] <nomagno> I though only Oculus renamed themselves to Meta? It was the whole megacorp? That's meta, even the acronym
[23:29:06] <sham1> I don't think so, but it's Facebook, Amazon, Apple, Netflix, Apple
[23:29:12] *** Joins: zalt (~zalt@user/zalt)
[23:29:18] *** Joins: mark_ifinite (~skynet@ppp-94-66-136-166.home.otenet.gr)
[23:29:19] <sham1> Err, second Apple is google
[23:29:25] <nitrix> Facebook Amazon Apple Netflix Google?
[23:29:29] <sham1> Yes
[23:29:32] <floatcomplex> i would have loved to be a fly on the wall at the FTC when the regular person came back from vacation and was like "you let them rename themselves WHAT"
[23:29:33] <nomagno> floatcomplex: Facebook, Amazon, Apple, N- yeah that
[23:29:54] <edk> leave google as google and it can be MANGA which is at least funny as well as being depressing
[23:30:21] <nitrix> As a weeb, don't let them go there. It's my safe space.
[23:31:09] <ozzz> fizzie: after reboot problem gone... and I wrote test program... 
[23:31:11] <APic> Hello zalt.
[23:31:21] <zalt> APic: hey APic
[23:31:28] <APic> zalt: What is Your opinion about containers?
[23:32:10] <zalt> i think they're amazing, i used them for a project once, but didn't go into kubernetes or anything, just for development
[23:32:27] <APic> o/
[23:32:32] <nomagno> Can you even form an opinion on containers? They're a proven-to-work tool, not a sports team :P
[23:32:39] *** Quits: alch (~alch@151.44.68.18) (Read error: Connection reset by peer)
[23:32:41] <APic> As long as they do not get recursive somehow
[23:32:43] *** Joins: nbits (~nbits@179.110.23.146)
[23:32:43] <nitrix> Kubernetes is a learning curve, but containers on their own are really valuable.
[23:32:53] <sham1> Oh one can certainly have opinions about tools
[23:32:56] *** Quits: nbits (~nbits@179.110.23.146) (Changing host)
[23:32:56] *** Joins: nbits (~nbits@user/nbits)
[23:33:11] *** Quits: Nselm (~Nselm@p200300d56f3676fb51149a61e900cfaf.dip0.t-ipconnect.de) (Quit: Client closed)
[23:33:17] <floatcomplex> my stance on docker remains when someone suggests using docker to solve a problem, i ask them for an example of a problem they would not use docker to solve
[23:33:27] <floatcomplex> just to make sure
[23:34:29] <nomagno> Docker is definitely like using a cannon to squash a fly, most of the time
[23:34:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:35:30] <APic> Is Docker written in C?
[23:35:33] <sham1> Go
[23:35:41] <nitrix> It's in Go. The virtualization layers are in C.
[23:35:41] <nomagno> also it makes some developers not want to detail how to actually build their software, or detail their dependencies
[23:35:58] <nitrix> Well and hardware.
[23:36:09] <System_Error> there's LXC written in C :)
[23:36:10] <floatcomplex> APic: docker is really just a convenience layer on top of linux kernel functionality (so C)
[23:36:14] <APic> Docker is written in the Go programming language and takes advantage of several features of the Linux kernel to deliver its functionality. Docker uses a technology called namespaces to provide the isolated workspace called the container.
[23:36:17] <sham1> I just like it with how easy it makes it for me to deploy my stuff onto my server
[23:36:18] <APic> Uh oh.
[23:36:25] <floatcomplex> you can implement docker in awk basically
[23:36:27] <APic> floatcomplex: True.
[23:37:00] <zalt> a perfect case for it is setting up local development environments (for example with docker-compose) where you have for example a container for postgres, one for your web framework of choice, and whatever else you have, then developers can contribute and their code in this environment
[23:37:03] *** Joins: alch (~alch@151.44.61.87)
[23:37:19] <floatcomplex> if you are using docker out of some nebulous motivation to sandbox things, don't
[23:37:22] <nitrix> Cross-compilation is nice with docker containers too.
[23:37:25] <floatcomplex> it doesn't do that
[23:37:51] <zalt> massive improvements in productivity, the alternative would be virtual machines, and they're heavy in comparison and the tools aren't as good
[23:38:06] <sham1> It makes deployments so darn convenient
[23:38:08] *** Joins: phao (~phao@2804:d45:8e7a:de00:10a0:21c4:74dc:fba7)
[23:38:18] *** Joins: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it)
[23:38:24] <clamiax> re
[23:38:25] <nomagno> Isn't a container, by definition, meant to be as close to virtualization-like sandboxing as you can get without actually virtualizing the kernel?
[23:38:25] <APic> wb
[23:38:47] <nomagno> You'd expect Docker to be good at sandboxing
[23:38:52] <floatcomplex> and yet
[23:38:58] <APic> r  Container /kˈɔntaɪnɜ/ <masc, n, sg>
[23:38:58] <APic>    [transp.] freight container <n>, intermodal container <n>, ISO container <n>
[23:38:58] <APic>         "ISO-Container"  - freight containers, intermodal containers, ISO containers
[23:39:03] <nitrix> I moved my entire infra from DigitalOcean to Linode in 5 minutes. Setup the k8s cluster, applied the changes, changed the DNS. Bam.
[23:39:18] <apotheon> I would not expect Docker to be good at sandboxing.
[23:39:20] *** Quits: mark_ifinite (~skynet@ppp-94-66-136-166.home.otenet.gr) (Quit: leaving)
[23:39:25] <System_Error> I'd say docker been just best at hype.
[23:39:40] <edk> nitrix: it's similarly easy if you're good at configuration management, to be fair
[23:39:41] <nitrix> I think that's a testament to the technology. If you're responsible for disaster recovery or anything, that's super valuable.
[23:39:44] <APic> Once at the µCCCs we actually burned sand.
[23:39:46] *** Quits: Titan23 (~Titan23@host109-155-157-194.range109-155.btcentralplus.com) (Quit: Leaving)
[23:39:57] *** Quits: Rob (~capo@user/telvana) (Quit: ZNC 1.9.x-git-156-ac57c0e5 - https://znc.in)
[23:40:27] <nomagno> Docker is definitely overhyped and overused for projects where a makefile and a dependency list suffices, but is a great tool in its own right
[23:42:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:42:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:42:00] *** Joins: wroathe (~wroathe@user/wroathe)
[23:42:01] <nitrix> Imo, the effort docker requires to learn makes it a no brainer to adopt systematically. All my projects that runs as some kind of service reachable by others have an image.
[23:42:42] <floatcomplex> right, but the effort to ensure that you have correctly removed all of the capabilities it shouldn't have is nontrivial
[23:42:50] <floatcomplex> so if you're using it for that, don't
[23:42:55] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[23:42:57] <floatcomplex> use a vm
[23:44:04] <nitrix> I don't and I'm okay with that. Containers that have sensible data that could become an attack vector are on their own cluster (physical nodes and network).
[23:46:17] *** Joins: larry87 (~quassel@98.40.245.193)
[23:46:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:48:13] *** Joins: korg815 (~korg815@user/korg815)
[23:48:22] *** Quits: nbits (~nbits@user/nbits) (Quit: Leaving)
[23:48:33] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:49:31] *** Quits: begriffs (~begriffs@user/begriffs) (Remote host closed the connection)
[23:49:53] *** Joins: begriffs (~begriffs@user/begriffs)
[23:50:17] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[23:51:03] *** Quits: begriffs (~begriffs@user/begriffs) (Remote host closed the connection)
[23:51:22] *** Joins: begriffs (~begriffs@user/begriffs)
[23:56:46] *** Quits: micronn (~micronn@user/micronn) (Quit: brb)
[23:57:10] *** Joins: micronn (~micronn@user/micronn)
[23:58:50] <APic> What is trivial?
[23:58:58] <APic> Not even 0 is
[23:59:00] <APic> Not at all
