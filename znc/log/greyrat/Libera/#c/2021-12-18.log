[00:01:35] *** Joins: Enitin (~Enitin@82.102.22.85)
[00:02:27] *** Joins: cousteau_ (~cousteau@user/cousteau)
[00:04:17] *** Quits: cousteau (~cousteau@user/cousteau) (Ping timeout: 240 seconds)
[00:05:09] *** Joins: zat (~zat@191.23.60.220)
[00:06:11] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:06:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:18:39] <Franciman> thanks sham1 
[00:23:15] *** Joins: evocatus (~evocatus@62.182.78.42)
[00:27:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[00:29:14] <Franciman> why does the flexible array member must have a complete value?
[00:31:00] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:36:27] <constxd> what
[00:36:32] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[00:37:09] <Franciman> field has incomplete type 
[00:37:44] *** Joins: johnnyreb (~tth@user/johnnyreb)
[00:38:17] *** Quits: sbrothy (~sbrothy@192038130164.mbb.telenor.dk) (Ping timeout: 240 seconds)
[00:39:11] *** Joins: pilyn (~pilyn@user/pilyn)
[00:41:57] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:43:37] <Franciman> ah this is fake
[00:43:55] <Franciman> clangd was fooling me
[00:43:57] <Franciman> sorry
[00:43:59] <Franciman> T.T
[00:46:37] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[00:47:46] <Franciman> nope
[00:47:48] <Franciman> I get this error
[00:47:53] <Franciman> value.h:17:18: error: array type has incomplete element type ‘struct value’
[00:48:05] <Franciman> so I can't have flexible array members of incomplete type
[00:48:30] *** Joins: magla (~gelignite@55d47454.access.ecotel.net)
[00:49:18] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:49:38] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 260 seconds)
[00:53:49] *** Joins: Torr (~Torr@user/torr)
[00:54:42] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:57:08] <sham1> Well it doesn't know what size to give you
[00:58:18] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d54b:d9a4:abaf:8734)
[00:59:43] <Rounin> Franciman: I'm not sure about flexible arrays, but in order for an array to be an array in the usual C sense, the size of the type must be known
[01:00:12] <Rounin> Though I suppose some sort of union type would do
[01:00:58] <Rounin> I'm just thinking out loud, though... I don't know about your specific case
[01:01:11] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-d54b-d9a4-abaf-8734.inf6.spectrum.com) (Ping timeout: 245 seconds)
[01:03:11] <Franciman> i see thanks
[01:03:19] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d54b:d9a4:abaf:8734)
[01:03:53] <SrPx> Is it possible to make this mutually recursive type in C? `typedef void (*fn)(Table table, u64 x) Rule; typedef Rule* Table;`
[01:04:36] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:05:02] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[01:05:05] <floatcomplex> get rid of the typedefs, and yes
[01:05:58] <SrPx> oh got it: `typedef Lnk (*Rule)(Mem mem, Lnk term); typedef Rule* Table;`
[01:06:20] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d54b:d9a4:abaf:8734) (Ping timeout: 252 seconds)
[01:06:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:06:43] <SrPx> wait no
[01:07:01] <SrPx> `typedef Lnk (*Rule)(Mem mem, Rule* table, Lnk term);` this is what I need I think
[01:08:38] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:12:17] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[01:12:57] <SrPx> never mind I don't need that
[01:15:38] <floatcomplex> you don't need the typedefs. get rid of them and it will be easier to see what else you do and do not need
[01:17:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:22:11] <SrPx> why I don't need typedefs?
[01:23:30] <floatcomplex> you never need typedefs
[01:23:59] <floatcomplex> and you should not use them just because you feel like it, it makes the code harder to debug
[01:25:05] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[01:26:18] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[01:27:21] *** Quits: g2anj_ (~v@58.228.230.4) (Ping timeout: 256 seconds)
[01:27:29] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:27:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:28:30] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[01:28:32] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[01:30:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:30:15] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Ping timeout: 268 seconds)
[01:31:16] *** Joins: sebag (~guest@91.245.82.2)
[01:31:17] <mcf> even without typedefs, i don't think you can write the full type out, since it's recursive
[01:33:09] <mcf> you could write `typedef void (*fn)(void (*table)(), u64 x) Rule; typedef Rule *Table`, since void (*)() is compatible with void (*)(Table, u64) as long as Table and u64 are unchanged by default argument promotions
[01:33:39] <fizzie> You could also just mix in a struct, which can easily refer to itself as an incomplete type.
[01:34:38] <mcf> sorry, i meant `typedef void (*fn)(void (**table)(), u64 x) Rule; ...`
[01:34:43] *** Quits: magla (~gelignite@55d47454.access.ecotel.net) (Quit: Stay safe!)
[01:35:07] <fizzie> `struct rule { void (*apply)(struct rule *table, other *stuff, ...); };` and so on.
[01:36:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:36:08] <mcf> yeah, that's probably the better approach
[01:37:50] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 1.6)
[01:38:06] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[01:38:07] *** Joins: sebag (~guest@91.245.82.2)
[01:39:56] <fizzie> On the other topic of whether you ever really need a typedef or not, arguably you do if you want to receive a pointer to a function (or a pointer to an array, or some other similar type with a more complex type name) as a variadic argument, because the type provided to `va_arg` must be such that you can just append a `*` to make a pointer.
[01:39:58] <fizzie> (Of course you can take that one level up and argue whether you really need to do that. But it's a... legitimate thing to do in the language. Sort of.)
[01:41:53] *** Joins: johnjay_ (~pi@154.6.152.74)
[01:42:02] <johnjay_> is there a way to parallelize big builds with standard compilers?
[01:42:08] <johnjay_> i know distcc is a thing but i've never worked with it.
[01:42:26] <johnjay_> or is it not worth it if the machines don't have same compiler + arch?
[01:43:24] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:46:04] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:46:26] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:47:53] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 1.6)
[01:47:54] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[01:48:08] *** Joins: sebag (~guest@91.245.82.2)
[01:48:26] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[01:48:36] *** Quits: Kev_ (~Kev@2a01cb0400149f00b8e40d0a31653e47.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:49:28] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[01:50:18] *** Joins: freakazoid343 (~matt@35.136.210.185)
[01:52:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[01:53:05] *** Joins: CaCode (~CaCode@user/cacode)
[01:53:06] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d54b:d9a4:abaf:8734) (Ping timeout: 260 seconds)
[01:54:12] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[01:54:26] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:54:46] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[01:55:38] <BtbN> jonbryan_, make -jN
[02:00:10] <johnjay_> yeah but is it not worth it to go over the network or something
[02:00:18] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[02:00:19] <johnjay_> there's probably a library that does this
[02:00:29] <johnjay_> use compute resources on another machine then send result back
[02:05:11] <fizzie> It's definitely worth it if you have a large group of people who are all building the same thing, or at least closely related things, and who also implicitly trust each other (as in, in a company).
[02:07:09] <fizzie> I used distcc once when I had to install a Ruby thing that had some embedded C (or maybe C++?) in it onto a tiny virtual server that was just running out of memory when compiling the thing. It does try (and to some degree, succeeds) to be a pretty drop-in thing.
[02:09:51] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-d54b-d9a4-abaf-8734.inf6.spectrum.com)
[02:10:56] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[02:12:32] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 240 seconds)
[02:20:37] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:21:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:23:33] *** Joins: tangyQED (~tangy@user/tangy)
[02:24:02] *** Quits: zenstoic (uid461840@id-461840.hampstead.irccloud.com) ()
[02:24:31] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[02:24:34] *** Quits: heftig (heftig@archlinux/developer/heftig) (Quit: heftig)
[02:24:46] *** Joins: heftig (heftig@archlinux/developer/heftig)
[02:26:02] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-60a6-7749-daab-1d70.res6.spectrum.com)
[02:26:24] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:26:38] *** Joins: graywolf (~wolf@user/graywolf)
[02:27:21] *** Joins: coruja (~coruja@user/coruja)
[02:27:21] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:28:04] *** Parts: tangyQED (~tangy@user/tangy) ()
[02:33:01] *** Quits: pizdets_ (~pizdets@183.182.111.251) (Ping timeout: 250 seconds)
[02:33:43] *** Joins: pizdets (~pizdets@183.182.110.61)
[02:34:19] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:35:34] *** Joins: rgrinberg (~textual@187.223.209.106)
[02:41:11] *** Joins: ferdna (~ferdna@user/ferdna)
[02:41:12] *** Joins: wroathe (~wroathe@user/wroathe)
[02:46:11] *** Joins: zalt (~zalt@user/zalt)
[02:46:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[02:46:56] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:48:14] <mcf> fizzie: what's your interpretation of what the standard says about the value of '\xFF' when CHAR_BIT is 8 and char is signed two's complement? 6.4.4.4 example 2 says that it is -1, but it's not clear to me whether that is forced, or if the value is implementation-defined (could be 123, 42, -17, ...)
[02:48:41] <mcf> i've read 6.4.4.4 several times, but am still having trouble figuring out what exactly it's saying about this case
[02:48:44] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[02:48:57] *** Quits: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Ping timeout: 256 seconds)
[02:49:06] *** Joins: tejr (~tejr@user/tejr)
[02:50:19] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 1.6)
[02:52:38] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[02:55:24] <fizzie> I don't think I have a coherent opinion. But while examples are non-normative, they still denote intent, so at least the standard's drafters would seem to think the normative part implies the value is -1.
[02:55:34] *** Joins: treble (~treble@user/treble)
[02:55:35] <fizzie> 6.4.4.4p6 says "the numerical value of the hexadecimal integer so formed specifies the value of the desired character", and in this case the numerical value is 255; p9 says the value of the hexadecimal escape sequence shall be representable in `unsigned char`, which it is; but I did not see anything explicit about how that `unsigned char` value is converted to a (signed plain) `char`.
[02:55:45] <fizzie> As in, whether it's just a regular conversion (which by 6.3.1.3p3 would give an implementation-defined result), or if it must be done by reinterpreting the representation (which I guess you could argue would give -1 under those assumptions).
[02:55:46] *** Joins: sebag (~guest@91.245.82.2)
[02:56:34] <mcf> yeah, that's pretty much where i'm at
[02:58:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:58:12] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:58:52] *** Joins: Oddity (~Oddity@user/oddity)
[02:59:05] *** Quits: Akuli (~Akuli@87-94-111-147.bb.dnainternet.fi) (Quit: Akuli)
[03:00:03] <mcf> i'm wondering which sentence of 6.4.4.4p10 applies. p6 says hex escapes are "taken to be part of the construction of a single character for an integer character constant", but does that mean that '\xFF' is a "integer character constant containing a single character" for the purpose of p10?
[03:00:30] <mcf> i am thinking no since subsequent sentences mention "or escape sequence" explicitly
[03:01:44] <fizzie> I read p10's "-- contains a single character or escape sequence --" to be "-- contains a single character or [a single] escape sequence --".
[03:01:56] *** Quits: john99 (~vmjua@138.62.221.87.dynamic.jazztel.es) (Read error: Connection reset by peer)
[03:02:39] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[03:02:51] <fizzie> But it doesn't really help, since it then just goes on to talk about "-- an object with type `char` whose value is that of the single -- escape sequence --", which sort of assumes we've already gotten a `char` out of it somehow.
[03:04:49] <mcf> what i mean is, does the second sentence not apply, since it doesn't mention escape sequences expliictly? "The value of an integer character constant containing a single character that maps to a single-byte execution character is the numerical value of the representation of the mapped character interpreted as an integer"
[03:05:54] <veltas> Looks wrong
[03:06:17] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:06:37] <mcf> i ask because that's the only part mentioning interpretation of a representation, which could support the requirement that it be -1 under our assumptions (matching example 2)
[03:07:32] <veltas> Value of 255 (i.e. '\xFF') is allowed by constraints, not a representable value for char if char is 8-bit 'signed'
[03:07:53] *** Joins: MrFantastik (~f@2607:f598:bbda:290:d624:1e19:49fb:4ffd)
[03:07:59] <fizzie> I think it's supposed to apply. The last sentence (the one that mentions "a single character or escape sequence") is just giving more detail about the single-character case. Because definitely the "single character" half of it must count as a single character.
[03:10:30] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:13:08] *** Joins: soapsudsxx (~soapsudsx@209.221.40.139)
[03:14:55] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:15:17] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 240 seconds)
[03:18:02] *** Joins: bebyx (~Thunderbi@user/bebyx)
[03:18:45] *** Joins: zat (~zat@191.23.60.220)
[03:21:17] *** Joins: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[03:21:25] <mcf> another related thing i don't understand: what is the value of u8"Ā"[0]? the UTF-8 encoding is 0xC4 0x80, but it's not clear how those are mapped to char. the standard says "For UTF-8 string literals, the array elements have type char, and are initialized with the characters of the multibyte character sequence, as encoded in UTF-8", which leaves out a lot of details
[03:24:39] <veltas> I think the standard could do with some more explanation here, truly it doesn't make sense for signed 8-bit char
[03:24:44] *** Joins: Viewday117 (~Viewday@user/viewday)
[03:24:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:24:53] <veltas> In both situations
[03:25:40] <mcf> the only thing that would make sense is if the bits of the elements of the chars are initialized to the representation of (unsigned char[]}{0xC4, 0x80}
[03:25:45] <mcf> yeah, i agree
[03:25:52] <veltas> I think the intention is that the value is converted in an implementation-defined manner, as with unsigned char to signed char.
[03:26:19] <veltas> Because they mention the two's complement in the example
[03:26:21] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:26:22] *** Viewday117 is now known as Viewday11
[03:26:49] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[03:27:05] <fizzie> Well, but that doesn't really make sense. If it was fully implementation-defined (like the conversion usually is), example 2's comments about representation would be completely irrelevant.
[03:27:05] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[03:27:38] <veltas> Either way it needs elaborating
[03:27:46] *** Quits: MrFantastik (~f@2607:f598:bbda:290:d624:1e19:49fb:4ffd) (Remote host closed the connection)
[03:28:07] *** Joins: MrFantastik (~f@176.108.141.162)
[03:28:59] <fizzie> FWIW, interpreting '\xHH' as "use the hexadecimal integer 0xHH as a value for an `unsigned char`, and use the resulting object's representation as that of the `char` object that gets converted to `int` for the value of the character constant" is the _reasonable_ interpretation, given what \xHH escape sequences are generally used for.
[03:29:12] *** Quits: Phil-Work (~phil@62.3.100.20) (Remote host closed the connection)
[03:29:39] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Quit: Client closed)
[03:29:53] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[03:29:57] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[03:30:29] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 268 seconds)
[03:34:37] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:35:29] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:36:44] *** Joins: dutch (~DutchIngr@user/dutch)
[03:37:17] <veltas> It's a reasonable interpretation, I just think it needs to be made clear. Lots of stuff in C is 'generally used for' something but it's not something you can assume in the standard.
[03:37:51] <fizzie> Incidentally, current C23 drafts incorporate N2418, which adds an u8 prefix also for character constants. It's a bit of a weird one -- an UTF-8 character constant has type `unsigned char` (rather than `int`), and the value is "equal to its ISO/IEC 10646 code point value, provided that the code point value can be encoded as a single UTF-8 code unit". So you can only use it for values 0..127.
[03:38:10] <veltas> It's not really a high priority
[03:39:12] <veltas> Why would it be `unsigned char` instead of `int`, seems inconsistent
[03:39:40] <veltas> I know `int` is a weird historical choice but consistency is more impor.... oh why bother, committee will do what they do
[03:39:50] <fizzie> From the rationale of the proposal, because of C++.
[03:40:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[03:41:07] <veltas> Is the C committee full of C++ programmers?
[03:41:16] <Franciman> loool
[03:41:22] <fizzie> (It introduced the u8 prefix for character constants first, and used `char8_t`, a type that has the same properties as `unsigned char`.)
[03:41:51] <fizzie> C++ keeps coming up in the materials, at least.
[03:43:16] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[03:43:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:43:55] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 256 seconds)
[03:45:43] *** Joins: Wulf (~Wulf@user/wulf)
[03:45:43] *** Quits: alch (~alch@151.82.95.142) (Read error: Connection reset by peer)
[03:46:11] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[03:48:56] <veltas> I'm just trying to wrap my head around what the point of a utf-8 char constant even is
[03:49:43] <veltas> I guess it means you can use ASCII regardless of execution character set?
[03:50:13] <pragma-> The committee spokesperson wrote a C article a few months ago except it was full of C++-like code.
[03:50:20] *** Joins: alch (~alch@mi-18-19-52.service.infuturo.it)
[03:50:56] <pragma-> I can't recall if they casted malloc
[03:51:04] <fizzie> Yes, that's the quoted rationale: being able to write UTF-8 strings that contain ASCII even when you're working in a different "narrow" non-ASCII character set.
[03:51:18] <fizzie> The new C standard editor is very much a C++ person by background.
[03:51:52] <veltas> And a LaTeX person by background
[03:52:03] <veltas> Rather than troff
[03:54:36] <veltas> So we have a feature that lets you use ASCII written "u8" called "UTF-8 character constant"
[03:54:47] <veltas> That's not confusing at all lol
[03:55:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:55:46] <veltas> "Why are you using UTF-8 constants?" "Because I want to specify ASCII!"
[03:55:57] <veltas> Can't wait for that code review
[03:57:45] <fizzie> The LaTeX-based template is growing on me, TBH. But they switched to that (at least for the available drafts) already for C18.
[03:58:32] <veltas> My issue is just that on my 1024x768 screen the old troff output was readable, they've changed font size or page size since and now it's not
[03:59:02] <pragma-> is the latex source for the pdf still a closely guarded secret?
[03:59:08] <fizzie> I'd probably have switched to the C18 draft as my default file to open if it had had the PDF table of contents all levels down, but it stopped at three.
[03:59:21] <veltas> pragma-: crustly guarded secret
[04:00:16] *** Joins: cf2m (~cf2m@2804:14c:5bd7:8a9c::1001)
[04:00:17] <fizzie> Could you imagine the havoc that would ensue if people got access to that? It'd be terrible. People might make all kinds of alternative formats for browsing it.
[04:01:27] <veltas> Yeah I might be able to render it with a font/page size to fit my screen
[04:01:45] *** Joins: zezetenrinh0 (~zezetenri@2001:818:dea5:2b00:512:522a:f445:9fa2)
[04:01:46] <veltas> And a nice Times font I don't hate looking at
[04:02:04] *** Parts: zezetenrinh0 (~zezetenri@2001:818:dea5:2b00:512:522a:f445:9fa2) ()
[04:03:46] *** Parts: cf2m (~cf2m@2804:14c:5bd7:8a9c::1001) ()
[04:04:44] *** Joins: lisbeths` (~user@c-73-83-140-133.hsd1.wa.comcast.net)
[04:06:35] *** Quits: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[04:10:07] *** Joins: shivesh (~shivesh@user/shivesh)
[04:16:33] *** Joins: arinov (~arinov@213.194.126.155)
[04:19:57] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[04:21:21] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[04:22:41] *** Quits: cust (amaama@blackbox.amaama.org) (Remote host closed the connection)
[04:25:09] <veltas> pragma-: This one? https://thephd.dev/c-the-improvements-june-september-virtual-c-meeting
[04:29:10] *** Joins: Charadon (~Charadon@155.138.164.183)
[04:30:06] <veltas> This article makes me want to down a lot of adderall
[04:31:37] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[04:32:06] *** Joins: Torr (~Torr@user/torr)
[04:34:52] *** Joins: stephan_ (~stephan@2605:8d80:4a1:1d1e:9e82:b620:5d47:6a66)
[04:35:56] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Remote host closed the connection)
[04:36:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:37:34] *** Joins: constxd (~brad@142.134.38.68)
[04:38:43] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[04:39:02] *** Joins: Charadon (~Charadon@155.138.164.183)
[04:39:24] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[04:45:18] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d54b:d9a4:abaf:8734)
[04:47:47] *** Joins: cust (amaama@blackbox.amaama.org)
[04:48:02] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-d54b-d9a4-abaf-8734.inf6.spectrum.com) (Ping timeout: 240 seconds)
[04:49:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:49:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:49:28] *** Joins: wroathe (~wroathe@user/wroathe)
[04:50:41] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[04:51:41] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[04:52:39] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[04:53:23] *** Joins: zat (~zat@191.23.60.220)
[04:54:06] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:55:47] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[05:02:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:02:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:02:04] *** Joins: wroathe (~wroathe@user/wroathe)
[05:02:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:04:49] <wroathe> You scallywags 
[05:06:01] *** Joins: pnbeast (~pnbeast@2601:140:4200:e3d0::1)
[05:07:18] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[05:07:30] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:10:53] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[05:11:19] *** Joins: loganlee (~Thunderbi@user/loganlee)
[05:15:38] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 260 seconds)
[05:23:16] *** Quits: zat (~zat@191.23.60.220) (Remote host closed the connection)
[05:23:41] *** Joins: zat (~zat@191.23.60.220)
[05:24:22] *** Joins: Viewday118 (~Viewday@user/viewday)
[05:25:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:25:55] *** Viewday118 is now known as Viewday11
[05:27:41] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[05:28:00] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[05:31:54] *** Quits: Epakai (Epakai@drislock.org) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[05:32:25] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[05:32:40] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:32:50] *** Joins: pulse (~pulse@user/pulse)
[05:34:59] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[05:36:05] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[05:36:20] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[05:37:01] *** Quits: stephan_ (~stephan@2605:8d80:4a1:1d1e:9e82:b620:5d47:6a66) (Remote host closed the connection)
[05:38:05] *** Joins: fe23 (~fe23@2409:8a34:468:83d0:ac7f:71c0:1dad:ea22)
[05:39:30] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[05:41:21] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:41:58] *** Joins: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6)
[05:44:01] *** Joins: Epakai (Epakai@drislock.org)
[05:47:56] *** Quits: iomari891 (~iomari891@197.210.53.158) (Ping timeout: 252 seconds)
[05:48:51] *** Joins: cmj (~cmj@68.207.254.124)
[05:50:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:51:06] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:51:13] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[05:52:06] *** Joins: MsSmith (~MsSmith@S01069050ca4e3573.cg.shawcable.net)
[05:52:12] *** Parts: MsSmith (~MsSmith@S01069050ca4e3573.cg.shawcable.net) ()
[05:57:57] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[06:01:37] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:02:33] *** Joins: PortableDave (~portabled@220.253.22.64)
[06:02:46] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 260 seconds)
[06:05:36] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:06:47] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[06:07:17] *** Quits: evocatus (~evocatus@62.182.78.42) (Ping timeout: 256 seconds)
[06:07:26] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 245 seconds)
[06:07:37] *** Quits: PortableDave (~portabled@220.253.22.64) (Ping timeout: 240 seconds)
[06:08:13] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[06:10:46] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[06:11:23] *** Joins: iomari891 (~iomari891@197.210.76.160)
[06:12:10] *** Joins: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net)
[06:14:47] *** Quits: zat (~zat@191.23.60.220) (Remote host closed the connection)
[06:15:10] *** Joins: zat (~zat@191.23.60.220)
[06:17:42] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[06:20:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:23:08] *** Quits: graywolf (~wolf@user/graywolf) (Ping timeout: 252 seconds)
[06:23:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[06:24:18] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[06:27:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:27:23] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[06:29:04] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d54b:d9a4:abaf:8734) (Read error: Connection reset by peer)
[06:29:49] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-d54b-d9a4-abaf-8734.inf6.spectrum.com)
[06:31:05] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[06:32:57] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:43:53] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[06:45:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:52:17] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[06:54:36] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:59:12] *** Joins: treble (~treble@user/treble)
[06:59:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:00:29] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[07:01:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:04:02] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:06:12] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[07:06:17] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[07:06:47] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[07:06:51] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:11:32] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 240 seconds)
[07:11:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:16:49] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[07:18:28] *** Joins: Thedarkb1 (~Thedarkb@86-42-4-182-dynamic.agg3.kny.prp-wtd.eircom.net)
[07:18:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[07:19:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:19:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:19:57] *** Joins: wroathe (~wroathe@user/wroathe)
[07:20:29] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad) (Remote host closed the connection)
[07:24:39] *** Quits: Jong (~Jong@2620:10d:c090:400::5:3f74) (Read error: Connection reset by peer)
[07:26:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[07:27:38] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Read error: No route to host)
[07:27:56] *** Joins: Kit (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[07:34:36] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[07:35:31] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:32] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:37:51] *** Joins: seninha (~seninha@user/seninha)
[07:39:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[07:40:36] *** Joins: john99 (~john99@213.246.103.34.bc.googleusercontent.com)
[07:41:54] *** Parts: freakazoid343 (~matt@2603-9000-cf0f-80e3-d54b-d9a4-abaf-8734.inf6.spectrum.com) (Leaving)
[07:42:12] *** Quits: moog (~moog@107.77.244.45) (Remote host closed the connection)
[07:43:56] *** Quits: mahmutov (~mahmutov@5.176.0.124) (Ping timeout: 268 seconds)
[07:46:27] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[07:47:42] *** Joins: ckdCreations (~ckdCreati@2607:fb90:b2e7:dd5b:9592:7533:58de:cc70)
[07:48:09] *** Quits: alch (~alch@mi-18-19-52.service.infuturo.it) (Ping timeout: 256 seconds)
[07:48:25] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[07:49:15] *** Quits: john99 (~john99@213.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[07:49:48] *** Joins: alch (~alch@151.82.37.171)
[07:51:22] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:53:36] *** Joins: concrete-houses (~g@209.6.150.53)
[07:54:01] <concrete-houses> I saw some c web frameworks....... can you do a website with c framework and files?
[07:54:10] <concrete-houses> can it perform really well?
[07:54:27] <concrete-houses> postgresql amazon seem so bukly slow and inefficient
[07:54:29] <floatcomplex> yeah, it's just tedious
[07:54:48] <floatcomplex> but it can be done for simple stuff that needs to be fast, without too much effort
[07:55:09] <concrete-houses> why is web software so hard ? collaboration seems hellish no one wants to break work up and useless project people n devops idiots all around
[07:55:25] <concrete-houses> I am beginning to hate postgresql and aws
[07:55:32] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:55:34] <concrete-houses> so cumberome
[07:55:49] <concrete-houses> and no one knows what the hell is goin on
[07:55:54] <System_Error> actually I've seen some funny things. E.g. lwan.ws got funny api. But it just server + some templating, etc.
[07:55:57] *** Quits: ckdCreations (~ckdCreati@2607:fb90:b2e7:dd5b:9592:7533:58de:cc70) (Ping timeout: 240 seconds)
[07:56:04] <floatcomplex> pretty sure the maintainer of postgresql is around this channel :/
[07:56:44] <System_Error> Apparent cons? No http/2 or https, later can be addressed by external prog.
[07:57:35] <System_Error> floatcomplex: postgre still big heavyweight cruiser, regardless of maintainers :)
[07:58:09] <floatcomplex> tcp is really just not a great fit for...well much
[07:58:24] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:58:57] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[07:58:59] <floatcomplex> the difficulty of writing an http server in c is mostly just the difficulty of writing any multi-client tcp server and having it be at all robust
[07:59:02] <System_Error> floatcomplex: theoretically yes. Practically UDP would req one to do plenty of TCP's things yourself.
[07:59:11] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Remote host closed the connection)
[08:00:25] <System_Error> floatcomplex: but using something ready like lwan is actually dead simple and most similar to go I guess :P
[08:01:04] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[08:01:32] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Remote host closed the connection)
[08:02:15] <concrete-houses> why all this talk of API
[08:02:22] <concrete-houses> what does it even mean
[08:02:30] <System_Error> writing http server self at socket level is really bad idea unless you understand at least what it REALLY takes.
[08:02:32] <concrete-houses> is that like trendy bs from universities
[08:02:38] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[08:02:53] *** Quits: iomari891 (~iomari891@197.210.76.160) (Ping timeout: 256 seconds)
[08:02:59] <concrete-houses> gwan.com looks fast
[08:03:06] <floatcomplex> at this point i'm pretty sure the only people who CAN be moderately successful at working on web stuff at scale are the young and inexperienced. 
[08:03:14] <oldlaptop> That sounds like a question that could be answered by a search engine
[08:03:18] <System_Error> E.g. self-coded HTTP with just-written-parser would happily serve http://your/server/../../../../etc/passwd :)
[08:04:04] <concrete-houses> https://lwan.ws/ wow
[08:04:07] *** Joins: iomari891 (~iomari891@197.210.53.158)
[08:04:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[08:04:23] <concrete-houses> I am totally inexperienced in programming
[08:04:44] <System_Error> concrete-houses: um, it a bit strange but I'm still amazed what what ppl sometimes manage to do with C.
[08:05:52] <System_Error> but still, use of C for web not necessarily best option ever.
[08:06:22] <concrete-houses> at work its asp.net with aurora aws postgresql and its all up to the entirty framework object relational mapper to abuse psotgresql which I dont even know much sql and cte and window funtions n materialized view but I have book art fo postgresql that tells you to program in the db more and less code of web language and get huge performacne gain but i wont get to use that becasue they built who saas 
[08:06:23] <oldlaptop> see also https://learnbchs.org/
[08:06:26] <candide> Title of oldlaptop's link: BCHS: BSD, C, httpd, SQLite
[08:06:28] <concrete-houses> without 1 dba
[08:06:29] <dave0> i heard good things about rust
[08:06:55] <concrete-houses> some say naviserver +postgresql
[08:07:15] <concrete-houses> some say gnoga.com or new lisp version gnu clog
[08:07:25] <concrete-houses> then there is picolisp.com with web gui and db built in
[08:07:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:07:47] <concrete-houses> I just dont know jack about programming just shell and bit of awk forth lisp swi prolog
[08:08:04] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Remote host closed the connection)
[08:08:18] <oldlaptop> That is a very weird list.
[08:08:19] <rindolf> System_Error: someone once gave me a php proxy that used https://www.php.net/manual/en/function.fopen.php on a GET parameter. it happily served /etc/passwd
[08:08:21] <candide> Title of rindolf's link: PHP: fopen - Manual
[08:08:24] <floatcomplex> System_Error: yeah i've done it. the reason to do it (if there is one) is when you've got some very specific limited thing to do and it would be just as much work to do it via apache or whatever (and make sure all the general purpose features you didn't want are turned off) as it would be to just do it yourself in a few pages of c. in my case i was completely ignoring the path passed to GET and serving a 
[08:08:31] <floatcomplex> static payload followed by an sse stream. if you are serving arbitrary files chosen by path provided by the user, use an actual web server written by people who know what they're doing
[08:08:34] <floatcomplex> (hopefully)
[08:10:31] <concrete-houses> woa that looks awesome pharo smalltalk happstack.com(haskell) also appeal to me
[08:10:45] <concrete-houses> I like listening to alan kay 
[08:11:08] <concrete-houses> chuck moore coloforth greenarrays.com guy is awesome too
[08:11:33] <concrete-houses> http://gwan.com/ this looks impressive esp the self tuning
[08:11:35] <candide> Title of concrete-houses's link: G-WAN > Web Application Server
[08:11:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:11:40] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[08:11:47] <System_Error> rindolf: worst part is that there're over 9000 ways to fail that. So anyone thinking exposing some piece of FS to remote have to think 10 times if they CAN handle all FS pecularities without really shooting their legs.
[08:12:07] <System_Error> and it even independent of programming language, its more like filesystem semantics that hurts most
[08:12:24] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Remote host closed the connection)
[08:13:05] <oldlaptop> System_Error: it's hard enough doing disk I/O reliably in the first place (for a strict definition of "reliably")
[08:13:12] <floatcomplex> or just don't expose the filesystem at all
[08:13:14] <System_Error> Things that exist for at least few years had enough of stuff from net to fix at least typical FAILs :)
[08:13:32] <floatcomplex> have the mapping of arguments to GET be completely decoupled from any filesystem on the server
[08:13:54] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[08:14:30] <concrete-houses> will there ever be web NFS? or 9p? 
[08:14:44] <concrete-houses> 'mount' the browser and then just pass files back n forth?
[08:15:04] <concrete-houses> to do websites
[08:15:51] <floatcomplex> that sounds like the kind of thing people would have thought was a good idea when plan 9 was new
[08:16:02] <floatcomplex> now i just want more sandboxing
[08:16:18] <floatcomplex> and for fewer things to be turing complete at all
[08:16:57] <System_Error> oldlaptop: ye, and eventually even this can ... do some quite funny things. 
[08:16:57] *** Quits: iomari891 (~iomari891@197.210.53.158) (Ping timeout: 240 seconds)
[08:17:16] *** Joins: off^ (~off@64.253.22.77)
[08:17:18] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:17:52] <System_Error> Some super-duper-web-interfaces eventually fail to notice network is down, etc and going nuts instead. E.g. pretending it works, when it isnt case.
[08:19:16] <System_Error>  completely decoupled from any filesystem on the server <- you miss cool optimizations, e.g. sendfile() like that tho.
[08:20:13] *** Joins: constxd (~brad@142.134.38.68)
[08:20:44] *** Joins: CaCode (~CaCode@user/cacode)
[08:22:25] <floatcomplex> that's only an optimization if the thing you're serving isn't already in memory :)
[08:23:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[08:24:25] *** Quits: newchair (~newchair@d-204-195-168-15.paw.cpe.atlanticbb.net) (Ping timeout: 256 seconds)
[08:26:52] <System_Error> ofc it depends what one serves and amount of that, but still
[08:27:38] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[08:28:31] <floatcomplex> ...again, i think the only way to succeed anymore in that field is to not even know you're supposed to worry about that kind of stuff. those of us who want our code to actually work when we're not looking, and/or know why it didn't, should just stay away
[08:28:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[08:29:33] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:30:18] <System_Error> floatcomplex: "in that field" and "the only way" sounds too ... self confident. There're many fields and many ways in the end.
[08:30:53] <System_Error> E.g. web interface of soho router surely cares how much RAM it eats, etc
[08:31:39] <floatcomplex> yeah. it fucking should. so say people who even know what ram is
[08:32:11] <System_Error> Quite many ppl don't know what C, HTTP or even "server" is :P
[08:32:39] <floatcomplex> and those people write web interfaces for routers, because they don't know any better
[08:33:30] <System_Error> its quite rare since extra RAM to solder into million of units is sorta expensive, so they usually care of this aspect - but often fail many others 
[08:33:55] *** Quits: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Read error: Connection reset by peer)
[08:33:59] *** Joins: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[08:34:23] *** Joins: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au)
[08:36:55] *** Joins: darkstarx (~darkstard@50.39.115.145)
[08:37:57] *** Quits: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Ping timeout: 240 seconds)
[08:39:16] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:41:29] *** Joins: iomari891 (~iomari891@197.210.76.160)
[08:41:54] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 268 seconds)
[08:44:35] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:45:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[08:47:05] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:51:53] *** Joins: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[08:53:17] *** Quits: kurahaupo (~kurahaupo@203-194-51-46.static.tpgi.com.au) (Ping timeout: 240 seconds)
[08:59:45] *** Joins: constxd (~brad@142.134.38.68)
[09:02:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:05:13] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[09:07:29] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[09:09:02] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Ping timeout: 268 seconds)
[09:09:44] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[09:12:10] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[09:15:00] *** Quits: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Ping timeout: 240 seconds)
[09:15:52] *** Joins: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[09:17:58] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Read error: Connection reset by peer)
[09:18:49] *** Quits: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Read error: Connection reset by peer)
[09:21:09] *** Joins: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[09:25:01] *** Joins: Viewday113 (~Viewday@user/viewday)
[09:26:33] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:26:33] *** Viewday113 is now known as Viewday11
[09:29:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[09:34:47] *** Joins: Samian (~s@user/samian)
[09:37:51] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[09:38:39] *** Quits: rahl (~rahl@102.114.240.106) (Ping timeout: 256 seconds)
[09:39:19] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:40:13] *** Joins: rahl (~rahl@102.114.169.69)
[09:44:26] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[09:45:50] *** Joins: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net)
[09:48:29] *** Joins: nicko (~iClass@222.211.28.110)
[09:49:16] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:49:18] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[09:50:21] *** Quits: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Ping timeout: 268 seconds)
[09:54:44] *** Quits: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:57:21] *** Quits: Samian (~s@user/samian) (Ping timeout: 256 seconds)
[09:58:00] *** Parts: et09 (~et09@user/et09) ()
[10:02:57] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[10:06:59] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[10:07:42] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:07:57] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:09:49] *** Quits: iomari891 (~iomari891@197.210.76.160) (Ping timeout: 256 seconds)
[10:16:15] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 268 seconds)
[10:28:25] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[10:35:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:38:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[10:39:26] *** Joins: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6)
[10:42:35] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:43:21] *** Quits: dohtem (uid524096@user/dohtem) ()
[10:44:44] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[10:45:23] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:46:13] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:46:37] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:46:55] *** Joins: dohtem (uid524096@user/dohtem)
[10:55:43] *** Quits: johnjay_ (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[10:59:45] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Quit: WeeChat 2.9)
[11:00:33] *** Quits: nicko (~iClass@222.211.28.110) (Quit: Konversation terminated!)
[11:01:16] *** Quits: gdd1 (~gdd@129.199.146.230) (Ping timeout: 268 seconds)
[11:01:54] *** Joins: meator (~meator@user/meator)
[11:02:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:03:44] *** Quits: puke (~puke@user/puke) (Quit: puke)
[11:04:47] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:11:57] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:15:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-60a6-7749-daab-1d70.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[11:17:22] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[11:18:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[11:20:15] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Excess Flood)
[11:20:29] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:20:39] *** Joins: Feuermagier_ (~Feuermagi@138.199.36.133)
[11:23:01] *** Joins: soul-d (~uknown@user/soul-d)
[11:23:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[11:25:10] *** Joins: Viewday110 (~Viewday@user/viewday)
[11:25:17] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:26:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:26:11] *** Viewday110 is now known as Viewday11
[11:29:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:33:45] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:35:07] *** Joins: duuude (~user@user/duuude)
[11:37:33] *** Quits: dohtem (uid524096@user/dohtem) ()
[11:39:23] *** Joins: mahmutov (~mahmutov@5.176.0.124)
[11:44:31] *** Joins: manjaroi3 (~manjaro-i@112.169.116.78)
[11:44:54] <meator> Hello. I have a list of strings. I don't know how many strings will be there. The list must be sorted. I'm getting the strings I want to insert gradually. What's the best way to implement this list?
[11:47:19] <dave0> meator: build the array of pointers to the strings, expanding it with realloc as needed, then qsort() to sort the array
[11:48:25] *** Quits: alch (~alch@151.82.37.171) (Ping timeout: 256 seconds)
[11:50:02] <rindolf> meator: there are https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree too
[11:50:14] *** Joins: alch (~alch@to-18-87-201.service.infuturo.it)
[11:50:52] *** Joins: mrig (~AdiIRC@user/mrig)
[11:51:13] *** Joins: inlight (~inlight@157.42.205.169)
[11:51:13] *** Quits: inlight (~inlight@157.42.205.169) (Changing host)
[11:51:13] *** Joins: inlight (~inlight@user/inlight)
[11:53:12] *** Quits: duuude (~user@user/duuude) (Remote host closed the connection)
[11:53:38] *** Joins: duuude (~user@user/duuude)
[11:53:57] <dave0> meator: i have code that does exactly what you want, it builds a linked list and sorts with mergesort
[11:55:05] <dave0> https://termbin.com/zzqq
[11:55:14] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[11:56:07] <rindolf> dave0: no licence. :(
[11:57:23] <dave0> oh public domain
[11:57:53] <dave0> it's example code i keep.. it just happened to do exactly what meator wanted
[11:58:08] <meator> dave0: As I said, I'm getting the strings gradually. I'd have to make the list of strings and then sort it. These steps can be combined (I think) into one.
[11:59:05] <rindolf> meator: a tree can keep the entries sorted
[11:59:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:00:26] <rindolf> meator: a tree can keep the entries sorted as more are added [or removed]
[12:01:57] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[12:02:53] *** Joins: duuude (~user@user/duuude)
[12:03:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e) (Ping timeout: 252 seconds)
[12:03:21] <dave0> i have code for that too :-p but you would have to write more code.. my example i posted happened to already read the strings so i thought it's less work to adapt
[12:03:41] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.73)
[12:04:03] <dave0> https://termbin.com/xi7s
[12:04:47] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:995c:e86e:470c:8a37)
[12:04:58] <dave0> it's fairly simple but you will have to write code to add your strings
[12:05:18] <rindolf> more codes: https://www.shlomifish.org/open-source/portability-libs/#data_structures
[12:11:18] <meator> I really hate these theoretical CS things. It uses complicated maths and complicated logic. How am I supposed to understand this: https://ksp.mff.cuni.cz/kucharky/vyhledavaci-stromy/vyhledavaci_stromy_09x.png
[12:11:22] <meator> I'll look at the code you sent me. Thanks!
[12:11:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:14:42] *** Quits: pnbeast (~pnbeast@2601:140:4200:e3d0::1) (Quit: WeeChat 2.7.1)
[12:15:17] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 268 seconds)
[12:16:32] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[12:18:59] <dave0> i'm not a license weenie... i don't really want to put some legalese in my example programs
[12:20:17] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:20:47] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[12:21:29] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[12:22:00] <rindolf> dave0: see https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#i-want-to-release-my-code---which-open-source-licence-should-i-use
[12:22:20] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:22:37] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:26:37] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:28:33] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[12:28:54] <dave0> it says CC0
[12:32:10] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[12:32:30] <dave0> meh i don't care if someone copies my code for some school assignment :-p
[12:33:26] *** Joins: pulse (~pulse@user/pulse)
[12:39:38] *** Joins: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it)
[12:43:57] *** Quits: duuude (~user@user/duuude) (Remote host closed the connection)
[12:44:25] *** Joins: duuude (~user@user/duuude)
[12:45:40] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:49:58] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:53:21] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[12:53:48] *** Joins: kuoi (~kuoi@109.175.166.59)
[12:54:37] *** Quits: kuoi (~kuoi@109.175.166.59) (Client Quit)
[13:05:13] *** Quits: pilyn (~pilyn@user/pilyn) (Remote host closed the connection)
[13:05:26] *** Joins: CaCode (~CaCode@user/cacode)
[13:07:52] *** Joins: iomari891 (~iomari891@197.210.52.58)
[13:10:37] *** Quits: andi_ (~andi@user/andi/x-3467420) (Quit: WeeChat 3.2)
[13:13:44] *** Joins: gry_ (~quassel@203-129-25-247.cb8119.syd.static.aussiebb.net)
[13:18:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[13:19:14] *** Joins: Colt (~Colt@user/colt)
[13:19:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:19:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:22:24] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[13:23:50] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:24:11] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:24:15] *** Joins: Viewday112 (~Viewday@user/viewday)
[13:25:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:25:48] *** Viewday112 is now known as Viewday11
[13:28:32] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[13:28:44] *** Quits: mahmutov (~mahmutov@5.176.0.124) (Ping timeout: 256 seconds)
[13:30:07] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[13:30:20] *** Joins: mrig (~AdiIRC@user/mrig)
[13:34:12] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:35:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:11f2:595b:8fe2:b0d4)
[13:35:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:11f2:595b:8fe2:b0d4) (Changing host)
[13:35:54] *** Joins: skapata (~Skapata@user/skapata)
[13:36:48] <Franciman> hi, how does the compiler choose the memory representation of an enum?
[13:37:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[13:37:31] *** Joins: aradesh (~aradesh@user/aradesh)
[13:38:17] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[13:40:22] *** Quits: iomari891 (~iomari891@197.210.52.58) (Ping timeout: 268 seconds)
[13:43:15] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Remote host closed the connection)
[13:44:19] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[13:44:39] *** Joins: rayen (~rayen@197.15.122.150)
[13:44:49] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[13:46:02] <riv> they're just ints :)
[13:46:23] *** Quits: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:47:11] *** Joins: duuude (~user@user/duuude)
[13:47:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:21] <Bou> I think the compiler can technically store them in an SQL database if it wants to 
[13:47:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:47:40] <Bou> But yeah, bytes are bytes are bytes
[13:48:29] *** Lord_of_Life_ is now known as Lord_of_Life
[13:50:27] <dave0> Franciman: enum itself doesn't allocate space in memory
[13:51:05] <Franciman> sure
[13:51:13] <Franciman> but if I know it will fit a uint8_t
[13:51:24] <dave0> ,cc enum { foo = 69; }; printf("%d ", (int)sizeof(foo));
[13:51:26] <candide> dave0: error: expected ',' or '}' before ';' token
[13:51:35] <dave0> whoops
[13:51:39] <dave0> ,cc enum { foo = 69 }; printf("%d ", (int)sizeof(foo));
[13:51:42] <candide> dave0: 4
[13:51:58] <dave0> Franciman: if the value is between 0-255 then it's fine for uint8_t
[13:52:39] <riv> %zu to print a size_t
[13:52:43] <dave0> Franciman: uint8_t bar; if(foo >= 0 && foo <= 255) { bar = foo; } else { wont fit }
[13:52:57] *** Joins: yo (~0xfe0@49.36.188.149)
[13:54:24] <dave0> Franciman: iirc there is a gcc option to make enum use the smallest type
[13:54:52] <dave0> -fshort-enum
[13:55:31] <Bou> Your compiler typically makes it 32, or 64, bits for a reason though
[13:56:05] <dave0> short-enums instructs GCC to use the smallest storage it can. So if your enum has all its values within 8 bits, say from 0-255 – which will be essentially all enums for most code – it will be stored in a single byte. It is the equivalent of adding attribute “packed” to all enum declarations
[13:57:23] <dave0> hmm doesn't work on the robot
[13:57:28] <dave0> ,gcc -fshort-enums enum { foo = 69 }; printf("%d ", (int)sizeof(foo));
[13:57:31] <candide> dave0: 4
[13:58:15] <riv> plz 
[13:58:25] <riv> ,gcc -fshort-enums enum { foo = 69 }; printf("%zu ", sizeof(foo));
[13:58:27] <candide> riv: 4
[13:58:57] <dave0> no one can remember every printf formatting character... it's the ls of c :-p
[14:00:06] <Franciman> thanks y'all
[14:03:16] *** Joins: earnestly (~earnest@user/earnestly)
[14:04:58] <mcf> foo always has type int, so sizeof(foo) == sizeof(int). if you gave the enum a tag, on the other hand...
[14:06:07] *** Quits: manjaroi3 (~manjaro-i@112.169.116.78) (Ping timeout: 256 seconds)
[14:06:43] <mcf> ,gcc -fshort-enums enum E { foo = 69 }; printf("%zu", sizeof(enum E));
[14:06:46] <candide> mcf: 1
[14:06:54] <mcf> ,gcc enum E { foo = 69 }; printf("%zu", sizeof(enum E));
[14:06:56] <dave0> oh cool thanks mcf 
[14:06:56] <candide> mcf: 4
[14:10:17] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[14:10:37] *** Quits: kurahaupo_ (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 240 seconds)
[14:12:00] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[14:14:47] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[14:15:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:17:49] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[14:18:02] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[14:18:37] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:22:12] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[14:23:41] *** Joins: Rounin (~david@84.212.130.215)
[14:24:40] *** Joins: System_Error (~SystemErr@user/systemerror)
[14:25:52] *** Joins: mokulus (~mokulus@user/mokulus)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:59] *** Joins: csrf (~csrf@user/csrf)
[14:33:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:35:56] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:38:59] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[14:44:57] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:47:03] *** Joins: terminalpusher (~terminalp@2a01:586:9b10:1:1b95:6950:c1c6:5c31)
[14:47:44] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[14:50:19] *** Quits: sebag (~guest@91.245.82.2) (Ping timeout: 256 seconds)
[14:50:59] *** Joins: ko (~i.am@user/marlboro)
[14:52:51] *** sandman13 is now known as sandman
[14:53:04] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.3)
[14:53:08] *** sandman is now known as sandman13
[14:53:23] *** Parts: sandman13 (sandman13@sandman13.jujube.ircnow.org) (#rekt)
[14:53:38] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[14:53:57] *** Joins: goddard (~goddard@user/goddard)
[14:55:52] *** Joins: mikoto-chan (~mikoto-ch@2a00:1d50:3:0:d35c:a450:4ccc:94ac)
[14:58:27] *** Quits: off^ (~off@64.253.22.77) (Remote host closed the connection)
[15:02:17] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[15:02:44] *** Joins: duuude (~user@user/duuude)
[15:05:56] *** Joins: Kev_ (~Kev@2a01cb0400149f0041527f8c4ccb017e.ipv6.abo.wanadoo.fr)
[15:06:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[15:07:27] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:08:53] *** Quits: rayen (~rayen@197.15.122.150) (Quit: WeeChat 3.3)
[15:13:18] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[15:15:38] *** Joins: Klinda (~superleag@user/klinda)
[15:18:30] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:23:11] *** Quits: duuude (~user@user/duuude) (Ping timeout: 256 seconds)
[15:23:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[15:24:45] *** Joins: duuude (~user@user/duuude)
[15:29:56] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[15:30:14] <hxztnxt> if I fwrite an int to stdout what's the output?
[15:30:31] <dave0> as raw bytes?
[15:30:57] <hxztnxt> i think so
[15:30:59] <dave0> you can see by piping the output to hexdump
[15:31:01] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[15:31:35] <hxztnxt> oh, but what does it print?
[15:32:10] <dave0> hang on
[15:32:27] <dave0> ,cc putchar(69); putchar(42);
[15:32:32] <candide> dave0: E*
[15:32:38] <dave0> ,sh ./prog | hexdump -C
[15:32:39] <candide> dave0: 00000000  45 2a                                             |E*| 00000002
[15:33:04] <dave0> you can use hexdump to see the raw binary
[15:33:28] <hxztnxt> cool
[15:33:58] <dave0> ,cc int a = 69; fwrite(&a, sizeof(a), 1, stdout);
[15:34:03] <candide> dave0: E
[15:34:07] <dave0> ,sh ./prog | hexdump -C
[15:34:08] <hxztnxt> but i my question was, what is printed to output in terms of what a human can see, is that arbitrary?
[15:34:09] <candide> dave0: 00000000  48 69 21 00                                       |Hi!.| 00000004
[15:34:14] <Bou> ,cc int i = 0x216948; fwrite(&i, sizeof(int), 1, stdout);
[15:34:17] <dave0> whoops!
[15:34:19] <candide> Bou: Hi!
[15:34:24] <dave0> ehehe
[15:35:31] <riv> hxztnxt: an integer is stored as some number of bytes, it will write those bytes out in some order, the exact result can depend on platform specific stuff
[15:35:42] <dave0> hxztnxt: it depends on your terminal .. most things these days are ascii/utf-8 ... if it prints as a visible character
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:12] <dave0> generally \0 is not a visible character, and binary tends to have \0's
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:32] <dave0> like Bou's code .. it has 3 visible characters and \0 which is generally not visible
[15:37:15] *** Joins: plastico (~plastico@neomutt/plastico)
[15:38:17] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[15:38:28] <dave0> hxztnxt: if you want to output so a person can read it, the usual way is printf
[15:38:53] <dave0> raw binary, even if you run it through hexdump, doesn't usually make sense to a person
[15:41:34] *** Joins: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[15:42:34] *** Joins: graywolf (~wolf@user/graywolf)
[15:43:56] <hxztnxt> ,cc int a = 69; fwrite(&a, sizeof(a), 1, stdout);
[15:44:00] <candide> hxztnxt: E
[15:44:09] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 256 seconds)
[15:44:20] <hxztnxt> ,sh ./prog | hexdump -C
[15:44:21] <candide> hxztnxt: 00000000  45 00 00 00                                       |E...| 00000004
[15:45:22] <hxztnxt> dave0:different output than what you got
[15:45:41] <hxztnxt> now im confused
[15:45:46] <Bou> 45 hex is 4*16 + 5 = 69 decimal
[15:45:58] *** Joins: rito_ (~rito_gh@45.112.243.172)
[15:46:11] <hxztnxt> oh i see, ty!
[15:46:26] <Bou> oh lol, now I know why dave0 got that "Hi." in hexdump, it was because I tested the fwrite in a pm to candide l
[15:46:40] <riv> lol
[15:46:42] <dave0> :-)
[15:46:46] <hxztnxt> hah
[15:48:07] *** Quits: alch (~alch@to-18-87-201.service.infuturo.it) (Ping timeout: 256 seconds)
[15:48:29] <hxztnxt> so putchar and fwrite does the same?
[15:48:59] <riv> no
[15:49:06] *** Joins: cousteau (~cousteau@user/cousteau)
[15:49:07] <Bou> `putchar(c)` is basically a `fwrite(&c,1,1,stdout)` I think
[15:49:41] *** Joins: alch (~alch@mi-18-38-187.service.infuturo.it)
[15:49:53] *** Quits: cousteau_ (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[15:49:56] *** Quits: cousteau (~cousteau@user/cousteau) (Client Quit)
[15:49:56] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[15:50:07] <hxztnxt> ,cc putchar(69);
[15:50:08] *** Joins: cousteau (~cousteau@user/cousteau)
[15:50:11] <candide> hxztnxt: E
[15:50:17] <hxztnxt> ,sh ./prog | hexdump -C
[15:50:18] <candide> hxztnxt: 00000000  45                                                |E| 00000001
[15:50:31] <dave0> the posix docs talks about fputc and fgetc ... fwrite in terms of repeatedly calling fputc
[15:51:31] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 256 seconds)
[15:51:56] <dave0> hxztnxt: it's a stream of bytes... you can make human readable output with ascii characters, and you can make machine output as raw bytes 0-255
[15:52:38] <dave0> it's up to you what you think is most useful, they both have advantages
[15:52:46] <hxztnxt> what is the |E| 00000001 at the end?
[15:53:15] <dave0> E is ascii for 0x45  ... i dont know what the number is
[15:53:39] <Bou> the 00000001 is the second line of hexdump output, but candide removes newlines
[15:53:43] <dave0> oh it might be the next line... the robot just prints everything on one line
[15:53:45] <dave0> right
[15:54:36] <Bou> now, why hexdump even prints that line, I don't know
[15:55:30] *** Quits: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:55:54] <riv> ,cc int x = 0x12345678; fwrite(&x, 1, sizeof(int), stdout);
[15:55:57] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[15:55:58] <candide> riv: xV4
[15:56:01] <riv> ,sh ./prog | hexdump -C
[15:56:02] <candide> riv: 00000000  78 56 34 12                                       |xV4.| 00000004
[15:56:20] <riv> it prints the bytes backwards
[15:56:28] <riv> because it's a 32 bit word, little endian platform
[15:56:40] *** Joins: inlight (~inlight@user/inlight)
[15:57:07] <riv> if you check man ascii you can see 'x' = 0x78, 'V' = 0x65, '4' = 0x43
[15:57:22] <riv> 0x56 and 0x34 * sorry
[15:58:05] <hxztnxt> when you fwrite the int 69, the hexdump is  45 00 00 00. Where are all those 0's coming from?
[15:58:28] <riv> 0x00000045
[15:58:42] <hxztnxt> whereas putchar(69) would only be 45
[15:59:03] <Bou> an int is 4 bytes (on this system)
[16:00:02] <hxztnxt> okay, now it makes sense
[16:00:41] *** Joins: johnjay_ (~pi@154.6.152.74)
[16:00:44] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:02:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:03:05] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[16:06:26] <rito_> why is the hexdump not 00 00 00 45 but the other way around? Is this expected everywhere?
[16:06:47] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:07:06] *** Joins: tejr (~tejr@user/tejr)
[16:07:38] <Bou> like riv said, it's "little endian" (least significant byte comes fist)
[16:08:03] <rito_> That makes sense, thanks, Bou.
[16:08:10] <dave0> rito_: it's called "endian" or "byte order" and it's an arbitrary choice made by cpu designers
[16:08:16] <Bou> so where a human would write one thousand as "1000", a computer writes it as 0001
[16:08:29] <dave0> wikipedia has a page on it
[16:08:32] <rito_> Isn't endianness just human choice?
[16:08:52] <dave0> rito_: yes
[16:08:56] <rito_> I first read about it in Charles Petzold's book Code.
[16:09:14] <dave0> x86 happens to dominate pc's and it is little endian
[16:09:24] <dave0> i believe arm is also little endian
[16:09:32] <rito_> I didn't know that.
[16:10:07] <dave0> there are advantages to both.. it just by history that little-endian became dominant
[16:11:18] <dave0> note internet network is generally big endian
[16:11:41] <rito_> Yes, you are right about ARM being little-endian by default.
[16:12:40] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:13:13] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:13:15] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[16:15:05] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[16:16:43] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 250 seconds)
[16:20:24] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it)
[16:21:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:22:04] *** Quits: mikoto-chan (~mikoto-ch@2a00:1d50:3:0:d35c:a450:4ccc:94ac) (Quit: mikoto-chan)
[16:24:06] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[16:25:12] <terminalpusher> write(2) with `count` bigger than `buf` is UB right?
[16:27:44] <terminalpusher> or for example `int x = 0x12345678; fwrite(&x, 1, sizeof(int) * 100, stdout);` is UB right?
[16:28:21] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[16:30:39] <dave0> if it isn't, it should be :-)
[16:31:58] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:34:02] *** Joins: constxd (~brad@142.134.38.68)
[16:35:01] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Quit: Leaving)
[16:35:13] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[16:37:00] *** Joins: Snaffu (~Snaffu@c-174-60-107-126.hsd1.pa.comcast.net)
[16:37:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:39:04] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[16:41:04] *** Joins: zat (~zat@191.23.60.220)
[16:43:07] *** Joins: mahmutov (~mahmutov@5.176.0.124)
[16:45:34] *** Joins: toastloop (toastloop@user/toastloop)
[16:47:23] *** Joins: koki (~koki@host-95-244-162-22.retail.telecomitalia.it)
[16:47:27] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:48:36] *** Parts: koki (~koki@host-95-244-162-22.retail.telecomitalia.it) ()
[16:50:13] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[16:52:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[17:04:56] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[17:18:43] <caze> terminalpusher: Yes.
[17:19:22] <terminalpusher> good to know
[17:19:31] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Quit: leaving)
[17:20:09] <caze> terminalpusher: It is UB to access outside of an array, and in this case, x is considered to be an element of an array containing one element.
[17:21:42] <caze> More precisely, if you start with a pointer value that points into an array, it's UB to perform pointer arithmetic that would generate a value that is outside of that array (with the exception of one past the end).
[17:22:18] <caze> And of course it's UB to dereference any pointer value outside of the array.
[17:22:44] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:25:12] *** Joins: Viewday115 (~Viewday@user/viewday)
[17:25:37] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[17:26:38] <pragma-> Hmm, perhaps I ought to pass a channel parameter to the compiler vm to separate the namespaces.
[17:26:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:26:44] *** Viewday115 is now known as Viewday11
[17:26:53] <pragma-> I have been meaning to rewrite the ,cc stuff for the longest time.
[17:27:25] <pragma-> It was cobbled together extremely quickly and dirtily.
[17:27:37] <terminalpusher> caze: makes sense now
[17:29:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:31:38] *** Joins: Senicar1 (~Senicar@gateway/tor-sasl/senicar)
[17:33:19] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[17:34:36] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Ping timeout: 276 seconds)
[17:34:36] *** Senicar1 is now known as Senicar
[17:36:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:38:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:41:28] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[17:44:57] *** Joins: Klinda (~superleag@user/klinda)
[17:45:13] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:45:34] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 260 seconds)
[17:45:41] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:47:33] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[17:47:38] *** Joins: pulse (~pulse@user/pulse)
[17:48:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[17:53:32] <hxztnxt> how can you see special chars?
[17:53:42] <hxztnxt> irrc there was a bash command
[17:53:50] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[17:54:07] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[17:54:27] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[17:54:38] <hxztnxt> i mean null chars 
[17:54:46] <hxztnxt> and escape chars as well
[17:54:47] <heiner_> cat -v
[17:54:52] <heiner_> or "hd"
[17:56:17] *** Quits: kurahaupo_ (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au) (Ping timeout: 240 seconds)
[17:57:57] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 240 seconds)
[18:02:43] <hxztnxt> spaces not showing?
[18:03:34] <hxztnxt> also -v doesnt display ends of line or null chars
[18:03:53] *** Quits: bebyx (~Thunderbi@user/bebyx) (Read error: Connection reset by peer)
[18:04:08] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:05:16] <pragma-> ,sh echo -e "hi\0there"
[18:05:17] <candide> pragma-: hi
[18:05:21] <pragma-> ,sh echo -e "hi\0there" | od -c
[18:05:22] <candide> pragma-: 0000000   h   i  \0   t   h   e   r   e  \n 0000011
[18:05:35] <pragma-> or hexdump, etc
[18:06:09] <hxztnxt> and hd reads end of lines as '.'
[18:08:24] <hxztnxt> yep, od works flawlessly
[18:11:51] *** Joins: shivesh (~shivesh@user/shivesh)
[18:12:27] *** Joins: zat (~zat@191.23.60.220)
[18:12:32] *** Joins: ferdna (~ferdna@user/ferdna)
[18:13:20] <hxztnxt> ,sh echo `EOF`
[18:13:21] <candide> hxztnxt: prog.sh: line 1: EOF: command not found
[18:14:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[18:23:02] *** kurahaupo is now known as roastkumarahaupo
[18:23:57] <hxztnxt> pragma-:od shows last char as \n. Shouldnt it be '\0'?
[18:24:22] <pragma-> echo adds a newline. it's not a C-string.
[18:24:45] <pragma-> echo -n for no newline
[18:25:09] <pragma-> but, since it's not a C string...
[18:26:20] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:27:50] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Client Quit)
[18:28:17] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[18:28:29] <hxztnxt> ,sh printf("%c",'\n');
[18:28:30] <candide> hxztnxt: prog.sh: line 1: syntax error near unexpected token `"%c"' prog.sh: line 1: `printf("%c" ,'\n' );'
[18:29:16] <hxztnxt> ,sh printf("%c",`\n`);
[18:29:17] <candide> hxztnxt: prog.sh: line 1: syntax error near unexpected token `"%c"' prog.sh: line 1: `printf("%c" ,`'
[18:29:26] <hxztnxt> what?
[18:29:26] * pragma- stares.
[18:29:31] <pragma-> what?
[18:29:53] <hxztnxt> why does it throw a syntax error
[18:30:01] <pragma-> because it's the wrong syntax
[18:30:07] <fizzie> It's ,sh and you're writing something closer to C.
[18:30:53] <fizzie> ,sh printf "%c" $'\n' | od -c  # quite pointless
[18:30:54] <candide> fizzie: 0000000  \n 0000001
[18:33:37] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:33:41] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:36:52] <hxztnxt> pointless indeed
[18:38:49] <hxztnxt> it's that in my program im getting an extra \n and i dont know why :(
[18:38:56] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:39:11] *** Joins: constxd (~brad@142.134.38.68)
[18:39:27] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:39:46] <hxztnxt> oh now i know
[18:40:37] *** Quits: Snaffu (~Snaffu@c-174-60-107-126.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[18:41:58] *** Joins: evocatus (~evocatus@62.182.78.42)
[18:42:02] *** Joins: mrig (~mrig@user/mrig)
[18:43:40] *** Joins: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[18:43:48] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[18:45:15] *** Quits: evocatus (~evocatus@62.182.78.42) (Client Quit)
[18:45:17] *** Quits: roastkumarahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 240 seconds)
[18:48:02] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[18:48:08] <nomagno> Most programs automatically newline-terminate text
[18:50:11] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[18:54:50] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d1c-130f-54e8-1ad6.res6.spectrum.com)
[18:55:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:55:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:55:37] *** Joins: wroathe (~wroathe@user/wroathe)
[18:58:40] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:59:28] *** Joins: Charadon (~Charadon@155.138.164.183)
[19:00:10] *** Joins: Betal (~Betal@user/betal)
[19:01:14] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[19:06:51] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[19:09:03] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:09:19] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:12:48] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[19:13:05] *** Joins: pulse (~pulse@user/pulse)
[19:14:41] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[19:18:33] *** Joins: mrig (~mrig@user/mrig)
[19:25:15] *** Joins: Viewday111 (~Viewday@user/viewday)
[19:26:02] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[19:26:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:26:18] *** Viewday111 is now known as Viewday11
[19:28:52] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[19:29:12] *** Joins: meator (~meator@user/meator)
[19:34:05] *** Quits: toastloop (toastloop@user/toastloop) (Remote host closed the connection)
[19:34:14] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:34:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d1c-130f-54e8-1ad6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:36:17] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d1c-130f-54e8-1ad6.res6.spectrum.com)
[19:38:18] *** Joins: anycat (~anycat@2405:201:6001:6019:87c3:b04:1a3a:4fa4)
[19:38:43] *** Joins: mokulus (~mokulus@user/mokulus)
[19:39:39] *** Quits: anycat (~anycat@2405:201:6001:6019:87c3:b04:1a3a:4fa4) (Client Quit)
[19:39:55] <meator> Can I close a file descriptor while another process is doing blocking read on it? I have a child process that reads from a fd in a infinite loop and I'd like to terminate it from the parent process. I can think of two ways of terminating the child process: closing the fd and detecting that in the child process and explicitky kill()ing it from the parent process.
[19:41:20] <floatcomplex> if you close the write end, the blocking read will return, and indicate to the caller that it got zero bytes
[19:41:49] <floatcomplex> don't just kill it under normal conditions
[19:42:25] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Remote host closed the connection)
[19:42:31] <meator> Inotify has the write end.
[19:43:19] <floatcomplex> well you can kill inotify and the other process should return from read() with zero
[19:43:58] <floatcomplex> oh nm was thinking inotifywait
[19:44:47] <floatcomplex> anyway yeah just have it break out of the infinite loop if read() returns zero which should happen regardless of why the write end closed
[19:45:14] *** Quits: alch (~alch@mi-18-38-187.service.infuturo.it) (Read error: Connection reset by peer)
[19:46:08] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 252 seconds)
[19:48:59] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[19:50:05] *** Joins: alch (~alch@to-18-86-202.service.infuturo.it)
[19:51:11] <meator> Ah, I can do inotify_rm_watch in parent and then detect IN_IGNORED. Thanks!
[19:51:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:53:46] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[19:58:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[19:58:57] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[19:59:33] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:00:19] *** Joins: graywolf (~wolf@user/graywolf)
[20:01:07] *** Joins: johnnyreb (~tth@user/johnnyreb)
[20:02:29] *** Joins: Torr (~Torr@user/torr)
[20:04:32] *** Quits: randm (~randm@user/randm) (Quit: Leaving.)
[20:05:03] *** Joins: randm (~randm@user/randm)
[20:05:17] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.3)
[20:05:30] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[20:06:15] *** Parts: BarbeDeCou (uid6451@id-6451.helmsley.irccloud.com) ()
[20:06:15] *** Joins: duuude (~user@user/duuude)
[20:07:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2d1c-130f-54e8-1ad6.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:08:01] *** Joins: andi_ (~andi@user/andi/x-3467420)
[20:08:17] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:09:22] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[20:10:30] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[20:14:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d5a4-1687-e9ec-e2fe.res6.spectrum.com)
[20:20:09] *** Joins: gnoo (gnoo@user/gnoo)
[20:27:51] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.73) (Ping timeout: 245 seconds)
[20:28:42] *** Joins: seninha (~seninha@user/seninha)
[20:28:55] *** Joins: constxd (~brad@142.134.38.68)
[20:30:54] *** Quits: Mindiell (~Mindiell@python/afpy/mindiell) (Ping timeout: 256 seconds)
[20:32:35] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[20:32:43] *** Joins: Mindiell (~Mindiell@python/afpy/mindiell)
[20:33:17] *** Quits: mahmutov (~mahmutov@5.176.0.124) (Ping timeout: 240 seconds)
[20:35:52] *** Quits: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com) (Remote host closed the connection)
[20:37:22] *** Joins: mahmutov (~mahmutov@5.176.51.91)
[20:37:25] *** Joins: X-Scale` (~ARM@31.22.167.85)
[20:39:28] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 265 seconds)
[20:39:28] *** X-Scale` is now known as X-Scale
[20:39:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:39:56] *** Quits: terminalpusher (~terminalp@2a01:586:9b10:1:1b95:6950:c1c6:5c31) (Remote host closed the connection)
[20:39:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:39:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:39:58] *** Joins: wroathe (~wroathe@user/wroathe)
[20:40:35] *** Quits: fe23 (~fe23@2409:8a34:468:83d0:ac7f:71c0:1dad:ea22) (Quit: fe23)
[20:41:00] *** Joins: hanzo (uid532183@id-532183.hampstead.irccloud.com)
[20:44:12] *** Quits: hanzo (uid532183@id-532183.hampstead.irccloud.com) (Changing host)
[20:44:12] *** Joins: hanzo (uid532183@user/hanzo)
[20:44:56] <Matt|home> #ifdef HAVE_MMAP
[20:44:57] <Matt|home> #include <sys/mman.h>
[20:44:57] <Matt|home> #endif
[20:45:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:45:19] <Matt|home> i don't understand how this macro works.. what exactly does ifdef check for, if that particular macro .. name.. exists in the file ?
[20:45:29] <Matt|home> and if it does then just include that header?
[20:46:37] <cousteau> if it has been previously defined
[20:47:28] <cousteau> (on another header that you have included, or on a #define you wrote explicitly, or on a command line option such as gcc's -DHAVE_MMAP)
[20:47:41] <Matt|home> i don't understand the logic there.. "if this variable name exists elsewhere in the file, then do that" is that correct basically?
[20:47:53] <cousteau> not variable name, but macro definition
[20:48:06] <cousteau> if you write   #define HAVE_MMAP 1   or something like that
[20:48:44] <cousteau> then not only can you use HAVE_MMAP as an alias for 1, you can also check that the HAVE_MMAP macro exists
[20:48:45] <Matt|home> wouldn't the programmer know.. oh i guess it's useful for different architectures maybe? or something..
[20:48:53] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (Quit: Surfing the great wave off Kanagawa)
[20:48:55] <cousteau> for example
[20:49:10] <cousteau> you don't know what other #include files define
[20:49:11] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[20:49:20] <cousteau> or which stuff your system defines by default
[20:49:56] <Matt|home> ok.. i haven't come across a case where i need to do that yet.. i guess i will later
[20:49:59] <Matt|home> ty cousteau 
[20:50:13] <cousteau> for example, Linux may define a THIS_IS_LINUX macro, so if you're creating a .h file that does something or not depending on whether you're in Linux, you may want to test #ifdef THIS_IS_LINUX
[20:51:01] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 240 seconds)
[20:51:03] <cousteau> also there are feature test macros, which show if your compiler supports certain features
[20:53:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[20:53:46] *** Joins: random-nick (~random-ni@87.116.181.93)
[20:53:49] <Matt|home> the hell is a BFD filter..
[20:54:19] <Matt|home> "The reason is that objdump sees an ELF file through a BFD filter of the
[20:54:19] <Matt|home>    world; if BFD has a bug where, say, it disagrees about a machine constant
[20:54:19] <Matt|home>    in e_flags, then the odds are good that it will remain internally
[20:54:19] <Matt|home>    consistent.  The linker sees it the BFD way, objdump sees it the BFD way,
[20:54:19] <Matt|home>    GAS sees it the BFD way.  There was need for a tool to go find out what
[20:54:20] *** ChanServ sets mode: +o candide
[20:54:20] <Matt|home>    the file actually says."
[20:54:20] *** candide sets mode: +b *!~matt@*.bellsouth.net
[20:54:46] <cousteau> dunno.  GAS is probably the GNU Assembler
[20:55:39] *** candide sets mode: -b *!~matt@*.bellsouth.net
[20:55:41] <Matt|home> my bad, thought that would be one line
[20:56:21] *** Quits: pizdets (~pizdets@183.182.110.61) (Ping timeout: 268 seconds)
[20:56:35] <cousteau> IRC clients really need a feature to "convert the paste into a single line"
[20:57:16] *** Joins: pizdets (~pizdets@183.182.110.61)
[20:57:50] <Matt|home> yeah sorry. alright. so my thought process is: before loading a file into memory, i can check some header flags first. .. but if i use mmap it won't actually load the whole thing into memory right, just the parts i try to access? so does it really matter?
[20:59:20] *** Joins: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com)
[21:00:59] *** Joins: u0_a391 (~u0_a391@mobile-166-176-249-20.mycingular.net)
[21:01:17] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 240 seconds)
[21:02:26] <concrete-houses> c for web dev can it be way nicer?
[21:02:35] <concrete-houses> work is a joke
[21:03:27] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:03:31] *** Joins: lleo (~leo@89-200-46-144.mobile.kpn.net)
[21:04:22] <DarkUranium> concrete-houses: WELL. Myself and another dev are working on a GUI library. One with explicit web support (unlike most others).
[21:04:25] <DarkUranium> Web *and* native, to be clear.
[21:04:31] *** Quits: duuude (~user@user/duuude) (Ping timeout: 245 seconds)
[21:04:34] <DarkUranium> (plan: DOM on the web, but custom controls on native)
[21:04:42] <DarkUranium> (so, no browser involvement whatsoever on native)
[21:04:59] *** johnjay_ is now known as johnjay__
[21:05:01] <DarkUranium> Alas, not anywhere close to being usable. We're still figuring out parts of the API.
[21:05:55] *** Joins: pert (~pert@fsf/member/pert)
[21:06:02] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[21:06:58] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[21:16:21] <apotheon> concrete-houses: I think Roman Zolotarev might be doing C webdev stuff.  You could look him up.
[21:16:47] *** Joins: aradesh (~aradesh@user/aradesh)
[21:18:40] *** Joins: duuude (~user@user/duuude)
[21:21:40] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[21:22:22] *** Quits: lisbeths` (~user@c-73-83-140-133.hsd1.wa.comcast.net) (Remote host closed the connection)
[21:23:13] *** mac- is now known as f0xb4t
[21:23:56] *** Quits: u0_a391 (~u0_a391@mobile-166-176-249-20.mycingular.net) (Read error: Connection reset by peer)
[21:24:07] *** Joins: Viewday113 (~Viewday@user/viewday)
[21:24:24] *** Joins: u0_a391 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[21:24:27] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:25:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:25:52] *** Viewday113 is now known as Viewday11
[21:31:58] *** Joins: Akuli (~Akuli@213.216.211.11)
[21:34:02] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[21:36:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:38:23] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[21:38:39] *** Joins: Satin (uid193953@user/Seten)
[21:41:22] *** Joins: joomla943 (uid527699@id-527699.uxbridge.irccloud.com)
[21:43:41] <joomla943> Why are functions like malloc and free even needed? If each process has access to the entire virtual address space then why can't an OS just let a process use all the addresses without allocating them first? I guess that way paging will take a huge amount of space on disk and context switching become s a nightmare?
[21:44:45] <smlavine> malloc and free can be used across different OSes where that might not be true, for one thing
[21:45:54] *** Joins: tyzoid (~tyzoid@srv1.tyzoid.com)
[21:49:04] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[21:50:16] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[21:50:37] *** Quits: Feuermagier_ (~Feuermagi@138.199.36.133) (Quit: Leaving)
[21:50:48] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:52:27] *** Quits: joomla943 (uid527699@id-527699.uxbridge.irccloud.com) ()
[21:52:48] <floatcomplex> joomla943: the total number of unique allocations an app might need over its (unbounded) lifetime might be unbounded, even if the number that exist at any moment is small
[21:53:02] <floatcomplex> and the address space might be large but it's not unbounded
[21:54:36] *** Quits: azerty (~azerty@user/badwolf) (Quit: *)
[21:55:02] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[21:56:57] *** Joins: terminalpusher (~terminalp@2a01:586:9b10:1:1b95:6950:c1c6:5c31)
[21:57:39] <concrete-houses> gnoga.com ish?
[21:59:55] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[22:00:01] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[22:00:59] <twkm> you might repeat that floatcomplex, since joomla* fucked off before your reply (from my vantage) but has returned.
[22:02:48] <nomagno> Is there any situation where you can't just take an argument and return by value?
[22:03:05] <nomagno> I understand it might not be strictly optimal, but just out of curiosity
[22:03:06] <System_Error> joomla5: on side note I wonder how would you even track memleaks like that... or how you track mem no longer used by program
[22:04:13] <System_Error> E.g. okay, program used over 9000 megabytes at some point. Would they stay allocated to it forever, even if it needed that once in 10 years?
[22:04:15] <joomla5> yep that would be another side effect
[22:04:17] <twkm> depends on the argument and return types nomagno.  generally you can.
[22:04:38] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[22:04:45] <System_Error> Garbage collectors and so on somewhat go around - but it haves its price.
[22:04:48] <nomagno> Actually, there is one issue with this
[22:04:58] *** Quits: lleo (~leo@89-200-46-144.mobile.kpn.net) (Ping timeout: 256 seconds)
[22:04:58] <nomagno> C allows casting void pointers to any type of pointer, but not void
[22:05:06] <nomagno> Which is, in my opinion, a huge design mistake
[22:05:08] <twkm> www, casting.
[22:05:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:05:30] <System_Error> what casting to void meant to do and what valid uses it has got?
[22:06:00] *** Joins: magla (~gelignite@55d4d5f7.access.ecotel.net)
[22:06:04] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:06:32] <twkm> discarding a value is sometimes useful.
[22:06:48] <System_Error> void to something usually used for cases like "we dont know real input type. but want to treat it as X anyway"
[22:07:24] *** Joins: Torr (~Torr@user/torr)
[22:07:26] <nomagno> System_Error: that's because you can use it to generalize
[22:08:08] <twkm> void certainly can't be used that way.  neither can pointer to void but at least these types of values can be converted to other object pointer types.
[22:08:10] <System_Error> so mem* functions dont have to bother of actual input type, just do what they say, etc. But I'm not fully sure how it even supposed to work in reverse.
[22:09:07] <zalt> also allowing user data pointers in libraries and such
[22:09:23] <zalt> without void *, C would be a mistake
[22:09:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[22:09:51] <zalt> even though it's ugly, it allows for more possibilities, it should be used with caution though
[22:09:56] <wroathe> with void * C is a mistake, but we love it anyway
[22:10:23] <System_Error> void * is powerful but debatable pattern as it leads to bugs due to lack of proper annotation of intent in code.
[22:10:25] <twkm> not having pointer to void would increase the number of casts required.
[22:11:13] <System_Error> And libs allowing void would be real crap idea. Some libs allow callbacks and so on, but they usually still prefer more structured approach, to avoid at least dumbest of bugs
[22:12:19] <System_Error> in case of e.g. memcpy it would be very annoying to require knowledge of input type for what said to be "memory copy". Like that void makes its point.
[22:12:25] <pragma-> wroathe: that's not the only mistake. C plays very fast and very loose with its type system. It lets you do arithmetic on _Bools!
[22:12:37] <pragma-> implicit conversions abound!
[22:13:07] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) ()
[22:13:16] <System_Error> IIRC gcc11 added analyzer and warnings on trying to assign bool smth other than true/false, same for enums
[22:14:02] <twkm> linting has a long history of trying to get people to use c more carefully.
[22:14:10] <zalt> System_Error: you're against struct whatever { ...; void *userdata; } ?, if so what's the alternative
[22:14:41] <pragma-> a UserData union!
[22:14:51] <System_Error> actually many c coders use c in reckless manners, and when it comes to OSes, network sw, etc - we get CVEs unfortunately
[22:15:21] <zalt> pragma-: that would require knowlege of the user data type before compilation
[22:15:44] <twkm> that's required anyway.
[22:16:00] <System_Error> zalt: something more structured in general. Such structure ... would badly backfire when two ends disagree on what's inside.
[22:16:01] <zalt> not really, with dynamic libraries for example
[22:16:18] <System_Error> And there's no data to check what's inside, etc. In the end it would end in fire.
[22:16:37] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:17:29] <zalt> System_Error: it can be used in a way such that there's no possibility of confusion, userdata is always struct mystruct in this translation unit (or in the entire program)
[22:17:55] <zalt> if it's with callbacks then it's even less ambiguous
[22:18:33] <zalt> it's not foolproof, but not even integer addition is foolproof in C
[22:19:14] <zalt> you have to be paranoid while programming in C, that way you might stand a chance
[22:19:31] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[22:19:32] *** Joins: bbju (~bbju@103.144.149.220)
[22:19:39] <System_Error> zalt: possibly, but, it still calls for all kinds of dumb bugs and sorta fails to use benefits of data types.
[22:20:17] <wroathe> pragma-: You had me at "fast and loose" 
[22:20:28] <zalt> that's why you use structured programming in 99.99% of the code, void pointers in the 00.01% to connect things together
[22:20:30] <System_Error> but not even integer addition is foolproof in C <- with ubsan and -Wconversion it a bit more foolproof. And it got at least some declaration of coder's intent.
[22:20:42] *** Joins: seninha (~seninha@user/seninha)
[22:22:20] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[22:27:23] <wroathe> pragma-: Are you fully addicted to Haskell yet?
[22:27:35] <wroathe> pragma-: To the point that all other programming seems pointless? 
[22:29:27] <nomagno> I still think it would be useful to have void data type, that is not a pointer
[22:29:33] <nomagno> Mainly to reuse structures that are returned by value
[22:29:53] <nomagno> You would have to specify size, sure
[22:30:05] <twkm> so do so.
[22:30:09] <pragma-> wroathe: Haskell has a lot of cool ideas. But it seems kind of tedious to use for anything non-trivial. In addition, non-trivial Haskell programs are rather difficult to read -- at least for me for now.
[22:30:21] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 245 seconds)
[22:30:36] <nomagno> twkm: How can I if the language doesn't allow for it though?
[22:30:55] <wroathe> pragma-: Agreed. It's a very different model, and some of the people writing it are too clever for their own good
[22:31:02] <nomagno> Best I can do if have a tagged union
[22:31:05] <twkm> stop praying a type will magically do things for you.
[22:31:33] <twkm> a tagged union is one way, certainly.  a struct with a fam is another.
[22:32:25] <nomagno> how does a flexible array member help here?
[22:33:53] <wroathe> pragma-: The way I conceive of it though is that if you did actually want to build something at a huge scale, I think Haskell compositionality would eventually build critical mass and make it faster and easier to build large things
[22:34:03] <twkm> it is a tool, whether it is the easiest solution depends on the problem.
[22:34:05] <wroathe> pragma-: (in theory, anyway)
[22:34:37] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[22:35:34] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[22:37:22] *** Joins: inlight (~inlight@157.42.247.230)
[22:37:22] *** Quits: inlight (~inlight@157.42.247.230) (Changing host)
[22:37:22] *** Joins: inlight (~inlight@user/inlight)
[22:37:32] <nomagno> is it safe to use long int instead of size_t ?
[22:37:50] <nomagno> Or is it possible implementations use even longer types?
[22:38:20] <inlight> size_t is unsigned int 
[22:38:40] <inlight> int and long is 4 byte in 32-bit and 
[22:38:59] <inlight> int is 4 byte and long is 8 byte in 64 bit
[22:39:09] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:39:12] <pert> POSIX specifies that the implementation must support at least one environment where size_t does not have width greater than long
[22:39:28] *** Joins: meator (~meator@user/meator)
[22:39:37] <pert> That may require having to build with special flags, but in practice, you can assume for that reason that unsigned long can represent all values of size_t
[22:40:54] <pert> inlight: that's all ABI-specific, it's not merely dependent on whether you're on a 32-bit or 64-bit machine. size_t is generallly not unsigned int
[22:40:58] <twkm> inlight: ugh.
[22:41:57] <twkm> nomagno: "safe" depends, if you allocate "large" items then too narrow a size_t will produce surprises.
[22:43:16] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:44:07] *** Joins: cmj (~cmj@68.207.254.124)
[22:45:43] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:45:48] <pert> nomagno: for details, see the section "Programming Environments" at https://pubs.opengroup.org/onlinepubs/9699919799/utilities/c99.html
[22:46:23] <nomagno> I'm aiming for full portability, so I guess I'll be stuck with a dependency on limits.h
[22:46:38] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:46:43] <nomagno> and stddef
[22:47:16] <nomagno> Don't really need any other headers to implement this thing
[22:47:21] <twkm> why do you want an alternative to size_t?
[22:47:44] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[22:47:46] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[22:50:32] *** Joins: FishByte (~fishbyte@2601:984:4100:fed0:1e56:c099:e5c7:60be)
[22:53:15] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[22:54:21] *** candide sets mode: -o candide
[22:55:37] *** jonbryan_ is now known as jonbryan
[23:00:57] *** Quits: bbju (~bbju@103.144.149.220) (Ping timeout: 256 seconds)
[23:01:10] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Quit: Leaving)
[23:01:31] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[23:02:46] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Ping timeout: 268 seconds)
[23:06:48] *** Quits: terminalpusher (~terminalp@2a01:586:9b10:1:1b95:6950:c1c6:5c31) (Remote host closed the connection)
[23:06:48] *** Quits: rito_ (~rito_gh@45.112.243.172) (Quit: Leaving)
[23:07:15] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[23:08:51] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:09:56] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[23:10:37] *** Joins: strajder (~strajder@user/strajder)
[23:11:55] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[23:17:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[23:17:30] *** Quits: MrFantastik (~f@176.108.141.162) (Ping timeout: 256 seconds)
[23:24:21] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 268 seconds)
[23:24:33] *** Joins: Viewday119 (~Viewday@user/viewday)
[23:25:19] *** Joins: libc (~weechat@user/tessio)
[23:25:34] <libc> not much of a C questio nbut i don't know where to ask this
[23:25:51] <libc> is software raid provides performance compared to no raid ?
[23:26:13] *** Joins: botnumber2 (~botnumber@21-53-255-130.kamensktel.ru)
[23:26:19] <botnumber2> q
[23:26:21] *** Joins: botnumber1 (~botnumber@21-53-255-130.kamensktel.ru)
[23:26:24] <botnumber1> q
[23:26:28] *** Quits: botnumber2 (~botnumber@21-53-255-130.kamensktel.ru) (Client Quit)
[23:26:28] *** Quits: botnumber1 (~botnumber@21-53-255-130.kamensktel.ru) (Client Quit)
[23:26:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[23:26:34] *** Viewday119 is now known as Viewday11
[23:26:49] <twkm> try a channel related to the o/s you do or want to use.
[23:30:24] <libc> #linux is basically spam channel :(
[23:30:46] <libc> they are talking about which distrro is better in best case scenario 
[23:31:21] <twkm> linux isn't an o/s.
[23:31:31] <libc> exactly that's why im here
[23:31:48] <pragma-> At least linux distributions are related to linux.
[23:31:54] <pragma-> Seems topical for #linux.
[23:32:27] <libc> or more for #<Name Of Distrro Here>
[23:32:39] <libc> but i see the spirit here...
[23:32:41] <twkm> if libc could manage to choose one that channel might have answers.
[23:33:17] <libc> solong
[23:33:18] *** Parts: libc (~weechat@user/tessio) (WeeChat 3.2)
[23:34:00] <pragma-> smh, that moron thinks talking about unrelated linux distributions in a distribution-specific channel is more topical than... nevermind.
[23:34:22] <riv> linux sucks use windows instead
[23:34:36] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:34:49] *** Quits: zat (~zat@191.23.60.220) (Remote host closed the connection)
[23:35:42] <ioxzev1z> I don't think 'doze is a good option imo
[23:36:35] *** Joins: bbju (~bbju@103.144.149.220)
[23:36:47] *** Quits: bbju (~bbju@103.144.149.220) (Client Quit)
[23:38:14] *** Joins: rgrinberg (~textual@187.223.248.37)
[23:39:11] <riv> it was said in jest!
[23:39:33] *** Joins: clime (~clime@78-80-24-27.customers.tmcz.cz)
[23:40:14] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) ()
[23:40:27] <clime> hi, i am trying to use sigprocmask to mask all signals except SIGINT that I have set a handler for. But for some reason, SIGINT is being masked as well in the end. Anyone has encountered a similar problem?
[23:40:45] <clime>     sigset_t sigset;
[23:40:47] <clime>     sigfillset(&sigset);
[23:40:49] <clime>     sigdelset(&sigset, SIGINT);
[23:40:51] <clime>     sigprocmask(SIG_SETMASK, &sigset, NULL);
[23:41:09] <clime> earlier I have:
[23:41:11] <clime>     static struct sigaction sa;
[23:41:13] <clime>     sa.sa_handler = handle_SIG;
[23:41:15] <clime>     sigemptyset(&sa.sa_mask);
[23:41:17] <clime>     sigaction(SIGINT, &sa, 0);
[23:41:45] <twkm> please make a test case, put it on a paste site (see topic) and share the url.
[23:42:09] <clime> ye, that will take me much longer than figure it out myself
[23:42:13] <clime> but thanks anyway
[23:42:45] <twkm> sometimes just making a test case suffices to show where things are broken.
[23:43:01] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[23:45:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[23:45:43] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:45:50] *** Joins: CormacAttack (~mac@2601:449:8380:7bf0::66db)
[23:45:59] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[23:46:12] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[23:46:59] <clime> oh ok, by masking the signal, i also masked SIGTERM that I was sending to children processes. They were not receiving it which I didn't except so that was why I thought it was broken
[23:47:06] <clime> twkm: ^
[23:47:22] <clime> thanks that you answered, it motivated me to dig deeper
[23:47:55] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[23:48:07] <clime> i.e. i didn't realize i will also mask the processes for children....but maybe if i do this after fork ...
[23:48:17] *** Quits: alch (~alch@to-18-86-202.service.infuturo.it) (Ping timeout: 240 seconds)
[23:49:24] *** Joins: alch (~alch@151.82.42.94)
[23:49:51] *** Quits: carlavilla (~carlavill@2a0c:5a84:3407:5100:221:6bff:fe3b:cee4) (Remote host closed the connection)
[23:57:27] <twkm> glad you found it!
[23:58:50] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
