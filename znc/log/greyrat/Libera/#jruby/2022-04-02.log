[00:00:00] <headius> they are doing what we do now I believe
[00:00:12] <headius> so it is not predictable in all the cases it used to be
[00:00:20] <lopex[m]> oh
[00:00:30] <headius> object_id is allocated on the fly
[00:00:57] <lopex[m]> doh, I wish I could help with jcodings btw
[00:01:13] <headius> I give you permission to help
[00:01:19] <lopex[m]> it's the last thing I remember quite well
[00:01:39] <headius> yeah ahorek and others have been getting involved to help
[00:01:42] <lopex[m]> good there;s almost no changes in onigmo
[00:01:46] <headius> we're managing
[00:01:56] <lopex[m]> yeah, I've been following the changes
[00:01:58] <headius> we even picked up a few folks to assist with jnr
[00:02:53] <lopex[m]> no hear from wmeissner since then ?
[00:03:07] <headius> no, I even emailed the last address I had for him
[00:03:08] <lopex[m]> afaik, he got pissed of by some policy
[00:03:25] <headius> he changed a license on some project, maybe ffi/ffi, and everyone FREAKED OUT
[00:03:28] <headius> rather than just talked through it
[00:03:33] <headius> so he was just done
[00:03:40] <lopex[m]> aaah, I recall now
[00:05:08] <headius> you have to have a thick skin for this game
[00:05:29] <headius> I've had so many people be incredibly rude and later apologetic when they realize how nasty they were
[00:05:41] <headius> but if you take it at face value, I can see why people quit
[00:10:28] <lopex[m]> heh
[00:11:12] <lopex[m]> on another note I have a jruby app bases on sinatra and my framework that has "Up 10 months" uptime
[00:11:57] <lopex[m]> and there's on minute based monitoring activities
[00:12:30] <lopex[m]> the one that talks to as400
[00:14:06] <lopex[m]> and the other thing is that I'll have to learn that whole cloud thing more now, not that it bores me to hell, but I dont have a hear for it
[00:15:13] <lopex[m]> *heart
[00:15:25] <headius> hah very nice
[00:17:56] <lopex[m]> oh, polyglot maven isbeing maintained, nice
[00:18:37] <headius> barey
[00:18:39] <headius> barely
[00:18:47] <headius> we need to get push rights so we can take it over and update everything
[00:21:13] <lopex[m]> I dont recall if this wa this thread https://news.ycombinator.com/item?id=30812156 but someone claimed loom is not a thing for another few years
[00:21:47] <lopex[m]> also https://github.com/openjdk/jextract
[00:22:35] <headius> yeah I have not jumped on it because it is probably still a good ways out
[00:22:50] <headius> we should still do a fiber impl on top of it for folks that want to try it
[00:25:03] <lopex[m]> wrt polyglot, I must complain about gradle/kotlin etc, those are very inconsistent and lack any docs
[00:25:34] <headius> the polyglot support for them? I am not surprised... they both have their own preferred tools
[00:25:53] <lopex[m]> it ends up this absurds like properties.add(org.jooq.meta.jaxb.Property().withKey("defaultNameCase").withValue("lower"))
[00:26:03] <lopex[m]> in kotlin/gradle
[00:26:18] <lopex[m]> and good luck finding the docs/api
[00:27:23] <lopex[m]> the maven model as bad as it is doesn need any additional funny changes
[00:30:28] <lopex[m]> er, wrt polyglot, I meant switching into instead of using gradle
[00:30:59] <lopex[m]> btw why enebo is so quiet ?
[00:46:45] <headius> I think he's just taking a quiet week to work on finishing some major parser changes and probably just taking a break too
[00:46:55] <headius> My kid is off school this week so I've only been about 50% myself
[00:53:57] <lopex[m]> just out of being curious
[00:54:17] <lopex[m]> if that's a proper phrase
[00:54:38] <headius> Out of curiosity
[00:54:42] <lopex[m]> ah
[00:54:47] <lopex[m]> the only one ?
[00:55:42] <headius> You can be curious about something or wonder, out of curiosity, something something
[00:55:45] <lopex[m]> yeah, I should;ve use that one
[00:56:13] <headius> Those are the forms I'm familiar with but I'm not sure where "out of curiosity" comes from
[00:56:28] <lopex[m]> well being here was one of the few english channels for me
[00:56:44] <headius> See, there's a good reason for you to come back and hang out with us more often
[00:57:17] <lopex[m]> yeah, I'm following some parts of developement at least
[00:57:31] <lopex[m]> even that env one got me asking
[00:57:34] <lopex[m]> "P
[00:58:43] <lopex[m]> but the plethora of like the string constructors is asking for some formal tool application to make any refactorings
[00:58:46] <headius> Once we get 9.4 out I'm going to pivot to a bunch of heavy optimization work so that will be fun
[00:59:09] <headius> There's so much of Ruby that we don't optimize at all right now like super calls and refinements and variable length argument lists or keyword args
[00:59:27] <lopex[m]> and I'm little worried about any potential joni perf regressions
[00:59:40] <headius> Need to start leveraging invoke dynamic call sites more to fast path key operations
[00:59:54] <lopex[m]> and how's truffle team now btw ?
[00:59:58] <headius> Yeah I'm a little worried about that too, we used to be clearly the fastest compared to Java's regular expressions and most of the other third-party libraries
[01:00:13] <headius> I don't think anyone runs them in production yet but they keep on soldiering on
[01:00:40] <headius> They have two regular expression engines, when they can use a finite automata they fall back on a truffle provided engine that optimizes like any truffle language
[01:00:45] <lopex[m]> first part is new need good benchamrks
[01:00:57] <lopex[m]> modern ones
[01:01:14] <headius> Hard to compete with a DFA using a bytecoded engine
[01:01:35] <headius> They have a collection of benchmarks but I think they're mostly tiny synthetic benchmarks like from the benchmarks game or small one-off library benchmarks
[01:01:59] <headius> They lean very heavily into the benchmark game style benchmarks because they run for a long time with a static data set and optimize very well on truffle
[01:02:14] <lopex[m]> but DFA is not applicale for general case nonetheless
[01:02:31] <headius> Correct, and in that case they fall back on Joni
[01:02:55] <lopex[m]> yeah, they just syntax check for regexp and decide
[01:03:19] <lopex[m]> I guess ?
[01:04:45] <headius> Yes
[01:04:53] <headius> I think as long as you don't have backtracking in the regular expression you can use a DFA
[01:05:31] <lopex[m]> also, I know we discussed this before, but if joni falled back to artificial stack for some threshold this could be a huge win
[01:06:06] <headius> We still can try to generate JVM byte code for it too
[01:06:18] <headius> But yeah anything where we could fall back for simpler expressions would be a big win
[01:06:42] <headius> For the vast majority of regular expressions in a typical app we are creating an entire by code machine and recompiling the regular expression repeatedly to match like one thing
[01:06:57] <headius> Entire bytecode machine
[01:07:07] <headius> I tried reusing a machine by clearing it and resetting it but it wasn't a whole lot faster
[01:15:56] <lopex[m]> yeah
[01:16:29] <lopex[m]> simple cases would be totally inlined like what truffle does
[01:16:54] <lopex[m]> like ab?[cd]
[01:17:16] <byteit101[m]> (re the cow discussion above) I remember once googling for "CoW list", then immediately facepalming when I saw google listing the breeds of the animal 
[01:17:17] <byteit101[m]> enebo, when you are back: https://github.com/byteit101/JRubyFX-FXMLLoader/blob/master/lib/jrubyfx-fxmlloader.rb imports lots of stuff to the top level, hence one of the fails in jrubyfx. should I manually copy that list to jrubyfx or since this is 2.0 make people import that themselves, or should we load some subset (fxcollections seems reasonable to autoload)
[01:17:18] <lopex[m]> series of conditions
[01:35:38] <lopex[m]> https://cdn.discordapp.com/attachments/641771574936207370/959459938755813436/IMG_20220401_163031_405.jpg
[01:35:47] <lopex[m]> I think is quit old
[02:38:02] <headius> Lol eclipse compared to IntelliJ now
[02:38:20] <headius> Funny thing, keeping a complete indexed model of your entire project in memory takes a little bit of space
[02:52:55] <lopex[m]> intellij can be a surprise for a while
[02:53:43] <lopex[m]> can be buggy
[02:54:53] <lopex[m]> headius: I agree
[02:55:08] <lopex[m]> eclipse is no more
[02:55:45] <lopex[m]> but scala community uses https://scalameta.org/metals/
[04:23:58] *** Joins: jimtng[m] (~jimtngmat@2001:470:69fc:105::1:ebd6)
[04:29:25] <jimtng[m]> Hi, is there a page that tracks the progress towards Ruby3.x compatibility?
[04:33:34] <jimtng[m]> jimtng[m]: Found it: https://github.com/jruby/jruby/issues/7015
[05:03:58] <headius> That might be a little bit out of date but you can also look in our GitHub actions at the "spec:ruby:wip" job which runs only the specs that are new and that we have not had a chance to implement yet.
[05:04:08] <headius> jimtng: ^
[05:04:36] <headius> There's also an issue for 3.0 and 2.7 since we are leaping from 2.6 to 3.1 now
[09:58:36] *** Joins: subbu (~subbu@user/subbu)
[10:06:48] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 272 seconds)
