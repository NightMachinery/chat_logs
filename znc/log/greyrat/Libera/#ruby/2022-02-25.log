[00:19:46] *** Joins: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz)
[00:21:30] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-708c-1d1a-7204-62e1.res6.spectrum.com)
[00:24:01] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-4d3a-5004-9503-0c7b.res6.spectrum.com) (Ping timeout: 256 seconds)
[00:28:37] *** Quits: bluedust (~bluedust@103.161.144.107) (Remote host closed the connection)
[00:29:12] *** Joins: bluedust (~bluedust@103.161.144.107)
[00:33:53] *** Quits: bluedust (~bluedust@103.161.144.107) (Ping timeout: 256 seconds)
[00:34:08] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:34:49] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:37:11] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Read error: Connection reset by peer)
[00:46:43] *** Joins: oxfuxxx (~oxfuxxx@195.47.194.46)
[00:50:52] *** Joins: basso (~basso@195.139.200.7)
[00:58:20] *** Joins: tcowell_ (~tcowell@cpc73820-dals21-2-0-cust164.20-2.cable.virginm.net)
[00:59:40] *** Parts: tcowell_ (~tcowell@cpc73820-dals21-2-0-cust164.20-2.cable.virginm.net) ()
[00:59:56] *** Joins: tcowell_ (~tcowell@cpc73820-dals21-2-0-cust164.20-2.cable.virginm.net)
[01:01:38] *** Quits: tcowell_ (~tcowell@cpc73820-dals21-2-0-cust164.20-2.cable.virginm.net) ()
[01:07:57] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:09:55] *** Quits: roshanavand (~roshanava@185.213.155.232) (Remote host closed the connection)
[01:54:52] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:57:50] *** Quits: infinity_fye (~infinityf@156.212.40.211) (Quit: Leaving)
[02:38:27] *** Joins: markong (~kvirc@213.146.188.203)
[02:43:22] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Quit: WeeChat 3.4)
[03:18:36] *** Joins: Garb0 (~Garb0@user/garb0)
[03:19:57] <Garb0> Hi, stupid question: how to get nonblocking IO for readline?
[03:23:55] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[03:31:26] <mooff> :: IO.readline.upcase
[03:31:26] <ruby-eval> ERROR: private method `readline' called for IO:Class
[03:31:26] <ruby-eval> Did you mean?  readlines
[03:31:32] <mooff> :: readline.upcase
[03:31:39] <mooff> :: hello Garb0
[03:31:40] <ruby-eval> => "HELLO GARB0\n"
[03:31:54] <mooff> let's find it from the docs
[03:32:59] <mooff> :: maxlen = 1024; respond_to? :read_nonblock
[03:32:59] <ruby-eval> => false
[03:33:08] <mooff> :: $stdin.read_nonblock(maxlen)
[03:33:08] <ruby-eval> ERROR: undefined local variable or method `maxlen' for main:Object
[03:33:13] <mooff> ::!
[03:33:13] <ruby-eval> [Terminated]
[03:33:37] <mooff> :: maxlen = 1024 # local variables should stick now
[03:33:38] <ruby-eval> => 1024
[03:33:46] <mooff> :: $stdin.read_nonblock(maxlen)
[03:33:46] <ruby-eval> ERROR: Bad file descriptor @ rb_io_set_nonblock - <STDIN>
[03:33:46] <ruby-eval> <internal:io>:63:in `read_nonblock'
[03:34:48] <Garb0> mooff, i don't think readline has nonblocking
[03:34:53] <Garb0> i checked the docs over and over 
[03:35:51] <mooff> Garb0: i've been using this:
[03:35:51] <mooff> def lines
[03:35:51] <mooff>   yield socket.readline until socket.eof?
[03:35:51] <mooff> end
[03:39:25] <Garb0> Aha! Readline.redisplay does it
[03:39:30] <Garb0> mooff, thanks 
[03:40:11] <Garb0> i swear i was literally 3 seconds away from pulling my hair and rewriting it in Go
[03:41:35] <mooff> i understand
[03:41:55] <mooff> i've had hair pulling trying to get Ruby io reading not to block
[03:42:15] <mooff> some parts of the docs could stand to be improved
[03:43:42] <mooff> Garb0: lines() will raise in some conditions
[03:43:53] <mooff> abrupt disconnect situations
[03:43:54] <Garb0> It doesn't help that there's NO good cmdline lib for ruby.
[03:44:08] <Garb0> mooff, lol I'm not even doin sockets at all, it's just cmdline stuff
[03:44:09] <mooff> you mean like.. what's that spf13 one for Go
[03:44:26] <Garb0> how the hell did metasploit guys make such a good cmdline is beyond me
[03:44:50] <mooff> :)
[03:45:08] <mooff> i want to make a first class command line shell in Ruby
[03:45:57] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Ping timeout: 240 seconds)
[03:46:00] <mooff> a replacement for bash where you use a really slick DSL
[03:48:12] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 240 seconds)
[03:49:37] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[03:58:59] <mooff> for the ThreadLocalDelegator.. i realised earlier you'd unfortunately need to dup the object if you wanted to store it, reference it after the event has finished
[04:01:01] <mooff> maybe that sort of makes it like Rust in a sense. threads have to unbox them specially if they want to use them
[04:03:01] <mooff> could use the unary operator for that. class ThreadLocalDelegator; def ~@()= __getobj__.dup end
[04:03:31] <mooff> or actually.. class ThreadLocalDelegator; def ~@()= __getobj__ end
[04:12:03] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[04:31:27] *** Joins: bluedust (~bluedust@103.165.167.150)
[04:35:49] *** Quits: bluedust (~bluedust@103.165.167.150) (Ping timeout: 240 seconds)
[04:36:34] <Garb0> mooff, i have given up, time for extreme measures: ruby ncurses
[04:51:14] *** Quits: TomyWork (~TomyLobo@p200300e80f0067008d39a43f86b23c6c.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:10:25] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[05:15:56] *** Joins: TCZ (~tcz@91.150.178.124)
[05:43:00] *** Quits: peer (peer@fosshost/techops/peer) (Quit: whoops)
[05:43:35] *** Joins: peer (peer@fosshost/techops/peer)
[05:46:46] *** Joins: hanzo (uid532183@user/hanzo)
[05:54:36] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[06:03:28] *** Joins: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com)
[06:08:04] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:09:20] *** Joins: justAstache (~justache@user/justache)
[06:10:05] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[06:15:59] *** Joins: PedroG1 (~android@45.77.216.181)
[06:29:48] *** Quits: Guest6792 (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[06:39:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:49:54] *** Quits: Garb0 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[07:30:45] *** Joins: bluedust (~bluedust@103.165.167.150)
[07:46:47] <PedroG1> new_hash = ['a', 'b', 'c'].map{ |x| => some_function(x) }
[07:47:18] <PedroG1> Somehow this is failing, whats the best way to create a hash whose value is that some_function
[07:49:29] <havenwood> PedroG1: %w[a b c].to_h { |char| [char, some_function(char)] }
[07:50:09] <PedroG1> Havenwood, thank you for ur help
[08:32:49] *** Joins: fdan (~fdan@2001:1900:2100:2807:ed17::20e)
[08:40:22] *** Quits: Hazey_Dream (~user@cpe5c7d7dbd2142-cm5c7d7dbd2140.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[09:11:08] *** Quits: fdan (~fdan@2001:1900:2100:2807:ed17::20e) (Quit: Client closed)
[09:40:36] *** Quits: dannyAAM (~dannyAAM@saru.saru.moe) (Ping timeout: 240 seconds)
[09:41:42] *** Joins: dannyAAM (~dannyAAM@saru.saru.moe)
[10:19:10] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[10:43:49] *** Quits: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz) (Read error: Connection reset by peer)
[10:49:18] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[11:08:54] *** Joins: Guest6792 (~vit@chello085216193138.chello.sk)
[11:26:35] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[11:40:13] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:46:09] *** Joins: Rounin (~david@84.212.130.215)
[12:24:57] *** Quits: yuckey2d (~yuckey2d@gateway/vpn/pia/yuckey2d) (Ping timeout: 240 seconds)
[12:26:04] *** Joins: yuckey2d (~yuckey2d@gateway/vpn/pia/yuckey2d)
[12:29:12] *** Joins: TomyWork (~TomyLobo@p200300e80f0067009c2b9a79280007db.dip0.t-ipconnect.de)
[12:31:55] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[12:36:33] *** Joins: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz)
[13:08:59] <ZAJDAN> I have a class where I define method(which use library Net/Http). I would like to call this class method from controller and pass parameters for HTTP request(login). Should I define the method in the class as 'self' or as instance method?
[13:21:11] *** Joins: infinityfye (~infinityf@156.212.9.238)
[13:47:31] *** Joins: fdan (~fdan@2001:1900:2100:2807:ed17::20e)
[13:48:07] *** Quits: roadie (~user@2a02:8108:5a40:1d87:5d5e:6e26:5429:3b71) (Ping timeout: 256 seconds)
[13:48:34] *** Quits: fdan (~fdan@2001:1900:2100:2807:ed17::20e) (Client Quit)
[14:09:25] *** Joins: fdan (~fdan@2001:1900:2100:2807:ed17::20e)
[14:11:17] *** Joins: roadie (~user@2a02:8108:5a40:1d87:e815:28ed:fcfb:5dda)
[14:15:43] *** Joins: markong (~kvirc@213.146.188.203)
[14:34:54] *** Joins: oxfuxxx (~oxfuxxx@195.47.194.46)
[14:53:13] *** Quits: fdan (~fdan@2001:1900:2100:2807:ed17::20e) (Quit: Client closed)
[14:53:27] *** Joins: Aylat (~Aylat@user/Aylat)
[14:55:13] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Ping timeout: 256 seconds)
[15:00:56] *** Quits: roadie (~user@2a02:8108:5a40:1d87:e815:28ed:fcfb:5dda) (Read error: No route to host)
[15:01:10] *** Joins: roadie (~user@2a02:8108:5a40:1d87:e815:28ed:fcfb:5dda)
[15:06:31] *** Quits: roadie (~user@2a02:8108:5a40:1d87:e815:28ed:fcfb:5dda) (Ping timeout: 268 seconds)
[15:21:30] *** Joins: roadie (~user@2a02:8108:5a40:1d87:e815:28ed:fcfb:5dda)
[15:24:25] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[15:39:18] *** Quits: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz) (Read error: Connection reset by peer)
[15:39:42] *** Joins: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz)
[15:46:02] *** Quits: roadie (~user@2a02:8108:5a40:1d87:e815:28ed:fcfb:5dda) (Ping timeout: 252 seconds)
[15:48:27] *** Joins: roadie (~user@2a02:8108:5a40:1d87:102d:d7c:48b:58f7)
[15:50:50] *** Quits: roadie (~user@2a02:8108:5a40:1d87:102d:d7c:48b:58f7) (Read error: Connection reset by peer)
[15:51:05] *** Joins: roadie` (~user@2a02:8108:5a40:1d87:102d:d7c:48b:58f7)
[16:30:21] *** Joins: moons (~quassel@pool-100-4-188-6.albyny.fios.verizon.net)
[16:30:21] *** Quits: moons (~quassel@pool-100-4-188-6.albyny.fios.verizon.net) (Client Quit)
[16:43:51] *** Joins: TCZ (~tcz@91.150.178.124)
[16:56:09] *** Joins: fdan (~fdan@103.215.168.1)
[16:59:19] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:01:22] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:05:43] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:18:43] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[17:21:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:21:23] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:21:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:24:31] <adam12> ZAJDAN: As with everything, it depends. If it has no state, you could keep it a class method for simplicity sake.
[17:24:58] *** Quits: Aylat (~Aylat@user/Aylat) (Read error: Connection reset by peer)
[17:27:20] <ZAJDAN> adam12: in my case I do not need keep a state(offline, online)..just do login, get sessionID and nothing more
[17:34:44] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Remote host closed the connection)
[18:02:31] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[18:09:48] <ox1eef> ZAJDAN: make sure to handle failure gracefully - generally i think long blocking operations are best done asynchronous to the user but of course every case is different.
[18:11:08] <ZAJDAN> ox1eef: Thank YOu for any hint and recommendation
[18:11:44] <ox1eef> by rescuing SystemCallError you should catch the various Errno errors that may arise at a socket level.
[18:24:06] <ZAJDAN> ox1eef: This I do I have a case block to catch (Net::HTTPSuccess, Net::HTTPBadRequest, Net::HTTPUnauthorized, etc) and accordingly to the result I show message
[18:26:58] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[18:28:47] *** Joins: xuochi (~xuochi@c-24-98-208-21.hsd1.ga.comcast.net)
[18:34:10] <ox1eef> those are not exceptions but classes representing a response.
[18:34:48] <ox1eef> you should handle what happens when you don't get a response as well, due to some network error
[18:34:51] *** Joins: TCZ (~tcz@91.150.178.124)
[18:37:48] <nakilon> (the exception you might are some of these: https://dpaste.org/psN9/raw)
[18:37:58] <nakilon> *you might have
[18:42:25] <ox1eef> No need to list all the errno's individually like that, SystemCallError is their superclass.
[18:46:40] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[18:47:50] <ZAJDAN> ox1eef: "Net::OpenTimeout"
[18:49:06] <nakilon> ox1eef I like explicity
[18:49:37] *** Quits: bluedust (~bluedust@103.165.167.150) (Ping timeout: 240 seconds)
[19:00:09] <mooff> what about just not rescuing them
[19:05:37] <mooff> btw, i didn't know to_h took a block :-)
[19:06:24] *** Joins: bluedust (~bluedust@103.165.167.150)
[19:10:13] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 256 seconds)
[19:11:11] <adam12> mooff: It's recent... I think?
[19:11:42] <adam12> Ruby 2.6.
[19:22:33] <ox1eef> nakilon: it is hard work to track all of them one by one, i'd say even prone to error - you could easily overlook one of them.
[19:23:00] *** Quits: xuochi (~xuochi@c-24-98-208-21.hsd1.ga.comcast.net) (Quit: leaving)
[19:23:21] <ox1eef> ZAJDAN: indeed, that's one to rescue as well.
[19:24:18] *** Quits: yxhuvud (~quassel@2001:1ba8:1424:ea00:2949:ede0:5a9d:9dc9) (Remote host closed the connection)
[19:24:36] <nakilon> I prefer to know what exactly was eaten by my "rescue"s
[19:25:30] <ox1eef> fair enough
[19:26:19] <ox1eef> i'd approach this problem with a module implementing === - where you can handle all these different cases, but rescue one exception  or well, module.
[19:30:35] *** Quits: bluedust (~bluedust@103.165.167.150) (Remote host closed the connection)
[19:31:38] <mooff> after installing a gem, how can i ask RubyGems to update $LOAD_PATH in a session without restarting it?
[19:32:33] <adam12> mooff: "gem 'somegem'"?
[19:32:41] <adam12> Not sure what you mean by session tho?
[19:33:12] <adam12> https://rubyapi.org/3.1/o/kernel#method-i-gem
[19:33:14] <ox1eef> looking at the Gem module, "Gem.add_to_load_path()" seems rather direct.
[19:33:33] <mooff> adam12: s/session/process/ or s/session/running Ruby VM/ :)
[19:33:49] <ox1eef> hot reloading in the other words.
[19:33:56] <mooff> thanks ox1eef. hopefully that does it
[19:35:18] <ox1eef> another place to look, pry and its install-gem command. i believe it allows the same thing: install and require into active process.
[19:36:03] <mooff> add_to_load_path didn't find the new gem
[19:36:30] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[19:36:37] <ox1eef> sorry, got to jump off for a meeting - id suggest looking at the rest of the Gem methods, probably need to refresh the cache. the pry command solves it as well.
[19:37:15] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00:2241:4e8a:cce8:b1d4)
[19:37:50] <ox1eef> meeting cancelled
[19:38:38] <ox1eef> https://github.com/pry/pry/blob/v0.11.3/lib/pry/commands/gem_install.rb
[19:38:57] <ox1eef> pry uses Gem.install + then follows with a require
[19:41:50] <mooff> np
[19:42:06] <mooff> thanks for the pointers. just found Gem.refresh, which does it
[19:42:37] <mooff> "Refresh available gems from disk"
[19:43:01] <ox1eef> cool
[19:53:59] <mooff> how does the Ruby community feel about improving its posture w.r.t package update attacks?
[19:54:57] <ox1eef> what are package update attacks
[19:55:53] <mooff> supply chain attacks. i didn't feel i could use both 'posture' and 'supply chain attacks' in one sentence without rolling eyes at myself
[19:57:11] <mooff> but it does seem that the Ruby ecosystem is still unguarded where it comes to the ability for someone to push a malicious update
[19:57:47] <ox1eef> generally i think we're behind others, with npm putting publishing behind 2FA and i can think of many instances where packaging falls behind. another one i found recently was that bundler will overwrite the binaries of other gems, so you could maliciously replace another bin the user trusts.
[19:58:19] <ox1eef> yes, id agree with that
[19:58:53] <mooff> imo, 2FA is important but not enough
[19:59:20] <ox1eef> but we do not even have that, so i think that gives an idea
[20:01:11] <mooff> i was reading that PHP are going in what seems like the (only) sensible option - peer attestation published to transparency logs
[20:01:12] <ox1eef> it would probably be a huge, diffilcult effort to try 2FA at publishing time.
[20:02:01] <ox1eef> npm is worth watching too, they suffered a lot with these issues
[20:02:07] <mooff> i feel like it should be impossible for a new gem, or an update to a gem, to be generally available before the source diff has been peer reviewed
[20:03:04] <ox1eef> sounds awful tbh, imagine those just publishing quick gems and the like.
[20:03:05] <mooff> without literal eyes on the code before it runs on thousands of developer machines (with full r/w to their home directories, private keys, source code, databases, etc)
[20:05:35] <ox1eef> i was totally wrong, there is 2FA support across the spectrum: https://guides.rubygems.org/setting-up-multifactor-authentication/
[20:05:47] <mooff> cool
[20:06:53] <ox1eef> i just enabled it, seems to work very nicely
[20:07:38] <mooff> i feel like the risks are still high, even with 2FA
[20:07:57] <mooff> to be honest, i'm surprised there haven't been more attacks so far
[20:10:02] <ox1eef> thanks be to God.
[20:14:15] <nakilon> any link to any article telling how Ruby is used besides of websites? to send it to stupid HRs
[20:14:31] <nakilon> I mean recruiters
[20:16:13] *** Joins: bluedust (~bluedust@103.165.167.150)
[20:16:57] <ox1eef> probably needs to be written
[20:38:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:39:51] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[20:42:03] <nakilon> I just have to explain every single day what is the programming
[20:59:00] *** Quits: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz) (Read error: Connection reset by peer)
[21:07:25] <ox1eef> blog about it then link them to it :) youre probably well informed by now.
[21:07:41] <ox1eef> i'd have to think about it and research it
[21:14:13] <ox1eef> DragonRuby comes to mind as an obvious one.
[21:15:15] <ox1eef> i seem to remember an automation tool by the name of puppet - not sure it even still exists, but id assume devops is another place ruby shines.
[21:15:37] <ox1eef> Go more so though.
[21:21:04] <nakilon> good idea, if only I had a blog
[21:21:52] <ox1eef> lucky for you another ruby area is great is for building static websites :)
[21:22:18] <nakilon> for now I just copypaste the list of my repos, but that's not educational, they only come to a conclusion "what a weirdo, delete"
[21:22:40] <nakilon> _--
[21:22:45] <ox1eef> of course, it has to be packaged in an appropiate way
[21:23:17] <ox1eef> a gist as markdown would be the least effort and then at least they might understand it
[21:47:57] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[21:48:12] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[21:55:48] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:13:47] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:42:11] *** Quits: roadie` (~user@2a02:8108:5a40:1d87:102d:d7c:48b:58f7) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[22:45:31] *** Quits: infinityfye (~infinityf@156.212.9.238) (Quit: Leaving)
[23:02:40] *** Quits: mbarbar (~mbarbar@oak.xen.prgmr.com) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[23:02:55] *** Joins: mbarbar (~mbarbar@oak.xen.prgmr.com)
[23:30:46] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:49:41] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[23:53:52] *** Quits: bluedust (~bluedust@103.165.167.150) (Ping timeout: 272 seconds)
