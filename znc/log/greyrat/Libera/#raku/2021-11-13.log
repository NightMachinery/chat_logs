[00:05:44] *** Joins: melezhik56 (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[00:05:49] *** melezhik56 is now known as melezhik2
[00:11:54] <moritz_> before this project was started, I did warn that it would make it harder to actually build the docs. That was a risk the decision makers accepted.
[00:35:20] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[00:38:35] *** Quits: melezhik2 (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[00:45:21] *** Quits: kylese (~kylese@p5dd8b9a8.dip0.t-ipconnect.de) (Quit: Leaving)
[00:48:11] *** Quits: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com) (Quit: Connection closed)
[00:57:10] <[Coke]> with recent rakudo I had to hit ^C twice to exit, then I had to run 'stty sane' to get my terminal back
[01:01:31] <codesections> S///, and /re/ and Str.trans all (can) operate on a regex.  Does tr/// only take literal strings?  (I'd always thought it took a regex and then was confused when changing something from $_ .= trans to tr/// changed the output
[01:17:33] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[01:19:10] *** Joins: lichtkind_ (~lichtkind@p200300d0a7269846f9ad0828ca4d2ae1.dip0.t-ipconnect.de)
[01:19:33] *** Joins: colemanx (~coleman@2605:a601:5529:1e00:1018:27f4:9955:ca6)
[01:22:03] *** Quits: lichtkind (~lichtkind@p200300d0a726988ff9ad0828ca4d2ae1.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[01:22:58] *** Quits: colemanx (~coleman@2605:a601:5529:1e00:1018:27f4:9955:ca6) (Client Quit)
[01:28:35] *** Quits: sm1 (~sm1@2601:44:8701:9420::76d) (Ping timeout: 264 seconds)
[01:37:08] * japhb perks his ears up at [Coke]'s issue
[01:37:17] <japhb> Which line editor were you using?
[01:37:32] <japhb> And on which OS?
[01:47:07] *** Joins: MasterDuke92 (~MasterDuk@2001:ac8:21:b5::a26e)
[01:55:12] <[Coke]> mac
[01:55:26] <[Coke]> how do I tell which line editor?
[01:55:38] <[Coke]> It's probably readline, that's what I'd install if they prompted me to pick one
[02:35:59] *** gabiruh_ is now known as gabiruh
[03:04:03] <japhb> [Coke]: OK, and you're using the standard Terminal app?
[03:04:52] <japhb> Hmmm, come to think of it I don't thing that gets debug output at all.  You can check which ones you have installed by doing a `zef info` on Linenoise, Readline, and Terminal::LineEditor.
[03:13:35] *** Joins: monkey_ (~user@190.104.116.153)
[03:32:52] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:35:45] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:56:58] *** Quits: MasterDuke92 (~MasterDuk@2001:ac8:21:b5::a26e) (Ping timeout: 256 seconds)
[04:01:43] <[Coke]> Using iterm2, and it's Readline, yes
[04:01:54] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:17:06] <japhb> [Coke]: Hmmm, I shouldn't have made much of any difference to Readline support ... is there a "golf"?  Or does it literally require two ^C's and leave the terminal in a bad state *every time*?
[04:22:16] *** Quits: lichtkind_ (~lichtkind@p200300d0a7269846f9ad0828ca4d2ae1.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[04:43:55] *** Joins: melezhik18 (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[04:46:14] *** Quits: melezhik18 (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Client Quit)
[04:57:23] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 264 seconds)
[05:14:57] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[05:17:15] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 250 seconds)
[06:17:16] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:17:16] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:16] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:17:17] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:17:34] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:17:38] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:17:59] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[06:18:16] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[06:19:06] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[06:19:14] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:19:39] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[06:20:11] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[06:50:41] <Geth> Â¦ vim-raku: flwyd++ created pull request #34: Set keywordprg=rakudoc
[06:50:41] <Geth> Â¦ vim-raku: review: https://github.com/Raku/vim-raku/pull/34
[07:18:19] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:18:49] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:19:08] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[07:19:43] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:19:51] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:14:26] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Ping timeout: 260 seconds)
[08:17:59] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:19:10] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[09:19:11] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:11] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:19:31] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[09:19:54] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[09:19:58] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[09:20:05] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[09:20:46] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[09:20:47] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:21:18] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[09:21:32] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:22:12] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[09:35:47] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:42:21] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[09:53:03] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[10:19:02] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:19:24] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[10:19:29] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[10:19:39] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[10:19:48] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[10:20:29] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:21:37] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[10:21:37] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:53:15] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:54:12] *** Joins: seednode (~seednode@user/seednode)
[11:06:32] <Geth> Â¦ doc: dd6e4a3a86 | (Peter du Marchie van Voorthuysen)++ | 11 files
[11:06:32] <Geth> Â¦ doc: Improve documentation of the list routine
[11:06:32] <Geth> Â¦ doc: 
[11:06:32] <Geth> Â¦ doc: The documentation of the list subroutine is a good place to explain the
[11:06:32] <Geth> Â¦ doc: single argument rule yet again.
[11:06:33] <Geth> Â¦ doc: 
[11:06:33] <Geth> Â¦ doc: Most core types implementing a .list method only accept an object instance
[11:06:34] <Geth> Â¦ doc: as the invocant. If the core type implements .list as a multi method,
[11:06:36] <Geth> Â¦ doc: listing the type object is handled by
[11:06:38] <Geth> Â¦ doc: 
[11:06:40] <Geth> Â¦ doc:     multi method list(Any:U: --> List)
[11:06:42] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/dd6e4a3a86
[11:06:44] <Geth> Â¦ doc: 35665aa862 | (Peter du Marchie van Voorthuysen)++ | doc/Type/List.pod6
[11:06:46] <Geth> Â¦ doc: Improve wording and formatting.
[11:06:47] <linkable6> Link: https://docs.raku.org/type/List
[11:06:48] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/35665aa862
[11:06:50] <Geth> Â¦ doc: 8c3e724fdb | (Peter du Marchie van Voorthuysen)++ (committed using GitHub Web editor) | 11 files
[11:06:52] <Geth> Â¦ doc: Merge pull request #3975 from dumarchie/master
[11:06:54] <Geth> Â¦ doc: 
[11:06:56] <Geth> Â¦ doc: Improve documentation of the list routine
[11:06:58] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/8c3e724fdb
[11:17:41] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[11:39:49] <Geth> Â¦ doc: dumarchie++ created pull request #3980: Talk about collections rather than containers
[11:39:49] <Geth> Â¦ doc: review: https://github.com/Raku/doc/pull/3980
[11:44:56] *** Joins: sm1 (~sm1@2601:44:8701:9420::76d)
[11:55:06] *** Quits: sm1 (~sm1@2601:44:8701:9420::76d) (Ping timeout: 245 seconds)
[12:00:40] *** Joins: lichtkind_ (~lichtkind@p200300d0a7269846f9ad0828ca4d2ae1.dip0.t-ipconnect.de)
[12:05:34] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[12:06:07] *** Joins: seednode (~seednode@user/seednode)
[12:25:07] *** Quits: lichtkind_ (~lichtkind@p200300d0a7269846f9ad0828ca4d2ae1.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:42:16] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:46:35] *** Quits: zostay (sid170293@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:49:07] *** Quits: leont (sid489095@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[12:49:16] *** Joins: leont (sid489095@uxbridge.irccloud.com)
[12:50:23] *** Joins: zostay (sid170293@hampstead.irccloud.com)
[12:53:47] *** Quits: rjbs (sid498898@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[12:57:29] *** Joins: rjbs (sid498898@uxbridge.irccloud.com)
[13:10:17] *** Joins: patrickb (~quassel@55d44723.access.ecotel.net)
[13:22:44] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:00:43] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[14:39:54] *** Quits: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com) (Quit: Connection closed)
[14:42:45] <patrickb> o/
[14:44:24] <patrickb> I have a project that reproducibly uses a stale precomp file and doesn't recompile the changed source.
[14:45:09] <patrickb> Since it's so nicely reproducible, I'd say it's a good place to debug the behavior.
[14:45:28] <patrickb> Anyone around to give me some hints of where to look?
[14:53:15] <lizmat> fwiw, I see this behaviour when I'm reinstalling a module from source with --force, while running tests on a dependency with -Ilib
[14:53:37] <lizmat> I would have to nuke the lib/.precomp in the dependency to "see" the newly installed module
[14:53:53] <lizmat> patrickb: does that match any of your situation ?
[14:59:40] <patrickb> In this case it's the script I'm calling itself
[15:00:28] <patrickb> so not a module. I'm pretty sure I did change the -I parameters before it started doing this.
[15:01:16] <patrickb> Sadly adding RAKUDO_MODULE_DEBUG causes a ton of output but then segfaults.
[15:01:43] <lizmat> segfaults?   interesting...  I've never seen that
[15:01:57] <patrickb> I'm on 2021.09
[15:02:23] <lizmat> I'm sure we could need some precomp sanity checker logic...  nine ugexe might know if that already exists
[15:02:27] <patrickb> <hanging the version will probably spoil the reproducibility though.
[15:32:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:33:47] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:38:30] <patrickb> I give up for now. :-(
[16:30:11] <ugexe> patrickb: the RMD output might be useful to show anyway
[16:33:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:33:48] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:35:10] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[16:39:33] <ugexe> i usually forget most of what i know about precomp days after i do anything with it, so when i debug its generally just placing print statements in the various CU::* classes but that would kill your reproducibility
[16:41:43] <ugexe> you might also try to whittle down your script / dependencies to the bare `use` statements required to reproduce (to potentially reduce RMD output)
[16:47:13] <patrickb> thanks. This is helpful.
[16:47:39] <patrickb> Let's see when this comes up again.
[16:49:40] <ugexe> adding a new path to the includes via e.g. -I parameters will change which precomp gets used as well
[16:49:58] <ugexe> raku -I. bin/zef --help
[16:50:00] <ugexe> raku -Ixxx -I. bin/zef --help
[16:50:11] <ugexe> one will precomp into ./, one into ./xxx
[16:59:58] <Geth> Â¦ App-Rakubrew: 36171e2b44 | (Patrick BÃ¶ker)++ | 2 files
[16:59:59] <Geth> Â¦ App-Rakubrew: Fix `register` with relative paths
[16:59:59] <Geth> Â¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/36171e2b44
[16:59:59] <Geth> Â¦ App-Rakubrew: a1de52d9d0 | (Patrick BÃ¶ker)++ | 3 files
[16:59:59] <Geth> Â¦ App-Rakubrew: Version 22
[16:59:59] <Geth> Â¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/a1de52d9d0
[17:07:18] <ugexe> CUR.install(..., :force) will leave the old precomp files behind. perhaps it should remove those, but then thats really just making :force an alias for uninstall + install (i.e. maybe use uninstall before installing instead of force)
[17:23:43] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[17:36:27] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[17:49:22] *** Joins: monkey_ (~user@190.104.116.153)
[17:51:17] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[17:54:40] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[17:56:14] *** Joins: casey (~casey@c-24-130-74-194.hsd1.ca.comcast.net)
[18:23:26] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[18:32:01] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[18:34:26] <patrickb> When seeing "const_iX NYI" that's definitely a compiler bug, because that OP shouldn't show up in compilation, correct?
[18:34:59] * patrickb sees those on latest master.
[18:54:00] <tonyo> patrickb: does the module have a `use lib` init?
[18:59:09] <Xliff> I am currently working on a program that needs to pull a type off of an attribute. However, when I do so I am getting a "MyType(Any)" rather than a "MyType" 
[18:59:17] <Xliff> How can I get rid of the "(Any)"
[19:01:07] <Geth> Â¦ doc: bb1a934fe2 | Coke++ | doc/Type/List.pod6
[19:01:07] <Geth> Â¦ doc: Fix example compilation
[19:01:07] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/bb1a934fe2
[19:01:07] <Geth> Â¦ doc: 51182b9d84 | Coke++ | xt/pws/code.pws
[19:01:07] <Geth> Â¦ doc: learn new word
[19:01:08] <Geth> Â¦ doc: review: https://github.com/Raku/doc/commit/51182b9d84
[19:01:10] <linkable6> Link: https://docs.raku.org/type/List
[19:26:06] <tonyo> example?
[19:29:09] <patrickb> tonyo: The thing that causes const_iX NYI? I've seen them in the tests of Cro::HTTP:ver<0.8.4> and Red:ver<0.1.47>.
[19:31:07] <tonyo> your precomp issue
[19:32:02] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:32:02] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:33:44] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:07:35] *** Joins: MoC (~moc@user/moc)
[20:24:35] <patrickb> tonyo: It's possible it was a false report. /o\
[20:24:39] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[20:37:56] *** Joins: MoC (~moc@user/moc)
[20:40:16] *** Quits: casey (~casey@c-24-130-74-194.hsd1.ca.comcast.net) (Quit: Connection closed)
[20:55:34] *** Joins: jess (~jess@libera/staff/jess)
[21:05:35] *** Joins: autarch (~autarch@198-74-6-211.fttp.usinternet.com)
[21:06:05] *** Parts: autarch (~autarch@198-74-6-211.fttp.usinternet.com) ()
[21:08:26] *** gordonfish- is now known as gordonfish
[21:12:09] *** Joins: sm2 (~sm1@2601:44:8701:9420::76d)
[21:20:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[21:25:24] *** Joins: monkey_ (~user@190.104.116.153)
[21:32:38] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:32:51] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[21:38:52] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[21:38:53] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[21:42:26] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[21:42:44] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Client Quit)
[21:49:29] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[21:50:00] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[22:03:03] <SmokeMachine> m: say Int().^target_type.^name # Xliff
[22:03:04] <camelia> rakudo-moar 4c238bdc9: OUTPUT: Â«Intâ¤Â»
[22:18:31] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 256 seconds)
[22:18:32] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 256 seconds)
[22:21:45] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[22:26:48] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[22:28:11] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:33:26] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:53:16] <A26F64> I'm wondering if someone could recommend a straightforward tutorial explaining how to distribute several modules, classes, subsets, etc. in separate files and then execute them locally as a module.  Basically, how to create a working module that may or may not end up deployed into the broader Raku module ecosystem.  I feel that the official
[22:53:17] <A26F64> documentation, while overall excellent, is not particularly clear on that.
[22:53:21] <A26F64> (Definitely a beginner's question.  I did ask in #raku-beginner once earlier without seeing a response.)
[22:53:30] <A26F64> In Perl packages are placed in files, identified with the `package` keyword with double-colon separators, and then imported by `use`ing that full identifier.  Raku is (I am to understand) not that simple.
[22:54:58] <A26F64> There's quite a bit of discussion in the documentation about actually using the elements of a module once installed via zef.  But there's little about setting this up locally yourself.  The "modules" page contains paragraphs about META6.json and something called "compunits" and the -I switch and who knows what else.  All of which (at first, anyway)
[22:54:59] <A26F64> seems relatively complicated for just creating a set of interrelated files.
[22:56:46] <ugexe> so dont overcomplicate it
[22:57:03] <ugexe> it sounds like most of what you are asking would be the same as in perl
[22:57:24] <gfldex> A26F64: we tend to use tools like https://raku.land/cpan:SKAJI/App::Mi6 and https://raku.land/github:gfldex/META6::bin
[22:58:38] <A26F64> I did find those listed at https://docs.raku.org/language/modules-extra.  But those represent very simple repositories.
[23:00:28] <A26F64> Uploaded file: https://uploads.kiwiirc.com/files/cc8792281f469efd5cdf05e3b00e953b/pasted.txt
[23:00:49] <A26F64> I didn't mean to send that as a file.
[23:00:53] <A26F64> I eventually found out that you need to use the -I switch to use CompUnit::Repository::FileSystem instead of CompUnit::Repository::Installation.  In fact the CompUnit::Repository::FileSystem method of doing things seems to be incompatible with the Installation method that is the preferred ultimate form of the module since the former uses Perlian
[23:00:53] <A26F64> filesystem references and the latter META6.json.
[23:01:44] <A26F64> For example, do you have to temporarily specify directories in your `use` statements during development and then convert all such statements to call whatever is defined in META6.json's `provides` attribute once you are ready to release the thing to the module ecosystem?  (Assuming, of course, that you even intend to do so?)
[23:01:49] <ugexe> there is a lot wrong with that statement. first -I isn't tied to a specific compunit repo, it could very well point to a installation. secondly i'm not what you mean by its not compatible... it very much is compatible
[23:02:15] <ugexe> and indeed a ::FileSystem will use a META6.json assuming one exists at whatever directory you point at
[23:02:49] <ugexe> A26F64: i would suggest trying whatever you think would work in perl
[23:06:57] <A26F64> Please correct me if I'm wrong about this observation: I discovered that specifying a filesystem file in META6.json's `provides` attribute seems to load the whole file without respect to the module name used as the corresponding key.  Which means that a file `use`ing one class in that file suddenly has access to all classes in it.  I thought that
[23:06:57] <A26F64> META6.json was intended to limit access to packages in the namespace.
[23:08:04] <ugexe> a whole file always gets loaded regardless of what is loading it
[23:09:20] <ugexe> so if youre asking if you can have `package Foo { class Foo1 { } }; package Bar { class Bar1 { } };` in a single file yet load/expose only one of Foo or Bar, then no that doesnt work
[23:09:48] <ugexe> regardless if its ::FileSystem or ::Installation
[23:13:54] <A26F64> I had kind of assumed that META6.json restricted the packages themselves mainly because https://docs.raku.org/language/modules says: "In the provides section, include all the namespaces provided by your distribution and that you wish to be installed".  That doesn't exactly say that other namespaces won't be installed, I guess, but it wasn't a leap
[23:13:54] <A26F64> to infer that.
[23:14:44] <ugexe> yeah thats not exactly an accurate statement 
[23:16:24] <ugexe> all the files and namespaces get installed. the namespace part of the provides just provides the namespace to load with, and may not neccesarily match any namespaces in the file
[23:17:46] <ugexe> i mean ideally sure it'd be great if it could do what you suggest though (and I think the original design docs suggest this) 
[23:18:51] <ugexe> but if you list `"A1":"lib/Foo.rakumod", "A2":"lib/Foo.rakumod"` then you just precompile Foo.rakumod twice and make it `use`able via `use A1` or `use A2`
[23:20:21] <A26F64> I suppose that we can be somewhat minimalist, then, in what we supply to `provides`.
[23:20:33] <A26F64> Allow me also to (try to) explain my earlier comment that the compunit modes are inconsistent....
[23:21:17] <ugexe> for provides you generally want one entry for each file, and given each file some namespace you will `use` (which generally matches whatever the top level namespace declared in the file is, but might not be)
[23:24:09] <A26F64> (I thought that I had an expressive example for my comment but need to review that.  Sorry.)
[23:25:04] <A26F64> I can experiment with the file namespaces given your explanation above; thank you.
[23:33:27] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:33:27] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:34:08] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[23:38:16] <Xliff> How is CoercionHOW exposed in raku? "Perl6::Metamodel::CoercionHOW" doesn't work.
[23:39:25] <A26F64> ugexe I'll experiment further with the file structure given your responses.  Thank you for the clarification and for your patience.
[23:39:49] <Xliff> m: say Metamodel::CoercionHOW
[23:39:50] <camelia> rakudo-moar 4c238bdc9: OUTPUT: Â«No such method 'gist' for invocant of typeâ¤'Perl6::Metamodel::CoercionHOW'.  Did you mean 'isa'?â¤  in block <unit> at <tmp> line 1â¤â¤Â»
[23:40:01] <Xliff> Ah. that works.
[23:48:38] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
