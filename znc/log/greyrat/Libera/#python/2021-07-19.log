[00:00:06] *** Joins: kosh (~kosh@user/kosh)
[00:00:35] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[00:00:48] <midori> question: if i use a venv and make a mess installing pip packages there (with jupyter, conda and all that), just deleting the venv folder should clear the mess right?
[00:01:05] *** Joins: jelmer (~jelmer@user/jelmer)
[00:01:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 250 seconds)
[00:02:07] <Akuli> midori, yes, and that's why venvs are awesome :D
[00:02:24] <Akuli> (i assume conda and stuff is all installed into the env, with the env's pip)
[00:02:35] *** Joins: wyclif (~wyclif@user/wyclif)
[00:02:42] <Akuli> (i don't really know how conda works though)
[00:02:45] *** Joins: akaWolf (~akaWolf@akawolf.org)
[00:03:31] <midori> Akuli: yes installed into the venv's pip. thanks, i was thinking the same but needed some assurance lol.
[00:03:56] *** Quits: the-mask (~the-mask@user/the-mask) (Ping timeout: 255 seconds)
[00:04:09] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (Remote host closed the connection)
[00:04:33] <Payam> midori, put in in .gitignore and you don't worry :P
[00:05:59] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[00:07:18] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[00:07:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:07:44] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:08:04] *** Joins: wyclif (~wyclif@user/wyclif)
[00:08:20] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:08:38] *** Quits: jelmer (~jelmer@user/jelmer) (Ping timeout: 250 seconds)
[00:08:40] *** Quits: schumaml (~schumaml@p200300e2ef2e510053c1821a43d17d29.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[00:08:42] <dynotiger> isn't conda its own isolation thing?
[00:11:04] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[00:11:32] *** Joins: jelmer (~jelmer@user/jelmer)
[00:12:55] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 268 seconds)
[00:14:49] *** Quits: dynotiger (~dynotiger@45.32.186.178) (Quit: Leaving)
[00:16:21] <kosh> conda is its own thing and has it own ability to make multiple environments
[00:16:32] <kosh> I pretty much use conda on all systems now regardless of os
[00:16:47] <kosh> because having high performance libraries available is REALLY helpful
[00:18:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:18:32] *** Quits: shailangsa (~shailangs@host86-186-196-229.range86-186.btcentralplus.com) (Ping timeout: 258 seconds)
[00:18:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:19:07] *** Joins: wyclif (~wyclif@user/wyclif)
[00:20:14] <midori> i wasn't being very specific when i mentioned conda. since i just intend to go over a thesis for a friend, i'm gonna try to setup the environment with pip.
[00:24:00] *** Quits: iogue (~iogue@gateway/tor-sasl/iogue) (Quit: iogue)
[00:24:01] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[00:24:16] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:24:20] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:25:34] <jinsun> installing conda in venv is unusual, if you use venv then go pip only, and if you use conda then use conda environments
[00:26:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:26:52] *** Quits: P1RATEZ (piratez@user/p1ratez) (Remote host closed the connection)
[00:26:54] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:28:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:30:09] *** Joins: wyclif (~wyclif@user/wyclif)
[00:31:49] *** Quits: x4rchimedes (~archimed3@2a00:23c4:f115:d901:380a:6e2e:92d8:255a) (Remote host closed the connection)
[00:34:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[00:35:39] *** Joins: wyclif (~wyclif@user/wyclif)
[00:35:56] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:36:33] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[00:36:54] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[00:38:54] *** Joins: hafat (~hafat@95.70.168.45)
[00:40:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[00:41:09] *** Joins: wyclif (~wyclif@user/wyclif)
[00:41:39] *** Joins: cdown (~cdown@89.32.122.5)
[00:42:00] *** Quits: jelmer (~jelmer@user/jelmer) (Ping timeout: 255 seconds)
[00:42:29] *** Joins: pnoud (~pnoud@user/pnoud)
[00:43:52] *** Joins: CodePoint (~BitShift@47.186.145.58)
[00:44:52] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[00:45:06] *** Quits: Haxxa (~Haxxa@122-199-44-120.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:21] *** Joins: jelmer (~jelmer@user/jelmer)
[00:46:04] *** Joins: Haxxa (~Haxxa@122-199-44-120.ip4.superloop.com)
[00:46:13] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 268 seconds)
[00:46:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[00:46:21] *** Parts: de-facto (~de-facto@user/de-facto) (Leaving ðŸ’¤)
[00:46:37] *** Quits: teut (~teut@182.64.49.252) (Quit: Connection closed)
[00:46:40] *** Joins: wyclif (~wyclif@user/wyclif)
[00:47:14] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:47:40] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[00:48:19] *** Joins: digilink (~digilink@user/digilink)
[00:48:24] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[00:49:18] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[00:49:48] *** Joins: neoclust (~neoclust@mageia/board-dev/neoclust)
[00:50:42] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:51:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:52:10] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:10] *** Quits: rendar (~rendar@user/rendar) ()
[00:52:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[00:52:36] *** Joins: audio (~audio@2603-8081-1800-00ad-f446-7ebf-416d-c2f1.res6.spectrum.com)
[00:52:59] *** Quits: jelmer (~jelmer@user/jelmer) (Ping timeout: 255 seconds)
[00:53:51] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:53:53] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[00:54:07] *** Joins: catdog (~quassel@birdperson.tuxzone.org)
[00:54:09] *** Quits: catdog (~quassel@birdperson.tuxzone.org) (Read error: Connection reset by peer)
[00:54:32] *** Joins: jelmer (~jelmer@user/jelmer)
[00:54:42] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[00:55:22] *** Joins: catdog (~quassel@birdperson.tuxzone.org)
[00:55:22] *** Quits: catdog (~quassel@birdperson.tuxzone.org) (Read error: Connection reset by peer)
[00:55:55] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[00:57:14] *** Joins: yaalon (~yaalon@200.68.175.91)
[00:57:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:57:19] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[00:57:28] *** Joins: catdog (~quassel@birdperson.tuxzone.org)
[00:57:40] *** Joins: wyclif (~wyclif@user/wyclif)
[00:58:01] *** Quits: magla (~gelignite@55d4e6f7.access.ecotel.net) (Quit: Stay safe!)
[01:00:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:02:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:03:11] *** Joins: wyclif (~wyclif@user/wyclif)
[01:03:27] *** Joins: shailangsa (~shailangs@host86-145-14-107.range86-145.btcentralplus.com)
[01:04:02] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:04:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:07:35] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[01:09:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[01:09:08] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 258 seconds)
[01:09:22] *** Quits: strudl (~strudl@user/strudl) (Quit: got milk?)
[01:09:31] *** Quits: yaalon (~yaalon@200.68.175.91) (Read error: Connection reset by peer)
[01:09:37] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:09:50] *** Joins: strudl (~strudl@user/strudl)
[01:09:56] *** Quits: Wafficus (~user@70.126.240.148) (Quit: ERC (IRC client for Emacs 27.2))
[01:10:21] *** Joins: pdjprogrammer (~pdjprogra@24.14.26.52)
[01:10:50] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[01:10:59] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 255 seconds)
[01:11:08] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:12:08] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[01:12:33] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[01:13:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:14:12] *** Joins: wyclif (~wyclif@user/wyclif)
[01:15:09] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:16:32] *** Joins: mN- (~Guest42@dyx0pyyy8b0zpz6j4zkvy-3.rev.dnainternet.fi)
[01:16:45] *** Joins: vodkra (~vodkra@user/vodkra)
[01:17:15] <mN-> hello python
[01:17:28] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[01:17:40] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[01:17:49] <SnoopJ> hi mN-
[01:18:31] *** Joins: lexandrop (~lex@user/lexandrop)
[01:18:43] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[01:19:01] *** Joins: wymiller (~wymiller@096-042-164-072.res.spectrum.com)
[01:19:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[01:19:36] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:19:43] *** Joins: wyclif (~wyclif@user/wyclif)
[01:20:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:21:47] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 255 seconds)
[01:21:56] *** Joins: glestrade (~glestrade@72.173.26.122)
[01:24:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[01:25:06] <glestrade> hey, folks - Iâ€™m running this line of code in context of my project on Google Colab
[01:25:10] <glestrade> epoch_loss_L1[epoch] = mean(train_loss_per_batch_L1)
[01:25:14] *** Joins: wyclif (~wyclif@user/wyclif)
[01:25:35] <glestrade> the error is: TypeError: can't convert type 'ndarray' to numerator/denominator
[01:25:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 255 seconds)
[01:25:53] <glestrade> it seemed to work on my local machine - whatâ€™s going on? any ideas?
[01:26:10] <SnoopJ> glestrade, looks like maybe something is trying to use an ndarray for a fraction? It would help to see the complete error report
[01:26:20] <SnoopJ> you can share it here if you need a paste site: https://bpaste.net/+python+pytb
[01:26:26] <glestrade> kk
[01:28:01] <glestrade> I *believe* train_loss_per_batch_L1 is an ndarray?
[01:28:06] <glestrade> Iâ€™ll paste it now
[01:28:09] <SnoopJ> probably
[01:28:26] *** Joins: menace (~someone@user/menace)
[01:29:07] *** Joins: yaalon (~yaalon@200.68.175.91)
[01:29:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:29:15] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[01:29:20] *** Quits: yaalon (~yaalon@200.68.175.91) (Remote host closed the connection)
[01:29:23] *** Quits: asix (~Anders@user/asix) (Ping timeout: 268 seconds)
[01:29:25] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:29:26] *** Quits: akk (~akk@97-123-109-214.albq.qwest.net) (Quit: +++)
[01:29:45] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[01:30:40] <glestrade> okay, I included code for extra context. Itâ€™s largely tensorflow stuff but last time I was there no one answered for hours, and I had already answered my own question
[01:30:42] <glestrade> https://bpa.st/TA2Q
[01:33:34] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[01:35:22] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[01:35:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:36:01] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[01:36:14] *** Joins: wyclif (~wyclif@user/wyclif)
[01:36:15] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 244 seconds)
[01:37:15] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[01:37:17] <bjs> glestrade: I'm confused, you use np.mean and mean in the code
[01:37:39] <bjs> is that one statistics.mean?  is that the one you meant to use?
[01:38:20] <SnoopJ> hmm, yea, that may be the problem
[01:40:10] *** Joins: Nanobot567 (~Nanobot56@2600:6c58:757f:e4b3:eca2:6205:aa68:29f9)
[01:40:21] <SnoopJ> glestrade, is there a maybe a file called statistics.py somewhere in this project that would be only on the local side? That's my only guess why this would work locally but fail this way remotely.
[01:40:26] <glestrade> hold onâ€¦ I need to check the import statements to tell
[01:40:44] *** Joins: dcaro_ (~dcaro@user/dcaro)
[01:40:48] <SnoopJ> I think you can get a more complete traceback with the magic `%tb verbose` after running that cell
[01:41:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:41:41] *** Quits: pdjprogrammer (~pdjprogra@24.14.26.52) (Quit: Leaving)
[01:41:47] *** Joins: wyclif (~wyclif@user/wyclif)
[01:41:59] <glestrade> hmm, yeah itâ€™s mean from the statistics package
[01:42:23] <SnoopJ> you're doing `from statistics import mean` somewhere?
[01:42:24] <glestrade> let me check again that it does in fact work locally
[01:42:29] <glestrade> yes
[01:42:32] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:42:32] <bjs> glestrade: are you sure you didn't mean np.mean ?  maybe locally you just execute a different path
[01:42:35] <SnoopJ> hmm
[01:42:56] <SnoopJ> yea especially since it's a notebook, it's easy to get the state spaghettified
[01:43:17] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 252 seconds)
[01:43:18] *** dcaro_ is now known as dcaro
[01:43:46] <glestrade> I probably didnâ€™t mean the numpy version; this project is largely pieced together from scraps of code as I self teach myself lol
[01:44:17] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[01:44:19] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[01:44:20] <glestrade> would np.mean need some extra data bashing to get it into the correct form?
[01:44:23] *** Joins: pnoud (~pnoud@user/pnoud)
[01:44:28] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:44:32] *** Quits: Nanobot567 (~Nanobot56@2600:6c58:757f:e4b3:eca2:6205:aa68:29f9) (Ping timeout: 255 seconds)
[01:44:50] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:954e:1159:52b2:9a4a)
[01:45:57] <SnoopJ> glestrade, not if you use numpy's mean(). The stdlib module is very much built around the built-in/stdlib types
[01:46:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[01:46:49] <SnoopJ> in particular, _exact_ratio() where this is failing takes only `int, Fraction, Decimal, float` as input types
[01:47:08] *** Quits: mN- (~Guest42@dyx0pyyy8b0zpz6j4zkvy-3.rev.dnainternet.fi) (Quit: Client closed)
[01:47:17] *** Joins: wyclif (~wyclif@user/wyclif)
[01:47:25] <SnoopJ> upshot: numpy's functions should be a lot faster anyway because the implied loops aren't in Python
[01:48:01] *** Joins: schumaml (~schumaml@ipservice-092-211-207-049.092.211.pools.vodafone-ip.de)
[01:48:08] <stealth_> are they planning on improve this in 5.11+ ?
[01:48:37] <SnoopJ> stealth_, ?
[01:49:07] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[01:49:14] <stealth_> SnoopJ, python plan to "improve speed"
[01:49:41] <SnoopJ> stealth_, I'm not sure what you're talking about, especially because 5.11+ looks nothing like Python's current version. Do you mean 3.11?
[01:49:44] <glestrade> well, should I just use np.mean? Iâ€™ve confirmed itâ€™s not failing locally..
[01:49:56] <SnoopJ> glestrade, yea that computes the arithmetic mean.
[01:50:01] <stealth_> SnoopJ, o sorry i mean 3.11
[01:50:28] <glestrade> ohh wait. it is failing locally. facepalm
[01:50:29] <SnoopJ> glestrade, you can also call arr.mean() for a given array
[01:50:35] <glestrade> pssh
[01:50:40] <glestrade> okay :)
[01:51:03] <glestrade> Iâ€™m confused, I swear it was working two days ago
[01:51:05] <SnoopJ> n.b. the default behavior averages over *all* axes, but you can pass the `axis` keyword argument to control which axis/axes are reduced
[01:51:11] <glestrade> but Iâ€™ll switch it to numpy
[01:51:15] <SnoopJ> surprise!
[01:51:53] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[01:52:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:52:47] *** Joins: wyclif (~wyclif@user/wyclif)
[01:52:49] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:53:59] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[01:54:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:55:21] <glestrade> SnoopJ: I had to look up your Latin haha
[01:55:31] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[01:55:33] <glestrade> okay hold on Iâ€™ll let you know what happens
[01:55:43] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:56:00] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[01:57:07] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[01:57:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:58:01] *** Joins: monkey_ (~user@190.104.116.134)
[01:58:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[02:00:54] <glestrade> okay! itâ€™s training and training
[02:00:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:00:59] <SnoopJ> woohoo :)
[02:01:08] <glestrade> oh wait execution failed
[02:01:19] <glestrade> of course
[02:03:26] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 255 seconds)
[02:03:48] *** Joins: wyclif (~wyclif@user/wyclif)
[02:03:58] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Quit: WeeChat 3.3-dev)
[02:04:11] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[02:04:14] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[02:04:37] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Client Quit)
[02:04:47] *** Quits: Akuli (~Akuli@82-203-164-218.bb.dnainternet.fi) (Quit: Leaving)
[02:04:58] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[02:05:29] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[02:05:39] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[02:05:41] *** Helenah_ is now known as Helenah
[02:05:52] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:954e:1159:52b2:9a4a) (Quit: Leaving)
[02:06:12] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:954e:1159:52b2:9a4a)
[02:06:20] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[02:06:33] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:07:04] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:07:52] *** Quits: cation (cation@user/cation) (Remote host closed the connection)
[02:08:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:08:44] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:08:51] *** Quits: schumaml (~schumaml@ipservice-092-211-207-049.092.211.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[02:09:19] *** Joins: wyclif (~wyclif@user/wyclif)
[02:09:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:10:24] *** Joins: schumaml (~schumaml@dslb-188-104-167-002.188.104.pools.vodafone-ip.de)
[02:12:51] *** Joins: northernsage (~dobox@138.197.11.208)
[02:14:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:14:49] *** Joins: wyclif (~wyclif@user/wyclif)
[02:14:56] <stealth_> any idea why cpython socket would be slower? i am getting extra 1k request/sec with a custom cffi wrap to socket
[02:15:11] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[02:15:15] *** Quits: stig124 (~stig124@89.44.9.25) (Quit: stig124)
[02:16:11] *** Joins: schumaml1 (~schumaml@dslb-092-074-005-058.092.074.pools.vodafone-ip.de)
[02:16:14] *** Joins: t3nj1n (~t3nj1n@108.5.82.237)
[02:16:58] *** Joins: dcaro_ (~dcaro@user/dcaro)
[02:17:45] *** Quits: schumaml (~schumaml@dslb-188-104-167-002.188.104.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[02:18:22] <glestrade> okay, well itâ€™s been executing for 4 mins now without failing, so itâ€™s probably fine
[02:18:36] <glestrade> will ping back again if thereâ€™s a huge mystery, but I should be fine
[02:18:52] <glestrade> will lurk to hear more about cpython
[02:18:53] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[02:19:15] <Lycurgus> i don't get pip constraint files
[02:19:15] <SnoopJ> stealth_, request/sec makes me wonder how you're measuring that, I would think data throughput is more relevant to compare the socket implementations
[02:19:26] <SnoopJ> Lycurgus, okay, what's got your stumped?
[02:19:29] <SnoopJ> you*
[02:19:55] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 246 seconds)
[02:19:55] *** dcaro_ is now known as dcaro
[02:19:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:20:07] <Lycurgus> it says they're identical to req files but when I use one as a constraint file it says no requirements
[02:20:20] *** Joins: wyclif (~wyclif@user/wyclif)
[02:20:45] <Lycurgus> and nothing says how a constraint file itself is different other than excluding some items
[02:21:22] <Lycurgus> not getting why pip install -c reg.txt
[02:21:30] <Lycurgus> doesn't work
[02:21:58] <SnoopJ> Lycurgus, what "it" says they are identical?
[02:22:28] <SnoopJ> (they're a subset)
[02:22:38] <SnoopJ> https://pip.pypa.io/en/stable/user_guide/#constraints-files
[02:23:18] <SnoopJ> anyway, if you share the complete error report of running that pip command, maybe we can tell you more
[02:23:29] <SnoopJ> and probably the contents of reg.txt too
[02:23:34] <Lycurgus> right the interwebs says identical but I implicitly said subset
[02:23:35] <stealth_> SnoopJ, a simple benchmark https://bpa.st/YP3A
[02:23:38] *** Quits: CodePoint (~BitShift@47.186.145.58) (Quit: Never gonna give you up, never gonna let you down...)
[02:23:44] *** Joins: schumaml2 (~schumaml@dslb-188-104-167-033.188.104.pools.vodafone-ip.de)
[02:23:53] <Lycurgus> ok I didn, i said a subset of the regs
[02:23:59] <Lycurgus> *reqs
[02:24:02] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[02:24:21] <Lycurgus> link looks useful, gimme a min
[02:24:50] <Lycurgus> ok yeah that's same one
[02:25:13] <Lycurgus> that specified "a subset" but doesn't say what that means
[02:25:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[02:25:24] *** Quits: schumaml1 (~schumaml@dslb-092-074-005-058.092.074.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[02:25:42] <Lycurgus> my requirements file has only ==
[02:25:50] *** Joins: wyclif (~wyclif@user/wyclif)
[02:26:44] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 268 seconds)
[02:26:48] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[02:27:02] <SnoopJ> stealth_, looks like an extra 45 usec per hit for the CPython version, which I would guess is because it isn't going straight into the C extension, i.e. `socket.socket` is implemented in Python, and you have to pay for those additional stack frames
[02:27:03] <Lycurgus> and just doing -r bogs down
[02:27:10] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[02:27:33] <Lycurgus> even though almost every reg is n.n.n
[02:27:40] <Lycurgus> *req
[02:28:00] <stealth_> SnoopJ, for std lib its using socket._socket, so i bypassed python class on top of that
[02:28:03] *** Joins: p-i- (~Ohmu@node-12lw.pool-118-173.dynamic.totinternet.net)
[02:28:06] <SnoopJ> Lycurgus, it points out that they have to have a name, can't be editable, and can't be extras. Like I said, if we could see the file, we might be able to tell you more. If it seems locked up, you might try turning up pip's verbosity to see what it's doing while it's "hung"
[02:28:13] <Lycurgus> "INFO: pip is looking at multiple versions of coloredlogs to determine which version is compatible with other requirements. This could take a while"
[02:28:33] <SnoopJ> stealth_, you're still paying for whatever you wrote in Python
[02:28:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[02:28:53] <SnoopJ> kinda hard to say if that's comparable to your CFFI implementation without seeing the source
[02:29:04] <Lycurgus> after just saying that a bunch of times it eventually does seem to go in the weeds
[02:29:06] <stealth_> SnoopJ, that would be same for both the cases, they both have what i wrote, pretty much exactly as it, other then cffi/cpython change
[02:29:45] <SnoopJ> stealth_, "pretty much" is a little less rigor than I'd expect if you're going to draw conclusions about microbenchmarks.
[02:30:00] *** Quits: schumaml2 (~schumaml@dslb-188-104-167-033.188.104.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[02:30:11] <Lycurgus> wow looks it just hangs
[02:30:17] <Lycurgus> *looks like
[02:30:27] <SnoopJ> Lycurgus, can we see the output, too?
[02:30:48] <stealth_> SnoopJ, both using the same test, but still its a significant change.
[02:30:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:30:55] *** Joins: dcaro_ (~dcaro@user/dcaro)
[02:31:03] *** Joins: schumaml2 (~schumaml@dslb-188-104-168-148.188.104.pools.vodafone-ip.de)
[02:31:21] *** Joins: wyclif (~wyclif@user/wyclif)
[02:31:26] <SnoopJ> stealth_, if you say so
[02:31:39] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[02:31:47] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 255 seconds)
[02:32:05] *** dcaro_ is now known as dcaro
[02:32:11] <SnoopJ> if you wanna know where that extra time is going, profile it with more granularity. Valgrind maybe?
[02:32:14] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 255 seconds)
[02:32:34] *** Joins: cation (cation@user/cation)
[02:32:34] <Lycurgus> https://bpa.st/NJGA
[02:33:22] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[02:33:26] <SnoopJ> Lycurgus, hmm, this might be one of the catastrophic cases for the new dependency resolver
[02:33:35] <Lycurgus> lol
[02:33:58] <Lycurgus> yeah i figured as much before landing here
[02:34:30] <Lycurgus> the documentation of how to use constraint file is also a beaut
[02:35:51] <Lycurgus> what I sort of expected was there was some way to call of the backtracking and just take what was in cache or whatever
[02:35:59] <Lycurgus> *call off
[02:36:17] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:36:23] <Lycurgus> which I thought the elusive constraint file spec might address
[02:36:27] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[02:36:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:36:51] *** Joins: wyclif (~wyclif@user/wyclif)
[02:37:05] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[02:37:05] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:37:07] <Lycurgus> can't people from having fun in FOSS igess
[02:37:25] <SnoopJ> wouldn't be able to do more than speculate since I only know part of the information
[02:37:37] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:37:38] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 255 seconds)
[02:38:05] <Lycurgus> so what exactly is the difference between a reg and a constraint file?
[02:38:16] <Lycurgus> or does anybody know exactly?
[02:38:31] <Lycurgus> "a subset" is vague
[02:38:46] *** Gustavo6046_ is now known as Gustavo6046
[02:38:56] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:39:01] <Lycurgus> and the subset it seems to be is basically what I have in the req file
[02:39:06] <SnoopJ> Â«Constraints files ... syntax and contents is a subset of Requirements Files, with several kinds of syntax not allowed: constraints must have a name, they cannot be editable, and they cannot specify extras. In terms of semantics, there is one key difference: Including a package in a constraints file does not trigger installation of the package.Â»
[02:39:19] <Lycurgus> if I removed all the n.n would that do it
[02:39:30] <Lycurgus> (so that there were only n.n.n)
[02:39:31] <SnoopJ> the last bit is I think how you "call off" the backtracking here, by shrinking the initial search space?
[02:39:57] <Lycurgus> yeah none of mine have any of that
[02:40:34] <SnoopJ> right, this doesn't sound like a problem with the file except inasmuch as it's struggling to find a solution
[02:40:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:40:56] <Lycurgus> well why doesn't it accept the -c syntax?
[02:40:57] <SnoopJ> which might mean that it's too weakly constrained? I'm not intimately familiar
[02:41:10] *** Quits: menace (~someone@user/menace) (Quit: menace)
[02:41:13] <SnoopJ> Lycurgus, this is the first you've said about this. Mind cluing me in?
[02:41:15] <Lycurgus> in n.m.p is p an extra?
[02:41:20] <SnoopJ> no
[02:41:34] *** Joins: pyzozord (pyzozord@user/pyzozord)
[02:41:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:41:39] <Lycurgus> no I said at beginning
[02:42:17] <SnoopJ> I'm not sure what n.m.p is in a requirement specifier, though
[02:42:23] *** Joins: wyclif (~wyclif@user/wyclif)
[02:42:26] <Lycurgus> since the thing you just pasted from the documentation characterizes by req file, why I can't I use it as a contraint file?
[02:42:37] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[02:42:39] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:41c:4e99:cd72:c414)
[02:43:01] <SnoopJ> Lycurgus, is there some reason you are ignoring my repeated requests for us to *see* this file?
[02:43:02] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[02:43:04] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[02:43:24] <SnoopJ> It's clearly a hard enough problem with all of the information at your disposal, why give us even less?
[02:43:27] <Lycurgus> just a min
[02:43:29] <pyzozord> Hello, I'm pretty sure, but I'd like to still ask: does cpython interpreter operate on bytecode? If yes, where could I learn more about about cpython's bytcode syntax?
[02:43:52] <SnoopJ> pyzozord, 1) yes 2) what does "bytecode syntax" mean to you?
[02:44:14] <bjs> pyzozord: yes it does, and the `dis` library (and its documentation) is a good place to start https://docs.python.org/3/library/dis.html
[02:44:39] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[02:44:57] <pyzozord> bjs: that's perfect! thanks!
[02:44:58] <Lycurgus> ok I solved the syntax problem
[02:44:58] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:45:33] <stealth_> pyzozord, https://docs.python.org/3/library/marshal.html
[02:45:53] <Lycurgus> (by doing both -r and -c with the same file)
[02:46:25] <pyzozord> SnoopJ: I wasn't really sure to be honest, but what bjs linked is perfect, so I guess I meant the dissasemly of the bytecode
[02:46:48] <SnoopJ> pyzozord, then yes, the `dis` module is what you want.
[02:47:08] <pyzozord> sounds good, thanks!
[02:47:09] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[02:47:16] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:47:39] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[02:48:19] <Lycurgus> https://bpa.st/FBOA
[02:48:33] <Lycurgus> that's it in its entirety
[02:49:16] <Lycurgus> so there's 220 reqs
[02:49:17] *** Quits: NeoCore (~neocore@195.200.221.164) (Quit: Leaving)
[02:49:48] <SnoopJ> Lycurgus, what's up with the (END) at the bottom?
[02:49:53] <stealth_> ^
[02:49:58] <Lycurgus> that's just from less
[02:50:03] <SnoopJ> is it part of the file you give pip?
[02:50:11] <Lycurgus> and to show you it's the end of the file
[02:50:16] <Lycurgus> ofc not
[02:50:34] <SnoopJ> Lycurgus, okay. L104 is likely the problem, then. Looks like a missing newline.
[02:50:54] *** Joins: fcjsx (~fcjsx@2800:a4:830:9700:7b43:2d6:2eee:ddda)
[02:50:56] *** Quits: fcjsx (~fcjsx@2800:a4:830:9700:7b43:2d6:2eee:ddda) (Remote host closed the connection)
[02:51:43] *** Joins: noobython (~noobython@cpe-67-248-190-48.nycap.res.rr.com)
[02:51:53] <Lycurgus> that's just from the copy/paste from the less screens
[02:52:09] <Lycurgus> there's no break at l 104 or anywhere else in the file
[02:52:17] *** Quits: Xaroth (~Xaroth@022-139-128-083.dynamic.caiway.nl) (Ping timeout: 240 seconds)
[02:52:20] <SnoopJ> can we see the actual file?
[02:52:28] <SnoopJ> and/or the error
[02:52:37] <Lycurgus> i didn see a upload file control
[02:52:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:52:43] <SnoopJ> nothing else looks amiss with this file
[02:53:15] <SnoopJ> Lycurgus, then I'll to trust that nothing else went wrong in the copying step. How about the error report?
[02:53:24] *** Joins: wyclif (~wyclif@user/wyclif)
[02:53:32] <Lycurgus> well there's no error now
[02:53:43] <SnoopJ> I'm having trouble keeping track of the problem you're inquiring about.
[02:53:48] <Lycurgus> after I figured out how to use the constraint file
[02:53:52] <Lycurgus> it's just taking forever
[02:57:22] <Lycurgus> is the pastbin in the topic supposed to have an upload file control?
[02:58:07] <SnoopJ> no, but if you don't have a syntax error anymore, there's no mystery anymore
[02:58:30] <SnoopJ> no syntax mystery, anyway
[02:58:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[02:58:40] <Lycurgus> anyway pip install -r req.txt -c req.txt works
[02:58:54] *** Joins: wyclif (~wyclif@user/wyclif)
[02:59:06] <Lycurgus> (and confirms that my req file is acceptable as a constraint file)
[02:59:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:00:19] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 255 seconds)
[03:02:59] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:03:32] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:03:32] *** Joins: pnoud (~pnoud@user/pnoud)
[03:03:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:03:51] *** Joins: Nikopol (nikopol@user/astrorigin)
[03:03:55] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[03:04:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 255 seconds)
[03:04:24] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:48] <Lycurgus> i thought maybe breaking it up into 3 parts would help but looks like it's looking at the whole local whell or whatever
[03:05:03] <Lycurgus> instead of the submitted reqs
[03:05:08] *** Gustavo6046_ is now known as Gustavo6046
[03:05:30] <Lycurgus> im guessin there will be more work on this in the next pip
[03:06:20] <Lycurgus> rolling back to before the backtracking version would be a fix
[03:06:52] <Lycurgus> not a good look for the pythong
[03:06:57] <SnoopJ> yea, definitely still being worked on
[03:07:22] <Lycurgus> well thanks for your help
[03:07:26] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[03:08:43] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[03:08:47] *** Joins: spirit (~spirit@user/spirit)
[03:09:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[03:09:56] *** Joins: wyclif (~wyclif@user/wyclif)
[03:11:35] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[03:11:36] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[03:11:42] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[03:12:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:13:00] *** Quits: Roey (~Roey@user/Roey) (Remote host closed the connection)
[03:13:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[03:14:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[03:14:56] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[03:15:08] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[03:15:15] *** Joins: pnoud (~pnoud@user/pnoud)
[03:15:27] *** Joins: wyclif (~wyclif@user/wyclif)
[03:16:00] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:19:57] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Client Quit)
[03:20:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[03:20:57] *** Joins: wyclif (~wyclif@user/wyclif)
[03:23:33] *** Joins: jinsun (~quassel@user/jinsun)
[03:25:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:26:14] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 255 seconds)
[03:26:27] *** Joins: wyclif (~wyclif@user/wyclif)
[03:26:52] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1009) (Read error: Connection reset by peer)
[03:27:16] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1009)
[03:28:04] *** Quits: FLHerne (flh@flherne.uk) (Excess Flood)
[03:28:19] *** Joins: FLHerne (flh@flherne.uk)
[03:28:30] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 246 seconds)
[03:28:43] *** Quits: acid (~acid@user/acid) (Read error: Connection reset by peer)
[03:29:01] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[03:29:05] *** Quits: xernaron_ (~xernaron@box.xernaron.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[03:29:13] *** Joins: brabrax (~brabrax@user/brabrax)
[03:29:19] *** Joins: xernaron (~xernaron@box.xernaron.ch)
[03:29:20] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[03:29:43] <Lycurgus> backing up to pip 20.2.4 was a complete fix
[03:30:07] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[03:30:19] <Lycurgus> took maybe 3 or 4 minutes
[03:30:36] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 246 seconds)
[03:30:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[03:31:00] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:31:14] <Lycurgus> need a kill switch for that
[03:31:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[03:31:49] *** Joins: OPK (~OPK@user/opk)
[03:31:57] *** Joins: wyclif (~wyclif@user/wyclif)
[03:32:06] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:32:53] *** Gustavo6046_ is now known as Gustavo6046
[03:34:23] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 252 seconds)
[03:36:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:36:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[03:37:09] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:954e:1159:52b2:9a4a) (Quit: Leaving)
[03:37:28] *** Joins: wyclif (~wyclif@user/wyclif)
[03:37:33] *** Joins: cheater (~Username@user/cheater)
[03:37:55] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:38:55] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Quit: Teleporting ...)
[03:42:27] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[03:42:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[03:42:58] *** Joins: wyclif (~wyclif@user/wyclif)
[03:44:03] *** Quits: mkoskar (~mkoskar@user/mkoskar) (Quit: mkoskar)
[03:44:14] *** Quits: wereii (~wereii@2a03:3b40:fe:4f::1) (Quit: ZNC - https://znc.in)
[03:45:10] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:47:05] *** Joins: tims (~tims@193-82-234-90.tpgi.com.au)
[03:47:05] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[03:47:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[03:48:29] *** Joins: wyclif (~wyclif@user/wyclif)
[03:49:54] *** Joins: cjb (~cjb@user/cjb)
[03:50:11] *** Quits: cedric (~cedric@2a01:cb11:867:c200:2d0c:35d4:bc18:a14a) (Quit: Konversation terminated!)
[03:51:24] *** Joins: jdmark (~jdmark@67.8.137.130)
[03:53:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[03:53:59] *** Joins: wyclif (~wyclif@user/wyclif)
[03:54:19] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 255 seconds)
[03:55:23] *** Joins: wereii (~wereii@2a03:3b40:fe:4f::1)
[03:56:15] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[03:56:37] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[03:57:50] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[03:57:57] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[03:59:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:59:30] *** Joins: wyclif (~wyclif@user/wyclif)
[03:59:40] *** Joins: beams (~manjaro-u@2a02:587:5c2f:1400:782d:663b:e2d2:de24)
[04:00:06] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Remote host closed the connection)
[04:00:36] *** Joins: tonberry (~tonberry@user/d00gy)
[04:01:01] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[04:01:08] *** Joins: akaWolf (~akaWolf@akawolf.org)
[04:01:09] <beams> hello there
[04:01:20] *** Quits: zbr (~zbr@h.sbarnea.com) (Ping timeout: 255 seconds)
[04:01:31] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[04:01:50] *** tonberry is now known as d00gy
[04:04:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:05:02] *** Joins: wyclif (~wyclif@user/wyclif)
[04:05:06] *** Quits: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) (Quit: Leaving.)
[04:08:50] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:09:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[04:10:20] <nedbat> beams: hey
[04:10:43] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[04:10:49] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 258 seconds)
[04:10:50] *** Gustavo6046_ is now known as Gustavo6046
[04:12:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:13:39] *** Joins: zbr (~zbr@h.sbarnea.com)
[04:17:30] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[04:17:43] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 268 seconds)
[04:17:49] *** Quits: wereii (~wereii@2a03:3b40:fe:4f::1) (Quit: ZNC - https://znc.in)
[04:18:23] *** Joins: wereii (~wereii@2a03:3b40:fe:4f::1)
[04:19:20] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[04:21:07] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[04:21:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:22:13] *** Quits: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10) (Ping timeout: 255 seconds)
[04:24:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:25:02] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:25:54] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 246 seconds)
[04:27:48] *** Joins: wyclif (~wyclif@user/wyclif)
[04:28:12] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:28:58] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:29:37] *** Joins: Wulf (~Wulf@user/wulf)
[04:29:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[04:30:05] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[04:30:08] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:32] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:31:46] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[04:32:19] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[04:33:29] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[04:33:55] *** Quits: wymiller (~wymiller@096-042-164-072.res.spectrum.com) (Quit: wymiller)
[04:34:05] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) ()
[04:34:08] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[04:34:09] *** Joins: wymiller (~wymiller@096-042-164-072.res.spectrum.com)
[04:34:26] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[04:34:33] *** Joins: asix (~Anders@user/asix)
[04:36:41] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:36:50] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:36:55] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:954e:1159:52b2:9a4a)
[04:36:57] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:37:14] *** Quits: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net) (Remote host closed the connection)
[04:38:16] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:40:35] <mat001> hello, testing
[04:40:39] *** Joins: sheep (~lucius@metis.canned-death.us)
[04:40:58] <grym> no testing here! :D
[04:41:01] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[04:41:06] <sheep> mat001: you are in #python now. the mode line just shows #python-unregistered because #python will forward there if you're not registered
[04:41:21] <mat001> haha. got into libera, phew
[04:41:44] <mat001> thx
[04:41:57] *** Parts: sheep (~lucius@metis.canned-death.us) (THIS IS STUPID)
[04:44:39] <glestrade> In case anyone was still curious what happened with that ML project of mine, I crashed my colab instance!
[04:45:21] <glestrade> Iâ€™m ordering parts so that I can do it at home
[04:50:01] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:51:22] <yolk> homelab, heck yeah
[04:52:24] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[04:52:25] <grym> good luck finding a GPU, but ..
[04:54:46] *** Joins: GrayArea (~user@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[04:55:39] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[04:56:05] <glestrade> Oh I have one
[04:56:19] <glestrade> Iâ€™m just wondering at this point if I need extra ram
[04:56:33] <glestrade> this is getting expensive fast
[04:56:43] <grym> how much do you have?
[04:56:46] <grym> (ram)
[04:56:54] <grym> and what's your GPU's compute level
[04:57:10] <glestrade> I think itâ€™s just 8GB iirc
[04:57:21] <glestrade> and I donâ€™t recall the GPU compute level
[04:57:25] <grym> yeah, you'll appreciate having more
[04:57:38] <glestrade> but itâ€™s nvidia 1070 or 1080
[04:57:40] <grym> glestrade: https://developer.nvidia.com/cuda-gpus  check here
[04:58:03] *** Joins: zebrag (~chris@user/zebrag)
[04:58:15] <grym> 1070/80 will be fine though
[04:58:38] <glestrade> even given I just nuked a colab instance
[04:58:43] <glestrade> how good are they?
[04:58:47] <grym> they're fine.
[04:58:57] <grym> you'll have a low-ish batch size, it'll take a bit
[04:59:01] <grym> but it'll get the job done
[04:59:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[04:59:28] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[05:01:30] <glestrade> is the compute capability a logarithmic or a linear measure
[05:01:35] <squirrel> why is this statement necessary? https://github.com/python-trio/trio/blob/3f4e1a23e567825926b225f87c64db56d95f96fb/trio/_core/_multierror.py#L158
[05:01:45] *** __jmcantrell__ is now known as jmcantrell
[05:01:51] <squirrel> it's deleting local variables but it's the last statement in a method
[05:01:51] *** Joins: gggp (~gggp@60.10.194.43)
[05:02:18] <grym> glestrade: i don't know how nvidia determines that decimal number
[05:02:38] <glestrade> gotta love it xD
[05:02:50] <glestrade> well it says 6.1
[05:02:55] <grym> yeah, you're fine
[05:03:20] *** Joins: jazzy (~jaziz@2600:380:c07e:8a82:ade3:efdb:74c6:3aa8)
[05:05:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[05:05:50] *** Joins: wyclif (~wyclif@user/wyclif)
[05:07:30] *** audio is now known as audiocat
[05:09:43] *** Joins: lothar_m (~lothar_m@89-181-7-211.net.novis.pt)
[05:10:45] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[05:10:55] *** Quits: GrayArea (~user@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Remote host closed the connection)
[05:13:30] *** Quits: ano (~weechat@user/ano) (Quit: ano)
[05:13:42] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[05:14:10] *** Joins: ano (~weechat@user/ano)
[05:15:03] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[05:19:08] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:21:43] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[05:22:14] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[05:22:26] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:23:13] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Client Quit)
[05:24:39] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:26:23] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[05:28:38] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[05:29:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:12] *** Joins: pnoud (~pnoud@user/pnoud)
[05:33:18] *** Joins: HaMsTeRs (~mx@49.130.4.100)
[05:34:15] *** Joins: jpe__ (~sharpergu@2001:16b8:5c2c:7700:7001:aa44:10dd:d1b9)
[05:35:26] *** Quits: Jefren (~Jefren@70.35.66.119) (Ping timeout: 268 seconds)
[05:36:15] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:36:41] *** Quits: sharperguy_ (~sharpergu@2001:16b8:5c9b:2e00:5387:8d4c:6325:88cb) (Ping timeout: 240 seconds)
[05:36:49] *** Joins: Jefren (~Jefren@70.35.66.110)
[05:37:13] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[05:37:32] *** Joins: jstein_ (~jstein@gentoo/developer/jstein)
[05:38:44] *** Quits: HaMsTeRs (~mx@49.130.4.100) (Quit: Konversation terminated!)
[05:39:40] *** Joins: Elon_Satoshi (~elonsatos@46.102.153.243)
[05:40:53] *** Quits: Jefren (~Jefren@70.35.66.110) (Client Quit)
[05:41:18] *** Joins: Jefren (~Jefren@70.35.66.110)
[05:41:34] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 265 seconds)
[05:42:48] *** Quits: glestrade (~glestrade@72.173.26.122) (Quit: glestrade)
[05:45:55] *** Pixi_ is now known as Pixi
[05:46:02] *** Joins: montybanksnyc (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net)
[05:48:34] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 258 seconds)
[05:55:35] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[05:55:56] *** Joins: dre (~dre@2001:8003:c932:c301:e078:5df6:bd54:b22a)
[05:56:51] *** Quits: lothar_m (~lothar_m@89-181-7-211.net.novis.pt) (Quit: WeeChat 3.2-rc1)
[05:57:04] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Remote host closed the connection)
[05:57:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[05:57:58] *** Joins: vlm (~vlm@user/vlm)
[05:58:51] *** Joins: califax- (~califax@user/califx)
[06:00:02] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:00:20] *** Quits: molyvius (~molyvius@user/molyvius) (Read error: Connection reset by peer)
[06:00:38] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[06:01:13] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 258 seconds)
[06:01:14] *** brabrax_ is now known as brabrax
[06:01:34] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[06:01:47] *** Quits: drmessano (sid104353@user/drmessano) (Quit: Updating details, brb)
[06:01:48] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[06:01:49] *** califax- is now known as califax
[06:01:59] *** Joins: drmessano (sid104353@user/drmessano)
[06:02:35] *** Joins: Roey (~Roey@user/Roey)
[06:03:11] *** Quits: drmessano (sid104353@user/drmessano) (Client Quit)
[06:03:17] *** Joins: pnoud (~pnoud@user/pnoud)
[06:03:24] *** Joins: drmessano (sid104353@user/drmessano)
[06:03:43] *** Joins: gggpkm (~gggpkm@125.33.88.38)
[06:03:48] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[06:04:14] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:04:52] *** Joins: derelict (~derelict@user/derelict)
[06:05:33] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[06:06:25] *** Joins: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net)
[06:07:07] *** Joins: pete443 (~pete@user/pete443)
[06:07:39] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 252 seconds)
[06:08:25] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[06:08:25] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[06:08:30] *** Quits: jstein_ (~jstein@gentoo/developer/jstein) (Quit: quit)
[06:08:41] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:09:30] *** Quits: emerent (~quassel@p200300cd57058c9dba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[06:10:00] *** Joins: emerent (~quassel@p200300cd57058c4cba27ebfffed28a59.dip0.t-ipconnect.de)
[06:12:11] *** Quits: taru9 (~realTaru9@raincheck.tk) (Changing host)
[06:12:11] *** Joins: taru9 (~realTaru9@user/taru9)
[06:12:12] *** Joins: djapo (~archangel@user/djapo)
[06:12:46] *** Joins: mefistof1les (~mefistofe@user/mefistofeles)
[06:13:08] *** Quits: taru9 (~realTaru9@user/taru9) (Quit: ZNC - https://znc.in)
[06:13:27] *** Joins: taru9 (~realTaru9@user/taru9)
[06:15:30] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 268 seconds)
[06:19:49] *** Quits: shailangsa (~shailangs@host86-145-14-107.range86-145.btcentralplus.com) (Ping timeout: 268 seconds)
[06:20:02] *** Quits: taru9 (~realTaru9@user/taru9) (Quit: %xD%)
[06:20:07] *** Joins: HaMsTeRs (~mx@49.130.4.100)
[06:20:07] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 255 seconds)
[06:20:21] *** Joins: taru9 (~realTaru9@user/taru9)
[06:21:55] *** Quits: beams (~manjaro-u@2a02:587:5c2f:1400:782d:663b:e2d2:de24) (Ping timeout: 255 seconds)
[06:22:29] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[06:23:21] *** Joins: blackleitus (~blackleit@189.195.193.124)
[06:23:34] <blackleitus> how do I write the following formula? https://www.calculator.net/percent-calculator.html  `Percentage Difference Formula
[06:23:35] <blackleitus> `
[06:24:31] <dre> lol sup blackleitus
[06:24:40] *** mefistof1les is now known as mefistofeles
[06:25:03] <blackleitus> hey guys. how do I write pipe math symbol in python for math operations?
[06:26:14] <blackleitus> |(a-b)|/(a+b)/2*100 , is this pipe a python syntax?
[06:26:37] <mefistofeles> blackleitus: oh, that's called absoute value, and abs() should work in python
[06:26:43] <mefistofeles> maybe you need to import it from the math library
[06:26:45] <dre> ^
[06:26:56] <dre> abs(a-b) / (a+b) / 200
[06:28:41] <blackleitus> let me chck out. since I was trying to map the formula exactly as it is  , but I got infected from covid +dre that's why I wasnt active (still with covid)
[06:29:08] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:954e:1159:52b2:9a4a) (Quit: Leaving)
[06:29:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:cc77:d0dc:1b58:8398)
[06:30:39] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[06:34:47] *** Quits: HaMsTeRs (~mx@49.130.4.100) (Ping timeout: 255 seconds)
[06:36:01] *** Joins: HaMsTeRs (~mx@14-0-227-158.static.pccw-hkt.com)
[06:36:57] *** Joins: shailangsa (~shailangs@host86-186-191-14.range86-186.btcentralplus.com)
[06:37:43] *** Quits: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net) (Quit: glestrade)
[06:42:10] *** Quits: Roey (~Roey@user/Roey) (Ping timeout: 255 seconds)
[06:43:27] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[06:43:32] *** Joins: pnoud (~pnoud@user/pnoud)
[06:43:34] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[06:44:09] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[06:44:22] *** Joins: Roey (~Roey@user/Roey)
[06:45:06] *** Quits: Jefren (~Jefren@70.35.66.110) (Ping timeout: 268 seconds)
[06:45:10] *** FinnElija is now known as Guest3119
[06:45:10] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:45:10] *** Quits: Guest3119 (~finn_elij@user/finn-elija/x-0085643) (Killed (strontium.libera.chat (Nickname regained by services)))
[06:45:10] *** finn_elija is now known as FinnElija
[06:45:27] *** Jigsy` is now known as Jigsy
[06:46:37] *** Joins: Jefren (~Jefren@70.35.66.184)
[06:46:56] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[06:46:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[06:47:12] *** Joins: cheater (~Username@user/cheater)
[06:48:17] *** Quits: audiocat (~audio@2603-8081-1800-00ad-f446-7ebf-416d-c2f1.res6.spectrum.com) (Ping timeout: 255 seconds)
[06:48:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[06:49:22] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:52:17] *** Joins: audiocat (~audio@2603-8081-1800-00ad-633b-6ddb-64ec-e38d.res6.spectrum.com)
[06:53:01] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 245 seconds)
[06:54:35] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[06:54:58] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:55:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:57:34] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[07:01:30] <Elon_Satoshi> Is there a channel for python beginners?
[07:01:50] <mefistofeles> Elon_Satoshi: you are on it
[07:02:04] <mefistofeles> this one doesn't exclude beginners, afaik
[07:02:17] <Elon_Satoshi> Oh, ok. I've been reading Automate The Boring Stuff with Python!
[07:02:28] <Elon_Satoshi> I'm on the chapter about lists
[07:02:46] <Elon_Satoshi> The Mu editor is pretty neat
[07:02:59] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[07:03:28] *** Joins: c10l (~c10l@89.34.167.207)
[07:03:56] <mefistofeles> Elon_Satoshi: ah nice, I like that tutorial
[07:06:09] *** Joins: c10l7 (~c10l@89.34.167.207)
[07:07:36] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[07:07:47] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[07:07:53] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[07:07:55] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 258 seconds)
[07:07:55] *** c10l7 is now known as c10l
[07:08:31] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[07:09:46] *** Jigsy` is now known as Jigsy
[07:09:50] *** Quits: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net) (Ping timeout: 258 seconds)
[07:12:50] *** Joins: i0e (~is0ke3@user/is0ke3)
[07:14:07] *** Quits: midori (~midori@118.179.37.55) (Ping timeout: 255 seconds)
[07:20:35] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) ()
[07:22:26] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Read error: Connection reset by peer)
[07:22:29] *** Quits: gggpkm (~gggpkm@125.33.88.38) (Ping timeout: 255 seconds)
[07:27:37] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[07:28:41] *** Quits: lacrymology (~lacrymolo@static-95-102-25-46.ipcom.comunitel.net) (Ping timeout: 252 seconds)
[07:29:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[07:30:50] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:32:34] *** Joins: vicfred (~vicfred@user/vicfred)
[07:38:05] *** Roey is now known as cammmmy
[07:39:31] *** cammmmy is now known as Roey
[07:40:36] *** Joins: lacrymology (~lacrymolo@static-5-62-25-46.ipcom.comunitel.net)
[07:47:51] <dre> automate the boring stuff is a great book
[07:47:57] <dre> good place to get started
[07:52:17] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[07:55:04] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 258 seconds)
[07:56:51] *** Joins: syb0rg (~syb0rg@184.170.242.152)
[07:56:52] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[07:56:52] *** Parts: syb0rg (~syb0rg@184.170.242.152) ()
[07:57:16] *** Joins: syb0rg (~syb0rg@184.170.242.152)
[07:59:00] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[08:00:17] *** Joins: pnoud (~pnoud@user/pnoud)
[08:00:30] *** Quits: kor1 (~kor1@user/kor1) (Quit: Leaving.)
[08:02:15] *** Joins: ZenixOwler (~zenix@118.69.128.37)
[08:02:37] *** Joins: heco (~redrum@user/redrum88)
[08:02:45] <ZenixOwler> is there a list of objects and classes which pickle cannot serialize ? as far as i know it cannot serialize modules now but having a full list to be aware of is better if it's available
[08:03:26] *** Joins: justyb11 (~justyb@2601:483:500:3ea:6882:c320:2cbf:287b)
[08:08:10] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f109-9e55-0d51-bd0d.res6.spectrum.com)
[08:08:21] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[08:14:44] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[08:16:40] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[08:17:30] <Wulf> ZenixOwler: not aware of any. You shouldn't use pickle anyway.
[08:17:38] <ZenixOwler> Wulf: but why
[08:17:54] <ZenixOwler> it's kinda cool how you can serialize an object or class and send it over to someone tho
[08:18:01] <ZenixOwler> not sure what is the practical usage but it is still cool
[08:19:45] *** Quits: HaMsTeRs (~mx@14-0-227-158.static.pccw-hkt.com) (Quit: Konversation terminated!)
[08:21:37] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:22:03] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[08:22:42] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:23:25] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[08:24:52] *** Quits: montybanksnyc (~montybank@pool-71-127-199-18.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[08:25:40] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[08:25:49] <BrenBarn> pickle will try to serialize a lot of things but how well it works with random classes can vary
[08:26:41] <BrenBarn> like, it's not actually serializing the class definition, it basically just stores info on where to look up the class
[08:27:14] <BrenBarn> so if you write a class and pickle it (or an instance of it), someone else can't unpickle it unless they have your code that defines the class
[08:28:02] <ZenixOwler> oh..
[08:29:41] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[08:29:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[08:29:47] <ZenixOwler> well what is the point of pickle anyway
[08:29:54] <ZenixOwler> i mean the "pickle" module
[08:30:24] *** Joins: wyclif (~wyclif@user/wyclif)
[08:32:55] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:34:47] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b8a8-a0e0-33b3-f041.res6.spectrum.com) (Read error: Connection reset by peer)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:48] <AhmedAmerican> `filt = list(map(lambda x: x.insert(2, 'N/A') if len(x) == 5, mylistoflists))`
[08:37:57] <AhmedAmerican> how to apply that correctly ?
[08:38:14] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[08:39:55] <jinsun> ZenixOwler: it is used in some special cases, like the shelve module and multiprocessing in standard libary, but it is not good for storing data permanently
[08:40:13] *** Joins: derelict (~derelict@user/derelict)
[08:40:39] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[08:40:56] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 244 seconds)
[08:41:39] *** Quits: LiftLeft (~LiftLeft@154.21.23.108) (Ping timeout: 268 seconds)
[08:41:39] *** Joins: pnoud (~pnoud@user/pnoud)
[08:41:46] *** Joins: spithash (~spithash@user/spithash)
[08:42:18] <AhmedAmerican> how to tell lambda to insert `N/A` into index 2 if len of list equal to 5 ?
[08:43:31] <ZenixOwler> AhmedAmerican: why are you wrapping map and list around lambda ? it is a function, it is only valuable once being called
[08:43:41] <ZenixOwler> jinsun: yea fair enugh
[08:44:03] *** Joins: sandeepk (~sandeepk@223.130.30.175)
[08:44:49] <jinsun> AhmedAmerican: why are you using a map instead of a for loop with if statement? the result of list.insert is None, so I see no point of storing it in filt
[08:45:06] <AhmedAmerican> jinsun: got it. thank you.
[08:45:11] <AhmedAmerican> ZenixOwler: just noticed it now.
[08:45:17] <ZenixOwler> ok :P
[08:47:12] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[08:47:12] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[08:48:26] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 268 seconds)
[08:48:28] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[08:48:44] <BrenBarn> yeah pickle has some uses in short-term data transfer but it's not really a good format for persisting data
[08:50:46] <ZenixOwler> well of course tho, but frankly it can't even transfer a serialized object or classes without having the classes being already initialized on the other end
[08:52:12] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[08:52:56] *** Quits: d00gy (~tonberry@user/d00gy) (Quit: WeeChat 3.0)
[08:53:54] <ZenixOwler> oh, "dill" seems to do that trick
[08:54:19] <AhmedAmerican> within `print(x)` how to flat the list https://bpa.st/VXDA
[08:54:46] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[08:56:24] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[08:57:48] *** Quits: justyb11 (~justyb@2601:483:500:3ea:6882:c320:2cbf:287b) (Quit: Leaving)
[08:58:28] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:59:57] *** Joins: pnoud (~pnoud@user/pnoud)
[09:02:38] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[09:03:34] *** Joins: LiftLeft (~LiftLeft@154.21.28.7)
[09:03:59] <AhmedAmerican> something than `print([*x[:3], *x[3], *x[4:]])`
[09:04:07] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Quit: Konversation terminated!)
[09:05:05] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[09:10:57] <AhmedAmerican> Hmm, `from more_itertools import collapse` flatten it :p
[09:11:07] *** Joins: anandprabhu (anandprabh@gateway/vpn/airvpn/anandprabhu)
[09:16:13] *** Joins: pnoud (~pnoud@user/pnoud)
[09:20:09] *** Quits: LiftLeft (~LiftLeft@154.21.28.7) (Ping timeout: 252 seconds)
[09:21:29] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[09:22:31] *** Joins: Quacc (~Quacc@user/quacc)
[09:22:51] *** Parts: Quacc (~Quacc@user/quacc) ()
[09:23:59] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f109-9e55-0d51-bd0d.res6.spectrum.com) (Ping timeout: 255 seconds)
[09:26:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:26:40] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-7828-89c1-5bc4-4b6a.res6.spectrum.com)
[09:30:03] *** Quits: cheater (~Username@user/cheater) (Remote host closed the connection)
[09:32:21] *** Joins: pnoud (~pnoud@user/pnoud)
[09:32:45] *** Quits: janemba (~janemba@94.204.254.193) (Ping timeout: 256 seconds)
[09:33:37] *** Joins: stranac (~stranac@195.29.239.126)
[09:37:25] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[09:37:50] *** Quits: BillyZane (~BillyZane@91.196.220.173) (Remote host closed the connection)
[09:38:03] *** Joins: BillyZane (~BillyZane@91.196.220.173)
[09:39:33] *** Quits: phax (~phax@user/phax) (Quit: Leaving)
[09:39:38] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[09:39:46] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Remote host closed the connection)
[09:40:36] *** Parts: taru9 (~realTaru9@user/taru9) (WeeChat 3.1)
[09:40:41] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[09:41:34] *** Joins: stranac (~stranac@195.29.239.126)
[09:43:06] *** Joins: taru9 (~realTaru9@user/taru9)
[09:43:42] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[09:44:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[09:45:39] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[09:46:30] *** Joins: lethu (~lethu@196.117.123.39)
[09:46:44] *** Joins: wyclif (~wyclif@user/wyclif)
[09:47:37] *** Joins: Vonter_ (~Vonter@user/vonter)
[09:47:42] *** Quits: lethu (~lethu@196.117.123.39) (Client Quit)
[09:47:52] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[09:48:15] *** Quits: Jefren (~Jefren@70.35.66.184) (Ping timeout: 268 seconds)
[09:48:46] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[09:48:52] *** Joins: pnoud (~pnoud@user/pnoud)
[09:50:07] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[09:51:15] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Client Quit)
[09:53:52] *** Quits: sandeepk (~sandeepk@223.130.30.175) (Ping timeout: 255 seconds)
[09:53:53] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[09:56:29] *** Joins: Jefren (~Jefren@70.35.66.95)
[09:58:42] *** Joins: Jefren1 (~Jefren@70.35.66.157)
[10:00:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[10:00:51] *** Quits: Jefren (~Jefren@70.35.66.95) (Ping timeout: 252 seconds)
[10:01:49] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[10:02:55] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[10:03:31] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[10:05:36] *** Joins: pnoud (~pnoud@user/pnoud)
[10:07:30] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Ping timeout: 246 seconds)
[10:09:49] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[10:12:46] *** Quits: ZenixOwler (~zenix@118.69.128.37) (Ping timeout: 255 seconds)
[10:13:36] *** Joins: palasso (~palasso@user/palasso)
[10:13:52] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:14:35] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[10:16:33] <ApostleInTriumph> Hello. I made a mistake in writing a json file. More precisely, this is how I saved https://bpa.st/7W3A. While reading the file, I face this error : https://bpa.st/XOVA. how do I read the file?
[10:17:41] <ApostleInTriumph> I don't want to re-run the code, saving it again as that would mean a week's effort almost. thanks a lot for your help
[10:18:05] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[10:20:40] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[10:25:04] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[10:25:06] *** Quits: dre (~dre@2001:8003:c932:c301:e078:5df6:bd54:b22a) (Quit: Leaving)
[10:25:25] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 252 seconds)
[10:25:31] *** Joins: pradhvan (~pradhvan@103.94.114.235)
[10:25:56] <Peng> Read the appropriate amount of data yourself and use json.loads()? If each JSON document is one line, maybe decode it with the jsonlines module?
[10:26:45] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[10:27:15] <ApostleInTriumph> Peng can you please elaborate a bit more on "appropriate" is it a list we're talking about?
[10:28:15] *** Joins: inom (~inom@176.59.109.161)
[10:29:53] <Repiphany> I don't get what you were trying to write in the first place
[10:31:11] *** Joins: kosh (~kosh@user/kosh)
[10:31:21] <ApostleInTriumph> Repiphany as my code takes a long time, I didn't want any interruptions to make me start from scratch. Hence, I began saving within each loop. (that context wasn't in the paste)
[10:32:28] <Repiphany> Presumably your json file just looks like a bunch of [ ... ][ ... ][ ... ], could just split at every ][ into a separate file
[10:33:58] <Peng> Maybe there's another JSON library that handles trailing data well. If trailing data was indeed the problem.
[10:34:54] <ApostleInTriumph> Repiphany true, but they're strings. so the length of list I get is 1. i.e, len(open(file.json).readlines()) is 1
[10:35:56] <Repiphany> Because you dumped the whole p2p_json every time in append mode, so it writes the list on the same line with no delimiters
[10:36:17] <jinsun> ApostleInTriumph: what was the object you were dumping? seems like Dict[str, List[float]] ?
[10:36:39] <Repiphany> list/dict I guess
[10:36:44] <jinsun> based on the string keys and tolist
[10:37:36] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:38:15] <jinsun> then probably split on }{ and adding those brackets back and then doing json.loads on all of them would work
[10:38:22] <ApostleInTriumph> jinsun yes
[10:39:03] <BrenBarn> if `p2p_json` was a dict, then the last one contains all the data and the others are just partial subsets of it
[10:39:17] <BrenBarn> so if you do that split then you can just take the last one I think
[10:39:42] <jinsun> oh ya then just json.loads on that last one will work
[10:40:42] <ApostleInTriumph> BrenBarn I didn't get you?
[10:41:27] *** Joins: dvx (~dvx@185.63.97.64)
[10:41:36] *** Joins: rendar (~rendar@user/rendar)
[10:42:53] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:43:23] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Client Quit)
[10:43:54] <ApostleInTriumph> okay, I get it. All I need is to split the str between '{' and '}'
[10:44:06] *** Quits: yitz (~nick@exercism/yitz) (Quit:  )
[10:44:27] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:44:53] *** Joins: yitz (~yitz@exercism/yitz)
[10:45:06] *** Joins: dre (~dre@2001:8003:c932:c301:9820:d974:d4b6:d3c4)
[10:46:05] <Repiphany> with open(json_file, 'r') as f: data = json.loads("".join(re.split('}({)', f.read())[-2:]))
[10:46:06] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:44] *** Joins: seednode (~seednode@user/seednode)
[10:47:01] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[10:49:13] <ApostleInTriumph> Repiphany excellent, that did the job. Thank you very much
[10:49:18] <deniska> ApostleInTriumph: you can use json.JSONDecoder().raw_decode function
[10:49:39] <deniska> ApostleInTriumph: it parses however much json it can, and returns the parsed value, and the position at which it stopped
[10:49:57] <AhmedAmerican> why not reading it in pandas directly if it's valid JSON dict per line ?
[10:49:59] <ApostleInTriumph> deniska how does it know the stop and end?
[10:50:02] <AhmedAmerican> `df = pd.read_json(data, lines=True)` ?
[10:50:16] <Repiphany> It's not valid line
[10:50:19] <deniska> ApostleInTriumph: if json starts with {, the end will be a matched }
[10:50:23] <Repiphany> He appended it all to one line
[10:50:30] <AhmedAmerican> ah ok
[10:50:32] <Repiphany> and is only interested in the last valid thing that was written
[10:50:38] <ApostleInTriumph> deniska thanks!
[10:50:40] <Repiphany> valid per line*
[10:52:56] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[10:53:21] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 246 seconds)
[10:53:55] <deniska> I learned that trick when I used a tcp service which idea of framing was sending JSON objects back to back :)
[10:54:48] *** Joins: gusto (~Augustus@109.255.100.54)
[10:56:51] *** Joins: upsala (~zcb@185.213.155.160)
[10:58:22] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[10:58:34] <rajkosto> XMPP mandates that but with XML, the ending </xml> is never sent until connection close
[10:59:04] <deniska> well, it's one thing to send a never ending xml/json, you can use a streaming parser for that
[10:59:35] <deniska> and another is doingâ€¦ that
[10:59:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[10:59:59] <rajkosto> theres lots of chunked encoding abuse these days
[11:00:19] <deniska> for more fun, raw_decode accepts str, and sockets obviously deal with bytes. And JSONs they were sending weren't ascii-safe >_<
[11:00:23] *** Joins: wyclif (~wyclif@user/wyclif)
[11:00:42] *** Joins: CombatVet (~c4@user/combatvet)
[11:00:51] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[11:01:08] *** Joins: CombatVet (~c4@user/combatvet)
[11:02:09] <deniska> so I had to convert a buffer to str, raw_decode it, chomp the str, convert it back to bytes, and use this length to chomp the buffer :)
[11:03:26] *** Joins: pnoud (~pnoud@user/pnoud)
[11:04:59] <deniska> and if you make off-by-something error, chances are you are landing on a digit, and raw_decode will give you a number back
[11:05:27] <deniska> or a string if you happened to land on "
[11:07:38] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[11:08:19] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[11:12:15] *** jjhoo_ is now known as jjhoo
[11:12:36] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 246 seconds)
[11:12:46] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[11:13:39] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[11:14:56] *** Joins: xcm_ (~xcm@user/xcm)
[11:16:30] *** Quits: xcm (~xcm@user/xcm) (Read error: Connection reset by peer)
[11:16:34] *** Joins: lexandrop (~lex@user/lexandrop)
[11:16:46] *** Quits: Zer0xFF (michael@matrix.michaelsasser.org) (Ping timeout: 245 seconds)
[11:16:56] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:17:04] *** Joins: Zer0xFF (michael@matrix.michaelsasser.org)
[11:17:58] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:18:41] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:20:01] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:22:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[11:24:46] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[11:27:16] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[11:27:26] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[11:27:32] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:27:38] *** Joins: chele (~chele@user/chele)
[11:28:53] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:29:01] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[11:30:05] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:31:58] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[11:32:15] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:32:36] *** Joins: cqi (~cqi@2408:8207:252f:75a0:8cf2:f40a:73a7:dfd6)
[11:32:47] *** Joins: noneco (~noneco@dslb-090-186-083-254.090.186.pools.vodafone-ip.de)
[11:33:09] *** Joins: spiun (~spiun@2a01:4b00:86a9:fb00:bc9f:50f4:ad1e:3d10)
[11:33:18] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:33:35] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[11:35:32] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:35:53] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 240 seconds)
[11:36:33] <FunkyBob> hmm...
[11:36:42] <FunkyBob> am having a discussion about thread locals in another channe
[11:36:42] <FunkyBob> l
[11:36:51] <FunkyBob> and remember being told many many moons ago that they're "slow"
[11:37:15] <FunkyBob> [due to requiring taking locks, etc]
[11:37:55] <FunkyBob> am wondering now... is  this still the case? by how much?
[11:38:23] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[11:40:16] *** Joins: akaWolf (~akaWolf@akawolf.org)
[11:40:58] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[11:43:09] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[11:43:39] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: Ping timeout (120 seconds))
[11:44:48] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 268 seconds)
[11:45:14] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[11:46:49] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[11:46:53] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[11:47:12] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[11:47:44] *** Joins: Trevor (~TrevorLan@user/trevorlaneray)
[11:51:42] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[11:53:12] *** Joins: OPK (~OPK@user/opk)
[11:54:01] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 255 seconds)
[11:54:15] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 246 seconds)
[11:56:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:57:16] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[11:58:03] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[11:58:22] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[11:58:32] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[12:00:03] *** Quits: cqi (~cqi@2408:8207:252f:75a0:8cf2:f40a:73a7:dfd6) (Quit: Leaving)
[12:01:07] *** Joins: n1000 (~n1000@user/n1000)
[12:02:46] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:03:10] *** Joins: mickey (~user@user/mickey)
[12:05:53] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[12:08:37] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[12:08:45] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[12:10:29] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[12:11:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:12:36] *** Joins: doev (~doev@p4ff445f4.dip0.t-ipconnect.de)
[12:15:36] *** Joins: pr0t07ype (~pr0t07ype@user/pr0t07ype)
[12:16:25] *** Joins: gareppa (~gareppa@user/gareppa)
[12:17:14] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[12:17:36] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-7828-89c1-5bc4-4b6a.res6.spectrum.com) (Quit: jarthur)
[12:18:35] *** Quits: audiocat (~audio@2603-8081-1800-00ad-633b-6ddb-64ec-e38d.res6.spectrum.com) (Ping timeout: 255 seconds)
[12:19:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:20:47] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:cc77:d0dc:1b58:8398) (Quit: Leaving)
[12:23:11] *** Joins: KombuchaKip (~kip@192.252.230.5)
[12:25:43] <Helle> FunkyBob: I have no idea on Python specifics, overall at the CPU level the cost has reduced on locking primitives and on thread switching
[12:27:10] *** Quits: isekaijin (~pyon@user/pyon) (Quit: WeeChat 3.2)
[12:27:22] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[12:28:02] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:28:26] <mawk> I want to split a string on a separator, but not if the separator is escaped; and the escape character can also be escaped
[12:29:24] <mawk> I tried with a regex but it wasn't very successful
[12:29:24] <Helle> mawk: you can use a regex split for that
[12:29:28] *** Quits: dre (~dre@2001:8003:c932:c301:9820:d974:d4b6:d3c4) (Quit: Leaving)
[12:29:34] <mawk> re.split(r'(?<!\\)__', ...)
[12:29:52] *** Joins: ambv (~ambv@c138-59.icpnet.pl)
[12:29:52] <mawk> that's the regex without escaping the escape character, we can see that one later
[12:30:21] <mawk> but even that regex fails for like a__b\____c
[12:30:28] <mawk> assuming the separator is __ and the escape character is a single \
[12:30:39] <mawk> for the fail above it gives ['a', 'b\\_', '_c']
[12:30:49] <mawk> I suppose I could solve it by making the separator single character
[12:31:23] <Helle> I'll have an exact look when I've had coffee :)
[12:31:36] <Helle> Regexes have a syntax I need to be more focussed for to deal with
[12:31:49] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:31:56] <mawk> thanks
[12:32:22] <mawk> don't look too hard into it, I made an iterative solution without regex that also works so I could use that one in the end
[12:32:26] <Helle> Has anyone actually written a state machine display for Python's RE variant
[12:32:36] <Helle> because those can be healthy
[12:34:30] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:34:34] <mawk> the iterative version: https://bpa.st/3DZA
[12:34:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[12:35:22] <mawk> the regex sees __ in the middle of \____c so it splits on that, and since that __ isn't preceded by a \ it splits
[12:35:25] <mawk> hmm hmm
[12:35:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:35:53] <Helle> mawk: do note, regexes especially with re2 or regex (instead of re) are much faster then the iterative code
[12:35:57] <mawk> the regex should "eat" the \__ and discard it somehow
[12:36:11] <mawk> ah right
[12:36:21] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:36:26] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[12:36:29] *** Joins: shad (~shad@user/shad)
[12:36:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:43] <Helle> because they are a very high performance mini-language, which is why I do try to recommend people using them in code that needs that
[12:37:10] <mawk> yeah
[12:37:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 255 seconds)
[12:38:10] <Helle> but honestly, the syntax is atrocious, I've in the past written tools to help people write POSIX regexes (but Python ones are much more powerful) because of it
[12:38:50] <Helle> but yes, your observation on it seeing the __ like that is correct
[12:39:15] <Helle> you probably can manipulate that with look behinds I think
[12:39:38] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[12:39:38] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:23] <mawk> I don't have any particular reason to have a multi-character separator after all, if I made it single char that would solve that problem
[12:41:01] <Helle> yeah, the escaping escapes is another bit of a mess, but it is solvable
[12:41:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:41:34] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[12:42:54] *** Joins: azazello (~azazello@109.75.158.195)
[12:43:36] <mawk> this would work I think: r'(?<!(?<!\\)\\)\|'
[12:43:45] <mawk> I thought it'd be illegal to nest lookbehinds but actually no
[12:44:55] <Helle> Nope, that is perfectly valid
[12:45:01] <Helle> I was going to suggest doing just that
[12:45:19] * Helle has written way too many regexes and has been nicknamed regex queen.....
[12:46:01] <mawk> lol
[12:46:04] <mawk> thanks
[12:46:46] <mawk> and the queen's crown is made of perls of course
[12:47:15] <Helle> mawk: I mean given how I don't actually dislike Perl
[12:49:13] *** Quits: pr0t07ype (~pr0t07ype@user/pr0t07ype) (Quit: Client closed)
[12:50:19] *** Joins: gggp (~gggp@123.113.186.67)
[12:52:57] <con3> So hoping someone can maybe help. I had issueswith dataloss but it seemed to be linked to the FTDI chip. So now I have no loss except in one use-case.I'm using pyqt5 with pyqtgraph. I have two tabs, the one has no graphs and just shows the data in a tabular format. This works perfectly. The graph tab seems to work fine, however when I monitor the input buffer of pyserial I can see that switching to graph tab causes the buffer to overrun without hesitation
[12:53:21] <con3> The graph update and the function retreiving data from serial are in seperate threads
[12:53:24] *** Joins: wyclif (~wyclif@user/wyclif)
[12:53:46] <mawk> you can change the priority of a thread if you like
[12:54:00] <mawk> how fast is the data coming in?
[12:54:05] <mawk> the kernel should have a 4k buffer for serial
[12:54:15] <mawk> if we assume linux
[12:54:16] <con3> I looked into moving the serial comms to a seperate process but it seems that it's not advised to use multiprocessing with pyserial
[12:54:44] <mawk> give a higher priority to the data acquisition thread and see if it improves
[12:54:51] <con3> mawk: yeah I'm monitoring that 4k buffer and it never goes over about 32 bytes, however when i switch to the graphs tab that thing fills up in a few seconds
[12:55:08] <con3> I thought thread priority in python doesnt really do much. One sec, lemme search
[12:55:16] <Helle> con3: you could have it in a seperate process and use some IPC mechanism to send it to the display process at a rate you can actually handle
[12:55:42] <Helle> con3: that would allow you to implement custom buffering that is flexible enough to deal with I guess some weird thread latency issue you are having
[12:56:35] <mawk> yeah maybe it doesn't really matter con3
[12:56:38] <mawk> I forgot about the gil business
[12:56:55] <mawk> then yeah I don't see what's wrong with a separate process
[12:56:55] <Helle> Yep, the GIL is going to be a pain for just plain Python threads
[12:57:01] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 255 seconds)
[12:57:05] *** Quits: n1000 (~n1000@user/n1000) (Ping timeout: 240 seconds)
[12:57:19] <Helle> seperate process and just using whatever appropriate IPC mechanism you think works for this
[12:57:47] <con3> mawk: yeah, Found out about GIL last week and it slightly blindsided me
[12:57:54] *** Parts: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (WeeChat 3.0.1)
[12:58:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[12:58:28] <con3> Helle: so you would run the serial comms in a seperate process?
[12:58:38] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:58:40] <mawk> if the separate process is still sometimes letting the buffer overrun then you can increase its priority and/or put it in a realtime scheduling class
[12:58:43] <Helle> con3: most likely, yes
[12:58:46] <mawk> that will make sure it never misses a byte
[12:58:54] *** Joins: wyclif (~wyclif@user/wyclif)
[12:59:07] *** Joins: pr0t07ype (~pr0t07ype@user/pr0t07ype)
[12:59:11] <mawk> but maybe not using python would be a start if such speeds will be needed
[12:59:16] <Helle> so anyway, even if the multiprocessing is not appropriate, some IPC mechanism, be it local unix sockets, shared memory or whatever probably could be made to work
[12:59:16] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[12:59:41] <Helle> I presume this is on some embedded sytem ?
[12:59:54] <mawk> it's on a regular computer talking to an embedded system through serial, I think
[12:59:56] <Helle> because otherwise I can't imagine Qt5 being that much of a limitation
[13:00:13] <Helle> (ie, it causing so much used time switching views)
[13:00:19] <con3> mawk Helle, its a pc communicating with an embedded system
[13:01:04] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[13:01:16] *** Lord_of_Life_ is now known as Lord_of_Life
[13:01:26] <Helle> con3: then uuuuh, you are having some weird issue as well with PyQt5 being "slow" I suspect, but yeah, handle the time sensitive stuff in a seperate process makes sense to avoid this issue
[13:01:44] <Helle> given that it is soft-realtime
[13:01:47] <mawk> the serial has a 4k buffer, if data comes in at 115200 bauds = 12.5 KiB/s it just needs 320ms to overrun the buffer
[13:02:05] <mawk> and it's probably higher speed than 115200 bauds
[13:02:17] <con3> I'm not sure whether I'm messing something up, but it's like the graphs are over-dominating. I can decrease the buffer, the amount of graphs being plotted, the frequency of plots, nada, overflow will happen. Updating one graph seems fine, two and it's buffer ovreflow
[13:02:57] *** Joins: n1000 (~n1000@user/n1000)
[13:03:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[13:03:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[13:03:30] <con3> anyway I'll debug a bit more, maybe double check my pyqtgraph and then try to create a seperate process for pyserial
[13:03:49] <con3> also does anyone know how to set the latency timer of a comm port from within python?
[13:03:58] <con3> *for windows
[13:04:00] <mawk> what's that?
[13:04:00] <mawk> ah
[13:04:16] *** Joins: pnoud (~pnoud@user/pnoud)
[13:04:32] *** Joins: wyclif (~wyclif@user/wyclif)
[13:04:48] <mawk> if you don't find a native python method under linux you could use ctypes to call whatever from the libc; maybe windows has that too to call whatever from the right dll
[13:05:10] <mawk> I used it before to use exotic syscalls that are not in the python standard lib
[13:05:19] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:05:35] <con3> Thanks mawk, will look into this.
[13:06:25] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:06:29] <Helle> I have thankfully never had to touch stuff like that on Windows, it was also why I was hesitant to propose the standard method you'd use on Linux for the IPC (anonymous pipe), because I have no idea what the equivilent is on Windows or how it works
[13:06:38] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:07:27] <mawk> I think windows has named pipes
[13:08:41] <Helle> yeah, on Linux the low level construction is just a pipe() and then forking, but neither of these exist quite the same on Windows
[13:08:49] <Helle> (on most Unix-alikes this works)
[13:09:05] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[13:09:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[13:09:10] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[13:09:10] <Helle> there are some higher level wrappers for this within Python, but the basis is that
[13:10:04] *** Joins: wyclif (~wyclif@user/wyclif)
[13:11:05] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[13:13:06] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[13:14:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:15:36] *** Joins: wyclif (~wyclif@user/wyclif)
[13:17:21] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[13:17:59] *** Quits: Elon_Satoshi (~elonsatos@46.102.153.243) (Ping timeout: 255 seconds)
[13:19:34] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[13:20:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[13:21:06] *** Joins: wyclif (~wyclif@user/wyclif)
[13:21:34] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[13:21:47] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[13:25:00] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[13:25:34] *** Quits: ano (~weechat@user/ano) (Quit: ano)
[13:25:52] *** Joins: ano (~weechat@user/ano)
[13:25:52] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::9885)
[13:25:53] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:25:53] *** Quits: ano (~weechat@user/ano) (Client Quit)
[13:26:09] <ronny> Helle you mean the subprocess module + it's constants?
[13:26:55] <Helle> ronny: yeah, or any of the slightly more slick or even lower level versions
[13:27:15] <Helle> imo popen is not great
[13:27:28] <ronny> For higher levels there is multiprocessing for example
[13:27:39] <ronny> But what's your actual use case
[13:27:52] <Helle> ronny: not mine, con3's
[13:27:53] <ronny> Just to avoid the xy problem
[13:28:30] *** Joins: shy (~ppppppp@37.19.213.115)
[13:28:30] *** Joins: ano (~weechat@user/ano)
[13:29:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[13:29:05] <ronny> Oh, i see
[13:29:45] <ronny> Then multiprocessing or a thread could potentially do already
[13:30:11] <ronny> Im unfamiliar with how pyserial integrates into event loops
[13:30:33] <graingert> so I have a df of all the dists on pypi.org:
[13:30:35] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 252 seconds)
[13:30:39] <graingert> https://www.irccloud.com/pastebin/L3j5DvuU/df.preview
[13:30:47] <Helle> ronny: I suspect it is more PyQt5 not doing enough stuff that allow the GIL to release
[13:30:57] <graingert> I'm trying to do stuff like: df[~x.filename.str.startswith(x.name)]
[13:31:04] *** Joins: sazawal (~sazawal@171.50.134.171)
[13:31:52] <The-Compiler> con3: I'd probably use Qt's QSerialPort which works asynchronously and integrates with Qt stuff nicely instead of PySerial
[13:32:07] <The-Compiler> also, hey, ronny in IRC :o
[13:32:14] *** Quits: pr0t07ype (~pr0t07ype@user/pr0t07ype) (Ping timeout: 246 seconds)
[13:32:23] <graingert> Helle: you can use qtrio and https://github.com/joernheissler/trio-serial/
[13:32:31] <graingert> altendky: ^
[13:32:41] <The-Compiler> graingert: you probably mean con3 and not Helle
[13:32:56] <ronny> The-Compiler sure via the libera matrix bridge
[13:33:01] *** Quits: Gerula (~Gerula@user/gerula) (Read error: Connection reset by peer)
[13:33:02] <The-Compiler> but also, QSerialPort is probably a much more straighforward solution :)
[13:33:21] *** Joins: Gerula (~Gerula@user/gerula)
[13:33:35] <graingert> manual flow control!?
[13:33:44] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[13:33:44] <The-Compiler> huh?
[13:34:16] *** Quits: duoi (~duoi@user/duoi) (Ping timeout: 265 seconds)
[13:34:36] *** Quits: Brocker (~NoBody@user/brocker) (Ping timeout: 252 seconds)
[13:34:48] <graingert> The-Compiler: you have to do waitForReadyRead yourself
[13:35:18] *** Joins: Brocker (~NoBody@user/brocker)
[13:35:21] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Ping timeout: 252 seconds)
[13:35:28] <The-Compiler> graingert: that has nothing to do with flow control (in the serial port sense), and you typically wouldn't, because you *don't* want things to block, that's the whole point
[13:35:37] <graingert> > Programming with a blocking serial port is radically different from programming with a non-blocking serial port. A blocking serial port does not require an event loop and typically leads to simpler code. However, in a GUI application, blocking serial port should only be used in non-GUI threads, to avoid freezing the user interface.
[13:35:42] *** Quits: gggp (~gggp@123.113.186.67) (Ping timeout: 252 seconds)
[13:35:48] <graingert> where do you get the non-blocking serial port from?
[13:35:52] *** Joins: purplex_ (~purplex@user/purplex)
[13:36:05] *** Quits: purplex (~purplex@user/purplex) (Ping timeout: 252 seconds)
[13:36:20] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[13:36:30] <The-Compiler> graingert: typically by connecting to the readyRead signal (and then perhaps calling canReadLine() in there, for a line-based protocol)
[13:36:50] *** purplex_ is now known as purplex
[13:37:06] *** Joins: duoi (~duoi@user/duoi)
[13:37:15] <graingert> ah here it is https://doc.qt.io/qt-5/qiodevice.html#readyRead
[13:37:44] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:37:46] <sazawal> Hi all, I have this simple AF_INET server-client socket connection https://bpa.st/ZE5A . My question is how do I make this connection secure. I am going to use this kind of socket connection to communicate between a python app on my local computer and a server. I came to a knowledge that socket connections are not reliable enough for such communications, should I move to another kind of server-client connection apart from python sockets?
[13:38:14] <graingert> lol there's a DOS vuln in the example code:     return buffer.contains('\n') || QIODevice::canReadLine();
[13:38:35] <graingert> you're not supposed to re-check buffered data
[13:38:50] <The-Compiler> graingert: source?
[13:39:42] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[13:39:52] *** Quits: KernelPanic (~KernelPan@user/kernelpanic) (Quit: ZNC - https://znc.in)
[13:40:05] *** Joins: KernelPanic (~KernelPan@user/kernelpanic)
[13:40:30] <graingert> The-Compiler: you need to store an offset of checked bytes in your buffer: eg https://github.com/agronholm/anyio/blob/9eb4671547b01f5e3ba0e0ca602b6aceec15af86/src/anyio/streams/buffered.py#L98
[13:41:29] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:41:41] <The-Compiler> graingert: that entirely depends on what "buffer" is there exactly, you're jumping to (probably wrong) conclusions
[13:44:26] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[13:44:44] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[13:46:19] *** Quits: shy (~ppppppp@37.19.213.115) (Quit: Leaving...)
[13:47:29] *** Joins: pr0t07ype (~pr0t07ype@user/pr0t07ype)
[13:47:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:48:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[13:48:58] <graingert> The-Compiler: seems handled here though: https://code.woboq.org/qt5/qtbase/src/corelib/io/qbuffer.cpp.html#403
[13:49:22] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[13:50:01] *** Joins: eldenring0 (uid506233@id-506233.tooting.irccloud.com)
[13:50:38] <graingert> offset stored in `pos` and transactionPos here?
[13:50:41] *** Joins: Julian (~tos9@python/site-packages/Julian)
[13:51:48] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-8d44-19a7-bb97-47b6.res6.spectrum.com)
[13:53:29] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 258 seconds)
[13:53:56] <Alex123> Hello everyone, I am java developer, first time writing python code. I have a script which takes a file, cleans it and outputs new file. https://script1.net/242  it is working fine no errors. Can you guys who writes in python regularly take a look and tell me if you would done anything differently (soft code review) ?
[13:54:54] *** Joins: sebastianos (~sebastian@user/sebastianos)
[13:56:52] <deniska> Alex123: getopt isn't really used often, the prefered option is argparse when it comes to the standard lib
[13:57:10] <grawity> Alex123: 1) importing 'reader' from csv seems a bit inconsistent with the rest using 'csv.writer' and so on; 2) it is really, *really* a good time to start using python3 syntax, and 3) I'd really use argparse instead of getopt -- other people say "use click" but even argparse already reduces the getopt boilerplate by half
[13:57:20] *** Quits: MikZyth (~MikZyth@188.65.242.162) (Quit: WeeChat 3.1)
[13:57:29] <grawity> in 2) I am mainly referring to the python2 `print`
[13:58:03] <deniska> Alex123: python2 is basically EOL at this point, so don't use it unless you really have to
[13:58:22] <Alex123> cool thanks
[13:59:01] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[14:00:49] <Alex123> argparse would it be ok to add validation into it if file exists
[14:01:04] <Alex123> or better to do after arguments are parsed
[14:04:25] *** Joins: azrdev (azrael@turing.chaos.hg.tu-darmstadt.de)
[14:04:31] *** Quits: kmh (~kmh@p200300df5f3d2300852dc21772644f53.dip0.t-ipconnect.de) (Quit: Leaving)
[14:04:33] <grawity> do it afterwards
[14:04:41] *** Joins: pnoud (~pnoud@user/pnoud)
[14:05:01] *** Quits: p-i- (~Ohmu@node-12lw.pool-118-173.dynamic.totinternet.net) (Quit: Leaving...)
[14:05:34] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:08:16] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:08:46] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[14:09:26] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[14:09:39] <Luyin> ^
[14:10:46] <Luyin> Alex123: since you specifically point toward your java background, let me show you a really nice series: https://docs.quantifiedcode.com/python-anti-patterns/correctness/implementing_java-style_getters_and_setters.html (the whole python-anti-patterns book is good, this is just my starting point from my browser history :D )
[14:10:58] <azrdev> hi! I have a private python package, including a setup.py with some scripts=[...] that all start with `#!/usr/bin/env python3`. When I create a virtualenv on centos7/8  and `/venv/bin/pip install $package` then these get installed with a shebang of `#!python` which prevents me from running them (as /venv/bin/script.py)
[14:11:07] <azrdev> is this a bug in pip? I cannot find any
[14:11:47] <Alex123> thanks Luyin willl check it out
[14:12:27] *** Joins: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr)
[14:12:47] *** Joins: DXR (~lyrical@46.246.236.246.dsl.dyn.forthnet.gr)
[14:14:42] <VaniaPy> Hello,i have a flask-sqlalchemy table that its id is set  to autoincrement=True and i need to create a new id each time with a fixed prefix (string)
[14:15:21] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:15:39] <VaniaPy> but it seems that it doesn't recognize the new object as unique each time it gets created? maybe the issue is in the prefix?
[14:16:22] *** Quits: Snyp (~rksht@49.207.206.57) (Quit: WeeChat 3.2)
[14:16:54] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[14:17:08] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 252 seconds)
[14:17:53] *** Joins: greedom (~greedom@2001:16b8:32ba:b500:5ec7:7a84:7795:3b82)
[14:18:45] *** Quits: greedom (~greedom@2001:16b8:32ba:b500:5ec7:7a84:7795:3b82) (Remote host closed the connection)
[14:18:53] *** Quits: kiska (~kiska@user/kiska) (Quit: Ping timeout (120 seconds))
[14:19:38] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[14:19:54] *** Joins: kindablue (znc@irc.tpurist.com)
[14:19:55] *** Joins: kiska (~kiska@user/kiska)
[14:20:03] <Julian> azrdev: something sounds quite wrong yes
[14:20:22] <Julian> pip rewrites shebangs to the executable that installs the package
[14:20:37] <Julian> so it should be putting #!/venv/bin/python in there
[14:21:11] *** Joins: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com)
[14:21:23] *** Joins: node1 (~node1@user/node1)
[14:21:23] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[14:22:30] *** Quits: Trevor (~TrevorLan@user/trevorlaneray) (Quit: Closing chat client)
[14:22:54] <sazawal> Hi all, I have this simple AF_INET server-client socket connection https://bpa.st/ZE5A . My question is how do I make this connection secure. I am going to use this kind of socket connection to communicate between a python app on my local computer and a server. I came to a knowledge that socket connections are not reliable enough for such communications, should I move to another kind of server-client connection apart from python sockets?
[14:23:06] <node1> Hi,
[14:23:08] <mav`rik> In mypy/typing, how do I declare that although something is a basic type that it's not interchangeable with other things of the same type (for example, database ids might be `domain_id: int` but you couldn't do `domain_id = other_id`)? Is it simply use of `DomainId = TypeVar("DomainId", int)`?
[14:23:22] <grawity> sazawal: are you asking about "secure" or about "reliable"?
[14:23:35] <node1> Can we assume instances of first argument is `self` ?
[14:23:38] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[14:23:39] <grawity> those are different things, decide what you want first
[14:24:14] <sazawal> grawity, Well both. First question must be if it is reliable, and then I would look into the security.
[14:24:49] <Julian> mav`rik: I don't know, but probably look for something that says `const` or `final` or something. I'd also be unsurprised if such a thing didn't exist. Not all constraints can be represented in a type system.
[14:25:36] <sazawal> By reliable I mean that I had a discussion here and I came to know that the bytes limit is the maximum it can transfer, and it won't always be that number of bytes being transferred at once.
[14:25:43] *** Joins: dasbootmir (~dasbootmi@2a02:8070:b5c1:fb00:6915:e215:950b:188b)
[14:25:48] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[14:25:54] <grawity> sazawal: the default for socket(AF_INET, SOCK_STREAM) is to use TCP, so it gives you the standard reliability guarantees of TCP
[14:26:28] <mav`rik> Julian: The `domain_id = other_id` might be acceptable to me if `other_id` was also declared as type `DomainId`. Thanks, it's not "constness" I'm looking for, it's avoidance of misusing ids across tables.
[14:26:48] <grawity> there is no byte limit for TCP streams in total, although the receiver does have a limited buffer -- if the buffer is full, the sender will pause before it can send more
[14:26:58] <Julian> sazawal: You shouldn't use the socket module for real programs at this point. trio or twisted is a much much better choice, and will have implementations of TLS you can use.
[14:27:05] <mav`rik> Julian: I _think_ TypeVar style generics is what I'm after, but I'm trying to make sure that my understanding is correct
[14:27:47] <Julian> mav`rik: I see. Then yeah someone who uses mypy a bit more may be sure, but what you found seems possibly correct to me too.
[14:29:41] *** Joins: bindu (bindu@user/bindu)
[14:30:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:31:10] *** Joins: wyclif (~wyclif@user/wyclif)
[14:31:19] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[14:32:34] *** Quits: dasbootmir (~dasbootmi@2a02:8070:b5c1:fb00:6915:e215:950b:188b) (Changing host)
[14:32:34] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[14:32:38] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[14:32:40] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Client Quit)
[14:33:09] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[14:34:24] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[14:34:29] *** Joins: entuland (~entuland@user/entuland)
[14:34:55] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Client Quit)
[14:35:44] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[14:35:56] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Quit: ZNC - https://znc.in)
[14:36:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:36:15] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[14:36:39] *** Joins: wyclif (~wyclif@user/wyclif)
[14:40:27] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[14:40:55] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[14:41:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[14:42:09] *** Joins: wyclif (~wyclif@user/wyclif)
[14:45:22] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:45:27] <sazawal> Julian, I am new to the socket programming and server-client interfacing in general. Would you point me to a simple tutorial where I can get started?
[14:47:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[14:47:38] *** Joins: wyclif (~wyclif@user/wyclif)
[14:48:23] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[14:52:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:52:59] *** Joins: wondiws (~Jasper@D57C89AA.static.ziggozakelijk.nl)
[14:53:04] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:53:08] *** Joins: wyclif (~wyclif@user/wyclif)
[14:53:09] *** Joins: mcope (~matt@user/mcope)
[14:53:13] <Alex123> if I have html snippet, how would I validate in python if it is valid or not?
[14:54:47] *** Quits: bindu (bindu@user/bindu) (Quit: WeeChat 3.2)
[14:55:14] <jinsun> mav`rik: NewType? https://docs.python.org/3/library/typing.html#newtype or maybe Final https://docs.python.org/3/library/typing.html#typing.Final
[14:55:53] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[14:56:30] *** Quits: twobitsprite (~twobitspr@66.115.154.132) (Quit: leaving)
[14:58:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[14:58:41] *** Joins: wyclif (~wyclif@user/wyclif)
[14:59:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:34] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[15:00:39] *** Joins: beshr (~beshr@user/beshr)
[15:01:20] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[15:02:47] *** Quits: sazawal (~sazawal@171.50.134.171) (Quit: Leaving)
[15:03:36] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:05:35] *** Joins: pnoud (~pnoud@user/pnoud)
[15:05:44] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[15:09:03] <con3> The-Compiler: Thanks will look into that!
[15:09:07] *** Joins: acresearch (~acresearc@user/acresearch)
[15:09:20] <con3> I'm seeing possibly some of the weirdest things I've seen in a while
[15:10:12] <con3> so say I have a graph with 300 elements for both the x and the y. I remove the 1st element and add to the last element to give the graph that scrolling effect
[15:10:26] <con3> for some reason pyqt works fine until it starts scrolling
[15:10:46] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[15:10:46] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[15:11:15] <con3> so what I just noticed is say i plot 10000 items instead of the 100 I'm currently trying to plot, then it works flawlessly
[15:11:27] <acresearch> people, if i have 2 functions that i want to run simultatnously i can use multiprocessing,  but the variable is a Process variable, how can i get the function output?
[15:11:35] <con3> although it looks crappy cause the graph gets compressed
[15:12:00] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:12:14] *** Joins: thiras (~thiras@user/thiras)
[15:13:15] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[15:14:39] <Alex123> I was googling around, looks like all html validation scripts I can find on internet are doing a call v3.org
[15:15:47] <con3> (this simulates the behavior seen on windows, which lacks os.fork)
[15:15:48] <con3> yay
[15:16:04] *** Joins: arischow (~arischow@61-221-155-12.HINET-IP.hinet.net)
[15:16:25] *** Quits: anandprabhu (anandprabh@gateway/vpn/airvpn/anandprabhu) (Quit: Leaving)
[15:16:25] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Read error: Connection reset by peer)
[15:17:04] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[15:17:06] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[15:17:07] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[15:18:37] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Quit: Konversation terminated!)
[15:19:01] <Lycurgus> right because they're the authority
[15:19:12] <acresearch> people, how can i get the return value of a function that was pushed through multiprocessing?  i am reading online but i do not get it, everyone has a totally different way, what is the underlying logic?
[15:19:20] <Lycurgus> and authoritative is what you want
[15:19:38] <bjs> acresearch: what exactly do you mean by "pushed through multiprocessing" ?
[15:19:45] <Lycurgus> (if you meant w3)
[15:19:58] *** Joins: computeiro (~Wender@179.104.253.148)
[15:20:13] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[15:20:33] <Lycurgus> it's tedious stuff, i let the browser console tell me if something is fuggled
[15:22:11] <The-Compiler> Alex123: looks like there's https://github.com/svenkreiss/html5validator which uses the Java validator from w3
[15:22:32] <acresearch> bjs: here is my code: https://paste.debian.net/1204873/
[15:22:43] <The-Compiler> Alex123: i.e. https://validator.github.io/validator/
[15:23:50] *** Quits: arischow (~arischow@61-221-155-12.HINET-IP.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:24:31] <bjs> acresearch: the Process class doesn't give you access to the return value of the target.
[15:24:57] <gitesh> what is the difference between values and objects?
[15:25:06] <bjs> gitesh: nothing
[15:25:23] <gitesh> two names?
[15:25:24] <bjs> other languages do have a difference, where there are some values that are not objects. But not Python
[15:25:38] <acresearch> bjs: oh, so it is not possible to program functions with a reutrn value and use them with multiprocessing?
[15:25:40] <FunkyBob> in python, just about everything you work with is an object
[15:25:53] <Alex123> The-Compiler thanks, its a bit strange how come there is no pure python validator, or need to use API (written in java) or external jar
[15:26:06] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[15:26:10] <bjs> acresearch: sure, just don't use Process(). A Pool is the usual way to get results from a process (or well, a pool of processses)
[15:26:58] <acresearch> bjs: what do you mean? where can i read about this?
[15:27:04] <bjs> acresearch: docs.python.org/
[15:27:33] <bjs> acresearch: Library Reference -> Multiprocessing -> Read example at top of page
[15:28:28] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 255 seconds)
[15:28:40] <bjs> gitesh: yes two names,  lots of names are borrowed/shared between different languages. But different languages work differently and the distinction between values and objects in one language just isn't a thing in Python
[15:29:34] <The-Compiler> Alex123: validating HTML probably isn't exactly easy, and there's one "canonical" validator, so I guess nobody has bothered to write their own from scratch
[15:30:01] <bjs> acresearch: probably starmap() will be the easiest thing for you to use.  I'm not really sure I understand what your use is here though,  you want to create the objects in another process?
[15:30:25] <bjs> i don't really see the point of creating the object in the other process just to use it in the parent one
[15:31:38] <gitesh> what is the use of alias rather than making confusion?
[15:32:02] <bjs> gitesh: you act as if when Python was invented we threw away the English language and started to re-invent words specifically for it
[15:32:20] <acresearch> bjs: the top example does not work with my function with multiple arguments
[15:32:33] <bjs> gitesh: no,  the words exist anyway and other languages exist and those words mean things. It just so happens that *in Python* there's no difference between a value and an object
[15:33:08] <bjs> acresearch: well,  then take a read of the Pool docs (specifically starmap())
[15:33:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:33:28] <nedbat> gitesh: a value is data that can be used by a program.  An object is an instantiation of a class.  In Python, all values are objects.
[15:33:48] <bjs> and all objects are values
[15:34:04] <nedbat> i guess in any language, all objects are values?
[15:34:23] <nedbat> hard to imagine otherwise
[15:34:34] <bjs> idk,  maybe there are some languages where there are classes for e.g. functions or whatever but you're not allowed to use instances in the program
[15:35:05] <nedbat> "There are more things in heaven and earth, Horatio, than are dreamt of in your philosophy."
[15:36:48] <FunkyBob> One of the problems I find in people approaching CS... is CS uses words for their actual meaning, where most people don't actually know them.
[15:37:28] <bjs> Technical jargon is always a struggle. One of the big problems is that CS != Programming and random programming languages often re-purpose words for themselves
[15:37:59] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:38:24] <bjs> so even if you know the regular non-technical meaning, and have encountered it in some CS/Programming setting then ${language} might use it differently still :(
[15:39:26] <FunkyBob> I'm not talking about the technical jargon...
[15:39:40] <nedbat> FunkyBob: what words are you thinking of?
[15:39:50] <FunkyBob> nedbat: well, my most common example is interface
[15:39:55] <FunkyBob> there are many many more
[15:40:15] <FunkyBob> am a little to distracted, and tired, to think of them right now
[15:40:35] <nedbat> ok
[15:41:07] <FunkyBob> but, yeah, often there are words used literally... and almost nobody uses them that way in common speech
[15:43:43] *** Joins: pnoud (~pnoud@user/pnoud)
[15:45:08] *** Joins: akaWolf (~akaWolf@akawolf.org)
[15:46:05] <jinsun> in think that distinction between value and object comes from Java and C# people, they have both value types that are C like and reference types that are python like
[15:46:14] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 252 seconds)
[15:47:13] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[15:47:47] <bjs> Yeah I think the classic example is `int` in Java(?) where it's some kind of unboxed type
[15:47:56] <bjs> compared to Integer
[15:47:57] *** Joins: m4v (~znc@ubuntu/member/m4v)
[15:48:50] <nedbat> there were values that weren't objects in Python 1.
[15:48:55] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[15:49:23] <bjs> nedbat: I thankfully have never seen/used Python 1
[15:49:23] <bjs> :P
[15:49:33] <nedbat> (which is why the string module exists and duplicates a bunch of string methods)
[15:50:06] * FunkyBob started on 1.4/1.5
[15:50:23] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[15:51:53] <gitesh> thanks guys
[15:52:34] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[15:55:35] <gitesh> do you understand when to use which data structure in real world?
[15:55:44] <gitesh> and when will I understand that?
[15:57:33] <bjs> gitesh: there are a huge number of data structures out there, but often you can get by with just a handful (e.g. the built-in ones in Python: lists, dicts) and then make classes which combine them together to do useful things
[15:57:42] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[15:58:11] *** Joins: kosh (~kosh@user/kosh)
[15:58:32] <gitesh> okay that's good
[15:59:37] <gitesh> i mean when would you use list over dictionaries over strings over tuples can you become sure to use that in real world
[16:00:02] <gitesh> who will teach when to create which data
[16:00:03] <jor> in the real world you use bags... or pockets, which are just small bags attached to your clothes ;p
[16:00:06] *** Quits: asd (~noname@user/asd) (Ping timeout: 268 seconds)
[16:00:11] <bjs> gitesh: well a string is text, so if you want text you have to use a string.  ints are numbers so if you want a (whole) number you need an int. There's not really much of a "choice" here
[16:00:44] <bjs> gitesh: as for the others, you can almost always make things work with whatever you want.  in most Python programs I'd bet you'd see people just using dicts and lists everywhere, even if there is technically a better choice of a different structure
[16:00:46] <gitesh> that's good again
[16:01:44] *** Joins: asd (~noname@user/asd)
[16:01:47] <gitesh> hmmm that was my concern
[16:01:58] <bjs> gitesh: concern?
[16:02:14] <gitesh> concern about 'people just using dicts and lists everywhere, even if there is technically a better choice of a different structure'
[16:02:16] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 240 seconds)
[16:02:22] <bjs> gitesh: why is that a concern?
[16:02:41] <gitesh> because it's not perfect then isn't it
[16:02:46] <bjs> gitesh: no it's not perfect
[16:02:52] <gitesh> is the data should be list and i am using dict
[16:02:59] <gitesh> or tuple
[16:03:01] <bjs> but ... most of the time, who cares?
[16:03:15] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 250 seconds)
[16:03:23] <gitesh> so that means i don't need to so care about that,
[16:03:25] <bjs> your operation takes 4 miliseconds but if you were super fancy you could make it take 3, but no human could tell the difference.
[16:03:28] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-8d44-19a7-bb97-47b6.res6.spectrum.com) (Quit: Leaving.)
[16:03:29] <gitesh> that was my concern
[16:03:44] <bjs> Unless of course, you do it millions of times. *once* things become a bottleneck then you often need to be clever
[16:03:44] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-8d44-19a7-bb97-47b6.res6.spectrum.com)
[16:03:54] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:04:08] *** Quits: pr0t07ype (~pr0t07ype@user/pr0t07ype) (Ping timeout: 246 seconds)
[16:04:16] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-8d44-19a7-bb97-47b6.res6.spectrum.com) (Client Quit)
[16:04:30] <gitesh> got it
[16:06:23] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[16:06:38] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:06:58] <ronny> anyone aware of a openapi v3/3.1 cappable client library for python that can make the models/apu objects from a spec, ideally also supporting deep object encoding
[16:07:41] *** Joins: shtrb (~shtrb@user/shtrb)
[16:08:16] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 255 seconds)
[16:08:19] *** Joins: Elodin (~weechat@user/elodin)
[16:08:35] *** Parts: shtrb (~shtrb@user/shtrb) (Leaving)
[16:11:43] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:12:36] *** Quits: ebb (ebb@user/ebb) (Ping timeout: 245 seconds)
[16:12:45] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Quit: Leaving)
[16:12:56] *** Quits: inom (~inom@176.59.109.161) (Quit: Lost terminal)
[16:13:45] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 265 seconds)
[16:14:32] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[16:15:10] *** Joins: Elodin (~weechat@user/elodin)
[16:15:15] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-b87f-45b2-d6ab-c6fd.res6.spectrum.com)
[16:21:25] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: bgardner[m] (~bgardner@2001:470:69fc:105::8a8) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: jwon (~jwon@user/jwon) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: samleh (~slfeneaso@2001:470:69fc:105::5240) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Quit: Bridge terminating on SIGTERM)
[16:21:44] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:22:12] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[16:24:27] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[16:26:32] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 255 seconds)
[16:26:58] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[16:27:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[16:27:05] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[16:27:47] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Remote host closed the connection)
[16:27:59] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[16:28:31] *** Quits: ntdll (ntdll@user/ntdll) (Ping timeout: 255 seconds)
[16:28:38] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[16:28:38] *** Quits: noobython (~noobython@cpe-67-248-190-48.nycap.res.rr.com) (Quit: Client closed)
[16:28:57] *** Joins: andyewen (~andyewen@31.124.173.184)
[16:29:18] *** Joins: Masklin_Gurder (~joel@93.182.183.85)
[16:31:42] *** Joins: cuz (~user@2601:182:cc02:8b0:5d77:6ee9:7f95:9dca)
[16:31:47] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[16:31:57] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:32:12] *** Joins: tspng (~tspng@2a02:168:a1a1:1:58dd:5fb:1e35:120a)
[16:32:16] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (Ping timeout: 240 seconds)
[16:32:36] *** Joins: ntdll (~ntdll@user/ntdll)
[16:33:32] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[16:33:32] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[16:33:32] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[16:33:32] *** Joins: bgardner[m] (~bgardner@2001:470:69fc:105::8a8)
[16:33:32] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[16:33:32] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[16:33:32] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[16:33:32] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[16:33:32] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[16:33:33] *** Joins: jwon (~jwon@user/jwon)
[16:33:33] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[16:33:33] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[16:33:33] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[16:33:33] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[16:33:33] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:33:33] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[16:33:33] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:33:33] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[16:33:33] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[16:33:46] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[16:33:47] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[16:34:29] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[16:34:49] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 255 seconds)
[16:35:42] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:39] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:46] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 258 seconds)
[16:40:10] *** Joins: jeronimo (~h4cker@158.255.211.151)
[16:40:30] <jeronimo> you guys should learn some truly programming langauge
[16:40:43] <jessicara> like more python
[16:40:45] *** Quits: VaniaPy (~VaniaPy@79.103.30.29.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[16:40:52] <jeronimo> like julia
[16:44:17] *** Joins: ebb (ebb@user/ebb)
[16:44:21] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[16:45:01] <nedbat> jeronimo: is there something we can help you with?
[16:45:44] <jeronimo> nedbat: we are not on the same lvl I guess I'm the one who can help you
[16:45:54] <nedbat> jeronimo: i'm all set, thanks.
[16:46:38] <jessicara> embedding python seems an interesting idea
[16:47:42] *** Joins: arischow (~arischow@61-221-155-12.HINET-IP.hinet.net)
[16:48:07] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 255 seconds)
[16:48:38] <nedbat> jessicara: lots of apps embed python, yup
[16:49:25] <grawity> I remember when I was poking around with Paint Shop Pro on Win98 and found Python scripting in it, had almost no clue what it was back then
[16:49:42] <AhmedAmerican> am not sure why `get_ean` function running one by one instead of 10 ? https://bpa.st/O4LQ
[16:50:12] *** Joins: Elodin (~weechat@user/elodin)
[16:51:54] <nedbat> it's fascinating that people will feel so competitive about languages that they will make the effort to come here and talk smack about Python.
[16:52:05] <jessicara> nedbat: yeah
[16:52:13] *** Joins: shtrb (~shtrb@user/shtrb)
[16:52:26] *** Parts: jeronimo (~h4cker@158.255.211.151) ()
[16:53:02] <AhmedAmerican> nedbat: we just have to ignore reading such comments (e.g jeronimo's comment). at least it's will be healthy for us.
[16:53:02] <bjs> AhmedAmerican: where does the number 10 come from?
[16:53:19] <Yhg1s> AhmedAmerican: unfortunately ignoring helps us, but not the community.
[16:53:33] <bjs> AhmedAmerican: what thing is supposed to have 10 things in it?
[16:53:41] <AhmedAmerican> bjs: meant 10 process as i started nursery2
[16:53:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:54:02] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[16:54:06] *** Quits: arischow (~arischow@61-221-155-12.HINET-IP.hinet.net) (Remote host closed the connection)
[16:54:15] <AhmedAmerican> Yhg1s: this is Room OW job to kick/ban such users
[16:54:29] <bjs> AhmedAmerican: what makes you say its running one-by-one?
[16:54:42] <Yhg1s> AhmedAmerican: and we do, if they get disruptive.
[16:54:58] <AhmedAmerican> bjs: print is confirming that!
[16:54:58] <very_sneaky> nedbat: people looking for something to get tribal about i guess
[16:55:04] <bjs> AhmedAmerican: which print?
[16:55:07] <bjs> we can't see your screen :)
[16:55:18] <AhmedAmerican> within `get_ean` function?
[16:55:19] <nedbat> very_sneaky: sure, but why not do that in the $goodlang community?
[16:55:47] <bjs> AhmedAmerican: but, the get_ean function just prints out the value it got, how can you tell whether it ran one-by-one or all at once from just that print?
[16:56:19] *** Joins: sharperguy_ (~sharpergu@2001:1438:4010:3101:10a::3133)
[16:56:36] <very_sneaky> nedbat: tribes need to clash. you see the same thing in politics rn - maybe people are promoting python in $goodlang community and they're feeling defensive
[16:57:00] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[16:58:04] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[16:58:11] *** Joins: shad (~shad@user/shad)
[16:58:23] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[16:58:39] *** Quits: jpe__ (~sharpergu@2001:16b8:5c2c:7700:7001:aa44:10dd:d1b9) (Ping timeout: 255 seconds)
[16:58:40] <AhmedAmerican> bjs: i think you are correct :D my mistake then :P
[16:58:57] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[16:59:08] <AhmedAmerican> just confirmed it by printing the product url without making the request itself and slept for few seconds
[16:59:17] <bjs> AhmedAmerican: actually reading your code I'm surprised you don't get errors because of the channel being closed, did you want to sender.clone() in the nursery2.start_soon ?
[17:00:12] <AhmedAmerican> bjs: channel is not closed. am dealing with one receiver and i keep use `sender.clone()` which I've sent
[17:00:40] <AhmedAmerican> https://bpa.st/O4LQ#1L70
[17:01:21] <bjs> AhmedAmerican: I mean line 41
[17:02:19] <AhmedAmerican> we don't need to repeat `sender.clone()` here as we didn't used the clone which we sent from L`71`
[17:02:29] <AhmedAmerican> AFAIK
[17:03:07] <AhmedAmerican> i just pass it from func to another func but i only used it within `get_ean` function
[17:03:20] <bjs> AhmedAmerican: but you use it many times because you call get_ean many times
[17:03:24] <bjs> but ok
[17:05:37] *** Joins: dudek (~dudek@185.150.236.155)
[17:06:44] <dudek> how can i check if value exists in pandas column? I have more than one column, i just want check in a specific one.
[17:07:35] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:07:39] <AhmedAmerican> bjs: you correct!
[17:08:10] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:08:18] <jinsun> dudek: `value in df["column_name"]` ?
[17:10:34] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:12:01] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:12:06] *** Joins: Vonter (~Vonter@user/vonter)
[17:12:11] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[17:12:34] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:12:47] <jinsun> dudek: ah no that looks for the index values, so it should be `value in df['column_name"].values`
[17:12:48] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 258 seconds)
[17:12:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:13:48] *** Joins: wyclif (~wyclif@user/wyclif)
[17:15:03] *** Joins: rsx (~dummy@ppp-188-174-143-186.dynamic.mnet-online.de)
[17:15:48] <jinsun> or df["column_name"].eq(value).any()
[17:16:03] <gitesh> What is the advantage of in python being objects than being values?
[17:16:23] <gitesh> Object is instantiation of class
[17:16:30] <gitesh> What's the advantage of that
[17:16:37] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Remote host closed the connection)
[17:17:10] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:17:14] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[17:17:17] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:17:26] *** Joins: dez (uid92154@user/dez)
[17:17:31] <Yhg1s> gitesh: it's an abstraction that allows the coupling of data and behaviour.
[17:18:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[17:19:15] *** Joins: wyclif (~wyclif@user/wyclif)
[17:20:16] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[17:21:15] <graingert> Uhhh nedbat can you put that branch back
[17:22:31] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[17:22:35] *** Joins: zeden (~zeden@user/zeden)
[17:23:57] <graingert> nedbat: https://github.com/twisted/twisted/pull/1632/checks?check_run_id=3103987532#step:9:17
[17:24:41] *** Joins: cedric (~cedric@2a01:cb11:867:c200:7b58:2860:3969:3b55)
[17:24:52] *** Joins: acresearch (~acresearc@user/acresearch)
[17:25:03] <acresearch> people, what is pythonsh   and how can i use it?
[17:25:41] <Julian> acresearch: You tell us :), where are you seeing it?
[17:25:42] *** Joins: boxelephant (~boxelepha@209.143.87.130)
[17:26:05] *** Quits: obx (~orange@user/orangeboxcutter) (Ping timeout: 268 seconds)
[17:26:27] <acresearch> Julian: https://autodock-vina.readthedocs.io/en/latest/docking_basic.html#basic-docking     under   3. (Optional) Generating ...
[17:26:39] <acresearch> Julian: $ pythonsh <script_directory>/prepare_gpf.py -l 1iep_ligand.pdbqt -r 1iep_receptor.pdbqt -y
[17:27:49] *** Joins: kosh (~kosh@user/kosh)
[17:28:51] <Julian> acresearch: It's something specific to that package
[17:29:04] <Julian> Specifically it appears to be something installed as part of MGLTools
[17:29:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:29:56] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:30:16] <acresearch> Julian: those people at the scripps institute are very good at writing terrible software... nothing is compatibale with any of their protocols    that script is written in python 2,, updated 5 months ago
[17:30:37] <acresearch> Julian: and GMLtools is a GUI that does not install in linux
[17:30:46] <acresearch> Julian: really frustrating :-(
[17:30:51] *** Joins: Hafat (~hafat@95.70.168.45)
[17:32:36] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[17:32:50] <mav`rik> jinsun: Thanks, maybe NewType is the right approach. I'll do some more reading.
[17:34:22] <acresearch> Julian: look at this:   https://github.com/ccsb-scripps/AutoDock-Vina/blob/develop/example/autodock_scripts/prepare_gpf.py      they litrally have if statements for different options rather than use argparse   hahahaha
[17:35:47] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::f245) (Quit: Leaving)
[17:35:49] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 255 seconds)
[17:36:49] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[17:36:51] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Remote host closed the connection)
[17:36:55] *** Quits: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com) (Quit: leaving)
[17:37:35] *** Quits: spjb (~spjb@S0106f0f24985fe23.wp.shawcable.net) (Quit: Leaving)
[17:38:05] <Julian> acresearch: I sympathize.
[17:38:05] *** Joins: ELFrederich (~ELFrederi@134.244.29.70)
[17:38:09] *** Joins: locsmif (~none@user/locsmif)
[17:39:49] *** Joins: ATAD (~ATAD@user/atad)
[17:40:53] <ronny> acresearch: its entirely possible that they just had no idea about the python ecosystem - this seems to come from researches not programmers, they might appreciate programmer thinking style cleanups
[17:41:21] *** Quits: ATAD (~ATAD@user/atad) (Remote host closed the connection)
[17:41:45] *** Joins: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs)
[17:42:03] <acresearch> ronny: i am a researcher not a programmer, but i put extra effort in my work to make life easier on users,,, extensive read me files, sometimes videos, and make sure things are self contained as possible and up to date version wise
[17:42:34] *** Joins: timkofu (~timkofu@user/timkofu)
[17:42:37] <timkofu> Hi
[17:42:42] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05)
[17:43:11] <trace987> is it possible in python to code code
[17:43:19] <trace987> that you program sourcecode?
[17:43:19] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Read error: Connection reset by peer)
[17:43:21] <shtrb> Anyone can hint about using mindstorms with ampy ? (if it's even possible)
[17:43:29] <trace987> and then are executing it?
[17:43:39] *** Joins: ATAD (~ATAD@user/atad)
[17:44:05] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[17:44:06] <trace987> examine or modify the behavior of methods, classes, interfaces at runtime.
[17:44:10] <SnoopJ> shtrb, I'm very out of date on that ecosystem, but can you tell us more about what you want to do?
[17:44:16] <trace987> as you can do it with java reflections
[17:44:32] *** Joins: pnoud (~pnoud@user/pnoud)
[17:44:40] <Wulf> trace987: you can do lots of strange things in python, yes.
[17:44:41] <shtrb> SnoopJ, I'm trying to upload simple mindstorm app (even a hello world using ampy) but if I use any mindstorm library it fails, uploading a simple hello with ampy (without anything related to mindstorms works fine)
[17:44:46] <Wulf> trace987: inspect module?
[17:44:51] <SnoopJ> trace987, Python can do lots of introspection and other metaprogramming things, yep
[17:45:00] <shtrb> SnoopJ, just import mindstorms says it's not found
[17:45:01] <deniska> trace987: python has quite rich introspection abilities, you may want to take a look at https://docs.python.org/3/library/inspect.html
[17:45:09] <trace987> SnoopJ, great and what is the name of that corresponding libs
[17:45:44] <trace987> thx
[17:45:48] <SnoopJ> trace987, as Wulf and deniska suggest, the `inspect` module is useful for introspection.
[17:45:54] <trace987> yes
[17:45:58] <trace987> bye
[17:46:33] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[17:47:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:47:30] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Read error: Connection reset by peer)
[17:47:31] <SnoopJ> shtrb, okay, sounds like that module isn't installed. Are you following a tutorial or guide, maybe?
[17:47:33] <acresearch> Julian: ronny  oh my god, AutoDockTools/__init__.py is written in python 1     version  --> 1 <--    WHAT????
[17:47:39] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Client Quit)
[17:47:42] <shtrb> SnoopJ, calling just help('modules') give me http://paste.debian.net/1204884/
[17:47:44] *** Joins: wyclif (~wyclif@user/wyclif)
[17:48:08] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[17:48:39] <shtrb> SnoopJ, I'm trying to work around the need to use the vendor application and use ampy to upload scripts, I suggest that the library that need to be loaded (mindstorms) need to be somehow loaded or maybe I need to change the dir or something
[17:48:48] * shtrb don't really know python
[17:49:17] <deniska> shtrb: just looking up various mindstorms examples I see imports to `pybricks`
[17:49:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[17:49:45] * deniska never dealt with mindstorms
[17:50:09] <shtrb> deniska, from what I got that's a different library :-( that is flashed instead of mindstorms, and the support for the model I had is listed as beta at pybricks
[17:50:27] <shtrb> the demo I looked at for example https://github.com/ingoha/mindstorms-inventor , I have a 51515
[17:51:14] <SnoopJ> shtrb, and that `help('modules')` output is from running it on your 51515, right?
[17:51:20] <shtrb> yes
[17:51:23] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[17:51:25] <shtrb> connected via minicom
[17:51:54] <shtrb> As the device is not mine , I don't wish to flush a different firmware
[17:52:16] *** Joins: pwnd_sfw0 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[17:52:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[17:52:31] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[17:52:32] *** pwnd_sfw0 is now known as pwnd_sfw
[17:52:38] <SnoopJ> That might be tricky because of the way MicroPython does modules. Let me see if I can locate the "official documentation" that mindstorms-inventor repo is referring to
[17:53:12] *** Joins: wyclif (~wyclif@user/wyclif)
[17:53:19] <shtrb> wow thaks SnoopJ
[17:54:12] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[17:55:39] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:f063:3805:dacc:a033) (Quit: Leaving...)
[17:56:36] *** Joins: Liblx (~Alex@2a02:810c:280:59c:0:7f08:a8a4:f585)
[17:56:42] *** Quits: blackleitus (~blackleit@189.195.193.124) (Ping timeout: 265 seconds)
[17:57:55] *** Joins: blackleitus (~blackleit@189.195.193.124)
[17:58:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[17:58:40] *** Joins: wyclif (~wyclif@user/wyclif)
[17:58:47] <SnoopJ> shtrb, hmm, I can't actually find whatever they're referring to, and I can't find the code the README is mentioning either.
[17:59:12] *** Joins: nyah (~nyah@90.221.186.180)
[17:59:34] <shtrb> :-/
[17:59:52] <SnoopJ> shtrb, does this device use an SD card? (Like I said, I'm out of date, I only ever used the RCX ðŸ˜…)
[18:00:04] <shtrb> not that I'm aware off
[18:00:18] <shtrb> I don't see a slot anywhere :D
[18:00:22] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[18:01:04] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-b87f-45b2-d6ab-c6fd.res6.spectrum.com) (Quit: Leaving.)
[18:01:15] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[18:02:22] *** Quits: blackleitus (~blackleit@189.195.193.124) (Ping timeout: 255 seconds)
[18:03:05] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-2411-ffa7-3e81-4070.res6.spectrum.com)
[18:03:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[18:04:14] *** Joins: wyclif (~wyclif@user/wyclif)
[18:04:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[18:04:44] <acresearch> people what is numpy.oldnumeric   ?
[18:06:37] <SnoopJ> shtrb, hmm, you might be kinda stuck, then. I'm not _super_ familiar with MicroPython but my understanding is that the modules are kinda "baked into" the image that you flash to a device.
[18:07:05] <SnoopJ> there are some exceptions but I can't find any information about the module you're trying to import as a standalone, it sounds from that README like it's a special build of MicroPython
[18:07:06] <shtrb> Can't I move folder (maybe I'm in the wrong folder ) ?
[18:07:46] *** Quits: cuz (~user@2601:182:cc02:8b0:5d77:6ee9:7f95:9dca) (Ping timeout: 255 seconds)
[18:08:32] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:cc77:d0dc:1b58:8398)
[18:08:42] <SnoopJ> shtrb, I don't think MicroPython even has that concept. When I say "baked in," I mean the modules are basically part of the interpreter itself.
[18:09:07] *** Joins: NeoCore (~neocore@195.200.221.108)
[18:09:09] <shtrb> Oh , sorry for my noobness
[18:09:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:09:25] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[18:09:44] *** Joins: wyclif (~wyclif@user/wyclif)
[18:09:55] *** Quits: t3nj1n (~t3nj1n@108.5.82.237) (Ping timeout: 258 seconds)
[18:10:43] <SnoopJ> no need to apologize :)
[18:11:59] <SnoopJ> shtrb, so, there are some exceptions to what I just said, but I can't really find information about what that README is talking about. It looks like someone yanked it out of the library it's referring to. I.e. the README says "this repository contains...source code", but it definitely does not.
[18:12:03] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[18:13:16] *** Quits: Hafat (~hafat@95.70.168.45) (Quit: Leaving)
[18:14:21] <SnoopJ> shtrb, what does running `import os; print(os.uname())` on the brick produce?
[18:14:36] <shtrb> moment
[18:14:42] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:14:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:15:15] *** Joins: wyclif (~wyclif@user/wyclif)
[18:15:26] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[18:16:06] <shtrb> SnoopJ, (sysname='pyboard', nodename='pyboard', release='(1).(9).(4)', version='v1.9.4-1128-g6e5e8270f on 2019-10-21', machine='LEGO Technic Large Hub with STM32F413xx')
[18:16:36] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[18:17:28] <AhmedAmerican> bjs: i couldn't figure out why the channel hang ! seems it's still open and waiting to receive an item while the process is already complete. https://bpa.st/DVKQ
[18:18:48] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Remote host closed the connection)
[18:18:52] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:18:59] <SnoopJ> shtrb, huh, interesting, that looks like it's the Technic Hub, not the 51515?
[18:19:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:19:23] <shtrb> It sais on the box 51515
[18:20:14] <shtrb> *the cardbox
[18:20:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[18:20:45] *** Joins: wyclif (~wyclif@user/wyclif)
[18:20:58] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[18:21:35] *** Joins: d00gy (~tonberry@user/d00gy)
[18:22:29] <SnoopJ> hmm, 51515 is I think the part number of the kit
[18:23:37] <SnoopJ> shtrb, well, the `hub` module there may have some stuff you're interested in, maybe try `import hub; hub.status()` and see if you get some device information
[18:25:04] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[18:25:23] *** Joins: mmarshall540 (~user@68-252-220-225.lightspeed.tukrga.sbcglobal.net)
[18:25:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:26:17] *** Joins: wyclif (~wyclif@user/wyclif)
[18:27:51] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[18:28:27] <AhmedAmerican> bjs: solved. just was need to async with the sender within `get_product` func
[18:31:10] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[18:31:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[18:31:46] *** Joins: wyclif (~wyclif@user/wyclif)
[18:32:08] <shtrb> SnoopJ, :-/ http://paste.debian.net/1204891/ but I think it's really 51515 as all parts and indication are for that
[18:32:31] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[18:33:03] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:33:33] <SnoopJ> shtrb, is this what the brick looks like? https://cdn.rebrickable.com/media/thumbs/parts/ldraw/3/67718.png/250x250p.png?1622403264.2971063
[18:33:52] <shtrb> yes (but with some finger prints now :D)
[18:34:01] <SnoopJ> okay, phew :)
[18:34:43] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[18:35:16] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[18:35:16] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[18:35:43] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-818a-98d6-4f9a-c55e.res6.spectrum.com)
[18:36:06] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[18:36:37] <SnoopJ> so yea, 51515 is the part number of the inventor kit that comes in, but it looks like they don't sell it separately. Anyway, just wanted to be sure the firmware wasn't for a different part.
[18:37:03] *** Joins: darksun (~darksun@user/darksun)
[18:38:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:38:34] *** Quits: wondiws (~Jasper@D57C89AA.static.ziggozakelijk.nl) (Quit: Leaving)
[18:39:22] *** Joins: cuz (~user@38.140.58.234)
[18:39:42] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:39:55] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[18:40:02] <dba> is there any reason why I am getting a response like this https://bpa.st/B3NA while in browser is returning complete JSON?
[18:40:04] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[18:40:23] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[18:40:43] <dba> I meant  an HTTP post request response
[18:41:41] *** Joins: node1 (~node1@user/node1)
[18:42:20] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:42:26] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[18:42:58] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[18:43:05] *** Joins: ioe (~is0ke3@user/is0ke3)
[18:44:32] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[18:45:48] *** Parts: mmarshall540 (~user@68-252-220-225.lightspeed.tukrga.sbcglobal.net) (ERC (IRC client for Emacs 28.0.50))
[18:46:53] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 246 seconds)
[18:46:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:48:02] *** Joins: wyclif (~wyclif@user/wyclif)
[18:48:32] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[18:50:07] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[18:50:20] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[18:50:42] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[18:51:14] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:52:19] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 255 seconds)
[18:52:26] *** Joins: Trashlord__ (~trash@user/trashlord)
[18:52:46] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[18:52:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[18:53:17] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:53:29] *** Joins: wyclif (~wyclif@user/wyclif)
[18:53:42] *** Joins: magla (~gelignite@55d47ecb.access.ecotel.net)
[18:55:43] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[18:57:33] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[18:58:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[18:58:56] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:59:01] *** Joins: wyclif (~wyclif@user/wyclif)
[18:59:18] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:59:20] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:00:05] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[19:01:41] <grawity> dba: how are you making the HTTP post request
[19:02:33] *** Joins: Untoldent (~63f8c375@ircip2.mibbit.com)
[19:03:45] <nedbat> graingert: what are you using it for? I don't want to keep a debugging branch forever
[19:03:48] *** Joins: ambv_ (~ambv@c138-59.icpnet.pl)
[19:04:13] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-2411-ffa7-3e81-4070.res6.spectrum.com) (Quit: Leaving.)
[19:05:00] <graingert> nedbat: I've opened a PR to fix it in twisted, but we've got a release branch prepped so it's slightly annoying to backport the changes
[19:05:07] *** Quits: ambv (~ambv@c138-59.icpnet.pl) (Ping timeout: 258 seconds)
[19:05:21] <nedbat> graingert: i can put it back temporarily, but we need a plan to get rid of it.
[19:06:41] <nedbat> graingert: actually, i'm not sure how to put it back
[19:06:50] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:07:05] <graingert> https://github.com/twisted/twisted/pull/1633/files nedbat
[19:07:36] <mawk> how do I tell pylint to not parse my FIXME
[19:07:43] *** Joins: ice9 (~ice9@user/ice9)
[19:07:47] <nedbat> graingert: i don't understand what you are showing me
[19:08:08] <mawk> like this? # FIXME: blah  # pylint: disable=fixme
[19:08:11] <mawk> that looks ugly
[19:08:21] <graingert> nedbat: sorry that's just the pr I was talking about
[19:08:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:08:50] <nedbat> mawk: put "disable = fixme" in a pylintrc file
[19:09:01] <mawk> if I do that my colleagues will notice nedbat
[19:09:07] <mawk> and they won't approve the code change
[19:09:33] <nedbat> mawk: sounds like you need to talk to them about it then.  Won't they notice if you add the disable to each line?
[19:09:41] *** Quits: tims (~tims@193-82-234-90.tpgi.com.au) (Ping timeout: 265 seconds)
[19:09:46] <mawk> it's just one little minuscule line where a FIXME makes total sense
[19:10:04] <mawk> I could try to convince them
[19:10:13] *** Joins: wyclif (~wyclif@user/wyclif)
[19:11:18] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-30d8-17cc-1412-0182.res6.spectrum.com)
[19:11:21] <mawk> but so there is no way to inline disable a pylint error on a comment?
[19:11:25] <mawk> I know it works for code
[19:11:51] *** Joins: shad (~shad@user/shad)
[19:12:02] <shtrb> SnoopJ, maybe I'm using the wrong tool ? could there be a different tool I could be using on Debian ?
[19:12:26] <nedbat> graingert: i've made a nedbat/another-1010 branch which i think is what you had before.
[19:12:35] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[19:12:47] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:cc77:d0dc:1b58:8398) (Quit: Leaving)
[19:12:47] <graingert> nedbat: nice tyvm
[19:12:57] <mawk> can you remind what you're trying to do shtrb ?
[19:13:04] <mawk> the backlog is far away
[19:13:04] <SnoopJ> shtrb, I think what's missing here is the library you're trying to import on the device itself.
[19:13:05] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[19:13:18] <graingert> nedbat: it doesn't have to be exactly the same just close enough, I hope to be on a release version shortly
[19:13:26] <SnoopJ> mawk, they are trying to `import mindstorms` on a LEGO device (a Large Technic Hub) and it isn't there.
[19:13:34] <mawk> ah
[19:13:47] <mawk> I see
[19:13:53] * shtrb maybe fat but not fat to be called in plural 
[19:13:56] <SnoopJ> and they are trying to avoid reflashing the firmware
[19:14:01] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[19:14:09] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:495c:18ba:d824:98cf)
[19:14:17] <SnoopJ> shtrb, that was intended to be a singular they, but if you have another preference I'm happy to use it :)
[19:14:25] <mawk> it's usually hard to brick devices like that shtrb , you shouldn't be afraid to reflash the firmware if you find clear instructions on how to do it
[19:14:36] <shtrb> SnoopJ, a he would be nice, or just shtrb
[19:14:39] <mawk> I say usually but sometimes it can go horribly wrong, just read what internet says
[19:14:47] <SnoopJ> mawk, he said it's not his device
[19:14:51] <mawk> yeah I read that
[19:14:58] <shtrb> mawk, it's not mine, so I don't wish to even have the chance to brick the brick
[19:14:58] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[19:15:02] <mawk> lol
[19:15:40] <SnoopJ> I'm not sure about the brickability of the STM32. The ESP32 makes it very hard indeed, the bootloader is in ROM :)
[19:15:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[19:16:24] <shtrb> It's almost a â‚¬370 device (that a lot to brick for me), specifically it a pain in the gluteus maximus to get (it's an educational device )
[19:16:27] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[19:16:54] *** Joins: wyclif (~wyclif@user/wyclif)
[19:17:09] *** Parts: Nikopol (nikopol@user/astrorigin) (Bye!)
[19:17:33] <mawk> commercial stm32 products have usually readout protection enabled SnoopJ, it means you can't read or (often) write code to it via standard ST tools, you rely on the custom bootloader made by the company selling the product
[19:17:41] <mawk> at least that's the most usual thing I see
[19:17:58] <mawk> so if they have a bug in it it becomes a brick
[19:18:04] <SnoopJ> bummer
[19:18:12] *** Joins: sid-maddy (~sid-maddy@103.76.57.65)
[19:19:14] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:19:26] *** Quits: computeiro (~Wender@179.104.253.148) (Remote host closed the connection)
[19:20:10] <mawk> but with a blank device the bootloader is in rom as well; and usually you don't even need a bootloader as you use JTAG; but readout protection disables access to this
[19:20:48] <SnoopJ> mawk, that's definitely a lot more advanced than a typical Mindstorms workflow; if flashing firmware is off the table here, I think getting at the hardware will definitely be.
[19:20:58] <mawk> if you want a cheaper educational device the same st chip probably retails on a demo board for less than 15â‚¬ shtrb
[19:21:03] <mawk> but it won't be lego branded
[19:21:05] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: leaving)
[19:21:07] <SnoopJ> mawk, they want a solution to the problem they asked about
[19:21:11] <mawk> yeah
[19:21:12] <SnoopJ> he wants*, sorry
[19:21:50] *** Joins: PdimH (~pdimh@user/pdimh)
[19:22:10] <SnoopJ> The only possible solution I can imagine given the additional constraint of not reflashing is that there might be a way to load the desired module as a .mpy, but...I kinda doubt this. There are some pretty strong limitations on that (namely, you can only use symbols explicitly exported by the host MicroPython)
[19:22:15] <shtrb> mawk, I manged to brick a blox box :D
[19:22:23] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:23:33] *** Joins: sid_maddy (~sid-maddy@2409:4040:d1b:a77e::ecc8:2707)
[19:23:34] <SnoopJ> as far as I can tell, that README is claiming this module is available in retail firmware, but I can't find any information about it at all really
[19:23:44] *** Joins: t3nj1n (~t3nj1n@108.5.82.237)
[19:23:53] <SnoopJ> pybricks seems to be "the way people do it"
[19:24:00] *** Quits: sid-maddy (~sid-maddy@103.76.57.65) (Ping timeout: 255 seconds)
[19:25:09] <shtrb> "Pybricks for LEGO Education SPIKE Prime and LEGO MINDSTORMS Robot Inventor is currently still in beta."
[19:25:28] <SnoopJ> yea
[19:25:34] *** Quits: locsmif (~none@user/locsmif) (Quit: leaving)
[19:26:13] *** Quits: sid_maddy (~sid-maddy@2409:4040:d1b:a77e::ecc8:2707) (Client Quit)
[19:26:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[19:27:25] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:ade3:efdb:74c6:3aa8) (Ping timeout: 255 seconds)
[19:27:29] <SnoopJ> with what's on that device right now, you may be limited to whatever's in `hub`
[19:27:57] *** Joins: wyclif (~wyclif@user/wyclif)
[19:28:14] <shtrb> Such a big company and couldn't release a proper libraries :D
[19:28:20] *** Joins: ecraven (~ecraven@user/nex)
[19:28:38] <ecraven> hello ;) how do libraries like https://trio.readthedocs.io/en/stable/ manage to interrupt blocking syscalls?
[19:28:38] *** Joins: hposca (~hposca@node-1w7jr9phoke2tu92kv7e533az.ipv6.telus.net)
[19:28:47] <ecraven> does the python interpreter provide hooks for this sort of behaviour?
[19:28:59] <SnoopJ> shtrb, you said earlier this is an educational device, but 51515 appears to be retail. Are you quite sure you have the one I linked earlier (the blue brick) and not the SPIKE Prime hub (which is similar, but yellow)?
[19:29:14] <shtrb> yes
[19:29:17] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[19:29:19] <bjs> ecraven: they do it by not doing that :)
[19:29:53] <SnoopJ> shtrb, the official `hub` module is apparently documented here: https://lego.github.io/MINDSTORMS-Robot-Inventor-hub-API/
[19:30:54] <shtrb> thanks
[19:30:55] <bjs> ecraven: is there a particular thing you wanted to ask about? trio is big and does many things that are traditionally a syscall
[19:31:05] *** Quits: Untoldent (~63f8c375@ircip2.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[19:31:39] <SnoopJ> shtrb, it does seem like you can do quite a bit with `hub`, so depending on what you're trying to do it might not be Game Over, but sorry we didn't have happier answers :)
[19:32:35] <shtrb> You still gave me very important information : 1. micropython don't have it probably. 2. I'm doing it wrong
[19:32:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:32:51] <ecraven> bjs: I was just wondering how they manage to do this. or does trio force you to use some custom IO functions instead of the normal ones?
[19:33:22] <SnoopJ> That README strikes me as out of date at best, and flat-out wrong at worst, considering how few results there are for searching for "import mindstorms" :/
[19:33:28] *** Joins: wyclif (~wyclif@user/wyclif)
[19:34:07] *** Joins: pnoud (~pnoud@user/pnoud)
[19:34:35] <bjs> ecraven: well there's the select() syscall
[19:34:50] <bjs> (or the modern epoll, and similar variants on other systems)
[19:35:00] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[19:35:22] <mawk> ecraven: if you want a theoretical answer, "long" syscalls such as read, write, recv, send, pwrite, pread, and so on; can all be interrupted by signals
[19:35:30] <mawk> in particular you can set yourself to receive a SIGLARM signal
[19:35:35] <bjs> and for things that it cannot use select() (or epoll/kqueue/whatever) for,  trio can spawn a thread and call the blocking syscall in that
[19:35:39] <bjs> (e.g. for typical file operations)
[19:35:40] <mawk> all other syscalls are actually interrupted to, but they are automatically restarted
[19:36:14] <ecraven> mawk: but aren't signals per process, not per thread? so this only works in single-threaded applications? (yes, I know that trio only supports one thread, but if I were to want to write such a thing for multiple threads, signals wouldn't work, I believe?)
[19:36:29] <mawk> well bjs answered you for that part ecraven , they don't use blocking syscalls
[19:36:34] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[19:36:36] <mawk> or if they do, it's its own  thread
[19:37:06] <ecraven> ok, so they "sidestep" the problem ;) thanks!
[19:37:11] <bjs> ecraven: imagine you had a bunch of sockets that you `await`ing a read from.
[19:37:14] <mawk> also you can kill a particular thread
[19:37:23] <mawk> see pthread_kill(3)
[19:37:27] <mawk> at least it appears to be the case
[19:37:43] <mawk> when you kill a whole process the signal is intercepted by a randomly chosen thread
[19:37:43] <bjs> ecraven: the way an async library will work will select() on those sockets with a timeout.  If one of them becomes available it'll do the synchronous (blocking but really actually instant) read on the socket and continue that coro
[19:37:49] <bjs> if it times out it schedules something else
[19:38:12] <mawk> they do blocking read with a timeout of 0, in a sense
[19:38:20] <mawk> if nothing is available to read, returns immediately
[19:38:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[19:38:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 246 seconds)
[19:39:03] *** Joins: wyclif (~wyclif@user/wyclif)
[19:39:04] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[19:39:16] *** Joins: akk (~akk@75.161.155.222)
[19:39:31] <ecraven> bjs: yes, but if you use "normal" IO functions (not the ones provided by Trio), things will go wrong, right?
[19:39:38] <mawk> not if you use them right
[19:39:52] <mawk> you can use them exactly like trio is using them, i.e. with select/poll/epoll and non-blocking read/writes
[19:39:53] <bjs> ecraven: well, all trio is doing is calling those ones just at the right time so that it doesn't mess up trio
[19:40:00] <bjs> so no... but probably yes
[19:40:31] <ecraven> yea, sorry for being imprecise, if you call blocking IO functions without a timeout yourself, there's nothing Trio (or any other library) can do about it, right?
[19:40:32] <mawk> you set your socket to be "non-blocking", which means read/write will never block; then you use poll/select to know when there is something to read or write
[19:40:49] <mawk> what do you mean by "do about it"?
[19:40:49] <bjs> ecraven: like if you have a socket, you have to perform the socket's actual blocking recv() call at some point
[19:41:06] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[19:41:12] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:41:29] <ecraven> mawk: there's no way to tell python "if a blocking read call is made, do this thing instead", or some other way of intercepting and modifying blocking calls?
[19:41:29] <bjs> trio has its own SocketType, where you can `await sock.recv()`. The way this works is that trio *doesn't* call recv() *until* it has data it can read
[19:41:48] <ecraven> thank you very much for explaining this!
[19:41:49] <mawk> yes ecraven if you set the socket to be non-blocking then all blocking calls will fail if there is nothing to read
[19:41:52] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[19:41:54] <mawk> it's probably how trio does under the hood
[19:42:07] <bjs> it's doing what I said it's doing :)
[19:42:20] <mawk> sure
[19:42:27] <mawk> but it's probably, additionnally, setting non-blocking mode
[19:42:35] <ecraven> what I mean is, if I just open a network socket in blocking mode, and read from that, everything will hang, and there's nothing Trio can do about it, I guess?
[19:43:03] <bjs> mawk: yes it is, but only because it has to call the recv first anyway
[19:43:07] <bjs> for error checking
[19:43:16] <bjs> so it can catch the BlockingError, and then do the epoll/select wait
[19:43:26] <bjs> _then_ do the sync recv
[19:43:37] <mawk> ecraven: the whole thread will hang yes
[19:43:53] <bjs> ecraven: yeah, if you block the thread trio cannot run
[19:44:24] <ecraven> thanks again for explaining ;)
[19:44:29] <bjs> ecraven: trio is some Python code that runs when your code reaches an `await`. Anything blocking means your code doesn't reach an `await` so trio cannot run its own code
[19:44:52] <ecraven> yea, that's what I figured
[19:44:53] <anddam> I need to specify the python version in a setuptool requirement, from PEP 508 I see I should use python_version in the dependency rule, is   "foo>1.5;python_version>=3" good for asking a foo version greater than 1.5 and python 3 ?
[19:46:19] *** Quits: baltazar (~baltazar@87-97-81-102.pool.digikabel.hu) (Ping timeout: 255 seconds)
[19:47:55] *** Joins: baltazar (~baltazar@84-236-20-145.pool.digikabel.hu)
[19:48:30] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:48:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:50:03] *** Joins: wyclif (~wyclif@user/wyclif)
[19:53:00] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 252 seconds)
[19:54:45] *** Joins: boxelephant (~boxelepha@209.143.87.130)
[19:54:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[19:55:22] *** Quits: tspng (~tspng@2a02:168:a1a1:1:58dd:5fb:1e35:120a) (Remote host closed the connection)
[19:55:26] *** Joins: stormbytes (~textual@ool-18e4a56c.dyn.optonline.net)
[19:55:53] *** Joins: wyclif (~wyclif@user/wyclif)
[19:56:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 265 seconds)
[19:56:59] *** Quits: stormbytes (~textual@ool-18e4a56c.dyn.optonline.net) (Client Quit)
[19:57:31] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:00:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:00:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:01:03] *** Joins: hafat (~hafat@95.70.168.45)
[20:01:20] *** Joins: wyclif (~wyclif@user/wyclif)
[20:01:49] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Ping timeout: 268 seconds)
[20:05:57] *** Joins: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca)
[20:06:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:06:48] *** Joins: wyclif (~wyclif@user/wyclif)
[20:07:17] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[20:07:42] *** Joins: derelict (~derelict@user/derelict)
[20:07:59] *** Quits: Roey (~Roey@user/Roey) (Ping timeout: 268 seconds)
[20:08:20] *** Joins: LiftLeft (~LiftLeft@154.21.114.43)
[20:11:14] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 246 seconds)
[20:11:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:12:19] *** Joins: wyclif (~wyclif@user/wyclif)
[20:12:26] *** Quits: rsx (~dummy@ppp-188-174-143-186.dynamic.mnet-online.de) (Quit: rsx)
[20:12:41] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:14:41] <dav1d> I am using `pip install --upgrade git+https://github.com/dav1dde/glad.git@glad2` after pushing a new commit, does pip not install the new commit hash? It seems like it skips it because it is already installed with the same version?
[20:15:41] <mawk> ecraven you can try writing some async code yourself to learn it
[20:15:53] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:15:59] <gcbirzan> In pandas, can I create a column in a dataframe that has the contents of another column at a different index? Something like getting the value of column foo a week ago (my indices are timestamps) in to foo_last_week.
[20:16:06] <mawk> if learning Linux syscalls is of any interest to you
[20:17:10] <dba> grawity, request.post(url,headers=headers, json=param)
[20:17:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[20:17:45] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[20:17:48] *** Joins: wyclif (~wyclif@user/wyclif)
[20:18:49] <stealth_> mawk, whats this about linux syscalls? i am only setting the last bit of the comment
[20:19:08] <mawk> what do you mean?
[20:19:12] <mawk> it was for ecraven
[20:19:23] <SnoopJ> gcbirzan, do you want to select the corresponding data once and store it as a new column, or are you looking for a dynamic-view kind of thing?
[20:19:28] <stealth_> mawk, o, i just logged in
[20:19:43] <mawk> do you have a syscall question?
[20:19:53] <stealth_> mawk, no
[20:20:08] *** Joins: shad (~shad@user/shad)
[20:20:17] <dav1d> looks like it needs a `--force-reinstall`
[20:20:48] <gcbirzan> SnoopJ: One time thing
[20:21:08] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:22:08] <graingert> ecraven: re:  "if a blocking read call is made, do this thing instead". There's some movement in this area. Eg the pypy sandbox 2
[20:22:08] *** Quits: nanonyme1 (nanonyme@kapsi.fi) (Ping timeout: 256 seconds)
[20:22:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[20:22:57] <gcbirzan> SnoopJ: Though, can you do a dyamic view?
[20:23:17] <SnoopJ> gcbirzan, I don't think so
[20:23:20] *** Joins: wyclif (~wyclif@user/wyclif)
[20:23:31] <SnoopJ> gcbirzan, is the DataFrame's index a datetime?
[20:24:20] <graingert> ecraven: you can do stuff like trap when a syscall is about to be made then suspend the sandbox handle the syscall however you like then resume the sandbox anywhere else
[20:24:59] <graingert> But support for it is somewhat lacking
[20:25:03] *** Joins: nanonyme1 (nanonyme@kapsi.fi)
[20:25:12] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:25:27] <gcbirzan> SnoopJ: Yup
[20:25:35] <gcbirzan> SnoopJ:  I mean, it's a pandas Timestamp thingy
[20:25:58] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:25:59] <stealth_> graingert, whats the bigger scope of what ecraven is trying to do?
[20:26:16] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-acff-de01-3c77-7564.res6.spectrum.com)
[20:26:18] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:a95f:2680:bfdb:1d22)
[20:28:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[20:28:51] *** Joins: wyclif (~wyclif@user/wyclif)
[20:28:56] <graingert> stealth_: Dunno
[20:29:07] <stealth_> graingert, ok
[20:29:11] <graingert> stealth_: I just want more people looking at sandboxing python
[20:29:25] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:29:25] <graingert> Then maybe someone will fund it for me
[20:29:52] <stealth_> graingert, you mean limit what python can do within python?
[20:29:55] *** Joins: cer-0 (~cer-0@189.228.170.154)
[20:30:03] <graingert> stealth_: all sorts of stuff
[20:30:27] <stealth_> graingert, as far as i know you can't limit python within python.
[20:30:27] <graingert> My usecase is pickling the whole state and doing time travel debugging
[20:30:46] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[20:31:56] <SnoopJ> gcbirzan, I think the spelling you're looking for is something like `df["foo_last_week"] = df.loc[idx, "foo"]` where `idx` is an appropriate temporal index, probably something like `idx = df.index + pd.Timedelta(weeks=-1)`
[20:32:00] <graingert> stealth_: https://mail.python.org/pipermail/pypy-dev/2019-August/015797.html
[20:32:11] <gcbirzan> SnoopJ: Let me try, thanks
[20:32:23] <graingert> stealth_: limit what Python within python can do within Python within python
[20:32:26] <SnoopJ> gcbirzan, with that exact spelling you'll probably have some bounds errors, so you might need to adjust the construction of `idx`, but hopefully the .loc assignment makes sense
[20:32:40] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 255 seconds)
[20:32:46] <graingert> stealth_: you need to think more in the box
[20:33:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:33:57] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:495c:18ba:d824:98cf) (Quit: Leaving)
[20:34:21] *** Joins: wyclif (~wyclif@user/wyclif)
[20:34:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:34:45] <stealth_> graingert, you could write it over webassembly
[20:35:35] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[20:36:01] <gcbirzan> The loc one does, but. What it's trying to do is substract 1 week from all the values of the index then try to find that list in the index of df
[20:36:21] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:36:36] <SnoopJ> gcbirzan, right, which is gonna fail when that shifted value isn't in the index
[20:36:41] <gcbirzan> ah
[20:36:47] *** Quits: doev (~doev@p4ff445f4.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[20:36:54] <gcbirzan> SnoopJ: any way to fill that with nans?
[20:37:11] *** Joins: Roey (~Roey@user/Roey)
[20:37:14] <SnoopJ> it should already put NaN in any row not included in `idx`
[20:37:25] <SnoopJ> which would nominally be the last one if your data are uniformly spaced
[20:37:30] *** Quits: shtrb (~shtrb@user/shtrb) (Quit: Leaving)
[20:39:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:39:04] <gcbirzan> So you mean, filter df.index on >  df.index[0] + pd.Timedelta(weeks=1) ?
[20:39:22] <graingert> stealth_: Sure wasm wasabi and all that are great in theory, and there's some very cool practical applications. But it's not easy enough yet
[20:39:37] <graingert> It's only a matter of time though
[20:39:52] *** Joins: wyclif (~wyclif@user/wyclif)
[20:39:59] *** Quits: noneco (~noneco@dslb-090-186-083-254.090.186.pools.vodafone-ip.de) (Remote host closed the connection)
[20:40:10] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[20:40:46] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[20:41:01] <stealth_> graingert, it sure wouldn't be easy
[20:42:02] <SnoopJ> gcbirzan, yea maybe `idx = idx[idx > df.index[0]]` or somesuch.
[20:42:15] <SnoopJ> probably a lot of ways to build this index, I'm not really sure what the most idiomatic one is
[20:42:28] <gcbirzan> SnoopJ: I did my way and it works, but yeah, that should al so work
[20:42:38] <SnoopJ> gcbirzan, you filtered on the df itself?
[20:42:59] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[20:43:38] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:43:51] *** Quits: dudek (~dudek@185.150.236.155) (Read error: Connection reset by peer)
[20:44:01] *** Quits: Liblx (~Alex@2a02:810c:280:59c:0:7f08:a8a4:f585) (Quit: WeeChat 3.1)
[20:44:18] *** Joins: computeiro (~Wender@189.37.68.3)
[20:44:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[20:45:04] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:45:07] *** Joins: Barones (~Barones@2804:48dc:8500:0:e81d:c8d1:6a1e:4da2)
[20:45:15] <gcbirzan> SnoopJ: idx = toki_df.index[toki_df.index >= toki_df.index[0] + pd.Timedelta(weeks=1)] + pd.Timedelta(weeks=-1)
[20:45:18] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[20:45:23] *** Joins: wyclif (~wyclif@user/wyclif)
[20:45:25] *** Joins: glestrade (~glestrade@wsip-174-79-241-94.sd.sd.cox.net)
[20:45:27] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:45:29] <gcbirzan> when creating the idx, I only picked the ones that were not in the first week
[20:45:49] <gcbirzan> okay, no
[20:46:15] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[20:46:30] *** Joins: cuz (~user@38.140.58.234)
[20:47:36] <SnoopJ> no?
[20:48:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[20:48:08] <gcbirzan> SnoopJ: That gives me in sum_foo the value from today
[20:48:11] <gcbirzan> or, well, from this hour
[20:48:27] <gcbirzan> dammit pycharm, why no create gist in this console
[20:49:41] <gcbirzan> and it starts from the first row, not a week forward
[20:49:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:49:43] *** Joins: skapata (~Skapata@user/skapata)
[20:49:55] *** Trashlord__ is now known as Trashlord
[20:50:43] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:52:58] *** Joins: kor1 (~kor1@user/kor1)
[20:55:07] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:55:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[20:56:01] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:56:25] *** Joins: wyclif (~wyclif@user/wyclif)
[20:56:42] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[20:57:52] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[20:59:48] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:01:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:01:55] *** Joins: wyclif (~wyclif@user/wyclif)
[21:02:02] *** Joins: pnoud (~pnoud@user/pnoud)
[21:02:09] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[21:02:15] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:02:50] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:03:56] *** Joins: Gerula_ (~Gerula@user/gerula)
[21:03:56] *** Quits: Gerula (~Gerula@user/gerula) (Killed (osmium.libera.chat (Nickname regained by services)))
[21:03:56] *** Gerula_ is now known as Gerula
[21:04:10] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 255 seconds)
[21:04:46] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:04:54] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[21:05:10] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:05:16] *** Joins: bambams (~bambams@user/bambams)
[21:05:35] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[21:06:18] *** Joins: bjonnh (~jo@about/aquilenet/bjonnh)
[21:06:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:06:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 256 seconds)
[21:07:14] <bjonnh> I'm wondering why in pandas set(list(dataframe.index)) contains nanâ€¦ where as {str(i) for i in dataframe.index} does not
[21:07:27] *** Joins: wyclif (~wyclif@user/wyclif)
[21:08:13] <bjs> bjonnh: how are you checking for nan?  just printing it and looking at it?
[21:08:41] *** pacbard_ is now known as pacbard
[21:09:20] <bjonnh> yes
[21:09:29] *** Joins: yemel (~yemel@user/yemel)
[21:09:33] *** bambams is now known as bam32
[21:09:39] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 268 seconds)
[21:11:41] <mat001> Hey. Can I access th einternals/code of a package published on PyPI that I imported from PyPI?
[21:12:05] <mat001> I guess the whole purpose of publishing is to not expose the unnecessary low level details
[21:12:08] <mat001> so not sure
[21:13:05] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[21:13:14] <BtbN> Click the link to Github that's usually on there
[21:13:24] <BtbN> Otherwise dig it out of your site-packages
[21:13:36] *** Quits: marduk (~marduk@216.243.54.166) (Remote host closed the connection)
[21:13:39] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:13:42] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[21:13:46] <bjs> mat001: any particular pypi package in mind?
[21:14:07] <mat001> hmm. I have an application that imports the package. The case that I'd like to see if I bump up the version of one of the libraries inside that py packageto see if it works.
[21:14:13] <mat001> Yes, optimizely-sdk
[21:14:43] <bjs> mat001: https://pypi.org/project/optimizely-sdk/ has a link to the Homepage to https://github.com/optimizely/python-sdk
[21:14:55] <bjs> so you can look at the code there
[21:15:18] <bjs> if you actually want to tinker with the code locally,  if you used `pip` it'll have installed it into some known location
[21:15:25] <bjs> how did you install it?
[21:15:27] <mdk> Ohh nice, there's Brython on the top page of news.ycombinator.com, go +1 :)
[21:15:34] *** Joins: bambams (~bambams@user/bambams)
[21:15:49] <gcbirzan> SnoopJ: And that makes sense, the dataframe won't know we came from one week ago... I guess if I can shift them in the index, that'd be okay
[21:16:04] <mat001> bjs: yeah, thx. I work on that sdk actively :-). Its just that I use it - import it via PyPI in another application. I need to be able to manipulate the internals of optimizely-sdk from within that application, that specific optimizelyt-sdk that I imported. Not in PyPI
[21:16:25] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[21:16:30] <mat001> installed it via pi p install
[21:16:40] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[21:17:19] *** Joins: marduk (~marduk@216.243.54.166)
[21:17:30] <bjs> mat001: wouldn't the easiest way just to be to install the version you have locally rather than the one from pypi then
[21:17:46] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:17:48] <bjs> rather than trying to tinker with the one from pypi and things going wrong when pip decides to touch it
[21:17:57] *** Joins: mandeep (uid394387@id-394387.tooting.irccloud.com)
[21:18:07] *** Joins: mickey (~user@user/mickey)
[21:18:12] <mat001> bjs: how do I install th elocal version? You mean from github master?
[21:18:25] *** Quits: pradhvan (~pradhvan@103.94.114.235) (Quit: Leaving)
[21:18:42] <bjs> mat001: well yeah,  you should be able to cd to the directory and go `pip install -e .`
[21:19:20] <bjs> (or just `pip install .`, the -e means you can change the code without having to re-install, but if you have other things than just Python code it's not always as useful)
[21:19:29] *** Joins: pnoud (~pnoud@user/pnoud)
[21:20:05] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[21:20:07] <mat001> it's a complex app, not sure if installing it locally would work, but I could try.  There is a bunch if Js code ther as well
[21:21:11] <BtbN> Why would it make any difference if pip fetches it from pypi or from a local checkout?
[21:22:03] *** Joins: grateful (~grateful@user/grateful)
[21:24:16] <mat001> BtbN: Good question, I can try, there are a bunch of docker containers that are spun and installation from requirements file takes place at a particular time in the setup. You're probably right that it shouldn't affect it but I just see lots of moving parts
[21:24:25] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 255 seconds)
[21:24:28] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:24:44] *** Joins: Auron (~Auron956@user/auron)
[21:25:02] <BtbN> No idea how you pull docker into that
[21:25:14] <BtbN> it's just a python package you install via pip?
[21:26:32] <nubonix> not sure if this is a python question... but ill try to ask here anways. so im trying to close a .jar program i started, but it shows me that the `top level proccess`?  is java.exe and that the subprocess is the one that i actually want to close, but when i kill the top level process, it also kills another program that i dont want closed. how does this relate to python: i only know python, and id like to use python only to do im
[21:26:32] <nubonix> thinking that is like running a python program, and killing python.exe instead of actually killing the program that is being run by python
[21:26:34] <grateful> silly question anyone recommend a good printer company for printing custom labels from an api/csv? looking to basically create a simple third party app using python for my store
[21:27:17] <grateful> currently the POS we are using isn't designed for any such application
[21:27:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:27:57] <grateful> trying to automate the process a bit to make one sticker for the front of the store one for the back room
[21:28:20] <grateful> been looking at brother
[21:28:27] *** Joins: wyclif (~wyclif@user/wyclif)
[21:28:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[21:29:01] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Remote host closed the connection)
[21:29:02] *** Joins: pnoud (~pnoud@user/pnoud)
[21:30:42] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[21:31:23] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[21:33:11] *** Quits: glestrade (~glestrade@wsip-174-79-241-94.sd.sd.cox.net) (Quit: glestrade)
[21:33:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:33:57] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:08] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[21:35:10] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[21:35:44] *** Joins: DaNeenjah (~jake@adsl-74-230-9-66.hsv.bellsouth.net)
[21:37:42] *** Joins: gustik (~gustik@2a01:c844:2416:5920:437:26a4:3a9:3895)
[21:38:07] *** Joins: han-solo (~hanish@user/han-solo)
[21:39:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:39:12] *** Quits: gustik (~gustik@2a01:c844:2416:5920:437:26a4:3a9:3895) (Quit: Leaving)
[21:39:27] *** Joins: wyclif (~wyclif@user/wyclif)
[21:39:29] *** Joins: gustik (~gustik@2a01:c844:2416:5920:437:26a4:3a9:3895)
[21:39:38] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[21:41:03] <grateful> nvm everything online seems to recommend zebra > brother
[21:41:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:43:57] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:44:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[21:44:58] *** Joins: wyclif (~wyclif@user/wyclif)
[21:45:06] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05) (Remote host closed the connection)
[21:46:13] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05)
[21:46:38] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:48:56] *** Quits: rajkosto (~rajkosto@178-221-125-154.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[21:49:46] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:50:04] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 255 seconds)
[21:50:31] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:52:57] *** Joins: lexandrop (~lex@user/lexandrop)
[21:54:11] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[21:54:52] <bambams> var @jenova = 2;
[21:55:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:55:32] <bambams> Oops. Wrong channel.
[21:55:39] *** Quits: DaNeenjah (~jake@adsl-74-230-9-66.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[21:55:44] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[21:55:54] <ecraven> stealth_: just trying to understand how structured concurrency might be implemented
[21:55:59] *** Joins: wyclif (~wyclif@user/wyclif)
[21:56:02] <ecraven> by looking at examples where it *is* actually implemented ;)
[21:56:14] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[21:56:23] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[21:57:19] *** Joins: drewa (~drewa@user/drew)
[21:57:44] *** Quits: lexandrop (~lex@user/lexandrop) (Ping timeout: 240 seconds)
[21:57:47] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Quit: WeeChat 3.3-dev)
[21:58:11] <drewa> I am using a build machine at work that only has python3.6 but I need 3.8 for a script I am working with. I built python 3.8 locally, but it looks like it might be using python packages installed to the local machine that were built for 3.6. Is there a way to tell a venv to NOT use modules outside of the venv?
[21:59:52] *** Joins: pnoud (~pnoud@user/pnoud)
[21:59:58] <Yhg1s> drewa: it wouldn't use packages installed for other Python versions, unless you have the PYTHONPATH or PYTHONHOME environment variables set.
[22:00:01] <SnoopJ> drewa, that should be the default behavior, but it's possible PYTHONPATH or something else is causing this. What does `path/to/venv/bin/python3 -m site` give you?
[22:00:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:01:30] *** Joins: wyclif (~wyclif@user/wyclif)
[22:01:55] *** Joins: junktext (~junktext@77.247.181.217)
[22:03:28] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[22:03:52] <drewa> ok actually it looks fine http://0x0.st/-VQR.txt
[22:04:03] <drewa> I think I was just assuming wrong behavior
[22:04:13] <drewa> but really the issue is with this tool :P
[22:04:36] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05) (Remote host closed the connection)
[22:04:45] <gcbirzan> SnoopJ: toki_df["sum_last_week"] = toki_df["sum"].shift(7 * 24) that's the solution I came up with. not great, since I have to know the granularity of the data, but good eough :)
[22:06:22] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05)
[22:06:23] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 268 seconds)
[22:06:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:07:00] *** Joins: wyclif (~wyclif@user/wyclif)
[22:07:47] <jinsun> gcbirzan: if you have datetime index you can shift like this too, df.shift(freq=pd.offsets.Week(1))
[22:08:10] <SnoopJ> yea, specifying freq gives you control here
[22:08:14] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[22:08:57] <SnoopJ> I think .shift(1, freq="W") does the same thing but the pd.offsets spelling is less mysterious
[22:09:16] <gcbirzan> jinsun: perfect, thanks
[22:10:14] *** Joins: audiocat (~audio@2603-8081-1800-00ad-44ce-b4a0-a90f-8858.res6.spectrum.com)
[22:10:29] *** Joins: ttys000 (~ttys000@user/ttys000)
[22:11:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:12:34] *** Joins: greedom (~greedom@2001:16b8:2edf:3e00:831d:9bf:1c3f:4d50)
[22:13:44] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 240 seconds)
[22:14:30] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[22:15:07] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:17:54] *** Joins: jay-m126_ (~jay-m@154.72.161.58)
[22:18:01] *** Joins: wyclif (~wyclif@user/wyclif)
[22:18:06] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 268 seconds)
[22:18:39] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:19:05] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[22:19:23] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[22:20:00] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:20:19] *** Quits: jay-m126_ (~jay-m@154.72.161.58) (Client Quit)
[22:20:41] *** Joins: jay-m126_ (~jay-m@154.72.161.58)
[22:20:49] *** Quits: cer-0 (~cer-0@189.228.170.154) (Quit: leaving)
[22:21:28] *** Joins: dshikoh (~dshikoh@user/dshikoh)
[22:21:30] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 252 seconds)
[22:21:50] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[22:22:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:23:31] *** Joins: wyclif (~wyclif@user/wyclif)
[22:23:32] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:23:34] *** Quits: codl (~codl@user/codl) (Read error: Connection reset by peer)
[22:23:41] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[22:23:55] *** Joins: codl (~codl@user/codl)
[22:24:08] <philipp64|work> Whatâ€™s a good channel for asking about using mod_wsgi (with Flask in this case)?
[22:24:19] <grawity> I think #python is a good one?
[22:24:26] *** Quits: dshikoh (~dshikoh@user/dshikoh) (Client Quit)
[22:24:57] <SnoopJ> philipp64|work, it's topical here
[22:25:00] <philipp64|work> Okay, here goesâ€¦
[22:25:37] <philipp64|work> Hi. I can't find documentation for mod_wsgi.so and the application() prototype... Where should I be looking?  And what's the relationship between the 1st arg to WSGIScriptAlias in the apache config, and the 1st arg to the @app.route() decorator?  If I have, for example, WSGIScriptAlias /base ... then can I have a bunch of @app.route('/base/foo', ...) and @app.route('/base/bar', ...) decorators?  Or do I need to drop /base if that's handled by the
[22:25:45] <philipp64|work> WSGIScriptAlias directive?
[22:26:43] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[22:26:47] <philipp64|work> All of the examples Iâ€™ve found only support a single callable function in the mod_wsgi.so documentationâ€¦
[22:26:57] *** Joins: Akuli (~Akuli@82-203-167-165.bb.dnainternet.fi)
[22:27:55] <philipp64|work> i.e. `def application(environ, start_response)` ...
[22:28:07] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[22:28:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:28:34] <grawity> application() is a feature of WSGI in general, not mod_wsgi specifically -- https://www.python.org/dev/peps/pep-3333/
[22:28:42] <gcbirzan> philipp64|work: The app you define in flask should be that.
[22:29:02] *** Joins: wyclif (~wyclif@user/wyclif)
[22:29:02] <gcbirzan> philipp64|work: Like app = Flask('whatever') should be a WSGI app
[22:29:36] <grawity> and if you're using Flask, then Flask provides the application() for you -- it's the Flask `app`
[22:30:02] <philipp64|work> okay, so how do I handle the /base issue above?
[22:30:17] <gcbirzan> As for the base, I don't know.
[22:30:21] *** Quits: andyewen (~andyewen@31.124.173.184) (Quit: Leaving)
[22:30:27] *** Joins: pnoud (~pnoud@user/pnoud)
[22:30:46] <philipp64|work> does it get passed through to Flask, or does it get stripped?
[22:30:49] <gcbirzan> philipp64|work: Probably the path is stripped, so you don't need /base in flask. But you can just try it
[22:30:50] *** Quits: bam32 (~bambams@user/bambams) (Remote host closed the connection)
[22:31:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:31:08] <gcbirzan> I haven't used mod_wsgi in forever :)
[22:31:15] *** Joins: bam32 (~bambams@user/bambams)
[22:31:40] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-30d8-17cc-1412-0182.res6.spectrum.com) (Quit: Leaving.)
[22:32:31] *** kostkon_ is now known as kostkon
[22:32:43] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:33:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:34:06] <philipp64|work> okay, and do I need to do anything inside my functions (or in my config) to get STDERR logging sent to ssl_error_log?
[22:34:11] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[22:34:33] *** Joins: wyclif (~wyclif@user/wyclif)
[22:35:04] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[22:35:22] <grawity> looks like that should be the default?
[22:35:25] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 250 seconds)
[22:35:36] <SnoopJ> I don't see anything in the docs for WSGIScriptAlias that suggest it would strip the /base, it says it works like Alias, but also marks the target as having WSGI scripts
[22:35:54] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:36:30] <gcbirzan> SnoopJ: Yeah, but in the examples it goes "WSGISA /name /foo/bar/name"
[22:36:45] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[22:37:09] <gcbirzan> WSGIScriptAlias /name /web/wsgi-scripts/name
[22:37:54] <SnoopJ> right, so "run this WSGI app for this alias," truth be told I dunno what it hands across the WSGI boundary, I always end up reading the PEPs again
[22:38:26] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[22:38:29] <gcbirzan> Yeah. But this should be easy to test
[22:38:35] * SnoopJ nods
[22:38:37] <gcbirzan> if you have apache and mod_wsgi :)
[22:38:52] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[22:38:57] *** Joins: derelict (~derelict@user/derelict)
[22:39:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:39:26] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[22:40:04] *** Joins: wyclif (~wyclif@user/wyclif)
[22:41:18] *** Quits: jay-m126_ (~jay-m@154.72.161.58) (Ping timeout: 252 seconds)
[22:41:29] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 250 seconds)
[22:43:55] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:45:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:45:36] *** Joins: wyclif (~wyclif@user/wyclif)
[22:48:19] *** Joins: jay-m126_ (~jay-m@129.0.77.209)
[22:49:07] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[22:50:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:51:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:495c:18ba:d824:98cf)
[22:51:08] *** Joins: wyclif (~wyclif@user/wyclif)
[22:51:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[22:52:57] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:56:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[22:56:38] *** Joins: wyclif (~wyclif@user/wyclif)
[22:57:07] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[22:59:57] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[23:00:40] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[23:01:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:02:07] *** Joins: wyclif (~wyclif@user/wyclif)
[23:03:39] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[23:04:43] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[23:04:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[23:07:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:07:29] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de)
[23:07:39] *** Joins: wyclif (~wyclif@user/wyclif)
[23:08:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:495c:18ba:d824:98cf) (Quit: Leaving)
[23:10:44] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[23:11:31] *** Joins: stevieh (~skrodzki@p2e584df2.dip0.t-ipconnect.de)
[23:12:02] <rndusr> is there a way to have multiple context managers in one `with` statement?
[23:12:42] <han-solo> you can `with (..) as c1, (...) as c2:...` # i think
[23:12:53] <stevieh> Howdy, I may have a dumb question: whats an easy way to find out which execeptions are raised by a a call... e.g. os.stat()?
[23:13:05] <Yhg1s> stevieh: the documentation is the only way.
[23:13:16] <Yhg1s> (in Python, any bit of code can technically raise any exception.)
[23:13:34] <stevieh> https://docs.python.org/3/library/os.html?highlight=os%20stat#os.stat
[23:14:04] <stevieh> hmm....
[23:16:04] <Yhg1s> stevieh: that bit of documentation could use some updating, yes. (There are other functions in the module that are documented more clearly with what exceptions you can reasonably expect.)
[23:16:37] <stevieh> so I stuck with eating up the bare Exception...
[23:17:01] <Yhg1s> stevieh: that is a bad idea for a number of reasons.
[23:17:07] <Yhg1s> stevieh: what are the actual errors you're trying to *handle*?
[23:17:17] *** Joins: kosh (~kosh@user/kosh)
[23:17:20] <Yhg1s> (you need to know what the exception means in order to be able to handle it.)
[23:17:47] *** Quits: audiocat (~audio@2603-8081-1800-00ad-44ce-b4a0-a90f-8858.res6.spectrum.com) (Ping timeout: 246 seconds)
[23:17:48] <Yhg1s> stevieh: if you're worried about things like FileNotFoundError, or PermissionError, you can catch their common baseclass, OSError.
[23:17:51] <stevieh> i guess, the device is not there or not readable...
[23:17:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:18:06] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05) (Remote host closed the connection)
[23:18:10] *** Quits: bam32 (~bambams@user/bambams) (Read error: Connection reset by peer)
[23:18:17] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[23:18:39] *** Joins: wyclif (~wyclif@user/wyclif)
[23:18:55] <stevieh> Yhg1s: is there any basic documentation about Exception handling and does and dont's?
[23:18:56] <rndusr> stevieh: you can try running the instruction as such: try: os.stat(...) except BaseException as e: print(e)
[23:19:13] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::e05)
[23:19:24] <stevieh> but this would mean, I have to provoke any exception I could think of?
[23:19:36] <rndusr> i guess :/
[23:19:37] <Yhg1s> an even better way to do that would be 'os.stat(...)'.
[23:19:56] <Yhg1s> catching an exception just to print it is not a good idea. It won't print as much useful things as when you *don't* catch it.
[23:19:58] <stevieh> Yhg1s: ?
[23:20:03] *** Quits: Allegretto (~allegrett@87-97-89-9.pool.digikabel.hu) (Ping timeout: 265 seconds)
[23:20:22] *** Joins: audiocat (~audio@2603-8081-1800-00ad-2acc-6c61-53bd-5d99.res6.spectrum.com)
[23:20:31] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:20:38] <Yhg1s> stevieh: exception do's and don'ts: only catch exceptions you know how to handle. Exceptions you understand. That does probably mean you will need to invoke the exception somehow, which is a good idea for testability anyway.
[23:20:46] <SnoopJ> stevieh, a general rule: destroy as little information as you can when catching an exception
[23:20:46] <stealth_> stevieh, can you provide a code into what you are doing?
[23:20:53] <Yhg1s> stevieh: if you don't know how to handle an exception, or you're not sure, don't catch it.
[23:21:05] <SnoopJ> usually that means you reraise the exception, or you're sure that you know *exactly* what should be done about the exception
[23:21:25] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-149.hsi5.kabel-badenwuerttemberg.de) (Quit: leaving)
[23:21:47] *** Joins: dustiestgolf (~anotherus@2601:601:4480:c9c0:8c68:f535:b25f:b841)
[23:22:49] <rndusr> unrelated: how would one obtain the ip address of the originator of a connection with socketserver?
[23:23:14] <stevieh> https://gitlab.com/syncosync/syncosync/-/blob/master/src/soscore/drivemanager.py#L489
[23:23:32] <stevieh> thats the thing about os.stat, but it is more in general...
[23:24:40] <ammar2> rndusr: in a handler? probably through the `client_address` property?
[23:24:59] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[23:25:41] <rndusr> ammar2: thanks, I was looking through the docs and I couldn't find any properties in the TCPServer obj
[23:26:03] <stealth_> stevieh, couldn't you have used `os.path.exists()`
[23:27:16] <stevieh> stealth_:  I could have done so before
[23:27:45] *** Quits: greedom (~greedom@2001:16b8:2edf:3e00:831d:9bf:1c3f:4d50) (Remote host closed the connection)
[23:28:28] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:28:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:29:40] *** Joins: wyclif (~wyclif@user/wyclif)
[23:30:00] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[23:30:05] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:30:06] <stealth_> stevieh, well the `stat.S_ISBLK()` return True or False, so the file must not exist and that would raise, FileNotFoundError
[23:30:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:30:40] <stevieh> and where do I find a basic list of such errors?
[23:30:43] <stealth_> when i say file = path
[23:31:07] <stealth_> stevieh, https://docs.python.org/3/library/exceptions.html#exception-hierarchy
[23:31:13] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[23:31:34] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[23:31:45] <stevieh> and you are guessing with FileNotFound?
[23:31:45] <bilb_ono> can you use the yield multiple times in a function like so? I want my generator to return different lists depending on the case https://bpa.st/RPKQ
[23:32:06] *** Joins: Allegretto (~allegrett@84-236-53-146.pool.digikabel.hu)
[23:32:19] <stealth_> bilb_ono, yes
[23:32:30] *** Quits: NeoCore (~neocore@195.200.221.108) (Quit: Leaving)
[23:32:35] <bilb_ono> ok thakns
[23:32:39] <SnoopJ> yep
[23:37:15] <stealth_> stevieh, https://bpa.st/PGIA
[23:37:44] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 246 seconds)
[23:38:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:38:53] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:39:10] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:39:40] <stevieh> thats better to read I guess. Thx
[23:39:40] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:39:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:40:08] *** Joins: Betal (~Beta@user/betal)
[23:40:30] *** Joins: ttkap (~ttkap@user/ttkap)
[23:40:42] *** Joins: wyclif (~wyclif@user/wyclif)
[23:41:19] *** Quits: rndusr (~rndusr@user/rndusr) (Quit: connection reset by purr)
[23:41:58] *** Joins: rndusr (~rndusr@user/rndusr)
[23:42:44] <Barones> Guys, I'm learning python, I do have an idea to side project, it would be an traceroute tool like mtr on linux, but I mtr doesnt print the name from the provider that the package is going through. What do u think? would be interesting have some insights from seniors about it
[23:43:26] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: ZNC 1.8.2 - https://znc.in)
[23:45:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:46:12] *** Joins: wyclif (~wyclif@user/wyclif)
[23:46:18] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[23:46:36] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[23:46:40] *** Joins: pacbard (~pacbard@user/pacbard)
[23:47:02] <NeilRG> How do I get the corresponding real numpy dtype for a complex dtype?
[23:47:22] <NeilRG> I tried this, but the type annotations are bad: np.zeros(0, dtype=rvs_dtype).real.dtype.type
[23:47:29] *** Joins: greedom (~greedom@2001:16b8:2edf:3e00:831d:9bf:1c3f:4d50)
[23:47:40] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 244 seconds)
[23:47:52] *** Quits: pacbard (~pacbard@user/pacbard) (Client Quit)
[23:48:08] <NeilRG> Also, the IRC link here https://numpy.org/gethelp/ points to freenode.  Should that be changed? nedbat
[23:48:19] <SnoopJ> it should, yep
[23:48:30] <NeilRG> :)
[23:48:46] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[23:48:49] <SnoopJ> NeilRG, what you shared should be how you get the dtype as a type object, I'm not sure what "the type annotations are bad" means
[23:49:07] <NeilRG> SnoopJ, mypy complains: Incompatible types in assignment (expression has type "Type[Any]", variable has type "dtype[Any]"
[23:49:17] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[23:49:25] <NeilRG> I want it to be a dtype[Any] since that's what I numpy needs as a dtype parameter apparently
[23:49:34] <SnoopJ> NeilRG, that sounds like a separate question
[23:49:42] <NeilRG> okay, well that's my question then :)
[23:50:01] <SnoopJ> can we see the code that produces that mypy error? https://mypy-play.net/ perhaps?
[23:50:27] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[23:50:33] <NeilRG> SnoopJ, hold on, sorry fo rthe noise, I think I fixed it by changing .real.dtype.type to .real.dtype
[23:50:53] <NeilRG> still seems likea  convoluted way to go from complex to real types, don't you think?
[23:50:54] *** Joins: ckdcreation (~ckdCreati@147.55.133.136)
[23:50:54] <SnoopJ> right, the latter is a dtype instance, the former isn't, which is...confusing.
[23:51:00] <NeilRG> I know, right
[23:51:03] *** Quits: ckdcreation (~ckdCreati@147.55.133.136) (Client Quit)
[23:51:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:51:26] *** Quits: greedom (~greedom@2001:16b8:2edf:3e00:831d:9bf:1c3f:4d50) (Remote host closed the connection)
[23:51:43] *** Joins: wyclif (~wyclif@user/wyclif)
[23:52:13] *** Joins: greedom (~greedom@2001:16b8:2edf:3e00:831d:9bf:1c3f:4d50)
[23:52:25] *** Quits: magla (~gelignite@55d47ecb.access.ecotel.net) (Quit: Stay safe!)
[23:52:27] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[23:54:29] <SnoopJ> it's a little indirect, but it doesn't make a copy or anything like that
[23:55:08] *** Parts: ecraven (~ecraven@user/nex) (Bye)
[23:55:46] *** Joins: weedmic (~weedmic@89-139-109-7.bb.netvision.net.il)
[23:56:41] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:56:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:56:47] *** Quits: greedom (~greedom@2001:16b8:2edf:3e00:831d:9bf:1c3f:4d50) (Remote host closed the connection)
[23:57:14] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:26] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[23:57:59] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 258 seconds)
[23:58:34] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[23:59:31] *** Quits: akk (~akk@75.161.155.222) (Ping timeout: 258 seconds)
