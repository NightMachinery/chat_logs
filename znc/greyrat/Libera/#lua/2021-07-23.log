[00:12:55] *** Quits: zutt (~zutt@user/zutt) (Remote host closed the connection)
[00:14:44] *** Joins: zutt (~zutt@user/zutt)
[00:18:34] *** Quits: Elw3 (~Elw3@x59cc9aa0.dyn.telefonica.de) (Quit: Leaving)
[00:42:19] *** Quits: magla (~gelignite@55d49622.access.ecotel.net) (Quit: Stay safe!)
[01:19:46] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:6c7f:f2b5:7fec:ea7d) (Quit: Leaving)
[01:32:37] *** Quits: unclutter (~gentoo@60.81-166-246.customer.lyse.net) (Quit: Lost terminal)
[02:01:04] *** Joins: Elw3 (~Elw3@dynamic-046-114-172-132.46.114.pool.telefonica.de)
[02:50:51] *** Quits: Elw3 (~Elw3@dynamic-046-114-172-132.46.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[03:01:20] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[03:15:23] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[04:20:43] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:37:32] <tumn> andreyorst: yes, I think that's identical
[04:39:53] <tumn> Wally-: from my understanding lualib.h has never been required, it just gives access to all the basic features like math, the table library, etc
[04:42:21] <tumn> and still does
[04:56:57] *** Joins: ratchetfreak (~ratchetfr@d51A4BEAF.access.telenet.be)
[05:00:34] *** Quits: ratchet_freak (~ratchetfr@ptr-82s3g7mkgzjgrfwgspa.18120a2.ip6.access.telenet.be) (Ping timeout: 240 seconds)
[05:10:51] *** Quits: ratchetfreak (~ratchetfr@d51A4BEAF.access.telenet.be) (Read error: Connection reset by peer)
[05:32:00] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-f513-f13a-b418-4a09.res6.spectrum.com) (Read error: Connection reset by peer)
[05:55:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[06:39:40] *** Quits: StephenLynx (~StephenLy@2804:1054:3015:cdb0::e93) (Quit: Leaving)
[06:43:14] *** Joins: ansimita (~ansimita@user/ansimita)
[06:44:50] *** Parts: ansimita (~ansimita@user/ansimita) ()
[06:52:01] *** Joins: ansimita (~ansimita@user/ansimita)
[07:22:29] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[07:38:42] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:75af:7907:b5fe:65e1)
[07:53:03] *** Joins: guidoc (~guido@host-79-43-249-191.retail.telecomitalia.it)
[08:32:10] *** Quits: pizdets (~pizdets@183.182.111.100) (Ping timeout: 245 seconds)
[08:32:26] *** Joins: pizdets_ (~pizdets@183.182.110.214)
[09:35:00] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:16:54] *** Joins: dvx (~dvx@185.63.97.64)
[10:28:18] *** Joins: fcr_ (~fran@r167-56-80-150.dialup.adsl.anteldata.net.uy)
[10:31:54] *** Quits: fcr (~fran@r167-60-47-229.dialup.adsl.anteldata.net.uy) (Ping timeout: 276 seconds)
[10:31:54] *** fcr_ is now known as fcr
[10:57:37] *** Quits: Overkill (~overkill9@69-165-200-34.cable.teksavvy.com) (Ping timeout: 268 seconds)
[11:10:25] *** Quits: guidoc (~guido@host-79-43-249-191.retail.telecomitalia.it) (Quit: WeeChat 3.2)
[11:13:08] *** Joins: Overkill (~overkill9@69-165-200-34.cable.teksavvy.com)
[11:34:35] *** Joins: guidoc (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[12:04:26] <TsT> hi
[12:10:44] *** Quits: Overkill (~overkill9@69-165-200-34.cable.teksavvy.com) (Ping timeout: 258 seconds)
[12:11:27] *** Joins: Overkill (~overkill9@69-165-200-34.cable.teksavvy.com)
[12:31:06] *** Joins: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be)
[12:49:08] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 252 seconds)
[13:07:20] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:33:11] *** Joins: Kane (~Kane@home.yarg.fr)
[13:41:26] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[13:41:54] *** Quits: strast1 (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 265 seconds)
[14:04:53] *** Joins: kipras (~kipras@78-56-235-39.static.zebra.lt)
[14:31:19] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:45:05] *** Joins: reset (~reset@user/reset)
[15:23:17] *** Joins: entuland (~entuland@user/entuland)
[15:25:32] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 255 seconds)
[15:26:10] *** Quits: guidoc (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.2)
[15:52:09] *** Joins: guidoc (~guido@host-79-43-249-191.retail.telecomitalia.it)
[16:20:58] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[16:21:07] <StayHungry> Good afternoon, comrades
[16:21:43] <StayHungry> The app I use (Far manager, dual pane file manager) allows to write macros in Lua
[16:22:34] <StayHungry> So far I use PowerShell's ability to achieve the goal, but perhaps you could offer me an alternative
[16:23:12] <StayHungry> Simple task: swap 23-07-2021 to 2021-07-23
[16:23:35] <StayHungry> powershell -c '23-07-2021'.split('-')[2..0] -join '-'
[16:23:42] <StayHungry> How would Lua do that?
[16:27:01] <Humbedooh> original_date = "23-07-2021"
[16:27:01] <Humbedooh> a,b,c = original_date:match("(%d+)-(%d+)-(%d+)")
[16:27:01] <Humbedooh> new_date = ("%04d-%02d-%02d"):format(c,b,a)
[16:27:04] <Humbedooh> is one way
[16:40:25] <StayHungry> looks too complex :)
[16:42:30] <Humbedooh> you can simplify, of course, if you don't care about syntax checking
[16:43:49] <Humbedooh> a,b,c = original_date:match("(..)-(..)-(....)")
[16:43:49] <Humbedooh> new_date = c..'-'..b..'-'..a
[16:46:49] <furq> %-
[16:50:58] <StayHungry> Humbedooh: you're doing regex replace here, right?
[16:54:20] <StayHungry> then it's simpler as follows print(string.gsub("23-07-2021", "(..)(....)(....)", "%3%2%1"))
[16:55:51] <StayHungry> i was thinking there was a shorter way, no matter with or without regex
[16:59:36] <veltas> Need %- in there too
[17:00:09] <veltas> Also it has the Y10K bug
[17:03:09] *** Joins: Elw3 (~Elw3@dynamic-046-114-156-145.46.114.pool.telefonica.de)
[17:05:39] <StayHungry> veltas: sorry, can't grasp that, elaborate further
[17:17:02] <StayHungry> veltas: ?
[17:29:34] *** Quits: Elw3 (~Elw3@dynamic-046-114-156-145.46.114.pool.telefonica.de) (Quit: Leaving)
[17:33:51] <StayHungry> print(('23-07-2021'):gsub('(..)(....)(....)','%3%2%1')) is a littler shorter
[17:47:54] *** Joins: magla (~gelignite@55d493d3.access.ecotel.net)
[17:52:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 255 seconds)
[18:00:47] <StayHungry> furq: what is %-?
[18:01:07] <RhodiumToad> % is an escape character in match patterns
[18:01:08] <yalb> RhodiumToad: sandbox:1: syntax error near 'an'
[18:01:20] <RhodiumToad> it also triggers the bot :-)
[18:01:48] <RhodiumToad> note that - is a special character to match, so you need %- to match a literal -
[18:11:24] *** Joins: netlynx (~me@94-226-69-15.access.telenet.be)
[18:15:54] <fullstop> % print(_VERSION)
[18:15:55] <yalb> fullstop: Lua 5.3
[18:16:17] <RhodiumToad> the bot has other versions too
[18:16:24] <RhodiumToad> %5.2 print(_VERSION)
[18:16:25] <yalb> RhodiumToad: Lua 5.2
[18:16:28] <RhodiumToad> %5.1 print(_VERSION)
[18:16:28] <yalb> RhodiumToad: Lua 5.1
[18:16:42] <fullstop> I assume that io is sandboxed somehow
[18:17:34] <fullstop> and that runtime is limited somehow
[18:18:19] <fullstop> I wouldn't do it, but would "while true do end" eventually get terminated?
[18:19:30] <fullstop> http://lua-users.org/wiki/YetAnotherLuaBot should tell me
[18:19:52] <fullstop> "Execution time is capped at 3 seconds, memory is limited to roughly 500 MiB."
[18:20:25] <fullstop> %luajit print(_VERSION)
[18:20:25] <yalb> fullstop: Lua 5.1
[18:30:14] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-2cc5-c74c-4d22-4413.res6.spectrum.com)
[18:30:17] *** Joins: kikijiki1 (~Thunderbi@user/kikijiki)
[18:33:06] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Ping timeout: 240 seconds)
[18:33:06] *** kikijiki1 is now known as kikijiki
[18:37:23] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Ping timeout: 252 seconds)
[18:38:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:00:44] *** Joins: StephenLynx (~StephenLy@2804:1054:3015:cdb0::e93)
[19:05:51] <andreyorst> %5.1 print(unpack(setmetatable({}, {__index = {1, 2, 3}, __len = function () return 3 end})))
[19:05:51] <yalb> andreyorst: 
[19:06:23] <andreyorst> % print(table.unpack(setmetatable({}, {__index = {1, 2, 3}, __len = function () return 3 end})))
[19:06:24] <yalb> andreyorst: 1 2 3
[19:07:20] <andreyorst> there's no way to make 5.1 unpack a proxy table correctly?
[19:07:49] <tumn> no
[19:07:58] <tumn> I wasn't aware that was a feature of newer lua versions
[19:13:31] <RhodiumToad> 5.1's unpack seems to use raw operations for everything
[19:21:37] <TsT> yes lua 5.1 does not support __len meta
[19:23:20] <RhodiumToad> unless I'm misreading the manual, it supports it for #
[19:23:42] <RhodiumToad> %5.1 print(#setmetatable({}, {__index = {1, 2, 3}, __len = function () return 3 end}))
[19:23:42] <yalb> RhodiumToad: 0
[19:23:49] <RhodiumToad> huh
[19:24:05] <tumn> __len is in the 5.1 manual
[19:24:16] <RhodiumToad> oh, it only supports it for userdata
[19:24:17] <tumn> under "2.8 - Metatables"
[19:24:36] <furq> __len on tables is new in 5.2
[19:24:43] <furq> luajit optionally has it
[19:24:44] <RhodiumToad> for tables it always uses the raw length
[19:25:16] <furq> %luajit return #setmetatable({}, {__index = {1, 2, 3}, __len = function () return 3 end})
[19:25:16] <yalb> furq: 0
[19:25:20] <furq> not this one though
[19:25:21] <TsT> % print( #( setmetatable({}, { __len = function () return 3 end})))
[19:25:22] <yalb> TsT: 3
[19:25:32] <TsT> %5.1 print( #( setmetatable({}, { __len = function () return 3 end})))
[19:25:32] <yalb> TsT: 0
[19:25:47] <TsT> oh furq you already did it :P
[19:26:50] <furq> %5.1 u = debug.setmetatable(newproxy(), { __len = function() return 3 end }) return #u
[19:26:50] <yalb> furq: sandbox:1: attempt to get length of global 'u' (a boolean value); stack traceback:; sandbox:1: in main chunk
[19:26:56] <furq> oh yeah
[19:27:09] <furq> %5.1 u = newproxy() debug.setmetatable(u, { __len = function() return 3 end }) return #u
[19:27:09] <yalb> furq: 3
[19:27:17] <furq> i'm very stupid
[19:31:12] <RhodiumToad> doesn't help with unpack though
[19:31:27] <RhodiumToad> since that won't accept a proxy object
[19:34:36] <RhodiumToad> %5.1 u = newproxy(true) m = getmetatable(u) m.__len = function() return 3 end m.__index = {1,2,3} print(#u,u[1],u[2],u[3]) print(unpack(u))
[19:34:37] <yalb> RhodiumToad: 3 1 2 3; sandbox:1: bad argument #1 to 'unpack' (table expected, got userdata); stack traceback:; [C]: in function 'unpack'; sandbox:1: in main chunk
[19:35:16] <tumn> _UNPACK = unpack; function unpack(tbl) local meta = getmetatable(tbl); if meta and meta.__len and meta.__index then return _UNPACK(meta.__index); else return _UNPACK(tbl); end end
[19:35:23] <tumn> I did it
[19:35:58] <RhodiumToad> _UNPACK(meta.__index, meta.__len(tbl))  surely
[19:36:21] <RhodiumToad> _UNPACK(meta.__index, 1, meta.__len(tbl))  surely
[19:36:26] <tumn> _UNPACK is backup of original unpack
[19:36:49] <tumn> throw in a select() based on value of __len to make the illusion even better
[19:36:57] <furq> why are you using 5.1 anyway
[19:37:02] <tumn> wait no thats now how select works nvm
[19:37:33] <tumn> furq: I don't know why they are using 5.1, but I defend 5.1, newer versions add many great features but many unnecessary ones too
[19:37:43] <tumn> 5.2 is the last alright version after 5.1
[19:37:49] <tumn> it's downhill from there
[19:37:54] <RhodiumToad> nonsense
[19:37:56] <furq> 5.2 is better than 5.1
[19:38:03] <RhodiumToad> 5.3 is better than 5.2
[19:38:03] <furq> beyond that i broadly agree with you
[19:38:13] <tumn> I like 5.1 better than 5.2 because of function environments
[19:39:30] <RhodiumToad> setfenv was always a horrible hack that needed to die
[19:39:52] <furq> i've never had a need for function environments beyond the stuff that is trivial to replicate in 5.2 without touching _ENV
[19:40:05] <tumn> setfenv isn't a hack
[19:40:10] <tumn> it's easy sandboxing
[19:40:16] <RhodiumToad> not at all
[19:40:48] <tumn> maybe it is a hack, but I still like it
[19:40:48] <RhodiumToad> in fact code that uses setfenv is harder to sandbox itself
[19:41:05] <tumn> plus in 5.2+ you can't do this:
[19:41:08] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[19:41:21] <tumn> %5.1 print(setfenv(1, getfenv(1)))
[19:41:21] <yalb> tumn: function: 0x1500ea0
[19:41:32] <tumn> hmm
[19:41:38] <tumn> %5.1 print(debug)
[19:41:38] <yalb> tumn: table: 0x1e786d0
[19:41:49] <tumn> %5.1 print(string.dump)
[19:41:49] <yalb> tumn: function: 0xc5c070
[19:42:03] <tumn> %5.1 print(string.dump(function() end))
[19:42:03] <yalb> tumn: LuaQ
[19:43:05] <RhodiumToad> what do you think you are trying to do there?
[19:44:01] <RhodiumToad> the fact that setfenv can mess with functions on the call stack is one reason it's a problem when sandboxing
[19:44:33] <andreyorst> I higly dislike the decision to remove __ipairs from 5.4
[19:44:57] <tumn> %5.1 for c in string.dump(setfenv(1, getfenv(1))):gmatch(".") do io.write(("\\%d"):format(c:byte())) end
[19:44:57] <yalb> tumn: \27\76\117\97\81\0\1\4\8\4\8\0\9\0\0\0\0\0\0\0\64\115\97\110\100\98\111\120\0\0\0\0\0\0\0\0\0\0\0\2\9\24\0\0\0\5\0\0\0\6\64\64\0\69\128\0\0\129\192\0\0\197\0\1\0\1\193\0\0\220\0\0\1\92\0\0\0\28\128\0\0\11\64\65\0\129\128\1\0\28\0\129\1\22\192\1\128\5\193\1\0\6\1\66\2\65\65\2\0\75\129\194\2\203\193\194\1\220\1\0\1\92\1\0\0\28\65\0\0\33\64\0\0\22\64\253\127\30\0\128\0\12\0\0\0\4\7\0\0\0\0\0\0\0\115\
[19:45:03] <furq> you can still pass an env to load() et al in 5.2 which is like 90% of the use case of setfenv
[19:45:06] <andreyorst> it makes impossible to implement certain proxy tables variants that use associative table to store data but provide sequential interface
[19:45:10] <andreyorst> like ordered sets
[19:45:17] <furq> and then another 9% is covered by uservalues
[19:45:29] <furq> these are highly scientific numbers as you can tell
[19:45:46] <tumn> I think the output got truncated
[19:45:49] <furq> 90 and 9 are used by scientists every single day
[19:46:35] <RhodiumToad> andreyorst: I agree and expressed my opinion repeatedly on the mailing list, to no avail
[19:46:35] <Humbedooh> 9 out of 90 doctors recommend it
[19:47:30] <tumn> anyway I see your point but I prefer 5.1
[19:47:50] <tumn> it has more personality
[19:47:56] <RhodiumToad> nonsense
[19:48:02] <andreyorst> RhodiumToad: but I still like 5.4 because it's a bit faster and finally provides generational gc. If not the __ipairs removal it would be the best version for me personally
[19:48:27] <andreyorst> (i just like to create lots of small tables)
[20:10:31] *** Joins: lgc (~lgc@user/lgc)
[20:10:43] *** Parts: lgc (~lgc@user/lgc) (WeeChat 3.2-dev)
[20:11:29] *** Joins: romainl (~Adium@81.54.245.213.rev.sfr.net)
[20:11:36] *** Parts: romainl (~Adium@81.54.245.213.rev.sfr.net) ()
[20:39:04] *** Quits: nmz (~nmz@adsl-72-50-6-23.prtc.net) (Quit: EXIT)
[20:39:24] *** Joins: nmz (~nmz@adsl-72-50-4-118.prtc.net)
[20:52:33] *** Quits: kipras (~kipras@78-56-235-39.static.zebra.lt) (Ping timeout: 265 seconds)
[21:01:43] *** Joins: ratchet_freak (~ratchetfr@ptr-82s3g7mkgzjgrfwgspa.18120a2.ip6.access.telenet.be)
[21:53:19] *** Joins: skapata (~Skapata@user/skapata)
[22:04:22] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:21:40] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[22:21:45] <StayHungry> Comrades, one more question if I may
[22:22:00] <StayHungry> lua54.exe -e "print(('23-07-2021'):gsub('(..)(....)(....)','%3%2%1'))" outputs 2021-07-23      1
[22:22:06] <StayHungry> How to omit that 1 ?
[22:25:00] <StayHungry> i tried io.write, but it makes things worser by concatenating -> 2021-07-231
[22:30:00] <StayHungry> Comrades... wake up :)
[22:30:01] *** Quits: fcr (~fran@r167-56-80-150.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[22:34:22] <StayHungry> The weirdest thing... outputting line numbers
[22:35:19] *** Joins: fcr (~fran@r186-48-97-221.dialup.adsl.anteldata.net.uy)
[22:38:02] <StayHungry> Tried ulua, the same...
[22:43:40] *** Quits: nmz (~nmz@adsl-72-50-4-118.prtc.net) (Read error: Connection reset by peer)
[22:44:30] *** Joins: nmz (~nmz@adsl-72-50-4-48.prtc.net)
[22:51:12] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[22:52:11] *** Quits: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be) (Read error: Connection reset by peer)
[22:52:16] *** Joins: ratchetfreak_ (~ratchetfr@d51A4BEAF.access.telenet.be)
[22:54:26] <StayHungry> It's a match count from gsub...
[23:00:18] <StayHungry> Solution is to extra pair of round brackets, e.g. lua -e "print((('23-07-2021'):gsub('(..)(....)(....)','%3%2%1')))" 
[23:02:21] *** Joins: strast1 (~steve@remote.wisfurnaces.com)
[23:04:24] *** Quits: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Ping timeout: 252 seconds)
[23:06:29] <StayHungry> lua -e "print(('23-07-2021'):gsub('(..)(....)(....)','%3%2%1'),'')" 
[23:06:43] <StayHungry> is another way to remove that nasty counter
[23:08:44] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[23:18:43] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[23:22:18] *** Quits: strast1 (~steve@remote.wisfurnaces.com) (Ping timeout: 240 seconds)
[23:25:48] *** Joins: Elw3 (~Elw3@dynamic-046-114-169-202.46.114.pool.telefonica.de)
[23:32:16] *** Quits: Elw3 (~Elw3@dynamic-046-114-169-202.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[23:34:15] *** Joins: Elw3 (~Elw3@dynamic-046-114-169-202.46.114.pool.telefonica.de)
[23:36:30] *** Quits: guidoc (~guido@host-79-43-249-191.retail.telecomitalia.it) (Quit: WeeChat 3.2)
[23:38:07] *** Joins: kakolainen[m] (~kakolaine@2001:470:69fc:105::34f9)
