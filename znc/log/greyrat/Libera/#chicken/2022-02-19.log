[00:44:57] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[00:47:09] *** Joins: Rue (~rue@2001-b011-1000-1496-cf3a-2116-83d3-2a18.dynamic-ip6.hinet.net)
[01:16:12] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 240 seconds)
[02:46:37] *** Quits: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Remote host closed the connection)
[03:40:38] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[03:55:21] *** Joins: skapata (~Skapata@user/skapata)
[04:42:11] <vandusen> "siiky" pasted "make-absolute-pathname type inconsistencies?" http://paste.call-cc.org/paste?id=a281a93977421c300fa6f4b8d698cad93e6df839
[04:42:34] <siiky> Hey, the docs for chicken.pathname.make-absolute-pathname say that all three arguments may be false, and that the directory argument may be a list of strings, but the compiler complains if I try (make-absolute-pathname #f #f #f), and says the type is something different entirely: (* #!optional string string -> string)
[04:43:39] <siiky> Additionally, it seems that, according to the type, the last 2 arguments are optional (that I can confirm by calling (make-absolute-pathname #f)), so I think the docs should be updated
[04:44:06] <siiky> I'll update the wiki about that
[04:44:42] <siiky> oh and make-pathname too, the last 2 arguments are optional but the function signature doesn't suggest that
[04:44:58] <vandusen> [eggs repo (r41120, by siiky)] Update signature of make-pathname & make-absolute-pathname to reflect that the last 2 arguments are optional
[04:49:35] <siiky> WTH I think I'm going blind or insane! (or maybe I just need sleep...) I swear I ran (make-absolute-pathname '("some" "path")) and that it worked, but now I got an error :|
[04:51:19] <vandusen> [eggs repo (r41121, by siiky)] Revert the last change to the wiki (RE make-pathname & make-absolute-pathname) because I'm a dumbass
[04:51:41] <siiky> fixed it, sorry about that...
[05:01:37] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[06:45:51] *** Quits: ramrunner (~dsp@78.141.218.152) (Ping timeout: 250 seconds)
[06:46:53] *** Joins: ramrunner (~dsp@78.141.218.152)
[07:13:54] *** Quits: sts-q (~sts-q@212.53.219.183) (Ping timeout: 272 seconds)
[07:14:20] *** Joins: sts-q (~sts-q@212.53.219.164)
[08:55:28] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[09:07:57] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:14:20] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[09:28:32] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[09:29:20] <ASau> Bunny351: yes, that's typical misunderstanding.
[09:30:24] <ASau> Bunny351: you can consider clojure example above, where you also have "multiple types" defined by predicates at run time.
[12:32:12] <vandusen> SPAM! SPAM! SPAM! by freeee
[12:43:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:43:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[12:45:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:22:19] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 256 seconds)
[13:22:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:25:31] <vandusen> SPAM! SPAM! SPAM! by freee
[14:48:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:50:17] <vandusen> "siiky" pasted "http-client & filename in multipart/form-data" http://paste.call-cc.org/paste?id=74fd03538622c64deaf7e639235e394c22d4ab09
[14:50:40] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d62:2925:5b99:4618)
[14:50:40] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d62:2925:5b99:4618) (Changing host)
[14:50:40] *** Joins: skapata (~Skapata@user/skapata)
[14:51:04] <siiky> hey sjamaan, hoping to bother you a bit :D the docs suggest that the writer may be an alist of the form `(file #:file ,path-for-reading #:filename ,path-for-server #:headers (...)) where path-for-reading is the path that http-client will read the file from, and path-for-server the name sent to the server. The docs seem to suggest that filename is given as-is to the server, but that's not what I'm seeing. 
[14:51:10] <siiky> What I see is that even if I give filename, it will be "massaged" into a single "filename", e.g. "path/to/file" => "file"; "path/to/directory/" => "". I tried patching it too, but it has the same behavior I don't understand why...
[14:52:25] <siiky> was this behavior your original intention, do you agree that it should be sent to the server as-is, or what? And could you help me understand why the patch doesn't work?
[14:56:30] <siiky> and RE to the types of make-absolute-pathname, is changing the types.db enough to fix it?
[15:18:25] <siiky> ^ it seems yes?  Just rebuilt CHICKEN with the updated type on types.db and it no longer shows type warnings
[15:22:36] <vandusen> "siiky" pasted "types.db patch for make-absolute-pathname" http://paste.call-cc.org/paste?id=a281a93977421c300fa6f4b8d698cad93e6df839#a1
[15:23:16] <s-liao> Why?
[15:24:25] <s-liao> The types.db file was generated during compiling?
[15:24:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[15:26:11] <Bunny351> types.db is not generated
[15:26:31] <siiky> I don't think it is, there are several commits updating it
[15:26:38] <siiky> and it's the only place with types
[15:26:43] <Bunny351> right
[15:30:57] <s-liao> Okay
[15:32:32] <s-liao> sorry I thought about the modules.db file.
[15:35:05] <siiky> (y)
[15:35:43] <s-liao> What is the types.db file about?
[15:36:19] <Bunny351> but your change looks right
[15:36:33] <Bunny351> it provides the type-specifications for the scrutinizer, the compile-time type checker
[15:36:54] <Bunny351> make-absolute-pathname is indeed underspecified
[15:40:07] <Bunny351> s-liao: could you post the patch on chicken-hackers?
[15:40:50] <s-liao> You mean siiky?
[15:40:58] <Bunny351> siiky!
[15:41:14] <Bunny351> s-liao: sorry, I'm confused
[15:42:09] <siiky> lol  sure, but I don't know how/what to do
[15:42:23] <siiky> I'm not used to this contributor workflow
[15:42:50] <Bunny351> just send the patch to chicken-hackers@nongnu.org with the text "[PATCH]" in the subject
[15:43:07] <Bunny351> that's all - we will sign it off and add it to the repo
[15:43:54] <siiky> oh ok simple enough... I know there are some git commands specific for this, so I thought I had to do something with those
[15:43:57] <s-liao> is it the type information of the procedure of runtime system in the type.db file.
[15:44:04] <siiky> will send in a bit
[15:44:14] <Bunny351> siiky: cool
[15:44:53] <Bunny351> s-liao: the type info is used at compile-time but describes the run-time types
[15:45:29] <Bunny351> as siiky has demonstrated, it sometimes differs, as types.db is hand-written and just reflects what we understand to be the run-time behaviour
[15:50:11] <s-liao> What are you referring the run-time behaviors is how can runtime.c file works during compiling scm file in c level?
[15:50:31] <siiky> Bunny351: just sent
[15:51:01] <s-liao> I have not read the whole the demo siiky have done.
[15:52:20] <Bunny351> runtime.c is just a small part, most of the runtime code is in library.scm, extras.scm, etc.
[15:54:46] <Bunny351> runtime.c mostly has low-level data access and the garbage collector, and things like bignum math
[15:56:45] <s-liao> Okay.
[16:00:27] <vandusen> [eggs repo (r41122, by siiky)] Add note about medea deserializing keys as symbols
[16:02:49] <s-liao> Can I ask that, do all that the run-time procedures support during the compiling scm file in the type.db file except runtime.c file?
[16:07:17] <s-liao> Or chicken system?
[16:20:11] <vandusen> [eggs repo (r41123, by siiky)] Improve the description of torrent-source/*
[16:25:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:53:18] <Bunny351> s-liao: sorry, I don't quite understand
[17:15:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:17:15] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:69b2:1da5:3a92:e9c6)
[17:17:15] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:69b2:1da5:3a92:e9c6) (Changing host)
[17:17:15] *** Joins: skapata (~Skapata@user/skapata)
[18:33:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:52:10] *** Joins: klovett (~klovett@107.127.17.177)
[22:18:16] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[22:30:04] *** Joins: johnjaye (~pi@173.209.64.74)
[22:30:28] <johnjaye> does one normally do c omplex numbers with this style?
[22:30:36] <johnjaye> e.g. (* +i +i) evals to -1
[22:30:52] <johnjaye> but (* i i) doesn't.
[22:32:23] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[22:52:25] <jcroisant> johnjaye: I'm not sure if I understand your question, but `i` by itself is just a variable name. `+i` is Scheme syntax for the imaginary number i, equivalent to `0+1i`. The general syntax for complex numbers is `A+Bi` or `A-Bi`, for example `-1.2-3.4i` is equal to `(make-rectangular -1.2 -3.4)`. There is also `M@A` syntax for expressing in polar coordinates, like with `make-polar`.
[22:53:26] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[22:54:20] <johnjaye> right. it just seemed odd. so i meant, would you actually write code that way
[22:54:27] <johnjaye> or just use lists or cons
[22:58:58] <jcroisant> Sorry, I don't understand the question
[22:59:53] <johnjaye> as in (2 3) is the complex number 2+3i
[23:00:01] <johnjaye> then you would define times, plus, argument, etc
[23:00:19] <johnjaye> nevermind just curious
[23:01:46] <jcroisant> I would generally use Scheme's complex numbers, because the math operations are already defined and more efficient than using a list
[23:03:34] <jcroisant> The syntax looks a bit strange but you can get used to it
[23:04:05] <johnjaye> ah
[23:42:52] *** Joins: klovett (~klovett@107.127.17.177)
