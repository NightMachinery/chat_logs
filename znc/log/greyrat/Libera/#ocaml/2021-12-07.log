[00:09:41] *** Quits: haesbaert (~haesbaert@195.95.187.184) (Remote host closed the connection)
[00:09:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:28:44] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[00:47:15] *** Quits: chrisz (ab0b4lzx9b@55d4e4e1.access.ecotel.net) (Quit: leaving)
[00:56:41] *** Quits: rgrinberg (~textual@187.223.58.12) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:58:33] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[01:17:01] *** Quits: olle (~olle@i5E866D8F.versanet.de) (Ping timeout: 240 seconds)
[01:33:24] <d_bot> <JJam> not sure if this is the right place to ask; is there an easier way to create json strings than what i'm doing right now - I use a string literal {||} with sprintf and then use Yojson.Basic.from_string & to_string. there's gotta be an easier way, right?
[01:33:56] <companion_cube> if you already have a string that is valid jsonâ€¦ why not use it? :)
[01:34:24] <companion_cube> although if you want to create a json with arbitrary values inside
[01:34:30] <companion_cube> you could use the yojson type constructors?
[01:34:43] <companion_cube> `Assoc ["foo", `Int 1;  "bar", `List [`Int 2]]
[01:34:52] <companion_cube> for `{foo: 1, bar: [2]}`
[01:39:56] <d_bot> <JJam> thank you! that certainly makes things less complicated
[01:41:36] <companion_cube> indeed!
[01:44:54] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[01:48:26] *** Joins: sagax (~sagax_nb@user/sagax)
[01:51:17] <d_bot> <Continuation Calculus> hi
[01:51:18] <d_bot> <Continuation Calculus> by any chance, any way to get the stdoutput of a Sys.command call in OCaml that is portable and does not require creating an intermediary file?
[01:51:51] <companion_cube> you need to use Unix.open_process_in iirc
[01:52:55] <d_bot> <Continuation Calculus> Unix doesn't seem very portable
[01:53:30] <d_bot> <Continuation Calculus> it actually is
[01:53:33] <d_bot> <Continuation Calculus> what a misnomer
[01:56:35] <companion_cube> it works on posix systems, mostly
[01:56:50] <companion_cube> won't work on javascript, but well, neither will processes
[01:57:03] <d_bot> <jumpnbrownweasel> I was confused about that also, but since I saw Windows code in a Unix .ml file, I figured it was perhaps originally unix and then made more portable over time?
[01:57:56] <companion_cube> I don't know about the history
[01:58:03] <companion_cube> but parts of Unix are supported on windows
[01:58:05] <companion_cube> some functions are not
[01:58:13] <companion_cube> I think the open_process functions are.
[01:59:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[02:01:18] <d_bot> <Continuation Calculus> `The command is interpreted by the shell /bin/sh (or cmd.exe on Windows)`
[02:04:30] <d_bot> <Et7f3> It provides API we encounter on unix. This is how I see it. And polyfill as much as possible. I.e. fork doesn't work but the rest is fine.
[02:05:09] <d_bot> <Et7f3> Nodejs can create process ðŸ‘€ so it seems possible to bind it
[02:06:43] *** Quits: mro (~mro@2002:5cc3:b776:0:64b8:ecba:7918:b1fa) (Quit: Leaving...)
[02:09:10] <companion_cube> there's stuff to create processes already
[02:09:21] <companion_cube> but also, yes, `luv` exists (bindings to libuv)
[02:14:14] <d_bot> <Continuation Calculus> hmmm.. i want to run js in ocaml (to check that the compiler from my lang to js works), but each run takes .120s, which makes running all my tests really slow. currently, i just use `open_process_in`, `input_line` repeatedly and then `close_process_in`. any faster way of doing that? (or should I just start batching all the tests in a single file? ~~but then i loose my neat alcotest colors~~)
[02:15:12] <companion_cube> doesn't alcotest parallelize? if not, might be difficult
[02:15:48] <d_bot> <Continuation Calculus> ooo, good q, i might gain stuff there
[02:16:45] <d_bot> <Continuation Calculus> nothing on readme.md
[02:16:55] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Ping timeout: 252 seconds)
[02:18:04] <d_bot> <Continuation Calculus> ye it doesn't, np, i'll just batch
[02:18:30] <companion_cube> that's a pity
[02:18:44] <companion_cube> alcotest came around when ounit already existed, and ounit2 can parallelize
[02:18:53] <companion_cube> alcotest became popular because of its colorful UI
[02:18:55] <companion_cube> :/
[02:19:04] <d_bot> <Continuation Calculus> i was going to ask if ounit2 had colors
[02:19:20] <companion_cube> a little bit I think, with the `-ci` mode or whatever
[02:19:25] <companion_cube> it's not as pretty
[02:19:37] <companion_cube> but I'm a bit sad alcotest wasn't just a nice runner for ounit
[02:20:22] <d_bot> <Continuation Calculus> i'll try ounit
[02:20:28] <d_bot> <Continuation Calculus> i hope it displays the time taken to run the tests
[02:20:49] <companion_cube> I don't recall, honestly
[02:22:40] <Anarchos> companion_cube i ought to use ounit2 for my tests, and bisect_ppx for the coverage/nice html results
[02:22:52] <companion_cube> sure
[02:23:04] <companion_cube> ounit also outputs junit results if you need them, for example
[02:23:10] <companion_cube> that was nice in combination with jenkins
[02:25:08] <Anarchos> companion_cube i hate java,jenkins and so on, i am fed up with all those j2ee bulllsh*t at work when i tastes the beauty of ocaml since 'classes prÃ©paratoires'
[02:25:28] <companion_cube> ðŸ¤·
[02:25:56] <companion_cube> https://github.com/marketplace/actions/junit-report-action it's not just jenkins nowadays :)
[02:51:22] <d_bot> <Continuation Calculus> i think i should use alcotest lwt, and lwt to execute commands
[02:51:25] <d_bot> <Continuation Calculus> so that i can thread all of this
[02:51:41] <d_bot> <Continuation Calculus> but it is good to note that ounit does indeed use more cores
[03:08:23] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:4819:c9fb:7a68:b7b3) (Quit: Konversation terminated!)
[03:11:58] <d_bot> <Et7f3> What you might try to do is open some instance of node repl and keep it open so you avoid the startup time.
[03:12:22] <d_bot> <Et7f3> You can try to do a kind of pool: is one instance die just re add process in the pool
[03:43:49] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[03:52:03] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[04:00:12] *** Joins: Techcable (~Techcable@168.235.93.147)
[04:49:35] <d_bot> <cemerick> I have something you might be interested in https://github.com/cemerick/homunculus
[04:50:05] <d_bot> <cemerick> It's a nodejs eval facility
[04:50:23] <d_bot> <cemerick> (I have yet to write the docs or do a release)
[06:56:23] *** Joins: mbuf (~Shakthi@223.178.74.194)
[07:29:45] *** Quits: tizoc (~user@li296-221.members.linode.com) (Quit: Coyote finally caught me)
[07:36:21] *** Joins: tizoc (~user@li296-221.members.linode.com)
[07:49:10] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 268 seconds)
[08:04:30] *** Joins: leah2 (~leah@vuxu.org)
[08:08:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[09:14:40] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:02:15] *** Joins: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c)
[10:17:55] *** Joins: gravicappa (~gravicapp@178.214.248.43)
[10:39:52] *** Joins: xd1le (~xd1le@user/xd1le)
[11:19:00] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[11:54:23] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[12:09:21] *** Joins: haesbaert (~haesbaert@195.95.187.184)
[12:22:20] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[12:30:12] *** Joins: mro (~mro@2002:5cc3:a543:0:cac:dbd6:ba3f:4608)
[12:37:43] *** Joins: olle (~olle@i5E866D9F.versanet.de)
[12:50:17] *** Quits: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:00:50] <d_bot> <Continuation Calculus> Looks vinteresting
[13:29:36] *** Joins: bartholin (~bartholin@158.110.70.215)
[13:31:09] <Leonidas> companion_cube: If I had the choice, I'd still prefer alcotest over ounit because ounit is a very java/xunit style library whereas the composable testables in alcotest are much nicer API-wise
[13:31:39] <Leonidas> also it doesn't overload silly operators just because you can write `foo >::: bar`
[13:54:33] <d_bot> <Continuation Calculus> Do you plan to maintain it, or was it just as a demonstration of the approach of keeping one process open?
[14:27:56] *** Quits: olle (~olle@i5E866D9F.versanet.de) (Remote host closed the connection)
[15:22:48] *** Quits: mro (~mro@2002:5cc3:a543:0:cac:dbd6:ba3f:4608) (Remote host closed the connection)
[15:39:02] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[15:39:03] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[15:42:25] <companion_cube> Leonidas: the API is bad in both cases imho
[15:42:49] <companion_cube> I find the first class modules of alcotest weird
[15:47:47] <Leonidas> companion_cube: where do you need to use first-class modules?
[15:48:00] <companion_cube> The checkable thing
[15:48:47] <companion_cube> The ounit actual test functions are more straightforward to use
[15:48:56] <Leonidas> Testables?
[15:49:01] <d_bot> <cemerick> The former is the plan
[15:50:32] <d_bot> <cemerick> It's what will keep using e.g. dream feasible long term
[15:50:59] <d_bot> <cemerick> (For me, that is)
[15:51:18] <Leonidas> https://github.com/mirage/alcotest/blob/a37d41e74ce626ae4f5ec04026daeeaa8daac10d/src/alcotest-engine/test.ml#L17-L22 this?
[15:52:09] <companion_cube> Ah yes
[15:53:42] <Leonidas> I find these pretty straightforward, there's combinators and you can implement your own TESTABLES. it is kinda like Cmdliner or Fmt, just with simpler types.
[15:57:08] <d_bot> <undu> It's a barrier for newcomers: 1. Knowing what is  a "testable" and how to define it, 2. Knowing what is Fmt.t and how to define one
[15:57:14] <d_bot> <undu> I think this could be eased somewhat
[15:58:17] <Leonidas> Sure, but the most common testables are predefined anyway
[15:59:05] <Leonidas> `assert_equal ~equal:String.equal "hest" my_value` is `Alcotest.(check string) "hest" my_value` essentially
[16:26:59] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[16:27:10] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[16:28:16] *** Joins: xiongxin (~Thunderbi@119.123.103.34)
[16:29:16] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[16:33:57] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Ping timeout: 256 seconds)
[16:59:05] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:07:23] *** Joins: xiongxin1 (~Thunderbi@113.116.34.60)
[17:09:05] *** Quits: xiongxin (~Thunderbi@119.123.103.34) (Ping timeout: 256 seconds)
[17:09:06] *** xiongxin1 is now known as xiongxin
[17:40:55] *** Joins: mro (~mro@2002:5cc3:a543:0:a106:8697:81d1:a500)
[17:42:39] <d_bot> <blub> does flambda work with multicore?
[17:51:38] <d_bot> <VPhantom> From the April update: "Support for Flambda has been merged into the Multicore OCaml project repository."
[17:52:04] <d_bot> <VPhantom> <https://github.com/ocaml-multicore/ocaml-multicore/pull/328>
[18:03:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:05:21] *** Quits: mro (~mro@2002:5cc3:a543:0:a106:8697:81d1:a500) (Remote host closed the connection)
[18:08:31] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:09:29] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[18:20:27] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[18:23:53] *** Joins: xiongxin1 (~Thunderbi@113.116.34.60)
[18:25:54] *** Quits: xiongxin (~Thunderbi@113.116.34.60) (Ping timeout: 265 seconds)
[18:25:54] *** xiongxin1 is now known as xiongxin
[18:57:31] *** Joins: mro (~mro@2002:5cc3:a543:0:a106:8697:81d1:a500)
[19:04:01] *** Quits: mro (~mro@2002:5cc3:a543:0:a106:8697:81d1:a500) (Remote host closed the connection)
[19:05:49] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[19:07:00] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[19:08:37] *** Joins: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c)
[19:12:51] *** Quits: xiongxin (~Thunderbi@113.116.34.60) (Remote host closed the connection)
[19:24:23] *** Quits: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c) (Ping timeout: 265 seconds)
[19:53:25] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[19:56:41] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[19:59:51] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[20:00:58] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[20:07:10] *** Joins: zebrag (~chris@user/zebrag)
[20:14:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[20:18:35] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[20:21:41] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[20:28:20] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:45:33] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[20:56:23] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[21:02:29] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:11:36] *** Quits: mbuf (~Shakthi@223.178.74.194) (Quit: Leaving)
[21:15:54] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[21:25:52] *** Quits: bartholin (~bartholin@158.110.70.215) (Quit: Leaving)
[21:27:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[21:32:48] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[21:50:03] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:54:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[22:32:12] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[22:34:07] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[22:36:25] *** Quits: ulyssa (~ulyssa@timecube.club) (Remote host closed the connection)
[22:37:58] *** Joins: ulyssa (~ulyssa@timecube.club)
[22:43:19] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[22:43:46] *** Joins: mro (~mro@port-92-195-165-67.dynamic.as20676.net)
[22:56:12] *** Quits: ulyssa (~ulyssa@timecube.club) (K-Lined)
[23:11:42] *** Quits: gravicappa (~gravicapp@178.214.248.43) (Ping timeout: 268 seconds)
[23:13:07] <d_bot> <EduardoRFS> Is it possible to implement the following function without using exceptions or recursive types in OCaml?
[23:13:07] <d_bot> <EduardoRFS>
[23:13:09] <d_bot> <EduardoRFS> ```ocaml
[23:13:10] <d_bot> <EduardoRFS> type ('a, 'b) eq = Eq: ('a, 'a) eq
[23:13:11] <d_bot> <EduardoRFS> type _ s
[23:13:13] <d_bot> <EduardoRFS> let f: type n a . (n, n s) eq -> a = ...
[23:13:14] <d_bot> <EduardoRFS> ```
[23:14:01] <d_bot> <EduardoRFS> I understand that there is valid cases for n, but from what I understand it's only the case under recursive types, is recursive types supposed to be sound in OCaml?
[23:19:37] <d_bot> <octachron> `let f: ... =  fun x -> let rec never x = never x in never x`?
[23:19:37] <d_bot> <octachron> But no, the function `f` can never return.
[23:19:39] <d_bot> <octachron> Recursive types are sound in OCaml.
[23:20:38] <d_bot> <EduardoRFS> sad
[23:21:48] <d_bot> <EduardoRFS> Was having fun doing Coq -> OCaml, but this broke me
[23:30:12] *** Quits: kurfen_ (~kurfen@160.238.38.230) (Quit: ZNC 1.8.2 - https://znc.in)
[23:31:44] *** Joins: kurfen (~kurfen@160.238.38.230)
[23:33:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:34:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:36:02] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[23:37:10] *** Quits: kurfen (~kurfen@160.238.38.230) (Ping timeout: 265 seconds)
[23:37:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Client Quit)
[23:37:38] <d_bot> <octachron> Ah, your question was more in the direction, it is possible to prove that `(n, n s) eq` is empty.
[23:38:07] *** Joins: kurfen (~kurfen@176.119.195.10)
[23:38:27] *** Quits: lagash (lagash@lagash.shelltalk.net) (Client Quit)
[23:38:48] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:47:32] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:51:34] <d_bot> <EduardoRFS> @octachron I don't think so
[23:51:34] <d_bot> <EduardoRFS> ```ocaml
[23:51:35] <d_bot> <EduardoRFS> let eq : (('a s as 'a), 'a s) eq = Eq
[23:51:36] <d_bot> <EduardoRFS> ```
[23:51:38] <d_bot> <EduardoRFS>
[23:51:39] <d_bot> <EduardoRFS> Actually types under rectypes
[23:51:40] <d_bot> <EduardoRFS> and allows you to call f
[23:52:33] *** Joins: gravicappa (~gravicapp@178.214.248.43)
[23:52:44] <d_bot> <EduardoRFS> which I would guess is why `function _ -> .` didn't work
[23:53:10] <d_bot> <EduardoRFS> also depending on the type of s it's possible to create it using `let rec`
[23:54:19] <d_bot> <octachron> There is also the issue that your definition could be hidding `type 'a s = 'a`
[23:54:38] <d_bot> <EduardoRFS> Oh yeah in my case s = |
[23:54:59] <d_bot> <EduardoRFS> Was a mistake when copying it
[23:56:17] <d_bot> <EduardoRFS> It would be cool to have a way to prove that a type is not recursive so this could be rejected with .
[23:58:14] *** Quits: haesbaert (~haesbaert@195.95.187.184) (Remote host closed the connection)
[23:59:02] *** Quits: mro (~mro@port-92-195-165-67.dynamic.as20676.net) (Remote host closed the connection)
[23:59:12] *** Joins: lagash (lagash@lagash.shelltalk.net)
