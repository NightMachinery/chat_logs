[00:00:07] <lmmx> (just in case anyone is well versed in these, else I can figure it out on my own)
[00:01:01] *** Quits: RBEL (~jigubigul@2001:1c06:19c3:7000:a178:1258:3480:b7c7) (Quit: WeeChat 3.2)
[00:01:11] <KirkMcDonald> lmmx: BytesIO is a strictly in-memory buffer. Does it contain the whole content of the stream, or is something writing data to it?
[00:01:44] <lmmx> KirkMcDonald it's a streaming HTTP request, being written to in chunks through the HTTP response iterator
[00:01:45] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[00:01:45] <SnoopJ> WhyNotHugo, tomli seems really good. A little opinionated, but regular maintenance counts for a lot here, I think.
[00:02:39] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[00:03:53] <KirkMcDonald> lmmx: Well, it's a file-like object. You can read from it in just the same way you would read from a file.
[00:05:10] *** Quits: lorcab (~user@197.251.194.240) (Remote host closed the connection)
[00:05:26] *** Joins: srilyk (~wayne@user/waynew)
[00:05:52] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:05:55] *** Joins: lorcab (~user@197.251.194.240)
[00:06:19] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[00:07:13] <lmmx> yep I've got all that side sorted, it's the view on it I'm after, was wondering about getting 'copies' of that stream without pulling down the stream
[00:07:42] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Ping timeout: 272 seconds)
[00:08:04] <lmmx> feel like I'm missing a piece of the puzzle
[00:08:31] <Payam> jinsun I am pretty sure that it is not >= 3.7.5 that is why this happens. But the problem is how I can make it to run it with python of higher version
[00:09:36] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 272 seconds)
[00:11:10] <jinsun> Payam:  I think python_requires and install_requires are all for pip and apt probably won't care about those, you'll have to find a way to tell apt about those things in the .deb
[00:11:28] *** Joins: acresearch (~acresearc@user/acresearch)
[00:11:32] <Payam> that is the problem
[00:11:49] <acresearch> people is it possible to add the values of each point in a scatter plot in matplotlib?
[00:12:14] <jinsun> Payam: probably if you follow this you'll get some ideas https://wiki.debian.org/Python/Packaging, I have never made a .deb so I don't know how you'd do that
[00:12:44] <Payam> jinsun that is what I have followed yes
[00:13:03] *** Joins: waynew (~wayne@user/waynew)
[00:13:03] *** Joins: ice9 (~ice9@user/ice9)
[00:13:11] *** Quits: hexeme (~hexeme@user/hexeme) (Quit: co'o ro do)
[00:13:29] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[00:13:43] <jinsun> okay so I'm out of ideas
[00:14:22] *** Joins: hexeme (~hexeme@user/hexeme)
[00:14:42] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 256 seconds)
[00:15:13] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Read error: Connection reset by peer)
[00:16:59] *** Joins: neilthereildeil (~neilthere@70.21.11.5)
[00:18:00] *** Joins: Pandadub (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[00:18:33] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[00:18:48] <neilthereildeil> hi, in which channel can i get help for tensorflow with keras library?
[00:19:39] <jinsun> acresearch: annotations? https://matplotlib.org/stable/tutorials/text/annotations.html
[00:19:51] <SnoopJ> neilthereildeil, if your questions are about the libraries themselves, they are topical here. Otherwise, maybe ask in ##machinelearning or ##machinelearning-general
[00:20:31] <neilthereildeil> thx
[00:20:40] <cul8r> neilthereildeil whats your question
[00:20:46] <neilthereildeil> whats the point of the keras Embedding class?
[00:21:19] <cul8r> depends on what youre trying to do. Have you looked at the docs for it
[00:21:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:22:09] <neilthereildeil> yea im lookint at it now
[00:22:20] <neilthereildeil> https://keras.io/api/layers/core_layers/embedding/
[00:22:36] <neilthereildeil> it seems like its something to do with a dense vector?
[00:23:19] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[00:25:30] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Client Quit)
[00:26:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:27:43] *** Joins: matiss (~matiss@almalinux/web/matiss)
[00:29:38] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:316f:1a84:f8a0:c03a) (Quit: Textual IRC Client: www.textualapp.com)
[00:30:08] *** Joins: V1mV1m (~VimVim@85.191.6.35)
[00:30:19] *** Quits: mike18 (~geri@217-149-163-174.nat.highway.telekom.at) (Remote host closed the connection)
[00:30:50] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[00:31:01] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[00:31:16] *** Joins: dreamer (~dreamer@user/dreamer)
[00:31:30] <SnoopJ> neilthereildeil, that is an implementation of an "embedding," which is a general concept of representing high-dimensional data in a lower-dimensional space.
[00:33:02] *** Quits: VimVim (~VimVim@85.184.175.6) (Ping timeout: 258 seconds)
[00:33:06] *** Quits: lmmx (~louis@host-2-99-2-156.as13285.net) (Ping timeout: 240 seconds)
[00:34:16] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (Quit: ZNC - http://znc.in)
[00:34:27] *** Joins: thiras (~thiras@user/thiras)
[00:34:28] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:35:52] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[00:36:29] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (Remote host closed the connection)
[00:36:54] *** Joins: jay-m126_ (~jay-m@129.0.204.218)
[00:37:35] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[00:38:10] *** Joins: marduk8 (~marduk@172.58.187.200)
[00:39:05] *** Joins: reset (~reset@user/reset)
[00:39:46] *** Joins: marduk6 (~marduk@172.58.187.217)
[00:41:51] *** Quits: marduk (~marduk@172.58.190.143) (Ping timeout: 258 seconds)
[00:41:52] *** marduk6 is now known as marduk
[00:43:23] *** Quits: wovixo (~wovixo@128.104.205.49) (Ping timeout: 258 seconds)
[00:43:33] *** nuala2 is now known as nuala
[00:43:56] *** Quits: marduk8 (~marduk@172.58.187.200) (Ping timeout: 268 seconds)
[00:44:33] *** Quits: mattil (~mattilinn@62-113-176-119.bb.dnainternet.fi) (Quit: Leaving)
[00:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:45:33] <neilthereildeil> ok thanks for your help everyone!
[00:46:01] *** Quits: neilthereildeil (~neilthere@70.21.11.5) (Quit: Client closed)
[00:47:17] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:49:40] *** Joins: Imbapokah (~pavel@88.201.129.183)
[00:51:16] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[00:52:01] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[00:52:17] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[00:52:41] *** Joins: seednode (~seednode@user/seednode)
[00:54:07] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[00:57:19] *** Joins: Sky_Net (~sky_net@176.14.210.40)
[00:57:25] <Sky_Net> hello PY
[00:59:31] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-c53a-2de2-e088-4952.res6.spectrum.com)
[00:59:37] <madprops> is there something like an iterator but that simply subtracts 1 until it reaches 0?
[00:59:45] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:9c68:bd4a:d73:9488) (Ping timeout: 252 seconds)
[00:59:52] <madprops> and can be checked if 0 or not
[01:00:19] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:40b2:79e7:5489:ea84)
[01:00:39] <madprops> i could just make a class method for this though
[01:01:10] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-697d-76f9-c1bf-e9e5.res6.spectrum.com) (Ping timeout: 256 seconds)
[01:01:34] <SnoopJ> madprops, `range(start, 0, -1)` ?
[01:02:02] *** Joins: Elodin (~weechat@user/elodin)
[01:02:27] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[01:02:32] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:03:06] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[01:05:42] *** Quits: Sky_Net (~sky_net@176.14.210.40) (Quit: Nettalk6 - www.ntalk.de)
[01:08:00] *** Joins: Sky_Net (~sky_net@176.14.210.40)
[01:08:13] <SnoopJ> or `iter(range(...))` if you truly want an iterator and not an iterable.
[01:08:30] *** Quits: greedom (~greedom@2001:16b8:3282:2a00:3c86:c590:8a9e:3455) (Remote host closed the connection)
[01:09:39] *** Joins: allegary (~allegary@apache/committer/gjm)
[01:09:46] *** Quits: MrFantastik (~user@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 272 seconds)
[01:10:19] *** jarthur_ is now known as jarthur
[01:10:24] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[01:13:21] *** Joins: prophet60091_ (~prophet60@87.123.153.195)
[01:13:49] <madprops> SnoopJ, what about something like this? https://dpaste.org/dtHx  (since I'm alreadyu using an object)
[01:14:14] <madprops> that way I can decrement and check if it's empty so I can use in an 'if'
[01:14:40] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[01:16:24] <SnoopJ> madprops, I probably would avoid that approach, but I can't see the rest of the object so I don't know how much that's driving what you want to do.
[01:17:07] <madprops> this would be the other relevant part https://dpaste.org/UTGQ
[01:17:42] <p-i-> Suppose I recieve a stream of JSON packets of identical format: {'foo': 123, 'bar':  '4.567', 'quux': True}, i.e. int, float(as string), bool. I'd like to add these to a pandas dataframe.
[01:17:42] <p-i-> Is it possible to avoid having to explicitly setup the dataframe structure?
[01:17:43] <p-i-> e.g. could I create an empty dataframe() and .append and it will create the correct structure if it's empty?
[01:17:44] <p-i-> Or would I have to do: df=None; ... if df: df.append(J); else: df = dataframe(J)
[01:17:56] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:18:19] *** Joins: Guddu (~Guddu@67.73.235.228)
[01:18:33] *** Joins: Caesar-EW (~Caesar-EW@cm-84.213.107.109.getinternet.no)
[01:18:37] *** Joins: hyper_dave (~hyper_dav@197.156.107.21)
[01:18:50] <Guddu> I get the following error when installing a wheel file.... ---> psycopg2-2.8.6-cp27-cp27m-win_amd64.whl is not a supported wheel on this platform.
[01:18:52] <Guddu> uname -m on the server returns x86_64. Why is the wheel file deemed not supported?
[01:19:22] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 240 seconds)
[01:19:50] <SnoopJ> Guddu, what operating system is the server running? That wheel is for Python 2.7 on Windows
[01:20:56] <Guddu> SnoopJ, My bad. Its on RHEL. I picked a wrong whl. Will correct it now.
[01:22:03] <SnoopJ> Guddu, I think pip might emit a little more information about what exactly is unsupported if you turn up the verbosity, but can't recall if it's basically just that message
[01:23:40] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[01:24:25] <jinsun> p-i-: appending to a dataframe in a loop is bad for performance, just append all those dicts to a list and call pd.DataFrame on that list of dicts after the loop
[01:24:35] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:24:49] *** Quits: rendar (~rendar@user/rendar) ()
[01:25:15] *** Quits: rany (~rany@user/rany) (Ping timeout: 250 seconds)
[01:26:35] *** Joins: Fiji (~Fiji@user/fiji)
[01:29:53] <SnoopJ> p-i-, you *can* do this, but as jinsun says, it can be expensive. The underlying Series objects will be re-created on every append. If you know about how much you want to store, you could create a DataFrame with the appropriate columns/index and pre-fill with NA, maybe. But a list is good too.
[01:31:41] <madprops> wasn't aware python was similar to js in checks like...  if "a": print(1)     (if not empty)
[01:31:41] *** Quits: dld (~davidlowr@73.61.8.44) (Ping timeout: 258 seconds)
[01:32:33] <SnoopJ> madprops, `if something:` is basically shorthand for `if bool(something):`
[01:32:54] <p-i-> I have to process dynamically, so I can't collect then process.
[01:32:55] <SnoopJ> it's not quite as unpredictable as JS's coercion, but some consider it a flaw
[01:33:12] <madprops> better than checking for empty strings every time
[01:33:23] <p-i-> Precreating a dataframe looks like a decent option
[01:33:38] <SnoopJ> p-i-, how much of this data do you need at any given time? All of it? The last N records?
[01:33:53] *** Quits: visl (visl@user/visl) (Ping timeout: 268 seconds)
[01:33:55] *** Joins: dld (~davidlowr@73.61.8.196)
[01:34:06] *** Quits: Sky_Net (~sky_net@176.14.210.40) (Quit: Nettalk6 - www.ntalk.de)
[01:34:22] *** Joins: Sky_Net (~Sky_Net@176.14.210.40)
[01:34:45] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:36:44] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[01:36:48] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[01:37:18] <p-i-> SnoopJ: Every time I get 1s of no-data-coming-in I process everything received up to that point. ok I see I can just store the raw JSON and then batch-process.
[01:37:54] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[01:38:31] <SnoopJ> p-i-, have you considered using collections.deque?
[01:39:11] <p-i-> It kinda upsets me that I have to pop items one by one with that object.
[01:39:45] <p-i-> I've wrapped np.array to make my own deque.
[01:40:16] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[01:40:22] <p-i-> I'm trying to balance the niceness of the pandas interface re: columns against the performance of using np 2d arrays.
[01:40:51] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:c9e:1cfa:7bc2:1ccc)
[01:42:17] <SnoopJ> p-i-, you don't have to pop anything at all if you specify the maximum size.
[01:42:55] <SnoopJ> if the rate of your incoming samples is relatively consistent you should be able to choose a size that corresponds to ~ 1 second
[01:43:16] <Guddu> SnoopJ, Now this wheel gives an error. I thought it was meant for RHEL
[01:43:17] <Guddu> Twisted-20.3.0-cp27-cp27m-manylinux1_x86_64.whl is not a supported wheel on this platform.
[01:44:18] <SnoopJ> Guddu, manylinux1 + x86_64 looks appropriate. You're installing this into CPython 2.7, right?
[01:44:54] <Guddu> SnoopJ, Python 2.7.9 (default, Apr  8 2015, 00:20:18)
[01:45:00] <Guddu> [GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2
[01:45:06] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 258 seconds)
[01:45:18] <SnoopJ> oof, old even by 2.7's standards. Okay, that shouldn't be the problem, then.
[01:45:24] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[01:46:24] *** Quits: LordVan (~lordvan@gentoo/developer/lordvan) (Quit: Leaving)
[01:46:55] <SnoopJ> Guddu, how are you invoking pip?
[01:47:45] <Guddu> SnoopJ, /opt/app/Python2.7.9/bin/pip install /Prerequisites/Twisted-20.3.0-cp27-cp27m-manylinux1_x86_64.whl --no-index --find-links /Prerequisite
[01:48:12] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:48:44] <altendky> does anyone have a solution for dependabot stripping out transitive compatibility library dependencies that aren't needed on the python version they run pip-compile with?  i've seen workarounds like "just explicitly specify those transitive deps" and "just make every python thing you run use that version by way of adding a `.python-version` file".  the latter is nearly useless and the former is...  well, technically it'll
[01:48:45] <altendky> "work".
[01:50:27] <Guddu> For a python compiled using source, is there a way to add bz2 moduled without having to compile the whole thing again?
[01:50:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:51:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:55:46] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Ping timeout: 240 seconds)
[01:56:17] *** Joins: rany (~rany@user/rany)
[01:56:32] <SnoopJ> Guddu, it's possible this RHEL is too old for manylinux1, RHEL 4 is the example given in the PEP. What glibc?
[01:56:54] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[01:57:42] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[01:58:18] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[01:59:34] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[02:00:15] *** Joins: darksun (~darksun@user/darksun)
[02:01:05] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Quit: Konversation terminated!)
[02:01:53] *** Joins: djapo (~archangel@user/djapo)
[02:02:12] <SnoopJ> Guddu, having a look around it seems like yea, probably the glibc for that is too old. You need 2.5+ for manylinux1
[02:04:56] *** Joins: clf59 (~clf59@user/clf59)
[02:05:23] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[02:05:25] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[02:06:25] *** Quits: digilink (~digilink@user/digilink) (Read error: Connection reset by peer)
[02:06:29] *** Joins: emika8 (~emika@185.207.249.9)
[02:06:50] *** Joins: digilink (~digilink@user/digilink)
[02:07:06] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 240 seconds)
[02:07:57] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[02:08:52] *** Quits: emika (~emika@212.102.45.58) (Ping timeout: 258 seconds)
[02:08:53] *** emika8 is now known as emika
[02:09:55] *** Joins: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de)
[02:10:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:10:36] <Guddu> SnoopJ, ldd (GNU libc) 2.17
[02:10:46] *** Leonarbro_ is now known as Leonarbro
[02:10:58] *** Quits: junktext (~junktext@77.247.181.218) (Ping timeout: 240 seconds)
[02:12:24] *** Joins: jazzy (~jaziz@2600:380:465b:aa32:a5e0:69d:ea69:d1e4)
[02:12:51] *** Joins: bkraptor (~bkraptor@80.111.224.110)
[02:13:04] *** Quits: magla (~gelignite@55d4b7f5.access.ecotel.net) (Quit: Stay safe!)
[02:13:26] *** Joins: marduk0 (~marduk@172.58.190.181)
[02:13:58] *** Quits: Mikro (leo@the.c0ffee.shop) (Ping timeout: 268 seconds)
[02:14:37] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[02:15:40] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::791f) (Quit: Konversation terminated!)
[02:16:10] <SnoopJ> Guddu, huh, it's not that, then. Dunno, there's something it doesn't like. There's probably a way to explicitly check manylinux1 compat and such a thing might give you a hint why if it isn't.
[02:16:36] <p-i-> How can I group the following data (using Pandas): https://bpa.st/UD2Q ?
[02:16:37] *** Joins: ubert (~Thunderbi@91.141.44.204.wireless.dyn.drei.com)
[02:16:53] *** Joins: darksun (~darksun@user/darksun)
[02:17:21] <Guddu> SnoopJ, I might be able to work around it if I could install a library using bz2 but that module is not installed. Is there a way to add it without having to recompile the whole thing?
[02:17:32] *** Quits: marduk (~marduk@172.58.187.217) (Ping timeout: 272 seconds)
[02:17:32] *** marduk0 is now known as marduk
[02:20:40] *** Joins: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[02:20:46] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[02:21:54] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[02:22:01] *** Joins: marduk0 (~marduk@172.58.187.97)
[02:22:06] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[02:22:22] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:22:44] <SnoopJ> Guddu, not sure. My intuition is that this is well off the beaten path, so if there is a way it's going to be at peril, but I guess you're already in the snake pit here.
[02:22:56] <Guddu> Yeah
[02:23:21] <SnoopJ> modern libpython doesn't seem to link against it, dunno about the oldies
[02:24:13] <Guddu> SnoopJ, I will just try to build Python3 instead. I just need twisted and requests and psycopg2 modules for this project to be honest.
[02:24:35] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[02:24:59] <SnoopJ> Guddu, have you tried installing those packages from sdists? I'm guessing the bz2 question is because they want it
[02:25:13] *** Quits: Barones (~Barones@2804:48dc:8500:0:3100:1852:23b9:80b6) (Quit: Leaving)
[02:25:32] <jinsun> p-i-: that J in your paste is not valid python, because you can't have dicts inside set, I assume J is actually a list
[02:25:46] *** Quits: marduk (~marduk@172.58.190.181) (Ping timeout: 272 seconds)
[02:25:47] *** marduk0 is now known as marduk
[02:25:50] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:26:35] <Guddu> SnoopJ, Its only twisted which is giving me trouble at the moment. ​Twisted 20.3.0 was the last version with Python 2.7 and PyPy2 support.
[02:27:04] *** Quits: clf59 (~clf59@user/clf59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:27:07] <Guddu> I tried installing using the bz2 file at https://pypi.org/project/Twisted/20.3.0/ and since i don't have that bz2 module I could not install.
[02:27:47] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[02:28:02] *** Joins: Praise (~Fat@user/praise)
[02:28:02] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:2c62:d9b7:a938:d1d6) (Ping timeout: 258 seconds)
[02:28:05] *** Quits: ubert (~Thunderbi@91.141.44.204.wireless.dyn.drei.com) (Quit: ubert)
[02:28:13] <Guddu> So i tried installing using the .zip source file instead from github but it gives me an error which I can't seem to solve
[02:28:14] <Guddu> https://dpaste.com/HQNJJ59LF
[02:28:18] *** Quits: jay-m126_ (~jay-m@129.0.204.218) (Ping timeout: 272 seconds)
[02:28:23] <Guddu>  error in Twisted setup command: 'extras_require' must be a dictionary whose values are strings or lists of strings containing valid project/version requirement specifiers.
[02:29:11] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[02:30:06] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[02:30:09] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[02:30:28] *** Joins: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se)
[02:32:40] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:33:01] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 258 seconds)
[02:33:22] *** Joins: darksun (~darksun@user/darksun)
[02:34:15] <graingert> Guddu: try asking in https://gitter.im/twisted/twisted ?
[02:34:18] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[02:34:34] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:40b2:79e7:5489:ea84) (Ping timeout: 240 seconds)
[02:34:51] <Guddu> graingert, Thanks. I was thinking of trying with a updated version of pip. Trying to find what is the last version supported on py2
[02:35:06] <graingert> Guddu: Use pip install pip-with-requires-python
[02:35:23] *** Quits: dvx (~dvx@185.63.97.64) (Read error: Connection reset by peer)
[02:35:31] <SnoopJ> Guddu, old distutils, maybe
[02:35:53] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 250 seconds)
[02:35:58] <Guddu> graingert, wow. That installed pip-20.3.4
[02:36:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[02:36:21] <Guddu> graingert, So that command installs the most updated version of pip compatible with the python in that env?
[02:36:22] <graingert> Guddu: Handy init
[02:36:59] <p-i-> jinsun: my bad
[02:38:05] <p-i-> https://gist.github.com/p-i-/b7862b2549de60df2781c96f303127db <-- I'm able to filter individual trades, but the datastructure of `tr` connfuses me. `for p in tr: print(p)` doesn't actually print the original partials.
[02:38:10] <Guddu> graingert, Is there a similar way to update setuptools?
[02:38:25] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[02:38:40] <graingert> Guddu: you can just use `pip install -U setuptools` after installing pip-with-requires-python
[02:38:46] <p-i-> Instead tr seems to be a list of 2 objects. The first one is the value of the grouped-by col, and the second is an array of the matching columngs.
[02:39:09] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[02:40:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:41:25] <p-i-> How can I calculate volume on a trade? (I've edited the gist to put the question at the bottom for context)
[02:42:52] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 272 seconds)
[02:43:28] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[02:44:05] <Guddu> graingert, I've made some progress. That error went away but I now have a different one. I have setuptools-44.1.1 but i get this error
[02:44:05] <Guddu> https://dpaste.com/GF3TH6KNM#wrap
[02:44:16] <Guddu> RROR: Could not find a version that satisfies the requirement setuptools>=40.8.0 (from versions: none)
[02:44:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[02:45:22] *** Joins: ubert (~Thunderbi@91.141.44.204.wireless.dyn.drei.com)
[02:45:35] *** Joins: marduk3 (~marduk@172.58.187.234)
[02:46:13] *** Joins: marduk6 (~marduk@172.58.187.245)
[02:46:46] *** Joins: Mysoft (~user@user/mysoft)
[02:47:29] <Mysoft> i tried to install cython but my pip required update so now this whole temp python install is a mess...  anyone have used cython + py2c?
[02:47:54] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:47:59] <graingert> Guddu: you should be able to use the .whl no
[02:48:01] <graingert> Guddu: you should be able to use the .whl now *
[02:48:15] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Read error: Connection reset by peer)
[02:48:16] <graingert> just a `pip install twisted` will do it afaik
[02:48:18] <Guddu> graingert, Excellent one :-)  .whl worked.
[02:48:19] *** Joins: marduk64 (~marduk@172.58.190.189)
[02:48:25] <jinsun> p-i-: change your for loop to `for buyer_id, partial_df in tr: print((partial_df.p.astype(float) * partial_df.q.astype(float)).sum())`
[02:48:48] <Guddu> graingert, The thing is that this machine will not have internet so I have to download the whl files and deliver to them.
[02:48:58] <jinsun> p-i-: it will be better to do that .astype(float) beforehand and fix your column types
[02:49:01] *** Joins: Fiji (~Fiji@user/fiji)
[02:49:04] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:49:06] *** Quits: marduk (~marduk@172.58.187.97) (Ping timeout: 240 seconds)
[02:49:07] *** marduk64 is now known as marduk
[02:49:22] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[02:49:42] <jinsun> also you can simply do `mb_partials = df[~df.m]` and `ms_partials = df[df.m]`
[02:50:15] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (Quit: dalan6)
[02:50:21] *** Quits: marduk3 (~marduk@172.58.187.234) (Ping timeout: 268 seconds)
[02:50:28] <graingert> Guddu: use a shiv
[02:50:41] <graingert> Guddu: https://shiv.readthedocs.io/en/latest/
[02:50:43] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[02:51:46] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 240 seconds)
[02:51:47] *** Quits: marduk6 (~marduk@172.58.187.245) (Ping timeout: 245 seconds)
[02:51:48] <p-i-> jinsun: awesome, thanks!
[02:52:11] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:508a:7ccc:d037:5b29)
[02:52:33] <Guddu> graingert, Is there a way to download all dependency whl files at once? For example, If i do a pip install twisted, it installed the following
[02:52:33] <Guddu> attrs-21.2.0-py2.py3-none-any.whl (53 kB), constantly-15.1.0-py2.py3-none-any.whl (7.9 kB), Automat-20.2.0-py2.py3-none-any.whl (31 kB), hyperlink-21.0.0-py2.py3-none-any.whl (74 kB), zope.interface-5.4.0-cp27-cp27m-manylinux2010_x86_64.whl (247 kB), PyHamcrest-1.10.1.tar.gz (43 kB)
[02:53:10] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[02:53:11] <graingert> Guddu: pip wheel will do it
[02:53:25] <graingert> Guddu: but using a shiv is best
[02:53:55] *** Parts: Mysoft (~user@user/mysoft) ()
[02:54:06] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[02:54:07] <jinsun> p-i-: actually it should have been `for buyer_id, partial_df in mb: ...`, so change the outer loop, and you don't need the inner "tr" loop
[02:54:10] <graingert> Guddu: https://pip.pypa.io/en/stable/cli/pip_wheel/#cmdoption-no-deps
[02:54:19] <graingert> By default no-deps is false
[02:54:30] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[02:54:40] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:2c62:d9b7:a938:d1d6)
[02:54:56] <p-i-> yeah I got that!
[02:55:52] <graingert> Guddu: It also builds wheels for things missing them
[02:56:47] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Ping timeout: 258 seconds)
[02:57:44] *** Joins: darksun (~darksun@user/darksun)
[02:58:56] <p-i-> jinsun: This is looking really clean now: https://bpa.st/WDHQ ... can you spot any obvious major speedups?
[02:58:59] *** Quits: Akuli (~Akuli@87-94-109-26.bb.dnainternet.fi) (Quit: Leaving)
[03:00:13] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:2c62:d9b7:a938:d1d6) (Ping timeout: 268 seconds)
[03:00:32] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:02:42] <p-i-> e.g. can I speed up the assembly of the dataframe by telling Pandas of the expected type for each column, so it doesn't need to check/validate?
[03:02:55] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 258 seconds)
[03:03:18] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[03:03:54] <p-i-> It feels like this is the sweetspot between clean / wieldy code and performance.
[03:04:51] *** Quits: Caesar-EW (~Caesar-EW@cm-84.213.107.109.getinternet.no) (Ping timeout: 258 seconds)
[03:06:20] *** Quits: gabe_ (~gabe@user/gabe) (Quit: WeeChat 3.1)
[03:07:26] *** Joins: gabe (~gabe@user/gabe)
[03:07:39] <SnoopJ> p-i-, you could potentially reduce L19-23 to a single groupby(), but if you want performance, you need to profile it to see which part is dominating the execution time.
[03:08:06] *** Quits: ubert (~Thunderbi@91.141.44.204.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[03:08:28] *** Joins: drew` (~drew@user/drew)
[03:09:09] *** drew` is now known as drew
[03:09:37] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:8180:4ea1:9723:f07a)
[03:09:50] <jinsun> p-i-: you can give dtype=float to pd.DataFrame, to get rid of the to_numeric but it works on all the columns at once, you can't choose
[03:10:10] <Guddu> graingert, If I have all the whl files and if i install requests then will it automatically pick all other dependencies? Or shall i install each individually?
[03:10:20] <graingert> Guddu: ?
[03:10:23] <SnoopJ> Transforming p/q before creating the DataFrame (as data streams in?) might be the way to go there. Definitely the Series being created there is a waste since you immediately replace it.
[03:10:51] <graingert> Guddu: you have a setup.py or requirements.txt?
[03:11:14] <Guddu> graingert, So for example the requests module has dependency on idna, certifi etc. If i do pip install requests it should automatically find dependencies in the current directory?
[03:11:29] <Guddu> graingert, I only have all the wheel files now.
[03:11:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:11:40] <graingert> Yes it should just work
[03:12:03] *** Parts: crised (~crised@200.112.228.39) ()
[03:12:12] <graingert> Guddu: if you pass the --wheel-die
[03:12:18] <graingert> --wheel-dir
[03:12:24] <Guddu> graingert, Thanks
[03:12:27] *** Quits: dangrenier83 (~user@user/dangrenier83) (Quit: WeeChat 3.2)
[03:13:11] *** Joins: cjb (~cjb@user/cjb)
[03:13:48] <graingert> Guddu: Oh wheel-dir is wrong
[03:13:51] <graingert> You want https://pip.pypa.io/en/stable/cli/pip_install/#cmdoption-f
[03:13:57] <Guddu> graingert, --find-links
[03:16:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:16:26] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:16:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[03:17:15] *** Joins: ironsoba (~z@user/ironsoba)
[03:20:25] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:22:00] <p-i-> ok, https://bpa.st/VIRA tidied! The last challenge I have is to merge buys and sells back into a single iterable, preserving the original order (of the first partial in each group).
[03:22:18] <p-i-> I bet there's a tidy way to do this with pandas too.
[03:24:36] <SnoopJ> p-i-, round-tripping through DataFrame seems kinda like a waste, lots of copying. Especially since it looks like your use of groupby() could be expressed relatively easily in a generator function.
[03:25:04] <p-i-> I've also got an E (execution time) field which I added in. So maybe I can concatenate ms and mb, and sort by trade.E.min() ... does this sound about right?
[03:26:27] <p-i-> SnoopJ: hmm yes. In almost all cases I'll get back the original ordering, as the order only gets spliced/messed up when 2 trades execute within a few ms on the exchange.
[03:26:50] <SnoopJ> The order should be a non-issue since pandas is giving you an IntIndex here
[03:27:06] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 240 seconds)
[03:27:29] *** Quits: cul8r (~cul8r@198.133.178.20) (Quit: abducted by aliens)
[03:27:30] *** Joins: darksun (~darksun@user/darksun)
[03:30:58] *** Quits: bkraptor (~bkraptor@80.111.224.110) (Ping timeout: 240 seconds)
[03:33:45] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:4352:aacd:a15a:e476) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:33:46] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[03:34:14] <p-i-> Is there a more concise way to to `first, others = L[0], L[1:]`? I may be thinking of lisp...
[03:35:00] <Repiphany> first, *others = L
[03:37:27] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[03:38:34] *** Quits: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Ping timeout: 258 seconds)
[03:39:41] *** Joins: bkraptor (~bkraptor@80.111.224.110)
[03:40:22] *** Joins: Betal (~Beta@user/betal)
[03:40:29] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[03:40:53] *** Quits: bkraptor (~bkraptor@80.111.224.110) (Client Quit)
[03:42:48] *** Joins: bkraptor (~bkraptor@80.111.224.110)
[03:43:02] *** Quits: Elon_Satoshi (~elonsatos@user/elon-satoshi/x-4242282) (Ping timeout: 272 seconds)
[03:43:16] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:43:37] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:294d:80b3:2ed8:c800)
[03:43:51] <p-i-> yessss thassit!
[03:44:13] *** Joins: Elon_Satoshi (~elonsatos@user/elon-satoshi/x-4242282)
[03:44:42] *** Quits: Melantha (~pyon@user/pyon) (Quit: WeeChat 3.2)
[03:45:07] *** Joins: Melantha (~pyon@user/pyon)
[03:45:32] *** Joins: syrius (syrius@titan.stormtek.net)
[03:45:51] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[03:46:22] *** Quits: marduk (~marduk@172.58.190.189) (Ping timeout: 245 seconds)
[03:48:49] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[03:48:55] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:294d:80b3:2ed8:c800) (Ping timeout: 258 seconds)
[03:52:56] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[03:54:45] *** Quits: Bryce (~bryce@ool-457dd6ac.dyn.optonline.net) (Remote host closed the connection)
[03:56:45] *** Joins: dre (~dre@2001:8003:c932:c301:60b3:aefe:6a08:9d70)
[03:58:21] *** Quits: Sky_Net (~Sky_Net@176.14.210.40) (Read error: No route to host)
[03:59:52] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7)
[04:00:32] *** Joins: tims (~tims@61.69.131.46)
[04:03:06] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[04:03:31] *** Joins: Sky_Net (~Sky_Net@176.14.210.40)
[04:05:12] *** Joins: junktext (~junktext@109.201.152.172)
[04:07:07] *** Quits: d3sync (~d3sync@77.49.118.37.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:09:35] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:12:31] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 250 seconds)
[04:13:16] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:13:16] *** Wulf4 is now known as Wulf
[04:15:22] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[04:16:11] <p-i-> is myfloat*1e8 always guaranteed NOT to have precision errors?
[04:16:42] <p-i-> Supposing 0 < myfloat < 1
[04:17:33] <Repiphany> ?
[04:17:52] <Repiphany> Error propagation won't be eliminated just by multiplying by a large number in general
[04:18:06] <p-i-> I don't mean exceptions
[04:18:09] <p-i-> I mean inaccuracy
[04:18:23] <Repiphany> Yes, that's what I mean by error propagation
[04:18:32] <Repiphany> It depends on what math you're trying to actually do
[04:19:29] <Repiphany> https://floating-point-gui.de/errors/propagation/
[04:19:39] <p-i-> I have something like '0.00000135' (as a string, and I want to multiply it by 1e8 to get an integer. I'm doing int(float(s)*1e8), trying to figure out if that's solid.
[04:20:55] <KirkMcDonald> p-i-: Depends on what "solid" means, specifically.
[04:21:00] <p-i-> I'm actually wondering whether to use np.int64 as Python int will be less efficient, I think. Python doesn't seem to have an int64 type.
[04:21:18] <KirkMcDonald> Python's int type is arbitrary precision.
[04:21:26] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[04:21:54] <p-i-> yup, and that will come at considerable performance cost, I'm betting.
[04:24:40] <Repiphany> int(float('0.00008191')*1e8) == 0.8190
[04:24:53] <Repiphany> oops, no 0.
[04:25:29] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[04:26:10] *** Quits: junktext (~junktext@109.201.152.172) (Ping timeout: 240 seconds)
[04:26:18] <KirkMcDonald> Also, int(float('0.00000003') * 1e8)
[04:26:45] <p-i-> omg
[04:27:29] <p-i-> I better use round()
[04:27:40] <Repiphany> Like 7% of numbers fail that conversion
[04:28:00] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:29:00] <SnoopJ> p-i-, if you want guarantees at all, use `decimal`
[04:29:13] <SnoopJ> (or integers)
[04:29:48] <KirkMcDonald> p-i-: You're starting with a string. Why even involve a float?
[04:29:48] <SnoopJ> And resist the temptation to guess about performance whenever you can measure it.
[04:30:18] <p-i-> Good point(s)
[04:31:08] <p-i-> I can just strip the 0.{leading 0s} somehow.
[04:31:36] <KirkMcDonald> int(s[2:].ljust(8, "0"))
[04:32:20] <p-i-> nice!
[04:32:22] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com) (Read error: Connection reset by peer)
[04:34:01] <p-i-> Can I get a speedboost by using bytes? As I understand, each char in a string an be unicode, which must slow it down some.
[04:35:04] <KirkMcDonald> I would not worry about this.
[04:35:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[04:35:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 258 seconds)
[04:35:19] <p-i-> yeah, this will give me the performance I need. Thanks!
[04:35:46] <p-i-> I've got billions of these beasties to process.
[04:37:43] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:40:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:41:23] *** Joins: bigRoo (~user@131.236.55.20)
[04:43:34] *** Joins: visl (visl@user/visl)
[04:44:09] *** Quits: prophet60091_ (~prophet60@87.123.153.195) (Ping timeout: 252 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:20] *** Joins: qlixed (~qlixed@181.44.129.13)
[04:46:21] <InPhase> SnoopJ: The Decimal library will help with basic addition and subtraction of base 10 values, but that's about it.  It doesn't have nearly the magic people attribute to it.  e.g., Decimal('1')/Decimal('3')*Decimal('3')
[04:46:46] <KirkMcDonald> It's all fractions.
[04:47:01] *** Quits: qlixed (~qlixed@181.44.129.13) (Client Quit)
[04:47:35] <SnoopJ> InPhase, right, using an integral representation just can't be beat.
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:48] <Repiphany> Gotta step your symbolic algebra game
[04:48:23] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[04:48:24] <KirkMcDonald> We do have the fractions module if you need more general fractional values.
[04:48:45] <KirkMcDonald> And of course there is sympy if you really want to go down the symbolic algebra path.
[04:51:02] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[04:52:56] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[04:55:14] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 272 seconds)
[05:00:06] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 252 seconds)
[05:01:09] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[05:02:00] *** Joins: schumaml1 (~schumaml@dslb-092-074-008-068.092.074.pools.vodafone-ip.de)
[05:02:58] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[05:04:06] *** Quits: schumaml (~schumaml@ipservice-092-211-206-206.092.211.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[05:04:50] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[05:04:56] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:06:15] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[05:08:14] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 256 seconds)
[05:10:10] *** Joins: dg_dg (~dg_dg@cm-171-101-74-239.revip11.asianet.co.th)
[05:11:05] <greatgatsby> any tips for using pytest and platform specific tests (windows & linux)?  I have windows tests that will fail and linux, and vice versa.  Do I need to create separate dirs for os-specific tests?
[05:11:22] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:11:39] <greatgatsby> I'm ok with my tests being outside my source (that might even be preferred?)
[05:11:42] *** Quits: dgdg (~dg_dg@84.252.92.8) (Ping timeout: 276 seconds)
[05:11:54] *** Quits: aeon_flux (~textual@d-207-244-191-202.fl.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[05:12:33] *** Quits: lorcab (~user@197.251.194.240) (Remote host closed the connection)
[05:13:38] *** Quits: whaley (uid13429@id-13429.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:13:42] <nedbat> greatgatsby: you can skip them on the platforms they don't apply to
[05:14:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[05:15:13] <nedbat> greatgatsby: for example: https://github.com/nedbat/coveragepy/blob/6adbefa71acf97833ae1e24309fbefd3cda02165/tests/test_process.py#L1029
[05:16:03] *** Joins: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com)
[05:17:14] <SnoopJ> If you had a lot of such tests you might want to organize into platform-specific directories and use an autouse fixture to do this, but having `reason` per-test like that is I think better
[05:17:26] <SnoopJ> (plus it's simpler)
[05:17:27] <greatgatsby> nedbat, my problem is the windows tests have imports that fail on linux, like winreg for example.
[05:18:01] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:18:52] <greatgatsby> nedbat, SnoopJ - thanks for the feedback, just wanted to make sure I wasn't missing some nice hidden feature like a filename platform convention or something like that.  I think I'll go with separate dirs.
[05:19:41] <nedbat> greatgatsby: i might put those imports into a try/except, and still skip the tests based on platform.  separate dirs will just complicate your test-running script.
[05:20:12] <greatgatsby> nedbat, ok, definitely something to try
[05:20:32] <greatgatsby> and I agree with that, I just want to run pytest against the base of the tests dir
[05:20:38] <SnoopJ> oh, there's also the `pytestmark` global, which beats the heck out of my autouse idea.
[05:20:55] *** Joins: lilibyte1 (lilibyte@gateway/vpn/protonvpn/lilibyte)
[05:21:28] <SnoopJ> `try: import mightfail; except ImportError: pytestmark = pytest.skip(reason="Couldn't import the thingy")`
[05:22:36] <greatgatsby> ok - this might work very well!
[05:23:07] <SnoopJ> greatgatsby, if you haven't read the pytest doc on skipping before, it's a good survey of options: https://pytest.org/en/stable/skipping.html
[05:24:08] <phy1729> Is there a flake8 plugin or other linter for checking if code uses a pep 585 deprecated import like from typing import Iterator?
[05:24:12] <SnoopJ> ...including pytest.importorskip(), which is yet another improvement over what I said. (perhaps *I* should read this more carefully)
[05:25:36] <greatgatsby> ahaha, yeah, I should have fully read through the docs first, I'll admit, was just hoping this was something common enough there would be one or two people who would immediately know the best approach.
[05:25:40] * greatgatsby goes to do some reading
[05:26:52] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:27:00] <SnoopJ> no need for that 'should,' but it's a good guide to what's possible (and nedbat's advice is good, simple is better than complex)
[05:27:07] <greatgatsby> if not sys.platform.startswith("win"): pytest.skip("skipping windows-only tests", allow_module_level=True)
[05:27:23] <greatgatsby> :-P
[05:28:09] <greatgatsby> that's pretty cool since it's at the module level
[05:29:37] <SnoopJ> yup, pytest has nice toys for just about everything
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:29] *** Joins: darksun (~darksun@user/darksun)
[05:32:09] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[05:33:45] *** Quits: Ninja3047 (~Ninja3047@3047.ninja) (Quit: bye)
[05:34:15] *** Joins: vlm (~vlm@user/vlm)
[05:34:31] *** Joins: moog (~moog@107.77.244.158)
[05:35:12] *** Quits: vitejose (~vitejose@2600:6c40:5b00:6875:76e1:e3e:e31b:c6a2) (Quit: vitejose)
[05:36:00] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 256 seconds)
[05:36:14] *** Quits: shailangsa (~shailangs@host86-185-98-7.range86-185.btcentralplus.com) (Ping timeout: 268 seconds)
[05:37:08] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[05:37:42] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[05:38:03] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[05:38:48] <mawk> when I do a fourier transform with a window, how do I do the inverse fourier transform
[05:39:05] <mawk> I tried dividing by the window I initially applied but it gives weird results at the edges
[05:39:45] *** Joins: Celeo (~Celeo@user/celeo)
[05:39:57] <mawk> like yf = scipy.fft.rfft(y * window); # magic with yf; y_new = scipy.fft.irfft(yf) / window
[05:40:26] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[05:41:13] *** Joins: Ninja3047 (~Ninja3047@3047.ninja)
[05:41:14] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:8180:4ea1:9723:f07a) (Quit: Textual IRC Client: www.textualapp.com)
[05:43:16] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:43:52] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[05:43:52] *** brabrax_ is now known as brabrax
[05:49:59] <Roey> <mawk> when I do a fourier transform with a window, <-- see, when I finished my college engineering courses, I threw fourier transforms out the window
[05:50:09] <mawk> lol
[05:50:39] <Roey> (kidding, kidding, signals&systems was one of my favorite courses.  I loved it so much I did it twice :P)
[05:50:44] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:51:05] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:53:20] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[05:54:16] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[05:56:34] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[05:58:55] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[05:59:56] *** Joins: frost (~frost@59.71.241.179)
[06:00:34] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:00:52] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[06:01:14] *** Joins: y1n (~y1n@84-115-64-50.wifi.dynamic.surfer.at)
[06:01:23] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[06:02:33] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[06:03:17] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[06:03:27] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[06:06:44] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[06:06:55] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[06:06:56] *** Quits: emerent (~quassel@p200300cd57058c07ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:07:06] *** Joins: emerent (~quassel@p200300cd57058c27ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:07:13] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[06:07:27] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[06:07:47] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Ping timeout: 250 seconds)
[06:08:56] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:10:36] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Client Quit)
[06:10:58] *** Quits: visl (visl@user/visl) (Ping timeout: 240 seconds)
[06:12:30] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:13:39] *** Quits: moog (~moog@107.77.244.158) (Quit: Leaving)
[06:15:44] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 258 seconds)
[06:16:21] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c48:2300:826d:c98c:fb22:4df)
[06:19:11] *** Quits: sharperguy__ (~sharpergu@2001:16b8:5cb8:8700:7c13:7fe3:176d:1dc7) (Ping timeout: 258 seconds)
[06:19:17] *** Parts: lilibyte1 (lilibyte@gateway/vpn/protonvpn/lilibyte) (WeeChat 3.2)
[06:19:28] *** Quits: y1n (~y1n@84-115-64-50.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[06:21:57] *** Joins: jpic_ (~jpic@82.142.19.50)
[06:23:29] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[06:24:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[06:24:32] *** Joins: Novi (~novi@user/novi)
[06:24:58] *** Quits: jpic (~jpic@82.142.6.158) (Ping timeout: 240 seconds)
[06:25:12] *** Joins: rany_ (~rany@user/rany)
[06:25:36] *** Gustavo6046_ is now known as Gustavo6046
[06:26:52] *** penguino is now known as fezhead
[06:27:33] *** Quits: rany (~rany@user/rany) (Ping timeout: 252 seconds)
[06:27:37] *** Joins: nbao (~nbao@187.20.162.127)
[06:28:08] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[06:28:54] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:29:50] *** Joins: SuperLag (~akulbe@user/superlag)
[06:30:34] *** Quits: SuperLag (~akulbe@user/superlag) (Client Quit)
[06:31:27] *** Quits: hyper_dave (~hyper_dav@197.156.107.21) (Ping timeout: 258 seconds)
[06:31:39] *** Joins: visl (visl@user/visl)
[06:31:46] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 240 seconds)
[06:31:59] *** Joins: hyper_dave (~hyper_dav@197.156.107.21)
[06:35:56] *** Quits: emika (~emika@185.207.249.9) (Ping timeout: 272 seconds)
[06:37:14] *** Joins: emika (~emika@185.207.249.114)
[06:38:52] *** Quits: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be) (Ping timeout: 245 seconds)
[06:40:33] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[06:40:46] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:42:13] *** Quits: Guddu (~Guddu@67.73.235.228) (Quit: Leaving)
[06:42:13] *** Joins: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[06:43:24] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:a452:b856:6408:4425)
[06:44:02] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:44:56] *** Joins: eramirez (~eramirez@49.149.137.68)
[06:45:58] <dale> Does attrs have something like "attr.asdict but don't include any attributes which were not provided at construction time"?  I'm not seeing anything I wouldn't have to write myself.  "Don't include any attributes which are at their defaults" might also work, but I'm not seeing that either, unless I write it.
[06:46:05] <sybariten> hey hey
[06:46:18] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[06:46:43] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 258 seconds)
[06:47:20] <sybariten> i have a dictionary that looks like this https://bpa.st/CPRQ - it has nested values, to multiple levels.
[06:47:50] <dale> Pydantic's dict/JSON conversion has exclude_unset and exclude_defaults options, as well as exclude_none.  That's very nice.
[06:47:54] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 276 seconds)
[06:47:58] *** Quits: Samian (~Sami@2620:10d:c091:480::1:385b) (Ping timeout: 272 seconds)
[06:47:59] <sybariten> If i want to return a country name by inputting one of those "id" numbers, how do i do the traversing of this data?
[06:48:33] <jochum> sybariten: I have a look
[06:49:02] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:49:03] *** FinnElija is now known as Guest9934
[06:49:03] *** Quits: Guest9934 (~finn_elij@user/finn-elija/x-0085643) (Killed (calcium.libera.chat (Nickname regained by services)))
[06:49:03] *** finn_elija is now known as FinnElija
[06:49:21] <sybariten> for every country, i want to do something related to the sub-value with the index of... 1, i guess. Or actually the _value_ of that dictionary unit
[06:49:28] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[06:49:51] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[06:50:21] <jochum> sybariten: what about simple for loop on it?
[06:51:01] <sybariten> yeah jochum i want to do it as simple as possible  :)   but i'm getting a bit lost in the sub-dictionaries here... hm
[06:51:09] <SnoopJ> dale, asdict() has `filter`, you could probably cook up a suitable predicate for that
[06:51:10] <dale> sybariten: https://bpa.st/25IQ
[06:51:31] <jochum> dale: speedy gonzales? :)
[06:51:47] <dale> SnoopJ: Yeah, that's what I thought.  Thanks.
[06:52:00] <sybariten> dale: jesus that's fast .... you do this for a living i presume :)
[06:52:12] <dale> I'll just use Pydantic I think, I have the ability here.  It probably even makes more sense as I'm serializing/deserializing JSON.
[06:52:20] *** Joins: m4v (~znc@ubuntu/member/m4v)
[06:52:23] <dale> sybariten: I do this for life. ;)
[06:52:32] <sybariten> gotcha
[06:52:43] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[06:53:02] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 245 seconds)
[06:53:22] <SnoopJ> dale, what's driving the desire to avoid serializing these other fields?
[06:53:23] <jochum> dale: it took you 4 mins to write that.... :)
[06:53:51] <dale> SnoopJ: I've specified the data format using JSON Schema and I've specifically allowed them to be absent rather than nullable.
[06:54:04] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[06:54:26] <SnoopJ> dale, okay, so it's allowed, but why is it desirable? Are you looking for savings on the wire or on disk, or what?
[06:55:46] <dale> SnoopJ: That's a good question.  Thinking about it, I think JSON Schema really prefers "leave it out" to "set it to null" when it comes to "properties".
[06:56:40] <SnoopJ> dale, well, I'm assuming that the values on the class aren't None, but if that's the case, I can understand that
[06:57:01] <sybariten> dale: so... countries.items() gives us a list, i presume. Shall i think of this list as having just one dimension, if you understand what i mean? like a,b,c,d,e  ... but i'm guessing not since you're able to loop using "for name, details". Therefor name and details must be two parts of the iterable right?
[06:57:31] *** Quits: eramirez (~eramirez@49.149.137.68) (Ping timeout: 258 seconds)
[06:57:47] <SnoopJ> dale, none of this inquiry is meant to dissuade you from Pydantic, incidentally. It pairs very nicely with JSONSchema without the additional effort required with attrs
[06:57:49] <jochum> sybariten: DICT.items() gives you (key, value,)
[06:57:51] <sybariten> still, when printed, it looks like this here....    dict_items([('Afghanistan', {'area': 652864.0, 'id': 0, 'population': (12412311, 25654274, 36296111)}),     it looks a bit messy
[06:57:52] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Quit: WeeChat 3.2)
[06:57:56] <pgib> sybariten it is an iterable of 2-tuples
[06:58:32] <dale> SnoopJ: {"properties": {"foo": {"type": "string"}}} is an optional "foo" property that can be missing or a string.  Cf. foo always present as either null or string: {"properties": {"foo": {"oneOf": [{"type": "null"}, {"type": string"}]}}, "required": ["foo"]}
[06:58:33] <jochum> sybariten: well ((key, value,), (key, value,).....)
[06:58:51] <sybariten> so in this case we have "name" = Afghanistan , but "details" then (from your example) , will be something that starts with curly braces? or not?
[06:59:38] <sybariten> I dunno if you understand how i mean. I mean if python sees these braces as part of the data ... given that they came from an .items() operation
[06:59:45] <jochum> sybariten: details in the force loop contains all infos you want
[06:59:46] *** Quits: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be) (Ping timeout: 240 seconds)
[06:59:48] <dale> SnoopJ: To be clear, I'm saying that I think the difference in what I had to write to accomplish "foo string or missing" is what drove me in that direction over the greater typing involved with "foo can be null or string but must always be present".
[07:00:09] <jochum> sybariten: and you access them with []
[07:00:14] <dale> SnoopJ: When I represent this in Python... yeah, they're probably going to be Pydantic classes with attributes that can be None.
[07:00:54] <dale> SnoopJ: Because it is annoying in Python (or honestly a lot of other languages) to have classes with instances that sometimes have attributes and sometimes don't.
[07:01:24] <pgib> so couldn't the default-squelching happen while you are instantiating the instances?
[07:01:50] <dale> pgib: Instantiating them meaning serializing them to JSON?
[07:02:01] <SnoopJ> dale, both attrs and Pydantic instances always have the fields you declare for them, to my knowledge.
[07:02:18] *** Joins: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[07:02:22] <SnoopJ> But if I'm understanding right, you're concerned more with the serialization of an instance here
[07:03:38] <jochum> sybariten: whats realy helpfull: "import pprint; pprint.pprint(<something>);"
[07:03:56] *** jmcantre1 is now known as jmcantrell
[07:04:32] <dale> sybariten: .items is conceptually converting that dictionary of {country_name: {stuff about country}, country_name: {stuff about country}, ...} to something like [(country_name, {stuff about country}), (country_name, {stuff about country}), ...].  Your question about curly braces is hard to answer. I can tell you that, for example, the value of countries['Afghanistan'] is a dict which is printed
[07:04:35] <dale> with curly braces (try it).  Likewise, the value of details in that "brute force" loop is likewise a dict, which is printed with curly braces, as all dicts are.
[07:05:05] <dale> SnoopJ: Yeah, which is what I'm angling for.  But then when I serialize to JSON, Pydantic helps me out by letting me easily conform to the JSON schema, whereas attrs makes me do a little more work.
[07:05:16] <sybariten> jochum: that's a handy method/function for these kind of things?
[07:05:18] <dale> SnoopJ: Oh, yes, exactly.
[07:05:23] <SnoopJ> dale, as you've said, it *is* conforming to include the null.
[07:05:29] <SnoopJ> Which is why I'm wondering why you want to omit it :)
[07:05:34] <jochum> sybariten: handy as in it prints stuff to console
[07:05:57] <jochum> sybariten: i use it a lot to learn about the actual variable contents.
[07:06:10] <sybariten> dale: yeah, i think i get it. Thanks for the explanation
[07:06:24] <sybariten> jochum: aha, thanks for the tip
[07:07:58] <sybariten> dale: hmm yeah, the brute force method you suggested worked like a charm when i applied it here (in a little bigger context) . Thank you so much for such a clean solution!
[07:08:12] <dale> SnoopJ: Hm, I think I'm explaining myself poorly or just not reading well.  Let me bang up an example.
[07:08:27] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[07:08:34] <SnoopJ> dale, sure thing. I'm curious enough to doodle the filter spelling and then we can swap notes I guess :)
[07:08:41] <dale> sybariten: Sure, but do note that if you're doing this a lot and/or if the "countries" dict you start with is quite large, the "inverse dict" solution will be faster, potentially much faster.
[07:09:45] <dale> sybariten: Oh, and you're quite welcome.
[07:11:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:11:56] <sybariten> dale: yeah i figured that too! I will actually need to use this routine while looping over other things, so to speak.... so, potentially adding another order of slowness to this, but i'm unsure if its at a level where it will noticeable. Its for a school exercise anyhow so no production stuff.  :)
[07:17:12] <rndusr> hey, is there a way to call a function with a timeout via async module?
[07:17:12] <SnoopJ> dale, here's what I've ended up with: https://bpa.st/4DHQ
[07:17:51] *** Joins: xkuru (~xkuru@user/xkuru)
[07:17:55] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[07:18:24] <SnoopJ> dale, oops, forgot the output. https://bpa.st/H5SA
[07:18:50] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[07:19:44] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[07:20:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:21:06] <dale> SnoopJ: Wow, thanks.  It looked harder skimming the documentation but that's really pretty easy.
[07:21:23] <SnoopJ> it was a little easier than I'd expected, too. That might mean I missed something :)
[07:21:42] <SnoopJ> but getting passed the Attribute makes a lot of the worrying about introspection fade away
[07:22:02] *** Joins: lesihctej (jetchisel@user/jetchisel)
[07:22:47] <jochum> rndusr: https://docs.python.org/3/library/asyncio-task.html#timeouts
[07:23:17] <dale> SnoopJ: Yes, I didn't realize it passed you an Attribute instance.
[07:23:27] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 245 seconds)
[07:24:36] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[07:24:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[07:24:47] <rndusr> jochum: does it not block?
[07:24:55] *** Joins: bnewey (~bnewey@pool-72-74-58-94.bstnma.fios.verizon.net)
[07:26:05] <rndusr> i need something to set an async timer in the background and then call a return function
[07:26:15] <rndusr> i'm sorry if i indicated otherwise lol
[07:26:52] <jochum> rndusr: async.sleep(10); return super_duper_function(); ?
[07:27:03] <dale> SnoopJ: This is my demo which now amounts to basically "Pydantic makes excluding defaults just a little bit easier": https://bpa.st/L3FA
[07:27:05] <rndusr> ah,right
[07:27:06] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:4856:116b:944e:4569) (Ping timeout: 240 seconds)
[07:27:07] <rndusr> thanks
[07:27:14] <jochum> np
[07:27:37] <jochum> await asnyc.sleep(10); <-- ofc
[07:28:40] <dale> For both attrs and Pydantic, though, I'm surprised you can't define on the field/attribute itself "don't emit this when serializing if it hasn't been set".
[07:28:42] *** Quits: bnewey (~bnewey@pool-72-74-58-94.bstnma.fios.verizon.net) (Remote host closed the connection)
[07:28:43] <SnoopJ> dale, you can omit `= None` with Pydantic, FWIW
[07:28:57] <dale> SnoopJ: Cool
[07:29:00] <jochum> SnoopJ: "FWIW" ?
[07:29:04] <rndusr> how would I make an asynchronous task from an async function? i cannot find anything
[07:29:08] <SnoopJ> jochum, "for what it's worth"
[07:29:13] <jochum> SnoopJ: ta
[07:29:43] <jochum> rndusr: not sure you want to call a function multiple times?
[07:29:54] <jochum> rndusr: but i think you want to call the function wihtout await
[07:29:56] <dale> jochum: I promise I'm not trolling, what does "ta" mean there? :)
[07:30:02] <jochum> dale: thanks alot :)
[07:30:06] <jochum> dale: :)
[07:30:09] <rndusr> jochum: that executes it asynchronously?
[07:30:18] <dale> jochum: OK, that was at least my second or third guess, behind some kind of British English thing.
[07:30:22] <jochum> rndusr: you have to do execute the task
[07:30:24] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 272 seconds)
[07:30:44] <SnoopJ> dale, it's both, to my knowledge
[07:30:56] *** Joins: SuperLag (~akulbe@user/superlag)
[07:30:56] * jochum is not native english
[07:31:07] <dale> SnoopJ: I thought I'd seen it in some British TV shows, or heard it on the World Service or something.
[07:31:12] * SnoopJ nods
[07:31:20] <dale> Well, probably not World Service as it sounds too informal?  But something like that.
[07:31:42] <jochum> rndusr: what do you try to archive, want to share the bigger context?
[07:31:47] <jochum> s/the/a/
[07:31:59] *** Joins: darksun (~darksun@user/darksun)
[07:33:07] <KombuchaKip> I am using the requests library. I am attempting to download from a remote http server that requires basic authentication. I have provided an HTTPBasicAuth with correct user and pass to the session.get(auth=...). I get back a code 401. If I do exactly the same thing with wget --http-user=me --http-passwd=something url, it works. The URL does not contain a user:password after the http://. Could that be a problem? I would have thought prov
[07:33:07] <KombuchaKip> iding an HTTPBasicAuth would make that redundant.
[07:34:28] <jochum> KombuchaKip: so the url looks like http://<user>:<pass>@server/path/ ?
[07:34:37] *** Quits: nbao (~nbao@187.20.162.127) (Quit: leaving)
[07:34:44] <jochum> not sure about the @
[07:34:46] <whatsupdoc> what's the fastest way to add all single digits of a number in python?
[07:35:12] <jochum> whatsupdoc: 0-9 ?
[07:35:20] <whatsupdoc> for example, 36978 = 3+6+9+7+8 = 33
[07:35:30] <KombuchaKip> jochum: No, I provided no user or path in the URL. Just a HTTPBasicAuth provided to the auth parameter to requests.Session.get().
[07:35:38] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (Quit: ZNC - https://znc.in)
[07:35:48] <jochum> whatsupdoc: make a string of it, convert each number into an int
[07:35:55] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[07:35:57] <dale> whatsupdoc: sum(int(ch) for ch in your_str)
[07:36:07] <jochum> ^ that dale :)
[07:36:09] <dale> whatsupdoc: This will fail if you have something other than base 10 digits
[07:36:34] *** Joins: jazzy2 (~jaziz@2600:380:8600:750f:540f:fa5c:c6b2:c04a)
[07:36:45] <jochum> dale: you miss the int to string conversation :P
[07:37:05] <dale> Oh, ha, yeah, I did
[07:37:17] <whatsupdoc> is there a split function in python?
[07:37:18] <dale> So sum(int(ch) for ch in str(your_number))
[07:37:22] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 240 seconds)
[07:37:26] <SnoopJ> whatsupdoc, yes
[07:37:28] *** Joins: Samian (~Sami@2620:10d:c091:480::1:89cc)
[07:37:53] <jochum> KombuchaKip: must be something with the base64 stuff, i have to google.
[07:37:53] *** Joins: jazzy3 (~jaziz@2600:380:8600:750f:a0eb:13de:7970:4f87)
[07:38:10] *** Quits: jazzy (~jaziz@2600:380:465b:aa32:a5e0:69d:ea69:d1e4) (Ping timeout: 240 seconds)
[07:38:13] <KombuchaKip> jochum: https://docs.python-requests.org/en/master/user/authentication/
[07:38:27] *** Joins: mud (~mud@user/kadoban)
[07:38:27] <KombuchaKip> jochum: Trying to download from here: http://magnatune.com/info/sqlite-normalized
[07:38:33] <jochum> KombuchaKip: please try this one: https://stackoverflow.com/a/18139214/3368468
[07:39:14] <Samian> Suppose you want to add different versions of an algorithm depending on whether the user has the necessary hardware and requisite packages. Take matrix multiplication for example. I want to do something like if some_matrix_package_exists import it, if some other matrix mul exists, import that
[07:39:26] <KombuchaKip> jochum: Yes, right under that answe it says HTTP Basic Auth is already supported. That's what I'm using.
[07:39:32] *** Quits: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[07:39:45] <Samian> in addition to that, I'll likely create booleans the logic is if the package exists, import it, and set a boolean indicating it exists to true
[07:39:46] <jochum> KombuchaKip: use the other answer with import base64, just for a try.
[07:39:49] <whatsupdoc> hmmm doesn't work like javascript damn
[07:39:50] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:519a:c1d3:7556:efac)
[07:39:52] <KirkMcDonald> whatsupdoc: Alternatively: https://bpa.st/GUJA
[07:40:10] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:40:58] *** Quits: jazzy2 (~jaziz@2600:380:8600:750f:540f:fa5c:c6b2:c04a) (Ping timeout: 240 seconds)
[07:40:58] <Samian> has anyone here ever made a program where many parts of it branched out to support many different hardware? A good example is cuda vs opencl vs cpu
[07:40:59] <KirkMcDonald> whatsupdoc: Which is to say, math.
[07:42:24] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[07:42:45] <whatsupdoc> yes that was how i was thinking of doing it, but it seems manual to me and there's like always an built in method of doing things
[07:42:58] <jochum> quersumme in german
[07:43:04] <whatsupdoc> thanks
[07:43:58] *** Quits: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com) (Remote host closed the connection)
[07:43:58] <KombuchaKip> jochum: It looks like if I dump the client side headers its sending, the authentication line isn't being sent. No idea why.
[07:44:16] <jochum> KombuchaKip: did you add the manual headers with base64 =
[07:44:17] <jochum> ?
[07:44:18] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:519a:c1d3:7556:efac) (Ping timeout: 240 seconds)
[07:44:52] <jochum> KombuchaKip: you add other headers?
[07:45:10] <KombuchaKip> jochum: No, but there's no need to. That will probably work, but we know now why what I have isn't working. The basic authentication header with the base64 encoding isn't being sent. Actually yeah, I do add other headers.
[07:45:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[07:45:39] <jochum> I don't know the requests internals but could it be that your other headers overwrite them?
[07:45:40] <KombuchaKip> jochum: So that's probably it. It's not merging them. I'm sending an Accept and a User-Agent header.
[07:46:16] <jochum> KombuchaKip: so you found the case, your doing it manualy now?
[07:46:43] <KombuchaKip> jochum: I'm manually creating only those two headers, but the auth stuff appears to be ignored.
[07:46:54] <jochum> ahhh
[07:47:00] <dale> KirkMcDonald: And it's like twice as fast as the silly string way.
[07:47:22] <jochum> KombuchaKip: please paste me the output of your curl with debug: "-vv"
[07:47:37] <jochum> KombuchaKip: maybe you need another header
[07:47:42] <KombuchaKip> jochum: It's alright, I think I got it. There's a way to merge headers.
[07:47:49] <jochum> fine
[07:48:04] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[07:48:31] <jochum> case closed, he :)
[07:48:53] *** Joins: Maikel (~Maikel@130.61.63.136)
[07:49:09] *** Joins: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com)
[07:49:16] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[07:49:51] <rndusr> i tried making a task with asyncio.create_task, but it returned a RuntimeError reporting no event loop
[07:49:56] <rndusr> how would one make an event loop?
[07:50:26] <jochum> rndusr: you run everything in the loop normaly
[07:50:37] *** Joins: TML (~tml@user/tml)
[07:50:42] <jochum> rndusr: you use a non asyncio framework like flask?
[07:51:53] <rndusr> nope
[07:52:16] <rndusr> i'm just trying to get a simple async function to execute asynchronously
[07:52:24] <rndusr> and running func() does nothing
[07:52:38] <jochum> rndusr: ofc, no executor (loop) no result
[07:52:51] <rndusr> then how do I make a loop
[07:53:00] <jochum> rndusr: google asyncio.run_in_loop or something
[07:53:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 258 seconds)
[07:53:27] *** Quits: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com) (Ping timeout: 245 seconds)
[07:53:55] <jochum> rndusr: this looks helpfull: https://realpython.com/async-io-python/
[07:53:58] <TML> rndusr: https://realpython.com/async-io-python/ might be useful
[07:54:00] <TML> jochum: heh
[07:54:05] <jochum> TML: :)
[07:54:05] <KombuchaKip> jochum: Thanks bud.
[07:55:08] <jochum> rndusr: not sure if you use this in production, you also want to look at uvloop.
[07:55:16] <rndusr> is there a function like asyncio.gather but it doesn't block and it runs asynchronously?
[07:55:43] *** Joins: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com)
[07:55:48] <jochum> rndusr: please read that page
[07:56:07] *** Joins: baltazaar (~baltazar@217-197-188-124.pool.digikabel.hu)
[07:56:28] <jochum> rndusr: maybe asyncio is not the thing your looking for but threads?
[07:56:34] <jochum> rndusr: (very complicated that is)
[07:56:50] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[07:57:17] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:57:43] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[07:58:04] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[07:58:23] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:58:39] <rndusr> jochum: i could've sworn i've seen what i'm talking about somewhere
[07:58:41] <rndusr> hold on
[07:59:10] *** Quits: baltazar (~baltazar@fibhost-66-141-162.fibernet.hu) (Ping timeout: 258 seconds)
[07:59:35] <jochum> rndusr: asyncio means you do EVERY I/O with asyncio like http/file and stuff
[07:59:53] <jochum> rndusr: so when you opt in for asyncio you get the whole package
[07:59:56] *** Quits: Pandadub (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619) (Quit: Leaving)
[07:59:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[08:00:04] <TML> rndusr: "You probably noticed that gather() waits on the entire result set of the Futures or coroutines that you pass it. Alternatively, you can loop over asyncio.as_completed() to get tasks as they are completed, in the order of completion..."
[08:00:11] <TML> rndusr: That's from the article already shared
[08:00:32] *** Quits: V1mV1m (~VimVim@85.191.6.35) (Ping timeout: 268 seconds)
[08:00:38] <jochum> TML: i think he even has no loop
[08:00:49] <whatsupdoc> is it possible to put a formula in the range functioN?
[08:01:01] <whatsupdoc> range(1, 100, 2)
[08:01:12] <whatsupdoc> instead of 2, can you put something like x^2?
[08:01:18] <jochum> whatsupdoc: you write a generator for that
[08:01:20] <leduyquang753> Sure you can make functions that return integers to put in there.
[08:01:30] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[08:01:57] <whatsupdoc> does python support lambda functions?
[08:01:59] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:02:04] <jochum> yes
[08:02:09] <leduyquang753> Yes, but limited to immediately returning functions.
[08:02:12] <TML> whatsupdoc: Yes, but generators are probably a better solution for your stated problem
[08:02:49] <SnoopJ> whatsupdoc, function arguments can be any expression
[08:02:52] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[08:04:59] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[08:05:25] <TML> NB: that isn't to suggest that every arbitrary expression returns a value which is meaningful to every abritrary function)
[08:07:40] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:508a:7ccc:d037:5b29) (Ping timeout: 258 seconds)
[08:07:53] <rndusr> jochum: the thing with async_hello is what I was trying to do, but thanks for the help https://ttm.sh/tjH.py
[08:07:58] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:793c:de6a:88a0:670f)
[08:08:23] <dale> Hm, seems like Pydantic will be getting field- and model-level configuration for include/exclude on attributes: https://github.com/samuelcolvin/pydantic/pull/2231/
[08:08:35] <dale> Doesn't actually help my case, I don't believe, but kind of interesting.
[08:08:48] <jochum> rndusr: it has a "asyncio.run(" in __init__ you see?
[08:09:22] <jochum> rndusr: this asyncio.run(yourcode()) is the creator of the loop
[08:09:33] <rndusr> oh
[08:09:36] <rndusr> i'm sorry
[08:09:45] <jochum> rndusr: np
[08:09:53] <SnoopJ> dale, neat
[08:09:55] * rndusr bangs head against desk repeatedly
[08:09:58] <rndusr> i should go to bed
[08:10:00] <jochum> s/__init__/__main__/
[08:11:00] <dale> rndusr: Me too
[08:11:14] <dale> But I'll probably go play Factorio instead.
[08:11:33] *** Joins: matsaman (~matsaman@user/matsaman)
[08:11:53] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 258 seconds)
[08:12:18] *** Quits: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com) (Remote host closed the connection)
[08:12:35] *** Quits: visl (visl@user/visl) (Ping timeout: 250 seconds)
[08:12:50] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:793c:de6a:88a0:670f) (Ping timeout: 272 seconds)
[08:14:57] *** Quits: audiocat (~audio@2603-8081-1800-00ad-45bc-ff66-5742-0276.res6.spectrum.com) (Ping timeout: 258 seconds)
[08:15:24] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7) (Quit: Leaving)
[08:16:10] *** Quits: Samian (~Sami@2620:10d:c091:480::1:89cc) (Ping timeout: 240 seconds)
[08:16:11] *** Joins: audiocat (~audio@2603-8081-1800-00ad-b3f9-ec1a-93ef-ff4f.res6.spectrum.com)
[08:17:21] <SnoopJ> dale, hrm, that's been merged and is in 1.8.2, but the examples seem to error. I guess it's incomplete.
[08:18:03] *** Joins: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com)
[08:18:32] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[08:19:57] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[08:25:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[08:25:58] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[08:27:47] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[08:31:26] *** Joins: rany (~rany@user/rany)
[08:32:36] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 268 seconds)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:25] *** Joins: fdan (~fdan@192.146.154.3)
[08:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:40:22] <whatsupdoc> how do you write this kind of loop in python?    for (int i = 1; i * i < n; i++) {
[08:40:42] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[08:41:28] <whatsupdoc> using a for loop
[08:42:33] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[08:43:16] <jochum> whatsupdoc: you need the "i", right?
[08:43:24] <jochum> whatsupdoc: google python enumerate
[08:43:53] <jochum> whatsupdoc: ohh sorry you need "i * i"
[08:44:58] <whatsupdoc> yes, i can do it using a while loop or using sqrt(), but just wondering if it was possible to do it using a for loop
[08:45:05] <jochum> whatsupdoc: maybe: while i < n { ....; i = i * i; }
[08:45:05] *** Quits: Sky_Net (~Sky_Net@176.14.210.40) (Read error: Connection reset by peer)
[08:45:06] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:9cfa:a1d:dad6:ea4b)
[08:45:31] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:46:22] <jochum> I dont like whiles
[08:47:07] <tokerboker> you like shirks?
[08:47:09] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[08:47:15] * tokerboker hides
[08:47:15] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[08:48:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:50:13] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:50:36] *** Joins: Maple (uid10029@user/maple)
[08:50:36] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:9cfa:a1d:dad6:ea4b) (Ping timeout: 258 seconds)
[08:50:42] <Repiphany> whatsupdoc: Could use itertools, e.g. `for i in itertools.takewhile(lambda i : i*i < n, itertools.count()): ...`
[08:51:39] <SnoopJ> whatsupdoc, a direct translation: `i=1; while (i := i*i) < n: ...` but I am not sure you want to start this loop at 1.
[08:51:55] <jochum> whatsupdoc: this works:
[08:51:55] <jochum> for i in filter(lambda x: x != 0, [i*i if i * i < 1601 else 0 for i in range(100)]):
[08:51:55] <jochum> ...     print(i);
[08:52:02] <jochum> whatsupdoc: i don't like it
[08:52:11] <Repiphany> Oh, missed starting at 1
[08:52:14] <Repiphany> itertools.count(1)
[08:52:15] <SnoopJ> jochum, that's doing two scans, too.
[08:52:37] <SnoopJ> Probably this loop could just be `for pow in range(...): i = base**pow; ...` ?
[08:52:52] <SnoopJ> or `for i in (base**pow for pow in range(...)): ...`
[08:53:23] <Repiphany> He's doing i++, not i = i*i
[08:53:39] <jochum> Repiphany: you rightg
[08:55:07] <jochum> >>> for i in filter(lambda x: x != 0, [i if i * i < 1601 else 0 for i in range(100)]):
[08:55:07] <jochum> ...     print(i)
[08:55:25] <Repiphany> itertools == cheat mode
[08:56:18] <SnoopJ> Repiphany, oops, you're right. Much simpler spelling, then: `for i in range(1, int(n**0.5)): ...`
[08:56:34] *** Joins: shailangsa (~shailangs@host86-186-142-59.range86-186.btcentralplus.com)
[08:56:55] <SnoopJ> (sieve of Eratosthenes, maybe?)
[08:57:13] <Repiphany> Chance to use math.isqrt if you do it the easy way
[08:57:18] *** Joins: d3sync (~d3sync@77.49.118.37.dsl.dyn.forthnet.gr)
[08:57:53] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:57:54] <Repiphany> But I think you actually need math.ceil?
[08:58:07] *** Joins: trace987 (~trace@95.90.106.112)
[08:58:09] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:58:22] <Repiphany> math.isqrt(n - 1) + 1
[09:01:03] <whatsupdoc> snoopj: lol you got me
[09:01:29] <SnoopJ> Repiphany, ceil(n**0.5)**2 is larger than n unless n is a perfect square
[09:01:55] <SnoopJ> for n=10 you'd stop at 4, for instance, where you should've stopped at 3
[09:02:42] <Repiphany> I mean range(1, math.ceil(n**0.5))
[09:02:57] <Repiphany> for n=26 you want 5 to be in range, but int doesn't include it
[09:04:02] <Repiphany> list(range(1, math.ceil(10**0.5))) == [1,2,3] is what I'd expect
[09:04:44] * jochum likes this discussion a lot
[09:05:15] <SnoopJ> oh, point taken. 0 for 2, I guess it's too late for me to be programming :)
[09:06:34] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[09:06:56] <jochum> I got a headache where someone asked me to create the Fibonacci Sequence at a Interview....
[09:07:32] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[09:07:37] <InPhase> jochum: print(1, 1, 2, 3, 5, 8, 13, '...')
[09:07:58] <jochum> InPhase: you have from the head? :)
[09:08:01] <SnoopJ> "Hmm, you want the *entire* thing? I'm not sure we have enough time."
[09:08:15] <jochum> SnoopJ: its easy now, when googling
[09:08:25] <InPhase> jochum: If you cannot generate it from head quickly, you have not remembered what it is.  :)
[09:09:19] <jochum> Would you guys recommend Fibonacci for a "redo" (like http redo) ?
[09:09:23] <SnoopJ> jochum, just a little joke, since it's an infinite sequence
[09:09:42] *** Quits: Elzington (~Elzington@68.235.43.76) (Ping timeout: 245 seconds)
[09:10:01] <jochum> SnoopJ: ahh i thought you want to make one from scratch :)
[09:10:27] *** Joins: califax (~califax@user/califx)
[09:11:22] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 240 seconds)
[09:11:34] *** Quits: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com) (Remote host closed the connection)
[09:11:42] <InPhase> jochum: On something like http redo, you want to contemplate desired behavior at large N.  Network connections can go down, and then come up.  Do you want the outage to take almost as long to recover from as the outage itself was?
[09:13:23] <jochum> InPhase: nono, just lets say 20 numbers from it or so
[09:14:01] *** Joins: reumeth (~reumeth@user/reumeth)
[09:14:47] <InPhase> jochum: That might work acceptably then.  It still has that property, but it might not bother anyone.
[09:15:41] *** Joins: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com)
[09:16:05] <InPhase> jochum: However if you have a large number of clients all controlled, random delays are better.  Otherwise there's a synchronized burst of reconnects.
[09:18:32] <jochum> InPhase: true
[09:18:53] <jochum> InPhase: or random base numbers for fibonnaci :)
[09:19:12] <jochum> to complicated that would be
[09:22:42] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[09:23:22] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[09:23:27] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[09:24:02] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[09:26:34] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c53a-2de2-e088-4952.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:28:33] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[09:28:42] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[09:29:09] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[09:30:27] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:31] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-45cc-74c3-1f31-2079.res6.spectrum.com)
[09:33:05] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[09:33:30] *** Joins: darksun (~darksun@user/darksun)
[09:36:17] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[09:37:27] *** Joins: sandeepk (~sandeepk@223.130.30.55)
[09:38:08] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[09:39:17] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[09:39:30] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 276 seconds)
[09:40:32] *** Quits: LiftLeft (~LiftLeft@138.199.10.79) (Ping timeout: 245 seconds)
[09:42:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:42:14] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[09:44:29] <shlomif> hi all! i spent most of yesterday fixing pyperl and my sample program of it
[09:47:07] *** Joins: Elzington (~Elzington@68.235.43.12)
[09:48:07] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[09:49:23] *** Joins: jtck (~jtck@222.164.13.173)
[09:50:22] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[09:50:27] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:52:07] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[09:52:42] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 252 seconds)
[09:52:58] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[09:54:00] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[09:54:37] *** Joins: Trashlord (~trash@user/trashlord)
[09:57:12] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[09:57:38] <shlomif> Trashlord: hi, sup?
[09:58:40] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:03:40] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:03:41] *** Joins: LiftLeft (~LiftLeft@191.96.150.49)
[10:04:12] *** Joins: dvx (~dvx@185.63.97.64)
[10:07:33] *** Quits: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com) (Remote host closed the connection)
[10:08:02] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[10:08:38] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[10:08:44] *** Quits: Quietus (~quietus@larch.ratcliffefamily.uk) (Ping timeout: 272 seconds)
[10:08:56] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[10:12:12] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:12:18] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[10:14:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:16:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[10:16:51] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[10:17:27] *** Quits: sandeepk (~sandeepk@223.130.30.55) (Ping timeout: 252 seconds)
[10:18:06] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:18:12] *** Quits: LiftLeft (~LiftLeft@191.96.150.49) (Ping timeout: 256 seconds)
[10:28:42] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[10:30:08] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:31:55] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:31:59] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[10:32:20] *** Joins: upsala (~zcb@185.213.155.160)
[10:33:20] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[10:34:21] *** Joins: sandeepk (~sandeepk@223.130.30.53)
[10:35:23] *** Joins: ihristov (~ihristov@78.130.205.229)
[10:37:16] *** Joins: mrwick (~mrwick@user/mrwick)
[10:38:59] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (Quit: ZNC - https://znc.in)
[10:41:58] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[10:44:08] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[10:45:35] *** Joins: pneff (~pneff@2a02:168:fedc:0:dc4a:c921:1de:ad3)
[10:45:37] *** Joins: matsaman_ (~matsaman@user/matsaman)
[10:45:54] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:15] *** Quits: matsaman (~matsaman@user/matsaman) (Killed (NickServ (GHOST command used by matsaman_)))
[10:46:21] *** matsaman_ is now known as matsaman
[10:46:24] *** Joins: seednode (~seednode@user/seednode)
[10:48:44] *** Quits: bigRoo (~user@131.236.55.20) (Remote host closed the connection)
[10:50:15] *** Joins: kosh (~kosh@user/kosh)
[10:52:15] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[10:52:18] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[10:53:14] *** Joins: manti7 (~manti7@176.10.104.94)
[10:53:32] *** Joins: kosh (~kosh@user/kosh)
[10:54:25] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:54:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:55:00] *** Quits: fezhead (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:55:53] *** Lord_of_Life_ is now known as Lord_of_Life
[10:56:20] *** Quits: audiocat (~audio@2603-8081-1800-00ad-b3f9-ec1a-93ef-ff4f.res6.spectrum.com) (Ping timeout: 258 seconds)
[10:58:17] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-45cc-74c3-1f31-2079.res6.spectrum.com) (Quit: jarthur)
[11:00:24] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:03:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:06:15] *** Joins: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[11:07:58] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:08:27] *** Joins: emika1 (~emika@83.136.182.40)
[11:09:06] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Ping timeout: 240 seconds)
[11:09:12] *** Quits: emika (~emika@185.207.249.114) (Ping timeout: 276 seconds)
[11:09:12] *** emika1 is now known as emika
[11:09:41] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[11:10:14] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:13:49] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[11:14:21] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 258 seconds)
[11:16:34] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[11:20:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 258 seconds)
[11:20:54] *** Quits: poorboy (~poorboy@104.131.46.87) (Write error: Connection reset by peer)
[11:21:06] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:21:24] *** Joins: sreve (~quassel@p4ff44f8b.dip0.t-ipconnect.de)
[11:23:27] *** Joins: poorboy (~poorboy@104.131.46.87)
[11:25:59] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-9410-1ec0-4d93-e07a.res6.spectrum.com)
[11:27:53] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:28:25] *** Joins: fezhead (~mrpenguin@user/mrpenguin)
[11:28:51] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[11:30:19] *** Quits: Maple (uid10029@user/maple) (Quit: Connection closed for inactivity)
[11:32:48] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[11:33:21] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:35:00] *** Joins: darksun (~darksun@user/darksun)
[11:35:26] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 258 seconds)
[11:37:33] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:38:14] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:41:03] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 276 seconds)
[11:41:32] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[11:42:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7)
[11:42:47] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[11:46:42] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[11:47:06] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 240 seconds)
[11:49:58] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[11:50:51] *** Joins: darksun (~darksun@user/darksun)
[11:51:37] *** Joins: rendar (~rendar@user/rendar)
[11:54:45] *** Joins: chele (~chele@user/chele)
[11:55:55] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:56:18] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 240 seconds)
[11:56:31] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 246 seconds)
[11:56:45] *** Joins: kenoba (~kenoba@user/kenoba)
[11:56:52] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[11:58:21] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[11:58:55] *** Joins: frost (~frost@59.71.241.179)
[12:00:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:01:59] <dre> is it possible to keep a string as a template and then later apply the f to it? is it via .format?
[12:02:16] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:02:26] <dre> ie: sx = "my name is {first_name}" ;  sx.format(first_name = 'dre') ?
[12:02:34] <dre> seems sensible I'll try it
[12:02:51] <dre> what if the format was {account.number} ?
[12:02:53] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[12:02:54] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:03:16] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[12:03:16] *** Joins: sebastianos (~sebastian@user/sebastianos)
[12:04:26] *** Joins: candyman1 (~candyman@user/candyman)
[12:05:39] <deniska> dre: you can do s.format(account.number)
[12:05:53] <dre> neat
[12:06:02] <dre> no need for doing kwargs?
[12:06:03] <deniska> dot access does work in format string, but it's weirder than with f-strings
[12:06:55] <deniska> dre: ah, you can use .format with positional or keyword arguments depending on whether you specify placeholder name or not
[12:07:05] <deniska> dre: 'Account number is {}'.format(account.number)
[12:07:14] <dre> I mean like
[12:07:45] <dre> "my name is {name} and my acc: {account.number}".format('dre',account.number)
[12:08:09] *** Joins: mickey (~user@user/mickey)
[12:08:21] <deniska> Try it? But I feel like it may not work
[12:09:26] <deniska> "my name is {name} and my acc: {account.number}".format(name='dre', account=account)
[12:09:36] <dre> ah neat ok
[12:09:40] <dre> that should probably work
[12:12:48] *** Joins: visl (visl@user/visl)
[12:16:22] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[12:17:08] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[12:17:28] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[12:19:04] *** Joins: Gerula_ (~Gerula@user/gerula)
[12:19:04] *** Gerula is now known as Guest7869
[12:19:04] *** Quits: Guest7869 (~Gerula@user/gerula) (Killed (silver.libera.chat (Nickname regained by services)))
[12:19:04] *** Gerula_ is now known as Gerula
[12:21:06] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:23:12] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[12:24:02] <hendry> I don't quite understand projects with requirements.txt. If I `pip install` something, shouldn't requirements.txt be updated? In fact `pip install` seems to install globally, so I am even more confused.
[12:25:42] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[12:28:37] <Luyin> why not just use f-strings though
[12:29:42] <Repiphany> hendry: People use virtual environments to separate which packages are installed for each project rather than using globally installed ones
[12:33:52] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:34:10] <jochum> hendry: "python3 -m venv venv; ./venv/bin/pip3 install -r requirements.txt" <-- thats what a lot readme's state.
[12:35:26] *** Joins: palasso (~palasso@user/palasso)
[12:35:32] <hendry> If I pip installing something, can't I expect it to append the package name to requirements.txt?
[12:36:18] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:46] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[12:36:59] <Repiphany> requirements.txt isn't something inherent to pip
[12:37:12] <Repiphany> pip freeze > requirements.txt
[12:37:16] <jochum> hendry: it not like npm for example
[12:37:19] *** Joins: yogoyo (~paddy@user/yogoyo)
[12:37:39] *** Joins: shad (~shad@user/shad)
[12:38:19] <shlomif> npm... feel the fear!
[12:38:20] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:08] <shlomif> worst package manager in history
[12:40:40] <jochum> I like buildout even less
[12:41:33] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[12:42:37] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 245 seconds)
[12:42:39] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[12:42:42] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 256 seconds)
[12:46:48] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[12:47:43] *** Joins: VimVim (~VimVim@87.104.100.82)
[12:50:04] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 246 seconds)
[12:51:06] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[12:52:03] *** Joins: ubert (~Thunderbi@178.115.39.252.wireless.dyn.drei.com)
[13:01:53] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[13:02:18] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[13:03:09] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:05:10] *** Quits: visl (visl@user/visl) (Ping timeout: 268 seconds)
[13:05:29] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:06:31] *** Quits: candyman1 (~candyman@user/candyman) (Remote host closed the connection)
[13:07:47] *** Quits: fezhead (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[13:09:22] *** dre is now known as dre|dinner
[13:09:28] <amosbird> Hello, how can I zip two sequence with different length? The shorter one should be filled from beginning again
[13:09:55] *** Joins: candyman1 (~candyman@user/candyman)
[13:10:30] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[13:11:30] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:11:53] <Repiphany> zip(itertools.cycle(s1), s2)
[13:12:25] <amosbird> Repiphany: does that imply len(s1) <= len(s2) ?
[13:12:40] <Repiphany> Yes
[13:12:42] <amosbird> ok
[13:13:57] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[13:14:06] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:16:06] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:7cc0:b6ca:d4c5:a4a7) (Quit: Leaving)
[13:17:15] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Ping timeout: 276 seconds)
[13:18:50] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:19:32] <Luyin> itertools is such a pot of magic tricks!
[13:19:40] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[13:19:44] *** Joins: bjelleklang (~c@wikipedia/Bjelleklang)
[13:20:10] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[13:20:35] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[13:20:50] *** Quits: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks) (Remote host closed the connection)
[13:21:23] *** Joins: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks)
[13:24:41] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[13:26:47] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[13:27:06] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[13:27:31] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[13:28:47] <kieto> Hi everyone! How can I manage to start an SFTP connection with custom SSH keys?
[13:28:49] *** Joins: ramblebamble (~ramblebam@37.120.209.204)
[13:30:30] *** Joins: reumeth (~reumeth@user/reumeth)
[13:32:34] *** Quits: dld (~davidlowr@73.61.8.196) (Ping timeout: 256 seconds)
[13:33:24] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:34:31] *** Joins: dld (~davidlowr@73.61.8.224)
[13:35:03] *** Joins: visl (visl@user/visl)
[13:36:09] *** Joins: ice9 (~ice9@user/ice9)
[13:36:14] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[13:37:07] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[13:37:35] *** Quits: candyman1 (~candyman@user/candyman) (Remote host closed the connection)
[13:37:44] *** Quits: ihristov (~ihristov@78.130.205.229) (Ping timeout: 272 seconds)
[13:37:49] <kieto> is that possible with stdlib's ftplib?
[13:40:24] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[13:40:56] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:40:56] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[13:41:15] *** Joins: califax (~califax@user/califx)
[13:42:37] *** Quits: moto (~moto@user/moto) (Ping timeout: 245 seconds)
[13:42:58] *** Joins: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289)
[13:43:28] *** Quits: sharperguy_ (~sharpergu@2001:16b8:5c48:2300:826d:c98c:fb22:4df) (Ping timeout: 258 seconds)
[13:43:44] *** Joins: moto (~moto@user/moto)
[13:44:31] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[13:44:38] <jinsun> ftplib doesn't even support sftp, so I think no
[13:45:22] <TJ-> Has anyone done work on Linux with python3-systemd's systemd.journal.Reader, and specifically after adding a match string and using select.poll() when poll() returns and journal.Reader.get_next() is called it returns an empty '{}' rather than the message?
[13:45:32] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[13:46:43] <gordonjcp> kieto: possibly paramiko?
[13:52:49] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[13:54:50] *** Joins: VaniaPy (~VaniaPy@46.12.81.49.dsl.dyn.forthnet.gr)
[13:55:43] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[13:55:45] <VaniaPy> Hello,i'm trying to call a ml model whuch returns a dataframe. But i'm getting an error TypeError: 'DataFrame' object is not callable
[13:56:01] *** Joins: akaWolf (~akaWolf@akawolf.org)
[13:56:03] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 265 seconds)
[13:56:06] <VaniaPy> what does this refer to?
[13:56:15] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[13:57:00] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[13:57:23] <amosbird> Hi, how can I safely close a Popen pipe and make sure data is flushed?
[13:57:23] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[13:57:24] <amosbird> cmd = ['ssh', dst_host, 'cat - > x']
[13:57:26] <amosbird> p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
[13:57:28] <amosbird> p.stdin.write(x.encode())
[13:57:58] <kieto> jinsun: it does with FTP_TLS, doesn't it? or am I confusing concepts?
[13:58:32] <kieto> gordonjcp: I'll take a look at it, thanks!
[13:58:38] <ramblebamble> VaniaPy, Code? it usually means that you cannot use an object like a function see https://docs.python.org/3/reference/datamodel.html?highlight=__call__#object.__call__
[13:59:05] <ramblebamble> this question is also best post in a forum related to your flavour of AI-Framework
[13:59:39] *** Quits: bjelleklang (~c@wikipedia/Bjelleklang) (Quit: Leaving)
[13:59:55] <ramblebamble> *posted
[13:59:57] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 258 seconds)
[14:00:02] <jinsun> kieto: ftp_tls is ftps (https://en.wikipedia.org/wiki/FTPS) and sftp is using SSH
[14:00:33] <kieto> jinsun: thanks, that solves my doubts :)
[14:00:43] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[14:03:07] *** Joins: kosh (~kosh@user/kosh)
[14:06:39] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Ping timeout: 276 seconds)
[14:11:32] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[14:11:53] *** Joins: entuland (~entuland@user/entuland)
[14:12:54] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[14:13:22] *** Quits: ubert (~Thunderbi@178.115.39.252.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[14:16:21] *** Joins: ice9 (~ice9@user/ice9)
[14:20:20] <kieto> gordonjcp: it worked flawlessly with the demo_sftp.py file provided by paramiko, thanks for the tip! :D
[14:21:45] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[14:22:36] *** Joins: gggpkm (~gggpkm@123.116.95.154)
[14:23:57] *** Quits: visl (visl@user/visl) (Ping timeout: 250 seconds)
[14:24:29] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 258 seconds)
[14:26:01] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[14:27:00] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[14:27:58] *** Joins: shad (~shad@user/shad)
[14:30:28] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[14:30:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:30:55] *** Quits: i0e (~is0ke3@user/is0ke3) (Client Quit)
[14:30:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[14:31:06] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[14:32:37] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[14:32:59] *** Joins: califax (~califax@user/califx)
[14:34:51] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[14:35:16] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:35:36] *** Quits: sandeepk (~sandeepk@223.130.30.53) (Ping timeout: 258 seconds)
[14:37:39] <gordonjcp> kieto: awesome :-)
[14:39:41] *** Quits: coc0nut (~coc0nut@128.90.138.207) (Changing host)
[14:39:41] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[14:40:08] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Ping timeout: 268 seconds)
[14:42:28] *** Joins: astrocat (~astrocat@112.134.113.194)
[14:42:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:48:39] <bjs> VaniaPy: it sounds like what you called *was* the dataframe not a function that you can call
[14:49:40] <VaniaPy> bjs i called a function that returns a Dataframe
[14:49:46] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[14:49:54] <bjs> VaniaPy: well Python thinks the thing you called wasn't a function, but was itself a dataframe
[14:50:10] <VaniaPy> yeah, it seems so
[14:50:56] *** Quits: pneff (~pneff@2a02:168:fedc:0:dc4a:c921:1de:ad3) (Ping timeout: 258 seconds)
[14:52:47] *** Quits: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com) (Read error: Connection reset by peer)
[14:53:30] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[14:53:37] *** Quits: Elzington (~Elzington@68.235.43.12) (Ping timeout: 258 seconds)
[14:54:34] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[14:54:51] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[14:57:37] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[14:59:46] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[15:00:49] *** Joins: sandeepk (~sandeepk@223.130.30.53)
[15:01:06] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[15:04:19] *** Joins: Elzington (~Elzington@68.235.43.14)
[15:04:21] *** Joins: pneff (~pneff@2a02:168:fedc:0:dc4a:c921:1de:ad3)
[15:04:21] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 258 seconds)
[15:07:06] *** Quits: astrocat (~astrocat@112.134.113.194) (Read error: Connection reset by peer)
[15:08:04] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[15:08:33] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[15:08:40] *** Joins: gry (~quassel@botters/gry)
[15:13:41] *** Joins: astrocat (~astrocat@112.134.113.194)
[15:13:52] *** Quits: astrocat (~astrocat@112.134.113.194) (Client Quit)
[15:14:07] *** Joins: visl (visl@user/visl)
[15:15:23] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[15:15:30] *** Joins: astrocat (~astrocat@112.134.113.194)
[15:15:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:16:14] *** Joins: thiras (~thiras@user/thiras)
[15:16:22] *** Quits: astrocat (~astrocat@112.134.113.194) (Client Quit)
[15:16:36] *** Joins: astrocat (~astrocat@112.134.113.194)
[15:17:10] *** Quits: astrocat (~astrocat@112.134.113.194) (Client Quit)
[15:17:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:17:33] *** Joins: astrocat (~astrocat@112.134.113.194)
[15:17:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[15:20:18] *** Quits: visl (visl@user/visl) (Ping timeout: 240 seconds)
[15:21:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[15:22:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:23:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:29] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 250 seconds)
[15:26:20] *** Joins: marduk (~marduk@172.58.187.14)
[15:28:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:29:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:29:02] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:29:03] *** Quits: gggpkm (~gggpkm@123.116.95.154) (Remote host closed the connection)
[15:29:35] *** Joins: NakedKing (~NakedKing@user/nakedking)
[15:32:03] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (Quit: ZNC - http://znc.in)
[15:33:00] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[15:33:06] *** Quits: emika (~emika@83.136.182.40) (Ping timeout: 258 seconds)
[15:33:22] *** Quits: pneff (~pneff@2a02:168:fedc:0:dc4a:c921:1de:ad3) (Ping timeout: 240 seconds)
[15:33:43] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[15:33:54] *** Joins: rsx (~dummy@ppp-188-174-144-238.dynamic.mnet-online.de)
[15:34:24] *** Joins: emika (~emika@83.136.182.131)
[15:37:19] *** Joins: gusto (~Augustus@2620:149:e0:6003::6e)
[15:37:53] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::791f)
[15:38:05] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 258 seconds)
[15:38:28] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[15:39:25] <nedbat> pydantic has validators, but fastapi doesn't seem to run them? I think i'm missing something.
[15:39:27] *** Quits: jdmark (~jdmark@67.8.137.130) (Read error: Connection reset by peer)
[15:40:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 276 seconds)
[15:40:34] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[15:40:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:41:17] <nedbat> or, it does run them, but i still get the pre-validation value?
[15:41:30] *** Joins: tupui (~tupui@mobiledyn-185-69-244-225.mrsn.at)
[15:42:31] *** Joins: Ben_1 (~ben@2001:1438:4010:704:f409:636:4e7e:3dcd)
[15:42:34] <Ben_1> Hi, I have a few python files and I need to know the path of each file, not of the executed file. Is there a way to get this path?
[15:42:56] <nedbat> Ben_1: in the file, __file__ is the path to the file
[15:43:14] <nedbat> Ben_1: what will you do with that path?
[15:44:33] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:45:17] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a7a6:dd79:c758:dcbd:1f0a)
[15:45:21] *** Joins: pneff (~pneff@2a02:168:fedc:0:dc4a:c921:1de:ad3)
[15:46:07] *** Joins: ice99 (~ice9@user/ice9)
[15:47:34] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a7a6:dd79:c758:dcbd:1f0a) (Remote host closed the connection)
[15:48:17] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:a7a6:dd2f:d5ab:1b75:ee21)
[15:48:27] *** Quits: p-i- (~Ohmu@2403:6200:8870:a7a6:e8c3:dbcc:7fa6:8242) (Ping timeout: 250 seconds)
[15:48:49] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[15:50:28] *** Joins: jdmark (~jdmark@67.8.137.130)
[15:50:48] *** Quits: lesihctej (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:52:50] *** Joins: visl (visl@user/visl)
[15:57:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:59:56] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[16:00:07] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 245 seconds)
[16:03:27] *** Joins: nomic (~nomic@host81-157-178-98.range81-157.btcentralplus.com)
[16:05:36] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[16:05:43] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:08:25] *** Joins: matkor (~matkor@91.198.89.207)
[16:09:18] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:09:39] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[16:09:54] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 240 seconds)
[16:10:49] <nedbat> i hope Ben_1 got what they needed :)
[16:11:27] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 276 seconds)
[16:12:34] <bjs> nedbat: they are still here?
[16:12:55] *** Joins: ice9 (~ice9@user/ice9)
[16:13:18] <nedbat> bjs: indeed
[16:13:55] <bjs> nedbat: ooi you did some experimentation with mutation testing for coverage,  did you do any experimenting with other coverage metrics?
[16:14:36] <gstaniak> Hi all, I'm getting a weird ssl handshake error from requests/urllib3 when I use the 'verify=' parameter to specify a custom trust store. Without it, it's a 'SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1129)'. With the parameter, it's 'SSLError: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1129)', but either way it doesn't work.
[16:14:36] <gstaniak> I'm positive the trust store file contains the correct CA cert. Any ideas?
[16:15:06] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[16:15:46] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 256 seconds)
[16:16:12] *** Joins: shad (~shad@user/shad)
[16:16:47] *** Joins: dcaro (~dcaro@user/dcaro)
[16:18:43] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[16:19:13] *** Joins: y1n (~y1n@84-115-64-39.wifi.dynamic.surfer.at)
[16:20:27] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:20:33] *** Joins: GamnorDimsword (~chris@51.148.134.136)
[16:20:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:21:22] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[16:21:40] *** Parts: tupui (~tupui@mobiledyn-185-69-244-225.mrsn.at) ()
[16:23:59] *** Joins: nyah (~nyah@90.221.186.180)
[16:24:33] *** Joins: emika9 (~emika@83.136.182.37)
[16:25:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[16:26:32] *** Joins: ihristov (~ihristov@78.130.205.229)
[16:27:26] *** Joins: dcaro_ (~dcaro@user/dcaro)
[16:27:32] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 258 seconds)
[16:28:09] *** Quits: emika (~emika@83.136.182.131) (Ping timeout: 252 seconds)
[16:28:09] *** emika9 is now known as emika
[16:29:04] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 258 seconds)
[16:30:01] *** dcaro_ is now known as dcaro
[16:30:26] <nedbat> bjs: other metrics like what?
[16:31:21] *** Quits: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289) (Ping timeout: 250 seconds)
[16:32:59] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 268 seconds)
[16:33:35] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:33:54] *** Joins: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289)
[16:34:20] *** Joins: slavaqq (~Slava@sdmail.sdserver.cz)
[16:35:03] <bjs> nedbat: like condition coverage, `if x or y` getting paths where both x and y were true
[16:35:20] <nedbat> bjs: i haven't tried those
[16:35:27] <bjs> i've seen lots of claims about these kinds of coverage but not very much evidence they find more bugs
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:30] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:37:45] *** Joins: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3)
[16:37:52] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:38:39] *** Quits: ramblebamble (~ramblebam@37.120.209.204) (Ping timeout: 258 seconds)
[16:39:09] <DnzAtWrk> how do I get the first number in a string before .
[16:39:15] <DnzAtWrk> so in '3.0.0' I get 3
[16:39:18] <DnzAtWrk> need the major version
[16:39:54] *** Joins: crippa (~crippa@160.62.4.101)
[16:39:58] <DnzAtWrk> regex seems like overkill
[16:40:08] *** Quits: Elon_Satoshi (~elonsatos@user/elon-satoshi/x-4242282) (Ping timeout: 256 seconds)
[16:40:16] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Quit: Leaving)
[16:40:31] *** Joins: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net)
[16:40:31] *** Quits: gusto (~Augustus@2620:149:e0:6003::6e) (Read error: Connection reset by peer)
[16:42:06] *** Quits: humbertwooody (~humbertow@2806:107e:f:59bc:80d5:c409:a030:2b3) (Ping timeout: 258 seconds)
[16:42:58] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:f812:23ee:b09a:688e)
[16:43:57] <supakeen> `major, *rest = "3.0.0".split(".")
[16:44:38] <DnzAtWrk> ah
[16:44:48] <DnzAtWrk> what does * mean
[16:45:47] <supakeen> 'the rest of the iterable goes into `rest`'
[16:46:06] <supakeen> If you write `major, minor, bugfix = "3.0.0".split(".")` you need exactly 2 dots.
[16:46:11] <supakeen> But there's many ways of writing this.
[16:46:26] <Luyin> TIMTOWTDI?
[16:46:37] *** Joins: gusto (~Augustus@109.255.100.54)
[16:46:52] <Luyin> couldn't you also do major, _? or would it have to be *_?
[16:47:15] <supakeen> I think it needs to be the latter, yes.
[16:47:22] <grawity> _ is not special, it's still exactly one item, so unless you give a limit to split() you still need *_
[16:47:25] <supakeen> One could also use .partition, or .split(..., 1).
[16:48:15] <Luyin> just tested, yes, it would need to be *?
[16:48:18] <Luyin> *_, sorry
[16:48:45] <Luyin> grawity: it's special insofar as the values aren't stored but thrown away, right?
[16:48:48] <grawity> no
[16:49:00] <Luyin> oh right, I see
[16:49:11] <Luyin> pycharm doesn't show it in the watched variables but it's still stored
[16:49:13] <Luyin> fancy that
[16:49:17] <Luyin> TIL
[16:49:22] <supakeen> It's a convention to use _ for things you don't care about.
[16:49:29] <Luyin> rightj
[16:49:29] <supakeen> So pycharm probably acts upon that.
[16:49:42] <grawity> I think in golang it does mean "throw away"?
[16:49:49] <grawity> in python interactive repl it's somewhat special in that it stores the previous result
[16:49:57] <Luyin> oof
[16:50:03] <Luyin> so it's maybe better to write *rest XD
[16:50:07] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:50:26] <supakeen> grawity: It has some meaning in both Rust and Go I believe.
[16:51:54] <tumbleweed> or you could say: major = '3.0.0'.split('.')[0]
[16:52:09] <jinsun> Luyin: depends on your ide, vscode will complain about unused variables if you do *rest and don't use rest later in the function, but it doesn't complain f you do *_
[16:52:51] <Luyin> jinsun: not in the Python Console; in a script, yes :)
[16:53:48] *** Quits: erica (~erica@user/erica) (Quit: The Lounge - https://thelounge.chat)
[16:55:19] *** Joins: erica (~erica@user/erica)
[16:57:52] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[16:58:54] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[16:59:08] *** Quits: sandeepk (~sandeepk@223.130.30.53) (Ping timeout: 272 seconds)
[16:59:49] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[16:59:51] <Luyin> btw, `major = "3.9.0".split(".")[0]`
[17:00:56] *** Quits: erica (~erica@user/erica) (Quit: The Lounge - https://thelounge.chat)
[17:01:29] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[17:02:58] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:310b:48de:4ce0:38bb)
[17:04:45] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:05:29] *** Quits: y1n (~y1n@84-115-64-39.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[17:07:23] *** Joins: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com)
[17:07:28] *** Joins: sandeepk (~sandeepk@223.130.30.53)
[17:08:10] *** Quits: dre|dinner (~dre@2001:8003:c932:c301:60b3:aefe:6a08:9d70) (Ping timeout: 258 seconds)
[17:08:54] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[17:10:31] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[17:11:20] *** Joins: varaindemian (~varaindem@82.76.227.135)
[17:11:32] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[17:13:43] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:13:54] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[17:14:20] <gstaniak> Hi all, I'm getting a weird ssl handshake error from requests/urllib3 when I use the 'verify=' parameter to specify a custom trust store. Without it, it's a 'SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1129)'. With the parameter, it's 'SSLError: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1129)', but either way it doesn't work.
[17:14:29] <gstaniak> I'm positive the trust store file contains the correct CA cert. Any ideas?
[17:15:26] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Client Quit)
[17:15:46] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[17:17:06] *** Quits: qk1z (~qk1z@110-175-249-154.tpgi.com.au) (Ping timeout: 252 seconds)
[17:17:10] <Julian> I don't know off hand what the latter means (I mean clearly not very much) but usually the thing I *think* is try that with openssl s_client and compare, you may get more info
[17:17:49] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[17:18:02] *** Quits: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[17:18:05] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[17:18:21] <diverdude> hi, i have a byte sequence. How Can i print that as a hex string?
[17:18:32] <supakeen> diverdude: `yourbytes.hex()`.
[17:19:10] * gstaniak Julian: I tried that, with openssl it just works, I get a normal connection. How can I dubug deeper, to see _why_ urllib3 fails the handshake?
[17:19:24] *** Joins: y1n (~y1n@84-115-64-106.wifi.dynamic.surfer.at)
[17:19:40] *** Quits: visl (visl@user/visl) (Ping timeout: 258 seconds)
[17:21:18] <bjs> gstaniak: https://urllib3.readthedocs.io/en/stable/user-guide.html?highlight=logging#logging  you might be able to set logging to DEBUG and see what is going on (?)
[17:21:26] <Julian> gstaniak: do you have this minimized to just 3-4 lines of code using just urllib3 (and not requests)
[17:21:32] <Julian> probably thta's the right next step then
[17:21:35] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:21:36] <Julian> i.e. get to something like https://urllib3.readthedocs.io/en/latest/advanced-usage.html?highlight=tls#custom-tls-certificates
[17:22:01] *** Quits: varaindemian (~varaindem@82.76.227.135) (Ping timeout: 246 seconds)
[17:22:37] <petaflot> hello! how'zit going? I'm looking for some suggestion: my previous code had sth like `if 'foo' in list: ...` and now list has been replaced with an async generator ; `if 'foo' in agen: ...` raises TypeError: argument of type 'async_generator' is not iterable
[17:24:04] <Julian> petaflot: possibly you want `async for` (and to check each element against 'foo')
[17:24:16] *** Quits: jazzy3 (~jaziz@2600:380:8600:750f:a0eb:13de:7970:4f87) (Ping timeout: 258 seconds)
[17:24:55] <Yhg1s> petaflot: the point of an async generator is that you need to await on each iteration (because the async generator can suspend at any point, really), so you can't use 'in' on it.
[17:25:56] <gstaniak> Julian: thanks, I will try that. Yes, I produced a very basic test using only urllib3, because that's what requests uses. It works (or rather doesn't) every time: without the custom trust store -- can't verify, with it -- handshake error. I will use the urllib3 debug option to see more info about this. Thanks again.
[17:26:40] <Julian> gstaniak: (FWIW I've done this in the past a few times and generally I end up with plan Z -- a debugger)
[17:26:59] <Julian> "this" being "figure out what the heck pyopenssl means by something"
[17:27:23] <gstaniak> Julian: LOL :) I hope I can avoid it, fingers crossed
[17:28:35] <Julian> a python debugger by the way, not gdb, so not terrible, but yeah
[17:32:42] *** Joins: odoood (~odoood@2601:c8:c003:a550::8)
[17:34:01] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:34:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:35:19] *** Joins: varaindemian (~varaindem@86.124.78.162)
[17:35:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:35:43] *** Quits: astrocat (~astrocat@112.134.113.194) (Quit: Leaving)
[17:36:10] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[17:36:20] <petaflot> I was hoping that `async if 'foo' in agen` would do it automatigcally :-s
[17:36:21] <petaflot> thanks
[17:36:56] <m_tadeu> is there a python function that mimics the bash "which <some_bin>"?
[17:37:18] *** Quits: odoood (~odoood@2601:c8:c003:a550::8) (Ping timeout: 258 seconds)
[17:38:09] <Julian> m_tadeu: (bash's which is bad :P) -- are you writing a shell? if not generally you don't need that function, but if you do IIRC there's an implementation in twisted. possibly that's upstream now let's see
[17:38:31] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Remote host closed the connection)
[17:38:32] *** Joins: shad (~shad@user/shad)
[17:38:37] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:39:00] <m_tadeu> Julian: I'm converting a bash script to python...I kinda need that to find the path of the program I'll be running
[17:39:10] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[17:39:19] <Julian> https://twistedmatrix.com/documents/current/api/twisted.python.procutils.html#which
[17:39:23] <rndusr> Julian: sys.argv[0]?
[17:39:33] <rndusr> wait, no
[17:39:34] <Julian> m_tadeu: Why? The subprocess module will find it for you automatically
[17:39:38] <rndusr> m_tadeu: ^^
[17:39:41] <Julian> (Really your operating system will)
[17:40:08] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[17:40:20] *** Joins: moto (~moto@user/moto)
[17:40:36] <m_tadeu> hmm ok will try that
[17:40:41] <m_tadeu> thx
[17:40:46] *** Quits: pneff (~pneff@2a02:168:fedc:0:dc4a:c921:1de:ad3) (Ping timeout: 258 seconds)
[17:40:57] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:40:57] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Ping timeout: 245 seconds)
[17:41:23] <Julian> np
[17:41:54] *** Joins: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d)
[17:42:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:43:40] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[17:44:26] <jinsun> or shutil.which? https://docs.python.org/3/library/shutil.html#shutil.which
[17:44:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[17:45:14] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[17:46:26] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[17:47:00] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Quit: Sleeping...)
[17:47:22] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[17:47:27] *** Joins: marduk1 (~marduk@172.58.187.247)
[17:47:51] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[17:48:15] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[17:48:48] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[17:48:57] <m_tadeu> jinsun: thanks
[17:50:42] *** Quits: marduk (~marduk@172.58.187.14) (Ping timeout: 240 seconds)
[17:51:33] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 276 seconds)
[17:51:57] *** Quits: marduk1 (~marduk@172.58.187.247) (Ping timeout: 250 seconds)
[17:52:53] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[17:53:24] *** Quits: GamnorDimsword (~chris@51.148.134.136) (Ping timeout: 252 seconds)
[17:53:31] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[17:54:15] *** Joins: mike18_ (~geri@217-149-163-174.nat.highway.telekom.at)
[17:54:24] *** Joins: GamnorDimsword (~chris@51.148.134.136)
[17:54:29] <mike18_> hi - is that not allowed? from foo_generator.constants import *
[17:55:19] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:55:24] <bjs> mike18_: that seems like a loaded question, are you getting an error?
[17:55:34] <mike18_> linter is complaining
[17:55:42] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[17:55:48] <mike18_> F403 'from foo_generator.constants import *' used; unable to detect undefined names
[17:55:50] <bjs> mike18_: well linters complain about a lot of things that are allowed (that's their job)
[17:55:57] *** Joins: kosh (~kosh@user/kosh)
[17:56:10] <mike18_> well - is that not a common wait to import consts?
[17:56:13] <bjs> mike18_: yes linters won't like * imports
[17:56:47] <mike18_> so i should do import foo_generator.constants ... and than use the const with constants.MYCONST ?
[17:56:51] <varaindemian> anyone?
[17:56:55] <varaindemian> can I use dotenv to store a dictionery with names and password hashes?
[17:56:57] <varaindemian> `users = {"john": generate_password_hash("hello"),"susan": generate_password_hash("bye")}`
[17:57:03] *** Joins: erica (~erica@user/erica)
[17:57:09] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:57:18] <bjs> mike18_: well `from foo_generator import constants` yes that's one way, or `from foo_generator.constants import MYCONST` those will make the linter happy
[17:57:21] <bjs> but they're all valid for Python
[17:58:25] <mike18_> bjs: but than i still will need to write constants.MYCONST in the code?
[17:58:32] *** Joins: Elodin (~weechat@user/elodin)
[17:58:34] <bjs> mike18_: for which?
[17:58:47] <mike18_> for that constants used...
[17:59:00] <bjs> mike18_: no I mean I gave you two different `import` lines,  which are you worried about?
[17:59:19] <mike18_> the second option requires to type each constant....
[17:59:28] <bjs> mike18_: at the import yeah
[17:59:30] <mike18_> thats why i thought i can do import ... *
[17:59:39] <bjs> mike18_: you can do that
[17:59:50] <bjs> mike18_: `from foo_generator.constants import *` will import all of the constants.
[17:59:51] <Yhg1s> mike18_: you can do it. It's just a bad idea to do it, because, as the linter warning says, you won't be able to tell where the name came from.
[18:00:02] <mike18_> ok better make the linter happy
[18:00:04] <Yhg1s> mike18_: the linter warns about it for several reasons.
[18:00:11] <bjs> mike18_: it's just the linter warned you. It's the job of a linter to warn you about things that are valid but not always a good idea.
[18:00:17] <Yhg1s> mike18_: better to make the future reader of the code (someone else, or you) happy, which the linter tries to do.
[18:00:26] <varaindemian> any idea guys?
[18:00:29] <bjs> mike18_: *I* personally prefer `from foo_generator import constants`
[18:00:51] <bjs> varaindemian: I mean, dotenv is supposed to read things not store them
[18:00:53] <bjs> so I don't see how
[18:02:10] <bjs> varaindemian: like the dotenv package has 1 job, to read  ".env" files.
[18:02:24] <varaindemian> bjs everytime I invoke generate_password_hash("hello") I ge tdiffernt key. is the key dependent on something?
[18:02:24] <afidegnum> hi, I have been brainstorming for days now. I managed to iterate the DOM trees with lxml. but I need to traverse them via recursion. that's where I have a mental blockade. Everything is explained here: https://dpaste.org/Uz75
[18:02:31] <bjs> varaindemian: what even is generate_password_hash
[18:02:45] <varaindemian> it's from flask
[18:02:47] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 250 seconds)
[18:03:12] <varaindemian> bjs https://flask-httpauth.readthedocs.io/en/latest/
[18:03:27] *** Quits: slavaqq (~Slava@sdmail.sdserver.cz) (Quit: Client closed)
[18:03:37] <varaindemian> bjs basically I want those users and asswords to be stored in a different dotenv file
[18:03:45] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 258 seconds)
[18:04:04] <bjs> varaindemian: https://werkzeug.palletsprojects.com/en/2.0.x/utils/#werkzeug.security.generate_password_hash says "Hash a password with the given method and salt with a string of the given length. [...] The format for the hashed string looks like this: method$salt$hash"
[18:04:18] <bjs> so the salt will be different each time
[18:04:25] <bjs> (and therefore the hash will be too)
[18:05:07] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:310b:48de:4ce0:38bb) (Ping timeout: 245 seconds)
[18:05:30] *** Quits: y1n (~y1n@84-115-64-106.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[18:05:59] *** Joins: P1ro (~quassel@user/p1ro)
[18:06:09] *** Joins: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com)
[18:06:28] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:06:37] *** Quits: ihristov (~ihristov@78.130.205.229) (Quit: Connection closed)
[18:08:25] <varaindemian> bjs so I cannot store them in a .env file
[18:08:32] <bjs> varaindemian: cannot store *what*
[18:09:35] *** Joins: visl (visl@user/visl)
[18:09:42] <varaindemian> `users = {"john": "hash for pass", "susan": "hash for pass"}`
[18:10:00] <bjs> varaindemian: why do you want to store the *hash* in the .env ?
[18:10:22] <bjs> the hash is the thing that goes in the database to check the password against (for example)
[18:10:27] <varaindemian> bjs how else can this be done?
[18:10:42] *** Quits: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[18:10:45] <bjs> varaindemian: I'm not entirely sure what "this" is
[18:10:46] *** Joins: vapour (vapour@eris.noname-ev.de)
[18:11:27] <bjs> varaindemian: you can store the hash just fine in the .env file (although dotenv is for *reading* those files not writing them?) and .env files don't look like that python dict you displayedf
[18:11:30] <bjs> they look more bash scripts?
[18:12:06] <varaindemian> https://pastebin.com/qfzUCbaq
[18:12:20] <varaindemian> for the moment I have this in a separate .py file
[18:12:31] <varaindemian> I want to transition it to .env file
[18:12:42] <varaindemian> but I guess my problem is the syntax
[18:12:46] <bjs> syntax?
[18:12:53] <varaindemian> I want to store a dictionary
[18:13:00] <varaindemian> user:hash
[18:13:37] <bjs> varaindemian: so an .env file is just like basically a little bash script that writes environment variables. the dotenv project *reads* that file so you can read it back out as Python dictionaries or to load them into the environment variables automatically for you.
[18:14:00] <varaindemian> ok
[18:14:03] <varaindemian> got that
[18:14:06] <bjs> varaindemian: you seem to be wanting to put a hash in the .env,  but you've not explained why you're doing that.  Is the users password not already stored as a hash somewhere, like in a database?
[18:14:31] <varaindemian> bjs exactly it is not stored
[18:14:40] <bjs> varaindemian: so your .env file *is* sort of the database?
[18:14:40] *** Joins: ihristov (~ihristov@78.130.205.229)
[18:14:46] <varaindemian> yes
[18:14:57] <varaindemian> I sent you the flask example
[18:15:02] <varaindemian> that's my app
[18:15:25] <varaindemian> now I want the .env file to be my database
[18:15:49] *** Joins: Elodin (~weechat@user/elodin)
[18:16:00] <afidegnum> any insight ?
[18:16:56] <bjs> varaindemian: yes okay so what is the problem? You can write those hashes to your .env file if you want and then load them again somewhere else to check a password against
[18:17:00] <bjs> as if it were a database
[18:17:29] <varaindemian> I tried that but the login doesnt seem to work
[18:17:35] <varaindemian> no error messages
[18:17:41] <varaindemian> I just cannot authenticate
[18:17:49] <varaindemian> it's like I am entering the wrong password
[18:18:19] <bjs> varaindemian: okay where is "the login" happening? how are you doing it?
[18:18:34] *** Joins: y1n (~y1n@84-115-64-96.wifi.dynamic.surfer.at)
[18:18:44] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:a842:ff25:96a4:76e7)
[18:18:44] <varaindemian> it's exactly like here https://flask-httpauth.readthedocs.io/en/latest/
[18:18:47] <varaindemian> first example
[18:18:49] <varaindemian> exactly
[18:18:52] <varaindemian> same values
[18:20:08] <bjs> varaindemian: well it's not "exactly" like there, didn't you say you're loading from a dotenv?
[18:20:35] <varaindemian> that's what I want
[18:20:41] *** Joins: Obo (~roberto@70.pool90-171-81.dynamic.orange.es)
[18:20:41] <bjs> afidegnum: isn't `i` the parent and `d` the child?   there is no recursion here
[18:20:43] <varaindemian> But I cannot
[18:21:00] <bjs> varaindemian: are you saying it doesn't work even without dotenv? or that when you try read the dotenv it doesn't work?
[18:21:04] <afidegnum> oh!, wait let me check
[18:22:31] <bjs> afidegnum: then in line 15 `node` is the parent and `y` is the child (?)
[18:22:32] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[18:24:05] <afidegnum> bjs: for x, y in node.attrib.items(): those are iterations for the current node attributes in a list form
[18:24:16] <afidegnum> so it needed a for-loop to extract them
[18:24:18] *** Quits: ihristov (~ihristov@78.130.205.229) (Quit: Connection closed)
[18:24:35] <varaindemian> bjs when I try to read authentification.env which is something like this: https://pastebin.com/zJh9kjac
[18:24:42] <bjs> afidegnum: yes (I don't know if in XML/HTML parlence you would say that the node is a "parent" of the attribute, but if so, then y is the child and node is the parent)
[18:24:57] <bjs> varaindemian: that just isn't what a .env file looks like
[18:25:22] <varaindemian> bjs so how it should look like then?
[18:25:25] <bjs> varaindemian: i assume you're using https://pypi.org/project/python-dotenv/ it has examples of what the .env files look like
[18:26:31] <varaindemian> bjs should I use dotenv_values(".env.secret")?
[18:26:40] <bjs> varaindemian: if you want to call it .env.secret instead of .env sure
[18:27:10] <afidegnum> bjs. i gives only a single value, not its descendant
[18:27:53] <bjs> afidegnum: yes,  your code doesn't have any recursion its' not doing any descending into the tree
[18:28:13] <varaindemian> bjs not sure wha't wrong with my code tho
[18:28:34] <bjs> varaindemian: it's just not what a .env file looks like? I'm surprised dotenv isn't just giving you an error
[18:28:44] <varaindemian> ..
[18:28:56] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:28:57] <bjs> varaindemian: what
[18:29:27] <varaindemian> bjs I know I am surprised as well that it works but now as expected
[18:29:38] <varaindemian> not as expected*
[18:29:51] <altendky> varaindemian: https://github.com/theskumar/python-dotenv#getting-started they have an example `.env` there.  it's basically a variable-assignment-only bash script.
[18:30:21] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[18:30:22] *** Joins: srhm (~ascii@user/srhm)
[18:30:29] <kieto> Hi! How can I make sure that an envvar is being set before starting imports? I'm running pytest with tox, and I have a test method that sets an envvar with os.environ, but when it reaches there it's already to late to set it
[18:31:07] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[18:31:12] *** Quits: mike18_ (~geri@217-149-163-174.nat.highway.telekom.at) (Remote host closed the connection)
[18:31:20] <kieto> and also, I don't want to set the envvar in tox.ini, since I would like it to be specific of that test method. I don't know if there's a way to do that..
[18:31:27] <varaindemian> kieto yeah but I want to read it as a dictionary
[18:31:44] <varaindemian> sorry
[18:31:48] <varaindemian> altendky ^
[18:31:49] <afidegnum> bjs: how do i build the recursion?
[18:31:50] <kieto> np :)
[18:31:50] <altendky> varaindemian: dotenv doesn't read dicts, it reads .env files
[18:32:08] <bjs> varaindemian: yes, that's what the dotenv project does. it reads .env files in the format that altendky gives, and returns a dictionary
[18:32:13] <bjs> varaindemian: have you actually _read_ the page I linked?
[18:32:23] <bjs> afidegnum: well, by calling the function again at some point :)
[18:32:47] <afidegnum> do i need to establish a loop ?
[18:33:18] <bjs> afidegnum: well you need to loop over the children of a node yeah
[18:33:23] <altendky> kieto: when you start messing with global state in pytest you might want a pytester fixture to isolate in a subprocess.  (pytester is an update from the older testdir fixture)
[18:33:40] <altendky> does anyone have a solution for dependabot stripping out transitive compatibility library dependencies that aren't needed on the python version they run pip-compile with?  i've seen workarounds like "just explicitly specify those transitive deps" and "just make every python thing you run use that version by way of adding a `.python-version` file".  the latter is nearly useless and the former is...  well, technically it'll
[18:33:40] <altendky> "work".  i'm not quite sure why this isn't a pain for "everyone" that i would already have seen a workaround for.
[18:33:54] <bjs> afidegnum: here's a massive hint: a function that takes a "parent" node, loops over its children and recurses on each.
[18:34:29] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Client Quit)
[18:34:33] <afidegnum> how do i get the parent and the child node ?
[18:34:57] <bjs> afidegnum: well when you loop over the parent to get the children then... you have the parent and the child right there
[18:35:00] <bjs> i dont understand the question
[18:35:24] <afidegnum> ok,let me try my hands
[18:35:27] *** Joins: rany_ (~rany@user/rany)
[18:35:32] *** Quits: rany (~rany@user/rany) (Ping timeout: 245 seconds)
[18:36:06] *** Joins: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com)
[18:36:30] <altendky> kieto: hmm, so i think i actually was trying to do this recently.  i'm looking for where that was.  but, the pytester launcher doesn't have an `env=` parameter so you still end up mucking with the global state of environment variables in the main pytest process which isn't beautiful, but in "normal" situations it ends up ok.
[18:36:37] *** Joins: cbasah (~armycook2@202.185.71.229)
[18:37:20] *** Joins: zeden (~zeden@user/zeden)
[18:37:29] *** Quits: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d) (Ping timeout: 258 seconds)
[18:39:29] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[18:39:42] <varaindemian> bjb yeah but will I get the same hash when `check_password_hash(users.get(username), password):` will be called during verification?
[18:39:44] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[18:39:46] *** Quits: afidegnum (~user@41.66.203.57) (Ping timeout: 240 seconds)
[18:39:48] *** Quits: nomic (~nomic@host81-157-178-98.range81-157.btcentralplus.com) (Quit: Leaving)
[18:40:47] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[18:40:52] <kieto> altendky: yes, I've heard of pytester but I think it will complicate things further. I'm trying to manage those config imports that rely on envvars to be imported from inside __init__ methods of classes, that way they will get triggered later
[18:41:32] *** Joins: akk (~akk@75.161.157.26)
[18:41:33] <kieto> hah! it worked :)
[18:41:39] *** Joins: p-i- (~Ohmu@2001:44c8:4617:56ef:6df1:7b5d:c87e:48e4)
[18:42:13] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[18:42:19] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[18:42:46] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[18:42:48] <altendky> kieto: well, importing in `.__init__()` isn't great itself.  but you said you wanted per-test global state control with the state change happening ...  early in the context of pytest.  the only way to be early but still after other tests is to launch a new pytest process (or maybe whatever magic games they play for in-process pytester stuff).
[18:43:01] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[18:43:08] *** Joins: p-i-__ (~Ohmu@2403:6200:8870:a614:4c0:8620:185a:dbe1)
[18:43:22] *** Joins: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d)
[18:43:28] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[18:44:46] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:a7a6:dd2f:d5ab:1b75:ee21) (Ping timeout: 258 seconds)
[18:44:51] <kieto> altendky: I understand, but I don't know how I would do that easily
[18:45:04] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[18:45:56] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 256 seconds)
[18:46:48] *** Quits: p-i- (~Ohmu@2001:44c8:4617:56ef:6df1:7b5d:c87e:48e4) (Ping timeout: 272 seconds)
[18:46:56] *** Joins: afidegnum (~user@102.176.94.98)
[18:47:22] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[18:47:27] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 258 seconds)
[18:47:32] <afidegnum> bjs: sorry i was disconnected, i couldn't get your previous message
[18:48:09] <altendky> kieto: here are some example `pytester` tests.  https://github.com/python-qt-tools/qts/blob/a9f0da7cb6039eaf64ac7dc15d834742b7250ee9/src/qts/_tests/test_core.py#L131  since `pytester.runpytest_subprocess()` doesn't support `env=` you would set the env-var first and then call `pytester.runpytest_subprocess()` then unset the env-var (in a finally or such, maybe even write up a quick `@contextlib.contextmanager`)
[18:49:15] <kieto> altendky: thanks! I'll take a look at it :)
[18:49:32] *** Joins: NeoCore (~neocore@89.40.183.16)
[18:50:00] <altendky> kieto: it does have various bad aspects.  code in a string etc.  but i figure that smelliness is a reminder that using global state is a pain.
[18:50:28] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[18:51:14] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:51:31] <kieto> altendky: yes, I don't like to have subprocess calls for this, that's why I thought having imports in __init__ would be a better solution
[18:51:32] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[18:52:06] <kieto> it actually does what I mentally want, which is to set class attributes from envvars when I instantiate those classes, not before instantiating them
[18:52:47] <altendky> kieto: maybe just write a function so at least the class isn't infected by the global state dependency.  but apparently i didn't really understand the situation you have.
[18:53:08] *** Quits: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com) (Ping timeout: 272 seconds)
[18:53:40] <altendky> getting code that checks global state out of direct import paths and into paths that you call later when you want to is certainly the right direction.
[18:53:52] <altendky> much much easier to work with
[18:54:28] *** Joins: zebrag (~chris@user/zebrag)
[18:54:36] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[18:55:11] *** Quits: Mattiaslndstrm (~Mattiasln@c-73a0225c.018-449-6e6b701.bbcust.telenor.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:55:18] <petaflot> me again :S is https://bpa.st/UZCA sufficiently pythonic or is there some better/cleaner way?
[18:55:22] <gitesh> while other data structure are printed the same way they look right?
[18:55:40] <gitesh> why did they make print("Hello World!") printing Hello World! without quotes
[18:55:45] *** Joins: upsala (~zcb@185.213.155.160)
[18:56:22] <petaflot> oh there is a small indentation error with the break statement
[18:56:39] <petaflot> or not (oops... sorry)
[18:57:05] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:5967:2fb0:cc2f:4c7c) (Quit: Leaving)
[18:58:50] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:58:53] <petaflot> please ignore. I just realize my function is very bad ; it didn't cause nay problems in my case but it's still very wrong ; I need to rewrite it
[18:59:09] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 276 seconds)
[18:59:20] *** Joins: haroon (~haroon@ip-178-201-196-165.hsi08.unitymediagroup.de)
[19:01:02] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:01:08] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[19:01:15] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:01:28] <kieto> altendky: let's say I have an API client which downloads/uploads files from an API, but the API environment is defined by envvars, so you can switch between prod/staging/dev settings
[19:02:38] <kieto> (that's it, the sentence doesn't continue)
[19:02:56] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:9706:5e2f:b431:19bd)
[19:03:20] <petaflot> I think this makes more sense: https://bpa.st/HA4A
[19:04:00] <altendky> kieto: there are a lot of pieces here.  one is keeping the class simple to construct.  a common pattern when you are tempted to put expensive/global etc stuff into `.__init__()` is to instead make `.__init__()` take parameters for those bits and have a helper function like `create_my_thing()` that does the craziness.  the user gets the simple call and the test that aren't trying to test the global state can just easily create
[19:04:00] <altendky> the class instances they want.
[19:05:10] <kieto> do you mean it would be better to pass somehow that envvar as an arg for .__init() ?
[19:05:54] *** Quits: y1n (~y1n@84-115-64-96.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[19:06:53] <rendar> in unices systems, if i fork() a new process, that process will have the exact same data of the parent process... is that what happens with python  multiprocess library? so basically, the child process could run a function from my module, right?
[19:07:08] <rendar> using parent process data...
[19:07:11] <Ben_1> nedbat: sorry for my late reply, I was catched in my coding flow. :P
[19:07:11] <Ben_1> Your proposal worked, thanks a lot! :)
[19:08:12] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[19:08:38] <graingert> what's the difference between a network and an interface? eg ipaddress.ip_network and ipaddress.ip_interface
[19:09:10] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:09:17] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:09:48] <graingert> what are "except that arbitrary host addresses are always accepted."
[19:10:23] <NoImNotNineVolt> where are you quoting from?
[19:10:41] <SnoopJ> the documentation of that module
[19:10:43] <NoImNotNineVolt> also, i'm failing to parse that last question
[19:10:56] <StyXman> an interface represents a connector and might be connected to several logical (IP) networks
[19:11:28] *** shlomif is now known as shlomif2
[19:11:36] <NoImNotNineVolt> presumably the documentation is saying that CIDR notation is accepted, and also individual addresses.
[19:11:41] <petaflot> I'm not using `async with` yet because everyting I've tried up to now raises AttributeError: __aenter__
[19:12:08] <graingert> StyXman: ok but what does that mean
[19:12:19] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:9706:5e2f:b431:19bd) (Quit: Leaving)
[19:12:25] <NoImNotNineVolt> https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface has a few examples that clarify.
[19:12:30] *** Joins: Harlin (~DonQixote@2603:300b:663:e800:9706:5e2f:b431:19bd)
[19:12:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:12:44] <graingert> it does not clarifiy it for me
[19:12:46] <StyXman> graingert: ah, in that context it's another thing
[19:12:59] *** shlomif2 is now known as shlomif
[19:12:59] <graingert> specifically I'm looking at https://netplan.io/reference/ and I want to convert a address and netmask into a CIDR
[19:13:18] <graingert> for the `addresses (sequence of scalars and mappings)` line
[19:13:20] <NoImNotNineVolt> the interface address is the address assigned to the interface. the network address is the network that contains the address.
[19:13:32] <StyXman> graingert: IP has a concept called networks. a network is a range of IPs that can communicante with each other without using a gateway
[19:14:04] <bjs> gitesh: that's just what was decided print should do.  Really it's up to the data structure to choose how to be printed.
[19:14:05] <graingert> so I'm presuiming I want an ip_interface ?
[19:14:06] <StyXman> graingert: the ip_network is an IP address that references the IP network
[19:14:14] <NoImNotNineVolt> the example uses IPv4Interface('192.0.2.5/24')
[19:14:30] <NoImNotNineVolt> this has interface address 192.0.2.5 and network address 192.0.2.0/24
[19:14:39] <graingert> ohhhh
[19:14:40] <graingert> of course
[19:14:44] *** Parts: Ben_1 (~ben@2001:1438:4010:704:f409:636:4e7e:3dcd) ()
[19:14:48] <graingert> it's the 0s from the netmask
[19:14:51] <gitesh> bjs: ok
[19:14:53] <bjs> gitesh: sometimes there isn't a "right" decision;  if print had decided to always print with quotes you would be here asking why didn't they choose to drop the quote marks
[19:15:05] <bjs> gitesh: and both are good questions and there is no right answer
[19:15:11] <graingert> ok so I do want ip_interface
[19:15:54] <StyXman> ok, so ip_interface is an IPaddress that also has the prefix for calculating the IPNetwork
[19:16:08] <gitesh> bjs: ok
[19:16:10] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:5529:6c14:c3fb:dbd5)
[19:16:15] <StyXman> NoImNotNineVolt: exactly that :)
[19:16:36] <StyXman> graingert: for doing what?
[19:16:56] *** Joins: JoeH_ (uid113241@id-113241.highgate.irccloud.com)
[19:16:57] <shlomif> gitesh: hi, sup?
[19:17:00] <graingert> configuring the netplan "ethernets.{interface}.addresses" items
[19:17:11] <gitesh> hi shlomif
[19:17:21] <gitesh> shlomif: I'm alright learning python
[19:17:26] <NoImNotNineVolt> an ip_interface is analogous to the combination of an ip_address and a ip_network.
[19:17:37] <shlomif> gitesh: i am rindolf, BTW
[19:17:45] <gitesh> shlomif: got it
[19:18:02] *** Quits: afidegnum (~user@102.176.94.98) (Ping timeout: 245 seconds)
[19:18:18] <shlomif> gitesh: ah, it shouldnt take long
[19:18:38] <gitesh> shlomif: yes
[19:18:40] *** Joins: y1n (~y1n@84-115-64-96.wifi.dynamic.surfer.at)
[19:18:59] <StyXman> graingert: since from an interface you can get address and network and viceversa, it's all the same, so whatever is more useful to you, I guess
[19:19:22] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[19:19:23] <kieto> altendky: I've arrived here from something graingert said on twitter :) https://docs.pytest.org/en/stable/monkeypatch.html#monkeypatching-environment-variables maybe that will solve my issues
[19:19:29] <gitesh> shlomif: how are you
[19:19:39] *** Parts: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:19:53] <graingert> kieto: I do tweet a lot of nonsense
[19:19:58] <shlomif> gitesh: fine, worked on pyperl
[19:20:19] *** Joins: Barones (~Barones@2804:7f3:8986:c347:a0a7:cf77:2eec:3619)
[19:20:20] <kieto> graingert: is monkeypatch.setenv able to set envvars before imports?
[19:21:06] *** Quits: NakedKing (~NakedKing@user/nakedking) (Remote host closed the connection)
[19:21:29] <altendky> kieto: isolate that as much as possible.  like have the `create_my_thing()` function take parameters with the objects/classes/whatever to use.  then you can even run all those tests without messing with the env vars.  and if not passed, only then resort to env vars.  then you have like one test for each thing selected by the env vars that needs to mess with env vars.  everything else is just a regular old test.
[19:21:51] <altendky> kieto: but don't go back to import-time configuration...  that's a painful mess for tests and users.
[19:22:06] <altendky> at least in lots of cases
[19:22:40] <kieto> altendky: that seems like a very good idea, thanks, I'll try to code it!
[19:22:59] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[19:23:41] <shlomif> gitesh: i found some new good covers on youtube
[19:24:06] <kieto> I mean, I'm already using a dict to store different Config classes which have attributes being set from envvars
[19:24:14] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Quit: ZNC 1.8.2 - https://znc.in)
[19:24:34] <altendky> kieto: the tests help you see the issues your users will see.  they use your own code from a different perspective just as users will have their own perspective.  if your tests are hard to write because of stuff like this then some group of your users will have the same issue, likely.
[19:24:49] *** Joins: NakedKing (~NakedKing@user/nakedking)
[19:24:50] <kieto> true, true
[19:24:52] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[19:25:24] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:25:29] <kieto> what would be best then? instantiate my main client class with Client(config=my_dict) and never resort to envvars?
[19:25:35] <kieto> ^ altendky
[19:25:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:26:06] <altendky> kieto: without saying this situation is good or bad, let's say you have some global configuration object that depends on environment variables.  it's tempting to have it created when the application does `import yourlib`. so it just is magically correct.  but then they have to delay importing your library when they want to, for example, use one of their own cli parameters to configure your library.
[19:26:11] *** Quits: hendursaga (~weechat@user/hendursaga) (Client Quit)
[19:26:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:26:52] <altendky> kieto: if instead you have `import yourlib` and `yourlib.config(this="something", that=27)`, it's easy.  and if they just want whatever your automatic config is they can `yourlib.config()` and pass nothing.
[19:27:16] <kieto> altendky: oh, I like this .config() magic
[19:27:26] <altendky> so by making everyone explicitly `yourlib.config()` you now make it obvious to everyone how to do something before that
[19:27:37] <altendky> yeah, well, that was the bit i wasn't saying was good :]
[19:27:46] <kieto> hahahaha
[19:27:57] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[19:28:01] <shlomif> gitesh: http://esr.ibiblio.org/ has been down for a while - another victim of wordpress...
[19:28:05] <altendky> it was a simple way to show that a simple explicit thing would eliminate this conversation entirely for you and for various users of your code.
[19:28:05] *** Quits: visl (visl@user/visl) (Ping timeout: 258 seconds)
[19:28:25] <gitesh> shlomif: right now I'm learning python, so I would reply late
[19:28:28] <altendky> there would be no more "how do i X before Y" because you literally just put X before Y
[19:28:36] *** Quits: stevieh (~skrodzki@p2e584254.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[19:28:51] <altendky> kieto: btw, you are free to share the specific project for more specific commentary.
[19:29:02] <kieto> altendky: but I mean, as a user you can use .config() to set the parameters as you wish, but let's say you want the automatic config for the dev environment, then pass something like .config(env="dev"), right?
[19:29:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[19:29:20] *** Joins: Pickchea (~private@user/pickchea)
[19:29:25] <kieto> altendky: I would like to share it, but I have to rename many private stuff before that
[19:29:34] <altendky> kieto: you could just not pass it and have the function detect the default value and do whatever it needs to do
[19:29:42] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[19:30:14] *** Quits: crippa (~crippa@160.62.4.101) (Quit: Connection closed)
[19:30:16] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[19:31:37] *** Quits: hyper_dave (~hyper_dav@197.156.107.21) (Ping timeout: 250 seconds)
[19:32:13] *** Joins: LiftLeft (~LiftLeft@191.96.150.113)
[19:32:40] <kieto> altendky: cool, so let me get this straight. I could have a Client() class, which uses the config() method to set all the required class attributes. One can then rely on an envvar "CLIENT_ENV" to be passed to config, such as config(env=getenv("CLIENT_ENV")), that would make testing easier. Additionally, you could manually set specific class attrs with config(attr_1="foo")
[19:33:16] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[19:33:22] *** Quits: ironsoba (~z@user/ironsoba) (Ping timeout: 240 seconds)
[19:33:31] <altendky> kieto: get information to stuff by passing it usually, not by mutating classes themselves.
[19:33:40] <kieto> altendky: that way, you lose all the import magic, and in case you need to modify a specific param, you can call config() again, right?
[19:33:54] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[19:36:48] *** Quits: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net) (Ping timeout: 252 seconds)
[19:38:15] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[19:38:25] <altendky> kieto: maybe an example will help.  or maybe it will need more added to it to be helpful.  https://bpa.st/ZVDA
[19:38:26] *** Quits: haroon (~haroon@ip-178-201-196-165.hsi08.unitymediagroup.de) (Quit: Client closed)
[19:39:17] <altendky> or even https://bpa.st/K7KA
[19:39:54] *** Quits: daddy (~ryan@hashbang/bdfl) (Ping timeout: 258 seconds)
[19:40:34] <rendar> there is something that bugs me: let's say i have a big generator which at some points it reads a file and yield from file lines... what about i' m in asyncio? should i make that file reading non blocking with aiofiles? i don't want to rewrite all the big generator just for adding aiofiles lines.. what is a good solution?
[19:40:45] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 276 seconds)
[19:41:19] <kieto> altendky: the first paste is what I was exactly thinking of doing, thanks so much! :D
[19:41:30] *** Quits: sandeepk (~sandeepk@223.130.30.53) (Ping timeout: 258 seconds)
[19:42:01] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 250 seconds)
[19:42:09] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[19:43:48] <kieto> altendky: btw, I always use `if not option` instead of `if option is None`, it fits better in my brain
[19:43:49] *** Joins: visl (visl@user/visl)
[19:44:00] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[19:44:28] *** ayusta is now known as ayustae
[19:44:29] <altendky> kieto: then when people pass `option=[]` you will think they passed `None`.  or if they pass `0` or `''` etc.
[19:44:43] *** Quits: jjasghar (~quassel@user/jjasghar) (Quit: No Ping reply in 180 seconds.)
[19:44:57] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 258 seconds)
[19:45:16] <kieto> altendky: that's true, I'll do it that way from now on
[19:45:30] <altendky> or some custom class instance where they control `.__bool__()` and presently consider the instance falsey
[19:45:31] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:45:32] <kieto> thanks for all the wisdom today :)
[19:45:46] *** Joins: stoneware (~stoneware@user/stoneware)
[19:46:02] <altendky> kieto: fwiw, there are plenty of people that like the implicit bool conversions and use them.  i'm not one of those people.  `:]`
[19:48:47] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 258 seconds)
[19:49:26] <rendar> anyone?
[19:50:54] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[19:51:22] *** Quits: dcaro (~dcaro@user/dcaro) (Quit: ZNC 1.8.2 - https://znc.in)
[19:51:41] *** Joins: dcaro (~dcaro@user/dcaro)
[19:52:18] <bjs> rendar: I mean it doesn't seem the generator makes a difference here
[19:52:42] <bjs> rendar: if you want to re-write the file.read() to use aiofiles then sure, if not then dont
[19:52:55] <rendar> bjs: huh? why not? if i run that generator inside asyncio, i can't have blocking file i/o or i risk that it will pause other coroutines
[19:53:08] <bjs> rendar: but that's nothing to do with the generator?
[19:53:13] <bjs> it's just the reading of the file
[19:53:23] <bjs> if you didn't have a generator and just read the file you'd still have blocking I/O
[19:53:39] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[19:53:40] <rendar> bjs: not if i use aiofiles
[19:53:51] <bjs> rendar: sure so use aiofiles
[19:54:03] <rendar> bjs: but i want that generator also work without asyncio
[19:54:22] <bjs> rendar: you can't write functions that work for both 'async' and non-async types
[19:54:34] *** Quits: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d) (Ping timeout: 240 seconds)
[19:54:35] <bjs> at least not easily or consistently
[19:54:47] <rendar> do i have to write 2 versions of this generator?
[19:55:07] *** Joins: rany (~rany@user/rany)
[19:55:13] *** Quits: Obo (~roberto@70.pool90-171-81.dynamic.orange.es) (Quit: WeeChat 2.8)
[19:55:27] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:55:48] <bjs> rendar: I mean, Python is a general purpose language and all the actual _work_ of the generator can be abstracted to other functions
[19:56:01] <bjs> but yes, you need an `async def` generator and a normal `def` generator
[19:56:06] <rendar> bjs: i want to abstract! but at some point this generator must load a file
[19:56:18] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 240 seconds)
[19:56:54] <rendar> how can i abstract a very big function that at some points inside it loads a file?
[19:57:45] *** Joins: humbertwooody (~humbertow@187.202.183.6)
[19:57:53] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Quit: Leaving...)
[19:57:53] <bjs> rendar: by abstracting out the part that actually reads the file. Assuming the stuff in-between is synchronous then you can e.g. have something that takes the lines as input
[19:57:57] <bjs> rather than computing them itself
[19:58:16] *** Joins: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com)
[19:58:42] <rendar> bjs: let me explain to you my example: i'm writing a lexer which iterates over text lines, if a line starts with # it ignores it and so on.. now, if it gets a line which starts with @include hello.txt it will open the file and yield from a new lexer that has those lines as the new input
[19:59:10] <bjs> rendar: okay... making the lexer async seems very fancy indeed
[19:59:28] <rendar> right
[19:59:41] <rendar> but the lexer is run inside asyncio
[20:00:46] *** Joins: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d)
[20:02:01] *** Joins: sandeepk (~sandeepk@223.130.30.53)
[20:02:38] <bjs> rendar: okay and you want the lexer to use aiofiles to read the actual file
[20:02:53] <rendar> bjs: well, if i'm inside asyncio i must do that
[20:03:02] <rendar> otherwise the risk is to pause all asyncio coroutines
[20:03:16] <bjs> rendar: well,  to pause while it reads a file, which may or may not be a problem
[20:03:18] <rendar> think if the file is inside NFS filesystem, latency would be huge
[20:03:26] <rendar> eh?
[20:03:27] <bjs> rendar: https://bpa.st/2TNQ  is not necessarily the best way but it's at least a demonstration of the idea
[20:03:40] <bjs> to show you can abstract the synchronous parts of the work away from the asynchronous ones
[20:03:46] <bjs> i'm sure there are lots of ways to do it
[20:04:46] <rendar> bjs: uhm, i see
[20:04:52] <bjs> rendar: uhm?
[20:05:29] <gitesh> passing a function to other function like sorted is weird
[20:05:40] <rendar> bjs: but where is the main loop of the lexer which yields from a new lexer if it must read a file? and shouldn't that function keep the 'async' ?
[20:05:43] <bjs> gitesh: why?
[20:05:44] <gitesh> why is a function an object first of all?
[20:05:46] *** Quits: y1n (~y1n@84-115-64-96.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[20:05:53] <bjs> gitesh: why not?
[20:06:08] <gitesh> bjs: because it's not real value
[20:06:10] <BlessJah> w 11
[20:06:15] <gitesh> like 1, 2, 3
[20:06:18] <bjs> gitesh: why is not a "real" value?
[20:06:19] <gitesh> or string like "gitesh"
[20:06:22] <bjs> why are 1, 2, and 3 more "real"?
[20:06:43] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:06:46] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[20:06:47] <gitesh> bjs: because it's data
[20:06:55] <bjs> gitesh: why aren't functions data?
[20:06:58] <bjs> functions are just as real
[20:07:02] <gitesh> comuter is about data and programming
[20:07:13] <flagrama> if it can be put in RAM, is it not data?
[20:07:15] <gitesh> why is function data it's just statements
[20:07:16] <bjs> gitesh: you mean, like functions :)
[20:07:37] <gitesh> flagrama: that make sense
[20:07:51] <bjs> gitesh: well, a function is an object that contains some data (the statements to run)
[20:07:55] <SnoopJ> gitesh, "first-class" functions that can be passed around can seem a little weird when you first see them, yes.
[20:08:05] <SnoopJ> It lets you do some very nice things though :)
[20:08:10] <bjs> gitesh: there are some languages that don't even have 1, 2, 3 or strings but only have functions!  functions are *more* real than those :)
[20:08:40] <bjs> rendar: well I'm not going to write your lexer for you,  you can obviously make the function do more than just print a line out and yield nothing
[20:08:55] <gitesh> SnoopJ: it's really very nice, if it didn't feel weird, to pass it to sorted as a property builder like that to make the items sorted
[20:09:15] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 252 seconds)
[20:09:15] <bjs> rendar: and you don't need to make the top-level functions be just normal defs they can be generators, and the lower thing doesn't have to be a generator with send/yield it can be other functions or something there's endless possibilities here
[20:09:45] <rendar> bjs: i will make a test
[20:09:51] <SnoopJ> gitesh, as far as "why is it an object," the answer in Python is that *everything* is an object.
[20:10:07] <gitesh> function is so powerful as far as I'm seeing, function is not just one thing, it is for different reasons for different context
[20:10:13] <SnoopJ> yes
[20:10:15] <bjs> gitesh: functions are very powerful
[20:10:26] <gitesh> SnoopJ: so if...else statement also an object?
[20:10:31] <gitesh> for loop also an object?
[20:10:39] <bjs> gitesh: no
[20:10:45] <rendar> bjs: my point is that: if in your example async_main() is the main function of the lexer, it MUST contain 'async' making the lexer asynchronous!
[20:10:47] <bjs> gitesh: in the same way that a `def` isn't an object, but the function it creates is
[20:10:52] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:11:12] <gitesh> bjs: what does mean in python everything is an object is that every data is an object
[20:11:13] <bjs> gitesh: `def` (and `if` and `for`) are all just syntax.  The function object contains the data which is the code to run
[20:11:15] <gitesh> i guess
[20:11:25] <bjs> gitesh: it means all the "values" or "things" are objects
[20:11:48] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:12:20] <SnoopJ> gitesh, every value is an object.
[20:12:29] <SnoopJ> And functions are a kind of value
[20:12:54] <SnoopJ> if/else and loops are kinds of statements, not values
[20:12:54] <gitesh> also body of for loop and if else statement also values?
[20:12:56] <SnoopJ> no
[20:13:01] <gitesh> okay
[20:13:07] <bjs> gitesh: no because they're already part of the function
[20:13:11] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[20:13:14] <gitesh> if/else and loops are programming then
[20:13:27] <SnoopJ> gitesh, they're notation for what the programmers wants to do with the values in their program.
[20:13:31] <bjs> gitesh: functions are so powerful infact that you could remove everything else from Python and have only functions and Python wouldn't be any less powerful
[20:14:01] <rendar> gitesh: i think you should study more python, bjs was explaining a very important thing to me, and i lost him for your basic questions
[20:14:12] *** Quits: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[20:14:29] <bjs> gitesh: they're syntax.  Like how when we're speaking English to each other we're writing sentences.  The sentences have nouns (values) but they also contain lots of other things:  colons, periods, commas, random connecting words etc
[20:14:45] <SnoopJ> bjs, I think working out church numerals might be a *little* less powerful ;)
[20:15:07] <bjs> SnoopJ: much less nice
[20:15:11] <bjs> but not less powerful :)
[20:15:32] <rendar> bjs: so, my point is that for the lexer is *impossible* calling some async code without being async itself!
[20:15:34] <bjs> church numerals still give you an unbounded int type and from there..
[20:15:34] <SnoopJ> bjs, I am skeptical that it would not bring things to a crawl if I wanted to use a nice round number like 1_000_000
[20:15:48] <bjs> rendar: but in my example the `gen_read_file_async` *is* async
[20:16:03] <rendar> bjs: yes! but i'm speaking of the main lexer function
[20:16:18] *** Joins: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com)
[20:16:21] *** Quits: rsx (~dummy@ppp-188-174-144-238.dynamic.mnet-online.de) (Quit: rsx)
[20:16:21] <SnoopJ> or maybe just hit the max stack size and crash? you could write a runtime that avoids that problem I guess, but we're deep into the tarpit here :)
[20:16:22] <rendar> bjs: that MUST be async if it calls async file read somewhere
[20:16:25] <bjs> rendar: which one is the "main lexer function"?
[20:16:33] <rendar> bjs: async_main() of course
[20:16:49] <gitesh> and what does first-class objects mean is there second-class also?
[20:16:51] <bjs> rendar: okay but in my example my async main called gen_read_file_async and both were async
[20:16:56] <bjs> gitesh: in other languages yes
[20:17:12] <bjs> gitesh: it means you can pass them around to functions, that functions can return them, that you can assign them to a variable etc
[20:17:29] <rendar> bjs: that's my point! i want a non-async main lexer function which calls async stuff or non-async stuff, based if it's into asyncio or not
[20:17:55] <bjs> rendar: I mean that's not really easy to do
[20:18:03] <bjs> rendar: you can just make the "main" non-async one just run the async one of course
[20:18:05] <gitesh> bjs: and how does second-class sounds?
[20:18:14] <gitesh> if you would like to tell me
[20:18:22] <bjs> gitesh: Python doesn't have any so I can't give you examples
[20:18:28] <gitesh> okay
[20:18:40] <rendar> bjs: so i always would need an async lexer somewhere, proving that i was right at the beginning
[20:18:44] <bjs> gitesh: but look at what I said for first-class (can pass/return from functions and use as variables) and then second-class is just... not that
[20:18:50] <SnoopJ> gitesh, if you have written C before, it makes passing functions around very annoying, for example.
[20:18:57] <bjs> rendar: well I mean yes if you want an async version you need an async function *somewhere*
[20:18:58] <gitesh> that made me full sense that if you can put it in on RAM it's data
[20:19:04] *** Joins: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at)
[20:19:22] <bjs> rendar: the fact it's a lexer doesn't really do anything or mean anything here it's just that at the top you need some async thing yes
[20:19:28] <rendar> bjs: this is what bugs me, if using asyncio, we have to rewriting EVERYTHING with 'async' :(
[20:19:50] <bjs> rendar: yes this is a common problem with async world
[20:20:24] <rendar> bjs: basically the 'async' keyword is like the GPL license
[20:20:30] <rendar> it propagates, and you must use it
[20:20:32] *** Joins: cdown (~cdown@163.114.131.1)
[20:20:44] <bjs> rendar: well there is a simple rule, if you want to `await` something you need to be inside an `async def`
[20:20:54] <bjs> this means that when you await everything "above" you needs to be async.
[20:21:03] <bjs> Whether the lexer is above or below is up to you
[20:21:07] <SnoopJ> gitesh, sure, you can grab any random data from RAM and treat it like it's code. This is generally going to crash your computer. If you want to be able to keep track of which things work and which things crash your computer, you need to keep notes about what the data represents. This is what an object system does.
[20:21:08] <rendar> bjs: ok, then the question is: should i await a lexer which loads data from a file?
[20:21:31] <bjs> rendar: I'm not entirely sure there's much of a point in making the lexer async at all
[20:21:46] <gitesh> SnoopJ: makes sense
[20:21:46] <SnoopJ> (well, *one* of the many things it does)
[20:21:46] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:21:48] <bjs> rendar: but if you want it to be, then yes.
[20:22:14] <rendar> bjs: huh? it will be run INSIDE asyncio, so if it reads from a NFS filesystem with some seconds latency, it will block EVERYTHING for some seconds! that's pretty crazy
[20:22:31] <bjs> rendar: well yes it'll block, but I guess my point is.. it's a lexer
[20:22:36] <bjs> it's not like you can do anything else at the same time
[20:22:40] *** Quits: sandeepk (~sandeepk@223.130.30.53) (Remote host closed the connection)
[20:22:41] <bjs> you sort of have to do the lexing first anyway
[20:23:02] <bjs> imagine you're Python, there's no point making the lexing step async because you can't run the .py file until after it's read anyway
[20:23:17] *** Quits: humbertwooody (~humbertow@187.202.183.6) (Ping timeout: 258 seconds)
[20:23:21] <rendar> i can compile and load files in load-time, but it may happen that i have to parse commands also at run-time! which happens inside asyncio!
[20:23:31] *** Joins: dcaro_ (~dcaro@user/dcaro)
[20:24:02] *** Joins: dez (uid92154@user/dez)
[20:24:20] <SnoopJ> gitesh, functions themselves are like this. Once upon a time we didn't have them, you just wrote machine code that jumped around, and it was even worse: you had to keep track of where you were jumping from, etc. Functions are an abstraction that makes that pain go away.
[20:24:22] <gitesh> i just looked up the javascript defination, now i think, the way function is different than other data is that you can call a function, that means to me i can call 'data' ? , that makes a weird to me but
[20:25:07] <SnoopJ> gitesh, this is a great video that goes into more detail about what I just said about "subroutines" https://www.youtube.com/watch?v=DcZ1bFfDvSQ
[20:25:13] <bjs> rendar: okay sure, then make it async.  I'm just saying it's weird to make the lexer async because it's sort of dependency locked before everything else already you almost never gain anything. maybe you do here
[20:25:27] <gitesh> i love that what you said about abstraction SnoopJ
[20:25:36] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 272 seconds)
[20:25:36] *** dcaro_ is now known as dcaro
[20:25:38] <gitesh> one reason to love function
[20:25:57] <SnoopJ> gitesh, abstraction is the only reason that programming languages exist
[20:25:58] <bjs> gitesh: well you said 1 is data, and I can "add one" (+1) to that
[20:25:59] <gitesh> i know functions are procedures or subroutines
[20:26:04] <bjs> gitesh: what does it mean to "add one" to data?
[20:26:06] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:26:30] <gitesh> bjs: it means tranforming value?
[20:26:31] <bjs> gitesh: it's really the same thing,  data has data-specific operations;  int data can be "added", list data can be append()ed and function data be called.
[20:26:46] <SnoopJ> gitesh, yes, and you don't have to think about *how* it is transformed.
[20:26:53] <bjs> gitesh: but "add one" only makes sense for numbers, not all data
[20:26:59] <gitesh> awesome answer thanks
[20:27:00] <bjs> gitesh: just like how "call" only makes sense for functions, and not all data
[20:27:03] <NoImNotNineVolt> https://en.wikipedia.org/wiki/Fast_inverse_square_root
[20:27:10] <SnoopJ> NoImNotNineVolt, ?
[20:27:25] <gitesh> awesome thanks
[20:27:33] <NoImNotNineVolt> just passing along something someone shared with me in case anyone finds it interesting. somewhat offtopic, sorry.
[20:28:00] <SnoopJ> oh, thought it was meant to be re: functions. my mistake
[20:28:06] <bjs> rendar: I will say that maintaining both async and sync is annoying and libraries that do (e.g. httpx) do indeed have a lot of redundancy
[20:28:38] <NoImNotNineVolt> software development apocrypha :P
[20:29:14] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[20:29:22] <rendar> bjs: i agree, and that's the thing which bugs me :(
[20:29:35] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:29:38] <rendar> it is a bomb to python clearness and beauty
[20:30:23] <SnoopJ> gitesh, this computerphile might be better for understanding why functions themselves are an abstraction: https://www.youtube.com/watch?v=zR8V0lq029c
[20:31:07] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[20:32:06] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:a842:ff25:96a4:76e7) (Ping timeout: 258 seconds)
[20:34:09] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[20:35:14] <bjs> rendar: i agree but it's explicit and practical and better than just not having it at all
[20:35:35] <rendar> bjs: i agree on that
[20:36:09] *** Quits: Strom (strom@fedora/strom) ()
[20:36:19] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:d08b:fd68:fb9d:547c)
[20:37:12] *** Joins: ckdcreation (~ckdCreati@147.55.133.129)
[20:37:42] *** Joins: Strom (strom@fedora/strom)
[20:37:59] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Quit: leaving)
[20:38:48] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:38:51] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net)
[20:39:25] *** Joins: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net)
[20:40:32] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[20:40:34] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[20:41:46] *** Joins: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6)
[20:42:45] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Client Quit)
[20:44:18] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:1823:4510:65ba:133b)
[20:44:56] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 256 seconds)
[20:45:00] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[20:45:28] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:f812:23ee:b09a:688e) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:46:17] *** Quits: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6) (Ping timeout: 258 seconds)
[20:46:49] *** Joins: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com)
[20:47:51] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[20:47:53] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:48:25] <mav`rik> Hi all. It came to my attention about an hour ago that I have no idea what happens when a timeout occurs during asyncio.as_completed. How am I supposed to tidy up, work out which hadn't completed and close, close all anyway, etc.?
[20:48:26] *** baltazaar is now known as baltazar
[20:48:44] *** Joins: humbertwooody (~humbertow@2806:107e:f:6801:ec6b:a860:5c4d:eae6)
[20:49:21] *** Quits: emika (~emika@83.136.182.37) (Ping timeout: 258 seconds)
[20:50:33] *** Joins: emika (~emika@83.136.182.192)
[20:51:16] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 258 seconds)
[20:54:22] *** Joins: Tas-sos (~Tas-sos@78-154-35.adsl.cyta.gr)
[20:54:47] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[20:55:06] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:57:15] *** Joins: cheater (~Username@user/cheater)
[20:58:10] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[20:58:33] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:d08b:fd68:fb9d:547c) (Ping timeout: 258 seconds)
[20:58:52] <graingert> mav`rik: ah
[20:58:54] <graingert> about that
[20:59:05] *** Quits: VaniaPy (~VaniaPy@46.12.81.49.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[20:59:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[20:59:27] <graingert> mav`rik: it depends. asyncio isn't very good at calling all the `finally:` blocks in the right order at the right time
[21:00:29] <graingert> mav`rik: instead of as_completed I'd recommend you use aiometer
[21:00:36] *** Joins: Betal (~Beta@user/betal)
[21:00:44] *** Joins: Nanobot567 (~Nanobot56@70-231-104-76.lightspeed.nsvltn.sbcglobal.net)
[21:01:14] <graingert> mav`rik: the actual answer is you should watch https://www.youtube.com/watch?v=Xbl7XjFYsN4&list=PLhNSoGM2ik6SIkVGXWBwerucXjgP1rHmB which goes into how everything works
[21:01:51] <graingert> and then read the links here https://github.com/tiangolo/fastapi/discussions/3561 starting with https://trio.readthedocs.io/en/stable/tutorial.html
[21:02:39] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[21:02:49] *** Joins: afidegnum (~user@102.176.94.157)
[21:03:08] <mav`rik> Thanks, I'll add that to my list, looking at aiometer now. I only got to this when I noticed a `coroutine 'AsyncMockMixin._execute_mock_call' was never awaited` warning at the end of a coworker's test run, then got to digging
[21:03:56] <mav`rik> I doubt I'll be migrating to curio/trio any time soon, as much as I'd like to. But I'll follow up on your suggestions, thanks
[21:04:02] <graingert> mav`rik: ah you might want to enable `filterwarnings = "error"` and use `@pytest.mark.anyio` which sets the exception handler to match it to your test
[21:04:40] <graingert> so the test that caused the unraisable exception will (or one nearby) will fail
[21:04:55] <graingert> uhh sorry I added a bunch of caveats to that in a bad order
[21:05:18] *** Joins: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com)
[21:05:26] <mav`rik> Does this mean I'd need to mark _all_ tests with anyio in order for that to be useful?
[21:05:30] <graingert> anway try `filterwarnings = "error"` first it helps a lot
[21:05:44] <graingert> mav`rik: it's mostly dropin from @pytest.mark.asyncio to @pytest.mark.anyio
[21:05:52] <mav`rik> ah, thanks
[21:05:54] *** Quits: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at) (Ping timeout: 256 seconds)
[21:06:32] <graingert> you'll need to set a
[21:06:32] <graingert> @pytest.fixture
[21:06:32] <graingert> def anyio_backend(): return ("asyncio", {})
[21:07:55] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[21:08:18] *** Joins: eriluc (~eriluc@178.97.132.77.rev.sfr.net)
[21:09:01] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[21:09:07] *** Quits: rany (~rany@user/rany) (Ping timeout: 250 seconds)
[21:09:40] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[21:10:05] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:10:31] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[21:11:28] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[21:15:28] <afidegnum> hello, how do i fix the maximum recursion depth error? https://dpaste.org/WCjc
[21:15:30] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:5529:6c14:c3fb:dbd5) (Ping timeout: 240 seconds)
[21:16:43] <hodapp> well, your function tree_walk(tree) is calling tree_walk(tree), len(tree) times at each call
[21:16:59] <hodapp> I'm guessing you wanted to call tree_walk(node), not tree_walk(tree)
[21:17:04] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[21:17:13] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[21:18:12] <afidegnum> let me chek
[21:18:15] <afidegnum> check
[21:18:18] *** Joins: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at)
[21:18:53] *** Joins: rany (~rany@user/rany)
[21:19:22] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:19:24] <afidegnum> hodapp: that too didn't solve the issue
[21:21:15] *** Joins: matsaman (~matsaman@user/matsaman)
[21:21:41] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:21:59] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:22:23] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[21:22:48] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[21:22:59] <nedbat> afidegnum: can you pastebin the updated code?
[21:23:42] <mav`rik> afidegnum: is your code now https://bpa.st/B3OQ ?
[21:24:01] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[21:25:10] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Ping timeout: 256 seconds)
[21:26:17] <afidegnum> nedbat: https://dpaste.org/FK5r
[21:26:22] *** Joins: junktext (~junktext@109.201.152.179)
[21:26:28] <afidegnum> mav`rik: thanks a lot, let me look into it
[21:26:52] <nedbat> afidegnum: your traceback shows the old line, not the new line. Are you sure you are running the right code?
[21:27:14] *** Quits: yaalon (~yaalon@ftth-static-173-239-90-128.rioaccess.com) (Remote host closed the connection)
[21:27:41] *** Quits: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d) (Ping timeout: 258 seconds)
[21:27:44] <afidegnum> wait let me check
[21:28:04] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[21:28:44] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[21:29:10] <dale> Even if everything is working as intended, sufficiently deeply-nested HTML would still blow the stack there, right?
[21:30:01] <nedbat> dale: you'd need 1000 levels of nesting, which seems unlikely
[21:30:12] <dale> Sounds like a challenge!
[21:30:27] <afidegnum> mav`rik: that works
[21:30:30] <afidegnum> thanks a lot
[21:30:40] <dale> nedbat: But, yes, that's a good point.
[21:30:47] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 250 seconds)
[21:30:58] *** Joins: c10l (~c10l@89.34.167.207)
[21:31:02] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[21:31:13] *** Joins: summersault (~summersau@177.19.240.91)
[21:31:28] *** Quits: visl (visl@user/visl) (Ping timeout: 272 seconds)
[21:31:57] <mav`rik> afidegnum: I just codified what hodapp said earlier. Maybe it's that your environment was somehow caching the earlier implementation or something?
[21:31:58] *** Quits: SpeakerToMeat__ (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[21:32:01] <dale> afidegnum: Isn't mav`rik's code just your same code but with the loop removed?
[21:32:27] <afidegnum> yes, i guess,
[21:32:32] <afidegnum> but he added the print
[21:32:44] *** Joins: SpeakerToMeat__ (~Speaker@user/speakertomeat)
[21:32:45] <nedbat> dale: I have the same issue in coverage.py: https://github.com/pytest-dev/pytest-cov/issues/463   recursive code to deal with nested blocks. if someone makes a pathological Python file, it can fail with a RecursionError
[21:34:12] <nedbat> afidegnum: your original paste had the print: https://dpaste.org/WCjc
[21:34:19] <dale> nedbat: A real-life Python function with like 500 branches is more believable than nesting HTML 1,000 tags deep, isn't it.
[21:34:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:34:40] <afidegnum> lol, i'm just a bit confused, let me take time and check
[21:35:02] <nedbat> dale: hmm, not sure. but it could be surprising that if/elif/elif/elif is "deep nesting".
[21:35:04] <bjs> nedbat: afidegnum: the original code did but the original traceback didn't :)
[21:35:11] <nedbat> bjs: that too!
[21:36:44] *** Joins: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi)
[21:37:22] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Quit: Leaving.)
[21:38:47] *** Quits: rendar (~rendar@user/rendar) ()
[21:39:30] <madprops> how can I do something like 'import ../server'  ?
[21:39:34] <madprops> back directory
[21:39:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:40:23] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[21:40:48] <mav`rik> graingert: thanks for your help earlier. I've integrated some of that now and I'll be looking into the rest later.
[21:41:04] <madprops> nvm got it: from .. import server
[21:41:14] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[21:41:27] <SnoopJ> dale, I find the latter more believeable, there seem to be more things that generate HTML
[21:41:27] <graingert> mav`rik: ooh which bits?
[21:41:39] <SnoopJ> dale, or not "believeable" (they both are), but probably
[21:41:41] <SnoopJ> probable*
[21:41:56] *** Quits: eriluc (~eriluc@178.97.132.77.rev.sfr.net) (Quit: Connection closed)
[21:42:45] <mav`rik> graingert: anyio, filterwarnings = error, I'll be looking at the rest tomorrow
[21:43:49] <graingert> mav`rik: you'll probably want to set `addopts = --strict-markers --strict-config` and stuff too
[21:44:50] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[21:44:58] <graingert> mav`rik: https://github.com/pypa/build/pull/337/files#diff-fa602a8a75dc9dcc92261bac5f533c2a85e34fcceaff63b3a3a81d9acde2fc52R79
[21:47:10] *** Joins: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d)
[21:47:30] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[21:49:34] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[21:50:04] *** Joins: audiocat (~audio@2603-8081-1800-00ad-b311-75bb-b89d-d6f1.res6.spectrum.com)
[21:50:16] <gitesh> are there collection type and atomic type?
[21:50:56] *** Joins: visl (visl@user/visl)
[21:51:13] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[21:52:35] <mav`rik> graingert: thanks, added xfail and enabled tracemalloc too since I'm also getting an unclosed event loop warning at the end as well :/
[21:52:53] <nedbat> gitesh: there are types that hold references to other values, you could call those collections.  list, set, dict, tuple, etc.
[21:53:03] <graingert> mav`rik: you only want tracemalloc for one off debugging
[21:53:10] <graingert> not for generaly pytest runs
[21:53:38] <mav`rik> graingert: fair, mostly using this to work out where things come from for now, until I've worked it out. I'll remove the env var later.
[21:53:47] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[21:54:02] <graingert> gitesh: it's also tricky to nail down what an atomic type is here, eg is a str atomic? most people would say no
[21:54:32] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[21:54:33] <graingert> but what about an `int`? most people would say yes. But under the hood python ints can be as large as you want - just like str
[21:54:36] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (Quit: Ping timeout (120 seconds))
[21:54:41] <nedbat> graingert: i thought most people would say str is atomic
[21:54:54] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 272 seconds)
[21:54:55] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[21:54:57] <Yhg1s> nedbat: it depends on the context what 'atomic' means :)
[21:54:57] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[21:55:02] <nedbat> indeed
[21:55:07] <gitesh> i was trying to figure out, if that is, what is function is it atomic or collection data type
[21:55:34] <Yhg1s> gitesh: a function is not a collection. What does it mean for a type to be 'atomic'?
[21:55:36] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[21:55:36] <bjs> gitesh: Python doesn't distinguish all these types. They're just... objects
[21:55:36] *** Joins: P1RATEZ (~piratez@user/p1ratez)
[21:55:36] *** Quits: onu (~onufn@gibbs.uberspace.de) (Quit: %...%)
[21:55:46] <nedbat> in another arena, someone asked, "how can i tell if something is iterable," and I asked the two key questions: "What do you want to do if it isn't, and do you consider strings iterable?"
[21:55:49] *** Joins: onu (~onufn@gibbs.uberspace.de)
[21:55:49] <bjs> gitesh: there's no concept of a "primitive" or "atomic" object or anything like that.
[21:55:55] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[21:56:29] <mav`rik> bjs: in some ways I find that aspect of Java a horrible annoyance
[21:56:58] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Ping timeout: 240 seconds)
[21:57:00] <graingert> gitesh: https://nedbatchelder.com/text/names.html
[21:57:06] <masterkorp> Python is awesome <3
[21:57:08] <masterkorp> that is all
[21:57:09] <gitesh> https://runestone.academy/runestone/books/published/fopp/Sequences/intro-Sequences.html?highlight=atomic
[21:57:19] <nedbat> masterkorp: we agree :)
[21:57:36] <bjs> gitesh: I don't know why you like this book. It keeps using words without explanation or description in ways nobody else does.
[21:57:45] <graingert> but a str can be broken down into smaller parts
[21:58:02] <nedbat> graingert: the sentence is confusing. the author agrees with you.
[21:58:04] <supakeen> gitesh, atomic is a weird word in that sentence they *are* composed of smaller parts :)
[21:58:05] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[21:58:06] <graingert> and a float has an exponent and mantissa
[21:58:14] <bjs> gitesh: Python doesn't use the term "atomic" or "primitive". I can see what it's trying to say but... it's a book! it should just say it itself rather than leave it to me to interpret
[21:58:15] <supakeen> Oh. There I go being late and all.
[21:58:27] <graingert> nedbat: ?
[21:58:49] <bjs> graingert: it says "we've seen int, float and str" then it says "int and float are atomic"
[21:58:53] <bjs> implicitly leaving out str
[21:59:03] <Yhg1s> gitesh: this looks like a book that doesn't have a good view of Python.
[21:59:05] <bjs> then the _next_ sentence describes str
[21:59:06] <graingert> ah I didn't see the dot
[21:59:41] <graingert> anyway point stands, `int` is composed of a sequence of digits
[22:00:00] <mav`rik> graingert: ... ish.
[22:00:14] <bjs> graingert: well,  I mean I can see what the book is saying
[22:00:30] <bjs> and you can too you're just being pedantic :)
[22:00:48] <bjs> I think the book would really benefit from having more words to actually explain what it's trying to say, after all isn't that the point of a book?
[22:00:59] <graingert> what I'm trying to say is python doesn't really have a concept of primative types other than in the c api
[22:01:19] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 265 seconds)
[22:02:25] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:02:36] <graingert> I think this is the key concept gitesh :
[22:02:36] <graingert> > Python has a number of compound data structures each of which hold references to values: list elements, dictionary keys and values, object attributes, and so on.
[22:02:59] <graingert> something can be on the left hand side of an assignment or it cannot
[22:03:16] *** Quits: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com) (Remote host closed the connection)
[22:03:20] <graingert> and it's useful to know which ones can and which ones cannot
[22:03:28] <bjs> graingert: some_str[i] cannot be on the left-hand side of an assignment ;)
[22:03:38] <bjs> so maybe they are atomic!
[22:03:43] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 258 seconds)
[22:03:59] <graingert> ?
[22:04:13] <Yhg1s> some_tuple[0] can't be on the left hand side either :)
[22:04:20] <graingert> I'm pointing to a new delineation unrelated to atomic or primative
[22:04:28] <mav`rik> then we get into the joys of mutable vs. not, slice-assignment, name vs. mutation... etc.
[22:05:21] <Yhg1s> FWIW, I think the book should use far *fewer* words, and not try (and fail) to precisely describe all data types. It should just say "some objects hold other objects, we call those containers or collections" and be done with it.
[22:05:40] *** Quits: visl (visl@user/visl) (Ping timeout: 272 seconds)
[22:05:51] *** Quits: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[22:06:04] *** Quits: junktext (~junktext@109.201.152.179) (Remote host closed the connection)
[22:06:38] <mav`rik> and then things get _really_ ugly, a += 1 depends entirely on whether the object a supports __iadd__ or not as to the outcome
[22:06:51] *** Joins: Pickchea (~private@user/pickchea)
[22:07:33] <graingert> mav`rik: Yeah it's complicated but more important to know about than say, boxed/unboxed ints
[22:08:55] *** Quits: BinarySavior (~BinarySav@user/binarysavior) (Quit: BinarySavior has dropped the mic)
[22:09:26] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:10:19] *** Joins: BinarySavior (~BinarySav@user/binarysavior)
[22:12:10] <gitesh> isn't that weird that function is a data that can operate on any data
[22:12:36] *** Quits: BinarySavior (~BinarySav@user/binarysavior) (Client Quit)
[22:12:48] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:12:49] <gitesh> that can be a good point actually than weird
[22:13:10] *** Joins: BinarySavior (~BinarySav@user/binarysavior)
[22:13:23] <mav`rik> graingert: sure, understanding (for many users) why a = a + 1 can lead to a different outcome than a += 1 depending on the type of "a" (performance, memory usage, and outcome for objects that also held a reference to a before the addition occured) can be very confusing for a lot of users.
[22:13:30] *** Joins: JavaBean (~JavaBean@user/javabean)
[22:13:44] *** Joins: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098)
[22:14:16] <graingert> gitesh: Depends on your point of view. First class functions are very popular
[22:17:01] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[22:17:42] *** Quits: Nanobot567 (~Nanobot56@70-231-104-76.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 272 seconds)
[22:17:48] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[22:17:49] *** Quits: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com) (Quit: leaving)
[22:17:51] <gitesh> https://en.wikipedia.org/wiki/First-class_function
[22:17:56] *** Joins: Akuli (~Akuli@82-203-167-113.bb.dnainternet.fi)
[22:18:03] *** Quits: NeoCore (~neocore@89.40.183.16) (Quit: Leaving)
[22:18:40] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[22:19:10] *** Quits: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb) (Read error: Connection reset by peer)
[22:19:31] *** Joins: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at)
[22:19:33] *** Joins: georgios (~georgios@2a02:587:a02d:d058:9d2e:9329:74ac:e3fb)
[22:20:17] <bjs> gitesh: didn't we just have this conversation :)
[22:20:21] <bjs> gitesh: it's not weird to me!
[22:21:03] <gitesh> yeah i will read that again tomorrow, i will take break today as it was confusion in my mind since months or years
[22:21:12] <gitesh> it's really good read i got i think
[22:22:45] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[22:22:50] *** Quits: nemosaltat (~nemosalta@2607:fb90:ed26:6593:281f:a070:6380:8098) (Remote host closed the connection)
[22:25:55] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[22:25:57] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 245 seconds)
[22:26:01] <bjs> gitesh: I will say that the idea that functions/code/computation is a kind of data is not a new fancy one, it's a very old one (see also: von Neumann architecture);  maybe it just takes getting used to?
[22:26:26] <grym> bjs: let's assign numbers to _everything_
[22:26:32] <grym> and then watch the world burn :)
[22:26:43] *** Quits: audiocat (~audio@2603-8081-1800-00ad-b311-75bb-b89d-d6f1.res6.spectrum.com) (Ping timeout: 258 seconds)
[22:27:01] <grym> or, at least, whitehead's world
[22:27:20] <bjs> grym: really it's not about assigning numbers to everything but about saying that numbers and code are really the same kind of thing
[22:27:36] <grym> that too
[22:27:37] <bjs> (it's just that the obvious way to do that is to encode everything into a number...)
[22:27:43] <bjs> s/obvious/easiest/
[22:28:27] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 245 seconds)
[22:29:52] *** Joins: ramblebamble (~ramblebam@37.120.209.205)
[22:30:00] <grym> "but when you really do math in an abstract way, you're not counting bottlecaps, are you?" "i'm not counting anything" "that is a very modern position for you to take!"
[22:30:08] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[22:30:37] <graingert> grym: Godel numbers?
[22:31:06] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 240 seconds)
[22:31:19] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[22:31:26] <grym> graingert: that's where i was going, yes
[22:31:49] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[22:31:55] <bjs> thankfully on real computers you run out of numbers so we don't have to worry about such silly paradoxes
[22:32:06] <graingert> Godel also ran out of numbers afaik
[22:32:15] *** Joins: Guddu (~Guddu@67.73.235.228)
[22:32:43] <grym> no such thing, cranky old men from IBM notwithstanding :)
[22:33:48] <Guddu> Why does pip install of a wheel file still tries to connect to the internet? I have all the .whl files in a folder. and I am also specifying --find-links=<Path> of that folder.
[22:33:52] <graingert> I worked at IBM
[22:34:18] <graingert> Guddu: try using a shiv instead
[22:34:25] <grym> graingert: (i meant g.j. chaitin, who i deeply suspect you are not)
[22:34:50] <graingert> Yeah perhaps I'm not old enough either
[22:35:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:35:02] <Guddu> graingert, Just worked. If i provide the --no-index option that is.
[22:35:06] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[22:35:21] <graingert> Guddu: ?
[22:35:30] *** Joins: visl (visl@user/visl)
[22:35:33] <graingert> Guddu: probably to check for updates
[22:35:53] <graingert> Guddu: maybe ask in the pypa discord?
[22:36:11] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[22:36:17] <Guddu> graingert, Ignore package index (only looking at --find-links URLs instead).
[22:36:24] <Guddu> May be that's why it worked :-)
[22:36:34] <grym> graingert: (tl;dr: he is deeply sketched out by the existence of uncomputable numbers)
[22:37:05] <graingert> To be completely fair it's pretty unnerving
[22:37:11] <graingert> Also that there's so many of them
[22:37:34] <gcbirzan> are we talking about AWS bills here?
[22:38:30] <grym> graingert: no, \textbb{R}
[22:38:39] <grym> gcbirzan: ^
[22:38:54] *** Joins: cdown (~cdown@163.114.131.1)
[22:39:20] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[22:39:29] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Remote host closed the connection)
[22:39:38] *** Quits: pneff (~pneff@2a02:168:fedc:0:ecf6:d478:fb8e:fc4d) (Quit: WeeChat 3.2)
[22:39:46] *** Quits: visl (visl@user/visl) (Ping timeout: 240 seconds)
[22:40:16] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[22:41:32] *** Quits: ramblebamble (~ramblebam@37.120.209.205) (Quit: WeeChat 3.2)
[22:41:43] *** Joins: visl (visl@user/visl)
[22:42:06] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 276 seconds)
[22:42:42] <bjs> graingert: I don't think Goedel ran out of numbers,  he just used numbers as an encoding.  The actual numbers/encoding wasn't the interesting part it was that he was able to build a system that could encode self-referential statements
[22:43:06] <bjs> like with the von Neumann stuff, it's not really about the encoding itself but the existence of the encoding (and therefore the validity of the statement) that's interesting
[22:43:32] <graingert> bjs: He ran out of Godel Numbers
[22:43:49] <Guddu> When we run python inside a virtual environment, it complaints python: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory
[22:43:58] <mawk> gödel encoding is magic
[22:44:06] <AhmedAmerican> how to avoid unicode here? as the output include `\xa0` here https://bpa.st/Y4NA
[22:44:10] <bjs> graingert: no, the whole point is that he *didnt* run out. That you *can* find Goedel numbers of statements about themselves and the fact those numbers exist is what leads to the paradox.
[22:44:10] <Guddu> Does this mean that the LD_LIBRARY_PATH should always point to the base python install's LIB directory?
[22:44:21] <bjs> graingert: remember that the paradox is not that the statements can't exist, but that they do.
[22:44:29] <mawk> how graingert ? I thought he made new numbers everytime by taking powers of the old ones
[22:45:08] <mawk> prime powers
[22:45:16] <mawk> powers of primes I mean
[22:45:37] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[22:45:47] <mawk> the encoding itself is pretty clever though bjs, it's interesting in its own
[22:46:39] <bjs> mawk: oh sure yeah I guess I worded it badly. I just meant that there are many encodings you can choose from, and you have to be careful to do it to make it all work out,  but it's not a fact about the encoding
[22:46:50] <mawk> ah yeah indeed
[22:48:08] <mawk> Guddu I suppose yes
[22:48:12] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 252 seconds)
[22:48:14] <mawk> lowercase lib
[22:48:37] <graingert> AhmedAmerican: What do you mean avoid Unicode?
[22:49:24] *** Quits: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8) (Quit: Konversation terminated!)
[22:49:59] *** Joins: greedom (~greedom@2001:16b8:320e:5500:a881:d6bb:cfe:a7a8)
[22:50:05] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[22:50:09] <AhmedAmerican> graingert: trying to output it as it's on the site.  for example, currently i getting `'5.\xa0“Many of life’s` while the correct one should be `5. “Many of life’s`
[22:50:30] <AhmedAmerican> tried to play with `from_encoding` but nothing changed ! https://www.crummy.com/software/BeautifulSoup/bs4/doc/#encodings
[22:51:15] <mawk> a0 is \n no?
[22:51:20] <mawk> I forgot
[22:51:37] *** Joins: ubert (~Thunderbi@178.165.174.102.wireless.dyn.drei.com)
[22:52:15] <AhmedAmerican> mawk: print(u"\xa0")
[22:52:30] <nedbat> AhmedAmerican: you see that because you are printing a list of strings.  Print the individual strings instead.
[22:52:35] <graingert> \xa0 is actually non-breaking space in Latin1 (ISO 8859-1)
[22:53:00] <AhmedAmerican> let me try it
[22:53:02] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 252 seconds)
[22:53:08] <matsaman> 0a (not a0) is line feed
[22:53:10] <nedbat> AhmedAmerican: change pp(goal) to:   print("\n".join(goal))
[22:53:18] <mawk> ah yes
[22:53:25] <graingert> AhmedAmerican: What does the encoding header of the request say?
[22:53:38] <graingert> And what does the encoding of the html say?
[22:53:46] <matsaman> it's going to be uncommon that using '\n' won't be the least silly approach
[22:53:49] <nedbat> the data is decoded properly. it just needs str instead of repr
[22:53:54] *** Joins: trufas (~trufas@177.240.218.218)
[22:53:55] <graingert> Oh I see
[22:53:57] <matsaman> oh you're decoding weird data, my sympathies
[22:54:01] *** Joins: Gudddu (~Guddu@67.73.235.228)
[22:54:22] <nedbat> it's not weird data, it's just a non-breaking space.
[22:54:35] <mawk> if it's latin1 having it decoded shouldn't show latin1 encoded characters right?
[22:54:40] <mawk> even with repr
[22:54:57] <mawk> it should show the utf8 equivalent
[22:55:25] <nedbat> mawk: it's a unicode string.  '106.\xa0“You’re only human.'
[22:55:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:55:57] *** foo_ is now known as foo
[22:56:03] <AhmedAmerican> response encoding is `UTF-8`
[22:57:03] <AhmedAmerican> nedbat: `print("\n".join(goal))` works well
[22:57:17] *** Joins: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:2d93:6384:ac8:823d)
[22:57:26] <AhmedAmerican> :D then I've to join it within my list comp..
[22:57:27] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[22:57:32] *** Quits: Guddu (~Guddu@67.73.235.228) (Ping timeout: 256 seconds)
[22:58:09] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 258 seconds)
[22:59:51] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:01:02] *** Joins: JavaBean (~JavaBean@user/javabean)
[23:02:38] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[23:02:40] <AhmedAmerican> graingert: how do you quickly recognize the ISO according to your previous answer `\xa0 is actually non-breaking space in Latin1 (ISO 8859-1)`
[23:04:17] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Quit: ZNC - https://znc.in)
[23:04:20] <matsaman> AhmedAmerican: could use 'unicodedata'
[23:04:24] <phy1729> Why aren't typing.Hashable and Sized deprecated like the rest of the collections.abc aliases?
[23:05:11] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[23:05:50] *** Quits: Nanobot567 (~Nanobot56@2602:304:6e76:84c0:2d93:6384:ac8:823d) (Ping timeout: 272 seconds)
[23:06:21] *** Quits: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[23:06:42] <graingert> AhmedAmerican: I googled it
[23:07:28] <graingert> phy1729: Aren't they?
[23:07:58] <phy1729> graingert: https://docs.python.org/3/library/typing.html#typing.Hashable
[23:09:19] *** Joins: mike18 (~geri@216.200.232.252)
[23:09:34] <mike18> hi, is there a way to format the logging output for my flask app? https://ideone.com/6ZzyVG
[23:09:47] <mike18> i need to replace \n with html ...
[23:11:36] <graingert> phy1729: hmm
[23:12:27] <graingert> phy1729: It's not generic https://github.com/python/cpython/blob/3.9/Lib/typing.py#L1664
[23:12:42] <mike18> <br> for line break...
[23:12:46] <phy1729> Right, but they're basically the same as all the other aliases
[23:12:50] *** Joins: mexen (uid495612@user/mexen)
[23:12:53] <phy1729> https://github.com/python/cpython/blob/main/Lib/typing.py#L2026
[23:12:54] <mike18> but is there something i can use and dont need to rebuild?
[23:14:51] <graingert> Seems like it was never needed in the typing
[23:14:56] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[23:15:16] *** Quits: {HD} (~{HD}@102.165.16.252) (Ping timeout: 265 seconds)
[23:17:00] <graingert> module
[23:17:22] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[23:17:48] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:17:57] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:18:19] <phy1729> right; just seems odd to leave them
[23:19:03] *** Joins: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at)
[23:19:21] *** Joins: magla (~gelignite@55d4f84b.access.ecotel.net)
[23:19:51] *** Joins: {HD} (~{HD}@191.96.185.181)
[23:20:19] <graingert> phy1729: You'll have to ask ambv
[23:20:30] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[23:21:15] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[23:22:21] *** Joins: henistein (~henistein@2001:8a0:c1b3:6b01:2c0c:a643:93bf:b054)
[23:22:57] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[23:25:18] *** Quits: brylie (~Thunderbi@88-114-218-113.elisa-laajakaista.fi) (Quit: brylie)
[23:25:22] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[23:25:41] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[23:26:15] <AhmedAmerican> So, having some name related bike sheding. So I have C++ code paths for List[SomeClass] and SomeClass, but not sure how to call the two cases. Thinking of calling the former the "Iterator" case and the later the "Singleton" case but somehow Singleton has a name alias with an unfortunate C++ design pattern. Any thought on what to call the single object case?
[23:26:59] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:27:22] <mike18> hi, is there a way to format the logging output for my flask app? https://ideone.com/6ZzyVG ... i need to replace \n with <p> for html....
[23:28:04] *** Joins: Quaking (~Quaking@2601:245:c500:7fa0:80ae:dcee:2f42:8d16)
[23:29:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[23:29:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[23:30:34] *** Joins: c10l (~c10l@89.34.167.207)
[23:32:25] <ammar2> AhmedAmerican: when you say "case" are these two separate functions with those signatures?
[23:32:34] <ammar2> or like a conditional in the code
[23:32:37] <matsaman> mike18: find out what type your data is, then ask how to replace characters in that type
[23:32:39] *** Quits: Quaking (~Quaking@2601:245:c500:7fa0:80ae:dcee:2f42:8d16) (Ping timeout: 258 seconds)
[23:32:45] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[23:32:53] <mike18> i could implement a loggingclass
[23:33:06] <mike18> and add "<p"> for the new line
[23:33:17] <mike18> i wonder if there is a lib i can use?
[23:33:20] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:33:37] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[23:33:48] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:35:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:37:32] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[23:37:44] *** Quits: ckdcreation (~ckdCreati@147.55.133.129) (Read error: Connection reset by peer)
[23:38:02] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[23:38:30] <gcbirzan> Why do you want to log HTML?
[23:39:54] <sartan> logging.basicConfig(format='<p>%(asctime)% - %(message)%').. ?
[23:40:09] <sartan> log to stdout and stream to web wherever?
[23:40:37] <sartan> you can also write custom callbacks for logging handlers
[23:42:16] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[23:45:32] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 245 seconds)
[23:46:22] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 272 seconds)
[23:46:39] *** Joins: ramblebamble (~ramblebam@37.120.209.205)
[23:48:12] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[23:48:18] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[23:49:07] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[23:49:08] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 258 seconds)
[23:49:14] <syllin> do what you like, but typically logging is used for diagnostics. for presenting stuff to a user who cares about formatting, often people will have custom application logic for that
[23:49:43] <mike18> hi im running a flask app and see: WARNING:werkzeug: * Running on all addresses. WARNING: This is a development server. Do not use it in a production deployment. INFO:werkzeug: * Running on http://172.17.0.2:5000/ (Press CTRL+C to quit) .... why does it say its a develooment server?
[23:49:59] <mike18> i mean flask server
[23:50:03] <ramblebamble> Hi there! I have a rather peculiar question, #pytorch is almost non existing so I post my question here, I have a custom data-loader, I am loading audiofiles, which I split up into chunks. the files are of different length, If I were to use a batch size greater than one I would be stuck juggeling various files and their state, returning the datachunks is possible but I do not want everythin to
[23:50:05] <ramblebamble> reside in memory, and operating on it sequentially proves cumbersome as it will not allow index based access but only sequential access
[23:50:10] <syllin> make18: because it is :). dont confuse your web framework with your web server
[23:50:16] <ramblebamble> do you maybe have some hints as to who you would approach this problem?
[23:50:49] <gitesh> what is an object?
[23:51:03] <ramblebamble> mike18 in prod you would usually use s.th. like gunicorn to run your app
[23:51:13] <ramblebamble> gitesh, the instance of a class
[23:51:21] <mike18> or have a .flaskenv file?
[23:51:32] <ramblebamble> or whatever it is that you desire *SCNR*
[23:51:41] <mike18> hu?
[23:51:49] <mike18> whats gunicorn ?
[23:51:58] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[23:52:06] <graingert>  gitesh it's a type, you can check with isinstance(object, type)
[23:52:08] <ramblebamble> mike18, https://gunicorn.org/
[23:52:21] <mike18> i need a wsgi server?
[23:52:28] <mike18> from gevent.pywsgi import WSGIServer ?
[23:52:30] <mike18> that thing?
[23:52:36] <graingert> mike18: Depends what you want
[23:52:44] <mike18> just not see the warning :)
[23:52:44] <graingert> mike18: gunicorn is pretty great
[23:52:59] *** Joins: visl_ (visl@user/visl)
[23:53:00] <graingert> mike18: where are you seeing the warning?
[23:53:05] <ramblebamble> mike18 then close your eyes, warning are ther efor a reason :)
[23:53:07] <mike18> in the log output
[23:53:12] <bjs> gitesh: in "object-orientated" programming an object objects are the instances of classes,  and the object has attributes and methods
[23:53:14] <graingert> mike18: of what
[23:53:21] <mike18> python app
[23:53:26] <graingert> mike18: where
[23:53:31] <mike18> when i start the python server
[23:53:35] <mike18> here on my local machine
[23:53:43] <graingert> Oh just ignore it then
[23:53:45] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[23:53:56] <graingert> mike18: it's supposed to do that
[23:54:04] <mike18> do what?
[23:54:09] <graingert> mike18: warn
[23:54:11] <mike18> the warning you mean?
[23:54:11] <mike18> oh
[23:54:22] <graingert> If it's on your local machine for development
[23:54:28] <mike18> what does it mea - its less secure because of that?
[23:54:30] <graingert> It's supposed to print that warning
[23:54:45] <graingert> mike18: it's good for one or two concurrent users
[23:54:53] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 258 seconds)
[23:55:01] <mike18> oh - so its slow when i run it on my server?
[23:55:12] <graingert> And it's got a built in debugger that people can use to run code on your server
[23:55:15] <gitesh> within how many data an operation is performed?
[23:55:16] <bjs> gitesh: even simple ints have attributes and methods.  Sometimes the attributes and methods are hidden though: https://bpa.st/RU2Q
[23:55:25] <mike18> the debugger is off atm
[23:55:28] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[23:55:30] <bjs> gitesh: what do you mean by that  question? "within how many data"?
[23:55:46] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[23:55:49] <graingert> gitesh: I think all operations require data
[23:56:02] *** Quits: visl (visl@user/visl) (Ping timeout: 258 seconds)
[23:56:10] <gitesh> i meant within how many objects
[23:56:18] *** Quits: GamnorDimsword (~chris@51.148.134.136) (Quit: WeeChat 3.2)
[23:56:20] <bjs> gitesh: probably every object
[23:56:30] <tomboy64> i know that i can have binary data represented as \x escapes via repr(). but how can i have everything inside represented as hex numbers? e.g. also what's recognised as valid ascii chars?
[23:57:01] <bjs> gitesh: some objects might not have any (or at least not any interesting) methods,  some might not have any interesting attributes... I guess,  but almost every object you've ever used does.
[23:57:02] <tomboy64> turning it into a regular string would be fine
[23:57:03] <graingert> gitesh: unary operators use one object, binary operators need two
[23:57:17] <graingert> It depends on the operator
[23:57:33] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[23:57:35] <gitesh> yeah
[23:57:51] <graingert> gitesh: what made you think of this question?
[23:58:31] <ramblebamble> tomboy64 ''.join([hex(ord(c)) for c in "hello"])
[23:58:36] <gitesh> graingert: I am thinking a function it takes two input that is 3 datas
[23:58:43] <gitesh> s/it/if
[23:58:43] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[23:58:44] *** visl_ is now known as visl
[23:58:55] <tomboy64> nice one, thanks mr doubleramble :)
[23:59:06] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[23:59:13] <graingert>  gitesh I'm not understanding
[23:59:25] <ramblebamble> de nada
