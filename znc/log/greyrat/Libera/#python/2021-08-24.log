[00:00:18] *** Joins: besnn (~besnn@user/besnn)
[00:00:39] *** Joins: kmh_ (~kmh@p2e5117f2.dip0.t-ipconnect.de)
[00:01:08] <alguien> ChrisWarrick, because https://www.oreilly.com/library/view/fluent-python/9781491946237/ch04.html#idm139636560305520 promises that "ß" becomes “ss” and I don't see how one codepoint could become two there
[00:01:21] *** Joins: fikran (~fikran@user/fikran)
[00:01:39] *** Parts: ChrisEnglish (~Chris@185.215.215.245) ()
[00:02:11] <ChrisWarrick> alguien: why couldn’t it become two? there are lookup tables involved with case conversions, and nothing is stopping them from mapping one character to many.
[00:02:32] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:03:02] *** Joins: derelict (~derelict@user/derelict)
[00:03:03] <ChrisWarrick> alguien: https://www.unicode.org/Public/13.0.0/ucd/CaseFolding.txt
[00:03:17] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[00:03:46] *** Parts: chris_99 (uid26561@id-26561.tooting.irccloud.com) ()
[00:07:18] <alguien> That's exactly what I'm looking for, thanks! Is _PyUnicode_ExtendedCase a lookup table though? Looks like its result is assigned to a single element of res
[00:09:47] *** Quits: daoudr_ (~daoudr@178.197.213.56) (Ping timeout: 240 seconds)
[00:09:54] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:09:55] <aphysically> whoa memoization is interesting
[00:10:44] <aphysically> is @cache of an instance method local to an instance?
[00:10:46] <aphysically> I guess I can just test
[00:11:25] *** Joins: koperak (~koperak@user-5-173-139-43.play-internet.pl)
[00:11:25] *** Quits: koperak (~koperak@user-5-173-139-43.play-internet.pl) (Read error: Connection reset by peer)
[00:12:04] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[00:12:19] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[00:12:29] <rama> nedbat: i chatted with a colleague about the idea, they stated that its to prevent attributes from being partially initialized.
[00:13:16] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:13:51] <ChrisWarrick> alguien: res is the array with the output of casefolding a single character, note there's also a for loop
[00:14:10] <SnoopJ> aphysically, the cache is created at decorator call time, which is when the method is being defined. I believe the cache is shared between instances.
[00:14:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:14:19] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:14:24] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[00:14:33] *** Lord_of_Life_ is now known as Lord_of_Life
[00:15:56] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[00:16:15] <aphysically> huh that's a shame
[00:16:29] <alguien> ChrisWarrick, apparently my eyes have not yet adjusted to C, it's been a while, thanks
[00:16:52] <ChrisWarrick> alguien: yeah, it can be intimidating sometimes
[00:17:11] <alguien> ChrisWarrick, been looking for what you linked for hours, thanks :)
[00:17:29] <alguien> (the unicode doc)
[00:18:23] *** Quits: venue (~venue@user/venue) (Quit: was tired)
[00:19:29] <SnoopJ> aphysically, oh, but I forgot that `self` plays into this. So it'll be shared, yes, but each instance basically has its own subspace of that cache because of this
[00:19:40] *** Quits: pro_z (~pro_z@37.214.45.81) (Ping timeout: 240 seconds)
[00:19:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:20:03] <aphysically> oh that's not so bad, so it's just a memory leak but not impossible to use together
[00:20:09] <SnoopJ> it's not a "memory leak," no
[00:20:21] <SnoopJ> an infinite cache can use an arbitrary amount of memory, though
[00:20:29] <aphysically> err, I just mean
[00:20:37] <aphysically> if I clear an instance the cache won't clear
[00:21:04] <SnoopJ> the cache will hold onto that stuff cached on that instance's behalf until all instances have disappeared, if that's what you mean
[00:21:15] *** Joins: Lope (~lope@user/lope)
[00:21:22] *** Quits: mei (~mei@user/mei) (Ping timeout: 258 seconds)
[00:21:23] <Lope> running debian bullseye
[00:21:33] <Lope> when I type python, I get command not found
[00:21:39] <Lope> but I do have python3 installed
[00:22:12] <Lope> `python3 --version` shows it's installed.
[00:22:28] <Lope> Do I need to somehow symlink python to python3 in /usr/sbin or whatever?
[00:22:36] *** Parts: brownan (~brownan@2001:470:69fc:105::e01b) ()
[00:22:46] <nedbat> rama: hmm, that's an interesting angle.  But "partially initialized" would only happen if an exception happened in __init__.  presumably, the exception would cause the object to be unused.
[00:22:48] <SnoopJ> aphysically, if you wanted it to be truly isolated per-instance, you'd probably want to do something like `self.method = cache(self.method)` in __init__ or maybe write your own decorator
[00:22:54] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 250 seconds)
[00:23:23] *** Joins: aeadio (~aead@user/aead)
[00:23:36] <SnoopJ> Lope, you can install the python-is-python3 package which basically does that for you, or use update-alternatives.
[00:23:44] *** Quits: aeadio (~aead@user/aead) (Client Quit)
[00:23:47] <Lope> SnoopJ, ur my hero.
[00:23:49] <SnoopJ> (or just use `python3` instead of `python`)
[00:24:21] *** Quits: jug (~jug@user/jug) (Quit: WeeChat 3.2)
[00:24:53] *** Joins: oriba (~oriba@dynamic-077-013-016-203.77.13.pool.telefonica.de)
[00:25:11] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:ffcb:261e:d71f:6f71) (Ping timeout: 250 seconds)
[00:26:15] <aphysically> SnoopJ: https://bugs.python.org/issue19859 yeah ok
[00:26:18] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:2829:2f58:51c5:3a2c)
[00:26:38] <aphysically> so even when I no longer have a reference to an instance with a cached instance method, the instance will be kept alive for the lifetime of the program
[00:27:17] <aphysically> but because of 'self' at least we get no conflicts between instances
[00:27:18] <SnoopJ> there will be a reference in the cache, and it only takes one to keep an object alive
[00:27:26] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[00:27:36] <aphysically> yeah, okay
[00:29:06] *** Joins: nips_ (~nips@abv84.internetdsl.tpnet.pl)
[00:29:24] *** Quits: computeiro (~Wender@189.37.66.42) (Ping timeout: 250 seconds)
[00:29:31] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 250 seconds)
[00:29:40] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Ping timeout: 240 seconds)
[00:31:27] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 240 seconds)
[00:31:47] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) (Client Quit)
[00:32:48] *** Joins: qlixed (~qlixed@181.44.129.13)
[00:33:25] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[00:33:25] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 250 seconds)
[00:34:57] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[00:35:22] <mike18> hi how can i output all python logging data to a text file? make run > out.txt seems not to foward all logging data to that file...
[00:36:31] *** Joins: MikZyth (~MikZyth@188.65.242.202)
[00:38:14] *** Joins: computeiro (~Wender@189.37.66.42)
[00:41:00] *** Joins: Naan` (~Naan@user/naan)
[00:45:08] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Quit: Haxxa flies away.)
[00:46:16] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[00:46:39] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:47:07] <stemid_> mike18: try redirecting both stderr and stdout. you can redirect stderr to stdout in bash like this I believe 2>&1
[00:47:25] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[00:47:37] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[00:47:41] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[00:47:41] <Wooble> probably better to just configure the logger to log to a file...
[00:47:49] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) ()
[00:48:03] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[00:48:15] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:48:24] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:49:18] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[00:53:15] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:53:35] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) (Client Quit)
[00:53:38] *** Joins: gruuf (~gruuf@94.31.99.29)
[00:53:40] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860)
[00:53:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[00:54:08] *** Joins: thiras (~thiras@user/thiras)
[00:54:13] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[00:54:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:54:47] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 240 seconds)
[00:55:34] *** Joins: emika2 (~emika@185.207.249.215)
[00:55:47] *** Quits: emika (~emika@83.136.182.157) (Ping timeout: 240 seconds)
[00:55:47] *** emika2 is now known as emika
[00:57:04] <rama> nedbat: I was thinking if the exception was raised during __init__ it seems unlikely that the instance would continue to live on within the runtime...
[00:57:15] <nedbat> rama: yes, exactly.
[00:57:41] <nedbat> rama: the idea of waiting to assign any attributes until the end seems like defending against a problem that doesn't happen.
[00:57:54] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:59:06] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[01:00:26] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860) (Read error: Connection reset by peer)
[01:00:27] *** Joins: txtsd (~txtsd@user/txtsd)
[01:00:45] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[01:00:49] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860)
[01:02:38] *** Joins: orbatos (~orbatos@user/orbatos)
[01:02:43] *** Quits: orbatos (~orbatos@user/orbatos) (Remote host closed the connection)
[01:03:07] *** Joins: orbatos (~orbatos@user/orbatos)
[01:04:23] <mike18> stemid_: make run >> out.txt 2>&1
[01:04:25] <mike18> like that?
[01:05:40] *** Quits: the-mask (~the-mask@user/the-mask) (Ping timeout: 240 seconds)
[01:07:17] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[01:07:25] *** Quits: rany (~rany@user/rany) (Ping timeout: 252 seconds)
[01:07:46] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[01:09:00] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:09:27] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:2829:2f58:51c5:3a2c) (Ping timeout: 240 seconds)
[01:09:35] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[01:09:41] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860) (Remote host closed the connection)
[01:10:33] *** Joins: stlndks (i.sty@177.201.3.195)
[01:10:58] *** Quits: MacGyver (~macgyver@user/macgyver) (Ping timeout: 240 seconds)
[01:11:51] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860)
[01:12:20] *** Quits: knipster5 (~knipster@user/knipster) (Remote host closed the connection)
[01:12:47] *** Joins: rany (~rany@user/rany)
[01:12:58] *** Joins: MacGyver (~macgyver@user/macgyver)
[01:13:16] *** Joins: knipster5 (~knipster@user/knipster)
[01:14:27] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 240 seconds)
[01:14:58] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[01:15:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[01:15:38] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[01:15:42] *** Quits: tx8r (~tx8r@gateway/tor-sasl/tx8r) (Quit: Leaving)
[01:17:08] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[01:19:09] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[01:20:21] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[01:21:57] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[01:22:02] *** Quits: Bronto22 (~mennoh@84.86.247.193) (Quit: Konversation terminated!)
[01:22:49] *** Quits: Lope (~lope@user/lope) (Ping timeout: 250 seconds)
[01:23:51] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:24:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:24:52] *** Quits: hyper_dave (~hyper_dav@197.156.86.185) (Ping timeout: 250 seconds)
[01:26:43] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[01:26:47] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[01:30:19] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[01:32:06] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[01:33:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[01:33:15] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:35:05] *** Quits: d0ku (~d0ku@178.43.19.40.ipv4.supernova.orange.pl) (Ping timeout: 248 seconds)
[01:35:17] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[01:36:10] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 240 seconds)
[01:37:26] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[01:37:52] *** Quits: gitly (~gitly@148.252.128.183) (Ping timeout: 250 seconds)
[01:37:56] *** Joins: srhm (~srhm@user/srhm)
[01:39:47] *** Joins: gitly (~gitly@148.252.132.121)
[01:40:03] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[01:40:21] *** Joins: Fiji (~Fiji@user/fiji)
[01:40:23] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[01:41:00] *** Quits: user3456 (user3456@user/user3456) (Ping timeout: 272 seconds)
[01:41:02] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[01:41:10] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 244 seconds)
[01:41:14] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[01:41:29] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[01:41:47] *** Joins: user3456 (user3456@user/user3456)
[01:41:48] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) (Remote host closed the connection)
[01:41:50] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[01:42:12] *** Quits: toine42 (~antoine@2001:41d0:e:41f::1) (Ping timeout: 250 seconds)
[01:42:54] *** Quits: jan6 (jan6@tilde.team/user/jan6) (Ping timeout: 272 seconds)
[01:42:58] *** Quits: jocke-l (jocke-l@a.x0.is) (Ping timeout: 240 seconds)
[01:43:05] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[01:43:13] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[01:43:40] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 240 seconds)
[01:43:45] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[01:43:55] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:44:04] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[01:45:01] <Fiji> is there a way to configure the CA bundle path with an environment variable similar to what requests does? i see this method, but nothing about possible env variables i could use: https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_default_verify_paths
[01:45:07] *** Joins: jocke-l (jocke-l@a.x0.is)
[01:45:27] *** Quits: rany (~rany@user/rany) (Ping timeout: 240 seconds)
[01:45:36] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[01:45:47] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:45:57] *** Quits: bluesmonk (uid318026@id-318026.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[01:46:07] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[01:46:31] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:47:28] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:558e:d5c8:f527:d726)
[01:47:53] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[01:49:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:49:54] *** Joins: wender (~Wender@191.54.171.209)
[01:50:54] <rama> Fiji: does OpenSSL specify a ENV var that can be overriden for defaults?
[01:51:26] <Fiji> rama, good question, let me check. it probably does
[01:52:17] *** Quits: computeiro (~Wender@189.37.66.42) (Ping timeout: 250 seconds)
[01:52:18] *** Joins: Kvothe (~weechat@user/elodin)
[01:52:58] <Fiji> changing that may brake other things though, heh :S
[01:53:21] <jean-luc> break*
[01:53:25] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:56:17] <Fiji> jean-luc, it's the end of the work day, give me a break!
[01:56:19] <Fiji> :)
[01:56:27] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 240 seconds)
[01:57:09] *** Joins: alguien (~alguien@user/alguien)
[01:57:21] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[01:57:39] *** Quits: orbatos (~orbatos@user/orbatos) (Remote host closed the connection)
[01:57:47] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 240 seconds)
[01:58:01] <jean-luc> its all about spreading the knowledge, nothing personal
[01:58:16] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[01:59:06] <Fiji> rama, that seemed to work, thanks for the heads up. and thanks jean-luc for the vocab fix :D
[01:59:06] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[01:59:25] <jean-luc> :p
[01:59:53] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[02:00:00] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[02:00:13] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:00:27] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[02:00:27] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[02:02:16] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Quit: Leaving)
[02:02:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:02:49] *** Quits: MikZyth (~MikZyth@188.65.242.202) (Ping timeout: 248 seconds)
[02:03:00] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[02:04:44] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[02:04:57] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[02:05:56] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[02:06:01] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[02:06:22] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[02:06:25] *** Joins: khrbt (~znc@user/khrbt)
[02:06:47] *** Quits: bilb_ono_ (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 240 seconds)
[02:06:56] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Client Quit)
[02:06:59] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[02:07:01] *** Quits: oriba (~oriba@dynamic-077-013-016-203.77.13.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:07:15] *** Joins: oriba (~oriba@dynamic-077-013-016-203.77.13.pool.telefonica.de)
[02:07:48] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[02:08:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[02:09:11] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 250 seconds)
[02:09:32] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:09:39] *** Joins: Kvothe (~weechat@user/elodin)
[02:10:43] *** Joins: fikran (~fikran@user/fikran)
[02:10:51] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:558e:d5c8:f527:d726) (Quit: Client closed)
[02:10:55] *** Quits: W1seguy (W1seguy@d51A480B1.access.telenet.be) (Remote host closed the connection)
[02:11:04] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[02:11:37] *** Joins: noarb (~noarb@user/noarb)
[02:13:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[02:16:25] *** Joins: W1seguy (W1seguy@d51a480b1.access.telenet.be)
[02:17:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:17:55] *** Joins: MikZyth (~MikZyth@188.65.242.202)
[02:23:53] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:25:10] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[02:26:50] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Ping timeout: 250 seconds)
[02:27:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:30:06] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:30:14] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[02:30:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:30:28] *** Quits: Pandadub (~Barones@2804:48dc:8500:0:258c:65bf:a587:ae6b) (Quit: Leaving)
[02:31:11] *** Joins: minip (minip@user/minip)
[02:33:08] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[02:33:46] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[02:34:23] *** Joins: ice9 (~ice9@user/ice9)
[02:34:58] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[02:35:27] *** Quits: oriba (~oriba@dynamic-077-013-016-203.77.13.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:37:33] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[02:37:38] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Client Quit)
[02:37:47] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860) (Ping timeout: 250 seconds)
[02:37:58] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[02:38:07] *** Joins: noarb (~noarb@user/noarb)
[02:38:22] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:40:35] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[02:42:41] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:44:52] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[02:46:18] *** Joins: autistic (~linguist@170.84.56.192)
[02:50:03] *** Joins: ckdCreations (~ckdCreati@147.55.133.133)
[02:50:03] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[02:50:54] *** Joins: d0ku (~d0ku@37.30.113.168.nat.umts.dynamic.t-mobile.pl)
[02:51:12] *** Joins: autistic (~linguist@170.84.56.192)
[02:51:39] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[02:52:32] *** Joins: koperak (~koperak@79.191.34.223.ipv4.supernova.orange.pl)
[02:53:34] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[02:53:47] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[02:53:58] *** Joins: DocMors (~DocMors@web.crypticity.net)
[02:54:17] *** Joins: mago (~mago@87.125.54.129)
[02:57:13] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[02:59:01] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 250 seconds)
[02:59:47] *** Quits: d0ku (~d0ku@37.30.113.168.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[03:00:10] <mago> Hi I have a GUI for a python script..
[03:00:14] <mago> https://github.com/breuerfelix/instapy-gui
[03:00:39] <mago> I have added a method to the underlying script and would like it reflected/showing in the GUI..
[03:00:42] <mago> How do I do that?
[03:02:03] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[03:02:15] <mago> Or at least i would like to test the method within the python console.. How can i test that method within it?
[03:02:47] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:03:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:03:27] *** Joins: twofingersneat_ (~twofinger@174-080-036-228.res.spectrum.com)
[03:04:07] <summonner> that's a very specific question for a very specific framework. I think you'd have better luck asking the question where the github README mentions
[03:04:12] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 245 seconds)
[03:04:33] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:04:34] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Ping timeout: 252 seconds)
[03:05:47] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 240 seconds)
[03:06:13] <mago> I tried that option summonner...
[03:06:48] <mago> Their support channel is quiet and silent..
[03:07:10] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[03:08:12] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[03:09:49] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[03:11:51] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[03:14:02] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:14:26] *** Joins: ogis_ (~Android@p1927250-omed01.osaka.ocn.ne.jp)
[03:15:14] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[03:15:30] *** Joins: srhm (~srhm@user/srhm)
[03:16:09] *** Quits: srhm (~srhm@user/srhm) (Client Quit)
[03:16:24] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[03:17:42] *** Quits: mago (~mago@87.125.54.129) (Quit: Client closed)
[03:18:19] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Ping timeout: 252 seconds)
[03:21:01] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Read error: Connection reset by peer)
[03:21:23] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[03:21:32] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[03:21:45] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[03:22:16] *** Joins: cjb (~cjb@user/cjb)
[03:23:40] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[03:24:00] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:24:28] *** Quits: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl) (Ping timeout: 250 seconds)
[03:25:07] *** Quits: jan6 (jan6@tilde.team/user/jan6) (Ping timeout: 240 seconds)
[03:25:39] *** Joins: aead (~aead@user/aead)
[03:26:52] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[03:26:56] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[03:27:12] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[03:29:38] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:30:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:32:52] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[03:33:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:33:41] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Ping timeout: 250 seconds)
[03:33:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[03:34:26] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:35:32] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Quit: Leaving)
[03:36:02] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[03:36:10] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[03:36:29] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[03:36:35] *** Joins: srhm (~srhm@user/srhm)
[03:36:39] *** Joins: georgios (~georgios@user/georgios)
[03:37:25] *** Quits: aead (~aead@user/aead) (Quit: aead)
[03:39:41] *** Quits: gruuf (~gruuf@94.31.99.29) (Quit: WeeChat 3.1)
[03:40:00] *** Joins: orion (~orion@user/orion)
[03:40:33] <orion> Hello. A library I am working with returns multiprocessing ApplyResults, but I am working in an asyncio environment. How can I convert between the two?
[03:42:18] *** Quits: brelod (~me@87.74.198.187) (Quit: leaving)
[03:42:45] *** Joins: linguist (~linguist@170.84.56.192)
[03:44:10] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[03:44:41] *** Joins: srhm (~srhm@user/srhm)
[03:45:06] *** Joins: khrbt (~znc@user/khrbt)
[03:45:27] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 240 seconds)
[03:48:17] *** Quits: kofuyu (~kofuyu@user/kofuyu) (Quit: Ping timeout (120 seconds))
[03:48:47] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[03:50:03] <greatgatsby> is there a way to use subprocess to background a process without resorting to Popen?
[03:50:38] <Yhg1s> greatgatsby: practically everything in the subprocess module "resorts to Popen", so I'm not sure what you're looking for.
[03:50:50] *** Joins: kofuyu (~kofuyu@user/kofuyu)
[03:51:15] <Yhg1s> orion: if you don't control what creates the AsyncResult, call the 'wait' method in a separate thread.
[03:51:15] *** Joins: Gerula (~Gerula@user/gerula)
[03:51:18] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[03:51:27] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:51:30] <Yhg1s> orion: or, if you prefer, call the 'wait' method with a very short timeout.
[03:51:33] <orion> Thank you.
[03:51:53] <greatgatsby> I mean without using the "low level" Popen myself, just making sure I'm not overlooking some convenience feature of subprocess.run to detach
[03:51:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[03:52:03] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[03:52:22] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[03:52:25] *** Joins: imp (~imp@192-141-191-229.alternativaip.net.br)
[03:52:47] *** Joins: srhm (~srhm@user/srhm)
[03:52:49] <Yhg1s> greatgatsby: subprocess.run is explicitly for the case where you do want to wait on the result, yes. If you don't want to wait, the usual thing to do is use subprocess.Popen. It's as high-level as it can possibly be while giving you the option of not waiting for the result.
[03:52:59] <Yhg1s> greatgatsby: is there a particular thing that makes it harder to use than you would want?
[03:53:00] *** Joins: venue (~venue@user/venue)
[03:53:12] *** Quits: Akuli (~Akuli@213.216.210.73) (Quit: Leaving)
[03:53:27] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:54:31] <greatgatsby> nope, Popen will work fine if that's the correct method.  Thanks.
[03:55:33] *** Joins: Wulf (~Wulf@user/wulf)
[03:55:43] *** Quits: wender (~Wender@191.54.171.209) (Ping timeout: 252 seconds)
[03:56:40] *** Quits: gmcastil (~gmcastil@50-206-38-118-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[03:57:56] *** Joins: rama (~rama@2601:640:109:4b5b:487e:4069:4475:9655)
[03:58:04] *** Joins: arinov (~arinov@213.194.126.155)
[03:59:28] *** Joins: trace987 (~trace@95.90.106.112)
[03:59:32] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[03:59:59] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[04:02:16] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[04:02:16] *** Quits: linguist (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[04:02:51] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[04:03:09] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Ping timeout: 250 seconds)
[04:03:26] *** Joins: linguist (~linguist@170.84.56.192)
[04:03:46] *** Quits: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net) (Quit: leaving)
[04:03:52] *** Joins: mutandis (~mut@c-73-129-211-144.hsd1.md.comcast.net)
[04:04:01] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[04:04:06] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[04:04:20] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[04:04:23] *** Joins: derpadmin (~derpadmin@cloudbase2.200013.net)
[04:04:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[04:04:45] *** Quits: mutandis (~mut@c-73-129-211-144.hsd1.md.comcast.net) (Client Quit)
[04:04:55] *** Joins: pyeverything (~mona@c-66-31-107-137.hsd1.ma.comcast.net)
[04:04:59] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[04:05:09] *** Joins: hyper_dave (~hyper_dav@197.156.86.185)
[04:05:21] <pyeverything> hi you know where I can ask IRC related questions? It says that #freenode doesn't exist anymore
[04:05:53] <nedbat> pyeverything: that's because this isn't freenode. Try #libera
[04:06:04] *** Quits: snalty (~Shhh@user/snalty) (Read error: Connection reset by peer)
[04:06:10] *** Joins: computeiro (~Wender@189.37.66.42)
[04:06:41] *** Joins: snalty (~Shhh@user/snalty)
[04:09:08] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:09:40] *** Joins: srhm (~srhm@user/srhm)
[04:10:49] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 248 seconds)
[04:11:12] <pyeverything> thanks nedbat previously I was able to join #freenode
[04:11:24] *** Joins: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl)
[04:12:10] <Yhg1s> pyeverything: that was probably *on freenode* then.
[04:12:12] <pyeverything> #libera worked thanks nedbat
[04:13:40] *** Quits: jdimatteo (~jdimatteo@159.21.83.34.bc.googleusercontent.com) (Quit: Leaving.)
[04:14:36] <rama> #MOTD
[04:16:55] *** Quits: linguist (~linguist@170.84.56.192) (Remote host closed the connection)
[04:17:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[04:18:21] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (Killed (NickServ (GHOST command used by Linux77_!~Linux7_7@237-182-233-186.raimax.com.br)))
[04:18:56] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[04:19:26] *** Joins: Linux77 (~Linux7_7@237-182-233-186.raimax.com.br)
[04:20:05] *** Joins: fikran (~fikran@user/fikran)
[04:20:10] <BtbN> I sometimes really hate scientists...
[04:20:17] <BtbN> "Hey, your setup.py is totally broken and does not work at all
[04:20:19] <BtbN> "
[04:20:29] <BtbN> "Nono, it's fine, you just have to do --no-deps"
[04:21:07] *** Joins: c10l (~c10l@89.34.167.207)
[04:21:23] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:21:59] *** Joins: autistic (~bruno@170.84.56.192)
[04:25:30] *** Joins: drew (~drew@user/drew)
[04:25:58] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[04:27:41] *** Joins: jezebel (~Guest99@user/jezebel)
[04:27:56] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[04:28:45] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[04:29:07] <jezebel> Hello! Was Trio or Curio the recommended lib over asyncio and is there a aiohttp equivalent?
[04:33:54] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:701e:7efd:6bd0:8508)
[04:34:29] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[04:34:47] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 240 seconds)
[04:35:12] *** Joins: irreitug (uid23254@id-23254.tooting.irccloud.com)
[04:37:04] *** Joins: mago (~mago@87.125.54.129)
[04:37:23] <mago> Hello, Im getting a TabError: inconsistent use of tabs and spaces in indentation
[04:37:36] <mago> In that statement: decrementer = tempAmount
[04:37:54] <mago> What could be causing it.. Indentation seems right, 4 spaces in..
[04:38:49] <derpadmin> you sometimes use tab, and sometimes use spaces
[04:39:02] <derpadmin> check with a software that let you see the tabs
[04:39:04] <Yhg1s> mago: make sure you only use spaces.
[04:39:17] <Yhg1s> (configure your editor to insert spaces when you press the tab key.)
[04:39:38] *** Joins: thiras (~thiras@user/thiras)
[04:39:56] <mago> Ok Yhg1s that fixed it.
[04:40:13] <mago> I coppy pasted the code and now im trying to get it to work.. So I guess he was using tabs?
[04:40:27] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[04:40:33] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[04:41:59] <mago> Or actually i displaced all the code 4 spaces to the right.. Maybe it was me when i did that?
[04:42:15] <mago> Yhg1s how do i configure gedit tab key to space¿
[04:42:27] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[04:42:41] <Yhg1s> mago: I've never used gedit, sorry.
[04:42:57] <mago> Found a tick box that says insert spaces instead of tabs.. That must be it right?
[04:43:06] *** Joins: Naan` (~Naan@user/naan)
[04:43:27] <nedbat> mago: sounds good
[04:44:48] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[04:45:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[04:45:11] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Quit: Leaving...)
[04:45:31] *** Joins: pyevery__ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[04:46:03] <rama> BtbN: ouch. the inconsistencies between setting up python across various OS types is annoying.
[04:46:33] <BtbN> Not even an OS thing
[04:46:45] <BtbN> just nobody has been maintaining the deps in there for a decade or so
[04:46:55] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[04:47:05] <BtbN> and nobody cares, they all just accepted it's broken, and wrote --no-deps and which deps to manually install into their readme
[04:47:16] <mago> Now the problem is it's indenting too much..
[04:47:31] <rama> It sounds like maintaining a requirements.txt would be easier....
[04:47:40] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 250 seconds)
[04:48:15] <BtbN> Could just fix the setup.py instead
[04:48:22] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[04:48:43] <BtbN> but at this point, it's been engrained into their minds that "dependencies cause issue"
[04:48:45] *** Joins: Samian (~Sami@2620:10d:c091:480::1:eb12)
[04:49:07] <BtbN> And a whole bunch of them are apparently runtime-optional as well, and they don't want to impose all of them on users
[04:49:37] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 252 seconds)
[04:49:55] <Samian> You know how if you run multiple python interpreters concurrently and have all of them run a script, the global variables in the script are instantiated separately for each python interpreter? Is there a way to do the same thing but with multiple threads instead of multiple interpreters?   In c++ the way to do it would be to turn the script into a class, and then instantiate an object for each instance of the were-global-vars-but-now-are-class-mem
[04:49:56] <Samian> bers variables.
[04:50:20] <Yhg1s> Samian: yes, the way would be to not have global variables.
[04:50:49] <nedbat> Samian: why isn't that the way to do it in Python?
[04:51:06] *** Joins: djapo (~archangel@user/djapo)
[04:51:11] <Samian> oh.. I guess it is the same
[04:51:11] <Yhg1s> Samian: alternatively, have each thread execute the script in a separate global namespace.
[04:51:18] <Samian> nedbat  thank you for your direct response.
[04:51:36] <mago> Yhg1s nedbat So i should use spaces instead of tabs.. And which should be the tab size? 4 spaces or 8?
[04:51:52] <nedbat> mago: 4
[04:53:09] <Samian> Yhg1s  no thank you for your I'm-not-answering-and-will-instead-criticize-that-you-arrived-at-the-problem-to-begin-with
[04:53:30] <Yhg1s> Samian: I literally gave the same answer, but okay.
[04:53:32] <InPhase> mago: It's best to consider tabs in Python as just an invisible syntax error waiting to happen.  Banish them.
[04:53:46] <Samian> Yhg1s  yeah your aternatively messgae. sorry thank!
[04:53:50] <mago> OMG it works, it passes... I just added a new method to the script, thanks guys. :)
[04:54:03] <Yhg1s> Samian: no, what you described as the C++ solution *is* not having global variables. It's the same thing.
[04:54:12] *** Joins: iflema (~ian@user/iflema)
[04:54:38] <Samian> oh then I misunderstood you. I apologize
[04:54:43] *** Quits: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl) (Ping timeout: 250 seconds)
[04:54:48] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[04:55:09] <mago> Thanks Yhg1s nedbat  InPhase
[04:55:47] *** Quits: imp (~imp@192-141-191-229.alternativaip.net.br) (Ping timeout: 240 seconds)
[04:59:43] <Samian> Yhg1s  I thought you meant I shouldn't have variables acting in a global manner to begin with.  True c++ member variables aren't global, but if nearly the entire program is in a singleton, then the member variables are practically global variables.  Reminds me of justice roberts saying "you name it a pentalty, but I don't care what you name it, I care about what it actually is" something like that
[05:00:07] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:00:47] *** Quits: mago (~mago@87.125.54.129) (Quit: Client closed)
[05:01:54] *** Joins: qpdb (~qpdb@user/qpdb)
[05:02:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[05:02:15] *** trench_ is now known as trench
[05:04:01] <Samian> nedbat  but what if you didn't want to alter the source code for some reason?
[05:04:14] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Excess Flood)
[05:04:15] <Samian> I guess you'd need to use subprocess.call ?
[05:04:17] <nedbat> Samian: you have to change it somehow
[05:04:40] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 240 seconds)
[05:04:42] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:05:02] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[05:05:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:06:07] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 252 seconds)
[05:06:18] *** Joins: imp (~imp@192-141-191-229.alternativaip.net.br)
[05:06:28] *** Quits: MikZyth (~MikZyth@188.65.242.202) (Quit: WeeChat 3.1)
[05:07:09] *** Joins: jazzy (~jaziz@2600:380:8773:c113:1093:1c01:217f:efb2)
[05:08:28] <doc|work> anyone know of a way to check if a latitude, longitude is within a bounding box for latitude and longitude without having to install C system libraries? All of the ones I can find seem to use gdal and/or numpy, or something comparable directly or indirectly
[05:08:34] *** Joins: jiffe (~jiffe@mail.nsab.us)
[05:10:01] *** Quits: shailangsa (~shailangs@host86-186-136-25.range86-186.btcentralplus.com) (Ping timeout: 248 seconds)
[05:11:27] <InPhase> doc|work: Have you tried numerical comparisons?
[05:11:56] <FunkyBob> that can be problematic when the bounding box crosses 0
[05:11:57] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[05:12:07] <InPhase> Yes, but that's a solvable problem.
[05:12:16] <doc|work> exactly
[05:12:21] <FunkyBob> indeed, highlighting it to ensure it's considered
[05:12:39] <doc|work> that's why I'm trying to find a library - it's surely a solved problem? :)
[05:12:52] <FunkyBob> wise
[05:12:53] <doc|work> except all solutions I can find seem to rely on gdal :/
[05:13:07] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 240 seconds)
[05:13:33] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Quit: leaving)
[05:13:33] *** Joins: catman (~catman@user/catman)
[05:13:42] <FunkyBob> hmm... does pypi need a "pure python" search flag?
[05:13:54] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[05:14:55] *** Quits: waveform (~quassel@waveform.plus.com) (Ping timeout: 252 seconds)
[05:15:42] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[05:18:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:18:25] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[05:19:10] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[05:20:50] *** Joins: waveform (~quassel@waveform.plus.com)
[05:21:00] *** Joins: emika7 (~emika@185.207.249.192)
[05:21:07] *** Quits: emika (~emika@185.207.249.215) (Ping timeout: 240 seconds)
[05:21:07] *** emika7 is now known as emika
[05:22:24] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:22:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:c9dc:bc90:bb09:b67b) (Ping timeout: 240 seconds)
[05:22:47] <dale> Is there some library that will let me specify the format of a CSV file--column names, basic data types, maybe some strptime parsing--as configuration provided by the user?
[05:23:00] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:23:18] *** Quits: rama (~rama@2601:640:109:4b5b:487e:4069:4475:9655) (Remote host closed the connection)
[05:24:39] <dale> I'm going to have to write a wee tiny DSL for this, aren't I.
[05:24:41] <InPhase> dale: pandas has parameters for specifying all of that sort of stuff at csv load time.
[05:25:02] <dale> InPhase: Would I find that in the read_csv docs?
[05:25:08] <InPhase> dale: Yes.
[05:25:20] *** Joins: Powerhouse6666 (~Powerhous@2605:b100:93d:7d42:b879:387e:2e2a:7f4f)
[05:26:09] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[05:26:14] *** Joins: seriousF (~Guest84@85.114.228.184)
[05:26:43] <seriousF> can any1 please help me with python?
[05:26:52] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[05:26:54] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[05:27:07] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 240 seconds)
[05:27:14] <seriousF> i have a very short question which is really on point and it wont take much time to answer me
[05:27:15] <dale> Hmmm dtype takes strings, I missed that.
[05:27:18] <InPhase> dale: It's up to you to choose how the user would specify it, but an extremely trivial approach would be a json.  You might even get away with passing it directly as ** if this is trusted input.  Or, select out the ones you want to opt-in.
[05:27:34] *** Joins: shailangsa (~shailangs@host86-185-102-120.range86-185.btcentralplus.com)
[05:27:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[05:27:52] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[05:27:57] <dale> InPhase: It's pretty trusted input, yeah.  Not trusted enough that I just want to eval/exec it, though, otherwise this would be easier. :)
[05:28:23] <seriousF> please somebody pay attention to me, i in need of help.
[05:28:28] <seriousF> i am*
[05:28:29] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[05:28:39] *** Joins: p-i- (~Ohmu@mx-ll-171.6.227-183.dynamic.3bb.co.th)
[05:28:42] <dale> seriousF: You are more likely to get an answer if you just ask your question.
[05:29:26] <InPhase> dale: A dict comprehension can filter a json-loaded dictionary, and then you can pass the allowed values with **d to read_csv.
[05:29:32] <p-i-> In my list[str], each item is formatted a:b:c:d. How to get succinctly get the list of a:b?
[05:29:44] <p-i-> I'm looking for something like: ip_port = [f'{l[0]}:{l[1]}' where l = L.split(':') for L in lines]
[05:30:20] *** Joins: Naan (~Naan@user/naan)
[05:30:30] <dale> InPhase: Yeah, I'm strongly considering this.
[05:30:31] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:06] <seriousF> ok, imagine a inherited class, where parent class has __init__ method with atributes.. and theres child class with exactly same __init__ method not called with super() or anything. but litteraly coppied  parent __init__ method., i know that it does not raise any errors, but it still working. so how its still working?
[05:31:10] *** Parts: catman (~catman@user/catman) (WeeChat 3.2)
[05:31:21] *** Joins: cjb (~cjb@user/cjb)
[05:31:23] <dale> Oh, and reading these read_csv docs causes me to realize that pandas uses NaN to mean something like SQL's NULL I guess?  This makes some string parsing code that bizarrely used NaN make more sense, I think.
[05:31:38] <dale> p-i-: Are you saying you want to discard :c:d in a:b:c:d?
[05:31:44] <p-i-> dale: yup
[05:31:53] <InPhase> p-i-: ':'.join(L.split(':')[:2])
[05:32:06] <KirkMcDonald> seriousF: If you can share an example of code, that might help clarify the question.
[05:32:08] <p-i-> nice!
[05:32:28] <seriousF> ok i will, please give me a second
[05:33:26] *** Quits: computeiro (~Wender@189.37.66.42) (Quit: Leaving)
[05:33:33] <p-i-> Out of curiosity, is there some way to do something like [ (p(j),q(j) where j=f(item) for item in mylist ]? I often get that pattern requirement.
[05:33:47] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[05:33:50] <p-i-> It might be a nice syntax addition
[05:33:59] <p-i-> (It reads very well)
[05:34:23] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:34:29] *** Joins: vlm (~vlm@user/vlm)
[05:34:37] <InPhase> p-i-: You can put "if j=f(item)" at the end of the comprehension instead of where you placed that where.
[05:34:38] <FunkyBob> p-i-: am guessing a nested comprehension would do the job....
[05:34:42] *** Quits: esaym153 (~esaym153@net153.net) (Ping timeout: 245 seconds)
[05:34:56] <FunkyBob> InPhase: I read it as wanting to apply f(item) once, and re-use the result
[05:34:56] <InPhase> p-i-: Or, I presume j==f(item)
[05:34:58] <FunkyBob> not predicate
[05:35:11] <InPhase> Oh...  Hmm.
[05:35:15] <FunkyBob> p-i-: ?
[05:35:19] <p-i-> FunkyBob: yup
[05:35:36] <seriousF> KirkMcDonald here is the code
[05:35:37] <seriousF> class human:
[05:35:37] <seriousF>     def __init__(self,name,last_name):
[05:35:38] <seriousF>         self.name = name
[05:35:38] <seriousF>         self.last_name = last_name
[05:35:39] <seriousF> class student(human):
[05:35:39] <seriousF>     def __init__(self,name,last_name):
[05:35:40] <seriousF>         self.name = name
[05:35:40] <seriousF>         self.last_name = last_name
[05:35:41] <seriousF>     def studying(self):
[05:35:41] <seriousF>         print(self.name,self.studying,"studying")
[05:35:42] <seriousF> class teacher(human):
[05:35:42] <seriousF>     def teaching(self):
[05:35:43] <seriousF>         print(self.name,self.last_name,"teaching")
[05:35:43] <seriousF> stu = student("john","smith")
[05:35:44] <p-i-> oh dear
[05:35:44] <seriousF> tea = teacher("sean","price")
[05:35:44] <seriousF> stu.teaching()
[05:35:45] <seriousF> tea.studying()
[05:35:46] *** Quits: mumixam (~m@user/mumixam) (Ping timeout: 250 seconds)
[05:35:46] <FunkyBob> [ (p(j), q(j) for j in f(item) for item in mylise ] ?
[05:35:49] <InPhase> seriousF: Pastebin...
[05:35:50] <FunkyBob> seriousF: don't do that
[05:35:57] <FunkyBob> never paste into channel
[05:35:58] <seriousF> i know i know i should not
[05:36:03] <seriousF> but it does not rasie any error
[05:36:05] <seriousF> how come?
[05:36:11] <FunkyBob> get an IRC client that warns you
[05:36:12] <dale> p-i-: [p(j), q(j) for j in (f(item) for item in mylist)]
[05:36:17] <FunkyBob> because you just flooded the discussion off the screen
[05:36:27] <p-i-> seriousF: wait, so you KNOW not to paste into the channel but you still did it?
[05:36:43] <seriousF> oh u mean chat? i tought u meant python
[05:36:48] <seriousF> ok i wont do that anymore
[05:36:53] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[05:36:55] <p-i-> seriousF: Look at the channel topic. It has a pastebin link.
[05:36:56] <dale> seriousF: Please use a pastebin next time.  It doesn't raise an error because that's how Python works.  Why would it raise an error?
[05:36:59] <p-i-> bpa.st
[05:37:12] <seriousF> ok, ill have that in mind
[05:37:31] <p-i-> dale: Thanks!
[05:38:22] <seriousF> ok than i gotta  following question then, does parent class looses his status? when a child class has the same __init__ function?
[05:38:34] <dale> seriousF: What do you mean by "status"?
[05:38:49] <seriousF> like its not parent anymore?
[05:38:50] <FunkyBob> seriousF: if the sub-class doesn't call the parent classes implementation, it doesn't get executed
[05:39:06] <p-i-> Seriously, what do you guys think of the idea of adding a 'where' keyword to Python so we can do [ (p(j),q(j) where j=f(item) for item in mylist ]? LGTM...
[05:39:07] <dale> seriousF: No, human is still student's superclass in your example.
[05:39:36] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:39:41] <dale> seriousF: Add a method to human that doesn't exist on student, then make a student instance, and call the human method on it.  It'll work, even on a student instance.
[05:39:43] <doc|work> p-i-, you can do an if at the end of a comprehension
[05:39:49] <FunkyBob> p-i-: where might make people think it's a filter, like with SQL... however 'with' could work
[05:40:09] <seriousF> i understand in that case the parent class atributes still inheritage the child classes but, what is that child class with exactly same init method does?
[05:40:10] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Ping timeout: 240 seconds)
[05:40:21] *** Quits: orion (~orion@user/orion) (Read error: Connection reset by peer)
[05:40:22] <FunkyBob> [ (p(j), q(j)) with j=f(item) for item in sequence ]
[05:40:30] <dale> p-i-: Sounds good, could you please get multi-statement anonymous functions admitted to the language while you're in there? ;)
[05:40:36] * FunkyBob wonders how this would interact with the walrus
[05:41:02] <p-i-> dale: I'm praying to the Old Gods and the New for that one
[05:41:14] <p-i-> FunkyBob: I like it!
[05:41:16] <dale> seriousF: If the child doesn't call the superclass's init then it just doesn't execute it, but the child is still the subclass of the parent.
[05:41:45] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[05:41:48] <dale> seriousF: Now, if the parent needed its constructor called to work properly, and the child doesn't call the super() constructor, then the code may break.
[05:42:00] *** Quits: sudomannn (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: Leaving)
[05:42:01] <dale> seriousF: Unlike, for example, Java, Python doesn't prevent you from making errors such as these.
[05:42:03] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: Leaving)
[05:42:32] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[05:42:42] <FunkyBob> python... a long history of making rules of conventions, and conventions of rules :P
[05:42:52] <dale> Ha
[05:42:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[05:43:07] <seriousF> so the child class with exactly same init method wont be executed and wont inheritage in sibling classes is that correct?
[05:43:27] <FunkyBob> wat?
[05:43:39] <dale> seriousF: Sorry, I can't understand that, maybe you can rephrase.  Alternatively, you can probably try out some sample code to prove/disprove your hypotheses.
[05:43:46] <FunkyBob> i really hope there isn't a language where classes inhert from _siblings_
[05:44:08] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:44:15] <nedbat> seriousF: if you define __init__ in the child class, it doesn't automatically invoke the parent __init__.  You have to use super() to run the parent __init__
[05:44:15] <dale> Is there OO INTERCAL?  Maybe there.
[05:44:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:45:02] <seriousF> no i am not asking that. i am asking that ,what happens if the child class has the exact same , i mean copy of the parent class init method in him
[05:45:06] <dale> InPhase: Thanks for the pandas suggestion.  I think my needs slightly exceed the trivial solution here, but with a little more lifting from JSON to assemble argument calls (ex. horrible date format readers), I think I'll get there in v2 of this code.
[05:45:11] <p-i-> dale: I actually brought that up on the channel a few weeks back. And I think that consensus agreement on this channel might constitute sufficient engineering force to push a PEP through to review. I think the problem is deciding on an acceptable syntax.
[05:45:11] *** Joins: kmh (~kmh@p5dcc6d4e.dip0.t-ipconnect.de)
[05:45:35] <dale> seriousF: Nothing special happens.  When you instantiate the child class, its init method runs.  That's it.
[05:45:48] <p-i-> Everyone seemed to be in agreement that it is a super-desirable feature.
[05:45:55] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[05:45:56] <dale> p-i-: Multi-statement anonymous functions?
[05:46:01] <p-i-> yah
[05:46:10] <FunkyBob> dale: what is the significant win here?
[05:46:16] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:46:17] <dale> I feel like people have fought and died in that war several times on python-dev over the past two decades?
[05:46:21] <nedbat> p-i-: have you reviewed the previous attempts and discussion?
[05:46:49] *** Quits: kmh_ (~kmh@p2e5117f2.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:46:57] <dale> Hence my ;) at the end.
[05:47:10] <dale> FunkyBob: The win with what?
[05:47:26] <p-i-> nedbat: I did have a look, but it's fallen out of my head by now. As I remember implementation is problematic.
[05:47:35] <FunkyBob> "Multi-statement anonymous functions"
[05:47:40] <dale> Does Hy have multi-statement lambdas?
[05:48:02] <p-i-> Readability/effortless-brain-parse is a big W for starters.
[05:48:08] <dale> FunkyBob: I surrender.
[05:48:30] <nedbat> p-i-: a significant question to answer: where would multi-statement anonymous functions be useful?
[05:48:32] <seriousF> maybe i am not asking this correctly ,
[05:48:44] <FunkyBob> dale: I'm lost...
[05:49:07] <nedbat> seriousF: when a child class is instantiated, its __init__ method is run. That's it.  It doesn't matter if its the same as the parent __init__
[05:49:19] *** Quits: knipster5 (~knipster@user/knipster) (Ping timeout: 250 seconds)
[05:49:19] *** Quits: doc|work (~doc@user/doc) (Ping timeout: 250 seconds)
[05:49:21] <p-i-> nedbat: fetch(url, on_success={...}, on_error={...}) would be one example
[05:49:23] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:49:24] <dale> FunkyBob: I regret trying to make a joke now.  I think this has been something people have asked for numerous times, probably some of them lisp-heads like me, and I think it has been roundly rejected by core every time.
[05:49:38] <nedbat> p-i-: is that an API in an existing Python library?
[05:49:38] <seriousF> i dont mean instantiation
[05:49:41] <FunkyBob> dale: oh, it was a joke, ok... p-i seems serious about it, though
[05:49:58] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:49:59] <dale> FunkyBob: I wish I had just started a Vim vs. Emacs fight or something.
[05:50:02] <FunkyBob> seriousF: well, that's when __init__ is called... so...
[05:50:04] <p-i-> haha I didn't get the joke
[05:50:09] <FunkyBob> dale: serves you right! :P
[05:50:39] <FunkyBob> how dare you try to inject levity here! :P
[05:50:41] <dale> p-i-: My apologies, I've been around long enough that I sometimes assume too much context.
[05:50:55] *** Joins: knipster5 (~knipster@user/knipster)
[05:51:01] <p-i-> That feature is the one thing I really appreciate when coding js. Can't help missing it.
[05:51:14] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[05:51:17] <dale> p-i-: Wait, JavaScript?
[05:51:21] <FunkyBob> p-i-: define a closure inline... like y ou could in JS also...
[05:51:46] <dale> JavaScript has had "arrow functions" for a while now, I think it's supported in any common browser, right?
[05:52:00] <seriousF> ok imagine a parent class with init method right? and that method contains atributes right?? and theres a child class and i go copy the parent init method and litteraly paste it in the child class, will both work or only parent init method will work?
[05:52:03] *** Quits: jmft2 (~jmft2@81.149.115.87.dyn.plus.net) (Quit: This computer has gone to sleep)
[05:52:21] <FunkyBob> seriousF: try it ant see
[05:52:23] <nedbat> seriousF: when you instantiate the child class, it will run the child __init__ method.
[05:52:41] <nedbat> seriousF: but you don't need to make that copy: if you omit the child __init__, it will find the parent's, and run it.
[05:52:43] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:52:58] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:53:23] <seriousF> nedbat yes i know it will inherit the parent class method, but what if instantiate the both classes parent and the child?
[05:53:39] <p-i-> Anyway I'll leave core python syntax to the experts until I've found my way past the DunningKruger dip.
[05:53:48] *** Parts: autistic (~bruno@170.84.56.192) (Leaving)
[05:53:49] <nedbat> seriousF: if you do `p = Parent()`, it will run the parent __init__.  Then `c = Child()` will run the child __init__.
[05:53:55] *** Quits: bad_blue_bull (~user@ppp92-100-27-213.pppoe.avangarddsl.ru) ()
[05:55:02] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c7d:ac00:2c26:12e2:f8a9:f3ea)
[05:55:12] <dale> Oh, sorry, you said you *do* appreciate it in JS, right.
[05:56:43] <seriousF> nedbat by run you mean calling the instance?
[05:57:15] <FunkyBob> seriousF: what does it mean to you?
[05:57:21] <nedbat> seriousF: by "run" i mean that `p = Parent()` will call `p.__init__()`
[05:57:40] *** Quits: sharperguy__ (~sharpergu@2001:16b8:5ced:fd00:d505:9f3b:de4a:bc16) (Ping timeout: 240 seconds)
[05:59:01] <InPhase> p-i-: Food for thought...  [(p(i), q(i)) where i=f(j) for j in [1, 2, 3, 4]] is the same number of characters as [(i:=f(j), p(i), q(i))[1:] for j in [1, 2, 3, 4]]
[05:59:28] <FunkyBob> InPhase: is it?  does the i= not come out in the () ?
[05:59:31] <seriousF> nedbat ok i got it now , big big thank you.  and one last follow up question, so bassicaly with my version i am doing what super does is that correct?
[05:59:34] <p-i-> InPhase: yes, but it's not pythonic
[05:59:42] <InPhase> FunkyBob: [1:]
[06:00:00] <FunkyBob> ah
[06:00:03] <nedbat> seriousF: I don't know why you would copy the parent code into the child.  But maybe I'm misunderstanding. you haven't shown us your code.
[06:00:06] <InPhase> p-i-: Well I mean it works in Python more than the other.  ;)
[06:00:12] <p-i-> where/with makes for nice brainfood
[06:00:17] <p-i-> tru dat ;)
[06:00:49] <InPhase> p-i-: I do concur the where statement is cleaner looking, and I've found cause to want one exactly in that spot before.  I usually hack around it with something clumsy like that example.
[06:01:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:01:02] <InPhase> p-i-: The allowed workarounds got more compact now though with :=
[06:01:55] *** Joins: Pandadub (~Barones@2804:7f3:8987:a43:c5d5:10db:3d23:1a66)
[06:02:06] <p-i-> Maybe it's worth making a proposal. Nobody here seems to be against it.
[06:02:30] <seriousF> nedbat  can i pm you?
[06:02:41] <nedbat> seriousF: it's better to keep the discussion here
[06:02:58] <seriousF> ok please explain how do i insert code here without flooding?
[06:03:02] <p-i-> Does anyone know how to supply a user/password to an http request?  I've got a list of proxies... can't see how to do it.
[06:03:10] <FunkyBob> seriousF: as it showsin the topic, use a pastebin site
[06:03:15] <nedbat> seriousF: put it in a pastebin, or gist.github.com
[06:03:35] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9c92-d971-62b4-5b07.res6.spectrum.com) (Read error: Connection reset by peer)
[06:04:27] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Ping timeout: 240 seconds)
[06:04:48] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[06:05:10] <InPhase> p-i-: Well I can tell you one reason it will fail on the spot.
[06:05:26] <InPhase> p-i-: If where is a keyword, np.where will no longer be valid.  :)
[06:05:39] <InPhase> p-i-: But maybe you can reuse "with" in a new context.
[06:05:44] <nedbat> InPhase: we now have soft keywords
[06:06:13] <InPhase> nedbat: Does the core tend to prefer soft new keywords, or keyword reuse?
[06:06:18] <seriousF> ok i made one, now how do i put in here? just a link?
[06:06:28] <nedbat> InPhase: no idea
[06:06:32] <nedbat> seriousF: yes, put the link here
[06:06:40] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[06:07:15] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:07:29] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[06:07:31] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[06:07:50] <seriousF> nedbat https://pastebin.com/HZw0Cvp3
[06:08:25] <aphysically> so, one of the "problems"/dilemmas I ran into when typing my code was one of the functions has a return signature that varies slightly depending on the arguments passed to it, so I usually had to assert that it wasn't the impossible type after calling it to silence the spurious mypy error
[06:08:34] *** Joins: minip (minip@user/minip)
[06:08:41] <InPhase> p-i-, nedbat: I found this comment:  https://stackoverflow.com/questions/65800344/what-are-soft-keywords#comment116359906_65800389
[06:08:42] <nedbat> seriousF: if you delete lines 6-8, it will be exactly the same.
[06:08:51] <nedbat> seriousF: you shouldn't copy the parent __init__ like that.
[06:09:01] <aphysically> however, in my reading today I learned there's an entirely different solution to this: I can specify different return signatures based on the arguments passed using "Literal"s
[06:09:18] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:7807:14e0:51ec:23dd)
[06:09:21] <aphysically> this would avoid the asserts entirely in my code
[06:09:22] <seriousF> nedbat yes thats what i meant, i know that i should not, but can you tell me why not?
[06:09:25] <InPhase> So they wanted := behavior, but didn't want a new keyword, and couldn't agree on reusing as.
[06:09:34] <nedbat> seriousF: because duplicated code needlessly is bad.
[06:09:50] <nedbat> seriousF: if you change one, you'd have to also change the other, to keep them in sync.
[06:09:57] <nedbat> seriousF: why have three extra lines that add no value?
[06:09:59] <seriousF> nedbat so thats the only problem? duplicating the code?
[06:10:16] <nedbat> seriousF: can you tell us why you want to copy the code?
[06:10:53] <seriousF> nedbat theres no reason, but i want to know why its bad to do it like that.
[06:11:06] <seriousF> nedbat what are the causes?
[06:11:09] <nedbat> seriousF: does it make sense now?
[06:11:12] <InPhase> p-i-: Your proposal strikes me as very analogous to this, as it's pretty similar in behavior to :=.  I suspect adding keyword where might have some pushback then.  So your options are reusing with or a new operator.
[06:11:16] <nedbat> seriousF: what are the causes of what?
[06:11:23] <seriousF> nedbat 100% understand
[06:11:34] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 252 seconds)
[06:12:20] <seriousF> nedbat thats it. you saying " iff you change one, you'd have to also change the other, to keep them in sync."
[06:12:32] <seriousF> thats eureeka moment for me
[06:12:40] <aphysically> https://mypy.readthedocs.io/en/stable/literal_types.html literals do seem a bit more verbose than I'd like. Is the generic overload in the mypy example really required in addition to the annotation in the function itself?
[06:12:58] <aphysically> that seems a bit silly
[06:13:00] <seriousF> nedbat so thank you so much , much much thanks, i will be forever greatfull
[06:13:15] <nedbat> seriousF: any time :)
[06:13:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:7807:14e0:51ec:23dd) (Ping timeout: 240 seconds)
[06:13:56] <InPhase> p-i-: I guess "with" is probably closer to the meaning anyway than "where".  Because where can also be restrictive, this is why I at first thought you meant you wanted "if".
[06:14:05] <aphysically> I didn't even realize type annotations had any runtime uses, but apparently they're used in function overloading
[06:14:17] <aphysically> (not in this case, which is annotation, but in actual overloads)
[06:14:42] <p-i-> InPhase: Yes, `where` hints at a filtration
[06:15:34] <p-i-> `async with httpx.AsyncClient(proxies=proxy, auth=auth) as client:` I'm getting ProxyError('407 Proxy Authentication Required')
[06:15:41] <p-i-> But I'm supplying auth.
[06:15:44] <p-i-> wtf
[06:16:00] <p-i-> auth = (user, passwd)
[06:16:06] <InPhase> p-i-: Hmm.  However, to play devil's advocate, this is kind of clean:  [(p(i:=f(j)), q(i)) for j in [1, 2, 3, 4]]
[06:16:07] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[06:16:47] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[06:17:35] <seriousF> nedbat i just did in python and can i ask you a last question? so bassicaly what i did in previous example is the same as super but i have to mannually sync those methods right?
[06:17:36] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:17:38] <p-i-> InPhase: yeah that's the best I can see with what we have. But it's kinda obfuscatory.
[06:17:57] <InPhase> p-i-: := is kind of new, so I think we're all sort of wrapping our heads around how to use it well and getting used to mentally parsing it.
[06:18:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[06:18:30] <p-i-> yeah I've started using it plenty o places now
[06:21:29] *** Joins: djapo (~archangel@user/djapo)
[06:21:59] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:22:01] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[06:22:08] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[06:22:22] *** brabrax_ is now known as brabrax
[06:24:06] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:24:25] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Quit: +++)
[06:24:44] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[06:26:13] *** Quits: Pandadub (~Barones@2804:7f3:8987:a43:c5d5:10db:3d23:1a66) (Remote host closed the connection)
[06:26:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:27:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[06:28:31] <aphysically> yeah, I have to overload the generic typing in addition to typing the same thing in the function
[06:28:38] <aphysically> just like seen here: https://mypy.readthedocs.io/en/stable/literal_types.html
[06:28:46] <aphysically> I'm not sure the purpose of that, does seem a bit silly
[06:29:28] *** Joins: fikran (~fikran@user/fikran)
[06:30:36] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[06:31:16] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:35:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[06:35:41] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 250 seconds)
[06:36:30] <aphysically> so adding the Literal type signatures for the probefile function (at the top) does let me remove several spurious assertions throughout the file while still keeping mypy --strict happy, but this does seem a little on the verbose side so I'm not sure how I feel about it https://dpaste.com/8DCS4EFY4
[06:38:17] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[06:39:00] <aphysically> I could take a couple of stances here: that it's better to accurately annotate the code and to avoid unneeded assertions, or that this type of especially verbose typing is better suited to a stub file and is probably better left out of my code
[06:40:35] <Lvl4Sword> Why does using the "secure" tuple in https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler use smtplib.SMTP.starttls() as instead of smtplib.SMTP_SSL?
[06:41:15] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[06:41:39] <p-i-> httpx.response doesn't seem to have a .bytes. There's an iter_bytes. I suppose I need to encode .text.
[06:42:20] *** Joins: Sir_Andrei (~andrei@r186-52-230-244.dialup.adsl.anteldata.net.uy)
[06:42:22] <Sir_Andrei> Hello
[06:42:32] <Sir_Andrei> People. I am looking for some way to parse C function signatures.
[06:42:53] <Sir_Andrei> Well, worst case scenario, I'll make the parser myself. But I don't wanna reinvent that if there is one already.
[06:43:25] *** Quits: xx (~xx@user/xx) (Ping timeout: 268 seconds)
[06:43:27] <Sir_Andrei> Do anyone know any
[06:43:29] <Sir_Andrei> ?
[06:45:54] <FunkyBob> how does cffi do it?
[06:45:58] <aphysically> I can even remove the assertions from the spots where I used variables by declaring them as literal or final
[06:46:06] <InPhase> Sir_Andrei: There appear to be a lot of C parsers out there.
[06:46:33] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 248 seconds)
[06:47:02] <InPhase> Sir_Andrei: I can't vouch for which Python C parsers are good, but google shows many options.
[06:48:31] *** Joins: twobitsprite (~twobitspr@66.115.166.150)
[06:48:42] <FunkyBob> hmm... i was sure cffi depended on a package to parse cheaders
[06:48:47] <FunkyBob> but ... can't find the source :/
[06:49:14] <FunkyBob> https://github.com/eliben/pycparser
[06:50:07] *** Joins: i0e (~is0ke3@user/is0ke3)
[06:51:10] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:51:56] <Sir_Andrei> @InPhase. Thx
[06:52:00] <Sir_Andrei> @FunkyBob, thx.
[06:52:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:53:04] *** Quits: hedinn (~notandi@73-149-17-89.fiber.hringdu.is) (K-Lined)
[06:53:27] <sybariten> 'elo
[06:54:00] <sybariten> WHat's the most logical way to count alphabetic (A-z) characters in a text (string, i guess) ?
[06:54:46] <mefistofeles> sybariten: like how many there are in general in a string or how many of each character?
[06:55:34] <sybariten> mefistofeles: hm, dang you're right, my question actually lacked detail. Well i'll be needing to do both those, but now i meant in general
[06:55:42] <FunkyBob> sum((x.isalpha() for x in 'this is a test 123'))
[06:56:39] <FunkyBob> for count of each char, use collecitons.Counter and filter the string by isalpha
[06:56:49] <sybariten> how does that actually work together? .isalpha() i presume is something that returns true or false. The sum() fuinction must be doing something sophisticated here
[06:58:34] <sybariten> can that for loop be rewritten without list comprehension (?) ? like, for x in 'this is a test 123':  what would happen here?
[06:59:25] <mefistofeles> sybariten: for that case, presumably you want to initialize some variable to zero and add to it each time it finds a char
[06:59:40] <mefistofeles> the list comprehension is a better way, imho
[07:00:17] <FunkyBob> sybariten: this relies on the fact bool is a sub-type of int... so false is 0, and true is 1
[07:00:30] <FunkyBob> s/is/==
[07:00:42] <sybariten> mefistofeles: yeah, so that's not what sum is doing "under the hood" here ? They are two different approaches?
[07:02:23] <aphysically> okay using more literals I was able to remove almost every assert in my code, very cool
[07:02:47] <p-i-> https://bpa.st/CICA <-- an anyone think why this isn't opening the web browser?
[07:05:03] <sybariten> i did this now ... https://bpa.st/73PQ
[07:05:32] <FunkyBob> sybariten: the else: clause is somewhat redundant...
[07:05:36] <sybariten> is there any way that actual functionality itself could be rewritten nicererly ?
[07:05:46] <sybariten> aha, good point
[07:05:56] <FunkyBob> sybariten: yes... using the sum() statement i gave you above
[07:06:12] <Repiphany> sum can add an iterator of bools to give an int
[07:06:33] <FunkyBob> to help, try print([x.isalpha() for x in 'this is a test 123'])
[07:06:34] <sybariten> FunkyBob: could sum() be used in something like my for loop there, or does it always go hand in hand with a for loop of your type ?
[07:06:38] <FunkyBob> might help your mental model
[07:06:38] <Repiphany> The generator sum is the best way
[07:07:11] <FunkyBob> sybariten: my version uses a "generator comprehension" instead of an explicit loop
[07:07:21] <FunkyBob> sum() will iterate it to get the values and sum them
[07:07:31] <sybariten> FunkyBob: aha! maybe that's a topic i can find some article or video about
[07:07:57] <FunkyBob> https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
[07:07:58] <sybariten> I have a hard time seeing the ... model, as you state there
[07:08:25] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[07:08:34] <sybariten> but i mean, i understand that you create a list of true and false by iterating over the chars in the string...
[07:09:09] <FunkyBob> ok... then that gets passed to sum()
[07:09:23] <FunkyBob> which you can either call as sum(a, b, c)  ... or sum([a, b, c])
[07:09:26] <sybariten> the x.isalpha() is not a lambda function in your simple example there right?
[07:09:31] <FunkyBob> no
[07:09:35] <sybariten> ok
[07:09:36] <FunkyBob> it's a method of str...
[07:09:58] <FunkyBob> x is each character as a str as we iteraste the string literal
[07:10:25] <FunkyBob> so  [x for x in s]  will yield a list of single character strings from your string s
[07:10:47] <FunkyBob> x.isalpha() for x in s  ... is the bool results from calling isalpha on each one.
[07:11:07] <FunkyBob> iterate... blah, me and typos :/
[07:11:54] <Repiphany> sybariten: https://bpa.st/3BIQ
[07:12:29] <sybariten> it actually sounds a bit like how i used lambda functions in an earlier exercise i believe.. .hmmm i wonder what the general case was then. Is there a typical case where they are used, when working with dicftionaries by any chance?
[07:12:47] *** Quits: Sir_Andrei (~andrei@r186-52-230-244.dialup.adsl.anteldata.net.uy) (Ping timeout: 240 seconds)
[07:13:20] <FunkyBob> sybariten: I mean, you could use a lampda if you used map() instead of a comprehension
[07:13:33] <FunkyBob> sum(map(lambda x: x.isalpha(), 'the string123'))
[07:13:54] <sybariten> ok
[07:14:09] <Repiphany> You don't even need the lambda there, you could use str.isalpha
[07:14:19] <sybariten> Repiphany: thank you. Is the contents of "d" somehow implied there?
[07:14:23] <FunkyBob> sure, but it demonstrates my point
[07:14:27] <Repiphany> sum(map(str.isalpha, 'blah blah 123'))
[07:14:45] *** Quits: MrC (Ben@mrbenc.net) (Quit: Reboot, Updating ZNC, or Switching servers.)
[07:14:48] <Repiphany> oops, d was supposed to be bools
[07:14:59] <sybariten> bools = [not i%2 for i in range(10)]
[07:15:06] <sybariten> ooops mis-paste
[07:15:13] <Repiphany> in line 10, d -> bools
[07:16:23] *** Quits: stlndks (i.sty@177.201.3.195) (Remote host closed the connection)
[07:16:30] <sybariten> yup
[07:17:24] *** Joins: MrC (Ben@mrbenc.net)
[07:17:54] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[07:18:00] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[07:19:16] <sybariten> hm, i dont quite get it. When reading about sum() it seems to by default sum all the elements (if they are int/float i presume) of an iterable. But in your example Repiphany it knew to just count all the "True", or what?
[07:19:21] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[07:19:34] <Repiphany> Booleans are a subclass of int
[07:19:36] <Repiphany> True + True == 2
[07:19:59] <Repiphany> (False == 0)
[07:20:02] <Repiphany> for ints
[07:20:04] <aphysically> /usr/lib/python3.9/tempfile.py:817: ResourceWarning: Implicitly cleaning up <TemporaryDirectory '/tmp/pyffstream-at_nzllz'>
[07:20:11] <sybariten> oooooh
[07:20:13] <aphysically> I didn't realize TemporaryDirectory wanted me to do manual cleanup
[07:20:21] <sybariten> so it counted them like 1's and 0s ?
[07:20:31] <aphysically> ....I think I'll just ignore this warning
[07:20:34] <Repiphany> Yes
[07:20:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:20:49] <sybariten> ofcourse. Thanks for the examples Bob and Repiphany
[07:21:07] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[07:21:25] <sybariten> So... list comprehension will always yield a list?
[07:21:43] <FunkyBob> yes
[07:21:56] <FunkyBob> (although my original code used a generator, not a list)
[07:21:56] <Repiphany> [x for x ...] makes a list, (x for x ...) makes a generator
[07:22:16] <FunkyBob> the generator is still iterable, but it only works out the next value when you ask for it
[07:23:01] <FunkyBob> (oh, and you can only iterated it once...)
[07:25:10] <sybariten> Hm i gotta read up on the difference between these.  Another question about that code FunkyBob:  You wrote  sum((x.isalpha() for x in 'this is a test 123'))    is that outer parenthesis necessary?  You can't do    sum(x.isalpha() for x in 'this is a test 123')   ?
[07:25:38] <Repiphany> You don't need the extra ()
[07:25:46] <aphysically> on python development mode "Unsafe usage of the GIL" -> like if I'm doing non atomic usage of a shared resource? what kind of unsafe usage can it warn about?
[07:25:52] <sybariten> ok
[07:26:38] <pyevery__> do you know why I get rate limit error for loading resnet18 from torch hub? https://discuss.pytorch.org/t/urllib-error-httperror-http-error-403-rate-limit-exceeded/130102
[07:31:47] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[07:31:59] *** Joins: manin (~x@185.242.190.95)
[07:32:01] <FunkyBob> sybariten: force of habit to be explicit... as Repiphany said, it's redundant
[07:32:40] <sybariten> gotcha
[07:33:49] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:34:46] <sybariten> now for word counting, in terms of frequency in a text ....  good approach for that?
[07:34:51] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[07:35:10] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[07:35:36] <sybariten> i'm thinking like this, construct an empty dictionary. THen for each word in the data set, for example "alpha beta gamma delta alpha alpha beta" ....  go over and take that word, and add it to the dicitonary
[07:35:53] <Repiphany> collections.Counter effectively does that
[07:36:23] <FunkyBob> do you want to count distinct words? or occurrences of each distinct word?
[07:36:29] <FunkyBob> (can get both with Counter :)
[07:36:30] <sybariten> use the actual word as the key, and if it doesnt exist create a new key, if it does exist, add a value at that key/value place. Makes sense?
[07:36:41] <FunkyBob> defaultdict is a halfway point, too
[07:37:19] <sybariten> Repiphany: school task and i'm not 100 % sure right now but i _think_ we're not supposed to use extra imported stuff.... if .Counter is that
[07:37:48] <FunkyBob> is the school task to learn python, or to learn problem solving?
[07:38:04] <sybariten> the former i would say
[07:38:05] <Repiphany> You can implement the same thing using a dict as you describe, yes
[07:38:12] <FunkyBob> sybariten: are you sure? :)
[07:38:14] <dre> FunkyBob, school task is usually to do what you're told and never ever solve your own problem
[07:38:19] <dre> :P
[07:38:28] <sybariten> FunkyBob: heh, yeah.... why?
[07:38:45] <FunkyBob> sybariten: because i often find students aren't aware of their teachers real goals
[07:38:52] <domhnall> sybariten: I think if you're using the word as the key with that example, you'd have no duplicate keys, so only 1 alpha and 1 beta.
[07:39:46] <FunkyBob> sybariten: yes, your algorithm sounds ... sound.
[07:39:50] <sybariten> FunkyBob: the excercises as they are, are quite rigidly defined though... i usually have a pretty good idea of what they "want" us to do...  and its often using very "vanilla" python
[07:40:02] *** Quits: Powerhouse6666 (~Powerhous@2605:b100:93d:7d42:b879:387e:2e2a:7f4f) (Read error: Connection reset by peer)
[07:40:40] <sybariten> uh, what i mean is, i can make a pretty good guess of roughly what approach they want us to use to solve the task
[07:40:47] <sybariten> anywhoooo
[07:40:49] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[07:41:33] <FunkyBob> sybariten: yes, the naive approach of "add items to a dict" is a sound way to count items in a sequence
[07:41:47] <FunkyBob> there are more sophisticated tools, as we noted
[07:43:17] *** Quits: JavaBean (~JavaBean@user/javabean) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[07:44:08] <sybariten> domhnall: not sure i understand what you mean, but i was thinking i'd have an integer as the value to each key. So every time i add a key to the dict, OR arrive at an existing key, i'd add 1 . So alpha would have a value of 3  no?
[07:45:07] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:45:12] <FunkyBob> sybariten: write your code :)
[07:45:25] <sybariten> Yeah i'll give it a shot
[07:45:26] <Repiphany> Tip: you can use dict.get(key, 0) to get a default value of 0 if the key isn't already in the dict
[07:45:36] <FunkyBob> setdefault... dict.setdefault
[07:45:56] <FunkyBob> either will help
[07:45:56] <sybariten> .get, that's another dang thing i need to re-learn about.... i forgot that one already
[07:46:29] <sybariten> thank you
[07:46:33] <FunkyBob> get is better
[07:46:43] *** Quits: pacbard (~pacbard@user/pacbard) (Ping timeout: 252 seconds)
[07:57:38] *** Quits: hyper_dave (~hyper_dav@197.156.86.185) (Read error: Connection reset by peer)
[07:57:58] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[08:01:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[08:02:25] *** Joins: hyper_dave (~hyper_dav@197.156.86.185)
[08:02:40] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[08:07:18] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Quit: Leaving)
[08:09:12] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[08:10:02] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[08:11:18] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[08:11:57] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[08:12:43] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[08:12:59] *** Joins: yaalon_ (~yaalon@189.202.79.36)
[08:13:13] *** Quits: yaalon_ (~yaalon@189.202.79.36) (Remote host closed the connection)
[08:13:29] *** Joins: yaalon_ (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:14:41] *** Joins: yaalon__ (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[08:16:07] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 240 seconds)
[08:18:04] *** Quits: yaalon_ (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 252 seconds)
[08:18:27] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[08:21:59] *** Joins: esaym153 (~esaym153@162.222.245.132)
[08:22:17] <sybariten> i'm standing at the python interactive console and i often do quit() , restart python3, and then    from someFile import *       and then some manual tests.   Is there a way to avoid having to exit python when i have made changes to someFile ?
[08:23:35] <Repiphany> Don't use star imports for one
[08:23:48] <Repiphany> import module; import importlib; importlib.reload(module)
[08:24:38] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[08:24:40] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 252 seconds)
[08:24:42] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[08:25:31] <sybariten> aha, thanks
[08:25:41] *** Joins: JavaBean (~JavaBean@user/javabean)
[08:25:57] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[08:26:22] *** Quits: ckdCreations (~ckdCreati@147.55.133.133) (Read error: Connection reset by peer)
[08:26:42] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:26:52] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:9e48:fa12:e9db:90da)
[08:28:57] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Read error: Connection reset by peer)
[08:30:27] *** Quits: seriousF (~Guest84@85.114.228.184) (Quit: Client closed)
[08:30:50] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[08:30:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:31:00] *** Quits: Samian (~Sami@2620:10d:c091:480::1:eb12) (Quit: Textual IRC Client: www.textualapp.com)
[08:31:03] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Remote host closed the connection)
[08:35:05] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:19] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[08:38:52] *** Joins: fikran (~fikran@user/fikran)
[08:41:15] *** Quits: yaalon__ (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) ()
[08:45:06] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[08:45:20] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[08:50:37] *** Joins: mei (~mei@user/mei)
[08:50:53] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 250 seconds)
[08:51:03] <p-i-> Does anyone know of a fast OCR remote service (or library)? My image contains a single word in a standard font...
[08:51:25] <p-i-> So some kind of 'hello world' ML code would get it easily I think.
[08:51:37] *** Joins: manin (~x@185.242.190.95)
[08:55:23] *** Joins: elezium (~elezium@modemcable039.188-176-173.mc.videotron.ca)
[08:56:50] *** Joins: daoudr_ (~daoudr@101.17.104.92.dynamic.wline.res.cust.swisscom.ch)
[08:57:41] <InPhase> p-i-: There's tesseract.  Or if you want a pre-trained neural network as a remote service, you can obtain access to those through the mturk API.
[09:00:27] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 240 seconds)
[09:05:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[09:08:25] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[09:09:23] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[09:09:42] *** Joins: gggpkm (~gggpkm@221.219.67.64)
[09:10:26] <gggpkm> how do SSL/TLS encrypt with python for tcp connection,is there impl
[09:11:41] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 250 seconds)
[09:11:57] <Wulf> gggpkm: https://docs.python.org/3/library/ssl.html
[09:12:51] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[09:13:36] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[09:17:29] *** Quits: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl) (Ping timeout: 248 seconds)
[09:17:57] *** Joins: Voxel (~Voxel@ip178-67-155-188.onego.ru)
[09:18:25] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:19:49] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[09:20:21] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[09:21:32] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[09:21:39] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[09:24:52] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[09:26:33] *** Quits: devios (~devios@75-166-173-50.hlrn.qwest.net) (Ping timeout: 248 seconds)
[09:26:40] *** Joins: sudomannn (~sudomann@86.106.143.206)
[09:27:11] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[09:28:47] *** Joins: khrbt (~znc@user/khrbt)
[09:29:30] *** Joins: ssbr_ (~ssbr@python/site-packages/ssbr)
[09:30:23] <nubonix> hello, so i am trying to send a zip file to a starlette server, but im not really sure how to do so. So, i have a reverse proxy, and im sending the zip file to the reverse proxy, and in turn the reverse proxy sends the zip file to starlette server on machine2, and i am trying to retrieve the zip file on machine 2 and then write it to the disk
[09:30:27] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[09:30:47] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[09:30:48] *** Joins: stranac (~stranac@195.29.239.126)
[09:31:05] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:31:08] <nubonix> atm im reading the zipfile as a bytesio buffer, and sending it via data with httpx
[09:32:08] <nubonix> well a dict is what im as the data, data includes a filename and the filecontents
[09:33:45] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[09:35:24] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:43:05] *** Joins: Lope (~lope@user/lope)
[09:45:01] <Wulf> nubonix: do you have a question?
[09:45:22] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 250 seconds)
[09:47:07] *** Quits: emika (~emika@185.207.249.192) (Ping timeout: 240 seconds)
[09:47:29] *** Joins: emika (~emika@185.207.249.191)
[09:47:57] <nubonix> Wulf: ye, how do i go about sending a file to a starlette server, and then how do i read it from the starlette server
[09:48:34] <Wulf> what's a sterlette server?
[09:48:40] <Wulf> s/e/a/
[09:48:49] <nubonix> one level below fastapi
[09:48:57] *** Quits: Lope (~lope@user/lope) (Ping timeout: 250 seconds)
[09:49:26] <nubonix> fastapi has pydantic and a few other things that starlette does not have
[09:50:31] *** Joins: frost (~frost@59.71.240.119)
[09:50:53] *** Joins: upsala (~zcb@185.213.155.160)
[09:51:09] <rakoon> Any recommendations for a mock server other than wiremock?
[09:51:30] <nubonix> so heres what i have atm https://bpa.st/M4ZQ
[09:51:45] <nubonix> .jar == a zip file so, reading it with zipfile works
[09:52:13] <Wulf> nubonix: reading your zip file into memory sounds like a bad idea.
[09:52:20] <nubonix> y, its small
[09:52:36] <nubonix> i have to read it in memory to send it yah?
[09:52:44] <Wulf> nubonix: maybe it's small now. Tomorrow your boss needs you to send a huge file.
[09:52:45] <nubonix> basically what im trying to do is scp without scp
[09:52:58] <nubonix> Wulf: i am the boss of this service
[09:53:33] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[09:53:43] <nubonix> starlette also supports file streams, but i dont need that
[09:54:02] <Wulf> nubonix: so, does your code work?
[09:54:12] <nubonix> Wulf would i be here if it did?
[09:54:26] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[09:55:15] <Wulf> nubonix: don't know. If it does NOT work, in what way does it fail?
[09:55:43] <nubonix> well, i dont think im sending the file correctly to start
[09:56:14] <nubonix> think i need to do httpx.post(files=file) instead of httpx.post(data=data)
[09:56:14] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[09:56:17] <KirkMcDonald> nubonix: I would expect you just want to send the bytes of the file directly, without trying to parse it with zipfile.
[09:56:21] <Wulf> yeah, probably not. I don't think httpx can deal with a ZipFile inside data
[09:57:04] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[10:00:47] *** Quits: gggpkm (~gggpkm@221.219.67.64) (Ping timeout: 240 seconds)
[10:01:58] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[10:04:07] *** Quits: Linux77 (~Linux7_7@237-182-233-186.raimax.com.br) (Ping timeout: 240 seconds)
[10:04:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[10:07:44] *** Joins: TheRedRipper (~TheRedRip@user/theredripper)
[10:09:19] <TheRedRipper> hej
[10:09:21] <nubonix> WOOO got it to work :D
[10:09:29] <nubonix> thanks Wulf & KirkMcDonald
[10:11:06] <Wulf> excellent!
[10:15:37] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 248 seconds)
[10:16:07] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[10:18:24] *** Joins: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro)
[10:21:16] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:21:42] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[10:22:04] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:22:36] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[10:24:15] *** Quits: pyeverything (~mona@c-66-31-107-137.hsd1.ma.comcast.net) (Quit: Leaving.)
[10:24:16] *** Quits: pyevery__ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[10:24:52] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[10:25:47] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 250 seconds)
[10:26:46] *** Quits: sudomannn (~sudomann@86.106.143.206) (Ping timeout: 252 seconds)
[10:26:52] *** Joins: Vonter (~Vonter@user/vonter)
[10:29:05] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[10:29:07] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[10:30:03] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[10:31:04] *** Joins: djapo (~archangel@user/djapo)
[10:32:27] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[10:33:25] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:35:15] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:35:22] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Remote host closed the connection)
[10:36:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:36:57] *** Quits: noctavian_ (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[10:37:49] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[10:40:07] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[10:40:24] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:9971:284a:4dd6:16fd:f0a4)
[10:41:34] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:44:13] *** Joins: gtz (~gtz@46.251.99.222)
[10:44:18] *** Quits: p-i- (~Ohmu@mx-ll-171.6.227-183.dynamic.3bb.co.th) (Ping timeout: 250 seconds)
[10:44:20] <dontyouloveshort> hi
[10:46:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[10:46:18] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:48] *** Joins: seednode (~seednode@user/seednode)
[10:48:14] *** Joins: fikran (~fikran@user/fikran)
[10:49:52] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[10:51:28] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[10:55:44] *** Joins: CombatVet (~c4@user/combatvet)
[10:56:15] *** Joins: manti7 (~manti7@176.10.104.94)
[10:57:20] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[10:57:21] *** Joins: kosh (~kosh@user/kosh)
[10:57:52] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[10:57:55] <jezebel> Are type annotations encouraged for new code or only something you do if required?
[10:58:39] <gcbirzan> That's up to you.
[10:59:19] <jezebel> Kind of why I'm asking :D
[11:00:19] <The-Compiler> jezebel: Depends a bit. For simple (especially one-off) scripts I usually don't use them, but for anything vaguely more serious/complex, I use them
[11:00:51] *** Joins: gusto (~Augustus@109.255.100.54)
[11:01:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:04:18] * susam wonders if he is the only who dislikes the recent additions to Python
[11:12:11] *** Joins: ppang (~ppang@user/ppang)
[11:12:46] *** Quits: koperak (~koperak@79.191.34.223.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[11:13:16] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:13:34] *** Joins: palasso (~palasso@user/palasso)
[11:13:53] *** Joins: akaWolf (~akaWolf@akawolf.org)
[11:16:55] *** Joins: koperak (~koperak@79.191.34.223.ipv4.supernova.orange.pl)
[11:18:29] *** Quits: koperak (~koperak@79.191.34.223.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[11:19:50] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[11:20:03] *** Joins: CombatVet (~c4@user/combatvet)
[11:20:26] *** Joins: rendar (~rendar@user/rendar)
[11:21:34] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[11:22:15] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[11:22:58] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:23:41] *** Quits: akaWolf (~akaWolf@akawolf.org) (Remote host closed the connection)
[11:25:14] *** Joins: Lope (~lope@user/lope)
[11:25:49] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[11:26:03] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[11:26:31] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[11:30:35] *** Joins: koperak (~koperak@79.191.34.223.ipv4.supernova.orange.pl)
[11:31:15] <cheater> susam: like what additions?
[11:32:14] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Ping timeout: 244 seconds)
[11:32:32] *** Joins: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl)
[11:35:07] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[11:35:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[11:41:29] <The-Compiler> susam: you certainly aren't, see https://lwn.net/Articles/757713/ and https://lwn.net/Articles/759654/
[11:43:49] <gcbirzan> Eh, that's one thing from 3 years ago.
[11:44:08] <gcbirzan> and it, honestly, didn't go so badly, imo
[11:44:30] <gcbirzan> I don't see := used everywhere, destroying the purity and readability of the language
[11:45:09] *** Joins: pabs3 (~pabs3@user/pabs3)
[11:45:09] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[11:46:00] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:46:00] <susam> cheater: Such as type hints, walrus operator. I am not too fond of languages growing bigger. But this is a personal and subjective preference. I know there are many out there that like these things.
[11:46:09] <susam> The-Compiler: Thanks for the links. Good discussion in those articles.
[11:48:21] <pabs3> what is the current recommended packaging/build stuff for Python modules? for setuptools it seems to be pyproject.toml, setup.cfg with module metadata and a minimal setup.py that just calls setup()?
[11:48:38] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[11:48:39] *** Joins: oliver_ (~oliver@ip-37-188-160-26.eurotel.cz)
[11:48:45] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[11:49:00] *** Joins: akaWolf (~akaWolf@akawolf.org)
[11:49:02] <jinsun> setup.py is not really required, unless you want to do editable installs
[11:49:26] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:50:24] <The-Compiler> I really don't understand how people can develop without editable installs, I'm way too used to them
[11:51:08] *** Joins: gggp (~textual@60.10.194.43)
[11:51:40] *** Quits: gggp (~textual@60.10.194.43) (Client Quit)
[11:51:53] <The-Compiler> pabs3: yeah, see https://packaging.python.org/tutorials/packaging-projects/ for setuptools. Various projects seem to be using https://python-poetry.org/ nowadays.
[11:52:37] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[11:52:49] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[11:54:12] <jinsun> yeah I also keep the setup.py around because I also editale installs, hopefully with PEP 660 the need for setup.py will also go away
[11:55:10] *** Quits: koperak (~koperak@79.191.34.223.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[11:55:55] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[11:56:07] *** Quits: elezium (~elezium@modemcable039.188-176-173.mc.videotron.ca) (Quit: Konversation terminated!)
[11:56:57] <jezebel> is curio or trio easier to use?
[11:57:22] *** Joins: zamba (~marius@5.226.162.54)
[11:58:15] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[11:58:57] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 250 seconds)
[12:00:10] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 240 seconds)
[12:00:53] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:01:15] <BrenBarn> I'm not a fan of typing or walrus operator either
[12:01:56] <pabs3> hmm, whats the difference between pyproject.toml build-system.requires and the various setuptools {setup,install}_requires things?
[12:02:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[12:02:55] *** Joins: brelod (~me@87.74.198.187)
[12:03:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[12:05:12] <jinsun> built-system.requires tells pip what it needs to build your project (you can put setuptools + wheel there), install_requires is to tell what your package dependencies are
[12:05:34] <zamba> i'm still trying to figure out how to work with async.. i have a simple tcp client that will connect to a listening tcp socket and then interact with it.. it will first send a command and then await the response.. but i want to write the response from the server to a local file
[12:05:35] <jinsun> and setup_requires is a deprecated thing which was for similar thing as build-system.requires
[12:05:49] <zamba> so i guess i have to have an async with the local file handler as well?
[12:06:17] <zamba> client_stream = await anyio.connect_tcp(ip, port) ; async with client_stream:
[12:07:48] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[12:09:35] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:09:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:10:19] <rendar> jezebel, easier than asyncio?
[12:10:32] <jezebel> well compared with one another
[12:11:19] <jezebel> trio looks like curio with bells and whistles?
[12:11:28] <rendar> they are easier, in a way, than asyncio, trio and anyio are quite similar, anyio halted the support for curio
[12:12:18] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[12:12:23] <jezebel> why was that?
[12:12:34] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:12:52] <rendar> curio author requested explicitly that
[12:13:07] <rendar> so anyio is an abstraction between ayncio and trio
[12:13:16] <rendar> but its APIs are quite similar to trio, tho
[12:13:52] <aphysically> mypy --strict and pytype are both happy with my code but it looks like pyright has some spurious errors when it didn't resolve some type aliases in a few cases
[12:13:56] <jezebel> i don't know which of the two to choose
[12:14:14] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:14:36] <aphysically> however, pyright did catch a few spots where I could add exceptions
[12:15:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:42] <rendar> jezebel, i'd go with asyncio+anyio
[12:16:03] <rendar> jezebel, consider that many async libraries which exists for asyncio, won't exist for trio (yet)
[12:16:25] <jezebel> i just need a http client :)
[12:17:15] <supakeen> Then your question is a bit leading but `httpx` is a good HTTP client that does async.
[12:18:08] <aphysically> pylint is a bit aggressive with some of these suggestions
[12:20:46] <rendar> jezebel, go with aiohttp or httpx then
[12:20:48] <jezebel> i'll be using the async library for other things, but i will need a http client lib
[12:23:11] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:24:05] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[12:25:54] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[12:26:32] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[12:27:30] *** Joins: thomas00 (~thomas@89.44.10.167)
[12:27:54] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[12:28:26] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[12:28:51] <rendar> jezebel, then go with asyncio+anyio, godspeed my friend
[12:29:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[12:31:01] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[12:32:13] *** Joins: az (az@user/azz)
[12:33:36] *** Quits: k162 (k162@user/k162) (Remote host closed the connection)
[12:36:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:38] *** Joins: k162 (k162@user/k162)
[12:37:37] *** Quits: dasbootmir (~dasbootmi@user/dasbootmir) (Quit: dasbootmir)
[12:38:22] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:51] *** Joins: oskaro (~Thunderbi@213.236.200.7)
[12:39:10] *** Quits: doko (~doko@2a02:8106:1a:7600:b6cc:8eb5:99ac:edf6) (Ping timeout: 240 seconds)
[12:39:48] *** Joins: manti7 (~manti7@176.10.104.94)
[12:40:09] *** Quits: thomas00 (~thomas@89.44.10.167) (Quit: leaving)
[12:44:28] *** dcaro_away is now known as dcaro
[12:48:02] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:49:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 250 seconds)
[12:54:58] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[12:55:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[12:57:36] *** Joins: fikran (~fikran@user/fikran)
[13:01:54] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[13:02:36] *** Joins: Naan (~Naan@user/naan)
[13:02:47] *** Joins: maharshipatel (~maharship@103.250.137.155)
[13:02:50] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[13:03:15] <maharshipatel> hello everyone, have a good day or night.
[13:04:49] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[13:06:38] *** Joins: evilexec (~user@221.219.103.126)
[13:07:32] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:07:49] *** Joins: doko (~doko@2a02:8106:1a:7600:af01:3465:290:51db)
[13:07:57] *** Quits: uuair (~quassel@user/uuair) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:08:29] *** Joins: legola (~legola@46.235.100.27)
[13:08:35] *** Joins: lalitmee (~lalitmee@180.94.32.184)
[13:09:30] *** Joins: uuair (~quassel@user/uuair)
[13:09:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:11:32] *** Joins: billyrusso (~billyruss@111.93.81.198)
[13:11:37] *** Quits: billyrusso (~billyruss@111.93.81.198) (Client Quit)
[13:11:50] *** Parts: evilexec (~user@221.219.103.126) (ERC (IRC client for Emacs 28.0.50))
[13:11:52] *** Joins: billyrusso (~billyruss@111.93.81.198)
[13:12:01] *** Parts: billyrusso (~billyruss@111.93.81.198) ()
[13:13:04] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[13:14:28] *** Quits: lalitmee (~lalitmee@180.94.32.184) (Quit: Leaving)
[13:14:37] *** Joins: lalitmee (~lalitmee@180.94.32.184)
[13:14:43] *** Joins: billyrusso (~billyruss@111.93.81.198)
[13:14:45] *** Parts: billyrusso (~billyruss@111.93.81.198) ()
[13:14:47] *** Joins: jaggz (~jaggz@user/jaggz)
[13:15:15] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[13:15:16] <jaggz> why! ALSA lib pcm.c:8424:(snd_pcm_recover) underrun occurred
[13:16:03] <supakeen> Because there was not enough data in a buffer when it tried to read from it.
[13:16:09] <supakeen> But this doesn't really seem related to Python.
[13:16:20] <jaggz> so darned difficult to get some "simple" thing done, like transferring thousands of electrons finely controlled to regulate charges at high and low levels in order to convey a pattern of ...
[13:16:25] <jaggz> I mean, to play a darned sound file
[13:17:08] <jaggz> supakeen, seem?
[13:17:42] <jaggz> based on what?
[13:18:48] <kieto> How would you define that your pypi package needs 'wget' to work? where can you define that dependency?
[13:18:48] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:18:49] <jaggz> freakin irc
[13:19:28] <supakeen> kieto: You can't really, except in your README.
[13:19:48] <kieto> supakeen: that's what I thought, thanks
[13:19:58] <jaggz> supakeen, actually one nasty issue I just fixed was that I was sending each of my audio samples out with sd (sounddevice) .play(), without calling wait()
[13:20:05] <jaggz> but even with wait, it still underruns
[13:20:14] *** Joins: arinov (~arinov@213.194.126.155)
[13:20:28] <jaggz> (the lack of .wait() just meant it would interrupt each call with the new .25s of data)
[13:21:02] <supakeen> I think underruns are 'common' in audio/video land and not always the worst but not too good at audio :)
[13:21:10] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:22:10] <leduyquang753> Yeah that's exactly when YouTube displays that spinning icon.
[13:22:42] <supakeen> In some libraries I believe it means it's going to actively fetch data instead of you providing data but eh.
[13:23:16] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[13:23:22] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[13:23:34] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Client Quit)
[13:23:51] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[13:24:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:27:58] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[13:28:25] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Quit: Ping timeout (120 seconds))
[13:28:40] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[13:29:04] <jaggz> even assembling a few seconds of audio into one buffer and playing it, it still spits out underruns
[13:30:50] <supakeen> Perhaps there is something akin to buffer/fragment settings that might help?
[13:31:11] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[13:32:00] <jaggz> not sure yet.. lots of people experience it.  There are a bunch that pop out sometimes, even with a single sd.play() call
[13:33:07] <jaggz> so it might be some python threading issue, or it could be the underlying lib (I remember one page saying libsomething-or-other was flakey in linux)
[13:34:08] *** Quits: dre (~dre@2001:8003:c932:c301:64b7:95dc:bc24:e941) (Quit: Leaving)
[13:35:54] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[13:36:39] *** Joins: ice9 (~ice9@user/ice9)
[13:36:44] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:37:12] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:37:36] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:38:29] *** Quits: lalitmee (~lalitmee@180.94.32.184) (Quit: Leaving)
[13:38:46] *** Joins: lalitmee (~lalitmee@180.94.32.184)
[13:39:19] *** Joins: dreadedfrog (~user@193.160.129.69)
[13:39:31] *** Joins: ihristov (~ihristov@217.145.94.71)
[13:39:37] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:39:45] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:42:46] <jaggz> supakeen, this fixed it.. finally found a fix.. geez..
[13:42:50] <jaggz> been returning to that issue for weeks
[13:42:51] <jaggz> https://bbs.archlinux.org/viewtopic.php?id=185736
[13:43:17] <jaggz> in /etc/pulse/daemon.conf there are some commented-out defaults, but I used the author's:
[13:43:23] <jaggz> default-fragments = 5
[13:43:23] <jaggz> default-fragment-size-msec = 2
[13:44:24] *** Joins: jmft2 (~JMFT@82.3.54.26)
[13:44:46] <rendar> is that true that since py3 is backward compatible with py2, this lagged the p3 adoption?
[13:44:51] <rendar> py*
[13:45:12] <leduyquang753> Did you mean a not there?
[13:45:33] <rendar> nope
[13:45:43] <leduyquang753> Python 3 is not compatible with Python 2 code.
[13:46:18] <bjs> rendar: you cannot even run Python 2's "hello world" in Python 3
[13:46:39] <bjs> rendar: it was the fact it *wasn't* backwards compatible that lagged python3 adoption in some sense
[13:47:57] *** Joins: darksun (~darksun@user/darksun)
[13:48:01] <rendar> i see
[13:48:06] <rendar> i think my book is wrong then
[13:48:58] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[13:49:06] <rendar> Expert Python Programming - Jaworski - page 71: he says py3 *isn't* backward incompatible... *in*compatible
[13:49:45] <no_gravity> When an integer changes, it seems to usually be 32 bytes apart from the last integer that changed: https://www.online-python.com/roUJYCBlw6
[13:49:54] <no_gravity> Does that indicate that Python integers take 32 bytes?
[13:50:40] <frrs> rendar: the book sounds correct
[13:50:47] <supakeen> jaggz: Yay :)
[13:51:13] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:51:14] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[13:51:21] <rendar> frrs, huh? if someone says that py3 isn't backward-*in*compatible with py2, it means that py3 IS backward-compatible with py2, no?
[13:51:33] *** Quits: brelod (~me@87.74.198.187) (Quit: leaving)
[13:51:40] <The-Compiler> rendar: that seems like a typo, I just read the text on Google Books
[13:51:51] <rendar> The-Compiler, yes, i agree
[13:51:55] <rendar> it is surely a typo
[13:52:05] <The-Compiler> rendar: given that it's followed up with "This is the main reason why it took so many years for the Python community to fully embrace it."
[13:52:14] <leduyquang753> The "in" prefix means "not".
[13:52:22] <leduyquang753> "incompatible" means not compatible.
[13:52:27] <rendar> leduyquang753, yeah, that's the point
[13:52:35] <rendar> leduyquang753, 2 fales = 1 true
[13:52:37] <The-Compiler> leduyquang753: yes, thus "isn't incompatible" is wrong
[13:52:41] <rendar> false*
[13:53:10] <bjs> no_gravity: no
[13:53:39] <bjs> no_gravity: also this code isn't "changing integers" at all
[13:54:02] <no_gravity> bjs: Is the 32 byte alignment for performance then?
[13:54:33] <bjs> no_gravity: no, I bet if you increase the number from 10 to like 1000 you'll start to see a very different pattern
[13:55:06] <leduyquang753> Python integers are big ints, 32 bytes are never enough.
[13:55:20] <bjs> leduyquang753: 32 bytes are certainly enough for 1-10
[13:55:43] <leduyquang753> I am mentioning "Does that indicate that Python integers take 32 bytes?".
[13:55:45] <no_gravity> bjs: I also see it in lists: https://www.online-python.com/bct7ped8rj
[13:56:00] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:56:06] <The-Compiler> rendar: might want to submit it here: https://www.packtpub.com/support/errata
[13:56:13] <bjs> no_gravity: please stop doing these kinds of tests,  if you come here and ask "How can I tell how big a Python int is" we can tell you
[13:56:13] <rendar> yes
[13:57:09] <bjs> no_gravity: but, all Python objects have some overhead (I can't remember how much but generally ~10 bytes or so for a generic header) then ints have a little more overhead, and then there's a variable sized block because Python ints are unbounded.
[13:57:31] <bookworm> The-Compiler , rendar packt is a really low quality publisher, stuff from them usually contains errors. If I were you grab a different book altogether
[13:58:14] <rendar> bookworm, i agree, but oreilly doesn't have such py books with the latest features
[13:58:16] <bjs> no_gravity: 0 will be smaller than all other ints since it doesn't need the variable block part, "small" numbers might use a couple bytes more, and the size will keep growing as you add more and more digits
[13:58:27] <rendar> this book is about py 3.9, nobody has that
[13:58:46] <bjs> no_gravity: you can use sys.getsizeof(some_obj) to get the size of the object (this does not follow references, so for lists it's just the size of the container not its contents)
[13:58:49] <no_gravity> bjs: Ints are not fixed size?
[13:58:59] <bjs> no_gravity: there is no "largest" int
[13:59:06] <bjs> you can always +1 to a Python int and get the next integer
[13:59:29] <nedbat> no_gravity: ints are not fixed size.
[14:00:35] <no_gravity> Interesting
[14:00:37] <Helle> Python 3 switches to bigint (similar to Python 2's long type) internally automagically
[14:01:03] <rendar> i have also discovered an aioconsole bug: https://github.com/vxgmichel/aioconsole/issues/86
[14:01:05] <nedbat> Helle: more accurately, in Python 3, all ints are bigint
[14:01:12] <Helle> nedbat: eeeh, sort of
[14:01:17] <Helle> nedbat: technically yes
[14:01:23] <nedbat> Helle: why not, "yes" ?
[14:01:25] <bjs> no_gravity: your test is also extra confused because it's not almost certainly creating new integer objects at all
[14:01:26] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:01:38] <The-Compiler> rendar: I think it makes sense for a book to focus on the newest Python version. It'll get more adaption over time (without the book necessarily needing an update), and most of what you learn will be just as applicable for 3.8 or 3.7
[14:01:41] <bjs> uh that was badly phrased, "almost certainly not creating..."*
[14:01:53] <Helle> nedbat: it depends on how you define what part is bigint :) but that gets into compsci + philosophy
[14:01:58] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:01:59] <rendar> The-Compiler, i agree
[14:02:04] <Helle> nedbat: so it's nitpicking
[14:02:13] <bjs> nedbat: I mean Python 2 used to have two types, int and long
[14:02:22] <nedbat> Helle: the representation of 1 is the same as 10000000000, the only difference is how many bytes are used.
[14:02:25] <nedbat> bjs: yes.
[14:02:31] <bjs> uh
[14:02:37] <bjs> I meant to cc Helle
[14:02:50] <no_gravity> Ha, the 32 byte stepsize changes at the 257th integer: https://www.online-python.com/oXyusFdwPh
[14:02:56] <bjs> It wasn't just an internal representation size
[14:02:59] <Helle> nedbat: yeah, but the fits in a single platform int version is shortcut handled (and hence faster)
[14:03:00] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:bdb0:1299:ed93:e6f9)
[14:03:07] <nedbat> no_gravity: again, you are not detecting what you think you are
[14:03:09] <bjs> no_gravity: yes but not because the int representations changes at 257
[14:03:17] <nedbat> Helle: i need to look into that
[14:03:32] <no_gravity> nedbat: How do you know what I think?
[14:03:41] <Helle> nedbat: I would as well to be 100% if that is the case in the actual implementation, it was mentioned in a discussion
[14:03:49] <nedbat> no_gravity: maybe i don't :)  What does your test tell you?
[14:04:18] <Helle> nedbat: but if it is I would say "switches" to bigint above that point, but, you can just as well say that the bigint implementation includes an optimised case
[14:04:44] <Helle> nedbat: and both of use would be right, we just need to figure out which definition is useful for a given case and define it
[14:04:49] <no_gravity> nedbat: That the stepsize changed after 256 ints.
[14:04:56] <bjs> no_gravity: "step size" ?
[14:05:03] <nedbat> no_gravity: what do you mean by stepsize?
[14:05:11] <Helle> I prefer the "switches" so people aren't like OMG, it is so slow to use bigints for everything
[14:05:26] <nedbat> no_gravity: bjs made an important point: not all these ints are allocated as you need them
[14:06:02] <nedbat> (well, important to this discussion, not important to real programs)
[14:06:06] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[14:06:26] <nedbat> we literally discussed this very topic on a podcast that came out yesterday: https://nedbatchelder.com/blog/202108/me_on_bug_hunters_caf.html
[14:06:30] <bjs> nedbat: it's okay, my points aren't important to real programs :(
[14:06:41] <supakeen> Are we gatekeeping real programs? :>
[14:06:46] <Helle> supakeen: yes
[14:07:56] <no_gravity> After 256 ints, the data ends up somewhere completely different in memory: https://www.online-python.com/j5QLXDn8SV
[14:08:01] <nedbat> no_gravity: yes
[14:08:06] <no_gravity> Maybe it is some kind of memory paging / chunks.
[14:08:12] <nedbat> no_gravity: it's interning small ints
[14:08:34] <nedbat> no_gravity: 1 is always the same object, 1001 is always a different object
[14:09:01] <no_gravity> nedbat: "interning"?
[14:09:21] <nedbat> no_gravity: keep an object forever because we think it will be useful in the future.
[14:09:27] <no_gravity> nedbat: I see
[14:09:28] <nedbat> no_gravity: and pre-make them.
[14:09:37] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Read error: Connection reset by peer)
[14:09:40] *** Quits: ouzel8_ (~ouzel8_@shams.boastblast.com) (Remote host closed the connection)
[14:09:46] <no_gravity> So integers 0-256 are pre-made in CPython?
[14:09:53] <no_gravity> 0-255 probably
[14:09:56] *** Quits: tgamblin (~tgamblin@cpe64777de11593-cm64777de11590.cpe.net.cable.rogers.com) (Remote host closed the connection)
[14:09:59] *** Joins: ouzel8_ (~ouzel8_@shams.boastblast.com)
[14:10:04] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[14:10:07] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[14:10:16] *** Parts: pabs3 (~pabs3@user/pabs3) (Don't rest until the streets are paved in poems.)
[14:10:55] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[14:10:59] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0:fa88:8bc5:c0d2:27cc)
[14:11:00] *** Joins: dulanic4 (~dulanic@47.187.144.163)
[14:11:01] <supakeen> Generally, it depends on a few things.
[14:11:10] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 252 seconds)
[14:11:14] <nedbat> no_gravity: also -5 to 0 i think
[14:11:23] <no_gravity> nedbat: I see
[14:11:25] <no_gravity> After 256, wild oscillations occur: https://www.online-python.com/JCDQh5nGw1
[14:11:31] *** Joins: lxdr2 (~lxdr@user/lxdr)
[14:11:34] *** Quits: dgw (dgw@sopel/admin/dgw) (Remote host closed the connection)
[14:11:43] *** Quits: shailangsa (~shailangs@host86-185-102-120.range86-185.btcentralplus.com) (Ping timeout: 252 seconds)
[14:11:47] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 240 seconds)
[14:11:50] *** Joins: philipp64|work_ (~philipp64@174.27.28.163)
[14:12:05] <no_gravity> Looks like collatz conjecture :)
[14:12:15] *** Joins: dgw (dgw@sopel/admin/dgw)
[14:12:16] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[14:12:16] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: asix (~Anders@user/asix) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: steam (~steam@user/steam) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 252 seconds)
[14:12:16] *** Quits: pr3d4t0r (~zhenya01@user/pr3d4t0r) (Ping timeout: 252 seconds)
[14:12:16] *** philipp64|work_ is now known as philipp64|work
[14:12:27] *** Quits: emika (~emika@185.207.249.191) (Ping timeout: 240 seconds)
[14:12:48] <supakeen> It's just that after you pass out of the interned integers which are neatly laid out in memory it starts allocating and reallocating.
[14:12:49] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[14:12:49] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 252 seconds)
[14:12:49] *** Quits: lxdr (~lxdr@user/lxdr) (Ping timeout: 252 seconds)
[14:12:49] *** lxdr2 is now known as lxdr
[14:12:49] *** dulanic4 is now known as dulanic
[14:13:06] *** Joins: kcrk (~kcrk@user/kcrk)
[14:13:06] *** Quits: duoi (~duoi@user/duoi) (Excess Flood)
[14:13:07] <no_gravity> supakeen: Ah! Makes sense.
[14:13:21] *** Joins: emika (~emika@83.136.182.28)
[14:13:22] *** Quits: zamba (~marius@5.226.162.54) (Ping timeout: 252 seconds)
[14:13:36] <nedbat> and there are probably freelists involved, etc.
[14:13:40] *** Joins: duoi (~duoi@user/duoi)
[14:13:40] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 240 seconds)
[14:13:40] *** Joins: fdaapproved (~fedorafan@user/fedorafan)
[14:13:45] *** Joins: asix (~Anders@user/asix)
[14:13:54] <supakeen> Yes, it's a bit more convoluted than that :)
[14:13:55] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 252 seconds)
[14:14:01] *** Joins: tg (~tg@rockylinux/infra/tg)
[14:14:01] *** Joins: Moyst (~moyst@user/moyst)
[14:14:11] *** Joins: steam (~steam@user/steam)
[14:14:20] *** Joins: upsala (~zcb@185.213.155.160)
[14:14:27] *** Joins: b0nn (~shane@user/b0nn)
[14:14:27] <fdaapproved> morning fans
[14:14:32] *** Joins: Keira (~k@lulzsec.co.uk)
[14:14:34] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[14:14:36] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: Ping timeout (120 seconds))
[14:14:38] <supakeen> (though does it actually use freelists?)
[14:14:54] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[14:15:04] *** Joins: sgn (~sgn@user/sgn)
[14:15:54] *** Joins: m4v (~znc@ubuntu/member/m4v)
[14:17:11] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[14:17:13] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:17:56] <nedbat> supakeen: i thought so, but i don't know for sure
[14:18:03] <nedbat> fdaapproved: hey there
[14:18:06] *** Joins: legola (~legola@46.235.100.27)
[14:18:17] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[14:18:24] <supakeen> It'd make sense for the integers I guess, mostly same-sized blocks.
[14:18:31] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[14:18:44] <fdaapproved> o/
[14:19:07] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[14:19:35] *** Quits: ihristov (~ihristov@217.145.94.71) (Quit: Connection closed)
[14:22:10] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[14:22:27] *** Joins: xx (~xx@user/xx)
[14:22:41] *** Joins: Adoi (~Adoi@user/adoi)
[14:25:00] *** Joins: JavaBean (~JavaBean@user/javabean)
[14:25:58] *** Quits: kmh (~kmh@p5dcc6d4e.dip0.t-ipconnect.de) (Quit: Leaving)
[14:27:17] *** Joins: librenaut (~librenaut@user/librenaut)
[14:27:53] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:28:00] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:28:17] *** Joins: mickey (~user@user/mickey)
[14:29:01] *** Joins: dvx (~dvx@185.63.97.64)
[14:29:44] *** Joins: Naan` (~Naan@user/naan)
[14:30:47] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[14:33:07] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[14:33:47] <maharshipatel> Given a non-empty list of positive integers l and a target positive integer t, write a function solution(l, t) which verifies if there is at least one consecutive sequence of positive integers within the list l (i.e. a contiguous sub-list) that can be summed up to the given target positive integer t (the key) and returns the lexicographically
[14:33:48] <maharshipatel> smallest list containing the smallest start and end indexes where this sequence can be found, or returns the array [-1, -1] in the case that there is no such sequence. i have this code : i need help in improving it. please share your feedback  : https://bpa.st/B4OQ
[14:34:07] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[14:38:31] *** Joins: y1n (~y1n@84-115-64-66.wifi.dynamic.surfer.at)
[14:38:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[14:39:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[14:40:11] *** Quits: steam (~steam@user/steam) (Remote host closed the connection)
[14:40:44] *** Quits: fxrs (~fxrs@192.227.212.130) (Quit: ZNC 1.7.x-git-653-187f617 - http://znc.in)
[14:40:59] *** Joins: fxrs (~fxrs@192.227.212.130)
[14:41:00] *** Joins: steam (~steam@user/steam)
[14:42:27] *** Quits: duoi (~duoi@user/duoi) (Ping timeout: 240 seconds)
[14:45:20] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[14:46:07] *** Quits: dreadedfrog (~user@193.160.129.69) (Ping timeout: 240 seconds)
[14:46:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:46:18] *** Joins: mcglk (~mcglk@131.191.49.120)
[14:46:20] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:47:14] *** Joins: duoi (~duoi@user/duoi)
[14:48:02] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[14:48:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:48:34] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[14:52:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:53:47] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[14:53:53] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[14:54:01] *** Quits: hyper_dave (~hyper_dav@197.156.86.185) (Ping timeout: 250 seconds)
[14:54:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:55:43] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[14:55:46] *** Joins: mumixam (~m@user/mumixam)
[14:56:34] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[14:57:01] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:57:31] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[14:58:28] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:59:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:59:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:24] *** Joins: besnn (~besnn@user/besnn)
[15:00:40] *** Quits: oliver_ (~oliver@ip-37-188-160-26.eurotel.cz) (Remote host closed the connection)
[15:01:12] *** Joins: hyper_dave (~hyper_dav@197.156.107.98)
[15:02:43] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[15:03:49] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[15:04:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:04:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[15:04:51] *** Quits: fdaapproved (~fedorafan@user/fedorafan) (Ping timeout: 250 seconds)
[15:05:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:06:58] *** Joins: fikran (~fikran@user/fikran)
[15:08:58] *** Joins: lalitmee_ (~lalitmee@180.94.33.242)
[15:10:38] *** Quits: jezebel (~Guest99@user/jezebel) (Quit: Client closed)
[15:10:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:11:07] *** Quits: lalitmee (~lalitmee@180.94.32.184) (Ping timeout: 240 seconds)
[15:11:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:12:13] *** Quits: y1n (~y1n@84-115-64-66.wifi.dynamic.surfer.at) (Ping timeout: 250 seconds)
[15:13:37] *** Joins: bugsniper (~bugsniper@cpe-24-24-180-229.socal.res.rr.com)
[15:15:33] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:16:16] <DnzAtWrk> odd
[15:16:24] <DnzAtWrk> created a second conda environment while running a previous one
[15:16:36] <DnzAtWrk> then I tried deleting it, and the DLL files were in use
[15:16:43] <DnzAtWrk> until I closed both environments
[15:18:01] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[15:19:08] *** Joins: bertieb (~bertieb@217.155.39.147)
[15:19:37] *** Joins: borisvelion (~borisveli@178.233.22.90)
[15:20:12] <jinsun> you were deleting it with rm -rf? or conda env remove
[15:21:00] <DnzAtWrk> I wouldn't use conda in linux
[15:21:08] <DnzAtWrk> I only use it because of the insanity of deps in windows
[15:21:43] <DnzAtWrk> in linux I just create virtualenvs with pip
[15:21:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:21:59] <jinsun> well that was not linux specific command, rm can be installed on windows
[15:22:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:00] <DnzAtWrk> yes but you'd have to be pretty crazy to try to emulate linux in windows
[15:24:02] <DnzAtWrk> for no real reason
[15:24:17] <DnzAtWrk> it's like installing cygwin
[15:24:38] <DnzAtWrk> the right tool for the job
[15:24:49] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[15:25:45] *** Joins: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at)
[15:27:28] <Repiphany> WSL is pretty good nowadays
[15:27:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:28:06] *** Joins: dreadedfrog (~user@193.160.129.69)
[15:28:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:28:54] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[15:29:44] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[15:29:56] <jean-luc> its not an emulation
[15:30:04] <jean-luc> read about wsl before you assume you know what you talking about
[15:30:17] <jean-luc> (there is a physical linux kernel running)
[15:30:38] <DnzAtWrk> I know
[15:30:41] <DnzAtWrk> that's the issue
[15:30:44] <nedbat> jean-luc: that sounded a bit harsh
[15:30:49] <DnzAtWrk> you are running a linux emulator in windows
[15:30:56] <DnzAtWrk> call it what you want
[15:31:03] <jean-luc> *facepalm*
[15:31:10] *** Quits: p-i-_ (~Ohmu@2403:6200:8870:9971:284a:4dd6:16fd:f0a4) (Remote host closed the connection)
[15:31:29] *** Joins: lalitmee__ (~lalitmee@180.94.33.78)
[15:31:57] <jean-luc> we just redefining english in here
[15:31:58] <DnzAtWrk> I prefer to leave that to virtualbox if I truly need a linux environment
[15:32:05] <jean-luc> emulation is not an emulation
[15:32:08] <DnzAtWrk> no, you just have a limited definiton of emulated
[15:32:13] * jean-luc updates ignores
[15:32:20] <nedbat> jean-luc, DnzAtWrk: this seems off-topic anyway
[15:32:21] <DnzAtWrk> go ahead
[15:32:39] <nedbat> if you want to debate definitions, perhaps it's better to explain why it matters.
[15:32:49] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[15:32:50] *** Quits: y1n (~y1n@84-115-65-210.wifi.dynamic.surfer.at) (Remote host closed the connection)
[15:33:40] <DnzAtWrk> meh, not a fan of faked indignation
[15:33:47] *** Quits: lalitmee_ (~lalitmee@180.94.33.242) (Ping timeout: 240 seconds)
[15:33:55] <nedbat> sadly, i'm not sure it's faked
[15:34:11] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[15:34:15] <DnzAtWrk> and sure, technically it's probably virtualization
[15:34:30] <DnzAtWrk> but everyone understands what I meant
[15:34:33] *** Joins: brelod (~me@87.74.198.187)
[15:35:01] *** Joins: legola (~legola@46.235.100.27)
[15:35:29] <DnzAtWrk> apparently not that either
[15:36:15] <DnzAtWrk> it's just linux software compiled for windows
[15:37:03] *** Quits: daoudr_ (~daoudr@101.17.104.92.dynamic.wline.res.cust.swisscom.ch) (Quit: Leaving)
[15:37:57] *** Joins: Gurkenglas (~Gurkengla@dslb-088-064-053-140.088.064.pools.vodafone-ip.de)
[15:38:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:40:04] <Gurkenglas> What am I doing wrong here? https://colab.research.google.com/drive/1BVMgjc_S1b5nVvwnshD_usxGUU2_Pw0l
[15:40:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:40:20] <anorthall> Gurkenglas: we can't access that link
[15:40:36] *** Joins: nomic (~nomic@185.192.69.143)
[15:40:46] <Gurkenglas> https://colab.research.google.com/drive/1BVMgjc_S1b5nVvwnshD_usxGUU2_Pw0l?usp=sharing <- this should work?
[15:41:17] <anorthall> yes, that works
[15:41:25] *** Joins: gggp (~textual@123.113.176.64)
[15:41:37] <jmft2> Can I trick a subprocess into thinking that it's writing to a file when in fact it's just writing to a stream? I have a program, flac, which behaves differently depending on whether it's writing to a file or to stdout. I want to use it but don't want to actually create a new file.
[15:41:41] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:41:44] <anorthall> Gurkenglas: have you tried pip install utee
[15:41:53] <Gurkenglas> yeah, didnt work
[15:42:33] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:8e6f:872f:4d9e:4630)
[15:43:33] <DnzAtWrk> jmft2, if it's another program doing it, not sure how you could change it in python
[15:43:35] <DnzAtWrk> but you can use tempfile
[15:44:17] <jmft2> tempfile is probably the way
[15:44:21] <DnzAtWrk> I assume flac fully expects to use the filesystem
[15:44:35] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[15:44:49] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[15:45:20] <DnzAtWrk> remember tho
[15:45:27] *** Quits: gggp (~textual@123.113.176.64) (Ping timeout: 240 seconds)
[15:45:29] <DnzAtWrk> "Unlike TemporaryFile(), the user of mkstemp() is responsible for deleting the temporary file when done with it."
[15:46:20] <DnzAtWrk> (and now someone has a "oh shit" experience)
[15:46:39] <jmft2> Why you would use mkstemp instead of TemporaryFile?
[15:46:39] <DnzAtWrk> dunno, I didn't know TemporaryFile was a thing
[15:46:43] *** Parts: Lope (~lope@user/lope) (Leaving)
[15:47:06] <jmft2> NamedTemporaryFile, actually
[15:49:10] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[15:51:53] *** Joins: computeiro (~Wender@189.37.69.200)
[15:52:00] *** Joins: cutotopo (~cutotopo@151.95.85.46)
[15:53:32] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[15:53:50] <DnzAtWrk> right
[15:53:57] <DnzAtWrk> you can just fake a file in ram anyway
[15:54:04] <DnzAtWrk> https://unix.stackexchange.com/questions/188536/how-to-make-a-temporary-file-in-ram
[15:54:06] <DnzAtWrk> Forgot about that
[15:54:13] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[15:54:39] <DnzAtWrk> "tmpfs is a temporary filesystem that resides in memory and/or swap partition(s)"
[15:55:32] *** Joins: liblame (~liblame@p200300dd6713dd0088713d01419f126f.dip0.t-ipconnect.de)
[15:55:42] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[15:56:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[15:57:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[15:57:52] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[15:57:54] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Read error: Connection reset by peer)
[15:58:42] <The-Compiler> jmft2: how is flac behaving differently? Maybe there's an option to do the same?
[15:59:08] <jmft2> DnzAtWrk: Smart!
[15:59:09] <The-Compiler> jmft2: also, for many CLI tools you can use "-" as a filename to mean stdin/stdout
[15:59:22] <The-Compiler> DnzAtWrk: that's quite OS specific though
[15:59:26] *** Joins: Freple (~Freple@dynamic-adsl-94-34-3-33.clienti.tiscali.it)
[16:00:19] <DnzAtWrk> indeed
[16:00:37] <DnzAtWrk> heh, somebody wrote a tempfile module for tmpfs
[16:01:40] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[16:01:41] <DnzAtWrk> tmpfs/ramfs
[16:02:51] *** Joins: tx8r (~tx8r@gateway/tor-sasl/tx8r)
[16:02:57] *** Joins: gggp (~textual@221.219.70.145)
[16:03:12] <jmft2> The-Compiler: flac, you can run with `flac -c ...` to write to stdout, or `flac -o output.flac -s ...` to write to a file with seekpoints (-s), but you can't write seekpoints when writing to stdout (no idea why). I tried `flac -o - -s ...`, doesn't trick it :-)
[16:03:17] *** Joins: betuxy (~ole@158.181.77.59)
[16:03:35] *** Quits: gggp (~textual@221.219.70.145) (Client Quit)
[16:05:37] <betuxy> Hey guys, I want to open a log file, and get the newest logs coming from kernel as well. How do i open a file in a 'tail -f' way?
[16:05:48] <The-Compiler> jmft2: huh, odd. What about using /dev/stdout as file?
[16:05:55] <deniska> jmft2: I looked up the docs, -s stands for "silent"
[16:06:13] <jmft2> deniska: Ah, my bad! Seekpoints issue stands, though.
[16:06:14] <The-Compiler> deniska, jmft2: -S rather than -s I suppose?
[16:06:39] <jmft2> The-Compiler: No good, you'd be overwriting the file /dev/stdout (!) rather than streaming to it
[16:06:43] <anorthall> betuxy: make a loop that checks the files for changes?
[16:06:58] <deniska> "NOTE: -S #x and -S #s will not work if the encoder can't determine the input size before starting"
[16:06:59] <The-Compiler> jmft2: that's not how /dev/stdout works though, I'm pretty sure it'll work as intended
[16:07:28] *** Quits: Freple (~Freple@dynamic-adsl-94-34-3-33.clienti.tiscali.it) (Remote host closed the connection)
[16:07:38] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[16:08:14] <The-Compiler> jmft2: hm, okay, no, doesn't seem to work
[16:08:16] *** Joins: rsx (~dummy@ppp-188-174-134-41.dynamic.mnet-online.de)
[16:08:45] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[16:08:50] <The-Compiler> test.wav: WARNING, cannot write back seekpoints when encoding to stdout
[16:08:52] <The-Compiler> hm
[16:09:02] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[16:09:15] <The-Compiler> I guess it's implemented in a way it writes the data first, and then goes over the data a second time or something
[16:09:53] <jmft2> I've had to go with the tempfile solution. BUT not quite - because TemporaryFile() actually creates the file for you, really I just need the filename since flac will create the file. So really I need a TemporaryDirectory()
[16:11:40] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:12:39] *** Joins: LiSyn (~lisyn@user/deepspace-link)
[16:13:01] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[16:14:41] *** Quits: borisvelion (~borisveli@178.233.22.90) (Quit: Client closed)
[16:17:02] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:8e6f:872f:4d9e:4630) (Remote host closed the connection)
[16:17:53] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:18:03] *** Joins: legola (~legola@46.235.100.27)
[16:18:09] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:18:33] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:18:56] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[16:19:20] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[16:19:23] *** Joins: p-i- (~Ohmu@2403:6200:8870:9971:bd80:140d:272d:92d7)
[16:20:11] *** Joins: roniez (~roniez@nixsec.se)
[16:20:14] *** Quits: legola (~legola@46.235.100.27) (Client Quit)
[16:20:17] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Client Quit)
[16:20:28] *** Joins: zamba (~marius@5.226.162.54)
[16:21:06] <zamba> i have a roughly 100 MB buffer.. that consist of 2048 bytes "chunks".. i want to iterate over this buffer one chunk at a time.. what is the most efficient way of doing that?
[16:21:22] *** Joins: c10l (~c10l@89.34.167.207)
[16:21:37] <zamba> preferably without maintaining counters and stuff.. i just want to "read" off 2048 from the beginning of the buffer until it's "empty"
[16:21:52] <zamba> i could do this off disk, but reading 2048 bytes at a time is terribly inefficient
[16:22:50] <graingert[m]> ChrisWarrick you might be interested in https://github.com/python/cpython/pull/26883
[16:23:43] *** Quits: p-i- (~Ohmu@2403:6200:8870:9971:bd80:140d:272d:92d7) (Ping timeout: 250 seconds)
[16:24:20] *** Joins: legola (~legola@46.235.100.27)
[16:27:11] *** Quits: roniez (~roniez@nixsec.se) (Ping timeout: 250 seconds)
[16:28:52] *** Quits: cutotopo (~cutotopo@151.95.85.46) (Quit: cutotopo)
[16:29:20] *** Joins: cutotopo (~cutotopo@151.95.85.46)
[16:29:33] *** Quits: cutotopo (~cutotopo@151.95.85.46) (Remote host closed the connection)
[16:30:00] *** Joins: cutotopo (~cutotopo@151.95.85.46)
[16:30:54] *** Quits: cutotopo (~cutotopo@151.95.85.46) (Client Quit)
[16:31:23] *** Joins: cutotopo (~cutotopo@151.95.85.46)
[16:32:08] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[16:32:27] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 240 seconds)
[16:32:30] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:32:42] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 250 seconds)
[16:32:48] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:33:03] *** Joins: someguy1233 (~someguy@user/someguy123)
[16:33:07] *** Quits: cutotopo (~cutotopo@151.95.85.46) (Client Quit)
[16:33:26] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[16:33:45] *** Joins: cutotopo (~cutotopo@151.95.85.46)
[16:33:48] *** Quits: cutotopo (~cutotopo@151.95.85.46) (Remote host closed the connection)
[16:34:26] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[16:35:07] *** Quits: someguy123 (~someguy@user/someguy123) (Ping timeout: 240 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:21] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:38:34] <lericson> I wish I could 80-column format my Python code in Jupyter
[16:39:46] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[16:39:49] *** Joins: Proxysna_ (~Proxysna@185.251.89.199)
[16:40:51] <maharshipatel> i want to convert list of list in which i have numbers and i want to convert them in intergers can someone tell me what is the best way to do it. thank you
[16:41:15] <lericson> use int()
[16:42:10] *** Joins: p-i- (~Ohmu@2403:6200:8870:9971:546d:7354:4fd1:9dfc)
[16:42:17] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Ping timeout: 248 seconds)
[16:42:42] *** Quits: dld (~davidlowr@2601:197:600:1210:f4d9:1621:568b:bc19) (Ping timeout: 258 seconds)
[16:43:09] <The-Compiler> lericson: FWIW there are plugins to run black in Jupyter
[16:43:56] <lericson> i just want the vim mode to know about gq
[16:44:02] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[16:44:04] <lericson> nothing is ever as good as actual vim :(
[16:44:36] *** Joins: txtsd (~txtsd@user/txtsd)
[16:45:12] *** Joins: zeden (~zeden@user/zeden)
[16:50:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[16:51:24] <The-Compiler> lericson: The Vim plugin of VS Code works with its new notebook support FWIW
[16:51:35] *** Joins: arinov (~arinov@178.240.152.159)
[16:51:50] <lericson> i tried VSCode's jupyter stuff and i was very much not impressed
[16:51:51] <frrs> You can run black from vim, lericson, what's the issue?
[16:52:13] <The-Compiler> lericson: it was reimplemented recently, to be based on native editing support rather than a webview
[16:52:39] <frrs> Ah you are using Jupyter
[16:53:28] <lericson> The-Compiler: vscode you mean?
[16:53:34] <The-Compiler> lericson: yes
[16:53:52] <The-Compiler> lericson: i.e. the Jupyter support in VS Code
[16:54:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[16:54:31] *** Joins: roniez (~roniez@nixsec.se)
[16:54:49] <lericson> i find vscode itself a less than exhilirating experience
[16:55:20] *** Joins: Proxysna__ (~Proxysna@62.119.254.142)
[16:55:20] <lericson> exhilarate apparently
[16:56:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:57:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[16:57:27] *** Quits: Proxysna_ (~Proxysna@185.251.89.199) (Ping timeout: 240 seconds)
[16:57:40] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:57:55] *** Joins: maroloccio (~marolocci@37.100.40.252)
[16:57:57] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 250 seconds)
[16:59:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[16:59:47] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:9e48:fa12:e9db:90da) (Ping timeout: 240 seconds)
[17:00:02] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:01:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:01:16] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:01:22] *** Joins: plastico (~plastico@neomutt/plastico)
[17:03:22] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:07:28] <DnzAtWrk> TIL that github can show jupyter pages
[17:07:47] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[17:08:16] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[17:08:23] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[17:08:53] *** Quits: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud) (Remote host closed the connection)
[17:09:21] *** Quits: ogis_ (~Android@p1927250-omed01.osaka.ocn.ne.jp) (Read error: Connection reset by peer)
[17:09:42] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[17:10:27] *** Joins: besnn (~besnn@user/besnn)
[17:10:42] *** Quits: maroloccio (~marolocci@37.100.40.252) (Quit: WeeChat 3.0)
[17:11:33] *** Joins: maroloccio (~marolocci@37.100.40.252)
[17:11:55] <lericson> pretty useful actually
[17:12:22] <DnzAtWrk> jupyter is an amazing learning tool
[17:12:25] <DnzAtWrk> shame it's rather bloated
[17:13:28] <lericson> it's pretty slow also
[17:14:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[17:14:31] <DnzAtWrk> imo, teaching students to use intepreters to get instant results can be very helpful in learning
[17:14:36] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[17:14:41] <DnzAtWrk> like the python/r/matlab command line
[17:14:49] *** Quits: binchickin (~binchicki@165.22.169.69) (Ping timeout: 248 seconds)
[17:14:50] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:14:57] <DnzAtWrk> being able to experiment in real-time can be so useful
[17:15:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:16:18] *** Quits: maroloccio (~marolocci@37.100.40.252) (Client Quit)
[17:16:20] *** Joins: fikran (~fikran@user/fikran)
[17:16:20] <lericson> i use jupyter all the time
[17:16:37] <DnzAtWrk> I've used it to demonstrate machine learning processes to coworkers
[17:17:13] <lericson> i think it's not only useful for showing others, but for writing code in a more journal-oriented way, "we want to do x, let us begin with y"
[17:17:16] <DnzAtWrk> did jupyter support collasible code?
[17:17:18] *** Joins: binchickin (~binchicki@165.22.169.69)
[17:17:22] <DnzAtWrk> I think that was one of my main gripes
[17:17:26] <DnzAtWrk> collapsible*
[17:17:58] *** Joins: maroloccio (~marolocci@37.100.40.252)
[17:17:58] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[17:18:17] <ExeciN> Hi people. I'm trying to use bandersnatch to mirror a pypi repo but when it tries to reach /pypi it fails. I believe the repo I'm trying to mirror only serves the index under /simple
[17:18:32] <ExeciN> how could I make such a mirror?
[17:18:42] <lericson> i find that if i do things with the intent to show others, that helps me the most in the end -- my future self is often the "others"
[17:18:47] *** Joins: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net)
[17:19:00] <DnzAtWrk> I'm a fan of self-documenting code
[17:19:06] <DnzAtWrk> jupyter is that to a t
[17:19:19] <DnzAtWrk> and python in general
[17:19:38] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[17:19:43] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:20:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[17:20:31] <lericson> just such an incredible thing as showing your reader how expensive your function is with %timeit myfunc(testdata)
[17:20:34] <kosh> I have been trying to cut way back on using jupyter notebooks
[17:21:01] *** Joins: dez (uid92154@user/dez)
[17:21:03] <kosh> debugging is a real problem with jupyter notebooks
[17:21:11] <DnzAtWrk> can you use numba or cython with jupyter?
[17:21:15] <kosh> yes
[17:21:15] <lericson> why not
[17:21:18] <DnzAtWrk> neat
[17:21:21] <lericson> but it won't be comfortable
[17:21:23] <DnzAtWrk> then show them the difference :D
[17:21:34] *** Joins: Axy (~Axy@user/axy)
[17:21:43] <Axy> Hello there
[17:21:44] <lericson> in general code reloading sucks in jupyter
[17:21:48] <DnzAtWrk> well na, I don't really like them too much. I much prefer to vectorize everything with numpy
[17:21:51] <kosh> jupyter is nice so long as your code is very small, as it gets more complex it becomes a problem
[17:22:04] <lericson> lol my current notebook is.... long
[17:22:05] <DnzAtWrk> in that way it forces you to write small amounts of code
[17:22:14] <kosh> DnzAtWrk, numba works with numpy
[17:22:27] <DnzAtWrk> yes, but it's better to just vectorize from the start
[17:22:30] <DnzAtWrk> instead of trying to run native loops
[17:22:32] <kosh> DnzAtWrk, it recognized most numpy functions and can compile them
[17:22:32] <DnzAtWrk> through numba
[17:22:48] <kosh> DnzAtWrk, vectorize helps in many circumstances but not all
[17:23:04] <DnzAtWrk> it's very seldom you truly don't have a choice
[17:23:07] *** Quits: bugsniper (~bugsniper@cpe-24-24-180-229.socal.res.rr.com) (Ping timeout: 252 seconds)
[17:23:08] <DnzAtWrk> I made a raycaster once using numba
[17:23:16] <kosh> I ended up with one function in my code that was taking up almost half the time, it was vectorized with numpy but still took FAR too long
[17:23:16] <lericson> .. why
[17:23:19] <DnzAtWrk> since the math for ray refraction was difficult to make in numpy :P
[17:23:25] <lericson> use pyembree
[17:23:35] <lericson> many millions of times faster likely
[17:23:36] <Axy> I have a list of files, and I'm trying to rename them im a certain order.. I can iterate through files and rename them with i - but the renaming should be as follows: 1 2 3 4 9 19 11 12 17 18 19 20 ...
[17:23:36] <kosh> after using numba on that one function it dropped down to < .1% of the runtime in that function
[17:23:49] <Axy> so 4 gaps after 4 numbers
[17:23:59] <Axy> I m unable to figure out the proper logic for this - would love to hear
[17:24:00] <DnzAtWrk> not that kind of ray tracing
[17:24:08] <DnzAtWrk> I did atmoshperic ray refraction
[17:24:13] <lericson> Axy: i too am unable to figure out any logic to it
[17:24:14] *** Joins: Falc (~Falc@193.191.206.243)
[17:24:15] <DnzAtWrk> normal raytracers don't care too much about that
[17:24:22] <leduyquang753> Axy I don't see any pattern.
[17:24:38] <DnzAtWrk> it's actually one of my issues with RTX shaders
[17:24:41] <kosh> DnzAtWrk, I support using numpy wherever possible just occasionally numba is exactyl what is needed and solves a large problem
[17:24:44] <DnzAtWrk> it doesn't support bending the rays :(
[17:24:46] <Axy> 1 2 3 4 (5 6 7 8) 9 19 11 12 (13 14 15 16) 17 18 19 20
[17:24:58] <DnzAtWrk> you can bend rays if you do it in many steps
[17:24:59] <leduyquang753> What's with the 19 there.
[17:25:02] <DnzAtWrk> but I want curved light!
[17:25:04] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[17:25:07] <Axy> so 4 numbers in order, then pass 4, then 4, then pass 4, and so on
[17:25:08] <lericson> yeah lol what's with the 19
[17:25:12] <Axy> 19 is a typo :)
[17:25:15] <lericson> oh
[17:25:18] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Quit: You have been idle for 30+ days)
[17:25:28] <Axy> Sorry about that!
[17:25:35] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Quit: You have been idle for 30+ days)
[17:25:39] <Axy> I now realize I did it twice! Maybe I should get my fingers rebalanced
[17:25:43] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[17:25:47] <leduyquang753> Then just make a counter, after every 4 files increase the counter by 4.
[17:25:56] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[17:26:04] <lericson> A = np.arange(20).reshape(-1, 4); A[1::2] = A[1::2, ::-1]
[17:26:05] <lericson> boom
[17:26:12] <lericson> then A.flatten()
[17:26:18] *** Parts: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) ()
[17:26:30] <lericson> and probably arange(1,21)
[17:27:03] <Axy> well the naming structure is a little more complicated than that --- here is how I name them ----- if (math.floor((col+row)/8)%2 == 0) and ((col+row)%2 == 0):
[17:27:09] <lericson> array([ 1,  2,  3,  4,  8,  7,  6,  5,  9, 10, 11, 12, 16, 15, 14, 13, 17, 18, 19, 20])
[17:27:14] <Axy> so this "if" decides which columns and rows exist in the file pattern
[17:27:41] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:27:41] *** Parts: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) ()
[17:27:45] <Axy> but then all of those files are renamed from 0-n at one point in my pipeline
[17:27:49] <kosh> DnzAtWrk, I have some code where I am doing a pearson correlation from a single vector to a matrix where each row represents another vector, if I do each item one by one or try to vectorize it there are some calculations that get performed many times, with numba I was able to factor out some of the common calculations to reuse them and got a large performance increase
[17:27:52] <Axy> so I'm trying to get the original names back
[17:28:19] <grawity> counter = (i*4+j for i in itertools.count(step=2) for j in range(1,5))
[17:28:21] <DnzAtWrk> some kosh, but enough to be worth the effort to transform it into numba?
[17:28:21] <Axy> Bqsically it's not just 4 filled 4 empty but a grid structure I'm trying to figure out from the iterator
[17:28:21] <lericson> i have a saying
[17:28:24] <grawity> and then you just next(counter)
[17:28:26] <DnzAtWrk> numba requirse you to specify types
[17:28:27] <lericson> ``using numba makes you dumba''
[17:28:28] <DnzAtWrk> it's a bit of a PITA
[17:28:39] <DnzAtWrk> requires*
[17:28:54] <kosh> DnzAtWrk, yeah the function is about 15 loc in numba and is hundreds of times faster
[17:28:58] <DnzAtWrk> you could also use multithreading, or multi-processing
[17:29:07] <kosh> DnzAtWrk, I didn't specify any types
[17:29:12] <DnzAtWrk> odd
[17:29:27] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[17:29:29] <kosh> DnzAtWrk, my program already fully loads all the cores on the machine, threading this also would slow the whole system down
[17:29:30] <lericson> i wrote a Pretty Fast particle filter using numba once, boy howdy did that take a lot of time and effort
[17:29:36] <lericson> would have been 100x faster to write in cython
[17:29:49] *** Joins: shailangsa (~shailangs@host86-185-102-120.range86-185.btcentralplus.com)
[17:30:14] <kosh> I have functions that only used doubles and numpy and I just added  @numba.njit(fastmath=True)  and it worked without issues, no types anywhere
[17:30:33] <kosh> normal loops, calls to numpy functions etc
[17:30:56] *** Joins: pacbard (~pacbard@user/pacbard)
[17:31:29] *** Joins: rany (~rany@user/rany)
[17:32:58] <grawity> Axy: https://paste.rs/z45
[17:32:59] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[17:33:16] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[17:34:23] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Quit: Gone)
[17:34:33] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 248 seconds)
[17:35:17] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:35:36] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Ping timeout: 258 seconds)
[17:35:55] <DnzAtWrk> I've seen code in numpy which could be made SO much faster
[17:36:02] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Quit: Leaving)
[17:36:03] <DnzAtWrk> but they didn't bother to vectorize the internal functions
[17:36:05] *** Quits: rany (~rany@user/rany) (Ping timeout: 250 seconds)
[17:36:16] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:36:23] *** Quits: kstar (~kstar@user/kstar) (Remote host closed the connection)
[17:36:43] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[17:36:46] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[17:37:10] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:37:10] *** Quits: marienz__ (~marienz@libera/staff/marienz) (Remote host closed the connection)
[17:37:23] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[17:38:09] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[17:38:10] <lericson> and yet the world keeps turning ;)
[17:38:15] *** Quits: maharshipatel (~maharship@103.250.137.155) (Quit: Client closed)
[17:39:10] *** Joins: greenbagels (~gb@user/greenbagels)
[17:39:32] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Quit: Leaving)
[17:40:33] <hodapp> like what?
[17:42:10] *** Joins: kstar (~kstar@user/kstar)
[17:42:12] *** Joins: drogas (~drogas@jump2.jet.uk)
[17:42:42] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[17:42:42] <zamba> when reading and parsing binary data from a while.. what is the most effective way of reading through this file?
[17:42:47] *** Joins: rany (~rany@user/rany)
[17:42:55] <lericson> zamba: using mmap()
[17:43:03] <lericson> if a while means "a file"
[17:43:43] <lericson> not necessarily true but it's a common technique
[17:44:29] <zamba> hehe.. it meant from a file, yes :)
[17:44:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:44:47] *** Quits: rany (~rany@user/rany) (Client Quit)
[17:44:51] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[17:44:56] *** Joins: thiras (~thiras@user/thiras)
[17:44:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:45:01] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[17:45:30] *** byzafk is now known as byzandula
[17:45:38] *** Joins: aman (~aman@user/aman)
[17:46:01] <zamba> lericson: so i can read out for instance 2048 bytes in each iteration and the underlying i/o operations will make this as efficient as possible?
[17:46:05] <zamba> when using mmap?
[17:47:14] <lericson> with mmap you just read whatever you need to read and the kernel handles paging for you
[17:47:47] <lericson> if you're trying to batch load the entire file at once, mmap will do very little for you
[17:48:00] <zamba> i really just want to read a file 2048 bytes at a time
[17:48:06] <zamba> but the file is roughly 20G
[17:48:07] <lericson> f.read(2048)
[17:48:16] <zamba> lericson: yeah, but that's VERY inefficient, is it not?
[17:48:20] <lericson> not at all
[17:48:25] <grawity> what makes it inefficient do you think
[17:48:30] <lericson> it's /the/ usecase for fread
[17:48:54] <lericson> i think you should worry less :p
[17:48:58] *** Quits: arinov (~arinov@178.240.152.159) (Ping timeout: 252 seconds)
[17:49:05] <zamba> the fact that it only reads in 2048 bytes at a time.. then performs operations on it, and then it has to perform a new i/o operation to get the next 2048 bytes?
[17:49:15] <lericson> do you think that's actually what happens?
[17:49:27] <zamba> instead of reading in for instance 100MB sequentially in memory and then working across that buffer?
[17:50:28] <zamba> lericson: well, i don't know what happens.. that's why i'm asking :)
[17:50:29] <lericson> how much is actually read from disk depends on many things, it's often best not to try to be clever
[17:51:01] <zamba> why is then mmap faster?
[17:51:11] *** Quits: tg (~tg@rockylinux/infra/tg) (Read error: Connection reset by peer)
[17:51:12] <zamba> since i guess mmap attempts to be clever as well?
[17:51:45] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:52:00] <lericson> if you need to linearly process your data, mmap is only useful because it reduces copying
[17:52:32] <lericson> there are some other dubious benefits such as sharing the virtual memory
[17:52:37] <grawity> hmm BufferedReader.read() works with 8k blocks, doesn't it
[17:52:50] <lericson> maybe
[17:53:30] <lericson> maybe you can have an i/o thread
[17:53:39] <lericson> so that reading from disk happens while you process a block
[17:53:54] <zamba> lericson: but yes, i need to process my data linearly, so f.read() is the best way to go about it?
[17:54:08] <lericson> very likely yes
[17:54:15] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:54:21] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[17:54:21] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[17:54:21] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[17:54:21] *** Quits: cole (~cole@user/cole) (*.net *.split)
[17:54:21] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[17:54:21] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[17:54:21] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[17:54:21] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[17:54:21] *** Quits: Bitflux (~byte@byteflux.net) (*.net *.split)
[17:54:21] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[17:54:21] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[17:54:21] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[17:54:21] *** Quits: Kingsy (~chris@kingsy.co.uk) (*.net *.split)
[17:54:21] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[17:54:21] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[17:54:21] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[17:54:21] *** Quits: dlam1 (~dlam@dlam.me) (*.net *.split)
[17:54:21] *** Quits: mjh4386_ (~mjh4386@165.22.53.231) (*.net *.split)
[17:54:21] *** Quits: glider_ (~glider@user/glider) (*.net *.split)
[17:54:21] *** Quits: sco1 (~sco1@charon.whatbox.ca) (*.net *.split)
[17:54:21] *** Quits: ario_ (~ario@159.65.220.102) (*.net *.split)
[17:54:21] *** Quits: librenaut (~librenaut@user/librenaut) (*.net *.split)
[17:54:21] *** Quits: Socra (~Socra@206.217.216.27) (*.net *.split)
[17:54:21] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[17:54:21] *** Quits: reset (~reset@user/reset) (*.net *.split)
[17:54:21] *** Quits: grym (~grym@user/grym) (*.net *.split)
[17:54:21] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[17:54:21] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[17:54:21] *** Quits: bookworm (~bookworm@neomutt/bookworm) (*.net *.split)
[17:54:21] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[17:54:21] *** Quits: d3sync (~d3sync@130.43.80.239.dsl.dyn.forthnet.gr) (*.net *.split)
[17:54:21] *** Quits: anorthall (~anorthall@user/anorthall) (*.net *.split)
[17:54:21] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[17:54:21] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (*.net *.split)
[17:54:21] *** Quits: mbrndtgn5 (~mbrndtgn@undecidable.de) (*.net *.split)
[17:54:21] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (*.net *.split)
[17:54:21] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[17:54:21] *** Quits: Logi (~quassel@83.229.86.115) (*.net *.split)
[17:54:21] *** Quits: spaceone (~spaceone@wc1.wechall.net) (*.net *.split)
[17:54:21] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (*.net *.split)
[17:54:21] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[17:54:21] *** Quits: baltazar (~baltazar@91-82-172-59.pool.digikabel.hu) (*.net *.split)
[17:54:21] *** Quits: bertieb (~bertieb@217.155.39.147) (*.net *.split)
[17:54:21] *** Quits: CyberShadow (vladimir@89.28.117.31) (*.net *.split)
[17:54:21] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[17:54:21] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (*.net *.split)
[17:54:21] *** Quits: supbo (~kenan@li227-215.members.linode.com) (*.net *.split)
[17:54:21] *** Quits: brachamh (~brachamh@user/brachamh) (*.net *.split)
[17:54:21] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[17:54:21] *** Quits: gerty (~gerty@user/gerty) (*.net *.split)
[17:54:21] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[17:54:21] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[17:54:21] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[17:54:21] *** Quits: ATAD (~ATAD@user/atad) (*.net *.split)
[17:54:21] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[17:54:21] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[17:54:21] *** Quits: esv (~esv@72.11.45.232) (*.net *.split)
[17:54:21] *** Quits: az (az@user/azz) (*.net *.split)
[17:54:21] *** Quits: adium (adium@user/adium) (*.net *.split)
[17:54:21] *** Quits: struct0 (~struct0@104.248.115.49) (*.net *.split)
[17:54:21] *** Quits: guntbert (~yesitsme@user/guntbert) (*.net *.split)
[17:54:21] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[17:54:21] *** Quits: poorboy (~poorboy@159.89.189.144) (*.net *.split)
[17:54:21] *** Quits: Tiago_Paolini (sid172748@stonehaven.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[17:54:21] *** Quits: liam (sid7517@brockwell.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: hsiktas (sid224847@tooting.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: ormiret (sid314108@tooting.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: roolebo (sid64806@charlton.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: NIXKnight (~NIXKnight@198.98.57.76) (*.net *.split)
[17:54:21] *** Quits: nac (~nac@user/nac) (*.net *.split)
[17:54:21] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[17:54:21] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[17:54:21] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[17:54:21] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[17:54:21] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[17:54:21] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[17:54:21] *** Quits: sleepingforest (~sleepingf@user/sleepingforest) (*.net *.split)
[17:54:21] *** Quits: lifefir3 (~lifefir3@152.37.120.101) (*.net *.split)
[17:54:21] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (*.net *.split)
[17:54:21] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[17:54:21] *** Quits: nbin (~nbin@user/nbin) (*.net *.split)
[17:54:21] *** Quits: hays (~rootveget@fsf/member/hays) (*.net *.split)
[17:54:21] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[17:54:21] *** Quits: b_jonas (~x@catv-176-63-12-67.catv.broadband.hu) (*.net *.split)
[17:54:21] *** Quits: nuala (~nuala@user/nuala) (*.net *.split)
[17:54:21] *** Quits: lystra_ (~lystra@d53-64-11-169.nap.wideopenwest.com) (*.net *.split)
[17:54:21] *** Quits: ntdll (~ntdll@user/ntdll) (*.net *.split)
[17:54:21] *** Quits: remexre (~nathan@user/remexre) (*.net *.split)
[17:54:21] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[17:54:21] *** Quits: harm_ (~urth@geertswei.nl) (*.net *.split)
[17:54:21] *** Quits: Fingel_ (~fingel@user/fingel) (*.net *.split)
[17:54:21] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (*.net *.split)
[17:54:21] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[17:54:21] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[17:54:21] *** Quits: Armen (~Armen@armen138.com) (*.net *.split)
[17:54:21] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[17:54:21] *** Quits: janemba (~janemba@94.204.254.193) (*.net *.split)
[17:54:21] *** Quits: mkoskar (~mkoskar@user/mkoskar) (*.net *.split)
[17:54:21] *** Quits: Popzi (~Popzi@user/popzi) (*.net *.split)
[17:54:22] *** Quits: Classic (~root@user/classic) (*.net *.split)
[17:54:22] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[17:54:22] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[17:54:38] <lericson> can asyncio do reads asynchronously
[17:54:44] <lericson> that would be another way
[17:55:22] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[17:55:24] <lericson> while not end: next_block = start_read() ; do_work(current_block) ; current_block = await next_block
[17:55:46] <lericson> then the optimal read buffer would depend on the time it takes to do_work()
[17:56:30] <lericson> what kind of a disk is it, zamba
[17:56:51] <lericson> it's very likely that any attempts to be clever will just be about as good and way more complicated
[17:57:49] *** Joins: daoudr (~daoudr@178.197.213.56)
[17:58:38] *** Joins: bertieb (~bertieb@217.155.39.147)
[17:58:38] *** Joins: mcglk (~mcglk@131.191.49.120)
[17:58:38] *** Joins: librenaut (~librenaut@user/librenaut)
[17:58:38] *** Joins: az (az@user/azz)
[17:58:38] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[17:58:38] *** Joins: Kingsy (~chris@kingsy.co.uk)
[17:58:38] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[17:58:38] *** Joins: erry (~erry@errietta.me)
[17:58:38] *** Joins: zwindl (~abc@user/abc)
[17:58:38] *** Joins: cole (~cole@user/cole)
[17:58:38] *** Joins: Techcable (~Techcable@168.235.93.147)
[17:58:38] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[17:58:38] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[17:58:38] *** Joins: Bitflux (~byte@byteflux.net)
[17:58:38] *** Joins: adamchainz (~adamj@51.15.34.126)
[17:58:38] *** Joins: FunkyBob (~curtis@vhost3.tinbrain.net)
[17:58:38] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[17:58:38] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[17:58:38] *** Joins: mabi (~m42e@pb42.de)
[17:58:38] *** Joins: njt (~njt@zaph.org)
[17:58:38] *** Joins: dlam1 (~dlam@dlam.me)
[17:58:38] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[17:58:38] *** Joins: glider_ (~glider@user/glider)
[17:58:38] *** Joins: sco1 (~sco1@charon.whatbox.ca)
[17:58:38] *** Joins: ario_ (~ario@159.65.220.102)
[17:58:38] *** Joins: Socra (~Socra@206.217.216.27)
[17:58:38] *** Joins: reset (~reset@user/reset)
[17:58:38] *** Joins: grym (~grym@user/grym)
[17:58:38] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[17:58:38] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[17:58:38] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[17:58:38] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[17:58:38] *** Joins: d3sync (~d3sync@130.43.80.239.dsl.dyn.forthnet.gr)
[17:58:38] *** Joins: anorthall (~anorthall@user/anorthall)
[17:58:38] *** Joins: Teacup (~teacup@user/teacup)
[17:58:38] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[17:58:38] *** Joins: mbrndtgn5 (~mbrndtgn@undecidable.de)
[17:58:38] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[17:58:38] *** Joins: deniska (~denis@user/deniska)
[17:58:38] *** Joins: Logi (~quassel@83.229.86.115)
[17:58:38] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[17:58:38] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[17:58:38] *** Joins: Oddity (Oddity@user/oddity)
[17:58:38] *** Joins: baltazar (~baltazar@91-82-172-59.pool.digikabel.hu)
[17:58:38] *** Joins: CyberShadow (vladimir@89.28.117.31)
[17:58:38] *** Joins: Milos (~Milos@user/milos)
[17:58:38] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[17:58:38] *** Joins: supbo (~kenan@li227-215.members.linode.com)
[17:58:38] *** Joins: brachamh (~brachamh@user/brachamh)
[17:58:38] *** Joins: BUSY (~BUSY@user/busy)
[17:58:38] *** Joins: gerty (~gerty@user/gerty)
[17:58:38] *** Joins: ttkpy (501@46-97-229-216.sr2.pon.net)
[17:58:38] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[17:58:38] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[17:58:38] *** Joins: ATAD (~ATAD@user/atad)
[17:58:38] *** Joins: hendry (~hendry@210.23.22.2)
[17:58:38] *** Joins: Geronimo (~Geronimo@user/geronimo)
[17:58:38] *** Joins: esv (~esv@72.11.45.232)
[17:58:38] *** Joins: adium (adium@user/adium)
[17:58:38] *** Joins: sleepingforest (~sleepingf@user/sleepingforest)
[17:58:38] *** Joins: struct0 (~struct0@104.248.115.49)
[17:58:38] *** Joins: guntbert (~yesitsme@user/guntbert)
[17:58:38] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[17:58:38] *** Joins: poorboy (~poorboy@159.89.189.144)
[17:58:38] *** Joins: Tiago_Paolini (sid172748@stonehaven.irccloud.com)
[17:58:38] *** Joins: TallonRain (sid214799@user/tallonrain)
[17:58:38] *** Joins: liam (sid7517@brockwell.irccloud.com)
[17:58:38] *** Joins: hsiktas (sid224847@tooting.irccloud.com)
[17:58:38] *** Joins: ormiret (sid314108@tooting.irccloud.com)
[17:58:38] *** Joins: roolebo (sid64806@charlton.irccloud.com)
[17:58:38] *** Joins: NIXKnight (~NIXKnight@198.98.57.76)
[17:58:38] *** Joins: nac (~nac@user/nac)
[17:58:38] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[17:58:38] *** Joins: harleypig (thelounge@harleypig.com)
[17:58:38] *** Joins: dob1 (~dob1@user/dob1)
[17:58:38] *** Joins: Popzi (~Popzi@user/popzi)
[17:58:38] *** Joins: byzandula (~byzandula@beerbq.net)
[17:58:38] *** Joins: energizer (~energizer@user/energizer)
[17:58:38] *** Joins: trashbird (~trashbird@user/trashbird)
[17:58:38] *** Joins: lifefir3 (~lifefir3@152.37.120.101)
[17:58:38] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[17:58:38] *** Joins: nbin (~nbin@user/nbin)
[17:58:38] *** Joins: hays (~rootveget@fsf/member/hays)
[17:58:38] *** Joins: remexre (~nathan@user/remexre)
[17:58:38] *** Joins: finsternis (~X@23.226.237.192)
[17:58:38] *** Joins: b_jonas (~x@catv-176-63-12-67.catv.broadband.hu)
[17:58:38] *** Joins: nuala (~nuala@user/nuala)
[17:58:38] *** Joins: lystra_ (~lystra@d53-64-11-169.nap.wideopenwest.com)
[17:58:38] *** Joins: ntdll (~ntdll@user/ntdll)
[17:58:38] *** Joins: saschi (~saschi@user/saschi)
[17:58:38] *** Joins: harm_ (~urth@geertswei.nl)
[17:58:38] *** Joins: Fingel_ (~fingel@user/fingel)
[17:58:38] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[17:58:38] *** Joins: wyre (~wyre@user/wyre)
[17:58:38] *** Joins: _janus (~janus@blotter.ld-linux.so)
[17:58:38] *** Joins: Armen (~Armen@armen138.com)
[17:58:38] *** Joins: chilversc (~chilversc@user/chilversc)
[17:58:38] *** Joins: janemba (~janemba@94.204.254.193)
[17:58:38] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[17:58:38] *** Joins: Classic (~root@user/classic)
[17:58:38] *** Joins: sybariten (~jake@157.90.217.120)
[17:58:38] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[17:58:42] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[17:58:59] *** Joins: finsternis (~X@23.226.237.192)
[17:59:03] *** Quits: ssbr_ (~ssbr@python/site-packages/ssbr) (Ping timeout: 250 seconds)
[18:00:09] *** Quits: zBeeble (~zBeeble@2001:1928:1::35) (Read error: Connection reset by peer)
[18:00:18] *** Joins: zBeeble (~zBeeble@2001:1928:1::35)
[18:01:07] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:01:47] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[18:02:05] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 250 seconds)
[18:02:27] *** Joins: lalitmee_ (~lalitmee@180.94.32.127)
[18:02:56] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[18:03:17] *** Quits: LiSyn (~lisyn@user/deepspace-link) ()
[18:04:55] *** Quits: lalitmee__ (~lalitmee@180.94.33.78) (Ping timeout: 252 seconds)
[18:06:27] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[18:07:14] *** Joins: noarb (~noarb@user/noarb)
[18:07:17] *** Quits: daoudr (~daoudr@178.197.213.56) (Quit: Leaving)
[18:09:52] *** Joins: nomic (~nomic@185.192.69.143)
[18:10:44] *** Joins: daoudr (~daoudr@178.197.213.56)
[18:11:55] *** Quits: daoudr (~daoudr@178.197.213.56) (Read error: Connection reset by peer)
[18:15:06] *** Joins: daoudr (~daoudr@178.197.213.56)
[18:15:55] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[18:16:34] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[18:16:39] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:17:07] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[18:18:25] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:19:18] *** Joins: Adoi (~Adoi@user/adoi)
[18:19:58] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:20:03] *** Parts: dreadedfrog (~user@193.160.129.69) (ERC (IRC client for Emacs 26.3))
[18:20:43] *** Quits: binchickin (~binchicki@165.22.169.69) (Ping timeout: 250 seconds)
[18:21:38] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:22:56] *** Joins: binchickin (~binchicki@165.22.169.69)
[18:23:02] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[18:23:26] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[18:23:41] <ses1984> is it possible to configure requests to not use a conneciton pool to make debugging easier
[18:23:50] *** Joins: benjwadams (~benjwadam@216.65.201.140)
[18:25:13] *** Joins: fonsy (~fonsy@84.247.210.222)
[18:25:39] *** Joins: aead (~aead@user/aead)
[18:26:21] <p-i-> Is there any way to monitor for existence of a file?
[18:26:38] <p-i-> So that as soon as the file exists, I can execute code
[18:27:00] <p-i-> Other than spinning on os.path.exists
[18:27:13] <Wooble> p-i-: check out the watchdog module, maybe.
[18:28:27] <wib_jonas> p-i-: there is such functionality, but it's OS-dependent and best not to rely on it. if it's about something very important, it's better to have whatever creates the file notify you somehow.
[18:28:36] <wib_jonas> p-i-: on what operating system do you want this?
[18:30:13] *** Joins: arinov (~arinov@213.194.126.155)
[18:30:23] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:31:07] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[18:31:13] <raek> p-i-: on Linux that feature is called "inotify" there are Python wrappers for it, but I haven't looked for platform independent libaries myself
[18:31:37] <Wooble> (watchdog is platform independent, and uses inotify on linux.)
[18:32:25] * raek adds "watchdog" to his list of packages to check out
[18:32:50] *** Quits: lalitmee_ (~lalitmee@180.94.32.127) (Quit: Leaving)
[18:33:15] <p-i-> It's macOS
[18:33:20] <Wooble> I don't know how bad it is on not-linux; I assume there's a good reason django decided to just poll on other OSes.
[18:33:36] *** Quits: davor (~davor@user/davor) (Ping timeout: 250 seconds)
[18:33:38] <p-i-> I think I'll poll for now and leave a TODO
[18:33:53] *** Joins: davor (~davor@user/davor)
[18:34:01] <p-i-> Ideally I'd use some kind of websocket notifier, I'll check out watchdog
[18:34:24] <raek> would be interesting to know how syncthing-inotify solves the problem
[18:36:58] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[18:39:16] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[18:39:19] *** Joins: emika7 (~emika@185.207.249.217)
[18:39:27] *** Quits: emika (~emika@83.136.182.28) (Ping timeout: 240 seconds)
[18:39:27] *** emika7 is now known as emika
[18:39:30] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b17b-3976-344e-76c2.res6.spectrum.com)
[18:40:51] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[18:41:55] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[18:43:52] *** Joins: vsantana (~vsantana@fttx-177136149213.usr.predialnet.com.br)
[18:44:27] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[18:45:41] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[18:46:06] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:47:17] *** Joins: Henistein (~Henistein@2001:8a0:c1b3:6b01:49a2:67ec:e598:5f74)
[18:47:50] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:48:10] <Gurkenglas> max({(x,y):mut_inf(x,y) for x in S for y in S}) gives me "RuntimeError: Boolean value of Tensor with more than one value is ambiguous" (with no deeper stacktrace), why might this be?
[18:48:21] *** Quits: liam (sid7517@brockwell.irccloud.com) ()
[18:48:47] *** Joins: liam (sid7517@id-7517.helmsley.irccloud.com)
[18:48:53] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[18:49:02] <Gurkenglas> ....... it's checking whether (x,y) is equal to another (x,y) for the dict, isn't it? -.-
[18:49:08] *** Quits: Freso (sid7914@libera/staff/metabrainz.user.Freso) ()
[18:49:27] *** Joins: Freso (sid7914@libera/staff/metabrainz.user.Freso)
[18:49:28] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[18:50:34] *** Quits: BlueShark (sid10311@user/blueshark) ()
[18:50:34] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[18:50:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[18:50:43] *** Quits: Wooble (~Wooble@107.170.27.240) (Quit: WeeChat 3.1)
[18:50:55] *** Joins: BlueShark (sid10311@user/blueshark)
[18:51:54] *** Riviera_ is now known as Riviera
[18:52:15] *** Joins: Wooble (~Wooble@107.170.27.240)
[18:52:30] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:53:27] <Henistein> This is about machine learning: I am training a neural network using mnist dataset, why in this case normalizing to [0, 1] is worst than the original [0, 255]? https://bpa.st/KGSQ comment normalization and compare the differences. I get around 93% with [0, 255] pixel range and just 81% with [0, 1] it is a meaningful difference.
[18:53:50] *** Quits: fonsy (~fonsy@84.247.210.222) (Quit: Leaving)
[18:54:08] *** Joins: pro (~pro@user/pro)
[18:54:48] <ses1984> i'm trying to use the requests-ntlm2 library to make a connection through an NTLM authenticated proxy. i'm setting up my `session` as in the example given here: https://github.com/dopstar/requests-ntlm2
[18:55:15] <ses1984> something isn't working right, the proxy is returning some HTML error response and the requests-ntlm2 library doesn't know what to do with it
[18:55:16] <rendar> bjs, you were suggesting something like this yesterday, right? https://bpa.st/TVKA -- problem is: prompt still isn't printed correctly as you suggested, try that and see
[18:55:45] <ses1984> when i hit the problem i get a few tracebacks and the problem is actually first hit inside urllib3 connection pools
[18:56:03] <ses1984> i'm guessing connection pools are used because i set up a session, and i set up a session because that's how to mount the proxy adapter
[18:56:37] <ses1984> but because of the connection pool thing i'm not sure how to properly debug this, short of monkeypatching at the connection pool layer
[18:57:07] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 250 seconds)
[18:57:38] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:57:52] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[18:57:59] <altendky> https://readthedocs.org/projects/desert/builds/14546240/ `/home/docs/checkouts/readthedocs.org/user_builds/desert/checkouts/94/src/desert/_fields.py:docstring of desert._fields.externally_tagged_union_from_registry:4: WARNING: circular inclusion in "include" directive: snippets/tag_forms/external.rst < snippets/tag_forms/internal.rst < snippets/tag_forms/adjacent.rst < snippets/tag_forms/external.rst < reference/fields.rst` i must be
[18:57:59] <altendky> overlooking something...  the snippets are just json blocks that wouldn't create an include loop.  ideas?
[18:59:22] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[18:59:48] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[19:00:07] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[19:00:41] *** Joins: Vonter (~Vonter@user/vonter)
[19:01:18] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[19:02:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[19:02:07] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:02:55] *** Joins: legola (~legola@46.235.100.27)
[19:03:24] *** Joins: zebrag (~chris@user/zebrag)
[19:05:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[19:06:27] *** Joins: fofoni (~fofoni@user/fofoni)
[19:07:24] <zamba> lericson: it will be SSD
[19:07:36] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:07:39] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[19:07:59] <zamba> lericson: i'm not sure i understand your code
[19:08:01] *** Quits: Falc (~Falc@193.191.206.243) (Quit: Leaving)
[19:08:18] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[19:08:25] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:08:43] *** Joins: legola (~legola@46.235.100.27)
[19:11:32] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:11:34] *** Joins: jjasghar (~quassel@user/jjasghar)
[19:12:00] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[19:12:47] *** Quits: legola (~legola@46.235.100.27) (Ping timeout: 240 seconds)
[19:12:49] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[19:13:07] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[19:13:26] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Remote host closed the connection)
[19:14:25] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[19:14:59] *** Joins: aead (~aead@user/aead)
[19:16:07] *** Joins: dld (~davidlowr@2620:6e:6000:2900:2dc5:f09c:7b2e:fda2)
[19:16:23] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[19:16:50] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[19:17:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[19:17:29] *** Quits: jazzy (~jaziz@2600:380:8773:c113:1093:1c01:217f:efb2) (Ping timeout: 250 seconds)
[19:17:30] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[19:17:47] *** Joins: CombatVet (~c4@user/combatvet)
[19:17:51] *** Joins: vdazukug (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:18:26] *** Joins: shangxiao (~davids@124.182.71.141)
[19:18:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:21:18] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[19:21:22] *** Quits: betuxy (~ole@158.181.77.59) (Ping timeout: 252 seconds)
[19:21:27] *** Joins: cedric (~cedric@2a01:cb11:867:c200:9ded:a5fb:748e:8961)
[19:21:33] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:22:18] *** abyss_ is now known as abyss
[19:23:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:23:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:24:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:25:07] *** Quits: binchickin (~binchicki@165.22.169.69) (Ping timeout: 240 seconds)
[19:25:39] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:25:44] *** Joins: fikran (~fikran@user/fikran)
[19:26:50] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:26:53] *** Joins: binchickin (~binchicki@165.22.169.69)
[19:30:20] <jmcantrell> Any vim-ale users here? Trying to figure out why it wouldn’t say anything about a non-existent module being imported.
[19:30:49] *** Quits: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl) (Ping timeout: 248 seconds)
[19:33:14] <lericson> why would it
[19:34:50] *** meejah_ is now known as meejah
[19:34:57] <jmcantrell> I don’t understand. Are you saying that it’s not possible or that there’s no value in that information?
[19:35:00] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[19:35:11] <lericson> i'm saying i use ALE and i never had that ¯\_(ツ)_/¯
[19:35:17] <lericson> it just runs pyflakes
[19:35:27] <lericson> well flake8
[19:35:31] <lericson> so pep8 + pyflakes
[19:35:49] <lericson> it'd be cool to hook it up to something like mypy or so
[19:35:52] <jmcantrell> Same here
[19:36:06] <lericson> other than that it's meant to catch simple errors, indentation bugs or name typos
[19:36:10] <rendar> is name shadowing a real thing? apparently, it is: https://github.com/vxgmichel/aioconsole/issues/86 -- so the rule is never having modules with the same standard library names? btw, why this does happen?!
[19:36:24] *** Quits: Henistein (~Henistein@2001:8a0:c1b3:6b01:49a2:67ec:e598:5f74) (Quit: Client closed)
[19:36:39] <jmcantrell> Static analysis would be the tool that would catch that kind of error?
[19:36:46] <lericson> no
[19:36:51] <lericson> not really
[19:36:58] <lericson> it could i guess
[19:37:12] <jinsun> jmcantrell: mypy catches it
[19:37:12] *** Quits: liblame (~liblame@p200300dd6713dd0088713d01419f126f.dip0.t-ipconnect.de) (Quit: Gone)
[19:37:15] *** Parts: Emil (emil@emil.fi) ()
[19:37:22] <lericson> rendar: yes it is a thing
[19:37:28] <Yhg1s> rendar: yes, it's a real thing. Don't have *top-level* module names with the same name as standard library modules (or, third-party modules you might want to use).
[19:37:29] <lericson> rendar: put your modules in a package
[19:37:48] <rendar> Yhg1s, i see, thanks.. but why it happens?
[19:38:06] <lericson> because that's how it's designed to work
[19:38:17] <jmcantrell> I guess that’s part of what I’m trying to understand. Whether or not this kind of error can even be determined without actually sending the code through the interpreter
[19:38:18] <Yhg1s> rendar: I'm not sure what kind of answer you're looking for.
[19:38:29] <Yhg1s> rendar: it happens because you have a top-level module with the same name as the standard library.
[19:38:41] <rendar> Yhg1s, i mean, if a std lib module does `import queue`, isn't that obvious that it wants queue from the std lib instead of the top level directory? i mean, shouldn't that check *first* the std lib?
[19:38:53] <zware> rendar: Standard library modules aren't special, they're looked up in the directories in sys.path just like any other
[19:39:06] <Yhg1s> rendar: there can only be one module of a particular name. The module search is the same for all modules.
[19:39:19] <rendar> uhm, ok
[19:39:37] <lericson> i guess it would make sense if the stdlib was able to import only stdlib stuff, but as it is, that's hard to achieve
[19:40:21] <zware> rendar: Maybe you have a better SimpleQueue implementation that's compatible with the stdlib queue.SimpleQueue; you can put it in a top-level queue.py and it will be used intsead of the one in the stdlib
[19:41:47] <rendar> the thing i can't fully get is.. usually to import local files i should use `from .queue import MySimpleQueue`
[19:42:01] <Yhg1s> rendar: that's not 'local files'.
[19:42:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[19:42:17] <Yhg1s> rendar: that's 'in the current package, relative to the current module'.
[19:42:24] <Yhg1s> rendar: the standard library isn't a package.
[19:42:54] <rendar> ok
[19:44:17] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:44:33] *** Quits: bjs (sid190364@user/bjs) ()
[19:44:36] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Quit: Leaving)
[19:44:54] *** Joins: bjs (sid190364@user/bjs)
[19:46:08] <rendar> Yhg1s, ok, it seems because every py module (or, every file.py) takes the current directory as the current package relative to the current module (file), so: a.py  b.py  same directory, from b.py: `import a` will import a.py
[19:46:22] <Yhg1s> rendar: nope, that's not how it works.
[19:46:25] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:46:54] *** Quits: fury (uid193779@brockwell.irccloud.com) ()
[19:47:07] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 240 seconds)
[19:47:09] *** Quits: jtanner (sid194399@brockwell.irccloud.com) ()
[19:47:11] *** Joins: fury (uid193779@id-193779.helmsley.irccloud.com)
[19:47:12] <rendar> but you said relative to the current module..
[19:47:14] *** Quits: benjwadams (~benjwadam@216.65.201.140) (Quit: Client closed)
[19:47:17] <Yhg1s> rendar: if 'a' and 'b' are top-level modules, 'import a' in b.py will search for the module 'a', and it _may_ find 'a.py' in the current directory, since it's searched for modules.
[19:47:23] <Yhg1s> rendar: if they are in a package, the package is *not* searched.
[19:47:24] *** Joins: jtanner (sid194399@id-194399.helmsley.irccloud.com)
[19:47:31] <Yhg1s> rendar: that is 'from . import a', not 'import a'.
[19:48:09] <rendar> ok, now i see
[19:48:20] <Yhg1s> (unless you're using Python 2, in which case use 'from __future__ import absolute_import' and also stop using Python 2.)
[19:48:29] <rendar> and the current directory, to be "seen" as a package, it must contain __init__.py
[19:48:34] <Yhg1s> no.
[19:48:46] <Yhg1s> to be seen as a package, it needs to be imported.
[19:49:02] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 268 seconds)
[19:51:11] *** Joins: melba (~melba@user/melba)
[19:52:12] <melba> what's a nice way to make my program configurable at runtime? eg it's a never ending process, but I want to be able to flip some settings.
[19:52:43] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Ping timeout: 252 seconds)
[19:53:35] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:e3bc:10df:4edc:9327)
[19:53:47] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[19:54:05] <lericson> melba: very difficult to answer, depends on who the user is
[19:54:43] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[19:55:11] <lericson> zamba: an ssd is very fast at reading
[19:55:24] <melba> would be nice if it's an http interface
[19:55:57] <lericson> you mean a web interface?
[19:56:01] <lericson> or an actual http api?
[19:56:11] <melba> a basic http api should be good enough
[19:56:33] <melba> do people run flask in a separate thread or something?
[19:56:45] <lericson> what does the main thread do
[19:56:56] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[19:56:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[19:57:04] <lericson> it's likely easier to have a configuration file and send a signal to reload
[19:57:15] <lericson> e.g. SIGHUP
[19:57:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:59:47] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:e3bc:10df:4edc:9327) (Ping timeout: 240 seconds)
[20:00:40] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[20:01:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:03:36] *** Joins: manti7 (~manti7@176.10.104.94)
[20:03:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[20:04:28] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[20:04:40] *** Joins: kosh (~kosh@user/kosh)
[20:05:42] *** Joins: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net)
[20:06:49] *** Quits: d3vyL (d3vyL@host-87-21-171-60.retail.telecomitalia.it) ()
[20:08:45] <lericson> can you with (ctxmgr1, ctxmgr2): ?
[20:09:07] *** Quits: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl) (Ping timeout: 240 seconds)
[20:09:10] <lericson> the answer is no
[20:09:10] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[20:10:05] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[20:10:22] <SnoopJ> lericson, you can in 3.10: https://docs.python.org/3.10/whatsnew/3.10.html#parenthesized-context-managers
[20:11:36] <SnoopJ> and there's contextlib.ExitStack as a bodge for other versions
[20:12:00] <lericson> i mean, you can with a, b
[20:12:04] <lericson> you just can't with (a, b)
[20:12:27] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:12:31] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 252 seconds)
[20:12:33] <lericson> which seems like a silly inconsistency so glad that's changed then
[20:13:14] <SnoopJ> I think it was a quirk of the old parser
[20:13:17] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[20:14:11] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[20:14:22] *** Joins: CapnKernel (foobar@gromit.mixdown.ca)
[20:14:35] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[20:15:01] <CapnKernel> Hello.  Where can I get help over IRC for uWSGI?  (#uwsgi on libera is empty, #uwsgi on freenode has one other nick.  Official uWSGI docs say Freenode)
[20:15:25] <Julian> CapnKernel: Here is fine, but the answer may also be "nowhere" unfortunately
[20:15:28] <nedbat> CapnKernel: ask your question here, let's see what happens
[20:15:33] <Julian> (I.e. you're welcome to ask, and.. yeah)
[20:15:47] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (Ping timeout: 240 seconds)
[20:16:10] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[20:16:24] *** Joins: Axy (~Axy@user/axy)
[20:17:05] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[20:17:50] <CapnKernel> I have a website written in Django 3.2, and on my server I'm running nginx and uwsgi.  I don't know where backtraces are going, or where print() output is going.  There's a request.log and error.log for my app, but they have requests and interpreter startup info (ie, it's set up well enough that I can see those), but not things like backtraces and prints.  Any ideas?
[20:19:20] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[20:19:38] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[20:25:35] <nedbat> CapnKernel: i have similar questions, though with passenger instead of nginx
[20:27:26] *** Joins: Meteorhead (~Meteorhea@165.225.205.49)
[20:27:32] <deniska> CapnKernel: uwsgi has a config option for where to write log files. If it's not set, perhaps it still outputs to stdout/stderr, and if you use systemd to start nginx, then these logs are captured and you can look at them using journalctl
[20:27:43] <deniska> to start uwsgi*
[20:27:46] <mefistofeles> hey, so I'm running some python scripts with pytest, but I want some scripts to be marked as slow (as with pytest.mark.slow), is there any way to accomplish this? I'm using this to run https://paste.rs/yo4.py
[20:28:08] <mefistofeles> so it's basically running every .py it finds there
[20:28:43] <Julian> CapnKernel: I'd be looking myself at django first
[20:28:57] <Julian> And ensuring it's actually putting those somewhere itself
[20:29:05] <CapnKernel> Good point
[20:29:14] <Julian> It's been a very long while since I've ran a django app, but e.g. Flask will not do so
[20:29:25] <Julian> CapnKernel: https://docs.djangoproject.com/en/3.2/topics/logging/#django-request-logger
[20:29:36] <Julian> Sorry, https://docs.djangoproject.com/en/3.2/topics/logging/#examples
[20:29:38] <deniska> flask and django are deployed similarly
[20:29:40] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[20:29:45] <deniska> both are WSGI applications
[20:29:48] <CapnKernel> For better or worse, I'm not (yet) using the logging facility
[20:29:51] *** Joins: Barones (~Barones@2804:48dc:8500:0:79ad:e053:ee44:f3e6)
[20:30:16] <CapnKernel> I had an older app using Django 1.8 that dumped print()s and backtraces into the log, so I know it's possible
[20:30:27] *** Parts: m_ben (~m_ben@user/m-ben/x-7429725) (WeeChat 3.2)
[20:30:35] <CapnKernel> The python program is run as part of a uwsgi process, so I'll strace that
[20:31:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:32:26] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[20:35:04] <CapnKernel> deniska: Yes uwsgi is managed by systemd.  I've just run journalctl -u uwsgi, and it just shows brief uwsgi start/stop messages, ie it doesn't include messages regarding the app
[20:35:42] *** Quits: daoudr (~daoudr@178.197.213.56) (Quit: Leaving)
[20:37:03] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[20:37:35] *** Joins: pragmatic_enigma (~pragmatic@user/pragmaticenigma)
[20:37:47] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 240 seconds)
[20:38:01] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[20:38:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:39:57] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[20:42:45] *** Quits: vsantana (~vsantana@fttx-177136149213.usr.predialnet.com.br) (Quit: Client closed)
[20:43:03] *** Quits: Bardon (~Bardon@user/Bardon) (Ping timeout: 258 seconds)
[20:43:25] *** Joins: pycurious (~Adium@user/pycurious)
[20:43:38] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:43:50] <pycurious> How many python's are running on a linux system: list(str(x.info['name'])[0:6] for x in psutil.process_iter(['name']) if "python" in x.info['name'] ).count("python") - is there an easier way to do this?
[20:44:20] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:45:49] <pragmatic_enigma> from the command line "ps -aux | grep python"
[20:45:56] <supakeen> sum("python" in x.info["name"] for x in psutil.process_iter(["name"]))
[20:45:59] <supakeen> if you find that easier
[20:46:07] <pycurious> supakeen: yes, I do, thanks
[20:47:41] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:48:47] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:48:48] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[20:48:51] <pragmatic_enigma> pycurious: note that not all linux systems execute as "python." on Ubuntu Python 3 will come up as "python3"
[20:49:46] <supakeen> that's why both your and their test is a substring :)
[20:49:55] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[20:50:33] <CapnKernel> I found the answer to my logging problem.  strace and lsof are incredibly useful.
[20:50:44] *** Joins: paul424 (~tom@ip-37-248-158-119.multi.internet.cyfrowypolsat.pl)
[20:51:04] <CapnKernel> strace shows writes to file descriptors, lsof will tell you which file corresponds to the file descriptor
[20:51:29] <paul424> I just bought the python crash course and I am severly disappointed : the book is too easy, to polish subtitle " INstrukcje dla programisty " ( INstruction for programmers ) is misleading
[20:51:34] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[20:52:14] <paul424> What book for a person who can already do programming ?
[20:52:33] <NoImNotNineVolt> https://docs.python.org/3/
[20:52:49] <mefistofeles> paul424: maybe https://book.pythontips.com/en/latest/
[20:53:42] <nedbat> CapnKernel: working back from the strace answer, what is it that configures the logging?
[20:53:43] <pragmatic_enigma> supakeen: I missed it... been codeing in C# for too long today
[20:54:33] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:54:44] *** Quits: tx8r (~tx8r@gateway/tor-sasl/tx8r) (Quit: Leaving)
[20:55:06] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:55:26] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[20:56:10] *** Quits: _mal (~mal@user/mal/x-8025409) (Ping timeout: 240 seconds)
[20:56:51] *** Quits: jaggz (~jaggz@user/jaggz) (Quit: I saith goodbye)
[20:57:35] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Ping timeout: 250 seconds)
[20:57:43] *** Quits: Meteorhead (~Meteorhea@165.225.205.49) (Ping timeout: 246 seconds)
[20:58:25] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:28] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[20:59:51] *** dcaro is now known as dcaro_away
[20:59:56] <CapnKernel> nedbat: Lines 6 and 28.  https://gist.github.com/CapnKernel/e1e5d6e24e164d2ed1a156bbf7bbcba5
[21:00:11] *** Joins: zaquest (~notzaques@5.128.210.178)
[21:00:14] <harpia> There is no native type hinting in Python?
[21:00:53] <nedbat> harpia: what do you mean by native?
[21:01:13] *** Quits: vdazukug (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vdazukug)
[21:01:14] <nedbat> harpia: just as with statically typed languages, it's a tool you run before you run your program that checks the types.
[21:01:14] <CapnKernel> Does recent python support type hints out of the box?  Yes.  Is Python strongly typed?  No.
[21:02:06] <harpia> oh... I come from PHP, that's why I ask
[21:02:15] <pragmatic_enigma> harpia: https://realpython.com/lessons/type-hinting/
[21:02:20] <CapnKernel> Native type hinting: https://docs.python.org/3/library/typing.html
[21:02:38] <bjs> CapnKernel: note that "strongly typed" is often very subjective
[21:02:51] <mefistofeles> I strongly disagree
[21:03:00] <pragmatic_enigma> hehe
[21:03:10] <CapnKernel> That was a hint
[21:03:17] <mefistofeles> jk, I actually agree xD
[21:04:10] <lericson> when a girl on tinder says "you're not my type", is that type hinting?
[21:04:31] <harpia> ah, if I use the typing module, it will only serve as a hint for my IDE, right? It won't, like, throw an error in runtime?
[21:04:53] <harpia> at runtime*
[21:04:59] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[21:04:59] <nedbat> harpia: right, it has no effect at runtime (just like with statically typed languages)
[21:05:01] <CapnKernel> harpia: And there's a program called mypy which can 1) do static type checking and 2) annotation of your program with types it discovers when you run the program
[21:05:14] <CapnKernel> harpia: Do you _want_ it to throw an error?
[21:05:40] <CapnKernel> It's not just hinting for your IDE, it can also help you check that your program is written correctly
[21:05:53] <CapnKernel> Ie, a validation tool
[21:06:01] <harpia> I see...
[21:06:34] *** Joins: bugsniper (~bugsniper@cpe-24-24-180-229.socal.res.rr.com)
[21:06:44] *** Quits: gabe (~gabe@user/gabe) (Read error: Connection reset by peer)
[21:07:22] <lericson> type annotations are the very epitome of syntactic sugar
[21:08:51] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 250 seconds)
[21:08:53] *** Joins: Roey (~Roey@user/Roey)
[21:09:01] *** Joins: apteryx (~maxim@dsl-10-129-227.b2b2c.ca)
[21:09:25] <harpia> I think I needed to know this: https://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages
[21:09:35] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[21:10:17] *** Joins: Payam (~Payam@c188-150-219-9.bredband.tele2.se)
[21:10:49] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[21:10:59] <apteryx> hello!  I'm seing this error *only* in a Linux container when attempting to run tests with pytest + xdist; any clues as to what could cause the problem?  strace didn't turn anything.  https://paste.debian.net/1208881/
[21:11:04] *** Joins: matsaman (~matsaman@user/matsaman)
[21:11:52] <CapnKernel> harpia: There a concept called "duck typing" where you can freely substitute an object of one type for another of a _different_ type, with no problems, as long as the _use_ of the object is still valid.
[21:12:04] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[21:12:07] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b17b-3976-344e-76c2.res6.spectrum.com) (Read error: Connection reset by peer)
[21:12:13] <CapnKernel> "If it looks like a duck, quacks like a duck, walks like a duck, does other assorted verbs like a duck, it's a duck"
[21:12:23] <harpia> lol interesting
[21:12:31] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b17b-3976-344e-76c2.res6.spectrum.com)
[21:12:49] <CapnKernel> And in fact there's a lot of super interesting code that wouldn't work without duck typing
[21:13:16] *** Joins: zebrag (~chris@user/zebrag)
[21:13:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:13:47] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 240 seconds)
[21:14:09] <CapnKernel> For example "mocking" is very useful in test programs.  https://www.toptal.com/python/an-introduction-to-mocking-in-python
[21:14:13] *** Joins: blingrang (~blingrang@user/blingrang)
[21:14:33] <CapnKernel> Do you want to test your program's ability to send email, but don't want it to actually send email?
[21:14:58] <Payam> I have a layout that I have done in glade, I have the definition in it is own class, and I want to add that row to the main layout of my application .  https://bpa.st/GBHA
[21:15:14] <Payam> The error I get is "TypeError: could not convert value for property `type' from YoutubeDownloader to GtkWindowType"
[21:15:28] *** Joins: mickey5 (~user@user/mickey)
[21:16:02] <CapnKernel> You can create a mock email class, and have your test program insert it into the program.  Other code which calls (or thinks it's calling) the email class doesn't need to be modified and won't know any different.  After the call has finished, you can ask the mock email class to tell you about how it was called, verifying that everything worked.  Not possible with strong typing
[21:16:15] *** Joins: Gaurhoth (sid75085@id-75085.charlton.irccloud.com)
[21:17:06] *** Quits: mickey (~user@user/mickey) (Ping timeout: 244 seconds)
[21:17:07] *** mickey5 is now known as mickey
[21:18:10] *** Joins: Betal (~Betal@user/betal)
[21:18:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:21:16] *** Quits: paul424 (~tom@ip-37-248-158-119.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:22:28] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[21:22:46] <shangxiao> Err… python _is_ strongly typed. It's not _statically_ typed. https://wiki.python.org/moin/Why%20is%20Python%20a%20dynamic%20language%20and%20also%20a%20strongly%20typed%20language
[21:23:28] *** Quits: shailangsa (~shailangs@host86-185-102-120.range86-185.btcentralplus.com) (Ping timeout: 252 seconds)
[21:24:06] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[21:24:46] <shangxiao> (as opposed to say PHP)
[21:25:36] <nedbat> shangxiao: unfortunately, as that wiki page demonstrates, people use "strongly typed" to mean different things
[21:26:31] * akk remembers a line from Mr Bunny's Guide to Java: "Java is a strongly typed language. Its proponents, in their enthusiasm, really hammer on the keyboard."
[21:27:00] <shangxiao> nedbat: yep and we should help clarify that by stamping out strong == static ;)
[21:27:47] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[21:28:06] <nedbat> shangxiao: i agree that strong==static is wrong, because why use two words to mean the same thing?  But what do you want strong to mean then?
[21:28:10] <jinsun> also languages that are not duck typed definitely can do mocks, it might not be as convenient as python's dynamic monkeypatching, but possible
[21:29:23] <deniska> Strong typing is a typing system someone likes
[21:29:25] *** Joins: p-i-_ (~Ohmu@2403:6200:8870:9971:38d4:7e6b:8ef4:4c19)
[21:29:48] <nedbat> we should start describing Python as having "popular typing"
[21:30:05] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:30:30] <mefistofeles> nedbat: lol, how's that?
[21:30:48] *** Joins: besnn (~besnn@user/besnn)
[21:30:59] *** Joins: brachamh (~brachamh@user/brachamh)
[21:31:23] <nedbat> mefistofeles: it means whatever python has now :)
[21:32:05] <mefistofeles> nedbat: approved!
[21:32:16] *** Joins: Adoi (~Adoi@user/adoi)
[21:32:41] *** Quits: p-i- (~Ohmu@2403:6200:8870:9971:546d:7354:4fd1:9dfc) (Ping timeout: 250 seconds)
[21:32:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[21:33:08] <shangxiao> well that'd settle arguments for one thing
[21:33:27] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 240 seconds)
[21:34:46] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:35:07] *** Joins: fikran (~fikran@user/fikran)
[21:35:31] <Wooble> nedbat: at least using 2 different words to mean the same thing is less confusing than using the same word to mean 2 different things.
[21:36:16] *** Joins: Vonter (~Vonter@user/vonter)
[21:36:19] <nedbat> Wooble: languages are hard!
[21:36:43] <bjs> nedbat: I think you mean difficult actually
[21:36:52] *** Joins: delarge (~v@ctm.linuxers.cl)
[21:36:52] <nedbat> har har hard!
[21:37:23] <avu> Some languages are both hard and difficult, like German.
[21:37:53] <jean-luc> how do you diffrentiate hard from difficult
[21:38:06] <bjs> jean-luc: it's challenging
[21:38:07] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 240 seconds)
[21:38:20] <jean-luc> i can think of an easy way as i asked :)
[21:38:43] <avu> jean-luc: in the case of my very German attempt at a joke, I meant the "hard sound" and it being difficult to learn
[21:38:45] <aphysically> I wish YCM's refactor-rename didn't choke on this file, not sure what the problem is since it works on smaller python files
[21:39:29] *** Joins: noarb (~noarb@user/noarb)
[21:39:37] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 250 seconds)
[21:42:59] *** Joins: jdimatteo (~jdimatteo@159.21.83.34.bc.googleusercontent.com)
[21:43:29] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:43:31] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[21:43:45] <jdimatteo> Are there any immutable or const type hints / annotations for use in documenting / maintaining thread safety for multithreaded code?
[21:43:48] *** Joins: dznfdavnz (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:43:51] *** Joins: Achylles (~Achylles_@2804:431:d724:c077:94a6:8465:b517:1da8)
[21:44:23] *** Quits: bugsniper (~bugsniper@cpe-24-24-180-229.socal.res.rr.com) (Ping timeout: 250 seconds)
[21:44:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:44:57] <jinsun> jdimatteo: https://docs.python.org/3/library/typing.html#typing.Final ?
[21:46:35] *** Joins: cuz (~user@38.140.58.234)
[21:46:45] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[21:46:51] *** Joins: Samian (~Sami@2620:10d:c091:480::1:7de4)
[21:47:00] *** Quits: dznfdavnz (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[21:47:44] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[21:48:36] <jdimatteo> jinsun: Final doesn't imply immutability, e.g. I could have a Final dict foo and add items to it. As long as I don't reassign that foo to a different variable it adheres to Final
[21:49:25] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:101a:c784:11b0:c2b7) (Quit: Leaving)
[21:49:30] *** Joins: Rothschild666 (~Rothschil@c-69-249-29-95.hsd1.pa.comcast.net)
[21:49:36] *** Joins: dznfdavnz (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:49:43] *** Quits: dznfdavnz (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[21:50:12] <Rothschild666> good day Pythons
[21:50:38] <Rothschild666> is there a way to create a virtual environment with a stock installation of python?
[21:50:45] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[21:50:57] <jdimatteo> Rothschild666: python -m venv venv
[21:51:12] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:51:31] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[21:51:53] <Rothschild666> doesn't that bring in any packages which have already been installed?
[21:52:07] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[21:52:14] *** Quits: rsx (~dummy@ppp-188-174-134-41.dynamic.mnet-online.de) (Quit: rsx)
[21:52:17] <Rothschild666> lol i guess i could try it and see
[21:52:34] *** Quits: Achylles (~Achylles_@2804:431:d724:c077:94a6:8465:b517:1da8) (Remote host closed the connection)
[21:53:18] *** Joins: aead (~aead@user/aead)
[21:55:05] <Rothschild666> jdimatteo: nice that did the trick
[21:55:16] <Rothschild666> only two install packages are pip and setuptools
[21:55:24] <Rothschild666> installed*
[21:55:53] <jean-luc> --system-site-packages
[21:56:03] <jean-luc> you can use that if you want access to the system packages
[21:56:18] <jean-luc> https://docs.python.org/3/library/venv.html
[21:56:22] <jean-luc> useful af
[21:56:33] *** Joins: ckdcreation (~ckdCreati@147.55.133.142)
[21:56:53] <Rothschild666> oh nice nice
[21:57:52] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[21:57:59] <Rothschild666> yeah i am trying to split out some apps into their own venv's so they can be moved to their own hosts
[21:59:33] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:59:58] <jinsun> jdimatteo: ah ok, it doesn't check that, I don't think there is something like Immutable[MutableType], if you just want immutable dict you could annotate with Mapping instead https://docs.python.org/3/library/typing.html#typing.Mapping
[22:00:24] *** Quits: hexa- (~hexa-@juno.lossy.network) (Quit: WeeChat 3.1)
[22:01:40] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[22:01:44] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:c1bb:e261:9c62:cd35)
[22:01:49] *** Joins: hexa- (~hexa-@juno.lossy.network)
[22:03:01] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:03:07] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 240 seconds)
[22:03:56] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[22:04:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:05:03] *** Quits: Samian (~Sami@2620:10d:c091:480::1:7de4) (Read error: Connection reset by peer)
[22:06:01] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 248 seconds)
[22:06:02] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[22:06:33] <BinarySavior> i have a bunch of params that belong in a uri in dictionary format, what library can i use to get the encoded string from a dictionary
[22:06:52] <Wooble> jinsun: Mapping doesn't imply immutable, just that it *might* not be mutable.
[22:07:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[22:07:30] <Wooble> jinsun: err... nevermind, I guess the typechecker will care if you try to mutate it.
[22:08:19] <jinsun> ya defintely got mypy complaints when I try to add keys to a dict that was annotated as Mapping
[22:09:05] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[22:09:07] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[22:09:15] <nedbat> BinarySavior: what do you mean by "dictionary format"?
[22:09:53] <BinarySavior> i have a dictionary of parameters for a uri but I need to turn that into the string like &key1=value1&key2=value%2A2
[22:10:24] <BinarySavior> the dictionary of parameters does not have the %2A, etc
[22:10:30] <jinsun> BinarySavior: https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode
[22:11:01] <Wooble> BinarySavior: are you going to make a request for the url after creating it? If so, requests will do that encoding for you.
[22:11:14] *** Joins: cliluw (~cliluw@47.147.80.149)
[22:11:28] <BinarySavior> i'm just going to paste it in the web browser haha
[22:11:38] <BinarySavior> i'm trying to generate a one-time api key for strava
[22:12:00] <pragmatic_enigma> example for jinsun 's link: https://docs.python.org/3/library/urllib.request.html#urllib-examples
[22:15:40] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:15:43] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 252 seconds)
[22:16:59] *** Quits: pragmatic_enigma (~pragmatic@user/pragmaticenigma) (Quit: Leaving)
[22:18:04] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[22:19:08] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[22:21:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:23:40] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Ping timeout: 240 seconds)
[22:24:11] <kosh> I have an array in numpy and a matrix can someone think of a way to vectorize finding minimum of each each entry in the vector with each corresponding entry in the matrix such that I end up with a matrix of the same size and shape again?
[22:24:45] <lxer> I have a Dataclass, and I would like every attribute to be converted to floats, also after updating. This could be done by writing setters and properties, but is there a easier/shorter way?
[22:25:59] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[22:26:07] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[22:26:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 248 seconds)
[22:28:22] <jinsun> lxer: if you use pydantic instead of dataclass, those convertions will happen automatically, just annotate everything as float
[22:29:23] <jinsun> but I think only in the __init__, not sure if can write setters also for you
[22:29:29] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[22:30:05] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[22:31:17] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:32:10] <bjs> Wooble: jinsun: if you say `def f(m: Mapping[...])` then you're saying you know m is at *least* an immutable Mapping,  you can pass a Dict it's just that `f` should not be allowed to mutate it.
[22:32:14] *** Joins: sazawal (~sazawal@182.64.58.123)
[22:32:52] *** Joins: rb100 (~jeff@d27-96-151-97.nap.wideopenwest.com)
[22:33:32] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[22:34:03] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[22:35:12] *** Joins: Akuli (~Akuli@82-203-163-199.bb.dnainternet.fi)
[22:37:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[22:37:58] *** Joins: ubert (~Thunderbi@178.165.204.112.wireless.dyn.drei.com)
[22:38:05] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[22:38:54] *** Joins: nomic (~nomic@185.192.69.143)
[22:39:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:39:34] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:701e:7efd:6bd0:8508) (Read error: Connection reset by peer)
[22:39:37] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 248 seconds)
[22:40:17] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[22:40:25] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:1237:a91a:e02e:b58a)
[22:40:37] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:42:24] *** Joins: pro_z (~pro_z@37.214.45.81)
[22:42:41] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[22:44:32] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[22:44:57] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[22:45:32] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[22:45:47] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[22:45:53] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:46:20] *** Joins: jaggz (~jaggz@user/jaggz)
[22:47:16] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[22:48:11] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[22:49:55] *** Joins: arinov (~arinov@178.240.152.159)
[22:51:30] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:54:01] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[22:54:27] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[22:55:16] *** Joins: mud (~mud@user/kadoban)
[22:55:50] *** Joins: qlixed (~qlixed@181.44.129.13)
[22:56:55] *** Quits: maroloccio (~marolocci@37.100.40.252) (Quit: WeeChat 3.0)
[22:58:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[22:58:53] *** Joins: goldfish (~goldfish@user/goldfish)
[22:59:26] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:01:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[23:01:31] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 250 seconds)
[23:05:07] *** Joins: Bardon (~Bardon@user/Bardon)
[23:05:23] *** Joins: emika2 (~emika@185.207.249.177)
[23:06:03] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[23:06:27] *** Quits: emika (~emika@185.207.249.217) (Ping timeout: 240 seconds)
[23:06:27] *** emika2 is now known as emika
[23:08:52] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[23:09:14] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[23:09:45] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[23:10:56] *** Joins: ezio (~ezio@user/ezio)
[23:11:07] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[23:11:55] <ezio> I'm trying to install impacket.  I keep getting ImportError: cannot import name 'html5lib' from 'pip._vendor'
[23:12:36] <ezio> I tried  pip3 install --ignore-installed --upgrade html5lib
[23:12:53] <ezio> It made me install another dependency, but then I got it installed.
[23:13:00] <ezio> Still getting the same error.
[23:13:04] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[23:13:18] <ezio> Successfully installed html5lib-1.1 six-1.16.0 webencodings-0.5.1
[23:13:24] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[23:13:32] <ezio> This is a fresh Ubuntu vm.
[23:13:50] <Wooble> ezio: that library should be bundled inside pip, if it's in the pip._vendor namespace
[23:14:41] <ezio> I know some of those words but I don't know if that's good or bad.
[23:14:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:15:18] <jinsun> It is ubuntu, so debian's pip package, which probably removed the versioned stuff
[23:15:22] <Wooble> ezio: installing html5lib separately can't fix it; pip itself is broken.
[23:15:27] <jinsun> *vendored
[23:15:46] <ezio> I just apt install python3 python3-pip
[23:16:04] <tumbleweed_> ezio: this sounds like a bug that I'm responsible for
[23:16:09] <ezio> I mean I could recreate the vm
[23:16:10] *** tumbleweed_ is now known as tumbleweed
[23:16:21] <tumbleweed> ezio: which Ubuntu release?
[23:16:24] <ezio> Do you want a script?
[23:16:32] <ezio> Description:    Ubuntu 20.04.2 LTS
[23:17:13] *** Parts: apteryx (~maxim@dsl-10-129-227.b2b2c.ca) ()
[23:17:23] <Wooble> ezio: and you didn't do anything like trying to upgrade pip with pip itself before the broken install?
[23:17:48] <tumbleweed> doing that would probably work-around this issue
[23:18:17] <Wooble> IME it's usually what *causes* the issue by mixing up ~/.local libs and /usr/bin binaries :)
[23:18:20] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[23:18:42] <bn_work> anyone know if it's possible to patch a conda-built package?  thought I could just re-update the .tar.bz2 but it complains about filesize + hash mismatch (even after updating `info/paths.json`)
[23:19:00] <Wooble> erm, by "responsible" do you mean you're supposed to fix the bug, or you think you caused it? :)
[23:19:17] <ezio> apt install python3 python3-pip && git clone https://github.com/impacket/something && cd impacket/impacket && python3 -m pip install .
[23:19:18] *** Joins: zeden (~zeden@user/zeden)
[23:19:18] <ezio> error
[23:19:44] <tumbleweed> Wooble: both :P
[23:20:05] <Wooble> fun.
[23:20:29] *** Joins: maharshipatel (~maharship@49.34.24.191)
[23:20:53] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[23:21:41] <ezio> I guess I'll spin up a lower version vm.
[23:22:03] *** Joins: upsala (~zcb@185.213.155.160)
[23:22:27] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[23:22:44] *** Quits: remedan (~remedan@balak.me) (Quit: Bye!)
[23:22:58] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:23:43] <ezio> Apparently Digital Ocean doesn't give me a minor.minor version choice.  Just 20.04.
[23:23:45] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[23:23:52] <tumbleweed> ezio: https://github.com/impacket/something is a private repo
[23:24:03] <ezio> i know
[23:24:16] <tumbleweed> I can't reproduce the issue inside a virtualenv
[23:24:43] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[23:25:06] <ezio> I saw a mention of that somewhere.
[23:25:10] <ezio> virtualenv
[23:25:22] <tumbleweed> nor outside one
[23:25:28] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:25:29] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 248 seconds)
[23:25:37] <tumbleweed> if you can give me a means to reproduce, I can investigate deeper
[23:25:57] <tumbleweed> I'd suggest trying to reproduce it *witout* impacket
[23:27:47] *** Quits: ckdcreation (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[23:27:59] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[23:28:29] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[23:29:07] <ezio> I did it again.  And I was having the same error trying to install other things.
[23:29:11] *** Joins: cutotopo (~cutotopo@151.95.85.46)
[23:29:25] *** Quits: damonlynch (~ngaio@2601:245:c700:2c06:c0e0:62a7:7fac:e313) (Quit: Leaving)
[23:29:27] *** Quits: cutotopo (~cutotopo@151.95.85.46) (Remote host closed the connection)
[23:29:50] <ezio> python3 -m pip install anaconda
[23:30:05] <ezio> ImportError: cannot import name 'html5lib' from 'pip._vendor'
[23:30:20] <ezio> Could be something Digital Ocean is doing.
[23:30:30] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[23:30:58] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:31:08] <ChrisWarrick> nah, I doubt it
[23:31:11] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:31:14] <ChrisWarrick> debian/ubuntu likes to break python stuff
[23:31:25] <tumbleweed> ChrisWarrick: that's not a helpful comment
[23:31:29] *** Joins: remedan (~remedan@balak.me)
[23:31:33] <ChrisWarrick> well, it is
[23:31:39] <ChrisWarrick> don’t use debian/ubuntu-provided python stuff
[23:31:53] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:32:02] *** Joins: gloin (~gloin@user/gloin)
[23:32:11] <tumbleweed> we try to provide working python stuff
[23:32:44] <tumbleweed> nobody likes to break things
[23:33:13] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[23:34:03] <gloin> Hey all, I'm trying to figure out how to get subprocess.Popen to do the equivalent of my $foo = `somecommand | awk '{print $3}' | grep -v bungled`;
[23:34:08] <ezio> tumbleweed, can I pm you some creds?
[23:34:12] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[23:34:24] <gloin> simple one-liner from another language, what's the simple Python-y way to do it?
[23:34:57] <tumbleweed> ezio: you can, but even better would be to reproduce the issue on a fresh digitalocean VM in the simplest way possible
[23:35:05] <ezio> Just did
[23:35:09] <ezio> couldn't be fresher
[23:35:18] *** Quits: maharshipatel (~maharship@49.34.24.191) (Quit: Client closed)
[23:35:19] *** Quits: mei (~mei@user/mei) (Ping timeout: 250 seconds)
[23:35:30] <tumbleweed> pastebin the commands?
[23:35:31] <ChrisWarrick> gloin: you’d typically run the `somecommand` only with Popen or subprocess.run or something, and do the simple filtering with Python
[23:36:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[23:36:21] <Yhg1s> gloin: [line.split()[2] for line in subprocess.check_output(['somecommand']) if 'bungled' in line] probably.
[23:36:29] *** Parts: rb100 (~jeff@d27-96-151-97.nap.wideopenwest.com) ()
[23:36:39] <gloin> ChrisWarrick: in my specific case I'm actually using sed to split multiline results from the command into a single line - think about things like "ip addr show"
[23:36:46] <Yhg1s> oh, 'if 'bungled' not in line' rather.
[23:36:59] *** Joins: maharshipatel (~maharship@49.34.24.191)
[23:37:11] <ChrisWarrick> gloin: can you provide a representative sample of what you’re actually trying to run?
[23:37:11] <ezio> tumbleweed, https://gist.github.com/bluebaroncanada/69ae1af847d004bc26609e805dfea5cd
[23:37:13] <gloin> so far I have found zero python modules that actuall provide all the needed info on Linux interfaces - name, MAC, IP, Gateway
[23:37:16] <Yhg1s> gloin: yes, that kind of parsing would just be done in Python code. not necessarily in a one-liner though.
[23:37:24] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[23:37:27] * gloin thinks python needs backticks
[23:37:53] <ChrisWarrick> gloin: (no, it doesn’t)
[23:38:08] <ChrisWarrick> gloin: https://psutil.readthedocs.io/en/latest/#psutil.net_if_addrs perhaps?
[23:38:17] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:38:21] <jean-luc> i sense a bash troll has come aknockin
[23:38:30] * jean-luc the disturbance in the force
[23:38:44] <gloin> Probably doesn't need backticks, but this kind of simple text-parsing stuff is a lot harder than I like.
[23:39:05] * gloin also gets hollered at for excessive use of backticks in perl, so...
[23:39:13] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 250 seconds)
[23:39:32] <Yhg1s> gloin: subprocess.check_output is the backtics, except much more flexible.
[23:39:35] <melba> what's a nice way to add an http interface to a daemon? I want to be able to gather some stats and change some flags at runtime via curl. asyncio or flask in a thread maybe?
[23:40:28] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:40:30] <gloin> jean-luc: maybe? I get frustrated with bash too - 'ip addr show' either dumps everything out to multiline results or simplifies the result to omit info I need to store, thus "ip addr show | xargs | sed 's/ \([0-9]*: \)/\n\1/g' | grep -v 'lo:'" is the abomination that works
[23:40:52] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[23:40:54] *** Joins: waynew (~wayne@user/waynew)
[23:40:58] *** Quits: maharshipatel (~maharship@49.34.24.191) (Client Quit)
[23:41:14] <gloin> anyhow, if I could get the result of that command into a nice dictionary I would be so happy, even without the grep -v at the end.
[23:41:18] <tumbleweed> ezio: you want to be one level up the directory heirarchy
[23:41:28] <tumbleweed> ezio: cd impacket - not impacket/impacket
[23:41:31] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 252 seconds)
[23:41:42] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (Ping timeout: 250 seconds)
[23:42:07] <ezio> ah
[23:42:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[23:42:22] <tumbleweed> something in that directory was probably masking a stdlib module
[23:42:32] <ezio> okay.  thanks
[23:42:36] <ezio> sorry about that
[23:42:39] <gloin> ChrisWarrick: psutil looks promising, thanks
[23:42:55] <sazawal> Hi all. Just curious if I have the name of a built-in class, how do I get the class? Say 'Exception' is a builtin class, or 'ZeroDivisionError'. I have the class names as strings, how do I get the class or make a class object?
[23:43:15] <Yhg1s> sazawal: you build a dict mapping from the name to the class.
[23:43:15] <ChrisWarrick> sazawal: what is the end goal?
[23:43:26] <Yhg1s> sazawal: that way you have complete control over what names are available.
[23:43:47] *** Quits: pro_z (~pro_z@37.214.45.81) (Ping timeout: 240 seconds)
[23:43:56] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[23:43:59] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:44:32] *** Joins: fikran (~fikran@user/fikran)
[23:44:47] <sazawal> Hmm, I was thinking to make a custom JSONEncoder for objects of type Exception. While decoding, I would need that. But I could also handle it as strings, it just came to my mind if there is a way to do such a thing
[23:44:56] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[23:45:14] <xheimlich> what's the syntax for annotating that a function returns a function?
[23:45:15] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:45:21] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[23:45:24] <Yhg1s> xheimlich: Callable
[23:45:27] <sazawal> Yhg1s, ChrisWarrick ^
[23:45:29] <bjs> xheimlich: see https://www.python.org/dev/peps/pep-0484/#callable
[23:45:40] <xheimlich> in Python 3.8, do I need to import Callable from typing or something?
[23:45:49] <xheimlich> ok, I'll read that
[23:45:52] <bjs> xheimlich: yes
[23:46:02] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be)
[23:46:46] *** Joins: qlixed (~qlixed@152.170.36.244)
[23:46:50] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:47:47] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[23:47:58] *** Joins: d0ku (~d0ku@178.43.56.75.ipv4.supernova.orange.pl)
[23:48:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:48:57] <aphysically> I'm trying to figure out proper best practices for subclassing an immutable type: https://bpa.st/GVYA
[23:49:18] <nedbat> aphysically: i would strongly recommend not subclassing float
[23:49:31] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:49:44] <aphysically> if people feel strongly about it I won't, but I would still like to understand a couple things about it
[23:49:59] <aphysically> what type would I be annotating the return type of __new__ with?
[23:50:03] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[23:50:12] <xheimlich> unrelatedly. I'm trying to figure out the efficient way of expressing a computation on two ndarrays so that it can be repeatedly used as a loss function.
[23:50:34] <aphysically> I'm a little bit confused about whether or not to call __init__ for float and what to put in it (it seems to work if I don't call it, despite the documentation seeming to insist I call it)
[23:50:50] <Yhg1s> aphysically: don't call __init__ manually. Python will call it when it is appropriate.
[23:51:08] <Yhg1s> aphysically: unless you mean a super() call, in which case yes, you should.
[23:51:42] <nedbat> aphysically: btw, the reason not to subclass float is because it will be very hard to keep it in your class when you operate on it:  ff = FFFloat(); type(ff+1) --> float
[23:51:54] <aphysically> yes, see the code snippet Yhg1s
[23:52:09] *** Joins: damonlynch (~ngaio@2601:245:c700:2c06:fd04:ccbb:f4a8:b7d2)
[23:52:10] <xheimlich> more to the point: given an ndarray, I want to do one computation f(x) to its negative elements and another g(x) to its positive elements.
[23:52:26] <sazawal> Yhg1s, How do I make the dict mapping from name to the class?
[23:52:36] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:52:37] <xheimlich> so naive Python is [f(x) if x<=0 else g(x) for x in xs]
[23:52:48] <aphysically> nedbat: ah
[23:52:55] <xheimlich> what's the best way to say that in numpy?
[23:52:59] <Yhg1s> sazawal: '{'SomeName': SomeName}'
[23:53:23] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[23:53:24] <sazawal> Yhg1s, Ah you mean predefine all the classes I am supposed to use?
[23:53:28] <sazawal> In a dict?
[23:53:33] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[23:53:40] <Yhg1s> sazawal: yes.
[23:53:44] *** Joins: georgios (~georgios@user/georgios)
[23:54:04] <nedbat> sazawal: i'm curious to hear more about putting exceptions into json data
[23:54:12] <sazawal> Yhg1s, Hmm that would be too much effort.
[23:54:20] <aphysically> Yhg1s: I'm not sure the purpose of calling the super init with float though, it seems to not do anything, and in my class example I would need to compute the value two times using the ff_num function if init needs the same value as __new__, which feels like it can't be right
[23:54:23] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 250 seconds)
[23:55:00] <Yhg1s> aphysically: float.__init__ doesn't do anything, but super() might not call float.__init__. And yes, don't subclass float.
[23:55:54] <sazawal> Yhg1s, In the end I would be using Exception to string and then string back to Exception. I am sure such a thing would not be globally useful except for my own case.
[23:56:27] *** Joins: cuz (~user@38.140.58.234)
[23:57:06] <aphysically> nedbat already convinced me not to subclass float, I'm just trying to understand the subclassing now
[23:57:14] <sazawal> Yhg1s, But like you said, there must be many different subclasses of Exception, don't know how can I list all of them for all possible cases.
[23:57:55] <bjs> sazawal: what are you going to do with this dict? Maybe there's a nicer way to do what you actually want?
[23:58:36] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[23:58:43] <sazawal> bjs, Thinking to subclass JSONEncoder for Exception objects
[23:58:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[23:59:02] <bjs> sazawal: why does a JSONEncoder need to lookup the Exception object from the name?
[23:59:15] <Yhg1s> sazawal: arbitrarily creating instances of them is not going to work either. Different subclasses have different arguments to __init__.
[23:59:21] <Yhg1s> sazawal: so you need more information anyway.
[23:59:41] *** Joins: maroloccio (~marolocci@37.100.40.252)
