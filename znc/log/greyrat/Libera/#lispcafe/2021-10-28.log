[00:24:38] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[00:24:56] *** Joins: robin (~robin@user/terpri)
[00:29:59] <Alfr> pjb, you mean the phase where the compiler/system/runtime determines the programmers intent? I'd really like to see that happen. :D
[00:35:09] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[00:35:27] *** Joins: raeda (~raeda@72.49.219.33)
[00:36:41] <pjb> Alfr: yes, if you assume the meaning of the program is what was intended :-)
[00:43:11] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[00:43:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[01:01:13] <hayley> contrapunctus: I dunno about Drew DeVault, but usually I write more interesting programs than hello world.
[01:02:37] <selwyn> hayley: and i bet they are all slower than hello world in c
[01:02:40] <selwyn> checkmate
[01:02:53] * hayley uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/nfMDIyNgJFFgwGdgDXxWszPo/bruhcha.jpg >
[01:03:10] <selwyn> this guy is something else
[01:03:13] <selwyn> why benchmark hello world
[01:03:52] <hayley> Because setting up the stack so that overflows trap nicely apparently is more complexity, and complexity bad?
[01:04:03] <hayley> https://www.youtube.com/watch?v=tNUNS6w8NUA
[01:04:04] -ixelp- Firth Of Fifth - YouTube
[01:05:39] <gilberth> The hello world in assembler is even buggy.
[01:07:25] <hayley> Only the Julia and PyPy execution times would be noticeable by a human (IMO), and the sizes are irrelevant most of the time.
[01:07:27] <gilberth> Anyhow, I wonder, if I even need a full GLR parser, or if just some backtracking would do.
[01:08:05] <hayley> "The size of all files which must be present at runtime (interpreters, stdlib, libraries, loader, etc) are included" And such files are only needed once, don't change in size w.r.t more user LOC or user programs, so I can make them arbitrarily small by writing longer and more programs.
[01:08:08] <gilberth> Well, we don't need to discuss that a hello world benchmark is the most silly thing to do.
[01:08:59] <gilberth> hayley: The author skipped the kernel in his size measurements to begin with.
[01:09:49] <hayley> He probably should throw in the C/Rust/etc compilers for good measure, unless he thinks his code is perfect.
[01:09:54] <hayley> ....er, he probably does.
[01:10:04] <hayley> Walked right into that one.
[01:10:31] <gilberth> Well, as I said, the assembler is buggy.
[01:11:00] <hayley> How so?
[01:11:49] <gilberth> Well, you should check the return value of write(2) and call it again when you get EAGAiN or EINTR.
[01:12:10] <hayley> lol
[01:12:32] * hayley looks at a coding font quiz and finds no Computer Modern Typewriter Text.
[01:14:04] <gilberth> hayley: A curious thing happens: On my Xeon the new clang with -fprofile-{generate,use} isn't faster than gcc. While on the i5 the clang generated code is faster by quite some margin.
[01:15:34] <gilberth> Thus I happen to ask myself, what's the difference between both architectures?
[01:16:51] <hayley> All these fonts look the damn same, or total crap.
[01:17:38] <gilberth> Or both?
[01:17:47] <hayley> Yes.
[01:21:23] <Alfr> pjb, when you phrase it in this way, it somehow feels like cheating. :\
[01:24:12] <hayley> Usually I'd refer to the Agner micro-architecture guide, but we have a whole application and not just one loop of funny instructions.
[01:25:04] <pl> gilberth: which Xeon and which i5?
[01:25:34] <hayley> PEXT has a latency of fucking 18 cycles? I'd rather do the shift and mask thing in that time.
[01:25:38] <hayley> (on Zen 1)
[01:26:12] <hayley> Like most things, they only made it good on Zen 3. /me grumbles
[01:28:38] <pl> gilberth: IIRC, Xeons that aren't rebranded i7 tended to lag a bit in microarchitecture
[01:29:04] <gilberth> pl: /proc/cpuinfo says "Xeon(R) CPU E3-1276 v3 @ 3.60GHz" the mac mentions "Intel Core i5", which perhaps is too general.
[01:30:14] <pl> gilberth: what year is the Mac from?
[01:30:34] <hayley> https://www.youtube.com/watch?v=M3SvAhjhbpA
[01:30:35] -ixelp- Gary Numan (TV, Live and Rarities) [06]. I Die: You Die (Kenny Everett) - YouTube
[01:30:51] <gilberth> pl: It says "Late 2012".
[01:31:26] <pl> huh
[01:31:35] <gilberth> pl: ?
[01:31:40] <pl> Interesting that you got such a difference between Haswell and IvyBridge
[01:31:48] <hayley> gilberth: sysctl -a | grep brand
[01:32:20] <pl> (the Mac is an Ivy Bridge era i5, the Xeon is a Haswell i7-but-xeon-branded
[01:35:37] <hayley> .oO(So, what Intel CPUs have memory protection keys? Never mind that I probably can't afford them, and they are a waste of money.)
[01:37:04] <pl> gilberth: I suspect that the bigger cache and somewhat faster microarchitecture (plus generally higher clock) puts whatever change in optimizations into noise
[01:37:15] <pl> hayley: I *think* ARK might be helpful
[01:37:53] <hayley> No mention of MPK on https://www.intel.com/content/www/us/en/products/sku/134599/intel-core-i912900k-processor-30m-cache-up-to-5-20-ghz/specifications.html, must just be servers :(
[01:38:07] * hayley reads footnotes
[01:38:10] <hayley> "Intel® Iris® Xe Graphics only: to use the Intel® Iris® Xe brand, the system must be populated with 128-bit (dual channel) memory. Otherwise, use the Intel® UHD brand."
[01:38:54] <hayley> Yeah, this one has it though https://www.intel.com/content/www/us/en/products/sku/212261/intel-xeon-e2378-processor-16m-cache-2-60-ghz/specifications.html
[01:40:12] <hayley> I read that ARM already had something similar, but I'd have to check.
[01:40:13] <pl> hayley: only server cpus from highest brand have them, afaik
[01:40:26] <pl> (intel xeon scalable)
[01:40:44] <gilberth> pl: Perhaps.
[01:41:28] * hayley settles for regular Pauseless flipping then, because she is not made of money
[01:41:37] <gilberth> I wonder how a current CPU would fare.
[01:43:45] <hayley> Still no working hardware transactional memory though ):
[01:44:47] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[01:54:31] <hayley> https://www.reddit.com/r/sustainability/comments/qglnus/climate_change_activist_left_speechless_after/ "You can't grow concrete"
[01:54:33] -ixelp- Climate change activist left speechless after talk show host suggests concrete can be grown like trees. : sustainability
[02:12:02] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[02:19:28] *** Quits: LoopMacro_ (~textual@c-24-22-157-127.hsd1.wa.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:27:12] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:31:44] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[02:39:01] *** Joins: jeko (~user@user/jeko)
[02:39:23] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 264 seconds)
[02:51:45] <hayley> https://www.youtube.com/watch?v=LT3cERVRoQo
[02:51:45] -ixelp- David Bowie - I'm Afraid of Americans - YouTube
[02:57:16] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[02:57:45] *** Joins: robin (~robin@user/terpri)
[03:14:22] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[03:33:51] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fa59:2f99:edd:cd7b) (Ping timeout: 260 seconds)
[03:34:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e)
[04:34:34] * hayley uploaded an image: (45KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/sRwVWNfzVwSaTKCVLVqmaPAA/toilets.jpg >
[04:34:35] <hayley> gilberth: is this true
[04:53:51] *** Quits: jeko (~user@user/jeko) (Ping timeout: 245 seconds)
[04:55:48] <contrapunctus> hayley: kidding, I knew it was something that would tick you or Gnuxie (or most Common Lispers?) off 😄
[04:57:22] *** Joins: jeko (~user@user/jeko)
[04:59:55] <hayley> Apparently SBCL makes 4,585 syscalls for sbcl --eval '(print "hi")' --quit
[05:00:14] <hayley> Though...that includes loading Quicklisp too.
[05:00:53] <hayley> 260 without.
[05:01:21] <contrapunctus> 😶
[05:11:35] *** Quits: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net) (Remote host closed the connection)
[05:15:37] <gilberth> hayley: Yep.
[05:15:49] <moon-child> hayley: 'python -c exit' does a lot more
[05:15:56] <hayley> Hooray!
[05:16:36] <gilberth> What?
[05:16:52] <hayley> That SBCL does fewer syscalls than CPython for a trivial program.
[05:17:19] <hayley> 1294 here. Though it's busy looking through packages.
[05:23:16] <gilberth> hayley: Oh, I thought you were referring to the toilet.
[05:23:35] <gilberth> ccl: 295, sbcl: 480
[05:24:32] <gilberth> But this is pointless.
[05:24:35] <moon-child> in fairness, toilets are a lot more worthy of celebration than hardware privilege separation
[05:29:07] *** Quits: jeko (~user@user/jeko) (Ping timeout: 260 seconds)
[05:29:58] *** Joins: jeko (~user@user/jeko)
[05:29:58] <gilberth> C: 64
[05:31:49] <contrapunctus> ...did I just unwittingly nerd-snipe this channel? Get back to lisping y'all ^^'
[05:33:06] <gilberth> You start, what are you hacking tonight?
[05:33:28] * hayley is stuck writing a design document, then implementing either end in Python and Java. Double unfun.
[05:33:59] <gilberth> You write design documents?
[05:34:23] <hayley> Yes.
[05:34:46] <gilberth> Do you enjoy this?
[05:35:10] <hayley> It's for the assignment, as I have to document everything anyway, but sometimes I do it myself, e.g. https://gitlab.com/cal-coop/netfarm/cl-decentralise2/-/snippets/2050962
[05:35:13] -ixelp- An alternate client system with monads ($2050962) · Snippets · Cooperative of Applied Language / The Netfarm Suite / cl- [...]
[05:35:54] <contrapunctus> gilberth: trying to write a new backend for this. Also dealing with the after-effects of migrating it to CLOS - consequent architectural changes keep popping up. https://tildegit.org/contrapunctus/chronometrist
[05:36:00] <gilberth> Quite a price tag, I can't afford that.
[05:40:09] <hayley> Average Haskell user computer (they need $2 million to run the type checker)
[05:42:29] <contrapunctus> lol
[05:43:10] <hayley> (c.f https://i.redd.it/iq1zdetm8su71.jpg)
[05:43:35] <hayley> (UserBenchmark will still say the one on the right gives 5% more FPS though)
[05:44:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[05:45:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:05:45] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[06:07:46] *** Joins: raeda (~raeda@72.49.219.33)
[06:13:56] *** Joins: robin_ (~robin@user/terpri)
[06:14:11] *** Quits: robin (~robin@user/terpri) (Ping timeout: 264 seconds)
[06:17:54] *** Joins: robin (~robin@user/terpri)
[06:18:24] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[06:18:35] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 260 seconds)
[06:19:21] <contrapunctus> I have a macro wrapping around `cl-loop`, and the signature looks like `_for record _in backend &rest loop-clauses`. Now I'm making something similar that has an additional variable, `date`. Do I use `_for (date . record) ...` to resemble `loop`? Or the more English-like `_for records _on date _in backend ...`? Or something else...?
[06:23:19] *** Joins: jeko (~user@user/jeko)
[06:24:44] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[06:26:44] *** Joins: jeko (~user@user/jeko)
[06:27:41] *** Joins: robin_ (~robin@user/terpri)
[06:27:55] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[06:30:08] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[06:30:14] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[06:30:21] *** Joins: raeda_ (~raeda@72.49.219.33)
[06:30:36] *** Joins: jeko (~user@user/jeko)
[06:30:46] <gilberth> contrapunctus: The former if it makes sense. And where is this funny underscore coming from?
[06:31:12] <contrapunctus> gilberth: the funny underscore means the argument is not used 😀
[06:31:47] <gilberth> _for is not used?
[06:32:12] <contrapunctus> not used * in the body
[06:32:21] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[06:34:18] <gilberth> So, not used by cl-loop? odd.
[06:34:45] <contrapunctus> gilberth: not used by the macro wrapping around cl-loop
[06:35:25] <gilberth> That would be odd. ;)
[06:42:37] <contrapunctus> gilberth: this is the definition - https://tildegit.org/contrapunctus/chronometrist/src/branch/grouped-plist-format/elisp/chronometrist.org#headline-113
[06:43:42] *** Quits: robin_ (~robin@user/terpri) (Quit: Leaving)
[06:44:00] *** Joins: robin (~robin@user/terpri)
[06:46:00] <gilberth> contrapunctus: Ah, and I can pass in what ever I want? Like (chronometrist-loop-days while (< n 10) do (print 'hi))?
[06:46:36] <gilberth> * (incf n) ;I guess
[06:46:42] <contrapunctus> gilberth: ahahahaha 😅
[06:46:45] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 260 seconds)
[06:46:48] <contrapunctus> Welp. Hm...
[06:47:44] *** Joins: copec (~copec@schrodbox.unaen.org)
[06:48:23] <contrapunctus> gilberth: what would you suggest?
[06:48:49] <contrapunctus> (To avoid this 'pass anything' situation?)
[06:50:46] <gilberth> what about (defmacro superfluous-package-prefix-dodays ((day-var init &optional result) &body body) ...) ;old school.
[06:53:33] <gilberth> And as a personal note, I don't like those iterator objects; as a matter of taste.
[06:54:29] <gilberth> Does elisp even have TAGBODY and BLOCK? Or PROG perhaps?
[06:55:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[06:58:12] <hayley> https://www.youtube.com/watch?v=F1VymsO6aLA
[06:58:13] -ixelp- Gary Numan & Dramatis Love Needs No Disguise - YouTube
[07:01:29] <contrapunctus> gilberth: pff, I was explicitly after a cl-loop wrapper. collect/append/sum etc are awesome. Couldn't find any other way to extend cl-loop :( I think it does...
[07:05:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:07:32] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:18:34] <gilberth> contrapunctus: Do you really need those iterators? Are you iterating over something online? Over something not fitting into your RAM? Do you abort often?
[07:20:39] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:20:42] <contrapunctus> gilberth: ah...yes, I suppose - the records can reach pretty big numbers. Are you suggesting a generic higher-order function?
[07:22:23] <gilberth> Higher order? You mean sth like MAP-OVER-DAYS? And how many days are there? 1M, 1G, more?
[07:22:54] <gilberth> Thus my question, if elisp has proper non-local exit. But I guess it's just CATCH/THROW.
[07:23:18] <gilberth> If you win by aborting early on.
[07:26:27] <contrapunctus> gilberth: yeah, that's what I meant. Days...it's a time tracker - I have 3 years of data right now, so roughly 1k days. I figured the HoF approach would be more verbose than cl-loop, and also involve multiple interfaces (one mapcar-like, one mapc-like, ...)
[07:27:00] <moon-child> this is why people like clojure 'transducers'
[07:27:51] <gilberth> And no, I suggest to just use a list and not an iterator. And continue with cl-loop. Where does this iterator store its damn state anyway as elisp has no proper closures. Where do these days come from? I don't see a definition of that iterator.
[07:28:43] <gilberth> 1k? lol. and you bother not consing a damn list and get over with it?
[07:29:06] <moon-child> I thought newer elisp has closures?
[07:29:24] <gilberth> And I expect that a function called blah-iterator returns an iterator and not an item.
[07:29:27] <contrapunctus> gilberth: the iterator state is in a slot in the backend object 😅
[07:29:47] <gilberth> moon-child: With some global flag, you flip. Good luck.
[07:31:07] <gilberth> If they would have had taste, there would be a LEXICAL-LAMBDA or sth. With packages, you could name it LAMBDA even. Did I mention, that I don't like elisp?
[07:32:59] <contrapunctus> xD
[07:33:02] <gilberth> moon-child: when the days come from sth online, like a remote data base, I would still go with MAP-... I just don't like iterators, sorry. Too much hidden state.
[07:33:31] *** Joins: semz (~none@user/semz)
[07:34:11] <contrapunctus> gilberth: the 'iterator' is a generic function, each backend implements a method for it.
[07:34:56] <contrapunctus> The two backends so far are both s-expressions in a text file.
[07:35:18] <gilberth> Yes, but it doesn't return an iterator, does it?
[07:35:32] <hayley> https://plover.com/~mjd/misc/hbaker-archive/Iterator.html
[07:35:42] <contrapunctus> gilberth: yeah...any suggestions for different naming?
[07:38:20] <gilberth> contrapunctus: If you really want to stick to your irritating iterator model, begin to name things properly. (foo-iterator sth) should return an iterator object, which obeys an iterator protocol, like (iterator-end-p iterator) and (iterator-next iterator). With your current API: How to iterate twice? Either in parallel or sequential?
[07:40:15] <contrapunctus> 🤔
[07:43:47] <contrapunctus> New (old) idea - rewrite it in Common Lisp + McCLIM 😅
[07:44:37] <contrapunctus> Or, I don't know...see if `loopy` allows extension in a different manner.
[07:47:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e) (Quit: WeeChat 3.3)
[07:47:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e)
[07:47:26] <gilberth> You still have not said, why a mere list wouldn't do.
[07:47:55] <contrapunctus> Yeah, I was just wondering about that...how bad would it really be, performance-wise 🤔
[07:48:14] <moon-child> list of a thousand elements is fine
[07:48:28] <moon-child> vector even.  If you care so much
[07:48:34] * gilberth mumbles sth aboute premature optimizations.
[07:49:13] <contrapunctus> I must have tried it at some point, really.
[07:49:28] <moon-child> contrapunctus: rule of thumb.  Unless you have tried it and found it to be slow; or unless you have done it a thousand times before and _know_ it will be slow, assume it will be performant enough
[07:50:00] <gilberth> I'd say the funcalling overhead of that iterator would be far worse than the little consing. Especially with elisp.
[07:52:04] <moon-child> hmm, I am not sure about that.  As it is an interpreter, _every_ operation involves a dispatch.  So funcall will not make it much worse
[07:52:35] <gilberth> I bet CAR and CDR are instructions.
[07:52:44] <moon-child> sure.  But they still have to be dispatched
[07:53:09] <moon-child> case OP_CAR: push(pop()->cons.car)
[07:53:45] <moon-child> case OP_FUNCALL: ...
[07:53:51] <gilberth> And how does this compare to a generic function dispatch? Are generic functions even somehow builtin into elisp, or are they implemented in "user space"?
[07:54:27] <moon-child> generic function?  I was assuming it was a special-built function for the purpose of iterating over days
[07:54:49] <moon-child> if every iteration involves a generic function dispatch then yeah that would be awful
[07:55:25] <gilberth> Well, the code shown says cl-defgeneric and cl-defmethod.
[07:55:58] <moon-child> ah, I missed that link
[07:56:13] <gilberth> And, even if that generic function dispatch would be fast, you win on locality, by first consing and then iterating. :-p
[07:56:25] <gilberth> [Unless you start to page]
[07:57:48] <moon-child> I assume the iterator will be lazy.  So once you've iterated over a given object, you can throw it out and grab the next one.  Or even destructively update the old object and avoid consing at all (depends on your protocol)
[07:59:18] <gilberth> You still flip out and into the iterator.
[07:59:54] <gilberth> E.g. you parse faster, when you scan all tokens in batch.
[08:00:15] <moon-child> yeah
[08:01:07] <moon-child> would probably want to pull some min batch size of objects from the iterator at once, not one at a time, if you went that route
[08:01:27] <contrapunctus> Huh. So a form emitting a large list takes a few seconds to return in IELM...but takes 0.5s if I run it with `(benchmark 1 ...)`. My life has been a lie xD
[08:02:57] <contrapunctus> So it takes 0.5s to read the whole file into a list (~6.6k plists, collected over 3 years).
[08:03:40] <gilberth> moon-child: Yes, or use another core to do things in parallel. BTW gcc is running cpp in parallel, too.
[08:03:52] <moon-child> indeed!
[08:04:01] <moon-child> 'cpp in parallel' only with -pipe, i think
[08:04:05] <gilberth> contrapunctus: And what needs the few seconds then?
[08:04:31] <moon-child> contrapunctus: how long does it take to read the whole file without producing a list?
[08:04:42] <gilberth> moon-child: IIRC it has become a default since a while. I really don't know.
[08:04:47] <moon-child> ah, ok
[08:05:30] <gilberth> But makes sense, as cpp is practically I/O bound.
[08:06:25] <gilberth> And it has to read each file a dozen times, again and again. Though you could optimize that.
[08:06:26] <moon-child> is it?  I heard some people at facebook made their own preprocessor because the existing one was too slow
[08:06:44] <moon-child> https://github.com/facebookarchive/warp  this
[08:06:45] -ixelp- GitHub - facebookarchive/warp: A fast preprocessor for C and C++
[08:07:45] <White_Flame> and in windows land, there's a notion of precompiled headers to get around all that overhead, too
[08:09:19] <gilberth> I would assume that those precompiled header files more or less store a ready to use AST.
[08:10:09] <gilberth> I never got why C compilers couldn't just keep such a cache in an orthogonal manner.
[08:10:38] <White_Flame> yeah, I know.  or do more like java and have a single invocation of the compiler do a bunch of files
[08:10:47] <gilberth> That would however be tricky.
[08:11:08] <White_Flame> the tons of individual launched & exited processes can't be great either in throughput
[08:11:23] <gilberth> As what an .h file does depends on the current #define's and the current typedef's.
[08:38:44] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:39:03] <dave0> maw
[08:39:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:39:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:11:19] <hayley> maw
[09:11:30] <hayley> https://www.youtube.com/watch?v=Ji7Hf-91dzk
[09:11:31] -ixelp- We Take Mystery (To Bed) (Live) - YouTube
[09:17:10] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:42:09] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:06:02] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[10:09:28] *** Joins: robin_ (~robin@user/terpri)
[10:09:36] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[10:09:46] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[10:09:55] *** Joins: robin_ (~robin@user/terpri)
[10:27:46] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:53:52] <hayley> While we aren't going back to studying at campus, the campus is apparently open if you are fully vaccinated. So my ownership of the GC Handbook is threatened.
[10:57:03] <shka> https://www.youtube.com/watch?v=i8ju_10NkGY
[10:57:04] -ixelp- Lazy Town | You Are A Pirate Music Video - YouTube
[10:57:14] <shka> hayley: just a tip
[10:57:31] *** Joins: random-nick (~random-ni@87.116.183.63)
[10:59:54] <selwyn> retro
[11:00:30] <hayley> shka: I quite like having a dead tree format one.
[11:00:43] <gilberth> hayley: You had enough time to put the book onto a scanner and prepare a copy.
[11:01:11] <hayley> A hypertext version would also work though.
[11:01:46] <gilberth> A djvu wouldn't?
[11:03:05] <hayley> The ebook copy I found was shit.
[11:03:14] <gilberth> Heh, we did that a lot as students, as we were too cheap for the really interesting books. I wrote a CL program which would correct any rotation of the pages and would fit the margins of all pages.
[11:03:31] <hayley> You wouldn't download a Handbook
[11:03:51] <gilberth> It is surprisingly simple to correct an angle automatically.
[11:04:37] <gilberth> hayley: As I told you, we "pirated" quite a few books from the library with using a flatbed scanner.
[11:05:01] <gilberth> by ;rather, I guess.
[11:05:13] <hayley> https://www.youtube.com/watch?v=gD9C1az9ZYc
[11:05:14] -ixelp- Emerson, Lake & Palmer - Pirates - Live In Montreal, 1977 - YouTube
[11:09:48] <hayley> https://www.youtube.com/watch?v=pCCornRCFOs
[11:09:49] -ixelp- He repeats himself when under stress - YouTube
[11:15:41] <selwyn> https://www.getyarn.io/yarn-clip/b695a594-ec7c-4a33-ad1b-5e263f1b30f8
[11:15:42] -ixelp- YARN | Boy, you got me confused with a man repeats himself. | The Wire (2002) Drama | Video clips by quotes | b695a594 | [...]
[11:20:57] *** Joins: vats (~vats@103.158.91.165)
[11:21:29] <shka> hayley: the power of Xerox is yours to commend!
[11:21:36] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:22:03] <shka> but maybe it is not worldwide phenomena among students
[11:22:13] <selwyn> hm
[11:22:14] <contrapunctus> gilberth: https://www.diybookscanner.org/
[11:22:27] <shka> in Poland students pirate books by photocopying
[11:22:32] <shka> at SCALE
[11:22:36] <selwyn> really?
[11:22:40] <selwyn> yeah doesn't happen here
[11:22:56] <contrapunctus> happens in India all the time
[11:23:29] <selwyn> my copy of k&r comes from india only £3
[11:23:48] <selwyn> i bought it when i was somewhat impoverished
[11:24:27] <selwyn> generally i think 'normal people' are much less good at pirating anything than they used to be
[11:25:28] <selwyn> doesn't it take absolutely ages to pirate an entire book with a scanner?
[11:26:17] <shka> selwyn: you don't scan, you make a photocopy
[11:26:39] <selwyn> gilberth mentioned a scanner
[11:26:41] <selwyn> but in any case
[11:27:02] <selwyn> do you slice all the pages off and then feed it into a photocopier/scanner?
[11:27:42] <shka> huh, why would you destroy the book?
[11:27:43] <selwyn> otherwise you have to turn every page yourself and make the pages lie flat
[11:27:50] <shka> exactly
[11:27:54] <selwyn> too much like hard work :p
[11:28:07] <shka> you don't have to do that personally
[11:28:18] <shka> anyway, how about your backup?
[11:28:25] <selwyn> uh
[11:28:30] <selwyn> haven't done anything about it yet
[11:28:38] <selwyn> wondering how necessary it is
[11:28:38] <White_Flame> all it takes is 1 person to do the hard work of making it digital, and then nobody else ever has to
[11:30:26] <selwyn> honestly i feel a bit embarassed
[11:30:57] <selwyn> backing stuff up is basic advice
[11:35:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:36] <hayley> https://www.youtube.com/watch?v=Qxcyb5z2HDM
[11:35:37] -ixelp- Raspberry Pi Zero 2 W: We have a new Pi! - YouTube
[11:36:16] <selwyn> welsh power
[11:37:37] <gilberth> shka: As I visited the local university library for research in law all too often, we copied at lot and this where no photocopying machines, but really fast scanners, with a camera above pointing to a table. You would flip a page and push a foot pedal to scan the next page. When done you find that all in hi-res on your USB stick you brought with yourself. We would have loved to have sth like that at our time.
[11:38:07] <gilberth> selwyn: And the scanner is almost faster than you flipping pages.
[11:38:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:38:35] <shka> niiiice
[11:38:46] <selwyn> wow
[11:40:54] <gilberth> As I was a student, I could mail the library and they would pick up any scientific article, scan it and send me an FTP link.
[11:41:35] <selwyn> i use the zotero citation manager to add journal articles and ebooks to my personal collection, that will outlast my time at university
[11:41:47] <gilberth> Later we had online access to most publishers.
[11:41:52] <selwyn> unsure how useful it would be to people here, but would recommend it
[11:42:27] <gilberth> I really miss that because even today you find papers behind a pay-wall.
[11:43:17] <ck_> luckily many authors host their own copies somewhere, but it is unfortunate
[11:43:28] <selwyn> hm
[11:43:41] <selwyn> arxiv solves 70% of the problem ime
[11:43:42] <gilberth> Anyhow, my not quite GLR backtracking parser seems to work.
[11:44:13] <hayley> You have posted O(2^n) prepare to lose subscriber
[11:44:29] <gilberth> I am not after shift/reduce conflicts, my grammar has none but the famous dangling else, but after identifiers either being a typename or not.
[11:45:04] <selwyn> i published in an open journal, which was a really positive experience
[11:45:07] <selwyn> hopefully that's the future
[11:45:15] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 260 seconds)
[11:45:22] <gilberth> So when I jam, I backup and see if turning a regular identifier into a typename or the other way around helps.
[11:47:54] <hayley> Well, there is one place that profiling would help with searching REs. When we do BMH or SIMD search, it helps to know if we have an unlikely prefix, so that we aren't wasting more time with every possible location matching.
[11:48:02] <gilberth> I could do that to type qualifiers and storage classes, too. At times you see nonsense like 'char __signed' in header files.
[11:48:26] <hayley> Say, if e is common in English (it is), then I might not want to look for an e. But xyzzy is uncommon statistically.
[11:48:39] <gilberth> hayley: You're working online, what do you want to profile?
[11:49:01] <hayley> The frequency of characters, so that I can make a more informed guess as to which characters would be rare to see.
[11:49:27] <gilberth> Ah, I see, you want to guess. Like Google does with search results recently.
[11:49:42] <gilberth> hayley: What about triplets?
[11:49:54] <hayley> Could also work, yes.
[11:50:53] <gilberth> IIRC you could tell the natural language of text by locking at triplets. And as we did some text indexing project at the uni, we worked with triplets IIRC.
[11:52:11] <gilberth> This was fun, the original task was to index the bible (gosh!) we wrote a program to index whole disk and it would look inside tar.gz files, too. Quite handy, I used that for a while.
[11:52:30] <gilberth> And it was fast.
[11:52:30] <selwyn> isn't the bible already indexed?
[11:52:51] <gilberth> selwyn: This was homework. In the first year or so.
[11:54:11] <gilberth> selwyn: What is the plural of this kind of index?
[11:54:27] <selwyn> good question
[11:54:37] <selwyn> i want to say indexes
[11:54:51] <selwyn> context-sensitive plural...
[11:55:39] <gilberth> I came across that because of the recent discussion and was curious. Because in German, it is "Index" like in English. And "Indexe" for text indexes and "Indizes" for subscript indices.
[11:56:04] <selwyn> actually i have a german question
[11:56:19] <gilberth> Go ahead.
[11:57:10] <selwyn> in my thesis, i capitalise 'ansatz' 
[11:57:21] <selwyn> i might stop doing that, but if i continue it seems that i should use the correct plural
[11:57:29] <selwyn> also, is it always capitalised?
[11:57:45] <gilberth> It's a noun, so it is.
[11:57:50] <selwyn> ok
[11:57:59] <gilberth> Plural is Ansätze.
[11:58:21] <selwyn> hm
[11:58:34] <selwyn> i think i have seen it incorrectly pluralised in english as 'ansatzen'
[11:59:03] <gilberth> That sounds like a verb but is nonsense.
[12:00:11] <selwyn> i like the idea of keeping it uncapitalised but with the (correct) german plural
[12:00:40] <gilberth> Then find your "ä".
[12:01:02] <selwyn> \{''a}?
[12:02:21] <gilberth> I really don't know, for TeXing German I use UTF-8 input.
[12:02:25] <selwyn> {\"a} apparently
[12:02:46] <selwyn> i tried to use utf-8 once and ran into problems
[12:03:25] <gilberth> Well, when I use German in TeXing it's only for boring letters, nothing fancy.
[12:04:19] <selwyn> re indexes vs. indices: the fact that there are so many different opinions on the matter leads me to suspect that there is no real distinction between the two
[12:04:33] <gilberth> \def\Ansaetze{Ans{\"a}tze} % :-)
[12:05:18] <selwyn> i would say use indices for mathematics, and indexes for books and the stock market
[12:05:31] <selwyn> but it is just my personal preference apparently
[12:06:04] <selwyn> it seems that in america they are trying to deprecate indices with limited success
[12:06:26] <gilberth> selwyn: Guess so. I don't believe normies even know "Indizes" in German either.
[12:07:45] <gilberth> While hacking CLIM I needed to get used to write "mediums" instead of "media".
[12:09:01] <selwyn> considering doing a small nlp project in cl
[12:09:21] <gilberth> What will it do?
[12:11:21] <selwyn> parse turkish words
[12:11:44] <gilberth> words? Are they so regular?
[12:11:50] <selwyn> it is easy in the sense that there is no grammatical grammar and almost no irregularities
[12:12:40] <gilberth> So no need to carry a dictionary, I figure.
[12:12:55] <hayley> https://github.com/stong/how-to-exploit-a-double-free 
[12:12:56] -ixelp- GitHub - stong/how-to-exploit-a-double-free: How to exploit a double free vulnerability in 2021. 'Use-After-Free for Dum [...]
[12:13:50] <selwyn> it is an agglutinative language, which means that things like 'to be able to be given a name' are a single word 
[12:14:06] <selwyn> so there is a lot of grammar involved simply in constructing words
[12:14:17] <gilberth> selwyn: What do you want to do with it? Craft a Turkish trainer?
[12:14:25] <selwyn> well
[12:14:50] <dave0> hayley: i saw that on hackernews ... ithe race condition is also interesting
[12:14:59] <selwyn> i had wanted to try to see if it is possible to construct words of arbitrary length, but this has already been tried
[12:15:03] <selwyn> answer: you can
[12:15:34] <selwyn> now i am interested in doing it to complement my own language learning, and to see where the inevitable difficulty in parsing natural language arises
[12:15:37] <selwyn> because i can't see it yet
[12:15:55] <gilberth> "to be able to be given a name" is "benennbar" :)
[12:16:16] <selwyn> i suspect that it is very difficult to distinguish various complex combinations of participles from each other
[12:16:34] <shka> i will call my metal band benennbar
[12:16:40] <shka> sounds brutal
[12:16:52] <gilberth> selwyn: Are there restrictions in actual use?
[12:16:53] <selwyn> yes german seems to be agglunative as well. but in a different way
[12:16:53] <dave0> steel guitar country and western music?
[12:17:07] <selwyn> you mean restrictions in irl use?
[12:17:10] <shka> dave0: https://youtu.be/APOGz3EBzKE
[12:17:10] -ixelp- Metallica, Megadeth, and The Who - "Eminence of Holy Wars and Creeping Death" - YouTube
[12:17:10] <selwyn> uh
[12:17:21] <shka> like this perhaps
[12:17:35] <gilberth> Hugh? "benennbar" has a soft sound to me. /me shrugs.
[12:17:55] <gilberth> selwyn: Yep.
[12:18:00] <selwyn> there is something of a literary sport in trying to construct words that are as long as possible for comedic value
[12:18:15] <gilberth> I could image that you could build all kind of "moster" words, nobody would really ever use.
[12:18:25] <selwyn> people can understand them quite easily, if only because they are quite well known
[12:18:41] <gilberth> ok
[12:19:11] <selwyn> the classic example is 'are you one of those who we were unable to assimilate into being czechoslovakian' which is a sentence comprised of a 70+ letter word and a two letter question particle
[12:19:26] <selwyn> used in a 50s satirical play
[12:19:57] <selwyn> the formal construction for words of arbitrary length is iiuc not really possible to understand after a few iterations and doesn't really mean anything
[12:20:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[12:20:37] <dave0> shka: weird song
[12:21:34] <gilberth> selwyn: Well, yes, I guess German could do that too to a certain extent.
[12:21:40] <dave0> shka: i never thought of the who as heavy metal
[12:21:44] <selwyn> but you guys glue words together right
[12:21:50] <selwyn> it's a different vibe
[12:22:39] <gilberth> Bist ein Tschechoslowakisierunsgunfähiger?
[12:22:47] <gilberth> * Bist Du
[12:22:53] <selwyn> wow
[12:24:28] <gilberth> A Tschechoslowakisierungsverweiger, would be a person refusing to assimilate being czechoslovakian.
[12:26:32] <gilberth> Anyhow, I wonder how badly my backtracking could explode in runtime. In practice.
[12:27:58] <selwyn> well, technically it should be about being unable to assimilated, not active refusal
[12:28:01] <selwyn> but good effort
[12:28:08] <gilberth> All I want is that if an input A is accepted input AA is too.
[12:28:15] <selwyn> *unable to be assimilated
[12:28:30] <gilberth> selwyn: The former word says that, the latter was another example.
[12:28:45] <selwyn> oh ok
[12:28:59] <gilberth> unfähig = unable, verweigern = refuse.
[12:32:11] <selwyn> i forgot how much i like languages, i could have studied them at university
[12:33:39] <selwyn> but the harsh reality is that you need to grind for months and months to even grasp the basics of a language
[12:33:41] <gilberth> I should have studied physics or philosophy. I would have picked up all the CS stuff anyway.
[12:34:27] <gilberth> And perhaps there would have been more girls with the latter. :)
[12:38:49] *** Joins: vats (~vats@103.158.91.165)
[12:40:48] <ck_> I will now make a coffee. Just wanted you to know that.
[12:42:57] <moon-child> ck_: good to know, thanks
[12:45:07] <ck_> raised thumb emoji. We live in the Information Age, I read that in the newspaper
[12:47:40] <selwyn> data transmitted via telegraph and wireless
[12:47:48] <selwyn> messages arriving within mere minutes of their transmission
[12:49:16] <moon-child> honestly it's kind of stupid I can rtt any place in the world under 200ms, yet most IM platforms have low single-digit second delivery times
[12:49:23] <moon-child> an order of magnitude's overhead
[12:49:32] <moon-child> (IRC included)
[12:49:43] <selwyn> irc is that slow?
[12:49:51] <ck_> yeah I was about to ask that too
[12:50:00] <gilberth> IRC is faster.
[12:50:08] <selwyn> i have never noticed, but at the same time, how would i notice
[12:51:03] <hayley> Helps that, with multiple servers, there are a few bounces in between. Though idk the latency between those.
[12:51:33] <ck_> maybe we should continue the conversation on morsecode.me
[12:51:49] <moon-child> ... --- ...
[12:52:00] <selwyn> ._.
[12:52:10] <gilberth> moon-child: It says '0' seconds ping from me to you over IRC. I don't know how to convince IrcII to give me a more precise measure.
[12:52:36] <ck_> "CTCP PING reply from ck_: 2.953 seconds"
[12:52:39] <ck_> o_O
[12:52:46] * hayley thinks
[12:52:46] <gilberth> lol
[12:52:57] <moon-child> CTCP reply from ck_: PING 0.760s
[12:53:17] <moon-child> now 1.368.  And 1.8 from myself
[12:53:22] <hayley> gilberth: Apparently any submatches make Rust RE require a NFA simulator. So I can also make funny looking benchmark results with any submatching?
[12:53:28] <ck_>  0.188s in return, moon-child 
[12:53:34] <ck_> "give me a ping, one ping only please"
[12:53:43] <hayley> 54.73ns here, 887ns Rust LMAO
[12:54:56] <gilberth> hayley: Yes, I showed you how to let the NFA explode in runtime.
[12:55:13] <hayley> It doesn't even need to explode, it just needs to have an NFA.
[12:55:21] <hayley> (a|aa)* is even more damning.
[12:55:58] <gilberth> Now you know why I hurt my brain to come up with my solution.
[12:55:59] <hayley> 16× more throughput with my compiler, compared to the 4× or so for the dyslexia simulator.
[12:56:24] <gilberth> odd
[12:56:35] * hayley re-reads
[12:57:24] <hayley> I still have to optimise the interface to reuse result vectors, so my old results aren't exactly useful...just running the DFA function with the right arguments isn't a fair benchmark.
[12:57:27] <contrapunctus> hayley: "dyslexia simulator"?
[12:58:12] <hayley> The regular expression (aba|ab|a)^N for some integer N. Trying to run it in my head made me think I couldn't read.
[12:58:43] <hayley> Moreso as the string in that test is "abbabbaaababab" (and it matches "aaaba" btw)
[12:59:38] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:02:24] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[13:02:41] <White_Flame> "dyselxia silmuatro"
[13:03:00] * hayley notes that she never used the proper strings for other benchmarks, and adds them in
[13:03:09] <hayley> It appears capturing performance is universally shit.
[13:03:26] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:03:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:04:48] <hayley> contrapunctus: see https://gist.github.com/no-defun-allowed/2c6e29db15539cbc2c2fd10b121244ff
[13:04:49] -ixelp- regex engines · GitHub
[13:08:22] <hayley> The results are what you get if you leave gilberth and hayley in #lispcafe with nothing else to do.
[13:09:58] <contrapunctus> hayley: oh lol
[13:12:26] <shka> *sigh*
[13:12:41] <shka> so if i plug three keyboards into my usb hub
[13:12:59] <gilberth> You can type thrice as fast?
[13:13:11] <shka> they are getting reset
[13:13:17] <shka> gilberth: two macropads
[13:13:21] <ck_> you have eight time the expressive power for every word
[13:13:41] <shka> so one actual keyboard, and lot's of dedicated buttons
[13:14:16] <shka> but sadly, usb simply can't handle all those devices at once
[13:14:20] <contrapunctus> shka: https://www.youtube.com/watch?v=KlJ8eTuFe9U
[13:14:21] -ixelp- ghost in the shell fingers - YouTube
[13:14:29] <shka> *usb hub
[13:14:35] <shka> and i wonder why
[13:14:40] <shka> is it because of the power drain?
[13:15:07] <shka> contrapunctus: i always had a problem with this scene
[13:15:17] <shka> i mean, why even use keyboard at this point
[13:15:28] <contrapunctus> Haha
[13:15:50] <shka> anyway
[13:16:05] <shka> this is active usb hub, it can work without the extra power
[13:16:52] <shka> so my guess is that my 3 devices simply don't drain enough of power to go into active mode
[13:17:13] <shka> but enough to not work 100% correctly 
[13:17:26] <gilberth> Hooray! I could parse "int __special __really_nonsense foo;" into a declaration of foo as _special, __really_nonsense int. Though "special" would be nice to have. ;)
[13:17:35] <hayley> Congratulations!
[13:17:46] <gilberth> shka: Is your hub just too dumb?
[13:18:07] <shka> i would call it "poorly tuned"
[13:18:10] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:18:20] <gilberth> heh
[13:18:29] <shka> that's my theory at least
[13:18:40] * hayley considers running bets for what will happen to her after her article was noticed by the person she critiqued.
[13:18:55] <ck_> shka: do both macro pads work without the keyboard?
[13:19:01] <shka> ck_: yeah
[13:19:12] <shka> and keyboard works with one of two macropads
[13:19:36] <gilberth> shka: What happens when you charge your phone over that hub, will it negotiate more power?
[13:19:51] <shka> i would assume so 
[13:19:58] <shka> but didn't check that
[13:20:17] <hayley> €1.50 nothing €10 I get called a 4chan psyop again €50 someone tries to cancel me €100 hayley splits the First International
[13:20:47] <hayley> .oO( Such "odds" are ratios between what you play and what you could win, so why do they put currency marks on them? )
[13:21:43] <selwyn> would place a bet but i am boycotting brussels currency
[13:22:14] <hayley> Not like I'm actually taking money, so it wouldn't hurt.
[13:24:21] <selwyn> hayley: nice try brussels
[13:24:49] <hayley> https://www.youtube.com/watch?v=LT3cERVRoQo They redid the music video.
[13:24:49] -ixelp- David Bowie - I'm Afraid of Americans - YouTube
[13:24:59] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:25:32] * hayley only has a 1080p display but finds the 4k stream less blurry; something about bitrate?
[13:25:35] <ck_> selwyn: sounds very much like you are enduring freedom
[13:26:08] <ck_> hayley: the probably aren't the same fps
[13:27:04] <White_Flame> probably bitrate.  Plus higher res + downsampling = less ringing & artifacts
[13:27:05] <hayley> The UI doesn't show off any framerate like it would for 50/60fps.
[13:28:17] <contrapunctus> gilberth: I finished up some test code to compare the current approach with the create-a-list-then-iterate approach you suggested.
[13:29:39] <contrapunctus> gilberth: would you like to see the results, or the test code too?
[13:34:23] <contrapunctus> basically the latter is so much faster it's not even funny 😄️ http://ix.io/3D9l
[13:39:57] <gilberth> contrapunctus: So it's even faster?
[13:41:03] <gilberth> What does that 4k refer to anyway? I never got used to that marketing numbers.
[13:42:38] <hayley> The width of the screen (±160 pixels). Though e.g. 2160p is more precise.
[13:42:50] <contrapunctus> gilberth: indeed. 5 seconds to 107 seconds (!!!) vs 0.55 to 0.67 seconds.
[13:43:25] <gilberth> So 4k would be a 4000 pixel wide display?
[13:44:19] <moon-child> not 4096?
[13:44:55] <moon-child> gilberth: 3840 wide
[13:45:15] <ck_> wpedia says "In television and consumer media, 3840 × 2160 (4K UHD) is the dominant 4K standard, whereas the movie projection industry uses 4096 × 2160 (DCI 4K)"
[13:45:41] <pjb> Juste pour faire chier le monde.
[13:46:33] <selwyn> how much of a marketing designation are the new process nodes
[13:46:42] <selwyn> i.e. should 3nm really be called 3nm
[14:10:53] <White_Flame> there's been talk about wanting a standard that lists 3 sizes for various CPU features
[14:11:03] <White_Flame> the actual transistor size depends on its context; not every transistor size is the same
[14:11:29] <White_Flame> I think they were more uniform in the past
[14:11:53] <White_Flame> at least at the smallest possible features sizes.  there's new methods of packing them together now
[14:12:46] <White_Flame> but to your actual question, it's mostly marketing now and there's no technical comparison possible between different fabs' nanometer specification
[14:39:51] <selwyn> k
[14:39:55] <selwyn> thanks
[15:03:23] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 264 seconds)
[15:31:21] <selwyn> cider seems to be coming along well
[15:31:27] <selwyn> though i have no idea when to bottle it
[15:31:33] *** Joins: vats (~vats@103.158.91.36)
[15:43:08] <selwyn> wonder how easy it is to make kefir. its too expensive here
[15:43:34] <contrapunctus> selwyn: thought you were talking about the Emacs CIDER for a second xD
[15:43:41] <selwyn> lol
[15:44:02] <selwyn> i played around with android app development with clojure
[15:44:09] <selwyn> but it was the most unstable stack i've ever dealt with
[15:44:43] <contrapunctus> ._.
[15:44:44] <selwyn> clojurescript->javascript->react native->android
[15:45:44] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/JwmhhVfRVDpbBCcNvsQsETgt/bruhcha.jpg >
[15:46:00] <contrapunctus> selwyn: ah...I was once looking to get into that...
[15:46:07] <selwyn> it was in my proto lisp days
[15:46:35] <selwyn> i was on the fence about whether to go down the clojure route or common lisp
[15:47:03] <selwyn> can't really remember what convinced me in the end actually
[15:47:27] <selwyn> i probably decided (thankfully) that i would prefer to learn the language that didn't carry around jvm baggage
[15:49:50] <selwyn> as we all know, the correct way to do android development is with ecl and qt5
[15:52:56] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:02:53] *** Quits: vats (~vats@103.158.91.36) (Read error: Connection reset by peer)
[16:03:05] *** Joins: vats (~vats@103.158.91.36)
[16:04:01] *** Quits: vats (~vats@103.158.91.36) (Read error: Connection reset by peer)
[16:04:13] *** Joins: vats (~vats@103.158.91.36)
[16:05:11] <contrapunctus> selwyn: where mocl
[16:05:21] <selwyn> is it still around?
[16:05:56] <contrapunctus> dunno...and also restricted software
[16:06:48] <selwyn> i would not mind that too much, but it does not seem to be maintained
[16:13:33] *** Quits: vats (~vats@103.158.91.36) (Ping timeout: 268 seconds)
[16:24:41] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1046-static.midco.net)
[16:28:03] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1041-static.midco.net) (Ping timeout: 260 seconds)
[16:47:43] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[16:48:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[16:51:23] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[16:56:19] <pjb> contrapunctus: the company wikix who distributed mocl doesn't seem to be still around; last time I looked, there remained a github with some examples.  AFAIK, it's dead. There's Lispworks providing a CL targetting Android and iOS.
[16:57:12] <pjb> contrapunctus: the source of mocl wasn't free.  It was accessible for money, I don't know the exact licensing terms of the mocl sources.  The only alternative is clocc, that would need quite some work to make it up to level to be used for Android or iOS.
[16:57:29] <contrapunctus> pjb: I see...I've been out of the Lisp-on-Android route, I guess.
[16:59:39] <pjb> Specifically on Android, there's also ecl that works nicely there.
[17:00:00] <pjb> https://gitlab.common-lisp.net/ecl/ecl-android
[17:06:45] <dave0> nite all
[17:06:56] *** Joins: vats (~vats@106.67.2.107)
[17:06:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b505:2e6c:b773:f4d7)
[17:07:02] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b505:2e6c:b773:f4d7) (Remote host closed the connection)
[17:07:33] *** Joins: cranium (~cranium@user/cranium)
[17:07:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:12:28] *** Quits: vats (~vats@106.67.2.107) (Remote host closed the connection)
[17:14:26] <selwyn> iphone is still untargetable right?
[17:21:16] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[17:28:54] <selwyn> anyway, here is the clojurescript stuff https://cljsrn.org/
[17:33:29] <selwyn> trying to imagine what the internet would be like if it was impossible to invent ipv6
[17:34:00] <selwyn> armed conflict over address blocks?
[17:39:16] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[17:46:45] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[18:08:34] <ck_> because I read the last line first, I thought you said "... impossible to invade ipv6"
[18:08:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:20:38] <shka> i changed usb bios settings, and it seems that now hub works fine
[18:22:26] <selwyn> how many monitors do you use
[18:22:32] <shka> two
[18:22:39] <selwyn> i would like to get one more to have three, but its difficult to fit on my desk
[18:22:44] <selwyn> i think 3 might be perfect
[18:22:54] <shka> buy yourself monitor stand
[18:23:16] <shka> https://www.amazon.com/Mount-Computer-Standing-Adjustable-Compatible/dp/B01HSJX1FG
[18:23:19] <selwyn> hm
[18:23:23] <shka> saves a lot of space on the desk
[18:23:23] <selwyn> i think i have one
[18:23:33] <selwyn> but my desk is cramped into a corner anyway
[18:23:51] <selwyn> would need to have one above the other 2, but could try that anyway
[18:24:13] <selwyn> one for emacs, one for viewing the pdf changes, and one with firefox
[18:24:27] <shka> well, that's an option
[18:25:01] <shka> though, if you can get one that is screwed into the desk, you can have monitor OUTSIDE your desk
[18:25:04] <shka> which helps
[18:25:25] <shka> i have just two monitors, but having a stand helps to save a lot of desk space
[18:25:35] <shka> so i  can have my speakers on the desk as well
[18:29:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:34:59] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[18:44:02] *** Joins: domovod (~domovod@176.196.122.197)
[18:46:26] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:57:04] <selwyn> i find it interesting that 'hamiltonian' and 'lagrangian' are always capitalised in english
[18:57:20] <selwyn> they don't seem obvious candidates to be proper nouns
[18:58:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:58:28] <Catie> Do they not come from the names "Hamilton" and "Lagrange"?
[18:58:35] <selwyn> they certainly do
[18:58:46] <selwyn> but they are not the names hamilton and lagrange
[18:58:57] <Catie> Oh, I get what you're saying
[18:59:01] <selwyn> they could name certain types of function
[18:59:16] <selwyn> i.e. the hamiltonian function of position and momentum, and the lagrangian function of position and velocity
[19:00:02] <selwyn> but there are hundreds of different hamiltonians and lagrangians! you usually come up with one at the start of your problem
[19:00:11] <Catie> I guess since it's a name derivative? I don't know, I don't make up the rules
[19:00:51] <selwyn> hm, name derivatives do seem to be often capitalised in english (not always)
[19:00:58] <selwyn> orwellian is, but spoonerism isn't
[19:01:40] <Catie> I had no idea spoonerism came from a name
[19:04:22] <selwyn> it is plausible that it is not capitalised because people assume that it doesn't come from a name
[19:06:35] <shka> ok, so is anybody using perf with sbcl?
[19:06:45] <selwyn> um
[19:07:00] *** Quits: taeaad_ (~taeaad@user/taeaad) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:07:12] <selwyn> no, but i used perf with clasp
[19:07:45] <shka> i heard that sbcl aims to drop the sprof in the future 
[19:07:54] <selwyn> its possible that shinmera uses perf with sbcl to profile his game
[19:08:07] <shka> meaning that we will gotta use other profilers 
[19:08:43] <shka> also, yeah, profiling C code at the same time is kinda helpful i guess
[19:09:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:09:22] <selwyn> remember once that we had to debug a surround sound bug on windows
[19:09:29] <selwyn> using gdb
[19:09:38] <selwyn> never again
[19:09:42] *** Joins: taeaad (~taeaad@user/taeaad)
[19:10:15] <selwyn> hardest bug i've ever dealt with, and i couldn't even figure it out by myself in the end
[19:11:15] <selwyn> problem there is that gdb picks up lots of interrupts that are signalled in the normal run of things by sbcl
[19:11:28] <selwyn> so separating signal from noise is not easy/fun
[19:12:33] <selwyn> clasp does those fancy flamegraphs for profiling
[19:13:02] <shka> you can get those from sbcl sprof
[19:13:03] <selwyn> which you can get by doing perf on anything
[19:13:05] <selwyn> oh
[19:14:36] <selwyn> why are they going to drop sprof?
[19:14:57] <shka> i don't know, and i don't want to guess
[19:22:29] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:23:14] *** Quits: OlCe (~user@lfbn-nic-1-394-237.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[19:24:05] <ck_> what was the bug?
[19:25:04] *** Joins: makomo (~makomo@user/makomo)
[19:26:48] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:27:45] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:28:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c)
[19:30:55] <selwyn> ck_: the game would segfault on windows with 5.1 surround sound enabled, and even then only sometimes
[19:31:01] <selwyn> so you could not reproduce all of the time
[19:31:55] <selwyn> and you could not attach gdb too early, because sbcl uses segfaults all over the place
[19:32:08] <selwyn> and we suspected that the stack was corrupted, so we couldn't trust stack traces
[19:32:34] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:32:42] <Catie> What was causing all of that?
[19:32:46] <selwyn> um
[19:32:51] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[19:34:07] <Alfr> Good morning.
[19:38:48] <ck_> "the ever-present forces of darkness" have prevented the program from running correctly at that time
[19:39:18] <ck_> (or 'national security', the other universal reason for anything)
[19:42:34] <selwyn> um
[19:43:25] <selwyn> something was changing the channel count after allocation, causing buffer overruns
[19:43:43] <selwyn> leading to segfaults on windows. it was luck that it wasn't triggered on linux
[19:44:36] <Catie> Nuts, okay
[19:44:44] *** Joins: raeda (~raeda@72.49.219.33)
[19:45:44] <Catie> Was that not an okay question to ask? Or was it just difficult to summarize or something?
[19:46:37] *** Quits: raeda_ (~raeda@72.49.219.33) (Ping timeout: 258 seconds)
[19:46:45] <selwyn> it was very difficult to remember tbh, i had to check relevant chat logs
[19:47:03] <Catie> Gotcha, okay. Well thank you! It's very much appreciated
[19:47:04] <selwyn> https://github.com/Shirakumo/libmixed/commit/bfb16f37e5c542cb2d82302778c3b9c04b1bf024 if you are interested
[19:47:05] -ixelp- Use a fixed number of available buffers instead to avoid issues with … · Shirakumo/libmixed@bfb16f3 · GitHub
[19:47:15] <selwyn> any time
[19:47:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c) (Quit: Leaving)
[19:48:24] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[19:50:10] *** Joins: raeda (~raeda@72.49.219.33)
[19:54:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:54:17] *** Joins: OlCe (~user@lfbn-nic-1-394-237.w90-116.abo.wanadoo.fr)
[19:59:22] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:01:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c)
[20:02:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c) (Remote host closed the connection)
[20:03:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c)
[20:22:42] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:25:32] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[20:28:28] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[20:33:03] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:38:35] *** Joins: vats (~vats@103.158.91.36)
[20:44:37] <|3b|> shka: do you have any source for plans to remove sb-sprof? i haven't noticed anything like that in #sbcl or mailing lists (no response yet to request for official plans on #sbcl)
[20:44:55] <shka> just rumors
[20:45:09] <shka> i would rather not share the informant
[20:45:19] <|3b|> there is work to make sbcl work better with perf and such, but as far as i know that is in addition to sprof, not replacing it
[20:46:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:46:07] <|3b|> ok, maybe ask them if they have any specific source (assuming they are not an sbcl dev)
[20:47:35] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:49:17] <shka> well, i heard about this way back in the previous year
[20:56:18] * |3b| wouldn't worry about looking for alternatives to sb-sprof any time soon, unless you have some specific need for perf
[21:14:09] <shka> |3b|: which would be convenient because i enjoy using sprof 
[21:14:21] <shka> it is very convenient
[21:15:20] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c) (Ping timeout: 260 seconds)
[21:15:43] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4445:606a:d860:1735)
[21:16:51] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:20:47] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 264 seconds)
[21:23:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:23:51] *** Joins: cranium (~cranium@user/cranium)
[21:30:25] <shka> https://libstore.ugent.be/fulltxt/RUG01/001/414/985/RUG01-001414985_2010_0001_AC.pdf
[21:45:03] <|3b|> from #sbcl: "<stassats> |3b|: why would we drop sb-sprof?"
[21:45:12] <|3b|> so sounds like no plans to drop it currently
[21:45:46] <shka> that's a relief
[22:16:18] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[22:22:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4445:606a:d860:1735) (Ping timeout: 260 seconds)
[22:25:31] *** Quits: raeda (~raeda@72.49.219.33) (Ping timeout: 260 seconds)
[22:30:46] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 252 seconds)
[22:32:00] *** Joins: raeda (~raeda@72.49.219.33)
[22:37:21] <contrapunctus> gilberth: since you asked, and I was curious about how they are different from `catch` and `throw`...Elisp has `cl-tagbody` and `cl-block`. o.O
[22:42:59] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[22:43:37] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[22:46:26] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:46:47] *** Quits: X-Scale (~ARM@31.22.203.65) (Ping timeout: 258 seconds)
[22:47:54] *** X-Scale` is now known as X-Scale
[23:34:32] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[23:45:26] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 258 seconds)
[23:50:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[23:52:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:55:14] *** Joins: X-Scale` (~ARM@46.50.5.8)
[23:55:26] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[23:56:38] *** X-Scale` is now known as X-Scale
[23:57:35] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
