[00:02:24] *** Joins: darkxploit (~jay@c-71-234-202-146.hsd1.ct.comcast.net)
[00:12:35] *** Joins: husam212 (~husam212@gw246-155.jcsfiberlink.net)
[00:14:15] <husam212> Hi, I'm wondering how can I make class be called like a method? For example String(1) will convert the integer 1 to a string "1"
[00:21:18] *** justache is now known as justBOOMER
[00:25:27] <adam12> husam212: Define it on Kernel is one way.
[00:25:54] <adam12> husam212: Alternatively, if you're OK with square brackets, you can define self.[] on the class.
[00:26:32] <adam12> module Kernel; def YourMethod(args);
[00:26:42] <adam12> I prefer the square bracket notation as it's a bit cleaner. 
[00:28:04] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[00:28:35] <husam212> adam12 thanks, yeah square bracketÂ  looks clean
[00:31:12] *** Quits: husam212 (~husam212@gw246-155.jcsfiberlink.net) (Quit: Client closed)
[00:34:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:54:38] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:55:53] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:55:54] *** Joins: apple-corps (~discord@207.32.171.116)
[00:59:41] <apple-corps> Hello, I'm using rspec tests around logstash and the logstash/dev-utils ruby gem. I'm trying to get a debugger attached or perhaps first log to standard out so I can try to understand the logstash / dev-utils and ruby testing framework. I have yet been able to get logging messages via a logging library or puts when executing the rspec tests.
[00:59:42] <apple-corps> Similarly I have not yet been able to make a debugger work. I am wondering if anyone would try to help work with me towards this solution before I give in.
[01:00:09] <apple-corps> So I guess a good place to start would be to look for assistance for the logging. I would expect that to be the easiest thing to do,
[01:02:50] *** Quits: apple-corps (~discord@207.32.171.116) (Quit: Client closed)
[01:03:52] *** Joins: apple-corps (~apple-cor@207.32.171.116)
[01:08:45] <apple-corps> I'm currently executing rspec using the docker container as described on this post: https://discuss.elastic.co/t/testing-aggregates-logstash-aggregate-plugin-more-than-one-filter-which-defines-timeout-options-but-only-defining-once/289644
[01:10:12] <apple-corps> So my first goal is to write some logging to STD out interlaced with the rspec output so I can get a handle on the testing setup. I will try this again but I'm intimidated by the ruby world
[01:13:33] <apple-corps> So do any folks know a good way to write logs from an rspec test / ruby test?
[01:19:48] <weaksauce> have you tried "require 'pry'; binding.pry"
[01:22:09] <apple-corps> Not yet. I was going to try that when I got to the debugging. I was trying to make logging work. But I can try that now. I think one problem I have is managing gems. It's very difficult for me working with the logstash / jruby setup. I started using docker containers because I was having trouble setting up locally on the mac. Let me go this route
[01:22:09] <apple-corps> now.
[01:22:39] <weaksauce> do you not use bundler? 
[01:26:49] <apple-corps> No, currently I've been using https://github.com/iteratec/logstash-rspec/blob/master/Dockerfile to execute the test and here's the description where I got started with this: https://gquintana.github.io/2016/09/07/Testing-Logstash-configuration.html
[01:30:39] <apple-corps> I've also explored using https://github.com/cameronkerrnz/logstash-plugin-dev but I haven't been successful in triggering the rspec tests from that container. But I think it's Dockerfile more clearly defines the build platform including bundler calls.
[01:31:34] <apple-corps> In short it seems like the first container is just providing an execution engine to run rspec tests while the later is providing a ruby stack to build plugins. I don't need to build plugins but I am trying to test logstash configurations.
[01:32:19] <apple-corps> https://github.com/cameronkerrnz/logstash-plugin-dev/blob/master/Dockerfile
[01:32:46] <weaksauce> yeah i don't know anything about logstash 
[01:33:32] *** Quits: fredlinhares (~fredlinha@186.206.254.59) (Quit: WeeChat 3.3)
[01:33:58] <apple-corps> Looking at those two docker containers, do you think I should continue with the one that currently executes the tests or work with the one that has the clear-er use of bundler, etc and try to make it's rspec work?
[01:35:32] <apple-corps> Maybe I will drop some output from working on the later
[01:38:26] <weaksauce> does the first one work at all?
[01:38:48] <weaksauce> i'd think that the bundled rspec should work ootb
[01:39:00] <weaksauce> the plugin one seems pretty heavy handed
[01:40:12] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[01:40:21] *** Joins: hololeap_ (~hololeap@user/hololeap)
[01:42:13] <apple-corps> the first one works to execute the tests
[01:42:33] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[01:43:01] <apple-corps> I'm not sure how to use bundler or gem in that one to install required dependencies if for example pry is missing.
[01:44:00] <weaksauce> i'd just add a new run command "RUN gem install pry" 
[01:44:06] <weaksauce> or if you don't want a layer append it 
[01:44:44] <weaksauce> that said i have no clue how bare bones the ruby is in that dockerfile 
[01:46:55] <apple-corps> hmm i seem to have had luck with the more involved container. I ran `rake test:install-default` and I seem to be installing required dependencies and I think I made rspec work in that environment where I did not before. I think this might be better because it seems to have bundler setup.
[01:48:20] <weaksauce> seems pretty well thought out so 
[01:48:24] <apple-corps> But I'm still not terribly familiar here. I think some ruby knowledge of tooling might help
[01:48:25] <weaksauce> not a bad path
[01:48:55] <apple-corps> So if I want to install another gem, what route do I go
[01:49:04] <weaksauce> bundler is the main way people generally interact with gems for a project
[01:49:18] <weaksauce> docker kinda changes that a touch but you can do it 
[01:49:40] <weaksauce> you have a gemfile and a gemfile.lock that lists all the gems you use and bundle install installs them
[01:49:54] <weaksauce> bundle exec will run whatever command in the context of those gems
[01:50:13] <weaksauce> bundle add pry would append pry to the gemfile and install it
[01:50:44] <apple-corps> ok let me try this. And what was that rake test:install-default. That seemed to get a bunch of needed things ...
[01:51:00] <weaksauce> rake is rubymake
[01:51:09] <apple-corps> Ah rake is like make. doh. hmm
[01:51:09] <weaksauce> so it is used to run things and install things
[01:51:45] <apple-corps> So where do I find the makefile def of that test:install-default ?
[01:51:56] <weaksauce> it's gonna be in a Rakefile
[01:52:04] <weaksauce> or a rake subdirectory
[01:53:46] <apple-corps> I see the Rakefile and it looks like it reads a bunch of lib dirs. But now I have some ideas what is going on. I will try bundle add something. Thanks!
[01:54:07] <weaksauce> good luck!
[01:56:25] <apple-corps> It's sort of odd. I see https://github.com/cameronkerrnz/logstash-plugin-dev/blob/master/Dockerfile#L135
[01:56:53] <apple-corps> But I get a Gem::GemNotFoundException
[01:57:03] <apple-corps> for bundler
[01:57:51] <weaksauce> is bundler bundled with jruby?
[01:57:56] <weaksauce> i don't really use jruby
[01:58:50] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:59:27] <apple-corps> yeah all this logstash uses jruby. I think there might be a java core and jruby. I ran bundler and it installed a bunch of stuff.
[02:00:24] <apple-corps> so if you're a java dev or a ruby dev you don't know what the hell is going on unless you know both && jruby :D
[02:01:11] <weaksauce> hah pretty much
[02:03:02] <apple-corps> seems like the bundler is confused. I ran bundle add and it fetched a bunch of deps. Then I ran the rspec test and got an error Bundler:FemNotFound: Could not find little-plugger-1.1.4 in any of the sources.
[02:06:22] <apple-corps> maybe I installed a bad requirement for the jruby world?
[02:06:35] <apple-corps> I was trying to install the logging library
[02:13:04] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 260 seconds)
[02:13:44] *** Quits: ivz_hh (~ivzhh@S0106f85e42a00a1f.cg.shawcable.net) (Quit: WeeChat 2.8)
[02:14:05] *** Joins: ivzhh (~ivzhh@S0106f85e42a00a1f.cg.shawcable.net)
[02:21:15] <weaksauce> no clue
[02:21:35] <weaksauce> never had a need for jruby
[02:32:48] <apple-corps> I think perhaps they are using their own interface to bundler to manage dependencies and then if trying to use bundler on my own things get screwed: https://github.com/elastic/logstash/blob/main/lib/pluginmanager/install.rb https://github.com/elastic/logstash/blob/main/rakelib/test.rake#L64
[02:45:38] <weaksauce> https://github.com/jruby/jruby/issues/1146
[02:45:59] <weaksauce> bundler should be installed per the last comment
[02:46:11] <weaksauce> are you bundle exec foo.rb 
[02:46:21] <weaksauce> well rspec instead of foo.rb
[02:47:16] <apple-corps> no I've been running the tests with rspec not bundle
[02:47:20] <weaksauce> https://github.com/jruby/jruby/issues/5686
[02:47:34] <weaksauce> actually the log thing is referenced in that issue
[02:47:48] <weaksauce> This is creating an issue for us in Logstash as we install our own version of Bundler
[02:49:57] <apple-corps> Ok, so I assume I want to invoke the logstash bundler if I want to add a gme
[02:50:36] <weaksauce> yeah
[02:50:50] <weaksauce> they usually have binstubs for things so that might be something to look into
[02:51:43] <apple-corps> I was trying to dig through the rake tasks to see where they provide the gem list for the development dependencies but maybe just looking for their bundler would be simpler
[02:52:09] <weaksauce> https://github.com/elastic/logstash/tree/main/bin
[02:52:13] <weaksauce> bin/bundle
[03:07:06] *** Joins: nat_of_cy (~nat_of_cy@user/nat-of-cy/x-1732112)
[03:17:56] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 260 seconds)
[03:20:02] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6) (Ping timeout: 240 seconds)
[03:21:02] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:22:33] <apple-corps> weaksauce got distracted there. That makes sense. I'll try that bundler and see what happens
[03:35:13] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[03:36:54] <apple-corps> That looks like it worked. I'm in ok shape. I'm not sure why it seems like many of the plugins are missing but I'm trying to add those now
[03:37:08] <weaksauce> solid
[03:39:41] *** Joins: hololeap (~hololeap@user/hololeap)
[03:39:48] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:41:18] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:51:00] *** Quits: nat_of_cy (~nat_of_cy@user/nat-of-cy/x-1732112) (Remote host closed the connection)
[03:52:48] *** Quits: ivzhh (~ivzhh@S0106f85e42a00a1f.cg.shawcable.net) (Quit: WeeChat 2.8)
[03:53:26] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[04:12:41] <apple-corps> So we have a sort of functional development environment! woo hoo! I'm now going to try to get a handle on understanding the testing framework. For example I posted the test https://discuss.elastic.co/t/testing-aggregates-logstash-aggregate-plugin-more-than-one-filter-which-defines-timeout-options-but-only-defining-once/289644 and I think I have a
[04:12:42] <apple-corps> lack of understanding the logstash dev-utils. So I might get some help trying pry or another debugger
[04:13:23] <apple-corps> https://github.com/elastic/logstash-devutils/issues/78
[04:19:06] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[04:43:51] *** Joins: ivzhh (~ivzhh@S0106f85e42a00a1f.cg.shawcable.net)
[04:51:11] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[04:59:32] *** Quits: jhawthorn_ (~jhawthorn@user/jhawthorn) (Quit: ZNC 1.8.2 - https://znc.in)
[05:10:21] *** Joins: jhawthorn (~jhawthorn@user/jhawthorn)
[05:54:08] <nakilon> ox1eef what I've seen materialize is amount of time spent on fixing it in legacy code at my job; all this spagetti of requiring files with no relation to runtime process access workflows produces tons of complex errors
[06:09:30] *** Quits: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[07:40:17] <nakilon> weird that when I have a local gem version specified in Gemfile as path: "...", then when I do "bundle exec ruby -rthat_gem" it goes insane and requires it not from the specified path but from some default installed locaton and then versions mismatch and it crash
[07:41:18] <nakilon> but when I replace '-rsome_gem -e "..."' with -e 'require "some_gem"; ...' it does not go mad and works fine
[07:43:12] <nakilon> by "crash" I mean it somehow requires the gem twice from different locations, throws warning and then fails to redefine the VERSION; maybe it's all just because the gem I use has such weird stuff as lin/some-gem.rb: require "some_gem" though, idk
[08:27:37] <apple-corps> I'm trying to understand this ruby method https://github.com/elastic/logstash-devutils/blob/master/lib/logstash/devutils/rspec/logstash_helpers.rb#L67 in the context of the invocationÂ  Â sample("message" => message, "type" => "nginx") found https://gquintana.github.io/2016/09/07/Testing-Logstash-configuration.html
[08:28:10] <apple-corps> Looking at the method signature:Â  Â def sample(sample_event, validation_source: :output, &block)
[08:29:27] <apple-corps> I would assume that the invocation: sample("message" => message, "type" => "nginx") do... calls the sample method with the sample eventÂ  set to "message"=>message
[08:30:10] *** justBOOMER is now known as justache
[08:30:39] <apple-corps> and I assume the do .. from the invocation https://gquintana.github.io/2016/09/07/Testing-Logstash-configuration.html is the &block from the signature
[08:32:02] <apple-corps> But what I don't understand, how is the hash type passed and how do i see that reflected in the method signature
[08:32:40] <apple-corps> I'm also not familiar with thatÂ  validation_source: :output syntax. Can one of the great ruby wizards elucidate me?
[08:34:25] <sam113101> it's the same as :validation_source => :output
[08:35:56] <apple-corps> sam113101 afraid I don't follow. Is that how you define hash parameters for a method in ruby?
[08:36:47] <sam113101> no, it's just sugar for hashes with symbols as keys
[08:37:06] <sam113101> you can use that syntax anywhere
[08:37:25] <sam113101> anywhere you would want a hash with symbols as keys
[08:37:36] <apple-corps> Â  def sample(sample_event, validation_source: :output, &block)
[08:38:11] <apple-corps> Yeah so the signature above I see 3 parameters. sample_event, validation_source: :output, &block
[08:40:37] <apple-corps> so the second parameter ``` validation_source: :output parameter ``` does that syntax mean that parameter accepts a hash or key => value pair?
[08:41:09] <sam113101> actually wait
[08:42:45] <apple-corps> guess I could try to use a ruby shell and see...
[08:43:31] <sam113101> man my ruby is rusty
[08:46:34] <sam113101> turns out that they are indeed keyword arguments
[08:47:55] <apple-corps> It's a little strange then when you look at the invocation, but maybe the signature changed or the author has a sense of humor
[08:47:59] <apple-corps> sample("message" => message, "type" => "nginx") do...
[08:48:09] <sam113101> in my days you didn't have those, you used hashes instead, but you could still write the hashes without their {}'s if they were the last argument to the function
[08:48:33] <apple-corps> https://gquintana.github.io/2016/09/07/Testing-Logstash-configuration.html
[08:49:05] <apple-corps> because it looks like sample event is "message"=>message
[08:49:31] <apple-corps> validation source is "type"=> "nginx"
[08:49:49] <apple-corps> and then I think the block is everything in the do ....
[08:49:59] <apple-corps> But still not sure if I'm reading it right
[08:50:43] <apple-corps> Do you think I am correct about these/
[08:50:45] <apple-corps> ?
[08:51:25] <sam113101> no
[08:52:06] <sam113101> sample("message" => message, "type" => "nginx") is the same as sample({"message" => message, "type" => "nginx"})
[08:52:47] <sam113101> so inside the function sample_event will be {"message" => message, "type" => "nginx"}
[08:53:34] <sam113101> :validation_source will be :output because it's the default and you're not changing it
[08:54:29] <apple-corps> so is :output the syntax you use to set a default value ?
[08:55:06] <apple-corps> Trying to understand that second parameter now that we understand the first one
[08:55:35] <apple-corps> IE what is validation_source: :output
[08:55:37] <sam113101> 'validation_source:' is a keyword argument, ':output' is its default value, which happens to be a symbol (starts with a :)
[08:56:00] <sam113101> you could have a string, integer, array, anything
[08:56:58] <sam113101> def test(a: "hello"); puts a; end
[08:58:24] <apple-corps> so is that how keyword arguments work, you can provide a default value like that. So they could have put validation_source: "candy" and it's default value would be the string candy?
[08:59:09] <sam113101> sorry if I'm slow, I started using ruby in 2011 IÂ think and I've only used it infrequently, I'm out of the loop on everything, keyword arguments are still new to me but it seems like they've been here for a gigantic while, I don't know what happened lol
[08:59:29] <apple-corps> I think what I just said to some degree you are showing
[08:59:49] <apple-corps> in your function. So I digress.
[09:00:27] <apple-corps> So think I understand the function now. I assume I was right that the block refers to the block of code between do..end
[09:00:44] <apple-corps> &block that is
[09:00:58] <sam113101> yeah, you provide a default value that way, and when you don't then you don't have to provide a value at all, they're not required when calling the function, but you can make them required by setting no default value
[09:02:04] <sam113101> def test(a: 0); puts a; end
[09:02:16] <sam113101> you can call test without any argument, test() for example
[09:02:25] <sam113101> and a will be 0
[09:02:31] <sam113101> but if you do
[09:02:37] <sam113101> def test(a:); puts a; end
[09:02:53] <sam113101> if you call it without argument, i.e. test(), it will complain
[09:04:01] <sam113101> in my days we would use options hashes to accomplish more or less the same thing, and we had to check those things manually
[09:04:10] <sam113101> and yes &block will be the block
[09:04:42] <apple-corps> I'm trying to call that sample to test a logstash config
[09:04:59] <apple-corps> I keep passing the test in every execution, totally bogus
[09:05:23] <apple-corps> Except if I connect a debugger, then the test always fails which makes it difficult to debug
[09:12:45] <apple-corps> Seems like if I invoke the logger on subject.get("key") then I get a ConfigurationError. But it's just happy passing tests with the insist ... in the block whether insist / reject is true false :(
[09:13:05] *** Joins: jpw (~jpw@user/jpw)
[09:42:11] <apple-corps> Â  Then it looks like the insist / reject blocks just don't execute. When I put an expect or any code that does something I get a strange logstash configuration error.
[10:11:12] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[10:25:55] *** Joins: lunarkitty (uid501895@user/pyra)
[10:55:40] *** Joins: nat_of_cy (~nat_of_cy@user/nat-of-cy/x-1732112)
[11:31:56] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[11:37:50] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[11:52:51] *** Quits: fercell (~ferr@185.65.50.249) (Ping timeout: 245 seconds)
[11:53:09] *** Joins: fercell (~ferr@185.65.50.252)
[11:54:11] *** Joins: tkonto (~tkonto@130.43.61.180.dsl.dyn.forthnet.gr)
[12:01:02] *** Joins: vit (~vit@chello085216193138.chello.sk)
[12:02:01] *** Quits: vit (~vit@chello085216193138.chello.sk) (Client Quit)
[12:04:40] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:20:38] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[12:26:56] *** Quits: pandabot (~pandabot@user/leftylink/bot/pandabot) (Quit: learn aoc code)
[12:31:53] *** Quits: tkonto (~tkonto@130.43.61.180.dsl.dyn.forthnet.gr) (Ping timeout: 265 seconds)
[12:34:27] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[12:40:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[13:13:33] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:16:19] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[13:18:17] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[13:19:01] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:27:40] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[13:27:49] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:29:41] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:51:26] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[13:56:02] *** Quits: reset (~reset@user/reset) (Quit: reset)
[13:58:39] *** Quits: ua_ (~ua@public-gprs222345.centertel.pl) (Ping timeout: 260 seconds)
[14:03:42] *** Joins: hololeap_ (~hololeap@user/hololeap)
[14:03:48] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[14:04:38] *** Joins: fef (~thedawn@user/thedawn)
[14:06:39] *** Quits: hololeap_ (~hololeap@user/hololeap) (Remote host closed the connection)
[14:07:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[14:09:14] *** Joins: ua_ (~ua@public-gprs219161.centertel.pl)
[14:12:09] *** Joins: pandabot (~pandabot@user/leftylink/bot/pandabot)
[14:13:43] *** Quits: pandabot (~pandabot@user/leftylink/bot/pandabot) (Client Quit)
[14:14:02] *** Joins: pandabot (~pandabot@user/leftylink/bot/pandabot)
[14:22:11] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[14:29:42] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:30:06] *** Joins: fef (~thedawn@user/thedawn)
[14:30:48] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[15:26:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[16:18:04] *** Joins: _ht_ (~quassel@94.198.43.109)
[16:18:05] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 265 seconds)
[16:21:37] *** Joins: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net)
[16:25:29] *** Joins: Rounin (~david@84.212.130.215)
[16:59:49] *** Quits: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[17:00:32] *** Joins: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net)
[17:14:11] *** Joins: gfawcett- (~gfawcett@ipagstaticip-3fe91151-e7f3-7fa2-4304-d7860f6aec48.sdsl.bell.ca)
[17:20:12] *** Quits: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[17:23:49] *** Quits: gfawcett- (~gfawcett@ipagstaticip-3fe91151-e7f3-7fa2-4304-d7860f6aec48.sdsl.bell.ca) (Ping timeout: 265 seconds)
[18:22:37] *** Joins: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18)
[18:29:16] *** hololeap_ is now known as hololeap
[18:47:32] *** Quits: _ht_ (~quassel@94.198.43.109) (Ping timeout: 240 seconds)
[18:48:18] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:10:37] *** Joins: bandithijo (~bandithij@fedora/bandithijo)
[20:03:24] *** Joins: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net)
[20:33:26] *** Joins: dohtem (uid524096@user/dohtem)
[20:34:46] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:39:00] *** Quits: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[20:40:43] *** Quits: bandithijo (~bandithij@fedora/bandithijo) (Ping timeout: 256 seconds)
[20:49:29] *** Joins: jpw (~jpw@user/jpw)
[20:50:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Ping timeout: 268 seconds)
[20:53:26] *** Joins: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net)
[20:54:04] *** Quits: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18) (Ping timeout: 265 seconds)
[21:11:58] *** Quits: grenierm (~grenierm@pool-68-134-29-121.bltmmd.fios.verizon.net) (Quit: grenierm)
[21:12:20] *** Joins: grenierm (~grenierm@pool-68-134-29-121.bltmmd.fios.verizon.net)
[21:12:46] *** Quits: grenierm (~grenierm@pool-68-134-29-121.bltmmd.fios.verizon.net) (Client Quit)
[21:15:44] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[21:17:02] *** Quits: yxhuvud (~quassel@2001:1ba8:1424:ea00::743) (Read error: Connection reset by peer)
[21:19:45] *** Joins: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18)
[21:20:34] *** Quits: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[21:21:24] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00::743)
[21:31:17] *** Quits: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18) (Ping timeout: 265 seconds)
[21:40:01] *** Joins: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18)
[21:57:15] *** Joins: m_antis (~m_antis@ool-44c09a21.dyn.optonline.net)
[22:06:11] *** Quits: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18) (Ping timeout: 245 seconds)
[22:16:50] *** Quits: Al2O3 (~Al2O3@user/al2o3) (Ping timeout: 260 seconds)
[22:23:10] *** Joins: Inline (~Inline@aftr-37-201-240-2.unity-media.net)
[22:27:03] *** Joins: Al2O3 (~Al2O3@user/al2o3)
[22:29:39] *** Joins: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18)
[22:57:44] <libsys> hello people
[22:58:10] <libsys> I'm testing with minitest... how could I scope a setup function while using assert style?
[22:58:37] <libsys> like when using the spec syntax one does with describe
[22:59:30] <libsys> or I should simply create a funciton, call it on each test which uses it and be done with that
[23:03:28] *** glider_ is now known as glider
[23:04:05] *** Quits: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18) (Ping timeout: 265 seconds)
[23:05:21] *** Joins: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18)
[23:17:22] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[23:25:55] *** Joins: tkonto (~tkonto@130.43.61.180.dsl.dyn.forthnet.gr)
[23:35:12] *** Joins: roadie` (~user@ip5f5be062.dynamic.kabel-deutschland.de)
[23:35:50] *** Quits: tkonto (~tkonto@130.43.61.180.dsl.dyn.forthnet.gr) (Quit: tkonto)
[23:36:34] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:38:24] *** Quits: roadie (~user@2a02:8108:ec0:1427:b4f0:2173:6d8e:ab18) (Ping timeout: 265 seconds)
[23:39:51] *** Quits: roadie` (~user@ip5f5be062.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[23:40:56] *** Quits: darkxploit (~jay@c-71-234-202-146.hsd1.ct.comcast.net) (Remote host closed the connection)
[23:43:08] *** Joins: roadie` (~user@2a02:8108:ec0:1427:d48e:1fc2:ff82:7830)
[23:49:35] <libsys> also, how could I mock `Rack::Response.new(content).finish`? I call this function inside a method and I'd like to not depend on the actual implementation of that
[23:50:08] <libsys> I could simply monkey patch the function, but that affects my other non-related tests
[23:50:20] <ox1eef> libsys: my recommendation would be to use rspec.
[23:51:45] <libsys> bruh, I'd like to stick to my current test suite xd
[23:51:50] <libsys> I've already done some tests
[23:51:54] <ox1eef> :)
[23:52:19] <ox1eef> fair enough, but it is so easy to solve that mocking issue you had with rspec. with minitest - i'm not sure, been a long, long time since i tried it.
[23:57:21] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
