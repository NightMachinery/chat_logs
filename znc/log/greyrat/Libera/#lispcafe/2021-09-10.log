[00:00:25] <selwyn> issue i have with the simulation hypothesis is that it is not that easy to simulate even simple parts of the universe
[00:00:40] <shka> it is like https://www.youtube.com/watch?v=lodeYlle6lY
[00:00:40] -ixelp- The Soft Moon - Zero [HD] [Full Album] - YouTube
[00:00:54] <selwyn> and the subleties seem to multiply the more you get into e.g. numerical general relativity or lattice qcd
[00:01:40] <selwyn> not clear to me yet that anyone could simulate the universe
[00:02:04] <humasect> selwyn: but the hardware is also the software. thats the tricky part. "simulation" is not a great word for it 
[00:02:19] <edgar-rft> let's try to find the initial random-state of the universe
[00:02:22] <humasect> or perhaps i am looking at a different perspective
[00:02:33] <shka> edgar-rft: 41
[00:02:37] <shka> *42
[00:02:41] <selwyn> lol
[00:03:45] <selwyn> if the computer becomes a hypothetical very powerful quantum computer, then my perspective changes a little bit but not much, and there are more issues that come up
[00:04:23] <humasect> 'becomes' ?
[00:04:38] <humasect> hmm let's look at it this way:
[00:04:47] <edgar-rft> a hypotetical quantum computer is when it's uncertain whether the computer exists
[00:04:52] <humasect> there was a time that there was no divide between Software and Hardware. we call this the time of Peace
[00:05:07] <humasect> where a machine was a machine. there was no hidden codes or instructions, it does as it was built to do. 
[00:05:23] <humasect> press button, it presses. turn valve, it turns
[00:05:33] <humasect> today we call this uh.... tangible interfaces ? 
[00:05:57] <humasect> where we try to reproduce feedback in virtual instruments. like the macbook touchpad or iphone home button (they only click when they are powered. haptic )
[00:06:50] <selwyn> ok
[00:07:01] <edgar-rft> today we build machines where the warranty is over as soon as you have finally understood how it works
[00:07:05] <humasect> to be technical there is no seperation between Hardware and Software, because the hardware is modified according to the software
[00:07:37] *** Joins: seere (~seere@user/seere)
[00:07:48] <humasect> but when we think in terms of "simulation" we imagine there are some files of source code that needs compiling that is seperate from the actual binary code that is executed. if that makes sense. kind of like how in Lisp, Code *is* Data
[00:08:20] <humasect> edgar-rft: hm =) we are into a new time of allowing consumers access their devices. things changing
[00:08:39] <humasect> edgar-rft: called the right to repair or idk (started in europe ? been away.)
[00:12:38] <edgar-rft> I worked for Panasonic in the 1980s. In the early 2000s I wanted to repair my own Panasonic camcorder. I knew exactly what was broken. In the Panasonic Service Manual there were exactly three spare-parts available: 1) the complete optics 2) the complete electronics 3) the complete cabinet, each one more expensive that the entire comcorder.
[00:16:00] <pjb> :-)
[00:16:04] <lotuseater> cool
[00:16:34] <pjb> You forgot to include the workmanship to repair it (and possibly the cost of transport to the repair shop).
[00:19:02] <edgar-rft> That's true and an important part of the misery. The money I must calculate for one working hour plus taxes, insurance, and whatever, is the same money where in china are build five to ten new camcorders for.
[00:21:26] <pjb> the promize of globalisation is that by now you should be as poor as Chinese, and able to work for as cheap as them.
[00:21:32] <pjb> Obviously, this failed entirely.
[00:22:36] <pjb> Well, more or less, because Chinese people are actually more wealthy than us, in puchasing power in renminbi.
[00:23:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:25:17] <humasect> all water finds its level =_) 
[00:25:32] <humasect> as we globalize in the last 100 year or w/e it still a bit rocky but its balancing out 
[00:26:20] <humasect> say early 1900s china would have been a very different world, or india or egypt. now they have coca cola and iphone and street signs , and we have prayer rugs and chopsticks and yoga
[00:29:07] <selwyn> egypt narrowly missed out on industrialising
[00:29:10] <lotuseater> or the wild west in 1900
[00:29:45] <edgar-rft> In Japan there was a similar situation in the 1960..80s where poeople worked for nearly no money to produce cheap electronics, but this has changed when the money had spread and nobody wanted to work for cheap money anymore.
[00:29:54] <humasect> egypt i guess UAE, dubai is doing fairly well. they make their own water 
[00:30:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:30:15] <humasect> bubbles?
[00:32:50] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:34:28] <humasect> kirby is stupid good platformer
[00:34:33] <selwyn> arguable that egypt in the 19th century would have become an industrial power if not for being ruined by britain and france
[00:34:42] <humasect> too good like nintendo keeps putting their best mario team on HAL labs
[00:34:58] <humasect> selwyn: ah isnt that how it happens though? colonialization ?
[00:35:22] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:35:52] <selwyn> it seems disadvantageous to have a geography that simply lets others sail into all of your main cities
[00:36:31] <selwyn> humasect: yes but they reached a sophisticated level of economic development before they went backwards into becoming a raw materials supplier
[00:36:58] <humasect> selwyn: ahh, yeah =/ 
[00:37:07] <humasect> meanwhile most tech (maths, etc) comes from arabia/persia 
[00:37:45] <selwyn> well, i guess you can say similar about other colonies, but e.g. 18th c india was not industrialising
[00:38:22] *** Joins: makomo_ (~makomo@user/makomo)
[00:41:59] *** Quits: makomo_ (~makomo@user/makomo) (Client Quit)
[00:42:08] *** Joins: makomo (~makomo@user/makomo)
[00:53:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:57:55] *** Joins: sm2n (~sm2n@user/sm2n)
[01:00:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:06:29] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Ping timeout (120 seconds))
[01:07:03] *** Joins: selwyn (~selwyn@user/selwyn)
[01:24:48] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:25:41] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[01:27:46] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:31:02] *** Joins: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[01:31:06] *** Quits: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Remote host closed the connection)
[01:38:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:44:50] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:46:22] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 260 seconds)
[01:47:23] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[02:00:58] *** Joins: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[02:09:33] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Quit: WeeChat 3.2)
[02:10:38] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[02:16:54] <kakuhen> humasect: depends how you define mathematics
[02:17:16] <kakuhen> i'm not sure how much of topology, algebraic geometry, number theory, combinatorics, ... came from arabia/persia ;)
[02:17:31] <kakuhen> but yes they were very important in preserving a lot of foundational topics in math
[02:17:56] <lotuseater> the beginnings. and don't forget the greeks
[02:18:04] <kakuhen> also crediting people in mathematics is very hard because every 50 or so years it turns out historians find some older documents where someone arguably uses a method we attribute to someone way later
[02:18:04] <kakuhen> Prim's algorithm is an example
[02:18:22] <kakuhen> it's only named after Prim because the West ignored Jarnik's work for a couple of decades
[02:18:41] <kakuhen> then when computers were being hyped in the 60s and 70s suddenly this Prim guy rediscovers some of Jarnik's work and gets the graph algo named after him
[02:18:51] <lotuseater> or Newton's method
[02:19:25] <kakuhen> And sometimes there are people whose work is only found posthumously 
[02:19:51] <kakuhen> Ito's lemma for instance was independently discovered by someone named Wolfgang, cant remember this full name
[02:20:04] <kakuhen> But during the start of WWII, he was executed and his work was hidden for decades until recently
[02:20:17] <lotuseater> but giving something a name by its "discoverer" is also helpful to distinguish and for others to get context faster while talking
[02:20:54] *** Quits: Duuqnd (~Duuqnd@c80-217-225-86.bredband.tele2.se) (Ping timeout: 260 seconds)
[02:21:02] <kakuhen> yeah that's correct, it's convenient to name things after the person who made the idea important
[02:21:30] <kakuhen> That's why R noetherian => R[x] noetherian has the fancy name of "Hilbert's Basis Theorem" meanwhile R[x] noetherian => R[[x]] noetherian doesn't even have a name. :)
[02:21:40] <lotuseater> right, or distinguishing between "conjecture of ..." but then "theorem of ..."
[02:22:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:22:51] <lotuseater> I think just the Noether theorem is more than enough for one person as it gives such a fundamental property of the universe.
[02:23:08] <selwyn> what's R[[x]]?
[02:23:22] <kakuhen> formal power series ring
[02:23:25] <selwyn> oh
[02:24:09] <lotuseater> not so easy to say when things are just set in ASCII ^^
[02:24:12] <selwyn> i once knew R noetherian => R[x] noetherian :o
[02:24:21] <lotuseater> rocketchat could be helpful .. :D
[02:24:33] <kakuhen> in some math communities online I just type the latex and most can visualize in their head w
[02:24:42] <kakuhen> but I don't do that here since I don't think it'd be as useful
[02:24:53] <lotuseater> sure
[02:25:22] <lotuseater> in rocketchat one can write directly KaTeX
[02:25:31] <selwyn> arxiv uses mathjax to render abstracts iirc
[02:25:36] <kakuhen> but katex doesnt support fancier latex features :<
[02:25:45] <lotuseater> yeah KaTeX is that in better and faster
[02:25:48] <kakuhen> in my experience mathjax or whatever is called is what most people use
[02:25:49] <lotuseater> oh
[02:25:53] <kakuhen> katex is nice because its faster but that's all it has going for it really
[02:25:59] <kakuhen> iirc it only supports a very very small subset of latex
[02:26:07] <lotuseater> it can do much indeed
[02:26:07] <kakuhen> like some integral signs and maybe a matrix
[02:26:22] <lotuseater> for 2D communication on the fly
[02:26:33] <selwyn> kakuhen: well, that sounds terrible then
[02:26:57] <kakuhen> well katex has just enough that if you dont do higher level topics, you'll probably be fine
[02:27:15] <selwyn> hm
[02:27:15] <kakuhen> e.g. you should be able to typeset $\sum_{n\geq 0} a_n x^n\in R[[x]]$ just fine with katex
[02:27:20] <kakuhen> but a commutative diagram? not happening.
[02:27:32] <kakuhen> you also will not get away with some of the fancier symbols used in model theory
[02:27:50] <selwyn> is that a conscious decision made to keep the speed high, or did they just not bother to implement lots of things
[02:27:58] <kakuhen> probably a mix of both
[02:28:13] <kakuhen> but yes, katex is intended to be almost instantaneous rendering
[02:28:25] <selwyn> well
[02:28:46] <selwyn> i can see why khan academy would want that
[02:28:54] <lotuseater> if one is too abstract about things ...
[02:29:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:29:13] <kakuhen> yeah katex is pretty much perfect if you're going to be typesetting things like integrals and DEs
[02:29:14] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[02:29:47] <lotuseater> https://katex.org/docs/supported.html
[02:29:48] -ixelp- Supported Functions · KaTeX
[02:31:50] <kakuhen> now that i think about it, the limitations of katex are only felt if you need to \usepackage to typeset something
[02:32:04] <kakuhen> so e.g. commutative diagrams will be super tedious if not impossible since most people use tikz-cd
[02:32:32] <kakuhen> a workaround is to set up a borderless matrix and you use the normal arrows in latex
[02:32:37] <selwyn> theres a commutative diagram on the supported functions page
[02:33:00] <kakuhen> oh wow that's new
[02:33:12] <kakuhen> that literally didn't exist when i tried using it for my website back around december
[02:34:03] <kakuhen> the syntax is completely different from tikz-cd, or making a commutative diagram yourself with matrix environment, but the rendering looks as good as tikz-cd renders so that's good
[02:34:27] <lotuseater> tikz is .. overwhelming :)
[02:35:07] <kakuhen> but you can do literally anything with tikz -- given enough patience and time
[02:35:11] <lotuseater> do you know for what the TikZ acronym actually stands?
[02:35:29] <lotuseater> kakuhen: oh yes, I've seen very impressive things
[02:35:32] <kakuhen> some german acronym but i forgot lotuseater
[02:35:40] <selwyn> goodnight all
[02:35:46] <lotuseater> TikZ := TikZ ist kein Zeichenprogramm
[02:35:52] <kakuhen> selwyn: good night
[02:35:58] <lotuseater> so in english "TikZ is no painting program"
[02:36:06] <lotuseater> goodnight
[02:36:21] <lotuseater> and thus the big Z
[02:37:38] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[02:39:10] <lotuseater> are you now quiet cause selwyn is gone?
[02:39:30] <kakuhen> no
[02:39:33] <lotuseater> ok
[02:39:34] <kakuhen> i just have nothing to say 
[02:39:40] <lotuseater> ok sry
[02:40:30] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:40:39] <lotuseater> but as we're from different math worlds we can come together and say: KaTeX is held small and useful by intention
[02:40:51] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[02:42:24] <hayley> https://users.rust-lang.org/t/why-cant-rustc-only-compile-code-that-is-actually-used/64601 inb4 crabs invent the JIT compiler
[02:42:25] -ixelp- Why can't `rustc` only compile code that is actually used? - The Rust Programming Language Forum
[02:42:49] <lotuseater> very crabby
[02:43:33] <lotuseater> hayley: https://www.youtube.com/watch?v=mRMmlo_Uqcs
[02:43:34] -ixelp- you need to learn Python RIGHT NOW!! // EP 1 - YouTube
[02:44:04] <hayley> lotuseater: https://www.youtube.com/watch?v=3-VZP1pCIL8
[02:44:05] -ixelp- The Angels - No Way Get Fucked Fuck Off - The Gov - Adelaide 2014 - YouTube
[02:44:05] <lotuseater> https://www.youtube.com/watch?v=wwbM63-LFD4
[02:44:05] -ixelp- Why You Should Not Learn to Code (as an ex-Google programmer) - YouTube
[02:44:51] <lotuseater> right just a joke of course :D
[02:44:56] <moon-child> hayley: recently I encountered a c++ programmer using ecs, converging on compacting gc
[02:45:45] <hayley> moon-child: Once someone said that ECS was a funny way to do prototype OO with maps in a class-based language. Which...isn't quite true, but was amusing.
[02:46:11] <kakuhen> lotuseater: no longer as a millionaire?
[02:46:18] <kakuhen> does that mean he is not millionaire anymore?
[02:48:04] <lotuseater> I don't know, a longer time ago I saw some videos and with lines like "no you don't know since I'm the tech-lead here!" i got a somewhat arrogant impression
[02:49:53] <hayley> https://www.youtube.com/watch?v=9oWSJpIHhYk
[02:49:53] -ixelp- Radio Prague - YouTube
[02:50:17] <White_Flame> yeah ,that techlead guy is a real weirdo
[02:50:49] <White_Flame> I think his persona is only a minor exaggeration of himself, given some of the more personal things he's posted
[02:50:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:50:58] <lotuseater> okay I wasn't sure how seriously I should've taken that
[02:52:14] <kakuhen> most youtubers are real weirdos it seems
[02:52:21] *** Quits: copec (~copec@schrodbox.unaen.org) (Quit: checkity check out.)
[02:52:36] <lotuseater> but some are cool and make good content
[02:52:41] *** Joins: copec (~copec@schrodbox.unaen.org)
[02:53:54] <lotuseater> ah I remember some days ago in #commonlisp, someone joined literally the first time and asked directly "I saw the CLHS, is this the best possible for documentation? I would change this and that and JS and CSS ..."
[02:54:33] <moon-child> didn't somebody do that already?  Called ultradocs or some such
[02:55:10] <lotuseater> ah okay, but beach just replied "imagine I go to #python and be so rude"
[02:55:49] <kakuhen> i will admit, younger audiences may benefit from fancier documentation sites; I'm fine navigating the HyperSpec but that's because my mind is wired a little differently :3c 
[02:56:01] <lotuseater> yes sure :)
[02:56:14] <lotuseater> me too
[02:56:15] <kakuhen> the sad part is that the HyperSpec prohibits you from changing its appearence and making that copy public
[02:56:29] <lotuseater> when I was used to it and checked howto
[02:56:32] <hayley> Just use some user CSS (which only has to set up margins really) and you're set.
[02:56:53] <hayley> Or, alternatively, keep it and use the lack of styling as a deterrence from idly reading the spec.
[02:57:30] <kakuhen> that reminds me a friend showed me WSCL the other day and I wanted to make a fancy latex template for it, but I haven't even started yet.
[02:57:59] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:58:24] <lotuseater> or when I showed a rusty friend of mine the symbol list and he thought it's just messy and not so good as rust doc, for every topic which functions etc apply. but indeed CLHS has a dictionary for every topic
[02:58:40] <White_Flame> lotuseater: huh, that's actually one of the better videos  I've seen from that guy
[02:59:20] <lotuseater> ha okay, it plopped up with the other
[03:00:36] <hayley> lotuseater: the term is crab https://www.youtube.com/watch?v=8TEAMHgrxi0
[03:00:36] -ixelp- JJ Burnel - Crabs - YouTube
[03:00:47] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:02:26] <lotuseater> craaab people, craaab people. they even were in the stick of truth game
[03:02:43] <dave0> maw
[03:02:57] <hayley> "The girl, she's got the crabs! And she hasn't been fishing in the sea."
[03:02:59] <kakuhen> i wish i had friends who actually used ru5t
[03:03:10] <lotuseater> dave0!
[03:03:14] <kakuhen> instead i just see online people claiming their love for ru5t without actually ever using it
[03:03:18] <kakuhen> i recall one such guy in #emacs
[03:03:19] <dave0> hi lotuseater 
[03:03:37] <lotuseater> good to see you
[03:03:43] <kakuhen> I asked him "what do you like about [Ru5t]?" and he didn't give me an answer but he continued marketing it to us
[03:03:44] <dave0> how are you?
[03:03:46] <hayley> kakuhen: I assume they are all waiting on the compiler.
[03:03:55] <humasect> eheheheheh
[03:04:06] <lotuseater> what's with CL?
[03:04:07] <hayley> "BRO LOOK NO DATA RACES" *never defines data race* *leaves*
[03:04:23] <kakuhen> hayley: so much analysis, yet so little answers :(
[03:04:28] <hayley> For CL you want https://www.youtube.com/watch?v=mek4r82fbtU
[03:04:28] -ixelp- She's Got Claws - YouTube
[03:04:46] <lotuseater> you have claws too? :P
[03:04:58] <humasect> how can she slap?
[03:05:17] <hayley> lotuseater: If you pronounce CLOS funny...
[03:05:25] <lotuseater> nice!
[03:07:31] <lotuseater> but of course having the hands normally is the best way
[03:07:37] <humasect> -terphobic
[03:07:39] <kakuhen> hayley: my favorite is asking about asynchronous TCP in Rust
[03:07:54] <kakuhen> criticize C++ users for their standard library not having actual networking yet
[03:08:09] <kakuhen> meanwhile Rust's own standard library lacks this
[03:08:21] <hayley> Green threads or go home imo
[03:08:24] <kakuhen> b-but dude crates are so convenient! use them!
[03:08:43] <hayley> Ah yes, the NPM for """systems""" programming
[03:08:48] <kakuhen> i got some rust gopher client on macports actually
[03:08:52] <kakuhen> it was insane how many crates i had to pull in
[03:08:55] <kakuhen> it was about 36 or so crates
[03:09:01] <kakuhen> b-but dude the binary is less than a megabyte!!
[03:09:07] * hayley uploaded an image: (327KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ptoPVxnwaEQNCNWEZNbVEfpx/randy-smith.png >
[03:09:24] <humasect> green++
[03:09:36] <kakuhen> anyway i am mostly neutral about rust but i do wish people who claim to love it actually use it w
[03:09:47] <kakuhen> have skin in the game, as taleb would say
[03:09:49] <humasect> if they did perhaps that love would change 
[03:09:54] <lotuseater> this trash site to upload stuff that i used sometimes is also with rust be a friend, he showed me the source, soooo many crates for just that
[03:10:17] <humasect> often times, the idea of a thing is larger than the thing itself
[03:10:23] <humasect> (or more real, more valuable, etc)
[03:10:24] <lotuseater> yes
[03:10:41] <lotuseater> humasect: so not always bigger than the sum of its parts :)
[03:10:41] <humasect> eg. don't meet your heroes =)
[03:11:23] <hayley> Disagree, Cliff Click was still cool after he replied to my email
[03:11:36] <kakuhen> lotuseater: i dont get people who want to use rust on server-side for websites
[03:11:43] <kakuhen> if you love pain and dependency hell that much just use rails lol
[03:11:46] <lotuseater> a dumb question, is the name of this guy really Cliff Click? ^^
[03:11:54] <humasect> hayley: people can be anything behind keyboards. as you know.
[03:12:02] <hayley> lotuseater: Yes.
[03:12:15] <lotuseater> kakuhen: and I don't get people who say everything must be done server-sidely
[03:12:19] <hayley> kakuhen: but muh performance with no GC and static types!!!1!
[03:12:22] <humasect> kakuhen: then unlock nightmare mode with node/npm
[03:12:36] <lotuseater> okay cool name, and alliteration
[03:12:43] <hayley> lotuseater: https://www.oracle.com/technetwork/java/javase/tech/c2-ir95-150110.pdf
[03:12:44] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Read error: Connection reset by peer)
[03:12:55] <hayley> C2 = the Cliff Click compiler
[03:13:03] <moon-child> is that the sea of nodes paper?
[03:13:07] <kakuhen> hayley: I heard Ruby is single-threaded and that is a bad thing!! Rust lets you use moar threads in theory :3c 
[03:13:08] <Alfr> lotuseater, if it isn't you may want to chop it into pieces and sell those.
[03:13:14] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[03:13:22] <moon-child> (or, 'a')
[03:13:40] <kakuhen> lotuseater: well to be fair, for things like an uploading site, there isn't much you should be doing client-side anyway, besides like, making the website look fancy and useable.
[03:13:58] <hayley> moon-child: Yes.
[03:14:01] <kakuhen> some image hosting sites i know run on rails for instance, and they seem to be fine despite huge bandwith
[03:14:09] <lotuseater> oh äh I don't want to sell anything
[03:14:19] <lotuseater> ah that you mean
[03:14:45] <lotuseater> right, I meant it in a more general way
[03:15:00] <hayley> (I think I still prefer having an explicit control flow graph, as in Cleavir, rather than having "phony" data flow to indicate control flow. But then again you can reorder more aggressively with just data flow.)
[03:15:14] <lotuseater> where it makes sense and reduces unnecessary traffic for example
[03:15:28] <kakuhen> oh that reminds me i am curious about hutchentoot -- i should try using it some time
[03:15:49] <kakuhen> I tried setting up rails for the first time a few weeks ago and it had to pull in a million gems alongside NodeJS
[03:15:58] <kakuhen> apparently you can disable some feature that drops the Node dependency 
[03:16:06] <lotuseater> yeah why not, another thing by Edi in origin iirc like cl-ppcre
[03:16:13] <moon-child> (My compiler uses an explicit CFG.  Sea of nodes always seemed neat; but I don't know what the implications are in practice)
[03:16:29] <lotuseater> oh rails for riding the train *tschoo-tschoo*
[03:16:49] <kakuhen> but setting up a very old version of rails was super quick; I spun up an OS X 10.6 VM and "rails new ..." took about 2 seconds and still had all the fancy sqlite stuff set up out-of-the-box
[03:16:51] <hayley> (And, well, I basically want s/FUNCALL/SEND/ for the Zero Feet compiler.) 
[03:17:44] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:19:39] <lotuseater> phew not so few exported symbols in hunchentoot
[03:20:13] <hayley> https://philip.greenspun.com/humor/choosing-a-major
[03:20:14] <kakuhen> exported symbols: YES
[03:24:55] <kakuhen> hayley: The philosophy part is very accurate
[03:25:10] <kakuhen> One of my high school friends majored in philosophy and he quite literally takes drugs daily
[03:25:21] <kakuhen> He once showed up to one of his discussions high and debated the TA for the entire time
[03:25:41] <kakuhen> also one of the smartest people i know -- as far as philosophy stuff goes
[03:33:44] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[03:36:46] *** Joins: robin (~robin@user/terpri)
[03:43:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:45:04] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:49:03] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:51:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:51:23] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:53:07] <humasect> waldo has neat ideas (read essay "NAture")
[04:17:17] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:20:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[04:22:18] <hayley> https://www.youtube.com/watch?v=SG08kxIIlHQ
[04:22:19] -ixelp- California Smalltalkers 2021-09-08 - YouTube
[04:23:43] <hayley> "If ... some nut-case decides to add type checking to the language..." - Gilad Bracha
[04:24:11] <humasect> Self was neat
[04:24:49] <humasect> helped work on a project called "Slate" which was inspired by it
[04:26:21] <humasect> https://github.com/briantrice/slate-language 
[04:29:06] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[04:30:40] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[04:31:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:31:38] *** Joins: robin (~robin@user/terpri)
[04:36:06] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1015-static.midco.net)
[04:39:02] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1015-static.midco.net) (Ping timeout: 260 seconds)
[04:43:38] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[04:46:36] <humasect> type-level programming is neat. the Meta in ML 
[04:48:20] *** Joins: robin (~robin@user/terpri)
[04:51:04] <hayley> I thought it was a Meta Language because they used it to write theorem provers.
[04:51:42] <humasect> oh 
[04:51:44] <kakuhen> nowadays all of the popular theorem provers use C++ 
[04:51:45] <kakuhen> (ahem, Lean)
[04:52:10] <hayley> Coq in OCaml? ACL2 in Common Lisp?
[04:52:12] <kakuhen> i liked using Lean but unfortunately mathlib is a giant monster that makes my computer light on fire for 5 minutes and consumes 12 GB of RAM after all is compiled
[04:52:22] <kakuhen> i dont know of any mathematics undergrad using Coq or ACL2 in $current_year
[04:52:29] <kakuhen> or even professors
[04:52:34] <kakuhen> I know Andrej Bauer used to do some stuff with Coq
[04:52:36] <kakuhen> but not anymore
[04:52:37] <hayley> TLC is in Java, but it doesn't prove theorems nicely, just does proof by exhaustion.
[04:52:58] <kakuhen> Coq was pretty popular among mathematicians a decade ago and now it seems like the latest trend is Lean (specifically, mathlib)
[04:53:04] <humasect> julia comes with a big c++ scientific library, starts with a B.
[04:53:14] <hayley> They use ACL2 for hardware verification, which has some more significance than undergrad homework. But I don't know what happened to Coq.
[04:53:34] <kakuhen> well Coq is nice because unlike Lean it's not as much of a moving target
[04:53:36] <hayley> BLAS? That'd be FORTRAN?
[04:53:48] <kakuhen> yeah
[04:53:50] <kakuhen> blas is fortran
[04:53:52] <humasect> as yes
[04:53:58] <kakuhen> anyway, while everyone in math is obsessing over  Lean, Coq was used for actually non-trivial things in the past
[04:54:00] <humasect> nah its c++ im pretty sure
[04:54:05] <moon-child> hayley: coq is used by compcert, which is used in aerospace
[04:54:15] <hayley> There we go.
[04:54:17] <kakuhen> namely, four-color theorem and confirming uhh that one group theory statement
[04:54:26] <kakuhen> mfw i know the statememnt the theorem but forgot its name
[04:54:31] <kakuhen> its the one that says every group of odd order is solvable
[04:54:33] <hayley> https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms
[04:54:44] <kakuhen> Feit-Thompson there we go
[04:54:58] <kakuhen> i've seen Coq used for actual work, but for some reason everyone's doubling down on Lean
[04:55:11] <kakuhen> used for actual work twice in the past 20 years and it's questionable whether it was even worth it*\
[04:55:13] <kakuhen> sorry :3c
[04:57:40] <hayley> https://www.youtube.com/watch?v=8GZnSeGbssw
[04:57:40] -ixelp- If - YouTube
[04:57:55] <humasect> hayley: i guess it is OpenBLAS, fortran indeed. i had thought c++ somehow
[04:58:17] <kakuhen> well, C++ does get used a ton for math software, just not the number-crunching variety ;)
[04:58:24] <kakuhen> Singular, 4ti2, et al are all written in C++
[04:58:38] <kakuhen> and these are all components of Macaulay2, another big commutative algebra software, written mostly in C++
[04:58:52] <humasect> https://en.wikipedia.org/wiki/Isabelle_(proof_assistant)
[04:59:38] <humasect> https://en.wikipedia.org/wiki/Z3_Theorem_Prover
[04:59:46] <humasect> there
[05:00:21] <kakuhen> I've heard of Isabelle but not Z3
[05:00:33] <kakuhen> >stable release: 7 months ago
[05:00:37] <kakuhen> i didnt even know people still used this
[05:00:49] <moon-child> z3 is an smt solver, more general
[05:00:50] <humasect> this took a while to find: https://github.com/JuliaSymbolics/Symbolics.jl 
[05:01:08] <humasect> kakuhen: yeh, that Z3 from micro$oft, 58 days ago
[05:01:23] <kakuhen> i would expect microsoft research to focus mostly on Lean w
[05:01:32] <kakuhen> but I guess it's different teams working on different things
[05:02:01] <kakuhen> i cant wait for microsoft research to release lean 4 so that people get the luxury  of rewriting all of mathlib from scratch
[05:02:16] <kakuhen> im sure as hell not rewriting anything that involved automorphism groups of graphs
[05:03:04] <kakuhen> there's a really neat, constructive-ish proof you can do to prove Aut(G) = Aut(G'), where G' is the complement of G
[05:03:11] <kakuhen> and as usual with graph theory, you do either two things
[05:03:24] <kakuhen> (1) pretend all graphs are finite, undirected so that you are doing an inferior version of geometry [that's my example]
[05:03:39] <kakuhen> or (2) you're really an analyst at heart and recognize finiteness is boring, so you opt for ramsey theory and infinite graphs and pretend finite graphs  dont exist
[05:04:16] <kakuhen> oh i should restrict the qualifier in (1) to "finite simple graphs"
[05:08:23] *** Quits: random-nick (~random-ni@87.116.178.0) (Ping timeout: 252 seconds)
[05:10:57] <humasect> MS research does a lot for haskell GHC
[05:21:37] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[05:23:31] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[05:42:45] *** Joins: robin (~robin@user/terpri)
[06:06:04] *** Quits: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Quit: bibi!)
[06:34:27] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[06:35:28] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[06:40:16] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Ping timeout: 252 seconds)
[06:52:02] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 260 seconds)
[06:58:33] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[06:59:51] <moon-child> http://www-formal.stanford.edu/jmc/recursive/node3.html  huh, apparently there was originally F, distinct from NIL
[06:59:52] -ixelp- Recursive Functions of Symbolic Expressions
[07:00:14] <moon-child> and 'cons [car [x]; cdr [x]] = x'--no EQ
[07:09:00] <gilberth> EQ is only defined on atoms. Applying it to conses is an error.
[07:10:21] <humasect> isnt a cons a lisp 
[07:10:25] <humasect> ugh *list
[07:11:04] <gilberth> And you cannot tell two conses with same car and cdr apart. It would not make sense anyway as there is no RPLACA or RPLACD.
[07:12:20] <moon-child> gilberth: well, sure; I meant mroe generally that there's referential transparency
[07:12:41] <moon-child> even without mutation, hash-consing larger structures is interesting
[07:13:28] <gilberth> In Lisp-I?
[07:13:32] <moon-child> (though it is annoying without mutations on the backing mapping)
[07:13:57] <gilberth> Btw. It says null[x] = atom[x] ∧ eq[x; NIL]
[07:15:23] <gilberth> moon-child: How would you compute you hash anyway? In LISP that is.
[07:16:58] <gilberth> humasect: Yes, a list is defined that way: Either NIL or a cons. Of course NIL is an atom.
[07:17:14] <moon-child> gilberth: you can't.  That's kind of my point!
[07:17:57] <gilberth> Well, you could somehow hash the tree structure itself.
[07:18:37] <hayley> The olde PHP hash = length?
[07:18:58] <moon-child> you have no numbers!
[07:19:25] <gilberth> hayley: For instance. Of course, when you use the Peano representation, you don't gain much ;)
[07:19:38] <gilberth> moon-child: Nope.
[07:20:18] <gilberth> Lisp I has, but not the original proposal.
[07:20:23] <moon-child> so hash is kind of meaningless
[07:20:34] <moon-child> performance wise
[07:20:43] <moon-child> you do, what, a digit list
[07:20:55] <moon-child> but modulo is uncomfortable
[07:21:41] <humasect> https://ctxt.io/2/AACga90GFg 
[07:21:41] -ixelp- Context – share whatever you see with others in seconds
[07:21:42] <gilberth> Well, a CPU also only works on strings of bits at the end of day.
[07:21:59] <moon-child> yes, but it can do it fast
[07:22:22] <humasect> as long as they/we are happ
[07:22:23] <humasect> y
[07:23:07] <hayley> Here is a loud announcement.
[07:23:15] <humasect> where?
[07:23:55] <gilberth> moon-child: The idea of hashing is that summing sth and take a modulus and then only compare a small number of items to the key is cheaper than a linear search. This will still hold, when you implement numbers in terms of trees (lists).
[07:24:44] *** Parts: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[07:25:55] <hayley> humasect: https://applied-langua.ge/posts/here-is-a-loud-announcement.html
[07:25:56] -ixelp- Here is a Loud Announcement: Applied Language announces Applied Language
[07:27:20] <moon-child> gilberth: not when you have no vectors so you still have to do O(n) CDRs to get to the item in question
[07:27:34] <hayley> https://www.youtube.com/watch?v=WW_dgV9sYnk
[07:27:35] -ixelp- Remind Me to Smile - YouTube
[07:28:27] <gilberth> moon-child: I propose O(log n), your vector could be a tree. Even with O(n) it would still hold that hashing will be faster.
[07:29:25] <moon-child> ah, yes, fair enough
[07:29:38] <moon-child> and as a trie you don't have to compare _all_ the digits multiple times
[07:30:06] <moon-child> (which, actually, I guess is an argument for making your digits church numerals rather than symbols)
[07:30:37] <dave0> no numbers?
[07:30:43] <dave0> that's crazytalk
[07:30:45] <gilberth> Just dispatch on end of integer, odd integer, even integer and then recurse.
[07:31:40] <moon-child> you'll be way more efficient if you use a bigger base than 2
[07:31:51] <moon-child> normal computers use base 2⁶⁴ or so
[07:34:46] <gilberth> moon-child: We have only conses. So a higher base will not help at all.
[07:35:16] <dave0> is exabyte 2**64 as unimaginably huge as gigabyte 2**32 was to 16 bit computers?
[07:35:42] <dave0> cos exabyte seems pretty fucking huge
[07:38:50] <gilberth> dave0: It is. How did it take to go from 64KB (16-bit) to 4GB (32-bit) in RAM size? And Moore's law approaches limits.
[07:39:05] <gilberth> * How long
[07:39:57] <moon-child> also 64-bit systems can't even address 16eb yet.  Just 256tb in most cases
[07:41:45] <gilberth> That would be wasted bits. /me watches out for hayley.
[07:42:36] <moon-child> indeed!
[07:42:55] <moon-child> if the cpu would just mask them off before accessing, we could use them for tagging
[07:43:16] <moon-child> 3 low bits + 16 high bits ~~ 500k unique identifiers, put the whole type tag in the pointer
[07:44:19] <moon-child> I guess, spend one on fixnum so just 256k.  Still
[07:44:32] <gilberth> This is why I would like to represent pointers by NaNs to have unboxed double floats, those 2**52 NaN bits are enough.
[07:45:46] <dave0> that sounds like something you should patent
[07:45:51] <gilberth> moon-child: Like the 68k? Bad idea. We already have 4 spare bits in a pointer. For more you could use the MMU, no need to cut the address room.
[07:46:32] <moon-child> gilberth: I don't like nan tagging.  We don't need fast access to individual floats; only fast access to batches of them.  And I mean, you can already do the 18 bit tag, you just need to do the mask yourself.  Which will be fewer instructions than extracting the pointer from the float
[07:46:35] <gilberth> dave0: I should have done that some 20 years ago. Now JS does that.
[07:46:47] <moon-child> also you have to move the float backand forth between float and gp registers
[07:47:10] <gilberth> Which is cheaper than consing all the time.
[07:47:49] <moon-child> gilberth: using the mmu won't let you put the _whole_ tag in the pointer
[07:47:51] <moon-child> and tlb will hate you
[07:47:53] <gilberth> Or: Why do we have fixnums at all? With that same argument, we could just forget fixnums too.
[07:48:20] <dave0> is JS the end of integers
[07:48:36] <moon-child> floats have much narrower applicability than integers
[07:48:51] <gilberth> moon-child: I don't need "whole" tags. Tagging immediate objects and cons cells is suffice. The rest could have a header, all fine.
[07:49:39] <gilberth> moon-child: I have them in CLIM all the time. And, yes, coerce some things to single floats helps performance-wise.
[07:49:40] <moon-child> gilberth: then you need a load before you can start doing dispatch.  If the tag is in the pointer, you can start loading and dispatching at the same time
[07:49:55] <moon-child> ilp
[07:50:11] <moon-child> gilberth: yes, 'graphics' (also audio; signal processing in general) is the primary domain where floats are applicable
[07:50:47] <gilberth> moon-child: Then use two words to represent objects. Tags are always of limited size, you could avoid that only by a tag of a full word width.
[07:51:50] <moon-child> that's obviously a huge waste of space
[07:52:00] <gilberth> See.
[07:52:03] <moon-child> I don't see what the objection is to 18/19-bit tags?
[07:54:44] <gilberth> It won't solve the problem in general and it would cut your address space down. It's a bad idea to limit an architecture to smaller pointers. Worse use an implementation detail like custom on the 68k, which ignored the higher 8 bits.
[07:55:51] <moon-child> it's not cutting your address space down.  You _already_ don't get to use those bits for anything useful
[07:56:08] <gilberth> We may want to map the whole disk to our address space. And with only 46 bits left, this would limit me to 64TB.
[07:57:06] <gilberth> moon-child: That is an implementation detail, not an architecture detail. A future AMD64 processor which uses more address bits would run existing SW just fine. That's my point.
[07:57:22] <moon-child> We don't want to 'map' the disc.  mmap() is necessary because of c semantics; we can do better
[07:57:40] <gilberth> Better? read(3)?
[07:58:33] <moon-child> don't treat the disc or files as sequences of bytes, but as _logical_ objects
[07:58:55] <gilberth> Hah. And you do that how?
[07:59:26] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:59:29] <moon-child> e.g. closos
[07:59:46] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[07:59:51] <gilberth> That was exactly my point. Thanks.
[08:00:13] <moon-child> and as you page things in and out, move them in memory.  256tb is mroe than enough for actual ram.  And the mmu is very coarse anyway; you don't want to rely on it in such a situation, because your logical objects may be smaller than a page
[08:00:23] <gilberth> So limit yourself to 64TB disks, if you wish. I believe that's tiny.
[08:00:38] <moon-child> why do you limit yourself to 64tb discs?
[08:00:47] <gilberth> moon-child: So you advocate pointer swizzling?
[08:01:12] <gilberth> moon-child: I don't. You do, with just 46 address bits.
[08:02:08] <moon-child> gilberth: are you saying that the pointer with value 'x' should be associated with disc offset 'x'?
[08:02:57] <gilberth> I say, that each byte in my house should have an address in my virtual address space. Yes.
[08:03:42] <gilberth> [Word address would be suffice, but we're stuck with byte addresses.]
[08:04:39] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[08:04:47] <moon-child> how do you deal with snapshots/versioning, then?
[08:05:53] *** Joins: humasect_ (~humasect@2001:1970:57e0:4100::3675)
[08:06:02] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:06:24] <gilberth> moon-child: The same as before.
[08:06:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[08:07:50] <gilberth> And no. I don't advocate getting rid of files.
[08:08:06] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Ping timeout: 260 seconds)
[08:09:14] <hayley> IIRC some JVM would use the upper bits for a class tag.
[08:15:38] *** Joins: robin (~robin@user/terpri)
[08:25:45] <hayley> FWIW the Dynabook paper mentions removing files and just having "variables" mapped to disk.
[08:25:45] <hayley> https://history-computer.com/Library/Kay72.pdf p.9: "Eliminating the need for a resident "system" per se by merging the concept of files with user variables"
[08:26:06] *** humasect_ is now known as humasect
[08:36:34] * gilberth still believes that this is pretty poor CLOSOS advertising.
[08:37:32] <humasect> first you have protected memory. then suddenly you've got to sign in email/passwd/confirm at every turn
[08:37:43] <moon-child> gilberth: what is a 'file', to you?  Is it a record which is a byte vector?  You may have those; they are only one type of object.  Is it a hierarchical organization of other objects?  You may have those too; but they are only one type of object
[08:38:13] <moon-child> or a stream?  A capbility? etc.
[08:38:40] <humasect> original MacOS had a strict philosophy of having "only one instance of a file" -- if its on screen, there it is. no other links or copies or shortcuts to it
[08:39:08] <moon-child> humasect: this is called 'referential transparency'
[08:39:21] <humasect> like today we can open a few browser/finder/explorer windows and have the same shortcut/link in several places on screen =/
[08:39:25] <humasect> moon-child: ahh
[08:40:13] <humasect> the Equals Sign (equation)
[08:40:41] <gilberth> A file is a sequence of bytes. Like a paper tape or a stack of punched cards. And a file is transportable both in time and in space.
[08:41:06] <humasect> like book, like vinyl record
[08:41:42] <gilberth> Yes. And how you file those is orthogonal.
[08:42:07] <humasect> then you need files to organize the files (index cards)
[08:42:23] <humasect> database
[08:43:28] <gilberth> Depends. I have no index cards for my library. It's not huge enough ;) But yes: All my books sit on the book shelf in some order.
[08:44:47] <humasect> some authors make whole books on piles and stacks of index cards =) me, i dont know where to begin. my first activity of design is folders/dirs
[08:44:50] <gilberth> A book then also has chapters and sections and paragraphs and sentences and words and letter. Pretty hierarchical.
[08:44:56] <humasect> yeah tree
[08:45:26] <humasect> lisp too, once its parsed however
[08:45:35] <moon-child> hierarchy is good.  But do not _force_ a single hierarchy-interpretation of data!
[08:45:41] <humasect> the tree view is possibly more like a garment, a view or perspective on the linear sequence of data
[08:45:46] <moon-child> humasect: what hierarchy has #1=(1 . #1#)?
[08:45:56] <humasect> moon-child: reality ?
[08:46:02] <gilberth> moon-child: You asked what a file is, not what data is.
[08:46:46] <humasect> you can take 100 pictures of various parts of nature. they can be arranged mosiacally as pixels for a larger image. and that one too, with several of its counterparts. and so on ad infinitum
[08:46:55] <gilberth> Being transportable in time and space implies some serialization. That's a file.
[08:47:07] <moon-child> gilberth: I am talking about your comment on books being hierarchical
[08:47:23] <humasect> eh thats data =P 
[08:47:34] <moon-child> gilberth: say, for example, that I have two translations of the odyssey; one by wilson and one by fitzgerald.  I would like to compare them.  Then I might like to group chapter n of each book together
[08:47:40] <humasect> code stays still. data moves. 
[08:47:54] <moon-child> rather than grouping chapter n together with chapters n-1 and n+1 of the same book
[08:47:58] <gilberth> They still also are serial, aren't they? Though they could have links, both internally or refering to other books.
[08:49:13] <humasect> how about this: the book itself is raw data. it is only serial by how the reader reads it from start to finish. for example a dictionary. it is organize sequentially (alphabetical) but the user will generally get a different hierarchy than what is presented. (look up one word --> leads to another word, etc)
[08:49:15] <gilberth> moon-child: Sure, but that would be kind of odd arrangement for a library.
[08:49:43] <humasect> type of data also matters. would you arrange books by color? size? 
[08:50:12] <moon-child> gilberth: indeed.  My point is that _all_ hierarchies should be synthesized on demand.  Not tyrannically forcing one 'canonical' hierarchy (like unix's filesystem), with all other hierarchies we might wish to project onto the underlying data being second-class
[08:50:16] <humasect> so we have mimetypes/meta data, and hierarchy to aid in perusal and maintenance
[08:50:22] <gilberth> Again. I don't talk about data. I just said, what IMHO a file is.
[08:51:10] <humasect> there is another way to use files, which i hear is not uncommon: to keep all your stuff in *one* folder. but using meta tags to organize it.
[08:51:11] <gilberth> moon-child: You're free to arrange your files in what ever way you like.
[08:51:17] <humasect> that way, you can have a file in two places, so to speak.
[08:52:27] <gilberth> What is often overlooked though is the transportability of a file. And conventions. I can't easily mail you some CLOS instance.
[08:53:07] <humasect> there is no transport
[08:53:13] <gilberth> humasect: UNIX allowed for files being at multiple places at once from the very beginning.
[08:53:17] <humasect> like downloading, its just copying
[08:53:40] <humasect> gilberth: yes, symlink hard/soft, but for casual "file+desktop" use
[08:54:15] <gilberth> humasect: It's still transport. That's my whole point.
[08:54:18] <humasect> i went off road there a little bit. but there is no actual transfer of data, just copying
[08:54:37] <humasect> thats why can't mail a CLOS instance =) 
[08:55:22] <gilberth> Each time your CPU executes an instruction there is a copy.
[08:55:34] <humasect> cool
[08:55:50] <humasect> the hyoid bone is the only floating bone in the human body (not with any other bones)
[08:56:10] <humasect> i copied ur info to my hd, now you copy that info to your hd =)
[08:56:48] <gilberth> humasect: The reason is: A CLOS instance has way more pointers to other objects, which also have pointers, that the context in which it is to be interpreted is way larger than with a text file.
[08:57:04] <hayley> gilberth: haha transporter goes brrr
[08:57:11] <humasect> ohh. so like, DCOM stuff ?
[08:57:21] <humasect> NeXT did a fine job with Distributed Objects 
[08:57:24] <gilberth> humasect: And to the RAM, to the cache, to the registers, to the ALU and back.
[08:57:32] <humasect> (later Enterprise Objects)
[08:58:37] <gilberth> All not a file in my definition of a file. A file is historically a temporal conservation of a stream of bits.
[08:59:11] <gilberth> And whether you move (copy) that in time or in space makes no difference at all.
[09:00:41] <humasect> that makes sense
[09:01:19] <humasect> where they even called 'files' to begin with? terms such as desktop, folder, trash, button - are GUI things
[09:02:06] <humasect> in the sense of the verb it seems more clear; to file something away, say, in a filing cabinet (.cab files MS used..)
[09:02:28] <gilberth> Well, files were filed. And a library was linked into a program by either sticking files together or copying them together.
[09:02:40] <humasect> into a book or binder ?
[09:02:46] <humasect> folder 
[09:02:54] <gilberth> Yes. You could do that.
[09:03:09] <humasect> library... ah yes. 
[09:03:24] <humasect> folders could be called books
[09:03:25] <gilberth> I mean, think of it: You have a machine with no disk. All you have is a tty with a puncher. How would you file your files?
[09:03:31] <humasect> or files can be called books
[09:03:45] <humasect> in a filing cabinet like a caveman
[09:04:25] <humasect> well, i would call a database, a book. linear stream sure, but it contains its indexing and hierarchy info
[09:04:32] <humasect> (table of contents)
[09:04:45] <gilberth> There are some demos on YT. How you would first toggle the boot loader, than feed the compiler, then feed a source text and the machine would spit out a binary on tape, which you could file for reuse.
[09:07:01] <gilberth> Either magnetic or paper tape. Or cards.
[09:07:01] <gilberth> humasect: You remember those folders people used to file their floppy disks, all nicely labeled? Same.
[09:07:35] <humasect> gilberth: the plastic box with lock ? =)
[09:07:52] <gilberth> Yeah. I used those.
[09:08:12] <humasect> my dad had quite a few. and cabinets and calculators and letter openers and paper weights
[09:09:07] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:09:58] <gilberth> Anyhow, I don't say that this hierarchical arrangement is the only way to organize your files. It's only that it works well for millennia.
[09:12:06] <gilberth> And even in RL it breaks. Like I have a folders for letters. For different things like contracts, financial things, etc. But then I also have a folder for documents relevant for income tax declaration. You can't store a single letter at two places. So at times I would search for a document in the wrong folder.
[09:13:11] <gilberth> There also is the pile of "to file" documents, which somehow grows and grows. :-)
[09:19:58] <aeth> filesystem anarchists don't believe in hierarchical filesystems
[09:26:38] *** Joins: Alfr (~Alfr@user/alfr)
[09:28:45] <kakuhen> filesystems should not be trees
[09:28:50] <kakuhen> hard link everything
[09:30:37] <gilberth> Hard link where?
[09:32:39] *** Joins: robin (~robin@user/terpri)
[09:39:34] <humasect> i think its everywhere
[09:40:43] <humasect> err @ hierarchy, gilberth. my screen wasn't scrolled. that is, we have country, state, city, village, neighborhood, block, plot, house, floor/level, room, chest/closet, book, chapter.. =) 
[09:42:54] <gilberth> You forgot planet, system, galaxy, cluster, super cluster, universe. :)
[09:45:51] <humasect> yep =) then turtles
[09:46:22] <hayley> aeth: Yes.
[09:46:30] <gilberth> You could loosly make a short term memory, desk, book shelf in room, attic down below, library in town, library in city, etc. comparison to registers, L1..Ln cache, RAM, SSD, HD, the "cloud"
[09:46:40] <hayley> https://twitter.com/Transhumanian/status/1436134578423484426 the real male social hierarchy
[09:46:44] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:47:30] <humasect> gilberth: also, that above could be, Inbox, Outbox
[09:48:57] <humasect> gilberth: yeah.. also virtual though, big boxes can fit into small boxes
[09:49:42] <humasect> so we can have a mansion in a garbage can 
[09:50:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[09:53:23] <humasect> gilberth: in real, location has direct impact on size of other locations - relativity. for a flat FS, everything is from one trunk (the table of contents is linear)
[09:54:15] <humasect> like i wouldnt hear drunk television and dogs barking if i was elsewhere (file access is relative to the data it is related to. so, an object instance's references would make more of a Web than a Tree.)
[09:54:39] <humasect> *distributed object. similar with lexical closures kinda 
[10:06:42] <hayley> aeth: https://bullsquid.com/
[10:06:43] -ixelp- Bullsquid.com
[10:20:13] *** Joins: treflip (~user@95.79.32.99)
[10:21:13] *** Joins: shka (~herr@109.231.62.239)
[10:22:09] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[10:27:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:29:27] <hayley> https://www.youtube.com/watch?v=5fMiCcPO5tY
[10:29:27] -ixelp- The Stranglers - This Song (Official Video) - YouTube
[10:30:07] <dave0> You better watch out for the skin deep
[10:30:26] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[10:32:52] <hayley> https://www.youtube.com/watch?v=9ix7TUGVYIo
[10:32:53] -ixelp- The Matrix Resurrections – Official Trailer 1 - YouTube
[10:38:58] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:45:30] *** Joins: robin (~robin@user/terpri)
[10:47:17] <humasect> pants are idiots. hurry up world so i can start wearing robe skirts
[10:47:54] <kakuhen> i almost always wear shorts since i dont like wearing pants
[10:48:00] <humasect> https://www.youtube.com/watch?v=pFptt7Cargc 
[10:48:00] -ixelp- Tame Impala - Let It Happen (Official Video) - YouTube
[10:48:02] <kakuhen> of course for formal events i dont do this
[10:49:08] <humasect> kakuhen: sameproblem for me, shorts. zipper, stupid line down the middle, as a male that is very inconvenient. and same too for the back i guess. long robeskirt would cover legs
[10:49:22] <humasect> but some supershorts underneath to be as careless as if wearing pant
[10:50:37] *** Joins: ln43 (~ln43@user/ln43)
[10:51:14] <humasect> the belt hinges/loops on shorts and pants are painful to lay one's weight upon. also back pockets are useless. also belts are loud and wear out and difficult to wash... can we 3d print clothings yet? we can do shoes and guns
[10:52:13] <ln43> it's holy-day here, alhamdulillah : )
[10:53:27] <humasect> happy
[10:53:36] <humasect> hmm.
[10:54:00] <ln43> and finally i was searching for a good implementation of tic tac toe and i have found good CL recipes https://people.eecs.berkeley.edu/~russell/code/
[10:54:12] <ln43> old but still working ...
[10:54:19] <humasect> if we have days to be happy, side effect is less happy on regular days. perhaps we should have sad days instead? days to feel bad and mourn and play pranks and every other day would be great
[10:55:15] <humasect> 'recipe' that is a good term for set of instructions(code) + ingredients(data)
[10:55:22] <ln43> no whem i'm unhappy i generally use my tasbih to find comfort
[10:55:31] <humasect> what is tasbih
[10:56:22] <humasect> ohh dhikr
[10:56:36] <ln43> a way to relief stress for me and not only ...
[11:00:32] <edgar-rft> has it holes, your holy day?
[11:00:37] <ln43> i was surprised that aima.lisp loaded well with only few errors...
[11:02:53] <humasect> ln43: https://ibb.co/WHhtFXj
[11:09:36] *** Joins: selwyn (~selwyn@user/selwyn)
[11:10:54] *** Joins: Duuqnd (~Duuqnd@185.201.174.78)
[11:20:02] <hayley> Today is 9+10=21 day.
[11:22:06] <selwyn> wat
[11:23:20] <moon-child> 21-09-10
[11:23:25] <moon-child> except swap out the last - for an =
[11:25:22] <selwyn> ok
[11:25:36] <hayley> Although, since we use the dd/mm/yy convention here, I figure I am really waiting for the 9th of October.
[11:27:53] <gilberth> 10/189?
[11:32:00] <ln43> October is a good month
[11:35:56] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Quit: Leaving...)
[11:35:56] <ln43> yesyerday i bought a new little obacco pipe and by reading on the internet there was this advice: a pipe should be rested for 24 hours for every bowl smoked from it
[11:36:17] <ln43> but maybe during the autumn i could wait only 22 hours to say
[11:36:38] <selwyn> i've never heard that before lol
[11:36:40] <ln43>  and maybe few during the winter
[11:36:53] <ln43> but is true... the pipe too needs rest
[11:37:08] <selwyn> one bowl a day sounds very restrictive
[11:37:51] <hayley> So apparently my excellent Portal fangame I made on Scratch called "Destroy The Turrets" turned 8 years old a few days ago.
[11:38:30] <selwyn> there are lots of clay pipes in the thames https://www.beachcombingmagazine.com/blogs/news/mudlarking-the-art-of-smoking
[11:38:31] -ixelp- Mudlarking: The Art of Smoking – Beachcombing Magazine
[11:38:44] <selwyn> it seems that they were basically disposable
[11:39:41] <selwyn> people used to throw them overboard off of ships
[11:40:12] <ln43> usually pipe smokers habe a lot of pipes and so it's possible to use them in cycle...
[11:42:51] <ln43> ok i bought a plumb's but is clearly a fake since there is a b in cyrillic ... but it works good 
[11:43:20] <ln43> https://pipedia.org/wiki/Dr._Plumb 
[11:43:21] -ixelp- Dr. Plumb's - Pipedia
[11:46:41] <ln43> to be precies i suppose that rule applies only to wooden pipes, so not foam pipes and so on
[11:47:00] <ln43> pipes made in have no rules at all i think
[11:49:25] <selwyn> idk if i could use a pipe
[11:49:35] <ln43> foam = meerschaum pipe or something similar
[11:51:04] <ln43> running in a new pipe is always exciting
[11:51:20] <moon-child> https://chrisseaton.com/truffleruby/rubykaigi21/
[11:51:20] -ixelp- The Future Shape of Ruby Objects
[11:51:25] <moon-child> everything old is new?
[11:51:56] <ln43> ok to foarm a coal strate inside the pot
[11:52:20] <ln43> but nowdays is no more required since pots are almostaways pretreated 
[11:53:10] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:53:19] * hayley tries to think of something as memorable as "Hello Joe." in Self: the Movie
[11:53:31] <hayley> "_This_ is a Self object. An object is a collection of slots."
[11:55:52] <shka> it is better to introduce definition before an example
[11:55:59] <ln43> which is a convenient way to "render" an html page within Emacs ?
[11:56:39] <shka> well, usually at least
[11:57:13] <ln43> so there is no alternative if not using a browser ...
[11:58:07] *** Joins: robin (~robin@user/terpri)
[12:03:10] <ln43> now the sad thing is that with portacle i can't use eww since emacs was not compiled with libxml2
[12:03:14] <ln43> but why not?
[12:03:34] <ln43> ... ops, maybe is it too platform specific ?
[12:15:05] <selwyn> i'm sure you can get it to work
[12:15:22] <selwyn> i use portacle as a latex ide
[12:17:41] <ln43> ok but on windows i don't think it's so easy... i was trying to see if maybe binaries (https://www.zlatkovic.com/pub/libxml/64bit/) were enough or i need to rebuild all portacle 
[12:19:11] <selwyn> try the binaries
[12:21:50] <ln43> ok.. i will try to put them in the \portacle\win\bin directory
[12:22:30] <ln43> hoing that there is no any library to add...
[12:27:42] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[12:36:08] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:37] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[12:39:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:48:26] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[13:14:19] *** Joins: robin (~robin@user/terpri)
[13:30:59] <kakuhen> oh my god we are truly in the future
[13:31:05] <kakuhen> i just found a trashy visual novel that runs on electron 
[13:31:19] <kakuhen> imagine using nearly a gigabyte memory just for what is essentially a text and image slideshow
[13:33:07] <selwyn> what's it called?
[13:36:47] <kakuhen> ナツノカタナ
[13:37:03] <kakuhen> the title is very reminiscent of a fucking awful VN I played back around 2017 called uhh
[13:37:15] <kakuhen> 枯れない世界と終わる花
[13:37:27] <kakuhen> haven't seen a single good review of it, and for good reason
[13:37:54] <hayley> https://music.youtube.com/playlist?list=OLAK5uy_lTwycFHK-J30AmXXcTC38a9M1jHxoC2Rs
[13:37:55] -ixelp- Your browser is deprecated. Please upgrade.
[13:37:58] <kakuhen> also in my experience most "gal game" like stuff are garbage  but I'd rather not post some of my controversial opinions at this hour :>
[13:38:02] <hayley> ^ new Stranglers album
[13:38:53] <kakuhen> anyway i havent started playing this electron VN yet because I'm having too much seeing all the ways I could modify it
[13:39:05] <kakuhen> the other game? jesus christ where do I even begin in how non-sensical and stupid it is
[13:40:01] <kakuhen> basically the plot is that you are "some guy"  and basically everyone else some permutation of the same generic anime girl template the game studio used
[13:40:20] <kakuhen> that aside, so some of these girls are angels and every full moon they have to sacrifice some human because otherwise they die and the reason is ??? lol figure it out
[13:40:26] <kakuhen> and when they kill people they turn into flowers
[13:40:40] <kakuhen> (by "they" I mean the people the angels killed)
[13:40:57] <kakuhen> and basically you have some erotic moments with some of the girls and you bumble around finding things and abandoned churches and what not
[13:41:17] <kakuhen> then eventually you heck one of the girls and it turns out you're god
[13:41:24] <kakuhen> at that point I decided I couldn't take it anymore and deleted the entire game
[13:41:45] <kakuhen> somehow the MC loses all 5 senses but is somehow able to continue telling you what happened shortly afterwards
[13:41:52] <kakuhen> and this isnt even all of it
[13:42:07] <kakuhen> I still have yet to go into the contradictory and stupid shit I kept seeing in between everything I just described
[13:42:24] <selwyn> perhaps sony should remake it for ps5
[13:43:20] <kakuhen> "NEW: garbage visual novel for incels with no taste that has had zero positive reviews"
[13:43:30] <kakuhen> you know, that may actually be something sony could pull off
[13:44:09] <kakuhen> you see, I didnt know the game would be this bad because all I read was the short description on their website before grabbing a torrent of it
[13:44:23] <kakuhen> then I told myself "hey maybe I should complete the game to get my money's worth, so to speak"
[13:44:36] <kakuhen> the game just kept getting worse and worse and eventually I decided "ok fuck finishing the game, this is too much"
[13:45:09] <kakuhen> though to be fair, has there even been a good gal game?
[13:45:16] <kakuhen> 17 year old me really was stupid
[13:46:12] <contrapunctus> kakuhen: Katawa Shoujo?
[13:46:38] <contrapunctus> That's the only 'gal game' I've ever played, to be honest.
[13:46:47] <kakuhen> that's a name I haven't seen in a looong time
[13:46:53] <kakuhen> but yeah it doesnt surprise me -- it was popular in the west for some reason
[13:47:06] <hayley> https://www.youtube.com/watch?v=4JyTnuaSnv0
[13:47:06] <kakuhen> alongside other titles like nekopara (jesus christ another fucking bad game i dont get people like)
[13:47:07] -ixelp- YTP: Michael Plays Katawa Shoujo - YouTube
[13:47:13] <contrapunctus> (...I live in India.)
[13:47:33] <kakuhen> (...maybe I should have said "outside of Japan," oops)
[13:47:43] <contrapunctus> 😅
[13:47:53] <kakuhen> (the politically correct term to use here is "overseas")
[13:48:20] <White_Flame> gaijin
[13:49:15] *** Joins: treflip (~user@95.79.32.99)
[13:49:23] <White_Flame> (also, India is still west of Japan ;) )
[13:49:42] <kakuhen> nooooo you're supposed to heckin say 外国人 !!!!111
[13:50:00] <kakuhen> anyway gaijin is considered a bit politically incorrect now
[13:50:08] <kakuhen> (but most people don't give a shit, only the media does)
[13:50:10] <White_Flame> all according to gaikoku
[13:52:00] <kakuhen> anyway, as much as I criticize garbage games, they DO seem to make money
[13:52:16] <selwyn> free market delivers
[13:52:17] <kakuhen> but at the same time many of these game studios come and go like fucking furniture stores
[13:52:24] <White_Flame> do they have a pr0nz in them?  I would presume that means some minimum level of sales
[13:52:32] <kakuhen> one company springs up and mass produces garbage and swiftly goes bankrupt
[13:52:37] <kakuhen> then some other one springs up in its place
[13:52:40] <kakuhen> rinse and repeat over 20 years.
[13:53:11] <kakuhen> yes most VNs are 18+ and 99% of the ones that aren't are usually for children.
[13:53:25] <kakuhen> the only non-adult game I can think of is uhhh this one literal kid's game but I forgot the title
[13:53:56] <kakuhen> はなひら or something like that
[13:54:01] <Duuqnd> I hate having to see so many porn games on Steam all the time
[13:54:53] <Duuqnd> I play one game that's more point and click adventure than visual novel, but that VN tag is all Steam needs to know that I'm absolutely interested in hentai VNs.
[13:55:10] <kakuhen> your first problem was using Steam
[13:55:37] <kakuhen> to be fair, I can't really blame you for this -- do people even buy computer games outside of Steam anymore?
[13:55:49] <Duuqnd> GOG is nice but I like having my games in one place
[13:56:04] <kakuhen> oh right I recall the humble indie bundle or whatever
[13:56:12] <kakuhen> a friend once gifted me one and I got to learn that Torchlight is pretty fun
[13:56:12] <Duuqnd> Steam also automates much of the work needed to get Windows games running on Linux
[13:56:53] <kakuhen> oh yeah i forgot about that
[13:57:15] <kakuhen> I'm suffering with the operating system with an """"app store"""" that decided one day "haha let's strip away all 32 bit code because we can"
[13:57:24] <kakuhen> so basically nothing in my steam library can be installed now
[13:57:27] <kakuhen> as a result I just dont use steam
[13:57:48] <Duuqnd> GOG is generally nicer than Steam in almost every way (games are DRM-free, their store makes it easier to find games, etc), but I just don't want to deal with having too many games in different places.
[13:58:01] <kakuhen> what is the point of amd64 if i cant even run 32-bit programs anyway?? at that point we may as well crank it to 11 and go full Itanium >.<
[13:58:18] <kakuhen> oh wait just kidding we'd rather embed iPhone chips into Macs now /s
[13:58:33] <Duuqnd> Why not go for 65 bits just for shits and giggles?
[13:58:55] <kakuhen> b-but fixnums in my lisp are 60 bits
[13:59:27] <Duuqnd> The extra bit could be a "cosmic ray detector" that's normally always 0 but if it's ever 1 the CPU catches on fire.
[13:59:27] <kakuhen> oh that reminds me, Clozure CL has this very small and hard limit on function calls
[14:00:02] <kakuhen> I forget the limit, but basically, please don't (funcall #'+ (loop repeat 10000000 collect 1)) or else Clozure CL complains at you
[14:00:14] <kakuhen> SBCL has no problem with this, and apparently it's because the function calling limit or whatever is literally most-positive-fixnum
[14:00:29] <kakuhen> why even have #'reduce at that point :DDD 
[14:01:29] <selwyn> well, consider that array-total-size-limit is not guaranteed to be greater than 1024
[14:01:47] <selwyn> so we have to be grateful
[14:01:49] <kakuhen> CCL's call-arguments-limit is 65536 in comparison
[14:01:55] <kakuhen> pretty tiny compared to SBCL's
[14:04:03] <kakuhen> oh also pretend the LOOP in my example gets spliced or whatever
[14:04:18] <kakuhen> I always forget that apply lets you just pass in a list but funcall needs you to strip away one layer of parens
[14:04:32] <kakuhen> wait no even that is wrong
[14:04:34] <selwyn> yes
[14:04:44] <selwyn> uh
[14:04:49] <kakuhen> wait no im right
[14:05:04] <kakuhen> yeah apply lets you pass in a list, but funcall needs you to provide each argument separately
[14:05:16] <kakuhen> see? I never remember these things. I just write code that makes the debugger shut up since I suck at lisp
[14:05:34] <selwyn> apply can take multiple arguments, only the last of which has to be a list
[14:05:47] <selwyn>  (apply #'max 3 5 '(2 7 3)) =>  7 
[14:05:57] <kakuhen> TIL
[14:06:01] <kakuhen> https://a.uguu.se/lxQFYZmH.png
[14:06:09] <kakuhen> as you can tell, i was having a bit of fun verifying the nonsense I was spewing out just now
[14:06:46] <selwyn> try `(funcall 
[14:06:50] <selwyn> sorry
[14:07:33] <kakuhen> `,
[14:07:42] <kakuhen> wait no nvm that doesnt work
[14:07:58] <kakuhen> this is why my friend writes macros and I just use them
[14:08:26] <selwyn> (eval `(funcall #'+ ,@(loop repeat 1000 collect 1))) does what one thinks it might
[14:08:30] <kakuhen> yeah I just did that
[14:08:30] <selwyn> but considered silly
[14:08:42] <kakuhen> well i first did the funcall thingy then (eval *) in my repl
[14:08:52] <kakuhen> took me a while to recall that is a thing you can do >.<
[14:09:14] <selwyn> there is a maxim that you should never use eval unless there really is no other choice
[14:10:33] <kakuhen> (eval -)
[14:10:34] <selwyn> one reason for that is that forms are evaluated in the null lexical environment
[14:11:45] <kakuhen> huh, so that explains the funky null environment stuff I saw when jumping to random eval code in ccl
[14:11:55] <selwyn> yes?
[14:12:07] <kakuhen> i dont know how any of this stuff work but i recall seeing some "null environment" being used in eval
[14:12:12] <kakuhen> i never really thought about it twice
[14:12:25] <kakuhen> i dont understand 90% of the code i get curious about when i jump to def'n on ccl internals
[14:12:33] <kakuhen> with that said, i am going to sleep
[14:12:37] <selwyn> goodnight
[14:12:41] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:15:16] <gilberth> The limit with SBCL is far less than MOST-POSITIVE-FIXNUM. Try (apply #'+ (loop repeat 1e6 collect 1))
[14:17:00] <gilberth> All those arguments must be copied to the stack after all.
[14:19:43] <selwyn> oh yeah
[14:28:06] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[14:32:04] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[14:45:31] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[14:59:08] <phoe> I have an algorithm question, a very practical one
[14:59:36] <selwyn> shoot
[14:59:57] <phoe> I have a four-player game, N players, and M rounds. I want to assign these players to tables in a semirandom way - I want to ensure that no two players sit at the same table more than once
[15:01:21] <shka> phoe: first, seed two player pairs, then fill-in remaining?
[15:01:51] <shka> oh, you want to have M rounds
[15:01:53] <shka> right
[15:02:13] <phoe> it's kind of a backtracking-solvable problem I guess
[15:02:18] <shka> yes
[15:02:23] <shka> i also feel this way
[15:02:37] <phoe> I just wonder if someone already solved a similar thing in the past, or knows how to concisely express it in prolog or something similar
[15:03:04] <shka> not in lisp?
[15:03:05] <shka> anyway
[15:03:07] <phoe> and I'm asking because tomorrow I am hosting a mahjong tournament and I realized that I don't know how to seat the players ahead of time
[15:03:12] <phoe> shka: can be in Lisp, no problem
[15:03:17] <shka> good
[15:03:21] <phoe> prolog is just a natural backtracking engine and it's the first thing I thought of
[15:03:42] <shka> nah, easy target to satisfy
[15:03:45] <phoe> and I failed at time management real bad so I don't have the time to 100% the solution myself, so I come here for help
[15:04:03] <shka> so i don't have much time right now
[15:04:09] <shka> but you do this as follows
[15:04:22] <shka> generate complete list of pairs you need to satisfy
[15:04:30] <shka> since players are supposed to play twice
[15:04:36] <phoe> twice, as in?
[15:04:45] <phoe> each player plays M times
[15:04:46] <shka> against each other at the table
[15:04:56] <phoe> oh, no - players must NOT play against each other more than once
[15:05:04] <phoe> I want to ensure that there are no repetitions
[15:05:13] <shka> aaah, right!
[15:05:13] <phoe> that everyone plays against distinct people every time
[15:05:26] <shka> oh, this is trivial then!
[15:06:07] <shka> you need to maintain the map of people that played against each other, and then go M times to build round rosters
[15:06:56] <shka> so it is simply a matter of getting unique combinations of 4 people 
[15:08:00] <phoe> hmmmm
[15:08:13] <shka> ok, i think that this may be even simpler
[15:08:20] <shka> put names into array
[15:08:30] *** Joins: robin_ (~robin@user/terpri)
[15:08:31] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[15:08:52] <shka> and the first sets you can get is to batch that array into 4 players chunks
[15:10:08] <shka> so index 0 1 2 3|4 5 6 7
[15:10:54] <shka> then 0 4 8 12 
[15:11:24] <shka> and 1 5 9 13
[15:11:37] <phoe> that's two rounds so far
[15:11:40] <phoe> OK
[15:11:45] <shka> phoe: 4 rounds
[15:12:04] <phoe> no, that's a bit more complex
[15:12:08] <phoe> suppose that I have 16 players
[15:12:09] <shka> oh, ok
[15:12:11] <phoe> each player plays three times
[15:12:22] <phoe> so that is 4 tables * 3 rounds = 12 distinct games in total
[15:12:28] <shka> well, ok
[15:12:40] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[15:12:43] <shka> i really need to go now
[15:12:46] <phoe> OK
[15:12:47] <phoe> thanks
[15:12:48] <shka> but you can figure this out
[15:12:51] <phoe> I'll chew on it a little
[15:13:59] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:14:25] *** Joins: robin (~robin@user/terpri)
[15:21:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:22:41] <gilberth> phoe: How about this. You have four players at a table, you say. So 1/4 of the players keep their table. No for each table three have to move. All groups of three move to the next table. Then two of those three must move again to the next table, One of those two move again, thus move thrice for the next round. Would that work?
[15:23:29] <phoe> gilberth: doesn't this only ensure consistency between two consecutive rounds?
[15:23:41] <phoe> like, there's a chance that round 1 and 3 can have people who already played against each other
[15:24:10] <gilberth> When you have too few rounds, yes.
[15:24:52] <dave0> i'm a brute force kinda guy... i would generate all combinations of people and remove duplicates
[15:24:57] <gilberth> This was just a non-brute-force idea.
[15:27:47] <hayley> https://www.youtube.com/watch?v=DfTcsA6ODSc
[15:27:48] -ixelp- Observer (Demo Version) - YouTube
[15:29:29] <hayley> Arbitrary idea for the bailout library: as I am too evil to really do actors and only use message passing, I want to rather mark where crashes could cause some data structure to be FUBAR. What if I had a "lock" which wouldn't really lock, but would just put the object on some list of objects, which we would then mark as in indeterminate state if some unhandled error is signalled while holding the lock?
[15:32:30] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 265 seconds)
[15:35:54] <phoe> going bruteforce in a truly naïve way just hangs
[15:37:52] <dave0> how big is N and M ?
[15:38:35] <phoe> 16 people, 3 rounds
[15:38:42] <phoe> in this concrete example
[15:38:43] *** Joins: robin_ (~robin@user/terpri)
[15:38:48] <phoe> but can also be 24 people, 3 rounds
[15:38:56] <selwyn> do you know how many people will actually play tomorrow
[15:38:58] <dave0> how can it hang? those numbers are tiny
[15:39:03] <phoe> selwyn: no
[15:39:11] <phoe> dave0: because my algorithm is stupid
[15:39:18] *** Joins: Oddity (Oddity@user/oddity)
[15:39:22] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[15:39:41] <dave0> even 2**(24+3) is only a billion ish
[15:40:00] <phoe> https://plaster.tymoon.eu/view/2630#2630
[15:40:20] <dave0> oh it's lisp oops i'll shut up now :-)
[15:41:40] <phoe> MAKE-SEATING can be made much smarter I guess
[15:41:51] <phoe> since it currently bruteforces its way through everything
[15:42:35] <phoe> it can be instructed not to make seatings that it knows that will not work, but then again, there is no backtracking implemented there
[15:43:41] <dave0> if there's 24 people, there can be at most 24*24 pairs, and lots will be doubles so sort the list and remove duplicates
[15:43:51] <hayley> (Also, apparently rms invented "phantom stacks" wherein you optimistically stack allocate, then give up control of the stack to the heap if you violate stack order.)
[15:43:54] <phoe> pairs? I need quadruplets
[15:44:27] * selwyn thinks about permutations
[15:44:32] <dave0> 24*24*24*24 = 331776
[15:45:44] <phoe> more like 24*23*22*21, a player cannot play against themself
[15:45:48] <phoe> but, hm
[15:47:49] <dave0> the faster computers got, the lazier i got :-p
[15:49:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[15:49:39] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[15:53:08] <dave0> i dig one-off problems.. just throw time and memory (money?) at it
[15:53:54] <dave0> i don't have money
[15:53:59] <dave0> so not that
[16:04:10] <selwyn> going to try an analytic solution
[16:04:22] <selwyn> it may be related to an interesting decomposition of the symmetry group
[16:05:02] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 260 seconds)
[16:07:58] *** Joins: robin (~robin@user/terpri)
[16:11:52] <selwyn> what happens if the number of people who show up tomorrow isn't divisble by 4
[16:13:46] <shka> not permutations
[16:13:51] <shka> this is not order sensitive
[16:14:09] <selwyn> was considering permutations a different way
[16:15:08] <phoe> selwyn: I assume 4N people for N tables
[16:15:19] <phoe> you can't play four-player mahjong with less than four people so that's a no-op for me
[16:15:27] <phoe> ##prolog provided me with https://www.metalevel.at/mst.pdf though
[16:15:33] <shka> great!
[16:15:37] <shka> smart guys
[16:15:43] <dave0> maybe 1-3 people sit out the game when it's not their turn
[16:15:52] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[16:15:57] <gilberth> Anyhow, from one round to the other, only one person at the table may keep his table. All others must move. And those three may not move in the same way. And since one of the four players keeps his table all the time, the other three player may not visit the same table again. Thus my idea.
[16:16:03] <phoe> yes, but for tournaments you *must* have a 4N number of people
[16:18:01] <selwyn> oh is it solved then
[16:18:12] * selwyn puts away pen and paper :(
[16:18:28] <gilberth> So this reduces the problem to three players each round.
[16:18:36] *** Joins: robin (~robin@user/terpri)
[16:19:13] <shka> selwyn: yeah, those prolog guys are no fun at all!
[16:19:15] <shka> :P
[16:20:14] <gilberth> [You could compose those tables for four out of a table for three and and one for one. Move the 3-tables to the next position each round and then solve for three players.]
[16:20:24] <gilberth> Would that work? dunno.
[16:20:39] <selwyn> hmph
[16:21:08] <gilberth> Frankly, I don't see another way. But I am not good at such puzzles.
[16:22:50] <gilberth> I overlooked sth. Hmmm.
[16:22:52] <shka> gilberth: yeah, it should boil down to 0,1,2,3 then 0,4,8,12 then 0,5,9,13 then 0,6,10,14...
[16:23:22] <selwyn> well, if the completion problem is np it seems unlikely that a quantum algorithm could solve it efficiently
[16:23:32] <dave0> lol
[16:23:55] <dave0> you'se are real hackers :-p
[16:24:18] <dave0> find an interesting problem and chew on it for a while :-)
[16:24:19] <selwyn> they do use quantum latin squares for something
[16:24:46] <selwyn> one thing you learn after enough time doing quantum stuff is that you genuinely can stick quantum in front of any phrase and make it work
[16:24:51] <selwyn> it's not pseudoscience
[16:29:41] <edgar-rft> quantum latin squares are quantum quadra :-)
[16:30:34] <edgar-rft> oh, squares (plural) are quadrae of course
[16:32:54] <shka> selwyn: quantum dominant lisp programming language  please
[16:33:08] <selwyn> lol
[16:33:17] <selwyn> homoiconicity very difficult on a quantum computer
[16:33:29] <selwyn> but they use lisp at d wave and rigetti
[16:33:42] <selwyn> hm
[16:35:17] <selwyn> i suppose you could make a very high level quantum programming language that was lisp like
[16:37:38] *** Joins: cranium (~cranium@user/cranium)
[16:37:41] <shka> quantum tangled cons cells
[16:37:47] * shka is having fun
[16:38:14] <selwyn> that is fun
[16:38:24] <selwyn> i guess we would need quantum data structures one day?
[16:38:31] <shka> i guess?
[16:39:00] <selwyn> at the moment it is at the stage of, if we had a quantum computer we could run a single algorithm at a time on it
[16:39:00] <gilberth> I was thinking too simple. When I have two tables and four players, i could play three rounds.
[16:39:02] <selwyn> and that would be great
[16:39:11] <hayley> Quantum good morning everyone!
[16:39:23] <shka> hayley: good morning!
[16:39:54] <gilberth> One of the four would keep his place, and the other three would rotate for three rounds.
[16:40:58] <gilberth> I was thinking speed dating :-)
[16:42:02] <edgar-rft> yeah, let's change the date several times per day
[16:43:46] <gilberth> edgar-rft: Just visit the ISS.
[16:44:22] <edgar-rft> I want spring-time in the morning and chrismas presents after supper!
[16:44:23] <gilberth> Anyhow, this table problem is hard, let's go shopping.
[16:45:13] <gilberth> edgar-rft: Imagine we celebrate your birthday each hour.
[16:45:57] <edgar-rft> table problem is easy, just put all my presents on the table
[16:46:16] <edgar-rft> I celebrate birthday several times per minute!
[16:46:58] <gilberth> That would make you age real fast.
[16:47:28] <edgar-rft> I'm older than methusala
[16:49:28] <edgar-rft> my girlfriend used to say "I'm always right because I'm older than you" and I usually replied "but one day I will be older than you!"
[16:51:33] <gilberth> What did you do? Put her into orbit?
[16:58:06] * hayley uploaded an image: (18KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/uKXuiBIVQyrNaNFBoOyIgEoW/self-chalice.jpeg >
[17:12:18] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[17:20:52] <phoe> https://goodenoughgolfers.com/
[17:20:53] -ixelp- Good-Enough Golfers
[17:21:01] <phoe> so there is a whole simple algorithm for solving this problem approximately
[18:08:53] *** Joins: selwyn (~selwyn@user/selwyn)
[18:15:08] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:15:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:16:53] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[18:25:14] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[18:30:02] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:37:28] *** Quits: Duuqnd (~Duuqnd@185.201.174.78) (Ping timeout: 252 seconds)
[18:44:42] <selwyn> quantum latin squares are fun
[18:54:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:17:58] <clothespin_> well i had some coffee
[19:18:09] <clothespin_> so i can say it without lying so much
[19:18:13] <clothespin_> good morning
[19:18:21] <selwyn> good morning
[19:19:45] <clothespin_> my 4 year project is turning out as good, if not better than i had hoped
[19:21:11] <selwyn> great
[19:23:12] <clothespin_> I've been putting components of it on gituhb.
[19:23:33] <clothespin_> the main program is not released yet, but it will be gplv3
[19:31:58] <selwyn> what does it do?
[19:32:29] <clothespin_> it's a parametric cad system
[19:32:52] <clothespin_> inspired by solidworks, mirai, and icad
[19:32:59] <selwyn> wow cool
[19:44:17] <selwyn> shka: you could have a superposition of quantum states that correspond to cons cells if you are doing grover's algorithm
[19:44:28] <selwyn> which is like a quadratically faster quantum brute force search
[19:44:39] <selwyn> but an entangled state of cons cells is weird
[19:47:36] <shka> selwyn: if you invent something, just mention me ok? :P
[19:48:02] <selwyn> ok
[19:48:10] <selwyn> but i will name it after #lispcafe
[19:48:25] <shka> well, as you wish
[19:48:34] <shka> though shka-cell is a better name
[19:49:22] <selwyn> it will be so weird when good quantum memories exist
[19:49:45] <selwyn> because all of a sudden you will have to deal with quantum data that cannot ever be copied, only mutated or destroyed
[20:14:26] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:44:00] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:50:30] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[20:51:06] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:07:11] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:11:57] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:12:36] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[21:18:57] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:39:54] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:47:14] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:08:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:14:10] *** Joins: santiagopim (~user@90.167.66.93)
[22:15:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:31:35] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[22:36:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:14:59] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:28:52] <selwyn> https://www.liverpoolecho.co.uk/news/uk-world-news/uk-faces-permanent-food-shortages-21533789
[23:28:53] -ixelp- UK faces 'permanent' food shortages and it will 'get worse' - Liverpool Echo
[23:31:42] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:38:44] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[23:42:16] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:51:25] <Gnuxie> Only 1 percent of voters, including over 65s, believe the plans to fund social care will leave them better off 
[23:51:49] <Gnuxie> Idk why it took tax money for people to give a shit about Boris wtf 
[23:52:07] <Gnuxie> 'People' the entire country 
[23:52:33] <Gnuxie> Cuntry
[23:53:06] <contrapunctus> lol
