[00:00:48] *** Joins: aphysically (~aphysical@user/aphysically)
[00:00:57] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[00:01:17] *** Quits: aphysically (~aphysical@user/aphysically) (Client Quit)
[00:01:37] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 256 seconds)
[00:02:58] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[00:03:06] *** Quits: RingtailedFox (~BoingBoin@2001:1970:5d2a:c500:5c9a:f59f:ebfc:11cb) (Quit: Leaving)
[00:03:08] *** Joins: sgn (~sgn@user/sgn)
[00:03:10] *** Quits: shabius (~shabius@2a0e:1c80:1:1042::1003) (Quit: Leaving)
[00:03:33] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:03:48] <toma> [book suggestion needed] Just finishing up my first Python book (Introducing Python by Bill Lubanovic) and was looking for a recommendation. I've been considering either Python Cookbook, Python Distilled, and Fluent Python. Any suggestions as which should be next? Am I missing something I should consider?
[00:04:10] <ChrisWarrick> toma: writing code is much better than reading books
[00:04:20] <mefistofeles> ↑
[00:05:01] <SnoopJ> toma, Fluent Python is very well-liked, but has a new edition coming out very soon. If you're not going to read the pre-release edition that's available I would hold off on that one.
[00:05:01] <toma> ChrisWarrick: How else would I get to Carnegie hall? :) Any places to start coding or just pick up and do what I'm interested in?
[00:05:13] <toma> SnoopJ: Thanks.
[00:05:17] <SnoopJ> there's a nice list of project suggestions here: https://nedbatchelder.com/text/kindling.html
[00:05:27] <toma> SnoopJ: Awesome, thanks.
[00:05:45] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[00:05:56] <SnoopJ> even if you like books, be sure not to let too much time pass behind writing some code while reading one :)
[00:06:01] *** Joins: sgn (~sgn@user/sgn)
[00:06:27] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[00:06:34] *** Joins: Auron (~Auron956@user/auron)
[00:07:10] <toma> SnoopJ: I'll try to keep a balance. Books seem so much more appealing because lazy but I do understand the need to practice and code.
[00:07:23] <SnoopJ> it's not a spectator sport, as they say
[00:07:26] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:07:46] *** Joins: mickey8 (~user@user/mickey)
[00:08:17] <lericson> toma: programming is a craft, but it certainly helps to read about it while practicing
[00:08:20] <ChrisWarrick> if you read all the books out there, you still won’t be able to write code
[00:08:44] <ChrisWarrick> if you start writing code, with books or not, you will be
[00:08:52] *** Joins: ckdCreations (~ckdCreati@2607:fb91:1501:48b3:41c6:86c0:693:b8e4)
[00:08:54] <SnoopJ> +1
[00:09:05] <toma> [book suggestion: Git] One more, off topic question. Any book recommendations for learning Git. I imagine a repo for all this coding would be nice. :P
[00:09:18] <SnoopJ> the Git book is quite good, if not...an entire book :(
[00:09:30] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[00:09:36] <lericson> git is just a blockchain init
[00:09:37] *** Quits: remote (~self@user/hackers) (Ping timeout: 240 seconds)
[00:09:47] <SnoopJ> #git might have more specific suggestions
[00:10:41] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[00:10:54] <toma> lericson: "blockchain init" woosh
[00:11:02] <toma> SnoopJ: didn't know of the channel. thanks.
[00:11:09] <lericson> it was a pretty bad joke
[00:11:27] <lericson> but git is a simple system
[00:11:32] *** Quits: nomic (~nomic@85.203.36.80) (Quit: Leaving)
[00:11:49] *** Joins: remote (~self@user/hackers)
[00:11:50] <SnoopJ> Computerphile just did a nice video on it last week
[00:11:56] <lericson> well i say that but it's simple to a trained programmer
[00:13:56] * toma looks up Computerphile. Find video. Ooof, that mustache needs time.
[00:14:23] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:14:53] *** Parts: Guest57 (~textual@142.126.184.79) ()
[00:14:55] *** Joins: Guest57 (~textual@142.126.184.79)
[00:15:23] <toma> SnoopJ: "the Git book" == "Pro Git book, written by Scott Chacon"?
[00:15:49] <SnoopJ> toma, that's the one
[00:15:57] <toma> beaut
[00:16:15] <phy1729> In my experience if you read the first 3 chapters of that book you're better off than most devs.
[00:16:21] *** Joins: somlis (~somlis@user/somlis)
[00:16:56] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[00:17:27] *** Parts: Guest57 (~textual@142.126.184.79) ()
[00:17:37] *** Quits: humberto1 (~humbertow@187.202.198.61) (Ping timeout: 240 seconds)
[00:17:41] <toma> phy1729: three chapters seems manageable.
[00:17:59] <SnoopJ> I find chapter 10 helpful as well if you want to know about its data model
[00:18:22] *** Joins: AppelonD (~AppelonD@80-62-117-193-mobile.dk.customer.tdc.net)
[00:18:42] <SnoopJ> but you can get by without really understanding the different types of data it's keeping track of
[00:18:45] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[00:19:11] *** Quits: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[00:19:18] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[00:19:34] *** Quits: AppelonD (~AppelonD@80-62-117-193-mobile.dk.customer.tdc.net) (Remote host closed the connection)
[00:19:35] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 268 seconds)
[00:19:46] <grym> lericson: proof of work measured as depth of head-banging spot on wall next to desk
[00:19:56] *** Joins: RingtailedFox (~BoingBoin@2001:1970:5d2a:c500:9840:2dc8:2400:9f44)
[00:20:41] <toma> SnoopJ: I'll look that up too...
[00:20:51] <RingtailedFox> finally got python set up... but now IDLE's giving me strange errors like "Cannot save Recent Files list to disk. [Errno 13] Permission denied: 'C:\\Users\\User Account\\.idlerc\\recent-files.lst'
[00:21:06] <RingtailedFox> the folder's not set to hidden or read only.. neither is the file...
[00:21:18] <SnoopJ> toma, don't forget the advice to write code, though. It's easy to lose a lot of time trying to get everything "just right" beforehand
[00:21:21] *** Joins: deno (~textual@142.126.184.79)
[00:21:27] *** Quits: sreve (~quassel@p549d705d.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:21:31] <SnoopJ> even if you learn 100% of it, someone's gonna have a new workflow/thingy tomorrow :)
[00:22:02] <deno> toma, This is a helpful cheat sheet I sometimes reference: https://education.github.com/git-cheat-sheet-education.pdf
[00:22:26] <toma> deno: thanks :)
[00:22:30] *** Joins: oriba (~oriba@dynamic-077-011-158-103.77.11.pool.telefonica.de)
[00:23:25] *** Quits: stockholm (~Andreas@p200300d2c709bd00ed2a8ebf4d5c4569.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:23:45] *** Joins: ano (~ano@user/ano)
[00:23:54] <phy1729> I think the most helpful thing is just to look at git log --graph --oneline  often so you can see what's going on  (potentially with other flags and perhaps as an alias)
[00:24:15] *** Joins: aphysically (~aphysical@user/aphysically)
[00:24:22] <toma> SnoopJ: It's a weird balance though. Too little book learning and the process might become too bogged down with inquires and that might be demotivating. While too much book learning at some point becomes a mirage.
[00:24:30] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a239:503:918d:ec07:abd8:801a)
[00:24:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:24:43] *** Joins: sreve (~quassel@p549d705d.dip0.t-ipconnect.de)
[00:25:20] <SnoopJ> toma, inquiries are most of the process, with or without a book. https://jvns.ca/blog/so-you-want-to-be-a-wizard/
[00:25:45] *** Quits: ano (~ano@user/ano) (Client Quit)
[00:25:49] *** Quits: anon-angler (~anon-angl@109.126.42.47) (Quit: anon-angler)
[00:26:31] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:26:35] <RingtailedFox> huh. idle doesn't whine when i run it as admin... is that normal?
[00:26:46] *** Joins: ano (~ano@user/ano)
[00:26:51] <c4017w__> exarkun, anything is possible if you're willing to get ugly :) https://bpa.st/ZHWQ
[00:27:29] <parv> Is there a transcription error in DST example where arrow.replace() is used at https://pendulum.eustace.io/faq/? I expect only microsecond value to be replaced without affecting anything else; that is what I see too.
[00:28:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:29:27] *** Quits: sreve (~quassel@p549d705d.dip0.t-ipconnect.de) (Client Quit)
[00:29:35] <deno> toma, I found that a good way to get a feel for complexity and a feel for doing math with Python is to solve the first 20-30 problems here: https://projecteuler.net/
[00:29:44] <deno> Perhaps it's of interest
[00:30:12] *** Quits: mindlesstux[m] (~mindlesst@user/mindlesstux) (Quit: Reconnecting)
[00:30:21] *** Joins: Betal (~Betal@user/betal)
[00:30:29] *** Joins: mindlesstux[m] (~mindlesst@user/mindlesstux)
[00:30:34] *** Joins: sreve (~quassel@p549d705d.dip0.t-ipconnect.de)
[00:31:09] <toma> deno: thanks. i'll get on that soon. i do want to setup a repository first to facilitate organization and feedback.
[00:31:30] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:31:45] <deno> Many people will make a repo on github for their solutions. It might be a good way to practice git at the same time!
[00:31:57] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Ping timeout: 240 seconds)
[00:32:15] <exarkun> c4017w__: Of course it is.  I don't feel much need to add more ugliness to the world though.  Why do you?
[00:32:36] *** Joins: Bakunin (~maplefing@user/lindis)
[00:32:47] <toma> deno: :thumbs up:
[00:33:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:33:23] <toma> deno: I'm using emacs and Visual Studio Code. Is there one more thing I should be learning at the same time?
[00:33:39] *** Quits: ano (~ano@user/ano) (Quit: ano)
[00:33:44] <c4017w__> exarkun, The alternative would be to waste a bunch of time writing useless boilerplate functions. It's worth it sometimes
[00:34:37] <deno> toma: I would pick one of emacs or VSC. I don't think it's worth learning two editors at once at this stage in the game.
[00:34:50] *** Joins: ano (~ano@user/ano)
[00:34:51] <deno> (or ever, frankly)
[00:34:59] <exarkun> c4017w__: That is surely not the alternative, but I doubt I'm going to convince you and I'm okay with that.
[00:35:03] *** Parts: a1fa (~a1fa@user/a1fa) ()
[00:35:15] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[00:35:41] <c4017w__> exarkun, I mean, that's literally what you suggested when I asked for a better solution
[00:35:57] <toma> deno: phew. I was worried you were going to say vim
[00:35:59] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57) (Quit: Client closed)
[00:36:17] <CodeMouse92> deno: Emacs or vim is worth learning at some point, but yeah, probably not out of the gate if you're just learning coding too
[00:36:24] <CodeMouse92> The brain only has so much working memory ;)
[00:36:49] <CodeMouse92> worth learning/worth trying (they don't work for everyone)
[00:36:59] <exarkun> What should I make of this pip conflict message?  https://gist.github.com/exarkun/e846852202e0d244dd81a6c8135a7708
[00:37:13] <deno> CodeMouse92, that's right. I thinks it's more worthy of toma's time to get writing quickly and getting a feel for the zen
[00:37:19] <exarkun> c4017w__: You added the "waste a bunch of time" and "useless boilerplate" parts.
[00:37:39] *** Joins: humberto1 (~humbertow@187.202.214.175)
[00:38:13] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[00:38:44] <parv> Nevermins, a PR already exists: https://github.com/sdispater/pendulum/issues/581
[00:39:35] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[00:39:41] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[00:39:56] *** Quits: kmh (~kmh@2a00:6020:5004:6800:a21f:ef4a:1372:da5b) (Quit: Leaving)
[00:40:02] <deno> exarkun, you could unpin attrs in your requirements file and then re-pin it if pip manages to solve the dependency
[00:40:37] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[00:40:52] *** Joins: remote (~self@user/hackers)
[00:41:05] <exarkun> deno: I haven't pinned it in my requirements at all.  Two of my dependencies have pinned it (not really pinned, just provided lower bounds).
[00:42:02] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:42:11] *** Joins: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net)
[00:42:11] *** Quits: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net) (Changing host)
[00:42:11] *** Joins: hams (~hams@user/hams)
[00:42:57] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[00:43:16] *** Joins: sgn (~sgn@user/sgn)
[00:44:31] <deno> exarkun have you tried pinning the more recent version of attrs manually in your requirements file? It's possible that the one that requires an older version will still work if the changes are backwards compatible
[00:44:47] *** Joins: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[00:45:23] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[00:45:30] <toma> whois deno
[00:46:05] <exarkun> deno: None of them require an older one.  One requires >=16.3 and the other requires >=20.3.
[00:46:32] <exarkun> deno: Yea, I can try pinning ==21.4 in my requirements but if pip needs that it seems like a resolver bug.
[00:47:32] <deno> exarkun, Try pinning it and see if your application is ok with it. Pip is just trying to respect the packages requirements and the hierarchy.
[00:48:29] <deno> Sometimes one must read the release log (https://github.com/python-attrs/attrs/releases) to see if there are breaking changes. Semver can be trusted too.
[00:48:34] <exarkun> It sounds like you're saying there is a requirement that pip can't respect with the current requirements declarations.  But that's not true so maybe you're saying something else?
[00:49:03] <deno> I may have misunderstood, I'll check your gist again
[00:51:04] <deno> My mistake, exarkun. I see now that they are both >= (I had assumed one was <=). That is perplexing. It must be the extra twisted arg?
[00:51:26] *** Quits: cryptomonad (~cryptomon@194.191.225.149) (Remote host closed the connection)
[00:51:29] *** Quits: blcyber (~blcyber@216.74.235.178) (Ping timeout: 256 seconds)
[00:52:37] *** Quits: ckdCreations (~ckdCreati@2607:fb91:1501:48b3:41c6:86c0:693:b8e4) (Ping timeout: 240 seconds)
[00:53:22] *** Joins: ckdCreations (~ckdCreati@2607:fb91:1588:4478:d1d4:69dc:a195:2bc0)
[00:54:37] *** Joins: abir (~abir@103.161.104.9)
[00:54:38] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[00:55:14] *** Parts: abir (~abir@103.161.104.9) ()
[00:55:37] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[00:55:44] *** Quits: darksun (~darksun@user/darksun) (Quit: puff)
[00:56:06] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[00:56:48] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[00:57:37] <RingtailedFox> hrmm.. everything's fine if i run eric and idle as admin...not sure i like that though
[00:58:26] *** Quits: RingtailedFox (~BoingBoin@2001:1970:5d2a:c500:9840:2dc8:2400:9f44) (Quit: Leaving)
[00:58:30] <grym> RingtailedFox: you shouldn't. (also idle's ... not great)
[00:58:43] *** Quits: llh (~llh@user/llh) (Ping timeout: 256 seconds)
[01:00:10] *** Joins: georgios (~georgios@user/georgios)
[01:00:39] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:01:17] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[01:02:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[01:03:25] *** Joins: blcyber (~blcyber@216.74.235.178)
[01:03:37] *** Quits: ckdCreations (~ckdCreati@2607:fb91:1588:4478:d1d4:69dc:a195:2bc0) (Ping timeout: 240 seconds)
[01:04:30] *** Quits: codificat (~pep@126.red-79-158-54.dynamicip.rima-tde.net) (Quit: leaving)
[01:06:44] *** Quits: Jong (~Jong@2620:10d:c090:400::5:f0a6) (Read error: Connection reset by peer)
[01:07:55] *** Quits: Helle (~helle@45.83.235.185) (Ping timeout: 256 seconds)
[01:08:33] <lericson> idle still exists?
[01:09:02] *** Joins: kmh (~kmh@2a00:6020:5004:6800:7006:6164:19d3:d0e4)
[01:09:11] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:10:06] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:10:43] *** Joins: LMBishop (~LMBishop@195.213.147.239)
[01:11:39] *** Praise- is now known as Prase
[01:11:41] *** Prase is now known as Praise
[01:11:44] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[01:12:01] *** Joins: sgn (~sgn@user/sgn)
[01:12:27] *** Joins: tristan_ (~tristan@223.38.21.9)
[01:13:26] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:14:12] <SnoopJ> yes
[01:14:37] *** Joins: tup (~tup@cpc84029-pool15-2-0-cust183.15-1.cable.virginm.net)
[01:15:02] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:16:37] *** Quits: tristan_ (~tristan@223.38.21.9) (Ping timeout: 240 seconds)
[01:16:46] <novns> idle exists but it stays idle
[01:17:06] *** Joins: miique (~miique@181.46.139.166)
[01:17:40] *** Joins: ketiv (~ketiv@92.40.194.151.threembb.co.uk)
[01:19:06] *** Joins: qlixed (~qlixed@181.44.129.13)
[01:19:29] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (Quit: brb)
[01:19:50] *** Quits: LMBishop (~LMBishop@195.213.147.239) (Quit: Quit)
[01:21:00] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:21:04] *** Joins: nomic (~nomic@85.203.36.80)
[01:21:04] *** Quits: nomic (~nomic@85.203.36.80) (Client Quit)
[01:21:08] *** Joins: greedom (~greedom@p200300de6709ad00165a33875307fc9e.dip0.t-ipconnect.de)
[01:21:26] *** Joins: tristan_ (~tristan@223.38.21.9)
[01:21:36] *** Quits: Macuser (~Macuser@2601:5c4:4302:2c70:a5ad:98f8:262f:e6f8) (Quit: Textual IRC Client: www.textualapp.com)
[01:21:52] *** Quits: Y4kuzi (~provision@85.159.233.183) (Quit: Ping timeout (120 seconds))
[01:22:06] *** Joins: Y4kuzi (~provision@85.159.233.183)
[01:22:12] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:22:13] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 240 seconds)
[01:22:34] *** Quits: magla (~gelignite@55d4ca9b.access.ecotel.net) (Quit: Stay safe!)
[01:23:14] *** Quits: greedom (~greedom@p200300de6709ad00165a33875307fc9e.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:23:39] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:24:03] *** Joins: greedom (~greedom@p200300de6709ad00165a33875307fc9e.dip0.t-ipconnect.de)
[01:24:34] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:25:21] *** Quits: deno (~textual@142.126.184.79) (Ping timeout: 256 seconds)
[01:25:58] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[01:26:03] *** Quits: tristan_ (~tristan@223.38.21.9) (Ping timeout: 256 seconds)
[01:26:16] *** Joins: sgn (~sgn@user/sgn)
[01:27:38] *** Joins: nomic (~nomic@85.203.36.80)
[01:29:02] *** Joins: cul8r (~cul8r@76.113.95.199)
[01:29:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[01:29:14] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:30:02] *** Joins: Klinda (~superleag@user/klinda)
[01:30:12] *** Quits: rapier (~rapier@user/rapier) (Read error: Connection reset by peer)
[01:32:01] *** Joins: tristan_ (~tristan@223.38.21.9)
[01:32:57] *** Quits: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 240 seconds)
[01:33:38] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[01:33:45] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[01:33:50] *** Joins: sgn (~sgn@user/sgn)
[01:33:51] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:34:20] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Max SendQ exceeded)
[01:34:48] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[01:35:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:35:37] *** Quits: hams (~hams@user/hams) (Ping timeout: 240 seconds)
[01:36:12] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[01:36:36] *** Joins: sgn (~sgn@user/sgn)
[01:36:42] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:ed95:1e08:605e:cff2)
[01:36:58] *** Joins: onichomp (~onichomp@2806:264:4404:80f2:2c6b:f029:9dba:35ae)
[01:37:23] *** Quits: tristan_ (~tristan@223.38.21.9) (Ping timeout: 256 seconds)
[01:37:44] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f7:d273:883d:3126:912a:688)
[01:38:23] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[01:39:06] *** Quits: humberto1 (~humbertow@187.202.214.175) (Read error: Connection reset by peer)
[01:39:40] *** Joins: humberto1 (~humbertow@187.202.214.175)
[01:40:18] *** Quits: jpaa (~jpaa@vmi762709.contaboserver.net) (Remote host closed the connection)
[01:41:17] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:ed95:1e08:605e:cff2) (Ping timeout: 252 seconds)
[01:41:35] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:41:35] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Excess Flood)
[01:42:11] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:42:43] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:43:02] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[01:44:46] *** Joins: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[01:44:48] *** Quits: mtk_ (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Read error: Connection reset by peer)
[01:45:09] *** Joins: ice9 (~ice9@user/ice9)
[01:48:53] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[01:49:13] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[01:51:15] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b40a:dda7:ddbf:7843)
[01:51:32] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[01:54:55] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:55:07] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[01:55:35] *** birb is now known as erica
[01:55:57] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[01:57:38] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[01:58:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[01:58:17] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[01:58:45] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[01:59:14] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[01:59:20] *** Joins: Guest138 (~Guest138@88.103.7.38)
[02:00:30] *** Joins: fikran (~fikran@user/fikran)
[02:00:41] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[02:01:57] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4582-2b8f-5a63-0567.res6.spectrum.com) (Read error: Connection reset by peer)
[02:04:45] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Read error: Connection reset by peer)
[02:04:45] *** Quits: Amadiro (~Amadiro@84.209.11.12) (Remote host closed the connection)
[02:04:46] *** Quits: grundrausch3n (~grundraus@p200300e9ef0ab500bc39f9cc14bd70ee.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:04:46] *** Joins: jringstad__ (~Amadiro@84.209.11.12)
[02:04:46] *** Quits: justIrresolute5 (~justache@user/justache) (Quit: Ping timeout (120 seconds))
[02:04:46] *** Quits: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com) (Ping timeout: 240 seconds)
[02:04:46] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:04:50] *** Joins: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com)
[02:04:57] *** Joins: oda (~oda@gateway/vpn/pia/oda)
[02:04:57] *** Joins: sgn_ (~sgn@user/sgn)
[02:05:08] *** Joins: OPK (~OPK@user/opk)
[02:05:13] *** Joins: vit (~vit@chello085216193138.chello.sk)
[02:05:26] *** Quits: pankid (~quassel@pankid.club) (Quit: No Ping reply in 180 seconds.)
[02:05:54] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:06:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[02:06:12] *** vit is now known as Guest3367
[02:06:18] *** Quits: roe (~roe@216.164.247.250) (Remote host closed the connection)
[02:06:27] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:06:44] *** Joins: pankid (~quassel@pankid.club)
[02:07:31] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[02:07:50] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f7:d273:883d:3126:912a:688) (Quit: Leaving)
[02:08:42] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[02:09:04] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:09:25] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:09:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:09:58] *** Joins: c4017w (~c4017@209.52.68.8)
[02:10:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:10:58] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[02:11:03] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:12:27] <ede> Congrats, python: https://www.tiobe.com/tiobe-index/
[02:12:54] *** Joins: bzl (~identme@bzl.si)
[02:13:28] *** Joins: Vonter (~Vonter@user/vonter)
[02:13:31] *** Parts: sfields (~sfields@2605:a601:adea:7a00:e4a8:6d46:2de4:a302) (Leaving)
[02:13:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[02:14:00] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[02:14:21] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[02:14:35] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:15:01] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:31] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[02:15:44] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:15:48] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[02:16:37] *** Joins: digitalice_ (~digitalic@2800:a4:2964:8900:f4bf:6bd2:26e9:a01a)
[02:17:11] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:17:31] *** Joins: sgn (~sgn@user/sgn)
[02:17:33] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:17:58] *** Joins: netpipe (~netpipe@user/netpipe)
[02:19:18] <ChrisWarrick> (the tiobe index is irrelevant and does not reflect anything real-life in any way)
[02:19:37] *** Quits: digitalice__ (~digitalic@2800:a4:28a3:a500:9132:41b1:d2c2:1690) (Ping timeout: 240 seconds)
[02:20:51] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:22:19] *** Joins: mike18 (~geri@216.200.232.252)
[02:24:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:24:24] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[02:24:40] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[02:24:44] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:25:01] *** Joins: Xano (~Xano@2a00:23c4:4204:700:aab5:8a4e:e215:356e)
[02:25:03] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:25:10] *** Joins: Oco[A]de (~OCode@user/Ocode)
[02:27:16] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[02:27:49] *** Quits: OCode (~OCode@user/Ocode) (Ping timeout: 240 seconds)
[02:28:17] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:28:19] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[02:28:27] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:28:36] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[02:28:43] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[02:28:47] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[02:28:53] *** Joins: sgn (~sgn@user/sgn)
[02:29:36] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[02:30:07] *** Joins: robert_ (~hellspawn@47.203.169.95)
[02:30:45] *** Quits: blcyber (~blcyber@216.74.235.178) (Read error: Connection reset by peer)
[02:32:28] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[02:32:41] <Xano> I've got a method decorator (of my own, so I can change it whichever way I want) that I've been trying to make pickleable. The decorator and everything it does or sets on the decorated method are all top-level classes and functions. No locals. Yet I get the dreaded "it's not the same object" about the decorated instance method when pickling the entire instance. What is it that makes pickle believe this is the case?
[02:32:48] *** Joins: Terexen (~terexen@user/terexen)
[02:32:57] *** Quits: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 240 seconds)
[02:33:24] <ChrisWarrick> Xano: pickling of functions/methods is generally not possible
[02:33:34] <nedbat> Xano: can you shared the code and the error?
[02:34:02] <Xano> ChrisWarrick, Yet pickling even a decorated class with a non-decorated instance method appears to work
[02:34:03] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:34:14] <Xano> nedbat, Ah, was hoping it would be more obvious. I'll reduce this to a test case.
[02:34:33] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:34:56] <ChrisWarrick> Xano: pickling a method pickles a reference to it (its name, basically)
[02:35:17] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[02:36:09] *** Joins: mud (~mud@user/kadoban)
[02:36:31] <nedbat> Xano: tbh, i'm not familiar with "not the same object" as a pickle error
[02:39:12] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:39:16] *** Quits: bzl (~identme@bzl.si) (Quit: ZNC 1.8.2 - https://znc.in)
[02:39:31] *** Joins: bzl (~identme@bzl.si)
[02:39:53] *** Quits: oriba (~oriba@dynamic-077-011-158-103.77.11.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:40:09] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[02:40:10] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[02:40:11] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:40:32] *** Joins: Pixi__ (~Pixi@user/pixi)
[02:41:38] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[02:42:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:43:18] <Xano> ChrisWarrick, Aaaaaah, the instance method's module and name are different. Thanks for the nudge in the right direction!
[02:43:25] *** Quits: Pixi_ (~Pixi@user/pixi) (Ping timeout: 240 seconds)
[02:43:41] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:43:49] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[02:44:03] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:44:33] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[02:44:37] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:45:24] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:45:46] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[02:45:59] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[02:46:57] *** Joins: justIrresolute (~justache@user/justache)
[02:47:09] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:47:33] *** Joins: sgn (~sgn@user/sgn)
[02:47:56] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[02:49:21] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:49:25] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:50:04] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:50:55] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[02:51:52] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:52:16] *** Joins: sgn (~sgn@user/sgn)
[02:53:01] *** Quits: tup (~tup@cpc84029-pool15-2-0-cust183.15-1.cable.virginm.net) (Quit: Leaving)
[02:53:46] *** Quits: DaNeenjah (~jake@adsl-74-230-4-35.hsv.bellsouth.net) (Quit: WeeChat 3.4)
[02:56:26] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[02:57:24] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:57:46] *** Joins: sgn (~sgn@user/sgn)
[02:59:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:00:42] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:01:49] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:03:31] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:05:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:05:40] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[03:06:00] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[03:06:40] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[03:07:03] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[03:07:04] *** Joins: sgn (~sgn@user/sgn)
[03:07:35] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:10:15] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com)
[03:10:16] <drew> I am trying to use https://docs.python.org/3/library/xmlrpc.client.html#module-xmlrpc.client but it looks like it's not build in and there's nothing on pypi called xmlrpc
[03:10:17] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 240 seconds)
[03:10:23] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 252 seconds)
[03:10:25] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[03:10:32] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 240 seconds)
[03:10:34] <drew> I see a package called xmlrpc2, but when I installed that, the include xmlrpc.client line fails
[03:10:57] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[03:11:03] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[03:11:12] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[03:11:23] *** Quits: marcello42 (~mp@2001:1a81:12be:e200:d599:14bd:bbbe:8542) (Quit: WeeChat 3.4)
[03:11:36] *** Quits: Linux77 (~LinuMage@186.233.182.173) (Read error: Connection reset by peer)
[03:12:03] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:12:30] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[03:12:36] <TML> drew: uh - yes, it is built-in to cpython: https://github.com/python/cpython/tree/3.10/Lib/xmlrpc
[03:13:11] <TML> drew: did you install python from a distro vendor who may have split the packaging up?
[03:13:19] <TML> that happens sometimes
[03:13:50] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[03:14:06] *** Joins: ElPresidente (~ElPreside@172-125-150-28.lightspeed.tukrga.sbcglobal.net)
[03:14:13] <drew> I am using arch and I don't see anything like that: https://archlinux.org/packages/?sort=&q=xmlrpc&maintainer=&flagged=https://archlinux.org/packages/?sort=&q=xmlrpc&maintainer=&flagged=
[03:16:09] <ChrisWarrick> I can see xmlrpc in the file list for https://archlinux.org/packages/core/x86_64/python/
[03:16:29] <bookworm> works also when you test it, as you'd expect
[03:16:37] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 240 seconds)
[03:17:30] <TML> I don't know anything about arch, can't really be much help there
[03:17:38] <mefistofeles> drew: what fails exactly?
[03:18:17] <drew> mefistofeles: http://0x0.st/ozpW.txt
[03:19:03] <bookworm> this is not a OS installed python: /home/drew/xmlrpc/xmlrpc.py
[03:19:09] <phy1729> If I want to test if a class has overridden a method, is   child_class.foo.__code__ is parent_class.foo.__code__   the right thing to do?
[03:19:10] <bookworm> or well, module
[03:19:11] *** Quits: ElPresidente (~ElPreside@172-125-150-28.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[03:19:23] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[03:19:27] *** Joins: Linux77 (~LinuMage@186.233.182.173)
[03:19:36] <drew> ah! I named my file xmlrpc.py
[03:19:41] <TML> drew: your local name conflicts witht the built-in
[03:19:42] *** Joins: jazzy (~jaziz@user/jaziz)
[03:19:42] <bookworm> you are shadowing the original xmplrpc with your own thing
[03:19:57] *** Joins: skraito (~skraito@user/skraito)
[03:20:05] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[03:20:08] <nedbat> phy1729: that might work, though i'm curious what the test is for?
[03:20:12] <drew> ok renaming it worked. thank you all
[03:20:22] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:20:27] <phy1729> nedbat: do you want the full context?
[03:20:30] *** Quits: dbristow (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[03:20:31] <nedbat> phy1729: sure :)
[03:20:35] *** Joins: mickey8 (~user@user/mickey)
[03:21:06] *** Joins: humberto1 (~humbertow@187.202.214.175)
[03:21:29] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Quit: Leaving)
[03:21:30] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:21:38] <phy1729> I don't like how click does shell completion for zsh, so I'm working on https://github.com/phy1729/click_completion_zsh  and want to tell zsh to complete for a type iff that type has an overridden ParamType.shell_complete method.
[03:21:56] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[03:22:40] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[03:23:10] *** Quits: cul8r (~cul8r@76.113.95.199) (Quit: Leaving)
[03:23:24] *** Joins: holgersson (~quassel@user/holgersson)
[03:23:42] <ChrisWarrick> phy1729: I think it would be easier to base your checks on the return value of this method or some other method
[03:23:59] <phy1729> I can't call the method at the time I need to check
[03:24:09] *** Joins: jazzy2 (~jaziz@user/jaziz)
[03:24:47] <ChrisWarrick> that feels like too much magic to me, I’d add a method that returns a boolean
[03:25:07] <phy1729> it's not my API though
[03:26:37] *** Quits: rakoon_ (~rakoon@2001:985:f4c6:1:1d44:f1c6:3042:71fa) (Ping timeout: 240 seconds)
[03:27:37] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[03:27:53] *** Quits: Guest3367 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[03:29:09] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[03:29:24] *** Joins: sgn (~sgn@user/sgn)
[03:29:50] *** Quits: oda (~oda@gateway/vpn/pia/oda) (Quit: Leaving...)
[03:30:07] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Remote host closed the connection)
[03:30:07] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[03:30:56] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[03:31:03] *** Joins: Atque (~Atque@user/atque)
[03:32:10] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[03:32:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[03:32:48] *** Quits: leonardo (~leonardo@user/leonardo) (Remote host closed the connection)
[03:32:53] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:32:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:33:19] *** Joins: leonardo (~leonardo@user/leonardo)
[03:34:34] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[03:34:42] *** Quits: greedom (~greedom@p200300de6709ad00165a33875307fc9e.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:34:44] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:35:13] *** Joins: thorbw (~tw@46.230.130.50)
[03:35:36] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[03:37:57] *** Quits: inomoz (~inomoz@176.59.115.63) (Ping timeout: 256 seconds)
[03:39:02] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[03:39:14] *** Joins: sgn (~sgn@user/sgn)
[03:39:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7c88-b6a2-dd37-d9b7.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:39:36] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[03:40:02] <toma> Thanks everyone for the encouragement today.
[03:40:28] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl489q6vou4v2tptr.ipv6.telus.net) (Remote host closed the connection)
[03:44:21] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[03:45:30] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[03:48:17] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:3864:4c78:19ac:4528)
[03:49:15] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[03:49:49] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Client Quit)
[03:52:54] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:54:37] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[03:55:23] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:55:57] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[03:56:11] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[03:56:20] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:56:20] *** Joins: sgn (~sgn@user/sgn)
[03:56:41] *** Quits: MikZyth (~MikZyth@host-192-156-66-217.spbmts.ru) (Quit: WeeChat 3.4)
[03:58:34] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:59:18] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[03:59:33] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:59:34] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:00:14] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[04:01:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:01:40] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[04:01:41] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[04:02:08] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:04:09] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:04:35] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:05:03] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:06:22] *** Joins: Wulf (~Wulf@user/wulf)
[04:06:23] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:f0a4:dbf:ce53:8dac)
[04:06:42] *** Joins: cheater (~Username@user/cheater)
[04:07:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[04:08:06] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:08:55] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[04:09:06] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[04:09:15] *** Quits: thorbw (~tw@46.230.130.50) (Ping timeout: 256 seconds)
[04:09:36] <nedbat> isn't it weird that str(b'x') is "b'x'", but str(b'x', encoding="ascii") is "x"  ?
[04:09:51] *** Joins: fikran (~fikran@user/fikran)
[04:10:11] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[04:10:43] *** Joins: Cyp (~cyp@213.237.85.9)
[04:11:33] *** Joins: iflema (~ian@user/iflema)
[04:11:41] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Quit: junktext)
[04:13:02] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[04:13:31] *** Quits: Betal (~Betal@user/betal) (Remote host closed the connection)
[04:13:39] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:13:47] *** Joins: Betal (~Betal@user/betal)
[04:14:13] *** Quits: ColdKeyb- (~ColdKeybo@user/coldkeyboard) (Ping timeout: 256 seconds)
[04:14:20] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[04:14:21] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[04:15:55] *** Quits: grimvar (~grimvar@i5C75F5F4.versanet.de) (Ping timeout: 256 seconds)
[04:17:45] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[04:18:03] *** Joins: grimvar (~grimvar@i5C75F5CD.versanet.de)
[04:18:12] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[04:18:14] *** Joins: cheater (~Username@user/cheater)
[04:20:04] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:20:07] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[04:20:52] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[04:21:10] *** Joins: sgn (~sgn@user/sgn)
[04:21:36] *** Quits: Gamah (~quassel@gamah.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:22:12] *** Joins: Gamah (~quassel@gamah.net)
[04:23:16] <BrenBarn> it is a bit weird
[04:23:46] <BrenBarn> I guess it's just that `str` has two only tenuously related "modes", one of which is basically a shortcut for `bytes.decode`
[04:26:21] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[04:26:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:26:48] *** Joins: sgn (~sgn@user/sgn)
[04:29:17] *** Joins: sertsa (~sertsa@209.140.9.178)
[04:29:21] <nedbat> BrenBarn: yeah, it's not great
[04:29:40] *** Quits: sertsa (~sertsa@209.140.9.178) (Remote host closed the connection)
[04:29:56] <BrenBarn> I don't really get why they decided to do that
[04:30:26] <Yhg1s> Because unicode(x, encoding=...) seemed to make sense back in 1999, and str() in Python 3 is unicode() from Python 2.
[04:30:30] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[04:31:20] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[04:31:33] <BrenBarn> yeah but they could have just changed it with Py3
[04:31:58] <Yhg1s> It would've made porting code *even harder*.
[04:32:21] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b40a:dda7:ddbf:7843) (Ping timeout: 256 seconds)
[04:33:04] *** Quits: lyr (~lyr@user/lyr) (Read error: Connection reset by peer)
[04:33:19] <BrenBarn> too bad :-)
[04:33:53] <SnoopJ> Unicode? So futuristic :)
[04:34:32] *** Joins: georgios (~georgios@user/georgios)
[04:35:17] *** Quits: Xano (~Xano@2a00:23c4:4204:700:aab5:8a4e:e215:356e) (Ping timeout: 240 seconds)
[04:35:45] *** Quits: netpipe (~netpipe@user/netpipe) (Ping timeout: 256 seconds)
[04:36:27] <SnoopJ> nedbat, it's a weird implicit mode-switch
[04:36:56] <Yhg1s> SnoopJ: well, you say that, but in 2008 or so I was heckled by Rasmus Lerdorf and Anne van Kesteren (who worked on HTML5) because Python used more than 16 bits per unicode character :P
[04:37:05] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[04:37:08] *** Quits: ketiv (~ketiv@92.40.194.151.threembb.co.uk) (Quit: Leaving)
[04:37:33] *** Joins: Cyp (~cyp@213.237.85.9)
[04:38:07] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:38:28] <SnoopJ> "the BMP should be enough for anyone" ?
[04:38:50] <Yhg1s> Very much so, yes. I wonder what they feel about that now 🤔
[04:39:18] <Yhg1s> I *think* their response was something like "it's just stuff like Klingon, nobody cares about that"
[04:39:36] <Yhg1s> but they might have used a different niche character set at the time.
[04:39:44] <SnoopJ> Surely "thou shalt use this orthography" failing so consistently over history has only been a problem of scale 😅
[04:39:45] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[04:40:00] *** Joins: sgn (~sgn@user/sgn)
[04:40:45] <phy1729> f strings can't include a backslash? argg
[04:41:01] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[04:41:06] <SnoopJ> Yhg1s, so, I ended up releasing the GIL after calling Py_Initialize(), but I'm not entirely sure I understand. The caller of Py_Initialize() holds the GIL implicitly and if they want to thread, they need to remember to release it, do I have that right?
[04:41:18] *** Joins: llh (~llh@user/llh)
[04:41:33] <tdsmith> phy1729: f"\\" prints fine if you just want a literal backslash
[04:41:36] <Yhg1s> phy1729: not in the braced parts, no.
[04:41:53] <phy1729> I need a backslash in the braces because I'm doing a re.sub
[04:42:00] <tdsmith> ah fun
[04:42:06] <BrenBarn> just do it outside the f-string
[04:42:11] <Yhg1s> SnoopJ: after Py_Initialize(), which can only be called once, the calling thread holds the GIL, yes.
[04:42:41] <Yhg1s> SnoopJ: if you want to release it, just remember to reacquire it before calling ~anything from the Python C API.
[04:43:03] <Yhg1s> (PyGILState_Ensure/Release is a convenient API for this, as it's paired and it doesn't care if you already hold the GIL or not.)
[04:43:04] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[04:43:33] <Yhg1s> I mean, it does care, it just does the correct thing in both cases.
[04:43:40] <SnoopJ> Great, I wasn't sure if it was a surefire thing, but the more I thought about it, the more that made sense as an Obvious Choice
[04:43:52] *** Joins: Cyp (~cyp@213.237.85.9)
[04:44:53] <SnoopJ> I should probably use PyGILState_Release() along with the thingy that gives the current thread state instead of what I ended up doing: PyEval_SaveThread() and who cares about the return value
[04:45:05] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:45:25] <SnoopJ> (I did at least guard it with PyGILState_Check(), but it's still a hack job)
[04:45:47] <Yhg1s> no, PyGILState_Release() requires you use PyGILState_Acquire first. It's only for making sure you *hold* the GIL, not for just releasing it.
[04:46:30] <SnoopJ> oh you were talking about re-acquisition at site of use
[04:46:39] <Yhg1s> Yes.
[04:46:53] <SnoopJ> is PyEval_SaveThread() the right tool for the job here, then?
[04:46:59] <Yhg1s> If you just want to release the GIL, the confusingly-named PyEval_SaveThread() is usually the right thing to use.
[04:47:20] <SnoopJ> confusing enough that I thought I did a kludge, but actually fumbled my way onto the right thing, then
[04:47:29] *** Joins: ketiv (~ketiv@92.40.194.147.threembb.co.uk)
[04:48:01] <SnoopJ> Yhg1s, why do you say Py_Initialize() can be called only once? It's a no-op after the first call, isn't it?
[04:48:13] <SnoopJ> (unless you've finalized)
[04:49:00] <Yhg1s> SnoopJ: it is, but then it doesn't acquire the GIL for you, so then you can't rely on holding the GIL.
[04:49:20] <Yhg1s> so in practice, not a good idea.
[04:50:15] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:50:21] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:50:42] <SnoopJ> Hard to avoid in the case where we have more than one Python plugin running (libpython is in the plugin shared lib)
[04:50:44] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[04:50:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:50:52] *** Quits: debayer (~debayer@cpe-76-169-99-230.socal.res.rr.com) (Read error: Connection reset by peer)
[04:51:36] <Yhg1s> You load two separate .so's that link libpython *into the plugin*?
[04:51:38] <SnoopJ> This is just a prototype, though, I would want to take a quality pass at it if we had a specific customer integration in mind.
[04:51:57] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[04:52:10] <SnoopJ> Yhg1s, I wasn't gonna get buy-in to just link it into the software it's plugging into, but I did mention it :P
[04:52:47] <Yhg1s> SnoopJ: ok, let me rephrase... Are you building .so's that statically link Python, and thus loading Python multiple times into the same process?
[04:52:54] <SnoopJ> Yes
[04:53:08] <SnoopJ> Are those 'isolated' from each other or do I need to worry about crosstalk?
[04:53:12] <Yhg1s> That's a _really_ bad idea. Shared stuff is going to get trampled on so badly.
[04:55:08] <SnoopJ> yea :(
[04:55:08] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[04:55:08] <Yhg1s> Depending on how you load them, they are not isolated from each other, or they are imperfectly isolated from each other. I would not trust it.
[04:55:26] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[04:56:07] *** Joins: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de)
[04:56:49] *** Joins: Capso (~Capso@wopr.sciops.net)
[04:57:43] <SnoopJ> this is missing enough load-bearing code that it wouldn't be super useful in its current state anyway
[04:57:44] <Yhg1s> Even if you load the .so's with RTLD_NOW|RTLD_LOCAL, I would be very worried about cross talk. My main worry would be *other* .so's loaded by Python, or other .so's or the main program using Python C API things (like providing objects), as well as TLS data leaking between the interpreters.
[04:57:44] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[04:57:44] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[04:57:44] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[04:57:44] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[04:57:44] *** Quits: luva (~luva@37.120.197.53) (Quit: Ping timeout (120 seconds))
[04:57:44] *** Quits: xcm (~xcm@user/xcm) (Read error: Connection reset by peer)
[04:57:44] <SnoopJ> Is there any good alternative if I 1) must absolutely not burden the remote user with having libpython available 2) need the plugins to be hot-swappable 3) can't touch the hardpoint in our core software?
[04:57:44] <Yhg1s> SnoopJ: just so you know, I _am_ going to mention your description here at the next SC meeting, just to see Pablo's face as he realises the implications.
[04:57:54] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[04:57:54] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:58:04] <Yhg1s> SnoopJ: making libpython another shared library alongside the plugins would be a start. You need the stdlib and what not available anyway.
[04:58:05] <SnoopJ> Do I get an IRC Achievement for "security horror story"
[04:58:11] *** Joins: luva0 (~luva@37.120.197.53)
[04:58:13] <Capso> What's the idiomatic way to check only the first return value of a function that has multiple return values?
[04:58:27] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[04:58:30] <Yhg1s> SnoopJ: security isn't even a concern, it's just bonkers for other reasons :)
[04:58:37] *** Quits: nilson (~nilson@2601:c4:c430:334:4601:bbff:feaf:9214) (Ping timeout: 240 seconds)
[04:58:44] <Yhg1s> Capso: check the first, ignore the rest.
[04:58:51] <SnoopJ> well, I guess I had the right feeling about doing an overall hack job for my first time embedding
[04:58:52] <Capso> Yhg1s: what does that look like?
[04:58:55] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b40a:dda7:ddbf:7843)
[04:59:07] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:59:15] <Yhg1s> Capso: just like using them all, except you're not using the ones you don't want to use. Assign them to something and don't touch those variables afterwards.
[04:59:58] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:00:05] <Capso> Yhg1s: I was hoping `if multifun() != 4` would work, but it seems I have to do `out = multifun(); if out[0] != 4` or so
[05:00:14] <Capso> alright
[05:00:16] <Repiphany> `first = f()[0]`
[05:00:22] <SnoopJ> Yhg1s, is it relatively easy to deploy that "side-car" libpython on Linux? I know it's something I can do on Windows, but (weirdly) I'm a lot less confident in my knowledge of library resolution on Linux.
[05:00:38] <Capso> Repiphany: and `if f()[0] != 4` ?
[05:00:55] <Yhg1s> Capso: you don't *have* to, but you asked for 'idiomatic'. I recommend assigning all the values so you aren't ignoring how many items are returned.
[05:00:58] <SnoopJ> (we absolutely cannot burden the end-user with having libpython available in their environment, if that wasn't clear from my frankenstein's monster)
[05:01:17] <Repiphany> Sure, if you're not using the result of the function in any other way
[05:01:17] <Yhg1s> SnoopJ: sure, you can just put it in the same directory, or you could put it anywhere you like and load it before loading the plugins.
[05:01:26] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[05:01:41] <SnoopJ> Yhg1s, I would love to have support for this upstream, but to say that the plugin system is a little janky is understating it
[05:01:50] <Capso> Yhg1s: yes, I cause I wanna look pro
[05:01:55] <Yhg1s> SnoopJ: which upstream do you mean?
[05:02:24] <SnoopJ> Yhg1s, this is a plugin system to my employer's codebase, but touching things in the "engine" is a real uphill battle if it has anything to do with Python, I've come to learn
[05:02:27] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[05:02:32] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[05:02:57] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:02:59] *** Joins: nilson (~nilson@98.242.70.3)
[05:03:34] <Yhg1s> SnoopJ: well, if you're embedding Python, you need a Python installation to embed. You can either use the platform's, if you know it's always (more or less) the same, or you can include it in your application. In either case, shared linking to the libpython.so that's part of the installation you're using is pretty simple.
[05:03:43] *** arjun is now known as ccldarjun
[05:03:56] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[05:04:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[05:04:31] <Yhg1s> (it gets a little more annoying to let ld.so find libpython.so if you want your application to be reloctable, but you can solve that by loading libpython.so from the right path with dlopen() instead.)
[05:04:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:06:55] *** Quits: ketiv (~ketiv@92.40.194.147.threembb.co.uk) (Ping timeout: 256 seconds)
[05:07:43] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.5-dev)
[05:07:52] <SnoopJ> I imagine I could get it linked into libAcmeProduct.so with some code dedicated to handling the lifecycle if it leads to more work in this vein
[05:07:57] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[05:08:21] *** Joins: sgn (~sgn@user/sgn)
[05:08:26] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6ebd:e967:bab2:d4bc:3c08) (Read error: Connection reset by peer)
[05:08:37] *** Joins: ketiv (~ketiv@92.40.202.220.threembb.co.uk)
[05:08:38] <Yhg1s> That's not terribly simple and I don't really understand why you would want to. You will still need the standard library as well, so it's easier to keep libpython.so separate, too.
[05:09:11] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[05:09:12] *** Joins: p-i- (~Ohmu@2403:6200:8978:b697:f055:7cf:11e1:f6f5)
[05:09:15] *** Joins: frost (~frost@user/frost)
[05:09:37] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:3864:4c78:19ac:4528) (Ping timeout: 240 seconds)
[05:09:43] <SnoopJ> Yhg1s, we have a strange allergy to shared libraries on Linux, it's...annoying. This is not my aesthetic preference speaking, this is "what I know my manager won't give me guff about because I *know* he's gonna have guff about the right way"
[05:10:23] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:11:32] *** Quits: Balzy (~Balzy@host-79-21-91-213.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[05:12:03] <Yhg1s> well, we have an aversion to shared libraries at work, too, but we aren't combining that with a plugins system that consists of shared libraries :)
[05:12:06] <SnoopJ> But we'll see, this is just proving the concept that a customer could write Python that is called by the main inference engine to 1) produce input images (e.g. transforming a video stream) 2) handle inference outputs (e.g. that was a bad widget, log it as such)
[05:12:21] *** Parts: Capso (~Capso@wopr.sciops.net) ()
[05:12:57] *** Quits: tscopp (~tms@c-76-115-26-235.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[05:12:57] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[05:13:11] *** Joins: sgn (~sgn@user/sgn)
[05:13:27] <SnoopJ> And since I've been tooling around on Linux with it, it still remains to be seen what it looks like on Windows where it seems like "it's in the same folder" is maybe a little more reliable, weirdly
[05:13:43] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[05:15:14] <SnoopJ> I appreciate the nudges in the right direction, both earlier and now, though :)
[05:15:30] <SnoopJ> it helps a lot to talk to someone who knows where all the bytecode is buried
[05:15:35] *** Quits: percyc (~percyc@183.236.188.154) (Remote host closed the connection)
[05:18:49] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[05:18:56] *** Quits: ccldarjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:18:59] *** Quits: onichomp (~onichomp@2806:264:4404:80f2:2c6b:f029:9dba:35ae) (Read error: Connection reset by peer)
[05:19:36] *** Joins: onichomp (~onichomp@2806:264:4404:80f2:2c6b:f029:9dba:35ae)
[05:19:42] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:20:30] *** Joins: enoch (~enochthec@115-188-142-89-vdsl.sparkbb.co.nz)
[05:20:30] *** Quits: enoch (~enochthec@115-188-142-89-vdsl.sparkbb.co.nz) (Changing host)
[05:20:30] *** Joins: enoch (~enochthec@user/enochthechronoco)
[05:20:42] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[05:21:26] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Quit: Leaving)
[05:22:09] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:22:36] *** Quits: enoch (~enochthec@user/enochthechronoco) (Remote host closed the connection)
[05:23:05] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[05:23:32] *** Quits: nomic (~nomic@85.203.36.80) (Quit: Leaving)
[05:25:28] *** Joins: Jigsy (~Jigsy@user/jigsy)
[05:26:12] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[05:26:24] *** Joins: sgn (~sgn@user/sgn)
[05:26:37] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[05:27:13] <SnoopJ> Yhg1s, oh, I have bonus horror for this hackjob: it's currently depending on PYTHONPATH
[05:27:21] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:31] <SnoopJ> (I know, initializing the path with the C-API is the right way to do it)
[05:29:34] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[05:30:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:30:18] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:19] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[05:30:43] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[05:30:54] *** lukedashjr is now known as luke-jr
[05:31:42] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:143d:89cd:5fce:1d0c)
[05:32:27] *** Joins: Ashubrry (~Ashubrry@184.69.89.188)
[05:32:38] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:32:54] <Ashubrry> Anyone know of an alternative to platformdirs it does not seem to work on Python 3.10?
[05:34:35] <grym> Ashubrry: appdirs
[05:36:19] <Ashubrry> https://justpaste.it/96554
[05:36:25] <Ashubrry> okay, thank you
[05:36:27] <grym> Ashubrry: but, platformdirs installed cleanly for me on 3.10.0
[05:36:47] <Ashubrry> maybe a diferennce between 3.10.1 ??
[05:36:59] <Ashubrry> wierd
[05:37:15] <grym> i can install that and test
[05:37:17] <grym> sec
[05:37:23] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:918d:ec07:abd8:801a) (Quit: Textual IRC Client: www.textualapp.com)
[05:38:25] <stewie925> hey guys
[05:39:07] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:39:26] <grym> Ashubrry: nope, works fine on 10.1 as well
[05:39:37] <stewie925> how do I get the regex  to get the number that follows the first dollar sign .e.g, "$74-$99 million" -> returning 74
[05:39:41] <SnoopJ> Ashubrry, what do the commands `pip3 -V` and `python3.10 -m pip -V` output? This could be happening if `pip3` and `python3.10` don't point at the same runtime.
[05:41:14] <InPhase> stewie925: '\$(\d+)'
[05:41:17] <SnoopJ> stewie925, if only digits follow the dollar sign (i.e. no separators or decimal marks), then r"\$\d+" will match a $ followed by 1 or more digits
[05:41:38] <SnoopJ> and InPhase's will let you pull out just the digits as the captured group in parens
[05:41:57] <stewie925> thank you gents
[05:42:26] <Ashubrry> (base) ashburry@thnkc-pc:~/Documents/trio-ircproxy$ pip3 -V
[05:42:26] <Ashubrry> pip 21.0.1 from /home/ashburry/anaconda3/lib/python3.8/site-packages/pip (python 3.8)
[05:42:26] <Ashubrry> (base) ashburry@thnkc-pc:~/Documents/trio-ircproxy$ pip 21.0.1 from /home/ashburry/anaconda3/lib/python3.8/site-packages/pip (python 3.8)
[05:42:39] <stewie925> for the same question - is there a way to pull "74 million" from "$74-$99 million"?
[05:43:03] <InPhase> stewie925: Specify the other options that it should match besides million.
[05:43:37] <InPhase> stewie925: '$74-$99 worth of fish'  Should this extract '74 worth'?
[05:44:32] <InPhase> stewie925: You need a full include/exclude specification for the problem domain for this to work out.
[05:44:42] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b40a:dda7:ddbf:7843) (Quit: Client closed)
[05:44:50] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:44:56] <InPhase> Or not.
[05:45:17] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b40a:dda7:ddbf:7843)
[05:46:00] <InPhase> stewie925: https://bpa.st/MAKQ
[05:46:04] <stewie925> In Phase, yes _0az3 extract '74 worth'
[05:46:15] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[05:46:26] <stewie925> yes @ extract '74 worth'
[05:47:26] <InPhase> stewie925: '\$(\d+).+?\s(\w+)'  This is one way.
[05:47:34] *** Joins: califax- (~califax@user/califx)
[05:47:48] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[05:48:10] <stewie925> thank you InPhase!
[05:48:12] <grym> Ashubrry: neither of those are python 3.10
[05:48:48] <InPhase> .+? means accept anything but the least that you can, \s means a white space character, \w+ means as many alphanumeric characters as you can.  Now try to make it fail on a case it should not succeed on.  If it does, you did not specify adequately.  :)
[05:49:15] <SnoopJ> Ashubrry, does `python3.10 -m pip install platformdirs` do what you expected?
[05:49:24] <InPhase> - and _ are part of \w too
[05:49:49] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 240 seconds)
[05:50:21] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:50:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[05:50:57] *** brabrax_ is now known as brabrax
[05:51:05] <stewie925> InPhase - appreciate it
[05:51:45] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:51:46] *** califax- is now known as califax
[05:53:35] <stewie925> InPhase, so would `\s? ` mean 0 or 1 space?
[05:54:14] <stewie925> or I guess 0 or "more" spaces, not just one
[05:54:42] *** Joins: luva00 (~luva@146.70.62.253)
[05:54:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:55:39] *** Joins: dbristow (~dbristow@user/dbristow)
[05:56:08] <SnoopJ> `\s? ` should probably just be `\s+`
[05:56:55] <SnoopJ> unless you really really really want it to be that space and not any other
[05:56:55] *** Quits: luva0 (~luva@37.120.197.53) (Ping timeout: 256 seconds)
[05:56:56] *** luva00 is now known as luva0
[05:58:12] *** Joins: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[05:59:11] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[05:59:42] *** Quits: nepeat (~nepeat@79.110.170.60) (Read error: Connection reset by peer)
[05:59:45] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 256 seconds)
[06:00:23] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:01:04] *** Joins: Grace (uid33812@id-33812.lymington.irccloud.com)
[06:01:27] *** Quits: luva0 (~luva@146.70.62.253) (Ping timeout: 256 seconds)
[06:01:54] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[06:02:20] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[06:02:31] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[06:02:56] *** Joins: nepeat (~nepeat@79.110.170.60)
[06:03:13] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:8160:1a7f:4d49:1ed7)
[06:03:31] *** Joins: qpdb (~qpdb@user/qpdb)
[06:03:34] *** Joins: luva0 (~luva@45.141.152.45)
[06:04:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:08:18] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:08:41] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:09:14] <Grace> o/
[06:09:45] <Grace> Are there best practices for using dataclasses in such a way that inheritance works nicely?
[06:09:45] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[06:09:54] <Grace> (or something widely used/well supported that does the same thing)
[06:10:02] <Grace> mostly I'm looking for the automated serialization/deserialization capability
[06:11:29] *** Quits: onichomp (~onichomp@2806:264:4404:80f2:2c6b:f029:9dba:35ae) (Read error: Connection reset by peer)
[06:12:01] <grym> Grace: pydantic
[06:12:14] <grym> or dataclasses + desert
[06:12:15] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[06:12:25] <grym> but the former has a nicer story for getting to json quick
[06:12:33] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:13:12] <Grace> thanks! will look at pydantic
[06:13:16] <SnoopJ> there's also attrs if you like the approach dataclasses has, but feel like it's missing some stuff.
[06:13:19] <Grace> is there a nice deserialization ability?
[06:13:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:13:33] <grym> Grace: MyPydanticClass.parse_obj(some_json)
[06:13:46] <Grace> ah so you still need the class name
[06:13:47] <grym> with optional validation, etc, along the way if you want
[06:13:53] <grym> you don't _need_ it
[06:14:04] <Grace> right now I'm just storing __repr__() and doing exec()
[06:14:06] <Grace> which is probably awful lol
[06:14:09] <grym> there are some wild things you can do to, e.g., consume an openAPI spec and spit out python code
[06:14:12] <grym> it's just weird
[06:14:26] <grym> you can also make pydantic (and dataclasses and attrs) classes dynamically
[06:14:26] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:14:28] <Grace> so thing is I'm subclassing a base type
[06:14:40] <Grace> and I need to be able to figure out which subclass to deserialize into
[06:14:42] <Grace> just from the string
[06:14:46] <Grace> that's all, nothing fancy
[06:15:03] <grym> euurgh well kind of
[06:15:07] *** Joins: codingfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net)
[06:15:17] *** Joins: humberto1 (~humbertow@187.202.214.175)
[06:15:17] <grym> i've done this in other languages and regretted my poor life choices :)
[06:15:37] <grym> (we were doing truly horrible things like baking type name into the json)
[06:15:49] <grym> (that's naughty, don't do that)
[06:15:55] <Grace> oh
[06:15:55] <Grace> lol
[06:16:00] <Grace> that's... what I was trying to do lmao
[06:16:06] <Grace> what's a better way of doing it?
[06:16:16] <grym> it "works" until you have stale assets that you need to deserialise and cannot
[06:16:26] <grym> because, e.g., the type name changed
[06:16:27] <Grace> stale?
[06:16:28] <Grace> oh
[06:16:42] <grym> those wacky customers and their "data"
[06:16:46] <Grace> ah
[06:16:47] <grym> and "storing things"
[06:16:51] <Grace> so what's a better way of doing things
[06:17:03] <grym> i left that project before i had to skin that cat ...
[06:17:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:17:14] <Grace> that doesn't require a centralized store of types haha
[06:17:23] <grym> but compositional hierarchies of pydantic classes deserialise nicely
[06:17:47] <grym> i don't regularly need to use MI
[06:18:02] *** Quits: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:18:05] <Grace> MI?
[06:18:31] <grym> multiple inheritance
[06:18:31] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[06:18:38] <Grace> ah
[06:19:12] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:19:13] *** Joins: fikran (~fikran@user/fikran)
[06:19:17] *** Quits: humberto1 (~humbertow@187.202.214.175) (Ping timeout: 240 seconds)
[06:20:14] *** Joins: mIk3_09 (~Thunderbi@user/mik3-08/x-2852566)
[06:22:12] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[06:22:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:22:35] *** Joins: sgn (~sgn@user/sgn)
[06:22:51] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 256 seconds)
[06:22:51] *** mIk3_09 is now known as mIk3_08
[06:27:48] *** Joins: yac (~user@user/yac)
[06:31:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:32:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:32:48] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:34:21] <mefistofeles> is there a preferred way to check a variable exists in my current context/scope?... I see two options, a try-except with just calling the variable name and catch NameError... or a conditional to check if it exists in locals()
[06:35:05] <mefistofeles> actually even a third one, since it's an attribute of an object, I could use hasattr as well to check
[06:35:14] <mefistofeles> damn zen of python! xD
[06:35:26] <SnoopJ> if it's an attribute definitely hasattr()
[06:36:24] <mefistofeles> yeah, makes sense
[06:36:32] <mefistofeles> SnoopJ: even if acting with self, right?
[06:36:40] <mefistofeles> hasattr(self, blabla)
[06:37:29] <SnoopJ> yep
[06:37:55] <SnoopJ> although that one is a little scary, I normally like to have attributes that take on a sentinel value if they aren't set
[06:38:19] <mefistofeles> yeah... I understand what you mean
[06:38:21] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[06:38:42] <mefistofeles> have to check how's this class constructed
[06:39:35] <mefistofeles> it does have a default valie (None) in the constructor
[06:39:42] <mefistofeles> *value
[06:40:53] *** Joins: skraito (~skraito@user/skraito)
[06:41:00] <SamuelMarks> JavaScript's `map` gives access to the array being created. How do I duplicate this in Python? - E.g., itertools?
[06:41:05] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[06:41:59] <Repiphany> list(map(...))
[06:42:20] <SamuelMarks> Repiphany - No as in I want each iteration of the `map` to also get access to the outer list currently being created
[06:43:02] * SamuelMarks could decorate the function and store the result in a separate list he supposes… but that seems hacky
[06:43:30] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[06:43:38] *** Joins: obnoxiousnerd (~obnoxious@103.39.245.227)
[06:43:55] <mefistofeles> SamuelMarks: what's the minimal working example in JS? Maybe that helps translating
[06:44:41] <SamuelMarks> mefistofeles I want the `array` param from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
[06:44:55] <avu> SamuelMarks: the third argument to the function passed to Array.map is not the array being created but the array map is being called on
[06:45:27] <SamuelMarks> My decorator solution is working, but isn't pretty
[06:45:27] *** Quits: Guest138 (~Guest138@88.103.7.38) (Quit: Client closed)
[06:46:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:48:19] <SnoopJ> mefistofeles, in that case I would probably just `if self.thing:` unless it can be Falsey
[06:49:03] <mefistofeles> yeah
[06:49:14] <SnoopJ> SamuelMarks, `lst = []; for datum in iterable: lst.append(do_something_amazing(lst, datum));` perhaps
[06:49:47] *** Quits: dude-x (~textual@72.76.74.165) (Quit: Textual IRC Client: www.textualapp.com)
[06:50:25] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[06:51:02] <nedbat> SamuelMarks: can you share you decorator solution? Or tell us what list you are making?
[06:52:03] *** Joins: programfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net)
[06:52:18] *** Quits: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Read error: Connection reset by peer)
[06:52:28] *** Quits: programfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net) (Client Quit)
[06:52:37] *** Joins: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[06:52:50] *** Joins: programfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net)
[06:53:27] *** Quits: codingfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net) (Quit: codingfellow)
[06:53:27] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 256 seconds)
[06:53:32] *** Quits: programfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net) (Client Quit)
[06:53:49] *** Joins: codingfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net)
[06:54:01] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[06:55:16] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[06:55:51] *** Joins: lethu (~lethu@user/lethu)
[06:56:01] *** Joins: seednode99 (~seednode@user/seednode)
[06:56:17] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[06:56:34] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[06:58:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[06:58:33] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[06:58:48] <SamuelMarks> nedbat - Sure I'll commit up my tree now
[06:59:42] *** Joins: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com)
[06:59:58] *** Quits: codingfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net) (Quit: WeeChat 3.4)
[07:00:36] *** Joins: codingfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net)
[07:02:52] *** Joins: mIk3_09 (~Thunderbi@user/mik3-08/x-2852566)
[07:04:19] <SamuelMarks> nedbat / SnoopJ - My hacky solution (which actually works) is https://github.com/SamuelMarks/cdd-python/blob/b6ccb24/cdd/cst_utils.py#L331-L360 called at https://github.com/SamuelMarks/cdd-python/blob/b6ccb24/cdd/cst_utils.py#L282-L291
[07:04:23] *** Quits: codingfellow (~codingfel@pool-108-28-39-71.washdc.fios.verizon.net) (Client Quit)
[07:04:24] *** Joins: ayaka (~randy@192.147.44.15)
[07:04:55] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 256 seconds)
[07:05:00] *** mIk3_09 is now known as mIk3_08
[07:07:31] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[07:07:31] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[07:07:31] <ayaka> I have a shell variable file, likes the .config from linux kernel, I want read it and update it
[07:07:51] <ayaka> should I use ConfigParser or there is a better package for me
[07:07:52] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:07:54] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[07:10:01] *** luva0 is now known as luva
[07:10:01] <SamuelMarks> ayaka - That should be good enough
[07:10:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:10:48] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[07:11:12] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:11:20] <ayaka> SamuelMarks, I am looking at how I could disable section
[07:11:33] <SamuelMarks> ayaka - toml is also pretty popular, if you're open to third party dependency
[07:11:36] *** Joins: dude-x (~textual@72.76.74.165)
[07:11:58] <SamuelMarks> ayaka: "Configuration files may include comments, prefixed by specific characters (# and ; by default 1). Comments may appear on their own on an otherwise empty line, possibly indented. 1"
[07:12:37] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:12:42] <ayaka> yes, it could happens
[07:14:03] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:14:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[07:14:50] *** Joins: matsaman (~matsaman@user/matsaman)
[07:16:07] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[07:17:49] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[07:18:57] <ayaka> if there is not a package could handle it, it would be more easy I may just use the sed command
[07:21:25] *** Joins: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net)
[07:21:25] *** Quits: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net) (Changing host)
[07:21:25] *** Joins: hams (~hams@user/hams)
[07:23:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:24:30] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[07:24:54] *** Joins: sgn (~sgn@user/sgn)
[07:24:57] <SamuelMarks> ayaka `sed` is good, but anything you can do in `sed` you can do in Python so you might as well support it
[07:25:03] *** Quits: abraxas (~abraxas@2600:8805:c880:3:c7fe:fc8e:f2cc:8056) (Quit: abraxas)
[07:25:35] <SamuelMarks> Also you can just hack a section name with ignore_ prefix or whatever
[07:25:48] *** Quits: moog (~moog@107.126.53.20) (Remote host closed the connection)
[07:25:54] <ayaka> yes, string regex works well in python
[07:26:01] *** Joins: thurs80601421053 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[07:26:43] *** Joins: adeliktas9 (~adeliktas@i59F5F686.versanet.de)
[07:27:03] <SnoopJ> sed's \U feature is relatively annoying to replicate in Python, as I unfortunately learned recently
[07:27:26] <SnoopJ> which is not a dig on `re`, I just had to port a tool that had a lot of load-bearing sed
[07:27:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:28:05] <matsaman> perl's my favie for regex in a pipeline
[07:28:35] *** Quits: adeliktas (~adeliktas@i59F5FB64.versanet.de) (Ping timeout: 256 seconds)
[07:28:35] *** adeliktas9 is now known as adeliktas
[07:29:13] <SnoopJ> the fewer things that might snap off if I switch to some other regex engine, the better. unfortunately there's an awful lot of that in regex :)
[07:29:57] <SnoopJ> if I had written that tool from scratch it would absolutely not have used sed, but 1:1 semantics counted for more than style points
[07:30:11] <SnoopJ> not used regular expressions*
[07:31:03] <SamuelMarks> SnoopJ - I just bought the dragon book, time to write my own state machines
[07:31:10] <matsaman> heh
[07:32:49] *** Joins: SKiTZO_ (~dark@64.89-10-146.nextgentel.com)
[07:32:56] *** Joins: parv (~quass@user/parv)
[07:33:03] *** Quits: _SKiTZO (~dark@64.89-10-146.nextgentel.com) (Read error: Connection reset by peer)
[07:34:57] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[07:35:45] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[07:35:59] *** Joins: sgn (~sgn@user/sgn)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:14] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:36] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[07:36:37] *** Joins: Enitin (~Enitin@5.180.62.231)
[07:37:05] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[07:37:15] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b40a:dda7:ddbf:7843) (Quit: Client closed)
[07:37:18] <foul_owl> How do I deep copy a complex object? It's basically a dict of list of lists
[07:37:37] <foul_owl> I want to deep copy then change one item in one list
[07:37:59] <SnoopJ> foul_owl, does copy.deepcopy() do what you want?
[07:38:40] *** Joins: hyiltiz (~quassel@31.220.5.250)
[07:38:53] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:39:06] <foul_owl> Thank you!! That is exactly what I needed! I was trying just foo.deepcopy() not copy.deepcopy(), it works!!
[07:39:23] <NeilG> is there any reason to use OrderedDict anymore?
[07:40:26] <SnoopJ> NeilG, I can think of two: 1) you want to draw attention to reliance on order 2) you care about versions before 3.7
[07:40:43] <NeilG> SnoopJ, there are no version before 3.7 :)
[07:40:58] <NeilG> https://endoflife.date/python
[07:41:11] *** Quits: Enitin (~Enitin@5.180.62.231) (Ping timeout: 256 seconds)
[07:42:22] <SnoopJ> NeilG, there most certainly is
[07:42:33] <SnoopJ> 3.6 is EOL, but that doesn't mean 3.6 no longer exists
[07:42:50] <NeilG> isn't there a law that says everyone has to uninstall it?
[07:43:13] <NeilG> I'm just kidding, snoop, I know I know
[07:43:19] <SnoopJ> :)
[07:43:53] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:44:30] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:45:46] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[07:46:24] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[07:47:23] *** Quits: hyiltiz (~quassel@31.220.5.250) (Quit: hyiltiz)
[07:47:59] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:48:10] *** Joins: hyiltiz (~quassel@31.220.5.250)
[07:48:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[07:49:28] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:49:45] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 268 seconds)
[07:50:05] *** Quits: hyiltiz (~quassel@31.220.5.250) (Client Quit)
[07:50:28] *** Joins: saroy (~Sandipan@43.252.250.86)
[07:52:41] *** Joins: JordiGH (~jordi@fencepost.gnu.org)
[07:52:41] *** Quits: JordiGH (~jordi@fencepost.gnu.org) (Changing host)
[07:52:41] *** Joins: JordiGH (~jordi@user/jordigh)
[07:53:16] *** Joins: enoch (~enochthec@115-188-142-89-vdsl.sparkbb.co.nz)
[07:57:24] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[07:57:49] *** Joins: sgn (~sgn@user/sgn)
[07:58:57] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 240 seconds)
[08:00:07] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[08:00:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:00:27] *** Quits: enoch (~enochthec@115-188-142-89-vdsl.sparkbb.co.nz) (Ping timeout: 256 seconds)
[08:00:30] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:01:21] *** Joins: Enitin (~Enitin@5.180.62.231)
[08:01:38] *** Quits: obnoxiousnerd (~obnoxious@103.39.245.227) (Remote host closed the connection)
[08:02:13] *** Joins: iflema (~ian@user/iflema)
[08:03:04] *** Joins: hyiltiz (~quassel@31.220.5.250)
[08:03:18] *** Quits: hyiltiz (~quassel@31.220.5.250) (Client Quit)
[08:03:26] *** Joins: hyiltiz (~quassel@31.220.5.250)
[08:03:27] *** Joins: jazzy3 (~jaziz@user/jaziz)
[08:04:31] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[08:04:57] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 240 seconds)
[08:05:17] *** Quits: sleeping1 (~sleepingf@pool-98-111-201-185.pitbpa.ftas.verizon.net) (Ping timeout: 240 seconds)
[08:05:54] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:05:59] *** Quits: Enitin (~Enitin@5.180.62.231) (Ping timeout: 256 seconds)
[08:06:47] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[08:06:57] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[08:07:07] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[08:07:57] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 240 seconds)
[08:08:29] *** Quits: sreve (~quassel@p549d705d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:08:45] *** Joins: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de)
[08:08:54] *** Joins: hyiltiz (~quassel@31.220.5.250)
[08:09:05] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[08:14:39] *** Joins: Enitin (~Enitin@5.180.62.231)
[08:14:43] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:15:41] *** Quits: Gerula (~Gerula@user/gerula) (Read error: Connection reset by peer)
[08:15:44] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[08:16:07] *** Joins: sgn (~sgn@user/sgn)
[08:17:25] *** Quits: Dan39 (~dan@user/dan39) (Ping timeout: 240 seconds)
[08:20:01] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[08:24:22] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:25:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[08:25:46] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[08:26:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:28:34] *** Joins: fikran (~fikran@user/fikran)
[08:28:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[08:29:17] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:30:19] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:30:31] *** Joins: Gerula (~Gerula@user/gerula)
[08:30:45] *** Joins: mexen (uid495612@user/mexen)
[08:31:53] *** Joins: Dan39 (~dan@user/dan39)
[08:31:54] *** Joins: audiobirb (~audio@user/audio)
[08:32:22] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[08:32:43] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[08:33:53] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[08:34:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[08:34:43] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:34:57] *** Quits: jazzy3 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[08:35:18] *** Quits: hyiltiz (~quassel@31.220.5.250) (Quit: hyiltiz)
[08:36:16] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:36:26] *** Joins: RiFo (~RiFo@user/rifo)
[08:37:18] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:38:08] *** Quits: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6) (Quit: Leaving)
[08:38:47] *** Joins: obnoxiousnerd (~obnoxious@152.57.34.78)
[08:38:48] *** Joins: r3m (~launch@user/r3m)
[08:39:33] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[08:40:02] *** Quits: obnoxiousnerd (~obnoxious@152.57.34.78) (Remote host closed the connection)
[08:40:41] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[08:42:46] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:47:21] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[08:48:19] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[08:49:37] *** Quits: Enitin (~Enitin@5.180.62.231) (Ping timeout: 240 seconds)
[08:51:46] *** Joins: Enitin (~Enitin@82.102.22.86)
[08:51:47] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[08:52:03] *** Joins: sgn (~sgn@user/sgn)
[08:52:32] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[08:53:16] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[08:53:37] *** Joins: sgn (~sgn@user/sgn)
[08:53:39] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:54:54] *** Joins: sleeping1 (~sleepingf@pool-98-111-201-185.pitbpa.ftas.verizon.net)
[08:55:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:55:07] <parv> It will be hilarious if+when insertion order would be removed from `dict`. (See that 👉`OrderedDict` there?)
[08:55:48] <KirkMcDonald> They just *added* it not that long ago.
[08:56:08] <KirkMcDonald> OrderedDict is primarily an artifact from before that.
[08:56:11] <parv> I know ... "if+when"
[08:56:37] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[08:56:57] <KirkMcDonald> It'd be a severe breaking change. I don't think it's plausible.
[08:57:09] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[08:57:12] <parv> 🤷‍
[08:57:17] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[08:57:28] *** Joins: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[08:57:54] <mefistofeles> hmm, interesting, I'm noticing tests with py3.7 and 3.8 in our CI are taking longer than 3.9 and 3.6
[08:58:07] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[08:58:10] *** Joins: novns (~novns@user/novns)
[08:58:19] *** Quits: emf_ (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Client Quit)
[08:58:37] *** Quits: emf (~emf@2620:10d:c090:400::5:c06d) (Ping timeout: 240 seconds)
[08:59:48] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:03:08] *** Quits: BillyZane (~BillyZane@185.202.221.179) (Ping timeout: 268 seconds)
[09:04:21] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:05:50] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[09:06:01] *** Joins: bluedust (~bluedust@117.241.185.116)
[09:06:20] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[09:07:25] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[09:07:52] *** Joins: sgn (~sgn@user/sgn)
[09:09:35] *** Quits: sleeping1 (~sleepingf@pool-98-111-201-185.pitbpa.ftas.verizon.net) (Ping timeout: 256 seconds)
[09:10:57] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[09:11:11] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:12:01] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:12:50] *** Joins: manti7 (~manti7@176.10.104.94)
[09:14:56] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[09:15:07] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Ping timeout: 256 seconds)
[09:16:08] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[09:16:34] *** Joins: widp (~user@165.225.123.46)
[09:16:43] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[09:16:49] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[09:16:49] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[09:18:36] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[09:19:58] *** Quits: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:21:37] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Ping timeout: 240 seconds)
[09:21:55] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[09:25:21] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[09:25:35] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:26:58] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[09:27:01] *** Quits: alxndr (~alexander@ybti.net) (Remote host closed the connection)
[09:27:14] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:27:15] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[09:28:26] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[09:28:32] *** Joins: sgn_ (~sgn@user/sgn)
[09:28:55] *** Joins: alxndr (~alexander@ybti.net)
[09:29:36] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:29:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:30:40] *** Quits: dulanic (~dulanic@47.187.144.163) (Remote host closed the connection)
[09:31:07] *** Joins: dulanic (~dulanic@47.187.144.163)
[09:34:31] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[09:38:59] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:39:12] *** Joins: slbtty (~slbtty@2607:fea8:1d40:800::f7a7)
[09:39:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[09:39:57] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 240 seconds)
[09:39:58] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[09:40:24] *** Joins: sgn (~sgn@user/sgn)
[09:40:25] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[09:41:28] *** Joins: hyiltiz (~quassel@31.220.5.250)
[09:42:02] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:42:12] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[09:45:38] *** Joins: bluedust_ (~bluedust@81.92.206.10)
[09:46:25] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[09:46:44] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Quit: WeeChat 3.4)
[09:47:59] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:48:37] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[09:49:15] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:49:17] *** Quits: bluedust (~bluedust@117.241.185.116) (Ping timeout: 240 seconds)
[09:49:37] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:49:47] *** Joins: bloody (~bloody@user/bloody)
[09:51:24] *** Joins: matrixbot_bartab (~matrixbot@lfbn-idf1-1-1565-7.w90-90.abo.wanadoo.fr)
[09:51:37] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[09:54:21] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:54:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:57:47] *** Joins: iflema (~ian@user/iflema)
[09:57:48] *** Joins: jpaa (~jpaa@161.97.129.36)
[09:58:04] *** Joins: quite (~quite@user/quite)
[09:58:11] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[09:58:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:59:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:59:14] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[09:59:16] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 268 seconds)
[09:59:24] <quite> Hi! I have an email.message.Message and do get_payload(n) on it. There is a Content-Disposition header that is wrapped in the output from it, but it is not in the original mail. Should I expect this behaviour?
[09:59:27] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:59:37] *** Joins: sgn (~sgn@user/sgn)
[09:59:42] *** Joins: bluedust (~bluedust@117.241.185.116)
[09:59:58] <quite> If so, how do I extract raw payloads? Also, get_payload() seems to be present for py2-compat reasons. What are py3 equiv?
[10:01:16] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:01:17] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:01:17] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[10:01:26] *** Joins: ihristov (~ihristov@217.145.94.71)
[10:01:36] *** Joins: BillyZane (~BillyZane@185.216.74.110)
[10:01:42] *** Joins: sgn (~sgn@user/sgn)
[10:01:45] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:02:21] <dba> does anybody know of a practical guide or resource to get my hands on Django Channels?
[10:02:23] *** Joins: vanessa (~farawayas@103.160.128.7)
[10:02:57] *** Quits: bluedust_ (~bluedust@81.92.206.10) (Ping timeout: 240 seconds)
[10:04:31] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:59] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[10:05:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[10:08:31] *** Joins: hyiltiz (~quassel@31.220.5.250)
[10:08:50] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.19)
[10:09:14] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[10:09:39] *** Joins: jonthesnow (~xizhendu@36.112.179.225)
[10:10:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:11:06] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[10:11:33] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz)
[10:13:01] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[10:13:10] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz) (Client Quit)
[10:13:39] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:648:81b4:d3e4:eb09)
[10:13:54] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz)
[10:18:07] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[10:18:57] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[10:19:17] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:19:23] *** Joins: sgn (~sgn@user/sgn)
[10:19:51] *** Joins: ADHD_ (~xxx@bras-vprn-toroon4834w-lp130-15-184-147-71-53.dsl.bell.ca)
[10:21:31] *** Quits: mixfix41 (~homefame@user/mixfix41) (Quit: quittin')
[10:21:33] *** Quits: ADHD (~xxx@bison.sh3ll.ru) (Ping timeout: 256 seconds)
[10:22:18] *** Quits: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de) (Remote host closed the connection)
[10:22:35] *** Joins: xcm_ (~xcm@user/xcm)
[10:23:31] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:24:26] *** Joins: koo5_ (~quassel@51.140.155.227)
[10:24:59] *** Quits: Bakunin (~maplefing@user/lindis) (Remote host closed the connection)
[10:26:04] *** Joins: obnoxiousnerd (~obnoxious@2409:4042:2d8b:fbc4:5822:cdb8:a8bf:5186)
[10:28:05] *** Quits: NoelFlantier3 (~Hubert@static.238.157.9.5.clients.your-server.de) (Remote host closed the connection)
[10:28:24] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:28:25] *** Joins: NoelFlantier3 (~Hubert@static.238.157.9.5.clients.your-server.de)
[10:29:27] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[10:30:52] *** Quits: obnoxiousnerd (~obnoxious@2409:4042:2d8b:fbc4:5822:cdb8:a8bf:5186) (Remote host closed the connection)
[10:30:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:31:37] *** Quits: nac (~nac@user/nac) (Quit: The Lounge - https://thelounge.chat)
[10:32:05] *** Joins: nac (~nac@user/nac)
[10:34:33] *** Quits: vanessa (~farawayas@103.160.128.7) (Quit: Leaving)
[10:34:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:35:08] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:35:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[10:37:55] *** Joins: fikran (~fikran@user/fikran)
[10:38:03] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[10:40:16] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:40:41] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[10:41:24] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:41:33] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[10:41:39] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[10:43:53] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4582-2b8f-5a63-0567.res6.spectrum.com)
[10:43:54] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[10:44:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[10:44:53] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[10:45:06] *** Joins: hyiltiz (~quassel@31.220.5.250)
[10:45:32] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[10:45:36] *** Joins: rsx (~dummy@ppp-188-174-159-118.dynamic.mnet-online.de)
[10:46:04] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:46:21] *** Quits: hams (~hams@user/hams) (Ping timeout: 256 seconds)
[10:46:54] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[10:47:07] *** Joins: panella32 (~textual@85.203.36.68)
[10:47:25] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:47:32] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[10:47:52] *** Joins: sgn (~sgn@user/sgn)
[10:48:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[10:48:14] <panella32> Hi this is my very first time visiting the channel and really surprised how crowded #python is compared to #windows/php etc!!
[10:48:22] <panella32> I'm downloading some videos listed in a .txt file, it's working fine but youtube-dl only prints "[debug] Default format spec: bestvideo+bestaudio/best" but I'd prefer to also see the name of the video which is being downloaded. Any idea? https://i.imgur.com/DJfSQve.png
[10:49:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:50:01] *** Joins: Atque (~Atque@user/atque)
[10:50:03] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:50:03] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[10:50:05] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:50:17] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[10:50:27] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[10:50:30] *** Joins: sgn (~sgn@user/sgn)
[10:50:52] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:51:40] *** Joins: cheater (~Username@user/cheater)
[10:53:23] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[10:53:34] *** Joins: Helle (~helle@45.83.235.185)
[10:54:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[10:55:12] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:55:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[10:56:28] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[10:57:58] *** Joins: rendar (~rendar@user/rendar)
[10:58:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:00:05] *** Quits: jonthesnow (~xizhendu@36.112.179.225) (Ping timeout: 256 seconds)
[11:00:23] *** Joins: emf_ (~emf@2620:10d:c090:400::5:29c4)
[11:01:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[11:01:53] *** Joins: inomoz (~inomoz@176.59.115.63)
[11:02:17] *** Quits: panella32 (~textual@85.203.36.68) (Ping timeout: 240 seconds)
[11:02:54] *** Joins: panella32 (~textual@85.203.36.68)
[11:03:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:03:17] <panella32> No idea?
[11:03:33] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:143d:89cd:5fce:1d0c) (Read error: Connection reset by peer)
[11:04:00] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[11:04:18] <BrenBarn> not sure if that is outdated
[11:04:18] <BrenBarn> I see a really old issue about it: https://github.com/ytdl-org/youtube-dl/issues/2438
[11:04:30] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:04:36] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[11:05:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:05:29] *** Joins: seednode99 (~seednode@user/seednode)
[11:06:08] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:06:33] *** Joins: fluter (~fluter@user/fluter)
[11:06:50] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[11:07:12] *** Joins: sgn (~sgn@user/sgn)
[11:07:32] *** Joins: panella32_ (~textual@185.192.71.30)
[11:07:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:08:13] *** Joins: gusto (~Augustus@109.255.100.54)
[11:08:50] *** Parts: panella32_ (~textual@185.192.71.30) ()
[11:08:52] *** Joins: panella32_ (~textual@185.192.71.30)
[11:09:31] *** Joins: grundrausch3n (~grundraus@p200300e9ef0ab500bc39f9cc14bd70ee.dip0.t-ipconnect.de)
[11:09:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[11:09:37] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[11:09:57] *** Quits: panella32 (~textual@85.203.36.68) (Ping timeout: 240 seconds)
[11:10:15] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[11:10:26] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[11:10:30] *** Joins: sgn (~sgn@user/sgn)
[11:11:49] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:12:07] *** Joins: panella32 (~textual@45.130.83.164)
[11:13:37] *** Quits: panella32_ (~textual@185.192.71.30) (Ping timeout: 240 seconds)
[11:13:55] <panella32> I'm going to try yt-dlp
[11:16:51] *** Joins: tobybl (~tobybl@237.202.200.146.dyn.plus.net)
[11:17:46] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:17:59] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:20:52] *** Joins: mrwick (~mrwick@user/mrwick)
[11:23:06] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:24:28] *** Joins: chino (~chino@37.red-83-46-204.dynamicip.rima-tde.net)
[11:27:33] <ketiv> Good morning, hope everyone has a good day :-)
[11:28:04] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:28:19] <panella32> Tried yt-dlp! It's printing huge on --verbose mode and print nothing in non-verbose mode! I just want it to print file#1 downlaoded successfully
[11:28:31] <panella32> ketiv Good morning :)
[11:28:56] <ketiv> hi panella32 how you doing?
[11:28:59] <panella32> (it's actually a php code)
[11:29:05] <panella32> doing great wbu?
[11:29:10] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:29:26] *** Joins: andreasbuhr (~quassel@p5dcf913e.dip0.t-ipconnect.de)
[11:29:29] *** Quits: andreasbuhr (~quassel@p5dcf913e.dip0.t-ipconnect.de) (Client Quit)
[11:29:47] <ketiv> same, just woke up and enjoying a first cup of coffee ;-)
[11:31:03] <panella32> Nice!
[11:31:07] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:31:52] *** Joins: Pddy (~SmplyPddy@user/SmplyPddy)
[11:33:24] <ketiv> panella32: thx, it's a good coffee ;-)
[11:33:30] *** Joins: chele (~chele@user/chele)
[11:33:57] *** Quits: grooverman (~grooverma@177.102.117.95) (Ping timeout: 240 seconds)
[11:34:08] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:34:23] *** Quits: emf_ (~emf@2620:10d:c090:400::5:29c4) (Quit: emf_)
[11:34:25] <panella32> I'm sure it is! Enjoy!
[11:35:12] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:35:24] *** Joins: han-solo (~hanish@user/han-solo)
[11:35:57] <ketiv> I will, need some buzz because my old HDD is death and have to deal with backups not all projects are on GIT and I do not wish to loose it.
[11:36:01] <ketiv> panella32: ^^
[11:36:35] *** Joins: annada (~annada@103.160.128.7)
[11:36:57] *** annada is now known as vanessa
[11:37:05] *** Quits: chino (~chino@37.red-83-46-204.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[11:37:11] *** Quits: vanessa (~annada@103.160.128.7) (Quit: leaving)
[11:39:44] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:39:59] *** Joins: palasso (~palasso@user/palasso)
[11:40:36] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:40:38] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[11:40:48] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[11:41:05] *** Joins: rakoon_ (~rakoon@2001:985:f4c6:1:24f7:9ed5:87fa:b177)
[11:41:26] *** Joins: djapo (~archangel@user/djapo)
[11:44:16] *** Joins: parv (~quass@user/parv)
[11:44:19] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[11:44:38] *** Joins: anon-angler (~anon-angl@109.126.42.47)
[11:45:18] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:45:20] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:45:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[11:45:29] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[11:45:39] *** Joins: jinsun (~quassel@user/jinsun)
[11:45:53] *** Joins: sgn (~sgn@user/sgn)
[11:46:40] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:47:53] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-050.client.tudelft.eduvpn.nl)
[11:49:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:50:26] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:51:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:51:10] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[11:51:24] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:51:30] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[11:52:14] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:53:17] <guardian> hello, given d={'foo': 1, 'bar': 2, 'baz': 3} how can I write something like {"FOO": v if k == "foo" else k: v for k, v in d.items()} please?
[11:54:01] <guardian> never mind found it: {"FOO" if k == "foo" else k : v for k, v in d.items()}
[11:54:04] <guardian> not sure if I like it though
[11:57:00] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:58:09] *** Joins: Sabry (~Sabry@197.37.126.219)
[11:58:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:59:37] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:c109:7c99:f567:d007) (Ping timeout: 240 seconds)
[12:01:33] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:01:57] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[12:01:58] *** Joins: sgn (~sgn@user/sgn)
[12:02:07] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[12:02:34] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[12:03:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:03:47] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:04:13] *** Joins: sgn (~sgn@user/sgn)
[12:06:57] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[12:08:03] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[12:08:04] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:08:12] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:08:21] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Remote host closed the connection)
[12:08:24] *** Joins: sgn (~sgn@user/sgn)
[12:09:12] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[12:09:43] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:10:17] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:10:40] *** Joins: sgn (~sgn@user/sgn)
[12:11:43] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:11:56] *** Joins: sgn (~sgn@user/sgn)
[12:14:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:15:05] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:16:16] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[12:18:12] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[12:19:33] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[12:19:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:20:24] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:21:06] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:21:36] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:21:42] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-050.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[12:22:03] *** Joins: sgn (~sgn@user/sgn)
[12:22:31] *** Joins: kosh (~kosh@user/kosh)
[12:22:37] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-050.client.tudelft.eduvpn.nl)
[12:22:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[12:24:01] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:24:08] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[12:24:26] *** Joins: sgn (~sgn@user/sgn)
[12:25:18] *** Quits: RiFo (~RiFo@user/rifo) (Read error: Connection reset by peer)
[12:25:40] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:25:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:26:36] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:27:44] *** Joins: RiFo (~RiFo@user/rifo)
[12:28:13] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:28:26] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[12:28:40] *** SallyAhaj_ is now known as SallyAhaj
[12:29:14] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[12:31:32] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:31:54] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (Remote host closed the connection)
[12:32:04] *** Joins: carl- (~carl-@185.103.188.130)
[12:32:08] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[12:32:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:33:17] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:33:35] *** Joins: sgn (~sgn@user/sgn)
[12:34:16] *** Quits: Strom (strom@fedora/strom) ()
[12:34:38] *** dcaro_away is now known as dcaro
[12:35:26] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[12:35:49] *** Joins: Strom (strom@fedora/strom)
[12:37:14] *** Joins: stonkey (~stonkey@user/stonkey)
[12:37:26] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[12:37:36] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:38:43] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:39:20] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[12:39:46] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:40:02] *** Joins: vanessa (~annada@103.160.128.7)
[12:40:49] *** Joins: gusto (~Augustus@109.255.100.54)
[12:43:44] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:43:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[12:44:29] *** Quits: Sylhouette (~johan@87.233.185.198) (Remote host closed the connection)
[12:44:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:44:56] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[12:45:07] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:45:20] *** Joins: djapo (~archangel@user/djapo)
[12:45:20] *** Joins: sgn (~sgn@user/sgn)
[12:45:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:47:16] *** Joins: fikran (~fikran@user/fikran)
[12:47:42] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[12:48:05] *** Joins: sgn (~sgn@user/sgn)
[12:48:53] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[12:50:17] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 240 seconds)
[12:50:32] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:52:57] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:53:10] *** Joins: tobybl_ (~tobybl@237.202.200.146.dyn.plus.net)
[12:53:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:54:23] *** Joins: Guest3367 (~vit@chello085216193138.chello.sk)
[12:54:32] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[12:54:33] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:54:57] *** Quits: tobybl (~tobybl@237.202.200.146.dyn.plus.net) (Ping timeout: 240 seconds)
[12:55:44] <Deneb> is it possible to add a byte array to a dictionary? I am having trouble with decode("ascii") or decode("utf-8") as they weill not accept characters above value 127
[12:56:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[12:57:03] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:58:08] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[12:58:22] <bjs> Deneb: why are you decoding if you want to add the bytes?
[12:58:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[12:59:00] <bjs> Deneb: decoding bytes should work if the bytes are encoded text (in the encoding you specify).  But you don't need to decode to add bytes to a dictionary.
[12:59:06] <Deneb> bjs: because if I do mydict['plotdata'] = bytearray it complains that I am not adding a string
[12:59:12] *** Joins: erkan (~erkan@p200300d34711965841def2748f5ba63d.dip0.t-ipconnect.de)
[12:59:13] <bjs> Deneb: what is "it" ?
[12:59:22] <Deneb> the bytes are ascii characters with values 0 - 255
[12:59:28] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[12:59:40] *** Joins: nomic (~nomic@85.203.36.80)
[13:00:21] <bjs> Deneb: ASCII is a 7-bit encoding, it doesn't go up to 255
[13:00:26] <bjs> Deneb: what encoding is it actually in?
[13:00:51] <Deneb> its a plot file, output from an oscilloscope
[13:01:08] <bjs> Deneb: are you sure it's actually text at all?
[13:01:22] <nvz> bjs: sounds like being a bit technical as ascii was extended
[13:01:33] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:01:35] *** Joins: sgn_ (~sgn@user/sgn)
[13:01:36] <nvz> but I'm sure you know that, just pointing it out
[13:01:36] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[13:01:55] <bjs> nvz: okay but that doesn't change the fact that ASCII is 7 bits, the fact there exist other encodings
[13:02:16] <Deneb> Yes. The ID and parameters are sent as ascii and I can read that into a string no problem. The data follows a '%' and is in characters value between 0 and 255. Its an old scope so no modern stuff lile UTF8
[13:02:17] <nvz> bjs: do you know what python calls the extended ascii charset?
[13:02:31] <bjs> nvz: well, unicode is one of them
[13:02:55] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[13:03:08] *** Joins: sgn (~sgn@user/sgn)
[13:03:31] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[13:03:37] *** Quits: Harlin (~DonQixote@75-163-180-244.clsp.qwest.net) (Ping timeout: 256 seconds)
[13:03:39] <nvz> unicode is so damn huge its mind boggling
[13:03:44] <Deneb> the other option is to store it seperately as a byte array which is not as neat, but doable. Just thought it would be neater to store everything in one construct.
[13:03:56] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:03:56] <Swayze> cool write up on using __init_subclass__ instead of metaclass https://til.simonwillison.net/python/init-subclass
[13:04:09] *** Joins: Xano (~Xano@2a00:23c4:4204:700:5610:9a8c:8179:e0c7)
[13:04:14] <nvz> but I guess it includes as a subset of its first 256 chars a copy of ascii chars and the extended ones?
[13:04:21] <bjs> Deneb: well the stuff after % is between 0 and 255, that means it's not ASCII.  What actually is
[13:04:22] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[13:04:23] <bjs> it
[13:04:52] <bjs> nvz: all ascii-encoded strings are valid utf-8 encoded strings which yield the same string
[13:05:00] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:05:51] <nvz> idk, I suppose rather than worry about ascii at all the answer usually is use unicode these days it prevents modern world issues from cropping up
[13:06:04] <bjs> `s.encode("ascii").decode("utf-8") == s` is True for all ASCII strings s (and by extension, for all "Extended ASCII" encodings)
[13:06:05] *** Joins: ubert (~Thunderbi@p200300ecdf0994db19c621579c5ac118.dip0.t-ipconnect.de)
[13:06:28] <nvz> I got some elaborate setup on here that allows me to switch my keyboard into a mode where I can search for unicode emoji and stuff by name/description
[13:06:29] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[13:06:34] <Deneb> bjs: ok, technically its not ascii, so does that mean I can't add it to the dictionary?
[13:06:53] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[13:06:55] *** Joins: ktosiek (~ktosiek@2001:470:69fc:105::87ab)
[13:07:01] <nvz> with people doing stuff like that these days not even to mention using odd chars for different languages and regions, you kinda should just run everything through unicode
[13:07:04] <bjs> Deneb: well it means you can't decode it as ascii. Like I said Python is perfectly happy with you putting whatever you want in the dictionary, including the bytes themselves
[13:07:18] <bjs> Deneb: you said something about getting an error about bytes not strings, what are you doing with this dictionary?
[13:07:24] <grawity> if it's real text with special characters/accents/etc, then it might be encoded using iso8859-1 or some other legacy encoding
[13:07:34] <Deneb> this error: TypeError: can only concatenate str (not "list") to str
[13:08:33] <ktosiek> Hi! Are there any examples of libraries that implement some API's client logic separately from communication? The only one I've found is OAuthLib.
[13:08:36] <Deneb> grawity: its numerical plot point data encoded into 8-bit bytes I believe
[13:08:38] <bjs> If it's data from an oscilloscope I'm not sure why it would be text at all
[13:08:41] <grawity> ah
[13:08:44] <nvz> I was just demonstrating the other night different string concatenation methods.. like foo + bar, "%s, %s" % foo, bar.. etc
[13:08:48] <grawity> so doesn't make sense to turn it into a string anyway
[13:09:04] <grawity> but what kind of dict do you have that *complains* about adding a bytearray?
[13:09:05] <nvz> certain methods like fstrings and the %s method do the conversion for you
[13:09:07] <nvz> of course
[13:09:21] <nvz> where using a + operator you'd need to str() vars to make sure
[13:09:23] <bjs> Deneb: can you share the code? (and maybe even print(the_bytes_from_the_osilloscope) so we can see what it is) ?
[13:09:27] <Deneb> grawity: I agree, so I can't add it to the dictionary then?
[13:09:35] <grawity> you can add *anything* to a normal dict
[13:09:38] <grawity> my point is
[13:09:40] <bjs> Deneb: like I keep saying, the dictionary does not care what you put in it. You can put bytes in a dictionary if you wanted.
[13:09:43] <Deneb> bjs: sure, give me a moment....
[13:09:44] <grawity> it sounds like your dict is not a normal dict
[13:10:12] <grawity> and I would really like to see the actual "complaint" messages that you're getting from python
[13:10:14] <bjs> Deneb: if you're getting some TypeError later on, it's because of something else (perhaps something using the dictionary to try concatenate things)
[13:10:32] <Deneb> bjs: I hear what you are saying, so my point is why is it complaining then? I will post the code. One moment...
[13:10:38] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:44] <bjs> Deneb: I don't know, I can't see your code or the error so I can't say why it's complaining
[13:11:33] <bjs> but I'd guess that somewhere you (or something you're using) is trying to concatenate things together.  Since neither the bytes nor the decoded text are lists I have no idea where the error is coming from.
[13:12:08] <bjs> (note your error mentions a list, but you've described to us bytes, strings and dictionaries and there's been no mention of lists so far...)
[13:12:31] <Deneb> https://bpa.st/YCSA
[13:12:43] <Deneb> pasted the scope output in a comment at the top
[13:12:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:13:57] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:b697:cd3e:cdb2:bf35:7e26)
[13:14:48] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[13:15:02] <grawity> aha, so your plotdataset['plotdata'] is a list of 1-length byte values
[13:15:02] *** Joins: sgn (~sgn@user/sgn)
[13:15:08] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:55a1:cb19:64c:d550)
[13:15:12] <Deneb> hmm, thinking about it, by byte array might actually be a 'list'. Python is confusing!
[13:15:26] <grawity> it's different from an actual `bytearray`
[13:15:47] <grawity> but either way, in line 73, you're basically doing "some str" + plotdataset['plotdata']
[13:16:21] <grawity> the problem isn't with having the list/array in your dict, the problem is trying to concatenate it to a str inside that print() call
[13:16:39] <grawity> try a) print("Plot data:\n" + str(plotdataset['plotdata']))
[13:16:54] <grawity> or b) print("Plot data:"); print(plotdataset['plotdata'])
[13:16:57] <Deneb> grawity: thank, I see what you mean
[13:16:57] <bjs> or just print("Plot data:") then print(plotdataset['plotdata'])  as two different prints
[13:17:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:b697:f055:7cf:11e1:f6f5) (Ping timeout: 240 seconds)
[13:17:18] <mrwick> or print(f"Plot data: plotdataset['plotdata']") ?
[13:18:10] <grawity> separately from this issue, it might be better to use a `bytearray` instead of a list-of-byte-values, i.e. initialize as 'plotdata = bytearray()', then instead of append() use 'plotdata += byte'
[13:19:09] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[13:19:29] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[13:19:31] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:19:47] <Deneb> yes, printing them seperately works. It prints the bytes as with '\x..' encoding mostly. Some are just shown as b'0' and b'N'. Not sure what b'N' is as opposed to b'0'
[13:19:57] <grawity> mrwick: possibly (with the { } though), but I suggested str() more to illustrate what needs to happen to make + work
[13:20:01] <bjs> Deneb: that's an ASCII N and an ASCII 0
[13:20:13] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:20:33] <bjs> (aka bytes 0x4E and 0x30)
[13:20:34] <mrwick> grawity: ah yes, forgot the {} around the dict[key].. right. yes understood
[13:21:10] <grawity> Deneb: the text representation of bytestrings tries to recognize ASCII values, e.g. b'\x4E' is shown as b'N'
[13:21:48] <grawity> this doesn't damage the actual byte values, whether x=b'N' or x=b'\x4E', x[0] is still going to be 0x4E
[13:21:50] <Exa> Hi, since today (on Debian Buster), when I create and activate a virtualenv, running "pip" commands works but running "python -m pip" commands says that "AttributeError: module '__main__' has no attribute '__file__'"  https://ewd.xyz/10787b.txt  I have this issue on multiple projects, does this ring a bell to anyone?  Thanks.
[13:21:53] <Deneb> bjs: ok, I see. The ones with the '\x..' encoding are bytes with values above 127. Well at least the data is there. Thank you for helping me unmderstand what is going on.
[13:22:15] <grawity> if you actually need a list of *integers*, then instead of .append(byte) try .append(ord(byte))
[13:22:25] <grawity> or .append(byte[0])
[13:22:27] *** Joins: dvx (~dvx@5.181.92.64)
[13:22:30] <Deneb> ...and spotting my concantenation mistake!
[13:22:42] <bjs> Deneb: yes, because the ones above 127 aren't in ASCII so it can't show you the ASCII character it corresponds to.  You can ask Python to print the hex out or whatever: print([hex(b) for b in plotdataset['plotdata']])
[13:23:08] <bjs> then you'll get [0x4E, 0x30, ...]  instead of b'N0...'
[13:23:32] *** Joins: Deana (~Deana@2a01:540:646f:2c00:4ed:1984:4f76:a096)
[13:23:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[13:23:55] *** Parts: erkan (~erkan@p200300d34711965841def2748f5ba63d.dip0.t-ipconnect.de) ()
[13:23:59] <Deneb> grawity: that's a thought. At some point the values will need to be converted to integers to draw a graph so that's might not be a bad idea.
[13:24:08] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[13:24:41] <Deneb> bjs: thanks. Might use that hex approach.
[13:24:44] *** Joins: loupixel (~loupixel@82.66.77.174)
[13:25:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: foood)
[13:25:25] *** Parts: loupixel (~loupixel@82.66.77.174) ()
[13:25:34] <taeaad> Is there a limitation for amount of columns in Pandas when reading a CSV file?
[13:25:42] <grawity> (if you went with my bytearray suggestion, its elements automatically become integers so ord() is not needed)
[13:25:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:26:07] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[13:26:29] *** Quits: montpol (montpol@fine.mouses.xyz) (Quit: The Lounge - hosted by mouses.xyz)
[13:26:48] *** Joins: montpol (montpol@fine.mouses.xyz)
[13:26:54] *** Joins: raxor2k (~raxor2k@78.158.254.45)
[13:28:32] *** Quits: montpol (montpol@fine.mouses.xyz) (Client Quit)
[13:28:33] <Deneb> grawity: I think I will do what you suggest and go with bytearray(). Thanks.
[13:28:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[13:31:08] <grawity> bytearrays can be directly converted to "regular" lists containing integer values
[13:31:10] <rendar> let's say my application sends JSON for interprocess communication (sending commands, events, error, responses and so on), so it uses JSON which will be converted (or marshalled/unmarshalled) straight to python dicts, to use the data. Now my question is: using raw python dict is error prone to ensure all keys are always the same, and that some dicts are "compliant" and some other aren't, what would be the best approach to achieve this?
[13:31:33] <grawity> but I wonder if you're going to use some numpy stuff for this anyway
[13:32:31] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:33:18] <bjs> rendar: what do you mean by "compliant"  (you even put it in quotes yourself...)
[13:33:43] <rendar> well, that a dict with the key "command" is ok, without that key is a malformed request
[13:33:51] <deniska> rendar: you are probably looking for something like pydantic or marshmallow
[13:34:37] <rendar> deniska, maybe yes, but first of going into a library, i wish to get which are the best methods in the language itself
[13:34:55] <bjs> rendar: well the best method is a class
[13:34:59] <grawity> hmm at minimum, I'd have methods like send_command(cmd, params) send_event() etc, and not expose the actual JSON structure to callers
[13:35:15] <bjs> rendar: that ensures your objects have the required structure, the libraries like pydantic and marshmallow and attrs are just helpers to make this class and to produce the json from it
[13:35:30] <taeaad> I have a 15 GB CSV with 3000 columns that kills on 60 GB memory and looks like it kills the python process on 120 GB memory too.
[13:35:32] *** Joins: Harlin (~DonQixote@75-163-219-39.clsp.qwest.net)
[13:35:48] <taeaad> That is a bit surprising to me.
[13:35:50] <bjs> rendar: to do it manually you'd create a Command class (for example), with a Command.from_json classmethod and a Command.to_json method (for example).
[13:35:55] <taeaad> Using pandas.read_csv()
[13:36:20] <rendar> bjs, i see
[13:36:34] <rendar> so the best solution is having classes, and not raw dicts
[13:36:36] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:37:03] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[13:37:08] <bjs> rendar: well this is Python after all,  classes are a very powerful and useful tool
[13:37:10] *** Quits: giusb (~giusb@user/giusb) (Quit: WeeChat 3.3)
[13:37:24] *** Joins: Hercule (~ben@37.228.214.244)
[13:38:12] <taeaad> Why does Pandas never cease to disappoint...
[13:38:20] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[13:39:13] *** Parts: Hercule (~ben@37.228.214.244) ()
[13:39:22] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:39:50] <rendar> yes
[13:40:22] <deniska> 120gb is just 15gb copied 8 times, which can easily happen if the code doesn't take explicit care to copy things as little as possible
[13:40:31] <rendar> that's incredible, having that CSV entirely in RAM would need 15Gb, is that possible that pandas enlarge that size by 10x?
[13:40:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[13:40:40] <deniska> copying may include resizing a dynamic array
[13:41:40] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:42:25] <taeaad> There is no code other than pandas.read_csv() at that stage.
[13:42:43] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[13:42:51] <deniska> sure, I'm not talking about your code specifically
[13:43:03] <taeaad> But I can add a few flags just to make sure it's not something right after read_csv.
[13:44:14] *** Quits: Deana (~Deana@2a01:540:646f:2c00:4ed:1984:4f76:a096) (Quit: Konversation terminated!)
[13:44:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:44:50] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:44:54] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[13:46:01] <raxor2k> I want to update all elements except the first one in the list. Is this not possible at all without looping in to the list, like this somehow? https://bpa.st/XACA
[13:46:28] *** Parts: quite (~quite@user/quite) ()
[13:46:46] <bjs> raxor2k: no you can't avoid looping over the list.  Maybe you want something like numpy that can do the looping for you behind the scenes though
[13:47:02] <grawity> not with standard lists; probably the closest thing is 'a_list = a_list[:1] + [x+1 for x in a_list[1:]]'
[13:47:30] <Repiphany> a_list[1:] = [v + 1 for v in a_list[1:]]
[13:47:49] <grawity> oh I keep forgetting it's possible to assign to slices
[13:47:59] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[13:48:16] <grawity> numpy definitely seems to support this though, numpy.array([2,7,8,9]) + 1 gives me numpy.array([3,8,9,10])
[13:48:20] <rendar> well, if i have classes, what is the bestway to pass a dict to the JSON apis? having a toDict() method?
[13:48:44] <taeaad> I think the only thing to really do is to drop sparse lines; I have some lines with zero columns.
[13:48:55] <taeaad> I supposed the delimiter wouldn't make a difference?
[13:49:19] <raxor2k> thanks for answer guys!
[13:49:23] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:49:36] <bjs> rendar: you could just have a `def json(self): return json.dumps({...})` method
[13:49:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:51:01] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[13:51:14] *** Joins: sgn (~sgn@user/sgn)
[13:51:37] *** Quits: ketiv (~ketiv@92.40.202.220.threembb.co.uk) (Ping timeout: 240 seconds)
[13:51:45] <deniska> taeaad: or, depending on what you want to do with data, you may try reading file in batches
[13:52:01] *** Joins: legola (~legola@46.235.100.54)
[13:52:30] <deniska> taeaad: or put it in something more persistent-storage oriented, maybe clickhouse?
[13:52:31] <rendar> bjs, i can't have it, since i have complex json APIs which can read partial JSON data from sockets/pipes
[13:53:02] *** Quits: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:54:00] *** Joins: ketiv (~ketiv@92.40.195.48.threembb.co.uk)
[13:55:27] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[13:57:21] *** Joins: shad (~shad@user/shad)
[13:57:26] *** Joins: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de)
[13:58:07] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:58:27] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:58:40] <taeaad> deniska: Data for ML.
[13:59:14] <rendar> what is clickhouse? something like parquet or hfd5?
[13:59:17] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[13:59:25] <taeaad> But I think that it can handle NaN or completely missing entries. I think I should try that since it would make the file rather smaller.
[13:59:32] <taeaad> What is clickhouse?
[14:00:08] <taeaad> Sounds like what you should call the server you use for click bait.
[14:00:26] <deniska> taeaad: ah, it's a database for OLAP-like data manipulation, I guess something you'd use pandas for, but for data which don't fit in RAM anymore
[14:00:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:01:05] <deniska> taeaad: I don't think it's right for your usecase though
[14:01:45] <taeaad> deniska: I can use SQL where pandas fails, but at some stage I need to use Pandas anyway.
[14:02:05] <taeaad> I think the best option is to drop 0s in favour of completely missing entries.
[14:02:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:02:56] <ChrisWarrick> do you really need to use pandas at some stage?
[14:03:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:03:33] *** Lord_of_Life_ is now known as Lord_of_Life
[14:05:06] <taeaad> ChrisWarrick: If you can do LightGBM or CatBoost in C, maybe I'll switch camp.
[14:05:22] <taeaad> (I think it's C code anyway.)
[14:07:31] <ChrisWarrick> taeaad: the docs say that lightgbm seems to be usable with C, R, and a CLI; the Python docs mention numpy and not pandas; CatBoost seems to support Python, Spark, R
[14:07:32] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:08:10] <rendar> i have this `stdin, _ = await aioconsole.get_standard_streams()` to get the stdin endpoint, but why this is an async function? i can't use this in __init__ :(
[14:09:09] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[14:09:32] *** Joins: sgn (~sgn@user/sgn)
[14:10:14] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:10:38] *** Quits: qpdb (~qpdb@user/qpdb) (Quit: WeeChat 3.3)
[14:11:04] <taeaad> ChrisWarrick: Right, but I think the Pandas limitation here is just memory to store the data. It should still call something else for the main (and most intensive) routine. But it doesn't make sense to use more memory for Pandas than for LightGBM, CatBoost or XGBoost.
[14:11:46] *** Joins: mq^v (~user@217-149-174-72.nat.highway.telekom.at)
[14:11:54] <taeaad> I've noticed before that ML is somewhat complicated in terms of using all the hardware. You may have more memory than you need, or you may manage with a CPU, or you may need a GPU, etc.
[14:12:14] <rendar> any help? i have to __init__ a class with that stdin, but i can't call an await inside __init__ ..any ideas?
[14:12:19] <taeaad> And deciding what exactly is each model (i.e., output .bin file) keeps changing the picture.
[14:12:28] *** Joins: zmt01 (~zmt00@user/zmt00)
[14:12:28] <ChrisWarrick> rendar: why do you need to __init__ a class with that stdin?
[14:12:46] <rendar> ChrisWarrick, because that class will use stdin later
[14:12:57] <ChrisWarrick> rendar: you don’t need it in __init__
[14:13:16] <ChrisWarrick> rendar: there’s a cache in get_standard_streams, so it’s okay to call it in every method
[14:13:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[14:13:23] <rendar> ChrisWarrick, https://bpa.st/DJGA
[14:13:44] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Quit: Quit)
[14:13:53] <bjs> rendar: you can't await in __init__, you'll have to make an async method to call after init, or an async function/classmethod to call before creating the class.
[14:14:16] <rendar> bjs, yes that's right, if you read the code https://bpa.st/DJGA -- you'll get why i wish it into __init__
[14:14:28] <bjs> rendar: okay but the fact you "wish" to do it doesn't change the fact you can't do it :P
[14:14:38] <rendar> lol
[14:15:07] <deniska> async factory pattern :P
[14:15:26] <bjs> rendar: I personally like an async @classmethod that then passes things to __init__
[14:15:52] <rendar> bjs, can you show me a couple of lines of code for that?
[14:16:09] *** Joins: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net)
[14:16:48] <bjs> rendar: uh I'm not really sure what you're looking for, you just make a @classmethod that is an async def
[14:17:01] <bjs> that then makes an instance of the class
[14:17:37] <rendar> bjs, you mean like `my_instance = await MyClass.create_from_data(data...)` ?
[14:17:47] <bjs> rendar: for example yes
[14:17:56] <rendar> yes i see
[14:18:06] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[14:18:35] <bjs> rendar: (i think it's common to drop the create_ part of the name)
[14:18:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:18:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[14:18:46] <rendar> what is the best way to have an async function that does nothing? `async def x(self): pass` ? my point is that i don't want to change the flow of execution when this no-op await function is ran
[14:18:50] <bjs> rendar: so you can just have an async classmethod `from_standard_stream` or something
[14:18:55] <bjs> rendar: yes like that
[14:19:07] *** Joins: digitalice__ (~digitalic@2800:a4:281c:7300:f4bf:6bd2:26e9:a01a)
[14:19:32] <rendar> python will smart enough to check that if an async function has 'pass' inside, it won't change the execution flow executing some other coroutine waiting?
[14:19:44] *** Joins: horner (~horner@host86-131-44-95.range86-131.btcentralplus.com)
[14:20:07] <bjs> rendar: no Python isn't checking for pass, nothing special is happening except the normal rules.
[14:20:10] *** Joins: jinsun (~quassel@user/jinsun)
[14:20:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:21:12] *** Quits: parv (~quass@user/parv) (Quit: parv)
[14:21:16] <bjs> rendar: execution (may) switch between coroutines when you await a future
[14:21:17] <rendar> bjs, the point is that at every 'await' execution flow will change to the next coroutine waiting, and i want to prevent this if i'm not running anything
[14:21:23] <bjs> but coroutines aren't futures
[14:21:29] <bjs> rendar: that's not quite correct
[14:21:30] <rendar> but i'm not awaiting a future! it's a no-op
[14:21:57] *** Quits: digitalice_ (~digitalic@2800:a4:2964:8900:f4bf:6bd2:26e9:a01a) (Ping timeout: 240 seconds)
[14:22:02] <bjs> rendar: exactly!
[14:22:03] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:3073:e411:23e7:f134)
[14:22:07] <bjs> rendar: so there's no switching
[14:22:36] <bjs> infact awaiting a no-op async def is like not doing the await at all,  so I question why you want it
[14:23:07] <rendar> bjs, now i will show you
[14:23:41] <rendar> bjs, https://bpa.st/MGDQ
[14:24:55] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[14:25:05] *** Quits: ihristov (~ihristov@217.145.94.71) (Ping timeout: 256 seconds)
[14:25:13] <bjs> rendar: looks fine to me
[14:25:20] *** Joins: sgn (~sgn@user/sgn)
[14:26:00] *** Joins: driib29 (~driib@185.195.233.162)
[14:26:05] <rendar> ok
[14:26:10] *** Quits: bluedust (~bluedust@117.241.185.116) (Remote host closed the connection)
[14:26:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[14:26:54] *** Joins: Balzy (~Balzy@host-79-16-86-190.retail.telecomitalia.it)
[14:27:49] *** Quits: driib2 (~driib@185.195.233.142) (Ping timeout: 240 seconds)
[14:27:49] *** driib29 is now known as driib2
[14:28:34] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:29:09] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Read error: Connection reset by peer)
[14:30:51] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[14:30:53] *** Quits: nicko (~iClass@222.211.30.113) (Ping timeout: 256 seconds)
[14:31:51] *** Joins: nicko (~iClass@221.236.54.23)
[14:33:07] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[14:33:40] *** Joins: tejr (~tejr@user/tejr)
[14:35:12] <mq^v> Is it generally advise against running 'python -m pip install' as root user too?
[14:35:49] <ChrisWarrick> mq^v: yes, never run pip as root
[14:35:57] <ChrisWarrick> mq^v: use a venv
[14:35:59] *** Quits: panella32 (~textual@45.130.83.164) (Ping timeout: 256 seconds)
[14:36:08] <mq^v> virtual enviroment?
[14:36:09] *** Joins: bluedust (~bluedust@117.241.185.116)
[14:36:17] <ChrisWarrick> mq^v: http://chriswarrick.com/blog/2018/09/04/python-virtual-environments/
[14:36:32] <mq^v> thank you very much
[14:37:58] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[14:38:15] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[14:38:37] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[14:39:01] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[14:39:24] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Max SendQ exceeded)
[14:39:27] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[14:39:52] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[14:39:59] *** Joins: panella32 (~textual@164.215.227.223)
[14:40:02] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:41:06] *** Joins: thiras (~thiras@user/thiras)
[14:41:44] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[14:42:01] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[14:42:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[14:43:25] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:43:58] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[14:44:29] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:44:55] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[14:44:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:45:01] *** Quits: molt (~molt@46.33.200.12) (Ping timeout: 240 seconds)
[14:45:10] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[14:45:57] *** Joins: tscopp (~tms@c-76-115-26-235.hsd1.or.comcast.net)
[14:46:32] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[14:46:55] *** Joins: Klinda (~superleag@user/klinda)
[14:47:40] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:47:55] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[14:47:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:48:29] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:49:09] *** meti_ is now known as meti
[14:50:01] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[14:50:49] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:50:56] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[14:51:25] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:52:37] *** Joins: ice9 (~ice9@user/ice9)
[14:53:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:54:17] *** Quits: tscopp (~tms@c-76-115-26-235.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[14:54:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:54:37] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[14:55:23] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[14:56:15] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[14:56:18] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[14:56:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[14:56:37] *** Joins: fikran (~fikran@user/fikran)
[14:56:38] *** Joins: ice9 (~ice9@user/ice9)
[14:58:06] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:58:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-050.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[15:01:06] <vanessa> is it always important to use flush=True if end!='\n' in printf function?
[15:01:06] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[15:01:16] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[15:03:22] <leduyquang753> Only flush if you need to.
[15:03:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:04:10] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:04:11] *** Quits: bluedust (~bluedust@117.241.185.116) (Remote host closed the connection)
[15:04:32] *** Joins: Vonter (~Vonter@user/vonter)
[15:04:33] *** Joins: sgn (~sgn@user/sgn)
[15:04:40] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:05:11] <vanessa> sometime mysteriously python doesn't output to STDOUT until encounters a newline.
[15:05:27] <leduyquang753> It's something called buffering.
[15:05:53] <leduyquang753> Hence "flush if you need to", not "never flush" nor "flush everything".
[15:06:35] *** Quits: widp (~user@165.225.123.46) (Read error: Connection reset by peer)
[15:06:55] *** Quits: slbtty (~slbtty@2607:fea8:1d40:800::f7a7) (Quit: Konversation terminated!)
[15:07:09] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[15:07:59] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[15:08:17] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[15:10:18] *** Joins: zeden (~zeden@user/zeden)
[15:10:51] <Julian> vanessa: (Generally real programs shouldn't use print, it's a toy mostly for interactive use. But the same comments above will apply if you say, sys.stdout.write, flush if you need to, let things buffer if you don't.)
[15:11:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:11:41] *** Quits: ketiv (~ketiv@92.40.195.48.threembb.co.uk) (Ping timeout: 256 seconds)
[15:11:54] *** Joins: gioele (~gioele@user/gioele)
[15:13:17] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 240 seconds)
[15:13:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:13:24] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:13:57] *** Quits: BillyZane (~BillyZane@185.216.74.110) (Ping timeout: 240 seconds)
[15:15:31] *** Quits: trench (trench@user/trench) (Ping timeout: 256 seconds)
[15:15:43] <gioele> hi, in `class Foo: \\ x: int`, that is the technical term for the uninitialized `x`?
[15:15:43] *** Joins: trench (trench@user/trench)
[15:15:56] <gioele> "attribute declaration"?
[15:16:44] <PJBoy> I don't think that declares anything
[15:17:16] <ChrisWarrick> I’d just call that a type annotation
[15:17:30] <PJBoy> I'm surprised it's not an error
[15:17:36] *** Quits: Enitin (~Enitin@82.102.22.85) (Remote host closed the connection)
[15:17:41] <ChrisWarrick> PJBoy: why would it be one?
[15:17:57] <PJBoy> I don't think it does anything
[15:18:15] <ChrisWarrick> it is saved in annotations
[15:18:18] <PJBoy> can you just write names of things in a class?
[15:18:22] <PJBoy> oh
[15:18:36] <gioele> ChrisWarrick: a type annotation on an attribute that does not exist? So its meaning is "if `x` ever becomes an attribute, it will have this type"?
[15:19:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:19:07] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[15:19:08] <ChrisWarrick> gioele: type annotations don’t have much meaning on their own, but yes, that’s how mypy would interpret it
[15:19:23] <gioele> ChrisWarrick: thanks
[15:19:41] <PJBoy> neat
[15:19:53] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Client Quit)
[15:20:03] <gioele> ChrisWarrick: pycharm also interpret it in that way. I just wanted to make sure it was not by accident.
[15:20:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:20:07] <ChrisWarrick> the modern data type definition libraries (dataclass, attr, pydantic, and friends) make use of that
[15:20:28] <ChrisWarrick> and it is common for attributes to only get their value in __init__
[15:20:45] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[15:21:23] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[15:21:24] *** Joins: cdown (~cdown@188.214.11.14)
[15:21:45] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[15:22:03] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[15:22:41] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[15:23:27] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-050.client.tudelft.eduvpn.nl)
[15:23:43] *** willcl_ark_ is now known as willcl_ark
[15:24:16] *** Parts: gioele (~gioele@user/gioele) ()
[15:24:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[15:25:01] *** Joins: tristan_ (~tristan@223.62.173.36)
[15:25:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:25:27] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:25:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:50] *** Joins: sgn (~sgn@user/sgn)
[15:26:29] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Quit: Quit)
[15:27:01] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:29:13] *** Joins: esther (~esther@2607:fb90:5fe9:de88:3a2e:5632:c0f1:36d6)
[15:29:32] *** Quits: Sabry (~Sabry@197.37.126.219) (Quit: Client closed)
[15:30:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:31:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:43] *** Joins: jmd (~user@de.cellform.com)
[15:33:14] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[15:33:17] *** Quits: esther (~esther@2607:fb90:5fe9:de88:3a2e:5632:c0f1:36d6) (Ping timeout: 240 seconds)
[15:33:31] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[15:33:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:34:06] *** Joins: molt (~molt@46.33.200.12)
[15:35:35] *** Joins: causa_sui (~causasui@68.60.125.136)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:34] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[15:36:41] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[15:38:08] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:38:44] *** Quits: Terexen (~terexen@user/terexen) (Remote host closed the connection)
[15:38:57] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[15:39:10] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:39:20] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:39:41] *** Joins: sgn (~sgn@user/sgn)
[15:40:27] *** Quits: causa_sui (~causasui@68.60.125.136) (Ping timeout: 256 seconds)
[15:40:35] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Ping timeout: 256 seconds)
[15:40:41] *** Joins: Sadale (~Sadale@user/sadale)
[15:43:44] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:43:57] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[15:43:58] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[15:44:08] *** Joins: sgn (~sgn@user/sgn)
[15:45:46] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:45:57] *** Joins: maxzor (~maxzor@2a01cb04054faa00c1bb1f1ac4060d73.ipv6.abo.wanadoo.fr)
[15:46:08] *** Quits: mq^v (~user@217-149-174-72.nat.highway.telekom.at) (Read error: Connection reset by peer)
[15:46:32] *** Joins: mq^v (~user@217-149-174-72.nat.highway.telekom.at)
[15:47:30] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[15:47:41] *** Joins: phlixi (~phlixi@aftr-62-216-205-153.dynamic.mnet-online.de)
[15:48:53] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:49:02] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[15:49:25] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[15:50:13] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[15:50:16] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:50:17] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[15:50:45] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:50:46] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:51:02] *** Joins: Sadale (~Sadale@user/sadale)
[15:51:02] *** Joins: tejr (~tejr@user/tejr)
[15:51:24] *** Joins: betuxy (~betuxy@p579ad46c.dip0.t-ipconnect.de)
[15:51:42] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:52:20] *** flooded is now known as _flood
[15:52:48] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Quit: Quit)
[15:54:44] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[15:54:54] *** Quits: obvs (~peteh@140.238.195.238) (Changing host)
[15:54:54] *** Joins: obvs (~peteh@user/PeteH)
[15:55:10] *** Joins: skraito (~skraito@user/skraito)
[15:55:24] *** Joins: willcl_ark (~willcl-ar@user/willcl-ark/x-8282106)
[15:55:26] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[15:57:48] *** Joins: Sadale (~Sadale@user/sadale)
[15:58:48] *** Joins: roxfan (~roxfan@185.206-129-109.adsl-dyn.isp.belgacom.be)
[16:00:26] *** Quits: jringstad__ (~Amadiro@84.209.11.12) (Quit: Leaving)
[16:00:43] *** Joins: Amadiro (~Amadiro@84.209.11.12)
[16:01:13] *** Joins: xkuru (~xkuru@user/xkuru)
[16:01:47] *** Joins: BillyZane (~BillyZane@192.145.80.118)
[16:03:02] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[16:03:09] *** Joins: drogas (~drogas@jump2.jet.uk)
[16:03:11] *** Quits: raxor2k (~raxor2k@78.158.254.45) (Remote host closed the connection)
[16:03:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[16:04:32] *** Joins: debayer9 (~debayer@cpe-76-169-99-230.socal.res.rr.com)
[16:04:53] *** Quits: debayer9 (~debayer@cpe-76-169-99-230.socal.res.rr.com) (Client Quit)
[16:05:41] *** Joins: agonhajdari (~textual@user/agonhajdari)
[16:05:45] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[16:06:14] *** Joins: Sadale (~Sadale@user/sadale)
[16:06:25] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[16:06:25] *** Joins: menace (~someone@user/menace)
[16:06:37] *** Quits: vanessa (~annada@103.160.128.7) (Quit: WeeChat 3.4)
[16:08:32] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[16:09:55] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (Ping timeout: 256 seconds)
[16:12:38] *** Joins: Sadale (~Sadale@user/sadale)
[16:12:44] *** Quits: BillyZane (~BillyZane@192.145.80.118) (Quit: Leaving)
[16:13:14] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[16:13:16] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[16:14:45] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:15:25] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 240 seconds)
[16:16:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e050:482e:d5a8:4b1b)
[16:16:02] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e050:482e:d5a8:4b1b) (Changing host)
[16:16:02] *** Joins: skapata (~Skapata@user/skapata)
[16:17:37] *** Quits: wombawomba (~andre@89-253-80-164.customers.ownit.se) (Ping timeout: 240 seconds)
[16:18:24] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[16:18:42] *** Joins: drogas (~drogas@jump2.jet.uk)
[16:18:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[16:19:46] *** Joins: Trieste (~T@user/pilgrim)
[16:19:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:20:05] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:20:11] *** Joins: BillyZane (~BillyZane@185.202.221.113)
[16:21:46] *** Quits: mq^v (~user@217-149-174-72.nat.highway.telekom.at) (Quit: Leaving)
[16:22:37] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[16:22:40] *** cdown_ is now known as cdown
[16:23:24] *** Joins: DaNeenjah (~jake@adsl-74-230-4-35.hsv.bellsouth.net)
[16:24:32] *** Joins: Trieste_ (T@user/pilgrim)
[16:25:17] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 240 seconds)
[16:25:46] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:27:17] *** Quits: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 240 seconds)
[16:27:56] *** Trieste_ is now known as Trieste
[16:27:58] *** Joins: bluedust (~bluedust@117.241.185.116)
[16:28:03] *** Joins: mungustas (~arnas@92.61.33.111)
[16:28:11] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[16:28:51] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:29:19] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:29:51] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:30:14] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:30:20] *** Joins: Harlin_ (~DonQixote@75-163-135-150.clsp.qwest.net)
[16:30:30] *** Joins: carl- (~carl-@185.103.188.130)
[16:30:44] <mungustas> hey how do I check the status ? https://bpa.st/W73A
[16:30:47] *** Joins: wombawomba (~andre@89-253-80-164.customers.ownit.se)
[16:32:37] *** Quits: Harlin (~DonQixote@75-163-219-39.clsp.qwest.net) (Ping timeout: 240 seconds)
[16:33:22] *** alexyov9 is now known as alexyov
[16:33:54] *** Joins: ketiv (~ketiv@92.40.195.121.threembb.co.uk)
[16:39:44] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:40:07] *** Quits: nilson (~nilson@98.242.70.3) (Remote host closed the connection)
[16:43:01] *** Joins: nilson (~nilson@2601:c4:c430:334:4601:bbff:feaf:9214)
[16:45:52] *** menace is now known as Deknos
[16:45:52] *** Quits: tristan_ (~tristan@223.62.173.36) (Remote host closed the connection)
[16:46:12] *** Joins: tristan_ (~tristan@223.62.173.36)
[16:48:57] *** Joins: Naan (~Naan@user/naan)
[16:49:24] *** Joins: marcello42 (~mp@2001:1a81:12d6:fe00:339f:db3c:2449:7044)
[16:54:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:54:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:55:05] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:57:18] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:58:37] *** Quits: nilson (~nilson@2601:c4:c430:334:4601:bbff:feaf:9214) (Ping timeout: 240 seconds)
[16:58:40] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:58:52] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[16:59:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[17:00:37] *** Joins: dante-as (~dante-as@86.121.90.224)
[17:02:07] <dante-as> Hi guys, is any way to use logging.fileHandler to save output with colors in a file?
[17:02:59] *** Joins: nilson (~nilson@98.242.70.179)
[17:03:43] <Swayze> https://pypi.org/project/coloredlogs/
[17:03:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:03:57] <Swayze> you can try this
[17:03:59] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[17:04:40] *** Quits: betuxy (~betuxy@p579ad46c.dip0.t-ipconnect.de) (Quit: Connection closed)
[17:05:09] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:05:32] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:05:58] *** Joins: fikran (~fikran@user/fikran)
[17:07:18] *** kmh is now known as kmhkmh
[17:08:22] *** Quits: nomic (~nomic@85.203.36.80) (Quit: Leaving)
[17:08:50] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:09:50] <Swayze> @ dante-as
[17:10:36] <dante-as> Swayze: Thanks for the idea, but would break a bit the logic of the program. It's any other way?
[17:13:00] <exarkun> dante-as: What would it break and how?
[17:13:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[17:13:24] <exarkun> It's hard to know what would be better if we don't know what's wrong with the suggested solution
[17:14:05] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:14:33] *** Joins: paulpaul1076 (~paulpaul1@95-29-4-72.broadband.corbina.ru)
[17:14:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:15:13] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[17:15:21] *** Quits: dante-as (~dante-as@86.121.90.224) (Quit: Client closed)
[17:16:58] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:f0a4:dbf:ce53:8dac) (Quit: Leaving)
[17:17:17] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[17:17:49] *** Quits: Harlin_ (~DonQixote@75-163-135-150.clsp.qwest.net) (Quit: Leaving)
[17:17:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:18:05] *** Joins: Harlin (~DonQixote@75-163-135-150.clsp.qwest.net)
[17:19:09] *** Joins: lyr (~lyr@user/lyr)
[17:20:05] *** Joins: bluedust_ (~bluedust@117.241.191.1)
[17:20:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:20:47] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[17:21:12] *** Joins: kts (~kts@103.73.237.74)
[17:22:16] *** Joins: Hackerpcs (~user@user/hackerpcs)
[17:22:27] *** Quits: bluedust (~bluedust@117.241.185.116) (Ping timeout: 256 seconds)
[17:23:01] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[17:23:01] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[17:23:05] *** Joins: five6433 (~five6@8.40.26.50)
[17:23:06] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:23:43] *** Quits: wombawomba (~andre@89-253-80-164.customers.ownit.se) (Ping timeout: 256 seconds)
[17:23:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[17:24:36] *** Joins: remote (~self@user/hackers)
[17:25:09] *** Joins: Sylhouette (~johan@web01.vandenboogaard.me)
[17:25:41] *** Quits: keinbock (uid6451@id-6451.helmsley.irccloud.com) ()
[17:26:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:26:42] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:f6c8:e710:2771:943d)
[17:27:19] *** Joins: sambauer64 (~sambauer6@86.121.75.23)
[17:28:29] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:28:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:30:01] *** Joins: pycode (~pycode3@2001:b07:5d28:551:df8:c778:4c93:8727)
[17:31:05] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[17:31:05] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[17:31:05] *** finn_elija is now known as FinnElija
[17:31:14] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:31:39] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:32:05] *** Joins: katsuragi (katsuragi@tilde.institute)
[17:32:08] <grym> i mean, you _can_, but do you really want to litter your files with ansi escapes
[17:33:22] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:34:08] *** Quits: bluedust_ (~bluedust@117.241.191.1) (Remote host closed the connection)
[17:34:15] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:34:55] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:35:16] *** Joins: nyah (~nyah@2a02:c7f:6ea4:ec00:55b7:77f:4ccb:c03c)
[17:35:25] *** Quits: ubert (~Thunderbi@p200300ecdf0994db19c621579c5ac118.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:36:14] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:37:41] *** Quits: RiFo (~RiFo@user/rifo) (Read error: Connection reset by peer)
[17:39:26] *** Quits: anon-angler (~anon-angl@109.126.42.47) (Remote host closed the connection)
[17:39:56] *** Joins: ubert (~Thunderbi@p200300ecdf0994dbb267d7c5a67baed4.dip0.t-ipconnect.de)
[17:40:32] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:3073:e411:23e7:f134) (Ping timeout: 240 seconds)
[17:41:36] *** Joins: Roey (~Roey@user/Roey)
[17:43:28] *** Joins: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com)
[17:43:55] *** Joins: abraxas (~abraxas@ip68-14-53-156.ri.ri.cox.net)
[17:47:56] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[17:49:01] *** Joins: alevykh (~alevykh@92-127-119-178-bbc-dynamic.kuzbass.net)
[17:49:10] *** Joins: DerpGusta_ (~quassel@user/derpgusta)
[17:50:56] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[17:51:01] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 268 seconds)
[17:52:00] *** Joins: bluedust (~bluedust@117.241.191.1)
[17:52:05] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[17:52:32] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[17:52:46] *** Joins: Guest57 (~textual@142.126.153.161)
[17:53:23] *** Joins: vlm (~vlm@user/vlm)
[17:53:39] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[17:54:07] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:54:22] *** Quits: Guest57 (~textual@142.126.153.161) (Client Quit)
[17:54:40] *** Joins: georgios (~georgios@user/georgios)
[17:54:40] *** Joins: deno (~deno@142.126.153.161)
[17:55:53] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[17:56:15] *** Joins: nomic (~nomic@185.198.243.165)
[17:58:23] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:58:32] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:59:09] *** Joins: BlueSky (~BlueSky@user/bluesky)
[18:00:42] *** Joins: Vonter (~Vonter@user/vonter)
[18:02:09] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:03:50] <ringo__> is there a stdlib api docs which actually has *full* functions signature?
[18:04:27] <ringo__> for example, https://docs.python.org/3/library/functions.html, function abs(x), it returns what, int? I need to read the whole sentence to figure out the return value of a function?
[18:04:48] <ringo__> (or argument for that matter)
[18:05:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:05:44] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[18:05:51] <bjs> ringo__: well like it says it doesn't just support int
[18:06:00] <bjs> int, float, or any type that supports it
[18:07:01] <bjs> in general you can find actual type annotations for the functions in the typeshed https://github.com/python/typeshed/blob/master/stdlib/builtins.pyi
[18:07:32] <bjs> I wonder if it would be useful to include the typeshed annotation in the docs, or whether it would be more confusing
[18:07:49] <ringo__> Thanks bjs ! I'll bookmark this typeshed
[18:08:09] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:08:13] <SnoopJ> abs() will do whatever __abs__() on the type does, which can be different for any given type. You'd expect T -> T but it's not guaranteed.
[18:08:18] <ringo__> I used abs() as an example. In fact I was wondering what does print() return. I *guessed* it returns None, but the docs won't say
[18:09:05] <ringo__> I could do a try-it-yourself approach but I was puzzled why the docs simply won't give you full fn signature, ie print(..) -> None
[18:09:06] *** Joins: d3sync (~d3sync@62.1.127.60.dsl.dyn.forthnet.gr)
[18:09:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[18:09:17] <SnoopJ> that one is just an omission :)
[18:09:45] <ringo__> ah :P
[18:10:57] *** Quits: trench (trench@user/trench) (Ping timeout: 240 seconds)
[18:11:56] *** Joins: chl (~chl@user/chl)
[18:12:07] <chl> Shouldnt the following: `python3 -W ignore manage.py` supress deprecation warnings?
[18:13:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:13:27] <bjs> chl: yes, -W ignore should ignore all Python warnings
[18:13:47] <SnoopJ> chl, yes but warnings can be weird sometimes, and the program itself can modify the behavior `-W ignore` will give you
[18:14:58] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:15:31] <chl> So only solution is probaly to use the warnings package and add it to manage.py I guess
[18:15:44] *** Joins: Magi (~Magi@user/Magi)
[18:16:13] <SnoopJ> chl, it's hard to say since we can't see what's *in* manage.py
[18:19:48] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:20:06] *** Joins: blcyber (~blcyber@216.74.235.178)
[18:20:25] <chl> Yeah, youre right. I found another solution.
[18:20:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:21:32] *** Parts: alevykh (~alevykh@92-127-119-178-bbc-dynamic.kuzbass.net) (Leaving)
[18:21:37] *** Quits: paulpaul1076 (~paulpaul1@95-29-4-72.broadband.corbina.ru) (Remote host closed the connection)
[18:23:25] *** Joins: theo1 (~theo@90.85.172.253)
[18:23:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[18:24:30] <SnoopJ> ringo__, I submitted a PR for print() since that's such an easy thing to address https://bugs.python.org/issue46282
[18:24:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:25:13] *** Joins: wombawomba (~andre@89-253-80-164.customers.ownit.se)
[18:25:26] *** Quits: theo1 (~theo@90.85.172.253) (Client Quit)
[18:26:37] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 256 seconds)
[18:27:01] *** Joins: yaalon (~yaalon@2806:102e:18:2202:fdf3:2f5:782a:cef7)
[18:28:20] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:28:26] *** Joins: trench (~trench@user/trench)
[18:29:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[18:29:21] *** Joins: slav0nic (slav0nic@python.su)
[18:30:19] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:31:04] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[18:32:13] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Quit: Lost terminal)
[18:32:17] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[18:34:06] *** Joins: sedeki (~textual@user/sedeki)
[18:34:08] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:35:24] *** Joins: RawFiend (~textual@176.55.118.178)
[18:38:31] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:39:06] *** Joins: magla (~gelignite@55d42ff9.access.ecotel.net)
[18:41:25] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:44:36] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:45:01] *** Quits: Trieste (T@user/pilgrim) (Quit: Be well!)
[18:45:02] *** Quits: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:45:25] *** Quits: yaalon (~yaalon@2806:102e:18:2202:fdf3:2f5:782a:cef7) ()
[18:45:41] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[18:46:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:46:23] *** Joins: seednode99 (~seednode@user/seednode)
[18:46:49] *** Joins: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de)
[18:47:49] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[18:48:37] *** Quits: chl (~chl@user/chl) (Remote host closed the connection)
[18:51:18] *** Joins: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de)
[18:51:59] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 256 seconds)
[18:52:16] *** Quits: deno (~deno@142.126.153.161) (Read error: Connection reset by peer)
[18:54:12] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:54:16] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[18:55:02] *** Joins: dez (uid92154@user/dez)
[18:55:07] *** Quits: RawFiend (~textual@176.55.118.178) (Remote host closed the connection)
[18:55:44] *** Joins: elmc212 (~elmc212@2001:16b8:6860:4200:4c00:9c2e:8ff9:b728)
[18:57:56] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[18:58:35] *** Joins: noarb (~noarb@user/noarb)
[18:59:03] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:648:81b4:d3e4:eb09) (Quit: pvergain)
[18:59:35] *** Joins: dante-as (~dante-as@86.121.90.224)
[19:00:03] *** Joins: Trieste (T@user/pilgrim)
[19:00:29] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[19:00:35] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[19:00:44] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[19:04:24] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[19:04:29] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:05:00] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[19:05:35] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[19:07:39] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[19:08:24] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:11:24] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:12:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[19:13:40] *** Quits: gbmor (gbmor@gbmor.org) (Quit: WeeChat 3.3)
[19:14:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[19:15:19] *** Joins: fikran (~fikran@user/fikran)
[19:17:28] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[19:18:18] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Quit: Leaving)
[19:18:22] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:18:51] *** Joins: humberto1 (~humbertow@187.202.214.175)
[19:19:11] *** Quits: tristan_ (~tristan@223.62.173.36) (Ping timeout: 256 seconds)
[19:19:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:20:27] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[19:22:43] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 256 seconds)
[19:22:56] *** saroy is now known as bytehackr
[19:23:43] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Ping timeout: 256 seconds)
[19:23:51] *** Quits: botfathe1 (~botfather@shell1.dds.nl) (Quit: -)
[19:24:10] *** Joins: botfather (~botfather@shell1.dds.nl)
[19:24:43] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[19:24:56] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[19:27:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[19:27:48] *** Joins: vegii (~quassel@2001:470:1f18:3aa:30f::5439)
[19:28:05] *** Quits: vegii (~quassel@2001:470:1f18:3aa:30f::5439) (Client Quit)
[19:28:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[19:31:45] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[19:32:17] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[19:32:48] *** Joins: doko (~doko@2a02:8106:1a:7600:c6b2:f081:cad7:3f8a)
[19:32:59] *** Joins: vegii (~quassel@2001:470:1f18:3aa:30f::5439)
[19:33:36] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Read error: Connection reset by peer)
[19:33:49] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[19:35:11] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:35:50] *** Joins: carl- (~carl-@185.103.188.130)
[19:35:57] *** Quits: dante-as (~dante-as@86.121.90.224) (Quit: Client closed)
[19:37:09] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[19:37:19] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Ping timeout: 256 seconds)
[19:37:26] *** Joins: tristan_ (~tristan@223.62.172.54)
[19:41:53] *** Joins: zyzzyxdonta (~zyzzyxdon@ip5f5aa13a.dynamic.kabel-deutschland.de)
[19:42:37] *** Quits: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de) (Ping timeout: 240 seconds)
[19:43:14] *** Joins: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de)
[19:45:25] <SnoopJ> ringo__, looks like Steven D'Aprano may not look favorably on mentioning the return value of print(). He does bring up something worth mentioning, though: a return value of None is something of a convention for functions that mutate an object. E.g. list.sort() returns None because it modifies the list you're calling it on.
[19:46:32] *** Quits: cthulchu (~Cthulchu@184-090-172-137.res.spectrum.com) (Ping timeout: 256 seconds)
[19:47:13] <SnoopJ> And it's just the default return value if you don't specify something else, anyway. A fun piece of Python trivia is that modules have a return value, and it's None :)
[19:49:05] <grym> so fruitful!
[19:49:08] <grym> (hee hee)
[19:49:59] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::30)
[19:51:45] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[19:53:52] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.186)
[19:54:10] *** Quits: elmc212 (~elmc212@2001:16b8:6860:4200:4c00:9c2e:8ff9:b728) (Quit: elmc212)
[19:54:15] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[19:54:20] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[19:54:23] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:54:58] *** Quits: mmalter (~mmalter@88.126.10.237) (Read error: Connection reset by peer)
[19:54:59] <SnoopJ> c4017__, you were asking yesterday about a library that can extract information about symbols used in a program. Good sense of timing, I just saw this in a newsletter posting: https://developers.redhat.com/articles/2022/01/05/extracting-information-python-source-code
[19:55:57] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.19) (Ping timeout: 240 seconds)
[19:56:03] *** Joins: onichomp (~onichomp@2806:264:4404:809c:6189:925c:3bc:983e)
[19:56:06] *** Joins: JC5 (~X@user/jc5)
[19:56:12] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:57:09] *** Quits: ketiv (~ketiv@92.40.195.121.threembb.co.uk) (Ping timeout: 256 seconds)
[19:57:57] *** Quits: dulanic (~dulanic@47.187.144.163) (Remote host closed the connection)
[19:58:13] *** Joins: dulanic (~dulanic@47.187.144.163)
[19:58:46] *** Quits: rsx (~dummy@ppp-188-174-159-118.dynamic.mnet-online.de) (Quit: rsx)
[19:59:02] *** Quits: pycode (~pycode3@2001:b07:5d28:551:df8:c778:4c93:8727) (Ping timeout: 240 seconds)
[20:00:17] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 240 seconds)
[20:01:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[20:02:35] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[20:04:31] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[20:04:39] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:04:40] *** Quits: zyzzyxdonta (~zyzzyxdon@ip5f5aa13a.dynamic.kabel-deutschland.de) (Quit: Leaving)
[20:04:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:05:50] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[20:06:30] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:07:10] *** Quits: dulanic (~dulanic@47.187.144.163) (Remote host closed the connection)
[20:07:27] *** Joins: dulanic (~dulanic@47.187.144.163)
[20:08:00] *** Joins: ice9 (~ice9@user/ice9)
[20:09:48] *** Quits: inomoz (~inomoz@176.59.115.63) (Quit: WeeChat 3.4)
[20:11:37] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 240 seconds)
[20:13:01] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz) (Ping timeout: 256 seconds)
[20:14:23] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:15:35] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[20:15:51] *** Quits: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de) (Ping timeout: 256 seconds)
[20:17:07] *** Joins: shad (~shad@user/shad)
[20:17:44] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Remote host closed the connection)
[20:17:51] *** Quits: magla (~gelignite@55d42ff9.access.ecotel.net) (Quit: Stay safe!)
[20:17:57] *** Quits: Harlin (~DonQixote@75-163-135-150.clsp.qwest.net) (Remote host closed the connection)
[20:17:59] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[20:18:15] *** Joins: Harlin (~DonQixote@75-163-135-150.clsp.qwest.net)
[20:18:41] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:19:52] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[20:22:08] *** Joins: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de)
[20:24:46] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:f6c8:e710:2771:943d) (Quit: Leaving)
[20:25:08] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[20:25:59] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[20:26:24] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:26:46] *** Joins: Herculo (~ben@37.228.214.244)
[20:26:48] <bjs> SnoopJ: Stephen D'A does not look favourably on anything it feels like :P
[20:27:21] <SnoopJ> bjs, Barry responded on GitHub with mostly the same thing. I do agree with both of them that doing this for _everything_ is inappropriate, but they appear to be responding to a slightly different changeset
[20:27:53] *** Quits: tristan_ (~tristan@223.62.172.54) (Ping timeout: 256 seconds)
[20:28:00] <bjs> SnoopJ: I'm still wondering whether the docs should have the type annotation from the typeshed in them
[20:28:06] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:28:14] <bjs> looking at the builtins typeshed it does look like a bit of a mess sadly
[20:28:18] *** Joins: trace (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de)
[20:28:30] *** Quits: trace987 (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de) (Remote host closed the connection)
[20:28:31] <SnoopJ> I wasn't anticipating pushback on such a small change to doc for a function absolutely everybody knows, but perhaps I should've
[20:29:07] <cluelessperson> changing what exactly? :P
[20:29:09] <SnoopJ> I don't know where "you're gonna get None by default" is called out in the docs that a beginner will likely be reading
[20:29:12] <aphysically> bjs: I'm not sure strictly including the typeshed annotations are a good idea (partly because they can be such a mess), but I do think the docs can often do better than they do now in making clear types in a lot of cases
[20:29:21] <SnoopJ> cluelessperson, adding "The return value is None" to print()'s doc
[20:29:31] <aphysically> I'm not particularly sensitive to the way this is accomplished
[20:29:41] <SnoopJ> the doc for `return` does mention none-by-default at least
[20:29:46] <cluelessperson> SnoopJ, I thought things return none by default
[20:29:50] <SnoopJ> cluelessperson, they *do*
[20:30:07] <aphysically> often the docs are not sufficient to write the typeshed for example
[20:30:12] <bjs> aphysically: in general I think the docs could do with some sharpening up
[20:30:23] <cluelessperson> I think it would make sense to document that early and clearly in documentation about functions and python in general
[20:30:30] <SnoopJ> " In fact, even functions without a return statement do return a value, albeit a rather boring one. This value is called None (it’s a built-in name)." halfway down the page of https://docs.python.org/3/tutorial/controlflow.html#defining-functions
[20:30:34] <cluelessperson> but having it 100x in every description of a function is probably overkill
[20:30:38] <cluelessperson> barring annotaion
[20:30:47] <SnoopJ> and I agree with this
[20:30:58] <SnoopJ> it just also isn't what I'm proposing so I think there's some "slippery-slope" logic at play
[20:31:02] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:31:08] <bjs> I don't agree with that, documentation is supposed to be a reference not a novel you read front to back
[20:31:20] <bjs> it's okay if something is repeated 100x for each function if it's something as fundamental as its return value
[20:31:21] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:31:31] <SnoopJ> bjs, I pointed out on GH that I have seen `something = print(...)` often enough that it seems worth it to me.
[20:31:54] <bjs> SnoopJ: tbh I've never actually seen that, even the question here earlier wasn't doing that
[20:31:57] <SnoopJ> it's in the hands of the elder things now but the early indication looks like "no" :P
[20:32:06] <aphysically> I wouldn't mind the return value being a standard part of the docs
[20:32:12] *** Joins: kZel (~kZel@2.122.231.92)
[20:32:17] <aphysically> (type)
[20:32:22] <bjs> SnoopJ: I think it's more pushback based on effort rather than impact or reward
[20:32:51] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[20:32:51] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[20:32:57] <SnoopJ> bjs, what effort?
[20:33:22] <bjs> SnoopJ: in their eyes, to have to do this for all functions and to have to start accepting PRQs that update docs for old functions
[20:33:24] *** dcaro is now known as dcaro_away
[20:33:25] *** Quits: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 240 seconds)
[20:33:40] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:33:49] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Read error: Connection reset by peer)
[20:34:04] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[20:34:09] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[20:34:12] <SnoopJ> yea. I dunno, it seems like hand-wringing to me, I think calling this out for print() specifically does no great evil
[20:34:15] *** Joins: paul424 (~tom@ip-37-248-159-146.multi.internet.cyfrowypolsat.pl)
[20:34:20] <SnoopJ> but the stakes aren't high either way
[20:34:40] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[20:34:43] <bjs> SnoopJ: print is an obvious candidate, it writes to a stream but unlike other functions that write to streams it doesn't have a return value
[20:35:04] <bjs> so the pushback is weird to me
[20:35:07] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[20:35:25] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:35:25] <SnoopJ> that's an interesting point
[20:35:57] <bjs> if any functions are going to have their return values clearly marked, the built-in ones should (because the argument of "just read the source" doesn't apply so easily)
[20:36:35] <bjs> if i were a core dev i wouldn't be pushing back on this so hard, and I don't really see why they are.
[20:36:36] *** Quits: tobybl_ (~tobybl@237.202.200.146.dyn.plus.net) (Remote host closed the connection)
[20:37:57] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Ping timeout: 240 seconds)
[20:38:06] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:38:37] *** Joins: smirker (~smirker@167.172.37.230)
[20:39:00] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[20:40:26] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[20:40:28] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:40:55] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:41:33] <phy1729> Is there a way to instanciate an sqlalchemy.orm Base subclass with a session so inspect(self).session returns non-None during __init__ ?
[20:42:03] *** Quits: thurs80601421053 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Ping timeout: 256 seconds)
[20:42:29] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[20:43:01] *** Quits: trace (~trace@dynamic-002-247-248-171.2.247.pool.telefonica.de) (Quit: Leaving)
[20:43:55] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:44:52] *** Quits: codeswhite (~codeswhit@user/codeswhite) (Quit: Quit)
[20:45:17] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:47:41] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.4)
[20:48:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[20:49:14] *** Quits: AM (~techman@213.216.209.136) (Ping timeout: 268 seconds)
[20:50:01] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[20:51:02] *** Joins: AM (~techman@82-203-166-145.bb.dnainternet.fi)
[20:53:11] <yitz> Call super().__init__() first?
[20:53:40] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:53:46] *** Quits: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:54:34] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:55:00] *** Joins: Bakunin (~maplefing@user/lindis)
[20:55:19] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[20:56:17] *** Quits: rakoon_ (~rakoon@2001:985:f4c6:1:24f7:9ed5:87fa:b177) (Ping timeout: 240 seconds)
[20:57:11] <phy1729> The usual way is   foo = Foo(...); session.add(foo)   so I don't think that'd help
[20:57:18] *** Joins: rakoon_ (~rakoon@80-100-166-138.ip.xs4all.nl)
[20:59:03] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:59:49] <rendar> it's `hello:dict[str, int] = {}` or `hello:dict[str:int] = {}` ?
[21:00:09] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[21:00:46] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:01:00] <aphysically> the former, although the style is to put a space after the :
[21:01:01] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[21:01:01] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[21:01:19] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[21:01:37] <rendar> but both are syntactically ok, why?
[21:01:47] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[21:02:51] <phy1729> because slicing is a thing it just won't work in this context
[21:02:58] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[21:03:27] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:04:31] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[21:05:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:05:26] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:06:46] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[21:07:08] <rendar> but slicing should be dict[a:b] and not dict[a,b] right?
[21:07:53] <phy1729> yes that's why it is syntatically valid
[21:08:09] *** Quits: ano (~ano@user/ano) (Quit: ano)
[21:09:10] *** Quits: kZel (~kZel@2.122.231.92) (Read error: Connection reset by peer)
[21:09:48] <SnoopJ> rendar, they both syntactically valid because dict[anyobject] is
[21:09:49] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[21:09:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[21:09:57] <SnoopJ> and inside [] str:int is making a slice() instance
[21:10:10] <rendar> right
[21:10:16] <SnoopJ> it results in semantic nonsense though because slices aren't hashable
[21:10:27] <rendar> so, since i don't want to do slices but only making annotations
[21:10:36] <SnoopJ> dict[key, val]
[21:10:37] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:10:43] <rendar> `self.hello:dict[str, int] = {}` is the right way to make an annotation for hello, right?
[21:10:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[21:11:15] <phy1729> preferably with a space after the :
[21:11:31] <phy1729> It's syntatically valid because  assignment: NAME ':' expression ['=' annotated_rhs ] | ...   https://docs.python.org/3/reference/grammar.html   and expression is very broad
[21:11:36] *** Joins: ano (~ano@user/ano)
[21:11:37] *** Joins: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[21:12:40] *** Joins: kZel (~kZel@2.122.231.92)
[21:13:01] <rendar> but.. i still find this quite strange, i mean, shouldn't slice be working only with ..integers? something meaningful for the : operator? a slice of [str:int] makes sense?
[21:13:24] <c4017w> SnoopJ, thanks for the link! Looks like a much better solution that what I came up with
[21:13:41] <phy1729> There's a difference between parses and "is semantically meaningful"
[21:14:21] *** Joins: miique (~miique@181.46.139.166)
[21:14:23] *** Joins: python476 (~user@88.160.31.174)
[21:15:53] *** Joins: BlueSky (~BlueSky@user/bluesky)
[21:15:55] <rendar> ok, fine
[21:16:16] <rendar> but i think the parser should give that as a syntax error
[21:16:29] <SnoopJ> that is equivalent to saying "I think Python should have different syntax"
[21:16:37] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:16:45] *** Joins: emf (~emf@2620:10d:c090:400::5:f0df)
[21:16:50] <SnoopJ> because for the syntax Python does have, this is valid
[21:16:55] <rendar> ok
[21:17:08] <SnoopJ> there might be a case for a SyntaxWarning, but I can't see one
[21:17:17] *** Quits: ArtfulDodger (~ArtfulDod@81.126.81.79.rev.sfr.net) (Quit: Leaving)
[21:17:21] <SnoopJ> (you have no idea who is consuming the annotation or what their semantics are)
[21:17:28] <rendar> so, `dict[str, int]` is annotation, and `dict[str:int]` is slicing
[21:17:33] <SnoopJ> no, they are both annotations
[21:17:37] *** Quits: legola (~legola@46.235.100.54) (Remote host closed the connection)
[21:17:41] <SnoopJ> if they are used an annotation, anyway
[21:18:12] <phy1729> In theory you could have a type that takes slices of bools to something and do   foo[1 < 2:list is dict]  and that parses
[21:18:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[21:18:54] *** Joins: legola (~legola@46.235.100.54)
[21:19:18] <SnoopJ> rendar, `dict[anything]` is taking advantage of the fact that the type itself can be subscripted now. It produces an instance of types.GenericAlias
[21:19:43] <rendar> ok
[21:19:59] *** Quits: Herculo (~ben@37.228.214.244) (Quit: leaving)
[21:20:05] <rendar> i see, but if they are both annotations, what is the most used form? i think dict[str, int]
[21:20:36] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[21:20:40] <SnoopJ> `dict[keyType, valType]` is very common
[21:21:01] *** Quits: panella32 (~textual@164.215.227.223) (Ping timeout: 256 seconds)
[21:21:12] <rendar> ok
[21:21:16] <SnoopJ> I have never seen a tool that recognizes any other sort of subscripting but I don't really use this feature yet anyway
[21:22:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[21:23:10] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[21:23:17] *** Quits: legola (~legola@46.235.100.54) (Ping timeout: 256 seconds)
[21:24:41] *** Joins: fikran (~fikran@user/fikran)
[21:25:25] <rendar> shouldn't that be typing.GenericAlias ?
[21:25:48] <phy1729> yes
[21:26:15] <rendar> but SnoopJ written types.GenericAlias
[21:30:08] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:30:21] *** Quits: BlueSky (~BlueSky@user/bluesky) (Quit: Leaving)
[21:31:29] <SnoopJ> that's what the repr for `type(dict[42])` is
[21:31:44] <SnoopJ> the definition of the type is in `typing` though
[21:31:48] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:31:57] *** Joins: d3sync- (~d3sync@62.1.127.60.dsl.dyn.forthnet.gr)
[21:32:00] *** Joins: Feuermagier_ (~Feuermagi@213.178.26.41)
[21:32:06] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[21:32:16] *** Quits: Feuermagier_ (~Feuermagi@213.178.26.41) (Remote host closed the connection)
[21:32:20] <SnoopJ> same object
[21:32:42] <SnoopJ> https://bpa.st/JQ7A
[21:32:55] *** Quits: jdmark (~jdmark@user/jdmark) (Ping timeout: 256 seconds)
[21:33:01] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[21:33:21] *** Joins: seednode99 (~seednode@user/seednode)
[21:34:36] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b886:576b:fff3:ea07)
[21:34:45] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[21:34:46] *** Quits: d3sync (~d3sync@62.1.127.60.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[21:34:47] *** Joins: jdmark2 (~jdmark@user/jdmark)
[21:35:51] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Remote host closed the connection)
[21:37:05] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[21:37:36] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[21:39:37] *** Joins: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de)
[21:39:51] *** Quits: blcyber (~blcyber@216.74.235.178) (Ping timeout: 256 seconds)
[21:40:37] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.186) (Ping timeout: 240 seconds)
[21:41:48] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[21:43:19] *** Joins: adeliktas72 (~adeliktas@i59F5F686.versanet.de)
[21:43:24] *** Quits: ano (~ano@user/ano) (Quit: ano)
[21:43:45] *** Joins: ano (~ano@user/ano)
[21:44:48] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:44:57] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[21:44:58] *** adeliktas72 is now known as adeliktas
[21:46:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[21:46:51] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:47:06] *** Joins: MercilessDeth (~brad@136.49.59.177)
[21:47:12] *** Joins: Lush-_ (~lushlush@modemcable225.71-19-135.mc.videotron.ca)
[21:47:13] *** Quits: Lush-_ (~lushlush@modemcable225.71-19-135.mc.videotron.ca) (Changing host)
[21:47:13] *** Joins: Lush-_ (~lushlush@user/lush-/x-1276235)
[21:49:18] *** Quits: ADHD_ (~xxx@bras-vprn-toroon4834w-lp130-15-184-147-71-53.dsl.bell.ca) (Quit: leaving)
[21:49:34] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[21:50:07] *** Joins: jwisbell35 (~jwisbell3@174-080-085-082.res.spectrum.com)
[21:50:38] *** Joins: epony (epony@user/epony)
[21:51:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[21:51:54] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[21:52:53] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[21:53:24] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[21:54:33] *** Quits: jdmark2 (~jdmark@user/jdmark) (Quit: Leaving)
[21:54:50] *** Joins: jdmark (~jdmark@user/jdmark)
[21:55:03] *** Joins: inomoz (~inomoz@176.59.115.63)
[21:55:06] *** Quits: ano (~ano@user/ano) (Quit: ano)
[21:55:33] *** Joins: ano (~ano@user/ano)
[21:55:39] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[21:56:07] *** Quits: Bakunin (~maplefing@user/lindis) (Quit: timespace share)
[21:56:22] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[21:56:24] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[21:57:04] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[21:57:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:57:36] *** Joins: blcyber (~blcyber@216.74.235.178)
[21:58:14] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:58:37] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 240 seconds)
[21:58:57] *** Joins: Guest52 (~Guest52@12.168.100.12)
[21:59:25] *** Quits: grundrausch3n (~grundraus@p200300e9ef0ab500bc39f9cc14bd70ee.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:59:59] *** Parts: Guest52 (~Guest52@12.168.100.12) ()
[22:00:03] <w1kl4s> hi, i wanted to make a base class for other classes, and have required arguments in the base class which need to be set in child classes, but apparently that doesn't work like i thought it would, any suggestions to how to make it work?
[22:00:05] <w1kl4s> example: https://bin.bootleg.tech/raw/jogazehiyi
[22:00:05] *** Quits: smirker (~smirker@167.172.37.230) (Remote host closed the connection)
[22:00:08] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[22:00:31] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[22:00:40] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:00:45] *** Quits: ano (~ano@user/ano) (Quit: ano)
[22:00:47] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:8160:1a7f:4d49:1ed7) (Quit: Textual IRC Client: www.textualapp.com)
[22:01:15] *** Quits: sambauer64 (~sambauer6@86.121.75.23) (Ping timeout: 256 seconds)
[22:01:56] <grym> w1kl4s: for a start, B.a is a class attribute not an instance attribute
[22:02:37] <grym> (but A.a is an instance attribute)
[22:02:47] *** Joins: sambauer64 (~sambauer6@86.121.131.207)
[22:02:52] *** Quits: kZel (~kZel@2.122.231.92) (Read error: Connection reset by peer)
[22:03:55] *** Joins: dell (~dell@200.201.139.43)
[22:04:03] *** Joins: ano (~ano@user/ano)
[22:04:47] *** Quits: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[22:05:04] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:06:09] *** Joins: kZel (~kZel@2.122.231.92)
[22:06:31] *** Joins: audiobirb (~audio@user/audio)
[22:08:43] *** Quits: bluedust (~bluedust@117.241.191.1) (Remote host closed the connection)
[22:09:07] <w1kl4s> oh, i see
[22:09:37] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 240 seconds)
[22:09:37] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[22:09:53] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[22:10:18] *** Quits: kZel (~kZel@2.122.231.92) (Client Quit)
[22:10:41] <grym> B implicitly uses A's constructor, so you'd want B(a=...)
[22:10:43] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[22:11:00] <w1kl4s> yeah this was the keyword i was looking for
[22:11:17] <w1kl4s> as in, {class,instance} attribute
[22:11:22] <w1kl4s> thanks!
[22:11:57] <grym> sure!
[22:12:09] <grym> personally i don't bother with class attributes very often
[22:12:14] <grym> (in python)
[22:12:18] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:12:22] *** Joins: bloody (~bloody@user/bloody)
[22:13:32] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-050.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[22:15:26] <grym> w1kl4s: https://bpa.st/66HA
[22:16:57] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[22:17:27] <w1kl4s> oh
[22:17:33] <w1kl4s> that's... undesired
[22:18:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:18:24] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[22:18:25] *** Quits: emf (~emf@2620:10d:c090:400::5:f0df) (Quit: emf)
[22:18:34] <grym> it is very often not what you had in mind
[22:18:44] *** Joins: grundrausch3n (~grundraus@p200300e9ef0ab500e0d1dca8e4ea28c6.dip0.t-ipconnect.de)
[22:19:03] *** Joins: sreve (~quassel@p4ff44f93.dip0.t-ipconnect.de)
[22:19:25] <grym> w1kl4s: if you find typing out __init__(self, foo, bar, baz): self.foo=foo, self.bar=bar, ... very annoying, you're not alone
[22:19:30] *** Joins: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de)
[22:19:32] <grym> and there are ways to avoid it now
[22:20:04] <grym> stdlib: https://docs.python.org/3/library/dataclasses.html  third party: attrs.org , https://pydantic-docs.helpmanual.io/  are all very popular
[22:20:30] <grym> they all make "normal classes", but with less RSI :D
[22:21:25] *** Quits: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:21:58] *** Joins: morrigan_ (~m0rr1gan@user/m0rr1gan)
[22:22:13] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Ping timeout: 256 seconds)
[22:24:49] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:25:11] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Ping timeout: 256 seconds)
[22:25:13] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[22:25:15] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876)
[22:27:07] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[22:27:25] *** Joins: magla (~gelignite@55d42ff9.access.ecotel.net)
[22:29:45] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Quit: beli6147)
[22:31:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:31:46] <BtbN> https://github.com/OGGM/OGGM-Docker/runs/4729546471?check_suite_focus=true#step:9:1380 I don't understand why I'd suddenly be getting "ValueError: numpy.ufunc size changed, may indicate binary incompatibility." during install. I literally just installed numpy a few steps before, and it was never installed in a different version.
[22:32:00] *** Quits: dell (~dell@200.201.139.43) (Quit: Leaving)
[22:33:08] <Speed2u> hello all i'm fairly new to python and trying to learn some basic, i'm stuck trying to create some sort of chiffer/"encrypted" messagingsystem using a dictionary with key/values to store each individual "key" for each letter etc, i have managed to get a single word to work by looping the message letter by letter, but i'm not sure how to continue so that i can type out more than just one word
[22:33:08] *** Joins: aselman4 (~aselman4@chipr012-p2.nls.ford.com)
[22:33:12] <Speed2u> https://bpa.st/TI4Q
[22:33:31] *** Joins: goldfish (~goldfish@user/goldfish)
[22:33:33] *** Quits: blcyber (~blcyber@216.74.235.178) (Ping timeout: 256 seconds)
[22:34:15] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[22:34:57] *** Joins: RubbishPubTomato (~RubbishPu@node-1w7jr9yhpl48arnvdwbzy5v8f.ipv6.telus.net)
[22:35:20] *** RubbishPubTomato is now known as toma
[22:35:31] <BtbN> This also has worked before. With the same numpy version.
[22:35:33] *** Quits: Pddy (~SmplyPddy@user/SmplyPddy) (Quit: bye)
[22:37:01] *** Joins: Pddy (~SmplyPddy@user/SmplyPddy)
[22:37:02] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[22:37:08] *** Joins: shad (~shad@user/shad)
[22:37:38] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[22:37:46] *** Joins: wuji (~user@99-5-243-46.lightspeed.rcsntx.sbcglobal.net)
[22:37:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:37:59] *** Quits: shad (~shad@user/shad) (Client Quit)
[22:39:47] *** Quits: rakoon_ (~rakoon@80-100-166-138.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:39:57] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:41:33] *** Joins: rakoon_ (~rakoon@2001:985:f4c6:1:923c:872:b519:2de6)
[22:41:36] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:42:11] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[22:43:43] *** Joins: cheater (~Username@user/cheater)
[22:45:48] <aselman4> Hello, anyone familiar with pyodbc? im executing a stored procedure that doesnt return any results only messages. the messages are multiple lines but pyobdc's cursor.messages only returns 1 line. anyone know how to get the full list?
[22:46:25] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:48:01] *** Quits: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:48:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:48:32] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:48:52] *** Joins: beli6147 (~Thunderbi@174.128.60.162)
[22:48:53] *** Joins: tmm88 (~tmm88@user/tmm88)
[22:48:54] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[22:49:19] *** Joins: adeliktas1 (~adeliktas@i59F5F686.versanet.de)
[22:49:27] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-69-53.poda.cz)
[22:49:27] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[22:49:45] *** Joins: tejr (~tejr@user/tejr)
[22:50:57] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 240 seconds)
[22:50:57] *** adeliktas1 is now known as adeliktas
[22:51:12] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[22:51:27] *** Quits: ano (~ano@user/ano) (Quit: ano)
[22:51:57] *** Joins: blcyber (~blcyber@216.74.235.178)
[22:51:58] *** Joins: ano (~ano@user/ano)
[22:52:19] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[22:52:25] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[22:52:27] *** Quits: digitalice__ (~digitalic@2800:a4:281c:7300:f4bf:6bd2:26e9:a01a) (Read error: Connection reset by peer)
[22:53:37] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[22:54:25] *** Joins: wedof (~wedof@2a02:810c:80:1eb0:1f1:ebe8:8402:8f63)
[22:54:40] *** Joins: moog (~moog@107.77.244.52)
[22:55:05] *** Joins: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[22:55:47] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[22:56:03] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[22:56:12] <bjs> Speed2u: does your code not already work for more than one word?
[22:56:15] *** Joins: ice9 (~ice9@user/ice9)
[22:56:20] <bjs> Speed2u: aren't more words just... more letters
[22:58:40] *** Joins: stockholm (~Andreas@p200300d2c70d1300d06856d6433dfbdd.dip0.t-ipconnect.de)
[22:59:04] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[22:59:48] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[23:00:04] *** Joins: Betal (~Betal@user/betal)
[23:00:15] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:00:16] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[23:00:42] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[23:01:14] <stewie925> using Python 3.8 here - am puzzled why ` 1.029 * 1000000000 ` yields ` 1028999999.9999999 ` instead of just ` 1029000000 `
[23:01:53] <The-Compiler> stewie925: https://docs.python.org/3/tutorial/floatingpoint.html
[23:02:06] *** Joins: jess (~jess@atheme/cat/jess)
[23:02:27] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 256 seconds)
[23:03:30] <SnoopJ> Yhg1s, perhaps I was too pessismistic about the possibility of embedding Python the right way in our product. I just had a chat with my team lead and his response wasn't "oh my god no we'd never embed." It wasn't exactly an enthusiastic response either, but not the hard-no I was expecting.
[23:03:59] <SnoopJ> embed in our core instead of my horrible "let's statically link libpython multiple times and hope the world doesn't burn down" bodge I mean
[23:04:05] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[23:04:30] <Betal> probably better to calc with python integers and in the end divide back to your precision, like (1029 * 1000000000) / 1000
[23:04:51] <Xano> ChrisWarrick, Thanks again for your help about my decorator issue last night. It looks like what's happening is that the class decorator (the class and method decorator work together) returns an individually decorated instance method that is then considered different from the original, causing pickle to fatal.
[23:05:25] <The-Compiler> stewie925: note that this isn't specific to Python, see https://0.30000000000000004.com/
[23:05:26] <Xano> Individually decorated as in: when getting the instance attribute representing the method, the returned method is then decorated, so the result is unique per instance.
[23:05:26] <ChrisWarrick> Xano: yeah, that’s very likely. How did you solve your issue? Are you sure you need to pickle methods?
[23:05:54] <Xano> ChrisWarrick, Haven't solved it yet as I had other things to do yesterday. Will try again in a bit.
[23:05:57] <Speed2u> bjs: it doesnt work if i have whitespace in between. so like, it works as long as i have only one "word". not sure how to deal with whitespace
[23:05:59] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[23:06:14] <bjs> Speed2u: what do you mean by "doesn't work"
[23:06:14] <Speed2u> doesnt seem to solve it ju just add " ": "something",
[23:06:29] <stewie925> The-Compiler: thank you very much!!!
[23:06:47] <Xano> ChrisWarrick, They're entity objects and each decorator stores some necessary information. I'll dig deeper but honestly I'm not even sure how this would even be unpickled, but I'll see
[23:06:48] <Speed2u> well what i mean is that i still have the same behaviour as before, that one "word" == letters without whitespace works
[23:07:01] *** Quits: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[23:07:06] <Speed2u> as soon as i have a space in between, just the first series of letters before that will be translated
[23:07:23] <bjs> Speed2u: is this all your code?
[23:07:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[23:07:38] *** Joins: RawFiend (~textual@176.55.118.178)
[23:07:43] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[23:07:47] *** Joins: ketiv (~ketiv@92.40.195.121.threembb.co.uk)
[23:07:48] <bjs> Speed2u: can you share the whole thing? I'm not sure what you mean by the first series of letters
[23:08:02] <bjs> your code seems to go over every letter `for letter in msg_to_be_encrypted:`  no?
[23:08:07] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[23:08:11] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[23:08:14] <Speed2u> bjs no it's just an example. i can post the whole thing if you want, just didnt want to post a big file, it's a plugin for a sopel bot
[23:08:14] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:08:22] <Speed2u> hold on and ill post the whole thing
[23:09:44] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[23:09:58] <Speed2u> bjs:   https://bpa.st/7XNA
[23:10:22] <bjs> Speed2u: I'm not familiar with sopel,  what does trigger.group(5) do?
[23:10:43] <SnoopJ> it's the 5th group of the regex associated with the trigger you're responding to
[23:10:49] *** Quits: aselman4 (~aselman4@chipr012-p2.nls.ford.com) (Quit: Client closed)
[23:11:08] <bjs> what regex
[23:11:11] <Speed2u> im kinda new with that too but yes SnoopJ is right i guess.. i think of it as the "4th trigger" after the default trigger
[23:11:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:11:57] <Speed2u> so like.. the full command in my case would be .chiffer binary encrypt blablabla.. in this case "blablabla" is trigger.group(5)
[23:12:04] <SnoopJ> bjs, you can do things like `@command("greet (\w+)) def greet(bot, trigger): bot.say(f"Greetings, {trigger.group(1)}!")`
[23:12:06] <bjs> Speed2u: what happens if you have multiple words
[23:12:16] <SnoopJ> erm, with a properly terminated pattern in the decorator factory
[23:12:18] *** Joins: aselman4 (~aselman4@chipr012-p2.nls.ford.com)
[23:12:21] *** Quits: aselman4 (~aselman4@chipr012-p2.nls.ford.com) (Client Quit)
[23:12:30] <bjs> SnoopJ: but in Speed2u's paste there is no regex-y looking thing like that, so I was a little confused
[23:12:38] <Speed2u> bjs: as i told before, only one "word" gets translated in this case
[23:12:41] <SnoopJ> bjs, yea I couldn't make much sense of the remainder of the scrollback
[23:12:55] <bjs> Speed2u: oh, so it's not about the translation code you showed at all, but about getting multiple words from sopel?
[23:13:41] <Speed2u> no, i have no problems with other stuff just this one.. translation using this script. wait hold on and i'll post an example from the test ircd itself
[23:13:58] <bjs> Speed2u: no to which question?
[23:15:08] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[23:15:25] <bjs> SnoopJ: is it actually a re.Match object?
[23:15:56] *** Joins: ska (~ska@user/ska)
[23:16:04] <SnoopJ> bjs, trigger.match is. The docs are quite good: https://sopel.chat/docs/trigger.html
[23:16:05] <Speed2u> https://bpa.st/2OQA
[23:16:19] <Speed2u> there you see that it works as intenden, until i put whitespace in
[23:16:24] <SnoopJ> it just pulls off some of the Match object's instance methods so you can access them on the trigger
[23:16:52] <ska> is macos: I notice that packages are installed in /usr/local/opt instead of ~/miniconda. Is that normal?
[23:17:00] <Speed2u> so i'm thinking like adding another for loop for a "word" or like counting the lenght of the msgvariable and repeat the loop until it reaches the lenght of string or something
[23:17:21] <ska> How do I have all package installed in the ~/miniconda/ folder?
[23:17:47] <bjs> Speed2u: isn't the problem that group(5) is returning only that word?  so changing your encryptiony thing doesn't make a difference
[23:19:06] <bjs> Speed2u: you want to get sopel to give you all the words back,  or more likely just give you the entire line
[23:19:11] <Speed2u> hmm i dont know, as i said before i'm very new at this so consider me a noob =) i have been trying to dig around in documentation and googling around but i felt stuck enough to ask for help
[23:19:16] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[23:20:01] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[23:20:09] <bjs> Speed2u: SnoopJ: https://sopel.chat/docs/plugin/decorators.html#sopel.plugin.command it looks like trigger.match(2) gives you the stuff after the trigger/command back
[23:20:12] <ChrisWarrick> ska: how are you installing things? are you sure you’re running the miniconda python and not eg. homebrew’s?
[23:20:21] *** Joins: mat001_ (~mat001@c-69-181-155-247.hsd1.ca.comcast.net)
[23:20:46] <SnoopJ> bjs, do you mean .group() ?
[23:20:51] <SnoopJ> .match should be a Match object
[23:20:52] <bjs> Uh yes
[23:20:55] <bjs> Sorry
[23:20:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[23:21:13] <Speed2u> but group 2 is just all the commands recieved
[23:21:15] <SnoopJ> I can't remember the exact details off the top of my head but it does some light transformation on the actual pattern IIRC
[23:21:21] <SnoopJ> Speed2u, yes, and it's easy to split that up
[23:21:22] <Speed2u> like think of it like: trigger1, trigger2, trigger2
[23:21:24] <Speed2u> 3*
[23:21:51] <ska> ChrisWarrick: when I do 'which pip' it points to miniconda's.  I just do 'pip install sphinx' for example.
[23:21:58] <ChrisWarrick> ska: pip --version
[23:22:25] *** Quits: mat001 (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[23:22:27] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[23:22:42] <SnoopJ> you can do something like: `parts = (part for part in trigger.group(2) if predicate(part))` and so on. When you have highly structured commands this is usually what you want to do.
[23:22:51] <ska> out: pip 21.1.3 from /Users/ska/miniconda3/lib/.....
[23:22:57] <SnoopJ> (but again, I am not following the question very well)
[23:23:01] <Speed2u> but are the syntax correct for reversing the dictionarys for the "decrypt" part then? because in that case this is the "only" problem with the script, that i have to figure out how to make trigger.group(5) take more than one argument
[23:23:24] <bjs> Speed2u: well I think the problem is that trigger.group(5) returns only the 4th trigger, which is only a single word
[23:23:24] <SnoopJ> you will have to make the relevant capture group do whatever you want if it absolutely must be .group(5)
[23:23:33] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[23:23:41] <SnoopJ> because you can't change how `re` works or how `sopel` is using it unless you want to modify `sopel` itself (I have done this, I would not recommend it)
[23:23:52] <ChrisWarrick> ska: how do you tell it installs in /usr/local/opt?
[23:24:00] <Speed2u> SnoopJ: thanks for trying to answer :) i suck at explaining what i barely understand myself at a language that anyone can understand easy lol
[23:24:02] <SnoopJ> it's not *bad*, but there is a lot going on inside of the library and it's usually best to not reach into it
[23:24:14] *** Joins: BrokenCog (~BrokenCog@c-73-92-151-140.hsd1.ca.comcast.net)
[23:24:19] <ska> When I do a 'which sphinx' it points there.
[23:24:31] <bjs> Speed2u: sopel doesn't know you actually want all of the words to be one thing.  Maybe it has a way to tell it,  but if trigger.group(2) gives you "trigger1 trigger2 trigger3 trigger4 etc" then you can cut it up and remove the first 2 words and leave the rest
[23:25:15] <SnoopJ> it just induces an extra group, basically
[23:25:35] <dostoyevsky2> exarkun: Couldn't they just make money from larger companies using ubuntu?  Like MicroSoft does with its biziness customers
[23:25:39] <BrokenCog> hellos.  I'm wondering if anyone has a suggestion how to adjust a PNG image to black and white, not grayscale.  Currently the image is a drawn shape (numbers and words) in a color on a grayish background.  I can increase the contrast, with Enhancer, but, I can't seem to make the background solid white.  Any suggestions?
[23:25:56] <Speed2u> that's just what trigger.group(3) is. it is the first "new" trigger to be callable
[23:25:59] <SnoopJ> I think because it needs to transform the pattern to add the command symbol to it and possibly other things? It's been a while since I've cared about this
[23:26:04] <dostoyevsky2> hmmm... wrong  channell...
[23:26:25] <Speed2u> trigger.gropu(2) is the first trigger, and 2 are all including the first (just named trigger)
[23:26:39] <ChrisWarrick> BrokenCog: the simplest solution would be thresholding, pixels with values less than X are set to black, above X are set to white
[23:26:43] <SnoopJ> it's very confusing that you're using "trigger" to refer to both the Trigger object and the contents of the match
[23:26:45] <Speed2u> group 3 is the first trigger thats written after the first command itself
[23:27:02] *** Joins: Narrat (~omnius@p200300df5f0aabe806ea56fffe2e7cdc.dip0.t-ipconnect.de)
[23:27:08] <Speed2u> SnoopJ: i dont, in the source i pasted. just trying to explain what i meant for bjs
[23:27:11] *** Quits: gusto (~Augustus@109.255.100.54) (Remote host closed the connection)
[23:27:12] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[23:27:23] <bjs> Speed2u: that's not what the docs say trigger.group(2) is
[23:27:29] <Speed2u> in the source i call trigger.group(3) language etc
[23:27:33] <bjs> can you print(repr(trigger.group(2))) and show us?
[23:27:50] <Speed2u> sure
[23:27:50] *** Joins: gusto (~Augustus@2a01:b740:13d2::39)
[23:28:00] <BrokenCog> ChrisWarrick: ah, thanks.  does PIL have any functionality for thresholding?
[23:28:06] <SnoopJ> Speed2u, well, he isn't familiar with this library, so it's probably doubly-confusing for him :)
[23:28:18] <ChrisWarrick> BrokenCog: I would guess it does
[23:28:26] <BrokenCog> I'll check it out.  thanks again.
[23:28:28] <SnoopJ> it does yea
[23:28:53] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[23:29:35] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[23:29:37] <ska> ChrisWarrick: I uninstalled a few things from brew, and now things look normal.. Not sure what I did to confuse it.
[23:29:41] *** Quits: RawFiend (~textual@176.55.118.178) (Quit: Gone away...)
[23:29:45] <bjs> SnoopJ: from what I can tell the decorator implies a match on something like "command arg1 arg2 arg3 arg4" and you get .group(1)="command", group(2)="arg1 arg2 arg3 arg4", group(3)="arg1", group(4)="arg2" etc
[23:29:53] <bjs> the docs for the decorator implies8
[23:29:54] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[23:29:56] <SnoopJ> yep
[23:30:11] <bjs> what happens if you pass 5 args is unclear to me from reading the docs ;P
[23:30:50] <SnoopJ> err actually wait, that might be wrong
[23:30:54] <SnoopJ> It *does* support user capture groups
[23:31:17] <SnoopJ> and IIRC everything after group(2) is supposed to be "whatever you defined" but let me consult my own modules
[23:31:55] <Speed2u> bjs: https://bpa.st/QAOA
[23:32:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:32:36] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[23:32:45] <bjs> Speed2u: well that seems useful, group(4) only gave you one word, but group(2) has given you all the words
[23:33:27] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[23:33:39] <Speed2u> yes. but it also includes the first word (one) as you can see. it messes up with things since the first word i want to start from is from trigger.group(5)
[23:33:44] <Speed2u> aka the string to be translated
[23:34:01] *** Joins: fikran (~fikran@user/fikran)
[23:34:04] *** Quits: jwisbell35 (~jwisbell3@174-080-085-082.res.spectrum.com) (Quit: Leaving)
[23:34:07] <bjs> Speed2u: well it's better than only group(5) because group(5) only returned one word, now you at least have them all :)
[23:34:53] <bjs> Speed2u: you can remove the first two words and then use what's left.  Looking at the docs you should also be able to make separate functions for each of those "subcommands" which might make it nicer/easier too
[23:35:10] <Speed2u> i guess, back to google to find out how to stripe out the words before it :o i didnt realized how much of a patience i really need to learn this properly :D but it's fun!
[23:35:14] <Speed2u> thank you for the help so far
[23:35:54] <SnoopJ> bjs, no, you had it right
[23:36:09] <SnoopJ> re: grouping on whitespace-separated arguments
[23:36:59] <Speed2u> maybe things are getting even more confusing since one of the dictionaries actually tranlates whitespace to 00100000
[23:37:13] <bjs> Speed2u: here's a way https://bpa.st/WCOQ
[23:37:22] <Speed2u> ty, i will have a look
[23:37:23] <bjs> SnoopJ: like with so many questions here I'm answering 100% based on the docs
[23:37:29] * SnoopJ nods
[23:37:29] <bjs> and whatever print()s I get back from Speed2u :P
[23:37:52] <SnoopJ> I mean, I've used it for I don't know how many years now and the semantics of groups still confuse me, so I had to go test it :)
[23:38:05] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[23:38:16] <SnoopJ> it's doing some light-magic transformation of your pattern behind the scenes
[23:38:28] <SnoopJ> and the groups are one of the casualties
[23:39:15] <Speed2u> i think i need a break for a few minutes. maybe i feel less stupid after a coke and some tobaccoo :D
[23:39:25] <SnoopJ> bjs, I saw this around 6 months ago when I added support for matrix users into a bot I maintain, so I needed to "get in front of" the command group because the bridge would not really look like it was using a command the way sopel normally has it
[23:39:49] <SnoopJ> (the command bit is always the first 'word' in Sopel's view of the universe, but for a bridge to another service, that'll be the username of the user issuing the command)
[23:40:04] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:40:27] <bjs> SnoopJ: the note about `@command('main sub', 'main')` seemed interesting, for that point.
[23:40:40] <bjs> implying that .group(1) is more than just the "first word"
[23:40:48] <SnoopJ> group(1) is whatever it matched
[23:40:53] <SnoopJ> (I think)
[23:41:15] <Speed2u> brb and i will test your example on the code if i understand it correctly bjs
[23:41:52] <SnoopJ> bjs, so like if I do @command("cmd (\w+) (\d+)") and then do `!cmd arg 1234 hi` it's not like "hi" is dropped on the ground, it'll just be in one of the later groups
[23:42:05] <SnoopJ> and the rules about exactly how the groups are laid out are made up (or close enough to it) and the points don't matter
[23:42:07] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[23:42:24] <SnoopJ> it really does sound like I'm complaining about Sopel here but I love it :)
[23:42:38] *** Joins: Auron (~Auron956@user/auron)
[23:43:11] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:43:57] *** Quits: BrokenCog (~BrokenCog@c-73-92-151-140.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[23:45:31] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[23:45:39] *** Joins: BrokenCog (~BrokenCog@59.sub-174-194-202.myvzw.com)
[23:45:42] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[23:46:11] *** Joins: aselman4 (~aselman4@chipr012-p2.nls.ford.com)
[23:47:23] <Speed2u> ok time to get my brain all messed up again :D
[23:47:32] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:48:03] <Speed2u> so.. if i understand this correct i should replace string = trigger.group(5) with like string = trigger.group(2[:3])  (this didnt work but i assume i just have a typo) is this how you mean?
[23:48:20] <Speed2u> in that case "string" should be as many words as possible
[23:48:35] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[23:49:03] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:49:17] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:49:24] <SnoopJ> Speed2u, do you maybe mean `trigger.groups()[2:3]` or something similar?
[23:49:27] <Speed2u> sorry for communicating really bad. i guess one of the reasons i cant google for things properly is that i don't use the correct names for stuff in my questions 90% of the time :D
[23:49:37] <Speed2u> hmm
[23:49:38] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[23:49:38] <SnoopJ> if you care about more-than-one-group, you probably just want groups()
[23:49:43] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:49:55] <Speed2u> i will try, but that sounds like it's going to break the other stuff?
[23:49:59] *** Quits: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com) (Max SendQ exceeded)
[23:50:01] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Max SendQ exceeded)
[23:50:09] <Speed2u> i still want trigger.group 3 and 4 to be treated the way it currently does
[23:50:15] <SnoopJ> it sounds like the other stuff isn't exactly in perfect operating condition, since you're asking us questions about it
[23:50:24] <SnoopJ> but group(n) can still be used alongside groups()
[23:50:24] *** Joins: natewrench123456 (~joshu@cpe-72-228-153-194.buffalo.res.rr.com)
[23:50:37] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[23:51:52] *** Joins: RawFiend (~textual@92.45.117.58)
[23:51:58] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[23:52:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:52:17] *** Quits: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[23:52:18] <Speed2u> hmm. at least i made some progress. not in the way i want but now i got another output result
[23:52:21] <Speed2u> leet leet = .(|-|||=
[23:52:27] *** Quits: paul424 (~tom@ip-37-248-159-146.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:52:37] <Speed2u> using this code on "string":   string = trigger.group()[:5]
[23:52:48] <Speed2u> (output should be 1337 1337
[23:53:42] <Speed2u> or maybe 5:x if you can use something for x to be everything from 0 to 100
[23:54:01] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[23:54:15] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876) (Remote host closed the connection)
[23:54:26] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[23:54:33] *** Joins: Guest1998 (uid531611@id-531611.hampstead.irccloud.com)
[23:54:38] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876)
[23:54:38] <Speed2u> yes!! thank you. now it seems to work
[23:55:19] <Speed2u> string = trigger.group()[5:] was the key. now the output is |=3|2 13375|>34|< 3/\/(|2`/|>7 1337 1337  so i guess i just need to strip out everything before that (the command itself)
[23:55:54] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:55:55] *** Joins: jay-m1262 (~jay-m@gateway/vpn/pia/jay-m126)
[23:56:16] <Speed2u> i didn't realized that using [5:] was from 5 to anything. i tought you had to use a fixed number where to stop
[23:56:17] *** Quits: RawFiend (~textual@92.45.117.58) (Ping timeout: 256 seconds)
[23:56:59] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[23:57:50] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[23:58:12] <Speed2u> however the rest of the code should work just fine without changing anything imo since msg_to_be_encrypted already = original_msg.replace(".chiffer leetspeak encrypt", "")
[23:58:27] *** Joins: luigibu (~luigibu@11.red-79-159-71.dynamicip.rima-tde.net)
[23:59:02] *** Quits: Xano (~Xano@2a00:23c4:4204:700:5610:9a8c:8179:e0c7) (Ping timeout: 240 seconds)
[23:59:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:59:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[23:59:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
