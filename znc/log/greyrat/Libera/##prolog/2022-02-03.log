[00:09:30] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[00:41:32] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[00:41:32] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net) (*.net *.split)
[00:41:32] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[00:41:32] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (*.net *.split)
[00:41:33] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[00:41:33] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[00:41:33] *** Quits: seabre (~seabre@user/seabre) (*.net *.split)
[00:41:33] *** Quits: sakasama (~sakasama@user/sakasama) (*.net *.split)
[00:41:33] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[00:41:33] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[00:41:33] *** Quits: xunsku (~akmnlrse@2.56.212.155) (*.net *.split)
[00:41:33] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[00:41:34] *** Quits: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net) (*.net *.split)
[00:41:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[00:41:34] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (*.net *.split)
[00:41:34] *** Quits: wacki (~wacki@87.122.86.194) (*.net *.split)
[00:41:35] *** Quits: step21 (~step21@apus.uberspace.de) (*.net *.split)
[00:41:36] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[00:41:37] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[00:41:37] *** Quits: Philippa (~flippa@cpc76150-clif11-2-0-cust645.12-4.cable.virginm.net) (*.net *.split)
[00:41:37] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[00:41:37] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[00:41:37] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[00:41:37] *** Quits: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host) (*.net *.split)
[00:41:37] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:37] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[00:41:37] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[00:41:38] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (*.net *.split)
[00:41:38] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[00:41:38] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[00:41:38] *** Quits: chrpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[00:41:39] *** Quits: jealousmonk (~user@user/jealousmonk) (*.net *.split)
[00:41:39] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (*.net *.split)
[00:41:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[00:41:40] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[00:41:40] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[00:41:40] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[00:41:40] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[00:41:40] *** Quits: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se) (*.net *.split)
[00:41:40] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[00:41:40] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[00:41:40] *** Quits: dmiles_afk (~dmiles@c-98-232-203-68.hsd1.wa.comcast.net) (*.net *.split)
[00:41:40] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (*.net *.split)
[00:41:40] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[00:41:41] *** Quits: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net) (*.net *.split)
[00:41:41] *** Quits: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (*.net *.split)
[00:41:41] *** Quits: ElKowar (~ElKowar@srv-fin.xware-gmbh.de) (*.net *.split)
[00:41:41] *** Quits: bbz (sid62109@id-62109.ilkley.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: CowsAreFriend (~tjis@karl.meowsky.org) (*.net *.split)
[00:41:42] *** Quits: [relay]_ (~logicmoo@c-98-232-203-68.hsd1.wa.comcast.net) (*.net *.split)
[00:41:42] *** Quits: ccx (~ccx@82.142.125.46) (*.net *.split)
[00:41:43] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[00:41:43] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[00:41:43] *** Quits: pbone (~pbone@159.196.16.104) (*.net *.split)
[00:41:43] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (*.net *.split)
[00:41:43] *** Quits: quernd (~quernd@boethin.uberspace.de) (*.net *.split)
[00:41:43] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[00:41:43] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[00:41:44] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (*.net *.split)
[00:41:44] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[00:41:44] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[00:41:45] *** Quits: ttmrichter_ (ttmrichter@user/ttmrichter) (*.net *.split)
[00:41:45] *** Quits: buffet (~buffet@buffet.sh) (*.net *.split)
[00:41:45] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[00:41:45] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[00:44:07] *** Joins: danieli (~danieli@user/danieli)
[00:44:07] *** Joins: xunsku (~akmnlrse@2.56.212.155)
[00:44:07] *** Joins: webstran- (~webstrand@user/webstrand)
[00:44:07] *** Joins: cehteh (~ct@git.pipapo.org)
[00:44:07] *** Joins: sakasama (~sakasama@user/sakasama)
[00:44:07] *** Joins: seabre (~seabre@user/seabre)
[00:44:07] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:44:07] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:44:07] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[00:44:07] *** Joins: millido (~millido@84.210.150.128)
[00:44:07] *** Joins: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net)
[00:44:07] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[00:44:07] *** Joins: econo (uid147250@user/econo)
[00:44:07] *** Joins: chrpape (~user@2a01:4f9:c010:632d::1)
[00:44:07] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[00:44:07] *** Joins: bleb (~cm@user/bleb)
[00:44:07] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[00:44:07] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[00:44:07] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[00:44:07] *** Joins: buffet (~buffet@buffet.sh)
[00:44:07] *** Joins: ttmrichter_ (ttmrichter@user/ttmrichter)
[00:44:07] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[00:44:07] *** Joins: bbz (sid62109@id-62109.ilkley.irccloud.com)
[00:44:07] *** Joins: ElKowar (~ElKowar@srv-fin.xware-gmbh.de)
[00:44:07] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[00:44:07] *** Joins: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net)
[00:44:07] *** Joins: ns12 (~ns12@user/ns12)
[00:44:07] *** Joins: minto (~mintograd@47.201.5.61)
[00:44:07] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[00:44:07] *** Joins: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host)
[00:44:07] *** Joins: bkhl (~bkhl@user/bkhl)
[00:44:07] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[00:44:07] *** Joins: Cienisty (Cienisty@user/cienisty)
[00:44:07] *** Joins: Philippa (~flippa@cpc76150-clif11-2-0-cust645.12-4.cable.virginm.net)
[00:44:07] *** Joins: koo5_ (~quassel@51.140.155.227)
[00:44:07] *** Joins: phoe (~phoe@user/phoe)
[00:44:07] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[00:44:07] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[00:44:07] *** Joins: [relay]_ (~logicmoo@c-98-232-203-68.hsd1.wa.comcast.net)
[00:44:07] *** Joins: sivoais (~zaki@199.19.225.239)
[00:44:07] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[00:44:07] *** Joins: dmiles_afk (~dmiles@c-98-232-203-68.hsd1.wa.comcast.net)
[00:44:07] *** Joins: ski (~ski@remote12.chalmers.se)
[00:44:07] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[00:44:07] *** Joins: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se)
[00:44:07] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[00:44:07] *** Joins: Ekho (~Ekho@user/ekho)
[00:44:07] *** Joins: slavfox (~slavfox@93.158.232.111)
[00:44:07] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:07] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[00:44:31] *** Joins: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net)
[00:44:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:44:31] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:44:31] *** Joins: wacki (~wacki@87.122.86.194)
[00:44:31] *** Joins: step21 (~step21@apus.uberspace.de)
[00:44:31] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[00:44:49] *** Joins: jealousmonk (~user@user/jealousmonk)
[00:44:49] *** Joins: energizer (~energizer@user/energizer)
[00:44:49] *** Joins: eof (~eof@tty3.dev)
[00:45:01] *** Joins: ccx (~ccx@82.142.125.46)
[00:45:02] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[00:45:02] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[00:45:17] *** Joins: remexre (~remexre@user/remexre)
[00:45:17] *** Joins: mzan (~quassel@mail.asterisell.com)
[00:45:17] *** Joins: pbone (~pbone@159.196.16.104)
[00:45:17] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[00:45:17] *** Joins: quernd (~quernd@boethin.uberspace.de)
[00:45:17] *** Joins: theglass (~glass@user/theglass)
[00:45:17] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[00:56:03] <remexre> maybe this is OT, but does anyone have design advice for writing a simple abstract-interpretation-based analysis in Prolog (of a functional language)?
[00:57:07] <remexre> widening in particular seems possibly tricky; would I want a meta-interpreter to handle that, or is there a nicer way?
[01:01:25] *** Quits: wacki (~wacki@87.122.86.194) (Quit: Leaving.)
[01:02:12] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[01:03:58] *** Joins: CowsAreFriend (~tjis@karl.meowsky.org)
[01:41:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:01:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:06:32] *** Quits: pbmagi (~Thunderbi@host-92-14-106-162.as13285.net) (Ping timeout: 252 seconds)
[02:31:03] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[02:35:59] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 256 seconds)
[03:45:57] *** Joins: stis (~stis@h46-236-78-23.cust.a3fiber.se)
[03:46:07] <stis> Hi prologuers!
[04:13:20] *** Joins: szutt (~szutt@116.37.2.145)
[04:18:11] <aindilis> can swipl give a justification/derivation for why a goal fails?
[04:19:22] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[04:20:07] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[04:24:03] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[04:45:19] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[04:52:01] <stis> aindilis: https://www.swi-prolog.org/pldoc/man?section=debugger
[04:52:13] <stis> so you can trace predicates
[04:52:22] <stis> should be enough and the method I use
[05:19:45] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:26:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[06:39:45] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:53:20] *** Joins: millido (~millido@84.210.150.128)
[07:16:57] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[07:21:17] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:30:13] *** Quits: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net) (Remote host closed the connection)
[07:30:41] *** Joins: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net)
[07:33:43] *** Quits: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net) (Remote host closed the connection)
[07:34:26] *** Joins: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net)
[07:39:13] *** Quits: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:04:43] *** Quits: cmsmcq_ (~cmsmcq@h30.82.16.98.dynamic.ip.windstream.net) (Remote host closed the connection)
[08:05:27] *** Joins: cmsmcq_ (~cmsmcq@98.16.82.30)
[08:44:26] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[08:50:09] *** Joins: yauhsien (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[08:54:31] *** Quits: yauhsien (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[08:56:32] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[08:59:23] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:02:13] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:04:49] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[09:54:33] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:59:53] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[10:00:44] *** Joins: wacki (~wacki@87.122.83.47)
[10:13:39] *** Joins: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net)
[10:13:51] *** Quits: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[10:14:10] *** Joins: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net)
[10:34:45] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:53:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Ping timeout: 240 seconds)
[10:55:52] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[10:55:52] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (*.net *.split)
[10:55:52] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:55:52] *** Quits: seabre (~seabre@user/seabre) (*.net *.split)
[10:55:52] *** Quits: sakasama (~sakasama@user/sakasama) (*.net *.split)
[10:55:52] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[10:55:52] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[10:55:52] *** Quits: xunsku (~akmnlrse@2.56.212.155) (*.net *.split)
[10:55:52] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[10:58:06] *** Joins: econo (uid147250@user/econo)
[10:58:06] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[10:58:06] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:58:06] *** Joins: seabre (~seabre@user/seabre)
[10:58:06] *** Joins: sakasama (~sakasama@user/sakasama)
[10:58:06] *** Joins: cehteh (~ct@git.pipapo.org)
[10:58:06] *** Joins: webstran- (~webstrand@user/webstrand)
[10:58:06] *** Joins: xunsku (~akmnlrse@2.56.212.155)
[10:58:06] *** Joins: danieli (~danieli@user/danieli)
[10:58:06] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[10:58:06] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[12:58:51] *** Quits: pbone (~pbone@159.196.16.104) (Ping timeout: 268 seconds)
[12:59:40] *** Joins: pbone (~pbone@159.196.16.104)
[13:27:31] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:32:13] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[14:00:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:240f:2de:4550:ff01)
[14:00:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:240f:2de:4550:ff01) (Changing host)
[14:00:12] *** Joins: skapata (~Skapata@user/skapata)
[14:03:09] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:05:54] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[14:53:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[15:38:57] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:41:53] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[15:46:43] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:58:56] *** Joins: Leone (~Leo@108.175.224.215)
[16:36:01] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[16:36:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[16:37:33] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Client Quit)
[16:39:05] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[17:29:40] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[18:24:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:28:42] <aindilis> stis: TY!  Do you know of a way to read the debugger into an atom, or some other prolog data structure?  My use case is I have rules that determine whether someone has the resources they need to be productive.
[18:28:43] <aindilis> And I want to see which conditions are failing, causing the requirements to not be met.  https://frdcsa.org/~andrewdo/writings/productivity_requirements.pl
[18:30:17] <ccx> aindilis: spy or tspy
[18:30:23] <aindilis> awesomesauce!
[18:30:37] <ccx> That's basically a breakpoint on a predicate
[18:32:46] <ccx> Also see assertion/1, that might help if you know things shouldn't fail
[18:33:10] <aindilis> oh I need this to be part of normal program execution.  So like run :- user(Person),whyFail(isAbleToBeProductive(Person),Reason),...
[18:33:29] <aindilis> or whySucceed, etc
[18:33:31] <aindilis> kk, ty!
[18:34:02] <aindilis> I guess I will finally have to learn to use a debugger, since I'm self taught
[18:34:31] <aindilis> I was trying to do it with goal_expansion, similar to here:
[18:34:46] <aindilis> https://github.com/aindilis/aop-swipl/blob/master/alt22.pl
[18:35:36] <aindilis> basically by logging the results of all predicates being executed into a test_data
[18:35:42] <aindilis> I'll upload my script in a sec
[18:36:08] <ccx> for whySucceeds you could simply extend your facts and rules into DCG which adds reasoning explanations as it runs.
[18:36:27] <ccx> whyFails is, in general, bit tricky problem
[18:38:35] <aindilis> ah, interesting
[18:47:43] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[18:59:48] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[19:00:36] <aindilis> ccx: https://github.com/aindilis/productivity-requirements
[19:02:06] <ccx> You should be able to write custom tracer to list all failed predicate calls. But I think that probably won't be practical.
[19:02:47] <ccx> You may use the exception system to return to calling scope on first failure. But then you may be losing solutions.
[19:03:56] <aindilis> hrm, okay, well I really appreciate you lending your expertise here
[19:04:22] <aindilis> so a tracer would be like a prolog-based prolog interpreter?
[19:05:47] <ccx> https://us.swi-prolog.org/pldoc/man?section=tracehook
[19:05:53] <aindilis> ty!
[19:06:36] <ccx> Be aware that tracing/debugging turns off tail-call optimization, among other things.
[19:07:03] <ccx> In case you needed that to not blow your stack.
[19:07:07] <aindilis> k
[19:07:46] <aindilis> well I'm just going to copy and edit down this discussion into the source code if that's alright
[19:07:52] <aindilis> and then pause for now
[19:19:43] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:31:12] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[19:34:07] <[relay]_> <wf2> I've been thinking about this sort of problem a lot over the years, and I think the best model would be to take the deepest depth of failure, report on what bindings led up to it, and which specific clause failed
[19:34:49] <aindilis> ty!
[19:35:27] <[relay]_> <wf2> eg, if you have f(X) :- a(X),b(X,Y),c(Y,Z). then any failures on a/1 or b/2 should be ignored for reporting if it ever failed on c/2
[19:35:53] <ccx> That's still wild guesswork though. Useful when your code happens to be structured so it gives an useful answer. But I wouldn't expect it to scale beyond debugging help.
[19:35:57] <[relay]_> <wf2> and it can give the bindings for Y (and X) for printing the c(Y,Z) failure(s)
[19:36:19] <aindilis> (ideally what I would get would be which clause failed + assume it didn't and then which additional clause failed, and then repeat.  or something like that, so I know everything I must do to ensure success, not just one error at a time)
[19:36:25] <[relay]_> <wf2> @ccx: yeah, I know. But when there are large inference bodies, something like this could help
[19:36:51] <aindilis> the funny thing is I think Logicmoo already has this capability
[19:36:52] <[relay]_> <wf2> aindilis: problem is there usually isn't just 1 failure, but many branches searched
[19:37:06] <aindilis> yeah
[19:37:19] <aindilis> Cyc has WhyNot I believe
[19:37:25] <[relay]_> <wf2> none of which succeeded, but which one is the failure you "care" about?
[19:37:38] <aindilis> I see
[19:38:38] <aindilis> I suppose I could rebuild the thing from scratch to just not use Prolog at all, but be interpreted by Prolog
[19:38:42] <ccx> I believe Cyc/Logicmoo can work on negative facts. And thus can give you inference chain proving X is impossible.
[19:39:16] <aindilis> Maybe I do that, maybe I just reformulate into CycL and then query the API
[19:39:49] <ccx> But if you don't have proof that X is true nor that X is false you are left in undecided state. And Prolog by default has closed world. That means: if nothing I tried led to success it must be false.
[19:40:12] <aindilis> yeah.  I have a version of FLP that is based on CYC anyway.
[19:40:24] <aindilis> *written in CycL
[19:41:27] <ccx> I don't think reformulating it into CycL will help unless you also write the negative facts and rules for inferring queries to be impossible to satisfy. Which you can do in pure Prolog.
[19:41:53] <ccx> And even then it will work only some time. Because undecidable queries are a thing.
[20:19:59] <yauhsien> how can it be when I want to write some negative facts which are based on absence? it have to be a challenge.
[20:20:41] <ski> "assume it didn't and then which additional clause failed" -- sounds hard, without hallucinating instantiations
[20:20:56] <ski> being able to state expected determinism of modes might be helpful, in this ballpark, fwiw
[20:21:11] <aindilis> cool
[20:21:42] <ski> (and we should have both OWA and CWA ..)
[20:23:42] <ski> hmm .. i wonder how making a Prolog implementation (e.g. just an interpreter) that potentially built refutation terms, would work out
[20:24:27] <ski> (with a two-level continuation model for backtracking, there is already room for passing some sort of refutation evidence backwards .. perhaps that could help here)
[20:25:11] *** Quits: theglass (~glass@user/theglass) (Remote host closed the connection)
[20:25:26] <aindilis> yauhsien: if/when you get it working, plz check with dmiles, as I believe he has an OWA implementation based on CWA, that you could compare with
[20:26:02] <yauhsien> sure. ty.
[20:27:53] <ccx> I suspect it'd be easier if you did "just" Datalog and not whole Prolog. Might be enough for stuff like this.
[20:28:01] <aindilis> nice
[20:43:38] <aindilis> or maybe a Truth Maintenance System for Prolog would work, idk
[20:44:06] * ski . o O ( s/Truth/Reason/ )
[20:48:00] <aindilis> I plan on doing a checklist to ensure productivity between (major) life distractions, you know, when life gets in the way of programming
[20:48:16] <aindilis> cause I am constantly waylaid
[20:49:10] <aindilis> I'm also creating an ontology of distractions/interruptions/etc, with a view to reducing them ahead of time by design
[20:49:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:51:44] <ski> sometimes distractions are helpful
[20:51:46] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[20:52:14] <ski> it can be good to stare out the window, or take a promenade, or engage in something different
[21:20:38] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:46] *** Joins: ns12 (~ns12@user/ns12)
[21:31:28] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[22:25:56] *** Joins: econo (uid147250@user/econo)
[22:38:32] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[22:48:16] <[relay]_> <dmiles> @<yauhsien> how can it be when I want to write some negative facts which are based on absence? it have to be a challenge.
[22:48:57] <[relay]_> <dmiles> you jsut need an outer wrapper pred.. like neg(knows(joe,isa(fido,dog)))
[22:51:03] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:51:42] <[relay]_> <dmiles> ccx:  sometimes datalog would proclused things like knows(joe,isa(fido,dog))  and negations>
[22:51:50] <[relay]_> <dmiles> +?
[22:53:19] <ski> extensional relations are OWA
[22:54:31] <[relay]_> <dmiles> i was thinking you'd have to have 2 datalog databases for OWA
[22:55:15] <[relay]_> <dmiles> one that where everything true was representing true and the other for the negations
[22:55:16] <ski> you could, i suppose, if you're trying to model stuff on top of it
[22:55:52] <[relay]_> <dmiles> since OWA to be descent you'd need tomodel both
[22:55:54] <ski> (and probably some kind of disjointness integrity constraints .. can't recall how Datalog does that stuff)
[22:56:32] <[relay]_> <dmiles> decent*
[23:38:49] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[23:56:12] *** Joins: yauhsien_ (~Yau-Hsien@61-231-25-133.dynamic-ip.hinet.net)
[23:57:37] *** Joins: yauhsie__ (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[23:59:43] *** Quits: yauhsien (~Yau-Hsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
