[00:00:00] *** Joins: phossil (~tophullyt@162.213.177.125)
[00:03:07] *** Quits: phossil (~tophullyt@162.213.177.125) (Client Quit)
[00:17:35] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Ping timeout: 250 seconds)
[00:17:35] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 250 seconds)
[00:17:38] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (Ping timeout: 252 seconds)
[00:18:01] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 250 seconds)
[00:18:02] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Ping timeout: 240 seconds)
[00:18:11] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 252 seconds)
[00:18:13] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 240 seconds)
[00:18:27] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 250 seconds)
[00:18:42] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Ping timeout: 260 seconds)
[00:19:19] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Ping timeout: 250 seconds)
[00:19:39] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Ping timeout: 260 seconds)
[00:19:39] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 260 seconds)
[00:19:45] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: sp (~sp@user/susam) (Ping timeout: 250 seconds)
[00:19:49] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 240 seconds)
[00:19:50] *** Quits: sepanko (~sepanko@user/sepanko) (Ping timeout: 252 seconds)
[00:20:06] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 260 seconds)
[00:20:07] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 260 seconds)
[00:20:38] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 268 seconds)
[00:21:38] *** Joins: Inline (~Inline@aftr-37-201-241-234.unity-media.net)
[00:21:51] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 268 seconds)
[00:26:50] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:32:45] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[00:33:56] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[00:34:32] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:35:11] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:36:33] *** Joins: sp (~sp@user/susam)
[00:36:40] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[00:36:58] *** Quits: pve (~pve@178-55-232-234.bb.dnainternet.fi) (Quit: leaving)
[00:40:24] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:47:26] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[00:51:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[00:51:48] *** Joins: sepanko (~sepanko@user/sepanko)
[00:52:47] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[01:12:36] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[01:15:22] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[01:22:46] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
[01:23:58] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[01:26:04] *** Joins: dre (~dre@2001:8003:c932:c301:c96a:e559:986b:eb26)
[01:26:15] *** Quits: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a) (Remote host closed the connection)
[01:26:37] *** Quits: skeemer__ (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se) (Quit: Leaving)
[01:35:34] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[01:43:38] *** Quits: dre (~dre@2001:8003:c932:c301:c96a:e559:986b:eb26) (Ping timeout: 260 seconds)
[01:47:02] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[01:49:14] *** Joins: dra_ (~dra@2a04:4540:6416:3a00:a179:6502:b833:e628)
[01:52:05] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Remote host closed the connection)
[01:52:06] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Read error: Connection reset by peer)
[01:52:07] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Read error: Connection reset by peer)
[01:52:07] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[01:52:08] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (Read error: Connection reset by peer)
[01:52:08] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Write error: Connection reset by peer)
[01:52:09] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Write error: Connection reset by peer)
[01:52:09] *** Quits: sepanko (~sepanko@user/sepanko) (Write error: Connection reset by peer)
[01:52:09] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Read error: Connection reset by peer)
[01:52:09] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Read error: Connection reset by peer)
[01:52:10] *** Quits: sp (~sp@user/susam) (Read error: Connection reset by peer)
[01:53:42] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[01:55:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[01:57:34] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[02:00:45] *** Joins: dre (~dre@60.229.45.121)
[02:03:24] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[02:03:24] *** Joins: sepanko (~sepanko@user/sepanko)
[02:03:24] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[02:03:24] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[02:03:24] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[02:03:24] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[02:03:24] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[02:03:24] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[02:03:24] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:03:24] *** Joins: hayley (~theemacss@user/hayley)
[02:03:25] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[02:03:25] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[02:03:25] *** Joins: sp (~sp@user/susam)
[02:03:25] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[02:03:25] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[02:03:25] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[02:03:25] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[02:03:25] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[02:03:25] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[02:03:25] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[02:03:25] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[02:03:36] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[02:04:13] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:05:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:06:15] *** Quits: dra_ (~dra@2a04:4540:6416:3a00:a179:6502:b833:e628) (Remote host closed the connection)
[02:13:25] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1b4:2cec:47c3:871e) (Ping timeout: 240 seconds)
[02:16:21] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 20000)
[02:16:24] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[02:16:42] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[02:17:05] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Client limit exceeded: 20000)
[02:17:08] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[02:17:13] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Client limit exceeded: 20000)
[02:17:15] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Client limit exceeded: 20000)
[02:17:26] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Client limit exceeded: 20000)
[02:17:27] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (Quit: Client limit exceeded: 20000)
[02:17:52] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[02:17:58] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Quit: Client limit exceeded: 20000)
[02:18:24] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[02:18:30] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[02:18:30] *** Quits: sp (~sp@user/susam) (Quit: Client limit exceeded: 20000)
[02:19:41] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Client limit exceeded: 20000)
[02:27:45] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[02:27:52] *** Joins: igemnace (~ian@user/igemnace)
[02:35:52] <mister_m> Does CL have anything comparable to elixir's Enum.chunk_every? https://hexdocs.pm/elixir/Enum.html#chunk_every/4
[02:35:54] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[02:35:54] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[02:35:54] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[02:35:54] *** Joins: sepanko (~sepanko@user/sepanko)
[02:35:54] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[02:35:54] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[02:36:09] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[02:36:09] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:36:09] *** Joins: sp (~sp@user/susam)
[02:36:09] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[02:36:09] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[02:36:09] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[02:36:10] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[02:36:22] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[02:36:22] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[02:36:23] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[02:37:20] *** Parts: dmgk (~dmgk@user/dmgk) ()
[02:38:43] <Guest74> Not that I know of.  Doesn't look hard to write though.
[02:43:28] <Bike> nothing standard. serapeum has the case of count = step as "batches". other utility libraries might also.
[02:44:25] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Client limit exceeded: 20000)
[02:55:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[02:59:52] *** Quits: raeda__ (~raeda@72.49.249.241) (Ping timeout: 265 seconds)
[03:06:09] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 265 seconds)
[03:12:13] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c7:1a3b:219e:f772:a70d:2c66) (Ping timeout: 240 seconds)
[03:15:44] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9808:86a6:acca:9c5)
[03:19:33] *** Joins: paul0 (~paul0@user/paul0)
[03:25:00] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 265 seconds)
[03:31:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:32:42] <Guest74> so maybe not as easy as I thought.
[03:32:54] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[03:40:31] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[03:40:44] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:49:06] <Guest74> mister_m: There has to be an easier way.  It's a three line loop if you don't care about adding elements or removing lists. 4 to remove lists that are less than count.  And this mess is what I got for everything. https://plaster.tymoon.eu/view/2769#2769
[03:59:49] <rotateq> ":when (not (null current))" <- ":unless (null current)"
[04:07:07] <rotateq> hm is the nested "setf current" by intention?
[04:16:41] <Guest74> nested? if you mean the new lines it's so it doesn't run off the screen. I choose when or unless based on which I think reads better.
[04:17:07] <rotateq> no because of your form in symbol-macrolet above
[04:17:08] <Bike> as in, after macroexpansion this will be like (setf current (typecase leftover ... (cons (setf current ...))))
[04:17:45] <rotateq> yes that
[04:18:32] <Guest74> it's definitely not pretty.
[04:19:06] <Guest74> oh I see.
[04:19:41] <Guest74> an error that doesn't cause errors.
[04:20:06] <rotateq> and beware, even when current is an empty vector NULL will return NIL
[04:22:21] <Guest74> though never happens here.
[04:22:42] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:22:52] <rotateq> that's no reason to let it be this way :)
[04:23:34] <Guest74> You propose I change something for something that will never happen?
[04:23:46] <Guest74> what do you propose?
[04:25:10] <rotateq> that this is no argument for it when you just think be "seeing" that it shall never happen. things are also by reading intention
[04:25:44] <Guest74> what do you proose
[04:25:48] <Guest74> propose
[04:26:02] <rotateq> i can always put more to it which "can never happen"
[04:26:31] <Guest74> what do you propose? or how do you see it happening?
[04:26:58] <rotateq> by reading your lines
[04:27:43] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Remote host closed the connection)
[04:28:12] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[04:28:49] <Guest74> What do you propose as a solution.  Can you give an example of how this would happen?
[04:30:10] <rotateq> i didn't say it's about anything that could happen, just the intention you give to your readers
[04:30:51] <Guest74> so what is the intention I'm giving with that according to you?
[04:30:53] <rotateq> and no, i don't even have until now the right specification of what should clearly be done by the elixir thing
[04:31:01] <rotateq> *sigh*
[04:31:55] <Bike> http://ix.io/3Hxy here's my take
[04:32:04] <Bike> kind of fiddly
[04:32:12] <rotateq> that while you cover lists and vectors it wouldn't handle just lists right
[04:32:47] <rotateq> ah you set the &optional different
[04:34:28] <Guest74> ah, class-of!  I was wondering how to get just vector and not vector some length
[04:34:46] <Bike> i guess interiorp doesn't need to be its own variable
[04:37:45] <Guest74> I kinda cheated on :discard
[04:38:15] <Guest74> i like default of step as count as well.
[04:42:33] <Bike> that's what the elixir page says, right?
[04:43:15] *** Quits: VincentV` (~user@212.241.29.218) (Remote host closed the connection)
[04:43:34] <Guest74> oops.  I just looked at the examples.
[04:43:46] <Guest74> ...and I don't know elixir.
[04:44:25] <Bike> me neither
[04:44:53] <Guest74> I should have got it from looking at the examples though. they have without step.
[04:49:54] <Guest74> I think you're missing collecting just the short chunk if I'm reading yours correctly.
[04:54:40] *** Joins: raeda (~raeda@72.49.249.241)
[05:03:27] *** Joins: akoana (~ah@user/akoana)
[05:08:45] *** Joins: Oladon (~olad@98.43.81.226)
[05:11:40] *** Quits: Catie (~user@user/catie) (Quit: going home)
[05:30:13] *** Quits: random-nick_ (~random-ni@87.116.166.234) (Ping timeout: 252 seconds)
[05:31:14] *** Quits: winning-luser (~c@2601:8c1:80:70d0::756) (Remote host closed the connection)
[06:07:42] <Bike> it works with all the examples on the elixir page, at least
[06:08:04] <Bike> (chunk '(1 2 3 4) 3 3 ()) => ((1 2 3) (4))
[06:08:16] <Guest74> well, I think I've already established I don't read very well :)
[06:08:50] <Guest74> ah, i see now.
[06:09:46] <Guest74> I think I used nil because I don't like typing empty lists.  but that makes the code so much easier.
[06:18:07] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:21:13] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:34c4:6cb5:e8a3:2ce8)
[06:31:32] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:36:35] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:34c4:6cb5:e8a3:2ce8) (Read error: Connection reset by peer)
[06:38:10] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:41:09] *** Joins: robin (~robin@user/terpri)
[06:46:57] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:34c4:6cb5:e8a3:2ce8)
[06:53:19] *** Quits: gaqwas (~john@dynamic-095-115-044-086.95.115.pool.telefonica.de) (Ping timeout: 265 seconds)
[06:53:41] *** Joins: gaqwas (~john@dynamic-095-117-004-089.95.117.pool.telefonica.de)
[07:02:21] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:34c4:6cb5:e8a3:2ce8) (Remote host closed the connection)
[07:12:58] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:51] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:50] *** Joins: anxt (~anxt@dynamic-acs-24-154-157-73.zoominternet.net)
[07:30:50] <beach> Good morning everyone!
[07:38:32] <fe[nl]ix> hey beach
[07:40:41] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[08:08:14] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[08:17:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:20:41] *** Joins: semz (~none@user/semz)
[08:52:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 260 seconds)
[08:54:01] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[08:54:17] *** Joins: Oladon (~olad@98.43.81.226)
[08:56:22] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:05:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:06:16] <lisp123> Has the idea of (slightly after) compile-time determination of generic-function calls to the relevant specialised method been thought of in the past?
[09:06:20] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:07:21] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[09:07:54] <lisp123> In the event new classes are not added after compiliation, then each function call could be fully determined right after compile time? And if that is correct, then one could inline the actual methods vs. runtime determination
[09:08:34] <lisp123> Perhaps have like a marker for particular functions to say "hey dont worry about classes created at runtime, just inline these at compile time"
[09:10:48] <Nilby> Most things in CL, including CLOS, was designed with the idea and possibility that a "sufficiently smart compiler" could make it fast. So yeah. Not that it always works out.
[09:13:14] <lisp123> I see. So a compiler already does something similar
[09:14:07] <lisp123> That would make sense. Until a new class is created during runtime, you can use the old specialisations and avoid having to recheck
[09:15:10] <Nilby> Compilers are allowed to inline things where they can, which is why all those redefinition warnings can actually be useful, becuase if the other uses aren't recompiled it could be using the old inline version.
[09:15:18] <edgar-rft> Classes still an be re-defined and inheritance order still can be changed, both at run-time.
[09:15:55] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[09:17:24] <lisp123> Makes sense!
[09:18:09] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[09:26:49] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:27:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[09:30:59] <beach> lisp123: Yes, one idea is "sealing" as heisig explains in his paper on fast generic functions.
[09:31:25] <beach> lisp123: Another idea is to alter the call site in some way when the generic function changes.
[09:31:39] <hayley> lisp123: Are you thinking of (polymorphic) inline caching?
[09:32:00] <beach> lisp123: You can look at my paper on call-site optimization for the latter.
[09:32:52] <hayley> An inline cache avoids performing a full lookup almost all of the time, and still permits redefinition by "emptying" the caches.
[09:33:39] <lisp123> beach: Thanks! I will read these. I read bits of http://metamodular.com/SICL/generic-dispatch.pdf, but to be honest I skimmed to the unique number bit so maybe missed other parts
[09:33:50] <lisp123> Is it a different paper?
[09:34:01] <beach> Yes.  Hold on...
[09:34:34] <beach> First entry: http://metamodular.com/SICL/
[09:35:58] <beach> Nilby: What does the standard say about inlining generic functions?  I would be surprised if it were allowed to inline a generic function in the state it is in when the caller is compiled.
[09:36:26] <lisp123> hayley: I was looking at Swift which basically copied many of CL's ideas and renamed them. But instead of mixins, they would inline the code directly by synthesising the different components
[09:37:05] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[09:37:15] * hayley waits for Swift to copy tracing garbage collection and multiple dispatch. Oh wait.
[09:37:55] <lisp123> beach: Thanks!
[09:38:04] <hayley> But "mixins" are a design strategy, and inlining is a compilation strategy. You could still program using mixins, if the compiler inlined everything.
[09:38:27] <beach> lisp123: I don't know Swift, but is it a dynamic programming language, by which I mean a language where the semantics are defined by a sequence of interactions in a global environment?
[09:38:38] <lisp123> hayley: Seriously, they go out of their way to rename things when its clear they took inspiration from CL. Blatant plagiarising, but then they hide a lot of their details so its a complete mess anyway
[09:38:55] <hayley> You might want to read <https://bibliography.selflanguage.org/_static/pics.pdf> on polymorphic inline caches.
[09:38:56] <lisp123> beach: No, not at all. All compiled
[09:39:11] <beach> lisp123: I am not talking compiled vs interpreted.
[09:39:14] <hayley> That is again an impedance mismatch.
[09:39:16] <beach> I am talking static vs dynamic.
[09:39:38] <hayley> Swift is defined by a set of source files, i.e. static.
[09:39:46] <beach> lisp123: In a static language, you have none of the problems you have in a dynamic language with adding methods at run time.
[09:39:55] <lisp123> Yes, static
[09:43:03] <beach> lisp123: A programming language is neither compiled nor interpreted.
[09:43:29] <beach> lisp123: That's an implementation strategy.  You can compile Perl and interpret C.
[09:43:46] <lisp123> beach: So I was wondering the value of giving people the option to specify certain methods not to be superceded by other methods defined at run time
[09:44:24] <beach> lisp123: It can have a great impact on performance, as heisig's technique takes advantage of.
[09:45:17] <lisp123> beach: Nice! Well time for me to shut up and read :)
[09:46:06] <beach> However, heisig is now convinced that my technique for call-site optimization will largely supersede his technique.
[09:49:45] <beach> So a "programming language" is a specification that determines the syntax and semantics of conforming programs as well as the result of some non-conforming programs.
[09:51:30] <lisp123> beach: Thanks, I need to remind myself to be more precise on the terminology
[09:51:38] *** Joins: Alfr (~Alfr@user/alfr)
[09:56:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:04:14] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[10:04:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[10:14:46] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:18:09] *** Quits: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net) (Remote host closed the connection)
[10:29:34] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[10:35:33] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11c7:1a3b:fd1e:c5dd:2cf8:aedc)
[10:39:50] *** Joins: Cymew (~ante@host-217-213-139-115.mobileonline.telia.com)
[10:57:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:58:19] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[11:05:34] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:07:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:09:11] *** Joins: treflip (~user@95.79.32.99)
[11:10:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[11:11:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:21:30] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[11:22:31] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[11:26:03] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[11:28:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:34:54] <jackdaniel> lisp123: restricting certain objects to not be modified is known as "sealing"
[11:35:18] <jackdaniel> it is not part of the common lisp standard,  but some implementations offer such functionality
[11:35:30] <jackdaniel> although it is not commonly used
[11:35:39] <jackdaniel> (afaik)
[11:35:55] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:40:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:41:29] *** Quits: OlCe (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[11:43:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:46:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:57:35] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[11:58:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Client Quit)
[11:59:21] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[12:06:12] *** Joins: s-liao (~s-liao@101.86.99.70)
[12:06:38] *** Quits: gaqwas (~john@dynamic-095-117-004-089.95.117.pool.telefonica.de) (Ping timeout: 260 seconds)
[12:09:53] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[12:09:54] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11c7:1a3b:fd1e:c5dd:2cf8:aedc) (Ping timeout: 260 seconds)
[12:11:39] *** Joins: OlCe (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr)
[12:14:10] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11c7:1a3b:fd1e:c5dd:2cf8:aedc)
[12:15:19] *** Joins: notzmv (~zmv@user/notzmv)
[12:35:21] *** Joins: jpl01 (~user@2001:16b8:495b:7600:af40:a648:9882:a3cc)
[12:43:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[12:44:10] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:48:17] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[12:49:51] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 268 seconds)
[12:51:31] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[12:52:37] *** Joins: shka (~herr@109.231.0.226)
[13:04:05] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[13:13:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:14:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:14:46] <lisp123> jackdaniel: Thanks, good to know the term
[13:17:21] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11c7:1a3b:fd1e:c5dd:2cf8:aedc) (Ping timeout: 250 seconds)
[13:21:19] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11c7:1a3b:fd1e:c5dd:2cf8:aedc)
[13:25:18] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:3c94:c906:b584:8a74)
[13:28:51] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11c7:1a3b:fd1e:c5dd:2cf8:aedc) (Ping timeout: 250 seconds)
[13:34:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:40:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:41:14] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:45:53] <rotateq> lisp123: iirc one can define a compiler-macro for a generic-function too if it makes sense
[13:46:12] <rotateq> okay, even it makes not much sense ^^
[13:48:02] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:3c94:c906:b584:8a74) (Ping timeout: 240 seconds)
[13:54:22] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:56:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:11:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[14:12:17] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[14:12:40] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:15:25] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Remote host closed the connection)
[14:15:46] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[14:16:31] * rotateq learnt right now that SETF can also be called on a values form
[14:20:06] <lisp123> rotateq: That's a nice idea!
[14:20:55] <lisp123> beach: I finished reading http://metamodular.com/SICL/call-site-optimization.pdf , very enjoyable - thanks for writing
[14:23:37] <beach> Glad you like it.
[14:25:16] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:38:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:52:43] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:53:44] *** Joins: VincentVega (~user@212.241.29.218)
[15:01:33] *** Joins: rain3 (~rain3___@79.115.252.154)
[15:01:38] *** Joins: knobo (~knobo@cCF845BC1.dhcp.as2116.net)
[15:06:07] *** Quits: OlCe (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[15:08:31] *** Quits: rain3 (~rain3___@79.115.252.154) (Ping timeout: 250 seconds)
[15:09:03] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[15:13:11] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:14:14] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[15:14:58] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[15:24:46] *** Joins: mrvdb (~mrvdb@2001:19f0:5000:8582:5400:ff:fe07:3df5)
[15:27:53] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 252 seconds)
[15:34:24] *** Joins: OlCe` (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr)
[15:37:11] *** Joins: ghard (~user@2a02:a210:52c:4980:b809:cd44:e4b3:f82a)
[15:38:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[15:41:35] *** Quits: OlCe` (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr) ()
[15:41:57] *** Joins: OlCe (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr)
[15:42:54] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:45:19] *** Joins: random-nick_ (~random-ni@87.116.181.93)
[15:48:47] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[15:53:24] *** Joins: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net)
[16:02:31] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:08:22] *** Quits: knobo (~knobo@cCF845BC1.dhcp.as2116.net) (Quit: Client closed)
[16:11:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:11:25] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 240 seconds)
[16:14:47] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[16:22:15] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[16:22:41] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:30:27] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[16:37:40] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:41:49] * pl had a possibly stupid idea for a bit of reader hack with comments
[16:43:09] <pl> namely, modify readtable to turn all line and block comments into forms, then shadow block forms to let those forms record their contents *somewhere* and make it accessible akin to documentation slot on a symbol
[16:43:53] <beach> Welcome to Eclector.  We already read non-form material.
[16:44:29] <yitzi> beach: Beat me to it!
[16:46:34] <pl> beach: would it be usable from, let's say, normal SBCL code?
[16:47:58] <beach> Eclector?  Sure, I use it from SBCL every day.  That's how SICL code is read for bootstrapping.
[16:48:20] <beach> Not with comments and such though.
[16:48:30] <beach> But we do that in Second Climacs.
[16:48:35] <beach> Using SBCL.
[16:50:32] <Nilby> ;; TODO: Revise this comment after implementing comment capture.
[16:56:20] <rotateq> ;; COMMENT: This is a comment.
[17:02:26] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[17:02:51] <rotateq> i wonder why github thinks five files of the climacs 2 repo are with NewLisp
[17:06:31] *** Joins: igemnace (~ian@user/igemnace)
[17:07:21] <jackdaniel> because it is such modern style that it can't be called anything but new
[17:10:06] <rotateq> nice
[17:10:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:10:42] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:d10e:cf28:805f:4f6f)
[17:10:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:13:01] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f1ba:fd5a:67b3:b8c0) (Ping timeout: 240 seconds)
[17:22:15] *** Joins: cosimone` (~user@93-47-230-227.ip115.fastwebnet.it)
[17:22:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[17:27:51] *** Quits: Alfr (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[17:27:55] *** Joins: Alfr (~Alfr@user/alfr)
[17:30:29] *** rgherdt_ is now known as rgherdt
[17:31:05] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:35:08] <yitzi> rotateq: It happens on my repos too sometimes. I have use the gitattributes file to override the linguist settings.
[17:36:59] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:3c94:c906:b584:8a74)
[17:37:35] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c1:d427:7949:7808:b9c6:c460)
[17:38:46] <rotateq> the future is already there
[17:39:34] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[17:39:35] <jackdaniel> should structure slots in defstruct should be matched with string= (not with eql) for sake of avoiding conflicts in /structure-name/-accessor and :accessor-initarg ? I think so
[17:40:02] <jackdaniel> and if yes - is it specified in the standard? if not - is it a good candidate for wscl?
[17:41:25] <pdietz> As I recall, the standard doesn't say exactly which package the various constructed symbols go into.
[17:41:42] *** Quits: anxt (~anxt@dynamic-acs-24-154-157-73.zoominternet.net) (Quit: Leaving)
[17:42:00] <jackdaniel> so the third option would be interning /structure-name/-accessor in the symbol home-package?
[17:42:10] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:3c94:c906:b584:8a74) (Ping timeout: 268 seconds)
[17:42:10] <rotateq> i learned this week by trying out that (string= 'foo :foo) => T, as (format nil "~a ~a" 'foo :foo) => "FOO FOO", if the keyword should really print as such the "~s" directive is useful
[17:42:10] <pdietz> Oops,. no, it does specify.
[17:42:35] <rotateq> a where does it so?
[17:42:47] <pdietz> It goes into the package that is the value of the *PACKAGE* variable at the time the defstruct form is expanded.
[17:42:58] <pdietz> clhs defstruct
[17:42:59] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defstr.htm
[17:43:04] <pdietz> and search for "package"
[17:44:03] <jackdaniel> good, one moving part less :)
[17:44:21] *** Joins: pve (~pve@37-136-183-171.rev.dnainternet.fi)
[17:45:41] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[17:48:04] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:49:25] <rotateq> i'm still not sure what a correct way is to transform a symbol from normal (quoted) to its keyword form, 'foo <- :foo. (read-from-string (concatenate 'string ":" "FOO")) maybe? cause with INTERN it returns it with pipes
[17:50:34] <rotateq> or hm maybe a better question for #clschool
[17:50:48] <jackdaniel> (intern (symbol-name 'foo) "KEYWORD")
[17:50:56] <jackdaniel> or (intern "FOO" "KEYWORD")
[17:51:20] *** Quits: OlCe (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr) (Remote host closed the connection)
[17:51:26] <rotateq> ah now that you say it, INTERN has this optional parameter ^^
[17:51:27] <jackdaniel> you probably did (intern "foo" "KEYWORD")
[17:52:12] <jackdaniel> pipes are just the printer hinting you that symbols are case sensitive and your symbol name does not match the printer case (so probably it is not what you really wanted)
[17:52:23] <jackdaniel> there are no "symbols with pipes" :)
[17:52:24] <rotateq> no i tried additionally (intern (concatenate 'string ":" "FOO")) => |:FOO| and this surely can't be equal to :foo under EQ
[17:52:34] <jackdaniel> ah, that's what you mean, I see
[17:52:49] <jackdaniel> you've used ":" as part of the symbol name
[17:52:50] <rotateq> yes :)
[17:52:59] <pdietz> You should never call INTERN without specifying the package explicitly.  It's a code smell to depend on *PACKAGE* there.
[17:53:25] <rotateq> okay so good that i get that now better
[17:53:46] <rotateq> pdietz: that's a good tip for from now on
[17:54:57] <rotateq> ah now with (inspect :foo) it gets clearer why string= return T. the same name, but another special package
[17:55:32] <dbotton> is there some convention of expressing, even if just a matter of documentation, what the expected return value of a function will be?
[17:56:26] <pdietz> STRING= and similar functions take string designators as arguments, not strings.   String designators can be symbols (which designate their symbol-name) and characters (which designate the string of length 1 containing that character).
[17:56:34] <jackdaniel> dbotton: i.e (declare (values string))
[17:57:45] <pdietz> VALUES is not a standard declaration specifier.
[17:58:00] <rotateq> yeah wondered me too
[17:58:41] <rotateq> and thx pdietz, this with the string designators i learned some months ago from here too :)
[17:58:51] *** Joins: Bike (~Glossina@71.69.170.70)
[17:58:51] *** ChanServ sets mode: +o Bike
[17:58:54] <pdietz> And it is not valid type specifier either.
[17:58:56] <pdietz> clhs values
[17:58:56] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/a_values.htm
[17:59:00] <pdietz> "The symbol values is not valid as a type specifier; and, specifically, it is not an abbreviation for (values)."
[18:00:16] <rotateq> dbotton: you could write #+(or)(declaim (ftype (function * type-of-return-value) the-function-symbol)) or so ^^
[18:00:34] <rotateq> dbotton: or using really THE in the end
[18:04:37] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:04:37] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[18:05:24] <jackdaniel> pdietz: I standa corrected, thanks :)
[18:07:17] <jackdaniel> (proclaim (declaration values))
[18:08:52] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[18:13:22] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:13:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[18:14:21] *** Quits: utis (~utis@vpn-client453.uio.no) (Ping timeout: 252 seconds)
[18:14:40] *** Joins: utis (~utis@vpn-client453.uio.no)
[18:14:44] <dbotton> THE looks like it may work for my intent (just need simple way to document return values), I do some experiments. Thank you
[18:15:20] <jackdaniel> probably the best place is the documentation (i.e not the code)
[18:15:40] <dbotton> although constraining the code is not a bad idea at all
[18:16:42] <dbotton> I want to tell user and even compiler the potential return values
[18:18:47] <rotateq> i don't know how much eg SBCL can benefit from using THE appropriately
[18:19:28] <rotateq> but when you're sure it can also be useful for shipping intention to the reader
[18:21:31] *** Joins: OlCe (~user@amontpellier-657-1-25-61.w109-210.abo.wanadoo.fr)
[18:22:23] <jackdaniel> sbcl won't trust your the on default optimization settings, you need sb-ext:truly-the for that ;)
[18:22:43] <jackdaniel> and if your declaration happens to be incorrect you may have interesting results at runtime
[18:23:22] <rotateq> oh good to know, i try sticking that somewhere into my head for the next time
[18:25:24] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:25:48] <jackdaniel> s/your the/your THE/
[18:29:42] *** Quits: VincentVega (~user@212.241.29.218) (Remote host closed the connection)
[18:31:22] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[18:32:01] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[18:38:28] <rotateq> even just how many additional sb-* packages brings SBCL with it still overwhelmes me
[18:42:49] *** Joins: xsperry (~xs@user/xsperry)
[18:46:34] <pdietz> I found a real use for the DECLARATION declaration.   https://github.com/pfdietz/disable-inline
[18:48:34] <jackdaniel> is this really enough for cover? the implementation may inline without any declarations
[18:49:14] <jackdaniel> you'd need to proclaim notinline for each function
[18:56:15] <pdietz> COVER works even w. inlining, since it alters the source s-expr during macroexpansion.
[18:57:26] <pdietz> Where COVER has problems is with code walkers.
[18:58:06] <pdietz> I had to hack both it and ITERATE to get them to work together.
[18:58:44] *** Quits: random-nick_ (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[19:03:07] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9808:86a6:acca:9c5) (Ping timeout: 252 seconds)
[19:05:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f0cf:5664:8ee5:8e87)
[19:10:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[19:12:11] *** Joins: aeth (~aeth@user/aeth)
[19:14:38] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[19:25:58] <jcowan> heisig's paper on fast generic functions: URL?
[19:26:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[19:27:16] <jackdaniel> yes (/me puts "zjarany zdzicho" meme)
[19:27:34] *** Joins: aeth (~aeth@user/aeth)
[19:27:34] <jackdaniel> more seriously though: https://european-lisp-symposium.org/static/2020/heisig-slides.pdf
[19:28:08] <jackdaniel> it is for sealable metaobjects, fast generic function dispatch is a beach idea
[19:28:26] <jackdaniel> s/is a/is/
[19:28:42] <beach> Not quite.  heisig created the library "fast generic functions".
[19:29:10] <beach> https://github.com/marcoheisig/fast-generic-functions
[19:29:15] <jackdaniel> right, it is covered in this presentation
[19:29:18] <jackdaniel> thanks for the correction
[19:29:25] <beach> Sure.
[19:29:48] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:30:23] *** Joins: VincentVega (~user@212.241.29.218)
[20:00:43] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:13:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:14:07] *** Joins: VincentV` (~user@212.241.29.218)
[20:15:43] *** Quits: VincentVega (~user@212.241.29.218) (Ping timeout: 252 seconds)
[20:15:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:17:03] *** Quits: cosimone` (~user@93-47-230-227.ip115.fastwebnet.it) (Ping timeout: 250 seconds)
[20:17:16] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:17:34] *** Joins: aeth (~aeth@user/aeth)
[20:18:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[20:21:59] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[20:23:24] *** Joins: makomo (~makomo@user/makomo)
[20:26:48] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[20:27:08] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[20:34:02] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[20:38:55] *** Quits: Cymew (~ante@host-217-213-139-115.mobileonline.telia.com) (Ping timeout: 250 seconds)
[20:40:23] *** Joins: Catie (~user@user/catie)
[20:43:50] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[20:48:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:54:35] *** Quits: Inline (~Inline@aftr-37-201-241-234.unity-media.net) (Ping timeout: 252 seconds)
[20:59:25] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:07:37] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[21:08:02] *** Quits: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it) (Ping timeout: 240 seconds)
[21:08:33] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[21:10:56] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[21:20:26] *** Joins: nature (~nature@45.32.235.173)
[21:25:18] *** Joins: cage (~cage@dynamic-adsl-84-220-239-250.clienti.tiscali.it)
[21:44:56] <lisp123> When do lists outshine arrays? Is it in creating new lists by using CONS or something similar? Is there any other area where they are better
[21:45:39] <Bike> pretty much the ease of putting new elements on the front is the main thing, yeah
[21:51:54] <Bike> there's also structural sharing, i guess, but circular lists aren't super commonly used
[21:53:16] <rotateq> being the structure for the code itself :)
[21:53:50] <Bike> you can imagine using vectors for that
[21:54:15] <rotateq> i could maybe ^^
[21:55:26] <lisp123> Bike: Thanks, hmm so I guess not much else
[21:55:56] <Bike> wikipedia has a detailed table comparing alternatives in its "linked list" article
[21:55:57] <rotateq> isn't that enough?
[21:56:12] <lisp123> I am thinking maybe I should just write an "array-list" "array-car" "array-cdr" etc. functions for use where I am not creating my own lists on the fly but rather just accessing them
[21:56:38] <Bike> well, cdr is also nontrivial with arrays
[21:58:53] <lisp123> Yeah, I need to think about how its done and figure out how this row-major-aref works
[21:59:07] <lisp123> Gets a bit confusing when thinking about how the dimensions works
[22:00:05] <lisp123> rotateq: We could implement VISP ;)
[22:00:10] <lisp123> or VECP
[22:00:26] <rotateq> ah pff :D way to unnatural
[22:01:07] <rotateq> lisp123: i see lists way more flexible and that you can implement most other data structures potentially in an elegant way
[22:02:40] <lisp123> They are very flexible / enjoyable to use
[22:02:52] <lisp123> that is true
[22:03:38] <lisp123> Is there like a number of elements, where lists are quite efficient vs. arrays? Say 5 elements
[22:04:31] <_death> (defun vcons (x y) (vector x y)) (defun vcar (vcons) (aref vcons 0)) (defun vcdr (vcons) (aref vcons 1)) ;; todo: add support for vnil
[22:04:48] <rotateq> or next time when someone praises turing machines too much, ask about how to have it recursive :D
[22:05:40] <Bike> lisp123: doubtful, if you mean efficient in read access
[22:06:00] <Bike> getting the head element will pretty much be one memory read either way, and for anything past that the list has to do more reads
[22:06:35] <Bike> did a quick test and getting the third element of a list is (very slightly) slower on sbcl already
[22:06:49] <lisp123> _death: Thanks :) Copied / pasted already into my lisp code :D
[22:07:42] <lisp123> Bike: Interesting, that's very early in the cycle that vectors are more efficient. I was also thinking in terms of space storage, but is it fair to say that generally read access is the more important consideration?
[22:07:57] <lisp123> (this is all assuming no requirement to add elements to the data structure)
[22:08:05] <Bike> lisp123: lists are also going to do worse in space storage, since you have N conses and each cons has two fields
[22:08:11] <rotateq> _death: the vcons i would expect working a bit different, that eg 1 consed to #(2 3) produces #(1 2 3)
[22:08:15] <lisp123> :o
[22:08:42] <jackdaniel> array-cdr - perhaps consing a displaced array
[22:08:59] <lisp123> No more lists for me, then. Farewell friend :'(
[22:09:01] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:09:08] <rotateq> okay the thing with displacing arrays and how and when i didn't understand till now
[22:09:25] <rotateq> lisp123: and why not?
[22:10:21] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:11:21] <_death> rotateq: the point is that it's not lists, it's conses.. like Bike said, the point of "lists" (built from conses and nil) is structure sharing and the related fact that it's a recursive structure
[22:11:55] <rotateq> yes, don't get me wrong, your fast provided solutions/analogies are great :)
[22:12:12] <jackdaniel> rotateq: I've written about conformal displacement on my blog some time ago - that would be quite convenient
[22:13:01] <rotateq> jackdaniel: how was the url again? i have been there some times
[22:13:05] <jackdaniel> lists are convenient for representing environments, because front elements naturally shadow things down the line
[22:13:29] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:13:29] <jackdaniel> turtleware.ee
[22:13:30] <_death> the problem with using a displaced array is that it conses ;).. the problem with vcons is that it's inefficient, a cons is an efficient two-element array
[22:13:33] <jackdaniel> eu*
[22:13:39] * jackdaniel is on phone
[22:14:21] <jackdaniel> cons is also convenient for trees
[22:14:38] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:15:10] <jackdaniel> and shared structure is pretty necessary fir some algorithms
[22:15:12] <jackdaniel> for*
[22:15:30] <jackdaniel> no need to shy away from cons when convenient :)
[22:17:41] *** Quits: mzan (~quassel@mail.asterisell.com) (Client Quit)
[22:22:33] <rotateq> ah right, jeeez rick
[22:25:09] <_death> I was also reminded of https://adeht.org/usenet-gems/on-cons.txt
[22:26:38] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:27:18] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 260 seconds)
[22:27:55] *** Joins: amb007 (~a_bakic@58.14.23.93.rev.sfr.net)
[22:30:56] *** Joins: Oladon (~olad@98.43.81.226)
[22:31:23] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c1:d427:7949:7808:b9c6:c460) (Ping timeout: 268 seconds)
[22:31:23] *** Quits: amb007 (~a_bakic@58.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:31:44] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:32:14] <lisp123> https://turtleware.eu/posts/Conformal-array-displacement.html
[22:32:22] <lisp123> full URL
[22:32:38] <rotateq> thank you
[22:32:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:33:08] <rotateq> think the last post of yours i partially read was about not needed backends with McCLIM
[22:33:55] <lisp123> _death: Thanks for the link, will read. I still don't get the structure sharing & recursive structure benefits of lists, but I just have to think about it some more.
[22:34:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[22:35:14] <_death> if you have PG's ANSI Common Lisp he talks about these properties at length there
[22:35:47] <lisp123> I do actually, thanks for the pointer, will read that too
[22:39:34] <rotateq> oh noez, pointers attack
[22:49:44] <_death> maclisp also had efficient arrays specialized for other sizes, by the way.. they were called HUNKs and you can read about them in the Pitmanual http://www.maclisp.info/pitmanual/
[22:54:25] <VincentV`>  What's the best way to define a macro with an optional argument like here: (name [optional qualifier] (var1 var2) &body)? sbcl's defmethod does (name &rest), so I guess I am out of luck, but I thought I would ask anyhow.
[22:54:54] <Bike> my #1 piece of advice is don't do that. failing that, manual parsing like defmethod is all you got
[22:55:51] <VincentV`> Bike: well, I thought about defining a second * macro, but there may be more qualifiers down the line. But, yeah, looks like rest it is
[22:56:25] <rotateq> jackdaniel: i like the dynamic coloring feature in code blocks at your blog
[22:57:01] <Bike> VincentV`: i mean you can change the syntax slightly to (name (&rest qualifiers) (var1 var2)  . body)
[22:57:10] <Bike> means an extra (), but then you don't need to parse anything
[22:58:24] <VincentV`> Bike: yeah, I thought about that, that's also an interesting option I guess
[22:58:40] <_death> probably the biggest annoyance would be arglist completion.. swank-arglists has some extensibility, but I remember it could use some improvement
[22:59:03] <VincentV`> arglist completion is actually all that bothers me, I don't mind parsing
[23:00:57] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 265 seconds)
[23:03:31] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:04:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:05:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:05:36] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:08:34] <jcowan> In particular, records in MacLisp were built on top of HUNKS (whose sizes were always a power of 2)
[23:09:23] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:10:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:11:10] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:11:41] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:12:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:13:19] *** Quits: nature (~nature@45.32.235.173) (Read error: Connection reset by peer)
[23:16:49] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[23:16:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:17:18] *** Joins: Alfr (~Alfr@user/alfr)
[23:21:18] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:23:00] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:24:27] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:24:36] <jackdaniel> rotateq: people often like these - the css is modified an existing theme in coleslaw
[23:25:30] <jackdaniel> aU've stooped using them because I've decided for myself that they are distractung (and not really useful -only shiny)
[23:25:51] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:26:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:27:23] <lisp123> I read ANSI Common Lisp and thought a bit more. Now I understand the value of shared structures & the recursive definition of lists better
[23:30:34] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 268 seconds)
[23:32:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:33:32] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:38:19] *** Joins: random-nick_ (~random-ni@87.116.160.199)
[23:41:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:41:48] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:42:47] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:43:12] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[23:43:54] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:48:23] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 252 seconds)
[23:49:51] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
[23:49:51] *** Quits: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a) (Remote host closed the connection)
[23:50:48] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
[23:51:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:58:36] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
