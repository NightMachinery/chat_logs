[00:02:42] *** Quits: patrickb (~quassel@55d497ea.access.ecotel.net) (Ping timeout: 240 seconds)
[00:03:14] *** Joins: patrickb (~quassel@55d497ea.access.ecotel.net)
[00:23:47] *** Joins: MoC (~moc@user/moc)
[00:48:47] <tbrowder> Util: thanks, Bruce, i forgot (again!) to look st rosetta code, but the Version trick is easier for me to remember (and write). going to SF raku mtg tomorrow?
[00:54:12] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[01:25:40] *** Quits: nahita (~nahita@178.244.60.103) (Quit: Connection closed)
[01:29:57] *** Joins: notna (~Thunderbi@2a02:2455:361:9e00:70ee:6ad1:8156:b836)
[01:37:09] *** Quits: notna (~Thunderbi@2a02:2455:361:9e00:70ee:6ad1:8156:b836) (Quit: notna)
[02:00:40] *** Joins: Eddward__ (~Eddward@207.138.204.132)
[02:05:55] *** Joins: ctilmes (~ctilmes@pool-100-16-6-40.bltmmd.fios.verizon.net)
[02:07:14] <ctilmes> rakudo 2021.07 package added to official alpine edge repository
[02:12:03] *** Quits: ctilmes (~ctilmes@pool-100-16-6-40.bltmmd.fios.verizon.net) (Quit: Connection closed)
[02:16:28] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[03:10:22] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[03:42:29] *** Quits: patrickb (~quassel@55d497ea.access.ecotel.net) (Quit: Quit.)
[03:48:25] *** Joins: RandalSchwartz (~Adium@c-73-180-5-36.hsd1.or.comcast.net)
[04:27:41] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[04:29:54] *** Quits: Eddward__ (~Eddward@207.138.204.132) (Ping timeout: 240 seconds)
[05:29:54] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:29:54] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:29:54] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:29:54] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:29:54] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:29:54] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:29:55] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:29:55] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[05:30:34] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[05:30:37] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[05:31:57] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[05:31:57] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[05:32:25] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[05:32:26] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[05:32:29] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[05:32:42] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[05:34:40] *** Quits: frost (~frost@59.71.241.179) (Quit: Ping timeout (120 seconds))
[05:40:15] *** Quits: RandalSchwartz (~Adium@c-73-180-5-36.hsd1.or.comcast.net) (Quit: Leaving.)
[05:50:53] <tbrowder> .tell Util ^^^
[05:51:29] <tbrowder> .tell Util ^^^
[06:04:45] *** Joins: frost (~frost@59.71.241.179)
[06:31:54] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[06:48:30] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[06:55:28] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Read error: Connection reset by peer)
[06:55:41] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[07:08:35] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[07:35:37] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[07:49:46] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:58:06] *** Joins: Sgeo (~Sgeo@user/sgeo)
[08:20:24] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:34:51] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:38:24] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[08:46:59] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:37:16] *** Joins: mr_nice_guy (~mr_nice_g@138-185-96-155.static.sumicity.net.br)
[09:39:39] *** Quits: mr_nice_guy (~mr_nice_g@138-185-96-155.static.sumicity.net.br) (Client Quit)
[09:47:16] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[10:06:27] *** Quits: Juerd (juerd@computervrede.nl) (Ping timeout: 250 seconds)
[10:20:35] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[10:28:42] *** Joins: tejr (~tejr@user/tejr)
[10:34:34] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:40:18] *** Quits: codesections (~user@2600:1700:1650:1faf:18c2:18b8:c645:7d97) (Ping timeout: 240 seconds)
[10:59:15] *** Joins: Juerd (juerd@computervrede.nl)
[11:07:05] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[11:14:10] *** Quits: Juerd (juerd@computervrede.nl) (Ping timeout: 256 seconds)
[11:16:27] *** Joins: Juerd (juerd@computervrede.nl)
[11:16:41] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 255 seconds)
[12:16:35] *** Quits: gugod (gugod@li7-202.members.linode.com) (Ping timeout: 252 seconds)
[12:24:03] *** Joins: gugod (gugod@li7-202.members.linode.com)
[12:42:34] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[12:42:35] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[12:50:20] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[12:56:20] *** Quits: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Ping timeout: 258 seconds)
[13:09:28] *** Joins: Kaiepi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[13:09:31] *** Joins: frost (~frost@59.71.241.179)
[13:16:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:34:21] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[13:52:52] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[14:01:30] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 244 seconds)
[14:03:38] *** Joins: tejr (~tejr@user/tejr)
[14:13:31] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[14:14:49] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[14:16:19] *** Joins: frost (~frost@59.71.241.179)
[14:20:58] *** Quits: frost (~frost@59.71.241.179) (Client Quit)
[15:15:50] *** Quits: sivoais (~zaki@199.19.225.239) (Ping timeout: 268 seconds)
[15:16:17] *** Joins: sivoais (~zaki@199.19.225.239)
[15:23:45] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[15:48:12] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[16:01:37] *** Joins: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry)
[16:02:55] <StayHungry> Err… Good afternoon, comrades :)
[16:05:33] <StayHungry> By accident, I found out about Raku, while learning about scripting languages, and here I am 
[16:07:40] <StayHungry> While I was filling out this table - https://dpaste.org/QSC0/slim - Perl failed to offer a way to parse dates beyond Unix epoch (possible only by means of installing remote modules). I wonder if Raku is capable of that natively?
[16:10:19] <MasterDuke> it is https://docs.raku.org/type/Date#method_new
[16:15:46] <nine> Being able to parse ISO-8601 dates is what I miss most in Perl's DateTime... I know there's a parser module, but I always have to look up its name and DateTime::Format::ISO8601->parse_datetime($datetime_str) is a real mouth full.
[16:18:51] <StayHungry> MasterDuke: not quite that... or i miss something. since date is 23-07-1821, i cannot simple say date.new(...). there should a way to attach format like %d-%m-%Y
[16:23:41] <MasterDuke> yeah, the built in date functions can take an optional output formatter, but i don't believe any take an input format
[16:24:37] <MasterDuke> tbrowder is the person to ask about datetime stuff, he's been working in that area recently
[16:25:41] <StayHungry> tbrowder? ok. let's wait for him. so far i can fill out two other variants i guess, i.e. split/reverse/join and reordering of regex groups
[16:30:30] <StayHungry> i was suprised how Perl dealt with regex processing at first
[16:31:05] <StayHungry> other languages tend to do the following: gsub('string', 'search', 'replace')
[16:31:23] <StayHungry> so it's clear where to put your string
[16:31:43] <StayHungry> with Perl it is a bit different as follows print '23-07-1821' =~ s/(\d+)-(\d+)-(\d+)/$3-$2-$1/r
[16:31:59] <StayHungry> mind both =~ and /r
[16:32:28] <StayHungry> of course, these things could learnt by heart, yet are not that obvious
[16:32:51] <StayHungry> wonder if Raku does it the same way
[16:32:56] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:35:57] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:40:47] *** Quits: xinming (~xinming@115.219.33.56) (Ping timeout: 250 seconds)
[16:50:06] <StayHungry> yeah, obviously changed something as say '23-07-1812'.subst(/(\d+)-(\d+)-(\d+)/,/$3-$2-$1/, :g)" does not work
[16:57:36] <tbrowder> StayHungry: hi, i have to leave in a few minutes, but how can i help!
[16:57:41] <tbrowder> ?
[16:58:37] <StayHungry> tbrowder: can Raku parse 23-07-1812 as date by defining input format dd-mm-yyyy?
[16:58:46] <tbrowder> the % time formats i believe someone is working on
[16:59:50] <tbrowder> i don't know for sure about yr question but i don't think so
[17:01:19] <tbrowder> i don't think anyone is in favor of adding a new parse method to core, though, just ask lizmat
[17:02:41] <StayHungry> tbrowder: [  ] ask lizmat about date parsing
[17:02:45] <StayHungry> thank you, sir
[17:04:19] <tbrowder> you're very welcome, see you later, bye...
[17:05:09] <StayHungry> raku... racooooon :D
[17:12:42] <moritz> https://www.emilydamstra.com/please-enough-dead-butterflies/
[17:12:47] <moritz> relevant for our mascot
[17:19:25] <StayHungry> moritz: 'dead butterfly on a pillow'... oh my, how to sleep afterwards
[17:20:47] <moritz> StayHungry: I, for one, couldn't sleep on a pillow with a living butterfly on it
[17:21:30] <lizmat> I'd argue that Camelia is a butterfly that is very much alive
[17:25:29] <StayHungry> comrades, lend a helping hand :) i'm confused with raku's regexes
[17:27:35] <StayHungry> why say '23-07-1812'.subst(/(\d+)-(\d+)-(\d+)/, /$3-$2-$1/, :g) does not work?
[17:29:46] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[17:38:25] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 250 seconds)
[17:38:41] <StayHungry> by trial and error found a working variant, but its syntax is like from hell
[17:38:46] <StayHungry> say '23-07-1812'.subst(/(\d+)'-'(\d+)'-'(\d+)/, {"$2-$1-$0"}, :g);
[17:38:46] <evalable6> StayHungry, rakudo-moar a14655a5c: OUTPUT: «1812-07-23␤»
[17:39:42] <StayHungry> that '-' inside search pattern, that { } in replace pattern, not to mention double quotes
[17:40:06] <StayHungry> tell me there is a simpler way without all that?
[17:40:57] <moritz> m: $_ = ''23-07-1812'; s/(\d+) \- (\d+) - (\d)/$3-$2-$1/; .say
[17:40:57] <camelia> rakudo-moar a14655a5c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3$_ = ''7⏏0523-07-1812'; s/(\d+) \- (\d+) - (\d)/$3-␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        sta…»
[17:41:05] <moritz> m: $_ = '23-07-1812'; s/(\d+) \- (\d+) - (\d)/$3-$2-$1/; .say
[17:41:05] <camelia> rakudo-moar a14655a5c: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at <tmp>:1␤------> 3$_ = '23-07-1812'; s/(\d+) \- (\d+)7⏏5 - (\d)/$3-$2-$1/; .say␤Couldn't find terminator /␤at <tmp>:1␤------> 3$_ = '23-07-1…»
[17:41:12] <moritz> m: $_ = '23-07-1812'; s/(\d+) \- (\d+) \- (\d)/$3-$2-$1/; .say
[17:41:12] <camelia> rakudo-moar a14655a5c: OUTPUT: «Use of Nil in string context␤-1-07812␤  in code  at <tmp> line 1␤»
[17:41:26] <moritz> m: $_ = '23-07-1812'; say  S/(\d+) \- (\d+) \- (\d)/$3-$2-$1/;
[17:41:26] <camelia> rakudo-moar a14655a5c: OUTPUT: «Use of Nil in string context␤-1-07812␤  in code  at <tmp> line 1␤»
[17:41:42] * moritz a bit rusty, something like that should work
[17:42:19] <StayHungry> well, there are 150+ users here... come on, sleepy kingdom, share some wisdom :)
[17:43:46] <moritz> escaping the - is necessary, because in raku regexes, any non-word characters either a special meaning or are reserved
[17:44:12] <moritz> so you don't have to remember arbitrary lists like +*.? have special meanings but -?/ do not
[17:47:00] <El_Che> (building linux packages for new release, atm; doing a test run)
[17:49:16] <StayHungry> moritz: ok, '-' is replaced by \-
[17:49:40] <StayHungry> moritz: what about scary {"$2-$1-$0"} part?
[17:50:10] <StayHungry> (why first element has $0 instead of $1... zero is nothing since its invention... )
[17:53:08] <StayHungry> and official docs has no multi groups example, aggrrhh
[17:56:08] <moritz> in the method form, have to pass a closure to subst, otherwise the $1 etc will be interpolated into the string *before* it's passed to .subst
[17:56:22] <moritz> which the s/// form should not suffer from
[17:57:13] <moritz> m: $_ = '23-07-1812'; say  S/(\d+) \- (\d+) \- (\d)/$2-$1-$0/;
[17:57:13] <camelia> rakudo-moar a14655a5c: OUTPUT: «1-07-23812␤»
[17:57:31] <moritz> m: $_ = '23-07-1812'; say  S/(\d+) \- (\d+) \- (\d+)/$2-$1-$0/;
[17:57:31] <camelia> rakudo-moar a14655a5c: OUTPUT: «1812-07-23␤»
[17:57:45] <moritz> StayHungry: better?
[17:58:21] <moritz> s/// modifies in-place, S/// returns a modified copy
[17:58:43] <StayHungry> is it possible to do without variable?
[17:59:25] <StayHungry> say 'foobar' ~~ s!foo!fox!
[17:59:50] <StayHungry> say 'foobar' ~~ s!foo!fox!;
[18:00:00] <StayHungry> :(
[18:00:52] <moritz> start with `m:' to talk to the bot
[18:01:03] <moritz> and you cannot replace in a string literal, just in a variable
[18:01:26] <StayHungry> but perl -e "print '23-07-1821' =~ s/(\d+)-(\d+)-(\d+)/$3-$2-$1/r" works
[18:01:35] <StayHungry> raku excluded that?
[18:01:36] <moritz> m: say 'foobar' ~~ S!foo!fox!
[18:01:36] <camelia> rakudo-moar a14655a5c: OUTPUT: «Potential difficulties:␤    Smartmatch with S/// is not useful. You can use given instead: S/// given $foo␤    at <tmp>:1␤    ------> 3say 'foobar' ~~ 7⏏5S!foo!fox!␤False␤»
[18:01:51] <moritz> m: say  S!foo!fox! given 'foobar'
[18:01:51] <camelia> rakudo-moar a14655a5c: OUTPUT: «foxbar␤»
[18:02:32] <moritz> s///r corresponds to S///
[18:03:38] <StayHungry> m: say S!(\d+)\-(\d+)\-(\d+)!$2-$1-$0! given '23-07-1812'
[18:03:38] <camelia> rakudo-moar a14655a5c: OUTPUT: «1812-07-23␤»
[18:03:59] <StayHungry> at last :)
[18:06:18] <StayHungry> moritz: what about rx? does it apply here, or it's for different cases?
[18:09:12] *** Joins: ming (~ming@2601:547:a00:7720::88e8)
[18:26:47] <StayHungry> m: split('-','23-07-1812').reverse.join('-').say
[18:26:47] <camelia> rakudo-moar 74d7ff771: OUTPUT: «1812-07-23␤»
[18:27:39] <StayHungry> m: split('-').reverse.join('-').say given '23-07-1812'
[18:27:39] <camelia> rakudo-moar 74d7ff771: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling split(Str) will never work with signature of the proto ($, $, |)␤at <tmp>:1␤------> 3<BOL>7⏏5split('-').reverse.join('-').say given '␤»
[18:27:46] <StayHungry> heh
[18:28:08] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[18:28:26] <Xliff> lizmat: https://gist.github.com/Xliff/6eb22faa3a79d3627a3b0a45ce429294
[18:28:36] <StayHungry> m: split('-').reverse.join('-', $_).say given '23-07-1812'
[18:28:37] <camelia> rakudo-moar 74d7ff771: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling split(Str) will never work with signature of the proto ($, $, |)␤at <tmp>:1␤------> 3<BOL>7⏏5split('-').reverse.join('-', $_).say giv␤»
[18:28:49] <StayHungry> m: split('-', $_).reverse.join('-').say given '23-07-1812'
[18:28:49] <camelia> rakudo-moar 74d7ff771: OUTPUT: «1812-07-23␤»
[18:31:56] <lizmat> Xliff: cool!
[18:32:07] <lizmat> afk&
[18:34:09] <lizmat> Xliff: wonder if you could lose one level of indirection by using ^add_method('BlackPixelOfScreen',&XBlackPixelOfScreen)
[18:34:43] <lizmat> on the Screen class I mean
[18:35:00] <lizmat> hope I made sense
[18:35:04] <lizmat> really afk&
[18:39:55] <StayHungry> m: say '23-07-1812'.split('-').reverse.join('-')
[18:39:55] <camelia> rakudo-moar 74d7ff771: OUTPUT: «1812-07-23␤»
[18:40:53] <Xliff> lizmat: That blog isn't about writing dynamic classes. It'
[18:40:55] <StayHungry> yeah, far more clear than print join '-', reverse split /-/, '23-07-1821'
[18:41:03] <Xliff> lizmat: It's about generating source code. :)
[18:41:15] <Xliff> Feel free to write up something in the comments about that, though!
[18:49:23] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.2)
[18:50:59] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[18:58:31] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.2)
[19:45:47] <El_Che> weekly: https://github.com/nxadm/rakudo-pkg/releases/tag/v2021.07
[19:45:48] <notable6> El_Che, Noted! (weekly)
[19:50:40] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[19:58:01] *** Joins: codesections (~user@2600:1700:1650:1faf:3cf8:628e:7dfa:c012)
[20:00:50] *** Joins: notna (~Thunderbi@2a02:2455:361:9e00:9c5b:9b70:2cf8:9594)
[20:08:58] *** Joins: Sgeo (~Sgeo@user/sgeo)
[20:18:25] <Altai-man> El_Che++
[20:31:15] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[20:39:02] <Util> tbrowder: the Raku Study Group was moved (permanently? one-time-only? to be determined!) this week from Sunday to Saturday. 
[20:39:14] <Util> I did attend it yesterday.
[20:44:33] <mykhal> I have problem with inverting hash with object values to object hash. This looks fine:
[20:44:37] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[20:44:39] <mykhal> m: my %h = ( a => 1, b => (2, 3) ) ;  say %h.antipairs
[20:44:39] <camelia> rakudo-moar 74d7ff771: OUTPUT: «((2 3) => b 1 => a)␤»
[20:45:07] <mykhal> .. but keys are flattened to strings when stored to variable. I did tru :{} trick as wel ...
[20:45:07] *** Joins: tejr (~tejr@user/tejr)
[20:46:03] <mykhal> m: my %h = ( a => 1, b => (2, 3) ) ; my %hh = %h.antipairs; say %hh.raku
[20:46:04] <camelia> rakudo-moar 74d7ff771: OUTPUT: «{"1" => "a", "2 3" => "b"}␤»
[20:48:46] <mykhal> i can assign to $hh, look ok, but then I cannot do associative indexing
[20:49:03] <mykhal> or can i?
[20:49:51] <mykhal> m: my %h = ( a => 1, b => (2, 3) ) ; my $hh = %h.antipairs; say $hh
[20:49:52] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(1 => a (2 3) => b)␤»
[20:50:06] <mykhal> m: my %h = ( a => 1, b => (2, 3) ) ; my $hh = %h.antipairs; say $hh{1}
[20:50:06] <camelia> rakudo-moar 74d7ff771: OUTPUT: «Type Seq does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»
[20:51:42] <mykhal> m: my %h = ( a => 1, b => (2, 3) ) ; my $hh = :{ %h.antipairs }; say $hh{1}
[20:51:43] <camelia> rakudo-moar 74d7ff771: OUTPUT: «Type Block does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»
[20:52:08] <mykhal> m: my %h = ( a => 1, b => (2, 3) ) ; my %hh = :{ %h.antipairs }; say %hh{1}
[20:52:08] <camelia> rakudo-moar 74d7ff771: OUTPUT: «Odd number of elements found where hash initializer expected:␤Only saw: -> ;; $_? is raw = OUTER::<$_> { #`(Block|58702264) ... }␤  in block <unit> at <tmp> line 1␤␤»
[20:58:17] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[20:59:17] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[21:07:40] *** Joins: renormalist (~ss5@renormalist.net)
[21:12:08] <mykhal> oh, there's a Rakudo problem note in https://docs.raku.org/language/hashmap#Non-string_keys_(object_hash)
[21:14:08] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[21:18:42] *** Quits: ming (~ming@2601:547:a00:7720::88e8) (Ping timeout: 240 seconds)
[21:19:11] *** Joins: ming (~ming@2601:547:a00:7720::88e8)
[21:21:45] <tbrowder> Util: thnx
[21:40:56] <tbrowder> .ask StayHungry can you describe your DateTime use case or problem again? i've trained myself for the last 15 plus years to always use the ISO date form, so if i use data from another source and format i just whip up a raku script to convert it (and save the script for future use). i can't believe it in this era but i see at least one of my local gov't agencies still using xx/xx/yy format (where the xx's are not always unambiguous)! 
[21:40:56] <tbrowder> thank goodness it's not my bank or doctor.
[21:40:57] <tellable6> tbrowder, I'll pass your message to StayHungry
[21:43:01] <phogg> tbrowder: I'm with you, but I've had some Europeans argue against ISO8601, preferring DD-MM-YYYY as more convenient. This is a big-endian vs. little-endian argument again.
[21:44:41] <tbrowder> .tell StayHungry try raku module DateTime::Parse
[21:44:42] <tellable6> tbrowder, I'll pass your message to StayHungry
[21:46:28] <tbrowder> phogg: to me dd-mm-yyyy is also fraught with uncertainties, at least in isolation, and the sort issue, erg...
[21:48:24] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[21:54:00] <mykhal> phogg: some europeans get fury when seeing semthing like 23-07-1821, or did July 23 AD have almost 2k days ? rather use 23.07.1821 
[21:54:42] <mykhal> .. July of the year 23 AD
[22:02:48] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-194.092.076.pools.vodafone-ip.de)
[22:03:01] <mykhal> m: my %h = (a=>(0,1),b=>(2,3)); my %H = Hash[Str,List].new; for %h.kv -> $k,$v {my Str %H{List} = ($v => $k)}; say %H
[22:03:02] <camelia> rakudo-moar 74d7ff771: OUTPUT: «{}␤»
[22:06:56] *** Quits: ming (~ming@2601:547:a00:7720::88e8) (Remote host closed the connection)
[22:17:57] *** Quits: notna (~Thunderbi@2a02:2455:361:9e00:9c5b:9b70:2cf8:9594) (Quit: notna)
[22:32:57] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:06:31] *** Joins: olve (~olve@231-10-207-82.pool.ukrtel.net)
[23:10:52] <olve> Hi all
[23:10:52] <olve> Question, please:
[23:10:53] <olve> this works:
[23:10:53] <olve> ________________________________
[23:10:53] <olve> use HTTP::UserAgent;
[23:10:54] <olve> my HTTP::UserAgent $useragent .= new;
[23:10:55] <olve> ````````````````````````````````
[23:10:55] <olve> whereas this:
[23:10:56] <olve> ________________________________
[23:10:56] <olve> require HTTP::UserAgent;
[23:10:57] <olve> my HTTP::UserAgent $useragent .= new;
[23:10:57] <olve> ````````````````````````````````
[23:10:58] <olve> throws:
[23:10:58] <olve> ________________________________
[23:10:59] <olve> Package 'UserAgent' is insufficiently type-like to qualify a variable
[23:10:59] <olve> ````````````````````````````````
[23:11:00] <olve> dropping type-constraint works fine:
[23:11:00] <olve> ________________________________
[23:11:02] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:12:17] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[23:13:41] *** Joins: olve_ (~olve@231-10-207-82.pool.ukrtel.net)
[23:17:32] <Util> m: my List %h{Str} = a => (0,1), b => (2,3); my Str %H{List}; for %h.kv -> $k,$v {%H{$v} = $k}; say %H;
[23:17:33] <camelia> rakudo-moar 74d7ff771: OUTPUT: «{(0 1) => a, (2 3) => b}␤»
[23:17:38] <Util> m: my List %h{Str} = a => (0,1), b => (2,3); my Str %H{List} = %h.antipairs; say %H;
[23:17:39] <camelia> rakudo-moar 74d7ff771: OUTPUT: «{(0 1) => a, (2 3) => b}␤»
[23:19:09] <Util> mykhal: ^^^ Using `my` inside the loop shadowed the variable, making it a different %H than you inspected after the loop.
[23:19:53] <Util> Also .antipairs is a short form of the reversal of key and value.
[23:21:04] <Util> my TypeOfValue %hashName{TypeOfKey} is the declaring syntax I use. Hash[Str,List] might be fine, but I am not familiar with it.
[23:21:38] <MasterDuke> olve: https://docs.raku.org/language/modules#require says the importing of symbols happens at runtime with require. so you could do `BEGIN require HTTP::UserAgent` and then it'll work
[23:23:39] <MasterDuke> but if you can't use BEGIN, i'm not sure of a way to declare and initialize the variable like that. `require HTTP::UserAgent; my $useragent = HTTP::UserAgent.new;` does work though
[23:29:33] <mykhal> Util: thanks, I did try .antipairs much simpler way, the issue is inverting to object hash, see approx 2¾ hrs ago
[23:30:07] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[23:40:10] <olve> MasterDuke: thanks for your reply. But:
[23:40:10] <olve> `BEGIN require` effectively turns runtime loading into compile time loading, and if one wants specifically a runtime loading, then how one is supposed to type-constrain?
[23:40:11] <olve> Is the mentioned behavior what is meant to be proper Raku, or is it some sort of not-yet-implemented?
[23:40:29] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:41:20] <mykhal> Util: .. I did not managed to do it this even with this verbose and iterative way
[23:41:39] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[23:42:10] <mykhal> i did died almost from it :)
[23:45:32] <MasterDuke> olve: dunno. moritz, lizmat, or timo might be good people to ask
[23:45:38] <MasterDuke> or vrurg
[23:59:13] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[23:59:19] *** Quits: olve_ (~olve@231-10-207-82.pool.ukrtel.net) (Quit: Leaving)
