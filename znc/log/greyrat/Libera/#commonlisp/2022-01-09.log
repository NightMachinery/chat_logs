[00:00:40] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[00:07:00] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 256 seconds)
[00:11:53] *** Quits: pve (~pve@176-93-74-76.bb.dnainternet.fi) (Quit: leaving)
[00:14:01] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[00:15:07] <sm2n> bollu: package(s).lisp is mostly irrelevant to using libraries in CL
[00:15:37] <phoe> fe[nl]ix: I love the thread docs so far
[00:16:00] <sm2n> in particular, what other languages call packages (i.e units of code that are distributed and built separately) are called systems in CL
[00:16:15] <sm2n> CL packages are simply namespaces for symbols
[00:16:23] <phoe> might read the other ones tomorrow after I wake up
[00:16:58] <sm2n> the de facto build system for CL is called ASDF, and you should have a .asd file in your project to manage dependencies and such
[00:17:25] <random-nick> package.lisp usually contains the defpackage forms for your system
[00:17:34] <random-nick> the .asd file contains the actual system definition
[00:17:52] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:18:39] <sm2n> ASDF stands for Another System Definition Facility, and manages systems as you might guess
[00:18:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:18:50] <mfiano> Thanks to |3b| we are finally green again across the board: https://github.com/bufferswap/pngload/actions/runs/1671311160
[00:19:03] <sm2n> for a quickstart, grab quickproject off quicklisp and let it autogenerate the boilerplate for you
[00:19:15] <phoe> mfiano: congrats!
[00:19:45] <lisp123> That reminds me, whatever happened to Guest74 - did he/she change his nickname in the end?
[00:20:31] <phoe> lisp123: the last mention of the nickname is at https://irclog.tymoon.eu/libera/%23commonlisp?around=1640274104#1640274104
[00:20:36] <mfiano> Likely they didn't like IRC. I remember seeing them on Discord crap years ago
[00:20:43] <mfiano> as JMC-design
[00:21:03] <mfiano> also same name on github
[00:21:05] <lisp123> phoe: Ah thanks. Oh well
[00:22:19] <lisp123> mfiano: Understood, thanks
[00:23:28] <mfiano> Also, for whoever wasn't aware, I made some recent terrible breaking changes to my projects.
[00:24:14] <phoe> how terrible?
[00:25:51] <mfiano> 1) I consolidated all my non-game engine projects into a mono-repo under github.com/mfiano/common-lisp, so you'll have to add whatever you want tracked to your favorite centralized dependency management solution. 2) I removed all of my game engines from the public, until they are finished or usable, because they haven't been a priority in some time, and I don't want to give any false
[00:25:53] <mfiano> impressions.
[00:28:55] <phoe> then for sure https://github.com/quicklisp/quicklisp-projects/blob/master/projects/origin/source.txt will need to be updated
[00:29:19] <mfiano> I did #1 for 2 reasons: It's a pain when I have to help someone pull 10 of my dependencies into local-projects just to use the latest version of one tool that doesn't have the feature in Quicklisp. 2) I am experimenting with other languages, and my github namespace was filling up with short name squats :)
[00:30:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:30:26] <mfiano> Oh quicklisp stopped tracking my stuff a few months ago
[00:30:34] <mfiano> Whatever it has is old
[00:30:49] <mfiano> So anyone that wants new stuff can put in a request
[00:30:49] *** Quits: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:32:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[00:34:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:34:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[00:36:01] <aeth> interesting how you went the opposite direction that I did
[00:36:13] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[00:36:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:36:32] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[00:36:56] <aeth> I originally did everything in what was effectively a monorepo, but I started using different project names because some things will be complete with a few months' effort and some things will never be complete, and expecting someone who downloaded it to know the difference would be asking too much
[00:37:00] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:38:34] <bollu> can I view users of a library? I want to see folks who use Fset
[00:39:16] <bollu> sm2n I'll check out quickproject for next time :D
[00:43:27] <phoe> users, as in, people?
[00:44:24] <phoe> I think the best you can get is using the "social network" feature of github, like https://github.com/search?l=Common+Lisp&q=depends-on+fset&type=Code
[00:44:38] <phoe> but that only gives you repositories and not people who actually use that software
[00:44:59] <phoe> ...again, the watch/star lists for repositories are public, sooooo :D
[00:54:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[00:55:00] <random-nick> I think quickdocs used to list quicklisp systems which depend on a given system
[00:55:20] <random-nick> but that's not quite representative as not everything is in quicklisp
[00:58:08] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:00:16] <kevingal> Is there any way to use a setf function without writing it explicitly? Like, if I want to setf 2 different slots, (setf (left obj) ...) and (setf (right obj) ...), can I abstract that to a function that does the setf calls?
[01:00:16] *** Joins: Alfr (~Alfr@user/alfr)
[01:01:03] <phoe> (dolist (writer (list #'(setf left) #'(setf right))) (funcall writer newval obj))
[01:01:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:01:45] <phoe> or use (fdefinition `(setf ,name)) for full runtime access
[01:02:29] <sm2n> bollu: (ql:who-depends-on :fset)
[01:02:29] <kevingal> I didn't know that you could refer to the setf function using #'(setf left), awesooome.
[01:02:42] <kevingal> Thank you!
[01:03:54] <kevingal> Is there a way to do it just using the name of the slot?
[01:04:21] <kevingal> E.g. could I pass the symbol 'left to my function and get it to setf the LEFT slot?
[01:04:39] <phoe> (dolist (slot '(left right)) (setf (slot-value instance slot) newval))
[01:05:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:07:52] <kevingal> Thanks!!!
[01:10:31] <yitzi> bollu: Also quickdocs.org shows dependents
[01:15:39] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[01:24:37] <yottabyte> I found it weird I needed to do funcall before a function I passed to another function as an argument
[01:25:12] <phoe> yottabyte: hm?
[01:25:20] <yottabyte> also, should I do #' instead of ' when passing it? it would be an issue if I had a defvar with the same name as another function?
[01:25:31] <phoe> oh, this
[01:25:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:25:55] <yottabyte> like (defun something (x f) (f x)) wouldn't work. I would need (funcall f x)
[01:26:10] <phoe> yes, that's correct - welcome to lisp-2 which has multiple namespaces
[01:26:17] <phoe> including one for variables and another for functionws
[01:26:19] <yottabyte> but it's like why? f is a function. why doesn't it just let me do (f x)?
[01:26:34] <phoe> (let ((f (lambda () 42))) (flet ((f () 24)) (f)))
[01:26:39] <phoe> what should be the result
[01:27:24] <phoe> it doesn't matter that F has a function object as a value, it matters that F is accessed in the variable namespace
[01:27:40] <phoe> #' grabs a function object from the function namespace and returns it as a value
[01:28:04] <phoe> and then you need to operate on it as a value, so FUNCALL
[01:28:10] <sm2n> strictly speaking I think funcall is still unnecessary?
[01:28:28] <sm2n> if you allow (let ((f (lambda () 42))) (flet ((f () 24)) (#'f)))
[01:29:02] <sm2n> but CL doesn't
[01:29:21] <pjb> yottabyte: the reason why, is to avoid having to evaluate f at run-time!
[01:29:23] <phoe> sm2n: sure, that could work in theory, but CL only allows a (lambda ...) form as a list that can begin a function call
[01:29:27] <yottabyte> phoe: I guess 42?
[01:29:35] *** Quits: danieli (~danieli@user/danieli) (Ping timeout: 250 seconds)
[01:29:40] <phoe> yottabyte: ask your REPL for an answer!
[01:29:51] <pjb> yottabyte: by having those two namespaces, we can specify CL so that (f args...) can be compiled without EVALUATING f !
[01:29:53] *** Joins: danieli (~danieli@user/danieli)
[01:30:11] <phoe> sm2n: there used to be a #, macro that did the inverse of #' - you could do things like (let ((f ...)) (#,f 1 2 3))
[01:30:19] <yottabyte> 24 is the right answer. wow
[01:30:22] <phoe> and that macro can be portably implemented, even if a little inefficient
[01:30:30] <phoe> yottabyte: now try (funcall f)
[01:31:04] <yottabyte> 42. so confused
[01:31:08] <phoe> in particular, #,f can expand into (lambda (&rest args) (apply f args))
[01:31:15] <phoe> and ((lambda (&rest args) (apply f args)) 1 2 3) is a valid function call in CL :D
[01:31:23] <sm2n> Ah
[01:31:46] <phoe> yottabyte: in one case F refers to the function namespace, in the other case - to the variable namespace
[01:31:59] <phoe> thanks to this, we can use variable names like LIST
[01:32:00] <yottabyte> ah, I see
[01:32:09] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[01:32:11] <phoe> and because of this, we are stuck with FUNCALL to avoid confusion
[01:32:12] <yottabyte> oooo I was wondering about that
[01:32:31] <yottabyte> so I could do like funcall list list or something
[01:32:35] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[01:32:43] <phoe> (let ((list '(1 2 3))) (print list))
[01:32:59] <phoe> the tradeoffs of the great lisp-1 versus lisp-2 debate
[01:33:21] <phoe> actually has anyone ever proposed a lisp-3/2 to end it once and for all? :(
[01:33:30] <yottabyte> I think it's nice
[01:33:40] *** Quits: hobo (~hobo@204.128.242.10) (Quit: ZNC 1.8.2 - https://znc.in)
[01:33:41] <yottabyte> having the two different namespaces
[01:33:41] <pjb> phoe: Please read: http://www.nhplace.com/kent/Papers/Technical-Issues.html
[01:33:54] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Client Quit)
[01:34:00] <pjb> phoe: it's not 1 and 2, it's really 1 and ∞.
[01:34:08] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[01:34:12] <phoe> pjb: I was about to write this
[01:34:19] <gabc> yottabyte: it's more of a flame war than a debate at this point tho
[01:34:30] <phoe> CL is a lisp-n because there's like nine standard namespaces and programmers are free and encouraged to define their own
[01:34:31] <gabc> "at this point" might have been in the 90s
[01:34:54] <yottabyte> like, packages?
[01:35:01] <phoe> that's one namespace
[01:35:45] <yottabyte> pjb: what did you mean by avoiding to evaluate f at run-time and (f args...) can be compiled without evaluating f?
[01:35:53] <phoe> variables/symbol macros; functions/macros; classes/conditions/types; method combinations; block names; catch tags; tagbody tags; restarts; packages; compiler macros
[01:36:01] <phoe> I think that's the standard namespaces
[01:36:35] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Client Quit)
[01:36:48] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[01:39:42] <rackethelp> Is there a way to annotate functions with polymorphic types?
[01:40:14] <rackethelp> (As in, has someone already written such a macro :))
[01:41:32] <rackethelp> (I may disconnect but can follow the conversation via the irclogs)
[01:43:33] <sm2n> Is there something wrong with declaring the type normally?
[01:43:45] <sm2n> the type would just look like (or t1 t2), no?
[01:44:29] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Quit: Client closed)
[01:44:48] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[01:45:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:46:13] <rackethelp> does that work if I want to write a type for a function from List a  to List a?
[01:46:27] <rackethelp> Like, I want to make sure that the contents of the list always have the same type
[01:47:22] <sm2n> Oh, ...I don't think that's possible?
[01:47:38] <rackethelp> oh, okay, that's fine-- i was just wondering
[01:47:45] <rackethelp> thanks!
[01:48:39] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Client Quit)
[01:49:08] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[01:50:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:51:50] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[01:53:39] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:f0c5:22cf:9579:e19b)
[01:54:40] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f9:daee:35de:fd7:e9ea:ca89)
[01:55:08] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:55:46] <Bike> no, there are no universally quantified types.
[01:55:56] <phoe> ;; try coalton though
[01:56:03] *** Joins: Oladon (~olad@98.43.81.226)
[01:58:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:f0c5:22cf:9579:e19b) (Ping timeout: 240 seconds)
[01:59:53] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[02:01:41] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:01:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:03:09] <pjb> yottabyte: indeed, f can be determined at compilation time, according to the rules of CL.
[02:03:13] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:03:56] <pjb> yottabyte: 1- if the definition of f is in the same compilation-unit as the call to f, and if f is not declared notinline, or if it's declared inline, then the compiler doesn't need to go thru the symbol f at run-time, it can hardwire the address of the function in the JSR.
[02:04:14] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[02:04:17] <pjb> and there's no 2-.
[02:04:50] <yottabyte> Interesting
[02:06:04] <pjb> yottabyte: note also, that when we must go thru the symbol (fdefinition 'f), this can be done before or after the evaluation of the arguments, since it's not considered an evaluation.
[02:06:57] <pjb> yottabyte: so: (defun f (&rest args) 'before)  (declaim (notinline f))   (f (defun f (&rest args) 'after))  can return BEFORE or AFTER.
[02:07:19] <phoe> the reason for what pjb is describing now is that resolving function names, no matter if it's for (foo ...) or for #'foo, needs only the lexical environment to do its work - either a function is named locally via FLET or LABELS, and that's apparent in the lexical environment and therefore can be hardwired, or it's not - so it must name a global function, and the global environment is always present
[02:07:42] <phoe> there's no need to evaluate anything, just inspect the environment to figure out where you gotta grab your fdefinition from
[02:10:57] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 256 seconds)
[02:11:01] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[02:14:11] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[02:16:48] *** Joins: jstoddard_ (~Jeremiah@2600:8801:a400:5a00::ba77)
[02:16:53] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Read error: Connection reset by peer)
[02:18:28] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:19:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:34:59] *** jstoddard_ is now known as jstoddard
[02:38:39] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[02:39:41] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[02:44:34] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f9:daee:35de:fd7:e9ea:ca89) (Read error: Connection reset by peer)
[02:44:55] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Quit: Client closed)
[02:46:26] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[02:46:40] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Client Quit)
[03:09:16] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[03:10:01] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[03:10:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[03:12:32] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:14:09] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:15:07] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:24:17] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[03:25:37] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 240 seconds)
[03:45:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:47:01] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:48:48] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[03:53:16] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:54:55] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:58:15] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:58c5:6207:2988:1b06) (Ping timeout: 268 seconds)
[03:58:54] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:59:50] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:04:43] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:06:06] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:06:39] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:14:27] <Guest74> looks like i missed lots of graphics talk.
[04:16:45] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[04:23:00] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[04:23:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:28:02] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[04:28:05] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:47:25] *** Quits: algae (~algernon@170.10.246.117) (Ping timeout: 240 seconds)
[04:49:06] <moon-child> pjb: I don't think runtime efficiency is a good argument for having multiple namespaces.  A function call target can still be determined at compile time if it has not been lexically shadowed
[04:49:23] <moon-child> and if it has been lexically shadowed, it's because you wanted it to be shadowed anyway
[04:51:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:51:50] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 252 seconds)
[04:52:04] *** Joins: hobo (~hobo@69.218.33.204)
[04:52:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:17:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:17:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:17:58] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:18:32] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:479:e10b:25ac:9e6f) (Remote host closed the connection)
[05:18:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:19:31] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:21:54] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:22:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:22:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:29:54] *** Joins: algae (~algernon@170.10.246.117)
[05:49:54] *** Joins: Bike (~Bike@71.69.170.70)
[05:49:54] *** ChanServ sets mode: +o Bike
[05:55:30] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[05:55:43] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[05:59:28] *** Quits: jmes (~james@node-1w7jra26acy6dd0v7okm8us5g.ipv6.telus.net) (Remote host closed the connection)
[06:17:08] *** Joins: antonv (~antonv@46.53.246.3)
[06:17:27] <antonv> hi. Is it normal that ASDF loads the same .fasl file twice?
[06:18:06] <antonv> In my file I do (fare-memoization:memoize ...) for some functions, and it complains if preformed twice.
[06:18:44] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 256 seconds)
[06:19:01] <antonv> Usually loading my ASDF system goes ok, but now fare-memoization started to complain about the second invocation - and indeed, the file is loaded twice
[06:26:18] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[06:27:22] <moon-child> pjb: (iow, runtime efficiency _is_ a good argument against pervasive dynamic scope)
[06:38:43] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[06:51:10] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[06:52:38] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[06:52:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[06:58:13] *** Quits: phantomics (~phantomic@97-118-150-246.hlrn.qwest.net) (Ping timeout: 240 seconds)
[07:07:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:13:05] *** Joins: john__ (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[07:13:51] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[07:15:49] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Ping timeout: 256 seconds)
[07:23:53] *** Joins: Oladon (~olad@98.43.81.226)
[07:31:46] <beach> Good morning everyone!
[07:37:47] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:42:58] *** Quits: algae (~algernon@170.10.246.117) (Quit: WeeChat 3.4)
[07:48:55] <antonv> shalom
[07:50:55] *** Joins: semz (~none@user/semz)
[07:51:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:51:47] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[07:55:02] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[07:56:38] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[08:01:57] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e)
[08:17:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:22:16] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:28:19] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[08:28:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:28:56] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:35:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:35:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:45:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:52:18] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8890:34c2:e4a2:a79e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:53:34] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Quit: Leaving)
[09:01:26] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:13:01] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[09:21:37] <bollu> How do I view what value was returned when debugging using Swank?
[09:21:43] <bollu> I can examine stack frames
[09:21:56] <bollu> But I don't follow how to figure out what was computed by a call.
[09:22:22] <bollu> (if it's not bound to a let or some such, but is an honest subexpression)
[09:23:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:23:57] <sm2n> bollu: That information isn't available by default as far as I am aware
[09:24:34] <lisp123> Was there a particular reason CL was designed so that access to internal functions was still allowed, just not recommended?
[09:24:43] <sm2n> bollu: For subexpressions, The best facility I know what SLY provides, stickers
[09:25:05] <sm2n> But for function calls in particular both SLY and SLIME have a tracing facility
[09:25:06] <lisp123> Like its very useful to have it this way and it treats programmers as grown-ups, but I wonder if there was any particular other reason
[09:25:09] <antonv> bollu: you can simply evaluate this call again - if that's a stateless subexpression
[09:25:32] <bollu> antonv i agree
[09:25:38] <sm2n> ^ also this, note that you still have access to your repl while in the debugger
[09:25:45] <sm2n> sometimes people forget that
[09:25:50] <bollu>  It seems like a poor proxy for what I want though, in case it is stateful, or expensive
[09:25:55] <bollu> That's what I've been doing so far
[09:26:18] <sm2n> I would recommend checking out SLY then
[09:26:21] <antonv> not only repl, you can evaluate using local variables
[09:26:22] <sm2n> (it's a SLIME fork)
[09:26:28] <antonv> pres 'e' in slime
[09:26:36] <sm2n> right, eval in stack frame as well
[09:26:52] <antonv> lisp123: strange question
[09:27:14] <bollu> sm2n so, do stickers show subexpression values?
[09:27:56] <sm2n> Basically, you select an expression prior to running the code, and add a "sticker" to it
[09:28:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:28:13] <sm2n> then once you recompile the code, every time that expression is evaluated, the value is captured
[09:28:22] <sm2n> and you can playback through it
[09:30:42] <beach> lisp123: What is an "internal function"?
[09:31:09] <sm2n> beach: He means symbols that are not exported
[09:31:24] <beach> Oh, that's very different.
[09:32:24] <bollu> sm2n I am told that the debugger is very hackable. Is this a feature i can add into SBCL/SLDB, that of showing me the return value of each expresion?
[09:32:47] <bollu> (I ask for entertainment. I'd like to learn how to exploit the extensibility of lisp)
[09:33:23] <sm2n> bollu: I am not the person to ask, but I would imagine probably not
[09:33:33] <lisp123> sm2n: Yes, thanks
[09:33:34] <sm2n> simply because that would preclude a lot of optimizations
[09:34:15] <sm2n> You could ask in #sbcl if you are curious, since I think that would require compiler support
[09:34:15] <beach> lisp123: I can't think of a single reason why a programming language would not allow the programmer to access all of the code that programmer has written or installed.
[09:34:54] <sm2n> (note that the debugger you use in slime/swank is part of that — you can write portable debuggers as libraries in CL!)
[09:35:24] <beach> bollu: Debugging in FLOSS Common Lisp implementations is in a dismal state: http://metamodular.com/SICL/sicl-debugging.pdf
[09:37:10] <antonv> bollu
[09:37:29] <antonv> do you know many debuggers in other languages where value of already executed expression may be seen?
[09:37:50] <antonv> except for experimental "time machine" debuggers?
[09:37:54] <beach> I was just about to ask something similar.
[09:37:58] <lisp123> beach: "Commercial" software may not want to expose their internals (not that I'm a fan, just giving a reason). The other thing is it increases assurance to the library writer that he/she can change the internals of his library without worrying about any users accessing those internals. Although any user who did so would do so at their own risk
[09:38:41] <beach> lisp123: I can see why they would not want to expose their source code.
[09:38:59] <sm2n> "time machine" debuggers typically don't let you do that either
[09:39:15] <bollu> antonv I don't want *all* already evaluated expressions. I only want the *last* one. That is, the return value of the last executed expression. Visual studio provides this for C++, for example. Also, the rr time travel debugger is quite stable and works very well.
[09:39:24] <sm2n> They snapshot syscalls, so any state between syscalls has to be regenerated typically
[09:39:32] <sm2n> (talking about rr)
[09:40:12] <beach> lisp123: If you have a user that modifies the internals of third-party modules, you should find a different user.
[09:40:31] <bollu> beach SICL is the system you're implementing, I gather?
[09:40:38] <beach> Yes.
[09:41:11] <lisp123> beach: Yes
[09:41:46] <bollu> Very cool
[09:41:51] <beach> Thanks.
[09:43:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:43:52] <antonv> bollu, right the "experimental" was a wrong word, but those tools are relatively new, as far as I know, I never used them (never needed actually)
[09:44:05] <moon-child> 'debuggers where value of already executed expression may be seen?'  as in, a value is associated with every ast node which was executed?  I have no idea, but I have always wanted that
[09:44:27] <antonv> as for the last expression, I don't really understand the use case
[09:44:49] <beach> lisp123: In a multi-user Common Lisp system, you would want first-class global environments as we have planned.
[09:45:04] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: ERC (IRC client for Emacs 27.1))
[09:45:50] <lisp123> beach: Yes, I can see now yet another reason why that would be very helpful (to avoid one user's mistakes affecting another)
[09:45:53] <antonv> bollu, lisp debugger is activated by invoke-debugger, which in turn may be invoked by (error ...) call
[09:46:28] <antonv> so the last expression is the (invoke-dubugger some-condition) and you see the condition in SLDB
[09:47:15] <antonv> so, not clear how to think about the "last expression" that you need
[09:49:53] <bollu> antonv when I step through an expression, say an if condifion, (if (g x) k l), how does one view the value computed by (g x) ? You can step into (g x), and infer what (g x) returned based on whether k or l is executed after (g x) returns. But there's no way to view *what exactly* (g x) computed.
[09:50:06] <bollu> [as far as I can tell. I would love to be proven wrong]
[09:52:22] <antonv> you can step through expressions?
[09:52:37] <antonv> what CL do you use?
[09:52:51] <antonv> Allegro?
[09:54:41] <antonv> Maybe others will suggest something, but what I would do in real life is (let ((flag (g x))) (break) (if flag k l))
[09:54:44] <lisp123> https://github.com/informatimago/lisp/blob/master/common-lisp/lisp/stepper.lisp
[09:54:45] <antonv> and recompile the function
[09:55:05] <antonv> yes, shockingly simple...
[09:56:18] <sm2n> antonv: stickers let you do this without making you change the code and risk committing things you shouldn't
[09:56:34] <antonv> cool
[09:56:37] <bollu> antonv I'm bouncing between SBCL and lispworks personal
[09:56:53] <bollu> sm2n it looks like stickers is what I need, yes :)
[09:58:45] <antonv> lisp123, how to use that stepper?
[10:01:10] <lisp123> antonv: (ql:quickload "COM.INFORMATIMAGO.COMMON-LISP.LISP.STEPPER")
[10:01:18] <lisp123> Then: http://www.informatimago.com/develop/lisp/doc/com.informatimago.common-lisp.lisp.stepper.html
[10:01:55] <lisp123> It's quite good, so worth spending a few minutes learning how it works
[10:04:12] <lisp123> pjb: Just thinking actually, could consider re-implementing CL-STEPPER / IBCL through a DEFADVICE approach vs. changing packages
[10:05:39] <antonv> interesting
[10:07:47] <lisp123> antonv: So basically packages like this 'take over' from the normal CL package, and add some additional functionality to the main CL symbols. In this case, it allows you to then step with much more control / information
[10:09:51] <antonv> I understood the idea, more or less
[10:10:06] <lisp123> pjb: I guess with DEFADVICE, the changes become global, maybe that's why that approach wasn't taken
[10:11:00] <lisp123> Another reason for first-class global environments..
[10:26:16] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:34:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:34:29] *** Joins: igemnace (~ian@user/igemnace)
[10:55:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[10:55:56] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:57:37] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[11:08:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:14:11] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
[11:15:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:17:10] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:28:22] *** Joins: Nselm (~Nselm@p200300d56f251aeb282f26c05c1cfe32.dip0.t-ipconnect.de)
[11:44:25] *** Quits: Nselm (~Nselm@p200300d56f251aeb282f26c05c1cfe32.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:02:53] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Quit: Connection closed)
[12:06:41] *** Joins: Alfr (~Alfr@user/alfr)
[12:12:09] *** Joins: Nselm (~Nselm@p200300d56f251aeb282f26c05c1cfe32.dip0.t-ipconnect.de)
[12:13:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:13:54] *** Quits: antonv (~antonv@46.53.246.3) (Ping timeout: 256 seconds)
[12:23:40] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:37:14] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[12:37:29] *** Joins: remexre (~remexre@user/remexre)
[12:41:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:41:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:42:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:45:37] *** Joins: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[12:47:01] *** Joins: notzmv (~zmv@user/notzmv)
[12:47:12] <pjb> lisp123: defadvice cannot work on CL functions.  But cl-stepper doesn't bother with functions, only with special operators (and a few CL macros).
[12:47:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:49:24] <lisp123> pjb: Got it
[12:49:31] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:54:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:00:19] *** Joins: pve (~pve@87-93-217-13.bb.dnainternet.fi)
[13:20:41] *** Quits: john__ (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[13:24:55] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6913:7977:3ab4:fab)
[13:31:57] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:6913:7977:3ab4:fab) (Ping timeout: 250 seconds)
[13:34:41] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[13:42:28] *** Joins: rito_ (~rito_gh@45.112.243.206)
[13:50:04] *** Joins: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857)
[13:50:27] <phoe> is anyone aware of an EQUAL-like predicate that is capable of detecting cycles?
[13:50:51] <phoe> s/detecting/not hanging on/
[13:54:26] <moon-child> phoe: (let ((*print-circle* t)) (equal (format nil "~a" x) (format nil "~a" y)))
[13:54:28] <moon-child> :^)
[13:55:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:55:19] <phoe> moon-child: nice, but not what I'm looking for
[13:59:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:03:00] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:04:33] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[14:04:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:04:52] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[14:06:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:07:33] *** Lord_of_Life_ is now known as Lord_of_Life
[14:12:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:22:33] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:24:20] <Lycurgus> anybody know of a cl MIL implementation? (module interconnection language), i.e. one that exists in the present?
[14:30:31] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[14:37:30] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:38:00] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:40:05] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[14:40:36] *** Joins: aphextwin (~aphextwin@05408d85.skybroadband.com)
[14:54:33] <frodef> I have a slime-question... In sldb I have a frame with a local variable that is a long string, printed like "foo ...", so I don't get to see the whole string. To my surprise, if I do "copy to REPL" etc I also get only the shortened string!? How can I get to the full string object?
[14:56:48] <jackdaniel> perhaps press "i" so you can inspect it in frame, then copy
[14:56:58] <phoe> I cannot reproduce it
[14:57:07] <phoe> copy-to-repl gives me the full string
[14:57:35] <frodef> strange.
[14:58:06] <jackdaniel> I can reproduce it
[14:58:44] <frodef> "Pretty-print" will at least give me a full printout, if not the object as such.
[15:00:07] <jackdaniel> phoe: think big, 80 characters is not enough. make it 512
[15:01:38] <phoe> (let ((string (reduce (lambda (x y) (concatenate 'string x y)) (loop repeat 100 collect "djfhskdjhsdf ")))) (break) string)
[15:01:55] <phoe> once broken, I go into the first frame, select the local shortened string, hit M-RET
[15:01:59] <phoe> and there's the whole string in my repl
[15:02:33] <jackdaniel>  try (let ((string "#<C-u 512>a")) (error "booya"))
[15:03:14] <phoe> hm, I get no locals whatsoever with that code
[15:03:29] <jackdaniel> ha, you don't even get ... ;-)
[15:04:56] <phoe> https://imgchest.com/p/qe4gdopo4j2
[15:05:31] <jackdaniel> did you try to /copy/ the variable from the frame to repl (i.e not return it)?
[15:05:48] <phoe> you mean like M-w the text to copy it?
[15:06:06] <jackdaniel> no, right click on the variable (part after "STRING = "), and select copy to repl
[15:06:18] <jackdaniel> that's what frodef in my understanding tried to do, and that's what reproducible here
[15:06:25] <phoe> oooooh yes
[15:06:34] <phoe> the right-click does not behave like M-RET
[15:06:36] <phoe> even though it should
[15:06:42] <phoe> that's a slime bug!
[15:07:39] <jackdaniel> frodef: press M-RET over the variable to copy it to the repl, that indeed works
[15:07:54] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[15:08:31] <frodef> ok thanks.
[15:09:39] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[15:10:24] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:19:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:25:36] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:26:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da)
[15:27:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:28:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:30:06] *** Quits: aphextwin (~aphextwin@05408d85.skybroadband.com) (Ping timeout: 256 seconds)
[15:32:37] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 240 seconds)
[15:35:45] <jackdaniel> hmm, to confirm that (say) compute-applicable-methods is not specialized by the programmer for /a generic function/, is it enough to check whether the generic function is an instance of standard-generic-function (i.e one of its subclasses) and whether number of methods is = 1 ?
[15:37:35] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[15:37:35] <phoe> I think so
[15:38:12] <jackdaniel> thanks
[15:39:07] <phoe> the only thing I can think of is that your system can possibly define more methods than 1 - but that depends on your implementation
[15:39:15] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[15:39:29] <phoe> if you are an implementer, then you can safely assume that number is 1
[15:39:32] <jackdaniel> right, that's not a concern
[15:39:57] <phoe> if a GF is not a SGF then the system-provided method will not apply
[15:40:06] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[15:40:09] <phoe> and if there is more than 1 method then the system-provided method *might* not apply
[15:40:21] <jackdaniel> yes, that's why /and/
[15:40:22] <phoe> but otherwise it seems that the system-provided method is the one to get called
[15:40:25] <phoe> yes
[15:41:22] * jackdaniel hums the imperial march
[15:42:09] *** Joins: lisp123win (~user@80.227.170.170)
[15:42:40] <lisp123win> The more I write code, the more I am gravitating towards the one package/one file approach
[15:43:02] <jackdaniel> it is like with the gauss bell, you'll use more files with time
[15:44:06] <lisp123win> jackdaniel: Probably, yes. For now I have been subdividing and isolating ideas to single files - but perhaps at some point the interdependencies will become too much and it doesn't work out as well
[15:44:41] <lisp123win> At which point, I'll migrate to the CLIM way
[15:45:49] <jackdaniel> have you met our lord and saviour, the presentation-type-class metaobject?
[15:47:22] <lisp123win> Indeed, one of the best ideas in CLIM
[15:48:26] *** Joins: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it)
[15:53:49] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[15:55:26] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:57:05] <phoe> minion: memo for VincentVega: remember the time we ended up making https://plaster.tymoon.eu/view/2737#2737 ? I ended up using this in my code today, thanks :D
[15:57:06] <minion> Remembered. I'll tell VincentVega when he/she/it next speaks.
[16:01:33] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[16:04:39] <rotateq> hmm Vincent Vega ... wasn't that the guy from Pulp Fiction? :D
[16:05:43] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[16:06:22] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 256 seconds)
[16:07:26] *** Joins: aphextwin (~aphextwin@05408d85.skybroadband.com)
[16:08:54] <jackdaniel> yes
[16:10:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:22:56] <phoe> is anyone aware of whether a utility like https://plaster.tymoon.eu/view/2845#2845 is already available anywhere on Quicklisp?
[16:24:25] <phoe> I want to avoid reinventing the wheel before documenting and submitting it somewhere
[16:25:08] <jackdaniel> I doubt that there is
[16:25:58] <moon-child> that is interesting
[16:26:04] <jackdaniel> moreso I don't think I'd like to /read/ code that does such conflation between the compilation time and the runtime (source-code-wise)
[16:26:39] <phoe> jackdaniel: that's a fair point
[16:28:03] <phoe> still, right now I need to figure out if I want to use compile-time conditionals like these or if I want to duplicate substantial bodies of code or if I want to extract the common parts while complicating the uncommon ones
[16:33:46] *** Joins: VincentVega (~user@212.97.4.16)
[16:36:22] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[16:39:14] <phoe> jackdaniel: I've updated the paste with a bypass that a programmer should be able to set - this makes macroexpanding and slime-macrostep more usable. See L6-L7 and L147-L153 in updated paste
[16:40:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:24aa:cde6:528:d0da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:43:03] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 256 seconds)
[16:45:34] <jackdaniel> my objection was more concerned with the source code than with the expansion. I mean - if you need it then you need it, I would be just quite upset if I had to read (and debug) code having such forms
[16:46:21] <phoe> OK, I partially understood what you meant then
[16:48:02] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[16:50:14] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716)
[16:51:43] <phoe> gasp
[16:51:53] <phoe> DEFINE-SYMBOL-MACRO accepts no documentation!
[16:54:06] <rotateq> how dare those!
[16:59:30] <pjb> phoe: (define-symbol-macro variable (car *foo)) (setf (documentation 'name 'variable) "Docstring"
[16:59:48] <phoe> yep, SETF DOCUMENTATION looks like the way to go
[16:59:52] <rotateq> too obvious (maybe) :D
[17:00:12] <pjb> the thing is that symbol macros can be used to define anything, variables, syntax, whatever.
[17:00:33] <rotateq> they are powerful indeed :)
[17:00:43] <jackdaniel> just put in the expansion (break "something something symbol macro documentation")
[17:00:46] <jackdaniel> :)
[17:00:58] <moon-child> seems like all the more reason to have documentation for them specifically
[17:01:24] <pjb> I guess define-symbol-macro was specified after (setf documentation) :-)
[17:03:15] <moon-child> Do not meddle in the affairs of specifiers, for they are subtle and quick to anger
[17:04:35] <jackdaniel> https://www.nhplace.com/kent/PFAQ/kents-lisp-contributions.html ; <-
[17:04:49] <jackdaniel> lambda macro and define-symbol-macro are added for compatibility with a portable ISLISP :)
[17:05:18] <jackdaniel> I've read it in some more comprehensive comparison between islisp and cl, but this is in line of what I've read
[17:06:20] <moon-child> 'I helped to keep CL from becoming a Lisp1'  huh, I never realised that was even a question
[17:06:25] <phoe> :D
[17:10:22] *** Joins: ldb (~user@user/ldb)
[17:14:30] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[17:15:10] *** Parts: ldb (~user@user/ldb) ()
[17:23:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:23:49] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:29:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:30:14] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[17:32:13] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:34:03] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:36:11] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:39:15] *** Joins: euandreh (~euandreh@191.181.59.160)
[17:48:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:49:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:49:56] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:51:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:52:12] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:15] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:57:51] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:59:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:59:10] *** Joins: bendersteed (~user@ppp141237131021.access.hol.gr)
[17:59:35] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:04:39] *** Quits: rito_ (~rito_gh@45.112.243.206) (Ping timeout: 256 seconds)
[18:11:42] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[18:14:06] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Client Quit)
[18:22:13] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[18:22:13] *** Quits: Nselm (~Nselm@p200300d56f251aeb282f26c05c1cfe32.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:22:25] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f9:daee:1123:f7b8:125:32f)
[18:24:06] *** Joins: psf (~pi@206.55.172.18)
[18:27:03] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[18:32:20] *** Joins: Bike (~Bike@71.69.170.70)
[18:32:20] *** ChanServ sets mode: +o Bike
[18:33:41] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:39:56] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 256 seconds)
[18:41:36] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:41:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:44:33] <yitzi> For those that were interested in the discussion about org-mode parsers... cl-org-mode is a hot mess. It doesn't even export any symbols and whole bunch of the supposed functionality isn't even included by the system declaration. Ugh!
[18:44:52] <beach> Ouch!
[18:45:20] <yitzi> Yeah, if I was running quicklisp I'd boot it.
[18:47:03] <yitzi> Which means to test my idea for using org-mode in wscle I'll probably have to write my own parser/serializer.
[18:47:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:48:02] <Xach> yitzi: i run quicklisp, and i don't boot (or add) things based on the apparent quality
[18:49:06] <yitzi> Xach: I know. I appreciate that. Just mostly irritated by junk software.
[18:52:10] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[18:52:15] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:54:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:57:30] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:00:50] * Xach ponders derived dists with only the good software
[19:01:29] <jackdaniel> hah, empty dists requrie less curation for sure! :)
[19:02:03] * Lycurgus was gonna ask why decided to just push SB-EVAL onto *features* before loading ql
[19:04:00] <yitzi> ACTION realizes there might be unintended consequences to such derived dists
[19:08:04] *** Joins: xsperry (~xs@user/xsperry)
[19:08:04] <VincentVega> phoe: Nice! BTW, I also ended up adding a macro which would look like this http://ix.io/3LE3 in your new code. It's for cases when you want to mix with runtime flags such as in OR or AND (which happened to be necessary for what I was doing), relaying the trivial optimization to CL (jarringly, however, macroexpanading (or nil t 'hello) on sbcl yields a let-if ladder instead of just T, what gives?).  Also, if you are going to publish it,
[19:08:04] <minion> VincentVega, memo from phoe: remember the time we ended up making https://plaster.tymoon.eu/view/2737#2737 ? I ended up using this in my code today, thanks :D
[19:08:04] <VincentVega> would you mind adding the lambda version too, since it's only a step away? I guess you were going to anyway, but here: https://paste.rs/DxW. Also, would "macroexpand-time" instead of "compile-time" be more precise?
[19:08:40] <phoe> VincentVega: https://github.com/phoe/with-compile-time-branching
[19:08:48] <phoe> it's the more generic version
[19:08:50] <phoe> still polishing it
[19:09:12] <phoe> and figuring out why SBCL does a funny thing related to it
[19:09:52] <VincentVega> phoe: cool, will take a look at it!
[19:10:08] <phoe> hmm, s/compile-time/macroexpand-time/ works too
[19:10:34] <phoe> also the disassembly is AFAIK the same because the code is the same - the only difference is in the values that are closed over
[19:11:08] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:12:47] *** Parts: BerntH_ (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com) ()
[19:13:38] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f9:daee:1123:f7b8:125:32f) (Read error: Network is unreachable)
[19:13:40] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:3862:c024:d980:7b3f)
[19:14:25] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[19:14:45] <Bike> the code doesn't seem the same?
[19:15:30] <VincentVega> phoe: also, it's not a big deal, but maybe rename compile-time-if just to if since the package name already encodes that?
[19:15:31] <phoe> Bike: you mean the disassemblies for print-maker?
[19:16:06] <Bike> yeah, i mean, one is (lambda (x y)) and the other is (lambda (x y) (print (+ x y))), right?
[19:16:10] <phoe> VincentVega: hmm, that's an option
[19:16:12] <VincentVega> phoe: yeah, I am sort of scratching my head too over that rn
[19:16:37] <VincentVega> I mean Bike ^
[19:17:24] <phoe> Bike: hm, at least in my case: https://plaster.tymoon.eu/view/2847#2847
[19:17:56] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6)
[19:18:47] <Bike> that's different. in any case the body will be (+ x y constant).
[19:19:37] <Bike> and since sbcl doesn't know the types of x and y it can't totally remove an addition of 0.
[19:20:16] <phoe> Bike: https://plaster.tymoon.eu/view/2848#2848
[19:20:23] <phoe> that's a bug
[19:21:15] <phoe> there's no mention of the PRINT call in either disassembly
[19:23:44] <phoe> Bike: https://bugs.launchpad.net/sbcl/+bug/1956870
[19:25:33] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:3862:c024:d980:7b3f) (Ping timeout: 250 seconds)
[19:26:05] <phoe> VincentVega: I'm kind of unsure about this - mostly because they can be too similar to IF/WHEN/UNLESS from the CL package, *even* when used with a local nickname
[19:26:29] <phoe> COMPILE-TIME:IF still gives a different vibe than COMPILE-TIME-IF
[19:26:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:27:16] <VincentVega> phoe: I see what you mean, especially if a local name is short like wctb:if.
[19:29:04] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[19:29:56] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[19:34:13] <phoe> jackdaniel's point is pretty good and important when it comes to reading such code - I'd rather have COMPILE-TIME-{IF,WHEN,UNLESS} stay explicit like that
[19:34:21] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[19:34:57] <Bike> phoe: i can get a similar result without the macrology - (defun make-adder (x &key huge-p) (if huge-p (lambda ( y ) (+ x y (print 1000))) (lambda ( y ) (+ x y 0))))
[19:35:47] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[19:36:12] *** Joins: igemnace (~ian@user/igemnace)
[19:36:35] <phoe> Bike: thanks! updating the ticket
[19:39:26] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:41:20] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:42:19] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7c3e:33e9:a263:3716) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:50:03] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:50:03] *** Quits: bendersteed (~user@ppp141237131021.access.hol.gr) (Ping timeout: 256 seconds)
[19:50:16] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59)
[19:51:40] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:53:54] <yottabyte> what is isetq?
[19:55:07] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[19:56:55] <phoe> yottabyte: https://github.com/slburson/misc-extensions/blob/master/src/contexts.lisp#L343-L353
[19:57:14] <phoe> it's a hack
[19:58:43] *** Quits: hobo (~hobo@69.218.33.204) (Quit: ZNC 1.8.2 - https://znc.in)
[20:00:23] <yottabyte> Interesting. Is Fset the way to go if I want to use sets?
[20:01:21] <phoe> if you want anecdata, I have used plenty of sets in Lisp and I have not used FSet (yet)
[20:01:35] <phoe> in my code they're usually represented by hash tables or lists
[20:02:06] <phoe> but then again, I don't usually use immutable data structures because I don't need to, and FSet provides these
[20:03:42] <phoe> but then again, fset was the 81st most downloaded Quicklisp system last month - and that's pretty popular, if popularity is any good measure of whether you should use it
[20:05:14] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:05:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:06:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:3074:63b1:2e6b:fa59) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:08:54] *** Joins: domovod (~domovod@176.196.122.197)
[20:15:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:15:38] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[20:17:24] <VincentVega> phoe: IMHO with-compile-time-macro:if is quite unambiguous, I mean one doesn't simply redefine if and what not, and that's the way I would go, but, on the other hand, I think wctm:compile-time-if is fine as well.
[20:17:26] <VincentVega>  phoe: My previous note on "compile-time" bothers me quite a bit more, since it might as well be loading time or execute time for it to work (speaking of vibes, EVAL-WHEN is what comes to mind here). I would much rather prefer it be called macroexpand-time.
[20:18:43] <phoe> VincentVega: sure, that works - I'll do that
[20:19:04] <VincentVega> phoe: awesome, thank you!
[20:24:13] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[20:24:28] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[20:24:54] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[20:25:06] <phoe> VincentVega: done
[20:26:44] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[20:31:39] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[20:34:14] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f9:daee:c88c:8709:15b3:a29a)
[20:36:01] *** Joins: shka (~herr@109.231.0.226)
[20:37:10] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.4)
[20:37:49] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[20:38:46] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[20:45:13] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:c88c:8709:15b3:a29a)
[20:46:57] *** Joins: xcombelle (~xavie@abordeaux-551-1-112-81.w92-156.abo.wanadoo.fr)
[20:48:13] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f9:daee:c88c:8709:15b3:a29a) (Ping timeout: 240 seconds)
[20:51:25] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:c88c:8709:15b3:a29a) (Ping timeout: 240 seconds)
[21:00:49] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[21:02:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:09:57] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[21:10:54] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[21:16:55] <VincentVega> phoe: could you please also add http://ix.io/3LF0?
[21:17:28] <phoe> oh? what is it for?
[21:17:51] <phoe> this looks like (macroexpand-time-if branch t nil)
[21:18:05] <VincentVega> phoe: dang, you are right!
[21:18:25] <VincentVega> phoe: this looks good, thanks again for publishing this.
[21:18:56] *** Joins: victor_ (uid208353@id-208353.tinside.irccloud.com)
[21:19:11] *** Quits: victor_ (uid208353@id-208353.tinside.irccloud.com) (Client Quit)
[21:19:59] *** Joins: vibjelo (uid208353@user/victor)
[21:20:47] *** vibjelo is now known as victor
[21:29:42] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:32:04] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:34:42] *** Joins: hobo (~hobo@69.218.33.204)
[21:37:14] *** Joins: makomo (~makomo@user/makomo)
[21:52:38] <yottabyte> phoe: I just want to be able to check for contains and remove in constant time. I could use a hash table but the values would be throwaway nils. Doesn't read as cleanly.
[21:54:22] *** Joins: rito_ (~rito_gh@45.112.243.149)
[21:58:35] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[21:59:13] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[22:09:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:10:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:14:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:19:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:23:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[22:24:37] *** Quits: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857) (Ping timeout: 240 seconds)
[22:26:05] <rotateq> yottabyte: do you know upto now how to see if a key in a hash-table has value NIL or isn't bound?
[22:26:39] <phoe> I usually set the hash-value to be eq to the hash-key
[22:34:21] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[22:35:43] <mfiano> same ^
[22:35:54] <mfiano> which is essentially a hash set as other languages call it
[22:36:07] <mfiano> It's a useful idiom
[22:36:47] <adeht> you can just write a set abstract data type using hash table as representation.. then it'll read cleanly
[22:36:58] *** adeht is now known as _death
[22:37:13] *** Joins: random-nick (~random-ni@87.116.167.125)
[22:38:00] *** Joins: superduperuser (uid389421@id-389421.uxbridge.irccloud.com)
[22:41:31] *** Joins: Oladon (~olad@98.43.81.226)
[22:52:30] *** Joins: jstoddard (~Jeremiah@2607:fb90:4af3:abad:6e77:59c6:fcf:ce6c)
[22:53:48] <pjb> rotateq: yottabyte: (multiple-value-bind (value presentp) (gethash key table) (when presentp (do-something-with key value)))
[22:56:11] <lisp123> https://www.reddit.com/r/lisp/comments/rzch27/i_tried_to_make_a_lisp_style_guide_based_on/
[22:56:28] <lisp123> If anyone has any thoughts
[22:56:51] <phoe> already voiced mine :D
[22:57:19] <lisp123> phoe: :)
[23:02:35] *** Quits: xcombelle (~xavie@abordeaux-551-1-112-81.w92-156.abo.wanadoo.fr) (Quit: WeeChat 3.3)
[23:03:25] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 240 seconds)
[23:10:45] <mfiano> I commented.
[23:11:07] <mfiano> Though on a comment leaving something out that hurts me greatly
[23:11:30] <lisp123> mfiano: That was me, waving the flag for %name ;)
[23:11:57] <mfiano> Good, we drilled it into you finally that means :)
[23:12:23] <lisp123> mfiano: Yes, my stubborn self has accepted it :)
[23:12:55] <mfiano> Truth be told, you wouldn't be a Lisper if you weren't stubborn as all hell.
[23:13:51] <lisp123> Indeed. Although on the spectrum, Common Lispers are most accomodating, the rest went off and developed their own micro languages
[23:15:02] <_death> personally I don't like such adorning of names
[23:16:22] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[23:16:37] *** Joins: remexre (~remexre@user/remexre)
[23:16:40] <_death> if a newbie comes up with a style guide by piecing together other style guides and other people's personal preferences, I'm not sure that's any guide at all
[23:18:09] <phoe> aw snap, WITH-HASH-TABLE-ITERATOR has dynamic extent
[23:20:58] <phoe> I don't see a good API for writing a CPS-style hash table traversal then
[23:21:07] <phoe> other than extracting all hash-table keys and going over them
[23:21:09] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[23:22:05] <Bike> oh, yeah, i hit that when i was poking at making a general iterator concept. i ended up demoing something using sbcl internals
[23:22:13] <Bike> admittedly it might get a little weird with concurrency anyway
[23:22:20] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b923:8538:9f72:8140)
[23:22:54] <phoe> concurrency, yeah, but I want to go single-threaded without modifying the hashtable
[23:23:22] <rotateq> pjb: exactly that i had in mind ^^
[23:24:09] <jeosol> lisp123: you wrote the guide?
[23:24:27] <rotateq> lisp123: do you know the style guide by pitman and norvig?
[23:25:06] <jeosol> one thing that was obvious to me, I never used <class> for naming at all, not sure that is common
[23:25:44] <rotateq> jeosol: wasn't that common is Dylan?
[23:25:45] <phoe> I've seen it in some codebases, but nowhere near common
[23:25:50] <jeosol> lisp123: also in a few places, you used NPKP, but earlier you stated it has PNKP which is the correct abbrevations right (Peter Novig, Kent Pitman)
[23:25:54] <jeosol> phoe: thanks for that feedback
[23:26:20] <jeosol> phoe: I saw you comment about pln? is it every now, or we need to upgrade asdf to get it
[23:26:21] <rotateq> after reading some SICL code i now use more #\% for prefix for slot-names
[23:26:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:26:51] <jeosol> rotateq: yes, beach advocates for that style. I noticed it in his codes
[23:27:07] <mfiano> It is a style I have used for years myself.
[23:27:28] <rotateq> I like it.
[23:27:36] <mfiano> Since, well, slots are implementation details, and we don't export constructs like other languages, but symbols which are used in many different contexts.
[23:27:43] <jeosol> lisp123: I commend the effort to coalesce these guides but of course these things can be very hairy sometimes we'd have to use the right language, "could", "must", "should" etc
[23:28:16] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[23:28:26] <jeosol> mfiano: thanks for voting of using % prefixed slot names. I read your strong comment on reddit about this and related to using :use
[23:29:27] <mfiano> I wouldn't say I voted. It is just a major concern of mine to not see a dinstiction between public and private APIs.
[23:29:36] <jeosol> When reading code, it is better to quickly be able to decipher what is what and of course syntax helps
[23:30:30] <jeosol> mfiano: I mean more like chiming in. I don't  use %prefixed names when I started coding but I try to do use slots directly too, use with-accessors .. instead, but the %prefix name is something I'd consider
[23:30:48] <phoe> jeosol: DEFPACKAGE works out of the box, UIOP:DEFINE-PACKAGE requires a recent ASDF
[23:30:57] <phoe> that is, when used with :LOCAL-NICKNAMES
[23:30:59] <rotateq> the accessors i use without #\%
[23:31:16] <theothornhill> What is the reasoning about (#name :accessor name)?
[23:31:31] <theothornhill> sry s/#/%
[23:31:31] <mfiano> Do you mean %name?
[23:31:32] <jeosol> phoe: that's why, I almost use uiop:define-package everywhere as I have codes using :asdf-inferred-system
[23:31:36] <phoe> theothornhill: (defclass foo () ((%bar :accessor bar)))
[23:31:41] <theothornhill> yeah, but why
[23:31:45] <phoe> if you export the symbol BAR, you cannot so SLOT-VALUE on that symbol
[23:31:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:31:47] <jeosol> That explains the reason I had some problems
[23:31:49] <mfiano> theothornhill: Because bar and bar are the same symbol.
[23:32:05] <mfiano> If you export bar, you gave your users access to implementation details.
[23:32:06] <phoe> you must use the accessor unless you want to ::
[23:32:12] <theothornhill> oh right
[23:32:13] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[23:32:16] <mfiano> Bypassing your protocols you put in place.
[23:32:37] <theothornhill> thanks. For some reason I assumed that's what it would do
[23:32:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:33:13] <lisp123> jeosol: No way (no offense to the author) :)
[23:33:28] <lisp123> rotateq: yes of course
[23:33:44] * theothornhill has lots of refactorings to do
[23:34:09] <jeosol> lisp123: apologies then. I don't see a metacontent user here.
[23:34:50] <lisp123> jeosol: No worries. Yeah, I just saw it on reddit
[23:35:06] <mfiano> Everyone has their own style guide derived from 1 of those, but still distinct in their own way
[23:35:30] <mfiano> That's kind of what makes Lisp great; that it can map well to one's own mind very well with its flexibility.
[23:36:09] <jeosol> The author is working on it as we speak, the README was updated 25 seconds ago. Given the post is fresh, I guess s/he is incorporating the feedback received
[23:37:32] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:49:20aa:b016:8bd7)
[23:37:45] <rotateq> I like what I also tried to make clear to other people: You can fit the solution to your problem and don't have to fit the problem to your possibilities.
[23:41:46] <rotateq> theothornhill: and not to forget you can have multiple accessors or initargs for a slot ;)
[23:42:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:44:20] <mfiano> Sometimes I will even %-prefix an accessor in that case
[23:44:36] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:45:23] <rotateq> uiii
[23:45:25] <mfiano> For example if I want the public API to be read only, but want the internal API to invoke all the generic function methods involved while mutating a place.
[23:48:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:48:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:51:48] *** Quits: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:51:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:56:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
