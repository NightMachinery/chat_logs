[00:04:08] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 260 seconds)
[00:04:54] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 260 seconds)
[00:07:25] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 268 seconds)
[00:07:48] *** Joins: Telvana (~capo@user/telvana)
[00:10:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:11:19] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:11:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:12:31] *** Joins: STROGOF (~Username@host-79-13-104-223.retail.telecomitalia.it)
[00:14:59] *** Quits: STROGOF (~Username@host-79-13-104-223.retail.telecomitalia.it) (Client Quit)
[00:17:16] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[00:19:37] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:20:10] *** Joins: Telvana (~capo@user/telvana)
[00:22:38] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:24:51] *** Quits: pizdets (~pizdets@183.182.111.233) (Ping timeout: 250 seconds)
[00:25:09] *** Joins: pizdets_ (~pizdets@183.182.111.212)
[00:25:17] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:25:19] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[00:28:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:29:07] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:31:30] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:32:32] *** Joins: kexec (~kexec@user/kexec)
[00:34:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:34:37] <kexec> if i allocate array with calloc (so the array will be initialized to 0s) and then extend the array size with realloc, the new portion will not be initialized to 0s?
[00:35:01] <DarkUranium> No.
[00:35:04] <DarkUranium> It will not.
[00:35:31] <kexec> thanks
[00:35:42] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:41:46] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[00:42:03] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[00:42:33] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[00:45:02] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[00:45:14] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[00:47:13] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 256 seconds)
[00:49:12] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:53:24] *** Joins: Xgc_ (~Xgc@user/xgc)
[00:55:13] *** Joins: kfv_ (~kfv@mail.kfv.io)
[00:55:33] *** Joins: daex_ (~daex@user/daex)
[00:55:39] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[00:55:42] *** Joins: ColdKeybo[a]rd (~ColdKeybo@user/coldkeyboard)
[00:56:04] *** Joins: Jmtrix- (~qed@168.235.89.81)
[00:56:09] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[00:56:12] *** Joins: _koolazer (~koo@user/koolazer)
[00:56:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:56:15] *** Joins: Biolunar_ (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[00:56:22] *** Joins: ndorf_ (~nd@ob.noxio.us)
[00:56:35] *** Joins: lemontre1 (~chat@user/lemontree)
[00:56:35] *** Joins: segnior_ (segnior@user/segnior)
[00:56:39] *** Joins: FuraiTHD (~Furai@cookiehoster.furai.pl)
[00:56:43] *** Joins: nf__ (~n@monade.li)
[00:56:43] *** Quits: kfv (~kfv@mail.kfv.io) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: Cienisty (Cienisty@user/cienisty) (Killed (strontium.libera.chat (Nickname regained by services)))
[00:56:46] *** Joins: e36freak_ (~e36freak@user/e36freak)
[00:56:47] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: dupondje (~dupondje@artemis.dupie.be) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: nheir (~nheir@public.itai.re) (Ping timeout: 246 seconds)
[00:56:51] *** Joins: nheir_ (~nheir@public.itai.re)
[00:57:03] *** Joins: Cienisty (Cienisty@user/cienisty)
[00:57:09] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[00:57:15] *** Joins: _fsg (^^@2600:3c00::f03c:92ff:fec6:da18)
[00:57:15] *** Quits: lemontree (~chat@user/lemontree) (Ping timeout: 268 seconds)
[00:57:15] *** Quits: ndorf (~nd@ob.noxio.us) (Ping timeout: 268 seconds)
[00:57:16] *** Joins: greenbagels_ (~gb@user/greenbagels)
[00:57:16] *** Quits: Z[m]1 (~zincognit@2001:470:69fc:105::e306) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 268 seconds)
[00:57:27] *** Joins: grumble` (~grumble@user/grumble)
[00:57:39] *** Quits: nf (~n@monade.li) (Killed (NickServ (GHOST command used by nf__)))
[00:57:42] *** nf__ is now known as nf
[00:57:47] *** Quits: _0ne (~one@user/0ne/x-2101768) (Ping timeout: 246 seconds)
[00:57:57] *** Joins: polyrob_ (~rob@user/polyrob)
[00:57:58] *** Quits: Tordek (tordek@triton.blinkenshell.org) (Ping timeout: 268 seconds)
[00:58:04] *** Quits: prime (~prime@user/prime) (Ping timeout: 268 seconds)
[00:58:20] *** Joins: dupondje (~dupondje@artemis.dupie.be)
[00:58:23] *** Quits: daex (~daex@user/daex) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Jmtrix (~qed@user/jmtrix) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: e36freak (~e36freak@user/e36freak) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: glider_ (~glider@user/glider) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: grumble (grumble@user/grumble) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Xgc (~Xgc@user/xgc) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: fsg (zzzzz@2600:3c00::f03c:92ff:fec6:da18) (Ping timeout: 264 seconds)
[00:58:24] *** Quits: ntdll (~ntdll@user/ntdll) (Ping timeout: 264 seconds)
[00:58:31] *** Joins: Tordek (~tordek@triton.blinkenshell.org)
[00:58:49] *** Joins: ntdll (~ntdll@user/ntdll)
[00:59:00] *** polyrob_ is now known as polyrob
[00:59:01] *** Joins: leah2 (~leah@vuxu.org)
[00:59:07] *** Joins: _0ne (~one@user/0ne/x-2101768)
[00:59:38] *** Joins: prime (~prime@user/prime)
[01:00:11] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[01:02:48] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:03:29] *** Joins: glider (~glider@user/glider)
[01:04:47] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:8a08:f3ba:6c3c:916a) (Quit: ZNC 1.8.2 - https://znc.in)
[01:05:00] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:c02b:c826:8dec:a35d)
[01:05:49] *** Quits: cousteau (~cousteau@user/cousteau) (Read error: Connection reset by peer)
[01:06:36] *** Quits: Alhazred (~Alhazred@130.245.70.25) (Ping timeout: 268 seconds)
[01:06:56] *** Joins: Z[m]1 (~zincognit@2001:470:69fc:105::e306)
[01:07:30] *** Quits: ndorf_ (~nd@ob.noxio.us) (Quit: libera sucks)
[01:07:38] *** Joins: ndorf (~nd@ob.noxio.us)
[01:07:51] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[01:08:03] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[01:08:56] *** Quits: lemontre1 (~chat@user/lemontree) (Quit: WeeChat 3.1)
[01:09:07] <ioxzev1z> Now someone needs to write a recalloc function
[01:09:08] *** Joins: lemontree (~chat@user/lemontree)
[01:09:20] <sham1> I want my aligned_realloc first
[01:09:38] <ioxzev1z> gimme_muh_array()
[01:09:41] <sham1> Also standardisation of reallocarray
[01:10:12] *** Joins: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8)
[01:10:14] <floatcomplex> i want platforms to stop imposing insane alignment requirements that regular ass-malloc() doesn't already guarantee
[01:10:16] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[01:10:34] <Emil> floatcomplex: wot?
[01:10:39] <ioxzev1z> What alignment reqs are you talking about? malloc gives a contiguous block of memory. learn to love it bru
[01:10:52] *** Quits: msk (~msk@185.124.240.174) (Remote host closed the connection)
[01:11:06] <floatcomplex> Emil: ioxzev1z: responding to the above
[01:11:27] *** Joins: msk (~msk@185.124.240.174)
[01:11:32] <floatcomplex> i'm saying i want the motivation for there to be an aligned_realloc() to go away
[01:12:02] <ioxzev1z> Didn't even know that function existed
[01:12:52] <apotheon> I didn't know ass-malloc() existed.
[01:13:03] <ioxzev1z> Also is calloc literally just malloc(); memset(..., 0, ...); ?
[01:13:09] <floatcomplex> ioxzev1z: not necessarily
[01:13:21] <floatcomplex> ioxzev1z: it could just be "return a pointer to a known-already-zeroed page"
[01:13:33] <ioxzev1z> oic, so there is some behind-the-scenes stuff
[01:13:39] <floatcomplex> there is allowed to be
[01:13:39] <sham1> It doesn't, but it'd be nice. Also I don't know if this was addressed in C23, but aligned_alloc's size shouldn't need to necessarily be a multiple of the alignment
[01:14:25] <apotheon> floatcomplex: Because of weirdness in some kernel implementations, calloc might actually end up faster sometimes than malloc, given the way already-zeroed memory pages are handled.
[01:14:38] <apotheon> I don't recall the specifics.  It was quite a while ago.
[01:14:44] <floatcomplex> yeah if it just returns a cow mmap or something i believe that
[01:14:59] *** Joins: dotz0cat[m] (~dotz0catm@2001:470:69fc:105::91b)
[01:15:43] *** Joins: pizdets (~pizdets@183.182.114.21)
[01:15:44] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[01:16:00] <floatcomplex> anyway my point was x86_64 is stupid
[01:16:09] <ioxzev1z> But muh 64-bit arch
[01:16:18] *** Quits: pizdets_ (~pizdets@183.182.111.212) (Ping timeout: 260 seconds)
[01:16:24] <floatcomplex> on modern arm there is merely like a one-clock-cycle for unaligned loads
[01:16:36] <floatcomplex> but it's the same instruction for unaligned or aligned loads
[01:16:51] <ioxzev1z> But arm is newer than x86_64, meaning they looked at what existed and improved on it
[01:16:57] <ioxzev1z> x86 is old
[01:17:15] <floatcomplex> ^penalty
[01:17:52] *** Quits: msk (~msk@185.124.240.174) (Remote host closed the connection)
[01:17:54] <ioxzev1z> I would like to see someone try to start with 90s tech and get to current x86_64 without making mistakes
[01:18:07] <floatcomplex> i would not like to see anyone start anywhere and get to current x86_64
[01:18:10] <floatcomplex> it's a disaster
[01:18:15] *** Joins: msk (~msk@185.124.240.174)
[01:18:19] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 268 seconds)
[01:18:23] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 256 seconds)
[01:18:45] <ioxzev1z> I think intel should look at their archs every 30 or so years, drop every mistake and then start a new line of better cpous
[01:18:47] <ioxzev1z> *cpus
[01:18:54] <floatcomplex> ioxzev1z: they tried that
[01:19:06] <ioxzev1z> When did they try that last?
[01:19:07] <floatcomplex> it required compilers to be magical, which they were not
[01:19:17] <floatcomplex> ioxzev1z: early 2000s? idk whenever itanium was
[01:19:30] <ioxzev1z> Right, but back then noone really knew what they were doing
[01:19:45] <floatcomplex> they still don't, lol
[01:19:48] <ioxzev1z> I think if intel reset their cpu line today there would be massive improvements
[01:19:57] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[01:19:58] <ioxzev1z> Also the "hurr intel are has the bad" isn't a great arg
[01:20:39] <ioxzev1z> Backwards compatibility is imo the big problem
[01:20:47] *** Quits: alch (~alch@151.82.135.217) (Ping timeout: 268 seconds)
[01:21:08] *** Joins: Khoyo (~khoyo@user/khoyo)
[01:21:24] <ioxzev1z> s/intel/intel or amd/
[01:21:25] <floatcomplex> "Take your current age. Now subtract ten years from it. Were you smart back then? Of course you weren't. You were a goddamned idiot. Fact of the matter is, you're just as big an idiot today, it's just gonna take you ten more years to realize it."
[01:21:30] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:21:58] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:22:02] *** Quits: msfninja (~kali@user/msfninja) (Ping timeout: 268 seconds)
[01:22:09] *** Joins: alch (~alch@151.36.86.5)
[01:23:15] <sham1> I suppose I'm in the minority here rn because I sorta like x86. It's not perfect by any means and it's a mess, but it's certainly interesting in the way it works
[01:23:17] <ioxzev1z> floatcomplex, you improve on what you can, but sometimes (in this cases like every 30 years) you need to start from the ground up using what you've learned from the good and bad
[01:23:57] <floatcomplex> ioxzev1z: i'm not arguing against that, i'm just saying it didn't take, last time they tried. i suspect the problem to be intel
[01:24:12] <ioxzev1z> floatcomplex, but they tried too early
[01:24:20] <floatcomplex> no current arm anything is compatible with arm anything from 15 years ago, in practice
[01:24:29] <ioxzev1z> x86 was the best option then, and no-one knew what they were doing
[01:24:56] <vin> n
[01:25:31] <ioxzev1z> Back then big clock speeds were a big deal, now it's cores/parallel, etc. Not sure about the next step but if you add the improvements to clock speeds from the 2000s and parallel from 2010+, put it all in one new package while dropping the bad stuff, you
[01:25:37] <ioxzev1z> you'd get some good cpus
[01:26:05] *** Joins: cousteau (~cousteau@user/cousteau)
[01:26:11] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 264 seconds)
[01:26:22] <floatcomplex> they won't ever drop the bad stuff though because they've marketed themselves into a corner with how well they do on benchmarks via speculative execution
[01:26:42] <floatcomplex> backwards compatability isn't the only problem here
[01:26:50] <floatcomplex> compatibility either
[01:27:08] <ioxzev1z> floatcomplex, but the point being that if you introduce a completely new arch you can add what you want to it, meaning you can ignore adding the bad stuff that is needed currently for backward compatibility
[01:27:27] *** Quits: _fsg (^^@2600:3c00::f03c:92ff:fec6:da18) (Quit: quit)
[01:27:49] <ioxzev1z> If intel introduce instruction X today, and 5 years later it
[01:27:53] <ioxzev1z> 's not good
[01:27:56] <ioxzev1z> they can't remove it
[01:29:02] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[01:29:14] <floatcomplex> yeah but the same thing is at play not just at the instruction level but at the business level
[01:29:29] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[01:29:31] <ioxzev1z> Any x86_64 now needs to be compatible with any x86_64 before it
[01:29:35] <floatcomplex> if they did X well on benchmark Y in 2012 they can't very well release a new chip in 2022 that does worse
[01:30:30] *** Joins: pgib (~textual@173.38.117.89)
[01:31:07] <ioxzev1z> CPU designers are smart but no-one can see the future
[01:31:18] <ioxzev1z> Something that seems good now might be a disaster later
[01:31:23] <sham1> ioxzev1z: but they sure speculate about it
[01:31:27] <ioxzev1z> But you cannot remove because of backwards compatibility
[01:31:36] <ioxzev1z> Hence you need to every now and then create a new arch
[01:32:05] <ioxzev1z> (now and then being like 30 years)
[01:32:33] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[01:32:34] <cousteau> I thought the reason behind creating RISC-V was that ARM was riddled with royalties
[01:34:32] <ioxzev1z> cousteau, isn't ARM literally about royalties? iirc they don't manufacture anything, just license their designs
[01:35:19] <floatcomplex> i'd say that business model is currently succeeding more for more people than intel's is...
[01:35:42] <ioxzev1z> floatcomplex, ARM is used in pretty much any smart-phone, so they are making dollar bill
[01:35:48] <floatcomplex> yep
[01:35:59] <nomagno> It is not a bad business model, but what isn't there to love about Open Design?
[01:36:08] <nomagno> RISC-V makes me all warm and fuzzy inside
[01:36:17] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[01:36:32] <floatcomplex> aarch64 and riscv are the two easiest assembly instruction sets i've worked with by far, but riscv has some major problems
[01:36:49] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[01:36:58] <floatcomplex> they're not unfixable but nobody's planning on fixing them
[01:36:58] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:4c0:1247:9522:a835) (Quit: This computer has gone to sleep)
[01:37:06] <nomagno> I can't really find any documentation on assembly, might be using the wrong keywords
[01:37:24] <ioxzev1z> nomagno, money makes money. FOSS is great but actual hardware design needs people who know what they're doing
[01:37:34] <ioxzev1z> Hence open source hardware is lagging behind
[01:37:45] <nomagno> Every time I look up "how do I write RISC-V assembly!? HELP" I get nothing back!
[01:37:55] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:38:06] <nomagno> What am I looking for to get 'started'? I really don't know
[01:38:39] <cousteau> ioxzev1z: yeah... well I think they do manufacture some things, not sure, but they mostly sell their design
[01:38:41] <floatcomplex> ioxzev1z: more like they made a conscious decision to do things that made more sense in an education context than what is technologically competitive wit harm
[01:39:07] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[01:39:14] <ioxzev1z> floatcomplex, that refers to which of my comments?
[01:39:22] <floatcomplex> ioxzev1z: "lagging behind"
[01:39:29] <ioxzev1z> Can't keep track
[01:39:51] <ioxzev1z> but yeah, FOSS is easy to get into for anyone, but hardware design usually needs some sort of education
[01:40:03] <cousteau> floatcomplex: which problems?
[01:40:47] <trenka> nomagno: don't specifications at riscv.org help you?
[01:40:48] <floatcomplex> ioxzev1z: immersion in institutional knowledge is probably at least as valuable as formal education in hardware design
[01:40:53] <nomagno> I really don't think the people that are contributing to open hardware have 'no idea what they are doing'
[01:41:16] <ioxzev1z> nomagno, I never said they have no clue, but it's a little harder than opening a text editor and writing code
[01:41:27] <nomagno> trenka: Not when you don't know where to start reading them without falling asleep
[01:41:29] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:41:48] <cousteau> ioxzev1z: well, RISC-V has lots of applications beyond educational, even if most are "researchy" in one way or another, like "let's see what happens if I grab a system with a Rocket core and do X with it"
[01:41:55] <floatcomplex> cousteau: the decision to resurrect the cray arbitrary-length vector instruction thing and then point to eventually maybe actually implementing it as a reason NOT to implement simd
[01:41:58] <floatcomplex> so now there is neither
[01:42:04] <cousteau> and it's crazy customizable
[01:42:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:42:19] <floatcomplex> the cray thing was in the dustbin of history for a reason
[01:42:30] <cousteau> without needing to contact ARM and tell them how you want to customize it
[01:42:46] <nomagno> https://marz.utk.edu/my-courses/cosc230/book/writing-risc-v-assembly/
[01:43:00] <nomagno> Oh. I swear I did not find anything as good as this resource last time I looked
[01:43:20] <cousteau> floatcomplex: b-but the V extension!
[01:43:28] <floatcomplex> the entirely imaginary V extension
[01:43:38] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[01:43:42] <cousteau> it's already in version... what, 0.3?
[01:43:54] <ioxzev1z> Such progress, much wow
[01:44:17] <cousteau> there was some progress in the B extension at least
[01:44:18] <nomagno> RISC-V-V is the friends we made along the way
[01:44:42] <cousteau> they removed some stuff and made a minimal security-oriented thing that looks pretty cool
[01:44:52] <floatcomplex> cousteau: does the linux kernel have the necessary plumbing for doing a context switch to/from code that uses the V extension?
[01:45:00] <floatcomplex> because it sounds like a fucking nightmare
[01:45:06] *** Joins: serbest (~serbest@user/serbest)
[01:45:11] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[01:46:17] *** Quits: kexec (~kexec@user/kexec) (Quit: Ping timeout (120 seconds))
[01:46:20] <cousteau> oh wow it's actually v0.7 already
[01:46:23] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[01:46:30] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[01:46:45] *** Joins: de-facto (~de-facto@user/de-facto)
[01:46:57] <cousteau> actually
[01:47:01] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[01:47:03] <cousteau> it's already v1.0 frozen!
[01:47:18] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:47:20] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[01:47:20] *** Joins: Senicar0 (~Senicar@gateway/tor-sasl/senicar)
[01:47:22] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[01:47:23] *** Senicar0 is now known as Senicar
[01:47:29] *** Quits: V (~v@anomalous.eu) (Ping timeout: 264 seconds)
[01:47:44] <cousteau> https://github.com/riscv/riscv-v-spec/releases/download/v1.0/riscv-v-spec-1.0.pdf
[01:47:47] *** Joins: V (~v@anomalous.eu)
[01:47:56] *** Quits: joev (~joev@user/joev) (Ping timeout: 268 seconds)
[01:48:32] <floatcomplex> cousteau: the problem with "crazy customizeable" is the kernel doesn't know what the fuck you're doing
[01:48:34] *** Joins: joev (~joev@user/joev)
[01:49:08] <floatcomplex> if the code to do a context switch has to figure out AT RUNTIME what combination of processor features are present and therefore what state it has to save and restore, everyone suffers
[01:49:15] <cousteau> I wasn't thinking on "crazy customizable" from a "let's mess with the ISA" point of view; more like the microarchitecture
[01:49:22] *** Joins: Atque (~Atque@user/atque)
[01:49:22] <floatcomplex> and the combinatorics are too explodey to resolve at compile time
[01:49:51] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[01:49:55] <cousteau> different pipeline sizes, number of cores, out of order, in order, etc
[01:50:46] <cousteau> and well, no need to figure things out at runtime if you play with the extensions.  Just make your kernel support the basic functionality and then have your applications compiled to support the weird stuff if available
[01:51:08] *** Joins: plastico (~plastico@neomutt/plastico)
[01:51:12] <cousteau> ...wait nvm, we were talking context switching
[01:51:44] <floatcomplex> yeah, the specific difficulty is when switching away from a process that was using the vector machine
[01:51:50] <floatcomplex> and then switching back to it
[01:52:17] <cousteau> floatcomplex: but, since these guys are designed with OSes in mind (and even hypervisors), I would expect there to be some hardware support for context switching
[01:52:51] <floatcomplex> hopefully. but, like, there's precedent for it just being hard
[01:52:52] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[01:53:05] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[01:53:05] <cousteau> like, there'll probably be an instruction to dump the whole context, or at least there should
[01:53:12] <floatcomplex> yeah there should
[01:53:27] *** Quits: Samian (~s@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:29] <cousteau> otherwise, you have to patch the kernel to support different extensions, which I can see might be kind of a mess
[01:54:21] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[01:54:32] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:54:40] <floatcomplex> not just the kernel
[01:55:09] <floatcomplex> userspace context switching (setjmp, libucontext, any coroutine lib) all has to know how to do it correctly
[01:55:50] *** Joins: serbest (~serbest@user/serbest)
[01:56:18] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[01:56:43] <floatcomplex> libucontext used to just not try to save any fp context, but since gcc >= 9 you can't even trust gcc not to spill non-fp values into fp regs instead of the stack, so you really have to solve the problem correctly and completely in order for even basic code to work
[01:57:07] *** Joins: monkey_ (~user@190.104.116.153)
[01:57:50] *** Quits: riposte (~finalripo@2403-5802-74-2-20c-29ff-fef3-ce22.ip6.aussiebb.net) (Quit: Quitting)
[01:59:17] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[01:59:59] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[02:02:07] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:03:32] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[02:06:19] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:09:14] *** Joins: Atque (~Atque@user/atque)
[02:09:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e118-d184-1f68-13bf.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:13:01] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 245 seconds)
[02:14:51] *** Joins: Khoyo (~khoyo@user/khoyo)
[02:15:39] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[02:15:55] *** Quits: alphabeta (~kilolympu@185.65.135.177) (Quit: Quitting IRC :()
[02:16:20] <cousteau> nomagno: (not to perpetuate the OT discussion, but) have you checked https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md ?
[02:16:30] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[02:16:30] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[02:17:18] *** Joins: joev (~joev@user/joev)
[02:17:32] *** Quits: eblip (~eb0t@90.202.252.138) (Ping timeout: 268 seconds)
[02:18:29] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:18:43] <floatcomplex> if this were a real off topic conversation, we'd be talking about coffee by now
[02:19:00] *** Joins: eblip (~eb0t@90.202.254.138)
[02:19:39] *** Joins: Klinda (~superleag@user/klinda)
[02:19:44] *** Quits: AmR (~AmREiSa@156.199.92.40) (Quit: Konversation terminated!)
[02:22:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e118-d184-1f68-13bf.res6.spectrum.com)
[02:24:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[02:25:00] *** Joins: cot (~kiedtl@kisslinux/kiedtl)
[02:25:48] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:26:00] <cot> Anyone know of some good example code for creating a multi-frame gif with giflib?
[02:26:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[02:26:16] <DPA> Passing structs as arguments (rather than pointers to structs), is that a sane thing to do?
[02:26:16] <DPA> Will the compiler always have to copy it, or can it treat it as if I had passed it as a pointer when I don't write to it, and only copy parameters I may write to? Is there an overhead to it? And are those things implemented well in compilers like gcc and clang?
[02:27:24] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[02:27:26] <sham1> DPA: there is definitely oberhead
[02:31:12] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[02:31:24] <cousteau> DPA: if the structs are small (a couple of values) it's probably OK, if they're huge it's usually considered bad practice
[02:31:35] <fizzie> If it's a function where it has to obey the platform's ABI because it doesn't know where it might be called from, it can only do whatever the ABI allows, which probably involves making a "copy" (though small structs may be passed in registers). If it's something else, like a function with internal linkage, it can do whatever. And I imagine it'd elide copies at least if it decides to inline the function;
[02:31:37] <fizzie> I don't know if it'd ever change the calling convention to pass a pointer though.
[02:32:15] <cousteau> if the function is static, the compiler might do crazy things with the way it's called, or even inline it; if it's not, it will have to respect the calling convention, or at least provide a version that respects the calling convention for external use
[02:33:39] <fizzie> The x86-64 sysv ABI passes structs up to two eightbytes in size in the usual argument-passing registers, so given a `struct foo { long a, b; };`, there's no difference between `void f(struct foo ab);` and `void f(long a, long b);`.
[02:33:49] <sham1> The only place where I think a struct is converted to a pointer to struct is with a return value where the first argument of the function really becomes a pointer to the place where the return value will be put
[02:33:59] *** Quits: pizdets (~pizdets@183.182.114.21) (Ping timeout: 250 seconds)
[02:34:03] *** Joins: pizdets_ (~pizdets@183.182.110.19)
[02:34:37] <fizzie> ,cc -w struct foo { long a, b; }; void f(struct foo ab) { printf("%ld, %ld", ab.a, ab.b); } ((void (*)(long, long)) f)(123, 456); // in fact
[02:34:39] <candide> fizzie: 123, 456
[02:34:43] <cousteau> sham1: ?
[02:34:51] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Remote host closed the connection)
[02:34:55] <cousteau> structs don't typically get implicitly converted to pointers
[02:35:09] <fizzie> Many calling conventions use that to implement functions where the return type is a (large) struct.
[02:35:28] <cousteau> structs can be passed and returned
[02:35:40] <DPA> WHat would be better practice in cases like this one? https://bpa.st/4Y7Q
[02:35:42] <fizzie> Yes, that was about the implementation, not the language semantics.
[02:36:10] <fizzie> A `struct big foo(int x, int y);` becomes the equivalent of `void foo(struct big *ptr, int x, int y);` for some calling conventions.
[02:36:15] <cousteau> fizzie: oh cool
[02:36:45] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:37:28] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[02:37:37] <fizzie> ,cc -w struct big { int arr[16]; }; struct big f(int x, int y) { return (struct big){{x, y}}; } struct big b; ((void (*)(struct big *, int, int)) f)(&b, 123, 456); printf("%d, %d", b.arr[0], b.arr[1]); // let's do that too
[02:37:40] <candide> fizzie: 123, 456
[02:41:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e118-d184-1f68-13bf.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:41:21] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[02:41:23] *** Joins: aeoum (~aeoum@h88-129-111-180.cust.a3fiber.se)
[02:42:05] <sham1> Indeed, AMD64 is one of them. I think x86 proper also does thst
[02:42:16] <cousteau> DPA: that struct looks small enough to be OK to be passed by value
[02:42:47] <cousteau> but I'd normally pass any struct as a pointer, as coding style more than anything
[02:43:05] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:43:08] <cousteau> specially if it's a heterogeneous struct such as that one; it kinda feels wrong to pass it by value, dunno
[02:44:24] <cousteau> I also advise to put the * on the other side of the space, next to the variable name (same as the [], which go next to the variable name and not the type)
[02:44:33] <fizzie> I think I might be leaning towards pass-by-value, though I think that's just my irrational Go bias. (That's pretty much what a Go slice is, except with one less size field, and those are pretty much always passed by value.)
[02:45:31] <cousteau> ok so we have 1 vote for the irrational pass-by-value bias and 1 vote for the irrational pass-by-pointer bias :)
[02:46:46] *** Quits: asd (~noname@user/asd) (Ping timeout: 245 seconds)
[02:48:51] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:49:11] *** Joins: monkey_ (~user@190.104.116.153)
[02:49:15] <cousteau> DPA: one reason why you may want the * the other way is because of the meaning of "const": `const uint8_t *data` means that "*data is a const uint8_t", whereas `const uint8_t* data` makes it look like data is a const pointer-to-uint8_t
[02:50:01] <sham1> Also because of the uint8_t* a, b; problem
[02:50:19] <cousteau> that's one of the many side effects of the syntax, yes
[02:51:48] <cousteau> it kinda looks weird until you realize that `int *x` means "*x is an int" rather than "x is an int*", and then all the type declaration scheme suddenly makes sense
[02:51:50] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[02:52:20] <DPA> I've already become used to do it like this. It's part of my style.
[02:52:34] <DPA> The "int* x" version
[02:53:18] <DPA> To me, it's part of the type, so I want to put it there when I can.
[02:53:19] <sham1> Meh, as long as you're consistent
[02:53:29] *** Joins: Raguile (~Raguile@user/raguile)
[02:53:42] <sham1> And as long as you follow what others have done if it's not your project
[02:54:21] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[02:54:38] <Teckla> DPA: The problem is: int* x, y;
[02:54:54] *** Parts: Raguile (~Raguile@user/raguile) ()
[02:55:25] <DPA> *when I can*
[02:55:53] <Teckla> "when I can" is pretty ambiguous.
[02:56:01] <floatcomplex> abuse of int * x, y: https://godbolt.org/z/zP1rfb1f9
[02:56:22] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[02:56:34] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[02:56:54] <mcf> syntactically, it's not part of the type specifier. it's part of the declarator
[02:57:17] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:57:22] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:58:17] <avrdude> floatcomplex: that's disgusting
[02:58:32] <DPA> The variable name is still x and y, and the * does end up as part of the type for the variable it applies to.
[02:59:40] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:00:02] <cousteau> DPA: do you also write int[3] x; ?
[03:00:24] <fizzie> I write `x [3]int`. ;)
[03:00:43] <avrdude> floatcomplex: what's the point of the ", 1" in (value = *vp, 1)?
[03:01:02] <DPA> ,cc int[3] x;
[03:01:03] <candide> DPA: error: expected identifier or '(' before '[' token
[03:01:28] <fizzie> avrdude: It's (part of) the for loop's controlling expression, so it must have a nonzero value for the loop to continue on.
[03:01:35] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[03:01:39] <fizzie> Otherwise it'd stop the first time `value` gets assigned a zero.
[03:02:09] <cousteau> DPA: the thing is, seeing it as what it is also helps understanding how the crazy type declaration system works, and how to create more complex declarations, such as int (*(*f)())[3]
[03:02:31] *** Joins: gnoo (gnoo@user/gnoo)
[03:03:07] <DPA> I just prefer making my syntax match semantics.
[03:03:17] <DPA> When possible.
[03:03:41] <cousteau> the semantics for `int *x` is `*x is an int`
[03:03:50] *** Joins: shivesh (~shivesh@user/shivesh)
[03:03:54] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[03:04:10] <avrdude> fizzie: but there is already an expression, why the && altogether?
[03:04:14] <cousteau> just like how the semantics for `int x()` is `x() is an int` and the semantics for `int x[3]` is `x[...] is an int`
[03:04:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:04:59] *** Quits: aeoum (~aeoum@h88-129-111-180.cust.a3fiber.se) (Quit: Client closed)
[03:05:00] *** Quits: MrFantastik (~f@c-24-6-209-143.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[03:05:19] <cousteau> or the semantics for `const char *x` is "*x is a const char", whereas the semantics for `char *const x` is "*x is a char, and x is const"
[03:05:28] <fizzie> avrdude: The expression in front takes care of when the loop *should* stop, the `&& (..., 1)` part additionally evaluates the `...` part *before* the loop body.
[03:06:00] <cousteau> that's how the semantics for declarations works in C
[03:06:47] <avrdude> ah i see
[03:07:32] <DPA> But there is no *x. There is x. * modifies the type, not the variable. Similarely, const modifies the type in variouse ways based on where it stands. I don't even need to put an identifier in there where I only need the type.
[03:07:35] <fizzie> You could argue the declarator syntax isn't the only thing that loop is abusing. ;)
[03:07:41] <floatcomplex> :)
[03:08:16] <cousteau> DPA: I know it's hard to grasp, in your head you want the declaration to say "x is a pointer to int", but since that's not how declarations work in C, but as "when you apply these operations to x you get an int", it's better to just go with the flow and write it as what it means for C
[03:08:49] <DPA> But that's syntax, not semantics.
[03:09:11] <cousteau> the syntax has a semantic meaning too
[03:10:15] <floatcomplex> some say there is a semantic difference between syntax and semantics, others say it's just syntax
[03:10:20] <floatcomplex> - yogi berra probably
[03:10:25] <cousteau> and as I said before, it helps you understand more complex declarations if you see how C "sees" declarations
[03:11:00] <Teckla> DPA: When in Rome.  You are free to do as you like, but don't expect people to agree.
[03:12:03] <cousteau> (this is just a personal advice anyway, you may write the declaration however you want, or even without spaces or with spaces on both sides; but it's more elegant to "respect what C means")
[03:12:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[03:12:54] <DPA> I think being able to think of the type independently of the identifiers & type syntax is helpful for understanding complex types. I have less things to think about, and less things to get wrong. If I was conflating these things in my mental models, I would become trouble with thinking about complex types.
[03:13:13] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-a84d-5e37-b6bd-99de.res6.spectrum.com)
[03:14:05] <Teckla> In practice, nobody has problem reading and understanding "int *x;".  This has turned into a stupid conversation.
[03:14:53] <cousteau> well yes, but you can't separate the type from the identifiers on other types such as arrays, so I'd say it's better to be consistent
[03:15:24] <DPA> Of course you can.
[03:15:36] <cousteau> how so?
[03:15:45] <cousteau> you just saw that int[3] x is not valid syntax
[03:15:53] <DPA> ,cc sizeof(char*(*)[])
[03:15:56] <candide> DPA: no output: sizeof(char*(*)[]) = 8
[03:16:05] <DPA> ,cc sizeof(char[3])
[03:16:08] <candide> DPA: no output: sizeof(char[3]) = 3
[03:16:16] <DPA> See? No identifier.
[03:16:24] <cousteau> ,cc char[3] x
[03:16:26] <candide> cousteau: error: expected identifier or '(' before '[' token
[03:16:30] <cousteau> that's what I meant
[03:16:38] *** Quits: gnoo (gnoo@user/gnoo) (Remote host closed the connection)
[03:17:09] <cousteau> you can't say char[3] x, you say char x[3], so the "moving the asterisk" trick only works in some cases
[03:17:23] <DPA> That's just syntax. The type is just that. Semantics is different.
[03:17:26] <floatcomplex> char * x or gtfo
[03:17:52] <cousteau> and one could argue that a solution that only works sometimes is worse than a solution that never works.  It's like a clock that only gives the correct time twice a day.
[03:18:01] <floatcomplex> (also the little fortran programmer on my shoulder is telling me that "x" cannot be used as a variable name for a character array)
[03:18:14] <pragma-> #define pointer * \n #define deref * \n #define addr & \n   char pointer p = addr x; char c = deref p + 3;
[03:18:17] * pragma- taps brain.
[03:18:46] <cousteau> that's it; I need cake
[03:18:53] <DPA> It does always work. I just think in terms of semantics, not in terms of syntax, or what I see written on the screen.
[03:19:23] <cousteau> DPA: then you wouldn't have trouble looking at `int *x` and saying "ah, a pointer to x"
[03:19:33] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[03:20:00] <DPA> I see it as a pointer to an integer. Why would I think about x?
[03:20:11] <fizzie> I don't think the fact that type names are syntactically declarations with the identifier omitted is a much of an argument for the `int* x` style.
[03:20:21] <cousteau> re: "* modifies the type, not the variable".  My point is that, in C, "declaration follows usage".  So the meaning of "int *x" is "if you use *x, you'll get an int"
[03:20:23] <fizzie> I always write the type as `int *` when I need the type name somewhere.
[03:21:05] <cousteau> so you declare a type by adding operands to the variable that, when used in an expression, would give you an expression of the specified base type
[03:21:38] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:21:54] *** Joins: szutt (~szutt@116.37.2.145)
[03:21:54] <DPA> I just don't see a benefit of thinking about it like this.
[03:22:07] <floatcomplex> ,english & x
[03:22:08] <candide> floatcomplex: The address of `x`.
[03:22:13] <floatcomplex> thanks pragma-
[03:22:15] <pragma-> np
[03:22:20] <floatcomplex> gonna have nightmares now
[03:22:25] <cousteau> that's why you use * and [] and () in variable/function declarations; those modifiers follow the same syntax rules and precedence as the corresponding operators
[03:22:44] <cousteau> for example, the complex as hell thing I wrote before, what was it...
[03:22:52] <cousteau> int (*(*f)())[3]
[03:23:02] <cousteau> means that (*(*f)())[3] is an int
[03:23:15] <cousteau> so (*(*f)()) is an array of 3 int
[03:23:29] <cousteau> so (*f)() is a pointer to an array of 3 int
[03:23:44] <cousteau> so *f is a function returning a pointer to an array of 3 int
[03:23:44] <candide> cousteau: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[03:23:59] <cousteau> so f is a pointer to a function returning a pointer to an array of 3 int
[03:24:14] *** Joins: quartz (~quartz@user/quartz)
[03:24:14] <cousteau> and candide is a drama bot >:(
[03:24:55] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[03:25:08] *** Joins: MrFantastik (~f@c-24-6-209-143.hsd1.ca.comcast.net)
[03:25:33] <cousteau> basically, you keep adding operators to f until you get an expression of a base type, then you prepend the base type to it, and that's what a declaration is
[03:26:55] <DPA> Sure. And I will think of the type as "a pointer to a function returning a pointer to an array of 3 int". But that's different from how it's written. The order in which it's written is different, among other things.
[03:27:00] <cousteau> otherwise, it is kinda weird to declare something like `int* (*p)[2];` where one * is next to the type and the other next to the variable, even if they mean the same thing, right?
[03:28:16] *** Joins: gnoo (gnoo@user/gnoo)
[03:28:34] <DPA> "a pointer to a function returning a pointer to an array of 3 int" is semantics. "int(*(*)())[3]" is syntax. I think in terms of the former.
[03:28:37] *** Quits: Akuli (~Akuli@82-203-163-207.bb.dnainternet.fi) (Quit: Leaving)
[03:31:58] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[03:32:49] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[03:33:02] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[03:38:16] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[03:38:18] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 268 seconds)
[03:39:16] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[03:39:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:39:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:8056:a659:b191:c249) (Ping timeout: 260 seconds)
[03:41:17] <avrdude> ,cc int i = 5; while(i --> 0) printf("%d ", i);
[03:41:20] <candide> avrdude: 4 3 2 1 0
[03:41:37] <avrdude> what the actual f***
[03:42:10] <avrdude> ah wait, i've been tricked
[03:43:09] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:44:00] <fizzie> Ah, the good old arrow operator.
[03:44:49] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[03:45:05] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 268 seconds)
[03:47:28] <floatcomplex> and you thought horrible foreach was bad
[03:47:34] <floatcomplex> i contend the arrow operator is worse
[03:47:43] <floatcomplex> at least horrible foreach isn't actively trying to trick you
[03:49:13] <avrdude> This was sold to me as a "goes to" operator ;_;
[03:51:51] *** Quits: engest (~engest@50.39.188.0) (Quit: Leaving)
[03:53:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:54:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:54:14] <pragma-> goes toward
[03:54:42] <fizzie> Hmm, I wonder if there's any plausible use for the long-arrow operator, `--->`. It's syntactically valid (as long as the left operand is a pointer to a struct/union), but it's hard to come up with a context where it'd feel natural.
[03:54:55] <floatcomplex> madness
[03:54:58] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[03:55:31] <fizzie> ,cc struct { int x; } arr[] = {{0}, {1}, {2}, {3}}, *p = arr + 3; while (p->x) printf("%d", p--->x); // contrived example just to show legality
[03:55:34] <candide> fizzie: 321
[03:56:11] *** Quits: magla (~gelignite@55d469ae.access.ecotel.net) (Quit: Stay safe!)
[03:56:12] <floatcomplex> three minus programmer
[03:57:36] <avrdude> https://godbolt.org/z/rc6a18sYx
[03:58:02] <pragma-> lol
[03:58:45] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[04:04:14] *** Quits: Zophirel (~androirc@93-35-145-197.ip55.fastwebnet.it) (Remote host closed the connection)
[04:05:34] *** Joins: cpuid_ (~cpuid@static.136.43.161.5.clients.your-server.de)
[04:05:53] *** Joins: seninha (~seninha@user/seninha)
[04:09:00] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:09:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[04:10:59] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[04:11:57] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[04:12:43] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) ()
[04:14:38] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[04:16:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[04:17:29] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:18:35] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[04:21:18] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Read error: Connection reset by peer)
[04:21:38] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[04:22:05] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:24:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:25:35] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 264 seconds)
[04:26:32] *** Joins: Wulf (~Wulf@user/wulf)
[04:27:25] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:27:51] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[04:28:44] *** Quits: gnoo (gnoo@user/gnoo) (Remote host closed the connection)
[04:30:25] *** e36freak_ is now known as e36freak
[04:31:30] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:2833:bacf:5aa:906f)
[04:37:09] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:37:56] *** Joins: gnoo (gnoo@user/gnoo)
[04:39:33] *** Quits: MrFantastik (~f@c-24-6-209-143.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:42:41] *** Joins: ferdna (~ferdna@user/ferdna)
[04:44:15] <nitrix> Precedence of the --\\\\> operator: first come, first served.
[04:52:05] *** Joins: ARoxdale (~ARoxdale@109.76.17.40)
[04:52:07] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:52:51] *** Quits: _0ne (~one@user/0ne/x-2101768) (Quit: _0ne)
[04:53:09] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 256 seconds)
[04:54:51] <fluter> avrdude: is \ an operator? what does it mean?
[04:57:18] <fizzie> It's a line continuation character, it's not technically an operator.
[04:57:24] <nitrix> C11 5.1.1.2p1 Translation phase #2: Each instance of a backslash character (\) immediately followed by a new-line character is deleted, splicing physical source lines to form logical source lines.
[04:58:43] <fizzie> Most often seen in macro definitions and other preprocessor directives, and once in a blue moon also in string literals, since everywhere else it hardly matters whether there's a newline or not.
[05:04:14] *** Joins: c2a1 (~c2a1@cmcust1b-73.131.nulinkdigital.com)
[05:06:21] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:07:58] <smlavine> backslash character within a string literal too?
[05:08:46] <fizzie> That's different than the one at the end of a line though.
[05:09:32] <fizzie> But sometimes people wrap string literals to multiple lines with a \ at the end of the line. Not that there's generally any need to, because of adjacent string literal concatenation.
[05:09:38] *** Joins: steve_ (~steve@ool-182c2aa4.dyn.optonline.net)
[05:09:45] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:10:17] *** Quits: steve__ (~steve@ool-182c2aa4.dyn.optonline.net) (Remote host closed the connection)
[05:12:26] *** Joins: doppel (~chatzilla@ip70-170-24-52.lv.lv.cox.net)
[05:13:03] <doppel> bleah, i typed "irc.libera.net" by mistake.  must be another freenode server.
[05:13:05] <doppel> :-P
[05:13:21] <caze> doppel is doppeled
[05:13:38] <doppel> caze is cazed
[05:14:09] <nitrix> fizzie is fizzied
[05:14:20] <doppel> :o
[05:16:03] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[05:17:36] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:18:23] *** Quits: alch (~alch@151.36.86.5) (Read error: Connection reset by peer)
[05:19:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:19:31] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:19:40] *** Joins: jbauer (~jbauer@146.71.11.98)
[05:19:59] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[05:22:34] *** Joins: alch (~alch@151.36.68.117)
[05:25:32] <rndusr> is there a way to check if there's anything to read on a FILE * pointer?
[05:25:40] <rndusr> i haven't found anything
[05:25:45] *** Joins: oriba (~oriba@dynamic-077-011-083-121.77.11.pool.telefonica.de)
[05:27:04] <floatcomplex> ungetc()
[05:27:30] <rndusr> wait, how?
[05:28:06] <fizzie> If you mean "test whether attempting to read would block", there's nothing in standard C, but there's APIs like select and poll in POSIX.
[05:28:28] <fizzie> (That can be a little confusing to mix with stdio buffering, though.)
[05:28:52] <rndusr> great
[05:29:07] <rndusr> so when I read one too many lines my program just blocks forever
[05:30:47] <fizzie> Just to clarify, are you reading from a file that actually has an end, or from an interactive device like the unredirected standard input that doesn't really? 
[05:32:42] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[05:33:03] *** Xgc_ is now known as Xgc
[05:33:05] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[05:34:14] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[05:36:45] *** Joins: Aloli_92641 (~Administr@2408:820c:8f3f:2b10:2105:6980:4dce:fb4)
[05:37:07] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[05:40:35] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:2833:bacf:5aa:906f) (Ping timeout: 264 seconds)
[05:40:45] *** Quits: khoa (~khoa@user/khoa) (Ping timeout: 256 seconds)
[05:41:03] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Client Quit)
[05:41:25] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[05:41:39] *** Joins: kirito (~giantpand@user/giantpanda)
[05:44:11] *** Quits: oriba (~oriba@dynamic-077-011-083-121.77.11.pool.telefonica.de) (Ping timeout: 264 seconds)
[05:45:44] *** Quits: doppel (~chatzilla@ip70-170-24-52.lv.lv.cox.net) (Quit: ChatZilla 0.9.93 [Firefox 56.0.2/20171024165158])
[05:47:24] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[05:48:47] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[05:49:29] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[05:52:35] *** Quits: Aloli_92641 (~Administr@2408:820c:8f3f:2b10:2105:6980:4dce:fb4) (Ping timeout: 264 seconds)
[05:54:03] *** Joins: Aloli_9264 (~Administr@223.167.213.234)
[05:54:04] *** Joins: Samian (~s@user/samian)
[05:54:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:56:21] *** Joins: Aloli_92641 (~Administr@2408:820c:8f3f:2b10:1500:6a7a:d56b:5943)
[05:57:36] *** Joins: Aloli_92642 (~Administr@2408:820c:8f3f:2b10:1500:6a7a:d56b:5943)
[05:59:27] *** Quits: Aloli_9264 (~Administr@223.167.213.234) (Ping timeout: 256 seconds)
[06:00:31] *** Quits: Aloli_92641 (~Administr@2408:820c:8f3f:2b10:1500:6a7a:d56b:5943) (Ping timeout: 245 seconds)
[06:01:10] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[06:01:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[06:03:26] *** Quits: Aloli_92642 (~Administr@2408:820c:8f3f:2b10:1500:6a7a:d56b:5943) (Ping timeout: 245 seconds)
[06:07:31] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[06:07:32] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[06:07:58] *** Quits: ARoxdale (~ARoxdale@109.76.17.40) (Ping timeout: 260 seconds)
[06:13:07] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:4c0:1247:9522:a835)
[06:13:25] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[06:15:25] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:17:30] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[06:17:32] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:c8e:c037:52ca:3c6a)
[06:22:51] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:4c0:1247:9522:a835) (Quit: This computer has gone to sleep)
[06:25:58] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:31:11] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[06:33:30] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:34:01] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:36] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[06:35:25] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[06:38:37] *** Joins: null10 (~null@114.254.3.5)
[06:40:10] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 260 seconds)
[06:41:19] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[06:41:31] *** Quits: begriffs (~begriffs@user/begriffs) (Remote host closed the connection)
[06:41:37] *** Quits: int (~int@0x4.cx) (Quit: see you :))
[06:41:52] *** Joins: begriffs (~begriffs@user/begriffs)
[06:42:24] *** Joins: int (~int@0x4.cx)
[06:43:48] *** Quits: kirito (~giantpand@user/giantpanda) (Read error: Connection reset by peer)
[06:45:09] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:45:25] *** Quits: int (~int@0x4.cx) (Client Quit)
[06:46:13] *** Joins: int (~int@0x4.cx)
[06:48:35] *** Joins: Famine_ (~Famine@user/famine)
[06:51:51] *** Joins: kirito (~giantpand@user/giantpanda)
[06:51:56] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 268 seconds)
[06:54:23] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:57:31] *** Quits: begriffs (~begriffs@user/begriffs) (Remote host closed the connection)
[06:57:52] *** Joins: begriffs (~begriffs@user/begriffs)
[06:58:09] *** Joins: frost (~frost@user/frost)
[06:59:16] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 245 seconds)
[07:01:31] *** Joins: ferdna (~ferdna@user/ferdna)
[07:02:26] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[07:05:32] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-a84d-5e37-b6bd-99de.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:09:19] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[07:09:43] *** Quits: begriffs (~begriffs@user/begriffs) (Ping timeout: 256 seconds)
[07:10:23] *** Joins: begriffs (~begriffs@user/begriffs)
[07:14:24] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 260 seconds)
[07:15:34] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:c8e:c037:52ca:3c6a) (Read error: Connection reset by peer)
[07:17:16] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:c8e:c037:52ca:3c6a)
[07:18:25] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Quit: Leaving)
[07:24:13] *** Joins: latests (~Chigra@201.150.116.124)
[07:25:00] *** Quits: latests (~Chigra@201.150.116.124) (K-Lined)
[07:26:06] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:27:36] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 245 seconds)
[07:30:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:44:36] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[07:51:34] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[07:57:37] *** Joins: moatx (~moatx@46.152.146.185)
[07:57:58] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:59:54] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[07:59:54] *** jmiehe1 is now known as jmiehe
[08:01:41] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[08:12:47] *** Joins: loganlee (~Thunderbi@user/loganlee)
[08:14:07] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:4c46:1e77:d090:3868)
[08:16:56] *** Quits: moatx (~moatx@46.152.146.185) (Quit: leaving)
[08:20:36] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[08:24:14] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 260 seconds)
[08:28:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[08:32:38] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 260 seconds)
[08:33:27] *** Joins: m4v (~znc@ubuntu/member/m4v)
[08:34:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[08:35:45] *** Quits: amorel (~amorel@mx.mompl.net) (Ping timeout: 260 seconds)
[08:44:21] *** Quits: Matt|home (~matt@adsl-74-233-58-207.mia.bellsouth.net) (Ping timeout: 256 seconds)
[08:44:39] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[08:48:26] *** Quits: Bou (sid274843@user/bou) (Ping timeout: 245 seconds)
[08:48:54] *** Quits: psb (sid500598@user/psb) (Ping timeout: 260 seconds)
[08:48:59] *** Quits: decartes_ (sid240036@id-240036.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:49:08] *** Quits: englishm (sid6629@id-6629.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: terabit (sid146285@id-146285.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:49:10] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 260 seconds)
[08:49:10] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:49:16] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:17] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:49:35] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[08:49:41] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 245 seconds)
[08:49:44] *** Quits: dohtem (uid524096@user/dohtem) (Ping timeout: 268 seconds)
[08:49:45] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:49:51] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:49:51] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: glenfe (sid231748@user/glenfe) (Ping timeout: 260 seconds)
[08:50:06] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:50:11] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[08:50:11] *** Quits: TallonRain (sid214799@user/tallonrain) (Ping timeout: 264 seconds)
[08:50:18] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 260 seconds)
[08:50:21] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:50:23] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 252 seconds)
[08:50:32] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:39] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:50:46] *** Quits: pony (sid524992@smol/hors) (Ping timeout: 260 seconds)
[08:50:56] *** Quits: schna (sid484866@id-484866.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:57] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 268 seconds)
[08:51:00] *** Quits: ikiryo (sid109660@user/ikiryo) (Ping timeout: 260 seconds)
[08:51:00] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[08:51:06] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[08:51:13] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[08:51:19] *** Joins: bjs (sid190364@user/bjs)
[08:51:20] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[08:51:22] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[08:51:24] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[08:51:29] *** Joins: computerquip (sid423484@user/computerquip)
[08:51:30] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[08:51:33] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:51:34] *** Joins: englishm (sid6629@tinside.irccloud.com)
[08:51:40] *** Joins: Pent (sid313808@2a03:5180:f:2::4:c9d0)
[08:51:49] *** Joins: terabit (sid146285@id-146285.uxbridge.irccloud.com)
[08:51:49] *** Joins: glenfe (sid231748@user/glenfe)
[08:51:52] *** Joins: placeb0 (uid283215@2a03:5180:f:2::4:524f)
[08:51:55] *** Joins: greyblue9 (sid500829@2a03:5180:f:3::7:a45d)
[08:51:59] *** Joins: agander_m (sid407952@2a03:5180:f::6:3990)
[08:52:01] *** Joins: dreamcat4 (uid157427@2a03:5180:f:4::2:66f3)
[08:52:02] *** Joins: schna (sid484866@2a03:5180:f:1::7:6602)
[08:52:05] *** Joins: lhtseng (sid15322@2a03:5180:f:1::3bda)
[08:52:06] *** Joins: decartes_ (sid240036@2a03:5180:f:1::3:a9a4)
[08:52:08] *** Joins: buhman (sid411355@2a03:5180:f::6:46db)
[08:52:08] *** Quits: buhman (sid411355@2a03:5180:f::6:46db) (Changing host)
[08:52:08] *** Joins: buhman (sid411355@user/buhman)
[08:52:09] *** Joins: TallonRain (sid214799@user/tallonrain)
[08:52:09] *** Joins: psb (sid500598@user/psb)
[08:52:09] *** Joins: dohtem (uid524096@user/dohtem)
[08:52:17] *** Joins: BlueShark (sid10311@user/blueshark)
[08:52:18] *** Joins: whatsupdoc (uid509081@2a03:5180:f:4::7:c499)
[08:52:22] *** Joins: pony (sid524992@smol/hors)
[08:52:24] *** Joins: ikiryo (sid109660@user/ikiryo)
[08:52:25] *** Joins: nightstrike (uid487@2a03:5180:f:5::1e7)
[08:52:29] *** Joins: rubin55 (sid175221@2a03:5180:f:4::2:ac75)
[08:52:33] *** Joins: ullbeking (sid5364@user/ullbeking)
[08:52:53] *** Joins: jakesyl_ (sid56879@2a03:5180:f:4::de2f)
[08:52:55] *** Joins: NiKaN (sid385034@2a03:5180:f:1::5:e00a)
[08:54:18] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[08:57:33] *** Joins: Matt|home (~matt@adsl-74-233-58-34.mia.bellsouth.net)
[09:00:12] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[09:00:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[09:02:54] *** Joins: Bou (sid274843@user/bou)
[09:07:10] *** Quits: null10 (~null@114.254.3.5) (Quit: Client closed)
[09:10:27] *** Joins: bogdomania (bogdomania@user/bogdomania)
[09:19:00] *** Quits: alch (~alch@151.36.68.117) (Read error: Connection reset by peer)
[09:19:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:22:22] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:b135:da21:252e:7512)
[09:22:48] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:b135:da21:252e:7512) (Client Quit)
[09:22:53] *** Joins: alch (~alch@151.36.28.6)
[09:27:42] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 260 seconds)
[09:36:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[09:36:45] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[09:38:22] *** Quits: zwr (~zwr@2804:d45:b966:fb00:d22d:c6e:3029:6344) (Ping timeout: 260 seconds)
[09:39:08] *** Joins: zwr (~zwr@2804:d45:b966:fb00:4dcf:a637:9af2:74cd)
[09:43:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b) (Ping timeout: 268 seconds)
[09:46:07] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:49:09] *** Quits: pnbeast (~pnbeast@2601:140:4280:3c90::1) (Quit: WeeChat 2.7.1)
[09:51:51] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[09:55:14] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 260 seconds)
[09:57:58] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[09:59:11] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[10:06:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:08:10] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[10:08:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[10:10:04] *** Joins: khoa (~khoa@user/khoa)
[10:24:34] *** Joins: vysn (~vysn@user/vysn)
[10:26:29] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[10:31:28] *** Quits: eblip (~eb0t@90.202.254.138) (Ping timeout: 268 seconds)
[10:33:19] *** Joins: eblip (~eb0t@90.209.247.46)
[10:35:26] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:36:00] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:37:02] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[10:39:23] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:40:19] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[10:40:44] *** Joins: Raguile (~Raguile@user/raguile)
[10:43:13] *** Joins: lkronnus (~kron@179097066103.provale.com.br)
[10:46:30] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[10:46:31] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[10:48:36] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[11:06:15] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) ()
[11:07:49] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[11:08:13] *** Joins: bogdomania (bogdomania@user/bogdomania)
[11:14:58] *** Quits: Posterdati (~posterdat@host-79-17-4-141.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[11:15:59] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:16:55] *** Quits: bogdomania (bogdomania@user/bogdomania) (Quit: Konversation terminated!)
[11:17:29] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[11:27:08] *** Joins: Posterdati (~posterdat@host-87-3-210-39.retail.telecomitalia.it)
[11:28:50] *** Quits: rahl (~rahl@102.114.127.19) (Ping timeout: 268 seconds)
[11:30:04] *** Joins: rahl (~rahl@102.114.5.255)
[11:38:28] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:39:45] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:40:25] *** Joins: mrig (~AdiIRC@user/mrig)
[11:44:56] *** Joins: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de)
[11:51:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:54:11] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[11:58:32] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[12:00:46] *** Quits: lkronnus (~kron@179097066103.provale.com.br) (Ping timeout: 260 seconds)
[12:02:54] *** Joins: lkronnus (~kron@179097066103.provale.com.br)
[12:05:26] *** Joins: szutt (~szutt@116.37.2.145)
[12:09:02] *** greenbagels_ is now known as greenbagels
[12:14:04] *** Joins: earnestly (~earnest@user/earnestly)
[12:15:29] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:21:34] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:22:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:23:03] *** Joins: mokulus (~mokulus@user/mokulus)
[12:23:24] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[12:24:14] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[12:28:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:29:27] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[12:32:36] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[12:33:52] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:c8e:c037:52ca:3c6a) (Quit: Leaving.)
[12:34:09] *** Joins: Crescendo (~Crescendo@user/crescendo)
[12:34:50] *** Quits: mahmutov (~mahmutov@37.155.85.233) (Ping timeout: 260 seconds)
[12:39:18] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.3)
[12:42:05] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[12:44:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[12:45:30] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:45:58] *** Joins: frost (~frost@user/frost)
[12:46:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:56:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:59:45] *** Quits: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[13:04:05] *** Joins: aradesh (~aradesh@user/aradesh)
[13:07:15] *** Quits: EdFletcher (~ubuntu@user/edfletcher) (Quit: leaving)
[13:08:58] *** Quits: kirito (~giantpand@user/giantpanda) (Quit: Leaving)
[13:10:18] *** Joins: strajder (~strajder@user/strajder)
[13:13:42] *** Quits: tinyweasel (~weasel@15.235.28.27) (Changing host)
[13:13:42] *** Joins: tinyweasel (~weasel@user/tinyweasel)
[13:14:30] *** Joins: meator (~meator@user/meator)
[13:16:46] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[13:17:46] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[13:17:55] *** Quits: alch (~alch@151.36.28.6) (Read error: Connection reset by peer)
[13:18:08] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[13:18:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:23:10] *** Joins: alch (~alch@151.36.82.182)
[13:24:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:28:45] *** Parts: emanuele6 (~emanuele6@user/emanuele6) (WeeChat 3.3)
[13:29:20] *** Joins: Guest61 (~Guest61@m83-187-163-208.cust.tele2.se)
[13:29:27] *** shadowchaser4 is now known as shadowchaser
[13:29:58] *** Quits: Guest61 (~Guest61@m83-187-163-208.cust.tele2.se) (Client Quit)
[13:30:45] *** Joins: Guest61 (~Guest61@m83-187-163-208.cust.tele2.se)
[13:31:26] *** Quits: Guest61 (~Guest61@m83-187-163-208.cust.tele2.se) (Client Quit)
[13:31:39] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[13:36:39] *** Joins: gemelen (~gemelen@zooey.gemelen.net)
[13:36:57] *** Quits: reset (~reset@user/reset) (Quit: reset)
[13:37:19] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 256 seconds)
[13:40:08] <nomagno> How can I properly call main() in RISCV64 (barebones ELF) without libc?
[13:40:38] <sham1> You look at the ABI
[13:41:36] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[13:41:49] *** Joins: mrig (~AdiIRC@user/mrig)
[13:42:27] *** Quits: vitimiti (~Celtor@2a02:c7f:44ab:3100:1627:8c44:f3ea:4069) (Quit: Leaving)
[13:42:38] <nomagno> I am looking for documentation, I just don't know where to look
[13:44:19] <veltas> system v riscv64 document, ELF definition, docs for your assembler
[13:45:17] <veltas> You'll need to understand the calling convention, and read the section that explains the initial stack/register state at the entry point
[13:45:44] <veltas> which will help getting argc/argv
[13:46:38] *** Joins: cassepipe (~cassepipe@176-155-131-22.abo.bbox.fr)
[13:48:44] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:53:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[13:58:11] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:02:11] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[14:03:10] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[14:08:38] *** Joins: frost (~frost@user/frost)
[14:09:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:09:57] *** Joins: Burgundy (~yomon@86.127.194.72)
[14:14:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:16:00] *** Joins: vmcs (~vmcs@194.135.153.44)
[14:17:05] *** Quits: whatsupdoc (uid509081@2a03:5180:f:4::7:c499) (Quit: Connection closed for inactivity)
[14:17:19] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[14:19:49] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:23:02] *** Joins: msfninja (~kali@user/msfninja)
[14:26:29] *** Quits: marcj (~marc@205.175.215.25) (Ping timeout: 264 seconds)
[14:28:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:29:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:29:58] *** Quits: cassepipe (~cassepipe@176-155-131-22.abo.bbox.fr) (Quit: Leaving)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[14:32:54] <trenka> nomagno: I guess, there is nothing much riscv specific there
[14:34:00] *** Joins: cadmio (~cadmio@151.35.128.228)
[14:36:02] *** Joins: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[14:37:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:f453:84d1:9e20:fd44)
[14:39:12] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[14:39:27] <nomagno> trenka: there is if you don't want a segfault
[14:40:45] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[14:41:50] <routeveg> Lo all
[14:43:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:48:41] *** Quits: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Quit: WeeChat 1.1.1)
[14:50:50] *** Joins: marcj (~marc@205.175.215.25)
[14:56:46] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:58:21] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[14:59:31] *** Parts: cadmio (~cadmio@151.35.128.228) (WeeChat 3.0)
[15:00:46] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:02:32] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[15:02:47] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[15:03:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[15:04:35] *** Quits: marcj (~marc@205.175.215.25) (Ping timeout: 256 seconds)
[15:07:28] *** Joins: marcj (~marc@205.175.215.25)
[15:09:31] *** Joins: random-nick (~random-ni@87.116.176.55)
[15:10:42] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[15:11:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:12:30] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[15:13:15] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[15:15:32] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:16:29] *** Quits: marcj (~marc@205.175.215.25) (Ping timeout: 256 seconds)
[15:16:41] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:16:43] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:16:50] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:17:32] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:17:37] *** Joins: quartz (~quartz@user/quartz)
[15:17:40] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:18:14] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:18:21] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:18:49] *** Joins: marcj (~marc@205.175.215.25)
[15:22:57] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[15:23:15] *** Joins: terminalpusher (~terminalp@2a01:586:9810:1:de2d:82df:de81:8ecc)
[15:25:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 245 seconds)
[15:26:15] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:295a:1fe2:8f5:eb4c)
[15:28:47] <terminalpusher> Why is https://paste.gg/p/anonymous/6fbee7acdd7b4d9791e39e0a60b65433 compiled with `gcc -o minimal minimal.c -nostdlib -static -lc` 9312 bytes when https://paste.gg/p/anonymous/53e75f27b6804d47a3ea04e4d5081bc9 compiled with `nasm -f elf64 minimal.asm -o minimal.o; ld minimal.o -o minimal` is 4648 bytes?
[15:29:01] <terminalpusher> What is causing this overhead for GCC's output?
[15:30:32] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:34:11] <Maxdamantus> terminalpusher: when I try compiling that C that using gcc 10 for x86-64, I get 4744 bytes after stripping.
[15:34:38] <Maxdamantus> terminalpusher: anyway, maybe try running strip and seeing how many bytes are still there.
[15:34:42] <terminalpusher> Maxdamantus: `strip minimal`?
[15:34:47] <Maxdamantus> terminalpusher: yes.
[15:34:53] <terminalpusher> Doesn't make a big difference for me.
[15:35:24] <Maxdamantus> Didn't make a big difference for me either. Before stripping it was 5376 bytes.
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:15] <Maxdamantus> You could try looking at what's actually in the file using something like `objdump -D minimal`.
[15:36:20] <terminalpusher> With `gcc`? Did you use the same options as me? Maybe I should try a newer GCC
[15:36:28] <Maxdamantus> Yes, same options.
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:53] <terminalpusher> There's a lot more instructions only in GCC's output
[15:37:01] <terminalpusher> gcc version 10.3.0
[15:40:47] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[15:42:12] *** Joins: thing (~thing@user/thing)
[15:45:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:45:48] *** Joins: plastico (~plastico@neomutt/plastico)
[15:46:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:49:55] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[15:50:23] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[15:50:29] *** Quits: khoa (~khoa@user/khoa) (Ping timeout: 256 seconds)
[15:50:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:54:56] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:295a:1fe2:8f5:eb4c) (Quit: This computer has gone to sleep)
[15:55:01] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[15:59:27] *** Joins: jess (~jess@libera/staff/jess)
[16:05:51] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:295a:1fe2:8f5:eb4c)
[16:07:30] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:07:55] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:11:50] *** Quits: movingtxt (~movingtxt@user/movingtxt) (Quit: leaving)
[16:12:40] *** Joins: oriba (~oriba@x4dbf7373.dyn.telefonica.de)
[16:14:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:17:56] *** Quits: oriba (~oriba@x4dbf7373.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:18:16] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[16:18:21] *** Joins: oriba (~oriba@x4dbf7373.dyn.telefonica.de)
[16:18:24] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[16:19:57] *** Joins: tech_exorcist_ (~tech_exor@user/tech-exorcist/x-0447479)
[16:20:25] *** Joins: Klinda (~superleag@user/klinda)
[16:20:28] *** Joins: fmsd (~user@196.65.44.214)
[16:21:40] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:22:34] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Ping timeout: 260 seconds)
[16:24:50] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:295a:1fe2:8f5:eb4c) (Quit: This computer has gone to sleep)
[16:27:18] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:31:56] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[16:33:47] <katnis> using vscode
[16:33:53] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Remote host closed the connection)
[16:34:08] <katnis> when i press f5 to debug, json file shows up and it doesnt debug :/
[16:35:19] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[16:37:41] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:08] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[16:41:30] <ozzz> Guys, why asan reports heap overflow if memcmp(buf1, buf2, alloc_buf_length) compares two buffers of their max length?
[16:42:03] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[16:43:21] <ozzz> for example buf1 = malloc( (sizeof(char) * 40), buf1_length == buf2_length ..... then memcmp( buf1, buf2, 40) -> overflow
[16:43:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:44:03] <katnis> fixed!
[16:44:05] <veltas> Should compare up to their min length, not max length
[16:44:14] <veltas> The minimum of the two
[16:44:22] <ozzz> veltas: I got that, but why?
[16:44:34] *** Joins: kts (~kts@103.73.237.184)
[16:44:46] <ozzz> last byte is not accessible?
[16:45:06] <veltas> If one buffer is smaller, you need to use that size, not the larger size, so you want the minimum of the two sizes
[16:45:14] <ozzz> not the case
[16:45:18] <ozzz> both are equal
[16:45:33] <veltas> sizeof (char) is 1 by definition
[16:45:47] <ozzz> veltas: I know. made for safety
[16:45:57] <ozzz> safety - portability
[16:45:57] *** Quits: kts (~kts@103.73.237.184) (Client Quit)
[16:46:06] <veltas> Assuming you allocated buf2 as well the same way, then that memcmp should no cause an error
[16:46:22] <ozzz> veltas: that's the question
[16:46:30] <veltas> If that's what's happening then it implies something has corrupted the heap, or something else in state... i.e. undefined behaviour somewhere else is causing trouble
[16:46:42] <ozzz> undefined behavior?
[16:46:47] <ozzz> underflow?
[16:47:22] <veltas> Like accessing a pointer to an object after it's been deleted, accessing an array out of bounds, etc
[16:47:31] <ozzz> I hate that....
[16:47:33] <veltas> deleted or has been destroyed
[16:47:55] <ozzz> so simple access may trigger it right?
[16:48:41] <veltas> Yes if you're doing something wrong
[16:48:55] <ozzz> sometimes I do...
[16:49:01] <veltas> What you could do is run the code in a tool like valgrind to see if it detects any memory errors
[16:49:25] <ozzz> I have here ubsan, dr.memory, valgrind, kdbg with gdb
[16:49:41] <ozzz> only asan reports problems
[16:49:52] <veltas> Well it could be a bug with asan
[16:50:21] <ozzz> maybe you know some additional tool for capturing undef. behvr?
[16:50:34] <veltas> Run it in a debugger and watch the buffer from creation time, and surrounding 4 bytes, and see every access made to it or nearby and see if you can spot something corrupting a heap entry
[16:50:39] <ozzz> I had proprietary soft, but license expired
[16:51:05] <veltas> gdb can do this
[16:51:13] <ozzz> veltas: too complicated to do that by hands...
[16:51:27] <ozzz> my beard is not long enough yet )))))
[16:51:31] <veltas> I think you can watch a range of memory with gdb
[16:51:54] <ozzz> sure... I only afraid to do that :D
[16:52:03] *** Joins: jinsun (~quassel@user/jinsun)
[16:52:04] <veltas> It's a bit of a shot in the dark, does asan not give more info on what's wrong?
[16:52:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[16:52:29] *** Quits: dld (~dld@2601:197:600:1210:4005:8d20:87b1:8dd5) (Ping timeout: 265 seconds)
[16:52:46] *** Joins: meator (~meator@user/meator)
[16:52:51] <veltas> Here's an idea, write an alternative function called Memcmp or something that does the comparison byte-by-byte without any optimisations, and test whether asan complains
[16:52:57] <ozzz> it prints actually some addresses in stack... but... not enough experience from my side to debug machine code
[16:53:11] <veltas> It's possible it's freaking out about some kind of dirty optimisation that your C library is doing
[16:53:44] <ozzz> yeah! it might be. I used -fno-inline, -fstrict-aliasing -O0 etc...
[16:54:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:54:36] <veltas> Machine code is not hard to read, if you're using -O0 you should be able to generate a dump of assembly + source together
[16:54:37] <ozzz> maybe some optimizations can definitely affect the code of asan
[16:55:03] <veltas> That's not what I'm saying, not compiler opts
[16:55:54] <veltas> The library could be doing some clever low-level stuff to do a faster memory compare that scares asan because it's accessing beyond the end of your buffer... in a way it happens to know is safe
[16:56:22] <ozzz> veltas: it's a code-grinder like project, maybe if I will have more free time to practice with that
[16:56:33] <veltas> I don't know what that is
[16:57:00] <ozzz> I mean code is huge, and I'm afraid it would be tricky for me now
[16:57:32] <ozzz> especially that I don't had such experience before
[16:58:01] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 245 seconds)
[16:58:27] <ozzz> anyway, your assumptions are legit! thanks a lot
[16:58:35] <fizzie> Some C libraries do do that thing where they may read more bytes than the number you give, when they know it's safe, but I've never had that trip ASan, I imagine it's (in typical installations) accounted for, by that library call interception mechanism ASan has.
[16:59:33] <ozzz> fizzie: I had such errors before, so I made malloc( (sizeof(char) * (length+10) );
[16:59:53] <ozzz> definitely undef bhvr is somehow again somewhere
[16:59:55] *** Joins: quartz (~quartz@user/quartz)
[17:00:08] *** Quits: quartz (~quartz@user/quartz) (Client Quit)
[17:00:23] <ozzz> also I found that not all compilers affect binary with the same code...
[17:00:43] <ozzz> I mean different versions not trigger that 
[17:01:07] <ozzz> more strang that ubsan not detects anything at all
[17:01:41] <fizzie> I imagine compiling only *part* of the code (some translation units) with -fsanitize=address might cause ASan to give false positives from library code too.
[17:01:52] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[17:02:15] *** Joins: seninha (~seninha@user/seninha)
[17:02:24] <ozzz> that's dissapointing
[17:02:43] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[17:03:32] <ozzz> I have leak reports after binary receives interrupts. , even with code that don't uses heap
[17:07:58] *** Quits: tech_exorcist_ (~tech_exor@user/tech-exorcist/x-0447479) (Quit: afk, ttyl)
[17:10:54] <fmsd> for optimization sake, should i make my clear_buffer function 1) set the size to 0 or 2) set the size to 0 and set the entire contents to \0
[17:14:09] *** Joins: graywolf (~wolf@user/graywolf)
[17:14:31] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[17:14:50] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[17:16:37] <floatcomplex> fmsd: neither
[17:20:35] *** Quits: alch (~alch@151.36.82.182) (Ping timeout: 256 seconds)
[17:21:20] *** Joins: amorel (~amorel@mx.mompl.net)
[17:21:56] <ozzz> fmsd: I have that, memset (buf, o, size) too
[17:22:27] *** Joins: alch (~alch@151.38.33.105)
[17:24:42] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:24:51] *** Joins: nyah (~nyah@94.6.71.219)
[17:26:31] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[17:27:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:28:21] *** Quits: X-Scale (~ARM@83.223.240.168) (Ping timeout: 268 seconds)
[17:28:50] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:29:50] *** X-Scale` is now known as X-Scale
[17:29:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:29:56] <fmsd> not overwriting the buffer would save alot of memory writes
[17:30:21] <fmsd> and possibly CPU cycles
[17:30:51] <floatcomplex> fmsd: need more context to say what is optimal
[17:31:16] <floatcomplex> obviously doing nothing is preferable to doing anything
[17:31:38] <fmsd> what context
[17:31:54] <floatcomplex> why are you clearing a buffer
[17:32:32] <fmsd> erasing old data
[17:33:20] <floatcomplex> like in a security context?
[17:33:27] <fmsd> no
[17:34:01] <floatcomplex> then don't do anything. just overwrite it with different data next time you use the buffer
[17:34:13] <fmsd> well, maybe the function will be storing password in a buffer
[17:34:52] <floatcomplex> ok well you write code in very different ways based on yes or no there. there's no maybe
[17:35:38] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (Ping timeout: 246 seconds)
[17:35:42] *** Joins: damxsa_ (~damx@2001:16a2:df3c:b500:52e7:1c66:409b:139f)
[17:37:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[17:38:10] *** Joins: cousteau (~cousteau@user/cousteau)
[17:41:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[17:41:53] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[17:42:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:43:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:43:37] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:45:09] *** Joins: pulse (~pulse@user/pulse)
[17:49:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:49:44] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[17:50:59] *** Quits: damxsa_ (~damx@2001:16a2:df3c:b500:52e7:1c66:409b:139f) (Remote host closed the connection)
[17:51:15] <ozzz> in my case there might be non ascii chars, so if I not clear buf, it may stay unterminated. of course I can terminate it by buf[length+1] = '\0', but I'm too lazy for that
[17:51:29] *** Joins: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85)
[17:51:55] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[17:52:24] *** Quits: fmsd (~user@196.65.44.214) (Ping timeout: 268 seconds)
[17:52:24] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[17:52:29] <De4nWhit3> Hello!
[17:53:16] <routeveg> elo
[17:54:18] <high_ground> maybe a sized buffer?
[17:55:04] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[17:59:47] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[18:01:04] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[18:01:24] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:01:35] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 260 seconds)
[18:03:19] *** Joins: jiffe (~jiffe@mail.nsab.us)
[18:04:54] *** Joins: X-Scale` (~ARM@31.22.160.27)
[18:06:04] *** Joins: Macuser (~Macuser@216.30.159.201)
[18:07:12] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[18:08:52] *** X-Scale` is now known as X-Scale
[18:13:19] *** Joins: mahmutov (~mahmutov@37.155.85.233)
[18:15:13] *** Quits: oriba (~oriba@x4dbf7373.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:19:18] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[18:25:07] *** Quits: TheCoffeMaker_ (~TheCoffeM@125-121-245-190.fibertel.com.ar) (Quit: So long and thanks for all the fish)
[18:27:03] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:28:52] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[18:29:58] *** Quits: janemba (~janemba@94.204.254.193) (Ping timeout: 260 seconds)
[18:31:55] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:34:08] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[18:37:36] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[18:39:02] *** Joins: AmR (~AmREiSa@156.199.218.104)
[18:39:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[18:40:29] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 268 seconds)
[18:40:38] *** Quits: enyc (~enyc@user/enyc) (Ping timeout: 260 seconds)
[18:41:29] *** Joins: enyc (~enyc@user/enyc)
[18:43:16] *** Joins: janemba (~janemba@185.107.80.152)
[18:44:26] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:45:12] *** Joins: meator (~meator@user/meator)
[18:47:13] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[18:48:31] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[18:49:37] *** Quits: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85) (Quit: Leaving)
[18:50:20] *** Joins: sedeki (~textual@user/sedeki)
[18:53:34] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[18:54:37] *** Joins: soul-d (~uknown@user/soul-d)
[18:55:43] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:56:12] *** Joins: ferdna (~ferdna@user/ferdna)
[18:57:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:57:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:58:26] *** Joins: dohtem (uid524096@user/dohtem)
[19:02:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:02:41] *** Quits: meator (~meator@user/meator) (Ping timeout: 268 seconds)
[19:04:17] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[19:06:46] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Ping timeout: 260 seconds)
[19:07:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[19:19:09] *** Joins: pulse (~pulse@user/pulse)
[19:19:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:21:55] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[19:23:14] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[19:23:34] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[19:25:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[19:26:25] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Read error: Connection reset by peer)
[19:26:42] *** Joins: monkey_ (~user@190.104.116.153)
[19:26:45] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[19:30:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:477:1061:59ab:6b1f)
[19:30:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:477:1061:59ab:6b1f) (Changing host)
[19:30:12] *** Joins: skapata (~Skapata@user/skapata)
[19:31:39] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:32:40] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[19:32:59] *** Joins: cadmio (~cadmio@151.47.129.99)
[19:33:01] <cadmio> Hello
[19:33:19] <cadmio> I'm getting this https://paste.gnome.org/pwzpxokpg with this https://paste.gnome.org/pvvdjocha if there's someone familiar with GTK let me know
[19:33:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:37:11] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:37:44] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[19:38:04] <ioxzev1z> Why do you have line 63 when the pointer is lost after function exit?
[19:38:54] <ioxzev1z> Also use {} on if statements that don't fit on one line, even if there is only one statement inside
[19:39:58] <ioxzev1z> Also you will probably get help on a gtk channel
[19:41:15] *** Joins: Akuli (~Akuli@82-203-166-207.bb.dnainternet.fi)
[19:41:38] <cadmio> they don't reply at all
[19:43:01] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 245 seconds)
[19:43:37] <floatcomplex> cadmio: did you try asan
[19:44:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:44:25] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[19:45:52] <poprocks> also the cast at line 5 is unnecessary. The reason people on #gtk may not be responding is it seems to be a potential programmer error with the gtksourceview api, which is not part of gtk proper
[19:46:31] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[19:47:16] <floatcomplex> when you get a segfault your first instinct should not be to ask someone else what is wrong. they don't have more information than you
[19:47:57] <floatcomplex> recompile it with -g -fsanitize=address and rerun it, and if it segfaults in the same place you'll get a lot of info about why. if that doesn't work out, go on to gdb
[19:48:04] <floatcomplex> maybe valgrind if you have it
[19:48:27] <floatcomplex> asking someone else to look at the code and see if they can tell why it's segfaulting should be the third or fourth thing on the list
[19:48:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[19:49:51] <cadmio> I'm trying to understand from here https://developer-old.gnome.org/gtk3/stable/GtkTextView.html#gtk-text-view-scroll-to-iter and  https://developer-old.gnome.org/gtksourceview/3.24/GtkSourceSearchContext.html#gtk-source-search-context-get-occurrence-position
[19:49:58] <cadmio> how those functions work
[19:50:11] <cadmio> maybe I'm messing up something
[19:50:16] <Bou> start_sel and end_sel aren't initialized
[19:50:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e118-d184-1f68-13bf.res6.spectrum.com)
[19:50:59] <poprocks> Bou: but see line 42
[19:51:37] <floatcomplex> lot of guessing going on here, when the tool could just tell you what is wrong
[19:51:50] <cadmio> that line 42 should serve to point to the 1st occurence
[19:51:54] <Bou> I think start/end are inputs to `gtk_source_search_context_get_occurrence_position`
[19:53:04] <poprocks> no, no, that function is supposed to define those GtkTextIters, that's why it asks for their addresses
[19:54:31] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:4c46:1e77:d090:3868) (Quit: simon323)
[19:55:45] <cadmio> I've recompiled with sanitize https://paste.gnome.org/pgy1biurx
[19:55:47] <Bou> const GtkTextIter *match_start, const GtkTextIter *match_end... const, so they're inputs
[19:55:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:56:11] <cadmio> Gtk-WARNING **: 17:24:28.828: Invalid text buffer iterator: either the iterator is uninitialized, or the characters/pixbufs/widgets in the buffer have been modified since the iterator was created.
[19:56:16] <Bou> it searches between start and end, returns a position (or -1)... that's how I read it anyway
[19:56:42] <poprocks> Bou: yes you're correct. I should have RTFM'd :D  - there are a lot of functions in GTK that work the way I described, but I shouldn't have assumed
[19:57:01] <cadmio> I thought that you set them with gtk_source_search_context_get_occurrence_position
[19:57:38] <poprocks> cadmio: see this example, you might need a function call like gtk_text_buffer_get_selection_bounds first to define those Iters before passing their addresses to that other function: https://cpp.hotexamples.com/examples/-/-/gtk_source_search_context_get_occurrence_position/cpp-gtk_source_search_context_get_occurrence_position-function-examples.html
[19:59:01] <floatcomplex> cadmio: to clarify, when you are compiling with asan, you do not also use gdb, you just run the code normally
[19:59:20] <floatcomplex> but it looks like the segfault is inside gtk rather than your application so i guess neither are going to help overmuch
[20:02:23] <cadmio> poprocks: thanks with this https://paste.gnome.org/pex7wova4#line-47 I've solved the segfault but it scrolls down to the end of page instead of the 1st occurence
[20:02:54] <Bou> eh, but you still don't use the return value of the call at all
[20:04:10] <cadmio> Bou: how should I do that?
[20:04:27] <poprocks> cadmio: that was just one example - so now you're defining those iters to *something* so it's not crashing, but who knows if you're using the API correctly - also as Bou says, gtk_source_search_context_get_occurrence_position returns an integer, which you're discarding and not using in any way
[20:04:30] <Bou> read the documentation on how to use the function (http://www.manpagez.com/html/gtksourceview/gtksourceview-3.12.2/GtkSourceSearchContext.php#gtk-source-search-context-get-occurrence-position)
[20:06:40] <cadmio> yes but I don't understand in which function I should use the return value of gtk_source_search_context_get_occurrence_position
[20:07:55] <Bou> so it looks like you want to scroll to the thing you found (if it found it at all)... so idk, maybe pass it to the scroll function?
[20:08:37] <cadmio> the words are all found and highlighted but I can't point to the 1st occurence
[20:10:52] <Bou> ah it stores the results in GtkSourceSearchContext, so you'll need get something like `result = gtk_source_search(...); if (result>0) { get the index from the search context; }`
[20:11:20] <Bou> which means you find out how to use GtkSourceSearchContext
[20:14:54] <cadmio> there's also this function https://developer-old.gnome.org/gtksourceview/unstable/GtkSourceSearchContext.html#gtk-source-search-context-forward but it doesn't get as input an int
[20:15:52] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[20:19:52] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:34] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[20:21:12] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:21:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[20:21:15] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[20:21:43] *** Quits: cadmio (~cadmio@151.47.129.99) (Quit: WeeChat 3.0)
[20:22:15] <Bou> cadmio: that one returns a start and end position though, looks like the one you need
[20:22:36] *** Quits: vmcs (~vmcs@194.135.153.44) (Ping timeout: 245 seconds)
[20:23:03] *** Joins: izak (~user@196.189.63.254)
[20:23:04] *** grumble` is now known as grumble
[20:24:41] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:24:46] *** Parts: izak (~user@196.189.63.254) (Killed buffer)
[20:25:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:28:28] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Remote host closed the connection)
[20:28:49] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[20:29:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 264 seconds)
[20:30:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[20:31:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:32:07] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[20:32:08] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Read error: Connection reset by peer)
[20:32:18] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[20:35:12] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:35:50] *** Joins: lyudess (~lyudess@pool-96-230-249-157.bstnma.fios.verizon.net)
[20:36:45] *** Quits: Lyude (~lyudess@pool-96-230-249-157.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[20:38:33] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164)
[20:39:11] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[20:39:30] *** Joins: azerty (~azerty@user/badwolf)
[20:43:31] *** Joins: missogra (~missogra@dynamic-095-112-020-078.95.112.pool.telefonica.de)
[20:44:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:45:59] *** Joins: cousteau (~cousteau@user/cousteau)
[20:51:05] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[20:52:34] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:53:30] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[20:53:45] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[20:55:42] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[20:58:18] *** Quits: terminalpusher (~terminalp@2a01:586:9810:1:de2d:82df:de81:8ecc) (Remote host closed the connection)
[21:02:14] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:02:56] *** Joins: Kutter (~Kutter@5.36.132.188)
[21:03:22] <Kutter> Hallo
[21:03:28] <Twix> Henlo
[21:04:57] *** Quits: Kutter (~Kutter@5.36.132.188) (Remote host closed the connection)
[21:04:58] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:07:18] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:10:10] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:12:49] *** Joins: mrig (~mrig@user/mrig)
[21:19:09] *** Quits: alch (~alch@151.38.33.105) (Read error: Connection reset by peer)
[21:20:09] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:20:25] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:21:10] *** Joins: rgrinberg (~textual@200.5.63.76)
[21:23:13] *** Joins: alch (~alch@151.36.51.46)
[21:31:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e118-d184-1f68-13bf.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:31:36] *** Joins: aradesh (~aradesh@user/aradesh)
[21:31:40] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[21:35:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:f453:84d1:9e20:fd44) (Ping timeout: 245 seconds)
[21:36:27] *** Quits: jess (~jess@libera/staff/jess) ()
[21:39:43] *** Joins: riles (~root@dhcp-24-53-243-12.cable.user.start.ca)
[21:41:28] *** Joins: Narrat (~omnius@p5dcc6c76.dip0.t-ipconnect.de)
[21:43:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[21:43:53] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:44:43] *** Joins: kadir (~kadir@78.178.105.36)
[21:44:47] *** Joins: Inline (~Inline@2a02:908:1252:7a80:da94:668f:b78c:97b1)
[21:48:48] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:51:55] *** Joins: System_Error (~SystemErr@user/systemerror)
[21:52:02] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a052:a7f8:c6e4:b537)
[21:52:02] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a052:a7f8:c6e4:b537) (Changing host)
[21:52:02] *** Joins: skapata (~Skapata@user/skapata)
[21:53:28] *** Quits: msmhnd^ (~msmhnd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:00:43] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[22:01:53] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[22:01:57] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[22:04:27] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[22:05:17] *** Joins: Enitin (~Enitin@82.102.22.85)
[22:06:02] *** Quits: missogra (~missogra@dynamic-095-112-020-078.95.112.pool.telefonica.de) (Ping timeout: 260 seconds)
[22:14:48] <sham1> EHLO\r\n
[22:15:43] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:17:37] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[22:19:56] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[22:25:10] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Ping timeout: 260 seconds)
[22:29:51] <DPA> 501 Syntax: EHLO hostname
[22:30:36] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:30:55] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:40a:9f91:8f3e:4f02)
[22:31:00] <Inst> hi
[22:31:31] <Inst> can you guys confirm for me that this github repository
[22:31:55] <Inst> is capable of opening up a file and allowing the calling application to actually read the data?
[22:32:00] <Inst> https://github.com/mlabbe/nativefiledialog
[22:32:01] <candide> Title of Inst's link: GitHub - mlabbe/nativefiledialog: A tiny, neat C library that portably invokes native file open and save dialogs.
[22:35:15] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:36:17] <DPA> Inst: Looking at the header: https://github.com/mlabbe/nativefiledialog/blob/master/src/include/nfd.h
[22:36:17] <DPA> None of the function return a FILE* or nor anything that could be a file descriptor. They just return paths. You'll have to open the file at the path yourself using something like fopen or open to actually read the file.
[22:36:40] <vin> When would a read system call be better than using mmap?
[22:36:43] <Inst> i'm trying to use a foreign function interface in another language
[22:36:54] <Inst> because there's no easy way to invoke the Win32 api
[22:37:04] <Inst> i'm half of a mind to learn enough C just to reimplement it in the original language
[22:37:32] <Inst> also, my test program mod
[22:37:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:37:58] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:38:26] *** Joins: llh (~llh@user/llh)
[22:39:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:39:10] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[22:40:36] <sham1> vin: when you can't memory map your file descriptor, using read/write/readv/writev becomes a lot more compelling
[22:40:37] <Inst> yeah, hacked around the test program issue by opening it in command prompt
[22:41:09] <vin> sham1: when can't you map your descriptor?
[22:41:19] <sham1> Sockets, pipes, devices
[22:41:31] <sham1> Those off the top of my head
[22:41:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[22:42:14] <vin> Also on a mmap file when I access an index, does it translate to a read call from the linux? And thus going throught the linux IO scheudler?
[22:42:47] <sham1> If you're mapping an actual file instead of doing an anonymous map, probabl
[22:43:28] <DPA> It may read the data if it isn't already in memory. Otherwise, it won't have to.
[22:43:29] <sham1> It probably only gets written to disk if flushed by somethinng
[22:44:23] *** Joins: reset (~reset@user/reset)
[22:45:16] <DPA> There exists stuff like fsync(). However, that's just to force writing to disc. When writing using the write() syscall, that may not happen immediately either. But the applications will not know about this, they always get the most current data. 
[22:46:16] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:46:54] <DPA> (Buffering on application side, like things like FILE* may do, are another matter, though.)
[22:49:57] <sham1> Well it could also be flushed by another application wanting to access the same region of the file
[22:50:12] <sham1> Assuming the page has a dirty bit set or whatever
[22:50:33] <sham1> And file descriptor closing, stuff being munmapped andsuch
[22:51:04] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:51:06] <DPA> There may be a special case with DMA. A CPU can directly read from things other then RAM on the bus. So accessing those kinds of mappings may just be really slow.
[22:51:54] <DPA> Depending on where the memory is physically.
[22:53:32] *** Joins: extern (~archer@80.246.130.109)
[22:55:04] <extern> i was asking few days ago for an advice of how to use my library which consists of two files one .h and one.c visible to a whole directory tree. and i was advised to use make
[22:56:07] <floatcomplex> that's part of the solution, yes
[22:56:28] <extern> the thing is that make itself need to be in every directory so it kinda don't serve the purpose for me
[22:56:33] <extern> Makefile
[22:57:35] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[22:58:06] *** Parts: cot (~kiedtl@kisslinux/kiedtl) (// unreachable code)
[22:59:00] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[22:59:39] *** Joins: rcm888 (~u1@95.54.127.118)
[22:59:44] <DPA> I think that's more of a convention than a necessity.
[23:01:11] <DPA> You can do stuff like "build/bla/abc.o: src/bla/abc.c"
[23:01:29] <rcm888> I have pthread_t threads[MAX_THREADS]; How would I pass element of array to  pthread_create(&threads[x], ??
[23:01:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[23:03:45] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:04:33] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[23:05:37] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[23:05:53] <Inst> hmmm, it's good enough, i guess
[23:06:20] <Inst> this github package returns a string that contains the system path
[23:06:28] <Inst> erm, the file path
[23:07:06] <Inst> but i still don't understand the library
[23:07:24] *** Joins: FragByte (~christian@user/fragbyte)
[23:08:30] <Inst> @DPA
[23:08:33] <Inst> could you help me out a bit more?
[23:09:05] <Inst> don't ask to ask, etc
[23:09:14] <Inst> i need to know how much of it i have to feed into a foreign function interface
[23:09:23] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[23:12:01] <DPA> I don't have an answare for that.
[23:12:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:12:35] <Inst> i'm working on my end, it might be the case that haskell's FFI is sophisticated enough that it can work with an .exe
[23:13:15] <Inst> so i'd just have to hack something together, get some C executables for the functions I wish to call, mod the C (I know a bit of C++) code of the executables based on the test-case to return the information needed to the Haskell FFI
[23:13:36] <Inst> I'm trying to train a fellow non-programmer in Haskell starting with a main=do (imperative side of haskell) then an IO intro
[23:13:48] <Inst> and I want the IO to be GUI-ed, and Haskell has terrible GUi support
[23:13:49] *** Joins: u1_ (~u1@95.54.109.124)
[23:14:08] <floatcomplex> that sounds like a lot of problems to try to solve at once
[23:14:11] <Inst> so this hack just gets me Windows' API called via the C library in an executable
[23:14:18] <Inst> i can spend 48 hours on it
[23:14:44] <Inst> Compared to many other languages, Haskell FFI is very easy to use: in the most common case, you only have to translate the prototype of the foreign function into the equivalent Haskell prototype and you're done. For instance, to call the exponential function ("exp") of the libc, you only have to translate its prototype:
[23:14:44] <Inst>     double exp(double);
[23:14:44] <Inst> into the following Haskell code
[23:14:44] <Inst>     --- warning: consider whether you really want to use ccall, see warning in beginning of article
[23:14:45] <Inst>     foreign import ccall "exp" c_exp :: Double -> Double
[23:14:45] *** ChanServ sets mode: +o candide
[23:14:45] *** candide sets mode: +b *!~inst@2601:6c4:*
[23:15:31] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[23:15:34] <sham1> pragma-: ^
[23:15:42] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-8122-1e99-d814-56b4.res6.spectrum.com)
[23:15:56] *** candide sets mode: -b *!~inst@2601:6c4:*
[23:15:58] <pragma-> and?
[23:15:58] <Inst> thanks
[23:15:59] <Inst> sorry
[23:16:01] <Inst> ;_;
[23:16:07] <Inst> it was only 5 lines
[23:16:07] <candide> Inst: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[23:16:08] <sham1> Oh okay, there we go
[23:16:09] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[23:16:27] *** Quits: rcm888 (~u1@95.54.127.118) (Ping timeout: 256 seconds)
[23:17:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[23:17:13] <Inst> sorry, i'll walk off and try to figure out my own problems for now
[23:17:31] *** Joins: Enitin (~Enitin@82.102.22.86)
[23:17:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[23:19:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:19:09] <nitrix> He managed to trigger the enter abuse even after that wall of code. My sides.
[23:19:25] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Read error: Connection reset by peer)
[23:19:44] <nitrix> sham1, Looks like it's working fine to me.
[23:20:17] <sham1> I was just thinking that maybe he could be let out of the ban
[23:20:58] <nitrix> They become increasingly longer on repeated offenses. It requires no human intervention.
[23:21:05] <sham1> Ah ok
[23:21:22] <sham1> Good to know actually
[23:22:05] *** Joins: Atque_ (~Atque@user/atque)
[23:22:12] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[23:23:25] <nitrix> It also messages you privately with a way to appeal +b's in some cases (like connectivity problems causing join/part flood).
[23:23:45] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[23:23:49] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:4d0f:6b02:d329:b5d2)
[23:24:19] <vin> so with to respsect to performance read is not better than mmap ever? sham1 
[23:24:30] <pragma-> it always messages them with the duration of their ban and what they could have done to avoid it (in the case of flooding, it tells them to use a paste site and it links to a couple)
[23:24:39] <sham1> vin: Hard to say in any generality
[23:25:08] <vin> One care where read is better than mmap?
[23:25:26] <vin> *case
[23:27:11] <floatcomplex> if you are just reading the file linearly, there is no reason to use mmap
[23:27:30] <vin> floatcomplex: but does it perform worse than read?
[23:28:02] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[23:28:11] <floatcomplex> i want to say yes but there are probably ways to make it just as fast
[23:28:15] <floatcomplex> but why would you
[23:28:38] *** Quits: pgib (~textual@173.38.117.89) (Ping timeout: 260 seconds)
[23:28:47] <vin> why do you think it's worse floatcomplex?
[23:28:54] <floatcomplex> becsuse i tested it
[23:28:57] <floatcomplex> and it was worse
[23:29:07] <floatcomplex> years ago though
[23:29:10] <vin> but what is the reason?
[23:29:17] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Quit: ZNC 1.8.2 - https://znc.in)
[23:29:23] <floatcomplex> i could only speculate
[23:29:36] <floatcomplex> you should test it instead of asking for speculation
[23:29:41] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:30:15] <floatcomplex> or just trust that (f)read is appropriately fast when reading a file linearly
[23:30:59] <floatcomplex> if you're jumping around in the file, mmap is a lot faster than seeking+reading. if you're piping things into other things, you can't use mmap at all
[23:31:09] <vin> You are talking about a result not an explanation why you got the result. I can do that as well but I will be speculating too, the point of me asking here is someone might actually know why rather than speculation
[23:31:27] <floatcomplex> unless you have a specific reason not to, you should assume things might be pipes
[23:31:30] <floatcomplex> and use read
[23:32:30] <floatcomplex> using mmap because it might not be slower is going to have negative consequences in useability, other than speed
[23:34:48] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:35:02] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Read error: Connection reset by peer)
[23:35:20] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[23:37:00] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[23:37:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:38:57] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[23:39:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:15] *** Joins: Guest40 (~Guest40@183.82.29.247)
[23:39:59] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 264 seconds)
[23:40:46] *** Quits: Guest40 (~Guest40@183.82.29.247) (Quit: Client closed)
[23:41:48] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[23:43:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:43:41] *** LiaoTao_ is now known as LiaoTao
[23:45:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:46:59] *** Joins: sedeki (~textual@user/sedeki)
[23:50:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-8122-1e99-d814-56b4.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:50:32] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[23:52:30] *** Joins: meator (~meator@user/meator)
[23:52:34] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[23:52:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:54:44] <DPA> Could it maybe save memory? It's not like mmapped parts which are accessed seldomly have to stay in memory after all, the kernel can unload them and load them again when they are needed.
[23:55:34] *** Quits: meator (~meator@user/meator) (Client Quit)
[23:56:10] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[23:58:08] <floatcomplex> DPA: yes, it will definitely save memory over mallocing and reading the entire file into a buffer, if that's what you mean
[23:58:28] <floatcomplex> it's not likely to save any memory over reading the file sequentially a little bit at a time and processing it
[23:59:02] <floatcomplex> which you'd have to do anyway if the file were a pipe
[23:59:56] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
