[00:00:12] <Juerd> Why is that?
[00:00:16] <Grinnz> both for the sake of usability, and the sake of not killing the network
[00:00:17] <mst> Juerd: because the bridge is a single v8 javascript VM for the entire network, doesn't handle it well, and tends to spam the shit out of the ircds, causing massive notice floods that interfere with the ircd's operations, and then falls over
[00:00:20] <Juerd> You're still saying "scale matters" but just using different words.
[00:00:28] <Grinnz> ... yes, because it does
[00:00:34] <Grinnz> and you keep saying it doesn't, which is false
[00:00:40] <ehuelsmann[m]> ok. I'm out of this discussion, because it's just not.
[00:00:45] <Juerd> Grinnz: I've changed to asking why it would
[00:00:50] <MikeGeorge[m]> Juerd: Matrix doesn't have nickname clashes.
[00:00:52] <mst> I've just explained what actually happens in practice
[00:00:57] <mst> if you don't believe me, then don't
[00:00:59] <Juerd> mst: So it is there to save the bridge?
[00:01:11] <mst> Juerd: and to not fuck over the ircds and make life 10x harder for the opers
[00:01:33] <mst> the matrix bridge is a *huge* time sink to maintain from the ircd side
[00:01:40] <Juerd> mst: This "not handling it well", how different is it from, say, irssi?
[00:01:54] <mst> Juerd: ... oh fuck off
[00:01:57] <Grinnz> irssi users connect to the ircd directly
[00:02:04] <Grinnz> nick clashes from them are resolved on connection
[00:02:08] <Grinnz> individually
[00:02:10] <mst> an irssi instance isn't making 30,000 connections from a half-assed pile of javascript
[00:02:17] <mst> you can't compare the two
[00:02:26] <Grinnz> you're basically making a strawman
[00:02:31] <Juerd> mst: So, let's say irccloud instead of irssi then :)
[00:02:44] <Grinnz> irccloud also connects each user individually to the ircd
[00:02:46] <mst> Juerd: irccloud is multicore erlang code and much better written
[00:02:51] <Juerd> Grinnz: I thought so did matrix bridges
[00:03:06] <MikeGeorge[m]> Juerd: Your argument that "suffixes fix absolutely nothing" keeps devolving back into "I don't care about these things you say it fixes because I'm looking at the cases where it doesn't help instead"
[00:03:33] <ehuelsmann[m]> Juerd: it's time to stop that conversation. you're here just to irritate with a long list of assumptions and disbeliefs.
[00:03:41] <mst> Juerd: I don't think you understand what's going on here. the entire bridge to this network is a *single* *core* node.js app that was somebody's "first project to learn how to write javascript"
[00:03:42] <Juerd> MikeGeorge[m]: I take that back. I don't understand what the fuck it fixes, but apparently there is something.
[00:03:43] <Grinnz> irccloud also fell over a lot due to freenode in the past, so they've done a lot of work to stop that from happening
[00:03:57] <mst> Juerd: it is *not* robust
[00:04:24] <xenu> Grinnz: yeah, lee eventually fixed it by banning irccloud completetly
[00:04:29] <xenu> completely*
[00:04:31] <MikeGeorge[m]> Juerd: Okay, I can get behind that statement.
[00:04:32] <Grinnz> lol
[00:04:37] <mst> Juerd: the entire thing used to crash every netsplit because it couldn't handle reconnecting with nick clashes
[00:05:19] <mst> Juerd: yes, [m] is a giant hack. but it's a giant hack that effectively works around the fact that the matrix bridge code is fucking terrible and the matrix team, lovely people though they are, can't ops their way out of a paper bag
[00:05:32] <Juerd> mst: So, from the bridge's perspective, it connects to ircd and the nickname is taken - I don't get how that takes down bridges or ircds. Can't it just add the [m] as a second attempt, just like many clients add an underscore?
[00:05:42] <mst> Juerd: yes it SHOULD
[00:05:48] <mst> Juerd: if the code could do that reliably that'd be great
[00:05:57] <MikeGeorge[m]> Matrix devs did just get a $30M grant to work on a bumch of stuff, so maybe it will get better.
[00:06:10] <mst> Juerd: in practice, what happens is it crashes, then tries to connect thousands of clients at once when it comes back up and fucks up ircds
[00:06:15] <Grinnz> frankly the matrix bridge is already in a much better state than once upon a time, so small victories
[00:06:17] <Juerd> mst: Jesus
[00:06:17] <mst> Juerd: IT IS BAD SOFTWARE
[00:06:28] <mst> Juerd: HOW MANY TIMES DO I HAVE TO EXPLAIN THIS
[00:07:10] <ehuelsmann[m]> Scale matters. Or caps.
[00:07:20] <ehuelsmann[m]> lol
[00:07:23] <Juerd> mst: I just have trouble understanding how something can be *that* bad that if one of its connections encounters something not-quite-uncommon, it would crash as a result... And if it wasn't you who was telling me, I'd have trouble believing the person who told me.
[00:07:25] <mst> I had to open an entire channel for co-ordination between the freenode and matrix teams and it took me months and every ounce of 'mst style diplomacy' to keep people going in the same direction to not end up with matrix being permanentaly banned from the network for being a completely fucking disaster ops-wise
[00:07:37] <xenu> speaking of protocols, i know it's been said a million times before, but i really, *really* wish ircv3 chathistory spec was finalized and widely used
[00:08:03] <MikeGeorge[m]> Matrix has persistent history ;)
[00:08:16] <mst> for a couple of years it had no ability to reap idle nicks except via running a script, which they kept forgetting to run, so they'd hit their 50,000 connection limit and all new connections from matrix would stop working until they ran the script and it went back below 30k again
[00:08:27] <MikeGeorge[m]> You could come here.  There are no nick suffixes either.
[00:08:27] <Grinnz> Juerd: have you *met* software
[00:08:30] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 276 seconds)
[00:09:03] <Grinnz> https://xkcd.com/2030/
[00:09:03] <Paperbot> Link title(s): [ xkcd: Voting Software ]
[00:09:05] <mst> MikeGeorge[m]: I am still hugely pleased that matrix exists and every matrix developer I've spoken to has been a lovely person who's working on something I dearly want to be successful but that doesn't mean I'm going to trust it :)
[00:09:47] <mst> Juerd: it's a single process event driven node.js app originally written by somebody who'd never done any of those things beforehand, it's a miracle it works at all
[00:10:00] <Juerd> I see
[00:10:03] <Juerd> Thanks for explaining
[00:10:17] <mst> Juerd: so if one bit of code gets confused, it'll tend to leak RAM or file descriptors until the entire thing dies on its arse
[00:10:46] <mst> (I have seen both those failure modes more than once)
[00:10:53] <MikeGeorge[m]> mst: That's fair.  I take consolation in the fact that I can run my own server, and can communicate with other people running their own servers, even if every major server were to get shut down suddenly.
[00:10:57] <daimon> bitflip
[00:11:05] <Juerd> Would this be a correct summary? [m] exists because of a bug in the bridge, that is avoided if fewer nick collisions happen?
[00:11:57] <daimon> mst, a single application written by a single developer always works, until that developer dies or buggers off :)
[00:12:10] <mst> Juerd: I think I'd go with "[m] exists as insurance against the bridge getting flaky around nick collisions yet again, and nobody really wants to find out if it can be safely turned off"
[00:12:29] <mst> MikeGeorge[m]: absolutely, I fucking love the whole thing
[00:12:53] <mst> MikeGeorge[m]: at some point I'm going to set up a matrix homeserver for irc.perl.org and our own private bridge, so the entire thing is under my control, and it's going to be fucking cool
[00:12:57] <Grinnz> daimon: https://xkcd.com/2347/
[00:12:57] <Paperbot> Link title(s): [ xkcd: Dependency ]
[00:13:16] <Juerd> mst: So it's carco cult that could actually still be important but nobody knows...
[00:13:20] <daimon> Grinnz++ # indeed :)
[00:13:21] <MikeGeorge[m]> If all of these services were written in Perl, I'm sure it would work perfectly. nods
[00:13:37] <Grinnz> MikeGeorge[m]: they'd probably write it in coro and we'd be even more fucked
[00:14:02] <mst> Grinnz: annoyingly, LeoNerd was actually working on one but because he was taking the time to make it stable the nope.js learning project got YOLOed into production before he was ready
[00:14:45] <mst> Juerd: and given how feckless they are when it comes to ops stuff, nobody on this side wants to ask them to try and find out, yes
[00:14:59] <ehuelsmann[m]> mst: I hope they paid the price in additional support hours!
[00:15:00] <mst> Juerd: like I say matrix nearly got kicked off freenode permanently, repeatedly
[00:15:10] <mst> ehuelsmann[m]: eh?
[00:15:16] <Juerd> mst: I'm assuming that's old freenode
[00:15:22] <mst> Juerd: yes, not leenode
[00:15:35] <mst> Juerd: I mean the same ops team running here
[00:15:40] <Juerd> Right
[00:15:42] <Juerd> Just checking :)
[00:15:58] <mst> Juerd: this was back during my last stint as staff
[00:16:34] <ehuelsmann[m]> mst: I hope that their urge to release the cheap-and-failing bridge code into production took a heavy toll on them.
[00:16:38] <mst> I actually had the *nice* people about to just fucking g-line the entire thing and *I* had to be the voice of 'calm and gentle'
[00:17:04] <daimon> if you was the voice of calm and reason, that must have been fairly chaotic :)
[00:17:11] <mst> EXACTLY MY POINT
[00:17:41] <mst> ehuelsmann[m]: lolno, we basically had to black box debug the fucking thing for them
[00:17:55] <daimon> its all a bit of a learning point now though, leenode is dead as a dodo
[00:18:02] <daimon> a good example if nothing else
[00:18:13] <mst> and I'd note that I'm actually keeping to the 50% *less* embarassing things that happened here
[00:18:25] <mst> because I don't believe that talking about the really stupid stuff would help anybody
[00:18:45] <daimon> as a minor aside they also  banned that cloud irc thing ... not  matrix
[00:18:49] <daimon> the one that runs on phones and things
[00:18:50] <mst> daimon: yes
[00:18:52] <Grinnz> ln -sf irc.libera.chat freenode
[00:19:10] <mst> daimon: I meant -old- freenode -nearly- banned matrix repeatedly because they kept fucking up our ircds
[00:19:24] <daimon> oh I thought we was having fun looking at what lee did
[00:19:32] <daimon> but yes old freenode certainly had some problems over time
[00:19:36] <daimon> so did openprojects
[00:19:38] <Grinnz> no, leenode is a whole other level of idiocy
[00:19:51] <Grinnz> i would be surprised if they even know what matrix is
[00:19:54] <mst> leenode banned irccloud because the clown prince got mad at them because they criticised him on twitter
[00:20:15] <mst> I'm fairly sure matrix just went "fuck this" and switched to bridging to here
[00:20:22] <mst> like I say, lovely people
[00:20:27] <Grinnz> after a bit, yeah
[00:20:54] <mst> they bridge to like 12 different chat systems and there's *one* dude who's responsible for dev and maintenance and ops of all of them last I heard
[00:21:04] <daimon> I actually went to https://freenode.net a couple of days ago just to chuckle at the 'HIH Andrew Lee of Joseon' - for those not sure HIH is 'his imperial highness' 
[00:21:04] <Paperbot> Link title(s): [ freenode ]
[00:21:21] <mst> daimon: I mean, the dude *is* definitely high at all times
[00:21:44] <daimon> I know I asked him where he got his cocaine and if he was willing to share, but he would not commit - not very FOSS
[00:22:48] *** Quits: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru) (Ping timeout: 276 seconds)
[00:23:02] <daimon> hmmm even though the openprojects thing was a bit ~~ iffy
[00:23:09] <daimon> maybe lilo had it right
[00:23:32] <daimon> it certainly worked pretty well
[00:23:47] <daimon> in general that is, it certainly worked better than anything else has
[00:25:21] <mst> daimon: heh, I made a comment on cocaine earlier in another channel
[00:25:24] <mst> < mst> my basic problem is cocaine is a short lived high plus feeling like you're god
[00:25:27] <mst> < mst> so for me it's ... a short lived high
[00:25:29] <mst> < mst> I'd rather have speed, it lasts longer and the high's smoother
[00:26:04] <daimon> eh amphetamines are nice but they are nicer when tamed down a little with a benzo
[00:26:23] <xenu> #perl-lowlifes is this way ------>
[00:26:48] <mst> daimon: low dose and a few pints and/or joints
[00:26:54] <daimon> xenu, there is nothing wrong with using narcotics as long as you are responsible
[00:27:10] <mst> daimon: yeah, and I like using narcotics too :D
[00:27:20] <daimon> mst, who does'nt :)
[00:27:44] <daimon> though I do have a massive problem verifying sources
[00:27:59] <daimon> I have a flat rule on quality which makes it a bit tricky (and expensive) at times
[00:28:08] <mst> daimon: that was a joke about 'as long as you are responsible' not applying to me :P
[00:28:45] <daimon> mst, perl developers and responsible are never normally bound :)
[00:30:28] <daimon> I also got quite a new fancy piece of hardware in the house recently, a curved screen; first time ever using one -- not actually sure I like it
[00:30:33] <daimon> nothing really works with it
[00:30:53] <daimon> videos have huge black borders down the side and alsorts though it works really well with vscode
[00:31:14] <daimon> https://iiyama.com/gl_en/products/g-master-gb3466wqsu-b1/
[00:31:17] <Paperbot> Link title(s): [ iiyama - G-Master GB3466WQSU-B1 Immerse yourself in the game with the curved GB3466WQSU Red Eagle... ]
[00:35:04] *** Joins: Trigon1 (~Thunderbi@73.127.1.41)
[00:35:22] *** Quits: Trigon (~Thunderbi@73.127.1.41) (Ping timeout: 240 seconds)
[00:35:22] *** Trigon1 is now known as Trigon
[00:35:35] <MikeGeorge[m]> There is nothing wrong with using Perl as long as you are responsible.
[00:35:45] <mst> :D <3
[00:38:33] <daimon> perlbot responsible is MikeGeorge[m]> There is nothing wrong with using Perl as long as you are responsible.
[00:38:34] <perlbot> daimon: Stored responsible is MikeGeorge[m]> There is nothing wrong with using Perl as long as you are responsible.
[00:40:41] <MikeGeorge[m]> I feel like that's missing something without the comparison to the statement about narcotics.
[00:41:48] <MikeGeorge[m]> "There is nothing wrong with using narcotics as long as you are responsible" =~ s/narcotics/Perl/
[00:42:56] <MikeGeorge[m]> Except you can't actually do substitutions on literals, whoops.
[00:43:03] <mst> MikeGeorge[m]: you can with 'r'
[00:43:17] <mst> eval: "Nothing wrong with narcotics" =~ s/narcotics/Perl/r
[00:43:18] <perlbot> mst: Nothing wrong with Perl
[00:44:11] <daimon> bearing in mind some of the terrible things that have done with perl
[00:44:18] <daimon> I think its fairly accurate
[00:44:27] <daimon> without anything to do with narcotics :)
[00:45:34] <MikeGeorge[m]> Perl doesn't kill people; people kill people.
[00:46:23] <daimon> https://www.youtube.com/watch?v=gQUFYuuKxkI :)
[00:46:23] <Paperbot> YouTube video linked by daimon: Jon Lajoie - I Kill People - published by sanny2412
[00:46:33] <mst> admittedly, DBD::mysql + Rose::DB::Object between them -nearly- killed people
[00:46:38] <mst> but I fixed it before that happened
[00:46:42] *** Quits: subie (~subie@2601:4c0:4080:bc0:7508:7c48:2327:9818) (Ping timeout: 240 seconds)
[00:47:46] <mst> (a combination of two bugs took an NHS cancer lab's sample tracking system down for two days until I figured it out)
[00:47:59] <MikeGeorge[m]> daimon:  https://www.youtube.com/watch?v=fbHH5xZcVvQ
[00:47:59] <Paperbot> YouTube video linked by MikeGeorge[m]: UHF, gun control - published by blaknites
[00:48:23] <daimon> MikeGeorge[m]++ :)
[00:49:45] *** Joins: subie (~subie@2601:4c0:4080:bc0:686c:f7e1:2fe3:d0e1)
[00:50:10] <Grinnz> mst: the state of DBD::mysql on a day to day basis fortunately only rhetorically kills me
[00:53:58] *** Quits: Pixi (~Pixi@user/pixi) (Read error: Connection reset by peer)
[00:54:18] *** Joins: Pixi (~Pixi@user/pixi)
[00:56:17] <LeoNerd> I wonder what's required to do to syntax/perl.vim to make it believe in the concept of non-ASCII Unicode package names, sub names, or variables
[00:58:29] <mst> hrm
[00:58:37] <mst> let's say I have code that does
[00:58:45] <mst> my $thing = foo(sub { ... });
[00:59:11] *** Joins: anthk_ (~anthk_@92.176.105.30)
[00:59:14] <mst> do we reckon B::CV's OUTSIDE will be empty if it isn't a closure?
[00:59:28] <LeoNerd> Ooooh... A fun and exciting question
[01:00:08] <LeoNerd> I'm not sure I ever quite worked out all the rules behind CvOUTSIDE
[01:00:31] <LeoNerd> F:AA has to fiddle with it but beyond "keep it pointing somewhere sensible", I just have to preserve what was originally there. I've not looked into why it has any particular value
[01:01:09] <mst> basically I want to test "is this subref a closure"
[01:01:27] <mst> and, sure, PadWalker::closed_over
[01:01:34] <mst> but if I can do it with B, clearly I should do it with B
[01:02:25] <mst> especially after achieving things like https://github.com/shadowcat-mst/nxcl/blob/master/sketches/vivify
[01:02:25] <Paperbot> Link title(s): [ nxcl/vivify at master · shadowcat-mst/nxcl · GitHub ]
[01:05:07] <LeoNerd> Oh.. there's a flag for that
[01:05:15] <LeoNerd> CvCLONED
[01:05:22] <mst> LeoNerd: oooh
[01:05:51] <LeoNerd> Any actual CV that's a closure will have CvCLONED, which indiciates it's a cloned copy from the protosub, which will have CvCLONE on it. Any -regular- named sub will have neither
[01:06:21] <LeoNerd> Oh except for "reasons" I think I have to set CvCLONED on a suspended CV from an `async sub`, even if the original was named
[01:06:29] <LeoNerd> So that might confuse you
[01:06:35] <mst> that's fine
[01:06:48] <mst> oh, no, shit, fuck, sigh
[01:07:42] <mst> thing is, I care if it's a named sub that closes over stuff too
[01:07:53] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:08:54] <mst> LeoNerd: what I'm looking for here is "if it doesn't reference outside lexicals, I can cache the result of foo()"
[01:09:05] <mst> maybe I can't safely do that at all given globals as well
[01:09:06] <mst> bah
[01:09:08] <mst> fucking perl
[01:09:12] <mst> too many degrees of freedom
[01:11:12] <LeoNerd> Yuh ;)
[01:11:24] <LeoNerd> It's usually "ohgod overloading" that kills such ideas
[01:15:24] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 265 seconds)
[01:16:27] <Grinnz> also objects could have different state on different invocations, sub calls within it could call rand(), etc
[01:16:34] *** Walex_away is now known as Walex
[01:17:01] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[01:18:28] <mst> yeah, it was a nice dream
[01:18:53] *** Joins: DaTa (~DaTa@user/data)
[01:19:10] <pragma-> I prefer my freedom at a comfortable 20C
[01:22:14] <mst> pragma-: my bit of .uk has been going 15C, 15, 15, 15, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15
[01:22:20] <mst> it's messing up my adaptation
[01:23:49] <ether> <-- 31C
[01:24:32] <Grinnz> here in freedom, we measure temperature in degrees freedom
[01:25:02] <MikeGeorge[m]> Uh, what's 15C on the Ramkin scale?
[01:25:24] <mst> ether: it's the "overnight 10C change" thing that's pissing me off
[01:25:29] <Grinnz> Paperbot: wolfram 15C in rankine
[01:25:32] <Paperbot> Grinnz: Input interpretation: convert 15 °C (degrees Celsius) to degrees Rankine || Result: 518.7 °R (degrees Rankine) [ 7 more results ]
[01:25:58] <MikeGeorge[m]> Ah, that makes more sense.
[01:26:06] <MikeGeorge[m]> Also dang, I've had the name wrong.
[01:26:29] <Grinnz> i am pretty good at remembering that one, it's the french one that trips me up
[01:28:44] *** Quits: Trigon (~Thunderbi@73.127.1.41) (Quit: Trigon)
[01:30:31] *** Joins: Trigon (~reuben@73.127.1.41)
[01:37:41] <ehuelsmann[m]> for the unit tests of Workflow, I have a try/catch block which does `try { require Workflow::Persister::RandomId; } catch { ... }`. Jonas asks me to write a test for the catch() block, which should rethrow any caught exceptions after logging the error. The problem is: other tests expect to find a functional Workflow::Persister::RandomId module.
[01:38:07] <mst> ehuelsmann[m]: Test::Without::Module
[01:38:18] <ehuelsmann[m]> :-)
[01:38:20] <ehuelsmann[m]> yay!
[01:39:02] * mst checks, yep, did remember the name right
[01:41:56] *** Parts: anthk_ (~anthk_@92.176.105.30) ()
[01:42:47] *** Quits: Trigon (~reuben@73.127.1.41) (Quit: WeeChat 3.2)
[01:43:12] *** Joins: Trigon (~reuben@73.127.1.41)
[01:47:19] *** Quits: magla (~gelignite@55d46dd2.access.ecotel.net) (Quit: Stay safe!)
[01:58:40] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[02:01:28] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[02:02:03] <simcop2387> oh great, standupmaths has a new video with topological comedy
[02:02:22] <simcop2387> https://www.youtube.com/watch?v=ymF1bp-qrjU
[02:02:22] <Paperbot> YouTube video linked by simcop2387: Why does this balloon have -1 holes? - published by Stand-up Maths
[02:02:27] <ehuelsmann[m]> mst: that did the job nicely!
[02:07:30] <mst> ehuelsmann[m]: \o/
[02:07:52] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 272 seconds)
[02:12:15] * GumbyPAN CPAN Upload: Nasm-X86-20210729 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20210729
[02:14:45] *** Walex is now known as Walex_away
[02:17:28] *** Joins: mout (mout@2a01:7e01::f03c:92ff:fe71:e75a)
[02:20:57] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[02:30:02] <simcop2387> lol the bastard bought the world's supply of toroidal balloons
[02:36:06] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:39:09] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 252 seconds)
[03:08:17] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:11:31] *** Joins: v` (~v@user/ctrl)
[03:11:35] *** Joins: gast0n (~g4570n@user/gast0n)
[03:18:36] *** Joins: casaca (~casaca@user/casaca)
[03:31:24] * GumbyPAN CPAN Upload: Alien-GSL-1.07 by PLICEASE https://metacpan.org/release/PLICEASE/Alien-GSL-1.07
[03:31:24] * GumbyPAN CPAN Upload: Class-Data-Inheritable-0.09 by RSHERER https://metacpan.org/release/RSHERER/Class-Data-Inheritable-0.09
[03:32:11] *** Joins: whynot (~whynot@37.73.103.68)
[03:37:29] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Remote host closed the connection)
[03:39:42] *** Quits: whynot (~whynot@37.73.103.68) (Ping timeout: 272 seconds)
[03:40:09] *** Joins: whynot (~whynot@88.155.4.147)
[03:46:55] *** Quits: casaca (~casaca@user/casaca) (Remote host closed the connection)
[03:47:05] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 250 seconds)
[03:48:19] *** Joins: casaca (~casaca@user/casaca)
[03:51:26] * GumbyPAN CPAN Upload: FCGI-0.81 by ETHER https://metacpan.org/release/ETHER/FCGI-0.81
[03:56:31] *** Quits: casaca (~casaca@user/casaca) (Remote host closed the connection)
[03:57:52] *** Joins: casaca (~casaca@user/casaca)
[04:01:14] *** Quits: casaca (~casaca@user/casaca) (Remote host closed the connection)
[04:21:29] * GumbyPAN CPAN Upload: Test-Harness-3.43_03 by LEONT https://metacpan.org/release/LEONT/Test-Harness-3.43_03
[04:29:10] *** GEttR_ is now known as GEttR
[04:30:06] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:33:57] *** Joins: casaca (~casaca@user/casaca)
[04:48:00] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 276 seconds)
[04:48:59] *** Joins: R2robot (~R2robot@user/r2robot)
[04:51:18] <GEttR> im use'ing a module with a subroutine that croaks on an error. how can i override(?) that sub in the module to make it return an error instead?
[04:55:24] <ology> You sure you don't want to use a try {} catch {} instead? I mean you probably can do something else, but what are you wanting to acieve in the end? :)
[04:55:34] <ology> achieve too
[04:56:35] <GEttR> maybe i do, ha. i'll work on that first
[04:59:29] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[05:00:56] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[05:05:36] <Grinnz> yes, try/catch is the appropriate way to handle that
[05:12:17] *** Joins: P1RATEZ (piratez@user/p1ratez)
[05:16:02] <GEttR> yep. just maybe too drunk to perl. sorted it - thanks ology, Grinnz  :)
[05:18:22] *** Quits: gryphn (~gryphon@191.96.106.193) (Quit: kthxbye)
[05:33:08] *** Quits: omegatron (~some@p54bd5da4.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:34:27] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[05:35:52] <ology> PUI
[05:36:03] <ology> PWI
[05:51:03] *** Quits: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net) (Ping timeout: 276 seconds)
[06:09:48] *** Joins: Su-Shee_ (~Susanne@p4ffc71a5.dip0.t-ipconnect.de)
[06:12:49] *** Joins: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net)
[06:12:56] *** Joins: whynot_ (~whynot@88.155.26.58)
[06:13:07] *** Quits: whynot (~whynot@88.155.4.147) (Killed (NickServ (GHOST command used by whynot_!~whynot@88.155.26.58)))
[06:13:08] *** Quits: Su-Shee (~Susanne@p4ff49250.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[06:13:17] *** whynot_ is now known as whynot
[06:16:59] *** Joins: akaWolf (~akaWolf@akawolf.org)
[06:19:01] *** Joins: PavelB (~PavelB@50.125.179.101)
[06:19:25] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[06:20:48] *** Quits: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net) (Remote host closed the connection)
[06:21:01] *** Joins: zacts (~zacts@user/zacts)
[06:22:53] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 252 seconds)
[06:25:23] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[06:26:09] *** Joins: zacts (~zacts@user/zacts)
[06:26:24] *** Joins: R2robot (~R2robot@user/r2robot)
[06:29:08] *** Joins: gggp (~gggp@60.10.23.170)
[06:29:44] *** Joins: gggp_ (~gggp@60.10.23.170)
[06:34:00] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[06:36:13] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[06:36:44] <PavelB> So I've just read Grinnz's perl 7 faq, but I'm still not sure I understand - the faq just lists a bunch of things that aren't changing, so what significant thing is happening to warrant a new major version number?
[06:37:15] <ether> at the moment, nothing, because there is no concrete plan for the version number to change
[06:37:25] <ether> it's all "if it did, what could it contain?" hypotheticals
[06:37:31] <Grinnz> perl still being developed is significant as far as people outside the perl bubble are concerned
[06:37:39] <Grinnz> otherwise, we don't know, that's why it's not out yet
[06:37:57] <xenu> i think perl 7 is more of a checklist than a major release. "once we have those (currently unspecified) things, it's perl 7"
[06:38:20] <xenu> and those things will be implemented in normal yearly releases
[06:39:29] *** Joins: gggp__ (~gggp@60.10.23.170)
[06:40:26] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 256 seconds)
[06:40:58] <PavelB> well, I'm glad perl is at least getting new features sometimes
[06:41:06] <xenu> anyway, there's no secret perl 7 branch where people are working on new features, everything that is currently developed will land in 5.36
[06:41:15] <PavelB> that new try/catch thing looks neato
[06:42:26] <xenu> 5.36 will almost certainly get defer {} and for my($var1, $var2) { } syntax
[06:42:48] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[06:42:49] <xenu> er, for my($var1, $var2) (@array) { }
[06:43:07] <PavelB> Is that for going through the array with an index?
[06:43:23] <xenu> no, it's for two values at a time
[06:43:25] <leont> Also, «use 5.36;» will enable warnings, and probably utf8 too
[06:43:30] <xenu> actually, any numer, it isn't limited to just two
[06:43:51] <xenu> it's especially handy for hashes: for my($key, $value) (%hash) { }
[06:44:06] <PavelB> Ah, right
[06:45:36] <PavelB> I think having an index would be neat but I suppose I could do something like `sub with_index { my $i = 0; map { $_, $i++ } @_ }` and it'd still work
[06:45:51] <PavelB> no guesses about what defer might be for
[06:46:14] <xenu> PavelB: defer is described here: https://github.com/Perl/RFCs/blob/master/rfcs/rfc0004.md
[06:46:15] <Paperbot> Link title(s): [ RFCs/rfc0004.md at master · Perl/RFCs · GitHub ]
[06:46:46] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[06:46:48] <xenu> btw, as you can see, we have an rfc process, which is wonderful
[06:46:59] <PavelB> it is
[06:47:02] <PavelB> I love it already
[06:49:16] <PavelB> I noticed try/catch is missing finally so I hope defer runs even after die
[06:50:22] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[06:53:19] <Grinnz> PavelB: rough plan is that if defer works well the same mechanism can be trivially added as a finally block for try
[06:53:48] <Grinnz> but yes, defer will run on scope exit even when that happens via an exception
[06:55:44] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:55:44] *** FinnElija is now known as Guest8580
[06:55:44] *** Quits: Guest8580 (~finn_elij@user/finn-elija/x-0085643) (Killed (copper.libera.chat (Nickname regained by services)))
[06:55:44] *** finn_elija is now known as FinnElija
[06:59:12] <PavelB> Hopefully a C# situation is avoided where finally can be skipped on program exit :V
[06:59:19] <PavelB> discovering that one was a fun debugging experience for me
[07:00:24] <Grinnz> taht's a good question actually... i *think* scopes are unwound during a normal exit() but i'm not sure
[07:00:47] <Grinnz> i think they have to be
[07:00:59] <Grinnz> (POSIX::_exit of course skips all of that)
[07:01:07] * leont thinks they're not, but isn't sure
[07:01:34] <Grinnz> well i know lexicals will get destroyed, i'm just not sure if whatever does that would also fire defers
[07:02:01] <leont> Variables are destroyed via a different mechanism
[07:02:22] <Grinnz> sounds like a good test case for defer
[07:02:50] <xenu> that reminds me, perl's defer doesn't have this problem because it forbids return(): https://jakearchibald.com/2021/last-return-wins/
[07:02:51] <Paperbot> Link title(s): [ In JS functions, the 'last' return wins - JakeArchibald.com ]
[07:03:21] <PavelB> It's not even consistent in C#. In *general* finally will not run after an uncaught exceptions, but then if you have multiple threads and one has a finally block and another throws an uncaught exception, you get random nonsense that I'm pretty sure is platform-dependent
[07:03:58] <Grinnz> xenu: yeah someone said something about finally messing with return values and i was like please no
[07:04:45] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[07:04:48] <PavelB> I have no idea what happens if your perl has threads and an exception happens in general and knowing how awful that tends to be I'm not sure I want to
[07:06:00] <xenu> threads in perl are almost like separate processes. when thread dies it just ends
[07:06:09] <xenu> the rest of the program continues to run
[07:06:22] <Grinnz> threads are disjoined perl interpreters basically (except when they aren't, and that's why threads.pm is horrible)
[07:06:59] <PavelB> is there a concept of a 'main' thread?
[07:07:22] <PavelB> Like in C# if Main returns while other threads exits the whole program still exits
[07:08:09] <xenu> yes, the first thread is special
[07:09:15] <Grinnz> exit() still exits the process, regardless of what thread it's in
[07:10:50] <PavelB> more mysteries for defer
[07:11:00] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[07:11:15] <Grinnz> defer isn't written by schmorp, so i'm sure any threading mysteries will eventually be dealt with
[07:13:56] <xenu> i've never seen LeoNerd and MLEHMANN in the same room together
[07:14:10] <ether> multi-variable foreach excites me more TBH, because we already had try/catch from cpan modules
[07:14:49] * leont doesn't think many people outside of the German Perl community have seen lehmann at all
[07:16:00] <xenu> well probably some gcc people too
[07:16:06] <xenu> he's a member of their steering committee
[07:16:09] <xenu> not many people know that
[07:16:24] <leont> I do know, but do they meet IRL?
[07:16:30] <xenu> who knows
[07:16:58] *** Joins: gggp_ (~gggp@60.10.194.46)
[07:18:12] <xenu> speaking of committees, i really appreciate that PSC publishes their minutes
[07:18:47] <xenu> transparency is good
[07:19:07] <PavelB> Who are PSC?
[07:19:12] <xenu> perl steering council
[07:19:40] <xenu> currently it consists of rjbs, neilb___ and LeoNerd 
[07:20:06] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[07:21:03] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[07:21:15] <xenu> https://github.com/Perl/perl5/wiki/Perl-Steering-Council
[07:21:15] <Paperbot> Link title(s): [ Perl Steering Council · Perl/perl5 Wiki · GitHub ]
[07:22:33] <PavelB> So I've just read this perlgov thing and I take it there's been some changes?
[07:22:40] <PavelB> I don't see anything about lwall
[07:23:23] <mst> PavelB: larry's left some time ago
[07:23:23] <Grinnz> larry hasn't been involved in decades at this point
[07:23:36] <mst> PavelB: don't see why we'd waste his time by including him
[07:24:01] <PavelB> last time I was around I'm pretty sure he was still BDFL
[07:24:06] <PavelB> might be misremembering though
[07:24:08] <xenu> only on paper
[07:24:23] <Grinnz> in theory, rule 1 still exists and we'd probably care if he invoked it
[07:24:26] <Juerd> He's bdfl on naming issues on things called Perl or Raku...
[07:24:28] <Grinnz> but he won't
[07:24:42] <Grinnz> it's abundantly clear
[07:24:54] <mst> PavelB: he's not been involved in perl5 development since before 5.10 was released
[07:24:56] <xenu> before PSC, perl was ruled by the pumpking
[07:25:00] <Grinnz> so, we have to find some way to make decisions otherwise, and thus perlgov
[07:25:03] <mst> PavelB: so I've no idea what you mean
[07:25:10] <xenu> sawyer x was the last pumpking
[07:26:36] <shlomif> PavelB: hi
[07:26:49] <PavelB> hello
[07:27:11] <pragma-> I keep mentally seeing an image of a regal crowned pumpkin when I read "pumpking"
[07:28:22] <genio> I've really got to find more time to dedicate to Strawberry builds
[07:28:37] <shlomif> pumpkins: https://www.youtube.com/watch?v=2Qj8PhxSnhg
[07:28:37] <Paperbot> YouTube video linked by shlomif: Cårven Der Pümpkîn | Recipes with The Swedish Chef | The Muppets - published by The Muppets
[07:30:35] <shlomif> genio: i presume you're busy at work?
[07:30:49] <genio> both work and life lately
[07:31:09] <xenu> excuses!
[07:32:32] <shlomif> genio: children?
[07:32:58] <genio> xenu: I'm full of 'em!
[07:33:20] <genio> shlomif: nah, no kids. just family and wife's family stuff
[07:34:29] * PavelB laughs in gen z
[07:36:34] <shlomif> genio: ah
[07:39:16] <xenu> that reminds me of an old comment on some polish website that went viral.
[07:39:19] <xenu> "I think Ronaldo's problems started when his son was born. It's clear that Cristiano is struggling to reconcile his roles of a single father and Real Madrid player. He has too much on his plate. I know that might be controversial, but maybe Ronaldo should give up his son for adoption and cut his ties with him. He must to decide what is more important - Real Madrid or his family. I'm sure most of us would 
[07:39:25] <xenu> sacrifice our close ones for the club. If Cristiano can't do that, then we have to part our ways." 
[07:39:57] <Grinnz> what the fuck is real madrid
[07:40:05] <PavelB> i think it's a football team
[07:41:08] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 255 seconds)
[07:42:36] *** Quits: whynot (~whynot@88.155.26.58) (Quit: leaving)
[07:44:38] <ether> yes
[07:45:10] <ether> even I know about Ronaldo and Ronaldiño
[07:45:32] *** Quits: Martchus_ (~martchus@2a01:c23:c5e0:c000:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[07:45:51] *** Joins: Martchus (~martchus@2a01:c22:7a61:7000:d250:99ff:fe49:3cce)
[07:47:11] <genio> inho   in Portuguese
[07:55:13] <xenu> i sometimes forget that this channel is full of people from the US and the north US
[07:55:32] <Grinnz> i'm also from "what the fuck are sports"
[07:55:33] <xenu> especially when it's 5am in europe
[07:55:42] <shlomif> xenu: canada?
[07:57:03] <xenu> it isn't a real country
[07:57:22] <ether> xenu: not funny
[07:57:43] <ether> I could call Poland west russia
[07:59:57] <shlomif> .fr vs. .en: https://www.youtube.com/watch?v=DGXx56WqqJw
[07:59:57] <Paperbot> YouTube video linked by shlomif: The Monty Python and Holy Grail, The English meet the French castle - French subtitles - published by dyhetue
[08:00:24] <xenu> more typical ways to call poland not a real country are "vistula land" or "polin"
[08:01:23] <ether> feel free to say whatever you like about your own country
[08:01:53] * GumbyPAN CPAN Upload: FCGI-0.82 by ETHER https://metacpan.org/release/ETHER/FCGI-0.82
[08:03:41] <Adura> The worst thing you could do is forget Poland.
[08:06:53] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[08:07:04] <shlomif> my country: https://www.shlomifish.org/meta/FAQ/israel.xhtml
[08:07:04] <Paperbot> Link title(s): [ Shlomi Fish’s FAQ - Questions Related to Me and to Israel ]
[08:09:36] <shlomif> "capitalism is evil!!! marxism FTW" ;)
[08:09:45] <tirnanog> Grinnz: hello. I decided to challenge myself and attempt to write a replacement for IPC::Run3. I think my efforts might be going somewhere.
[08:11:11] <tirnanog> Grinnz: it's shaping up with a similar API and feature set, with about 5% of the code. it uses pipes (never temp files) and seems to be a smidgen faster for common use cases.
[08:11:24] <shlomif> tirnanog: can you share code?
[08:11:42] <tirnanog> shlomif: ok.
[08:12:08] <pragma-> IPC::Run seems featureful
[08:12:10] <tirnanog> shlomif: not yet modularised and still adding some IPC::System::Simple style error handling (signals in particular), which I will add later.
[08:12:41] <xenu> they are plotting against us https://nibblestew.blogspot.com/2021/07/how-much-effort-would-it-take-to.html
[08:12:42] <Paperbot> Link title(s): [ Nibble Stew: How much effort would it take to convert OpenSSL's Perl source code generators to Py... ]
[08:13:19] <pragma-> tirnanog: have you looked at IPC::Run (not IPC::Run3)
[08:13:27] <tirnanog> pragma-: I have, yes.
[08:13:35] <pragma-> too heavy?
[08:14:15] <tirnanog> pragma-: yeah. nothing quite does what I want. I have a modest superset of Run3 features planned. I got do fed up with everything, but I'm no hotshot CPAN maintainer or anything. figured I'd try to scratch the itch instead of moping over it.
[08:14:58] <tirnanog> shlomif: https://termbin.com/xcbq7. as I say, still not finished but getting there.
[08:15:13] <Grinnz> i suspect using pipes exclusively will have some portability and consistency challenges, but sounds like a good thing to explore
[08:15:55] <xenu> argh that reminds me that windows system/exec/etc is still broken
[08:16:05] <shlomif> tirnanog: i see you're using hard tabs
[08:16:09] <Grinnz> the common failure mode is that you can't read only one of STDOUT or STDERR until EOF, and you can't assume you can wait for the process to end to read from them
[08:16:13] <xenu> i guess that deserves an rfc because fixing that isn't backwards compatible
[08:17:00] <shlomif> tirnanog: thanks for sharing though
[08:17:14] <Grinnz> you have to read from both of them consistency to avoid running out of pipe buffer
[08:17:18] <Grinnz> consistently*
[08:17:26] <tirnanog> Grinnz: I believe I am doing so.
[08:17:32] <Grinnz> thus directing them at files is much simpler
[08:19:11] <Grinnz> my preferred ideal way to manage this is IO::Async::Process
[08:19:20] <Grinnz> which uses nonblocking pipes and an event loop
[08:20:08] <Grinnz> so there's no waiting, just events when something is readable
[08:20:31] <tirnanog> interesting, though it's over my head at this point. one of the goals was also to write something that I could understand. still, I'll make a note of this.
[08:20:48] <Grinnz> you could do a similar thing at a lower level with a select loop
[08:20:58] <Grinnz> but i wouldn't other than to learn
[08:21:17] <tirnanog> that's what I'm doing. I'm already liking it more than IPC::Run3 proper.
[08:21:35] <Grinnz> that's good then
[08:22:02] <tirnanog> that "side effect" is gone, and everything seems to work so far.
[08:22:14] <Grinnz> just at that point... you usually might as well let a real event loop handle it, so other things can happen too
[08:22:25] <Grinnz> and so better reactors than select can be used
[08:23:03] <tirnanog> I'll make a point of looking into it (eventually).
[08:23:09] <tirnanog> sounds interesting.
[08:31:01] *** Quits: Nahra` (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 258 seconds)
[08:31:35] <Grinnz> i think netsplit.de stopped taking freenode stats https://netsplit.de/networks/statistics.php?net=freenode
[08:31:36] <Paperbot> Link title(s): [ freenode IRC Network ]
[08:31:52] <Grinnz> oh "From July 2021 no more connections to freenode could be established. The network was accordingly classified as historic."
[08:32:00] <Grinnz> pffft
[08:33:05] *** Quits: judabuda (kowbunga@user/judabuda) (Remote host closed the connection)
[08:34:23] <PavelB> what was the plan taking control of freenode anyway
[08:34:28] <Grinnz> "plan"
[08:34:29] <PavelB> it didn't exactly make money
[08:34:53] <Juerd> With libera being about half the size of the original freenode in terms of number of simultaneous users, I wonder what happened to the other half.
[08:35:10] <Grinnz> as far as anyone can determine, the entirety of the plan is basically "take over the name and remake efnet from 1990"
[08:35:24] <Grinnz> "for fun"
[08:36:25] <PavelB> Juerd: I suspect the other half is bots and forgotten bouncers
[08:37:06] <PavelB> Like everyone with an irccloud account
[08:37:07] <Juerd> Plausible, but it's a huge number...
[08:37:28] <Juerd> Like, as many as the current largest irc network... :P
[08:37:51] <PavelB> of the 409 people here in #perl, how many people actually ever say anything and aren't just permanent lurkers?
[08:38:16] <Trigon> i'm a permanent lurker
[08:38:18] <Grinnz> well, at least we know all of them have touched irc within the past few months
[08:38:38] <Juerd> I'm guessing #perl on old freenode was probably larger, but I have no idea.
[08:38:49] <Grinnz> it was around 600 usually
[08:39:49] <PavelB> #nethack had even more and barely a handful of non-bot messages daily
[08:39:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:42:38] <ether> fun fact - my first regular irc channel was #nethack
[08:42:40] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[08:42:55] <PavelB> same
[08:43:01] <ether> I played under the name Yui
[08:43:12] <PavelB> quickly learned the actual active nethack discussion is in #hardfought
[08:52:42] *** Quits: PavelB (~PavelB@50.125.179.101) (Quit: Client closed)
[08:53:28] *** Joins: PavelB (~PavelB@50.125.179.101)
[08:56:30] *** Joins: gggp__ (~gggp@111.63.14.121)
[08:57:11] <tirnanog> pragma-: all I really want beyond Run3 is error-handling behaviour on a par with IPC::System::Simple (because checking $? gets old fast) and the ability to accept logging objects for stdout and stderr (which should only require a small modification to the "consumer" generator).
[08:57:13] <shlomif> there was also netqmail, but djb's copyright policy killed qmail anyway
[08:57:33] <shlomif> perlbot: qmail
[08:57:33] <perlbot> shlomif: No factoid found. Did you mean one of these: [email] [qemu] [quine] [camel] [final] [ianal] [pbml] [sgml] [toml] [uml]
[08:57:51] <shlomif> perlbot: sgml
[08:57:52] <perlbot> shlomif: don't be a pedant. see also html
[08:58:04] <shlomif> perlbot: toml
[08:58:04] <perlbot> shlomif: Tom's Obvious Minimal Language.  https://github.com/toml-lang/toml and also https://metacpan.org/pod/TOML
[08:58:55] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 265 seconds)
[08:58:57] <Grinnz> tirnanog: i'd just pass subroutines that call into the logger appropriately to keep from overspecifying what it needs to do with passed objects
[08:59:07] <shlomif> https://metacpan.org/pod/TOML - GPLv2 :(
[08:59:07] <Paperbot> Link title(s): [ TOML - Parser for Tom's Obvious, Minimal Language. - metacpan.org ]
[08:59:53] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[09:00:40] <shlomif> "Probably the worst FOSS licence in the world."
[09:01:00] <PavelB> what's wrong with it
[09:04:56] <tirnanog> Grinnz: well, I was also considering something like LOG_ANY (as a constant), then using Log::Any. my applications frequently also want for exceptions to be logged too and it becomes tiresome to handle it caller-side. I'll mull it over.
[09:05:01] *** Quits: jsaito (~jsaito@user/jsaito) (Remote host closed the connection)
[09:05:19] <Grinnz> any direct tie to a logger module (even Log::Any) seems like a mistake
[09:05:53] <tirnanog> it would save me a lot of effort in the kind of applications that I write.
[09:06:16] <Grinnz> sure, but for a more general purpose module there's other ways to save that effort
[09:06:19] <tirnanog> keeping in mind that it's going to acquire vigorous ISS style exception throwing behaviour.
[09:06:49] <Grinnz> anyway you can write what you want, thats just my thought
[09:08:12] <shlomif> PavelB: 1. it is strong copyleft 2. it is incompatible with many other licences incl gpl3 and agpl3: https://www.shlomifish.org/humour/bits/New-versions-of-the-GPL/ [IANAL/etc.]
[09:08:12] <Paperbot> Link title(s): [ The Free Software Foundation (FSF) Announces New Versions of the GPL - Shlomi Fish’s Homesite ]
[09:09:42] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:16:42] <tirnanog> Grinnz: I think you're probably right about just passing in a sub. but the try/catch/log/rethrow business is where it becomes a problem for me (I need that often). that's where Log::Any presents some apparent value. I'll mull it over. thanks for your input.
[09:21:47] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:305b:fcd:6dfd:6f83:7b96) (Ping timeout: 245 seconds)
[09:28:36] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[09:55:25] *** gggp__ is now known as gggp
[09:56:06] *** Quits: P1RATEZ (piratez@user/p1ratez) (Remote host closed the connection)
[10:08:46] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 258 seconds)
[10:12:21] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 276 seconds)
[10:16:40] *** Joins: gggp_ (~gggp@60.10.23.170)
[10:19:54] *** Quits: gggp (~gggp@111.63.14.121) (Ping timeout: 272 seconds)
[10:20:07] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[10:22:25] *** Joins: gggp__ (~gggp@60.10.23.170)
[10:22:58] *** Quits: gggp__ (~gggp@60.10.23.170) (Remote host closed the connection)
[10:23:05] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:25:58] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[10:26:03] *** Joins: gggp (~gggp@60.10.23.170)
[10:31:56] *** Joins: Guest9 (~Guest9@43.241.144.40)
[10:37:08] * GumbyPAN CPAN Upload: Polycom-Contact-Directory-0.06 by ZBLAIR https://metacpan.org/release/ZBLAIR/Polycom-Contact-Directory-0.06
[10:39:39] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 276 seconds)
[10:42:53] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 258 seconds)
[10:48:41] *** Joins: gggp_ (~gggp@60.10.194.46)
[10:49:58] *** Quits: gggp (~gggp@60.10.23.170) (Killed (NickServ (GHOST command used by gggp_!~gggp@60.10.194.46)))
[10:50:00] *** gggp_ is now known as gggp
[10:51:14] *** Joins: WinterStar (~IceLight@user/icelight)
[10:55:15] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 276 seconds)
[10:59:43] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[11:07:39] *** Quits: justache (~justache@user/justache) (Remote host closed the connection)
[11:07:57] *** Joins: kensanata (~user@user/kensanata)
[11:08:25] *** Joins: justache (~justache@user/justache)
[11:09:08] *** Joins: thunder (~thunder@user/thunder)
[11:16:07] *** Joins: brtastic (~bartosz@185.24.91.138)
[11:19:41] *** Joins: gggp_ (~gggp@123.113.184.133)
[11:21:50] *** Joins: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094)
[11:22:28] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[11:25:28] *** Quits: Guest9 (~Guest9@43.241.144.40) (Ping timeout: 256 seconds)
[11:30:51] *** Joins: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi)
[11:36:48] *** Joins: judabuda (kowbunga@kowbunga.thunderirc.net)
[11:38:20] *** gggp_ is now known as gggp
[11:46:34] *** Joins: horsepatat (~horsepata@212.3.197.118)
[12:01:18] *** Quits: DaTa (~DaTa@user/data) (Ping timeout: 272 seconds)
[12:01:44] <japh> I'm aware of Inline::Python. I would like to do it the other way around. Is this possible?
[12:07:12] <lopid> python
[12:08:11] <Adura> You want Inline::Perl?
[12:08:11] *** Joins: gggp_ (~gggp@60.10.23.170)
[12:09:55] *** Joins: deadmarshal (~deadmarsh@95.38.118.190)
[12:11:26] *** Quits: gggp (~gggp@123.113.184.133) (Ping timeout: 272 seconds)
[12:11:35] <japh> I would want to write perl code (and use modules etc) in python code
[12:16:19] * GumbyPAN CPAN Upload: WWW-Form-1.21 by SHLOMIF https://metacpan.org/release/SHLOMIF/WWW-Form-1.21
[12:16:51] <ology> I think asking if you can run perl from within python is more of a #python question. But I also think it's about subprocess.Popen() maybe.
[12:17:27] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[12:17:38] <shlomif> japh: perlmodule
[12:17:42] <japh> yeah, just figured I'd be strangled over in #python :)
[12:18:26] <ology> possibly
[12:18:27] <japh> shlomif, yeah but to my understanding, it only works for python 2.old
[12:19:11] <shlomif> japh: https://metacpan.org/dist/pyperl
[12:19:12] <Paperbot> Link title(s): [ pyperl-1.0.2 - stub module for pleasing PAUSE - metacpan.org ]
[12:19:34] <shlomif> japh: i adopted it
[12:20:26] <japh> oh, does it work with python 3?
[12:20:55] <shlomif> japh: https://metacpan.org/release/SHLOMIF/pyperl-1.0.2/source/setup.py - seems like it
[12:20:55] <Paperbot> Link title(s): [ setup.py - metacpan.org ]
[12:21:06] <japh> cool, I'll give it a try
[12:23:29] <japh> (C) 2000-2001 ActiveState.
[12:23:30] <japh> heh
[12:26:10] <shlomif> japh: you're welcome 
[12:27:34] <japh> cool, it works
[12:30:23] *** Joins: deadmarshal_ (~deadmarsh@95.38.228.142)
[12:32:12] <shlomif> japh: great! https://biblehub.com/parallel/1_kings/20-11.htm
[12:32:12] <Paperbot> Link title(s): [ 1 Kings 20:11 Parallel: And the king of Israel answered and said, Tell him, Let not him that gird... ]
[12:32:20] *** Quits: deadmarshal (~deadmarsh@95.38.118.190) (Ping timeout: 272 seconds)
[12:33:31] <shlomif> it sounds better in the original klingon
[12:35:12] <japh> shlomif, how would I go about passing a variable _from_ python into my perl code? like so: https://pastebin.com/erxbXfFz
[12:35:13] <Paperbot> Link title(s): [ import perlfile = perl.eval("""    use File::Basename;    use File::LsCo - Pastebin.com ]
[12:35:13] <Repaster> Repasted text from japh: http://perl.bot/p/vqc8nc
[12:38:11] *** Joins: gggp__ (~gggp@60.10.194.46)
[12:40:00] <japh> reading all the tests but can't figure it out
[12:41:20] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[12:42:34] *** Joins: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru)
[12:45:32] <shlomif> japh: try omitting the "return "
[12:46:49] <shlomif> japh: and see https://github.com/shlomif/pyperl/blob/master/perlmodule.pod
[12:46:50] <Paperbot> Link title(s): [ pyperl/perlmodule.pod at master · shlomif/pyperl · GitHub ]
[12:51:54] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 240 seconds)
[12:56:45] *** eseyman_ is now known as eseyman
[13:15:27] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 258 seconds)
[13:16:40] *** Quits: deadmarshal_ (~deadmarsh@95.38.228.142) (Ping timeout: 272 seconds)
[13:19:28] <japh> shlomif, thank you, that docu cleared things up a bit :) 
[13:19:49] <shlomif> japh: you're welcome 
[13:21:00] *** gggp__ is now known as gggp
[13:22:11] <japh> shlomif, https://github.com/trapd00r/perlinpython3/blob/master/perl-sub-as-python-function.py
[13:22:12] <Paperbot> Link title(s): [ perlinpython3/perl-sub-as-python-function.py at master · trapd00r/perlinpython3 · GitHub ]
[13:23:29] <japh> the reason why I asked in the first place is because I've started using and loving beets (https://beets.readthedocs.io/) and felt the need to extend it. I've written a few basic plugins but my python is still not very good, and using the power of perl will at the very least help me create proof of concepts faster
[13:23:29] <Paperbot> Link title(s): [ beets: the music geek’s media organizer — beets 1.4.9 documentation <https://beets.readthedocs.io/en/stable/> ]
[13:23:59] <shlomif> japh: nice example!
[13:24:42] *** Joins: gggp_ (~gggp@111.63.14.121)
[13:25:24] <PavelB> don't miss a perfect opportunity to learn python! it's a pretty great language too
[13:26:03] <shlomif> japh: i recall reading the python standard tutorial
[13:26:04] <japh> yeah, I like it a lot better than what I first thought. Some things are overly complicated though
[13:26:21] <japh> I like my regexes as first class citizens, for one
[13:26:48] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[13:26:56] <shlomif> PavelB: "It’s kinda, sort-of… pretty much… quite… awesome I tell you - awesome! Got it? It’s kinda awesome!"
[13:28:01] <PavelB> japh: While it doesn't have first class regex, it has a pretty powerful list manipulation toolkit, and strings act like lists in python
[13:28:08] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[13:28:09] <japh> yeah, that's nice
[13:28:58] *** Quits: gggp_ (~gggp@111.63.14.121) (Ping timeout: 240 seconds)
[13:29:28] <PavelB> 95% of perl regexes are doing something really simple that many other languages have a built-in function for, rather than any kind of complex parsing
[13:30:40] <shlomif> PavelB: "64.8% of statistics are made up on the spot"
[13:30:54] <PavelB> for sure
[13:31:40] <ehuelsmann[m]> PavelB: that's why it's good that regexes are compiled only once by Perl, so they can be the equivalent of that function in the other language.
[13:31:50] <japh> pavelb, didn't befriend the different ways to titlecase strings in python though... str.capwords() and str.title() was broken in different ways
[13:31:59] <ehuelsmann[m]> (but with nicer syntax)
[13:32:13] <shlomif> PavelB: and the concise perl regex syntax makes them shorter
[13:32:47] <PavelB> I definitely prefer perl regexes but I'm just saying I don't tend to miss them very often in Python
[13:34:31] <horsepatat> :eval my $major = ( "6.123" =~ /^(\d)/ ); say $major || 'none';
[13:34:38] <horsepatat> can I do it in single line somehow?
[13:34:56] <horsepatat> :eval say 31337
[13:35:00] * horsepatat taps mic
[13:35:02] <PavelB> eval:
[13:35:04] <PavelB> not :eval
[13:35:04] <horsepatat> oh
[13:35:07] <PavelB> I htink
[13:35:09] <horsepatat> eval: my $major = ( "6.123" =~ /^(\d)/ ); say $major || 'none';
[13:35:11] <japh> perlbot, eval 42
[13:35:11] <perlbot> horsepatat: 1 
[13:35:13] <perlbot> japh: 42
[13:36:43] <PavelB> eval: say (my $major = ("6.123" =~ /^(\d)/) || 'none')
[13:36:45] <perlbot> PavelB: 1 
[13:36:53] <horsepatat> eval: my $major = $1 if "6.123" =~ /^(\d)/; say $major || 'none';
[13:36:54] <perlbot> horsepatat: 6 
[13:39:37] <PavelB> eval: say (my $major = "6.123" =~ /^(\d)/ ? $1 : 'none');
[13:39:39] <perlbot> PavelB: 6 
[13:40:06] *** Quits: Trigon (~reuben@73.127.1.41) (Ping timeout: 272 seconds)
[13:40:57] <horsepatat> ah, $1 is the key there
[13:42:02] <PavelB> I always forget what all the results of a regex match are
[13:42:16] <PavelB> eval: "6.123" =~ /^(\d)/g
[13:42:18] <perlbot> PavelB: 1
[13:42:47] <PavelB> eval: () = "6.123" =~ /^(\d)/g
[13:42:48] <perlbot> PavelB: 1
[13:43:26] <PavelB> eval: "6.123" =~ /^\d/g
[13:43:28] <perlbot> PavelB: 1
[13:43:33] <PavelB> eval: "6.123" =~ /^\d/
[13:43:34] <perlbot> PavelB: 1
[13:43:50] <PavelB> I *swear* there was a way to get the match to return what it matched somehow
[13:44:36] <horsepatat> eval: @res = "6.123" =~ /^(\d)/; @res
[13:44:37] <perlbot> horsepatat: 1
[13:44:45] <horsepatat> eval: @res = "6.123" =~ /^(\d)/g; @res
[13:44:46] <perlbot> horsepatat: 1
[13:44:51] <horsepatat> hm, I swear that used to work
[13:45:51] <PavelB> eval: @res = "6.123" =~ /^(\d)/g; \@res
[13:45:52] <perlbot> PavelB: [6]
[13:45:58] <PavelB> THERE IT IS
[13:46:15] <PavelB> I forgot perlbot is bad at printing lists
[13:46:18] <horsepatat> it returns all groups when in list context?
[13:46:38] <japh> perlbot, eval @res = "6.123" =~ /(\d)/g; [@res]
[13:46:39] <perlbot> japh: [6,1,2,3]
[13:47:09] <horsepatat> so, shift first match then
[13:47:43] *** ugjka is now known as isnessness
[13:47:52] *** isnessness is now known as ugjka
[13:48:32] <PavelB> horsepatat: remind us again what the objective here is?
[13:49:57] <horsepatat> to have first digits in scalar var $major
[13:50:34] *** Quits: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094) (Quit: WeeChat 3.2)
[13:50:49] *** Joins: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094)
[13:51:11] <PavelB> eval: my $major = substr "6.123", 0, 1; $major
[13:51:12] <perlbot> PavelB: 6
[13:51:40] <PavelB> :]
[13:53:27] <horsepatat> yea,  that was literally my first code
[13:53:42] <horsepatat> with \d regex I can do int comparisons
[13:54:00] <horsepatat> perl will cast it to num and compare, with substr I will compare blindly to something non digit there, possibly
[13:54:08] <horsepatat> oh well
[13:55:43] <PavelB> eval: use Scalar::Util qw(looks_like_number); my $major = looks_like_number "6.123" ? substr "6.123", 0, 1 : "not a number"; $major
[13:55:45] <perlbot> PavelB: 6
[13:55:59] <PavelB> eval: use Scalar::Util qw(looks_like_number); my $major = looks_like_number "6.foo" ? substr "6.foo", 0, 1 : "not a number"; $major
[13:56:00] <perlbot> PavelB: not a number
[13:56:24] <PavelB> You can use looks_like_number to check if the entire thing is a valid number, not just the first digit, if you want
[13:58:23] <LeoNerd> Don't forget that "looks like number" only answers the question of whether *perl* thinks something a number
[13:58:45] <LeoNerd> eval: use Scalar::Util 'looks_like_number'; print "NUMBER" if looks_like_number( "+15E5" )
[13:58:46] <perlbot> LeoNerd: NUMBER
[13:58:58] <LeoNerd> That probably doesn't fit your more restricted pattern
[13:59:06] <PavelB> eval: +15E5
[13:59:07] <perlbot> PavelB: 1500000
[13:59:11] <LeoNerd> If you care about specific patterns of specific characteers, that is what regexps are for
[13:59:25] <PavelB> TIL scientific notation exists
[14:00:26] <horsepatat> for my use case simple [0-9] will do, no need for anything fancy
[14:00:39] <horsepatat> there is infinity and whatnot perl thinks is an ok number
[14:02:06] <PavelB> eval: "foo" + 5
[14:02:07] <perlbot> PavelB: 5
[14:02:35] <PavelB> clearly foo is a number too :P
[14:02:49] <horsepatat> this bot has no warnings?
[14:03:02] <PavelB> sweval: "foo" + 5
[14:03:03] <perlbot> PavelB: Argument "foo" isn't numeric in addition (+) at (IRC) line 1. 5
[14:03:12] <horsepatat> ye 
[14:03:22] <horsepatat> I am "new" schoold perl coder, warnings && strict on by default
[14:03:45] <horsepatat> always make sure no single warning will slip by
[14:03:51] <horsepatat> dont want my users to know they are runnnig perl :D
[14:04:05] <PavelB> eval: __FILE__
[14:04:06] <perlbot> PavelB: (IRC)
[14:05:11] *** Joins: nirnam (~nirnam@1.46.144.168)
[14:05:13] *** Quits: nirnam (~nirnam@1.46.144.168) (Client Quit)
[14:05:17] <PavelB> perlbot actually a bunch of various evals in it too
[14:05:17] <perlbot> PavelB: No factoid found. Did you mean one of these: [ask to ask] [azr|el] [axscode] [ascii_url] [ask twice] [istld] [mjd local] [wsdl] [ascii table] [c'est la vie]
[14:05:39] <PavelB> evalpython: print("42") # i think this works
[14:05:55] <PavelB> perlbot: evalpython print("42")
[14:05:55] <perlbot> PavelB: No factoid found. Did you mean one of these: [eval print 4+5]
[14:06:06] <PavelB> mm, can't remember the syntax for it
[14:09:47] *** Quits: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094) (Quit: WeeChat 3.2)
[14:10:02] *** Joins: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094)
[14:12:50] * japh injects a local $SIG{__WARN__} = sub { 'Hi user, I am perl' }; into all of horsepatats codebases
[14:13:51] <ehuelsmann[m]> Is there a module which will capture any warnings generated from an `eval`? 
[14:14:18] <ehuelsmann[m]> I'd like to divert the warnings into a logging statement, instead of them being printed on STDOUT.
[14:14:21] <PavelB> sweval: eval { warn "foo" }
[14:14:23] <perlbot> PavelB: foo at (IRC) line 1. 1
[14:15:14] <LeoNerd> ehuelsmann[m]: youmean the usual   my $warnings = ""; local $SIG{__WARN__} = sub { $warnings .= $_[0] };  trick ?
[14:15:30] <horsepatat> I do that without module, $SIG{__WARN__} = sub { } will call it for every warning, me thinks
[14:15:38] <ehuelsmann[m]> ah. yes. that one :-)
[14:15:52] <ehuelsmann[m]> even better. Thanks!
[14:16:34] <japh> ehuelsmann[m], https://perlmaven.com/how-to-capture-and-save-warnings-in-perl
[14:16:36] <Paperbot> Link title(s): [ How to capture and save warnings in Perl ]
[14:17:46] *** Joins: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net)
[14:18:21] <PavelB> fun fact powershell has 7 output streams, 6 of which can be redirected
[14:18:30] <PavelB> y'all are talking about logging and I just randomly remembered
[14:21:32] * GumbyPAN CPAN Upload: RxPerl-v6.7.1 by KARJALA https://metacpan.org/release/KARJALA/RxPerl-v6.7.1
[14:22:18] <PavelB> I wonder if there's a powershell module. Probably enough to just have a .NET one
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:58] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 265 seconds)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:34:46] *** Quits: PavelB (~PavelB@50.125.179.101) (Ping timeout: 246 seconds)
[14:36:23] *** Joins: DaTa (~DaTa@user/data)
[14:39:11] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[14:39:27] <shlomif> horsepatat: hi
[14:42:43] <shlomif> horsepatat: i remember that microsoft's https://en.wikipedia.org/wiki/INF_file 's linter was written in perl back in 1997ish
[14:42:44] <Paperbot> Link title(s): [ INF file - Wikipedia ]
[14:43:24] *** Joins: Pali (~pali@user/pali)
[14:45:05] <ehuelsmann[m]> is there a way to make `dzil cover` add "-MSyntax::Keyword::Try::Deparse" in a way that it can do its thing before coverage actually starts?
[14:47:12] *** Joins: anthk_ (~anthk_@92.176.105.30)
[14:48:00] *** Quits: splatt990 (4b25e29db1@198.108.79.250) (Remote host closed the connection)
[14:48:10] <LeoNerd> ?
[14:49:59] *** Quits: horsepatat (~horsepata@212.3.197.118) (Ping timeout: 252 seconds)
[14:50:26] <ehuelsmann[m]> LeoNerd: we switched try/catch to Syntax::Keyword::Try yesterday, which is a big improvement over the manual `eval` handling we had before (yes, not even Try::Tiny). However, Jonas tends to run coverage tests (I usually only run the test suite without coverage) for Workflow. His terminal exploded with "CUSTOM_OP" warnings from B::Deparse.
[14:50:51] <ehuelsmann[m]> which is what S:K:T::Deparse is for (at least partially)
[14:50:56] <LeoNerd> Oh.. yeah. B::Deparse is not very friendly to custom syntax modules :/
[14:51:03] <LeoNerd> Yah
[14:51:20] <ehuelsmann[m]> I know how to hack that into `prove` runs.
[14:51:51] <ehuelsmann[m]> but I wonder how to hack the same into `cover` and `dzil cover` runs.
[14:53:33] <LeoNerd> There's always such fun as  PERL5OPTS=-MSyntax::Keyword::Try::Deparse ...
[14:53:35] <ehuelsmann[m]> I figure not enough people were actually using custom ops for that to be a problem.
[14:53:48] <LeoNerd> To a first-degree approximation, there is one author:me
[14:54:06] <LeoNerd> (there are a few others in bits and pieces, but nobody else I'm aware of who has more than one module even)
[14:54:33] <ehuelsmann[m]> yes. I'm still glad it was developed so that one author could finaly stand up and start to use it.
[14:54:48] <LeoNerd> Originally there were more... but both ZEFRAM and MAUKE seem to have disappeared
[14:54:55] <ehuelsmann[m]> it seems like an awful lot of work for something that sees this little use (until recently)
[14:55:07] <LeoNerd> mauke's Function::Parameters seems to have done its job though; it was mostly the inspiration needed to get signatures into core
[14:55:40] <LeoNerd> And Switch::Plain was part of the inspiration for my Syntax::Keyword::Match
[14:56:40] <ehuelsmann[m]> I loved the presentation where you mused about being able to add the same level of customization to infix operators.
[14:57:36] <ehuelsmann[m]> I looked at Syntax::Keyword::Match, but didn't have a need for it yet.
[14:57:49] <LeoNerd> Oh, yeah I need to wave that patch at perl core sometime
[14:57:56] <LeoNerd> which means I should finish it enough. meh
[14:58:01] <LeoNerd> Too many things to do
[15:04:00] <ehuelsmann[m]> yea. one thing at a time.
[15:07:53] *** Joins: jsaito (~jsaito@user/jsaito)
[15:12:15] <LeoNerd> One? Bah. I'm usually working on about 3 things at a time
[15:17:11] <ehuelsmann[m]> So do I, but they're usually tangent topics, so I know where I left off on each, quickly.
[15:18:20] <LeoNerd> I find I have to timeslice things so I'm not stuck doing nothing while I wait on people
[15:18:56] <LeoNerd> A lot of my electronics projects are on long-term stall at the moment because the entire semiconductor industry is stuck in a huge backlog and I can't get more chips until at least October.. or some parts in 2022..
[15:19:31] <ehuelsmann[m]> 2022?!
[15:19:32] <ehuelsmann[m]> wow.
[15:21:00] <LeoNerd> Oh, these are December 2021: https://www.mouser.co.uk/ProductDetail/Microchip-Technology-Atmel/ATTINY814-SSNR
[15:21:12] <LeoNerd> But yeah some bits I've seen in *June* 2022.
[15:21:54] <LeoNerd> At this point, people are ordering whatever parts they can find, and redesigning products/boards to suit whatever chips they can actually get hold of
[15:22:22] <LeoNerd> It's an interesting failure mode that doesn't happen in the software world
[15:22:48] <LeoNerd> Can you imagine what would happen if metacpan.org said "Oh, yeah, sorry, this module is out of stock. You'll have to wait until Christmas to download any more tarballs"
[15:22:53] <ehuelsmann[m]> not on the hardware part. 
[15:23:03] <ehuelsmann[m]> :-)
[15:23:43] <ehuelsmann[m]> I've seen entire projects being rewritten into other technology because either the developers for the existing technology are too costly or simply not available.
[15:24:00] <ehuelsmann[m]> (or because management has better experience with projects in the other technology)
[15:24:25] <ehuelsmann[m]> in the software world we usually run out of human resources before anything else, indeed.
[15:26:06] <LeoNerd> Ohsure, those are the sortof of "resource failures" that can happen in any engineering setting
[15:30:31] <shlomif> ehuelsmann[m]: there is https://www.joelonsoftware.com/2002/12/11/lord-palmerston-on-programming/
[15:30:31] <Paperbot> Link title(s): [ Lord Palmerston on Programming – Joel on Software ]
[15:35:18] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 272 seconds)
[15:36:22] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[15:44:16] <shlomif> yay! at least bullseye has a recent wml: https://packages.debian.org/source/bullseye/wml
[15:44:17] <Paperbot> Link title(s): [ Debian -- Details of source package wml in bullseye ]
[15:53:00] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[15:55:14] *** Joins: isnessness (~ugjka@2a03:ec00:b18f:1b67:6a97:220d:aeb2:af9e)
[15:57:32] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[16:13:55] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 265 seconds)
[16:21:45] * GumbyPAN CPAN Upload: Linux-Inotify2-2.3 by MLEHMANN https://metacpan.org/release/MLEHMANN/Linux-Inotify2-2.3
[16:31:46] * GumbyPAN CPAN Upload: Web-Reactor-2.10 by CADE https://metacpan.org/release/CADE/Web-Reactor-2.10
[16:34:48] <shlomif> https://metacpan.org/release/CADE/Web-Reactor-2.10 - no licence :(
[16:34:48] <Paperbot> Link title(s): [ Web-Reactor-2.10 -  - metacpan.org ]
[16:36:47] * GumbyPAN CPAN Upload: Test-Fixture-Teng-0.01 by MASIUCHI https://metacpan.org/release/MASIUCHI/Test-Fixture-Teng-0.01
[16:46:48] * GumbyPAN CPAN Upload: Getopt-EX-Hashed-0.9905 by UTASHIRO https://metacpan.org/release/UTASHIRO/Getopt-EX-Hashed-0.9905
[16:57:42] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 272 seconds)
[17:20:08] *** Quits: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru) (Ping timeout: 265 seconds)
[17:32:16] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:34:38] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[17:35:32] *** Joins: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru)
[17:38:14] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[17:40:46] *** Quits: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru) (Ping timeout: 272 seconds)
[17:41:46] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:44:14] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:45:54] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 240 seconds)
[17:47:49] <leitz> Okay, general module question. I have large static hashes that need to be used for evaluation, and the user needs to be able to build their own hash from a file.
[17:48:30] <leitz> In the module, where do I put the files with the hashes? In something like "~/data/my_hash.pm", or something else?
[17:48:51] <shlomif> leitz: hi
[17:49:03] <shlomif> leitz: bdb?
[17:49:11] <shlomif> perlbot: bdb
[17:49:11] <perlbot> shlomif: No factoid found. Did you mean one of these: [.bd] [.bt] [bad] [bnf] [bot] [bttf] [ftp] [otp] [wtb] [wtf]
[17:50:18] <shlomif> leitz: https://www.shlomifish.org/open-source/resources/databases-list/#key-val-DBs
[17:50:18] <Paperbot> Link title(s): [ List of Databases’ Implementations - Shlomi Fish’s Homesite ]
[17:50:43] <leitz> What I have so far:    https://gist.github.com/LeamHall/ecbef65d8b4d6f58d7d5793d882c6a5e
[17:50:43] <Paperbot> Link title(s): [ build_word_hash.pl · GitHub ]
[17:51:16] <leitz> shlomif, I'm trying to keep this as simple as possible. So a word list is much better than a DB backend.
[17:51:40] <shlomif> leitz: no strict?
[17:51:50] <shlomif> perlbot: no strict
[17:51:51] <perlbot> shlomif: no strict no warnings no help. That's the #perl motto!
[17:51:55] * GumbyPAN CPAN Upload: Astro-Coord-ECI-VSOP87D-0.005_01 by WYANT https://metacpan.org/release/WYANT/Astro-Coord-ECI-VSOP87D-0.005_01
[17:53:09] <shlomif> leitz: there is https://metacpan.org/pod/Data::Dumper too
[17:53:10] <Paperbot> Link title(s): [ Data::Dumper - stringified perl data structures, suitable for both printing and eval - metacpan.org ]
[17:53:18] <leitz> shlomif, Added. I usually have them in, but coffee hadn't kicked in.
[17:54:26] <leitz> shlomif, not sure I'm communicating well. The user would provide a file that has one word per line. That file would be slurped into a hash, with the given key, and then the hash used in the reporting.
[17:55:05] <shlomif> leitz: ok
[17:55:30] <shlomif> leitz: https://gist.github.com/LeamHall/ecbef65d8b4d6f58d7d5793d882c6a5e - still no strict
[17:55:30] <Paperbot> Link title(s): [ build_word_hash.pl · GitHub ]
[18:02:16] *** Joins: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru)
[18:02:48] *** Quits: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru) (Remote host closed the connection)
[18:03:52] <leitz> shlomif, I added it in my local code. I am focused on a particular issue and do not see the need to update a gist with something that isn't really relvant to the question I'm working on.
[18:05:14] <shlomif> leitz: sigh
[18:06:19] <shlomif> leitz: https://github.com/shlomif/how-to-share-code-online
[18:06:19] <Paperbot> Link title(s): [ GitHub - shlomif/how-to-share-code-online: How to share source code on online forums in order to ... ]
[18:10:50] <lopid> just put it in data
[18:11:39] <karjala> What is the ":keyword" construct here in this example called? sub my_func :keyword { ... }
[18:11:48] <karjala> It's not "modifier", it's...
[18:11:54] <lopid> attribute
[18:11:57] <karjala> thanks
[18:12:01] <shlomif> lopid: in which format?
[18:12:09] <shlomif> lopid++
[18:30:44] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[18:31:04] *** Joins: krismatrix (~krismatri@38.80.149.51)
[18:49:48] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[18:57:01] *** Joins: akaWolf (~akaWolf@akawolf.org)
[18:57:07] *** Quits: isnessness (~ugjka@2a03:ec00:b18f:1b67:6a97:220d:aeb2:af9e) (Quit: WeeChat 3.2)
[18:57:28] *** Quits: ugjka (~ugjka@2a03:ec00:b18f:1b67:cc10:2827:31c2:2094) (Quit: WeeChat 3.2)
[19:11:02] *** Joins: thrig (~thrig@70.97.65.251)
[19:14:03] *** Joins: zacts (~zacts@user/zacts)
[19:17:00] *** Joins: habamax (~habamax@user/habamax)
[19:17:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:18:31] *** Joins: dimbag (~dimbag@pppoe-77-75-15-109.ppp.kmv.ru)
[19:22:04] * GumbyPAN CPAN Upload: File-Rename-1.29_01 by RMBARKER https://metacpan.org/release/RMBARKER/File-Rename-1.29_01
[19:22:44] *** Quits: brtastic (~bartosz@185.24.91.138) (Ping timeout: 272 seconds)
[19:29:25] *** Joins: brtastic (~bartosz@185.24.91.138)
[19:35:33] *** Joins: ugjka (~ugjka@ugjka.net)
[19:35:46] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:48:02] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[19:48:31] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[19:54:25] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Remote host closed the connection)
[19:58:18] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[20:03:12] *** Joins: zacts (~zacts@user/zacts)
[20:08:10] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 240 seconds)
[20:08:10] *** Quits: skyl4rk (~tlvb@user/tlvb) (Quit: WeeChat 3.1)
[20:08:22] *** Joins: skyl4rk (~tlvb@user/tlvb)
[20:21:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:26:44] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[20:29:52] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 272 seconds)
[20:35:43] *** Joins: thrig (~thrig@65.113.153.50)
[20:36:50] *** Joins: krismatrix (~krismatri@38.80.149.51)
[20:37:13] *** Quits: krismatrix (~krismatri@38.80.149.51) (Client Quit)
[20:43:55] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[20:44:28] *** Quits: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi) (Remote host closed the connection)
[20:53:04] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[21:01:45] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:02:15] * GumbyPAN CPAN Upload: Crypt-OpenSSL-X509-1.100 by JONASBN https://metacpan.org/release/JONASBN/Crypt-OpenSSL-X509-1.100
[21:03:03] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[21:07:35] *** Joins: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi)
[21:09:47] *** Quits: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi) (Client Quit)
[21:12:23] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[21:14:44] *** Joins: Guest9 (~Guest9@103.240.169.29)
[21:16:17] * GumbyPAN CPAN Upload: Crypt-OpenSSL-X509-1.1000 by JONASBN https://metacpan.org/release/JONASBN/Crypt-OpenSSL-X509-1.1000
[21:17:42] *** Joins: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi)
[21:17:54] *** Joins: thunder (~thunder@user/thunder)
[21:30:02] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 272 seconds)
[21:36:16] *** Joins: magla (~gelignite@55d418d7.access.ecotel.net)
[21:36:19] * GumbyPAN CPAN Upload: Net-TinyERP-0.09 by GARU https://metacpan.org/release/GARU/Net-TinyERP-0.09
[21:36:19] * GumbyPAN CPAN Upload: Module-cpmfile-0.002 by SKAJI https://metacpan.org/release/SKAJI/Module-cpmfile-0.002
[21:41:21] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:46:20] * GumbyPAN CPAN Upload: Dist-Zilla-Plugin-Prereqs-From-cpmfile-v0.0.2 by SKAJI https://metacpan.org/release/SKAJI/Dist-Zilla-Plugin-Prereqs-From-cpmfile-v0.0.2
[21:51:17] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 265 seconds)
[21:54:15] *** Joins: thunder (~thunder@user/thunder)
[22:22:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:27:41] <japh> https://insights.stackoverflow.com/survey/2020#technology-what-languages-are-associated-with-the-highest-salaries-worldwide-global congrats us
[22:27:42] <Paperbot> Link title(s): [ Stack Overflow Developer Survey 2020 ]
[22:30:04] <El_Che> perl is correlated with nothing
[22:30:07] <El_Che> that is kind of worrying
[22:33:03] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[22:44:49] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:47:50] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 265 seconds)
[22:56:28] * GumbyPAN CPAN Upload: Crypt-OpenSSL-X509-1.909 by JONASBN https://metacpan.org/release/JONASBN/Crypt-OpenSSL-X509-1.909
[22:56:41] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[23:01:15] *** Joins: EGD (~egd@user/egd)
[23:03:10] *** Joins: PavelB (~PavelB@50.125.179.101)
[23:12:01] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:12:51] *** Walex_away is now known as Walex
[23:14:34] *** Quits: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi) (Remote host closed the connection)
[23:18:56] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:20:07] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 245 seconds)
[23:24:02] *** Quits: Guest9 (~Guest9@103.240.169.29) (Ping timeout: 272 seconds)
[23:36:52] *** Joins: drocsid (~drocsid@207.32.160.224)
[23:39:17] <drocsid> Hello, I'm trying to build a kde framework that depends on a perl module for the build. The module is IO::Socket::SSL . I found a package for it on my platform but the build tool reports it is missing. I also tried to install via cpan which worked for another module. Can someone help me to try to get it installed?
[23:39:31] <drocsid> https://github.com/skycocker/chromebrew/issues/6019
[23:39:32] <Paperbot> Link title(s): [ after installing perl_io_socket_ssl, seems not available to Perl :IO::Socket::SSL   · Issue #6019... ]
[23:40:19] <pragma-> >Interestingly, Perl is amongst the top most dreaded languages, so it's possible that this high salary is to compensate for the dearth of developers who want to use that technology.
[23:41:07] <japh> sure, I'm fine going the cobol route if that means more salary for me :p
[23:41:48] <japh> drocsid, not sure what error you got from cpan, but try using cpanm instead: https://metacpan.org/dist/App-cpanminus/view/bin/cpanm
[23:41:49] <Paperbot> Link title(s): [ cpanm - get, unpack build and install modules from CPAN - metacpan.org ]
[23:42:05] <japh> Successfully reinstalled IO-Socket-SSL-2.071
[23:42:48] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[23:43:43] <rewt> drocsid, also make sure you're using the same perl for kdesrc-build and crew
[23:44:18] *** Quits: magla (~gelignite@55d418d7.access.ecotel.net) (Quit: Stay safe!)
[23:44:23] <rewt> if they're different versions, you'll need to install the module for the one kdesrc-build uses, even though it's already installed for the one crew uses
[23:45:18] <drocsid> https://l.perl.bot/p/958iyo
[23:45:19] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[23:45:56] <drocsid> rewt afaik perl is only installed via the package manager
[23:46:33] <drocsid> cpan install IO-Socket-SSL failure: https://l.perl.bot/p/958iyo
[23:46:34] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[23:46:54] <rewt> to install that module, you need some dev packages installed for the ssl lib
[23:47:25] <rewt> install from cpan*
[23:48:26] <drocsid> At rewt, did you look at the perlbot pastebin ^^ ? I get the cpan failure
[23:48:52] <rewt> yeah, it's saying it's missing header files, probably becase you're missing those ssl dev packages
[23:49:32] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 252 seconds)
[23:50:01] *** Joins: deadmarshal (~deadmarsh@95.38.228.142)
[23:50:40] <rewt> oh, hmm
[23:50:48] <japh> on my dist, the only dependencies are Uri and Net::SSLeay
[23:52:11] <japh> and N::SSl... depends on openssl, and that's it
[23:55:04] *** Quits: deadmarshal (~deadmarsh@95.38.228.142) (Ping timeout: 272 seconds)
[23:55:40] *** Quits: drocsid (~drocsid@207.32.160.224) (Quit: Client closed)
[23:55:50] *** Joins: EGD_ (~egd@user/egd)
[23:55:57] <rewt> the problem is "failed to map segment from shared object"... there are some google results for that phrase
[23:56:06] *** Joins: drocsid (~drocsid@207.32.160.224)
[23:56:48] *** Quits: EGD (~egd@user/egd) (Ping timeout: 252 seconds)
[23:56:52] <drocsid> If you look at the pastebin around line 296 cpan tries to install one of the SSL deps and fails
[23:58:09] <rewt> yes, lnie 299 has that error i mentioned
[23:59:41] <drocsid> so what should i do moving forward. The irc client failed for a second here so might have missed your mention
