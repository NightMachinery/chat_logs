[00:00:49] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[00:07:03] <GinFuyou> Steve-Dusty, if you are using sqlite you can just delete file and run migrations again
[00:08:43] *** Quits: doev (~doev@p549d7884.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[00:18:59] *** Joins: READ10 (~weechat@user/read10)
[00:24:18] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 272 seconds)
[00:28:55] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[00:30:36] *** Joins: audiocat (~audio@2603-8081-1800-00ad-2d8c-df58-6f9e-6622.res6.spectrum.com)
[00:35:43] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[00:38:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:38:04] *** ChanServ sets mode: +v EvilDMP
[00:50:22] *** Joins: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl)
[00:52:06] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Remote host closed the connection)
[00:59:39] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[01:04:29] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[01:11:57] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:12:27] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[01:13:55] *** Quits: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl) (Quit: Textual IRC Client: www.textualapp.com)
[01:17:17] <Steve-Dusty> WAIT
[01:17:17] *** Quits: dezmaeth (~maeth@pc-148-224-30-200.cm.vtr.net) (Read error: Connection reset by peer)
[01:17:20] <Steve-Dusty> GinFuyouI REALIZEd
[01:17:34] <Steve-Dusty> Why did you ask me to put ForeignKey in Todo model????
[01:17:39] <Steve-Dusty> It should be ForeignKey in Code!!!
[01:17:58] <Steve-Dusty> It's TODOs for EVERY CODE. not CODE for EVERY TODO
[01:18:16] <Steve-Dusty> @ginf
[01:18:22] <Steve-Dusty> GinFuyou
[01:20:36] *** Joins: jess (~jess@libera/staff/jess)
[01:23:28] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[01:25:32] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[01:29:37] <GinFuyou> Steve-Dusty, again, I ask you what those models means logically? I described what make sense to me
[01:30:40] <GinFuyou> X for every Y doesn't click with me. I usually say box can have many items in it. Item can be in one box. and so on
[01:30:51] <Steve-Dusty> One model handles the room. Another handles the task. For every room there will be a separate todo list.
[01:31:17] <GinFuyou> what you mean by handle?
[01:31:20] <Steve-Dusty> A room can have many tasks
[01:31:31] <GinFuyou> Ok, then it's correct
[01:31:33] <Steve-Dusty> The Todo model stores the tasks
[01:31:46] <Steve-Dusty> You know like pastebins, right?
[01:31:59] <Steve-Dusty> Each link  to the pastebin have one editor to input your code
[01:32:09] <Steve-Dusty> Each link to the room have one Todo functionality
[01:32:25] <GinFuyou> So Todo is a list itself?
[01:32:48] <Steve-Dusty> yes
[01:32:55] <GinFuyou> Or more like Room -> Todo -> Task
[01:33:03] <Steve-Dusty> There's only 2 models
[01:33:05] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:33:13] <Steve-Dusty> Room -> Todo
[01:33:18] <GinFuyou> Then I don't understand
[01:33:27] *** Quits: READ10 (~weechat@user/read10) (Ping timeout: 245 seconds)
[01:33:36] <Steve-Dusty> Wdym Room -> Todo -> Task
[01:33:44] <Steve-Dusty> when you say "task" are you referring to the CharField?
[01:34:29] <GinFuyou> No, i'm referencing an object. Of type todo list can have a number of. That's what makes sense to me the most
[01:37:23] <Steve-Dusty> Okay. "Todo" is a model. And this model stores the task and is_completed. When I loop through this object, I can display all the tasks inside the Todo model. I want the Code model, in a separate app, to store the room code, which the user can create. When they create a room, the room code gets stored inside code.room_code. Then, they get redirected
[01:37:24] <Steve-Dusty> to the Todo where they have their own Todo functionality (adding, deleting, tasks, etc)
[01:38:06] <Steve-Dusty> so next time when the person shares the link (etc. example.com/room/123456) they can see what he has
[01:38:41] *** Quits: benbacardi (~benbacard@91.206.1.124) (Quit: Client closed)
[01:38:50] <GinFuyou> Why it stores tasks in a charfield? That looks very limited and silly (unless there is a very specific requirement for it)
[01:39:23] <Steve-Dusty> Tasks is the description...
[01:39:33] <Steve-Dusty> So "Complete homework"
[01:39:37] <GinFuyou> You don't have description
[01:39:45] <Steve-Dusty> i meant title*
[01:39:51] <Rikem> When I hear "todo" I immediately think of a list
[01:39:57] <Rikem> a todo list, with many tasks
[01:39:59] <Steve-Dusty> yes
[01:40:09] <Steve-Dusty> Todo is a model, which stores many tasks
[01:40:37] <GinFuyou> you don't have title either, you only have "task" field
[01:41:25] <GinFuyou> So it should be Task -FK-> Room . I don't see any reason so far to have it any other way
[01:42:24] <Steve-Dusty> Look. name "Task" whatever you want. they all serve the same purpose - the TITLE
[01:42:31] <Steve-Dusty> ok
[01:43:34] <Steve-Dusty> what's "FK"
[01:43:42] <Rikem> foreign key
[01:43:45] <Steve-Dusty> oh
[01:44:03] <Steve-Dusty> i'll see how this works out
[01:44:25] <GinFuyou> If it's title name it "title". Variables names that describe what kind of object\value they hold is the best. As you can see for outsider it's very confusing otherwise
[01:45:26] <Steve-Dusty> ok
[01:47:36] <GinFuyou> https://dpaste.org/ospF just an example to clarify how I see it
[01:48:27] <GinFuyou> to have an url for room you may want a SlugField with unique=True
[01:49:16] *** Joins: koolazer (~koo@user/koolazer)
[01:49:25] <Steve-Dusty> Oh...
[01:51:25] <Steve-Dusty> GinFuyou
[01:51:27] <Steve-Dusty> I undestand what you meant
[01:52:40] <Steve-Dusty> Your way is dependent on the actual room
[01:52:59] <Steve-Dusty> Because you're using the room to display tasks
[01:53:42] <Steve-Dusty> My todoapp is capable of handling itself with HTML files and everything even without room
[01:54:12] <Steve-Dusty> I just want to integrate the feature of letting users create multiple instances of it
[01:58:10] <Rikem> GinFuyou example was what I thought you meant as well
[01:58:27] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 245 seconds)
[01:58:36] <Rikem> Not sure what you mean by handling itself with html file though
[01:59:17] <GinFuyou> "even without room" in this example would be blank=True, null=True on foreign key
[01:59:27] <Rikem> The pros in here deserve a raise!
[02:01:00] <GinFuyou> If you describe your end goal further we may have better ideas, or at least stop suggesting ones that don't fit your case
[02:05:14] *** Joins: surfnturf (~surfnturf@47.156.203.124)
[02:05:38] <surfnturf> has anyone connected django to azure sql? I'm having problems with some of my migrations
[02:06:30] <Steve-Dusty> GinFuyou without a room meant if I deleted my whole ROOMS app it'd still work
[02:07:31] <GinFuyou> Why would you delete an app though? Do you want todos to be reusable? Like you plug into completely different project?
[02:08:24] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 255 seconds)
[02:08:28] *** Joins: fros (~user@158.140.192.124)
[02:09:51] *** Joins: Anthoney (~Anthoney@ip68-7-234-159.sd.sd.cox.net)
[02:09:55] <Steve-Dusty> i'll figure this out later. thanks for the help though
[02:09:56] *** Quits: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[02:10:09] <Anthoney> greetings
[02:12:47] <Rikem> GinFuyou: Looks like you get some of the good jobs as well :)
[02:13:09] <Anthoney> Is anyone here experienced with Celery or another scheduler I had a few questions
[02:14:29] *** Quits: Anthoney (~Anthoney@ip68-7-234-159.sd.sd.cox.net) (Quit: Client closed)
[02:15:24] *** Joins: Anthoney (~Anthoney@ip68-7-234-159.sd.sd.cox.net)
[02:17:42] <Anthoney> I have a list of numbers in a model, what I'm trying to do is at a scheduled time make an HTTP request for every row in the table
[02:17:53] <Anthoney> What would be the proper way to do this
[02:18:08] <Anthoney> I'm currently using Celery but I'm open to using another scheduler
[02:22:13] <GinFuyou> Rikem, hm?
[02:22:28] <b-rex> Anthoney: yur question makes no sense
[02:22:38] <GinFuyou> Anthoney, what is the problem doing it with celery? It does support all kinds of scheduled tasks
[02:24:27] <Rikem> GinFuyou: I was just commending your patience with helping people in here
[02:25:05] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[02:26:58] <Anthoney> The way I have it working right now is I have 1 scheduled function that gets called at the scheduled time and iterates through the list making the HTTP requests
[02:27:14] <Anthoney> Would it be excessive to schedule each request individually
[02:27:29] <Anthoney> It seems like it could be more efficient I'm just unsure of the steps to take
[02:29:25] <Rikem> django-celery-beat might be what you need
[02:29:56] <GinFuyou> I believe celery task can create tasks of it's own
[02:33:36] <Anthoney> I don't think celery-beat would work as my tasks aren't periodic they're 1 off
[02:33:55] *** Parts: surfnturf (~surfnturf@47.156.203.124) ()
[02:35:09] <Anthoney> GinFuyou So do you think I should have 1 scheduled task that then does the HTTP requests in immediate execute tasks
[02:35:21] <Anthoney> And then just up the number of workers?
[02:36:18] <GinFuyou> Request per task may make a sense since it would be likely easier to handle re-tries
[02:36:43] <GinFuyou> I guess depends on details
[02:37:10] <Anthoney> Yeah makes sense, wouldn't hang the whole thing on 1 messed up request
[02:37:46] <Anthoney> Another issue I was having is randomly some tasks are being executed like 7x
[02:37:52] <Anthoney> Is that something you've encountered before
[02:39:17] <GinFuyou> mmm, no, don't remember such an effect
[02:41:24] <wallbroken> FunkyBob: do i need to remove all m2m field around the project?
[02:41:34] <Anthoney> I figured, seems like an obscure interaction somewhere between the broker/scheduler/db
[02:41:46] <Anthoney> Anyways thank you for the help much appreciated
[02:44:13] <FunkyBob> wallbroken: probably
[02:44:19] *** Joins: ST47 (~ST47@wikimedia/st47)
[02:44:26] <wallbroken> GinFuyou: your fault!
[02:44:30] <wallbroken> you told me to use m2m
[02:46:04] <wallbroken> FunkyBob: this means i need to throw out most part of the current development
[02:46:26] <FunkyBob> wallbroken: not GinFuyou fault.
[02:46:38] <FunkyBob> they gave you a solution suitable for the problem you described
[02:46:48] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[02:46:58] <wallbroken> FunkyBob: all around me told "why m2m?"
[02:47:12] <FunkyBob> and you gave a problem description that seemed to require it
[02:47:29] <FunkyBob> now, stop pointing fingers and move on
[02:48:06] <wallbroken> FunkyBob: well, it's faster to start from the beginning at this point, right?
[02:48:11] *** Joins: allegary (~allegary@apache/committer/gjm)
[02:48:18] <wallbroken> most of the project works on managing those m2m fields
[02:48:28] <FunkyBob> very likely, yes
[02:48:39] <FunkyBob> you might even move on to using a separate CSS file ,even
[02:48:50] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user/shoes/views.py
[02:48:52] <wallbroken> see here
[02:49:05] <wallbroken> processing m2m fields everywhere
[02:49:38] <wallbroken> 4 months of work thrown away
[02:51:10] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[02:57:56] <wallbroken> it's a very big effort to start it again
[02:58:20] <wallbroken> so, I think I'll let it go
[02:58:28] *** Quits: Anthoney (~Anthoney@ip68-7-234-159.sd.sd.cox.net) (Ping timeout: 246 seconds)
[03:00:54] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[03:02:00] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 272 seconds)
[03:02:36] <shodan45> grr why doesn't json_script work with iterables?
[03:04:06] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[03:04:25] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[03:04:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:04:34] *** ChanServ sets mode: +v EvilDMP
[03:06:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:07:37] <schinckel> There was an interesting post a while back that says you should use JSON.loads('<data>') instead because the JS parser can parse that faster.
[03:07:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:07:54] <FunkyBob> wallbroken: yeah... remember right at the start when we talked about this being a throw-away proof of concept?
[03:08:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:08:01] *** ChanServ sets mode: +v EvilDMP
[03:08:09] <FunkyBob> wallbroken: also, this is why planning and specing the problem first is important
[03:08:34] <bparker> 22:19 < wallbroken> 4 months of work thrown away
[03:08:35] <FunkyBob> schinckel: that lets the page load faster because you can defer parsing
[03:08:42] <bparker> I told you in the beginning this m2m stuff was wrong
[03:08:48] *** Joins: rpkilby_ (~rpkilby@2600:100f:b115:e07e:8c8f:50b9:bf18:adae)
[03:09:08] <bparker> before you even wrote any views yet
[03:09:08] <schinckel> FunkyBob: Yeah, but also the parser can move faster because JSON is more restrictive than JS, so it can fail "faster".
[03:09:20] <FunkyBob> good point
[03:09:33] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[03:09:34] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:09:49] <schinckel> I think it was someone from Google who wrote it. But I can't find the reference.
[03:10:25] <FunkyBob> iirc it's JSON.parse
[03:11:05] <schinckel> Yeah, tha's the one.
[03:12:29] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 255 seconds)
[03:12:37] *** Joins: rpkilby__ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:15:35] *** Joins: Crassus (~Crassus@user/crassus)
[03:16:21] *** Quits: rpkilby_ (~rpkilby@2600:100f:b115:e07e:8c8f:50b9:bf18:adae) (Ping timeout: 255 seconds)
[03:19:47] *** Quits: justache (~justache@user/justache) (Excess Flood)
[03:21:08] *** Joins: justache (~justache@user/justache)
[03:25:57] *** Quits: fros (~user@158.140.192.124) (Ping timeout: 245 seconds)
[03:39:55] *** Quits: iomari891 (~iomari891@105.112.138.38) (Remote host closed the connection)
[03:40:07] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 245 seconds)
[03:44:19] *** Joins: iomari891 (~iomari891@105.112.138.38)
[03:54:13] <hemebond> "this is why planning and specing the problem first is important" agile!
[03:55:43] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[04:11:28] <PaulWay[w]> wallbroken: four months of learning :-)
[04:16:15] <n00bn00b> GinFuyou: what happend to m2m? :D
[04:16:26] <n00bn00b> I dont got this entire discussion
[04:20:54] <wallbroken> PaulWay[w]: no, 4 months of doing pointless things as FunkyBob always stated
[04:21:04] <wallbroken> FunkyBob: yes, i remember
[04:22:07] <wallbroken> and now the terrible part is to say to people who needs it: "all my work is inefficient and unrealiable, sorry"
[04:22:43] <FunkyBob> wallbroken: you also assured me up front this was a proof of concept and not going into production
[04:22:49] <FunkyBob> so
[04:22:54] <FunkyBob> that's on you
[04:24:19] <wallbroken> ok. now i think the best thing to do is to hire a professional django developer and let him do the entire project, and then i'll pay it
[04:24:45] <wallbroken> and i'll give it to the committent saying it has been done by me
[04:25:00] <wallbroken> this is to avoid a poor figure
[04:25:01] <PaulWay[w]> wallbroken: you can learn, or your can call it pointless - but you still know more about Django than you did before.
[04:25:36] <wallbroken> PaulWay[w]: that has been just a painful experience
[04:25:37] <FunkyBob> wallbroken: sure, except...
[04:25:39] <FunkyBob> as I pointed out before
[04:25:48] *** Joins: thiras (~thiras@user/thiras)
[04:25:49] <FunkyBob> if you want a professional dev... they're going to want clear specs and requirements
[04:25:50] <wallbroken> done by praying people to help me
[04:25:52] <FunkyBob> which we kept trying to get from you
[04:26:05] <FunkyBob> are you familiar with the phrase "garbage in, garbage out"?
[04:26:10] <wallbroken> no
[04:26:33] <FunkyBob> doesn't matter how good a system is... if you put garbage information in, tou get garbage information out
[04:26:41] <FunkyBob> we kept pressing you for details ,requirements
[04:26:50] <PaulWay[w]> qualità di input = qualità di output
[04:26:51] <FunkyBob> we kept saying " we think y ou need an Order model"
[04:26:57] <FunkyBob> you kept saying it didn't work that way
[04:26:59] <FunkyBob> it wasn't needed
[04:27:08] <FunkyBob> so we offered as solution based on how you insisted it worked
[04:27:14] <wallbroken> "input di qualità"
[04:27:18] <FunkyBob> you gave us garbage information... and got a garbage solution
[04:27:30] <PaulWay[w]> wallbroken: sorry - just going from a suggestion from the internet :-)
[04:28:46] <PaulWay[w]> wallbroken: you can spend all this time blaming whoever you like for the problem you're in - or you can move on and get things working.
[04:29:09] <n00bn00b> PaulWay[w]: +1 ^
[04:29:09] <wallbroken> PaulWay[w]: no, i will not going to start the entire project again
[04:29:23] <n00bn00b> wallbroken: Do You know Agile?
[04:29:29] <n00bn00b> this is called iteration
[04:29:33] <wallbroken> i have my complicated daily payied job to follow
[04:29:41] <wallbroken> n00bn00b: yes i know Agile and Waterfall
[04:29:45] <FunkyBob> wallbroken: consider this
[04:29:51] <n00bn00b> you should try it 2-3 to make iteration
[04:29:54] <FunkyBob> you have a team of some of the most experienced django devs IN THE WORLD
[04:29:55] <FunkyBob> right here
[04:29:59] <FunkyBob> trying to help you
[04:30:02] <FunkyBob> and look at the result?
[04:30:15] <PaulWay[w]> That's a two-edged sword you wave there FunkyBob :-)
[04:30:20] <FunkyBob> why? because of the insufficient and inaccurate specs  you gave us
[04:30:48] <n00bn00b> you will first build 2week project and then you would likely rebuild it with about 2-3 days
[04:30:57] <n00bn00b> because all cavetas are known to you wallbroken
[04:31:01] <PaulWay[w]> wallbroken: there's a thing called the X-Y problem.
[04:31:08] <n00bn00b> also, You probably badly researched domain of your problem wallbroken
[04:31:12] <wallbroken> FunkyBob: i don't want to give you some fault, but i always told you what my project consists in
[04:31:24] <n00bn00b> wallbroken: still, you are developer
[04:31:40] <n00bn00b> even when you describe there is possibility to fail
[04:31:44] <PaulWay[w]> I might not know how to say "garbage in garbage out" in Italian (that's Problem X), but I know how to use Google Translate.
[04:31:50] <wallbroken> n00bn00b: django has its own logic that you need to understand well to use it
[04:31:53] <n00bn00b> this is mostly always because issues in research
[04:32:01] <FunkyBob> wallbroken: but it's taken 4 monts of us dragging details from you
[04:32:09] <FunkyBob> to finally establish that this is a B2B ordering system
[04:32:09] <PaulWay[w]> So I go to Google Translate and type in "garbage in garbage out" and get an error (problem Y).
[04:32:11] <FunkyBob> or an ERP tool
[04:32:19] <n00bn00b> wallbroken: domain need understanding, and tooling is assumed is understand
[04:32:19] <PaulWay[w]> So I ask people to solve problem Y - but really I need help solving problem X.
[04:32:26] <wallbroken> n00bn00b: django has a documentation which isn't very newbie addicted
[04:32:32] <PaulWay[w]> wallbroken: do you understand my example there?
[04:32:37] <FunkyBob> wallbroken: you say you've always told us what the project was... but that's a lie, isn't it?
[04:32:39] <n00bn00b> wallbroken: listen to PaulWay[w]
[04:32:50] <n00bn00b> sorry
[04:32:53] <FunkyBob> because many times we've asked for details , suggested processe... and you've given different answers
[04:32:56] <FunkyBob> not to mention
[04:33:06] <wallbroken> PaulWay[w]: no
[04:33:12] <FunkyBob> how many times haev you ASSUMED everyone thought about the feature as you did? and it turned out nobody else did?
[04:33:22] <PaulWay[w]> OK.  Tell me what confuses you in that example?
[04:33:24] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[04:33:24] <n00bn00b> FunkyBob: ease, You are great, have experience and that is great help You give here; thank You from me :)
[04:33:52] <wallbroken> FunkyBob: a long time ago i explained which it would be an application to manage a warehouse stocks
[04:33:55] <wallbroken> you can't deny it
[04:34:19] <n00bn00b> wallbroken: nobody can
[04:34:20] <FunkyBob> wallbroken: thre are important lessons you need to be taking from this
[04:34:27] <n00bn00b> but leave the margin
[04:34:32] <n00bn00b> for Your mistake
[04:34:37] <FunkyBob> 1) slow down, and spend more time understanding the problem before you start work
[04:34:45] <n00bn00b> it is unpro when You do like that
[04:34:49] <FunkyBob> 2) don't assume everyone else understands the problem as you do
[04:35:09] <n00bn00b> FunkyBob: but "the problem" need the call
[04:35:12] <n00bn00b> the name
[04:35:15] <n00bn00b> specification
[04:35:20] <FunkyBob> wallbroken: yes...  you explained something vague about that... and again, we kept pressing for details, you would give answers
[04:35:30] <FunkyBob> or your wouldn't
[04:35:37] <FunkyBob> or you'd contradict yourself
[04:35:47] <FunkyBob> we suggested orders, you insisted it didn't work that wayh, so it didn't happen
[04:35:52] <n00bn00b> wallbroken: the problem is ... are the problems : with coding with domain (the business logic you handle with code using framework) etc.
[04:35:59] <wallbroken> FunkyBob: but why that persone told me "you need m2m" ?
[04:36:04] <FunkyBob> then you came back with the m2m solutions... and I asked about... but what about quantities? repeat orders?
[04:36:14] <FunkyBob> and you'd say "no, they can only have the shoe once" or some nonsense
[04:36:28] <FunkyBob> wallbroken: yes... they would suggest m2m because of what t hey knew of the problem AS YOU HAD DESCRIBED IT
[04:36:30] <n00bn00b> wallbroken: how many lines that is?
[04:36:33] <n00bn00b> 20-60?
[04:36:41] <n00bn00b> what we are really arguing about?
[04:36:47] <n00bn00b> I had solid exp in C
[04:36:51] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user/shoes/views.py
[04:36:57] <wallbroken> very big stuff
[04:37:10] <n00bn00b> I even sometimes had to allocate my own mem handlers because there was need to port
[04:37:17] <n00bn00b> and then start to implement logics
[04:37:18] <wallbroken> only the main view application is 600 lines
[04:37:29] <n00bn00b> if it is big why it is so big then?
[04:37:36] <n00bn00b> is that fragile ?
[04:37:46] <n00bn00b> so you cant move and must start from scratch
[04:37:49] <n00bn00b> if anything changes?
[04:37:59] <n00bn00b> then You need more experience, you just gaining
[04:38:08] <nedbat> wallbroken: it seems like you decided to have someone else build this application?
[04:38:08] <n00bn00b> and yup You could be should be fed up
[04:38:37] <n00bn00b> but there is sphere not the one person to blame ok?
[04:38:49] <n00bn00b> ppl help here for fre
[04:38:50] <wallbroken> https://www.dropbox.com/s/vf3ez09nxlqcato/Undtitled.png?dl=0
[04:39:02] <wallbroken> this is the shit the warehouse administrator should deal with
[04:39:04] <n00bn00b> it would eat you wallbroken this hate :)
[04:39:09] <n00bn00b> the Dark Side
[04:39:17] <n00bn00b> this would cover your happiness
[04:39:57] <wallbroken> as FunkyBob defined it many times "a deadful user experience"
[04:40:09] <FunkyBob> yep
[04:40:13] <FunkyBob> warned you not to do that
[04:40:22] <wallbroken> after i did that
[04:40:29] <FunkyBob> before
[04:40:31] <FunkyBob> and after
[04:40:33] <FunkyBob> and during
[04:40:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:47c1:42e:a029:b54:3720) (Quit: WeeChat 3.2)
[04:40:48] <Rikem> FunkyBob loves it really
[04:40:59] <n00bn00b> wallbroken: and? even if anybody not do?
[04:41:10] <n00bn00b> You are Eng. The Pro
[04:41:18] <n00bn00b> You are responsible
[04:41:22] <n00bn00b> because you have power
[04:41:43] <n00bn00b> more the power you have more responsibility you take
[04:42:04] <n00bn00b> if You write some big legacy code - then You really should start from scratch sometimes
[04:42:18] <n00bn00b> investin in bad relationship w/o future is the same issue
[04:42:22] <n00bn00b> we dont want to break
[04:42:26] <n00bn00b> because of emotions
[04:42:32] <n00bn00b> but there is a thin line
[04:42:43] <n00bn00b> and You should be honest with yourself
[04:42:50] <n00bn00b> do I want to maintain it?
[04:42:55] <n00bn00b> what gone wrong?
[04:43:04] <n00bn00b> What I could do to rescue that?
[04:43:15] <n00bn00b> and, why is it happen?
[04:43:36] <wallbroken> the problem is that i have not time to do it again
[04:43:53] <n00bn00b> which part
[04:44:09] <wallbroken> i need to write down the entire code again
[04:44:11] <n00bn00b> rewrite of whole is always "not best idea"
[04:44:17] <wallbroken> maybe i can save part of the html/css code
[04:44:21] <n00bn00b> maybe it would be faster if You start right now
[04:44:26] <n00bn00b> not cross hands
[04:44:33] <wallbroken> but the django engine must be done all again
[04:44:34] <n00bn00b> great, You save that part
[04:44:36] <n00bn00b> what else?
[04:44:39] <n00bn00b> maybe not
[04:45:06] <n00bn00b> really that all things depend on that little implementation detail?
[04:45:14] <n00bn00b> isn't that bad design then?
[04:45:19] <n00bn00b> if that change like
[04:45:20] <wallbroken> nothing else, maybe the account management application
[04:45:27] <n00bn00b> ok so next part is ok
[04:45:36] <n00bn00b> start and try to rescue what You could
[04:45:36] <wallbroken> all the views are full of m2m managing line codes
[04:45:38] <FunkyBob> basics of the Shoe model
[04:45:49] <n00bn00b> ok how You could replase that
[04:45:58] <wallbroken> FunkyBob: that's irrelevant, they are just field declaration
[04:45:58] <wallbroken> s
[04:46:25] <Rikem> You can do web apps with C#?
[04:46:26] <nedbat> wallbroken: you're going to have someone else build this now, right?
[04:46:28] <FunkyBob> i also think you overestimate how much time it will take to do with a cleaner schema
[04:46:33] <wallbroken> Rikem: no
[04:46:36] <n00bn00b> maybe next time you should do more interfaces?
[04:46:50] <wallbroken> i can just create the api routes using IIS
[04:46:57] <FunkyBob> nedbat: if you want someone else to build this... first you need to take what you've learned, and write a specification... requirements.
[04:47:06] <wallbroken> then i need a client side processor, like angular
[04:47:10] <n00bn00b> FunkyBob: me or wallbroken ? +/-
[04:47:15] <FunkyBob> oops
[04:47:21] <FunkyBob> s/nedbat/wallbroken
[04:47:31] <FunkyBob> wallbroken: if you want someone else to build this... first you need to take what you've learned, and write a specification... requirements.
[04:47:50] <wallbroken> FunkyBob: i asked a developer to fix a little problem on the view
[04:47:57] <wallbroken> he asked me 1000 USD
[04:48:12] <wallbroken> so, to build the entire app i need to sell my home?
[04:48:25] <FunkyBob> depends
[04:48:31] <n00bn00b> yup, depends
[04:48:40] <n00bn00b> but best savings are earned money
[04:48:43] <FunkyBob> engaging a contractor for a short term project is far more expensive than long term
[04:49:07] <wallbroken> FunkyBob: it's not X money for hour?
[04:49:14] <FunkyBob> wallbroken: no
[04:49:32] <FunkyBob> wallbroken: when I was contracting, I would drop my rate for guaranteed long term stable work
[04:49:55] <wallbroken> ok
[04:49:57] <FunkyBob> uncertainty is what the high prices are a guard against
[04:50:08] <n00bn00b> I also increase my rate if job looks unstable, unsatisfying
[04:50:31] <FunkyBob> n00bn00b: right, and you also have to ensure you have savings for the time without work
[04:50:39] <wallbroken> but how much an app like that (excluding support) should it cost?
[04:50:47] <n00bn00b> true
[04:50:53] <wallbroken> excluding bugfixing or change request
[04:51:00] <n00bn00b> wallbroken: tech debt :D
[04:51:11] <n00bn00b> wallbroken: creation is cheapest one
[04:51:11] <FunkyBob> wallbroken: it's hard to be sure... because we're still uncovering requirements from you
[04:51:35] <wallbroken> FunkyBob: now you know quite good what that app needs to do
[04:52:00] <FunkyBob> wallbroken: yes, bue experience (of you, and of this sort of work in general) tells me there's more to uncover
[04:52:00] <n00bn00b> more about architecture I learn, more problems in written code I see I could predict
[04:52:15] <n00bn00b> wallbroken: this is Your assumption
[04:52:21] <Rikem> Has the trust finally been revealed?
[04:52:26] <Rikem> truth*
[04:52:36] <n00bn00b> Rikem: which truth?
[04:52:37] <FunkyBob> wallbroken: I recommend you write some user stories. That is, as each person involved (store owner, warehouse user, business owner)  ... what do they want from the system?
[04:52:43] <n00bn00b> ;)
[04:52:45] <FunkyBob> wallbroken: what processes / actions do they need to peform?
[04:52:46] <PaulWay[w]> wallbroken: you've spent the last three months insisting that there was no such thing as an 'order' in this system.  And now it's our fault that we believed you?
[04:52:52] <Rikem> The wallbroken saga
[04:53:01] <PaulWay[w]> Yeah.  The wallbroken episode.
[04:53:09] <n00bn00b> Rikem: writing sequel imho
[04:53:10] <FunkyBob> PaulWay[w]: "storyline"
[04:53:41] <PaulWay[w]> "Book three, chapter eighteen.  'The client is displeased.'"
[04:53:44] <wallbroken> PaulWay[w]: https://www.dropbox.com/s/vf3ez09nxlqcato/Undtitled.png?dl=0
[04:53:50] <wallbroken> read the name of the third column
[04:53:59] <n00bn00b> wallbroken: take deep breath, go outside, shout in forest but dont hate other for code You have writtne
[04:54:33] <FunkyBob> wallbroken: again I point out... with the m2ms like that, a store can only order a particular Shoe _once_
[04:54:42] <FunkyBob> and you were ok with that.
[04:55:02] <PaulWay[w]> The way you're tracking an 'order' is completely wrong, and we told you so.
[04:55:06] <n00bn00b> PaulWay[w]: btw. wallbroken is probably from IT too
[04:55:20] <wallbroken> FunkyBob: i know
[04:55:21] <PaulWay[w]> Dude, you're 37.  This is childish.
[04:55:25] <n00bn00b> so garbage in /out would be well understanded
[04:55:30] <wallbroken> and i'm very sad about that
[04:55:45] <n00bn00b> PaulWay[w]: some never grows
[04:55:51] <n00bn00b> but they could
[04:55:55] <n00bn00b> but they wont
[04:56:00] <n00bn00b> because it is about responsibility
[04:56:15] <FunkyBob> wallbroken: so as I said before... start writing up user stories. it will help you plan
[04:56:22] <PaulWay[w]> n00bn00b: *shrugs* well, we have more to learn than just how Django works maybe.
[04:56:32] <FunkyBob> wallbroken: it will also help you design the pages
[04:56:40] <FunkyBob> and ensure the models are able to store the information you need
[04:56:49] <Rikem> Please don't blame IT
[04:56:54] * Rikem hides
[04:57:01] <FunkyBob> explaining what you want/need to another person can greatly improve your _own_ understanding of the problem.
[04:57:03] <PaulWay[w]> I don't think we are, Rikem - otherwise we'd all be in it.
[04:57:03] <n00bn00b> ofc PaulWay[w] and it is good :) hmm I dont know if sb would do good user stories if not have been teached to do some FunkyBob
[04:57:23] <n00bn00b> Rikem: I mean Italy, I reading wallbroken's blog
[04:57:42] <n00bn00b> I dont blame, but there were some idiomatic expression from PaulWay[w]
[04:57:45] <Rikem> There's a blog?
[04:57:49] <FunkyBob> n00bn00b: you speak Italian?
[04:58:25] <n00bn00b> on #libera I got banned for speaking, so no I no longer speak the language of freedom
[04:58:32] <PaulWay[w]> Heh
[04:58:33] <FunkyBob> if so , perhaps you can help with the docs translation effort :)
[04:58:39] <n00bn00b> FunkyBob: :))
[04:58:41] <n00bn00b> will see
[04:58:45] <n00bn00b> I like english
[04:58:53] <n00bn00b> I read books in EN
[04:59:24] <n00bn00b> I even read and buy books in EN because I like to read in that language; and some translations in PL are soooo baaaad
[04:59:24] <wallbroken> which blog?
[04:59:38] <wallbroken> the one linked in github's bio?
[04:59:47] <FunkyBob> ah, yes... PL is quite different to EN... translation is tricky
[04:59:53] <n00bn00b> wallbroken: yup, but Idk maybe this is not Yours?
[05:00:07] <wallbroken> yes, it's mine, but very old
[05:00:15] <Rikem> maybe they're the same person
[05:00:22] <n00bn00b> wallbroken: ez Mate, good work I deleted mine because of hatespeech to me
[05:00:26] <wallbroken> in the past i was very interested in OpenVPN, so i wrote down something on that
[05:02:07] <n00bn00b> FunkyBob: yup, but some non-tech translators do it like interface is "interfejs" and popular knowledge about is established but some try to translate other things like SOLID rules names and deeper and deeper i.e. microservices to micro "services" (word in Polish-uslugi)
[05:02:20] <n00bn00b> so they just hurt potential readers
[05:02:38] <n00bn00b> wallbroken: well done
[05:02:48] <n00bn00b> and always You could do better
[05:02:58] <wallbroken> FunkyBob: could I just ask you one little last help i asked yesterday, but you told me is tricky?
[05:03:02] <n00bn00b> and You could say "how could I write this blog/this app/ this letter to girl"
[05:03:09] <wallbroken> to order m2m row list
[05:03:12] <n00bn00b> but yup, you could but You done the best You could
[05:03:37] <FunkyBob> wallbroken: is this what you were asking about the other day?
[05:03:44] <wallbroken> yes
[05:03:45] <FunkyBob> about ordering the list in the input widget?
[05:03:48] <wallbroken> yes
[05:03:50] <FunkyBob> so it's NOT about ordering a m2m
[05:04:00] <wallbroken> yes, bad expressed, sorry
[05:04:13] <wallbroken> but is that you just told
[05:04:35] <FunkyBob> for everyone else here:  wallbroken wants the selected items to always appear at the top of the input list
[05:04:48] * n00bn00b crossing fingers / holding thumbs wallbroken would keep up  like moment ago and focus on making C:
[05:04:49] <FunkyBob> my solution would be to 1. customise the queryset for that field
[05:05:02] <FunkyBob> 2. annotate the queryset with if there is a relation... 3.  order by that
[05:05:19] <FunkyBob> it's not a complex process. it does require a few steps.
[05:05:31] <FunkyBob> anyone else see an easier solution?
[05:06:04] <n00bn00b> I dont know if I could say sth because not know domain well ;/ try to get from code
[05:07:24] <PaulWay[w]> FunkyBob: so something like a Prefetch object?
[05:07:39] <FunkyBob> PaulWay[w]: that step I haven't resolved yet
[05:08:04] <FunkyBob> more likely an annotate() on if there's a related record
[05:09:15] <PaulWay[w]> At what point are you annotating?
[05:09:37] <FunkyBob> in the form __init__
[05:09:47] <FunkyBob> so the list of choices are sortable
[05:09:54] <FunkyBob> possibly an EXISTS?
[05:10:06] <FunkyBob> schinckel: reckon it's possibly to ORDER BY EXISTS ?
[05:10:11] *** Joins: humbertowoody (~humbertow@2806:107e:f:47c1:42e:a029:b54:3720)
[05:10:15] <PaulWay[w]> In the form init.  Hmmmm.
[05:10:41] <PaulWay[w]> I suppose if it's a form then it's based on a model instance.
[05:10:56] <PaulWay[w]> I'm working with querysets too much.
[05:11:55] *** Quits: humbertowoody (~humbertow@2806:107e:f:47c1:42e:a029:b54:3720) (Client Quit)
[05:14:48] <PaulWay[w]> What if this was an ordering property of the model?
[05:15:01] <n00bn00b> why to order that?
[05:15:28] <n00bn00b> is that really such critical to order that queryset?
[05:15:33] <FunkyBob> well, my follow up was that expecting users to edit many M2M fields was a UX nightmare
[05:15:41] <FunkyBob> and they should focus on the process the user is performing.
[05:15:46] <FunkyBob> which exposed the need for an Order model
[05:16:00] <PaulWay[w]> Yes.
[05:16:04] *** Joins: masterasia (~Guest60@bras-base-toroon3642w-grc-48-184-144-104-13.dsl.bell.ca)
[05:16:24] <FunkyBob> "The fastst way to calculate something is to not calculate it."
[05:16:34] <FunkyBob> same goes for "The easiest way to solve the problem, is to avoid it."
[05:16:44] <PaulWay[w]> Yep.
[05:17:00] <wallbroken> so, what's the best proposal to highlight the selected rows on the top of the input list?
[05:17:19] <FunkyBob> and so we circle back to the same old problem... wallbroken ignoring our advice.
[05:17:28] <FunkyBob> wallbroken: it's the steps I outlined before
[05:17:48] <n00bn00b> FunkyBob: let's sum up
[05:17:48] <wallbroken> you asked to others if they know a better way
[05:17:59] <wallbroken> 2:35:31 AM - FunkyBob: anyone else see an easier solution?
[05:18:09] <n00bn00b> if I understand FunkyBob the UX (your UI) is badly designed now
[05:18:25] <n00bn00b> so we should make some new way to manage it
[05:18:31] <n00bn00b> (from user perspective)
[05:18:48] <n00bn00b> (on well designed models you would be likely not changing much in code)
[05:18:54] <n00bn00b> imho
[05:18:57] <n00bn00b> remember
[05:19:00] <n00bn00b> IMHO
[05:19:15] <n00bn00b> only mine not wallbroken not FunkyBob not PaulWay[w] , mine and I could be mistaken :)
[05:19:24] <FunkyBob> yeah... you could provide a much nicer user interface without having to change the models
[05:19:35] <FunkyBob> you could provide a vastly superior experience with corrected models.
[05:19:58] <wallbroken> FunkyBob: that's the reason why i'm trying to reach this little goal
[05:20:06] <wallbroken> can you help me in doing that?
[05:20:08] <n00bn00b> yup, and FunkyBob are too
[05:20:28] <n00bn00b> he and others are trying to discuss as You shown
[05:20:32] <FunkyBob> wallbroken: so, you already have a ModelForm for this ?
[05:20:33] *** Joins: humbertowoody (~humbertow@2806:107e:f:47c1:42e:a029:b54:3720)
[05:20:45] <n00bn00b> You even quoted the sentence starting discussion wallbroken
[05:20:57] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user/shoes/forms.py#L58
[05:21:50] <n00bn00b> ShoeCartForm(ModelForm)
[05:21:53] <n00bn00b> hmm
[05:21:58] <n00bn00b> wallbroken: do You use precommit?
[05:22:14] <n00bn00b> or other stuff like black and isort doing linting job for You?
[05:23:03] <wallbroken> well, there are just dependencies between m2m fields
[05:23:04] <n00bn00b> assume no because code looks inconsistent then - linting it on yourself if a drama, horror and rage in one
[05:26:56] <FunkyBob> wallbroken: so which field do  you want to start with?
[05:27:06] *** Quits: humbertowoody (~humbertow@2806:107e:f:47c1:42e:a029:b54:3720) (Quit: WeeChat 3.2)
[05:28:19] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:28:31] <wallbroken> delivered
[05:28:50] <FunkyBob> ok.
[05:28:52] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 245 seconds)
[05:29:05] <FunkyBob> first step is to add an override __init__ method for that form class.
[05:29:13] <FunkyBob> do you understand what __init__ does for a class?
[05:29:43] <schinckel> FunkyBob: You should be able to do an ORDER BY EXISTS(...), but is true < false?
[05:30:00] <FunkyBob> schinckel: DESCENDING :P
[05:30:17] <FunkyBob> or order by user__pk nulls last
[05:30:36] <schinckel> Turns out that false < true.
[05:30:49] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:31:20] <wallbroken> 2:59:13 AM - FunkyBob: do you understand what __init__ does for a class?  <<<< no
[05:31:40] <FunkyBob> wallbroken: you can think of it as the "constructor" for the class
[05:31:52] <PaulWay[w]> I'm trying to get the earliest HistoricReport date related to a current report - https://paste.centos.org/view/f72ae4c8
[05:32:05] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[05:32:25] <FunkyBob> wallbroken: we're going to "override' the default constructor, and do some work after the original one is done
[05:32:30] <PaulWay[w]> I'm getting a django.db.utils.ProgrammingError: more than one row returned by a subquery used as an expression
[05:32:42] <FunkyBob> schinckel: PaulWay[w]: has a subquery issue... that's on you :P
[05:32:49] <PaulWay[w]> Hah!
[05:32:55] <FunkyBob> PaulWay[w]: hey, he wrote SubQuery
[05:32:56] <FunkyBob> :P
[05:32:57] <PaulWay[w]> But I can't see why the Min() would have a problem with there being more than one row.
[05:33:16] <PaulWay[w]> Do I need to explicitly wrap it in a Subquery()?
[05:33:18] <PaulWay[w]> Let's try that.
[05:33:23] <FunkyBob> probably not
[05:33:29] <FunkyBob> I haven't looked at your code at all yet
[05:33:40] <PaulWay[w]> Ouch!
[05:33:44] <FunkyBob> aggregate over a related record should be annotate() and that's enough
[05:34:02] <schinckel> Yeah, I wouldn't have thought you need an explicit Subquery there.
[05:34:04] <masterasia> So I have a self-referential model for a file-system, a folder wants to show all documents that is public and all folders within itself that are public(it is public if at least one document/folder is public within it)
[05:34:05] <PaulWay[w]> Nope, makes no difference.
[05:34:08] <wallbroken> FunkyBob: ok
[05:34:18] <schinckel> PaulWay[w]: What SQL does that generate?
[05:34:25] <masterasia> how can I write this query? this is what I have so far: self.subfolders.annotate(
[05:34:26] <masterasia>                 number_of_public_documents=Count('documents', filter=Q(
[05:34:26] <masterasia>                     documents__private=False))).filter(number_of_public_documents__gte=1)
[05:34:29] <FunkyBob> wallbroken: so, do your form class add  "def __init__(self, *args, **kwargs):"
[05:34:32] <FunkyBob> masterasia: do not paste in here
[05:34:37] <FunkyBob> masterasia: please see topic for preferred paste sites
[05:34:43] <masterasia> oh okay
[05:35:07] <masterasia> https://dpaste.org/5R7s
[05:35:08] <FunkyBob> wallbroken: and all it will contain for now is a call to the init on the super class....  "return super().__init__(*args, **kwargs)"
[05:35:38] <masterasia> I have a feeling I'll have to save the 'public' status of the folders on the folder model itself to prevent myself from crawling down each folder to see if it is considered public
[05:35:57] <schinckel> masterasia: So you have a tree?
[05:36:00] <masterasia> yeah
[05:36:05] <PaulWay[w]> schinckel: https://paste.centos.org/view/5434d340
[05:36:12] <wallbroken> FunkyBob: ok, then?
[05:36:27] <PaulWay[w]> Which appears, at first eyeball, to be reasonable.
[05:36:33] <FunkyBob> wallbroken: so far, nothing should have changed. verfiy that.
[05:36:45] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[05:37:01] <schinckel> masterasia: You can use https://pypi.org/project/django-closure-tree/ to get a relatively easy to query structure so you can easily find all ancestors or descendants.
[05:37:20] <FunkyBob> schinckel: damn, that work pays off again? :)
[05:37:48] <schinckel> The gift that keeps on giving
[05:38:09] <FunkyBob> laziness applied wisely :)
[05:38:19] <masterasia> schinckel: I'm using mysql
[05:38:22] <masterasia> thanks though
[05:38:31] <masterasia> I will figure it out, thought I was missing something
[05:38:45] <schinckel> PaulWay[w]: I think maybe it's a subquery inside the Min() which is causing the problem?
[05:39:07] <PaulWay[w]> Yeah, probably - but I'm not sure how else to get that query...
[05:39:17] <schinckel> PaulWay[w]: What about ordering the subquery by the date, and then getting the first one?
[05:39:29] <wallbroken> FunkyBob: yes, nothing changed
[05:39:49] <FunkyBob> wallbroken: ok, next step is we want to re-define the queryset used by that field... the one it uses to list the available choices
[05:39:58] <schinckel> masterasia: Can mysql do recursive queries?
[05:40:14] <FunkyBob> wallbroken: so in  your __init_.... hmm, remove that "return", it's not needed in a __init__
[05:40:54] <FunkyBob> wallbroken: now, which model does delivered relate to?
[05:41:07] <masterasia> schinckel: it can but I think it'll be easier to do this in userland
[05:41:10] <masterasia> python code
[05:41:15] <masterasia> even if it is more inefficient
[05:41:48] <schinckel> But how will you get all of your objects without N queries for a tree depth of N?
[05:42:29] <PaulWay[w]> schinckel: well, this is weird - now I'm not in a subquery - in a subquery?  https://paste.centos.org/view/8bcd558c
[05:42:40] <schinckel> masterasia: Depending upon your model structure, you can make this a bit easier by having a "root" model type. Then you can fetch the data for a full tree, and then build it up in python.
[05:43:21] <schinckel> PaulWay[w]: Oh, sorry, you can't use .first(). You'll need to use [:1].
[05:44:05] <PaulWay[w]> And I can't use [0] either apparently
[05:44:08] <PaulWay[w]> Well that's amusing.
[05:44:24] <schinckel> You can slice it, just not index it.
[05:44:43] <schinckel> Because indexing (or using .first()) is a terminal thing - it causes the queryset to be evaluated.
[05:44:50] <schinckel> A slice just returns another queryset.
[05:45:03] <schinckel> Which django is clever enough to turn into a `LIMIT 1` in this case.
[05:45:30] <PaulWay[w]> OK, I knew that but didn't put that together in context.  Ta.
[05:45:35] <wallbroken> https://dpaste.org/Afsc
[05:45:41] <n00bn00b> hehe that would be cruel but why to make abstract base model and make one Document and other ConfidentialDocuments ;P
[05:46:16] <n00bn00b> masterasia: ^
[05:46:22] <FunkyBob> wallbroken: ok, but remove the 'return', that was a mistake on my part ;  __init__ doesn't return anything
[05:47:07] <wallbroken> ok
[05:47:41] <n00bn00b> having the private documents which could be "selected" somehow when human error is begging for problem imho
[05:47:51] <n00bn00b> I would rather separate these two
[05:48:01] <n00bn00b> different methods could apply
[05:48:10] <n00bn00b> then you count documents just
[05:48:25] <n00bn00b> (the private_documents would be sth else then)
[05:49:06] <PaulWay[w]> schinckel: so is that a hack to get around some problem with Min?  Or should I be doing that a different way?
[05:50:02] <schinckel> I think it's just a different way of looking at the same problem - the minimum date is just the first date when ordered by date.
[05:50:20] <FunkyBob> wallbroken: so... 'delivered_user' ... is a M2M to User, correct?
[05:50:27] <schinckel> It's probably not even going to be any different from the db perspective - it still needs to sort them to get the min/first.
[05:51:01] <FunkyBob> actually, we can build on the queryset it already has... easier
[05:51:02] <wallbroken> FunkyBob: delivered_user = models.ManyToManyField('auth.User', related_name='delivered_items', blank=True)
[05:51:38] <FunkyBob> wallbroken: so first we're going to order the queryset, just to show we can.
[05:53:45] <FunkyBob> wallbroken: into that init, after the call to super,  add "self.fields['delivered_user'].queryset = self.fields['delivered_user'].queryset.order_by('last_name')
[05:55:07] <FunkyBob> wallbroken: now if  you check your page, the list should be sorted by the users last name
[05:55:20] <FunkyBob> you could pick any field you want, not just last_name
[05:55:23] <FunkyBob> as an experiment
[05:57:26] *** Quits: clemente (~Daniel@balticom-142-72-136.balticom.lv) (Ping timeout: 272 seconds)
[05:58:47] <wallbroken> FunkyBob: which init are you referring to?
[05:59:31] <FunkyBob> __init__
[05:59:38] <tm007> .py
[05:59:43] <FunkyBob> tm007: no
[06:00:00] <FunkyBob> wallbroken: inside the __init__ method you just wrote, after the super().__init__ call... add that line
[06:00:13] <tm007> got it
[06:00:40] <FunkyBob> super() finds the class we're inheriting from... so super().__init_(*) is calling the 'default' __init__ we're overriding
[06:00:40] <wallbroken> https://dpaste.org/VwLw#L7
[06:00:45] <wallbroken> this is the line i wrote
[06:00:49] <wallbroken> you told me to remove the return
[06:00:58] <FunkyBob> yes, remove the 'return', but not the rest of the line
[06:01:02] <wallbroken> ok
[06:01:26] <FunkyBob> you still need super().__init__(*args, **kwargs) ... so that the default implementation of __init__ is still executed
[06:01:32] <FunkyBob> the one from the class we're extending
[06:01:49] <FunkyBob> these ideas you  should know from C#
[06:02:36] <wallbroken> https://dpaste.org/3LBN#L9
[06:03:01] <n00bn00b> Guys really, should I learn C#?
[06:03:05] <n00bn00b> :P
[06:03:14] <n00bn00b> I really not done it yet
[06:03:18] <n00bn00b> but I see it coming
[06:03:24] *** Joins: fros (~user@158.140.192.124)
[06:03:33] <FunkyBob> wallbroken: good... so, what does it look like that line is doing?
[06:03:53] <FunkyBob> n00bn00b: now that the .Net lib has matured, I hear generally good things about it
[06:04:04] <FunkyBob> n00bn00b: apparently the C# devs were heavily influenced by Python
[06:04:28] <n00bn00b> thx
[06:05:13] <n00bn00b> i think that also from classes in C# (quite common to deliver CS's classes in it on many collages/univs)
[06:05:33] <wallbroken> FunkyBob: it is modifying the queryset
[06:05:37] <wallbroken> applying an order by
[06:05:51] <FunkyBob> wallbroken: effectively, yes...
[06:05:53] <wallbroken> i just executed
[06:05:56] <wallbroken> but no see changes
[06:06:04] <FunkyBob> wallbroken: when you call order-by() on a queryset, it returns a new queryset
[06:06:08] <FunkyBob> that's why we need to assign over top
[06:06:23] <FunkyBob> wallbroken: try ordering by a different field?
[06:07:25] <wallbroken> what do you mean?
[06:08:22] <FunkyBob> which part?
[06:08:29] <wallbroken> your last sentence
[06:08:38] <FunkyBob> about ordering by a different field?
[06:09:07] <wallbroken> yes
[06:09:34] <FunkyBob> well, we ordered by last name, and you say you saw no difference
[06:09:38] <FunkyBob> how many users do you have?
[06:09:47] <FunkyBob> what's an ordering you think you _would_ notice?
[06:09:54] <FunkyBob> besides the complex one we're aiming for
[06:10:31] <wallbroken> FunkyBob: i tried all the cases
[06:10:39] <wallbroken> i tried to invert the selection
[06:10:40] <FunkyBob> what do you consider 'all the cases'?
[06:10:45] <wallbroken> but no differenced noticed
[06:10:50] <wallbroken> i have 2 users right now
[06:11:11] <FunkyBob> wallbroken: we're just tryting to order the list for now... this is not the final step
[06:11:14] <wallbroken> all the cases is: user 1 selected / user 2 unselected
[06:11:17] <FunkyBob> just priving we _can_ order
[06:11:24] <wallbroken> user 1 unselected / user 2 selected
[06:11:32] <FunkyBob> ...
[06:11:34] <wallbroken> oh ok
[06:11:44] <FunkyBob> so  you're testing things we haven't implemented yet
[06:11:45] <wallbroken> so it's ordered by default
[06:11:46] <FunkyBob> look at the code
[06:11:48] <FunkyBob> it's NOT magic
[06:11:51] <wallbroken> because first user is admin
[06:11:53] <FunkyBob> look at what it's saying to do
[06:11:54] <wallbroken> second user is ccc
[06:12:06] <wallbroken> so it' already ordered
[06:12:14] <FunkyBob> so pick something else to order by
[06:12:21] <FunkyBob> or order by username descending
[06:12:21] <wallbroken> for example?
[06:12:30] <FunkyBob> look at all you User fields... pick one
[06:12:33] <FunkyBob> one you'll notice
[06:12:55] <wallbroken> i'm not getting wht you say
[06:13:00] <wallbroken> :(
[06:13:20] <wallbroken> this is my current state: https://www.dropbox.com/s/vf3ez09nxlqcato/Undtitled.png?dl=0
[06:13:38] <wallbroken> all lists are ordered the same way
[06:14:00] <FunkyBob> wallbroken: we're trying to show we can change the ordering of that one field
[06:14:15] <wallbroken> yes i get that
[06:14:23] <FunkyBob> those are lists of Users
[06:14:24] <wallbroken> and i need to change the order_by() argument
[06:14:25] <wallbroken> right?
[06:14:28] <FunkyBob> right
[06:14:41] <wallbroken> which argument i need to put instead of the current one?
[06:14:44] <wallbroken> that's the question...
[06:14:46] <FunkyBob> change it to order_by('-username')  perhaps?
[06:14:49] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 246 seconds)
[06:14:51] <wallbroken> ok
[06:15:03] <FunkyBob> my suggestion was y ou pick ANY field... so long as you could tell it made a difference
[06:15:10] <FunkyBob> I don't know what values you've put in your user fields... YOU do
[06:15:18] <wallbroken> yes
[06:15:24] <wallbroken> now it's ordered differently
[06:17:34] <FunkyBob> ok. so proof we made a difference.
[06:17:53] <FunkyBob> now the remaining problem is working out how to order the user list by "are they already in the set?"
[06:18:14] <FunkyBob> the queryset, that is
[06:20:39] *** Joins: doc|work (~doc@user/doc)
[06:22:48] <wallbroken> how?
[06:24:29] <FunkyBob> am thinking something like annotate(selected=Exists(delivered__items=self.instance)).order_by('-selected')
[06:24:32] <FunkyBob> not sure if that will work
[06:26:25] <wallbroken> self.fields['delivered_user'].queryset = self.fields['delivered_user'].queryset.annotate(selected=Exists(delivered__items=self.instance)).order_by('-selected')
[06:26:38] <wallbroken> this way?
[06:28:37] <FunkyBob> yes
[06:29:07] <wallbroken> name 'Exists' is not defined
[06:29:11] <wallbroken> i need to import?
[06:29:17] <FunkyBob> yes
[06:29:33] <FunkyBob> i think it comes from django.db.models
[06:29:55] <wallbroken> __init__() missing 1 required positional argument: 'queryset'
[06:30:08] <FunkyBob> dpaste code + full traceback
[06:31:31] <FunkyBob> oh, i misused Exists
[06:31:34] <FunkyBob> on a call... back soon
[06:31:41] <wallbroken> https://dpaste.org/bCfS
[06:32:04] <wallbroken> https://dpaste.org/X8p9
[06:37:13] *** Joins: virtualsid (~virtual@dolt.mindless.co.uk)
[06:40:01] *** Joins: Elzington_ (~Elzington@static-198-54-128-36.cust.tzulo.com)
[06:41:58] <n00bn00b> have a good day guys 4am time to bed :)
[06:42:27] *** Quits: Elzington (~Elzington@static-198-54-128-62.cust.tzulo.com) (Ping timeout: 255 seconds)
[06:46:12] *** Quits: n00bn00b (~N00b@79.184.96.125.ipv4.supernova.orange.pl) (Ping timeout: 252 seconds)
[06:46:19] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[06:46:40] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[06:46:54] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Client Quit)
[06:50:02] *** Joins: djapo (~archangel@user/djapo)
[06:51:51] <FunkyBob> ok, back
[06:52:07] <FunkyBob> wallbroken: yeah, my mistake... Exists wants a queryset...
[06:53:45] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[06:58:02] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 245 seconds)
[07:16:15] *** Joins: rje (~rje@c-73-33-218-38.hsd1.nj.comcast.net)
[07:25:24] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[07:26:27] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:29:40] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[07:29:58] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 265 seconds)
[07:44:21] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:49:40] *** Quits: doc|work (~doc@user/doc) (Ping timeout: 246 seconds)
[07:53:54] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[07:56:05] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Client Quit)
[08:03:32] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:15:06] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:18:00] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[08:20:16] *** Quits: rje (~rje@c-73-33-218-38.hsd1.nj.comcast.net) (Quit: My computer has gone to sleep. ZZZzzz…)
[08:21:06] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[08:25:30] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 255 seconds)
[08:25:57] *** Joins: rje (~rje@c-73-33-218-38.hsd1.nj.comcast.net)
[08:26:10] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[08:27:31] *** Joins: Safa_[A_Boy] (~Safa@89.148.8.206)
[08:34:51] *** Quits: wallbroken (wallbroken@user/wallbroken) (Quit: Have a nice day)
[08:40:31] *** Quits: clawh_ (~clawh@185.244.214.60) (Remote host closed the connection)
[08:42:43] *** Joins: clawh (~clawh@185.244.214.60)
[08:44:26] *** Joins: SallyAhaj (sallyahaj@user/sallyahaj)
[08:47:42] <Safa_[A_Boy]> Hi all. How Can I filter a column added by extra?
[08:47:56] <Safa_[A_Boy]> .extra(select={'my_column': ...})
[08:50:54] *** Joins: wallbroken (wallbroken@user/wallbroken)
[08:56:46] *** Quits: rje (~rje@c-73-33-218-38.hsd1.nj.comcast.net) (Quit: My computer has gone to sleep. ZZZzzz…)
[08:57:15] *** Joins: rje (~rje@c-73-33-218-38.hsd1.nj.comcast.net)
[09:01:37] <FunkyBob> Safa_[A_Boy]: why are you using extra and not annotate?
[09:01:53] <Safa_[A_Boy]> It's a field added by a custom sql compiler
[09:02:26] <Safa_[A_Boy]> Now the filtering worked, but it seems that I need to add a group by clause (I'm selecting an aggregate function MIN)
[09:02:46] <Safa_[A_Boy]> That I have no idea how to do without resorting to RawSQL (which I try to avoid)
[09:02:51] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:03:34] *** Joins: ovnicraft (~ovnicraft@201.238.128.18)
[09:07:37] <FunkyBob> yah.. it's one of those things... the more you deviate from using the ORM, the harder it is to get the ORM to cooperate
[09:09:31] <FunkyBob> Safa_[A_Boy]: what is this custom SQL compiler doing that y ou can't do within the ORM?
[09:09:39] <Safa_[A_Boy]> CTE
[09:09:48] <FunkyBob> there are ways
[09:10:27] <FunkyBob> https://github.com/dimagi/django-cte for one
[09:10:31] <Safa_[A_Boy]> I'm just using django-tree-queries and need to filter the results
[09:10:35] <FunkyBob> schinckel: did you ever come with a clean solution/
[09:11:21] <FunkyBob> wonder how close that is to https://github.com/funkybob/django-closure-tree
[09:11:52] *** Quits: Elzington_ (~Elzington@static-198-54-128-36.cust.tzulo.com) (Ping timeout: 272 seconds)
[09:12:11] *** Joins: sandeepk (~sandeepk@223.130.30.125)
[09:12:40] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[09:12:50] *** Joins: Elzington (~Elzington@static-198-54-128-78.cust.tzulo.com)
[09:13:05] <Safa_[A_Boy]> That's interesting, but I'd prefer a solution that supports sqlite for development :)
[09:13:15] <Safa_[A_Boy]> (not ideal, but not bad. Works (TM))
[09:13:48] <FunkyBob> never looked into cross compat...
[09:14:07] <FunkyBob> i mean, I develop on PG just like I deploy on it, so...
[09:14:31] *** Quits: rje (~rje@c-73-33-218-38.hsd1.nj.comcast.net) (Quit: rje will be back)
[09:17:50] <schinckel> Haven't really got a clean CTE solution. Not really pressing for me since most of my CTE use is really complex and inside DB functions because I'm still on a version of PG that doesn't push down filters into a CTE.
[09:18:23] <schinckel> I wonder if django-closure-tree would work with minimal changes on SQLite.
[09:20:55] <schinckel> Looks like it would require turning our recursive view into a recursive CTE view.
[09:21:35] <serafeim> hello friends
[09:22:20] <serafeim> let's suppose i want to publish a package that has package X as a requirement. what happens if the user has installed another package that also has X as a requirement but with a different version ?
[09:22:46] <schinckel> FunkyBob: We could have different strings based on db backend - we have access to schema_editor.connection in there.
[09:22:48] <serafeim> i know that in the node.js world that thing is resolved by each package having its own requirements leading to a node_modules hell. but what about python
[09:23:13] <schinckel> serafeim: It does depend somewhat an what the user is using to manage dependencies.
[09:23:39] <serafeim> schinckel: let's suppose he's using venv + pip like most users
[09:23:50] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[09:24:03] <schinckel> venv+pip IIRC does not do much dependency version management.
[09:24:16] <schinckel> poetry does, so does pipenv.
[09:24:55] <serafeim> schinckel: so if he's using venv + pip he's doomed? he can't use my package ?
[09:24:58] <schinckel> Safa_[A_Boy]: I'm happy to review a PR that adds support for SQLite to django-closure-tree
[09:25:09] <FunkyBob> iirc pip got a lot stronger with dependency resolution recently
[09:25:15] <schinckel> Oh, okay.
[09:25:21] <schinckel> Maybe it will do some stuff then.
[09:25:27] <FunkyBob> caused us some small troubles
[09:25:51] <schinckel> But if you have two packages that each have conflicting dependency requirements, then really they should _not_ be able to be installed together.
[09:26:02] <schinckel> poetry will refuse to install under these circumstances.
[09:26:06] <FunkyBob> agreed
[09:26:15] <schinckel> Which is why library authors need to be careful about pinning their dependencies.
[09:26:39] <serafeim> ah ok so i have to use more slack dependencies instead of pinning them to a specific version
[09:26:45] <schinckel> (Specifically, upper-bounds pinning, because it is reasonable to say "this version or later")
[09:26:57] <schinckel> Our _project_ does not pin dependencies unless necessary.
[09:27:10] <schinckel> Then we rely on `poetry lock` to build a reasonable set of locked dependencies.
[09:27:17] <schinckel> Which is used for building/CI.
[09:27:55] <serafeim> well at least for django packages it is not common to find packages with dependencies
[09:28:12] <serafeim> out of the top of my head, the only django package that has other dependencies is wagtail
[09:28:28] <serafeim> everything else i'm using is more or less standalone
[09:30:48] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 265 seconds)
[09:39:46] *** Quits: Elzington (~Elzington@static-198-54-128-78.cust.tzulo.com) (Ping timeout: 258 seconds)
[09:43:45] <PaulWay[w]> Developing on one DB engine and running another in production isn't really ... devops, is it?
[09:43:46] <PaulWay[w]> :-)
[09:45:17] <Safa_[A_Boy]> It is not and I'm aware, but currently I don't want to make my development setup more complicated. I test things regularity as well
[09:45:54] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[09:45:59] *** Joins: djapo (~archangel@user/djapo)
[09:46:24] <PaulWay[w]> Maybe look at it the other way around and making your development setup a little bit more complicated (as a once off, hopefully) in order to make your production process more reliable?
[09:50:30] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 272 seconds)
[09:50:31] *** Joins: Elzington (~Elzington@static-198-54-128-110.cust.tzulo.com)
[09:50:35] <PaulWay[w]> Does sqlite3 support the EXISTS keyword?
[09:53:50] *** Quits: hemebond (~james@240b:12:12e2:f00:5604:a6ff:fe2c:50df) (Remote host closed the connection)
[09:58:06] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 250 seconds)
[10:03:10] *** Quits: ovnicraft (~ovnicraft@201.238.128.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:32] *** Joins: Crassus (~Crassus@user/crassus)
[10:06:24] <schinckel> https://www.sqlitetutorial.net/sqlite-exists/
[10:06:40] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[10:07:11] <serafeim> let's suppose I've got a `fk = models.ForeignKey("Model")` field. what's the difference of adding 1. `null=True`, 2. `blank=True` and 3. `blank=True, null=True` ?
[10:07:47] <schinckel> blank=True does not on it's own remove the NOT NULL constraint on the column.
[10:09:37] <serafeim> so it's ignored ?
[10:10:04] <serafeim> will it be the same if i use `null=True` and `blank=True, null=True` ? i'm aksing particularly for the ForeignKey field
[10:10:32] <bparker> the difference is that blank= is just a form validation thing
[10:10:37] <schinckel> Yeah, that.
[10:10:41] <bparker> and null= is (also) a database validation thing
[10:10:56] <serafeim> hm interesting thanks
[10:11:08] <serafeim> bparker: i have never thought of that explanation
[10:11:20] <schinckel> But if you have _just_ null=True set, then your django code will trigger ValidationErrors if there is no value.
[10:11:30] <schinckel> Which is useful on a field that was added after initial model creation.
[10:11:42] <schinckel> You might have rows without values, but don't want new or updated rows to not have values.
[10:12:29] <serafeim> schinckel: `You might have rows without values, but don't want new or updated rows to not have values.`: you mean I will use null=True in this case
[10:12:39] <schinckel> Yeah.
[10:12:48] <serafeim> so it will allow the existing rows to be null but the django forms will complain if the value is blank
[10:12:50] <serafeim> very nice
[10:12:59] <schinckel> Because otherwise you wouldn't be able to create that column, the database would not allow it.
[10:13:25] <serafeim> schinckel: yes the migrations will need me to either add a default value to the model or define something in the migration
[10:13:44] <bparker> and with just null=True it won't be possible to set a new FK to any form of 'nothing' at least via django interfaces, afaik
[10:14:18] <bparker> unless you bypass forms/validation
[10:15:07] *** Joins: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net)
[10:15:11] <Steve-Dusty> Hello
[10:15:14] <bparker> hi
[10:15:28] <serafeim> thank you
[10:15:29] *** Quits: Elzington (~Elzington@static-198-54-128-110.cust.tzulo.com) (Ping timeout: 255 seconds)
[10:15:34] <Steve-Dusty> https://dpaste.org/zEWf I have this code
[10:15:49] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[10:15:53] <Steve-Dusty> and this code https://dpaste.org/1mFr
[10:16:10] <Steve-Dusty> And I get error not sure what I need to change in {% url 'addTask' %}
[10:16:38] <bparker> you have views not in an app folder? or you put urls inside an app folder?
[10:16:53] <Steve-Dusty> It's in an app folder
[10:17:15] <Steve-Dusty> I just know the relationship is between these files
[10:17:18] <Steve-Dusty> the error
[10:17:22] <schinckel> addTask wants an argument room_code
[10:17:36] <Steve-Dusty> https://dpaste.org/history/#L5 here's the error
[10:17:47] <Steve-Dusty> I know, but Im  not sure how I should put it as
[10:18:10] *** Joins: Elzington (~Elzington@static-198-54-128-110.cust.tzulo.com)
[10:19:02] <bparker> {% url 'foo' var=val %}
[10:19:41] <Steve-Dusty> so I do room_code?
[10:19:47] <Steve-Dusty> do I just put room_code?
[10:20:04] <schinckel> Where should the room code come from?
[10:21:06] <GinFuyou> You should put it into the context if you already have one. If you don't you first need view to create it
[10:21:07] <Steve-Dusty> https://dpaste.org/CoL6
[10:21:20] <Steve-Dusty> Ginfu!
[10:22:05] <Steve-Dusty> I'm doing this in 2 apps
[10:22:16] <Steve-Dusty> do I need to create a context for room_code?
[10:22:43] <GinFuyou> Well, it has to come from somewhere
[10:23:05] <Steve-Dusty> on line 30 it's just task.id
[10:23:11] <GinFuyou> pastebin generate a code when snippet is created and redirect you to url with it
[10:25:07] <GinFuyou> not enough also. But task could pick it from itself, since it's related to room (if you didn't change anything)
[10:25:34] *** Joins: Elzington_ (~Elzington@static-198-54-128-78.cust.tzulo.com)
[10:25:47] <Steve-Dusty> wait
[10:25:50] <Steve-Dusty> You see on line 30
[10:25:57] <Steve-Dusty> it's {% url 'toggleTask' task.id %}
[10:26:17] <Steve-Dusty> How do I add room_code in there?
[10:26:37] <Steve-Dusty> Do I do {% url 'toggleTask' room_code task.id %}?
[10:26:51] <bparker> yes, or use the names
[10:26:52] <Steve-Dusty> does it automatically add a slash?
[10:26:59] <bparker> yes
[10:27:02] <Steve-Dusty> ok
[10:27:13] <schinckel> I think you can turn off add-slashes, if you don't like them.
[10:28:02] <bparker> I thought they meant the slashes (and other text) inbetween the other parts of the URL besides the variables
[10:28:21] *** Quits: Elzington (~Elzington@static-198-54-128-110.cust.tzulo.com) (Ping timeout: 255 seconds)
[10:28:41] <bparker> I wouldn't assume it would add a trailing slash if the pattern doesn't have one
[10:29:09] <bparker> but not sure
[10:29:54] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:52:36] *** Quits: fros (~user@158.140.192.124) (Ping timeout: 252 seconds)
[10:54:10] <serafeim> hey friends is anybody using github copilit?
[10:54:16] <serafeim> i find it crazy.
[10:54:43] <serafeim> it doesn't only autocomplete my code but it autocompletes my blog posts (i'm writing markdown in VSCode). it seems to know what I'll want to write
[10:55:03] <serafeim> this is out of this world experience
[10:55:56] <serafeim> if you don't have ethical problems i recommend to try it ASAP. you'll be blown away
[10:56:48] <Steve-Dusty> I have it
[10:57:02] <Steve-Dusty> it just takes code from github open source
[10:57:10] <Steve-Dusty> i got it to leak someone's API keys
[10:57:28] <serafeim> Steve-Dusty: no, not only. as i said it helps me write blog posts.
[10:57:37] <Steve-Dusty> it trains
[10:57:42] <Steve-Dusty> I can't get it to write assembly
[10:58:57] <serafeim> ha ha really ?
[10:59:07] <serafeim> it works with english though
[10:59:27] <serafeim> but not with greek :)
[11:00:46] *** Quits: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[11:06:59] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[11:16:15] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[11:16:52] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[11:19:13] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[11:19:26] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 258 seconds)
[11:23:59] <serafeim> i've written a new blog post about django for anybody interested: https://spapas.github.io/2021/07/15/django-choices-to-fk-using-migrations/
[11:26:46] *** Quits: Elzington_ (~Elzington@static-198-54-128-78.cust.tzulo.com) (Ping timeout: 272 seconds)
[11:29:11] *** Joins: Elzington (~Elzington@static-198-54-128-108.cust.tzulo.com)
[11:35:38] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:37:28] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[11:43:50] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:56:33] *** Quits: audiocat (~audio@2603-8081-1800-00ad-2d8c-df58-6f9e-6622.res6.spectrum.com) (Ping timeout: 255 seconds)
[11:56:46] *** Joins: LazyCrayz (~LazyCrayz@ip184-190-161-153.ph.ph.cox.net)
[12:10:28] <Kim^J> serafeim: Your adblock detection is broken.
[12:10:44] <serafeim> Kim^J: why ? doesn't it display the red thingie ?
[12:10:50] <Kim^J> It does.
[12:10:54] <serafeim> so ?
[12:11:00] <Kim^J> I have no adblocker.
[12:11:04] <serafeim> ha ha ha ha
[12:11:10] <serafeim> so you see both ads and the red thingie ?
[12:11:13] <Kim^J> Yes.
[12:11:16] <serafeim> well duh
[12:11:42] <serafeim> yes you are right
[12:12:13] <serafeim> very strange
[12:12:29] <serafeim> and its a pita to debug it :(
[12:12:48] <Kim^J> So, don't have it?
[12:15:12] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:23:55] <schinckel> Maybe it's OS-level adblocking? Safari does that.
[12:24:29] <serafeim> no because in my firefox i see both the ads and the red warning. so my ad detection is problematic
[12:24:49] <serafeim> ah ok now i think i fixed it by increasing some timeouts
[12:24:59] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[12:25:33] *** Joins: benbacardi (~benbacard@91.206.1.124)
[12:25:54] <serafeim> the ad serving code took too long to load (more than 1 s) so the script thought that it wouldn't load at all.. now i increased the timeout to run the ad detect script to 5s and it seems to detect that the ads are working. of course i don't want to think what would happen on a slow connection
[12:26:20] <serafeim> the whole ads thing is so broken that it hurts me greatly that i need to deal with such dirty things
[12:26:29] <serafeim> but it's a small income for me (like 70 euros per year)
[12:28:23] <serafeim> i used to have a donations button with buymeacoffee but i had various other problems with it, mainly the fact that paypal is even more broken
[12:28:51] <serafeim> i almost lost my money from that. so i just use google ads now
[12:31:08] *** Joins: n00bn00b (~N00b@79.184.96.125.ipv4.supernova.orange.pl)
[12:48:13] *** Joins: lbracher (~lbr@77.109.97.9.adsl.dyn.edpnet.net)
[12:54:22] *** Joins: pycode (~pycode@2001:b07:5d28:551:4e97:8b04:5748:758e)
[13:04:03] *** Joins: Rikem (~mike@user/rikem)
[13:04:27] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[13:05:27] <wallbroken> FunkyBob: self.fields['delivered_user'].queryset = self.fields['delivered_user'].queryset.annotate(selected=Exists.queryset(delivered__items=self.instance)).order_by('-selected')
[13:05:29] <wallbroken> THIS WAY?
[13:06:22] <FunkyBob> wallbroken: stop making up stuff.... where did you ever see Exists.queryset?  show me in the docs
[13:08:47] <FunkyBob> wallbroken: or are you just guessing it has a .queryset property because the field does?
[13:08:50] <wallbroken> FunkyBob: well, you told that exists wants queryset
[13:08:59] <wallbroken> and i tried doing that way
[13:09:01] <FunkyBob> by that reasoning,  you'd expect a duck to have keyhole because your house does
[13:09:06] <FunkyBob> wallbroken: yes, it wants a queryset
[13:09:11] <FunkyBob> that means you pass it a queryset
[13:09:21] <FunkyBob> not pretent it has a queryset property
[13:09:28] <FunkyBob> pretend, even
[13:10:14] *** Joins: hemebond (~james@240b:12:12e2:f00:5604:a6ff:fe2c:50df)
[13:10:55] <FunkyBob> anyway, time for me to hit the gym
[13:11:03] <wallbroken> so
[13:11:10] <FunkyBob> maybe someone else here can help you work out how to order the Users
[13:11:13] <wallbroken> what is the right way?
[13:11:16] <hemebond> 🥵
[13:11:42] *** Quits: pycode (~pycode@2001:b07:5d28:551:4e97:8b04:5748:758e) (Ping timeout: 255 seconds)
[13:11:48] <wallbroken> what is the right way to pass the queryset?
[13:11:52] <FunkyBob> the right way to use Exists?  pass it a queryset, like it shows in the docs
[13:12:03] <FunkyBob> you don't know how t o pass values as arguments now???
[13:15:45] <wallbroken> FunkyBob: i can't just pass queryset()
[13:16:06] <wallbroken> self.fields['delivered_user'].queryset = self.fields['delivered_user'].queryset.annotate(selected=Exists(queryset(delivered__items=self.instance))).order_by('-selected')
[13:16:50] *** Joins: doev (~doev@p549d74f6.dip0.t-ipconnect.de)
[13:17:32] *** Quits: rpkilby__ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[13:17:56] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238a:b172:81b5:6687:ac43:e790)
[13:18:06] <FunkyBob> again with making up things
[13:18:18] <FunkyBob> i'm out... gotta get to the gym
[13:20:06] <wallbroken>  self.fields['delivered_user'].queryset = self.fields['delivered_user'].queryset.annotate(selected=Exists(self.fields['delivered_user'].queryset(delivered__items=self.instance))).order_by('-selected')
[13:20:22] <wallbroken> 	
[13:20:22] <wallbroken> 'QuerySet' object is not callable
[13:22:19] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238a:b172:81b5:6687:ac43:e790) (Remote host closed the connection)
[13:32:48] <benbacardi> What are you actually trying to do? :-/
[13:39:12] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[13:45:55] *** Quits: doev (~doev@p549d74f6.dip0.t-ipconnect.de) (Quit: Client closed)
[13:46:14] *** Joins: doev (~doev@p549d74f6.dip0.t-ipconnect.de)
[13:46:20] *** Joins: pycode (~pycode@2001:b07:5d28:551:e0a8:30f8:63ec:2567)
[13:50:49] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[13:53:10] *** Quits: LazyCrayz (~LazyCrayz@ip184-190-161-153.ph.ph.cox.net) (Quit: Client closed)
[13:54:37] *** Joins: slav0nic (slav0nic@python.su)
[13:58:30] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[14:18:45] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[14:19:51] <serafeim> I am trying to add a modelform so that it will edit the users of a group. Something like that: https://dpaste.org/mXfQ
[14:20:00] <serafeim> however this complains thatt `django.core.exceptions.FieldError: Unknown field(s) (user_set) specified for Group`
[14:20:09] *** Joins: Ratiosu (~RatiosuGu@185.5.164.28)
[14:20:11] <serafeim> although Group *definitely* has a `user_set` field.
[14:20:33] <serafeim> am i doing something wrong? is it even possible to have such functionality ?
[14:20:55] <Ratiosu> Hey Djangonaut :)  A question regarding `bulk_create`.. does it always preserve order? Like can I be 100% sure?
[14:22:18] *** Quits: pucko (~pucko@static.244.198.216.95.clients.your-server.de) (Quit: pucko)
[14:23:35] <serafeim> i have found this solution that explicitly addds a ModelMultipleChoice to the form: https://stackoverflow.com/questions/6097210/assign-user-objects-to-a-group-while-editing-group-object-in-django-admin
[14:23:47] <serafeim> but why this can't be done automatically ?
[14:27:02] <hemebond> serafeim: Isn't user_set a dynamic field created as a M2M reverse to the User objects?
[14:27:10] <serafeim> yes i guess
[14:27:28] <hemebond> I thought it was a manager or something.
[14:27:42] <hemebond> https://docs.djangoproject.com/en/3.2/ref/contrib/auth/#group-model
[14:28:01] <serafeim> yes group only has the name.
[14:28:41] <serafeim> but since i can edit the groups of a user from the user page why can't i also edit the users of a group from the group page ?
[14:28:53] <serafeim> the relation between user group and their intermediate table is exactly the same
[14:29:39] <serafeim> i mean the only extra thing the User model has is a `groups = models.ManyToManyField(Group)` declaration
[14:29:45] <hemebond> Well not quite the same. User has a field for it.
[14:29:48] <serafeim> so ?
[14:30:08] <hemebond> So that's what the admin uses to create things for you automatically.
[14:30:17] <serafeim> why can't it also use the user_set ?
[14:30:25] *** Quits: pycode (~pycode@2001:b07:5d28:551:e0a8:30f8:63ec:2567) (Ping timeout: 246 seconds)
[14:30:31] <serafeim> that's what i can't understand
[14:30:34] <hemebond> Because that's not really a field I don't think.
[14:31:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:31:20] <serafeim> hemebond: yes the user_set is a generated reverse relation field... but it is the same as groups (i.e they both don't have anyything to do with the database)
[14:31:26] <benbacardi> No, it's not a field. It's a field on the *other* model
[14:31:43] <hemebond> It's not a field though. I think it's a manager or something. I'm still trying to find docs on it.
[14:31:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:32:35] <serafeim> here's the docs https://docs.djangoproject.com/en/3.2/topics/db/queries/#backwards-related-objects
[14:32:36] <hemebond> https://docs.djangoproject.com/en/3.2/topics/db/queries/#related-objects
[14:33:10] <hemebond> Okay, your's is a better link. So it is a Manager.
[14:33:24] <serafeim> i know them :) the thing is that i believe that it *should* have been possible to add that functgionality i'm proposing
[14:33:30] <serafeim> and i can't understand why it aint possible
[14:33:57] <hemebond> Well it _is_ possible to write an admin form that allows for it. But you'll have to set it up yourself.
[14:35:51] *** Joins: pycode (~pycode@2001:b07:5d28:551:af39:fe5:149:ad69)
[14:36:13] <serafeim> yes i guess
[14:36:17] *** Joins: pucko (~pucko@static.244.198.216.95.clients.your-server.de)
[14:39:37] *** Quits: Ratiosu (~RatiosuGu@185.5.164.28) (Quit: Client closed)
[14:40:42] <hylje> i vaguely recall admin at least used to have a problem with inline-admins on "reverse" m2ms
[14:40:52] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[14:40:59] <hylje> if i remember wrong, it's a matter of replacing or modifying the group admin to have a user inline
[14:41:18] <hylje> (but beware that some groups can have a LOT of users, so a very long list of inlines!)
[14:42:27] <hemebond> The inlines I saw while googling just now were still from the main model.
[14:42:57] <hemebond> Couldn't find any obvious solution.
[14:44:06] <hylje> the only real difference between either side of a m2m is that the reverse side field has concrete=False
[14:44:35] *** Quits: pycode (~pycode@2001:b07:5d28:551:af39:fe5:149:ad69) (Ping timeout: 255 seconds)
[14:44:41] <hemebond> Does it have a field?
[14:44:44] <hemebond> *Field
[14:45:12] <hylje> yes, you can have a look yourself in python (django) shell by importing the model and checking Model._meta.get_fields()
[14:45:41] <hylje> they're all fields
[14:49:08] *** Joins: alexhenman (~alexhenma@2001:470:69fc:105::c018)
[14:49:16] *** Joins: knbk_ (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[14:49:21] <hemebond> class ManyToManyRel(ForeignObjectRel):
[14:49:39] <hemebond> It's not a Field
[14:50:03] <hemebond> <ManyToManyRel: auth.user>
[14:51:00] <hemebond> I'm surprised I couldn't find an admin addon that added support for it.
[14:52:27] *** Joins: damiox (~damiox@90.68.29.53)
[14:53:14] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 272 seconds)
[14:54:42] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[14:54:45] *** Parts: alexhenman (~alexhenma@2001:470:69fc:105::c018) ()
[15:06:19] *** Joins: Guddu (~Guddu@223.177.43.7)
[15:28:10] *** Quits: doev (~doev@p549d74f6.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[15:28:21] <wallbroken> FunkyBob: still here?
[15:37:58] <FunkyBob> back now
[15:38:31] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[15:41:31] <wallbroken> ok
[15:41:38] <wallbroken> we need to add the queryset
[15:41:42] <wallbroken> to Exists
[15:41:47] <wallbroken> but i don't know how
[15:44:32] <FunkyBob> we need to resolve the ordering issue... Exists _might_ be the way forward, yes
[15:46:02] <wallbroken> yes
[15:46:07] <FunkyBob> schinckel: what do you reckon? use self.instance.relation_name.filter(pk=OuterRef('pk')) ?
[15:46:11] <wallbroken> tell me what i need to do
[15:46:12] <FunkyBob> I can't remember the proper field name
[15:46:31] <FunkyBob> or try to use the through table?
[15:48:55] *** Joins: pycode (~pycode@2001:b07:5d28:551:54a6:730c:4aee:a9b9)
[15:49:56] *** Joins: shangxiao (~davids@101.181.108.207)
[15:51:12] *** Quits: clemente (~Daniel@balticom-142-72-136.balticom.lv) (Ping timeout: 268 seconds)
[15:52:08] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[15:54:37] *** Joins: clawh (~clawh@185.244.214.60)
[15:54:54] *** Quits: hemebond (~james@240b:12:12e2:f00:5604:a6ff:fe2c:50df) (Read error: Connection reset by peer)
[15:58:43] *** Joins: slav0nic (slav0nic@python.su)
[15:59:06] <wallbroken> FunkyBob: here?
[15:59:15] <wallbroken> you expect i do something?
[16:00:57] <shangxiao> Hi folks.  I have a simple api view, not using REST. If I want to setup a simple token based authentication, what are my options (besides using DRF)?
[16:01:40] *** Joins: kostkon (~androirc@ob21aa.static.otenet.gr)
[16:02:04] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:03:54] <FunkyBob> wallbroken: not realy, yet
[16:04:08] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[16:04:09] <FunkyBob> shangxiao: why do you want token auth?
[16:05:08] <FunkyBob> wallbroken: I'm trying to figure out a query that will get you the ordering you want
[16:08:06] <shangxiao> FunkyBob: just something simple that the client can use from something like curl or whatever and that they can rotate… 
[16:08:28] <FunkyBob> wallbroken: in Exists try passing self.instance.delivered_user.filter(pk=OuterRef('pk'))  .... OuterRef comes from django.db.models I think
[16:08:34] <shangxiao> (ie it's not for the frontend)
[16:08:37] <FunkyBob> shangxiao: so you need to delegate rights?
[16:09:00] <shangxiao> not sure what you mean
[16:09:01] <FunkyBob> shangxiao: but you don't need a 3rd party issuer?
[16:09:08] <shangxiao> ah no
[16:09:21] <FunkyBob> shangxiao: you need to be able to give a token to a service so it can act as a user, with a limited sub-set of their permissions
[16:09:51] <FunkyBob> a while back I got sick of all the people equating APIs with a need for token auth, so I wrote some blog posts to clear my thinking
[16:10:05] *** Quits: pycode (~pycode@2001:b07:5d28:551:54a6:730c:4aee:a9b9) (Ping timeout: 255 seconds)
[16:10:33] <wallbroken> FunkyBob: it works, thank you
[16:10:58] <FunkyBob> ok... that shouldn't order anything yet...
[16:11:15] <FunkyBob> or did you include the order_by() for the annotated field?
[16:11:17] <FunkyBob> I can't remember
[16:11:31] <wallbroken>  self.fields['delivered_user'].queryset = self.fields['delivered_user'].queryset.annotate(selected=Exists(self.instance.delivered_user.filter(pk=OuterRef('pk')))).order_by('-selected')
[16:11:35] <FunkyBob> shangxiao: latest 3 blog posts -- https://blog.tinbrain.net/blog/index.html
[16:11:42] <FunkyBob> shangxiao: as for solution... they might help you
[16:11:52] <FunkyBob> wallbroken: ok, cool
[16:12:36] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 255 seconds)
[16:13:40] <wallbroken> but there is a bug
[16:13:45] <wallbroken> it works only for an item
[16:14:11] <wallbroken> oh wait
[16:14:13] <wallbroken> let me do some tests
[16:15:03] <shangxiao> FunkyBob: ok so yep pretty much this: "you need to be able to give a token to a service so it can act as a user, with a limited sub-set of their permissions"
[16:15:10] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[16:15:35] <shangxiao> curl / bash script / some automated service.  not sure how this will progress as of yet.
[16:15:59] <wallbroken> ok, now it's ok
[16:16:00] <wallbroken> thanks
[16:18:48] <serafeim> all right
[16:18:50] <serafeim> here's a funny thing
[16:19:14] <serafeim> i wanted to create an app named GroupsEx
[16:19:28] <serafeim> to have some better groups than the django.auth provided ones
[16:20:13] <serafeim> now
[16:20:24] <serafeim> the name of the app is groupsex
[16:20:27] <serafeim> or... group sex
[16:20:34] <serafeim> so i'll better think of another name :)
[16:21:20] <shangxiao> remember the old domain name expertsexchange.com ?
[16:22:08] <shangxiao> So Django core has unsigned token generation for its user emails right? 🤔
[16:22:41] <FunkyBob> yes
[16:22:58] <FunkyBob> it's fairly flexible, too
[16:23:59] <jor> serafeim: no, the problem is not the name, it's the person reading it ;p
[16:24:02] <serafeim> lol yes
[16:24:41] <serafeim> jor: ha ha yes probably but lots of persons are naughty and i don't want to give them food for comments
[16:25:51] *** Joins: hemebond (~james@240b:12:12e2:f00:5604:a6ff:fe2c:50df)
[16:28:40] <jor> serafeim: the real problem with the name is that 'ex' abbreviation usually associated with previous/old/obsolete. Not 'extended' or 'extra' like you probably mean here :)
[16:30:53] <schinckel> Pen Island is my favourite.
[16:36:04] *** Joins: thiras (~thiras@user/thiras)
[16:39:07] <FunkyBob> schinckel: you like the Pen Island?
[16:46:36] *** Quits: killjoy (~nameless@user/killjoy) (Ping timeout: 272 seconds)
[16:47:42] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Ping timeout: 255 seconds)
[16:50:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[16:51:12] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[16:52:39] *** Joins: pycode (~pycode@2001:b07:5d28:551:6c85:a257:8ba0:4ae3)
[16:54:31] *** Joins: killjoy (~nameless@user/killjoy)
[16:56:32] <serafeim> hmm well i had seen the `ex` extension to some other projects and thought of using it. but maybe you are right. i cant use it now anyway :)
[17:03:00] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[17:08:46] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[17:15:37] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:15:55] <shangxiao> Does Django support unique indexes from Meta.indexes? (ie not a UniqueConstraint)
[17:18:33] <shangxiao> was hoping to setup a unique index on a jsonb field's attribute like so: `CREATE UNIQUE INDEX unique_name on organisation( (data->>'name') )`
[17:19:16] *** Parts: magamo (~magamo@pool-71-187-30-17.nwrknj.fios.verizon.net) ()
[17:19:30] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Remote host closed the connection)
[17:20:08] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[17:21:41] *** Quits: sandeepk (~sandeepk@223.130.30.125) (Ping timeout: 258 seconds)
[17:21:56] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[17:24:08] *** Joins: sandeepk (~sandeepk@223.130.30.125)
[17:26:25] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:32:28] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[17:32:45] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[17:36:03] *** Joins: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net)
[17:44:46] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Ping timeout: 265 seconds)
[17:45:02] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[17:47:23] *** Joins: saschi (~saschi@user/saschi)
[17:47:23] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[17:52:01] <FunkyBob> shangxiao: now is a unique constraint not a unique index?
[17:52:29] <shangxiao> unique constraints don't support expressions apparently 🤷‍♂️
[17:53:19] <FunkyBob> agh
[18:00:10] *** Quits: Damianz (~damian@user/damianz) (Remote host closed the connection)
[18:08:47] *** Quits: benbacardi (~benbacard@91.206.1.124) (Quit: Client closed)
[18:14:28] *** Joins: benbacardi (~benbacard@91.206.1.124)
[18:26:45] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:29:35] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 255 seconds)
[18:32:14] *** Joins: thiras (~thiras@user/thiras)
[18:41:02] *** Quits: Safa_[A_Boy] (~Safa@89.148.8.206) (Quit: Leaving)
[18:44:10] *** Quits: pycode (~pycode@2001:b07:5d28:551:6c85:a257:8ba0:4ae3) (Ping timeout: 250 seconds)
[18:46:24] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[18:52:12] *** Joins: pycode (~pycode@2001:b07:5d28:551:c20f:a9b5:321d:f840)
[18:56:09] *** Quits: damiox (~damiox@90.68.29.53) (Quit: Leaving)
[19:00:58] *** Quits: benbacardi (~benbacard@91.206.1.124) (Quit: Client closed)
[19:05:15] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Quit: Leaving...)
[19:07:06] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:07:11] *** Quits: masterasia (~Guest60@bras-base-toroon3642w-grc-48-184-144-104-13.dsl.bell.ca) (Quit: Client closed)
[19:12:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:12:45] *** Joins: lxsameer (~lxsameer@109.255.73.218)
[19:13:02] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:20:52] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[19:31:47] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617)
[19:36:45] <lxsameer> hey folks, django can't find a command I have in an app of mine, it is in the INSTALLED_APPS and I can imported in the settings files, it use to work under py3.5 but it doesn't work when I ugraded to py3.8, any idea ?
[19:37:21] *** Quits: kostkon (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:44:40] *** Joins: djapo (~archangel@user/djapo)
[19:46:49] <shangxiao> probably would need to see some code
[19:48:10] <hemebond> runserver --verbosity 3 ?
[19:49:29] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[19:52:11] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[20:00:07] *** Quits: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net) (Ping timeout: 246 seconds)
[20:03:08] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:51] *** Joins: Guest32 (~Guest32@75-32-236-135.lightspeed.rnpsca.sbcglobal.net)
[20:08:57] <Guest32> Hello
[20:10:05] *** Joins: READ10 (~weechat@user/read10)
[20:10:39] <Guest32> I need help with an NoReverseMatch error. https://dpaste.org/wMRv here my is urls.py. My models.py https://dpaste.org/APVH. And my todo_panel.html https://dpaste.org/CJs7
[20:11:04] <Guest32> I don't know what to put in front of `{% url 'clearAll' %}` and others like that.
[20:12:02] <moldy> Guest32: {% url 'clearAll' (room_code, ) %}, iirc
[20:12:19] <moldy> or maybe it's just {% url 'clearAll' room_code %}, i don't remember
[20:12:34] <hemebond> The latter I believe.
[20:12:57] <Guest32> do I need to add context?
[20:13:14] <moldy> not sure what you mean by context, but no
[20:13:21] <Guest32> in views
[20:13:43] <moldy> ahh. if you don't have it yet, yes.
[20:13:45] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[20:13:58] <Guest32> I need it for room_code?
[20:14:01] <moldy> yes
[20:14:09] <Guest32> ok
[20:15:20] *** Joins: doev (~doev@p549d74f6.dip0.t-ipconnect.de)
[20:19:25] <Guest32> https://dpaste.org/KMhx here is my views.py I fixed the previous ones by adding room_code in the beginning
[20:19:50] <Guest32> But now I keep getting a NoReverseMatch for my URLS to room
[20:20:06] <hemebond> Share the full error.
[20:20:26] <Guest32> Exception Type: NoReverseMatch at /room/sttee
[20:20:26] <Guest32> Exception Value: Reverse for 'sttee' not found. 'sttee' is not a valid view function or pattern name.
[20:20:33] <hemebond> Not in here.
[20:20:37] <Guest32> ok
[20:20:59] <hemebond> And if you've updated code, share that too. A single paste is better.
[20:21:04] <Guest32> https://dpaste.org/zJ7B
[20:21:14] <Guest32> Okay. How didn't I think of that
[20:23:29] <hemebond> Did you update all your {% url %} usage in the template?
[20:23:43] <Guest32> yes
[20:23:48] <hemebond> Can you repost it?
[20:23:59] <Guest32> https://dpaste.org/gNMY this contains my models.py, todo_panel.html
[20:24:19] <hemebond> Wrong way around{% url room_code 'addTask' %}
[20:24:26] <hemebond> View name then argumetns
[20:24:29] <hemebond> *arguments
[20:25:10] <hemebond> https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#url
[20:25:43] *** Joins: azed (~azed@154.108.65.60)
[20:26:48] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[20:26:58] <Guest32> can I have 2 arguments?
[20:27:18] <hemebond> Yes
[20:27:18] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:27:44] *** Quits: pycode (~pycode@2001:b07:5d28:551:c20f:a9b5:321d:f840) (Ping timeout: 250 seconds)
[20:29:30] <Guest32> https://dpaste.org/2QMX#L2,4,12 I updated my todo_panel.html
[20:29:59] <hemebond> You fixed it?
[20:30:40] <hemebond> (the models don't matter here, btw)
[20:31:37] <Guest32> ok
[20:35:29] *** Quits: lbracher (~lbr@77.109.97.9.adsl.dyn.edpnet.net) (Ping timeout: 268 seconds)
[20:43:18] <Guest32> https://dpaste.org/rfz1 I'm getting this error when I do
[20:43:26] <Guest32>     raise ValueError(
[20:43:26] <Guest32> ValueError: Cannot assign "<QuerySet []>": "Todo.code" must be a "Code" instance.
[20:43:31] <Guest32> I don't know how I should fix it
[20:45:18] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 255 seconds)
[20:45:19] *** Quits: Elzington (~Elzington@static-198-54-128-108.cust.tzulo.com) (Quit: Leaving)
[20:45:33] *** Joins: Elzington (~Elzington@static-198-54-128-108.cust.tzulo.com)
[20:46:05] *** Quits: Elzington (~Elzington@static-198-54-128-108.cust.tzulo.com) (Remote host closed the connection)
[20:46:14] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:46:25] <Guest32> the documentation example shows creating it fresh using r=INSTANCE
[20:46:55] <Guest32> what if my user can input it many times?
[20:47:08] <Guest32> Can I use the id?
[20:47:43] <Guest32> for example `code=Code.objects.filter(room_code=something.id)`
[20:48:21] *** Joins: Elzington (~Elzington@66.63.167.101)
[20:50:16] <hemebond> You're putting a list in. You need to return a single instance.
[20:50:29] <hemebond> s/list/queryset
[20:50:31] <Guest32> so I can't use filter?
[20:50:48] <hemebond> You could add first() or something to the end.
[20:51:00] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:51:04] <hemebond> Or just use get() instead of filter()
[20:54:54] <Guest32> When I added .get() I got the error `DoesNotExist at /room/123456/addTask
[20:54:54] <Guest32> Code matching query does not exist`
[20:56:10] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:56:23] <hemebond> Are you parsing the URL to get the room code out of it?
[20:58:33] <Guest32> yes
[20:58:50] <hemebond> Did you try printing out the request object to see if it contained what you need?
[21:00:06] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:01:31] <Guest32> I got `<WSGIRequest: POST '/room/123456/addTask'>`
[21:01:39] <Guest32> was parsing the URL part of the problem?
[21:02:23] <hemebond> Yes, `DoesNotExist at /room/123456/addTask` means there's node Code object with that room code.
[21:02:45] <hemebond> Do a print(dir(request)) to see what is on the request object and work your way down.
[21:03:23] <hemebond> Or just put the room code in your form.
[21:04:12] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Ping timeout: 252 seconds)
[21:07:48] <Guest32> ok
[21:07:51] <Guest32> it printed out a ton of stuff
[21:08:22] <Guest32> subclasses
[21:08:46] <Guest32> I don''t know what to do with all these. Where should I start?
[21:12:50] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[21:18:43] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617) (Remote host closed the connection)
[21:22:23] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[21:22:34] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617)
[21:23:46] *** Quits: sandeepk (~sandeepk@223.130.30.125) (Remote host closed the connection)
[21:26:37] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617) (Remote host closed the connection)
[21:26:52] *** Joins: pycode (~pycode@2001:b07:5d28:551:7a90:a805:9dfe:c03e)
[21:27:08] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617)
[21:28:58] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:31:10] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617) (Remote host closed the connection)
[21:31:30] <hemebond> Guest32: Do you know Python?
[21:31:47] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617)
[21:35:51] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617) (Remote host closed the connection)
[21:36:17] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617)
[21:39:37] *** Joins: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com)
[21:41:06] *** Joins: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it)
[21:42:42] *** Quits: jess (~jess@libera/staff/jess) ()
[21:44:10] *** Quits: HoaxKey (~HoaxKey@79-68-114-140.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[21:46:57] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238a:b172:74a9:45e8:dabe:f617) (Ping timeout: 255 seconds)
[21:49:50] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[21:54:47] <Guest32> hemebond yes
[21:54:51] <Guest32> I know Python
[21:55:44] <hemebond> Just keep printing and dir()ing
[21:58:00] <hemebond> Or you can read https://docs.djangoproject.com/en/3.2/ref/request-response/#httprequest-objects
[21:59:39] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[22:04:41] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:05:13] *** Joins: thiras (~thiras@user/thiras)
[22:05:52] <Guest32> I will do the form for right now
[22:06:01] <Guest32> because I have a bigger bug
[22:08:16] <Guest32> https://dpaste.org/e1e4 It couldnt find the path to 'panel'
[22:08:20] <Guest32> name panel in urls.pu
[22:08:47] <hemebond> You should put the full error into the paste too.
[22:08:51] <Guest32> okay
[22:10:19] <Guest32> https://dpaste.org/hP6t
[22:11:11] <hemebond> Same issue. You're trying to redirect without including the argument.
[22:12:29] <hemebond> You need to check the documentation for these functions.
[22:12:38] <hemebond> I need to head to bed.
[22:12:58] <Guest32>  okay bye
[22:13:02] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[22:17:15] *** Joins: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it)
[22:19:06] *** Quits: pycode (~pycode@2001:b07:5d28:551:7a90:a805:9dfe:c03e) (Ping timeout: 250 seconds)
[22:19:17] *** Quits: n00bn00b (~N00b@79.184.96.125.ipv4.supernova.orange.pl) (Ping timeout: 245 seconds)
[22:22:11] *** Parts: blackout69 (~blackout6@net-109-116-208-45.cust.vodafonedsl.it) ()
[22:28:54] *** Quits: Elzington (~Elzington@66.63.167.101) (Ping timeout: 252 seconds)
[22:35:07] *** Quits: doev (~doev@p549d74f6.dip0.t-ipconnect.de) (Quit: Client closed)
[22:35:36] *** Quits: azed (~azed@154.108.65.60) (Quit: WeeChat 3.2)
[22:36:55] *** Quits: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 246 seconds)
[22:37:34] <Guest32> todo_list = Todo.objects.filter(code=room_code)
[22:37:36] <Guest32> `todo_list = Todo.objects.filter(code=room_code)`
[22:37:54] <Guest32> how do I filter every object with the code of "123456"
[22:38:07] <Guest32> so if task has a key of 123456 it should print the task
[22:38:10] <Guest32> otherwise, don't
[22:51:16] *** Quits: Guest32 (~Guest32@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[22:51:53] *** Joins: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net)
[22:52:43] <Steve-Dusty> https://dpaste.org/cV21 This is my views.py. This is my urls.py https://dpaste.org/01GE
[22:52:58] <Steve-Dusty> I kept getting a `django.urls.exceptions.NoReverseMatch: Reverse for 'panel' with no arguments not found. 1 pattern(s) tried: ['room/(?P<room_code>[^/]+)$']` error
[22:53:03] <Steve-Dusty> I have no idea how to fix it
[22:56:47] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[22:58:08] *** Joins: audiocat (~audio@2603-8081-1800-00ad-4a1d-22ed-5c41-e626.res6.spectrum.com)
[23:02:17] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 255 seconds)
[23:06:11] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[23:07:55] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:10:39] <Steve-Dusty> If there were no arguments found
[23:10:53] <Steve-Dusty> then why does it redirect there
[23:10:54] <Steve-Dusty> lmao
[23:17:00] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (Quit: Ping timeout (120 seconds))
[23:17:05] *** Joins: bilb_ono (~alexmarsh@12.190.239.194)
[23:17:12] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[23:19:36] *** Quits: Steve-Dusty (~Steve-Dus@75-32-236-135.lightspeed.rnpsca.sbcglobal.net) (Quit: Client closed)
[23:23:12] *** Quits: Guddu (~Guddu@223.177.43.7) (Read error: Connection reset by peer)
[23:28:06] *** Joins: serghei (~egrep@user/serghei)
[23:31:56] *** Quits: bilb_ono (~alexmarsh@12.190.239.194) (Quit: bilb_ono)
[23:32:31] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[23:34:29] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[23:37:12] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Ping timeout: 255 seconds)
[23:47:23] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[23:54:56] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 255 seconds)
[23:56:50] *** Joins: slav0nic (slav0nic@python.su)
