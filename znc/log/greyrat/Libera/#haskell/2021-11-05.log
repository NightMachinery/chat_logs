[00:01:46] *** Joins: alx741 (~alx741@181.196.68.55)
[00:02:53] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:b05b:c1ec:b58c:ef2d)
[00:02:54] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:08:07] *** Quits: slack1256 (~slack1256@191.125.227.82) (Ping timeout: 268 seconds)
[00:09:04] *** Joins: pavonia (~user@user/siracusa)
[00:11:38] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[00:16:55] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[00:18:27] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[00:19:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5495:68b3:d03c:732e)
[00:21:13] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[00:23:31] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:f161:c9c3:b403:49f6) (Ping timeout: 268 seconds)
[00:29:42] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:2c63:dc9c:df4d:2374) (Ping timeout: 268 seconds)
[00:30:18] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:5867:e42a:e65f:e597)
[00:30:56] <aegon> hmm, will GHC always choose the most specific instance? Trying to figure out if i need to use a newtype here. UUID is an instance of Storable which means by proxy it has an instance of MessagePack already.. however, i always want my instances to use a custom instance of message pack that uses bytestring serialization (which is rfc compliant) can i get away with instancing this for uuid somewhere in my 
[00:31:02] <aegon> module and be assured it will be used within the module instaead of the generic Storable instance?
[00:32:06] *** Joins: werner100 (~werner100@2601:2c2:400:4440:99e8:39f6:7f1b:a334)
[00:32:58] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:33:43] *** Joins: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:34:17] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 256 seconds)
[00:35:24] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[00:35:39] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[00:37:33] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:37:46] <geekosaur> it won't let you without an OVERLAP pragma of some kind, and even then it's best effort, not guaranteed
[00:38:45] <geekosaur> actually if there's already an instance for that type I think you may need IncoherentInstances. or it m9ight just not let you at all
[00:38:50] <geekosaur> you'd have to newtype it
[00:39:26] <awpr> if this is https://hackage.haskell.org/package/msgpack-1.0.1.0/docs/Data-MessagePack-Object.html#t:MessagePack, there isn't a catch-all instance based on Storable, at least not in that package
[00:41:01] <geekosaur> catch-all instances are generally a bad thing, so I'd not expect to see one. unless you defined it yourself, in which case you may be about to discover why it's a bad idea
[00:41:05] *** Quits: sciencentistguy (~sciencent@hacksoc/ordinary-member) (Ping timeout: 256 seconds)
[00:41:57] <aegon> awpr's right, itstht package and i was misreading the constrains on instances for Vector a :!
[00:47:34] *** Quits: werner100 (~werner100@2601:2c2:400:4440:99e8:39f6:7f1b:a334) (Quit: Ping timeout (120 seconds))
[00:48:02] *** Joins: Pickchea (~private@user/pickchea)
[00:49:31] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:56:12] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[01:03:45] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[01:03:46] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:b05b:c1ec:b58c:ef2d) (Quit: WeeChat 2.8)
[01:05:58] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) ()
[01:06:22] *** Quits: fendor (~fendor@178.115.33.172.wireless.dyn.drei.com) (Remote host closed the connection)
[01:07:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[01:07:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:07:58] *** Joins: fendor (~fendor@178.115.33.172.wireless.dyn.drei.com)
[01:10:43] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[01:11:27] *** Joins: acidjnk_new (~acidjnk@p200300d0c726704784feaa35b47dd204.dip0.t-ipconnect.de)
[01:18:25] *** Quits: gg (~gg@88.160.100.84) (Ping timeout: 268 seconds)
[01:28:29] *** Joins: pop3 (~pop3@user/pop3)
[01:29:23] *** Quits: fendor (~fendor@178.115.33.172.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[01:31:38] *** Joins: gg (~gg@2a01:e0a:819:1510:89f0:97ca:21c4:6ea6)
[01:33:34] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:37:45] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[01:38:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:38:02] *** Joins: hightower2 (~hightower@213.147.110.20)
[01:38:23] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[01:41:21] *** Joins: vysn (~vysn@user/vysn)
[01:41:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:43:04] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[01:45:16] *** Quits: cosimone (~user@93-44-187-173.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:45:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[01:46:08] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:47:00] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[01:47:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:48:26] *** Joins: jinsun (~quassel@user/jinsun)
[01:49:11] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[01:51:28] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:52:20] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[01:55:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:56:01] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[02:04:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[02:06:01] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[02:06:15] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:06:44] *** Joins: pop3 (~pop3@user/pop3)
[02:11:52] *** Joins: mestre (~mestre@191.177.175.57)
[02:12:43] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:12:53] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[02:13:24] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df)
[02:16:56] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[02:17:42] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8) (Ping timeout: 260 seconds)
[02:21:54] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[02:22:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[02:28:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:29:56] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:5867:e42a:e65f:e597) (Ping timeout: 268 seconds)
[02:30:29] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:dda8:eac2:4d01:562e)
[02:36:50] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:39:45] *** Quits: michalz (~michalz@185.246.204.58) (Remote host closed the connection)
[02:47:49] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 268 seconds)
[02:50:26] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[02:58:39] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:01:38] *** Joins: onion (~z@user/zero)
[03:02:04] *** Parts: onion (~z@user/zero) ()
[03:02:08] *** Joins: onion (~z@user/zero)
[03:02:52] *** Parts: onion (~z@user/zero) ()
[03:07:12] *** Joins: nvmd (~nvmd@user/nvmd)
[03:09:20] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[03:10:09] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:11:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:11:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Client Quit)
[03:11:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:11:55] *** Joins: wroathe (~wroathe@user/wroathe)
[03:15:12] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[03:20:54] *** Quits: emf (~emf@2620:10d:c090:400::5:ba1c) (Quit: emf)
[03:21:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[03:30:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:25ae:baa7:4680:70ca) (Ping timeout: 260 seconds)
[03:38:53] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[03:43:41] *** [_] is now known as [itchyjunk]
[03:43:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 268 seconds)
[03:44:11] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 264 seconds)
[03:45:09] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[03:46:35] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[03:47:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:49:23] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[03:52:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:53:25] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:57:54] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:58:55] *** Joins: jespada (~jespada@190.7.36.46)
[04:02:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:03:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b)
[04:17:56] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:18:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:24:02] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:32:42] *** Joins: ub (~Thunderbi@p548c9652.dip0.t-ipconnect.de)
[04:33:53] *** Quits: ubert (~Thunderbi@p200300ecdf4fca7ce019fddc82d0353e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:33:54] *** ub is now known as ubert
[04:33:57] *** Joins: mestre (~mestre@191.177.175.57)
[04:38:49] *** Quits: acidjnk_new (~acidjnk@p200300d0c726704784feaa35b47dd204.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:43:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[04:44:03] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[04:44:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:47:06] <awpr> anybody already making a `type-ord-compat` library?  one exists as part of `numeric-kinds`, but it looks like I need to split it out into a standalone library to avoid a cycle, and I want to double-check before I duplicate effort
[04:47:13] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[04:48:06] <awpr> (https://github.com/google/hs-dependent-literals/commit/65c553447d3c6d083b2886feb44bd3817f121ece turns my previous implementation into a compatibility layer for the one in `base`)
[04:49:11] <awpr> there's `type-ord`, which is similar, but currently broken, unmodified since 2013, and has no repo link, so... probably not that one
[04:52:19] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:52:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:59:44] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[04:59:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:59:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:59:56] *** Joins: wroathe (~wroathe@user/wroathe)
[05:02:44] *** Quits: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net) (Remote host closed the connection)
[05:04:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:10:30] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[05:16:21] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:21:19] *** Joins: slack1256 (~slack1256@191.125.227.82)
[05:22:31] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-218f-2d4f-d1df-c673.res6.spectrum.com)
[05:28:10] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[05:31:05] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:43da:65d:86ef:94ff)
[05:31:59] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:35:01] *** Parts: SeungheonOh (~Thunderbi@2600:1700:5168:1400:43da:65d:86ef:94ff) ()
[05:35:07] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:43da:65d:86ef:94ff)
[05:35:51] *** Joins: gzj (~GZJ0X@199.193.127.57.16clouds.com)
[05:40:25] *** Quits: gzj (~GZJ0X@199.193.127.57.16clouds.com) (Client Quit)
[05:41:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:41:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:41:13] *** Joins: wroathe (~wroathe@user/wroathe)
[05:45:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[05:45:42] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:43da:65d:86ef:94ff) (Quit: SeungheonOh)
[05:46:03] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:43da:65d:86ef:94ff)
[05:46:10] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:43da:65d:86ef:94ff) (Client Quit)
[05:51:30] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[05:51:42] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:56:08] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df) (Remote host closed the connection)
[05:56:15] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[05:56:24] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df)
[05:56:30] *** Joins: nitrix_ (~nitrix@user/nitrix)
[05:56:53] *** nitrix_ is now known as nitrix
[05:57:34] *** Quits: Athas (athas@sigkill.dk) (Ping timeout: 260 seconds)
[05:57:36] *** Joins: Athas_ (athas@2a01:7c8:aaac:1cf:431c:d49e:2f86:91cc)
[05:59:18] *** Joins: deni_ (~deni@user/deni)
[05:59:39] *** Quits: deni (~deni@user/deni) (Read error: Connection reset by peer)
[05:59:54] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Ping timeout: 260 seconds)
[05:59:58] *** Joins: alphabeta (~kilolympu@185.65.135.177)
[06:00:57] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:05:02] *** Quits: micro (~micro@user/micro) (Ping timeout: 260 seconds)
[06:05:37] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Remote host closed the connection)
[06:05:39] *** Quits: res0nat0r8 (~Fletch@dia.whatbox.ca) (Quit: Ping timeout (120 seconds))
[06:05:48] *** Joins: micro (~micro@user/micro)
[06:05:57] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[06:05:58] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (Ping timeout: 260 seconds)
[06:06:12] *** Joins: res0nat0r8 (~Fletch@dia.whatbox.ca)
[06:06:21] *** Joins: nshepperd24 (~nshepperd@li364-218.members.linode.com)
[06:07:14] *** Joins: erisco_ (~erisco@d24-57-249-233.home.cgocable.net)
[06:07:22] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (Ping timeout: 260 seconds)
[06:07:22] *** nshepperd24 is now known as nshepperd2
[06:07:26] *** Joins: segfaultbuzzfizz (~segfaultf@135-180-0-138.static.sonic.net)
[06:08:18] *** Quits: energizer (~energizer@user/energizer) (Ping timeout: 260 seconds)
[06:09:26] *** Quits: yinghua_ (~yinghua@2800:2121:1400:900:c56e:96f4:75cd:50ac) (Quit: Leaving)
[06:09:49] *** Quits: res0nat0r8 (~Fletch@dia.whatbox.ca) (Client Quit)
[06:10:01] *** Joins: res0nat0r8 (~Fletch@dia.whatbox.ca)
[06:11:05] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[06:11:06] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 260 seconds)
[06:11:06] *** erisco_ is now known as erisco
[06:11:20] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 268 seconds)
[06:11:26] *** Quits: slack1256 (~slack1256@191.125.227.82) (Ping timeout: 256 seconds)
[06:12:57] *** Joins: energizer (~energizer@user/energizer)
[06:16:52] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:dda8:eac2:4d01:562e) (Ping timeout: 268 seconds)
[06:18:40] *** Joins: xff0x (~xff0x@2001:1a81:5273:3700:28cd:42fe:3b9:2637)
[06:22:35] *** Quits: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[06:22:47] *** Quits: NieDzejkob (~quassel@212.87.13.106) (Quit: No Ping reply in 180 seconds.)
[06:23:25] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[06:24:48] *** Quits: mmhat (~mmh@55d4a8dc.access.ecotel.net) (Quit: WeeChat 3.3)
[06:28:53] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[06:30:09] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[06:46:32] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[06:49:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:51:50] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[07:05:48] *** Quits: alx741 (~alx741@181.196.68.55) (Quit: alx741)
[07:09:14] <dsal> I just tried using Control.Monad.Trans.List and found out it doesn't work.  That seems bad.
[07:09:48] *** Quits: segfaultbuzzfizz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 256 seconds)
[07:10:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:10:08] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:10:08] *** finn_elija is now known as FinnElija
[07:10:11] *** Joins: mbuf (~Shakthi@136.185.75.83)
[07:11:51] <Axman6> it's that basically the domain of pipes, conduit, streaming etc.?
[07:14:56] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[07:17:50] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[07:18:08] *** Joins: ozzloy_ (~ozzloy@ozzloy.lifeafterking.org)
[07:18:15] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Quit: Leaving)
[07:18:32] *** Joins: pgib (~textual@173.38.117.89)
[07:18:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:19:42] <ozzloy_> hi
[07:20:07] <Axman6> Hello!
[07:20:37] <ozzloy_> i am learning haskell and am stuck on a homework
[07:20:52] <Axman6> great, what's the problem, and what have you tried?
[07:21:14] <Axman6> Given that it's homework, we won't give you the answers, but we'll help you find them yourself
[07:21:46] <Axman6> also, if you have code to share, please use...
[07:21:53] <Axman6> @where paste
[07:21:53] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[07:23:01] *** Joins: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net)
[07:23:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[07:24:27] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[07:24:37] <ozzloy_> here https://paste.tomsmeding.com/3nengedR line 66 - 85 show the error for listTree, which starts on line 88
[07:24:58] <ozzloy_> i'm not sure why the type is mismatched
[07:26:23] <ozzloy_> why are j and l Tree a type?
[07:26:51] <ozzloy_> am i reading that correctly?  are they tree types on line 91?
[07:27:27] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-218f-2d4f-d1df-c673.res6.spectrum.com) (Quit: Konversation terminated!)
[07:27:44] <Axman6> so, you have the type foldTree :: (b -> a -> b -> b) -> b -> Tree a -> b
[07:28:02] <Axman6> you want your result to be [a], which means that b must be [a]
[07:28:11] <ozzloy_> yes
[07:28:15] <ozzloy_> so far so good?
[07:28:26] <Axman6> so that gives us: foldTree :: ([a] -> a -> [a] -> [a]) -> [a] -> Tree a -> [a]
[07:28:52] <ozzloy_> yeah, that makes sense
[07:28:58] <Axman6> so that means the function you give to foldTree needs to have the type ([a] -> a -> [a] -> [a])
[07:29:29] <Axman6> but you have applied listTree to the first and third arguments, which means l and r must be Tree a
[07:29:33] <Axman6> which is not [a]
[07:29:35] <ozzloy_> oooh
[07:29:45] <ozzloy_> right
[07:29:49] <ozzloy_> ok, so then...
[07:29:55] <Axman6> you should be able to sort it out from there I hope :)
[07:30:56] <ozzloy_> lol, maybe?
[07:31:09] <ozzloy_> i will have to come back to this, shoot.  thanks for your help so far
[07:31:47] <Axman6> basically, your f is trying to do more than it needs to
[07:31:52] <monochrom> If you use foldTree you are not supposed to use your own recursion on Tree anymore.
[07:32:11] <Axman6> yeah foldTree abstracts recursion for you
[07:36:12] <Axman6> ozzloy_: for minTree, can you assume that the tree is ordered?
[07:38:28] <monochrom> I think no.
[07:40:19] <Axman6> that makes me sad
[07:40:30] <Axman6> ... this isn't your course by any chance is it monochrom? :P
[07:40:41] <monochrom> Nah.
[07:41:33] <Axman6> I forgot to give me usual warning about whoever runs the course likely being in here...
[07:41:35] <monochrom> minTree would be no fun and a poor exercise for foldTree if a binary search tree were guaranteed. :)
[07:44:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:48:12] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:49:22] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:56:12] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[07:57:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:59:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:04:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:08:44] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[08:09:35] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:25:50] *** Inst_ is now known as Inst
[08:25:58] *** Joins: segfaultbuzzfizz (~segfaultf@135-180-0-138.static.sonic.net)
[08:38:42] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[08:39:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:41:23] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:41:30] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[08:43:38] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[08:43:55] <ozzloy_> so f x y z = f x ++ y ++ f z ?
[08:44:01] <ozzloy_> i'm back
[08:44:25] <ozzloy_> or ...
[08:45:49] <ozzloy_> no
[08:46:00] <ozzloy_> f j k l = j ++ [k] ++ l
[08:46:24] <ozzloy_> yep
[08:46:33] <ozzloy_> monochrom, no, tree1 is not sorted
[08:47:52] <ozzloy_> yeah, that works.  ok so now the rose
[08:48:02] <ozzloy_> something thorny something something
[08:50:19] <ozzloy_> what does this notation mean:
[08:50:34] <ozzloy_> data Rose a = Node a [Rose a]
[08:50:34] <ozzloy_> ?
[08:51:12] <ozzloy_> it looks like typedef from c or type from ocaml
[08:52:47] <pavonia> It's the definition of a new type Rose that takes one type parameter a, and has one value constructor Node :: a -> [Rose a] -> Rose a
[08:52:57] <ozzloy_> there's a type called Rose which consists of a Node with 2 things in it.  the two things are a thing of type a and a list of things of type "Rose a"?
[08:53:20] <ozzloy_> pavonia, thanks
[08:54:00] <ozzloy_> is "deriving (Show, Eq)" something like mixins in ruby, or implementing interfaces in java?
[08:54:40] <ozzloy_> oh, so Node is more like a function?
[08:54:46] <ozzloy_> that takes 2 arguments?
[08:55:58] *** Quits: Adran (adran@botters/adran) (Ping timeout: 252 seconds)
[08:56:06] <pavonia> Yes, but it can also be used in patterns to decompose values
[08:58:01] *** Joins: Adran (~adran@botters/adran)
[09:06:55] *** Quits: segfaultbuzzfizz (~segfaultf@135-180-0-138.static.sonic.net) (Remote host closed the connection)
[09:11:27] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[09:13:14] <ozzloy_> i see
[09:13:20] <ozzloy_> thanks
[09:17:45] <ozzloy_> what about the syntax:  minTree :: (Ord a) => Tree a -> Maybe a
[09:18:58] <ozzloy_> the "(Ord a)" part.  does that mean a is some type that is orderable?
[09:19:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:29:42] <c_wraith> ozzloy_: yes, that's exactly what it means.
[09:31:33] <ozzloy_> c_wraith, thanks
[09:36:08] <ski> <ozzloy_> is "deriving (Show, Eq)" something like mixins in ruby, or implementing interfaces in java?
[09:36:11] <ski> neither, really
[09:36:24] <ozzloy_> ski, oh?
[09:36:26] <energizer> `newtype Fix f = Fix (f (Fix f))` looks kinda magical. can that be written in a less powerful language than haskell?
[09:37:00] <energizer> i'm still trying to wrap my head around it, maybe porting to a dumber language i know better will help
[09:37:00] <ski> `deriving' auto-generates instances for type classes (only for a few select, built-in, type classes)
[09:37:36] <ski> writing an instance of a type for a type class can be more closely compared to implementing an interface in Java .. but there's still important differences
[09:37:52] *** Joins: aleator (~aleator@188-67-216-232.bb.dnainternet.fi)
[09:38:09] <c_wraith> energizer: doing exactly what Fix does requires higher-kinded types.  So you could do it in Scala, but I can't imagine that makes it easier to understand.
[09:38:13] <ski> methods of a type class are not bundled with values of the type in question. they're "freestanding"
[09:38:59] <c_wraith> energizer: but essentially, Fix nests a type infinitely.  Fix Maybe is roughly Maybe (Maybe (Maybe (Maybe (Maybe ...
[09:39:25] <c_wraith> Except with some extra wrappers that prevent the type from being visibly infinite
[09:39:30] <ski> this means that you can easily do e.g. "binary" methods (like `compare :: a -> a -> Ordering' in `Ord a') or "clone" methods. and that you can have type class methods that don't take an input value of the type in question, at all ! (like `minBound,maxBound :: a' in `Bounded a')
[09:40:06] <energizer> c_wraith: is `unfix Fix Maybe` the same as `Fix Maybe`?
[09:40:20] <remexre> is it just me, or does it seem like parsing the . in haskell is really hard at this point?
[09:40:31] <ski> energizer : `unfix' ?
[09:40:51] <c_wraith> remexre: it's not just you.  RecordDotSyntax took something ridiculous and made it even worse
[09:40:56] <energizer> nfix :: Fix f -> f (Fix f)
[09:40:56] <energizer> unfix (Fix f) = f
[09:41:15] <remexre> at least they didn't do the worst proposal of all worlds,
[09:41:26] <remexre> foo<<<bar  ==>  getField @"bar" foo
[09:41:49] <energizer> s/nfix/unfix/
[09:42:01] <c_wraith> energizer: you're mixing type and value levels
[09:42:13] <ski> ozzloy_ : i suppose you could perhaps liken a parametric instance like e.g. `instance Eq a => Eq [a] where ...' to a mixin .. automatically deriving an instance of `Eq' for `[a]', as soon as you have an instance of `Eq' for `a'. so, since we know `Eq Integer' holds, we also know `Eq [Integer]',`Eq [[Integer]]',&c. holds
[09:42:27] <ski> (s/parametric/parametric and conditional/)
[09:42:43] <c_wraith> energizer: unfix operates at the value level.  Maybe operates at the type level.  Fix is punned to be the name of a value and type
[09:42:54] <energizer> oh
[09:43:06] <ski> energizer : do you mean `unfix x', where `x :: Fix Maybe' ?
[09:43:14] <energizer> ski: yes
[09:43:23] <energizer> er
[09:43:31] <ski> well, then `unfix x :: Maybe (Fix Maybe)'
[09:43:46] <energizer> ok
[09:43:51] <ski> so `x' and `unfix x' doesn't even have the same type
[09:44:17] <ski> (and so it doesn't make sense to ask whether they are the same. your question was ill-typed)
[09:44:50] <ski> energizer : would you like to submit a patch to your question, perhaps ?
[09:44:59] <c_wraith> energizer: it's worth looking at some values of type Fix Maybe.  You've got (Fix Nothing), (Fix (Just (Fix Nothing))), (Fix (Just (Fix (Just (Fix Nothing))))), etc
[09:45:40] <c_wraith> infinite type doesn't imply infinite value!
[09:47:23] <ski> % :t fix (Fix . Just)
[09:47:23] <yahb> ski: Fix Maybe
[09:47:37] <c_wraith> that one is infinite, yes. :)
[09:48:38] * ski glances at ozzloy_
[09:52:42] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[09:53:55] <Guest41> I'm wondering if GHC is a single-pass compiler, my guess is no because it wouldn't know the function arity for example so it can't tell how many arguments to parse for each function?
[09:53:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:55:14] <c_wraith> The only languages anyone cares about that use single-pass compilers are C and C++.
[09:56:25] <Guest41> oh, I was writing a parser for a toy language of mine and I thought "omg I need more than one pass, my grammar must be too complicated" x)
[09:57:37] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[09:58:17] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[10:00:34] <Axman6> > iterate (Fix . Just) (Fix Nothing)
[10:00:35] <lambdabot>  error:
[10:00:35] <lambdabot>      • Data constructor not in scope: Fix :: Maybe a -> a
[10:00:35] <lambdabot>      • Perhaps you meant one of these:
[10:00:39] <ski> Guest41 : the language has no notion of arity. every function takes exactly one argument
[10:00:58] <ski> try yahb
[10:01:03] <c_wraith> still, there are fixity declarations, which make Haskell's grammar fully context-sensitive...
[10:01:13] <Axman6> c_wraith: well, it's also one of the selling points of Go. not worth a whole lot though
[10:01:23] <Axman6> % iterate (Fix . Just) (Fix Nothing)
[10:01:28] <yahb> Axman6: [Fix Nothing,Fix (Just (Fix Nothing)),Fix (Just (Fix (Just (Fix Nothing)))),Fix (Just (Fix (Just (Fix (Just (Fix Nothing)))))),Fix (Just (Fix (Just (Fix (Just (Fix (Just (Fix Nothing)))))))),Fix (Just (Fix (Just (Fix (Just (Fix (Just (Fix (Just (Fix Nothing)))))))))),Fix (Just (Fix (Just (Fix (Just (Fix (Just (Fix (Just (Fix (Just (Fix Nothing)))))))))))),Fix (Just (Fix (Just (Fix (Just (Fix (Just
[10:01:59] <Axman6> ^^^ good software maintenence advice, that gets worse as you go on. Fix Nothing
[10:02:19] *** Joins: zaquest (~notzaques@5.128.210.178)
[10:03:10] <Guest41> ski: so how do know how many applications to expect? do you just rely on the type system?
[10:03:21] <ski> huh ?
[10:03:39] <ski> what do you mean, "how many applications to expect?" ?
[10:03:47] <Guest41> no no I'm not making sense, nevermind! I'm better of reading the grammar haha
[10:03:51] <Axman6> all functions take exactly one argument Guest41
[10:04:00] <awpr> > True 4
[10:04:02] <lambdabot>  error:
[10:04:02] <lambdabot>      • Couldn't match expected type ‘t0 -> t’ with actual type ‘Bool’
[10:04:02] <lambdabot>      • The function ‘True’ is applied to one argument,
[10:04:03] <Axman6> this is always true
[10:04:05] <awpr> this is valid syntax.
[10:04:09] <ski> you get as many as you get. then you (the type checker) check that it wasn't too many
[10:04:47] <Guest41> yes but they can return functions that take more arguments and you need to know when you stop taking arguments either because you reached an `a` or there are no more arguments
[10:04:49] <Axman6> so figuring out the arity of Haskell functions is very east, in fact it can be implemented as const 1
[10:04:50] <awpr> the parser doesn't care whether the thing you applied is a function; it's unambiguously a function application either way, and it's up to the type-checker to say whether it makes sense to apply that
[10:05:18] <Axman6> that's exactly what the type of a value tells you
[10:05:21] <ski> Guest41 : you only need to know whether each particular application is valid or not. the type checker checks that
[10:05:43] <ski> none of this "you need to know when you stop taking arguments" nonsense
[10:05:45] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df) (Remote host closed the connection)
[10:05:52] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:06:03] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df)
[10:06:38] <Axman6> > 7 "Hello" True -- Valid syntax, but the type system doesn't know how to make a function from 7 (but that is also possible)
[10:06:39] <lambdabot>  error:
[10:06:39] <lambdabot>      • No instance for (Num ([Char] -> Bool -> ()))
[10:06:39] <lambdabot>          arising from a use of ‘e_177’
[10:06:51] <Guest41> aha, so I'm approaching this the wrong way
[10:07:41] <Axman6> in fact, you cannot know how many arguments something will ultimately take until you type check it. 
[10:07:51] <Guest41> ski: where can I find haskell's (or any lambda calculus for that matter) grammar, alongside an AST. I'm too scared to open GHC code
[10:08:00] <Axman6> > printf "A string %s" "Hello"
[10:08:02] <lambdabot>  error:
[10:08:02] <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M625737254890...
[10:08:02] <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
[10:08:10] <Axman6> > printf "A string %s" "Hello" :: String
[10:08:12] <lambdabot>  "A string Hello"
[10:08:38] <Axman6> > printf "A string %s, an integer %i" "Hello" (7 :: Integer) :: String
[10:08:39] <lambdabot>  "A string Hello, an integer 7"
[10:08:58] <Axman6> :t printf
[10:08:59] <lambdabot> PrintfType r => String -> r
[10:09:18] <ski> @let instance Num a => Num (rho -> a) where (f + g) r = f r + g r; (f - g) r = f r - g r; (f * g) r = f r * g r; negate f r = negate (f r); abs f r = abs (f r); signum f r = signum (f r); fromInteger n r = fromInteger n
[10:09:20] <lambdabot>  Defined.
[10:09:22] <ski> @let instance Fractional a => Fractional (rho -> a) where (f / g) r = f r / g r; recip f r = recip (f r); fromRational x r = fromRational x
[10:09:24] <lambdabot>  Defined.
[10:09:30] <Axman6> what the compiler _does_ know is how many arguments something has been _applied_ to
[10:09:39] <ski> > 7 "Hello" True  -- now the type system accepts it
[10:09:40] <lambdabot>  7
[10:11:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:11:26] <Guest41> so your code can influence the type system's decision too ...
[10:11:43] <ski>   M ∷= x
[10:11:46] <ski>      │ λ x . M
[10:11:48] <Axman6> well of course, you can define new types
[10:11:48] <ski>      │ M M
[10:11:56] <ski> Guest41 : lambda-calculus grammar ^
[10:12:21] <Axman6> Haskell is just sexy syntax for that
[10:12:29] <ski> (abstract syntax, so no production for brackets. add that, if you want concrete syntax)
[10:15:25] <ski> > [(id^2 - id + 1) n | n <- [-3 .. 3]]
[10:15:26] <lambdabot>  [13,7,3,1,1,3,7]
[10:15:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:1d49:739d:9075:d5df) (Ping timeout: 264 seconds)
[10:16:06] <ski> > [[(fst^2 - fst*snd + snd^2) (m,n) | n <- [-2 .. 2]] | m <- [-2 .. 2]]
[10:16:08] <lambdabot>  [[4,3,4,7,12],[3,1,1,3,7],[4,1,0,1,4],[7,3,1,1,3],[12,7,4,3,4]]
[10:16:57] <int-e> . o O ( not confusing at all )
[10:17:39] <ski> > [(cos^2 + sin^2) (n*pi/4) | n <- [-2 .. 2]]
[10:17:41] <lambdabot>  [1.0,1.0,1.0,1.0,1.0]
[10:18:21] <int-e> > let _1 = const; _2 = flip const in (_1^2 - _1*_2 + _2^2) <$> [-2..2] <*> [-2..2]
[10:18:23] <lambdabot>  [4,3,4,7,12,3,1,1,3,7,4,1,0,1,4,7,3,1,1,3,12,7,4,3,4]
[10:18:43] <ski> yeap :)
[10:20:10] <ski> anyway, this is "just" "pointwise definition" of the arithmetical operations, in terms of the corresponding arithmetical operations on the result of the functions
[10:20:44] <ski> a more amusing example of something similar may be
[10:21:21] <ski> > sortBy (comparing length <> compare) (words "The quick brown fox jumps over the lazy dog")
[10:21:23] <lambdabot>  ["The","dog","fox","the","lazy","over","brown","jumps","quick"]
[10:21:50] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[10:21:52] <ski> (primarily sort by length, secondarily by ordinary (lexicographic) order on the words (of the same length))
[10:22:02] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:23:59] <ski> this is using the "pointwise" definition of `(<>)', like `(f <> g) r = f r <> g r'. this way, `comparing length <> compare' amounts to `\x y -> comparing length x y <> compare x y'. so now we're down to `<>' on `Ordering' .. which happens to be defined in the correct way to pull off this lexicographic ordering ("primarly order by this, secondarily by that")
[10:24:57] <ski> @where monoids
[10:24:57] <lambdabot> comment on "Monoids? In my programming language?" by Cale in 2008 (or 2009 ?) at <http://www.reddit.com/r/programming/comments/7cf4r/monoids_in_my_programming_language/c06adnx> about a use of `
[10:24:57] <lambdabot> instance Monoid a => Monoid (rho -> a)'
[10:25:33] <ozzloy_> ski, thanks!
[10:25:39] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[10:26:01] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[10:26:10] <ski> (although, nowadays `(<>)' is in `Semigroup', which is a (new) superclass of `Monoid'. also, that post uses the name `(++)', rather than `(<>)'/`mappend')
[10:27:06] <ski> anyway, the definition here would be
[10:27:25] <ski>   (<>) :: Ordering -> Ordering -> Ordering
[10:27:37] <ski>   LT <> _  = LT
[10:27:42] <ski>   GT <> _  = GT
[10:27:50] <ski>   EQ <> o  = o
[10:28:18] <ski> so, only in case the comparision to the left turned out to be equal, do we look at (force) the comparision to the right
[10:30:29] <ozzloy_> i am now stuck on sumRose https://paste.tomsmeding.com/caDJTMZT and maybe on foldRose
[10:30:43] <ozzloy_> line 88 gives the error starting at line 93
[10:31:23] <int-e> :t (+)
[10:31:24] <lambdabot> Num a => a -> a -> a
[10:31:57] <int-e> ozzloy_: you need to use (+) instead of + there
[10:32:18] <int-e> :t foldr + ?n ?r
[10:32:19] <lambdabot> (Num b, Foldable t1, ?n::t2 -> (a -> b -> b) -> b -> t1 a -> b, ?r::t2) => (a -> b -> b) -> b -> t1 a -> b
[10:32:32] <ozzloy_> oh
[10:32:33] <int-e> :t foldr (+) ?n ?r
[10:32:34] <lambdabot> (Foldable t, Num b, ?n::b, ?r::t b) => b
[10:32:37] <ozzloy_> oooh
[10:32:49] <ski> `foldr + n r' parses as `foldr + (n r)'
[10:32:50] <int-e> unfortunately the former has a type so the error is attributed to line 88 instead
[10:33:08] <ozzloy_> got it
[10:33:17] <ozzloy_> so my definition of foldRose is good?
[10:33:29] <ozzloy_> line 84
[10:33:32] <ski> yes
[10:33:33] <int-e> @undef
[10:33:33] <lambdabot> Undefined.
[10:33:36] <int-e> :t foldr + ?n ?r
[10:33:37] <lambdabot> (Num ((a -> b -> b) -> b -> t1 a -> b), Foldable t1, ?n::t2 -> (a -> b -> b) -> b -> t1 a -> b, ?r::t2) => (a -> b -> b) -> b -> t1 a -> b
[10:33:40] <ozzloy_> thanks
[10:36:01] *** Quits: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[10:37:20] *** Athas_ is now known as Athas
[10:38:21] *** Joins: pony (sid524992@smol/hors)
[10:42:15] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:42:52] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[10:42:54] *** Joins: michalz (~michalz@185.246.204.40)
[10:47:58] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:49:23] *** Quits: typedfern_ (~Typedfern@171.red-83-51-60.dynamicip.rima-tde.net) (Remote host closed the connection)
[10:57:11] *** Joins: fendor (~fendor@178.115.33.172.wireless.dyn.drei.com)
[10:58:37] *** Joins: kenran (~kenran@b2b-37-24-119-190.unitymedia.biz)
[11:02:07] *** Quits: mbuf (~Shakthi@136.185.75.83) (Quit: Leaving)
[11:02:33] <sshine> I'm trying to write a servant-client type for an API that has one endpoint that lets me search for two different kinds of things (company names, company details). if this were req/wreq, I made a data SearchQuery = SearchX X | SearchY Y, and made it a ToJSON instance.
[11:04:23] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:76a9:f65d:22e8:2e7b)
[11:04:59] <sshine> but so far I've just had the search function return an IO Value. I'm not sure if I should create a union type for the kinds of things that it can find... I guess I'll just have to disambiguate later, depending on the context.
[11:05:49] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[11:06:04] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[11:06:58] *** Quits: son0p- (~ff@181.136.122.143) (Ping timeout: 260 seconds)
[11:07:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[11:07:21] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[11:12:20] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:12:30] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[11:13:09] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[11:17:39] <sshine> type MyApi = "blah" :> ReqBody '[JSON] SearchQuery :> Post '[JSON] [SearchResult]  --  it becomes a little generic, but at least symmetric.
[11:19:55] *** Joins: vysn (~vysn@user/vysn)
[11:23:16] *** Joins: shidima (~shidima@46.44.183.25)
[11:27:12] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[11:30:27] *** Quits: shidima (~shidima@46.44.183.25) (Remote host closed the connection)
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:42:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:45:56] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[11:46:19] *** Joins: chele (~chele@user/chele)
[11:47:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:49:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[11:49:59] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:50:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:51:05] *** Joins: vpan (~0@212.117.1.172)
[11:55:32] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:00:11] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:07:07] *** Joins: kuribas (~user@ptr-25vy0i9zmp0qcl8wvlj.18120a2.ip6.access.telenet.be)
[12:11:28] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:12:16] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[12:12:53] *** Joins: MoC (~moc@user/moc)
[12:13:52] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[12:15:01] *** Joins: pop3 (~pop3@user/pop3)
[12:15:50] *** Quits: phma (~phma@host-67-44-209-61.hnremote.net) (Read error: Connection reset by peer)
[12:16:09] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:16:17] *** Joins: phma (~phma@host-67-44-209-61.hnremote.net)
[12:17:50] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[12:18:18] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (Ping timeout: 260 seconds)
[12:18:28] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[12:19:07] *** Joins: alzgh (~alzgh@user/alzgh)
[12:20:38] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Ping timeout: 260 seconds)
[12:22:30] *** Joins: cosimone (~user@93-44-186-19.ip98.fastwebnet.it)
[12:23:19] *** Quits: Guest4382 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Remote host closed the connection)
[12:24:22] *** Quits: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[12:25:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[12:25:46] *** Joins: acidjnk_new (~acidjnk@p200300d0c726704784feaa35b47dd204.dip0.t-ipconnect.de)
[12:27:45] *** Joins: __monty__ (~toonn@user/toonn)
[12:28:33] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Quit: Leaving)
[12:28:58] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[12:30:06] *** Quits: shiraeeshi[m] (~shiraeesh@2001:470:69fc:105::1:77) (Quit: You have been kicked for being idle)
[12:30:14] *** Quits: hsek[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: You have been kicked for being idle)
[12:30:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:39:53] *** Quits: polux (~polux@51.15.169.172) (Quit: The Lounge - https://thelounge.github.io)
[12:40:22] *** Joins: polux (~polux@51.15.169.172)
[12:42:27] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:44:11] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 264 seconds)
[12:46:14] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:47:00] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[12:47:14] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[12:47:42] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[12:50:18] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 268 seconds)
[12:52:07] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Read error: Connection reset by peer)
[12:52:10] *** Quits: _xor (~xor@72.49.199.147) (Ping timeout: 268 seconds)
[12:52:19] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[12:52:30] *** Quits: juhp (~juhp@128.106.188.220) (Remote host closed the connection)
[12:52:46] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[12:53:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[12:54:03] *** Joins: ski (~ski@remote12.chalmers.se)
[12:54:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 264 seconds)
[12:55:46] *** Joins: notzmv (~zmv@user/notzmv)
[12:56:15] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:57:56] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[12:58:11] *** Quits: df (~ben@justworks.xyz) (Ping timeout: 246 seconds)
[12:58:19] *** Joins: ubert (~Thunderbi@p200300ecdf4fcafee019fddc82d0353e.dip0.t-ipconnect.de)
[12:58:28] *** Joins: df (~ben@justworks.xyz)
[12:58:41] *** Joins: cfricke (~cfricke@user/cfricke)
[13:03:39] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[13:04:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[13:05:26] *** Quits: ubert (~Thunderbi@p200300ecdf4fcafee019fddc82d0353e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[13:11:30] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[13:14:44] *** Quits: fendor (~fendor@178.115.33.172.wireless.dyn.drei.com) (Remote host closed the connection)
[13:15:18] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:16:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 268 seconds)
[13:22:01] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:30:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[13:31:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[13:35:47] *** Joins: _xor (~xor@72.49.199.147)
[13:36:30] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[13:41:40] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:42:00] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:42:39] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[13:43:37] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[13:44:02] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:161c:6858:2d6b:fc1f)
[13:45:43] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:46:01] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[13:46:16] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[13:49:46] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:50:42] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[13:51:23] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[13:54:16] *** Joins: mmhat (~mmh@55d4b909.access.ecotel.net)
[13:54:25] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[13:58:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[13:58:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:59:31] *** Joins: desantra (~skykanin@user/skykanin)
[14:03:37] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[14:06:29] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[14:07:10] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:e9ee:3bd5:4988:8148)
[14:11:51] *** Quits: phma (~phma@host-67-44-209-61.hnremote.net) (Read error: Connection reset by peer)
[14:12:31] *** Joins: phma (~phma@host-67-44-208-102.hnremote.net)
[14:13:11] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[14:15:55] <timCF> Hello! In my program I do need Generic instance of UTCTime (to derive Generic for my own types which are using UTCTime), but seems like standard UTCTime does not export all constructors, and GHC refuses to stock derive Generic
[14:16:03] <timCF> What's the best option there?
[14:16:18] <timCF> Write orphan Generic instance for UTCTime by hand?
[14:17:09] <timCF> Not sure it's also possible because of missing constructors in scope
[14:17:50] *** Joins: msmhnd^ (~msmhnd@wsip-98-188-242-6.mc.at.cox.net)
[14:18:19] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[14:19:59] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:20:25] *** Joins: pop3 (~pop3@user/pop3)
[14:22:13] <[exa]> timCF: can you derive from Data ? both DiffTime and Day (in UTCTime) seem to have Data
[14:22:50] <timCF> [exa]: you mean it's possible to use Data to manually write orphan Generic instance?
[14:23:00] <maerwald> timCF: duplicate the type internally and then unsafeCoerce to make sure your functions always take the original UTCTime only
[14:24:09] <maerwald> that's the only way to really get around non-exported constructors
[14:25:16] <timCF> maerwald: ouch
[14:25:25] <timCF> maerwald: but thanks for reply!
[14:25:34] *** Joins: Cajun (~Cajun@user/cajun)
[14:27:13] <Hecate> hi
[14:27:22] <geekosaur> œ
[14:29:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[14:30:53] *** Joins: alx741 (~alx741@181.196.68.55)
[14:32:04] *** Joins: jumper149 (~jumper149@80.240.31.34)
[14:32:47] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[14:37:56] *** Joins: johnny_sitar (~artur@ip-89-161-55-249.tel.tkb.net.pl)
[14:38:03] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:42:23] *** Quits: johnny_sitar (~artur@ip-89-161-55-249.tel.tkb.net.pl) (Ping timeout: 264 seconds)
[14:46:38] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[14:47:26] *** Joins: pop3 (~pop3@user/pop3)
[14:53:15] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[14:55:11] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[14:58:34] *** Joins: johnny_sitar (~artur@user-5-173-132-197.play-internet.pl)
[14:59:57] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:10:24] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:10:33] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[15:10:45] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:11:22] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[15:11:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[15:12:38] *** Joins: kammao (~kammao@188.27.128.253)
[15:13:52] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[15:14:10] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Client Quit)
[15:14:42] <kammao> Hello! Any of you guys used Heroku with a haskell app? I'm having quite a bit of trouble with the Procfile.. Heroku does not find the directory that I give it therefore the app crashes even if it's deployed
[15:14:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[15:15:21] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[15:15:43] <Lycurgus> you are not the first person to come here with that complaint
[15:16:25] *** Quits: mmhat (~mmh@55d4b909.access.ecotel.net) (Quit: WeeChat 3.3)
[15:16:30] <Lycurgus> and this would not be the first time I responded that heroku doesn't really do hs, but that may have changed by now, your complaint notwithstanding
[15:18:10] <kammao> Ahh..That's encouraging!! I used the Yesod Framework and followed their guide to deploy this so  I thought It would be a clear process and maybe I was missing something
[15:18:19] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:161c:6858:2d6b:fc1f) (Ping timeout: 268 seconds)
[15:18:59] *** Joins: whez (sid470288@id-470288.lymington.irccloud.com)
[15:20:47] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 268 seconds)
[15:20:54] <Lycurgus> prolly snippets and toy apps will work
[15:24:27] <kammao> It's just a simple blog.. I couldn't really figure out  in the Procfile `web: ./dist/bin/{app}/{app} -p $PORT` how I should approach the path differently? Or how can I check that I'm using a wrong path since most of the websites that I've seen use that specific location..
[15:24:29] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:27:14] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[15:27:35] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[15:27:36] *** Joins: sudden (~cat@user/sudden)
[15:27:36] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:28:52] <Lycurgus> by coming to know what path the stuff ur using requires
[15:33:21] *** Joins: gentauro (~gentauro@user/gentauro)
[15:36:06] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:40:47] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:42:28] *** Quits: aleator (~aleator@188-67-216-232.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[15:43:05] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[15:44:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:45:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[15:49:42] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[15:49:48] *** Quits: kenran (~kenran@b2b-37-24-119-190.unitymedia.biz) (Quit: WeeChat info:version)
[15:50:38] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[15:53:16] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[15:53:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[15:53:35] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:53:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:54:32] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[15:57:11] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:58:06] *** Joins: werner100 (~werner100@2601:2c2:400:4440:dc41:dccb:7773:558f)
[16:00:13] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[16:00:14] *** Quits: xsperry (~xs@user/xsperry) ()
[16:00:20] <werner100> Hi everyone, yesterday I was reviewing the libraries available for handling command line options and arguments. I have experimented with cmdargs and it seems to do what I need. Which library are you guys using?
[16:00:38] *** Quits: kammao (~kammao@188.27.128.253) (Quit: Client closed)
[16:00:48] <geekosaur> optparse=applicative is common
[16:00:58] <geekosaur> s/=/-/
[16:03:21] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[16:05:00] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[16:06:16] <maerwald> I just started using cmdargs too
[16:06:26] <maerwald> optparse-applicative is powerful, but not very declarative
[16:06:33] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:07:50] <maerwald> but cmdargs has oddities: invalid configuration crashes at runtime instead of raising a type error
[16:08:12] <maerwald> not hard to test, but yeah
[16:09:03] <maerwald> exampe https://paste.tomsmeding.com/qf6oVZZP
[16:12:08] <maerwald> you also can't have mandatory flags
[16:13:15] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[16:13:21] <werner100> I found it handy but was looking for hooks to connect custom argument handling functions. It does a nice job for help, version, and when options are missing or incomplete. But it seems for processing other options and particularly commands/modes you need to tool your own parser.
[16:14:07] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:14:13] <werner100> Today, I'm going to look at System.Console.ArgParser.
[16:14:15] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:15:14] <Lycurgus> shouldn't the topic be adjusted?
[16:15:50] <geekosaur> for the logs being down? I hope that'll be fixed soon, the kerfuffle seems to be over
[16:16:02] <Lycurgus> "Archived" added before Public would do it
[16:16:09] <Lycurgus> they're not down
[16:16:47] <Lycurgus> they are turned off
[16:16:55] <geekosaur> right
[16:17:12] <Lycurgus> who are the parties?
[16:17:51] *** Joins: zincy (~tom@2a00:23c8:970c:4801:e02d:7bbd:5337:7d58)
[16:18:17] <Lycurgus> (contend in the GDPR issue)
[16:18:19] <zincy> Why do so many coders love regular expressions for validation?
[16:18:21] <Lycurgus> *contending
[16:18:49] <geekosaur> zincy, because it's what they know about
[16:18:54] <Lycurgus> zincy because of the power as a solution to string recognition and processing?
[16:18:58] *** Quits: sudden (~cat@user/sudden) (Quit: leaving)
[16:19:01] <geekosaur> (not necessarily know, just know about)
[16:19:17] <geekosaur> and they're afraid of parsers
[16:19:19] <maerwald> zincy: because they are to be prefeerred over parsers whenever possible
[16:19:21] <maerwald> geekosaur: no
[16:19:33] <maerwald> parsers carry more semantic power
[16:19:47] <Lycurgus> also the ubiquity of use for that purpose
[16:19:54] <werner100> ...and regex have been around for long time.
[16:20:29] <zincy> I just can't imagine when a regex is the right approach
[16:20:49] <Lycurgus> how long have you been programming?
[16:20:58] <[exa]> zincy: regexes can't be easily decompiled and validated -> they get away with pretty much anything
[16:21:04] <werner100> I think for string handling it's simple enough. Been programming since the seventies...
[16:21:11] <[exa]> s/decompiled/read humanely/
[16:21:20] <zincy> Lycurgus: 7 years
[16:21:33] * geekosaur wishes more regex engines supported, and more people used, /x
[16:21:41] <werner100> Machine language -> Basic -> Pascal -> C -> Scheme -> Java -> Haskell
[16:22:05] <maerwald> zincy: when your input is a regular language, then you use a regex
[16:22:20] <zincy> So its okay to use regexes to say validate this text is uppercase?
[16:22:28] <zincy> I just assumed regex = evil
[16:22:37] <maerwald> that's just an odd narrative sometimes spread here
[16:22:40] <zincy> But maybe in that case parsing would be too heavyweight
[16:22:42] *** Joins: rokoe (~roskoe@79-68-160-163.dynamic.dsl.as9105.com)
[16:22:44] <[exa]> one thing on the regexes that's uncanny is how people assume that matching is going to be roughly O(1) in the size of the input because "it can be compiled to a DFA right?" [padme_meme_the_dfa_is_small_right.jpg]
[16:22:47] <Lycurgus> right i don't think people today appreciate the extent to which assembly was used for systems and even applications before the 80s
[16:23:02] <[exa]> there have been literal DoSes exploiting that
[16:23:09] <maerwald> the problem is people using regexes for input that a regex can't possibly correctly validate
[16:23:13] <maerwald> that depends on the input
[16:23:42] <zincy> But modern implementations of regex can parse non-regular stuff
[16:23:43] <werner100> Correct
[16:23:45] <maerwald> if you use monadic parser combinators for everything, you're doing something wrong too (in terms of containing complexity)
[16:23:54] <zincy> oh ok
[16:24:01] <maerwald> zincy: yeah, those I avoid
[16:24:22] *** Joins: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net)
[16:25:03] <zincy> So the rule is regex is fine when it comes to regular languages because it gets nasty on non-regular with recursive regex
[16:25:38] <Lycurgus> so 1 solution to the GDPR issue would be to just block the log in the EU or where the GDPR is in effect
[16:26:31] <maerwald> Lycurgus: uhm.. 
[16:26:39] <maerwald> I don't think so
[16:26:49] <geekosaur> one problem there being that it's hosted in the EU
[16:26:52] <Lycurgus> scrubbing nicks would address the specific issue
[16:27:04] <Lycurgus> why is that a problem?
[16:27:35] <maerwald> as per GDPR I even need the ability to email an advertisement company and tell them I want all my cookies deleted from all their backends, not just my incoming ads
[16:27:56] <maerwald> no one knows how to enforce that
[16:27:58] <maerwald> but yeah
[16:28:02] <Lycurgus> that can only be true for ops in the GDPR jurisdiction
[16:28:37] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:28:56] <Lycurgus> stuff being done from yurope but not allowed there is fairly well established in tradition
[16:30:15] <lortabac> my main problem with regexes is the obfuscated and error-prone syntax
[16:30:28] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 268 seconds)
[16:31:10] <Lycurgus> they front the sound and proven automata
[16:32:45] <zincy> lortabac: So would you avoid regexes entirely?
[16:32:47] <maerwald> lortabac: I've probably written more bugs with monadic parser combinators
[16:33:32] <lortabac> I use regexes when I need them, but I wish they had a more human-friendly syntax
[16:33:56] <geekosaur> lortabac, there are regex extensions that help with the syntax. /x is one of them. raku extends the syntax to make a reasonable — and reasonably readable — parser syntax
[16:34:25] <geekosaur> (/x allows whitespace and comments, which helps a lot with readability)
[16:34:57] <boxscape_> Lycurgus rather than not offering the logs in the EU, I think you'd have to not log any user from the EU, no?
[16:35:32] <Lycurgus> right that might be easier too
[16:35:49] <boxscape_> it sounds harder to me, but also necessary
[16:36:09] <boxscape_> (that is if logging like this is subject to GDPR to begin with)
[16:36:30] <zincy> Doesnt the "rule of least power" imply that one should use regexes for trivial cases of parsing and validation vs a monadic parser
[16:36:31] <zincy> https://en.wikipedia.org/wiki/Rule_of_least_power
[16:36:41] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:49b2:5c3a:dea0:5ca1)
[16:36:44] <lortabac> geekosaur: it still looks needlessly obfuscated to me, even in raku
[16:37:01] <lortabac> I'd prefer something like regex-applicative
[16:38:51] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[16:39:00] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[16:39:00] *** Joins: sudden (~cat@user/sudden)
[16:39:56] <lortabac> zincy: sounds reasonable
[16:40:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5495:68b3:d03c:732e) (Ping timeout: 268 seconds)
[16:41:56] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:c6dc:21f9:bc16:feb3)
[16:43:26] <Lycurgus> the power of regexes seems well matched to the complexity of the target ops to me
[16:44:30] * Lycurgus but I'm just an ol fart, don't pay me no mind
[16:44:38] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:46:09] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[16:46:10] *** Quits: werner100 (~werner100@2601:2c2:400:4440:dc41:dccb:7773:558f) (Ping timeout: 256 seconds)
[16:53:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:55:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:57:43] <zincy> So in a dynamic language is can it be a good idea to first parse a JSON request body and then validate individual fields which are strings with regexes?
[16:57:45] *** Quits: phma (~phma@host-67-44-208-102.hnremote.net) (Read error: Connection reset by peer)
[16:58:21] <zincy> I've mostly used Haskell so don't know how parsing/validation is best done in mainstream languages?
[16:59:09] *** Joins: slack1256 (~slack1256@191.126.227.82)
[17:01:01] <maerwald> you can do the same in haskell
[17:01:29] *** Quits: jess (~jess@libera/staff/jess) ()
[17:04:06] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (Quit: WeeChat 3.3)
[17:06:42] *** Quits: johnny_sitar (~artur@user-5-173-132-197.play-internet.pl) (Ping timeout: 260 seconds)
[17:08:13] *** Quits: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[17:10:08] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[17:11:22] *** Quits: acidjnk_new (~acidjnk@p200300d0c726704784feaa35b47dd204.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:11:38] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[17:15:59] *** Joins: juhp (~juhp@128.106.188.220)
[17:17:16] *** Joins: jespada (~jespada@190.7.36.46)
[17:17:56] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:22:28] *** Joins: syd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[17:24:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:25:16] <zincy> maewald: So no fundamental difference between langauges?
[17:26:26] <geekosaur> there are several ways to do parsing, they're all language-agnostic
[17:27:12] <geekosaur> some of them may be easier in some languages than others, but parsing is parsing regardless of implementation language
[17:27:13] *** Joins: brschkv (~jbrusch@185.223.145.18)
[17:27:30] <zincy> Ah ok, need to do more reading then
[17:28:22] <zincy> I guess I am confused because the parsing and validation is usually done in one step with  in Haskell
[17:29:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:29:25] <geekosaur> that's more or less because parser combinators come more naturally in Haskell. but we still have happy which implements a yacc-like LALR(1) (or more recently GLR) parser for Haskell
[17:30:01] <geekosaur> and parser combinators make it easier to combine the parsing and validation. they do not require it, however
[17:31:23] *** Joins: yrlnry (~mjd@2603:301d:775:0:3569:8496:7f44:52c9)
[17:31:29] *** Joins: pera (~pera@user/pera)
[17:35:05] <maerwald> there are parser combinators for C
[17:35:10] <maerwald> it's nothing unique to haskell anymore
[17:35:49] <maerwald> zincy: you can parse json strings into Aeson Value and then do the validation/extraction manually
[17:36:20] <syd> there's a blog article "Parse, don't validate" which you might find interesting in that regard.
[17:36:48] <Hecate> yes it's lovely :p
[17:36:59] *** Quits: yrlnry (~mjd@2603:301d:775:0:3569:8496:7f44:52c9) (Ping timeout: 264 seconds)
[17:37:41] <maerwald> zincy: one advantage might be that it's easier to support multiple schemas ad-hoc that way
[17:39:02] <maerwald> here's a real-world example where the aeson parser just produces Value and then you have a manual extraction: https://github.com/input-output-hk/cardano-node/blob/d95ef21062a50acf8f35f1f5d94f8a8a70f7510b/cardano-api/src/Cardano/Api/ScriptData.hs#L459
[17:42:08] <zincy> Thanks syd and Maerwald
[17:43:11] <zincy> I guess there is nothing magical about combining parsing and validation in one step
[17:43:43] <zincy> And sometimes you will definitely want to separate them if you have semantic validation which cannot be easily expressed in a type
[17:44:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:45:34] *** Joins: max22- (~maxime@2a01cb088335980058acad91096e7c9d.ipv6.abo.wanadoo.fr)
[17:47:10] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[17:47:35] <zincy> Getting past the intermediate stage of coding seems to be more about unlearning than learning
[17:47:51] <zincy> Going from absolutes to it depends
[17:48:06] <maerwald> zincy: well, if you parse unrestricted into `Value`, then I think that's a DoS angle in fact
[17:48:12] <geekosaur> it's about learning flexibility instead of expecting strict rules
[17:48:24] <zincy> yeah
[17:50:10] <maerwald> but I think most derived aeson parsers are DoS prone
[17:50:26] <zincy> Denial of service?
[17:51:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[17:53:37] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[17:56:10] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[18:00:33] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.3)
[18:09:22] <merijn> zincy: In the sense that malicious input can take down your parser
[18:11:34] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[18:11:34] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[18:11:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:14:01] <zincy> ah right
[18:14:02] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:18:56] *** Joins: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net)
[18:19:44] *** Quits: pgib (~textual@173.38.117.89) (Quit: 00 PC LOAD LETTER)
[18:23:47] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) ()
[18:24:33] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Ping timeout: 268 seconds)
[18:24:46] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:76a9:f65d:22e8:2e7b) (Quit: WeeChat 2.8)
[18:26:20] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:28:22] *** Quits: slack1256 (~slack1256@191.126.227.82) (Ping timeout: 260 seconds)
[18:31:06] *** Joins: slack1256 (~slack1256@191.125.227.82)
[18:31:39] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[18:31:47] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c)
[18:32:56] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:37:34] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[18:40:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[18:40:54] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:2f4a:5df3:56f6:843a)
[18:40:54] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:41:03] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:45:51] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[18:47:28] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[18:49:40] <f-a> hello. I am writing a simple «select language» menu. As now I am keeping all langs in a list and rotate it when the user presses ← →, and pick _head on ⏎. It works, but I wonder: is there a more appropriate data type?
[18:50:01] <merijn> Sounds like a Zipper :>
[18:50:09] <yrlnry> I was going to say sounds like a zipper.
[18:50:11] <f-a> mhh let us see if microlens packs it
[18:51:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:51:33] <yrlnry> The original (1997) Huet paper discusses list zippers specifically, and wikipedia has that as an example: https://en.wikipedia.org/wiki/Zipper_(data_structure)#Example:_Bidirectional_list_traversal
[18:52:39] <f-a> thansk
[18:52:41] <f-a> *thanks
[18:55:48] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:56:38] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c) (Remote host closed the connection)
[18:57:28] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[19:00:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[19:01:33] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[19:01:35] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 264 seconds)
[19:01:43] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:01:54] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[19:04:00] *** Quits: msmhnd^ (~msmhnd@wsip-98-188-242-6.mc.at.cox.net) (Ping timeout: 268 seconds)
[19:04:26] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:07:22] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:2f4a:5df3:56f6:843a) (Quit: SeungheonOh)
[19:07:41] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:2f4a:5df3:56f6:843a)
[19:08:40] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:09:23] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[19:10:43] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:2f4a:5df3:56f6:843a) (Client Quit)
[19:11:06] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:2f4a:5df3:56f6:843a)
[19:13:52] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:2f4a:5df3:56f6:843a) (Client Quit)
[19:14:26] <remexre> if I have some variable foo of concrete type Foo, why does DuplicateRecordFields not like (foo { bar = 1 }) when there are two types with a bar::Int field in scope?
[19:14:38] <remexre> shouldn't it be able to disambiguate based on the type of foo?
[19:14:57] <remexre> (the error message even indicates that it knows the type!)
[19:15:24] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:16:29] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[19:16:30] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/duplicate_record_fields.html#record-updates
[19:17:23] <geekosaur> it's not real smart about the ambiguity check even if it knows the type (I'm not even sure it knows the type fully until it prints the error message, tbh)
[19:17:27] *** Joins: moerlitz (d9eb32b7ed@knopi.disroot.org)
[19:17:55] <remexre> I think the h x = (x :: T) { foo = 3 } case applies to my situation
[19:18:12] <remexre> but even when I give an explicit type for the thing being updated, no joy
[19:19:07] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[19:21:20] <geekosaur> mrr. wonder if they broke it at some point. I think I'm quoting the 9.0.1 manual, what version of ghc are you using?
[19:21:48] <remexre> 9.2.1
[19:22:15] <remexre> annoying that "latest" isn't updated for it...
[19:22:29] <geekosaur> hm. could imagine something broke while adding RecordDotSyntax
[19:22:46] <remexre> oh, I think the error might actually be from -Werror with the new warning they mention there?
[19:23:06] <remexre> maybe they're afraid it will in the future?
[19:24:15] <syd> does DisambiguateRecordFields help?
[19:24:56] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:24:56] <remexre> nope, have that on as well
[19:25:25] <remexre> both of the ambiguous fields are of the same... dunno the term; are both F a for different concrete a
[19:25:55] <merijn> I just blindly assume that any RecordFields extension will just make everything worse and has no determinism :p
[19:26:58] <remexre> and I think deep down I just want {-# LANGUAGE PureScript #-} for all that :P
[19:27:02] <syd> hmm, I think it might qualify as ambiguous. what should the type of h be generally?
[19:27:22] <remexre> ABunchOfMonadConstraints m => ... -> m Foo
[19:27:23] <syd> I think it might be this case from DisambiguateRecordFields: "bad1 k = k { x = 3 }        -- Ambiguous"
[19:27:30] <remexre> ah
[19:27:38] <remexre> yeah, that could do it, where k=pure
[19:28:08] <syd> I was thinking more as in, k being a value of either of the types with the field x.
[19:28:12] <remexre> I qualified the name (foo { Foo.bar = ... }) and it works, so I'm gonna call it that
[19:28:19] <remexre> oh whooops misread that
[19:28:37] <remexre> no, it's a do-block ending with (pure $ foo { ... })
[19:28:44] <syd> there's a blog post about how to import and use them ergonomically, let me see if I can find it
[19:30:08] *** Quits: ftzm[m] (~ftzmmatri@2001:470:69fc:105::1:dfc) (Quit: You have been kicked for being idle)
[19:30:09] *** Quits: reddishblue[m] (~reddishbl@2001:470:69fc:105::21eb) (Quit: You have been kicked for being idle)
[19:30:24] <syd> https://chrisdone.com/posts/import-aliases-field-names/
[19:30:27] *** Joins: reddishblue[m] (~reddishbl@2001:470:69fc:105::21eb)
[19:30:32] *** Parts: reddishblue[m] (~reddishbl@2001:470:69fc:105::21eb) ()
[19:30:35] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:31:08] <remexre> ooh, I hadn't seen that before
[19:31:40] <remexre> I'm already importing the module qualified (and the module only defines this type), so I'm probably gonna stick with that; thanks for showing me the different technique though!
[19:31:49] <remexre> and thanks to everyone for helping debug! 
[19:34:01] <syd> np, I just use personName/companyName prefixes, ergonomics be damned lol. Lenses can work how you initially wanted I believe, makeClassy is the thing to google iirc.
[19:34:42] <np> picking `np` as my nick was a mistake
[19:35:16] <geekosaur> we used to have someone with the nick "so". imagine *that* one
[19:35:19] <syd> haha, np np ;)
[19:36:10] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 252 seconds)
[19:36:24] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[19:38:03] <syd> regarding future stuff, if/when HasField gets setField, I believe it'll be possible to write row-polymorphic-esque get/set functions for any record with a type-level literal field name; right now I'm pretty sure it's possible to write get functions that way.
[19:38:41] *** Quits: rokoe (~roskoe@79-68-160-163.dynamic.dsl.as9105.com) (Quit: Konversation terminated!)
[19:40:37] <syd> getName :: HasField "name" r String -> String (or something like that)
[19:41:07] *** Joins: _________ (~nobody@user/noodly)
[19:41:09] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[19:41:10] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[19:43:35] <yushyin> syd: ah yes :D I found this by chance the other day https://github.com/ElderEphemera/instance-impl
[19:47:06] <remexre> yeah, I was using labelled optics, but their TH stuff doesn't support 9.2.1 at the moment
[19:47:11] <remexre> (or didn't on monday at least!)
[19:47:30] <remexre> I expect in a few weeks I'll be able to use it again
[19:47:43] <remexre> but I was basically just using it to disambiguate fields
[19:50:04] <syd> yushyin: nice, that blog post is what alerted me to the existence of HasField. Awesome blog in general, "Invert Your Mocks" and "The Trouble With Typed Errors" come to mind.
[19:51:21] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[19:51:21] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[19:51:21] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[19:53:41] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[19:53:54] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:431c:d49e:2f86:91cc) (Quit: ZNC 1.8.2 - https://znc.in)
[19:54:04] *** Joins: Athas (athas@2a01:7c8:aaac:1cf:a0d4:8908:cfdb:b9c0)
[19:56:41] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:57:29] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:58:20] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[20:03:19] *** Quits: brschkv (~jbrusch@185.223.145.18) (Ping timeout: 256 seconds)
[20:04:49] *** Quits: jjhoo (jahakala@user/jjhoo) (Remote host closed the connection)
[20:10:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:10:28] *** Joins: alzgh (~alzgh@user/alzgh)
[20:13:15] *** Joins: aegon (~mike@174.127.249.180)
[20:14:37] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: No route to host)
[20:14:57] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[20:14:57] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[20:14:57] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:15:35] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[20:15:59] *** Joins: Sgeo (~Sgeo@user/sgeo)
[20:18:23] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 264 seconds)
[20:19:37] *** Joins: zebrag (~chris@user/zebrag)
[20:19:48] *** Quits: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net) (Quit: Client closed)
[20:19:49] *** Joins: jjhoo (~jahakala@user/jjhoo)
[20:25:09] *** Joins: emf (~emf@2620:10d:c090:400::5:38d)
[20:25:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[20:25:58] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[20:33:07] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:36:07] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Quit: WeeChat 3.1)
[20:41:46] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:42:51] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[20:45:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:45:54] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:47:47] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:48:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[20:51:43] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:52:30] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:54:26] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:54:38] <awpr> timCF: you don't need an instance of Generic for UTCTime to derive Generic for types that have UTCTime fields
[20:55:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:55:10] <awpr> oh, not online :/
[20:55:49] *** Joins: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a)
[20:56:01] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Quit: ubert)
[20:58:33] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:04:37] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[21:05:30] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[21:06:03] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:06:38] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (Ping timeout: 260 seconds)
[21:08:08] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[21:08:26] *** Joins: econo (uid147250@user/econo)
[21:10:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:11:13] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[21:11:20] <dsal> I used a ContT for the first time along with These to replace a fairly simple list monad and my program is slower.
[21:11:44] *** Joins: pop3 (~pop3@user/pop3)
[21:14:04] <dsal> Also, I feel like callCC has the wrong signature.  I had to do something gross to get a thing to typecheck because I was calling the exit function in a context that wanted an `a` but it was returning  something else.   `exit Whatever *> undefined` works, but seems a little wrong.
[21:14:27] <c_wraith> dsal: yes, it does
[21:14:35] <c_wraith> it should be higher-rank
[21:15:21] <dsal> Overall, I didn't find it too weird.  I was expecting it to be confusing and scary or something.
[21:17:37] <dolio> dsal: https://okmij.org/ftp/continuations/against-callcc.html#performance-hit
[21:19:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[21:20:07] <dsal> Heh.  Yeah.  I'm not too surprised.  I was using the list monad originally which was pretty great.  I might be able to just use These directly, though the monad looks slightly strange to me.
[21:20:24] <dolio> I.E. don't confuse 'conceptual beauty' arguments about how call/cc can technically implement everything for actual practicality.
[21:20:48] *** Quits: kuribas (~user@ptr-25vy0i9zmp0qcl8wvlj.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:21:09] <dolio> (Although it can't actually implement everything, as that page also argues.)
[21:21:10] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[21:22:04] *** Joins: brschkv (~jbrusch@dynamic-095-116-017-025.95.116.pool.telefonica.de)
[21:23:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:24:55] *** Quits: syd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Ping timeout: 256 seconds)
[21:26:11] *** Quits: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a) (Read error: Connection reset by peer)
[21:26:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:26:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[21:28:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:29:10] *** Joins: ubert (~Thunderbi@p200300ecdf4fcafee019fddc82d0353e.dip0.t-ipconnect.de)
[21:30:16] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:30] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:31:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:31:48] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Read error: Connection reset by peer)
[21:31:52] *** Joins: fef (~thedawn@user/thedawn)
[21:32:02] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[21:34:40] *** Quits: pera (~pera@user/pera) (Quit: leaving)
[21:34:51] *** Joins: slac76440 (~slack1256@191.125.99.211)
[21:35:07] *** Joins: syd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[21:35:20] <syd> dsal: not sure what your use case is, but does the Logic Monad suit your needs perchance?
[21:35:37] <syd> (you mentioned List, so I figured it might involve backtracking or something)
[21:37:02] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[21:37:34] *** Quits: slack1256 (~slack1256@191.125.227.82) (Ping timeout: 268 seconds)
[21:39:30] <dsal> Thanks.  I'll take a look at that later -- might help.  There's nothing serious here.  Just doodling on some old AoC things that are varying grossness.  I have an initial state and then a few child states may fall out of it that need to be recursed.  It's one of these things where I'm trying to figure out what is expressive and not hard to read.
[21:41:55] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:43:57] *** Joins: vladl (~vladl@174.127.234.115)
[21:44:53] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[21:44:53] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[21:44:53] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:45:54] <Lycurgus> ocaml at least has delimited continuations
[21:46:31] <c_wraith> eh?  delimited continuations are just... functions.  that's what Cont/ContT are, too
[21:48:06] <Lycurgus> ah, from callCC i thought it was like the scheme thing
[21:48:36] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[21:49:40] *** Joins: pop3 (~pop3@user/pop3)
[21:51:54] <dolio> It is, sort of.
[21:52:25] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:52:36] <dolio> It's undelimited inside of a single call to runContT, obviously, but the runContT delimits the scope in a way.
[21:52:45] *** Joins: alzgh (~alzgh@user/alzgh)
[21:53:44] <dolio> Which is also how many Scheme implementations really work. The REPL delimits your call/cc.
[21:54:42] <c_wraith> Well, it's clearly delimited in terms of only being able to jump to a point inside Cont/ContT
[21:55:00] <c_wraith> unlike scheme, which doesn't provide that clean separation
[21:55:46] <dolio> My "obviously" was probably not ideally placed. I meant it's obvious that you can't capture continuations that go beyond the `runContT`.
[21:57:33] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:00:32] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:01:00] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b) (Ping timeout: 268 seconds)
[22:03:30] <vladl> Hi, I'm a C++ dev learning haskell and I'm trying to solve a design problem. I have no idea what the Haskelly way of doing what I want to do is. I have a short file and a problem description in the comments here http://dpaste.com//CFTUNYCJC 
[22:06:35] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:07:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:07:52] <gentauro> vladl: you don't, that's the beauty of Haskell and a `sound typesystem` :)
[22:08:13] * gentauro perhaps there are some PRAGMAS and some HaskellTemplate …
[22:08:22] <c_wraith> vladl: how silly are you willing to get?  Because there are answers that are very concise but require really sophisticated tools.  Like uniplate, or the lensy versions thereof
[22:08:56] <vladl> gentauro: yes I figured I couldn't get away with adhoc polymorphism... I don't want to get too silly, I'd rather do this in a canonical way than bend haskell to look like C++
[22:09:23] <gentauro> vladl: btw, your 3 last statements point to variables that don't exisit?
[22:09:35] <vladl> yes, its psuedocode
[22:09:38] <gentauro> ahhh
[22:09:41] <gentauro> fair enough
[22:10:16] <vladl> c_wraith: i'll totally change my design, i figured there's a good chance this is an XY problem or whatever its called
[22:10:42] <vladl> where the asker asks how to do X when they actually wanna accomplish Y but are missing the forest for the trees
[22:11:20] <vladl> I'm trying to make it so i can request a layout and then any contained widgets, if they have a notion of time, or tags, then they will apply those rules to their filters
[22:11:59] <gentauro> vladl: why are all types of widgets in the same (sum) `type`?
[22:12:37] <vladl> gentauro: I wanted to make a layout tree that i could throw together in ghci repl
[22:13:03] <vladl> so a widget might just be a container of other widgets
[22:13:07] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[22:13:21] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:13:31] <vladl> but i basically want properties set at a node to affect the subtree
[22:13:36] <gentauro> vladl: got it
[22:14:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b)
[22:16:27] <dsal> https://xyproblem.info
[22:16:56] <dsal> It's particularly funny when someone is doing 2D graphics and has an XY problem. heh
[22:17:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:18:21] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:18:42] *** Joins: alzgh (~alzgh@user/alzgh)
[22:19:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:25:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:28:08] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:28:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:30:12] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[22:33:04] *** Quits: max22- (~maxime@2a01cb088335980058acad91096e7c9d.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:33:43] <janus> why don't people mention XY problem and SSCCE together? Are they in opposition to each other? SSCCE says "Minimise bandwidth for the example, do not bore the audience.". That could be interpreted as omitting the context. Both of their goals is to convince the asker to provide the right context. But both of them use simplistic terms, in one case 'minimal' in other case 'solution vs problem'. In fact it's 
[22:33:49] <janus> just about learning how to ask well.
[22:34:36] <ski> ("SSCCE" standing for ?)
[22:35:21] <vladl> single self-contained compiling example.
[22:35:55] <vladl> i generally agree but in more boilerplatey languages sometimes psuedocode gets the point across more efficiently
[22:35:55] <ski> ty
[22:36:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[22:38:22] *** Joins: toreiussd (uid469671@id-469671.lymington.irccloud.com)
[22:38:27] <vladl> sscce's are useful for more concrete questions, like bughunting where a repro is required
[22:40:02] *** Quits: brschkv (~jbrusch@dynamic-095-116-017-025.95.116.pool.telefonica.de) (Quit: Leaving)
[22:41:07] <toreiussd> Obtaining min element using a foldtree function https://www.irccloud.com/pastebin/nqt2N6lQ/Haskell_message_1
[22:45:30] <ski> toreiussd : check whether you get `Nothing', in `f' ?
[22:46:05] <ski> > min Nothing (Just 2)
[22:46:07] <lambdabot>  Nothing
[22:46:46] <ski> since every tree has at least one leaf, you'll always, with current code, have at least one `Nothing', that you're passing to `minimum'. which causes the result of all `minimum' calls to be `Nothing'
[22:48:05] <ski> instead, you only want to give `Nothing' as result, in case you have the an empty tree (so a single `Tip', and no element)
[22:48:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:48:58] <toreiussd> copy
[22:49:23] <ski> (you could have four cases .. or, maybe there could be a way of expressing it more succinctly)
[22:49:56] <toreiussd> the issue is how would have multiple cases for the z value
[22:50:11] <toreiussd> Nothing is one yes only if the tree is empty
[22:50:19] <toreiussd> but how would I add another case
[22:51:06] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (Ping timeout: 260 seconds)
[22:51:21] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[22:51:58] <ski> `z' is just a single case
[22:52:12] <ski> for a `Tip', there is no minimum, since there's no elements
[22:52:14] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (Ping timeout: 265 seconds)
[22:52:43] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Ping timeout: 265 seconds)
[22:52:43] <ski> `f' handles `Bin' nodes
[22:53:08] <ski> toreiussd : you agree that if you have at least one element, then you should not get `Nothing' as result, yes ?
[22:53:14] *** Joins: hiato (~op_4@user/op-4/x-9116473)
[22:53:18] <toreiussd> correct
[22:53:35] *** Quits: op_4 (~op_4@user/op-4/x-9116473) (Ping timeout: 260 seconds)
[22:53:39] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:54:02] *** Quits: canta (~canta@user/canta) (Ping timeout: 268 seconds)
[22:54:08] *** Joins: hexagoxel (~hexagoxel@hexagoxel.de)
[22:54:14] <toreiussd> I just don't know what to use to express multiple cases 
[22:54:28] <ski> so, for the recursive/inductive case, the case handling `Bin' (which is `f', in your case, since you're using a fold/catamorphism), you're now allowed to *assume* ("trust", if you prefer), that it'll only get passed `Nothing' as first/last argument, in case the corresponding subtree was empty (was a `Tip')
[22:54:51] <ski> toreiussd : use pattern-matching, just like you already did, for `foldTree'
[22:55:43] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[22:55:58] *** Joins: canta (~canta@user/canta)
[22:56:03] <ski> so, `f' ought to check whether it gets `Nothing's or `Just's (with a minimum element of the subtree). then, it should take the minimum of all the elements it's got : which are (a) (possibly) a minimum element, for each subtree; (b) the element in the `Bin' node itself
[22:57:52] <toreiussd> mmmh confused but only because of the formatting of the text
[22:58:48] <monochrom> janus: I mention "XY" and "I can't reproduce your error" all the time :)
[22:59:04] <monochrom> The only problem is that I am not here all the time.
[23:00:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[23:00:43] <monochrom> But generally I champion for "do your due dilegence", "ask high-quality informative questions" when I'm around.
[23:01:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[23:02:05] *** Joins: max22- (~maxime@2a01cb08833598006eec136a4e6fc13b.ipv6.abo.wanadoo.fr)
[23:02:23] <monochrom> "Worse", I fight against "qurents are entitled to conceal information, answerers are obliged to spew out lectures after lectures"
[23:03:17] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[23:05:00] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[23:05:24] <monochrom> Oh, you asked about whether they oppose each other.
[23:05:48] <monochrom> Nah, they happen hand-in-hand all the time.
[23:06:11] <monochrom> For example, suppose someone runs into a type error.
[23:06:55] *** Joins: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl)
[23:07:01] <monochrom> They decide to conceal their code and just say "hi, how do I trouble-shoot type errors?"  So, it is an XY problem and a refusal to show any code at all at the same time.  They feed each other.
[23:07:10] <toreiussd> https://www.irccloud.com/pastebin/3lMua9X3/
[23:07:58] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 260 seconds)
[23:08:44] <toreiussd> https://www.irccloud.com/pastebin/oAoHVf9x/
[23:09:07] <maerwald> monochrom: XY is the reason I'm making money. Shh
[23:09:20] *** Joins: trriplex (~trriplex@user/trriplex)
[23:09:28] <maerwald> most of programming is XY
[23:09:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:09:42] <maerwald> "we need a web app"
[23:09:45] <maerwald> ok, yeah... sure
[23:09:54] <monochrom> Don't worry maerwald. People won't change their ways even after I point out what's wrong. :)
[23:10:32] <maerwald> now someone needs to put their money onto a blockchain... why? Hell, Idc!
[23:11:00] <vladl> oh i misread your question as well janus. my mistake. I think in the case of a lot of XY errors (at least the XY errors I experience), its usually a design issue, like an issue with the fundamental approach to the problem, and in these cases trying to obtain an SSCCE is going to waste everyone's time when the answer winds up containing "throw out your current approach"
[23:11:25] *** Quits: max22- (~maxime@2a01cb08833598006eec136a4e6fc13b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:12:06] <maerwald> or a CTO who accidentially read a blog post about functional programming starts to hire haskellers, because "zomg, such academic"
[23:12:12] *** Quits: dumptruckman (~dumptruck@45-79-175-133.ip.linodeusercontent.com) (Quit: ZNC - https://znc.in)
[23:12:20] <monochrom> toreiussd, it is not true that every function needs pattern matching.
[23:13:19] <ski> toreiussd : yea, `listTree' doesn't need it, because it's producing a list (which is actually pattern-matched by `(++)'). however, `minTree' wants to produce a value of the same type as the elements. but if the tree is empty, it can't, and so it needs to `Maybe' produce such a value. and therefore the fold needs to handle the `Maybe's coming from the folding of the subtrees, in the `Bin' case (being your `f')
[23:14:07] <monochrom> Well, a CTO who respects academics is still good news.
[23:15:01] <monochrom> Better than a CTO reading a blog post about PHP and going "zomg such anti-academic"
[23:16:04] <toreiussd> so Id need another case for the f
[23:16:21] <ski> you need to split cases, yea
[23:16:38] <monochrom> Seriously Java was successful because, only because, CTOs read magazine articles (remember those? blogs didn't exist back then, but hey, same difference) about Java and went "zomg, such enterprise"
[23:16:40] *** Quits: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com) (Quit: leaving)
[23:16:41] <toreiussd> what would I use for that. Im new to haskell that's why
[23:17:08] <ski> `l' and `r' are `Maybe a's. you need to handle the possible cases for those, separately, rather than trying to have a single defining equation handling all
[23:17:17] <ski> toreiussd : pattern-matching
[23:17:52] *** Joins: dumptruckman (~dumptruck@45-79-175-133.ip.linodeusercontent.com)
[23:18:01] <ski> toreiussd : note how `foldTree' pattern-matches on the `Tree a' argument, doing case analysis, doing different things, depending on whether it got a `Tip' or a `Node' ?
[23:18:10] <maerwald> that's the thing, there are no average CTOs... either they rule or no one knows how they got where they are
[23:18:31] <ski> do the same thing, for `f', except you're now pattern-matching on the possible shapes of `Maybe a', rather than `Tree a'
[23:18:47] <monochrom> Actually the CTO title didn't exist back then either, heh. But you know who they were.
[23:19:38] *** Joins: isovector1 (~isovector@172.103.216.166)
[23:19:47] <monochrom> OK how about one sample line of code?  You can go "f Nothing x Nothing = Just x" for the 1st case.
[23:19:50] <isovector1> does anyone have a working stack config for ghc 9.2.1?
[23:19:54] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[23:19:55] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[23:20:11] <monochrom> There are like 3 more cases.
[23:20:31] <toreiussd> thx for that
[23:20:36] *** Joins: msmhnd^ (~msmhnd@h50.174.139.63.static.ip.windstream.net)
[23:20:56] <awpr> best I've managed is to use ghcup to get a system GHC-9.2.1, then use `stack --system-ghc --resolver nightly --compiler ghc-9.2.1`
[23:21:47] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:21:53] <awpr> plus making a custom resolver to get newer versions that support 9.2, and even get a few packages from GitHub where needed
[23:21:55] <ski> toreiussd : that's the case in which both subtrees were empty (and so `foldTree' gave `z', that is `Nothing', for those. remember, you're assuming that you'll only get `Nothing' when the tree is empty. (but you'll then also need to ensure that `f' satisfies this condition))
[23:22:37] <isovector1> awpr: yeesh. maybe it's time to swithc back to cabal?
[23:22:53] <isovector1> :(
[23:22:57] <aegon> aaaaa, my dev cycle lately is spec-delta, haskell-prototype-components-delta, haskell-prototype-lib-delta, c-lib-delta. The haskell-prototype -> c-library path is the worst. Way more source lines of code and way more tedium within that code
[23:23:14] <aegon> awpr: so is stack pretty laggy with releases compared to cabal-v2?
[23:23:21] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:e9ee:3bd5:4988:8148) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:23:25] <awpr> because Stackage hasn't made GHC-9.2 available in 4 days?  idk, I don't mind so much
[23:23:30] <aegon> i thought 9.3 was just released
[23:23:55] <awpr> aggressive curation of dependency versions is always going to come with a cost of taking time to incorporate updates
[23:24:07] <monochrom> Nah, x.(odd number) is never released.
[23:24:30] <toreiussd> i think for that one I now understand thx. however im still attempting to build a definition for a fold over RoseTree.
[23:24:38] <toreiussd> thx nonetheless guys
[23:25:11] <geekosaur> aegon, stack is curated so they are unlikely to move immediately to 9.2.1
[23:25:35] <geekosaur> and given how things have gone they make a 9.0.1 lts before a 9.2.1 nightly
[23:25:35] <aegon> monochrom: wierd, so x.(odd) releases are kinda tech previews for the next even release?
[23:25:42] <ski> toreiussd : look at the definition of `RoseTree'. `foldTree n t' is supposed to replace all the `Node's in `t' by `n'
[23:25:45] <geekosaur> they're development versions
[23:25:51] <isovector1> oh i didn't realize how fresh ghc 9.2.1 was
[23:25:58] <geekosaur> 9.3.date
[23:26:03] <ski> er, `foldRose', rather
[23:26:04] <isovector1> tho there's still not an lts for 9.0
[23:26:06] <monochrom> Not released at all.
[23:26:10] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[23:26:35] <geekosaur> right, that's why I said they might hold off until they can make a 9.0.1 lts before they consider 9.2.1 as nightly
[23:26:36] <ski> just like `foldTree f z t' is replacing all the `Tip's in `t' with `z', and all the `Bin's in `t' with `f'
[23:26:39] *** Quits: dumptruckman (~dumptruck@45-79-175-133.ip.linodeusercontent.com) (Quit: ZNC - https://znc.in)
[23:26:43] <monochrom> And I don't think GHC has a "tech preview" notion.
[23:27:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:27:45] *** Joins: nosewings (~ngpc@2603-8081-3e05-e2d0-91fa-0be4-4222-fe4b.res6.spectrum.com)
[23:28:01] <ski> so `foldTree f z (Bin (Bin Tip 0 Tip) 1 (Bin (Bin Tip 2 Tip) 3 Tip))' is going to be `f (f z 0 z) 1 (f (f z 2 z) 3 z)'
[23:28:58] <unit73e> afaik GHC only has a stable release notion
[23:29:07] <unit73e> and it has been like that since forever
[23:29:19] <unit73e> also hi
[23:29:24] <geekosaur> there are release candidates, although they too can be iffy
[23:29:27] <toreiussd> Im also trying to optimize the listTree function to be in linear time however i think i should pass a function parameter
[23:29:32] <geekosaur> like 9.2 has been a cursed release
[23:29:47] <ski> similarly, `foldRose n (Node 0 [Node 1 [Node 2 [],Node 3 []],Node 4 [],Node 5 [Node 6 [Node 7 []]]])' is supposed to be `n 0 [n 1 [n 2 [],n 3 []],n 4 [],n 5 [n 6 [n 7 []]]]'
[23:30:14] <geekosaur> (and continues to be cursed; I gather a 9.2.2 may be appearing sooner rather than later)
[23:30:25] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 268 seconds)
[23:30:36] <unit73e> I see that GHC still has that ugly site :P but the documentation has the pretty theme
[23:30:51] <geekosaur> sadly the docs are still for 9.0.1
[23:30:56] <awpr> hmm, if they're looking at a new release, I should probably rush to report the `type (<)` bug
[23:31:05] <ski> toreiussd : yes, left-nestedness of `++' (like `(((as ++ bs) ++ cs) ++ ds) ++ es', which results from the "left-recursion" `20:44 < monochrom> Well, a CTO who respects academics is still good news.
[23:31:09] <ski> 20:45 < monochrom> Better than a CTO reading a blog post about PHP and going "zomg such anti-academic"
[23:31:16] <ski> er, sorry
[23:31:22] <aegon> i was just reading thorugh the 9.3 users guide last night... I guess i got excited for non releasable features until 9.4 :X. The record dot syntax seems cool but between that and record punning and wild cards etc.. modifying records is turning into a wild world. Is the distaste for lens the compile time only or is there some overhead to the way its formed? I notice since workign with lenses there are a 
[23:31:28] <aegon> bunch of micro / mini alternatives.
[23:31:29] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:31:29] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:31:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[23:31:58] <geekosaur> lenses only have compile time overhead if you use TH to construct them
[23:32:20] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[23:32:21] <maerwald> hmm... I'm starting to think big modules are advantegous... they allow to see unfactored code sharing. When you jump across many modules, it's harder to notice similarities
[23:32:26] <toreiussd> so should i make it rightnestedness similar to the gains for foldr vs foldl
[23:32:33] <geekosaur> the main reason for micro and mini versions is that full lens provides lenses for half the ecosystem, meaning it has half the ecosystem as dependencies
[23:32:40] <ski> toreiussd : yes, left-nestedness of `++' (like `(((as ++ bs) ++ cs) ++ ds) ++ es', which results from the "left-recursion" `f l x r = l ++ ..', where `l' here represents a recursive call to `foldTree') is going to be less efficient than one can reasonably expect
[23:32:56] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:33:26] <toreiussd> how would I change the calls type
[23:33:30] *** Joins: ralu3 (~ralu@static.211.245.203.116.clients.your-server.de)
[23:33:33] <toreiussd> from left recursive
[23:33:48] *** Quits: hexagoxel (~hexagoxel@hexagoxel.de) (Ping timeout: 260 seconds)
[23:33:57] <ski> you could introduce an extra argument, an accumulator
[23:34:00] *** Quits: isovector1 (~isovector@172.103.216.166) (Quit: Leaving)
[23:34:03] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[23:34:03] *** ralu3 is now known as ralu
[23:34:27] <toreiussd> what would it accumulate though
[23:34:32] <ski> it might be easier to see how this works, if you write `listTree' using direct recursion, rather than using `foldTree'
[23:34:57] <ski> it would accumulate the list of all the elements of the tree, traversed in-order
[23:35:58] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 268 seconds)
[23:36:33] *** Joins: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2)
[23:36:36] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:37:35] <toreiussd> hey stefan do you know where I can learn more about this, there seems to be multiple holes as evidenced here and Im new to this coming from imperative
[23:37:49] *** Joins: juhp (~juhp@128.106.188.220)
[23:39:46] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:e9ee:3bd5:4988:8148)
[23:40:22] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:41:20] <aegon> geekosaur: interesting, should I be using microlens-platform then as opposed to lens or is it the same outside of dependencies and lenses for other types
[23:41:26] <aegon> it looks like minilens is no longer kept up
[23:41:39] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:41:59] <geekosaur> it's basically the same, just lets you pick and choose what extra dependencies you want to pull in / what you want to use lenses for
[23:42:07] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:42:34] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[23:42:58] * ski glances over shoulder at stefan-_
[23:43:03] <geekosaur> the lenses themmselves are very simple and can even be built without a lens framework, but you probably want the basic lens "combinators" provided by microlens
[23:43:29] <geekosaur> and microlens and lens are therefore inter-compatible
[23:43:50] <geekosaur> you can start with microlens and then upgrade to lens more or less transparently
[23:44:17] <davean> Why wouldn't you just start with 'lens'?
[23:44:39] <geekosaur> dependencies on half the ecosystem
[23:44:49] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:45:06] *** Quits: bjobjo (~bjobjo@user/bjobjo) (Quit: leaving)
[23:45:11] <geekosaur> since lens aims to be complete, it has *lots* of deps on things it makes "canned" lenses for
[23:45:25] <davean> Right?
[23:45:29] <geekosaur> microlens leaves that part off, but has ancillary packages providing various of them
[23:45:35] <aegon> iterative builds locally dont bug me with lens but i have a fairly small service and it takes ~5 minutes to build in a container at this point
[23:46:02] <davean> IMO builds are cached and you'll need half of hackage anyway
[23:46:09] <aegon> i bet thats way low compared to what some of you are all dealing with daily
[23:46:12] <davean> Managing more packages seems like a much larger pain
[23:46:45] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:48:07] <davean> aegon: do you clear the cache every time or something?
[23:48:24] <aegon> docker does :P 
[23:48:32] <aegon> its just an issue when i'm packaging it up for integration testing or whatnot
[23:48:40] <aegon> i use local dev with caching while working on a component
[23:48:53] <aegon> but when it comes time for the final unit and integration i shove it into the to be released container
[23:48:59] <davean> I mean keeping cache across systems even was standard in 2000
[23:50:22] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:50:46] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[23:51:27] <davean> aegon: So why does your container start with an empty cache?
[23:51:47] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:52:15] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[23:54:46] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:55:00] <aegon> i feel like its best practice, i don't want any released service to have a dependency on container state that it doesn't specify within it's dockerfile. This means outside of some container wide stuff that is done and making sure ghc / systemtools are on the thing. I don't know how I would cache anything else without violating that
[23:55:28] <aegon> if you keep intermediate stuff in the container your container gets to be multiple gigerbytes for a 300k executable
[23:55:44] <aegon> and removing a layer of the image before pushing it also seems evil to me
[23:56:24] <davean> I mean I'd think you'd build the executable into a final image - having the build tools for it on the image seems senseless unless it'll use those tools while running
[23:56:52] <aegon> yeah, buti want to make sure the image has the right version of any libs linked against and that the unit / integration tests run using those libs
[23:56:52] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[23:57:18] <davean> Right? You can still run the tests on the final image as an overlay
[23:57:30] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[23:57:32] <davean> but your lib versions can't really different if build on the same base 
[23:57:41] <aegon> if your not building on the image how do you do continous integration without relying on development machine configuration states
[23:58:19] <aegon> maybe i'm being overly guarded against state but the more self contained your code -> bits running on the box is the less of a headache digging into any odd behavior is
[23:58:37] <davean> make the base image, make an overlay with the build tools, build it, put the produced files ontop of the origional image, put the tests on top, run them, push the one below the tests - or just tell nixos to build you an image with the executable
[23:59:04] <davean> s/nixos/nix
[23:59:47] <davean> none of that in any way talks about the developement machine state
