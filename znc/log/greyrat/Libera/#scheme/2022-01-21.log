[00:00:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:09:14] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[00:13:46] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[00:14:28] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[00:33:09] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:4b4a:7d81:2fe3:79ac) (Quit: Client closed)
[00:35:09] *** Joins: johnjaye (~pi@173.209.65.233)
[00:45:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:51:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:51:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:10:17] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[01:11:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Quit: No Ping reply in 180 seconds.)
[01:12:06] *** Joins: greaser|q (greaser@antihype.space)
[01:15:08] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[01:16:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[01:17:05] *** Joins: skapata (~Skapata@user/skapata)
[01:27:11] *** Quits: Darkcoal (~user@130.164.146.159) (Quit: Darkcoal)
[01:31:08] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Remote host closed the connection)
[01:53:56] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:35da:7bb3:e3f8:3a44) (Ping timeout: 268 seconds)
[01:56:29] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[02:01:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:02:10] *** Joins: seninha (~seninha@user/seninha)
[02:07:29] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[02:13:31] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[02:14:02] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[02:27:09] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
[02:35:25] *** Joins: klovett (~klovett@166.205.90.179)
[02:55:29] *** Joins: notzmv (~zmv@user/notzmv)
[02:56:50] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[02:58:56] *** Joins: skapata (~Skapata@user/skapata)
[03:10:42] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[03:10:42] *** Joins: greaser|q (greaser@user/greasemonkey)
[03:10:53] *** greaser|q is now known as GreaseMonkey
[03:11:14] *** Joins: livoreno (~livoreno@user/notzmv)
[03:18:37] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[03:21:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:25:18] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[03:27:21] *** Joins: johnjaye (~pi@173.209.65.233)
[03:33:26] *** Joins: klovett_ (~klovett@166.205.90.179)
[03:34:16] *** Joins: klovett__ (~klovett@166.205.90.179)
[03:34:27] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c030:2b1f:300e:31b6) (Ping timeout: 268 seconds)
[03:34:49] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7343:4b4d:81a6:38d9)
[03:35:17] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[03:37:46] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[03:38:34] *** Joins: klovett (~klovett@166.205.90.179)
[03:41:10] *** Quits: klovett__ (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[03:41:12] *** Joins: klovett_ (~klovett@166.205.90.179)
[03:42:54] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 250 seconds)
[03:43:38] *** Joins: klovett (~klovett@166.205.90.179)
[03:44:19] *** Joins: klovett__ (~klovett@166.205.90.179)
[03:45:30] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 250 seconds)
[03:47:58] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[03:48:52] *** Joins: klovett (~klovett@166.205.90.179)
[03:49:49] *** Joins: klovett_ (~klovett@166.205.90.179)
[03:50:48] *** Quits: klovett__ (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[03:53:18] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 250 seconds)
[03:54:47] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:00:35] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[04:03:06] *** Joins: klovett (~klovett@166.205.90.179)
[04:05:32] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[04:08:43] *** Joins: klovett_ (~klovett@166.205.90.179)
[04:10:39] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[04:12:20] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[04:29:08] *** Joins: klovett (~klovett@166.205.90.179)
[04:29:51] *** Joins: klovett__ (~klovett@166.205.90.179)
[04:31:17] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[04:33:52] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 256 seconds)
[04:45:59] <lockywolf> Has anyone seen a cond implementation as a C macro?
[04:46:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:50:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:51:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:51:32] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:53:37] *** Joins: skapata (~Skapata@user/skapata)
[04:54:32] *** Joins: klovett (~klovett@166.205.90.179)
[04:56:08] *** Quits: klovett__ (~klovett@166.205.90.179) (Ping timeout: 250 seconds)
[04:56:15] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Quit: leaving)
[05:08:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:08:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:17:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[05:28:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:34:56] *** Joins: skapata (~Skapata@user/skapata)
[05:40:26] <gwatt> lockywolf: like, for the C language?
[05:41:02] <lockywolf> yes, using C macros and the { x ? y : z } construction
[05:44:24] <gwatt> You don't really need to, since a ? b : c ? d : e ? f : g ... will do the right thing
[05:44:32] <gwatt> even if it does make your eyes bleed
[05:45:45] <gwatt> I also think it's basically impossible to write a recursive C macro in anything close to portable code
[05:45:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[05:46:27] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:fc7a:a493:8e66:bb8a) (Read error: Connection reset by peer)
[05:46:51] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:c855:f596:5d07:923e)
[05:49:34] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[05:59:51] <lockywolf> well, there is something like __VA_ARGS__...
[06:00:31] <lockywolf> although I am not sure there is list destructuring in the macro facility
[06:01:48] <gwatt> No, I mean that the pre-processor will not expand the same macro twice in a single expansion.
[06:03:04] <gwatt> You can do something like "#define printf printf" and it won't infinite loop the pre-processor
[06:11:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:12:17] <lockywolf> heh, makes sense
[06:17:39] *** Joins: klovett_ (~klovett@166.205.90.179)
[06:17:56] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[06:18:20] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[06:20:17] *** Quits: klovett (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[06:23:15] *** Joins: skapata (~Skapata@191.177.185.183)
[06:23:15] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[06:23:15] *** Joins: skapata (~Skapata@user/skapata)
[06:30:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[06:31:44] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:47:56] *** Joins: skapata (~Skapata@191.177.185.183)
[06:47:56] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[06:47:56] *** Joins: skapata (~Skapata@user/skapata)
[06:55:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[06:55:18] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 250 seconds)
[07:02:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:12:55] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:06] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:22:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[07:23:05] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:43:45] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
[07:44:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:56:37] *** Joins: frost (~frost@user/frost)
[08:16:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[08:29:23] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[08:31:14] *** Joins: frost (~frost@user/frost)
[08:38:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:47:43] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:56:19] *** Joins: frost15 (~frost@user/frost)
[08:56:30] *** Quits: frost15 (~frost@user/frost) (Client Quit)
[08:56:45] *** Joins: frost21 (~frost@user/frost)
[08:57:15] *** Quits: frost21 (~frost@user/frost) (Client Quit)
[08:58:00] *** Joins: frost31 (~frost@user/frost)
[08:59:04] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:00:21] *** frost31 is now known as frost
[09:11:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[09:13:17] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[09:19:36] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:21:54] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:25:04] *** Joins: frost (~frost@user/frost)
[09:27:55] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:30:30] *** Parts: elly (~elly@142.93.153.223) ()
[09:41:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:43:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:49:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:56:35] *** Quits: sdu (~sidu@185.44.146.61) (Remote host closed the connection)
[09:57:59] *** Joins: sdu (~sidu@185.44.146.61)
[10:03:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:11:37] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:48:11] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[10:49:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[10:56:06] *** Joins: notzmv (~zmv@user/notzmv)
[10:57:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:59:06] *** Joins: Darkcoal (~user@130.164.146.159)
[11:00:06] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[11:00:14] *** Joins: frost (~frost@user/frost)
[11:04:11] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:07:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:15:44] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[11:19:01] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[11:19:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:25:56] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Quit: WeeChat 3.4)
[11:40:00] *** Quits: Darkcoal (~user@130.164.146.159) (Ping timeout: 256 seconds)
[11:41:57] *** Joins: Darkcoal (~user@2001:16a2:77c9:6300:26a6:c9f4:dfde:a93c)
[11:46:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:50:37] *** Quits: Darkcoal (~user@2001:16a2:77c9:6300:26a6:c9f4:dfde:a93c) (Ping timeout: 240 seconds)
[11:52:41] *** Joins: Darkcoal (~user@139.64.70.208)
[12:12:04] *** Quits: Darkcoal (~user@139.64.70.208) (Ping timeout: 250 seconds)
[12:13:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:15:34] *** Joins: Darkcoal (~user@130.164.163.44)
[12:42:21] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:46:30] *** Quits: DeeEff (~DeeEff@user/deeeff) (Ping timeout: 265 seconds)
[12:46:41] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[12:48:29] *** Joins: DeeEff (~DeeEff@user/deeeff)
[12:48:52] *** Joins: dstein64 (~dstein64@dannyadam.com)
[12:57:50] *** Joins: civodul (~user@guix/contributor/civodul)
[12:58:53] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:00:57] *** Quits: DeeEff (~DeeEff@user/deeeff) (Ping timeout: 240 seconds)
[13:01:43] *** Joins: DeeEff (~DeeEff@user/deeeff)
[13:02:10] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[13:04:18] *** Joins: dstein64 (~dstein64@dannyadam.com)
[13:14:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:18:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:33:37] *** Quits: DeeEff (~DeeEff@user/deeeff) (Ping timeout: 240 seconds)
[13:33:58] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 250 seconds)
[13:38:41] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:40:12] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[13:52:25] *** Joins: DeeEff (~DeeEff@user/deeeff)
[13:55:49] *** Joins: dstein64 (~dstein64@dannyadam.com)
[14:04:11] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[14:04:59] <sonny> Why does this function <https://bpa.st/U27Q> always result in 'null on (open-input-string "#$")?
[14:05:22] <sonny> The result of  (equal? (peek-byte ip) (char->integer #\#)) is #t
[14:07:35] <ns12> sonny: Probably because (char->integer #\#) is not evaluated in the "case".
[14:08:03] <sonny> oh
[14:08:28] <ns12> sonny: I might be mistaken, so please check.
[14:10:34] <sonny> "case-clause = [(datum ...) then-body ...+] ... The selected clause is the first one with a datum whose quoted form is equal? to the result of val-expr." -- Does the qoute mean it is not evaluated?
[14:13:43] <Oxyd> That's precisely what quote does, yes.
[14:13:59] <ns12> sonny: If you replace the "(char->integer #\#)" with "(error ...)", no error will be raised.
[14:15:11] <sonny> Yeah, (equal? (quote (char->integer #\#)) (peek-byte ip)) is #f
[14:16:09] <sonny> I am using the transformation function because I did not want to hardcode the ascii values ... 
[14:16:33] <Oxyd> Use cond instead of case.
[14:17:06] <Oxyd> (cond ((eqv? b (char->integer #\#)) 'not) (else 'null))
[14:18:12] *** Joins: silasfox (~fox@p200300cec7197f00c30ddb1c84ec6b40.dip0.t-ipconnect.de)
[14:18:27] <sonny> Yeah, I don't find that appealling because it looks cluttered, guess I'm just gonna hardcode it
[14:18:46] <Oxyd> Make your own macro that does whatever you need and looks however you want.
[14:19:27] <sonny> touche
[14:19:58] <Oxyd> (byte-case b ((#\#) 'not) (else 'null)) would look pretty alright I think.
[14:20:14] <sonny> yep
[14:46:43] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:51:52] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Remote host closed the connection)
[14:59:36] *** Joins: sheb (~sheb@31.223.228.71)
[15:12:26] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (Read error: Connection reset by peer)
[15:19:17] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Ping timeout: 240 seconds)
[15:34:25] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[16:07:38] *** Joins: TCZ (~tcz@91.150.178.124)
[16:09:53] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:21:45] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:23:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:26:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[16:35:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:44:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:48:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:49:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:49:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[16:53:53] *** Joins: seninha (~seninha@user/seninha)
[17:02:28] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:17:09] *** Joins: frost (~frost@user/frost)
[17:43:00] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:c67d:fb9e:353d:4cf3)
[17:45:23] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:00:56] *** Joins: frost (~frost@user/frost)
[18:04:39] *** Joins: vats (~vats@103.158.91.47)
[18:04:40] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[18:06:24] <Franciman> hi everyone, i still don't understand a thing about modules
[18:06:33] <Franciman> if i am defining a new library, can i do:
[18:07:37] <Franciman> (define-library (my-lib) (begin (define x 13))) ?
[18:07:48] <Franciman> or must i first do (import (scheme base)) ?
[18:07:52] <Franciman> in order to access define?
[18:08:31] <Franciman> it is not clear to me how the environment is populated in a library and how the environment is populated in a program
[18:13:25] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:17:44] <Oxyd> You have to (import (scheme base)) if you want to use define, yes.
[18:19:32] <Franciman> while define-library
[18:19:38] <Franciman> is already in the environment :)
[18:21:59] <sham1> define-library isn't in the environment as such
[18:22:47] <ns12> sham1: Could you explain further?
[18:23:45] <sham1> Well, as said, how would define-library work without being imported from anywhere
[18:23:53] <Oxyd> define-library isn't looked up in any environment.
[18:23:59] <sham1> Exactly
[18:24:01] <ns12> So define-library is very special?
[18:24:08] <sham1> Well it has to be
[18:24:37] <Franciman> define is special too, though
[18:24:43] <ns12> So does this mean that the user must never define something named "define-library"?
[18:24:53] <Franciman> ah this is intriguing
[18:24:55] <Franciman> i think they can
[18:25:03] *** Joins: skapata (~Skapata@user/skapata)
[18:25:08] <Franciman> but the builtin define-library takes precedence in some context
[18:25:15] <Franciman> that's why it's not in an environment
[18:25:20] <Oxyd> define is not special, no. It is exported from (scheme base) and bound to a syntax.
[18:25:48] <Franciman> Oxyd: i don't understand what's the difference
[18:26:00] <Franciman> ah now i see
[18:26:04] <sham1> Indeed. The syntax may be built-in to the compiler in a special way, but you can have it so that you can't use it without importing (scheme base)
[18:27:47] <Franciman> and can i redefine define?
[18:27:57] <Oxyd> Sure.
[18:28:10] <Franciman> and i can _define_ define-syntax
[18:28:11] <Oxyd> Well, not if you already imported it. You can't redefine any imported symbol.
[18:28:14] <Franciman> ehm
[18:28:16] <Franciman> define-library
[18:28:46] <Franciman> but, in some places of the program, it will mean what it means
[18:29:13] <ns12> Franciman: "import" is also not part of any standard library.
[18:29:24] <Franciman> yes
[18:29:28] <Franciman> and it's not bound in the environment
[18:29:46] <Oxyd> Then there is also begin. begin is both part of this define-library syntax, and another begin is defined in (scheme base).
[18:30:07] <Franciman> yep that one is particular
[18:30:18] <Franciman> so we can say that we have some builtins that are more builtins than others :)
[18:30:20] <Oxyd> cond-expand as well.
[18:30:39] *** Quits: DeeEff (~DeeEff@user/deeeff) (Ping timeout: 256 seconds)
[18:31:41] <Oxyd> On a somewhat related topic, the reader will read “'foo” as the list (quote foo). But you can bind quote to whatever you want. So you can do for example (import (rename (scheme base) (quote display)) '"Hello world"
[18:32:13] *** Quits: silasfox (~fox@p200300cec7197f00c30ddb1c84ec6b40.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[18:32:20] *** Joins: DeeEff (~DeeEff@user/deeeff)
[18:32:39] <ns12> Oxyd: Is it actually valid to redefine "define"? What about "lambda"? Is it valid to redefine "lambda" too?
[18:33:06] <Franciman> yes
[18:33:11] <Oxyd> Well you can't redefine any symbol you already imported. But if you don't import them (or rename them on import), you can define define and lambda to whatever you want.
[18:34:02] <ns12> Oxyd: "Well you can't redefine any symbol ..." - Any symbol? Not just the ones specified in R7RS?
[18:34:06] <ski> you can still locally shadow them
[18:34:43] <ski> rudybot: eval (let ((define 3) (lambda 4)) (* define lambda))
[18:34:53] <rudybot> ski: error: with-limit: out of time
[18:34:58] <ski> rudybot: eval (let ((define 3) (lambda 4)) (* define lambda))
[18:35:11] <rudybot> ski: error: with-limit: out of time
[18:35:12] <Oxyd> ns12: Yes, any symbol.
[18:35:15] <ski> hmpf !
[18:35:26] * ski slaps rudybot upside the haid
[18:35:31] <ns12> What kind of library can we define if we don't import anything?
[18:35:53] <Oxyd> R7RS 5.2: “In a program or library declaration, it is an error to import the same identifier more than once with different bindings, or to redefine or mutate an imported binding with a definition or with set!”
[18:36:14] <Oxyd> The empty kind.
[18:37:58] <ns12> Oxyd: (define-library (my useless lib)) ? What is the use of that?
[18:38:17] <ns12> Why isn't (scheme base) imported by default?
[18:38:19] <Oxyd> You're the one making such a library, why are you asking me?
[18:38:33] <Franciman> :D
[18:38:36] <Oxyd> What if you don't want to import (scheme base)?
[18:38:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:39:14] <ns12> Oxyd: On what occasion would a programmer want to avoid (scheme base)?
[18:39:34] <Franciman> yes it's very unlikely
[18:39:46] <ns12> Perhaps it has a use when implementing custom languages?
[18:40:12] <Oxyd> When the implementation author is implementing (scheme base), for example.
[18:40:27] <Franciman> _mindblown_
[18:41:13] <ns12> Most intriguing!
[18:41:26] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[18:43:35] <ski> yea, custom languages (perhaps very un-Scheme-like) would be the other reason
[18:44:36] <ns12> (import (mylang base))
[18:45:00] <Franciman> yes
[18:45:02] <Franciman> and you have
[18:45:05] <Franciman> (define define define)
[18:45:56] <ns12> Franciman: Is that actually valid?
[18:46:11] <ns12> It gives an error in Guile and MIT Scheme.
[18:46:21] <Franciman> no it's not
[18:46:32] <Franciman> you can't redefine imported identifiers
[18:46:57] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:47:23] <ns12> "but you can shadow them" - Does that mean using "let" instead of "define"?
[18:47:32] <Franciman> yes
[18:47:36] <Franciman> you can have local redefinitions
[18:47:46] <Franciman> can you do 
[18:47:46] <ns12> What about using "set!"?
[18:47:56] <Franciman> (let ((define define)) (...)) ?
[18:48:49] <ns12> Franciman: No.
[18:48:55] <ns12> (let ((define define)) (define x 1) x) gives an error.
[18:48:55] <Franciman> why not?
[18:48:58] <Franciman> ah
[18:49:40] <ns12> So what exactly does "shadowing" mean?
[18:50:07] <Franciman> that you can do
[18:50:14] <Franciman> (let ((define 1)) (+ 1 define))
[18:50:15] <ski> `let' binds an ordinary variable, not a syntax
[18:50:54] <ski> if you want to locally bind `define' to a syntax, you'd use `let-syntax'
[18:51:06] <Franciman> but then you can't
[18:51:16] <Franciman> because of let-syntax own restrictions
[18:51:18] <Franciman> i mean doing
[18:51:25] <Franciman> (let-syntax ((define define)) (..)))
[18:52:16] <Franciman> but so an environment contains both variable definitions and syntax definitions
[18:52:23] <Franciman> this is something i didn't understand, nice!
[18:52:46] <Franciman> for example in my own (scheme base) i could do
[18:53:02] <Franciman> (define-syntax define ^^builtin-define^^)
[18:53:10] <Franciman> where ^^builtin-define^^ is the builtin implementation
[18:54:14] <ns12> This seems to work:
[18:54:14] <ns12> (define define (lambda _ 'hello))
[18:54:14] <ns12> (define define define)
[18:54:31] <Franciman> lool
[18:55:29] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[18:55:35] <ski> rudybot: eval (let-syntax ((define (syntax-rules () ((_ ?blah ...) (define ?blah ...))))) (define foo 52) foo)
[18:55:35] <rudybot> ski: ; Value: 52
[18:57:09] <ns12> What is the Scheme implementation behind rudybot?
[18:57:18] <ski> Racket, iirc
[18:57:43] <ns12> #lang racket?
[18:57:45] <wasamasa> yeah
[18:57:49] <wasamasa> needs a new maintainer, too
[18:57:59] <ski> rudybot: who's your daddy ?
[18:58:06] <wasamasa> offby1
[18:58:09] <rudybot> ski: who's your daddy?
[18:58:15] <ski> heh
[18:59:09] <Franciman> LOL
[18:59:41] <ski> rudybot: do you remember sorbet ?
[18:59:51] <rudybot> ski: Is this... is this amusing? I'm afraid I still don't see the attraction here. Surely sorbet was more profound than this.
[19:00:43] <Franciman> one clarification: can I say that `import` and `define-library` have the same status that
[19:00:54] <Franciman> `define`, `lambda` had in r5rs?
[19:02:44] <Oxyd> rudybot: eval (let-syntax ((define (syntax-rules () ((_) 42)))) (let ((define (define))) define))
[19:02:49] <rudybot> Oxyd: your sandbox is ready
[19:02:49] <rudybot> Oxyd: ; Value: 42
[19:09:03] *** Joins: rgherdt (~rgherdt@ip5f5af19f.dynamic.kabel-deutschland.de)
[19:12:25] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:c67d:fb9e:353d:4cf3) (Quit: Client closed)
[19:27:13] <wasamasa> Franciman: not really, r5rs doesn't have import and define-library
[19:32:17] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:37:11] <Zipheir> ski: wb, it's been a while.
[19:38:21] <Zipheir> Franciman: It's an interesting comparison.  The 'library language' isn't Scheme, so it's possible, I suppose.
[19:38:53] <Zipheir> I don't believe you can nest define-library, but otherwise it does work as a library-level define.
[19:39:14] <ski> yea. ty
[19:39:25] <Franciman> oh «the library language is not scheme» is very interesting
[19:39:27] <Zipheir> import is very much not lambda, though.
[19:40:17] <Zipheir> I think.  You can't "apply" an import, nor can you abstract-over a "library expression".
[19:40:41] <Zipheir> SML- (or CHICKEN-) style "functors" are closer to that idea.
[19:41:05] * ski . o O ( Scheme48 )
[19:41:36] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:c67d:fb9e:353d:4cf3)
[19:42:55] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[19:44:44] <Zipheir> Franciman: https://wiki.call-cc.org/man/5/Modules#functors
[19:44:52] <Franciman> ty
[19:44:53] <Zipheir> Sadly, there are no natural transformations.
[19:45:05] <ski> hah
[19:45:33] * ski . o O ( "On Functors" (in C++,Standard ML,Haskell,Prolog) by Peteris Krumins in 2010-05-17 at <http://www.catonmat.net/blog/on-functors/> )
[19:46:25] <Zipheir> ski: ty.  I haven't read a catonmat.net article in years.  I think I learned AWK from that site.
[19:49:18] * ski . o O ( <https://www.s48.org/1.9.2/manual/manual-Z-H-5.html> )
[19:51:12] <Zipheir> 'Functors in C++ are short for "function objects" ... objects that act like functions but can also store state.' 8-|
[19:52:55] <Zipheir> Scheme48's module system looks nice and simple.
[19:54:49] *** Quits: lagash_ (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[19:55:13] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:30c7:6c33:e839:6e4c)
[19:55:13] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:30c7:6c33:e839:6e4c) (Changing host)
[19:55:13] *** Joins: skapate (~Skapata@user/skapata)
[19:55:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[19:57:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[20:02:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:03:15] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:27:23] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[20:39:30] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:40:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:57:21] <tokie> ooof, implementing syntax-rules is a rabbithole
[21:01:47] <LeoNerd> Mmmmmhm
[21:02:48] <LeoNerd> My very-almost-complete implementationm of r5rs atop perl5 is in total 1471 lines of .pm file; of wwhich 421 lines just to implement macros
[21:02:59] <LeoNerd> It's actually the largest single file
[21:04:11] <Zipheir> tokie: Kudos for trying it.  There's a distinct lack of practical info out there on how to implement hygienic macros, so maybe you'd be willing to write up your process.
[21:09:38] <tokie> Zipheir: i might defer it for now, actually. mostly because there's not practical info and i don't really -need- it at the moment
[21:10:06] <tokie> i think i know how to deal with hygiene and i don't think i like the ripple effects on how symbols work in the rest of my impl
[21:10:14] <tokie> but pattern matching is hard to find good info on
[21:10:43] <tokie> LeoNerd: yeah, lol
[21:11:44] <tokie> i was hoping to implement it so i could get let/let*/letrec/or/and/cond for free, but just implementing those in the compiler would be way faster
[21:12:05] <tokie> though, the best way to implement those in my compiler would be as transforms and that would cause the same hygiene issues
[21:13:11] <LeoNerd> The usual philosophy of Scheme interpreters tends to be to implement the smallest possible bit "natively" as fast as possible, and let everything else be built up from macros/etc.. in the prelude
[21:13:34] <LeoNerd> That way, whatever trickery your own implementation of e.g. the let* macro uses, the same optimisations can be applied just as well to user macros
[21:13:43] <LeoNerd> It's the principle of "no tricks up my sleeve"
[21:15:10] <tokie> yeah, that's how my scheme is built
[21:15:20] <tokie> pretty much all the guts are in lambda
[21:21:13] *** Quits: rgherdt (~rgherdt@ip5f5af19f.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:26:36] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[21:30:52] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Remote host closed the connection)
[21:33:47] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[21:34:22] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[22:39:08] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[22:39:58] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:47:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:09:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:13:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:16:49] *** Quits: vats (~vats@103.158.91.47) (Ping timeout: 256 seconds)
[23:31:48] *** Quits: yosafbridge` (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[23:33:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:34:07] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Quit: WeeChat 3.3)
[23:36:05] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[23:36:44] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:39:42] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[23:57:06] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
