[00:08:09] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[00:08:55] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[00:16:28] *** Quits: bitigchi2 (~bitigchi@user/bitigchi) (Ping timeout: 256 seconds)
[00:24:04] *** Quits: taman (~znc1@2a00:1098:82:30::94) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[00:31:38] *** Joins: taman (~znc1@2a00:1098:82:30::94)
[00:32:09] *** Quits: fireglow (~fireglow@fireglow.su) (Quit: Gnothi seauton; Veritas vos liberabit)
[00:38:09] *** Joins: fireglow (~fireglow@fireglow.su)
[00:41:39] *** Joins: bitigchi2 (~bitigchi@user/bitigchi)
[00:57:48] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Ping timeout: 240 seconds)
[01:27:06] *** Joins: jk_ (~jk_@dynamic-089-014-026-204.89.14.pool.telefonica.de)
[01:35:19] *** Quits: gsz (~gsz@static-87-101-68-196.leon.com.pl) (Quit: leaving)
[01:36:06] <jk_> hello! 0/   ... I need some support, with Gmail killing their "support for less-secure-apps" I want to set up OAuth2 with mutt, but I don't know how. surfing the wiki didn't help :\
[01:38:53] <Betawolf> https://luxing.im/mutt-integration-with-gmail-using-oauth/
[01:42:55] <jk_> Betawolf: thanx! I read that but I got confused by the step with the oauth2.py and generating the OAuth-token.. is this the only way? seems too... shaky :)
[01:45:31] <jk_> also, lines like:
[01:45:35] <jk_> set imap_oauth_refresh_command="~/.mutt/oauth2.py --quiet --user=your@gmail.com --client_id=2345...0123.apps.googleusercontent.com --client_secret=s_ec_ret --refresh_token=ReF/reShToken"
[01:46:05] <Betawolf> you have to follow the general flow used there to use oauth2, that's just how the protocol works. There might be scripts that make it a bit easier, but not much.
[01:46:11] <jk_> feel strange... so I want to ask if this is how people here do it
[01:47:09] <Betawolf> I don't use gmail, but I have basically that flow for another service that requires oauth2, works fine.
[01:47:42] <jk_> hhmm.. ok. well, thanx! I'll give it a shot!
[01:50:00] <jk_> I remember a similar process for setting up khal and vdirsyncer with google calendar and I was expecting something similar, but I guess that was naive :)
[01:59:16] *** Joins: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk)
[02:03:46] *** Quits: cdown (~cdown@82-69-42-66.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[02:13:16] *** Quits: target_i (~target_i@217.175.11.173) (Quit: leaving)
[02:31:24] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 240 seconds)
[02:32:33] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[02:36:02] *** Quits: bitigchi2 (~bitigchi@user/bitigchi) (Ping timeout: 252 seconds)
[02:48:39] <topcat001> jk_: I use that command and it works fine with GMail.
[02:49:10] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[02:49:16] <topcat001> What are you using for client_id? Did you create your own app?
[02:50:26] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 272 seconds)
[02:50:34] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[02:51:00] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[02:56:36] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[03:15:18] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 250 seconds)
[03:16:24] *** Quits: earthnative (~nemo@119-18-37-212.771225.bne.static.aussiebb.net) (Ping timeout: 272 seconds)
[03:16:31] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[03:17:28] *** Joins: earthnative (~nemo@119-18-37-212.771225.bne.static.aussiebb.net)
[03:18:18] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 272 seconds)
[03:36:01] <jk_> topcat001: hi! thanx for the messages! I created an oauth-client in the google plattform, and all seems to have gone fine! :)
[03:36:43] <jk_> oauth client: id + secret. then access token and refresh token
[03:38:35] <topcat001> jk_: The problem with your own oauth client is that it will expire every week and you'll have to authorize it again.
[03:38:51] <topcat001> When this happens mutt will just go blank.
[03:39:25] <topcat001> In order to avoid this, I suggest using Thunderbird's id and secret.
[03:40:45] <topcat001> You can find those here: https://hg.mozilla.org/comm-central/file/tip/mailnews/base/src/OAuth2Providers.jsm
[03:43:21] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:46:13] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 240 seconds)
[03:48:12] *** Joins: joo-_ (~joo-_@87-49-44-190-mobile.dk.customer.tdc.net)
[03:48:12] *** Quits: joo-_ (~joo-_@87-49-44-190-mobile.dk.customer.tdc.net) (Changing host)
[03:48:12] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[03:48:31] *** Quits: tejr (~tejr@user/tejr) (Write error: Connection reset by peer)
[03:48:31] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Write error: Connection reset by peer)
[03:48:31] *** Quits: mornfall (~mornfall@user/mornfall) (Read error: Connection reset by peer)
[03:48:31] *** Quits: madage (~madage@user/madage) (Write error: Connection reset by peer)
[03:48:31] *** Quits: pyllyukko (~pyllyukko@gateway/tor-sasl/pyllyukko) (Write error: Connection reset by peer)
[03:49:25] *** Joins: madage (~madage@user/madage)
[03:50:29] *** Joins: mornfall (~mornfall@user/mornfall)
[03:52:53] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[03:53:17] *** Joins: tejr (~tejr@user/tejr)
[04:02:17] <Celelibi> topcat001, what's the difference?
[04:02:31] <jk_> topcat: what? really? damn... I understood that the generated refresh token was to prevent that
[04:02:59] <Celelibi> topcat001, And the comments suggest that this client id and secrets won't be there forever.
[04:03:03] <jk_> or to circumvent whatever the word in english is
[04:04:33] <Celelibi> So we might need a more general solution.
[04:06:35] <Celelibi> I have 6 gmail accounts it would be quite a PITA if I have to re-auth on google using a browser every week.
[04:06:45] <ajak> why not just forward everything to one?
[04:07:43] <Celelibi> Mostly, to reply with the correct address.
[04:10:01] <jk_> eehhmm... well, I just did the process to get oauth2 running with mutt and in the process I got an access token that was valid for 3599 seconds
[04:10:32] <jk_> which I believe will be refreshed when necessary thanx to the refresh token
[04:10:57] <jk_> just as someone comments in this article: https://luxing.im/mutt-integration-with-gmail-using-oauth/
[04:11:46] <jk_> curiously the python-script there (oauth2.py) is made by google
[04:13:32] <Celelibi> Looks like there's one not made by google mentioned in the doc: http://www.mutt.org/doc/manual/#oauth
[04:14:14] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 250 seconds)
[04:14:29] <ajak> you can set From: to whatever you want
[04:15:30] <jk_> Celelibi: good find! that one also uses python3 and not python2
[04:16:05] *** Joins: joo-_ (~joo-_@80-62-117-227-mobile.dk.customer.tdc.net)
[04:16:05] *** Quits: joo-_ (~joo-_@80-62-117-227-mobile.dk.customer.tdc.net) (Changing host)
[04:16:05] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[04:16:11] <Celelibi> ajak, If I did this, the SMTP server adds some headers leaking the information of what actual account I used.
[04:16:41] <ajak> .. is it a secret?
[04:18:09] <Celelibi> I wouldn't want professional emails to show "From: celelibi@gmail.com on behalf of firstname.lastname@gmail.com" or something like that.
[04:18:18] <Celelibi> Nor would I want the opposite to happen.
[04:18:20] <topcat001> The id and secret are not secret; only the tokens are.
[04:18:51] <topcat001> Anyway, keep your own client id for a bit and see if it expires in a week. Good to check.
[04:19:36] <jk_> now that I went to the process, I'll have to :) 
[04:19:37] <topcat001> Thunderbird will never expire. There might be a longer term expiry of the refresh token but I haven't hit that yet.
[04:20:33] <topcat001> I got tired of regenerating the refresh token while sleepy in the morning when I'm about to check mail ;)
[04:20:47] <jk_> if I leave this untested, my other me will wake up one random night and put it to test :D
[04:21:10] <jk_> hehe and when did you last did this?
[04:21:24] <jk_> 2021? just for the record...
[04:23:19] *** Joins: pyllyukko (~pyllyukko@gateway/tor-sasl/pyllyukko)
[04:23:26] <topcat001> Can't remember exactly, but I probably started pretending to be Thunderbird in November.
[04:23:45] <topcat001> Since then GMail has worked every time.
[04:24:41] <jk_> topcat001: ok, that's recent, not 2016 or so ;) ... ehm... but wait, the mozilla-page gives a client-ID and a "secret". what about the refresh token? ooohh! this I create with the python-script?
[04:25:20] <jk_> ... put in in my muttrc or correspondig mutt-config-file?
[04:25:23] <topcat001> yes, just substitute those in place of your own.
[04:25:40] <topcat001> The client id/secret are not secret, but the tokens are.
[04:27:06] <topcat001> Apart from the client id/secret everything else is identical.
[04:27:14] <topcat001> Same process.
[04:27:15] <jk_> yes, yes. it is just a bit unexpected that "my_account" refresh token works with the id+secret of thunderbird... but I guess that es explained in the OAuth reference :)
[04:27:45] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 256 seconds)
[04:28:08] <topcat001> The client stuff is not specifically "your account". It's just the id of the app.
[04:28:26] <topcat001> The token is specific to your account and machine, roughly.
[04:28:27] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[04:29:00] <jk_> interesting! mainly 'cuz I'll be using several machines
[04:29:21] <topcat001> The app can thus be your custom one, TB, Apple Mail, etc.
[04:29:24] <jk_> like 6 machines hehe
[04:30:05] <topcat001> I think you can reuse the id+secret+token combo; do test.
[04:30:46] <topcat001> I only have one server running mutt inside tmux.
[04:30:50] <jk_> jup, I will. too much curiosity here
[04:31:26] <jk_> cool, do you ssh over the internet to it?
[04:34:38] <topcat001> yes through wireguard
[04:35:25] <jk_> nice!
[04:35:40] <jk_> I have not put myself to set that up
[04:36:44] <jk_> i am giving myself a hard time with choosing a hoster and all these DNS-stuff. I wish I had a fixed IP :)
[04:59:46] *** Joins: bitigchi2 (~bitigchi@user/bitigchi)
[05:04:54] *** Quits: bitigchi2 (~bitigchi@user/bitigchi) (Ping timeout: 256 seconds)
[05:37:38] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[05:59:34] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Quit: Leaving)
[06:32:38] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[06:35:49] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 256 seconds)
[06:36:46] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[06:46:19] *** Quits: randm (~randm@2001:19f0:5:1de9:5400:3ff:fe98:1bdd) (Quit: Leaving.)
[06:46:56] *** Joins: randm (~randm@mx.rayprimus.com)
[07:36:04] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[07:37:07] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 268 seconds)
[07:37:47] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[07:51:42] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[07:54:42] *** Joins: jk__ (~jk_@dynamic-089-014-122-190.89.14.pool.telefonica.de)
[07:57:10] *** Quits: jk_ (~jk_@dynamic-089-014-026-204.89.14.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:13:03] <Celelibi> If only some of my IMAP accounts use OAuth, I guess I should set and unset imap_oauth_refresh_command for every single account-hook. Right?
[08:33:47] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[09:01:30] *** Joins: bitigchi2 (~bitigchi@user/bitigchi)
[09:05:57] *** Quits: bitigchi2 (~bitigchi@user/bitigchi) (Ping timeout: 240 seconds)
[09:21:48] <Celelibi> Yup, indeed. Having an imap_oauth_refresh_command set makes mutt try the OAUTHBEARER authenticator. Which fail. And a failed auth doesn't makes mutt try the next one available.
[10:02:07] *** Quits: ch (ch@percival.namespace.at) (Quit: ch)
[10:04:31] *** Joins: ch (ch@percival.namespace.at)
[10:29:32] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Quit: Leaving)
[10:39:43] *** Joins: Guest34 (~Guest34@r248.schulergroup.com)
[10:45:01] *** Joins: bitigchi2 (~bitigchi@user/bitigchi)
[11:06:23] *** Joins: Guest3473 (~Guest34@r248.schulergroup.com)
[11:18:22] *** Quits: Guest34 (~Guest34@r248.schulergroup.com) (Quit: Client closed)
[11:18:27] *** Quits: Guest3473 (~Guest34@r248.schulergroup.com) (Quit: Client closed)
[11:18:41] *** Joins: Guest34 (~Guest34@r248.schulergroup.com)
[11:30:03] *** Joins: feriman (~feriman@188.163.113.151)
[11:47:11] *** Joins: bitigchi3 (~bitigchi@user/bitigchi)
[11:47:30] *** Quits: bitigchi2 (~bitigchi@user/bitigchi) (Ping timeout: 272 seconds)
[11:47:36] *** Joins: Akiva (~Akiva@user/Akiva)
[11:58:22] *** Quits: downtrip (~downtrip@188.166.151.198) (Quit: WeeChat 3.4)
[12:11:56] *** Joins: downtrip (~downtrip@188.166.151.198)
[12:13:24] *** Quits: bitigchi3 (~bitigchi@user/bitigchi) (Ping timeout: 240 seconds)
[12:14:13] *** Joins: bitigchi3 (~bitigchi@user/bitigchi)
[12:36:50] *** Quits: topcat001 (~topcat001@user/topcat001) (Ping timeout: 260 seconds)
[12:37:16] *** Joins: topcat001 (~topcat001@user/topcat001)
[13:34:36] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[14:25:24] *** Joins: roybatty2019 (~roybatty@p579a1d3a.dip0.t-ipconnect.de)
[14:29:56] *** Joins: Ram-Z (Ram-Z@2a01:7e01::f03c:91ff:fe57:d2df)
[15:20:00] *** Quits: topcat001 (~topcat001@user/topcat001) (Ping timeout: 252 seconds)
[16:06:22] *** Quits: feriman (~feriman@188.163.113.151) (Ping timeout: 260 seconds)
[16:08:52] *** Quits: Guest34 (~Guest34@r248.schulergroup.com) (Quit: Client closed)
[16:10:32] *** Joins: topcat001 (~topcat001@user/topcat001)
[16:15:46] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:00:32] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:38:43] *** Joins: jk___ (~jk_@dynamic-089-014-122-190.89.14.pool.telefonica.de)
[17:41:32] *** Quits: jk__ (~jk_@dynamic-089-014-122-190.89.14.pool.telefonica.de) (Ping timeout: 272 seconds)
[17:55:35] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[18:12:12] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Quit: Leaving)
[18:15:07] *** Joins: bsd4me (~usingbsd@user/bsd4me)
[18:48:20] *** Quits: fcser (~fcser@booty.farted.net) (Excess Flood)
[18:48:27] *** Joins: fcser (~fcser@booty.farted.net)
[19:10:20] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:41:59] *** Joins: tedwing (~anon@lfbn-idf3-1-1415-210.w109-221.abo.wanadoo.fr)
[20:10:22] *** Quits: bitigchi3 (~bitigchi@user/bitigchi) (Ping timeout: 272 seconds)
[20:15:08] *** Joins: bitigchi3 (~bitigchi@user/bitigchi)
[20:27:43] *** Quits: bsd4me (~usingbsd@user/bsd4me) (Quit: Leaving)
[20:28:12] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: Lost terminal)
[20:28:55] *** Joins: joo-_ (~joo-_@80-62-117-227-mobile.dk.customer.tdc.net)
[20:28:55] *** Quits: joo-_ (~joo-_@80-62-117-227-mobile.dk.customer.tdc.net) (Changing host)
[20:28:55] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[20:48:02] *** Joins: target_i (~target_i@217.175.11.173)
[21:17:57] *** Joins: feriman (~feriman@188.163.113.151)
[21:26:53] *** Joins: Akiva (~Akiva@user/Akiva)
[21:31:40] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:30:13] *** Joins: YaoNai (~YaoNai@user/yaonai)
[22:36:49] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[22:37:10] *** Joins: tejr (~tejr@user/tejr)
[22:51:38] *** Quits: tedwing (~anon@lfbn-idf3-1-1415-210.w109-221.abo.wanadoo.fr) (Quit: leaving)
[23:25:19] *** Quits: fireglow (~fireglow@fireglow.su) (Quit: Gnothi seauton; Veritas vos liberabit)
[23:29:21] *** Joins: fireglow (~fireglow@fireglow.su)
[23:40:12] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Ping timeout: 240 seconds)
[23:41:24] *** Joins: ajak (~ajak@gentoo/developer/ajak)
