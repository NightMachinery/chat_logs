[00:00:49] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[00:06:27] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[00:08:34] *** Quits: AtomicInteger (~primamate@82.102.16.148) (Quit: WeeChat 3.3)
[00:08:50] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:10:18] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[00:10:59] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[00:12:01] *** Joins: onosendi (~onosendi@user/onosendi)
[00:15:25] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:26:41] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[00:35:40] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[00:39:12] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:f59b:4aa1:dccc:b8e0) (Quit: Textual IRC Client: www.textualapp.com)
[00:39:20] *** Quits: Talon (Talon@172.77.142.59) ()
[00:39:38] *** Joins: Talon (~Talon@172.77.142.59)
[00:41:44] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[00:43:22] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:43:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[00:44:20] *** Joins: eht (~eht@user/eht)
[00:44:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:48:42] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[00:58:48] *** Quits: D1nger (~Booster2o@host-78-129-56-66.dynamic.voo.be) (Read error: Connection reset by peer)
[01:00:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:00:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:00:27] *** Joins: wroathe (~wroathe@user/wroathe)
[01:03:23] *** Joins: trafficjam (~trafficja@2a03:1b20:3:f011::a03e)
[01:03:52] <trafficjam> anyone know how to set the target for an iframe?
[01:04:12] <trafficjam> or alternatively the target for an element
[01:04:17] <trafficjam> (that's not a link)
[01:04:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[01:05:26] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[01:06:15] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 252 seconds)
[01:08:31] *** Quits: z_lehinsun (~lehinsun@188.113.178.220) (Quit: Leaving)
[01:09:21] <zak_> trafficjam: use the "src" attribute?
[01:09:48] <trafficjam> zak_: target as in `target="_self/_top/etc"
[01:10:05] <trafficjam> so that when i click on a link inside an iframe, it is followed in the parent window
[01:10:13] <zak_> Ah right
[01:10:37] <zak_> https://stackoverflow.com/questions/1037839/how-to-force-link-from-iframe-to-be-opened-in-the-parent-window
[01:11:38] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:12:20] <trafficjam> thanks bro
[01:13:48] *** Joins: src_ (~src@user/src)
[01:15:09] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:16:09] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[01:16:53] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[01:17:47] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:19:27] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[01:21:07] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[01:25:16] *** Joins: supay (adas@adas.shelltalk.net)
[01:26:15] *** Quits: justSleigh (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[01:26:43] <supay> hey, i have a bunch of structured data on mongodb, and i'm looking for a tool that can help me build different types of frontends (websites/blogs/directories/etc) from it. does anybody have any references? i'm not sure if gatsby or similar tools do the job..
[01:26:47] *** Quits: xsperry (~xs@user/xsperry) ()
[01:27:42] *** Joins: justSleigh (~justache@user/justache)
[01:30:12] *** Joins: xsperry (~xs@user/xsperry)
[01:32:18] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:35:10] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[01:35:18] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[01:36:18] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:36:33] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Client Quit)
[01:36:53] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[01:38:50] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[01:39:23] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Client Quit)
[01:39:47] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[01:39:48] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Client Quit)
[01:40:05] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[01:41:27] *** Quits: kogepan (~kogepan@user/kogepan) (Ping timeout: 252 seconds)
[01:41:43] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 268 seconds)
[01:45:29] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Quit: leaving)
[01:45:49] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[01:46:33] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[01:46:51] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[01:47:32] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 265 seconds)
[01:48:18] *** Joins: deltab (~deltab@user/deltab)
[01:57:55] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[01:59:59] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:4970:ef4b:1e0f:c4a8) (Quit: ZNC 1.8.2 - https://znc.in)
[02:00:12] *** Joins: Albright (~Albright@149.28.13.173)
[02:02:21] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[02:02:36] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[02:08:47] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:10:27] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[02:12:10] *** Joins: pavonia (~user@user/siracusa)
[02:13:36] *** Joins: gggp (~gggp@60.10.23.168)
[02:14:49] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[02:15:46] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:17:49] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 256 seconds)
[02:18:48] *** Quits: fmsd__ (~no@160.177.199.94) (Remote host closed the connection)
[02:19:13] *** Joins: fmsd__ (~no@160.177.199.94)
[02:20:51] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[02:21:38] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[02:22:47] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of oompa loompas at https://indiedevs.net/)
[02:25:07] *** Quits: trafficjam (~trafficja@2a03:1b20:3:f011::a03e) (Quit: Client closed)
[02:28:23] *** Quits: fmsd__ (~no@160.177.199.94) (Ping timeout: 252 seconds)
[02:28:28] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:28:40] *** Sven_vB_ is now known as Sven_vB
[02:30:03] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:37] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:32:29] *** Quits: pizdets (~pizdets@183.182.111.240) (Ping timeout: 256 seconds)
[02:33:48] *** Joins: pizdets (~pizdets@183.182.115.237)
[02:34:29] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[02:37:23] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:38] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:38:01] *** Joins: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249)
[02:43:28] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[02:43:43] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:37] *** Quits: taupiqueur (~taupiqueu@118.105.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[02:54:03] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 252 seconds)
[02:54:18] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[02:57:17] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[02:58:55] *** Joins: src (~src@user/src)
[02:59:00] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:44b3:1807:4825:f489) (Quit: WeeChat 3.3)
[03:03:09] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 256 seconds)
[03:03:33] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[03:05:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:05:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:05:16] *** Joins: wroathe (~wroathe@user/wroathe)
[03:08:15] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[03:10:08] *** Quits: gggp (~gggp@60.10.23.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:10:45] *** Joins: chenqisu12 (~chenqisu1@183.217.201.63)
[03:10:54] *** Joins: z_lehinsun (~lehinsun@188.113.178.220)
[03:14:26] *** Joins: xardas (~xardas@149.233.51.127)
[03:15:52] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[03:35:26] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[03:35:29] <xardas> Hi.
[03:35:35] *** Quits: codemin (~codemin@32.209.50.178) (Quit: Textual IRC Client: www.textualapp.com)
[03:36:33] *** Quits: arthur_melo (~IRC@user/arthur-melo/x-6822691) (Remote host closed the connection)
[03:36:53] <xardas> What's the most easy way to present this graphically ? https://codepen.io/mdeghaies/pen/BawjKjg
[03:37:43] <xardas> It's a small function that solves the tower of hanoi puzzle
[03:38:53] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[03:39:17] <xardas> I wanna make it look like this one https://gifyu.com/image/S2YB4
[03:39:40] <xardas> is SVG.js a good way ?
[03:40:46] <hassoon> xardas: what's that
[03:41:15] <xardas> hassoon the first link ?
[03:41:28] <hassoon> xardas: ya codepen's
[03:41:51] <xardas> just look into the console
[03:41:57] <xardas> the output is there
[03:42:16] <xardas> It's a Math puzzle (an easy one )
[03:42:36] <hassoon> xardas: nice game anyway
[03:42:44] <hassoon> xardas: you can make it with DOM
[03:43:02] <hassoon> talking about the gif now
[03:43:33] <hassoon> some good dom manipulation logic imo, unless you want something like canvas game
[03:43:54] <xardas> Right, all I need is an animation
[03:44:36] <hassoon> you don't need to, css animations are enough to animate the moving block
[03:45:19] <hassoon> xardas: and a single click is also enough to instruct the block to move to another blocks holder that you specify using a single click as well
[03:45:28] <hassoon> no need for fancy advanced features
[03:46:14] <xardas> You mean I do this animation just with css ?
[03:46:20] <xardas> I can do*
[03:46:56] <hassoon> sure, you give the block a class name, and that class uses the animation
[03:47:12] <hassoon> and that happens when you click the block, etc
[03:47:39] <xardas> I have to input the number of disk and then click go
[03:47:53] <hassoon> ah ok, even better
[03:48:56] <xardas> I'll see what I can do, Thanks hassoon
[03:49:14] <hassoon> you can define e.g 6 animations, 1_to_2, 1_to_3, 2_to_1, 2_to_3, 3_to_1, 3_to_2
[03:49:51] <hassoon> and whenever you want to move a disk, you call the right animation according to the disk movement
[03:50:06] <hassoon> @keyframes animations
[03:50:09] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (Ping timeout: 252 seconds)
[03:52:15] <xardas> lmfao
[03:52:33] <xardas> I never checked css animations
[03:52:51] <hassoon> check them
[03:52:55] <hassoon> !mdn keyframes
[03:52:57] <jellobot> hassoon, @keyframes CSS at-rule controls the intermediate steps in a CSS animation sequence by defining styles for keyframes (or waypoints) along the animation sequence. This gives more control over the intermediate steps of the animation sequence than transitions. https://mdn.io/keyframes
[03:53:01] <hassoon> ^
[03:53:02] * octav1a checks hassoon
[03:53:12] <hassoon> octav1a: what ?
[03:53:19] * octav1a hides
[03:54:24] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[03:57:42] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Remote host closed the connection)
[03:57:51] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[03:58:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:58:45] *** Joins: Colt (~Colt@user/colt)
[04:08:37] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[04:13:06] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:13:42] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:18:01] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[04:21:23] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[04:21:38] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[04:23:48] *** Joins: monkey_ (~user@190.104.116.153)
[04:29:03] *** Quits: FoodMan_ (~glucose@user/foodman) (Ping timeout: 250 seconds)
[04:30:25] *** Joins: FoodMan (~glucose@user/foodman)
[04:32:53] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:44:47] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[04:46:13] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[04:49:48] *** Quits: zak_ (~zak_@user/zak/x-0408982) (Read error: Connection reset by peer)
[04:51:02] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 268 seconds)
[04:52:18] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[04:52:32] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[04:53:19] *** Joins: gggp (~gggp@60.10.23.168)
[04:53:39] *** Quits: gggp (~gggp@60.10.23.168) (Client Quit)
[04:56:31] *** Quits: stagas (~stagas@2a02:587:c40e:fc00:9eb1:3bcf:8d65:edb5) (Ping timeout: 252 seconds)
[04:58:21] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:59:02] *** Joins: summersault (~summersau@179.221.251.16)
[05:01:02] *** Quits: chenqisu12 (~chenqisu1@183.217.201.63) (Remote host closed the connection)
[05:08:57] *** Quits: FoodMan (~glucose@user/foodman) (Ping timeout: 256 seconds)
[05:11:48] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[05:17:26] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:19:06] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[05:19:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:31:59] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[05:32:23] *** Joins: minto (~mintograd@47.201.5.61)
[05:32:51] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 245 seconds)
[05:33:44] *** Joins: AJTJ (~AJTJ@d207-189-236-135.yt.northwestel.net)
[05:33:54] <AJTJ> how does one decide when to use Math.round or Math.floor? I've been scratching my head at this for a few days now. I understand the difference between the two, and they really mess me up sometimes. I'm wondering if there's a best practice.
[05:34:44] <d3x0r> I find you almost always want floor - unless you have a specific customer requirement to round
[05:35:21] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:36:24] <AJTJ> d3x0r: should I just do things with floor then?
[05:36:32] <AJTJ> here's an example of using both for a binary search
[05:36:32] <AJTJ> https://gist.github.com/AJTJ/fd40d03fc272092e49332167894ac8b6
[05:37:10] <AJTJ> you could basically use both most of the time, but if most people are using floor
[05:37:18] <AJTJ> ...then perhaps I should just make it a habit to use floor
[05:37:34] <d3x0r> ya binary search you could use either...
[05:37:53] <d3x0r> it's partially that I'm most familiar with the behavior of integers which do floor and don't round
[05:37:58] <d3x0r> from say C
[05:38:10] <AJTJ> right
[05:38:17] <AJTJ> this makes sense
[05:38:36] <AJTJ> I also work in rust
[05:39:19] *** Quits: AJTJ (~AJTJ@d207-189-236-135.yt.northwestel.net) (Read error: Connection reset by peer)
[05:39:24] *** Joins: AJTJ_ (~AJTJ@d207-189-236-135.yt.northwestel.net)
[05:39:24] <AJTJ_> so
[05:39:27] <AJTJ_> yea
[05:39:31] <AJTJ_> I just disconnected
[05:39:33] <AJTJ_> for a second
[05:39:41] <AJTJ_> d3x0r: u say anything?
[05:39:54] <AJTJ_> I need to set up my irc to show chat history
[05:39:54] <d3x0r> nope nothing after you said you work in rust
[05:41:02] *** Quits: AJTJ_ (~AJTJ@d207-189-236-135.yt.northwestel.net) (Client Quit)
[05:42:12] *** Joins: xardas (~xardas@149.233.51.127)
[05:46:04] *** Joins: z1haze (~z1haze@user/z1haze)
[05:46:42] <z1haze> based on this snippet here, can anyone tell me why the result of my 'feed' variable would show the same server.feed for every server in the result? am i missing something here? https://bpa.st/DCDA
[05:49:41] *** Joins: ferdna (~ferdna@user/ferdna)
[05:52:19] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:53:48] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:54:37] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[05:54:54] <z1haze> nvm i have a issue somewheres else
[05:57:57] *** Joins: Rockwood (~Rocky@user/rocky)
[06:01:57] *** Quits: Talon (~Talon@172.77.142.59) ()
[06:02:16] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:02:24] *** Joins: Talon (~Talon@172.77.142.59)
[06:03:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (osmium.libera.chat (Nickname regained by services)))
[06:03:13] *** vinleod is now known as vdamewood
[06:05:15] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:15:46] <Rockwood> o/
[06:21:07] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[06:22:12] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[06:27:38] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 252 seconds)
[06:30:06] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[06:36:47] *** Joins: sagax (~sagax_nb@user/sagax)
[06:40:35] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:42:41] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[06:44:19] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[06:50:48] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[06:57:07] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[06:59:39] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:00:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5052:6286:866e:fc49) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:01:44] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 252 seconds)
[07:03:46] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[07:03:59] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:07:43] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:07:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:08:34] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:08:35] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[07:10:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[07:10:34] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[07:10:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:15:50] *** Joins: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef)
[07:17:49] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[07:19:35] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:19:52] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[07:26:11] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[07:27:52] *** Quits: xall (~xall@2600:8800:8c02:3600:c43e:37e4:5fd6:7389) (Quit: Client closed)
[07:35:00] *** Quits: happymeal` (~happymeal@user/happymeal) (Read error: Connection reset by peer)
[07:44:36] <lidless> Don’t we all
[07:45:15] <Rockwood> lidless, means?
[07:45:40] <lidless> have an issue somewhere else
[07:45:55] <lidless> I was reading the thing before your “o/“ sorry
[07:46:01] <lidless> o/
[07:46:54] *** Quits: Larzen (~textual@S01063497f663ca38.cg.shawcable.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:49:22] <Rockwood> lidless, do you know react too?
[07:49:35] <Rockwood> i am facing a issue in react
[07:49:42] <Rockwood> i am facing an issue in react
[07:49:58] <lidless> I sure don’t. JS is like a different languages than it was when Istopped web-delving in 2012
[07:50:06] <lidless> *deving
[07:50:09] <ljharb> lidless: it was great then and it's greater now
[07:50:46] <Rockwood> no one is active in react channel right now
[07:51:00] <Rockwood> and i am stuck
[07:51:12] <Rockwood> i looking for response there
[07:51:15] <Rockwood> i am
[07:51:39] <ljharb> ok
[07:52:23] <Rockwood> actually my main concern is after auth i wanna transfer data to other component by context
[07:52:56] *** Quits: z1haze (~z1haze@user/z1haze) (Quit: Leaving)
[08:00:37] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:03:36] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:03:51] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:04:40] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:04:59] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[08:05:11] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:12:56] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:18:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[08:18:25] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[08:20:20] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:22:45] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:25:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:26:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[08:28:27] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[08:30:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:36:14] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:38:48] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[08:43:31] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[08:50:36] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[08:51:55] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:56:28] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (*.net *.split)
[08:56:28] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[08:56:28] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[08:56:28] *** Quits: _nderscore (~nderscore@silentf.art) (*.net *.split)
[08:56:28] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[08:56:28] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[08:56:28] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[08:56:29] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[08:56:29] *** Quits: WizJin (~z0rbaznc@78.141.221.79) (*.net *.split)
[08:56:29] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[08:56:29] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[08:56:29] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[08:56:29] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[08:56:29] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[08:56:29] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[08:56:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (*.net *.split)
[08:56:29] *** Quits: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef) (*.net *.split)
[08:56:29] *** Quits: Talon (~Talon@172.77.142.59) (*.net *.split)
[08:56:29] *** Quits: obimod (~obimod@gateway/vpn/pia/obimod) (*.net *.split)
[08:56:29] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[08:56:29] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[08:56:29] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[08:56:29] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[08:56:29] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (*.net *.split)
[08:56:29] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[08:56:29] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[08:56:29] *** Quits: lehinsun (~ttytwiste@188.113.176.117) (*.net *.split)
[08:56:29] *** Quits: Guest5703 (birkoff@birkoff.thunderirc.net) (*.net *.split)
[08:56:29] *** Quits: brw (~bas@haring.bas.sh) (*.net *.split)
[08:56:29] *** Quits: supercool (bigode@2600:3c01::f03c:91ff:fee5:c75e) (*.net *.split)
[08:56:29] *** Quits: Covrus (~Covrus@user/covrus) (*.net *.split)
[08:56:29] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (*.net *.split)
[08:56:29] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[08:56:29] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[08:56:30] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[08:56:30] *** Quits: cisme_ (~cisme_@user/cisme/x-1186982) (*.net *.split)
[08:56:30] *** Quits: jellobot (~jellobot@li334-26.members.linode.com) (*.net *.split)
[08:56:30] *** Quits: Benett (~Benett@xnetx.de) (*.net *.split)
[08:56:30] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[08:56:30] *** Quits: mosh3k21 (~mosh3k21@user/mosh3k21) (*.net *.split)
[08:56:30] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[08:56:30] *** Quits: skillbot (~skillbot@user/skillbot) (*.net *.split)
[08:56:30] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[08:56:30] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[08:56:30] *** Quits: cluelessperson_ (~cluelessp@user/cluelessperson) (*.net *.split)
[08:56:30] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (*.net *.split)
[08:56:30] *** Quits: em-bee (~eMBee@realss.com) (*.net *.split)
[08:56:30] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[08:56:30] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[08:56:30] *** Quits: austincheney (~austinche@104-189-235-24.lightspeed.rcsntx.sbcglobal.net) (*.net *.split)
[08:56:30] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[08:56:30] *** Quits: Pabc1 (~Pabc1@2001:19f0:6c01:74e:5400:3ff:fe60:e5d6) (*.net *.split)
[08:56:30] *** Quits: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com) (*.net *.split)
[08:56:30] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[08:56:30] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[08:56:30] *** Quits: haniaF (~haniaF@83.24.192.250.ipv4.supernova.orange.pl) (*.net *.split)
[08:56:31] *** Quits: mermasjohnson (~ttk@189.147.185.193) (*.net *.split)
[08:56:31] *** Quits: keypusher (keypusher@user/keypusher) (*.net *.split)
[08:56:31] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[08:56:31] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[08:56:31] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (*.net *.split)
[08:56:31] *** Quits: azizLIGHT (~azizLIGHT@user/azizlight) (*.net *.split)
[08:56:31] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (*.net *.split)
[08:56:31] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[08:56:31] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[08:56:31] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (*.net *.split)
[08:56:31] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (*.net *.split)
[08:56:31] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[08:56:31] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (*.net *.split)
[08:56:31] *** Quits: root____ (~root@157.245.144.252) (*.net *.split)
[08:56:31] *** Quits: tnsi (~tnsi@075-128-103-056.res.spectrum.com) (*.net *.split)
[08:56:31] *** Quits: arthurpbs (~arthurpbs@168.121.99.77) (*.net *.split)
[08:56:31] *** Quits: bobdobbs (~user@116.251.164.13) (*.net *.split)
[08:56:31] *** Quits: deadbeat (~quassel@user/deadbeat) (*.net *.split)
[08:56:31] *** Quits: devslash (~devslash@46.232.211.210) (*.net *.split)
[08:56:31] *** Quits: nepeat (~nepeat@79.110.170.59) (*.net *.split)
[08:56:31] *** Quits: Zauberfisch (~Zauberfis@cm147-42.liwest.at) (*.net *.split)
[08:56:31] *** Quits: glider (~glider@user/glider) (*.net *.split)
[08:56:31] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[08:56:31] *** Quits: zopsi (~zopsi@irc.dir.ac) (*.net *.split)
[08:56:31] *** Quits: hax (~hax@user/hax) (*.net *.split)
[08:56:31] *** Quits: trog (~trog@user/trog) (*.net *.split)
[08:56:31] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[08:56:31] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (*.net *.split)
[08:56:32] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[08:56:32] *** Quits: d3x0r (~d3x0r@user/d3x0r) (*.net *.split)
[08:56:32] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[08:56:32] *** Quits: g2anj (~v@39.112.227.198) (*.net *.split)
[08:56:32] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[08:56:32] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[08:56:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[08:56:32] *** Quits: CoJaBo (~aztec@user/CoJaBo) (*.net *.split)
[08:56:32] *** Quits: flameboi (dgw@user/flameboi) (*.net *.split)
[08:56:32] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[08:56:32] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (*.net *.split)
[08:56:32] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[08:56:32] *** Quits: Icedream (~icedream@144.76.223.175) (*.net *.split)
[08:56:32] *** Quits: Ducki (~ducki@user/ducki) (*.net *.split)
[08:56:32] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: supay (adas@adas.shelltalk.net) (*.net *.split)
[08:56:32] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[08:56:32] *** Quits: ljharb (sid43720@user/ljharb) (*.net *.split)
[08:56:32] *** Quits: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net) (*.net *.split)
[08:56:32] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[08:56:32] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[08:56:32] *** Quits: lebster (sid17131@id-17131.hampstead.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: Selicre (~x@hello.i.am.selic.re) (*.net *.split)
[08:56:32] *** Quits: AciD (~fu@user/acid/x-5205451) (*.net *.split)
[08:56:33] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[08:56:33] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[08:56:33] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[08:56:33] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[08:56:33] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[08:56:33] *** Quits: The_Tablet (~tablet@user/the-tablet) (*.net *.split)
[08:56:33] *** Quits: llinguini (sid257922@id-257922.hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: tcsc (sid145321@5.254.36.59) (*.net *.split)
[08:56:33] *** Quits: jwpapi (sid502614@id-502614.uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: LtHummus (~lthummus@97-126-100-88.tukw.qwest.net) (*.net *.split)
[08:56:33] *** Quits: v3gajerusalem (~v3ga@2600:1702:ad0:3b90::40) (*.net *.split)
[08:56:33] *** Quits: Alexendoo (~Alexendoo@macleod.io) (*.net *.split)
[08:56:33] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: samsch (~samsch@171.ip-192-99-69.net) (*.net *.split)
[08:56:33] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[08:56:33] *** Quits: victor_ (sid208353@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: naeluh__ (sid95128@lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: andrew9184_ (sid416777@uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: cythrawll (sid384410@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: gendl (sid100083@hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: lidless (lidless@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: AlbertLast (~nix@0exclusive.de) (*.net *.split)
[08:56:33] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[08:56:33] *** Quits: theskillwithin (~theskillw@user/theskillwithin) (*.net *.split)
[08:56:33] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[08:56:33] *** Quits: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at) (*.net *.split)
[08:56:33] *** Quits: mynickisregister (~mynickisr@5.79.67.8) (*.net *.split)
[08:56:33] *** Quits: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com) (*.net *.split)
[08:56:33] *** Quits: gkatsev (~gkatsev@spacecompute.com) (*.net *.split)
[08:56:33] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[08:56:33] *** Quits: futs (~nico@142.93.239.247) (*.net *.split)
[08:56:33] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[08:56:34] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[08:56:34] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (*.net *.split)
[08:56:34] *** Quits: dysfigured (~dfg@li490-89.members.linode.com) (*.net *.split)
[08:56:34] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (*.net *.split)
[08:56:34] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[08:56:34] *** Quits: spike_spiegel38 (~spike_spi@static.200.4.251.148.clients.your-server.de) (*.net *.split)
[08:56:34] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (*.net *.split)
[08:56:34] *** Quits: Koopz (~Koopz@koopz.rocks) (*.net *.split)
[08:56:34] *** Quits: Unfixed (~Jake@64.31.33.140) (*.net *.split)
[08:56:34] *** Quits: thykka (~thykka@2a01:4f8:c0c:e335::1) (*.net *.split)
[08:56:34] *** Quits: arash (arash@thinks.life.is-a.beauty) (*.net *.split)
[08:56:34] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (*.net *.split)
[08:56:34] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[08:56:34] *** Quits: tomjwatson[m] (~tomjwatso@2001:470:69fc:105::daf6) (*.net *.split)
[08:56:34] *** Quits: nicoty (~nicoty@user/nicoty) (*.net *.split)
[08:56:34] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[08:56:34] *** Quits: Nnnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com) (*.net *.split)
[08:56:34] *** Quits: Kol (~Kol@d75-157-122-186.bchsia.telus.net) (*.net *.split)
[08:56:34] *** Quits: pagios (~pagios@life.is-a.beauty) (*.net *.split)
[08:56:34] *** Quits: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at) (*.net *.split)
[08:56:34] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[08:56:34] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[08:56:34] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (*.net *.split)
[08:56:35] *** Quits: b-rex (van@down.by.the.river.lol) (*.net *.split)
[08:56:35] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[08:56:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[08:56:35] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[08:56:35] *** Quits: ross (sid305269@user/ross) (*.net *.split)
[08:56:35] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[08:56:35] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[08:56:35] *** Quits: hackdash (h@user/hackdash) (*.net *.split)
[08:56:35] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[08:56:35] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (*.net *.split)
[08:56:35] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[08:56:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[08:56:35] *** Quits: biberu (~biberu@user/biberu) (*.net *.split)
[08:56:35] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[08:56:35] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[08:56:35] *** Quits: Slade (~user@user/slade) (*.net *.split)
[08:56:35] *** Quits: pez (~pez@user/pez) (*.net *.split)
[08:56:35] *** Quits: scarce (~scarce@sourcehut/user/scarce) (*.net *.split)
[08:56:36] *** Quits: ekl (~ekl@user/ekl) (*.net *.split)
[08:56:36] *** Quits: Ealinn[m] (~olgatokar@2001:470:69fc:105::1:3e01) (*.net *.split)
[08:56:36] *** Quits: tempest (~ashe@104.168.245.236) (*.net *.split)
[08:56:36] *** Quits: ashnur (~rak@user/ashnur) (*.net *.split)
[08:56:36] *** Quits: graybeard (~graybeard@user/graybeard) (*.net *.split)
[08:56:36] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[08:56:36] *** Quits: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2) (*.net *.split)
[08:56:36] *** Quits: APic (apic@apic.name) (*.net *.split)
[08:56:36] *** Quits: newton (james@user/newton) (*.net *.split)
[08:56:36] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[08:56:36] *** Quits: ryzokuken (~ryzokuken@fanzine2.igalia.com) (*.net *.split)
[08:56:36] *** Quits: joepie91 (~joepie91p@user/joepie91) (*.net *.split)
[08:56:36] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:56:36] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[08:56:36] *** Quits: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[08:56:36] *** Quits: rogorido_ (~rogorido@mail.georeligion.org) (*.net *.split)
[08:56:36] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[08:56:36] *** Quits: Sherpard2 (~VPard@user/sherpard2) (*.net *.split)
[08:56:36] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[08:56:36] *** Quits: ninjabanjo (~ninjabanj@107.150.45.163) (*.net *.split)
[08:56:36] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:56:37] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[08:56:37] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[08:56:37] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[08:56:37] *** Quits: les (znc@user/les) (*.net *.split)
[08:56:37] *** Quits: Kirjava (~cake@user/kirjava) (*.net *.split)
[08:56:37] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[08:56:37] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[08:56:37] *** Quits: Swant (~swant@libera/staff/swant) (*.net *.split)
[08:56:37] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[08:56:37] *** Quits: celphi_ (sid97751@user/celphi) (*.net *.split)
[08:56:37] *** Quits: owlbynight (sid501016@id-501016.tinside.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: lf94 (~lf94@user/lf94) (*.net *.split)
[08:56:37] *** Quits: Enissay (~Enissay@user/enissay) (*.net *.split)
[08:56:37] *** Quits: pupskuchen (~pupskuche@user/pupskuchen) (*.net *.split)
[08:56:37] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[08:56:37] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[08:56:37] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[08:56:37] *** Quits: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575) (*.net *.split)
[08:56:37] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[08:56:37] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[08:56:37] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[08:56:37] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[08:56:37] *** Quits: rosseaux (~BeRo@2a00:1828:2000:859::2) (*.net *.split)
[08:56:37] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[08:56:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[08:56:37] *** Quits: median (~median@user/median) (*.net *.split)
[08:56:38] *** Quits: Flannel (~flannel@user/flannel) (*.net *.split)
[08:56:38] *** Quits: christian[m]1 (~christian@2001:470:69fc:105::f6f1) (*.net *.split)
[08:56:38] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[08:56:38] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (*.net *.split)
[08:56:38] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[08:56:38] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (*.net *.split)
[08:56:38] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (*.net *.split)
[08:56:38] *** Quits: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[08:56:38] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[08:56:38] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (*.net *.split)
[08:56:38] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[08:56:38] *** Quits: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[08:56:38] *** Quits: octav1a (~quassel@173.195.145.98) (*.net *.split)
[08:56:38] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[08:56:38] *** Quits: Woet (~me@irc.woet.me) (*.net *.split)
[08:56:38] *** Quits: wez (~wyoung@about/web/wez) (*.net *.split)
[08:56:38] *** Quits: jushi (~j@2a01:4f9:c010:8455::1) (*.net *.split)
[08:56:39] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[08:56:39] *** Quits: c17r (~c17r@c17r.com) (*.net *.split)
[08:56:39] *** Quits: avu (~jan@user/avu) (*.net *.split)
[08:56:39] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[08:56:39] *** Quits: philivey9426 (~polarizin@188.166.72.81) (*.net *.split)
[08:56:39] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[08:56:39] *** Quits: In0perable (~PLAYER_1@fancydata.science) (*.net *.split)
[08:56:39] *** Quits: Square (~a@user/square) (*.net *.split)
[08:56:39] *** Quits: monokrome (~monokrome@50.215.11.140) (*.net *.split)
[08:56:39] *** Quits: calcmandan (~quassel@user/calcmandan) (*.net *.split)
[08:56:39] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[08:56:39] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (*.net *.split)
[08:56:39] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[08:56:39] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[08:56:39] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (*.net *.split)
[08:56:39] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[08:56:39] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[08:56:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[08:56:39] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[08:56:39] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[08:56:39] *** Quits: Pilum (~JKM@user/pilum) (*.net *.split)
[08:56:39] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[08:56:39] *** Quits: ox1eef (~0x1eef@user/rg) (*.net *.split)
[08:56:39] *** Quits: Haise0 (~haise01@user/haise01) (*.net *.split)
[08:56:39] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[08:56:39] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[08:56:39] *** Quits: Bombo (atom@user/bombo) (*.net *.split)
[08:56:39] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: OneMirror (~far@onegrandcircle.com) (*.net *.split)
[08:56:40] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[08:56:40] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: itok_ (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: redrambles (sid319583@id-319583.tinside.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[08:56:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[08:56:40] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[08:56:40] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[08:56:40] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[08:56:40] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[08:56:40] *** Quits: bulletsquid (~bulletsqu@user/bulletsquid) (*.net *.split)
[08:56:40] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[08:56:40] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[08:56:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[08:56:40] *** Quits: xardas (~xardas@149.233.51.127) (*.net *.split)
[08:56:40] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (*.net *.split)
[08:56:40] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (*.net *.split)
[08:56:41] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (*.net *.split)
[08:56:41] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[08:56:41] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[08:58:07] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:58:07] *** Joins: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef)
[08:58:07] *** Joins: Talon (~Talon@172.77.142.59)
[08:58:07] *** Joins: xardas (~xardas@149.233.51.127)
[08:58:07] *** Joins: obimod (~obimod@gateway/vpn/pia/obimod)
[08:58:07] *** Joins: Colt (~Colt@user/colt)
[08:58:07] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[08:58:07] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:58:07] *** Joins: Albright (~Albright@149.28.13.173)
[08:58:07] *** Joins: xsperry (~xs@user/xsperry)
[08:58:07] *** Joins: supay (adas@adas.shelltalk.net)
[08:58:07] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[08:58:07] *** Joins: Betal (~Betal@user/betal)
[08:58:07] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[08:58:07] *** Joins: mermasjohnson (~ttk@189.147.185.193)
[08:58:07] *** Joins: polyrob (~rob@user/polyrob)
[08:58:07] *** Joins: keypusher (keypusher@user/keypusher)
[08:58:07] *** Joins: lehinsun (~ttytwiste@188.113.176.117)
[08:58:07] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[08:58:07] *** Joins: [R] (~rs@genoce.org)
[08:58:07] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[08:58:07] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[08:58:07] *** Joins: Guest5703 (birkoff@birkoff.thunderirc.net)
[08:58:07] *** Joins: brw (~bas@haring.bas.sh)
[08:58:07] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[08:58:07] *** Joins: de-facto (~de-facto@user/de-facto)
[08:58:07] *** Joins: supercool (bigode@2600:3c01::f03c:91ff:fee5:c75e)
[08:58:07] *** Joins: Covrus (~Covrus@user/covrus)
[08:58:07] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[08:58:07] *** Joins: azizLIGHT (~azizLIGHT@user/azizlight)
[08:58:07] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[08:58:07] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[08:58:07] *** Joins: root____ (~root@157.245.144.252)
[08:58:07] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[08:58:07] *** Joins: Trieste (T@user/pilgrim)
[08:58:07] *** Joins: sunyour (~sunyour@129.226.182.99)
[08:58:07] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[08:58:07] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[08:58:07] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[08:58:07] *** Joins: Ducki (~ducki@user/ducki)
[08:58:07] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[08:58:07] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:58:07] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[08:58:07] *** Joins: tnsi (~tnsi@075-128-103-056.res.spectrum.com)
[08:58:07] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[08:58:07] *** Joins: arthurpbs (~arthurpbs@168.121.99.77)
[08:58:07] *** Joins: bobdobbs (~user@116.251.164.13)
[08:58:07] *** Joins: cisme_ (~cisme_@user/cisme/x-1186982)
[08:58:07] *** Joins: deadbeat (~quassel@user/deadbeat)
[08:58:07] *** Joins: jellobot (~jellobot@li334-26.members.linode.com)
[08:58:07] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[08:58:07] *** Joins: Benett (~Benett@xnetx.de)
[08:58:07] *** Joins: Slade (~user@user/slade)
[08:58:07] *** Joins: devslash (~devslash@46.232.211.210)
[08:58:07] *** Joins: nepeat (~nepeat@79.110.170.59)
[08:58:07] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[08:58:07] *** Joins: Zauberfisch (~Zauberfis@cm147-42.liwest.at)
[08:58:07] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[08:58:07] *** Joins: glider (~glider@user/glider)
[08:58:07] *** Joins: mosh3k21 (~mosh3k21@user/mosh3k21)
[08:58:07] *** Joins: phryk (~totallyno@user/phryk)
[08:58:07] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[08:58:07] *** Joins: zopsi (~zopsi@irc.dir.ac)
[08:58:07] *** Joins: hax (~hax@user/hax)
[08:58:07] *** Joins: c17r (~c17r@c17r.com)
[08:58:07] *** Joins: trog (~trog@user/trog)
[08:58:07] *** Joins: skillbot (~skillbot@user/skillbot)
[08:58:07] *** Joins: dlam (~dlam@dlam.me)
[08:58:07] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[08:58:07] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[08:58:07] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[08:58:07] *** Joins: cluelessperson_ (~cluelessp@user/cluelessperson)
[08:58:07] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[08:58:07] *** Joins: em-bee (~eMBee@realss.com)
[08:58:07] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[08:58:07] *** Joins: d3x0r (~d3x0r@user/d3x0r)
[08:58:07] *** Joins: edk (edk@libera/staff/edk)
[08:58:07] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[08:58:07] *** Joins: Spydar007 (~spydar007@user/spydar007)
[08:58:07] *** Joins: g2anj (~v@39.112.227.198)
[08:58:07] *** Joins: austincheney (~austinche@104-189-235-24.lightspeed.rcsntx.sbcglobal.net)
[08:58:07] *** Joins: tazle (tazle@kapsi.fi)
[08:58:07] *** Joins: christian[m]1 (~christian@2001:470:69fc:105::f6f1)
[08:58:07] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[08:58:07] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[08:58:07] *** Joins: themaxdavitt_ (sid433050@id-433050.hampstead.irccloud.com)
[08:58:07] *** Joins: Pabc1 (~Pabc1@2001:19f0:6c01:74e:5400:3ff:fe60:e5d6)
[08:58:07] *** Joins: pez (~pez@user/pez)
[08:58:07] *** Joins: morgabra (sid500580@user/morgabra)
[08:58:07] *** Joins: beencubed (~beencubed@209.131.238.248)
[08:58:07] *** Joins: scarce (~scarce@sourcehut/user/scarce)
[08:58:07] *** Joins: haniaF (~haniaF@83.24.192.250.ipv4.supernova.orange.pl)
[08:58:07] *** strontium.libera.chat sets mode: +vv jellobot skillbot
[08:58:07] *** Joins: rvgate (~rvgate@user/rvgate)
[08:58:07] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[08:58:07] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[08:58:07] *** Joins: ninjabanjo (~ninjabanj@107.150.45.163)
[08:58:07] *** Joins: chronon (~chronon@user/chronon)
[08:58:07] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[08:58:07] *** Joins: Fossil (~Fossil@95.85.23.165)
[08:58:07] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[08:58:07] *** Joins: les (znc@user/les)
[08:58:07] *** Joins: Kirjava (~cake@user/kirjava)
[08:58:07] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[08:58:07] *** Joins: Isthmusi (~Isthmus@user/isveni)
[08:58:07] *** Joins: theglass (~glass@user/theglass)
[08:58:07] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[08:58:07] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[08:58:07] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[08:58:07] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[08:58:07] *** Joins: b-rex (van@down.by.the.river.lol)
[08:58:07] *** Joins: quesker (~idnet@mail.89vx.net)
[08:58:07] *** Joins: flameboi (dgw@user/flameboi)
[08:58:07] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[08:58:07] *** Joins: kcrk (~kcrk@user/kcrk)
[08:58:07] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[08:58:07] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[08:58:07] *** Joins: _nderscore (~nderscore@silentf.art)
[08:58:07] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[08:58:07] *** Joins: ljharb (sid43720@user/ljharb)
[08:58:07] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[08:58:07] *** Joins: Jigsy (~Jigsy@user/jigsy)
[08:58:07] *** Joins: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net)
[08:58:07] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[08:58:07] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[08:58:07] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:58:07] *** Joins: Icedream (~icedream@144.76.223.175)
[08:58:07] *** Joins: Swant (~swant@libera/staff/swant)
[08:58:07] *** Joins: Moyst_ (~moyst@user/moyst)
[08:58:07] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[08:58:07] *** Joins: Bombo (atom@user/bombo)
[08:58:07] *** Joins: monokrome (~monokrome@50.215.11.140)
[08:58:07] *** Joins: Praise (~Fat@user/praise)
[08:58:07] *** Joins: celphi_ (sid97751@user/celphi)
[08:58:07] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[08:58:07] *** Joins: ross (sid305269@user/ross)
[08:58:07] *** Joins: owlbynight (sid501016@id-501016.tinside.irccloud.com)
[08:58:07] *** Joins: rickbutton (sid410078@id-410078.helmsley.irccloud.com)
[08:58:07] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[08:58:07] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[08:58:07] *** Joins: lebster (sid17131@id-17131.hampstead.irccloud.com)
[08:58:07] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[08:58:07] *** Joins: lidless (lidless@tinside.irccloud.com)
[08:58:07] *** Joins: Selicre (~x@hello.i.am.selic.re)
[08:58:07] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[08:58:07] *** Joins: AciD (~fu@user/acid/x-5205451)
[08:58:07] *** Joins: erry (~erry@errietta.me)
[08:58:07] *** Joins: philivey9426 (~polarizin@188.166.72.81)
[08:58:07] *** Joins: webstran- (~webstrand@user/webstrand)
[08:58:07] *** Joins: Square (~a@user/square)
[08:58:07] *** Joins: ekl (~ekl@user/ekl)
[08:58:07] *** Joins: futs (~nico@142.93.239.247)
[08:58:07] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[08:58:07] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[08:58:07] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[08:58:07] *** Joins: dysfigured (~dfg@li490-89.members.linode.com)
[08:58:07] *** Joins: lf94 (~lf94@user/lf94)
[08:58:07] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[08:58:07] *** Joins: Geronimo (~Geronimo@user/geronimo)
[08:58:07] *** Joins: spike_spiegel38 (~spike_spi@static.200.4.251.148.clients.your-server.de)
[08:58:07] *** Joins: Enissay (~Enissay@user/enissay)
[08:58:07] *** Joins: sybariten (~jake@157.90.217.120)
[08:58:07] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[08:58:07] *** Joins: ttys000 (~ttys000@user/ttys000)
[08:58:07] *** Joins: Ealinn[m] (~olgatokar@2001:470:69fc:105::1:3e01)
[08:58:07] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[08:58:07] *** Joins: abraham (~abraham@143.244.185.86)
[08:58:07] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[08:58:07] *** Joins: The_Tablet (~tablet@user/the-tablet)
[08:58:07] *** Joins: calcmandan (~quassel@user/calcmandan)
[08:58:07] *** Joins: jiffe (~jiffe@mail.nsab.us)
[08:58:07] *** Joins: tempest (~ashe@104.168.245.236)
[08:58:07] *** Joins: OneMirror (~far@onegrandcircle.com)
[08:58:07] *** Joins: a1paca_ (~a1paca@user/a1paca)
[08:58:07] *** Joins: Koopz (~Koopz@koopz.rocks)
[08:58:07] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[08:58:07] *** Joins: phenom (~primus@user/phenom)
[08:58:07] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[08:58:07] *** Joins: bulletsquid (~bulletsqu@user/bulletsquid)
[08:58:07] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[08:58:07] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[08:58:07] *** Joins: llinguini (sid257922@id-257922.hampstead.irccloud.com)
[08:58:07] *** Joins: tcsc (sid145321@5.254.36.59)
[08:58:07] *** Joins: redrambles (sid319583@id-319583.tinside.irccloud.com)
[08:58:07] *** Joins: jwpapi (sid502614@id-502614.uxbridge.irccloud.com)
[08:58:07] *** Joins: LtHummus (~lthummus@97-126-100-88.tukw.qwest.net)
[08:58:07] *** Joins: v3gajerusalem (~v3ga@2600:1702:ad0:3b90::40)
[08:58:07] *** Joins: Alexendoo (~Alexendoo@macleod.io)
[08:58:07] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[08:58:07] *** Joins: samsch (~samsch@171.ip-192-99-69.net)
[08:58:07] *** Joins: victor_ (sid208353@tinside.irccloud.com)
[08:58:07] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[08:58:07] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[08:58:07] *** Joins: naeluh__ (sid95128@lymington.irccloud.com)
[08:58:07] *** Joins: andrew9184_ (sid416777@uxbridge.irccloud.com)
[08:58:07] *** Joins: cythrawll (sid384410@ilkley.irccloud.com)
[08:58:07] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[08:58:07] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[08:58:07] *** Joins: Kol (~Kol@d75-157-122-186.bchsia.telus.net)
[08:58:07] *** Joins: AlbertLast (~nix@0exclusive.de)
[08:58:07] *** Joins: DCTWD (~dc@uz.utmappro.com)
[08:58:07] *** Joins: theskillwithin (~theskillw@user/theskillwithin)
[08:58:07] *** Joins: hexology (~hexology@user/hexology)
[08:58:07] *** Joins: pupskuchen (~pupskuche@user/pupskuchen)
[08:58:07] *** Joins: hmw[at] (~hmw@80-108-56-158.cable.dynamic.surfer.at)
[08:58:07] *** Joins: mynickisregister (~mynickisr@5.79.67.8)
[08:58:07] *** Joins: Unfixed (~Jake@64.31.33.140)
[08:58:07] *** Joins: thykka (~thykka@2a01:4f8:c0c:e335::1)
[08:58:07] *** Joins: gkatsev (~gkatsev@spacecompute.com)
[08:58:07] *** Joins: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com)
[08:58:07] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[08:58:07] *** Joins: ashnur (~rak@user/ashnur)
[08:58:07] *** Joins: Emil (emil@emil.fi)
[08:58:07] *** Joins: arash (arash@thinks.life.is-a.beauty)
[08:58:07] *** Joins: cebor (~cebor@user/cebor)
[08:58:07] *** Joins: hackdash (h@user/hackdash)
[08:58:07] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[08:58:07] *** Joins: Deide (~deide@user/deide)
[08:58:07] *** Joins: jonnycat[m] (~jonnycatm@2001:470:69fc:105::f575)
[08:58:07] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[08:58:07] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[08:58:07] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[08:58:07] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[08:58:07] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[08:58:07] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[08:58:07] *** Joins: kadoban (~kadoban@user/kadoban)
[08:58:07] *** Joins: enick_958 (~mercvrivs@2001:470:69fc:105::2ee6)
[08:58:07] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[08:58:07] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[08:58:07] *** Joins: graybeard (~graybeard@user/graybeard)
[08:58:07] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[08:58:07] *** Joins: PigDude (~PigDude@159.203.16.199)
[08:58:07] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[08:58:07] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[08:58:07] *** Joins: trms[m] (~trmsmatri@2001:470:69fc:105::1:28d2)
[08:58:07] *** Joins: tomjwatson[m] (~tomjwatso@2001:470:69fc:105::daf6)
[08:58:07] *** Joins: nicoty (~nicoty@user/nicoty)
[08:58:07] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[08:58:07] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:58:07] *** Joins: dskull (~dskull@user/dskull)
[08:58:07] *** Joins: Nnnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com)
[08:58:07] *** Joins: WizJin (~z0rbaznc@78.141.221.79)
[08:58:07] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[08:58:07] *** Joins: pagios (~pagios@life.is-a.beauty)
[08:58:07] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[08:58:07] *** Joins: Kobaz (~libera@its.kobaz.net)
[08:58:07] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[08:58:07] *** Joins: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at)
[08:58:07] *** Joins: zacts (~zacts@user/zacts)
[08:58:07] *** Joins: mcint (mcint@user/mcint)
[08:58:07] *** Joins: Dev0n (~Dev0n@user/dev0n)
[08:58:07] *** Joins: laris (undead@37.221.209.36)
[08:58:07] *** Joins: ringo__ (~ringo@157.230.117.128)
[08:58:07] *** Joins: Exa (exa@irc.moe)
[08:58:07] *** Joins: rosseaux (~BeRo@2a00:1828:2000:859::2)
[08:58:07] *** Joins: deniska (~denis@user/deniska)
[08:58:07] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[08:58:07] *** Joins: APic (apic@apic.name)
[08:58:07] *** Joins: newton (james@user/newton)
[08:58:07] *** Joins: con3 (~con3@143.198.53.32)
[08:58:07] *** Joins: ryzokuken (~ryzokuken@fanzine2.igalia.com)
[08:58:07] *** Joins: joepie91 (~joepie91p@user/joepie91)
[08:58:07] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:07] *** Joins: biberu (~biberu@user/biberu)
[08:58:07] *** Joins: edr (~edr@user/edr)
[08:58:07] *** Joins: ldlework (~hexeme@user/hexeme)
[08:58:07] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[08:58:07] *** Joins: rogorido_ (~rogorido@mail.georeligion.org)
[08:58:07] *** Joins: tkazi (~tkazi@user/tkazi)
[08:58:07] *** Joins: OverCoder (~OverCoder@user/overcoder)
[08:58:07] *** Joins: Stx (stx@libera/staff/stx)
[08:58:07] *** Joins: Sherpard2 (~VPard@user/sherpard2)
[08:58:07] *** Joins: orkim (~orkim@user/orkim)
[08:58:07] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[08:58:07] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[08:58:07] *** Joins: median (~median@user/median)
[08:58:07] *** Joins: wyre (~wyre@user/wyre)
[08:58:07] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[08:58:07] *** Joins: litharge (litharge@libera/bot/litharge)
[08:58:07] *** Joins: octav1a (~quassel@173.195.145.98)
[08:58:07] *** Joins: Flannel (~flannel@user/flannel)
[08:58:07] *** Joins: Woet (~me@irc.woet.me)
[08:58:07] *** Joins: wez (~wyoung@about/web/wez)
[08:58:07] *** Joins: jushi (~j@2a01:4f9:c010:8455::1)
[08:58:07] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[08:58:07] *** Joins: avu (~jan@user/avu)
[08:58:07] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[08:58:07] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[08:58:07] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[08:58:07] *** Joins: Artea (~Lufia@artea.com.pt)
[08:58:07] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[08:58:07] *** Joins: shan (shan@cyblog/maintainer/shan)
[08:58:07] *** Joins: Pilum (~JKM@user/pilum)
[08:58:07] *** Joins: klys_ (~mdasoh@show.op8.us)
[08:58:07] *** Joins: ox1eef (~0x1eef@user/rg)
[08:58:07] *** Joins: Haise0 (~haise01@user/haise01)
[08:58:07] *** Joins: SoF (~skius@user/skius)
[08:58:07] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[08:58:07] *** Joins: percY- (~percY@138.68.239.19)
[08:58:07] *** Joins: ario (~ario@159.65.220.102)
[08:58:07] *** Joins: ChanServ (ChanServ@services.libera.chat)
[08:58:07] *** strontium.libera.chat sets mode: +o ChanServ
[08:58:13] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[08:58:15] *** Quits: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com) (Max SendQ exceeded)
[08:58:24] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[08:58:26] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[08:58:26] *** Quits: Exa (exa@irc.moe) (Max SendQ exceeded)
[08:58:27] *** Joins: Exa (exa@irc.moe)
[08:58:27] *** Quits: zopsi (~zopsi@irc.dir.ac) (Max SendQ exceeded)
[08:58:28] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Remote host closed the connection)
[08:58:28] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:28] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[08:58:36] *** Joins: koolazer (~koo@user/koolazer)
[08:59:21] *** Quits: litharge (litharge@libera/bot/litharge) (Remote host closed the connection)
[08:59:24] *** Joins: litharge (litharge@libera/bot/litharge)
[08:59:28] *** Joins: wolfshappen (~waff@irc.furworks.de)
[09:00:05] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 256 seconds)
[09:00:16] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[09:00:20] *** Joins: Linkandzelda_ (~Linkandze@cloudirc.laz.li)
[09:00:27] *** Joins: keypushe- (keypusher@user/keypusher)
[09:00:39] *** Quits: glider (~glider@user/glider) (Ping timeout: 256 seconds)
[09:00:41] *** Joins: Colt (~Colt@user/colt)
[09:01:13] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 256 seconds)
[09:01:13] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (Ping timeout: 256 seconds)
[09:01:24] *** Joins: glider (~glider@user/glider)
[09:01:45] *** Joins: tazle (tazle@kapsi.fi)
[09:01:50] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[09:01:51] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.30)
[09:02:55] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[09:03:44] *** keypushe- is now known as keypusher
[09:04:43] *** Joins: han-solo (~hanish@user/han-solo)
[09:05:29] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[09:05:51] <evulish> !range2
[09:05:51] <jellobot> evulish, (a, b, s=1)=>Array.from({length: (b-a)/s+1}, (_,i)=>a+i*s)
[09:05:58] <evulish> !range3
[09:05:58] <jellobot> evulish, const range = (length, cb=x=>x) => Array.from({length}, (_,i)=>cb(i))
[09:06:27] <evulish> !range
[09:06:27] <jellobot> evulish, |> function range(start, end) { return Array.apply(Array, Array(end + 1 - start)).map(function (_, i) { return i + start; }); }
[09:06:46] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[09:07:33] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[09:07:33] *** Quits: philivey9426 (~polarizin@188.166.72.81) (*.net *.split)
[09:07:33] *** Quits: webstran- (~webstrand@user/webstrand) (*.net *.split)
[09:07:33] *** Quits: In0perable (~PLAYER_1@fancydata.science) (*.net *.split)
[09:07:33] *** Quits: Square (~a@user/square) (*.net *.split)
[09:07:33] *** Quits: monokrome (~monokrome@50.215.11.140) (*.net *.split)
[09:07:33] *** Quits: calcmandan (~quassel@user/calcmandan) (*.net *.split)
[09:07:33] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[09:07:33] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (*.net *.split)
[09:07:33] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[09:07:33] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[09:07:33] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (*.net *.split)
[09:07:33] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[09:07:33] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[09:07:33] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[09:07:34] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[09:07:34] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[09:07:34] *** Quits: Pilum (~JKM@user/pilum) (*.net *.split)
[09:07:34] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[09:07:34] *** Quits: ox1eef (~0x1eef@user/rg) (*.net *.split)
[09:07:34] *** Quits: Haise0 (~haise01@user/haise01) (*.net *.split)
[09:07:34] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:07:34] <evulish> range2 is best amirite
[09:07:42] *** Joins: calcmandan (~quassel@user/calcmandan)
[09:07:44] *** Joins: PigDude (~PigDude@159.203.16.199)
[09:07:47] *** Joins: kraucrow (~polarizin@188.166.72.81)
[09:07:47] *** Joins: Artea (~Lufia@artea.com.pt)
[09:07:49] *** Joins: klys (~mdasoh@show.op8.us)
[09:07:49] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[09:07:55] *** Joins: monokrome (~monokrome@50.215.11.140)
[09:07:58] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[09:08:07] *** Joins: haise01 (~haise01@user/haise01)
[09:08:12] *** Joins: shan (shan@cyblog/maintainer/shan)
[09:08:24] *** Joins: webstrand (~webstrand@user/webstrand)
[09:08:26] *** Joins: SoF (~skius@user/skius)
[09:08:31] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[09:08:32] *** Joins: ox1eef (~0x1eef@user/rg)
[09:09:04] *** Joins: erry (~erry@errietta.me)
[09:09:41] *** Joins: Pilum (~JKM@user/pilum)
[09:10:21] *** Joins: Square (~a@user/square)
[09:11:26] *** Joins: phenom (~primus@user/phenom)
[09:12:21] *** Linkandzelda_ is now known as Linkandzelda
[09:16:13] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[09:16:13] *** Joins: kadoban (~kadoban@user/kadoban)
[09:16:45] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[09:17:13] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[09:19:33] <ljharb> evulish: i mean, kind of
[09:19:43] <ljharb> evulish: usually you don't need a step, so what's best is an inline Array.from with mapper
[09:20:28] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[09:20:28] *** Quits: Bombo (atom@user/bombo) (*.net *.split)
[09:20:28] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: OneMirror (~far@onegrandcircle.com) (*.net *.split)
[09:20:28] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[09:20:28] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: itok_ (sid418430@id-418430.ilkley.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: redrambles (sid319583@id-319583.tinside.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[09:20:28] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[09:20:29] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[09:20:29] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[09:20:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[09:20:29] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[09:20:29] *** Quits: bulletsquid (~bulletsqu@user/bulletsquid) (*.net *.split)
[09:20:29] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[09:20:29] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[09:20:36] *** Joins: Bombo (atom@p4ff009a4.dip0.t-ipconnect.de)
[09:20:37] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[09:20:42] *** Joins: ario (~ario@159.65.220.102)
[09:20:42] *** Joins: deniska (~denis@user/deniska)
[09:20:43] *** Joins: OneMirror (~far@onegrandcircle.com)
[09:20:44] *** Joins: redrambles (sid319583@id-319583.tinside.irccloud.com)
[09:20:46] *** Quits: Bombo (atom@p4ff009a4.dip0.t-ipconnect.de) (Changing host)
[09:20:46] *** Joins: Bombo (atom@user/bombo)
[09:20:46] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[09:20:51] *** Joins: Kobaz (~libera@its.kobaz.net)
[09:20:55] *** Joins: percY- (~percY@138.68.239.19)
[09:21:11] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[09:21:16] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[09:21:26] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[09:21:35] *** Joins: bulletsquid (~bulletsqu@user/bulletsquid)
[09:21:35] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[09:21:50] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[09:23:18] *** Joins: a1paca (~a1paca@user/a1paca)
[09:24:41] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[09:25:32] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[09:26:48] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[09:26:51] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[09:32:20] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[09:33:26] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:34:05] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[09:34:45] *** Joins: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com)
[09:36:09] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:36:54] *** Joins: jazzy (~jaziz@user/jaziz)
[09:37:49] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[09:39:11] *** Quits: mermasjohnson (~ttk@189.147.185.193) (Ping timeout: 256 seconds)
[09:41:53] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:42:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:46:33] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[09:56:49] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[10:03:27] *** Quits: Axy (~Axy@176.234.137.2) (Ping timeout: 264 seconds)
[10:03:49] *** Joins: Axy (~Axy@user/axy)
[10:10:23] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 252 seconds)
[10:11:00] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:11:26] *** Joins: Axy (~Axy@user/axy)
[10:12:05] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[10:15:49] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 240 seconds)
[10:16:37] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[10:16:39] *** Joins: Axy (~Axy@user/axy)
[10:18:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:30:15] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 256 seconds)
[10:32:01] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[10:33:37] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[10:33:51] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Remote host closed the connection)
[10:33:55] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:35:06] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[10:35:57] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Remote host closed the connection)
[10:36:25] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[10:38:27] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Remote host closed the connection)
[10:42:29] *** Joins: night_wulfe (~wulfe@5.181.234.227)
[10:42:55] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[10:45:07] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Remote host closed the connection)
[10:45:35] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[10:45:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:47:00] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[10:48:09] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[10:48:23] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Remote host closed the connection)
[10:48:49] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:51:43] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 265 seconds)
[10:53:21] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:53:26] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[10:53:39] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 265 seconds)
[10:54:37] *** vdamewood is now known as Guest1016
[10:54:37] *** Quits: Guest1016 (~vdamewood@fedora/vdamewood) (Killed (zinc.libera.chat (Nickname regained by services)))
[10:54:37] *** vinleod is now known as vdamewood
[10:56:22] *** Joins: han-solo (~hanish@user/han-solo)
[10:58:50] *** Joins: bodicceaII (~bodiccea@user/bodiccea)
[10:59:16] *** Joins: x-x (~x@user/x-x)
[11:04:46] *** Joins: xardas (~xardas@149.233.51.127)
[11:05:16] <systemfault> Wow... when even the people working on MySQL are telling people to not use it https://blog.sesse.net/blog/tech/2021-12-05-16-41_leaving_mysql.html :P
[11:07:10] <han-solo> i remember reading, uber switched to mysql for something from postgres, not sure
[11:07:44] <ljharb> oof, damning
[11:07:50] <ljharb> the blog, not uber
[11:08:30] <Cork> han-solo: kinda doubt they switched to mysql and not maria though
[11:08:53] <ljharb> Cork: read the bottom of the blog post above :-p
[11:09:09] <ljharb> maria's never been that great, i'd have always picked pg over that, even when i preferred mysql to pg
[11:09:29] <Cork> ljharb: pg has a lot of problems too though
[11:09:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:12:04] <systemfault> The company I work for still use MySQL... because they've been using it for 20 years now
[11:12:46] <ljharb> like what?
[11:12:53] <Cork> lots of places use mariadb. Not so much cause "it is what we used to use", but cause there isn't really an alternative for many situations
[11:13:17] <ljharb> Cork: why would you prefer Maria over pg or MySQL tho, that’s like using OpenOffice
[11:13:46] <Cork> ljharb: pg is a bloody pain to host as it has to user permissons for starters
[11:13:58] <Cork> so you have to run one server per entity
[11:14:26] *** Quits: bodicceaII (~bodiccea@user/bodiccea) (Read error: Connection reset by peer)
[11:14:34] <Cork> so the economy of scale doesn't work for pg
[11:15:25] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[11:15:40] <ljharb> one server per entity? that doesn’t sound right, unless I’m not familiar with the terminology
[11:16:02] <Cork> ljharb: try set up a server where users can't see tables in all databases
[11:16:09] <Cork> hint, you can't
[11:17:46] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:19:44] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[11:19:47] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:23:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:24:21] <ljharb> ah ok, so you’re talking about the use case where you host a DB for many users
[11:24:43] <ljharb> ie, Wordpress or something as opposed to “every tech company with a product”?
[11:25:05] *** Quits: night_wulfe (~wulfe@5.181.234.227) (Ping timeout: 268 seconds)
[11:25:14] <ljharb> i def don’t know anything about managing that setup except with mysql, that’s for sure
[11:26:20] <theskillwithin> im using postgres for a marketplace site,  should I be worried?
[11:26:58] <theskillwithin> new side project
[11:27:28] <theskillwithin> keystonejs <3
[11:27:41] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:27:53] <Cork> theskillwithin: no, one site one database works well in pg
[11:28:33] *** Quits: x-x (~x@user/x-x) (Quit: leaving)
[11:29:07] <Cork> mariadb works ok too as long as you know the limitations on how things need to work, heck that is true for all generic databases engines
[11:31:06] <theskillwithin> lots of traffic on a marketplace site, because you have users that are buyers, but you also have users that are sellers
[11:31:36] <Cork> thekingofbandit: the users i talked about is database users not entries in a table
[11:31:47] <Cork> so not related
[11:32:01] <han-solo> ljharb: yeah, the blog
[11:32:06] <theskillwithin> lol Cork i know
[11:32:32] <Cork> theskillwithin: then i'm not sure why you think you would have a problem...
[11:32:54] <theskillwithin> Cork you said it doesn't scale
[11:33:12] <Cork> theskillwithin: for service hosting ya
[11:33:13] <theskillwithin> Cork my point was about the traffic volume
[11:33:48] <Cork> it scales when you have mid sized tables and lot of traffic, that works well
[11:33:50] <han-solo> postgres is awesome, not sure if there's postgis alternatives in mysql and we make enough use of postgis
[11:33:53] <Cork> less so if you have big tables
[11:35:22] <stenno> https://www.postgresql.org/docs/14/ddl-rowsecurity.html good shit
[11:35:37] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[11:37:55] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[11:42:57] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:43:29] *** Joins: verwirrt (~verwirrt@user/verwirrt)
[11:43:59] *** Quits: verwirrt (~verwirrt@user/verwirrt) (Client Quit)
[11:44:33] *** Joins: x-x (~x@user/x-x)
[11:46:38] <theskillwithin> Cork ah ok you had me worried for a sec
[11:46:58] <Cork> theskillwithin: scaling and economy of scale are two very different things
[11:47:15] <theskillwithin> well table rows might get at least into the 6 figures
[11:47:45] <theskillwithin> the users and transactions table prob the most rows
[11:48:04] <Cork> ya, but that is scaling, economy of scale is about getting the price for running the service down to a point where it becomes cheap
[11:49:38] <theskillwithin> used to AWS serverless, but never done PG in aws before
[11:50:01] <theskillwithin> so that will probably be the first option we look at when figuring out hosting and deploy
[11:52:29] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[11:59:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[11:59:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[11:59:37] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[12:01:06] *** Joins: EdFletcher (~PKD@user/edfletcher)
[12:05:10] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[12:05:16] <stenno> i want to set up large clusters of distributed databases but idk where to even start looking up stuff
[12:05:28] <stenno> i know about WAL replication of postgres
[12:07:40] <EdFletcher> i'd just use https://aws.amazon.com/rds/
[12:09:20] <ashnur> 'just'?
[12:09:35] <ashnur> every time someone says 'just' in tech context, i know they don't mean 'just'
[12:10:29] <ashnur> well, apart from old time substack's modules, they Just WorkU2122
[12:10:50] <ashnur> damn, Just Works™
[12:10:55] <ashnur> I should watch what I type
[12:11:33] *** Joins: Guest54 (~Guest54@2001:8004:5100:44c:501e:45b9:ed93:3390)
[12:11:55] <OnkelTem> Hi folks
[12:12:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f5d2:447c:d749:7070)
[12:12:10] <ashnur> before webpack, and before typescript, maybe even before react, javascript for me was like that. Everything I tried worked out of the box, everything was documented properly, and I didn't have to spend days and days on dev env and dependency conflicts. Then... the firenation attacked
[12:12:52] <OnkelTem> Is there some protocol/library on top of WebSockets to get data fetched from a server as a alternative to polling?
[12:13:22] <OnkelTem> WS are to way lowlevel
[12:13:26] <OnkelTem> too*
[12:13:27] *** Joins: kogepan (~kogepan@user/kogepan)
[12:13:54] <OnkelTem> It should track at least request => response things
[12:13:57] *** Quits: Guest54 (~Guest54@2001:8004:5100:44c:501e:45b9:ed93:3390) (Client Quit)
[12:14:17] *** Joins: ycon (~ycon@2001:8004:5100:44c:501e:45b9:ed93:3390)
[12:14:20] <EdFletcher> OnkelTem: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events
[12:14:36] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[12:15:07] <OnkelTem> Isn't it one-way only thing?
[12:15:12] <OnkelTem> EdFletcher:
[12:15:15] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[12:15:23] <EdFletcher> "This is a one-way connection, so you can't send events from a client to a server."
[12:16:11] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Quit: leaving)
[12:16:21] <OnkelTem> Erm.. Events, not requests.
[12:16:36] <OnkelTem> So I can request for some data, right? Pereform an API request for example
[12:17:01] <OnkelTem> Ah, event source that one is
[12:17:19] <EdFletcher> i don't know, i always just use websockets because they're better, but i knew of SSE enough to find the documentation. reading it is your job.
[12:17:28] *** Joins: nomic2 (~nomic@185.217.117.73)
[12:17:33] <OnkelTem> So my API calls will be those EventSource-es. And then if they need to update the data they can just send them (via event)
[12:18:03] <han-solo> isn't there something something `socketio` ?
[12:18:21] <OnkelTem> haven't used them, heard much...
[12:18:42] <EdFletcher> socket.io is a proprietary service built with websockets (and when those aren't available, long polling)
[12:19:16] <OnkelTem> EdFletcher: do you use wwebsockets directly or via some library? How do you track request => response?
[12:19:25] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 240 seconds)
[12:19:44] <OnkelTem> i.e. that a particular response is related to a request made earlier
[12:19:53] <paulcarroty> huh, got an email from haveibeenpwned: gravatar was hacked a year ago
[12:20:11] *** Quits: nomic (~nomic@185.198.243.158) (Ping timeout: 256 seconds)
[12:20:51] <EdFletcher> OnkelTem: on the client side, https://developer.mozilla.org/en-US/docs/Web/API/WebSocket. on the backend, https://www.npmjs.com/package/ws. state fully tracking users is a discussion entirely orthogonal to this one.
[12:21:19] <EdFletcher> "state fully"? odd autocorrect, that one
[12:23:07] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[12:24:31] *** Quits: x-x (~x@user/x-x) (Quit: leaving)
[12:25:55] <OnkelTem> Huh, you're tough man :)
[12:26:26] <OnkelTem> WS are really difficult to use them directly like you do!
[12:27:46] <OnkelTem> Having just ONE channel of communication between client and servere makes difficult to TRACK request and response, I write this for the third time
[12:28:24] <OnkelTem> There are no real responses, there are just 'messages'
[12:29:15] <OnkelTem> and it's up to the front-end and back-end protocol to decide how they're gonna maintain this 'conversaion'
[12:29:33] <OnkelTem> at minimum, they need to add special 'ids'
[12:29:36] <EdFletcher> Right, so you need to define a way to track that yourself in the data structures you pass back and forth in those messages
[12:29:52] <OnkelTem> And that's my question - is there some existing protocol (maybe with a lib) which adds this logic
[12:30:30] <EdFletcher> Oh surely there is, I just don’t know of it sorry
[12:30:47] <OnkelTem> Okay, np
[12:31:21] *** Joins: D1nger (~Booster2o@host-78-129-56-66.dynamic.voo.be)
[12:32:03] *** Joins: gas51627 (uid91066@id-91066.helmsley.irccloud.com)
[12:32:07] <EdFletcher> Something like https://www.colyseus.io/ maybe? Though that’s pretty geared specifically towards game dev and I think it’s a whole stack which you may not need nor want
[12:32:38] <EdFletcher> I don’t think it’s as hard as you think to build your own protocol between client and server, maybe try it out first and see?
[12:33:32] <stenno> i just use socketio for websockets because i am lazy and it Just Works
[12:33:32] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Ping timeout: 268 seconds)
[12:34:05] <EdFletcher> Hahaha fair can’t argue with that, laziness is a virtue
[12:34:30] <stenno> for programmers, definetely
[12:34:39] <EdFletcher> OnkelTem: So yeah maybe look into socket.io… again dunno anything about it myself but it is often recommended
[12:41:31] *** Joins: chao (~stenno@user/stenno)
[12:43:17] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[12:46:22] *** chao is now known as stenno
[12:51:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:55:20] *** Joins: pulse (~pulse@user/pulse)
[13:00:23] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:02:45] *** Joins: chao (~stenno@user/stenno)
[13:02:45] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[13:02:59] *** stenno is now known as Guest7106
[13:02:59] *** Quits: Guest7106 (~stenno@user/stenno) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[13:02:59] *** chao is now known as stenno
[13:07:07] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[13:25:33] <theskillwithin> ycon hai
[13:27:53] <theskillwithin> btw joinn #libera-cloak  and say !cloackme
[13:30:06] *** Quits: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef) (Remote host closed the connection)
[13:30:28] *** Joins: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef)
[13:33:43] *** Joins: Naan (~Naan@user/naan)
[13:36:44] *** Quits: D1nger (~Booster2o@host-78-129-56-66.dynamic.voo.be) (Quit: Lost the game...)
[13:36:49] *** Joins: peteyboy1 (~peteyboy1@98.red-95-123-127.staticip.rima-tde.net)
[13:37:27] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[13:39:07] *** Joins: tmm88 (~tmm88@user/tmm88)
[13:47:26] *** Quits: peteyboy1 (~peteyboy1@98.red-95-123-127.staticip.rima-tde.net) (Read error: Connection reset by peer)
[13:49:41] *** Joins: peteyboy1 (~peteyboy1@98.red-95-123-127.staticip.rima-tde.net)
[14:02:27] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:04:40] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:07:51] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[14:08:32] *** Joins: niso- (~niso-@2a02:1205:c690:ca10:c5cb:137c:8ba6:1c5)
[14:08:33] *** Joins: niso-_ (~niso-@2a02:1205:c690:ca10:c5cb:137c:8ba6:1c5)
[14:11:43] *** Joins: fmsd__ (~no@160.177.199.94)
[14:13:19] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[14:15:06] <hassoon> this scrum agile methodology thing is allover the jobs market d'oh
[14:16:56] *** Quits: niso-_ (~niso-@2a02:1205:c690:ca10:c5cb:137c:8ba6:1c5) (Quit: Leaving)
[14:17:03] *** Quits: niso- (~niso-@2a02:1205:c690:ca10:c5cb:137c:8ba6:1c5) (Read error: Connection reset by peer)
[14:18:20] <xardas> How do I move a html element under another element ?
[14:21:31] <stenno> xardas: can you be more specific?
[14:22:35] <xardas> <parent_element><to_be_moved> </to_be_moved></parent_element>
[14:22:59] <xardas> <another_parent></another_parent>
[14:23:27] <stenno> ah probably appendChild
[14:23:30] <stenno> lemme write a fiddle
[14:24:01] <CiaoSen> appendChild moves the element, if it is already in the dom
[14:24:17] <xardas> Correct it's already in the dom
[14:24:37] <CiaoSen> another_paretn.appendChild(to_be_moved)
[14:24:54] <xardas> Ok let me try it
[14:25:30] <CiaoSen> btw. do you mean inside another_parent or below?
[14:25:42] <stenno> xardas: https://jsfiddle.net/043z9rkx/
[14:25:56] <xardas> to another_parent
[14:26:11] <xardas> stenno nice ! thank you
[14:26:24] <xardas> thank u too CiaoSen
[14:26:37] <hassoon> xardas: parentElement.insertBefore(yourElement, elementToInsertYourElementAfter)
[14:26:54] <stenno> wut
[14:26:55] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[14:26:56] <hassoon> xardas: and it will move
[14:26:57] <stenno> thats like the opposite
[14:27:00] <stenno> hassoon:
[14:27:12] <hassoon> stenno: how so ?
[14:27:12] <CiaoSen> not really, it depends on what he wanted to do
[14:27:13] <stenno> they want appendChild and not insertBefore
[14:27:37] <CiaoSen> that's why I asked him if he wants it inside or below
[14:28:25] <hassoon> stenno: insertBefore can do the role of appendChild as well, it's more generic, and allows us to insert our elements wherever we want anyway
[14:29:06] <stenno> hassoon: how are you inserting an element as the last element of a child with insertBefore?
[14:29:20] <CiaoSen> with null
[14:29:35] <CiaoSen> It will it insert as halst
[14:29:48] <hassoon> appenChild is the equivalent of parentElement.insertBefore(yourElement, parentElement.lastElementChild.nextElementSibling)
[14:30:02] <stenno> hassoon: so why use insertBefore lol
[14:30:16] <hassoon> stenno: 'cause i like it :>
[14:30:30] <stenno> ok, i prefer code to be readable
[14:30:31] <hassoon> stenno: but yes you're right, appendChild is easier and will do the job in this case
[14:30:34] <hassoon> ya right
[14:30:38] <stenno> fair, kk
[14:30:46] <stenno> didn't know about passing 'null' as second tbf
[14:31:04] <hassoon> ah even better..
[14:31:11] <CiaoSen> don't no if null or undefined
[14:31:20] <CiaoSen> but should do the same
[14:31:25] <stenno> has to be null
[14:31:31] <stenno> undefined will throw, it seems
[14:31:38] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 265 seconds)
[14:31:41] <stenno> referenceNode is not an optional parameter. You must explicitly pass a Node or null. Failing to provide it or passing invalid values may behave differently in different browser versions.
[14:32:15] <hassoon> CiaoSen: i know the fact that parentElement.lastElementChild.nextElementSibling is after all null, but not sure if passing null explicitely is the same
[14:32:42] <stenno> this will throw if lastElementChild is null
[14:32:49] <stenno> or undefined
[14:33:12] <stenno> so if you have an empty parent, this wont work
[14:33:38] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[14:33:42] <pingpongball> Hey guys
[14:33:51] <pingpongball> What you use to see databases in mongodb?
[14:34:03] <pingpongball> I've used robo3t but i want alternatives
[14:34:35] <stenno> i dont use mongo and i will never use it
[14:34:58] <pingpongball> =#  why
[14:34:58] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[14:35:04] <pingpongball> I've given alot time to learn mongo
[14:35:07] <ashnur> lol
[14:35:08] <stenno> !no mongo
[14:35:09] <jellobot> stenno, Don't use MongoDB - it has many issues, and is essentially never the right solution to your problem. Here's a list of issues: http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/ and a more technical article at http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/
[14:35:14] <stenno> pingpongball: ^
[14:35:21] <silly> if this was a silliest solutions contest, i'm in... insertAdjacent* ftw
[14:35:32] <ashnur> pingpongball, https://mongopostmortems.com/
[14:35:37] <ashnur> like you need a reason
[14:36:27] <ashnur> 95% of corporate frontend is literally just reinwenting the wheel in the shittiest way possible, with no consideration for anyone or anything
[14:36:39] <ashnur> mongo is one of the prime examples
[14:36:58] <ashnur> next.js/vue.js and the rest put in at least 50%
[14:38:33] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[14:39:35] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[14:45:02] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:45:14] <xardas> Am I doing something wrong ? https://jsfiddle.net/kca3L8yf/1/
[14:45:50] <ashnur> stuff don't even fit my screen, can i claim that's wrong? :D
[14:45:53] <ashnur> !minimal
[14:45:53] <jellobot> ashnur, A minimal test case should contain precisely the HTML and JavaScript necessary to demonstrate the problem, no more and no less. If the JavaScript is more than 42 lines, it is probably not a minimal test case.
[14:46:38] <xardas> To be honest it's messy.
[14:46:50] <xardas> I'm trying to do this university assignment
[14:49:04] <xardas> This is my first project ever in the front-end field
[14:50:22] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:49a2:b187:a83c:8b86)
[14:50:31] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[14:52:24] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[14:56:28] <paulcarroty> @ashnur mongo really makes life easier, first reason why it so popular
[14:57:02] <ashnur> easy is the enemy of good
[14:57:45] <ashnur> and no one is surprised why shitty software is popular, it's only the fans who appear surprised when they meet those who don't share their simplistic convictions
[14:58:05] <paulcarroty> OK, go learn your 1000+ pages relative db manual
[14:59:06] <ashnur> oh, yes, the always coming shadow boxing argument, if i am against your super easy to use tool, it must be that what I do is excessively hard
[14:59:21] <ashnur> it cannot be the case that you overestimate the value you save by using something easy
[14:59:54] <ashnur> http://www.learndatalogtoday.org/
[15:13:52] *** Joins: src (~src@user/src)
[15:14:01] *** Quits: ycon (~ycon@2001:8004:5100:44c:501e:45b9:ed93:3390) (Quit: Client closed)
[15:19:31] *** Joins: ycon (~ycon@2001:8004:5110:5a8:98c2:f124:13a7:b15d)
[15:22:02] *** Quits: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com) ()
[15:24:20] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:27:04] <tmm88> heyho
[15:28:15] <tmm88> https://www.toptal.com/developers/hastebin/wizuwopuma.js what am i doing wrong here? https://projecteuler.net/problem=2
[15:31:47] <silly> lol wat?! hastebin bought toptal or rather the other way around. lol...
[15:32:02] <stenno> This site has been acquired by Toptal.com.
[15:32:09] <silly> terribin
[15:32:14] <Alexendoo> Ah, that is a shame
[15:32:30] <silly> https://hastebin.com/gujivuxino
[15:32:36] <silly> it redirects
[15:33:07] <silly> how is that a shame? hastebin was terrible anyway
[15:33:15] <tmm88> they did the same thing with pastebin
[15:33:38] <silly> stupid default dark theme is totally unreadable in daylight
[15:34:32] <silly> tmm88, they being toptal? are they buying all the paste boards now?
[15:34:49] <silly> should i quickly set one up? what are the numbers?
[15:35:27] <tmm88> and why did they do the same thing? because they are always hunting for good developers (for the top 3), with the excuse that if they don't pass their admission exams, they will wash the all the content that is tied to their footprints and to the dns and ipv4/ipv6 adddresses that are tied to your network connection and to your internet footpritn
[15:36:01] <tmm88> so, is toptal evil? yes, they are
[15:36:17] <tmm88> do they do even more nasty things? yes they do
[15:36:48] *** Joins: pmercado (~pmercado@186.107.38.45)
[15:36:50] <stenno> tmm88: the for loop is wrong, _total++ will add 1 to total on each loop pass
[15:37:13] <tmm88> that's not what i want to do
[15:37:15] <stenno> it should just be a while loop
[15:37:28] <tmm88> what i wonat to do is adding all the even fibonacci numbers
[15:37:33] <tmm88> up to 40000000
[15:37:39] <tmm88> or 4M
[15:37:45] <stenno> i told you what you did wrong, yes
[15:37:50] <tmm88> and it's partially wrong
[15:38:08] <tmm88> but in some cases it's working
[15:38:16] <tmm88> so maybe i am doing something wrong
[15:38:29] <stenno> yes, you are doing wrong that you add 1 to _total on each for loop pass
[15:38:43] <stenno> and that is not what you want
[15:39:26] <tmm88> so something like     for(let _i = 0; _total<4000000; _i++) {
[15:39:34] <tmm88> should work
[15:40:05] <stenno> no, you don't need 4000000 passes
[15:40:21] <stenno> you just have to make sure that resultIteration is lower than 4M
[15:40:45] <stenno> check out a 'while' loop instead of a 'for' loop
[15:41:36] <tmm88> https://www.toptal.com/developers/hastebin/oyogeketev.js
[15:41:41] <tmm88> i fixed it like this
[15:41:59] <tmm88> and it's working
[15:42:32] <stenno> it shouldn't work
[15:43:18] <stenno> the sum of (all fibonacci numbers which are lower than 4000000)
[15:43:19] <silly> also, there's https://repl.it/languages/javascript
[15:43:30] <stenno> it works per coincidence
[15:43:48] <stenno> but total can be larger than 4 million
[15:44:01] <stenno> you have to check _resultIteration, not _total
[15:45:04] <stenno> and you are not using _i either, so just do a while loop as i mentioned several times already
[15:45:14] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:46:50] <paule32> hello
[15:47:09] <paule32> i have a div on my page, and a "fixed" div in it
[15:47:36] <paule32> when i resize the browser, the inner div will set to other position
[15:47:52] <paule32> but it should be stay in div 1
[15:48:27] <paule32> so my question is, how can i set "fixed" position for div2, so, that it stay positions of div1
[15:48:30] <paule32> ?
[15:48:53] <paule32> i can not use "position: absolute;"
[15:49:23] <silly> div2 fixed inside div1?
[15:49:31] <silly> not fixed to the page?
[15:49:46] *** Quits: fmsd__ (~no@160.177.199.94) (Remote host closed the connection)
[15:49:56] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 265 seconds)
[15:50:08] <silly> use position: absolute with div2 and position: relative with div1
[15:50:16] *** Joins: fmsd__ (~no@160.177.199.94)
[15:51:09] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Quit: The Lounge - https://thelounge.chat)
[15:52:04] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[15:53:32] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:53:48] <paule32> ah, ok, it works, thank you
[15:55:25] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[15:56:24] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:58:05] *** Joins: teut (~teut@106.215.2.203)
[15:58:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:00:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:01:38] <paule32> sometimes, when i click on a div (as icon), other divs will scroll to the top of the current parent div
[16:02:16] *** Quits: ycon (~ycon@2001:8004:5110:5a8:98c2:f124:13a7:b15d) (Quit: Client closed)
[16:02:30] <paule32> when i move these icon divs, the position will not changed (ondblclick
[16:05:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:12:54] *** Quits: nomic2 (~nomic@185.217.117.73) (Quit: Leaving)
[16:14:42] *** Joins: tlf (~tlf@mobile-166-176-249-150.mycingular.net)
[16:15:44] <pingpongball> why javascript?
[16:15:49] <pingpongball> why not c / c++ ?
[16:15:52] <tmm88> https://www.toptal.com/developers/hastebin/nowituliba.js here is my final solution for the problem
[16:15:58] <tmm88> of project euler
[16:17:09] <silly> tmm88, omg... run eslint on it
[16:17:31] <stenno> tmm88: the bug i mentioned before is still in it
[16:17:32] <silly> it's eww, eww and eww eww eww
[16:17:36] <tmm88> i should work with es 4 or es 5 at least
[16:17:46] <tmm88> currently it's what like es 9
[16:17:51] <silly> es4??
[16:17:55] <stenno> but you don't seem to care so i stop caring too :P
[16:18:11] <silly> the one that never saw the light of day
[16:18:12] <tmm88> sorry es 5/6
[16:18:24] <stenno> your for loop doesn't make sense, you never use _i, and the condition _total < 4000000 is wrong
[16:18:25] <tmm88> currently it's like es 9
[16:18:32] <stenno> but yeah, you don't care, so i don't either
[16:18:42] <tmm88> ok so i fix it
[16:18:44] <tmm88> :P
[16:19:12] <silly> current is es12 or rather es2021
[16:19:17] <stenno> and you also don't seem to understand why it is wrong?
[16:20:57] <tmm88> https://www.toptal.com/developers/hastebin/bokomivona.js
[16:21:01] <tmm88> i fixed it
[16:21:09] <tmm88> memory addresses
[16:21:18] <stenno> the condition _total < 4000000 is wrong
[16:21:23] *** Joins: szutt (~szutt@116.37.2.145)
[16:21:36] <stenno> you want to test for _resultIteration, not _total
[16:21:54] <tmm88> no, i want to test for _total
[16:22:07] <stenno> no, you don't, why would you?
[16:22:07] <tmm88> because if the sum of even numbers is bigger then 4M
[16:22:14] <tmm88> then i stop iterating
[16:22:17] <stenno> why?
[16:22:32] <tmm88> because that's what is on the exercise
[16:22:36] <stenno> this has nothing to do with the task
[16:22:37] <tmm88> sum all even numbers
[16:22:38] <stenno> no, its not
[16:22:44] <stenno>  https://projecteuler.net/problem=2
[16:22:46] <tmm88> of fibonacci sequence
[16:22:52] <tmm88> up to 4M
[16:22:57] <stenno> By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
[16:23:00] <stenno> WHOSE VALUES
[16:23:17] <stenno> you have a fibonacci sequence of all numbers < 4000000
[16:23:19] *** Joins: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com)
[16:23:23] <stenno> from those, you need to add up all even numbers
[16:23:41] <tmm88> ok so i was wrong
[16:24:07] <stenno> so thasts why i said you have to check for _resultIteration, not for _total
[16:24:26] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[16:24:46] <stenno> it might be coincidentally true, but it would not pass a QA
[16:26:32] <tmm88> https://www.toptal.com/developers/hastebin/isucaxerid.js
[16:27:28] <silly> you should also stop writing js freehand, let vscode+eslint guide you
[16:27:30] <stenno> nice!
[16:27:45] <silly> return x,y;
[16:28:18] <silly> _i++ where _i i never used
[16:28:24] *** Joins: fmsd___ (~no@160.177.199.94)
[16:29:01] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[16:29:08] <silly> and tons more terrible things, probably some 50 errors in 26 lines
[16:29:39] *** Joins: happymeal (~happymeal@user/happymeal)
[16:30:37] *** Quits: fmsd__ (~no@160.177.199.94) (Ping timeout: 240 seconds)
[16:30:48] <stenno> as mentioned above
[16:37:43] <peteyboy1> 1) are you a programming purist? 2) do you see nextjs as something really cool that combines a lot of features that usually don't mix (SSR, SSG, CSR) or as something that overcomplicates things and tries to do too many things?
[16:38:34] *** Joins: SteveR (~SteveR@103.215.168.1)
[16:42:08] <stenno> that sum of even fibonacci is cool to solve with generators and iterator helpers
[16:43:20] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:45:06] *** Joins: tex (~super@user/dix)
[16:45:47] <happymeal> damn RIP jello
[16:47:50] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[16:48:58] <stenno> aw iterator helpers dont have takeUntil
[16:51:16] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:53:27] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[16:54:00] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:00:45] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[17:10:05] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[17:12:37] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 240 seconds)
[17:13:28] *** Joins: Axy (~Axy@user/axy)
[17:14:17] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[17:15:57] *** Joins: nomic (~nomic@185.217.117.73)
[17:16:08] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[17:17:11] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[17:17:27] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[17:18:46] *** Quits: teut (~teut@106.215.2.203) (Ping timeout: 256 seconds)
[17:21:22] *** Joins: sam_1 (~sam_1@87.51.251.118)
[17:23:47] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 252 seconds)
[17:28:58] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Ping timeout: 256 seconds)
[17:31:25] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[17:37:41] *** Joins: gehn (~gehn@user/gehn)
[17:40:51] *** Quits: bobdobbs (~user@116.251.164.13) (Ping timeout: 256 seconds)
[17:41:00] *** Joins: arthur_melo (~IRC@user/arthur-melo/x-6822691)
[17:42:31] *** Joins: csmiga1 (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[17:46:00] *** Joins: xsperry (~xs@user/xsperry)
[17:57:43] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[17:59:57] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 265 seconds)
[18:00:17] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[18:00:21] *** Joins: Axy (~Axy@user/axy)
[18:01:04] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[18:01:41] *** Quits: gas51627 (uid91066@id-91066.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:03:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[18:04:42] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:05:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:05:45] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 265 seconds)
[18:06:39] *** Joins: Axy (~Axy@user/axy)
[18:09:31] <lidless> Which ECMA standard is JS based off now? I'm wondering how to learn what I've missed out on between 2013 and now
[18:09:39] <lidless> I see const, async, let...
[18:10:24] <leduyquang753> The latest version is ECMAScript 2021.
[18:11:30] <leduyquang753> Mozilla developer network is a nice reference site.
[18:11:56] <lidless> True that. I was hoping to be hand-held in a "Get back into modern JS" kind of way so I don't need to sift through all the stuff I know
[18:12:39] <leduyquang753> If something has drastically changed it makes sense to just start over.
[18:13:19] <lidless> did it? I don't know. Is it still single threaded?
[18:13:27] <gehn> !books @ lidless
[18:13:28] <jellobot> lidless, !eloquent (http://eloquentjavascript.net), !ydkjs (https://github.com/getify/You-Dont-Know-JS), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus, Programming JavaScript Applications by Eric Elliott.
[18:13:49] <leduyquang753> It is still single threaded.
[18:14:24] <lidless> I'm pretty sure 90% of what I knew is still actively used. Maybe I'll just look up async to start.
[18:14:30] <lidless> thanks gehn
[18:14:30] <gehn> lidless, JS has a reputation for being *very* backwards compatible. ideally learn the most recent version of JS, but if you learn an older version it's still going to be relevant.
[18:14:53] <lidless> I was a hardcore webdev from 1999 to 2012 but then went full on offsec
[18:15:04] <leduyquang753> You will be surprised then. I would say JS practices from 8 years ago are no longer applicable today.
[18:15:05] <gehn> it's not always the case that educational material matches pace with the release of new language versions or language features (true of more than just JS)
[18:15:29] <lidless> heh yeah. I left RoR because of that pace
[18:15:30] <gehn> yeah, don't re-learn what you did in JS 10 years ago
[18:15:48] <leduyquang753> Even C++ has changed quite a lot over the past 10 years for a frame of reference.
[18:15:51] <gehn> any of those books listed should provide a good foundation for modern JS
[18:16:12] <lidless> or maybe I can learn React and just look at MDN for things that look unfamiliar
[18:16:32] <lidless> leduyquang753: bad example, because C++ lol
[18:16:38] <gehn> lidless, I recommend react, and that's an option. ymmv depending on your level of prior experience
[18:17:04] <gehn> I would recommend that anyone do at least a quick refresher on the "base" language that is JS, both in the browser and in node
[18:17:08] <lidless> I get it though. Python has too
[18:17:27] <gehn> eloquent or ydkjs should suffice for this
[18:17:42] <lidless> I don't know node at all other than installing via npm. that's a good topic for me to study as well, thank you
[18:18:06] <gehn> I would recommend installing node through nvm
[18:18:07] <gehn> !nvm
[18:18:08] <jellobot> gehn, nvm ( https://nvm.sh / #nvm ) lets you change node versions per-user/per-shell. nave ( https://www.npmjs.com/package/nave ) is for per-user/per-SUBshell. n ( https://www.npmjs.com/package/n ) is for a single, global, system-wide node.
[18:18:35] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:18:50] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[18:19:03] <lidless> so s/var /let /g I gather
[18:19:12] <lidless> thanks, re: nvm
[18:19:37] <stenno> usually you want 'const'
[18:19:39] <lidless> I guess I'll make this document for anyone else coming back after a decade
[18:20:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:20:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:20:18] *** Joins: wroathe (~wroathe@user/wroathe)
[18:28:54] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:29:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:29:59] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[18:30:37] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 240 seconds)
[18:30:55] *** Joins: Axy (~Axy@user/axy)
[18:31:28] <gehn> lidless, publish it on your blog. get ALL THE LIKES! ;)
[18:31:38] <gehn> but seriously, great idea, if you do, post a link here
[18:31:44] <lidless> thanks :) I need a blog lol
[18:32:01] <gehn> a github gist can be a good easily sharable condensed format for that
[18:32:11] <gehn> and free
[18:32:50] <stenno> also gh pages
[18:33:15] <gehn> yeah you could go full on jekyll, but gist is simpler and more straight forward
[18:33:28] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[18:33:34] <lidless> thanks, I got it started https://gist.github.com/jabberwock/96e5b46fe9dfd7729294c6be01462698
[18:34:09] <gehn> if there's enough content to warrant using gh pages, I would go with https://asciidoc-py.github.io/index.html
[18:34:22] *** Joins: fmsd__ (~no@105.157.214.131)
[18:34:37] *** Joins: node123 (~node1@user/node1)
[18:35:58] *** Joins: xsperry (~xs@user/xsperry)
[18:36:01] *** Joins: Axy (~Axy@user/axy)
[18:36:37] *** Quits: fmsd___ (~no@160.177.199.94) (Ping timeout: 240 seconds)
[18:37:52] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[18:38:24] <lidless> true. If I'm going to do this, I may as well do it right and read all the material so I can note the nuances
[18:39:45] *** Quits: Larzen (~textual@S01063497f663ca38.cg.shawcable.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:40:24] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[18:40:33] *** Joins: cantelope (~user@173-27-116-255.client.mchsi.com)
[18:40:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:40:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:40:54] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:26] *** Quits: node123 (~node1@user/node1) (Quit: Client closed)
[18:42:30] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:43:01] * lidless pretends arrow functions don't exist
[18:43:44] <lidless> Do you prefer to type "ys" over "yes"? Use arrow functions
[18:44:22] *** Joins: dmanto (~dmanto@181.110.128.50)
[18:44:43] <lidless> I'd say that in their defense, they might limit memory usage... but then this is JS
[18:45:00] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[18:45:12] <lidless> which I'm getting from "Arrow functions are different—they do not bind their own this but can see the this binding of the scope around them."
[18:45:31] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[18:45:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:46:05] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 256 seconds)
[18:46:16] *** Joins: Axy (~Axy@user/axy)
[18:46:48] <stenno> lidless: arrow functions have lexical scoping and that is usually what you want
[18:47:06] <stenno> lidless: think if `var self = this` terrible pattern back then, its not neccessary anymore
[18:47:25] *** Quits: sam_1 (~sam_1@87.51.251.118) (Ping timeout: 240 seconds)
[18:47:28] <lidless> seems backwards then?
[18:47:40] <stenno> arrow functions are great
[18:47:47] <stenno> dunno what you mean with 'backwards'
[18:48:04] <lidless> like... arrow functions should be what you use when you want to bring in more context, not vice-versa
[18:48:04] <lidless> if it's what is mostly used
[18:48:20] <lidless> pointless debate, but JS
[18:48:21] *** Quits: fmsd__ (~no@105.157.214.131) (Ping timeout: 256 seconds)
[18:48:41] <stenno> do you know what 'lexical scoping' means?
[18:48:50] <stenno> how does that enter into any debate?
[18:49:01] <lidless> loosely, not really
[18:49:44] <lidless> "<stenno> lidless: arrow functions have lexical scoping and that is usually what you want" I interpretted this as "If this is usually what I want then why not implement that in the previous convention?"
[18:50:13] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 265 seconds)
[18:50:13] <stenno> you are asking why javascript didn't have arrow functions from the beginning?
[18:50:34] <stenno> languages improve over time
[18:50:34] <lidless> no, why they chose to one-off the preferable functionality instead
[18:50:42] <stenno> one-off, what?
[18:50:50] *** Joins: iffraff (~quassel@2605:a601:aae0:4a00:ea2e:1067:dcff:241a)
[18:50:56] <gehn> lidless, the "ys" vs "yes" example is specious. it can often be beneficial to reduce verbosity. like anything, there are tradeoffs to both being more verbose and being less verbose
[18:51:09] <iffraff> Hi do people still use jsdoc or is there a newer more popular lib?
[18:51:20] <gehn> but as already mentioned, arrow functions actually have important behavior compared to, well... not arrow functions
[18:51:24] <stenno> back then, when you passed the contexts `this` to e.g. an event handler, you had to use `var self = this` or the like
[18:51:31] <lidless> instead of making function blah(){} not have its own "this" but having arrow functions if you need the function to have its own this
[18:51:33] <stenno> with arrow functions, you don't have to do that anymore
[18:51:48] <stenno> function blah() _has_ its own this
[18:51:56] <gehn> compare: myNumbers.map(x => x * x) vs myNumbers.map(function(x) { return x * x; })
[18:51:58] <stenno> arrow functions are the norm
[18:52:01] *** Joins: han-solo (~hanish@157.44.217.202)
[18:52:09] *** Quits: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:52:11] <gehn> I do find a meaningful difference between those in terms of readability
[18:52:13] <stenno> i don't use any `function` keyword anymore unless i am building a generator
[18:52:16] <gehn> maybe you don't
[18:52:35] <stenno> arrow functions are an improvement to the old `function`
[18:52:38] <lidless> oh, I see. that makes more sense. I'm not a linear thinker so this stuff doesn't always sink in
[18:52:49] <lidless> irccloud is laggy af today and that's not helping
[18:52:56] <stenno> lidless: if you'd just change how `function` works, you would just break the existing web
[18:54:01] <gehn> there may be times when you should *not* use arrow functions, though hopefully if you're lucky those will be rare
[18:54:05] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 265 seconds)
[18:54:13] *** Joins: Axy (~Axy@user/axy)
[18:54:24] <stenno> true
[18:54:31] <stenno> i heard its a common pattern in vue.js
[18:54:33] <gehn> dealing with frameworks that use a "jquery" style paradigm where you expect the current element to be bound to `this` for example
[18:54:49] <gehn> because that's just how jquery works, generally (at least historically)
[18:54:55] <gehn> iirc d3 is also the same or similar
[18:55:34] <stenno> to be fair though, if you had myEl.addEventListener('event', function() { // here `this` is myEl })
[18:55:39] <gehn> I haven't tried vue, but it would be unsurprising to me if something like this is the case in vue
[18:55:45] <lidless> Do arrow functions lower the memory footprint? It seems like a lot less copies are being passed with it
[18:56:11] <gehn> lidless, frankly you shouldn't even begin to worry about memory or cpu
[18:56:22] <stenno> gehn: see https://v1.vuejs.org/guide/events.html
[18:56:26] <gehn> if you actually have amounts of data that would push the limits of either one, maybe JS isn't the right choice
[18:56:35] <gehn> s/data/data and or computation/
[18:57:11] <lidless> screw it, I'm going with linode+znc. IRC Cloud is failing my expectations
[18:57:11] <lidless> gehn: Well yeah, especially with a single threaded language. I'm still wondering the "why"
[18:57:12] *** Joins: salad (~cucumber@188.25.235.85)
[18:57:27] <gehn> lidless, generally speaking, with web applications, you ensure you're never dealing with enough data to be a problem by simply paginating, so then you only ever deal with maybe 10-50 items per page for a "list of things"
[18:57:42] <gehn> lidless, the why of what?
[18:58:18] <lidless> gehn: Like the memory benefits too me would outweigh the trivial change in readability, but that's not why it's there
[18:58:32] <gehn> there are probably some rare few cases where memory and or cpu usage could be massive yet JS is still a reasonable choice, an online WebGL 3D video game for example
[18:58:36] <lidless> And also - I have pushed the limits :/
[18:58:43] <gehn> or if you were e.g. trying to create photoshop/premier as a web app
[18:59:18] <gehn> otherwise, I can't think of many use cases that would mean worrying about JS performance would even come up
[18:59:50] <gehn> also, remember the sage words of our lord and savior Donald Knuth who so sayeth unto thee "premature optimization is the root of all evil"
[19:00:32] *** Quits: han-solo (~hanish@157.44.217.202) (Read error: Connection reset by peer)
[19:00:38] *** Joins: zebrag (~chris@user/zebrag)
[19:00:47] <lidless> gehn: the map here: https://disneyworld.disney.go.com/destinations/magic-kingdom/
[19:00:57] <lidless> originally that was pushing JS to its absolute limits
[19:01:09] <lidless> no idea how its done now
[19:01:48] <gehn> well, either way, until you A) encounter actual performance problems and subsequently B) do profiling and benchmarking etc, it's ill advised to worry about performance problems
[19:01:52] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:02:12] <lidless> that seems contrary to "use arrow functions" though
[19:02:20] <gehn> how so?
[19:02:20] <stenno> wtf?
[19:02:30] *** Joins: han-solo (~hanish@user/han-solo)
[19:02:31] <lidless> stenno: dude you're taking this personally. I'm just talking
[19:02:38] <gehn> you'll be guessing, and most of your guesses will be wrong. so without a way to measure (aka profiling/benchmarking) you will be wasting your time.
[19:02:41] <lidless> if I can't like type my thoughts without upsetting you then I won't
[19:02:42] <stenno> i am not taking it personally
[19:02:46] <stenno> i am not upset
[19:02:50] <lidless> ok good
[19:02:57] <gehn> I mean, you can avoid his advice, but I'll give a very high probability you'll end up wasting your time
[19:03:19] <gehn> also you don't really get a high degree of control over what JS does with memory for example
[19:03:24] <lidless> so => is for readability, not performance?
[19:03:31] <gehn> yes
[19:03:38] <lidless> but it seems to have a performance benefit by not having its own "this"
[19:04:34] <lidless> I guess for me it's tough to grasp that being added because it's prettier and nothing else
[19:04:53] <gehn> where did you get that idea?
[19:04:58] <gehn> it has a this
[19:05:17] <gehn> but the mechanics of what `this` will be are different between arrow and regular functions
[19:05:36] <lidless> https://eloquentjavascript.net/06_object.html
[19:05:38] <lidless> | https://eloquentjavascript.net/06_object.html
[19:05:49] <lidless> oops:  | Arrow functions are different—they do not bind their own this but can see the this binding of the scope around them.
[19:06:38] *** Joins: kalen- (~kalen@gateway/vpn/pia/kalen)
[19:07:01] *** Joins: tlf_other (~tlf@mobile-166-176-249-150.mycingular.net)
[19:07:09] <lidless> So "this" isn't being copied (in some arbitrary way) into the arrow function
[19:07:23] <lidless> As in function(_this){} etc.
[19:07:33] <gehn> benchmark and profile
[19:07:42] <gehn> otherwise you don't have any business discussing this
[19:07:56] <gehn> you're just guessing
[19:07:59] <lidless> that's kind of rude. I'm pasting quotes from the document you told me to look at
[19:08:01] *** Quits: kalen (~kalen@gateway/vpn/pia/kalen) (Read error: Connection reset by peer)
[19:08:03] <lidless> and asking questions.
[19:08:04] <ljharb> lidless: every function binds this, but arrow functions don’t.
[19:08:09] *** kalen- is now known as kalen
[19:08:26] <ljharb> lidless: so you can’t avoid shadowing this in most functions, but in arrow functions you *cant* shadow it.
[19:08:39] <lidless> that seems more memory friendly to me
[19:08:49] <gehn> lidless, I mean, you have business doing whatever it is you want to do, you do you. that statement is just a hyperbolistic expression
[19:09:01] *** Quits: tlf (~tlf@mobile-166-176-249-150.mycingular.net) (Ping timeout: 252 seconds)
[19:09:12] <gehn> does it say in that document there's a meaningful performance impact here?
[19:09:20] <lidless> I think I'm being misunderstood but I don't think my thoughts are out of place
[19:09:27] <gehn> does it support that claim with evidence from profiling and benchmark results?
[19:09:35] <lidless> no. intuition tells me that less copies means less memory
[19:09:49] <gehn> ok, like I said earlier you're guessing
[19:09:58] <lidless> intuiting
[19:10:10] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[19:10:15] <gehn> intuition is notoriously fickle and unreliable in most areas
[19:10:23] <gehn> which is why you need to benchmark and profile
[19:10:28] <lidless> that statement is so much worse than guessing
[19:10:37] <gehn> which statement?
[19:10:43] <lidless> <gehn> intuition is notoriously fickle and unreliable in most areas
[19:11:02] <lidless> Unless the JS engine is adding some crap ton of extra data in leu of the "this" copy
[19:11:36] <lidless> I have to assume a reasonable amount of sanity for the authors of the engine
[19:11:38] <lidless> that's not guessing
[19:11:45] <gehn> no you're still guessing
[19:11:48] <gehn> here's why
[19:12:58] <gehn> benchmark and profile. maybe there is a difference. if that difference is negligible then there would be no performance gain to be had by choosing one or the other
[19:13:08] <gehn> so you're free to choose the one that makes the most semantic sense in that context
[19:13:33] <gehn> and you also don't end up wasting your time e.g. changing everything in a given large code base when that takes weeks to do and yields no benefit
[19:13:56] <gehn> and you're not living in a world of your own imagination and superstition and "intuition", you're living in a world based on evidence
[19:14:28] <gehn> it's find to wonder or make the hypothesis you're making. but you've done that. now you need to test the hypothesis, which means benchmarking and profiling
[19:14:29] <lidless> Alrighty. I'm not going to buy into the "don't be concerned about performance" tbh
[19:14:34] <gehn> s/find/fine/
[19:15:15] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[19:15:25] <lidless> Me guessing that arrow functions serve more than readability maybe was hopes because I think they look kind of silly. If the only difference is they don't have their own "self.this" then I have no idea why anyone would use them, if performance is never a concern
[19:15:26] <gehn> well, you really probably shouldn't be. but the point is, even if you think you should, don't guess, benchmark and profile, otherwise you're demonstrably not *actually* concerned with performance
[19:15:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:16:02] <lidless> Are you familiar with this? https://accidentallyquadratic.tumblr.com/
[19:16:36] <lidless> I feel that JS performance is especially important because it offloads work onto the client in the case of websites
[19:16:50] <lidless> but I've also had the displeasure of pushing it beyond its intended purpose. at least 10 years ago
[19:17:47] <lidless> Specifically to what you said about performance need not be a concern... I'm curious why you say that
[19:18:46] <gehn> because 99% of average web apps and JS use cases in the world are not the edge cases where JS performance matters
[19:18:53] <gehn> maybe you are among the 1% where performance matters
[19:19:02] <gehn> but even if you are, the point is not to *prematurely* optimize
[19:19:10] <lidless> because it goes against most of what I've learned and implemented
[19:19:14] <gehn> meaning don't do what you're doing: guessing that x will have effect y
[19:19:16] <ljharb> Doesn’t mean it’s wrong
[19:19:21] <ljharb> perf is the least important thing.
[19:19:26] <gehn> make the hypothesis, then *test* the hypothesis
[19:19:59] <ljharb> lidless: big O requires very large n to be relevant. Most web apps have tiny n
[19:20:21] <ljharb> lidless: meaning, the slowest program you can write in big O terms is still instantaneous compared to i/o delays
[19:20:52] <gehn> story time: you are Big Video Game Corp. you make Molerat Simulator 2000. you release Molerat Simulator 2001 and performance suddenly drops in half. all customers very angy.
[19:20:57] <gehn> you have two options
[19:21:13] *** Quits: henry40408 (~henry4040@112-104-114-158.adsl.dynamic.seed.net.tw) (Quit: The Lounge - https://thelounge.chat)
[19:21:20] <lidless> "arrow functions improve readability" just wasn't true to me. that's obviously subjective. I was wondering what else they do
[19:21:25] <gehn> option 1: guess, release a new version without testing your assumptions because you are a genius. problems still the same or even worse. customer extra angy.
[19:21:33] <ljharb> lidless: they omit binding `this`
[19:21:39] <gehn> option 2: guess, test assumption, rinse repeat until you actually fix the problem. customer less angy.
[19:21:40] <ljharb> lidless: and they can’t be newed
[19:22:01] <gehn> which one of those two approaches do you feel realistically demonstrates, through action, that you "actually care" about performance
[19:22:10] <lidless> gehn: You don't need to speak in anecdotes there. I've been there
[19:22:15] <ljharb> lidless: arrow functions’ primary intention is to replace inline callbacks. They largely objectively improve readability in most of these cases. Otherwise, it’s very subjective, sure.
[19:22:22] <lidless> those stats look like guesses
[19:22:23] <lidless> I don't need to. I can intuit that an arrow function will, or "should", use less memory
[19:22:23] <lidless> "arrow functions improve readability" just wasn't true to me. that's obviously subjective. I was wondering what else they do
[19:22:53] <lidless> omg. I'll be back when IRC Cloud doesn't do what it's doing. It's bufffering like a solid 2 minutes of my typing
[19:22:55] <gehn> lidless, you can intuit anything, but if you don't test, you don't know
[19:23:00] *** Joins: henry40408 (~henry4040@112-104-114-158.adsl.dynamic.seed.net.tw)
[19:23:07] <gehn> once you start testing, you'll realize exactly how often you're wrong
[19:23:09] <lidless> gehn: totaly subjective. your experience with intuition isn't mine
[19:23:12] <gehn> sometimes you'll be right
[19:23:29] <ljharb> lidless: arrow functions don’t use any different memory than anything else, and worrying about memory in js is a category error
[19:23:33] <gehn> you're correct, my experience with intuition is not the same as yours
[19:23:51] <gehn> I would intuit that the difference is I test my intuitions and assumptions and hypotheses and you don't
[19:24:04] <ljharb> i understand you were taught to care about such things, but it’s still largely wrong to do so in js.
[19:24:08] <systemfault> lidless: You can't assume anything, you're not writing C for a specific compiler, you're writing JavaScript for different interpreters/jit compilers. Even if you find out that X uses less memory on engine Y... a new version of engine Y may eventually break that assumption
[19:24:27] <lidless> I seriously don't need to be ganged up on :P
[19:24:33] <lidless> I get that it's super tempting
[19:25:15] <ljharb> lidless: I’m not really trying to, sorry about that. I’m just taking a different angle than gehn is
[19:25:27] <lidless> we're all here still. talking about this for god knows what reasons, so my curiosity must be somewhat interesting
[19:25:37] <ljharb> or we all have nothing better to do :-p
[19:25:44] <lidless> lol for sure
[19:26:33] <lidless> gehn: I don't have enough energy to profile it. this all started with me typing /me pretends arrow functions don't exist
[19:26:43] <lidless> it took its own personality
[19:27:00] <gehn> lidless, that's fine and understandable
[19:27:04] <lidless> <3
[19:27:24] <gehn> just try your best to be on the right side of Dunning Kruger
[19:27:28] <ljharb> that pretending doesn’t hold up if you ever have to look at someone else’s code tho :-)
[19:27:30] <gehn> it's fine to make nearly any hypothesis
[19:27:40] <lidless> sigh
[19:27:53] <lidless> Can you not be a passive aggressive ass?
[19:27:58] <lidless> gehn
[19:28:12] <lidless> <gehn> just try your best to be on the right side of Dunning Kruger
[19:28:14] <lidless> like, really dude?
[19:28:36] <lidless> And it's so hypocritical in that context
[19:28:40] <gehn> I mean, assuming you can intuit that x implies y in this context, without testing that assumption puts you squarely on the wrong side of DK
[19:29:30] <lidless> I more often than not find I am much smarter than I think I am.
[19:29:55] <lidless> but I don't think linearly
[19:30:06] *** Quits: Larzen (~textual@S01063497f663ca38.cg.shawcable.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:30:32] <gehn> I have written my own benchmarking and profiling frameworks for C and C++ and dealt heavily with real world performance optimization
[19:30:41] <gehn> I also have over a decade of experience with JS
[19:30:48] *** Joins: spreadsheet (~shang@user/spreadsheet)
[19:30:59] *** Quits: spreadsheet (~shang@user/spreadsheet) (Client Quit)
[19:31:02] <gehn> I actually do what I'm saying you should do. And I've seen exactly how often I'm wrong, which is actually most of the time.
[19:31:11] <lidless> You seem "If I don't see it, it's not real". That's just one way of thinking
[19:31:17] <gehn> so that puts me squarely on the right side of Dunning Kruger IMO as far as this conversation goes
[19:31:32] <gehn> other areas of life? I'm sure I'm often on the wrong side of Dunning Kruger
[19:31:43] <lidless> okbye
[19:32:43] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:34:25] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[19:36:37] <gehn> we don't see electromagnetism (in the general case, not counting lightbulbs or something by proxy)
[19:36:57] <gehn> but we have ways to test it and see evidence of it, which led us to being able to make light bulbs, and computers
[19:37:00] *** Joins: harpia (~harpia@2804:2aec:205:1400:1a8b:e47a:9188:7f77)
[19:37:13] <gehn> we don't see elecrtrons, but your iphone still shows you cat pictures from reddit
[19:37:19] <gehn> electrons*
[19:37:29] <lidless> I have no idea what you're trying to convince me of
[19:37:33] <lidless> i want to be right. you're right
[19:37:41] <lidless> *You want to be right
[19:37:54] *** Joins: voltage_ (voltage@user/voltage)
[19:38:28] <gehn> you characterized me in a given way, I'm noting how this characterization is disingenuous
[19:38:31] <lidless> in one hand you're telling me that arrow functions contain less context, because they don't have their own self.this but rather reference the "this" of the outer scope
[19:38:41] <lidless> but I need to profile to make sure that's less memory
[19:38:53] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[19:39:09] <gehn> I'm only really telling you one thing: make any hypothesis you like as long as you test that hypothesis
[19:39:24] <gehn> this is computer programming, not religion or philosophy
[19:40:11] <lidless> I'm not going to weigh an apple that you took a bite out of to see if it weighs less :P
[19:40:12] <gehn> could there be aliens? yes in fact there almost certainly are. will we ever be likely to contact them due to the vastness of space and limitations of physics (speed of light etc), quite probably not
[19:40:27] <lidless> wrong side of DK indeed
[19:40:47] <gehn> not really, I'm not stating anything for a fact, just a probability
[19:41:00] <lidless> will we ever be likely to contact them due to the vastness of space and limitations of physics
[19:41:03] <gehn> I could be proven wrong. millions of people would love to be proven wrong. so far the evidence is slim.
[19:41:28] <lidless> dude physics exist in every dimension :P
[19:42:03] <lidless> consciousness is how we do anything outside of the physical. I can get super off topic
[19:42:15] <gehn> the point is that in such philosophical discussions, a certain amount of untested conjecture is the norm
[19:42:21] <gehn> this is not that, this is computer programming
[19:42:24] <lidless> my point is you are stating with conviction something you have no idea about, like you're accusing me of doing
[19:42:34] <gehn> there are easy ways to test this stuff in computer programming
[19:42:58] <lidless> again - if you take a bite out of apple and then you tell to weigh it and be sure... I'm going to give you resting bitch face
[19:43:00] <lidless> like I'm doing
[19:43:07] <gehn> how do you know it was conviction? that's your own editorialization
[19:43:10] <gehn> and you're missing the point
[19:43:23] <gehn> in such domains, conjecture is the norm. this is not aliens, this is computer programming.
[19:43:56] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[19:44:30] *** Parts: lidless (lidless@tinside.irccloud.com) ()
[19:44:32] <gehn> lidless, the apple analogy falls short because most things in computer programming performance are not as commonplace or simplistic
[19:45:02] <gehn> like we all probably know from life experience by the time we're adults that if someone eats half my apple I have less of an apple to eat myself
[19:45:19] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:45:27] <stenno> apple analogy doesn't fall far from the trunk
[19:45:51] *** Joins: PenguinMan98 (~PenguinMa@65.153.38.250)
[19:45:59] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:45:59] <gehn> that's something we've gained through experience, which is to say evidence, which is to say testing (be it as a willing participant or not: your sibling eats half your apple, gives it to you, you feel it weighs less)
[19:46:26] <gehn> that's empirical evidence most of us have gathered and can assume others have gathered, aka "common knowledge"
[19:46:32] <gehn> nearly everything in programming is not this way
[19:49:12] <systemfault> You could simply have said: Want to profile the memory cost of functions vs arrow functions? HAVE FUN BRO. :)
[19:49:16] *** Quits: harpia (~harpia@2804:2aec:205:1400:1a8b:e47a:9188:7f77) (Quit: harpia)
[19:49:46] <gehn> but that wouldn't fulfill my need to be passive aggressive, now would it
[19:49:48] <PenguinMan98> This may not be the best place for this question, but here goes: Does anybody know a command on MAC that can checksum the contents of files in a directory without also checking their last modified dates?
[19:50:19] <systemfault> Just look at his document, you know the guy has a very high self-esteem... He felt it was really important for him to mention his former employers to validate himself.
[19:50:19] <gehn> PenguinMan98, by MAC do you mean MAC address? or Apple Mac OS?
[19:50:31] <PenguinMan98> I want to know if any of the file contents have changed. MacOS
[19:50:37] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:50:41] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[19:50:43] <han-solo> "Directed by Robert B. Weide"
[19:51:13] <gehn> I wasn't aware that md5sum took in to account modified date?
[19:51:14] <ljharb> PenguinMan98: you can do that manually
[19:51:38] <gehn> that would seem counter to the usefulness of md5sums for checking veracity of files after download for example
[19:51:38] <PenguinMan98> I found a fun command called mtree, but it gives me false positives if the file is identical, but has a newer last modified date.
[19:52:10] *** Parts: tlf_other (~tlf@mobile-166-176-249-150.mycingular.net) ()
[19:52:24] <systemfault> PenguinMan98: I don't believe any file checksum utility is going to care about file metadata
[19:52:37] <systemfault> (Not stored in the file..)
[19:52:51] <PenguinMan98> I didn't either; but this one does. So I thought I'd ask people who know more than I
[19:53:05] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[19:53:21] <PenguinMan98> so, md5sum?
[19:53:38] <systemfault> Or shasum... pick your poison
[19:53:59] <PenguinMan98> I was looking at shasum, yeah
[19:54:10] <PenguinMan98> I just wanted to make sure they didn't care about metadata.
[19:54:29] <PenguinMan98> don't wanna make the same mistake twice
[19:58:41] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:58:57] *** Joins: vladoski (~vladoski@host-87-4-98-32.retail.telecomitalia.it)
[19:59:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:59:37] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:00:27] *** Joins: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249)
[20:02:14] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[20:03:01] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 240 seconds)
[20:03:07] *** Joins: Axy (~Axy@user/axy)
[20:08:51] *** Joins: Naan` (~Naan@user/naan)
[20:09:58] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 265 seconds)
[20:11:36] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Ping timeout: 256 seconds)
[20:12:52] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 265 seconds)
[20:14:48] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[20:15:44] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[20:16:00] *** Joins: tmm88 (~tmm88@user/tmm88)
[20:16:44] <tmm88> https://www.toptal.com/developers/hastebin/vocavanije.js i installed eslint on visualstudio code and on my local project. i was able to fix a few things, but still having some problems dealing with this
[20:17:03] <tmm88> i fixed a few suggestions that it gave me on the code
[20:17:15] <tmm88> most at the level of indentation
[20:17:54] <tmm88> but now i am not being able to fix the overall thing
[20:18:15] <tmm88> it's giving me an error on the array
[20:18:37] <tmm88> if someone can help me to fix this i would be thankful. cheers
[20:19:36] <hassoon> toptal ?
[20:19:47] <hassoon> you work for that company ?
[20:20:28] *** Joins: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[20:21:02] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:21:20] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:23:30] *** Joins: onosendi (~onosendi@user/onosendi)
[20:23:37] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:23:51] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:24:46] <PenguinMan98> Cool, I figured out how to get mtree to work
[20:25:29] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[20:25:48] <PenguinMan98> mtree -c -k sha256digest,mode,uid,uname,size -p **directorytosearch** > **file**
[20:26:18] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[20:26:35] <PenguinMan98> This way only considers file type, user, size, and contents
[20:26:50] <PenguinMan98> and permissions
[20:26:54] *** Quits: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef) (Remote host closed the connection)
[20:27:18] *** Joins: stagas (~stagas@2a02:587:c40e:fc00:9569:d717:809f:bfef)
[20:28:28] *** Joins: Rockwood (~Rocky@user/rocky)
[20:29:19] *** Joins: doji (~doji@user/doji)
[20:29:37] *** Quits: doji (~doji@user/doji) (Remote host closed the connection)
[20:30:40] *** Joins: SteveR53 (~SteveR@103.215.168.1)
[20:32:40] <PenguinMan98> https://www.screencast.com/t/eI6KemAah
[20:33:06] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:33:22] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[20:36:11] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:37:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:39:00] *** Quits: vladoski (~vladoski@host-87-4-98-32.retail.telecomitalia.it) (Quit: Textual IRC Client: www.textualapp.com)
[20:43:53] *** Quits: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: idle_rain)
[20:44:20] *** Joins: sam_1 (~sam_1@b29bcad8.rev.stofanet.dk)
[20:44:22] <PenguinMan98> I ended up switching uid for gname because I don't care about uid if I'm checking uname and I want to know if the group has changed.
[20:46:31] *** Joins: doji (~doji@user/doji)
[20:47:49] <tmm88> hassoon: no, but i tried to work for them in the past and they screwed me up at least one time
[20:48:35] *** Quits: sam_1 (~sam_1@b29bcad8.rev.stofanet.dk) (Ping timeout: 250 seconds)
[20:48:59] *** Joins: sam_1 (~sam_1@b29bcad8.rev.stofanet.dk)
[20:49:15] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[20:52:04] *** Joins: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9)
[20:52:09] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[20:53:21] *** Quits: sam_1 (~sam_1@b29bcad8.rev.stofanet.dk) (Ping timeout: 250 seconds)
[20:57:31] *** Quits: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9) (Quit: Leaving)
[20:58:31] *** Joins: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz)
[21:04:55] <banana_> enron ask why
[21:05:38] <banana_> why do we need debt off our books
[21:07:10] *** Quits: PenguinMan98 (~PenguinMa@65.153.38.250) (Quit: Client closed)
[21:07:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:07:49] *** Quits: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz) (Ping timeout: 252 seconds)
[21:10:27] *** Joins: AtomicInteger (~primamate@p200300ee17196b00fc1d92358d5e9098.dip0.t-ipconnect.de)
[21:11:59] *** Joins: PenguinMan98 (~PenguinMa@65.153.38.250)
[21:14:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:23:25] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[21:24:29] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[21:25:09] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[21:28:01] *** Joins: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz)
[21:30:39] <onosendi> Seems `react-scripts start` is broken with the newest version of Node. Anyone else using `--openssl-legacy-provider` flag as a workaround?
[21:30:55] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 252 seconds)
[21:32:11] <systemfault> Don't use the newest version of node :p (I still wonder why people still do that...)
[21:32:45] *** Quits: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz) (Ping timeout: 252 seconds)
[21:32:46] <onosendi> systemfault: you stay with LTS?
[21:32:52] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Remote host closed the connection)
[21:33:02] <systemfault> That what I do, unless latest has some super killer feature I want "now"
[21:33:33] <systemfault> LTS is usually just a version behind, it's not THAT bad
[21:34:30] <PenguinMan98> I had some issues with Gulp and after reading a bunch of Stack Overflow and other help forum posts, the consensus was, never use an odd numbered major build of node. Stick to the even ones.
[21:35:12] <PenguinMan98> Upgrading our node from 13 to 14 fixed my Gulp issues
[21:35:44] <PenguinMan98> (It also really freaked me out because nothing broke. That almost never happens!)
[21:35:49] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[21:36:40] <systemfault> Most of the time, when you have issues with NodeJS latest, it's because of native modules that haven't been updated yet.
[21:37:56] <onosendi> PenguinMan98: Never use odd number version builds? I haven't heard that one before. Is that a new semver thing? :P
[21:38:22] <PenguinMan98> *shrugs* What do you get when you cross an elephant and a rhinocerous?
[21:38:23] <systemfault> There are _a_lot_ of native modules still written the "good old way" (C++ + v8 + NaN + libuv) and not using NAPI
[21:39:09] <systemfault> onosendi: Version with odd number won't become LTS
[21:39:22] <onosendi> systemfault: Ah, gotcha.
[21:39:30] *** Joins: sbrothy (~sbrothy@192038128060.mbb.telenor.dk)
[21:39:55] *** Joins: Harlin (~DonQixote@75-163-180-14.clsp.qwest.net)
[21:41:34] <PenguinMan98> Yeah, I thought that was a given. Even numbered builds are LTS
[21:41:51] *** Joins: gehn1 (~gehn@user/gehn)
[21:42:19] <PenguinMan98> (That's a node-specific policy FYI)
[21:42:58] <systemfault> Event numbered are not LTS "initially", it happens after a few minor versions
[21:43:02] <systemfault> *Even
[21:44:37] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 240 seconds)
[21:46:06] <Rockwood> systemfault, o/
[21:46:14] <systemfault> Hi!
[21:49:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:49:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:49:10] *** Joins: wroathe (~wroathe@user/wroathe)
[21:49:11] <Donitz> so should I name all my module files .mjs now
[21:49:24] *** Joins: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9)
[21:49:26] <Donitz> since python is so insistent on using the wrong mime type for .js files
[21:50:02] <Donitz> I'm tired of making custom python web servers so I can override it
[21:50:05] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:50:07] *** Quits: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9) (Remote host closed the connection)
[21:50:24] <systemfault> "depends"
[21:50:29] <PenguinMan98> *gasp!* You mean python isn't the most perfectest of perfect programming languages!?!?!?!
[21:50:42] <systemfault> It's pretty shit...
[21:50:42] <Donitz> I just think it's dumb the way to broke the http.server
[21:50:48] <Donitz> the way they*
[21:51:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:51:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:51:17] <PenguinMan98> systemfault: You and I know that, but the people who use it are really hard to convince.
[21:52:22] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: WeeChat 3.3)
[21:52:35] <PenguinMan98> It's not even all that fast either
[21:52:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:52:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:54:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:55:23] <systemfault> PenguinMan98: I understand them, Python has some things in its ecosystem that simply don't exist in JS
[21:56:00] <systemfault> Pandas/SciPy/NumPy...etc
[21:56:22] *** Joins: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9)
[21:59:54] *** Quits: v3gajerusalem (~v3ga@2600:1702:ad0:3b90::40) (Quit: WeeChat 3.3)
[22:00:23] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[22:01:37] *** Quits: SteveR53 (~SteveR@103.215.168.1) (Quit: Client closed)
[22:01:37] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[22:02:22] <fweht> i know already that some people prefer function notation while others prefer arrow notation, but going through some example app of the new remix framework, i noticed they use function notation for functional react components and arrow notation else, is there a reason for this pattern?
[22:05:37] <onosendi> fweht: in that case it really doesn't matter, it's just personal preference.
[22:05:49] <fweht> onosendi: thank you!
[22:05:53] <PenguinMan98> With arrow notation, there is an implicit .bind(this). Perhaps they didn't want that binding?
[22:06:21] <fweht> hmm, no this used here
[22:06:39] *** Quits: Larzen (~textual@S01063497f663ca38.cg.shawcable.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:06:59] *** Joins: Talon_ (Talon@172.77.142.59)
[22:07:50] <PenguinMan98>  AFAIK, that's the only substantive difference between the two.
[22:08:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:08:41] *** Quits: Talon (~Talon@172.77.142.59) (Ping timeout: 252 seconds)
[22:10:05] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[22:11:32] *** Quits: PenguinMan98 (~PenguinMa@65.153.38.250) (Quit: Client closed)
[22:13:05] *** Joins: PenguinMan98 (~PenguinMa@65.153.38.250)
[22:16:01] *** Quits: sbrothy (~sbrothy@192038128060.mbb.telenor.dk) (Quit: leaving)
[22:19:16] <ljharb> fweht: it does matter, and components should be normal functions
[22:19:21] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:19:29] <ljharb> arrow functions don't have an explicit name, only sometimes an inferred one. components should always be named.
[22:19:36] *** Quits: Larzen (~textual@S01063497f663ca38.cg.shawcable.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:19:46] <ljharb> so for debugging and clarity, components should be normal functions.
[22:20:15] <PenguinMan98> You can name an arrow function easily enough
[22:20:16] <fweht> ljharb: ah, but is `export let foo = () => {}` not assigning a name?
[22:20:21] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[22:20:24] <PenguinMan98> Yeah, that.
[22:20:44] <fweht> i mean they *do* export also the arrow functions
[22:21:35] <ljharb> fweht: no, it is not
[22:21:47] <ljharb> fweht: the arrow function will get an INFERRED name of "foo". but that is not an explicit name.
[22:21:55] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:49a2:b187:a83c:8b86) (Ping timeout: 265 seconds)
[22:22:01] <PenguinMan98> What's the difference?
[22:22:06] <ljharb> fweht: and if you make the mistake of using `let`, then you could `foo = 3` and suddenly the function can't refer to itself anymore
[22:22:17] <ljharb> PenguinMan98: for one, name inference isn't always intuitive - it won't work sometimes you expect it will
[22:22:23] <ljharb> PenguinMan98: especially with components
[22:22:36] <ljharb> PenguinMan98: imagine you have a react component, with a name, that's an arrow. now memoize it?
[22:22:44] <fweht> ljharb: i know, i would do const but they said in their video that one of the persons behind remix prefers let to save two characters :D
[22:22:53] <ljharb> suddenly you have `const Foo = React.memo(() => {})` and the name "Foo" is lost forever
[22:23:02] *** Joins: Tobbi_ (~Tobbi@2a02:8108:1240:48ec:9def:63cb:61cc:904f)
[22:23:03] <ljharb> fweht: sure but those people's opinion about code style are terrible
[22:23:11] <ljharb> fweht: follow the airbnb guide, basically
[22:23:18] <fweht> alright
[22:23:31] <ljharb> PenguinMan98: however if you had `function Foo() {}`, then `React.memo(function Foo() {})` keeps the name
[22:23:44] <fweht> but i was really just curious why they use the two styles together, this is something i think i didnt see before
[22:23:49] *** Quits: AtomicInteger (~primamate@p200300ee17196b00fc1d92358d5e9098.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:24:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f5d2:447c:d749:7070) (Killed (NickServ (GHOST command used by Tobbi_!~Tobbi@2a02:8108:1240:48ec:9def:63cb:61cc:904f)))
[22:24:02] <fweht> ok!
[22:24:06] <fweht> that super interesting, thanks!
[22:24:10] <onosendi> ljharb: interesting
[22:24:25] *** Tobbi_ is now known as Tobbi
[22:24:26] <ljharb> implicitness is bad
[22:24:34] <ljharb> function name inference is implicit, thus, relying on it is bad
[22:24:37] <PenguinMan98> But, if you did const Foo = React.memo... then how did 'Foo' get lost?
[22:24:56] <ljharb> n> const A = () => {}; const B = Object(() => {}); [A.name, B.name] @ PenguinMan98
[22:24:58] <jellobot> PenguinMan98, [ 'A', '' ]
[22:25:02] <ljharb> PenguinMan98: because that's how name inference works
[22:25:09] <ljharb> PenguinMan98: it *can not possibly* infer the name across a function call
[22:25:25] <ljharb> PenguinMan98: it only works in an extremely limited syntactic set of scenarios. which ends up being wildly unintuitive for people.
[22:25:43] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[22:25:45] <ljharb> the places it works is intuitive; but that intuition makes everyone think it WILL work in a bunch of other places where it doesn't.
[22:25:52] <ljharb> which means the feature itself is harmful and should never have existed
[22:25:53] *** Joins: AtomicInteger (~primamate@5.180.62.214)
[22:26:27] <ljharb> and by internally do you mean in the spec, or in each individual implementation all of which are different
[22:26:34] <ljharb> (oops, ignore that last comment)
[22:26:44] *** Joins: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz)
[22:27:34] <PenguinMan98> So, you advise against using arrow functions?
[22:28:05] <systemfault> That's not my conclusion from reading what was said.
[22:28:19] <systemfault> The conclusion is... use "classic" functions for React components.
[22:28:25] *** Quits: salad (~cucumber@188.25.235.85) (Quit: salad)
[22:28:37] *** Joins: fmsd (~no@105.155.205.213)
[22:28:56] <PenguinMan98> But he said the feature itself (which in context I believe is arrow functions) is harmful and should never have existed
[22:29:18] <ljharb> PenguinMan98: arrow functions are fine. function name inference is not.
[22:29:41] <ljharb> PenguinMan98: arrow functions were designed to be used for inline callbacks. that's where they're best used. they can also be used elsewhere, but should be used sparingly, and never for react components
[22:29:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[22:30:23] <PenguinMan98> So the syntax of `const foo = () => {}` is what you were referring to
[22:30:35] <devslash> ideally, you dont use react at all....
[22:30:37] <systemfault> Arrow functions are awesome, it would suck if I still had to do .bind(this) everywhere for my callbacks.
[22:31:02] <PenguinMan98> I've done my time in react app. I do like it.
[22:31:26] <PenguinMan98> I think I'd like to try building an app with sveldt
[22:31:45] <ljharb> PenguinMan98: the syntax is fine *when the name doesn't matter*
[22:31:48] <devslash> PenguinMan98, just wondering. Have you used Angular at all ?
[22:32:00] <ljharb> PenguinMan98: when the name doesn't matter, it's helpful to infer the name. when the name does matter, use a normal function
[22:32:06] <PenguinMan98> Funnily enough, no. Even though I was hired once to be a manager of an NG appl
[22:32:07] <ljharb> devslash: react is great, and there's nothing better to use atm
[22:32:09] *** Quits: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz) (Ping timeout: 252 seconds)
[22:32:21] *** Joins: fmsd__ (~no@196.74.28.114)
[22:32:42] <devslash> oh sorry... I didn't realize that I wandered into the Church of React....
[22:32:42] <systemfault> Angular is good for Java programmers who are too stupid to learn another language
[22:32:55] <devslash> not true...
[22:32:56] <ljharb> systemfault: you already said "java programmers"
[22:33:10] <ljharb> devslash: angular's trash
[22:33:20] <devslash> agree to disagree
[22:33:30] <ljharb> i don't agree on that, no
[22:33:31] <onosendi> ljharb: so which would you opt for here? https://dpaste.org/7fdG
[22:33:37] <devslash> there are many ways which I feel Angular is far superior after having used both
[22:33:40] <PenguinMan98> Angular struggles when you have a lot of information on the page. 2-way binding can really bog you down if you don't keep your interfaces clean.
[22:33:47] <ljharb> devslash: stockholm syndrome is a thing
[22:33:58] <systemfault> devslash: Angular is not JavaScript... so let's start with that. Then Angular picks all the Java crap, DI containers, RxJS... classes and decorators everywhere...
[22:34:13] <ljharb> onosendi: tbh neither? i'd just do an inline `.sort((a, b) => a - b)`
[22:34:17] <systemfault> So, you're back to writing Java-style applications... using TypeScript, weee
[22:34:25] <EdFletcher> Can anyone point me to the MDN docs or spec link that discusses the implicit binding onto `this` for arrow functions?
[22:34:34] <systemfault> Oh, and BTW... I've use both Angular and AngularJS... so I know.
[22:34:36] <ljharb> EdFletcher: there is no binding onto `this` for arrow dunctions
[22:34:37] *** Quits: fmsd (~no@105.155.205.213) (Ping timeout: 240 seconds)
[22:34:37] <systemfault> used
[22:34:40] *** Joins: FoodMan (~glucose@user/foodman)
[22:34:47] <Rockwood> Uncaught (in promise) TypeError: setUser is not a function
[22:34:49] <ljharb> EdFletcher: it's every OTHER kind of function that implicitly binds `this`. arrow functions don't, which is why it's lexical
[22:35:10] <PenguinMan98> That's not what I was taught
[22:35:13] <EdFletcher> ljharb: I didn’t think so but the discussion above someone said they do, so I’m confused. Or misread.
[22:35:13] <systemfault> Rockwood: Don't paste errors without context....
[22:35:36] <ljharb> EdFletcher: that person was confused probably
[22:35:44] <PenguinMan98> That's often the case
[22:35:55] <onosendi> ljharb: the point of those functions was to see if you'd use a named, or arrow function for sort1/sort2 :P
[22:35:56] <ljharb> PenguinMan98: what were you taught
[22:36:01] <EdFletcher> sorry then for adding even more confusion, thanks for the clarification ljharb!
[22:36:09] <ljharb> np
[22:36:13] <ljharb> onosendi: lol i'd need a better example then
[22:36:16] <systemfault> I just personally thing of arrow functions as being "transparent" to "this"...
[22:36:18] <Rockwood> anyway good night cya
[22:36:21] <Rockwood> tc all
[22:36:31] <systemfault> *think... (I can't write properly today)
[22:36:37] *** Quits: phenom (~primus@user/phenom) (Ping timeout: 240 seconds)
[22:36:39] <systemfault> Rockwood: GN
[22:36:44] <Rockwood> ty
[22:36:50] <PenguinMan98> I was taught that a regular function has 'this' set by javascript and depending on context that can be different things.  An arrow function has an implicit .bind(this) that ties the arrow function to the context it was created in.
[22:37:10] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:37:17] <onosendi> ljharb: https://dpaste.org/aOvB :P
[22:37:41] <ljharb> PenguinMan98: then whoever taught you that used a more confusing mental model
[22:37:46] <ljharb> PenguinMan98: the first part is right
[22:37:52] *** Joins: fmsd___ (~no@196.74.28.114)
[22:37:56] *** Joins: dev4449 (~dev4449@212.154.23.106)
[22:38:09] <ljharb> PenguinMan98: and it's not actually distinguishable whether it's the second part as you said, or as i said. but it's simpler the way i said it, and that's also what the spec says.
[22:38:16] <ljharb> systemfault: yes, that's right
[22:38:18] <systemfault> PenguinMan98: The "this" of a function is whatever was at the left of the "." when it was called :) If it's "nothing" then depending if "strict mode" is enabled or not, then it will be "undefined" or "globalThis"
[22:38:56] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[22:39:09] <ljharb> unless the function is an arrow function, which doesn't bind `this` at all, so it uses whatever the lexical scope has it set to
[22:40:13] *** Quits: fmsd__ (~no@196.74.28.114) (Ping timeout: 240 seconds)
[22:41:21] <PenguinMan98> It was a udemy course on advanced javascript. They taught that the 'this' is a super confusing feature that even most experts get wrong. The best way to not get tripped up is to use the .bind() to clarify the context of the function. This can be cumbersome though. They finished saying that one of the beauties of arrow functions is you get the
[22:41:21] <PenguinMan98> .bind(this) without having to type it which saves you time.
[22:41:31] *** Joins: fmsd__ (~no@160.176.41.135)
[22:41:48] <hax> because context is from calling, not defining
[22:42:13] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 265 seconds)
[22:42:37] <ljharb> PenguinMan98: not sure what to tell you. they're not wrong, but that's an unnecessarily complex mental model.
[22:42:39] <PenguinMan98> So, I'm willing to bite and accept that they were wrong.
[22:42:47] <PenguinMan98> I'm just relaying what I learned.
[22:42:51] <ljharb> onosendi: probably the first
[22:43:02] <ljharb> onosendi: but, there should never be a space between the function name and the `(`
[22:43:44] <EdFletcher> now _that_ i wholeheartedly disagree with, for one reason: makes it really easy to find the definition site of the function versus the call site with just textual search
[22:43:49] *** Quits: fmsd___ (~no@196.74.28.114) (Ping timeout: 240 seconds)
[22:43:49] <PenguinMan98> I don't like complex mental models when there are equally good simple ones.
[22:43:56] <EdFletcher> *call siteS
[22:44:17] *** Joins: fmsd___ (~no@105.158.25.145)
[22:44:22] <onosendi> o
[22:45:06] <EdFletcher> i used to hate the space between function name and paren until i got into a big codebase that didn't index properly and textual search was the next best option. thank $diety the original authors had used that pattern!
[22:45:07] *** Quits: Haxxa (~Haxxa@202-130-210-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:39] *** Joins: phenom (~primus@user/phenom)
[22:45:43] <PenguinMan98> Use a regex search
[22:45:47] <PenguinMan98> ;)
[22:45:48] * austincheney solves that problem by name all functions
[22:45:57] <ljharb> EdFletcher: that's already easy - `function foo`
[22:46:00] <ljharb> EdFletcher: or just `n foo` :-p
[22:46:09] <EdFletcher> lol
[22:46:10] <ljharb> EdFletcher: the space after the function name gives you nothing
[22:46:14] <PenguinMan98> `function\s*foo`
[22:46:27] <ljharb> there should only be one space, no newlines
[22:46:29] <ljharb> eslint rules cover that
[22:46:35] <EdFletcher> it does give you something, like i said. and for that, i will continue to use it until my dying day.
[22:46:37] <ljharb> the airbnb config enables them
[22:46:43] <EdFletcher> thankfully i don't use eslint lol!
[22:46:44] <ljharb> EdFletcher: it gives you nothing you can't get another way
[22:46:47] <ljharb> lol what?
[22:46:48] <PenguinMan98> `function\s+foo\s?\(`
[22:46:49] *** Quits: fmsd__ (~no@160.176.41.135) (Ping timeout: 252 seconds)
[22:46:50] <ljharb> eslint is table stakes
[22:46:58] <EdFletcher> `standard --fix`
[22:46:58] <ljharb> not using eslint is like not using git - you're stuck in the 90s
[22:47:02] <ljharb> that's using eslint
[22:47:10] *** Joins: Haxxa (~Haxxa@202-130-210-132.ip4.superloop.com)
[22:47:12] <ljharb> it's just using a really dumb eslint config that you can't customize
[22:47:15] <EdFletcher> but it doesn't mess with my spaces
[22:47:22] <ljharb> it also doesn't put in the semicolons that belong there
[22:47:22] <PenguinMan98> My company won't let me use eslint. LOL
[22:47:23] <EdFletcher> and i don't have to think about it. done and done.
[22:47:25] <ljharb> PenguinMan98: lolwut
[22:47:34] <ljharb> EdFletcher: same if you use the airbnb eslint config.
[22:47:35] <PenguinMan98> I can only use it on code I submit
[22:47:42] <PenguinMan98> Anything else and they get pissy
[22:47:46] <ljharb> PenguinMan98: so use it on everything and submit that code :-p
[22:47:49] <PenguinMan98> lol
[22:47:49] <EdFletcher> ljharb: i do admit i wish it would stop removing semicolons. i don't like that one.
[22:47:55] <ljharb> EdFletcher: there is a `semi-standar`
[22:48:01] <EdFletcher> ohh!
[22:48:04] <ljharb> EdFletcher: but really at that point just use normal eslint, with a shared config
[22:48:17] <ljharb> it's precisely as much "don't have to think about it", but it's more customizable when you want to.
[22:48:31] <EdFletcher> yeah i suppose
[22:48:33] <ljharb> it's also an actual standard, unlike `standard`, which is decidedly non-standard
[22:48:40] <EdFletcher> ironic name
[22:48:41] <systemfault> But the name....
[22:48:45] *** Joins: fmsd__ (~no@105.158.25.145)
[22:48:46] <EdFletcher> LOL
[22:48:47] <ljharb> (altho the airbnb config and `standard` overlap like 90%, thankfully)
[22:48:55] <PenguinMan98> I've gotten real used to my code reviews "And this is just a spacing issue.  So is this... and this..."
[22:48:57] <ljharb> EdFletcher: yes, it's a really poor name choice because of the lie it implies
[22:49:14] <ljharb> PenguinMan98: and if they don't want those in PRs then they need to use a linter to enforce them
[22:49:30] <PenguinMan98> Oh we don't use PR's
[22:49:33] <PenguinMan98> lol
[22:49:37] <EdFletcher> what the what
[22:49:50] <PenguinMan98> We ooooold school
[22:49:53] <ljharb> lol what do you use
[22:49:54] <onosendi> ljharb: what's the conclusion here? 1.) only use arrow functions for inline stuff, and named functions elsewhere. 2.) Always used named functions for React components (I guess this falls under 1)
[22:50:05] <EdFletcher> yeah... what _do_ you use then? zip files in email?
[22:50:08] <PenguinMan98> Commit and push to the repo
[22:50:11] *** Quits: dev4449 (~dev4449@212.154.23.106) (Quit: Client closed)
[22:50:11] <ljharb> onosendi: only *default* to arrows for inline stuff, and *default* to named functions elsewhere
[22:50:13] <EdFletcher> no review!?
[22:50:14] <ljharb> onosendi: and yes, number 2
[22:50:19] <ljharb> onosendi: where it's not just a default but a requirement
[22:50:22] <PenguinMan98> A manual review
[22:50:22] <systemfault> PenguinMan98: Using SVN? Or CVS? :)
[22:50:25] <ljharb> PenguinMan98: yeah that's insane
[22:50:27] <PenguinMan98> git
[22:50:33] <systemfault> PenguinMan98: At least that...
[22:50:34] <ljharb> maybe Dreamweaver :-p
[22:50:48] <systemfault> Frontpage...
[22:50:50] <austincheney> PenguinMan98, if you were using typescript many of your lint rules can be offloaded to the compiler which will then produce build errors.  Not a good idea for stuff that's just code style, but really good for stuff that violates sloppy syntax and unwanted conventions
[22:50:52] <EdFletcher> oh so just sending diffs around? well at least you're reviewing them, but yeah there's so many tools now to make that process easy
[22:50:53] *** Joins: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz)
[22:51:00] <ljharb> austincheney: that's really not relevant here
[22:51:01] *** Quits: fmsd___ (~no@105.158.25.145) (Ping timeout: 240 seconds)
[22:51:01] *** Quits: comatory_ (~ondrejsyn@8.152.broadband3.iol.cz) (Client Quit)
[22:51:08] <ljharb> telling someone who doesn't use a linter at all "use TS" isn't helping them
[22:51:09] <PenguinMan98> We don't have a build process at all
[22:51:12] <PenguinMan98> So, nope
[22:51:13] <ljharb> you always need a linter, even with TS
[22:51:22] <ljharb> and a TS codebase needs MORE TS-specific linting rules
[22:51:27] <ljharb> PenguinMan98: you don't minify?
[22:51:32] <PenguinMan98> Nooooope
[22:51:35] <ljharb> lol what?
[22:51:39] <ljharb> you just send raw commented JS to the browser?
[22:51:41] <PenguinMan98> Inorite?
[22:51:43] <PenguinMan98> Yes
[22:51:49] <systemfault> PenguinMan98: Your company needs a bit of shaming
[22:51:51] <EdFletcher> wowzers
[22:51:53] <ljharb> full of company secrets and potential public relations disasters?
[22:52:07] <austincheney> minification used to be more important than it is now.  Now it doesn't really matter because no matter what you are getting megs of JS on each page view
[22:52:09] <ljharb> PenguinMan98: you are aware that there's a job market, right
[22:52:20] <ljharb> austincheney: it's more important now than ever before, BECAUSE of that
[22:52:24] <PenguinMan98> That's why this last week my hackathon project was to install a build step
[22:52:32] <ljharb> PenguinMan98: you need a linter first
[22:52:32] <EdFletcher> nice!
[22:52:36] <PenguinMan98> Gotta start somewhere
[22:52:39] <ljharb> PenguinMan98: otherwise how can you know the code you're building even works
[22:52:50] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[22:52:52] <PenguinMan98> Meh, let QA worry about that
[22:52:53] <ljharb> PenguinMan98: i hesitate to ask, but do you even have tests
[22:52:55] <systemfault> PenguinMan98: Then the other people on the team are going to find it annoying and they'll be angry at you...
[22:52:58] <PenguinMan98> Nooooper
[22:53:00] <ljharb> QA, holy facepalm
[22:53:04] <systemfault> PenguinMan98: Get another job.
[22:53:06] <austincheney> ljharb, naw, if people really cared about payload size they would make better code decisions.  a minifier is going to fix the bloat.  its like sticking chewing gum in a crack of a dam
[22:53:06] <ljharb> modern companies don't even have QA
[22:53:11] <ljharb> austincheney: false
[22:53:15] <ljharb> austincheney: a minifier doesn't fix the bloat
[22:53:20] <PenguinMan98> That's another thing I'm pushing to get.
[22:53:22] <ljharb> austincheney: it's just table stakes. not having one is incompetence.
[22:53:23] <austincheney> sorry, i mean *isnt
[22:53:24] <PenguinMan98> Jest
[22:53:37] <ljharb> PenguinMan98: jest isn't a necessity, but tests are
[22:53:56] <PenguinMan98> I agree
[22:53:56] <austincheney> its a common belief in the JS world that bad people decisions can be fixed by use of a tool
[22:54:08] <systemfault> If there are no tests then there are no failed tests! WIN WIN!
[22:54:17] <PenguinMan98> We really need to rewrite, I'm on board with that
[22:54:30] <PenguinMan98> I'm amazed this product works at all half the time
[22:54:38] <ljharb> austincheney: nobody has that belief here
[22:54:49] <ljharb> austincheney: but that bad decisions can't be fixed does not mean tools should be avoided
[22:54:59] *** Joins: codebam (~codebam@user/codebam)
[22:55:05] <ljharb> PenguinMan98: it works none of the time, since you have no tests proving it does
[22:55:19] <PenguinMan98> Fair assessment
[22:55:22] <austincheney> i disagree, bad decisions can be fixed with a little bit of training and refactors
[22:55:24] <systemfault> Nobody has COVID if no one is tested
[22:55:41] <ljharb> austincheney: those aren't tools fixing them
[22:55:43] <PenguinMan98> Anyway, I do hope they choose my project.
[22:56:13] <PenguinMan98> It would be nice to get the green light and some resources to get modernized
[22:56:51] <PenguinMan98> #jobsecurity
[22:57:35] <PenguinMan98> Anyway, gotta run and get a bite of lunch
[22:57:37] <PenguinMan98> bbl
[22:57:43] *** PenguinMan98 is now known as pengy-away
[22:59:04] *** Quits: pengy-away (~PenguinMa@65.153.38.250) (Quit: Client closed)
[23:05:16] <AlbertLast> while trying to start my testing i get this error: https://snipboard.io/S24Rut.jpg did someone know in which lib i had to look into? "The argument 'filename' must be a file URL object, file URL string, or absolute path string. Received 'http://localhost/eslintrc.cjs'"
[23:07:39] <austincheney> AlbertLast, looks like a library is missing from your webpack bundle
[23:08:00] <AlbertLast> missing O_o
[23:08:12] <AlbertLast> okay never thought in this way
[23:08:25] <austincheney> are you sure eslint is avialable to your code?
[23:08:45] <austincheney> should be an easy thing to rule out, and after you rule that out its a configuration problem
[23:08:56] *** Joins: nomic (~nomic@185.217.117.73)
[23:10:29] <AlbertLast> in normal build process eslint works fine
[23:10:55] <AlbertLast> so it's mention some minor mistake everyrun -> in general eslint is working
[23:12:36] *** Quits: Larzen (~textual@S01063497f663ca38.cg.shawcable.net) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:12:36] *** Quits: Harlin (~DonQixote@75-163-180-14.clsp.qwest.net) (Remote host closed the connection)
[23:14:19] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:ccbc:350f:2ba4:4258) (Quit: Textual IRC Client: www.textualapp.com)
[23:15:01] *** Joins: thetoloachekid (~ttk@189.147.185.193)
[23:17:41] *** Joins: Larzen (~textual@S01063497f663ca38.cg.shawcable.net)
[23:17:49] *** Joins: Betal (~Betal@user/betal)
[23:19:30] *** Joins: adar (uid1346@user/adar)
[23:19:46] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:ed32:ad34:9337:4fa2)
[23:22:02] <ljharb> AlbertLast: don't use type module.
[23:22:04] <ljharb> that's your problem.
[23:22:13] <ljharb> `.js` files should be Script/CJS, and ESM should be `.mjs`
[23:22:30] <ljharb> AlbertLast: but also webpack shouldn't be doing any linting at all; linting is part of tests, not the build
[23:30:57] <AlbertLast> type module = @types/... ?
[23:31:24] <cantelope> https://www.fxhash.xyz/generative/2450
[23:33:36] *** Joins: PenguinMan98 (~PenguinMa@65.153.38.250)
[23:33:48] *** Joins: sbrothy (~sbrothy@192038131218.mbb.telenor.dk)
[23:34:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:34:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:34:40] *** Joins: wroathe (~wroathe@user/wroathe)
[23:35:38] *** Quits: sbrothy (~sbrothy@192038131218.mbb.telenor.dk) (Client Quit)
[23:35:57] <ljharb> AlbertLast: no i mean the "type" field in package.json
[23:36:08] <ljharb> AlbertLast: you have it set to "module", otherwise your eslint config wouldn't need to be `.cjs`
[23:39:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:40:47] <AlbertLast> hmm in my package.json type entry didn't exists
[23:41:11] <AlbertLast> maybe it come from somewhere else while starting the test process...
[23:41:48] <ljharb> hm ok
[23:41:53] <AlbertLast> same for eslintrc.js, no entry
[23:41:54] <ljharb> AlbertLast: then why is eslintrc.cjs not `.eslintrc.js`
[23:41:57] <ljharb> with a leading dot
[23:42:07] <ljharb> or wait, is this CRA
[23:42:19] <ljharb> ah no, it's some vue thing
[23:42:34] <AlbertLast> .eslintrc.js is the full name yea
[23:42:47] <ljharb> seems like a huge mess; linting shouldn't ever be run as part of a build process.
[23:43:33] <AlbertLast> yea we got the topic, like i said laste time, it's fine for me, since it play/learning project and build process is fine
[23:43:54] <ljharb> it's still not fine, because you're learning bad habits
[23:43:58] <AlbertLast> only when i run the test routine than i got issue
[23:44:25] <ljharb> anyways since you're using some kind of "set it all up for you and prevent you from learning how things work" tool, you'd have to ask people familiar with that tool
[23:44:45] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[23:47:11] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:47:24] *** Joins: v3ga (~v3ga@2600:1702:ad0:3b90::40)
[23:51:49] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 265 seconds)
[23:51:58] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[23:53:56] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[23:56:31] *** Joins: z1haze (~z1haze@user/z1haze)
[23:56:37] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[23:57:13] *** Joins: fmsd (~no@160.176.227.210)
[23:57:43] <z1haze> webpack expects that every entry point has at least 1 js file, right? What I am attempting is to simply have an entry for my "styles". In the past I get around this by naming both the styles and scripts the same name, and webpack can pick those up via an array. But i dont want to name my css app.css or w/e
[23:57:55] <z1haze> you folks know how to go about this?
[23:58:23] <z1haze> I do not wish to do `entry: { app: [__dirname + '/index.js', __dirname + '/scss/style.scss'] }`
[23:59:04] *** Quits: fmsd__ (~no@105.158.25.145) (Ping timeout: 265 seconds)
[23:59:09] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
