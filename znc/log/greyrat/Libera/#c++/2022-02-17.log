[00:00:06] <quartz> BRB need to plug in laptop battery
[00:00:30] <Xardas> I thought I would get a pointer to each inner array but instead am getting a pointer to each first element in the inner arrays
[00:00:47] <Alipha> Xardas: correct, you get a pointer to the first element
[00:00:50] <imMute> Xardas: those are the same thing.
[00:01:02] <ville> imMute: no they are not
[00:01:02] <Xardas> I'm getting int* instead of int (*p)[4]
[00:01:12] <Alipha> { int arr[10]; auto p = arr; cout << TYPE(p); } // Xardas
[00:01:13] <geordi> lvalue int*
[00:01:44] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:01:47] <Alipha> if an array decays to a pointer, it decays to a pointer to its first element
[00:01:51] <imMute> ville: ah, right.  I keep forgetting that.
[00:02:40] <Alipha> Xardas: as ville mentioned, if you did `auto&& e` or `auto& e`, then e would be a int(&)[4]
[00:03:55] <ville> the low-thinking option in range for is auto&&
[00:03:59] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[00:04:35] <Xardas> If we can't copy arrays, we should normally get an array to it
[00:04:39] <Xardas> but not to it's first element
[00:05:07] <Xardas> get a pointer to it*
[00:05:09] <Xardas> my bad
[00:05:23] <Alipha> nope. arrays decay to pointers to their first element. you can't copy an array, so it decays instead
[00:05:55] <Xardas> Well maybe that's the case for auto ?
[00:06:16] <imMute> honestly IMO, if you're worrying about getting an  int(*)[4] instead of an int*, you should probably be using std::array or something.  plain arrays are dumb.
[00:06:18] <Alipha> { int arr[10]; int (*p)[10] = arr; }
[00:06:19] <geordi> error: cannot convert 'int*' to 'int (*)[10]' in initialization
[00:07:01] <Xardas> imMute I'm actually reading a book c++ primer and i'm experimenting with pointers and 2d arrays
[00:07:06] <Alipha> { int arr[10]; int *q = arr; }
[00:07:07] <geordi>  
[00:07:36] <Xardas> Alipha I got your point
[00:07:42] <imMute> Xardas: std::array<std::array<int,4>,3>
[00:07:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[00:08:02] <imMute> Xardas: or, if you're doing mathy stuff with those matrices, Eigen
[00:09:16] <Xardas> Well, the purpose in this chapter of a book is to grasp pointers and have a deep understanding of them
[00:09:41] <Xardas> imMute naah i'm still learning the syntax etc..
[00:10:07] <Xardas> Thanks for your help guys !!
[00:10:31] <Xardas> { int arr[10]; int *q = &arr;}
[00:10:31] <geordi> error: cannot convert 'int (*)[10]' to 'int*' in initialization
[00:10:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:11:11] <Xardas> Did I confuse someone by chance ? :p
[00:11:31] <Alipha> indeed. during "most" contexts, `arr` is the same as `&arr[0]`. so if you want a pointer to the array (and not the first element), then you need `&arr`
[00:12:20] <Xardas> Oh...
[00:12:26] <Xardas> Now I remembered...
[00:12:54] <Xardas> I did some research on this
[00:13:08] <Xardas> in a for range loop arr is not converted to &arr[0]
[00:13:12] <imMute> Xardas: either remove the & and let the array decay to the pointer,  or change the type of q to a pointer to an array (instead of a pointer to an int)
[00:13:44] <Xardas> that explains it
[00:14:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:14:39] <Alipha> `for(auto e : arr)` means `auto e = arr[i];` for each element index i in the array
[00:15:20] <imMute> { int arr[10]; cout << TYPE(arr) << "   " << TYPE(&arr); }
[00:15:21] <geordi> lvalue int [10]   prvalue int (*)[10]
[00:15:37] <imMute> Xardas: ^^ (and you can ignore the lvalue and prvalue bits for now)
[00:17:03] <Xardas> Thanks. ^^
[00:17:12] <Xardas> Yes i know what these terms mean
[00:18:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:18:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:18:27] <Alipha> I still don't really know what prvalue and xvalue mean :-)
[00:20:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:20:26] <Xardas> lvalue is easy
[00:20:37] <Xardas> prvalue is a literal
[00:21:01] <Xardas> hmm
[00:21:07] <Xardas> no i'm not sure enough
[00:21:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:22:02] <Xardas> Alipha sometimes when we use an array name, like foo, it's not converted to &foo[0]
[00:22:26] <Alipha> Xardas: hence the word "most" :-)
[00:23:10] <Xardas> When an array is used as a value it's converted to a pointer
[00:23:15] <Xardas> other then that it's not
[00:23:21] <Alipha> Notably, & and sizeof
[00:23:55] <Xardas> in a for range loop too
[00:23:57] <Xardas> right ?
[00:24:06] <Alipha> Correct
[00:24:38] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a660098fe8ff2397acac3.ipv6.abo.wanadoo.fr)
[00:24:56] <Xardas> I've read this somewhere, I remember that's how i convinced myself hhhhhh
[00:25:16] <Xardas> I can't get over the little details
[00:26:31] <Xardas> Alipha merci for your help.
[00:26:35] <Alipha> Xardas: i think there's only so much you can learn at a time and that you physically can't have a better understanding right now. it'll take time and using your knowledge
[00:29:14] *** Joins: badone (~badone@209.132.189.152)
[00:29:16] <Xardas> Yes, Ineed.
[00:29:45] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:30:35] *** Joins: quartz (~user_name@user/quartz)
[00:31:35] *** Joins: netpipe (~netpipe@user/netpipe)
[00:32:49] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[00:33:14] <quartz> Alipha: thanks for your help earlier
[00:33:45] *** Joins: tmm88 (~tmm88@user/tmm88)
[00:35:46] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[00:36:00] *** Joins: rvalue (~rvalue@user/rvalue)
[00:36:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:39:31] *** Joins: rgrinberg (~textual@187.194.14.9)
[00:41:28] *** Quits: furrymcgee (~devuan@cgn-89-1-211-93.nc.de) (Ping timeout: 272 seconds)
[00:43:26] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[00:45:40] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[00:49:21] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[00:49:31] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[00:53:46] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[00:56:40] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[00:58:16] *** Quits: heineken (~i.am@user/heineken) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[01:00:48] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[01:06:21] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[01:08:29] *** Quits: magla (~gelignite@55d40b59.access.ecotel.net) (Quit: Stay safe!)
[01:11:14] <relipse> any Borland C++Builder users here?
[01:12:42] <Zogatribe> didn't know that was stilla thing
[01:13:15] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[01:15:26] <anyone> whether or not, it's not on-topic for #C++
[01:18:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:19:29] *** Joins: jokoon (~eio@2a01:e0a:542:e160:3d9c:f044:e5e7:d254)
[01:22:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:25:00] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 240 seconds)
[01:26:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:27:29] *** Joins: Betal (~Betal@user/betal)
[01:29:22] *** Quits: s1b1 (~s1b1@user/s1b1) (Read error: Connection reset by peer)
[01:29:52] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[01:30:11] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[01:38:18] *** Quits: vancz (~vancz@user/vancz) (Quit: vancz)
[01:42:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:43] *** ChanServ sets mode: +v npaperbot
[01:43:59] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:44:48] *** Quits: jsbach (~jsbach@2a01:c22:b1aa:6f00:d06b:554:9eaa:3358) (Ping timeout: 252 seconds)
[01:46:46] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[01:49:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:50:26] *** Quits: Autowired (~autowired@dslb-094-218-237-093.094.218.pools.vodafone-ip.de) (Quit: Nettalk6 - www.ntalk.de)
[01:54:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[01:54:28] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[01:54:43] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[01:57:41] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[01:59:14] *** Joins: Guest4493 (~Guest44@2a00:23c7:1f89:801:39:18ba:188a:6ce8)
[01:59:48] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[01:59:56] *** Quits: jokoon (~eio@2a01:e0a:542:e160:3d9c:f044:e5e7:d254) (Quit: Leaving)
[02:00:01] *** Joins: vancz (~vancz@user/vancz)
[02:00:31] *** Joins: Guest4415 (~Guest44@2a00:23c7:1f89:801:39:18ba:188a:6ce8)
[02:00:34] *** Quits: Guest4415 (~Guest44@2a00:23c7:1f89:801:39:18ba:188a:6ce8) (Write error: Broken pipe)
[02:00:49] *** Joins: Guest4423231 (~Guest4423@2a00:23c7:1f89:801:39:18ba:188a:6ce8)
[02:02:15] *** Joins: Atque (~Atque@user/atque)
[02:03:24] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[02:03:34] *** Joins: Guest442323177 (~Guest4423@2a00:23c7:1f89:801:39:18ba:188a:6ce8)
[02:03:39] *** Quits: Guest4493 (~Guest44@2a00:23c7:1f89:801:39:18ba:188a:6ce8) (Ping timeout: 256 seconds)
[02:04:47] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3)
[02:05:21] *** Quits: Guest4423231 (~Guest4423@2a00:23c7:1f89:801:39:18ba:188a:6ce8) (Ping timeout: 256 seconds)
[02:07:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:07:49] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[02:08:11] *** Quits: Guest442323177 (~Guest4423@2a00:23c7:1f89:801:39:18ba:188a:6ce8) (Ping timeout: 256 seconds)
[02:08:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:11:16] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:12:21] *** Joins: vicfred (~vicfred@user/vicfred)
[02:15:02] *** Joins: Betal (~Betal@user/betal)
[02:15:38] *** Joins: s1b1 (~s1b1@user/s1b1)
[02:18:52] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[02:18:54] *** Quits: proller (~p@2a02:6b8:b081:4::1:3b) (Ping timeout: 252 seconds)
[02:18:54] *** Quits: Grell (~john@ool-4579c605.dyn.optonline.net) (Remote host closed the connection)
[02:19:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:22:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:25:05] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[02:28:04] <welder> std::max_element on array of 256uints is 25x slower than handrolled loop
[02:28:07] <welder> https://godbolt.org/z/MGaWdW9dv
[02:28:18] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:28:25] <welder> I wonder why he can't use the simd (neon on arm) like he does in first example
[02:28:46] <welder> and why such seemingly innocent change makes the first function go 15x slower too
[02:29:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[02:29:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[02:29:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:29:54] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:19] *** Joins: proller (~p@80.240.216.69)
[02:31:36] *** Joins: Didgy (~np_sk@82.147.37.145)
[02:32:02] *** Joins: Yruama_ (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[02:32:02] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Read error: Connection reset by peer)
[02:32:42] *** Quits: pizdets (~pizdets@183.182.111.3) (Ping timeout: 250 seconds)
[02:33:52] *** Joins: pizdets (~pizdets@183.182.110.81)
[02:34:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:34:26] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[02:34:46] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[02:35:07] *** Joins: andreasbuhr (~quassel@p549dbd84.dip0.t-ipconnect.de)
[02:35:31] <TinoDidriksen> That's rather different, if similar. One stores and compares uint8_t, the other stores pointers but compares uint8_t.
[02:35:49] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[02:37:10] <welder> no, both functions compare uint8_t values
[02:37:22] <TinoDidriksen> Yes? That's what I said.
[02:38:04] <welder> then i did not understand your first sentence
[02:38:15] <welder> in my opinion, both functions are equivalent
[02:38:22] <welder> so why is the code so different
[02:38:33] <welder> assembly code*
[02:38:54] <TinoDidriksen> They're not quite, though. The 2nd stores pointers along the way, then derefs it at the end. The first simply only stores the actual value the whole time.
[02:39:43] <TinoDidriksen> Now, I agree there is enough information here that they ought to optimize to the same, but I can also see why compilers can't quite get there.
[02:39:48] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[02:40:20] <welder> ahh i get your point
[02:40:38] <welder> the implementation of max_element remembers the pointer of the max element, not it's value
[02:40:44] <TinoDidriksen> Indeed
[02:40:51] <welder> and with every next element it compares *current_max with *current_element
[02:42:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:44:06] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[02:45:01] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[02:45:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: taking a break.  remember kids, sekai is better than kotonoha)
[02:46:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[02:50:05] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:50:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 250 seconds)
[02:51:09] *** Quits: ivan_wagner (~ivan_wagn@45.83.220.192) (Quit: Leaving)
[02:57:02] *** Quits: AmR (~AmREiSa@156.199.14.65) (Quit: Konversation terminated!)
[02:57:20] *** Joins: leah2 (~leah@vuxu.org)
[02:57:22] *** Quits: Didgy (~np_sk@82.147.37.145) (Quit: Konversation terminated!)
[02:57:37] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[02:57:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[02:58:18] *** Joins: Didgy (~np_sk@82.147.37.145)
[02:58:28] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:59:25] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:59:57] *** Quits: andreasbuhr (~quassel@p549dbd84.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:00:20] *** Quits: Didgy (~np_sk@82.147.37.145) (Client Quit)
[03:01:26] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[03:03:20] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 272 seconds)
[03:05:02] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:21] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[03:05:21] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[03:05:21] *** Quits: tcsc (sid145321@id-145321.lymington.irccloud.com) (Ping timeout: 250 seconds)
[03:05:25] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[03:05:28] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:05:30] *** Quits: amiti (sid373138@id-373138.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:38] *** Quits: relipse (sid16131@id-16131.tinside.irccloud.com) (Ping timeout: 260 seconds)
[03:05:38] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 260 seconds)
[03:05:40] *** Joins: amiti (sid373138@id-373138.lymington.irccloud.com)
[03:05:44] *** Quits: glenfe (sid231748@user/glenfe) (Read error: Connection reset by peer)
[03:05:49] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:49] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[03:05:55] *** Joins: glenfe (sid231748@user/glenfe)
[03:05:58] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: blueminder_ (sid143388@id-143388.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Read error: Connection reset by peer)
[03:06:00] *** Quits: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: merpnderp (sid16744@id-16744.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:06:02] *** Quits: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:06:03] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:06:04] *** Joins: tcsc (sid145321@id-145321.lymington.irccloud.com)
[03:06:17] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[03:06:26] *** Joins: computerquip (sid423484@user/computerquip)
[03:06:32] *** Joins: blueminder_ (sid143388@2a03:5180:f::2:301c)
[03:06:42] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[03:06:44] *** Joins: merpnderp (sid16744@id-16744.hampstead.irccloud.com)
[03:06:52] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[03:06:55] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:06:57] *** Joins: nightstrike (uid487@2a03:5180:f:5::1e7)
[03:07:00] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[03:07:01] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[03:07:03] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[03:07:05] *** Joins: jakesyl__ (sid56879@2a03:5180:f:4::de2f)
[03:07:06] *** Joins: quartz (~user_name@user/quartz)
[03:07:08] *** Joins: relipse (sid16131@id-16131.tinside.irccloud.com)
[03:07:10] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[03:07:10] *** Joins: wangledorf_ (sid505185@id-505185.ilkley.irccloud.com)
[03:07:20] *** Joins: sa (sid1055@2a03:5180:f::41f)
[03:07:30] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[03:10:04] *** Joins: ali1234 (~al@user/ali1234)
[03:10:16] *** Parts: ali1234 (~al@user/ali1234) ()
[03:14:15] *** Quits: MatSharrow (~matthew@60.102.9.51.dyn.plus.net) (Ping timeout: 250 seconds)
[03:15:34] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3)
[03:16:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:17:48] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3) (Client Quit)
[03:18:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[03:19:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:22:55] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[03:23:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[03:23:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:24:16] <quartz> Hello. I have this program that is suppose to test the time it takes to use qsort() and sort() on a set of C-style strings (char arrays) and std::strings. I'm suppose to follow these directions: https://bpa.st/WNRA  It says to sort a COPY of each set of strings, however, I'm not sure if they want me to make an actual copy or just pass the original set of strings into the sorting function
[03:24:44] <quartz> Because if I don't use & when passing a vector into sort, it creates a copy by default right?
[03:35:53] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[03:37:37] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[03:39:11] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[03:39:33] *** Joins: ahlk` (~user@2600:1700:31c0:3a10::43)
[03:39:47] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:39:59] *** Quits: Khoyo_ (~khoyo@user/khoyo) (Ping timeout: 256 seconds)
[03:40:13] *** Joins: causative (~halberd@user/causative)
[03:40:13] *** Joins: xkuru (~xkuru@user/xkuru)
[03:40:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[03:40:35] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Ping timeout: 240 seconds)
[03:40:42] *** Joins: Khoyo (~khoyo@user/khoyo)
[03:40:42] *** Joins: Dreg (~Dreg@fr33project.org)
[03:40:43] *** Joins: Bitflux (~byte@byteflux.net)
[03:40:46] *** Joins: bone_ (~bone@user/mbo)
[03:41:07] *** Quits: Dreg- (~Dreg@fr33project.org) (Ping timeout: 256 seconds)
[03:41:07] *** Quits: bone (~bone@user/mbo) (Ping timeout: 256 seconds)
[03:41:14] *** Joins: hirish_ (~hirish@ip85.ip-137-74-20.eu)
[03:41:33] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Ping timeout: 250 seconds)
[03:41:41] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Ping timeout: 256 seconds)
[03:41:41] *** Quits: Byteflux (~byte@byteflux.net) (Ping timeout: 256 seconds)
[03:41:41] *** Quits: lru (~lru@240.ip-51-79-50.net) (Ping timeout: 256 seconds)
[03:42:30] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[03:42:36] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[03:43:25] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:43:28] *** Joins: lru (~lru@240.ip-51-79-50.net)
[03:43:34] <quartz> Sorry for noob question
[03:43:43] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 250 seconds)
[03:44:36] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Ping timeout: 240 seconds)
[03:44:44] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[03:44:54] *** Joins: Dreg- (~Dreg@fr33project.org)
[03:45:00] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Ping timeout: 240 seconds)
[03:45:07] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:45:24] *** Quits: Dreg (~Dreg@fr33project.org) (Ping timeout: 240 seconds)
[03:45:24] *** Quits: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:45:24] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[03:45:25] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[03:46:20] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:48:14] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:48:33] *** Joins: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[03:49:13] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:55:35] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[03:55:44] *** Joins: bindu_ (~bindu@user/bindu)
[03:56:44] *** Joins: x_kuru (~xkuru@user/xkuru)
[03:56:57] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:56:59] *** Joins: Cahaan_ (~Cahaan@user/cahaan)
[03:57:33] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[03:57:37] *** Joins: nki3 (~mmk@198-200-74-246.cpe.distributel.net)
[03:57:39] *** Joins: vicfred_ (~vicfred@user/vicfred)
[03:57:42] *** bindu_ is now known as bindu
[03:57:42] *** Joins: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[03:57:46] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[03:57:52] *** Joins: linext_ (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net)
[03:57:52] *** Quits: Yruama_ (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Quit: Leaving)
[03:57:53] *** Quits: seninha (~seninha@user/seninha) (Read error: Connection reset by peer)
[03:57:53] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[03:57:53] *** Quits: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[03:57:53] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:57:53] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Read error: Connection reset by peer)
[03:57:53] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[03:57:53] *** Quits: vicfred (~vicfred@user/vicfred) (Read error: Connection reset by peer)
[03:57:53] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[03:57:53] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[03:57:53] *** Quits: FergusL (~freenode4@user/fergusl) (Quit: Ping timeout (120 seconds))
[03:58:05] *** Joins: FergusL (~freenode4@23.247.118.78.rev.sfr.net)
[03:58:05] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[03:58:07] *** Joins: moose (~moose@user/moose)
[03:58:13] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[03:58:13] *** Joins: seninha (~seninha@user/seninha)
[03:59:31] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Remote host closed the connection)
[04:00:21] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 272 seconds)
[04:00:21] *** Quits: Cahaan (~Cahaan@user/cahaan) (Ping timeout: 272 seconds)
[04:00:21] *** Quits: deviantfero (~deviantfe@179.51.61.253) (Ping timeout: 272 seconds)
[04:00:21] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[04:00:21] *** Joins: cheater1__ (~Username@user/cheater)
[04:00:25] *** cheater1__ is now known as cheater
[04:00:58] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[04:00:58] *** Quits: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[04:00:59] *** Quits: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[04:01:53] *** Joins: deviantfero (~deviantfe@179.51.61.253)
[04:02:57] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[04:03:10] <PJBoy> think the idea is to make a copy that you can run sort on
[04:03:19] <PJBoy> so that your other tests can use the unsorted data
[04:04:05] <PJBoy> and obviously don't measure the time spent on the copying
[04:09:12] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 272 seconds)
[04:12:03] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:13:22] *** Joins: fluter (~fluter@user/fluter)
[04:17:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:18:12] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 240 seconds)
[04:18:41] <quartz> PJBoy: Correct. I'm trying to sort a vector of C-style strings (char *) using qsort. I'm getting this weird error , would you mind taking a look? I can't figure it out. It has something to do with the function used to compare C strings
[04:18:50] <quartz> https://www.godbolt.org/z/cE3voE9zc
[04:19:26] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[04:20:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:21:28] <PJBoy> https://www.godbolt.org/z/35M95TMqn
[04:21:58] <PJBoy> lambdas are declared with auto, no relation to the return type of the function
[04:22:16] <PJBoy> and qsort wants a function with void pointers rather than char pointers
[04:22:52] <PJBoy> also it should return an integer, and you were returning a bool
[04:23:45] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:25:16] <quartz> PJBoy: Wow thanks so much.
[04:25:40] <PJBoy> :)
[04:26:12] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:26:29] <quartz> I wish I were this good in C/C++
[04:31:26] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Ping timeout: 252 seconds)
[04:32:54] <quartz> PJBoy: I hate to bug you again, but I'm trying to use std::sort() on a vector of std::strings. I want to sort them in decending order, so I'm passing as a third parameter into sort(), std::greater<char>, but it does not work
[04:33:03] <quartz> https://www.godbolt.org/z/Yvvfajfna
[04:33:48] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[04:33:57] <PJBoy> if you're sorting std::strings, you probably want std::greater<std::string>
[04:34:30] <cbreak> since c++11 I think you can use std::greater<>
[04:34:48] <cbreak> hmm. 14 it seems
[04:35:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:69a1:71c1:c043:2acb) (Quit: Textual IRC Client: www.textualapp.com)
[04:35:33] <quartz> Ahhh thanks. Either option works.
[04:36:35] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:23] <quartz> Is it possible to get a godbolt style interface in VSCode or some other IDE? I love how it compiles immediately when you change the code and shows you the output.
[04:39:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:5947:a168:126f:95f4)
[04:39:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:5947:a168:126f:95f4) (Changing host)
[04:39:43] *** Joins: skapata (~Skapata@user/skapata)
[04:40:13] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[04:40:42] *** Joins: fengdaolong (~fengdaolo@171.43.210.93)
[04:41:04] <PJBoy> perhaps this https://marketplace.visualstudio.com/items?itemName=MatthewEvers.compiler-explorer
[04:42:13] <quartz> PJBoy: Wow nice!
[04:42:44] <PJBoy> I haven't tried it myself, so your mileage *will* vary
[04:43:32] <quartz> PJBoy: One last question. I need to sort the C style strings that are contained in std::vectors in decending order. I need to change the compare function, but I'm not sure how. Would I just negate the value of strcmp?
[04:43:38] <quartz> I doubt it's that easy
[04:44:04] <PJBoy> no it probably is that is
[04:44:10] <PJBoy> *no it probably is that easy
[04:45:07] <PJBoy> or swap the arguments you give to strcmp
[04:46:09] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[04:47:01] <quartz> OK
[04:47:25] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[04:50:50] <PJBoy> oh did I give you a wrong lambda in the end
[04:50:56] <PJBoy> :/
[04:51:00] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[04:53:05] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[04:53:41] <quartz> PJBoy: Huh
[04:53:43] <quartz> ?
[04:54:37] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:54:50] <PJBoy> https://www.godbolt.org/z/bxc6YaPao
[04:55:21] <PJBoy> the void pointers you're given by qsort are pointers to the things being sorted
[04:56:03] <PJBoy> so for a std::string comparator you'd have these `const void*` pointers that you'd cast to `const std::string*`
[04:56:19] <PJBoy> and for the c string comparator you have a const pointer to `const char*`
[04:57:01] <PJBoy> and what we were doing before was treating the void pointer as if it were the c string itself, instead of as a pointer to one
[04:58:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:58:32] *** Joins: reset (~reset@user/reset)
[04:59:11] <PJBoy> and if you're thinking qsort is annoying
[04:59:25] <PJBoy> and bad because it leads to type confusion like that
[04:59:27] <quartz> Oh God I'm so confused :(
[04:59:29] <PJBoy> you'd be right
[04:59:34] <quartz> Yeah no kidding
[05:00:24] <PJBoy> it would look more simple with an numeric data type example
[05:02:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[05:03:35] <quartz> Yeah I'm not sure why they had me do this with strings
[05:04:02] <PJBoy> https://www.godbolt.org/z/oKcEMGsP9
[05:04:12] <PJBoy> there's the qsort on doubles
[05:05:10] <PJBoy> and I still messed it up, wtf
[05:05:23] <PJBoy> that's what I get for not even looking at the output
[05:05:40] <PJBoy> https://www.godbolt.org/z/ajdx934or
[05:07:05] <PJBoy> so the bit returning -1/1/0 is roughly how strcmp works too
[05:07:07] *** Joins: ferdna (~ferdna@user/ferdna)
[05:07:24] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[05:07:38] <PJBoy> the main thing of note is that you cast those void pointers to `const T*` where T is the type of the values you're sorting
[05:07:40] <quartz> PJBoy: Do you know how I'd use qsort on a vector of std::strings sorting them in increasing order?
[05:08:05] <quartz> Jeez this so confusing. I should probably take a break.
[05:08:11] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[05:08:38] <quartz> It says in the assignment: beware, qsort() needs a three way comparison... wtf does that mean
[05:08:39] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[05:08:49] <PJBoy> three way comparison is like in that double example
[05:09:07] <PJBoy> negative = lhs<rhs, positive = lhs>rhs, zero = lhs==rhs
[05:09:36] *** Joins: malloy (~jimery@116.30.220.175)
[05:09:54] <quartz> Ohh right
[05:11:57] <PJBoy> std::string has three way comparison in the form of lhs.compare(rhs)
[05:14:25] <PJBoy> so your comparator would cast the void pointers to `const std::string*` and then return `(*lhs).compare(*rhs)`
[05:14:37] <quartz> Uhhh
[05:14:44] <quartz> Hmmm let me try it
[05:15:11] *** Quits: fengdaolong (~fengdaolo@171.43.210.93) (Ping timeout: 256 seconds)
[05:15:46] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:16:16] *** Joins: fengdaolong (~fengdaolo@171.43.210.93)
[05:16:59] <Zogatribe> there is no try
[05:17:01] <PJBoy> oh wait
[05:17:11] <PJBoy> qsort doesn't support sorting std::strings
[05:17:20] <PJBoy> that's inconvenient
[05:17:29] <quartz> Huh? So how?
[05:17:34] <Zogatribe> std::sort
[05:17:52] <quartz> Yeah but this assignment wants me to use qsort to sort a vector of std::strings
[05:18:01] <PJBoy> it tries to copy the strings as if by memcpy, so that just doesn't work
[05:18:09] <Zogatribe> then the guy who set that assignment is an idiot
[05:18:22] <quartz> Zogatribe: What if I told you it was the man who invented C++?
[05:18:23] <quartz> :_
[05:18:25] <quartz> :)
[05:18:28] <quartz> https://bpa.st/WNRA
[05:18:39] <Zogatribe> it wasn't though because that guy works in banking now
[05:18:45] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a660098fe8ff2397acac3.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[05:19:21] <Zogatribe> he is now a cockney wanker one might say
[05:19:57] <PJBoy> I don't think there's a workaround
[05:20:18] <quartz> Zogatribe: He also teaches if you look him up.
[05:20:36] <Zogatribe> well you can cast to/from void*
[05:20:41] <PJBoy> if you were desperate to use qsort you could make an array of pointers to those strings
[05:20:41] *** Joins: seninha (~seninha@user/seninha)
[05:20:44] <Zogatribe> but that isn't very nice
[05:20:48] <PJBoy> and qsort that array of pointers
[05:20:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:21:18] <PJBoy> and then go and move the strings from the old array to a new one using the qsort'd array
[05:21:31] <PJBoy> but that's terrible in so many ways
[05:21:45] <Zogatribe> the assignment itself is terrible on so many ways
[05:22:04] <quartz> Hahaha why?
[05:22:11] <Zogatribe> C/C++ isn't a thing
[05:22:29] <Zogatribe> there is C and there is C++, don't try and mix the two
[05:23:37] <quartz> Backwards compatibality is a thing thought right?
[05:23:46] <Zogatribe> that is besides the point
[05:23:58] <Zogatribe> if you want to sort std::strings then use std::sort
[05:24:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:25:47] <quartz> Zogatribe: School and the real world are two very different things.
[05:26:03] <Zogatribe> school is supposed to prepare you for the real world
[05:26:47] <Zogatribe> in an isolated system entropy can only increase.
[05:27:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:28:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:29:07] <PJBoy> ew https://www.godbolt.org/z/Wsvfb8jaj
[05:30:47] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3)
[05:31:34] *** Quits: nki3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[05:32:04] <quartz> PJBoy: Wow
[05:32:09] <Zogatribe> you do realize you have just done someone's homework for them? what is the fucking point of setting homework if student is going to cheat?
[05:32:58] <PJBoy> nothing educational about having to write that code
[05:33:02] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[05:33:13] <PJBoy> all the education comes from seeing how the end result looks
[05:33:23] <Zogatribe> if I was doing it I would include a unit test that used std::sort to validate the result .. to make a point
[05:33:29] <PJBoy> also there's no benchmarking code there
[05:33:44] <PJBoy> so that's far from fulfilling the homework assignment
[05:34:16] <PJBoy> I assume you didn't read the assignment
[05:34:22] <Zogatribe> correct
[05:34:29] <PJBoy> the whole point is to compare qsort and std::sort
[05:34:35] <Zogatribe> oh
[05:35:31] <quartz> I don't expect anyone to do my HW for me.
[05:36:25] <quartz> Although I've always wondered why it bothers some people that others "do their homework" for them.
[05:36:46] <PJBoy> well I agree with the complaint in general
[05:36:56] <Zogatribe> !homework
[05:36:57] <nolyc> We don't do homework (let alone yours)
[05:37:00] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[05:37:25] <Zogatribe> !0
[05:37:26] <nolyc> A constant expression with a value of 0 can be a null pointer constant. A null pointer constant can be converted to a null pointer value. A null pointer value has an implementation-defined bit pattern.
[05:37:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[05:39:00] *** Joins: myon98 (~myon98@user/myon98)
[05:40:18] <quartz> Again, never asked anyone to do my homework for me, I'm not expecting that here. I want to learn C++
[05:41:05] <PJBoy> :)
[05:41:16] <PJBoy> yeah that's perfectly clear
[05:42:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:44] *** ChanServ sets mode: +v npaperbot
[05:45:22] <norias> hi
[05:45:39] <norias> anyone have suggestions on a unit testing framework for C++?
[05:47:22] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[05:47:27] *** Joins: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8)
[05:47:27] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:48:04] <kalven> norias: gtest is pretty good.. catch is also good
[05:48:49] <norias> how's catch2?
[05:49:00] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[05:50:42] <norias> i'll run with gtest
[05:50:44] <norias> thanks
[05:53:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:54:31] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[05:55:52] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[05:58:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:59:23] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:00:51] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Ping timeout: 256 seconds)
[06:03:40] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:3511:c1b2:b4e7:7f1c)
[06:05:16] *** Quits: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8) (Quit: Leaving)
[06:05:45] <norias> hmm, ok, so obviously i have never done this unit testing stuff
[06:05:49] <norias> but..
[06:05:52] <norias> I want to
[06:06:10] <norias> right now i have a toy program all in one .cc file
[06:06:27] <norias> do i have to split that out into a header file to do unit testing?
[06:06:42] <norias> i'm reading these docs and not entirely getting how this works
[06:06:47] *** Joins: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a)
[06:07:35] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:c9dd:301:29f7:88f5) (Ping timeout: 250 seconds)
[06:12:12] <Alipha> PJBoy: the assignment said "sort a copy of the std::strings in increasing order using sort()" (not qsort)
[06:13:39] <PJBoy> https://bpa.st/WNRA#1L13
[06:14:15] <Alipha> oh
[06:14:26] <Alipha> yeah, that doesn't work
[06:14:31] <anyone> hm but memcpying std::string (in qsort) might work nevertheless, or?
[06:14:46] <Alipha> hm
[06:14:47] <PJBoy> nah I tried it
[06:14:58] <anyone> if the string is small enough, memcpy copies it all. If it's too large, it copies the pointer within the string object.
[06:15:00] <Alipha> it should work, actually?
[06:15:09] <PJBoy> got a munmap error
[06:15:09] <Alipha> oh
[06:15:10] <anyone> as long as the source is properly 'discarded', that might just fly
[06:15:35] <PJBoy> nah it'll have a pointer to its short string
[06:15:36] <Alipha> with small string optimization, the data pointer points into the std::string itself
[06:15:38] <Alipha> yep
[06:15:56] <PJBoy> then when the short string is copied elsewhere, that pointer gets copied as is, bad stuff in the dtor
[06:16:02] <Alipha> so it'd work if you only used long strings :-)
[06:18:38] <anyone> I could've sworn a reasonable string impl would use a bit/byte to flag short/long and not waste a pointer worth of chars
[06:19:13] <PJBoy> { vector<string> v{"001", "000", "011", "010", "000"}; qsort(data(v), size(v), sizeof(string), [](const void* lhs, const void* rhs) { return (*(const string*)lhs).compare(*(const string*)rhs); }); SHOW(v); }
[06:19:14] <geordi> v = {"001", "000", "011", "010", "000"} error: tried to delete pointer not returned by previous matching allocation. Aborted
[06:19:59] <Alipha> anyone: but then you're adding that bool check on every access of the std::string
[06:20:17] *** Joins: unyu (~pyon@user/pyon)
[06:20:53] <PJBoy> I dunno why there's ever a delete operation performed
[06:20:55] <Alipha> typically, c++ prioritizes speed over memory usage
[06:20:57] <anyone> Alipha: I guess it's a tradeoff whether you want to do a condition test, or follow an indirect pointer
[06:21:24] *** Quits: jplejacq (~jplejacq@68.71.169.160) (Ping timeout: 240 seconds)
[06:21:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:21:40] <anyone> https://lwn.net/Articles/774743/
[06:22:04] <anyone> at worst you do both, so yeah I guess you have a point.
[06:23:31] <Alipha> anyone: plus then you'd have misaligned data, so you couldn't optimize with SIMD instructions or whatnot
[06:24:14] <PJBoy> geordi -w { string a, b; memcpy(&a, &b, sizeof(b)); }
[06:24:15] <geordi> error: tried to delete pointer not returned by previous matching allocation. Aborted
[06:24:27] <PJBoy> crazy
[06:24:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:24:48] <anyone> https://youtu.be/kPR8h4-qZdk?t=935
[06:29:09] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:33:37] <Alipha> geordi -w { string a(35, 'a'), b(90, 'b'); char buf[sizeof(string)]; memcpy(buf, &b, sizeof(b)); memcpy(&b, &a, sizeof(a)); memcpy(&a, buf, sizeof(a)); cout << a, b; }
[06:33:38] <geordi> bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
[06:33:51] <Alipha> geordi -w { string a(5, 'a'), b(90, 'b'); char buf[sizeof(string)]; memcpy(buf, &b, sizeof(b)); memcpy(&b, &a, sizeof(a)); memcpy(&a, buf, sizeof(a)); cout << a, b; }
[06:33:52] <geordi> bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, Z[\NUL][\NUL][\NUL][\NUL] error: tried to delete pointer not returned by previous matching allocation. Aborted
[06:34:05] <Alipha> geordi -w { string a(5, 'a'), b(9, 'b'); char buf[sizeof(string)]; memcpy(buf, &b, sizeof(b)); memcpy(&b, &a, sizeof(a)); memcpy(&a, buf, sizeof(a)); cout << a, b; }
[06:34:05] <geordi> aaaaa[\NUL][\NUL][\NUL][\NUL], bbbbb error: tried to delete pointer not returned by previous matching allocation. Aborted
[06:34:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:40:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[06:41:41] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:41:47] <linext_> can i get some help with this?  https://i.ibb.co/9nkXHrD/image.png
[06:43:05] <linext_> i was thinking something along the lines of: Traits<enum T>::name(int index){ return T[index];}
[06:43:36] <linext_> however, traits is coded in the read-only section as a struct not a class
[06:44:18] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[06:44:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[06:45:32] <Alipha> linext_: right, you need to use template specialization
[06:48:32] <linext_> so can a struct have a static method called name?
[06:48:44] <Alipha> linext_: yes
[06:48:59] <linext_> ah, i thought structs were only data
[06:49:09] <Alipha> !struct
[06:49:10] <nolyc> The only difference between classes and structs is that the former default to private members and bases, while the latter default to public members and bases.
[06:49:23] <linext_> how do you get the name of an item in an Enum?
[06:49:29] <linext_> Fruit[0] isn't it
[06:50:37] <Alipha> linext_: there's not a way, much to the chagrin of decades of c and c++ programmers
[06:50:51] <linext_> hmm
[06:50:54] <Alipha> try using a series of if statements. or a switch-case, if you prefer
[06:51:14] <linext_> ah
[06:51:50] <Alipha> as far as template specialization, i'm having trouble finding decent examples online. i guess this: https://www.geeksforgeeks.org/template-specialization-c/ ... if you scroll down to the second section, "An Example Program for class template specialization"
[06:53:25] <Alipha> and to elaborate on nolyc's response, a struct can have member functions, it can have virtual member functions, you can inherit from them or have them inherit from other structs/classes, you can specify `private:`, `protected:`, and `public:` sections... everything that you can do with a class
[06:53:41] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:54:45] <Alipha> really, adding the class keyword was rather pointless--we could just use struct--but i'm sure the OOP fanboys threw a hissy fit
[06:55:23] *** Joins: millido (~millido@84.210.150.128)
[06:57:32] <linext_> are class enum types accessible using subscript indexes?
[06:58:08] <Alipha> No
[06:58:44] <Alipha> C and C++ enums are rather underwhelming
[06:59:03] <linext_> so for: enum class Fruit { apple, orange, pear };
[06:59:09] <linext_> Fruit::apple will not resolve to 0
[07:00:51] <linext_> i see what you mean with the if's or switch
[07:02:21] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:04:38] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 272 seconds)
[07:05:23] <norias> linext_: it won't?
[07:05:49] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[07:06:17] <norias> oh, class enums. hmm. i honestly don't know what the difference between those and a normal enum are
[07:06:26] <norias> to the googles!
[07:07:05] *** Joins: Azem (~haise01@user/haise01)
[07:08:51] <norias> oh, interesting
[07:10:24] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 252 seconds)
[07:13:44] <linext_> https://ideone.com/3u1Qu3
[07:13:54] <linext_> so that answer passed the test cases
[07:14:02] <linext_> i don't like hard-coding the enums into the if statements
[07:14:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[07:15:13] <norias> cool
[07:15:17] <norias> i dig it.
[07:15:54] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[07:18:09] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[07:18:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[07:19:05] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:20:12] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[07:21:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:23:59] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[07:24:21] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[07:25:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:25:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:30:12] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:3511:c1b2:b4e7:7f1c) (Ping timeout: 240 seconds)
[07:30:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:33:54] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:35:09] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[07:39:03] *** Joins: ejjfunky (~ejjfunky2@125.164.19.33)
[07:39:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:40:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[07:43:31] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[07:43:39] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[07:47:42] *** Quits: sreve_ (~quassel@p549d71aa.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[07:47:57] *** Joins: sreve (~quassel@p4ff4449e.dip0.t-ipconnect.de)
[07:48:11] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[07:51:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:54:40] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[07:56:24] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d90:7534:1084:d35f:6e3e:d5b7)
[08:04:51] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 252 seconds)
[08:08:11] <Alipha> linext_: yeah, there's nothing really any better you can do. Perhaps make an array, eg, std::string fruits[] = {"apple", "orange", "pear"};
[08:08:25] <Alipha> Though then the enum is kinda pointless
[08:09:08] <Alipha> There's a library called BetterEnums which does lots of macro trickery to get "enums" which are more powerful
[08:09:48] <ville> if it's a "thing" then you can macro what you need to go enum to string or string to enum
[08:10:37] <ville> or have a code generating step/precompiler in your build system do it for you
[08:11:24] *** Joins: Betal (~Betal@user/betal)
[08:13:17] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3) (Ping timeout: 240 seconds)
[08:16:50] *** Joins: Guest17 (~Guest17@d24-55-202-166.home4.cgocable.net)
[08:17:12] *** Guest17 is now known as trapmau5
[08:18:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:18:49] *** Quits: dsrt^ (~dsrt@50.235.176.163) (Remote host closed the connection)
[08:19:02] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:7811:16ab:241c:5609)
[08:21:16] *** Joins: Lazenca (Lazenca@user/lazenca)
[08:22:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:22:30] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[08:22:32] *** Joins: P_Dumbledore (~Prof_Dumb@2409:4042:4cc1:9458:6ebb:190b:4e02:508c)
[08:24:57] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d90:7534:1084:d35f:6e3e:d5b7) (Ping timeout: 240 seconds)
[08:25:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:26:39] *** Joins: fldme (~fldme@178.49.152.151)
[08:32:35] <norias> whoever stuggested googletest - thanks.
[08:32:50] <norias> it seems pretty slick. i like how easy it was to get it working with cmake
[08:33:20] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:34:15] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Read error: Connection reset by peer)
[08:34:54] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[08:36:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[08:37:00] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[08:38:08] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:39:00] *** Quits: ville (~ville@user/ville) (Ping timeout: 240 seconds)
[08:40:23] *** Joins: ville (~ville@user/ville)
[08:41:47] <yates> if i overload the + and = operators, do i get a += overload for free?
[08:43:56] *** Joins: savolla (~quassel@84.44.28.28)
[08:44:58] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[08:45:01] <ville> no
[08:46:33] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:46:36] <norias> haha
[08:46:52] <norias> would that be like... function composing?
[08:46:55] <norias> like haskell?
[08:48:19] <yates> since the answer is no, then why isn't "x += y" just a syntactic shortcut for "x = x + y"?
[08:49:16] <ville> c++ makes no presumption that things behave in mathematically sensible ways. you're free to use and misuse things as you see fit
[08:50:34] <yates> hmm. i can't think of a situation where x += y would be be equivalent to x = x + y
[08:50:41] <InPhase>  The solution is obviously a spaceship adder.  <+>
[08:51:11] <ville> yates:  struct aa { int const x; } aa operator +(aa, aa);
[08:51:28] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[08:51:30] <yates> s/be be/not be/
[08:52:04] <ville> anyways yes it's possible to think of some reasonable defaults that would be alright for some or many situations. this just hasn't been codified
[08:52:27] <yates> ok.
[08:52:58] <yates> new question: if i overload operator +, then mustn't i also overload operator =?
[08:53:06] <ville> no
[08:53:20] <yates> well why not?
[08:53:36] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[08:54:17] <ville> operators don't need to be closed, so there's no need to be assignable to the same type
[08:54:46] <ville> struct meter {}; struct square_meter{}; square_meter operator *(meter, meter);
[08:55:48] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[08:55:59] <yates> if i write x = y + z, where x, y, and z are type T, and i haven't overloaded = for T, then what happens?
[08:56:14] <yates> (and i have overloaded + for T)
[08:56:17] <ville> try?
[08:57:01] <yates> because a result does not necessarily indicate a principle?
[08:57:49] <yates> i guess if it fails, it does.. lol
[08:57:49] <InPhase> { S a{4}, b{6}; cout << (a + b).x; } struct S { int x; S operator+(const S& o) const { cout << "side-effects are cool. "; return S{x*o.x}; } };  // yates
[08:57:50] <geordi> side-effects are cool. 24
[08:58:35] <InPhase> yates: The only enforcers of sanity are the glares from your coworkers.
[08:59:18] <ville> yates: yes that is unfortunately true, but at the same time we sort of do expect you to have done some reasonable research to things before you ask.
[09:00:25] <ville> for example the standard does specify when what types of operator = are generated
[09:00:35] <ville> or aren't for that matter
[09:01:18] <ville> if you don't like to read the standard then i am sure cppreference has its perhaps more readable version of much the same information
[09:02:30] <yates> ville: i did read cppreference on this and came away confused still
[09:02:43] <yates> perhaps not thoroughly enough
[09:02:55] <yates> i've also consulted a book on. still was confused
[09:03:06] <yates> i have done SOME work on the subject.
[09:04:41] <yates> i am wondering if you do x = y + z, and = isn't overloaded, does C++ "default" = to some operation like "copy all internal variables"?
[09:05:15] <yates> which would be bad in some cases, such as when the internal variables include pointers to allocated memory
[09:05:22] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:05:53] <ville> then perhaps asking about the text you read, such as giving a link to the cppreference page and pointing out the chapter that confuses you is the a way to ask a question that shows you've or are doing the pre-requisite work
[09:06:22] <yates> ville: i think you're being obstinate
[09:07:30] <ville> from this side of the internet you look like someone who came in asking the most basic questions that are explained in just about any beginner text with out doing any basic work them selves
[09:07:58] <ville> i am telling you how to avoid looking like that
[09:08:36] *** Quits: P_Dumbledore (~Prof_Dumb@2409:4042:4cc1:9458:6ebb:190b:4e02:508c) (Ping timeout: 240 seconds)
[09:08:56] <ville> default operator = does "byte-wise" copy
[09:09:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:09:53] <ville> or rather it'll call each member's operator = in turn, which of course for builtin types is just copying the bytes
[09:10:59] <yates> please show me where the default "=" operator is discussed here: https://en.cppreference.com/w/cpp/language/operators
[09:11:11] <yates> i do not see it.
[09:11:30] <yates> ok, well thanks for the response
[09:12:51] <ville> Assignment operator and click the links in: "copy assignment" and "move assignment"
[09:14:40] *** Joins: P_Dumbledore (~Prof_Dumb@2409:4042:4cc1:9458:ea4a:9cde:8cba:6aa8)
[09:14:49] <ville> then on the copy assignment page, https://en.cppreference.com/w/cpp/language/copy_assignment go to: " Implicitly-defined copy assignment operator"
[09:20:58] <yates> thanks - answers my question
[09:21:34] <yates> all i have are bool, uint8_t, and uint32_t, so implicit copy is just fine
[09:22:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:25:00] <yates> isn't it valid syntax to write x = -y where x, y are signed POD types?
[09:25:21] <yates> in that case, then isn't "-" considered a unary operator? i don't see it on the operators page
[09:26:47] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:30:56] <yates> nm it's in my book
[09:31:30] *** Joins: emhwfhrom^ (~emhwfhrom@50.235.176.163)
[09:37:30] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:37:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[09:38:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:42:17] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:42:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:44] *** ChanServ sets mode: +v npaperbot
[09:42:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[09:45:25] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:49:01] <ville> yates: you may have slightly incorrect understanding what POD means. the term also includes certain kinds of class types. well included. the term has been deprecated from c++
[09:49:52] <ville> perhasp you meant the arithmetic types
[09:50:04] <ville> http://www.eelis.net/c++draft/basic.fundamental#13
[09:51:53] <ville> here's what POD used to mean: http://www.eelis.net/c++draft/depr.meta.types#4.sentence-3
[09:52:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[09:53:18] *** Quits: fldme (~fldme@178.49.152.151) (Quit: Client closed)
[09:55:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:57:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:58:36] *** Quits: P_Dumbledore (~Prof_Dumb@2409:4042:4cc1:9458:ea4a:9cde:8cba:6aa8) (Ping timeout: 240 seconds)
[10:09:36] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[10:09:50] *** Joins: rvalue (~rvalue@user/rvalue)
[10:11:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:12:41] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[10:14:43] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Remote host closed the connection)
[10:16:05] *** Joins: angelacrust (~angelacru@182.64.13.254)
[10:16:43] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:16:51] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:23:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:27:07] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:28:57] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:28:57] *** Quits: angelacrust (~angelacru@182.64.13.254) (Quit: Client closed)
[10:29:00] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:29:50] *** Quits: Lazenca (Lazenca@user/lazenca) (Remote host closed the connection)
[10:30:16] *** Cyp_ is now known as Cyp
[10:30:59] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.19)
[10:34:55] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 240 seconds)
[10:35:40] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[10:39:06] *** Joins: angelacrust (~angelacru@182.64.13.254)
[10:39:26] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:40:35] *** Joins: adlternative (~adl@111.2.144.92)
[10:41:01] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:42:26] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:44:08] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:45:46] *** Quits: adlternative (~adl@111.2.144.92) (Quit: Konversation terminated!)
[10:49:23] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[10:53:56] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4cc1:9458:a2fe:2714:fd6a:4f7c)
[10:54:36] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[10:55:39] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:57:06] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[10:59:02] *** Joins: andreasbuhr (~quassel@p549dba39.dip0.t-ipconnect.de)
[11:03:25] *** Quits: Chaser (~Chaser@user/chaser) (Ping timeout: 240 seconds)
[11:05:39] *** Joins: Chaser (~Chaser@user/chaser)
[11:06:13] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:07:41] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:11:40] *** Joins: rajkosto (~rajkosto@109-93-41-254.dynamic.isp.telekom.rs)
[11:12:13] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[11:13:20] *** Joins: Didgy (~np_sk@82.147.37.145)
[11:14:16] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[11:16:09] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[11:17:24] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[11:19:49] *** Quits: Didgy (~np_sk@82.147.37.145) (Ping timeout: 256 seconds)
[11:22:17] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[11:22:32] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[11:23:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:28:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:31:35] *** Joins: Didgy74 (~np_sk@82.147.37.145)
[11:31:35] *** Didgy74 is now known as Didgy
[11:32:03] *** Joins: MajorBiscuit (~MajorBisc@c-001-018-023.client.tudelft.eduvpn.nl)
[11:33:21] *** Quits: Didgy (~np_sk@82.147.37.145) (Client Quit)
[11:33:53] *** Joins: Didgy (~np_sk@82.147.37.145)
[11:35:38] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:40:24] *** Joins: DidgyNilsipus[m] (~didgymatr@2001:470:69fc:105::1:c193)
[11:43:47] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[11:43:52] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:44:11] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:48:09] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:50:21] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[11:53:20] *** Joins: rendar (~rendar@user/rendar)
[11:54:42] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:59:38] *** Quits: Didgy (~np_sk@82.147.37.145) (Quit: Konversation terminated!)
[12:02:48] *** Joins: Didgy (~np_sk@82.147.37.145)
[12:02:52] *** Cahaan_ is now known as Cahaan
[12:03:20] <fluter> hi, so the base class has a public virutal function, is it a good practice to mark it as a private in child class ?
[12:03:36] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:03:40] <fluter> knowningly that the child class will only be called by base class pointers
[12:03:53] <fluter> it looks weird but it's valid code.
[12:04:13] <DidgyNilsipus[m]> For what reason do you want to do this?
[12:06:42] *** Quits: Didgy (~np_sk@82.147.37.145) (Client Quit)
[12:07:10] *** Joins: cosimone (~user@93-47-231-171.ip115.fastwebnet.it)
[12:07:28] <fluter> DidgyNilsipus[m]: so that the implementation details of the protocol is hidden
[12:07:36] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[12:07:42] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Read error: Connection reset by peer)
[12:07:55] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[12:08:34] <DidgyNilsipus[m]> Hmm, I've never personally ran into a scenario where I would mark the childs overriden method to be private at least
[12:09:13] *** Joins: Didgy (~np_sk@82.147.37.145)
[12:09:49] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[12:11:05] <Shell> fluter: that sounds bizarre to do.
[12:11:14] <fluter> Shell: why?
[12:11:26] <fluter> our internal code bases do this a lot :S
[12:12:14] <Shell> because if class A has a public method foo, and B is a subclass of A, you expect to be able to call foo on B. that's... just how classes work.
[12:14:53] <Shell> (the fancy term for this opinion being the Liskov substitution principle, iirc.)
[12:16:32] <ville> fluter: you're half-describing something called template method: https://en.wikipedia.org/wiki/Template_method_pattern not to be confused with c++ templates
[12:17:11] *** Joins: jsbach (~jsbach@2a01:c22:accf:9400:f89c:8bec:657d:22e8)
[12:21:09] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[12:21:58] <AliceMeows> Could no_unique_address ever break anything assuming there are no compiler bugs and ABI isn't taken into consideration?
[12:23:18] <NyB> AliceMeows: it should be fine? Although I've found its behavior quite surprising sometimes...
[12:24:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:24:28] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[12:25:10] <AliceMeows> Surprising?
[12:27:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:28:54] <ville> what would be abi exactly?
[12:29:00] *** Joins: bindu (~bindu@user/bindu)
[12:31:36] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:32:19] *** Joins: bindu (~bindu@user/bindu)
[12:32:55] <AliceMeows> Apparently in some cases it can break ABI but I suspect it only applies to compiled libraries
[12:33:24] *** Quits: Didgy (~np_sk@82.147.37.145) (Ping timeout: 240 seconds)
[12:34:04] <ville> well yeah something has to be compiled to become binary... but you could observe it in your project if you switch compilers and don't do a full rebuild
[12:34:31] <ville> that is reuse object files from previous compiler. not dependent on something being a library
[12:34:49] <AliceMeows> Indeed
[12:35:07] <ville> personally i separate my builds based on compiler among other things into their own directories
[12:35:37] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:35:59] <ville> build/compiler/build_type/ sort of deal
[12:38:31] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:38:53] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[12:39:15] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[12:39:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:42:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:43:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[12:43:37] *** Joins: kevr (~kevr@user/kevr)
[12:46:24] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:50:54] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[12:52:20] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 272 seconds)
[12:53:21] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:56:32] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:58:09] *** Quits: dongcarl (~dongcarl@pool-96-232-179-212.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[12:58:47] *** Joins: furrymcgee (~devuan@cgn-89-1-211-93.nc.de)
[13:01:05] *** Joins: Didgy (~np_sk@82.147.37.145)
[13:10:12] *** Quits: Didgy (~np_sk@82.147.37.145) (Ping timeout: 240 seconds)
[13:11:50] *** Joins: dongcarl (~dongcarl@pool-96-232-179-212.nycmny.fios.verizon.net)
[13:13:35] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:7811:16ab:241c:5609) (Quit: Leaving)
[13:14:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:21:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[13:22:12] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[13:24:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:28:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:30:27] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[13:30:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:32:01] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[13:32:42] *** Quits: angelacrust (~angelacru@182.64.13.254) (Quit: Client closed)
[13:32:45] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:41:21] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:42:33] *** Quits: rajkosto (~rajkosto@109-93-41-254.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[13:42:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:46] *** ChanServ sets mode: +v npaperbot
[13:45:57] *** Quits: mitch0 (~mitch@178-164-240-26.pool.digikabel.hu) (Quit: leaving)
[13:46:14] *** Joins: mitch0 (~mitch@178-164-240-26.pool.digikabel.hu)
[13:48:36] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:53:11] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[13:54:14] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[13:57:40] *** Joins: angelacrust (~angelacru@182.64.13.254)
[13:59:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:59:55] *** Quits: fengdaolong (~fengdaolo@171.43.210.93) (Ping timeout: 256 seconds)
[14:01:05] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:01:31] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:03:49] <RokerHRO>  
[14:04:45] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:04:51] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:7811:16ab:241c:5609)
[14:05:48] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (Ping timeout: 272 seconds)
[14:06:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:08:04] *** Quits: trapmau5 (~Guest17@d24-55-202-166.home4.cgocable.net) (Quit: Client closed)
[14:08:12] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:08:57] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[14:11:34] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[14:12:21] *** Joins: Atque (~Atque@user/atque)
[14:14:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:17:24] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:7811:16ab:241c:5609) (Ping timeout: 240 seconds)
[14:17:39] *** Joins: hinata (~hinata@2409:4042:e09:d31f:7811:16ab:241c:5609)
[14:17:42] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:18:02] *** Parts: Prof_Dumbledore (~Prof_Dumb@2409:4042:4cc1:9458:a2fe:2714:fd6a:4f7c) (Leaving)
[14:21:16] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Quit: Konversation terminated!)
[14:22:29] *** Quits: mitch0 (~mitch@178-164-240-26.pool.digikabel.hu) (Remote host closed the connection)
[14:22:29] *** Quits: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu) (Remote host closed the connection)
[14:25:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:28:48] *** Joins: Xardas (~Xardas@149.233.51.127)
[14:29:02] <Xardas> I'm reading now this line from a book " some lvalues, such as const objects, may not be the left-hand operand of an assignment "
[14:29:14] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:29:23] <Xardas> but when we do ` const int i = 3; `
[14:29:31] <Xardas> i is an lvalue
[14:29:42] <Xardas> i is a left-hand operand of an assignment
[14:29:46] *** Joins: baltazar (~baltazar@195.199.251.47)
[14:30:10] <Xardas> So this doesn't make sense, right ?
[14:30:20] <Svitkona> that's not an assignment, that's a declaration
[14:30:47] <michaelis> Declaration and definition, right?
[14:31:09] <Xardas> Is it also not initialization ?
[14:31:21] <Xardas> since we are initializing the variable i with the value 3
[14:31:22] <michaelis> Your const value must be defined somewhere, otherwise it would be strange.
[14:31:25] <Svitkona> yeah but that's not assignment
[14:31:52] <Xardas> That was really clear.
[14:32:00] <Xardas> Thank you :)
[14:32:03] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[14:32:23] <michaelis> :)
[14:35:18] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:38:16] *** Joins: proller (~p@2a02:6b8:0:40c:99de:266d:6fee:27b9)
[14:45:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[14:46:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[14:48:10] *** Joins: seninha (~seninha@user/seninha)
[14:48:36] *** Quits: angelacrust (~angelacru@182.64.13.254) (Quit: Client closed)
[14:54:28] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[14:56:33] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[14:57:04] *** Joins: ivii (~ivan@user/ivii)
[14:57:44] *** Joins: xkuru (~xkuru@user/xkuru)
[15:01:36] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[15:04:21] *** Joins: xkuru (~xkuru@user/xkuru)
[15:05:57] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:06:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[15:06:57] *** Joins: artok (~azo@mobile-access-b0486a-201.dhcp.inet.fi)
[15:11:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[15:14:50] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 272 seconds)
[15:14:50] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[15:17:23] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:21:40] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:23:50] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[15:25:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:27:36] *** Quits: MajorBiscuit (~MajorBisc@c-001-018-023.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[15:29:07] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:29:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:30:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:31:07] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:33:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:34:28] *** Quits: foul_owl (~kerry@23.82.193.104) (Ping timeout: 272 seconds)
[15:34:32] *** Quits: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (Ping timeout: 240 seconds)
[15:38:59] *** Joins: theArthurDent (~user@user/theArthurDent)
[15:39:10] *** Joins: luizfrds (~Luiz@152.250.243.147)
[15:41:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[15:43:56] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:48:05] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-023.client.tudelft.eduvpn.nl)
[15:48:57] *** Joins: foul_owl (~kerry@23.82.193.88)
[15:54:45] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 272 seconds)
[15:56:57] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[15:58:36] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 240 seconds)
[15:59:31] *** Parts: jplejacq (~jplejacq@24.224.90.176) (Leaving.)
[16:10:13] *** Joins: bindu (~bindu@user/bindu)
[16:14:54] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:17:32] *** Quits: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) (Remote host closed the connection)
[16:19:23] *** Quits: ejjfunky (~ejjfunky2@125.164.19.33) (Remote host closed the connection)
[16:21:35] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[16:22:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:24:45] *** Quits: hinata (~hinata@2409:4042:e09:d31f:7811:16ab:241c:5609) (Quit: Leaving)
[16:25:27] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:26:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:27:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[16:27:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:28:51] *** Joins: lxsameer (lxsameer@user/lxsameer)
[16:30:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:32:59] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:34:32] *** Quits: baltazar (~baltazar@195.199.251.47) (Quit: leaving)
[16:35:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:47] *** Joins: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[16:39:20] *** Joins: b_jonas (~x@catv-176-63-4-103.catv.fixed.vodafone.hu)
[16:39:48] *** Quits: immibis_ (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Remote host closed the connection)
[16:41:19] *** Joins: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de)
[16:41:41] *** Quits: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[16:42:50] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:43:10] *** Quits: ville (~ville@user/ville) (Quit: ville)
[16:46:46] *** Joins: ville (~ville@user/ville)
[16:47:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fd91:b5ed:c30f:b9c2)
[16:47:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fd91:b5ed:c30f:b9c2) (Changing host)
[16:47:18] *** Joins: skapata (~Skapata@user/skapata)
[16:48:45] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:49:39] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:52:03] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:55:57] *** Joins: zunino (~zunino@2804:7f5:f380:74e0:bb03:11ad:2cf5:e64d)
[16:59:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:05:27] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:07:36] *** Quits: lh_not_b1t (~lh_bot@mingw-w64/developer/lhmouse) (Quit: Lost terminal)
[17:07:48] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[17:09:00] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[17:12:03] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:12:10] *** Quits: proller (~p@2a02:6b8:0:40c:99de:266d:6fee:27b9) (Remote host closed the connection)
[17:15:25] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:15:25] *** gentooclimax is now known as climax
[17:16:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[17:16:33] *** Joins: proller (~p@2a02:6b8:0:40c:f7ae:3beb:5a9b:22d3)
[17:17:24] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[17:17:27] *** Joins: stefanos82 (~stefanos8@213-145-144.netrun.cytanet.com.cy)
[17:17:44] *** Joins: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net)
[17:18:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:19:48] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[17:22:09] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[17:22:16] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:22:24] *** Joins: baltazar (~baltazar@84-236-101-128.pool.digikabel.hu)
[17:24:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[17:24:36] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:25:18] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[17:26:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:30:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:32:53] *** climax is now known as gentooclimax
[17:34:10] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[17:37:25] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:59] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[17:40:09] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[17:40:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 250 seconds)
[17:41:43] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[17:42:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:47] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:42:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:47] *** ChanServ sets mode: +v npaperbot
[17:43:48] *** Quits: stefanos82 (~stefanos8@213-145-144.netrun.cytanet.com.cy) (Quit: Leaving)
[17:45:01] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[17:47:42] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:28] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:50:00] *** Joins: MatSharrow (~matthew@60.102.9.51.dyn.plus.net)
[17:51:54] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 272 seconds)
[17:55:22] *** Quits: MatSharrow (~matthew@60.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[17:55:23] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:59:19] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-023.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[18:02:03] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:02:27] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:06:20] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:06:26] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[18:07:37] *** Joins: maroloccio (~marolocci@pousada3ja.mma.com.br)
[18:08:20] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:08:38] *** Quits: manx (xuew@p200300e18f3aa800022215fffe03cf97.dip0.t-ipconnect.de) (Quit: manx)
[18:09:25] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:11:53] *** Joins: manx (xuew@p57b5c023.dip0.t-ipconnect.de)
[18:12:58] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[18:20:48] *** Joins: Xardas (~Xardas@149.233.51.127)
[18:21:51] *** gentooclimax is now known as climax
[18:22:31] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[18:23:14] *** Quits: sigma__ (~sigma@86.57.93.233) (Quit: Konversation terminated!)
[18:24:06] *** Joins: arch-angel (~quassel@user/arch-angel)
[18:25:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[18:26:50] *** climax is now known as gentooclimax
[18:27:17] *** Joins: tachoknight (~textual@2600:1700:3060:3ee0:f467:fda7:b67f:3b6)
[18:27:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:29:24] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 240 seconds)
[18:30:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[18:31:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:32:36] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[18:36:15] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 252 seconds)
[18:36:52] *** gentooclimax is now known as climax
[18:37:22] *** Joins: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu)
[18:37:43] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[18:37:47] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Client Quit)
[18:39:59] <Alipha> Xardas: ` const int i = 3; ` is construction/initialization and is the same as ` const int i{3}; ` and ` const int i(3); `. This is assignment: ` i = 3; `
[18:40:36] *** Quits: emhwfhrom^ (~emhwfhrom@50.235.176.163) (Ping timeout: 240 seconds)
[18:40:37] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[18:42:08] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:44:23] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[18:44:33] *** Joins: Xardas (~Xardas@149.233.51.127)
[18:47:27] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[18:47:44] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[18:48:43] *** Joins: teepee (~teepee@openscad/teepee)
[18:49:00] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Ping timeout: 240 seconds)
[18:50:07] *** Joins: Leone (~Leo@108.175.224.215)
[18:50:29] *** Joins: blacked (~blacked@user/blacked)
[18:50:33] <blacked> what does bjarne stroustrup think of rust?
[18:50:34] <blacked> :/
[18:51:17] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:52:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[18:52:32] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:54:08] <blacked> Oh i was switching to Rust, going through the hype
[18:54:15] <blacked> later changed my mind
[18:54:17] <blacked> https://www.youtube.com/watch?v=ksTyCQwHGro this
[18:54:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:54:34] <blacked> and i'm again in c++ :*  i like bjarne
[18:54:54] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:55:17] <blacked> Yruama what do you think of that video points?
[18:56:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[18:57:33] <Yruama> blacked, i too lazy to spend time to watch this video
[18:58:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[18:58:44] <blacked> oh ok Yruama  here is slides https://onedrive.live.com/view.aspx?resid=FB612199F19B150B!185118&ithint=file%2cpptx&authkey=!ANsjiQBsoZ1OjNE
[18:58:55] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:59:19] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[19:00:49] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[19:04:26] <Xardas> Alipha yup . I gotcha
[19:04:44] <Xardas> I think bjarne hates c++
[19:05:01] <Xardas> No sorry
[19:05:09] <Xardas> I mean java
[19:05:13] <Xardas> hhhhhhh
[19:05:31] <Xardas> euh i'm confused what am i saying
[19:06:29] <TinoDidriksen> That is all rather off topic - take it to #C++-social
[19:07:56] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (Read error: Connection reset by peer)
[19:12:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[19:12:42] *** Joins: tradar (~tradar@user/tradar)
[19:15:02] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Remote host closed the connection)
[19:15:36] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[19:18:05] *** Quits: mel (~caramel@user/caramel) (Ping timeout: 256 seconds)
[19:18:35] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[19:19:40] *** Joins: emhwfhrom^ (~emhwfhrom@50.235.176.163)
[19:19:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 272 seconds)
[19:20:26] <Yruama> blacked, i just don't understand or not aware about half of the presented things
[19:21:09] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[19:21:49] *** Joins: teut (~teut@122.161.83.81)
[19:21:49] <blacked> i think the professional rust developer would understand what he is saying ?
[19:21:50] <blacked> (although i also didnt understan,d because i'vent touched any low level things, but i kind of agree some of the stuffs he is showing)
[19:24:31] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[19:26:47] *** Joins: seninha (~seninha@user/seninha)
[19:27:32] *** nwulfe is now known as night_wulfe
[19:27:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:28:12] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[19:28:48] <Yruama> this presentation feels to me volontary and obviously biased.
[19:30:56] <blacked> right  he is kind of  shitty  hating on Rust telling things just negatively, ,but  but his points looks right.
[19:31:15] <Yruama> i saw one or two critics where IMHO C++ is not better
[19:31:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:32:17] <blacked> yes its not better, i dont like c++ either, i like bjarne so love also goes to c++ , but as new is best as rust, but he giving damn points, that is i feel fear
[19:33:00] <blacked> like redox-os, why they are  just using  unsafe{} like *100000 times , while i heard secure in rust is not using much unsafe{}
[19:33:20] <blacked> Yruama would be great if someone make reaction video of him , as a defense of rust .
[19:34:22] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[19:34:57] *** Joins: mintograde (~mintograd@47.201.5.61)
[19:37:43] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[19:38:47] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[19:39:55] *** Joins: pah (~pah@user/pah)
[19:40:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[19:42:52] *** Quits: emhwfhrom^ (~emhwfhrom@50.235.176.163) (Remote host closed the connection)
[19:46:20] <Yruama> how i can prevent a program to access any system wide library ? it's for a test
[19:46:23] *** Joins: sobkas (~sobkas@95.175.17.217)
[19:46:43] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[19:46:47] <imMute> Yruama: not on topic for this channel, but chroots might help
[19:47:34] <Yruama> imMute, there isn't an easiest way, like erasing an environment varible in the shell ?
[19:49:13] <AliceMeows> Yruama: there are always ways around it, its a hopeless battle
[19:50:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[19:51:21] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[19:51:46] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:53:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:54:00] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:57:38] <Shell> Yruama: easiest way I can think of: run it in a Docker container with no libraries. FROM scratch\nCOPY binary /binary\nCMD ["/binary"]
[19:58:47] *** Joins: Enitin (~Enitin@82.102.22.86)
[19:59:16] *** Joins: Xardas (~Xardas@149.233.51.127)
[19:59:47] <PJBoy> you can be unsafe when writing a function, but callers can still use the function in safe mode
[19:59:57] <PJBoy> so there's still value
[20:00:18] *** Joins: AmR (~AmREiSa@156.199.14.65)
[20:00:46] <Yruama> Shell, i'm totally ignorant about docker. What i was trying to do is almost useless, i wanted to determine if some binary can run without those lib
[20:00:48] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/02/17 UTC) 64 Bit)
[20:01:08] *** Joins: Tempesta (~Tempesta@user/tempesta)
[20:02:19] *** Joins: Rynn (~rynn@216.30.158.198)
[20:07:29] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[20:07:29] *** Joins: Markow (~Markow@176.122.215.103)
[20:07:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[20:16:21] *** Quits: zunino (~zunino@2804:7f5:f380:74e0:bb03:11ad:2cf5:e64d) (Ping timeout: 252 seconds)
[20:16:26] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:16:42] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:18:14] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[20:18:23] *** Joins: zunino (~zunino@2804:7f5:f380:9edf:bc27:5e20:ffa3:eff1)
[20:18:29] *** Quits: zunino (~zunino@2804:7f5:f380:9edf:bc27:5e20:ffa3:eff1) (Client Quit)
[20:23:07] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: Textual IRC Client: www.textualapp.com)
[20:24:40] *** Joins: savolla (~quassel@95.10.205.18)
[20:24:43] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[20:25:20] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:28:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:28:53] <acidtonic> I want to read a variable-length binary protocol (mostly just ascii except for some payloads near the end) into a class object, normally would use a bunch of fread() calls into a struct, Is there a better way in c++ without using libraries?
[20:29:17] <acidtonic> Implementing this -> (Section 2.2.2 shows some structures) https://github.com/Rickedb/OpenProtocolInterpreter/blob/master/docs/OpenProtocol_Specification.pdf
[20:29:58] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[20:31:36] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.213)
[20:31:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[20:32:42] <Alipha> acidtonic: not particularly. being c++, we'd generally suggest std::ifstream::read instead of std::fread. and for dealing with endianness for integers, i'd suggest using: https://github.com/alipha/cpp/tree/master/endian
[20:32:51] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.19) (Ping timeout: 252 seconds)
[20:33:03] <Alipha> (a single header file, endian.hpp, doesn't count as a "library", right?) ;-)
[20:33:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:36:06] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[20:37:49] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:38:19] <acidtonic> Alipha, I have a vector<char> currently, struggling with a library that I believe should be giving me vector<unsigned char>, is it safe to throw ifstream the iterator from the vector<char> or will bad things happen?
[20:41:43] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[20:42:25] *** Quits: AssKoala (~asskoala@user/asskoala) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[20:43:33] <Alipha> acidtonic: what function of ifstream are you calling with the vector iterator?
[20:43:36] *** pah is now known as pa
[20:44:01] <acidtonic> Alipha, I haven't wrote that part yet just that was my plan
[20:44:54] *** Joins: blacked (~blacked@user/blacked)
[20:44:56] <acidtonic> as it stands I have my data in vector<char> and I'm trying to read it into a struct. Some of the fields at the beginning are variable-length which means I have to read and populate as I go, fread style
[20:45:15] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:45:40] *** Joins: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469)
[20:45:41] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[20:45:41] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[20:45:41] *** Joins: AssKoala (~asskoala@user/asskoala)
[20:46:04] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 272 seconds)
[20:48:25] *** Quits: savolla (~quassel@95.10.205.18) (Read error: Connection reset by peer)
[20:48:53] *** Joins: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8)
[20:48:54] *** Joins: savolla (~quassel@95.10.205.18)
[20:50:51] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[20:52:04] <Alipha> acidtonic: you probably want to use vector<char>::data() instead of iterators, so that you get a char*. and it's fine to reinterpret_cast between char* and unsigned char*
[20:55:00] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Remote host closed the connection)
[20:55:36] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[20:58:57] *** Quits: svm_invictvs_ (~svm_invic@user/svm-invictvs/x-6696469) (Quit: Leaving)
[21:02:27] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:03:04] *** Joins: teut (~teut@122.161.83.81)
[21:05:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[21:06:20] *** Quits: savolla (~quassel@95.10.205.18) (Ping timeout: 272 seconds)
[21:06:36] *** Quits: causative (~halberd@user/causative) (Ping timeout: 240 seconds)
[21:07:43] *** Quits: theArthurDent (~user@user/theArthurDent) (Quit: ERC (IRC client for Emacs 27.1))
[21:07:46] *** Joins: seninha (~seninha@user/seninha)
[21:08:20] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[21:09:12] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:09:25] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[21:09:40] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:10:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[21:10:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:11:17] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[21:13:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:14:08] *** Joins: immibis_ (~hexchat@dynamic-089-204-139-245.89.204.139.pool.telefonica.de)
[21:15:26] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[21:15:30] *** Quits: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu) (Quit: leaving)
[21:15:34] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[21:15:46] *** Joins: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu)
[21:17:06] *** Quits: immibis (~hexchat@dynamic-089-204-138-200.89.204.138.pool.telefonica.de) (Ping timeout: 272 seconds)
[21:18:29] <Zogatribe> factoid !0 needs updating for C++20
[21:19:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[21:19:49] *** Quits: sobkas (~sobkas@95.175.17.217) (Read error: Connection reset by peer)
[21:20:40] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[21:20:56] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[21:22:15] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc3-git-f4bc5bb-Pogorze-Karpackie-CUSTOM-KERNEL)
[21:25:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:99b3:1dcb:8c2a:aa53)
[21:26:37] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.213) (Ping timeout: 272 seconds)
[21:26:45] <PJBoy> howso?
[21:28:26] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:28:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:32:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:32:56] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:34:05] <Zogatribe> you can only use a literal 0 instead of nullptr rather than the more general "null pointer constant"
[21:34:28] *** Joins: lxsameer (lxsameer@user/lxsameer)
[21:36:06] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:99b3:1dcb:8c2a:aa53) (Ping timeout: 252 seconds)
[21:36:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:37:06] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:38:36] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1bd:44f:edc3:e663)
[21:40:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:40:54] <PJBoy> that seems to be a C++11 change
[21:42:06] <Zogatribe> yeah
[21:42:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:47] *** ChanServ sets mode: +v npaperbot
[21:44:58] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[21:45:51] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[21:46:39] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[21:46:49] <PJBoy> !0
[21:46:50] <nolyc> Integer literal 0 is a null pointer constant. A null pointer constant can be converted to a null pointer value. A null pointer value has an implementation-defined bit pattern.
[21:47:06] *** Quits: proller (~p@2a02:6b8:0:40c:f7ae:3beb:5a9b:22d3) (Ping timeout: 252 seconds)
[21:47:59] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[21:50:12] <Alipha> what's a "general 'null pointer constant'"?
[21:51:33] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[21:51:53] <BtbN> 0
[21:52:08] <PJBoy> 0 or nullptr
[21:52:12] <PJBoy> or NULL
[21:52:24] <PJBoy> where NULL can be a compiler extension
[21:53:35] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:55:43] <Alipha> so Zogatribe is saying NULL can't be used anymore?
[21:55:46] *** Joins: pulse (~pulse@user/pulse)
[21:56:54] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[21:58:58] <Alipha> << std::nullptr_t{}
[21:58:59] <geordi> nullptr
[21:59:36] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:00:19] <Alipha> << TYPE(std::nullptr_t{})
[22:00:20] <geordi> prvalue nullptr_t
[22:00:48] <Alipha> seems that `std::nullptr_t{}` is a valid null pointer constant
[22:01:07] <Alipha> "A null pointer constant is an integer literal ([lex.icon]) with value zero or a prvalue of type std​::​nullptr_t."
[22:01:55] <Alipha> { void *p = 0L; void *q = 0ULL; }
[22:01:56] <geordi>  
[22:02:30] <Alipha> also valid null pointer constants ^
[22:02:49] *** Quits: andreasbuhr (~quassel@p549dba39.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:03:23] <Alipha> and NULL is valid: The macro NULL is an implementation-defined null pointer constant.
[22:04:05] <Alipha> i'm not sure what Zogatribe is saying needs to be updated in !0
[22:04:15] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[22:05:15] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[22:05:33] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[22:05:55] *** Joins: kevr (~kevr@user/kevr)
[22:06:56] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[22:07:00] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:12:08] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:13:03] <PJBoy> before, it said "A constant expression with a value of 0 can be a null pointer constant"
[22:13:13] <PJBoy> which would have included things like `1-1`
[22:13:27] <Alipha> ah
[22:13:38] <Alipha> did you change !0 already?
[22:13:40] <PJBoy> yeah
[22:13:58] <Alipha> PJBoy: thanks for confusing me :-P
[22:14:21] <Alipha> i was looking at !0 and wasn't seeing anything wrong with it
[22:14:42] <PJBoy> if I was around 20 minutes ago I would have clarified
[22:14:45] <PJBoy> <_<;
[22:14:47] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:15:06] <PJBoy> also dang
[22:15:09] <PJBoy> !2d array
[22:15:10] <nolyc> std::vector<std::vector<T> > matrix(rows, std::vector<T>(cols,initial_value));
[22:15:18] <PJBoy> I can't believe we have that factoid
[22:15:56] <Alipha> well, if performance or memory usage isn't an issue, i'd use that because it's quick and easy ;-)
[22:16:34] *** Joins: MatSharrow (~matthew@60.102.9.51.dyn.plus.net)
[22:16:46] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[22:17:05] <PJBoy> :(
[22:17:15] <PJBoy> mdarray when
[22:17:58] *** Joins: Betal (~Betal@user/betal)
[22:18:09] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:18:50] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[22:19:27] <imMute> when nobody needs it anymore
[22:19:39] <imMute> I'm amused that factoid has the "> >" formatting though
[22:19:45] <kalven> there's boost::multi_array
[22:23:29] *** Joins: sobkas (~sobkas@95.175.17.217)
[22:24:27] *** Joins: Rynn (rynn@gateway/vpn/protonvpn/rynn)
[22:26:10] <PJBoy> boost::multi_array is ancient
[22:26:38] <PJBoy> so it has no move semantics
[22:27:02] *** Joins: causative (~halberd@user/causative)
[22:28:02] <kalven> should be relatively easy to fix
[22:28:09] <PJBoy> it does support arr[z][y][x] subscripting though, which is nice
[22:29:26] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:29:51] <kalven> where are we in the process of allowing multiple arguments to []? iirc operator, has been deprecated inside [] ?
[22:30:08] <PJBoy> C++23 has multiple arg operator[] already
[22:30:15] <kalven> ah, nice
[22:30:29] <PJBoy> yeah much sooner than expected
[22:30:47] <PJBoy> [P2128]
[22:30:47] <npaperbot> P2128R6: [Core] Multidimensional subscript operator <https://wg21.link/p2128r6> (by Corentin Jabot, Isabella Muerte, Daisy Hollman, Christian Trott, Mark Hoemmen) (2021-09-14) (Related: https://wg21.link/p2128r6/github)
[22:31:02] <PJBoy> last October
[22:31:32] <PJBoy> now we get to start a war on index order
[22:31:46] <PJBoy> should it be `arr[x, y, z]` or `arr[z, y, x]`
[22:32:04] <PJBoy> suppose you would otherwise have written `arr[z][y][x]`
[22:32:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:34:37] *** Quits: dld (~davidlowr@2601:197:600:1210:5c9e:f676:ddc7:b9f7) (Ping timeout: 240 seconds)
[22:35:47] *** Joins: dld (~davidlowr@2601:197:600:1210:c94f:64b7:1eea:84b1)
[22:36:57] <Zogatribe> #
[22:36:59] <Zogatribe> !0
[22:37:01] <nolyc> Integer literal 0 is a null pointer constant. A null pointer constant can be converted to a null pointer value. A null pointer value has an implementation-defined bit pattern.
[22:38:24] <imMute> PJBoy: they should be passed to the overload function in the same order and it's up to that function to decide how to combine them ;)
[22:38:52] <PJBoy> the same order meaning `z, y, x`?
[22:39:28] <imMute> I guess I'm assuming there's something like   operator[](int, int, int)   but I have not read that proposal
[22:44:24] <PJBoy> that's how you'd write the overload, yeah
[22:45:29] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[22:45:55] *** Joins: Tobbi__ (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[22:46:30] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1bd:44f:edc3:e663) (Ping timeout: 252 seconds)
[22:49:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:50:39] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:51:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:52:43] *** Joins: Xardas (~Xardas@149.233.51.127)
[22:54:08] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Quit: WeeChat 3.4)
[22:57:30] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[22:58:24] *** Joins: proller (~p@2a02:6b8:b081:6402::1:12)
[22:59:14] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:02:32] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[23:05:53] *** Joins: magla (~gelignite@55d4275f.access.ecotel.net)
[23:06:51] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:19] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[23:09:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:10:25] *** Quits: sobkas (~sobkas@95.175.17.217) (Ping timeout: 256 seconds)
[23:12:31] *** Joins: Autowired (~autowired@dslb-094-218-237-093.094.218.pools.vodafone-ip.de)
[23:12:39] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:13:00] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:15:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:16:15] *** Joins: seninha (~seninha@user/seninha)
[23:16:45] *** Quits: proller (~p@2a02:6b8:b081:6402::1:12) (Ping timeout: 252 seconds)
[23:17:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:17:48] *** Joins: vicfred (~vicfred@user/vicfred)
[23:19:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[23:19:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:21:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:21:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:21:53] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[23:22:13] *** Quits: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu) (Quit: leaving)
[23:22:28] *** Joins: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu)
[23:23:39] *** Joins: peoliye (~peoliye@205.251.233.176)
[23:24:57] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:25:56] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:29:41] *** Quits: furrymcgee (~devuan@cgn-89-1-211-93.nc.de) (Ping timeout: 256 seconds)
[23:29:57] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:30:46] *** Joins: sobkas (~sobkas@95.175.17.217)
[23:31:41] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[23:32:05] *** Joins: sobkas (~sobkas@95.175.17.217)
[23:32:36] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[23:32:36] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[23:33:08] *** Quits: Tokamak (~Tokamak@172.58.191.81) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:33:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:34:13] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[23:34:21] *** Joins: Tokamak (~Tokamak@172.58.191.81)
[23:34:39] <Alipha> I would flip them
[23:34:47] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[23:38:45] *** Joins: proller (~p@2a02:6b8:b081:7212::1:22)
[23:40:18] *** Quits: immibis_ (~hexchat@dynamic-089-204-139-245.89.204.139.pool.telefonica.de) (Read error: Connection reset by peer)
[23:40:23] *** Joins: immibis (~hexchat@dynamic-089-204-139-245.89.204.139.pool.telefonica.de)
[23:47:47] *** climax is now known as gentooclimax
[23:47:48] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:50:33] <AliceMeows> https://godbolt.org/z/rW871Y4cG is that supposed to be legal?
[23:51:58] *** Quits: immibis (~hexchat@dynamic-089-204-139-245.89.204.139.pool.telefonica.de) (Read error: Connection reset by peer)
[23:52:03] *** Joins: immibis_ (~hexchat@dynamic-089-204-139-245.89.204.139.pool.telefonica.de)
[23:54:31] <imMute> AliceMeows: which part?  the requires on the dtor?
[23:55:44] <AliceMeows> Yes
[23:57:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:58:31] <imMute> I'm not familiar with concepts yet, but I don't know why it wouldn't be allowed on the dtor.  member functions of templated classes are not "created" unless they're used (I forget the terminology)
[23:58:35] <imMute> instantiated?
[23:58:59] <AliceMeows> That is the word
