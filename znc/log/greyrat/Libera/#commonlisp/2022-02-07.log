[00:00:20] *** Joins: Guest59 (~Guest59@host-79-27-95-23.retail.telecomitalia.it)
[00:00:33] *** Quits: Guest59 (~Guest59@host-79-27-95-23.retail.telecomitalia.it) (Client Quit)
[00:00:59] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:05:52] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:09:03] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[00:10:47] *** Joins: lispnik (~lispnik@2600:1700:19e0:4a40:890a:ad22:8be3:b6f0)
[00:15:59] *** Quits: lispnik (~lispnik@2600:1700:19e0:4a40:890a:ad22:8be3:b6f0) (Quit: Textual IRC Client: www.textualapp.com)
[00:17:19] *** Joins: artchad` (~user@public-gprs220372.centertel.pl)
[00:20:24] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[00:20:37] *** Quits: artchad (~user@public-gprs234531.centertel.pl) (Ping timeout: 256 seconds)
[00:21:26] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[00:23:38] *** Quits: artchad` (~user@public-gprs220372.centertel.pl) (Quit: ERC (IRC client for Emacs 27.2))
[00:24:01] *** Joins: artchad (~user@public-gprs220372.centertel.pl)
[00:27:09] *** Joins: robin (~robin@user/terpri)
[00:29:30] *** Joins: Oladon (~olad@98.43.81.226)
[00:37:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:43:23] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:46:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:47:58] *** Joins: cjb (~cjb@user/cjb)
[00:48:08] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[00:50:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:52:13] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[00:54:37] *** Joins: logand (~user@dynamic-077-013-023-255.77.13.pool.telefonica.de)
[01:00:20] <sm2n> Is there a way to get a "slice" of a stream?
[01:01:13] <sm2n> For example, I have a stream *standard-input*, and I'd like to get a stream that is just *standard-input* except it returns eof when it sees a #\Newline
[01:01:18] <sm2n> Something like that
[01:01:57] <sm2n> So that sentinel detection logic can be factored out of logic that just reads and flushes an entire stream
[01:02:02] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:02:19] <mfiano> phoe helped me with a slice-stream Gray streams interface about a year ago. I'm not sure if it is what you're after though
[01:02:36] <sm2n> link?
[01:02:46] <phoe> mfiano: wait, have I?
[01:02:51] <phoe> please gimme a link
[01:02:53] <phoe> I need to remember that
[01:03:09] <mfiano> phoe: Can you gist it? It's in that tarball I sent you
[01:03:20] <mfiano> I dont have it online atm
[01:03:41] <phoe> mfiano: okay, let me find it...
[01:03:58] <mfiano> util-something.lisp i think
[01:04:28] <phoe> found it
[01:04:29] <phoe> https://plaster.tymoon.eu/view/2926#2926
[01:04:58] <mfiano> Don't ask me to remember what it did or solved.
[01:05:01] <phoe> it's not exactly the same thing, since it depends on the provided length rather than on character detection
[01:05:05] <mfiano> phoe might know. He wrote most of that code
[01:05:17] <phoe> but you should be able to hack around it and have it stop upon PEEK-CHARing a newline
[01:05:38] <sm2n> yeah, I see
[01:05:39] <phoe> the main issue is that READ-SEQUENCE is going to be slow because you must read char by char
[01:05:54] <phoe> same issue as in https://github.com/ruricolist/serapeum/issues/49
[01:06:15] <phoe> unless you are reading from a stream that can unread a whole string rather than a single char
[01:06:22] <phoe> which would be yet another Gray stream
[01:06:49] *** Joins: sheb (~sheb@31.223.228.71)
[01:07:16] <sm2n> "4 hours ago"
[01:07:18] <sm2n> huh
[01:07:36] <phoe> exactly
[01:07:37] <phoe> :D
[01:09:17] *** Joins: dra (~dra@2a04:4540:641c:3f00:b565:fe5a:e190:94c8)
[01:11:23] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[01:12:39] <sm2n> thanks!
[01:13:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[01:14:34] <sm2n> I'm lazy so I think I'm just going to read ahead, and then use with-input-from-string
[01:15:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:17:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:18:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:20:27] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[01:21:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:21:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:24:05] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[01:28:23] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[01:33:29] *** Quits: Guest4446 (~Guest44@95.175.104.156) (Ping timeout: 256 seconds)
[01:35:29] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[01:36:21] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:41:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[01:42:06] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:46:57] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[01:48:47] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:52:43] *** Quits: wacki (~wacki@87.122.93.168) (Quit: Leaving.)
[01:54:25] *** Joins: jealousmonk (~user@user/jealousmonk)
[01:54:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:55:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:55:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:01:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:02:06] *** Joins: gaqwas (~john@dynamic-095-114-039-195.95.114.pool.telefonica.de)
[02:05:03] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:05:06] *** Quits: artchad (~user@public-gprs220372.centertel.pl) (Read error: Connection reset by peer)
[02:05:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:08:58] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[02:10:59] *** Joins: kathe (~kathe@49.32.196.169)
[02:11:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:12:36] <kathe> good morning everyone. :)
[02:21:39] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[02:31:50] *** Quits: gaqwas (~john@dynamic-095-114-039-195.95.114.pool.telefonica.de) (Remote host closed the connection)
[02:35:55] <kathe> masinter: conveyed your "hi" to parent. cheers. :)
[02:39:56] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[02:42:53] *** Joins: akoana (~ah@user/akoana)
[02:45:59] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[02:52:36] *** Quits: pve (~pve@178-55-133-181.bb.dnainternet.fi) (Quit: leaving)
[02:54:37] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[03:05:47] *** Quits: dra (~dra@2a04:4540:641c:3f00:b565:fe5a:e190:94c8) (Remote host closed the connection)
[03:19:16] *** Quits: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[03:27:17] *** Joins: Oladon (~olad@98.43.81.226)
[03:31:21] *** Joins: AeroNotix (~xeno@185.107.67.252)
[03:35:49] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[03:40:10] *** Quits: flip214 (~marek@user/flip214) (Read error: Connection reset by peer)
[03:44:13] *** Joins: flip214 (~marek@user/flip214)
[03:52:49] <AeroNotix> hey I'm trying to wrap a C library using cffi/the groveller
[03:53:00] <AeroNotix> one part I've not used before is the wrapper functionality
[03:53:07] <AeroNotix> in the docs:
[03:53:10] <AeroNotix> `The internal package is created by Lisp code output from the C program written by CFFI-Grovel; if your specification file is exampleint.lisp, the exampleint.cffi.lisp file will contain the CFFI definitions needed by the rest of your project. See Groveller Syntax.`
[03:53:44] <AeroNotix> I can't see .cffi.lisp file being generated, but my package loads correctly, just the functions in the grovel wrapper aren't available
[03:54:10] *** Quits: kathe (~kathe@49.32.196.169) (Quit: Leaving)
[03:54:44] <AeroNotix> repo: https://github.com/AeroNotix/cl-iouring
[03:56:07] <AeroNotix> my specification file is in grovel-wrapper.lisp, I can see it being compiled into a .c file when loading the system - but the equivalent lisp file is not created.
[04:07:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:07:47] <AeroNotix> digging through /tmp I think I found the file it might actually be referring to, but it's not suffixed with .lisp
[04:26:28] *** Joins: pillton (~user@60-240-121-241.tpgi.com.au)
[04:57:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:58:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:08:22] *** Joins: mayureshkathe (~kathe@49.32.201.198)
[05:15:42] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:5873:aea:dc30:5c15) (Remote host closed the connection)
[05:16:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:28:35] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:28:42] *** Joins: logand` (~user@dynamic-089-012-107-168.89.12.pool.telefonica.de)
[05:29:44] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:30:21] *** Quits: logand (~user@dynamic-077-013-023-255.77.13.pool.telefonica.de) (Ping timeout: 256 seconds)
[05:33:18] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:34:41] *** Joins: Oladon (~olad@98.43.81.226)
[05:35:16] *** Parts: mayureshkathe (~kathe@49.32.201.198) ()
[05:48:47] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[05:50:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[05:52:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:52:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Remote host closed the connection)
[06:30:15] *** Joins: razetime (~quassel@49.207.209.26)
[06:54:05] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:54:22] *** Joins: razetime (~quassel@49.207.209.26)
[07:20:59] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:22:06] *** Joins: ebrasca (~user@librepanther.com)
[07:25:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:27:41] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:29:57] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[07:32:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:33:15] <beach> Good morning everyone!
[07:33:37] <beach> minion: memo for masinter: The code for SICL LOOP is here: https://github.com/robert-strandh/SICL/tree/master/Code/Loop or I can answer specific questions if you have any.  Either here or in #sicl.
[07:33:37] <minion> Remembered. I'll tell masinter when he/she/it next speaks.
[07:36:04] <AeroNotix> beach: can you link your OS pdf please
[07:36:20] <AeroNotix> i can't remember the url
[07:37:17] <beach> Maybe http://metamodular.com/SICL/sicl-specification.pdf
[07:37:44] <AeroNotix> no, I might have the wrong person
[07:37:56] <beach> Oh, OS, sorry.
[07:38:03] <AeroNotix> saved, any way
[07:38:15] <beach> You mean the CLOSOS document?
[07:38:22] <AeroNotix> maybe?
[07:38:47] <beach> http://metamodular.com/closos.pdf
[07:39:03] <AeroNotix> yes this
[07:39:05] <AeroNotix> thank you
[07:39:12] <beach> Pleasure.
[07:39:13] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:48:28] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[07:48:54] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[07:51:43] *** Joins: semz_ (~semz@user/semz)
[07:52:19] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[07:54:06] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:55:29] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:56:42] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:13:12] *** Quits: razetime (~quassel@49.207.209.26) (Remote host closed the connection)
[08:14:44] *** Joins: occ (~occ@user/occ)
[08:15:20] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 250 seconds)
[08:25:11] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:27:01] *** Joins: xsperry (~xs@user/xsperry)
[08:36:39] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[08:51:34] <qhong> is there a binary tree library that doesn't absolutely suck?
[08:51:50] <qhong> cl-containers take 30k cycle to do a single insert on a small tree
[08:52:18] <beach> Strong words.
[08:54:14] *** Joins: wacki (~wacki@87.122.81.161)
[08:55:49] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[08:56:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:57:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:58:12] *** Joins: occ (~occ@user/occ)
[09:03:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:05:59] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:06:17] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:14:44] <beach> qhong: You use very strong language in the README to named-closures as well.  What is a "function symbol"?
[09:15:23] <beach> qhong: There is no such thing in the Common Lisp standard.
[09:16:14] <qhong> beach: A symbol intended to be used as a function
[09:17:10] <beach> You mean a symbol as a function designator?  To be used in FUNCALL?
[09:17:36] <qhong> yes
[09:17:47] <beach> qhong: And how is that not a closure?
[09:18:10] <beach> "Comparing to function symbols, closures are nearly unusable..."
[09:19:02] <qhong> You can definite store a closure into its function cell, but that's not the typical use case. I'm talking about the closure you get by writing a LAMBDA form with free variables
[09:19:29] <moon-child> (let ((x 0)) (defun f ...))
[09:19:56] <qhong> moon-child: now you can only have one "instance" of this closure
[09:19:56] <qhong>  
[09:20:19] <beach> qhong: Still, the concept of a "function symbol", especially as being separate from a closure, seems very strange.
[09:20:58] <qhong> beach: what is a better term? I thought it's rather unambiguous given the context, but this might be my confirmation bias
[09:21:10] <qhong> beach: global function definition?
[09:21:24] <beach> Nope, see the example by moon-child.
[09:21:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:22:12] <qhong> I'm now inclined to say "first-order function"
[09:22:22] <qhong> but it's probably even more obscure
[09:22:27] <beach> Plus, you can assign an anonymous function that does not close over anything to a lexical or special variable.  Then it is not a "function symbol" and not a closure.
[09:23:23] <moon-child> qhong: I would interpret 'first-order function' as a function which takes and returns non-functions, not one which is not a closure
[09:23:35] <beach> And, again, your language is very strong.  In SICL, I occasionally use closures precisely because they can not be introspected or altered.  So that's in no way "broken".
[09:24:04] <moon-child> yes, closures are (afaik) the only true abstraction boundary
[09:24:15] <moon-child> modulo first-class global environments :)
[09:24:20] <beach> Heh.
[09:24:35] <beach> qhong: Do you take remarks about your grammar in that README?
[09:24:50] <beach> qhong: I don't have time to give any right now, but I might some time later.
[09:25:07] <qhong> beach: which part? you mean "broken" or "function symbol" or both?
[09:25:33] <beach> qhong: There are tons of minor English grammar problems in your README.
[09:25:41] <beach> I was wondering if you like those to be corrected.
[09:26:03] <qhong> beach: oh sure
[09:27:59] <qhong> I don't insist on strong language either. Maybe I should rant somewhere else rather than README
[09:28:19] <beach> And I suggest you moderate your language.  Rather than "closures are broken", perhaps something like "there are some use cases where it is desirable to have the ability to modify the static closed-over environment of a closure".
[09:29:17] <qhong> beach: I still don't like preventing introspection/mutation "by force"
[09:29:39] *** Joins: Oddity (~Oddity@user/oddity)
[09:29:43] <qhong> If someday some user just want to introspect/mutate it they can be very frustrated
[09:29:59] <qhong> like I can't change microcode of my CPU from lisp repl, wtf
[09:34:35] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Ping timeout: 256 seconds)
[09:36:58] <jmercouris> I agree, I don’t believe closures are broken, they work as intended
[09:37:15] <jmercouris> Their design may not be amenable in the way you like, but luckily you can write your library and use it
[09:37:40] <jmercouris> I would present it as a new utility rather than pitting it against closures
[09:37:52] <jmercouris> This will likely make it easier for people to accept
[09:39:59] <qhong> maybe this: closure is a useful low-level construct, but almost always have better alternative when using from "user-level"
[09:41:14] <qhong> e.g. an object system (say CLOS) can be implemented using closures, but using CLOS is almost always more appropriate than using closure+message passing style directly
[09:42:52] <moon-child> I do not think it would be inappropriate to have, say, private slots
[09:44:13] <moon-child> (and indeed, you can _almost_ get them, viz (defclass x () ((#1=#:x))) (defun f (x) (frob (slot-value x '#1#))))
[09:44:19] <qhong> moon-child: I think it can be appropriate to have a slot that don't expose accessor function to discourage *programs* from mutating it, but I think it's always appropriate to make it invisible from inspector, or *prevent* any program from mutating it
[09:44:47] <moon-child> what do you mean by 'inspector'?  A good debugger should show you the environment of a closure, sure
[09:44:57] <qhong> (replace-string "always appropriate" "always inappropriate")
[09:45:13] <qhong> moon-child: it doesn't always tell you the name of variables
[09:45:34] <moon-child> hence the qualification 'good'
[09:45:54] <qhong> sure, I agree good debugger is good
[09:46:06] <qhong> and it should also be able to be invoked programmatically
[09:46:30] <qhong> so a program can always get around the encapsulation easily, if deemed fit
[09:46:44] <moon-child> I disagree
[09:47:22] <qhong> I don't think in any case one should prefer "prevent" over "discourage"
[09:48:10] <moon-child> one does not prevent; hence your library
[09:48:41] <qhong> I still can't programmatically modify closures created outside my library
[09:48:48] <qhong> (easily)
[09:49:29] <moon-child> sure, yes.  I suppose it depends on what you mean to discourage.  I think it should be possible to express strong abstraction boundaries, and a few minutes ago, I think you agreed
[09:50:11] <qhong> I agree you should be able to express. Anyone should also be able to decide to ignore your expression if they want to
[09:50:31] <moon-child> then it is not a strong abstraction boundary
[09:51:01] <beach> qhong: Also, in the term "function symbol", you seem to exclude function names of the form (SETF <symbol>).
[09:51:44] <qhong> beach: yes that's an issue...
[09:52:40] <qhong> moon-child: if your strong abstraction boundary means this, then I disagree
[09:53:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:53:30] <beach> qhong: For a Lisp OS, it is essential to limit direct access to certain aspects of the environment.
[09:53:55] <qhong> beach: what about discourage?
[09:54:03] <moon-child> I think it is meaningful to distinguish 'strong' and 'weak' abstractions; the difference being that the latter can be broken, and the former can not.  What do you mean by your words, humpty dumpty? :)
[09:54:13] <beach> qhong: Not good enough in the presence of malware.
[09:54:47] <qhong> beach: what about a program can break it only if it holds some certain capability passed/written explicitly by the user?
[09:55:03] <qhong> in that way, if the user want a program to break the limit, it can be done easily
[09:55:22] <beach> That's the idea, yes.
[09:55:37] <moon-child> qhong: another issue is: making closure environments first-class may inhibit certain optimizations
[09:56:24] <beach> I was about to say that.
[09:56:46] <qhong> moon-child: I'm aware of that. Basically every nice feature I want (which almost always happen to be: bind xyz later!) add hell lot difficulty to optimization
[09:57:22] <qhong> I think the ultimate solution will be to generalize the dependency maintanence protocol to every objects, rather than just metaobjects
[09:57:37] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[09:57:50] <qhong> so that the compiler can always assume something don't happen, but if it happen, affected compiled code can be fixed
[09:58:10] <qhong> (this will also helps compiling F-expr)
[10:10:28] *** Joins: occ (~occ@user/occ)
[10:14:42] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[10:17:39] *** Joins: artchad (~user@public-gprs220372.centertel.pl)
[10:18:45] *** Joins: spiaggia (~user@2a01:cb19:150:3400:5033:e41f:8d04:bc28)
[10:19:15] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[10:20:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[10:21:01] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[10:23:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[10:24:43] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[10:26:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:30:22] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:31:29] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:c46f:8faf:ca93:337c)
[10:38:55] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[10:39:19] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[10:43:34] *** Joins: razetime (~quassel@49.207.209.26)
[10:43:35] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[10:44:05] *** Quits: razetime (~quassel@49.207.209.26) (Client Quit)
[10:44:20] *** Joins: razetime (~quassel@49.207.209.26)
[10:45:25] *** Joins: Everything (~Everythin@37.115.210.35)
[10:49:50] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[10:53:50] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:53:51] *** Joins: occ (~occ@user/occ)
[10:55:38] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 260 seconds)
[11:07:03] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:e192:fdd1:db83:55d2)
[11:07:07] *** Joins: rain3 (~rain3___@5-12-7-240.residential.rdsnet.ro)
[11:08:21] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:16:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:20:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:24:28] *** Joins: pve (~pve@37-33-25-19.bb.dnainternet.fi)
[11:29:51] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:30:14] *** Joins: amb007 (~a_bakic@192.149.22.93.rev.sfr.net)
[11:31:20] *** Quits: spiaggia (~user@2a01:cb19:150:3400:5033:e41f:8d04:bc28) (Quit: ERC (IRC client for Emacs 26.3))
[11:34:33] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:43:45] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[11:45:20] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[11:50:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[11:56:12] *** Joins: treflip (~user@user/treflip)
[11:58:27] *** Joins: shka (~herr@109.231.0.226)
[12:00:27] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[12:02:51] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 245 seconds)
[12:04:47] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-058.client.tudelft.eduvpn.nl)
[12:07:03] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[12:08:03] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:12:35] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:15:41] *** Quits: santiagopim (~user@44.pool90-167-219.static.orange.es) (Remote host closed the connection)
[12:22:09] *** Joins: occ (~occ@user/occ)
[12:22:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:25:14] *** Quits: razetime (~quassel@49.207.209.26) (Remote host closed the connection)
[12:30:03] *** Joins: santiagopim (~user@44.pool90-167-219.static.orange.es)
[12:33:33] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:9171:3c82:4a2c:e82f)
[12:34:05] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:9171:3c82:4a2c:e82f) (Remote host closed the connection)
[12:34:50] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:9171:3c82:4a2c:e82f)
[12:40:09] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:40:12] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:46:53] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:03:04] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[13:05:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:16:55] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:30:18] *** Joins: Guest4411 (~Guest44@95.175.104.156)
[13:36:08] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:191e:eacb:9c37:6370)
[13:37:56] <phoe> is there a utility somewhere that acts like COPY-LIST but only N first conses are copied?
[13:38:34] <jdz> phoe: SUBSEQ?
[13:39:15] <beach> phoe: I guess you want to share the tail, yes?
[13:39:24] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:191e:eacb:9c37:6370)
[13:39:24] <phoe> beach: yes
[13:40:18] <beach> It feels like a standard function ought to be able to do that, but I can't think of any.
[13:40:48] <phoe> I can do it easily by copying a SUBSEQ and then setting the last CDR, but it is kinda inefficient to traverse the list twice
[13:40:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:41:02] <beach> Yeah.
[13:41:21] <jdz> For LDIFF you also need a cell, not a number, so the copied part would have to be traversed twice.
[13:41:57] <moon-child> (loop for i upto n for x on list if (< i n) collect (car x) else nconc x)
[13:43:18] <jdz> phoe: But if that's not an issue then NTHCDR + LDIFF should dot.
[13:43:20] <jdz> *do
[13:44:09] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[13:45:39] <jdz> Never mind, my brain is offline today.
[13:47:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[13:47:36] <phoe> I guess moon-child's loop is going to be the solution for today
[13:47:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:49:05] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:49:57] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[13:52:44] *** Joins: rogersm (~rogersm@90.166.180.250)
[13:54:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:55:15] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[13:57:16] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[14:02:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:04:28] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[14:04:58] *** Joins: VincentVega (~user@212.97.4.17)
[14:08:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:10:53] <gin> I see (sort items #'(lambda (a b) (...))) type of code often. Is #' really necessary here? is there any best practice or coding convention for this?
[14:11:14] <beach> It is not necessary.
[14:11:16] <gin> Is (sort items (lambda (a b) (...))) preferrable?
[14:11:19] <moon-child> I would not use it
[14:11:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:11:28] <gin> thanks moon-child beach
[14:11:42] <beach> Sure.
[14:12:04] <moon-child> (I think it may have been necessary in some proto-lisps?)
[14:12:16] <jackdaniel> gin: the operator lambda is a macro that expands to (function (lambda …))
[14:12:24] <jackdaniel> so it is implicit if you don't put #' in there
[14:12:32] <gin> thanks jackdaniel
[14:12:53] <jackdaniel> you may thank islisp for that - common lisp added this macro (if I recall correctly) for compatibility
[14:13:16] <jackdaniel> islisp is loosely speaking a subset of common lisp
[14:14:31] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[14:14:57] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[14:15:48] <mfiano> It's more to type in the best of scenarios, and can cause harm in the worst.
[14:17:53] <jackdaniel> yes, I recalled correctly, it is mentioned here: https://nhplace.com/kent/Papers/cl-untold-story.html
[14:19:56] <jackdaniel> the primary difference between #'(lambda …) and (lambda …) are visible when you quote them; consider (quote (lambda …)) and (quote (function (lambda …)))
[14:20:20] <jackdaniel> or, perhaps, /the only difference/ :)
[14:20:32] <mfiano> Also consider that some parts of the standard require you _not_ to use #'
[14:22:01] <jackdaniel> right
[14:22:16] <mfiano> I can think of at least one place off the top of my head that calls for a lambda _expression_.
[14:22:21] <jackdaniel> they probably expand to a form where the argument is put in the operator position
[14:22:35] <jackdaniel> or add (function …) on their own
[14:22:59] <jackdaniel> I think that something in condition handling requires that
[14:23:11] <mfiano> Right, the :report
[14:23:46] <jackdaniel> also there are macros defined by the programmer (i.e in a library) and they may expect one or the another
[14:24:09] <jackdaniel> that shows that two namespaces are cool until they are not ;)
[14:24:11] <mfiano> Yes. lambda may not even be cl:lambda
[14:24:54] <jackdaniel> well, it isn't applicable only to lambda, I gather that :report would complain if you'd fed it with #'foo too (instead of foo)
[14:25:02] <mfiano> Yes
[14:25:05] <mfiano> report-name::= string | symbol | lambda expression
[14:26:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:27:40] <jackdaniel> also I remember I had some problem with load-time-values depending on whether I had (function (lambda …)) or not, but I don't remember details
[14:27:54] <jackdaniel> i.e whether the code was quoted or not
[14:28:20] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:28:36] <jackdaniel> s/quoted/macroexpanded/
[14:29:15] <mfiano> I would guess that would occur if you C-c C-c'd and a new identity was installed for that function.
[14:30:14] <jackdaniel> maybe
[14:30:20] <mfiano> Anyway, like I said, worst case you hurt yourself, best case you type more. I can think of no reason you would ever want #'(lambda ...)
[14:31:13] <jackdaniel> one reason is readability - functions in argument position are usually denoted with the operator function
[14:32:25] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:9171:3c82:4a2c:e82f) (Ping timeout: 256 seconds)
[14:32:43] <moon-child> what if someone else passes you a function and then you pass it on?
[14:33:08] <jackdaniel> nothing?
[14:33:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:33:18] <moon-child> well, then you would not use function
[14:33:47] <jackdaniel> I can see what you are trying to tell, but I don't find it relevant
[14:35:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:36:37] <mfiano> On the flip side, I find it ugly and hard to read when people do not refer to a function object in code like: (map 'list 'identity "foo")
[14:36:59] <mfiano> Unless maybe if you're in the lexical scope of a local function and you want to make the distinction between the global environment, but i would probably choose better names at that point.
[14:38:19] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[14:38:28] <moon-child> if I happened to shadow, I would rather use a symbol as a function designator than rename.  I don't know how likely I would be to shadow, though
[14:38:58] <mfiano> I may or may not. It would probably depend on both costs
[14:39:10] <mfiano> shadowing vs the expense of looking up the function object at runtime
[14:39:23] <mfiano> Like, if it's in a tight loop or something
[14:39:56] *** Quits: amb007 (~a_bakic@192.149.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[14:40:49] *** Joins: amb007 (~a_bakic@76.133.22.93.rev.sfr.net)
[14:41:52] <phoe> if it's in a tight loop then grab the function object once, outside the loop, and bind it to a lexivar
[14:43:24] <mfiano> If you can without passing that through many frames, or using a runtime special variable.
[14:45:25] <mfiano> I suppose you could grab it once around the flet/labels though.
[14:45:54] <mfiano> I never thought too much about this. Just goes to show how flexible Lisp is.
[15:03:01] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:e192:fdd1:db83:55d2) (Ping timeout: 256 seconds)
[15:09:19] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:09:43] *** Joins: razetime (~quassel@49.207.209.26)
[15:11:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:14:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:18:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:20:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:29:18] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:33:57] <phoe> array question: I am working on a sequence function and I would like to generate specialized versions of my code depending on the types of the arrays that are passed in
[15:34:23] <phoe> I have two input arrays, and they can come in various combinations of types: two simple-base-strings, simple-base-string + string, simple-base-string + simple-vector, ...
[15:34:51] <phoe> I am following SBCL compiler notes when it comes to type ambiguity
[15:36:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:37:21] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:38:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:39:54] <jackdaniel> (macrolet ((xxx..)) (typecase a (array (xxx)) (array* (xxx))))
[15:40:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:42:59] <phoe> jackdaniel: I tried doing this to make a simple 5x5 matrix for (simple-base-string simple-string simple-bit-vector simple-vector (simple-array * (*))) - until I ran into an issue where SBCL notices, rightfully so, that element types BIT and CHARACTER are not compatible
[15:43:09] <phoe> so I need to be smarter
[15:43:37] <phoe> in particular, it isn't possible to REPLACE from a bit vector to a string and vice versa
[15:44:28] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[15:46:36] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:48:49] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:50:50] <mfiano> It isn't possible to REPLACE from a non-sequence anyway, which a 5x5 matrix is not
[15:51:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:53:07] *** Parts: Everything (~Everythin@37.115.210.35) ()
[15:59:36] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:c18:ddd:1a74:88e2)
[16:00:35] <phoe> mfiano: I meant a 5x5 matrix of *types*
[16:00:41] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:00:55] * mfiano facepalms
[16:00:59] <phoe> so 25 function variants in the end
[16:01:15] <phoe> some of which are highlighted as illegal at compilation time
[16:01:18] <mfiano> I've been doing matrix math all week. Please excuse me
[16:01:22] <phoe> no problem
[16:01:37] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[16:02:01] *** Joins: igemnace (~ian@user/igemnace)
[16:04:30] <jackdaniel> just list valid combinations
[16:04:51] <phoe> yes, and I kinda wish I didn't need to go through all the valid combinations manually
[16:05:00] * phoe writes an utility for doing that automatically
[16:05:04] <jackdaniel> or since sbcl notices that then simply muffle the warning - dead code will be removed
[16:05:25] <mfiano> gross
[16:06:33] <jackdaniel> agonizing over small code snippets is higher on my gross top 10 list
[16:09:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[16:11:34] *** Joins: aeth (~aeth@user/aeth)
[16:14:20] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:15:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:16:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:17:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:18:51] <mfiano> Whenever I read something a question with "LSP", I read it as "LISP" and I'm thinking in terms of the superior SLIME/SLY...and then I catch myself before answering the question.
[16:19:00] <mfiano> s/something//
[16:19:29] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:191e:eacb:9c37:6370) (Remote host closed the connection)
[16:19:29] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:191e:eacb:9c37:6370) (Remote host closed the connection)
[16:19:41] <mfiano> Worst acronym ever for my brain
[16:20:05] <phoe> wait until you hear about (RFC 6830
[16:21:04] <mfiano> I already did. It was annoying
[16:21:10] <mfiano> Yet clearly a joke
[16:23:18] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[16:24:35] <Xach> A joke in what sense?
[16:24:50] *** Joins: xsperry (~xs@user/xsperry)
[16:26:18] *** Quits: santiagopim (~user@44.pool90-167-219.static.orange.es) (Remote host closed the connection)
[16:29:00] <mfiano> In that it is a draft and references CONS and EMACS drafts.
[16:29:15] <mfiano> I dunno, maybe I misinterpreted it.
[16:30:13] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[16:31:06] <phoe> https://datatracker.ietf.org/doc/html/draft-meyer-lisp-cons-04 that mentions CAR and CDR
[16:35:17] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:35:51] *** Joins: cuz (~user@50.226.229.246)
[16:39:10] *** Joins: santiagopim (~user@44.pool90-167-219.static.orange.es)
[16:41:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:43:15] *** Joins: Bike (~Glossina@71.69.170.70)
[16:46:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:46:50] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:48:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:50:17] *** Joins: kevingal (~quassel@149.157.117.174)
[16:53:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:55:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:04:11] *** Quits: kevingal (~quassel@149.157.117.174) (Ping timeout: 256 seconds)
[17:04:29] *** Joins: kevingal (~quassel@2001:770:c0:401:f5b7:de0b:e785:376a)
[17:06:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:07:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:07:41] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[17:08:40] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[17:11:05] *** semz_ is now known as semz
[17:14:11] *** Joins: VincentV` (~user@212.97.4.17)
[17:15:41] *** Quits: VincentVega (~user@212.97.4.17) (Ping timeout: 250 seconds)
[17:19:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[17:20:58] *** Joins: aeth (~aeth@user/aeth)
[17:33:46] *** Joins: occ (~occ@user/occ)
[17:34:06] *** Joins: cuz` (~user@2607:fb90:e7b:bc92:1455:2c0:e8af:6e02)
[17:34:39] *** Quits: cuz (~user@50.226.229.246) (Read error: Connection reset by peer)
[17:35:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:37:14] *** Joins: cuz`` (~user@50.226.229.246)
[17:38:37] *** Quits: cuz` (~user@2607:fb90:e7b:bc92:1455:2c0:e8af:6e02) (Ping timeout: 240 seconds)
[17:39:25] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[17:40:58] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:41:40] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[17:48:55] *** Quits: Guest4411 (~Guest44@95.175.104.156) (Quit: Client closed)
[17:49:46] *** Joins: yewscion (~yewscion@52.94.133.129)
[17:58:26] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[18:17:49] *** Joins: morganw (~user@80.225.24.132)
[18:17:55] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[18:29:26] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[18:33:29] *** Quits: yewscion (~yewscion@52.94.133.129) (Ping timeout: 256 seconds)
[18:36:24] *** Joins: Guest4425 (~Guest44@95.175.104.156)
[18:39:01] *** Joins: dlowe[x] (~dlowe@146.115.166.6)
[18:40:54] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[18:46:26] *** Joins: jeosol (~jeosol@user/jeosol)
[18:55:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:56:46] *** Joins: AeroNotix (~xeno@185.107.67.252)
[18:56:49] *** Quits: dlowe[x] (~dlowe@146.115.166.6) (Remote host closed the connection)
[18:57:04] *** Joins: dlowe[x] (~dlowe@146.115.166.6)
[18:57:38] *** Quits: dlowe[x] (~dlowe@146.115.166.6) (Changing host)
[18:57:38] *** Joins: dlowe[x] (~dlowe@user/dlowe)
[19:00:38] *** Joins: cuz``` (~user@2607:fb90:e7e:cbcd:4035:8992:d7c:96cf)
[19:03:54] *** Quits: cuz`` (~user@50.226.229.246) (Read error: Connection reset by peer)
[19:04:07] *** Joins: cuz```` (~user@50.226.229.246)
[19:05:57] *** Quits: cuz``` (~user@2607:fb90:e7e:cbcd:4035:8992:d7c:96cf) (Ping timeout: 240 seconds)
[19:16:06] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[19:19:37] *** Quits: cuz```` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[19:20:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:21:06] <lisp123> beach: There?
[19:21:24] <beach> Sort of.
[19:21:28] <beach> I am on the phone.
[19:21:34] <beach> Can you wait?
[19:21:38] <lisp123> Ah yes of course
[19:22:09] <beach> I mean, you can type questions and stuff, I just won't have time to answer right away.
[19:22:15] <lisp123> Yup
[19:22:24] <lisp123> Wrote this macro, similar to what you guys do with (let ((client *client*)) ...)
[19:22:32] <lisp123> https://plaster.tymoon.eu/view/2930#2930
[19:23:33] <lisp123> I need to debug & fix any issues, but curious to get thoughts on anything to do better / different
[19:23:33] <lisp123> https://plaster.tymoon.eu/view/2931#2931
[19:24:05] <lisp123> First link is an example, second link is the draft macro that I'm fixing up
[19:25:39] <beach> (a b c) is not a valid form in the first link.
[19:26:54] <lisp123> ah yes, I need to add a quote there
[19:27:06] <beach> I don't think so, no.
[19:27:34] <beach> Don't you want (list a b c)?
[19:27:44] * beach is distracted so could be wrong.
[19:28:10] <lisp123> yes I want that, so need to fix it so that it comes through. Although ,@ may also work, haven't really tested it yet
[19:28:55] <Bike> presumably you use APPLY in case there's a &rest argument
[19:28:59] <lisp123> Yes
[19:29:11] <Bike> if you have (translate-orindary-lambda-list-to-apply-args '(a b c)) => (a b c nil), splicing should work
[19:29:35] <Bike> and with '(a b &rest c) you would need (a b c)
[19:29:43] <lisp123> Although I'm very bad with APPLY, so will take me a bit to figure out exactly how to do it
[19:30:09] <lisp123> and with '(a b &rest c) you would need (a b c) -> I think that's where I got to in the end
[19:30:19] <lisp123> (from our discussions yesterday :))
[19:30:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[19:30:34] <Bike> doesn't work so well with &optional, though
[19:31:04] <lisp123> https://plaster.tymoon.eu/view/2932#2932
[19:31:09] <lisp123> Here's the current version of that function
[19:31:12] <Bike> you'd need like (a b &optional c) => (a b (if c-p (list c) nil))
[19:31:57] *** Quits: VincentV` (~user@212.97.4.17) (Ping timeout: 240 seconds)
[19:32:55] <lisp123> True, to do it correctly, should adjust for c-p (assuming that means if optional argument c supplied)
[19:33:34] <lisp123> For now I was just passing through the default values, but if its possible to fix, I'll try and do that (will think now how to do it)
[19:34:23] <Bike> that is what i meant, yes
[19:34:50] <beach> It looks like my help is no longer wanted.
[19:34:55] <beach> ... which is great! :)
[19:35:18] <lisp123> if you guys like the idea, you can improve and then use it :)
[19:38:01] *** Joins: cuz```` (~user@38.140.58.234)
[19:39:07] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 250 seconds)
[19:42:43] <lisp123> you'd need like (a b &optional c) => (a b (if c-p (list c) nil)) -> The issue here may be that if the default value is nil, then passing nil if c-p is false means the receiving function cannot distinguish whether a call was made
[19:42:44] <lisp123> ?
[19:42:56] <lisp123> whether an optional argument was supplied*
[19:43:24] <lisp123> sorry i wrote in a confusing way
[19:43:59] <lisp123> what I meant was the receiving function may not know whether an optional argument was supplied or not
[19:44:18] <lisp123> unless the call itself was adjusted not to include the optional
[19:45:12] <lisp123> which means this function can't be written perfectly ever
[19:45:27] *** Quits: Guest4425 (~Guest44@95.175.104.156) (Ping timeout: 256 seconds)
[19:47:14] <lisp123> One alternative is to explicitly pass through c-p, but then the lambda-list of the generic function gets polluted / confusing
[19:47:31] <beach> I have no idea what the idea was.  Maybe I need to go back and look.
[19:47:51] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:48:21] <beach> Can't figure it out from the conversation.  So what is the idea that we might like?
[19:48:29] <lisp123> Its just to simply writing interfaces - instead of writing two functions (defun move-character () (let ((client *client*)) (move-character-with-client client))
[19:48:53] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:48:57] <beach> Ah, OK.
[19:49:00] <lisp123> and (defmethod move-character-with-client ((client (eql 'clim)) ...)
[19:49:08] <lisp123> I bundle the defgeneric & defun into a macro
[19:49:15] <beach> Got it.
[19:49:15] <lisp123> and leave the methods to be written
[19:49:33] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:50:04] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:57:05] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[19:59:32] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[20:01:35] *** Joins: yewscion (~yewscion@52.94.133.128)
[20:02:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:03:15] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:06:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:07:07] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[20:09:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:10:57] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[20:14:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[20:15:42] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[20:16:51] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[20:28:22] *** Joins: Catie (~user@user/catie)
[20:34:18] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 260 seconds)
[20:38:03] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Remote host closed the connection)
[20:38:16] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[20:42:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:46:43] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:51:11] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[20:54:07] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Remote host closed the connection)
[20:56:10] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Remote host closed the connection)
[20:58:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:00:26] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[21:02:45] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[21:03:06] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[21:05:30] *** Quits: cuz```` (~user@38.140.58.234) (Remote host closed the connection)
[21:05:45] *** Joins: cuz```` (~user@38.140.58.234)
[21:07:35] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:08:11] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[21:09:08] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-058.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:11:09] <dieggsy> i've just found out about quicklisp bundles: https://www.quicklisp.org/beta/bundles.html - is there any way to update a specific package in a bundle?
[21:11:57] <jackdaniel> you may put an altered version of the specific *system* (not a package) in local-projects
[21:14:08] <dieggsy> oh, I guess quicklisp doesn't do per-system updates in general anyway
[21:15:02] <dieggsy> ack yeah sorry my bad i meant system above
[21:16:57] <White_Flame> a dist is a collection of all packages at one point in time where they pass some form of tests in loading all their dependencies from within the dist
[21:17:08] <White_Flame> s/packages/systems/ :-P (I blame you ;) )
[21:17:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:17:46] <White_Flame> and so bundles snapshot from within the current dist
[21:18:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:18:24] <dieggsy> White_Flame: ah, i see. so in general if you wanted a new version of something, you'd either update everything or go the manual approach with local-projects
[21:18:33] <White_Flame> right
[21:18:54] <White_Flame> you can have multiple dists, and choose which one is "current", but I would only select that at the start of an image, not after things are already loaded
[21:19:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:19:26] <dieggsy> i'm guessing it's probably actually safer to update everything together? hmm
[21:19:38] <White_Flame> yep, that's the intent
[21:20:02] <White_Flame> there will be some degenerate cases with that, though, if your code requires old-a and new-b, where new-b relies on new-a
[21:20:11] <White_Flame> but it's incentive to keep current
[21:20:47] <White_Flame> we're not yet at our final form of system packaging
[21:20:55] <dieggsy> atm we have a project where we do dependency management entirely manually and we've not updated any of our CL libraries in like. idk, a decade. i'm looking at quicklisp bundles as a way of keeping up to date while still keeping the library sources in the project source tree
[21:21:29] <White_Flame> sure, we've done that, copying src directories from quicklisp into our project subdir to snapshot manually
[21:21:38] <White_Flame> for repeatable builds
[21:22:17] <dieggsy> something something if it ain't broke, but the  way it is now also just makes it a pain to manage these deps (plus we've all sorts of duplicate library sources and stuff, not ideal)
[21:22:45] <White_Flame> yep, disruptive janitorial work will always be inevitable for long-lived projects
[21:22:55] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[21:23:14] <dieggsy> White_Flame: i wish everyone thought that way :)
[21:23:36] <dieggsy> i mean it would seem like an unavoidable fact to a degree
[21:23:47] <dieggsy> but i guess people's willingness to do such work varies greatly
[21:24:29] <White_Flame> I love the saying "At some point, it's no longer technical debt, it's debtnical tech"
[21:25:40] <dieggsy> hah
[21:25:53] <contrapunctus> White_Flame: "You know you are drunk when there are traces of blood in your alcoholstream."
[21:30:04] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[21:34:20] *** Quits: pillton (~user@60-240-121-241.tpgi.com.au) (Ping timeout: 260 seconds)
[21:38:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:38:44] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:40:16] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:40:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:41:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:44:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:51:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[21:51:32] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[21:54:14] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:54:15] *** Quits: amb007 (~a_bakic@76.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:55:02] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:55:05] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:55:20] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:58:09] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:59:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:59:48] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[22:00:07] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:c46f:8faf:ca93:337c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:00:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:02:16] <phoe> Bike: regarding portable code walking, you mentioned that there are some tricks that can be done with CLtL2's ENCLOSE
[22:02:23] <phoe> could you elaborate on this a little bit?
[22:03:30] <Bike> i wouldn't characterize it as a trick. but basically, when you're walking and hit a macrolet, to walk the body you have to make the actual macro functions available, meaning you have to evaluate some code to get a function
[22:03:39] <phoe> yes
[22:03:54] <phoe> I can first PARSE-MACRO to get a lambda expression
[22:03:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[22:04:15] <Bike> yeah, but then how do you get a function out of that. if you use eval or compile, it's in a null lexical environment
[22:04:31] *** Quits: cuz```` (~user@38.140.58.234) (Ping timeout: 256 seconds)
[22:04:36] <Bike> so e.g. in (macrolet (...) (macrolet (...) ...)), if one of the inner macro functions used one of the outer ones you'd be out of luck
[22:04:57] <phoe> so I can ENCLOSE this lambda form in the original environment, right?
[22:05:07] <Bike> rught
[22:05:13] <Bike> right
[22:05:18] <phoe> like, I grab the original &environment object, ENCLOSE the lambda expression in it, and boom, I have a working macroexpander function
[22:05:26] <Bike> yeah.
[22:05:28] <phoe> then I can AUGMENT-ENVIRONMENT that env object to get a new environment object
[22:05:59] <phoe> and now that I have a new environment object, what do I do? do I keep on walking the body of SYMBOL-MACROLET?
[22:06:15] <Bike> i mean, if you're a code walker, yeah
[22:07:02] <phoe> OK
[22:07:24] <Bike> otherwise i don't see how you could walk macrolet
[22:07:42] <phoe> I see that agnostic-lizard doesn't use ENCLOSE whatsoever
[22:07:47] <phoe> ...neither does hu.dwim.walker
[22:07:55] <phoe> ......neither does iterate?
[22:08:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[22:08:36] <Bike> yeah, and this conversation started the other day because iterate doesn't walk macrolet, didn't it?
[22:08:42] <phoe> yes
[22:08:48] <phoe> does any code walker that is in use actually use this technique?
[22:09:31] <Bike> i don't know how widely supported ENCLOSE even is
[22:09:33] <phoe> cl-cont doesn't use it either
[22:09:40] <phoe> well, let me check
[22:10:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:10:58] <phoe> SBCL, CCL, LW seem to have it
[22:11:44] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[22:11:55] <phoe> ECL, CLISP, ACL, ABCL seem to not have it
[22:13:16] <phoe> ACL has something else though - excl:compile-lambda-expr-in-env
[22:13:20] <phoe> which seems equivalent
[22:14:46] <phoe> Clasp seems to have it too
[22:14:57] <phoe> so that's 5/8 implementations
[22:15:17] *** Joins: simendsjo (~user@84.211.91.241)
[22:16:15] *** Quits: dlowe[x] (~dlowe@user/dlowe) (Remote host closed the connection)
[22:17:26] <phoe> so, not bad
[22:18:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:22:20] <phoe> NotThatRPG: how does that sound?
[22:24:55] <jackdaniel> there is no portable way to change initargs passed to effective-slot-definition-class, is there?
[22:25:38] <zagura>  /53
[22:25:46] <Bike> don't think so
[22:25:57] <jackdaniel> thanks
[22:27:52] *** Joins: Guest4411 (~Guest44@95.175.104.156)
[22:29:09] <phoe> jackdaniel: it seems that there is, but only if you use c2mop everywhere
[22:29:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:30:05] <phoe> plus a custom library that seems to depend only on c2mop
[22:30:16] <phoe> ...and a custom mixin class
[22:30:20] <phoe> so, welp, not really portable
[22:31:14] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:31:35] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:32:04] <jackdaniel> and what c2mop brings to the table?
[22:32:25] <jackdaniel> I can't find anything there mitigating this particular issue
[22:32:58] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:35:10] <phoe> looks like there's the ability to write a custom method on compute-effective-slot-definition that calls the next method to get the ESD
[22:35:10] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[22:35:33] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:36:10] <phoe> and once you have the ESD, I assume you can reinitialize-instance it with some initargs
[22:36:18] <phoe> which *should* be equivalent
[22:36:32] <phoe> but don't trust me on that
[22:36:58] <jackdaniel> it is not, because you may decide on the slot based on initargs in effective-slot-definition-class
[22:37:08] <jackdaniel> s/on the slot/on the slot class/
[22:38:06] <phoe> OK - then the best thing I can think of is a method on c-e-s-d that binds a dynavar and uses it as a side channel for passing information to e-s-d-c
[22:39:17] *** Joins: patrice (~patrice@user/patrice)
[22:40:36] <jackdaniel> I don't understand how that helps with overwriting a default value (of say, :allocation initarg)
[22:41:22] <jackdaniel> but well, that's not all that important
[22:41:29] <jackdaniel> I was just wondering whether I miss something obvious
[22:41:31] <phoe> my line of thought is this: if you have a custom metaclass, you can define custom methods on c-e-s-d and e-s-d-c, both of which do call-next-method
[22:41:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[22:41:52] <jackdaniel> I know that I can define them but I don't see how this helps with the problem at hand
[22:41:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:42:17] *** Quits: rain3 (~rain3___@5-12-7-240.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[22:42:37] <phoe> since you have a custom method on e-s-d-c, you have control over what arguments are passed into the main method, so you can e.g. pass a different :allocation to the main method
[22:42:58] <phoe> since you have a custom method on c-e-s-d, you can bind a dynamic variable to pass information to e-s-d-c that e.g. conveys the value for :allocation that should be passed there
[22:43:18] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[22:43:30] <jackdaniel> no, because e-s-d-c takes initargs and the user might have specified :allocation :instance explicitly, then I don't want to overwrite it
[22:43:53] <NotThatRPG> @phoe: Need to catch up to the discussion. Reading now...
[22:43:58] <jackdaniel> and since I don't have an access to the "original" initargs, only full list with defaults supplied, I can't overwrite the default value
[22:44:55] <phoe> jackdaniel: ...well, you can bind another dynavar where you have access to the list of original initargs, so you have access to them in c-e-s-d and e-s-d-c
[22:45:15] <jackdaniel> I don't understand what you are saying
[22:45:28] <jackdaniel> but as I said, not that important, so I'll just add a separate initarg
[22:45:44] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[22:46:39] <phoe> OK
[22:46:46] <phoe> I'll try to make a prototype of my idea
[22:47:21] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[22:47:35] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[22:50:09] <NotThatRPG> phoe: None of these capabilities are ANSI CL, are they?
[22:50:38] <NotThatRPG> I see them in CLtL2, but not in the hyperspec.
[22:51:17] <phoe> NotThatRPG: correct
[22:51:48] <phoe> it would mean that this sort of codewalking is only possible on implementations with enough environment support
[22:52:26] <phoe> or, alternatively, that ECL and ABCL have some catching-up to do, and that CLISP needs to get environments implemented at all
[22:52:37] <attila_lendvai> phoe, your use-case of nested macrolets work in hu.dwim.walker... but the point is to implement it simpler than parsing macro lambda lists and other complexities?
[22:52:48] <phoe> attila_lendvai: yes
[22:53:06] *** Joins: cuz```` (~user@38.140.58.234)
[22:53:46] <NotThatRPG> There's a lot of discussion of the removal here: http://www.lispworks.com/documentation/HyperSpec/Issues/iss342_w.htm
[22:55:45] <phoe> attila_lendvai: the point is to let the implementation do the heavy work of local macroexpanders into the lexical environment object
[22:56:03] <phoe> s/of local/of adding/
[22:57:15] <attila_lendvai> phoe, thanks for the clarification! my CL-macro-env-fu got kinda rusty... i quickly added a test/macros/macrolet/nested to hu.dwim.walker, though.
[22:57:20] <jackdaniel> there is also trucler at al that is meant to provide better protocol for this deprecated functionality
[22:57:21] *** Joins: notzmv (~zmv@user/notzmv)
[22:58:41] <NotThatRPG> attila_lendvai: I should look at your walker's support for macrolet.
[23:00:19] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:00:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:01:00] *** Joins: dac (~dcx@user/dac)
[23:01:52] * attila_lendvai wishes he had enough steam to finish hu.dwim.iterate to the point that it can be a drop-in replacement for iterate
[23:02:56] *** Joins: weechat (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:03:28] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[23:05:19] <marcoxa> Hi there...
[23:05:33] <phoe> hey
[23:06:15] <marcoxa> Getting bogged down on my Mac with SBCL.
[23:07:52] *** Quits: yottabyte (uid195082@id-195082.lymington.irccloud.com) (*.net *.split)
[23:07:52] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (*.net *.split)
[23:07:52] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[23:07:52] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (*.net *.split)
[23:07:52] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (*.net *.split)
[23:07:52] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (*.net *.split)
[23:07:52] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[23:07:52] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[23:07:52] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[23:07:52] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[23:07:52] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[23:07:52] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[23:07:53] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[23:07:53] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[23:09:53] *** Quits: simendsjo (~user@84.211.91.241) (Remote host closed the connection)
[23:11:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:12:25] *** Joins: yottabyte (uid195082@id-195082.lymington.irccloud.com)
[23:12:25] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[23:12:25] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[23:12:25] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[23:12:25] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[23:12:25] *** Joins: lieven (~mal@ns2.wyrd.be)
[23:12:25] *** Joins: copec (~copec@schrodbox.unaen.org)
[23:12:25] *** Joins: bollu (~bollu@159.65.151.13)
[23:12:25] *** Joins: gabc (~gabc@user/gabc)
[23:12:25] *** Joins: even4void (even4void@came.here.for-some.fun)
[23:12:25] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[23:12:25] *** Joins: lonjil (~quassel@user/lonjil)
[23:13:09] <phoe> jackdaniel: my dynamic variable approach didn't work but I got this as a quick hack, https://plaster.tymoon.eu/view/2933#2933
[23:13:42] <phoe> see how only foo2 has :ALLOCATION :CLASS
[23:13:47] * phoe tries to fix it a bit more
[23:15:29] <phoe> okay, should work now
[23:16:12] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (Ping timeout: 245 seconds)
[23:16:13] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: linjian (~linj@user/linj) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (Ping timeout: 240 seconds)
[23:16:13] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: sp (~sp@user/susam) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Ping timeout: 250 seconds)
[23:16:28] <phoe> it's a huge hack, but the goal of "can I check in e-s-d-c whether the user provided :allocation :class themself?" is there
[23:16:32] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[23:16:38] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 252 seconds)
[23:16:39] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Ping timeout: 250 seconds)
[23:16:39] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 250 seconds)
[23:16:42] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (Ping timeout: 260 seconds)
[23:16:42] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 260 seconds)
[23:16:45] *** Joins: ebrasca (~user@librepanther.com)
[23:17:54] <jackdaniel> perhaps I wasn't clear enough - I want to decide on the effective-slot-definition-class result based on the allocation initarg
[23:18:16] <jackdaniel> i.e on :allocation :trash I want to return (find-class 'trash-slot-definition)
[23:18:50] *** Joins: nature (~nature@45.32.235.173)
[23:18:56] <phoe> OK
[23:19:02] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 240 seconds)
[23:19:14] <jackdaniel> and I want to change the default of the initarg allocation, so this code doesn't solve this
[23:19:47] <jackdaniel> also, it is about default's, i.e that when user doesn't add :allocation :foo in the slot definition, I want it to default to something else than :instance
[23:21:09] <jackdaniel> this code is overly complex even for the purpose of checking whether the allocation class was supplied by the user, it is enough to read the slot-value slot-definition-allocation to learn what user provided
[23:21:20] <jackdaniel> (if anything)
[23:21:40] <jackdaniel> or you can read the initarg in initargs directly in effective-slot-definition-class
[23:22:08] <phoe> OK; I thought the issue was more general than that
[23:25:12] *** Joins: simendsjo (~user@84.211.91.241)
[23:31:15] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[23:31:29] <phoe> jackdaniel: https://plaster.tymoon.eu/view/2934#2934 ?
[23:33:00] <jackdaniel> effective-slot-definition-class is called with default initargs filled, so for no-initarg-slot initargs will have :allocation :instance
[23:33:16] <jackdaniel> notice that in your own snippet there is no result no-initarg-slot-definition
[23:33:27] <phoe> yes, that's one issue that I'm still working on
[23:33:32] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[23:33:35] <jackdaniel> that's the issue I was asking about
[23:33:54] <jackdaniel> if you look for an easy solution just use sb-pcl::compute-slot-definition-initargs or whatever it is called
[23:38:54] <phoe> so, direct slot definitions already seem to have :ALLOCATION installed, hence compute-effective-slot-definition already cannot recognize whether the default was provided
[23:38:58] *** Quits: artchad (~user@public-gprs220372.centertel.pl) (Read error: Connection reset by peer)
[23:39:20] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[23:40:32] <jackdaniel> I don't know what does it mean "installed", usually it is compute-effective-slot-definition method who conses the definition initarts based on direct slots
[23:40:37] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 240 seconds)
[23:40:43] <jackdaniel> initargs*
[23:40:57] *** Joins: Oladon (~olad@98.43.81.226)
[23:41:03] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[23:42:19] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:42:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:42:37] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[23:43:07] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 256 seconds)
[23:43:19] <Guest4411> Hi, Does someone know if LQUERY has similar :CONTAINS selector as JQUERY has? Here's example of jquery's selector: https://api.jquery.com/contains-selector/
[23:47:00] <phoe> jackdaniel: that's the issue, the direct slots already have :ALLOCATION filled in
[23:47:09] <phoe> at least on SBCL
[23:47:32] <phoe> https://plaster.tymoon.eu/view/2935#2935
[23:48:40] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[23:49:14] <phoe> but you should be able to get the DSD initargs and remember them, and use that knowledge in E-S-D-C - see https://plaster.tymoon.eu/view/2936#2936
[23:49:27] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:49:45] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[23:50:04] <phoe> it's an E-S-D-C method that can access the direct slot definitions that C-E-S-D operates on
[23:50:17] <phoe> that's what I meant by a dynamic variable as a side channel
[23:51:17] <Bike> could you have a custom direct slot definition class to provide a different :allocation default?
[23:51:26] <phoe> I think so, yes
[23:51:28] <Bike> and i think the allocation default is specified
[23:51:36] <Bike> mop direct-slot-definition
[23:51:36] <specbot> http://metamodular.com/CLOS-MOP/class-direct-slot-definition.html
[23:51:56] <Bike> "The :allocation argument is a symbol. An error is signaled otherwise. The :allocation argument defaults to the symbol :instance." yeah ok.
[23:52:13] <phoe> Bike: which page is that?
[23:52:23] <phoe> oh, okay
[23:52:24] <phoe> found it
[23:52:31] <Bike> "Initialization of slot definition metaobjects"
[23:53:15] <phoe> OK - then a placeholder value for allocation can be provided by the custom DSD that E-S-D-C can then notice and replace with something meaningful
[23:53:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[23:53:28] <phoe> should be much cleaner than my dynamic variable hackery
[23:53:35] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[23:53:38] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[23:56:34] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[23:57:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:57:33] <jackdaniel> right, subclassing standard-direct-slot-definition and providing default-initarg makes sense, thanks
[23:57:50] * phoe learned something today
[23:58:50] *** Joins: aeth (~aeth@user/aeth)
[23:59:59] <phoe> Bike: is ENCLOSE in scope of Trucler-Native? I can't see any mention of it in the library
