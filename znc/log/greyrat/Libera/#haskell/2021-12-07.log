[00:00:03] <merijn> Midjak: Basically, write that on a paper. Take the function you wanna pass to foldl, fill in the 'a' and 'b', see what comes out
[00:00:08] <merijn> EvanR: The version without Foldable
[00:00:12] <EvanR> ah
[00:00:28] <merijn> unnecessary details, and all that
[00:00:29] <EvanR> :t foldl @[]
[00:00:29] <lambdabot> error:
[00:00:30] <lambdabot>     Pattern syntax in expression context: foldl@[]
[00:00:30] <lambdabot>     Did you mean to enable TypeApplications?
[00:00:35] <EvanR> FFFFUUUUUUU
[00:00:55] <merijn> TypeApplications are bad anyway :p
[00:01:04] <EvanR> orly?
[00:01:52] <merijn> Midjak: I find it hard to articulate what the result is, since at this point foldl and foldr feel like second nature. But I distinctly recall repeatedly writing out full types on a white board of whatever I wanted to do with them and achieving an epiphany :p
[00:02:32] <merijn> Hell, in general, just "working out the types and filling them in manually using pen and paper" is an *entirely* underrated method for getting better at understanding Haskell :)
[00:02:43] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[00:03:03] <kuribas> merijn: or using a scratch buffer
[00:03:06] <EvanR> the type of foldl and foldr are basically the same... 
[00:03:31] <merijn> EvanR: For *us*
[00:03:33] <merijn> Sure
[00:03:47] <EvanR> which doesn't help discriminate what they do xD
[00:03:49] <merijn> But I still (vaguely!) remember it all being super mistifying :)
[00:04:14] <merijn> EvanR: I recall a time where their types seemed very different
[00:04:39] <monochrom> Generally, basic algebra skills are underrated.
[00:04:59] <monochrom> http://www.vex.net/~trebla/haskell/prerequisite.xhtml
[00:05:04] <geekosaur> EvanR, TypeApplictaions can be done in yahb
[00:05:37] <Midjak> > foldl (\acc elem -> acc && even elem) True [5, 2, 4, undefined]
[00:05:38] <EvanR> % :t foldl @[]
[00:05:38] <yahb> EvanR: (b -> a -> b) -> b -> [a] -> b
[00:05:39] <lambdabot>  False
[00:05:44] <merijn> I do notice that the past few years it's becoming slightly harder to relate to beginners, because it's been so long ago since it was all confusing to me :)
[00:06:07] <Midjak> thank you merijn 
[00:06:12] <Midjak> I got it I think
[00:06:12] <monochrom> Even when you were learning "x+y = y+x", for example, it would help to write down "so for example 5+3=3+5, hey that is not intimidating at all!"
[00:06:44] <Midjak> if I try to expand this it 's clear indeed
[00:06:56] <phaazon> day 5 was fun :)
[00:07:04] <smichel17[m]> Hi all. I'm relatively new to Haskell, trying to figure out whether it's feasible to use yesod with tailwindcss— mostly, this is about compile times— and there's absolutely nothing on the internet about it. So I made a repo with basically just the scaffolded site from `stack new` to test on,  and a slightly longer write-up here: https://github.com/smichel17/yesod-perf-test/issues/1
[00:07:05] <smichel17[m]> If anybody is able to help, that would be amazing :) 
[00:07:27] <yin> is there a performance difference between (>=) and (>=) ?
[00:07:46] <yin> *(<=)
[00:07:47] <kuribas> yin: no? :-P
[00:07:48] * phaazon frowns
[00:07:48] <smichel17[m]> (whenever the current conversation is over)
[00:07:54] <geekosaur> wuh? those look the same to me
[00:08:05] <yin> obviously a typo
[00:08:12] <yin> (<=) and (>=)
[00:08:21] <kuribas> yin: probably no
[00:08:25] <phaazon> there should be a GHC rewrite rule to remove the flip?
[00:08:57] <kuribas> could be done on assembly level.
[00:09:02] <merijn> yin: Mu
[00:09:07] <phaazon> could be yeah
[00:09:19] <phaazon> but I think it would be nicer to have that as a GHC thing rather than a backend (i.e. LLVM) thing
[00:09:24] <phaazon> to be sure it will be applied everywhere
[00:09:36] <monochrom> I think the correct answer is "it depends".
[00:09:48] <kuribas> true, I forget ghc has it's own assembly generator.
[00:09:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:10:00] <merijn> That's not the reaosn, though
[00:10:12] <merijn> The reason is "it depends on how Ord is implemented"
[00:10:24] <merijn> Which is user code, so god knows
[00:10:42] <phaazon> :ohno:
[00:10:42] <geekosaur> time to look at Core if you really care
[00:11:03] <geekosaur> but I suspect any difference will be minuscule anyway
[00:11:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:11:05] <merijn> ealistically most people will use the default implementation going via 'compare'
[00:11:11] <merijn> So *probably* no difference
[00:11:21] <monochrom> In most cases, even without rewrite rules, low-level code optimizations may render the difference immaterial.
[00:13:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:13:55] <hololeap> % foldMap (\i -> Monoid.First $ if (i == 5) then Just i else Nothing) [0..]
[00:13:56] <yahb> hololeap: ; <interactive>:1:16: error:; Not in scope: data constructor `Monoid.First'; No module named `Monoid' is imported.
[00:13:59] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[00:14:22] <yin> Mu?
[00:14:23] <hololeap> % import qualified Data.Monoid as Monoid
[00:14:23] <yahb> hololeap: 
[00:14:29] <phaazon> haha
[00:14:36] <phaazon> day 6 reminds me last year N-body exercise a bit :)
[00:14:38] <hololeap> % import qualified Data.Semigroup as Semigroup
[00:14:38] <yahb> hololeap: 
[00:14:42] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[00:14:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[00:14:43] <hololeap> % foldMap (\i -> Monoid.First $ if (i == 5) then Just i else Nothing) [0..]
[00:14:43] <yahb> hololeap: First {getFirst = Just 5}
[00:14:52] <hololeap> % foldMap (\i -> Semigroup.First <$> if (i == 5) then Just i else Nothing) [0..]
[00:14:57] <yahb> hololeap: [Timed out]
[00:15:05] <merijn> yin: Mu is the Zen/koan "non-answer" to a question that is ill-formed and thus has no answer :p
[00:15:25] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:15:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[00:16:15] <hololeap> https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Monoid.html#t:First
[00:16:33] <hololeap> this says that the two behave the same, which is clearly not true
[00:16:58] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:17:14] <merijn> hololeap: Most claims/laws are in a total setting
[00:17:38] <geekosaur> uh, did you intend $ vs. <$> ?
[00:17:39] <hololeap> although I notice they remove all those warnings for Monoid.First in later versions of base
[00:17:49] <hololeap> yes
[00:18:17] <hololeap> % foldMap (\i -> Semigroup.First <$> if (i == 5) then Just i else Nothing) [0..10]
[00:18:18] <yahb> hololeap: ; <interactive>:1:16: error:; Not in scope: data constructor `Semigroup.First'; No module named `Semigroup' is imported.
[00:18:37] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[00:18:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:19:08] <hololeap>  >>> foldMap (\i -> Semigroup.First <$> if (i == 5) then Just i else Nothing) [0..10] ; Just (First {getFirst = 5})
[00:19:40] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[00:19:55] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[00:21:17] <hololeap> I find Monoid.First to be much more useful, since it will ignore any mappends after the first Just value
[00:22:33] <hololeap> ignore might not be the correct term here...
[00:23:01] <dsal> I think you should compare the same code twice
[00:23:50] *** Joins: mmhat (~mmh@55d45587.access.ecotel.net)
[00:24:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:24:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:25:05] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[00:25:08] <hololeap>  > This type will be marked deprecated in GHC 8.8, and removed in GHC 8.10
[00:25:30] <hololeap> obviously this didn't happen and those warnings are not there in base-4.16, so I actually have nothing to complain about.
[00:25:31] *** Quits: slack1256 (~slack1256@191.125.99.212) (Ping timeout: 256 seconds)
[00:25:47] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:27:13] *** Quits: MidAutumnMoon6 (~MidAutumn@user/midautumnmoon) (Ping timeout: 256 seconds)
[00:27:16] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:27:19] *** Joins: cjb (~cjb@user/cjb)
[00:28:21] <merijn> hololeap: I mean, the short circuiting behaviour can also be:
[00:28:44] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[00:28:56] <merijn> % foldMap (\i -> Data.Monoid.Alt $ if (i == 5) then Just i else Nothing) [0..10]
[00:28:56] <yahb> merijn: Alt {getAlt = Just 5}
[00:29:01] <merijn> % foldMap (\i -> Data.Monoid.Alt $ if (i == 5) then Just i else Nothing) [0..]
[00:29:01] <yahb> merijn: Alt {getAlt = Just 5}
[00:29:34] <hololeap> oh, that's true. there is Alt on the Maybe Alternative instance
[00:29:38] *** Joins: slack1256 (~slack1256@191.125.99.210)
[00:29:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:29:56] <merijn> Which is mentioned in the First docs, even ;)
[00:30:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[00:30:40] <hololeap> however, it also says "Users are advised to use the variant from Data.Semigroup and wrap it in Maybe."
[00:31:23] <hololeap> which does not short circuit like Monoid.First does
[00:32:41] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:33:16] <hololeap> bad docs. oh well, they eventually sorted it out.
[00:34:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[00:34:59] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:39:01] *** Quits: trillp (~user@69.233.98.238) (Ping timeout: 252 seconds)
[00:39:48] *** Joins: MidAutumnMoon6 (~MidAutumn@user/midautumnmoon)
[00:43:23] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:43:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[00:46:16] <cigsender> anyone have a link to that mailing list discussion about the use of Prelude.head giving different errors than expected?
[00:48:07] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e6304137ec8947839cf.dip0.t-ipconnect.de)
[00:48:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:48:47] <geekosaur> I remember the discussion and am looking for it
[00:48:55] *** Quits: alx741 (~alx741@186.178.108.139) (Ping timeout: 252 seconds)
[00:50:14] <geekosaur> it was about ghc considering any bottom to be equivalent to any other, so it could produce different bottoms than expected when it knew a bottom would result anyway
[00:50:14] <geekosaur> ?
[00:50:14] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:50:16] <dmj`> it'd be nice if there was a lens that had insertWith semantics when using += on an IntMap Int
[00:51:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:52:12] <awpr> maybe something like `ix 5 . non 0 +~ 42`?
[00:52:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[00:52:52] <awpr> s/ix/at/
[00:54:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:55:14] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:c8d2:5d49:1706:3792)
[00:55:58] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[00:57:00] <dsal> The difference between ix and at in this context is that you want the other one.
[00:58:09] <awpr> `ix`: does nothing if the key is not present; `at 5 . non 0`: pretends the value was 0 if not present
[00:58:33] *** Joins: pfurla_ (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[00:58:49] <dsal> ix and at are kind of like folded / traversed in that recipes look very similar depending on whether you're viewing or setting.
[00:58:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:59:15] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[01:00:30] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[01:02:07] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:c8d2:5d49:1706:3792) (Ping timeout: 252 seconds)
[01:02:15] *** Joins: learner-monad (~ehanneken@user/learner-monad)
[01:02:20] *** Joins: alx741 (~alx741@186.178.108.36)
[01:04:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:07:13] <dmj`> awpr: that's very nice, thank you
[01:07:54] <dmj`> awpr: nicer way to solve day 6, https://gist.github.com/479681544942476eb3b271b4d834e2b1
[01:08:26] *** Quits: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Read error: Connection reset by peer)
[01:09:01] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 240 seconds)
[01:10:36] <dmj`> might come in handy for subsequent days
[01:11:15] <int-e> dmj`: wah, why do you do that with a State monad rather than something like  IM.fromListWith (++) (IM.assocs m >>= next) where next (0,v) = [(6,v),(8,v)]; next (i,v) = [(i-1,v)]
[01:11:32] <geekosaur> not finding it :(
[01:12:05] <int-e> dmj`: err, (+) rather than (++)
[01:12:29] *** Joins: x88x88x- (~cheeg@156.146.57.109)
[01:12:31] *** Quits: x88x88x- (~cheeg@156.146.57.109) (Remote host closed the connection)
[01:13:39] <gentauro> hmmm, perhaps a wrong name to use? Nightly should be deliver on a nightly basis right? https://www.stackage.org/nightly-2021-12-04
[01:13:42] <gentauro> xD
[01:14:02] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:15:44] <dmj`> int-e: that's what I originally did, but used nested calls to insertWith instead of fromListWith (+). I agree the fromListWith solution is nicer since you can use the list monad... IM.fromListWith (+) $ m >>= \(k,v) -> case k of { 0 -> [(6,v),(8,v),(0,-v)]; _ -> [(k,-v),(k-1,v)] }
[01:16:33] <senoraraton> So I have a statement: gridmaker n k = [ n .. n+k-1 ] : gridmaker (n+k) k  I'm trying to understand just exactly what the append operator does in this case.
[01:17:49] <int-e> dmj`: No, you don't need (0,-v) or (k,-v) in this case; you have these in your code because your state has the old IM, rather than an empty one.
[01:18:20] <dsal> I just did `IntMap.fromListWith (+) . foldMap' f . IntMap.assocs` where     `f (0,n) = [(6,n), (8,n)];  f (x,n) = [(x-1, n)]`
[01:18:55] <dsal> senoraraton: what are you referring to `:` as the "append operator" ?
[01:18:55] <int-e> dmj`: And it's the need for those two adjustments that make that State-based code awful in my eyese.
[01:20:13] <senoraraton> dsal I thought that was what it was called?
[01:20:21] <dsal> senoraraton: No, that's cons, append is more like <>
[01:21:12] <dsal> But in your case, you're making a list of numbers starting at n, let's call it `a` and then making a list of `a` followed by a recursive call to `gridmaker`
[01:21:46] <dsal> e.g.,
[01:21:49] <dsal> @src iterate
[01:21:49] <lambdabot> iterate f x = x : iterate f (f x)
[01:22:03] <dsal> > iterate (* 3) 1
[01:22:04] <lambdabot>  [1,3,9,27,81,243,729,2187,6561,19683,59049,177147,531441,1594323,4782969,143...
[01:22:41] <dsal> Your is a list of lists and that sometimes confuses people, but it's doing a thing that's similar to what iterate is doing above.
[01:22:51] *** Quits: ubert1 (~Thunderbi@p200300ecdf0ba2ca8fd37040f9dc92fe.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:23:19] <int-e> dsal: it's funny how foldMap' and >>= do the same thing here
[01:23:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[01:24:09] <dsal> int-e: Yeah, it's also funny how vertical my brain gets.  I start thinking monoids and the idea of using a monad never occurs to me.
[01:26:16] <dmj`> int-e: well I needed those cases with the insertWith approach too... https://github.com/dmjio/aoc2021/blob/master/6/Main.hs
[01:26:56] <dsal> dmj`: Yeah, the point is that it's easier just to make a new map altogether on each iteration.
[01:27:07] <dsal> Then you only ever add.
[01:27:10] *** Quits: pfurla_ (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[01:27:12] <int-e> dmj`: yeah but why would you do step (IM.assocs m) m rather than step (IM.assocs m) IM.empty
[01:27:13] <dsal> senoraraton: Did the above make sense?
[01:28:55] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:28:59] <senoraraton> dsal: The recursive call makes sense now, I'm just trying to understand how the recursion terminates.
[01:29:09] <dsal> senoraraton: It doesn't need to.
[01:29:16] <dsal> Given the snippet you showed, it doesn't.
[01:29:19] <dsal> iterate doesn't terminate.
[01:29:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[01:30:09] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Quit: Leaving)
[01:32:02] *** Joins: ystael (~ystael@user/ystael)
[01:32:55] <dmj`> int-e: oh wow, I didn't see that initially. 
[01:36:11] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[01:36:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[01:39:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:42:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[01:43:54] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:45:58] <phaazon> AoC day 6p2 was fun :P
[01:47:51] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[01:48:07] <phaazon> now it’s time to see how jle` solved it :D
[01:48:26] *** Joins: sagax (~sagax_nb@user/sagax)
[01:48:41] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (Ping timeout: 245 seconds)
[01:49:16] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[01:50:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[01:50:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:51:23] <int-e> phaazon: the amazing thing about part 2 is that some people struggle with it :) (I can speculate... I guess you might literally maintain a list of lanternfish, or you might stumble over the requirement to handle numbers larger than 32 bits (but not, I think, 64 bits)
[01:52:16] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[01:52:30] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[01:52:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[01:53:54] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:54:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[01:55:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[01:55:37] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[01:55:51] <phaazon> int-e: oh it took me a couple of minutes
[01:55:57] <phaazon> because I started with the wrong approach :)
[01:56:07] <phaazon> and then I switched my approach and realized I didn’t even need a Vector :D
[01:56:49] <phaazon> https://github.com/phaazon/advent-of-code-2021/blob/master/day06/src/main.rs
[01:57:02] <phaazon> my first solution was more « verbatim » regarding the text of the puzzle :)
[01:58:50] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:59:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[01:59:53] <int-e> phaazon: Yeah the C++-like vector is a list in this context :)
[02:00:47] <phaazon> :)
[02:01:09] <phaazon> but yeah I can totally understand why everybody is having fun with meme on reddit regarding this puzzle
[02:01:14] <int-e> The example in the problem description was, of course, evil.
[02:01:17] <phaazon> because my first approach was probably theirs :D
[02:01:21] <phaazon> int-e: yeah
[02:03:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:06:01] <Hecate> 'sup merijn :)
[02:08:20] <dmj`> some people solved part 2 with a custom rotate on a linked list
[02:08:38] <Franciman> my goal for the next week is trying to write this https://nullprogram.com/blog/2021/12/04/ in my language
[02:08:55] *** Joins: pavonia (~user@user/siracusa)
[02:09:07] <Franciman> this requires I implement SIMD primitives
[02:09:12] <Franciman> that's going to be raad
[02:09:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:10:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:13:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:14:00] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[02:14:13] *** Quits: slack1256 (~slack1256@191.125.99.210) (Ping timeout: 240 seconds)
[02:15:05] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 252 seconds)
[02:15:54] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[02:18:01] *** Quits: kuribas (~user@ptr-25vy0i7z7uknhuz4b8c.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[02:19:35] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:21:01] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[02:21:30] <senoraraton> https://termbin.com/wj9p
[02:22:29] <senoraraton> So this is where I'm at.  I take in two inputs, and I want to use those inputs for gridMaker.  I have to convert the String types into Ints which the read does, but I get an error:
[02:22:36] <monochrom> Did you forget to "w = read width"?
[02:22:54] <senoraraton>  Couldn't match type ‘[]’ with ‘IO’
[02:23:17] <monochrom> Did you forget to "print (your formula here)"?
[02:23:43] <geekosaur> did you forget to do something with the result of take …
[02:24:05] <senoraraton> I don't intend to print it, at the moment, I just wanted to compile and then deal with what to do with it next.
[02:24:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:24:20] <monochrom> Then comment it out?
[02:24:43] <monochrom> Or write like "let foo = your formula here" and then go on to ignore foo?
[02:24:54] <senoraraton> Sure. --->
[02:25:04] <geekosaur> also having the definition of gridMaker between the type signature and implementation of main is confusing, even though it's legal
[02:25:31] <senoraraton> https://termbin.com/0pxj
[02:25:59] <senoraraton> I was getting errors when it was in the main=do so I moved it out, and it stopped the errors *shrug*
[02:26:38] <monochrom> You know that putStrLn is good for strings only, don't you?
[02:26:54] <monochrom> You also know that you're missing parentheses, don't you?
[02:27:12] <juri_> oh neat, stack overflow!
[02:27:35] <senoraraton> No, I knew neither of those things.
[02:28:19] <Axman6> juri_: it's a pretty cool website, eh
[02:28:40] <juri_> Axman6: what's it doing in my haskell? :)
[02:29:01] <Axman6> solving your problems and banning your questions as duplicates, probably
[02:29:07] <monochrom> The first is discoverable by either taking the docs seriously or from a simple ":type putStrLn".
[02:29:42] <monochrom> The second is a logical conclusion of "you would write like `take h (gridMaker 1 w)`, not `take h gridMaker 1 w`"
[02:31:39] <senoraraton> So like this -> https://termbin.com/5c4w  I still get an error 'parse error on input 'h''
[02:32:24] <monochrom> print (take h ( gridMaker 1 w))
[02:34:00] <senoraraton> Ah ha, and now it all makes much more sense.
[02:34:13] *** Quits: learner-monad (~ehanneken@user/learner-monad) (Ping timeout: 240 seconds)
[02:34:44] *** Quits: michalz (~michalz@185.246.204.40) (Remote host closed the connection)
[02:37:03] *** Quits: emf (~emf@2620:10d:c090:400::5:6c88) (Read error: Connection reset by peer)
[02:38:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:41:56] <oats> finally got around to doing AoC day 4 https://github.com/oatberry/aoc2021-haskell/blob/main/src/Day4.hs 
[02:42:01] <oats> lenses are fun
[02:43:20] *** Joins: emf (~emf@2620:10d:c091:480::1:c2f8)
[02:44:35] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:46:57] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:51:21] <dsal> oats: numP == Text.Megaparsec.Char.Lexer.decimal
[02:51:53] <oats> oh neat, I didn't know about that module
[02:52:21] <oats> I really want to get more familiar with lens
[02:53:00] <oats> kinda scary though, so much terminology and scary-looking types
[02:53:07] <dsal> Yeah, I spent a while getting familiar with parsers on these things.  I don't do as much with lens.
[02:53:45] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[02:54:31] <Axman6> senoraraton: you can't use `'s like that, just use brackets: print (take h ( gridMaker 1 w))
[02:55:08] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:55:39] <dsal> oats: I don't see anything particularly confusing in the lens stuff, though.  I use .~ instead of set.  heh
[02:55:48] <Axman6> senoraraton: also, defining the type signature for main, then randomly sticking in the definition of an unrelated function, and then defining the implementation of maine is pretty odd
[02:56:10] <dsal> Oh actually, I used lens in day4...
[02:56:17] <oats> dsal, I don't love using too much infix lens stuff lol
[02:56:42] <dsal> oats:  I did this for detecting wins:  https://www.irccloud.com/pastebin/qYCqiEaV/winners.hs
[02:56:43] *** Quits: max22- (~maxime@2a01cb08833598003eb627eec416786c.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:57:21] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[02:57:24] <dsal> colFill and rowFill are counts of numbers at each row and column.  When one hits zero, we have a winner.
[02:57:59] <Axman6> senoraraton: also, you understand that gridmaker is going to make an infinite list right?
[02:58:04] <oats> hmm, interesting
[02:58:13] <Axman6> > let gridMaker n k = [ n .. n+k-1 ] : gridMaker (n+k) k in gridMaker 2 3
[02:58:14] <dsal> -~ is nice there.  :)
[02:58:14] <lambdabot>  [[2,3,4],[5,6,7],[8,9,10],[11,12,13],[14,15,16],[17,18,19],[20,21,22],[23,24...
[02:58:17] <oats> dsal, is your whole soln up anywhere?
[02:58:33] <dsal> Not at the moment.  Just have my repo in keybase right now.  I'll paste it.
[02:58:37] <Axman6> oh you use take as well, all good
[02:59:03] <dsal> oats:  This is my whole day 4. https://www.irccloud.com/pastebin/wNWecKmJ/day4.hs
[02:59:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:59:53] <oats> dsal, I like the way you represent boards, probably more performant than mine
[02:59:55] <dsal> The parser is a bit lame in that it doesn't detect the board size, I just tell it.
[03:00:19] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 265 seconds)
[03:00:30] <dsal> The numbers in the board are the sequence of numbers being called.  So you an solve each one independently, and then use the map to figure out what the actual called numbers are.
[03:02:07] *** Parts: bontaq (~user@ool-45779fe5.dyn.optonline.net) (ERC (IRC client for Emacs 27.1))
[03:02:12] <dsal> They're also in order of call.  I did some heavy lifting in the parser.
[03:02:35] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[03:03:29] <dsal> I run benchmarks with one of the larger inputs, but you can see where I put the effort:  https://s3.amazonaws.com/public.west.spy.net/tmp/bench-day4.html
[03:03:42] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[03:06:35] <oats> I don't love my `findBoard` function, wish there were a nicer way of doing that
[03:10:43] <dsal> Yeah, I don't quite understand what you're going for there.  I just did all of them.  Then you could use a monoid or minimum/maximum or similar.
[03:12:43] <dsal> @hoogle Last
[03:12:43] <lambdabot> Data.Monoid newtype Last a
[03:12:43] <lambdabot> Data.Monoid Last :: Maybe a -> Last a
[03:12:43] <lambdabot> Data.Semigroup newtype Last a
[03:14:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:14:59] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[03:15:23] <EvanR> cool the fish thing if taken as a matrix turns into pascals triangles
[03:15:34] <EvanR> day 6
[03:16:16] <EvanR> also if coded with loop unrolling i got to day trillion lol
[03:17:09] <dsal> Somebody did 10^18.  That's apparently a large number.
[03:18:12] <dsal> oats: try either First/Min or Last/Max
[03:19:15] <oats> dsal: the way I did it, playBingo can calculate out the whole game, and then I wanted a generic way that I could use for part 1 and 2 that will find a board in a round with some criteria
[03:19:29] <oats> That's what findBoard is doing
[03:20:35] <dsal> Yeah, I see.  It's basically Last.
[03:20:51] <oats> Hmm, I'll take a look at those in a second, interesting
[03:21:01] <oats> Hadn't thought Monoid might be useful
[03:21:15] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[03:21:17] *** Parts: abraham (~abraham@143.244.185.86) (The Lounge - https://thelounge.chat)
[03:21:37] <dsal> my part 1 is minimum and my part 2 is maximum, but I could also use foldMap or something to implement winners and have it monoidify the thing for me.
[03:22:57] <dsal> Something like `winners :: Monoid m => Input -> ((Int, Int) -> m) -> m`
[03:25:19] <dsal> Actually, switch the first two arguments.  Now my part1, 2, and big run are all basically the same.
[03:28:09] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[03:29:16] <dsal> oats:  This way, `winners` doesn't make/return a list.  Just the thing I'm interested in. https://www.irccloud.com/pastebin/qIkpC0Gr/winning.hs
[03:29:53] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 252 seconds)
[03:29:55] <dsal> In the 'biggun' case, that's both the min *and* the max because I just have it do parts 1 and 2 in one pass.
[03:31:59] <dsal> The return includes the number of turns and the score.  I could get rid of that, but the both case is actually a bit different.
[03:33:09] <dsal> though I'm using parMap, so I do make a list anyway.  but parMap sped things up noticeably for me.
[03:36:12] <dsal> That's not actually faster, but it's a neat way to think about it, because now it can return the first, the smallest, the last, the largest, or a complete list.  Or whatever other monoid you might come up with.  The highest score.  The first one that has a score lower than the previous…
[03:36:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:36:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:36:53] *** Joins: wroathe (~wroathe@user/wroathe)
[03:43:11] <senoraraton> So now how do I install/include libraries?
[03:43:34] <senoraraton> I ran ghc-pkg check and ended up with a LOT of missing files.
[03:44:23] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:46:01] <sm> senoraraton: sounds like you deleted some files from there, or ran out of disk space ? 
[03:46:04] <senoraraton> If I try cabal install -p ncurses it tries to build alex and happy, and fails
[03:46:18] <senoraraton> I never deleted anything.  I have lots of file space.
[03:46:38] <sm> why do you say ended up with a lot of missing files ?
[03:47:55] <senoraraton> It prints out a list of 100+ that are all similiar to:
[03:48:10] <senoraraton> Warning: haddock-html: /usr/share/doc/haskell-annotated-wl-pprint/html doesn't exist or isn't a directory
[03:48:42] <sm> ah, I think those can be (must be) ignored
[03:48:45] <sm> and how does building alex and happy fail ? I found I had to install happy from $HOME, not inside a project
[03:48:57] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[03:49:35] <senoraraton> !psate
[03:49:37] <senoraraton> !paste
[03:50:53] <dsal> senoraraton: Generally, you want to make a project with cabal or stack and don't "install" libraries.
[03:51:04] <senoraraton> Sure, cabal install -p ncurses fails.
[03:51:19] <senoraraton> I'm trying to save the output for context.
[03:51:45] <dsal> I don't use cabal, so I don't know what 'cabal install' does.  It may not be what you want.
[03:51:59] <senoraraton> It is supposed to fetch dependencies, and install the package.
[03:52:04] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[03:52:05] <senoraraton> The dependencie build fails.
[03:52:08] <Axman6> @where paste
[03:52:08] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[03:53:50] <senoraraton> https://controlc.com/1df340e3
[03:54:16] <senoraraton> This is the error.  Sorry for the atrocious pastebin, I don't know of a better one.
[03:55:37] <dsal> "install the packages" sounds like a bad idea, though.  I don't ever want to do that when I'm building a haskell project.
[03:56:08] <senoraraton> https://paste.tomsmeding.com/tbsyq9R9
[03:56:13] <senoraraton> There is a better link to the paste.
[03:56:43] <senoraraton> I need to be able to use the libraries, which implies the libraries are "installed"
[03:57:04] <dsal> I use libraries, but I do not install libraries.
[03:57:14] <senoraraton> So then how do you import the said libraries?
[03:57:23] <geekosaur> with modern stack or cabal you do not install libraries, you declare dependencies on them and stack or cabal will install them as needed without lewtting different versions interfere with each other
[03:57:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[03:58:12] <senoraraton> Sure.  How.
[03:58:26] <geekosaur> you use stack/cabal projects to do this. a project is defined by a stack.yaml for stack or a cabal.project for cabal. dependencies are listed in a file foo.cabal for a project named foo
[03:58:28] *** Joins: burnsidesLlama (~burnsides@client-8-78.eduroam.oxuni.org.uk)
[03:58:45] <kennyd> with stack each project has its own sandbox, with local copies of libraries
[03:58:55] <dsal> stack usually gives you an hpack package.yaml with a dependencies section.
[03:59:02] <dsal> cabal also has a dependencies section, but I don't use it directly.
[03:59:03] <geekosaur> if you want to then import them into a ghc session, instead of running ghci directly you use stack ghci or cabal repl
[03:59:19] <kennyd> (well not copies, IIRC libraries are shared between projects. but multiple versions of same libraries can coexist)
[03:59:21] <senoraraton> I want to compile the binary with the dependencies.
[03:59:44] <dsal> Right, so you list them as dependencies in your project.
[03:59:48] <sm> senoraraton: `There are files missing in the ‘base-4.15.0.0’ package` is never a good sign, it means something went wrong in the past and you should probably just reinstall ghc
[03:59:52] <dsal> How did you start your project?
[04:00:01] <dsal> And how did you get ghc/cabal?
[04:00:11] <geekosaur> also what platform are you on?
[04:00:12] *** Joins: Techcable (~Techcable@168.235.93.147)
[04:00:39] <geekosaur> (you will have lots of missing files on arch linux because of the way they butcher their haskell packaging)
[04:00:45] <senoraraton> I'm so confused.  There is all this noise about semantics and what is and isn't "installation".
[04:00:48] <senoraraton> I'm on linux
[04:01:00] <geekosaur> we need more than "linux"
[04:01:06] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[04:01:06] <senoraraton> GNU linux
[04:01:09] <dsal> You seem to be trying to learn haskell by throwing stuff into a shell and seeing what happens.
[04:01:12] <kennyd> :)
[04:01:12] <geekosaur> sigh
[04:01:36] <sm> senoraraton: yes it is confusing, sorry about that. Stick to the paste and the missing files issue, and we'll hopefully focus on that
[04:01:38] <geekosaur> arch? debian? ubuntu? gentoo? void? …
[04:01:41] <dsal> `nix-shell -p stack` works pretty well on my system for getting something set up.
[04:02:14] <sm> ha ha it was time to drag nix in ... :)
[04:02:53] *** Quits: burnsidesLlama (~burnsides@client-8-78.eduroam.oxuni.org.uk) (Ping timeout: 252 seconds)
[04:03:01] <senoraraton> I'm running archlinux.
[04:03:21] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:03:23] <dsal> It sounds like you used arch packages to get ghc and cabal, then.  Which is known to be unnecessarily difficult.
[04:03:26] <senoraraton> I'm using cabal as my build tool, and I'm trying to import NCurses.
[04:03:47] <senoraraton> Of course I did, thats how you install packages on Arch.... >..
[04:04:11] <dsal> Yes, we've encountered many suffering arch users in here, so we're familiar with the issues.
[04:04:23] <senoraraton> Go on...
[04:04:37] <dsal> geekosaur described some of the issues above.
[04:04:37] <sclv> arch’s packages are broken
[04:04:43] <sm> do we have any arch ghc package experts in here ? if not you might be better off asking #arch or the arch haskell wiki page which I've heard is good
[04:04:48] <dsal> I don't use arch, so I don't have any of those issues and can't help get past them.
[04:04:53] <sclv> they don’t give the full set of built libs
[04:05:09] <sm> OR, you can skip arch packages and install ghc another wa
[04:05:12] <sclv> because they compile dynamic only
[04:05:14] <sm> y
[04:05:31] <senoraraton> Okay....
[04:06:01] <senoraraton> Do I need to uninstall and build from source haskell?  ghc?  cabal?  ALL of it?
[04:06:19] <monochrom> Uninstall arch's haskell packages.  Switch to https://www.haskell.org/ghcup/
[04:06:20] <yushyin> if you want to write haskell on arch linux use ghcup
[04:06:22] <dsal> ghcup might work for you.
[04:06:38] <sm> I would install the stack binary and let it install the rest. Others would recommend ghcup. Two good alternatives to the arch packages.
[04:06:40] <sclv> ghcup gives you correct binary distribution
[04:06:58] <senoraraton> Does ghcup include cabal?
[04:07:02] <sclv> arch just deletes half the official distro
[04:07:16] <dsal> yeah, ghcup seems to give me stack and cabal
[04:07:16] <sclv> ghcup manages installing ghc and cabal both
[04:07:26] <monochrom> Don't succumb to the false dichotomy "either from my distro or build from source". There is always a 3rd choice.
[04:07:30] <senoraraton> So I need to remove haskell, and GHC, and cabal before installing.
[04:07:34] * dsal has never actually *used* ghcup
[04:07:46] <dsal> Removing the broken installation would probably make things easier.
[04:08:00] <geekosaur> ghcup includes both stack anbd cabal
[04:08:25] <geekosaur> and hls which is an editor plugin for IDE-loike editing of haskell source
[04:12:42] *** Joins: tfeb (~tfb@88.98.95.237)
[04:13:17] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Read error: No route to host)
[04:13:20] <yin> what are the performance differences between working with Word8 and Word ?
[04:13:32] <monochrom> It depends.
[04:13:35] <monochrom> Show actual code.
[04:13:48] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[04:14:37] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 240 seconds)
[04:15:28] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[04:16:29] <hpc> yin: what are the performance differences between working with uint8_t and uint64_t? :P
[04:17:24] <monochrom> In fact I believe that even with uint8_t vs uint64_t in C, the correct answer is still "It depends. Show actual code."
[04:17:40] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[04:18:17] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[04:18:23] <hpc> that's what i was getting at
[04:18:58] <unclechu> Hey, can I evaluate a type family in a GHC REPL?
[04:19:30] <monochrom> IIRC :kind! helps but maybe not fully.
[04:19:37] <monochrom> or s/fully/always/
[04:20:18] <unclechu> monochrom thanks, :k! helps in my case
[04:23:36] <senoraraton> ghcup is throwin errors that there is no space on my drive... >.>
[04:24:10] <monochrom> It installs stuff in your home directory. It's some 1-2GB.
[04:25:18] <monochrom> 2GB.
[04:25:18] *** Joins: xsarnik1 (xsarnik@lounge.fi.muni.cz)
[04:25:32] *** Joins: slice (~slice@user/slice)
[04:25:51] <monochrom> But then first it downloads the tarball. That's an addition 0.2-0.5GB.
[04:26:00] *** Joins: xstill-1 (xstill@fimu/xstill)
[04:26:11] <senoraraton> It also is using my /tmp drive which is mounted as 1.5G, and it wants 5G...
[04:26:22] <monochrom> Yeah.
[04:26:31] <senoraraton> My data drive has 50G free.
[04:26:59] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Read error: Connection reset by peer)
[04:26:59] *** xsarnik1 is now known as xsarnik
[04:27:12] <monochrom> Set the TMPDIR environment variable to help.
[04:27:32] *** Quits: xstill- (xstill@fimu/xstill) (Ping timeout: 268 seconds)
[04:27:32] *** xstill-1 is now known as xstill-
[04:31:27] <senoraraton> It looks like its building.....
[04:31:58] *** Joins: nvmd (~nvmd@user/nvmd)
[04:34:32] <yushyin> 'Consider freeing up disk space or setting TMPDIR env variable. ...waiting for 10 seconds before continuing anyway, you can still abort...' is part of the warning that ghcup throws
[04:35:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:35:54] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Quit: Lost terminal)
[04:36:35] <monochrom> People no longer read error messages.
[04:36:54] <monochrom> They stopped reading docs a decade ago. This is the next step of the evolution.
[04:37:45] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[04:38:00] <senoraraton> Okay.. so ghcup and cabal are installed, but its not recokginizing gch(i)
[04:38:17] <dsal> Guessing you didn't put them in your path.
[04:38:47] <yushyin> monochrom: you can repeat yourself here :D
[04:40:04] <senoraraton> I did add ghcup and cabal.  ghci is in the ghcup directory I believe.  I used the TUI of the binary, and then I installed ghcup and it gave me a different interface, so I'm uninstalling/reinstalling GHC through there.
[04:40:54] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[04:41:24] <dsal> Yeah, they're all in the ghcup bin directory.
[04:44:31] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:47:05] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[04:47:20] <senoraraton> So the bin dir is in my path, and ghcup runs, but ghc(i) doesn't
[04:48:07] <senoraraton> O, they do run.  It just isn't symlinked to ghc
[04:48:37] <yushyin> try `where ghci' in your shell
[04:48:48] <senoraraton> Not found.
[04:49:06] <senoraraton> In the bin dir, I can run ghci-8.10
[04:49:23] <senoraraton> Its just not symlinked to ghc, as I said.  I'm just gonna create the sym link.
[04:49:36] <yushyin> echo $PATH
[04:50:23] <senoraraton> $HOME/.ghcup/bin is in my path.  ghcup works, so it must be in my path....
[04:50:43] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 256 seconds)
[04:50:59] <yushyin> you should set a ghc default with ghcup tui
[04:51:16] <senoraraton> I do not.
[04:51:46] <yushyin> but you should, if you want that symlink
[04:51:53] <senoraraton> O... You have to set it.
[04:52:20] <senoraraton> I had ghc installed, but there is a "set" flag.
[04:52:35] <senoraraton> Now that makes sense, because I can change the version if needed.
[04:53:04] <senoraraton> Now time to solve the original problem I had.  Importing libraries
[04:53:17] <dsal> Step one:  Start a project.
[04:53:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1572:52e4:1190:1c22) (Ping timeout: 240 seconds)
[04:53:48] <dsal> I use stack.  Some people use cabal.  In any case, you list your dependencies in the files and they become available at build time.
[04:53:58] *** Joins: d34df00d (~d34df00d@2600:1700:8c60:3a10::48)
[04:54:06] <d34df00d> Hi!
[04:54:18] <d34df00d> I have an UArray of Word8's. What's the best way to dump its contents into a file?
[04:56:06] <senoraraton> dsal Sure, that sounds simple.  the "list your dependencies" part is the hard part.
[04:56:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[04:58:25] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[04:58:51] <yushyin> senoraraton: https://cabal.readthedocs.io/en/3.6/getting-started.html#adding-dependencies
[04:59:13] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 265 seconds)
[04:59:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:59:55] *** Joins: nvmd (~nvmd@user/nvmd)
[05:00:13] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e6304137ec8947839cf.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:00:29] <senoraraton> I'm reading it now, do I need to declare my dependencies dependencies?
[05:00:49] <yushyin> no you don't
[05:01:05] <sm> nice doc
[05:01:47] <senoraraton> So this is my package: https://hackage.haskell.org/package/ncurses
[05:02:07] *** Quits: mmhat (~mmh@55d45587.access.ecotel.net) (Quit: WeeChat 3.3)
[05:02:10] <geekosaur> is that the package you are working with, or one you need as a dependency for something else?
[05:02:26] <geekosaur> if the latter, you just list it as a dependency and let stack or cabal worry about it
[05:03:28] <senoraraton> That is the package I want to import.
[05:03:35] <sm> and they will fail to install the right c libs, passing the buck back to you but never mind that :)
[05:05:42] <geekosaur> so it's a dependency and not your actual package. your package is the one that does the importing; anything you import from it is a dependency
[05:05:44] <senoraraton> Okay so i added ncurses ^>=0.2.16 to my build-dependencies.
[05:06:20] <oats> dsal, MONOIDS https://github.com/oatberry/aoc2021-haskell/commit/2bf909dbd7507d68a1fa160b94db0783d3aa640a
[05:06:29] <oats> Last and First are nifty
[05:06:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:06:52] <geekosaur> arch doesn't distinguish between build and run dependencies itself,m and ncurses is needed by the base system, so you should have no problems with C dependencies
[05:06:52] <oats> I feel happy with my solution now :)
[05:07:18] <senoraraton> It is a dependency, I want to import the library into my code, I first need to "install" or link or whatever semantic statement you wanna make, make the thing avaliable, and I make it avaliable by putting it in the foo.cabal file.
[05:07:29] <geekosaur> (this would come up on fedora or debian/ubuntu, where build and run dependencies differ)
[05:07:37] <geekosaur> no, you do not need to install it
[05:07:48] <senoraraton> I need to make cabal aware of it.
[05:07:48] <geekosaur> cabal or stack will do it for you when it sees the dependency
[05:08:21] <geekosaur> really, that's all you need to do is declare the dependency and cabal/stack will do the rest for you
[05:08:40] <senoraraton> expecting space, "&&", white space, "||", comma or end of input
[05:08:40] <senoraraton> 35 |         base ^>=4.15.0.0 36 |         nCurses ^>=0.2.16
[05:08:49] <senoraraton> Apparently its not that easy.
[05:09:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:09:38] <geekosaur> comma
[05:09:59] <geekosaur> put a comma at the end of line 35
[05:09:59] *** Joins: jkaye (~jkaye@2601:281:8300:7530:da02:a8ec:4a68:7358)
[05:10:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:11:16] <geekosaur> there is method to this madness, by the way: if you install packages yourself, you can end up in a situation where different of your packages require different versions — but multiple versions will conflict with each other and won't work. cabal and stack were developed to manage this for you so each project sees only the version it wants instead of running into dependency conflicts
[05:11:30] <senoraraton> https://termbin.com/6xx3
[05:11:55] <senoraraton> I'm not installing packages myself, never wanted to.  Otherwise what is the entire purpose of the build tool....
[05:12:13] <senoraraton> I'm trying to configure cabal to do it for me, and I have been doing that since I started asking questions.
[05:12:25] <geekosaur> in C this is done by having a developer package which links always to the latest version, which is effectively the only one available. in perl and python there's no good way to deal with this except to make your own private language installation, so there are tools that do that for you
[05:13:02] <geekosaur> hm.
[05:14:03] <geekosaur> base 4.15.0.0 corresponds to ghc 9.0.1. you probably have 8.10.7 installed from the base version number\
[05:14:10] <senoraraton> Why does cabal require 15, when ghcup recommends 4.14.3
[05:14:19] <senoraraton> I installed 4.14.3, does that matter?
[05:14:19] <geekosaur> base cannot be upgraded, it's wired into the compiler
[05:14:43] <geekosaur> you said ^>=4.15.0.0 on line 35. why?
[05:14:56] <senoraraton> So then just change the cabal file to match, but that means every program I generate will be wrong for my build environment?
[05:15:27] <geekosaur> I don't understand that question
[05:15:48] <geekosaur> did you have some specific reason to specify 4.15.0.0?
[05:15:52] <senoraraton> That was autogenerated by cabal
[05:16:03] <senoraraton> when I ran cabal init
[05:16:03] <geekosaur> if not, just change it to match the version that comes with 8.10.7
[05:16:14] <geekosaur> huh
[05:16:20] <geekosaur> that sounds wrong
[05:16:39] <senoraraton> To start a project you type cabal init.  It gives you a little questionairre, and sets up the files.
[05:16:49] <geekosaur> it implies that you have a ghc 9.0.1 hanging around somewhere and cabal found it and used its versions
[05:16:57] <senoraraton> Maybe it was because the previous version of cabal generated it, and I rolled back with ghcup
[05:17:02] <senoraraton> I uninstalled it.
[05:17:08] <sclv> you may want to pass “init -i” to ask for interactive too
[05:17:10] <geekosaur> then you'll want to regenerate it, yes
[05:17:33] <geekosaur> also the reason we don't recommend 9.0.1 is that it's known buggy
[05:17:43] <geekosaur> 9.2.1 is the fix but it has its own problems :(
[05:17:55] <geekosaur> so for now 8.10.7 remains recommended
[05:17:56] <dsal> oats: those constraints are intense.
[05:18:03] <geekosaur> unless you like to do compiler debugging
[05:18:24] <oats> dsal, haha indeed, I let hls deduce them for me
[05:18:34] <sm> poor senoraraton.. so many pitfalls in this landscape
[05:18:57] <dsal> oats: Ah.  You probably just need 'm'
[05:19:34] <oats> dsal, I thought so too, but the `fmap` in `findBoard` adds the Functor constraint
[05:20:05] <dsal> I'm trying to follow something here.  You're doing a bit more than you need to.
[05:20:18] <oats> oh?
[05:20:35] <dsal> e.g., `monoid . fmap` might be `foldMap monoid` but I just got out of the shower, so the peak of my brain power is down the drain.
[05:22:01] <sm> what are the problems with 9.2.1, geekosaur ?
[05:22:01] <monochrom> Is that why nerds don't take showers? >:)
[05:22:06] <dsal> ha
[05:22:22] <dsal> oats: I'm pretty sure you have too many maps and/or concats, but I'm not entirely sure which are superfluous.
[05:22:48] <oats> oh, I can reduce `mconcat . map findBoard` to `foldMap findBoard`
[05:23:45] <dsal> Well, yes, but you actually want to fold it into the monoid you want.
[05:23:57] <dsal> :t mconcat . map
[05:23:58] <lambdabot> error:
[05:23:58] <lambdabot>     • Couldn't match type ‘[a] -> [b]’ with ‘[c]’
[05:23:58] <lambdabot>       Expected type: (a -> b) -> [c]
[05:24:02] <dsal> :t mconcat . map f
[05:24:03] <lambdabot> (Monoid c, Show a, FromExpr c) => [a] -> c
[05:24:10] <dsal> :t foldMap f
[05:24:11] <lambdabot> (Foldable t, Monoid m, Show a, FromExpr m) => t a -> m
[05:24:35] <dsal> (show is kind of weird there, but that's that expr thing)
[05:25:22] <dsal> But your monoider function should be `t -> m` for some monoid, then it's something like  `foldMap (monoider . findBoard)`
[05:25:45] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 252 seconds)
[05:27:09] <dsal> Oh, I see findBoard is already doing that (getting out of the diff view makes code easier to read)
[05:27:26] <oats> ah yeah, I was confused about what you were trying to "fix" lol
[05:27:44] <oats> and I was wrong, it's the `fmap boardScore` that adds the Functor constraint
[05:28:53] <dsal> Is the functor `Maybe`?  This might be a case where being more concrete makes things a bit clearer.
[05:29:33] <oats> `f` is either `Last` or `First`
[05:29:41] <senoraraton> https://termbin.com/ezoe  So it fails, but we are making progress.
[05:30:44] <oats> oh but maybe if I put the `fmap boardScore` before call `monoid`...
[05:30:57] <sm> senoraraton: yes, this is a more common error. You may need to install some
[05:30:57] <sm> ncurses-dev system package 
[05:31:23] <senoraraton> How.
[05:31:30] <dsal> oats: Yeah, i see.  I had a similar problem with wanting to keep the tuple, but eventually extract it.  Yours is easier because you probably could just untuple it first.
[05:31:42] <dsal> I'm using Min and Max, so I need the tuple.
[05:31:54] <oats> HAH
[05:31:55] <sm> with your arch package manager. Search the ncurses packages to find the exact name.
[05:31:55] <oats> got it
[05:33:24] *** Joins: nvmd (~nvmd@user/nvmd)
[05:33:27] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[05:33:50] <senoraraton> o... there is no dev package.
[05:34:04] <senoraraton> Its supposed to be bundled within the ncurses package, which is installed.
[05:34:21] <dsal> oats: If you flip it, you could probably end up with just `Monoid m` as a constraint, returning `m`
[05:34:34] <yushyin> you need to set use-pkgconfig flag for the ncurses dep
[05:34:59] <senoraraton> In arch?
[05:35:01] <yushyin> or force-narrow-library
[05:35:05] <yushyin> no in the cabal config file
[05:35:14] <senoraraton> How do I do that?
[05:35:28] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 265 seconds)
[05:35:28] <geekosaur> sm: the new codegen for Apple M1s has sign extension problems
[05:35:38] <geekosaur> shouldn't matter on any other platform
[05:36:07] <yushyin> sometimes linux distribution put the header files in ncursesw/ncurses.h and sometimes in ncurses.h the package has flags for this
[05:36:15] <sm> thanks.. I installed 9.2.1 on m1 today, let's see if I notice
[05:36:31] <senoraraton>      ncurses >= 0.2.16 -use-pkgconfig?
[05:36:55] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[05:37:05] <geekosaur> ncursesw may have gone away since it's deprecated in ncurses 6 (all versions are "w")
[05:37:20] <geekosaur> so it may be in ncurses/ncurses.h
[05:37:24] <senoraraton> I have ncurses 6.
[05:37:31] <sm> worth a try: did you find the arch haskell wiki page ? they might  mention this there. Also try the issue tracker for the ncurses packages on hackage (all of them)
[05:37:43] <senoraraton> I'm not installing haskell through arch
[05:37:48] <senoraraton> Apparently it doesn't work.
[05:37:54] <senoraraton> I installed haskell through ghcup
[05:38:02] <sm> this happens basically everyone who builds anything curses related in haskell :(
[05:38:04] <geekosaur> no, but you got your C ncurses package via arch and this will affect those as well
[05:38:16] <senoraraton> So how do I fix it?
[05:38:34] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[05:38:54] <oats> dsal, yay check it out https://github.com/oatberry/aoc2021-haskell/commit/4c1dacf65732fc135dad35366bbb4900a3e68ccc
[05:39:11] <oats> thanks for the help :)
[05:39:48] <senoraraton> How do I tell cabal the correct inlcude path?
[05:40:31] <sclv> senoraraton: the cabal help describes many flags including for include and linking
[05:40:35] *** Joins: genieliu (~genieliu@103.37.140.24)
[05:40:48] <sclv> extra lib dirs and extra include dirs
[05:41:41] <senoraraton> I don't know, I think this might have broken me.
[05:41:58] <senoraraton> Its like I climb one mountain, and their is another mountain ahead of me.
[05:42:11] <senoraraton> I'm not interested in climbing toolchain mountain anymore.
[05:43:46] <yushyin> if you follow the link from the hackage ncurses page you then you can do it e.g. like this https://cabal.readthedocs.io/en/latest/setup-commands.html#controlling-flag-assignments
[05:44:43] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[05:44:55] <yin> is there a canonical way of doin (toEnum . fromEnum) ?
[05:45:13] <senoraraton> So I run cabal build -use-pkgconfig?
[05:45:16] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[05:45:33] <senoraraton> Unrecongized build option
[05:45:37] <geekosaur> sadly, there is little consistency between different linux distributions or even different versions of the same distribution. which is a large part of the problem with arch; they'll break something like this without warning and you get to pick up the pieces
[05:45:53] <geekosaur> yin, no
[05:46:01] <yin> geekosaur: thanks
[05:46:11] <geekosaur> I call it "twiddle" when I need it
[05:46:23] <sclv> -fuse-pkgconfig
[05:46:37] <sclv> -f says its a package flag
[05:46:54] <senoraraton> Where would I put this?   constraint: ncurses +force-narrow-library 
[05:47:31] <yushyin> this is a valid field in cabal.project, i guess
[05:48:14] <senoraraton> Nope, both solutions fail.
[05:48:17] <senoraraton> Same issue.
[05:50:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:50:24] <senoraraton> So do I have to build it from source and make the changes myself inorder to specify the proper version of ncurses?  Cause I don't wanna do that.
[05:50:36] <yushyin> https://cabal.readthedocs.io/en/latest/cabal-project.html?#cfg-flag---constraint seems like the field name is constraints (plural)
[05:52:05] <senoraraton> Still fails.
[05:52:08] <yushyin> also, you do need pkgconf installed
[05:52:13] <dsal> oats: nice
[05:52:31] <senoraraton> It is installed.
[05:52:33] <yushyin> (pacman -S pkgconf)
[05:53:12] <senoraraton> Its installed.
[05:53:36] <senoraraton> Neither of those work.
[05:54:56] <senoraraton> The include line is wrong, at least for my system, and I don't know how to edit it.
[05:55:58] <sm> maybe https://github.com/commercialhaskell/stack/issues/3509 has some clues
[05:57:17] *** Quits: xff0x (~xff0x@2001:1a81:5269:5600:97b6:69e2:8ab7:379a) (Ping timeout: 252 seconds)
[05:58:48] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[05:58:50] <senoraraton> This is all stack related, so I don't know how to fix it for cabal.
[05:59:03] <senoraraton> But it is broken.
[05:59:10] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7f00:7dec:e953:6848:5983)
[05:59:11] <sm> https://bbs.archlinux.org/viewtopic.php?id=255197: "I corrected this by adding `constraint: ncurses +force-narrow-library` to my .cabal/config file, and running cabal clean, configure...etc." I'm just throwing out links, not an arch user.
[05:59:35] <senoraraton> Also issue for 3 years, still not fixed FTW
[05:59:43] <senoraraton> I added that.  Did not work
[05:59:51] <senoraraton> I also modified it to be constraints, did not work
[06:00:07] <senoraraton> -fuse-pkgconfig also didn't work, and none of those things worked in any combination either
[06:00:23] <yushyin> can confirm that it is not working, might be a bug in the haskell package or cabal
[06:01:14] <senoraraton> It wants the ncursesw directory, but ncursesw is deprecated anddoens't exist anymore.
[06:01:30] <senoraraton> And I don't know how to edit where cabal is looking for the thing to update the script.
[06:03:17] <sm> I will add that https://hackage.haskell.org/package/ncurses was last touched in 2017, and probably not the one you should start with
[06:03:36] <sm> https://hackage.haskell.org/package/vty is much more used
[06:03:55] <dsal> oats: for a good time, return Int
[06:03:59] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[06:04:30] <senoraraton> vty or brick?
[06:04:44] <sclv> on that one, if you pass both use-pkgconfig and force-narrow-library then that should avoid depending on ncursesw but yeah, its a very old lib, and probably not in the best shape
[06:06:30] <sm> senoraraton: both are excellent, vty is lower level and simpler so why not get that working first
[06:10:40] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:11:14] <yushyin> senoraraton: it is unfortunate that you started with an outdated package which causes problems :/
[06:11:20] <oats> dsal, for a good time? huh
[06:11:36] <dsal> oats: do you understand how Data.Coerce works?
[06:11:39] <dsal> :t coerce
[06:11:40] <lambdabot> error:
[06:11:40] <lambdabot>     • Variable not in scope: coerce
[06:11:40] <lambdabot>     • Perhaps you meant ‘coerced’ (imported from Control.Lens)
[06:11:47] <dsal> Oh right, Lambdabot wouldn't let that happen
[06:11:51] <sm> yushyin, and it's one of those things we always forget to check at the start
[06:12:00] <oats> I am not familiar with Data.Coerce
[06:12:02] * oats peeks
[06:12:03] <dsal> % :t coerce
[06:12:03] <yahb> dsal: Coercible a b => a -> b
[06:12:41] <dsal> If `a` and `b` have the same representation and coercion is allowed (by role) then you can just do that.
[06:13:09] <sm> hackage/cabal should have some kind of warning system to steer new folks away from troublesome packages
[06:13:17] <yushyin> senoraraton: but good luck in the further process and that everything works out now ;D
[06:13:32] <yushyin> sm: so true
[06:14:07] <sm> well, I guess that is in part what stackage is
[06:14:18] <dsal> oats: this is typically a newtype wrapper thing, where you can take the result out of it without actually doing anything at runtime.  e.g., you can coerce an entire list of stuff into a different type with the same representation.
[06:14:32] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:14:59] <dsal> For example, `sum` is implemented as `sum = getSum #. foldMap' Sum`
[06:15:34] <dsal> where (#.) _f = coerce
[06:16:38] *** Joins: ub (~Thunderbi@p200300ecdf0ba286bd3e231ce6977cbe.dip0.t-ipconnect.de)
[06:17:28] <yushyin> sm: that's true of course, but someone new might quickly find out that the package they want is on hackage (and not with stackage), googles how to add hackage packages to stack (extra-deps:) and promptly run into similar problems
[06:17:33] <dsal> So if your monioidification function is (a -> m) with just a simple newtype wrapper like First or Last, then coerce can get the value back out without you having to explicitly name the "extraction" function.
[06:18:00] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2ca3910be5e8791151b.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[06:18:00] *** ub is now known as ubert
[06:19:39] <oats> interesting
[06:19:45] <oats> this is safe?
[06:20:03] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[06:20:26] <dsal> Yeah.
[06:20:34] <dsal> There's also unsafeCoerce.  That's less safe.
[06:20:49] <sm> yushyin: indeed, but at least they are more likely to find an use something in the stackage snapshot (like vty)
[06:22:28] <dsal> In addition to just straight memory representation, there are also roles to limit where you can coerce.  For example, if you have a `Map Int Int` you can coerce it to a `Map Int (X Int)` for some newtype X over Int, but you can't coerce it to a `Map (X Int) Int` because that X type can have ordering rules that differ from the underlying Int and that would cause the map to misbehave.
[06:23:24] <senoraraton> Well vty builds, I can't find any documentation on how to use it, but cabal imported it.
[06:23:34] <senoraraton> Is there a way to supress the "up to date" output from cabal run?
[06:23:45] <dsal> Weird.  I can't find that in the docs, but in the source, you'll see `type role Map nominal representational` -- you can coerce something whose role is representational, but not nominal.
[06:24:05] <senoraraton> I found the docs.
[06:24:42] <sm> yes, https://hackage.haskell.org/package/vty-5.33/docs/Graphics-Vty.html
[06:25:02] <sm> when you try brick, don't miss the excellent user guide, as I did
[06:25:37] <dsal> I don't think I could use brick without that Carnage/Migos song playing the whole time.
[06:26:19] <senoraraton> I love how I spent 4 hours solving a problem, to just give up and try a different library.
[06:26:32] <dsal> To be fair, you have a variety of problems and you solved many of them.
[06:26:37] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[06:26:54] <sm> well, and learning valuable arch / haskell package management troubleshooting skills 
[06:27:25] <oats> dsal, oh and now I also need a Coercible constraint on playBingo, I see
[06:27:31] <oats>  playBingo :: (Monoid b, Coercible b c) => (Maybe Int -> b) -> Bingo -> c
[06:27:34] <sm> number one being: be careful about using packages not touched in the last year
[06:27:40] <dsal> oats: Yeah, that's neat.
[06:27:43] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[06:28:08] <dsal> But you can also just return Int and have `Coercible b Int`
[06:28:27] <sm> dsal: https://www.youtube.com/watch?v=dermyeoLDgs ?
[06:28:33] * oats adds FlexibleContexts
[06:28:56] <dsal> sm: My mama says stay patient
[06:29:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[06:30:43] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:32:20] <janus> using stack, what is the motivation for putting version bounds in package.yaml? the versions are already determined by the stack.yaml
[06:33:01] <dsal> They translate directly to cabal.  You might still have an upper bound.  Sometimes I have lower bounds and I have to go outside of package.yaml to do that.
[06:33:08] <sm> janus: 1. package.yaml generates the .cabal file, which is a standard required by most tools 
[06:33:11] <dsal> e.g., I'm using amazonka 2 in some of my stuff.
[06:33:40] <dsal> It would be nice of hpack could make reasonable guesses for stackage, though.
[06:33:44] <sm> 2. package.yaml/*.cabal describe the range of versions allowed, which is useful and different information than what's in stack.yaml
[06:33:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[06:34:22] <oats>  playBingo :: (Monoid b, Coercible b (Maybe Int)) => (Maybe Int -> b) -> Bingo -> Maybe Int
[06:34:26] <oats> this is super interesting
[06:34:31] <sm> 3. they also define the packages visible to your code, which is a small subset of the stackage snapshot
[06:34:32] <oats> this shit is why I do AoC
[06:34:43] <dsal> oats: Yeah, neat.  :)
[06:34:43] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:34:58] <oats> dsal, I've learned more than a couple things today, thank you
[06:35:07] <janus> this project has a hundred deps, we will never be able to put the versions that would theoretically work
[06:35:11] <dsal> oats: woo.  Great.  Hopefully I didn't do any damage.
[06:35:29] <janus> i ran cabal-plan on it and the plan that was generated built fine
[06:35:48] <sm> janus: you at least need to list their names though, rather than importing random packages from stackage/hackage
[06:35:50] <janus> so since there were no bounds, it seemed that no package made a breaking release for 8.6.5 which is the compiler used
[06:36:01] <dsal> janus: Its use is proportional to the number of different projects using your package.
[06:36:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:36:23] <dsal> If you're using amazonka and you don't have an upper bound, you're likely to have a bad time when 2.0 ships.  :)
[06:37:01] *** Quits: jkaye (~jkaye@2601:281:8300:7530:da02:a8ec:4a68:7358) (Ping timeout: 268 seconds)
[06:37:38] <janus> dsal: it won't ever land in lts-14. and even if it did, we'd just make an extra-dep once compilation fails
[06:38:01] <janus> this "reactive" way of working that stack encourages is growing on me...
[06:38:41] <dsal> janus: Yeah, that's cool.  But if you publish your package, it's not published as an lts
[06:38:45] <janus> dsal: actually i went on this whole adventure with cabal-plan because i wanted to run amazonka2. so now i have this giant list of extra-deps that replaces bascially every package in the lts...
[06:38:57] <dsal> lts-14 is pretty old
[06:39:00] <sm> janus: if it suits your needs, you are certainly free to list all deps in stack.yaml and generate package.yaml from it (some will probably have to be comments) 
[06:39:45] <sm> I could see that being convenient in some use cases
[06:39:58] <sm> or, vice versa
[06:40:01] <janus> sm: what would be gained by generating package.yaml from stack.yaml? so that it could be published? i gather it is only useful for libraries
[06:40:26] <sm> you asked why the two files exist, and suggested that two was unnecessary for you
[06:40:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:40:48] <janus> aah right, i didn't think about it
[06:40:58] <sm> so, perhaps you'd gain more simplicity that you were hoping for
[06:41:10] <sm> I have never heard of it done though
[06:41:22] <janus> yeah. it sounds nice. but the stack.yaml includes transitive dependencies too. seems a bit weird to list those in package.yaml
[06:41:46] <sm> normally stack.yaml is very minimal. A long list of deps there is a sign that you're using libraries not well packaged / with the wrong ghc version
[06:42:10] <janus> right, it was minimal before i attempted this... :P
[06:42:29] <janus> i could start deleting random stuff from it, but it seems weird, since it would effectively downgrade libraries
[06:42:51] <janus> like i saw cabal-plan put happy 1.20 and if i remove it from extra deps, it rebuilds a couple of packages with happy 1.19
[06:43:02] <sm> consider trying snapshots of other major ghc versions ? probably one will be easier
[06:43:04] <janus> so since i generated it by machine, may as well let it be...
[06:43:58] <sm> I made a huge stack.yaml this morning, only because there's no snapshot for ghc 9.2 yet
[06:44:41] <janus> sm: with cabal-plan it seems easy either way... but yeah, maybe you're right that i could delete more of the stack.yaml. maybe the version in the snapshot would even be the same as the stack.yaml
[06:44:47] <janus> but there is no tooling for me to know, i guess
[06:45:02] <sm> there are tricks, but yes tooling could be better
[06:45:24] <janus> cabal-plan is already magic for me, i am so excited :D
[06:46:00] <sm> I usually try things like stack init --resolver lts-X.Y --dry-run in my project for several recent ghc versions. 
[06:46:31] <sm> better integration between cabal plan and stack snapshots would be nice
[06:48:03] <janus> it definitely wasn't intuitive... i mean, i had to 1. write a cabal.project 2. realize that cabal gen-bounds doesn't read cabal.project 3. use cabal-plan topo and fiddle with its results
[06:51:25] <janus> sm: do you ever use "stack init --solver" ? it is undocumented
[06:54:42] <sclv> i think they deprecated solver and stopped supporting it
[06:55:14] <janus> ok, so i guess cabal-plan is better nowadays
[06:55:56] <sm> oh is that still there ? I thought it was removed
[06:56:03] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[06:56:23] *** Joins: mbuf (~Shakthi@223.178.74.194)
[06:56:41] <janus> it is mentioned on https://docs.haskellstack.org/en/stable/nonstandard_project_init/
[07:01:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:01:24] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:02:44] *** Quits: td_ (~td@muedsl-82-207-238-027.citykom.de) (Ping timeout: 252 seconds)
[07:04:30] *** Joins: deadmarshal (~deadmarsh@95.38.118.214)
[07:04:41] *** Joins: td_ (~td@94.134.91.180)
[07:04:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:04:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:05:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:05:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:06:12] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:06:12] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:06:12] *** finn_elija is now known as FinnElija
[07:08:59] *** Quits: deadmarshal (~deadmarsh@95.38.118.214) (Ping timeout: 256 seconds)
[07:09:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[07:10:04] <senoraraton> I can't get any of these sample codes for vty to compile... >.<
[07:11:06] <dsal> senoraraton: What are you trying?  What errors are you getting?
[07:12:29] <senoraraton> https://hackage.haskell.org/package/vty-examples-5.5.0/src/  Missing dependencies that I then added to app.cabal but things are deprecated and it fails
[07:12:37] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 265 seconds)
[07:13:34] *** Joins: pavonia (~user@user/siracusa)
[07:13:56] <senoraraton> I cloned the repo, it seems to be working better.
[07:14:13] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 240 seconds)
[07:14:50] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[07:17:24] <sm> janus, you mean the `:TODO: Document --solver` ? it's a documentation bug, it's not in current stack
[07:21:58] *** Joins: genieliu (~genieliu@103.37.140.38)
[07:23:35] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[07:24:18] <senoraraton> https://termbin.com/u6ci
[07:26:10] <EvanR> what's the goto package for doing a 9x9 matrix multiplication
[07:28:30] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Remote host closed the connection)
[07:28:50] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:29:29] <dmj`> hmatrix or linear
[07:29:40] <dsal> senoraraton: It seems pretty clear.  But I can't see the code.
[07:31:16] <sm> senoraraton: at https://hackage.haskell.org/package/vty-examples, look at the Uploaded date: 2016. This means you should avoid this package
[07:31:26] <dsal> Config doesn't have a Default instance, but it has a Monoid instance.
[07:31:58] <sm> I think they are just built in to the main vty package now.
[07:32:18] <dsal> If you use a vty of similar vintage to the code you're trying to compile, it might work.
[07:33:19] <jle`> phaazon: hope it wasn't too disappointing :D
[07:33:30] <dsal> Yeah, the changelog says they removed Default in 5.15. 
[07:34:02] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[07:34:12] <sm> there's a newer vty-examples.cabal in https://github.com/jtdaugherty/vty/tree/master/test . Perhaps that is better
[07:35:54] <EvanR> in linear, the relevant function appears to be (!*!) :: (Functor m, Foldable t, Additive t, Additive n, Num a) => m (t a) -> t (n a) -> m (n a)
[07:36:29] <EvanR> that 9x9 matrix multiplication is an instance of this, and how to convince ghc of it, will be an interesting diversion
[07:37:06] <EvanR> I guess you'd make a V9 type
[07:37:23] <glguy> senoraraton: How about: https://github.com/glguy/set-game
[07:38:02] <jackdk> EvanR: https://hackage.haskell.org/package/linear-1.21.8/docs/Linear-V.html
[07:39:13] *** Quits: emf (~emf@2620:10d:c091:480::1:c2f8) (Ping timeout: 252 seconds)
[07:39:21] *** Joins: emf_ (~emf@2620:10d:c091:480::1:c2f8)
[07:40:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:41:16] <sm> glguy: I tested you / haskell. :) Sorry to say, one of your deps fails to build horribly here on mac with ghc 8.10. Am I Doing Something Wrong ? https://termbin.com/t9c5
[07:41:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[07:42:03] <glguy> That looks like your GHC install is bad
[07:42:15] *** Joins: biberu (~biberu@user/biberu)
[07:42:15] <sm> I just brew installed it today
[07:42:20] <glguy> is that arm mac or old mac?
[07:42:28] <sm> this is an m1 mac
[07:42:48] <glguy> ghcup manages ghc installs, I don't know if homebrew works or not
[07:43:17] <glguy> I'll try on my M1
[07:43:41] <glguy> Err, I guess I'll try later; wife is using it :)
[07:43:54] <sm> (`stack init && stack build` worked though)
[07:44:08] <sm> (cool looking game!)
[07:44:48] <glguy> Have you played the actual Set card game already?
[07:45:28] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[07:45:30] <sm> never, so I don't know what to do here
[07:45:45] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[07:45:56] <glguy> OK, the way this works is you're looking for sets of three cards such that each property of the cards is all the same, or all different
[07:46:10] <glguy> so there are: color, count, shape, fill-pattern
[07:46:28] <glguy> so all three need to be the same of red, green, blue, or one of each
[07:46:36] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[07:47:01] <glguy> same for chevron, oval, triangle; hollow, stripped, hashed; 1, 2, 3
[07:47:13] <sm> cool. I was trying to match 2.. and when I select 3 I should.. (D)eal ?
[07:47:15] <glguy> usually you'd play it in a group and yell out SET! when you see one
[07:47:26] <sm> oh it's automatic
[07:47:48] <sm> I just really like the colours and semigraphics :)
[07:47:50] <dsal> I just built that in a nix-shell
[07:47:58] <dsal> Works fine
[07:48:34] <glguy> If there are *no sets* you can deal out 3 more cards
[07:49:10] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 268 seconds)
[07:49:49] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 240 seconds)
[07:51:01] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 263 seconds)
[07:51:14] <jackdk> glguy: set is a mean nerdsnipe to throw into a >=700 person chan ^^
[07:51:33] <glguy> I shoud make a set game channel bot :3
[07:51:51] <glguy> Just need to figure out a nice compact set of glyphs!
[07:52:11] <sm> that's a really weird cabal build failure with blaze-builder. cabal repl works, stack build with same ghc version works..
[07:52:12] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[07:52:45] <sm> and blaze-builder has zero issues so clearly I'm special
[07:53:27] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:53:39] <EvanR> oh dang did not know about that API thanks jackdk 
[07:55:28] <glguy> 04▲△◭ 03●○◐ 06■□◧
[07:55:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[07:57:14] <jackdk> Set!
[08:04:30] *** Joins: leah2 (~leah@vuxu.org)
[08:07:14] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[08:08:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[08:09:22] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:13:01] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 240 seconds)
[08:17:43] <dibblego> who's up for a game of set
[08:26:33] *** Joins: genieliu (~genieliu@103.37.140.24)
[08:29:51] *** Quits: dhruvasagar (~dhruvasag@49.207.222.205) (Quit: WeeChat 3.3)
[08:33:30] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[08:39:15] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[08:39:37] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[08:39:56] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[08:47:01] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[08:48:30] *** Joins: genieliu_ (~genieliu@103.37.140.24)
[08:48:53] *** Quits: emf_ (~emf@2620:10d:c091:480::1:c2f8) (Ping timeout: 252 seconds)
[08:49:15] *** Joins: slack1256 (~slack1256@191.126.99.210)
[08:49:17] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 256 seconds)
[08:53:17] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[08:54:32] *** Joins: biberu (~biberu@user/biberu)
[08:55:29] <EvanR> whoa whoa... what is set?
[08:55:43] <EvanR> scrolling up
[08:56:03] <int-e> EvanR: https://en.wikipedia.org/wiki/Set_(game)
[08:56:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:56:53] <int-e> (more context won't help :P)
[08:59:54] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Connection closed)
[09:00:32] <int-e> Hmm, it would... I didn't look far enough.
[09:00:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[09:01:12] <int-e> Did glguy's line have colors?
[09:01:22] <EvanR> not for me but this is hexchat
[09:01:32] <dibblego> did for me, and this is hexchat
[09:01:47] <dibblego> https://i.imgur.com/rQLzGP0.png
[09:02:05] <EvanR> oof
[09:02:35] <int-e> (I filter those because it keeps me saner, but this was one instance where they would be appropriate... though maybe not those colors, exactly)
[09:02:36] <EvanR> maybe a version thing
[09:02:57] <int-e> EvanR: xchat had a setting for that, I bet hexchat still has it
[09:04:20] <Axman6> it has colours in the best client too, glirc
[09:04:42] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[09:06:00] <int-e> Axman6: check under [menu] Settings -> Preferences -> [categories] Interface -> Colors -> [tab] Color Stripping -> Messages
[09:06:22] <Axman6> eh? I'm saying I do have colours...
[09:06:44] <int-e> uh, I'm mixing up nicks again, that was for EvanR
[09:06:52] <EvanR> thanks, I totally didn't see that
[09:06:54] <Axman6> :thumbsup:
[09:08:08] *** Quits: genieliu_ (~genieliu@103.37.140.24) (Ping timeout: 265 seconds)
[09:08:55] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:08:57] <int-e> Now let's speculate why https://adventofcode.com/2021/leaderboard/self is temporarily disabled. It displays global ranks, but maybe they're not in the database, making their computation a linear time operation?
[09:10:36] <EvanR> earlier it was 500ing
[09:10:50] <int-e> earlier it worked ;)
[09:10:51] <EvanR> private leaderboards seem to be outdated as well
[09:10:56] <int-e> oh
[09:11:22] <EvanR> ah it updated
[09:11:48] <int-e> those may be a thing that's recomputed every 5 seconds and cached
[09:12:23] <EvanR> if so it's greater than 5 seconds xD
[09:12:41] <EvanR> (but in previous days it seemed responsive, since that's of course first thing I do once "winning" lol)
[09:13:07] <EvanR> (see how far down glguy's leaderboard I fell to)
[09:13:38] <int-e> (I wonder how many requests per second that website gets... hundreds, thousands, or more?)
[09:14:01] <xerox> maybe last year hiccup post sheds some light on that number, I forget
[09:14:40] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:14:51] <int-e> (and of course there'll be a huge spike to handle around 5:00:00 UTC)
[09:15:26] *** Joins: deadmarshal (~deadmarsh@95.38.118.214)
[09:15:41] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[09:18:33] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[09:19:32] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Client Quit)
[09:19:44] <EvanR> aka "ridiculous AM"
[09:21:25] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7f00:7dec:e953:6848:5983) (Ping timeout: 240 seconds)
[09:22:08] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:22:21] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7f00:b931:f565:16a0:6381)
[09:23:07] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[09:25:21] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:26:45] <glguy> I don't know what's going on with the leaderboards, but it's neat to see 32 people are keeping up with it so far
[09:31:03] *** Quits: slack1256 (~slack1256@191.126.99.210) (Ping timeout: 252 seconds)
[09:31:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:31:14] *** Joins: genieliu (~genieliu@103.37.140.38)
[09:32:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[09:33:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:36:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:39:26] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:41:41] *** Quits: deadmarshal (~deadmarsh@95.38.118.214) (Ping timeout: 252 seconds)
[09:41:42] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:44:49] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:45:03] <EvanR> (anonymous user #815608) is threatening to eat your lunch
[09:46:28] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[09:47:50] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[09:48:11] *** Joins: img (~img@user/img)
[09:51:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:51:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:51:12] *** Joins: wroathe (~wroathe@user/wroathe)
[09:55:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:58:37] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7f00:b931:f565:16a0:6381) (Ping timeout: 240 seconds)
[09:59:32] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7f00:d65b:5d2c:2ffb:2456)
[10:00:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:02:32] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[10:03:49] *** Quits: MidAutumnMoon6 (~MidAutumn@user/midautumnmoon) (Ping timeout: 240 seconds)
[10:06:22] *** Joins: deadmarshal (~deadmarsh@95.38.118.214)
[10:06:25] <xerox> what is that trick to do a one-file cabal package that runs as a haskell script and you can also have dependencies?
[10:10:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[10:14:41] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[10:16:00] <sm> https://docs.haskellstack.org/en/stable/GUIDE/#script-interpreter , https://cabal.readthedocs.io/en/3.6/cabal-commands.html?highlight=script#cabal-v2-run
[10:18:43] *** Joins: michalz (~michalz@185.246.204.62)
[10:20:38] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 265 seconds)
[10:21:22] <xerox> sm: appreciate it
[10:27:02] *** Joins: emf (~emf@2620:10d:c091:480::1:1ebc)
[10:28:28] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[10:28:37] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7f00:d65b:5d2c:2ffb:2456) (Ping timeout: 240 seconds)
[10:29:42] *** Joins: xff0x (~xff0x@port-92-193-200-89.dynamic.as20676.net)
[10:33:30] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:34:09] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[10:34:32] <int-e> > unwords $ map (\x -> printf "%.2f" (192-x/14)) [2653,2627,2603,2590,2577,2528,2522,2520,2511,2507] -- average rank so far, top 10
[10:34:33] <lambdabot>  "2.50 4.36 6.07 7.00 7.93 11.43 11.86 12.00 12.64 12.93"
[10:34:50] <int-e> EvanR: ^^ it looks much less close like this
[10:36:47] <EvanR> what is this doctoring of the data lol
[10:37:27] <dmj`> @pl (\x y -> abs (x - y))
[10:37:27] <lambdabot> (abs .) . (-)
[10:37:31] <dmj`> oof
[10:37:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:38:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:38:35] <int-e> EvanR: 191 users, so an average score of 191 would mean average rank 1... 192 - 191 = 1.
[10:38:37] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[10:38:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:39:41] *** Quits: emf (~emf@2620:10d:c091:480::1:1ebc) (Quit: emf)
[10:40:09] *** Joins: emf (~emf@2620:10d:c091:480::1:1ebc)
[10:40:48] <int-e> EvanR: I think it's illuminating, not doctoring :P
[10:41:04] <int-e> dmj`: hah. don't do that then? :-)
[10:41:11] <EvanR> the rank for a particular day makes sense
[10:41:21] <EvanR> not sure what the default is showing though
[10:41:39] <EvanR> average? 
[10:41:57] <int-e> EvanR: the score is [number of users, currently 191] for rank 1, down to 1 for rank [... 191].
[10:42:14] *** Joins: chele (~chele@user/chele)
[10:42:14] <int-e> EvanR: averaging makes sense because those numbers are simply added together
[10:42:16] <EvanR> that's what i mean... the number
[10:42:19] <dsal> dmj`: compute inp cost t = sum (cost . abs . subtract t <$> inp)
[10:43:22] <EvanR> is average of 1 - x the same as 1 - average of x xD
[10:43:39] <int-e> EvanR: yes, averaging commutes with affine maps
[10:43:39] *** Quits: deadmarshal (~deadmarsh@95.38.118.214) (Ping timeout: 252 seconds)
[10:43:47] <dmj`> int-e: searching for a fancy point-free way to write absolute value after subtraction
[10:44:06] <dmj`> :t  zipWith (curry (abs . uncurry subtract))
[10:44:07] <lambdabot> Num c => [c] -> [c] -> [c]
[10:44:46] <EvanR> abs .: subtract ?
[10:44:47] <int-e> dmj`: sections of composition are a code smell :P
[10:45:09] <EvanR> :t (.) . (.)
[10:45:10] <lambdabot> (b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
[10:45:19] <EvanR> :t abs (.) . (.) subtract
[10:45:20] <lambdabot> (Num a1, Num ((b -> a1 -> a1) -> (a2 -> b) -> a2 -> a1 -> a1)) => (b -> a1) -> (a2 -> b) -> a2 -> a1 -> a1
[10:45:25] <EvanR> \o/
[10:45:26] <int-e> anyway, just voicing an opinion here.
[10:45:39] <EvanR> oops no
[10:46:21] <int-e> sum [abs (x - median xs) | x <- xs] -- that was a bit too clever for part 1, given what part 2 did
[10:46:29] <dmj`> int-e: I don't disagree *shrug*, was hoping for something swanky like (compare `on` fst) .. etc.
[10:46:44] <EvanR> the type for (.) . (.) looks like what you're looking for dmj` 
[10:46:48] <EvanR> aka (.:)
[10:47:03] <EvanR> dunno why it turns out crazy
[10:47:44] <dmj`> too much point freeness there
[10:48:13] <int-e> dmj`: I like quipping that you can recognize point-free code by its abundance of dots.
[10:48:23] <EvanR> :t let (.:) = (.).(.) in (abs .: subtract)
[10:48:24] <lambdabot> Num c => c -> c -> c
[10:48:40] <EvanR> > let (.:) = (.).(.) in (abs .: subtract) 4 6
[10:48:42] <lambdabot>  2
[10:48:46] <EvanR> > let (.:) = (.).(.) in (abs .: subtract) 6 4
[10:48:47] <lambdabot>  2
[10:49:04] <EvanR> see also (.::) = (.).(.).(.)
[10:49:08] <int-e> Note how .: has *three* dots ;-)
[10:49:33] * int-e never acquired a taste for .:
[10:50:06] *** Joins: edrx (~Eduardo@2804:56c:d2ee:ea00:6dc:e4b2:d28a:5637)
[10:51:06] <edrx> hi! is there an easy way to make agda-mode prefer to use a single frame split into two windows instead of two frames?
[10:52:41] <Axman6> int-e: looks like you needed my foldl-statistics package
[10:53:08] <int-e> Axman6: I use a more base-d approach though
[10:53:38] <xerox> int-e: how to interpret those average rank values? 12 is 4.8 times .. something .. from 2.5, the first one?
[10:54:51] <int-e> xerox: Hmm, what's that 4.8? 12 is 9.5 ranks below 2.5.
[10:54:51] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[10:55:17] <xerox> ah!! just diff, I did a division
[10:55:21] <xerox> gotcha
[10:55:40] *** Parts: edrx (~Eduardo@2804:56c:d2ee:ea00:6dc:e4b2:d28a:5637) (Killed buffer)
[10:55:50] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[10:56:26] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[10:57:49] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:58:05] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[10:59:32] <int-e> xerox: So for example if A has ranks 4 and 1 for parts 1 and 2, and B has ranks 3 and 21, that would average to 2.5 and 12, an 9.5 is the average of -1 (B is one place above A in part 1) and 20 (B is 20 places below A in part 2).
[11:00:50] <int-e> But the main point of this computation is that we are familiar with the idea that 1 is the best possible rank. So it's more intuitive than taking the actual scores and put them into relation with 14*191 = 2674.
[11:01:21] <int-e> (It's also annoying because the number of users can change)
[11:01:26] <xerox> yeah
[11:01:48] <xerox> it'd be cool to see the rankings in your simpler scale, but only for the people who finished them all
[11:01:54] <xerox> you'd have to take the json and filter it out I guess
[11:03:03] *** Quits: jrm (~jrm@156.34.187.65) (Ping timeout: 265 seconds)
[11:05:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:05:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:06:55] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[11:11:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:11:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:13:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:13:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:14:47] *** Joins: neurocyte0132889 (~neurocyte@94.46.70.70)
[11:14:47] *** Quits: neurocyte0132889 (~neurocyte@94.46.70.70) (Changing host)
[11:14:47] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:15:48] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[11:17:26] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[11:19:04] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:23:28] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 265 seconds)
[11:25:01] *** Joins: simendsjo (~user@84.211.91.241)
[11:25:41] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:25:43] *** Joins: genieliu_ (~genieliu@103.37.140.24)
[11:26:33] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 252 seconds)
[11:26:56] *** Joins: deadmarshal (~deadmarsh@95.38.118.214)
[11:30:36] *** Joins: xsebek (~xsebek@176.74.150.21)
[11:32:07] *** Quits: xsebek (~xsebek@176.74.150.21) (Client Quit)
[11:33:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:34:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:35:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:36:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:37:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:38:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:41:56] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[11:43:32] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:45:24] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:48:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:49:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:50:00] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:50:37] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[11:53:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:53:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:55:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:55:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:57:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:57:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:59:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:59:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:00:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:39] *** Quits: emf (~emf@2620:10d:c091:480::1:1ebc) (Ping timeout: 252 seconds)
[12:03:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:03:54] *** Joins: cfricke (~cfricke@user/cfricke)
[12:04:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:05:42] *** Joins: emf (~emf@2620:10d:c091:480::1:1ebc)
[12:06:07] <dminuoso> Is there some cute trick to have a list of acceptable parameters in optparse-applicative?
[12:08:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:08:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:08:41] <dminuoso> Ideally I'd love being able to say: enumArgument [Choice "foo" Foo, Choice "bar" Bar] (long "thing" <> showDefault <> value (Choice "foo" Foo))
[12:08:44] <mjrosenb> can lsp give me the list of things that I need to implement for a class instance?
[12:09:29] *** Joins: notzmv (~zmv@user/notzmv)
[12:09:30] <dminuoso> mjrosenb: Well GHC would warn you about missing method implementations, so there's that at least.
[12:10:36] <[exa]> dminuoso: the tradition kinda dictates that these should form separate switches/flags/subcommands but yeah having one would be great
[12:14:49] *** Quits: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (Quit: Leaving)
[12:16:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:16:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:18:14] <dminuoso> [exa]: None of these are good alternatives though.
[12:18:38] <dminuoso> [exa]: With switches/flags you cannot model exlusivitiy, and I dont think you can have commands conditional based on the presence of another switch/flag.
[12:18:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[12:20:12] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:21:16] <[exa]> dminuoso: conditional ones work with subparses/subcommands, but that doesn't really solve your problem
[12:22:06] <[exa]> I was solving a similar thing with one gpg-style utility, you can smash various combinations of verify/decrypt/encrypt/sign/ascii/cleartext/detached in there and it would really have helped to have an enumerable monoid or something in there
[12:22:40] <[exa]> otoh honestly I don't see that logic being portable to anywhere else
[12:23:13] <dminuoso> Internally I think all we have to do is add another field to OptPropertiers
[12:24:12] <dminuoso> Or maybe not, gah this lack of documentation is ghastly.
[12:27:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:27:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:29:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:29:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:30:08] *** Quits: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799) (Quit: You have been kicked for being idle)
[12:30:14] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (Quit: You have been kicked for being idle)
[12:31:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:32:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:33:50] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c) (Ping timeout: 252 seconds)
[12:33:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[12:34:52] *** Joins: machinedgod (~machinedg@142.169.78.167)
[12:35:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:35:35] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:da4:9ec6:5ef5:74d6)
[12:35:53] *** Quits: spoofer (~spoofer@64.185.111.205) (Ping timeout: 256 seconds)
[12:36:02] *** Joins: spoofer (~spoofer@64.185.111.205)
[12:37:12] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:38:04] <merijn> dminuoso: I have a bunch
[12:38:30] *** Joins: user0 (~aj@langw.roketelkom.co.ug)
[12:39:10] <merijn> dminuoso: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/OptionParsers.hs#L481-L508
[12:39:50] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[12:42:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:42:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:44:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:44:40] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[12:44:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:47:34] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:37] *** allbery_b is now known as geekosaur
[12:50:53] *** Quits: emf (~emf@2620:10d:c091:480::1:1ebc) (Ping timeout: 252 seconds)
[12:51:31] <dminuoso> merijn: Oh just what I was looking for!
[12:52:05] <dminuoso> Mmm, but this I cannot copy and paste due to the licensing involved.
[12:52:18] *** Joins: user01 (~aj@154.0.137.32)
[12:53:14] <dminuoso> Any chance you can submit these combinators to optparse-applicative?
[12:54:09] <merijn> tbh, I'm not sure they're general enough to really fit in?
[12:55:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:56:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:56:45] *** Quits: user0 (~aj@langw.roketelkom.co.ug) (Ping timeout: 265 seconds)
[12:57:56] <dminuoso> Perhaps, Ill just write it myself then. :)
[12:58:18] <dminuoso> Somewhat relatedly, is there a name for data types that support an isomorphism `T a b ~~~ T b a`?
[13:00:05] <merijn> Not really, afaik?
[13:02:05] <dminuoso> Something like commutatitve bifunctor
[13:03:13] <dminuoso> Guess this is the categorical description. A bifunctor that commutes up to isomorphism
[13:03:15] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e6304137ec8947839cf.dip0.t-ipconnect.de)
[13:04:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:04:58] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[13:05:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:06:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:07:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:08:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:09:02] *** Joins: Guest89 (~Guest89@103.159.184.187)
[13:09:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:09:12] *** Quits: Guest89 (~Guest89@103.159.184.187) (Client Quit)
[13:09:40] <merijn> Weirdly I found today and yesterday's puzzles much easier than day 4-5
[13:09:57] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[13:12:11] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[13:12:45] <int-e> merijn: This may be deliberate... either because 4th and 5th were on the weekend or an attempt to make https://adventofcode.com/2021/stats look more like a christmas tree.
[13:12:56] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:14:26] *** Joins: emf (~emf@2620:10d:c091:480::1:1ebc)
[13:15:08] <merijn> :p
[13:19:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[13:20:31] *** Quits: ubert (~Thunderbi@p200300ecdf0ba286bd3e231ce6977cbe.dip0.t-ipconnect.de) (Quit: ubert)
[13:22:56] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[13:24:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Ping timeout: 252 seconds)
[13:24:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:25:36] *** synthmeat1 is now known as synthmeat
[13:29:23] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[13:29:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:30:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:30:51] *** Quits: emf (~emf@2620:10d:c091:480::1:1ebc) (Ping timeout: 252 seconds)
[13:32:07] *** Joins: desantra (~skykanin@user/skykanin)
[13:32:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:33:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:34:36] *** Joins: jakalx (~jakalx@base.jakalx.net)
[13:37:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:37:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:39:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:42:31] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:45:29] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[13:45:34] *** Quits: genieliu_ (~genieliu@103.37.140.24) (Ping timeout: 265 seconds)
[13:46:57] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[13:48:10] *** Joins: desantra (~skykanin@user/skykanin)
[13:50:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:50:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:50:52] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:59:35] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 265 seconds)
[14:02:33] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:05:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:05:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:07:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:07:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:08:55] *** Joins: xkuru (~xkuru@user/xkuru)
[14:11:06] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[14:13:07] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[14:13:43] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[14:14:29] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[14:16:09] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:16:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:17:37] *** Joins: __monty__ (~toonn@user/toonn)
[14:19:47] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:22:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:22:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:23:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:23:25] *** Joins: jrm (~jrm@156.34.249.199)
[14:24:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:24:43] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 265 seconds)
[14:28:38] *** Joins: teo (~teo@user/teo)
[14:30:19] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:33:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:34:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:34:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[14:35:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:36:37] *** Quits: machinedgod (~machinedg@142.169.78.167) (Ping timeout: 240 seconds)
[14:38:17] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:38:32] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[14:38:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:39:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:41:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:41:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:43:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[14:45:37] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:49:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:49:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:51:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:51:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:52:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:52:34] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:52:52] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[14:52:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:54:08] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[14:54:43] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[14:56:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:56:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:57:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[14:57:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:58:32] *** Joins: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[14:58:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:58:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:59:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:01:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:03:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:03:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:03:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:03:46] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:03:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:04:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:07:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:09:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:09:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:11:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:11:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:12:10] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[15:12:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:12:32] *** Joins: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae)
[15:15:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:15:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:17:01] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 240 seconds)
[15:19:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:19:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:20:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:20:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:21:26] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[15:22:10] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[15:22:46] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:23:02] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Client Quit)
[15:23:46] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[15:23:49] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:25:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:26:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:28:31] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:29:51] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:31:21] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[15:37:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:37:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:37:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:37:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:38:03] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:38:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:40:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:42:07] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:42:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[15:43:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:43:04] <phaazon> jle`: :D
[15:43:28] <phaazon> today’s AoC was interesting because my text solution for part 2 had an error :)
[15:43:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:43:41] <phaazon> I still validated my output and it worked, so I know something was wrong with the text :D
[15:44:11] <hpc> AoC is just reaching new levels of programming authenticity
[15:48:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:49:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:50:19] <phaazon> https://github.com/phaazon/advent-of-code-2021/blob/master/day07/src/main.rs today was quite boring actually
[15:50:27] <phaazon> I should rewrite it in Haskell for more fun!
[15:52:00] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[15:52:42] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[15:55:06] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 268 seconds)
[15:56:01] *** Joins: yaroot (~yaroot@175.0.30.125.dy.iij4u.or.jp)
[15:57:41] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 256 seconds)
[15:58:18] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:59:24] *** Quits: yaroot (~yaroot@175.0.30.125.dy.iij4u.or.jp) (Remote host closed the connection)
[15:59:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:00:06] *** Joins: yaroot (~yaroot@175.0.30.125.dy.iij4u.or.jp)
[16:00:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:05:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:06:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:06:27] <aplainzetakind> phaazon: I think today's problem is very interesting.
[16:10:10] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[16:10:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:11:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:11:28] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: Textual IRC Client: www.textualapp.com)
[16:11:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:14:01] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[16:14:14] *** Joins: juhp (~juhp@128.106.188.82)
[16:14:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[16:18:25] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[16:20:07] *** Joins: hltk (~hltk@hltk.fi)
[16:20:49] <phaazon> aplainzetakind: for quadratic, it’s not
[16:21:00] <phaazon> for the linear solution, yeah, probably
[16:21:06] <fendor[m]> Shout-out to aeson-combinators, I love this library
[16:21:09] <phaazon> but I haven’t really looked into it
[16:22:02] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[16:22:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:22:15] <aplainzetakind> Yes, to solve it somehow is boring. But I'm hung up on thinking about part 2.
[16:22:39] <hltk> hi guys, i was solving today's advent of code problem with my friend, and we were wondering whether it would be possible to avoid some of the lambdas used in the following code
[16:22:42] <hltk> ja emmä Roopea voita :E
[16:22:48] <hltk> solve dist = foldl1 min $ map (\i -> sum $ map (\x -> dist $ abs $ x-i) l) [0..1000]
[16:23:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:23:48] <aplainzetakind> hltk -> #adventofcode-spoilers
[16:24:37] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[16:25:23] *** Joins: xkuru (~xkuru@user/xkuru)
[16:26:37] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[16:26:38] <aplainzetakind> :t minimum
[16:26:39] <lambdabot> (Foldable t, Ord a) => t a -> a
[16:28:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:28:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:28:57] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[16:31:26] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:31:41] *** Joins: user0 (~aj@129.205.7.82)
[16:32:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[16:32:08] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[16:32:48] *** Quits: user01 (~aj@154.0.137.32) (Ping timeout: 265 seconds)
[16:34:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:35:58] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:37:45] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[16:37:51] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[16:38:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[16:39:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:40:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:45:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:45:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:49:15] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[16:51:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:51:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:52:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:52:46] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[16:55:54] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[16:57:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:57:25] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Ping timeout: 240 seconds)
[16:57:27] *** Joins: user01 (~aj@154.0.137.32)
[16:57:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:58:31] <timCF> Hello! Is there some easy/standard way to unlift type to a value level? For something like `data Role = Maker | Taker` and `newtype Fee (role :: Role) = Fee Rational` I want a function like `roleOf :: a (role :: Role) -> Role`. First idea is just to have a class `RoleOf` and implement it for `Fee 'Maker` and `Fee 'Taker` but it does not look very ergonomic, maybe there is easier or more generic way?
[16:58:54] *** Quits: user0 (~aj@129.205.7.82) (Ping timeout: 265 seconds)
[16:58:55] <dminuoso> timCF: Welcome to `singletons`
[16:59:13] <timCF> :)
[16:59:16] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[16:59:23] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:59:37] <timCF> dminuoso: probably I can't ignore existence of this library anymore)
[17:00:47] <dminuoso> timCF: In singletons you'd just use `fromSing` or `demote`
[17:00:47] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[17:02:02] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:02:24] <tomsmeding> though you can do the same thing by hand
[17:02:50] <dminuoso> Yeah. I mean at the end the ergonomics in singletons comes with a typeclass and an associated tyfam
[17:03:13] <dminuoso> class SingKind k where type Demote k = (r :: Type) | r -> k; fromSing :: Sing (a :: k) -> Demote k; toSing :: Demote k -> SomeSing k
[17:03:23] <dminuoso> You may not even need the `toSing` part
[17:03:24] <tomsmeding> you can use a class as you wrote, or if you want to pass around the evidence manually, "data RoleS a where MakerS :: RoleS 'Maker ; TakerS :: RoleS 'Taker", then pass that around
[17:03:31] <merijn> timCF: RIP your mental health xD
[17:03:33] <tomsmeding> that GADT is a link between type-level and value-level
[17:03:33] *** Joins: Pickchea (~private@user/pickchea)
[17:03:54] <merijn> If I never have to use singletons again, I'll be so happy :p
[17:04:15] *** Joins: mmhat (~mmh@55d4422a.access.ecotel.net)
[17:04:49] <dminuoso> How do I make lambdabot recite remembered quotes?
[17:05:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[17:05:32] <merijn> @quote
[17:05:32] <lambdabot> taktoa says: "OOP is pseudoscience"
[17:05:43] <merijn> optionall with a name and substring
[17:05:45] <merijn> @quote merijn
[17:05:45] <lambdabot> merijn says: I like how C-beginners is "I wanna read a file from disk" and #haskell-beginers is all "Yeah, I don't quite understand higher abstract mathematics" ;)
[17:05:57] <merijn> @quote merijn standard.time
[17:05:57] <lambdabot> merijn says: I run on HST (Hacker Standard Time) which is essentially current time zone -3
[17:06:08] <dminuoso> @quote awpr
[17:06:09] <lambdabot> awpr says: when I write idris, I just write my bugs at the type level instead
[17:06:18] <dminuoso> This came to mind when thinking about singletons.
[17:06:58] <tomsmeding> merijn: is the dot a glob *, or something else?
[17:07:26] <merijn> tomsmeding: no clue
[17:07:35] <merijn> I think it's just a space?
[17:07:38] <merijn> @quote merijn standard time
[17:07:38] <lambdabot> merijn says: I run on HST (Hacker Standard Time) which is essentially current time zone -3
[17:07:53] <timCF> Hmm, I still have no idea are singletons good or bad, before avoided this library because of big readme, kinda learning this feels like investment)
[17:07:57] <merijn> might just be historical reasons that was necessary and no obsolete
[17:08:24] <merijn> timCF: It's not that singletons is bad. It's that "singletons" implies you're trying to do way too much on the type level and *that* is bad
[17:08:51] <merijn> because IMO it's almost never worth it in Haskell
[17:10:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[17:10:17] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[17:10:40] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:11:02] <tomsmeding> @quote merijn wanna.*beg.*abs
[17:11:02] <lambdabot> merijn says: I like how C-beginners is "I wanna read a file from disk" and #haskell-beginers is all "Yeah, I don't quite understand higher abstract mathematics" ;)
[17:11:05] <tomsmeding> it's a regex
[17:11:19] <tomsmeding> https://github.com/lambdabot/lambdabot/blob/master/lambdabot-novelty-plugins/src/Lambdabot/Plugin/Novelty/Quote.hs#L183
[17:11:29] <merijn> I don't recall saying that, tbh. but then it's not the only quote of mine I don't recall :p
[17:12:48] <timCF> merijn: I've heard exactly the same when I was introducing typed-like compile-time computations in Elixir with macros, at some point my co-workers mostly stopped understanding my code :)
[17:13:41] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:14:42] <merijn> timCF: The thing is that doing stuff at the type level in Haskell is often tedious and makes code overly rigid, which means refactoring becomes a pain. Often you can get, like, 80-90% of the benefit with some focus on "make illegal values irrepresentible" and some minimal error checking/reporting
[17:16:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:16:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:18:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:18:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:19:21] <dminuoso> Never forget the maintenance cost and readability cost of fancy tricks.
[17:19:55] *** Joins: AndreasK (sid320732@id-320732.uxbridge.irccloud.com)
[17:20:37] <merijn> You can have a statically enforced invariant at the type level! Or you can just write 1 function that checks preconditions and converts to a safe datatype with type "... -> Either MyError Result"
[17:21:05] <dminuoso> The difficult thing is, this is a gradual road. At first you start with DataKinds and phantom types, and this seems like a brilliant idea. Then you realize, you might want higher kinded data types with tyfams that translate those phantom types into say functors, and gradually you increase complexity without even noticing it.
[17:21:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:21:47] <merijn> And before you know it compilation takes 1 hour and refactoring is near impossible, because it breaks all type level invariants :p
[17:22:00] <dminuoso> timCF: And remember, every additional type-level trick you introduce is going to drastically reduce the quality of compiler errors if you or anyone else either trips a bug, or trips something you didn't think of before.
[17:22:18] <dminuoso> With Haskell, type level programming requires a wizard to understand what error messages mean
[17:22:34] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[17:23:12] <dminuoso> Here's the latest result from `optics`, which is a version of `lens` that tries to hide the type level machinery and expose human readable type errors... using type level machinery:
[17:23:16] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[17:23:33] <dminuoso>     • A_Lens cannot be composed with A_Lens
[17:24:11] <dminuoso> There you have a bug in the type level machinery that tries to hide the other, way more complicated, type level machinery, from the user. What am I to make of this? 
[17:25:15] *** Joins: Kauto (~Kauto@wireless-student-pt10-183-60.lut.ac.uk)
[17:25:27] <merijn> I mean, a lot of these tricks *are* useful. But type level hackery are like spices. A little can go a long way and the trick is learning which you need and when :p
[17:26:04] <dminuoso> Yeah, and its hard to know when you crossed that river.
[17:26:27] <dminuoso> My rule has been to avoid the temptation of type level tricks.
[17:28:13] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[17:29:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:30:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:30:37] *** Quits: Kauto (~Kauto@wireless-student-pt10-183-60.lut.ac.uk) (Quit: Client closed)
[17:32:50] *** Joins: max22- (~maxime@2a01cb08833598007c67d5d567ef7941.ipv6.abo.wanadoo.fr)
[17:34:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:34:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:36:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:36:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:37:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[17:37:45] *** Joins: Super11 (~Super11@wireless-student-pt10-183-60.lut.ac.uk)
[17:38:25] *** Joins: stef204 (~stef204@user/stef204)
[17:40:42] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[17:43:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:43:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:44:30] *** Joins: kronicmage (user91577@neotame.csclub.uwaterloo.ca)
[17:49:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:49:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:53:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:53:12] *** Quits: max22- (~maxime@2a01cb08833598007c67d5d567ef7941.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[17:53:28] *** Joins: max22- (~maxime@2a01cb08833598005e821d007c542121.ipv6.abo.wanadoo.fr)
[17:53:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:54:24] *** Joins: slack1256 (~slack1256@191.125.99.210)
[17:55:33] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[17:57:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:57:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:58:00] <boxscape> % -1 `mod` 3
[17:58:00] <yahb> boxscape: -1
[17:58:33] *** Joins: quickquack (~quickquac@190.18.214.197)
[17:58:34] *** Joins: systemhalted (~systemhal@130.51.137.77)
[17:58:41] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[17:59:03] <boxscape_> % :set -XLexicalNegation
[17:59:03] <yahb> boxscape_: 
[17:59:10] <boxscape_> % -1 mod 3
[17:59:10] <yahb> boxscape_: ; <interactive>:10:1: error:; * Could not deduce (Integral a0); from the context: (Integral a, Num t, Num ((a -> a -> a) -> t -> t1)); bound by the inferred type for `it':; forall {a} {t} {t1}. (Integral a, Num t, Num ((a -> a -> a) -> t -> t1)) => t1; at <interactive>:10:1-8; The type variable `a0' is ambiguous; * In the ambiguity check for the infer
[17:59:15] <boxscape_> % -1 `mod` 3
[17:59:15] <yahb> boxscape_: 2
[17:59:33] <boxscape_> pop quiz: With LexicalNegation, what has higher precedence - record updates or negation?
[18:02:09] *** Quits: systemhalted (~systemhal@130.51.137.77) (Remote host closed the connection)
[18:03:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:05:33] <Super11> hello everyone, haskell beginner here. I'm trying to create a function that would take 2 string and for when they have the same letters they would be replaced with asterixes, for example findReplace "abc" "abcd" = "***" here is my code so far https://paste.tomsmeding.com/tLcdDDLD any help would be great
[18:05:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:06:08] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:06:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:06:08] *** Joins: wroathe (~wroathe@user/wroathe)
[18:07:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:08:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:09:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:10:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:10:11] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[18:10:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[18:10:52] <geekosaur> boxscape_, since LexicalNegation is done in the lexer, I'd expect it to have highest "precedence"
[18:11:47] <geekosaur> (more correctly, precedence doesn't apply: the number is actually lexed as negative instead of a "negate" being inserted into the token stream)
[18:12:47] <boxscape> geekosaur: Nope, -x {a = 100} is parsed as -(x {a = 100}). Which is nice actually, because that means it also makes sense for record creation, i.e. -A {a = 100} is parsed the same way
[18:12:54] <boxscape> wait
[18:13:03] <boxscape> let me make sure I actually had -XLexicalNegation enabled :)
[18:13:15] <boxscape> yes
[18:13:19] <geekosaur> that's not LexicalNegation though, as I understand it
[18:13:24] <geekosaur> it's still a negate token
[18:14:06] <boxscape> oh, so LexicalNegation only affects literals?
[18:14:13] <geekosaur> as I understand it, yes
[18:14:20] <boxscape> I see
[18:14:21] <geekosaur> I may be wrong but that's my impression
[18:15:14] <boxscape> % let x = 1 in -x `mod` 3
[18:15:14] <yahb> boxscape: -1
[18:15:29] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[18:15:46] <boxscape> % :set -XLexicalNegation
[18:15:46] <yahb> boxscape: 
[18:15:57] <boxscape> % let x = 1 in -x `mod` 3
[18:15:57] <yahb> boxscape: -1
[18:16:01] <boxscape> hmm
[18:16:09] <boxscape> I'm getting a different result in ghc 9.2.1
[18:16:39] <geekosaur> mm, I'mtrying to decipher what the manual actually says. "NegativeLiterals is a subset of LexicalNegation such that enabling both is the same as LexicalNegation" (from the 9.2.1 manual)
[18:18:12] <boxscape> it seems to apply to non-literals in 9.2.1, in any case
[18:18:14] <geekosaur> ok, so rereading all of this, negative *literals* are in fact handled the way I said but LexicalNegation changes how negation is lexed. so I guess what I said is still true
[18:18:36] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[18:18:47] <geekosaur> still inbserts a negate token for nonliterals, it just changes the rules for doing so
[18:18:55] <boxscape> I see
[18:19:20] <geekosaur> and negate will still have its usual precedence
[18:19:49] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:20:32] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[18:21:17] <cigsender> et serviceTypeForm :: Form ServiceType
[18:21:17] <cigsender>         serviceTypeForm csrf = do
[18:21:17] <cigsender>             ServiceType{..} <- lift $ getServiceType w
[18:21:17] <cigsender>             tadServiceTypes <-
[18:21:17] <cigsender>                 lift . fmap mkOptionList . keyOptions $ [ Training , LanguageInstruction 
[18:21:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:21:38] <Hecate> cigsender: nice
[18:21:41] <boxscape> yeah, okay, `-4 {a = 12}` is parsed differently from `-A {a = 12}`
[18:22:23] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[18:22:31] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 265 seconds)
[18:23:05] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: Connection reset by peer)
[18:23:21] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[18:24:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[18:24:57] <cigsender> ugh, sorry
[18:27:22] <fizbin> Hey, does anyone know a nicer name for / nicer way to write this function?  {someFunc :: (a -> a -> a) -> Maybe a -> Maybe a -> Maybe a; someFunc _ Nothing x = x; someFunc _ x Nothing = x; someFunc f a b = f <$> a <*> b}
[18:28:13] <merijn> liftA2 f? :p
[18:28:17] <aplainzetakind> f <$> ma <*> mb
[18:28:18] <merijn> :t liftA2
[18:28:19] <lambdabot> Applicative f => (a -> b -> c) -> f a -> f b -> f c
[18:28:29] <fizbin> If 'a' has a Semigroup instance, then 'someFunc (<>)' is just (<>) in 'Maybe a'
[18:28:52] <merijn> oh, wait
[18:29:21] <fizbin> Yeah, that does the wrong thing with Nothing values.
[18:29:38] <merijn> How about: 'someFunc f x y = (f <$> x <*> y) <|> x <|> y'
[18:29:48] <fizbin> It's a bit like 'unionWith' that you find on many container types.
[18:29:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Ping timeout: 268 seconds)
[18:30:19] <merijn> Alternately: 'asum [ f <$> x <*> y, x, y ]'
[18:31:06] <geekosaur> meanwhile Super11 is still waiting for help…
[18:31:19] *** Joins: MoC (~moc@user/moc)
[18:31:36] <fizbin> Hrm. I wonder, is (\f x y -> (f <$> x <*> y) <|> x <|> y) the same as "unionWith" on those map-like containers that define "unionWith"?
[18:31:46] <merijn> geekosaur: If it's not in my scrollback when I switch to my terminal, it doesn't exist :)
[18:32:27] <cigsender> Super11: do they need to be in the same position, same order, or just show up?
[18:32:52] <Super11> Just show up (y)
[18:33:39] <cigsender> have you seen Data.List.elem ?
[18:33:42] <cigsender> :t elem
[18:33:43] <lambdabot> (Foldable t, Eq a) => a -> t a -> Bool
[18:33:54] <cigsender> :t elem @[]
[18:33:55] <lambdabot> error:
[18:33:55] <lambdabot>     Pattern syntax in expression context: elem@[]
[18:33:55] <lambdabot>     Did you mean to enable TypeApplications?
[18:33:56] <Super11> I'm not allowed to use any modules like data.list unfortunately
[18:34:02] <Super11> I did read about it
[18:34:24] <Super11> hence I've tried to make my own function
[18:34:37] <cigsender> how did you define isIn?
[18:34:56] <geekosaur> @index elem
[18:34:56] <lambdabot> Data.Foldable, Data.List, Prelude, GHC.OldList, Data.ByteString.Lazy.Char8, Data.ByteString.Lazy, Data.ByteString.Char8, Data.ByteString
[18:35:03] <geekosaur> it's in the Prelude
[18:35:22] <Super11> isIn :: Char -> String -> Bool as it will be a True or false
[18:35:47] <fizbin> Okay, that's the type of isIn. What's the definition?
[18:37:07] <raehik> % zipWith (\a b -> if a == b then '*' then b) "abc "abcd"
[18:37:07] <yahb> raehik: ; <interactive>:18:37: error: parse error on input `then'
[18:37:14] <raehik> % zipWith (\a b -> if a == b then '*' then b) "abc" "abcd"
[18:37:14] <yahb> raehik: ; <interactive>:19:37: error: parse error on input `then'
[18:37:24] <Super11> Oh, I haven't written it since I didn't think I had to as it would just be within the function. I tried to pattern match it if there was an empty list underneath but it didnt work so sorry if thats made me look a bit silly
[18:37:32] <raehik> % zipWith (\a b -> if a == b then '*' else b) "abc" "abcd"
[18:37:33] <yahb> raehik: "***"
[18:37:52] <raehik> sry for spam. Super11 , is that close to what you asked for before?
[18:38:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:38:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:38:00] *** Joins: wroathe (~wroathe@user/wroathe)
[18:38:01] <fizbin> Super11: Also, you're going to need a base case for your findReplace function; something like "findReplace [] _ = somestuffhere"
[18:38:04] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[18:38:07] <cigsender> raehik, they specifically said order didn't matter
[18:38:30] <raehik> ohh thank you cigsender I had focused on the example
[18:38:42] <cigsender> <3
[18:38:44] <Super11> fizbin yeah I did have one but forgot to copy it
[18:38:59] <Super11> since I just put the function in my paste
[18:39:23] <fizbin> Okay, so if you define "isIn" properly, and have a base case for when the first argument is [], that should work.
[18:40:28] <fizbin> So now, how to define isIn. First, if I were doing this I would spell "isIn" as "elem", since "elem" is a function in the haskell Prelude as basic as "head" or "last".
[18:40:45] <Super11> ok
[18:40:50] <Super11> I'll get to that then so
[18:41:25] <Super11> so elem :: Char -> String -> Bool
[18:42:44] <fizbin> It's more general than that, but yes. (it applies to any list, and in fact to any "Traversable"; lists are just one kind of Traversable)
[18:42:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:43:00] <Super11> since I have elem taking the Char and String within findReplace, how would I go about defining it then? sorry for being a bit confused
[18:43:24] <cigsender> elem thisOne [] = _; elem thisOne (x : xs) = _
[18:43:38] <fizbin> Oh, what I'm saying is that you don't need to define "elem" since it's built-in.
[18:43:44] <Super11> oh right
[18:43:45] <cigsender> pattern matching on lists, a list is either empty or has a head and another list
[18:44:18] <Super11> so if elem is built in, how would i use it within my function?
[18:44:31] <fizbin> But if you *had* to define it, you would start the way cigsender said.
[18:44:38] <Super11> right
[18:45:04] <fizbin> Instead of "if isIn x ys then" you'd say "if elem x ys then"
[18:45:22] <Super11> gotcha
[18:46:08] <Super11> so it seems elem is a quite powerful built in function from reading this
[18:46:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 256 seconds)
[18:47:26] <fizbin> Eh. If you have "a" and a list of "b"s, elem is just doing a simple "a == b" check on every element of the "b"s list.
[18:48:51] <Super11> right, but from when doing other exercises, I've seen it used quite a lot a lot more than other functions. But then again it might be because I've been working with lists quite a lot
[18:49:19] <fizbin> It's useful, but quite possible to build from scratch, at least the version that only covers lists: elem _ [] = False; elem x (y:ys) = (x == y) || elem x ys
[18:51:32] <Super11> (y)  thanks for explaining to me i appreciate it
[18:51:50] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[18:52:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:54:47] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:57:25] *** Quits: stef204 (~stef204@user/stef204) (Ping timeout: 240 seconds)
[18:57:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[18:58:10] <dsal> @src elem
[18:58:10] <lambdabot> elem x = any (== x)
[19:01:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:02:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:05:18] *** Joins: curiousgay_ (~curiousga@77-120-141-90.kha.volia.net)
[19:06:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:07:01] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 240 seconds)
[19:11:20] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e6304137ec8947839cf.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[19:13:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:13:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:13:52] *** Quits: Super11 (~Super11@wireless-student-pt10-183-60.lut.ac.uk) (Quit: Client closed)
[19:17:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:17:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:19:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:19:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:20:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:21:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:22:22] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:23:22] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:26:47] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 256 seconds)
[19:27:07] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[19:27:39] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[19:29:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:29:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:31:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[19:31:42] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[19:33:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:35:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[19:38:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:38:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:40:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:40:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:42:48] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Remote host closed the connection)
[19:45:20] *** Quits: quickquack (~quickquac@190.18.214.197) (Remote host closed the connection)
[19:46:09] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:47:38] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:48:34] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[19:49:09] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[19:51:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:51:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:53:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:53:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:53:49] *** Joins: Guest89 (~Guest89@2601:483:4101:2350::d66d)
[19:55:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:55:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:56:31] <yin> is foldr' more appropriate than foldr in `size = foldr' (const succ) 0` ?
[19:57:58] <merijn> yin: There is no foldr' ?
[19:58:10] <yin> (i know foldl' (flip $ const succ) 0 is better)
[19:58:18] <yin> merijn: there is
[19:58:53] <merijn> oh, heh
[19:59:05] <merijn> When'd that appear >.>
[19:59:36] <maerwald> does that do anything different from foldl'?
[19:59:51] <merijn> well foldl' is mostly useful to avoid thunk build up
[20:00:03] <merijn> but foldr (usually) doesn't really have that issue anyway
[20:00:33] <maerwald> that's why it seems rather redundant?
[20:01:56] <yin> i don't think it's redundant, i'm just trying to make sure i'm understanding the nuance correctly
[20:01:57] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[20:02:30] <merijn> yin: To be fair, even the docs agree with me and maerwald :p
[20:02:39] <merijn> yin: "Right-associative fold of a structure, strict in the accumulator. This is rarely what you want."
[20:02:43] <merijn> Note the final sentence :p
[20:03:11] <merijn> As opposed to foldl and foldl' where foldl is marked as "rarely what you want"
[20:03:36] <yin> the docs should describe how things work, not tell people that "this is rarely want they want"
[20:03:49] <merijn> Hard disagree
[20:03:51] <geekosaur> it did. "strict in the accumulator"
[20:03:52] <yin> yep p
[20:04:06] <maerwald> Prelude stuff is read by beginners too
[20:04:08] <maerwald> guidance is ok
[20:04:15] <merijn> Pointing out that something is almost certainly something you don't want is very useful
[20:04:29] *** Parts: Guest89 (~Guest89@2601:483:4101:2350::d66d) ()
[20:04:33] <merijn> People who know enough to want rarely useful things, also know enough to disregard warnings
[20:04:56] <yin> guidance would be explaining why it's not useful in situation x and why it's more useful in situation y
[20:05:00] <merijn> > foldr' (const f) 0 [a,b,c,d]
[20:05:02] <lambdabot>  error:
[20:05:02] <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M108104109454...
[20:05:02] <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
[20:05:08] <merijn> aww
[20:05:35] <merijn> > foldr' (const f) z [a,b,c,d]
[20:05:37] <lambdabot>  f (f (f (f z)))
[20:06:11] <merijn> beccause for foldr being lazy in the accumulator is *good*, it avoid computing the accumulator at all, unless necessary
[20:06:14] <geekosaur> it works with "(0::Expr)"
[20:06:37] <merijn> For foldl, being lazy is bad, because it *always* has to compute the accumulator and doing so lazily accumulates a whole bunch of useless thunks
[20:06:45] <merijn> > foldl' (const f) z [a,b,c,d]
[20:06:46] <yin> lambdabot is great!
[20:06:47] <lambdabot>  f d
[20:06:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:07:04] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:07:10] *** Joins: zebrag (~chris@user/zebrag)
[20:07:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:07:16] <merijn> Actually, clearer
[20:07:22] <merijn> > foldl f z [a,b,c,d]
[20:07:23] <lambdabot>  f (f (f (f z a) b) c) d
[20:07:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:07:39] <merijn> > foldr f z [a,b,c,d]
[20:07:40] <lambdabot>  f a (f b (f c (f d z)))
[20:08:09] <merijn> Note how, for foldl, the outer call can only return after the whole list is traversed
[20:08:31] <yin> oh i know how foldl and foldr work
[20:08:35] <merijn> And how for foldr the outer call can immediately return, unless 'f' somehow forces the accumulator
[20:09:26] <merijn> yin: foldl' solves the problem of having a massive "f (f (f z a) b) c" thunk (if your list is a million elements, that becomes *big*)
[20:09:43] <merijn> foldr never creates such a build up, so making it strict usually doesn't do anything
[20:10:13] <EvanR> is this whole diatribe relative to List foldlr' stuff
[20:10:26] <EvanR> because some foldables have nice ways to begin at the end so to speak
[20:10:50] <EvanR> unlike list
[20:11:08] <merijn> EvanR: Practically speaking it applies to *most* Foldable people use regularly (list, nonempty, containers, vector)
[20:11:16] <EvanR> vector?
[20:11:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:11:31] <merijn> EvanR: So, there are exceptions (as the docs note), but those are, well, exceptions
[20:11:32] <EvanR> i can imagine foldr' working
[20:11:56] <merijn> EvanR: Vector is Foldable
[20:12:04] <EvanR> that's what I'm talking about
[20:12:19] <EvanR> is there something wrong with foldr' in that case xD
[20:12:30] <merijn> Oh, you mean, foldr' might be efficient for vector too
[20:12:38] <EvanR> s/too//
[20:12:54] <EvanR> or other foldables that have good ways to start at the end, Sequence
[20:12:54] <merijn> EvanR: Vector's foldr' is implemented with foldl', so... :p
[20:13:00] <geekosaur> does this matter enough to be worth using?
[20:13:18] <EvanR> really well that disqualifies my theory
[20:13:36] <merijn> EvanR: Right, but the question was "if foldl' is good, does that mean I should use foldr'?", to which "no" is a decent enough approximation/heuristic
[20:13:48] <merijn> EvanR: It's because of vector's streaming optimisations
[20:14:02] <EvanR> I think the question was should I use foldl' for this answer yes
[20:14:09] <merijn> EvanR: streams are processed left-to-right
[20:14:09] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:31e5:443a:aa23:d51a)
[20:14:29] <geekosaur> [07 16:26:31] <yin> is foldr' more appropriate than foldr in `size = foldr' (const succ) 0` ?
[20:14:34] <geekosaur> the actual question
[20:14:43] <merijn> EvanR: Then you should probably revisit the question ;)
[20:14:52] <EvanR> K I didn't make it past this  is foldr' more appropriate than foldr in `size = foldr' (const succ) 0` ?
[20:14:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[20:14:56] <EvanR> what
[20:15:00] <EvanR> I can't read
[20:15:19] <merijn> EvanR: :D
[20:15:28] <EvanR> I cast summon L6 coffee
[20:16:13] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[20:16:16] <merijn> I guess foldr' would be good for snoc lists? Maybe? It's too much thinking to decide whether that's true
[20:16:43] <EvanR> isn't a snoc list just a list basically
[20:16:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[20:17:12] <geekosaur> yes, it just works from the right instead of the left
[20:17:15] <merijn> EvanR: Yes, but append instead of prepend. But I can't be arsed to think how that should affect recursion order
[20:17:23] <EvanR> ehm left and right...
[20:17:36] <EvanR> the x86 manual is telling me that the grows from top to bottom
[20:17:42] <EvanR> I just nod and agree
[20:17:47] <EvanR> the stack*
[20:17:57] <merijn> yin: Anyway, in summary, except for a handful of niche data structures, it's safe to assume foldr' is worse for most data structures in common use
[20:18:53] <merijn> including, but not limited to, lists, nonempty, all things in vector and containers, etc.
[20:19:40] <maerwald> well, `foldr (const succ) 0 [1..11111111111111111111111]` causes a stack overflow here and `foldr' (const succ) 0 [1..11111111111111111111111]` doesn't (I'm still waiting for it to finish)
[20:20:09] <maerwald> I think it's gonna kill my machine though
[20:20:11] <AndreasK> Let us know when it finishes ;D
[20:20:36] <maerwald> barely managed to kill the process :D
[20:20:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:20:59] <maerwald> so: better use foldr if you value your memory
[20:21:33] <EvanR> foldr doesn't always work though
[20:21:46] <EvanR> only if what you're doing is sufficiently lazy:tm:
[20:22:50] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[20:24:58] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:29:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[20:29:41] *** Quits: slack1256 (~slack1256@191.125.99.210) (Ping timeout: 256 seconds)
[20:30:18] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[20:32:16] <yin> maerwald: that was the answer i was looking for, thanks
[20:32:28] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[20:32:43] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:32:45] <yin> i wonder how these things get optimized
[20:32:48] *** Joins: cheater (~Username@user/cheater)
[20:32:53] <maerwald> I used ghci
[20:32:57] <maerwald> so probably no optimization
[20:33:04] <EvanR> ok the foldable laws on hackage are kind of illuminating
[20:33:36] *** Joins: gensyst (gensyst@user/gensyst)
[20:34:20] <gensyst> What is your opinion of calling a private function "funcName_" (ending underscore) to make absolutely clear to everybody that it should never be exported?
[20:34:45] <maerwald> gensyst: the convention is rather using Foo.Internal modules
[20:34:51] <maerwald> and expose everything
[20:34:54] <gensyst> Thanks!
[20:34:59] <gensyst> I forgot about that one
[20:35:03] <Rembane> gensyst: Or put it in a where-expression if it's a very local function 
[20:35:05] <dminuoso> gensyst: I use underscore names as module-internal names.
[20:35:17] <maerwald> if your users depend on internal modules, it's their problem... you don't need to follow PVP for those
[20:35:18] <geekosaur> trailing _ already has a meaning, anyway: ignore lack of use
[20:35:59] <dminuoso> geekosaur: The GHC codebase sometimes uses trailing underscores to denote module-internal, or sometimes internal-implementation for some wrapper function.
[20:35:59] <maerwald> if you don't expose internal modules, you will make some use cases harder (e.g. semi-fork packages, that re-implement only parts)
[20:36:27] <gensyst> yeah i've ran into unmaintained libraries in the past with useful stuff not exposed, not even in internal modules. PITA.
[20:36:50] <dminuoso> otoh it really forces people onto using interfaces, it creates less breakage on updates.
[20:36:58] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:37:11] <gensyst> prefix underscores don't work for type names :S
[20:37:23] <dminuoso> If you expose internal modules, people will use it. Especially nowadays, when HLS creates a low barrier for importing internal modules.
[20:38:20] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 265 seconds)
[20:38:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:38:43] <EvanR> then let them use it
[20:38:47] <maerwald> streamly even uses the Internal module approach for modules that are not really internal, but "in flux"
[20:39:06] <maerwald> so beta API, so to speak
[20:39:27] <dminuoso> Does streamly otherwise pretend to follow PVP?
[20:39:27] <EvanR> yeah, if everyone understands that aspect it sounds like it works well
[20:39:34] <maerwald> dminuoso: I think so
[20:39:44] <dminuoso> Then that's fairly misleading.
[20:39:53] <gensyst> EvanR exactly, let them me use it at my own risk! imo it's great. i'm responsible then to not upgrade packages suddenly and expect everything to work 100%
[20:40:02] <maerwald> dminuoso: why?
[20:40:04] <dminuoso> You cant commit to PVP with minor bumps but have a brittle/constantly changing API.
[20:40:04] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) ()
[20:40:35] <maerwald> internal API is the only that changes in those cases
[20:40:39] <dminuoso> This is one of those modern misbehaviors you see in software often, where software is not designed with stable APIs in mind. Ship fast and break often is the motto of this century.
[20:40:39] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[20:40:52] <maerwald> it's very clearly separated
[20:41:00] <dminuoso> maerwald: As you pointed out, if its not really internal, its public API.
[20:41:00] <maerwald> the non-internal modules follow PVP
[20:41:13] <dminuoso> Internal means not for public use.
[20:41:24] <dminuoso> Not "here be dragons and PVP does not apply"
[20:41:28] <maerwald> I have no problem with this approach
[20:41:56] <gensyst> nothing breaks if you keep packages the same and don't run "cabal update"!
[20:41:59] <gensyst> ;)
[20:42:15] <dminuoso> gensyst: The entire point of PVP is that `cabal update` should not break your builds.
[20:42:26] <gensyst> true lol
[20:43:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:43:23] *** Joins: famubu (~famubu@user/famubu)
[20:43:33] <dminuoso> Some packages go to extraordinary length to accomplish this. Snoyman has a cute convention of not exporting data constructors, but rather smart constructors and then individual field accessors. This lets him add new fields without causing major PVP bumps.
[20:44:24] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[20:45:42] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) ()
[20:46:05] <c_wraith> the problem is he exports actual record accessors, and GHC knows they're record accessors.  So you can still use record update syntax with them
[20:46:34] <c_wraith> the obviously should be lenses instead. Then the field doesn't even need to exist!
[20:46:40] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[20:46:47] <dminuoso> I dont see this as a problem
[20:46:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:47:20] <c_wraith> You're stuck supporting fields that can't be changed to a better internal representation
[20:47:41] <c_wraith> It only helps with adding fields, not changing ones that could be improved
[20:47:56] <dminuoso> I see your point
[20:48:53] <c_wraith> It's a small point.  But I think worrying about changing the major version when changing an exported constructor is also a small point. :)
[20:49:18] <famubu> Hi. I was trying to make a functor for a simple success/error type. The functor definition executes without error but when I try using fmap on it, ghci throws error. This is what I tried: https://paste.tomsmeding.com/lQhpXcTw
[20:49:24] <famubu> What am I doing wrong here?
[20:49:50] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[20:50:05] <c_wraith> did you reload the file in ghci?
[20:50:33] <c_wraith> alternatively, did you remember to save your changes?  Or did you save to the file that ghci has loaded?
[20:50:39] <EvanR> if I want to break open the internal module of ByteString to do more efficient conversion to storable vector, then I'll take responsibility for compatibility problems dammit
[20:50:40] <c_wraith> those are the most common causes for that
[20:51:15] <c_wraith> ie, your code is fine.  ghci just isn't aware of it, for some reason.  Those three are the most common
[20:51:19] <dminuoso> EvanR: Absolutely. My issue is not with breakage in internal modules, but if streamly exposes API that is *intended* for public usage, but not commits to PVP - then the entire package is not PVP compatible.
[20:51:44] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[20:52:12] <famubu> c_wraith: No I just copy pasted the code.. 😬
[20:52:15] <dminuoso> Seems like a cheap excuse to not be properly PVP compatible. Either get stable APIs out, or ship them via separate packages.
[20:52:32] <EvanR> if none of the api is stable, that's another issue
[20:52:42] <EvanR> or it's unknown which part is stable / unstable
[20:53:05] <dminuoso> Granted, if streamly explicitly names them ".Internal" module, or some such, at least there's some sort of warning.
[20:53:13] <c_wraith> famubu: happens to all of us.  No worries.  :)
[20:53:16] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[20:54:17] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:31e5:443a:aa23:d51a) (Remote host closed the connection)
[20:54:22] <c_wraith> famubu: or wait, did you mean there's no file at all?  In that case - I recommend having a file.  It's just easier to work with.
[20:54:49] <geekosaur> yes, if you simply copy-pasted that into ghci then many things will go wrong
[20:55:17] <geekosaur> ghci does not handle multi-line things like instance definitions at all well
[20:55:48] <dminuoso> Would that explain that issue though?
[20:56:14] <dminuoso> % data Result a = Okay a String | Error
[20:56:14] <yahb> dminuoso: 
[20:56:19] <dminuoso> % instance Functor Result where
[20:56:19] <yahb> dminuoso: ; <interactive>:23:10: warning: [-Wmissing-methods]; * No explicit implementation for; `fmap'; * In the instance declaration for `Functor Result'
[20:56:25] <geekosaur> mm, depends. if -Werror then the empty instance definition would throw an error
[20:56:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:56:54] <dminuoso> Mmm, yeah I guess
[20:58:10] <geekosaur> but -Werror wouldn't be the default
[20:58:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:59:39] *** Quits: kronicmage (user91577@neotame.csclub.uwaterloo.ca) (Ping timeout: 252 seconds)
[21:00:13] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:00:33] <geekosaur> rr, actualy no you wouldn't even get that error. it'd work because fmap would be replaced by a non-Functor one specific to Result
[21:00:45] <geekosaur> so no error about not finding a Functor instance
[21:01:43] *** Joins: kronicmage (user55138@neotame.csclub.uwaterloo.ca)
[21:03:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:03:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:04:03] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:04:20] *** Joins: nfd (~nfd@user/nfd)
[21:04:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:05:42] <famubu> c_wraith: Yeah I didn't load from a file. I mean, I had a file but instead of loading with `:l` I just pasted the code into the interpreter.. 😅
[21:06:40] <dsal> famubu: Did you put ghci into multi-line mode to receive the paste?
[21:06:40] *** Joins: emf (~emf@2620:10d:c091:480::1:102a)
[21:06:57] <famubu> Yeah multi line mode means `:{` right?
[21:07:05] <dsal> Yeah
[21:07:06] <famubu> That's what I used.
[21:07:22] <dsal> OK.  Then our guesses may have mislead us and we don't actually know what you've done.
[21:08:17] *** Quits: Successus (~Successus@gateway/tor-sasl/successus) (Remote host closed the connection)
[21:08:29] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[21:09:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:10:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:11:36] *** Quits: mbuf (~Shakthi@223.178.74.194) (Quit: Leaving)
[21:12:06] *** Joins: emf_ (~emf@2620:10d:c091:480::1:102a)
[21:12:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:12:10] *** Quits: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae) (Quit: Leaving)
[21:12:53] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[21:13:13] *** Quits: emf (~emf@2620:10d:c091:480::1:102a) (Ping timeout: 252 seconds)
[21:14:28] <famubu> My program works okay. Just had to restart ghci. I think the lines that I ran before was interfering..
[21:14:32] <tom__> Am I right in saying that you should always default to newtyping everything instead of using String or Int?
[21:15:02] <geekosaur> newtyping is often a good idea. I don't know that I would say "always", though
[21:15:09] <famubu> Is it a bad idea to place the type of `fmap` explicitly in a functor definition? 
[21:15:37] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Remote host closed the connection)
[21:15:38] <tom__> What is an example of a time when it would not be a good idea?
[21:15:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:15:49] <geekosaur> it may limit your compatibility with older versions of ghc, but otherwise I'd say it's a good sanity check on what you are doing
[21:16:18] <EvanR> if you newtype an Int that would have usefully interacting with a lot of other Int APIs, now you have carple tunnel syndrome
[21:16:20] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[21:16:26] <EvanR> interacted*
[21:16:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:16:37] <geekosaur> *carpal
[21:16:44] <EvanR> yes
[21:17:10] <tom__> So if you find yourself continually wrapping and unwrapping it
[21:17:11] <EvanR> large amounts of newtype unwrapping can make the code harder to read
[21:17:14] <geekosaur> and yes, newtyping Age would prevent you from adding two Ages together but would be painful in adding an Int to an Age
[21:17:23] <geekosaur> or subtracting Ages to get an Int
[21:17:25] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:17:55] *** Joins: sander (~sander@user/sander)
[21:18:22] <famubu> When I tried `fmap :: (a -> b) -> Result a -> Result b` at https://paste.tomsmeding.com/lQhpXcTw, I got 'Illegal type signature in instance declaration. Use InstanceSigs to allow this.
[21:18:26] <famubu> Found in this post https://stackoverflow.com/questions/34699716/illegal-type-signature-in-instance-declaration
[21:18:43] <EvanR> that's a great error message
[21:18:47] <famubu> that type signature is illegal in instance declarations
[21:19:04] <EvanR> ok maybe not
[21:19:16] <EvanR> makes it sound like there's something wrong with that particular sig
[21:19:37] <EvanR> enable extension InstanceSigs to use it
[21:20:20] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:20:27] <tom__> Thanks for the answers. As usual there is no "always" in software.
[21:20:31] <EvanR> or enable DeriveFunctor
[21:21:03] <oats> I have a newtype wrapper over a Map so I can define my own monoid intance, is there a nice way I can still use lenses on the contained Map?
[21:21:04] *** Joins: econo (uid147250@user/econo)
[21:21:29] <famubu> When writing definitions do people usually use this extension? Just curious :) Writing the type makes it easier to understand.
[21:21:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:22:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:22:18] <geekosaur> right. I think the only reason this wants an extension is that it's not permitted in the (creaky-old) standard
[21:22:48] <EvanR> you can implement the instance as a normal function somewhere else with a type sig and just name it in the instance def itself
[21:22:50] <geekosaur> but as I said earlier, it's generally a good sanity check
[21:23:53] <famubu> Okay. Thanks guys.
[21:23:57] <EvanR> like instance Monoid [a] where mappend = concat
[21:24:01] <dminuoso> famubu: I dont see it often. The primary reason I'd expect to see this, if combined with ScopedTypeVariables and either Proxy pattern or TypeApplications.
[21:24:15] <oats> EvanR, are you responding to me?
[21:24:22] <EvanR> nope
[21:24:26] <dminuoso> That isn't to say its bad, it seems like a very benign and useful extension. 
[21:24:35] <EvanR> oats, what about GeneralizedNewtypeDeriving
[21:24:42] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[21:24:44] <oats> I'm not familiar with it
[21:24:45] * oats looks
[21:25:01] <EvanR> oh lens...
[21:25:06] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[21:25:10] <dminuoso> Its still the correct answer.
[21:25:24] <dminuoso> Use GeneralizedNewtypeDeriving to get both an Ixed and At instance
[21:25:35] <dminuoso> And then you can use `at` through your newtype
[21:25:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:26:08] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:26:10] <oats> hrm, I feel like I could've figured that out if I understood how lens works better
[21:26:26] <oats> are there any good resources for understanding its implementation?
[21:26:29] <dminuoso> oats: What kind of optic are you trying to construct?
[21:26:37] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 240 seconds)
[21:26:41] <awpr> probably also need `type instance Index (MapNewtype k a) = k` and similarly for the value type (I forget what that type family is called)
[21:26:44] <dminuoso> Traversal over a map? Or some lens `at` an value?
[21:26:46] <oats> dminuoso, I'm trying to filter on the values in the map
[21:27:02] *** Joins: nfd (~nfd@user/nfd)
[21:27:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:27:35] <dminuoso> oats: That's even simpler then
[21:27:51] <geekosaur> https://en.wikibooks.org/wiki/Haskell/Lenses_and_functional_references
[21:27:56] <geekosaur> oats ^
[21:27:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:27:59] <dminuoso> oats: What are you using to consume the optic at the end? toListOf?
[21:28:10] <oats> lengthOf
[21:29:21] <dminuoso> oats: Presumably you are using `folded`?
[21:29:21] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[21:29:29] <dminuoso> Or `filtered`?
[21:29:56] <sm> I like that: there's no "always" in software. No "just", either.
[21:30:11] <oats> lengthOf (folded . filtered (> 1))
[21:30:15] <oats> my first attempt
[21:30:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:30:39] <oats> but I'm not sure it'd filter on values, and it's definitely not getting through my newtype :P
[21:30:50] <dminuoso> oats: Yeah, just get a Foldable instance on your newtype (either manually or via GND)
[21:30:52] <dminuoso> That's it.
[21:31:01] <dminuoso> % :t folded
[21:31:02] <yahb> dminuoso: (Indexable Int p, Contravariant f1, Foldable f2, Applicative f1) => p a (f1 a) -> f2 a -> f1 (f2 a)
[21:31:07] <dminuoso> uh
[21:31:38] <dminuoso> So its not very obvious, but that `Foldable f2` is demanded on you.
[21:31:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:31:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:31:52] *** Joins: wroathe (~wroathe@user/wroathe)
[21:31:58] <dminuoso> The optics version is more clear on this: `folded :: Foldable f => Fold (f a) a`
[21:32:36] <dminuoso> % :set -XGeneralizedNewtypeDeriving
[21:32:36] <yahb> dminuoso: 
[21:32:38] <dminuoso> % newtype List a = List { runList :: [a] }
[21:32:38] <yahb> dminuoso: 
[21:32:54] <dminuoso> % newtype List a = List { runList :: [a] } deriving Foldable
[21:32:54] <yahb> dminuoso: 
[21:33:14] <dminuoso> % lengthOf (folded . filtered (>1)) (List [1,2,3,4])
[21:33:14] <yahb> dminuoso: 3
[21:33:32] <oats> ah, I'd need to add a type param to my newtype
[21:33:42] <dminuoso> For Foldable to work, yes.
[21:35:18] <oats> geekosaur, thanks for the reference :)
[21:36:13] *** Joins: cfricke (~cfricke@user/cfricke)
[21:37:14] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[21:37:14] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[21:37:14] *** finn_elija is now known as FinnElija
[21:38:03] *** Joins: MoC (~moc@user/moc)
[21:38:18] *** Quits: curiousgay_ (~curiousga@77-120-141-90.kha.volia.net) (Read error: Connection reset by peer)
[21:38:43] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[21:39:56] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[21:40:08] <awpr> there's always MonoFoldable if you must have a classy name for folding the map under the newtype; otherwise you can just write a traversal like `traverseMyNewtype f (MyNewtype m) = MyNewtype <$> traverse f m`
[21:40:53] <awpr> (I'd expect there's a MonoFoldable version of `folded` somewhere, but perhaps not in `lens` or `mono-traversable` themselves)
[21:42:51] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:43:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:44:24] *** Joins: hololeap (~hololeap@user/hololeap)
[21:46:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:47:04] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[21:51:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[21:51:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[21:53:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:54:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[21:55:17] *** Joins: stef204 (~stef204@user/stef204)
[21:55:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:57:23] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:58:42] *** Quits: Successus (~Successus@gateway/tor-sasl/successus) ()
[21:59:55] <EvanR> so ghc supports many lightweight threads running "efficiently" interleaved. Does it somehow save the registers used by each thread or is everything relevant not in registers at any given suspendable moment
[22:02:17] <monochrom> It saves and reloads registers, yes.
[22:02:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[22:02:40] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[22:02:55] <monochrom> Err, maybe I'm wrong.
[22:03:06] <EvanR> there's a lot of registers xD
[22:03:23] <monochrom> But https://github.com/takenobu-hs/haskell-ghc-illustrated is very likely to have the correct answer.
[22:03:53] <dminuoso> % :t foldring
[22:03:53] <yahb> dminuoso: (Contravariant f, Applicative f) => ((a -> f a -> f a) -> f a -> s -> f a) -> LensLike f s t a b
[22:04:37] <monochrom> There is at least a stack pointer to save and reload.
[22:04:47] <geekosaur> I think it only suspends at a yield point when it's already saved regs and jumped into the runtime?
[22:05:01] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:06:18] *** Joins: hololeap (~hololeap@user/hololeap)
[22:06:26] <EvanR> nice a slideshow
[22:06:28] <monochrom> There is another register for the heap pointer. This one is unproblematic. Threads share the same heap.
[22:07:54] *** Joins: InternetCitizen (~fuzzypixe@ensi-libre-service-019.ensimag.fr)
[22:08:36] <monochrom> Only a few registers are still relevant at suspendable moment.
[22:08:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:10:24] <dminuoso> awpr: It actually works quite trivially, without MonoFoldable
[22:10:29] <monochrom> GHC cleverly hijacks heap allocation points as suspendable moments. This is why very few registers are relevant at those points.
[22:10:31] <dminuoso> % newtype CharMap = CharMap { runCharMap :: IM.IntMap Char }
[22:10:31] <yahb> dminuoso: 
[22:10:39] <dminuoso> % myFoldr :: (Char -> b -> b) -> b -> CharMap -> b; myFoldr f i (CharMap m) = foldr f i m
[22:10:39] <yahb> dminuoso: 
[22:10:46] <dminuoso> % myFolded = foldring myFoldr
[22:10:46] <yahb> dminuoso: 
[22:10:52] <dminuoso> % toListOf (myFolded . to ord) (CharMap (IM.fromList [(1, 'a'), (2, 'c')])) -- ^ oats 
[22:10:52] <yahb> dminuoso: [97,99]
[22:11:17] <dminuoso> awpr: So all you have to do is implement this `myFoldr` for your data type, then you can use `foldring myFoldr` 
[22:11:22] <oats> interesting
[22:11:23] <dminuoso> Or sorry. I meant oats.
[22:11:29] <oats> I ended up deriving Foldable :)
[22:11:59] <awpr> sure, similar idea to wrapping the underlying `traverse`.  I just mentioned `MonoFoldable` because sometimes people just _really want_ to use things from a class and can't bear the thought of a separate name
[22:12:21] <dminuoso> Mono* typeclasses are only useful for people writing code polymorphic over it.
[22:12:45] <awpr> personally I'd probably add the MonoX instances if in a codebase that already had a dependency on it, but definitely not add the dependency just for that
[22:12:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[22:13:26] <awpr> I'd definitely add a named traversal though
[22:13:27] <monochrom> Hrm, I may be wrong again. At an allocation point, any number of registers may be relevant, the whole point of allocation being that there are data in registers waiting to be off-loaded into memory!
[22:14:19] <EvanR> the TSO seems to have no 'register' data, and STG registers seems to be unrelated to threads
[22:15:16] <EvanR> it may just be that registers are not used for what an assembly language programmer would use them for
[22:15:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:16:22] <EvanR> they're for engine purposes and not application purposes
[22:16:28] <EvanR> spitballing
[22:16:47] *** Quits: n3t (n3t@user/n3t) (Read error: Connection reset by peer)
[22:18:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[22:19:52] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[22:21:16] *** Joins: n3t (n3t@s45.mydevil.net)
[22:21:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[22:26:28] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:26:46] *** Parts: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) ()
[22:27:43] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzz…)
[22:28:08] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[22:28:18] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:30:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:31:41] *** Quits: max22- (~maxime@2a01cb08833598005e821d007c542121.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:32:44] <kennyd> -
[22:33:13] <[exa]> much negation.
[22:37:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:38:03] <EvanR> so there is a timer to preempt the runtime but there's no switching threads unless it's in a state that's convenient to suspend
[22:38:40] <EvanR> did see a slide that suggest it's saving "registers" in the TSO
[22:38:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:38:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:38:59] *** Joins: wroathe (~wroathe@user/wroathe)
[22:41:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[22:43:01] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[22:45:07] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:47:36] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[22:48:37] <monochrom> It's very clever. The time's-up handler simply fakes a heap-full condition and let the thread run normally until it tries to allocation. >:)
[22:49:04] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[22:49:21] <EvanR> oh oh
[22:49:23] *** Joins: kmein (~weechat@user/kmein)
[22:49:31] <EvanR> very tricky
[22:50:00] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:50:32] <EvanR> so if the thread is not doing any allocation or I/O for a long time that locks up the entire runtime? or just the capability
[22:50:44] <monochrom> The capability.
[22:52:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:53:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:54:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:57:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:59:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[22:59:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:00:34] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[23:01:37] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:03:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:05:08] <dminuoso> % data Foo = Foo { foo :: Int, bar :: Int }
[23:05:08] <yahb> dminuoso: 
[23:05:17] <dminuoso> % x :: Applicative f => f Foo; x = do foo <- pure 1; let b = 1 in pure Foo{..}
[23:05:17] <yahb> dminuoso: ; <interactive>:63:37: error:; * Could not deduce (Monad f) arising from a do statement; from the context: Applicative f; bound by the type signature for:; x :: forall (f :: * -> *). Applicative f => f Foo; at <interactive>:63:1-27; Possible fix:; add (Monad f) to the context of; the type signature for:; x :: forall (f :: * -> 
[23:05:23] <dminuoso> What is this. I cant even use let-in? :(
[23:05:31] <dminuoso> I mean I can just `<- pure` my way out of this
[23:05:36] <dminuoso> But this is really bizarre
[23:05:39] *** Joins: max22- (~maxime@2a01cb08833598007f53408425037c9d.ipv6.abo.wanadoo.fr)
[23:06:03] <dminuoso> As far as I can tell, this could be some interaction with RecordWildCards
[23:06:13] <dminuoso> % x :: Applicative f => f Int; x = do foo <- pure 1; let b = 1 in pure 10
[23:06:14] <yahb> dminuoso: ; <interactive>:64:37: error:; * Could not deduce (Monad f) arising from a do statement; from the context: Applicative f; bound by the type signature for:; x :: forall (f :: * -> *). Applicative f => f Int; at <interactive>:64:1-27; Possible fix:; add (Monad f) to the context of; the type signature for:; x :: forall (f :: * -> 
[23:06:18] <dminuoso> Mmm, no its not that either
[23:06:22] <geekosaur> or just the ApplicativeDo stuff being dukmb
[23:06:25] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[23:06:30] <geekosaur> I thought it only handled certain patterns
[23:06:54] <dminuoso> Well it can do let-in in principle:
[23:06:56] <dminuoso> % x :: Applicative f => f Foo; x = do let b = 1 in pure Foo{..}
[23:06:56] <yahb> dminuoso: ; <interactive>:66:55: warning: [-Wmissing-fields]; * Fields of `Foo' not initialised: foo, bar; * In the first argument of `pure', namely `Foo {..}'; In the expression: pure Foo {..}; In a stmt of a 'do' block: let b = 1 in pure Foo {..}
[23:07:30] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:07:46] <dminuoso> % x :: Applicative f => f Foo; x = do let foo = 1; bar = 1; in pure Foo{..}
[23:07:46] <yahb> dminuoso: 
[23:08:24] <dminuoso> geekosaur: Perhaps you're right. I mean this seems like it would require more than a mechanical process.
[23:08:46] <janus> what is it that is bizarre? isn't this the motivation for ApplicativeDo?
[23:09:00] <dminuoso> janus: That extension is enabled.
[23:09:23] <janus> ooooh ok
[23:09:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:09:52] <dminuoso> Originally I thought the monad let bindings were bad, but it seems regulat let-in force Monad back in.
[23:10:36] <dminuoso> Maybe this is because in principle let bindings could refer to `a <-` type of variables?
[23:10:48] <dminuoso> That would definitely thwart a mechanical translation
[23:10:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:12:31] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[23:12:34] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:13:04] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[23:14:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:17:19] *** Joins: slack1256 (~slack1256@191.125.99.210)
[23:17:35] <monochrom> "let x = e in return x" is one of the forms that the user guide names as unsupported.
[23:17:49] <janus> :t do let b = 1 in pure b
[23:17:50] <lambdabot> (Applicative f, Num a) => f a
[23:18:35] <monochrom> OTOH, "do ..." that doesn't contain any "<-" is simply undo'ed.
[23:18:37] <janus> :t do a <- pure (); let b = a in pure b
[23:18:38] <lambdabot> Monad m => m ()
[23:18:41] <monochrom> :t do 'a'
[23:18:42] <lambdabot> Char
[23:18:43] *** Joins: cheater (~Username@user/cheater)
[23:19:04] <monochrom> This is known as PurityDo >:)
[23:19:30] <geekosaur> :t do a <- pure (); let {b = a}; pure b
[23:19:31] <lambdabot> Monad m => m ()
[23:20:02] <janus> :t do let {b=()}; pure b
[23:20:04] <lambdabot> Applicative f => f ()
[23:20:18] <janus> so it seems to me that it is not the let forcing it to be monad, it is really the monadic bind?
[23:20:51] <monochrom> :t do {let {b='a'}; b}
[23:20:51] <janus> or rather, monadic bind in combination with a let afterwards?
[23:20:52] <lambdabot> Char
[23:20:53] <geekosaur> :t do a <- pure (); pure b
[23:20:54] <lambdabot> Monad m => m Expr
[23:21:10] <geekosaur> derp
[23:21:12] <monochrom> do {let {b='a'}; b} is still under PurityDo
[23:21:14] <geekosaur> :t do a <- pure (); pure a
[23:21:15] <lambdabot> Monad m => m ()
[23:21:52] <janus> but why isn't the last one applicative if my first one was?
[23:22:14] <janus> does lambdabot not have ApplicativeDo ?
[23:22:35] <janus> % :t do a <- pure (); pure a
[23:22:35] <yahb> janus: Applicative f => f ()
[23:22:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:22:51] <EvanR> PurityDo is a thing?
[23:23:07] <monochrom> Ah lambdabot doesn't have ApplicativeDo
[23:23:09] <janus> oooh ok, so i was confused. i wrote 'let..in' before, so it is PurityDo as monochrom mentions
[23:23:29] <geekosaur> @let {-# Language ApplicativeDo #-}
[23:23:30] <lambdabot>  Defined.
[23:23:31] <monochrom> PurityDo is my made-up name for Haskell2010
[23:23:38] <geekosaur> :t do a <- pure (); pure a
[23:23:39] <lambdabot> Monad m => m ()
[23:23:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:24:27] <janus> % :t do let {b = 1}; pure b
[23:24:27] <yahb> janus: (Applicative f, Num a) => f a
[23:24:53] <janus> dminuoso: here you can see that even if using monadic let, it isn't necessarily Monad. and this is yah
[23:24:56] <janus> b
[23:25:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[23:25:50] <janus> s/monadic let/let in do notation (i.e. without in)/
[23:27:30] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[23:28:01] <janus> let-in shouldn't mess with whether it is Applicative/Monad at all, since that syntax goes every where a pure expression goes, if I understand correctly
[23:28:16] <janus> does that sound correct?
[23:28:31] <geekosaur> unless the stuff that translates ApplicativeDo is dumb about it
[23:28:48] <geekosaur> but "do notation" let just translates directly into let … in do
[23:29:44] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[23:30:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:31:01] <janus> but if "do notation" with ApplicativeDo translated that directly, then how can it change which constraint is inferred? it seems like if i write a manual 'let..in do' it won't change the constraint
[23:31:16] <monochrom> It takes more work to support "let", in particular work to explain the fine prints.
[23:31:26] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[23:31:30] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[23:31:36] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[23:32:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:33:10] <monochrom> For example, "do x <- m; let { y = x }; z <- f y; ... " incurs Monad.  "do x <- m; let { y = x }; z <- n; pure (y,z)" incurs Applicative.
[23:33:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:33:45] <monochrom> It is a bit of a rabbit hole to explain the difference.
[23:33:49] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[23:34:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:35:14] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 265 seconds)
[23:35:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:35:42] <EvanR> wait what
[23:35:47] <janus> % :t :t do x <- pure (); let { y = x }; z <- pure (); pure (y,z)
[23:35:47] <yahb> janus: ; <interactive>:1:1: error: parse error on input `:'
[23:35:52] <janus> % :t do x <- pure (); let { y = x }; z <- pure (); pure (y,z)
[23:35:52] <yahb> janus: Monad f => f ((), ())
[23:36:05] <janus> monochrom: isn't that similar to your second example? it infers monad, not applicative
[23:36:19] <monochrom> But perhaps "let ... in pure E" as the very last clause should be supported and it is easy to check.
[23:36:45] <dsal> I'm slightly confused about how thunks resolve.  If I have a lazy map, can I force it to WHNF?
[23:36:46] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:53] <dsal> er, can I force a value inside of it.
[23:37:03] <monochrom> I was saying, if "let" were to be supported, then someone would have to write an algorithm that could tell the difference, and also write the user guide.
[23:37:10] <geekosaur> there is no lazy Map as such
[23:37:11] <dsal> i.e., I want to ask for a value twice and do the work once.
[23:37:28] <geekosaur> the operations are lazy or strict, the Map itself is the same in either case
[23:37:37] <geekosaur> so you can force values as you wish
[23:38:27] *** Quits: lagash (lagash@lagash.shelltalk.net) (Client Quit)
[23:38:34] <dsal> geekosaur: Yeah, I kind of understand that, just not quite sure how to think about whether I can resolve a value and have it stay in the map.
[23:38:35] <geekosaur> (and iirc is spine-strict regardless)
[23:38:48] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:39:06] <janus> monochrom: ok, so when you said "incur" you mean what the typechecker should ideally infer, not what it actually does?
[23:39:15] <monochrom> Right.
[23:39:56] <dsal> Data.Map.Strict.lookup doesn't seem to care about whether the value itself has been evaluated, so it doesn't seem to happen *there*.
[23:40:41] <geekosaur> right, using the resulting value would force it, why would that remove it from the Map? it should simply be already evaluated at that point
[23:40:54] <monochrom> Yes you can resolve a value and it stays in the map.
[23:41:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:41:19] <dsal> I'm thinking about my local binding as being resolved, but that wouldn't necessarily resolve the value in the map, would it?
[23:41:21] <monochrom> Including the memoization you have in mind.
[23:41:29] <dsal> i.e., if I asked for the same value again, it'd do the work again, right?
[23:41:42] <janus> ok i guess i understand why there was so much contention around ApplicativeDo in the survey. it sounds great but seems to be problematic in practise
[23:41:49] <geekosaur> why wouldn't it? under the hood it gives you a pointer to the value inside the Map
[23:41:56] <geekosaur> purity means this is safe
[23:42:21] <dsal> Sure, I know that it *can* do that, I just don't know what it *will* do or what I should assume will happen.
[23:42:41] <geekosaur> lookup would have to do extra work for that not to happen
[23:43:06] <dsal> It's not obvious to me that `!a = b` would affect b.
[23:43:07] <geekosaur> it would have to specifically copy the value itself, which is not particularly easy
[23:43:55] <monochrom> This is why byorgey says to use Data.Map for dynamic programming.
[23:44:16] <dsal> OK, so it sounds like I actually get the reference that's in the map.  That part wasn't clear to me.  I guess I was thinking I'd have another thunk somehow.
[23:45:16] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[23:45:43] <geekosaur> that again would require it to do more work
[23:46:04] <geekosaur> the obvious implementations of lookup would simply produce the reference in the map
[23:46:45] <dsal> I'm not exactly sure how.  My mental model assumed it would just copy the box that includes either the value or the thunk.
[23:47:32] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:48:33] <monochrom> "It's pointers all the way down."
[23:49:26] <dsal> It's nice that I can assume it'd do the thing that's helpful, I guess.  :)
[23:49:48] <geekosaur> that's kinda the point of haskell being pure
[23:50:04] <monochrom> If you do a "Map.insert k 5 d", a heap object containing 5 is created on the heap, a pointer to that heap object is store in your dictionary.
[23:50:19] <monochrom> If you do a lookup, you get that pointer.
[23:50:44] <dsal> Well that sounds simple.
[23:51:15] <dsal> Every time I think something is complicated, it ends up I'm just dumb and things are more simple than I expected.
[23:51:18] <monochrom> If you use a debugger to change that 5 to 6 behind your back, then do a lookup, you get that pointer but now it points to 6.
[23:51:46] *** Joins: ftzm (~ftzm@085081036237.dynamic.telenor.dk)
[23:52:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[23:52:47] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[23:53:04] *** Joins: kmein (~weechat@user/kmein)
[23:53:15] <monochrom> This is why Haskell is not ready for space travel. Too much cosmic rays that ruin the referential transparency.
[23:53:45] <monochrom> C fare much better because you just have to say "volatile int x". >:)
[23:55:56] *** Quits: kmein (~weechat@user/kmein) (Client Quit)
[23:56:15] *** Joins: kmein (~weechat@user/kmein)
[23:56:56] *** Quits: famubu (~famubu@user/famubu) (Remote host closed the connection)
[23:57:53] <nfd> i think our guidance systems are going to continue to look the same way they've looked since the 80s, until they can't source the parts from all the vendors
[23:58:12] <nfd> like... radiation-hardened pacemakers
[23:58:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[23:58:57] *** Quits: xff0x (~xff0x@port-92-193-200-89.dynamic.as20676.net) (Ping timeout: 252 seconds)
[23:59:12] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:59:19] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
