[00:10:10] *** Quits: rgrinberg (~textual@187.223.78.219) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:13:18] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[00:24:37] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 240 seconds)
[00:24:41] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Read error: Connection reset by peer)
[00:26:34] *** Joins: rgrinberg (~textual@187.223.78.219)
[00:38:11] *** Joins: mro (~mro@p200300d72f210c000420fd33bf3be18d.dip0.t-ipconnect.de)
[00:44:41] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:49:47] *** Quits: rgrinberg (~textual@187.223.78.219) (Read error: Connection reset by peer)
[00:50:26] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[01:00:03] *** Joins: zebrag (~chris@user/zebrag)
[01:02:21] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:18:16] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[01:40:24] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Read error: Connection reset by peer)
[01:41:23] *** Joins: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d)
[01:42:35] *** Quits: mro (~mro@p200300d72f210c000420fd33bf3be18d.dip0.t-ipconnect.de) (Quit: Leaving...)
[02:04:17] *** Quits: rgrinberg (~textual@2806:101e:7:def:543e:6849:cc94:640d) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:22:10] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[02:26:30] *** Quits: bartholin (~bartholin@2a01cb088b00e6008ddaadae85e17ae0.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:28:26] *** Joins: ymherklotz (~ymherklot@139.59.166.119)
[03:07:02] <d_bot> <EduardoRFS> Could OCaml allow the following? It would make working with big GADTs a lot easier
[03:07:03] <d_bot> <EduardoRFS>
[03:07:04] <d_bot> <EduardoRFS> ```ocaml
[03:07:05] <d_bot> <EduardoRFS> type 'a t = 'a constraint 'a = int -> int
[03:07:06] <d_bot> <EduardoRFS> let f (type a) (x: a t) = ()
[03:07:08] <d_bot> <EduardoRFS> ```
[03:10:07] <d_bot> <EduardoRFS> something as this would also help
[03:10:08] <d_bot> <EduardoRFS> ```ocaml
[03:10:10] <d_bot> <EduardoRFS> let f (x: ((int -> int) as y) t) = ()
[03:10:11] <d_bot> <EduardoRFS> ```
[03:24:38] <d_bot> <Et7f3> Where will this be useful ?
[03:26:24] <d_bot> <Et7f3> Why not just `type 'a t = { v: 'a } [@unboxed]` and then: `type f = (int -> int) t` ?
[03:27:16] <d_bot> <Et7f3> And for second part ðŸ¤¨ðŸ¤¨ðŸ¤¨if you know it is int -> int why do you need as ?
[03:27:53] <d_bot> <NULL> I think this is for wider type identification and abstraction purposes
[03:28:25] <d_bot> <EduardoRFS> the idea is to avoid noise
[03:28:32] <d_bot> <NULL> If you want to pass type variable a (or y) to modules or even maybe objects/classes, it can be useful
[03:28:49] <d_bot> <EduardoRFS> I'm doing logical gates with GADTs right now, and it get's very noise, just because I cannot do `x = a -> b -> a`
[03:29:39] <d_bot> <EduardoRFS> thought about using equality witness better, but still very verbose, problem is that on call site it get's annoying `fun (type t) (Eq: (t, int -> int) eq) (x: t): t -> x`
[03:30:58] <d_bot> <EduardoRFS> https://gist.github.com/EduardoRFS/8694a5cf5e737355e4ed76efe873fed9
[03:33:00] <d_bot> <Et7f3> Btw your not_ doesn't need type x i think
[03:33:23] <d_bot> <EduardoRFS> nope it doesn't, but merlin doesn't add a warning, I only clean them when the compiler tells me
[03:45:45] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[03:46:06] *** Joins: ns12 (~ns12@user/ns12)
[03:52:18] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:54:17] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[04:00:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 268 seconds)
[04:01:51] <dh`> growl
[04:02:05] <dh`> I'm fixing up an old library of C bindings and it's full of alloc_string for things that are now Bytes.t
[04:02:12] <dh`> but there's no alloc_bytes in the FFI that I can find
[04:02:15] <dh`> what is one supposed to use?
[04:06:14] <williewillus> dh`: the same thing, apparently. searching in the tree: https://github.com/ocaml/ocaml/blob/cce52acc7c7903e92078e9fe40745e11a1b944f0/runtime/str.c#L72-L79
[04:06:20] <williewillus> that's where Bytes.make leads to
[04:07:25] <dh`> hmm ok thanks
[04:08:24] <williewillus> my guess is that they are represented the same way in the runtime
[04:08:31] <williewillus> the types are just distinguished at the ocaml level
[04:09:44] <dh`> yeah, it makes sense, especially since distinguishing the two has been a multiyear incremental effort
[04:10:23] <dh`> but I sort of expected an alloc_bytes to appear in the ffi anyway even if it's the same under the covers
[04:10:34] <dh`> since Bytes.t happens a lot with external functions
[04:11:02] <dh`> and it's not set up to be at all easily checkable :-/
[04:11:25] <dh`> (so the change should be made when you need to change the signatures of the external bindings)
[04:11:40] <dh`> oh well, this is why C has #define
[04:13:49] <dh`> that reminds me, I have a related question (that is not tonight's project)
[04:14:20] <dh`> what's the recommended interface for storing arbitrary ocaml values in a database (that is, preferably efficiently and in binary)
[04:15:10] <dh`> (a nosql database, so converting to sql types is neither an issue nor the solution)
[04:34:51] *** Joins: unyu (~pyon@user/pyon)
[04:47:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[05:04:51] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi) (Quit: Leaving.)
[05:08:20] <dh`> hmm, guess nobody knows :-p
[05:08:56] <dh`> anyway, I guess the other question is: is it expected that in the long term converting bytes back and forth to string is free?
[05:09:21] <dh`> (so string should be treated like const in C, that is, you can't change this but someone else might)
[05:22:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:39:10] *** Joins: xd1le (~xd1le@user/xd1le)
[06:01:43] <d_bot> <Et7f3> One way would be marshall but when your update OCaml compiler you will have to convert all values (unserialise in other form like json and serialize again). Or just go the binprot/protobuf root
[06:04:58] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[06:08:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:08:46] <d_bot> <leviroth> `Bytes.{to,of}_string` are certainly not free.
[06:10:28] <d_bot> <leviroth> They both involve copying the underlying byte sequence.
[06:12:21] <d_bot> <Anurag> `unsafe_(to/from)_string` could be an option (with due care)
[06:14:54] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Read error: Connection reset by peer)
[06:15:46] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[06:21:07] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:22:18] <dh`> ok, so it _does_ copy each time?
[06:29:01] *** Joins: spip (~bobo@37.170.96.25)
[06:29:11] *** Quits: Guest8168 (~bobo@37.170.96.25) (Ping timeout: 256 seconds)
[06:29:25] *** spip is now known as Guest6828
[06:46:24] <d_bot> <rgrinberg> The unsafe versions do not make copies
[06:55:29] <dh`> hmm, unsafe_blit_string apparently exists but isn't in the documentation
[07:10:19] <dh`> bah
[07:10:29] <dh`> what's the recommended way to match bytes against string literals?
[07:32:46] *** Joins: Colt_ (~Colt@user/colt)
[07:34:39] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:58:09] *** Joins: mbuf (~Shakthi@110.225.250.18)
[08:20:54] <dh`> Error: Error on dynamically loaded library: /usr/pkg/lib/ocaml/site-lib/stublibs/dllgraphics_stubs.so: /usr/pkg/lib/ocaml/site-lib/stublibs/dllgraphics_stubs.so: Undefined PLT symbol "caml_process_pending_signals" (symnum = 9)
[08:21:01] <dh`> anyone know what might be up with that? the goog doesn't
[08:21:49] <dh`> recompiling ocaml-graphics didn't make it go away
[08:22:24] <dh`> (ocaml 4.11.2)
[08:38:16] <dh`> ah, silly mistake, found it
[08:41:35] *** Joins: shawnw (~shawn_w@152.44.212.188)
[08:57:57] *** Quits: vb (~vb@lfbn-idf2-1-1364-212.w92-169.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[08:59:51] *** Joins: vb (~vb@lfbn-idf2-1-1364-212.w92-169.abo.wanadoo.fr)
[09:07:27] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[09:39:55] *** Joins: rgrinberg (~textual@177.246.221.189)
[10:14:41] *** Colt_ is now known as Colt
[10:18:13] *** Quits: Guest6828 (~bobo@37.170.96.25) (Ping timeout: 240 seconds)
[10:18:26] *** Joins: Guest6828 (~bobo@37.164.172.86)
[10:43:52] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[10:46:56] *** Quits: rgrinberg (~textual@177.246.221.189) (Read error: Connection reset by peer)
[10:47:35] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[11:04:42] *** Joins: xiongxin (~Thunderbi@119.123.100.30)
[12:05:59] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 268 seconds)
[12:15:31] *** Quits: slothby (~JoshAshby@irc.isin.space) (Quit: brb ... maybe)
[12:34:31] *** Quits: mbuf (~Shakthi@110.225.250.18) (Quit: Leaving)
[12:45:01] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[12:49:04] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[12:51:22] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[12:59:18] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Read error: Connection reset by peer)
[13:00:23] *** Joins: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785)
[13:07:28] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi)
[13:11:20] *** Quits: Guest6828 (~bobo@37.164.172.86) (Quit: Konversation terminated!)
[13:12:00] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[13:15:09] *** Joins: spip (~bobo@37.164.172.86)
[13:15:16] *** spip is now known as Guest6142
[13:17:44] *** Quits: rgrinberg (~textual@2806:265:5401:9431:79ec:f6fd:d609:785) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:58:08] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[14:22:04] *** Joins: KvL (~KvL@user/KvL)
[14:29:14] *** Joins: bartholin (~bartholin@2a01cb088b00e6008ddaadae85e17ae0.ipv6.abo.wanadoo.fr)
[14:53:19] <d_bot> <octachron> @EduardoRFS allowing constraints on locally abstract type is on the type system (implicit) todo list: it would also also allow to stick with `type a. ... ` for all use cases of `'a. ...` .
[15:30:17] *** Quits: xiongxin (~Thunderbi@119.123.100.30) (Ping timeout: 240 seconds)
[15:30:19] *** Joins: xiongxin1 (~Thunderbi@119.123.100.30)
[15:32:37] *** xiongxin1 is now known as xiongxin
[15:34:15] *** Joins: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de)
[15:35:33] <d_bot> <Et7f3> I think unsafe conversion and pattern match
[15:46:08] *** Quits: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:10:56] <dmbaturin> Is there a specific reason why Camomile doesn't provide UTF8.sub and similar functions?
[16:11:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:20:12] *** Quits: xiongxin (~Thunderbi@119.123.100.30) (Quit: xiongxin)
[17:46:21] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 256 seconds)
[18:02:31] *** Joins: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de)
[18:05:26] *** Quits: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:09:46] *** Joins: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de)
[18:11:49] *** Quits: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:27:45] *** Joins: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de)
[18:29:50] *** Quits: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:30:58] *** Joins: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de)
[18:33:04] *** Quits: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:34:58] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:39:33] <dmbaturin> Also, anyone knows what's the exact issue with Camomile and PPC64?
[18:41:35] *** Joins: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de)
[18:43:39] *** Quits: mro (~mro@p200300d72f2d740051b0ab977f4514cb.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:46:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:46:54] *** Joins: Colt (~Colt@user/colt)
[18:49:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:50:19] *** Joins: Colt (~Colt@user/colt)
[18:56:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:56:30] *** Joins: Colt (~Colt@user/colt)
[19:03:07] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[19:05:06] *** Joins: Colt (~Colt@user/colt)
[19:05:56] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[19:23:40] *** Joins: Everything (~Everythin@37.115.210.35)
[20:06:31] *** Joins: mro (~mro@p548e2a05.dip0.t-ipconnect.de)
[20:07:55] *** Joins: Colt (~Colt@user/colt)
[20:08:45] *** Quits: mro (~mro@p548e2a05.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:13:07] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Ping timeout: 256 seconds)
[21:17:58] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[22:19:13] *** Joins: spip (~bobo@37.165.56.92)
[22:19:33] *** Quits: Guest6142 (~bobo@37.164.172.86) (Ping timeout: 268 seconds)
[22:19:37] *** spip is now known as Guest5422
[22:34:06] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 260 seconds)
[23:12:41] *** Quits: reynir (root@user/reynir) (Ping timeout: 252 seconds)
[23:35:13] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[23:44:47] *** Quits: tizoc (~user@li296-221.members.linode.com) (Quit: Coyote finally caught me)
[23:51:23] *** Joins: tizoc (~user@li296-221.members.linode.com)
