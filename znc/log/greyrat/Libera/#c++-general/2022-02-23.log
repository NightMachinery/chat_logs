[00:00:06] <PJBoy> I can't think of a single problem with std::span
[00:00:45] <LordKalma> cool
[00:01:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:01:22] <PJBoy> { array x{1, 2, 3}; span s(x); cout << TYPE(s); }
[00:01:23] <geordi> lvalue span<int, 3>
[00:01:31] <PJBoy> it even chooses the correct template arguments
[00:01:35] <LordKalma> very nice
[00:01:40] *** Joins: krishnac (~krishnac@c-73-189-104-236.hsd1.ca.comcast.net)
[00:01:57] <LordKalma> oh clangd is screaming clang(-Wc++98-compat) when I use /w5 on msvc
[00:02:15] <LordKalma>  /Wall I mean
[00:02:17] <PJBoy> /w5, did you just invent a new warning level?
[00:02:19] <PJBoy> right haha
[00:02:22] <LordKalma> sorry, /Wall
[00:02:26] <PJBoy> yeah /Wall is crazy
[00:02:33] <PJBoy> and clang's -Weverything is crazy
[00:02:51] *** Quits: krishnac (~krishnac@c-73-189-104-236.hsd1.ca.comcast.net) (Remote host closed the connection)
[00:03:01] <LordKalma> the thing is that clangd deduces /Wall as -Weverything
[00:03:13] <PJBoy> they're analogous, yeah
[00:03:19] <LordKalma> and at least msvc doesn't spit this dumb backwards compat errors
[00:03:20] <LordKalma> like
[00:03:23] <PJBoy> and gcc has nothing
[00:03:37] <LordKalma> std::span<std::complex<float>> input and clang's problem is the >> instead of > >
[00:03:44] <LordKalma> LIKE THAT'S THE COMPAT PROBLEM
[00:03:51] <PJBoy> yeah that's a real issue
[00:04:06] <PJBoy> sometimes you'll want to enable -Wc++98-compat
[00:04:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:04:17] <PJBoy> not often, but sometimes
[00:04:31] <LordKalma> the thing is, if I was using gcc/clang directly, I could add -Wno-c++98-compat
[00:04:39] <LordKalma> but via msvc translation to clangd, probably not
[00:04:58] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:05:04] <PJBoy> yeah, I would never enable /Wall or -Weverything
[00:05:14] <LordKalma> let's go to /W4 again
[00:05:17] <PJBoy> other than perhaps for exposure to warnings I didn't know about
[00:05:27] <LordKalma> yeah. it's good to try once in a while
[00:06:00] <LordKalma>  /W4 is fine
[00:06:08] <PJBoy> yeah I default /W4
[00:07:03] <PJBoy> and I've disabled these specific warnings 4305;4456;4458;4554;4996;5103;5050
[00:08:07] <LordKalma> https://github.com/ruilvo/aether_sdr/blob/master/aether_dsp/include/aether_dsp/fft.hpp
[00:08:14] <LordKalma> beautiful C++ and CMake
[00:08:21] <LordKalma> CMake providing AETHER_DSP_API
[00:08:50] <LordKalma> I prefer the name _API to _EXPORT because the macro changes to import automatically, so it doesn't make sense
[00:10:23] <PJBoy> 4996 is the warning everyone needs to disable
[00:10:37] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[00:10:46] <LordKalma> Your code uses a function, class member, variable, or typedef that's marked deprecated.
[00:10:48] <LordKalma> sounds sensible to me
[00:11:01] <PJBoy> it flags up strncpy and whatnot
[00:11:01] <LordKalma> "To fix a C4996 issue, we usually recommend you change your code."
[00:11:10] <PJBoy> recommending you use non standard strncpy_s
[00:12:34] <LordKalma> https://i.gyazo.com/d705671ceb634946bf0ec068ce510474.png
[00:12:36] <LordKalma> interesting
[00:13:01] <PJBoy> it picks up some other random stuff too like `std::equal(left, left + leftSize, right);` from the example
[00:13:30] <PJBoy> so when it says "deprecated", it really just means "functions MS don't like too much"
[00:13:39] <LordKalma> https://en.cppreference.com/w/c/string/byte/strcpy
[00:13:44] <LordKalma> strcpy_s since C11
[00:13:46] <LordKalma> not in C++?
[00:13:59] <PJBoy> indeed
[00:14:04] <LordKalma> shame
[00:14:09] <LordKalma> memcpy that shit
[00:14:38] <CarloWood> Probably 80% of all exploits use strcpy :P.  It's a good thing they deprecate it when something causes statistically a large percentage of exploits / security issues.
[00:15:02] <PJBoy> it warns on using std::transform with an iterator not wrapped in stdext::make_checked_array_iterator
[00:15:19] <PJBoy> I'm telling you it's the worst warning ever made for any language for any compiler
[00:15:29] <LordKalma> hahaha strong feeling
[00:17:05] <PJBoy> I reckon if you sample 1000 visual studio project files, 100% of the ones with no warnings have 4996 disabled
[00:18:37] <LordKalma> gcc and llvm have span, right?
[00:18:41] <LordKalma> forgot to check that
[00:18:56] <PJBoy> gcc certainly does
[00:19:03] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[00:19:17] <PJBoy> and clang had the original implementation
[00:19:17] <LordKalma> https://en.cppreference.com/w/cpp/compiler_support/20
[00:19:19] <LordKalma> yap they all do
[00:19:20] <PJBoy> so we good
[00:19:31] <LordKalma> since clang 7 of all things
[00:20:50] <PJBoy> oh I did have one nitpick with span actually
[00:20:57] <PJBoy> it has no operator==
[00:21:12] <PJBoy> terrible
[00:21:23] <LordKalma> well, I can agree with that
[00:21:30] <PJBoy> it used to
[00:21:36] <PJBoy> then it got removed by a DR
[00:21:36] <LordKalma> you might want to compare std::begin() thereof
[00:21:46] <LordKalma> because what would even be a std::span operator==?
[00:21:57] <PJBoy> it would act like all other stdlib operator==
[00:22:02] <PJBoy> compare all the elements in order
[00:22:16] <PJBoy> string_view does that, array does that
[00:22:17] <LordKalma> if  you have a span<T,3> versus a span<T,dynamic_size> pointing to the same region, should they compare equal?
[00:22:24] <PJBoy> yeah
[00:22:57] <ville> LordKalma: it's very common operation at least the way i use view like things to just do elemet-wise comparison
[00:22:59] <PJBoy> and if you wanted to demand the types are different, that's simple
[00:23:23] <LordKalma> fair enough
[00:23:32] <LordKalma> ville, so how do you do it then?
[00:23:33] <PJBoy> (whereas casting a static size span to dynamic or vice versa would be horrible)
[00:23:43] <ville> LordKalma: i don't use std::span
[00:23:55] <PJBoy> hehehe
[00:24:04] <PJBoy> can't fault you there
[00:24:48] <ville> it took them sweet time get span in, i've had an interval type for... over a decade?
[00:25:54] <LordKalma> it's amazing. this language brings string_view in before span
[00:25:59] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[00:26:15] <PJBoy> yeah, weird right?
[00:26:24] <PJBoy> span's like the simplest class ever
[00:27:04] <PJBoy> although it did go through 8 revisions I guess
[00:27:35] <ville> think it was at some point in the discussion whether it should do multiple dimensions and whatnot
[00:28:08] <PJBoy> its as_bytes() method uses std::byte, so it does have that pre-condition for existing
[00:28:13] <PJBoy> std::byte being C++17
[00:28:58] <PJBoy> span::as_bytes is a great way to do object representation inspection btw
[00:29:14] <ville> why would that be?
[00:29:22] <PJBoy> well it's well defined for a start
[00:29:40] <PJBoy> and it has a descriptive name
[00:29:53] <PJBoy> `as_bytes` for const access, `as_writable_bytes` for mutable access
[00:30:15] <PJBoy> you don't have to reconcile with launder or memcpy or anything like that
[00:30:32] <ville> it's well-defined because?
[00:30:50] *** Joins: proller (~p@80.240.216.69)
[00:30:52] <PJBoy> because stdlib functions are all well defined
[00:30:58] <ville> they sticked magic on it or they dr-ed something back?
[00:30:59] <xkoncek> span / string_view has one quirk: extending the range is UB
[00:31:15] <xkoncek> using subspan / substring
[00:31:23] <PJBoy> yeah it must have magic
[00:31:29] <PJBoy> pedantically speaking at least
[00:31:43] <xkoncek> why the hell did they decide for std::byte?
[00:31:47] <PJBoy> in practice I'm sure the usual object representation inspection using std::byte* aliasing works
[00:31:48] *** Quits: magla (~gelignite@55d4d6c3.access.ecotel.net) (Quit: Stay safe!)
[00:32:20] <PJBoy> std::byte seems fitting to me
[00:32:22] <ville> doesn't look like well-defined to me: http://www.eelis.net/c++draft/span.objectrep#1
[00:32:25] <xkoncek> C libraries will use char / uchar anyway
[00:32:25] *** Quits: cq-work (~cq-work@user/cq-work) (Remote host closed the connection)
[00:32:34] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:32:40] <ville> well doing the actual inspection wouldn't be anyways
[00:32:56] <PJBoy> hm
[00:33:00] *** Joins: cq-work (~cq-work@user/cq-work)
[00:33:08] <ville> cause there's no damned array object and you can't advance the pointer and...
[00:33:24] <LordKalma> so should I be using this or not? hahah
[00:33:27] <PJBoy> well I'm gonna go out on a limb and say it's well defined anyway
[00:33:37] <LordKalma> famous last words
[00:33:59] <PJBoy> otherwise it would be somewhat atrocious to provide a function whose only purpose is triggering UB
[00:34:07] <ville> PJBoy: yes and there were couple related papers in the mailing as well. it's supposed to be of course, but if you read the rules...
[00:34:24] <PJBoy> you're scaring the children
[00:34:30] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1839r3.pdf
[00:34:40] <LordKalma> yes :( I'm scared
[00:34:47] <PJBoy> oh hey, that got an update
[00:34:48] *** Joins: Flonk8 (~Flonk@vps-zap441517-1.zap-srv.com)
[00:35:19] <PJBoy> that paper when accepted will 100% get DR'd onto C++17
[00:35:27] <ville> LordKalma: oh just use it. the rules are broken
[00:35:58] <PJBoy> that's probably my second favourite proposal
[00:36:21] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Ping timeout: 256 seconds)
[00:37:07] <PJBoy> ah I guess crys abandoned the paper
[00:37:16] <PJBoy> hence the Timur Doumler
[00:37:28] *** Flonk8 is now known as Flonk
[00:37:40] <LordKalma> Timur Doumler? then it's performant haha:p
[00:38:01] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:38:29] <PJBoy> Timur Doumler's partially responsible for the C++20 change to make `struct S { S() = default; };` not an aggregate
[00:38:58] <PJBoy> though in retrospect I can see why they did that
[00:39:15] <PJBoy> they didn't have any other changes to the definition of an aggregate lined up for C++20
[00:39:20] <PJBoy> and they were running out of time
[00:41:55] *** Joins: badone (~badone@209.132.189.152)
[00:42:53] <LordKalma> hahah you want to know something hilarious?
[00:43:36] <LordKalma> there was someone ranting about Qt Quick on the Qt interest mailing list. And I replied adding to the rant, complaining about a 12 year old bug report on QWidgets that annoyed the crap out of me
[00:43:45] <LordKalma> guess what? I received an email.
[00:43:54] <LordKalma> Status: -open- In progress
[00:43:59] <ville> "patches welcome"?
[00:44:06] <LordKalma> nope, In progress!
[00:44:26] <LordKalma> a maintainer self-assigned themselves and changed it to in progress
[00:45:15] <cq-work> What was the bug
[00:45:49] <LordKalma> https://bugreports.qt.io/browse/QTBUG-6864
[00:46:21] <PJBoy> yooo congrats man
[00:46:26] <PJBoy> just goes to show
[00:46:31] <PJBoy> complain as much as you possibly can
[00:46:33] <LordKalma> professional ranter gets shit done
[00:46:43] <LordKalma> +330 -7 is actually quite the patch
[00:46:45] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:46:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:47:39] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:47:55] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:47:59] <LordKalma> I'm even added as a reviewer to the gerrit patch, just noticed
[00:48:17] <PJBoy> ahaha
[00:48:24] <PJBoy> "reviewers welcome"
[00:48:41] <cq-work> That said, 12 years is a long time for nobody to step up and contribute a patch
[00:49:20] <LordKalma> which is itneresting since I have a different email on the mailing list than the one on my qt account
[00:49:24] <LordKalma> but the name is probably unique
[00:52:57] <LordKalma> anyway, kudos do them
[00:53:13] <LordKalma> fixing it, and even rubbing it on my face is a chad move
[00:54:26] *** Joins: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de)
[00:54:29] <ville> the other funny paper in the area of fixing the c++ object model was proposing fixing sizeof finally
[00:54:47] <LordKalma> what's wrong with sizeof?
[00:55:58] <ville> there's slight hole where it doesn't necessarily tell you the "correct" size
[00:56:05] <LordKalma> wuuuuut?
[00:56:07] <LordKalma> in what cases?
[00:56:16] <LordKalma> do you kow the paper number? I don't mind reading it
[00:57:09] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1945r0.pdf
[00:59:26] <LordKalma> very nuanced
[00:59:28] <LordKalma> interesting
[01:01:06] <xkoncek> i still have problem with c++ not supporting any concept of "runtime types layouts" at all
[01:01:37] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:01:58] <LordKalma> the C++ type system is very much tied to compile time
[01:02:01] <ville> xkoncek: one of louise dionne's library do it for you?
[01:02:12] <xkoncek> even something as basic as a constant header + variable array at its end is a gnu extension
[01:02:35] <xkoncek> "there is a lib for that" is not a good answer for me
[01:02:49] <xkoncek> but i don't even know that one
[01:03:41] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Ping timeout: 245 seconds)
[01:03:48] <ville> i am thinking probably not hana but the other one... and i can't remember the name
[01:03:57] <ville> dyno?
[01:04:14] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[01:04:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:04:44] <ville> yeah i guess not that https://github.com/ldionne/dyno
[01:05:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:08:16] <xkoncek> imagine your programs reads a configuration file and wants to build a type
[01:08:35] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[01:09:00] <LordKalma> nholmann::json
[01:09:13] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:10:01] <xkoncek> i don't think even Reflection would solve it™
[01:10:11] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[01:10:16] <LordKalma> runtime reflection would
[01:10:19] <ville> xkoncek: well it could if it was runtime flavoured
[01:11:00] <ville> xkoncek: but if you want your own types and stuff defined at runtime then perhaps you want your own runtime/vm
[01:11:27] <LordKalma> what you want is python
[01:12:09] <kalven> what do you want the code that uses these runtime types to look like?
[01:12:51] <xkoncek> i made the use case up, i don't really need it personally
[01:13:08] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:13:12] <xkoncek> but i was thinking about how JVM does it
[01:13:52] <xkoncek> maybe they don't bother with C++ and just use asm for this kind of structuring, who knows
[01:15:16] <rpav> PJBoy: how does your array example work outside of UB? clang warns
[01:15:48] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:16:09] <ville> if you have a limited case where you could get away with say virtual function dispatch then you could even just build a dso and load that up
[01:16:12] <PJBoy> uh which one?
[01:16:21] <PJBoy> the `calcs` one from ages ago?
[01:16:23] <rpav> yeah
[01:16:31] <rpav> i was distracted by work and math and things
[01:16:48] <PJBoy> well the initialisers in the list are all sequenced in left to right order
[01:16:51] <PJBoy> including side effects
[01:17:00] <rpav> that doesn't explain how it can reference calcs prior to initialization
[01:17:05] <PJBoy> and then I stopped thinking about it
[01:17:16] <PJBoy> <_<
[01:17:19] <rpav> ok, so definitely UB heh
[01:17:48] <PJBoy> I'm not truly convinced either way
[01:17:58] *** Joins: markong (~kvirc@213.146.188.203)
[01:18:08] <PJBoy> but if it didn't initialise the array, then I don't see what else could be true
[01:18:09] <rpav> you should be; you're referencing count[n] before count is initialized
[01:19:15] <rpav> unless `T count = { ... }` initializes element-by-element from the initializer list, which seems dubious
[01:19:34] <PJBoy> I think it might well do
[01:20:48] <rpav> it's unclear how that would even work as a mechanic
[01:21:26] <rpav> like, you're passing {...} values to a function, not each expression individually / sequentially
[01:21:28] <PJBoy> but yeah I can't really back up the claim
[01:21:35] *** Joins: proller (~p@2a02:6b8:b081:26::1:20)
[01:21:45] <PJBoy> it's just that aggregate initialisation feels very direct
[01:22:11] <rpav> like i think it could work by UB because count[n] points to the space the initializer list is in and then it gets basically moved, but i dunno
[01:22:13] <PJBoy> and sequencing guarantees mention side effects of one initialiser occur before the value computation of the next
[01:22:28] <PJBoy> so intuitively it seems like it would be allowed
[01:22:45] <PJBoy> but I mean if clang warns then clang almost certainly knows better than me
[01:23:01] <rpav> but it could _only_ be allowed if count[n] somehow referred to the initializer list
[01:23:18] <rpav> like rvo or something?
[01:23:30] <rpav> like UB + rvo
[01:23:52] <rpav> or alternatively it's not UB, _because_ it's RVO? 🙁
[01:25:04] <rpav> i'm not even sure literal syntax counts or can invoke that kind of thing, but it happens even at -O0 .. dunno, just scraping for ways it's _not_ UB, as it also seems to work on all settings
[01:28:11] *** Joins: hasan (~hasan@86.57.98.130)
[01:28:35] *** hasan is now known as Guest7097
[01:30:18] *** Quits: hasan_ (~hasan@86.57.106.198) (Ping timeout: 260 seconds)
[01:39:29] *** Quits: malloy (~jimery@116.30.220.175) (*.net *.split)
[01:39:53] *** Joins: malloy (~jimery@116.30.220.175)
[01:42:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:00] *** ChanServ sets mode: +v npaperbot
[01:55:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:56:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:01:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:03:37] *** Quits: bobb_ (~bobb_@dslb-092-074-238-082.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:04:18] *** Quits: proller (~p@2a02:6b8:b081:26::1:20) (Ping timeout: 250 seconds)
[02:05:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:09:03] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:11:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:14:26] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[02:18:00] *** Joins: proller (~p@80.240.216.69)
[02:19:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[02:24:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:25:27] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:31:41] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[02:32:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:44:22] *** Quits: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) (Quit: Leaving.)
[02:45:24] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[02:48:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[02:49:00] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:53:04] *** Joins: filename (~kilitary@kilitary.xyz)
[02:58:35] *** Joins: AmR (~AmREiSa@156.199.47.115)
[02:59:43] *** Parts: OnlineCop (~OnlineCop@user/onlinecop) ()
[03:00:05] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[03:02:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:02:14] *** Joins: filename (~kilitary@kilitary.xyz)
[03:05:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:06:46] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:08:33] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Read error: Connection reset by peer)
[03:10:54] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[03:11:23] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[03:14:13] *** Joins: filename (~kilitary@kilitary.xyz)
[03:14:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:15:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:16:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:23:24] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:28:17] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[03:35:15] *** Quits: DSpider (~DSpider@82.79.237.45) (Quit: Leaving)
[03:36:50] *** Joins: mike18_ (~geri@216.200.232.252)
[03:37:08] <mike18_> hi if i used a shared_ptr deallocation of the object is done automatically?
[03:37:22] <Friithian> yup
[03:37:37] <Friithian> that's the magic of smart pointers
[03:37:39] <mike18_> i tested some code - but it seems its not deallocating some objects
[03:37:53] <Friithian> did those objects go out of scope?
[03:38:02] <kalven> give us a testcase
[03:38:07] <Friithian> !testcase
[03:38:08] <nolyc> A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[03:38:13] *** Joins: adeliktas1 (~adeliktas@i5C758C3B.versanet.de)
[03:38:39] <mike18_> i have a unordered_map with foo objects and a foo object has another vector to point to other foo objects
[03:39:19] <leduyquang753> My guess is you are having circular ownership.
[03:39:36] <mike18_> how to deal with that than?
[03:39:58] <leduyquang753> Make one object in the circle no longer has its ownership.
[03:40:09] <leduyquang753> Make use of `std::weak_ptr`.
[03:40:38] *** Quits: adeliktas (~adeliktas@i59F4A44B.versanet.de) (Ping timeout: 272 seconds)
[03:40:39] *** adeliktas1 is now known as adeliktas
[03:41:46] <mike18_> is it std::weak_ptr ?
[03:42:30] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[03:43:21] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[03:49:15] <mike18_> how are circular dependencies handles with std::shared_ptr?
[03:49:52] <Friithian> not very well
[03:50:41] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:51:51] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:54:05] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2587:291:d923:f313) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:56:00] *** Joins: proller (~p@2a02:6b8:b081:11::1:27)
[04:00:26] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[04:02:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:05:27] <mike18_> how can i get the object using weak_ptr ?
[04:05:33] <mike18_> std::shared_pointer has ::get()
[04:05:47] <leduyquang753> `lock` to get an `std::shared_ptr`.
[04:05:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:06:46] <mike18_> oh
[04:07:18] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:09] <mike18_> it works now
[04:09:27] <mike18_> if i see the correct objects deallocated - i make it work in the right way?
[04:10:52] <mike18_> std::vector<std::weak_ptr<Data>> vec; ... void add(std::shared_ptr<Package> &data) { vec.push_back(data); }   ... is there a diff if i pass the shared pointer per reference or without?
[04:11:14] <mike18_> std::vector<std::weak_ptr<Data>> vec; ... void add(std::shared_ptr<Data> &data) { vec.push_back(data); }
[04:13:45] *** Quits: AmR (~AmREiSa@156.199.47.115) (Quit: Konversation terminated!)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:34:30] *** Joins: adeliktas3 (~adeliktas@i59F52843.versanet.de)
[04:37:00] *** Quits: adeliktas (~adeliktas@i5C758C3B.versanet.de) (Ping timeout: 272 seconds)
[04:37:01] *** adeliktas3 is now known as adeliktas
[04:38:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:39:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[04:40:46] *** Joins: zyanjun (~zyanjun@23.94.255.198)
[04:42:54] *** Quits: zyanjun (~zyanjun@23.94.255.198) (Quit: zyanjun)
[04:44:36] *** Joins: zyanjun (~zyanjun@23.94.255.198)
[04:50:41] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[04:50:58] *** Quits: proller (~p@2a02:6b8:b081:11::1:27) (Ping timeout: 260 seconds)
[04:57:28] *** Parts: zyanjun (~zyanjun@23.94.255.198) ()
[04:58:06] <Alipha> mike18_: you should pass by value or by const&. Passing by non-const & implies you're going to change where data points to. In this particular case, I'd do const& because you're converting it into a weak_ptr
[05:01:20] <Alipha> mike18_: you should also consider whether you actually need weak_ptr. Do you actually not know whether or not the pointers in the vector will live longer than the corresponding shared_ptrs? If they won't live longer, then you can use raw pointers instead of weak_ptr. And do you really need shared_ptr and not unique_ptr?
[05:02:04] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[05:03:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:06:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:33:44] <mike18_> Alipha: does that make sense? return std::make_shared<null_ptr> ?
[05:33:58] <mike18_> how to return an null object
[05:36:53] <mike18_> can you return a nullptr instead of a std::shared_ptr<MyClass> ?
[05:38:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:38:26] <Alipha> mike18_: simply `nullptr` should work. Or `std::shared_ptr<MyClass>(nullptr) ` You can't use make_shared
[05:39:02] <mike18_> and than .get() == nullptr ?
[05:39:07] <Alipha> Or `std::shared_ptr<MyClass>()`
[05:39:09] <Alipha> Yes
[05:39:28] <mike18_> thats the diff to std::shared_ptr<MyClass>() ?
[05:40:13] <mike18_> return std::shared_ptr<MyClass>(nullptr);
[05:40:16] <mike18_> that should work?
[05:40:23] <Alipha> Either
[05:40:31] <Alipha> They're the same
[05:41:52] <mike18_> fancy
[05:42:03] <mike18_> code gets much longer with shared ptr
[05:42:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:03] *** ChanServ sets mode: +v npaperbot
[05:50:05] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[06:00:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[06:02:28] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[06:02:59] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:03:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:04:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[06:07:15] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:07:34] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[06:15:24] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:8056:1ade:4b1a:57e6)
[06:20:30] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[06:20:37] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[06:24:18] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:8056:1ade:4b1a:57e6) (Ping timeout: 250 seconds)
[06:33:25] *** Joins: hightower4 (~hightower@141-136-162-159.dsl.iskon.hr)
[06:35:37] *** Quits: hightower2 (~hightower@141-136-176-238.dsl.iskon.hr) (Ping timeout: 240 seconds)
[06:54:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:00:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:00:20] *** Joins: adeliktas9 (~adeliktas@i59f4a288.versanet.de)
[07:02:12] *** Quits: adeliktas (~adeliktas@i59F52843.versanet.de) (Ping timeout: 240 seconds)
[07:02:12] *** adeliktas9 is now known as adeliktas
[07:04:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:07:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:07:29] *** Joins: Azem (~haise01@user/haise01)
[07:09:38] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[07:10:45] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:15:04] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[07:23:20] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:24:47] *** Joins: filename (~kilitary@kilitary.xyz)
[07:31:22] *** Joins: krishnac (~krishnac@c-73-189-104-236.hsd1.ca.comcast.net)
[07:37:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[07:45:02] *** Quits: jsbach (~jsbach@2a01:c22:a87a:4e00:630b:9fc:49af:9fa9) (Ping timeout: 260 seconds)
[07:57:45] *** Joins: jsbach (~jsbach@2a01:c22:35b1:f900:23be:e379:c818:219f)
[08:01:16] *** Quits: krishnac (~krishnac@c-73-189-104-236.hsd1.ca.comcast.net) (Remote host closed the connection)
[08:04:37] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:07:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:12:59] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[08:16:10] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[08:17:31] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:19:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:48:27] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:55:26] *** Quits: mike18_ (~geri@216.200.232.252) (Remote host closed the connection)
[09:01:53] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[09:05:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:09:20] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:10:16] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 260 seconds)
[09:11:15] *** Joins: nshire (~nshire@user/nshire)
[09:12:16] *** Joins: malloy (~jimery@116.30.220.175)
[09:15:45] *** Quits: AssKoala (~asskoala@user/asskoala) (Ping timeout: 252 seconds)
[09:20:32] *** Joins: filename (~kilitary@kilitary.xyz)
[09:27:33] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[09:27:33] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[09:27:33] *** Joins: AssKoala (~asskoala@user/asskoala)
[09:35:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[09:36:09] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (Ping timeout: 268 seconds)
[09:42:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:01] *** ChanServ sets mode: +v npaperbot
[09:48:09] *** Joins: fldme (~fldme@178.49.152.151)
[09:50:26] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[09:57:18] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[10:04:30] *** Quits: Guest7097 (~hasan@86.57.98.130) (Read error: Connection reset by peer)
[10:05:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:06:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:09:05] *** Quits: HeTo (henkka@beer.modeemi.fi) (Ping timeout: 252 seconds)
[10:09:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:16:45] *** gentooclimax is now known as climax
[10:17:44] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[10:24:17] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2549:2ec4:27e7:2488)
[10:24:23] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:25:57] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:43:15] *** Joins: filename (~kilitary@kilitary.xyz)
[10:44:07] *** climax is now known as gentooclimax
[10:51:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:52:10] *** Quits: letto (~letto@188.26.152.131) (Quit: Konversation terminated!)
[10:52:55] *** Joins: letto (~letto@188.26.152.131)
[10:55:09] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 256 seconds)
[10:55:15] *** Quits: fldme (~fldme@178.49.152.151) (Quit: Client closed)
[10:55:46] *** gentooclimax is now known as climax
[11:03:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[11:03:55] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:06:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:08:33] *** Quits: dld (~davidlowr@2601:197:600:1210:c94f:64b7:1eea:84b1) (Ping timeout: 250 seconds)
[11:09:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:12:03] *** Joins: dld (~davidlowr@98.217.187.57)
[11:14:03] *** Joins: paul424 (~tom@ip-5-172-232-164.multi.internet.cyfrowypolsat.pl)
[11:14:39] *** climax is now known as gentooclimax
[11:19:27] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[11:20:57] *** Joins: rajkosto (~rajkosto@178.220.245.51)
[11:22:25] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:27:57] <LordKalma> !rq
[11:27:57] <nolyc> LordKalma: <LiaoTao> We should blame compiler authors instead. Those guys have it way too easy.
[11:28:33] <LordKalma> free functions, or methods that don't store the arguments should just use references/raw pointers
[11:28:50] <LordKalma> if you don't store it, it's not for you to manage lifetime
[11:31:58] <kalven> okay
[11:34:59] *** Joins: bobb_ (~bobb_@dslb-088-066-159-156.088.066.pools.vodafone-ip.de)
[11:45:36] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:3815:c396:4ca9:5cba) (Read error: Connection reset by peer)
[11:46:33] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:91d3:ad70:883:d1c2)
[11:57:44] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[11:58:29] <AliceMeows> How do I get idiotic msvc to error out T's type? so far all I've got was "T is not this" or "T is not that"
[11:58:37] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:01:53] <LordKalma> can we have a full error log to see what you're talking about?
[12:02:02] <AliceMeows> Sure
[12:03:58] <AliceMeows> error C2440: 'initializing': cannot convert from 'const char [5]' to 'P'
[12:04:09] <AliceMeows> Is that enough or do you want the rest of the junk it spews as well?
[12:04:18] <LordKalma> everything, why not?
[12:04:25] <AliceMeows> It ain't short but sure
[12:04:51] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:04:54] <LordKalma> but if that says "P" there, it sounds like a codign error, because it's usually more explicit than that. you sure you didn't write an actual P somewhere by mistake?
[12:05:05] <LordKalma> forgot some auto, some template<typename P> ?
[12:06:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:10:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:12:45] <AliceMeows> Its using P = some_template_here<T, U>;
[12:13:27] <AliceMeows> Intentionally tried to make it error by using P but that didn't help
[12:13:40] <AliceMeows> I*
[12:14:03] <AliceMeows> https://url.privatepastebin.com/ju
[12:14:06] <AliceMeows> Here is the whole error
[12:14:39] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6a7c)
[12:15:56] <LordKalma> what is on header.hpp(753,8) ?
[12:16:22] <LordKalma> "Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast"
[12:16:25] <LordKalma> interesting
[12:16:34] <AliceMeows> P x = "asdf";
[12:16:39] <AliceMeows> Yet it wont print what P is
[12:16:49] <LordKalma> well, why yould it?
[12:16:54] <LordKalma> you defined it as a type with using
[12:17:29] <AliceMeows> I wanted it to error so I'd know why the rest of the code fails to compile due to some type mismatch but I can't get it to print out the type so I'd know how to fix it
[12:18:39] <AliceMeows> I feel like I'm wasting my time on this garbage compiler
[12:20:16] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:20:40] <LordKalma> maybe the compiler is imitating you, leaking the least amount of information possible to possible help :p
[12:20:48] <LordKalma> jk, but it would help to have the code, but oh well
[12:21:16] <xkoncek> PJBoy not online... :(
[12:21:26] <AliceMeows> The code is a mess and not worth posting
[12:21:34] <LordKalma> lazy fuck, it's almost 9AM where he is
[12:21:37] <xkoncek> i wanted to ask about the status of the byte_stream proposal
[12:21:49] <LordKalma> npaperbot, search byte_stream
[12:21:49] <npaperbot> Nothing found for: byte_stream
[12:21:52] <xkoncek> whether it was accepted
[12:22:07] <LordKalma> npaperbot, search byte_io
[12:22:08] <npaperbot> Nothing found for: byte_io
[12:22:10] <xkoncek> P2146
[12:22:13] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:22:20] <LordKalma> [P2146]
[12:22:20] <npaperbot> P2146R2: [LEWGI] Modern std::byte stream IO for C++ <https://wg21.link/p2146r2> (by Amanda Kornoushenko) (2020-07-22) (Related: https://wg21.link/p2146r2/github)
[12:22:46] <TinoDidriksen> The Github link is the relevant one - says "Author declared loss of interest."
[12:22:54] <ville> that paper needs to be rejected for using the word modern
[12:23:10] <LordKalma> yeah, was just reading that
[12:23:37] <xkoncek> "Author declared loss of interest."
[12:24:09] <LordKalma> ville, it needs to be rejected because they used pdflatex without a true/free-type font, ffs
[12:24:25] <LordKalma> I hate LaTeX documents using these fonts that look horrible on pretty much every zoom level
[12:26:29] <xkoncek> i don't see what is bad about that font
[12:26:52] <Haohmaru> what font
[12:26:54] <xkoncek> it looks like the default latex font
[12:27:00] <LordKalma> and it is
[12:27:02] <AliceMeows> It look like ass
[12:27:03] <LordKalma> and looks like shit
[12:27:11] <xkoncek> Haohmaru i guess this one: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2146r2.pdf
[12:27:19] <LordKalma> yes that one
[12:27:36] <Haohmaru> looks like some serif font
[12:27:47] <LordKalma> it has a severe lack of sub-pixel rendering
[12:27:57] <Haohmaru> subpixel rendering is bullsh*t
[12:28:12] <xkoncek> isn't that a problem of the pdf viewer?
[12:28:18] <LordKalma> is it just me and AliceMeows that can see it?
[12:28:26] <Haohmaru> xkoncek that would be bullsh*t as well
[12:28:56] <LordKalma> xkoncek no. I know this because I used to use the "free" fonts on LaTeX and have my documents look like shit until I learned how to do better
[12:29:14] <Haohmaru> i need to write a little page to explain why LCDs are sh*t and how subpixel AA is wrong
[12:29:14] <TinoDidriksen> [p2544] is very interesting. Exceptions don't scale with threads.
[12:29:14] <npaperbot> P2544R0: [EWGI] C++ exceptions are becoming more and more problematic <https://wg21.link/p2544r0> (by Thomas Neumann) (2022-02-12) (Related: https://wg21.link/p2544r0/github)
[12:29:47] * AliceMeows avoid exceptions as much as possible
[12:29:49] <Haohmaru> thread-safe exceptions? ;P~
[12:29:59] <AliceMeows> avoids*
[12:30:15] <xkoncek> exceptions don't work very well with plain threads anyway, they call std::terminate
[12:30:30] <ville> xkoncek: no...?
[12:30:31] <Haohmaru> sprinkle some mutexes there?
[12:30:37] <LordKalma> I don't understand this language. it seems that we should both use and NOT use everything...
[12:30:53] <TinoDidriksen> Not like that - this is a performance issue, where an exception halts the whole process until it's resolved.
[12:30:56] <LordKalma> "use this feature. but we'll make it as shit as possible"
[12:31:00] <Haohmaru> LordKalma use only The Right(tm) things
[12:31:06] <ville> xkoncek: you can use exceptions in a thread just fine. just don't let it escape the thread
[12:31:18] <xkoncek> yes, that
[12:31:27] <LordKalma> Haohmaru did you see here the discussion yesterday about whether to use std::span?
[12:31:28] <AliceMeows> cross threaded exceptions sound like a nightmare
[12:31:34] <LordKalma> it was fine until ville said it wasn't :D
[12:31:35] <ville> the problems of the paper refers to come from the current implementations. they use a global lock on the dispatch tables
[12:31:53] <AliceMeows> Just like python's GIL :D
[12:31:54] <Haohmaru> LordKalma i saw you thinking about using span for the FFT signal buffer, i think
[12:32:03] <LordKalma> yes
[12:32:12] <LordKalma> hahah I used to hate the GIL, but now not so much
[12:32:14] <ville> LordKalma: std::span is fine. it's the rules that re broken
[12:32:22] <Haohmaru> but i didn't read carefully
[12:32:39] <LordKalma> about that paper
[12:32:52] <LordKalma> if you have 10% failure rate on exceptions, are they really _exceptions_?
[12:33:04] <ville> ...and further current implementations are unlikely to change their implementations because it'll be abi break
[12:33:34] <xkoncek> so c++ exceptions are like GIL in python
[12:33:39] <TinoDidriksen> They point out that on high core machines, even 0.1% errors renders it unusable.
[12:34:08] <LordKalma> 29ms on 1 core to 105ms on 128c, 0.1% rate
[12:34:13] <ville> LordKalma: the "exceptions are for exceptional cases" is just bullshit rhetoric that people came up with when the performance issues with them were pointed out 20+ years ago
[12:34:16] <LordKalma> 3x for 128x cores?
[12:34:38] <xkoncek> Haohmaru ville what is the problem with span?
[12:34:45] <LordKalma> ville, yeah, I do realize the problems are there
[12:34:53] <ville> LordKalma: it's just bullshit wordplay to try to keep holding on to a feature and try find justification for using it. "true users of exceptions..."
[12:35:16] <ville> xkoncek: it's the rules of the language as they are right now. not std::span
[12:35:46] <Haohmaru> xkoncek not entirely sure what the std::span was even
[12:36:01] <Haohmaru> is it in C++17?
[12:36:10] <ville> xkoncek: the rules right now won't allow you to use std::span::as_bytes or whatever it's called to go through the object representation
[12:36:37] <ville> it's the same old: "need properly derived pointer, need an array pf bytes for the pointer arithmetic to be correct"
[12:36:40] <Haohmaru> was that like the container-version of string_view?
[12:36:46] <LordKalma> C++20 and yes
[12:36:57] <LordKalma> it's basically a type that carries a pointer and knows it size
[12:37:05] <Haohmaru> kewl
[12:37:05] <LordKalma> *its size
[12:37:31] <Haohmaru> so if it has .at() that would probably check things and have some overhead, but operator[] probably wouldn't
[12:37:34] <Haohmaru> if i have to guess
[12:37:52] <LordKalma> so Herb-ceptions will solve everything?
[12:37:56] <xkoncek> ville i don't understand, how is as_bytes different from reinterpret_cast<std::byte*>?
[12:38:11] <ville> xkoncek: it isn't
[12:38:13] <LordKalma> Almost like reflection™
[12:38:29] <Haohmaru> blurryfection
[12:38:31] <ville> xkoncek: that's the problem. it has the same problem as you doing the cast
[12:38:41] <AliceMeows> Its UB
[12:38:46] <LordKalma> but isn't std::byte part of the blesses classes?
[12:38:51] <xkoncek> the underlying array would have to be declared std::byte[]?
[12:38:52] <ville> http://www.eelis.net/c++draft/span.objectrep#1
[12:39:05] <TinoDidriksen> "C++ standard mandates that unwinding has to be contention free" would be a minimal change to the Standard and just push it to vendors to fix. I'd be fine with that.
[12:39:08] *** Quits: rajkosto (~rajkosto@178.220.245.51) (Read error: Connection reset by peer)
[12:39:14] <ville> LordKalma: it is but again that's not the problem par.t it's the pointer arithmetic rules
[12:39:35] <LordKalma> the sizeof() thing?
[12:39:41] <ville> LordKalma: no
[12:39:59] <ville> LordKalma: for the arithmetic to be defined there has to be an array of those bytes. creating an object does not create an array of those bytes
[12:40:29] <ville> also the cast needs to be defined in a way that allows you to get to the array object in the first place
[12:41:09] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1839r3.pdf that's what this paper is about. fixing those two things: define there is an array. define a way to get at the first element of the array
[12:41:22] <ville> now the arithmetic becomes defined
[12:41:27] <LordKalma> so to_bytes() shouldn't just be reinterpret_cast<std::byte*>(this.begin()) ? isn't that defined?
[12:41:46] <AliceMeows> reinterpret_cast = UB
[12:41:59] <LordKalma> AliceMeows not to blessed types
[12:41:59] <ville> thta cast is fine. it's the pointer arithemtic you will likely do afterwards will be invalid. under current rules
[12:42:06] <LordKalma> ah I see
[12:42:14] <xkoncek> UB*: "the implementation should behave reasonably"
[12:42:14] <LordKalma> that does sound like a grave oversight
[12:42:39] <ville> you can do + 1. and tha's fine. because single byte is define to be "element of array of one" and you can do pointer arithmetic that goes to the "past of array" element. but you can't do + 2
[12:42:40] <LordKalma> so we bless std::byte to be able to be casted from an object, but we can't tranverse its bytes legally?
[12:42:44] <Haohmaru> this is proper #C++ material ;P~
[12:42:53] <ville> LordKalma: yes
[12:43:00] <LordKalma> that's BS hahah
[12:43:31] <xkoncek> i still don't understand the purpose of these lifetime rules, afaik nothing makes use of them
[12:43:35] <Haohmaru> BS = Behavioral Sillyness
[12:43:52] <xkoncek> they would be usable in a managed runtime
[12:44:10] <LordKalma> xkoncek because of the lifetime extension crap?
[12:44:44] <ville> xkoncek: what lifetime rules? your compiler certainly do use them. and have been for as long as they've had optimizers probably
[12:45:01] <LordKalma> okay, the examples on P1839 (5.1) make it very clear
[12:45:30] <xkoncek> object lifetime begins at construction and ends with destruction, it is illegal to access some memory where no object currently lives
[12:45:30] <LordKalma> and make it absolutely clear that this is BS that no compiler is expected to not behave like that already anyway
[12:46:16] <xkoncek> without a managed runtime, there is no way to know whether some object is currently alive at some address
[12:46:31] <ville> xkoncek: you are supposed to know.
[12:46:34] <xkoncek> unless it is trivially on the stack or sth
[12:46:49] <xkoncek> yes, but then the rules are just for me
[12:46:52] <AliceMeows> I'd have to disagree as rust can do it and its not managed
[12:47:12] <ville> xkoncek: i still don't get your point
[12:47:28] <LordKalma> Rust is a bike with those small wheels on the side
[12:47:38] <AliceMeows> For matter of a fact if C++ had templated destructors we could implement borrow checker or so I've heard
[12:47:38] <Haohmaru> training wheels
[12:47:43] <LordKalma> that
[12:48:08] <ville> xkoncek: due to current optimizers and cpu architectures there will be no guarantee your code will do what you expcet it to when you do silly stuff
[12:48:11] <xkoncek> if i allocate memory, fill it with 0s and immediately reinterpret it without constructing said object, it is UB, what for?
[12:48:18] <Haohmaru> if you have rust on your training wheels, that can't be safe
[12:48:40] <LordKalma> xkoncek you said yourself objects start at construction
[12:48:42] <LordKalma> !grab Haohmaru
[12:48:43] <nolyc> LordKalma: The operation succeeded.
[12:48:58] <xkoncek> it is said in the standard
[12:48:58] <LordKalma> reinterpret_cast is _not_ constructing by the language rules
[12:49:18] <ville> xkoncek: it's bit more complicated than that. yes ctor does start the lifetime
[12:49:20] <xkoncek> i am asking what is the reason for this rule?
[12:49:28] <ville> xkoncek: optimizers
[12:49:28] <LordKalma> that's why you have to do the "create array and memcpy" dance
[12:49:45] <xkoncek> in current c++, it seems only usable on objects with local storage
[12:50:01] <xkoncek> or extremely trivial programs without branching paths
[12:50:05] <ville> xkoncek: if you have every pointer can alias every byte of memory you drop lot of optimization opportunities on the floor
[12:50:10] <AliceMeows> LordKalma: try implementing std::any without it
[12:50:13] <Haohmaru> it's not fun when -O0 works fine and -O2 completely explodes
[12:50:26] <LordKalma> AliceMeows without what?
[12:50:50] <AliceMeows> array and memcpy dance as you've stated
[12:51:09] <LordKalma> I just said I know why you have to do it
[12:51:15] <LordKalma> objects must be started with constructors
[12:51:16] <xkoncek> i get that point, array of floats cannot alias array of ints, but array of char can alias everything
[12:51:20] <LordKalma> then you replace the bytes
[12:51:51] <Haohmaru> what if char isn't 8bit ;P~
[12:52:07] <LordKalma> xkoncek, strict aliasing does allow for optimization
[12:52:21] <xkoncek> char is the basic unit in C/C++, no matter its bits
[12:52:42] <Haohmaru> yeah but.. float?
[12:53:04] *** Joins: robod34 (Username@79.113.243.73)
[12:53:32] <ville> xkoncek: yes, so they've specifically picked some types, but unfortunately they broke the pointer arithmetic in c++17
[12:53:56] <LordKalma> if you take like an array of floats, reinterpret_cast it to int, change vector_int[0] = 0, and then access vector_floats[0] what do you expect?
[12:53:58] <LordKalma> it might not be 0
[12:54:00] <Haohmaru> ville what's not legal in C++17?
[12:54:19] <ville> Haohmaru: i explained it above
[12:54:22] <LordKalma> because with strict aliasing your compiler can just assume they don't alias eachotherr and compute vector_floats[0] before vector_int[0] = 0
[12:54:26] <Haohmaru> LordKalma the optimizer might not have seen that ^
[12:54:30] <Haohmaru> right?
[12:54:58] <LordKalma> seen what, sorry?
[12:55:23] <Haohmaru> the reinterpret_cast + write "intervention"
[12:55:33] <LordKalma> unless you use -fno-strict-aliasing the compiler will assume vector_floats and vector_ints definitely do not alias
[12:55:55] <LordKalma> and do the computations in whatever order it optimizes too
[12:56:03] <LordKalma> Haohmaru, yes, that's the argument I'm making
[12:56:10] <xkoncek> so it possbily saves some loads / stores
[12:56:26] <Haohmaru> yeah, that's surfing/riding on the edge of the UB wave
[12:56:43] <Haohmaru> looking all cool until..
[12:56:50] <xkoncek> https://en.wikipedia.org/wiki/Restrict
[12:57:01] <AliceMeows> Its all fun and games until someone dies
[12:57:21] <ville> i've not checked c++20/23 thoroughly but the rules are/were also sort of half-assed when it comes to "what pointers are" in some parts they are claimed to be "integers" and other parts they've magical unobservable-to-the-programmer properties attached to them. i don't think that's fixed either
[12:57:24] <Haohmaru> until the sea is akchually LAVA
[12:57:57] <LordKalma> I read a pretty cool article about strict aliasing just yesterday but I can't find it now, shame
[12:58:29] <Haohmaru> ville and i have the impression that the actual value of "nullptr" is either obscured or 0
[12:58:50] <Haohmaru> or was it left to the implementation
[12:58:58] <LordKalma> https://www.qt.io/blog/2011/06/10/type-punning-and-strict-aliasing
[12:59:00] <LordKalma> ah it was this one
[12:59:10] <LordKalma> "Has three possible outcomes: i == 0, i == 42 or crash (unaligned 4-byte load)."
[12:59:44] <LordKalma> I love the bit where they say
[12:59:51] <LordKalma> "The above will probably work (emphasis on probably), but the results are undefined. That means the compiler is free to do anything, like emailing your boss about this transgression."
[13:00:05] <Haohmaru> !nullptr
[13:00:06] <nolyc> http://en.wikipedia.org/wiki/C%2B%2B11#Null_pointer_constant
[13:00:13] <ville> Haohmaru: that's not quite it. it has to do with can you for example store the value of a pointer to disk, read it back, and access the object. with out nothing having happened to the object it self
[13:00:43] <Haohmaru> hm
[13:00:48] <ville> the "pointers are just numbers" would say you can. the other says you might not.
[13:01:04] <Haohmaru> ville what's intended? it shouldn't be possible? or should it?
[13:01:12] <AliceMeows> ville: so in other words we don't have a clear definition of what pointers really are
[13:01:17] <LordKalma> well, isn't harcoding an address value literally UB?
[13:01:21] <ville> the committee doesn't know the last i checked
[13:01:40] <Haohmaru> my issue is, if it's 0, that's potentially a problem on some (or many) bare-metal platforms where address 0 is legit
[13:01:41] <LordKalma> like int* my_register = reinterpret_cast<int*>(0xABBA); is UB
[13:01:43] <ville> LordKalma: that's not hardcoding. you're creting a pointer to legally created object, serialize the bits, read the bits back, access the object
[13:02:04] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[13:02:04] <LordKalma> ville, you said "store the value of the pointer"
[13:02:09] <ville> yes
[13:02:26] <LordKalma> ah nevermind, I get what you mean, yes
[13:02:27] <ville> i don't see how you interpreted that to mean hardcoding anything.
[13:02:35] <LordKalma> sure sure, nevermind, nevermind
[13:03:42] <xkoncek> i want network-based pointers
[13:03:49] <Haohmaru> ..and you can legitimately have an array at address 0
[13:03:51] *** Joins: filename (~kilitary@kilitary.xyz)
[13:04:04] <LordKalma> Haohmaru, blame C
[13:04:10] <Haohmaru> F*CKING C >:(
[13:04:12] <AliceMeows> Maybe pointers should just be abolished
[13:04:21] <LordKalma> and somehow people masturbate to C for embeded
[13:04:29] <Haohmaru> F*CK THEM
[13:04:41] * Haohmaru intensifies
[13:04:48] <AliceMeows> Don't stick your d!ck in crazy!
[13:05:06] <Haohmaru> i'll use a cactus
[13:05:12] <LordKalma> ouch
[13:05:17] <Haohmaru> >:)
[13:07:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:10:29] <Haohmaru> where's PJBoy with his crazy one-liners ;P~
[13:10:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:10:51] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2188r1.html is a paper that raises some issues of what exactly are pointers supposed to be. haven't followed if they ended up answering all of them
[13:12:04] <AliceMeows> Haohmaru: if you want to blame anything then blame C++ for being derived from C
[13:12:31] <Haohmaru> no, i can't badmouth C++, i'm a fanboi
[13:14:12] <Haohmaru> i don't want to blame anything, i want the C++ brewers to give bare-metal platforms some love
[13:14:36] <LordKalma> embeded will always be vendored c++ galore
[13:15:04] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[13:15:15] <Haohmaru> where do i submit a wishlist entry? ;P~
[13:15:39] <Haohmaru> (that's not how it works, is it)
[13:16:35] *** Joins: lxsameer (lxsameer@user/lxsameer)
[13:20:39] <LordKalma> you just have to believe
[13:21:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:21:17] <Haohmaru> <i_want_to_believe.jpg>
[13:26:18] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:35:22] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[13:40:44] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[13:41:43] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[13:42:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:55] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:43:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:02] *** ChanServ sets mode: +v npaperbot
[13:43:55] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:44:47] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:45:11] *** Joins: filename (~kilitary@kilitary.xyz)
[13:51:29] * Haohmaru XORs nolyc with 0x55555555
[13:51:30] <Haohmaru> !rq
[13:51:31] <nolyc> Haohmaru: <PJBoy> we need trigraphs for all unicode characters
[13:52:39] <AliceMeows> That is only if you want your code to look like brainf*ck
[13:53:35] <Haohmaru> my code sometimes looks like lolcode
[13:57:09] <smallville7123> why do i get this? https://coliru.stacked-crooked.com/view?id=f4d69bb863f5e8fa
[13:58:45] <AliceMeows> What did you expect to get?
[13:58:56] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[14:02:16] <AliceMeows> smallville7123: https://godbolt.org/z/MvPsKff5E does that answer your question?
[14:02:55] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:05:20] *** Joins: angelacrust (~angelacru@182.64.83.183)
[14:07:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:08:09] <AliceMeows> https://godbolt.org/z/s3eoGKqsb this is probably better
[14:11:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:13:58] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Ping timeout: 272 seconds)
[14:14:24] *** Joins: rajkosto (~rajkosto@178.220.245.51)
[14:16:01] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[14:29:48] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 240 seconds)
[14:30:19] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:31:48] *** Joins: Burgundy (~NA@86.121.143.206)
[14:33:52] *** Joins: immibis_ (~hexchat@62.156.144.218)
[14:34:45] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[14:35:07] *** Quits: paul424 (~tom@ip-5-172-232-164.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[14:37:17] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[14:44:57] *** Quits: angelacrust (~angelacru@182.64.83.183) (Quit: Client closed)
[14:49:49] *** Quits: rajkosto (~rajkosto@178.220.245.51) (Read error: Connection reset by peer)
[15:06:32] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[15:07:53] <PJBoy> now with boost https://godbolt.org/z/sYe5174z4
[15:08:06] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:09:27] <AliceMeows> Its a shame we can't alias functions
[15:09:42] <PJBoy> there's always macros
[15:09:49] <AliceMeows> That's cheating
[15:10:11] <AliceMeows> If anything macros should be abolished
[15:11:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:11:27] <PJBoy> after we standardise a solution for header guards
[15:11:42] <AliceMeows> modules wont do?
[15:12:01] <PJBoy> modules can't export ... macros!
[15:12:11] <PJBoy> so you still need traditional headers for those
[15:14:07] <PJBoy> also need to de-macro-ise: assert, setjmp INFINITY et al, SIGTERM et al, SEEK_END et al, stdin et al, EXIT_SUCCESS
[15:14:36] <AliceMeows> I'd cut off the majority of C out of the language
[15:14:44] <AliceMeows> I'm sure someone would want to shoot me over this
[15:15:12] <PJBoy> assert could be replaced by contracts down the line
[15:15:26] <PJBoy> none of those constants need to be macros, so I don't know why they are
[15:15:37] <PJBoy> setjmp is setjmp
[15:16:02] <PJBoy> so I think there's definitely a world where we don't need those stdlib macros anymore
[15:16:49] <PJBoy> but then every codebase I've ever seen has a bunch of macros anyway
[15:17:06] <AliceMeows> We'll have to kill macros sooner or later
[15:17:11] <PJBoy> sometimes to do things that templates and constexpr can never do
[15:17:23] <AliceMeows> Then those things should be solved as well
[15:17:42] <PJBoy> macros are fine in small doses
[15:18:17] <PJBoy> man windows.h is the antithesis of macros in small doses
[15:18:47] <fiesh> it's the antithesis of software engineering
[15:19:10] <PJBoy> I had an issue a few weeks writing a notepad++ plugin where one of the names of a function in the notepad++ API clashed with a windows API function name
[15:19:11] <AliceMeows> I'd rather not have macros at all and instead have language constructs to solve the problems macros supposedly solve
[15:19:31] <PJBoy> and because all windows API function names are macros, the notepad++ function was broken beyond all repair
[15:19:44] <AliceMeows> Fun times
[15:19:50] <PJBoy> I just had to not include windows.h in that file or anywhere near it
[15:20:07] <AliceMeows> Various libraries have huge undef files to 'solve' that problem
[15:21:30] <PJBoy> one macro I use more nowadays is the forward macros
[15:21:33] <PJBoy> !fwd
[15:21:35] <nolyc> fwd is #define FWD(x) std::forward<decltype(x)>(x)
[15:22:48] *** Joins: p-i-_ (~Ohmu@183.89.27.225)
[15:23:17] <AliceMeows> When I've asked about something similar of that nature I was told to use a lambda which I find a terrible solution
[15:25:13] <PJBoy> for the purpose of making a function alias, lambda's the way to go
[15:25:13] <fiesh> PJBoy: the correct macro-free way to do this is type `std::move(x)` and then apply clang-tidy's quickfix ;-)
[15:25:26] <PJBoy> or a function
[15:25:43] *** Quits: p-i- (~Ohmu@2403:6200:8978:7799:91d3:ad70:883:d1c2) (Ping timeout: 250 seconds)
[15:25:46] <PJBoy> does clang-tidy promote moves to forwards?
[15:29:19] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[15:29:50] <fiesh> PJBoy: it'll warn here in code like this: `[](auto && x) { f(std::move(x)); }` and will provide a quickfix for the move to forward
[15:30:33] *** Quits: bobb_ (~bobb_@dslb-088-066-159-156.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:34:08] *** Joins: proller (~p@80.240.216.69)
[15:44:56] <PJBoy> that's great
[15:45:49] *** Joins: markong (~kvirc@213.146.188.203)
[15:49:39] <PJBoy> arghgh how is building code so god damn hard
[15:49:59] <AliceMeows> Tell me about it...
[15:51:45] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:24] <ville> ...pointer-to-function
[15:56:26] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Ping timeout: 260 seconds)
[15:56:48] <filename> repne jpm [eax+eip]...
[15:56:54] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[15:58:28] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Ping timeout: 272 seconds)
[15:59:18] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[15:59:22] <PJBoy> pointer-to-function has the obvious limitation of not aliasing overload sets or templates
[16:00:05] <AliceMeows> It also not compile time although maybe something could be hacked up with constexpr
[16:02:00] *** Joins: Leone (~Leo@216.154.12.122)
[16:04:57] <PJBoy> { constexpr int(*p)() = f; constexpr int x = f(); } constexpr int f() { return {}; }
[16:04:58] <geordi>  
[16:05:14] <PJBoy> ok I called f instead of p, but they both work
[16:06:35] <AliceMeows> Will p work even if f isn't constexpr?
[16:06:52] <AliceMeows> I'd assume it should but I don't trust the language too much
[16:08:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:09:47] <PJBoy> { constexpr int(*p)() = f; constexpr int x = p(); } int f() { return {}; }
[16:09:47] <geordi> error: call to non-'constexpr' function 'int f()'
[16:10:00] <AliceMeows> Not what I meant but okie
[16:10:04] <PJBoy> { constexpr int(*p)() = f; int x = p(); } int f() { return {}; } // erm
[16:10:05] <geordi>  
[16:12:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:706a:5377:a70d:f1d8)
[16:12:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:706a:5377:a70d:f1d8) (Changing host)
[16:12:04] *** Joins: skapata (~Skapata@user/skapata)
[16:12:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:13:12] <AliceMeows> Yeah that is more like it
[16:13:30] <AliceMeows> It still feels hackish though
[16:13:34] <fiesh> { constexpr int(*p)() = f; constexpr int x = p(); } constexpr int f() { return 0; }
[16:13:34] <geordi>  
[16:14:10] <PJBoy> that's just my first example
[16:17:22] <fiesh> oh I didn't see, indeed
[16:17:43] <fiesh> was just curious if constexpr was respected through the pointer
[16:17:54] <fiesh> not that I'd personally use function pointers anyway
[16:23:06] <LordKalma> std::function is the best stuff
[16:23:59] <LordKalma> btw
[16:24:07] <LordKalma> when do you use move and forward?
[16:24:22] <LordKalma> move I guess it's "on last use", but I dont understand forward
[16:27:27] <PJBoy> forward is on last use too
[16:27:35] <PJBoy> forward is just maybe-move
[16:28:44] <LordKalma> from what I can read in cppref, it maintains the r/l-valueness, is that it?
[16:28:56] <LordKalma> while std::move forces r-valueness, right?
[16:29:28] <PJBoy> yeah more or less
[16:29:55] *** Joins: darkbit (~db@136.158.8.67)
[16:30:12] <PJBoy> move casts to rvalue reference, forward casts to the same reference as originally given
[16:30:12] *** Quits: p-i-_ (~Ohmu@183.89.27.225) (Read error: Connection reset by peer)
[16:30:49] <LordKalma> in cppreference it says int g(const T&& x); // x is not a forwarding reference: const T is not cv-unqualified
[16:30:50] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:b844:bdaf:8ab7:ed96)
[16:30:52] <PJBoy> "originally given" necessitating the template argument of std::forward being spelled out
[16:31:02] <PJBoy> yeah
[16:31:03] <LordKalma> so you cant be expressive about constness with forwarding refs
[16:31:09] <PJBoy> indeed
[16:31:29] <LordKalma> 13:00 <PJBoy> "originally given" necessitating the template argument of std::forward being spelled out
[16:31:31] <LordKalma> wdym?
[16:32:19] <PJBoy> like if you theoretically did `forward(arg)`, the compiler doesn't have enough information about arg to say whether it was originally an lvalue or rvalue reference
[16:32:52] <PJBoy> that information is available in the type itself, hence `forward<T>(arg)` or `forward<decltype(arg)>(arg)`
[16:34:13] <LordKalma> it would be cool if the c++ syntax allowed you to write like template<typename T = decltype(x)> foo(T x);
[16:34:53] <PJBoy> decltype(x) is T though
[16:36:11] <LordKalma> +nolyc> fwd is #define FWD(x) std::forward<decltype(x)>(x)
[16:36:15] <LordKalma> so why do you need this crap?
[16:36:35] <fiesh> LordKalma: if you use `auto`, you don't have T spelled out
[16:37:00] <PJBoy> I mean std::forward<T>(arg) is still noisy
[16:37:07] <PJBoy> compared to FWD(arg)
[16:37:49] <PJBoy> std::forward<decltype(x)>(x) always works and does the right thing, it should be a standardised macro
[16:38:29] <PJBoy> on the subject of const T&& overloads, https://en.cppreference.com/w/cpp/regex/regex_token_iterator/regex_token_iterator
[16:38:43] <PJBoy> we can see their most useful usage, being used to delete rvalue reference overloads
[16:40:09] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:40:12] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:7799:28cf:5a29:7ce3:efd1)
[16:40:32] <LordKalma> fiesh fair, didnt consider auto params
[16:40:37] <LordKalma> thanks
[16:40:49] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[16:40:50] <LordKalma> fuck, regex in c++ is even more dark magic than regular regex
[16:41:04] <Haohmaru> hm?
[16:41:09] * Haohmaru uses std::regex
[16:41:48] <PJBoy> the pain point there is const T& overloads being able to receive rvalue arguments
[16:41:49] *** Joins: AmR (~AmREiSa@156.199.47.115)
[16:42:02] <PJBoy> but receiving an rvalue argument would lead to a dangling reference after the ctor finishes
[16:42:22] <PJBoy> so they declare a deleted const T&& overload so that you can't pass rvalue arguments
[16:43:22] <LordKalma> "const T& overloads being able to receive rvalue arguments" wut? they can?
[16:43:25] *** Quits: p-i- (~Ohmu@2403:6200:8978:7799:b844:bdaf:8ab7:ed96) (Ping timeout: 256 seconds)
[16:43:35] <PJBoy> yeah, you should know that
[16:44:00] <LordKalma> {foo(5);} void foo(const int&){};
[16:44:00] <PJBoy> { f(999); } void f(const int& x) { SHOW(x); }
[16:44:01] <geordi>  
[16:44:01] <geordi> x = 999
[16:44:13] <LordKalma> interesting
[16:44:20] <PJBoy> in the C++98 days this was a lot more justified
[16:44:46] <LordKalma> how does SHOW(x); work in that unction then?
[16:45:46] <PJBoy> it's as if you wrote `{ f_rvalue(999); } void f(const int& x) { SHOW(x); } void f_rvalue(int x) { f(x); }`
[16:46:21] <LordKalma> so how does that result in danging refs?
[16:46:41] <PJBoy> the reference is being bound to that `int x` parameter of f_rvalue
[16:46:53] <LordKalma> yes
[16:46:55] <PJBoy> so once the function call has completed, that `int x` parameter is gone
[16:47:00] <LordKalma> yes
[16:47:19] <PJBoy> so dangling reference hence forth
[16:47:32] <LordKalma> ah
[16:47:37] <LordKalma> not during the call itself]
[16:47:44] <PJBoy> yeah during the call itself, all is well
[16:48:04] <LordKalma> ah btw
[16:48:08] <PJBoy> if the function stores the reference/pointer/whatever for later, like an iterator would do
[16:48:43] <PJBoy> you actually could use regex_token_iterator validly with rvalue arguments, but I guess it's not worth allowing it
[16:49:41] <PJBoy> like with `std::copy(sregex_token_iterator(a, b, regex("lalala")), sregex_token_iterator(), destination);` for example
[16:50:29] <PJBoy> but yeah, that's not worth the danger of allowing users to write `sregex_token_iterator it(a, b, regex("lalala"); /* now any use of it is UB */`
[16:50:34] <LordKalma> ah yes, of course, I understand now
[16:50:50] <LordKalma> thanks
[16:51:24] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[16:51:50] <LordKalma> fking insane language pt232345
[16:52:50] <PJBoy> but it's zero overhead
[16:52:52] <PJBoy> :)
[16:53:04] <LordKalma> not according to pretty much every paper
[16:53:30] <LordKalma> I feel scammed
[16:53:56] <PJBoy> it's pretty close though
[16:54:19] <LordKalma> speaking of which
[16:54:40] <LordKalma> every now and then a picture shows up in reddit about "power consumption" of languages
[16:54:52] <LordKalma> and C++ they mark as like 10% less efficient than C
[16:54:54] <LordKalma> my ass it is
[16:55:24] <PJBoy> depends on the C and C++ ofc
[16:55:40] <PJBoy> also parallelism, the CPU being tested
[16:56:11] <InPhase> LordKalma: This was true about 2004 and earlier.
[16:56:12] <PJBoy> power consumption is a hard metric
[16:56:44] <InPhase> LordKalma: It would depend on the compiler a bit, but optimizations just did not kick in the same when doing C++ in that era.
[16:57:14] <PJBoy> then you get clang's optimisations that sometimes add incomprehensible vector instructions
[16:58:23] <PJBoy> that said, does power consumption include compiling :D
[16:58:40] <PJBoy> 'cause constexpr would potentially save a load of computing power at the cost of a load of compiling power
[17:01:59] <fiesh> I don't think constexpr is relevant to optimization at all, at least I yet have to see an example of it
[17:02:14] <LordKalma> it replaces function calls with just values
[17:03:19] <fiesh> it forces the programmer to make their function definitions visible to the compiler maybe, but that can be done with and without constexpr
[17:03:36] <PJBoy> watch every Jason Turner video
[17:04:35] <fiesh> yeah that doesn't count as an example
[17:05:12] *** Joins: proller (~p@2a02:6b8:b081:7206::1:32)
[17:06:56] <PJBoy> https://youtu.be/xtf9qkDTrZE?t=721
[17:07:38] <PJBoy> that's pretty good
[17:08:17] <LordKalma> hahah J Turner looooves them constexpr
[17:08:36] <PJBoy> someone needs to
[17:09:00] <rpav> if only the compiler could definitively determine whether something was constexpr or not
[17:09:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:10:52] <rpav> we should only need `constexpr` on global variables i think
[17:11:20] <rpav> or maybe consteval now, but i'm not entirely sure how that one applies yet
[17:11:30] <PJBoy> you want to be able to declare things as constexpr so that the compiler can tell you you're wrong when you're wrong
[17:11:45] <rpav> but it doesn't anyway
[17:11:57] <PJBoy> it does when it can
[17:12:05] <PJBoy> especially for constexpr variables
[17:12:06] <rpav> only when you actually use something in constexpr context, and then it would _anyway_
[17:12:25] <PJBoy> and for any non template function
[17:12:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:13:44] <rpav> { foo(0); } constexpr void foo(int* p) { *p = 42; }
[17:13:45] <geordi> Undefined behavior detected.
[17:13:56] <PJBoy> like if you have a `constexpr auto make_rational() { return rational{}; }` or whatever, and then someone comes and decides they need logging and writes `constexpr auto make_rational() { cout << __func__; return rational{}; }`
[17:14:02] <PJBoy> that's bad, and the compiler will tell you so
[17:14:31] <fiesh> PJBoy: fascinating, I'm tempted to say that's a bug in the optimizer
[17:14:34] <PJBoy> if constexpr wasn't specified, then you'd just shoot yourself in the foot unknowingly
[17:14:54] <PJBoy> fiesh, I wouldn't disagree
[17:16:18] <rpav> the cases it warns are extremely limited
[17:16:24] <rpav> or errors i guess
[17:16:50] <rpav> and arguably they should work anyway .. why _can't_ you log in a constexpr function, and have the logging happen at compile time? this would be pretty goddamn useful for debugging
[17:17:08] <rpav> one can _definitely_ do this at compile-time in CL macros/compiler-macros ;)
[17:17:56] <rpav> plus aren't constexpr strings supposed to be constexpr, thus closing that case
[17:18:38] <PJBoy> obviously operations on cout can't be constexpr
[17:18:50] <PJBoy> or any other IO
[17:18:52] <rpav> (any arguments along the lines of "you shouldn't be able to do X because X might be bad for you or used in bad ways" are invalid)
[17:19:04] <rpav> PJBoy: not true at all
[17:19:16] <PJBoy> you got all that global state to worry about
[17:19:36] <rpav> constexpr doesn't mean "const" anymore than "inline" means .. inline; it means "happens at compile-time," and there's nothing precluding compile-time I/O
[17:19:43] <PJBoy> what if I had earlier executed cout << uppercase for example
[17:19:53] <PJBoy> that function doesn't know whether I did or not
[17:19:59] <rpav> you get what you get, as if it were run at runtime, but it's at compile-time
[17:20:02] <PJBoy> precluding compile time evaluation
[17:20:20] <rpav> e.g. "let's load this map from a file" would be pretty useful
[17:20:32] <rpav> load a _constexpr_ map's data, at compile-time
[17:20:39] <PJBoy> that's what the embed proposal is for
[17:21:06] <PJBoy> proposals I should say
[17:22:06] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:22:21] <rpav> addressing one specific case is a hack ;)
[17:22:53] <rpav> we could have all this power and more, if they removed constexpr limits
[17:22:57] <PJBoy> very desirable hack
[17:23:43] <LordKalma> jturner just wrote a json compiler haha
[17:23:53] <rpav> compiler?
[17:23:59] <LordKalma> dont need constexpr when you just write "compilers"
[17:24:07] <LordKalma> rpav makes C++ code out of json
[17:24:09] <rpav> oh
[17:24:23] <LordKalma> so you can build the tool and use the tool to make objects for another program
[17:24:42] <rpav> reminds me of xbm/xpm
[17:24:44] <LordKalma> think of it as the json MOC
[17:24:48] * LordKalma runs
[17:24:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:25:20] <fiesh> that's actually a very legitimate use case for the preprocessor: replace Qt's MOC with macros
[17:25:32] <rpav> nah it'd be just like https://en.wikipedia.org/wiki/X_BitMap
[17:25:38] <fiesh> a much better solution than a 3rd party compiler
[17:25:40] <LordKalma> macros cant do what the  moc does in whole
[17:25:59] <fiesh> LordKalma: no they can do more, namely also templated QObject:s and so on
[17:26:10] <fiesh> LordKalma: see verdigris, the project that replaces moc with macros
[17:26:26] <fiesh> we've been using it exclusively for years and completely gotten rid of moc, fortunately
[17:26:49] <LordKalma> I know verdigris, and I know copperscipe
[17:27:01] <fiesh> templated QObject:s are so useful once you have them, for example allowing for a wrapper around QFuture:s that makes them actually useful without plenty of options to shoot you in the foot...
[17:28:43] <LordKalma> yes, I get the templating argument
[17:29:03] <LordKalma> "Verdigris allowed ossia score to use template with their QObject's, and solve some trouble with the build system."
[17:29:09] <LordKalma> the second part here is just a bad argument
[17:29:21] <LordKalma> "our build system is so shit we needed to get rid of tooling"
[17:29:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:30:04] <PJBoy> bad build systems make people go insane
[17:31:12] <fiesh> moc's dependency handling is quite broken... if A includes B and both need moc, you need to run moc on B before being able to run it on A.  at least that's how it was when we ditched it
[17:31:32] <fiesh> plus not having to use a 3rd party compiler is arguably an advantage
[17:31:42] <LordKalma> arguably
[17:31:59] <LordKalma> if youre jason turner you write even more of that stuff :)
[17:32:04] <fiesh> any dependency is a disadvantage
[17:32:15] <LordKalma> well, that's just BS
[17:32:20] <LordKalma> dont use Qt at all then
[17:32:32] <LordKalma> and write code for all platforms, no dependencies
[17:32:46] <fiesh> the advantages of Qt outweigh the disadvantage of having an additional dependency.  the same does not hold for moc
[17:35:32] <rpav> moc has other issues, like not including full definitions so you have a hard time using unique_ptrs of anything
[17:36:20] <AliceMeows> Use CopperSpice then its free of moc
[17:36:30] <rpav> moc does a few things that still can't be done without introspection i think, but they _could_ rewrite it to use like clang and be smarter
[17:36:50] <rpav> i don't think copperspice does anything of value
[17:37:26] <rpav> ah yeah LGPL fork of some early qt .. _that_ helps
[17:38:02] <LordKalma> copperspice forked in qt 4.x wasnt it?
[17:38:07] <AliceMeows> Its qt5
[17:38:49] <AliceMeows> It used to be qt4 but later it got ported to qt5
[17:40:25] <fiesh> there was some benchmark on copperspice, done by the author of verdigris (who I think is the original author of moc).  copperspice sucked, but of course that may have changed in the meantime
[17:41:03] <rpav> 🤔 April 2020 "Remove elements from QVariant" / "use std::variant" sold ;) i mean not really, but
[17:41:13] *** Joins: filename (~kilitary@kilitary.xyz)
[17:41:40] <rpav> dunno i see lots of "changed the build system and documentation", "attend conference", occasionally peppered with a few improvements
[17:41:43] <rpav> https://www.copperspice.com/docs/cs_overview/timeline.html
[17:42:00] <rpav> "X but slightly better" is never a selling feature ;/
[17:42:15] <AliceMeows> There is always wxWidgets but not many seem to like it so nanapro might be a better option for those
[17:42:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:02] *** ChanServ sets mode: +v npaperbot
[17:43:44] <fiesh> the way Qt is heading with Qt6, maybe copperspice does have a bright future ahead of it
[17:44:06] <rpav> unless existing things can be ported with minimal effort, probably not
[17:44:44] <fiesh> it seems to be mandatory for Qt (component) replacements to have horrible names, so both verdigris and copperspice fullfil their expectations in that regard
[17:45:17] <fiesh> fulfill
[17:45:29] <rpav> verdigris doesn't seem to be a replacement
[17:45:30] <Haohmaru> fillful
[17:45:42] <LordKalma> rpav i actually learned recently that Qt doesnt have any std::thing in its API in part because stability guarantees
[17:45:49] <LordKalma> they dont break if the stdlib does
[17:45:54] <LordKalma> (ABI wise)
[17:46:05] <LordKalma> in fact, pretty much everything in Qt uses PIMPL
[17:46:16] <rpav> LordKalma: yeah probably .. also probably a lot of "we control this and already have a huge legacy codebase and this stuff already works"
[17:46:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:46:39] <LordKalma> of course thats also a reson
[17:46:44] <LordKalma> but they did make some changes
[17:46:52] <LordKalma> like removing qlist, which was a dumb container
[17:47:17] <rpav> "Another problem of CopperSpice compared to Qt is that it generates and registers the QMetaObject at run-time when loading the application. [...] For this reason, binaries using CopperSpice are much bigger than binaries using Qt (moc or Vedrigris), and take also more time to load because of the massive amount of relocations."
[17:47:20] <rpav> qt but worse
[17:47:41] <fiesh> Qt also has great gotchas, like the best way to write a hardcoded QString?  Use `QStringLiteral("foo")` -- but wait, that string's supposed to be empty?  Then don't use QStringLiteral but QLatin1String("")...
[17:47:56] <LordKalma> indeed
[17:48:10] <LordKalma> QStringLiteral should be replaced with actual constexpr QString constructor
[17:48:21] <rpav> verdegris seems interesting
[17:48:30] <rpav> verdigris
[17:48:34] <fiesh> rpav: it's actually awesome
[17:48:38] <LordKalma> but at least QStringLiteral is a performance-oriented macro (yes, its a macro)
[17:48:56] <fiesh> LordKalma: yeah but of course not for empty string literals... great
[17:49:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79)
[17:49:02] <LordKalma> QStringLiteral saves the string in the .data section of the binary, and creating any QString from it is free
[17:49:04] <rpav> although to be fair, i see a typo on _their own page_ so i don't feel so bad .. "Both CopperSpice and Verdigirs..."
[17:49:28] <rpav> https://woboq.com/blog/verdigris-qt-without-moc.html .. or maybe someone's page? not sure
[17:49:31] <LordKalma> rpav in github, verdigris page has a bullet point list that is cut
[17:49:46] <LordKalma>  6. The additional Q_OBJECT_IMPL
[17:49:50] <LordKalma> and stops there
[17:49:55] <LordKalma> it'll always be a mistery
[17:50:04] <fiesh> rpav: yeah that's the author
[17:50:19] <LordKalma> that lack of attention to even the readme.md doesnt inspire me, but okay
[17:50:40] <rpav> LordKalma: i think that's the difference .. instead of just Q_OBJECT it also requires Q_OBJECT_IMPL
[17:50:53] <LordKalma> ah
[17:51:04] <fiesh> no, it has W_OBJECT and W_OBJECT_IMPL
[17:51:05] <rpav> i glanced at the table on the page describing it; the readme could definitely use improvement clearly
[17:51:11] <LordKalma> since its missing the full stop I though it was more missing
[17:51:32] <LordKalma> anyway
[17:51:41] <rpav> fiesh: ok then typo because i don't think qt has a Q_OBJECT_IMPL
[17:51:51] <LordKalma> not that I know of
[17:52:19] <rpav> interesting though
[17:52:28] <LordKalma> copperscipe tries to keep widgets alive, and tries to bring modern c++ into the mix, like shared pointers instead of parent raw pointer ownership
[17:52:39] <rpav> i don't think investing a lot of time in 90s-style guis is worthwhile though
[17:52:45] <LordKalma> there was a talk from the devs in some cppcon, about shared ptrs iirc
[17:52:54] <rpav> or 00s/10s but :P
[17:53:06] <AliceMeows> What do you suggest instead?
[17:53:17] <LordKalma> Material and Fusion, of course!
[17:53:19] * LordKalma runs
[17:53:25] <rpav> reinventing guis along different paths
[17:53:36] <rpav> but no one has the time or expertise to do this so
[17:54:45] *** Joins: rajkosto (~rajkosto@178.220.245.51)
[17:54:46] <rpav> wasm + modern web stuff has the potential to go somewhere maybe, but things rarely go the best direction
[17:54:56] <AliceMeows> Disgusting
[17:55:07] <LordKalma> here we go agaiiiiiiiinnnnnnnn
[17:55:09] <rpav> only if you don't think far enough ahead
[17:55:23] <rpav> like yeah .. embed a browser and run js+wasm rendering html etc sure, ugly
[17:55:24] <LordKalma> might as well discuss the gonads of angels
[17:55:31] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[17:56:01] <rpav> think more "wasm + webgl" and some stuff that makes the entire browser/js/etc bits unnecessary
[17:56:32] <AliceMeows> I want my system and software to be consistent instead of this circus we're heading towards
[17:56:55] <LordKalma> that ship has sailed
[17:57:02] *** Quits: rajkosto (~rajkosto@178.220.245.51) (Client Quit)
[17:57:09] <LordKalma> consistent with _what_ anyway?
[17:57:09] <rpav> homogeny never works
[17:57:13] *** Joins: rajkosto (~rajkosto@178.220.245.51)
[17:57:16] <LordKalma> apart from macos consistent doesnt exist
[17:57:26] <rpav> even on macos anymore, i think
[17:57:27] <LordKalma> consistent with KDE? Gnome? what theme?
[17:57:44] <AliceMeows> What's wrong with consistency?
[17:57:56] <LordKalma> nothing
[17:57:57] <AliceMeows> My software on kde looks mostly fine
[17:57:59] <rpav> the fact it starts with "first we need everyone to agree to do X"
[17:58:00] <LordKalma> its just that it doesnt exist
[17:58:16] <LordKalma> AliceMeows well, all k-software
[17:58:20] <LordKalma> not all software
[17:58:26] <rpav> it doesn't matter what; some consistency is always going to require everyone to agree to _some_ X
[17:58:40] <LordKalma> if Im going to develop for linux, whose guidelines do I follow?
[17:58:48] <ville> mine
[17:58:51] <LordKalma> good
[17:58:54] <LordKalma> ville for president
[17:59:34] <LordKalma> btw, let me recomend you to look at https://platform.uno/ and https://avaloniaui.net/ and how they do things
[17:59:35] <ville> i prefer dictatorship
[17:59:52] <rpav> that always turns out well ;)
[18:00:07] <LordKalma> namely https://platform.uno/docs/articles/how-uno-works.html
[18:00:25] <rpav> "Maintain pixel-perfect control over where pixels go" 🤔
[18:00:36] <LordKalma> frget that market BS
[18:00:42] <LordKalma> read the how it works
[18:01:04] <LordKalma> I like how they use "templated controls", aka actually native buttons just with a nice coat of paint
[18:01:11] <LordKalma> great for accessibility
[18:01:22] <LordKalma> except on linux, because linux doesnt have native
[18:02:02] <rpav> oh this is all xaml-derived?
[18:02:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:02:57] <LordKalma> yes these are both xaml .net frameworks
[18:05:24] <LordKalma> That do things right if you ask me
[18:09:37] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:12:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:15:04] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:15:04] <LordKalma> https://icons8.com/lunacy
[18:15:07] <LordKalma> this is build with avalonia
[18:15:32] <LordKalma> and looks pretty sweet
[18:15:35] <rpav> i dunno, it's all apps and old uis
[18:15:48] <AliceMeows> You're saying it like its a bad thing
[18:15:55] <AliceMeows> If it works, why change?
[18:16:07] <rpav> heh
[18:16:20] <rpav> this is why we're all still using browsers and the web
[18:16:29] <rpav> and qt
[18:16:41] <AliceMeows> The web fulfills something entirely different
[18:16:44] <rpav> not really
[18:17:04] <rpav> it's a very-low bar, sdk-agnostic, platform-independent way to deliver text and UI
[18:17:20] <rpav> it works; these days it works better than ever
[18:17:29] <AliceMeows> And its still garbage lol
[18:17:32] <rpav> clearly we should never change it
[18:17:40] <AliceMeows> You're not going to develop AAA game or photoshop with it
[18:18:18] <rpav> https://www.adobe.com/express/feature/image/editor
[18:18:58] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:97d2:fe15:426:6741) (Quit: Konversation terminated!)
[18:19:08] <rpav> https://docs.unrealengine.com/4.27/en-US/SharingAndReleasing/HTML5/GettingStarted/
[18:19:12] <LordKalma> https://beta.unity3d.com/jonas/AngryBots/
[18:19:29] <PJBoy> yeah webasm / asm.js is incredible
[18:19:30] <LordKalma> AngryBots surprises me every time I open it
[18:19:36] <PJBoy> you can absolutely get a AAA game on browser
[18:19:40] <rpav> i don't disagree it's garbage; i do disagree with the argument "if it works, why change"
[18:19:53] <AliceMeows> Why?
[18:19:56] <rpav> PJBoy: well, no, but you can do pretty well these days
[18:20:03] <PJBoy> you can too
[18:20:32] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:20:58] <rpav> PJBoy: i'm not sure you're familiar with the current state of AAA heh
[18:21:04] <LordKalma> wow
[18:21:10] <LordKalma> just tried isntalling lunacy
[18:21:13] <LordKalma> this shit looks amazing
[18:21:25] <PJBoy> https://www.youtube.com/watch?v=lDkjb4X6IUA
[18:21:26] <rpav> webgl is not really sufficient for like, ff7r, and that was last-gen
[18:21:40] <PJBoy> you can take any arbitrary unreal engine game and run it in browser
[18:21:43] <PJBoy> with minimal speed loss
[18:21:49] <rpav> right that's neat; that's not AAA
[18:22:19] <AliceMeows> If it requires more processing power than it would do otherwise then its not worth it, it'd be nothing but a waste
[18:22:25] <rpav> "i can load a fancy scene with some foliage and render with PBR" is not current-gen AAA
[18:22:32] <PJBoy> bah that wasn't the link I thought it was
[18:23:20] <rpav> but i mean, there aren't many AAA games, and you can definitely deliver games of the quality most would expect these days
[18:23:38] <PJBoy> https://www.icculus.org/ut99-emscripten/flyby/wasm/
[18:23:42] <PJBoy> unreal tournament 99
[18:23:50] <LordKalma> 175mb
[18:23:50] <LordKalma> damn
[18:23:52] <AliceMeows> I did previously state that people don't have standards these days
[18:24:12] <rpav> AliceMeows: "Why?" if you see the above statements and don't see the inconsistency in the positions / contradictions in the logic then there's nothing that can be further said
[18:24:48] <rpav> PJBoy: that's _nice_ but AAA-ish from 23 years ago is also not a huge lift on the modern pocket calculator ;)
[18:25:52] <rpav> one of the biggest hurdles you have to overcome is the sheer bandwidth now being used in e.g. UE5 and PS5 games
[18:25:56] *** Joins: pulse (~pulse@user/pulse)
[18:26:20] <rpav> when you can basically load entire scene assets on demand _as you turn around_
[18:26:37] <PJBoy> bah it's just hard to find examples of modern games that have been emscriptened
[18:26:39] <LordKalma> the tomb rider PS5 demo was amazing
[18:26:42] <PJBoy> for obvious reasons
[18:27:07] <LordKalma> https://www.youtube.com/watch?v=qC5KtatMcUw
[18:27:15] <rpav> like you're not getting 5.5GB/s (big-B GB) over the web
[18:27:23] <rpav> (today .. tomorrow maybe)
[18:27:45] <PJBoy> if nothing else though, browser is a definite option for big games
[18:27:56] <PJBoy> even if it's not the optimal platform
[18:27:59] * Haohmaru closes the browser
[18:28:01] <rpav> it is, but it sucks so no one wants to use it
[18:28:21] <rpav> i mean i guess some people do .. you have all the "i grew up on newgrounds" people who might have no problem with browser-based games
[18:28:21] <PJBoy> but it's cross platform and stuff
[18:28:28] <rpav> it is
[18:28:30] <PJBoy> you can play it at school
[18:28:41] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[18:28:42] <PJBoy> or at a friend's house, or your parent's computer
[18:29:19] <Haohmaru> poor webbrowser devs, they gotta have the functionality of an OS, and yet there is still an OS under them
[18:29:22] <rpav> while i say it sucks (from an "ick"/conceptual standpoint where we sortof have this concept of "load html page in your browser to load game" / cheap / crap) .. it has all those advantages absolutely
[18:29:35] <LordKalma> well, android gaming is a big market because people are ditching personal computers
[18:29:44] <rpav> it's actually great to prototype little shit on, from tiny ass 2D things to bigger 3D, even without big engines
[18:30:39] <PJBoy> and it's good for businesses, 'cause they don't need to test or maintain builds for several platforms, saving money
[18:31:08] <PJBoy> although I guess in reality they need to test on multiple browsers on multiple platforms anyway
[18:31:18] <rpav> kinda, chrome is hte new IE
[18:31:31] <rpav> much to the laughably ironic protests of MS
[18:31:44] <PJBoy> it is
[18:31:46] <PJBoy> what a cruel world
[18:33:05] <LordKalma> edge is chromium now as well
[18:33:08] <LordKalma> so stfu microsoft
[18:33:46] <PJBoy> by force
[18:33:50] <rpav> but consider that we _could_ push through to an "inversion point" .. where instead of asm.js _as a platform_, you have something like "the few web bits necessary to run thing" and then you don't need a browser
[18:34:04] <rpav> PJBoy: bah, they're just lazy
[18:34:24] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:34:27] <rpav> firefox can scrape by with a relatively compatible browser, and Apple too .. MS certainly has the cash
[18:34:36] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 240 seconds)
[18:34:41] <rpav> they just whine a lot then use chromium because it's cheap and Edge makes them no money
[18:34:42] <AliceMeows> They used to but decided to quit it
[18:35:05] *** Quits: proller (~p@2a02:6b8:b081:7206::1:32) (Ping timeout: 252 seconds)
[18:35:12] <LordKalma> firefox is a dumpersfire
[18:35:17] <PJBoy> they were never gonna be able to continue competing with their MS original thing
[18:35:19] <LordKalma> thats amazing it went bankrupt yet
[18:35:20] <rpav> probably opera and a few others are still around
[18:35:35] <AliceMeows> opera is chromium based already
[18:36:15] <rpav> LordKalma: yeah mostly because basing your business around profiting from product that's a commodity you give away for free is a poor business model
[18:36:21] <rpav> whoda thunkit
[18:36:55] <PJBoy> that's all google does
[18:36:56] <rpav> PJBoy: they're not competing as it is
[18:37:05] <rpav> no, google is advertising
[18:37:22] <rpav> that's their $billions
[18:37:29] <PJBoy> they offer so much free shit though
[18:37:30] <rpav> also play store etc no doubt
[18:37:40] <AliceMeows> 'free' when you're the product lol
[18:37:48] <rpav> PJBoy: and they dump everything they don't either use internally or profit from advertising on
[18:37:49] <PJBoy> are you the product when you use chrome?
[18:37:53] <rpav> yes
[18:37:56] <PJBoy> how so?
[18:38:04] <rpav> on android, no adblocking on chrome
[18:38:13] <rpav> it's the best and primary-shipped browser on every phone
[18:38:17] <PJBoy> you'd get ads on any browser
[18:38:31] <rpav> there are adblocking browsers; firefox among them
[18:38:34] <PJBoy> I mean not on firefox + ublock, but still
[18:38:51] <PJBoy> I don't agree that makes you the product
[18:38:56] <rpav> but it's MS shipping IE all over .. chrome is the primary browser, it's the fastest, the most integrated, up-to-date, etc
[18:39:04] <rpav> what you agree to isn't really relevant
[18:39:16] <PJBoy> when I use gmail am I the product?
[18:39:23] <AliceMeows> Yes
[18:39:25] <PJBoy> how so?
[18:39:26] <rpav> they make money from advertising; this is no secret .. the vast majority of android users use chrome
[18:39:32] <rpav> gmail has ads
[18:39:37] <AliceMeows> They train their AI with your data
[18:39:50] <AliceMeows> Same as using github makes you a product due to copilot
[18:39:53] <PJBoy> are you sure?
[18:39:58] <AliceMeows> Yes
[18:40:02] <PJBoy> 'cause I haven't seen many advancements in AI
[18:40:10] <PJBoy> and my emails are super duper informative
[18:40:36] <PJBoy> they can't even get youtube recommendations right
[18:40:39] <PJBoy> not even close
[18:40:52] <rpav> targeting is what it's all about
[18:40:56] <AliceMeows> I'm not so sure they're 'wrong'
[18:40:58] <LordKalma> the youtube algorithm apparently optimizes for watchtime
[18:41:09] <rpav> on youtube it's still ads
[18:41:15] <LordKalma> if they dont engage you particularly, but in average this is what maximized it... then its owrking
[18:41:25] <rpav> and you're only part of hte product .. "content creators'" content is the other part
[18:41:44] <LordKalma> youtube is a dumpsterfire
[18:41:48] <PJBoy> YT I agree you're the product
[18:41:53] <rpav> the modern profitability isn't in making something and selling it, it's in providing a market to profit on selling other peoples' stuff
[18:42:14] <LordKalma> chrome probably spies on you as much as it can
[18:42:22] <LordKalma> to maximize sell price of ads
[18:42:28] <AliceMeows> Someone did extensive analysis on this and it does
[18:42:37] <LordKalma> of course it does
[18:42:37] <PJBoy> I imagine all browsers do
[18:42:41] <rpav> tailored ad targeting is what it's all about
[18:42:52] <LordKalma> in fact, the things that dont generate revuee google pretty much killed
[18:43:04] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:43:06] <LordKalma> like google earth is mostly deadware, so is a lot of their GIS stuff
[18:43:12] <AliceMeows> Actually very few weren't
[18:43:16] <PJBoy> I'll never understand how a huge rich business like google can survive off of ad money
[18:43:23] <rpav> PJBoy: some might, but it doesn't matter because they lack the vast infrastructure to target you everywhere you go, from your email to what you watch to everything else anyone drops google analytics on :P
[18:43:25] <LordKalma> sheer size
[18:43:26] <AliceMeows> However you wouldn't want to use those browsers in the first place
[18:43:28] <PJBoy> no one I've ever met clicks on ads ever
[18:43:51] <rpav> people do click on ads
[18:43:58] <PJBoy> yeah clearly so
[18:44:03] <LordKalma> thats because we are, and are disproportionately surrounded by, tech literally people
[18:44:06] <PJBoy> but that's such a foreign concept to me
[18:44:10] <rpav> also people pay for impressions, not click-through
[18:44:13] <LordKalma> I've clicked on ads before
[18:44:21] <rpav> "In Q1 2018, advertisers spent, on average, $2.80 per thousand impressions (CPM), and $0.75 per click (CPC). The average click-through rate (CTR) on the GDN was 0.35%."
[18:44:25] <LordKalma> once I was looking for a VPS and a fb add was actually the best deal at the time
[18:44:33] <rpav> a thousand impressions is like nothing
[18:44:41] <PJBoy> 0.35% sounds realistic
[18:44:42] <LordKalma> 0.35% CTR is amazing
[18:44:47] <LordKalma> its huge
[18:44:51] <rpav> yeah
[18:45:18] <LordKalma> 35 per thousand, right?
[18:45:21] <LordKalma> thats quite a bit
[18:45:29] <PJBoy> that kind of percentage can be accounted for by misclicks
[18:45:33] <rpav> if you have a million impressions, 0.35% is 3500 people interested enough to click through to your product
[18:45:36] <AliceMeows> I can't understand people who don't block ads the very few times I browsed everything felt wrong
[18:45:45] <AliceMeows> without one*
[18:46:05] <rpav> PJBoy: dubious .. google is pretty harsh on placement and stuff
[18:46:24] <PJBoy> bro google's the most annoying mother fucker when it comes to misclicks
[18:46:29] <rpav> also you should be able to logic that people would not be paying if they were getting no value
[18:46:38] <AliceMeows> PJBoy: then block it!
[18:46:39] <LordKalma> again, remember we are a VERY skewed sample
[18:46:48] <AliceMeows> Sadly so
[18:46:51] <LordKalma> tech literally people make for horrible samples of usual internet behaviour
[18:46:56] <PJBoy> when you click a link from their search results page, go back, and it expands info on the link you clicked after a small delay with a CSS transition
[18:46:58] <rpav> google provides end-to-end analytics for impression-to-dollar conversion
[18:47:05] <PJBoy> that shit makes me misclick all the time
[18:47:13] <AliceMeows> Too bad for them I block that junk at all times
[18:47:18] <rpav> AliceMeows: yeah same heh
[18:47:22] <PJBoy> can't block their CSS transitions
[18:47:28] <AliceMeows> css transitions?
[18:47:28] <LordKalma> I too use ublock
[18:47:36] <LordKalma> but yeah, we're a poor sample
[18:47:51] <AliceMeows> I use umatrix for good measure as well on hard mode
[18:47:57] <AliceMeows> It breaks the majority of the web
[18:48:04] <LordKalma> actually /me googles
[18:48:06] *** Joins: proller (~p@80.240.216.69)
[18:48:07] <rpav> we are
[18:48:18] <Haohmaru> what about adnauseum or however it was called
[18:48:23] <LordKalma> ah I dont mind javascript
[18:48:23] <rpav> i know tech savvy people who are like "ad blocker? who cares it doesn't bother me"
[18:48:37] * Haohmaru doesn't use an adblocker
[18:48:44] <AliceMeows> It wastes clock cycles
[18:48:57] <rpav> also note i'm not really saying any of this is _bad_; advertising is good, despite a lot of web advertising being annoying as fuck
[18:48:59] <LordKalma> I did write some javscript-based SPAs so Im in no position to block JS
[18:49:19] <LordKalma> rpav, thats the thing, even the growing ad-blocking population pushed for good changes
[18:49:21] <rpav> but google makes a fuckton from everything they do, and they seem to cut hard anything that doesn't further this goal (and/or is an internal product)
[18:49:27] <LordKalma> like chrome asking people to compromise
[18:49:36] <LordKalma> and only showing unintrusive ads
[18:49:38] <rpav> LordKalma: yeah but unfortunately more-money wins
[18:49:44] <rpav> their unintrusive ad thing afaict is kinda bad
[18:50:00] <LordKalma> well, its a good idea, not sure about the implementation
[18:50:04] <rpav> it seems to block functionality on legit sites that don't really advertise
[18:50:15] <LordKalma> thing is its good that consumers push on this stuff
[18:50:19] <AliceMeows> Its all about getting rid of competition
[18:50:22] <LordKalma> and of course, the EU
[18:50:43] <rpav> i _wouldn'_ be surprised if there's an antitrust violation where they're blocking stuff on sites that use certain competitors they don't like
[18:50:52] <LordKalma> AliceMeows of course it is, but hey, google wont shove tits in my moms laptop screen when she (a VERY illiterate person technologically) clicks somewhere random
[18:50:54] <AliceMeows> This is what they pay shills for
[18:51:29] <LordKalma> my parents decided at 60yo-ish to install fibre, and start using smarphones
[18:51:44] <LordKalma> do you have any idea how much time I have to take every time i visit them protecting them from the web?
[18:51:53] <rpav> "installed 1Gbps fiber; only use smartphone" D:
[18:52:09] <rpav> LordKalma: on a smartphone? probably not a lot?
[18:52:09] * AliceMeows has 500mbps and wont complain
[18:52:24] <LordKalma> rpav they also use computers and browsers
[18:52:24] <rpav> AliceMeows: i finally have 300 and i keep contemplating upgrading but it hasn't really been a huge issue yet
[18:52:34] <rpav> LordKalma: oh, well i dunno
[18:52:35] <LordKalma> I only have 100mbps symmetrical
[18:52:40] <LordKalma> cheapest package, idc
[18:52:45] <Haohmaru> LordKalma what's worse, getting a random tit or getting into some page with faux pills/medication
[18:52:48] <rpav> 100 is pretty effing good
[18:53:10] <rpav> i had 40-50 for awhile and that was pretty good, but now i pay $30/mo for 300
[18:53:11] <LordKalma> they have 200/100mbps down/up because they have a 5P package
[18:53:19] <rpav> (literally; no extra fees)
[18:53:21] <AliceMeows> Not once you watch tv and it all goes over the net
[18:53:44] <LordKalma> well, my fibre service doesnt use iptv, but my parents does
[18:53:53] <LordKalma> the box just has an ethernet cable
[18:53:54] <rpav> nah we did fine with TV on 50 .. you couldn't download anything or play PoE at the same time, but, 50 is a lot better than 5-10
[18:54:17] <rpav> which was a lot better than modem speeds
[18:54:20] <LordKalma> in fact, their service has both. the modem has a basic DVB output you can inject in the house network, and the main box uses ethernet
[18:54:40] <LordKalma> mine uses the DVB mux everywhere
[18:54:44] <PJBoy> AliceMeows, re css transitions https://puu.sh/IL0hT/cefa6ac481.mp4
[18:54:45] <LordKalma> at least doesnt eat bandwidth
[18:55:18] <PJBoy> see how I wanted to click that rotten tomatoes link?
[18:55:27] <AliceMeows> PJBoy: that doesn't seem to actually happen to me at all
[18:55:43] <rpav> PJBoy: err how is that advertising
[18:55:45] <LordKalma> rpav for 36e I have 120/100mbps, tv, and 3gb on my phone, and comms included as well
[18:56:05] <rpav> i mean, i guess if you really stretch the definition
[18:56:07] <PJBoy> the complaint was misclicking
[18:56:11] <PJBoy> I have adblock
[18:56:23] <rpav> that's nice, but that's not misclicking _on ads_ which is my point
[18:56:36] <rpav> they have _very_ stringent requirements about ad placement and avoiding misclicks
[18:56:46] <PJBoy> yeah I was just complaining about google and its conduciveness to misclicks
[18:56:47] <rpav> especially in apps etc
[18:56:55] <AliceMeows> I've blocked all of this garbage as well so I simply cannot misclick even if I wanted to
[18:57:26] <rpav> PJBoy: a legitimate but unrelated complaint; i could rant for a long time about what you posted being one of the top 3 sins of UI design
[18:57:51] <PJBoy> and you should
[18:57:53] <PJBoy> I hate that shit
[18:58:05] <rpav> though i forget what the 3rd was 🤔 it's sortof a tie between "changing the ui under your cursor" and "not alphabetizing" things for first place though
[18:58:14] <PJBoy> I can't adblock it either because all the google element IDs are randomly generated
[18:58:26] <rpav> you could adblock based on relative position i think
[18:58:35] <AliceMeows> adblock what?
[18:58:43] <rpav> if you wanted to block the suggestions list that pops in
[18:58:45] <PJBoy> that section that expands out
[18:58:57] <AliceMeows> I don't have that suggestions list at all, its completely blocked
[18:58:59] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[18:59:20] <PJBoy> the selector I get from the debugger is "#rso > div:nth-child(20) > div > div:nth-child(3)"
[18:59:45] <AliceMeows> I remember messing with it to block stuff and it worked fine
[18:59:51] <PJBoy> I could maybe block every 3rd child of a an `#rso > div > div`
[18:59:56] <rpav> you could also almost certainly search for "People also search for" and then find the parent-ish element
[19:00:07] <rpav> might require tampermonkey though
[19:00:08] <PJBoy> with javascript maybe
[19:00:10] <PJBoy> yeah
[19:00:23] <rpav> but it'd be cheaper too .. you can hook into "new element added" and check its text
[19:00:29] <rpav> i've done that with things
[19:01:06] <rpav> but yeah .. UI changing under the cursor is horrible, and so many things do it
[19:01:07] <Alipha> LordKalma: "so you cant be expressive about constness with forwarding refs" - - const T&& doesn't make sense because a forwarding ref is something you're going to "maybe move" and you cannot move a reference to const.
[19:01:13] <rpav> windows does this all over the place
[19:01:13] <PJBoy> the current thing I do to overcome that is open links in new tabs _>
[19:01:20] <Alipha> !give Haohmaru 0
[19:01:21] <nolyc> Haohmaru: Integer literal 0 is a null pointer constant. A null pointer constant can be converted to a null pointer value. A null pointer value has an implementation-defined bit pattern.
[19:02:38] <Alipha> xkoncek: `restrict` is for pointers of the same type. The compiler implicitly applies "restrict" functionality to pointers of different types all the time
[19:02:41] <LordKalma> Alipha so how do you ask for pointer @ value 0?
[19:02:48] <rpav> PJBoy: yeah that's been my pattern for a long time just because back-and-forth searching on a lot of things tends to fuck up .. e.g. if you click on a youtube video, then go back, your search results often change so you don't see other things that you might have wanted to see too
[19:02:56] <rpav> also just the general lag of going back and reloading
[19:03:02] <PJBoy> oh god that's true too
[19:03:15] <PJBoy> argh I hate it when that happens
[19:03:23] <PJBoy> but I also hate having loads of tabs open
[19:03:28] <LordKalma> not search results, but th home page definitely does
[19:03:35] <LordKalma> and YES I FUCKING HATE THAT
[19:03:38] <rpav> yeah i am more an "ephemeral tab" type browser
[19:03:53] <LordKalma> I too *hate* keeping tabs open
[19:03:56] <PJBoy> oh god even rpav is a browser now
[19:04:01] <LordKalma> im always closing what I think I dont need
[19:04:03] <rpav> :D
[19:04:05] <LordKalma> !grab PJBoy
[19:04:06] <nolyc> LordKalma: The operation succeeded.
[19:04:11] <rpav> or wati, that's not good
[19:06:01] <rpav> but, i think the kind of platform where you can compile some C++ to a tiny blob people can load and run sandboxed with GL access would be pretty neat
[19:06:01] <Haohmaru> Alipha okay, i mean, you often use nullptr to indicate an uninitialized, or invalid pointer, or to clean a pointer, or to signal "array not yet allocated" and similar stuff, but on bare-metal, address 0 can be a legit place where you can have an array
[19:06:38] <LordKalma> your mom is more open to exploits than a browser running flash
[19:06:40] *** Joins: jokoon (~eio@2a01:e0a:542:e160:98a8:ee75:ccf2:4692)
[19:07:02] <AliceMeows> Considering that flash is already dead then you're most likely correct
[19:07:07] <jokoon> it would great is there would a graphviz tools to make a map of function calls
[19:07:07] <rpav> or for a lot of things, write C++ API, and the UI is _entirely_ separate from this but can call it directly ;P
[19:07:32] <AliceMeows> Its not that difficult to isolate UI from your logic
[19:07:45] <LordKalma> rpav i'd be using one of those C# libraries for UI if it was easier to have it all on a single build system
[19:07:50] <Alipha> LordKalma: int *p; std::memset(p, 0, sizeof p); // perhaps
[19:08:06] <rpav> jokoon: pretty sure llvm/clang has a thing or there is a thing built on those
[19:08:08] <LordKalma> building C++ and C# on the same codebase is a pain, unless .sln
[19:08:40] <rpav> LordKalma: i think that's another "consistency" issue that would be nice if everyone agreed, but likely won't
[19:08:55] <rpav> LordKalma: though imagine if you could talk to C++ from C# without needing like ABI calls
[19:09:13] <AliceMeows> No one isn't ever going to agree on ABI
[19:09:17] <AliceMeows> is*
[19:09:18] <rpav> though for some things that means a more optimal RPC, but
[19:09:30] <rpav> AliceMeows: well we already do
[19:09:33] <rpav> sortof
[19:09:44] <LordKalma> well, SWIG literally generates a C wrapper and then rebuilds the class on C#
[19:09:51] <Alipha> Haohmaru: yeah, in which case, `int *p = 0;` may not actually be pointing to address 0. std::memset(p, 0, sizeof p);` would be my best suggestion
[19:09:52] <LordKalma> its hilarious that you start with a class, end with a class
[19:09:56] <LordKalma> but need to go C in the middle
[19:10:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:10:48] <PJBoy> `int* p = +0;` I think
[19:11:28] <PJBoy> { f(0); } void f(nullptr_t) { BARK; }
[19:11:29] <Alipha> { int* p = +0; }
[19:11:29] <geordi> f(nullptr_t)
[19:11:32] <PJBoy> { f(+0); } void f(nullptr_t) { BARK; }
[19:11:40] <geordi> error: invalid conversion from 'int' to 'int*'
[19:11:40] <geordi> error: cannot convert 'int' to 'nullptr_t' {aka 'nullptr_t'}
[19:11:43] <PJBoy> see
[19:12:02] <PJBoy> granted it needs a cast
[19:12:39] <PJBoy> { auto p = reinterpret_cast<int*>(+0); }
[19:12:40] <geordi>  
[19:12:57] <PJBoy> anyways that only matters for memory mapped registers
[19:13:09] <PJBoy> otherwise you just take the address of something and don't care
[19:13:27] <PJBoy> then solve all your nullptr checking bugs down the line
[19:14:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:15:45] <cq-work> I hate swig so much.
[19:15:58] <rpav> yeah that's why i wrote https://github.com/rpav/c2ffi
[19:16:21] <rpav> though i don't have a wrapper generator for C++ .. someone was working on one but not usre how far they got
[19:16:40] <rpav> in principle it's not too tough if you have reasonable expectations
[19:17:05] <rpav> (also i really need to do some maintenance on c2ffi ;/ been so busy)
[19:17:25] <AliceMeows> Aren't we all?
[19:17:36] <rpav> doubtless
[19:17:52] <rpav> i have more interesting things to work on and less time to do so, though generating wrappery things will be important to that at some point
[19:18:41] <LordKalma> there's boost.python
[19:18:52] <LordKalma> and which does have a standalone thing
[19:19:12] *** Quits: jsbach (~jsbach@2a01:c22:35b1:f900:23be:e379:c818:219f) (Remote host closed the connection)
[19:19:54] <LordKalma> https://github.com/pybind/pybind11
[19:20:28] <rpav> a lot of languages have specific things that like, parse or call clang or swig or something .. it just seems dumb to reinvent that every time when you could export the data once from clang and reuse it
[19:20:44] <rpav> like lua has a thing which understands structs and prototypes
[19:20:49] *** Quits: jokoon (~eio@2a01:e0a:542:e160:98a8:ee75:ccf2:4692) (Quit: Leaving)
[19:20:58] <AliceMeows> What is that called?
[19:21:52] *** Joins: jsbach (~jsbach@2a01:c22:35b1:f900:45c9:a958:57c7:c5b2)
[19:21:54] <Haohmaru> PJBoy why does it only matter for memory mapped regs?
[19:22:05] <PJBoy> 'cause otherwise you just grab the address of an object
[19:22:13] <rpav> https://luajit.org/ext_ffi.html but there's a port which is https://github.com/jmckaskill/luaffi
[19:22:17] <PJBoy> memory mapped regs don't have objects to grab the address of
[19:22:28] <Haohmaru> uh
[19:22:33] <Haohmaru> what
[19:22:40] <AliceMeows> luajit's ffi is not the same thing as actual lua interfacing
[19:22:53] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 256 seconds)
[19:23:00] <rpav> "actual lua interfacing" does not seem like a meaningful phrase
[19:23:04] <PJBoy> like if I want the address of an object that exists somewhere, I just write `T* p = &obj;`
[19:23:06] <Haohmaru> okay, i guess my coffee levels are too low for this
[19:23:13] <rpav> and FFI is preferable over writing extensions in any case
[19:23:22] <AliceMeows> Well the 'official' solution so to speak does not provide any tooling for this, you have to manually write it all yourself
[19:23:27] <LordKalma> I don't know a language that doesn't have a cffi
[19:23:38] <PJBoy> but if I want to make some `volatile T* p = 0;`, that's not something I can do by &obj for any obj
[19:24:03] <LordKalma> SWIG could be great if it had like actual money
[19:24:04] <Haohmaru> PJBoy so you think memory mapped can't have "obj" ?!
[19:24:22] <rpav> PJBoy: an implementation could provide an "object" which you can get the proper address from surely
[19:24:42] <PJBoy> theoretically maybe
[19:24:53] <rpav> where it handwaves and if you say `auto *ptr = &reg_r0;` or something you get the right thing
[19:24:56] <PJBoy> I haven't seen it though
[19:25:01] <AliceMeows> Haohmaru: mapped memory can have "obj"
[19:25:11] <Haohmaru> in my xmega bootloader i precisely put a struct at address 0
[19:25:26] <Haohmaru> the same way i do it for memory mapped
[19:25:43] <PJBoy> a struct eh?
[19:25:47] <rpav> i don't do anything which involves mmrs; does x86/x86_64 even support this
[19:25:52] <PJBoy> with struct memory layout not being guaranteed
[19:26:00] <PJBoy> I don't think that's a good way to go
[19:26:12] <rpav> struct memory layout is definitely guaranteed for an implementation
[19:26:17] <AliceMeows> You could manually construct it but it'll be ugly
[19:26:26] <PJBoy> but then you're locked down
[19:26:39] <rpav> dude you're dealing with memory mapped registers; that boat sailed
[19:26:54] <Haohmaru> PJBoy yes, a struct which is intended to be at an uninitialized memory (intentionally)
[19:27:02] <PJBoy> even changing from one ARM compiler to another could change your struct
[19:27:05] <Haohmaru> i know this is on the edge of UB but it's intentional
[19:27:13] <LordKalma> #pragma packed
[19:27:25] <Haohmaru> i use it for "communicating" between the bootloader and the firmware
[19:27:25] <LordKalma> theres a whole 1h cppcon talk about memory mapped objects
[19:27:33] <LordKalma> the conclusions is that everything sucks
[19:27:34] <LordKalma> as usual
[19:27:36] <Haohmaru> LordKalma xmega is 8bit
[19:27:42] <Haohmaru> no problems with padding
[19:27:46] <rpav> Haohmaru: how do you "place" a struct at an address
[19:27:57] <Haohmaru> gcc attribute address
[19:28:10] <Haohmaru> lemme see
[19:28:11] <rpav> ah k
[19:28:21] <rpav> pretty sure you had some problem related to this a bit back
[19:28:37] <rpav> or something that the standard should account for etc
[19:28:38] <LordKalma> reinterpret_cast<myobj*>(0xABBA); // heheh
[19:28:52] <LordKalma> iirc ARM compilers have an extension that provides the operator @
[19:29:01] <rpav> LordKalma: you could, but then you'd have the "problem" PJBoy was talking about
[19:29:03] <LordKalma> which you can give an address to
[19:29:23] <rpav> i.e. you have to do a thing to get a pointer value because there's no object
[19:29:30] <LordKalma> rpav when dealing with embedded, violating lifetime is the least of everybody's problem
[19:29:37] <rpav> LordKalma: oh well sure
[19:29:46] <PJBoy> nah I'm in support of casting addresses manually
[19:29:57] <PJBoy> I think that's the most robust method
[19:30:09] <PJBoy> relying on struct layout, that's ehhhh
[19:30:17] <PJBoy> maybe with enough static_asserts
[19:30:23] <rpav> relying on struct layout is no worse than relying on some address representing some register :p
[19:30:35] <AliceMeows> You're probably right
[19:30:38] <PJBoy> nah the address is the ground truth
[19:30:45] <rpav> like, if it changes you likely have bigger problems, like the register not existing
[19:30:54] <PJBoy> making sure your struct is shaped correctly is a hassle
[19:31:00] <rpav> pfft
[19:31:04] <PJBoy> and a maintenance burden
[19:31:15] <PJBoy> and potentially stops you from changing compiler
[19:31:55] <Haohmaru> blah_t BLAH __attribute__ ((address (0x0)));
[19:32:04] <AliceMeows> Then write it in a way that constructs it manually during runtime so that a compiler couldn't possible break
[19:32:36] <LordKalma> on embedded
[19:32:38] <LordKalma> suuuuuuuuuuuuuureeeeeeeeeeeeee
[19:32:43] <Haohmaru> LordKalma which arm compilers give you "@" ?!
[19:33:01] <PJBoy> ???
[19:33:12] <AliceMeows> LordKalma: I see no reason why it wouldn't be possible on embedded
[19:33:14] <PJBoy> I see no @s
[19:33:38] <Haohmaru> i know silly PIC compilers have that
[19:35:16] <LordKalma> sorry, I might be misremembering the talk
[19:35:17] <LordKalma> https://youtu.be/uwzuAGtAEFk?t=821
[19:35:25] <LordKalma> it just says "some compilers"
[19:35:45] <Haohmaru> because in my silly svd parser, i went with using inline ASM x_x
[19:39:28] <Haohmaru> i see something about attribute "at" in keil.com but i don't think that's gcc
[19:42:26] <Haohmaru> yeah, not in gcc
[19:43:48] <Haohmaru> i think maybe PIC's silly compilers and also SDCC had the "@" thing
[19:47:09] *** Quits: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) (Quit: Leaving.)
[19:56:13] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[19:57:28] *** Joins: filename (~kilitary@kilitary.xyz)
[19:57:35] *** Parts: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) ()
[20:00:53] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Quit: Leaving)
[20:01:58] *** Joins: xkuru (~xkuru@user/xkuru)
[20:04:23] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[20:05:02] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Ping timeout: 250 seconds)
[20:07:17] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[20:10:09] *** Joins: mintograde (~mintograd@47.201.5.61)
[20:10:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:11:35] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Read error: Connection reset by peer)
[20:14:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:15:39] *** Joins: Tokamak (~Tokamak@172.58.188.134)
[20:21:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:21:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:26:04] *** Joins: HeTo (~henkka@130.230.72.140)
[20:26:16] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Ping timeout: 250 seconds)
[20:29:41] *** Joins: Tokamak_ (~Tokamak@107.116.82.98)
[20:35:09] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:42:00] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[20:44:49] * Haohmaru inverts nolyc horizontally
[20:44:50] <Haohmaru> !rq
[20:44:50] <nolyc> Haohmaru: <barix> i know what it does and that's enough for me to never touch it
[20:45:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:3d23:94e0:3c0f:8df3) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:45:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86)
[20:54:16] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:57:37] *** Joins: txtsd (~txtsd@user/txtsd)
[21:01:27] *** Joins: fldme (~fldme@178.49.152.42)
[21:02:07] <fldme> i had a feeling that c++ prefers copying of objects instead of pointer operations like c - am I correct?
[21:02:19] <rpav> no
[21:02:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:03:23] <fldme> for example c++ loves references, while c doesn't even has them
[21:03:25] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:03:43] <rpav> c++ doesn't really _prefer_ any given thing; it depends on what you're doing a lot .. you have tools for moving, e.g. value passing with minimal copy .. but also managing pointers and ownership and things
[21:04:02] <rpav> references are just syntax sugar
[21:04:16] <fldme> using stack structures is a bad practice in c , while a norm in c++ etc
[21:04:35] <rpav> it's fairly common in C
[21:04:36] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:05:20] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:05:56] <LordKalma> fldme every language has what we call "idioms"
[21:06:00] <rpav> if you're only used to "newer" C apis, which have a lot of `Foo foo = make_foo();` you may get that impression, but it's not really the case .. plenty of `struct foo; load_foo(&foo);`
[21:06:09] <LordKalma> C++ idioms are very much focused on thing like "RAII" (google it)
[21:06:17] <LordKalma> wich stimulate value-semantics, indeed
[21:06:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:07:32] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[21:07:39] *** Joins: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[21:07:39] <rpav> yeah that is really the way of it .. you don't write things in C++ like you would write them in C, so generalizations don't really make sense
[21:07:52] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79) (Remote host closed the connection)
[21:08:09] <rpav> also both languages have many eras and idioms have changed over time, also making comparison hard
[21:08:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79)
[21:08:55] <LordKalma> indeed
[21:09:00] <LordKalma> but yeah, point is
[21:09:09] <LordKalma> C++ is not C, regardless of how similar the syntax is
[21:09:13] <LordKalma> and both have their idioms
[21:09:15] <LordKalma> look for them
[21:10:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[21:10:37] *** Quits: filename (~kilitary@kilitary.xyz) (Ping timeout: 240 seconds)
[21:11:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:13:36] *** Quits: letto (~letto@188.26.152.131) (Quit: Konversation terminated!)
[21:14:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:14:57] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[21:15:52] *** Joins: letto (~letto@188.26.152.131)
[21:17:15] *** Joins: paul424 (~tom@ip-5-172-234-213.multi.internet.cyfrowypolsat.pl)
[21:20:06] *** Joins: bobb_ (~bobb_@dslb-088-066-159-156.088.066.pools.vodafone-ip.de)
[21:23:52] *** Quits: Tokamak_ (~Tokamak@107.116.82.98) (Ping timeout: 256 seconds)
[21:28:07] *** Joins: Tokamak (~Tokamak@107.116.82.98)
[21:29:12] *** Joins: magla (~gelignite@d5360aa7.access.ecotel.net)
[21:29:22] <Alipha> fldme: you should definitely prefer working with objects in c++ instead of pointers. but "prefers copying of objects" is perhaps inaccurate, as c++ has move semantics and so you end up doing a lot of moving of objects instead of copying them
[21:29:29] *** Joins: Tokamak_ (~Tokamak@172.58.188.134)
[21:30:43] <Alipha> though also you work with objects such as std::vector and std::unique_ptr which then dynamically allocate data themselves and then free that data automatically themselves (RAII)
[21:31:00] *** Quits: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) (Remote host closed the connection)
[21:32:56] *** Quits: Tokamak (~Tokamak@107.116.82.98) (Ping timeout: 256 seconds)
[21:37:31] *** sprout is now known as egelbot
[21:38:09] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:41:47] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[21:42:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:03] *** ChanServ sets mode: +v npaperbot
[21:43:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[21:44:57] *** Parts: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) ()
[21:45:07] *** egelbot is now known as sprout
[21:48:14] *** Quits: Tokamak_ (~Tokamak@172.58.188.134) (Ping timeout: 256 seconds)
[21:49:17] *** Joins: filename (~kilitary@kilitary.xyz)
[21:51:29] *** Joins: Tokamak (~Tokamak@166.205.152.113)
[21:54:53] *** sprout is now known as egelbot
[21:55:52] *** egelbot is now known as sprout
[21:56:12] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[21:57:41] *** Joins: proller (~p@80.240.216.69)
[21:59:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:00:25] *** Quits: bobb_ (~bobb_@dslb-088-066-159-156.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[22:02:01] *** Joins: Raziel (~Raziel@user/raziel)
[22:11:37] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:11:47] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[22:12:56] *** Joins: pulse (~pulse@user/pulse)
[22:14:01] *** Quits: fldme (~fldme@178.49.152.42) (Ping timeout: 256 seconds)
[22:15:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[22:20:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[22:26:15] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:26:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86)
[22:30:02] *** Joins: Tokamak_ (~Tokamak@166.205.152.113)
[22:32:17] *** Quits: Tokamak (~Tokamak@166.205.152.113) (Ping timeout: 240 seconds)
[22:33:44] *** Joins: noarb (~noarb@user/noarb)
[22:37:04] *** immibis_ is now known as immibis
[22:46:53] *** Quits: MatSharrow (~matthew@56.93.9.51.dyn.plus.net) (Ping timeout: 256 seconds)
[22:55:26] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:55:46] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 245 seconds)
[22:59:35] *** Joins: Simplar (~Simplar@188.163.93.241)
[23:00:44] *** Joins: bobb_ (~bobb_@dslb-088-066-159-156.088.066.pools.vodafone-ip.de)
[23:12:09] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:14:42] *** Joins: plastico (~plastico@neomutt/plastico)
[23:15:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[23:17:28] *** Joins: rajkohaxor (~rajkosto@93-87-207-233.dynamic.isp.telekom.rs)
[23:19:16] *** Quits: rajkosto (~rajkosto@178.220.245.51) (Ping timeout: 272 seconds)
[23:22:57] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 240 seconds)
[23:30:08] *** Joins: Raziel (~Raziel@user/raziel)
[23:32:22] <LordKalma> do you know where I can help about email on linux?
[23:32:31] <LordKalma> my server isn't sending email and I dunno why
[23:34:43] <rpav> probably a combination of "use postfix" and "seek help on postfix forums" though there are a number of security things these days i don't even know .. i always hated smtp
[23:35:23] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
[23:35:27] <rpav> but generally your reverse DNS has to be right and SSL delivery probably ought to be a necessity? i don't know the details
[23:41:11] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 245 seconds)
[23:42:43] *** Quits: LordKalma (~LordKalma@server.portaldoradioamador.pt) (Quit: The Lounge - https://thelounge.chat)
[23:42:46] *** Joins: Terminus (~null@user/terminus)
[23:43:29] *** Joins: LordKalma (~LordKalma@server.portaldoradioamador.pt)
[23:47:36] <MaddHatter> "isn't sending" is a different problem than "isn't being received", so you'll need to first sort out which it is
[23:48:57] <MaddHatter> postfix (and exim) seem to be falling out of favor to opensmtpd afaict, if you're in the market to replace your mail server
[23:49:07] <LordKalma> lots of SASL LOGIN authentication failed: authentication failure
[23:49:08] <LordKalma> interesting
[23:52:52] <LordKalma> ah nevermind
[23:52:57] <LordKalma> that's an IP from ukraine
[23:52:58] <LordKalma> fucking bots
[23:53:11] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[23:55:08] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:57:04] <rpav> MaddHatter: oh is that the latest thing
[23:57:22] <LordKalma> MaddHatter I use virtualmin.. this shit is supposed to work out of the box
[23:57:28] <rpav> as long as the config doesn't look like sendmail ;P
