[00:05:19] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[00:05:19] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[00:05:39] *** Joins: specbot (~specbot@common-lisp.net)
[00:06:13] *** Joins: galex-713 (~quassel@galex-713.eu)
[00:06:16] *** Joins: minion (~minion@common-lisp.net)
[00:09:36] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[00:10:46] *** Joins: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:10:52] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[00:11:40] *** Joins: wacki (~wacki@87.123.132.171)
[00:26:22] *** Quits: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:27:22] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:27:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[00:29:21] *** Joins: inky (~inky@5.77.199.56)
[00:32:04] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[00:32:12] *** Quits: inky_ (~inky@141.136.88.65) (Ping timeout: 240 seconds)
[00:32:35] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[00:32:39] *** Joins: letto (~letto@188.27.114.171)
[00:42:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[00:44:14] *** Quits: alejandrozf (~user@190.246.255.180) (Remote host closed the connection)
[00:44:22] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 260 seconds)
[00:45:26] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:42] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[00:45:51] *** Joins: lisp123 (~lisp123@143.238.171.43)
[00:51:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:53:40] *** Joins: inky_ (~inky@46.36.114.138)
[00:55:25] *** Quits: puke (~puke@user/puke) (Quit: puke)
[00:56:34] *** Quits: inky (~inky@5.77.199.56) (Ping timeout: 246 seconds)
[00:57:19] *** Quits: il (~il@user/f/x-7830992) (Quit: tc)
[01:02:01] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:05:16] *** Quits: parjanya (~esb@2804:14c:1ad:9351:f031:6833:afb4:4712) (Remote host closed the connection)
[01:05:49] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 240 seconds)
[01:06:32] *** Joins: trumae (~trumae@2804:18:4823:8f75:1:0:f7ff:8e4f)
[01:06:33] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[01:10:39] *** Quits: trumae (~trumae@2804:18:4823:8f75:1:0:f7ff:8e4f) (Ping timeout: 250 seconds)
[01:10:56] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[01:13:01] *** Quits: wacki (~wacki@87.123.132.171) (Quit: Leaving.)
[01:13:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:14:02] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[01:14:53] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[01:18:28] *** Quits: reedrichards (~f@2607:f598:bbda:220:2ffb:a71c:10b4:af9c) (Remote host closed the connection)
[01:19:41] *** Joins: f^ (~il@user/f/x-7830992)
[01:22:51] *** Joins: MrFantastik (~f@2607:f598:bbda:220:3060:781a:20de:246b)
[01:29:13] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:29:59] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[01:30:02] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[01:30:18] *** Joins: specbot (~specbot@common-lisp.net)
[01:30:35] *** Quits: ronnie (~ronnie@200.153.104.44) (Ping timeout: 256 seconds)
[01:30:56] *** Joins: minion (~minion@common-lisp.net)
[01:31:20] *** Joins: ronnie (~ronnie@2804:389:e010:5a7e:0:1:d2c2:2401)
[01:32:11] *** Quits: Lumine (lumi@user/luminousnine) (Quit: sleep)
[01:37:30] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[01:38:49] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 250 seconds)
[01:39:31] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[01:44:05] *** Quits: admich (~user@ip-159-80.sn-213-198.clouditalia.com) (Remote host closed the connection)
[01:44:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:46:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:52:22] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[01:52:29] *** Joins: trumae (~trumae@45.170.74.100)
[01:57:42] <jfb4> jackdaniel: thank you for the link! interesting talks 
[01:58:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:58:39] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[01:59:34] <theseb> do you agree that at least a good sized subset of python can be converted easily into scheme/lisp?  (Someone once said python = lisp w/o the parens)
[01:59:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[02:00:06] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5cd:5a00:d3fe:883)
[02:01:47] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:b50a:f612:ed28:f1e3)
[02:02:37] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 240 seconds)
[02:05:03] *** Joins: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[02:05:29] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5cd:5a00:d3fe:883) (Ping timeout: 256 seconds)
[02:05:29] *** Quits: ronnie (~ronnie@2804:389:e010:5a7e:0:1:d2c2:2401) (Ping timeout: 256 seconds)
[02:05:58] *** Joins: ronnie (~ronnie@200.153.15.90)
[02:06:35] <moon-child> theseb: I do not know python well.  But: if I am not mistaken, python has a heavy reliance on 'generators'.  Generators represent two problems.  First, they are coroutines, which lisp does not have.  Second, they are used to implement lazy iteration, which is not idiomatic
[02:06:49] <theseb> ah
[02:07:42] <moon-child> (scheme has call/cc, which can be used to implement coroutines)
[02:07:51] <moon-child> additionally, there is an extant compiler from python to cl
[02:08:32] <theseb> moon-child: that's right....the python to cl compiler is like an existence proof of what i'm asking
[02:09:14] <moon-child> what do you mean by 'existence proof'?  Lisp is turing complete, and python is turing complete, so of course it is possible to compile one to the other
[02:10:55] <theseb> moon-child: true
[02:11:11] <theseb> moon-child: hopefully it means it isn't an insane amount of work
[02:11:33] <theseb> moon-child: that they are loosely speaking "the same general shape of language"
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:29] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:15:04] *** Joins: suss (~user@user/suss)
[02:15:21] *** Quits: MrFantastik (~f@2607:f598:bbda:220:3060:781a:20de:246b) (Remote host closed the connection)
[02:15:43] *** Joins: MrFantastik (~f@176.108.141.162)
[02:17:26] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[02:17:58] <pjb> theseb: tjat
[02:18:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:18:14] <pjb> theseb: that would be quite difficult, because python has statements, and lisp has expressions.
[02:18:23] <pjb> Someone once was an idiot.
[02:18:58] <moon-child> pjb: I don't see the significance of that
[02:19:09] <moon-child> why is it difficult to compile a statement-oriented language to an expression-oriented one?
[02:19:52] <pjb> It was not asked to compile, but to convert, assumedly to a maintainable source form.
[02:20:05] <moon-child> sure.  Still
[02:20:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:20:10] <pjb> moon-child: but you're right, it is easier to go statements->expressions than expressions->statement.
[02:20:49] <moon-child> you may end up with less idiomatic code (setf where let would be more appropriate), but I don't think it would be unmaintainable
[02:21:03] <moon-child> pjb: the other way around doesn't seem particularly difficult either
[02:21:18] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:21:27] <pjb> no, it just feels like going to high level language to assembler.
[02:21:37] <moon-child> you essentially need to turn (f (progn x y)) into (progn x (f y)), modulo scoping
[02:23:05] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:99c6:8d11:6785:3de3)
[02:24:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[02:26:50] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[02:44:12] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[02:45:42] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:b50a:f612:ed28:f1e3) (Ping timeout: 260 seconds)
[02:49:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[02:50:52] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[02:54:31] *** Quits: trumae (~trumae@45.170.74.100) (Ping timeout: 246 seconds)
[02:56:43] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[02:58:39] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[03:04:25] *** Quits: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 256 seconds)
[03:09:36] *** Joins: Posterdati (~posterdat@user/Posterdati)
[03:14:53] *** f^ is now known as il
[03:14:58] *** Quits: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net) (Remote host closed the connection)
[03:18:12] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[03:19:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:21:38] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[03:23:10] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[03:24:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:24:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:26:57] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[03:29:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[03:44:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[03:48:19] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:49:19] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:56:09] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[03:57:17] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[04:05:22] *** Quits: msk (~Thunderbi@89.205.124.39) (Quit: msk)
[04:05:57] *** Joins: msk (~Thunderbi@89.205.124.39)
[04:07:49] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:99c6:8d11:6785:3de3) (Remote host closed the connection)
[04:07:53] <masinter> stack machine instructions are better than assembler
[04:09:51] <moon-child> you will be slow without registers
[04:10:29] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:15:02] <masinter> premature optimization
[04:16:57] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 256 seconds)
[04:17:54] <moon-child> not when one is in the business of making language implementations
[04:18:43] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[04:21:44] <masinter> it seemed like modern pipeline architecture you could treat the stack as if it was nearly all register
[04:22:10] <masinter> later, off to dinner
[04:23:21] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[04:24:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:24:24] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[04:26:03] <moon-child> contrariwise, ooo relies on building dependency graphs of _register_ ops
[04:26:05] <moon-child> enjoy your dinner
[04:33:25] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[04:38:36] *** Joins: occ (~occ@user/occ)
[04:42:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[04:47:24] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 240 seconds)
[04:47:38] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[04:48:41] *** Quits: joev (~joev@user/joev) (Ping timeout: 245 seconds)
[04:50:01] *** Joins: joev (~joev@user/joev)
[04:50:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[04:50:36] *** Joins: puke (~puke@user/puke)
[04:53:31] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 246 seconds)
[04:53:52] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[04:54:21] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[04:55:19] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[04:56:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:57:26] *** Joins: dre (~dre@2001:8003:c932:c301:55ad:378d:2c99:f745)
[05:01:34] *** Quits: joev (~joev@user/joev) (Ping timeout: 272 seconds)
[05:02:20] *** Joins: joev (~joev@user/joev)
[05:02:20] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[05:04:39] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[05:06:20] *** Joins: xiongxin (~Thunderbi@117.136.39.215)
[05:08:41] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 245 seconds)
[05:13:03] *** Joins: galex-713 (~quassel@galex-713.eu)
[05:21:25] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:15c6:4ddf:5787:908a:a748)
[05:24:16] *** Quits: xiongxin (~Thunderbi@117.136.39.215) (Read error: Connection reset by peer)
[05:24:16] *** xiongxin1 is now known as xiongxin
[05:31:47] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:1ff2:e03a:2456:5ccc:3d7b)
[05:35:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:15c6:4ddf:5787:908a:a748) (Ping timeout: 256 seconds)
[05:36:08] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:1ff2:e03a:2456:5ccc:3d7b) (Ping timeout: 252 seconds)
[05:36:20] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4.1)
[05:37:14] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:2469:bba4:9099:ef70:f70f)
[05:37:26] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 260 seconds)
[05:37:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:37:51] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[05:38:18] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[05:43:06] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[05:43:25] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Client Quit)
[05:53:02] <jcowan> I thought Interlisp *was* a register machine
[05:54:33] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[05:58:40] *** Joins: trumae (~trumae@45.170.74.100)
[06:04:55] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[06:07:18] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:16:19] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[06:17:17] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:2469:bba4:9099:ef70:f70f) (Ping timeout: 260 seconds)
[06:20:29] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:23:54] *** Joins: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[06:26:19] *** Quits: Inline__ (~Inline@p200300cd470f690069ffd8a9e8710708.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:26:54] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:35:03] *** Quits: puke (~puke@user/puke) (Quit: puke)
[06:36:31] *** Joins: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[06:38:47] *** Joins: xiongxin (~Thunderbi@117.136.39.221)
[06:39:08] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:40:40] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[06:41:02] <moon-child> 'was' as in, the late interlisp register machine?
[06:41:12] <moon-child> at any rate, I am all but certain it is a stack machine now
[06:43:06] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[06:53:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[06:55:48] *** Quits: trumae (~trumae@45.170.74.100) (Ping timeout: 260 seconds)
[06:58:06] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:04:08] *** Quits: trumae_ (~trumae@45.170.74.100) (Read error: Connection reset by peer)
[07:06:00] *** Quits: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[07:06:19] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:a39:e6f5:9d58:2466:b9f0)
[07:06:53] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[07:09:16] *** Quits: xiongxin (~Thunderbi@117.136.39.221) (Ping timeout: 260 seconds)
[07:09:16] *** xiongxin1 is now known as xiongxin
[07:10:10] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:441:afa9:b5e8:ac51:4870)
[07:13:53] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:a39:e6f5:9d58:2466:b9f0) (Ping timeout: 260 seconds)
[07:14:35] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:441:afa9:b5e8:ac51:4870) (Ping timeout: 252 seconds)
[07:15:15] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:20f2:ac8a:be5c:57a6:5a94)
[07:16:16] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 260 seconds)
[07:37:48] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[07:39:04] *** Joins: xiongxin1 (~Thunderbi@117.136.39.219)
[07:42:39] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:20f2:ac8a:be5c:57a6:5a94) (Ping timeout: 256 seconds)
[07:42:40] *** xiongxin1 is now known as xiongxin
[07:43:18] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[07:46:35] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[07:47:46] *** Joins: occ (~occ@user/occ)
[07:47:55] *** Joins: xiongxin1 (~Thunderbi@117.136.40.173)
[07:51:43] *** Quits: xiongxin (~Thunderbi@117.136.39.219) (Ping timeout: 260 seconds)
[07:52:34] *** Quits: xiongxin1 (~Thunderbi@117.136.40.173) (Ping timeout: 272 seconds)
[07:52:39] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:3065:2e43:1e0a:ae80:c245)
[07:53:08] *** Joins: xiongxin1 (~Thunderbi@117.136.40.178)
[07:55:57] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[07:55:58] *** Joins: puke (~puke@user/puke)
[07:57:03] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3065:2e43:1e0a:ae80:c245) (Ping timeout: 260 seconds)
[07:58:33] *** Joins: aeka (~aeka@user/hiruji)
[08:02:04] *** Quits: xiongxin1 (~Thunderbi@117.136.40.178) (Ping timeout: 272 seconds)
[08:16:00] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[08:21:54] *** Joins: occ (~occ@user/occ)
[08:24:28] *** Joins: livoreno (~livoreno@user/notzmv)
[08:24:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:25:06] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:25:11] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:26:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:27:22] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[08:28:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:28:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:29:59] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:30:24] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:30:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:32:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:32:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:33:10] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[08:33:59] *** Joins: notzmv (~zmv@user/notzmv)
[08:38:10] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:39:13] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:39:19] *** Quits: ronnie (~ronnie@200.153.15.90) (Ping timeout: 256 seconds)
[08:44:18] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:01:29] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 250 seconds)
[09:03:13] *** Joins: jeosol (~jeosol@user/jeosol)
[09:20:25] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[09:21:02] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Quit: The Lounge - https://thelounge.chat)
[09:22:42] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[09:44:41] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[09:49:44] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:50:22] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[09:51:36] *** Joins: occ (~occ@user/occ)
[09:55:24] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Quit: ZNC - https://znc.in)
[10:08:02] *** Quits: seabre (~seabre@user/seabre) (Remote host closed the connection)
[10:09:11] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[10:09:26] *** Joins: seabre (~seabre@user/seabre)
[10:09:55] *** Quits: occ (~occ@user/occ) (Ping timeout: 246 seconds)
[10:11:13] *** Joins: occ (~occ@user/occ)
[10:11:54] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[10:18:22] *** Joins: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[10:22:38] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[10:23:44] *** Quits: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:34:47] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 252 seconds)
[10:37:52] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Ping timeout: 272 seconds)
[10:39:46] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[10:45:35] *** Joins: occ (~occ@user/occ)
[10:46:24] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:49:08] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 260 seconds)
[10:49:32] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[10:57:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[11:03:43] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11f4:18d8:b8f2:424f:eeae:6855)
[11:05:36] *** Quits: larsen` (~user@2a02:2454:261:5200:691c:3bb4:8058:d6fb) (Ping timeout: 252 seconds)
[11:08:43] *** Quits: occ (~occ@user/occ) (Ping timeout: 246 seconds)
[11:09:31] *** Joins: occ (~occ@user/occ)
[11:09:35] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[11:38:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:49:15] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:54:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[11:59:52] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:01:19] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[12:02:34] *** Joins: shka (~herr@109.231.3.55)
[12:03:22] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[12:03:48] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[12:35:13] *** Joins: inky (~inky@178.78.143.224)
[12:36:28] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[12:37:16] *** Quits: inky_ (~inky@46.36.114.138) (Ping timeout: 246 seconds)
[12:39:31] *** Joins: Lumine (lumi@user/luminousnine)
[12:44:04] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[13:24:16] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:3108:281:eecd:3097:6246)
[13:47:59] *** Quits: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (Remote host closed the connection)
[13:53:51] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[13:56:21] *** Joins: agumonkey (~user@88.163.231.79)
[13:58:59] *** Quits: puke (~puke@user/puke) (Ping timeout: 260 seconds)
[14:07:54] *** Joins: puke (~puke@user/puke)
[14:09:55] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[14:15:49] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:16:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:21:13] *** Quits: dre (~dre@2001:8003:c932:c301:55ad:378d:2c99:f745) (Quit: Leaving)
[14:21:23] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:21:37] *** Joins: wacki (~wacki@87.123.136.47)
[14:24:13] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[14:24:36] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3108:281:eecd:3097:6246) (Ping timeout: 240 seconds)
[14:26:28] *** Quits: inky (~inky@178.78.143.224) (Ping timeout: 246 seconds)
[14:27:52] *** Joins: inky (~inky@31.7.162.99)
[14:29:41] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[14:32:04] *** Quits: inky (~inky@31.7.162.99) (Ping timeout: 246 seconds)
[14:32:54] *** Joins: inky (~inky@31.7.162.99)
[14:40:20] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:56:31] *** Joins: occ (~occ@user/occ)
[14:57:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:57:38] *** Joins: gproto23_ (~gproto23@user/gproto23)
[15:04:38] *** Quits: inky (~inky@31.7.162.99) (Ping timeout: 260 seconds)
[15:04:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[15:06:19] *** Joins: aeth (~aeth@user/aeth)
[15:12:37] *** Joins: pjb (~pjb@user/pjb)
[15:15:05] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:16:20] *** Joins: kevingal (~quassel@149.157.107.109)
[15:18:21] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:20:57] *** Quits: kevingal (~quassel@149.157.107.109) (Ping timeout: 260 seconds)
[15:21:26] *** Joins: kevingal (~quassel@2001:770:c0:401:c44c:2364:15bc:7df8)
[15:26:17] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11f4:18d8:b8f2:424f:eeae:6855) (Ping timeout: 250 seconds)
[15:26:20] *** Joins: phantomics (~phantomic@71-218-229-123.hlrn.qwest.net)
[15:45:17] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[15:45:48] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:4df:bfcf:ac49:3089:d900)
[15:49:39] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Read error: Connection reset by peer)
[15:50:19] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:4df:bfcf:ac49:3089:d900) (Ping timeout: 250 seconds)
[15:51:42] *** Quits: agumonkey (~user@88.163.231.79) (Remote host closed the connection)
[15:53:47] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Ping timeout: 260 seconds)
[15:54:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:54:44] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:57:42] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:57:57] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:134a:aa8c:6c91:412d:d4e6)
[15:59:51] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[15:59:51] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[16:00:39] *** Joins: joev (~joev@user/joev)
[16:03:59] *** Joins: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[16:17:10] *** Joins: razetime (~quassel@117.254.35.251)
[16:22:56] *** Joins: ronnie (~ronnie@200.153.104.44)
[16:24:18] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 272 seconds)
[16:25:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:30:40] *** Joins: treflip (~user@user/treflip)
[16:31:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:31:57] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[16:32:10] *** Joins: Brucio-61 (~Brucio-59@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:33:48] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a4e5:994e:ce63:7d6e)
[16:33:52] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 246 seconds)
[16:39:31] *** Quits: suss (~user@user/suss) (Ping timeout: 260 seconds)
[16:42:55] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:dc27:fab8:25dc:abe5)
[16:46:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:134a:aa8c:6c91:412d:d4e6) (Ping timeout: 260 seconds)
[16:47:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a4e5:994e:ce63:7d6e) (Ping timeout: 256 seconds)
[16:57:27] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:2fae:e7bf:4539:f0df:f823)
[17:04:29] *** MrMobius_ is now known as MrMobius
[17:05:59] *** Joins: notnotdan (~notd@v22019068545391262.megasrv.de)
[17:12:02] *** Joins: xiongxin1 (~Thunderbi@117.136.40.190)
[17:15:10] *** Quits: razetime (~quassel@117.254.35.251) (Ping timeout: 246 seconds)
[17:15:18] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:2fae:e7bf:4539:f0df:f823) (Ping timeout: 260 seconds)
[17:15:18] *** xiongxin1 is now known as xiongxin
[17:17:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:18:39] *** Joins: aeth (~aeth@user/aeth)
[17:22:10] *** Joins: inky (~inky@5.77.180.201)
[17:28:31] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:170d:f1be:16dc:459f:3aa5)
[17:30:11] *** Joins: razetime (~quassel@117.254.35.196)
[17:30:25] *** Quits: xiongxin (~Thunderbi@117.136.40.190) (Ping timeout: 250 seconds)
[17:30:26] *** xiongxin1 is now known as xiongxin
[17:31:45] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[17:32:41] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:33:16] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[17:36:55] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[17:37:58] *** Joins: joev (~joev@user/joev)
[17:38:16] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[17:40:58] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[17:43:21] *** Joins: lisp123 (~lisp123@143.238.171.43)
[17:44:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:48:14] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[17:48:28] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[18:04:51] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[18:16:47] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:dc27:fab8:25dc:abe5) (Quit: Leaving)
[18:17:00] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:25:11] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[18:38:43] *** Joins: treflip (~user@user/treflip)
[18:41:44] *** Quits: Necktwi (~necktwi@124.123.127.132) (Ping timeout: 272 seconds)
[18:43:33] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Quit: ZNC - https://znc.in)
[18:44:39] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:47:33] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[18:50:43] *** Quits: mathrick (~mathrick@67.148.61.4) (Ping timeout: 246 seconds)
[18:53:26] *** Joins: mathrick (~mathrick@67.148.61.4)
[18:54:04] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:55:08] *** Joins: treflip (~user@user/treflip)
[18:56:50] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:170d:f1be:16dc:459f:3aa5) (Ping timeout: 260 seconds)
[19:07:20] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:11:51] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:13:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:14:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:15:31] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[19:16:27] *** Joins: treflip (~user@user/treflip)
[19:18:18] *** Joins: Necktwi (~necktwi@124.123.127.132)
[19:19:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:19:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:19:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:20:19] *** Quits: treflip (~user@user/treflip) (Client Quit)
[19:21:56] *** Joins: eugercek (~user@user/eugercek)
[19:24:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:24:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[19:27:01] *** Lord_of_Life_ is now known as Lord_of_Life
[19:31:21] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:31:38] *** Joins: lisp123 (~lisp123@143.238.171.43)
[19:33:17] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[19:36:13] *** Quits: razetime (~quassel@117.254.35.196) (Ping timeout: 240 seconds)
[19:36:13] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[19:44:45] *** Joins: razetime (~quassel@117.254.35.251)
[19:45:58] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:51:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[19:59:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:00:50] <johnjaye> speaking of register machines. i've wondered why there isn't so much interoperation with different lisps
[20:00:59] <johnjaye> like say a common bytecode format like java to run in
[20:01:23] <johnjaye> it seems like lisp1/lisp2 and a bunch of things interfere with that
[20:01:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[20:03:26] <jackdaniel> some /lisps/ target JVM, so you have that
[20:04:00] <jackdaniel> also many lisps have FFI that basically targets C ABI (so on this level there is also some interoperation)
[20:04:43] <jackdaniel> poplog defined a common language runtime for different languages (a little higher level than C ABI), similarily ECL in the past (it does not anymore, at least for now), and C# also advertises CLR
[20:05:20] <jackdaniel> so there are quite a few possibilities. not to mention that some languages may be hosted in lisp (i.e there was a python2 compiler and runtime written in common lisp)
[20:12:14] <johnjaye> ECL has a clr?
[20:12:43] <johnjaye> yes i suppose ultimately a compiler or interpreter is the only 100% effective solution in that case
[20:13:04] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:16:25] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[20:21:15] *** Joins: inky_ (~inky@46.36.114.138)
[20:21:20] *** Quits: inky_ (~inky@46.36.114.138) (Remote host closed the connection)
[20:21:34] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[20:24:52] *** Quits: inky (~inky@5.77.180.201) (Read error: Connection reset by peer)
[20:27:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:28:19] <robin> johnjaye, also lispms with multi-language support; everything compiled to machine code but there was some level of interoperability at least for the main languages (zetalisp+cl, etc.)
[20:29:32] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[20:30:23] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[20:31:14] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[20:32:06] *** Joins: razetime (~quassel@117.254.35.251)
[20:33:46] <robin> guile also has multilanguage support targeting a VM, but it's not standardized or anything so most languages compile to tree-il (sort of like low-level scheme, https://www.gnu.org/software/guile/manual/html_node/Tree_002dIL.html)
[20:34:08] *** Joins: inky (~inky@46.36.114.138)
[20:35:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[20:36:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:37:17] <robin> good enough to support lisp1/lisp2 in the same runtime, the difficulty is of course cross-language interaction (i *think* kent pitman had some notes on a "lisp-omega" related to that)
[20:38:35] <johnjaye> i don't get any results for lisp omega
[20:41:40] <robin> ah, here it is: http://www.nhplace.com/kent/Half-Baked/index-spiel.html (mentioned on usenet a decade ago)
[20:41:57] <drakonis> https://cl-pdx.com/comp.lang.lisp/2003/may/110686.html
[20:42:00] <drakonis> wow.
[20:42:01] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:42:53] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[20:46:09] <drakonis> not specifically this email but the chain itself
[20:48:10] <jackdaniel> johnjaye: had*, see https://ecl.common-lisp.dev/static/files/papers/ecl-1995-attardi.pdf ("2 Common Runtime Support")
[20:49:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:53:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[20:54:00] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:54:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:01:33] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:06:44] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[21:07:24] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[21:07:54] *** Joins: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[21:08:22] *** Quits: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:09:21] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Read error: Connection reset by peer)
[21:10:34] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[21:10:34] *** ChanServ sets mode: +o fe[nl]ix
[21:11:20] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:12:53] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[21:17:14] *** Quits: inky (~inky@46.36.114.138) (Remote host closed the connection)
[21:17:58] *** Joins: eddof13 (~textual@189.178.17.205)
[21:19:52] *** Joins: lisp123 (~lisp123@143.238.171.43)
[21:21:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[21:23:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:24:20] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 252 seconds)
[21:24:48] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:30:15] *** Joins: inky_ (~inky@46.36.114.138)
[21:31:13] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a5a4:d9a1:a057:3848)
[21:31:14] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a5a4:d9a1:a057:3848) (Changing host)
[21:31:14] *** Joins: skapata (~Skapata@user/skapata)
[21:32:24] *** Joins: suss (~user@user/suss)
[21:33:52] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:41:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:51:36] *** Joins: lunarkitty (uid501895@user/pyra)
[22:04:10] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[22:25:37] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[22:37:29] *** Joins: Oddity (~Oddity@user/oddity)
[22:46:50] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Ping timeout: 252 seconds)
[22:46:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:48:03] <ProfSimm> Hi, I'm a moron. My question is, as far as I know in this:  (foo (bar 1 2))  it's executed as so:  bar function is found, given 1 2 and replaced with its result. foo is looked up, and the result is given to it.
[22:48:06] <ProfSimm> Is that accurate
[22:48:30] <White_Flame> sorry, I think you need to ask in #moron
[22:48:32] <White_Flame> ;)
[22:48:38] <White_Flame> but there is a little more to that
[22:48:54] <ProfSimm> Please enlighten me
[22:48:57] <White_Flame> first during compilation, it checks if FOO is known to be a macro or other special form, and transforms the body differently
[22:49:05] <ProfSimm> Ah
[22:49:15] <White_Flame> then the same for BAR as it traverses into FOO's (assumed) function form
[22:49:31] *** Joins: saorge (~saorge@ns378138.ip-5-196-67.eu)
[22:49:50] <White_Flame> assuming both FOO and BAR are not special, then yes it basically works as you said
[22:50:18] <White_Flame> the compiler, depending on where FOO & BAR are defined, might also make direct references to the function instead of looking it up via symbol (local functions, etc)
[22:51:06] <ProfSimm> White_Flame: ok my question is thus: I've seen DSLs built in LISP where the first word is almost like a key in a JSON object. It seems the word is LOCALLY interpreted, not looked up in a global symbol table   (people (employee 1 "John") (visitor 2 "Jane")...)
[22:51:10] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[22:51:18] <ProfSimm> White_Flame: how is this achieved
[22:51:24] <White_Flame> right, those are usually plain lists not intended to be executable code
[22:51:33] <White_Flame> (+ 1 2) is just a list of a symbol and two numbers, after all
[22:51:37] <ProfSimm> White_Flame: but they don't use '()
[22:51:45] <White_Flame> it's its usage in a code location that invokes all the s-expression handling
[22:52:07] <White_Flame> oh, that's usually with macros, where the source code exists in plain list form
[22:52:15] <ProfSimm> White_Flame: so if there's no apostrophe, how are both cases differentiated
[22:52:23] <ProfSimm> Ah
[22:52:24] <wasamasa> you got the order wrong
[22:52:28] <wasamasa> first, foo is looked up
[22:52:29] <White_Flame> or a separate file, where when you READ from the file, you get the (PEOPLE (EMPLOYEE ..) ..) list plainly
[22:52:41] <wasamasa> if foo is a special form or macro, special evaluation rules apply
[22:52:55] <wasamasa> if it's a function, its arguments are evaluated and the function is applied
[22:53:05] <wasamasa> this process repeats with bar
[22:53:43] <ProfSimm> makes sense
[22:53:51] <ProfSimm> Specialness is checked outside in
[22:53:55] <ProfSimm> Evaluation is done inside out
[22:54:04] <ProfSimm> Normal evaluation that is
[22:54:24] <wasamasa> no, evaluation is done outside in, too
[22:54:59] <ProfSimm> wasamasa: well if I have   (+ (+ 2 3) (+ 4 5)) then surely (+2 3) and (+ 4 5) eval first
[22:55:02] <wasamasa> after all, you need to look up the thing in the funcall position
[22:55:11] <wasamasa> you cannot skip that step
[22:55:31] <wasamasa> in fact, there is this special case of a lambda in the funcall position for maclisp, elisp, CL and who knows what else
[22:56:01] <ProfSimm> White_Flame: so if I see a DSL like the "people" example, and no '() then it has to be macros/
[22:56:06] <ProfSimm> ?
[22:56:19] <wasamasa> to verify this, you can construct erroneous code and see what part raises the error first
[22:56:46] <wasamasa> if it were as you say, then (undefined-function (/ 1 0)) would raise an arithmetics error, but it doesn't
[22:56:59] <White_Flame> in terms of evaluation order in CL, if both FOO and BAR are undefined, (foo bar) will error out on the unknown parameter first, not the unknown function
[22:57:28] <White_Flame> and (foo (/ 1 0)) errors out on the div by zero
[22:57:32] <wasamasa> in elisp it's the other way around
[22:57:39] <White_Flame> right, hence specifying CL for me
[22:57:59] <White_Flame> but CL also has that separate compilation pass, not sure what elisp does there
[22:58:14] <White_Flame> ProfSimm: are you asking about a specific lisp dialect?
[22:58:41] <wasamasa> does the CL standard prescribe anything there?
[22:58:53] <wasamasa> because if I try (foo (/ 1 0)) in clisp, it raises an error for foo
[22:59:08] <ProfSimm> White_Flame: I don't know which dialect I saw examples in. But I wanna know how LISP enables these clean DSLs
[22:59:19] <wasamasa> macros, duh
[22:59:26] <ProfSimm> Well can't be all macros no
[22:59:28] <White_Flame> code is just data
[22:59:30] <ProfSimm> That's kinda limiting
[22:59:35] <wasamasa> you don't exactly need macros, you could write a plain function and pass it a list
[22:59:44] <White_Flame> so if you read it as data (which macros do), then you can do anything with it without changing the syntax
[22:59:44] <ProfSimm> wasamasa: '() ?
[22:59:45] <wasamasa> and then write a macro that uses that function :D
[23:00:13] <ProfSimm> How are macros scoped?
[23:00:26] <ProfSimm> Can I define a macro at runtime and somehow it applies to code that runs
[23:00:31] <wasamasa> you don't really want to know
[23:00:35] <White_Flame> (my-macro (person (first "George") ..)), and (my-func '(person (first "George") ...)) can do similar things, just one at runtime
[23:00:36] <ProfSimm> I wanna know :D
[23:00:45] <wasamasa> there is some stuff in Let over Lambda that gets increasingly funky
[23:01:01] <wasamasa> claiming a new kind of scoping
[23:01:04] <White_Flame> yes, you can define them at runtime, but they'll only affect code that's compiled/read/interpreted after it
[23:01:21] <ProfSimm> White_Flame: I see
[23:01:45] <White_Flame> since they affect the source code itself
[23:01:53] <White_Flame> or, take effect based on the source code
[23:02:29] <ProfSimm> Maybe would've been nice if macros worked in some intermediate step between parsing and execution, so every function call takes into account current macros
[23:03:57] <wasamasa> but they do, lol
[23:04:09] <wasamasa> there is a read phase, compilation phase, execution phase
[23:04:17] <White_Flame> function calls don't parse
[23:04:45] <White_Flame> (unless it's a fully interpreted non-CL simple lisp I guess)
[23:04:48] <ProfSimm> wasamasa: well I mean more towards the execution
[23:05:13] <wasamasa> most proposals towards more intuitive macro semantics stop working in the presence of compilation
[23:05:14] <White_Flame> back in the day there were f-expressions, which basically do pass source code & the environment on every runtime invocation
[23:05:19] <White_Flame> but those are slow and problematic
[23:05:22] <wasamasa> like, fexprs, yes
[23:05:44] <ProfSimm> I like slow and problematic
[23:05:48] <White_Flame> heh
[23:06:05] <ProfSimm> Somehow I feel there's a way to do this without slowing things down that much.
[23:06:07] <White_Flame> it entails things like trying to access the local variables of the scope of the caller, given just he source code to execute
[23:07:25] <White_Flame> whereas a macroexpansion just programmatically generates the source code to inject at the call site
[23:07:41] <White_Flame> and normal compilation/evaluation then happens with that result
[23:08:11] *** Joins: lisp123 (~lisp123@143.238.171.43)
[23:10:31] <ProfSimm> Maybe a faster way to do "runtime macros" is the ability to evaluate an argument with the symbol table replaced by the function
[23:10:41] <ProfSimm> I.e. the function provides the function table
[23:10:46] <ProfSimm> So everything runs contextually
[23:10:55] <White_Flame> that sounds like a compiler
[23:11:00] <ProfSimm> Nah
[23:11:13] <ProfSimm> We just switch the table
[23:11:28] <White_Flame> what's "the" table?  there are lexical scopes and such
[23:11:45] <White_Flame> and if your'e going through a symbol lookup every time, that doesn't sound very fast
[23:11:53] <White_Flame> for each variable access
[23:12:13] <ProfSimm> White_Flame: it kinda happens anyway no. Or you mean it gets compiled to a register
[23:12:32] <White_Flame> lexical variables become registers or stack slots in any decent compiling lisp
[23:12:34] <wasamasa> so dynamic scope and fexprs, I see
[23:12:42] <White_Flame> and then there's closures
[23:12:48] <ProfSimm> I need moar
[23:12:48] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 272 seconds)
[23:12:50] <wasamasa> perhaps you want to look at picolisp
[23:13:01] <johnjaye> Let over Lambda
[23:13:07] <johnjaye> i knew there was a book i forgot to order
[23:13:12] <White_Flame> Lisp over Lisp
[23:13:13] <wasamasa> or... newlisp
[23:13:20] <wasamasa> no, just kidding, look at picolisp
[23:13:24] <White_Flame> but yeah, picolisp is an interesting take on things
[23:13:38] <wasamasa> I don't think there's anything else than "Don't do this" to learn from newlisp
[23:13:41] <White_Flame> might align with these ideas, as afaik it's a fast interpreter that keeps everything dynamic
[23:13:50] <wasamasa> it feels roughly as bad as PHP to me
[23:14:16] <wasamasa> I don't think they do DSLs though
[23:14:51] <wasamasa> that's not their style
[23:15:16] <wasamasa> the idea is to do things with as little bells and whistles as possible
[23:15:30] <amazigh> ProfSimm: look into https://web.cs.wpi.edu/~jshutt/kernel.html
[23:15:42] <ProfSimm> Can I create an anonymous unique symbol in Lisp
[23:15:51] <wasamasa> but then, I haven't looked into pilog much
[23:15:55] <ProfSimm> Thanks
[23:16:07] <amazigh> ProfSimm: gensym does that 
[23:16:33] <amazigh> (Lisp is not a single thing)
[23:16:55] *** Joins: lisp123 (~lisp123@143.238.171.43)
[23:16:59] <ProfSimm> amazigh: how
[23:18:47] <amazigh> I do not understand the question
[23:19:17] <wasamasa> https://picolisp.com/wiki/?metaprogramming
[23:21:25] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 250 seconds)
[23:21:27] *** Joins: strajder (~strajder@user/strajder)
[23:21:46] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[23:22:23] *** Quits: ronnie (~ronnie@200.153.104.44) (Remote host closed the connection)
[23:22:26] <ProfSimm> amazigh: I was wondering how does one create a unique symbol 
[23:22:44] <ProfSimm> anonymous. I.e. I assign it to one or more names, and I can compare it by identity
[23:22:58] *** Quits: kevingal (~quassel@2001:770:c0:401:c44c:2364:15bc:7df8) (Remote host closed the connection)
[23:23:05] <wasamasa> have you looked up gensym in clhs yet?
[23:23:58] <amazigh> http://www.lispworks.com/documentation/HyperSpec/Body/f_gensym.htm#gensym
[23:24:03] <ProfSimm> Oooh I missed that
[23:24:06] <ProfSimm> Thanks
[23:24:13] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:24:49] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[23:27:45] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:29:09] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:29:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:33:20] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:34:08] *** Joins: eddof13 (~textual@189.178.17.205)
[23:34:29] *** Quits: Lumine (lumi@user/luminousnine) (Quit: brb)
[23:36:31] *** Quits: MrFantastik (~f@176.108.141.162) (Remote host closed the connection)
[23:36:33] *** Joins: Lumine (lumi@user/luminousnine)
[23:46:36] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Ping timeout: 245 seconds)
[23:51:43] <johnjaye> wasamasa: what is doing with as little as possible, picolisp or newlisp?
[23:58:39] <wasamasa> is new a unit for something small?
