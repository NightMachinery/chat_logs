[00:01:32] <ap5> So you dont like that you have the pipeline file in git?
[00:04:11] <hseg> Nasp: yeah, properties _work_, they're just a bunch of boilerplate
[00:04:15] <Nasp> I dont like having to maintain those
[00:04:26] <hseg> was hoping to cut down on it
[00:04:51] <Nasp> How many properties are you expecting to need in your class
[00:05:58] <ap5> Nasp, i understand. At my new place there is the pipeline file for each project, but it is the me (devops man) and our architect that maintains it. Everyone else dont know a thing about it.
[00:06:22] <Nasp> Yes, and that would probably be ma and a collegue
[00:06:25] <Nasp> I dont want to maintain those files
[00:06:32] <Nasp> I prefer them to just look for a docker file, if one exists, build it
[00:06:36] <Nasp> Like more convention based approach
[00:06:48] <Nasp> Could probably still just make something to generate those pipeline files
[00:07:54] <ap5> I understand. I felt the same way in the start, but now i like it. I even upped my bash skills :)
[00:08:31] <Nasp> I just have a feeling it could easily become a pain
[00:08:47] <Nasp> but i think there was some inheritance thingy in gitlab
[00:09:08] <irwiss> hseg: use records then, can't get any less boilerplate
[00:09:50] <hseg> Nasp: on the order of 20 props
[00:10:11] <irwiss> hseg: oh nvm, scrolled up to see what you mean, yeah that's not gonna work without some kind of generator, you could probably write a roslyn generator to recurse down and write properties
[00:10:51] <hseg> welp, ok
[00:12:27] <ap5> Nasp, that is right. In gitlab you only have one file (in devops and github you can have multiple), so you need to inherit etc if you to do certain things
[00:12:56] <Nasp> Right you can't even have multiple as well
[00:13:17] <biberu> Nasp: i like to check in pipeline descriptions, but i try to keep them as simple as possible, often just calling the same scripts that can be used locally
[00:13:27] <Nasp> Yea
[00:14:05] <biberu> e.g. powershell -> publish tests, coverage, artifacts
[00:14:21] <Nasp> yes that's how we do it now
[00:14:25] <Nasp> Although i hate the powersehll part
[00:15:09] <biberu> how so?
[00:17:47] <Nasp> Because it's powershell?
[00:18:59] <biberu> i rather like powershell
[00:24:53] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:79c1:f45:56c2:de77) (Ping timeout: 268 seconds)
[00:41:28] <hseg> hate this codebase and its jank modeling. didn't they realise that having multiple classes have the same method is a good sign they probably should inherit form some base class?
[00:41:32] *** Joins: Xenoprimate_Surf (Xenoprimat@gateway/vpn/protonvpn/xenoprimate)
[00:41:58] <irwiss> https://www.reddit.com/r/funny/comments/sb04qq/my_son_just_asked_me_why_the_tiger_had_a_little/ lol
[00:44:02] <bomb> lol
[00:46:26] <biberu> hseg: ew, inheritance
[00:47:34] <hseg> or have them implement some interface, I'm not picky
[00:49:22] <hseg> just don't force me to keep multiple calls to GetPortfolioId because _someone_ didn't realize there was a common abstraction for all the assets we're dealing with
[00:50:52] <irwiss> just use reflection /s
[00:51:33] *** Joins: MaNa2k (~MaNa2k@224.81-166-66.customer.lyse.net)
[00:51:41] <hseg> if I wanted that, I'd use python
[00:52:07] <hseg> ... well, I would if the client hadn't already coded their braindead design in c#
[00:52:26] <biberu> ew, python
[00:52:35] <hseg> at least c# is rigid enough to keep them from doing too dumb things
[00:53:35] <Nasp> hseg:  Inheritance is not a golden solution
[00:54:40] <hseg> ofc not. would have been happy with interfaces. but imo, inheritance, where semantically meaningful, is a no-brainer
[00:56:58] <biberu> personally i use it very, very rarely
[00:57:15] <bomb> toothbrush? yeah me too
[00:57:35] <hseg> brain? have been said to as well
[00:57:47] <biberu> mm, brains
[00:57:50] <bomb> it's 1960s slang for condom
[00:58:35] <hseg> biberu: so how do you organize your types? unless you rarely have a hierarchy of types either?
[01:00:02] <bomb> MBTI
[01:01:47] *** Quits: SlimmyJimmy (SlimmyJimm@user/slimmyjimmy) (Remote host closed the connection)
[01:01:49] <Nasp> biberu:  Yeah i try and avoid inheritance
[01:01:58] <Nasp> It's not the golden tools we were taught in cs school
[01:02:18] *** Joins: Brett[Air] (~Brett@27-32-147-253.static.tpgi.com.au)
[01:02:42] * irwiss still has PTSD from MFC project where classes inherited from 4 other classes on average
[01:03:08] <bomb> hah
[01:03:32] <biberu> hseg: i avoid class hierarchies, yes, i'll use interfaces or just plain function signatures for contracts, and share implementation via e.g. composition or free functions
[01:03:35] *** Joins: SlimmyJimmy (SlimmyJimm@136.37.25.140)
[01:03:35] *** Quits: SlimmyJimmy (SlimmyJimm@136.37.25.140) (Changing host)
[01:03:35] *** Joins: SlimmyJimmy (SlimmyJimm@user/slimmyjimmy)
[01:03:48] <hseg> free functions?
[01:03:59] <biberu> just a function
[01:04:17] <biberu> in c# you can emulate that via "using static"
[01:04:46] <hseg> ah -- was wondering how you'd spell that
[01:06:01] <hseg> what pain do elaborate hierarchies cause?
[01:11:16] <irwiss> hseg: there's upper bound of 1 to inheritance in c#, but even when there isn't like in c++ then usually composition is far easier to even mentally grasp over digging several virtual funcs deep to figure out what's going on
[01:11:59] <hseg> ah. the old perl adage of just using plain old data and leave the cleverness for the functions?
[01:12:36] <hseg> ugh the generics solution I'm using for my refactoring problem is requiring so much faff around the added generic parameter. and it leaks some internal details, which is annoying
[01:13:10] <biberu> that upper bound can cause a lot of pain if someone used inheritance as code reuse, and that way of slicing it doesn't match what it should look like from the outside
[01:13:13] <JakeSays> irwiss: there's an upper bound direct inheritance of 1.
[01:14:31] <biberu> hseg: yes, plain old data and functions that operate on it
[01:15:14] <JakeSays> biberu: your use of free functions would drive me nuts
[01:15:19] <Nasp> Bah i should haev gotten a haircut last week
[01:15:24] <Nasp> I can't now due to covid
[01:15:34] <Nasp> Think i'm gonna charge my USMC haircut device
[01:15:36] <biberu> JakeSays: are you a squirrel?
[01:17:20] <JakeSays> hseg: the biggest issue with elaborate hierarchies is the deeper you go the more difficult it is to remain SOLID
[01:17:33] <Nasp> Same with generics :D
[01:17:36] <JakeSays> and for me solid is everything
[01:17:40] <Nasp> Generic + inheritance = pain
[01:17:56] <biberu> inheritance = pain
[01:17:56] <JakeSays> Nasp: generics don't cause issues with solid
[01:18:05] <Nasp> Did i  say that?
[01:18:29] <JakeSays> "same with generics" in response to my solid statement - yes you said it
[01:23:56] <bomb> genetics
[01:26:57] *** Quits: spinningCat (~spinningC@about/web/muscles) (Ping timeout: 256 seconds)
[01:27:55] <Nasp> Omg why do people insist on using clipboard
[01:28:03] <Nasp> You can just feel how old people are when they use clipart
[01:28:33] <JakeSays> what else should they use?
[01:29:21] <Nasp> Nothing
[01:29:41] <JakeSays> ah.
[01:30:11] <JakeSays> so it's that they're using an image where there should be none?
[01:30:49] <JakeSays> cuz if i need an image for something i have to steal it from somewhere. i can't draw for shit
[01:32:58] *** Quits: MaNa2k (~MaNa2k@224.81-166-66.customer.lyse.net) (Quit: Leaving)
[01:33:23] <bomb> just listen to some relaxing music, and relax https://www.youtube.com/watch?v=1uvwGmRf5M8
[01:33:54] <JakeSays> i am
[01:34:34] <Slade> anyone here doing net6 development on mac?
[01:34:56] <bpmedley> Slade : Yes
[01:35:06] <Slade> bpmedley, what do you use? i'm guessing no vs2022
[01:35:06] <bpmedley> Intel mac
[01:35:14] <bpmedley> I use vs2022 and also cli
[01:35:27] <Slade> oh. vs2022 works on intel mac.. not the m1s right?
[01:35:28] <bpmedley> One of my projects is strictly vs2022
[01:35:46] <bomb> that's called vintage mac now
[01:35:46] <bpmedley> vs2022 works better on intel mac, but does work on m1 mac.  My boss has a m1 mac
[01:35:50] <JakeSays> Slade: i think that's just vs for mac
[01:36:00] <Slade> oh.. https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-3-and-upcoming-native-m1-processor-support/
[01:36:14] <JakeSays> Slade: take a look at rider
[01:40:00] <Slade> JakeSays, that what you're using now?
[01:40:05] <JakeSays> yes
[01:40:45] <Slade> ohb, its monthly fee
[01:41:05] <JakeSays> iirc you can purchase it
[01:41:25] <Slade> For students and teachers FREE  ..  For universities and educational organizations 50% OFF
[01:41:28] <Slade> cheap for me
[01:41:35] <JakeSays> it's cheap to begin with
[01:42:07] <Slade> oh. its built in. https://sales.jetbrains.com/hc/en-gb/articles/207240845-What-is-perpetual-fallback-license-
[01:42:16] <JakeSays> ah right
[01:44:32] <Xenoprimate_Surf> I agree about inheritance btw
[01:44:51] <JakeSays> ah well that's good. we were concerned
[01:44:52] <Xenoprimate_Surf> I hate how much prominence it's given in teaching materials over composition and interface usage
[01:44:52] <Slade> remove inheritance, replace with composition/aop :P
[01:45:01] <JakeSays> aop? ew
[01:45:06] <JakeSays> no aop
[01:45:13] <Slade> aop scales nicely
[01:45:14] <Xenoprimate_Surf> I have some ew and some ok feelings about AOP
[01:45:25] <JakeSays> Slade: aop doesn't scale for shit
[01:46:00] <JakeSays> SOLID scales infinitely
[01:46:18] <Xenoprimate_Surf> <JakeSays> ah well that's good. we were concerned --> I know you all hang on for my great wisdoms here
[01:46:25] <Slade> must not be doing it right, Orleans is ultra scalable and designed for AOP..  anyhow i wasn't being serious
[01:46:46] <JakeSays> Xenoprimate_Surf: lol
[01:48:21] <Slade> https://en.wikipedia.org/wiki/Orleans_(software_framework)  <-- microsofts orleans project if you're not familiar
[01:48:30] <JakeSays> i'm familiar
[01:48:37] <Slade> heavily used by gaming industry
[01:48:44] <JakeSays> i had a client who used that fucking thing everywhere
[01:48:58] <Slade> it can be really nice
[01:49:46] <JakeSays> i did the firmware for a system of his. the mcu's were all controlled by a jetson nano running containers with orleans communicating between them.
[01:49:49] <Nasp> Each time o look at it, i have no diea where to begin with that Orleanms
[01:49:57] <Nasp> It looks like some of the parts from Azure service fabric?
[01:50:32] <Slade> Nasp, hmm. azure service fabric was built somewhat on its concepts i think
[01:51:04] <Slade> just play with it when you want to use a virtual actor pattern out to scale
[01:51:13] <Nasp> It just seems like rather a beast to deal with
[01:51:26] <JakeSays> it's enterprisey
[01:51:46] <Nasp> Looks like you need a rather large team to support that
[01:51:49] <Slade> Nasp, hmm. i mean its not   npm install pad-left
[01:52:08] <JakeSays> Slade: lol i hope it's not npm anything
[01:52:28] <Slade> its fundamental to the way an app works. associate it more closely to kafka or rabbit in terms of its impact on a system
[01:53:23] <Nasp> Does it take massive amounts of memory?
[01:53:33] <Nasp> I remember Service fabric required memory only or something like it
[01:53:40] <bomb> https://www.youtube.com/watch?v=YtEWoavDlcM
[01:53:44] <bomb> nice German course
[01:54:05] <Slade> i mean JakeSays was just talking about it running on mcus so its not going to be unreasonable in size
[01:54:18] <Nasp> If wonder of any of this is nice to work with https://dotnet.github.io/orleans/docs/grains/event_sourcing/index.html
[01:54:45] <Slade> the concept of grains is awesome in general
[01:55:05] <bomb> Jake has gluten alergy
[01:55:09] <Nasp> JakeSays:  how many devs were working on that project?
[01:55:30] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[01:55:40] <Slade> its not for every project. but I do recommend someone building something with orleans just to learn and understand the patterns. what it helps and make more complex
[01:55:41] <Nasp> I have no idea what a grain is
[01:55:47] <JakeSays> Nasp: 1 + .3 of him
[01:55:50] <Nasp> ok
[01:56:12] <bomb> grain is what bread is made of
[01:56:25] <Slade> Nasp, https://dotnet.github.io/orleans/docs/index.html
[01:56:27] <JakeSays> i think orleans is good for larger systems, but on an embedded device.. bah
[01:56:38] <Nasp> Slade:  Yeah i think i get that it'
[01:56:48] <Nasp> It's just an object / identity / entity
[01:57:04] <Nasp> But it doesn't exactly help me understand what i can use orleans for
[01:57:38] <Nasp> I feel like it's something you need a lot of devs to maintain
[01:57:59] <Slade> Nasp, other way around. if you have a lot of devs, it forces patterns to make the code easier
[01:58:14] <Slade> there is a way to save data for a grain. thats the way you do it. the end
[01:58:26] <Slade> way to retrieve it
[01:58:35] <Nasp> I think i will just do like all the other times i've heard it mentioned and ignore it
[01:59:03] <Slade> Nasp, so, its used heavily in games for chat messages, microtransactions, game lobbies, etc.
[01:59:23] <Slade> useful if you need 0 downtime
[01:59:33] <Slade> fault tolerance
[01:59:54] <Nasp> Sure but how?
[02:00:04] <Nasp> It seems rather vague each time i look at it
[02:00:07] <Slade> what do you mean how
[02:00:12] <Nasp> And i get Azure service fabric vipes
[02:00:17] <Nasp> vibes
[02:00:35] <JakeSays> Nasp: are you familiar with the actor concept?
[02:00:43] <Slade> it'd work pretty solid as a banking platform as well..  if we werent so busy writing them in COBOL
[02:00:46] <Nasp> JakeSays:  Nope
[02:00:53] <Slade> ah, that explains it
[02:01:00] <Slade> use orleans to learn actor pattern :P
[02:01:03] <JakeSays> Nasp: orleans is all about actors so you'd want to understand that first
[02:01:23] <JakeSays> Slade: cobol.net!
[02:01:30] <Nasp> I think this is the same reason so son get akka.net either
[02:01:33] <Slade> JakeSays, microfocus sometimes
[02:01:42] <Nasp> Ohh and Dapr
[02:02:16] <Slade> i think the Gang of Four Design patterns are still relevant
[02:02:17] <JakeSays> i remember looking at akka. all i remember is not being impressed
[02:02:38] *** Parts: bomb (~bomb@user/bomb) (‎)
[02:03:13] <Slade> Akka has similar goals as Orleans, but is an inferior implementation
[02:03:14] <JakeSays> Slade: how about orleans for a trading system foundation
[02:03:31] <JakeSays> probably not HST
[02:03:44] <Slade> JakeSays, HFT you mean?
[02:04:02] <Slade> thats custom FPG work
[02:04:08] <Slade> FPGA
[02:04:18] <JakeSays> yeah hft i guess. high speed trading
[02:04:38] <Nasp> Is it a good for for event sourcing?
[02:04:39] <Slade> yea. thats where your logic is basically built into your network card amost
[02:04:45] <Nasp> For some reason everybody insists on building their own
[02:05:09] <JakeSays> Slade: you mentioned microtransactions - a trade is similar
[02:05:14] <Slade> thats a generic term. i mean kafka is an event source.. but i wouldnt put 'onclick' through it
[02:05:28] <Slade> JakeSays, indeed
[02:05:44] <Nasp> We just started using kafka
[02:05:52] <JakeSays> hmm. i may look in to it for that
[02:05:52] <Nasp> And some people say kafka shouldn't be used for event sourcing
[02:07:00] <Slade> Nasp, https://www.confluent.io/blog/event-sourcing-cqrs-stream-processing-apache-kafka-whats-connection/
[02:07:00] <JakeSays> my only concern would be latency
[02:07:21] <Nasp> Slade:  yes?
[02:07:31] <Slade> they'll tell you if its useful or not
[02:07:46] <Nasp> If what is?
[02:07:50] <Slade> nevermind
[02:07:56] <Slade> disregard
[02:07:59] <Nasp> Ok
[02:08:11] <Nasp> You just send me a link with no explanation
[02:08:33] <Slade> its kafka discussing event sourcing and the relationship, from the people who actually write kafka
[02:08:59] <Nasp> Ahh, ok
[02:09:16] <Nasp> Well we use it already ffor event sourcing
[02:09:19] <Slade> JakeSays, the thing about orleans is it completely abstracts the hardware/machines.. for better (usually) or worse (sometimes).. so latency challenges have to be considered on the low level
[02:09:27] <Nasp> It's our 2nd generation homemade event sourcing
[02:09:41] <Nasp> Or probably more, but it got switched to Kafka after "we" finally found out rabbitmq wasn't suitable for eventsouricng...
[02:09:45] <Slade> Nasp, do an orleans project, decide
[02:09:57] <Nasp> I can't see what i can use Orleans for
[02:09:59] <Slade> there is 0 wasted time in gathering that knowledge
[02:10:00] <Slade> ok
[02:10:06] <Nasp> I find it confusing to look at, how the hell do i get any other devs to use it?
[02:11:18] <Slade> if you're the arch/senior you set it up. build a few of the basics, and people copy your patterns
[02:11:34] <JakeSays> SO all the things!
[02:11:34] <Slade> it really is suited for teams that are high in 'juniors'
[02:11:53] <JakeSays> Slade: i'm not suited for such teams
[02:11:53] <Nasp> Slade:  I can't even get people to follow basic patterns now
[02:12:03] <Nasp> So i dont dare to introduce a new stack like that
[02:12:14] <Nasp> It should just be for my own curiosity
[02:12:21] <Slade> Nasp, orleans helps with it. because 1) they're so simple   2) its basically the only way their code works at all
[02:12:44] <Nasp> We have people doing database lookups in loops, and calls saves for each iteration
[02:12:48] <Nasp> And then wonder why the hell it's slow
[02:12:57] <Slade> yes cant really do that in orleans.
[02:13:08] <Slade> anyhow, i have no horse in this race, you cant figure it out its probably not a good tech for you
[02:13:27] *** Joins: Fiji (~Fiji@user/fiji)
[02:13:53] <Nasp> I just look at it, and i can't figure out what it's usage is
[02:14:03] <Slade> then yea, dont use it
[02:14:12] <Nasp> I have a grain, ohh happy day :D
[02:14:21] <Nasp> And then some RPC right?
[02:14:34] <Slade> make your grain interact with another grain
[02:15:22] <JakeSays> Nasp: the rpc side of things is totally abstracted away
[02:15:31] <Nasp> yeah
[02:15:35] <Slade> assume every call between grains is RPC
[02:15:44] <JakeSays> or isn't rpc
[02:15:47] <Slade> indeed
[02:15:52] <JakeSays> well, assume you can't care
[02:16:55] <Slade> and all your objects are loaded and accessible and have been created.  and dont need to be found
[02:17:06] <Slade> objects/grains
[02:19:24] <Nasp> So how i've seen it each time i've looked at it, is i can spawn objects and they live somewhere and i can call methods on them
[02:19:39] <Nasp> I can see how that can be useful for a gaming with creatures and such
[02:20:06] <Slade> its not typically used inside critical gaming loops and such like that  but in supporting services
[02:21:01] <Slade> apps like unity use their own actor/entity system
[02:21:39] <Nasp> Also i dont get how they get their transaction support
[02:21:57] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[02:22:16] <Nasp> I could see their event sourcing useful
[02:22:42] <Slade> https://dotnet.github.io/orleans/docs/grains/transactions.html   <-- you're asking rtfm questions here
[02:36:36] <JakeSays> i just love printf debugging
[02:40:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:55:38] *** Quits: Guest82 (~Guest82@2a02:c7f:582d:5100:c5a0:7484:c667:ac69) (Quit: Client closed)
[03:01:04] *** Quits: hseg (~hseg@185.120.124.34) (Remote host closed the connection)
[03:01:23] *** Joins: hseg (~hseg@185.120.124.34)
[03:02:10] <Nasp> No you don't
[03:02:48] <JakeSays> corect
[03:05:16] *** Joins: PanickedKernel (~PanickedK@user/panickedkernel)
[03:07:09] *** Quits: PanickedKernel (~PanickedK@user/panickedkernel) (Client Quit)
[03:08:39] *** Joins: PanickedKernel (~PanickedK@user/panickedkernel)
[03:20:06] *** Quits: PanickedKernel (~PanickedK@user/panickedkernel) (Quit: Leaving)
[03:21:38] *** Quits: SlimmyJimmy (SlimmyJimm@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[03:23:58] *** Quits: hseg (~hseg@185.120.124.34) (Remote host closed the connection)
[03:24:17] *** Joins: hseg (~hseg@185.120.124.34)
[03:41:47] *** Quits: hseg (~hseg@185.120.124.34) (Remote host closed the connection)
[03:42:06] *** Joins: hseg (~hseg@185.120.124.34)
[03:45:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:46:24] <Lizard_> Man Kafka is pretty cool, the log workflow it provide and all its facilities is pretty much 75% of my backend codes that could just go *poof*
[03:52:26] <Lizard_> goes to great pain to make preallocated blocks with adapted batching, fine tuned everythang "I can get 10k user per server woohoo" roll a quick and dirty off the shell thingy test "I can get 15k, god damnnit..."
[03:53:11] <Lizard_> I wanted to play with Redis, but no one had ever told me it was total shite on Windows :/
[03:56:47] <Lizard_> Nasp, RabbitMQ is awesome for your IPC/RPC
[04:00:16] <Lizard_> Rabbit cluster goes Puuurrrr, flow is great, but if it get backlogged it crap itself... lots of fine tunning here and there all the time
[04:02:04] <Lizard_> Kafka is great at putting stuff on a disk afaik
[04:07:28] <Lizard_> kafka schema handling is another level from wvf bullshit
[04:07:32] <Lizard_> wcf*
[04:08:11] <hseg> is it possible to declare a class as implementing an interface after-the-fact?
[04:08:14] <Lizard_> but it not as flexible as Rabbit, where you can go in and change everything all the time easily
[04:08:21] <Lizard_> makes it safer tho
[04:08:50] <hseg> have a class I want to ensure implements the interface I've just written
[04:10:27] <Lizard_> an adaptor that implement your interface and subclass the inherited thingy
[04:11:08] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[04:11:36] <hseg> oof. that's going to generate a bunch of churn, this is a core bit of state
[04:12:17] <hseg> just noticed I'm lucky enough the class is declared partial, might be able to add a partial declaration
[04:13:30] <hseg> except I don't have access to the members of one partial from another?
[04:15:18] *** Joins: SlimmyJimmy (~SlimmyJim@136.37.25.140)
[04:15:18] *** Quits: SlimmyJimmy (~SlimmyJim@136.37.25.140) (Changing host)
[04:15:18] *** Joins: SlimmyJimmy (~SlimmyJim@user/slimmyjimmy)
[04:18:16] <Lizard_> oop do you speak it motherf...
[04:18:51] * Lizard_ makes the Jackie Chan *brain full of fuck* pose
[04:18:55] <Nasp> Kiz
[04:18:55] <hseg> some. have gotten a bit rusty in the past couple years
[04:19:17] <hseg> and the shoddy codebase I'm working with is not helping things
[04:19:22] <Nasp> Lizard_: yeah rabbit is great but yes it chokes if you have a huge queue  in memory
[04:20:31] <Lizard_> Nasp, my latest fun gotch, above 10k active queue on a node you need to desactive rates reporting, or it crap itself
[04:20:46] <hseg> what is wrong with my intuition that "all partial declarations for a given class are merged before compiling, so each should have access to all the fields"
[04:20:46] <hseg> ?
[04:22:15] <hseg> ah ffs, wrong namespace
[04:22:34] <Nasp> Lizard_: messages or queues
[04:22:40] <Lizard_> queues
[04:22:47] <Nasp> Ahh
[04:23:11] <Nasp> Because messages it should handle fine, do you dynamically create queues
[04:23:20] <Lizard_> no
[04:23:21] <Nasp> Because it sounds like a lot of queues
[04:23:36] <Lizard_> it is, but it's one per client
[04:23:53] <Nasp> Hmm
[04:24:02] <Nasp> Routing keys?
[04:24:17] <Lizard_> yeah one exchange and topic routing
[04:24:29] <Nasp> Or just a straight up queue
[04:24:46] <Lizard_> but it's the management rates reporting that blocks when there is too many active queus
[04:25:05] <Lizard_> and it destroy performance
[04:27:14] <Lizard_> It handle maybe 1000 msg/s incoming that gets splitted to metrics I can only quantify as buttloads to all the services internally, so it gets quite a bit of use
[04:27:15] <hseg> gdi. my class is defined in a different project
[04:28:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:29:35] <hseg> if only static members were allowed as implementations of an interface, I'd be able to just write an extension method for my class and be done with it
[04:33:04] <Lizard_> another gotcha, in lazy or persistent ack is blocking until the message it flushed, it takes at least 100ms, so you need to use batch at least that long to make it  purrr
[04:33:30] *** Joins: robopat (patrick@triton.blinkenshell.org)
[04:33:44] <hseg> hrmph. and I can't even cheat and put the function in a related class I control instead, because then I'd want the function to be static and I'm back to square one
[04:34:26] <Lizard_> "static" you are doing it wrong...
[04:34:42] <hseg> ok then how else would you do it?
[04:34:50] <Lizard_> either implement you interface and use it, or make an adaptor and use it
[04:34:59] <Lizard_> I dont see how it is such a problem
[04:35:21] <hseg> i have two braindead classes that I can't really change, that expose slightly different names for nominally the same interface
[04:35:32] <hseg> they're already deeply embedded in the codebasee
[04:35:47] <hseg> so I'd _like_ to slap on a unifying interface for the both of them
[04:36:09] <hseg> except I can't, because telling the language they implement the interface is impossible
[04:36:23] <hseg> because the language expects all interfaces to be declared with the class
[04:36:44] <hseg> and hence extending the class is impossible for people writing new interfaces
[04:37:07] <hseg> problem with interface: need to edit the class definition
[04:37:23] <hseg> problem with adapter: need to change all use sites to use the new interface
[04:38:08] <hseg> both of which, while good hygiene because they will decouple some of the system, are comically large for their benefit
[04:40:09] <hseg> at this point, I'm about ready to throw in the statically typed towel and just typecase this
[04:40:22] <Lizard_> Nasp, well I mean do create queue dynamically, but it's driven by sales/client management
[04:40:24] <hseg> which will be an atrocious hack, but at least it'll work
[04:41:11] <Lizard_> Iyou can have multiple level key which is just awesome, ie someexchange.orgID.ClientID.somespecificmessagetype
[04:43:18] <Lizard_> most clients are kind of stupid handling channels, they are not thread safe, but technically you only need to maintain as much as you have active thread in your pool
[04:43:24] <Lizard_> and 2 connection per app
[04:44:10] <Lizard_> like they are full duplex, but you need to think of the acks already going the other way
[04:45:26] <Lizard_> if you publish on a subscibe bus you gonna have a bad time
[04:58:12] <Lizard_> hseg, you can either be Wally and do nothing at all, or do your job and own that pile of crap, you should see my pile of crap, it's Yuge
[04:59:53] <hseg> this is not my crap, it's the crap that's been shoved on my plate
[05:00:22] <Lizard_> when you take 8 years to rewrite a pile of crap you could have written in 6 months, but you need to keep it alive too
[05:00:41] <hseg> _sigh_ ^
[05:01:25] <hseg> documenting this at least has given me an idea -- I don't need to convert the entire codebase to the adapted versions
[05:01:39] <hseg> just the points where I need the unified interface
[05:02:18] <hseg> and I might even be able to have good ergonomics with some implicit casting
[05:03:21] <hseg> ofc, all this ignores the fact that a) the necessity for this interface is pretty short-term and b) typecase is implementable in under a dozen lines of code, so why bother?
[05:03:35] <hseg> might also be a function of it being the end of my workday and me being exhausted
[05:04:45] <hseg> going to bed, hopefully this'll seem less daunting in the morning
[05:04:55] <hseg> good night, and thanks!
[05:05:04] *** Quits: hseg (~hseg@185.120.124.34) (Remote host closed the connection)
[05:09:02] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (Quit: Connection closed)
[05:17:04] <Lizard_> kafka also has data retention policies built in which is nice
[05:30:06] *** Quits: Lizard_ (~Lizard@96-127-195-85.qc.cable.ebox.net) (Read error: Connection reset by peer)
[05:45:57] *** Joins: ASUS (~ASUS@user/ASUS)
[05:47:45] <ASUS> When a .Select() is used on a String, what is the return type?
[05:48:06] <ASUS> string*
[05:48:10] <Xenoprimate_Surf> It treats the string as an enumerable of Char
[05:48:31] <ASUS> so the return type is a enumerable Char?
[05:48:49] <Xenoprimate_Surf> The return type is whatever you return from the given delegate
[05:49:10] <Xenoprimate_Surf> (i.e. an enumerable of that type)
[05:49:19] <ASUS> What's a deleate
[05:49:21] <ASUS> delegate*
[05:49:31] <Xenoprimate_Surf> A reference to another function
[05:49:37] <ASUS> oh
[05:49:47] <ASUS> like a function pointer in C?
[05:50:02] <ASUS> or a reference to a function in C++ with &
[05:50:04] <Xenoprimate_Surf> Kind of. It's a bit more advanced, it captures the single-dispatch target (i.e. 'this')
[05:50:20] <Xenoprimate_Surf> There are actual function pointers as well in C# but they're very rarely used
[05:50:33] <ASUS> I know C and C++
[05:50:36] <ASUS> but C# is new to me
[05:50:38] <Xenoprimate_Surf> okay
[05:50:49] <ASUS> I know Java too, if it helps
[05:50:56] <Xenoprimate_Surf> .Select() takes a delegate of type Func<TIn, TOut>
[05:51:14] <ASUS> T stands for Type?
[05:51:50] <Xenoprimate_Surf> Yeah. TIn will be the input collection type, so string implements IEnumerable<char>, which means that TIn will be char
[05:51:54] <Xenoprimate_Surf> TOut will be whatever you want
[05:52:31] <Xenoprimate_Surf> So if you have a function say, static int CharToInt(char input) => (int) input; and you invoke Select like: Select(CharToInt)
[05:52:42] <Xenoprimate_Surf> Your return type will be IEnumerable<TOut>, which will be IEnumerable<int>
[05:53:02] <Xenoprimate_Surf> Most of the type with linq functions people use anonymous function delegates (i.e. lambdas) though
[05:53:11] <ASUS> ok
[05:53:16] <Xenoprimate_Surf> So you'd write myStr.Select(c => (int) c)
[05:53:39] <ASUS> https://replit.com/@may68/PettyDeliciousCoordinates#main.cs
[05:53:47] <ASUS> something is wrong with this
[05:54:37] <Xenoprimate_Surf> Yeah
[05:54:40] <Xenoprimate_Surf> That won't compile
[05:55:00] <Xenoprimate_Surf> s is of type string, s.Select() returns an object of type IEnumerable<TOut>
[05:55:12] <Xenoprimate_Surf> (in your case, IEnumerable<char>)
[05:55:23] <ASUS> right
[05:55:57] <ASUS> What the heck is this IEnumerable thing
[05:55:59] <ASUS> I see it all the time
[05:56:13] <Xenoprimate_Surf> It represents any "thing" that can be enumerated (iterated over)
[05:56:31] <Xenoprimate_Surf> Most often a collection, but not always. For example you can make an IEnumerable<> that has no end
[05:59:57] *** Joins: malt (~malt@user/malt)
[06:01:19] <ASUS> so after calling Select, I need to convert IEnumerable<Char> to a string?
[06:01:27] <Xenoprimate_Surf> If that's what  you want to do, yes
[06:01:42] <Xenoprimate_Surf> The easiest way is new String(myEnumerable.ToArray())
[06:02:02] <ASUS> what if the TOut is a string
[06:02:05] <ASUS> instead of a char
[06:02:17] <Xenoprimate_Surf> I would use String.Join() in this case probably
[06:02:20] <ASUS> how to convert IEnumerable<string> to a string
[06:02:21] <ASUS> ok
[06:02:29] <ASUS> right
[06:02:45] <ASUS> why can't I use .ToString()\
[06:02:52] <Xenoprimate_Surf> You can use a StringBuilder also in both cases, it's higher performace, but a little more work (not much though)
[06:03:19] <ASUS> what happens when you call .ToString() on an IEnumerable<T>
[06:03:31] <Xenoprimate_Surf> .ToString() converts the underlying enumerable to a string. The class that's actually implementing IEnumerable<> doesn't have special logic for when its 'T' happens to be string or char
[06:04:36] <JakeSays> Nasp: https://imgur.com/a/pqAv3Jl
[06:05:03] <Xenoprimate_Surf> (In fact, it doesn't do anything with the enumerable items whatsoever)
[06:05:11] <Xenoprimate_Surf> Don't forget: Enumerables can be infinite length
[06:05:25] <Xenoprimate_Surf> So there's no reasonable way for a .ToString() to do anything with the enumerable elements
[06:05:32] *** Quits: SlimmyJimmy (~SlimmyJim@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[06:07:29] *** Joins: Brett__ (~Brett@27-32-147-253.static.tpgi.com.au)
[06:09:59] <ASUS> return new String(str.Select(x=>Char.IsUpper(x)?Char.ToLower(x):Char.ToUpper(x)).ToArray());
[06:10:10] <ASUS> does this look disgusting to you?/
[06:10:20] <ASUS> it just inverts the case
[06:10:29] *** Quits: Brett[Air] (~Brett@27-32-147-253.static.tpgi.com.au) (Ping timeout: 256 seconds)
[06:10:31] <ASUS> but seems so verbose
[06:10:49] <ASUS> javascript does maps so much nicer
[06:13:49] <JakeSays> ASUS: what is that mess
[06:14:05] <JakeSays> and js doesn't do anything nicer
[06:16:51] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:18:32] <Xenoprimate_Surf> ASUS that does invert the case yeah
[06:19:41] <ASUS> yeah'
[06:20:21] <ASUS> JakeSays, I'm trying to do functional programming in C#.
[06:24:11] <Xenoprimate_Surf> What do you miss from JS?
[06:24:50] <JakeSays> insanity
[06:24:51] <ASUS> I dunno, seems easier, don't need to do to array and new string etc
[06:24:54] <ASUS> return string.Concat(str.Select(x=>char.IsUpper(x)?char.ToLower(x):char.ToUpper(x)));
[06:25:00] <ASUS> that seems to be a better solution
[06:25:02] <ASUS> right"
[06:25:31] <ASUS> yeah, JS does some weird shit like [] + [] and {} + []
[06:25:53] <Xenoprimate_Surf> String.Concat will work, sure
[06:26:04] <ASUS> the designer of C# took more than a few days to create C#
[06:26:14] <ASUS> as compared to Eich who took less than a week
[06:26:26] <JakeSays> and it shows
[06:26:52] <ASUS> My Uncle says C# is just a rip-off of Java
[06:26:55] <Xenoprimate_Surf> As for the ToArray() etc, don't forget C# is strongly-typed. IEnumerable<> like I said can theoretically be of infinite length, so .ToArray() has to come first to convert it to a collection of finite length
[06:27:01] <Xenoprimate_Surf> That being said, a lot of the API ignores that >.>
[06:27:06] <ASUS> ouch
[06:27:09] <JakeSays> ASUS: your uncle is an idiot
[06:27:33] <ASUS> I guess so, he wrote an entire bitcoin pool in C.
[06:27:46] <ASUS> he thought performance is the most important thing
[06:27:56] <ASUS> but C is so easy to make mistakes in
[06:27:59] <Xenoprimate_Surf> C# can get close to C++ perf and sometimes even beat it
[06:28:01] <ASUS> and so hard to debug
[06:28:07] <Xenoprimate_Surf> Overall C will still win over both
[06:28:14] <Xenoprimate_Surf> But they're all quite close
[06:28:18] <JakeSays> ASUS: that all depends on the developer writing the C
[06:28:25] <JakeSays> Xenoprimate_Surf: and C is not faster than C++
[06:28:40] <Xenoprimate_Surf> I've triggered JakeSays :D He's big in to his C++ these days
[06:28:53] <JakeSays> hey just keepin' it real, dammit
[06:28:55] <Xenoprimate_Surf> Well to be honest I've never benchmarked C vs C++
[06:29:00] <Xenoprimate_Surf> So I'll take your word for it
[06:29:03] <Xenoprimate_Surf> But I'd always heard
[06:29:23] <JakeSays> you've heard that from people trying to justify sticking with C
[06:29:34] <Xenoprimate_Surf> I mean, that seems sensible
[06:29:39] <Xenoprimate_Surf> :p
[06:29:42] <Xenoprimate_Surf> I hate C++ man
[06:29:52] <JakeSays> but given that C++ is a superset of C, it's impossible for c++ to be slower
[06:30:10] <Xenoprimate_Surf> Well I figured it was something to do with smaller lang = compiler optimisations are easier
[06:30:59] <JakeSays> Xenoprimate_Surf: there's only so many ways to optimize a for loop.
[06:32:00] <Xenoprimate_Surf> haha
[06:32:09] <ASUS> C++ is definitely not a C superset
[06:32:19] <ASUS> there are some things that will break compatibility
[06:32:50] <ASUS> some C statements won't compile in a C++ compiler
[06:33:34] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:33:36] <JakeSays> ASUS: C++ is definitely a superset of C
[06:33:56] <JakeSays> or is that another gem from uncle
[06:34:31] <ASUS> char *s = malloc(100);
[06:34:31] <ASUS> This is correct C code, but in C++ this code is invalid.
[06:34:44] <ASUS> This is because malloc() return "void *". In C you can cast void * to any other pointer type. In C++ you can not.
[06:35:09] <ASUS> C and C++ are two different languages.
[06:35:23] <ASUS> try it and see
[06:35:45] <JakeSays> i've been working with both languages probably longer than you have been alive
[06:35:50] <ASUS> char *s = (char *) malloc(100); will work
[06:36:09] <JakeSays> just because that line won't compile in C++ doesn't mean it's not a superset
[06:36:27] <ASUS> I mean mathematically it isn't
[06:36:51] <JakeSays> hmm. must be genetic
[06:36:58] <ASUS> huh?
[06:37:53] <ASUS> if C++ is a superset, all of C is in the set of C++
[06:37:55] <ASUS> but it isn't
[06:38:05] <ASUS> maybe go back to math school
[06:38:38] <Xenoprimate_Surf> lol you two
[06:39:27] <Xenoprimate_Surf> Brings me back to the old days of IRC
[06:40:00] <Xenoprimate_Surf> JakeSays stop being an ass man, and ASUS little bits of syntax here and there aren't enough to really say it's not a superset in general
[06:40:08] <Xenoprimate_Surf> Like, I could say that C# is more or less a superset of Java
[06:40:23] <Xenoprimate_Surf> Even though yes, technically there are things in Java we don't have in C#
[06:40:26] <JakeSays> Xenoprimate_Surf: dude.. go fuck yourself.
[06:41:09] <Xenoprimate_Surf> JakeSays your anger trigger has the lowest trigger weight ever lol
[06:51:31] <ASUS> return txt.ToLower().Contains("bomb") ? "Duck!!!" : "There is no bomb, relax."; I like how I can have one statement functions...
[06:53:28] *** Quits: Brett__ (~Brett@27-32-147-253.static.tpgi.com.au) (Ping timeout: 250 seconds)
[07:11:31] <Xenoprimate_Surf> ASUS you don't even need to specify a method scope if it's a one-liner
[07:11:50] <Xenoprimate_Surf> public static string Double(str input) => input + input;
[07:12:47] <ASUS> yes
[07:12:52] <ASUS> lambda it
[07:30:30] *** Quits: Kalroth (~Kalroth@knas.io) (Quit: Nooo...)
[07:36:25] *** Quits: Xenoprimate_Surf (Xenoprimat@gateway/vpn/protonvpn/xenoprimate) (Ping timeout: 256 seconds)
[07:38:51] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:43:47] *** Quits: bin101 (~bin101@user/bin101) (Ping timeout: 256 seconds)
[07:45:23] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[07:46:50] *** Joins: bin101 (~bin101@user/bin101)
[07:58:31] *** Quits: ASUS (~ASUS@user/ASUS) (Ping timeout: 256 seconds)
[08:00:13] *** Joins: ASUS (~ASUS@user/ASUS)
[08:01:19] <ASUS> Should I use this.blah = in constructors
[08:01:32] <ASUS> Or should I make the member variables _blah
[08:01:45] <ASUS> And go _blah = blah
[08:02:50] <ASUS> If blah is the constructor argument
[08:04:06] *** Joins: Kalroth (~Kalroth@knas.io)
[08:07:47] *** Quits: ASUS (~ASUS@user/ASUS) (Ping timeout: 256 seconds)
[08:44:17] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[09:08:52] *** Joins: spinningCat (~spinningC@94.54.210.37)
[09:13:57] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[09:23:54] *** Quits: shoelaces (~shoelaces@pool-100-38-191-176.nycmny.fios.verizon.net) (Remote host closed the connection)
[09:25:51] *** Quits: spinningCat (~spinningC@94.54.210.37) (Changing host)
[09:25:51] *** Joins: spinningCat (~spinningC@about/web/muscles)
[10:21:10] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[10:33:16] *** Joins: kobo (~kobo___@c-d02b225c.029-1613-6f72651.bbcust.telenor.se)
[10:52:23] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:79c1:f45:56c2:de77)
[10:59:01] *** Joins: ASUS (~ASUS@user/ASUS)
[11:01:17] *** Quits: spinningCat (~spinningC@about/web/muscles) (Ping timeout: 240 seconds)
[11:05:43] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[11:17:16] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Remote host closed the connection)
[11:19:21] *** Joins: ASUS (~ASUS@user/ASUS)
[11:19:41] *** Joins: _gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:cc52:44af:9baf:2043)
[11:22:38] *** Quits: _gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:cc52:44af:9baf:2043) (Read error: error:1408F119:SSL routines:ssl3_get_record:decryption failed or bad record mac)
[11:23:03] *** Joins: _gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:cc52:44af:9baf:2043)
[11:23:39] *** Quits: _gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:cc52:44af:9baf:2043) (Client Quit)
[11:28:17] <biberu> o/
[11:31:00] <MatthiasVance> \o/
[11:34:26] <biberu> \o
[11:52:57] *** Quits: ASUS (~ASUS@user/ASUS) (Ping timeout: 240 seconds)
[11:53:32] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:79c1:f45:56c2:de77) (Ping timeout: 240 seconds)
[11:56:11] *** Joins: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:d52d:a5b7:e4e0:2e5c)
[12:08:22] <Nasp> JakeSays:  Uhh effects
[12:12:57] *** Joins: ASUS (~ASUS@user/ASUS)
[12:17:38] <canton7> ASUS, up to yuo
[12:22:16] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[12:23:17] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[12:25:50] *** Joins: jonp` (~jonp@about/csharp/jonp)
[12:25:50] *** ChanServ sets mode: +v jonp`
[12:25:53] *** jonp` is now known as Guest78
[12:28:32] *** Quits: jonp (~jonp@about/csharp/jonp) (Ping timeout: 240 seconds)
[12:30:58] *** Joins: Gaboradon (~Gaboradon@user/Gaboradon)
[12:36:53] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[12:42:54] *** entropyg1 is now known as entropygain
[12:43:03] *** Quits: entropygain (levitate@2600:3c01::f03c:91ff:fecc:c443) (Changing host)
[12:43:03] *** Joins: entropygain (levitate@user/entropygain)
[12:47:31] *** Joins: eurogos (~jongoslin@2a00:23a8:4cca:5901:f40f:b586:ddee:bc69)
[12:50:34] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f)
[13:02:40] *** Joins: dotdflat (~root@bl20-246-182.dsl.telepac.pt)
[13:11:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:13:38] *** Joins: Babbage (~Babbage@94.11.27.96)
[13:15:34] <Babbage> hey
[13:30:28] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:33:13] *** Joins: ASUS (~ASUS@user/ASUS)
[13:36:59] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[13:37:59] *** Joins: ASUS (~ASUS@user/ASUS)
[13:39:55] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[13:41:03] *** Joins: ASUS (~ASUS@user/ASUS)
[13:43:16] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[13:44:19] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[13:45:15] *** Joins: ASUS (~ASUS@user/ASUS)
[13:52:53] *** Quits: ASUS (~ASUS@user/ASUS) (Ping timeout: 256 seconds)
[13:53:09] <MatthiasVance> So apparently there is now a package System.Threading.RateLimiting, and also RateLimit implementation in Polly but both have only examples for the *server* side. Anyone already done something with that or knows how to follow it up with ... just wait until the limit has passed then proceed with doing the request?
[14:04:50] *** Joins: ASUS (~ASUS@user/ASUS)
[14:09:57] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[14:12:24] <Tobbi_> Morning
[14:29:13] *** Joins: ASUS (~ASUS@user/ASUS)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:33:31] *** Quits: ASUS (~ASUS@user/ASUS) (Client Quit)
[14:36:45] *** Joins: SlimmyJimmy (~SlimmyJim@136.37.25.140)
[14:36:45] *** Quits: SlimmyJimmy (~SlimmyJim@136.37.25.140) (Changing host)
[14:36:45] *** Joins: SlimmyJimmy (~SlimmyJim@user/slimmyjimmy)
[14:37:14] <eurogos> ...peasants
[14:37:30] <MatthiasVance> Tobbi_: Good morning!
[14:37:38] <Tobbi_> eurogos: Very good.
[14:37:43] <Tobbi_> You've learned :P
[14:37:45] <dotdflat> MatthiasVance: You should look the retry-after header.
[14:38:06] <MatthiasVance> dotdflat: Yeah .. no. I'd still spam a lot of async requests. :D
[14:39:48] <MatthiasVance> Right now I use the Polly RateLimit policy combined with WaitAndRetryForever.. I am not sure how I feel about all requests trying again after X, when the limit is always 1 per 30 sec :D
[14:42:49] <dotdflat> 1req/30sec? Wow, is that an app from last century? ;P
[14:42:56] <MatthiasVance> I don't know and .. I don't care :D
[14:43:20] <MatthiasVance> Always the same things happen in integrator companies xD
[14:43:23] <MatthiasVance> *aggregator
[14:43:44] <MatthiasVance> You get Excel files in e-mail for example (luckily as of now not a real use case, but it happened before)
[14:43:51] <MatthiasVance> And you have to get the data out of there :D
[14:46:44] <dotdflat> That does not justify the 1/30sec insane limit I would say.
[14:48:10] <dotdflat> This is how you should do it if you want to kill the performance of a system :D
[14:54:55] <MatthiasVance> Well, yes
[14:55:19] <MatthiasVance> I have no clue either xD
[14:59:11] <Tobbi_> Yay, I managed to crash SQL Server
[14:59:23] <Tobbi_> Or rather, the management explorer
[14:59:29] <dotdflat> It's not that hard actually.
[14:59:48] <Tobbi_> true
[15:00:19] <dotdflat> ;)
[15:03:28] <Tobbi_> I guess I'll just let it continue doing its thing
[15:03:33] <Tobbi_> Until it un-hangs :D
[15:04:57] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[15:08:26] <Tobbi_> Or maybe not.
[15:10:42] *** Joins: Alexthek1d (~Alexthek1@p5b3ae9ea.dip0.t-ipconnect.de)
[15:15:21] <MatthiasVance> Definitely not.
[15:16:29] <Tobbi_> Maybe I should play some games...
[15:21:30] *** Quits: SlimmyJimmy (~SlimmyJim@user/slimmyjimmy) (Quit: Going offline, see ya! (www.adiirc.com))
[15:22:01] <MatthiasVance> Tobbi_: Definitely!
[15:22:25] <Tobbi_> :D
[15:22:36] <Tobbi_> You're too agreeable.
[15:22:39] <Tobbi_> It's too offputting
[15:26:29] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:29:41] <ap5> https://www.warp.dev/ :O
[15:30:13] <MatthiasVance> Tobbi_: Couldn't agree more!
[15:30:18] <Tobbi_> :D
[15:30:36] <Tobbi_> I found my trigger problem.
[15:30:43] <Tobbi_> The problem is the trigger
[15:30:44] <Tobbi_> :D
[15:31:28] <Miles8of9> lol warp dev...
[15:32:08] <Tobbi_> huh?
[15:32:11] <Tobbi_> Isn't that a nice thing?
[15:33:29] <Inge> Triggering intensifies...
[15:36:47] <Tobbi_> Yes
[15:36:50] <Tobbi_> I feel triggered as well.
[15:37:38] <Tobbi_> SELECT -> SELECT DISTINCT
[15:37:41] <Tobbi_> I hate both of that.
[15:37:43] <Tobbi_> I hate SQL.
[15:37:45] <Tobbi_> I hate programming
[15:37:48] *** Joins: Logiar (~logiar@nerdsluts.net)
[15:37:52] <MatthiasVance> Why do you need DISTINCT
[15:37:59] <MatthiasVance> Stop doing all of that then?
[15:38:03] <Tobbi_> :D
[15:38:29] <Tobbi_> IDK why I need distinctz.
[15:38:32] <Tobbi_> I get duplicates otherwise.
[15:38:53] <Tobbi_> I join the "inserted" table with another one
[15:38:58] <Tobbi_> It's okay anyway.
[15:39:01] <Tobbi_> As long as it works.
[15:43:23] <MatthiasVance> Why not group and select one?
[15:43:32] <MatthiasVance> One must be different from the other?
[15:43:45] <MatthiasVance> If things change, it will break :D
[15:44:10] <Tobbi_> Yeah, good idea :D
[15:44:17] <Tobbi_> IDK
[15:44:22] <Tobbi_> I believe it works with distinct.
[15:44:28] <Tobbi_> I'll let the customer confirm that.
[15:44:44] <Tobbi_> I'm glad it's off my mind right now.
[15:45:23] <Inge> if you join and get duplicates and don't understand why, you might need to increase your understanding of how SQL works
[15:45:28] <Inge> it is a ... fairly central idea
[15:46:08] <MatthiasVance> Indeed, alarm bells go off every time I see DISTINCT somewhere
[15:47:27] <Tobbi_> Inge: I know how SQL works.
[15:47:43] <Tobbi_> But I'm not really in the mood
[15:48:00] <Inge> < Tobbi_> IDK why I need distinctz. I get duplicates otherwise. <-- OK if you say so!
[15:48:15] <Tobbi_> Inge: I believe the table I'm joining to might have duplicate data.
[15:48:21] <Tobbi_> But that was my first attempt and removing that did not help
[15:48:25] <Inge> kk
[15:48:40] <Tobbi_> Okay, fine, you convinced me.
[15:48:44] <Tobbi_> I'll look into this further.
[15:49:12] <Inge> I think DISTINCT has gotten me in trouble more times than it actually solved a problem for me, in SQL
[15:49:31] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:50:11] <ap5> Inge, why?
[15:50:17] <MatthiasVance> Tobbi_: At least you have solved the issue and you can look into it further without pressure :D
[15:50:30] <Tobbi_> true
[15:51:07] <Inge> ap5: Just that due to how sql works, DISTINCT is often not the tool for the job.
[15:52:16] <ap5> I know it is costly, but how did you solve it?
[15:55:05] <ap5> a group by?
[15:59:08] *** Quits: dotdflat (~root@bl20-246-182.dsl.telepac.pt) (Ping timeout: 268 seconds)
[16:05:16] <Inge> yeah usually the solution is a group by
[16:05:36] <Inge> or the solution is figuring out that no, distinct doesn't help in your case - either the data was not well enough understood or something else...
[16:09:21] <ap5> :D
[16:09:27] *** Quits: _genuser_ (~Guest2@47.184.35.232) (Ping timeout: 256 seconds)
[16:09:30] <ap5> SQL is funny
[16:11:25] *** Joins: dotdflat (~root@bl20-246-182.dsl.telepac.pt)
[16:14:12] <MatthiasVance> Wait until you've watched the sequel
[16:20:43] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:b44a:f768:9ead:27f) (Ping timeout: 268 seconds)
[16:21:18] *** Quits: Alexthek1d (~Alexthek1@p5b3ae9ea.dip0.t-ipconnect.de) (Quit: Leaving)
[16:30:42] <edcba> yeah i hate distinct
[16:36:02] *** Quits: dotdflat (~root@bl20-246-182.dsl.telepac.pt) (Ping timeout: 240 seconds)
[16:42:49] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:78e3:d844:aabc:c1a4)
[16:46:54] <ap5> MatthiasVance that was a very good joke
[16:48:04] <Tobbi_> Alright, I got the source problem.
[16:48:09] <Tobbi_> My join statement joined unrelated data
[16:50:13] <MatthiasVance> ap5: I love puns :D
[16:52:01] *** Joins: Xenoprimate (Xenoprimat@gateway/vpn/protonvpn/xenoprimate)
[16:52:07] <Xenoprimate> Morning/afternoon
[16:52:11] <Xenoprimate> /evening
[16:55:09] *** Joins: PMunch (~PMunch@user/pmunch)
[16:56:45] <PMunch> Hello everyone! I'm trying to figure out a memory leak in my application but I'm a bit stumped.
[16:57:28] <PMunch> I ran my little test script which passes a lot of data through my application, and the system tells me that my application is now using ~5Gb of memory.
[16:57:40] <PMunch> I'm following this to do the debugging: https://docs.microsoft.com/en-us/dotnet/core/diagnostics/debug-memory-leak
[16:58:02] *** Joins: ASUS (~ASUS@user/ASUS)
[16:59:10] *** Joins: spinningCat (~spinningC@94.54.210.37)
[16:59:10] *** Quits: spinningCat (~spinningC@94.54.210.37) (Changing host)
[16:59:10] *** Joins: spinningCat (~spinningC@about/web/muscles)
[16:59:14] <PMunch> `dotnet-counters monitor` tells me that the GC holds 169MB of data, which seems weird. Then continuing that article I created a memory dump and that message said "Written 5203132416 bytes (1270296 pages) to core file" which seems closer to what I expected.
[17:00:39] <Xenoprimate> If the GC is only retaining a fraction of the retained memory, the rest of it is perhaps allocated off the managed heap
[17:00:45] <PMunch> The bottommost entries looks like this: http://ix.io/3Nnq
[17:01:22] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[17:01:27] <Xenoprimate> So you have 533K string instances retained?
[17:01:30] <PMunch> Aha, then it would make sense that they don't agree about the size of the memory
[17:01:45] <PMunch> Yeah apparently, but those only account for ~50Mb of memory..
[17:01:55] <PMunch> If I'm reading that output right
[17:03:07] <Xenoprimate> I don't know the dotnet tool that well (I use DotMemory), I don't know if the right-hand column is in bytes or kb or whatever
[17:03:08] *** Joins: dotdflat (~root@bl20-246-182.dsl.telepac.pt)
[17:03:10] <PMunch> I tried to use `dumpheap -mt` and `gcroot -all`, but that just tells me "Found 0 roots"
[17:03:21] <Xenoprimate> But 500k+ string instances is definitely something to investigate
[17:04:18] <PMunch> I mean the header just reads "TotalSize" so I'm assuming bytes..
[17:04:21] <Guest78> how big are those instances that they weren't collected in Generation0?
[17:04:28] *** Guest78 is now known as jonp
[17:04:49] <PMunch> According to `dumpheap -mt` they're mostly 80 bytes
[17:05:06] <jonp> then why do they still exist?  Weird.
[17:05:07] <PMunch> Largest ones are ~650 bytes
[17:05:22] <PMunch> Yeah it's almost like the GC has just stopped
[17:06:17] *** Joins: ASUS (~ASUS@user/ASUS)
[17:11:35] *** Quits: ASUS (~ASUS@user/ASUS) (Ping timeout: 256 seconds)
[17:13:10] *** Joins: ASUS (~ASUS@user/ASUS)
[17:14:25] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[17:15:19] *** Joins: mikrosis (~mikrosis@dynamic-046-114-175-184.46.114.pool.telefonica.de)
[17:20:28] *** Joins: Assault (~Assault@87-95-55-3.bb.dnainternet.fi)
[17:24:30] <PMunch> Hmm, it seems to only happen in a certain error scenario
[17:25:03] <PMunch> When I hammer my application hard enough and get a "Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite Error 5: 'database is locked'." exceptions
[17:25:17] *** Quits: mikrosis (~mikrosis@dynamic-046-114-175-184.46.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[17:25:55] *** Joins: mikrosis (~mikrosis@dynamic-046-114-172-042.46.114.pool.telefonica.de)
[17:29:04] <PMunch> Still a lot of root-less strings lying around though
[17:32:13] <MatthiasVance> Find out where they are coming from
[17:32:15] <MatthiasVance> :D
[17:32:27] <PMunch> Kinda hard since they're not rooted anywhere..
[17:33:01] *** Joins: Klinda (~superleag@user/klinda)
[17:35:34] <MatthiasVance> Time to attach a profiler?
[17:35:39] *** Joins: Guest53 (~Guest53@2a02:c7f:582d:5100:8401:d03f:1589:7a9a)
[17:39:07] <PMunch> I guess
[17:42:15] <MatthiasVance> "Culprit seems to be between 20 and 60, hacker because of presence on IRC, programmer"
[17:43:23] <irwiss> fwiw you could solve the database lock if you use WAL in sqlite, not gonna help with the actual cause tho
[17:46:57] *** Quits: tracker1 (~tracker1@user/tracker1) (Ping timeout: 240 seconds)
[17:51:20] <PMunch> Hmm, I just get an error that "Keyword not supported: 'pragma journal_mode'"
[17:52:46] <guideX> sqllite doesn't handle a high level of concurrency
[17:53:06] <guideX> Switch to another database backend
[17:53:29] <guideX> it could be also; you left sql lite browser open
[17:56:05] <guideX> another way to go about this is to see what is happening, go to the command line and find out how many processes are using the file
[17:56:17] <guideX> fuser -v db.sqlite3
[17:56:29] <guideX> you know, when you see the error
[17:56:30] <MatthiasVance> 'fuser' is not recognized as an internal or external command, operable program or batch file.
[17:56:38] <MatthiasVance> ;p
[17:57:22] <guideX> oh hm, not in windows
[17:57:40] <guideX> there's that iomega program that'll tell you if a file is in use
[17:57:42] <guideX> in windows
[17:58:09] <guideX> iobit unlocker
[17:58:37] <guideX> use iobit unlocker in windows to see what is using it I guess
[17:59:38] <MatthiasVance> You can also use the built in Resource Monitor
[17:59:50] <MatthiasVance> Filter by path and then it shows you all the processes
[18:00:03] <guideX> ah yes
[18:00:19] <guideX> on windows server they have the open file handles thingy too
[18:00:24] *** Joins: tracker1 (~tracker1@user/tracker1)
[18:00:34] <guideX> not sure if that works for that
[18:00:51] <guideX> works great for angry ceos excel files
[18:02:35] *** Quits: dotdflat (~root@bl20-246-182.dsl.telepac.pt) (Ping timeout: 256 seconds)
[18:03:10] <MatthiasVance> xD
[18:03:24] <MatthiasVance> Ah yeah on the file server itself, I remember that
[18:05:59] *** Quits: Assault (~Assault@87-95-55-3.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[18:06:29] <PMunch> I'm on Linux, so that last bit doesn't really apply :P
[18:06:56] <ap5> pkill CEO
[18:07:01] <ap5> easy
[18:07:01] <MatthiasVance> WOW
[18:07:07] <PMunch> And no, I didn't leave any other program open with the database. It just happens when I try to push too much data through the system
[18:07:16] <MatthiasVance> All those strings probably
[18:07:17] <MatthiasVance> :P
[18:07:20] <PMunch> So it's likely a concurrency issue
[18:07:52] <PMunch> Yeah, I really need to figure out where all those come from, and why they don't disappear when they have no roots and the GC runs..
[18:13:16] <MatthiasVance> Are they large strings? Might be on the Large Object Heap?
[18:13:25] <MatthiasVance> And they would only be purged when there's memory stress?
[18:13:56] <MatthiasVance> Disclaimer: 🤷‍♂️
[18:14:23] <jmer> yo
[18:14:27] <MatthiasVance> yo
[18:14:29] <MatthiasVance> tell me what you want
[18:14:39] <jmer> world piece and a cup of steaming hot coffee
[18:14:40] *** Joins: dotdflat (~root@bl20-246-182.dsl.telepac.pt)
[18:14:43] <jmer> peace*
[18:15:07] <PMunch> MatthiasVance, nope they're fairly small
[18:15:15] <PMunch> Largest ones are about 650 bytes
[18:15:26] <jmer> man there's like 5 different representations of products in this codebase
[18:18:52] <MatthiasVance> jmer: Tell me what you really want
[18:20:01] <MatthiasVance> Get your act together
[18:27:35] <jmer> Now tell me what you want, what you really really want...
[18:28:34] <MatthiasVance> :D
[18:28:41] <MatthiasVance> Not shit and cigars, that's for sure
[18:28:55] <jmer> Shit and cigars... doesn't sound like a nice combo
[18:28:57] <MatthiasVance> (I googled earlier what zig-a-zig ah stands for)
[18:29:01] <jmer> but I guess they both smell pretty bad
[18:29:11] <jmer> ... what does it stand for MatthiasVance ?
[18:29:28] <MatthiasVance> That was their nickname for a guy that they didn't like (and the other way around) that would shit in their shared accomodation while smoking a cigar
[18:29:34] <MatthiasVance> shit and cigars
[18:31:52] <jmer> So they WANT to shit and smoke a zigar?
[18:31:53] <jmer> cigar*
[18:31:57] <MatthiasVance> no
[18:32:01] <MatthiasVance> oh
[18:32:05] <MatthiasVance> That's what it sounds like yeah
[18:32:17] <jmer> "I wanna really, really, really wanna zigazig ah"
[18:32:37] <jmer> MatthiasVance: I did NOT expect a deeper discussion of spice girls lyrics when I started my irccloud client 10 min. ago xD
[18:34:50] <MatthiasVance> jmer: Neither did I, it all started when you said "yo"
[18:35:02] *** Quits: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net) (Ping timeout: 240 seconds)
[18:36:16] *** Joins: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net)
[18:37:21] <ap5> yo feel a flow, get passa Paradox
[18:41:07] <jmer> ap5: oh noes... Music from the era of buffalo shoes
[18:41:50] <jmer> Ok... There was one good thing about buffalo shoes; you could easily see who was a flailing idiot
[18:47:20] <ap5> :D
[18:50:11] <MatthiasVance> Buffalo shoes?
[18:51:49] <biberu> https://www.vogue.com/article/buffalo-london-ruby-aldridge-aleali-may-spice-girls-platform-rave-spice-girls
[18:51:56] <biberu> i haven't been outside for a couple of years
[18:51:59] <biberu> is it like this?
[18:55:45] <jmer> yes
[18:55:46] <jmer> those
[19:00:39] * biberu stays inside
[19:13:00] *** Joins: ASUS (~ASUS@user/ASUS)
[19:17:57] <ap5> :D
[19:19:14] *** Quits: ASUS (~ASUS@user/ASUS) (Ping timeout: 250 seconds)
[19:23:58] *** Joins: ASUS (~ASUS@user/ASUS)
[19:32:06] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[19:34:20] *** Joins: ASUS (~ASUS@user/ASUS)
[19:37:42] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[19:46:04] <dotdflat> Not that elegant for a girl...say I.
[19:46:30] <ap5> Well, it once was
[19:49:33] *** Joins: khanred (~khanred@user/khanred)
[19:49:38] <khanred> o/
[19:49:50] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:50:05] *** Joins: ASUS (~ASUS@user/ASUS)
[19:57:52] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[19:58:48] *** Joins: ASUS (~ASUS@user/ASUS)
[20:02:14] <Guest53> Hello
[20:03:35] *** Quits: ASUS (~ASUS@user/ASUS) (Remote host closed the connection)
[20:03:42] <jonp> Guest53: hi!
[20:18:01] *** Quits: tracker1 (~tracker1@user/tracker1) (Ping timeout: 256 seconds)
[20:23:25] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 240 seconds)
[20:23:30] <Nasp> jmer:  Are trumpet pants also back?
[20:25:58] *** Joins: Trashlord (~trash@user/trashlord)
[20:28:04] *** Quits: mikrosis (~mikrosis@dynamic-046-114-172-042.46.114.pool.telefonica.de) (Quit: Connection closed)
[20:28:09] *** Quits: Babbage (~Babbage@94.11.27.96) (Remote host closed the connection)
[20:30:32] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 240 seconds)
[20:32:05] *** Joins: Trashlord (~trash@user/trashlord)
[20:33:22] *** Joins: tracker1 (~tracker1@user/tracker1)
[20:33:27] *** Joins: BSaboia_ (~bsaboia@187.19.136.30)
[20:43:40] *** Joins: hseg (~hseg@185.120.124.34)
[20:45:26] <hseg> Am on 7.3 using Json.NET. How do I A) permit a string member to be null and B) have it be omitted from serialization in that case?
[20:46:29] <hseg> judging by Json.NET docs, B) is achieved with a [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
[20:46:55] <Guest53> (Or at a higher level using JsonSerializerSettings)
[20:47:19] <hseg> but for the former, making a string? field causes the compiler to complain that nullable reference types aren't available in 7.3
[20:47:28] <Guest53> Because they aren't
[20:47:52] <hseg> OK, is there an alternative? Optional doesn't seem to be available either
[20:48:18] <Guest53> strings are references types. Reference types can be null.
[20:48:46] <hseg> ah, so I can just leave off the ?
[20:48:56] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 250 seconds)
[20:50:08] *** Joins: Trashlord (~trash@user/trashlord)
[20:58:11] <jonp> hseg: bump the $(LangVersion)` property in your .csproj to 8.0
[21:02:29] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:03:14] *** Joins: csrf (~csrf@user/csrf)
[21:06:25] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:06:43] * MatthiasVance nukes HomeAssistant :D
[21:06:53] <MatthiasVance> Too weakly typed
[21:07:06] <MatthiasVance> "You are most weakly typed. Goodbye!"
[21:07:12] <MatthiasVance> idk what they said in that TV show
[21:09:13] <khanred> The weakest link?
[21:09:17] <MatthiasVance> yeah
[21:09:26] <MatthiasVance> But then a translation to being weakly typed xD
[21:09:45] <khanred> lol
[21:10:32] *** Quits: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:d52d:a5b7:e4e0:2e5c) (Ping timeout: 240 seconds)
[21:12:03] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 256 seconds)
[21:13:25] <biberu> hseg: fwiw, it's easier if you can trust that things are what you say they are, e.g. if you claim that something is a string it shouldn't be missing
[21:18:21] *** Joins: Trashlord (~trash@user/trashlord)
[21:32:07] <DevJohnC> I really should have kept that Parallel.ForEach snippet Suchiman came up with a while back
[21:33:15] <Nasp> What does it do?
[21:33:21] <Nasp> Also just ask him, i'm sure he has it laying around
[21:34:06] <Suchiman> DevJohnC: https://gist.github.com/Suchiman/beb254d28f34ba5793c4817cc131752a and https://gist.github.com/Suchiman/986678bb6d4406193a052ed365cff819
[21:34:12] <DevJohnC> it used Parallel.ForEach to do work from a queue with a maximum concurrency setting and we had a talk about cancellable enumerables
[21:34:56] <DevJohnC> Suchiman, you're a lizard, Barry
[21:35:23] <Suchiman> DevJohnC: ForEachAsync requires .NET 6
[21:35:27] <Nasp> That channel thing makes me think of go
[21:35:37] <DevJohnC> Suchiman, I'm cutting edge!
[21:35:46] <Nasp> I want .NET 6 :(
[21:35:54] <Nasp> Still a few months away i think
[21:36:03] *** Joins: Assault (~Assault@87-95-55-3.bb.dnainternet.fi)
[21:37:04] <MatthiasVance> JakeSays: Have you looked at Klipper?
[21:37:48] <DevJohnC> thanks Suchiman :)
[21:38:15] <Suchiman> DevJohnC: you're welcome ;>
[21:55:53] *** Quits: GunArm1 (~barrett@firewall.mitsi.com) (Read error: Connection reset by peer)
[21:58:23] *** Joins: GunArm (~barrett@firewall.mitsi.com)
[22:00:17] *** Quits: pingo (~pingo@84-255-226-67.static.t-2.net) (Ping timeout: 240 seconds)
[22:03:59] *** Quits: dotdflat (~root@bl20-246-182.dsl.telepac.pt) (Ping timeout: 256 seconds)
[22:04:20] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 250 seconds)
[22:16:38] *** Quits: GunArm (~barrett@firewall.mitsi.com) (Read error: Connection reset by peer)
[22:21:48] *** Joins: GunArm (~barrett@firewall.mitsi.com)
[22:24:21] <JakeSays> MatthiasVance: i have, but haven't tried it yet.
[22:27:44] *** Joins: ki9a (~knowitall@84-107-47-206.cable.dynamic.v4.ziggo.nl)
[22:36:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:37:36] *** Joins: Trashlord (~trash@user/trashlord)
[22:38:07] <ki9a> sigh.
[22:38:09] <ki9a> I mean evening
[22:40:38] <JakeSays> bah. my clock has a noon bug
[22:40:54] <JakeSays> well, and a midnight bug
[22:41:15] *** Joins: travv0 (sid293381@user/travv0)
[22:41:44] <JakeSays> Nasp: did you see that video i posted?
[22:45:03] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:55] *** Quits: hseg (~hseg@185.120.124.34) (Ping timeout: 256 seconds)
[22:46:02] <Nasp> JakeSays:  Yes
[22:46:05] <Nasp> The slow fade to next
[22:46:13] <Nasp> I still want to see it spin
[22:46:15] <JakeSays> yeah
[22:46:21] <Nasp> That would probably have bene the first thing i would have done
[22:46:41] <JakeSays> i'm still not sure what would spin
[22:46:51] <Nasp> MAKE IT SPIN!
[22:47:07] <JakeSays> make what spin? the whole clock?
[22:47:09] <Nasp> Make the second hand go around each second
[22:47:13] *** Joins: Haxxa (~Haxxa@125-253-30-218.ip4.superloop.com)
[22:47:32] <JakeSays> ah so that'd be a 1/60'th hand
[22:48:06] <MatthiasVance> Oh that would be cool nasp :D
[22:48:12] <Nasp> See
[22:48:12] <Nasp> :D
[22:48:25] <Nasp> Come on cheer with me "MAKE IT SPIN, MAKE IT SPIN"
[22:48:29] <Nasp> SPIN THAT WHEEL
[22:48:37] <JakeSays> so would each stick stay on as it went around, and then reset at the second mark?
[22:48:56] <Nasp> just make each hand go on and off as it passes
[22:49:22] <lz_> what's your alternative to a todo.txt file that doesn't require too much software, an internet connection, a 3rd party service, etc?
[22:49:37] <MatthiasVance> What's wrong with a todo.txt file?
[22:49:41] <JakeSays> Nasp: hmm
[22:49:47] <lz_> my todo.txt file is 80k lines and it's a bit messy
[22:49:53] <JakeSays> lz_: LOL
[22:49:55] <MatthiasVance> Excel? :D
[22:49:58] <Nasp> Why is it 80k lines
[22:50:03] <lz_> plus I tend to mix subjects in it and it's hard to follow
[22:50:07] <Nasp> My todos are only what i'm currently working on and notes about it
[22:50:12] <lz_> Nasp: well I just append stuff to it, it's been years
[22:50:17] <Nasp> Else it's tracked in issues
[22:50:20] <JakeSays> my todos dont exist
[22:50:25] <Nasp> lz_: Is it like for home projects and such?
[22:50:38] <Nasp> I still find Trello to be a small easy to use tool, but it requires internet connection
[22:50:46] <lz_> Nasp: I used to have different files per project but then I wrote everything in the same file, which was probably a mistake
[22:50:47] <JakeSays> lz_: a todo.txt file represents what NEEDS to be done, not what HAS been donee. clean that fucker out
[22:51:36] <lz_> I wish I could run sth like trello but locally and with minimum dependencies
[22:52:27] <JakeSays> lz_: i think there's an opensource alternative to trello
[22:53:14] <Nasp> Create a diary.txt with all the shit you did
[22:53:31] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[22:53:45] <lz_> do you mean a todo2.txt ?
[22:53:47] <lz_> :D
[22:53:52] <JakeSays> well, the did part is represented by the code that was did
[22:54:41] <lz_> the features I probably want is being able to switch subjects, search text, automatic timestamps, maybe priorities
[22:55:37] <JakeSays> lz_: just write your own tool:)
[22:58:16] <lz_> I googled "trello self hosted", seems like a nice place to start
[22:58:41] <JakeSays> lz_: what did you find?//////
[22:59:10] *** Joins: pingo (~pingo@84-255-226-67.static.t-2.net)
[22:59:25] <Nasp> Does anyone still use autofac or is it just me
[23:00:09] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:01:15] <ki9a> just oyu
[23:01:43] <Suchiman> ki9a: sigh!
[23:01:53] *** Quits: dan01 (~dan01@2a02:2f0f:320f:8200:78e3:d844:aabc:c1a4) (Remote host closed the connection)
[23:02:16] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:78e3:d844:aabc:c1a4)
[23:02:21] <ki9a> hah
[23:02:22] * JakeSays prefers autofuck
[23:02:36] <Nasp> JakeSays: Well you are lazy
[23:02:58] <JakeSays> indeed. all good engineers are:p
[23:03:04] <Nasp> Autofac just had this idea of modules and scanning for them, and with MS DI, i can't figure out what should replace it
[23:03:07] <Nasp> Just extension methods?
[23:03:29] <ki9a> that's really a good idea
[23:03:31] <ki9a> less magic
[23:03:39] <ki9a> This aint ruby!
[23:05:18] *** Joins: brianonymous (~int19h@pool-98-117-195-56.bltmmd.fios.verizon.net)
[23:05:18] *** Quits: brianonymous (~int19h@pool-98-117-195-56.bltmmd.fios.verizon.net) (Changing host)
[23:05:18] *** Joins: brianonymous (~int19h@user/brianonymous)
[23:07:53] <Nasp> Yeah it is less magic
[23:07:58] <Nasp> But for some parts i still like scanning
[23:08:13] *** Quits: Guest7838 (~int19h@pool-98-117-195-56.bltmmd.fios.verizon.net) (Ping timeout: 256 seconds)
[23:10:47] <JakeSays> brianonymous: how was slc
[23:15:12] <Guest53> We scan exported types in particular assemblies to register them with MEDI, Nasp
[23:15:18] <Guest53> Dunno if that's the sort of thing you're talking about
[23:15:23] <JakeSays> bah. i dont want to go to work today
[23:15:39] <JakeSays> what is MEDI
[23:15:51] <Guest53> Microsoft.Extensions.DependencyInjecton
[23:16:45] <JakeSays> ah
[23:26:32] *** Joins: hseg (~hseg@195.192.229.23)
[23:59:01] *** Quits: Assault (~Assault@87-95-55-3.bb.dnainternet.fi) (Ping timeout: 256 seconds)
