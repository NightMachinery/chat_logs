[00:11:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:14:25] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[00:14:55] *** Joins: vptr (~vptr@user/vptr)
[00:17:24] *** Joins: mrig (~mrig@user/mrig)
[00:19:51] *** Quits: vptr (~vptr@user/vptr) (Remote host closed the connection)
[00:21:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[00:23:16] *** Joins: iroha (~iroha@user/iroha)
[00:24:51] *** Joins: resamvi (~resamvi@user/resamvi)
[00:29:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[00:29:47] *** Quits: iroha (~iroha@user/iroha) (Quit: WeeChat 3.4)
[00:33:49] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[00:44:12] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[00:47:57] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[00:50:02] *** Joins: jespada (~jespada@87.74.33.157)
[00:51:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[00:53:58] *** Joins: fikran (~fikran@user/fikran)
[00:55:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[00:56:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[00:57:31] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[01:07:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:25:23] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: quitter)
[01:30:36] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:31:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[01:32:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:34:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:35:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:38:50] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:39:05] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:39:06] *** Joins: arinov (~arinov@178.240.175.124)
[01:42:40] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:43:13] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:56:01] *** Quits: zer0bitz (~zer0bitz@196.244.192.54) (Ping timeout: 256 seconds)
[01:56:11] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 245 seconds)
[01:56:35] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 256 seconds)
[01:56:40] *** Joins: arinov_ (~arinov@178.240.175.124)
[01:57:11] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:57:34] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[01:57:43] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[02:09:41] <fikran> Assertion question: I am doing this: cachedactorjson := cachedactorjson.(ActorJson). In runtime I get the error that cachedactorjson is an *ActorJson, not an ActorJson. Is there some syntax to assert that correctly?
[02:10:03] *** Joins: cyrus_mc (~cyrus_mc@c-98-232-162-73.hsd1.or.comcast.net)
[02:10:09] <albertito> fikran: caj.(*ActorJson)
[02:10:37] <fikran> oh...
[02:10:39] * fikran tries
[02:11:09] <fikran> ./retrieve.go:210:10: cannot use &cachedactorjson (type **ActorJson) as type *ActorJson in return argument :)
[02:11:30] <albertito> fikran: fwiw that line is a bit suspicious. It could be totally fine but it could also signal that you're doing something a bit weird/awkward
[02:11:53] <albertito> fikran: you're probably doing return &caj instead of return caj
[02:12:11] <albertito> fikran: since caj is already a pointer, no need to take its address
[02:12:17] <fikran> heh ,I'm confused.
[02:12:21] <albertito> fikran: this whole thing is suspicious btw :P
[02:12:28] <albertito> fikran: what are you trying to do?
[02:13:48] <fikran> let me try to show code...
[02:18:07] *** Quits: cyrus_mc (~cyrus_mc@c-98-232-162-73.hsd1.or.comcast.net) (Quit: Connection closed)
[02:23:59] <fikran> made a commit, about to show code :)
[02:24:57] <fikran> I have a structure I created that holds an []interface{} here: https://gitlab.com/khanzf/fedilogue/-/blob/wip-cacheupdate/shared/uniquefifo.go#L7
[02:25:20] <fikran> I left it as an interface rather than a struct to be more generic
[02:26:21] <fikran> This line (https://gitlab.com/khanzf/fedilogue/-/blob/wip-cacheupdate/fedilogue/retrieve.go#L204) retrieves an interface{}, which is actually an ActorJson struct.
[02:26:37] <fikran> or rather, an *ActorJson
[02:27:48] <fikran> so, I'm not certain the best way to do the assertion.
[02:33:47] <fikran> you know, I'm distracted (post COVID shot) and can't concentrate it would not be respectful to you. Don't worry about it.
[02:35:06] <b0nn> insert fmt.Printf("%T\n", cachedactorjson) somewhere between lines 204 and 206
[02:37:21] * fikran tries
[02:37:29] <fizzie> I think the narrow part of the question already got a solution. You do `cachedactorjson.(*ActorJson)` to get an *ActorJson, and then on the next (`return &cachedactorjson`) line you just drop the & because you already have a *ActorJson, which you want to return, and getting its address with & would give you a `**ActorJson`.
[02:37:29] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[02:37:35] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[02:37:37] *** Joins: vj (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca)
[02:37:50] <fizzie> (The wider part of whether it's overall a reasonable design is still open.)
[02:38:27] <fikran> I'm open to that.
[02:38:40] *** Joins: gbmor1 (gbmor@gbmor.org)
[02:39:02] *** Joins: pztrn15 (~pztrn1@aurora.pztrn.name)
[02:39:09] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[02:39:27] *** Joins: lazyreader0 (~lazyreade@user/lazyreader)
[02:39:29] *** Jigsy` is now known as Jigsy
[02:39:36] *** Joins: aml_ (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[02:39:55] *** Joins: LiENUX (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[02:39:59] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[02:40:03] <fikran> b0nn: It returns *main.ActorJson
[02:40:06] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[02:40:09] *** Joins: d42- (~root@user/d42)
[02:40:30] *** Joins: dvdmuckle_ (~dvdmuckle@user/dvdmuckle)
[02:40:51] *** Joins: dansan_ (~daniel@75.81.148.51)
[02:41:24] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:41:45] *** Joins: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net)
[02:42:11] *** Joins: lowhope_ (~lowhope@cow9.org)
[02:42:39] *** Joins: chilvers1 (~chilversc@user/chilversc)
[02:42:42] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[02:42:48] *** Joins: Hawker_ (~pi@user/hawker)
[02:42:51] <fikran> fizzie: works! How best to re-engieer this?
[02:42:53] *** Joins: irc (~irc@h-158-174-80-2.A357.priv.bahnhof.se)
[02:43:01] *** Joins: purpleid1a (~james@user/purpleidea)
[02:43:02] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[02:43:08] *** Joins: alphasierra (~alphasier@2405:201:e:4d:b560:66b7:6b05:1a66)
[02:43:09] <fikran> I'm coming from C with heavy use of void* and casts, which I'm mentally doing here.
[02:43:21] <fikran> And...my post booster shot symptoms are starting to kick in :/
[02:43:45] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Remote host closed the connection)
[02:44:08] *** Joins: Suzumiya (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[02:44:16] *** Joins: lechner_ (~lechner@debian/lechner)
[02:44:47] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[02:44:51] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[02:46:02] *** Joins: cornfeedhobo_ (~cornfeedh@user/cornfeedhobo)
[02:46:19] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Remote host closed the connection)
[02:47:16] *** Joins: Teckla_ (~Teckla@user/teckla)
[02:47:27] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[02:47:28] *** Quits: jimeh (~jimeh@matrix.bah.io) (*.net *.split)
[02:47:28] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[02:47:28] *** Quits: Teckla (~Teckla@user/teckla) (*.net *.split)
[02:47:28] *** Quits: DM4307842149511 (~DM4307@047-234-129-039.res.spectrum.com) (*.net *.split)
[02:47:28] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[02:47:28] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[02:47:28] *** Quits: dingdreher (~dingdrehe@46.140.25.62) (*.net *.split)
[02:47:28] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[02:47:28] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (*.net *.split)
[02:47:28] *** Quits: pztrn1 (~pztrn1@aurora.pztrn.name) (*.net *.split)
[02:47:28] *** Quits: remote (~self@user/hackers) (*.net *.split)
[02:47:28] *** Quits: gpeskens_ (~gpeskens@62.251.31.165) (*.net *.split)
[02:47:28] *** Quits: x88x88x (~x88x88x@149.28.53.172) (*.net *.split)
[02:47:28] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (*.net *.split)
[02:47:28] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[02:47:28] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[02:47:28] *** Quits: jay_wild (~very@138.68.15.221) (*.net *.split)
[02:47:28] *** Quits: Kaivo (~Kaivo@user/kaivo) (*.net *.split)
[02:47:28] *** Quits: dr0n (~nabromov@94.11.23.235) (*.net *.split)
[02:47:28] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (*.net *.split)
[02:47:28] *** Quits: Batzy (~quassel@user/batzy) (*.net *.split)
[02:47:28] *** Quits: gbmor (~gbmor@gbmor.org) (*.net *.split)
[02:47:28] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[02:47:28] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca) (*.net *.split)
[02:47:28] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[02:47:28] *** Quits: zaz\ (~zaz@poneybl.eu) (*.net *.split)
[02:47:28] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[02:47:28] *** Quits: fling (~fling@user/fling) (*.net *.split)
[02:47:28] *** Quits: Nixieboluo (~Nixiebolu@47.93.220.75) (*.net *.split)
[02:47:28] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[02:47:28] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[02:47:28] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[02:47:28] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[02:47:28] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[02:47:28] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[02:47:28] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (*.net *.split)
[02:47:28] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[02:47:28] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (*.net *.split)
[02:47:28] *** Quits: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com) (*.net *.split)
[02:47:28] *** Quits: d42 (~root@user/d42) (*.net *.split)
[02:47:28] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (*.net *.split)
[02:47:28] *** Quits: lazyreader (~lazyreade@user/lazyreader) (*.net *.split)
[02:47:28] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[02:47:28] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[02:47:28] *** Quits: higgins (~higgins@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[02:47:28] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (*.net *.split)
[02:47:28] *** Quits: lowhope (~lowhope@cow9.org) (*.net *.split)
[02:47:28] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[02:47:28] *** Quits: pgloor (~petergloo@mix.cubus.space) (*.net *.split)
[02:47:28] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (*.net *.split)
[02:47:28] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (*.net *.split)
[02:47:28] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (*.net *.split)
[02:47:28] *** Quits: wkalt_ (~wkalt@user/wkalt) (*.net *.split)
[02:47:28] *** Quits: purpleidea (~james@user/purpleidea) (*.net *.split)
[02:47:28] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[02:47:29] *** Quits: kyshoc (~kyshoc@user/kyshoc) (*.net *.split)
[02:47:29] *** Quits: amoros (~irc@user/amoros) (*.net *.split)
[02:47:29] *** Quits: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (*.net *.split)
[02:47:29] *** Quits: vhost- (~vhost@user/vhost-) (*.net *.split)
[02:47:29] *** Quits: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (*.net *.split)
[02:47:29] *** Quits: earthbre- (~earthbrea@li778-229.members.linode.com) (*.net *.split)
[02:47:29] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[02:47:29] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (*.net *.split)
[02:47:29] *** Quits: crudo (~crudo@livredigital.com) (*.net *.split)
[02:47:29] *** Quits: loggingbot (~loggingbo@user/loggingbot) (*.net *.split)
[02:47:29] *** Quits: naos (~naos@user/naos) (*.net *.split)
[02:47:29] *** Quits: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de) (*.net *.split)
[02:47:29] *** DM43078421495115 is now known as DM4307842149511
[02:47:29] *** dvdmuckle_ is now known as dvdmuckle
[02:47:29] *** lazyreader0 is now known as lazyreader
[02:47:58] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[02:48:24] <fizzie> I've got a bit of a headache so I'll opt out as well. But generally speaking (until generics land in the language), if you do want to write some sort of nontrivial and reusable container, you do usually end up with at least some `interface{}`s and type assertions. There might be a better way to do some of the FIFO parts (that involve less O(n) operations), but if it never grows long, that part
[02:48:26] <fizzie> probably doesn't matter either.
[02:50:25] *** Joins: tharkun_ (tharkun@kvm6.telegraphics.com.au)
[02:50:25] *** Joins: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[02:50:25] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[02:50:25] *** Joins: DaPinkOne (~Dap@user/dap)
[02:50:25] *** Joins: c10l (~c10l@user/c10l)
[02:50:25] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[02:50:25] *** Joins: remote (~self@user/hackers)
[02:50:25] *** Joins: gpeskens_ (~gpeskens@62.251.31.165)
[02:50:25] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[02:50:25] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[02:50:25] *** Joins: jay_wild (~very@138.68.15.221)
[02:50:25] *** Joins: Kaivo (~Kaivo@user/kaivo)
[02:50:25] *** Joins: dr0n (~nabromov@94.11.23.235)
[02:50:25] *** Joins: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net)
[02:50:25] *** Joins: Batzy (~quassel@user/batzy)
[02:50:25] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[02:50:25] *** Joins: noarb (~noarb@user/noarb)
[02:50:25] *** Joins: zaz\ (~zaz@poneybl.eu)
[02:50:25] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[02:50:25] *** Joins: Nixieboluo (~Nixiebolu@47.93.220.75)
[02:50:25] *** Joins: zkanda (~zkanda@box.makean.art)
[02:50:25] *** Joins: jkl (~jkl@user/jkl)
[02:50:25] *** Joins: Piraty (~irc@user/piraty)
[02:50:25] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[02:50:25] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[02:50:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[02:50:25] *** Joins: higgins (~higgins@static.38.6.217.95.clients.your-server.de)
[02:50:25] *** Joins: pgloor (~petergloo@mix.cubus.space)
[02:50:25] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[02:50:25] *** Joins: wkalt_ (~wkalt@user/wkalt)
[02:50:25] *** Joins: earthbre- (~earthbrea@li778-229.members.linode.com)
[02:50:25] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[02:50:25] *** Joins: crudo (~crudo@livredigital.com)
[02:50:25] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[02:50:25] *** Joins: naos (~naos@user/naos)
[02:50:25] *** Joins: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de)
[02:50:27] *** Quits: c10l (~c10l@user/c10l) (Max SendQ exceeded)
[02:50:36] *** Joins: c10l (~c10l@user/c10l)
[02:52:35] *** imm__ is now known as imm_
[02:52:41] *** Joins: SebastianM (~seba@user/sebastianm)
[02:54:24] *** Joins: vhost- (~vhost@65.102.48.134)
[02:54:27] *** Joins: jimeh (~jimeh@matrix.bah.io)
[02:55:00] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[03:00:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[03:01:18] *** Joins: Guest12 (~Guest12@168.91.160.156)
[03:03:19] *** Joins: fikran (~fikran@user/fikran)
[03:05:55] *** Joins: JJTech (~JJTech@168.91.160.156)
[03:10:04] *** JJTech is now known as JJTech0130
[03:10:54] *** JJTech0130 is now known as JJTech
[03:11:59] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:12:30] <JJTech> I've been wondering, are there any updates on using namespace prefixes with encoding/xml? Right now I've used filter-repo and made it a separate go module, with some hacks to make it work for my use-case. Is there a better way?
[03:13:43] <JJTech> https://github.com/golang/go/issues/9519 makes it seem like there is no workaround, other than the ugly method of creating 2 separate structs for everything.
[03:14:36] *** Joins: neurocyte0132889 (~neurocyte@IP-045136168007.dynamic.medianet-world.de)
[03:14:36] *** Quits: neurocyte0132889 (~neurocyte@IP-045136168007.dynamic.medianet-world.de) (Changing host)
[03:14:36] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[03:21:32] *** Quits: carlavilla (~carlavill@2a0c:5a84:340b:7600:221:6bff:fe3b:cee4) (Ping timeout: 240 seconds)
[03:21:50] *** Joins: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4)
[03:22:46] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[03:24:55] *** Quits: arinov_ (~arinov@178.240.175.124) (Ping timeout: 250 seconds)
[03:27:05] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[03:28:01] *** Joins: independent56 (~independe@213.205.242.167)
[03:31:03] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[03:32:44] <JJTech> It's not New Year here for another couple hours :)
[03:33:09] *** Quits: independent56 (~independe@213.205.242.167) (Ping timeout: 250 seconds)
[03:34:09] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:36:29] *** Teckla_ is now known as Teckla
[03:36:46] <JJTech> Here's a playground demonstrating the issue: https://go.dev/play/p/6CY71H7mb4
[03:41:54] <JJTech> Here's one demonstrating a simplified version of my use-case: https://go.dev/play/p/n9m0gMGSfHC
[03:42:08] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[03:56:48] *** Quits: barnoby (~barnoby@2603-6000-a409-2660-bd82-22d8-1684-a366.res6.spectrum.com) (Quit: WeeChat 1.9.1)
[03:58:34] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[03:59:15] *** Joins: jimeh (~jimeh@matrix.bah.io)
[04:12:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c4c6:c62c:ab52:6d38) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:16:48] <JJTech> Well, the people on Discord suggested I reach out to the maintainer on Slack. Happy New Year everyone!
[04:16:53] *** Quits: JJTech (~JJTech@168.91.160.156) (Quit: Leaving)
[04:18:00] *** Quits: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net) (Quit: leaving)
[04:20:24] *** Joins: Everything (~Everythin@37.115.210.35)
[04:34:08] *** Joins: rolo (~rolo@80-62-117-218-mobile.dk.customer.tdc.net)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:57] *** Quits: alphasierra (~alphasier@2405:201:e:4d:b560:66b7:6b05:1a66) (Ping timeout: 240 seconds)
[04:56:18] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[04:58:32] *** Quits: rolo (~rolo@80-62-117-218-mobile.dk.customer.tdc.net) (Quit: WeeChat 3.4)
[05:02:09] *** Joins: alphasierra (~alphasier@49.36.98.115)
[05:03:34] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[05:05:15] *** Joins: jimeh (~jimeh@matrix.bah.io)
[05:12:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 268 seconds)
[05:15:00] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[05:30:48] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 268 seconds)
[05:31:31] *** Joins: shtirlic_ (~shtirlic@95-55-120-243.dynamic.avangarddsl.ru)
[05:31:43] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[05:31:43] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[05:31:43] *** Joins: resamvi (~resamvi@user/resamvi)
[05:32:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[05:33:49] *** Quits: shtirlic (~shtirlic@178.71.203.230) (Ping timeout: 240 seconds)
[05:36:05] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[05:37:30] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[05:37:30] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[05:37:30] *** Joins: resamvi (~resamvi@user/resamvi)
[05:38:35] *** Quits: moog (~moog@107.126.53.61) (Ping timeout: 250 seconds)
[05:42:00] *** Joins: moog (~moog@107.126.48.142)
[05:42:07] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[05:43:16] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[05:43:16] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[05:43:16] *** Joins: resamvi (~resamvi@user/resamvi)
[05:44:32] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:52:33] *** Joins: califax- (~califax@user/califx)
[05:54:57] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:55:04] *** califax- is now known as califax
[06:06:40] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:09:54] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:16:39] *** Quits: alphasierra (~alphasier@49.36.98.115) (Remote host closed the connection)
[06:27:56] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:29:25] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:36:54] *** Joins: neverfindme (~hayden@72.92.246.5)
[06:41:38] *** Quits: neverfindme (~hayden@72.92.246.5) (Client Quit)
[06:49:43] *** Joins: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea)
[06:49:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:54:12] *** Joins: khzz (~48khz@2601:1c0:6f00:5790:d58f:8b72:c9e8:999f)
[07:02:53] *** Joins: darkapex_ (~darkapex@user/darkapex)
[07:04:32] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 268 seconds)
[07:05:27] *** Parts: khzz (~48khz@2601:1c0:6f00:5790:d58f:8b72:c9e8:999f) (l8r sk8r)
[07:09:42] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:60f4:8918:4e21:358d)
[07:26:54] *** Joins: SuperLag (~akulbe@user/superlag)
[07:49:30] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:55:26] *** Joins: bluedust (~bluedust@117.207.225.53)
[07:55:58] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:58:49] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[08:10:12] *** Joins: fef (~thedawn@user/thedawn)
[08:17:13] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:26:37] *** cornfeedhobo_ is now known as cornfeedhobo
[08:27:46] *** Joins: noop14 (~noop14@l208005.ppp.asahi-net.or.jp)
[08:29:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:30:11] *** Joins: off^ (~off@207.5.21.20)
[08:32:02] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[08:35:49] *** Quits: moog (~moog@107.126.48.142) (Remote host closed the connection)
[08:47:46] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:48:41] *** Quits: noop14 (~noop14@l208005.ppp.asahi-net.or.jp) (Quit: Leaving)
[08:50:36] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[08:56:11] *** Joins: fling (~fling@user/fling)
[08:57:17] *** Quits: benji (~benji@user/benji) (Quit: ZNC - https://znc.in)
[09:00:11] *** Joins: benji (~benji@user/benji)
[09:01:15] *** Quits: benji (~benji@user/benji) (Client Quit)
[09:02:33] *** Joins: benji (~benji@user/benji)
[09:04:00] *** Quits: benji (~benji@user/benji) (Client Quit)
[09:07:19] *** Joins: benji (~benji@user/benji)
[09:07:37] *** Quits: benji (~benji@user/benji) (Remote host closed the connection)
[09:11:17] *** Quits: Hawker_ (~pi@user/hawker) (Ping timeout: 240 seconds)
[09:11:26] *** Joins: benji (~benji@user/benji)
[09:12:21] *** Quits: benji (~benji@user/benji) (Client Quit)
[09:13:31] *** Joins: benji (~benji@user/benji)
[09:14:08] *** Quits: benji (~benji@user/benji) (Client Quit)
[09:15:15] *** Joins: benji (~benji@user/benji)
[09:20:29] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[09:21:06] *** Joins: fef (~thedawn@user/thedawn)
[09:36:54] *** Joins: dhrv0x (~dhrv0x@user/dhrv)
[09:44:18] *** Joins: bluedust_ (~bluedust@81.92.206.10)
[09:47:49] *** Quits: bluedust (~bluedust@117.207.225.53) (Ping timeout: 240 seconds)
[09:48:04] *** Quits: dhrv0x (~dhrv0x@user/dhrv) (Remote host closed the connection)
[09:49:52] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[09:55:57] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 240 seconds)
[09:56:53] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:57:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:16:55] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[10:19:33] *** Joins: bluedust (~bluedust@117.207.225.53)
[10:22:37] *** Quits: bluedust_ (~bluedust@81.92.206.10) (Ping timeout: 240 seconds)
[10:25:44] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:28:20] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[10:33:25] *** Quits: bluedust (~bluedust@117.207.225.53) (Remote host closed the connection)
[10:58:37] *** Joins: rendar (~rendar@user/rendar)
[11:01:08] *** Joins: bluedust (~bluedust@117.207.225.53)
[11:18:10] *** Quits: sumi (~dos@39.191.202.62.dynamic.cgnat.res.cust.swisscom.ch) (Read error: Connection reset by peer)
[11:21:44] *** Quits: bluedust (~bluedust@117.207.225.53) (Remote host closed the connection)
[11:35:51] *** Joins: bluedust (~bluedust@117.207.225.53)
[11:36:44] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[11:49:25] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[11:49:40] *** Joins: califax (~califax@user/califx)
[11:55:29] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:57:00] *** Quits: norbinaa (~be3uykpy@2a00:a040:19a:b060:44c5:99a6:464d:4138) (Quit: Leaving)
[11:57:55] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:3de0:3119:bacc:ffbd)
[12:00:24] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[12:11:27] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[12:11:39] *** Quits: bluedust (~bluedust@117.207.225.53) (Remote host closed the connection)
[12:11:42] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[12:22:07] <mickey8> what's your suggested best practice to handle cli flags? right now i have a complete mess of a type Flags truct { FlagA string; FlagB int; ... } and another mess of flag.StringVar() and stuff, and then one more mess of checking if Flag.FlagA is set and do stuff accordingly
[12:22:56] <mickey8> i was really hoping to be able to simply "unmarshal" the flags to a struct and then have a single switch
[12:24:36] *** Joins: analogsalad (~analogsal@user/analogsalad)
[12:26:28] *** Joins: mrig (~mrig@user/mrig)
[12:26:40] *** Joins: bluedust (~bluedust@117.207.225.53)
[12:33:27] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[12:34:40] *** Quits: acohn (~acohn@wikipedia/alex-cohn) (Quit: TTFN)
[12:35:00] *** Joins: acohn (~acohn@wikipedia/alex-cohn)
[12:35:20] *** Quits: acohn (~acohn@wikipedia/alex-cohn) (Client Quit)
[12:35:39] *** Joins: acohn (acohn@wikipedia/alex-cohn)
[12:41:41] *** Quits: acohn (acohn@wikipedia/alex-cohn) (Quit: TTFN)
[12:42:43] *** Joins: acohn (acohn@wikipedia/alex-cohn)
[12:53:16] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:55:11] <mickey8> going with go-flags <_<
[13:07:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[13:08:06] *** Quits: bluedust (~bluedust@117.207.225.53) (Remote host closed the connection)
[13:09:44] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.65.mobile.tre.se)
[13:13:57] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.65.mobile.tre.se) (Ping timeout: 240 seconds)
[13:35:35] *** Joins: bluedust (~bluedust@117.207.225.53)
[13:45:36] *** Joins: neurocyte0132889 (~neurocyte@IP-045128181214.dynamic.medianet-world.de)
[13:45:36] *** Quits: neurocyte0132889 (~neurocyte@IP-045128181214.dynamic.medianet-world.de) (Changing host)
[13:45:36] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:46:57] *** Quits: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[13:48:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:58:46] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[14:00:19] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[14:00:19] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[14:00:19] *** Joins: resamvi (~resamvi@user/resamvi)
[14:06:17] *** Joins: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4)
[14:13:56] *** Quits: gpeskens_ (~gpeskens@62.251.31.165) (Remote host closed the connection)
[14:17:59] *** Quits: rendar (~rendar@user/rendar) (Remote host closed the connection)
[14:18:03] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[14:19:35] *** Joins: rendar (~rendar@user/rendar)
[14:22:03] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:28:29] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[14:31:42] *** Quits: DM4307842149511 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[14:37:13] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[14:37:38] *** Joins: darkapex (~darkapex@user/darkapex)
[14:38:36] *** Joins: bluedust_ (~bluedust@117.207.225.53)
[14:39:39] *** Quits: bluedust (~bluedust@117.207.225.53) (Ping timeout: 268 seconds)
[14:47:05] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:51:24] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[14:58:37] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[15:12:17] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[15:12:38] *** Joins: moto (~moto@user/moto)
[15:20:07] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[15:21:23] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[15:21:23] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[15:21:23] *** Joins: resamvi (~resamvi@user/resamvi)
[15:24:37] <bailsman> I have two imported libraries that return a similar (but not quite the same) thing. I want to assign libraryA.getThing() to a variable, and then if it is nil, assign libraryB.getThing() to it instead.
[15:25:02] <bailsman> I am running into the problem that I can't compare thing to nil. It's never equal, even when it is nil. How do I fix this?
[15:25:20] <bailsman> The type of my variable is an interface with a few functions in it.
[15:25:34] <bailsman> (that libraryA.getThing and libraryB.getThing share)
[15:25:41] <bailsman> or at least the return types
[15:26:01] <j416> an interface contains a type and a value. It is only nil when both are nil.
[15:26:08] <KirkMcDonald> I am guessing that libraryA.getThing returns a type which isn't (but implements) the interface type?
[15:26:12] <bailsman> yes
[15:26:39] <KirkMcDonald> A nil value of that type, when assigned to the interface, results in something which is not nil.
[15:26:53] <j416> make sure that you "return nil" and not "var x Foo; return x" (will be not nil)
[15:27:27] <bailsman> libraryA.getThing() does "return nil" in this path but I think I'm running into what KirkMcDonald said
[15:27:32] <bailsman> how do I properly check if it is nil?
[15:27:46] <KirkMcDonald> Assign it to a variable of its proper non-interface type.
[15:27:53] <KirkMcDonald> Then check if that is nil.
[15:28:21] <bailsman> Is that really what I'm supposed to do? That's a whole extra line of code. Feels so painful.
[15:28:35] <j416> right; it's the same thing. Returning a concrete type and assigning that to an interface, will cause the interface to be non-nil.
[15:28:50] <KirkMcDonald> You could also assert the interface variable back to the relevant static type.
[15:29:05] <KirkMcDonald> But that seems more roundabout; better to just add the extra line.
[15:29:05] <bailsman> I don't know the static type. It's in libraryA and not exported
[15:29:15] <KirkMcDonald> You don't actually need to know it; you can infer it.
[15:29:20] <KirkMcDonald> x := foo()
[15:29:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[15:29:55] <bailsman> Would it ever make sense for libraryA.getThing to return the interface type instead instead of the concrete type?
[15:30:04] <KirkMcDonald> It very well could.
[15:30:11] <j416> maybe, var interfaceX Ifc; if x := libraryA.GetThing(); x != nil { interfaceX = x }
[15:30:21] <KirkMcDonald> In that case, `return nil` would indeed return a nil interface.
[15:30:38] <bailsman> libraryB is not in my control and that will always return a concrete type.
[15:31:14] <j416> you could also have it return a boolean together with the first return value; to return false if the value is not usable
[15:31:25] <bailsman> yes, I see that all over the place. Is that more idiomatic?
[15:31:55] <j416> in my experience, returning an error or a boolean as a secondary value is often preferred
[15:31:55] <KirkMcDonald> It could also return an error.
[15:32:07] <KirkMcDonald> Depending on whether it's an "error" as such.
[15:32:10] <bailsman> When would you prefer to return a concrete versus an interface type?
[15:32:52] <KirkMcDonald> I don't have a simple answer to that.
[15:33:04] <bailsman> What set of actions will lead me to acquire the complicated answer?
[15:33:14] <KirkMcDonald> But I suppose I would default to using concrete types until I have a design that hinges on an interface in a meaningful way.
[15:33:31] <KirkMcDonald> Which is a vague answer, but that's what I've got.
[15:33:31] <j416> ^
[15:34:01] <ikke> But that just defers the problem
[15:34:11] <j416> another thing is the error type, which is an interface and should always be returned as such, to allow for easy nil checks
[15:34:21] <bailsman> OK, so let's say it simplifies some other code to have both componentA and componentB return the interface, then you can do that. But in this case, since libraryA and libraryB don't really know that they're being used together, they should each just return their concrete types
[15:34:28] <j416> (to avoid the exact issue you describe above)
[15:34:37] <KirkMcDonald> Yes; returning non-error error types is a swamp; best avoid it.
[15:34:50] <j416> bailsman: I don't think I'd return an interface in your scenario
[15:35:35] <bailsman> So it seems to make the most sense to return err in the second return value. One thing that annoys me is that libraryB, which is not under my control, does not do so. So then the APIs will be different for getThing
[15:35:55] <bailsman> I guess I'll go with the "assign to x and check if that is null" solution
[15:36:16] <j416> bailsman: you'll wrap them in your own thing anyway, which you can write so that it makes sense with a clean interface, right?
[15:37:07] <bailsman> OK yea, I just need to wrap getThing into a helper function which always returns the interface type, and internally gets it from libraryA or B as appropriate.
[15:37:22] <j416> right.
[15:37:25] <bailsman> is passing that interface type thing around going to cause any problems anywhere?
[15:37:36] <bailsman> aside from the fact that you can't check if it's nil, but let's say my wrapper guarantees that
[15:38:09] <KirkMcDonald> I mean, it'll be an interface. It'll do what interfaces do. I guess I'm not sure what sort of problems you're worried about.
[15:38:13] <dalan> How would I prepend a slice to a custom type that is a slice of slices?
[15:38:21] <j416> interface types are passed around all the time. Do you have any particular worry in mind?
[15:38:28] <bailsman> The problem that you can't compare it to nil was a surprise. If there are no other surprises, I'm good :P
[15:38:39] <j416> dalan: google "golang slice tricks"
[15:38:53] <j416> you'll find some neat ways to do slice things
[15:39:14] <KirkMcDonald> append() and copy() will get you there.
[15:39:21] <KirkMcDonald> In various permutations.
[15:39:48] <j416> bailsman: can't think of any.
[15:40:32] <ikke> How does it work with error? It's an interface, and you return nil, and compare to nil
[15:41:01] <KirkMcDonald> I think the way to think of 'nil' is that there isn't a single value called nil, there's one for each nil-able type.
[15:41:32] <bailsman> OK wait a second, if my wrapper returns "nil" (interface type) it will compare equal to nil? Because then it doesn't have a concrete type
[15:41:54] <KirkMcDonald> So you can have a nil interface. That's fine. It's just that... Say you have a type *T that implements an interface I. You can assign (*T)(nil) to a value of type I, and the result is not equivalent to I(nil).
[15:42:11] *** Quits: moto (~moto@user/moto) (Ping timeout: 252 seconds)
[15:42:25] <j416> bailsman: try it :)
[15:42:32] <j416> bailsman: as long as you never assign to it, it will be nil
[15:42:39] <KirkMcDonald> Because those are two different nil values. And if you call a method on that I value, you'll call one of *T's methods, and the receiver will be nil.
[15:43:02] <KirkMcDonald> Because it's perfectly valid for a pointer receiver to be nil.
[15:43:32] <bailsman> Yes, that makes sense. I am now thinking I will put the wrapper in libraryA. BTW is this what a programmer does all day, just moving functions around and changing types a little?
[15:43:41] <KirkMcDonald> But if you have I(nil), that's en error, because there's no method to call.
[15:43:46] <ikke> but bailsman said that they had `return nil`, which I assume would not be of type (*T)(nil)
[15:43:58] <KirkMcDonald> ikke: It will be if the function's return type is *T
[15:44:05] <bailsman> if the return type of that function is the interface type, it will be I(nil), but if it is *T, it will be (*T)nil
[15:44:07] <bailsman> I think I got it now
[15:44:40] <ikke> ah, so they had a local variable of type I, but the function returns *T?
[15:44:59] *** Quits: monoxane (~monoxane@user/monoxane) (Quit: estoy fuera)
[15:45:10] <KirkMcDonald> Yes.
[15:45:14] <j416> ikke: example https://go.dev/play/p/IRsmL-mDRCW
[15:45:15] <ikke> ah ok, understood
[15:45:56] *** Joins: henrique (~henrique@2804:431:cff1:8535:78b2:fd8e:aff2:b82e)
[15:46:04] <ikke> I thought the function returned the interface type, not the concrete type
[15:47:14] <bailsman> yes, it does that now. Is it a sin to return different concrete types based on the situation? I guess not, that would be the main reason for returning an interface type in the first place.
[15:47:45] <KirkMcDonald> Yeah, basically.
[15:48:13] <KirkMcDonald> Also: It's what `error` does all the time.
[15:49:03] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[15:49:08] <j416> bailsman: you cannot return different types, because your function declares the type to return
[15:49:23] <j416> bailsman: ah, you meant via an interface type. I think that'd be perfectly fine.
[15:50:11] <j416> bailsman: I think that'd sort under what KirkMcDonald mentioned above, "a design that hinges on an interface in a meaningful way"
[15:50:44] <bailsman> I feel like I could spend entire days not working on any new features but just changing my types and abstractions around a little.
[15:50:53] <j416> the downside of course is that you are (partially) hiding the concrete value, making it more difficult to use if you need access to that
[15:51:28] <ikke> But if you can, it's better if you do not need to depend on concrete types
[15:52:04] <j416> if returning an interface gives more value (better design, easier to work with) than access to the underlying type, that'd weigh it up perhaps. As a general rule though, returning concrete types is mostly a good idea.
[15:52:24] <j416> depend on interfaces, return concrete types
[15:53:43] *** Joins: moto (~moto@user/moto)
[16:05:09] *** Joins: fef (~thedawn@user/thedawn)
[16:05:53] *** Joins: monoxane (~monoxane@user/monoxane)
[16:09:44] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:16:58] *** Quits: vj (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca) (Quit: WeeChat 3.4)
[16:22:08] *** Quits: henrique (~henrique@2804:431:cff1:8535:78b2:fd8e:aff2:b82e) (Quit: Leaving)
[16:22:24] *** Quits: bluedust_ (~bluedust@117.207.225.53) (Remote host closed the connection)
[16:22:40] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 3.3)
[16:26:49] *** Joins: dr0n (~nabromov@94.11.23.235)
[16:28:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[16:28:41] *** Joins: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca)
[16:29:41] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[16:29:41] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[16:29:41] *** Joins: resamvi (~resamvi@user/resamvi)
[16:31:17] <ikke> Any idea why it returns <nil> for the time field here? https://go.dev/play/p/-wOjj5_-tuy
[16:32:37] <ikke> (this is extracted from an application I'm running)
[16:38:24] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[16:38:24] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Client Quit)
[16:39:56] <j416> ikke: seems you need to explicitly configure it to include a timestamp field; not sure if this it the way to do it or not -> https://go.dev/play/p/A38lE3oU-Ol
[16:40:08] <j416> found at https://github.com/rs/zerolog#create-logger-instance-to-manage-different-outputs
[16:42:04] <ikke> j416: thanks
[16:42:09] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca) (Quit: WeeChat 3.4)
[16:42:24] *** Joins: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca)
[16:44:00] *** Quits: dansan_ (~daniel@75.81.148.51) (Read error: Connection reset by peer)
[16:44:18] *** Joins: dansan_ (~daniel@75.81.148.51)
[16:46:10] *** Joins: nrl^ (~nrl@207.5.21.20)
[17:00:20] *** Joins: Mattiaslndstrm (~Mattiasln@host.45.144.118.228.bitcom.se)
[17:03:18] *** fjmorazan_ is now known as fjmorazan
[17:06:19] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[17:07:27] *** d42- is now known as d42
[17:11:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:17:38] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[17:21:57] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 256 seconds)
[17:23:53] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[17:30:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:31:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[17:37:19] *** Joins: rolo (~rolo@2a02:3030:80c:17c6:c92e:a356:493c:b4fb)
[17:40:37] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:42:54] *** Quits: rolo (~rolo@2a02:3030:80c:17c6:c92e:a356:493c:b4fb) (Remote host closed the connection)
[17:45:49] *** Joins: rolo (~rolo@2a02:3030:80c:17c6:c92e:a356:493c:b4fb)
[17:47:19] *** Joins: mrcus (mpirg@sourcehut/user/mirg)
[17:51:09] *** Quits: rolo (~rolo@2a02:3030:80c:17c6:c92e:a356:493c:b4fb) (Remote host closed the connection)
[17:53:54] *** Quits: Mattiaslndstrm (~Mattiasln@host.45.144.118.228.bitcom.se) (Ping timeout: 268 seconds)
[17:56:37] *** Joins: rolo (~rolo@2a02:3030:80c:17c6:c92e:a356:493c:b4fb)
[17:56:38] *** Quits: rolo (~rolo@2a02:3030:80c:17c6:c92e:a356:493c:b4fb) (Client Quit)
[18:14:03] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:15:54] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 260 seconds)
[18:23:39] *** Joins: bluedust (~bluedust@117.207.229.182)
[18:26:37] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[18:35:46] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 245 seconds)
[18:36:03] *** Joins: moog (~moog@107.126.48.46)
[18:36:55] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[18:36:55] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[18:36:55] *** Joins: resamvi (~resamvi@user/resamvi)
[18:39:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:40:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[18:41:51] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[18:42:42] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[18:42:42] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[18:42:42] *** Joins: resamvi (~resamvi@user/resamvi)
[18:43:13] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-b8d8-7d61-956a-534e.ip6.gigabit.dk) (Remote host closed the connection)
[18:43:33] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[18:46:32] *** Joins: mrig (~mrig@user/mrig)
[18:47:31] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[18:48:29] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[18:48:29] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[18:48:29] *** Joins: resamvi (~resamvi@user/resamvi)
[18:50:36] *** Joins: rvalue (~rvalue@user/rvalue)
[18:52:29] *** Joins: Mattiaslndstrm (~Mattiasln@host.62.119.173.55.bitcom.se)
[18:54:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[18:56:30] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[18:56:30] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[18:56:30] *** Joins: resamvi (~resamvi@user/resamvi)
[18:57:02] *** Quits: Mattiaslndstrm (~Mattiasln@host.62.119.173.55.bitcom.se) (Ping timeout: 240 seconds)
[19:01:05] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.65.mobile.tre.se)
[19:01:32] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[19:02:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:03:08] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[19:03:08] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[19:03:08] *** Joins: resamvi (~resamvi@user/resamvi)
[19:07:17] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[19:08:54] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[19:08:54] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[19:08:54] *** Joins: resamvi (~resamvi@user/resamvi)
[19:09:37] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.65.mobile.tre.se) (Ping timeout: 256 seconds)
[19:10:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:13:35] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[19:14:31] *** Joins: Mattiaslndstrm (~Mattiasln@185.213.154.242)
[19:14:55] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[19:14:55] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[19:14:55] *** Joins: resamvi (~resamvi@user/resamvi)
[19:19:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[19:20:40] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[19:20:40] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[19:20:40] *** Joins: resamvi (~resamvi@user/resamvi)
[19:22:20] *** Joins: shka (~herr@109.231.0.226)
[19:23:17] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:25:26] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[19:26:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:27:47] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[19:31:04] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[19:31:04] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[19:31:04] *** Joins: resamvi (~resamvi@user/resamvi)
[19:31:42] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[19:35:41] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[19:39:22] *** Quits: hedon (~hedon@user/hedon) (Ping timeout: 265 seconds)
[19:41:37] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[19:43:20] *** Joins: moto (~moto@user/moto)
[19:45:07] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:51:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:56:46] *** Joins: Crassus (~Crassus@user/crassus)
[20:04:22] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[20:04:22] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[20:04:22] *** Joins: resamvi (~resamvi@user/resamvi)
[20:08:49] <rawtaz> im learning about go routines and noticed use of sync.WaitGroup, which makes sense. but i also see usage of the latter even when using just one goroutine - is it fair to say that you pretty much always use WaitGroup when you use goroutines? or are there use cases where you dont want to wait for the goroutines?
[20:09:59] <ikke> It depends on how you use them
[20:10:21] <ikke> but if you need to wait for goroutines to finish before ending the program, then yes, it would make sense
[20:10:35] <ikke> I just found out about a book called concurency in go
[20:10:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[20:10:41] <ikke> apparently it's a good book
[20:10:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[20:11:03] *** Joins: Mattiasl_ (~Mattiasln@185.213.154.236)
[20:11:19] <rawtaz> yeah.. im just thinking "when would i spawn a goroutine and not want to wait for it to complete, regardless of whether i wait in the current code that spawned it or if a more outer context/main program waits for it"
[20:11:37] <rawtaz> right, will look at that book. might be a bit early to grab it but it's a good tip im sure! :D
[20:12:06] *** Quits: Mattiaslndstrm (~Mattiasln@185.213.154.242) (Ping timeout: 260 seconds)
[20:15:01] <johnjaye> isn't concurrency one of the main strengths of go?
[20:15:10] <johnjaye> may as well write a book called "Objects in Java"
[20:15:42] <rawtaz> haha
[20:15:52] <rawtaz> this must be the book youre talking about ikke: https://www.goodreads.com/book/show/30413199-concurrency-in-go
[20:18:53] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[20:18:53] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[20:18:53] *** Joins: resamvi (~resamvi@user/resamvi)
[20:24:19] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[20:26:38] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:27:24] <j416> rawtaz: you might have a goroutine that never finishes on its own, like something that runs something on regular intervals, background tidyup or whatnot?
[20:27:42] <j416> rawtaz: perhaps a metrics reporter?
[20:28:15] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[20:28:16] <rawtaz> yeah you mean that isnt supposed to finish before the whole application finishes
[20:28:30] <rawtaz> is it fine to just leave it running and it will be shut down when the main app exists?
[20:28:31] <j416> I mean there may be cases where it doesn't matter
[20:28:34] <rawtaz> yeah
[20:28:52] <j416> yes; all goroutines will be killed when the main program exits
[20:29:36] *** Joins: mrig (~mrig@user/mrig)
[20:29:38] <rawtaz> is it bad to not close channels that the main program and goroutines communicate over, before exiting the problem? as in, are those not something you can just open and leave as it is, just like the goroutine itself?
[20:29:56] <j416> channels need not be closed
[20:30:05] <j416> they'll be garbage collected as they fall out of scope
[20:30:10] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:30:12] *** Quits: bluedust (~bluedust@117.207.229.182) (Remote host closed the connection)
[20:30:13] <rawtaz> ok. interesting, cuz theyre doing it in the code im looking at :D
[20:30:26] <rawtaz> i guess it's better to be tidy than to not be, kind of sets you up for proper clean code in the end
[20:30:31] <j416> if you have something consuming from them though, like a goroutine ranging over one, you might want to close it so as to cause the goroutine to exit
[20:31:15] <rawtaz> ah, right. that makes sense. the fact that they do that here means they are shutting down the goroutines
[20:31:25] <rawtaz> still not needed but clean
[20:31:25] <j416> probably.
[20:32:12] <j416> I'll guess that they're probably also waiting for that goroutine to finish, so they must close the channel to avoid deadlock
[20:33:06] <j416> if the goroutine does anything useful it's for the most part a good idea to wait for it to finish before shutting down
[20:33:13] <j416> (common sense perhaps)
[20:33:34] <rawtaz> this is the code: https://github.com/restic/beta/blob/master/main.go#L115
[20:33:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[20:34:01] <j416> by useful I mean, something like processing data that needs to be processed, as opposed to things that don't matter as much like metrics (a metric not reported because the program shut down won't matter)
[20:34:50] <j416> right; that would deadlock on line 170 if you removed line 168.
[20:34:54] <rawtaz> in short the goroutines sit there waiting for data on the/a channel, and when it gets it it does work. then loops that.
[20:35:14] <rawtaz> yeah, thats right
[20:37:21] *** Joins: Jmainguy1 (~Jmainguy@static.204.41.76.144.clients.your-server.de)
[20:37:35] *** Quits: Jmainguy (~Jmainguy@phy01.standouthost.com) (Quit: I quit yo)
[20:37:41] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[20:37:41] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[20:37:41] *** Joins: resamvi (~resamvi@user/resamvi)
[20:37:52] <rawtaz> and if we were to remove line 170, the Wait(), assuming the routines take some time to do their work theyll be permaturely shut down when the main program exits
[20:38:33] <rawtaz> so in summary we want to close the channel to make sure that the routines *ever* complete, and we want to wait for them to let them complete at all.
[20:40:14] <j416> right
[20:40:27] <rawtaz> thank you :)
[20:40:47] <rawtaz> im gonna regactor this code to clean it up a bit and to support building more than just one software
[20:40:51] <rawtaz> refactor
[20:41:05] <rawtaz> so this was useful, and a good starting project with goroutines
[20:42:21] *** Joins: Foxboron (~fox@archlinux/trusteduser/Foxboron)
[20:43:07] <ikke> rawtaz: if you have some blocking call, then you would not need to use waitgroups yourself
[20:43:35] <rawtaz> ikke: indeed, makes sense :)
[20:44:08] <Foxboron> Is anyone aware of any package managers or projects that are capable of creating detached debug packages from Go binaries? It seems like fairly basic DWARF parsing if unable to locate symbols as opposed to C/C++ code
[20:44:16] <Foxboron> s/if/is
[20:45:20] <rawtaz> design question: currently e.g. https://github.com/restic/beta/blob/master/main.go#L137 builds one piece of software (for a given arch+os coming in on the channel). i want to support building two different pieces of software. would you make the goroutine take e.g. a command+paths as well besides the os+arch, and keep spawning one goroutine per CPU, or would you spawn one goroutine for building software A on HALF the CPUs, and another goroutine for building sof
[20:45:35] <rawtaz> im thinking the first option is cleaner.
[20:46:31] *** Quits: nrl^ (~nrl@207.5.21.20) (Ping timeout: 256 seconds)
[20:46:43] <rawtaz> (or maybe even just sending software-specific build functions over the channel, that the goroutine then runs)
[20:56:46] *** Quits: Mattiasl_ (~Mattiasln@185.213.154.236) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:02:04] *** Joins: nrl^ (~nrl@207.5.21.20)
[21:09:51] *** Joins: hexology (~hexology@user/hexology)
[21:12:01] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:12:22] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:16:58] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[21:19:10] *** Quits: nrl^ (~nrl@207.5.21.20) (Remote host closed the connection)
[21:30:57] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 268 seconds)
[21:32:16] *** Quits: void09 (~void@150.230.21.57) (Quit: void09)
[21:32:16] *** Joins: defn (~n0b0dy@user/defn)
[21:34:21] *** Joins: pepee (~pepee@user/pepee)
[21:38:19] *** Joins: void09 (~void@150.230.21.57)
[21:40:17] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:41:48] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[21:43:42] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[21:43:42] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[21:43:42] *** Joins: resamvi (~resamvi@user/resamvi)
[21:49:07] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:56:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[22:09:49] *** Quits: void09 (~void@150.230.21.57) (Quit: void09)
[22:10:20] *** Joins: void09 (~void@150.230.21.57)
[22:22:07] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[22:24:19] *** Joins: Mattiaslndstrm (~Mattiasln@185.213.154.230)
[22:28:37] *** Quits: Mattiaslndstrm (~Mattiasln@185.213.154.230) (Ping timeout: 240 seconds)
[22:30:21] *** Joins: arinov (~arinov@178.240.190.206)
[22:33:15] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:38:43] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:41:03] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:47:51] *** Joins: Mattiaslndstrm (~Mattiasln@185.213.154.170)
[22:48:55] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[22:49:49] *** Joins: bluedust (~bluedust@117.207.229.182)
[23:01:37] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[23:01:37] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[23:01:37] *** Joins: resamvi (~resamvi@user/resamvi)
[23:04:56] *** Quits: arinov (~arinov@178.240.190.206) (Ping timeout: 245 seconds)
[23:06:29] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[23:07:28] *** Quits: Mattiaslndstrm (~Mattiasln@185.213.154.170) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:08:55] *** Joins: bluedust_ (~bluedust@194.37.96.137)
[23:11:30] *** Joins: analogsalad (~analogsal@user/analogsalad)
[23:12:02] *** Quits: bluedust (~bluedust@117.207.229.182) (Ping timeout: 240 seconds)
[23:15:15] *** Joins: rednul (~textual@098-127-178-044.biz.spectrum.com)
[23:16:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:18:19] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[23:18:19] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[23:18:19] *** Joins: resamvi (~resamvi@user/resamvi)
[23:20:25] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[23:26:18] *** Joins: arinov (~arinov@178.240.190.206)
[23:26:36] *** Quits: arinov (~arinov@178.240.190.206) (Client Quit)
[23:30:20] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:33:00] <b0nn> morning rawtaz o/
[23:35:52] <b0nn> I don't know if build will work across multiple threads, but I do think that you want a pool to draw from
[23:36:28] <b0nn> ah which is what you're doing
[23:37:47] <b0nn> and using a closure to apss in the channel
[23:38:12] <b0nn> So, yeah - that Boss/Worker with a pool of available goroutines is what I'd do too
[23:50:57] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Remote host closed the connection)
[23:51:14] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[23:52:35] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[23:53:55] <rawtaz> hey b0nn :D
[23:53:59] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[23:55:17] <rawtaz> b0nn: but would you have a pool of workers like now, one for each CPU, that takes on work and looks at what works needs doing. or would you run type of worker for half the number of CPUs, doing just one type of work, and another type of worker for the other half of the number of CPUs, doing the other type of work?
[23:56:10] <rawtaz> i suppose it's much simpler to just use one and the same type of worker, which then either does the right type of work (out of two software builds) based on a parameter in the channel communication, or even getting a build function to call.
[23:56:20] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[23:57:16] <rawtaz> seems pointless to split up the number of workers. because if i do that, then it will not be fully utilized if the first type of work happens much more frequently than the other type of work, of course :D
[23:57:22] <rawtaz> so its totally settled.
[23:58:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:58:16] <b0nn> The IRC rubber duck wins again :)
[23:58:19] <rawtaz> yeah :D
[23:58:25] <rawtaz> gotta love that guy/gal
[23:58:29] <rawtaz> yellow ftw
[23:58:44] <rawtaz> imagine if we all worn yellow rubber duck suites all the time - there would never be any uncertainties
[23:58:48] <rawtaz> everything would be self-solving
