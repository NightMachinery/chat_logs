[00:04:01] <gilberth> Another thing, why I can't do with just a keymap. Keymaps usually don't tell how the control should behave. I have '[' produce '(', while <control>+<[> still produces c-[ and I like it that way, because <control>-<shift>-<9> would be awkward to type.
[00:33:13] <pjb> gilberth: you want keyboard translations.
[00:34:28] <pjb> gilberth: http://paste.lisp.org/display/10157
[00:35:07] <pjb> gilberth: this paste has been waiting for you for 16 years and 2 months!
[00:37:57] <gilberth> pjb: And how does this work with every application? Even within any virtual machine?
[00:40:35] <pjb> this works only inside emacs.
[00:40:46] <pjb> otherwise xmodmap, but not on macOS…
[00:41:52] <pjb> now, theorically on macOS, there's somewhere a keyboard layout definition file that should be editable (in some older version of MacOSX  and in NexTSTEP it existed). But with later versions I don't know where it is or even if it's editable or accessible.
[00:43:10] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[00:43:31] <gilberth> As I said, a modmap will not do.
[00:44:11] *** edgar-rft is now known as all
[00:44:21] *** all is now known as Guest5617
[00:44:27] <pjb> But what are you doing outside of emacs anyways???
[00:44:46] *** Guest5617 is now known as edgar-rft
[00:45:38] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[00:45:58] <pjb> (basically, the only other app open, is Safari for html5, x11 for linux stuff, and OmniGrafle).
[00:46:03] <gilberth> A modmap just lacks a column for the control key. Karabiner can do what I want, I press <[> and the application sees <left-shift> <9>, this way this works everywhere. And <control> <[> still is c-[.
[00:46:36] <gilberth> But Karabiner cannot do that with newer macOS anymore. Thus I need some kind of dongle.
[00:47:04] <gilberth> Too fix it right at the hardware level.
[00:49:24] <gilberth> Who ever wrote the new keyboard emulation for the CADR was doing the reverse, and map a keysym to what ever keycode and shift the CADR would need to type the character corresponding to the keysym. Clever.
[00:50:14] <gilberth> So can actually use a non-QWERTY keyboard with the CADR simulator, if you wish.
[00:50:48] *** Joins: lad (~lad@user/lad)
[01:13:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[01:20:18] <hayley> https://www.youtube.com/watch?v=wM95J3bhl1U
[01:31:00] * hayley sees the programming teacher use ø for φ
[01:34:16] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[01:34:37] *** Joins: Alfr (~Alfr@user/alfr)
[01:35:35] <selwyn> hayley: lol
[01:36:08] <mfiano> morning
[01:36:08] <Alfr> hayley, maybe you're confusing his ϕ for ø?
[01:36:16] <selwyn> i´ve seen people use φ and ϕ to mean different things
[01:36:17] <hayley> Nah.
[01:36:59] <selwyn> also, someone who got two years into a maths degree before realising that ψ and φ are different
[01:37:31] <Alfr> selwyn, that's still nice, imagine someone using ϕ and Φ to denote different things. :)
[01:37:49] <selwyn> i think the issue is that greek handwriting is never taught to scientists/mathematicians
[01:38:06] <selwyn> well, ϕ and Φ are different
[01:38:57] <Alfr> selwyn, sure but they really look similar when some people write them.
[01:39:11] <selwyn> i suppose
[01:40:29] <pjb> It's quite oxymoronic to write a greek letter in italic…
[01:41:42] <selwyn> but in handwriting ⍺ is written the same as ´a´ anyway
[01:43:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[01:43:47] <edgar-rft> let's write italian letters in greek instead
[01:43:50] <hayley> Also, they are using AES ECB to demo encryption. Big mistake.
[01:44:00] * mfiano writes `a` like `a`
[01:44:21] <selwyn> hardest symbol i had to write was fraktur letters to denote lie algebras
[01:44:59] <Alfr> hayley, it's fine as along as you only encrypt one block with each key.
[01:45:00] *** Joins: aeth (~aeth@user/aeth)
[01:45:32] <hayley> ...at which point you might as well use an actually chaining mode.
[01:45:47] <GreaseMonkey> it's also fine if you demonstrate why ECB is shit and then proceed to demo a mode that doesn't suck
[01:46:25] <GreaseMonkey> i *think* GCM is what the cool kids use nowadays but i could also be out of date there
[02:13:17] <hayley> "C is good" "you have posted unsafe code prepare to receive FAA committee" "Of course, people who can't write C will appear suddenly."
[02:13:20] <hayley> survivorship-bias-plane.png
[02:16:33] <hayley> https://www.youtube.com/watch?v=PcsumKaIXEs
[02:33:12] *** Joins: aeth_ (~aeth@user/aeth)
[02:33:13] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[02:33:17] *** aeth_ is now known as aeth
[02:46:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:54:16] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[02:58:31] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[03:03:52] <pjb> selwyn: M-x pjb-unicode-mathematical-fraktur RET 𝔴𝔥𝔞𝔱 𝔦𝔰 𝔡𝔦𝔣𝔣𝔦𝔠𝔲𝔩𝔱 𝔦𝔫 𝔴𝔯𝔦𝔱𝔦𝔫𝔤
[03:03:52] <pjb> 𝔣𝔯𝔞𝔨𝔱𝔲𝔯? M-x pjb-unicode-ascii RET
[03:08:07] <selwyn> cool
[03:08:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:12:50] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:13:12] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:48:12] <hayley> https://www.youtube.com/watch?v=Ki8bqO_Ka0A
[03:49:11] <hayley> gilberth: Seems there is no clearly best way to do substring search with SIMD either. Hyperscan has its own bit mask diddling thing for multiple possible substrings.
[03:53:34] <gilberth> hayley: You still want to find just substrings?
[03:57:46] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[03:58:27] <gilberth> One lecturer at uni used old German school handwriting, Sütterlin, for vectors. As almost none was accustomed to it, it took a while for the students to recognize that there was actually "x" and "y" written, where they previously read just heck-some-glyph. x: <https://upload.wikimedia.org/wikipedia/commons/9/9f/S%C3%BCtterlin-X.png> y: <https://upload.wikimedia.org/wikipedia/commons/1/11/S%C3%BCtterlin-Y.png> :-)
[03:59:44] <gilberth> It was more handy and quicker to write than scribbling a little arrow above.
[04:00:07] *** Quits: christophergray (~christoph@190.148.52.166) (Quit: WeeChat 3.3)
[04:00:47] *** Joins: selwyn (~selwyn@user/selwyn)
[04:17:37] <GreaseMonkey> the precursor of that was probably used for the Voynich Manuscript
[04:27:38] <hayley> gilberth: That, or I run the DFA in parallel. And that requires far too many lookup tables AFAICT
[04:31:06] <hayley> The other algorithm I know is to run a NFA (eugh!) with SIMD, which seems like making an awfully fast horse.
[04:31:32] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:31:41] <hayley> https://github.com/intel/hyperscan/blob/master/src/fdr/teddy_avx2.c#L43-L110 lol
[04:40:46] <hayley> The description in https://github.com/jneem/teddy#teddy-1 makes it seem relatively simple, though you need a vector unit with a shuffle instruction.
[04:43:14] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:44:23] <hayley> Great, now the Intel intrinsics guide redirects to some other crap I don't want to read.
[04:50:09] <hayley> There is still https://www.laruence.com/sse/#text=shuf&techs=AVX2&expand=5156 but that _might_ be out of date, and now I get to hurt my head on how AVX2 is just two 128-bit vector ops glued together.
[05:04:10] *** Quits: iisi (sid19824@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[05:04:21] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[06:13:40] *** Joins: dider (~dider@80.92.163.3)
[06:29:44] *** Quits: wykwit (9ffdc2b70a@knopi.disroot.org) (Read error: Connection reset by peer)
[06:30:13] <copec> Mfiano: I use an html5 xpra to hop around with various apps including emacs
[06:35:23] <copec> I’ve actually thought with the nature of emacs that it would be neat if someone wrote an api backend that you could start and connect with a JS front end or something
[06:35:55] <copec> It would connect like another client to serv-start
[06:36:22] <gilberth> xpra sounds interesting, but does it actually transport X11 or just bitmaps, like VNC?
[06:37:05] <copec> bitmaps but more like rdp
[06:37:24] <copec> the app feels native 
[06:37:26] <gilberth> Still bitmaps though. Next.
[06:39:44] <gilberth> Actually I believe we should transport DPS^WCairo and have display lists on the display server. NeWS? Anyone?
[06:39:55] *** Quits: dider (~dider@80.92.163.3) (Remote host closed the connection)
[06:40:29] <gilberth> I which, I would be more productive, at times. Or at least could actually write about my ideas.
[06:44:27] <copec> Isn’t that what an Xserver is doing when connecting to a client across a network?
[06:48:10] <gilberth> No. An X server does not keep a display list, redraw is a duty of the application.
[06:50:52] <copec> The thing I like with xpra is it integrates the application window into the local window manager and forwards the inputs directly instead of controlling a remote mouse/keyboard
[06:51:19] <copec> Then only those parts of the screen that the application updates get sent
[06:52:36] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[06:55:09] <gilberth> That is: When a window is scrolled, new graphics for the newly visible area must be drawn by the client. Macos actually is more clever here: For a scrolled window, it keeps a bit of pre-rendered content beyond what is visible through the viewport, so that when scrolled, a mere blitter op internal to the GPU takes place. In theory an X server could do that, too. I plan to do that with my CLIM.
[06:56:46] <gilberth> copec: Yes, and this is what I think is silly. Why not keep a display list on the display server? Or: At the very, very, very least, allow for pixmaps in the protocol.
[06:59:22] <gilberth> With a tiny font at my favorite 6x13, a single character is like 234 bytes in RGB8, while it is just one byte when sent over a tty or as part of DPS or on a tty.
[07:00:30] <copec> I can’t say that I know enough but it would seem like the application logic needs split up
[07:01:06] <gilberth> Does it?
[07:02:04] <copec> I dunno can you see that working with a traditional gui app binary?
[07:02:58] <gilberth> No, that's easy. The client keeps a display list, the server keeps one, deltas are send, when ever something changes. Display lists could be per (sub)window, so that the client can tell the server "Please scroll that and that at position (x,y), thanks." as the server knows the contents, no further network traffic needed.
[07:03:43] <copec> fwiw I think that’s how OpenGL over X11 used to work 
[07:04:37] <gilberth> copec: You could at least implement an X11 server, that offers this screen(1) like functionally and forwards drawing to the actual seat and not just bitmaps. But then kids of today don't believe in vector graphics anymore and think that graphics is to be rendered by the CPU into a bitmap and send blittered. Somehow.
[07:05:21] <gilberth> copec: Yes. GLX works fine. You could play Quake over 10Mbps ethernet, just fine.
[07:06:17] *** Joins: semz (~none@user/semz)
[07:06:32] <gilberth> Even Quake3. Did that, been there. Was nice to watch how good GL over X11 works. It's actually not that much traffic.
[07:07:21] <copec> Yeah I’ve done that 
[07:07:29] <gilberth> But in days of fast GPUs this all still applies, you win when you keep your data on the GPU and only send render requests. The bus is the bottleneck.
[07:08:25] <copec> I’ve even gone from an old irix box to a modern Linux box like 20 years afo
[07:08:37] <copec> With GL
[07:13:40] <gilberth> As I was a student at my uni using GLX was routine. I had access to SGIs, while one of the application I worked with actually ran on another mlti-CPU host, while the SGIs would render the 3D.
[07:13:52] <gilberth> Late 90's.
[07:14:39] <gilberth> And we used Common Lisp.
[07:15:01] <copec> Wow, I wish mine would have been that great
[07:15:35] <copec> I started uni in fall of 99' and it was all 90's PC hardware
[07:16:26] <gilberth> I started four years earlier.
[07:16:31] <copec> I only played with cool old Unix hardware through various connections with people
[07:17:36] <gilberth> Well, these days every one has HW in his pocket which runs circles around SGIs.
[07:18:03] <gilberth> But those workstations had the best displays all around campus. And truecolor!
[07:20:43] <gilberth> And now I sit here and implement a >40 year old network protocol. *sigh*
[07:23:51] <gilberth> Am sick, hide at my cousin's place, and somehow have no friends. What a successful life!
[07:24:51] <gilberth> I need to redesign my stuff, it is full of exceptions after exceptions after exception. A sign of a design, which is a poor fit.
[07:26:52] <clothespin_> c++ is so ugly
[07:27:30] <clothespin_> it has characters and symbols which have no business being in a program, at least not at the places they are found
[07:28:30] <clothespin_> maybe i'm biased
[07:32:25] <gilberth> Then try to avoid C++.
[07:33:49] <clothespin_> I'm trying to get the doughnuts out of the jug of formaldehyde
[07:37:11] <gilberth> ?
[07:46:59] <hayley> Okay, they moved the intrinsics guide to https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html for some reason.
[07:50:26] <hayley> Seems they redesigned it slightly, the colours are more muted.
[07:52:02] <moon-child> hmm, a bit more muted but the gradient is more sensible now
[07:52:15] <moon-child> except maybe for the mmx yellow, but--mmx deserves yellow
[07:52:51] <hayley> gilberth: So the trick is that they use two 16-byte registers for nibble lookup tables. Then run your data through LUTs for both high and low nibbles, and AND the results, and you get match info for each byte.
[07:54:17] <hayley> Then you can keep ANDing more lookup tables and loaded vectors to add extra bytes. But you need SSSE3's (yes, S 3 times) PSHUFB or the AVX2 equivalent to make it work.
[07:58:20] <hayley> So...they went from _mm_shuffle_pi8 to _mm_shuffle_epi8 to _mm256_shuffle_epi8.
[07:59:06] <hayley> And AVX512 has _mm512_shuffle_epi8 of course. And FWIW AVX512 doesn't have the "lane" restriction like AVX2 has.
[08:02:11] <gilberth> And what is that good for?
[08:03:17] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:04:28] <hayley> Those lookup tables?
[08:04:38] <dave0> maw
[08:05:43] <gilberth> Imagine my OS being written in CLOS, then I could just plug in my "NCP" into whatever socket API and every application would work with that, provided we had sth like a generic syntax for specifying end-points. Or logical host and/or domains, I could define. Imagine pointing your browser at http://mycadr/ and have it connect via Chaosnet talking HTTP.
[08:06:18] <hayley> Hm, if we have 32-bit characters in CL, can I encode more possibilities into the result vector?
[08:06:33] <gilberth> hayley: No, blazingly fast search?
[08:07:01] <hayley> Yes, substring constants in REs are easy picking for SIMD.
[08:07:15] <gilberth> hayley: No one stops you from just using 32-bit words anyway.
[08:07:49] <hayley> FWIW it's dashmap which is "blazing fast", not the Rust regex engine. And apparently "blazing" means "not".
[08:07:51] <gilberth> hayley: Still, your application is search, just search. Not making sense of things.
[08:08:12] <gilberth> hayley: Heh.
[08:08:21] <hayley> Sure, but we do multiple substrings for e.g. foo|bar|baz
[08:08:44] <gilberth> Still search. For that we have indexes.
[08:09:06] <hayley> I could do approximate search as a fallback, i.e. search for (f|b)(o|a)(o|r|z) to filter out obvious misses, then run the DFA to be sure.
[08:10:35] <gilberth> And, milady, since when do you believe in files anyway?
[08:10:48] <hayley> It's still not for files.
[08:11:14] <gilberth> It is. You can't apply that to a forest of pointers.
[08:11:31] <hayley> Now I have to figure out how they name things at Intel. _mm256_shuffle_epi8 takes a control vector, whereas _mm256_shuffle_epi32 takes a constant integer.
[08:11:32] <gilberth> And I consider a stream of bits a file, too.
[08:12:04] <hayley> Well, shit, too bad then. Call me when we don't have to parse data down the wire, and people grow up and use serialized objects.
[08:12:29] <gilberth> Actually a file is a conservation of a stream of bits in time.
[08:13:05] <moon-child> hayley: how do you implement the (de)serializer?
[08:13:15] <hayley> moon-child: Well, yes.
[08:13:16] <gilberth> hayley: You don't parse with searching. You do with scanners and LALR(1), if you're lucky.
[08:13:41] <moon-child> and you cannot say it is 'primitive'; what if I have an idea for how to build a better one and screw your implementation?  You have to _have_ files, bitstreams, w/e.  They just shouldn't be primary
[08:13:42] <hayley> gilberth: I think simdjson does a similar trick with lookup vectors to lex JSON using SIMD.
[08:20:07] <gilberth> hayley: Does it win?
[08:20:17] <hayley> Yes.
[08:20:47] <gilberth> I can see this only be a win on finding the end of a string constant and of a run of white space. All else must be interned anyway.
[08:21:52] <gilberth> And, as I do. Having a fast path of no escapes within a string literal, in which case we could just copy part of the input buffer w/o looking at the escape sequences and also decoding UTF-16.
[08:23:14] <gilberth> But then this all is better done on the UTF-8 octet stream directly. In so far I believe Go's decision to keep strings in UTF-8 internally is a good one. You don't access strings randomly that often.
[08:26:29] * hayley uploaded an image: (116KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/DRmYfDnDoctxrzYhyuiUHXPx/i-told-you-about-locks.jpg >
[08:28:27] <hayley> Oh, wait, there's no Int type in Rust. Eh well.
[08:29:55] <moon-child> gilberth: imo if you want to work on 'utf-8', you might as well just work on a byte-array.  But as a default representation it's better to go for something like raku's string type, which has random access to grapheme clustres w/o indirections
[08:30:33] <moon-child> utf8 as representation should be considered an implementation detail _most_ of the time
[08:31:09] <hayley> I'm still confident in my idea to do approximate searches; it's nowhere near as good as doing a precise search, but apparently a lot more portable (no LUTs, no damn PSHUFB).
[08:31:16] <gilberth> moon-child: My trouble is that I want something which integrates seamlessly in CL, so I am stuck with the CL string data type.
[08:31:32] <hayley> The LUT is implemented by using the byte vector as a control table for our LUT, oddly enough.
[08:32:15] <gilberth> moon-child: Well, when one one to use assembler to have fast matching, we leave the realm of "free of implementation-details."
[08:32:46] <hayley> Hey, they're intrinsics, and totally not assembler.
[08:32:47] <moon-child> gilberth: I think a conforming lisp implementation _could_ do something similar; but no existing one does
[08:33:05] <gilberth> But for my part, I would be happy if UTF-8 decoding won't take as much time as me scanning.
[08:33:06] <moon-child> 'when one one to use assembler to have fast matching, we leave the realm of "free of implementation-details."'  right, yeah.  But _most_ of the time you wouldn't bother with that :P
[08:33:52] <gilberth> moon-child: I am stuck with what ever representation the Lisp at hand uses.
[08:34:30] <moon-child> hayley: imo, using intrinsics over asm is a waste of time.  If I care enough that I want to decide what instructions get generated, I might as well write the whole thing that way myself; the compiler will not likely get it right in all cases.  But this is apparently an unpopular opinion ¯\_(ツ)_/¯
[08:34:49] <hayley> Too dumb for register allocation IME
[08:35:09] <gilberth> moon-child: Well, why hayley only wants to search, I want to scan, and I want that to be fast. And when most of the time is spend in EAD-SEQUENCE because of UTF-8 decoding, that's bad.
[08:35:52] <hayley> Though I'm already stuck with SBCL and x86-64 for stuff.
[08:36:49] <gilberth> OTOH The fact that CL has a character data type is nice. I could be certain that my code even runs, when Unicode grows beyond its current 29 or whatever bits. You could run old CL software from the 7-bit area just fine. And that is terrific.
[08:37:22] <moon-child> hayley: well, yes, I mainly hold that for code completely hand-written.  Compiler compiler is an awkward middle ground :P
[08:37:28] <moon-child> gilberth: yeah
[08:37:30] <gilberth> hayley: Ditch those 8-bit chars of SBCL! That's the most crazy idea ever to have two character data types for no reason.
[08:37:33] <dave0> it's lispcafe... can you top me up, hun?
[08:38:18] <gilberth> dave0: "Top you up"? Does it mean, you want your mug refilled? English lesson for /me.
[08:38:30] <dave0> gilberth: yes please :-)
[08:38:31] <hayley> gilberth: Yes, I test with 32-bit chars.
[08:38:44] <dave0> gilberth: i think it's an american saying
[08:38:53] * hayley was late to pay university fees.
[08:38:55] * gilberth walks over to the coffee machine.
[08:39:16] <hayley> Apparently if it was more than $500, I'd be kicked out. If it was less than $500, which it is, they get a debt collector and charge me for the privilege.
[08:39:20] <gilberth> hayley: Yes, and for the rest just convert.
[08:39:50] <hayley> It doesn't bother me to generate code for 8-bit strings, really.
[08:40:04] <gilberth> dave0: This coffee here is sitting for ages and doesn't smell good. I prepare some fresh coffee. Just a minute, bro.
[08:40:20] <gilberth> hayley: And what for?
[08:40:24] <dave0> lol it smells funny :-)
[08:40:36] <hayley> Because someone might.
[08:40:59] * gilberth pours the oldish coffee looking like tar into the sick and cleans the can.
[08:41:36] <gilberth> hayley: And? Then tell them: Don't! We live in the 21st century, the 8-bit ere is gone.
[08:42:13] <gilberth> * coffee machine is making some noise like bllumm ppffft bbbbrrr pfffff
[08:42:58] <gilberth> dave0: Here you go! Sugar? Milk?
[08:43:08] <dave0> gilberth: ah thanks i like it black
[08:43:39] <gilberth> I do, too. No reason to cover the taste of fresh well-made coffee.
[08:44:19] <hayley> I guess PSHUFB also works for 32-bit characters, but you have to be more careful with generating lookup tables.
[08:44:21] <dave0> i'm here for the coffee.. i don't understand any of the conversations :-)
[08:45:04] <gilberth> dave0: Heh, if you listen long enough you will understand. Give it time. ;)
[08:45:24] <hayley> But then I have the pleasure of trying to split the bit masks [A, a, B, b, ...] into [A, B, ...] and [a, b, ...].
[08:47:07] <gilberth> dave0: Anyhow, my utterly useless CADR adventure is a great inspiration for my yet to be build TTL CPU. I want to run some environment on it, like a file system, some editor, a compiler etc. Perhaps I go with just Lisp.
[08:48:23] <dave0> gilberth: i got the impression that you like lisp
[08:48:25] <gilberth> dave0: The CADR CPU itself has less to none actual support for Lisp. This was even mentioned in the '77 Lisp report.
[08:48:45] <gilberth> dave0: Sure. I don't want to use anything else.
[08:49:31] <gilberth> They wanted to have a quick and fast and memory-efficient escape from the 18-bit address space time-shared PDP-10.
[08:51:09] <gilberth> All the nice things like tag/type checking and forwarding pointers is actually done in software as the microcode is the real software on that machine.
[08:51:46] <gilberth> Implementing a byte code interpreter.
[08:52:09] <dave0> brb
[08:59:58] <dave0> i'm hooked on brownies
[09:00:10] * dave0 noms
[09:00:20] * hayley wonders how to do a horizontal LOGAND.
[09:00:42] <mfiano> You just did
[09:00:50] <mfiano> morning :)
[09:00:51] <hayley> bg7nhj
[09:00:53] <hayley> ^ head hittin keyboard
[09:01:15] <dave0> AND is multiply isn't it? is there a horizontal multiply?
[09:01:17] <hayley> Well, I want to make [A, a, B, b, C, c, ...] into [A and a, B and b, C and c, ...]
[09:02:40] <hayley> dave0: Only in (mod 2).
[09:05:58] <hayley> Oh, I can just shift and AND the 32-bit integers to get full masks. Though it probably blows out my...8 registers on SSE with masks too?
[09:07:18] <hayley> Or not, I guess the shifted values are dead after I LOGAND. So it's just one more register.
[09:07:55] <moon-child> hayley: there is also pshufd
[09:08:39] <hayley> It'd help if I wanted [A and a, B and b, ...] from [A, B, C, D, a, b, c, d] I think, but that's not what I want.
[09:15:51] * gilberth takes notes to stock brownies at Lisp Café.
[09:16:10] <dave0> gilberth: i have some!
[09:16:21] * dave0 hands them out
[09:16:27] <gilberth> dave0: You'll run out. Eventually.
[09:16:33] <hayley> I think dave0 has pot brownies.
[09:16:46] <dave0> haha not edibles :-p
[09:16:57] * hayley has flashbacks to being given a chocolate muffin with some spicy shit in it when she was 13.
[09:17:35] <dave0> gilberth: that is very depressing outlook on life :-(
[09:18:01] <gilberth> dave0: This is why we need more stock.
[09:18:25] <dave0> i'm happy to pay a little extra
[09:19:36] <gilberth> dave0: Extra? Are that luxury cookies? With edible gold on it?
[09:19:42] <dave0> haha
[09:19:57] <dave0> is gold really edible?
[09:20:12] <hayley> Apparently yes. And it tastes like nothing.
[09:20:28] <hayley> https://www.youtube.com/watch?v=SfNgpLkV6KE
[09:22:11] <gilberth> Ever noticed that the tactile feed back on the home button of an iPhone isn't there when it's off? Actually the touch pad of a MacBook is like that too. Once while the machine was operating just fine otherwise, whatever software triggered the tactile feed back was stuck and the "click" gone.
[09:23:13] <hayley> Yes, the new buttons do the pressing "in software" somehow.
[09:23:29] <gilberth> This is almost like those fake key click sounds which were in fashion in the 80s.
[09:25:23] <gilberth> Or like the fake engine sound that electrical cars have to make by law. You think you get silent cars? No, there is a law that car's have to make noise.
[09:25:26] <hayley> Dumb question, POSIX says nothing about how init works, about the mere presence of a package manager, and about graphical environments?
[09:25:32] <hayley> *right?
[09:25:47] <gilberth> Right.
[09:25:58] <hayley> Someone is complaining Linux doesn't follow standards for init, package managers, and graphics, when literally nothing is standardized.
[09:26:37] <mfiano> Reminder: LGJ starts Friday for those needing a fun break.
[09:26:42] <gilberth> Yes. Though there are standards for the file hierarchy, like /usr, /etc, etc.
[09:27:16] <hayley> Yes, that much is standard, but not what I mentioned.
[09:27:28] <gilberth> mfiano: What is LGJ?
[09:27:45] <mfiano> gilberth: Lisp Game Jam
[09:28:06] <gilberth> Ah. Will you participate?
[09:28:18] <mfiano> No I will just organize it as usual.
[09:28:27] <hayley> New game idea: you have to tell someone to stop pulling standards out of your ass while your ex watches
[09:28:58] <gilberth> The great thing about standards is that there are so many to choose from.
[09:29:46] <hayley> s/your/their/
[09:30:25] <gilberth> mfiano: Do you organize it on a regular basis? Is there a web site?
[09:31:41] <mfiano> Yes, I have organized it for the past 6 years or so. It's hosted here: https://itch.io/jam/autumn-lisp-game-jam-2021
[09:31:53] <gilberth> I still my home directory being called /usr/gilbert.
[09:32:34] * hayley uploaded an image: (26KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/FfVGerJkbyjrKGdIRLaILAyW/Screenshot_2021-10-12_17-09-14.png >
[09:32:38] <hayley> Thankyou minecraft.net very cool
[09:35:02] <gilberth> mfiano: Quite a few joined says the page. Terrific.
[09:35:48] <gilberth> hayley: Underscores? Seriously?
[09:35:57] <hayley> Apparently so.
[09:36:44] <gilberth> Who came up with the underscore, anyway. A typewritter has is for underlining.
[09:37:12] <mfiano> A little on the low side, but that's okay.
[09:37:49] <gilberth> And as the CADR takes backspace as a constituent char, you could actually name symbols underlined.
[09:38:13] <hayley> Now someone is asking how defun is not allowed but defgeneric is.
[09:38:50] <hayley> "cause defun means no gf (gf = generic function)"
[09:40:03] <dave0> gf = girlfriend and i don't have one :-(
[09:40:59] <hayley> let gf = girlfriend in I had one, then I didn't
[09:42:31] <gilberth> Like this: http://clim.rocks/gilbert/underscore.png
[09:44:58] <dave0> i'm not sure how i feel about having control characters in identifiers
[09:46:29] <gilberth> http://clim.rocks/gilbert/cadr-lispcafe.png    ;accented chars with ^H
[09:46:42] * hayley is reminded she also needs to come up with less overloaded terms for things like "system" and "block". The former is a "server" except without the networking parts, and the latter is a tuple <key, value, channels>.
[09:47:12] <gilberth> Well, I always wondered, if ASCII was supposed to actually be used like this. Unicode also has those combining characters, where you could combine accents with other unaccented characters.
[09:48:27] <gilberth> And man(1), actually nroff(1) uses ^H for underlining and bold.
[09:49:51] <gilberth> dave0: We all could found a club. I also don't have a GF right now, to find one I would need to leave the house.
[09:58:20] * hayley uploaded an image: (116KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CIiLjrsdczzNGYXvUwPJhryj/i-told-you-about-locks.jpg >
[09:58:25] <hayley> Er, wrong image...
[09:58:37] * hayley uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qYJprGbpCQVouORznFASDhdm/i-told-you-about-locks.jpeg >
[09:58:40] <hayley> I think I've perfected this meme now.
[10:01:46] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[10:04:38] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (*.net *.split)
[10:04:38] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[10:04:38] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[10:04:39] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[10:04:39] *** Quits: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de) (*.net *.split)
[10:04:39] *** Quits: dimadima (~user@80.58.238.35.bc.googleusercontent.com) (*.net *.split)
[10:04:39] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[10:04:39] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[10:11:28] <hayley> Apparently they want us to pick subjects for next year now, even though it's only October.
[10:26:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:26:26] *** Joins: aeth (~aeth@user/aeth)
[10:26:26] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[10:26:26] *** Joins: sm2n (~sm2n@user/sm2n)
[10:26:26] *** Joins: dimadima (~user@80.58.238.35.bc.googleusercontent.com)
[10:26:26] *** Joins: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de)
[10:26:26] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[10:26:26] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[10:26:26] *** calcium.libera.chat sets mode: +o gilberth
[10:38:54] *** Joins: makomo (~makomo@user/makomo)
[10:43:43] *** Joins: cranium (~cranium@user/cranium)
[11:22:05] <hayley> https://www.youtube.com/watch?v=eIc8P78TKPY
[11:35:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[11:37:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:36] * hayley continues to think about cooperative scheduling
[11:41:36] * dave0 yields the cpu to hayley
[11:41:48] <hayley> My previous "proof" made no sense, because if we have a program "A; yield; B" it is still the case that A → B. But if I had "fork(A, B)" then there are no constraints set by the program, other than how one task runs at a time in this sort of system. So either A → B or B → A. As per Lamport, this is sufficient to claim that the program is not concurrent.
[11:43:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:43:18] <hayley> (On a uniprocessor, it is evident that only one task runs at a time, but they have the more insidious requirement that entire program fragments delimited by yields run without interrupts.)
[11:43:57] <hayley> (So there is a difference; the library/language/etc specifies that you will have serial execution, whereas it only just so happens if you have a uniprocessor machine.)
[11:44:41] <dave0> is it still cooperative if an interrupt (other than a clock) can change which task runs?
[11:45:15] <hayley> I think any interrupt is as useful as any other.
[11:45:39] <hayley> From the program's point of view, it can still yield somewhere other than a YIELD statement.
[11:45:47] <moon-child> hayley: the scheduling algorithm is independent from whether the actual task-switching is triggered preemptively or otherwise
[11:46:20] <hayley> Sure, but I don't see how it relates.
[11:46:24] <moon-child> dave0: no; from the program's perspective, cooperative multithreading means that a lock is held from the time after 'yield' returns until the next time when yield is called
[11:47:23] <dave0> so no interrupts while it holds that lock?
[11:48:18] <dave0> hayley: interrupts seems difficult to me
[11:48:36] <moon-child> dave0: no interrupts mean that if one prcoess takes up 100% cpu, nothing else can run
[11:49:00] <hayley> (Come to think of it, "conceptually, A and B could run in parallel" suffices for a hand-wavy-but-not-wrong definition of "concurrency". Maybe I should do that, but citing Lamport looks cleverer)
[11:50:56] *** Joins: notzmv (~zmv@user/notzmv)
[11:52:41] *** Joins: selwyn (~selwyn@user/selwyn)
[12:04:07] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:12:55] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[12:20:28] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Quit: bibi!)
[12:20:50] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[12:21:44] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[12:25:05] *** Joins: makomo (~makomo@user/makomo)
[12:40:25] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[12:42:13] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[12:43:22] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[12:48:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:48:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:53:29] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[12:53:54] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:01:39] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[13:04:23] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:07:55] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:09:16] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[13:11:05] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:18:51] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[13:21:44] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:31:16] <mfiano> moon-child: Why even is there sigiling?
[13:31:40] <mfiano> I mean for the types like scalars, hashes, and arrays... not twigils
[13:33:02] <mfiano> makes more sense for twigils since that clearly changes semantics, like dynamic scope. not sure if there are different semantics with the first character, or if its just for readability/type-checking
[13:33:46] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[13:34:10] <hayley> Someone is now telling me that the NIC and CPU always run in parallel, despite the CPU running sequential code, and that GPU mining bottlenecks on the network.
[13:34:17] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-101F-static.midco.net)
[13:34:21] <hayley> "I don't care", and "no it doesn't", respectively
[13:34:30] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[13:35:25] <moon-child> mfiano: why has lisp multiple namespaces?  I should be able to say:  (let ((f list)) (f 1 2 3)) #| --> (1 2 3) |#.  Yet, there are advantages to the current scheme
[13:35:46] <moon-child> 'different semantics' yes.  Compare: my $x = 1 --> $x is 1.  my @x = 1 --> @x is [1]
[13:36:27] <mfiano> I see.
[13:37:07] <moon-child> going to sleep now.  But I will also note: it is convenient to be able to declare e.g. both an array and a scalar with the same name in the same scope.  Functions and other variables in different namespaces there is obvious precedent for.  String interpolation works better with sigils
[13:37:11] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1019-static.midco.net) (Ping timeout: 245 seconds)
[13:37:28] <mfiano> I assume they are separately namespaced too, like: my $x = 1; my @x = 1; are separately accessible
[13:37:38] <moon-child> yes
[13:37:42] <mfiano> I have yet to build a compiler to test. thanks
[13:37:46] <moon-child> it was not that way in perl and it sucked (so I hear)
[13:38:01] <mfiano> yes, and also the inconsistency with eg; array sigil
[13:38:23] <mfiano> my @a = 1; $a[0];
[13:38:52] <mfiano> $ because element is a scalar. now the sigil is for the variable, not the result
[13:40:41] *** Joins: tryless (~tryless@213.128.163.221)
[13:43:52] <mfiano> Raku is quite an interesting language. I could see using this for scripting replacement, and maybe some small tools.
[13:45:44] * mfiano thinks CL is a terrible language for scripting
[13:50:42] *** Joins: selwyn_ (~selwyn@user/selwyn)
[13:53:02] <mfiano> sub postfix:<º>($self) { $self / 180 * π };
[13:53:07] <mfiano> neat!
[13:53:56] *** Joins: makomo (~makomo@user/makomo)
[13:54:10] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 260 seconds)
[13:57:11] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[13:59:52] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[14:00:51] <hayley> "In the late 70s, people were talking about designing programming languages that would make program verification easier.  I didn't think much of that idea.  I felt that the difficulty in verification comes from the algorithm, not the details of the programming language in which it is described.  To demonstrate this view, I published in this paper a proof of correctness of a TECO program." - Leslie Lamport
[14:07:47] *** Quits: tryless (~tryless@213.128.163.221) (Quit: fatality)
[14:15:36] *** Joins: selwyn__ (~selwyn@user/selwyn)
[14:19:22] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 260 seconds)
[14:23:55] *** Joins: random-nick (~random-ni@87.116.183.117)
[14:44:10] *** Joins: rogersm_ (~rogersm@90.166.177.48)
[15:06:39] <dave0> bedtime for me
[15:06:59] <selwyn__> goodnight
[15:07:18] <dave0> byes selwyn__ 
[15:07:24] * hayley uploaded an image: (93KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/PbVaPdSwULdaoCvcsdjQRDpk/Screenshot_2021-10-12_22-40-38.png >
[15:07:34] <hayley> This man walks up to you and tells you your locking is broken, wyd
[15:07:54] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:44:43] * mfiano tries compiling MoarVM
[15:48:06] <hayley> https://www.youtube.com/watch?v=KHiclrHm-ig
[15:51:40] <mfiano> Lame, Rakudo depends on NQP
[15:51:49] <mfiano> "Not Quite Perl"
[15:54:05] <mfiano> also Lame, compiling Rakudo takes a very long time, and is single-threaded
[15:55:06] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:00:31] <Alfr> Good morning.
[16:00:58] <mfiano> morning Alfr 
[16:04:03] <selwyn__> hi
[16:07:54] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 265 seconds)
[16:36:12] <mfiano> I think raku really messed up rationals and floats
[16:36:39] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ce7f:4e93:4cc4:1ccd)
[16:41:22] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[16:43:12] *** Joins: robin (~robin@user/terpri)
[16:46:31] <pjb> Q: How many IBM CPU's does it take to do a logical right shift?
[16:46:32] <pjb> A: 33.  1 to hold the bits and 32 to push the register.
[16:51:06] <semz> > * mfiano thinks CL is a terrible language for scripting
[16:51:08] <semz> how come?
[16:51:28] <semz> the bias towards big images?
[16:52:08] *** Joins: OlCe (~user@lfbn-nic-1-565-28.w90-118.abo.wanadoo.fr)
[16:56:16] *** susam is now known as susam_
[16:56:25] *** susam_ is now known as susam
[17:34:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[17:36:26] *** Joins: aeth (~aeth@user/aeth)
[17:37:19] *** Joins: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e)
[17:45:10] *** Quits: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e) (Ping timeout: 260 seconds)
[18:45:36] <copec> Have you seen this mfiano? https://ambrevar.xyz/lisp-repl-shell/
[18:57:18] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[18:57:23] <X-Scale> lol pjb
[18:57:56] *** molson__ is now known as molson
[19:10:04] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[19:14:22] <mfiano> Yes I have. Too many reasons to list, but to name a few: Sandboxing and read-safety is a big concern. Scripts are often concisely written, short-lived processes, and the interactive image-based development doesn't really fit here; A client-server architecture would be better.
[19:14:44] <mfiano> For non-shell scripting, there are many more. But I am not really interested in talking about that.
[19:15:08] <mfiano> Common Lisp isn't a silver bullet. Use the best tool for the job.
[19:26:02] <pjb> mfiano: there are also safety concerns with bash; probably more.
[19:27:13] <pjb> mfiano: but it's mostly a question of implementation. It's conceivable to design a CL implementation specialized for scripts, with nice implementation specific API to the underlying POSIX system and packages to deal with pipes, processes, and stuff…
[19:27:50] <pjb> mfiano: take for example, gst (Smalltalk implementation) and how easy it is to write unix commands using it, compared to say Squeak which is strongly image-based.
[19:28:52] <mfiano> I personally use Julia for scripting, as it's extremely concise and has most of what CL has.
[19:29:05] <mfiano> Though I may switch that to Raku if I ever learn it properly
[19:32:01] <pjb> mfiano: perhaps you are confusing a command language with a scripting language. A scripting language is a programming language, it doesn't have to be concise.
[19:36:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:36:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[19:40:54] <mfiano> I never said they have to be. They are commonly one-liners and such. CL is not necessarily known to be golf friendly.
[19:46:00] <clothespin_> if you have used symbolics genera you see cl's power for system programming
[19:46:08] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f025:3836:ea6c:baba)
[20:01:57] <Arcsech> You wouldn't even really need a special implementation, just make a package that exports shorter symbols for all the stuff you want to use in scripts yeah?
[20:02:44] <Arcsech> Leaving aside any other problems, seems like it'd solve the conciseness issue
[20:07:49] <selwyn__> in game development, you usually develop in a low level language and do logic in a scripting language on top of it
[20:07:55] <selwyn__> which has big maintenance implications
[20:08:15] <selwyn__> whereas in common lisp you can simply do everything in cl (except for opengl bindings and such)
[20:09:06] <selwyn__> on those grounds, i feel that common lisp should be considered as doing the same job as (and outperforming) scripting languages
[20:13:46] *** Joins: makomo (~makomo@user/makomo)
[20:14:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:14:46] *** Joins: makomo_ (~makomo@user/makomo)
[20:16:08] <selwyn__> til what water hazards are
[20:16:11] <selwyn__> not just a hl2 level
[20:22:50] <manicennui> selwyn__: Most people writing games aren't writing their own engine though. It is easy to embed lua in Unreal or whatever.
[20:23:23] <manicennui> The advantages of using one of the popular engines become even greater when you consider packaging and distribution. 
[20:27:34] <selwyn__> indeed
[20:27:42] <selwyn__> some of us are trying though
[20:35:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[20:35:26] <copec> What domain are you scripting in mfiano?
[20:35:29] *** Joins: aeth (~aeth@user/aeth)
[20:35:42] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 250 seconds)
[20:37:17] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[20:37:35] <hendursaga> mfiano: also do you have any examples of scripts you wrote in Julia?
[20:40:11] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[20:40:17] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:40:20] *** Joins: makomo_ (~makomo@user/makomo)
[20:43:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:44:09] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f025:3836:ea6c:baba) (Remote host closed the connection)
[21:09:14] <gilberth> For swapping endianess in words, why are people still taking bets? They depend on some BIG_ENDIAN or LITTLE_ENDIAN #define, bet that a short is exactly two chars. Instead of just handling octets as octets and 16-bit words as 16-bit words, with an explicit loop to assemble those words from an octet stream as needed?
[21:10:37] <gilberth> The latter bet is the worst IMHO.
[21:13:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:13:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:51:33] *** Joins: notzmv (~zmv@user/notzmv)
[21:57:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[22:19:45] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:27:05] *** Quits: rogersm_ (~rogersm@90.166.177.48) (Quit: Leaving...)
[22:27:23] *** Joins: rogersm (~rogersm@90.166.177.48)
[22:28:54] <semz> probably some notion that it's "faster"
[22:29:29] <semz> hell, it might even be, putting aside how relevant the difference is
[22:36:03] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:25:01] <gilberth> When the endianess of the data matches the host endianess, GCC optimizes a byte swapping loop away. So there is no difference is speed.
[23:26:33] <gilberth> It's those tiny micro-optimizations and bets, that make a C program machine-dependent and thus not to last. Unlike Lisp, we could run Lisp code decades old just fine.
[23:27:42] <semz> I'm surprised it recognizes that tbh
[23:29:56] <gilberth> Well, you say *(uint16_t*)p = *(uint8*)p | (*(uint8_t*)p[1] << 8); When LE this is is just *p = *p, which is a nop.
[23:31:33] <gilberth> But: This still has casts. I'd rather copy. And you copy most of the time anyway.
[23:33:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[23:35:33] *** Joins: aeth (~aeth@user/aeth)
[23:53:14] <gilberth> Hmm, I sticked a few assertions into the Chaosnet board emulator and some of them fail.
[23:54:54] <gilberth> You should be suspicious when you find code with a hell of a lot #ifdef DEBUG_THIS and #ifdef DEBUG_THAT in it.
