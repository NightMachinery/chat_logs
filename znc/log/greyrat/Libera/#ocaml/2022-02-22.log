[00:07:02] *** Quits: mro (~mro@port-92-195-213-206.dynamic.as20676.net) (Remote host closed the connection)
[00:07:21] *** Joins: mro (~mro@port-92-195-213-206.dynamic.as20676.net)
[00:16:51] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (Ping timeout: 252 seconds)
[00:22:24] *** Quits: dalek_caan (~Thunderbi@109.252.124.86) (Quit: dalek_caan)
[00:23:29] *** Joins: dextaa_ (~dextaa@user/dextaa)
[00:36:54] <d_bot_> <Butanium (@me on answer)> if I have local switch for my project, should I be able to select it in sandbox ?
[00:37:09] <d_bot_> <rgrinberg> Yes
[00:38:21] <d_bot_> <Butanium (@me on answer)> ok thanks
[00:44:09] *** Quits: mro (~mro@port-92-195-213-206.dynamic.as20676.net) (Quit: Leaving...)
[00:55:44] *** Joins: rgrinberg (~textual@187.223.139.175)
[01:11:23] <d_bot_> <mseri> I think it may have been this post that I had in mind: https://discuss.ocaml.org/t/narrowing-variant-types-alternatives/3806/5 but it could well be a mix of a few of them that melted in memory 😛
[01:37:03] <d_bot_> <Butanium (@me on answer)> I have an OCaml experiment that runs for days on a linux cloud computer
[01:37:14] <d_bot_> <Butanium (@me on answer)> in background
[01:37:46] <d_bot_> <Butanium (@me on answer)> is there a way for me to send it information whenever I want, for instance to get first results
[01:38:17] <d_bot_> <orbitz> Sure
[01:38:40] <d_bot_> <Butanium (@me on answer)> how can I do that
[01:38:56] <d_bot_> <Butanium (@me on answer)> and like I don't want it to stop on this signal, just updating a file
[01:38:58] <d_bot_> <orbitz> I don't know but it's a computer, they can do pretty much anything
[01:39:22] <d_bot_> <Butanium (@me on answer)> I guess xD
[01:39:42] <d_bot_> <Butanium (@me on answer)> for foreground process I'd use sigint catch (I know it's dirty but it works xD)
[01:40:04] <d_bot_> <orbitz> But really, it depends on specifically what you're trying to do. You might have to define your problem a bit more to get a concrete answer
[01:40:15] <d_bot_> <Butanium (@me on answer)> I'm running bunch of tests
[01:40:30] <d_bot_> <Butanium (@me on answer)> to test the efficency of a TSP solver over a lot of city configuration
[01:40:44] <d_bot_> <Butanium (@me on answer)> so it runs for days
[01:41:12] <d_bot_> <Butanium (@me on answer)> and I'd like it to update a .CSV file when I want
[01:41:29] <d_bot_> <Butanium (@me on answer)> before it finishs all the tests
[01:42:02] <d_bot_> <Butanium (@me on answer)> here is a snippet of the CSV :
[01:42:02] <d_bot_> <Butanium (@me on answer)> ```sql
[01:42:04] <d_bot_> <Butanium (@me on answer)> solver-name,average-deviation,average-length,average-opted-deviation,average-opted-length
[01:42:05] <d_bot_> <Butanium (@me on answer)> Iterated2Opt-Roulette,0.00296736,1050,0.00296736,1050
[01:42:06] <d_bot_> <Butanium (@me on answer)> MCTS-SemiLength2Opt-Random-hidden_Full2opt-1s,0.0058032,1053,0.0058032,1053
[01:42:08] <d_bot_> <Butanium (@me on answer)> MCTS-SemiLength2Opt-Roulette-hidden_Full2opt-1s,0.00764992,1055,0.00764992,1055
[01:42:09] <d_bot_> <Butanium (@me on answer)> ```
[01:42:28] <d_bot_> <orbitz> Any reason you can't just use a signal handler?
[01:42:47] <d_bot_> <Butanium (@me on answer)> I totally can
[01:43:23] <d_bot_> <Butanium (@me on answer)> for sigint I did ```ocaml
[01:43:24] <d_bot_> <Butanium (@me on answer)>   if catch_SIGINT then
[01:43:25] <d_bot_> <Butanium (@me on answer)>     Sys.set_signal Sys.sigint
[01:43:27] <d_bot_> <Butanium (@me on answer)>       (Sys.Signal_handle (fun _ -> user_interrupt := true));
[01:43:28] <d_bot_> <Butanium (@me on answer)>   (* allow user exit with Ctrl+C sigint*)
[01:43:29] <d_bot_> <Butanium (@me on answer)> ```
[01:43:53] <d_bot_> <NULL> Watch out for code here
[01:44:28] <d_bot_> <Butanium (@me on answer)> you mean the channel ? It's just 4 lines I thought it'd not spam too much
[01:45:15] <d_bot_> <NULL> Each newline becomes a new message if I understood correctly, including the formatting \`\`\` so pretty annoying
[01:46:17] <d_bot_> <Butanium (@me on answer)> uh sorry
[01:46:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:46:24] <d_bot_> <orbitz> @Butanium  is a signal handler sufficient for your needs?
[01:46:30] <d_bot_> <Butanium (@me on answer)> yes
[01:46:47] *** Joins: Butanium (~Butanium@2a04:cec0:11a4:c3df:f129:824f:c12f:1600)
[01:48:55] <d_bot_> <Butanium (@me on answer)> like instead of `Sys.singint` I could just use a custom integer ?
[01:49:32] <d_bot_> <orbitz> https://ocaml.org/api/Sys.html
[01:49:40] <d_bot_> <orbitz> You can see the list of signals there
[01:50:02] <d_bot_> <orbitz> Maybe you want one of the sigusr ones
[01:51:24] <d_bot_> <Butanium (@me on answer)> how do I raise them from my linux shell ?
[01:51:34] <d_bot_> <orbitz> The kill program
[01:52:40] *** Quits: dy (~dy@user/dy) (Remote host closed the connection)
[01:52:52] <d_bot_> <Butanium (@me on answer)> so thing like ```bash
[01:52:52] <d_bot_> <Butanium (@me on answer)> kill -SIGUSR2 <pid>
[01:52:54] <d_bot_> <Butanium (@me on answer)> ```
[01:52:55] <d_bot_> <Butanium (@me on answer)> ?
[01:53:10] <d_bot_> <Butanium (@me on answer)> Oh yes you're right @NULL
[01:53:10] <d_bot_> <Butanium (@me on answer)> https://cdn.discordapp.com/attachments/436568060288172044/945445573350273054/unknown.png
[01:53:37] <d_bot_> <NULL> I'd say use \` but no \`\`\`
[01:55:21] <d_bot_> <orbitz> Check the man page
[01:59:59] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[02:07:49] <d_bot_> <anmonteiro> @octachron anything changed between alpha 2 and beta1 wrt treating C compilation warnings as errors?
[02:08:06] <d_bot_> <anmonteiro> getting
[02:08:07] <d_bot_> <anmonteiro> ```
[02:08:09] <d_bot_> <anmonteiro> clang-11: error: argument unused during compilation: '-fno-strict-overflow' [-Werror,-Wunused-command-line-argument]
[02:08:10] <d_bot_> <anmonteiro> ```
[02:08:11] <d_bot_> <anmonteiro> didn't happen on alpha2
[02:08:40] <d_bot_> <NULL> ^
[02:08:56] <d_bot_> <anmonteiro> this happens on `make -C runtime sak`
[02:09:56] <d_bot_> <anmonteiro> oh. please disregard me. I need to apply the same fix I started applying for 5.00, `hardeningDisable = [ "strictoverflow"];`
[02:18:21] *** Joins: olle (~olle@i5E866D83.versanet.de)
[02:22:16] *** Quits: Butanium (~Butanium@2a04:cec0:11a4:c3df:f129:824f:c12f:1600) (Quit: Client closed)
[02:27:34] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:921a:3b05:ee59:6305) (Quit: Konversation terminated!)
[02:37:06] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[02:59:27] *** Quits: rgrinberg (~textual@187.223.139.175) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:13:14] <olle> I didn't yet get an answer to the pro of tagless vs ast
[03:13:18] <olle> On the forum
[03:13:59] <olle> Any takers? :)
[03:17:06] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:24:50] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8)
[03:39:08] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:49:05] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8)
[03:51:56] *** Joins: spip (~bobo@37.170.16.200)
[03:52:31] *** Quits: bobo (~bobo@37.170.213.54) (Ping timeout: 256 seconds)
[03:56:46] *** Quits: olle (~olle@i5E866D83.versanet.de) (Ping timeout: 256 seconds)
[04:00:42] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:14:42] <companion_cube> look up "expression problem"
[04:35:24] *** Quits: _tjr_ (~tjr@233.ip-144-217-92.net) (Quit: quitting)
[04:36:33] *** Joins: _tjr_ (~tjr@233.ip-144-217-92.net)
[05:35:43] *** Joins: quartz (~quartz@user/quartz)
[06:35:27] *** Quits: gwizon (~gwizon@ool-45798b07.dyn.optonline.net) (Quit: Lost terminal)
[06:51:44] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:52:34] <quartz> How does OCaml know that = in apply_n f n x = ... is assignment whereas = in n = 0 is comparison?
[06:52:55] <d_bot_> <NULL> The `let` that precedes it
[06:52:59] <companion_cube> ^
[06:53:11] <companion_cube> when parsing a let, it reads a pattern, then `=`, then an expression
[06:54:18] <d_bot_> <NULL> Whereas a `=` in an expression without a `let` will require expressions on both sides and be interpreted as the operator
[06:54:59] <quartz> What let?
[06:55:50] <d_bot_> <NULL> Well you didn't write it, bit `apply_n f n x = ...` is an assignment iff it is directly preceded by a `let`
[06:55:54] <d_bot_> <NULL> but*
[06:58:33] <quartz> Ahhh. Ok thanks so much.
[06:59:05] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[06:59:37] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8) (Ping timeout: 240 seconds)
[07:12:46] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[07:13:14] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:16] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:34:25] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[07:55:01] *** Joins: mbuf (~Shakthi@223.178.77.186)
[08:28:14] <d_bot_> <sabas3dgh> Is it Ocaml this hard or all the functional ones are like this. I don't remember Elisp being this complicated. ... Reading your back and forth is like being is strange place.
[08:28:15] <d_bot_> <sabas3dgh> Learning the abilities that ocaml has let me thinking why so little of marketplace it has amoung other languages.
[08:33:44] <d_bot_> <NULL> I don't understand what you wrote
[08:34:47] <sleepydog> "hard" is subjective and depends on a lot of factors, only some of which are inherent to the language
[08:41:52] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:43:26] <energizer> popularity is rather self-fulfilling. people want to use languages that have large ecosystems
[08:44:32] <d_bot_> <sabas3dgh> @NULL hi. What didn't you understand.
[08:46:53] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[08:51:49] <d_bot_> <sabas3dgh> energizer : well you may be right.
[08:54:43] <d_bot_> <sabas3dgh> Do we have sets and maps and keysets in ocaml?
[08:55:41] <d_bot_> <sabas3dgh> Is there a link for data structures and their relevant operations for OCaml?
[08:56:50] <d_bot_> <NULL> I'm pretty sure the sentences you wrote are broken, so much so that I can't understand what you mean
[08:57:07] <d_bot_> <sabas3dgh> 😄
[08:57:51] <d_bot_> <NULL> https://ocaml.org/api/index.html Look for Set, Map, List, Array
[08:57:57] <d_bot_> <NULL> Hashtbl also
[08:58:22] <d_bot_> <sabas3dgh> What I meant was:
[08:58:23] <d_bot_> <sabas3dgh> Reading the post in the channel made me feel like a stranger in different country.
[08:58:47] <d_bot_> <NULL> What post ?
[08:59:19] <sleepydog> you mean the conversation about the let .. = .. syntax? or just in general?
[08:59:40] <d_bot_> <sabas3dgh> The talks on tagless and make errors .... All in All
[09:00:27] <d_bot_> <sabas3dgh> Yes. That for example
[09:00:43] <d_bot_> <sabas3dgh> But in general.
[09:01:42] <d_bot_> <sabas3dgh> Do we have local mutability in OCaml?
[09:01:48] <sleepydog> yes
[09:03:27] <sleepydog> it's going to be tedious for you to learn something by asking yes/no questions over IRC :). may I recommend https://www.ocaml.org/learn/ ?
[09:04:03] <d_bot_> <sabas3dgh> Sure
[09:06:27] <sleepydog> ocaml is very powerful, and with that power comes the ability to confuse yourself. it's very easy to write "plain" code that most programmers would understand, but the power is there when you need it
[09:30:37] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:38:53] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[09:50:59] *** Joins: gravicappa (~gravicapp@145.255.9.217)
[09:53:04] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:53:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:59:43] *** Quits: gravicappa (~gravicapp@145.255.9.217) (Ping timeout: 256 seconds)
[10:05:46] *** Quits: hsw (~hsw@106.104.103.195) (Read error: Connection reset by peer)
[10:25:30] <d_bot_> <Manas (prometheansacrifice)> Does anyone happen to know why the new js_of_ocaml use dune install in it's recipe instead of just dune build -p %name
[10:25:30] <d_bot_> <Manas (prometheansacrifice)>
[10:25:32] <d_bot_> <Manas (prometheansacrifice)> https://github.com/ocsigen/js_of_ocaml/blob/master/js_of_ocaml-compiler.opam#L35-L45
[10:49:58] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[10:56:28] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[10:56:45] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:07:07] *** Quits: dextaa_ (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[11:10:25] *** Joins: dextaa_ (~dextaa@user/dextaa)
[11:11:15] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[11:20:50] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[11:25:02] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 240 seconds)
[11:52:36] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:01:17] *** Joins: jlrnick (~josephler@2a01cb040a1594006d1ad9a7996080b4.ipv6.abo.wanadoo.fr)
[12:01:33] *** Quits: jlrnick (~josephler@2a01cb040a1594006d1ad9a7996080b4.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:13:24] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[12:19:01] *** Joins: wonko (~wjc@user/wonko)
[12:40:17] *** Joins: olle (~olle@i5E866D84.versanet.de)
[12:43:13] *** Joins: bartholin (~bartholin@158.110.70.111)
[13:00:50] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:13:31] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 256 seconds)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:38:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:40:49] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[13:42:31] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[14:06:08] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[14:32:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:40:02] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[14:41:40] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[14:48:47] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:e48e:fd0f:75d4:bf32)
[14:50:03] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[14:52:54] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[14:53:21] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[14:53:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[14:56:12] *** Quits: chrisz (qju1gl910l@d53635c3.access.ecotel.net) (Ping timeout: 272 seconds)
[14:57:16] *** Joins: chrisz (no1ebdhkkm@55d44320.access.ecotel.net)
[15:28:40] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[15:52:00] *** Joins: bobo (~bobo@37.171.53.118)
[15:52:11] *** Quits: spip (~bobo@37.170.16.200) (Ping timeout: 256 seconds)
[16:00:36] <d_bot_> <mseri> Those are opam files generated by dune. The invocation is generic and includes the `-p`:
[16:00:37] <d_bot_> <mseri> ```
[16:00:39] <d_bot_> <mseri> dune build -p %name -j %jobs --promote-install-files=false @install
[16:00:40] <d_bot_> <mseri> ```
[16:00:41] <d_bot_> <mseri> `@install` tells duene to only compile code that will be installed, the alternatives are `@all` which compiles everything that can be compiled, `@runtest` compiling and running tests, maybe more and custom aliases
[16:01:40] <d_bot_> <mseri> In this case it is just to be explicit, since `@install` is the default behaviour. But it is robust if this changes in the future
[16:03:50] <d_bot_> <mseri> `dune install` is not related to this, it is a command that allows to install the artifacts compiled by `dune build -p %name @install` into the right place
[16:34:24] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Ping timeout: 256 seconds)
[16:36:05] *** Joins: mro (~mro@2002:5cc3:b992:0:884f:fa0e:bc9a:7ed8)
[16:44:39] *** Quits: bobo (~bobo@37.171.53.118) (Quit: Konversation terminated!)
[16:56:44] *** Quits: bartholin (~bartholin@158.110.70.111) (Ping timeout: 252 seconds)
[16:58:20] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:10:12] *** Joins: bartholin (~bartholin@158.110.70.111)
[17:21:03] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[17:28:40] *** Quits: mro (~mro@2002:5cc3:b992:0:884f:fa0e:bc9a:7ed8) (Remote host closed the connection)
[17:32:41] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:e48e:fd0f:75d4:bf32) (Quit: Konversation terminated!)
[17:34:32] *** Quits: bartholin (~bartholin@158.110.70.111) (Ping timeout: 272 seconds)
[17:44:01] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[17:46:37] *** Joins: bartholin (~bartholin@158.110.70.111)
[17:52:26] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[17:57:28] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:20:16] <companion_cube> is it me, or is async cancellation still an unsolved problem?
[18:21:34] <olle> Erlang?
[18:22:12] <companion_cube> what about it
[18:23:06] <olle> Solves all
[18:23:13] <companion_cube> it doesn
[18:23:20] <companion_cube> doesn't really have a notion of "async", does it?
[18:23:54] <olle> Not as a keyword, no
[18:26:39] <d_bot_> <Bluddy> I don't really understand the problem myself.
[18:27:04] <d_bot_> <Bluddy> Would it be possible to ELI15?
[18:27:10] <Corbin> In formal message-passing situations, cancellation is itself a message.
[18:27:28] <companion_cube> olle: it doesn't have a notion of promise
[18:27:39] <companion_cube> it's all actors, which is also very interesting, but not relevant to OCaml
[18:28:32] <olle> Maybe Erlang was the OCaml we made along the way...?
[18:30:06] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[18:30:45] <d_bot_> <Bluddy> so the problem is that you create a promise, which is a future action, but you may change your mind on executing that promise before it runs?
[18:31:32] <companion_cube> what are you even talking about olle
[18:31:52] <companion_cube> @Bluddy: yeah, or it might even be partially done (if it has lots of internal steps)
[18:34:31] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 245 seconds)
[18:35:09] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 256 seconds)
[18:36:30] <d_bot_> <orbitz> @companion_cube  I'm not sure if it's an unsolved problem or just the nature of the problem means there will always be hairy edge situations
[18:36:48] <companion_cube> is there a difference? :)
[18:36:58] <companion_cube> "unsolved" can mean it's unsolvable
[18:38:11] <d_bot_> <orbitz> Depends. I interpret it as "it's not known if this is the best we can do", in which case if you know the only possible solution is these hair edge cases, I wouldn't call it unsolved
[18:38:19] <olle> companion_cube: You wanna kill ongoing processes ungracefully?
[18:38:34] <olle> Or you want to enforce promises to listen to kill signals?
[18:38:49] <d_bot_> <orbitz> I believe he is referring to cancelling an ongoing asynchronous operation
[18:38:53] <companion_cube> this, of course
[18:38:57] <companion_cube> as is discussed on discuss
[18:39:23] <olle> Yes?
[18:39:28] <d_bot_> <orbitz> No?
[18:39:36] <olle> So you have those two alternatives, no?
[18:40:46] <companion_cube> what alternatives
[18:40:51] <d_bot_> <orbitz> olle: I'm not quite sure what you're saying.  "processes" is not a concept really in ocaml (beyond making OS processes) and "kill signals" tend to have a specific meaning in terms of a SIGKILl or similar
[18:41:05] <olle> I mean process = async thingy running
[18:41:21] <companion_cube> futures are not erlang processes
[18:41:24] <d_bot_> <orbitz> a process is a word with a lot of previous definitions usually around memory guarantees
[18:41:34] <d_bot_> <orbitz> which Ocaml does not have, as companion_cube said
[18:43:18] <Anarchos> futures and promises, aren't they all continuations ?
[18:43:42] <olle> I'll read the thread instead of blabbering ^^
[18:44:29] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[18:44:38] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[18:44:59] <d_bot_> <orbitz> Anarchos: That probably really depends on who you ask
[18:45:03] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[18:45:24] *** Quits: mbuf (~Shakthi@223.178.77.186) (Quit: Leaving)
[18:45:28] <companion_cube> promises are definitely not just continuations
[18:45:35] <companion_cube> they have to store some state
[18:46:02] <olle> gashe used "fibre"
[18:46:22] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:46:44] *** Quits: bartholin (~bartholin@158.110.70.111) (Ping timeout: 252 seconds)
[18:47:08] <companion_cube> pretty sure it's not an erlang process
[18:47:32] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 240 seconds)
[18:49:34] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:51:00] <olle> Sure
[18:53:57] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:58:59] *** Joins: bartholin (~bartholin@158.110.70.111)
[19:11:18] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[19:22:23] <d_bot_> <darrenldl> reminds me a bit of ada's `select then abort`
[19:22:36] <d_bot_> <darrenldl> <https://www.adaic.org/resources/add_content/standards/05rm/html/RM-9-7-4.html>
[19:24:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:26:59] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[19:30:00] <d_bot_> <Bluddy> reading the thread makes me realize we really want this careful thinking to be done in the stdlib/runtime and not in user space
[19:30:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[19:32:33] <d_bot_> <Bluddy> @antron I think the thread could use your input https://discuss.ocaml.org/t/understanding-cancellation-in-eio/9369
[19:33:00] *** Joins: zebrag (~chris@user/zebrag)
[19:33:52] <companion_cube> the input being "do not provide a generic notion of cancellation" I imagine
[19:35:27] *** Quits: hyphen (~hyphen@156.208.70.152) (Ping timeout: 256 seconds)
[19:36:58] *** Joins: hyphen (~hyphen@41.35.160.140)
[19:37:17] <d_bot_> <Bluddy> coupled with excellent reasoning
[19:38:23] <d_bot_> <joris> make build : `1162.85user 137.53system 2:00.91elapsed 1075%CPU (0avgtext+0avgdata 2947608maxresident)k`
[19:38:24] <d_bot_> <joris> make build_and_eat_my ram : `474.82user 116.58system 1:04.43elapsed 917%CPU (0avgtext+0avgdata 3011856maxresident)k`
[19:38:43] <d_bot_> <joris> quite impressive speedup by "tweaking" GC. This is with dune 3
[19:39:03] <d_bot_> <joris> `OCAMLRUNPARAM='o=500,a=2,s=256m,O=1000000'` this is build_and_eat_my_ram
[19:40:28] <companion_cube> @joris have you tried the `--trace=…` option of dune? it's quite cool
[19:41:43] <d_bot_> <joris> yep. But this is purely ocamlc/ocamlopt. 40% of cpu is spent in GC mark and sweep 😄
[19:42:17] <theblatte> @joris: wow, nice!
[19:42:24] <companion_cube> oh in ocamlopt itself, damn
[19:42:34] <d_bot_> <VPhantom> Ah ha! 😛
[19:43:35] <d_bot_> <joris> caveat is that as the name implies, it obviously eats your ram. 3 times more ram, with number of jobs = 16 it uses around 5G max, instead of 1G
[19:44:06] <d_bot_> <VPhantom> (Seriously though, 40% of CPU in GC is more than I would've thought for any kind of work. That's fascinating.)
[19:45:26] <d_bot_> <joris> caveat again it is a guesstimate. This is basically sweep_slice + mark_slice as appearing in perf top during build
[19:45:44] <d_bot_> <joris> but yeah they stay roughly at 40% of samples both of them
[19:48:36] <d_bot_> <joris> dune 3 is a blast in term of perf anyway ❤️
[19:52:58] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[19:58:40] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[20:06:04] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[20:07:38] *** Joins: quartz (~quartz@user/quartz)
[20:10:44] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[20:17:13] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[20:18:35] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[20:18:55] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[20:19:14] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Remote host closed the connection)
[20:19:33] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:05] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:33:43] *** Joins: dalek_caan (~Thunderbi@109.252.124.86)
[20:36:23] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[20:37:22] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[20:40:57] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Ping timeout: 240 seconds)
[20:47:27] <d_bot_> <cemerick> insofar as there is no clear consensus on how a lot of details should work, a diversity of userland approaches seems ideal
[20:48:23] <d_bot_> <Bluddy> This will be disastrous as there will be no compatibility between different libraries.
[20:49:12] <sadiq> joris: what version of OCaml?
[20:49:32] <d_bot_> <cemerick> if and when it becomes clear that any given approach is strictly inferior, then that "disaster" becomes long-term survivability
[20:50:39] <sadiq> guessing 4.13 since best-fit is default in 4.14
[20:50:55] <sadiq> oh no, 4.13 it's the default
[20:51:20] <d_bot_> <cemerick> I remember the massive upheaval when it became clear that Java's original threading approach was a dead-end. The only reason the language survived was because Sun and BEA and IBM were awash in cash they could use to retrofit the model and all of the major apps onto native threads.
[20:52:14] <d_bot_> <mbacarella> what was the original threading model in Java?
[20:52:45] <d_bot_> <mbacarella> oh. is that what "greenthreads" is?
[20:53:18] <d_bot_> <cemerick> yup
[20:53:32] <d_bot_> <cemerick> basically fibers, depending on your definitions
[20:54:46] <d_bot_> <mbacarella> that seems like a really strange bet to have made. would have been curious to sit in on the design decisions.
[20:54:46] <d_bot_> <mbacarella> prediction: SMP is a fad?
[20:54:47] <d_bot_> <cemerick> as multi-CPU and multicore architectures became more common, there was some thrashing as they tried to implement an "M:N" scheme, where you'd have M lightweight threads scheduled onto N hardware threads in order to parallelize and get better concurrency
[20:55:21] <d_bot_> <cemerick> SMP was only a consideration on the highest-end workstations at the time
[20:55:37] <sadiq> this is all pretty funny given project loom
[20:55:47] <sadiq> which is M:N again
[20:55:51] <d_bot_> <cemerick> sadiq: yeah, it goes round and round
[20:56:03] <d_bot_> <mbacarella> right. perhaps Sun found the idea of SMP becoming commonplace unsettling because they didn't think they could compete in that space
[20:56:05] <d_bot_> <cemerick> which is why having a diversity of userland approaches sounds *great* IMO
[20:56:29] <d_bot_> <cemerick> well, sun was aggressively trying to go downmarket
[20:56:38] <d_bot_> <cemerick> set top boxes being Oak's original target
[20:56:43] <d_bot_> <mbacarella> huh.
[20:56:52] <d_bot_> <mbacarella> so, just didn't think SMP could go downmarket?
[20:57:10] <companion_cube> so why was M:N a disaster?
[20:57:20] <d_bot_> <cemerick> in 1994 or whatever? No, that probably seemed fanciful
[20:57:21] <d_bot_> <mbacarella> maybe i'm forgetting how slow computers used to be
[20:57:48] <d_bot_> <cemerick> IIRC, the scheduling overhead swamped the benefit of having N hardware threads
[20:57:57] <d_bot_> <mbacarella> hmm. beos was incepted in... 1995. something i consider an all-in bet on threads and SMP
[20:58:05] <companion_cube> that's hilarious given that now the high-perf architectures do that
[20:58:15] <companion_cube> (well, some do pinned threads I suppose, but still)
[20:58:32] <d_bot_> <cemerick> don't take my word for it, super IIRC here
[21:00:01] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[21:00:19] <d_bot_> <RegularSpatula> I think I remember a manuscript talking about the more and more memory you give a GC program, the more competitive it gets with manually managed program.  Does anyone know this paper, or am I just misremembering and it was some blog post rather than someone's journal paper?
[21:00:40] <d_bot_> <RegularSpatula> that dune benchmark above reminded me of it
[21:01:04] <companion_cube> @cemerick we're already pretty fragmented
[21:01:17] <companion_cube> introducing a new line of fragmentation along the ocaml 5 divide seems… bad?
[21:02:35] <d_bot_> <joris> @sadiq still version 4.12
[21:03:32] <d_bot_> <cemerick> I never understand the concern re: fragmentation
[21:04:24] <d_bot_> <cemerick> lwt "won" on its own merits, the same will likely happen between eio et al. 🤷‍♂️
[21:05:10] <d_bot_> <joris> i think the N:M issues from 20 years ago also came from the fact that inter core communication and memory bandwidth uses to be super slow, and the nobody was used to the programming model
[21:06:11] <companion_cube> @cemerick but now we risk having half the ecosystem on eio, and half on lwt
[21:06:32] <companion_cube> and then you have to choose your camp because of course interop will suck
[21:06:37] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[21:06:39] <d_bot_> <joris> i was involved in some project to implement pthreads with N:M, and the performance was terrible. But mostly because C programs were designed to work with with one thread one core, so it would have needed a rewrite. Then apple released their parallel framework, and it was quite good because all the interface and primitive were built for this
[21:06:57] <d_bot_> <joris> @companion_cube there is already async + lwt technically
[21:07:03] <companion_cube> yes
[21:07:10] <companion_cube> it'd be good to not introduce more fragmentation
[21:07:34] <d_bot_> <cemerick> it's wasteful ofc, but only compared to an imaginary timeline where someone _knows_ what the right solution for the next NN years is, today
[21:07:51] <d_bot_> <joris> in this area rust was smart by managing to define a common interface and having several implementation
[21:08:18] <d_bot_> <joris> but the interface still constrain the implementation  quite a bit
[21:09:31] <d_bot_> <cemerick> if there was any kind of consensus among the participants in the spate of design threads of late, then sure, seems worth taking the risk of growing it in stdlib. But there appears to be nontrivial counterclaims and in general a lot of uncertainty.
[21:09:58] *** Joins: mro (~mro@2002:5cc3:b992:0:884f:fa0e:bc9a:7ed8)
[21:14:01] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:14:46] *** Quits: kakadu (~kakadu@195.19.236.234) (Remote host closed the connection)
[21:18:29] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[21:18:53] <d_bot_> <orbitz> IMO, I think it'd be great to get a scheduler into the stdlib, kind of like GHC.  Us Ocamlers love to do things our own way, but if it's in the stdlib there is a common ground we are bounded by.
[21:20:17] <d_bot_> <orbitz> All solutions will have limitations of some kind, and there is value in eeryone just having to put-up with the same limitations.
[21:20:37] *** Quits: mro (~mro@2002:5cc3:b992:0:884f:fa0e:bc9a:7ed8) (Ping timeout: 256 seconds)
[21:21:14] <companion_cube> @cemerick no one is proposing to move eio's stuff into the stdlib
[21:21:34] <companion_cube> and I'd rather not have a standard scheduler, just standard effects
[21:22:19] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[21:22:59] <d_bot_> <orbitz> I'm not 100% sure, but I think I'd like a standard scheduler
[21:23:28] <companion_cube> how does this work on jsoo? :p
[21:23:56] <companion_cube> in any case I think it's never going to happen: the compiler and Coq can definitely live without a scheduler
[21:24:34] <d_bot_> <orbitz> depending on how it's implemented, the same way jsoo currently works with the ability to replace implementations of other functions?
[21:25:02] <companion_cube> I think it'd go a bit beyond that
[21:25:22] <companion_cube> although it'd be nice if you could just replace the standard scheduler with JS promises
[21:26:06] <d_bot_> <orbitz> I'm not sure how ghcjs does it.  Probably in a way that isn't that helpful to us
[21:26:34] <companion_cube> ghc is also in a very different initial spot
[21:26:39] <companion_cube> lazy IOs and all that stuff
[21:26:46] <companion_cube> OCaml is a lot lower levels, I'd argue.
[21:26:51] <companion_cube> lower leve*
[21:26:54] <companion_cube> lower level*
[21:27:02] <companion_cube> plz buy me basic typing lessons :s
[21:27:07] <d_bot_> <orbitz> But Lwt codes works native and JS so it seems possible to solve in a way such that other solutions could be developed on top without core team having to care about jS, just being careful to not make other things imposisble.
[21:27:25] <d_bot_> <EduardoRFS> is the JSOO + Effects solved?
[21:27:39] <companion_cube> idk
[21:27:44] <d_bot_> <orbitz> companion_cube:  I'm not sure why that's relevant.  Haskell is certianly a different language, but it offers a green thread scheduler and compiles to native to JS
[21:27:51] <companion_cube> maybe effects were indeed rushed…
[21:28:15] <d_bot_> <orbitz> Well the upside is if they are out, hopefully peopel who are capable will be motivated to finish 🙂
[21:28:23] <companion_cube> @orbitz yeah well, OCaml has had non lazy IOs via a thin C layer for decades, whereas ghc has had light threads and all that for decades as well
[21:28:28] <companion_cube> can't move from one to the other overnight
[21:28:56] <companion_cube> I think I just need to force myself to not give a shit and keep doing my things in my corner
[21:30:00] <d_bot_> <orbitz> companion_cube: I could be wrong but I don't think things are so different than you're making them out to be.  My point is not that we can transition from now to whatever Ocaml offers in 5.0 over night, my point is GHC solves scheduler + compiling to native and JS, I dont' think there is a fundamental issue here
[21:30:33] <companion_cube> ah well, it's not clear to me that ghcjs is viable though
[21:30:41] <companion_cube> if it makes multi-MB bundles it's just a nice poc
[21:31:01] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[21:32:42] <d_bot_> <orbitz> Maybe.  But even if that is true, that isn't necessarily related to the aspect we are talking about.
[21:32:49] *** Quits: bartholin (~bartholin@158.110.70.111) (Quit: Leaving)
[21:39:11] <companion_cube> sure, I do think carefully designed futures could become JS promises and use the JS scheduler, which would be nice
[21:39:23] <companion_cube> but a whole scheduler in the stdlib still seems quite unlikely
[21:39:28] <companion_cube> especially since it'd be optional
[21:48:59] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[21:50:28] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:54:00] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Ping timeout: 256 seconds)
[21:57:05] *** Joins: quartz (~quartz@user/quartz)
[22:04:44] *** Quits: hyphen (~hyphen@41.35.160.140) (Ping timeout: 252 seconds)
[22:06:32] *** Joins: hyphen (~hyphen@156.208.202.50)
[22:08:10] <d_bot_> <sabas3dgh> Hello.
[22:09:22] <dmbaturin> companion_cube: If someone were to add a function for removing all items matching certain criteria from a list to containers, what would you like it to be named? I.e. `('a -> bool) -> 'a list -> 'a list`
[22:09:43] <companion_cube> like an anti_filter?
[22:09:49] <d_bot_> <sabas3dgh> Could someone tell me what the heck OCaml is doing with the Quarkus(a Java Framework)? What is the rekation? What is its usecase?
[22:10:29] <dmbaturin> companion_cube: Yes. CCList.remove is quite limiting since you need a `'a -> 'a -> bool` function for it.
[22:12:41] <dmbaturin> sabas3dgh: COuld you point us to a link to source code or docs that confuse you?
[22:15:45] <companion_cube> dmbaturin: I mean `filter (fun x -> not (f x))` no?
[22:18:47] <dmbaturin> companion_cube: Ah, I see what you mean. Maybe that's not worse indeed.
[22:21:53] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[22:26:12] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Ping timeout: 240 seconds)
[22:30:34] *** Joins: dextaa_ (~dextaa@user/dextaa)
[22:34:50] *** Quits: dalek_caan (~Thunderbi@109.252.124.86) (Quit: dalek_caan)
[22:47:30] *** Joins: vicfred (~vicfred@user/vicfred)
[22:50:45] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[22:55:09] *** Joins: mro (~mro@2002:5cc3:b992:0:884f:fa0e:bc9a:7ed8)
[22:55:59] <d_bot_> <Bluddy> Regarding the point about having competing user-mode libraries compete, I think it misses 2 points:
[22:56:00] <d_bot_> <Bluddy> 1. In reality, most competing alternative libraries don't have a clear winner. Lwt and Async have slightly different semantics, but neither one has sufficient competitive advantage to defeat the other.
[22:56:01] <d_bot_> <Bluddy> 2. Also in the real world, highly complex software usually isn't written by hobbyists on their spare time, but rather is sponsored by stakeholders. Those stakeholders, who put money into development of their library, aren't going to easily give up on it. And so, the competing libraries live on, continuing to fragmenting the community.
[22:57:40] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[22:59:42] *** Quits: mro (~mro@2002:5cc3:b992:0:884f:fa0e:bc9a:7ed8) (Ping timeout: 250 seconds)
[23:04:56] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[23:10:12] *** Quits: mro (~mro@port-92-195-185-146.dynamic.as20676.net) (Ping timeout: 272 seconds)
[23:12:14] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[23:13:39] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[23:14:25] *** Joins: mro (~mro@port-92-195-185-146.dynamic.as20676.net)
[23:24:14] <d_bot_> <VPhantom> Well put @Bluddy. I've seen a lot of work in the libraries I looked into, invested in abstracting lwt vs async in order to support both, for example, because choosing one would alienate too many users.
[23:46:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
