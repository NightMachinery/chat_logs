[00:02:27] <rawtaz> i think it's making the code messier though, it'd be much cleaner if it was right above it. but i get the thing with the scope
[00:02:35] <rawtaz> not complaining, just observing :P
[00:05:30] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:07:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:12:32] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[00:14:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[00:15:26] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[00:17:58] *** Joins: ryu` (~ryusaku@c72AD5BC1.dhcp.as2116.net)
[00:24:12] *** Parts: zacbrown[m] (~zacbrownm@2001:470:69fc:105::1:3241) ()
[00:26:45] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:27:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[00:27:26] *** Quits: X-Scale (~ARM@46.50.4.208) (Ping timeout: 260 seconds)
[00:28:38] *** X-Scale` is now known as X-Scale
[00:35:07] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[00:40:13] *** Quits: tyson2 (~user@cpe3497f6b5e860-cmbc4dfbbe6670.sdns.net.rogers.com) (Remote host closed the connection)
[00:40:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:40:57] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[00:42:49] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:81d:9fc:80cc:9e91)
[00:42:50] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 260 seconds)
[00:45:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[00:46:18] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:47:17] *** Joins: converge (~converge@user/converge)
[00:50:57] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[00:52:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:53:37] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:54:05] *** Quits: ryu` (~ryusaku@c72AD5BC1.dhcp.as2116.net) (Quit: SCV ready!)
[00:54:36] *** Joins: ryu` (~ryusaku@c72AD5BC1.dhcp.as2116.net)
[00:56:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[00:58:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:01:40] <mikoto-chan> Consequently,
[01:01:42] <mikoto-chan> '\xe4\xb8\x96' is not a legal rune literal, even though those three bytes are a valid UTF-8
[01:01:44] <mikoto-chan> encoding of a single code point.
[01:02:16] <mikoto-chan> do they mean that '\xe4\xb8\x96' as a rune is illegal but legal as a string?
[01:03:22] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[01:04:28] <fizzie> Yes. Well, that "\xe4\xb8\x96" is legal as a string.
[01:05:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:07:04] *** Joins: fikran (~fikran@user/fikran)
[01:07:07] *** Joins: X-Scale (~ARM@83.223.243.66)
[01:08:03] <foobaz> why wouldn't it be a legal rune literal? https://unicode-table.com/en/4E16/
[01:09:21] <foobaz> see UTF-8 encoding at the bottom
[01:11:32] <foobaz> is it just because of the single quotes? "\xe4\xb8\x96" seems to be valid but '\xe4\xb8\x96' is not
[01:14:32] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:15:21] *** Quits: ryu` (~ryusaku@c72AD5BC1.dhcp.as2116.net) (Quit: SCV ready!)
[01:16:19] *** Joins: ryu` (~ryusaku@c72AD5BC1.dhcp.as2116.net)
[01:16:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:16:55] <dostoyevsky2> > It's 100 percent Go but extremely platform-dependent
[01:18:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:18:40] *** Joins: et (~et@user/et)
[01:19:53] <fizzie> Like the quote says, it's a valid UTF-8 encoding of a code point, but not a legal rune literal, and that's just because of how rune literals are defiend.
[01:20:25] <A_Dragon> mmmm rune fun
[01:20:31] <A_Dragon> runes are uint16 right?
[01:20:47] * A_Dragon double checks
[01:20:51] <A_Dragon> they're either 16 or 32
[01:20:56] <fizzie> No, it's an alias for int32.
[01:21:09] <A_Dragon> whats the rtick with the 3 byte value then?
[01:21:12] <A_Dragon> trick*
[01:21:16] * A_Dragon scrolls up
[01:21:54] <fizzie> You can define a rune literal with a specific integer value as '\xNN', '\uNNNN' or '\UNNNNNNNN', but not using the UTF-8 encoding of a single code point.
[01:21:54] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[01:22:01] <A_Dragon> ah okay
[01:22:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:22:50] <fizzie> You can use "\xe4\xb8\x96" in a string literal, but since strings are just sequences of bytes not even restricted to valid UTF-8 that's kind of a given.
[01:24:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:25:38] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[01:27:08] *** Joins: oxum (~oxum@122.172.47.114)
[01:28:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[01:28:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:30:07] <mikoto-chan> foobaz: yes xactly
[01:32:11] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 264 seconds)
[01:33:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:34:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:35:37] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:37:51] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:39:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[01:40:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:43:44] *** Quits: mobbi (~quassel@dfs2j6yhkc7bg2jbrw1wy-3.rev.dnainternet.fi) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:44:05] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[01:45:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:46:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:46:39] <andlabs> dostoyevsky2: you are thinking of C
[01:47:14] <andlabs> the problem is that \x does not build runes, it stuffs bytes directly, so Go doesn't know that you're building a UTF-8 encoded rune it just thinks you're trying to stuff 3 bytes into a rune which is neither sensible nor allowed
[01:47:20] <andlabs> *sensical
[01:47:46] <dostoyevsky2> andlabs: I was quoting from this reddit thread: https://old.reddit.com/r/golang/comments/qt8zhw/cgofree_sqlite_adds_windowsamd64_support/
[01:48:16] <andlabs> that the actual in-memory representation of "\xe4\xb8\x96" and "\u4E16" are the same is coincidental in this case
[01:49:05] <dostoyevsky2> Apparently, porting sqlite to go didn't bring the benefit of portability
[01:49:26] <andlabs> oh you're talking about something else
[01:50:48] <andlabs> what you are talking about is a machine translation of sqlite to go that because it's a machine translation is likely also machine-translating the nonportable glue that you need to have in C (either done yourself or via some third-party library)
[01:51:03] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:51:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[01:51:20] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[01:51:22] <andlabs> you could then go and massage the result to be portable by taking advantage f Go facilities that aren't available in C or you can just rewrite it from scratch
[01:51:36] <andlabs> for something as fundamental as sqlite both approaches are fraught
[01:51:50] <dostoyevsky2> andlabs: yeah, if it was a well-designed go program, it should be more portable, even if it was trying to write a binary database file platform-independently, right?
[01:52:04] <andlabs> and I guess you ahve to weigh the cost of making sure you didn't break some random edge case against doing it
[01:53:19] <andlabs> the problem of interoperating Go and C is rather complicated
[01:54:29] <dostoyevsky2> > Package sqlite is a CGo-free port of SQLite/SQLite3 v3.36.0
[01:54:41] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Client Quit)
[01:54:57] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[01:55:02] <dostoyevsky2> andlabs: I guess that would mean there isn't really any interoperating between Go and C, beyond using an automated tool to translate everything over to Go
[01:56:03] *** Quits: converge (~converge@user/converge) (Quit: Leaving)
[01:58:34] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Client Quit)
[01:58:52] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:59:30] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[01:59:56] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[02:00:17] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[02:00:51] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Client Quit)
[02:00:58] <andlabs> dostoyevsky2: no
[02:01:08] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[02:01:18] <andlabs> in fact actually writing the code to do it is easy, thanks to cgo
[02:01:25] <andlabs> it's everything else that gets thorny
[02:01:52] <rawtaz> does this evaluate to an array or a slice?  []int{2, 3, 5, 7, 11, 13}
[02:02:16] <andlabs> and cross-compiling is a can of worms which is why pure-Go ports are in vogue
[02:02:16] <rawtaz> and is there a way to Printf() or similar the type name of a variable? like "array", "string", "slice", etc
[02:02:30] <andlabs> that's a slice
[02:02:41] <andlabs> and not in english like that without reflection or knowing the element type
[02:02:47] <andlabs> but %T will print the Go type
[02:02:53] <andlabs> *Go syntax of the type
[02:02:54] <dostoyevsky2> rawtaz: fmt.Printf("%T", variable)
[02:04:02] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[02:04:50] *** Joins: bindu (~bindu@user/bindu)
[02:04:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:06:09] <rawtaz> dostoyevsky2: that prints it like "code", im looking for e.g. "slice" when i give it []int{2, 3, 5, 7, 11, 13}
[02:06:29] <rawtaz> andlabs: i checked out and tried the reflect package but aint seeing a function to return the name like this
[02:06:56] <rawtaz> hm maybe Name()
[02:07:24] <andlabs> look at Kind
[02:07:50] <andlabs> anyway []int{...} is a slice
[02:08:07] <andlabs> if you want an array but don't want to count the elements yourself say [...]int instead
[02:08:23] <rawtaz> yeah Kind() was it :)
[02:08:45] <rawtaz> im still just getting into slices so hopefully the difference will be clearer soon :)
[02:08:55] <rawtaz> thanks for the tip with ... and for answering :)
[02:09:20] <andlabs> note that arrays are rarely used in Go in general
[02:11:24] <rawtaz> right. yeah and i mean a slice creates an array so..
[02:11:38] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:13:09] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[02:13:27] *** Joins: darkapex (~darkapex@user/darkapex)
[02:13:53] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[02:15:23] *** Joins: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi)
[02:15:48] *** Quits: mobbi (~quassel@dfs2j6ydzgz-qf7cjq75t-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[02:16:18] <rawtaz> hm, does https://cs.opensource.google/go/go/+/refs/tags/go1.17.3:src/go/types/type.go;l=866 mean that the Underlying() method of the type Slice is defined externally/outside of Go?
[02:16:51] <rawtaz> the docs at https://pkg.go.dev/go/types@go1.17.3#Slice.Underlying arent saying what this method does, but im guessing it gets you the underlying array that the slice references :o
[02:16:55] <rawtaz> kind of wanted to investigate that
[02:16:59] <fizzie> No, it's not that.
[02:17:27] <fizzie> It's about the underlying *type*.
[02:18:05] <fizzie> See https://pkg.go.dev/reflect#SliceHeader if you want to explore what a slice looks like, "under the hood".
[02:18:09] <rawtaz> oh ok, so in the case of an underlying [6]int its Int, and for [4]string its String
[02:18:49] <fizzie> It's not that either. The underlying type of [6]int is [6]int.
[02:19:16] <fizzie> Given `type SixIntArray [6]int`, the underlying type of SixIntArray is also [6]int.
[02:19:26] <rawtaz> that makes sense
[02:19:56] <rawtaz> let me rewind. what i *originally* wanted to find out was, if i have a slice (a variable of type slice), can i somehow access the array that it references?
[02:20:06] <rawtaz> i guess the closest to that is the SliceHeader you linked to
[02:21:06] <andlabs> yeah you can't do that safely
[02:21:13] <andlabs> nor would you want to, anyway
[02:21:26] <andlabs> that array is subject to change
[02:21:53] <rawtaz> its only for poking around purposes :)
[02:22:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:22:12] <fizzie> There's certain "safe" patterns of getting to the reflect.SliceHeader via an unsafe.Pointer.
[02:22:16] <rawtaz> but the answer is then that the reflect.SliceHeader is what i use
[02:23:02] <fizzie> See https://pkg.go.dev/unsafe#Pointer subcase (6).
[02:23:18] <rawtaz> i came to think of it while reading in the tour that a foo := []int{1,2,3} creates an array and makes a slice referencing it. i was wondering if there was a way to poke the array without going through the slice, or if the array was forever anonymous so to speak :)
[02:23:38] <rawtaz> us newbies have all these thoughts and thinking that you guys dont have i suppose :P
[02:24:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:25:10] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[02:26:01] *** Joins: Fault (~Fault@150.230.39.7)
[02:28:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:30:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:30:39] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[02:30:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:22] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:32:16] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[02:33:01] *** Quits: nehsou^ (~nehsou@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[02:34:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[02:35:14] *** Joins: mobbi (~quassel@dfs2j6yd4flw04sr2zw5y-3.rev.dnainternet.fi)
[02:35:47] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[02:36:00] *** Joins: mobbi_ (~quassel@dfs2j6yd4flw04sr2zw5y-3.rev.dnainternet.fi)
[02:36:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:37:41] *** Quits: mobbi (~quassel@dfs2j6yd4flw04sr2zw5y-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[02:40:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:41:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[02:41:59] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:43:25] *** Joins: fikran (~fikran@user/fikran)
[02:43:46] *** Joins: Fault (~Fault@150.230.39.7)
[02:47:04] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[02:47:23] *** Joins: jbauer (~jbauer@146.71.11.98)
[02:47:31] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[02:47:51] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:50:39] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:52:13] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:53:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:57:59] *** Quits: yonson (~yonson@2600:8801:d900:e:1e69:7aff:fea2:4e85) (Ping timeout: 264 seconds)
[02:58:01] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[02:58:38] *** Joins: yonson (~yonson@2600:8801:d900:0:1e69:7aff:fea2:4e85)
[02:59:35] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:02:08] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[03:03:00] *** Joins: Fault (~Fault@150.230.39.7)
[03:07:55] *** Joins: msmhbvd^ (~msmhbvd@h50.174.139.63.static.ip.windstream.net)
[03:08:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:18:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:19:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:24:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[03:24:43] *** Quits: independent56 (~independe@2.31.88.82) (Remote host closed the connection)
[03:25:07] *** Joins: independent56 (~independe@2.31.88.82)
[03:25:35] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:30:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[03:32:42] <rawtaz> another silly Q for understanding; instead of using make([]int, 5) to get a slice for a 5-element int array, is there any syntax to just define the array and turn it into a slice in one go, e.g. but not working: a := [5]int{}[:] ?
[03:33:04] <rawtaz> or is make() the only way unless you want to do it in two statements
[03:40:04] *** Quits: fub (uid190747@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:41:28] *** Quits: lauraaah (uid156848@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:44:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:45:20] <rawtaz> is an array in Go implemented as a linked list or just a bunch of consecutive bytes in memory (size depending on the type of course)?
[03:45:28] *** Joins: oxum (~oxum@122.172.47.114)
[03:47:27] <DHowett> rawtaz: consecutive; the slice header is defined on line ~13 here: https://golang.org/src/runtime/slice.go
[03:48:27] <fizzie> rawtaz: On the earlier question, you can do  (&[5]int{})[:]  though the reason why is a bit subtle.
[03:48:31] <DHowett> a better reference is the actual language reference, but it eluded me somehow- https://golang.org/ref/spec#Slice_types
[03:49:06] <DHowett> It stands to be said, though: make([]int, 5) makes a length-5 *slice* on its own -- it does not make an array :)
[03:49:17] <rawtaz> fizzie: oh ok. i tried that but without the & heh. yeah its more convoluted.
[03:49:21] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[03:50:03] <rawtaz> DHowett: yeah. and i was curious if there were other ways to do that, but without doing it in two steps like  a := [5]int{}; s := a[:]
[03:50:16] <DHowett> (admittedly, it makes both, but it returns to you the slice; the capacity may not be equal to the length by contract... i'm not actually sure about that)
[03:50:19] <DHowett> right :)
[03:51:06] <fizzie> Briefly, the reason why you *can't* do [5]int{}[:] is because a composite literal is not strictly speaking addressable, but as a special case you *are* allowed to use & on it to take its address, and any expression that dereferences a pointer *is* addressable, so you can slice it. (The pointer dereference in `(&[5]int{})[:]` is implicit.)
[03:51:12] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 268 seconds)
[03:51:24] <rawtaz> ok, so consecutive.. im trying to like understand why slices are made the way they are, with that "header" which points to an index in the array and then the capacity of them is "the rest", such that you can resize the slice length within the capacity, but you cant go back to make the capacity bigger if you e.g. did  s := s[2:]  and thereby lost the start of it.
[03:51:41] <DHowett> it seems like you could also use new([5]int)[:], but that's not meaningfully different
[03:52:18] <rawtaz> fizzie: hah nice. was that just a fluke or was it an intentional feature, this specific one?
[03:53:04] <fizzie> I don't think it's really an intentional feature. The reason for allowing & is more for cases like &someStruct{...} when you need a *someStruct.
[03:53:31] <rawtaz> yeah. basically they're allowing &T{..}
[03:55:21] <fizzie> Another probably-unintended consequence is that it allows for single expressions that make an initialized pointer to types that you can't make a composite literal for (only struct, array, slice and map types can be used in a composite literal).
[03:57:01] <rawtaz> im still new to this, can you make an example snippet? assuming its not more than like one line or so
[03:57:11] <fizzie> `&(&[1]int{123})[0]` evaluates to a *int that points to an int containing the value 123.
[03:57:19] <fizzie> But nobody would actually *write* that.
[03:57:34] <fizzie> You'd just do `i := 123; ... &i ...` instead.
[03:57:46] <rawtaz> yeah, that makes sense
[03:57:54] *** Quits: independent56 (~independe@2.31.88.82) (Ping timeout: 260 seconds)
[03:58:01] <fizzie> IIRC there's a proposal out there to add a syntax for it, but I think it was via a second argument to `new` instead.
[03:58:06] <rawtaz> i mean you could write it just to confuse your coworkers in some super important application :)
[03:59:29] <fizzie> TBH I'd like to be able to just write `&(int){123}` or something, like you can in C. Not that it comes up much.
[04:00:11] <fizzie> https://github.com/golang/go/issues/45624 for the (still undecided) proposal.
[04:01:08] *** Quits: msmhbvd^ (~msmhbvd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[04:01:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:03:31] <rawtaz> hum
[04:03:36] <rawtaz> rob writes "but that has the nasty problem that 3 does not have a type"
[04:04:09] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[04:04:37] <rawtaz> ok, but like, wth. if in e.g.  foo := 3  Go can derive that this should be a variable of type int, then why on earth would it not be able to derive that  p := &3  should be a pointer to an int? i dont get why that is a problem
[04:06:06] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:06:47] <fizzie> Having it pick the default type for untyped constants might work for making an *int, but then how'd you make a *int8?
[04:07:11] <fizzie> Guess you could also allow & on the result of a conversion, but that feels a little odd.
[04:07:51] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 268 seconds)
[04:08:29] <rawtaz> just  p := &int8(3)
[04:08:37] <rawtaz> which is his option 2, i now see
[04:11:11] <fizzie> "Would you consider yourself a novice, intermediate, or experienced Go programmer?" "I have some experience." That was kind of amusing.
[04:11:36] <rawtaz> haha yeah. well put :)
[04:13:37] <rawtaz> lol at Why is this question here twice?
[04:13:57] <rawtaz> i guess they're just making sure that the contributor didn't fall asleep while trying to answer that list of questions
[04:17:35] <seds> is the context package specifically for HTTP? looking for something similar to a thread local storage for a parallel algorithm
[04:19:03] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1007)
[04:19:45] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[04:20:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[04:26:31] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[04:27:31] *** Joins: Fault (~Fault@150.230.39.7)
[04:29:22] <rawtaz> in https://tour.golang.org/moretypes/15 what do you think "vs" in the  func append(s []T, vs ...T) []T  stands for?
[04:31:41] <bpalmer> a bunch of v things
[04:31:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:32:02] <bpalmer> (presumably v for value)
[04:32:57] <bpalmer> it's pretty common for variadic functions to just add an s to pluralize their parameters.
[04:33:38] <rawtaz> yeah that could be it, the s being a plural suffix so to speak
[04:33:49] <rawtaz> i was thinking vector of slices but that didnt really add up or make sense
[04:36:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:36:40] <fizzie> The *actual* documentation of the `builtin` pseudo-package that the Tour links to actually has the signature `func append(slice []Type, elems ...Type) []Type` which is more obvious.
[04:36:46] <fizzie> https://pkg.go.dev/builtin#append
[04:38:09] *** Quits: monoxane (~monoxane@user/monoxane) (Remote host closed the connection)
[04:38:20] <rawtaz> i just tried creating a function that takes ...int. so that becomes an array of values but is used to specify that one can supply the parameters separated by comma instead of having to pass them as an array
[04:38:45] <rawtaz> thats nice, like you can in python but cant in a bunch of other langs
[04:39:03] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybob)
[04:39:26] *** Quits: jezebel (jezebel@user/jezebel) (Ping timeout: 260 seconds)
[04:41:46] <fizzie> Yes. Although it's a little less flexible. You can call a `func foo(values ...int)` as `foo(1, 2, 3)` as well as `values := []int{1, 2, 3}; foo(values...)`, but you can't call it as `foo(1, 2, 3, more...)`.
[04:42:28] *** Joins: monoxane (~monoxane@user/monoxane)
[04:44:51] <rawtaz> oh hmm. could one say that ... as prefix packs whatever it gets into an array, and ... unpacks whatever it gets into parameters?
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:45] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:52] <fizzie> Yes, except you can only do the `foo(args...)` call if it actually *was* one of those `func foo(args ...int)` functions, not just generally.
[04:48:13] <rawtaz> yeah that makes sense
[04:48:34] <rawtaz> thats good to know. perhaps this would come up later in the tour
[04:49:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:50:12] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[04:50:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[04:51:04] *** Joins: Fault (~Fault@150.230.39.7)
[04:52:45] *** Joins: fikran (~fikran@user/fikran)
[04:54:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:56:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[04:58:09] <rawtaz> am i missing something or can one not do like this to allocate a slice of slices? make(make([]uint8, dx), dy)
[04:58:38] <rawtaz> i realize the inner make will return a slice. and i guess that isnt the same thing as a type, which the outer make wants as the first param
[04:58:46] <rawtaz> arg*
[05:05:59] <fizzie> Yeah, you need a loop if you want to make a slice of slices that's been "preallocated". `data := make([][]uint8, dy); for i := range data { data[i] = make([]uint8, dx) }` or so on.
[05:06:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:07:54] <rawtaz> haha, thats *exactly* the code i just wrote, except naming :)
[05:08:15] <rawtaz> now i just have to figure out how to adjust it so that i get a nice duck in the picture.
[05:11:37] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[05:12:23] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 265 seconds)
[05:19:09] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[05:23:42] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:25:10] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[05:26:16] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:28:31] *** Quits: grzywacz (~grzywacz@user/grzywacz) (Remote host closed the connection)
[05:38:28] *** Joins: oxum (~oxum@122.172.47.114)
[05:38:28] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:42:52] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:44:14] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[05:45:16] *** Joins: oxum (~oxum@122.172.47.114)
[05:47:16] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[05:49:54] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[05:50:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[05:50:32] *** Joins: oxum (~oxum@122.172.47.114)
[05:59:59] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[06:01:04] *** Joins: oxum (~oxum@122.172.47.114)
[06:04:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:05:44] *** Joins: vptr (~vptr@user/vptr)
[06:08:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:12:24] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:13:22] *** Joins: kiril (~kiril@85.91.153.163)
[06:15:07] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[06:16:01] *** Joins: Fault (~Fault@150.230.39.7)
[06:17:26] <rawtaz> i made a really fancy image in the Slice exercise using outer[i][j] = uint8((math.Sin(float64(i)*0.175)+1) * 128/2) + uint8((math.Sin(float64(j)*0.175)+1) * 128/2) :)
[06:18:11] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[06:21:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[06:26:03] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[06:26:50] *** Quits: Fault (~Fault@150.230.39.7) (Quit: Quit.)
[06:27:55] *** Joins: Fault (~Fault@150.230.39.7)
[06:28:27] *** Joins: oxum (~oxum@122.172.47.114)
[06:29:12] <fizzie> Fun fact: the playground can display images, if you print out "IMAGE:" followed by a base64'd PNG. https://play.golang.org/p/4y5Hu_nF741
[06:29:26] <fizzie> (Not sure what size your image was supposed to be, so just guessed.)
[06:33:23] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:33:42] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Read error: Connection reset by peer)
[06:34:01] <rawtaz> nice :) seems to use the data: inline image thing in the browser
[06:34:17] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[06:35:12] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:38:31] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[06:39:33] *** Joins: oxum (~oxum@122.172.47.114)
[06:39:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[06:44:58] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 260 seconds)
[06:45:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[06:45:27] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[06:46:44] *** Quits: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Remote host closed the connection)
[06:46:53] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[06:48:42] *** Parts: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) ()
[06:48:42] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1007) (Quit: ZNC 1.8.2 - https://znc.in)
[06:52:14] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:53:07] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:57:06] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[06:57:32] *** Joins: keyke (~qi@user/keyke)
[06:57:44] <keyke> yo sup guys
[06:58:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:58:37] <keyke> my neighbour just tapped the wall cos my farts woke her up
[07:00:07] <rawtaz> mayeb she wants something
[07:00:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:00:49] <keyke> ye ill fart on her face
[07:01:30] <rawtaz> ok so https://tour.golang.org/moretypes/21 shows that you can leave out the type name in the initialization of the value in that map. but when would you not initialize the map with values that are of the same time that the map is declared with? i dont get when you'd do it this way instead: https://tour.golang.org/moretypes/20
[07:02:06] *** Joins: fikran (~fikran@user/fikran)
[07:09:06] <rawtaz> im off to bed. but before that i wish to thank everyone here who helped me with my questions today. it's very kind of you, and it's helping me learn Go better. thanks!
[07:09:20] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:10:29] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[07:10:54] <keyke> <3
[07:13:29] <rawtaz> :3
[07:13:33] * rawtaz &
[07:14:27] *** Quits: vptr (~vptr@user/vptr) (Remote host closed the connection)
[07:16:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:24:57] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[07:30:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:34:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[07:34:44] *** Joins: noxim (~noxim@user/noxim)
[07:43:23] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:46:24] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:52:23] *** Joins: oxum (~oxum@122.172.47.114)
[07:53:15] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:57:18] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 260 seconds)
[07:58:48] *** Joins: bindu (~bindu@user/bindu)
[07:59:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[08:01:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:04:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:06:05] *** Quits: transacid_ (~transacid@transacid.de) (Ping timeout: 246 seconds)
[08:12:15] *** Joins: transacid (~transacid@transacid.de)
[08:13:09] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[08:15:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:20:04] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:22:30] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 260 seconds)
[08:22:41] *** Joins: marlinc_ (~marlinc@user/marlinc)
[08:24:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:27:00] *** Joins: frost (~frost@user/frost)
[08:35:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:39:39] *** Joins: oxum (~oxum@122.172.47.114)
[08:40:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[08:41:47] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[08:49:52] *** Parts: keyke (~qi@user/keyke) ()
[08:57:36] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:00:06] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[09:00:21] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[09:01:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[09:05:11] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:81d:9fc:80cc:9e91) (Quit: WeeChat 3.3)
[09:09:14] *** Joins: bindu (~bindu@user/bindu)
[09:09:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[09:10:06] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:11:27] *** Joins: fikran (~fikran@user/fikran)
[09:12:20] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:19:27] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:19:42] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:25:15] *** Joins: jpw (~jpw@user/jpw)
[09:28:56] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 256 seconds)
[09:30:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:38:05] *** Joins: ansimita (~ansimita@user/ansimita)
[09:45:37] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:50:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[10:03:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:04:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:05:11] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:07:25] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[10:12:31] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:15:35] *** Joins: keyke (~qi@user/keyke)
[10:15:52] <keyke> im going nuts
[10:18:03] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:19:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[10:20:11] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[10:21:04] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[10:22:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ea42:8fa9:6c11:b414) (Ping timeout: 245 seconds)
[10:22:29] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) (WeeChat 3.3)
[10:23:10] *** Joins: zwr (~zwr@2804:d45:b966:fb00:f670:f79d:3e7d:a052)
[10:28:11] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[10:28:44] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:33:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:33:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:37:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:37:36] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[10:52:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:53:49] *** Joins: independent56 (~independe@2.31.88.82)
[10:56:51] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[10:59:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[11:03:18] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:06:52] *** Joins: bindu (~bindu@user/bindu)
[11:07:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:09:51] *** Quits: keyke (~qi@user/keyke) (Ping timeout: 276 seconds)
[11:09:59] *** Joins: oxum (~oxum@122.172.47.114)
[11:09:59] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[11:14:31] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[11:16:37] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:17:54] *** Joins: oxum (~oxum@122.172.47.114)
[11:18:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:18:53] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[11:19:23] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 256 seconds)
[11:19:59] *** Joins: morgabra (sid500580@user/morgabra)
[11:20:08] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[11:20:48] *** Joins: fikran (~fikran@user/fikran)
[11:22:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:23:03] *** Joins: oxum (~oxum@136.185.170.109)
[11:24:33] *** Joins: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de)
[11:28:09] *** Quits: oxum (~oxum@136.185.170.109) (Ping timeout: 268 seconds)
[11:29:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[11:34:25] *** Joins: mrig (~AdiIRC@user/mrig)
[11:35:13] *** Joins: oxum (~oxum@136.185.170.109)
[11:38:36] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[11:39:33] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[11:40:21] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 256 seconds)
[11:42:59] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 264 seconds)
[11:43:32] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:44:20] *** Joins: oxum (~oxum@136.185.170.109)
[11:44:30] *** Quits: independent56 (~independe@2.31.88.82) (Quit: Leaving)
[11:44:45] *** Joins: independent56 (~independe@2.31.88.82)
[11:47:14] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[11:48:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[11:51:46] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[11:53:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:53:53] *** Joins: danmurf (~danmurf@user/danmurf)
[12:02:59] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:04:51] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[12:07:35] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 264 seconds)
[12:07:38] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[12:07:52] *** Joins: mrig (~AdiIRC@user/mrig)
[12:09:59] *** Joins: amk (~amk@109.255.169.126)
[12:12:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:14:33] *** Joins: alzgh (~alzgh@user/alzgh)
[12:18:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[12:18:44] *** Joins: oxum (~oxum@136.185.170.109)
[12:23:44] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[12:26:39] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[12:27:12] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:28:46] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[12:28:59] *** Joins: kiril (~kiril@85.91.153.163)
[12:29:00] *** Joins: oxum (~oxum@136.185.170.109)
[12:30:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:30:07] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Client Quit)
[12:30:24] *** Joins: noxim (~noxim@user/noxim)
[12:30:39] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[12:31:33] *** Joins: jla (~jordi@64.225.79.195)
[12:33:51] *** Quits: oxum (~oxum@136.185.170.109) (Ping timeout: 245 seconds)
[12:34:46] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[12:43:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:46:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:47:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:47:58] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[12:48:12] *** Joins: mrig (~AdiIRC@user/mrig)
[12:51:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[12:52:31] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[12:57:09] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[13:02:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:05:41] *** Quits: danmurf (~danmurf@user/danmurf) (Quit: Leaving...)
[13:07:30] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 265 seconds)
[13:10:51] *** Joins: oxum (~oxum@136.185.170.109)
[13:20:01] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[13:20:13] *** Joins: oxum (~oxum@136.185.170.109)
[13:21:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[13:23:52] <Anderson-D> I'm trying to write a goroutine that will recover any panics that happen in it and restart itself. Is it normal to `go this_func()` inside defer inside `this_func`?
[13:24:10] <Anderson-D> Is there any potential stack limit or something that may occur?
[13:28:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:30:09] *** Joins: fikran (~fikran@user/fikran)
[13:34:15] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[13:36:33] <novns> Anderson-D, the better way is to check for recover() inside the deferred function in your goroutine
[13:37:02] <novns> Anderson-D, and signal somehow outer main loop that it have to be started again
[13:37:08] <novns> using channels for example
[13:37:47] <novns> no stack overflow this way
[13:38:48] *** Joins: danmurf (~danmurf@user/danmurf)
[13:40:43] *** Quits: danmurf (~danmurf@user/danmurf) (Quit: ZNC 1.8.2 - https://znc.in)
[13:41:15] *** Joins: danmurf (~danmurf@user/danmurf)
[13:44:59] <icy> is it possible to use the flag package to parse from a string?
[13:45:00] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:45:00] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:45:26] <icy> for example, i have a string like: "foo -bar 1"
[13:45:28] *** Joins: kcrk (~kcrk@user/kcrk)
[13:47:54] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Read error: Connection reset by peer)
[13:47:54] *** Joins: jjakob_ (~quassel@2a01:260:8028:10f0::62)
[13:50:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:54:46] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[13:55:38] <novns> icy, yes, use FlagSet's Parse
[13:56:11] <novns> icy, the example https://cs.opensource.google/go/go/+/refs/tags/go1.17.3:src/flag/flag.go;l=1034
[14:01:03] <novns> icy, and you need to split your string by spaces into an array first
[14:06:38] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[14:07:25] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:08:24] *** Quits: danmurf (~danmurf@user/danmurf) (Ping timeout: 265 seconds)
[14:11:02] *** Joins: danmurf (uid480399@user/danmurf)
[14:25:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[14:28:12] <icy> novns: ah, gotcha. thanks!
[14:32:01] *** Joins: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[14:33:01] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[14:34:22] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[14:40:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:44:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[14:50:39] *** Quits: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Quit: leaving)
[14:59:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:00:56] *** Quits: normen (~normen@p200300d71723fa0089f7d6822b144bf4.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:05:00] *** Joins: Atque (~Atque@user/atque)
[15:05:25] *** Joins: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de)
[15:11:47] *** Quits: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[15:13:55] *** Joins: mei (~mei@user/mei)
[15:17:24] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:17:43] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[15:22:36] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[15:23:25] *** Joins: darkapex (~darkapex@user/darkapex)
[15:24:14] *** Quits: menace (~someone@user/menace) (Quit: menace)
[15:26:53] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[15:29:55] *** Joins: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de)
[15:30:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:34:24] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 256 seconds)
[15:34:58] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:37:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[15:39:31] *** Joins: fikran (~fikran@user/fikran)
[15:39:39] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[15:40:18] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[15:47:17] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:51:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[15:56:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:00:52] *** Parts: jla (~jordi@64.225.79.195) ()
[16:03:40] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[16:04:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:04:48] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[16:11:13] *** Joins: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[16:11:27] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[16:15:24] *** Joins: bindu (~bindu@user/bindu)
[16:16:48] *** Joins: adip (~adip@aejc92.neoplus.adsl.tpnet.pl)
[16:17:41] <adip> hi, can you give me a link to example of select on channels which checks if channels are still closed?
[16:18:01] <adip> I know it's possible, but I can't find a good example online
[16:18:28] <adip> is this supposed to work like this? struct,bool := <- channel ?
[16:20:18] *** Joins: darkapex_ (~darkapex@user/darkapex)
[16:21:04] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 268 seconds)
[16:23:03] <ikke> https://tour.golang.org/concurrency/4
[16:23:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[16:26:47] <adip> ikke: ah, ok. I didn't read the explanation on the left.
[16:26:49] <adip> thx
[16:30:39] *** Joins: noxim54 (~noxim@user/noxim)
[16:30:50] *** Quits: noxim54 (~noxim@user/noxim) (Client Quit)
[16:33:22] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 256 seconds)
[16:36:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:37:05] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 246 seconds)
[16:40:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:52:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:55:42] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[16:57:49] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.3)
[16:58:37] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[16:58:46] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[16:58:50] *** Quits: independent56 (~independe@2.31.88.82) (Ping timeout: 256 seconds)
[17:03:44] <Atque> Hmm, does golang remind anyone else of Taylor Swift's lyrics "you know when it's time to go".
[17:04:38] <ikke> 0no
[17:04:45] <ikke> mostly because I don't know it
[17:04:53] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.29) (Ping timeout: 264 seconds)
[17:05:49] *** Joins: Everything (~Everythin@37.115.210.35)
[17:10:57] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[17:14:20] *** Joins: cskr (~cskr@49.207.217.118)
[17:14:55] *** Quits: cskr (~cskr@49.207.217.118) (Client Quit)
[17:16:58] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[17:20:43] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:24:23] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:26:07] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:30:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:30:48] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:31:22] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[17:34:34] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[17:35:24] <leitz> What am I doing wrong? Flag order seems to matter, and that seems odd.   Lines 14, 15.   https://gist.github.com/LeamHall/a07b7166883097396fc19508aa70768d
[17:36:05] <leitz> Error results are in results.txt, lines 3,4 and 12,13.
[17:36:28] <leitz> Same issue if I build the binary and run it.
[17:46:36] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[17:46:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:47:00] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:47:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[17:47:54] *** Joins: caverton (~caverton@ercro.tech)
[17:48:52] *** Joins: fikran (~fikran@user/fikran)
[17:49:05] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:49:29] <since_> leitz: Flag parsing stops just before the first non-flag argument ("-" is a non-flag argument) or after the terminator "--".
[17:49:52] <since_> -flag x  // non-boolean flags only
[17:50:21] <since_> leitz: so it stops at true which is a non flag argument
[17:51:02] *** Joins: bindu (~bindu@user/bindu)
[17:51:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[17:51:44] <since_> leitz: but all this is written in the doc directly at the top: https://pkg.go.dev/flag#hdr-Usage
[17:52:43] <since_> and: https://pkg.go.dev/flag#hdr-Command_line_flag_syntax
[17:54:52] <leitz> since_, ah, since I was using a space as the delimiter, the "true" was taken as a non-flag argument. Using "--mb=true" works. Thanks!
[17:55:41] <leitz> since_, and I was reading the docs. However, they don't seem to be written for my level of Go understanding. Even the examples seem to assume you know Go.
[17:57:14] <since_> leitz: yes. the idea with the bool flags is that you may not need to supply an argument
[17:57:27] * rawtaz ponders which the most annoying nick could be, perhaps something like "however" or "regardless" :-)
[17:57:50] <since_> imagine ls -la and writing it as ls -l=true -a=true
[17:59:07] <since_> rawtaz: _ is the highlight prevention. one only needs it in english channels however_
[17:59:54] *** Joins: Compy_ (~compy@user/compy)
[18:02:19] <leitz> Isn't swimming in th english channel pretty cold?
[18:02:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:05:17] <ikke> rawtaz: something like the would be more anoying, I can imagine
[18:21:00] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[18:25:36] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[18:32:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:34:06] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[18:35:11] *** Joins: jla (~jordi@64.225.79.195)
[18:36:38] *** Joins: monoxane7 (~monoxane@user/monoxane)
[18:37:06] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[18:37:26] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 256 seconds)
[18:37:26] *** monoxane7 is now known as monoxane
[18:38:37] *** Joins: oxum (~oxum@136.185.170.109)
[18:43:10] *** Quits: oxum (~oxum@136.185.170.109) (Ping timeout: 260 seconds)
[18:47:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:47:40] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:51:48] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:52:44] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 256 seconds)
[18:55:46] *** Joins: odddog309 (~odddog309@2a02:2455:7e0:f600:91a4:5ae7:6e7a:2d95)
[18:55:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:56:06] *** Joins: monoxane (~monoxane@user/monoxane)
[18:56:54] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:57:27] *** Joins: CoolerX (~user@user/coolerx)
[18:57:29] <CoolerX> Hi
[18:57:45] <CoolerX> Can the go compiler target 8086?
[19:00:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[19:03:36] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[19:05:32] <novns> CoolerX, not yet, maybe later
[19:07:00] <novns> when someone will buy out Borland back from the current owners, and will release Turbo Go for DOS
[19:12:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:20:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:27:18] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 256 seconds)
[19:28:54] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 260 seconds)
[19:30:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[19:37:57] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[19:37:57] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[19:37:57] *** Joins: tane (~tane@user/tane)
[19:42:46] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:43:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[19:48:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[19:49:35] *** Quits: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Quit: leaving)
[19:50:09] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:51:01] *** Quits: odddog309 (~odddog309@2a02:2455:7e0:f600:91a4:5ae7:6e7a:2d95) (Quit: Leaving)
[19:56:12] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[19:58:12] *** Joins: fikran (~fikran@user/fikran)
[19:59:09] *** Joins: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de)
[19:59:32] *** Quits: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de) (Changing host)
[19:59:32] *** Joins: menace (~someone@user/menace)
[20:00:24] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[20:03:34] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:04:01] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:06:56] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[20:07:21] *** Joins: teasea (~teasea@user/teasea)
[20:09:48] *** Quits: CoolerX (~user@user/coolerx) (Ping timeout: 256 seconds)
[20:11:36] *** Joins: CoolerX (~user@user/coolerx)
[20:12:12] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:20:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[20:30:37] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d01f-a3d3-6b92-da96.res6.spectrum.com)
[20:30:57] *** Joins: cskr (~cskr@49.207.217.118)
[20:31:48] *** Quits: cskr (~cskr@49.207.217.118) (Client Quit)
[20:32:04] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[20:34:06] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:34:59] *** Joins: _Asgaroth_ (~Asgaroth@93.107.191.92)
[20:35:25] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[20:36:30] *** Joins: __Asgaroth__ (~Asgaroth@93.107.191.92)
[20:37:32] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Ping timeout: 240 seconds)
[20:38:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[20:39:25] *** Quits: _Asgaroth_ (~Asgaroth@93.107.191.92) (Ping timeout: 265 seconds)
[20:41:37] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:43:01] *** Quits: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 245 seconds)
[20:43:24] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[20:50:51] <pgloor> gekko1
[20:53:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:54:12] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[20:54:26] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[20:57:24] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[20:58:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:04:51] *** Joins: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net)
[21:05:40] <adip> can select receive from 2 channes in one execution? (run to cases in one loop execution)
[21:08:59] <fizzie> No. Though it does evaluate all the relevant expressions (the channel operand of each receive, and the channel and value-to-send expressions of each send) of all of the cases before entering the select, which might be relevant if those contain function calls. But only one of the cases has its body executed.
[21:09:40] <fizzie> If more than one are viable, "a single one that can proceed is chosen via a uniform pseudo-random selection", quoting from https://golang.org/ref/spec#Select_statements
[21:10:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:14:52] <adip> I have select with 3 channels, but process data after the select{ .... }. Am I loosing my values if I 2 or 3 channels have value at the time.
[21:14:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d01f-a3d3-6b92-da96.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:15:26] <adip> I'm not sure if I understood you.
[21:15:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[21:15:33] <ikke> You're not losing any data
[21:15:44] <ikke> Eeach execution of the select statement reads from one channel
[21:16:07] <adip> ok, thanks
[21:16:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:18:39] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:50] *** Joins: riv (river@tilde.team/user/river)
[21:20:57] <riv> Hi
[21:21:26] <riv> Is anyone using docker to build a go program? I have set up a dockerfile but I wonder if somehow knows how to improve this problem I have with it
[21:21:39] <riv> when ever I changed the code and rebuild, my container redownloads all the dependencies
[21:22:04] *** Joins: oxum (~oxum@136.185.170.109)
[21:22:08] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:1540:5021:16c3:8fd5) (Quit: Leaving)
[21:22:25] <riv> https://bpa.st/DIPA this is what I do. Is there a command to add before go install that will let me cache downloading all the deps?
[21:22:58] *** Quits: oxum (~oxum@136.185.170.109) (Client Quit)
[21:27:28] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[21:28:34] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[21:28:47] *** Quits: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[21:30:23] *** Joins: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net)
[21:30:29] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybob)
[21:31:42] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:31:58] <mikoto-chan> can I have a const that's bigger than int64?
[21:32:06] <mikoto-chan> big.NewInt isn't constant it seems
[21:32:06] <rawtaz> fizzie: may i PM you for a personal question? fine it not
[21:32:48] <mikoto-chan> I mean bigger than uint64
[21:35:42] <mikoto-chan> weird, you can define consts bigger than uint64 and the compiler won't complain as long as you don't specify a type
[21:39:46] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:40:30] *** Quits: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[21:41:53] <seebs> right
[21:42:03] <seebs> note that they could be valid float64, possibly
[21:46:20] *** Quits: shtirlic (~shtirlic@95-55-24-132.dynamic.avangarddsl.ru) (Remote host closed the connection)
[21:47:16] <seebs> also they can participate in computations
[21:47:35] <seebs> `const toomany = (1 << 70); const peruint64 = (toomany / (1 << 64))`
[21:51:43] *** Joins: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net)
[21:55:43] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:56:12] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[21:58:35] *** Quits: boingolov (~nastynate@172-3-47-79.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 264 seconds)
[21:59:00] *** Quits: frebib (~frebibcha@nerdhouse.io) (Ping timeout: 268 seconds)
[22:00:51] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[22:02:45] *** Joins: tyson2 (~user@206-248-138-20.dsl.teksavvy.com)
[22:04:58] *** Joins: boingolov (~nastynate@99.26.180.217)
[22:05:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[22:07:33] *** Joins: fikran (~fikran@user/fikran)
[22:13:09] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:17:49] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[22:18:35] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[22:20:18] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1007)
[22:21:22] <fizzie> "Although numeric constants have arbitrary precision in the language, a compiler may implement them using an internal representation with limited precision. That said, every implementation must: * Represent integer constants with at least 256 bits." https://golang.org/ref/spec#Constants
[22:22:09] <fizzie> Some empirical playgrounding suggests it's 512 bits for "the" implementation.
[22:22:31] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[22:23:37] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:24:50] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[22:25:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d4dc-95a8-783c-f257.res6.spectrum.com)
[22:26:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[22:31:50] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[22:32:52] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[22:33:38] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[22:35:14] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:43:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[22:47:30] *** Joins: fef (~thedawn@user/thedawn)
[22:48:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[22:51:34] *** Quits: CoolerX (~user@user/coolerx) (Read error: Connection reset by peer)
[22:51:50] *** Joins: CoolerX (~user@user/coolerx)
[22:53:28] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:54:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[23:01:34] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:01:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:01:41] <b0nn>  
[23:08:48] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1007) (Quit: ZNC 1.8.2 - https://znc.in)
[23:10:02] <b0nn> https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/go/constant/value.go#L68
[23:10:09] <b0nn> tis indeed 512
[23:11:10] *** Quits: Shimmy (~Shimmy@user/shimmy) (Quit: The Lounge - https://thelounge.chat)
[23:11:21] *** Joins: Shimmy (~Shimmy@user/shimmy)
[23:13:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d4dc-95a8-783c-f257.res6.spectrum.com) (Ping timeout: 260 seconds)
[23:15:43] *** Joins: danmurf (uid480399@user/danmurf)
[23:16:17] *** Quits: tyson2 (~user@206-248-138-20.dsl.teksavvy.com) (Remote host closed the connection)
[23:16:59] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[23:26:25] *** Quits: CoolerX (~user@user/coolerx) (Quit: leaving)
[23:28:01] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[23:32:01] <b0nn> riv: The way around that is to take advantage of "layers" in your docker image
[23:32:15] <riv> thanks b0nn
[23:32:19] <b0nn> such that your application is at a different layer than the imports
[23:32:30] <riv> that sounds great - how do I make that happen?
[23:32:47] <b0nn> https://docs.docker.com/develop/develop-images/multistage-build/
[23:32:54] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[23:34:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[23:38:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:38:30] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:39:00] <b0nn> I know it's bad form to criticise other technologies, but I just cannot bring myself to use projects managed by npm :\
[23:39:22] <riv> i put npm inside docker now
[23:39:28] <riv> contain the toxic sludge
[23:41:09] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[23:41:16] <b0nn> I had to review some code - the author chose node, and they submitted 76k of work (all it was was a endpoint with some custom middleware) - npm downloaded 323 Mb of data for it
[23:41:35] *** Joins: wolfshappen (~waff@irc.furworks.de)
[23:41:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[23:44:14] <KirkMcDonald> npm is a tool I've had to use by necessity, but I've never once understood what I was doing.
[23:45:10] <KirkMcDonald> As a consequence of which, whenever "Just run this command!" does not in fact work, then I guess I didn't need to use npm after all.
[23:45:38] <b0nn> that's exactly where I find myself right now - which is why I bought it up
[23:46:20] <b0nn> And, to bring this back on-topic, I sincerly hope modules doesn't end up like this
[23:47:24] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[23:49:16] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[23:51:27] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:51:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
