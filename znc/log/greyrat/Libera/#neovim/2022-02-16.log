[00:02:57] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[00:03:16] <gpanders> yes that works too :)
[00:03:23] <angelacrust> ty
[00:03:31] <gpanders> that is actually what I would recommend for long options that contain spaces (such as 'makeprg')
[00:03:54] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[00:04:13] *** Joins: Betal (~Betal@user/betal)
[00:04:57] <angelacrust> yeah
[00:05:47] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:1b5d:374a:816c:e903) (Ping timeout: 250 seconds)
[00:07:39] *** evanextreme[away is now known as evanextreme
[00:07:51] *** evanextreme is now known as evanextreme[away
[00:09:36] *** Quits: jacky (~jacky@47.202.64.169) (Ping timeout: 272 seconds)
[00:09:58] *** Joins: jacky (~jacky@47.202.64.169)
[00:10:00] <nova> wtf is util.join_paths on packer's readme
[00:11:12] *** evanextreme[away is now known as evanextreme
[00:13:24] *** Quits: guido_ (~weechat@host-79-18-252-81.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[00:15:23] *** Joins: guido_ (~weechat@host-79-45-53-113.retail.telecomitalia.it)
[00:18:10] *** Quits: pvp (~pvp@p4ff13645.dip0.t-ipconnect.de) (Quit: Ping timeout (120 seconds))
[00:18:30] *** Joins: pvp (~pvp@p4ff13645.dip0.t-ipconnect.de)
[00:18:47] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[00:20:03] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[00:21:42] *** Quits: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu) (Quit: Client closed)
[00:21:54] *** Joins: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu)
[00:22:23] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[00:25:31] *** evanextreme is now known as evanextreme[away
[00:30:07] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[00:30:28] *** Joins: angelacrust (~angelacru@182.68.208.211)
[00:34:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:35:00] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[00:43:31] <nova> thought so
[00:46:38] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[00:48:30] <smolck> <nova> "wtf is util.join_paths on packer..." <- a utility for joining paths?
[00:48:33] <ii14[m]> smolck: thought so
[00:48:46] <sunjonSenghanBri> wtf bbq 😕
[00:49:19] <nova> util isn't defined or mentioned anywhere in the readme or https://google.com
[00:49:53] <ii14[m]> i got 77 600 000 search results for util, wdym
[00:50:04] <gpanders> I think it's packer.util
[00:50:05] <nova> "nvim lua util join_paths"
[00:50:10] <gpanders> local util = require('packer.util')
[00:50:16] <smolck> yeah
[00:50:18] <gpanders> that's just a guess tho
[00:50:18] <smolck> https://github.com/wbthomason/packer.nvim/blob/3fdea07bec6cb733d2f82e50a10829528b0ed4a9/lua/packer/util.lua#L51
[00:50:19] <dundargoc> Yeah, I think it's specific to packer
[00:50:21] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[00:50:24] <nova> I tried require('packer').util .. hmm gotcha. I couldn't find that anywhere
[00:50:28] <smolck> that's where it's defined ^
[00:50:29] <gpanders> README probably should be updated with that
[00:50:48] <dundargoc> That readme is decaying.
[00:51:15] <dundargoc>  * be nice be nice be nice
[00:51:23] <wbthomason[m]> Docs help is always welcome!
[00:51:30] <smolck> dundargoc: I thought someone from around here was gonna update it, hence why I stopped
[00:51:41] *** Joins: ublx (~ublx@user/ublx)
[00:51:41] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Quit: au revoir)
[00:51:44] <smolck> was planning on a README update PR
[00:51:48] <sunjonSenghanBri> "be nice" == "I see something I can fix!"
[00:52:16] <dundargoc> wbthomason[m]: Wow. I feel bad. I apologize.
[00:52:34] <nova> I helped someone with this exact thing a year or two ago. I helped him, but then I forgot. also, migraines are pretty fun
[00:52:56] <wbthomason[m]> No problem. I really haven't had as much time for packer as I've wanted for a while now; I'm trying to get more people involved so that problems get solved faster
[00:53:12] <wbthomason[m]> There has absolutely been some docs and code rot
[00:53:13] *** Joins: blaklistd (~blaklistd@user/blaklistd)
[00:53:22] <dundargoc> Just give Zeer commit rights.
[00:53:44] <wbthomason[m]> Zeer?
[00:53:52] <gpanders> zeertzjq on GitHub
[00:53:54] <dundargoc> Our new superstar.
[00:53:58] <smolck> dundargoc: that would be ezeer . . . eazeer . . . eazier . . . 
[00:54:02] <wbthomason[m]> Ah, perfect
[00:54:26] <maverun[m]> actually
[00:54:34] <maverun[m]> shouldn't we just give him right to every plugins?
[00:54:42] <maverun[m]> i feel like that would just make world better
[00:54:43] <maverun[m]> xD
[00:54:44] <dundargoc> Probably
[00:55:00] <wbthomason[m]> Anyone work at GitHub and can just get this guy access to all repos?
[00:55:04] <wbthomason[m]> Skip a few steps
[00:55:16] <smolck> just give him access to GitHub
[00:55:40] <maverun[m]> legendary say he doing 100 reply per min across all github repo
[00:55:46] <maverun[m]> s/legendary/legend/
[00:57:30] <nova> so, is it possible to clone into vim.fn.stdpath('config')..'/site'? I use .startup(fn, tbl) where fn is the use stuff and a sync() at end and tbl is the config table, where I set package_root to that ...
[00:57:34] <angelacrust> It's not working...idk why--https://bpa.st/Y7HQ --> error: No such file or directory. Bash shell returns 1.
[00:57:53] <nova> ~/.config/nvim/site/pack rather
[00:58:47] *** Quits: guido_ (~weechat@host-79-45-53-113.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[01:00:52] <nova> angelacrust, % is special char in many circumstances in vim cmdline. % means current file name. escape: \
[01:01:44] <gpanders> for some definition of fun
[01:02:49] <angelacrust> ah
[01:02:54] <nova> unless you wanted % to mean "current file", but ./% doesn't make much sense - whereas ./%:t does (because :t means tail or filename (disregarding any leading pathing)
[01:03:13] <clason[m]> for very small values of fun
[01:03:22] <nova> and if you want literal ./% then you need ./\% of course
[01:03:22] <clason[m]> although the colors can be pretty...
[01:03:51] <angelacrust> okay
[01:06:28] <angelacrust> Yep, that's not working either
[01:06:38] <ii14[m]> just make a backdoor in sshd and give him access to everyones machines
[01:07:08] <gpanders> nova: ~/.config/nvim/site isn't on the runtimepath by default, you can use ~/.config/nvim/pack though
[01:07:23] <nova> angelacrust, what's the whole thing? :!... or is this in lua? did you use :call system() or systemlist()...?
[01:07:55] <angelacrust> Nope, it's written with noremap
[01:07:58] <nova> gpanders, oops. thx I set packpath but not rtp... but... nvim/pack better than nvim/site/pack anyway thx
[01:08:15] <gpanders> angelacrust: what is that paste? is that what you're setting makeprg to?
[01:08:42] <angelacrust> yeah
[01:09:02] <angelacrust> let &makeprg="whatever"
[01:09:24] <nova> did you escape all of the % s
[01:09:39] <angelacrust> I'm using let &makeprg instead
[01:11:09] <nova> % is still special. :set makeprg=echo\ % then :echo &makeprg ... it shows "echo %". then :make and you see it echos current buffer's file's name
[01:11:21] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 252 seconds)
[01:11:37] <angelacrust> okay
[01:12:35] <angelacrust> that's correct
[01:12:52] <gpanders> angelacrust: why do you have a <CR> at the end?
[01:13:07] <gpanders> you don't need that for makeprg, that is only for mappings
[01:13:09] *** Quits: towb (~bwot@user/towb) (Quit: WeeChat 3.4)
[01:13:11] <angelacrust> oh
[01:13:20] <angelacrust> yes, but the mapping isn't working either
[01:15:01] <nova> you don't want <cr> at end. :let &makeprg = 'g++ -fsanitize=address -std=c++17 -Wall -Wextra -Wshadow -DPREDWN -O2 -o %:r % && ./%:t < inp'  .. maybe? I think the %s are supposed to be references to the current file, so ...
[01:15:35] *** Joins: carlOS[m]1 (~rasterdog@2001:470:69fc:105::1:68c7)
[01:15:35] <carlOS[m]1> Hi, I want opinions, what is the better completion plugin? coq nvim or nvim-cmp
[01:16:09] *** Joins: angelacrust11 (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39)
[01:16:14] *** Quits: angelacrust11 (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39) (Write error: Connection reset by peer)
[01:17:51] *** Quits: angelacrust (~angelacru@182.68.208.211) (Ping timeout: 256 seconds)
[01:17:58] <sunjonSenghanBri> pepsi
[01:18:01] <sunjonSenghanBri> no wait.... coke.
[01:19:53] *** Joins: angelacrust (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39)
[01:21:12] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[01:22:42] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[01:23:42] *** Joins: sliss (~sliss@109.136.165.60)
[01:24:10] <sunjonSenghanBri> is the bridge out of sync?
[01:24:30] <sunjonSenghanBri> element and irc have differing opinions on "now"
[01:26:01] <MrElendig> depends on which bridge you are using
[01:26:08] <sunjon[m]> A
[01:26:14] *** Quits: sliss (~sliss@109.136.165.60) (Client Quit)
[01:26:48] *** Joins: Guest88 (~textual@85.249.167.96)
[01:27:42] *** Quits: _The_ether_ (~hostname@user/The-ether/x-4348069) (Quit: WeeChat 2.8)
[01:27:45] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 256 seconds)
[01:28:30] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:28:57] <sunjon[m]> Gitter->matrix I guess
[01:32:43] *** Joins: sliss (~sliss@109.136.165.60)
[01:33:09] *** Quits: jacky (~jacky@47.202.64.169) (Read error: Connection reset by peer)
[01:34:01] *** Quits: off^ (~off@50.235.176.163) (Remote host closed the connection)
[01:34:47] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:36:35] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[01:42:27] *** Joins: dsrt^ (~dsrt@50.235.176.163)
[01:43:58] *** Quits: sliss (~sliss@109.136.165.60) (Ping timeout: 272 seconds)
[01:44:15] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:45:05] <senoraraton> So I added https://bpa.st/O6QQ to my .vimrc but its kind of slow, it takes a second to switch between modes, is there any way to speed it up?
[01:45:13] *** Quits: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu) (Quit: Client closed)
[01:45:16] *** Joins: cotko (~cotko@155.pool85-49-78.dynamic.orange.es)
[01:46:36] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Ping timeout: 240 seconds)
[01:52:57] *** Quits: Guest88 (~textual@85.249.167.96) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:01] <senoraraton> Also, why is it only changing color if I set it as RPrompt. If I put it in my ps1 it renders the bar, but the functions don't work.
[01:53:55] <sunjon[m]> This isn't #zsh
[01:54:20] *** Quits: angelacrust (~angelacru@2409:4053:2e15:da3c:6908:f954:b118:4c39) (Quit: Client closed)
[01:59:35] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[02:02:23] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.29) (Ping timeout: 256 seconds)
[02:05:26] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[02:12:15] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Quit: WeeChat 3.4)
[02:13:17] *** Joins: yhnujmikV (~yhnujmikV@185.195.233.154)
[02:13:38] <ii14[m]> this isn't even vimscript, it's zsh
[02:13:49] <ii14[m]> it has no place in vimrc
[02:16:36] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 240 seconds)
[02:16:54] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:19:49] *** Quits: harryy (~harry@user/harryy) (Quit: WeeChat 3.4)
[02:20:31] <senoraraton> I have spend so much time no my configs, I dont' even know where I am anymore.
[02:20:37] <senoraraton> Everything is vim.  Vim is life.
[02:20:51] *** Joins: harryy (~harry@user/harryy)
[02:28:24] *** Quits: Skaarj (~quassel@p5ddf0616.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:30:35] <lordmzte> yes
[02:38:54] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469)
[02:47:38] <LeoNerd> clason[m]: Just... randomly while it's in my mind: if I ended up entirely forking/recreating this treesitter to fix most of the crazy, would you be opposed to swapping to it?
[02:49:07] <clason[m]> if it's a clear and significant improvement (with a long-term maintenance outlook), no; there's recent precedent on that.
[02:49:24] <LeoNerd> OK
[02:49:33] <clason[m]> such a swap can be intrusive, so we wouldn't do it lightly
[02:49:38] <LeoNerd> I'm hoping it won't be necessary.. it's just I've read over the current grammar and there's a *huge* amount of Wrong in it
[02:49:43] <clason[m]> (as I learned the hard way with the Lua parser)
[02:49:53] <LeoNerd> So I'll have to see what and why that's going on with upstream... if they have clear reasons for doing it in weird ways
[02:50:28] <clason[m]> Sure. 
[02:50:56] <clason[m]> In general, one of the advantages of tree-sitter is a larger ecosystem
[02:51:21] <LeoNerd> Yah
[02:51:28] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469) (*.net *.split)
[02:51:28] *** Quits: pvp (~pvp@p4ff13645.dip0.t-ipconnect.de) (*.net *.split)
[02:51:28] *** Quits: arch-angel (~quassel@user/arch-angel) (*.net *.split)
[02:51:28] *** Quits: hughrawlinson_ (sid11243@id-11243.ilkley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Strom (strom@fedora/strom) (*.net *.split)
[02:51:28] *** Quits: kron (~weechat@user/qaph) (*.net *.split)
[02:51:28] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23) (*.net *.split)
[02:51:28] *** Quits: thetic[m] (~theticmat@2001:470:69fc:105::1:befe) (*.net *.split)
[02:51:28] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (*.net *.split)
[02:51:28] *** Quits: znemo (sid500529@id-500529.uxbridge.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: xenrox (~xenrox@user/xenrox) (*.net *.split)
[02:51:28] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[02:51:28] *** Quits: sumner (~sumner@static.147.43.161.5.clients.your-server.de) (*.net *.split)
[02:51:28] *** Quits: mva (znc@gentoo/developer/mva) (*.net *.split)
[02:51:28] *** Quits: ScrumpyJack (~ScrumpyJa@beaucoup.fish) (*.net *.split)
[02:51:28] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[02:51:28] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (*.net *.split)
[02:51:28] *** Quits: dagle (dagle@user/dagle) (*.net *.split)
[02:51:28] *** Quits: itok (sid418430@ilkley.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Pent (sid313808@lymington.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[02:51:28] *** Quits: choucavalier (~choucaval@user/choucavalier) (*.net *.split)
[02:51:28] *** Quits: buz (~buz@damn.serious.im) (*.net *.split)
[02:51:28] *** Quits: ttkap (~ttkap@user/ttkap) (*.net *.split)
[02:51:28] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[02:51:28] *** Quits: CRThaze1 (~weechat@188.166.44.58) (*.net *.split)
[02:51:57] <clason[m]> so syntax files are not just vim (and now Neovim), but driven by much larger players, like Github
[02:51:58] <LeoNerd> Imean; the things it is doing wrong will be wrong for *everyone*, because it's making incorrect decisions about the incoming source
[02:52:09] <LeoNerd> So -hopefully- they'll be onboard with fixing that
[02:52:19] <clason[m]> so there's value in agreeing on a "standard" parser
[02:52:37] <jaawerth> that's the whole idea. communitiy-maintained generalized parsers for static analysis
[02:52:42] <clason[m]> yep, I hope (and believe) so, too
[02:52:57] <LeoNerd> Ehh.... there's a limit to how well that would work for Perl though anyway
[02:53:29] <jaawerth> well, sure. the slam poetry parser also has issues
[02:53:43] <LeoNerd> Imean, already I don't think treesitter is anywhere near powerful enough to handle some *standard* bits of Perl syntax like EOF-quoted heredocs.
[02:53:47] *** Joins: pvp (~pvp@p4ff13645.dip0.t-ipconnect.de)
[02:53:47] *** Joins: arch-angel (~quassel@user/arch-angel)
[02:53:47] *** Joins: hughrawlinson_ (sid11243@id-11243.ilkley.irccloud.com)
[02:53:47] *** Joins: Strom (strom@fedora/strom)
[02:53:47] *** Joins: kron (~weechat@user/qaph)
[02:53:47] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23)
[02:53:47] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[02:53:47] *** Joins: thetic[m] (~theticmat@2001:470:69fc:105::1:befe)
[02:53:47] *** Joins: znemo (sid500529@id-500529.uxbridge.irccloud.com)
[02:53:47] *** Joins: xenrox (~xenrox@user/xenrox)
[02:53:47] *** Joins: hendry (~hendry@210.23.22.2)
[02:53:47] *** Joins: sumner (~sumner@static.147.43.161.5.clients.your-server.de)
[02:53:47] *** Joins: mva (znc@gentoo/developer/mva)
[02:53:47] *** Joins: dagle (dagle@user/dagle)
[02:53:47] *** Joins: ScrumpyJack (~ScrumpyJa@beaucoup.fish)
[02:53:47] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[02:53:47] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[02:53:47] *** Joins: itok (sid418430@ilkley.irccloud.com)
[02:53:47] *** Joins: Pent (sid313808@lymington.irccloud.com)
[02:53:47] *** Joins: finsternis (~X@23.226.237.192)
[02:53:47] *** Joins: choucavalier (~choucaval@user/choucavalier)
[02:53:47] *** Joins: buz (~buz@damn.serious.im)
[02:53:47] *** Joins: ttkap (~ttkap@user/ttkap)
[02:53:47] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[02:53:47] *** Joins: CRThaze1 (~weechat@188.166.44.58)
[02:53:47] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[02:53:47] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[02:53:59] <LeoNerd> And I definitely don't think it would be happy with the fact that loaded modules can extend the syntax to add more stuff
[02:54:01] <LeoNerd> As I keep doing ;)
[02:54:05] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[02:54:12] <jaawerth> well a lot of it is just a matter of work put into the parser. but given the syntactic complexity and variants of perl I'm sure the queries could be limiting too
[02:54:20] *** Joins: finsternis (~X@23.226.237.192)
[02:54:56] <clason[m]> and if they show they're not quite up to the task, a more "professional" parser will be taken up by others
[02:54:59] <jaawerth> it's the pandoc of static analysis tooling so it's never going to be quite as good as a language-specific tool
[02:55:23] <jaawerth> but it could get close depending on how much work folks put into the grammars and paraser and whatnot
[02:55:23] <clason[m]> to be fair, I have trouble parsing slam poetry, too
[02:55:41] <LeoNerd> Random example: the syntax/perl.vim has a bunch of options to it; things you can twiddle in your .vimrc to at least tell it, generally, for you as a developer, what it should do with particular syntax choices
[02:55:54] <LeoNerd> I haven't seen any way to have a configurable tree-sitter grammar with options in it
[02:56:42] <clason[m]> yeah, that's not something we have for tree-sitter yet
[02:57:02] <LeoNerd> Soyeah... trying to handle all the syntax extensions isn't even going to work on that basis
[02:57:03] <jaawerth> though one would *aim* to get a unified AST and then do things conditionally based on that. macro systems or interpreter pragmas could throw a wrench in things, ofc
[02:57:23] *** Quits: itok (sid418430@ilkley.irccloud.com) (Ping timeout: 250 seconds)
[02:57:30] <LeoNerd> It's not a "macro system". It's "loaded modules can inject new code into the parser"
[02:57:40] <LeoNerd> I have about 10 or so modules which really do that
[02:57:48] <jaawerth> lol I'm not saying it's a macro system, that is just another eample of something for which ts would be limited
[02:57:56] <LeoNerd> Right
[02:58:41] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 250 seconds)
[02:58:42] <jaawerth> but it's not like most of this is impossible in theory, it's all a question of whether someone's willing to put the work into it. barring limitations in the high-level api i suppose
[02:58:49] <LeoNerd> Yes that's my question
[02:58:56] <LeoNerd> Can *tree-sitter* cope with this kind of thing?
[02:59:14] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[02:59:29] *** Joins: hendry (~hendry@210.23.22.2)
[03:01:13] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[03:01:35] <senoraraton> join #zsh
[03:01:40] *** Parts: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) ()
[03:01:42] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[03:01:43] <jaawerth> I'm not yet experienced enough with it to know either. for general purposes of various editing operations I've been quite happy with it. but I haven't usedit for perl. if I had to guess I'd say it probably couldn't hit 100% but probably fairly close? for some things you would probably need a preprocessor, for languages where you would need the actual runtime to even get a sensible AST (macros being
[03:01:45] <jaawerth> a good example)
[03:01:50] <clason[m]> you can write your own scanner to augment the tree-sitter lexer, so... probably?
[03:01:51] <clason[m]> possibly?
[03:01:57] <jaawerth> ah yeah there we go
[03:02:05] <jaawerth> pluggable scanner would do the trick
[03:02:25] <LeoNerd> Not really sure how a pluggable scanner helps
[03:02:37] <jaawerth> with perl6 it would be even wilder since you'd have parsers for your parsers
[03:02:48] <jaawerth> or uh what's it called now, I always forget
[03:03:05] <jaawerth> raku
[03:03:22] <LeoNerd> Lets make a concrete example.  In one project I happen to be using Syntax::Keyword::Defer, which adds syntax that looks like  defer { BLOCK }   so at the toplevel of my project currently I have a  .vimrc  that adds an extra  :let ... to set a vim variable that  syntax/perl.vim looks at to know "OK lets turn on that extra grammar rule"
[03:03:57] <LeoNerd> How would that work, via tree-sitter? Does the API that nvim <-...-> tree-sitter use to talk to each other, have *any* way to pass around some sort of configuration option to adjust the grammar rules?
[03:04:37] <jaawerth> couldn't you do that substitution on the AST level?
[03:04:50] <LeoNerd> What would you substitute it *from* ?
[03:05:10] <jaawerth> where do you substitute it from right now?
[03:05:13] <LeoNerd> Without that grammar rule turned on,   defer { BLOCK }  doesn't match any existing parse rules, so it's an error
[03:05:33] <LeoNerd> Right now, it enables a new  :hi region ...   rule in my syntax/perl.vim
[03:06:31] <clason[m]> not right now, no
[03:06:50] <clason[m]> you'd switch to different (or additional) queries 
[03:07:31] <clason[m]> (there's low-level functions for query management)
[03:08:03] <LeoNerd> As I've seen it so far though, those queries are things that look over the tree of nodes, once tree-sitter has already made them, yes?
[03:08:33] <jaawerth> yes. so if it's a parse error you'd certainly need some extension points on the parser level but, like, unless you're going hog-wild I imagine you'd only need to add few extension points for new syntactic forms to get some sort of AST you could manipulate. and granetd until that happens it would be a hard stop without some preprocessor hackery
[03:09:04] <LeoNerd> Plus, switching to another set entirely is going to get very cumbersome once you have maybe 10 different modules that could each be independently loaded; that's 1024 combinations here
[03:09:25] *** Joins: grml (~xkira@2001:8e0:2220:ae00:61:61ca:b90d:4150)
[03:09:52] <jaawerth> I doubt it's 1024 combinations of totally unique syntactic forms, though. unless you're building in entire custom DSL's, I gues
[03:09:55] <jaawerth> s
[03:10:16] <LeoNerd> No, but I mean if there's 10 different entirely separate optional things that all do their own isolated stuff...
[03:10:48] <jaawerth> right, at some point a generalized tool is going to be hard to stretch that far wihtout someone doing some heavy lifting *somewhere*
[03:10:50] <LeoNerd> You wouldn't want to have a  highlight.scm  highlight+A.scm  highlight+B.scm  highlight+A+B.scm  highlight+C.scm  ...
[03:12:03] <clason[m]> no, you can add them
[03:12:13] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[03:12:24] <LeoNerd> *If* (and it's a big if) it turned out you could collect up every possible option and it turned out they didn't have any mutual conflicts between them and it turned out that optimistically parsing as if every one of them was enabled didn't actually get anything wrong, then maybe you could do that at the tree-sitter level... and then worry about rejecting "that shuoldn't be turned on" results afterwards
[03:12:25] <clason[m]> so you load highlight.scm and A.scm and C.asm
[03:12:26] <clason[m]> to taste
[03:12:39] <LeoNerd> Ah; so *those* will combine at least. Well that's a start
[03:12:43] <clason[m]> but what you load currently can't be dynamic
[03:13:11] <LeoNerd> OK, so what facts can you use to decide what to load?
[03:13:44] <LeoNerd> And presumably it's constant for a given nvim instance, regardless of how many individual buffers it has open?
[03:13:46] <clason[m]> whatever you can handle
[03:13:48] <clason[m]> it's external to tree-sitter
[03:14:09] <clason[m]> the queries are (can be) per-buffer, I believe
[03:14:17] <clason[m]> but that's something to check
[03:14:33] <LeoNerd> Ahh... So that's not so bad
[03:14:40] <clason[m]> what you're asking for is far beyond what's currently implemented in any user-friendly way
[03:14:52] <clason[m]> mostly for lack of manpower
[03:15:42] <LeoNerd> Welllook, given I wrote all this for the actual perl parser *anyway*, doing it a second time for the editor doesn't seem like much extra effort ;)
[03:15:53] <LeoNerd> 90% of the effort is ussually in convincing other people it's the right thing to do
[03:16:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[03:16:16] <clason[m]> not in this case ;)
[03:17:03] <LeoNerd> .oO( That all said, neovim started because it turned out to be too hard to convince Bram to do the right thing, so... maybe the group is somewhat biased in that direction anyway )
[03:17:32] <clason[m]> yep. we do what we must, because we can.
[03:17:48] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[03:18:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:20:09] <LeoNerd> Mmm.. thinking earlier about what you said of the rules in the highlight.scm file being ordered, I imagine eventually you'd have to be able to make some of them conditional, because just loading multiple files isn't going to work
[03:20:12] <LeoNerd> They'd be in the wrong order
[03:21:00] <clason[m]> the queries shouldn't need to be conditional; that'd be on the wrong level
[03:21:13] <LeoNerd> Hmmm
[03:21:52] <clason[m]> except for the "a <foo> that is in position <bar> is X but a <foo> that is in position <baz> is Y" 
[03:22:01] <clason[m]> so the grammar should do the "heavy lifting"
[03:22:36] <LeoNerd> Right.. but as far as I can see they can't have options or configuration
[03:22:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[03:23:23] *** Quits: grml (~xkira@2001:8e0:2220:ae00:61:61ca:b90d:4150) (Quit: Konversation terminated!)
[03:23:35] <clason[m]> right
[03:23:49] <clason[m]> so they need to implement the full complexity
[03:24:05] <clason[m]> (which is hopefully not prohibitive, since C and compiled and whatnot)
[03:24:08] <LeoNerd> That's only even possible while there's no conflicts
[03:24:23] <LeoNerd> There could be two different modules that both try to claim the same keyword
[03:24:55] <clason[m]> yeah, but presumably the perl interpreter needs to be able to tell the difference
[03:25:19] <clason[m]> so there is a difference, which a custom scanner should be able to as well
[03:25:22] <LeoNerd> Sure; but in general that requires actually running code, which is why generally things like editors get told hints about it instead
[03:25:24] <clason[m]> (with enough work)
[03:25:55] <LeoNerd> So rather than running the code you just tell the editor "OK while working on this file, this keyword is from that module"
[03:26:11] <clason[m]> I appreciate that this is the end goal, but what you're describing is far beyond anything I've seen in a syntax file (tree-sitter or legacy vim)
[03:26:21] <clason[m]> (although VimTeX comes close)
[03:26:23] <LeoNerd> (which still technically breaks if the end-user tries to use two of them in the same file in different lexical scopes or something, but... yaknow, just don't do that because that also really confuses *people*)
[03:26:44] <LeoNerd> Uhreally? You've not looked at syntax/perl.vim in a while then
[03:26:46] <clason[m]> you can extend different languages
[03:26:48] <LeoNerd> It has plenty of configuration options
[03:27:07] <clason[m]> (like weebdev)
[03:27:25] <clason[m]> LeoNerd: I have not, and it sounds like it's also far from what you want (without your custom additions)
[03:28:02] <clason[m]> I mean, I know you can configure stuff, but what you describe sounds like another order of magnitude...
[03:30:33] *** Joins: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[03:30:38] <LeoNerd> OK so lets try to aim at a really concrete question again, to see if we can narrow this down
[03:30:44] *** evanextreme is now known as evanextreme[away
[03:31:07] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[03:31:16] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[03:33:05] <LeoNerd> In old legacy-style perl code, you can put a thing in parens after a function's name when you define it, like `sub f($$@) { ... }`, which gives a sortof weird pattern template thing called a "prototype", which does annoyingly weird stuff I won't go into. But it's annoying. In newer style code, that's where the function's parameters go. `sub add($x, $y) { ... }`
[03:33:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[03:34:03] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:34:07] <LeoNerd> Now the -real- perl parser uses a feature flag to know which it is, which is controlled by having written   use feature 'signatures';  or more likely  use v5.36;  or perhaps by use'ing some other module that indirectly went along and turned it on (because people do seem to love writing "here's my personal favourite bundle of pragmas" modules...)
[03:34:50] <LeoNerd> So in reality an editor like nvim probably wouldn't go off hunting *and executing* all the code in all those actual pragma modules, because that would be silly. Instead we'd have an option set - perhaps per-file or per-project directory or whatever - to say "hey, we're using signatures today"
[03:35:04] *** Joins: evanextreme (~evan@64.187.160.183)
[03:35:15] <clason[m]> Hmm...
[03:35:27] <LeoNerd> Now, somewhere somehow, the grammar running inside the tree-sitter is going to have to know what to do when it gets as far as that open-paren when it gets there. Does it follow the rules for prototypes, or for signatures/
[03:35:57] <clason[m]> yeah, that sounds like you need to write a custom scanner
[03:36:09] <LeoNerd> If it's a prototype it's literally just a pattern of a few weird symbols and nothing else is allowed; if it's a signature then it's a comma-separated list of `$var` or `$var = EXPR` for whatever real expression syntax is allowable
[03:36:27] <clason[m]> that will know what `use` are in a file and what that means for the grammar
[03:36:55] <clason[m]> but that's level-3 advanced parsing, and way above my paygrade
[03:36:55] <LeoNerd> OK sure, so a custom scanner is custom C code... that's fine. Maybe it yields one of two different weird internal token types for the open-paren to say "here's an open-paren for a prototype" vs "here's an open-paren for a signature", and the remaining grammar rules are all conditional on that. That could work fine
[03:37:09] <LeoNerd> How will _it_ know which of these to emit on a '(' ?
[03:37:33] <LeoNerd> I don't believe there's a configuration feedback mechanism for nvim to tell it "by the way, they're signatures"
[03:37:36] <clason[m]> I don't know, how does the Perl interpreter know which is valid and which is not?
[03:37:40] <LeoNerd> The feature flag
[03:37:52] <clason[m]> hm
[03:37:56] <LeoNerd> Which is set as a side-eeffect of actually running actual code
[03:38:17] <clason[m]> you'd probably use different filetypes
[03:38:20] <LeoNerd> BEGIN { feature->import("signatures") if (localtime)[6] == 2 }     # Hey, now it's only a signature on Tuesdays
[03:38:30] <clason[m]> like `perl.signatures` etc.
[03:38:37] <LeoNerd> Yeah that's what I was afraid of
[03:38:55] <clason[m]> sorry, but that's TeX-level of pain 
[03:39:01] <LeoNerd> Making a whole new filetype for *one* boolean decision does not scale up to order-of a dozen boolean decisions
[03:39:29] <clason[m]> good luck on ever parsing this correctly without a full interpreter parse
[03:39:36] <clason[m]> s/parse/run/
[03:39:44] <LeoNerd> The way that syntax/perl.vim handles this, is that the rules are conditional on a variable I just set in my .vimrc
[03:39:47] *** Parts: augrim[m] (~augrimmat@2001:470:69fc:105::7016) ()
[03:39:56] <LeoNerd> And I accept that "it won't be perfect", but it turns out within any one project, it's probably fine
[03:40:05] <clason[m]> yeah, I don't know
[03:40:05] *** Joins: guido_ (~weechat@host-87-11-11-159.retail.telecomitalia.it)
[03:40:11] <LeoNerd> And in practice it works great.
[03:40:27] <LeoNerd> It's the 10%-effort, 99%-correct solution that actually runs just fine
[03:40:39] <clason[m]> until it doesn't...
[03:41:21] <clason[m]> but, yeah, no idea how to do something as complex at that with the current infrastructure.
[03:41:34] <LeoNerd> Other things; there's like 5 different modules that provide try/catch-like syntax... plus newer perls have it properly in core now. Those would all *actually* conflict if we enable them all. But in practice it's fine - any one project is using *just one* of them, because if you ever tried to use two your code-reviewers would shoot you ;)
[03:41:47] <LeoNerd> So in practice in your toplevel .vimrc you just say which one you're using, and the syntax rules cope with it
[03:42:09] <LeoNerd> Because the syntax rules themselves can be sensitive to configuration provided by sibling files along with the source that they parse, to give them hints
[03:42:20] *** Quits: cotko (~cotko@155.pool85-49-78.dynamic.orange.es) (Quit: Konversation terminated!)
[03:42:28] <clason[m]> so you basically have a global "this is _my_ Perl" syntax file (dialect)
[03:42:38] *** Quits: evanextreme (~evan@64.187.160.183) (Read error: Connection reset by peer)
[03:42:38] <LeoNerd> Yeah.. or rather, one per project
[03:42:53] <LeoNerd> (and maybe it breaks if you ':view' a file from another project with different rules, but... eh..)
[03:43:36] *** Joins: evanextreme (~evan@64.187.160.183)
[03:43:43] <clason[m]> but you said "toplevel .vimrc"?
[03:44:14] <LeoNerd> <LeoNerd> BEGIN { feature->import("signatures") if (localtime)[6] == 2 }    <== is sortof at the core of why "Only perl can parse Perl", and why in general you can't be sure you've correctly parsed it without running it; but if you're only aiming at the 99% "good enough for syntax highlight" then a few helpful hints from a file in the project's root, generally suffices just fine
[03:44:24] <LeoNerd> Er, I meant the toplevel .vimrc in the project directory
[03:44:35] <clason[m]> ah
[03:44:41] <clason[m]> "project config"
[03:44:56] <LeoNerd> Yah
[03:44:56] <clason[m]> another thing Neovim doesn't really have at the moment
[03:45:19] <LeoNerd> Oh.. Yeah I wrote a plugin for that in vim like... 20 years ago and have been using it ever since.. it works in nvim just fine
[03:45:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[03:45:30] <clason[m]> sure
[03:45:36] <LeoNerd> It hunts down and loads extra `.vimrc` files as per .htaccess-style rules.. ;0
[03:45:49] <LeoNerd> Which, possibly dates when I first wrote it. Mmmm apache
[03:45:49] <clason[m]> shudder
[03:46:07] <LeoNerd> Yeah you need to put "stop here" files around the place whenever it might look at someone else's
[03:46:25] <nova> hey, party peoples. What is that library called that I think neovim provides (?) has that allows one to do filesystem stuffs in lua? I saw it years ago, but I forgetted
[03:47:06] <nova> is it the loop thing? vim.loop? I should inspect that. I haven't looked into that again ..
[03:47:13] <LeoNerd> But anyway, point being: sibling files in the project directory, somewhere somehow, can provide helpful hints on how to parse the particular language dialect. There just needs to be some data-transport mechanism between nvim and the tree-sitter grammar, that ultimately those configuration details can be conveyed
[03:47:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:47:41] <clason[m]> not a thing, as far as I am aware
[03:47:42] <LeoNerd> Icould imagine it being just as useful to other languages.. E.g. in a C project, by the way this is all C99, or C11, or whatever
[03:47:53] <clason[m]> and tree-sitter is strictly per file
[03:48:35] <LeoNerd> Being per-file is fine; it doesn't need to know the wider rules on how its externality came to those particular decisions
[03:48:39] <clason[m]> I think you need to write a more complex perl filetype plugin that does the conditional logic and cobbles together (generates on the fly) the right composite queries
[03:49:46] <LeoNerd> Mmm.. Well, first off I need to fix about a billion things wrong with the current one on even basic stuff ;)
[03:49:47] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[03:50:05] <LeoNerd> But at least I know I probably shouldn't try to *find* this configuration mechanism to handle the more advanced bits, because it doesn't exist
[03:50:06] <clason[m]> yeah, I'd focus on the basic stuff, too :D
[03:50:22] <clason[m]> indeed
[03:50:31] <LeoNerd> But I do wonder how most languages handle this.. I mean, even without -customisable- stuff, surely everyone still has the basic versioning problem..?
[03:50:36] <nova> ahh. it's called libuv, and vim.loop is what I was looking for. that's a lot of sweeping under the rug, but cool
[03:50:41] <clason[m]> nope
[03:50:43] <LeoNerd> Even a .c file could be ANSI, C89, C99, C11, C20, ...?
[03:51:01] <clason[m]> doesn't really make a difference, as far as I know
[03:51:02] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[03:51:10] <clason[m]> you just use the most permissive rules
[03:51:51] *** Joins: kmein (~weechat@user/kmein)
[03:51:58] <clason[m]> I don't think you ever have that much divergent syntax where the same token will have actually different meaning based on the dialect
[03:52:21] <clason[m]> (I mean, TeX can do it, but people know not to do that and expect any sort of syntax highlighting)
[03:54:05] <LeoNerd> Even in C I'm sure there's gotta be *something* somewhere between the 1970s ANSI and the C20
[03:54:57] <clason[m]> not as far as I know. there's additions (so old files don't highlight C20 properly), but nothing that makes a C20  syntax file choke on an ANSI file
[03:56:16] <LeoNerd> Hrmm... Perhaps not C. But I'm sure there'll be *a* language somewhere
[03:56:18] <LeoNerd> bash?
[03:56:46] <clason[m]> TeX
[03:57:33] <clason[m]> but as I said, people don't expect that to be properly highlighted if you use really custom macros to the extent that you describe.
[03:59:34] <clason[m]> but really, there's no (programming) language like Perl out there...
[04:01:20] <LeoNerd> Hrmmmm
[04:02:07] <clason[m]> :)
[04:03:40] <LeoNerd> I expect I'll still find some precedent somewhere for some kind of "dialect config" ability, and hopefully make the case for adding some kind of API into tree-sitter for it
[04:04:25] <clason[m]> if it's supported by tree-sitter, it's something we want to support
[04:08:03] *** evanextreme is now known as evanextreme[away
[04:08:03] *** Quits: evanextreme[away (~evan@64.187.160.183) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:12:24] *** Joins: mexen (uid495612@user/mexen)
[04:22:24] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:24:21] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[04:25:57] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[04:38:46] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[04:45:50] *** Joins: crashrep (~crashrep@user/crashrep)
[04:51:32] *** Quits: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de) (Quit: WeeChat 3.4)
[05:04:48] *** Joins: utraciss (~utraciss@2001:e68:443c:a5fa:ca01:debe:f29f:351f)
[05:05:06] *** Quits: co1umbarius (~columbari@i577BC68E.versanet.de) (Ping timeout: 252 seconds)
[05:07:02] *** Joins: co1umbarius (~columbari@mue-88-130-54-022.dsl.tropolys.de)
[05:07:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:13:54] *** Joins: Betal (~Betal@user/betal)
[05:21:00] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469)
[05:24:47] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:32:37] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:36:24] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 272 seconds)
[05:37:06] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[05:37:47] *** Joins: arch-angel (~quassel@user/arch-angel)
[05:39:57] *** Quits: emf (~emf@2620:10d:c090:400::5:d01b) (Ping timeout: 240 seconds)
[05:40:21] *** Joins: Glitch[m] (~beshrghal@2001:470:69fc:105::1:c093)
[05:41:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[05:46:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:53:03] *** Joins: rex_ (~rex@176-137-83-175.abo.bbox.fr)
[06:00:54] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:05:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[06:05:23] *** Joins: bindu_ (~bindu@user/bindu)
[06:07:22] *** bindu_ is now known as bindu
[06:20:54] *** Joins: a6a45081-2b83 (~aditya@2601:249:4380:4f10::fe26)
[06:25:00] *** Quits: a6a45081-2b83 (~aditya@2601:249:4380:4f10::fe26) (Ping timeout: 240 seconds)
[06:25:02] *** Joins: f33f046c-a02e (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[06:28:08] *** Quits: rex_ (~rex@176-137-83-175.abo.bbox.fr) (Quit: nyaa~)
[06:47:05] *** Quits: f33f046c-a02e (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[06:47:24] *** Quits: guido_ (~weechat@host-87-11-11-159.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[06:52:54] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Remote host closed the connection)
[06:58:02] *** Joins: emf (~emf@2620:10d:c090:400::5:6a6c)
[07:01:04] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[07:07:14] <romgrkRomGrk[m]> if I use `type=Debug`, does it build the dependencies (luajit) in debug mode as well?
[07:09:48] *** Joins: freaxjj[m] (~rootfreax@2001:470:69fc:105::1:c09d)
[07:12:43] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[07:12:58] *** Guest4829 is now known as polo
[07:13:40] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Client Quit)
[07:14:54] <lilgopher> does someone know why I'm not getting completion from lsp even tho it is in the sources config? https://github.com/dmartzol/nvim/blob/main/lua/dani/completion.lua#L60
[07:15:01] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[07:15:24] <lilgopher> autocompletion*
[07:16:43] *** Parts: freaxjj[m] (~rootfreax@2001:470:69fc:105::1:c09d) ()
[07:17:14] *** Quits: emf (~emf@2620:10d:c090:400::5:6a6c) (Quit: emf)
[07:19:00] *** Quits: nzeo (~nzeo@80.64.181.150) (Ping timeout: 272 seconds)
[07:19:24] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:81fd:dc83:46f:8469) (Ping timeout: 240 seconds)
[07:19:35] <lilgopher> I have no idea how to debug this
[07:45:32] <linrongbin16linr> Hi, I'm new to https://github.com/nvim-lualine/lualine.nvim, I write a lua function as component, the returned value could change while cursor moving.
[07:45:33] <linrongbin16linr> How could I trigger lualine update its status when I move cursor?
[07:45:33] <linrongbin16linr> Since current it seems there's no way to update lualine status
[07:49:30] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:59:11] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[08:04:36] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 272 seconds)
[08:09:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:12:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:08:12] <pmarcilus[m]> IIRC you need to create a function that return string and pass it to your prefer section
[09:09:01] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (Ping timeout: 240 seconds)
[09:09:37] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[09:09:53] <linrongbin16linr> I think I did, but it's not changed when I move cursor
[09:15:58] *** Joins: mexen (uid495612@user/mexen)
[09:34:05] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[09:39:25] *** Quits: trace987 (~trace@user/trace) (Remote host closed the connection)
[09:39:26] *** Joins: trace987 (~trace@user/trace)
[09:39:54] *** Quits: jangho (~jangho@121.165.8.28) (Read error: Connection reset by peer)
[09:40:00] *** Joins: jangho_p (~jangho@121.165.8.28)
[09:40:36] *** Quits: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu) (Ping timeout: 240 seconds)
[09:41:24] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 240 seconds)
[09:41:44] *** Joins: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu)
[09:42:05] *** Joins: cliluw (~cliluw@47.147.73.223)
[10:22:34] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[10:22:57] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[10:25:59] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[10:30:56] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:44:50] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[10:50:56] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:51:13] *** Joins: pvp7 (~pvp@p54ae91ab.dip0.t-ipconnect.de)
[10:51:42] *** Joins: nzeo (~nzeo@80.64.181.150)
[10:51:53] *** Quits: pvp (~pvp@p4ff13645.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:51:53] *** pvp7 is now known as pvp
[10:56:37] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[10:59:55] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Client Quit)
[11:12:20] *** Joins: NIko-11 (~kaka-55@61.142.103.108)
[11:16:03] *** Quits: guido (~weechat@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Read error: Connection reset by peer)
[11:16:21] *** Joins: guido (~weechat@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[11:19:48] *** Parts: NIko-11 (~kaka-55@61.142.103.108) (Leaving)
[11:22:27] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:37:15] *** Quits: fgrsnau (~fgrsnau@user/fgrsnau) (Ping timeout: 252 seconds)
[11:38:57] *** Quits: zanshin (~zanshin@user/zanshin) (Read error: Connection reset by peer)
[11:40:34] *** Joins: fgrsnau (~fgrsnau@user/fgrsnau)
[11:42:56] *** Joins: zanshin (~zanshin@user/zanshin)
[11:43:02] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:51:38] *** Joins: reductum (~reductum@cpe-72-134-86-174.natsow.res.rr.com)
[11:52:13] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[12:00:22] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[12:05:00] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Ping timeout: 240 seconds)
[12:09:45] *** gxldstein[m] is now known as gxld[m]
[12:12:46] *** Quits: xsteadfastx (~marv@94.31.99.245) (Quit: WeeChat 3.4)
[12:13:10] *** Joins: xsteadfastx (~marv@94.31.99.245)
[12:21:15] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[12:22:02] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[12:27:08] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:28:24] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:c9dd:301:29f7:88f5)
[12:30:09] *** Quits: Niels[m] (~nielswmat@2001:470:69fc:105::1:6b6a) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: sb[m]1 (~sbkdeorg@2001:470:69fc:105::1:2a32) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: choffee[m] (~johnchoff@2001:470:69fc:105::3f7d) (Quit: You have been kicked for being idle)
[12:30:11] *** Quits: oybek851[m] (~oybek851m@2001:470:69fc:105::1498) (Quit: You have been kicked for being idle)
[12:30:13] *** Quits: Cryptic[m] (~itscrypti@2001:470:69fc:105::1:657b) (Quit: You have been kicked for being idle)
[12:30:14] *** Quits: pellet[m] (~pellettch@2001:470:69fc:105::1:6b5e) (Quit: You have been kicked for being idle)
[12:30:14] *** Quits: gntikos[m] (~gntikosma@2001:470:69fc:105::e5c7) (Quit: You have been kicked for being idle)
[12:30:15] *** Quits: tizilogic[m] (~tizilogic@2001:470:69fc:105::d624) (Quit: You have been kicked for being idle)
[12:30:45] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[12:40:30] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[12:43:50] *** Joins: sliss (~sliss@109.136.165.60)
[12:46:31] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:49:20] *** Quits: va5c0 (~vasco.nun@91.110.154.119) (Quit: WeeChat 3.4)
[12:53:15] *** Joins: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net)
[12:54:54] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[12:56:00] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Client Quit)
[12:58:25] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 250 seconds)
[12:59:01] *** Joins: cliluw (~cliluw@47.147.73.223)
[13:06:28] *** Joins: cbus_ (~something@81-235-236-107-no92.tbcn.telia.com)
[13:07:04] *** Quits: cbus (~something@user/cbus) (Killed (NickServ (GHOST command used by cbus_!~something@81-235-236-107-no92.tbcn.telia.com)))
[13:07:06] *** Quits: cbus_ (~something@81-235-236-107-no92.tbcn.telia.com) (Client Quit)
[13:07:19] *** Joins: cbus (~something@user/cbus)
[13:07:51] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[13:08:11] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[13:11:25] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[13:11:43] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[13:11:44] *** Joins: sliss (~sliss@109.136.165.60)
[13:13:34] *** Quits: harryy (~harry@user/harryy) (Quit: WeeChat 3.4)
[13:16:00] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[13:16:48] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[13:16:50] *** Quits: sliss (~sliss@109.136.165.60) (Ping timeout: 272 seconds)
[13:17:47] *** Joins: sliss (~sliss@109.136.165.60)
[13:19:00] *** Quits: sliss (~sliss@109.136.165.60) (Client Quit)
[13:19:12] *** Joins: sliss (~sliss@109.136.165.60)
[13:21:21] *** Joins: sliss_ (~sliss@109.136.165.60)
[13:22:55] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:24:30] *** Quits: sliss (~sliss@109.136.165.60) (Ping timeout: 252 seconds)
[13:24:30] *** sliss_ is now known as sliss
[13:26:03] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[13:29:56] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[13:40:28] *** Joins: Firecatmon (~firecatmo@pa49-186-30-228.pa.vic.optusnet.com.au)
[13:44:15] *** Quits: just1602 (~weechat@user/just1602) (Read error: Connection reset by peer)
[13:44:21] *** Joins: just1602_ (~weechat@user/just1602)
[13:52:04] *** Joins: angelacrust (~angelacru@182.68.130.113)
[13:53:01] <angelacrust> Trying to suspend Neovim on Windows Terminal, but `Ctrl + Z` seems to freeze my console entirely to the point that I have to force close the terimal
[13:55:36] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Quit: ERR_NOWITTYQUITMESSAGE)
[13:57:13] <Rory[m]1> Pretty sure windows doesn't support that 
[13:57:26] <mort> is there an easy way to close buffers which aren't open in windows?
[14:07:19] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[14:07:32] *** Quits: Firecatmon (~firecatmo@pa49-186-30-228.pa.vic.optusnet.com.au) (Ping timeout: 250 seconds)
[14:07:41] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[14:15:46] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Quit: Ight Imma Head out)
[14:16:48] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[14:18:15] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:18:47] *** Joins: cottoneyejim (~cottoneye@2a01:261:36d:6300:ea6a:64ff:fe4f:b643)
[14:22:18] <moldorcoder7> is it possible to auto save as soom as a tab/buffer lost focus
[14:27:51] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[14:32:09] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Ping timeout: 252 seconds)
[14:32:40] *** Quits: lux0r- (~lux0r@65.56.68.34.bc.googleusercontent.com) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:37:28] *** Quits: just1602_ (~weechat@user/just1602) (Read error: Connection reset by peer)
[14:37:34] *** Joins: just1602 (~weechat@user/just1602)
[14:39:52] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[14:49:27] <p00f> there's a bufleave event i think
[14:49:40] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[15:01:12] *** Joins: jacky (~jacky@47.202.64.169)
[15:05:28] *** Joins: timmoctig (~timmoctig@31.187.110.131)
[15:08:22] *** Joins: towb (~bwot@user/towb)
[15:09:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:09:40] *** Quits: timmoctig (~timmoctig@31.187.110.131) (Client Quit)
[15:15:49] *** Joins: timmoctig (~timmoctig@31.187.110.131)
[15:16:55] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Quit: Ight Imma Head out)
[15:19:20] *** Quits: timmoctig (~timmoctig@31.187.110.131) (Client Quit)
[15:26:47] *** Quits: angelacrust (~angelacru@182.68.130.113) (Quit: Client closed)
[15:29:21] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[15:34:32] *** Quits: guido (~weechat@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.4)
[15:42:42] *** Quits: brw (~bas@haring.bas.sh) (Read error: Connection reset by peer)
[15:43:11] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[15:43:17] *** Joins: brw (~bas@haring.bas.sh)
[15:44:57] *** Quits: rookie101 (~rookie@165.232.121.13) (Quit: WeeChat 1.9.1)
[15:48:50] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[15:59:16] *** Joins: ham5urg_ (~ham5urg@84.46.13.255.dynamic-pppoe.dt.ipv4.wtnet.de)
[16:00:04] <ham5urg_> Is it possible to have a morton commander running in one of nvim splits?
[16:07:34] *** Joins: guido (~weechat@host-95-234-249-51.retail.telecomitalia.it)
[16:08:40] <ham5urg_> I started mc with :term mc inside a split. But how can I pass a f10 (quit) to mc
[16:10:03] *** Quits: cottoneyejim (~cottoneye@2a01:261:36d:6300:ea6a:64ff:fe4f:b643) (Ping timeout: 252 seconds)
[16:14:11] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:15:54] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[16:16:49] <ham5urg_> I can use mc if i press 'i' but 'esc' won't release the cursor.
[16:17:13] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[16:17:44] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Client Quit)
[16:18:55] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[16:20:22] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Client Quit)
[16:20:42] *** Joins: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de)
[16:27:58] *** Joins: arkurious (~arkurious@user/arkurious)
[16:29:38] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[16:34:53] <Bowuigi[m]> Esc doesn't release the cursor in terminal mode
[16:35:00] <Bowuigi[m]> :h :term
[16:37:49] *** Joins: timmoctig (~timmoctig@31.187.110.131)
[16:38:12] *** Quits: timmoctig (~timmoctig@31.187.110.131) (Client Quit)
[16:41:34] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Quit: Ight Imma Head out)
[16:43:14] <ham5urg_> Bowuigi[m], thanks. Is there a built in file browser in nvim? I would like to browse the files, do basic stuff (copy/rename/move/delete) and open files in one of the other splits.
[16:45:05] <Bowuigi[m]> Yes
[16:45:10] <Bowuigi[m]> It is called NetRW
[16:46:09] <Bowuigi[m]> If you :edit a dir or use :S/Vexplore it appears
[17:04:25] *** Quits: arch-angel (~quassel@user/arch-angel) (Quit: Sayonara!)
[17:12:01] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[17:12:45] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 252 seconds)
[17:13:49] *** Joins: xsteadfastx (~marv@94.31.99.245)
[17:14:07] *** Joins: henry40408 (~henry4040@175.181.177.116)
[17:18:34] *** Quits: henry40408 (~henry4040@175.181.177.116) (Read error: Connection reset by peer)
[17:19:39] *** Joins: henry40408 (~henry4040@175.181.177.116)
[17:27:04] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[17:29:45] *** Quits: utraciss (~utraciss@2001:e68:443c:a5fa:ca01:debe:f29f:351f) (Quit: ZNC 1.8.2 - https://znc.in)
[17:34:51] *** Quits: pepper (~pepper@user/pepper) (Read error: Connection reset by peer)
[17:34:58] *** Joins: aehu6ce8 (~aehu6ce8@31.187.110.131)
[17:40:15] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 252 seconds)
[17:41:29] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:47:51] <bloony> how do I take away the top line in neovim where the filename is listed?
[17:51:50] <clason[m]> bufline/tabline?
[17:52:14] <clason[m]> I don't have such a line, so something in your config must be enabling it explicitly.
[17:52:38] *** Quits: weather-beaten (~minhtrann@2001:19f0:5:352d:5400:3ff:fe22:36c5) (Ping timeout: 260 seconds)
[17:56:31] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[18:06:36] *** Quits: th3voic3 (th3voic3@user/th3voic3) (Ping timeout: 240 seconds)
[18:06:48] *** Joins: th3voic3 (~th3voic3@user/th3voic3)
[18:07:00] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: alerque (~caleb@2a01:4f8:150:6366::2) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[18:09:15] *** Joins: cottoneyejim (~cottoneye@2a01:261:36d:6300:ea6a:64ff:fe4f:b643)
[18:09:58] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[18:09:58] *** Joins: kaisyu (uid37155@id-37155.ilkley.irccloud.com)
[18:10:15] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[18:11:19] *** Joins: alerque (~caleb@asper.alerque.com)
[18:13:33] *** Quits: just1602 (~weechat@user/just1602) (Read error: Connection reset by peer)
[18:13:46] *** Joins: just1602 (~weechat@user/just1602)
[18:16:58] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[18:21:34] *** Joins: marcelarieMarcel (~marcelari@2001:470:69fc:105::526f)
[18:21:34] <marcelarieMarcel> hi, to check the output from a shell command in the lua config, do I use os.execute?
[18:22:16] <marcelarieMarcel> I want to check the value of `xdotool getmouselocation --shell | grep WINDOW` inside a lua theme
[18:22:25] <marcelarieMarcel> inside a lua theme config*
[18:22:32] <gpanders> os.execute returns the status code IIRC
[18:22:33] <gpanders> you want io.popen
[18:22:49] <gpanders> local output = io.popen("xdotool getmouselocation --shell | grep WINDOW"):read("*a")
[18:23:07] <marcelarieMarcel> wow thanks!
[18:23:26] <gpanders> hm wait, it looks like os.execute does return the program output too
[18:23:28] <marcelarieMarcel> does the nvim lib have an alternative command for that?
[18:23:43] <gpanders> print(os.execute("ls")) returns two values, the program output and the status code
[18:23:55] <gpanders> so you could also use that
[18:24:20] <gpanders> marcelarieMarcel: there is the system() function in Vimscript that you can use with vim.fn.system() from Lua
[18:24:50] <marcelarieMarcel> nice
[18:24:57] <gpanders> there is also vim.fn.jobstart() for asynchronous jobs, or vim.loop.spawn() to spawn a process using libuv
[18:24:57] <marcelarieMarcel> okk thanks!!
[18:25:00] <gpanders> there are a lot of options tbh
[18:25:12] <gpanders> my advice: if want you want is simply "run some command and give me the output", use vim.fn.system()
[18:25:19] <gpanders> s/want/what/
[18:25:47] <marcelarieMarcel> 👍 i will use that one then
[18:32:19] <bloony> clason: You where right. I had opt.showtabline = 2 set.. thanks. forgot to check back here :)
[18:33:55] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[18:34:58] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Max SendQ exceeded)
[18:35:23] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[18:35:24] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[18:39:41] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Max SendQ exceeded)
[18:39:54] <LeoNerd> clason[m]: A general question on the tree-sitter integration stuff. Taking, for example, the TSInclude group. What range of the input source is that expected to cover? I find for this perl code, it is covering the entire line of  `use Some::Module (params, here);`, from the u of `use` right up until the terminating semicolon. Which means if I try to highlight it, the whole lot goes
[18:40:06] <LeoNerd> There doesn't seem to be a highlight group for just the word `use` here alone
[18:41:05] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[18:42:21] <clason[m]> To be honest, that's a bit of a point of contention: how much coherence across languages should nvim-treesitter enforce across languages?
[18:42:50] <LeoNerd> Oh it's less that even. it's more: What should these TS* highlight groups represent? Are they entire statement regions, or are they individual little keywords?
[18:43:05] <clason[m]> But in this case, I'd say the group should cover the keyword, not the whole statement (since you'd want to highlight the filename/module etc. differently)
[18:43:06] <LeoNerd> Since I definitely do want to highlight -just- the keyword, I need something for that
[18:43:44] <clason[m]> These queries seem to be too greedy across the board (recall the discussion around the `if_statement`, which similarly is too broad).
[18:43:44] <LeoNerd> Also it's taken me a while to work out but I *think* I have a pangoterm bug, because randomly some text isn't bold
[18:44:03] <clason[m]> 😱
[18:44:05] <LeoNerd> But it comes and goes if I refresh, and my IRC client is doing similar things. as are manpages
[18:44:24] <LeoNerd> ... such is the trouble when I wrote so much of my usual toolstack... if there's a bug *somewhere* I'm not always sure at which level ;)
[18:45:05] <clason[m]> LeoNerd: Conceptually, they're not different from the built-in groups -- the goal is not to have completely a different highlighting than before!
[18:45:20] <LeoNerd> Mmmm
[18:45:40] <clason[m]> To be clear: I think the queries for Perl are wrong
[18:45:45] <LeoNerd> OK
[18:45:56] <clason[m]> (or at least leave a lot of room for improvement)
[18:46:46] <LeoNerd> Oh.. possible feature request for TS playground. I notice that when I click the mouse on items in the playground, it scrolls the real file to show the corresponding bit. But it doesn't work with cursor moves in the other direction. Whenever i move in the real document, the playground doesn't scroll in correspondence
[18:48:10] <clason[m]> yeah, there's no bidirectional scroll-lock
[18:48:15] <clason[m]> I'm not sure why not
[18:49:16] <LeoNerd> Hrmm.. so I'm looking at editing  queries/perl/highlights.scm  now. I'm not sure what I want to add/edit. Currently it has  [ (use_no_statement) ] @include
[18:49:19] <clason[m]> I don't think that's been requested, even -- care to open an issue about it?
[18:49:46] <LeoNerd> So that's associating the entire statement with @include. Whereas I -think- what I want to do is make just the "use" word inside that (Which is anonyous :( boo) to be
[18:50:03] <clason[m]> and regarding the weird numbers in TSHighlightCapturesUnderCursor: that's https://github.com/nvim-treesitter/playground/pull/61
[18:50:14] <clason[m]> LeoNerd: agreed.
[18:50:28] <clason[m]> anonymous is not necessarily bad, though! it's measurably faster
[18:50:32] <LeoNerd> So how do I match those?
[18:53:09] <clason[m]> same as with a named node, just without the parens
[18:53:25] <LeoNerd> [ "use" ] @keyword   would associate it everywhere, surely?
[18:53:38] <clason[m]> `(use_no_statement ("use" @include))` 
[18:53:44] <LeoNerd> Ooooh
[18:54:01] <clason[m]> modulo paren nesting errors -- I don't lisp
[18:54:19] <LeoNerd> [] and () just do the same thing. They're written differently just to guide the eye
[18:54:28] <clason[m]> I'd recommend looking at other queries for languages you know to get an idea what's doable
[18:54:32] <clason[m]> no, they're not
[18:54:32] <LeoNerd> So you can find it easier to see them paired u
[18:54:42] <LeoNerd> Well, in _actual_ lisps they are ;)
[18:54:52] <LeoNerd> I don't think this is an actual lisp here
[18:54:53] <clason[m]> [] group different nodes that should get the same capture
[18:55:05] <clason[m]> I wouldn't be able to tell :)
[18:55:38] <clason[m]> here's the documentation on queries (such as there is, which unfortunately is little...): https://tree-sitter.github.io/tree-sitter/using-parsers#pattern-matching-with-queries
[18:57:50] <LeoNerd> Hrmmm.... doesn't seem to be having any effect
[18:58:08] <clason[m]> yeah, takes a bit of practice to get it right
[18:58:17] <clason[m]> I need a lot of trial and error myself...
[18:58:51] <LeoNerd> Ohalso yes this verymuch isn't Scheme, this is just some text format that's inspired by S-expr
[19:00:04] <LeoNerd> Hrmm.. thinking more about it I don't know how much effort I want to put into fixing the queries, while the actual node tree is really wrong
[19:00:07] <clason[m]> again, wouldn't know :]
[19:00:10] <LeoNerd> It feels like pointless effort
[19:00:26] <clason[m]> just going by the `scm` extension and the metric fuckton of parens
[19:00:54] <clason[m]> not pointless since you're learning the query language
[19:00:56] <LeoNerd> Oh it's not a bad file extension, because it means highlighting/folding probably gets it justabout right
[19:01:17] <clason[m]> and some of these may well survive any parser fixes (or only need minimal adjustment)
[19:01:31] <LeoNerd> About half of the node names are just -wrong-
[19:02:06] <LeoNerd> E.g. for some reason the tree-sitter-perl author seems to think that `use constant` and `use parent` deserve special treatment. They're just normal modules... there's nothing weird about them
[19:02:19] <LeoNerd> So use_constant_statement and use_parent_statement  can go
[19:04:18] <clason[m]> I know nothing about the parser author, but I'd put money on you knowing more about Perl than they do.
[19:04:24] *** Quits: va5c0 (~vasco.nun@50.0.208.46.dyn.plus.net) (Ping timeout: 252 seconds)
[19:06:12] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Ping timeout: 240 seconds)
[19:06:21] *** Joins: va5c0 (~vasco.nun@91.110.154.119)
[19:06:24] *** Joins: saltsucker[m] (~saltsucke@2001:470:69fc:105::1:c10c)
[19:06:35] *** Quits: jacky (~jacky@47.202.64.169) (Remote host closed the connection)
[19:07:06] <clason[m]> Again, I'd expect suggestions for improvements to be welcome.
[19:07:08] *** Joins: henry40408 (~henry4040@175.181.177.116)
[19:07:25] *** Joins: rexf (~rexf@176-137-83-175.abo.bbox.fr)
[19:08:04] <LeoNerd> Just a matter of waiting on a reply to my first PR really
[19:08:19] <LeoNerd> https://github.com/ganezdragon/tree-sitter-perl/pull/12
[19:08:24] <LeoNerd> Shall see how that goes forward
[19:09:24] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 240 seconds)
[19:09:27] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:09:43] *** Quits: rexf (~rexf@176-137-83-175.abo.bbox.fr) (Client Quit)
[19:12:57] *** Quits: aehu6ce8 (~aehu6ce8@31.187.110.131) (Quit: aehu6ce8)
[19:14:57] <LeoNerd> So,.. ideally speaking: how should something like an `if` statement look, as a resulting tree? Should the `if` keyword itself have some sort of node name?
[19:15:48] <LeoNerd> I guess the whole -thing- should be a "conditional statement", consisting primarily of the controlling expression and the body... but what of the miscellanous bits - the `if`, and also the ()s of the expr and the {}s of the block?
[19:15:51] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[19:15:53] <clason[m]> not necessarily
[19:16:02] <clason[m]> many grammars just use an anonymous node, as far as I can tell
[19:16:18] <LeoNerd> What I'm thinking is that -if- every keyword claimed to be a (keyword) then all you'd need to do is    (keyword) @keyword   and that would be it
[19:16:29] <clason[m]> even the one for C which is written by the tree-sitter dev
[19:16:32] <LeoNerd> Otherwise your highlights.scm is forever having to chase knowledge of all the words that are keywords
[19:16:45] <LeoNerd> Which feels nonoptimal
[19:16:49] <clason[m]> well, in this case it'd be `@conditional`
[19:16:52] <LeoNerd> (There's over 400 "keywords" in Perl)
[19:17:03] <clason[m]> yes, the highlights is very language-specific
[19:17:18] <clason[m]> "while" and "for" would be `@repeat`
[19:17:22] <LeoNerd> Ohsure it's specific, but perhaps it doesn't need to have -that- detailed level of knowledge
[19:17:44] <clason[m]> well, it wants to have that detailed knowledge...
[19:18:16] <clason[m]> I think the c highlights are a good first example
[19:18:33] <LeoNerd> OK, so... more detail: what -exactly- is @conditional ? Is it the entire statement/block, or is it just the `if` keyword itself?
[19:18:52] <clason[m]> no, just the "if" keyword (I thought we'd settled that already)
[19:19:00] <LeoNerd> Ahright
[19:19:28] <clason[m]> as I said, the Perl queries seem to have been ... maybe not "shoddy", but quickly done
[19:20:05] <clason[m]> they're definitely not consistent with the other queries (of which the C queries are probably the prime model)
[19:20:05] <LeoNerd> Hrm.. I see. Actually most of the others (c, java) do indeed have a long list of keywords... 
[19:20:13] <clason[m]> so I would go to those for inspiration
[19:20:15] <LeoNerd> Righty. I guess I'll adjust it for that
[19:20:22] <clason[m]> yes. It Is The Way.
[19:20:37] <clason[m]> (not the best way, necessarily, but The Way.)
[19:25:57] *** Quits: loofy (~loofy@user/loofy) (Ping timeout: 240 seconds)
[19:26:55] <LeoNerd> Hrm, some sort of error in my .scm file but I can't get vim to print it properly, it shows in red across the screen and messes up the display
[19:27:14] *** Joins: fhof[m] (~fhofmatri@2001:470:69fc:105::1:c114)
[19:27:23] <LeoNerd> treesitter/highlighter: Error executing lua: /usr/share/nvim/runtime/lua/vim/treesitter/query.lua:161: query: invalid node type at  ... is as far as Ihave
[19:27:43] <clason[m]> `:checkhealth nvim-treesitter` should give the full error
[19:27:49] <LeoNerd> Oh hangon does it know the stringy names of all the anonymous nodes?
[19:28:07] *** Joins: loofy (~loofy@user/loofy)
[19:28:17] <clason[m]> wdym?
[19:28:44] <LeoNerd> [ "wibbly" "splot" "fidget" ] @keyword    <-- would that upset it?
[19:28:50] *** Joins: jacky (~jacky@47.202.64.169)
[19:28:50] <LeoNerd> Those are just some madeup string names
[19:29:54] <clason[m]> no, that'd be correct 
[19:30:26] <LeoNerd> I was just going to save myself time and list -aaaalll- the keywords ahead of time even though the treesitter grammar won't emit most of them yet
[19:30:30] <LeoNerd> but it seems I can't :(
[19:30:43] <fhof[m]> Morning, I got a question. I am using clangd + lsp for c/cpp. For some reason vim.lua.buf.implementation() does not do anything - no quickfix window appears. The LspInfo, and .resolved_capabilities don't give me anything to go of. Any idea where to look or how to debug further?
[19:31:45] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:32:46] <clason[m]> yep, sorry :/
[19:34:30] <LeoNerd> Hrmm.. well, no matter. It'll just bit a bit slow for now
[19:34:53] <LeoNerd> Oh.. another vague question: Is there some example in another file somewhere, where I can be inspired on how to handle POD?
[19:35:15] <LeoNerd> POD is the inline documentation format.. conceptually similar to something like javadoc or markdown.. it lives inline in the file
[19:35:17] <clason[m]> POD?
[19:35:26] <clason[m]> look at phpdoc
[19:35:28] <LeoNerd> So it wants things like title/headings, bold/italics, etc...
[19:35:52] <clason[m]> executive summary: you'd write a different parser for that format, and then inject the doc language
[19:36:04] <LeoNerd> Mmm...
[19:38:41] <max397[m]> can you somehow get `:messages` into a buffer?
[19:38:49] <max397[m]> so you can copy it in neovim?
[19:40:13] <Access[m]> Hey, I have just make a csv plugin
[19:41:34] <Access[m]> Because when csv.vim meet big file , it will block the process of the neovim ,so I make a new plugin
[19:42:14] <hab[m]> Hey, I can't seem to find the function related to scrolling a buffer, could someone point me to it pls ? Also, what is the best way to go about finding functions ? I tried looking in :help and with :helpgrep, but no luck.
[19:42:40] <Access[m]> Do you have interest in it? It is my first neovim plugin
[19:42:41] <Access[m]> https://github.com/chen244/csv-tools.lua
[19:43:44] *** Joins: crashrep (~crashrep@user/crashrep)
[19:43:49] <p00f> Access[m]: nice!
[19:45:50] <ii14[m]> hab[m]: `:h functions`
[19:46:01] <nvim-bot[m]> * [`functions`](https://neovim.io/doc/user/eval.html#functions) in *eval.txt*
[19:46:26] <hab[m]> Ah, perfect thanks
[19:47:15] <ii14[m]> there is no list for api functions formatted like that, but also `:h api`
[19:47:18] <nvim-bot[m]> * [`api`](https://neovim.io/doc/user/api.html#api) in *api.txt*
[19:48:08] <LeoNerd> I see the highlights.scm file assigns things to, for example, @keyword.function. Is there a full list of all of those somewhere I can find, or can I just make them up?
[19:49:13] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:50:01] <ii14[m]> not 100% sure, but I think you can scroll with `winrestview()` function? you can also do it with `<C-Y>` and `<C-E>` normal mode command, but that depends on what exactly do you want to do
[19:50:06] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[19:52:58] *** Joins: cren (cren@tilde.team)
[19:54:55] *** Joins: angelacrust (~angelacru@182.68.130.113)
[19:55:08] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:55:22] <angelacrust> How can I use the filetype as a boolean check against conditions?
[19:56:13] <clason[m]> <LeoNerd> "I see the highlights.scm file..." <- yes, didn't I link them for you yesterday?
[19:56:34] <clason[m]> https://github.com/nvim-treesitter/nvim-treesitter/blob/master/CONTRIBUTING.md#highlights
[19:56:44] <LeoNerd> Oh possibly but you've said a huge amount and I may have forgotten some thing ;)
[19:56:46] <LeoNerd> aha
[19:56:47] <clason[m]> note that this list is enforced by CI
[19:56:53] <clason[m]> fair ;)
[19:57:01] *** Joins: pepper (~pepper@user/pepper)
[19:57:16] <LeoNerd> Ahgood.. a nice list there
[19:58:04] <clason[m]> there's a PR for "atom-style" fallbacks
[19:58:46] <clason[m]> so you could use `@function.foo`, and if that is not mapped to a highlight group, it would fall back to `@function`
[19:58:58] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[19:59:12] <LeoNerd> Ooooh lots of @text stuff looks handy for POD
[19:59:22] <LeoNerd> It'd be lovely to highlight  This text is B<bold>  using actual @text.bold
[19:59:23] <clason[m]> so then we could only enforce the "top-level" captures and allow more flexibility for grammars
[19:59:25] *** Joins: Betal (~Betal@user/betal)
[19:59:31] <LeoNerd> Er.. @text.strong
[19:59:37] <clason[m]> yep, it's driven by markdown (and latex :P)
[20:01:36] *** Quits: jacky (~jacky@47.202.64.169) (Ping timeout: 252 seconds)
[20:06:48] <LeoNerd> Hrmm... Looking over that list I don't see a good category for BEGIN/INIT/END... those are "phaser blocks"; containers of code that run at special times
[20:07:09] <LeoNerd> They're sortof a bit like function definitions
[20:08:01] <clason[m]> if in doubt, just use `@keyword`
[20:08:24] <LeoNerd> Eh; maybe. A bit boring. I wanted them to stand out as looking a bit different
[20:10:27] <ii14[m]> <angelacrust> "How can I use the filetype as..." <- what do you mean? like `&filetype == "lua"` or `vim.bo.filetype == "lua"`?
[20:10:42] <max397[m]> does anyone know what's the key for highlighting guisp with `vim.api.nvim_set_hl`?
[20:10:49] <max397[m]> it isn't in the helpfiles and there are no tests for it
[20:11:16] <angelacrust> Do a certain action if the filetype is A, else perform something else
[20:12:49] <clason[m]> LeoNerd: That's what the fallback captures are for :)
[20:13:18] <clason[m]> Then you could do `@keyword.phaser` and locally make this bold _and_ purple
[20:14:13] <LeoNerd> Right but I can't do those *yet*,... can I?
[20:16:21] *** Joins: SirJitsu1 (~SirJitsu@162-231-111-175.lightspeed.livnmi.sbcglobal.net)
[20:16:32] <clason[m]> nope, but I really want to get it in sooner rather than later 
[20:16:37] <LeoNerd> Yeah it would be nice
[20:18:47] <ii14[m]> <angelacrust> "Do a certain action if the..." <- you want lua or vim script?
[20:19:00] *** Quits: kaisyu (uid37155@id-37155.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:19:04] <angelacrust> vim script
[20:19:09] * ii14[m] sent a lua code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/d2bd6ab70b4dcecf2ce9fee3a03333f784c644ee
[20:19:23] * ii14[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/40357636970c0c84d5bacfbe15538a97b6fa1a45
[20:19:52] <angelacrust> thank you! ii14
[20:20:30] *** Joins: jacky (~jacky@47.202.64.169)
[20:21:33] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[20:24:36] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3)
[20:25:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:35:31] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:37:26] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[20:47:20] <LeoNerd> clason[m]: Must I do something extra to make folds work? I've created a  folds.scm  file and put some @fold things in it, but it isn't having an effect. Perhaps I need to turn it on somehow?
[20:47:45] <clason[m]> yes, you need to enable it
[20:48:01] <clason[m]> https://github.com/nvim-treesitter/nvim-treesitter#folding
[20:48:38] <LeoNerd> Aha!
[20:48:50] <mjlbach[m]> theHamsta (Stephan Seitz): is the main thing y'all wanted foldexpr per buffer not window?
[20:49:06] <mjlbach[m]> I think that came up on the lsp foldexpr pr as well
[20:49:15] <clason[m]> Nah, that was just me being pedantic in the Readme
[20:49:38] <mjlbach[m]> You're not talking to me right?
[20:50:09] <clason[m]> Well, if you were referring to the text on foldexpr that I just linked, yes
[20:50:14] <mjlbach[m]> because that only jogged my memory and I realized I didn't check if we had a tracking issue when that came up on the lsp foldexpr PR
[20:55:31] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:56:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:57:53] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[20:58:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:01:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:03:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:08:45] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:12:24] *** Quits: guido (~weechat@host-95-234-249-51.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[21:13:43] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Ping timeout: 250 seconds)
[21:14:43] *** Quits: bubbler (~bubbler@2a02:810d:8cc0:3fa0:aa5f:d6e1:a786:a3c) (Quit: WeeChat 3.4)
[21:14:56] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[21:16:08] <angelacrust> ii14[m] It wasn't working so I added `filetype detect` above that block, and now it's working
[21:18:09] <dekeract> Does anyone know why ":Format" and standard nvim indentation might be different?
[21:18:23] <dekeract> :Format uses one unit of indentation while = uses 2
[21:18:37] *** Joins: bubbler (~bubbler@2a02:810d:8cc0:3fa0:aa5f:d6e1:a786:a3c)
[21:18:40] <dekeract> And yes I've RTFM and I have no idea
[21:19:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:20:31] <jaawerth[m]> :Format is a custom command, so it would depend on what's defining it and how
[21:20:43] <dekeract> It call's lsp to format
[21:20:51] <dekeract> s/call's/calls/
[21:24:11] <jaawerth[m]> hmm well, I imagine it might vary by config/server whether a given formatter would make use of shiftwidth and such in any way vs just using the external formatter, since it'd make more sense in some langs than others, so I would probably take a look at the lspconfig for the language or relevant settings
[21:24:12] <dekeract> Ok, better formulated question: how do I tell nvim to use whatever indentation lsp suggests?
[21:25:37] <jaawerth[m]> you could set indentexpr
[21:26:04] <jaawerth[m]> I don't bother and just use formatexpr via gq when I want to pass things externally.
[21:26:16] <jaawerth[m]> or formatprg etc)
[21:27:05] *** Joins: guido (~weechat@host-95-234-249-51.retail.telecomitalia.it)
[21:30:23] <dekeract> Hmm, setting indent = true in TreeSitter settings seems to have worked
[21:30:31] <dekeract> No idea why though :D
[21:33:48] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[21:36:12] *** Quits: sliss (~sliss@109.136.165.60) (Read error: Connection reset by peer)
[21:36:19] *** Joins: sliss (~sliss@109.136.165.60)
[21:37:12] <dekeract> Ok, it doesn't really work
[21:37:12] <dekeract> FFS
[21:37:22] *** Quits: sliss (~sliss@109.136.165.60) (Read error: Connection reset by peer)
[21:37:40] *** Joins: sliss (~sliss@109.136.165.60)
[21:38:48] *** Quits: sliss (~sliss@109.136.165.60) (Read error: Connection reset by peer)
[21:39:03] *** Joins: sliss (~sliss@109.136.165.60)
[21:40:20] *** Quits: mort (~mort@188.166.114.29) (Quit: The Lounge - https://thelounge.chat)
[21:40:21] <mjlbach[m]> We send tabSize and insertSpaces to via request to the server
[21:40:41] * mjlbach[m] sent a lua code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/6f06ae0ee111d891defccb7426cd2f8fc2cb7592
[21:40:46] <mjlbach[m]> If it doesn't respect those settings, that's on the server
[21:40:52] *** Joins: mort (~mort@188.166.114.29)
[21:41:22] <mjlbach[m]> And if it doesn't return the correct ranges for the substitution, that's also on the server
[21:41:29] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.4)
[21:41:37] <mjlbach[m]> "FFS" will not get you very far here
[21:43:44] <dekeract> mjlbach[m]: If you had a tight deadline coming, and your trusty tool suddenly started acting wonky, you'd be frustrated as well
[21:44:48] <mjlbach[m]> That's really a poor excuse to be rude
[21:44:49] <clason[m]> Yes, and if you'd ask other people to help you fix it, you'd not try to frustrate them.
[21:45:26] <mjlbach[m]> I can't imagine what deadline is held up by formatting indentation being wrong, and also directing frustration at a client that is likely not the issue
[21:45:45] <mjlbach[m]> Formatting works fine for me, indentation and all, on the servers I use
[21:45:49] *** Quits: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de) (Quit: WeeChat 3.4)
[21:47:06] <Friithian> is a ``ffs'' really that rude? They were not directing it at you, but the situation they're in, give them some slack
[21:48:12] *** Joins: SWISSMANN (~SWISSMANN@2001-4dd2-5e3c-0-df30-62d1-7594-7534.ipv6dyn.netcologne.de)
[21:48:12] <dekeract> Friithian: Glad somebody undestands that wasn't directed at contributors and people who were answering my question
[21:48:27] <dekeract> It's hard to convey tone in written form
[21:48:39] <Friithian> I've been in similar situations, shit's infuriating sometimes, life gets ya hard
[21:51:24] *** Joins: crashrep (~crashrep@user/crashrep)
[21:52:30] *** Quits: vladan (~vladan@51.15.143.225) (Quit: The Lounge - https://thelounge.github.io)
[21:53:27] *** Joins: vladan (~vladan@51.15.143.225)
[21:55:35] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[21:55:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:05:08] *** Joins: crashrep (~crashrep@user/crashrep)
[22:08:45] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Ping timeout: 250 seconds)
[22:10:25] *** Quits: angelacrust (~angelacru@182.68.130.113) (Quit: Client closed)
[22:11:55] <JulianJulianBerm> weird random question -- has anyone considered whether neovim should have disk size-related API?
[22:12:07] <JulianJulianBerm> I have a number of settings in my init.vim that really depend on whether the machine they're running on has lots of disk space or not
[22:12:17] <JulianJulianBerm> (e.g. whether I tell tree-sitter to install all maintained packages or just a shortlist)
[22:13:00] *** Quits: jacky (~jacky@47.202.64.169) (Ping timeout: 240 seconds)
[22:13:08] <JulianJulianBerm> I could of course shell out to `df`, or reimplement the OS-specific native way to get that info (hence the question) but some of these operations are already slow (like treesitter startup) so I'm loathe to slow them even further
[22:13:30] <clason[m]> yeah, only install parsers you actually need
[22:13:52] <sunjonSenghanBri> Vim's managed a long while without such a function
[22:13:54] <clason[m]> I'm starting to think that the "maintained" option was not a great idea.
[22:14:16] *** Joins: Betal (~Betal@user/betal)
[22:14:20] <JulianJulianBerm> it's still 2 lists -- on a laptop I want a bigger set of things than on android where I'm not going to author rst (prose) files
[22:14:24] <JulianJulianBerm> so ignore the "maintained" bit :)
[22:14:28] <sunjonSenghanBri> I think that's the realm of a provisioning tool
[22:14:39] <Friithian> just kepe writing to the disk until you get an error, then delete the stuff you wrote. That'll give you how much is left
[22:14:50] <JulianJulianBerm> ha
[22:15:57] <JulianJulianBerm> fine, I'll go with hacks instead
[22:17:14] <clason[m]> I'd look at libuv
[22:17:24] <clason[m]> (which is exposed as `vim.loop` via Lua)
[22:17:56] *** Joins: jacky (~jacky@47.202.64.169)
[22:18:01] <clason[m]> I'm sure they have useful functions (although it may be easier to shell out to `df` or some similar tool)
[22:21:24] <JulianJulianBerm> oh! derp, good idea -- I thought of that for opening the relevant files, but it appears libuv has `statfs` which I think may be good enough
[22:23:03] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:21] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[22:32:38] <clason[m]> <LeoNerd> "Right but I can't do those *yet*..." <- Now you can (use `@keyword.phaser` style subcaptures) :)
[22:34:17] <LeoNerd> Now being ... you fixed something?
[22:39:54] *** Quits: sliss (~sliss@109.136.165.60) (Read error: Connection reset by peer)
[22:40:10] *** Joins: sliss (~sliss@109.136.165.60)
[22:43:30] <max397[m]> can I somehow print out from where the function I'm currently inside was called?
[22:43:55] <ii14[m]> debug module
[22:44:03] <ii14[m]> http://www.lua.org/manual/5.1/manual.html
[22:44:06] <ii14[m]> debug.getinfo
[22:44:11] *** Quits: rektide (~rektide@eldergods.com) (Ping timeout: 256 seconds)
[22:44:28] <max397[m]> thank you
[22:44:57] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 252 seconds)
[22:45:54] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[22:51:14] *** Quits: guido (~weechat@host-95-234-249-51.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[22:51:26] *** Joins: ublx (~ublx@user/ublx)
[22:53:49] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3)
[22:59:37] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[23:00:35] *** Joins: sliss (~sliss@109.136.165.60)
[23:03:22] <clason[m]> <LeoNerd> "Now being ... you fixed somethin..." <- I just merged the PR (to Neovim), the actual work was done by theHamsta
[23:05:43] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:50f5:7256:bb18:3ed3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:28] <LeoNerd> Mmm nice
[23:07:35] <LeoNerd> I'll update things and try it again after dinner
[23:16:08] *** Joins: Guest49 (~Guest49@188.147.102.42.nat.umts.dynamic.t-mobile.pl)
[23:16:20] *** Parts: Guest49 (~Guest49@188.147.102.42.nat.umts.dynamic.t-mobile.pl) ()
[23:23:33] *** Quits: jacky (~jacky@47.202.64.169) (Ping timeout: 256 seconds)
[23:24:41] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[23:29:22] <janschneider[m]> I'm looking for a lua-formatter ...but I got the feeling its kinda hard to set up a lua-lsp.  Good suggestions are welcome ;-)
[23:31:42] <clason[m]> Stylua seems to be the goto option these days.
[23:31:53] <bitblt[m]> hello
[23:32:19] *** Joins: jacky (~jacky@47.202.64.169)
[23:32:23] <bitblt[m]> is there any nvim lua api to avoid cmd [[ hilight ....
[23:32:24] <clason[m]> It's not very configurable though, but that's a feature 
[23:32:30] <clason[m]> Yes
[23:32:35] <mjlbach[m]> janschneider[m]: it's not hard to set up lua-language-server
[23:32:41] <clason[m]> But only on master
[23:32:48] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[23:33:23] <clason[m]> mjlbach[m]: But formatting was only added very recently, and I don't think it's as good as stylua
[23:33:26] <clason[m]> Yet.
[23:33:43] <mjlbach[m]> Right, not responding to that part :) 
[23:33:55] <mjlbach[m]> It's also very quick to build from master
[23:34:01] <clason[m]> bitblt[m]: vim.api.nvim_set_hl
[23:34:12] <clason[m]> With namespace 0
[23:35:53] <bitblt[m]> Ah thank you!
[23:36:01] <janschneider[m]> mjlbach[m]: Do you mean this one https://github.com/sumneko/lua-language-server?
[23:36:19] <mjlbach[m]> yup
[23:36:24] <clason[m]> Yep
[23:44:09] <dundargoc> <mjlbach[m]> "it's not hard to set up lua-..." <- well ackshually
[23:44:10] <janschneider[m]> oh wait, I found the `brew install lua-language-server`
[23:44:28] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (Ping timeout: 272 seconds)
[23:44:30] <mjlbach[m]> yup
[23:44:46] <mjlbach[m]> then `require('lspconfig').sumneko_lua.setup {}` and you're done
[23:44:55] <dundargoc> Stop the cap
[23:45:26] <janschneider[m]> I first thought I had to deal with the vs-plugin 
[23:46:02] <mjlbach[m]> No, if you read the entry in server_configurations.md it also points ou to the installation instructions if you wanted to do so from source
[23:46:46] <janschneider[m]> No, its like maintaining it with a plugin manager is much better
[23:47:12] <mjlbach[m]> Hmm?
[23:47:54] <dundargoc> You need to set logpath and metadata path for sumneko as well.
[23:48:43] <mjlbach[m]> ?
[23:50:08] <janschneider[m]> sorry, didnt mean maintain ...I meant 'keeping it up to date'. I have to check it out, but I guess the lua-language-server doesn't have a autoupdate
[23:50:16] <mjlbach[m]> Ah, I see
[23:50:47] <mjlbach[m]> Yes I prefer using my OS package manager, it keeps things up to date (including system dependencies) and has some reasonable scrutiny on updates
[23:51:54] <janschneider[m]> which os do you use?
[23:53:41] <janschneider[m]> arch?
[23:53:43] *** Joins: elves-upstate (~elves-ups@129-2-180-38.wireless.umd.edu)
[23:55:03] <mjlbach[m]> linux
[23:55:12] <mjlbach[m]> and mac
[23:55:14] <mjlbach[m]> and windows I guess
[23:57:24] *** Quits: veesh (~veesh@89.237.109.60) (Ping timeout: 240 seconds)
[23:57:42] <LeoNerd> Hah. Much poking at parser grammers, or nvim highlighting, or even poking at libvterm / pangoterm.. It turns out, no. The reason my italics or bold are going missing appears to be a bug in pango *itself*:
[23:57:44] <LeoNerd> https://gitlab.gnome.org/GNOME/pango/-/issues/666
[23:57:49] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:58:23] <clason[m]> No, but Brew is fairly up-to-date
[23:58:37] *** Joins: veesh (~veesh@89.237.102.212)
[23:58:39] <clason[m]> I'd recommend doing that
[23:58:55] *** Joins: gpanders_ (be60a9b05a@user/gpanders)
