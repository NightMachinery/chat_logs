[00:01:00] <fizzie> If you just want to check for compile errors, you *can* compile packages without having an executable that uses them. Of course it wouldn't be testing anything else (like the shape of the exported interface, let alone the functionality of it).
[00:02:05] *** Joins: fikran (~fikran@user/fikran)
[00:04:38] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:c08b:a00f:42e0:a31d)
[00:05:16] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:f5d2:86ea:63ad:b952)
[00:05:37] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:f5d2:86ea:63ad:b952) (Client Quit)
[00:05:49] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:f5d2:86ea:63ad:b952)
[00:06:44] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[00:09:05] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:c08b:a00f:42e0:a31d) (Ping timeout: 256 seconds)
[00:10:08] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[00:12:21] <ska> https://go.dev/play/p/dOieMIo4Ph6  How do I stop my http service using stopChan as in other routines?
[00:12:48] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[00:14:15] <ska> I thought the http server was long running and wouldn't allow the stopChan from becoming visible.
[00:14:26] <b0nn> If you want multiple readers to react to a single signal you have a few options, fan-out, sync.Condition, or (hacky) closing the stopChan and everyone recognising that a closed stopChan means that they should stop
[00:14:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[00:15:24] <fizzie> If you use a `http.Server` object rather than calling `http.ListenAndServe`, the object will have two methods (Close and Shutdown) for different kinds of graceful stops.
[00:15:46] <j416> ska: ListenAndServe never returns, unless there is an error
[00:15:55] <j416> see http package for info on how to shut down a server
[00:16:03] <j416> or, read what fizzie just wrote >.>
[00:16:28] <ska> +1 ty.
[00:16:57] <fizzie> Well, see the package still for the semantics of those two methods. :)
[00:17:11] <fizzie> (`http.ListenAndServe(addr, handler)` is exactly the equivalent of `&http.Server{Addr: addr, Handler: handler}.ListenAndServe()`, except of course you don't get the reference you could call Close and/or Shutdown on.)
[00:17:35] <j416> an alternative might be to just start the server in the main thread
[00:17:54] <j416> graceful shutdown is neat but perhaps not needed in all cases
[00:23:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[00:26:57] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 240 seconds)
[00:27:33] *** Joins: Chris12 (~Chris12@213.55.225.68)
[00:31:39] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:32:58] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[00:37:44] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:39:26] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:c08b:a00f:42e0:a31d)
[00:42:39] *** Joins: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com)
[00:44:34] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:c08b:a00f:42e0:a31d) (Ping timeout: 250 seconds)
[00:46:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:47:51] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[00:49:43] *** Joins: rcernin (~rcernin@124.190.132.36)
[00:50:02] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 240 seconds)
[00:52:06] *** Joins: SuperLag (~akulbe@user/superlag)
[00:54:31] *** Quits: Chris12 (~Chris12@213.55.225.68) (Quit: Client closed)
[00:55:14] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[00:57:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com)
[01:00:19] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[01:03:09] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[01:03:36] *** Joins: Chris12 (~Chris12@213.55.225.68)
[01:04:14] *** Quits: Chris12 (~Chris12@213.55.225.68) (Client Quit)
[01:08:28] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:09:10] *** Parts: dmgk (~dmgk@user/dmgk) ()
[01:16:21] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:19:42] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[01:21:28] *** Joins: roshanavand (~roshanava@185.213.155.232)
[01:24:25] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:139:c8d8:e0a0:6ca0)
[01:24:54] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:35f4:c0a:127c:c6a0) (Quit: dingdreher)
[01:28:47] *** Joins: rcernin_ (~rcernin@124.190.132.36)
[01:31:57] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:139:c8d8:e0a0:6ca0) (Ping timeout: 240 seconds)
[01:33:18] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[01:35:23] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:36:47] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[01:43:09] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Ping timeout: 256 seconds)
[01:44:31] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[01:50:17] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:55:01] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[01:56:11] *** Joins: llorllale (~llorllale@198.98.119.85)
[02:00:22] *** Joins: alwyn (~alwyn@user/alwyn)
[02:01:58] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[02:02:30] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:f5d2:86ea:63ad:b952) (Quit: Client closed)
[02:04:01] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:05:29] *** Quits: bluedust (~bluedust@59.89.220.95) (Ping timeout: 256 seconds)
[02:09:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:11:26] *** Joins: fikran (~fikran@user/fikran)
[02:14:12] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[02:22:29] *** Quits: flughafen (~flughafen@p2e55dcb3.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:26:55] *** Joins: treeford (~charleste@user/treeford)
[02:31:35] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[02:32:13] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[02:43:32] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:f5d2:86ea:63ad:b952)
[02:43:37] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[02:44:48] <yagamilito> hello
[02:44:48] <yagamilito> i am trying to read specific config map file using kuberntes go client
[02:44:49] <yagamilito> i tried this
[02:44:49] <yagamilito> https://go.dev/play/p/5PpZsIe2JGt
[02:44:50] <yagamilito> but it is listing all the configmaps in the namespace
[02:44:50] <yagamilito> how can i read only one file ?
[02:44:51] <yagamilito> Thanks
[02:48:14] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[02:51:15] <fikran> is there a way to have a single go-file that requires external packages, but doens't have a go.mod file?
[02:51:25] <fikran> I end up having to create a separate directory, run go mod init, etc.
[02:51:43] <fikran> Wondering I can just do `go run file.go` and it autodownloads/builds the package.
[02:55:04] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[03:09:03] *** Joins: roshanavand (~roshanava@185.213.155.232)
[03:10:14] *** Joins: christophergray (~christoph@186.151.40.104)
[03:15:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:18:38] *** Quits: christophergray (~christoph@186.151.40.104) (Quit: WeeChat 3.4)
[03:22:40] *** Joins: lechner (~lechner@debian/lechner)
[03:25:52] *** Joins: et_ (~et@user/et)
[03:26:12] *** Quits: et (~et@user/et) (Ping timeout: 250 seconds)
[03:26:20] *** et_ is now known as et
[03:26:56] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:27:13] *** Joins: mickey8 (~user@user/mickey)
[03:28:49] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[03:34:32] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:38:05] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:43:12] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Read error: Connection reset by peer)
[03:46:05] *** Joins: k8yun (~k8yun@user/k8yun)
[03:46:30] *** Quits: rednul (~textual@098-127-178-044.biz.spectrum.com) (Quit: bye)
[03:47:29] *** Joins: rednul_ (~redial@mc.emailserverz.com)
[03:49:35] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[03:50:21] *** Parts: rednul_ (~redial@mc.emailserverz.com) ()
[03:50:40] *** Joins: rednul (~redial@mc.emailserverz.com)
[03:54:41] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[03:57:16] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[04:06:41] *** Quits: yelnah (~felix@2001:44b8:308c:ca:6f0:21ff:fe3c:d4d7) (Ping timeout: 250 seconds)
[04:07:42] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:07:52] *** Joins: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7)
[04:08:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com)
[04:08:30] <b0nn> fikran: go.mod files were invented to allow you to do that (automagically download everything asked for to build) - previously you had dep and glide, which were 3rd party applications that did that for you - or you went through and `go get` each dependency
[04:13:38] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[04:17:32] *** Quits: thatcher (~thatcher@91.110.109.236) (Read error: Connection reset by peer)
[04:17:46] *** Joins: thatcher (~thatcher@91.110.109.236)
[04:18:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[04:18:51] <yagamilito> hello
[04:18:51] <yagamilito> i have a yaml file which i converted to json to read the values
[04:18:52] <yagamilito> after converison json looks like this
[04:18:52] <yagamilito> `[{"groups":["system:masters"],"userarn":"arn:aws:iam::xxx:user/foo","username":"foo"}]`
[04:18:53] <yagamilito> how can i read value for key username ?
[04:18:53] <yagamilito> this is my go code
[04:18:54] <yagamilito> https://go.dev/play/p/D8ZbyZQuFhL
[04:18:54] <yagamilito> Thanks
[04:20:04] *** Joins: crashrep (~crashrep@user/crashrep)
[04:20:48] *** Joins: fikran (~fikran@user/fikran)
[04:21:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:30:29] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[04:34:31] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:34:55] *** Joins: hub (~hub@user/hub)
[04:34:56] *** Quits: llorllale (~llorllale@198.98.119.85) (Quit: WeeChat 3.4)
[04:35:20] *** Quits: thatcher (~thatcher@91.110.109.236) (Ping timeout: 256 seconds)
[04:37:50] *** Joins: thatcher (~thatcher@91.110.109.236)
[04:39:24] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[04:39:32] *** Joins: llorllale (~llorllale@198.98.119.85)
[04:39:37] *** Quits: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com) (Remote host closed the connection)
[04:44:56] *** Quits: hub (~hub@user/hub) (Quit: -)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:35] *** Joins: BUSY (~BUSY@user/busy)
[04:46:45] *** Quits: monoxane (~monoxane@user/monoxane) (Quit: Ping timeout (120 seconds))
[04:47:09] *** Joins: monoxane (~monoxane@user/monoxane)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:49] *** Joins: Valentine_ (~valentine@hackerspacesg/valentine)
[04:48:57] *** Quits: Valentine (~valentine@hackerspacesg/valentine) (Ping timeout: 240 seconds)
[04:49:33] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[04:50:36] *** Joins: hub (~hub@user/hub)
[04:52:08] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[04:53:03] *** Joins: novns (~novns@user/novns)
[05:01:14] <b0nn> yagamilito: YAML is painful, but, instead of converting it to json, I'm curious why you didn't load it into a struct, and access the fields you want from there?
[05:04:51] *** Joins: web-50 (~web-50@192.159.181.180)
[05:06:20] *** Quits: web-50 (~web-50@192.159.181.180) (Client Quit)
[05:06:33] *** Joins: adtac (~adtac@192.159.181.180)
[05:07:41] <yagamilito> b0nn tried struct but dint know how to do it
[05:07:41] <yagamilito> https://go.dev/play/p/vfzoU6uCwvc
[05:07:42] <yagamilito> `no new variables on left side of :=`
[05:07:42] <yagamilito> line 56
[05:08:11] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[05:09:44] *** Parts: adtac (~adtac@192.159.181.180) ()
[05:09:47] *** Joins: adtac (~adtac@192.159.181.180)
[05:10:27] <fizzie> Didn't look at the rest of it at all, but that particular error is just because you're doing `err := ...` when there's already a variable called `err` in scope. Just do `err = ...` instead. Or `if err := ...; err != nil { ... }`, which is legal because the scope is different (limited to the if statement).
[05:11:12] <A_Dragon> why not just use a yaml parser?
[05:11:19] <A_Dragon> whoops was scrolled up
[05:11:48] <adtac> has there been any proposal that would allow multiple packages in different files within the same directory? of course, a file with "package foo" and a directory foo/ within the same directory would cause a build error, which may break compat
[05:12:43] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[05:12:47] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[05:13:56] <b0nn> adtac: I certainly hope not
[05:14:31] <fizzie> I've not heard of anything like that, though if you opt not to use Go's built-in build system (but instead build with, say, Bazel), that's already achievable.
[05:14:34] <b0nn> you can have the package name the same, or different, as the name of the directory
[05:14:36] *** Joins: iateadonut (~dan@121.177.17.154)
[05:15:19] <adtac> fizzie: right, bazel is where I saw this first
[05:15:22] <b0nn> but I most certainly would not want multiple packages per directory (you /can/ have multiple sub directories in a directory, and each of those can have a package that's different, though)
[05:16:26] <adtac> b0nn: ah true
[05:17:07] <adtac> b0nn: I didn't think of package foo within bar/
[05:18:34] <b0nn> I think there's a convention to name the package the same as the directory it's in, because importing gets a bit funky when you have import bar  "github.com/user/proj/foo" all over the place
[05:18:55] *** Joins: treeford (~charleste@user/treeford)
[05:19:02] <b0nn> but that's enforced by anything other than the leads
[05:19:17] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 240 seconds)
[05:20:00] <fizzie> I think the *really* confusing part about when the package name doesn't match the import path is when a downstream client has `import "github.com/user/proj/foo"` but then use `bar.Zonks` to refer to identifiers from that import.
[05:20:57] <b0nn> uhhh
[05:20:59] <fizzie> (Perhaps the case of `package foo` in a directory named `go-foo` gets a pass though.)
[05:22:37] *** Quits: Vigdis (~danj@ns4.chown.me) (Quit: WeeChat 3.3)
[05:23:17] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[05:24:30] *** Joins: walterwhip (~www@user/walterwhip)
[05:26:14] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:28:41] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:230e:6411:bf4c:835d:709d)
[05:28:56] <adtac> neverthenonetheless, I think this would encourage a flatter file structure which imo is nice
[05:30:33] *** Joins: Vigdis (~danj@ns4.chown.me)
[05:30:48] <b0nn> I dunno, I've been experimenting with project layouts, and yes I agree we don't want Java style foo/bar/baz/stuff/project/user/github.com
[05:31:02] <b0nn> But I have also found a depth of 3 is helpful
[05:31:45] <b0nn> as in github.com/user/project/storage/sql/postgres
[05:32:01] <b0nn> even though that's the same thing :-)
[05:32:47] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:f5d2:86ea:63ad:b952) (Quit: Client closed)
[05:39:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[05:41:36] *** Quits: k8yun_ (~k8yun@user/k8yun) (Remote host closed the connection)
[05:42:57] *** Joins: califax- (~califax@user/califx)
[05:43:39] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[05:46:09] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:46:41] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:47:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:47:33] *** califax- is now known as califax
[05:54:36] *** Quits: adtac (~adtac@192.159.181.180) (Quit: Client closed)
[05:54:48] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:a4a6:dd03:c62d:4176)
[05:55:53] <yagamilito> this works fine
[05:55:53] <yagamilito> https://go.dev/play/p/NntBHc4u9um
[05:55:54] <yagamilito> how can i loop through all keys with name username in yaml ?
[05:55:54] <yagamilito> i have yaml file like this
[05:55:55] <yagamilito> https://pastebin.com/raw/Rm9NXAVL
[05:55:55] <yagamilito> ** Reposting cause my machine restared not sure if earlier message is posted
[06:01:20] *** Joins: k8yun (~k8yun@user/k8yun)
[06:01:35] <rewt> yagamilito, does that last fmt.Printf print user1?
[06:02:15] <yagamilito> yes
[06:02:15] <yagamilito> 59. fmt.Printf("%+v\n", y[0].Username)
[06:02:16] <yagamilito> this prints username
[06:02:25] <yagamilito> sorry i mean user1
[06:02:28] <rewt> so just loop through y, and get each .Username
[06:02:55] <rewt> for _, yy := range y { fmt.Printf("%v\n", yy.Username) }
[06:03:33] <yagamilito> thanks its work now
[06:06:24] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:a4a6:dd03:c62d:4176) (Quit: Client closed)
[06:09:02] *** Joins: PoliticsUSA (USAPolitic@cpe-24-211-225-57.nc.res.rr.com)
[06:09:23] *** Quits: PoliticsUSA (USAPolitic@cpe-24-211-225-57.nc.res.rr.com) (K-Lined)
[06:12:21] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:21:53] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[06:24:16] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:28:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:30:08] *** Joins: fikran (~fikran@user/fikran)
[06:50:17] *** Quits: rcernin_ (~rcernin@124.190.132.36) (Ping timeout: 240 seconds)
[06:51:31] *** Joins: rcernin_ (~rcernin@124.190.132.36)
[06:56:57] *** Quits: rcernin_ (~rcernin@124.190.132.36) (Ping timeout: 240 seconds)
[07:00:17] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:230e:6411:bf4c:835d:709d) (Ping timeout: 240 seconds)
[07:04:36] <ska> I got it to work, but I know its rough: https://go.dev/play/p/oWaAktz0MiI , using contexts.
[07:05:13] <ska> What can I do to streamline it ?
[07:05:43] <ska> Can I remove the context stuff completely?
[07:06:32] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[07:07:40] *** Joins: treeford (~charleste@user/treeford)
[07:09:40] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:09:56] <ska> I don't see it going past line 80 after that go func()
[07:10:21] *** Joins: R2robot (~R2robot@user/r2robot)
[07:10:44] *** Joins: xiongxin (~Thunderbi@117.136.79.118)
[07:11:00] *** Joins: bluedust (~bluedust@86.106.136.217)
[07:11:15] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 256 seconds)
[07:12:01] *** Joins: rcernin_ (~rcernin@124.190.132.36)
[07:15:49] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[07:16:52] *** Joins: sleetdrop (~sleetdrop@61.135.152.216)
[07:17:58] *** Quits: rcernin_ (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[07:19:20] *** Joins: rcernin_ (~rcernin@124.190.132.36)
[07:23:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[07:30:02] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[07:32:19] *** Joins: mooff (mooff@awful.cooking)
[07:42:39] *** Quits: xiongxin (~Thunderbi@117.136.79.118) (Ping timeout: 256 seconds)
[07:42:40] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[07:43:16] *** Joins: mickey8 (~user@user/mickey)
[07:44:34] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:52:25] *** Quits: sleetdrop (~sleetdrop@61.135.152.216) (Quit: Textual IRC Client: www.textualapp.com)
[08:21:27] *** Joins: bluedust_ (~bluedust@59.89.220.95)
[08:24:50] *** Quits: bluedust (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[08:37:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:38:39] *** Quits: clee_ (~clee@tali.t0k.org) (Ping timeout: 268 seconds)
[08:39:15] *** Joins: clee (~clee@209.198.135.112)
[08:39:30] *** Joins: fikran (~fikran@user/fikran)
[08:55:57] *** Quits: clee (~clee@209.198.135.112) (Ping timeout: 240 seconds)
[09:03:09] *** Quits: TFKyle (~kyle@64.201.205.70) (Read error: Connection reset by peer)
[09:06:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:07:53] *** Joins: clee (~clee@tali.t0k.org)
[09:11:03] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[09:11:39] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:13:20] *** Joins: lechner (~lechner@debian/lechner)
[09:21:37] *** Quits: iateadonut (~dan@121.177.17.154) (Ping timeout: 240 seconds)
[09:22:30] *** Joins: iateadonut (~dan@99.136.252.138)
[09:25:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[09:29:45] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[09:30:37] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 240 seconds)
[09:31:17] *** Quits: normen (~normen@p200300d717235c002cdbf8256f049097.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:32:31] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:8ef:9383:e8bb:73b3:7c08)
[09:32:57] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[09:34:14] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:34:17] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[09:40:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:45:31] *** Joins: ekathva (~ekathva@2001:999:50:cab1:7400:254b:2f47:2e82)
[09:45:46] *** Joins: clee (~clee@tali.t0k.org)
[09:45:58] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[09:46:10] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:50:33] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[09:55:53] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[09:56:03] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[09:58:07] *** Joins: normen (~normen@p200300d717235c002cdbf8256f049097.dip0.t-ipconnect.de)
[09:59:33] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[10:01:57] *** Quits: iateadonut (~dan@99.136.252.138) (Ping timeout: 240 seconds)
[10:07:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:8ef:9383:e8bb:73b3:7c08) (Ping timeout: 240 seconds)
[10:09:27] *** Joins: masoudd (~masoudd@user/masoudd)
[10:16:50] *** Joins: iateadonut (~dan@121.177.17.154)
[10:29:03] *** Parts: iateadonut (~dan@121.177.17.154) ()
[10:30:56] *** Joins: lechner (~lechner@debian/lechner)
[10:37:31] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[10:40:34] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:43:47] *** Joins: treeford (~charleste@user/treeford)
[10:44:13] *** Joins: shka (~herr@109.231.0.226)
[10:45:08] *** Quits: ekathva (~ekathva@2001:999:50:cab1:7400:254b:2f47:2e82) (Remote host closed the connection)
[10:46:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[10:46:53] *** Joins: ekathva (~ekathva@2001:999:50:cab1:caa4:5c66:a03b:aeba)
[10:46:59] *** Joins: xiongxin (~Thunderbi@117.136.39.240)
[10:47:57] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[10:48:51] *** Joins: fikran (~fikran@user/fikran)
[10:48:58] *** Quits: ekathva (~ekathva@2001:999:50:cab1:caa4:5c66:a03b:aeba) (Remote host closed the connection)
[10:50:44] *** Joins: ekathva (~ekathva@2001:999:50:cab1:57c0:d735:9d33:c719)
[10:55:15] *** Joins: flughafen (~flughafen@p2e55dcb3.dip0.t-ipconnect.de)
[10:58:38] *** Joins: walterwhip (~www@user/walterwhip)
[10:59:05] *** Quits: ekathva (~ekathva@2001:999:50:cab1:57c0:d735:9d33:c719) (Remote host closed the connection)
[10:59:13] *** Quits: zwr (~zwr@2804:d45:b966:fb00:be03:2bc0:ec84:6a34) (Ping timeout: 250 seconds)
[10:59:22] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:a89e:b347:cccb:c7e5) (Read error: Connection reset by peer)
[10:59:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130)
[10:59:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:768:90c7:1da:f56f)
[11:00:40] *** Joins: ekathva (~ekathva@2001:999:50:cab1:3235:c247:f7c8:bce3)
[11:07:13] *** Quits: rcernin_ (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[11:07:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[11:08:44] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[11:10:33] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[11:18:17] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[11:20:15] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:20:58] *** Joins: rendar (~rendar@user/rendar)
[11:21:35] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:21:49] *** Joins: fef (~thedawn@user/thedawn)
[11:31:18] *** Joins: absc (~absc@81.31.144.28)
[11:31:49] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:4186:fba5:c71:9703)
[11:32:43] *** Joins: rcernin (~rcernin@124.190.132.36)
[11:32:49] *** Joins: mrig (~mrig@user/mrig)
[11:36:13] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:4186:fba5:c71:9703) (Ping timeout: 240 seconds)
[11:38:19] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[11:38:30] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:38:53] *** Joins: mickey8 (~user@user/mickey)
[11:39:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:42:01] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:48:50] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:52:04] *** Joins: nmollerup (~nmollerup@2a00:7660:1612:168:b378:7ec4:da46:7be9)
[11:52:47] *** Joins: leonarth (~leonarth@user/leonarth)
[11:54:25] *** Joins: mdnotg (~mdnotg@78.185.225.213)
[11:54:48] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:56:46] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[11:57:01] *** Quits: mdnotg (~mdnotg@78.185.225.213) (Client Quit)
[11:57:45] <j416> can save two bytes
[11:59:22] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[11:59:42] *** Quits: xiongxin (~Thunderbi@117.136.39.240) (Read error: Connection reset by peer)
[12:00:51] *** Joins: roshanavand (~roshanava@185.213.155.232)
[12:01:08] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (Remote host closed the connection)
[12:01:12] *** Joins: Thedarkb1-Work (~Thedarkb@62.232.253.82)
[12:05:24] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:10:37] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 240 seconds)
[12:13:12] *** Quits: knusbaum (~knusbaum@23.249.37.254) (Quit: ZNC 1.8.2 - https://znc.in)
[12:14:30] *** Quits: ItsNotGoodName03 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[12:15:46] *** Joins: clee (~clee@tali.t0k.org)
[12:17:02] *** Joins: knusbaum (~knusbaum@23.249.37.254)
[12:18:42] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:93a:f816:bc7c:4b35:fc6b)
[12:18:52] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[12:20:08] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Quit: Leaving)
[12:24:51] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[12:25:31] *** Joins: rk4 (~r@user/rk4)
[12:27:49] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:30:06] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Quit: You have been kicked for being idle)
[12:36:45] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 256 seconds)
[12:43:26] *** Joins: clee (~clee@tali.t0k.org)
[12:45:54] *** Quits: mjanssen (~mpcjansse@2a01:4f9:c011:75e6::1) (Quit: WeeChat 3.0)
[12:51:02] *** Joins: arinov (~arinov@213.194.126.155)
[12:51:08] *** Joins: walterwhip (~www@user/walterwhip)
[12:51:09] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[12:51:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:52:00] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[12:52:18] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 256 seconds)
[12:52:27] *** Joins: clee (~clee@tali.t0k.org)
[12:53:15] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[12:56:15] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[12:56:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:58:12] *** Joins: fikran (~fikran@user/fikran)
[13:01:28] *** Joins: rcernin (~rcernin@124.190.132.36)
[13:08:06] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:93a:f816:bc7c:4b35:fc6b) (Ping timeout: 260 seconds)
[13:24:37] *** Quits: bluedust_ (~bluedust@59.89.220.95) (Ping timeout: 240 seconds)
[13:34:47] *** Quits: vhost- (~vhost@65.102.48.134) (Ping timeout: 250 seconds)
[13:35:27] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[13:36:30] *** Quits: LtHummus (~lthummus@174-21-27-9.tukw.qwest.net) (Ping timeout: 256 seconds)
[13:45:02] *** Joins: LtHummus (~lthummus@174-21-20-149.tukw.qwest.net)
[13:47:31] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[13:49:02] *** Joins: vhost- (~vhost@65.102.48.134)
[13:54:03] *** Joins: bluedust (~bluedust@117.204.132.6)
[13:54:25] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[13:56:25] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[13:57:28] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:57:30] *** Joins: mrig (~mrig@user/mrig)
[13:58:17] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 240 seconds)
[14:01:56] *** Joins: Leon_ (~Leon@85.sub-174-198-194.myvzw.com)
[14:02:11] *** Joins: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[14:02:21] *** Leon_ is now known as Guest3111
[14:02:33] *** Joins: skyfall9 (~skyfall@user/skyfall)
[14:02:33] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[14:02:35] *** Joins: lxdr8 (~lxdr@user/lxdr)
[14:02:41] *** Joins: misuto4 (~misuto@h-155-4-73-21.A192.priv.bahnhof.se)
[14:02:42] *** Joins: lazyreader7 (~lazyreade@user/lazyreader)
[14:02:43] *** Joins: L1Cafe2 (~L1Cafe@user/l1cafe)
[14:03:01] *** Joins: acosta7 (~acosta@163.172.62.165)
[14:03:03] *** Joins: tofran2 (~tofran@bl15-47-228.dsl.telepac.pt)
[14:03:08] *** Joins: cfjk0 (~cfjk@user/cfjk)
[14:03:23] *** Joins: rednul_ (~rednul@mc.emailserverz.com)
[14:03:34] *** Joins: jack_rabbit (~knusbaum@23.249.37.254)
[14:03:34] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[14:03:36] *** Joins: nikos_ (~nikos@nikos.dev)
[14:03:37] *** Joins: haniaF (~haniaF@83.24.223.148.ipv4.supernova.orange.pl)
[14:04:06] *** Joins: ryusaku (~ryu`@c6A334BC1.dhcp.as2116.net)
[14:04:42] *** Joins: dansan_ (~daniel@75.81.148.51)
[14:05:04] *** Joins: cync_ (~blah@192.180.187.81.in-addr.arpa)
[14:05:31] *** Joins: novns_ (~novns@user/novns)
[14:06:08] *** Joins: jimeh_ (jimeh@matrix.bah.io)
[14:06:17] *** Joins: g2anj_ (~v@58.228.230.4)
[14:06:17] *** Joins: moto_ (~moto@user/moto)
[14:06:26] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[14:06:30] *** Joins: unautre (~unautre@omsk.bandar-log.dev)
[14:06:35] *** Joins: gnoirzox1 (~gnoirzox@178.170.103.136)
[14:06:41] *** Joins: mikoto-c1 (~mikoto-ch@84.199.144.235)
[14:07:03] *** Joins: nabromov (~nabromov@92.40.255.115.threembb.co.uk)
[14:08:28] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[14:08:59] *** Joins: wikro_ (~foo@hjkl.se)
[14:09:57] *** Joins: dshoreman (~ds@user/ds)
[14:10:01] *** Joins: Suzumiya (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[14:10:02] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:2efb:49eb:5abc:71c2:a5ba)
[14:10:40] *** Joins: TheCoffeMaker_ (~TheCoffeM@200.126.129.149)
[14:10:46] *** Quits: ds (~ds@user/ds) (Killed (NickServ (GHOST command used by dshoreman)))
[14:10:50] *** dshoreman is now known as ds
[14:11:02] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (*.net *.split)
[14:11:02] *** Quits: knusbaum (~knusbaum@23.249.37.254) (*.net *.split)
[14:11:02] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (*.net *.split)
[14:11:02] *** Quits: novns (~novns@user/novns) (*.net *.split)
[14:11:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (*.net *.split)
[14:11:02] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (*.net *.split)
[14:11:02] *** Quits: rednul (~redial@mc.emailserverz.com) (*.net *.split)
[14:11:02] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[14:11:02] *** Quits: Guest5824 (~Leon@85.sub-174-198-194.myvzw.com) (*.net *.split)
[14:11:02] *** Quits: wikro (~foo@hjkl.se) (*.net *.split)
[14:11:02] *** Quits: teasea (~teasea@user/teasea) (*.net *.split)
[14:11:02] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[14:11:02] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (*.net *.split)
[14:11:02] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (*.net *.split)
[14:11:02] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[14:11:02] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (*.net *.split)
[14:11:02] *** Quits: RaySl (~raysl@sdf1.xen.prgmr.com) (*.net *.split)
[14:11:02] *** Quits: unautre_ (~unautre@omsk.bandar-log.dev) (*.net *.split)
[14:11:02] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[14:11:02] *** Quits: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (*.net *.split)
[14:11:02] *** Quits: skyfall (~skyfall@user/skyfall) (*.net *.split)
[14:11:02] *** Quits: haniaF_ (~haniaF@83.24.223.148.ipv4.supernova.orange.pl) (*.net *.split)
[14:11:02] *** Quits: chemsmith (~chemsmith@user/chemsmith) (*.net *.split)
[14:11:02] *** Quits: transacid (~transacid@transacid.de) (*.net *.split)
[14:11:03] *** Quits: tofran (~tofran@bl15-47-228.dsl.telepac.pt) (*.net *.split)
[14:11:03] *** Quits: moto (~moto@user/moto) (*.net *.split)
[14:11:03] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[14:11:03] *** Quits: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se) (*.net *.split)
[14:11:03] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[14:11:03] *** Quits: lxdr (~lxdr@user/lxdr) (*.net *.split)
[14:11:03] *** Quits: redlegion (sid429547@ilkley.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[14:11:03] *** Quits: lazyreader (~lazyreade@user/lazyreader) (*.net *.split)
[14:11:03] *** Quits: gnoirzox (~gnoirzox@178.170.103.136) (*.net *.split)
[14:11:03] *** Quits: jimeh (jimeh@matrix.bah.io) (*.net *.split)
[14:11:03] *** Quits: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com) (*.net *.split)
[14:11:03] *** Quits: else- (sid23924@tinside.irccloud.com) (*.net *.split)
[14:11:03] *** Quits: frobnitz (~ian@photon.remmler.org) (*.net *.split)
[14:11:03] *** Quits: cfjk (~cfjk@user/cfjk) (*.net *.split)
[14:11:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[14:11:03] *** Quits: aidalgol (~aidalgol@user/aidalgol) (*.net *.split)
[14:11:03] *** Quits: acosta (~acosta@163.172.62.165) (*.net *.split)
[14:11:03] *** Quits: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[14:11:03] *** Quits: nikos (~nikos@nikos.dev) (*.net *.split)
[14:11:03] *** Quits: Archwyrm (~archwyrm@archwyrm.net) (*.net *.split)
[14:11:03] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[14:11:03] *** Quits: ypszilon (~Ypszilon@user/ypszilon) (*.net *.split)
[14:11:03] *** Quits: sneak (~sneak@datavi.be) (*.net *.split)
[14:11:03] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[14:11:03] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[14:11:03] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[14:11:03] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[14:11:03] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (*.net *.split)
[14:11:03] *** Quits: greatgatsby__ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (*.net *.split)
[14:11:03] *** Quits: sam1 (~sam1@molly.millions.slask.me) (*.net *.split)
[14:11:03] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (*.net *.split)
[14:11:03] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[14:11:03] *** Quits: McKael (~mikael@82-64-95-224.subs.proxad.net) (*.net *.split)
[14:11:03] *** Quits: deckard (~deckard@user/deckard) (*.net *.split)
[14:11:03] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[14:11:03] *** Quits: mika (~mika@odysseus.grml.info) (*.net *.split)
[14:11:03] *** Quits: muesli (~muesli@fribbledom.com) (*.net *.split)
[14:11:03] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[14:11:03] *** Quits: Disconsented (~quassel@107.170.227.20) (*.net *.split)
[14:11:03] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[14:11:03] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[14:11:03] *** Quits: Lost (~spinning@user/lost) (*.net *.split)
[14:11:03] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[14:11:03] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[14:11:03] *** Quits: avakand (~avakand@static.164.226.201.195.clients.your-server.de) (*.net *.split)
[14:11:03] *** Quits: trewq (~trewq@li70-4.members.linode.com) (*.net *.split)
[14:11:03] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[14:11:03] *** Quits: dove (~jordan@li1158-85.members.linode.com) (*.net *.split)
[14:11:03] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[14:11:04] *** skyfall9 is now known as skyfall
[14:11:04] *** misuto4 is now known as misuto
[14:11:06] *** lxdr8 is now known as lxdr
[14:11:09] *** tofran2 is now known as tofran
[14:11:09] *** lazyreader7 is now known as lazyreader
[14:11:09] *** cfjk0 is now known as cfjk
[14:11:09] *** acosta7 is now known as acosta
[14:11:09] *** L1Cafe2 is now known as L1Cafe
[14:12:04] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[14:14:49] *** Quits: nabromov (~nabromov@92.40.255.115.threembb.co.uk) (Quit: WeeChat 2.8)
[14:14:58] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[14:15:59] *** jimeh_ is now known as jimeh
[14:16:12] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[14:16:12] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[14:16:12] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[14:16:12] *** Joins: teasea (~teasea@user/teasea)
[14:16:12] *** Joins: ypszilon (~Ypszilon@user/ypszilon)
[14:16:12] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[14:16:12] *** Joins: transacid (~transacid@transacid.de)
[14:16:12] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[14:16:12] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[14:16:12] *** Joins: redlegion (sid429547@ilkley.irccloud.com)
[14:16:12] *** Joins: abraham (~abraham@143.244.185.86)
[14:16:12] *** Joins: McKael (~mikael@82-64-95-224.subs.proxad.net)
[14:16:12] *** Joins: aidalgol (~aidalgol@user/aidalgol)
[14:16:12] *** Joins: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com)
[14:16:12] *** Joins: else- (sid23924@tinside.irccloud.com)
[14:16:12] *** Joins: frobnitz (~ian@photon.remmler.org)
[14:16:12] *** Joins: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de)
[14:16:12] *** Joins: Archwyrm (~archwyrm@archwyrm.net)
[14:16:12] *** Joins: sneak (~sneak@datavi.be)
[14:16:12] *** Joins: justGhost (~justache@user/justache)
[14:16:12] *** Joins: sebito91 (~sborza@45.55.74.66)
[14:16:12] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[14:16:12] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[14:16:12] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[14:16:12] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[14:16:12] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[14:16:12] *** Joins: deckard (~deckard@user/deckard)
[14:16:12] *** Joins: Spydar007 (~spydar007@user/spydar007)
[14:16:12] *** Joins: mika (~mika@odysseus.grml.info)
[14:16:12] *** Joins: muesli (~muesli@fribbledom.com)
[14:16:12] *** Joins: n1000 (~n1000@user/n1000)
[14:16:12] *** Joins: Disconsented (~quassel@107.170.227.20)
[14:16:12] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[14:16:12] *** Joins: NOTevil (~notevil@user/notevil)
[14:16:12] *** Joins: Lost (~spinning@user/lost)
[14:16:12] *** Joins: achilleas (~ach@user/achilleas)
[14:16:12] *** Joins: Piraty (~irc@user/piraty)
[14:16:12] *** Joins: avakand (~avakand@static.164.226.201.195.clients.your-server.de)
[14:16:12] *** Joins: trewq (~trewq@li70-4.members.linode.com)
[14:16:12] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[14:16:12] *** Joins: dove (~jordan@li1158-85.members.linode.com)
[14:16:12] *** Joins: flynn (~mcbloch@user/flynn)
[14:18:33] *** Joins: tpr (~tpr@user/tpr)
[14:19:00] *** imm__ is now known as im_
[14:19:07] *** im_ is now known as imm_
[14:20:07] *** Joins: treeford (~charleste@user/treeford)
[14:21:48] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[14:22:30] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[14:24:29] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 252 seconds)
[14:31:24] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:31:42] *** Joins: mickey8 (~user@user/mickey)
[14:31:55] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[14:51:04] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:51:21] *** Joins: mickey8 (~user@user/mickey)
[14:54:50] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[14:55:05] *** Joins: mickey8 (~user@user/mickey)
[15:05:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[15:07:33] *** Joins: fikran (~fikran@user/fikran)
[15:16:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:24:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:30:08] *** Quits: bluedust (~bluedust@117.204.132.6) (Remote host closed the connection)
[15:38:19] *** Joins: walterwhip (~www@user/walterwhip)
[15:43:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:2efb:49eb:5abc:71c2:a5ba) (Ping timeout: 250 seconds)
[15:45:32] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Remote host closed the connection)
[15:48:54] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:49:08] *** Joins: mickey8 (~user@user/mickey)
[15:50:03] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[15:54:45] *** Joins: fef (~thedawn@user/thedawn)
[15:57:23] *** Joins: mei (~mei@user/mei)
[16:00:09] *** Joins: xiongxin (~Thunderbi@2409:8954:2e60:2a6:96e7:82a0:9aab:fe7f)
[16:03:08] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[16:12:02] *** Quits: xiongxin (~Thunderbi@2409:8954:2e60:2a6:96e7:82a0:9aab:fe7f) (Ping timeout: 240 seconds)
[16:16:02] *** Quits: mikoto-c1 (~mikoto-ch@84.199.144.235) (Quit: mikoto-c1)
[16:18:37] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[16:29:54] *** Joins: bluedust (~bluedust@117.204.132.6)
[16:43:10] *** Quits: henry40408 (~henry4040@175.181.155.165) (Read error: Connection reset by peer)
[16:44:58] *** Joins: henry40408 (~henry4040@123-204-141-191.adsl.dynamic.seed.net.tw)
[16:47:13] *** Quits: ryusaku (~ryu`@c6A334BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[16:53:28] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[16:58:12] <TDT> Hey all.  I'm working through some of the go routine/concurrency stuff in Learning Go (Chapter 10), and am looking at the done design pattern.  From my understanding, in the select block we can have something that runs for awhile, but exit early (like a kill signal).  I wrote out the example they had, for the most part (mostly renaming stuff), into:
[16:58:14] <TDT> https://gist.github.com/TheDarkTrumpet/be877c2358884c97b8f57d424b71046a
[16:58:53] <TDT> Reading through about time.Sleep, it sounds like that would pause the entire go routine totally, which is what I ran into earlier.  but decided to do an infinite loop instead.  But, done never gets triggered with this current code, it just runs and runs.
[16:59:30] *** Quits: bluedust (~bluedust@117.204.132.6) (Remote host closed the connection)
[17:00:35] <TDT> If I use time.Sleep, it'll execute for as long as line 8's function is set to.  Which, kinda makes sense if it pauses the entire go routine.  But what I'm trying to figure out at this point is, if I close done, the 0 value should be returned.  In the select, that should trigger regardless of result, and exit the entire select box entirely.  I'm not sure if I'm missing something simple here, or maybe it's a
[17:00:37] <TDT> general misunderstanding of what select does.
[17:01:39] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:06:03] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Ping timeout: 250 seconds)
[17:09:30] *** Joins: sabry (~sabry@197.37.49.72)
[17:10:28] <pjs> I have an interface, and a base struct that implements it in a module. External projects use this module and the base struct. Can I assert the type without knowing the incoming type? I realize this is confusing so hopefully this "code" will help explain: https://paste.sr.ht/~petersanchez/5e8ce6850ed0bc6d2e1d428988e369b7a00af213
[17:10:43] <fizzie> TDT: Yes. The way a `select` statement operates is, it will upon entering evaluate the operands of *all* the cases exactly once, in order, to determine which channels you would like to send to, and which values you'd like to send to those channels. Only after that will it see which communications can proceed. So it will unconditionally call `groutineChannelPatternLongRunningFunction`, which never
[17:10:45] <fizzie> returns.
[17:12:33] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Remote host closed the connection)
[17:14:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:16:54] *** Joins: fikran (~fikran@user/fikran)
[17:17:00] *** Joins: arkurious (~arkurious@user/arkurious)
[17:17:38] *** Joins: bluedust (~bluedust@117.204.132.6)
[17:21:36] <TDT> fizzie:  Hmm, this chapter goes into something later about timeout of code too (which is similar to the done pattern).  If it's doing it in order, how can this be reworked to allow for a go routine to exit early, if it's not needing to complete?
[17:22:38] *** Joins: roshanavand (~roshanava@185.213.155.232)
[17:22:56] <fizzie> Well. You might (for example) have the `select` statement contain two *receive* operations (one on `result`, one on `done`), and have groutineChannelPatternLongRunningFunction (running in a yet another goroutine) be the one that writes to the channel. That way the select statement will pick whichever of the two (write on `result`, close on `done`) happens first.
[17:24:02] <fizzie> Though that won't actually stop the long-running goroutine. That would require some cooperation from it: if a goroutine is in an empty `for {}`, it just won't ever stop.
[17:27:55] <TDT> I was considering that earlier, and thought it diverged from the original from the book too much, so I didn't do that.  I think I'll try that first and see how it goes.  Ironic on that comment is I was earlier (before posting here), how to spawn a go routine from a select iself (e.g. go groutineChannel...())
[17:29:55] *** Quits: Nixieboluo (~Nixiebolu@47.93.220.75) (Quit: Ping timeout (120 seconds))
[17:30:13] *** Joins: Nixieboluo (~Nixiebolu@47.93.220.75)
[17:31:11] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 250 seconds)
[17:33:21] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:33:47] *** Joins: kinlo (~peter@user/kinlo)
[17:36:10] *** Parts: rednul_ (~rednul@mc.emailserverz.com) ()
[17:37:10] *** Joins: rednul (~rednul@mc.emailserverz.com)
[17:37:50] <TDT> Thanks for the idea on that fizzie.  Decided I was making this example a bit too complex for what I was trying to illustrate, https://gist.github.com/TheDarkTrumpet/be877c2358884c97b8f57d424b71046a updated, just passed the channel to that go routine, used time.Sleep in it (vs infinite loop, so I can play with the select a bit more)
[17:38:47] *** Quits: flughafen (~flughafen@p2e55dcb3.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:40:16] *** Quits: Spydar007 (~spydar007@user/spydar007) (Quit: Quit)
[17:45:27] *** Joins: treeford (~charleste@user/treeford)
[17:46:05] *** Joins: Spydar007 (~spydar007@user/spydar007)
[17:48:08] *** Quits: roshanavand (~roshanava@185.213.155.232) (Remote host closed the connection)
[17:48:11] *** Joins: leonarth_ (~leonarth@user/leonarth)
[17:48:11] *** Quits: leonarth_ (~leonarth@user/leonarth) (Client Quit)
[17:48:22] *** Joins: roshanavand (~roshanava@185.213.155.232)
[17:51:43] *** Joins: flughafen (~flughafen@p5de8ee72.dip0.t-ipconnect.de)
[17:55:22] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[18:02:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[18:04:37] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 240 seconds)
[18:07:21] *** Joins: pepee (~pepee@user/pepee)
[18:08:15] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[18:09:01] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[18:14:27] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[18:14:59] *** Quits: ekathva (~ekathva@2001:999:50:cab1:3235:c247:f7c8:bce3) (Quit: Leaving)
[18:16:32] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[18:17:37] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[18:17:39] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:17:46] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[18:21:28] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3c9b:6dce:e374:3130) (Read error: Connection reset by peer)
[18:21:57] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[18:22:35] *** imm__ is now known as imm_
[18:27:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:30:37] *** Joins: bluedust_ (~bluedust@103.160.233.28)
[18:34:18] *** Quits: bluedust (~bluedust@117.204.132.6) (Ping timeout: 260 seconds)
[18:35:27] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[18:36:35] *** Joins: finkfox (~finkfox@user/finkfox)
[18:36:37] *** cross_ is now known as cross
[18:39:52] <finkfox> hi. I would like to unmarshal json from file/stdin. the usual way is to declare a variable of the target type. is there a way to infer the target type from the source data?
[18:40:22] <finkfox> a way, that is, a go-lang good practice?
[18:41:54] <bookworm> code generation on the fly? No
[18:42:08] <bookworm> codegen if the type stays constant, sure
[18:42:49] <bookworm> or simply pick a simpler type, map[string][interface {}] is one but that then gets annoying to use
[18:44:18] <bookworm> you are aware that you can use a type that has less fileds as the input right? You don't need to create the full type if you don't need all the information
[18:47:19] <finkfox> bookworm, this solution here tries different types ... https://stackoverflow.com/a/35584188
[18:49:54] <bookworm> what's your actual problem?
[18:51:03] <finkfox> bookworm: i want to import json from file into a struct. however, the type of the struct is unknown (to the end user), so the importer should autodetect it. e.g. a "car" or a "driver"
[18:52:11] <bookworm> why don't you just pass a concrete interface to the end user?
[18:52:32] <bookworm> all the marshalling and unmarshalling should happen in your package
[18:52:57] <bookworm> and you hopefully know what you are saving to disc
[18:53:15] <finkfox> the "end user" here is a command line app. e.g. "myapp import person.json" or "myapp import car.json"
[18:53:37] <finkfox> internally represeted by types Person and Car
[18:54:02] <bookworm> So you control the json format then?
[18:54:09] <finkfox> yes
[18:55:44] <bookworm> then make a thing looking something like {type: $type, data: { $object }} unmarshal into type string + json.RawData and then defer the unmarshalling to the concrete type
[18:55:47] <bookworm> https://eagain.net/articles/go-dynamic-json/
[18:57:29] <bookworm> RawMessage*
[18:57:50] <finkfox> ok thanks will have a look
[18:59:31] <finkfox> bookworm: very nice. seems the way to go!
[18:59:35] <finkfox> :-)
[18:59:51] <bookworm> well, go doesn't like dynamic types... it's not python
[19:00:30] <bookworm> but yes, if you must that's the way to do it
[19:02:17] <finkfox> well the other way is that the "end user" needs to specify type, e.g. "myapp import -person person.json" (with flag) or "myapp import person person.json" (with sub-sub-command)
[19:02:27] <finkfox> not sure which one is more elegant/efficient
[19:04:16] <finkfox> bookmark: what do you think?
[19:05:36] <bookworm> up to you really, I have no clue what "import" means in the context of your app
[19:06:41] <bookworm> to be honest, expecting the end user to handle json files manually already seems strange
[19:07:20] <bookworm> where do they get those from? An api? But then you already have an easy way to route to a unmarshallar based on the request
[19:07:47] <bookworm> so... why not do it directly from the api then within your CLI tool?
[19:09:28] *** Joins: crashrep (~crashrep@user/crashrep)
[19:10:01] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[19:11:36] <finkfox> thank you, I see your point, I have to think about it
[19:12:21] <ska> Can I do this type of thing without context? https://go.dev/play/p/oWaAktz0MiI ,
[19:14:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:15:00] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[19:17:00] *** Quits: fabz- (~textual@2804:14c:34:2686:7ce4:7b7f:e85a:8a44) (Quit: Textual IRC Client: www.textualapp.com)
[19:20:36] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 268 seconds)
[19:24:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:24:26] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:25:07] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[19:25:36] *** Joins: rvalue- (~rvalue@user/rvalue)
[19:26:15] *** Joins: fikran (~fikran@user/fikran)
[19:26:16] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[19:26:24] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[19:26:26] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[19:27:32] *** Joins: amk (~amk@109.255.169.126)
[19:28:03] *** rvalue- is now known as rvalue
[19:32:54] *** Quits: sabry (~sabry@197.37.49.72) (Quit: Client closed)
[19:34:21] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[19:43:38] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:46:15] *** Joins: epony (~epony@user/epony)
[19:46:39] *** Joins: mdnotg (~mdnotg@78.185.225.213)
[19:47:02] *** Quits: mdnotg (~mdnotg@78.185.225.213) (Client Quit)
[19:51:50] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:35f4:c0a:127c:c6a0)
[20:01:16] *** Quits: bluedust_ (~bluedust@103.160.233.28) (Remote host closed the connection)
[20:02:56] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:35f4:c0a:127c:c6a0) (Quit: dingdreher)
[20:08:35] <lungaro_> is there a way to check if a []byte is valid json?
[20:09:27] <lungaro_> json.Valid doh.
[20:09:58] <ikke> no
[20:10:25] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[20:10:43] <lungaro_> what ya mean, there is a function. Not sure when json.Valid showed up
[20:12:38] *** Joins: eXtr3m0_ (~eXtr3m0@p4fd3a0d7.dip0.t-ipconnect.de)
[20:13:24] <ikke> You need to parse it to determine it's valid
[20:14:13] <j416> (which is pretty much what json.Valid would do)
[20:14:18] <j416> didn't know about json.Valid. thanks.
[20:17:44] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:19:04] <lungaro_> yeah, i was about to just Unmarshal
[20:31:39] *** Quits: finkfox (~finkfox@user/finkfox) (Remote host closed the connection)
[20:31:56] <lungaro_> another stdlib question. Is binary defined as ordinal values above 127?
[20:32:07] <lungaro_> ie, i'm wondering if a given string or []byte contains binary
[20:32:14] <lungaro_> i think that's any byte >127
[20:35:08] *** Joins: bluedust (~bluedust@103.160.233.28)
[20:35:36] <bookworm> utf8 strings aren't exactly binary, least not in the usual meaning of the word and they don't fit into the ascii range
[20:36:01] <bookworm> so no that statement is false
[20:37:07] <bookworm> []byte is binary content, decoded strings don't really fit that description any longer
[20:38:25] <bookworm> what is the actual question you have? "is it binary" doesn't make much sense as a question without context
[20:39:04] <bookworm> does it decode to a utf8 string that's valid in contrast makes a little more sense
[20:40:16] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:35f4:c0a:127c:c6a0)
[20:43:31] *** Joins: someone235 (uid419897@id-419897.ilkley.irccloud.com)
[20:49:29] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[20:49:29] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[20:49:29] *** Joins: tane (~tane@user/tane)
[20:57:16] *** Joins: treeford (~charleste@user/treeford)
[21:06:40] *** Joins: Everything (~Everythin@37.115.210.35)
[21:11:45] *** Joins: goldfish (~goldfish@user/goldfish)
[21:13:04] *** Joins: kn1007 (~kn100@wireguard/tunneler/kn100)
[21:13:05] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Read error: Connection reset by peer)
[21:13:05] *** kn1007 is now known as kn100
[21:15:01] <chilversc> lungaro_: are you trying to validate some json before unmarshalling? or do you just pass this json to some other system without processing it?
[21:18:44] <lungaro_> bookworm, chilversc --- i'm abandoning the idea. I was thinking of mimic'ing "file /some/path" semantics to report on if its binary or not
[21:19:05] <lungaro_> but its largely a configuration issue if someone tries to read binary and treat it as json..
[21:19:26] <lungaro_> so "Not My Problem!" (TM)
[21:25:45] <bookworm> I mean worst case the parser simply stops at the first unknown byte and errors
[21:25:53] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:25:55] <bookworm> that's the stdlibs problem, not yours
[21:26:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:26:52] <j416> lungaro_: Git defines binary as, it contains a null (0x00) byte.
[21:26:58] <j416> so that could be one telltale.
[21:27:05] *** Joins: mickey8 (~user@user/mickey)
[21:27:16] <j416> but of course, a "binary" file could also be all ascii, for all we know.
[21:27:20] <j416> it's just data afterall.
[21:27:39] <bookworm> yeah well, not the best metric on earth but a cheap one
[21:27:42] <lungaro_> indeed. I should see what file does
[21:27:55] <lungaro_> its interesting but a tangent given i can avoid it
[21:28:20] <bookworm> parsing json in the first place is an interesting tangent
[21:28:51] <bookworm> https://youtu.be/wlvKAT7SZIQ if you have an hour to spare
[21:29:24] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:29:32] <bookworm> (implementation details of simdjson)
[21:32:02] <j416> interesting. thanks.
[21:32:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:33:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:34:17] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 256 seconds)
[21:35:36] *** Joins: fikran (~fikran@user/fikran)
[21:48:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[21:53:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com)
[21:54:22] *** Joins: nattiestnate (~nate@2001:448a:4063:1cc8:3706:7ea7:62f5:aeaf)
[21:59:39] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[22:01:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec4d-94c6-3914-8d3d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:02:24] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:02:46] *** Quits: mei (~mei@user/mei) (Quit: mei)
[22:04:27] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[22:14:35] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:15:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2895-9d6c-4909-5f81.res6.spectrum.com)
[22:31:13] *** Joins: marius2 (~marius_m@84.211.92.9)
[22:37:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[22:39:56] *** Joins: mrig (~mrig@user/mrig)
[22:43:27] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:55:53] *** Quits: flughafen (~flughafen@p5de8ee72.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:56:49] *** marius2 is now known as marius_m
[22:57:05] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[22:58:32] *** Joins: lechner (~lechner@debian/lechner)
[23:01:52] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:35f4:c0a:127c:c6a0) (Quit: dingdreher)
[23:02:59] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[23:03:19] *** Joins: kn1007 (~kn100@wireguard/tunneler/kn100)
[23:08:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[23:09:48] *** Joins: k8yun (~k8yun@user/k8yun)
[23:14:25] <j416> that was a cool talk. thanks again for sharing, bookworm.
[23:14:53] <bookworm> :) I enjoyed it as well
[23:22:54] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[23:25:04] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:25:21] *** Joins: mickey8 (~user@user/mickey)
[23:27:42] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:28:05] <j416> cool how they can memory-map a string to a number and do math magic to make it into an int representing the number in the string
[23:28:20] <j416> so weird. :D
[23:28:54] *** Joins: califax (~califax@user/califx)
[23:36:20] *** Joins: flughafen (~flughafen@p57969651.dip0.t-ipconnect.de)
[23:38:44] <moldorcoder7_> hi does a context.withtimout start as soon as it declared or used?
[23:41:18] <seebs> What would "used" mean?
[23:41:42] <seebs> When you call WithTimeout, it creates a context, which has a timeout. Doesn't matter what you do with that context at that point, or whether you do anything with it.
[23:43:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:44:57] *** Joins: fikran (~fikran@user/fikran)
[23:48:51] <j416> moldorcoder7_: the WithTimeout method creates the context object and "starts" the timer ( == sets the deadline)
[23:49:16] <j416> there is no magic.
[23:49:37] <moldorcoder7_> j416, ok make sense
[23:50:37] <b0nn> moldorcoder7_: At declaration time https://github.com/golang/go/blob/master/src/context/context.go#L507
[23:53:59] <moldorcoder7_> ok thanks
[23:57:51] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[23:58:16] *** Joins: noarb (~noarb@user/noarb)
