[00:02:38] <pjb> dieggsy: (first (pathname-directory "my/path")) #| --> :relative |#    (first (pathname-directory "/my/path")) #| --> :absolute |#
[00:03:22] <pjb> dieggsy: but for logical pathnames, it's surprising: (first (pathname-directory ";my;path"))  #| --> :relative |#    (first (pathname-directory "my;path"))  #| --> :absolute |#
[00:03:51] <pjb> it's because the syntax is host:my;path for absolute with host, and host:;my;path for relative with host.
[00:05:01] <dieggsy> pjb: this is interesting, but just ";my;path" doesn't actually translate to anything with translate-logical-pathname for me
[00:05:18] <pjb> dieggsy: ./my/path and my/path may resolve to the same inode, but as pathnames, they're different: (length (pathname-directory "./my/path")) #| --> 3 |#  (length (pathname-directory "my/path")) #| --> 2 |# (mind the :absolute or :relative keyword in pathname-directory).
[00:06:07] <pjb> dieggsy: of course, there may be no translation, notably if no logical host is specified.
[00:06:15] <pjb> (pathname-host ";my;path") #| --> nil |#
[00:06:28] <dieggsy> and host:;my;path returns an error. maybe this is a confiuration error on our end.
[00:06:36] <pjb> (translate-logical-pathname "home;my;path") #| --> #P"/home/my/path" |#
[00:06:40] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com) (Ping timeout: 240 seconds)
[00:07:04] <pjb> mmm, not what I expected.
[00:07:15] <dieggsy> pjb: that gives me #P"home;my;path" on allegro
[00:07:41] <pjb> dieggsy: you need to set the logical pathname translations of the logical host first.
[00:08:01] <pjb> also, be careful that normally logical pathnames should use uppercase, notably the logical host.
[00:08:19] <pjb> (if you use lowercase, you have more implementation dependent behavior).
[00:09:52] <pjb> (setf (logical-pathname-translations "DIEGGSY") '(("**;*.*" "/Volumes/Deiggsy/**/*.*"))) (translate-logical-pathname "DIEGGSY:MY;PATH") #| --> #P"/Volumes/Deiggsy/MY/PATH" |#  the case of the result depends on the customary case of the file system: implementation and platform dependent.
[00:10:41] <pjb> If you want a specific case, in a conforming manner, you need to put it in the translations: (setf (logical-pathname-translations "DIEGGSY") '(("MY;PATH" "/Volumes/Deiggsy/My/Path") ("**;*.*" "/Volumes/Deiggsy/**/*.*")))  (translate-logical-pathname "DIEGGSY:MY;PATH") #| --> #P"/Volumes/Deiggsy/My/Path" |#
[00:11:38] <dieggsy> interesting
[00:11:43] <pjb> Using logical pathnames in a conforming way is very possibly, but a tad inconvenient if you expect specific translations to physical pathnames, since in that case you need to list each translation in the logical host translationsâ€¦
[00:11:44] <dieggsy> thanks
[00:12:05] <dieggsy>  only just found out about logical pathnames this months and my team uses them fairly extensively
[00:12:28] <pjb> They're quite useful to avoid platform specific path syntaxes and quirks.
[00:17:09] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[00:22:49] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[00:23:33] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[00:25:14] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com)
[00:27:11] <mr_rob0t> sup
[00:30:02] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[00:31:03] <Josh_2> Hello
[00:31:12] <mr_rob0t> how are you man
[00:32:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:32:13] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[00:33:40] *** Quits: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[00:34:50] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[00:38:57] <Josh_2> Writing lisp
[00:39:24] <mr_rob0t> same
[00:40:11] <phantomics> Josh_2 what are you writing?
[00:40:32] <mr_rob0t> im new, going through land of lisp book
[00:40:49] <mr_rob0t> built a basic chat bot though
[00:40:50] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[00:41:01] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[00:41:10] <phantomics> Land of Lisp is fun, some of the programming practices it teaches are not the best though
[00:41:21] <mr_rob0t> oh yeah?
[00:47:30] <mr_rob0t> do you have any favorite sources for a newb?
[00:48:21] <Josh_2> Depends how n00b
[00:48:55] <Josh_2> If you are not new to programming then Practical Common Lisp, but ofc the best is to just write some programs and ask for reviews
[00:49:50] <Josh_2> phantomics: I am constructing some basic blogging software
[00:51:05] <phantomics> Cool, I've also done some web dev stuff
[00:51:43] <phantomics> Seconding Practical Common Lisp for mr_rob0t, it does the best job of introducing the language
[00:51:45] <seraphim_> i'm currently reading Practical Common Lisp. great book. fantastic writing. 10/10 would recommend to anybody new to Common Lisp.
[00:54:00] <seraphim_> i don't mean to incite passions but when i tried to do some programming in Clojure it felt like a lisp bolted onto the JVM in a way which did not suit the debugging and REPL environment a lisp is supposed to provide. professional common lispers, is there any factual truth in my argument?
[00:57:02] <White_Flame> I've only fiddled a little with clojure, but I would say that's similar to my assessment as well
[00:57:19] <_death> may want to move this question to another channel..
[00:57:59] <seraphim_> excuse me if this was off-topic. i will stop it now.
[01:01:22] <mfiano> seraphim_: absolute truth
[01:02:00] *** Quits: seraphim_ (~seraphim@122.175.143.21) (Quit: leaving)
[01:03:39] <mfiano> Heh, I didn't think it was off topic. He was asking about how interactive and natural CL was compared to alternatives. We talked about C++ compared to CL for a while just yesterday after all...
[01:06:42] *** Joins: dra (~dra@2a04:4540:640a:fc00:b0bf:71b:152a:a215)
[01:07:16] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[01:08:22] *** Quits: clos-encounters (~user@167-248-4-131.oa01.lnk01.ne.dynamic.allophone.net) (Ping timeout: 245 seconds)
[01:15:53] <mason> There's #lisp for that too now.
[01:15:57] <mason> I like the new world order.
[01:24:19] <jcowan> However, there is a CL that runs on the JVM (and Schemes that run on the JVM and the CLR).  But yes, this discussion should go to #lisp.
[01:32:07] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com) (Ping timeout: 245 seconds)
[01:32:08] <random-nick> abcl can theoretically run on the CLR
[01:32:40] <mfiano> So it's okay to discuss CL compared to C++ here, but not CL compared to Clojure. Noted.
[01:35:51] *** Joins: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net)
[01:40:54] <edgar-rft> many people here don't know C++ so they won't notice, but many people here dislike Clojure so much that they will instantly go nuts  :-)
[01:45:50] *** Quits: attila_lendvai (~alendvai@catv-176-63-30-104.catv.broadband.hu) (Quit: Leaving)
[01:46:26] *** Joins: attila_lendvai (~alendvai@catv-176-63-30-104.catv.broadband.hu)
[01:49:56] *** Quits: pve_ (~pve@188-67-148-90.bb.dnainternet.fi) (Quit: leaving)
[01:52:40] *** Quits: gaqwas (~john@dynamic-077-002-010-251.77.2.pool.telefonica.de) (Ping timeout: 240 seconds)
[01:55:19] *** Quits: attila_lendvai (~alendvai@catv-176-63-30-104.catv.broadband.hu) (Ping timeout: 268 seconds)
[01:55:19] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com)
[02:13:39] *** Joins: selwyn (~selwyn@user/selwyn)
[02:13:55] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[02:14:10] *** Joins: akoana (~ah@user/akoana)
[02:14:19] *** Joins: selwyn (~selwyn@user/selwyn)
[02:18:44] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Quit: Konversation terminated!)
[02:23:11] *** Quits: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[02:31:10] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:36:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[02:46:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:48:12] <jcowan> There is no channel (that I know of) that covers both CL and C++.  There is a channel that covers both CL and Clojure.
[02:51:19] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:53:11] *** Joins: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com)
[02:54:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[02:55:55] <White_Flame> what about #clasp? :-P
[02:57:57] *** Quits: mr_rob0t (~user@2603-6011-2303-6613-4ccd-e9be-a07b-c3c2.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:58:53] *** Joins: notzmv (~zmv@user/notzmv)
[03:00:43] *** Joins: gaqwas (~john@dynamic-077-002-010-251.77.2.pool.telefonica.de)
[03:01:03] <Bike> most of my talking about c++ in clasp in contemptuous
[03:04:09] *** Quits: frgo (~frgo@p200300deef0cee00b82a697515333831.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:04:36] *** Joins: frgo (~frgo@p200300deef0cee005457892af5ad4408.dip0.t-ipconnect.de)
[03:06:56] *** Joins: elderK (uid205007@id-205007.brockwell.irccloud.com)
[03:11:12] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:21:15] *** Joins: lottaquestions (~nick@S0106a84e3f794893.ca.shawcable.net)
[03:22:40] *** Quits: gaqwas (~john@dynamic-077-002-010-251.77.2.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:33:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[03:36:33] *** Joins: Oddity (Oddity@user/oddity)
[03:40:10] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:6130:9c4b:a486:51be) (Ping timeout: 240 seconds)
[03:44:21] *** Joins: notzmv (~zmv@user/notzmv)
[03:53:20] <mariari> wouldn't #lisp cover CL and Clojure?
[03:53:22] <mariari> since it's all lisps
[03:53:45] <hayley> Yes, then some more.
[03:54:26] *** Quits: dra (~dra@2a04:4540:640a:fc00:b0bf:71b:152a:a215) (Remote host closed the connection)
[04:05:25] *** Quits: random-nick (~random-ni@87.116.179.39) (Ping timeout: 268 seconds)
[04:22:10] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[04:25:13] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 248 seconds)
[04:28:06] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[04:38:10] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Ping timeout: 240 seconds)
[04:40:49] *** Parts: akoana (~ah@user/akoana) (Leaving)
[04:42:32] <phantomics> hey White_Flame figured out the problem I was having turned out it was something completely unrelated
[04:42:48] <lotuseater> ok good
[05:09:33] *** Quits: Fare (~fare@c-73-119-28-185.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[05:12:47] *** Quits: lottaquestions (~nick@S0106a84e3f794893.ca.shawcable.net) (Quit: Konversation terminated!)
[05:16:40] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[05:19:49] *** Joins: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net)
[05:20:23] <nij-> I wonder why `defunt` in this article isn't defined as a function, but a macro. Doesn't a function do the job well too? https://medium.com/@MartinCracauer/static-type-checking-in-the-programmable-programming-language-lisp-79bb79eb068a
[05:21:16] <hayley> I suppose it could be done as a function, but typically you would use a macro there.
[05:21:43] <hayley> Rather than DECLAIM, use PROCLAIM, and (SETF FDEFINITION) rather than DEFUN. But I suppose a macro gives better source tracking information at least.
[05:24:53] <nij-> Why does a macro give better source tracking info?
[05:26:35] <hayley> Actually, no, I retract my statement: you could not write DEFUNT as a function. The body, name, and lambda list have to remain unevaluated.
[05:27:04] <hayley> But in such a situation, the compiler would detect a DEFUN form (somehow) and attach source information to the function.
[05:39:15] <aeth> oh, one of those DEFUN variations
[05:39:20] <aeth> they all have horrible flaws
[05:39:34] <aeth> It seems incredibly easy, but it's not
[05:40:52] <aeth> My own version of that has several hundred lines (in addition to a docstring that's about 50 lines) and it's still misisng suppliedp and &aux support
[05:41:06] <aeth> and probably has a few more undiscovered bugs waiting to surface
[05:42:43] <hayley> I don't mind the external DECLAIM/DECLAREs really. Those kinds of "annotations" compose better than the macros.
[05:42:52] <aeth> eh
[05:43:03] <aeth> iirc, it messes with the M-. because now there are multiple things that it looks up
[05:43:28] <aeth> If you put it in a macro (1) you have one authoritative origin for M-. and (2) you can't have typos where you change the name of the DEFUN but not of the DECLAIM (which absolutely can happen)
[05:51:31] <lotuseater> so when to use PROCLAIM rather than DECLAIM?
[05:51:44] <aeth> I have never used PROCLAIM
[05:51:57] <aeth> It's the function-not-a-macro right? So I think it can be used to change global OPTIMIZE levels?
[05:52:05] <aeth> otherwise, I don't think I've seen it
[05:57:20] <lotuseater> i saw it just for inline, eg (proclaim '(inline foo1 foo2))
[05:57:53] <aeth> probably a bug unless at something in the REPL
[05:58:00] <aeth> because it won't eval at the right time?
[05:58:09] <lotuseater> don't know
[06:01:24] <aeth> because it will already have the DEFUN FOO defined before the PROCLAIM INLINE FOO is read
[06:01:37] <aeth> s/read/executed/
[06:02:20] <lotuseater> erm no, I meant having it in before
[06:03:44] *** Quits: nij- (~jin@2001-48F8-9021-806-AA5A-32-E995-CFC6-dynamic.midco.net) (Ping timeout: 258 seconds)
[06:03:58] <aeth> yes
[06:04:06] <aeth> I think it has to be a DECLAIM not a PROCLAIM
[06:04:48] <lotuseater> yeah ok. I saw it in PAIP, so a bit older style.
[06:09:41] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net)
[06:12:01] <nij-> hayley: That's right that you must use a macro for that. But, if we accept for quotes in function calls, then we can define defunt as a function, right?
[06:12:51] <lotuseater> then you get the list form of your new function
[06:12:59] <nij-> I've been looking for a persuasive example that demonstrates why lisp macros are superior than macros of the others. However, all examples I found so far are not persuasive to those who don't use lisp at all.
[06:18:14] <aeth> HTML
[06:18:27] <aeth> in most languages, HTML templates are embed-source-or-DSL-in-HTML-files
[06:19:01] <aeth> e.g. for a cross-language example (and there's a CL version of this too). https://mustache.github.io/mustache.5.html
[06:19:21] <aeth> but in Lisps, the natural thing to do is to express HTML as s-expressions inside of the code
[06:20:02] <moon-child> people have expressed html directly using c macros!
[06:20:07] <nij-> aeth:  Is that to answer my question/complaint?
[06:20:26] <lotuseater> moon-child: no way! crazy o_O
[06:21:02] <aeth> moon-child: Yes, but C macros lack hygiene... and it matters way more in C-style text macros than in CL-style syntactic macros, especially since CL's package namespacing and Lisp-2 nature gets around most of the hygiene issues
[06:21:22] <aeth> so I can't even begin to imagine composing that sort of thing in a serious project (plus, C isn't a good language for string manipulation...)
[06:21:48] <moon-child> lotuseater: you do it with for loops
[06:21:56] <nij-> I remember reading somewhere in PCL that promises in the beginning chapters that
[06:22:02] <lotuseater> the more complex CPP macros get the more parentheses they need, but can get broken easily
[06:22:02] <aeth> And a lot of the other ways to do things would involve literal strings and runtime execution, rather than doing it at compile time
[06:22:13] <moon-child> #define div for (int divcounter = (printf("<div>"),1); divcounter--; printf("</div>"))
[06:22:21] <nij-> "soon we will see macros defined on top of macros which are almost impossible to write without macros".. (paraphrased)
[06:22:35] <moon-child> and yeah it's not super practical
[06:22:38] <nij-> But I didn't see/pay attention to the resolution of that @@
[06:23:37] <lotuseater> there's no real difference writing functions with macros or macros with macros
[06:25:03] <lotuseater> nij-: try writing the *= operator as a function. i choose that as a simple example because the += and -= are given by INCF and DECF respectively ^^
[06:25:52] <nij-> What is *=?
[06:25:56] <nij-> As in C?
[06:26:07] <lotuseater> yes or in Python etc
[06:26:32] <nij-> lotuseater: Urgh is it an example that even a non lisper would understand?
[06:26:54] <nij-> I understand that it's not possible to write `if` as a function, but that's due to the nature of lisp.
[06:27:07] <nij-> It does not consist of an example that is persuasive for nonlispers.
[06:27:09] <lotuseater> it's just about YOU now :) and yes, I used it as such some times
[06:27:41] <nij-> I guess I know why macros are important and useful. I'm just trying to find some example that's persuasive even to nonlispers.
[06:27:53] <lotuseater> any WHY are if/and/or not useful as function?
[06:27:53] <nij-> (so then I can smug and talk them into lisp xD)
[06:27:56] <aeth> HTML is my go-to example
[06:28:04] <aeth> since it's just so radically different rather than just sugar
[06:28:08] <nij-> aeth: yes, I'm thinking about that
[06:28:25] <aeth> that you string-generate from s-expressions rather than embed the source code into raw files as a template language
[06:28:28] <aeth> generally
[06:28:44] <nij-> aeth: Or more generally, s-expressions help us lift a language from its syntax to its meaning easily?
[06:29:03] <nij-> So as long as it's dealing with some sort of translation, lisp macros shine?
[06:29:32] <lotuseater> nij-: so say if you have an answer :)
[06:30:04] <aeth> nij-: well, more generally, s-expressions help do at compile time what you'd probably otherwise do at runtime
[06:30:25] <aeth> and string-generation is just one of the simplest cases of that (you can easily just generate down to one constant string or down to a FORMAT call)
[06:32:12] <nij-> Why do we sometimes want it to be done at compile time?
[06:32:20] <aeth> well it's two things
[06:32:38] <aeth> 1. same syntax everywhere (so you want to do it more than in other languages) and 2. it's done at compile time (so it's more efficient than many approaches)
[06:32:53] <aeth> so if you have to work with some external language (HTML, CSS, JS, GLSL, etc.) you probably want to generate it
[06:33:01] <aeth> and you want to represent it the same way as the CL source
[06:33:21] <hayley> nij-: Yes, but why would you?
[06:33:32] <lotuseater> it's something like using a meta plateau for this foreign stuff
[06:35:38] <nij-> hmm i see
[06:38:46] <jcowan> It's perfectly possible to write IF as a function: (defun if* (p t e) (if p (t) (e)))
[06:40:09] <lotuseater> when it's no problem that t and e get evaluated
[06:40:17] <aeth> usually anything that you can write as a function can be written as a macro if you're okay with quoting, lambdas, etc.
[06:40:22] <lotuseater> in before or unneccessary
[06:40:23] <aeth> sorry, the other way around
[06:40:29] <aeth> usually anything you can write as a macro can be written as a function
[06:40:35] <aeth> it'll just look uglier
[06:40:45] <nij-> jcowan: (if* t 1 (loop))
[06:40:54] <nij-> It never returns 1 for me.
[06:41:07] <aeth> in jcowan's case, if* is designed to take in lambdas iirc
[06:41:12] <jcowan> Just sio
[06:41:13] <jcowan> so
[06:41:18] <aeth> you still get the delayed evaluation, but it looks uglier
[06:41:22] <jcowan> like Smalltalk
[06:41:25] <nij-> i c
[06:42:07] <nij-> If sexprs are so great, why isn't there a yaml that's sexp..?
[06:42:08] <aeth> and the other thing (other than taking in LAMBDAs) you can do instead of a macro is EVAL something that's quoted, but that won't always work, and it's not a good style
[06:42:21] <jcowan> That's partly because (lambda () ...) is much more verbose than Smalltalk's [...] notation
[06:42:21] <aeth> Although if you don't need to EVAL it you could just walk through it, which is safer.
[06:42:26] <hayley> nij-: Why isn't there an orange that's an apple?
[06:42:37] <aeth> e.g. the HTML macro we were talking about earlier could also be an HTML function that just takes in quoted s-expressions
[06:42:54] <jcowan> There are: the golden apples oof the Hesperides
[06:43:00] <nij-> hayley: \ @@ /??
[06:43:02] <lotuseater> so nij- how do you write the function for *= ?
[06:43:03] <hayley> I wonder how many people I could trip up in a pure message-passing Lisp wherein IF is a macro defined such that (if p t e) == (if: p (lambda () t) (lambda () e))
[06:43:49] <aeth> Macros are basically just the last level of polish
[06:43:56] <hayley> nij-: S-expressions and YAML are both representations of some tree structure. You don't have to do anything to get something "YAML-like".
[06:45:10] <nij-> lotuseater:  tried (defun *= (sym val) (setf sym (* sym val))) but it didn't work.
[06:45:22] <nij-> The form inside cannot get the address outside.
[06:45:32] <lotuseater> sad
[06:45:41] <hayley> (define-modify-macro *= *)
[06:45:51] <nij-> hayley: Oh by that I mean.. why don't people use some sexp-based lang instead of yaml.
[06:46:09] <lotuseater> hayley: cheater :P he shall figure out himself why
[06:46:27] <nij-> I know why you can't use a function for *=..
[06:46:27] <jcowan> People can and do.
[06:46:36] <lotuseater> You do?
[06:46:40] <jcowan> Where is "is an error" defined in the CLHS?
[06:46:43] <nij-> jcowan: ?! Any de facto lang based on sexp?!
[06:46:59] <lotuseater> pff de facto
[06:47:29] <hayley> Why the ceremony for another "language"? It's just another damn tree representation.
[06:47:54] <aeth> technically, CL isn't a tree
[06:48:03] <aeth> it's in the /topic
[06:48:08] <aeth> #1=(programmable . #1#)
[06:48:22] <hayley> beach tends to modify the printer so that [ blah :initarg-name value ... ] will read an object by (make-instance 'blah :initarg-name value ...) and an object will be written like that.
[06:49:03] <hayley> That requires no additional processing on either end, other than READ and WRITE. Nothing more really needs to be specified.
[06:49:14] <jcowan> https://people.csail.mit.edu/rivest/Sexp.txt never made it to an RFC
[06:51:20] <nij-> Why didn't it made to an rfc?!
[06:52:41] <nij-> It's so sad that it didn't.. why jcowan
[06:52:53] <jcowan> Politics, no doubt
[06:53:31] <lotuseater> nij-: so how to write *= without having DEFINE-MODIFY-MACRO ?
[06:54:09] <nij-> As a macro? lotuseater
[06:54:15] <lotuseater> I now, I'm annoying as always.
[06:54:22] <nij-> jcowan: Is it too late? Someone can push it again to an rfc?
[06:54:26] <lotuseater> Yes, so *how*?
[06:54:54] <lotuseater> PUSH is also not a function :) but VECTOR-PUSH is indeed
[06:54:58] <jcowan> Presumably yes.  The draft has long since expired, as it's dated 1997
[06:56:35] <nij->  lotuseater (defmacro *= (sym val) `(setf ,sym (* ,sym ,val)))
[06:57:21] <lotuseater> okay, progress
[06:58:08] <nij-> :)
[06:58:56] <lotuseater> and of course this is not just bound to be used on symbols, but also to places
[07:01:05] <lotuseater> so now you can think on how to write DEFINE-MODIFY-MACRO ;)
[07:03:58] <lotuseater> and abstracting things like that, even locally when they're used over and over is even safer
[07:07:14] <jcowan> https://github.com/s-expressions/pose is a suggestion for an S-expressioh syntax that works in all Lisps with just READ and WRITE/PRINT/DISPLAY as the case may be.  THere are also implementations for other languages there
[07:11:28] *** Joins: pillton (~user@2405:b000:300:b0::2fba)
[07:16:18] *** Joins: prxq_ (~quassel@x4db9061d.dyn.telefonica.de)
[07:16:25] <nij-> jcowan: Hmm.. I see pose does provide a spec. But what is it, really?
[07:16:42] <nij-> It seems to give some codes in various langs. What is it doing?
[07:19:07] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[07:20:01] *** Quits: prxq (~quassel@x4dbda165.dyn.telefonica.de) (Ping timeout: 258 seconds)
[07:31:16] <beach> Good morning everyone!
[07:32:25] <nij-> Good morning beach.
[07:33:20] <lotuseater> Ohai beach :)
[07:36:00] *** Joins: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de)
[07:37:57] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[07:38:21] *** Joins: Skyfire (~pyon@user/pyon)
[07:51:10] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 240 seconds)
[07:53:17] <kakuhen> For some reason, READ-BYTE is messing with the endianness of byte I am reading out of a file
[07:53:52] <moon-child>  what do you mean?
[07:53:52] <kakuhen> I have a file with magic number 0x664C6143, and the following is what I did
[07:54:40] <kakuhen> (with-open-file (s "~/Music/sample.flac" :direction :input :element-type '(unsigned-byte 32)) (format t "~S~%" (read-byte s))) ; => #x43614C66
[07:54:58] <moon-child> 'unsigned-byte 32' is your problem
[07:55:10] <kakuhen> oh
[07:55:26] <beach> moon-child: Why?  That should work, no?
[07:55:51] <moon-child> beach: it is reading a 32-bit byte, and interpreting it in the native endian
[07:56:03] <moon-child> where the original file is an endianness-agnostic sequence of octets
[07:56:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:56:17] <beach> Ah, so that's not a problem then.  It is doing it right.
[07:57:35] <hayley> When in doubt, use a (unsigned-byte 8) stream and have the Nibbles library read with the right endianness.
[07:58:05] <hayley> i.e. (nibbles:read-ub32/be s)
[07:59:59] <kakuhen> ooh this seems like a convenient library for what I want to do; thanks hayley
[08:00:21] <beach> kakuhen: Which one is the first byte of the file, and what is the native endian-ness of your system?
[08:00:44] <kakuhen> the first byte of the file is 0x66 and my system is little-endian
[08:00:54] <beach> Then READ-BYTE is not messing with the endian-ness.
[08:01:00] <moon-child> it's clearer as characters: fLaC
[08:01:14] <moon-child> you want to read individual octets
[08:01:19] <beach> kakuhen: That is the right answer.
[08:01:32] <moon-child> (at least for that part; by the time you get to samples, go bigger and do as hayley suggests)
[08:02:03] <kakuhen> yeah i naively thought I could just specify and (unsigned-byte 32) and read-byte once to ensure the magic number is right
[08:02:12] <kakuhen> thanks for the help, you three
[08:02:18] <kakuhen> specify an*
[08:02:20] <beach> I still think it is important to establish that READ-BYTE is doing the right thing.
[08:02:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:07:54] <White_Flame> phantomics: what was it, out of curiosity?
[08:20:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[08:25:10] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[08:34:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:36:36] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[08:50:19] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:50:48] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:01:05] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[09:03:27] *** Joins: gaqwas (~john@dynamic-095-117-101-222.95.117.pool.telefonica.de)
[09:06:34] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:09:58] *** Joins: derelict (~derelict@user/derelict)
[09:14:12] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[09:16:50] *** Quits: gaqwas (~john@dynamic-095-117-101-222.95.117.pool.telefonica.de) (Ping timeout: 268 seconds)
[09:24:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:25:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:26:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:29:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[09:43:17] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:1936:a17c:e2f4:3ca)
[10:00:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:09:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[10:27:06] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[10:28:28] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[10:31:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:42:17] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[10:42:48] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[10:46:17] *** Quits: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[10:47:43] <kakuhen> hayley: I don't understand the documentation for nibbles:read-ub32/le-into-sequence, or maybe I am using it wrong
[10:48:16] *** Joins: silasfox (~sbv@xdsl-78-35-71-64.nc.de)
[10:48:31] <kakuhen> I made an octet-vector with 8 elts in it, then decided to invoke this function with the vector. It copies one element fine then signals an error the remaining stuff
[10:49:35] <hayley> "Each element is a 32-bit unsigned integer read in little-endian order." Do you not need a (unsigned-byte 32) array?
[10:49:45] <kakuhen> oh i am dumb
[10:51:05] <kakuhen> I misinterpreted "STREAM must have an element type of (UNSIGNED-BYTE 8)" to mean that the vector should also match the element type of the stream, but that is false
[10:57:32] *** Quits: silasfox (~sbv@xdsl-78-35-71-64.nc.de) (Ping timeout: 245 seconds)
[10:58:27] *** Joins: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de)
[11:07:45] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:42b:bcd7:5e82:c549)
[11:21:30] *** Joins: gaqwas (~john@dynamic-095-117-101-222.95.117.pool.telefonica.de)
[11:30:52] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[11:31:18] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[11:31:57] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:1936:a17c:e2f4:3ca) (Remote host closed the connection)
[11:33:11] *** Joins: derelict (~derelict@user/derelict)
[11:33:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[11:34:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:34:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[11:35:28] *** Lord_of_Life_ is now known as Lord_of_Life
[11:36:02] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[11:39:43] *** Joins: pve (~pve@176-93-110-36.bb.dnainternet.fi)
[11:42:32] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:59:46] *** Joins: Krystof (~user@81.174.155.115)
[12:03:51] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[12:16:08] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:17:22] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[12:17:46] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:26:10] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[12:29:47] *** Joins: heisig (~heisig@p579c8ec5.dip0.t-ipconnect.de)
[12:35:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:37:32] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:37:52] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[12:38:40] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:52:35] *** Joins: makomo (~makomo@user/makomo)
[13:06:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:06:49] *** Quits: micro (~micro@user/micro) (Quit: Lost terminal)
[13:07:35] *** Joins: micro (~micro@user/micro)
[13:24:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:24:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:29:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[13:33:38] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[13:33:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:34:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:34:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:35:00] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[13:42:12] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:42b:bcd7:5e82:c549) (Remote host closed the connection)
[13:42:25] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:add3:6372:9a19:8b49)
[13:49:44] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:add3:6372:9a19:8b49) (Quit: Leaving)
[13:57:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[13:59:28] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[14:01:04] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net)
[14:11:04] *** gpiero_ is now known as gpiero
[14:11:33] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[14:20:27] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 245 seconds)
[14:23:01] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[14:23:42] *** Quits: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de) (Quit: Leaving)
[14:24:46] <flip214> https://github.com/mbattyani/cl-pdf/blob/master/zlib.lisp contains a few #+ cases; I've got :USE-SALZA2-ZLIB in *features*, :USE-NO-ZLIB is not included, but COMPRESS-STRING is the #+use-no-zlib one? (according to the disassembly)
[14:25:12] *** Joins: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de)
[14:25:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 258 seconds)
[14:27:17] *** Joins: Oddity (Oddity@user/oddity)
[14:27:50] <flip214> removing fasl cache and recompiling doesn't help
[14:27:53] <flip214> hrmpf
[14:30:34] <lisp123> flip214: Are you using ASDF? By the way it has a way to force recompliation (add :force t to your asdf command)
[14:41:45] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 248 seconds)
[14:41:51] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[14:42:32] <flip214> lisp123: QL, which uses ASDF... but I already touched the ASD files as well, and removed fasls, so it got recompiled
[14:43:25] <lisp123> (Sorry because I'm a bit new to ASDF), does that mean you manually removed the fasls?
[14:44:10] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[14:45:16] <flip214> yes
[14:45:22] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:46:00] <flip214> now I touched the ASD again, recompiled, and it works? what's different to the last 15 tries?
[14:46:53] <lisp123> No, just that if you call ASDF directly (and perhaps there's an option in QL) you can simply tell it to recompile everything instead of removing the files first
[14:47:11] <lisp123> Won't solve your problem, but hopefully a quality of life improvement over the long run
[14:47:28] <mfiano> asdf will recompile everything in a module that has a newer timestamp
[14:47:45] <mfiano> The asd itself is the root module, so touching it works for the whole system to be recompiled
[14:48:03] <mfiano> but if you modify single files, only that file and files thereafter in the same module will be recompiled
[14:48:10] <mfiano> (if you use multiple modules)
[14:55:55] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[14:56:16] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[14:56:51] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[14:59:48] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:03:04] *** Quits: frgo (~frgo@p200300deef0cee005457892af5ad4408.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:03:32] *** Joins: frgo (~frgo@p200300deef0cee005457892af5ad4408.dip0.t-ipconnect.de)
[15:04:23] *** Quits: pillton (~user@2405:b000:300:b0::2fba) (Ping timeout: 256 seconds)
[15:04:37] <mfiano> I'm struggling to remember the correct FORMAT incantation to conditionally include part of the string (and conditionally the "-" delimiter in this case): (format nil "test..." nil) => "test", (format nil "test..." "foo") => "test-foo"
[15:08:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:13:44] <flip214> mfiano: http://www.lispworks.com/documentation/HyperSpec/Body/22_cgb.htm
[15:15:33] <nij-> Can I safely use quicklisp and ultralisp at the same time?
[15:15:41] <nij-> I'm afraid that they will pollute each other.
[15:16:14] <mfiano> flip214: Yes, I'm trying to figure out the above semantics with that page open
[15:16:43] * mfiano needs coffee it seems
[15:21:23] <Xach> nij-: yes. when there is something available by the same name in each, you can choose which has priority.
[15:21:52] *** Quits: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[15:21:56] <flip214> (format nil "test~@[~a~]" "foo")?
[15:22:21] <mfiano> flip214: no condition "-" there
[15:22:27] <mfiano> conditional*
[15:22:38] <flip214> (format nil "test~@[-~a~]" "foo")?
[15:22:39] <flip214> sorry
[15:22:52] <nij-> Xach: is there something like (ql:quickload :pkg1 :from 'quicklisp)?
[15:23:02] <Xach> nij-: no.
[15:23:16] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[15:23:28] <mfiano> thanks
[15:23:38] *** Joins: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de)
[15:23:44] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[15:23:47] <flip214> for systems in multiple distributions, does QL use version numbers? If yes, can I prepend an epoch to make my version "better"? (like in Debian)
[15:24:11] <Xach> flip214: there is a preference value, an integer. it can be set at the dist level, the project level, or the system level.
[15:24:49] <Xach> it defaults to dist-wide and is initialized with the universal-time at which the dist was installed.
[15:24:56] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:25:00] <mfiano> Xach: Can you remove my feed? (not sure if you got the last request)
[15:25:02] <flip214> mfiano: try (macroexpand-1 '(formatter "test~@[-~a~]"))
[15:25:22] <Xach> mfiano: from planet lisp?
[15:25:25] <mfiano> Yes
[15:25:28] <Xach> i can
[15:25:55] <mfiano> I am moving it to gemini, and i don't want to use a script to create a feed that would look decent for the web
[15:26:07] <Xach> it is done
[15:26:11] <mfiano> thanks
[15:32:36] * hayley uploaded an image: (327KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/SszdacCuiqbBGEDWYVgkhomj/randy-smith.png >
[15:34:51] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[15:36:04] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[15:36:06] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:36:41] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 248 seconds)
[15:43:42] <pjb> flip214: mfiano: https://termbin.com/ono7
[15:45:53] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[15:46:16] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Client Quit)
[15:47:10] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[15:50:03] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[15:51:17] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[15:53:38] <MetaYan> mfiano: Not what you asked for, but the format function sure is pretty amazing: (format nil "test~{~@[-~a~]~}" '("foo" "bar" "ding"))
[15:56:02] <jackdaniel> format - the operator where the readability of perl meets the homoiconity of c
[15:58:32] <gin> Why does this evalute to 2? (let ((nums (read-from-string "'(10 20 30 40 50)"))) (length nums)) => 2
[15:58:52] <mfiano> because of the QUOTE
[15:58:53] <gin> But this one evaluates to 5. (let ((nums (read-from-string "(10 20 30 40 50)"))) (length nums)) => 5
[15:59:09] *** Joins: knobo (~knobo@2a05:9cc4:7e:6415:8371:c7d3:9063:8ea7)
[15:59:24] <gin> mfiano: where does the 2 come from? 2 of what?
[15:59:33] <jackdaniel> '(10 20 30 40 50) is in fact (quote '(10 20 30 40 50))
[15:59:40] <Xach> jackdaniel: BOO
[15:59:44] <jackdaniel> yeah, without '
[15:59:53] <gin> jackdaniel: thanks
[16:00:00] <jackdaniel> (quote (10 20 30 40 50))
[16:07:09] <_death> gin: try (write (read-from-string "'(10 20 30 40 50)") :pretty nil)
[16:10:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-3CCB-dynamic.midco.net) (Read error: Connection reset by peer)
[16:14:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[16:21:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:22:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:27:32] *** Quits: silasfox (~sbv@2a0a-a540-533f-0-bad8-6c2f-3a71-f612.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[16:27:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[16:28:38] *** Joins: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de)
[16:28:42] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[16:28:46] <Qwnavery> #lispcafe
[16:29:41] * edgar-rft hands Qwnavery a mug of coffee with lots of lisp in it
[16:29:55] * Qwnavery sips
[16:30:26] <Qwnavery> ^_^
[16:31:56] <gin> what do you think of the indentation of the last parentheses here: https://plaster.tymoon.eu/view/2596#2596 is it bad? how else do you make it easy to add new entries in between without the closing paren on its own line?
[16:33:08] <beach> gin: It is bad.  What you do is C-M-f and then RET
[16:34:33] <gin> beach: thanks
[16:34:52] <beach> Sure.
[16:35:37] *** Quits: heisig (~heisig@p579c8ec5.dip0.t-ipconnect.de) (Quit: Leaving)
[16:40:12] <gin> my workflow is to copy one plist, then paste it, then edit it for the new entry. so looks like my workflow is going to be C-M-k to cut a plist, C-/ to undo the cut, C-M-f to put the cursor after the last plist, RET to create a new line, then C-y to paste it.
[16:42:23] <_death> gin: I sometimes do that (with the last parenthesis)
[16:43:03] <beach> _death: Yes, but that was not the question.
[16:43:21] <gin> _death: You mean you sometimes leave the last paren on its own line?
[16:43:41] <_death> well, my answer is that it may be practical and therefore not bad
[16:44:26] <_death> gin: yes, for cases like you've shown
[16:44:42] <gin> _death: thanks. good to know that.
[16:45:44] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[16:48:56] <beach> It is even better to be comfortable with your editor commands.  One thing I sometimes do is I insert the entry before the last one, and when I am done, I do C-M-t.
[16:49:59] <beach> I mean, you don't want to leave that dangling parenthesis there anyway, and it is hard to decide when you are done.  So inevitably, you are going to have to insert when the parenthesis is on the same line at some point.
[16:50:53] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[16:55:44] <_death> I agree that the dangling parentheses (it's usually more than one) are less aesthetically pleasing, so if you don't mind putting the effort or don't even feel there is an effort, it makes sense.. every now and then, though, I have cases where adding/removing entries happens frequently enough that I just leave them dangling.. usually it's when the entries are single lines though, I think
[16:58:45] <hayley> I have a habit of addling danglies after a line comment describing what code I need to write eventually. But no one ever sees them, because I eventually write that code before committing.
[16:59:30] <hayley> Say, something like (when blah <newline> ;; Handle blah by frobbing the quux <newline> )
[17:00:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:01:23] <_death> if I looked at my snippets directory, which has 566 lisp files.. there are 14 files with dangling-parens
[17:03:30] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[17:09:40] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[17:11:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:12:15] *** Joins: Fare (~fare@2601:184:4a7f:995c:96e9:1de8:a8a1:b15b)
[17:19:33] *** Quits: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[17:20:54] *** Joins: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de)
[17:25:49] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[17:31:37] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:37] *** ChanServ sets mode: +o Bike
[17:38:28] <gin> beach: C-M-t is very useful. thanks! I think I will use this one from now on.
[17:39:38] <beach> Sure.
[17:43:42] <lisp123> https://github.com/unjordy/LispM-Font Fonts from the Lisp Machine
[17:43:57] <lisp123> I tried using it on my Emacs, but looks terrible. Not sure if its an Apple issue
[17:44:17] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[17:45:46] <hayley> Yes, it is a bitmap font really, but someone traced it and you really have to suffer trying to a. disable antialiasing and b. get the pixels to match up.
[17:46:52] <lisp123> hayley: I see, thanks. Oh well
[17:46:58] <hayley> I ran with it for a while, but then gave up and eventually used Computer Modern Typewriter Text. Which is funny, because that font does have embedded bitmaps or something.
[17:47:36] <lisp123> I am using Courier New and it is _nice_
[17:48:07] <beach> lisp123: Why would you want the fonts from the Lisp Machine?
[17:48:26] <lisp123> I will have a look at Computer Modern Typewriter Text - likely will work well with LaTeX
[17:49:14] <hayley> I guess the font looks fine. Though my favourite old bitmap font would have to be Cream from Smalltalk.
[17:49:27] <lisp123> beach: I am writing some documentation and wasting time on design :) I got the background color from the cover of CLTL2E - #9DC2B0
[17:50:07] <hayley> There was a vector version of it for printers, but I only found one picture of it. I failed miserably at trying to remake it in Metafont and ended up doing my own thing.
[17:50:45] <lisp123> hayley: Oh nice, I have been thinking of getting into MetaFont. I assume it takes a lot of time
[17:51:27] <lisp123> I would also like a font that matches some of the academic papers from the 60s - 80s, (sorry for going off topic), if you know something that would work well there?
[17:51:57] <hayley> In my opinion, it is easier than any other technique for font making, because it is a structured programming language, and it rather simulates a pen tracing some path, instead of having you specify an outline of the imaginary pen.
[17:52:51] <lisp123> I see, that's interesting
[17:52:54] <akater[m]> gin: I often leave dangling parentheses in these cases.  Navigating to the end of lists so written is faster if you use avy.
[17:53:44] <hayley> lisp123: Well, I don't use any custom fonts in my documentation. Some of the articles I've written are styled with one title font (Computer Modern Typewriter Text Variable-Width) to match the site logo, but that is it.
[17:55:15] <hayley> See https://cal-coop.gitlab.io/netfarm/documentation/ - I took inspiration from books I had for the layout of small things like function definition lines, but it is mostly unique.
[17:57:08] <lisp123> hayley: It is very nice. Which program did you use?
[17:57:41] <lisp123> (by the way I learnt org mode can be really helpful here because it can output syntax highlighted & indented lisp code - without javascript or anything fancy)
[17:57:54] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[17:58:21] <hayley> I used to use LaTeX and htlatex, but found the output contained too many errors to fix, so I rewrote everything in Racket's Scribble language.
[17:59:09] <hayley> Both the HTML and TeX outputs of Scribble have a few errors, but I can "fix" them with a few passes of sed unfortunately.
[18:00:08] *** Quits: knobo (~knobo@2a05:9cc4:7e:6415:8371:c7d3:9063:8ea7) (Quit: Client closed)
[18:00:15] <lisp123> hayley: Thanks, I will have a look at Scribble. I tweaked org mode mostly, I think I was able to get basically what I wanted from it, I may try replicating (or somewhat similar) to what you have in Org and see if I can do it
[18:00:48] <hayley> Sure, org mode should work well too.
[18:03:00] <lisp123> Love the <- prev up next ->, those arrows are perfect. I was spending so much time to get that part looking nice
[18:04:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:08:47] <gin> is there a function that can sum numbers in a list? example: (multi-sum '(10 20 30)) => 60
[18:09:02] <Bike> (reduce #'+ '(10 20 30))
[18:09:22] <gin> oh! nice. thanks Bike
[18:09:30] <Bike> glad to help
[18:13:04] <gin> any review comments on this? I want to pick :c value from each plist and sum them up. (defparameter *plist* '((:c 10) (:c 20) (:c 30))) (reduce #'+ (loop for entry in *plist* collect (getf entry :c)))
[18:14:20] <akater[m]> gin: That's not a plist.
[18:14:41] <gin> bad variable name. should have been *list-of-plists*.
[18:14:46] <beach> I think gin meant *plists* in plural.
[18:14:56] <gin> yes, *plists*
[18:15:37] <gin> any other review comments apart from the bad name. just curious to know if my code is unnecessarily complicated or if that is how you would do it too.
[18:16:00] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[18:16:02] <beach> Looks fine to me.
[18:16:14] <gin> thanks beach
[18:16:31] <beach> Oh, and I would not call the loop variable ENTRY, but PLIST.
[18:16:44] <beach> So you have (loop for plist in *plists*...)
[18:17:02] <beach> That a very nice pattern, i.e., (loop for <singular-noun> in <plural-noun>...)
[18:17:58] <Bike> gin: if a plist doesn't have :c there will be an issue. i don't know if you need to worry about that.
[18:18:49] <Xach> That could be solved by switching to something like :key (rcurry 'getf :c 0)
[18:18:57] <akater[m]> gin: `(loop for (&key c) in '((:c 1) (:c 2)) sum c)`
[18:19:03] <Xach> so many options
[18:19:36] <Bike> loop destructuring doesn't accept lambda list keywords, does it?
[18:19:41] <beach> akater[m]: I think each plist in the example was simplified.
[18:19:46] <akater[m]> But I'm not sure it's standard,
[18:19:46] <Bike> that "works" because it treats &key as a variable
[18:20:10] <beach> Bike is right.
[18:20:10] <Bike> so (loop for (&key c) in '((:c 1) (:d 7)) sum c) => 8
[18:20:39] <beach> Hence my remark that the example was simplified.
[18:20:56] <akater[m]> And `loop for (&key (c 0)) â€¦` doesn't work for me, sadly.
[18:21:23] <beach> akater[m]: It doesn't work because of what Bike said.
[18:22:01] <gin> beach: akater[m]: yes, they were simplified plists
[18:23:00] <akater[m]> Yes, it doesn't destructure, sad.
[18:23:05] <beach> gin: Did you see my remark about singular/plural in the LOOP clause.
[18:24:34] <gin> beach: yes, I used it in my code. in my real code it isn't named *plists* of course. it is named *orders*, so (loop for order in orders ...) looks nice. thanks for the the pattern.
[18:24:54] <beach> Ah, yes, I see.
[18:25:24] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-CAE5-dynamic.midco.net)
[18:26:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:27:05] *** Joins: tyson2 (~user@142.112.141.177)
[18:27:19] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[18:28:35] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[18:30:52] <hexology> What about this? (reduce '+ (loop for entry in *data* collect (getf entry :c 0)))
[18:31:11] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[18:31:18] <hexology> oops, #'+
[18:31:23] <pjb> (loop for entry in *data* sum (getf entry :c 0)) is simplier.
[18:31:27] <beach> Unnecessary consing, no?
[18:31:33] <pjb> '+ or #'+ is the same when it's cl:+
[18:33:47] <hexology> it seems like it should be valid for any function, being a valid "function designator" http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_f.htm#function_designator
[18:36:16] <hexology> i didn't actually realize this. it looks like REDUCE, MAPCAR, etc support "designators" as well as actual function objects. and i guess the only valid "designator" for a function is a symbol of the function name. but it also looks like the designator/symbol thing only works if the function is defined in the global environment.
[18:36:38] <hexology> i can't tell what the difference is between a "function designator" and an "extended function designator" http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_e.htm#extended_function_designator
[18:36:49] <hexology> the wording is different so i must be missing a subtle difference
[18:36:53] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[18:37:20] <Bike> an extended function designator can be a "function name", which can include lists (SETF whatever)
[18:37:42] <Bike> a "function designator" can only be a function or a symbol
[18:38:07] <Bike> and yes, it's only global lookups
[18:38:17] <Bike> also what beach meant by unnecessary consing was the loop.
[18:39:15] <hexology> right
[18:39:45] <hexology> re: "function name", what do they mean by "a list (SETF symbol)"?
[18:40:08] <Bike> um, just that. i don't know how to explain it otherwise. the name of a setf function.
[18:40:25] <Bike> a list whose first element is the symbol SETF and whose second element is a symbol.
[18:42:37] <rudi> Stackoverflow to the rescue! https://stackoverflow.com/a/11458640 shows how to define such a function
[18:42:50] <hexology> huh... https://stackoverflow.com/a/51110778/2954547 https://lisp-journey.gitlab.io/blog/functions-tutorial-arguments-multiple-values-more/#setf-functions
[18:43:02] <hexology> your answer is better rudi thank you
[18:47:40] <hexology> so as per <http://www.lispworks.com/documentation/HyperSpec/Body/05_abi.htm>, if i do (DEFUN (SETF foo) ...), then (SETF (foo 2 3) 1) is equivalent to (FUNCALL (FUNCTION (SETF foo)) 1 2 3)
[18:47:46] <hexology> so this lets you "hook" into SETF'ing certain things
[18:48:29] <beach> It's that (setf (bla ...) ...) by default expands to (funcall #'(setf bla) ...)
[18:48:54] <hexology> oh
[18:49:13] *** Joins: d4ryus1 (~d4ryus@ppp-188-174-25-87.dynamic.mnet-online.de)
[18:49:19] <Xach> there is a funny bug in allegro - something like (setf (bla bloo) 42) will call compiler macros on BLA but not on (SETF BLA).
[18:49:31] <beach> hexology: Try (macroexpand-1 '(setf (bla x) y)) for instance.
[18:49:38] <Bike> huh. that's pretty weird.
[18:49:54] <Bike> with how setf is usually defind it's hard to understand how that would happen
[18:50:06] <Xach> Allegro - Far From Usual
[18:50:41] <hexology> is that where the "f" comes from?
[18:51:43] <beach> "that"?
[18:52:25] *** Quits: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de) (Ping timeout: 248 seconds)
[18:53:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[18:53:17] <pjb> hexology: local (lexical) functions are  like local lexical variables: their name may be optimized out by the compiler.
[18:53:44] <pjb> (defun foo () 'outside)  (mapcar 'funcall (flet ((foo () 'inside)) (list 'foo #'foo))) #| --> (outside inside) |#
[18:54:11] <pjb> While of course: (defun foo () 'outside)  (mapcar 'funcall (list 'foo #'foo)) #| --> (outside outside) |#
[18:54:30] <pjb> so whether 'foo designates the same function as #'foo depends on the lexical context.
[18:54:42] <lotuseater> hexology: the "f" stands for "form" afaik
[18:55:01] *** Joins: shka (~herr@109.231.62.239)
[18:55:11] <pjb> But since it's forbidden to write something like (flet ((identity (x) x)) #'identity)   then 'identity designates always the same function as #'identity (cl:identity).
[18:56:45] <nij-> While using ultralisp, if I want to use an older version of some system, is it easily doable?
[18:58:38] <hexology> i see.. so the function designator has to refer to global definitions only, in order to permit this kind of compiler optimization
[18:58:49] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[18:58:49] <hexology> i will have to try to wrap my head around SETF another time
[18:59:59] <lotuseater> yeah depends how far you are now, first it would totally be enough using the pre- or automatically defined ^^ a powerful facility
[19:00:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:00:40] <lotuseater> Xach: and the bug still remains?
[19:01:15] <hexology> it seems like the setf-function thing is good for writing CLOS "setters" https://lispcookbook.github.io/cl-cookbook/clos.html#controlling-setters-setf-ing-methods
[19:03:04] <beach> hexology: A method on a generic function named (SETF FOO) is automatically generated when you write :ACCESSOR FOO in a slot description of DEFCLASS.
[19:03:10] <lotuseater> when you use :accessor it's generated for you by the DEFCLASS macro
[19:03:20] <beach> Heh.
[19:03:22] <lotuseater> beach: ack
[19:03:28] <rudi> But it
[19:03:49] <rudi> ... but it's nice to be able to write :around functions on such functions etc.
[19:04:24] <beach> Indeed.
[19:05:01] <lotuseater> beach: So the difference is, that it will be a method, right? Rather than eg (SETF AREF) which is a function.
[19:05:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-CAE5-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:06:12] <beach> Well, (SETF FOO) is a function too, but a generic one.
[19:06:13] <Xach> lotuseater: yes - it is at least 14 years old - https://comp.lang.lisp.narkive.com/3yATs3ub/setf-compiler-macro-functions-in-allegro-cl
[19:06:16] <rudi> every method is a function, but yes - you can write (defmethod (setf foo) :around (...) ...)
[19:06:32] *** Joins: pve_ (~pve@87-93-243-46.bb.dnainternet.fi)
[19:06:43] <lotuseater> so the bug can now go to jail for being naughty
[19:07:30] <lotuseater> oh by a dude named Wozniak :)
[19:08:01] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[19:08:57] <beach> Probably a common Polish name I would think.
[19:09:10] *** Quits: pve (~pve@176-93-110-36.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[19:14:49] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[19:18:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 268 seconds)
[19:19:39] *** Joins: selwyn (~selwyn@user/selwyn)
[19:19:54] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:20:19] *** Joins: selwyn (~selwyn@user/selwyn)
[19:22:40] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:23:53] *** pve_ is now known as pve
[19:25:02] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-CAE5-dynamic.midco.net)
[19:25:40] *** Quits: random-nick (~random-ni@87.116.165.220) (Read error: Connection reset by peer)
[19:26:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-CAE5-dynamic.midco.net) (Client Quit)
[19:28:40] *** Quits: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[19:29:52] *** Joins: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de)
[19:35:12] *** Joins: Alfr (~Alfr@user/alfr)
[19:37:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:41:21] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:45:59] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[19:47:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:48:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:50:17] <Josh_2> Hi Hi
[19:52:56] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:53:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:53:31] <Josh_2> mfiano: I saw that you made your game engine public, is that the one you had been working on for a long time?
[19:54:54] <mfiano> Yeah I made it public to link jeosol a file in it...it's a rewrite of the one that I've been working on for a long time that only took me a couple days...and there is lots I learned since then that I want to redo still :)
[19:58:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:58:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:59:54] <Josh_2> Very cool! Weren't you running into some performance problems with the last one?
[20:01:01] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:06:50] <mfiano> Yeah, due to method dispatch
[20:08:10] *** Quits: silasfox (~sbv@2001-4dd6-a194-0-6e8a-d9bc-7d25-2e68.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[20:14:36] *** Joins: lisp123_ (~lisp123@45.86.200.16)
[20:14:46] *** Quits: tyson2 (~user@142.112.141.177) (Ping timeout: 252 seconds)
[20:17:17] <mfiano> In other news, I highly recommend people interested in a sane solution to versioned dependencies to check out CLPM as a nice alternative to Quicklisp. I switched to it recently and the amount of time it saves me and other collaborators I work with is very nice.
[20:17:32] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[20:17:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[20:18:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:20:17] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Quit: Leaving)
[20:20:55] *** Joins: selwyn (~selwyn@user/selwyn)
[20:21:01] *** Joins: lisp123 (~lisp123@45.130.83.191)
[20:22:14] *** Joins: psycomic (~psycomic@2a01cb0588c5e400a0f185077ca9da74.ipv6.abo.wanadoo.fr)
[20:22:15] *** Joins: random-nick (~random-ni@87.116.165.220)
[20:22:43] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[20:23:30] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[20:24:07] *** Quits: lisp123_ (~lisp123@45.86.200.16) (Ping timeout: 252 seconds)
[20:25:54] <shka> mfiano: it replaces quicklisp or just builds on top of it?
[20:26:05] <mfiano> Replaces
[20:26:29] <shka> i will have to check it out
[20:26:42] <shka> package versioning is a problem honestly
[20:27:08] <etimmons> But can also use QL metadata so you still have every system in QL available to you.
[20:27:48] <mfiano> It still benefits from the Quicklisp dists (it can use the metadata as a source, just like git, etc), and it knows from which dist it got it from, so your lockfile that you distribute has reproducible versions for anyone building your code.
[20:29:16] <shka> oh, this is SMART
[20:30:23] <mfiano> There is a matrix room if you have any questions about it (don't think there is an IRC channel...yet): https://matrix.to/#/#clpm:matrix.org
[20:31:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:31:04] <shka> thanks
[20:34:17] *** Quits: Fare (~fare@2601:184:4a7f:995c:96e9:1de8:a8a1:b15b) (Remote host closed the connection)
[20:34:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:39:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:42:02] *** Joins: selwyn (~selwyn@user/selwyn)
[20:52:10] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[20:52:42] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[21:09:09] *** Joins: tyson2 (~user@70.31.33.162)
[21:14:42] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[21:16:34] *** Joins: aeth (~aeth@user/aeth)
[21:22:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:28:40] *** Quits: lad (~lad@user/lad) (Ping timeout: 240 seconds)
[21:32:13] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[21:35:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:37:57] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:38:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:40:12] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:40:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:42:54] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:43:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:45:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:46:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:50:13] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:53:22] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[21:54:04] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[21:59:20] *** Joins: lad (~lad@user/lad)
[22:09:38] *** Quits: lisp123 (~lisp123@45.130.83.191) (Remote host closed the connection)
[22:10:11] *** Joins: lisp123 (~lisp123@45.130.83.191)
[22:14:40] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[22:17:06] *** Joins: lambdatheultimat (~psycomic@2a01cb0588c5e400284313f3697cc627.ipv6.abo.wanadoo.fr)
[22:19:10] *** Quits: psycomic (~psycomic@2a01cb0588c5e400a0f185077ca9da74.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:24:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:31:39] *** Quits: lambdatheultimat (~psycomic@2a01cb0588c5e400284313f3697cc627.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[22:32:59] *** Joins: psycomic (~psycomic@2a01cb0588c5e400284313f3697cc627.ipv6.abo.wanadoo.fr)
[22:36:32] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[22:36:39] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[22:36:44] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[22:42:58] *** Joins: lisp123 (~lisp123@45.130.83.191)
[22:46:01] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[22:47:02] *** Quits: tyson2 (~user@70.31.33.162) (Quit: ERC (IRC client for Emacs 27.2))
[22:47:23] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[22:53:56] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 268 seconds)
[22:54:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 258 seconds)
[22:57:51] *** Joins: lisp123 (~lisp123@45.130.83.191)
[22:59:12] *** Joins: semz (~none@user/semz)
[23:04:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-CAE5-dynamic.midco.net)
[23:04:20] *** Quits: lad (~lad@user/lad) (Quit: Leaving)
[23:04:52] <nij-> In CL, can I take exact square root, without losing any precision?
[23:05:16] *** Joins: Oladon (~olad@98.43.81.226)
[23:05:37] <nij-> (= 2 (expt (sqrt 2) 2)) ;; => NIL
[23:08:03] <moon-child> nij-: what form do you want this 'exact square root' to take?
[23:08:48] <semz> there's isqrt for integers if you know a priori that the square root should be integral
[23:09:09] <moon-child> the square root of 2 cannot be precisely represented using a floating-point number.  I know of no primitive data type in cl that precisely represents the square root of two except for the list  (sqrt 2)  (which you may quote if you would like to manipulate it symbolically)
[23:09:20] <akater[m]> nij-: Not with the standard.  This requires a symbolic algebra system.  Check out various CASes in CL.  I know of Maxima and Weyl.  But I never tried to get any deep into these.
[23:09:41] *** Joins: aeth_ (~aeth@user/aeth)
[23:09:49] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:09:52] *** aeth_ is now known as aeth
[23:09:54] <Bike> there's an old computable-reals library that could be used https://github.com/stylewarning/computable-reals
[23:10:10] <Bike> but i don't know what nij has in mind here
[23:10:45] <Bike> the square root of two can't be represented as a float and also can't be represented as a rational, because it is irrational. you could use a repeating continued fraction since it's a surd, i guess.
[23:10:58] <lotuseater> nij-: of course. you take (sqrt 2) => '(sqrt 2)
[23:11:23] <nij-> Bike: the form (MAKE-REAL fun) makes me laugh
[23:11:24] <moon-child> nij-: depending on your goals, you might also want to do approximate comparison  (>= *epsilon* (abs (- 2 (expt (sqrt 2) 2)))).  However, this is prone to rounding and floating-point error and _will_ lead to unexpected resrults if you are not careful
[23:13:05] <nij-> I may just start writing a wrapper for sagemath...
[23:13:17] <Bike> also, per richardson's theorem, real arithmetic (with exp, identity, sin, and rationals) is not decidable
[23:13:23] <Bike> which the readme sort of obliquely mentions
[23:13:37] <Bike> in that it implies that = does not necessarily terminate
[23:13:45] <Bike> so, think carefully about what you want to do
[23:13:52] <nij-> yeah the true set of real numbers are not possible
[23:13:53] <lotuseater> Bike: good that you are aware of continued fractions :) even pi and e have regular patterns with that ^^
[23:14:10] <nij-> It's an uncountable set, but all we can express are countably many.
[23:14:22] <semz> equality on computable numbers isn't decidable either
[23:14:26] <Bike> that's true, bu- yes, that.
[23:15:32] <Bike> and yeah i tried to work out how to do square roots on paper when i was a kid and stumbled on hakmem. continued fractions are neat
[23:15:43] <nij-> OK nvm
[23:15:57] <semz> the argument is pretty simple even: assume it was and take two equal numbers. if equality for them is determined after inspecting n digits, the algorithm would erroneously signal equality if they first differed on the n+1-st digit
[23:15:58] <nij-> What should I pay attention to if I want to write a wrapper for sagemath?
[23:16:09] <semz> maxima :-)
[23:16:25] <nij-> Like I should be familiar with CLOS.. but to what extent?
[23:16:36] <moon-child> maxima!
[23:16:50] <nij-> semz: moon-child ?? I'm talking about sagemath..
[23:17:20] <moon-child> why do you want to wrap sagemath?
[23:17:27] <lotuseater> nij-: sagemath uses also maxima
[23:17:52] <nij-> b/c sagemath includes maxima and is therefore larger (?)
[23:18:03] <nij-> sagemath also supports very advanced mathematics.
[23:18:10] <nij-> sad to say.. but maxima doesn't (yet)
[23:18:36] <nij-> But at the end it shouldn't matter. All I want is a calculator in lisp.
[23:19:03] <nij-> If I can design a wrapper correctly, the new cl-sage should be able to absorb goodies from different langs.
[23:19:16] <nij-> Let's call it cage.
[23:20:10] <lotuseater> don't mix up advanced with abstract
[23:20:45] <nij-> mmmhmmmm ok abstract
[23:21:19] <lotuseater> Macsyma was from what I know a very capable system from its very beginning.
[23:21:55] <nij-> https://doc.sagemath.org/pdf/en/reference/schemes/schemes.pdf
[23:22:29] <nij-> https://doc.sagemath.org/pdf/en/reference/hecke/hecke.pdf https://doc.sagemath.org/pdf/en/reference/homology/homology.pdf
[23:22:38] <lotuseater> one can always say "oh but this system doesn't include my newest special topic in my special topic"
[23:22:45] <nij-> I dunno.. sagemath's ability to deal with abstract math seems to be the most promising.
[23:23:20] <nij-> schemes, hecke algebra, and homology are not small and specialized topics
[23:25:13] <lotuseater> so then.
[23:25:16] <semz> https://clbin.com/hkJT4 <- Am I missing something obvious or is this a bug in CCL 1.12?
[23:28:02] <semz> SBCL eats it without complaint as I'd expect it to from my (flaky) understanding of array type upgrades
[23:29:27] <lotuseater> hm it makes sense giving '(unsigned-byte 40) gets stretched to fixnum
[23:29:40] <Bike> seems buggy to me.
[23:30:03] <lotuseater> I realized in (my) CCL version with 64bit a fixnum is 60 bits wide, in SBCL 62.
[23:30:27] <nij-> What's the de facto way to read a python object into cl?
[23:31:05] <lotuseater> look at CLPython
[23:31:06] <Bike> simple-unsigned-doubleword-vector appears to be a simple (ub 64) vector. seems like the compiler and make-array are using different upgrades, kinda.
[23:33:47] <lisp123> nij-: why don't you write your own calculator?
[23:34:05] <lisp123> unless you want to do symbolic expressions (which may be a bit consuming), the rest is easy
[23:34:41] <lisp123> Also SCIP has a good introduction of symbolic algebra within Scheme (concepts which you could apply over to CL)
[23:35:05] <nij-> lisp123: Because it will take years to get scheme, hecke, (co)homology working by myself.
[23:36:06] <lisp123> nij-: Fair enough
[23:36:42] <lotuseater> so then you would know you really understand parts of it
[23:36:58] <nij-> lotuseater: what do you mean?
[23:37:18] <nij-> I'm still estimating.. if it's a good bet on translating sage
[23:37:26] <nij-> or maybe i should just use sage
[23:37:50] <lotuseater> hm
[23:44:40] *** Quits: pve (~pve@87-93-243-46.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[23:45:01] *** Quits: psycomic (~psycomic@2a01cb0588c5e400284313f3697cc627.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:45:25] *** Joins: psycomic (~psycomic@2a01cb0588c5e400284313f3697cc627.ipv6.abo.wanadoo.fr)
[23:51:40] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[23:53:23] <akater[m]> nij-: Kenzo is an example of a very specific calculator built in CL.  I think it does not depend on other CASes.  So maybe you don't want wrappers and better concentrate on your specific problem.  It's easy to write some wrappers and then abandon the whole thing because the problem is very demanding.
[23:59:04] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
