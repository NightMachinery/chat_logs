[00:00:03] *** Joins: rotateq (~user@ipservice-092-209-022-135.092.209.pools.vodafone-ip.de)
[00:00:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:00:40] <etimmons> If everyone did that, then system versions would for all intents and purposes be a lower bound, which is trivial to deal with and should cause any infeasibilities in dependency resolution
[00:00:54] <etimmons> *system version constraints
[00:01:04] <etimmons> - shouldn't cause
[00:01:10] <phoe> stonks
[00:01:14] <phoe> they can only go up
[00:01:25] * phoe hides for using a terrible meme
[00:01:29] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:01:38] * etimmons bonks phoe
[00:01:41] <EdLangley[m]> Anyways, my objection is that letting people specify upper bounds enables bad ecosystem dynamics
[00:01:45] <EdLangley[m]> Which is sort of at its worst in npm-land
[00:01:57] <EdLangley[m]> But is also problematic in python, ruby and java to varying degrees
[00:02:09] <EdLangley[m]> It's even bad in haskell
[00:02:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[00:03:24] <gabc> The good thing with npm is even how bad ASDF issues can be, we can always turn around and point at npm to laugh
[00:05:00] <etimmons> You may not be a fan of ASDF 3.4 then... it's likely going to let people do that (but with a restart to say "nah, continue anyways", and potentially a variable you can set to auto invoke the restart)
[00:05:16] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:05:40] <phoe> do what? specify upper bounds?
[00:05:50] <phoe> ;; or point at npm to laugh?
[00:05:57] <etimmons> upper bounds
[00:06:07] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:06:19] <phoe> oh, I see                ; you got my hopes up for a second
[00:06:24] <etimmons> haha
[00:06:36] <etimmons> we can always point and laugh at npm any time we want
[00:06:51] <phoe> (ql:quickload :laugh-at-npm)
[00:09:12] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[00:11:07] <yitzi> (require :npm-behavior) .... which results 47 copies of every single package.
[00:12:12] <phoe> a separate asdf-modules subdirectory for every .asd file!
[00:13:24] <yitzi> Plus huge package-lock file that magically protects you from yourself.
[00:13:41] *** Joins: morganw (~user@80.225.24.132)
[00:13:47] <EdLangley[m]> So, if you think upper version bounds are ok, npm dos the right thing
[00:14:03] <EdLangley[m]> Every system should get its own set of dependencies and they shouldn't interfere with each other.
[00:14:26] <EdLangley[m]> I've wasted so much time in python and java trying to come up with a set of package versions that the version resolver will accept
[00:14:35] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[00:14:46] <EdLangley[m]> And, we could probably use some of the SICL stuff to do this in CL
[00:14:59] <EdLangley[m]> Create little sub-lisps to load each system and then bridge their external interfaces together
[00:15:53] <yitzi> I rather just go burn a dozen SSDs in the backyard. I am suspicious that that is what npm is really doing.
[00:16:15] <etimmons> This is all wishful thinking at this point, but after the next version of CLPM I'd really like to fully and in great detail document the files CLPM uses to describe environments. My hope is to document them in enough detail that someone else can come along and make something CLPM-like that makes different tradeoffs (like not needing a separate process)
[00:16:24] <EdLangley[m]> The whole point of upper version bounds is to be confident about that the code you're getting is what you expect
[00:16:45] <EdLangley[m]> s/about that/that/
[00:17:28] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:17:29] <EdLangley[m]> This confidence is a lie if your dependency resolution algorithm just picks an arbitrary version (maven) and an annoyance if it means a user can't install arbitrary combinations of packages.
[00:17:38] <EdLangley[m]> (pip)
[00:17:48] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:48a1:2952:eb54:dbd1)
[00:21:37] *** Quits: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:94c3:2af7:d8a3:e7b7) (Quit: Client closed)
[00:33:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:39:33] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:45:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:51:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:51:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:58:01] *** Quits: cosimone (~user@93-47-229-195.ip115.fastwebnet.it) (Remote host closed the connection)
[01:01:53] <_death> phoe: interesting post.. I think the slime update link is wrong.. and later on you call type specification errors type errors
[01:10:17] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[01:10:58] <phoe> _death: it's possible
[01:11:04] <phoe> I'll try to fix tomorrow
[01:11:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Quit: No Ping reply in 180 seconds.)
[01:12:06] *** Joins: greaser|q (greaser@antihype.space)
[01:13:48] *** Joins: cosimone (~user@93-47-229-195.ip115.fastwebnet.it)
[01:16:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[01:24:58] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[01:29:06] *** Quits: pve (~pve@178-55-48-98.bb.dnainternet.fi) (Quit: leaving)
[01:30:19] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[01:38:46] *** Quits: rotateq (~user@ipservice-092-209-022-135.092.209.pools.vodafone-ip.de) (Quit: tschav mit 'v')
[01:38:53] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f9:d1b2:cd97:e581:7ed0:8fb7)
[01:43:36] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:43:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:46:50] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Client Quit)
[01:47:15] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:48:17] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[01:49:15] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:53:56] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:35da:7bb3:e3f8:3a44) (Ping timeout: 268 seconds)
[01:57:57] *** Joins: alvaro121_ (~aa@201.230.126.66)
[01:58:02] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[01:59:28] *** Quits: easye (~user@oxi.slack.net) (Remote host closed the connection)
[02:02:08] *** Joins: easye (~user@oxi.slack.net)
[02:07:29] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[02:07:30] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 268 seconds)
[02:13:16] *** Joins: easye (~user@oxi.slack.net)
[02:13:31] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[02:20:40] <Josh_2> phoe: the solution is a fight, each side picks a champion, the winner takes all.
[02:20:48] <Josh_2> I nominate myself as a champion for whoever wants me.
[02:22:32] *** Quits: cosimone (~user@93-47-229-195.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:25:07] <phoe> well I'm not a side but you can fight for me if you really want to
[02:25:27] * phoe shushes before #lispcafe becomes a necessity though
[02:26:02] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f9:d1b2:cd97:e581:7ed0:8fb7) (Read error: Network is unreachable)
[02:27:14] *** Joins: r3st` (~user@2601:282:b00:ba30::90c9)
[02:27:28] <r3st`> howdy all
[02:28:02] <phoe> hey
[02:28:17] <_death> 1. download quicklisp snapshot 2. create a dataset for asdf symbol usage by projects 3. write a spec covering at least 95% projects 4. create as many asdf implementations from scratch as you can
[02:29:03] <r3st`> gotta say i love the logo
[02:29:13] <Josh_2> The alien?
[02:29:41] <phoe> the lizard?
[02:30:08] <Josh_2> I prefer the alien
[02:30:23] <phoe> well here's your chance to fight then
[02:30:51] <phoe> r3st`: context: one thing with CL is that there's no "official" logo, there's at least four that are somewhat widely known though
[02:31:35] <etimmons> I don't think the lizard is a chameleon (or is it?) and that seems like a missed opportunity to me
[02:31:51] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[02:31:52] <phoe> a lisp lizard by Manfred Spiller, a lisp alien from Land of Lisp, a LISP text stylized into some sort of retrofuturestuff, and either just a lambda or a pair of lambdas stylized in a yin-yang
[02:32:33] <Josh_2> Where is the third?
[02:32:39] <phoe> ;; if you take a look at https://github.com/phoe/the-elusive-language then you will be able to guess which team I personally cheer for
[02:33:08] <phoe> Josh_2: http://xahlee.info/UnixResource_dir/gki/lambda/lisp_logo_06257.png
[02:33:24] <Josh_2> Oh right I dont like that one
[02:33:30] <Josh_2> Alien of yin-yang
[02:33:36] <Josh_2> or8
[02:33:43] <r3st`> The yin-yang one for sure
[02:33:51] <phoe> and then there is the imposter logo, https://upload.wikimedia.org/wikipedia/commons/7/78/Lisp-logo.jpg
[02:34:03] <r3st`> 'contains trace amounts of lisp' gets me everytime
[02:34:05] <phoe> Wikipedia says, "A logo for the Location/ID Separation Protocol."
[02:35:07] <Josh_2> Yes that is not right
[02:35:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[02:35:40] <r3st`> "a pair of lambdas stylized in a yin-yang"
[02:35:53] <phoe> yes
[02:36:03] * phoe needs to GC for tonight though
[02:36:06] <phoe> good night
[02:36:14] <r3st`> nighty night
[02:36:20] <r3st`> don't let the code bugs bite
[02:36:28] <phoe> ha, I like that one
[02:37:55] <r3st`> What's the common lisp emacs environment called again? portcable?
[02:38:11] <random-nick> portacle?
[02:38:28] <theothornhill> yes, that or lem?
[02:39:04] <moon-child> https://files.catbox.moe/010e54.jpg
[02:39:14] <r3st`> Yes! portacle, thank you
[02:43:57] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 240 seconds)
[02:47:11] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[02:48:52] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:53:19] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:48a1:2952:eb54:dbd1) (Remote host closed the connection)
[02:56:20] *** Joins: notzmv (~zmv@user/notzmv)
[02:57:45] *** Joins: Oladon (~olad@98.43.81.226)
[03:00:37] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[03:01:37] *** Joins: z3t0 (~z3t0@146.71.14.98)
[03:06:33] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:10:13] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[03:10:42] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[03:10:42] *** Joins: greaser|q (greaser@user/greasemonkey)
[03:10:53] *** greaser|q is now known as GreaseMonkey
[03:23:40] <Josh_2> Emacs + sly/slime
[03:32:31] <rotateq> heyho :)
[03:32:43] <rotateq> I hope beach_ is alright now Paris.
[03:33:12] *** Joins: molson (~molson@2001:48f8:704a:123d::75f:1021)
[03:33:17] <rotateq> s/now Paris/now in Paris
[03:33:33] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[03:37:06] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[03:40:34] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[03:45:03] <Josh_2> I wouldn't be alright in Paris
[03:45:38] <rotateq> phew
[03:46:05] <rotateq> he wrote around 8h ago in #sicl as 'spiaggia' "greetings from train to paris"
[03:46:54] *** Joins: occ (~occ@user/occ)
[03:53:35] <rotateq> i've never been to paris yet
[03:53:46] <rotateq> better visit nice people in bordeaux first ^^
[04:00:33] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[04:10:47] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[04:11:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:18:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:19:10] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[04:23:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:39:55] *** Joins: dlowe (~dlowe@user/dlowe)
[04:41:18] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[04:46:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:50:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:51:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:52:32] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:01:17] <Catie> Hey, does anyone know if there's a way to get SLY/SLIME to insert a tilde when it auto-fills in the middle of a format control string? Or does everyone just manually insert their tildes?
[05:04:37] <White_Flame> My shortcut for inserting a single tilde is the tilde key (?)
[05:04:47] <White_Flame> what sort of autofill do you mean?
[05:05:32] <Catie> Oh, Emacs' auto-fill. Like when it inserts a line break right in the middle of a constant string you're writing to wrap before a certain number of characters
[05:07:56] <White_Flame> sorry, no clue.  my emacs/slime just left-justifies if I hit enter in th emiddle of the newline instead of indenting
[05:08:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:08:25] <White_Flame> *middle of a string
[05:08:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:08:39] <Catie> Oh me too, but in the case I'm describing I didn't hit enter
[05:10:51] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1024-static.midco.net)
[05:11:10] <Catie> So I've got this format control string, and it's really long. As I'm typing it in, I hit the 80 character mark, and Emacs gives me a newline. So now I've got this newline embedded in my format control string, which I do not want. To keep it from being a part of the finished string, I have to go back to where Emacs auto-filled my line and type a tilde myself. I'm wondering if that's how it is for everyone, or if ther
[05:11:10] <Catie> e's some sort of SLIME setting I'm missing to get what I'm deciding to call auto-tilde
[05:11:52] <White_Flame> I websearched for what auto fill mode is, and I've never had it.  it's not on by default, is it?
[05:12:12] <White_Flame> and yeah, it sounds like it would mess up such string literals
[05:12:25] <Catie> I don't think so, but I use it all the time. I guess I also assumed most people used auto-fill-mode
[05:12:53] <mfiano> I can't stand auto-fill mode for programming major modes
[05:13:28] *** Quits: molson (~molson@2001:48f8:704a:123d::75f:1021) (Ping timeout: 250 seconds)
[05:13:32] <White_Flame> (I'm no emacs power user, just wanted to understand the question :) )
[05:14:14] <Catie> White_Flame: Oh yeah, absolutely! I can see how that whole thing was completely nonsensical if you don't use auto-fill-mode
[05:14:31] <edgar-rft> it's time to use the emacs power :-)
[05:14:32] <Catie> mfiano: Well shucks. Guess I shouldn't have assumed it was more common
[05:14:54] <White_Flame> edgar-rft: it's time to get past sequential streams of monospaced characters :-P
[05:16:29] <mfiano> Emacs! Vim! VSCode! Atom! With our powers combined...they are all subsumed by the former.
[05:17:35] * mfiano really feels old now, on top of lame.
[05:17:51] <moon-child> eight megabytes and constantly swapping
[05:18:34] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[05:18:44] <moon-child> White_Flame: emacs is just sequential streams of monospaced characters with a cherry on top though
[05:18:52] <White_Flame> I know
[05:19:13] <White_Flame> I use emacs not because I think it's great, but because it happens to be the best supported CL environment
[05:19:15] <Catie> That's not true! It's also got the most convoluted representation of a font you can possibly imagine
[05:19:19] <White_Flame> *CL dev environment
[05:19:50] <moon-child> fructure-cl when
[05:26:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:26:37] *** Joins: dec0d3r_ (~dec0d3r@101.181.83.205)
[05:26:47] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:28:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:39:44] <ns12> Hello, is Hunchentoot supported on FreeBSD? Hunchentoot happens to work on FreeBSD, but is that just luck or is there an effort made to support it on FreeBSD?
[05:40:51] <EdLangley[m]> ns12: what do you mean by "supported"
[05:42:14] <ns12> EdLangley[m]: The developers making a commitment of making sure that new releases don't break the functionality of Hunchentoot on FreeBSD.
[05:42:38] <EdLangley[m]> That sort of arrangement is relatively uncommon for any lisp library on any platform
[05:42:54] <Bike> does hunchentoot interact directly with the operating system, even?
[05:43:14] <EdLangley[m]> It probably uses usocket?
[05:43:25] <Bike> from a glance it uses cl-fad and usocket and stuff
[05:43:27] <Catie> That it runs on FreeBSD is pretty good evidence that it doesn't
[05:43:40] <Bike> that's where the bsd compatibility would be at issue
[05:46:20] <ns12> If not mistaken, Hunchentoot can also run on Microsoft Windows. But I don't know if that's just luck, or if the developers actually tested Hunchentoot on Windows to make sure that it would work on Windows.
[05:47:32] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Ping timeout: 240 seconds)
[05:47:34] <ns12> https://github.com/edicl/hunchentoot doesn't list the supported operating systems.
[05:47:48] <EdLangley[m]> It's not a commercial product
[05:47:52] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[05:47:54] <EdLangley[m]> There's no "support contract"
[05:48:19] <EdLangley[m]> But, the underlying compatibility layers work on just about every system sbcl runs on
[05:48:31] <Bike> again, i think the supported operating systems would be an issue about the libraries hunchentoot uses, rather than hunchentoot itself
[05:48:56] <Catie> "All lisps which are supported by the compatibility layers usocket and Bordeaux Threads", is an implicit statement that it also supports the operating systems those compatibility layers support
[05:49:28] <moon-child> (or, perhaps more to the point, that it does not use any nonportable code aside from those)
[05:49:42] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[05:49:48] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[05:49:53] <mfiano> You mean non-standard.
[05:50:01] <mfiano> By definition, they are portability libraries.
[05:50:26] <White_Flame> which use & abstract non-portable calls :)
[05:50:27] <moon-child> depends how you qualify 'portable', I guess
[05:50:39] <moon-child> by 'portable', I mean 'portable to any conformant common lisp implementation'
[05:51:58] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:52:55] <ns12> I wonder what operating system the Hunchentoot developers use to run their tests.
[05:53:42] *** Joins: Bike (~Bike@71.69.170.70)
[05:53:42] *** ChanServ sets mode: +o Bike
[05:56:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:57:15] <ns12> hunchentoot results collected by cl-test-grid: https://cl-test-grid.common-lisp.dev/library/hunchentoot.html
[05:57:40] *** Joins: gamaliel (~gamaliel@24.171.221.75)
[05:57:44] <ns12> But cl-test-grid only shows test results for Linux.
[06:00:56] <remexre> is there any reason why uiop:call-with-temporary-file would be failing to create files (with permission denied) in a directory where touch creates them just fine?
[06:01:26] <moon-child> strace?
[06:01:53] <remexre> oh, good idea
[06:02:32] <ns12> remexre: Are you sure that uiop:call-with-temporary-file is trying to create the file in the directory that you think it is?
[06:02:48] <moon-child> ^ was my guess, but strace reveals all
[06:02:58] <moon-child> (or dtrace, if you happen to be on a Good Operating System)
[06:03:12] <remexre> pretty sure
[06:03:53] <remexre> an access() call for the path gets ENOENT, then openat(..., O_RDWR|O_CREAT|O_EXCL, 0666) gets EPERM
[06:03:59] <remexre> er, EACCES
[06:04:23] <moon-child> 'The temporary file’s pathname will be [...] within directory (defaulting to the temporary-directory) if the prefix isn’t absolute'
[06:04:51] <moon-child> assuming you are not explicitly passing a directory, check what temporary-directory is
[06:05:51] <remexre> it's asdf calling it, and (based on the path) it's using the temporary I configured in ASDF_OUTPUT_TRANSLATIONS (as expected)
[06:08:17] <remexre> yeah, temporary-directory is a directory I also have write access to, but the strace doesn't show anything going on there
[06:14:34] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[06:21:04] *** Quits: danieli (~danieli@user/danieli) (Remote host closed the connection)
[06:21:26] *** Joins: danieli (~danieli@user/danieli)
[06:21:29] *** Quits: danieli (~danieli@user/danieli) (Read error: Connection reset by peer)
[06:26:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:26:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[06:27:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[06:30:24] <lisp123> Guess Common Lisp is #1 on Hn again
[06:30:37] <lisp123> Not for the best reasons
[06:33:43] <EdLangley[m]> :)
[06:39:35] <ns12> Common Lisp ASDF maintainer considers resignation https://news.ycombinator.com/item?id=30017919
[06:48:01] <sveit> on a lighter note, is there some idiomatic way to bind a let-like list? i mean something like (destructuring-bind (name &optional value) EXPR BODY) but which works as well when EXPR is just a symbol? right now I do something like replacing EXPR with (if (listp EXPR) EXPR (list EXPR))
[06:49:59] <semz> Alexandria has ensure-list which does the final part
[06:55:18] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 250 seconds)
[06:59:15] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[07:02:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:03:23] *** Joins: occ (~occ@user/occ)
[07:04:28] <lisp123> sveit: You should just write this
[07:04:53] <lisp123> You could have a function called SAFE-LIST
[07:05:42] <lisp123> Alternatively, what I do sometimes is use Generic Functions in this situation (one for EXPR being a list, one for EXPR being an atom)
[07:06:49] <lisp123> I used to simply coerce to list, but I find that is implicit behaviour that can cause problems way down the line. So I tend to restructure my code accordingly so sensible methods can be written for the different possibilities
[07:07:15] <EdLangley[m]> ENSURE-LIST from alexandria is what I use here too
[07:07:37] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[07:07:56] <lisp123> (simply writing two methods, just to achieve the above you have, where the only change is for EXPR IMO is a bad way to do it, so I would look at the overall code and reconfigure to a way that makes more 'natural' sense)
[07:12:55] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:48] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:14:37] *** Joins: occ (~occ@user/occ)
[07:18:18] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[07:19:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[07:20:59] *** Joins: spiaggia (~user@141-160-190-109.dsl.ovh.fr)
[07:30:14] <spiaggia> Good morning everyone!
[07:34:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[07:41:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:46:20] <aeth> sveit, lisp123: What I do in that case is I use TYPECASE (or one of its ETYPECASE/CTYPECASE variants)
[07:47:02] <aeth> It's common and simple enough that you could probably turn that into a macro, I guess, but I don't mind having a two-line TYPECASE, where one branch has a DESTRUCTURING-BIND on a list and the other is just directly binding a symbol.
[07:51:29] *** Quits: gamaliel (~gamaliel@24.171.221.75) (Quit: Client closed)
[07:55:59] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[07:58:06] <Devon> Common-Lisp - Emacs-Lisp compatibility: (eval-when (compile load eval) (unless (fboundp 'string-upcase) (funcall (symbol-function 'defalias) 'string-upcase 'upcase)))
[07:58:43] <Devon> Wondering if there's a better way.
[07:59:17] <spiaggia> To do what?
[07:59:22] <Devon> LOL
[08:00:23] <Devon> To allow both CL and EL to load and run the same file without error.
[08:01:12] <EdLangley[m]> The languages are pretty different
[08:02:02] <Devon> LOL
[08:02:40] * spiaggia doesn't see the humor.
[08:03:15] <contrapunctus> LOL (...SCNR)
[08:07:26] <moon-child> didn't pjb make a cl-elisp-scheme polyglot?
[08:07:27] <Devon> They used to be more similar but EL has now deprecated CL compatibility, e.g., loop gets an "obsolete" warning to use cl-loop instead.
[08:07:57] <EdLangley[m]> There is an elisp implementation in clocc, iirc
[08:10:55] <moon-child> there is also a common lisp implementation written in (and targeting) elisp
[08:11:49] <Devon> That's the EL library "cl" which contains, e.g., cl-loop fka loop.
[08:12:01] <moon-child> no, not that
[08:12:16] <moon-child> a common lisp compiler targeting elisp
[08:12:18] <moon-child> https://github.com/larsbrinkhoff/emacs-cl  this
[08:12:33] <Devon> Nice
[08:18:40] <lisp123> Devon: Most serious Emacs packages are written in Elisp with a CL compatibility layer
[08:19:10] <contrapunctus> lisp123: _sobs_ yes! Yes!
[08:19:18] <EdLangley[m]> Another thing you could do is write all your code using explicit package prefixes like: (cl:remove-if ....)
[08:19:35] <lisp123> But in general it makes no sense to load Elisp in CL, because Elisp is mostly used for its API and not the language itself (and then you are entering the topic of porting Emacs into CL)
[08:19:44] <EdLangley[m]> Then define corresponding aliases in elisp like (defalias cl:remove-if 'cl-remove-if)
[08:20:38] <lisp123> contrapunctus: :D It's like an implicit acceptance that all the features of CL are actually pretty useful
[08:20:54] *** Joins: semz_ (~semz@user/semz)
[08:21:34] <contrapunctus> lisp123: When I started writing Common Lisp I was like, 'thank goodness for real namespaces, and thank goodness I never have to write `cl-loop` or `cl-first` again.'
[08:21:38] <Devon> Emacs C code looks like hand-compiled lisp, perhaps it could be automatically do-compiled.
[08:21:43] <ns12> But Schemers don't seem to be in a hurry to add CL stuff.
[08:22:06] <lisp123> ns12: I heard they try to implement CLOS every once in a while
[08:22:38] <lisp123> I like Scheme though, it has a lot of different ideas, but now its off topic so I'll get back to work
[08:22:43] <EdLangley[m]> EIEIO has some nice stuff
[08:22:46] <ns12> lisp123: MIT Scheme has SOS. But I think there is substantial opposition to a standardized object oriented framework.
[08:22:51] <Devon> er, do-compiled/de-compiled
[08:23:14] <lisp123> ns12: Yeah I heard they like to keep the overall language footprint small. Anyways, time to shut up :)
[08:23:16] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:23:18] <contrapunctus> ns12: CHICKEN has `format`, some CLOS-likes, some `loop` -likes, keyword arguments, ...and Guile has `defmacro`
[08:23:29] <EdLangley[m]> &context + the derived-mode specializer is really nice for emacs configuration
[08:24:10] <lisp123> contrapunctus: lol indeed (re the packages & name space) (although sometimes I borrow the Emacs style of writing when I don't want to create a new package per se)
[08:24:55] <moon-child> I made s7 a 'loop' (+extensions I should probably port back to cl), it has 'format' already, and it has its own prototypical oo
[08:24:59] *** Joins: occ (~occ@user/occ)
[08:25:12] <moon-child> it also has first-class lexical environments, years before sicl :)
[08:25:14] <EdLangley[m]> I just name all my emacs stuff using : and :: to separate the "package" from the "name"
[08:27:30] <lisp123> EdLangley[m]: Nicely done
[08:27:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:37:17] *** Quits: spiaggia (~user@141-160-190-109.dsl.ovh.fr) (Ping timeout: 240 seconds)
[08:37:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:38:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:42:17] *** Quits: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29) (Quit: ERC (IRC client for Emacs 27.1))
[08:47:43] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:55:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:55:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:04:16] *** Joins: etimmons_ (m-fyxyzb@li834-247.members.linode.com)
[09:05:36] *** Quits: etimmons (m-fyxyzb@li834-247.members.linode.com) (Ping timeout: 268 seconds)
[09:07:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:09:10] *** etimmons_ is now known as etimmons
[09:17:24] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:17:50] *** Joins: Bike (~Bike@71.69.170.70)
[09:17:50] *** ChanServ sets mode: +o Bike
[09:19:14] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Remote host closed the connection)
[09:19:36] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:41:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:42:43] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[09:42:45] *** Joins: jeosol (~jeosol@user/jeosol)
[09:43:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:48:49] *** Joins: Charles[m]1 (~charlesma@2001:470:69fc:105::1:7050)
[09:49:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:51:57] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:53:28] *** Joins: spiaggia (~user@141-160-190-109.dsl.ovh.fr)
[10:03:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:07:40] *** Quits: dec0d3r_ (~dec0d3r@101.181.83.205) (Quit: Leaving)
[10:19:51] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[10:24:37] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[10:25:02] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[10:27:44] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[10:27:57] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[10:41:02] *** Joins: lisp123w (~user@80.227.170.170)
[10:41:52] <lisp123w> Hey, so I was thinking of extending hyperspec.el for some of the other libraries I use
[10:42:19] <lisp123w> Is there a common project to do this? Otherwise IMO we should create one
[10:42:36] <lisp123w> (of course it assumes documentation is written, but at least for the packages that do have this, it will be useful)
[10:43:52] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[10:48:09] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[10:50:08] *** Quits: etimmons (m-fyxyzb@li834-247.members.linode.com) (Ping timeout: 256 seconds)
[10:50:27] *** Joins: etimmons (m-fyxyzb@li834-247.members.linode.com)
[10:53:31] <contrapunctus> lisp123w: slime-hyperdoc.el ?
[10:54:11] <contrapunctus> I couldn't find a hyperspec.el package (there's `clhs` though) or library
[10:55:57] <contrapunctus> ...oh, it's in slime/lib/ 🤔️
[10:56:58] *** Joins: notzmv (~zmv@user/notzmv)
[10:57:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:58:05] <lisp123w> contrapunctus: Yeah, that one. I had a look at hyperdoc but very complicated for something very basic. But thanks, looks like that is what its meant for
[10:58:35] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9542:c242:82e6:5d52)
[10:59:45] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:00:06] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f9:d1b2:f192:f14c:2bd5:212c)
[11:00:23] <lisp123w> Reading the documentation of hyperdoc further, looks not too bad. Just need to REGISTER-DOCUMENTATION against it
[11:01:34] <lisp123w> Does anyone use it?
[11:01:47] <lisp123w> Seems like something every library writer should..
[11:04:00] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9542:c242:82e6:5d52) (Ping timeout: 268 seconds)
[11:04:25] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:05:47] <contrapunctus> lisp123w: I'd start by 'just' adding Elisp-like docstrings (describing each argument, its possible values, and the return values) for each definition in a library...
[11:06:46] <lisp123w> contrapunctus: Indeed, that would be very good
[11:07:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:10:54] <lisp123w> Anyone know if there is a slime/sly function to get package of the symbol at point, written in elisp?
[11:11:01] <lisp123w> Without having to connect to a lisp image
[11:12:21] <spiaggia> I can't see how such a thing would be possible.
[11:12:46] <contrapunctus> Strange... `M-x slime-documentation` is neither displaying class `:documentation` nor even a function's docstring 🤔️
[11:13:13] <lisp123w> spiaggia: Parse the string for a ":", if not parse the file for the most recent IN-PACKAGE, adjusting for :USE / :IMPORT-FROM / etc.? Anything I'm missing
[11:13:40] <lisp123w> I guess if the defpackage was in another file, then it breaks
[11:13:56] <spiaggia> You don't know which file the DEFPACKAGE form might be in.
[11:14:03] <spiaggia> Exactly.
[11:14:08] <spiaggia> And it typically is.
[11:14:13] <lisp123w> :( Oh well. Yes you are right
[11:15:04] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:315f:3454:b0d8:112e)
[11:15:22] <contrapunctus> Is it a bad idea to be creating the package at the top of the Lisp file itself? ._.
[11:15:37] <moon-child> you would also need to figure out which symbols are in :USEd packages
[11:15:49] <moon-child> contrapunctus: supposing you have multiple files in one package?
[11:15:57] <spiaggia> contrapunctus: It is a bad idea if several source files should be in the same package.
[11:16:07] <spiaggia> contrapunctus: Which is typically the case.
[11:16:55] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[11:19:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:19:53] <contrapunctus> Ah...I've been making a separate package for each file 😶️
[11:20:34] <spiaggia> Wow, so if two files are in the same library, client code needs to choose which package according to the file the function or class is in??
[11:20:56] <spiaggia> ... or do you write huge files?
[11:21:06] <moon-child> (or small libraries?)
[11:21:11] <spiaggia> Or that.
[11:23:36] <contrapunctus> welp
[11:25:43] <phoe> _death: the slime/swank update link seems correct, it removes the use of SB-KERNEL:%SIMPLE-FUN-SELF which was a symbol that was removed
[11:26:02] <phoe> re: type specification errors, let me merge that
[11:27:55] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:29:15] *** Joins: amb007 (~a_bakic@247.36.22.93.rev.sfr.net)
[11:32:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:35:42] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[11:40:45] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:45:55] *** Joins: Major_Biscuit (~MajorBisc@c-001-024-001.client.tudelft.eduvpn.nl)
[11:46:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:48:57] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[11:52:46] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[11:53:27] <contrapunctus> lisp123w: imagine a Lisp file meant to be created at a project root (similar to system definitions), with a plist or alist having the keys `tutorial`, `how-tos`, `explanation`, and `reference` . Values could be strings, URLs/file paths, etc. Users could issue commands to view these, and tools could display the strings, or launch the URLs/files according to the user's configured applications.
[11:53:29] <contrapunctus> (Of course, such tools a probably trivial to make, but the real question is writing the docs 😜️)
[11:53:56] <contrapunctus> tools * are
[11:56:37] <contrapunctus> ...hm, that'd be a useful tool for all kinds of projects, not just Lisp projects 🤔️
[12:08:57] *** Quits: etimmons (m-fyxyzb@li834-247.members.linode.com) (Ping timeout: 240 seconds)
[12:13:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:16:28] *** Joins: etimmons (m-fyxyzb@li834-247.members.linode.com)
[12:21:11] *** Quits: amb007 (~a_bakic@247.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:21:23] *** Joins: amb007 (~a_bakic@247.36.22.93.rev.sfr.net)
[12:23:08] *** Quits: amb007 (~a_bakic@247.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:23:19] <contrapunctus> A partial example of what such a definition might look like for McCLIM - https://paste.rs/DWg
[12:23:47] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:26:46] *** Joins: pve (~pve@178-55-133-102.bb.dnainternet.fi)
[12:31:58] *** Joins: shka (~herr@109.231.0.226)
[12:36:06] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[12:46:41] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[12:48:52] *** Joins: dstein64 (~dstein64@dannyadam.com)
[12:53:36] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[12:55:44] *** Quits: spiaggia (~user@141-160-190-109.dsl.ovh.fr) (Quit: ERC (IRC client for Emacs 26.3))
[12:58:45] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:02:10] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[13:04:16] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[13:04:18] *** Joins: dstein64 (~dstein64@dannyadam.com)
[13:14:05] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:18:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:22:32] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:315f:3454:b0d8:112e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:24:28] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[13:29:37] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[13:30:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:31:00] <lisp123> contrapunctus: Thanks! That's some good food for thought
[13:31:59] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:81fd:e333:1e93:e27e)
[13:32:17] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[13:33:58] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 250 seconds)
[13:37:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:38:33] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:40:12] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[13:55:49] *** Joins: dstein64 (~dstein64@dannyadam.com)
[14:08:44] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f9:d1b2:f192:f14c:2bd5:212c)
[14:12:05] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f9:d1b2:f192:f14c:2bd5:212c) (Ping timeout: 268 seconds)
[14:14:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:14:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:15:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:18:12] *** Joins: silasfox (~fox@p200300cec7197f00c30ddb1c84ec6b40.dip0.t-ipconnect.de)
[14:24:29] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:30:37] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:37:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:38:27] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:51:57] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[14:52:15] *** Joins: kevingal (~quassel@2001:770:c0:401:b442:8e59:b75e:4b33)
[14:56:02] *** Quits: kagevf_ (~jfh@ip68-108-33-76.lv.lv.cox.net) (Ping timeout: 240 seconds)
[14:58:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:59:36] *** Joins: sheb (~sheb@31.223.228.71)
[15:00:09] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f9:d1b2:f192:f14c:2bd5:212c) (Read error: No route to host)
[15:00:20] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f9:d1b2:809d:35b3:ab45:1702)
[15:01:16] *** Joins: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net)
[15:03:09] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:03:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:06:21] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f9:d1b2:809d:35b3:ab45:1702) (Ping timeout: 268 seconds)
[15:07:24] *** Joins: neominimum (sid537410@user/neominimum)
[15:07:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[15:08:04] *** Joins: amb007 (~a_bakic@213.36.22.93.rev.sfr.net)
[15:11:36] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f9:d1b2:809d:35b3:ab45:1702)
[15:12:53] *** Quits: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net) (Ping timeout: 256 seconds)
[15:13:06] *** Joins: kagevf (~jfh@ip68-108-33-76.lv.lv.cox.net)
[15:18:39] <flip214> (sort '(t (cons) (cons symbol) atom) #'typep)
[15:18:52] <flip214> gives ((CONS SYMBOL) (CONS) ATOM T)
[15:19:12] <flip214> ie. SORT via TYPEP can sort types according to specifity
[15:19:17] *** Quits: amb007 (~a_bakic@213.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:19:31] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:19:49] <rotateq> uii
[15:20:06] <rotateq> yeah as they have precedence ^^
[15:20:34] <flip214> I think that's great
[15:20:43] <rotateq> :)
[15:21:01] <rotateq> maybe also such of those hacks
[15:21:17] <moon-child> hm, I think I would rather use subtypep
[15:21:19] <rotateq> and "oh i didn't thought about it this way yet"
[15:21:28] <rotateq> also not bad
[15:21:33] <moon-child> something like (and (subtypep x y) (not (subtypep y x)))
[15:22:14] <flip214> moon-child: you think there's a notable difference?
[15:22:55] <moon-child> I think (typep type1 type2) is just bizarre
[15:23:32] <rotateq> hehe
[15:23:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[15:23:50] <moon-child> and it doesn't work
[15:24:27] <moon-child> try (sort '(list (or t)) #'typep)
[15:24:30] <flip214> hmmm, if I had some more specific things like (cons 'foo), subtype doesn't order correctly and typep breaks - because that's not a real type
[15:24:51] <phoe> flip214: did you mean SUBTYPEP?
[15:25:05] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:25:11] <phoe> I kinda wonder why it doesn't order correctly though
[15:25:19] <moon-child> why would it?
[15:25:30] <phoe> ...but then again, what is the correct order of sorting '(fixnum string)
[15:25:33] <phoe> right
[15:25:35] <moon-child> (typep x y) doesn't imply anything about (typep y x)
[15:25:58] <flip214> phoe: yeah
[15:26:24] <moon-child> nor does (and (typep x y) (typep y z)) guarantee anything about (typep x z)
[15:26:28] <flip214> phoe: order of completely distinct types doesn't matter for me...
[15:26:44] <moon-child> s/guarantee/imply/
[15:26:47] <flip214> but I need the order of (cons 'foo) (cons symbol) to be correct
[15:27:05] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:27:47] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:30:51] <phoe> this sounds like some sort of weird TYPE-SPECIFIER< predicate
[15:31:36] <phoe> why do you need it?
[15:38:32] *** Joins: danieli (~danieli@user/danieli)
[15:40:02] *** Joins: varjag (~user@188.95.247.248)
[15:41:51] <flip214> to sort type specifiers
[15:42:07] <flip214> to find out what the most specific type for a given value is
[15:42:16] <flip214> *most specific matching type
[15:45:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:47:33] *** Quits: danieli (~danieli@user/danieli) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[15:47:43] <phoe> hmmm, is (and integer (satisfies foo)) or (and integer (satisfies bar)) or integer the most specific?
[15:47:57] *** Joins: danieli (~danieli@user/danieli)
[15:48:07] <phoe> even the pprint dispatch table, AFAIK, simply does TYPEP on all type specifiers and then chooses the type with highest priority
[15:48:14] <phoe> and I know it deals with types
[15:48:23] *** Joins: lispy (~lispy3@84.69.59.93)
[15:48:49] <phoe> maybe https://github.com/s-expressionists/ctype can help a little bit
[15:50:02] <flip214> I don't need no satisfies.... just want to determine which function to run for special cases of lisp forms - so I want to distinguish (IF ...) from 2 and from a general function call, that sort of thing
[15:50:28] <flip214> yeah, I'd like to avoid having to manually specify a priority
[15:51:50] <phoe> the thing is that types only answer the yes/no question - I have no idea if there exists an algorithm for checking which type specifier is "more specific" than the other
[15:53:26] <flip214> well, for (T atom (cons) (cons symbol) (cons 'foo)) (and that's all I need right now, I believe) there's a sort order that's unique enough
[15:54:10] <phoe> hmm
[15:54:25] <phoe> so, first, remove all types that the value is not TYPEP of
[15:55:05] <phoe> then, if type A is SUBTYPEP of type B and type B is *NOT* a subtypep of type A,, remove the "larger" type
[15:55:37] <phoe> iterate until you have only type or until SUBTYPEP is not capable of answering anymore
[15:57:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:58:02] <flip214> I'd hoped to get a stable list which I'd just go through until some element matches
[15:58:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:58:18] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:01:42] <pjb> flip214: typep is not an order predicate. it's not asymetric!  (loop with ss = '((CONS SYMBOL) (CONS) ATOM T) for a in ss collect (loop for b in ss collect (typep a b))) #| --> ((t t nil t) (t t nil t) (nil nil t t) (nil nil t t)) |#
[16:01:55] <pjb> flip214: therefore sorting with it will give you random results.
[16:02:56] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:04:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:04:32] <phoe> the issue with TYPEP is that you're effectively checking if a piece of Lisp data (a type specifier) is of a given type - so e.g. CONS is going to be of type SYMBOL and not of type (CONS SYMBOL) - whereas (CONS), a type specier that's 100% TYPE= to CONS, will give you inverse results
[16:04:53] <phoe> so the results are effectively accidental and the real danger is that the results of that accident look useful
[16:06:02] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[16:08:47] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:11:28] <phoe> flip214: CL-USER> (most-specific-type-specifiers 42 '(t cons real number integer (integer 0 42) (integer 42 43) (eql 42) (integer 42 42) rational))
[16:11:31] <phoe> ((EQL 42) (INTEGER 42 42))
[16:11:33] <phoe> oops
[16:11:37] <phoe> flip214: https://plaster.tymoon.eu/view/2885#2885
[16:14:46] <phoe> optionally improve it to remove type specifiers which are TYPE= to one another to reduce noise
[16:14:59] <phoe> because (EQL 42) and (INTEGER 42 42) are TYPE=
[16:15:12] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:15:52] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:18:23] <_death> phoe: well, %simple-fun-self is not %simple-fun-next.. the latter was removed in 2021 whereas the former was removed in 2017
[16:19:07] <phoe> _death: !
[16:19:18] <phoe> OK, that needs to be fixed, thank you
[16:21:45] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:23:00] <phoe> do you have a commit related to the latter?
[16:23:07] <phoe> I swear that I mixed the two up
[16:23:18] <_death> I didn't try to find it
[16:23:29] <phoe> OK, let me have a look then
[16:23:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:25:20] *** Joins: spiaggia (~user@89.207.171.57)
[16:26:36] <rotateq> hi spiaggia :) hope you're alright over there
[16:27:12] <spiaggia> On the train to go back home.
[16:28:08] <rotateq> okay, i was also on the hop and read your greeting lately
[16:28:36] *** Joins: Bike (~Bike@71.69.170.70)
[16:28:36] *** ChanServ sets mode: +o Bike
[16:28:38] <phoe> _death: fixed, thank you
[16:29:25] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:40:45] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: tschav mit 'v')
[16:44:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:44:38] <edgar-rft> beach travels faster than irc :-)
[16:48:08] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[16:48:21] <_death> phoe: cool.. now we can see that slime was updated in may 2020 and the symbol was removed in feb 2021, at least according to the dates of the commits..
[16:49:14] <_death> phoe: do you know if the asdf patches to quicklisp libraries happened before or after the warning was instituted?
[16:49:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:49:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[16:49:48] <phoe> _death: I mixed up two situations
[16:50:10] <phoe> one was related to %simple-fun-self and the other to %simple-fun-next
[16:50:18] <phoe> that's the reason for this hole
[16:50:40] <_death> phoe: yeah, I'm not talking about that
[16:50:40] <phoe> and I'm not able to chase and fix it at the moment, apologies
[16:50:59] <phoe> _death: regarding the warnings - I do not know that
[16:51:25] <phoe> there was a similar situation for both of these symbols
[16:51:45] <phoe> and if either of them are missing, it's capable of breaking slime
[16:52:10] *** Joins: jpl01 (~user@2001:16b8:49b9:f300:b583:4fba:1c07:2929)
[16:52:57] <_death> phoe: but it's another facet of the issue, what comes first.. the breakage or the foresight
[16:55:19] *** Joins: cyberbanjo (mksybr@tilde.team)
[16:57:23] *** Joins: attila_lendvai (~alendvai@catv-176-63-13-209.catv.broadband.hu)
[16:59:39] *** Quits: spiaggia (~user@89.207.171.57) (Remote host closed the connection)
[16:59:54] *** Joins: spiaggia (~user@89.207.171.57)
[17:01:53] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:08:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[17:09:52] *** Quits: santiagopim (~user@90.167.94.91) (Remote host closed the connection)
[17:10:53] *** Quits: spiaggia (~user@89.207.171.57) (Remote host closed the connection)
[17:11:06] *** Joins: spiaggia (~user@89.207.171.57)
[17:15:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:16:23] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[17:21:23] *** Quits: lispy (~lispy3@84.69.59.93) (Remote host closed the connection)
[17:21:50] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:22:59] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:29:36] *** Joins: Bike (~Glossina@71.69.170.70)
[17:29:36] *** ChanServ sets mode: +o Bike
[17:33:23] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Remote host closed the connection)
[17:35:15] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:37:35] *** Quits: spiaggia (~user@89.207.171.57) (Remote host closed the connection)
[17:37:51] *** Joins: spiaggia (~user@89.207.171.57)
[17:46:41] *** Joins: Josh_2 (~user@37.25.47.130)
[17:50:11] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[17:52:47] <Josh_2> Afternoon
[17:59:34] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[18:03:55] *** Joins: vats (~vats@103.158.91.47)
[18:07:07] *** Joins: domovod (~domovod@176.196.122.197)
[18:10:29] *** Joins: VincentVega (~user@212.97.0.240)
[18:12:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:16:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:18:07] *** Joins: djuber (~user@65.79.128.64)
[18:20:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:21:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[18:24:11] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[18:24:18] *** Quits: kevingal (~quassel@2001:770:c0:401:b442:8e59:b75e:4b33) (Ping timeout: 250 seconds)
[18:25:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Quit: WeeChat 3.3)
[18:26:41] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 256 seconds)
[18:27:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0)
[18:28:35] *** Joins: kevingal (~quassel@149.157.101.196)
[18:28:57] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Ping timeout: 256 seconds)
[18:30:10] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[18:30:50] *** Quits: spiaggia (~user@89.207.171.57) (Remote host closed the connection)
[18:31:03] *** Joins: spiaggia (~user@89.207.171.57)
[18:32:01] *** Quits: spiaggia (~user@89.207.171.57) (Client Quit)
[18:32:13] *** Quits: silasfox (~fox@p200300cec7197f00c30ddb1c84ec6b40.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[18:36:43] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[18:38:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:41:26] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[18:41:29] *** Joins: occ (~occ@user/occ)
[18:43:15] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[18:43:15] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:43:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[18:44:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:44:18] *** Joins: amb007 (~a_bakic@247.36.22.93.rev.sfr.net)
[18:46:25] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[18:46:39] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[18:51:58] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:55:06] <Josh_2> Slow day huh
[18:55:10] *** Joins: bendersteed (~user@188.4.114.117.dsl.dyn.forthnet.gr)
[18:55:25] <Josh_2> I have been having fun with MOP
[18:55:29] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[18:55:54] <_death> CLeaning the house?
[18:59:47] <Josh_2> Yes I defined by house a metaclass, makes cleaning pretty easy
[19:01:16] <_death> what does your metaclass do?
[19:03:35] <Josh_2> My actual metaclass (not my house) extracts all the slots required for various combinations of processors and allows me to compile various execution paths at compile time rather than choosing them at runtime
[19:03:39] <Josh_2> seems to be working quite well
[19:07:27] <_death> I assume you mean "processors" in the "takes input, gives output" sense rather than the hardware sense?
[19:09:03] *** Joins: rgherdt (~rgherdt@ip5f5af19f.dynamic.kabel-deutschland.de)
[19:13:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:16:49] *** Quits: amb007 (~a_bakic@247.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[19:17:27] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[19:18:19] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:30:06] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (Quit: You have been kicked for being idle)
[19:30:54] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[19:31:12] *** Joins: kevingal (~quassel@2001:770:c0:401:7423:d203:7299:4efd)
[19:41:47] *** Joins: rotateq (~user@185.66.193.48)
[19:42:17] *** Quits: bendersteed (~user@188.4.114.117.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[19:54:49] *** Quits: lagash_ (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[19:55:05] <jeosol> Good morning all!
[19:55:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[19:55:33] <phoe> morning
[19:57:42] <jeosol> Recently seem some articles and become aware of some ASDF (update, backwards compatibility, ...) issues within our great community of lispers. Here's me saying hopefully, we can put the issues behind and reach some decision agreeable for everyone.
[19:58:11] <jeosol> hi phoe: long time. read your article in the above thread
[19:58:19] <jeosol> phoe: wedding is all done now?
[19:58:45] <phoe> jeosol: yes, thank you
[19:59:02] <jeosol> phoe: congratulations!!! my man
[19:59:21] <Bike> oh, congratulations.
[19:59:28] *** ChanServ sets mode: -o Bike
[19:59:59] <phoe> I wasn't particularly vocal about it around around here
[20:00:06] <jeosol> You are in poland if I recall. Hope this Russian-Ukraine not affecting our Euro bros - don't mean to bring politics but looking out for our bros and girls across the pond. Hopefully it's  just sabre rattling
[20:00:06] <phoe> nonetheless, thanks!
[20:00:17] <phoe> jeosol: we should continue this in #lispcafe
[20:00:27] <phoe> an interesting topic but not for #commonlisp
[20:00:27] <jeosol> ok doki phoe:
[20:04:30] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:81fd:e333:1e93:e27e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:13:59] *** Joins: didi (~user@user/didi)
[20:14:57] *** Joins: treflip (~user@user/treflip)
[20:15:06] <didi> phoe: Ah, so it's not just me that miss SBCL's warning on missing generic function declarations. Also, interesting stuff about the warning when safety is off. This shows the power of compromise, I guess.
[20:16:18] <lisp123> didi: Whats the benefit (apart from a bit of code clarity) on missing generic function declarations, and was it a warning or a style warning?
[20:16:22] <Josh_2> _death: yep
[20:16:35] <jeosol> What is the go to library if I am looking at using queues to manage job tasks.  I am trying to essentially, enqueue messages (strings) and the dequeue them say N messages at a time (if up to N) and then run the tasks encoded in those strings in parallel using N threads.
[20:16:57] <Josh_2> lparallel has queues
[20:17:07] <jeosol> cl-rabbitmq (and rabbitmq) but that seems like a lot of moving parts to manage
[20:17:12] <didi> lisp123: I don't remember the specifics, but it helped me organize my programs as I like to declare generic functions on the top of the file.
[20:17:29] <rotateq> there's damn-fast-priority-queues by phoe :P
[20:17:37] <jeosol> josh_2: while I am aware of lparallel, I haven't used it's queue, so will check it out. Thx
[20:17:47] <Josh_2> didi: I have seen beach do the same, personally I put defgenerics before the first use
[20:17:47] <jeosol> rotateq: really?
[20:17:52] <rotateq> yes really
[20:18:49] <lisp123> didi: Fair enough
[20:18:54] <rotateq> hm maybe sbcl comes with its own queues in some package
[20:19:09] <phoe> lisp123: (defmethod validate-superclass (...) t)
[20:19:28] <phoe> and then your metaclasses still don't want to mesh together
[20:19:57] <phoe> and only after a while you realize that this DEFMETHOD implicitly created a generic function #'CL-USER:VALIDATE-SUPERCLASS instead of adding a method on SB-MOP:VALIDATE-SUPERCLASS
[20:20:39] <lisp123> phoe: Thanks for the useful example
[20:20:43] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Read error: Connection reset by peer)
[20:20:57] <rotateq> validate-superlisp123 :)
[20:21:35] <phoe> jeosol: you can try using my DFPQ with a counter to emulate a FIFO but I have no idea if it's going to work well, especially in a multithreaded environment - lparallel queue should work better and be thread-safe above all
[20:22:18] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[20:22:47] <didi> Josh_2: Interesting. I sometimes define the methods inside the generic function declaration.
[20:23:14] <phoe> that works too, but you can't define everything at DEFGENERIC site if you want users to extend your method
[20:23:28] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[20:23:31] <jeosol> phoe: well, for now, I am now trying to get a place to part the jobs and persistent of course (hence looking at rabbitmq). If everything works well, I dequeue the strings myself, and have another routine that can run then in parallel, with N specified as a variable
[20:23:50] <phoe> oh! DFPQ isn't persistent
[20:24:44] <jeosol> phoe: ok
[20:24:54] <phoe> you could either try that or emulate a queue in postgres via its notification features, e.g. https://blog.crunchydata.com/blog/message-queuing-using-native-postgresql
[20:25:09] <phoe> no idea if there's anything in-Lisp for doing this though that can recover from power losses and such
[20:25:22] <jeosol> I am getting the cl-rabbit to work with rabbitmq but has more dependencies I may not like
[20:26:13] <jeosol> cl-bunny (i guess was in common lisp) has many examples following the main rabbitmq tutorial, and I check one of the simple example and it works.
[20:27:04] <jeosol> phoe: thanks for that link. I use postgresql already, I guess write to db, after processing, if successful, remove message from db
[20:27:10] <jeosol> that could be approach
[20:27:23] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[20:27:43] <phoe> oh, then you can use it for queueing too - it's a relatively recent public discovery that one can use postgres for job queueing, and a somewhat amusing one at that
[20:30:39] <didi> Speaking of extending methods, I struggle between defining a top class or not. The issue rises when I want to define a default method for all subclasses. If I define a top class, I need to define a subclass of this top class if I want to use the default method. If I don't define a top class, hence define a default method without class specialization, I can just duck type.
[20:31:36] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Remote host closed the connection)
[20:31:48] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[20:33:20] <jeosol> phoe: reading the link, it's seems the option is more manageable appears to allow selecting N jobs without conflicts from other connections
[20:33:51] <phoe> didi: default method? what do you mean
[20:34:12] <phoe> if you define a class that isn't meant to be instantiated directly but inherited from, then you can nonetheless define a method specialized on that class
[20:34:20] <didi> (defmethod default (object) ...) vs. (defmethod default ((object top-class)) ...)
[20:34:34] <phoe> yes, both approaches work
[20:34:38] <didi> Indeed.
[20:34:51] <phoe> depends on whether you want your method to *only* work on TOP-CLASS instances, direct or indirect
[20:34:57] <phoe> or whether you want to define behavior for absolutely everything
[20:35:03] <didi> So the top-class ends up being useless for my purpose.
[20:35:14] <phoe> not really
[20:35:41] <phoe> you can still e.g. TYPEP objects to see if they are instances of TOP-CLASS
[20:35:49] <phoe> and that sometimes comes in handy
[20:36:07] <phoe> also TOP-CLASS can have slots; no idea if that's useful in your particular case, I'm speaking generally here
[20:37:04] <didi> phoe: Indeed.
[20:38:31] <marcoxa> Hi there...
[20:38:53] <didi> The slots argument is compelling. If I need to maintain some value myself, this is the way.
[20:39:30] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:40:24] <phoe> hey marcoxa
[20:46:27] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e6:8fde:809d:35b3:ab45:1702)
[20:47:02] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-001.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[20:49:50] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f9:d1b2:809d:35b3:ab45:1702) (Ping timeout: 268 seconds)
[20:54:53] *** Quits: varjag (~user@188.95.247.248) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[20:59:42] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:02:28] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[21:10:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:17:00] *** Quits: cyberbanjo (mksybr@tilde.team) (Quit: WeeChat 3.4)
[21:21:13] *** Quits: rgherdt (~rgherdt@ip5f5af19f.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:22:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:40:53] *** Joins: foxfromabyss (~foxfromab@2a01:c22:ac34:c500:585f:b194:c7c2:5834)
[21:42:31] <foxfromabyss> Hi! I have a question:
[21:42:32] <foxfromabyss> https://plaster.tymoon.eu/view/2886#2886
[21:42:32] <foxfromabyss> This ^ fails to expand the macro, but I can't seem to figure out why
[21:42:33] <foxfromabyss> is it not allowed to have multiple if/when/unless blocks?
[21:44:51] <Bike> foxfromabyss: what error are you seeing? something about clause ordering, perhaps?
[21:45:22] <Bike> "iteration in LOOP follows body code"?
[21:45:26] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[21:45:30] <foxfromabyss> exactly
[21:45:31] <foxfromabyss> https://plaster.tymoon.eu/view/2886#2886
[21:45:44] <phoe> FOR must happen before WHEN
[21:46:01] <phoe> the above is non-conforming, sadly
[21:46:04] <foxfromabyss> I see, thanks
[21:46:11] <Bike> WHEN is a body clause. you have to put it after all the iteration variable specifications.
[21:46:17] <foxfromabyss> i am guessing this is part of the spec?
[21:46:22] <phoe> yes
[21:46:34] <phoe> LOOP variable binding clauses must happen before LOOP body clauses
[21:47:00] <phoe> mixing the two is non-conforming; some LOOP implementations permit this, but it's not generally accepted or widespread
[21:47:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[21:47:20] <foxfromabyss> this is non-trivial :D  thanks!
[21:47:21] <foxfromabyss> (i was assuming i can only have one if/when, but that made no sense)
[21:47:30] *** Joins: amb007 (~a_bakic@213.36.22.93.rev.sfr.net)
[21:47:57] <Bike> what about the error message made you think it was telling you could only have one WHEN clause?
[21:48:34] <foxfromabyss> literally nothing.
[21:48:34] <foxfromabyss> i didn't expect the macroexpansion to have any meaningful errors tbh, and jumped the first idea that came to my mind
[21:48:53] <phoe> in Lisp, macroexpanders are just functions
[21:48:58] <phoe> and they can signal errors of their own
[21:49:03] <phoe> and they will do that at times!
[21:49:21] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[21:49:23] <phoe> whenever they do, study their wisdom carefully
[21:49:30] <phoe> they might tell you what you need to fix
[21:50:03] <foxfromabyss> I will try my best!
[21:50:04] <foxfromabyss> But did the pasted error hint at the `for` clause being in the wrong place?
[21:50:13] <foxfromabyss> (just asking, still not sure how to read the error that i got)
[21:50:28] <phoe> "iteration in LOOP follows body code"
[21:50:48] <phoe> iteration, so "for x = (random 10)", follows body code - in this case, "when (> counter 3) do (print 5)"
[21:50:57] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:51:09] <phoe> your loop is like (loop body-code-1 iteration-1 body-code-2)
[21:51:46] <Bike> you could conceive of it as the for clause being too late, or as the when clause being too early.
[21:52:40] <foxfromabyss> i see i see, that makes sense, thanks for the detailed explanation!
[21:53:38] <phoe> no problem, thank you for flying #commonlisp
[21:56:12] *** Quits: amb007 (~a_bakic@213.36.22.93.rev.sfr.net) (Ping timeout: 250 seconds)
[21:56:47] *** Joins: amb007 (~a_bakic@224.37.22.93.rev.sfr.net)
[21:57:48] <rotateq> jeosol: okay i looked, sbcl also has a queues package
[22:02:02] <foxfromabyss> i have.. another loop question
[22:02:03] <foxfromabyss> the previous attempt was me trying to reduce the error search space, but here's the full source block
[22:02:03] <foxfromabyss> https://plaster.tymoon.eu/view/2886#2886
[22:02:04] <foxfromabyss> I would assume that `found where keyword expected getting LOOP clause after IF` is referring to `for` assignment because of `where`, but i can't spot the issue
[22:02:29] *** Joins: Oladon (~olad@98.43.81.226)
[22:03:39] <phoe> IF (loop ...) DO (...)
[22:03:41] <phoe> you are missing the DO
[22:03:47] *** Quits: kevingal (~quassel@2001:770:c0:401:7423:d203:7299:4efd) (Remote host closed the connection)
[22:03:53] <phoe> same stuff after ELSE
[22:03:57] <foxfromabyss>  >_<
[22:04:01] <phoe> in LOOP, the DO is required
[22:04:10] <phoe> and I often end up forgetting that myself xD
[22:04:12] <foxfromabyss> the cookbok only shows examples with keywords
[22:04:14] <Bike> the error message is saying it expected a loop keyword like DO after the if conditional.
[22:04:18] <phoe> it's just too easy to forget about it
[22:04:23] <foxfromabyss> where do i complain so  that the cookbook gets better?
[22:04:31] <phoe> foxfromabyss: one second
[22:04:40] <foxfromabyss> (i am referring to conditionals)
[22:05:08] <phoe> foxfromabyss: https://github.com/LispCookbook/cl-cookbook
[22:05:23] <phoe> it's a highly maintained repository, complaints should be welcome
[22:05:31] <foxfromabyss> I see, thanks :)  I hope it's a valid thing to suggest
[22:05:40] <foxfromabyss> thanks a lot for the help again!
[22:05:59] *** Quits: amb007 (~a_bakic@224.37.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[22:07:06] *** Joins: amb007 (~a_bakic@114.36.22.93.rev.sfr.net)
[22:13:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:20:23] *** Joins: akoana (~ah@user/akoana)
[22:22:57] *** Quits: Fade (fade@outrider.deepsky.com) (Remote host closed the connection)
[22:27:42] *** Joins: fade (fade@outrider.deepsky.com)
[22:28:58] *** fade is now known as Fade
[22:37:10] <foxfromabyss> Is it possible to seed the default random generator?
[22:38:29] <Bike> clhs make-random-state
[22:38:29] *** Quits: amb007 (~a_bakic@114.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:38:29] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_mk_rnd.htm
[22:38:50] <Bike> if you pass t, you can seed it. you can't specify the seed, though.
[22:39:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:39:02] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[22:39:32] <Bike> https://github.com/Shinmera/random-state/ shinmera has implemented a bunch of PRNGs you can use if you do need to provide a seed.
[22:39:50] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:40:39] <Shinmera> I should revive that project. Got a bunch of hash-based RNGs I'd like to implement
[22:45:16] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:47:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:49:17] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 240 seconds)
[22:51:56] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e6:8fde:809d:35b3:ab45:1702) (Ping timeout: 268 seconds)
[22:57:09] <sveit> does anyone know of an example of the :interactive keyword parameter for restart-case that's relatively user friendly (prompting for multiple arguments, works with SLY/SLIME)
[22:59:11] <jmercouris> I don't understand why UIOP:run-program is failing for my use case: http://dpaste.com/AGRNGD6BL
[22:59:31] <jmercouris> if I run the exact same thing in a terminal "kill -9 76012" it will work!
[23:00:12] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[23:00:44] <phoe> (uiop:launch-program '("kill" "-9" "1542142")) works on my machine
[23:00:56] <phoe> try to check the process output stream for errors maybe?
[23:01:12] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[23:02:33] <jmercouris> phoe: OK
[23:02:36] <jmercouris> I will try that
[23:03:51] <jmercouris> error output result is nil
[23:03:53] <jmercouris> hm
[23:04:51] <foxfromabyss> thanks !
[23:04:57] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[23:06:37] <jmercouris> phoe: so again, "Kill -9 77011" works in a terminal
[23:06:48] <jmercouris> but (uiop:run-program (list "kill" "9" "77011")) doesn't
[23:06:58] <phoe> are you sure the PID is still valid?
[23:07:01] <jmercouris> Yes
[23:07:08] <jmercouris> I tested first Lisp and THEN the terminal
[23:07:25] <etimmons> Shouldn't it be "-9"
[23:07:26] <phoe> s/9/-9/?
[23:07:48] <phoe> you are trying to kill a process with PID 9 with that command, which fails
[23:08:04] <jmercouris> it should be -9 yes
[23:08:10] <jmercouris> I thought UIOP run program somehow magically knew this
[23:08:20] <phoe> how can it know this
[23:08:32] <jmercouris> I don't know, it seems to know this
[23:08:42] <jmercouris> I frequently don't put dashes
[23:09:04] <phoe> it's not uiop, it's the underlying shell commands
[23:09:14] <jmercouris> well, putting the dash in helped
[23:09:16] <jmercouris> thanks phoe
[23:09:20] <phoe> run-program does no magic of its own
[23:09:25] <jmercouris> so apparently we frequently do not need dashes in commands, but sometimes we do?
[23:09:26] <jmercouris> I don't understand
[23:09:31] <jmercouris> well, just the unix things
[23:09:38] <phoe> ask your favorite unix program why it does this
[23:09:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:10:35] *** Joins: djuber` (~user@65.79.128.64)
[23:10:35] <jmercouris> I will not ask
[23:10:41] <jmercouris> that path only leads to insanity
[23:10:48] <jmercouris> I just resolutely accept
[23:13:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:13:19] <pjb> jmercouris: options are prefixed by a dash, arguments are not.
[23:13:20] <_death> jmercouris: each program is free to handle the arguments passed to it as it wishes
[23:13:44] <pjb> jmercouris: rm -f ./-f # to forcibly (option -f) remove the file -f (argument).
[23:15:02] <jackdaniel> options are keywords of sorts
[23:15:22] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 268 seconds)
[23:15:26] <jackdaniel> s/keywords/keyword arguments/
[23:15:48] *** Joins: kevingal (~quassel@213.233.154.159)
[23:16:49] *** Quits: vats (~vats@103.158.91.47) (Ping timeout: 256 seconds)
[23:17:05] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:17:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:21:32] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 256 seconds)
[23:30:17] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[23:30:47] <opcode> I have a package I wrote that I'm loading via quicklisp, but the top level defparameter'd variables aren't being set after load.  Do I need to encase those in a (when eval load)?
[23:31:16] <Bike> no, (eval-when (eval load) ...) is essentially the default. what does your code look like?
[23:32:11] <opcode> At the top level it's just (defparameter *whatever* :foo)
[23:32:22] <opcode> And I export that in my defpackage declaration
[23:32:40] <opcode> But when I import that into a new file, sly complains that the variable isn't set
[23:32:59] <phoe> import what into a new file
[23:33:16] <opcode> One sec switching from phone to laptop
[23:33:20] <phoe> importing isn't a concept defined for files, importing is something you do to symbols
[23:33:33] <foxfromabyss> I am looking for a small webserver in CL. I need to parse 1 format of query string on one URL path
[23:33:34] <foxfromabyss> Is Hunchentoot still the go-to? Or is it overkill?
[23:33:38] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:33:47] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:34:14] <White_Flame> hunchentoot is solid
[23:34:21] <opcode> phoe: for example i'm doing (ql:quickload "mypackage")
[23:34:29] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
[23:34:29] <opcode> where mypackage is in the local-projects repository
[23:34:43] <opcode> but if I try to access at the REPL e.g. mypackage:*some-global*
[23:35:10] <opcode> it complains the variable is unbound
[23:35:14] <semz_> Hunchentoot makes it pretty easy to ignore the parts you don't need
[23:35:25] *** semz_ is now known as semz
[23:36:06] <phoe> opcode: where is mypackage:*some-global* defined?
[23:36:09] <foxfromabyss> i see, thanks!
[23:36:16] <opcode> in the top level of mypackage.lisp
[23:36:33] <phoe> do you have (in-package "mypackage") before you define that variable?
[23:36:37] <opcode> yep
[23:36:50] <phoe> weird, can you post your code online somewhere?
[23:37:07] <phoe> https://plaster.tymoon.eu/ for instance
[23:37:11] <opcode> yeah i can do that, just gotta clean it up because it has API keys in it
[23:37:18] <opcode> glad to know it *should* work
[23:37:23] <opcode> i felt like i was taking crazy pills
[23:37:27] <opcode> one sec
[23:37:38] <phoe> oh wait
[23:37:45] <phoe> you have "mypackage", right? that's lowercase
[23:37:55] <opcode> yes i do everything in lisp lowercase
[23:37:57] <phoe> so you should need to access your symbol like |mypackage|:*some-global*
[23:38:08] <opcode> wait what
[23:38:12] <phoe> the Lisp reader upcases symbol names by default
[23:38:30] <phoe> ever wondered why, when you type 'car in the REPL, the system replies by printing CAR in uppercase?
[23:38:40] <phoe> package names follow the same rule
[23:38:48] <opcode> I just assumed it was a historical artifact like FORTRAN vs Fortran
[23:38:51] <phoe> (defpackage #:package ...) results in a package named "PACKAGE"
[23:39:02] <phoe> (defpackage "package" ...) results in a package named "package"
[23:39:17] <phoe> Lisp is actually case sensitive, and you discovered one of the places where it matters
[23:39:20] <opcode> oh for pete's peppers
[23:39:27] <phoe> and where it's worth to use gensyms for package names
[23:39:37] <phoe> so, (defpackage #:package ...) and (in-package #:package)
[23:39:40] <phoe> and you should be golden
[23:39:57] <opcode> is that what "#:foo" is?  a gensym?  I've never know what those are called
[23:40:00] <opcode> hard to google
[23:40:13] <sm2n> that's an uninterned symbol
[23:40:17] <opcode> k
[23:40:22] <Xach> "apparently uninterned"
[23:40:35] <phoe> homeless
[23:40:38] <opcode> k
[23:40:45] <opcode> like, uh, a symbol literal
[23:40:46] <Xach> aye
[23:40:52] <phoe> well, not really
[23:41:01] <phoe> it is a symbol literal all right, but a special one
[23:41:05] <phoe> it has no home package
[23:41:15] <opcode> ok
[23:41:51] <opcode> gotta pick up my 4 year old from preschool but I bet that'll fix it, thanks
[23:42:55] <etimmons> It's worth noting that if the package name is the issue, the error shouldn't be that the variable is unbound, it should complain about being unable to find the package
[23:43:10] <etimmons> Unless you also happened to define the package with the correct case earlier
[23:51:08] *** Quits: kevingal (~quassel@213.233.154.159) (Remote host closed the connection)
