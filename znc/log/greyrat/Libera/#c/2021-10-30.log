[00:00:40] *** Joins: derjanni (~textual@p4ff808a3.dip0.t-ipconnect.de)
[00:00:52] *** Joins: Darkcoal (~user@139.64.42.148)
[00:01:39] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[00:01:58] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:02:01] *** Joins: humky (~humky@user/humky)
[00:02:21] *** Quits: uqlock (~uquenar@wireless-acad-11.nat.emory.edu) (Quit: Leaving)
[00:04:04] *** Quits: derjanni (~textual@p4ff808a3.dip0.t-ipconnect.de) (Client Quit)
[00:04:15] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::b67c) (Quit: Leaving.)
[00:05:06] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[00:06:42] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 258 seconds)
[00:07:35] *** Quits: bajaba (~cassepipe@35.54.14.81.rev.sfr.net) (Ping timeout: 264 seconds)
[00:07:41] *** Quits: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net) (Ping timeout: 268 seconds)
[00:08:19] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::b67c)
[00:11:15] *** Joins: serbest (~serbest@user/serbest)
[00:11:18] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:12:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb) (Ping timeout: 260 seconds)
[00:14:12] *** Joins: Raguile (~Raguile@user/raguile)
[00:14:37] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 252 seconds)
[00:15:02] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[00:18:35] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[00:24:11] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[00:24:38] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:80d7:1a70:3e8c:572b)
[00:25:36] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[00:25:49] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[00:27:09] *** Joins: bajaba (~cassepipe@35.54.14.81.rev.sfr.net)
[00:27:15] *** Joins: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net)
[00:30:27] *** Quits: bajaba (~cassepipe@35.54.14.81.rev.sfr.net) (Client Quit)
[00:30:30] *** Quits: cassepipe (~cassepipe@35.54.14.81.rev.sfr.net) (Client Quit)
[00:31:53] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[00:35:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:35:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:36:50] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 260 seconds)
[00:38:14] *** Joins: sebbu (~sebbu@user/sebbu)
[00:38:19] *** Quits: eXeC64 (~eXeC64@80.1.220.46) (Quit: There goes my bouncer)
[00:38:41] *** Joins: eXeC64 (~eXeC64@80.1.220.46)
[00:38:50] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[00:39:48] *** Joins: triad (~triad@user/triad)
[00:40:10] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:42:46] *** Quits: orzel (~orzel@2a01:e0a:df:6ba0:6600:577d:a10:3675) (Quit: Konversation terminated!)
[00:43:27] *** Joins: serbest (~serbest@user/serbest)
[00:44:42] *** Joins: seninha (~seninha@user/seninha)
[00:45:25] *** Joins: luizfrds (~Luiz@152.250.243.147)
[00:45:52] *** Parts: triad (~triad@user/triad) (Leaving)
[00:46:35] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 246 seconds)
[00:48:24] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:51:30] *** gl___ is now known as gl
[00:52:44] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:59:31] *** Joins: aro17 (~aro17@195.200.221.123)
[01:00:00] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[01:00:25] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[01:01:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[01:03:59] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 264 seconds)
[01:04:42] *** Quits: Akuli (~Akuli@82-203-166-92.bb.dnainternet.fi) (Quit: Leaving)
[01:04:58] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[01:07:21] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[01:07:35] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 260 seconds)
[01:08:55] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[01:09:34] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 258 seconds)
[01:10:06] *** Joins: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net)
[01:10:24] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:10:40] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:13:25] *** Quits: magla (~gelignite@55d46190.access.ecotel.net) (Quit: Stay safe!)
[01:15:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:15:35] *** Parts: aro17 (~aro17@195.200.221.123) ()
[01:17:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:17:57] *** Joins: kn07_ (~kn07_@86.121.23.168)
[01:21:21] *** Joins: cartman (~i.am@191.32.92.1)
[01:22:06] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:22:21] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[01:22:34] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[01:22:54] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[01:23:05] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[01:23:58] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:25:08] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[01:27:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[01:33:27] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:38:35] *** Joins: seninha (~seninha@user/seninha)
[01:39:49] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[01:41:39] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:42:32] *** Quits: alch (~alch@151.82.144.114) (Ping timeout: 258 seconds)
[01:43:19] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[01:44:13] *** Joins: alch (~alch@151.82.201.31)
[01:48:47] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:49:01] *** Quits: kn07_ (~kn07_@86.121.23.168) (Quit: Leaving)
[01:49:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:49:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:49:04] *** Joins: wroathe (~wroathe@user/wroathe)
[01:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:53:04] *** Quits: cartman (~i.am@191.32.92.1) (Quit: I come down here for a fat woman and that's what I'm havin.)
[01:56:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:58:05] *** Quits: riposte (~finalripo@2403-5802-74-2--16c3.ip6.aussiebb.net) (Quit: Quitting)
[01:58:10] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:58:24] <TheDcoder[m]> Hi, someone suggested using the list command in GDB to view source code inside an executable, but it only lists 10 random lines, I want to get all of the code, how do I do that?
[01:58:35] <TheDcoder[m]> there are multiple source files involved too
[01:58:54] *** Joins: soul-d (~uknown@user/soul-d)
[01:59:39] *** Joins: ferdna (~ferdna@user/ferdna)
[01:59:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[02:01:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b)
[02:02:28] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[02:08:00] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[02:09:56] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[02:12:36] *** Quits: presonic (~presonic@111-22-237-24.gci.net) (Ping timeout: 245 seconds)
[02:13:17] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[02:15:57] *** Quits: tanewha (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 268 seconds)
[02:16:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3ce5:4cdd:856a:259b)
[02:16:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3ce5:4cdd:856a:259b) (Changing host)
[02:16:53] *** Joins: skapata (~Skapata@user/skapata)
[02:19:45] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[02:20:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b) (Quit: Leaving)
[02:22:06] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b)
[02:22:34] *** Quits: x__ (~user@86.12.57.153) (Quit: Leaving)
[02:28:17] *** Joins: haniaF (~haniaF@79.191.103.145.ipv4.supernova.orange.pl)
[02:29:11] *** Quits: haniaF_ (~haniaF@79.191.104.229.ipv4.supernova.orange.pl) (Ping timeout: 264 seconds)
[02:33:20] *** Quits: pizdets (~pizdets@183.182.115.153) (Ping timeout: 250 seconds)
[02:33:33] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:39:15] <ioxzev1z> TheDcoder[m], that won't view "human readable (original)" source
[02:39:23] <ioxzev1z> Unless I'm mistaken
[02:39:52] <TheDcoder[m]> It's compiled with debug info :)
[02:40:11] <TheDcoder[m]> I could do that with GUI frontends, but was wondering if I could that in the terminal
[02:42:59] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 264 seconds)
[02:43:19] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:44:10] <Neui[m]> There is the `tui enable` command which also gives you a source code view you can scroll through
[02:46:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[02:47:53] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:48:45] *** Joins: Wulf (~Wulf@user/wulf)
[02:51:39] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 260 seconds)
[02:52:49] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[02:53:20] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[02:55:04] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[02:55:09] *** Joins: X-Scale` (~ARM@83.223.251.139)
[02:55:23] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:55:34] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:57:03] *** Quits: random-nick (~random-ni@87.116.179.142) (Ping timeout: 268 seconds)
[02:57:20] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[02:57:27] *** Quits: serbest (~serbest@user/serbest) (Quit: Lost terminal)
[02:57:40] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[02:57:59] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[02:58:08] *** Joins: serbest (~serbest@user/serbest)
[02:58:56] *** X-Scale` is now known as X-Scale
[02:59:47] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b) (Ping timeout: 264 seconds)
[03:01:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 260 seconds)
[03:01:48] *** Joins: luizfrds (~Luiz@152.250.243.147)
[03:05:39] *** Quits: Darkcoal (~user@139.64.42.148) (Ping timeout: 260 seconds)
[03:08:16] *** Quits: puke (~puke@user/puke) (Quit: puke)
[03:11:53] <fizzie> How about just looking at, you know, the actual source files, outside of GDB? 
[03:11:58] <fizzie> "Debug info" generally doesn't mean the source would be in the *executable*, it just means the executable has source file names and line numbers encoded in it, which gdb will then use to look up the files.
[03:11:58] <TheDcoder[m]> Neui: Cool, thanks, but is there a way to print it? Maybe there is another tool which can extract the text?
[03:12:12] <fizzie> So you're just going to be using GDB as a really weird text viewer.
[03:12:20] <TheDcoder[m]> fizzie: I wanted to confirm what version of the source code the executable was compiled from
[03:12:53] <TheDcoder[m]> Oh, so the source isn't actually embedded inside the executable?
[03:12:58] *** Joins: puke (~puke@user/puke)
[03:13:08] <TheDcoder[m]> If so, that's a bummer :-/
[03:15:48] <fizzie> It's not. Just file names. You can dump most debugging information with `objdump -gW`.
[03:15:56] *** Joins: hors (uid524992@smol/hors)
[03:16:33] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Quit: ZNC 1.8.2 - https://znc.in)
[03:18:29] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[03:18:38] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 268 seconds)
[03:22:11] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Client Quit)
[03:22:59] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[03:23:24] <fizzie> I don't think there's really a general-purpose way of figuring out which source version an executable came from. A lot of binaries will include the by-now pretty widespread build ID (often in a .note.gnu.build-id section), but that only helps if you have a mapping for them.
[03:24:20] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:26:46] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Client Quit)
[03:27:03] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[03:29:48] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:30:03] *** Quits: serbest (~serbest@user/serbest) (*.net *.split)
[03:30:03] *** Quits: Crescendo (~Crescendo@user/crescendo) (*.net *.split)
[03:30:03] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[03:30:03] *** Quits: haniaF (~haniaF@79.191.103.145.ipv4.supernova.orange.pl) (*.net *.split)
[03:30:03] *** Quits: alch (~alch@151.82.201.31) (*.net *.split)
[03:30:03] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (*.net *.split)
[03:30:03] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:80d7:1a70:3e8c:572b) (*.net *.split)
[03:30:03] *** Quits: pstef (~pstef@staticline16996.toya.net.pl) (*.net *.split)
[03:30:03] *** Quits: Famine- (~Famine@user/famine) (*.net *.split)
[03:30:03] *** Quits: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net) (*.net *.split)
[03:30:03] *** Quits: johnnyreb (~tth@user/johnnyreb) (*.net *.split)
[03:30:03] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (*.net *.split)
[03:30:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[03:30:03] *** Quits: m4v (~znc@ubuntu/member/m4v) (*.net *.split)
[03:30:03] *** Quits: prime (~prime@user/prime) (*.net *.split)
[03:30:03] *** Quits: machinehum (~machinehu@45.131.194.114) (*.net *.split)
[03:30:03] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (*.net *.split)
[03:30:03] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[03:30:03] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f556:e34e:c758:9b91) (*.net *.split)
[03:30:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (*.net *.split)
[03:30:03] *** Quits: Haxxa (~Haxxa@122.199.46.64) (*.net *.split)
[03:30:03] *** Quits: majors (~majors@user/majors) (*.net *.split)
[03:30:03] *** Quits: zaratustra_ (~zaratustr@user/zaratustra) (*.net *.split)
[03:30:03] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[03:30:03] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[03:30:03] *** Quits: cebor_ (~cebor@user/cebor) (*.net *.split)
[03:30:03] *** Quits: kman_ (~kman@45.77.144.136) (*.net *.split)
[03:30:03] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[03:30:03] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[03:30:03] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[03:30:03] *** Quits: Moonspell (moon@194.87.139.59) (*.net *.split)
[03:30:03] *** Quits: sdfgsdfg (sdfgsdfg@user/sdfgsdfg) (*.net *.split)
[03:30:03] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[03:30:03] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[03:30:03] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[03:30:03] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[03:30:03] *** Quits: DrinkyBird (~drinkybir@sprawl.drinkybird.net) (*.net *.split)
[03:30:03] *** Quits: nikomo (~quassel@nikomo.fi) (*.net *.split)
[03:30:03] *** Quits: nolesswrong (~nolesswro@45.32.1.17) (*.net *.split)
[03:30:03] *** Quits: sirdidymus (~sirdidymu@sorcsys.net) (*.net *.split)
[03:30:03] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[03:30:03] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[03:30:03] *** Quits: alicef (~none@gentoo/developer/alicef) (*.net *.split)
[03:30:03] *** Quits: meowray (~MaskRay@user/meowray) (*.net *.split)
[03:30:03] *** Quits: fstd (~fstd@xdsl-89-0-79-89.nc.de) (*.net *.split)
[03:30:03] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (*.net *.split)
[03:30:03] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (*.net *.split)
[03:30:03] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[03:30:03] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[03:30:03] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[03:30:03] *** Quits: TommyC (~TommyC@user/tommyc) (*.net *.split)
[03:30:03] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[03:30:03] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[03:30:03] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: sa (sid1055@tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (*.net *.split)
[03:30:03] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (*.net *.split)
[03:30:03] *** Quits: domve (~dom@user/domve) (*.net *.split)
[03:30:03] *** Quits: mniip (~mniip@libera/staff/mniip) (*.net *.split)
[03:30:03] *** Quits: Teckla (~Teckla@user/teckla) (*.net *.split)
[03:30:03] *** Quits: samir (~azureuser@user/samir) (*.net *.split)
[03:30:03] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (*.net *.split)
[03:30:03] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (*.net *.split)
[03:30:03] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[03:30:03] *** Quits: Freman (~Freman@185.83.217.144) (*.net *.split)
[03:30:03] *** Quits: Chaser (~Chaser@user/chaser) (*.net *.split)
[03:30:03] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[03:30:03] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[03:30:03] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[03:30:03] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: drew (~drew@user/drew) (*.net *.split)
[03:30:03] *** Quits: supernovah (~supernova@mail.ijk.nz) (*.net *.split)
[03:30:03] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (*.net *.split)
[03:30:03] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[03:30:03] *** Quits: placeb0 (uid283215@lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: nullptr| (~nullptr@user/nullptr/x-2182142) (*.net *.split)
[03:30:04] *** Quits: nowz (~nowz@user/nowz) (*.net *.split)
[03:30:04] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (*.net *.split)
[03:30:09] *** Joins: Sos (~Sos@37.30.20.146.nat.umts.dynamic.t-mobile.pl)
[03:30:16] *** Joins: sirdidym1s (~sirdidymu@sorcsys.net)
[03:30:16] *** Joins: nowz (~nowz@194.136.126.35)
[03:30:17] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[03:30:17] *** Joins: Wulf (~Wulf@user/wulf)
[03:30:17] *** Joins: domve (~dom@2605:6400:30:f922:1337::)
[03:30:17] *** Joins: nikomo (~quassel@nikomo.fi)
[03:30:17] *** Joins: haniaF (~haniaF@79.191.103.145.ipv4.supernova.orange.pl)
[03:30:18] *** Joins: meowray (~MaskRay@li683-166.members.linode.com)
[03:30:19] *** Joins: Artea (~Lufia@artea.com.pt)
[03:30:21] *** Joins: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net)
[03:30:24] *** Joins: Feuermagier (~Feuermagi@2a02:2488:4211:3400:6419:933b:46e0:8942)
[03:30:25] *** Joins: supernovah (~supernova@mail.ijk.nz)
[03:30:25] *** Joins: koffeinfriedhof (~koffeinfr@p200300e2b7251fd20041fbfffe5aba31.dip0.t-ipconnect.de)
[03:30:25] *** Joins: vinay (~Vinay@user/vinay-keshava)
[03:30:26] *** Joins: nolesswrong (~nolesswro@45.32.1.17)
[03:30:27] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[03:30:28] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[03:30:30] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[03:30:31] *** Joins: buhman (sid411355@user/buhman)
[03:30:31] *** Joins: computerquip (sid423484@user/computerquip)
[03:30:31] *** Joins: mixfix41 (~homefame@user/mixfix41)
[03:30:32] *** Joins: TommyC (~TommyC@45.92.124.114)
[03:30:35] *** Joins: KnownSyntax (sid233169@id-233169.hampstead.irccloud.com)
[03:30:37] *** Joins: dmlloyd (sid331705@id-331705.ilkley.irccloud.com)
[03:30:39] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[03:30:39] *** Quits: TommyC (~TommyC@45.92.124.114) (Changing host)
[03:30:39] *** Joins: TommyC (~TommyC@user/tommyc)
[03:30:39] *** Quits: nowz (~nowz@194.136.126.35) (Changing host)
[03:30:39] *** Joins: nowz (~nowz@user/nowz)
[03:30:40] *** Joins: machinehum (~machinehu@45.131.194.114)
[03:30:40] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[03:30:41] *** Joins: DrinkyBird (~drinkybir@sprawl.drinkybird.net)
[03:30:41] *** Joins: ztx (~ztx@89.232.195.187)
[03:30:42] *** Quits: domve (~dom@2605:6400:30:f922:1337::) (Changing host)
[03:30:42] *** Joins: domve (~dom@user/domve)
[03:30:42] *** Joins: celphi (sid97751@user/celphi)
[03:30:43] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[03:30:43] *** sudden is now known as Guest4382
[03:30:43] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[03:30:43] *** Joins: mniip (mniip@libera/staff/mniip)
[03:30:44] *** Joins: AndrewYu (~andrew@andrewyu.org)
[03:30:45] *** Quits: Feuermagier (~Feuermagi@2a02:2488:4211:3400:6419:933b:46e0:8942) (Changing host)
[03:30:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:30:45] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:890a:9e05:8d6c:227c)
[03:30:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:30:48] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[03:30:48] *** Quits: koffeinfriedhof (~koffeinfr@p200300e2b7251fd20041fbfffe5aba31.dip0.t-ipconnect.de) (Changing host)
[03:30:48] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[03:30:48] *** Joins: kman (~kman@45.77.144.136)
[03:30:55] *** Joins: johnnyreb (~tth@013-240-158-163.dynamic.caiway.nl)
[03:31:01] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[03:31:03] *** Quits: dmlloyd (sid331705@id-331705.ilkley.irccloud.com) (Changing host)
[03:31:03] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[03:31:04] *** Joins: samir (~azureuser@20.97.234.198)
[03:31:04] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[03:31:08] *** Quits: KnownSyntax (sid233169@id-233169.hampstead.irccloud.com) (Changing host)
[03:31:08] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[03:31:11] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[03:31:13] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Client Quit)
[03:31:18] *** Joins: cehteh (~ct@git.pipapo.org)
[03:31:19] *** Joins: m4v (~znc@ubuntu/member/m4v)
[03:31:22] *** Quits: AndrewYu (~andrew@andrewyu.org) (Changing host)
[03:31:22] *** Joins: AndrewYu (~andrew@user/andrewyu)
[03:31:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:31:28] *** Joins: wroathe (~wroathe@user/wroathe)
[03:31:30] *** Joins: cengiz_io (sid223191@ilkley.irccloud.com)
[03:31:42] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[03:31:42] *** Joins: blinky42 (~quassel@user/blinky42)
[03:31:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[03:31:53] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[03:32:02] *** Joins: zaratustra (~zaratustr@user/zaratustra)
[03:32:03] *** Joins: Moonspell (moon@194.87.139.59)
[03:32:09] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[03:32:12] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[03:32:13] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[03:32:16] *** Joins: drew (~drew@user/drew)
[03:32:17] *** Joins: fcresende (~quassel@vps35015.publiccloud.com.br)
[03:32:18] *** Joins: serbest (~serbest@user/serbest)
[03:32:18] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[03:32:21] *** Joins: Teckla (~Teckla@user/teckla)
[03:32:25] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[03:32:27] *** Joins: Exa (exa@irc.moe)
[03:32:29] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[03:32:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:32:34] *** Joins: Freman (~Freman@185.83.217.144)
[03:32:35] *** Joins: majors (~majors@user/majors)
[03:32:37] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[03:32:39] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[03:32:41] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:3d65:8833:4853:5bbe)
[03:32:41] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:42] *** Joins: alicef (~none@gentoo/developer/alicef)
[03:32:47] *** Joins: prime (~prime@user/prime)
[03:32:48] *** Joins: cebor (~cebor@user/cebor)
[03:32:49] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[03:33:03] *** Joins: Teacup (~teacup@user/teacup)
[03:33:13] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[03:33:22] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[03:33:23] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[03:33:24] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:33:31] *** Joins: Chaser (~Chaser@user/chaser)
[03:33:32] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[03:35:01] *** Joins: sdfgsdfg (sdfgsdfg@user/sdfgsdfg)
[03:35:17] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[03:35:18] *** Joins: pstef (~pstef@staticline16996.toya.net.pl)
[03:35:24] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:35:29] *** Joins: alch (~alch@151.82.201.31)
[03:37:05] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Client Quit)
[03:37:29] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:38:23] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[03:38:23] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[03:39:18] *** Quits: meowray (~MaskRay@li683-166.members.linode.com) (Changing host)
[03:39:18] *** Joins: meowray (~MaskRay@user/meowray)
[03:44:05] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[03:45:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[03:47:58] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:49:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:50:42] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[03:51:30] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:53:23] *** Joins: gco (~gco@2601:647:5a00:223:9d2b:6021:3fa4:bbf2)
[03:56:03] *** Quits: haniaF (~haniaF@79.191.103.145.ipv4.supernova.orange.pl) (Ping timeout: 260 seconds)
[03:56:16] *** Joins: haniaF (~haniaF@83.24.45.145.ipv4.supernova.orange.pl)
[03:56:20] *** Quits: machinehum (~machinehu@45.131.194.114) (Ping timeout: 260 seconds)
[03:56:35] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[03:57:21] *** Joins: machinehum (~machinehu@45.131.194.114)
[03:57:25] *** no-n is now known as pony
[04:04:20] <TheDcoder[m]> yeah I don't have any kind of mappings
[04:04:43] <TheDcoder[m]> thanks for the tip about objdump
[04:06:22] <TheDcoder[m]> something is modifying a variable but I can't pin-point it, is there a way to break when a specific address/variable is changed?
[04:06:35] <TheDcoder[m]> in GDB of course
[04:06:45] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) ()
[04:06:56] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[04:08:47] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 264 seconds)
[04:09:49] *** Joins: ntwk (~ntwk@user/ntwk)
[04:09:50] <fizzie> Yes, the common term is a "watchpoint" (by analogy with "breakpoint").
[04:10:26] <TheDcoder[m]> cool
[04:10:54] *** Joins: rgrinberg (~textual@190.113.111.74)
[04:12:45] <TheDcoder[m]> why does it say "hardware watchpoint"?
[04:12:52] <TheDcoder[m]> I used the watch command with -l
[04:13:47] <fizzie> It uses hardware watchpoints by default, and the message is just informative of that.
[04:13:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:13:51] <fizzie> (Because they're faster.)
[04:17:19] *** Joins: quartz (~quartz@user/quartz)
[04:19:00] <TheDcoder[m]> oh that's cool, just read a bit about them.
[04:22:43] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:23:19] *** Quits: krux02 (~krux02@p200300e817076e0049c4423bd7cf064e.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[04:24:31] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[04:27:07] *** Joins: serbest (~serbest@user/serbest)
[04:31:50] *** kish` is now known as killies
[04:33:05] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[04:33:17] *** Quits: TommyC (~TommyC@user/tommyc) (Quit: TTFN, Ta Ta For Now!)
[04:33:42] *** Joins: TommyC (~TommyC@user/tommyc)
[04:33:56] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[04:35:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:36:49] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[04:38:35] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Client Quit)
[04:42:19] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[04:46:08] <bparker> faster as in much, MUCH, much faster
[04:46:09] *** Joins: chenqisu1 (~03cia7d@183.217.200.143)
[04:46:16] <bparker> you do NOT want a software watchpoint
[04:46:37] <bparker> debugging will take hours or days
[04:46:43] <bparker> just to trigger it
[04:50:08] *** killies is now known as kish`
[04:50:55] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[04:52:23] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:52:41] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:890a:9e05:8d6c:227c) (Quit: Leaving)
[04:53:35] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[04:54:03] *** Joins: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it)
[04:54:03] *** Joins: vicfred (~vicfred@user/vicfred)
[04:54:13] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:56:53] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:57:23] *** Quits: The_Jag_ (~The_Jag@host-87-14-224-44.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[04:57:45] *** Joins: zys_ (~zys@116.22.160.205)
[05:00:38] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:01:59] *** Quits: zys_ (~zys@116.22.160.205) (Quit: Konversation terminated!)
[05:02:13] *** Joins: zys_ (~zys@116.22.160.205)
[05:03:04] <TheDcoder[m]> really? can't the debugger just trap all memory operations and check them? It might be "slow" but I can't imagine it adding a few seconds of overhead on average for a short-lived program.
[05:03:18] <TheDcoder[m]> *adding more than a few seconds
[05:03:35] *** Joins: Famine- (~Famine@user/famine)
[05:06:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:23:04] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[05:26:37] *** Joins: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com)
[05:26:38] *** Joins: fstd_ (~fstd@xdsl-81-173-152-177.nc.de)
[05:27:50] *** Quits: gco (~gco@2601:647:5a00:223:9d2b:6021:3fa4:bbf2) (Read error: Connection reset by peer)
[05:28:18] <fizzie> What GDB does for software watchpoints is basically single-step the program and check the value after each statement. It'll be some orders of magnitude slower. Whether that's "more than a few seconds" really depends on how nontrivial the program is.
[05:29:15] <fizzie> If it normally takes a millisecond to finish, then sure, it's probably reasonable.
[05:29:19] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[05:29:46] *** Joins: vaio (~gary@user/ghost)
[05:29:59] *** Quits: fstd (~fstd@xdsl-89-0-79-89.nc.de) (Ping timeout: 268 seconds)
[05:30:45] <fizzie> You can always do `set can-use-hw-watchpoints 0` if you're curious to try it out empirically.
[05:32:12] *** Joins: dutch (~DutchIngr@user/dutch)
[05:34:31] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[05:34:38] *** Quits: serbest (~serbest@user/serbest) (Ping timeout: 246 seconds)
[05:35:15] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[05:36:41] *** Joins: serbest (~serbest@user/serbest)
[05:36:41] *** Quits: serbest (~serbest@user/serbest) (Read error: Connection reset by peer)
[05:41:41] *** Joins: serbest (~serbest@user/serbest)
[05:41:41] *** Quits: serbest (~serbest@user/serbest) (Read error: Connection reset by peer)
[05:42:32] *** Quits: alch (~alch@151.82.201.31) (Ping timeout: 268 seconds)
[05:42:42] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[05:43:27] *** Joins: thing (~thing@user/thing)
[05:43:54] *** Joins: alch (~alch@151.82.223.171)
[05:44:02] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[05:44:51] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:45:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[05:45:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:51:28] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:52:17] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[05:55:05] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[05:59:22] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:59:37] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[05:59:39] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[05:59:56] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[06:00:19] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:00:31] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 245 seconds)
[06:00:49] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[06:01:13] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[06:03:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 264 seconds)
[06:03:17] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[06:06:09] *** AbleBacon_ is now known as AbleBacon
[06:06:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[06:10:52] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:11:35] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:14:04] *** Quits: AmR (~AmREiSa@156.199.244.83) (Quit: Konversation terminated!)
[06:19:29] *** Parts: kish` (~aqua@user/aqua) (Leaving)
[06:19:56] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:20:34] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 260 seconds)
[06:21:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:21:37] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[06:22:58] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Read error: Connection reset by peer)
[06:23:38] *** Joins: The_Jag_ (~The_Jag@host-79-32-14-38.retail.telecomitalia.it)
[06:24:29] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com)
[06:24:41] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 245 seconds)
[06:25:22] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:25:56] *** Quits: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[06:26:10] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[06:31:22] *** Joins: dmh (~dmh@loves.pizza)
[06:34:47] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:38:51] *** Quits: sze (~sze@216.250.96.102) (Ping timeout: 245 seconds)
[06:44:41] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 245 seconds)
[06:47:47] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[06:49:07] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:50:14] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 246 seconds)
[06:51:06] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (Read error: Connection reset by peer)
[06:53:47] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 264 seconds)
[06:55:27] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[06:56:59] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Client Quit)
[06:57:35] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 260 seconds)
[07:07:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[07:08:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:10:12] *** Joins: kish` (~aqua@user/aqua)
[07:12:14] *** Parts: kish` (~aqua@user/aqua) ()
[07:12:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:14:41] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[07:15:21] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[07:15:27] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[07:17:02] *** Quits: e36freak (~e36freak@user/e36freak) (Quit: arrrgh)
[07:20:17] *** Joins: e36freak (~e36freak@user/e36freak)
[07:29:12] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[07:31:03] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[07:32:19] *** Quits: burakcank (burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 252 seconds)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:38] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:39:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:39:38] *** Joins: wroathe (~wroathe@user/wroathe)
[07:43:47] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[07:45:19] *** Joins: Quillbert (~Quillbert@user/quillbert)
[07:46:09] *** Quits: Quillbert (~Quillbert@user/quillbert) (Client Quit)
[07:46:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:46:53] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[07:47:20] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Ping timeout: 260 seconds)
[07:52:09] <johnjay> in c is it an overflow to invert the most negative integer?
[07:52:22] <johnjay> and is there any way to detect that or generate an error?
[07:53:11] *** Joins: tbcr (~tbcr@107.13.189.161)
[07:58:07] *** Quits: rkta (~kt@62.113.246.111) (Remote host closed the connection)
[08:06:44] *** Quits: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com) (Remote host closed the connection)
[08:13:06] <Sos> that depends on the implementation
[08:13:18] <Sos> C doesn't enforce 2's complement
[08:13:31] <Sos> but in 2's complement the int should overflow when doing that, yes
[08:17:47] <caze> johnjay: What operator are you asking about?
[08:22:59] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.119)
[08:24:21] <johnjay> -
[08:24:41] <johnjay> Sos: so if you do x = -x and x is the most negative integer it depends on implementation you think?
[08:25:10] <floatcomplex> it is defined to depend on the implementation
[08:25:23] <floatcomplex> i think you can even get a SIGFPE from that but i'm not sure under waht conditions you can count on getting such
[08:25:31] <caze> Ok, I thought he was talking about ~.
[08:26:06] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:26:23] <Sos> i dobn't think any logical operators can cause numeric exceptions
[08:26:54] <caze> logical
[08:27:39] <johnjay> that would make sense
[08:27:56] <johnjay> the reasoning would be sort of related to 2s complement
[08:28:14] <johnjay> the x = -x is really overflowing if you think of it as making the number positive then adding 1
[08:29:01] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Excess Flood)
[08:29:02] <caze> -x might be okay, but --x might overflow.
[08:29:28] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[08:32:29] <caze> johnjay: Have you ever looked in the standard at the minimum values prescribed for integer ranges?
[08:33:25] <johnjay> no. i assumed it was implementation defined
[08:33:29] <Sos> i guess it's impl specigfic
[08:33:50] <caze> No, the minimum ranges must meet a bar.
[08:33:52] <Sos> but on x86 with 2s complement, it should do what johnjay said
[08:34:06] <johnjay> what do you mean a bar
[08:34:09] <Sos> flip the bit, increase the value, set overflow flag
[08:34:38] <caze> Standard
[08:34:45] <floatcomplex> two's complement walk into a bar
[08:35:01] <Sos> should set the carry flag too, shouldn't it?
[08:35:20] <Sos> (is there a carry flag on modern cpus still?)
[08:35:58] <floatcomplex> yes, but the operations that both produce and consume that flag are for your compiler to worry about and not you
[08:36:08] <caze> johnjay: There is a range that must be met or exceeded. For int, it is -32767 to +32767
[08:36:54] <caze> johnjay: But two's complement can do -32768 to +32767
[08:36:56] <Sos> wait, is it not down to -32768?
[08:37:00] <johnjay> are you saying it's illegal for a 16-bit signed thing to be -32768?
[08:37:11] <caze> johnjay: No.
[08:37:22] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:37:24] <Sos> but i like the conundrum
[08:37:33] <floatcomplex> johnjay: INT_MIN is defined to be -32767 or some more negative number
[08:38:00] <floatcomplex> sometimes that will be -32768
[08:38:04] <johnjay> what would that mean. like it's an error to simply be -32768?
[08:38:17] <floatcomplex> whatever INT_MIN is, it's not illegal to set the value of a signed int to it
[08:38:19] <caze> johnjay: The same error that it would be to be -239843289598348953453
[08:38:40] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Ping timeout: 260 seconds)
[08:39:09] <floatcomplex> johnjay: it's logically a mistake, and potentially a catastropic error to assume, blindly, that -32768 is within the range that can be represented by a signed integer. BUT
[08:39:15] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:39:26] <floatcomplex> on a given platform, you can check AT COMPILE time whether INT_MIN is -32768 or some other value
[08:39:39] <floatcomplex> and then you'll know, at compile time, what the limits are
[08:39:43] *** Joins: Raguile (~Raguile@user/raguile)
[08:39:49] <caze> johnjay: This is the smallest range that is allowed.
[08:40:03] <johnjay> how does that answer my original question though
[08:40:07] <johnjay> i wanted to know how you detect it
[08:40:16] <johnjay> if it's not required to flag an error then you can't
[08:40:17] <Sos> oh sweet, x86 has a 'neg' op
[08:40:17] <floatcomplex> johnjay: you sanitize for it at a compile time
[08:40:23] <floatcomplex> johnjay: and before the operation, at runtime
[08:40:40] <caze> johnjay: So for instance, if someone made a C compiler where the values of int could be from -256 to 255, that would be in violation.
[08:40:40] <johnjay> that sounds like another way of saying what i said
[08:40:41] <floatcomplex> johnjay: you cannot count on any method to detect it after it has happened but you CAN assure that it will not happen
[08:41:35] *** Quits: pony (~ed@smol/hors) (Ping timeout: 260 seconds)
[08:41:37] <floatcomplex> any method you write to detect whether it HAS happened probably relies on undefined behaviour and the compiler would be well within its rights to say "well that simply cannot happen" and ignore those lines of code
[08:41:37] *** Joins: eeee (~eeee@user/eeee)
[08:41:53] *** Quits: Sos (~Sos@37.30.20.146.nat.umts.dynamic.t-mobile.pl) (Quit: Leaving)
[08:41:53] <caze> johnjay: Someone could make a compiler with a bigger range though, like -2147483648 to 2147483647
[08:41:54] <johnjay> ok. so i'm basically sol there
[08:41:55] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[08:41:59] *** Joins: larry87 (~quassel@98.40.245.193)
[08:41:59] <floatcomplex> johnjay: no
[08:42:10] <floatcomplex> johnjay: you sanitize the inputs to the operation, before you commit the operation
[08:42:30] <johnjay> you can't realistically check every time that an int is < INT_MAX and > INT_MIN or whatever
[08:42:35] <floatcomplex> this isn't a situation unique to c integer arithmetic, or c
[08:42:47] <floatcomplex> if an attacker controls a value that you are going to operate on, you don't fucking trust it
[08:43:03] <johnjay> so it seems like this should be a situation where an error of some kind is set or signaled
[08:43:05] <floatcomplex> if your math is well factored, you have to write few such checks
[08:43:06] <floatcomplex> but not zero
[08:43:18] *** Joins: pony (~ed@smol/hors)
[08:43:22] <floatcomplex> johnjay: computers are not magical
[08:43:40] <johnjay> unfortunately not. then maybe they wouldn't malfunction so much
[08:43:53] <floatcomplex> johnjay: you know how you have to check whether a value is zero before you divide by it?
[08:43:56] <floatcomplex> this is the same as that
[08:44:06] <floatcomplex> the check could be quite a ways upstream
[08:44:09] <floatcomplex> or immediately prior
[08:44:10] *** Quits: eeee (~eeee@user/eeee) (Client Quit)
[08:44:24] <johnjay> division is a lot less common than negation
[08:44:30] <johnjay> or additionf or that matter
[08:44:31] <caze> johnjay: Why would you have to check everytime?
[08:44:40] <floatcomplex> it might be possible to do a simple check way upstream that ensures that a whole lot of math to follow is safe to do without any further checks
[08:44:46] <johnjay> because x+y or -x could theoretically overflow at any point
[08:45:08] <floatcomplex> yes
[08:45:10] <johnjay> so to prevent it that way you'd have to check before every addition, subtraction, or negation
[08:45:13] <floatcomplex> no
[08:45:17] <floatcomplex> you check when you have to
[08:45:21] <floatcomplex> not before every operation
[08:45:33] <caze> johnjay: What operation are you trying to do?
[08:45:35] <floatcomplex> you do the fucking math and find out what the limits are, and where they could potentially overflow
[08:45:44] <floatcomplex> and if they can't, then you don't need to check it
[08:45:50] <johnjay> -x
[08:45:53] <johnjay> x = -x
[08:46:01] <johnjay> i don't think that's such a crazy thing to want to do
[08:46:29] <caze> johnjay: WHere does the value of x come from?
[08:46:32] <floatcomplex> johnjay: so just check whether -INT_MAX is > x and if it is, don't do the negation
[08:46:58] <johnjay> i feel like what you're really telling me here is always stick to unsigned as much as feasibly possible
[08:47:15] <floatcomplex> if it's valid to do so, yes, definitely
[08:47:17] <caze> johnjay: If for instance, int x = 1; x = -x; No, you do not have to check.
[08:47:32] <johnjay> like. you *could* eat this sandwhich. but first you must thouroughly determine if the bread was ever exposed at any point to any bacteria
[08:47:40] <johnjay> or you could eat this apple which you don't have to do that
[08:47:47] <johnjay> gee i wonder what i will do
[08:48:11] <floatcomplex> johnjay: unsigned is very useful when its wraparound properties are desirable. but with an unsigned int neither you nor your compiler are allowed to assume that they are monotonic
[08:48:47] <floatcomplex> whereas the signed ints are defined to be monotonic because they're not defined to do anythign in particular beyond the region that may or may not exist where they may or may not still be monotonic
[08:49:03] <floatcomplex> both have their uses
[08:49:16] <johnjay> i mean. you can just say c has a lot of illogical edge cases. it's fine. i'm not a c zealot lol
[08:49:27] <floatcomplex> this is not an illogical edge case
[08:49:31] <johnjay> it's rare that x would be -INT_MIN or whatever 
[08:50:01] <floatcomplex> if i'm going to loop from -7 to +23 i'm going to use a signed integer and let the compiler optimize the hell out of it
[08:50:18] <caze> johnjay: What is illogical about it?
[08:50:42] <floatcomplex> if i were forced to use an unsigned integer for that, just because some other jackass from java land couldn't be trusted with the semantics of signed and unsigned integers, i'd probably just write assembly
[08:50:50] <johnjay> what is illogical about doing x = -x, then finding x is still negative when it was negative before
[08:51:00] <floatcomplex> and then i would invent a complicated system of macros to make assembly portable-ish and we'd be back where we started
[08:51:46] <floatcomplex> johnjay: if you are going to check whether the result of doing an operation has an unexpected sign why can't you check before you do the operation
[08:51:52] <floatcomplex> it's the same amount of work
[08:52:04] <johnjay> i mean. formulas exist
[08:52:25] <johnjay> like x = (y+z)^(j+k)/(-exp(-x^2)) or something
[08:52:43] <floatcomplex> that requires floating point, and you wouldn't have any of these issues
[08:52:53] <floatcomplex> (you'd have a whole bunch of other ones, not unique to C at all)
[08:53:03] <johnjay> sure. but what i mean is you could have an expression with a lot of - signs
[08:53:26] <caze> johnjay: How would you handle it?
[08:53:29] <floatcomplex> pretending that computers can magically reason about what should happen in a math expression, as well as humans can, without slowdown, is equivalent to assuming computers are magical
[08:53:43] <johnjay> caze: do the operation then check if some error was signaled. that's the most intuitive thing to me
[08:53:50] <floatcomplex> then stick to java
[08:54:08] <floatcomplex> your mental model of how computers work is more in line with how java works
[08:54:21] <caze> johnjay: What if the architecture doesn't have a way to signal?
[08:54:22] <floatcomplex> it's fiction, but there are programming languages designed around preserving that fiction
[08:54:44] <johnjay> i don't know how you get to the conclusion that it's "fiction" to expect x = -x to invert the sign of x
[08:54:55] <floatcomplex> johnjay: your computer has bits in it
[08:54:59] <johnjay> but sure. go for it. write the best c code you can write
[08:55:05] <floatcomplex> these bits can be arranged in a way to represent integers
[08:55:08] <johnjay> i believe in you
[08:55:15] <floatcomplex> the arrangement of bits that represent signed integers are not symmetric about zero
[08:55:18] <floatcomplex> get over it
[08:55:39] *** Joins: linexpert (~linexpert@134.209.114.206)
[08:57:36] <caze> johnjay: The point I was trying to make earlier, about INT_MIN being -32767 to 32767, and not -32768. Have you figured out why yet?
[08:58:01] *** Joins: no-n (~ed@smol/hors)
[08:58:26] *** Quits: pony (~ed@smol/hors) (Ping timeout: 245 seconds)
[08:58:46] <caze> johnjay: It's because the standard is making an allowance for sign and magnitude representation.
[08:59:15] *** no-n is now known as pony
[09:00:05] <caze> johnjay: A set of bits can always represent an even number of values. If one of those values is taken up by 0, then you have an odd number of values to be split up between negative values and negative values.
[09:00:49] <caze> johnjay: With sign and magnitude, Two values are taken up for 0, +0, and -0. So you're left with an even number of values that you can divide evenly between positive and negative.
[09:05:51] <Feuermagier> caze, that's how floats work. not ints. We use two's-complement for ints
[09:06:13] <floatcomplex> Feuermagier: only after c23
[09:06:16] <floatcomplex> not yet
[09:06:37] <floatcomplex> until the next revision of the c standard, there are still three permissible representations of signed integers in c
[09:06:57] <Feuermagier> oh god. why is this a thing?
[09:07:02] <dmh> haha
[09:07:09] <floatcomplex> intX_t are already defined to be two's complement, if they are defined 
[09:07:37] <floatcomplex> Feuermagier: because only since the last publish C standard have the people with coomercially significant one's complement hardware fucked off
[09:07:40] <Feuermagier> floatcomplex, I assume no sane compiler actually does that though... *right*?
[09:07:47] <floatcomplex> it's nothing to do with compilers
[09:08:29] <Feuermagier> floatcomplex, C standard ._.
[09:09:14] <floatcomplex> hey, if you would rather there be no standard to not follow, go write rust, and have fun rewriting all of your code every six weeks
[09:09:56] <floatcomplex> or if you would rather have well defined integer overflow exceptions to ignore, go write java. that seems like a popular choice
[09:11:53] <Feuermagier> floatcomplex, that is some very solid advice I do continuously follow :)
[09:15:48] <Feuermagier> I even think that crashing your program on any occasion where an overflow is not planned is a great thing to do (although java doesn't do that at iirc and you need to enable it in Rust for the production builds)
[09:17:04] <floatcomplex> it astonishes me that the designer(s) of java think that programmers can be trusted with crypto or anything else important when they can't be rusted with the semantics of unsigned integers
[09:18:06] *** Quits: linexpert (~linexpert@134.209.114.206) (Quit: Client closed)
[09:18:30] <floatcomplex> Feuermagier: the problem with defining, at the language level, that the program crashes on integer overflow, is you have to ensure that it actually does crash on integer overflow, which means slowing down every single integer operation
[09:18:41] <floatcomplex> Feuermagier: some hardware might do it for you for free, but that's not up to the language
[09:18:55] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 260 seconds)
[09:19:18] <floatcomplex> crashing on integer overflow is an entirely reasonable thing to have happen. but enforcing that it does happen is not free
[09:19:52] <floatcomplex> conversely, the tools the C programmer has at their disposal for vetting code against this sort of error are leaps and bounds ahead of where they were ten years ago
[09:20:28] <Feuermagier> floatcomplex, yeah. it's not free. On most hardware the cost is beyond reasonable though.
[09:20:37] <floatcomplex> so you can develop and test with all those slow checks in place, getting very informative crashes when they do happen (and paying the resulting speed penalty) and then turn them off in release
[09:20:58] <Feuermagier> floatcomplex, that's the current default in Rust
[09:21:19] *** Joins: missogra (~missogra@dynamic-077-001-202-100.77.1.pool.telefonica.de)
[09:21:29] <floatcomplex> but the language should not simply decree that arithmetic will be identical, and have identical cost, on hardware A and hardware B
[09:21:38] <floatcomplex> it can only do so by compromising performance on one or both platforms
[09:21:51] <Feuermagier> I don't think any language attempts that
[09:22:01] <floatcomplex> that is exactly what java does
[09:22:27] <Feuermagier> oh, identical in execution. yeah. I thought you meant identical in cost
[09:23:49] <floatcomplex> ultimately do you want the language to lie to you that two things are the same when they are in fact different, or do you want it to get the fuck out of your way, tell you when you're making assumptions that might not be true, and encourage you to add checks where YOU know they are cost free to do so, but the compiler is not magical enough to do on its own
[09:24:44] <Feuermagier> I believe that it aligns with the "general package" that java attempts to provide
[09:25:29] <Feuermagier> especially if performance is only of low relevance (you don't use java anyways otherwise [hopefully])
[09:25:46] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:26:38] <Feuermagier> but that's a general design philosophy
[09:27:00] <Feuermagier> I'm mainly here because I do binary exploitation
[09:27:26] <Feuermagier> and avoid C if in any way possible
[09:28:18] <Feuermagier> (binary exploitation would be no fun if all people did that though)
[09:30:45] <floatcomplex> again...if there were no C, a lot more people would just write assembly, and come up with a shitty system of portable-ish macros to make it easier, and call it C
[09:31:35] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:32:00] <dmh> isnt c assembler macros with funny stdlib? :) 
[09:32:01] <Feuermagier> No doubt that there is a use for C
[09:32:40] <floatcomplex> i'm writing c right now
[09:32:44] <floatcomplex> does that make you uncomfortable
[09:32:59] <katnis> c
[09:33:16] <Feuermagier> floatcomplex, oh, definitely
[09:33:22] <Feuermagier> katnis, spooky
[09:33:42] * critr laffs
[09:34:16] <Feuermagier> I do hope Rust will eventually cover the few cases you need C for at the moment though
[09:34:55] <Feuermagier> maybe once they decide on a calling convention to use
[09:34:58] <floatcomplex> Feuermagier: the far more likely scenario is that in 20 years C compilers will have a borrow checker and people will remember rust the way they remember ada and small talk now
[09:35:26] *** Quits: zys_ (~zys@116.22.160.205) (Ping timeout: 246 seconds)
[09:35:33] <floatcomplex> languages that had great ideas and informed the future of computing but were ultimately too impractical for everyday use
[09:35:42] <critr> ^^
[09:36:15] <Feuermagier> floatcomplex, nah, the problem is C and C++ don't aggressively *enforce* these things. It'll be interesting to see if we get Rust in the Linux Kernel one day
[09:36:35] <floatcomplex> "...but why male models"
[09:36:43] <floatcomplex> sigh
[09:40:35] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[09:40:41] <Feuermagier> floatcomplex, I mean there is always Haskell
[09:42:59] *** Quits: alch (~alch@151.82.223.171) (Ping timeout: 264 seconds)
[09:43:32] <sham1> Or the MLs
[09:43:33] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.119) (Read error: Connection reset by peer)
[09:43:50] <hors> Or LISP
[09:44:16] *** Joins: alch (~alch@151.82.198.161)
[09:44:58] <sham1> Anyway, the places where C is valuable is where you want the simple language. Comparing C and Rust has always been a bit weird to me because they seem to focus on entirely different matters entirely
[09:45:33] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:b5ea:9d67:614d:69e) (Remote host closed the connection)
[09:46:04] <Feuermagier> sham1, good point. It takes a lot of experience to get something "done quickly" in Rust. Something as simple as a linked list will take you days to lean (and probably multiple attempts)
[09:46:06] <dmh> agree
[09:46:24] <dmh> i cant even do rust on the targets i write for
[09:46:43] <dmh> zig, nim etc too as much fun as it is to romanicize
[09:46:58] <Feuermagier> dmh, that sadly is an entirely unrelated, but very valid issue
[09:47:08] <dmh> indeed,n ot to muddy the water. also i like c
[09:47:13] <Feuermagier> in C anyone can write a linked list in two minutes
[09:47:27] <dmh> in constrained environments (esp eliminating string ops) it becomes much more possible and enjoyable to write safe code
[09:48:02] <floatcomplex> the value proposition of rust is that you cannot trust the developer to do memory management properly. it stands to reason that it would be 100% irresponsible to use rust to implement any sort of crypto, because if you can't trust the developer to think through whether they are leaking plaintext via a mechanism the compiler can check for them, you have no business trusting them not to leak secrets via any 
[09:48:08] <floatcomplex> number of other methods that don't have to do with memory mgmt
[09:48:47] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[09:49:14] <dmh> i dont disagree with the approach
[09:49:15] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[09:49:17] <sham1> We've already had memory safety for decades. It's called tracing garbage collection and for most use cases that's fine for the vast majority of use cases
[09:49:36] <sham1> Oh and bounds checking
[09:49:39] <floatcomplex> and if they have to bend over backwards to implement a linked list because of your weird ass memory model then they're going to make other mistakes because the code is overall more complicated
[09:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[09:50:09] <dmh> but when writing code for 4k ram mass market run micros in cents-per-toy with no stdlib etc it becomes more feasible to footgun yourself in a way no one will ever catch 
[09:50:16] <dmh> jk XD
[09:50:21] <Feuermagier> floatcomplex, it is actually surprisingly hard to make mistakes in Rust. Not impossible ofc - but most times your code will simply not compile.
[09:50:33] <floatcomplex> dmh: 4k sram microcontrollers have pretty good stdlib's
[09:50:43] <dmh> yea i am rounding up for convo sake
[09:51:02] <floatcomplex> you need to get down to like 32 bytes of sram before you can't count on having a libc
[09:51:05] <sham1> That comes more down to the type system than the borrow checker, which does help some, granted
[09:51:07] <dmh> vendors have caught up too! c99, fp parsing etch hehe
[09:51:19] <sham1> Wait
[09:51:21] <sham1> 32 bytes
[09:51:22] <Feuermagier> on my ESP I use C/C++, too - simply because that's where the libraries I need are
[09:51:28] <dmh> yea im trying to think how to better deliniate it
[09:51:46] <dmh> ive done small 4 bitters even, and it had the vendor baked sorta stdlib etc
[09:52:24] <dmh> of course im not doing %f printfs there, so its not easy to say 
[09:52:29] <dmh> but you get it
[09:53:07] <dmh> and i dont disagree
[09:53:19] <dmh> if i could get ARC or gen GC on someting that small sure why not
[09:54:01] <floatcomplex> dmh: for that to be useful, you'd have to completely forego compatibility with existing c code
[09:54:13] <dmh> whats the fun in that
[09:54:18] <dmh> greenfield everything
[09:54:36] <dmh> iot startup! lets go
[09:54:44] <floatcomplex> objective-c tried to have it both ways with ARC and it was worse than non-ARC'd objc, so they started over with swift, which is simpler to reason about in part BECAUSE there are no weird interactions between ARC'd code and C code
[09:54:54] <dmh> very good point
[09:54:58] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 265 seconds)
[09:55:19] <dmh> getting the creator of factor on board paid off
[09:55:45] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[09:55:50] <floatcomplex> similary, go has so many rules about what you can and cannot pass between go and c, that it's not terribly useful to have them interact at all
[09:55:55] <floatcomplex> becase of go's gc
[09:56:09] <dmh> absolutely
[09:56:14] <sham1> Well the biggest use is to interact with stuff like system libraries
[09:56:21] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[09:56:50] <floatcomplex> sham1: right, but it's basically impossible to, for example, pass a c callback and its context through go code, or vice versa
[09:56:58] <floatcomplex> which is a common thing to want to do in multi-language systems
[09:57:08] <sham1> That's true
[09:57:34] <sham1> They could very easily have some kind of a special thing where you could mark pointers are foreign and then have the GC not touch them
[09:57:46] <floatcomplex> yeah objc did a little of that
[09:57:48] <dmh> .NET style
[09:58:05] <dmh> i forget what its called but you can pin .net managed to leave alone or outright mark
[09:58:07] <floatcomplex> it was still damn hard to sit in front of a screen full of objc code and figure out what was subject to ARC rules and what was not
[09:58:07] *** Joins: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1)
[09:58:23] <dmh> i bet, thats so all over the place
[09:58:32] <dmh> anyway not to completely derail but
[09:58:54] <sham1> Could even be a special builtin type like "CData" or something. The ways of solving this problem are pretty vast
[09:59:03] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[09:59:05] <dmh> i think manual memory management will still be the right answer for a little bit longer
[09:59:12] <sham1> For some things
[09:59:33] <dmh> yea very narrow use case
[09:59:37] <dmh> constrained envs
[09:59:59] <dmh> now excuse me while i write a desktop program that overflows after calling libcurl
[10:00:35] *** Quits: missogra (~missogra@dynamic-077-001-202-100.77.1.pool.telefonica.de) (Quit: Leaving)
[10:04:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[10:07:00] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[10:11:45] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:12:01] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:19:13] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[10:20:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:20:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:20:51] *** Joins: wroathe (~wroathe@user/wroathe)
[10:25:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[10:29:46] *** Joins: Ox151 (~user@user/ox151)
[10:31:45] <Ox151> hello, i am using read to read a file into a variable char[1024]. i have it declared as read(fd, buff, 1024) my question is, why does read only return 1 byte? I thought it would read upto the count of 1024, but it alwasy returns 1 which makes it hard to know how many bytes were written.
[10:32:00] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374)
[10:32:57] <dmh> how big is the thing you're reading? check the docs for the return value of a read as well
[10:33:00] <Ox151> i guess is should preference, it is return 1 when it is writing more than 1 byte through testing.
[10:33:18] <dmh> writing or reading?
[10:33:39] <bparker> >read() attempts to read *up to* count bytes from file descriptor fd into the buffer starting at buf
[10:34:08] <Ox151> sorry reading
[10:34:23] <Ox151> reading into the buffer*
[10:34:23] <bparker> if the file only has one byte left from its current position, that's all you'll get
[10:34:48] <Ox151> its a jpeg file so few KB
[10:35:11] <bparker> did to seek to the beginning before reading?
[10:35:15] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:35:47] <Ox151> no, just opened the file. it works fine if i read 1 char at a time 
[10:36:01] <Ox151> but i thought i could batch the bytes into an array buffer
[10:36:40] <trenka> Ox151: show the code
[10:38:02] <Ox151> this is what I am trying to do http://paste.debian.net/1217356/
[10:38:41] <Ox151> reading 1 byte at a time works http://paste.debian.net/1217357/
[10:38:54] <dave0> Ox151: aha!
[10:39:04] <dave0> Ox151: c's precedence rules have got you
[10:39:16] <Ox151> XD
[10:39:34] <dave0> Ox151: r = read(..) > 0    is    r = (read(...) > 0);    which is probably true, which is value 1
[10:39:57] <dave0> Ox151: use more brackets or the comma operator..    while(r = read(fd, buff, 1024), r > 0) {
[10:40:06] <bparker> you said jpeg
[10:40:52] <dave0> Ox151: or with brackets (comma is better :-)    while((r = read(fd, buff, 1024)) > 0) {
[10:41:15] <bparker> never seen the comma method
[10:41:21] <dave0> its bette
[10:41:22] <dave0> r
[10:41:37] <dmh> yea thats neat
[10:42:36] <Ox151> awesome thanks for helping catch that. 
[10:44:53] <bparker> dave0: I still don't see why even that didn't work by accident
[10:45:36] <bparker> but they never said what "didn't work" meant
[10:47:00] <bparker> oh wait, they just said it always returns 1
[10:47:11] <bparker> ok so yea, it still read the right amount of bytes, they just didn't know
[10:48:36] <Ox151> it would loop 25 times returning 1. the file size is 24770. 25 * 1024 = 25600
[10:48:59] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[10:49:20] <dave0> yup, what it actually ended up being was 25 true and 1 false
[10:49:22] <Ox151> so it was reading the 1024 bits but return 1 from however the expression was resolving. 
[10:52:35] <trenka> bparker: it writes r
[11:01:03] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[11:02:29] *** Quits: pstef (~pstef@staticline16996.toya.net.pl) (Changing host)
[11:02:29] *** Joins: pstef (~pstef@user/pstef)
[11:05:26] *** Joins: aradesh (~aradesh@user/aradesh)
[11:07:39] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:11:46] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[11:13:42] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[11:23:17] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[11:24:23] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 264 seconds)
[11:26:04] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[11:27:59] *** Joins: eeee (~eeee@user/eeee)
[11:29:39] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 260 seconds)
[11:36:00] *** Quits: chenqisu1 (~03cia7d@183.217.200.143) (Quit: Leaving)
[11:37:17] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[11:42:17] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[11:44:29] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[11:45:26] *** Joins: zys_ (~zys@116.22.160.119)
[11:46:44] *** Quits: eeee (~eeee@user/eeee) (Quit: WeeChat 3.3)
[11:47:09] *** Joins: mrig (~AdiIRC@user/mrig)
[11:49:14] *** Joins: rkta (~kt@62.113.246.111)
[11:56:32] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:56:41] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:59:56] *** Quits: zys_ (~zys@116.22.160.119) (Quit: Konversation terminated!)
[11:59:59] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[12:00:32] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[12:01:45] *** Joins: Wulf (~Wulf@user/wulf)
[12:02:25] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[12:03:25] *** Quits: jtmusky (~jtmusky@104-1-122-97.lightspeed.okcbok.sbcglobal.net) (Ping timeout: 268 seconds)
[12:05:11] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[12:06:44] *** Joins: repmovsb[m] (~repmovsb@2001:470:69fc:105::1:274e)
[12:07:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:09:19] *** Joins: kenobi (~kenobi@49.205.228.246)
[12:09:59] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 264 seconds)
[12:10:15] *** Quits: kenobi (~kenobi@49.205.228.246) (Client Quit)
[12:10:41] *** Joins: earnestly (~earnest@user/earnestly)
[12:11:08] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:13:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[12:13:55] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:13:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[12:14:45] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com)
[12:16:20] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[12:20:37] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 252 seconds)
[12:20:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:24:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:28:00] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[12:29:51] *** Quits: nitro__ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Ping timeout: 260 seconds)
[12:30:16] *** Joins: rgrinberg (~textual@190.113.111.74)
[12:34:31] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Read error: Connection reset by peer)
[12:40:18] *** Joins: meator (~meator@user/meator)
[12:43:12] *** Joins: cadmio (~cadmio@151.25.149.251)
[12:43:16] <cadmio> Hello
[12:43:31] <cadmio> I need to pass https://paste.gnome.org/pasgfyq34#line-44 a char either 'b' or 'i' depending on the user's input Ctrl-b/i I'm not sure about the GVariant type
[12:45:37] *** Quits: Optimus (~risto@87.227.237.59) (Quit: Konversation terminated!)
[12:47:59] <omegatron> I don't see a C-related question ..  if you use some library ( glib or gtk in this case !?), consider to read its manual for detailed information ..
[12:49:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:50:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:51:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[12:52:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:53:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[12:54:59] *** Quits: rahl (~rahl@102.114.228.59) (Ping timeout: 264 seconds)
[12:56:17] *** Joins: rahl (~rahl@102.114.115.142)
[12:59:47] *** Quits: pony (~ed@smol/hors) (Ping timeout: 264 seconds)
[13:01:12] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:01:35] *** Joins: pony (~ed@smol/hors)
[13:07:32] *** Joins: V-T60 (~v@91.203.24.166)
[13:12:23] *** Quits: cadmio (~cadmio@151.25.149.251) (Ping timeout: 264 seconds)
[13:13:02] *** Joins: cadmio (~cadmio@151.25.149.251)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:35:24] *** Joins: henistein (~henistein@2001:8a0:fd33:b801:7a1b:97ba:819b:816c)
[13:41:46] *** Quits: alch (~alch@151.82.198.161) (Ping timeout: 245 seconds)
[13:43:36] *** Joins: alch (~alch@ca-18-206-14.service.infuturo.it)
[13:44:16] *** Parts: Ionut (ionut@user/ionut) ()
[13:46:45] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:53:26] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[13:53:27] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:56:21] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:58:18] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:00:39] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:05:27] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:07:16] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[14:10:53] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:11:35] <Wulf> cadmio: function says it wants a pointer to char, not a char.
[14:12:53] <cadmio> Wulf: I solved like this https://github.com/gioretikto/litos/blob/main/engine.c but I had to include a member in the structure
[14:13:22] <cadmio> I'd like a way to pass it like this: `enum { APPLY_BOLD, APPLY_ITALIC };` and then add a parameter to `applyTags(struct litos*, int what_tag)`
[14:14:13] <Wulf> cadmio: gpointer is void*, so don't cast it. (line 46)
[14:18:28] <cadmio> Do you know whether there's a way to pass what_tag to void action_apply_bold/italic ?
[14:18:38] <Wulf> cadmio: no idea
[14:19:15] *** Joins: random-nick (~random-ni@87.116.179.142)
[14:19:17] <Wulf> cadmio: your code is way too long to have a look at it.
[14:19:24] <Wulf> ,testcase cadmio
[14:19:24] <candide> cadmio: A testcase is a minimal, compilable, runnable example exhibiting your symptoms. "Minimal" means just the bare essentials required to illustrate your question. "Compilable and runnable" means that there is enough code to compile, link, and execute it on our machines, and therefore use our debuggers. Please paste a testcase at http://ideone.com or http://codepad.org to help us assist you.
[14:19:48] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[14:30:43] <cadmio> well maybe it's good like that too. In case try it out and tell me what could I improve
[14:35:09] *** Joins: Atque (~Atque@user/atque)
[14:37:16] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[14:40:59] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[14:41:55] *** Joins: iomari891 (~iomari891@129.205.113.1)
[14:46:23] *** Joins: plastico (~plastico@neomutt/plastico)
[14:47:49] *** Joins: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:dd79:459d:8214:30ba)
[14:50:45] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 268 seconds)
[14:52:00] *** Joins: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:55ef:5d0:c1e8:90b)
[14:54:22] *** Joins: retr0man (~retr0man@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[14:54:25] *** Parts: retr0man (~retr0man@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) ()
[14:55:17] *** Quits: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:dd79:459d:8214:30ba) (Ping timeout: 264 seconds)
[14:56:49] *** Quits: iomari891 (~iomari891@129.205.113.1) (Ping timeout: 252 seconds)
[15:00:59] *** Quits: critr (~critr@50-1-165-103.dsl.dynamic.fusionbroadband.com) (Quit: .)
[15:01:40] *** Joins: seninha (~seninha@user/seninha)
[15:02:34] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:03:17] *** Joins: Rounin (~david@84.212.130.215)
[15:06:52] *** Joins: st327 (~st327@user/st327)
[15:09:02] *** Joins: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:30bc:a359:39b5:99ae)
[15:11:43] *** Quits: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:55ef:5d0:c1e8:90b) (Ping timeout: 268 seconds)
[15:12:43] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[15:12:59] *** Joins: novns (~novns@user/novns)
[15:14:12] *** Joins: meator (~meator@user/meator)
[15:15:14] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:15:23] *** Joins: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:d418:453f:8e01:9edf)
[15:18:00] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:18:05] *** Quits: zer0bitz_ (~zer0bitz@2a0b:dbc1:2:81c1:30bc:a359:39b5:99ae) (Ping timeout: 246 seconds)
[15:21:04] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[15:21:32] <De4nWhit3> Hello everyone. I hope you're all having an codetastic day! Hello floatcomplex! 
[15:22:38] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 246 seconds)
[15:23:14] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[15:23:40] *** Quits: cadmio (~cadmio@151.25.149.251) (Quit: WeeChat 3.0)
[15:24:22] *** Joins: serbest (~serbest@user/serbest)
[15:25:49] <nomagno> I am! Well kinda, I just realized my entire codebase does strcpy(src, dest) instead of strcpy(dest, src). That's kinda depressing
[15:26:50] *** Quits: st327 (~st327@user/st327) (Quit: Leaving)
[15:27:26] <veltas> #define strcpy mystrcpy
[15:28:01] <omegatron> please no ... fix your source code the right way
[15:28:20] <veltas> #define true false
[15:29:01] <nomagno> veltas: Bad substitution --> unknown keyword 'false'
[15:29:32] <veltas> You're a bad substitution
[15:30:02] <nomagno> C does boolean logic the right way, with 0 and 1
[15:30:23] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[15:30:23] <nomagno> (Admittedly, stdbool.h is nice)
[15:30:40] *** Joins: useretail (~useretail@185.132.19.151)
[15:30:52] <veltas> Not in my opinion lol
[15:31:14] <veltas> At least it will stop everyone defining PREFIX_TRUE and PREFIX_FALSE in their sad projects
[15:32:06] <omegatron> how will it stop them?
[15:32:30] <veltas> Well they can just use stdbool.h, so it won't stop them but they are less likely to feel the need
[15:32:35] <nomagno> Where can I find a description of C99 standard library headers/functions
[15:32:38] <omegatron> I could still do  #define _____TRUE  (1)
[15:32:41] *** Joins: Inline (~Inline@aftr-37-201-241-28.unity-media.net)
[15:33:14] <veltas> Thanks omegatron that really cleared it up for me
[15:33:35] <omegatron> yeah, i should have used '____________________________________TRUE'  to make it clear  =D
[15:33:38] <veltas> Also -1 would be better for true results, because then you could use ~, &, | as !, &&, ||.
[15:34:00] <DPA> _Bool is almost saturating, I think. Almost.
[15:34:03] <veltas> And ^ instead of !=
[15:34:19] <nomagno> Ah yes, because negative numbers are not part of a convention related to error codes, at all
[15:34:47] <veltas> If you're using a boolean then no...
[15:34:51] <DPA> (_Bool)( ((_Bool)true) + UINT_MAX )
[15:35:04] <DPA> ,cc (_Bool)( ((_Bool)true) + UINT_MAX )
[15:35:10] <candide> DPA: Success (no output).
[15:35:11] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:35:32] <DPA> ,cc printf("%d\n", (_Bool)( ((_Bool)true) + UINT_MAX ));
[15:35:35] <candide> DPA: 0
[15:35:38] <nomagno> Are there any standard-defined properties of the FILE data type, or is it all implementation defined?
[15:35:51] <DPA> ,cc printf("%d\n", (_Bool)( ((_Bool)true) + 12345 ));
[15:35:54] <candide> DPA: 1
[15:36:01] <DPA> Almost saturating.
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:06] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Quit: Ping timeout (120 seconds))
[15:36:08] <Wulf> nomagno: you mean like FILE *foo; foo->somethinghere? No, there's not.
[15:36:22] <omegatron> which standard anyway? there are so many ..
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:55] <nomagno> Wulf: guessed so. I guess you COULD try poking around in your code to figure out some properties of the implementation's FILE type, but sounds like a horrible idea
[15:37:09] <nomagno> omegatron: ISO C99
[15:37:25] *** Joins: reset (~reset@user/reset)
[15:37:37] *** Quits: henistein (~henistein@2001:8a0:fd33:b801:7a1b:97ba:819b:816c) (Ping timeout: 256 seconds)
[15:37:48] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[15:37:50] <Wulf> ,cc printf("%zu", sizeof (FILE));
[15:37:52] <candide> Wulf: 216
[15:38:12] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[15:39:02] <nomagno> ,cc FILE d; printf("%X", FILE);
[15:39:04] <candide> nomagno: error: expected expression before 'FILE'
[15:39:10] <nomagno> oops
[15:39:14] <nomagno> ,cc FILE d; printf("%X", d);
[15:39:17] <candide> nomagno: [warning: format '%X' expects argument of type 'unsigned i​nt', but argument 2 has type 'FILE' [-Wformat=]] FFFFE3D8
[15:39:37] <DPA> Why is FILE not an incomplete type? This seams like asking for mistakes.
[15:40:28] <nomagno> ,cc FILE d = fopen("NEWFILE", "r"); printf("%s", d);
[15:40:30] <candide> nomagno: error: invalid initializer
[15:40:36] <veltas> DPA: How would it have been incomplete in C90?
[15:40:56] <nomagno> ,cc *FILE d = fopen("NEWFILE", "r"); printf("%s", *d);
[15:40:57] <candide> nomagno: error: expected expression before 'FILE'
[15:41:05] <DPA> typedef struct UNKNOWN_FILE FILE;
[15:41:06] <Wulf> ,cc FILE *f = fopen("/dev/null", "r"); *f;
[15:41:08] *** Quits: zer0bitz (~zer0bitz@2a0b:dbc1:2:81c1:d418:453f:8e01:9edf) (Read error: Connection reset by peer)
[15:41:12] <candide> Wulf: no output: *f = {_flags = -72539000, _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x7ffff755e4c0 <_IO_2_1_stderr_>, _fileno = 3, _flags2 = 0, _old_offset = 0, _cur_column = 0, _vtable_offset = 0... <truncated; https://0x0.st/-n1y.txt>
[15:41:21] <nomagno> ,cc FILE *d = fopen("NEWFILE", "r"); printf("%s", *d);
[15:41:24] <candide> nomagno: [warning: format '%s' expects argument of type 'char *', but argument 2 has type 'FILE' [-Wformat=]]  runtime error: load of null pointer of type 'struct FILE' Program received signal SIGSEGV, Segmentation fault at statement: printf("%s", *d); <local variables: d = 0x0>
[15:42:09] <nomagno> Yeah this this should't even be legal C ^
[15:42:51] <nomagno> Oh, candide is POSIX compliant!
[15:42:58] <nomagno> That's fun
[15:43:05] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:43:05] <DPA> ,cc -std=c90 typedef struct realbla bla; struct bla* x=0; printf("%p\n",(void*)x);
[15:43:07] <candide> DPA: (nil)
[15:43:24] <DPA> Note how bla is incomplete.
[15:43:25] <veltas> ,cc FILE *d = fopen("NEWFILE", "w"); printf("%s", (void *)d);
[15:43:27] <candide> veltas: No output.
[15:43:42] <DPA> ,cc -std=c90 typedef struct realbla bla; bla* x=0; printf("%p\n",(void*)x);
[15:43:44] <candide> DPA: (nil)
[15:44:15] <veltas> I guess if it's not incomplete it's so some header macros can access members
[15:44:20] <veltas> Or inline functions
[15:44:45] <DPA> They could cast it to __real_file for that.
[15:45:41] <veltas> If you declare __real_file you may as well declare FILE
[15:45:50] <veltas> I mean define
[15:46:17] <veltas> I guess the attitude of the people writing those old headers was to trust the programmer!
[15:46:33] <nomagno> ,cc FILE *pPipe; pPipe = popen("ls /usr/bin | grep nc", "rt"); char psBuffer[129]; fgets(psBuffer, 128, pPipe); printf(psBuffer);
[15:46:36] <candide> nomagno: Program received signal SIGSEGV, Segmentation fault in fgets () called by main () at statement: fgets(psBuffer, 128, pPipe); <local variables: pPipe = 0x0; psBuffer = "">
[15:52:34] <fizzie> No such thing as "t" for popen. Also, there's ,sh for running shell things.
[15:54:00] <nomagno> ,cc FILE *pPipe; pPipe = popen("ls /usr/bin | grep gcc", "r"); char psBuffer[129]; fgets(psBuffer, 128, pPipe); printf(psBuffer);
[15:54:03] <candide> nomagno: gcc
[15:54:31] <nomagno> fizzie: I was just testing out the perms. Is this running in a container, VM or what?
[15:56:27] <nomagno> AAh, candide is running this, according to my DDG-fu: https://github.com/pragma-/pbot/
[15:56:36] <veltas> It's in a container on a VM behind 10 firewalls and loaded with C4 to self-destruct suspended over internal waters
[15:56:47] <veltas> international*
[15:57:10] *** Joins: strajder (~strajder@user/strajder)
[15:57:42] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[16:08:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[16:12:23] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9c18:5252:f406:3ebf) (Ping timeout: 264 seconds)
[16:12:38] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[16:12:42] *** Joins: zwr (~zwr@2804:d45:b966:fb00:89e0:7784:2ef:7ccd)
[16:13:15] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Ping timeout: 276 seconds)
[16:13:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:14:10] *** Joins: useretail (~useretail@185.132.19.151)
[16:14:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[16:15:31] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[16:18:20] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Remote host closed the connection)
[16:22:08] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[16:22:48] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:22:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:23:53] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com)
[16:24:05] *** Joins: CaCode (~CaCode@user/cacode)
[16:27:12] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[16:28:57] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:34:05] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[16:34:05] *** Joins: asm (~alexander@user/asm)
[16:34:23] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 246 seconds)
[16:35:35] *** Joins: kn07_ (~kn07_@86.121.23.168)
[16:36:02] *** Quits: kn07_ (~kn07_@86.121.23.168) (Remote host closed the connection)
[16:38:28] <chiselfuse> What happens if I do putchar(999999999999);? Does it get casted or truncated or what?
[16:40:03] <chiselfuse> Assuming that the number is larger than INT_MAX
[16:42:16] <veltas> chiselfuse: In the standard it should be truncated I think
[16:42:33] <veltas> But in B it would print the string that would fit into the multichar that defined
[16:42:48] <veltas> So some really ancient systems would probably print a string there
[16:42:49] *** Joins: kts (~kts@103.73.237.24)
[16:45:52] <nomagno> ,cc putchar(999999999999999999999999);
[16:45:56] <candide> nomagno: [warning: integer constant is too large for its type  warning: overflow in conversion from 'long i​nt' to 'i​nt' changes value from '2003764205206896639' to '-1593835521' [-Woverflow]] Numeric constant too large.
[16:46:07] <sham1> Well a putchar should just get casted down to unsigned char
[16:47:28] <nomagno> ,cc cc putchar('o');putchar('\n');putchar(999999999999999999999999);putchar('\n');
[16:47:29] <candide> nomagno: error: unknown type name 'cc'
[16:47:31] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:47:38] <nomagno> ,cc putchar('o');putchar('\n');putchar(999999999999999999999999);putchar('\n');
[16:47:42] <candide> nomagno: No output.
[16:48:35] <nomagno> ,cc putchar('o');putchar('_');putchar(999999999999999999999999);
[16:48:38] <candide> nomagno: [warning: integer constant is too large for its type  warning: overflow in conversion from 'long i​nt' to 'i​nt' changes value from '2003764205206896639' to '-1593835521' [-Woverflow]] o_ Numeric constant too large.
[16:48:47] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[16:49:06] <nomagno> ,cc -pedantic -std=c11 putchar('o');putchar('_');putchar(999999999999);
[16:49:09] <candide> nomagno: No output.
[16:49:29] <nomagno> Weird
[16:50:19] <nomagno> ,cc for(ch='A';ch<='Z';ch++){putchar(ch);}return(0);
[16:50:21] <candide> nomagno: error: 'ch' undeclared
[16:50:36] <nomagno> ,cc for(char ch='A';ch<='Z';ch++){putchar(ch);}return(0);
[16:50:38] <candide> nomagno: ABCDEFGHIJKLMNOPQRSTUVWXYZ
[16:50:46] <fizzie> Why do people always try to *guess* these things, when they're actually defined? C11 7.21.7.3: "The `fputc` function writes the character specified by [the int] `c` (converted to an `unsigned char`) to --". `putchar` is defined in terms of `fputc`. And what happens if you convert a value that cannot be represented in an `int` as the parameter is implementation-defined, per 6.3.1.3p3.
[16:50:55] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:51:06] <bparker> because this is IRC. you must have the ego of literal jesus
[16:51:32] <sham1> An ironic statement since I think one of the virtues of Jesus in the story is humility
[16:51:40] <bparker> you know what I mean
[16:51:44] <fizzie> ,cc putchar('x'); putchar('x' + 256); putchar('x' + 0x10000); // all the same, assuming CHAR_BIT == 8
[16:51:47] <candide> fizzie: xxx
[16:51:53] *** Joins: tejr (~tejr@user/tejr)
[16:54:58] *** Quits: kts (~kts@103.73.237.24) (Quit: Konversation terminated!)
[17:02:27] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[17:06:56] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:06:59] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 264 seconds)
[17:09:45] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[17:11:11] <veltas> Yes it's truncated
[17:11:24] <veltas> I was going to reference the standard but forget the bot syntax
[17:11:29] <Rounin> ,cc printf("%s\n", 0x12345);
[17:11:32] <candide> Rounin: [warning: format '%s' expects argument of type 'char *', but argument 2 has type 'i​nt' [-Wformat=]] Program received signal SIGSEGV, Segmentation fault in __strlen_sse2 () called by printf_positional () called by __vfprintf_internal () called by buffered_vfprintf () called by printf () called by main () at statement: printf("%s\n", 0x12345);
[17:11:42] <Rounin> Fascinating
[17:11:57] <veltas> But pre-C (and possibly in very early C) putchar could print a multichar string
[17:12:18] *** Joins: pulse (~pulse@user/pulse)
[17:12:28] <Rounin> Also, you get proper stack traces now? I didn't know that was a thing
[17:12:50] <fizzie> candide runs the program under gdb, and you've been getting stack traces in gdb for a long time.
[17:12:51] <candide> No such factoid 'runs'; Found one factoid in #c containing 'runs': kr3-4 is /say Chapter 3: Control Flow; Exercise 3-4. In a two’s complement number representation, our version of itoa does not handle the largest negative number, that is, the value of n equal to -(2^(wordsize-1)). Explain why not. Modify it to print that value correctly, regardless of the machine on which it runs.
[17:13:02] <fizzie> candide: Must you take everything so literally? 
[17:13:02] <candide> No such factoid 'Must'; Found 9 factoids containing 'Must': [#c] address idb i​nt kr3-6 long longlong restrict rtfb short
[17:13:04] <Rounin> Ah... That's great
[17:13:13] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: brb, changing IRC realname)
[17:13:34] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[17:14:40] *** Quits: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[17:15:00] *** Joins: henistein (~henistein@2001:8a0:fd33:b801:163d:a8bd:41e4:1940)
[17:15:24] *** Joins: shivesh (~shivesh@user/shivesh)
[17:17:18] <veltas> "Modern CPUs have a feature called spectre that makes slow algorithms go as fast as good ones for small datasets"
[17:18:41] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[17:19:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:19:35] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 264 seconds)
[17:20:42] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[17:22:42] <bparker> kek
[17:23:47] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[17:24:43] *** Quits: Inline (~Inline@aftr-37-201-241-28.unity-media.net) (Read error: Connection reset by peer)
[17:26:37] <nomagno> I never really understood the need for speculative execution
[17:27:38] <nomagno> As in, does it really improve performance soooo much it compensates for the CPU development complexity increase?
[17:29:03] <Rounin> It would seem that it did for Intel, seeing as they made tons of money on it... But perhaps if one could have more simple cores and focus on multithread performance instead, then that might pay off?
[17:29:35] <Rounin> Single-core performance is obviously going to be important for a long time, but people are at least better at threading now
[17:30:22] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[17:30:28] <nomagno> The current RISC-V processors, with what ditching the entire concept of speculative execution, seem more reasonable
[17:30:30] *** Quits: henistein (~henistein@2001:8a0:fd33:b801:163d:a8bd:41e4:1940) (Quit: Client closed)
[17:30:44] <bparker> and much slower
[17:30:52] <bparker> even the fastest RISC-V board you can buy is still twice as slow as an rpi3
[17:31:05] <bparker> and $600 more expensive
[17:31:21] *** Joins: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl)
[17:31:21] <Rounin> Yeah, there was this YouTube video where they booted Linux on a RISC-V board, and it was slow enough to bring one to tears
[17:31:25] <Rounin> But at least it runs eh
[17:31:26] <nomagno> bparker: That's because the year of RISC-V computer is 2022, not 2021!
[17:31:43] <bparker> POWER9 is more reasonable for $current_year, IMO
[17:31:53] <bparker> although it is power hungry
[17:32:00] <Sos> i have a RISC-V linux board
[17:32:01] <Rounin> And you never know, ARM used to be the underdog too, but look at it now
[17:32:04] <Sos> Nezha
[17:32:09] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:32:11] <Sos> the speed is comparable to a Pentium II
[17:32:17] <Sos> and I'm, not even kidding
[17:32:27] <Sos> 1GHz my butt, the memory controller on that thing is a joke
[17:32:34] <Sos> (450MBps!)
[17:32:39] <bparker> lawl
[17:32:44] <bparker> 1080p what's that
[17:32:48] <nomagno> Sos: Nezha is made by such a horrible company I actually deleted as many recommendations of it as I could when I found out
[17:33:09] <Sos> nomagno, you mean Allwinner? or AWDL?
[17:33:23] <Sos> (Allwinner onyl made the chip, no?)
[17:33:37] *** Quits: Zenton (~user@user/zenton) (Remote host closed the connection)
[17:33:52] *** Joins: Zenton (~user@user/zenton)
[17:34:52] <nomagno> Sos: Allwinner makes the entire board
[17:34:59] <nomagno> https://linux-sunxi.org/Allwinner_Nezha
[17:35:03] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[17:35:06] <nomagno> They use the D1 RISC-V chip
[17:35:24] <nomagno> apart from being closed hardware, Allwinner has a looooooooooong history of GPL non-compliance
[17:35:27] <nomagno> as you can read in that same website
[17:35:51] <nomagno> That community is dedicated almost exclusively to reverse engineering their proprietary GPL-based drivers
[17:36:01] <Sos> yeah seen that
[17:36:09] <Sos> and true wish they were more transparent
[17:36:25] <Sos> especially how the boot sequence on that thing is black magic
[17:36:34] <nomagno> The BeagleV was promising, and we have open schematics for it! But it will not go into production
[17:36:41] <Sos> there's uboot that loads openSBI that loads OpenWRT that loads debian kernel
[17:36:46] <Rounin> bparker: This POWER9 platform, though... Is that the same one that comes with a specification for the rest of the hardware as well? OpenPOWER or something... That could be interesting for RISC-V too, after all, if it doesn't want to copy everything from the IBM-clone world
[17:37:05] <Rounin> And assuming there aren't too many licences and patents, of course
[17:37:36] <nomagno> One thing I don't get... all of these 'open specifications' are almost always released under full copyright
[17:37:37] <nomagno> so you can NOT modify them
[17:37:43] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Quit: Leaving)
[17:38:25] <nomagno> Oh, RISC-V is CC-BY
[17:38:28] <nomagno> I take that back
[17:39:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a2c:6d58:9f0f:3734)
[17:39:23] *** Quits: alch (~alch@ca-18-206-14.service.infuturo.it) (Read error: Connection reset by peer)
[17:40:48] <nomagno> OpenPOWER is full copyright though
[17:43:35] *** Quits: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 264 seconds)
[17:44:02] *** Joins: alch (~alch@151.82.163.246)
[17:44:02] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:44:04] <Rounin> Ah... So not entirely a free lunch... More like very discounted
[17:44:22] <sham1> Doesn't a POWER9 computer cost an arm and a leg?
[17:45:58] <Rounin> . o O ( Does that mean all ARM computers cost a power and a leg? )
[17:46:12] <Rounin> Thanks, I'll be here all night... Try the veal
[17:46:41] <sham1> It's not commutative!
[17:46:53] *** Joins: monkey_ (~user@190.104.116.32)
[17:47:02] <sham1> It's not a group, one doesn't simply rearrange the equation
[17:48:31] <Rounin> Ah... A most difficult calculation, to be sure
[17:52:49] *** Joins: kts (~kts@103.73.237.24)
[17:53:37] <bparker> sham1: you can ebay the parts for a couple thousand but yea
[17:53:58] *** Joins: brelod (~me@90.244.150.142)
[17:54:11] <sham1> Heh, with my budget that might as well be an arm and a leg, or a kidney
[17:54:12] <bparker> at least it's competitive with intel and has no secret firmware like ME/PSP
[17:54:58] <bparker> competitive performance-wise that is
[17:55:17] <sham1> BTW, is the POWER9 little or big endian. I could check but I'm not currently in a convenient spot for it
[17:55:19] *** Joins: neutral (~user@user/neutral)
[17:55:21] <bparker> either-or
[17:55:25] <sham1> Oh neat
[17:56:09] *** Joins: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl)
[18:00:49] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[18:01:25] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Quit: Leaving)
[18:02:09] *** Joins: gabriele (~gabriele@user/gabriele)
[18:02:32] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[18:05:19] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[18:09:22] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:11:37] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[18:11:56] <owensjrw> Good morning everyone.
[18:14:26] <sham1> Good $TIME_OF_DAY
[18:14:52] <owensjrw> I have another silly question... Is there a book available that has all the languages (C, C++, C#, java, python) together? I know most of those are OOP but the syntax seems to be derived largely by C.
[18:16:52] <X-Scale> i'd not put python in that bag
[18:19:14] *** Joins: thing (~thing@user/thing)
[18:22:19] <owensjrw> True I dont see python as derived from C. However I think the comparison of data structures (arrays, dictionaries, tuples, ect) and syntax of loops and conditionals compared to the others would be useful.
[18:23:07] <pragma-> I've noticed a trend of newly created languages dropping the () from the if statement.  `if (foo == bar)` becomes `if foo == bar` and I don't know how to feel about that. The () may not be necessary for parsing, but I do think it helps a lot with humans reading the code.
[18:23:59] <sham1> Meh, a lot of those languages also enforce having blocks for the if-statement (or in many languages if-expression) body, so at least they have that
[18:24:45] <pragma-> I'm glad that languages are preferring if-expressions instead of if-statements.
[18:25:47] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:25:57] * pragma- considers while-expressions and for-expressions.
[18:26:53] <owensjrw> Languages are still changing the newest version of C# creates an 'top-level' entry point no need for Main().
[18:27:32] <sham1> Oh, so it does that thing that Pascal has done for a while now
[18:28:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 264 seconds)
[18:29:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a2c:6d58:9f0f:3734) (Ping timeout: 268 seconds)
[18:29:39] <bparker> yikes
[18:32:32] *** Joins: korg815 (~korg815@user/korg815)
[18:34:51] <sham1> pragma-: also at least CoffeeScript has a "for expression" where it kinda acts like a map over the thing being iterated
[18:35:43] *** Quits: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 260 seconds)
[18:39:06] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:41:46] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 252 seconds)
[18:42:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[18:45:52] *** Joins: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl)
[18:47:15] *** Joins: quartz (~quartz@user/quartz)
[18:47:24] *** Quits: neutral (~user@user/neutral) (Remote host closed the connection)
[18:50:04] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:50:34] *** Joins: luizfrds (~Luiz@152.250.243.147)
[18:51:08] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:53:47] *** Joins: Akuli (~Akuli@213.216.210.11)
[18:55:30] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Client Quit)
[18:56:55] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:58:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:58:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:58:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:59:21] *** Joins: Xgc_ (~Xgc@user/xgc)
[18:59:39] *** Joins: Red_ (~Red@97.109-247-81.customer.lyse.net)
[18:59:40] *** Joins: crm (~crm@70.120.0.94)
[18:59:41] *** Quits: sm2n (~sm2n@user/sm2n) (Remote host closed the connection)
[18:59:41] *** Quits: kuku (~kuku@user/kuku) (Read error: Connection reset by peer)
[18:59:50] *** Quits: steve__ (~steve@ool-182c2aa4.dyn.optonline.net) (Read error: Connection reset by peer)
[18:59:57] *** Joins: kuku (~kuku@user/kuku)
[19:00:00] *** Joins: sm2n (~sm2n@user/sm2n)
[19:00:08] *** Joins: steve__ (~steve@ool-182c2aa4.dyn.optonline.net)
[19:01:11] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:02:06] *** Joins: Inline (~Inline@aftr-37-201-241-178.unity-media.net)
[19:02:38] *** Quits: Xgc (~Xgc@user/xgc) (Ping timeout: 260 seconds)
[19:03:06] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 260 seconds)
[19:03:06] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 260 seconds)
[19:03:50] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 246 seconds)
[19:04:38] *** Quits: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl) (Quit: Leaving)
[19:06:24] *** Joins: korg815 (~korg815@user/korg815)
[19:08:51] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[19:10:45] *** Joins: AmR (~AmREiSa@156.199.244.83)
[19:10:50] *** Quits: rkta (~kt@62.113.246.111) (Ping timeout: 246 seconds)
[19:12:31] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[19:12:39] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[19:12:42] *** Joins: teepee (~teepee@openscad/teepee)
[19:16:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:19:11] *** Joins: rkta (~kt@62.113.246.111)
[19:20:16] <Rounin> owensjrw: Although you could teach some of the basics of those languages together... C# and Java are mostly the same, and have sort of a subset of the features of C++, and some additional features, for instance, there are very significant differences that would make it impractical to put them in one book
[19:20:43] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[19:21:59] <Rounin> You could teach C and C++ together, but it'd be C and "C compiled with a C++ compiler, without any of the features of C++"
[19:22:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:22:28] <Rounin> And you could teach C++, Java and C# together, but it'd be "C++, Java and C# with only heap allocation and without dependency injection or frameworks"
[19:22:33] <Rounin> or garbage collection...
[19:23:22] <Rounin> Better to make an intro to programming book focused on just Python or some simple introductory language, I think
[19:23:37] *** Joins: nostar (~nostar@68.51.221.108)
[19:24:02] <Rounin> Then in book two, you can go "Oh yeah, remember references from book 1? In C, you can do more stuff with them, and they're called pointers"
[19:24:03] <sham1> Lua is a good language, although it does lack in "batteries included" kind of stuff that Python has
[19:25:18] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:25:36] <Wulf> lua looks like a proof of concept language: as minimal as possible and still somewhat usable
[19:26:06] <sham1> Minimal and very embeddable, which is useful for C as well because you get a good base to enhance whatever project
[19:26:08] <floatcomplex> the idea that pointers are hard or special in any way is mental poison
[19:29:49] *** Xgc_ is now known as Xgc
[19:31:09] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Remote host closed the connection)
[19:31:09] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[19:31:24] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:31:40] <pragma-> i never understood what was so hard about pointers.
[19:31:51] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[19:32:03] <pragma-> i guess some people just don't have the spatial brain wiring.
[19:32:23] <strajder> Rounin: Java is fundamentally different than C++; don't know about C# as never had an interest in it, but I would guess it is similarly different
[19:32:40] *** Joins: useretail (~useretail@185.132.19.151)
[19:32:41] <pragma-> or they learned the wrong thing about pointers and now have this horribly incorrect fundamental knowledge that keeps leading them astray
[19:32:51] *** Red_ is now known as Red
[19:33:32] <floatcomplex> pragma-: and many more are capable of understanding it easily but were given permission not to try, because they heard a professor say it was hard
[19:33:51] <pragma-> you know, there are people out there that can't understand phoentic spelling/speech. they think "coughing" is a good way to spell "coffin", for example, and they don't think about what "coughing" means and how that could possibly be related to a coffin. they don't care either. it's "close enough"
[19:33:52] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[19:34:20] <Rounin> strajder: C# the language is basically Java, but the internal bytecode might be quite different, as one is a stack machine and one is a register machine, or something like that
[19:34:44] <Rounin> strajder: But I've seen tools that allowed one to run Java code on .Net, so they can't be that different either
[19:36:26] *** Joins: critr (~critr@50-1-165-103.dsl.dynamic.fusionbroadband.com)
[19:36:51] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[19:37:15] <strajder> that proves nothing; for example C++ doesn't have import keyword
[19:37:43] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Client Quit)
[19:37:52] <pragma-> you can't really teach C and C++ together. you're really teaching C++ and lying to your students that it's compatible with C.
[19:37:54] <strajder> there are numerous other differences
[19:38:05] *** Joins: V-T60 (~v@91.203.24.166)
[19:38:06] <Rounin> strajder: How is that an example of .Net and Java bytecode being similar or different? Or were you talking about something else?
[19:38:26] <strajder> you said " C# and Java are mostly the same, and have sort of a subset of the
[19:38:38] <owensjrw> So as you all know Im am a beginner, self-, "cant say taught here", learning. I use alot of the exercise sites, read as much as I can from the free PDFs and websites. So I came up with that questions because as I browse through the different languages I see alot of similarities. So wouldn't it be best to learn programing languages the same way we learn foreign languages which is concurrently?
[19:39:05] <strajder> "features of C++, and some additional features"
[19:39:14] <Rounin> strajder: Yes, I'm sure you could spend ours obsessing over every difference, but I was answering the original question rather than trying to find details to argue about
[19:39:32] <Rounin> I'm sure there are bigger differences that whether you call it "import" or "include"
[19:39:36] <owensjrw> By the way my foreign languages are as bad as my programming skills.. :-)
[19:39:44] <strajder> they are separate languages; a similar oversimplification is often applied to C and C++
[19:40:01] <pragma-> the answer is in the details. you're brushing aside the details to give a wonky answer.
[19:40:03] <Rounin> strajder: How silly of you to make that mistake, then
[19:40:20] <Rounin> pragma-: I believe that is you doing that
[19:40:20] <strajder> what mistake?
[19:40:31] <pragma-> Rounin: where did I do that?
[19:40:45] <Rounin> pragma-: You should look over what you wrote and reflect on it
[19:40:55] <strajder> C != C++ != Java
[19:41:13] * pragma- blinks.
[19:41:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[19:42:22] <strajder> you could say that Java reminds of C or C++, but that is different than outright stating it is a subset of C++
[19:44:31] <Rounin> owensjrw: There is a lot of transferable knowledge, but each language also tends to have its own peculiarities and gotchas... C has tons of undefined and unspecified behaviour that isn't found in Java, for isntance... C++ probably does as well
[19:45:29] <Rounin> owensjrw: I would say that you can work with multiple languages at the same time, and get a basic understanding of multiple languages at the same time, but becoming an expert in multiple ones at the same time might be hard
[19:47:13] *** Quits: ztx (~ztx@89.232.195.187) (Quit: ztx)
[19:48:06] <strajder> Java was bloated since the start; bytecode simply isn't the same as native executable format, and time has shown that OOP is not better than functional programming after all, today it is already falling out of fashion
[19:48:54] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:48:58] *** Joins: serbest (~serbest@user/serbest)
[19:48:58] * pnbeast makes a note to lengthen his hemline for the fall and abandon objects.
[19:51:38] <owensjrw> I think some of the more complicated concepts (for us still learning the basics) like pointers may not be useful in a book the went over all languages, but then again showing how primitive type variable in a OOP are placed on the stack and objects are placed in the heap and how a Nullable (ie C# int?) is placed in the heap creating a 'pointer' on the stack could be helpful. But really the basics to show the similarities and how each can be better 
[19:51:38] <owensjrw> utilized.
[19:52:10] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:52:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 264 seconds)
[19:52:43] <Rounin> owensjrw: Pointers are really pretty basic, though... They might look advanced because of the *s and &, but it's no more complicated than putting a memory address pointing to some memory in a variable
[19:53:19] <owensjrw> One of the sites I visit is SoloLearn and one of the questions had to do with a user wanting to compare two of the same code in each language to determine total run time of each. the user had a C code written and wanted to compare it to Java it was just a simple for() loop.
[19:53:21] <Rounin> And under the hood, the object references in Java, C# and Python are probably pretty similar... Except that they might have additional info for garbage collection, etc.
[19:53:56] <pragma-> it's slightly more complicated than that. there's also pointer arithmetic taking the size of the type into account.
[19:56:07] <owensjrw> Always glad you all entertain my questions. Look forward to visiting again soon. Time for me to go get cleaned up and spend some time with the grandson. Think well build a bird house today using some scrap wood. You all have a great day.
[19:56:27] <Rounin> So long!
[19:57:07] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[19:57:18] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[19:57:29] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[19:58:03] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:ccfd:526d:efde:5784)
[19:58:03] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:ccfd:526d:efde:5784) (Changing host)
[19:58:03] *** Joins: skapata (~Skapata@user/skapata)
[19:58:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:58:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:58:06] *** Joins: wroathe (~wroathe@user/wroathe)
[20:03:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[20:06:45] *** Quits: monkey_ (~user@190.104.116.32) (Remote host closed the connection)
[20:11:07] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:12:23] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[20:16:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:18:12] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[20:19:27] *** Joins: dld (~dld@2601:197:600:1210:4005:8d20:87b1:8dd5)
[20:20:44] *** Joins: smlavine (smlavine@sourcehut/user/smlavine)
[20:26:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:28:15] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:28:29] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[20:28:54] *** Quits: kts (~kts@103.73.237.24) (Quit: Konversation terminated!)
[20:29:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[20:29:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:29:15] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:29:15] *** Joins: wroathe (~wroathe@user/wroathe)
[20:30:42] *** Quits: madder_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Remote host closed the connection)
[20:31:00] *** Joins: ztx (~ztx@user/ztx)
[20:41:29] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[20:41:46] *** Joins: tejr (~tejr@user/tejr)
[20:43:59] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:45:04] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-10e8-ab4e-a062-ff16.res6.spectrum.com)
[20:48:10] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 252 seconds)
[20:49:45] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[20:50:52] <nomagno> stradjer: Functional programming? You almost certainly meant procedural programming
[20:51:41] *** Quits: larry87 (~quassel@98.40.245.193) (Ping timeout: 264 seconds)
[20:53:16] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: Lost terminal)
[20:57:43] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[20:58:05] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[21:00:36] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:00:52] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:03:02] *** Joins: dstein64 (~dstein64@dannyadam.com)
[21:03:13] *** Quits: mahmutov (~mahmutov@37.155.18.23) (Ping timeout: 268 seconds)
[21:05:56] *** Quits: Inline (~Inline@aftr-37-201-241-178.unity-media.net) (Ping timeout: 245 seconds)
[21:10:30] *** Joins: bsandro (~bsandro@139.138.197.56)
[21:14:47] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b384:bd52:ad64:846c)
[21:25:17] <Ox151> hello, in the man pages there are ERROR enums that are accessed with errno, is there a way to show the enum value which are shown in the errors section of the man pages? when using strerror(errno) I get a string that is slightly helpful, but was looking to relate it to the error enums
[21:26:01] <Ox151> eg.. printf("%s", errno) would be EAGAIN and not 0 or w.e its mapped to
[21:28:32] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[21:28:41] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[21:31:12] *** Joins: Klinda (~superleag@user/klinda)
[21:34:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[21:35:39] <markand> the errno constant value is platform dependant
[21:36:27] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[21:37:10] <markand> for example on musl EINPROGRESS is 115 while is 36 on macOS
[21:37:40] *** Joins: krzych (krzych@nroot.pl)
[21:37:58] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[21:37:59] <markand> man errno shows a list of all available constants
[21:38:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:38:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[21:40:16] *** Quits: alch (~alch@151.82.163.246) (Read error: Connection reset by peer)
[21:40:26] <Ox151> thank you
[21:41:56] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[21:42:10] *** Quits: smlavine (smlavine@sourcehut/user/smlavine) (Ping timeout: 252 seconds)
[21:42:11] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[21:44:09] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[21:44:24] *** Joins: alch (~alch@pa-18-186-166.service.infuturo.it)
[21:46:15] *** Quits: krzych (krzych@nroot.pl) (Quit: leaving)
[21:46:46] *** Joins: krzych (krzych@nroot.pl)
[21:47:46] *** Joins: rgrinberg (~textual@190.113.111.74)
[21:51:20] *** Quits: tbcr (~tbcr@107.13.189.161) (Quit: ZNC 1.8.2 - https://znc.in)
[21:52:43] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[21:53:51] <Ox151> I am trying to use sendfile to send data between file descriptors over a socket. the sendfile man page says senfile can replace the need for having to read/write and can be faster, but it doesnt seem to be working. is there something i am missing? the client sends the data fine, but the server when it tries to write the file to disk it gets an invalid argument errno. 
[21:53:55] <Ox151> Server: http://paste.debian.net/1217395/
[21:54:05] <Ox151> Client: http://paste.debian.net/1217396/
[21:54:14] *** Joins: krzych (krzych@nroot.pl)
[21:55:34] *** Joins: Sos (~Sos@37.30.19.164.nat.umts.dynamic.t-mobile.pl)
[22:02:06] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[22:04:40] <Ox151> furthur reading the sendfile man page there is this "The  in_fd  argument  must correspond to a file which supports mmap(2)-like operations (i.e., it cannot be a socket)." guess that answers the question. cant use it for sockets.
[22:05:48] <apotheon> Are you talking about the Linux version of sendfile()?
[22:08:27] <Ox151> yes
[22:14:03] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[22:15:38] <Sos> sendfile
[22:15:51] <Sos> does that still exist?
[22:15:54] <Sos> wait i thought sendmail
[22:16:26] <Sos> i rmemebr finding a linux backdoor / hacking book back in early 00s
[22:16:29] <twkm> probably time for more coffee.
[22:16:33] <Sos> and like half of it was sendmail exploits
[22:16:49] <Sos> must have been fun times
[22:17:14] <Ox151> good ol' days when everything could be exploited
[22:18:34] <Sos> yeah but even then the first chapter was social engineering
[22:19:01] <Sos> "call the office at 4:45 on friday and say you lost the password, the rest of the book is optional"
[22:19:02] <Sos> it said
[22:20:30] <Sos> we;ve come a long way from that, i guess
[22:22:08] <apotheon> Yes.  Now you have to call at 5:45 instead, unless the company works with overseas contractors, in which case you have to research the best time to call.
[22:23:59] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[22:27:26] *** Quits: soapsudsxx (~soapsudsx@209.221.40.155) (Remote host closed the connection)
[22:28:51] *** Joins: soapsudsxx (~soapsudsx@209.221.40.155)
[22:30:18] *** Joins: Macuser (~Macuser@216.30.159.201)
[22:30:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:31:29] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:32:30] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:33:39] *** Joins: rgrinberg (~textual@190.113.111.74)
[22:35:54] *** Joins: vicfred (~vicfred@user/vicfred)
[22:38:42] *** Quits: rgrinberg (~textual@190.113.111.74) (Ping timeout: 260 seconds)
[22:46:53] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[22:47:52] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[22:51:24] *** Joins: V-T60 (~v@91.203.24.166)
[22:52:46] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[22:56:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:57:05] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[22:57:07] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:57:24] *** Joins: rgrinberg (~textual@190.113.111.74)
[22:57:31] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:58:30] *** Joins: tbcr (~tbcr@107.13.189.161)
[22:58:31] <Ox151> is there any good documentation for the libcrypto? man pages seem to show openssl examples for cli, but not much in the case of using the library in c
[23:01:37] <Wulf> Ox151: most functions got a manpage
[23:01:56] <twkm> openssl's webshite has documentation.  installation should do though sometimes it is in an adjunct package.
[23:05:02] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[23:10:29] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:14:00] *** Joins: strajder (~strajder@user/strajder)
[23:16:14] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[23:17:26] *** Joins: Klinda (~superleag@user/klinda)
[23:19:03] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:19:59] <Ox151> thanks, digging a lil deaper at openssl.org is giving more hints
[23:20:50] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (Remote host closed the connection)
[23:22:20] *** Joins: seninha (~seninha@user/seninha)
[23:28:50] *** Quits: machinehum (~machinehu@45.131.194.114) (Ping timeout: 260 seconds)
[23:29:49] *** Joins: machinehum (~machinehu@45.131.194.114)
[23:33:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:34:20] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[23:35:56] *** Joins: Famine_ (~Famine@user/famine)
[23:36:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[23:37:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:37:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:37:28] *** Joins: wroathe (~wroathe@user/wroathe)
[23:39:23] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 264 seconds)
[23:40:18] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 260 seconds)
[23:43:09] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:46:25] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[23:46:47] *** Joins: tejr (~tejr@user/tejr)
[23:47:36] *** Quits: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1) (Quit: Konversation terminated!)
[23:48:20] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[23:51:17] *** Joins: klf (~fkl@135.12.180.212)
[23:51:20] <klf> http://ix.io/3Dp1
[23:52:18] <klf> is '__attribute__ ((packed))' a compiler-specific thingy?
[23:53:28] *** Joins: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr)
[23:54:30] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[23:57:20] *** Joins: Oddity (Oddity@user/oddity)
