[00:04:56] *** Joins: cjb (~cjbayliss@user/cjb)
[00:20:57] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:af93:19b0:8b26:3fa2)
[00:38:51] <White_Flame> I still like oct31 == dec25, in terms of number base
[00:40:10] <lotuseater> oh yes, i told this at work this week ^^
[00:40:16] *** Joins: darklands (~darklands@69.43.65.116)
[00:40:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:41:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:42:47] *** Quits: darklands (~darklands@69.43.65.116) (Remote host closed the connection)
[00:55:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[01:10:00] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:16:53] *** Quits: Jing_ (~textual@103.121.208.115) (Remote host closed the connection)
[01:17:04] *** Joins: horar (~horar@49.145.146.182)
[01:19:26] *** Quits: horar (~horar@49.145.146.182) (Client Quit)
[01:20:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[01:21:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:26:30] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:26:36] *** Joins: horar (~horar@49.145.146.182)
[01:49:57] *** Quits: dra (~dra@2a04:4540:6419:4d00:9c4f:2d61:e582:82f7) (Quit: Leaving)
[01:55:06] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[01:57:08] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[01:58:06] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[02:06:01] *** Quits: pve (~pve@178-55-197-227.bb.dnainternet.fi) (Quit: leaving)
[02:10:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:12:30] *** Quits: cosimone (~user@93-47-230-151.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:24:23] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:af93:19b0:8b26:3fa2) (Ping timeout: 260 seconds)
[02:25:13] *** Joins: dra (~dra@2a04:4540:6419:4d00:e866:3747:ef3c:6e50)
[02:26:15] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9) (Ping timeout: 260 seconds)
[02:26:17] <jcowan> jackdaniel: Semantically, ISLisp is closely related to CL, but it's not a subset: an ISLisp program won't run in CL.
[02:32:11] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 264 seconds)
[02:35:54] *** Quits: gaqwas (~john@dynamic-095-117-012-008.95.117.pool.telefonica.de) (Ping timeout: 260 seconds)
[02:37:30] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[02:37:41] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e007:8711:e7b4:2641) (Ping timeout: 246 seconds)
[02:53:47] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[02:56:19] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[02:56:26] <hayley> So, I finally got around to doing a performance test on all the regular expression engines I could think of (which is not very many).
[02:56:35] * hayley uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/BoCQpymPhwGdyWTxiPngaUwf/re-graph.png >
[02:58:55] <hayley> The results are somewhat interesting: CL-PPCRE is about as fast as PCRE2 without its JIT, and my regular expression engine has about 1.7× the throughput on PCRE2 with JIT (on this admittedly very contrived test).
[02:58:55] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[03:04:01] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[03:04:58] *** Joins: Bike (~Bike@71.69.170.70)
[03:04:58] *** ChanServ sets mode: +o Bike
[03:12:54] *** Joins: johnjay (~pi@192.142.100.50)
[03:24:46] *** Joins: X-Scale` (~ARM@92.250.98.212)
[03:25:56] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:26:14] *** Quits: X-Scale (~ARM@31.22.147.35) (Ping timeout: 260 seconds)
[03:27:03] *** X-Scale` is now known as X-Scale
[03:28:50] *** Quits: dra (~dra@2a04:4540:6419:4d00:e866:3747:ef3c:6e50) (Quit: Leaving)
[03:33:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:34:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:35:42] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:36:28] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[03:47:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[03:50:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:51:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:55] *** Lord_of_Life_ is now known as Lord_of_Life
[03:58:26] *** Quits: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:02:11] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Remote host closed the connection)
[04:07:05] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[04:07:34] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Client Quit)
[04:09:22] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[04:17:09] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Quit: Leaving)
[04:17:42] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[04:29:50] *** Quits: rogersm_ (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[04:29:56] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:40:07] *** Quits: horar (~horar@49.145.146.182) (Quit: Client closed)
[04:40:34] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:45:59] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 264 seconds)
[04:52:34] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[04:52:51] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[04:55:00] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[04:56:21] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[05:01:06] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:23:10] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Quit: bbiab)
[05:23:22] <jcowan> hayley: Does cl-ppcre use Thompson's algo at all?
[05:32:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[05:33:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:34:29] *** Parts: ArgoLargo[m] (~argolargo@2001:470:69fc:105::1:16b1) ()
[05:36:28] *** Joins: Bike (~Bike@71.69.170.70)
[05:36:28] *** ChanServ sets mode: +o Bike
[05:39:33] <hayley> I believe it only produces a chain of closures, and it definitely does not correspond to a DFA, but I don't know if the closures correspond to a NFA or just the structure of the RE.
[05:43:34] <hayley> To the best of my knowledge, PCRE2 and the Rust regex library use NFAs and thus probably Thompson (though the latter tries to use a DFA simulator when no ε transitions were encountered). o-m-r-n uses Brzozowski/Owens et al derivatives with a still unpublished technique for submatching by Gilbert Baumann.
[05:44:43] <Bike> is o-m-r-n your code
[05:45:00] <hayley> Yes.
[05:45:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:45:25] <Bike> very cool
[05:45:31] <hayley> :)
[05:45:47] <Bike> i'm surprised libc is still so bad after that regexes are fast article
[05:45:54] <Bike> i guess they just don't worry about throughput much
[05:46:02] <Bike> and also have to do backtracking or whatever
[05:46:33] <hayley> For what it's worth, glibc is also broken, as (a|aa)* should produce the same matches, but it does not.
[05:47:36] <Bike> i wonder why rust goes to pot like that
[05:47:56] <hayley> But I think submatching throws a spanner into the works of most engines, too. For example, the Rust regex library only requires backtracking for submatches apparently.
[05:49:10] <hayley> I suspect it overflows some kind of cache at that size, as there is at least a cache for lazily generating a NFA from a regular expression, but I don't know what it would be.
[05:49:37] <hayley> Note that cl-ppcre and PCRE2 without JIT blow the stack, and PCRE2 with JIT aborts for some other reason.
[05:51:26] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:52:17] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:58:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:03:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[06:06:46] *** Joins: domovod (~domovod@176.196.122.197)
[06:13:23] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[06:18:04] *** Quits: Spawns_Carpet (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[06:20:47] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 264 seconds)
[06:22:14] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[06:22:39] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[06:24:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:48:21] *** Joins: Oladon (~olad@98.43.81.226)
[06:58:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:00:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[07:01:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:01:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:01:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:01:32] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[07:06:22] <jcowan> submatches shouldn't require backtracking
[07:07:05] <lisp123> hayley: Nice work!
[07:07:55] <hayley> Right, they don't need to. But practically, short of Laurikari's approach (which Gilbert says is wrong on (a|aa)*, hence the test), implementations backtrack or use NFAs.
[07:11:21] <jcowan> you should probably test against re2, which has 3 different NFAs
[07:11:34] <jcowan> for submatching
[07:15:49] <Bike> one possibly irrelevant feature i wonder about is externalization. When you write literal regexes with cl-ppcre it uses load-time-value to compile them at load time, but if your re engine actually generates lisp code you could just compile it in ahead of time with everything else
[07:15:56] <Bike> toplevels stuff might make it kind of annouying though
[07:16:39] * jcowan looooves Brzozowski derivatives
[07:17:18] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 260 seconds)
[07:17:41] <hayley> I use the LOAD-TIME-VALUE trick too.
[07:17:56] <Bike> i see this actually generates code, though not with an exported interface, so it could be set up without an enormous amount of difficulty i suppose
[07:18:00] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[07:18:00] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[07:19:07] *** Joins: domovod (~domovod@176.196.122.197)
[07:19:27] <hayley> It's probably possible, but L-T-V allows for caching compiled code, and having a separate compilation unit means the compiler won't choke too hard on user code and the regular expression (as it often does with moderately sized REs, sadly).
[07:21:14] <Bike> choke as in compilation takes a while?
[07:22:20] <hayley> Yes. And this is the Lisp compiler, rather.
[07:22:49] <Bike> right.
[07:23:42] <Bike> i've been low key wondering for a while if it would be practical to provide a compiler that translates the kind of tagbody heavy code this kind of thing often generates (dunno about this specifically though) without much complicated analysis to save time
[07:23:51] <Bike> prolly more effort than it's worth tho...
[07:23:56] <hayley> I think I know why - SBCL does type inference before copy propagation, and we really need copy propagation first (as derivatives and duplication create a lot of unnecessary variables). And I don't know how to write a copy propagation pass.
[07:24:31] <hayley> The only thing I can think of is that everything is a FIXNUM, and further type inference is going to be pointless.
[07:31:16] <beach> Good morning everyone!
[07:31:32] <beach> Congratulations hayley!  Looks like great work!
[07:31:37] <hayley> Thanks!
[07:31:52] <beach> Definitely worth an ELS submission.
[07:32:35] *** Joins: raeda (~raeda@72.49.219.33)
[07:33:07] <hayley> Well, I have to convince gilberth to publish his DFA generation technique first.
[07:33:33] <beach> That would be preferable, but not a requirement.
[07:33:54] <beach> You can summarize his technique in the "previous work" section.
[07:34:05] <beach> And give him due credit of course.
[07:35:09] <beach> I see many papers with entries in the bibliography indicating "unpublished work" and even "private exchange".
[07:35:27] <beach> Though a footnote would be better adapted for that.
[07:36:17] <hayley> Sure, though I don't think my additions to the technique were too significant. I only added an optimisation to avoid duplicating variables in some obvious cases, and figured out how to remove some branches and register spills.
[07:37:36] <beach> Well, then, ask gilberth whether he wants to a co-author, and the paper can be mainly about the technique and somewhat about the implementation.
[07:37:51] <beach> We did this for the "stealth mixin" paper.
[07:38:34] <hayley> He worked out the derivatives of tagged regular expressions, and how to design "lexing" and "grepping" machines, which seem more fundamental.
[07:38:47] <hayley> Okay, I'll mention it to him.
[07:38:49] <beach> He is a co-author because he came up with the technique, but he wasn't interested in the paper writing and paper submission paraphernalia.
[07:43:50] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:48:05] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[07:56:39] <pillton> beach: Do you still use the stealth mixin technique?
[07:56:41] *** Joins: semz (~none@user/semz)
[07:56:50] <beach> Every day! :)
[07:57:11] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:57:54] *** Joins: s-liao (~s-liao@101.86.103.113)
[07:57:55] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[07:58:01] <beach> There are four occurrences in the SICL code.
[07:58:34] *** Quits: s-liao (~s-liao@101.86.103.113) (Client Quit)
[07:58:43] <hayley> I found a use for stealth mixins in my compiler, though it is nothing beach hasn't seen before. I use a stealth mixin to annotate each state with an inferred "minimum match length", so that a large number of bounds checks can be safely elided.
[07:59:09] <beach> Nice!
[07:59:16] <pillton> Nice.
[07:59:26] <pillton> Have you read the "Layering" chapter in the Software Design for Flexibility book by Hanson and Sussman?
[08:00:11] <pillton> I'm trying to decide if it makes sense over mixins. I just read your stealth mixin paper.
[08:00:15] <beach> Not yet.
[08:01:13] <beach> pillton: You will be happy to know that the paper was published at an Australian conference! :)
[08:01:25] <pillton> Yeah I saw that.
[08:01:42] <pillton> 14 years too late.. as usual.
[08:01:49] <beach> Heh.
[08:04:31] <hayley> I haven't read SDfF, but "layering" reminds me of a technique in Newspeak, where a module (which is represented as a class) inherits from another module, but changes some bindings (which are represented by methods) in order to extend the latter module. A friend emailed Gilad Bracha about stealth mixins, and Gilad said that stealth mixins would be quite simple to implement with this technique.
[08:04:47] <hayley> Could you summarise what "layering" means in that book?
[08:06:25] <pillton> Well, it allows a programmer to annotate values with other information e.g. a number could have a unit (e.g. metres) or an image could have a timestamp.
[08:06:34] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[08:06:39] <beach> hayley: Stealth mixins don't add any functionality that could be done with hash tables.  It's just that they are more efficient.
[08:06:54] <hayley> Right and right.
[08:07:34] <beach> ... so if "simple to implement" means using hash tables, then that's not an acceptable implementation, is what I mean.
[08:07:35] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:07:36] <White_Flame> pillton: and an annotated number could be used as a plain number in any interface?
[08:07:51] <pillton> White_Flame: Conceptually yes, but not in the book.
[08:08:13] <hayley> No, we would still add a proper mixin with proper slots to a class.
[08:08:22] <beach> OK.
[08:08:26] <White_Flame> I'll have to give it a peek at some point
[08:08:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:09:08] <pillton> The part I struggle with involve the operations involving these "layered datums". The layered procedure inspects all of the layers involved in the arguments and invokes layer specific operations after invoking the "base" operation.
[08:09:13] <White_Flame> annotated values are very interesting for compilers & heuristic feedback
[08:09:44] <pillton> For example, multiplying two values annotated with units would produce a new value annotated with the product of the unit information.
[08:12:20] <hayley> I haven't written much Newspeak (heard it was cool in 1984, but now it's 2021...), but we might write a silly module like 'class Module1 = (| "no module slots" |) ( public class A = (| |)() )' then extend it by 'class Module2 from: m = (| m = m. |) ( public class A = m (| annotation |) () )'
[08:13:40] <pillton> White_Flame: FYI The book is written in a scheme (though there a bits I can find no definition of e.g. bundle).
[08:14:04] <pillton> White_Flame: Sorry, the book illustrates its concepts using scheme.
[08:14:13] <hayley> The only semantic difference is that the mixin applies to a new class in a new module, rather than modifying the original module "in place", as the Common Lisp implementation does. But making an application use this new module, rather than the old module, is also not difficult; one simply provides a "global environment" with the new module rather than the old module.
[08:14:49] <White_Flame> pillton: as would be expected for sussman ;)  (not familiar with hanson by name)
[08:15:08] <hayley> (There aren't really any global environments, but whatever approach that one uses to provide modules to an application looks like a "global environment" to me.)
[08:16:01] <pillton> hayley: Yeah.
[08:18:02] <beach> hayley: That doesn't sound like it would work the same way then.
[08:19:35] <pillton> The bit I struggle with is I have a lot use cases like (let ((Y (F A B))) ..) where you would like Y to link back to A and/or B but you would also like F to know about Y if it is given A and B again.
[08:19:46] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[08:21:18] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:24:07] <hayley> Yes, I've probably missed something in my description. There was a presentation where Gilad demonstrated modifying a parser to produce an AST, when the original parser was not configured to produce any useful sort of parse tree, and it looked like stealth mixins.
[08:30:06] <hayley> Somewhere around https://youtu.be/MHndm4BPRlY?t=1356 - though this demonstration doesn't rely on mixins, rather another wrapper object. But the general idea of "change a module by modifying a binding with some other stuff we want" is still there.
[08:32:30] <jackdaniel> jcowan: that's why I'vs used the word factually
[08:33:48] <jackdaniel> afair symbol macro was added to cl so there is no islisp feature missing in cl, but I may remember wrong
[08:34:38] <jackdaniel> and Kent Pitman I think wrote a summary with islisp operators and their one-on-one counterparts in cl
[08:39:02] <beach> hayley: I see.  So the main point of stealth mixins is that, just as a library can put auxiliary methods on its base class to intercept operations on subclasses, steal mixin introduces even more basic classes, and forces the library class to be a subclass of those basic classes.  Client code can then put auxiliary methods specialized to the even-more-basic class, like on INITIALIZE-INSTANCE, thereby intercepting the operations that t
[08:39:02] <beach> library functions themselves invoke.
[08:39:34] <beach> All this without changing a line of code in the library.
[08:39:54] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[08:40:12] *** Joins: aartaka (~aartaka@5.1.53.225)
[08:44:08] <hayley> I see, yes.
[08:59:46] *** Joins: cjb72647 (~cjbayliss@user/cjb)
[09:02:04] *** Quits: cjb (~cjbayliss@user/cjb) (Ping timeout: 260 seconds)
[09:05:12] *** Quits: cjb72647 (~cjbayliss@user/cjb) ()
[09:06:18] <aeth> I can't imagine Common Lisp without symbol macros. I guess you could hardcode WITH-ACCESSORS in an implementation-specific way without relying on SYMBOL-MACROLET
[09:06:46] <aeth> but CL's flavor of OOP relies on this sort of behavior
[09:08:37] *** Joins: Jing (~textual@103.121.208.115)
[09:12:52] <Jing> Hi, I'm relative new to CL. Is there any mailing lists that CL people tend to subscribe to?
[09:24:12] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[09:24:12] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[09:24:12] *** Quits: d_run (sid83858@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: iisi (sid19824@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:24:12] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[09:24:12] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[09:24:12] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[09:24:12] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[09:24:12] *** Quits: splittist (sid17737@tinside.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[09:24:12] *** Quits: mgxm (~mgxm@user/mgxm) (*.net *.split)
[09:24:12] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[09:24:12] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[09:24:12] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[09:24:19] *** Joins: jackdaniel (~jack@turtleware.eu)
[09:24:23] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[09:24:25] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[09:24:26] *** Joins: lonjil (~quassel@user/lonjil)
[09:24:27] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[09:24:27] *** Joins: d_run (sid83858@id-83858.hampstead.irccloud.com)
[09:24:37] *** Joins: jsatk (sid304796@id-304796.helmsley.irccloud.com)
[09:24:50] *** Joins: thonkpod (~thonkpod@2001:19f0:ac01:b46:5400:1ff:fec7:d73d)
[09:24:58] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[09:25:04] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[09:25:11] *** Joins: sterni (~lukas@2a01:4f8:151:54d0::)
[09:25:14] *** Quits: thonkpod (~thonkpod@2001:19f0:ac01:b46:5400:1ff:fec7:d73d) (Changing host)
[09:25:14] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[09:25:42] *** Joins: mgxm (~mgxm@user/mgxm)
[09:25:43] <beach> Jing: There is LispPro.
[09:25:52] <beach> Jing: But you are better off hanging out here.
[09:25:57] *** Joins: hexology (~hexology@user/hexology)
[09:26:03] *** Joins: Kabriel (~Kabriel@user/kabriel)
[09:26:05] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[09:26:05] *** ChanServ sets mode: +o fe[nl]ix
[09:26:19] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:26:30] *** Joins: energizer (~energizer@user/energizer)
[09:29:29] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[09:32:50] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[09:32:50] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[09:32:50] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[09:32:50] *** Quits: gin (~gin@user/gin) (*.net *.split)
[09:32:50] *** Quits: cpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:32:57] *** Joins: cpape (~user@2a01:4f9:c010:632d::1)
[09:33:30] *** Joins: gin (~gin@2400:8904::f03c:92ff:fe28:e8a7)
[09:33:34] *** Quits: gin (~gin@2400:8904::f03c:92ff:fe28:e8a7) (Changing host)
[09:33:34] *** Joins: gin (~gin@user/gin)
[09:34:30] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[09:35:02] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:37:39] <Jing> Thank you. I will stay here as well :)
[09:37:45] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[09:38:06] <beach> Great!  What are you planning to do with Common Lisp?
[09:39:12] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[09:40:15] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[09:40:30] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 260 seconds)
[09:41:20] *** Joins: aartaka (~aartaka@5.1.53.225)
[09:42:24] <Jing> Unsure. I read PCL some years ago and recently I'm using it to solve Advent of Code puzzles..
[09:43:19] <beach> That's a start I guess.
[09:44:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[09:44:27] <beach> Feel free to ask questions.  If your questions become numerous and truly basic, you may be redirected to #clschool.  But #commonlisp is fairly tolerant as long as the questions are on topic.
[09:44:40] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9)
[09:45:20] <Jing> Thanks. Basically all the questions I have so far can be solved by searching online or reading documentations
[09:45:54] <beach> Wow, you are unusual! :)  Not many people read documentation these days it seems.
[09:48:17] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[09:49:08] <Jing> I didn't know that... I find documentations usually helpful if written well
[09:49:31] <beach> I agree, but then, I am old school.
[09:49:51] <beach> I even *write* documentation from time to time. :)
[09:50:38] *** Joins: asarch (~asarch@2806:10ae:7:ec28:a2ae:f14e:5d5:8987)
[09:51:15] <Jing> You are helping a lot of people :)
[09:51:45] <beach> Thank you!
[09:59:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[09:59:57] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[10:00:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:06:08] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:18:17] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[10:20:14] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[10:22:58] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:23:49] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:24:12] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:29:11] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:33:04] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[10:33:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:35:05] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[10:35:05] *** Joins: jackdaniel (~jack@user/jackdaniel)
[10:35:05] *** ChanServ sets mode: +o jackdaniel
[10:35:35] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[10:50:26] <jackdaniel> beach: isn't this an availability bias? people who read documentation probably rarer ask on irc, so we see more often people who don't
[10:50:45] <beach> Entirely possible.
[10:52:02] *** Joins: pve (~pve@178-55-16-55.bb.dnainternet.fi)
[10:54:50] *** Joins: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee)
[11:06:49] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[11:07:01] *** Joins: gaqwas (~john@dynamic-077-004-000-013.77.4.pool.telefonica.de)
[11:13:45] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[11:29:52] *** Joins: domovod (~domovod@176.196.122.197)
[11:35:33] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:46:12] <pve> Hi, is the stealth mixin paper available somewhere?
[11:47:27] <pve> (that doesn't require an account)
[11:47:31] <beach> Only illegally for free I think.
[11:47:33] <pve> oh
[11:47:35] <pve> shame
[11:47:47] <beach> Yeah.
[11:47:56] <beach> I don't even have a copy myself.
[11:48:01] <pve> I would have liked to see what it's all about
[11:48:26] <beach> There are plenty of sites that have it I think, if you are willing to do the illegal stuff.
[11:49:37] <beach> I don't encourage illegal activities, but then many publishers behave like crooks, and this one is not an exception.
[11:50:27] <hayley> The problem with pirating computer science papers is that you need to be stealthy to not get caught, and you only get stealth mixins after the act...
[11:51:04] <beach> Heh.
[11:51:17] <pve> beach: Alright, I think I get the picture, thanks.
[11:53:15] <hayley> https://www.youtube.com/watch?v=ALZZx1xmAzg "You wouldn't steal a paper..."
[11:55:14] <pve> Does this contain the gist of it?
[11:55:15] <pve> https://github.com/robert-strandh/Stealth-mixin/blob/master/stealth-mixin.lisp
[11:56:47] <beach> That's the implementation, yes.
[11:58:50] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 268 seconds)
[11:58:58] <pve> ok, great
[11:59:15] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[12:00:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee) (Quit: Leaving)
[12:00:31] <Jing> Maybe just email the author to ask for a (legal) copy...
[12:00:44] <beach> That would be me, and I don't have one.
[12:00:46] <jackdaniel> I'm afraid that author expressed that they don't have the paper :)
[12:00:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee)
[12:02:13] <beach> Maybe Hamer has one.  I believe he is in Glasgow now.
[12:02:18] <jackdaniel> that said, downloading a is not illegal (distributing it is)
[12:02:27] <jackdaniel> s/a/a paper/
[12:05:30] <jackdaniel> well, that depends on the country I suppose (I've just skimmed the web to confirm)
[12:13:00] *** Quits: asarch (~asarch@2806:10ae:7:ec28:a2ae:f14e:5d5:8987) (Quit: Leaving)
[12:14:30] *** Quits: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[12:15:11] *** Joins: amb007 (~a_bakic@57.33.83.79.rev.sfr.net)
[12:18:34] *** Quits: amb007 (~a_bakic@57.33.83.79.rev.sfr.net) (Read error: Connection reset by peer)
[12:19:03] *** Joins: amb007 (~a_bakic@57.33.83.79.rev.sfr.net)
[12:25:10] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[12:26:07] *** Joins: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no)
[12:28:37] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[12:29:11] *** Quits: mingus (~jan-magnu@auth-147-15.anyconnect.uib.no) (Ping timeout: 264 seconds)
[12:31:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[12:31:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[12:35:13] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[12:45:03] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[12:45:50] *** Joins: s-liao (~s-liao@101.86.103.113)
[12:48:27] *** Joins: cosimone (~user@93-47-228-135.ip115.fastwebnet.it)
[12:50:00] *** Joins: raeda_ (~raeda@72.49.219.33)
[12:50:39] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[12:51:36] *** Quits: Jing (~textual@103.121.208.115) (Remote host closed the connection)
[12:54:51] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[12:55:13] *** Joins: s-liao (~s-liao@101.86.103.113)
[12:59:22] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 260 seconds)
[12:59:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:02:22] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[13:24:34] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[13:27:38] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[13:30:43] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[13:39:26] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[13:43:58] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:49:48] *** Joins: Jing (~textual@103.121.208.52)
[13:50:47] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:52:01] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[13:53:27] *** Joins: s-liao (~s-liao@101.86.103.113)
[14:15:45] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[14:15:45] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[14:23:45] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[14:38:41] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[14:41:39] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[14:49:29] *** Joins: McParen (~mcp@user/mcparen)
[14:57:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:00:50] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[15:02:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[15:05:18] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[15:08:20] *** Joins: sernamar (~user@84.78.250.8)
[15:08:20] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[15:08:41] *** Parts: akoana (~ah@user/akoana) ()
[15:09:19] *** Quits: sernamar (~user@84.78.250.8) (Remote host closed the connection)
[15:12:38] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[15:14:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:14:46] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[15:24:35] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:bc44:afc4:50a0:6ab8)
[15:25:34] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[15:41:55] *** Joins: caret (~caret@24-116-7-78.cpe.sparklight.net)
[15:42:47] *** Quits: caret (~caret@24-116-7-78.cpe.sparklight.net) (Client Quit)
[15:53:14] *** Joins: caret (~caret@24-116-7-78.cpe.sparklight.net)
[15:57:48] *** Joins: yewscion (~yewscion@2604:ca00:14c:20f5::860:f1c3)
[16:00:31] *** Joins: Jing_ (~jing@115.207.53.33)
[16:05:31] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[16:06:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:09:12] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 268 seconds)
[16:12:33] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[16:24:20] <yewscion> Hello all. I am compiling my first executable from SBCL, and I've noticed there are many ways to do so (everything from =save-lisp-and-die= to things like =ros= or =buildapp=). I found that I am most comfortable leveraging asdf for this task, though that's from a personal convenience standpoint. Is there a l reason to prefer a specific method over others when compiling to an executable is necessary? Is one way more 'standard' than the o
[16:24:59] <yewscion> than the other?* I've found the documentation on this process to be fairly terse and scattered...
[16:25:22] <jackdaniel> save-lisp-and-die is the implementation-specific utility
[16:25:32] <jackdaniel> buildapp last time I've checked worked only on sbcl and ccl
[16:25:48] <jackdaniel> asdf tries to provide uniform way for multiple applications
[16:26:08] <jackdaniel> net.didierverna.clon tries the same and provides abstraction to define command line arguments
[16:26:14] <jackdaniel> regarding roswell - no idea
[16:27:30] <jackdaniel> if you are satisfied with asdf then that should work just fine
[16:28:28] <Jing_> I was just reading https://news.ycombinator.com/item?id=26065511 and the first comment wrote something about building an app
[16:30:06] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[16:30:17] *** Joins: Bike (~Bike@71.69.170.70)
[16:30:17] *** ChanServ sets mode: +o Bike
[16:33:16] <jackdaniel> this comment has so much "know-it-all" feel that at some point I've found myself more focused on finding argumentation flaws than actually reading it ,)
[16:33:40] <jackdaniel> but putting aside how it is written it certainly has some useful information
[16:34:03] <holycow> Jing_: that is a great thread. If someone had access to like 10 mil, a lot of the rough edges could be ironed out and the dev environment could see the barrier to entry lowered
[16:34:21] <holycow> the problem is finding the revenue stream that could justify that expense
[16:36:18] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 260 seconds)
[16:38:37] <pjb> yewscion: there's no standard way to build an executable, because there are way to many combinations.
[16:40:19] <pjb> yewscion: what I do, basically, is that for each application, I write a generate-foo.lisp script (which may load a common generate.lisp script), in which I set up the things, compile, and load in a fresh image the compiled code and everything needed for a specific application.  I have an example at: http://github.com/informatimago/hw ; but it's often quite different and more sophisticated. For example, the generate script may have to
[16:40:19] <pjb> copy resource files, etc.
[16:40:39] <pjb> yewscion: I write a makefile to make it easily invokable from the shell or the CI.
[16:41:15] <pjb> yewscion: for example, one thing that makes it different, is when you compile and run tests, vs. when you want to generate a distribution for end users.
[16:42:01] <pjb> yewscion: a more complex example would be given at http://gitlab.com/patchwork/patchwork
[16:45:23] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:48:43] <Jing_> thanks seems helpful
[16:50:46] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[16:52:31] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:56:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Read error: Connection reset by peer)
[16:58:59] <Jing> Out of curiosity, for those who work with Emacs/SLIME/Sly, do you use org-mode for things like documentation, project management, writing/capturing TODOs for the code you are writing, and so on?
[17:00:05] *** Joins: patrice (~patrice@user/patrice)
[17:00:10] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[17:00:10] <jackdaniel> some do some do not. David O'Toole wrote a few posts about literate programming with org mode and common lisp afair
[17:00:58] <Jing> Thank you. Will check out
[17:04:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:09:07] <holycow> pjb: thanks for the link.
[17:10:35] <pjb> Still, it's good to know about tools such as buildapp or cl-launch; in simple cases they can help.
[17:10:47] *** Quits: sterni (~lukas@2a01:4f8:151:54d0::) (Changing host)
[17:10:47] *** Joins: sterni (~lukas@user/sterni)
[17:11:29] *** Quits: yewscion (~yewscion@2604:ca00:14c:20f5::860:f1c3) (Ping timeout: 268 seconds)
[17:11:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:11:56] <pjb> But for example, when I tried to use cl-launch for my scripts, I realized that it actually compiled them just like a program, losing the "scripting" aspect.  So eventually, I just gathered all my CL script into a single executable image, dispatching to them on argv[0] (with symlinks in ~/bin/).
[17:12:27] <pjb> Each tool has its best application situation, and you're not necessarily in this situation.
[17:12:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:20:30] <holycow> the thing about that ycombinator post is that, while true, python is not exactly perfect either.  that environment is a kind of 'bare minimum optimum' that just happened to have enough scale to get it to that point
[17:20:44] <pjb> Jing_: note that what this hn comment mentions, being able to write in CL libraries usable by C programs (or other, thru a C API), is not a simple (technically) problem.
[17:21:05] <pjb> For example, try to write a library in python and use it in your C program! (or your CL program!)
[17:21:41] <pjb> Jing_: the problem is that dynamic languages with a garbage collector use a heap and objects that are not stored and managed like C (memory) objects.
[17:21:53] <pjb> There's what we call an impedance mismatch.
[17:22:26] <pjb> Already to call functions from one language, we have to convert the data, from C "types" to CL (or python) objects, and vice-versa.
[17:22:36] <Jing> pjb: Thank you. TIL
[17:22:40] <pjb> Then there's the problem of conditions, or exceptions, or error handling.
[17:23:58] <pjb> And of course, thread handling.  The various languages may have different views about how to handle thread, thread data, (unix) signals, etc.
[17:24:45] <pjb> So, yes, implementations could try to make it easier. I'm not sure it is really an essential features, that it would really increase the adoption of CL.
[17:25:29] <pjb> I mean, if that was really needed, we'd see half a dozen libraries deployed with libecl to be used in C programs.
[17:28:41] *** Quits: Jing_ (~jing@115.207.53.33) ()
[17:33:04] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Ping timeout: 268 seconds)
[17:35:24] *** Joins: silasfox (~sbv@p200300fb27055fee8dc5d1c492ffbbde.dip0.t-ipconnect.de)
[17:35:41] <hexology> does anyone know of a document that explains what `require` is and what a "module" is? i don't see a glossary entry in the hyperspec for "module". i know that an asdf "module" is more or less how a directory is represented in a system, but it's not clear to me what a "module" is outside of the specific context of asdf systems
[17:36:32] *** Joins: yewscion (~yewscion@2604:ca00:14c:20f5::860:f1c3)
[17:37:12] <holycow> someone did a noob writeup that includes that
[17:37:16] <holycow> let me see if i can find it
[17:37:51] <hexology> that would be great
[17:38:20] <hexology> also, possibly an easier question: is `import` similar to putting `:use` in `defpackage`?
[17:39:39] <jackdaniel> hexology: module in asdf is not the same thing as require/module in common lisp
[17:40:12] <beach> hexology: USE-PACKAGE is the function version of the :USE option.
[17:40:50] <_death> https://web.archive.org/web/20171127051637/http://www.weitz.de/packages.html
[17:41:02] <holycow> https://ashok-khanna.medium.com/an-introduction-to-lisp-packages-7a9ee352006e
[17:41:06] <jackdaniel> the latter is deprecated in the standard and is a precursor of what asdf calls "system". i.e the implementation may package optional libraries for use - in order to load them you must either know where to find it, or use (require :sb-posix)
[17:41:17] <jackdaniel> for imaginary module that is named :sb-posix :)
[17:41:22] <holycow> look for ashoks posts on reddit, he did a bunch of writeups on learning lisp
[17:41:57] <jackdaniel> there is also a provide operator (as something complementary to require)
[17:43:10] <fitzsim> hexology: I found this one really helpful in explaining various terms: https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/
[17:43:21] <fitzsim> hexology: https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/#s35-recap is a nice summary
[17:51:40] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[17:52:48] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[17:54:03] <hexology> jackdaniel beach _death fitzsim thanks all!
[17:54:15] <beach> Pleasure.
[17:54:34] <fitzsim> np, good luck!
[17:54:36] <hexology> i didn't realize require was actually _deprecated_. indeed i only knew about require and modules from the sbcl docs
[17:54:54] <hexology> and useful to know that an asdf module is not the same as a spec module
[17:55:03] <fitzsim> it's still sometimes needed to bootstrap asdf itself though
[17:55:28] <fitzsim> I couldn't find a way around using require in https://git.sr.ht/~fitzsim/cl-starter-script
[17:56:16] <beach> fitzsim: For SICL, I was able to program ASDF so that it can run in the host, but load files into the target environment.
[17:56:26] <hexology> i searched for "author:ashok" in r/common_lisp and didn't find anything. got any links to threads?
[17:58:00] <jackdaniel> sure
[17:58:08] <fitzsim> beach: https://git.sr.ht/~fitzsim/cl-starter-script/blob/main/start.lisp
[17:58:33] <fitzsim> beach: ISTR needing that (cl:require "asdf") line, maybe for CLISP?
[17:58:41] <fitzsim> beach: interesting re host/target
[17:59:23] *** Joins: srhm (~srhm@user/srhm)
[17:59:25] <beach> I take your word for it.
[17:59:30] <fitzsim> ASDF/UIOP as packages are unique in that they're designed to be baked into the Lisp implementation, AIUI
[18:00:26] <beach> Maybe so, and I believe I can use ASDF to load ASDF into SICL.
[18:00:43] <fitzsim> yeah, makes sense for ASDF upgrades
[18:00:49] <jackdaniel> actually uiop has a schisofrenia - on one hand asdf depends on it, so it is expected to be on the system, on the other it claims to be a library
[18:00:51] <fitzsim> ASDF has lots of logic to support that
[18:01:03] <jackdaniel> so you need to download the "new" uiop manually if you want to replace the backed version
[18:01:27] <jackdaniel> (because asdf always find it, so i.e quicklisp doesn't feel that it needs to download it)
[18:02:10] <fitzsim> ah, darn
[18:02:30] <fitzsim> I also with that UIOP had more OS features, something like explicit knowledge of symlinks
[18:02:48] <fitzsim> it's an extremely difficult portability problem to add those though
[18:02:49] *** Quits: Jing (~textual@103.121.208.52) (Quit: Textual IRC Client: www.textualapp.com)
[18:03:35] <fitzsim> I looked at fare's analysis of truename vs symlinks, etc. once, and.. phew, I got lost pretty fast
[18:03:45] <fitzsim> s/also with/also wish/
[18:05:03] <jackdaniel> fitzsim: uiop plays catch with implementation-specific interpretation of the spec vs posix. for a truly portable solution osicat for posix should be used
[18:05:41] <fitzsim> yeah, but I wish implementations would subsume osicat under UIOP
[18:05:41] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[18:05:41] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[18:06:19] <fitzsim> someone here pointed out that osicat pulls in native code, so it can't live standalone portably
[18:06:39] <fitzsim> but within a given implementation native code is usually fine/expected
[18:07:30] <fitzsim> as things stand now, it's not possible to do useful file system traversal with just UIOP, because it doesn't handle symlinks portably
[18:08:18] *** Joins: igemnace (~ian@user/igemnace)
[18:08:20] <jackdaniel> sure. there is a catch though: lets imagine that implementers all agree for one interpretation of the spec and change functions like truename, directory etc
[18:08:53] <jackdaniel> voila, uiop (and other portability libararies that stitch these interfaces) break, because they assumes that ecl will behave like ecl, ccl like ccl etc
[18:09:52] <fitzsim> agreed, it's a big co-ordination problem
[18:10:16] <jackdaniel> fwiw sbcl already provides sb-posix module
[18:10:18] <fitzsim> but everything could be migrated there, with co-ordination
[18:10:53] <fitzsim> yeah, sb-posix handles symlinks in a way that makes sense to me
[18:11:17] <fitzsim> I have a bug report about this where I listed many implementations' behaviour
[18:11:35] <jackdaniel> unifying behavior even at a cost of a few portability layers is not a bad idea between major releases; still I doubt that things won't break wonderfully (i.e will never be updated because libs have no maintainers)
[18:12:39] <fitzsim> yeah, agreed; UIOP already has lots of checks, including some implementation-version checks, as I remember
[18:13:56] <jackdaniel> I'm not very amused with uiop -it gave me quite a few headaches, but I'm in minority :)
[18:14:45] * mfiano fits in that minority
[18:16:35] <fitzsim> https://gitlab.common-lisp.net/asdf/asdf/-/issues/65#note_7847
[18:17:21] <fitzsim> that's a minimal test case, mkdir /tmp/dir; ln -s . /tmp/dir/subdir
[18:17:46] <semz> I suspect more that most people just never had to deal with the nastier parts of ASDF/UIOP so they don't have a strong opinion.
[18:18:09] <fitzsim> jackdaniel: yeah, me too, that's what inspired me to file that ASDF bug report
[18:21:15] <mfiano> I dislike a lot of design choices, such as uiop:argv0 assuming an image was dumped using uiop; if not, it will fail, and one should use the raw-command-line-arguments function.
[18:22:37] <fitzsim> mfiano: for that you can wrap the Lisp invocation with: export __CL_ARGV0="$0"
[18:22:44] <mfiano> as such uiop:command-line-arguments will also fail if uiop:*image-dumped-p* is nil due to dumping with the implementation's interface or another wrapper.
[18:22:49] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[18:23:05] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[18:23:16] <mfiano> Right you can do a lot of things, but it's just counter-intuitive and not documented; you're forced to read the code after something is broken.
[18:23:40] <fitzsim> yes, I read the code to discover __CL_ARGV0
[18:23:55] <fitzsim> could be better-documented
[18:24:01] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[18:25:06] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[18:25:14] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[18:26:35] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[18:27:18] *** Joins: johnjay (~pi@192.142.100.50)
[18:32:48] <mfiano> How do I leave a memo for someone with one of the bots again?
[18:33:12] <White_Flame> I usually PM them with "help"
[18:33:22] <mfiano> I dont know which bot it was
[18:33:26] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[18:33:27] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[18:33:28] <White_Flame> and yeah, was just about to mention that :)
[18:33:43] <jackdaniel> Colleen: tell mfiano something interesting
[18:33:44] <Colleen> mfiano: Unknown command. Possible matches: 8, time, set, say, mop, roll, get, search, login, grant,
[18:33:48] <jackdaniel> eh
[18:33:54] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 260 seconds)
[18:34:01] <jackdaniel> minion: memo for mfiano hey ho
[18:34:07] <minion> memo for mfiano hey ho: I can't be expected to work when CLiki doesn't respond to me, can I?
[18:34:16] * jackdaniel gives up
[18:34:21] <mfiano> heh
[18:35:54] *** Joins: domovod (~domovod@176.196.122.197)
[18:36:25] <beach> minion: memo for mfiano: This is for i
[18:36:25] <minion> Remembered. I'll tell mfiano when he/she/it next speaks.
[18:36:32] <beach> *for minion
[18:36:42] <beach> ::notify mfiano this is Colleen
[18:36:42] <Colleen> beach: Got it. I'll let mfiano know as soon as possible.
[18:36:47] <mfiano> Thanks
[18:36:47] <Colleen> mfiano: beach said 5 seconds ago: this is Colleen
[18:36:47] <minion> mfiano, memo from beach: This is for i
[18:38:33] <mfiano> ::notify pillton You might find this thesis interesting; a more thorough explanation of the SDfF propagation network technique, which also uses the layering technique: https://www.cs.tufts.edu/~nr/cs257/archive/alexey-radul/phd-thesis.pdf
[18:38:33] <Colleen> mfiano: Got it. I'll let pillton know as soon as possible.
[18:39:03] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[18:44:19] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[18:49:40] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[18:51:10] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[18:55:12] *** mingus_ is now known as mingus
[19:00:44] *** Parts: McParen (~mcp@user/mcparen) ()
[19:04:35] <shka> i need clpm project examples
[19:16:18] <shka> or even better, video tutorial
[19:19:48] *** Quits: silasfox (~sbv@p200300fb27055fee8dc5d1c492ffbbde.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[19:23:47] *** Joins: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84)
[19:28:03] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[19:28:34] *** Joins: igemnace (~ian@user/igemnace)
[19:49:21] *** Quits: yewscion (~yewscion@2604:ca00:14c:20f5::860:f1c3) (Ping timeout: 268 seconds)
[19:49:59] *** Quits: amb007 (~a_bakic@57.33.83.79.rev.sfr.net) (Ping timeout: 268 seconds)
[19:51:04] *** Joins: amb007 (~a_bakic@70.87.95.79.rev.sfr.net)
[19:55:35] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[19:58:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[19:59:59] *** Joins: aeth (~aeth@user/aeth)
[20:01:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[20:03:34] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:07:13] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[20:07:18] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[20:15:14] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[20:15:14] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[20:15:59] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[20:18:54] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Ping timeout: 260 seconds)
[20:20:17] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[20:22:32] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[20:24:29] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[20:24:49] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[20:28:11] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[20:34:40] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:34:57] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[20:35:51] <Guest74> who knew the hardest part of implementing the sane network protocol would be making my scanner available over the network. still no luck.
[20:36:12] <Guest74> are there any lisp implementations of network discovery protocols?
[20:37:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:39:34] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[20:39:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[20:41:48] *** Joins: aeth (~aeth@user/aeth)
[20:43:23] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 260 seconds)
[20:43:23] *** Quits: amb007 (~a_bakic@70.87.95.79.rev.sfr.net) (Read error: Connection reset by peer)
[20:44:33] *** Joins: amb007 (~a_bakic@70.87.95.79.rev.sfr.net)
[20:45:11] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[20:47:50] *** Quits: amb007 (~a_bakic@70.87.95.79.rev.sfr.net) (Read error: Connection reset by peer)
[20:48:31] *** Joins: amb007 (~a_bakic@70.87.95.79.rev.sfr.net)
[20:50:25] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[20:52:31] *** Quits: amb007 (~a_bakic@70.87.95.79.rev.sfr.net) (Read error: Connection reset by peer)
[20:54:12] *** Joins: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr)
[20:54:41] *** Quits: mallkrampus (~mallkramp@185.203.219.12) (Ping timeout: 245 seconds)
[20:56:33] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[21:00:13] <pjb> hexology: a module is any body of code that can be located by REQUIRE, and that calls PROVIDE once it's loaded.
[21:00:34] <pjb> hexology: since you can pass a pathname to REQUIRE, it can be any lisp file that calls PROVIDE.
[21:05:12] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[21:09:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:12:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:12:36] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 268 seconds)
[21:14:59] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:18:47] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[21:20:04] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[21:21:30] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 260 seconds)
[21:21:53] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[21:22:16] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[21:35:38] *** Joins: paule32 (~paule32@user/paule32)
[21:36:22] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:bc44:afc4:50a0:6ab8) (Ping timeout: 260 seconds)
[21:37:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9dc4:877c:4cec:30b6)
[21:39:04] *** Joins: dra (~dra@2a04:4540:6415:8400:2de7:98e5:184c:b5e1)
[21:47:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dc4:877c:4cec:30b6) (Ping timeout: 268 seconds)
[21:48:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:04:13] *** Joins: silasfox (~user@p200300fb27055fee8dc5d1c492ffbbde.dip0.t-ipconnect.de)
[22:04:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:10:32] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[22:10:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:20:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:20:51] <etimmons> shka: Two of my public projects that use clpm are <https://gitlab.common-lisp.net/cl-tar/cl-tar-file> and <https://gitlab.common-lisp.net/cl-tar/cl-tar>
[22:21:32] <shka> etimmons: thanks
[22:22:40] <shka> etimmons: one link pasted two times?
[22:23:34] <etimmons> shka: No, one has -file at the end (on my end at least)
[22:23:42] <shka> oh, right
[22:24:11] <shka> what i really need is some video tutorial explaining how to use clpm in the interactive manner, during development
[22:24:23] <shka> i can read up about bundles
[22:24:34] <shka> but what eludes me is what are the contexts
[22:24:39] <shka> and what is the purpose of those
[22:26:45] <shka> also, those (:asd ...) lines are a little bit involved i guess
[22:27:09] <shka> but i guess required
[22:27:17] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:27:28] <etimmons> a context is a set of explicit constraints, paired with a complete dependency graph that satisfies those constraints (and all implicit constraints)
[22:28:11] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9)
[22:28:25] <etimmons> So an explicit constraint is a dependency on foo. Then the context will include all of foo's deps (recursively) and pin them to specific versions
[22:28:47] <etimmons> there are global contexts and project-local contexts
[22:28:56] <shka> ok, what about the implicit dependencies, let's say i am using something which uses drakma
[22:29:04] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9) (Read error: No route to host)
[22:29:21] <shka> and said project also has the clpmfile, specifies version of drakma and so one
[22:29:44] <shka> but one day i decide that i want drakma, and I specify a newer version in my own clpmfile?
[22:29:48] <etimmons> I've been calling the project-local ones bundles. Global contexts are more akin to a global Quicklisp folder
[22:30:49] <etimmons> Ah, your project's clpmfile completely ignores the clpmfile in any of your dependencies
[22:31:15] <shka> so I MUST specify explicit versions of each and every library in the project?
[22:31:16] <etimmons> And relies only on the dependency information that can be extracted from the .asd files
[22:31:18] <etimmons> no
[22:31:33] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 268 seconds)
[22:31:43] <shka> ok, so it fallbacks to whatever is in the quicklisp?
[22:32:37] <etimmons> I was just working on this the other day with a coworker. He wrote this up: it'd be good to know if it clears anything up for you <https://gitlab.common-lisp.net/clpm/clpm/-/merge_requests/16>
[22:32:48] <etimmons> Still some wordsmithing to do, but the main ideas are there
[22:33:09] *** Joins: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de)
[22:33:31] <etimmons> In a perfect world your clpmfile would only ever contain sources (where you want to get dependencies from) and `:asd` directives
[22:34:38] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9) (Ping timeout: 268 seconds)
[22:34:44] <shka> ok, i get that, but i am trying to figure out if this information is somehow propagated between dependencies
[22:34:55] <shka> and the answer is: "no"
[22:35:16] <etimmons> clpm then would analyze your asd file to find your direct dependencies. It then uses whatever sources you provided (likely QL) to extract their dependencies, and so on
[22:35:30] <shka> yeah, got it
[22:36:13] <shka> it's fine, i wish that there would be mechanism to inherit version requirements
[22:36:33] <etimmons> ASDF provides that
[22:36:37] <shka> and perhaps raise some condition when there is conflicting version requirements
[22:36:51] <shka> oh, asdf allows to specify version required?
[22:36:55] <etimmons> yes
[22:37:06] <etimmons> Currently it only supports >= constraints
[22:37:11] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:3a97:eaba:c01a:d700)
[22:37:31] <etimmons> But the next release will likely expand upon that (and expand the version string grammar to allow prerelease information)
[22:37:47] <shka> ok, got it
[22:38:05] <shka> what is the difference between "system" and "project"?
[22:38:14] <etimmons> So, at the moment, if you really need to cap the version you can do that in your clpmfile. But any caps from your dependencies won't be inherited
[22:38:15] <shka> i know what system is
[22:38:21] <shka> not sure about the project
[22:38:57] *** Quits: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[22:39:17] <etimmons> I'd like to add a command, however, that analyzes the clpmfiles of your dependencies and makes recommendations. So it could suggest capping versions or using something straight from a git repo if one of your deps does
[22:39:26] <shka> etimmons: i hoped that it will be possible to specify hash of a commit, or a git tag, but yeah, it does make sense
[22:39:58] *** Joins: rgherdt (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf)
[22:40:05] <etimmons> Project is a collection of systems that are developed together. In my mental model, a project corresponds to a single repo
[22:40:15] <shka> ok, got it
[22:40:45] <shka> so the thing is, i don't have to specify source of each system, only those that i feel like it
[22:40:57] <shka> because, for instance, i need a specific version or something
[22:41:43] <shka> because i am using deprecated features or the system is absent in the quicklisp repo
[22:41:46] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 245 seconds)
[22:41:49] <etimmons> You can specify something like a git tag if you're cloning directly from git. Next version of clpm will change how those are expressed in the clpmfile a little bit, but not too much.
[22:41:57] <etimmons> Correct
[22:42:10] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:b404:1605:26dd:223b)
[22:42:47] <shka> yeah, this makes sense to me, though "source" and "version" sure can be mixed up
[22:43:04] <etimmons> In the clpmfiles I linked you'll see a lot of :system directives that really shouldn't be there, but are unfortunately necessary for the moment
[22:43:08] <shka> but not all libraries have a proper versions anyway
[22:43:35] <shka> ... not even those i make
[22:43:45] <shka> i probably should fix that
[22:43:47] <etimmons> For some reason, QL's metadata is inaccurate for 40ants-doc-full. I haven't figured out why yet
[22:44:43] <etimmons> Yeah, some projects keep very good version numbers and changelogs, but the vast majority don't
[22:44:55] <shka> i am part of the problem :(
[22:45:02] <etimmons> It's kind of hard to motivate yourself to do it, though, if there's no tool that really depends on it
[22:45:07] *** Quits: rgherdt (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf) (Ping timeout: 268 seconds)
[22:45:36] <shka> well, now it kinda is
[22:46:02] <etimmons> If you use Gitlab for your development, I've been working on a set of CI scripts that might help a bit.
[22:46:20] <shka> nah, i am using github
[22:46:34] <shka> and i will take care of that in the old fashioned way
[22:46:42] <etimmons> It fails the build if you push a tag without a changelog. And QL can be configured to only pull from tags
[22:46:48] <shka> i will add proper version numbers and tag releases
[22:48:51] *** Joins: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de)
[22:49:17] <shka> etimmons: ql client, right?
[22:49:26] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:b404:1605:26dd:223b) (Ping timeout: 268 seconds)
[22:50:05] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf)
[22:53:22] *** Quits: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[22:53:22] *** Quits: cosimone (~user@93-47-228-135.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[22:54:18] <etimmons> shka: quicklisp-projects. Compare <https://github.com/quicklisp/quicklisp-projects/blob/master/projects/hunchentoot/source.txt> with <https://github.com/quicklisp/quicklisp-projects/blob/master/projects/caveman/source.txt>
[22:54:46] <shka> ok, that's great
[22:54:52] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf) (Remote host closed the connection)
[22:55:08] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf)
[22:55:14] <etimmons> hunchentoot is fetched from github tags (IIUC), while caveman is pulled from the latest commit to the default branch
[22:55:44] <shka> yeah, great, i usually want just freshest release on main anyway
[22:57:12] *** Joins: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:b404:1605:26dd:223b)
[23:00:02] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf) (Read error: Connection reset by peer)
[23:00:26] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[23:01:04] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf)
[23:04:13] *** Quits: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:b404:1605:26dd:223b) (Ping timeout: 268 seconds)
[23:08:06] *** Quits: raeda_ (~raeda@72.49.219.33) (Quit: Leaving)
[23:10:38] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[23:12:04] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[23:15:54] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:16:12] *** Joins: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9)
[23:16:17] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:16:26] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[23:17:25] *** Server sets mode: +Ccntz 
[23:19:00] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[23:19:02] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:c215:e34c:ccd9:6a14:6caf) (Ping timeout: 268 seconds)
[23:28:54] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[23:29:00] <lisp123> hmmm is there a way to "save" the last REPL command to the end of a file?
[23:29:15] <lisp123> that way I can code in the REPL and keep the commands that work
[23:29:24] <shka> mmm, let's think
[23:30:08] <lisp123> I could probably write one I guess...unless somebody did it before already :D (I'm thinking more in the case of tests not main code)
[23:30:08] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[23:30:45] *** Quits: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9) (Ping timeout: 268 seconds)
[23:31:15] <shka> lisp123: i think that you can make broadcasting stream and bind it to standard-input, just let me check if this works
[23:31:48] *** Quits: caret (~caret@24-116-7-78.cpe.sparklight.net) (Read error: Connection reset by peer)
[23:32:05] <_death> there were some attempts for persistent history.. I remember https://github.com/vseloved/flight-recorder
[23:32:17] <lisp123> shka: Thanks! That would be great. I was going to go down the slime/swank route to get last command and then write to file
[23:32:28] <shka> lisp123: nah, this won't work, sadly
[23:33:33] <shka> you would have to decorate *standard-input* which is  a little bit involved
[23:33:35] <lisp123> _death: Thanks, will have a look at Flight Recorder
[23:33:51] <shka> in emacs slime there is slime-scratch
[23:34:17] <shka> which is other way to achieve the same thing
[23:34:26] <lisp123> shka: Yeah its pretty trivial to do in slime, there's a command (need to look it up again)
[23:34:54] <lisp123> I guess I will whip it up (have a global variable *file-to-save* and then do (save-last) to save the last command to that file
[23:36:17] <lisp123> flight recorder seems a bit advanced for my needs
[23:36:51] <lisp123> (it will prove useful later for sure, the idea is very good)
[23:40:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[23:41:34] <lisp123> I will report back - have a good idea -> (i) evaluate a function in the REPL, if you like the output you see, then have a command that is like (save-test) which staples the command together with the result into a unit test for the future
[23:43:37] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[23:47:08] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[23:49:20] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Remote host closed the connection)
[23:51:51] <shka> etimmons: how can i make something like local-projects? i have a bunch of repositories clones that i want to develop together
[23:51:59] <shka> should i simply edit context file?
[23:53:05] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[23:56:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:59:27] <pjb> shka: (push #P"~/something/like/local-project/" ql:*LOCAL-PROJECT-DIRECTORIES*)
[23:59:53] <shka> pjb: nice, but now i don't have quickload installed
[23:59:58] <shka> or rather
