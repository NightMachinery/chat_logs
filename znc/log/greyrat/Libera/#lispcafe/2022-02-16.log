[00:02:49] <selwyn> it seems that discord went down for half an hour without me noticing
[00:03:01] <selwyn> this is great progress in me not procrastinating
[00:12:35] <shka> it is just AABB
[00:12:44] <shka> but i am not good with geometry 
[00:12:45] <shka> at all
[00:15:50] <selwyn> lol
[00:16:04] <selwyn> doesnt it get taught as a school subject where you are from
[00:16:27] <selwyn> anyway, i am not good at it either, unless possibly if it is of the differential form
[00:20:28] <shka> selwyn: school was a long time a go
[00:27:32] <gilberth> shka: Do you need the intersection point? Or just the information whether there is an intersection at all?
[00:27:48] <shka> just intersection at all
[00:28:27] <gilberth> Then find out, if the two end points lie on different sides of the half-plane.
[00:28:52] <shka> did i mention that i am terrible at geometry?
[00:31:52] <gilberth> Did I mention that my calculus is rusty?
[00:32:39] <shka> did i ever gave you a calculus problem? :D
[00:32:50] <gilberth> Aehm. No.
[00:34:20] <gilberth> IIRC you look at the cross product.
[00:34:49] <selwyn> for the half plane?
[00:34:52] <gilberth> Between the normal vector and the point vertex. The sign should tell you on which side you are.
[00:35:16] <shka> this is just AABB
[00:35:18] <shka> gosh
[00:35:23] <gilberth> selwyn: I believe so. But: My 3d is rusty, has been a long time I actually did some 3d.
[00:35:29] <shka> this should be trivial IIRC
[00:37:36] <selwyn> gilberth: the sign of the dot product between the point and the normal vector of a plane through the origin tells you what side of the plane you are on
[00:37:54] <selwyn> not half plane or cross product
[00:38:56] <selwyn> shka: compute the intersections of the ray with the six planes that make up the box
[00:38:56] <gilberth> Dot product, you say? Gosh, I am rusty indeed. And yes I meant the normal vector, as I see the plane defined by its normal vector.
[00:39:09] <selwyn> because those planes are axis aligned, it is not a hard calculation
[00:39:43] <shka> i think that's mfiano is doing in his code, but somehow i am doing this wrong i think
[00:39:43] <selwyn> then figure out if any of the intersection points lie within the sides of the box
[00:39:57] <selwyn> there must be a way to save work though
[00:40:54] <gilberth> And when I said half-plane, I meant half the 3d-space as a plane cuts the space in two halfes, one inside and one outside. It might not be the correct term. A polyeder is the intersection of a bunch of those.
[00:40:59] <selwyn> you actually only have to check five out of the six sides, since a ray that enters the box must leave it somewhere else
[00:41:11] <selwyn> you can't do four or fewer though
[00:41:26] <selwyn> gilberth: oh ok
[00:42:13] <selwyn> i am not sure what the correct term is either
[00:42:29] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[00:42:59] <gilberth> In German we say "Halbraum" half-space. A line in 2d is that, too.
[00:43:28] <selwyn> i've seen half plane used before to denote {(x,y):x<0}
[00:44:49] <gilberth> Which is the same concept, isn't it? The open "half-space" defined by the vertical line through the origin.
[00:45:08] <selwyn> yes
[00:45:18] <selwyn> it seems that half space is a generalisation of that concept
[00:46:18] <gilberth> Ah, ok. So {(x,y): ax + by < c} wouldn't be a half-plane?
[00:46:59] <selwyn> yes it is
[00:47:26] <selwyn> much more common to see expressions like 'the lower half plane' used in complex analysis
[00:47:39] <gilberth> So what is the generalisation then? The n dimensions?
[00:47:48] <selwyn> oh right
[00:47:56] <selwyn> yes, that is what i meant by generalisation
[00:48:06] <selwyn> the generalisation to higher dimensions
[00:48:41] <gilberth> This makes perfect sense. Half the space in 2d is half a plane, as the space is a plane.
[00:50:14] <gilberth> Though I am used to use the term plane also for n-dimensional spaces, denoting an (n-1)-dimensional "flat" thing cutting the space in two.
[00:50:30] <hayley> Good morning everyone!
[00:50:36] <selwyn> well, that is the definition of a plane
[00:50:55] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[00:51:02] <selwyn> uh
[00:51:16] <selwyn> actually, that is a hyperplane
[00:51:53] <gilberth> Then my teachers dropped the "hyper" part. ;-)
[00:51:56] <selwyn> a plane is simply the 'flat' thing in three dimensions, or the whole flat two dimensional space
[00:52:14] <selwyn> good morning hayley
[00:54:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:54:26] <gilberth> But it's always a bit awkward for me as I was taught the German terms for mathematical things. :-/
[00:54:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:01:08] <selwyn> hyperplanes are kernels of non-trivial linear maps onto the real numbers
[01:01:24] <shka> nerds...
[01:01:24] <aeth> I guess German, French, and Russian all have their own mathematical language
[01:01:41] <aeth> Because math was largely formalized before the world standardized on English, unlike e.g. comp sci
[01:02:09] <aeth> in fact, I think most key math was done in a language other than English
[01:02:22] <selwyn> different areas were done in different languages
[01:02:30] <aeth> going back to the Greeks
[01:02:45] <selwyn> probability theory was finally formalised in the 1930s in russia
[01:02:46] <aeth> math is an unusual subject because the Greek stuff didn't get obsoleted, unlike science
[01:03:17] <selwyn> most classical analysis was done in french i think
[01:03:39] <selwyn> german is more of a physics language, though that covers much applied maths
[01:04:27] <aeth> Euler, though
[01:04:30] <aeth> did he write his work in German?
[01:04:58] <aeth> Swiss working for the Russians and Prussians...
[01:05:04] <selwyn> i guess you have *some* medieval algebra done in italy, though i don't know if they did it in latin or not
[01:05:29] <aeth> well, in the Renaissance and early modern period, I wouldn't be surprised if they were using Latin translations of the Greek classics.
[01:05:37] <aeth> stuff like Aristotelian logic and Euclid's elements
[01:05:50] <aeth> algebra obviously comes from the Arabs via Spain
[01:06:02] <aeth> (obviously because "al-")
[01:06:49] <selwyn> in medieval italy they had angry letter exchanges and public duels over who could solve the cubic
[01:07:10] <selwyn> so i assume at least some of it was in vernacular language
[01:07:27] <hayley> Hm, /me forgot that SBCL has SAVE-LISP-AND-DIE. So a MPS or MMTk port has to be able to dump its heap.
[01:07:40] <gilberth> I once attended a CS lecture given by a teacher, who was crazy about the German language, and translated every term to German. And as you usually don't do that in German, the text book --- although it talked about all things I already knew --- was hard to read, as you constantly needed to guess what terms the author meant.
[01:07:46] <hayley> The heap also better be mapped in the same place, which should be feasible enough. 
[01:07:54] <selwyn> aeth: idk, i mean why would you translate it into latin instead of simply learning greek
[01:07:55] <aeth> selwyn: I thought Dante (1265-1321) wrote the first major vernacular work in Italy, while academia was using Latin in parts even in the 19th century.
[01:08:16] <aeth> selwyn: in the Middle Ages, Latin was the academic language even though it was dead as a spoken language
[01:08:17] <selwyn> there is some three times the amount of ancient greek literature as there is latin iirc
[01:08:45] <aeth> I wouldn't be surprised if there's more Latin than Greek literature when you take the medieval west into account
[01:08:50] <selwyn> oh, right
[01:08:56] <selwyn> well, possibly, yeah
[01:09:16] <selwyn> i would guess they would just expect everyone to learn greek as well as latin, but i don't actually know
[01:09:31] <aeth> technically, some academic work is still done in Latin... classicist work. Like, if you write a preface to a Latin book, you can just write it in Latin instead of having to translate it
[01:09:34] <selwyn> in prussia, they prioritised ancient greek over latin
[01:09:44] <selwyn> because the prussians saw themselves as spartans
[01:10:00] <selwyn> or at least, they idolised it
[01:10:02] <gilberth> Even simple terms like "mouse" where translated into technical terms like "Rolleingabegerät" literally "rolling input device". This was silly, nobody says "Rolleingabegerät". And it's even wrong these days, mice don't have balls anymore.
[01:10:13] <aeth> selwyn: the word you're looking for is philhellenism. https://en.wikipedia.org/wiki/Philhellenism
[01:10:37] <aeth> peak philhellenism was in the 19th century when a bunch of Europeans volunteered in the Greek War of Independence
[01:10:47] <aeth> the most notable casualty was Lord Byron
[01:12:25] <aeth> seems to be very late. 1800s.
[01:12:56] <selwyn> yes
[01:13:04] <aeth> e.g. Greek-accurate neoclassical architecture. https://en.wikipedia.org/wiki/Greek_Revival_architecture
[01:13:08] <selwyn> i think the prussians idolised sparta in particular though
[01:13:11] *** Joins: eugercek (~user@user/eugercek)
[01:13:12] <selwyn> warrior ideal and all
[01:13:26] <shka> ok, got it
[01:13:29] <shka> https://gdbooks.gitbooks.io/3dcollisions/content/Chapter3/raycast_aabb.html
[01:13:31] -ixelp- Against AABB · 3DCollisions
[01:13:41] <shka> mfiano: you have error in your raycast
[01:13:50] <aeth> selwyn: does seem to have had a strong influence on Germany
[01:14:14] <aeth> e.g. https://en.wikipedia.org/wiki/File:2016_-_Regensburg_(28223191375).jpg
[01:14:17] <aeth> or most famously https://en.wikipedia.org/wiki/File:Berlin_-_0266_-_16052015_-_Brandenburger_Tor.jpg
[01:14:26] <aeth> (Brandenburg Gate)
[01:14:49] <aeth> a bit weird because the Greeks never went there
[01:15:22] <selwyn> well, berlin is peak prussia
[01:15:35] <gilberth> selwyn: There are still schools in Germany at which Latin is the first foreign language and ancient Greek is the second or third.
[01:15:58] <aeth> Hitler (actually, his architect, Albert Speer) wanted to basically make all of Berlin look like the Brandenburg Gate.
[01:16:13] <selwyn> latin and greek were my second and third foreign languages
[01:16:37] <aeth> I took Latin in high school. Didn't have a spoken component and was mostly memorizing tables.
[01:16:46] <gilberth> My second was Latin and I regret not having picked French instead.
[01:17:21] <aeth> Having taken 5 years of Latin in high school (yes, high school is 4 years so I started Latin a year early), I don't really regret not studying French. Romance languages come easy.
[01:17:36] <selwyn> from my perspective the future of latin will be decided in the usa
[01:17:38] <aeth> Romance languages are basically grammatically simplified Latin (just simplified in different ways)
[01:18:15] <selwyn> the classics are in such decline in uk and ridden with embarrassing illiteracy
[01:18:42] <selwyn> lots of scholars can't really read latin fluently
[01:19:24] <aeth> in the Anglosphere, the classics in the literal sense (actual classic works) and classical music (only... idk... 1000 years after the classical era) both have an elitist/wealthy connotation that's not universal everywhere.
[01:19:30] <gilberth> Well, I could see that from an English perspective as the Latin grammar works a bit different. I didn't learn too much about grammar as German grammar is as complicated and I had an excellent German teacher who actually taught grammar. So Latin didn't help me with Russian, which I learned later, but my German classes did.
[01:19:31] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[01:20:18] <aeth> Latin helps more for English-first education because they don't teach English grammar well
[01:20:26] <aeth> so a lot of Latin grammar actually teaches you the English grammar first
[01:20:26] <selwyn> yes
[01:20:32] *** Joins: eugercek (~user@user/eugercek)
[01:20:33] <selwyn> well
[01:20:50] <gilberth> And the argument for picking Latin over French (which was the choice we had) was that learning Latin would teach you grammar proper and making it easier to pick up any other indo-germanic language.
[01:20:52] <aeth> at least, in the US, idk about England
[01:21:15] <aeth> there's like one year of grammar in American English education in elementary school very early on and it's mostly just diagramming sentences or something
[01:21:25] <aeth> making some weird tree out of them
[01:21:40] <selwyn> i was taught that latin grammar is 'grammar' and gloss over the fact that english does, in fact, have its own grammar which is different from other languages
[01:22:15] <aeth> gilberth: probably an American argument translated into German
[01:22:23] <aeth> absolutely true in the US
[01:22:24] <selwyn> they have started to teach english grammar in primary school here now but it is awful
[01:22:27] <gilberth> selwyn: To be fair, my German teacher was more the exception than the norm. He also thought me orthography the hard way. One of those few teachers I am actually grateful for teaching me.
[01:23:15] <selwyn> as much as i like latin that is a terrible argument for latin
[01:23:51] <selwyn> you know what will help you learn another language even more than learning latin? learning a language that is actually spoken today
[01:24:25] <gilberth> I'd say you first have to learn your native language well.
[01:25:44] <aeth> selwyn: the way they're taught differs significantly, though
[01:25:47] <aeth> spoken languages are conversational
[01:25:52] <aeth> Latin is reading/writing
[01:25:54] <gilberth> But then you can't shock me with numerous cases or tenses. Like I find algebra way easier than calculus. My weak spot is the vocabulary, I have a mental blockade to memorizing things which are arbitrary and can be looked up.
[01:25:57] <selwyn> well yeah
[01:26:25] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:26:35] <selwyn> if you aren't speaking, then that's a transferable skill you aren't learning
[01:27:20] <gilberth> But then, never having been taught properly on English, I still struggle with English.
[01:27:58] <gilberth> My English classes at school were a bad joke. Very poor teacher.
[01:31:15] <gilberth> And I never talk in English.
[01:39:36] * hayley uploaded an image: (17KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/fhzvObbGTByHuHlRbXBIDnlk/rewrite-in-self.png >
[01:43:24] <Gnuxie> bruh
[01:43:27] <Gnuxie> oh
[01:43:45] <Gnuxie> i guess it's a Rustacean chat room
[01:44:20] <hayley> It was the Boston Lisp Meeting robin mentioned.
[01:44:47] <shka> i hear rust programmers chanting 
[01:44:52] <shka> "one of us, one of us"
[01:45:01] <hayley> https://www.youtube.com/watch?v=BAR-vuYXZB4
[01:45:01] -ixelp- Chant of the Ever Circling Skeletal Family (2016 Remaster) - YouTube
[01:45:34] <Gnuxie> bruh
[01:45:39] <hayley> shka: I get to pick between either broken and slow parallel GC, someone else's kinda slow GC, or someone else's Rust code.
[01:45:52] <shka> https://www.youtube.com/watch?v=GCWUT8wkWCI
[01:45:53] -ixelp- The Simpsons: One of Us - YouTube
[01:48:32] <shka> good nigh all
[01:48:36] <selwyn> goodnight
[01:55:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[01:55:24] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:57:09] *** Joins: aeth (~aeth@user/aeth)
[02:02:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[02:02:55] *** Joins: aeth (~aeth@user/aeth)
[02:05:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: Sorry, I need to scratch my left butt cheek.)
[02:08:57] <epony> you're really Rusty programmators ;-)
[02:10:40] <epony> the difference between lisp programmers in 2010 and rust programmers in 2020 is none, they are the same 2010 forum dwellers
[02:12:03] <epony> so.. don't even begin thinking they are something else that you're not.. same years same generation same capacity same doings
[02:12:40] <epony> you just envy their funding.. which is nothing to be jealous about
[02:14:04] <epony> check out how Perl and C++ are doing without funding
[02:14:33] <epony> now, start inventing reasons why Lisp is needed on 64bit computers
[02:14:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:15:46] <epony> (you can reuse these from the 32bit computers reasoning on the necessity for Lisp resumes, nothing changed in Lisp or computing that much)
[02:18:02] <epony> cause Rust is definitely NOT needed ;-)
[02:18:29] <epony> just make Lisp needed and you're set
[02:36:33] <robin> gilberth, do you eat corn in rows or in columns? :P (there's a weird math myth that algebraists eat by rows, analysts by columns or, according to https://bentilly.blogspot.com/2010/08/analysis-vs-algebra-predicts-eating.html , boustrephedon for algebraists and spirals for analysts...)
[02:36:35] -ixelp- Random Observations: Analysis vs Algebra predicts eating corn?
[02:42:12] <gilberth> robin: It's a very rare occasion that I eat corn, but when I do, I do in rows. Definitely.
[02:43:13] <White_Flame> is a row down the long length of the cob, or is it a ring around the cob?
[02:43:15] <hayley> idk, I have to cut off the edible part because biting into it would be bad for my false teeth.
[02:43:41] <gilberth> White_Flame: Down the long length. Not around.
[02:44:22] <gilberth> I would even eat from left to right and issue a CR/LF for the next row :-)
[02:46:43] <robin> hayley, i'd be surprised if mps couldn't dump the heap, given that lispworks has a SAVE-IMAGE function similar to SAVE-LISP-AND-DIE
[02:49:15] <hayley> LW uses MPS?
[02:50:54] <pl> pretty sure LW doesn't?
[02:51:28] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (*.net *.split)
[02:51:28] *** Quits: semz (~semz@user/semz) (*.net *.split)
[02:51:28] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (*.net *.split)
[02:51:28] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[02:53:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:53:47] *** Joins: semz (~semz@user/semz)
[02:53:47] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[02:53:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:53:47] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[02:54:44] <pl> in fact quick look suggests they implemented non-trivial bits in Lisp
[02:56:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[02:57:34] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:58:02] <gilberth> Interesting article about corn eating. A pity it's rare here to eat a corn cob, otherwise it would perhaps be a somewhat useful litmus test for a first date :-)
[02:59:10] <robin> hayley, hm, perhaps not, https://www.ravenbrook.com/project/mps/doc/2002-01-30/ismm2002-paper/ismm2002.html says mps was meant to "absorb" the memory managers of lispworks etc., not that lispworks actually uses it...
[02:59:11] -ixelp- The Memory Pool System: Thirty person-years of memory management development goes Open Source
[03:00:44] <pl> paper suggests it took experience and ideas from their various GC'd products and was originally targeted for Dylan to use?
[03:00:44] * hayley makes a MMTk shopping list
[03:01:10] <hayley> - SBCL threads have their own idea of what an allocation buffer should look like, and allocation is handled by VOPs which I'd have to rewrite to use another allocation buffer - SBCL has pseudo-atomic instead of inserting safe points for when you can actually GC, but I guess C can handle stopping the world and that'll handle pseudo-atomic - some object layouts are only parsable by C because Lisp code generates equivalent C struct definitions -
[03:01:10] <hayley> everything touching weak values and hash tables is going to be interesting, I think you can have arbitrary combinations of weak and strong keys and values in hash tables - current GC has list linearisation and I don't think any other library lets you do that
[03:01:46] <gilberth> Interesting CMUCL heritage then.
[03:02:26] <hayley> S-L-A-D also has to work, so we need to be able to place the heap at a given address too (I think).
[03:02:53] <hayley> Right.
[03:03:03] <hayley> Amusingly OpenDylan uses MPS on 32-bit platforms, and Boehm on 64-bit.
[03:03:09] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:03:39] *** Joins: Alfr (~Alfr@user/alfr)
[03:03:54] <pl> hayley: there was a relocatable patch for SBCL some time ago
[03:04:07] <pl> I used it on systems too invested in grsecurity to run otherwise
[03:04:34] * hayley looks through src/compiler/x86-64/alloc.lisp
[03:05:09] <hayley> Sure. In either case, I'd need to be able to copy out the heap.
[03:12:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[03:16:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[03:18:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:38:12] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[03:41:35] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:41:52] *** Joins: eugercek (~user@user/eugercek)
[03:42:06] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[03:45:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[03:47:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:51:50] *** Joins: Alfr (~Alfr@user/alfr)
[04:04:29] <clothespin> debugging.
[04:04:54] <clothespin> if my bugs only magically disappeared
[04:08:03] <clothespin> rather than debug I'm going to sing a song about debugging
[04:10:06] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:10:32] *** Joins: Alfr (~Alfr@user/alfr)
[04:14:39] <robin> it's surprisingly hard (for me) to find out whether opendylan even has a SAVE-LISP-AND-DIE-type function
[04:16:41] <clothespin> make it go to the tune of la cucuracha
[04:17:36] <robin> ...i suspect that means it probably doesn't
[04:18:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:24:17] <hayley> https://www.youtube.com/watch?v=Fdu1Tm-WwVs
[04:24:18] -ixelp- Baby's On Fire (Live At The Rainbow Theatre / 1974) - YouTube
[04:25:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:32:16] <robin> so far i'm failing to determine whether either mps or mmtk could easily suppors S-L-A-D
[04:32:21] <robin> support*
[04:32:33] <gilberth> Since when doesn't SBCL provide me with a backtrace?
[04:33:47] * gilberth and SBCL will never get friends.
[04:34:46] <GreaseMonkey> speaking of SBCL, i'm writing a lispoid-to-C transpiler and the backtraces i'm getting are now in lower-case
[04:34:51] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:35:17] <robin> gilberth, i eat corn the same way, algebraists eat in rows, QED ;)
[04:35:50] <gilberth> In lower case? Why is that? Your *print-case* setting broken?
[04:36:45] <moon-child> |*print-case*|, you mean
[04:37:12] <robin> though i'd need to have dinner with my old analysis prof to confirm
[04:37:58] <gilberth> robin: Well, I was very surprised by that article. The first half always was clear to. The latter not. But then we don't eat corn cubs often.
[04:39:07] <GreaseMonkey> yeah i set *print-case* via a let block
[04:40:56] <gilberth> moon-child: Brainwashed by Franz' modern case or what it is called? There was a time when people "fixed" all sorts of Lisp packages to cope with ACL's wrong case. I hated that, especially as I like use upper case for the constant parts in backquoted material. They could have adjusted their readtable-case.
[04:50:28] <robin> very commonly eaten in southern US, dunno about elsewhere except perhaps when khrushchev was running the USSR ;) (apparently US+china are responsible for >50% of global maize production, <10% grown in europe)
[04:50:29] <clothespin> i like modern mode
[04:50:40] <moon-child> tbf casefolding is dumb.  But trying to take casefolding out of cl is also dumb
[04:50:54] <aeth> I just (setf *print-case* :downcase)
[04:50:57] <aeth> "modern" enough for me
[04:51:01] <aeth> only a few edges where that won't work
[04:51:18] <moon-child> aeth: :downcase, not :invert?
[04:51:45] <aeth> that doesn't support invert unfortunately
[04:51:53] <aeth> at least in SBCL
[04:52:12] * gilberth likes CL's case as it is by default.
[04:52:14] <aeth> I do essentially invert everything with Airship Scheme
[04:52:16] <robin> i like case folding (ambivalent about uppercase-by-default), very convenient typographically for talking about lisp in english
[04:52:42] <moon-child> aeth: oh, print case, not read case, urp
[04:52:57] <gilberth> robin: Heh, that's true. ;-)
[04:53:51] <aeth> moon-child: unfortunately
[04:54:00] <aeth> idk why they include it in one but not the other
[04:54:06] <moon-child> gilberth: the problem is unicode
[04:54:49] <gilberth> moon-child: You want fancy characters in symbol names?
[04:54:51] <robin> although technically, symbols should have a locale attached to get turkish right ;) (i'm not sure what the unicode rules are actually, pretty sure there is a standard for case-folding along with lower- and uppercasing)
[04:55:12] <aeth> Turkish, German, and Greek are three cases where issues happen
[04:55:35] <aeth> ß <=> SS in German, Greek with the final sigma, and Turkish's different rule for i because it has two i's and i doesn't upcase to I
[04:55:38] <gilberth> Why would I want to use either of those languages with symbol names?
[04:55:41] <aeth> there are probably more
[04:56:06] <moon-child> well, you want those languages in strings, right?
[04:56:09] <moon-child> Do you want 
[04:56:14] <moon-child> INTERN to fail on certain inputs?
[04:56:57] <gilberth> Why should it fail? The culprit would be STRING-UPCASE then.
[04:56:58] <robin> final sigma's not so problematic imho (it is...final sigma after all), eszett is certainly another good example though
[04:57:13] <moon-child> well, sure
[04:57:58] <aeth> robin: If you include a capital sigma in Greek, you want final sigma; if you include it in something else, it's probably a symbol and you probably don't want final sigma even if it's at the end
[04:58:08] <gilberth> ß should never have gotten a code point for it is sz ligature. But that is another story and don't get me started on that.
[04:58:20] <aeth> (probably a symbol for summation in particular, but technically that has its own Unicode character)
[04:59:47] <aeth> robin: but, yes, the most problematic are ß and the Turkish i rules because the latter make it very clearly locale dependent out of necessity, and ß means that #\ß is a messy concept because "ß" becomes "SS"
[05:00:06] <gilberth> It's a pity that Greek is case-folded, otherwise we could use π and λ.
[05:00:26] <aeth> λ is great, but I just turn "lambda" into λ locally, via my Emacs configuration
[05:01:01] <gilberth> It gets interned as Λ, which looks odd.
[05:01:02] <aeth> It won't break the indentation of the program because properly styled lambdas won't have different indentation
[05:01:17] <aeth> one exception is "(lambda (foo\n<tab>bar"
[05:01:27] <aeth> but if you're going to have a lot of named variables, it shouldn't be a lambda
[05:01:47] <moon-child> this is the issue I'm getting at, though.  Unicode could change at any time and add new cases to old characters
[05:02:05] <gilberth> Wait a second, you made your Emacs to display "lambda" as "λ"?
[05:02:10] <aeth> yes
[05:02:24] <aeth> pretty-lambdada
[05:02:30] <gilberth> Does it also turn <= in ≤?
[05:02:32] <aeth> in the M-x package-list-packages
[05:02:33] <aeth> no
[05:02:39] <aeth> there's probably a package that does more things
[05:02:51] <robin> can it? i don't remember the stability rules for casing
[05:03:38] <moon-child> well, you can use yet-unassigned characters
[05:03:51] <moon-child> you are not supposed to do that, but there is no way to stop you
[05:04:07] <gilberth> I always find it a pity that ≤, ≥, ≠ and arrows never made it into ASCII. You find those character is many older character sets though.
[05:04:13] <robin> moon-child, ah, true
[05:04:27] <aeth> gilberth: yes, but those are the kinds of things you'd throw in as extras if the language didn't have é
[05:04:28] <moon-child> in particular, app X may use version N+1 of unicode, where C and C' are the same under casefolding, but if it sends data to app Y, which uses version N, Y will not think C and C' are the same
[05:04:36] <moon-child> so it is not a strictly academic concern
[05:07:04] <robin> i suppose variation selectors could help with sigma and turkish 'i', eszett would be more complicated though (oh, also dutch 'ij' i guess)
[05:16:22] <clothespin> gilberth: what's wrong with modern mode?
[05:17:13] <aeth> probably breaks code
[05:17:40] <aeth> I use an idiom to work around it, but many people just assume "FOO" as a literal in their symbol-related code
[05:17:45] <clothespin> it breaks code that assumes case insensitivity
[05:17:56] <aeth> my idiom is (symbol-name '#:foo)
[05:18:31] <clothespin> allegrograph is built in modern mode
[05:19:05] <aeth> something like e.g. (let ((x 'bar-)) (intern (concatenate 'string (symbol-name x) (symbol-name '#:foo))))
[05:19:29] <aeth> Or I guess more realistically... (let ((x 'bar)) (intern (format nil "~A-~A" x (symbol-name '#:foo))))
[05:19:41] <aeth> that's something that someone would shortcut as "FOO" if they don't care
[05:20:10] <clothespin> i don't think franz is worried about those people
[05:20:34] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 272 seconds)
[05:32:03] <aeth> apparently ඞ is in Unicode.
[05:32:20] <aeth> Among Us
[05:35:53] *** Joins: aeth_ (~aeth@user/aeth)
[05:36:04] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[05:36:09] *** aeth_ is now known as aeth
[05:37:51] <clothespin> ascii ruined everything
[05:37:52] *** Joins: Alfr (~Alfr@user/alfr)
[05:38:54] <hayley> https://www.youtube.com/watch?v=AVD5oJDuXTA
[05:38:55] -ixelp- Reinforcements - YouTube
[05:41:48] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 240 seconds)
[05:41:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[05:42:22] <hayley> "You have successfully confirmed your subscription request to the mailing list MPS-discussion, however final approval is required from the list moderator before you will be subscribed. Your request has been forwarded to the list moderator, and you will be notified of the moderator's decision." Ouch.
[05:42:25] <gilberth> Terrific, I use my (UNINTERN 'CL:OPTIMIZE :CL) (EXPORT (INTERN "OPTIMIZE" :CL) :CL) (PROCLAIM '(DECLARATION CL:OPTIMIZE)) trick, and when I say (REQUIRE :ASDF) I get an error that 68742355423 isn't an (UNSIGNED-BYTE 32). And as I have no backtrace, I can't say where that happens. Did I mention that SBCL and me don't get along well? Oh, and the PROCLAIM is there just for SBCL, it doesn't like DECLAIM.
[05:43:03] <gilberth> A backtrace would be nice, so I could have any chance to figure out what happens.
[05:46:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:47:01] <hayley> "SB-VM:FIXUP-CODE-OBJECT" seemingly.
[05:47:23] <hayley> Here it seems to be barfing on loading sb-cltl2.fasl though.
[05:49:11] <gilberth> clothespin: Modern mode by breaking the CL package breaks a lot of things for no good reason. *print-case* and readtable-case exist.
[05:55:13] <gilberth> lol. When I load a file with the latest published binary for 1.2.11, SBCL quits without saying anything. But it has no thread support anyway, BT says.
[05:55:32] <moon-child> 1.2.11?  Isn't that old?
[05:56:24] <gilberth> It's the latest binary I found. My somewhat current built seems to be broken, as I get no backtrace.
[05:56:40] <kakuhen> latest binary for powerpc or?
[05:56:49] <gilberth> amd64
[05:57:18] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 272 seconds)
[05:59:33] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[06:01:48] *** Joins: Alfr (~Alfr@user/alfr)
[06:05:43] <gilberth> Oh. With Linux I get restarts and package conflict complains with uiop/common-lisp, when I chose a restart, sbcl quits without saying a thing.
[06:09:00] <moon-child> https://0x0.st/o8Bn.png
[06:09:07] <moon-child> I changed my mind.  Burn mathematical notation with fire
[06:09:16] <gilberth> Why would SBCL quit without saying anything?
[06:10:39] <hayley> IIRC there is a way to restrict compiler policy in SBCL anyway...
[06:11:02] <hayley> (sb-ext:restrict-compiler-policy 'safety 3 3)
[06:11:54] <gilberth> hayley, even when I don't do that, I get no backtraces, segfaults in CLX and spurious quits. And I am too lazy to read the manual. And btw, when you can change that someone could change that back. When I unintern OPTIMIZE, I could be sure nobody could ever mess with it.
[06:12:08] <hayley> Weird.
[06:12:23] <hayley> But I doubt anyone touches RESTRICT-COMPILER-POLICY.
[06:14:45] <gilberth> No backtrace with Linux either. Although I got a bit farther and perhaps face the first real bounds violation. In CLX.
[06:17:13] <gilberth> My debugger prompt looks like "102]" --- that isn't right, is it?
[06:17:24] <hayley> "No Rust, it's Steel Wool Common Lisp for a reason" *Steve Blackburn appears selling MMTk again* "Okay this dependency looks nice so I'll let this one in"
[06:17:56] <hayley> 102 nested errors?
[06:18:17] * hayley spots something embedded under laptop's L key and is annoyed
[06:18:31] <gilberth> Why 102? And why no backtrace?
[06:18:56] <hayley> I'm pretty sure the number is nesting, but idk.
[06:20:05] <gilberth> No, that is a frame number or sth. When I say :up it decrements. Has been a while I used the CMUCL debugger. But, yes, this used to be the nesting. Or?
[06:20:31] <hayley> Hm, I get 0[2] for nested errors. Frame 0, error depth 2?
[06:21:53] <hayley> Appears there was a bit of plastic in there...somehow. Slightly concerning to have a random piece of plastic under the key, but the laptop is still in one piece.
[06:22:22] <gilberth> No, I get a frame number only. The thing in []'s is the frame number. The number before the nesting.
[06:23:22] <gilberth> Nah, that's inconsistent, somehow. /me looks at a real CMUCL.
[06:23:59] * hayley still cannot decide between re-animating gencgc, parallelising MPS or porting MMTk.
[06:24:20] <hayley> As I've mentioned a lot, Steve is a nice guy, and I have to wait to get approved to read the damn MPS mailing list.
[06:24:37] <gilberth> The number is a frame number, it changes with UP and DOWN.
[06:25:08] <gilberth> So how could SBCL tell me I am 102 frames down the stack, yet show me no backtrace?
[06:25:31] <hayley> Maybe it's broken enough that showing a backtrace signals?
[06:25:34] <hayley> It's happened to me before.
[06:26:06] <hayley> I'd break the compiler somehow, and then I signal an error, something recompiles GF dispatch for PRINT-OBJECT(?) and it's game over.
[06:26:07] <gilberth> Then a few UP or DOWN (never could remember the direction) should fix that.
[06:27:07] <hayley> gilberth: Still no preference? Say the GC did affect you, then which would you rather?
[06:27:55] <gilberth> I can't tell you as I don't know anything about the GC's mentioned.
[06:28:38] <hayley> "I realize now that I thought I'd need RPLACA and RPLACD, but I don't - those could be implemented by just creating a whole new CONS with the replacement value, throwing away the old one, which eventually just gets GC'ed...." EEeeeeeeh, no object identity?
[06:29:18] <gilberth> Once upon a time EQ was defined for atoms only.
[06:29:54] <hayley> I can still show object identity. (let ((x (cons 'a 'b))) (setf (car x) 'c) (car x)) 
[06:30:02] <gilberth> But then there was no RPLACA or RPLACD either.
[06:30:14] <hayley> I forget how the arguments for RPLACA and RPLACD go.
[06:30:47] <gilberth> it's RPLAC[AD] cons-cell new-value
[06:31:05] <hayley> Thanks.
[06:31:24] <gilberth> hayley: This is how I implemented EQ for postscript.
[06:31:49] <hayley> Modify one, and see if the other changes? Sure.
[06:32:05] <gilberth> I don't remember for what compound data type it was, but there was a thing, where for telling EQ, you would need to measure it.
[06:33:00] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[06:34:02] <vms14> skeemer: are you there?
[06:35:03] <vms14> you've asked for use cases of a macro the other day, I told you when you see a pattern and a function can't reduce it then you use a macro
[06:35:39] <vms14> https://termbin.com/a9ir there is no macro there
[06:35:43] * hayley points to https://plover.com/~mjd/misc/hbaker-archive/ObjectIdentity.html section 2
[06:36:19] <vms14> but if you look at the (mapcar #'add-word '(+ - * ...)) it's asking for a macro to reduce all those (lambda)
[06:37:04] <vms14> in a way that would be something like (add-words + (put (+ (take) (take))) - (let ...))
[06:40:31] <vms14> hayley: if you tend to visit websites like this one which are just plain html in white background, I also do, so ended having a bookmark with this url
[06:40:33] <vms14> javascript:(function(){document.body.style.color="white";document.body.style.background = "black";})()
[06:40:44] <hayley> But why?
[06:40:52] <vms14> it's a very dirty night mode xD
[06:41:03] <hayley> I want to be blinded by Henry Baker's website.
[06:41:10] <vms14> cause white background hurts
[06:41:35] <vms14> btw it does not work on all pages, you see it only changes the body
[06:41:48] <vms14> but it's nice to have it as with one button it goes night mode
[06:42:11] * gilberth uses the Dark Reader plugin.
[06:42:45] <vms14> I would use a text browser if wasn't because all websites won't display text without js
[06:43:11] <gilberth> As at times I just cannot read black on white. I mean literally.
[06:43:37] <vms14> gilberth: you could change those js instructions to change the css
[06:43:58] <vms14> also I should put a font
[06:44:28] <gilberth> As I said, I use the Dark Reader and it just works most of the time.
[06:45:16] <gilberth> A text mode browser could also implement JS, if it wishes.
[06:45:34] <vms14> yes, but very few do
[06:46:03] <vms14> I still have to see if I like forth
[06:46:28] <gilberth> And CSS. The only thing you need to be careful is is rounding to the character grid. Closure did that and I attempt to do the same with my gadgtes and panes for Free-CLIM, so that you could have a tty backend.
[06:46:47] <vms14> pff
[06:47:00] <vms14> implement a browser is not a "nice" project
[06:47:16] <gilberth> I mean, I round subwindow sizes to the pixel grid anyway.
[06:47:23] <vms14> is more like make an operating system as long as you want to provide "features"
[06:47:33] <gilberth> vms14: It seemed nice >20 years ago.
[06:48:02] <hayley> .oO( Stop with the shaking, it's time to get Baking! )
[06:48:06] <vms14> gilberth: if you look those years ago everything was better
[06:48:40] <vms14> I was borning :D
[06:48:45] <hayley> I'm pretty sure it is said in My Little Pony: FIM but I've never actually watched the show.
[06:48:52] <vms14> well, 28 years
[06:49:05] <gilberth> vms14: Nope. Netscape was closed source and the HTML you found was full of errors. I spend most of my time to figure out what Netscape did.
[06:49:48] <vms14> oh right, and then the incompatible features of every browser until they decided to "standardize"
[06:50:06] <vms14> and not even talk about internet explorer xD
[06:50:06] <gilberth> The main problem was: I was working with a DOM and CSS right from the beginning. With a DOM even before CSS existed. Netscape didn't do that. So they had fun, I had fun. However I was the first to pass the CSS1 Acid test back then.
[06:50:19] <vms14> I like the dom
[06:50:37] <vms14> I liked js just because the dom object model
[06:50:56] <vms14> also I liked JSON.parse() 
[06:51:43] <gilberth> vms14: Standard? We have nothing what I would call a standard. We had one once. Nothing really changed, browser do what ever they wish and not what is "specified". Thus the lovely term "living standard". That we have only two implementations of a renderer left doesn't make it easier.
[06:52:21] <vms14> not a standard, but there were a lot of css prefix for every different browser and every feature
[06:52:45] <gilberth> But: The HTML you get really improved. It's only that the number of features you need to implement is huge. Too huge for a single person.
[06:53:25] <vms14> I don't think we should be using http and html in 2022
[06:53:44] <gilberth> vms14: The problem persists. If Webkit does thing X, you need to do thing X. It doesn't matter if X is specified or even correct.
[06:54:13] <vms14> people does not want to reinvent the wheel, but prefers to maintain a wheel that has a square shape and to adapt the road so the wheel can move instead
[06:54:32] <vms14> which is sad
[06:55:06] <vms14> but we're lucky that we will solve the world here in #lispcafe
[06:55:43] <gilberth> Well, some 20 years ago, web designed would have been better off with just serving an image as they wanted pixel-precise control. That is fine, but HTML is not the right tool for that. Serving PS with a little extension for event handling would have been better and would have kept HTML sane.
[06:56:43] <gilberth> And we would have sth which would resemble NeWS :-)
[06:56:47] <vms14> the sad part of all is javascript was gooing to be a scheme but some guy said "no it has to look like java because it's killing all the langs in popularity"
[06:57:36] <vms14> https://brendaneich.com/2008/04/popularity/
[06:57:38] -ixelp- Popularity – Brendan Eich
[06:57:47] <gilberth> JS isn't too bad, but for its inflation of different flavors of NIL. And in this regard I don't Scheme either.
[06:58:02] <vms14> yes, but imagine macros on the web
[06:58:05] <vms14> well
[06:58:14] <vms14> imagine lisp being what js is
[06:58:19] <gilberth> man cpp :-)
[06:58:37] <vms14> or m4
[06:58:58] <gilberth> You can use parenscript. Nah, rather imagine that HTML/CSS/SVG/JSON/JS all would have been just s-expressions.
[06:59:01] <vms14> also lisp would be much more known today
[06:59:09] <vms14> well, would be the most known
[06:59:14] <gilberth> vms14: Suggesting m4 is my part! ;)
[06:59:19] <kakuhen> "no it has to look like java"
[06:59:28] <kakuhen> this is the same mindset that butchered objective-c syntax after apple took over
[06:59:46] <gilberth> I forgot XML, the most silly joke ever.
[06:59:53] <kakuhen> apparently java and c++ baby ducks don't like pervasive messaging or objects as first-class citizens
[07:00:05] <kakuhen> so then came dot syntax and a bunch of other hacks to obj-c
[07:00:10] <vms14> gilberth: yes, all would have been s-expressions
[07:00:21] <vms14> I actually have html and css as s-expressions
[07:00:35] <vms14> but we wouldn't need javascript as we would have a lisp
[07:00:39] <gilberth> The problem with those syntaxes is that attributes are just strings, yet they put micro syntax in there. E.g. like "rgb(0,0,1)"
[07:01:02] <vms14> gilberth: why xml a joke? I think it does the job
[07:01:28] <vms14> and I prefer it over html since it's more strict, so more reliable
[07:01:28] <gilberth> With s-expressions you wouldn't need to write new parsers all the time and you won't face errors because of juggling strings, where you really juggle sth with structure.
[07:01:48] <hayley> http://journal.stuffwithstuff.com/2013/07/18/javascript-isnt-scheme/
[07:01:49] -ixelp- JavaScript Isn’t Scheme – journal.stuffwithstuff.com
[07:01:56] <hayley> (Also ask me why JS isn't Self!)
[07:02:03] <gilberth> vms14: Micro-syntax in attributes. They don't eat their own dog food. This comes from using a document description language for data.
[07:02:48] <vms14> gilberth: do you mean the imported directives? the dtds
[07:03:56] <vms14> I use :keyword value as keyword="value" so idk what do you mean by micro syntax in attributes
[07:04:21] <gilberth> Look at SVG e.g. It's <path d="M 0 0 L 100 100" transform="scale(2)" /> What are those strings doing there? Why not <path><move><x>0</x><y>0</y></move>....too lazy to write that out. With s-expression it would have been (path :d ((m 0 0) (L 100 100)) :transform (scale 2))
[07:04:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:04:45] <vms14> unless you mean stuff like itemscope itemtype="http://schema.org/~a\"
[07:04:47] <gilberth> vms14: Micro syntax: The "M 0 0 L 100 100" and "scale(2)" part.
[07:05:44] <gilberth> There is structure in strings. Unlike with s-expressions.
[07:05:48] <hayley> Speaking of, though, tell me why I shouldn't make low-level operations to diddle the heap be passed into the GC upon initialisation. First, I can't not write a program like that in Newspeak style. And I can test the GC by setting up simulated memory and stacks!
[07:05:56] <vms14> ah, well but this is stuff not really from xml
[07:06:18] <vms14> I mean in xml an attribute wasn't designed for this usage
[07:06:45] <hayley> "prepare to receive FAA committee" "Do it. I buzz towers all the time."
[07:06:48] <gilberth> SVG uses XML, doesn't it? And why are there both attributes and children? This is almost the same as writing f(x,y) today and x.f(y) the other for no good reason.
[07:08:31] <hayley> Easy! f(x, y) is an implicit self send, whereas x.f(y) sends to x.
[07:08:41] <vms14> gilberth: no sane person looks at svg xml code
[07:09:38] <vms14> also I'll tell you a secret
[07:09:46] <vms14> no sane person uses lisp
[07:09:55] * vms14 runs
[07:10:02] <hayley> Very funny. I'm the sane person, the other 8 billion aren't.
[07:10:10] <gilberth> vms14: Great! I don't care how it looks. I care about how hard it is to parse.
[07:11:21] <gilberth> And how future-proof it is. I could parse and unparse an s-expression fine, even I don't know what it means.
[07:11:26] <vms14> at least when parsing xml you don't have to be aware of autoclose tags as html, since html let's you avoid the / slash
[07:11:54] <vms14> I like it's strict, and yes isn't easy to parse but not too much difficult
[07:12:03] <gilberth> HTML is parsed against an SGML DTD, no problem there.
[07:12:30] <vms14> my english stills sucking over the years
[07:12:54] <gilberth> But that no end tag is optional with XML doesn't help a bit, when attributes like in SVG have their own syntax.
[07:13:32] <vms14> yesterday I was saying I'm a words person, and thought how much more would my english suck if I weren't
[07:14:23] <vms14> gilberth: but you shouldn't care about svg when parsing xml
[07:14:29] <vms14> I mean, should be valid xml
[07:14:40] <gilberth> This illustrates my point. SGML was designed for document preparation not for data exchange. And it makes sense that I as a human can write things like <UL><LI>foo <LI>bar <LI>baz </UL> Or <P> foo <P> blah and the parser would still get the proper tree. How, is specified in the DTD and that's fine.
[07:15:51] <gilberth> vms14: What would parsing SVG as XML give me more than just reading the file as octet sequence? There some elements, fine. But there is structure in the attributes too. That is: Those attributes are not atoms in the Lisp sense.
[07:16:38] <gilberth> With SGML it was never meant to put structure into attributes.
[07:17:13] <vms14> if you want to read svg by "hand" I think how the stuff is put in the attributes is your last problem
[07:17:36] <vms14> I'm just trying to imagine you trying to draw a svg file in clim
[07:17:49] <vms14> so reading the whole svg spec?
[07:18:24] <gilberth> Granted. SVG might be a bad XML application. But why did that happen? Because people were too lazy to spell their close parenthesis and came up with an alternative syntax for things like pathes, colours, filters, transformations and what not transported as a character string. Terrific!
[07:18:53] <vms14> so you want to be able to represent svg as s-exps
[07:18:55] <vms14> ohh
[07:19:03] <gilberth> vms14: Yes, I am concerned with rendering an SVG. I will eventually attempt that.
[07:19:11] <vms14> that's why you blame their usage of the xml attributes
[07:19:21] <gilberth> Exactly.
[07:19:27] <vms14> cause they aren't attributes at all xd
[07:19:44] <vms14> then just forget the idea they are attributes
[07:19:48] <gilberth> This also applies to generating SVG, which I do for quite some time now. But it's more severe with reading.
[07:19:54] <vms14> and know the different kind of stuff they put in there
[07:21:22] <vms14> well the worst part is drawing  the svg
[07:21:30] <gilberth> However, when I am done with adding PSish paths to CLIM, it shouldn't be too difficult to render SVG with CLIM.
[07:22:43] <gilberth> And it kind of is the new EPS.
[07:24:01] <vms14> idk why are you cryinh yet
[07:24:18] <gilberth> Cryish?
[07:24:21] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:24:32] <vms14> I mean, transforming xml svg to a s-exp for me sounds like the funniest part of what you want to do
[07:24:37] <vms14> crying*
[07:25:09] <vms14> "parse" a svg is a whole different thing because it's not a "normal" image format
[07:25:10] <gilberth> It's tedious and would have been unnecessary in a better world.
[07:25:19] <vms14> but a bunch of instructions + data
[07:25:35] <vms14> so you have to provide kind of a svg api for all those "functions"
[07:25:46] <gilberth> Yep, and SVG has style sheets, too.
[07:25:50] <vms14> xd
[07:26:10] <vms14> you were bored before starting this project for sure
[07:26:33] <gilberth> Bored? Before I started hacking CLIM?
[07:26:48] <vms14> right you never stopped
[07:27:03] <gilberth> No, and I will perhaps never finish.
[07:27:10] <vms14> it's fine
[07:27:16] <vms14> it's your project
[07:27:47] <gilberth> Anyhow, my dream is that I could read an SVG as a "pattern" and use CLIM:DRAW-PATTERN to an PDF stream and have it turn out as vectors in the PDF. Or the reverse.
[07:28:20] <vms14> you have to eat the whole svg spec and provide that "kind of api" anyways
[07:28:45] <vms14> the more you understand svg the easier for you to simplify and integrate it into the language
[07:29:11] <vms14> you need some kind of a svg repl xD
[07:29:23] <gilberth> For raster images, I keep the original JPEG or PNG bitstream. As many backends, like PDF or SVG have direct support for JPEGs and PNGs. No need to unpack it.
[07:29:31] <vms14> it will really help you as you have to investigate a lot of stuff
[07:30:13] <gilberth> Well, the underlying imaging model of SVG isn't too complicated.
[07:30:37] <vms14> emacs has the impatient mode and thhe skewer mode, both connect the browser with emacs
[07:30:55] <vms14> they could be useful to make a svg repl before you can draw them
[07:31:05] <vms14> or just the concept
[07:31:28] <vms14> you just need to put a svg in a html and can update it through js
[07:31:58] <vms14> js can add raw html as string so it can work xd
[07:32:10] <vms14> or you could implement some svg dom
[07:32:22] <gilberth> I already generate SVG from CLIM just fine. I believe I digged the imaging model. It's mainly writing parsers and implementing those convolution filters.
[07:32:40] <vms14> https://developer.mozilla.org/en-US/docs/Web/API/SVGElement
[07:32:41] -ixelp- SVGElement - Web APIs | MDN
[07:33:27] <vms14> gilberth: I would do this stuff in a dirty way like I did with the html
[07:33:33] <gilberth> Inside SVG isn't too different from PDF either.
[07:33:39] <vms14> which is just make the functions as the html tags
[07:34:18] <vms14> (html (head (viewport) (style (css '(body color white background black)))) (body (p "oh")))
[07:34:40] <gilberth> You're 25 years late.
[07:35:01] <vms14> (p :style "color:green" "hi") would be <p style="color:green">hi</p>
[07:35:04] <hayley> Why the quote? Is anything else here evaluated?
[07:35:42] <vms14> hayley: css is a function, I made it a macro one day just to avoid that quote
[07:36:12] <vms14> it's all very badly implemented there is even a function named "recursion" xD
[07:36:28] <vms14> and I've patched it to add schema.org stuff
[07:36:52] <vms14> https://gitlab.com/vms14/all/-/blob/master/lisp/html.lisp
[07:36:53] -ixelp- lisp/html.lisp · master · vms / all · GitLab
[07:37:16] <vms14> lool you helped me in that code
[07:37:23] <vms14> there is a comment saying it
[07:37:36] <vms14> ;; no-defun-allowed helped me with this macro ; Saturday, October 12, 2019
[07:38:27] <vms14> you also helped me to fake async code once by getting rid of a dirty eval I was using
[07:38:39] <vms14> you made me a macro that generated a switch case
[07:39:02] <hayley> I have been known to say things in #lispcafe, yes.
[07:39:18] <gilberth> Ok. I got it running with Linux. Still a segmentation fault within CLX. Why?
[07:39:40] <vms14> (recursion stuff) xd
[07:40:57] <hayley> Eh, Haskell people use a local function called "go" to express iteration.
[07:41:06] <hayley> e.g. https://gist.github.com/no-defun-allowed/a0faa2e9b14a4ef8ef6b81a17980baf1
[07:41:07] -ixelp- Linear prediction coding...I think · GitHub
[07:41:42] <vms14> liked haskell a lot until I got into pure vs impure stuff
[07:44:03] <vms14> hayley: what is netfarm?
[07:44:14] <hayley> A replicated object system.
[07:44:27] <vms14> is kind of related with what metacall does?
[07:44:54] <hayley> Nope.
[07:44:58] <vms14> metacall is stuff that let's you use other languages remotely calling their functions and using their objects
[07:45:08] <gilberth> #<SB-DI::COMPILED-DEBUG-FUN ...> has no debug-block information. Hmm.
[07:45:40] <hayley> https://zenodo.org/record/4712699 You use objects which can be programmed with one particular bytecode, and the objects are replicated between nodes.
[07:45:41] -ixelp- A replicated object system | Zenodo
[07:47:57] <vms14> so there is a server of objects and clients which can "download" the object and use it
[07:48:16] <hayley> s/a server/a network/
[07:48:20] <vms14> but you seem to say there is kind of a cascading effect between them
[07:48:33] <hayley> The system does not grant any special privilege to any server; all copies can be updated.
[07:49:05] <hayley> Yes, nodes share updates, and eventually converge to the same state.
[07:49:10] <vms14> and you seem to provide a way to specify "features" requested or provided for an object
[07:49:43] <hayley> You can write methods with bytecode (or a program that generates bytecode from a better language).
[07:52:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[08:02:09] <hayley> "how tf is CLI real just use a command translator like lmao 😂😂😂😂😂"
[08:09:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:10:16] *** Joins: semz_ (~semz@user/semz)
[08:12:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:12:51] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:15:00] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:15:55] <vms14> hayley: I'm trying to stalk you
[08:16:09] <hayley> vms14: ok
[08:16:19] <vms14> Trap is a style of popular music that FUCKING SUCKS and is TERRIBLE. All trap "music" is just the same five TR-808 patterns with some SoundCloud rapper singing the most edgy shit he can come up with.
[08:16:34] <hayley> ok enough stalking, it is true but
[08:16:47] <hayley> I don't remember my urban dictionary account details
[08:17:24] <vms14> wanted to find a photo
[08:17:30] <vms14> :/
[08:17:33] *** Joins: notzmv (~zmv@user/notzmv)
[08:17:35] <vms14> I saw gilberth once
[08:17:41] <hayley> God dammit, I got 136 thumbs up on my definition, I can't delete it now
[08:17:51] * hayley changes nick
[08:17:58] <vms14> too late
[08:18:32] * gilberth can't see a nickname change.
[08:18:47] <hayley> On Urban Dictionary.
[08:19:00] <hayley> https://www.youtube.com/watch?v=IW2TslVcpWU is unrelated
[08:19:01] -ixelp- A Saucerful Of Secrets (Live) (2011 Remastered Version) - YouTube
[08:19:26] <Alfr> Pity. And I thought we'd get n-d-a back.
[08:19:30] <gilberth> Ah, so outside Lisp Cafe? Then it's not real and irrelevant.
[08:19:53] <hayley> gilberth: Right.
[08:20:03] <hayley> Alfr: Too bad, I got the chance to take my first name as a nick and I took it.
[08:20:59] <aeth> no-defun-allowed wasn't your first name?
[08:21:01] <Alfr> I guess so.
[08:21:03] * gilberth didn't bother as he was too late back then and thus sticks to his extra "h".
[08:21:27] <hayley> aeth: Seems not.
[08:21:45] <aeth> odd, it even had hyphens so it could be one word
[08:22:42] <gilberth> Yeah, though node-fun-allowed sounds way more positive.
[08:22:47] <hayley> aeth: Etymology: thematrixkid on scratch.mit.edu (not joking, I still have the account and troll the forums to this day) -> thematrixshibe (I got into crypto in 2014) -> theemacsshibe (no Matrix movies for a while, consider that I prepared for Resurrections too) -> some noise -> no-fun-allowed -> no-defun-allowed
[08:25:11] <hayley> ...and then -> hayley cause I got the chance on Libera. That spans roughly 2012-2021
[08:25:21] <moon-child> gilberth: haven't I mentioend that deno is a lot more fun than node?
[08:25:36] <SAL9000> that sounds like a setup for a big-endian vs little-endian joke
[08:25:53] * moon-child still doesn't know what deno and node are.  I though they were package managers for javascript, then somebody said the former was a reimplementation of the go standard library or something?
[08:25:55] <vms14> hayley: so much nicknames to stalk
[08:26:16] <vms14> you're lucky we are on 2022
[08:26:35] <vms14> 15 years ago google would gave me your phone number xd
[08:26:36] <hayley> .oO(deno is PDP-endian?)
[08:27:32] <SAL9000> if we imagine that "node" and "deno" are actually hex, then it's 0xabcd vs 0xcdab
[08:27:34] <hayley> 632-3003
[08:27:43] <vms14> and you don't know how much info google gave by putting someones phone number
[08:29:53] *** semz_ is now known as semz
[08:30:01] <vms14> moon-child: wtf
[08:30:09] <aeth> hayley: during the same time span, actually probably a year or two earlier...
[08:30:11] <aeth> hayley: aeth
[08:30:41] <gilberth> Depends. PDP-11 is little endian on 16-bit words, but it was custom to store a 32-bit number as two 16-bit numbers bigendian. Thus #x12345678 winds up in memory as #x34 #x12 #x78 #x56.
[08:31:26] <SAL9000> *shudder*
[08:31:46] <vms14> btw the perl dev who made mojo switched to node
[08:32:02] <vms14> maybe to supply the node dev who switched to go
[08:32:05] <vms14> XD
[08:32:24] <SAL9000> wake me when they switch to Lisp /s
[08:32:42] <vms14> when you implement a lisp in js
[08:32:42] <SAL9000> it feels like the web folks are changing languages about as often as they change t-shirts
[08:33:22] <gilberth> Both of which are about fashion. Who has no taste needs fashion.
[08:33:28] <SAL9000> :-)
[08:33:34] <vms14> go is a nice language for backend, don't like it, but it's good
[08:33:50] <hayley> Netfarm VM on Utena VM on v86 on V8
[08:33:52] <vms14> node has async by default which is a nice feature
[08:34:01] <hayley> lol no condition system
[08:34:14] <hayley> gilberth: https://www.youtube.com/watch?v=F-z6u5hFgPk
[08:34:15] -ixelp- David Bowie - Fashion (Official Video) - YouTube
[08:34:33] <vms14> lisp, claims to have the fastest server in the world (woo)
[08:34:57] <vms14> much higher lever abstractions than node or go, clos, etc
[08:35:08] <vms14> but no libraries and no devs
[08:35:09] <hayley> .oO(Lisp has higher level abstractions than CLOS?)
[08:35:22] * hayley borrows gilberth's desk
[08:35:24] <aeth> lower, too
[08:35:59] <SAL9000> hayley: wrong virtual parens there, I think; "much higher level abstractions than (node or go), [such as] (clos, etc.)"
[08:36:22] <SAL9000> last I checked, CLOS is not a language in its own right :)
[08:36:24] <vms14> thanks SAL9000 
[08:36:46] <hayley> I don't think Woo is the fastest still.
[08:36:59] <vms14> never bothered to even try
[08:37:01] <aeth> claims to be the fastest
[08:37:12] <aeth> I claim to be the fastest runner; and no, you cannot see me run
[08:37:19] <vms14> and I like what the hunchentoot author says
[08:37:36] <vms14> "why you care about performance when you haven't write a single line of code"
[08:37:45] <hayley> And we are still short on parallel GC, so anything that conses anything at tens of thousands of requests a second is gonna suck.
[08:37:45] <SAL9000> given Python's popularity, clearly "performance" is not a highly sought after property in the popularity contest
[08:37:54] <hayley> (Maybe not "anything", but I am not holding my breath.)
[08:38:37] <aeth> SAL9000: or, without Python 2vs3 split, performance issues, and the global interpreter lock, Python would be the most popular language
[08:38:44] <SAL9000> I have a lot of respect for PyPy but it feels like they're trying to swim up a waterfall, given the CPython almost-monoculture
[08:38:55] <SAL9000> I think they had a way around GIL as well?
[08:39:05] <vms14> SAL9000: actually is libraries what matters
[08:39:15] <vms14> for example look at ruby vs python
[08:39:22] <SAL9000> vms14: yes... and how do libraries arise? it boils down to popularity contest
[08:39:27] <vms14> python fucked ruby in popularity
[08:39:42] <vms14> I think ruby is much "better" language than python
[08:40:04] <SAL9000> Not sure about that myself, but I can't judge not having looked deeply at (or used, for that matter) Ruby
[08:40:14] <vms14> but when ruby was focusing all the attention and marketing on rails, python was adding libraries for almost everything
[08:40:15] <aeth> Ruby is better at being OOP in a world that's not that interested in OOP anymore. That, and its performance was even worse than Python
[08:40:43] <hayley> aeth: Yeah but https://www.youtube.com/watch?v=Ox5P7QyL774
[08:40:43] -ixelp- Self: The Movie; - YouTube
[08:40:56] <vms14> and rails failed cause once you got your startup running you had to switch to another "platform"
[08:41:07] <SAL9000> "not that interested in OOP"... sure it is, just that the "objects" are microservices now... clearly Erlang should be ruling the roost! /s
[08:41:11] <hayley> SAL9000: IIRC there was once a PyPy fork which used software transactional memory, but it didn't run much faster.
[08:41:41] <SAL9000> hayley: I'm guessing that the hardware version is (was) too limited?
[08:41:54] <vms14> still rails is being used a lot, specially in startups
[08:42:06] <vms14> I sometimes see remote offers
[08:42:08] <hayley> https://doc.pypy.org/en/latest/stm.html
[08:42:09] -ixelp- Software Transactional Memory — PyPy documentation
[08:42:14] <SAL9000> vms14: "startups"? https://about.gitlab.com/blog/2018/10/29/why-we-use-rails-to-build-gitlab/
[08:42:35] <vms14> but today is java php python js/node 
[08:43:06] <vms14> SAL9000: hacker news had some startup help campaign I think
[08:43:19] <vms14> I guess they recommended to use rails
[08:43:38] <hayley> However, I am not holding my breath on transactional memory making parallel/concurrent programming easier.
[08:44:17] <vms14> hayley: aren't you interested in concurrent stuff?
[08:44:27] <hayley> I am.
[08:44:58] <SAL9000> as far as I can tell, transactional memory (both hardware and software) has reached a (local) dead end
[08:45:32] <SAL9000> software is too slow, hardware is too limited ("up to K sync objects, up to N bytes each...")
[08:45:54] <vms14> the solution is forth, everyone told me that
[08:46:00] <SAL9000> wat
[08:46:31] <vms14> so better if I continue with this shitty forth I'm trying to make
[08:46:47] <SAL9000> have fun, but I don't see how Forth helps with parallel programming
[08:47:09] <hayley> You can try to cover your ass by using hardware for small transactions, and software for larger transactions.
[08:47:54] <hayley> Once I considered designing some hardware, wherein there would only be transactions, but a transaction which just did a read-modify-write on one location would always succeed.
[08:49:17] <SAL9000> sounds like a more flexible version of atomic operations?
[08:49:26] <SAL9000> like atomic-increment etc. but more general, which would be awesome
[08:49:39] <vms14> I don't care about parallelism
[08:49:44] <hayley> Your loss.
[08:49:48] <vms14> I should learn to program first
[08:50:06] * hayley retracts statement
[08:50:58] <vms14> I went to lisp just because of Paul Graham
[08:51:02] <SAL9000> making your own Forth does sound like a good way to learn a lot about programming
[08:51:15] <hayley> SAL9000: Yes, but I couldn't make it fully general, at least not general enough that one thread could hold a cache line indefinitely. I haven't really thought it through, and it is not a priority for me.
[08:51:28] <vms14> I was like ok it's just a fanboy of this language
[08:51:45] <SAL9000> hayley: fully generai would probably be bad tbh -- no forward progress guarantees anymore
[08:51:51] <vms14> but no fanboy has talked so far about a language so it triggered me
[08:52:17] <dave0> vms14: i like forth, it's different to c which is the only language i know
[08:52:28] <vms14> and wantd to check if what all lisp fanboys said was truth or a lie
[08:52:30] <SAL9000> or... no, forward progress still guaranteed but in the worst case it degenerates to fully serialized
[08:53:01] <vms14> once I've tried lisp I liked it a lot and every day I was more convinced those fanboys were telling the truth
[08:53:27] <vms14> in fact they tell you become a better programmer and changes the way you think
[08:53:53] <vms14> and it does, like much more programming languages also do, since they can teach you different ways to do stuff
[08:53:57] <SAL9000> N threads all trying to R-M-W the same slot with "long" transactions -> you end up with either stupid amounts of contention/livelock, or you're back to classical locking semantics serializing on all N transactions
[08:54:27] <vms14> but metaprogramming allows you to do much other things you would never think a language was able to do
[08:54:27] <SAL9000> Still, boils down to "you can't protect against stupid [code]"
[08:55:09] <vms14> and people when I ask for metaprogramming and stuff like bottom up they tell me about forth
[08:55:14] <SAL9000> haha
[08:55:27] <SAL9000> yes, Lisp metaprogramming is significantly more powerful
[08:55:35] <vms14> so I think it's possible I'll like forth
[08:55:47] <vms14> SAL9000: what limits has forth metaprogramming?
[08:56:06] <vms14> I don't have the basics of forth yet
[08:56:21] <SAL9000> I'm no expert on Forth but as far as I understand, basically "everything is a macro"
[08:56:49] <vms14> everything is a "function call"
[08:56:57] <vms14> every word is an action
[08:57:12] <SAL9000> well, yes, but a "function call" which can specify non-standard evaluation semantics for the arguments, no?
[08:57:18] <vms14> but actually words are builtin primitives or a list of words
[08:57:36] <gilberth> As Moore's law is coming to an end, we all need to care about parallelism. I'd like to see more "fine grained" parallelism. Like doing a stabbing query for redisplay. I'd like to experiment with that sort of parallelism. But I would need a different machine for that.
[08:57:47] <vms14> you can compile those words which are lists of other words
[08:58:18] <vms14> and you can somehow specify the evaluation with inmediate and more stuff, I have to see it because I don't remember
[08:58:25] <SAL9000> gilberth: looks like we also need to start caring about heterogenous processors; Intel is hopping onto the BIG.little train even in desktop CPUs...
[08:58:26] <vms14> also, there is a return stack
[08:58:50] <vms14> you can drop elements from that stack and would be like exiting from words
[08:59:00] <gilberth> SAL9000: Oh dear, terrific prospect.
[08:59:06] <vms14> like for example breaking a loop
[08:59:34] <SAL9000> gilberth: I still can't figure out if it's a matter of "greenwashing", real ecological considerations or more banal things like thermal limits
[08:59:50] <vms14> the fact is, forth is very easy to implement in a way that even a programmer with my skills could be able to create an usable implementation
[09:00:08] <vms14> this + metaprogramming features is something very promising
[09:00:20] <SAL9000> vms14: have you considered implementing a Forth *in Lisp*? :)
[09:00:38] <vms14> because it will be your handcrafted programmable language
[09:00:52] <vms14> SAL9000: yes, to learn how implement it
[09:01:06] <vms14> actually I'm trying it in a very simple way
[09:01:08] <gilberth> The ironic part is that with a proper network transparent display server, you can already do rendering in parallel in that sense that one process thinks about what to render and another does the rasterization. And even more ironic, my beloved CP/M-80 box has two Z80 CPUs. One runs the application the other does the drawing. The first would send drawing request to the later.
[09:01:30] <gilberth> SAL9000: Battery life.
[09:01:34] <SAL9000> in DESKTOPS?!
[09:01:49] <gilberth> Sure! Not. Then it's green-washing.
[09:01:54] <vms14> https://termbin.com/hxbk
[09:02:11] <SAL9000> gilberth: I just realised -- could also be (a weird form of) platform convergence
[09:02:19] <vms14> i was going to write a macro to avoid that mapcar
[09:02:22] <gilberth> As if the little power that desktop use would kill us.
[09:02:28] <vms14> then went here to stalk hayley
[09:04:08] <SAL9000> vms14: (defmacro add-word (name &body body) `(setf (get *dictionary* ',name) (lambda () ,@body))) ;; untested
[09:04:08] <gilberth> SAL9000: But that is a dangerous route, we already saw papers about the topic with programming language is more friendly to the climate. This will be the next argument for inherently unsafe languages.
[09:04:23] <vms14> SAL9000: yes, that's the macro
[09:04:25] <gilberth> As bound checks are bad for the climate.
[09:04:39] <vms14> but add-words*
[09:05:02] <gilberth> And I am sure we will see papers stating that garbage collection also is bad for the climate.
[09:05:24] <SAL9000> gilberth: Agreed regarding risks of greenwashing; I brought up platform convergence in the more prosaic sense, though.
[09:05:25] <hayley> "the costs of recovering from a disaster due to array-bounds or pointer violations usually far exceeds the savings from the slightly increased execution performance."
[09:05:34] <vms14> actually I came here to talk to a guy about this macro
[09:05:43] <moon-child> gilberth: I think we've seen that already
[09:05:48] <vms14> because he asked for use cases of macros another day
[09:05:53] <vms14> <vms14> in a way that would be something like (add-words + (put (+ (take)                                          
[09:05:53] <vms14>         (take))) - (let ...)) 
[09:06:18] <hayley> Real terminal boredom hours
[09:06:33] <SAL9000> gilberth: like, people develop "laptop-first" (as they already do "mobile-first", sigh), so desktops should be "similar" -- or, people using desktops to develop for laptops, who probably want to be able to validate BIG.little handling without a separate device
[09:07:18] <vms14> SAL9000: actually mobile first should be the goal
[09:07:22] <SAL9000> *cries*
[09:07:32] <SAL9000> I know the market reality. Doesn't mean I like it!
[09:07:33] <hayley> There's already a "computing within limits" conference, which I cannot find enough rude words to say about. Not that I like "modern" computing, but their reasoning is 100-\eps % greenwashing.
[09:07:33] <vms14> because the most percentage or visits will come from there
[09:07:44] <vms14> of*
[09:08:01] <gilberth> I don't care for mobile. My "smart" phone is just a very expensive alarm clock.
[09:08:10] <SAL9000> at $dayjob we've gotten questions from customers about why our CAD software doesn't run on an iPad.
[09:08:19] <vms14> if you care about users, you care about mobile
[09:08:23] <hayley> Apparently you can get the proceedings in dead tree form, and they cost a lot of money too. Funny that.
[09:08:27] <vms14> because that's their interface 
[09:08:36] <hayley> vms14: Can I care about https://history-computer.com/Library/Kay72.pdf?
[09:08:43] <SAL9000> vms14: would you do CAD on mobile too?
[09:08:53] <SAL9000> would you do (serious) video editing on mobile?
[09:09:07] <SAL9000> some applications do not make sense in that form factor, at least with current input methods
[09:09:23] <hayley> My dad once thought he could edit on his Sony phone, because Sony also has video editing software.
[09:09:39] <SAL9000> there's mobile apps for video editing, yes
[09:09:48] <vms14> SAL9000: actually forth interests me in part because I've put s7 scheme in android and was providing a way to create android apps with scheme by using the java jni
[09:09:56] <hayley> What's it, er, Vegas Pro or something. But good luck with the export times.
[09:10:06] <gilberth> Well, for electronics work, I wished I had a pad I could view the PCB layout on at that time while debugging my design. As you can't see the traces anymore with four and more layers.
[09:10:17] <SAL9000> hayley: I bet the export times are "solved" by the power of ZE CLOUD
[09:10:18] <vms14> s7 scheme is so easy to embed that make me think about making it my main programming language
[09:10:30] <moon-child> eh.  Phones can be fast.  But touch screen is a terrible interface, and the display is so small...
[09:10:35] <vms14> as it has the format function and cl macros which is what I usually miss the most
[09:10:41] <hayley> SAL9000: This is Australia, our Internet connection is almost always shit.
[09:10:47] <SAL9000> vms14: to be clear I'm not saying "mobile bad!" or even "mobile-first bad!" -- it has its place, what I find bad is it being applied everywhere, right or wrong
[09:10:58] <SAL9000> hayley: note the sarcasm quotes on 'solved'
[09:11:01] <hayley> But I can go to the shopping centre across the road from university, and enjoy 100Mbps download there.
[09:11:06] <gilberth> I used to print the layout on transparencies to have them available at the work bench.
[09:11:25] <hayley> Also not enough rude words to direct to the NBN.
[09:11:26] <SAL9000> gilberth: yeah but you wouldn't want to *edit* said design on a tablet device, except for the most minor of changes, I bet.
[09:11:33] <vms14> but is for example my goal of android revolves around the amount of users I'll have compared with a pc application
[09:11:49] <gilberth> SAL9000: Right, I wouldn't edit there.
[09:12:08] <vms14> even without providing for iphone the amount of android users is much greater than the pc ones
[09:12:10] <hayley> The Labour (centre) government proposed it long ago, then the Liberal (centre-right) party got in power, and did some "budget cuts" which ended up costing twice as much.
[09:12:23] <SAL9000> hayley: having moved from Australia to Sweden for work, I totally get it... I'm so spoilt now what with fibre-to-the-building. Like, the only reason I don't have symmetric gigabit at home is the price.
[09:12:31] <vms14> and a pc cannot give me a feature tha compensates the loss of possible users android gives
[09:12:57] <SAL9000> vms14: if you want maximum reach, have you considered web-apps/PWA?
[09:13:02] <hayley> But if the application is infeasible to use on a phone...
[09:13:03] <SAL9000> then you get iOS as well
[09:13:15] <vms14> yes, I hate java so I tried to escape it
[09:13:16] <hayley> vms14: Why not consider the people that don't have any computers?
[09:13:46] <vms14> hayley: what?
[09:14:00] <vms14> people has no computer but has phone
[09:14:13] <vms14> has no home, lives in the street, but has a phone
[09:14:24] <hayley> vms14: The argument here is that many applications don't work on mobile phones, but you want to target them anyway. So why not target people with no computers and no phones too?
[09:14:48] <hayley> (I count a phone as a computer, I tend to say desktop/laptop/phone/tablet/etc.)
[09:14:48] <vms14> when you publish an application is because you target users
[09:14:51] <SAL9000> clearly they're developing an application that will fit on a phone, which is fine
[09:15:03] <vms14> and usually the goal is to target the major number of users possible
[09:15:24] <gilberth> Well, it depends on the application, doesn't it? I can't imagine using a phone or a tablet for software development, or any editing at all, be it text, schematics, or images.
[09:15:41] <hayley> https://goo.gl/maps/dooA2WqWzA1C8RwQA Hm.
[09:15:42] <vms14> I've tried when had no pc
[09:15:42] -ixelp- Bevor Sie zu Google Maps weitergehen
[09:15:45] <SAL9000> vms14: yes, that could be referred to as "mass-market" applications
[09:15:49] <moon-child> for drawing, I can imagine it
[09:16:04] <moon-child> I mean, people use drawing tablets for art
[09:16:08] <vms14> used some xterm emulator and was able to install apache and perl and I guess lisp
[09:16:09] <SAL9000> not all applications are mass-market, some are by nature aimed at a specific target audience
[09:16:16] <gilberth> moon-child: For sketches, sure.
[09:16:30] <vms14> and a usb keyboard can be plugged with a micro or nano adapter
[09:16:36] <vms14> but still sucks
[09:16:51] <SAL9000> moon-child: afaik most phone/tablet devices don't have a Wacom digitizer so you're limited to the precision of your finger
[09:17:28] <moon-child> sure
[09:17:36] <moon-child> the existence of crappy tablets doesn't preclude the existence of good ones
[09:17:42] <vms14> I would like umpcs had been more popular
[09:18:10] <SAL9000> moon-child: sure, I'm just pointing out that "drawing tablet" is significantly different to (most) Android/iOS tablets
[09:18:11] <vms14> I have a gpg micro pc which is the nearest thing I could get
[09:18:50] <SAL9000> vms14: https://store.planetcom.co.uk/
[09:18:51] <moon-child> my understanding is ipads have fairly good tracking
[09:18:51] -ixelp- Planet Computers | Type and create on the go with Gemini PDA
[09:18:55] <moon-child> and pressure sensitivity
[09:19:07] <SAL9000> can you use a thin-tip pen though?
[09:19:13] <vms14> btw that's why if I learn forth and somehow I like it, I could put it in android, being a transpiler to java o kotlin or an interpreter trough jni
[09:19:15] <SAL9000> (maybe you can, I'm no expert on Apple)
[09:19:45] <SAL9000> vms14: FYI, note that iOS is VERY hostile to third-party JIT; browsers other than Safari have to interpret JS, for example.
[09:20:12] <vms14> I'm poor so no IOS dev for me
[09:20:14] <vms14> :D
[09:20:15] <edgar-rft> how sensitvie are iPads to a pressure of say 10 megatons?
[09:21:07] <skeemer> vms14, thanks for the example!!
[09:21:09] <SAL9000> vms14: well, you were talking about reaching the users earlier -- you could reinvest your gains from your future Android app into getting the iOS developer license
[09:21:26] <vms14> but I saw in android you can put a webview in a native app and restrict what happens also provide an interface to the js in that webview and I think you have two way interoperation
[09:22:01] <SAL9000> uhhh yes but at that point you might as well write a PWA?
[09:23:14] <vms14> I think they do exactly that
[09:23:34] <SAL9000> https://en.wikipedia.org/wiki/Progressive_web_application
[09:23:55] <SAL9000> native apps which are a thin layer around a webview are also a thing, but they are not PWA
[09:24:10] <vms14> and in this case it's easier to do it yourself as in android you would just provide for js what you miss and doing everything in the "web"
[09:24:44] <vms14> but, there are a lot of frameworks
[09:24:55] <vms14> and what I really want is to make a game
[09:25:09] <vms14> so the logic says unity
[09:25:39] <vms14> but seems more interesting going native and doing everything from scratch
[09:25:52] <vms14> the problem is java is java and kotlin is not lisp
[09:25:57] <SAL9000> fair warning, if you want to make a game *to make money*, the mobile games market is extremely overheated
[09:26:05] <vms14> not really
[09:26:09] * hayley reads a bandwidth usage graph and wonders how there is a spike around midnight.
[09:26:16] <vms14> making a game is what put me into programming
[09:26:26] <vms14> and I didn't even started xD
[09:26:29] <SAL9000> if you want to make a game as a hobby project, have fun!
[09:26:46] <vms14> it's a goal in my life it seems will never disappear
[09:27:00] <vms14> but I want to be a better programmer first
[09:27:10] <vms14> and for some reason I want my own stuff
[09:27:18] <hayley> ...the date is the X axis, but does the date appear at midnight? We haven't reached midnight of 2022-02-16 here, but that's the end of the graph. So rather it seems the spike is at 5pm somehow.
[09:27:25] <vms14> this is why I like lisp, and why forth is calling me
[09:27:49] <SAL9000> vms14: even if you never use your own stuff for "serious" (money-making) projects, the lessons you learn doing so should serve you well.
[09:27:54] <moon-child> hayley: time zone included?
[09:28:04] <hayley> moon-child: Right.
[09:28:22] <SAL9000> hayley: maybe the graph shows today's date at "the end", even if it's not midnight yet?
[09:28:46] <vms14> SAL9000: but for example, suppose I put some x language (be it s7 scheme, forth or whatever) in android and makes me able to write android applications
[09:28:51] <hayley> Another indicates a spike between 8pm and midnight. Computers checking for updates? I thought Windows checked at 3am or something.
[09:29:07] <vms14> that can give me a job, or freelance jobs
[09:29:27] <hayley> SAL9000: Doesn't look like it to me. Pick a random location on <https://www.superloop.com/consumer/home-broadband/cvc-graphs.html>
[09:29:48] <vms14> the thing is you can put C and C++ code in android and you have the ndk which gives you access to opengl and the camera and some stuff
[09:30:06] <SAL9000> vms14: unless you land in (or make) a startup or get lucky you're unlikely to get to *use* s7 scheme, forth, etc. in a work project, though
[09:30:06] <vms14> ecl is compiled in android, just needs some bindings
[09:30:27] <SAL9000> you absolutely can and should cite such projects on your resume/CV!
[09:30:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[09:31:06] <vms14> if I want a job I know what I have to do
[09:31:08] <SAL9000> admittedly, my day job is compiler development at a multinational
[09:31:11] <vms14> learn java or php
[09:31:19] <vms14> but I refuse
[09:31:19] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[09:31:35] <SAL9000> java and php are not the only languages out there that companies are willing to use
[09:31:44] <vms14> yes, python or js
[09:32:05] <vms14> thats the 4 lang that will get you a junior job
[09:32:07] <SAL9000> iirc Jane Street uses Haskell
[09:32:13] <SAL9000> Grammarly uses Common Lisp
[09:32:24] <vms14> yes, but they won't hire a junior
[09:32:41] <SAL9000> not likely... but you never know until you try
[09:33:07] <vms14> hah, they just have to look at my html generator
[09:33:17] <vms14> xD
[09:33:37] <vms14> nah, I don't think I'll get a programmer job
[09:34:00] <SAL9000> unfortunately, in that regard, networking is the #1 priority -- you first need to get past the HR screen for the techies to see your awesome hobby projects and go "yes!"
[09:34:02] <vms14> I don't want to program in java php nor js or python
[09:34:27] <vms14> actually you need a nice portfolio, specially for front end jobs
[09:34:28] <SAL9000> this means get involved in open source, go to conferences, talk to people
[09:34:44] <vms14> but also to learn what they want
[09:34:55] <SAL9000> open source is how I got my current job, straight out of uni, no prior experience other than teaching
[09:35:16] <vms14> which is spring django node angular/vue/react laravel/symphony
[09:35:38] <vms14> and jquery XD
[09:35:54] <vms14> they fucking still asking for jquery
[09:36:16] <SAL9000> note that at the moment (the past year or so) it seems that there's been a huge wave of people trying to abuse the new remote-work options created by covid
[09:36:40] <SAL9000> like, people hiring someone else to pass the interview or tell them answers via a second call/chat...
[09:37:26] <SAL9000> this really gums up the works, forcing HR to raise the screening bar higher so that they avoid wasting the specialists' time
[09:37:51] <vms14> I hate that a hr has to "select" me
[09:38:02] <vms14> when they have 0 knowledge about programming
[09:38:04] <SAL9000> these days it's usually a robot hr, even :\
[09:38:26] <SAL9000> but that's why networking, networking, networking (and not the TCP kind)
[09:38:28] <White_Flame> if there's too many applications to process sensibly, I still think the fairest approach is lottery.  grab some at random and have a human actually go over it
[09:38:42] <White_Flame> but nobody does that
[09:38:43] <vms14> and the only think they can judge is tags like "jquery" which is sad to think that telling "I know jquery" is good for them
[09:38:47] <SAL9000> White_Flame: I'm under the impression that it's something like 99% BS applications of various kinds at this point
[09:39:34] *** Joins: rogersm_ (~rogersm@90.166.180.250)
[09:39:41] <White_Flame> vms14: I never really understood why there's such a widespread dislike of jquery.  Everybody seems to hate it, but never says why
[09:40:11] <vms14> White_Flame: I don't hate it, It sounds funny to see it required in job offers
[09:40:56] <SAL9000> vms14: there's a story on Reddit somewhere (I don't have a link on me) about someone who got repeatedly ghosted with their real resume, so they wrote a fake one complete with references to porno-film actors, Rickroll hyperlinks, etc. -- but mentioned plenty of the usual keywords, while not lying ("Used a variety of Google products..." i.e. search). They got multiple callbacks within a few weeks,
[09:40:58] <SAL9000> I believe!
[09:41:00] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[09:41:16] <White_Flame> idunno, isn't jquery to javascript sort of like stl or boost is to c++?
[09:41:37] <SAL9000> White_Flame: afaik it's more that jquery is considered -- rightly or wrongly -- a dinosaur. "Why aren't you using $THE_NEW_HOTNESS?!"
[09:41:44] <SAL9000> imagine finding mention of COBOL in a job posting.
[09:41:50] <vms14> White_Flame: was when it was created
[09:41:59] <White_Flame> imagine finding mention of Lisp in a job posting :-D
[09:42:07] <vms14> just some syntax sugar
[09:42:14] <hayley> https://www.reddit.com/r/IAmA/comments/adr87y/iama_former_prime_minister_of_australia_kevin/edjmvsa/?context=3 Well, that's something.
[09:42:15] -ixelp- IamA Former Prime Minister of Australia Kevin Rudd AMA! : IAmA
[09:42:25] <vms14> today is totally useless as js has the stuff by default
[09:42:28] <moon-child> White_Flame: in my last job, I put lisp in my resume, piqued their interest
[09:42:32] <moon-child> first interviewer was a cl guy
[09:42:51] <White_Flame> cool, and yeah off the beaten path stuff is often interesting in resumes
[09:43:00] <vms14> moon-child: cause it wasn't a java offer
[09:43:16] <White_Flame> (at least at the phase where an actual human that might be a boss/coworker reads it)
[09:43:19] <SAL9000> hayley: wait wait so they killed NBN because the TV News would be under threat?
[09:43:24] <mfiano> I was refused 2 job offers because I listed lisp in my resume
[09:43:28] <SAL9000> excuse me while I die of laughter/crying
[09:43:30] <mfiano> I was told I was over-qualified
[09:43:30] <hayley> SAL9000: Maybe.
[09:43:46] <hayley> Given how the media here is FUBARed, I would not be surprised.
[09:43:49] <vms14> lol
[09:53:36] <vms14> skeemer: that's the macro
[09:53:40] <vms14> (defmacro add-words (&body body)                                                                                    
[09:53:40] <vms14>   `(progn ,@(loop for word-code in body                                                                             
[09:53:40] <vms14>                   collect `(add-word ,(car word-code) (lambda () ,@(cdr word-code))))))
[09:54:02] <vms14>  (macroexpand-1 '(add-words (+ (oh)) (- (meh) (ah))))                                                       
[09:54:02] <vms14> (PROGN (ADD-WORD + (LAMBDA () (OH))) (ADD-WORD - (LAMBDA () (MEH) (AH))))   
[09:54:20] <vms14> need to quote stuff
[09:56:27] <vms14> macroexpand is your best friend when learning about macros
[09:56:45] <vms14> justt remember to quote the macro call
[09:57:05] <vms14> (macroexpand-1 '(my-dirty macro and its args))
[09:57:21] <vms14> will show what the macro generates
[09:58:06] <gilberth> c-c c-m with SLIME.
[09:58:17] <vms14> :O
[09:58:29] * hayley uses C-c M-e
[09:58:32] <vms14> I only know to execute last sexp
[09:58:38] <vms14> xd
[09:58:56] <hayley> Though it will barf if any expansion step fails, even if it is not what you are going to see.
[09:59:20] <gilberth> "c-c M-e is unbound" says my Emacs.
[10:00:18] <gilberth> Well, for me c-c c-m runs macroexpand-1 and c-c M-m runs macroexpand-all.
[10:00:21] <vms14> btw hayley you indirectly helped me with this macro too, since I've copypasted the same code you wrote me for the html generator
[10:00:27] <vms14> so tnx :D
[10:00:31] <hayley> macrostep-mode?
[10:00:52] <gilberth> What mode?
[10:01:20] <hayley> C-c M-e or M-x macrostep-mode in common-lisp-mode works here.
[10:01:22] <vms14> I wonder how your emacs looks
[10:01:31] <vms14> mine is just default with -nw
[10:01:36] <gilberth> hayley: Doesn't here.
[10:02:26] * hayley uploaded an image: (32KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/AGpmLKknTTyYBzoMxUvJhkRx/Screenshot_2022-02-16_17-42-20.png >
[10:02:30] <hayley> vms14: Mine looks like this.
[10:02:57] <gilberth> vms14: I don't like -nw, we have window systems, don't we? /me was an epoch user.
[10:03:32] <vms14> hayley: kind of default
[10:03:34] <moon-child> hayley: you keep around the menu bar?
[10:03:36] <moon-child> what for?
[10:03:39] <gilberth> hayley: A toolbar? A menu bar? Wasted space. :)
[10:03:50] <hayley> moon-child: For when I invariably forget some function names.
[10:04:01] <vms14> gilberth: what I hate is to have to place exatly right the cursor when I want to paste in gui
[10:04:02] *** Quits: derwolf_ (~DerWolf@2a01:4f8:c0c:554a::1) (Ping timeout: 240 seconds)
[10:04:11] <vms14> with the middle mouse button I mean
[10:04:15] <gilberth> The menu also is on M-Mouse-R or sth. I forgot.
[10:04:17] <vms14> I never get it right
[10:04:47] <gilberth> vms14: I just hit c-y to paste.
[10:04:48] <vms14> in -nw I can just click wherever I want, text will appear where cursor is
[10:05:41] <vms14> and I don't see the features of the gui to be needed at all
[10:07:00] <gilberth> Well, I like syntax highlighting. As I said: I once was an epoch user. GNU Emacs needed decades to adopt X11. Epoch was an early for to have Emacs with multiple fonts, mouse support etc. All you get from a window system. Then there was Lucid Emacs and then XEmacs.
[10:07:22] <gilberth> * early fork
[10:07:53] <vms14> you have colors in -nw
[10:07:57] <gilberth> I once taught epoch to properly use variable width fonts. I never ported that to Lucid^WXEmacs though.
[10:08:10] <vms14> and bold and underline
[10:08:29] <gilberth> vms14: At that time I had a gray-scale display --- so no colour for me. :-p
[10:08:39] <vms14> but yes, most people would cry looking at my screen
[10:08:59] <vms14> and, if I customize it it will get better xD
[10:09:07] <vms14> worse*
[10:09:43] <vms14> btw I tried exwm, it's kind of nice
[10:10:05] <vms14> I don't like tiling, but emacs becomes your wm and it's cool
[10:10:57] <gilberth> I don't like tiling at all. Often I use c-x 5 2 to have a second frame.
[10:11:20] <gilberth> And what rocks with X11 is that I could have frames on different X servers.
[10:11:57] <vms14> https://i.imgur.com/rn6xoEa.png
[10:12:11] <vms14> gilberth: I want to make a wm with x11
[10:12:43] <vms14> actually you just need to put the name of your program in .xinitrc and it's the window manager
[10:12:44] <gilberth> vms14: Have fun, it's not too hard with Lisp.
[10:13:07] <vms14> then is just manage the windows by looking at the root children
[10:13:24] <gilberth> Well, a window manager is just a regular client, it could be started in what ever way you want.
[10:13:26] <vms14> gilberth: did you play with this stuff?
[10:13:36] <vms14> make us a wm
[10:13:44] <vms14> climwm
[10:14:05] <gilberth> What for? There are already plenty to chose from. But, yes, I know more of the ICCCM as I wished for.
[10:14:12] <vms14> the fastest scrolling window manager
[10:14:31] <gilberth> A window manager scrolls?
[10:14:56] <vms14> no but I just remembered you talking about how you made clim scroll much faster
[10:15:13] <vms14> by just not printing stuff that won't appear
[10:15:25] <gilberth> Yep.
[10:15:50] <vms14> I have good memory and even better imagination
[10:16:03] <vms14> if only I use them for something profitable
[10:16:15] <gilberth> It's mostly buffering and not drawing too fast, as there are only 60 frames per seconds anyway. I still miss something in X11 to synchronize with vsync.
[10:16:47] <vms14> I'd*
[10:17:18] <gilberth> As I was a student, I once routed -- with some electronics between of course -- vsync to some handshake signal on the RS232 to get interrupts.
[10:17:32] <ck_> why would you willingly get interrupted smh
[10:18:17] <vms14> to escape from a situation you don't like
[10:18:48] <gilberth> To get woken up essentially.
[10:19:19] <vms14> then just set an alarm
[10:19:30] <ck_> vms14: so, a timed interrupt?
[10:19:46] <gilberth> vms14: How would I synchronize with the screen?
[10:20:01] <gilberth> Or the video signal rather.
[10:20:33] <vms14> isn't it everything possible with lisp?
[10:20:43] <vms14> unless having nice documentation and libraries
[10:21:18] <gilberth> vms14: How could I synchronize, when I don't get any information from the video board about the phase of the retrace?
[10:21:34] <vms14> "The documentation is code" "The code are macros"
[10:21:45] <gilberth> And no, an SVGA board has no retrace interrupt of its own.
[10:22:09] <vms14> I never looked at this stuff
[10:22:16] <gilberth> I am olde.
[10:22:31] <vms14> looking at forth I wonder if I should go asm and play with the framebuffer
[10:22:34] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[10:22:54] <vms14> actually I could choose any arch and micro as there are emulators and cross assemblers
[10:22:57] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[10:23:10] <gilberth> Cocoa does lock me on vsync by itself. And otherwise I could use GL, but I guess that is all mood with those glorified modern composing window managers anyway.
[10:23:16] <vms14> but I don't know what to choose
[10:23:56] <vms14> I think in write assembly for a console like a gba or the snes, they would give an intro to gamedev and assembly at same time
[10:24:34] <vms14> also the game boy color is kind of interesting but idk if I'll get a gbz80 assembler for netbsd
[10:24:51] <gilberth> Isn't the GBA a Z80 of sorts?
[10:25:17] <vms14> the gameboy has/had a variation of the z80
[10:25:27] <vms14> but a z80 assembler won't work
[10:25:42] <gilberth> Why not picking something RISCy instead?
[10:25:50] <gilberth> * pick
[10:26:03] <vms14> gilberth: I want suggestions, I have no idea
[10:26:17] <vms14> I want something that can get me an intro to asm
[10:26:29] <gilberth> You want to play with a game console. I know nothing about game consoles.
[10:26:32] <vms14> and I have a lot of choices as emulators xD
[10:26:44] <vms14> not really with a game console
[10:27:01] <vms14> but I was considering them as the old ones used asm
[10:27:33] <gilberth> You can still use assembler, even with Linux :-p
[10:27:35] <vms14> I'm looking for an emulator that has a screen where I can draw a point
[10:27:56] <vms14> and a common assembler so it exists in netbsd
[10:28:24] <vms14> yes, I could just go for the asm of my machine
[10:29:11] <vms14> but I think as learning purposes there are much better choices, specially when I don't have to invest any money since there is emulators for a lot of things and it's likely I'll have a cross assembler
[10:29:12] <gilberth> Well, if it is only for banging out pixels, you could use SDL to give you a frame buffer and then call your assembly code. But that's no "real" hardware. Or you write a boot sector for some PC emulator :-)
[10:30:17] <gilberth> Depends. I won't recommend x86 for learning assembler. It's not a very orthogonal ISA.
[10:30:27] <vms14> but this stuff is only tempting if I put forth inside that
[10:30:44] <vms14> gilberth: that's why asked for suggestions
[10:31:03] <gilberth> You could partner with dave0 and implement Forth for my B32, I have yet to build.
[10:31:04] <vms14> I mean, what do you think is the best arch/platform to learn assembly?
[10:32:03] <gilberth> I learned assembly, because once upon a time I didn't have anything else.
[10:33:02] <gilberth> And it depends on what your focus is. Do you want to feel the crippled, tiny environment of some 8-bit micro? Or would a 32-bit or perhaps 64-bit platform also do?
[10:33:35] <gilberth> Do you want to learn how it was to access HW, or do you just want to hack in assembly?
[10:34:01] <vms14> gilberth: I think the micro
[10:34:32] <vms14> embedded systems are for me like the maximum goal I can get in my life
[10:34:38] <gilberth> Then White_Flame perhaps would suggest the 6502 and I would prefer the 8080.
[10:34:50] <vms14> for some reason they fascinate me, yet I never went that path
[10:35:12] <gilberth> vms14: 8-bit doesn't play a role with embedded systems anymore. 32-bit MCUs are dirty cheap these days.
[10:35:12] <vms14> but my goal is learn software and hardware and get to the line that separes them
[10:36:04] <vms14> gilberth: actually I dream with breaking some random device and stealing the microcontroller it has to do random stuff
[10:36:22] <gilberth> That's pretty feasible.
[10:36:46] <vms14> in a way that I could take a radio, video, or whatever and steal stuff and make something with it
[10:37:22] <gilberth> You need to find some device with accessible debug/in-system-programming PINs. People have hacked smart light bulbs for instance.
[10:37:53] <vms14> when I had a look for some reason the pic series called my attention more than the arduinp
[10:38:30] <vms14> I think arduino abstracts too much and it's not the "raw" feeling I want
[10:39:08] <moon-child> you don't need to use the arduino library suite to use an arduino
[10:39:09] <gilberth> vms14: I really can't recommend some specific platform. But given that you want to hack real devices eventually, I'd say: Stear clear of the ancient 8-bit stuff and find some RISC 32-bit platform. 32-bit ARM assembly is actually pretty basic and orthogonal. But so are most RISC ISAs.
[10:39:10] <vms14> and btw I have no money to even buy a cheap programmer
[10:39:12] <moon-child> ultimately it's just an mcu
[10:39:52] <vms14> gilberth: what's the arch/platform you liked the most
[10:40:06] <gilberth> There are plenty board that could be attached to just USB for programming.
[10:40:31] <vms14> I have a rpi3 plenty of dust, I don't have a use for it
[10:41:10] <vms14> don't even know if it will boot, bought it because I wanted a umpc but I was disappointed when netbsd had no drivers for the rpi screen
[10:41:20] <gilberth> vms14: I have not so much experience and my information is dated. I jumped onto NXP LPC21xx in 2003 or so and sticked to it. That's outdated, these days MCUs are a bit larger than that.
[10:41:49] <vms14> I know a guy who loved mips assembly but idk why
[10:42:14] <gilberth> And this went into actual production, so different considerations like supply and costs were a concern.
[10:43:14] *** Joins: jeosol (~jeosol@user/jeosol)
[10:43:15] <gilberth> vms14: We did some MIPS at the uni. The teacher for CPU design was a MIPS guy.
[10:44:38] <gilberth> Does not make much a difference. The RISC ISAs are all three-address in contrast to the two-address x86 and often one-address 8-bit ISAs.
[10:44:56] <gilberth> And there is RISC V which seems to gain some momentum.
[10:45:29] <vms14> I think it does not matter much what arch/platform I choose as I'm not "producing" anything so I'm not tied to any feature need or resource requirement
[10:45:45] <vms14> my only need is learning so I should choose the most documented one
[10:46:20] <vms14> which is x86?
[10:46:42] <gilberth> It does. MIPS/ARM/RISCV etc don't matter much. But x86 is different and 8080 is yet different and 6502 yet more crippled. IHMO.
[10:46:44] <dave0> vms14: the ones for ibm-pc's
[10:47:40] <gilberth> vms14: They are all well documented. The CPUs are.
[10:48:23] <vms14> gilberth: better said: the most beginner friendly one
[10:48:36] <gilberth> B32 :-) Not.
[10:49:06] <vms14> I was thinking in the "easiest" but, easy vs nice introduction wins the introduction
[10:49:23] <vms14> thats why I said documented
[10:49:55] <gilberth> vms14: I'd go with a RISC then. (1) you have plenty of registers (2) they are all alike (3) instructions are three-address. Three-address means that insn take three "addresses", you can add R1 to R2 and store the sum in R3. "add r3, r1, r2"
[10:50:08] *** Joins: shka (~herr@109.231.0.226)
[10:50:16] <gilberth> The registers are all alike.
[10:50:21] <vms14> what I have to find is something that let's me get started as soon as possible while maintaining my interest and teach me the general concepts
[10:50:38] <gilberth> Unlike with the x86 where you still cannot do everything with every register.
[10:50:59] <moon-child> in modern x86, you can do pretty much anything with any register
[10:51:14] <gilberth> moon-child: MUL? DIV?
[10:51:24] <moon-child> imul can take any register
[10:51:33] <moon-child> div is still restricted
[10:51:37] <moon-child> cray and forwardcom have nice syntax so you can say e.g.  r3 <- r1+r2.  But neither is, ehm, particularly usable
[10:51:53] <gilberth> I can do EBP = EBX * ESI?
[10:52:21] <gilberth> Wait, it's two address. EBP = EBP * ESI then.
[10:52:23] <moon-child> it's two-address still
[10:52:28] <moon-child> yeah
[10:53:10] <gilberth> Anyhow I find an orthogonal three address ISA easier.
[10:53:28] <moon-child> oh, there is also a three-address version now
[10:53:30] <moon-child> mulx
[10:53:48] <shka> good morning, still no war, yay
[10:53:54] <moon-child> yay!
[10:54:11] <gilberth> moon-child: Does it work on my IBM-XT? scnr
[10:54:47] <moon-child> (also three-address shifts.  And if your shit is vectorizable pretty much everything is 3-address)
[10:55:36] <gilberth> Ok. But we still write ADD as LEA :-)
[10:56:12] <moon-child> hey, lea is a 5-address fma!
[10:57:15] <gilberth> See, too irregular for me as a row-eater.
[10:57:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:57:55] * moon-child has been known to eat corn both in rows and in columns
[10:58:51] <gilberth> You can't decide?
[10:59:17] <moon-child> I am afraid of commitment.  I want to do everything!
[11:00:09] <gilberth> Oh. I am a lost cause. Calculus and me will never be best friends.
[11:02:28] <vms14> I have this in netbsd https://rgbds.gbdev.io/
[11:02:29] -ixelp- Home — RGBDS online docs
[11:03:22] <vms14> so I could go for the z80 and go for the gbz80 later which will just have minor differences
[11:03:59] <vms14> and I found the gameboy to be interesting when I saw how you program in it
[11:04:08] <vms14> felt like a hardware api
[11:13:20] <Alfr> moon-child, some more options: diagonal, then bands (upper, lower first or alternating), lower/upper triangle, reorder columns/rows minimizing band width and proceed with one of the previous methods.
[11:13:55] *** Joins: jrx (~user@2a01cb08811c800063c1ee6b254eca0f.ipv6.abo.wanadoo.fr)
[11:14:03] <vms14> https://www.asm80.com/
[11:14:03] -ixelp- ASM80 - online assembler for 8bit microprocessors
[11:16:53] <White_Flame> https://www.kuvaton.com/kuvei/uutta_tuosta.jpg
[11:17:30] <gilberth> Heh, that could be me. :-)
[11:17:47] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:18:37] <vms14> White_Flame: it happens me but also this
[11:19:11] <vms14> me: "should do something useful" also me: "should I learn asm"
[11:19:59] <vms14> the todo list never stops growing and the more you learn the more it grows
[11:20:11] <Alfr> moon-child, also identify the ends and make a torus for some more simple patterns. But don't make a Klein bottle, people are know to get lost in them as they tend to fail to find their way to its outside.
[11:20:15] <vms14> you'll have to live with that
[11:20:48] <vms14> or discard almost everything and choose one or two
[11:21:00] <White_Flame> Alfr: why bother looking for the outside when the inside is equivalent
[11:21:32] <Alfr> White_Flame, now you ruined it. :(
[11:21:48] <Alfr> *'ve
[11:25:58] * White_Flame turns Alfr's klein bottle inside-out
[11:32:56] <hayley> https://www.change.org/p/u-s-house-of-representatives-make-whiny-congressmen-play-violent-video-games
[11:32:57] -ixelp- Petition · Make whiny congressmen play violent video games · Change.org
[11:35:38] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:38:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:39:04] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:40:57] *** Quits: jrx (~user@2a01cb08811c800063c1ee6b254eca0f.ipv6.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.2))
[11:41:06] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[11:47:33] <semz> make them stream it
[11:48:25] <shka> good morning! https://www.youtube.com/watch?v=c_FAGSiyiR4
[11:48:25] -ixelp- Dog Eat Dog No Fronts - YouTube
[11:57:57] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[12:00:15] *** Joins: razetime (~quassel@49.207.198.36)
[12:00:55] *** Quits: razetime (~quassel@49.207.198.36) (Client Quit)
[12:04:23] <selwyn> shka: there won't be war
[12:04:41] <selwyn> zelensky, the president of ukraine, is still asking to see evidence of invasion preparations
[12:05:44] <shka> yeah, you would do that to stop your economy from tanking
[12:05:59] <shka> and international capital leaving
[12:06:00] <selwyn> whole thing is exaggerated by anglo media without evidence
[12:06:14] <selwyn> i am kind of worried that all the bullshit might manifest something 
[12:06:19] <selwyn> but i don't think it is likely
[12:07:46] <selwyn> well, we must ask ourselves why america is happy to see ukraine's economy tank
[12:11:27] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:15:05] *** Joins: mzan (~quassel@mail.asterisell.com)
[12:26:09] <gilberth> Rather tell me, why I see a 20ms latency between key-press event coming in and the final buffer flip to make the modified buffer visible. That's way too slow.
[12:27:29] <gilberth> The curious thing is, this latency varies a lot. At times it's only 2ms, which would be barely acceptable.
[12:27:40] <moon-child> would it?
[12:28:04] <hayley> https://youtu.be/MYQL1zp-zco?t=822
[12:28:05] -ixelp- My Little Pony: Friendship Is Magic Season 1 Episode 4 Applebuck Season - YouTube
[12:28:17] <moon-child> say, 8ms average vsync time, 16ms double buffering.  Add a few ms to propagate events through different paths.  5ms monitor response time.  10-20ms debouncing
[12:28:40] <gilberth> I'd say so. I measure the simplest thing: Just adding a character. I need some head room for editing commands doing more.
[12:29:08] <moon-child> well, is that the overhead of adding one character, or the overhead of the whole shabang _plus_ adding one character?
[12:29:24] <gilberth> moon-child: Barely making the 16ms would mean 100% CPU from just hitting a key at 60 keystrokes a second. I believe I can do better.
[12:29:25] <moon-child> i.e. do you expect adding two characters to take twice as long? (probably not)
[12:29:53] <moon-child> do you render a new frame for every event you receive?
[12:30:09] <gilberth> moon-child: I have no idea at the moment.
[12:30:17] <moon-child> I should rather batch all the events I receive in between frames, rendering at whatever rate the monitor refreshes
[12:30:25] <gilberth> moon-child: Only the part that actually changed.
[12:30:26] <moon-child> there is not much point in updating more frequently
[12:31:05] <gilberth> I batch already, my whole design is centered around that.
[12:31:58] <gilberth> And it actually feels clumsy, too. I want more head room.
[12:32:24] <moon-child> ok.  So what is the problem?  You say  receive event + render + submit is 20ms.  So you go to  receive event + receive event + render + submit; that should also be close to 20ms, as render + submit is the hard part.  Unlress I am missing something
[12:33:29] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:33:37] <gilberth> Actually I spend less than 1ms in "rendering" that is computing the sending requests to the display server.
[12:34:15] <gilberth> But, hey, I should look at how large the socket send buffer is. Isn't a socket buffer rather small by default?
[12:34:16] <moon-child> ... oh
[12:34:18] <moon-child> well
[12:35:08] <gilberth> Multiple threads are involved, I may face scheduling issues. I don't know. I'll need to rest anyway, perhaps I have an idea tomorrow.
[12:41:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:45:52] <gilberth> Maybe it's also some PROCESS-WAIT-FOR lurking there. *sigh*
[12:46:30] <gilberth> This leftover from the Lisp Machine is lurking everywhere.
[12:46:51] <shka> lisp machines are dead, but their legacy lives on
[12:47:27] <gilberth> Well, with cooperative multithreading this was fine too.
[12:48:31] <gilberth> I mean, you wait on some predicate. When you wait, by definition all other threads^Wprocesses wait too, so your predicate cannot change.
[12:49:39] <gilberth> The only things that can change is the availability of I/O and with e.g. CMUCL there is an extra PROCESS-WAIT-FD or sth to augment the central select(2) loop.
[12:56:07] <selwyn> it is said that symbolics machines could do hdtv
[12:56:20] <selwyn> what would that actually mean at the time? i assume it is not our 720p
[13:03:15] <hayley> I saw a video that I swear said 1080p.
[13:03:29] <hayley> https://www.youtube.com/watch?v=KppVP8PiZag
[13:03:29] -ixelp- TLM Symbolics Siggraph Dallas 1990 The Quest for HDTV Interview - YouTube
[13:04:38] <hayley> Yep, 1920 pixels.
[13:10:46] <hayley> karlosz: "the people there [in MPS] are not really "there", so to speak"
[13:11:14] <hayley> stylewarning: "I heard the MPS people are loonies"
[13:11:25] <hayley> God damn
[13:15:21] <selwyn> thats surprising
[13:16:19] <selwyn> drmeister didn't mention anything like that
[13:16:39] <selwyn> though i guess karlosz would know
[13:18:37] <shka> karlosz sounds like a smart and honest guy :P
[13:19:55] <hayley> drmeister told me he struggled to find support, but no mention of mental issues.
[13:21:48] <selwyn> i was interested in mps for real time gc, which does exist under licence
[13:27:46] <hayley> How real time? You can still give it a soft target.
[13:31:38] <selwyn> well, i concluded that it was not a high priority to use real time gc in the end
[13:31:45] <selwyn> would have been for vr
[13:31:48] <selwyn> so not that hard
[13:32:59] <selwyn> the options were: use clasp with mps, get sbcl to use mps or write a new gc for sbcl
[13:33:44] <selwyn> in the end i decided to just use sbcl and worry about gc performance if it ever became a factor
[13:33:45] <hayley> 1. Loonies + drmeister 2. Loonies + Katzman 3. No one
[13:33:59] <selwyn> hayley: yes, you have summed it up :D
[13:34:26] <selwyn> well, with clasp the concerns were that it doesn't run on windows, speed and stability concerns
[13:36:27] <selwyn> no point making vr experiences that pc gamers can't have
[13:40:05] <hayley> To my knowledge, MMTk only has stop the world connectors, other than the G1 port which idk if it works.
[13:40:22] <selwyn> blockchain? i have enough trouble with my keychain
[13:42:12] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[13:43:21] <dave0> not me i'm totally OCD
[13:47:18] <hayley> https://www.tomshardware.com/news/amds-market-cap-surpasses-intel
[13:47:19] -ixelp- AMD's Market Cap Surpasses Intel for the First Time in History | Tom's Hardware
[13:48:53] <hayley> Sadly this was due to introducing more shares from the Xilinx acquisition, so gilberth is no richer.
[13:53:19] <selwyn> intel is making a xilinx
[14:04:30] <shka> interesting
[14:07:48] * hayley tries to remember if beach organised SICL organisation cloaks on Libera
[14:25:11] <selwyn> you are supposed to laugh at the boomer jokes
[14:27:21] <hayley> Someone was saying on Matrix that IRC was only used for talking to boomers.
[14:27:52] <shka> makes sense
[14:27:58] <hayley> Funny, I have been accused of having a boomer taste in music. But indeed I do talk to beach and gilberth a lot (though idk what boundaries for generation names are).
[14:33:43] <selwyn> pink floyd is real boomer shit
[14:34:10] <selwyn> roger waters is too old to be a proper boomer i think
[14:34:50] <semz> i think boomers would be around 55-75 years old now, but the word has lost all meaning at this point
[14:36:09] <hayley> That same person also said Lisp was a boomer language. "But JMC was born in the 1920s." "That's even worse!"
[14:37:25] <shka> that counts as the greatest generation language?
[14:38:18] <semz> greatest language by the greatest generation
[14:39:23] <hayley> https://www.youtube.com/watch?v=hPBYdy0UF3w
[14:39:23] -ixelp- The Greatest Show On Earth - YouTube
[14:48:40] <pl> hayley: it's common to use IRC when talking to artillery and bombers, but rarely boomers ;)
[14:54:49] <hayley> https://www.youtube.com/watch?v=GAj89NEqX-M
[14:54:50] -ixelp- Bombers - YouTube
[14:58:08] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[14:59:20] <hayley> Is there a way to flush a toilet quietly, without having to modify the internal plumbing? /me is already in deep shit for being up at 10:30pm.
[15:00:18] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[15:04:27] <hayley> Doesn't matter, it's now...someone else's problem. Hardly my fault my sleep schedule is screwed, it's mostly (the tail end of) adolescence. And admittedly talking to friends in Europe, but mostly the former when someone asks.
[15:06:22] <shka> gosh, that stupid line-of-sight problem took away two days out of my life
[15:06:37] <shka> but at least now it works very well
[15:06:48] <hayley> At least it wasn't parallelising GC.
[15:06:57] <hayley> Now I don't know what to do with myself.
[15:09:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:09:04] <shka> hayley: https://www.youtube.com/watch?v=Ij99dud8-0A
[15:09:05] -ixelp- Iron Maiden - Wasted Years (Official Video) - YouTube
[15:09:31] <shka> i was supposed to be working on a demo, but that thing sucked me in
[15:09:31] <hayley> Wasted years would be Netfarm.
[15:11:17] <shka> hayley: do you happen to have idea how to quickly read single-floats from *standard-input*?
[15:11:27] <hayley> Nope.
[15:11:42] <shka> mmm, binary maybe...
[15:11:53] <shka> oh, whatever
[15:13:01] <moon-child> hayley: you are not allowed to wake up in the middle of the night to pee?
[15:13:31] <hayley> Apparently.
[15:13:41] <moon-child> o.o
[15:14:00] <hayley> But now my choice is somewhat simpler: 1. Continue trying to parallelise gencgc by magic 2. Port MMTk by magic
[15:14:41] <hayley> The latter "just" needs image dumping, list linearisation, conservative stack scanning and some way to figure out what the damn write barrier should be.
[15:14:42] * moon-child wonders whether 'deep shit' was a pun
[15:15:06] <moon-child> the former seems more enlightening.  And both probably involve a lot of c
[15:15:17] <hayley> I would not leave shit for someone else to flush tomorrow.
[15:15:35] <moon-child> then no mmtk, I guess
[15:15:40] <moon-child> ;)
[15:16:00] <hayley> MMTk is Rust though. And I would not say I have found trying to understand gencgc enlightening so far.
[15:16:02] <dave0> please flush and remember to wash your hands
[15:16:13] <moon-child> hayley: exactly, hence 'shit for someone else to flush tomorrow'
[15:16:24] <hayley> Hm.
[15:17:25] <hayley> I would not expect the SBCL maintainers to be happy with mainlining Rust code too. But C code is more suspect w.r.t safety.
[15:17:44] <hayley> Most notably, building MMTk requires a regex engine that is not one-more-re-nightmare for some reason.
[15:17:48] <moon-child> I would not expect a rust gc to be particularly safe either
[15:19:29] <hayley> There was a paper on that(tm). They apparently only had to reach for unsafe a few times. But in my situation, I would likely reuse C code to manipulate object layouts, so the effect is reduced.
[15:19:30] <shka> well, I would rather use Rust then C
[15:20:04] <shka> and Go over both, but it is not an option
[15:20:31] * shka is not fond of any of those
[15:20:59] <moon-child> rust assumes that no pointers can alias, including in unsafe code (modulo volatile load/stores).  GC workload violates such assumptions.  So even if you abstract 'unsafe' bits, I would not be surprised if there were bugs lurking
[15:21:01] <hayley> Then I'd bring in the Go runtime. Turtles all the way down.
[15:21:12] <hayley> Fair point.
[15:21:21] <moon-child> just because rustc asserts to llvm that all pointers in the 'safe' bits are restrict, but the unsafe code calls them with aliased junk
[15:22:45] <hayley> But I still have two (three?) shit options. Either I reanimate gencgc, suffer in porting MMTk, or somehow invent my own GC (which would be very unlikely).
[15:24:08] <hayley> They would be marginally less shit if I could convince a Lisp company to fund it, but I am not qualified.
[15:27:21] <selwyn> are you motivated by any particular application?
[15:28:06] <neominimum> Is the solution space of gc implementations well defined or are there dimensions that have been unexplored until now?
[15:29:28] <hayley> There are un(der)explored territories, yes.
[15:30:14] <hayley> Particularly I think that "partitioning" schemes, like thread local heaps and the Train should be reconsidered, as they would have better locality.
[15:31:07] <moon-child> hmm
[15:31:34] <moon-child> suppose smalltalk-esque where methods are attached to objects
[15:31:58] <hayley> Compile time/compiler-aided optimisations seem to either just be poor escape analysis, or impose something on the programmer, like regions or borrowing. But there are useful analyses that are neither (e.g. compile time reference counting exists).
[15:32:07] <moon-child> distribute n objects among m heaps (n >> m), graph partitioning to put objects that talk to each other frequently on the same heap
[15:32:44] <hayley> Have you read up on the Train?
[15:33:03] <moon-child> I don't think so
[15:33:21] <hayley> Objects live in "cars", and the algorithm tries to move so that references will end up in the same sets of "cars", called "trains".
[15:33:56] <hayley> https://beta.cs.au.dk/Papers/Train/train.html
[15:33:56] -ixelp- Incremental Mature Garbage Collection Using the Train Algorithm
[15:34:28] <moon-child> interesting
[15:36:47] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[15:37:06] <hayley> Unlike the Beta hackers though, I would be okay with a full trace occasionally, since we know how to do concurrent marking and even copying with acceptable overhead.
[15:37:21] <neominimum> Cool that sounds like(in my uneducated opinion) it would suit parallel/concurrent runtime applications
[15:37:53] <moon-child> yes, I was about to say
[15:38:12] <moon-child> reading that page, I think simply taking the hit of rewriting popular objects is probably fine
[15:39:31] <hayley> There is also the Lang-Dupont way of "mark most pages and compact a few", but it requires global tracing. This takes you to how most JVM collectors work.
[15:40:17] <kakuhen> <hayley> "Someone was saying on Matrix..." <- whoever said that is missing out on content offered by xdcc bots
[15:40:53] <Gnuxie> oops i said that 
[15:40:55] <Gnuxie> hi
[15:41:20] <Gnuxie> sup boomers /s
[15:41:55] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[15:42:39] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[15:43:25] <shka> https://ieee-floats.common-lisp.dev/
[15:43:26] -ixelp- IEEE Floats
[15:43:40] <kakuhen> there was a nice album from an xdcc bot that i was unable to find on the usual copyright infringement platforms
[15:44:12] <kakuhen> xdcc  is what makes me keep an irc client installed despite using matrix
[15:44:33] <shka> i bet that parsing integer and then encoding read value to float would be quicker
[15:46:04] <hayley> But, as well as partial GC, I also want to see someone stab at CONS should not CONS its arguments. Bonus: you can write your GC in the target language, as long as you don't try to return objects you allocated between frames. Seems feasible to me.
[15:47:45] <hayley> neominimum: FWIW I am mostly concerned that parallel applications can cons faster than a serial collector can collect, so a concurrent collector won't work, and a STW collector will stop you for a lot of real time.
[15:48:04] <hayley> That also hurts your parallelism too, in my experience.
[15:50:54] <selwyn> return to fixed point arithmetic
[15:51:17] <shka> selwyn: that was a thing in the past?
[15:51:26] <selwyn> yes?
[15:51:38] * shka didn't knew that
[15:51:41] <hayley> It is interesting that the paper indicates very tight space overhead, and they seem to have survived with 10% over the live set.
[15:51:43] <neominimum> Oh, i see. I've not thought about gc much but that makes sense
[15:51:57] <selwyn> my gamedev book has a section on how to hack it together with java
[15:51:59] <shka> oh wait, COBOL has some stuff for fixed point floats
[15:52:01] <selwyn> because it is supposedly faster
[15:52:01] <hayley> Doom was all fixed point, since FPUs were not too common AIUI.
[15:52:09] <selwyn> i don't know if i believe that
[15:52:25] <selwyn> as hayley says, it is inspired by doom
[15:52:25] <hayley> moon-child: Quick get the Agner tables
[15:52:51] <shka> quick, to the AGNER MO... ehem... Manual
[15:53:44] <selwyn> the book, first published in the early 2000s, has a software renderer written in java for fps style games
[15:53:57] <selwyn> the shader is what uses fixed point arithmetic
[15:54:01] <shka> oh
[15:54:03] <shka> ok
[15:54:17] <shka> software shader?
[15:54:44] <selwyn> shader as in the part of the program which does the shading
[15:54:54] <shka> sure
[15:54:58] <selwyn> not really analogous to shaders in the gpu world
[15:55:05] <shka> riiiight
[15:56:06] <selwyn> if you are rendering every pixel on a 640x480 screen its too much :)
[15:56:19] *** Joins: eugercek (~user@user/eugercek)
[15:56:47] <shka> well, wolf3d was doing exactly that
[15:58:41] <shka> is there a library that provides something like read-32bit-fixnum that would call read-byte 4 times?
[15:58:56] <shka> i don't want to write it myself if i don't have to
[15:59:51] <moon-child> (logior (ash (read-byte s) 24) (ash (read-byte s) 16) (ash (read-byte s) 8))?
[16:00:08] <moon-child> ermm add another (read-byte s) in there
[16:00:18] <shka> moon-child: yeah, exactly, but endianess and stuff
[16:00:23] <hayley> Hm, does Nibbles have it?
[16:00:24] <moon-child> and optionally go the other way if you care for endianness
[16:00:30] <moon-child> what stuff is there aside from that?
[16:00:31] <shka> hayley: it should i guess
[16:00:35] <mfiano> fastio if you want buffered reads
[16:00:40] <hayley> I think you can read integers from streams with Nibbles.
[16:00:56] <shka> mfiano: thanks
[16:00:57] <mfiano> maybe accompanied by bitio if you want bit granularity and bit/byte endianness
[16:01:06] <shka> mfiano: btw, you have error in your function
[16:01:22] <shka> ray AABB stuff
[16:01:29] <shka> t6 is wrong
[16:01:53] <mfiano> It works in my game engine, and was transcribed by a reputable book on the topic
[16:02:19] <mfiano> s/by/from/
[16:03:22] <mfiano> Oh I see
[16:03:33] <mfiano> You are certainly correct.
[16:03:44] <mfiano> Odd. Maybe I justtranscribed it wrong and never hit that case
[16:03:50] <mfiano> I will investigate. Thanks
[16:07:58] <mfiano> Confirmed and push fixed. Thank you!
[16:08:06] <mfiano> err fix pushed
[16:08:26] <neominimum> hayley: do parallel gc's generally take the approach of trying to make two, uh, collectors cooperate over the one region. Or do they take the actor approach of each one maitaining its own region, and making them share references for better locality like you mentioned?
[16:10:26] <neominimum> i guess that the actor approach would require a collector to grant access to a sub region for the other to write into or something, too.
[16:14:41] *** Joins: treflip (~user@user/treflip)
[16:27:34] <shka> mfiano: glad to be of a assistance 
[16:30:58] *** Joins: serbest (~ike@user/serbest)
[16:31:17] *** Joins: Brucio-61 (~Brucio-31@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[16:47:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:30:17] *** Joins: lisp123 (~lisp123@94.201.199.103)
[17:36:57] *** Quits: Brucio-61 (~Brucio-31@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[17:48:47] *** Quits: lisp123 (~lisp123@94.201.199.103) (Read error: Connection reset by peer)
[17:59:29] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 256 seconds)
[18:00:10] *** Joins: jrx (~user@2a01cb08811c800063c1ee6b254eca0f.ipv6.abo.wanadoo.fr)
[18:00:17] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[18:01:22] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[18:07:48] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[18:09:55] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[18:10:15] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[18:11:16] *** Joins: drakonis (~drakonis@user/drakonis)
[18:21:15] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 250 seconds)
[18:22:13] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[18:28:27] *** Joins: random-nick (~random-ni@87.116.181.150)
[18:29:16] *** Joins: Brucio-61 (~Brucio-5@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:32:56] *** Joins: lisp123 (~lisp123@94.203.159.21)
[18:32:58] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:35:38] *** Quits: lisp123 (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[18:46:54] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:50:36] *** Quits: Brucio-61 (~Brucio-5@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[19:22:14] *** Quits: jrx (~user@2a01cb08811c800063c1ee6b254eca0f.ipv6.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.2))
[19:27:08] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:40:53] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[19:43:23] *** Joins: aeth_ (~aeth@user/aeth)
[19:43:37] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:43:39] *** aeth_ is now known as aeth
[19:51:32] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:59:26] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[20:20:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[20:32:09] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[20:32:59] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[20:38:07] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[20:39:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:42:05] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[20:45:30] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[20:46:28] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[20:57:34] <shka> gzexe compresses sbcl images rather well
[20:58:55] *** Joins: eugercek (~user@user/eugercek)
[20:59:47] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Quit: i really have to scratch my right butt cheek this time, sorry)
[21:04:30] <vms14> skeemer: do you prefer scheme or common lisp?
[21:19:22] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[21:23:40] <drakonis> https://twitter.com/ShriramKMurthi/status/1492204801895055362 lisp is the carcinization of software
[21:24:16] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[21:25:08] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Ping timeout: 272 seconds)
[21:25:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[21:27:04] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:44:27] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[21:49:10] <shka> weird
[21:50:27] <drakonis> it is the endpoint of carcinization in software, that is.
[21:54:30] <clothespin> what?
[21:55:43] <clothespin> good morning
[21:55:52] <clothespin> i need coffee
[21:59:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:00:07] <selwyn> good morning
[22:00:13] <APic> ☺
[22:03:20] <clothespin> as soon as the coffee cools off ill slam it
[22:04:55] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:07:01] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[22:09:52] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:12:36] <clothespin> got my fix
[22:14:41] <clothespin> we need more/better parallel programming systems for CL
[22:15:15] <clothespin> like cilk
[22:15:52] <White_Flame> I always read your nick as clothe-spin for some reason
[22:17:03] <clothespin> if you say it fast enuf it doesn't matter
[22:20:03] <clothespin> anybody got any cool playlists on spotify?
[22:24:21] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[22:33:54] *** Quits: cosimone (~user@93-47-229-224.ip115.fastwebnet.it) (Remote host closed the connection)
[22:36:36] <selwyn> is there any reason to use rust instead of c?
[22:42:46] <selwyn> i would rather use c for any unsafe stuff but i can't justify why
[22:46:12] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 272 seconds)
[22:47:07] <White_Flame> I need to learn enough rust to make such determinations, even if I never use it
[22:47:16] *** Joins: notzmv (~zmv@user/notzmv)
[22:47:52] <clothespin> can you wrap c in rust?
[22:48:40] <clothespin> does cffi work with rust?
[22:57:30] *** Joins: cosimone (~user@93-47-229-224.ip115.fastwebnet.it)
[22:57:37] <GreaseMonkey> looking at that link from earlier, i think this sums it up: `This distinction is kind of a wild conflation of interpreted vs compiled and "languages that have a big population of enthusiasts obsessed with winning the Benchmark Shootout vs not".`
[22:58:43] <clothespin> not meaningful data?
[23:00:41] <GreaseMonkey> also if someone starts blathering on about how Rust is the best just because it comes second in the "Energy" column, then perhaps they should be programming in C :^)
[23:04:49] <GreaseMonkey> the systems-level programming language i want to see flourish at the moment is Zig
[23:06:42] <clothespin> what is programming language energy?
[23:06:56] <GreaseMonkey> whatever is perceived to make Rust look good
[23:07:17] <GreaseMonkey> ... in all seriousness it's probably energy consumption during execution
[23:07:27] <selwyn> i think the argument is that rust = c energy + safety
[23:08:18] <GreaseMonkey> i wonder if ethereum should be ported to rust
[23:08:42] <GreaseMonkey> just so people can safely claim that rust is playing their part in wasting energy on useless calculations
[23:10:50] <GreaseMonkey> admittedly what made me take a stance strongly against Rust (well, moreso against the community) was the Python `cryptography` library having stuff ported to Rust, which broke a bunch of CI pipelines
[23:11:19] <GreaseMonkey> you could smell the sunk-cost fallacy coming from them from the other side of the world
[23:14:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:18:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:18:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:28:59] *** Joins: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397)
[23:43:36] <gilberth> Good morning #lispcafe!
[23:47:42] <shka> gilberth: hi
[23:54:16] <gilberth> Sigh. I found all kind of spots that I could optimize. My rubout handler^W^Winput editor processes a key stroke in like 200us, which ought to be suffice for now, But the overall latency still is at 20ms. As multiple threads are involved, it's not too easy to figure out where the time is spend. Perhaps I'll measure by artificially make certain routines slower.
[23:58:11] <clothespin> hi gilberth
[23:59:26] <shka> nibbles is a pretty handy library, but appears to generate surprising amount of garbage
