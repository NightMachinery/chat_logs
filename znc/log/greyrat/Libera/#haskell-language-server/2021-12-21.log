[00:04:32] <jneira[m]> <michaelpj[m]> "opinions: is it acceptable to..." <- maybe the long version in the first mention and a (HLS hereinafter)? or whatever 
[01:31:54] *** Joins: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com)
[01:39:59] <alanz> wz1000, you pushed 7 mins before me. Damn.
[03:50:19] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[04:24:51] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[04:25:25] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:28:48] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:32:15] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:38:18] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:38:45] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:39:42] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:40:08] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:41:19] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:41:48] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[04:41:52] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[05:19:01] *** Joins: hololeap_ (~hololeap@user/hololeap)
[05:19:59] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[05:43:29] *** Joins: berberman_ (~berberman@user/berberman)
[05:44:32] *** Quits: berberman (~berberman@user/berberman) (Ping timeout: 240 seconds)
[06:16:14] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[07:10:57] *** hololeap_ is now known as hololeap
[09:23:45] *** Quits: juhp (~juhp@128.106.188.82) (Read error: Connection reset by peer)
[09:24:29] *** Joins: juhp (~juhp@128.106.188.82)
[09:38:06] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:39:43] *** Joins: hololeap (~hololeap@user/hololeap)
[11:14:13] <wz1000> alanz: sorry...
[11:32:48] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:07:20] <anton-latukha[m]> +====
[12:09:26] <anton-latukha[m]> CI caches are fixed - now CI cycle works properly & is faster by 50 minutes.
[13:15:43] <anton-latukha[m]> graph
[13:21:56] *** Joins: ttylec (uid532690@id-532690.helmsley.irccloud.com)
[13:23:37] <ttylec> hi again, yesterday I was asking about help with investigating foldl1 crash under vscode. Thanks, it worked. Problem was caused by minimumBy and I made a tiny pull request solving that (https://github.com/haskell/haskell-language-server/pull/2518)
[13:25:16] <ttylec> however, in order to investigate I tried to compile haskell-language-server with profiling under apple silicon; I just want to share experience and ask at the same time are those issues like "yeah we know that xyz does not well on apple silicon" or should I submit bug reports?
[13:27:26] <ttylec> the first issue was with stack. So far I was using only stack for my projects. `stack build` fails on `shake` due to simplifier ticks exhausted. I tried to pass suggested arguments via `--ghc-options="-fsimpl-tick-factor=1000"`, but it didn't change anything
[13:28:45] <ttylec> so I tried cabal build; worked nicely for normal build, but `cabal build --enable-profiling` failed when linking haskell-language-server executable with segmentation fault (llvm13 from homebrew)
[13:30:08] <ttylec> so I tried nix, installing it as x86_64 via rosetta; that finally worked and I was able build with profiling
[13:35:37] <alanz> wz1000, no problem. And I always force push with lease, so would not have clobbered it either
[13:36:17] <wz1000> alanz: I'm making some more progress on porting the codeactions over
[13:36:52] <alanz> good to hear. I will leave you to it then, shout if you need some help
[13:37:44] <alanz> I should probably get back to apply-refact, for hlint.  But I have been hoping I can get HLS for it. I have had to work without it for so long, on the exactprint stuff
[13:38:06] <wz1000> alanz: to a first approximation, functions that deal with DeltaPos and KeywordId can just ignore those?
[13:39:05] <alanz> as a first pass I just comment out/cpp those. All the stuff that modifies annotations.  Then come back to it when I have a live failing test case, and inspect the AST and work appropriately
[13:39:36] <wz1000> ok, sounds like a good plan
[13:40:08] <alanz> And the Annotations type from retrie is now gone. I was considering putting in a compatibility version, just to keep existing code a little bit compatible.
[13:40:32] <alanz> But fundamentally you work differently with the annotations now, as they are in the tree, not next to it
[13:40:50] <wz1000> right that makes sense. Things seem a lot simpler now
[13:41:11] <alanz> So making it work with GHC 9.2, and the previous ones, is likely to require a big CPP switch on each function
[13:41:16] <wz1000> of course the CPP prevents them from actually being simpoler
[13:42:12] <alanz> For things like ghc-exactprint and apply-refact, and retrie, I think, we just limit it to ghc 9.2 and above, and let cabal choose the right one for the current situation
[13:42:38] <alanz> because the CPP was getting insane
[13:57:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:57:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:58:55] <wz1000> alanz: can you review the parser and exactprint changes in https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6224 ? I made `-haddock` compatible with `KeepRawTokenStream` and exact printing
[13:59:16] <alanz> ok
[13:59:24] <wz1000> Lexer I mean, not parser
[13:59:39] <wz1000> parser changes are quite minimal
[13:59:44] <wz1000> thanks!
[14:00:11] <alanz> wz1000, 334 commits behind?
[14:00:46] <wz1000> ah yes, I'll push a rebased version. But the conflicts aren't very relevant
[14:00:52] <alanz> ok
[14:01:50] <wz1000> the GHC.Hs.Docstring module is also relevant
[14:03:06] <alanz> ok
[14:03:34] <wz1000> alanz: what is the Int returned by runTransform?
[14:04:03] <alanz> it is the counter used for assigning new unique SrcSpans.
[14:04:26] <alanz> So that you can chain transforms and have unique spans across them
[14:04:55] <alanz> But unique spans are not quite as vital as they used to be
[14:30:12] <jneira[m]> ttylec: thanks for sharing your issues, I would open an issue for stack in our issue tracker, as I am not sure if it is related with the arch
[14:30:22] <jneira[m]> * issue for the stack, * stack one in our
[14:31:41] <jneira[m]> the cabal one is clear related and I would looking for similar issues in the ghc issue tracker and open a new one if necessary
[14:31:57] <jneira[m]> s/the cabal one is clear related and I would looking for similar issues in the ghc issue tracker and open a new one if necessary/the cabal one is clear related with the arch and I would look for similar issues in the ghc issue tracker and open a new one if necessary/
[14:32:24] <alanz> wz1000, I did not see anything obvious on 6224.  Does it mean we can run haddock mode as normal, and still be able to exactprint everything?
[14:32:28] <jneira[m]> * issue for the stack, * stack one in our
[14:32:34] <wz1000> alanz: yes
[14:32:49] <alanz> And it would be worth testing it on parsing the whole of hackage or some such
[14:32:52] <alanz> nice
[15:07:27] *** Joins: arrowd (~arr@2.94.236.140)
[15:41:44] *** Quits: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:44:37] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[16:21:02] <anton-latukha[m]> +====
[16:21:02] <anton-latukha[m]> I've sorted the reports by `sort:updated-desc` & went through last 6 (oldest) pages of them, & where I can, added relevant information (so people remeber to close old reports/or add new info to them), & when report probably got addressed in HLS, asked if report is still valid.
[17:46:23] *** Joins: bodisiw (~bodiskw@128.163.238.115)
[17:52:49] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:25:34] <sm> ttylec: pretty sure I built shake with ghc 8.10.7 arm &'brew llvm 13 recently and did not hit that problem
[18:36:17] *** Quits: bodisiw (~bodiskw@128.163.238.115) (Quit: Leaving)
[18:44:05] <michaelpj[m]> anton-latukha: thanks, that's useful!
[18:47:55] <anton-latukha[m]> Well - so far I mostly got several `jneira` responses with additional details to some reports ðŸ¤£. So I do not know was it worth it or not (but probably was worth trying to ping people on +1/2 year old reports).
[18:58:27] <michaelpj[m]> we could consider using stalebot or something, although I don't love it
[18:59:03] <michaelpj[m]> we have a *lot* of issues that are something like "HLS didn't work on my particular setup", we didn't get to the bottom of it, and now it's a year later and who knows whether it is better or not...
[19:30:34] <jneira[m]> I usually do a round from time to time, trying to reproduce the easy ones or asking to the reporter if it is still reproduced
[19:31:13] <jneira[m]> then I label them with needs confirmation and close in the next round, after some days
[19:31:46] <jneira[m]> or close directly if I suspect it can be fixed
[19:33:23] <jneira[m]> making clear to reporter they can reopen the issue if it still is reproduced in their end
[19:34:33] <jneira[m]> anton-latukha: your help is very welcome! don't hesitate in continue pinging reporters
[19:35:37] <jneira[m]> there are several persistent issues affecting lot of users, like stack ones but I think they are conveniently labeled as blocked
[19:36:40] <anton-latukha[m]> Ok - I ended with tweaking the CI in https://github.com/haskell/haskell-language-server/pull/2503, branch is open for continuaition of dev work
[19:37:48] <anton-latukha[m]> I found several obscure (but at the moment not so critical) bugs in the process.
[19:38:50] <anton-latukha[m]> (in the CI configuration)
[19:40:42] <anton-latukha[m]> (I currently included fixes to them inside that brunch)
[19:41:13] <anton-latukha[m]> Apparently:
[19:41:46] <anton-latukha[m]> While GitHub advertises that `if: ` statements do not need escaping and are treated as expressions.
[19:42:09] <anton-latukha[m]> `if: ! steps.compiled-deps.outputs.cache-hit`
[19:42:26] <anton-latukha[m]> `steps.compiled-deps.outputs.cache-hit` being type Boolean
[19:42:38] <anton-latukha[m]> * where: `steps.compiled-deps.outputs.cache-hit` being
[19:42:51] <anton-latukha[m]> & `!` being logical negation.
[19:43:44] <anton-latukha[m]> While superflous sectioning : `if: ( ! steps.compiled-deps.outputs.cache-hit )` suddenly make it "work".
[19:43:47] <jneira[m]> could not the unresolvable constraints be avoided with allow-newer in cabal_ghc92.project?
[19:45:01] <anton-latukha[m]> @jneira you are free to take a seat Captain's chair there. I'd done for today ðŸ¤£
[19:45:19] <anton-latukha[m]> s/take/seize/, s/a/the/, s/seat//
[19:45:24] <jneira[m]> and instead comment out CI blocks ifs over ghc versions?
[19:45:36] <anton-latukha[m]> s/@jneira you are free to take a seat Captain's chair there. I'd done for today ðŸ¤£/@jneira you are free to seize the Captain's chair there. I'm done for today personally ðŸ¤£/
[19:46:47] <michaelpj[m]> jneira: I think it would be good if we could have entries in the troubleshooting guide for the "blocked upstream" issues, because they're the sort of things that people tend to bump into repeatedly!
[19:46:59] <anton-latukha[m]> (continuation): but wait - `if: ( ! steps.compiled-deps.outputs.cache-hit )` typechecks & CI works. `if: ( ! steps.compiled-deps.outputs.cache-hit )` would just always return `False`.
[19:49:23] <anton-latukha[m]> michaelpj[m]: I basically was assuming that since report is several years old - upstream probably solved the `blocked upstream`, while that thread not mentioned what is the report upstream thead awaits on - which makes it obscure to the reader.
[19:49:58] <michaelpj[m]> yes, I think we can do this more "on-demand": if you find yourself referring a new person to an old issue, put it in the doc!
[19:50:11] <anton-latukha[m]> The solution there is to put the upstream report link into the name of the report or at the head post.
[19:51:39] <anton-latukha[m]> (I talk about https://github.com/haskell/haskell-language-server/issues/176)
[19:52:14] <anton-latukha[m]> If there is no report - then upstream does not know about the problem & it can not be tracked.
[19:53:48] <anton-latukha[m]> So if `blocked upstream` is set - the main logical situation there is that there is particular upstream report status of which blocks the current report.
[19:54:47] <anton-latukha[m]> Mentioning it in the header allows to simplt hover about the link in the report list to see that bug is not resolved there.
[19:55:08] <anton-latukha[m]> s/Mentioning it in the header allows to simplt hover about the link in the report list to see that bug is not resolved there./Mentioning it in the header allows everyone to simply hover above the link in the report list to see that bug is not resolved there./
[19:55:57] <anton-latukha[m]> (at least that is how it work in my current browser configuration)
[19:56:03] * anton-latukha[m] uploaded an image: (83KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/bBBXFzkuotZidmUnzDOnGFsj/Screenshot-2021-12-21-18%3A25%3A23.png >
[19:57:29] <anton-latukha[m]> Mentioning it in the header is consistent place to look at & allows inspection.
[20:19:19] <jneira[m]> <michaelpj[m]> "jneira: I think it would be good..." <- i think the main ones: load of stack projects and th related are already there
[20:20:35] <jneira[m]> <anton-latukha[m]> "Mentioning it in the header is..." <- yeah put the upstream issue in the title is good idea, you can check it without even go into it
[20:20:56] <jneira[m]> github could provide some meta info about
[22:34:01] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[22:49:40] *** Quits: arrowd (~arr@2.94.236.140) ()
[23:31:34] <anton-latukha[m]> I think it is generally better to merge PRs while contributor knows there are some small details to address. But thank kindly for work & accept PR & not ask more. As asking contributor to further do what we want inside or in the next PR - gives attrition. Merge process a totalitarian class structure by design, & rebase attricion is also real - it is generally better to merge PRs ASAP.
[23:31:34] <anton-latukha[m]> And instead of asking something we wish - when to implicitly say - yes, there are minor details, but this work is already great & we take this work & you are indeed free, to go on with your day or to send another pull request. It indeed feels motivating, liberating & increases trust in people & in the process.
[23:32:03] <anton-latukha[m]> I probably say obvious things to people here.
[23:32:15] <anton-latukha[m]> Just wanted to say them.
[23:33:54] <anton-latukha[m]>  * I think it is generally better to merge PRs while contributor knows there are some small details to address. But thank kindly for work & accept PR & not ask more. As asking contributor to further do what we want inside or in the next PR - gives attrition. PR/review process is a totalitarian class structure by design, & rebase attrition is also real - it is generally better to merge PRs ASAP.
[23:33:54] <anton-latukha[m]> And instead of asking something we wish - when to implicitly say - yes, there are minor details, but this work is already great & we take this work & you are indeed free, to go on with your day or to send another pull request. It indeed feels motivating, liberating & increases trust in people & in the process.
[23:34:20] <anton-latukha[m]>  * I think it is generally better to merge PRs while contributor knows there are some small details to address. But thank kindly for work & accept PR & not ask more. As asking contributor to further do what we want inside or in the next PR - gives attrition. PR/review process is a totalitarian class structure by design, & rebase attrition is also real - it is generally better to rebase/merge PRs ASAP.
[23:34:21] <anton-latukha[m]> And instead of asking something we wish - when to implicitly say - yes, there are minor details, but this work is already great & we take this work & you are indeed free, to go on with your day or to send another pull request. It indeed feels motivating, liberating & increases trust in people & in the process.
[23:34:29] <sm> interesting points anton-latukha. Speaking generally, not about hls specifically, I agree in some cases, eg new contributors (If you want to encourage and train new contributors - some projects deliberately choose not to do that). In other cases, maybe repeat contributors who are lazy/sloppy and creating work for core devs, I would ask more of them. But it's often beter when that is done automatically by CI, not by the reviewer
[23:35:20] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:57] <jneira[m]> Well , there is some lower bound for a  project, f.e. in hls we usually require tests (not absolutely always but we do for minimal complex prs)
[23:37:16] <jneira[m]> i think the key is be clear about the requirements in the contributor guide
[23:37:30] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:36] <anton-latukha[m]> Yes. CI diverts the attention/responsibility for request. Person who deploys rules to CI - actually holds immense power on the project processes, while remaining not noticed. People respond to CI requirements as to algorithm just result & so way easier then to personal.
[23:37:59] <jneira[m]> to break no one expectations
[23:38:27] <jneira[m]> the good thing is ci is somewhat clear
[23:38:33] <jneira[m]> even more than docs
[23:39:36] <jneira[m]> anton-latukha[m]: those addtions (auto formatting, hlit rules, etc) requires consensus between maitainers
[23:39:55] <jneira[m]> but well require tests cant be encoded in ci, no?
[23:40:37] <anton-latukha[m]> jneira[m]: True.
[23:42:31] <sm> it helps when CI is as fast as possible of course, and ideally if contributors can be shown how to easily run the important CI checks locally
[23:42:59] <sm> that's after the "new contributor" stage
[23:44:18] <jneira[m]> and well, the key thing is ask and offer at same time: i ask you for tests but point you to docs, examples etc at same time
[23:44:42] <jneira[m]> nobody can complain with that, no?
[23:44:45] <jneira[m]> :-)
[23:46:11] * jneira[m] are gonna dream with `Data.Aeson.KeyMap` this night
[23:48:40] <sm> I think it's a good question to answer: what level of contributors does this project want to support, and how much effort does it want to spend on that ?
[23:50:32] <sm> IME mentoring inexperienced contributors can be fun, but it can also suck up a lot of resources and payoff is rather low/long term
[23:51:32] <sm> but generally making contributing smoother/less hassle for everybody, that's always a win
[23:53:49] <anton-latukha[m]> Well, that is why I currently try to make sure that CI runs robustly.
[23:56:09] <anton-latukha[m]> sm: I generally look from this perspective & think how it can be done in a way that requires no effort from the both sides.
[23:56:10] <anton-latukha[m]> (would pretend I said anything intelligent there)
[23:56:17] <sm> that and other CI improvement is super valuable, thanks anton-latukha 
[23:57:29] <anton-latukha[m]> Well, to say - if someone would be able to soft-managementy way solve:
[23:57:33] <anton-latukha[m]> https://github.com/haskell/actions/pull/85
[23:57:36] <anton-latukha[m]> Would be thankful.
[23:58:31] <anton-latukha[m]> As I even got blessing form the Neil to bless it the official GitHub Action to run HLint.
[23:59:04] <anton-latukha[m]> & agreed with author to merge/contribute his work into official Haskell channel.
[23:59:44] <anton-latukha[m]> But the situation is stack on that merge for several month now.
