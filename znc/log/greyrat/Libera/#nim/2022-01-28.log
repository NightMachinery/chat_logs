[00:06:07] <arkanoid> is it possible to partially compile a module that calls forward declarations, and link the real procs later on?
[00:12:29] <arkanoid> I mean, compile a file with declarations but no implementations
[00:22:55] <FromDiscord> <Elegantbeef> I do not think so
[00:25:01] <arkanoid> I'm stuck in an uroboro of nim code where I can't find a better solution that putting everything in a single huge nim module
[00:30:13] <FromDiscord> <Elegantbeef> You can do recursive imports if you structure them properly, it just takes know how
[00:31:34] <FromDiscord> <Elegantbeef> I forget how to explain how to structure them
[00:40:48] <FromDiscord> <Forest> https://haste.powercord.dev/exeguqahax.sql anyone able to help? I have no idea how to actually fix this
[00:42:53] <FromDiscord> <Yardanico> That's a bug of the termux-patched nim
[00:43:05] <arkanoid> Eleganbeef, my recipe for disaster is: A "type bound operation `delete` must be defined in the same module with its type", so "proc newFoo(): Foo = new(result, delete); result.setup()" has to be put in same module as "type Foo", but if "proc setup(foo: Foo)" does any logic that requires other modules, it creates spaghetti code 
[00:43:08] <FromDiscord> <Yardanico> They added that landroid-glob to the Nim config file so it always applies
[00:43:13] <FromDiscord> <Yardanico> Even when cross compiling
[00:43:57] <FromDiscord> <Yardanico> https://github.com/termux/termux-packages/blob/master/packages/nim/build.sh#L38
[00:44:04] <FromDiscord> <Yardanico> The seds they're doing are too broad
[00:47:25] <arkanoid> I picked nim to escape from python's difficulties when project size reaches a point, but I'm now facing the reality that also nim is no ready for large projects
[00:48:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[01:03:57] <FromDiscord> <Phil> Beeeeeeef
[01:07:23] <FromDiscord> <Phil> If you've got any clue about this one I'll be very happy to hear it: https://discord.com/channels/371759389889003530/371759389889003532/936316844040650842
[01:09:16] <FromDiscord> <Forest> In reply to @Yardanico "That's a bug of": Rip
[01:09:44] <FromDiscord> <Forest> Aight guess i'ma just try editing the config
[01:10:37] <FromDiscord> <Forest> Where will Nim's global config be in?
[01:12:10] <FromDiscord> <Forest> Or will i have to recompile Nim from scratch?
[01:12:17] <PMunch> arkanoid, you can use Nim for large projects. But you might have to leave some patterns you're used to in other languages behind
[01:12:54] <FromDiscord> <Phil> I was not familiar with calling a setup proc after initialization
[01:12:58] <FromDiscord> <Phil> What logic do you put in that?
[01:17:17] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3NIq
[01:17:54] <FromDiscord> <kevin> my lib loads fine mac/linux but Windows gives: `could not load: .\threadtest.dll`
[01:18:50] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3NIr
[01:20:30] <PMunch> Hmm, have you tried having a forward slash?
[01:20:34] <PMunch> Just curious
[01:20:42] <FromDiscord> <kevin> yeah, same result
[01:20:48] <FromDiscord> <Elegantbeef> remove the relative path
[01:21:23] <FromDiscord> <kevin> i also tried full path. are you saying just `threadtest.dll` instead of `.\threadtest.dll` ?
[01:21:54] <FromDiscord> <Elegantbeef> Yes
[01:22:54] <FromDiscord> <kevin> `could not load: threadtest.dll`
[01:23:16] <PMunch> Is it a loadable DLL?
[01:23:27] <PMunch> I don't know how to debug this kind of stuff on Windows..
[01:24:00] <FromDiscord> <kevin> well I think it should be loadable...
[01:24:11] <FromDiscord> <kevin> It is loadable on mac and linux
[01:24:18] <FromDiscord> <Elegantbeef> @Phil\: what do you expect to happen?
[01:24:53] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3NIs
[01:24:59] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:25:02] <FromDiscord> <kevin> (edit) "https://play.nim-lang.org/#ix=3NIs" => "https://play.nim-lang.org/#ix=3NIt"
[01:25:17] <FromDiscord> <Phil> What I'm trying to find is a way that makes the code above explode when one tries to use the variable `i` whose "posession" I want to move into the proc
[01:25:27] <FromDiscord> <Elegantbeef> Nim's sink semantics copy if it cannot move
[01:26:34] <FromDiscord> <Phil> And it can't move because I access the variable outside of the proc so it says "well, I want this program to be valid, so can't move, have to copy" ?
[01:26:40] <FromDiscord> <Elegantbeef> You make the copy an error and it'll do that
[01:27:18] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/RFCs/issues/432 there are some solutions here
[01:28:06] <FromDiscord> <Phil> Check, I'll likely check those out tomorrow after getting some sleep.↵The fundamental reason why I want this is for my tinypool package again.↵After you recycle a connection back into the pool I don't want you to be able to use that connection anymore until you borrow the next one
[01:28:07] <FromDiscord> <Elegantbeef> Yes
[01:28:14] <FromDiscord> <Elegantbeef> Nim's move semantics copy when a move cannot be made
[01:28:35] <FromDiscord> <Elegantbeef> It's an intelligent and also annoying thing
[01:28:48] <FromDiscord> <Phil> (edit) "anymore until you" => "anymore.↵You shall have to"
[01:29:36] <FromDiscord> <Elegantbeef> The annoying part is you cannot disable it per scope presently
[01:29:36] <FromDiscord> <Elegantbeef> You can emit hints or make it an error globally but not locally
[01:29:36] <FromDiscord> <Phil> I guess it allows you to have things be simple 90% of the time and the remaining 10% are a bit harder because of it
[01:30:27] <FromDiscord> <Elegantbeef> Imo there should be a mechanism to disable implicit copies
[01:30:40] <FromDiscord> <Elegantbeef> You can also explicitly move if you want
[01:32:01] <FromDiscord> <Phil> Would that do what I'm describing? Make the code above explode as desired?
[01:32:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:35:40] <FromDiscord> <Elegantbeef> Yea there should be a `{.forceSink.}:` or similar that does not allow usage after moving
[01:37:38] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3NIz
[01:37:48] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3NIz" => "https://play.nim-lang.org/#ix=3NIA"
[01:38:02] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3NIA" => "https://play.nim-lang.org/#ix=3NIB"
[01:38:06] <FromDiscord> <Phil> In reply to @Elegantbeef "Yea there should be": Ohhhh a pragma. I was experimenting forever with `move` and whether that would have ot be called in the proc body, or the proc signature or whatever
[01:38:23] <FromDiscord> <Phil> Likely not called forceSink since that doesn't compile on the playground, but I'll look for a pragma
[01:38:41] <FromDiscord> <Phil> Example: https://play.nim-lang.org/#ix=3NIC
[01:40:46] <FromDiscord> <Phil> There's nodestroy, there's nosink, but no forceSink.↵It describes that you can make the `=copy` hook error out, which is useful sorta, but that's not the issue I'm trying to solve, hmmm
[01:41:12] <FromDiscord> <Elegantbeef> There isnt a way yet
[01:41:24] <FromDiscord> <Elegantbeef> you can do `iSinkKSth(move t)`
[01:42:04] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3NIE
[01:42:16] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3NIF
[01:42:28] <FromDiscord> <Elegantbeef> Nah tetralux there is a way to error copy
[01:43:14] <FromDiscord> <Tetralux> Hmm.
[01:43:17] <FromDiscord> <Phil> Waaaaait a sec, when you move the memory it leaves behind a "default" string (aka just "") ? huh
[01:43:32] <FromDiscord> <Elegantbeef> Yes it 0's the moved data
[01:43:42] <FromDiscord> <Elegantbeef> Matrix bridge slow so i look crazy
[01:44:18] <FromDiscord> <Phil> Hmmmmmm
[01:45:02] <FromDiscord> <Elegantbeef> What you could do iso is make a template that calls a procedure which forces a `move`
[01:45:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NIG
[01:45:39] <FromDiscord> <kevin> In reply to @kevin "Got a question about": Figured out that it fails to load the DLL if the Nim DLL is compiled with `--threads:on`
[01:45:53] <FromDiscord> <kevin> booo
[01:46:02] <FromDiscord> <Phil> In reply to @Elegantbeef "What you could do": OHHHH and then the templates could be public, while the procs are private!
[01:46:18] <FromDiscord> <Phil> No wait, the procs also need to be public so that the template can compile
[01:46:27] <FromDiscord> <ElegantBeef> No they dont
[01:46:38] <FromDiscord> <ElegantBeef> templates hold onto symbols
[01:46:40] <FromDiscord> <Phil> It's enough if they're in the template's context?
[01:46:42] <FromDiscord> <Phil> Nice!
[01:48:06] <FromDiscord> <Phil> I already have a "proc calls inner proc" setup where public `borrowConnection()` calls private `borrowConnection(POOL)` so that I can hide the global POOL variable, this fits perfectly into that, I just swap the outer `proc borrowConnection()` into a `template borrowConnection()`
[01:50:34] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[01:50:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[01:55:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Client Quit)
[01:59:37] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[02:07:57] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 240 seconds)
[02:15:13] <FromDiscord> <tandy> any big brained async users around?
[02:16:21] <FromDiscord> <Elegantbeef> Uh oh you fell for the "Is anyone around that does X" instead of just asking the issue
[02:16:26] <FromDiscord> <Elegantbeef> 0/10 tandy reporting to you satan
[02:16:43] <FromDiscord> <tandy> smh
[02:17:27] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3NIN
[02:17:37] <FromDiscord> <tandy> i can't understand why this doesnt work
[02:18:03] <FromDiscord> <tandy> sent a code paste, see https://paste.rs/OBX
[02:18:24] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3NIP
[02:19:07] <FromDiscord> <Elegantbeef> Shouldnt that be `waitFor` since it's inside the main loop?
[02:19:38] <FromDiscord> <tandy> hmm ok that works
[02:20:14] <FromDiscord> <tandy> but I don't get how to program  around not having `waitFor` in js
[02:20:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[02:22:30] <FromDiscord> <noow> is there a super simple way to create a string out of an array of bytes of known length but no zero terminator?
[02:24:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NIU
[02:24:14] <FromDiscord> <noow> thank you
[02:24:22] <FromDiscord> <Elegantbeef> Or is it just `newString(arr.len)`
[02:24:24] <FromDiscord> <Elegantbeef> I always forget
[02:25:13] <FromDiscord> <Elegantbeef> Alternatively you can just iterate over the collection and assign the values
[02:25:24] <FromDiscord> <noow> I prefer copyMem
[02:28:52] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3NIV
[02:39:49] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:48:01] <PMunch> Ugh, I have to go to bed. Ten points to whoever manages to make the prettiest looking documentation template with pico.css by the time I get back :P
[02:48:59] <PMunch> I'm basically writing documentation for a project I'm working on, mostly guides with code samples, but it needs like a sidebar menu and somewhere to put my Nim-generated documentation.
[02:49:14] <PMunch> Bonus points for using few extra CSS rules
[02:49:20] <PMunch> Good night
[02:49:21] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:49:52] <FromDiscord> <Elegantbeef> Cmon why not nimibook?
[02:51:19] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[02:54:15] <FromDiscord> <pmunch> Seems complicated.. But I guess it does fit what I need to do
[03:01:14] <FromDiscord> <mratsim> In reply to @Elegantbeef "Yea there should be": isn't there a warning? maybe we can turn it into an error
[03:02:57] <FromDiscord> <Elegantbeef> I go into why it doesnt work inside that RFC
[03:03:13] <FromDiscord> <Elegantbeef> destructors do not respect pragma scope so you cannot turn it into an error locally
[03:04:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/ihA
[03:04:50] <FromDiscord> <Elegantbeef> That does not work as one expects
[03:05:24] <FromDiscord> <Elegantbeef> The hint is toggled off in the first pass and then destructors dont re-enable the hint/error
[03:05:59] <FromDiscord> <Elegantbeef> Araq says it's the push/pop but even with explicit pragma's it doesnt owrk
[03:09:40] <FromDiscord> <evoalg> In reply to @Elegantbeef "0/10 tandy reporting to": You're calling  tandy satan and you're reporting to them now?
[03:10:13] <FromDiscord> <Elegantbeef> No i'm calling myself dumb and incapable of writing words in order i intend them to be
[03:10:35] <FromDiscord> <Elegantbeef> God dammit i've broke my git instance again
[03:11:13] <FromDiscord> <evoalg> tandy, I'm also reporting to you, satan
[03:11:20] <FromDiscord> <tandy> fair
[03:11:26] <FromDiscord> <tandy> async programming is devilish
[03:11:47] <FromDiscord> <evoalg> tandy did you see the new chapter in the book re async?
[03:11:57] <FromDiscord> <tandy> yes
[03:12:06] <FromDiscord> <tandy> useful
[03:12:21] <FromDiscord> <evoalg> http://ssalewski.de/nimprogramming.html#_code_execution_with_asyncawait ... ok
[03:12:29] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/936405837444939836/image.png
[03:12:30] <FromDiscord> <Elegantbeef> Cursed git
[03:13:40] <FromDiscord> <tandy> ok this is based i just read it properly↵(@evoalg)
[03:13:55] <FromDiscord> <tandy> this just means i need to finish this PR
[03:13:58] <FromDiscord> <tandy> https://github.com/juancarlospaco/nodejs/pull/4
[03:14:07] <FromDiscord> <tandy> so i never have to touch async again
[03:14:26] <FromDiscord> <tandy> because js will have a proper ish httpclient
[03:14:51] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:15:32] <FromDiscord> <evoalg> I haven't read it, and I've never tried async
[03:15:34] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 256 seconds)
[03:16:54] <FromDiscord> <tandy> the main reason im forced to use async is because im working with js backend and the api bindings im writing only support jsfetch which is async
[03:17:04] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[03:17:13] <FromDiscord> <tandy> so with this i can refactor the bindings and use sync xmlhttprequest \>\:)
[03:20:37] <FromDiscord> <evoalg> In reply to @arkanoid "I picked nim to": which language will you try next?
[03:21:13] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[03:23:07] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[03:28:33] <FromDiscord> <Elegantbeef> Arkanoid i'd happily take a look at your code to see if it can be broken up nicely
[03:29:55] <FromDiscord> <Elegantbeef> Nim does support recursive imports if you declare them properly
[03:30:16] <FromDiscord> <Elegantbeef> Did i already say that, yes
[03:31:05] <FromDiscord> <Patitotective> Is there any text editor developed in _Nim_?
[03:31:29] <FromDiscord> <Elegantbeef> There was https://github.com/nim-lang/Aporia
[03:32:18] <FromDiscord> <Elegantbeef> The Vscode extension by saem was ported to Nim so that means it's sorta 😛
[03:34:02] <FromDiscord> <Patitotective> I just wanted to get an idea ~~fork~~ for a text editor, I'm thinking on making one to try some GUI libraries
[03:34:12] <FromDiscord> <Patitotective> (edit) "try some GUI libraries" => "practice"
[03:36:21] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[03:36:47] <FromDiscord> <Elegantbeef> This is completely valid code https://play.nim-lang.org/#ix=3NJg if anyone is curious
[03:37:26] <FromDiscord> <Elegantbeef> Since the import of `test1` is delayed it doesnt cause a recursive import which allows splitting modules
[03:38:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:38:12] <FromDiscord> <Patitotective> Isn't `include` better for those cases? Or do I don't understand `include` yet? lol
[03:38:19] <FromDiscord> <Patitotective> (edit) 04removed "do"
[03:40:40] <FromDiscord> <Elegantbeef> Not really "Better"
[03:41:03] <FromDiscord> <Elegantbeef> Import is superior imo due to the fact it's an actual module, exporting matters
[03:42:27] <FromDiscord> <willyboar> In reply to @Patitotective "Is there any text": This also: https://github.com/fox0430/moe
[03:46:52] <FromDiscord> <chronomatopoeia> Hi, I've been working on text adventures with a programmer who made an engine in Nim. When I worked on the first version, I had Windows 10. After I downloaded Windows 11, the game screen comes up black. Where should I look to fix this problem? I tried the game again on a friend's computer who has Windows 10, and it worked fine.↵https://github.com/chronomatopoeia/rue-d-auseil↵It is a prototype from a jam, not a final product.
[03:48:04] <FromDiscord> <Elegantbeef> I've had similar issues with Nico, generally caused by the palette
[03:48:23] <FromDiscord> <chronomatopoeia> Sorry, what is the palette?
[03:48:37] <FromDiscord> <chronomatopoeia> I'm a beginner
[03:50:47] <FromDiscord> <chronomatopoeia> For colors?
[03:51:19] <FromDiscord> <Elegantbeef> Doubt it, but it was a thing that happened prior
[03:51:30] <FromDiscord> <Elegantbeef> The game would work fine but some palettes would cause it to be 100% black, though looking at the repo there are no custom palettes
[03:51:45] <FromDiscord> <chronomatopoeia> Ah, that makes sense
[03:52:36] <FromDiscord> <chronomatopoeia> We had to choose some colors, perhaps that was custom after all
[03:52:57] <FromDiscord> <chronomatopoeia> for the action words
[03:53:41] <FromDiscord> <chronomatopoeia> That's a helpful place to start looking, thank you very much
[03:53:59] <FromDiscord> <Elegantbeef> Also the nico author did respond in gamedev 😀
[03:54:23] <FromDiscord> <chronomatopoeia> Ooops, I missed that, thanks!
[04:07:25] <FromDiscord> <Patitotective> In reply to @willyboar "This also: https://github.com/fox0430/moe": 👍
[04:14:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:29:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:41:14] <FromDiscord> <sigkill> Anyone have a nice vim syntax highlighter for nim
[04:41:20] <FromDiscord> <sigkill> Can't find anything on GitHub
[04:47:52] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 268 seconds)
[04:47:55] <FromDiscord> <Elegantbeef> There is one for nvim
[04:49:16] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[04:49:42] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:50:12] *** Quits: rienske (~rie@185.254.75.31) (Ping timeout: 256 seconds)
[04:54:36] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 250 seconds)
[04:56:25] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[04:56:26] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[04:59:54] *** Joins: rienske (~rie@185.254.75.31)
[05:06:01] <FromDiscord> <sigkill> In reply to @Elegantbeef "There is one for": Link me? I can't find anything
[05:07:55] <FromDiscord> <Elegantbeef> https://github.com/alaviss/nim.nvim
[05:12:13] *** Joins: marshall (~mmm@197.211.63.25)
[05:14:28] <FromDiscord> <sigkill> I already have the LSP setup :// just wanted syntax highlighting ;-;
[05:14:38] <FromDiscord> <sigkill> Thanks for the suggestion though
[05:14:56] <FromDiscord> <Elegantbeef> > Semantic highlighting with nimsuggest
[05:17:06] <FromDiscord> <sigkill> I'm worried about this overriding my LSP mappings or running another instance if nimsuggest
[05:17:19] <FromDiscord> <sigkill> But I'll look over the syntax file and use it as a starting point
[05:18:48] <FromDiscord> <Rika> It is semantic highlighting. It depends on nimsuggest
[05:24:59] <FromDiscord> <sigkill> so it will use the same instance of nimsuggest as nvim-cmp?
[05:29:21] <FromDiscord> <sigkill> (i'm assuming lsp stuff requires nimsuggest running continually in the bg)
[05:31:35] <FromDiscord> <Rika> no it will no
[05:31:37] <FromDiscord> <Rika> (edit) "no" => "not"
[05:32:17] <FromDiscord> <leorize> @sigkill\: https://github.com/alaviss/nim.nvim/issues/49 \<- check this out
[05:32:52] <FromDiscord> <leorize> I haven't tested it myself but this user created a null-ls configuration to bridge nim.nvim's integration into nvim's lsp functionality
[05:33:11] <FromDiscord> <leorize> it doesn't support everything (which I intend to improve on later), but it seems to work
[05:33:30] <FromDiscord> <sigkill> In reply to @Rika "no it will not": im not sure which you mean
[05:34:12] <FromDiscord> <leorize> and no, nim.nvim will not share the nimsuggest instance with nimlsp
[05:34:14] <FromDiscord> <Rika> leorize is the creator (alaviss) so listen to him first
[05:41:28] <arkanoid> is there a wiki/blog/manual about software design patterns available/suggested for nim?
[05:41:41] <arkanoid> I'm looking for possible solutions to decouple code
[05:42:12] <FromDiscord> <Rika> In reply to @arkanoid "is there a wiki/blog/manual": hmm thats tricky ngl
[05:42:26] <arkanoid> ngl?
[05:42:44] <FromDiscord> <sigkill> In reply to @leorize "<@629315306560684032>\: https://github.com/alaviss/": this is interesting - will let you know how i find it
[05:42:49] <FromDiscord> <sigkill> In reply to @arkanoid "ngl?": not gonna lie
[05:43:01] <arkanoid> k
[05:43:48] <FromDiscord> <Rika> okay usually all types go in some single file and logic can go in any num of files
[05:43:58] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:44:05] <FromDiscord> <Rika> or types that are dependent on each other go in some file
[05:45:06] <arkanoid> yes, I'm already doing that. All types in a single type block is something I've already realized by myself
[05:45:28] <arkanoid> what I'm trying to decouple is the dependency between two modules
[05:46:11] <FromDiscord> <Rika> hm wdym? doesnt forward declaration help with that?
[05:47:14] <arkanoid> can't use forward declaration in my context, because I need to use finalizers (aka. new(result, myDestroyProc))
[05:47:51] <arkanoid> and also there's this little rule: "Error: type bound operation `myDestroyProc` can be defined only in the same module with its type"
[05:47:56] <FromDiscord> <Rika> never knew there was that context
[05:48:15] <FromDiscord> <Rika> do destructors not work for you?
[05:48:43] <arkanoid> so type + newType + destroyType needs to stay in same module
[05:50:17] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:53:10] <arkanoid> Rika, need to keep lib backward compatible for existing users, and it has been designed for refc + finalizers before =destroy and orc/arc
[05:55:05] <arkanoid> so I'm trying to make it arc/orc compatible, but using finalizers instead of =destroy, and what finalizers do is basically declaring =destroy implicitly, there's no much difference
[05:59:07] <arkanoid> problem is how to decouple code when using finalizers. if "proc finalize(foo: Foo)" + "proc newFoo(): Foo = new(result, finalize)" have to stay in same module as "type Foo", it means that every inizialization code and delete for all types are in same module, so you program ends in a single large module
[05:59:50] <FromDiscord> <Elegantbeef> I dont know if that's true
[06:00:13] *** Quits: marshall (~mmm@197.211.63.25) (Remote host closed the connection)
[06:00:27] <arkanoid> Elegantbeef, what doesn't sound true to you?
[06:00:49] <FromDiscord> <Elegantbeef> The single large module
[06:00:58] *** Joins: marshall (~mmm@197.211.63.25)
[06:01:00] <FromDiscord> <Rika> your program is all just init + delete?
[06:01:11] <FromDiscord> <Rika> isnt the logic much larger than init + delete...
[06:02:39] *** Quits: marshall (~mmm@197.211.63.25) (Remote host closed the connection)
[06:02:55] <arkanoid> but you can't decouple. For example, this constructor: https://play.nim-lang.org/#ix=3NJJ
[06:03:15] *** Joins: marshall (~mmm@197.211.63.25)
[06:03:49] <FromDiscord> <Elegantbeef> You constructor and type has to be declared in the same file since you're using finalizers yes, but that doesnt mean all your code needs to share a single file
[06:04:04] <FromDiscord> <Elegantbeef> I showed examples of how to do recursive imports without erroring
[06:05:17] <arkanoid> 1) you have to write this constructor as near as possible to type definition, as you want nim to generate =destroy asap, and that happens on "new(result, delete)", 2) then you have to declare "proc delete" in same module of type definition, 3) as a result, and logic inside constructor or destructor is closely couple with all types
[06:05:19] *** Quits: marshall (~mmm@197.211.63.25) (Remote host closed the connection)
[06:06:14] *** Joins: marshall (~mmm@197.211.63.25)
[06:06:22] <FromDiscord> <Elegantbeef> Again the entirety of your program isnt intializers and destructors
[06:07:21] <FromDiscord> <Elegantbeef> Do you have a minimal example I can chew on?
[06:08:47] <arkanoid> Elegantbeef: not minimal, but this "include all" design is driven by this limitation: https://github.com/filcuc/nimqml/blob/master/src/nimqml.nim
[06:09:18] <arkanoid> here the constructors block, that gets included near the types: https://github.com/filcuc/nimqml/blob/master/src/nimqml/private/constructors.nim
[06:09:25] <FromDiscord> <Elegantbeef> Well i guess i'll take the time to remove the code smell be back in 3 hours
[06:10:10] <arkanoid> no, I've already spent hours on this, it's not required, I can expose the critial points and you may have an idea
[06:11:02] *** Quits: marshall (~mmm@197.211.63.25) (Remote host closed the connection)
[06:11:08] <arkanoid> I've already tried to remove the code smell by replacing all include with import, and drawing a module interdependency tree using graphviz and trying to decouple the cross dependencies
[06:11:39] *** Joins: marshall (~mmm@197.211.63.25)
[06:12:43] <arkanoid> point is that you can't use forward declarations on finalizers
[06:13:41] <arkanoid> because that works with refc, but silently fails with arc/orc: https://github.com/nim-lang/Nim/issues/19402
[06:13:43] <FromDiscord> <Elegantbeef> Sure but are they actually needed is my query
[06:14:47] *** Quits: marshall (~mmm@197.211.63.25) (Remote host closed the connection)
[06:15:05] <FromDiscord> <Elegantbeef> This is such a large module it's going to be hard to investigate how to clean it up quickly
[06:15:08] <arkanoid> you mean finalizers? yes they are, as constructors calls C code, and finalizers also calls C code
[06:15:14] <FromDiscord> <Elegantbeef> No
[06:15:47] <arkanoid> ?
[06:15:47] <FromDiscord> <Elegantbeef> Are forward declarations needed
[06:16:04] <FromDiscord> <Elegantbeef> This is such a large module it's hard to easily grok how to supplant it into imports
[06:17:46] <arkanoid> I've already tried. If you try to keep all your constructors away from the type file, you end up fighting with the compiler that declares "=destroy" before your "new(result, myfinalizer)"
[06:18:56] <arkanoid> if you try to push constructors and finalizers in same module as types, you end up fighting with constructor code (result.setup()) that drags in cross dependencies and basically the types.nim imports your whole program
[06:19:27] <FromDiscord> <Elegantbeef> Sure i'm not trying a single file
[06:19:39] <FromDiscord> <Elegantbeef> I'm attempting to split each type into a module
[06:20:35] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:23:12] <arkanoid> I think you'll face cross dependencies between some of them, and yes that's the last path I've been trying, but not yet finished
[06:31:34] <arkanoid> before last commit, the original code used constructors and destructors in relative files (using include instead of import makes them still modules?!) https://github.com/filcuc/nimqml/commit/aaab5dbae4ae5c22d7aab67635f24c54a7f369f6#diff-25a6634263c1b1f6fc4697a04e2b9904ea4b042a89af59dc93ec1f5d44848a26
[06:32:01] <arkanoid> but yet single types files, and include everything instead of import
[06:34:54] <FromDiscord> <ITR> Is there any recent comparison of Nim and V? The one on V's page looks like it's compared against an older version of Nim, so it'd be interesting to see how it does in its current state: https://vlang.io/compare https://vlang.io/compilation_speed
[06:50:35] *** Quits: l1x (uid1954@id-1954.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:52:58] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3NJS
[06:53:07] <FromDiscord> <noow> will Nim call destroy if one of MyType leaves the scope
[06:53:12] <FromDiscord> <noow> or other conditions where it would be GC'd
[06:53:29] <FromDiscord> <Elegantbeef> Depends on the memory management you usue
[06:53:31] <FromDiscord> <noow> arc
[06:53:42] <FromDiscord> <Elegantbeef> Well it should call the destructor on exit scope
[06:54:00] <FromDiscord> <noow> arc should be deterministic, right?
[06:54:20] <FromDiscord> <noow> two runs of the same software will collect garbage at the same moments with no randomness right
[06:55:14] <FromDiscord> <noow> also, do I have to specify `var` in the destructor?
[06:55:30] <FromDiscord> <noow> since destroying an object sounds like it is mutating the object, so my intuition says yes
[06:56:01] <FromDiscord> <noow> sorry if my questions are noob-y, but I just can't find good documents on how to mix ptr with GC'd code
[07:01:51] <FromDiscord> <Elegantbeef> Ah accidently imported one module to early, all going fine!
[07:03:58] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:28:49] <FromDiscord> <Elegantbeef> arkanoid https://github.com/beef331/nimqml/commit/000cf189bb6317fa0ed8343675bc7d137fbb6c49 i started on the refactor but i'm too bored to continue there's only a few more files
[07:28:56] <FromDiscord> <Elegantbeef> any file that doesnt end with `s` isnt implemented
[07:29:48] <FromDiscord> <Elegantbeef> All types refactored are defined in their own file and only use imports
[07:31:58] <FromDiscord> <Elegantbeef> Hmm on second thought seems there are some issues with things aside from `Qobject`
[07:47:45] <arkanoid> Elegantbeef, you're on my same path (but way faster than me). I'll use your work and compare with mine. I'm tracking the imports while I refactor, you should have found something like https://play.nim-lang.org/#ix=3NK0
[07:48:31] <FromDiscord> <Elegantbeef> Yea i was trying to show how to do it but forgot after the first few files so just went through many of them 😀
[07:51:55] <arkanoid> yes, I know the feeling, I had to iterate a couple if times to identify the root of the tree and start from there
[08:07:20] <arkanoid> Elegantbeef, would you explain me this trick? https://github.com/beef331/nimqml/blob/000cf189bb6317fa0ed8343675bc7d137fbb6c49/src/nimqml/private/qvariants.nim#L16
[08:07:54] <FromDiscord> <Elegantbeef> Delayed imports 'can' let you get around recursive trees
[08:08:27] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3NJg enables this for instance
[08:10:18] <FromDiscord> <Elegantbeef> There is still a cyclical dependancy issue with `qmetaobjects` so may have to merge `qobjects` with `qmetaobjects`
[08:12:53] <arkanoid> damn, you know them all, you reached the same conclusion I made in 3 hours in 45 mins
[08:13:16] <arkanoid> and also I didn't know about delayed imports
[08:13:47] <FromDiscord> <Elegantbeef> Yea they're how you can get around recursive import problems until nim 2.0 😀
[08:14:00] <FromDiscord> <Elegantbeef> Nim2.0 will have a proper solution iirc
[08:16:25] <FromDiscord> <Elegantbeef> Some stuff will have to be grouped but I think you can see how you can separate the code into smaller more maintainable files
[08:16:42] <arkanoid> and here is where I've been ranting today
[08:17:16] <arkanoid> yes, the delayed imports is the missing item to keep the wheel spinning
[08:17:22] <arkanoid> I was basically helpless
[08:17:45] <FromDiscord> <Elegantbeef> Ah so you can see how large projects can be written in Nim? 😛
[08:17:51] <FromDiscord> <Rika> It was difficult to understand the situation without the code and most of us were unwilling to look
[08:17:52] <arkanoid> yet I've still to grok it, as I'm trying to use it right now as you but it's not clicking
[08:18:06] <FromDiscord> <Elegantbeef> Also i did give the delayed example earlier
[08:18:27] <FromDiscord> <Elegantbeef> I assume you didnt see it then 😀
[08:19:32] <FromDiscord> <Elegantbeef> You basically want to import module 1 from module 2 at a point in module 2 where it's needed and import module 2 into module 1 just before it's needed
[08:20:00] <FromDiscord> <Elegantbeef> This reduces the chance of a recursive import as the import can get the information needed before it goes "Well we're now going to be recursive"
[08:20:36] <FromDiscord> <Rika> I believe this is basically how it works
[08:20:37] <FromDiscord> <Elegantbeef> If you think about it, a module can import another module until it's at the end or it hits an import of itself
[08:20:43] <FromDiscord> <Rika>  https://media.discordapp.net/attachments/371759389889003532/936483404214595645/IMG_0375.png
[08:21:00] <FromDiscord> <Elegantbeef> You're terminating imports when you do `import importingModule`
[08:21:25] <FromDiscord> <Elegantbeef> So in the small example `test1` gets all exported code up to `import test1`
[08:23:23] <arkanoid> Elegantbeef, yeah I see you put import objects at the bottom of qmetaobjects
[08:23:48] <FromDiscord> <Rika> If you like images I don’t know https://media.discordapp.net/attachments/371759389889003532/936484181855334420/IMG_0376.png
[08:24:04] <FromDiscord> <Elegantbeef> It still causes an issue though which is why i think they need to merge
[08:24:09] <arkanoid> but did it compile to you? it seems that's the show stopper, right?
[08:24:11] <FromDiscord> <Rika> Oh I missed another part
[08:24:24] <FromDiscord> <Elegantbeef> `qobjects` compiles but `qmetaobjects` does not
[08:25:06] <arkanoid> Rika, I really appreciate it. I've printed the BW version to don't forget tomorrow where I've lost the day before
[08:25:06] <FromDiscord> <Elegantbeef> the latter has an issue with the imports so doesnt compile, which is why i think those two at least need merged
[08:25:28] <FromDiscord> <Rika> sorry the second image is wrong, i will fix it in a moment
[08:25:35] <FromDiscord> <Elegantbeef> But like `qabstractitemmodels` works
[08:25:48] <arkanoid> Rika, don't worry, I got it
[08:26:04] <FromDiscord> <Rika> oh wait no i think its correct
[08:26:10] <FromDiscord> <Rika> im dum
[08:26:12] <FromDiscord> <Rika> hehe
[08:27:36] <arkanoid> so, as general rule to workaround *put your import just before the dependent code, and the dependent code as late as possible in the module*, yet not always works
[08:28:05] <FromDiscord> <Elegantbeef> It does not always work but can get you quite far
[08:28:09] <FromDiscord> <Rika> now that i think about it this is messy xd
[08:28:12] <FromDiscord> <Rika> nim 2 when
[08:28:35] <arkanoid> thanks for your patience
[08:28:41] <FromDiscord> <Tetralux> 😄
[08:29:23] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[08:30:34] <FromDiscord> <Elegantbeef> Yea look at my present commit
[08:30:35] <FromDiscord> <Elegantbeef> It should work
[08:31:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:33:35] <arkanoid> Elegantbeef, is the late declaration of qmetaobject types inside the new qobject file intended , or was just quick copypaste?
[08:34:09] <FromDiscord> <Elegantbeef> It was intended but compiling `qmetaobject` directly caused issues
[08:34:17] <FromDiscord> <Elegantbeef> So i moved them into a single module now
[08:34:37] <FromDiscord> <Elegantbeef> https://github.com/beef331/nimqml/commit/51cbb41579bc99ce3a8c5cec6a0ddd3b0a40cb43 most recent commit
[08:35:00] <FromDiscord> <Elegantbeef> Being somewhat lazy since i'm not authoring anything
[08:38:35] <arkanoid> k
[08:52:03] <arkanoid> Still not clicking. I'm getting "Error: undeclared identifier: 'QObject'" in my file, that is kinda 1:1 yours here: https://github.com/beef331/nimqml/blob/51cbb41579bc99ce3a8c5cec6a0ddd3b0a40cb43/src/nimqml/private/qvariants.nim#L17
[08:52:35] <FromDiscord> <Elegantbeef> Did you forget to put the export marker?
[08:52:53] <FromDiscord> <Elegantbeef> You can always clone my repo and continue where i left off
[08:53:30] <arkanoid> sure, but I want to learn, and I'm already using your files to understand. The header of qobject.nim is very similar, and the export mark is there
[08:54:09] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Read error: Connection reset by peer)
[08:54:20] *** Joins: jmd_ (~jmdaemon@user/jmdaemon)
[08:57:08] <FromDiscord> <Elegantbeef> Hmm guess i have more import issues
[08:57:20] <FromDiscord> <Elegantbeef> So perhaps this is going  to end with many files in a single file
[08:59:21] <FromDiscord> <Elegantbeef> Gotta try compiling every file now
[09:00:45] <arkanoid> that's my approach, I start from a leaf of the dependency tree and try compiling, once it succeeds, I go to next module until root
[09:00:57] <arkanoid> hell happens in me head when two modules requires each other
[09:01:16] <arkanoid> I understand your example, is this complex context that is returning errors nowhere helpful
[09:01:18] <FromDiscord> <Elegantbeef> Yea my solution for qvariants was to move stuff to the bottom
[09:02:49] <FromDiscord> <Elegantbeef> My workflow was to make all the modules i need for a specific file, hit an error then rearrange
[09:08:08] <FromDiscord> <Elegantbeef> oh hell ya all my wrapped files are capable of being compiled independantly
[09:08:55] <FromDiscord> <Elegantbeef> You really need to have a good grasp of the import system
[09:09:13] <FromDiscord> <Elegantbeef> Cause the same rule applies to nested imports
[09:09:33] <FromDiscord> <Elegantbeef> If you import a file which imports a file which imports your file it stops importing in other files when it hits a cycle
[09:10:19] <FromDiscord> <Elegantbeef> https://github.com/beef331/nimqml/commit/7647f7640bf6102dc307cf96946cac97f373d412#diff-c6c2128ca66fecdd36b62ceb7df04b22f743c4afec5a041456b6b28756d8aa99R169-R183 which is why i do this
[09:11:03] <FromDiscord> <Elegantbeef> I dont think this is needed since these files are never going to be main
[09:12:30] <arkanoid> yeah, I feel I lack the required knowledge about the details of the import system in this context and I'm fighting against it. I got successfull compilation of one module, and it breaks another one, and I'm going back and forth until I got both successfully, but then here it comes a third one. I need better rules to reduce the amount of loops required to get convergence
[09:13:59] <FromDiscord> <Elegantbeef> Given that these dont need to work as main modules i'm fairly certain you just need to make sure you can import them independantly or as a group
[09:14:47] <FromDiscord> <Elegantbeef> But hey after this adventure you'll be an import god
[09:15:35] <arkanoid> well, I DESERVE THIS KNOWLEDGE
[09:15:38] <arkanoid> sorry
[09:16:07] <arkanoid> but I've been over this way too long, and I want to reduce the problem
[09:17:16] <FromDiscord> <Elegantbeef> lol
[09:17:36] <arkanoid> so, you said that if X imports Y and Y imports X, then when compiler compiles X, it parses Y until "import X" is met, and vice-versa when compiler compiles Y, it parses X until "import Y" is met. Correct?
[09:17:56] <FromDiscord> <Elegantbeef> Yes
[09:18:10] <FromDiscord> <Elegantbeef> Actually i might be wrong
[09:18:26] <FromDiscord> <Elegantbeef> The small example shows that's wrong
[09:18:33] <arkanoid> ok, so it's a system of levers, tubes and pressure and valves that requires an equilibrium
[09:19:09] <arkanoid> oh dear, the only rule I got out of this is already crumbling down
[09:19:32] <FromDiscord> <Elegantbeef> Ok so let's look at the small example
[09:19:59] <arkanoid> you mean test.nim and test1.nim?
[09:20:21] <FromDiscord> <Elegantbeef> We're `test1` we're going through we pickup `MyType` we then import `test` it imports all the symbols we have up to this point so it get's `MyType`
[09:20:42] <FromDiscord> <Elegantbeef> We now import all symbols exported inside `test1` so we pickup `doThing`
[09:21:02] <FromDiscord> <Elegantbeef> i mean "We're `test`"
[09:21:51] <FromDiscord> <Elegantbeef> So when you import a module you get all exported symbols between the start and first cycle
[09:22:04] <FromDiscord> <Elegantbeef> In our small example that cycle is easy to see since it's two files
[09:22:31] <FromDiscord> <BhamidipatiNikhil> Can anyone please say why this program of mine is running infinite times? https://media.discordapp.net/attachments/371759389889003532/936498954969956392/unknown.png
[09:22:49] <FromDiscord> <Elegantbeef> Which is why import at the top doesnt work since it creates a cycle without any new symbols
[09:22:55] <FromDiscord> <Rika> your procs are never exiting
[09:23:05] <FromDiscord> <Elegantbeef> You have recursive procedures calls
[09:23:12] <FromDiscord> <Rika> outside -> tick -> tock(inside tick) -> tick(inside tock)
[09:23:12] <FromDiscord> <Elegantbeef> if you build with debug it should hit the stack limit
[09:23:14] <FromDiscord> <Rika> etc
[09:23:26] <FromDiscord> <Rika> you never finish the first tick printer call thats global
[09:23:52] <FromDiscord> <BhamidipatiNikhil> In reply to @Rika "etc": Oh yes, you are right! Thanks Rika
[09:24:04] <FromDiscord> <BhamidipatiNikhil> 🙂
[09:24:06] <FromDiscord> <Elegantbeef> Thought the bots were going to have to explain how while worked 😀
[09:24:34] <arkanoid> so the general rule is still valid? I need to get to sleep with at least 1 hope for a bright future, made of imports and modules that compiles one by one
[09:24:41] <FromDiscord> <Elegantbeef> Yea
[09:25:02] <FromDiscord> <Elegantbeef> Might be best to play with a bunch of small modules and make them depend on eachother to grok that
[09:25:41] <arkanoid> I think so, need to create a 4 module puzzle, at least
[09:27:33] *** Joins: tiorock (~rc@192.12.114.201)
[09:27:33] *** Quits: tiorock (~rc@192.12.114.201) (Changing host)
[09:27:33] *** Joins: tiorock (~rc@user/rockcavera)
[09:27:33] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (lithium.libera.chat (Nickname regained by services)))
[09:27:33] *** tiorock is now known as rockcavera
[09:28:19] <arkanoid> actually, I think the compiler knows exactly which symbols come from each module, basically I need to put a color on each symbol depending on the module it belongs to, and assure that no same colors appears above a certain line
[09:28:41] <arkanoid> I mean, I'm trying to visualize it
[09:31:17] <arkanoid> and when nim 2.0 will be a thing, I will be the one that says to newcomers "when I was your age, we had to do late imports. Now you all lazy kids please help me fix this for loop"
[09:31:36] <FromDiscord> <Elegantbeef> lol
[09:31:38] *** Joins: haakon_ (~haakonn@82.196.8.209)
[09:32:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:32:37] *** Joins: rp1 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[09:33:04] *** Joins: laintree (~lain@172.16.254.xxx)
[09:33:31] <arkanoid> I see from your site you do/did Unity
[09:34:12] <arkanoid> been game dev for years, too. With unity mostly, but not only
[09:34:41] <FromDiscord> <Elegantbeef> I'm a pretend game dev 😛
[09:34:46] <FromDiscord> <Elegantbeef> Just like i'm a pretend programmer
[09:35:24] <FromDiscord> <Elegantbeef> Ark is like "I have a link to this person's git, let's figure out where they live so i can nuke them back to the stone age"
[09:35:27] <arkanoid> well, the most capable one I've ever met used to say exactly that, everyday, while writing AI code with linq
[09:35:57] <FromDiscord> <Elegantbeef> Using linq for AI is ungodly
[09:35:59] <arkanoid> actually I was trying to send you a beer or something
[09:36:06] <FromDiscord> <Elegantbeef> But yea i learned programming with Unity, then moved to Nim a few years ago
[09:36:17] <FromDiscord> <Elegantbeef> I dont have anything setup for donations or the like
[09:36:47] <arkanoid> think about it! I've been helpful, and the beer I skipped today for ranting with nim is well deserved
[09:36:54] <FromDiscord> <Elegantbeef> I did recently start working on my game written in pure nim the otherday
[09:37:04] <arkanoid> s/I'/You've/
[09:37:08] *** Quits: jmd_ (~jmdaemon@user/jmdaemon) (*.net *.split)
[09:37:08] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (*.net *.split)
[09:37:09] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[09:37:09] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[09:37:09] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[09:37:09] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:37:10] *** Quits: haakon (~haakonn@82.196.8.209) (*.net *.split)
[09:37:10] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[09:37:10] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[09:37:10] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[09:37:10] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:37:10] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[09:37:10] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:37:21] <arkanoid> which engine, may I ask?
[09:37:26] <FromDiscord> <Elegantbeef> Yea i know evoalg also has wanted to send me a small gift
[09:37:28] <FromDiscord> <Elegantbeef> My own framework
[09:37:45] <arkanoid> cool! opengl/vulkan?
[09:37:53] <FromDiscord> <evoalg> indeed
[09:37:57] <FromDiscord> <Elegantbeef> opengl + sdl2 + assimp
[09:38:11] <FromDiscord> <Elegantbeef> It looks purdy thanks to my technical art skills
[09:38:18] <arkanoid> I did my little game engine too back in the days. But was objective-c
[09:38:26] <FromDiscord> <Elegantbeef> https://streamable.com/vlp8mi
[09:38:47] <FromDiscord> <Elegantbeef> Present state, will be moving to Nico for a level editor since I cannot be arsed to making a UI system with my framework atm
[09:39:00] <FromDiscord> <Rika> why dont u just drink a beer with the man damnit
[09:39:10] <FromDiscord> <Elegantbeef> I dont drink
[09:39:21] <FromDiscord> <Rika> damn are you really a programmer if you dont drink
[09:39:31] <FromDiscord> <Rika> im joking fyi
[09:39:32] <FromDiscord> <Elegantbeef> Probably not
[09:39:40] <FromDiscord> <Rika> i feel like someones gonna fucking maul me if i didnt say that
[09:39:44] <FromDiscord> <Elegantbeef> No i dont  do drugs either
[09:39:54] <FromDiscord> <evoalg> at least you're not a vegetarian
[09:40:06] <FromDiscord> <Elegantbeef> I'm the sterotypically the least fun person
[09:40:25] <arkanoid> sure, when I say beer, what I really mean is beer
[09:40:31] <FromDiscord> <Rika> the only thing you got going for ya is your self deprecation it seems
[09:40:34] <arkanoid> I mean, whatever you like
[09:40:56] <FromDiscord> <BhamidipatiNikhil> I want to print the ticks and tocks on the same line.... so i used '\b' char... but i did not get such result in the console... https://media.discordapp.net/attachments/371759389889003532/936503593131995196/unknown.png
[09:40:58] <arkanoid> is it possible to dislike beer, yes, but it's de-facto something nice
[09:41:07] <FromDiscord> <Rika> what is \b?
[09:41:41] <FromDiscord> <BhamidipatiNikhil> Backspace https://media.discordapp.net/attachments/371759389889003532/936503779174526976/unknown.png
[09:41:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NKe
[09:41:53] <arkanoid> I really like the transparency effect and the shadows! is it fragshader I guess
[09:42:11] <FromDiscord> <BhamidipatiNikhil> sent a code paste, see https://paste.rs/OQp
[09:42:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/HlR
[09:42:25] <FromDiscord> <Elegantbeef> Yea it's all frag shader magic
[09:42:29] <FromDiscord> <Elegantbeef> Couldnt be arsed to support proper transparency
[09:42:51] *** Joins: [RMS] (~rs@genoce.org)
[09:42:51] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[09:42:51] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[09:42:51] *** Joins: tinystoat (~squeek@user/tinystoat)
[09:42:51] *** Joins: flynn (~mcbloch@user/flynn)
[09:43:19] <arkanoid> nah, this is nicer
[09:43:49] <FromDiscord> <Elegantbeef> Yea was going to say it fits the style more
[09:43:53] <arkanoid> said that, I have to sleep at least a couple of hours. Can't smart work tomorrow
[09:43:58] *** [RMS] is now known as Guest9702
[09:44:14] <FromDiscord> <Elegantbeef> Buh bye, have fun!
[09:44:39] <arkanoid> thanks again beef!
[09:44:41] <FromDiscord> <BhamidipatiNikhil> Good bot!! Thanks @ElegantBeef https://media.discordapp.net/attachments/371759389889003532/936504538532290600/unknown.png
[09:45:00] <FromDiscord> <Elegantbeef> No problem the both of you
[09:46:55] <FromDiscord> <Rika> beef i wish i had the amount of free time you had lmfao
[09:47:15] <FromDiscord> <Elegantbeef> Sure but i'm also perpetually useless
[09:47:57] <FromDiscord> <Elegantbeef> You're getting edumacated
[09:52:06] <FromDiscord> <Elegantbeef> Like i mean i have all this free time and havent done anything 😛
[09:55:26] <FromDiscord> <Rika> more than me already
[09:58:10] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:01:49] *** Quits: rienske (~rie@185.254.75.31) (Quit: WeeChat 3.4)
[10:14:47] *** Joins: rienske (~rie@185.254.75.31)
[10:24:25] <FromDiscord> <BhamidipatiNikhil> I have a doubt, i want to learn nim manual interactively... so should i chose inim or jupyternim or nimNotebook for best experience?
[10:24:54] <FromDiscord> <Elegantbeef> Inim is probably the best repl
[10:26:55] <FromDiscord> <Rika> inim is probably the most battletested so far
[10:27:13] <FromDiscord> <Rika> even if its just gone to a single sortie compared to other things in other languages 😛
[10:28:20] <FromDiscord> <BhamidipatiNikhil> Thanks @Rika  ... I believe i am learning better practising interactively! https://media.discordapp.net/attachments/371759389889003532/936515517764763648/unknown.png
[10:28:54] <FromDiscord> <Rika> didnt beef tell you first lmao
[10:29:13] <FromDiscord> <Elegantbeef> I'm a bot beep boooop booooooooooooop
[10:29:39] <FromDiscord> <Rika> me too, my heart rate monitor makes these cool beeps too
[10:29:55] <FromDiscord> <BhamidipatiNikhil> Thanks @ElegantBeef 😌
[10:29:59] <FromDiscord> <Rika> though sometimes it does this weird single long beep and its kinda scary but it goes back to regular beeping after a while
[10:30:18] <FromDiscord> <Rika> this is a joke, i am fine
[10:30:20] <FromDiscord> <Elegantbeef> Yea you're supposed to have qrs waves but i only have the q
[10:31:15] <FromDiscord> <Elegantbeef> Yea i was joking aswell rika is fine
[10:42:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[10:46:56] <FromDiscord> <evoalg> I probably wouldn't have stuck with Nim if it weren't for you beefy ... too much of a learning curve for me otherwise
[10:49:19] <FromDiscord> <Rika> i shall dissolve into the background then
[10:49:43] *** Quits: rienske (~rie@185.254.75.31) (Quit: WeeChat 3.4)
[10:50:21] <FromDiscord> <evoalg> You've certainly been helpful Rika ...
[10:50:29] <FromDiscord> <eyecon> In reply to @sigkill "Anyone have a nice": https://github.com/zah/nim.vim - a Nim plugin for vim
[10:50:39] <FromDiscord> <evoalg> beefy has more time
[10:50:44] <FromDiscord> <Rika> ;; its true
[10:56:36] *** Joins: rienske (~rie@185.254.75.31)
[10:56:48] *** laintree is now known as lain
[11:10:43] *** Joins: PMunch (~PMunch@user/pmunch)
[11:34:43] *** Quits: cyraxjoe (~joe@2806:109f:13:81b1:201:2eff:fe80:7df4) (Quit: I'm out!)
[11:37:51] *** Joins: cyraxjoe (~joe@2806:109f:13:81b1:201:2eff:fe80:7df4)
[11:54:31] *** Joins: l1x (uid1954@id-1954.tinside.irccloud.com)
[12:00:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[13:17:24] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3NKS
[13:17:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:18:21] <FromDiscord> <Elegantbeef> `uint`s are unchecked
[13:19:05] <FromDiscord> <Goel> I see it, but why? Should i manually check everytime i use a 'u8 then by myself or there is another way?
[13:19:49] <FromDiscord> <Elegantbeef> uints underflow more than ints
[13:19:57] <FromDiscord> <Rika> Because uints are commonly used for modulo arithmetic
[13:20:28] <FromDiscord> <Elegantbeef> I'm tired and i should shush 😀
[13:21:20] <FromDiscord> <Goel> The only reason i had to define a uint8 instead of a int are the case when im sure they are exactly 255 max, for example in an rgb. So i usually define them as uint8 instead of int so i know it will tell me if does some overflow. But if it doesn't check for them then...
[13:21:33] <FromDiscord> <xx_ns> I still think disabling the error check should be explicit and not implicit, because there's no way for the developer to intuitively know that underflow checks aren't applied for uints
[13:21:56] <FromDiscord> <Elegantbeef> Except the manual explicitly states it
[13:22:18] <FromDiscord> <Elegantbeef> It's not even disabling it's just that uints are commonly used when you want wrapping
[13:22:25] <FromDiscord> <Elegantbeef> So there are no checks
[13:22:49] <FromDiscord> <Elegantbeef> you can always do `0..255` if you want it checked
[13:23:08] <FromDiscord> <Rika> In reply to @xx_ns "I still think disabling": You can argue that and it is a good point
[13:23:17] <FromDiscord> <Rika> But it can’t be changed for now
[13:24:49] <FromDiscord> <xx_ns> In reply to @Elegantbeef "Except the manual explicitly": intuitively... You're not going to be↵1) reading the manual for uints if you are familiar with them already ↵2) know to specifically look for the paragraph that states that under/overrun checks are disabled for them when those checks are specifically a selling point for nim
[13:25:22] <FromDiscord> <xx_ns> there's no inherent logic which would make a developer think "I wonder if checks are disabled for uints" and go look it up
[13:25:57] <FromDiscord> <Rika> Well there is but not for the common dev
[13:26:01] <FromDiscord> <Michal Maršálek> Intuitively, only ints are approximations of integers. uintx behave as integers modulo 2^x instead.
[13:26:10] <FromDiscord> <Rika> What?
[13:27:19] <FromDiscord> <Rika> But yes my point is that some pretty large group of programmers commonly use uints for modulo arithmetic
[13:27:29] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3NKV
[13:27:37] <FromDiscord> <Rika> And I believe that Araq kept it because of that
[13:27:49] <FromDiscord> <Goel> (edit) "https://play.nim-lang.org/#ix=3NKV" => "https://play.nim-lang.org/#ix=3NKW"
[13:28:02] <FromDiscord> <Rika> In reply to @Goel "Also something i noticed": Normal for  floating point representation
[13:28:21] <FromDiscord> <Rika> https://0.30000000000000004.com/
[13:29:22] <FromDiscord> <xx_ns> In reply to @Michal58 "Intuitively, only ints are": by that logic, why bother with checks at all? Intuitively, overrunning the signed integer will flip the signed bit
[13:29:53] <FromDiscord> <Michal Maršálek> In reply to @xx_ns "there's no inherent logic": There is. The logic is if my value should behave like an integer I use type int, which is expected to approximate integers. If I wanna use uint then I need to check how it works in my language of choice.
[13:30:16] <FromDiscord> <Rika> In my opinion, checks should have been there and there should be a type (or just use the push pop switch for the code section) to disable the checks
[13:30:23] <FromDiscord> <Rika> But yeah for now we can’t change it
[13:30:26] <FromDiscord> <Rika> Because breaking change
[13:30:41] <FromDiscord> <mratsim> In reply to @Goel "Why only for `int`'s": because uint are defined everywhere as wrapping around after max.
[13:32:06] <FromDiscord> <Rika> In reply to @mratsim "because uint are defined": Sure, but is it good design
[13:32:27] <FromDiscord> <mratsim> It's expected and familiar to people coming from system languages.
[13:32:59] <FromDiscord> <Rika> But we aren’t just catering to them
[13:33:04] <FromDiscord> <Michal Maršálek> In reply to @xx_ns "by that logic, why": No. If the value is supposed to represent integers than you need to signal an overflow as an error.
[13:33:04] <FromDiscord> <mratsim> if you want checks you can use int, which will prevent underflows. or range[0..255]
[13:33:07] <FromDiscord> <Rika> We’re trying to cater to everyone
[13:33:12] <FromDiscord> <xx_ns> In reply to @Michal58 "There is. The logic": I don't understand why you're defending hidden surprises in a language where the developer is explicitly told otherwise. I'm not advocating for or against checks, I'm advocating for consistency
[13:33:26] <FromDiscord> <mratsim> In reply to @Rika "We’re trying to cater": for everyone with have ints.
[13:33:50] <FromDiscord> <mratsim> basically use ints for safety, common use. Use uint if you need low-level.
[13:34:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[13:34:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NL0
[13:34:35] <FromDiscord> <Rika> Then there’s an educational issue here
[13:34:42] <FromDiscord> <mratsim> as always, docs ...
[13:34:49] <FromDiscord> <xx_ns> yes, you can, that's literally not my point. You _can_ do whatever you want if you _know_ to do it
[13:35:24] <FromDiscord> <mratsim> I did some for our auditors: https://nimbus.guide/auditors-book/02.2_stack_ref_ptr_types.html#numerical-types
[13:35:28] <FromDiscord> <xx_ns> expecting a developer to read the entire documentation from start to finish in order to properly use your language means your language will never be used because you've made design decisions which don't make sense to the average developer
[13:35:55] <FromDiscord> <mratsim> but C devs expect no checks at all?
[13:36:01] <FromDiscord> <xx_ns> yes?
[13:36:05] <FromDiscord> <xx_ns> that is known for C
[13:36:06] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/tut1.html#basic-types-integers
[13:36:17] <FromDiscord> <xx_ns> Nim specifically advertises having overrun checks
[13:36:32] <FromDiscord> <xx_ns> so when those magically disappear for some primitives, it is a hidden surprise
[13:36:34] <FromDiscord> <xx_ns> which is bad language desing
[13:36:44] <FromDiscord> <xx_ns> (edit) "desing" => "design"
[13:36:44] <FromDiscord> <mratsim> I think it's bad docs
[13:36:53] <FromDiscord> <Rika> Eh I mean you lose checks if you use ptr which is a primitive
[13:36:56] <FromDiscord> <Rika> It’s bad docs
[13:37:08] <FromDiscord> <Elegantbeef> It's not hidden it's documented in the official tutorial and in the manual
[13:37:20] <FromDiscord> <xx_ns> if it's not hidden, why is there a person in here asking about it?
[13:37:25] <FromDiscord> <xx_ns> this person represents your average developer
[13:37:29] <FromDiscord> <mratsim> bad discoverability then?
[13:37:32] <FromDiscord> <xx_ns> imagine if he didn't accidentally stumble upon this behaviour
[13:37:40] <FromDiscord> <xx_ns> he wouldn't've even known to expect it
[13:37:52] <FromDiscord> <mratsim> that's why you write tests.
[13:38:06] <FromDiscord> <Rika> Actually maybe not bad docs, it’s bad naming and design, it’s not intuitive to most that “unsigned means no checks”, since “why” is only “because a group of people say so” 🙂
[13:38:07] <FromDiscord> <Michal Maršálek> Nim is more abstract language. I think you need to think about what the types really represent and what they are use for. For uint it's not really and overflow that is happening, but rather a wrap around.
[13:38:38] <FromDiscord> <Michal Maršálek> (edit) "use for." => "used for rather than just the bitpatterns."
[13:38:42] <FromDiscord> <Rika> In reply to @Michal58 "Nim is more abstract": Sure, the same is true for ints
[13:38:48] <FromDiscord> <Elegantbeef> I think the question is "how are they learning"
[13:38:53] <FromDiscord> <Elegantbeef> Goel what are you using to learn?
[13:38:58] <FromDiscord> <Goel> sent a long message, see http://ix.io/3NL4
[13:39:58] <FromDiscord> <xx_ns> again, i'm not saying that checks are a good or a bad thing per se, that _is_ up for the people who design the language. If you have no checks, so be it, but at least have no checks consistently
[13:39:59] <FromDiscord> <mratsim> In reply to @Goel "<@!570268431522201601>  In Zig,": People don't use uint in Nim except at a low-level. At a low-level we can assume that people know how to deal with it.
[13:40:11] <FromDiscord> <Michal Maršálek> In reply to @Goel "<@!570268431522201601>  In Zig,": Yes, what is expected for one developer and one language might be unexpected for a different developer or a language.
[13:40:38] <FromDiscord> <Rika> In reply to @mratsim "People don't use uint": Why isn’t it reflected then? Pointers are “heavily advertised as low level only”, why aren’t uints?
[13:40:52] <FromDiscord> <Michal Maršálek> So I think the best solution is to explicitly state that in the docs/tutorial, which is iirc done.
[13:41:02] <FromDiscord> <Rika> Not sufficiently I will say
[13:41:04] <FromDiscord> <mratsim> length, iterators and everything else in the stdlib use `int`
[13:41:11] <FromDiscord> <mratsim> not uint
[13:41:20] <FromDiscord> <Rika> In reply to @mratsim "length, iterators and everything": A beginner would not understand or pick up on why
[13:41:36] <FromDiscord> <Michal Maršálek> In reply to @Rika "Why isn’t it reflected": Good point
[13:41:41] <FromDiscord> <mratsim> but then they wouldn't use uint, there is no incentive if they stay in the stdlib world to use uint
[13:42:00] <FromDiscord> <Elegantbeef> Well i'll go for the ol' classic and say "PRs welcome" 😀
[13:42:10] <FromDiscord> <mratsim> RFCs welcome: like this https://github.com/nim-lang/RFCs/issues/175
[13:42:11] <FromDiscord> <Rika> In reply to @mratsim "but then they wouldn't": Sorry my brain literally didn’t understand this please explain ;;
[13:42:27] <FromDiscord> <mratsim> In reply to @Rika "Sorry my brain literally": A beginner has no reason to use uint in Nim
[13:42:50] <FromDiscord> <mratsim> are there even proc that returns uint except say parseUint?
[13:43:02] <FromDiscord> <Rika> Well yeah they don’t, so it should be expressed harder that they shouldn’t. I guess it really is PRs welcome at this point
[13:43:14] <FromDiscord> <mratsim> even the "toBin(...)" proc to give the binary repr are accepting int and not uint for some reason.
[13:43:56] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[13:44:37] <FromDiscord> <xx_ns> Most developers know of the characteristics of unsigned integers, namely: they can never represent negative values, and they have a "larger" capacity than a regular int. If a developer knows that this fits their use case perfectly, and the language readily makes those types available, why _wouldn't_ they use it?
[13:45:34] <FromDiscord> <mratsim> In reply to @xx_ns "Most developers know of": and they know that they wrap around.
[13:46:09] <FromDiscord> <xx_ns> sure
[13:46:14] <FromDiscord> <xx_ns> which they think they're protected against
[13:46:17] <FromDiscord> <xx_ns> because _checks_
[13:46:20] <FromDiscord> <Elegantbeef> I think the docs can be more explicit, but you can only lead a cow to water
[13:47:04] <FromDiscord> <mratsim> In reply to @xx_ns "which they think they're": Majority of dev that know unsigned exist are from a low-level language, so C or C++, even if they come from Zig, they would know the danger.
[13:47:13] <FromDiscord> <mratsim> people coming from say, Python or JS would use int
[13:47:36] <FromDiscord> <Goel> sent a code paste, see https://play.nim-lang.org/#ix=3NL9
[13:47:51] <FromDiscord> <Elegantbeef> `x div y`
[13:47:58] <FromDiscord> <mratsim> In reply to @Goel "Also, why this is": because / is for exact division while `div` is for euclidean division.
[13:48:02] <FromDiscord> <Rika> Use div because / is ALWAYS float division
[13:48:16] <FromDiscord> <Michal Maršálek> In reply to @xx_ns "which they think they're": Why are you ignoring the fact that the wrap around is intended? There's nothing to protect you from. It might be surprising for a developer that doesn't know this, sure bu that can be said about any feature.
[13:48:18] <FromDiscord> <Rika> I think it’s one of the better design choices
[13:49:31] <FromDiscord> <Michal Maršálek> (edit) "feature." => "feature (like / op for example)."
[13:52:45] *** haakon_ is now known as haakon
[13:57:32] <FromDiscord> <Michal Maršálek> I just don't like the mindset of "I'll use a feature I don't really know how it works and then complain it doesn't work as I thought it does."
[13:58:21] <FromDiscord> <xx_ns> uints are not a _feature_
[13:58:22] <FromDiscord> <xx_ns> sent a long message, see http://ix.io/3NLf
[13:58:24] <FromDiscord> <xx_ns> uints are a primitive
[13:58:28] <FromDiscord> <xx_ns> checks are a _feature_
[13:58:41] <FromDiscord> <Rika> Pointers are a primitive
[13:58:43] <FromDiscord> <xx_ns> that are for no good reason dropped for some primitives
[13:59:20] <FromDiscord> <Rika> What is a “primitive” in Nim anyway? It’s really fuzzy for Nim compared to other languages
[14:00:26] <FromDiscord> <Michal Maršálek> In reply to @xx_ns "I am not ignoring": You don't need to understand compiler internals to be able to read a doc/tutorial. Again the docs can always be improved but what does it have to do with the compiler itself?
[14:00:29] <FromDiscord> <mratsim> In reply to @xx_ns "uints are a primitive": Again, people can use `range[0..255]` to better express their intent and it will be checked.
[14:00:58] <FromDiscord> <mratsim> Nim by default use ints everywhere, and range types will work with proc that use int
[14:01:18] <FromDiscord> <mratsim> if they use uint, they need to cast everywhere, basically they are on their own.
[14:01:28] <FromDiscord> <mratsim> (edit) "cast" => "convert (checked)"
[14:01:30] <FromDiscord> <Elegantbeef> Well we could also make a `suints` package, but still need to get people there
[14:01:36] <FromDiscord> <Rika> In reply to @Rika "What is a “primitive”": If anyone wants to answer my tangent please do so ;; it’s an interesting qn
[14:01:47] <FromDiscord> <Rika> In reply to @Elegantbeef "Well we could also": Signed unsigned integers
[14:02:08] <FromDiscord> <Elegantbeef> I think builtin is a better term than "primitive" in Nim but idk
[14:02:21] <FromDiscord> <Rika> Someone needs to expose the saturated arithmetic some time, might be useful for someone somewhere
[14:02:48] <FromDiscord> <xx_ns> i was using "primitive" in this example as just a type you expect in almost every such language, not the right word for it
[14:02:49] <FromDiscord> <Rika> In reply to @Rika "Signed unsigned integers": Super user integers 🧐
[14:02:52] <FromDiscord> <mratsim> Also in many system language applications (VM/lang, cryptography) you need the raw uint logic that maps to the hardware.
[14:03:48] <FromDiscord> <mratsim> you can't have the beginner devs dictate and make things difficult for programs that needs those pristine uint primitives.
[14:04:06] <FromDiscord> <mratsim> Nim achieves a balance right now with checked signed and unchecked unsigned
[14:04:17] <FromDiscord> <mratsim> yes we can improve docs and their discoverability
[14:04:18] <FromDiscord> <xx_ns> then you shouldn't be advertising uints to beginner devs?
[14:04:23] <FromDiscord> <mratsim> we don't?
[14:04:39] <FromDiscord> <Rika> We shouldn’t and I don’t know if we do but if we do we shouldn’t
[14:04:41] <FromDiscord> <xx_ns> it's literally one of the first things you're told in the nim guide?
[14:05:04] <FromDiscord> <mratsim> and it should be aid that they are not checked just beside.
[14:05:04] <FromDiscord> <Rika> That needs to be fixed then I guess
[14:05:11] <FromDiscord> <mratsim> (edit) "aid" => "said"
[14:08:35] <FromDiscord> <xx_ns> even people who write guides don't mention this behaviour, either because they aren't actively aware of it or because they never knew it in the first place
[14:08:54] <FromDiscord> <xx_ns> for example https://nim-by-example.github.io/primitives/
[14:08:57] <FromDiscord> <Elegantbeef> Or the third they forget to mention it
[14:09:04] <FromDiscord> <Rika> You mean aware and think everyone else is aware?
[14:09:23] <FromDiscord> <Rika> Beef rushing to revise his posts
[14:09:50] <FromDiscord> <Elegantbeef> I dont have any intros to Nim posts
[14:09:51] <FromDiscord> <mratsim> In reply to @xx_ns "even people who write": I think it's just an omission, and a PR can be made.
[14:10:07] <FromDiscord> <Rika> Yes pretty much
[14:10:10] <FromDiscord> <Rika> If not a PR an issue
[14:10:45] <FromDiscord> <mratsim> And that would be something that goes in a cookbook. "I want to make a type that can represent 256 values, what are my solutions?".
[14:11:01] <FromDiscord> <Elegantbeef> And if one is relatively unhappy with the way Nim's builtin uints work they can always make one that is the same size but safe
[14:11:06] <FromDiscord> <Rika> Most people don’t think of making a cookbook
[14:11:20] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3NLh
[14:11:29] <FromDiscord> <Rika> What does the s mean !?!
[14:11:36] <FromDiscord> <Elegantbeef> safe
[14:11:38] <FromDiscord> <Rika> Sintered? SChecked??
[14:11:54] <FromDiscord> <mratsim> also in that example "unsigned" isn't even explained in terms of integer size or positive only.
[14:12:34] <FromDiscord> <xx_ns> it is?
[14:12:38] <FromDiscord> <xx_ns> > To indicate the size of an integer literal, append u or i and the size you’d like to the end.
[14:12:50] <FromDiscord> <xx_ns> oh
[14:12:50] <FromDiscord> <mratsim> > unsigned integers are similar with u prepended to the type
[14:12:52] <FromDiscord> <xx_ns> wait
[14:13:00] <FromDiscord> <mratsim> that doesn't explain what unsigned entails.
[14:14:53] <FromDiscord> <Elegantbeef> Anyway i'm going to sleep and leaving with the my favourite message "be the change you want to in the world, make that PR"
[14:29:01] <FromDiscord> <Goel> sent a long message, see https://paste.rs/kV8
[14:29:13] <FromDiscord> <Goel> (edit) "http://ix.io/3NLm" => "http://ix.io/3NLn"
[14:29:29] <FromDiscord> <Rika> int64
[14:30:13] <FromDiscord> <Goel> That's not what i'm talking, i mean `x: int` or `f: float`
[14:30:52] <FromDiscord> <Rika> I don’t get your issue
[14:31:29] <FromDiscord> <Rika> Trouble? You have checks now, what’s the difference from using a uint aside from that?
[14:32:54] <FromDiscord> <Goel> If i only use (as suggested by mratsim if i didn't get it wrong) and declare variables or fields as `int` and `float`, that will be based on my architecture. And my program will behave following it. But it will behave differently for another architecture, so just defining them as simply `int` or `float`, instead of example `int32`, `int64`, `uint32` will cause problems
[14:33:36] <FromDiscord> <Rika> That’s not what he means, he means use ints over uints and that includes 8,16,32,64s
[14:33:51] <FromDiscord> <Goel> Oh ok then
[14:34:27] <FromDiscord> <Rika> If you want a definitive answer though, let’s wait for him if he would reply. But I’m pretty sure what I said is what he means
[14:35:52] <FromDiscord> <Goel> But once again, why Nim should "gently" force me to stick to `int`'s instead of `uint`'s when i know for example i have an array of elements that will always be positive, so why should i declare it as `int32` instead if `uint32`? That would make more sense to me
[14:45:27] <FromDiscord> <haolian9 (高浩亮)> i saw `mitems` in latest [manual](https://nim-lang.org/docs/tut1.html#control-flow-statements-for-statement), but i also found it [nim-lang/Nim#3700](https://github.com/nim-lang/Nim/issues/3700) at least since 2016?> items and mitems, which provides immutable and mutable elements respectively
[14:45:54] <FromDiscord> <mratsim> In reply to @Goel "But once again, why": do you know how to deal with underflows?
[14:46:03] <FromDiscord> <mratsim> if no, use int
[14:46:13] <FromDiscord> <mratsim> or range types if you want to restrict
[14:46:18] <FromDiscord> <mratsim> say range[0..255]
[14:46:50] <FromDiscord> <mratsim> if at one point you are tempted to use `if a < b -1` you shouldn't use uint.
[14:46:56] <FromDiscord> <mratsim> (edit) "-1`" => "- 1`"
[14:48:26] <FromDiscord> <BhamidipatiNikhil> Interesting that parseInt() is not accepted under the map method... We should use just parseInt without the parentheses instead https://media.discordapp.net/attachments/371759389889003532/936580977550049330/unknown.png
[14:49:10] <FromDiscord> <Vindaar> In reply to @BhamidipatiNikhil "Interesting that parseInt() is": that's because `parseInt()` is a function call, but `map` expects a function itself
[14:50:12] <FromDiscord> <Vindaar> (yes, by turning `map` into a macro one could remove the call in case the user does this, but I think uhh, that's a bad idea 😅)
[14:51:53] <FromDiscord> <mratsim> In reply to @Goel "But once again, why": there is a reason why in Nim, lengths return an int and not an uint. uints are hard to use safely because they don't allow negative values.
[14:52:18] <FromDiscord> <mratsim> many bugs in C and C++ are due to comparing unsigned numbers
[14:57:44] <FromDiscord> <haolian9 (高浩亮)> it turns out that i used `let` to declare the variable; but the error message is hard to read though
[14:58:15] <Amun-Ra> and many bugs in C and C++ are due to silent unsigned wrapping as the result of arithmetical operations
[14:59:04] <FromDiscord> <cybardev> In reply to @BhamidipatiNikhil "Interesting that parseInt() is": That's true for most (if not all) languages, no?
[14:59:08] <Amun-Ra> wrapping as in wrapping around
[15:00:18] <FromDiscord> <BhamidipatiNikhil> In reply to @Vindaar "that's because `parseInt()` is": Yes, understood... Thx @Vindaar
[15:00:25] <FromDiscord> <cybardev> (edit) "In reply to @BhamidipatiNikhil "Interesting that parseInt() is": That's true for most (if not all) languages, no? ... " 03added "At least in Python it is."
[15:00:46] <FromDiscord> <cybardev> (edit) "In reply to @BhamidipatiNikhil "Interesting that parseInt() is": That's true for most (if not all) languages, no? At least in Python it is. ... " 03added "Probably in JS too."
[15:01:06] <FromDiscord> <evoalg> In reply to @BhamidipatiNikhil "Interesting that parseInt() is": mapIt works with parseInt() ... https://play.nim-lang.org/#ix=3NLu
[15:06:15] <FromDiscord> <BhamidipatiNikhil> In reply to @evoalg "mapIt works with parseInt()": The 'it' must mean iterator... If so, The mapit() is much more powerful and better than the map() method...
[15:08:55] <FromDiscord> <Vindaar> In reply to @evoalg "mapIt works with parseInt()": yes, certainly. But that's because `mapIt` is a template that accepts a body that itself evaluates to some value. With it you must use a call. so `x.mapIt(parseInt)` wouldn't work
[15:09:49] <FromDiscord> <Vindaar> In reply to @BhamidipatiNikhil "The 'it' must mean": `it` stands for the fact that `mapIt` is essentially a for loop that iterates over the input collection. The element at each iteration is given by the variable `it`, which is injected into the calling scope (i.e. the "argument" of `mapIt`). Hence the `it`
[15:12:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:19:12] <FromDiscord> <mratsim> In reply to @Amun-Ra "and many bugs in": which is why Nim uses signed by default
[15:20:22] <Amun-Ra> yupe
[15:20:59] <FromDiscord> <Michal Maršálek> In reply to @evoalg "mapIt works with parseInt()": For a second i was rather confused until I opened the link and noticed you meant `parseInt(it)` and not `parseInt()` :D
[15:22:15] <FromDiscord> <evoalg> ah yea ... I never know how to say things clearly
[15:26:39] <FromDiscord> <Phil> In reply to @mratsim "And that would be": I'm currently just catching up on what I missed, isn't that what "nim-by-example" is for?
[15:33:55] <PMunch> Hmm, we really should turn Nim documentation generation into JSON only and then run a separate program to turn JSON into HTML and LaTeX..
[15:34:15] <PMunch> Would make it soooo much easier to build other documentation tools
[15:39:15] <PMunch> I'm looking at bringing documentation into a project documentation thing but extracting information from the HTML is painful, and the JSON format isn't quite up to the task of generating the same output
[15:39:32] <PMunch> It's almost there though
[15:39:50] <NimEventer> New thread by Severak: How to find bottlenecks?, see https://forum.nim-lang.org/t/8850
[15:54:57] <Nuc1eoN> Hey guys I am checking a pull request to add nim icon to this vscode icon theme https://github.com/Mozart409/mozart409-icons/issues/4
[15:55:14] <Nuc1eoN> do you guys know all the nim file extensions?
[15:58:54] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[16:02:28] <FromDiscord> <Phil> I wouldn't say I know all, the most common ones are `.nim` for nim code, `.nimble` for meta data about a package that also denotes its dependencies and `.nims`... which I forgot what that was for
[16:05:01] <FromDiscord> <haxscramper> `.nim`, `.nimble`. `.nims` for files, `.cfg` (or more specifically `nim.cfg`, `.nim.cfg` for configurations), `nimdoc.cfg`, also there is a deprecated `.babel`
[16:05:29] <FromDiscord> <haxscramper> nim syntax is only in `.nim` files
[16:16:03] <FromDiscord> <mratsim> In reply to @Isofruit "I'm currently just catching": No, how-to/cookbooks have a different goal and audience from tutorial (see https://documentation.divio.com/)
[16:23:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[16:31:42] <Nuc1eoN> thank u
[16:31:51] <Nuc1eoN> It is implemented
[16:38:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:52:16] *** Joins: drewr (~drew@user/drewr)
[17:07:47] <PMunch> @haxscramper, Nim syntax is in .nim, .nims, and .nimble
[17:08:13] <PMunch> Although .nimble is a bit special
[17:08:30] <FromDiscord> <Patitotective> Does `nimble` support cli scripts or entry points? like _pip_?
[17:08:38] <FromDiscord> <Patitotective> (edit) "`nimble`" => "_nimble_"
[17:08:53] <PMunch> Hmm, by using jsondoc and packages/docutils/highlite I'm able to get some kind of thing working
[17:09:00] <PMunch> @Patitotective, yup
[17:09:04] <FromDiscord> <haxscramper> In reply to @PMunch "<@608382355454951435>, Nim syntax is": that's exactly what I clarified in the second message. "nim syntax is only in .nim files"
[17:09:26] <PMunch> But you say they are only in .nim files
[17:09:33] <PMunch> But it is in .nims and .nimble as well
[17:09:37] <FromDiscord> <haxscramper> nim star
[17:09:45] <FromDiscord> <Patitotective> In reply to @PMunch "<@762008715162419261>, yup": Hmm, how? I couldn't find it on _nimble_'s repository hehe
[17:09:45] <FromDiscord> <haxscramper> the irc bridge broke my message
[17:09:47] <FromDiscord> <Patitotective> (edit) "hehe" => ":p"
[17:09:55] <FromDiscord> <haxscramper> you just don't the the full correct message
[17:10:01] <FromDiscord> <haxscramper> (edit) "the" => "see"
[17:10:39] <PMunch> @Patitotective, look for `tasks` in the Nimble documentation
[17:10:58] <PMunch> @haxscramper, aah, yes the bridge isn't super happy with *
[17:11:10] <PMunch> I think it always try to make them bold indicators or something like that
[17:18:54] <PMunch> I have to resolve links to documentation myself though, which is a bit of a pain
[17:21:25] *** Joins: rockcavera (~rc@192.12.114.201)
[17:21:25] *** Quits: rockcavera (~rc@192.12.114.201) (Changing host)
[17:21:25] *** Joins: rockcavera (~rc@user/rockcavera)
[17:25:11] *** Joins: arkurious (~arkurious@user/arkurious)
[17:43:56] *** Guest9702 is now known as [R]
[18:07:33] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3NMa
[18:08:30] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3NMa" => "https://play.nim-lang.org/#ix=3NMb"
[18:12:43] <FromDiscord> <mratsim> In reply to @Patitotective "I'm writing a lexer": Lexing is just transforming random characters into a tree of identifiers and symbols. Like if you see aabbb = 1234 the letters go together as would the numbers. And if you see `aa1234bb = 2` there shouldn't be any split between aa and 1234 they are part of the same whole.
[18:13:05] <FromDiscord> <mratsim> then parsing will assign them roles, like assigning a value.
[18:14:00] <FromDiscord> <Patitotective> Hmmmm Ok
[18:14:02] <FromDiscord> <Patitotective> thanks
[18:14:04] <FromDiscord> <Patitotective> 🙃
[18:18:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[18:31:12] <FromDiscord> <gerwy> Oh nice Patito i see you still working
[18:31:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:32:53] <FromDiscord> <gerwy> soo well heh, im at the stage of making AST↵how Node should look? I know it should have type, like the token type and probably a value and children↵there is nothing like union in nim at least not in the std i see, i tried to use `case` in object declaration but i can't change the type of the same property unfortunately↵so should i have value of AST node just be a string?
[18:34:40] <FromDiscord> <haxscramper> Generally nodes can be kept as a case objects, you can set their type on construction
[18:35:11] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3NMu
[18:36:16] <FromDiscord> <gerwy> yes im actually looking at rstast module for reference hah
[18:37:26] <FromDiscord> <gerwy> In reply to @haxscramper "Generally nodes can be": yeah i was thinking about `case`, but how would i assign value this way?↵can i do same thing as tuple so get the property by index? like TNode[0]
[18:37:54] <FromDiscord> <haxscramper> `node = TNode(kind: nkInt, intVal: <some value>)`
[18:38:03] <FromDiscord> <haxscramper> Or `node.intVal  = <some value>`
[18:38:32] <FromDiscord> <gerwy> yeah but if would assign string to `node.intVal` it would be an error
[18:38:50] <FromDiscord> <gerwy> so i would need to check  everytime for type of token
[18:38:56] <FromDiscord> <gerwy> (edit) "everytime" => "every time"
[18:39:14] <FromDiscord> <haxscramper> well, I assume that assinging string to an integer is indeed an error
[18:39:42] <FromDiscord> <haxscramper> what is the use case? you create new node from the token and assign it somewhere
[18:39:51] <FromDiscord> <gerwy> im making AST out of Token list
[18:39:52] <FromDiscord> <haxscramper> or what
[18:40:20] <FromDiscord> <haxscramper> In reply to @Life Sucks "im making AST out": how exactly? Handwritten recursive descend with `case` on the token kinds?
[18:40:48] <FromDiscord> <haxscramper> `of tokenKindInt: resultNode = TNode(kind: nkInt, intVal: token.intVal`
[18:41:19] <FromDiscord> <Patitotective> In reply to @Life Sucks "so i would need": you may want to create a procedure that depending on each kind, assigns the value to a different field
[18:41:59] <FromDiscord> <gerwy> so i would have seq of Nodes which would have type, i guess value and another seq of Nodes as for its children of course
[18:42:01] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3NMy
[18:42:06] <FromDiscord> <haxscramper> create new node, assigning value from a token
[18:42:09] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3NMz
[18:42:31] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/fcO
[18:42:46] <FromDiscord> <haxscramper> or the way @Patitotective suggested, I just don't like in-place argument mutation for constructing datra
[18:42:47] <FromDiscord> <Patitotective> In reply to @Life Sucks "Oh nice Patito i": hehe yea, this seems to have no end
[18:42:48] <FromDiscord> <haxscramper> (edit) "datra" => "data"
[18:43:06] <FromDiscord> <gerwy> In reply to @haxscramper "or the way <@!762008715162419261>": i might have procedure with template parameter to that will have case statement and create node according to the type yeah hmm
[18:43:48] <FromDiscord> <gerwy> im kinda going with the tutorial to make interpreter for pascal in python and guy fortunately uses recursion to parse all tokens to AST↵but ugh this OOP in python is fucked
[18:45:42] <FromDiscord> <haxscramper> all parsers except LR are recursive
[18:45:49] <FromDiscord> <haxscramper> well, all sane parsers that you start with
[18:46:04] <FromDiscord> <haxscramper> recursive descent in all variations is recursive becase the AST itself is recursive
[18:46:47] <FromDiscord> <haxscramper> There are exceptions to the rule, like more specific parsing algorithms for expressions, but general code structure will be mutually recursive, following language's grammar
[18:48:39] <FromDiscord> <Patitotective> In reply to @mratsim "Lexing is just transforming": So, for example `"hello"` would be something like `DOUBLEQUOTE ALPHA ALPHA ALPHA ALPHA ALPHA DOUBLEQUOTE` and `r"hello"` `ALPHA DOUBLQUOTE ALPHA ALPHA ALPHA ALPHA ALPHA DOUBLEQUOTE`? And then in the parser it would be a string and a raw string?
[18:48:42] <NimEventer> New thread by Planetis: Html2karax first release!, see https://forum.nim-lang.org/t/8851
[18:49:02] <FromDiscord> <Patitotective> In reply to @Patitotective "So, for example `"hello"`": Or can I say it is a string already?
[18:49:10] <FromDiscord> <Patitotective> (edit) "already?" => "and a raw string in the lexer?"
[18:59:59] <FromDiscord> <auxym> In reply to @Patitotective "So, for example `"hello"`": Something like that. I do recommend reading the first couple chapters of this: https://craftinginterpreters.com/contents.html
[19:08:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[19:14:25] <FromDiscord> <Forest> Anyone know how I'd pass an argument to the linker in the Nims file?
[19:14:47] <FromDiscord> <Forest> Also how would i check if something isn't defined?
[19:15:27] <FromDiscord> <Forest> Would `if not defined(DEF)` work?
[19:16:43] <FromDiscord> <Phil> I actually have never tinkered with the nims file, so apologies, can't really help there
[19:16:55] <FromDiscord> <Forest> Fair enough, thanks aha
[19:19:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:19:27] <FromDiscord> <auxym> `--passL:-yourarghere`
[19:19:46] <FromDiscord> <Forest> I need to do it via the nims file
[19:20:09] <FromDiscord> <auxym> https://github.com/auxym/nim-on-samd21/blob/e7e8c3b993fca3e2ca3ebe9ff430959c73075149/config.nims#L55
[19:20:36] <FromDiscord> <Forest> Yeah i just realized that Nim has a macro for it xD
[19:20:39] <FromDiscord> <Forest> Thanks!
[19:28:49] <FromDiscord> <eyecon> In reply to @auxym "Something like that. I": What beautiful typography
[19:29:37] <FromDiscord> <auxym> Yes! hand drawn illustrations too: https://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/
[19:29:44] <FromDiscord> <konsumlamm> sent a long message, see http://ix.io/3NMQ
[19:30:09] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (Quit: You have been kicked for being idle)
[19:33:40] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3NMW
[19:37:23] <termer_> Is there any type definition I can use that represents any type of integer
[19:37:44] <termer_> if there isn't one, is there a way to define such a type?
[19:38:31] <FromDiscord> <enthus1ast> the next sqlite release will have JSON build in natively!
[19:38:32] <FromDiscord> <enthus1ast> https://www.sqlite.org/draft/releaselog/current.html
[19:39:04] <FromDiscord> <enthus1ast> image.png https://media.discordapp.net/attachments/371759389889003532/936654116841746432/image.png
[19:39:48] <FromDiscord> <Phil> sqlite is one of those insanely wonderful technologies
[19:40:07] <FromDiscord> <Phil> I just does so much so well for so little
[19:45:10] <FromDiscord> <Bung> sent a code paste, see https://play.nim-lang.org/#ix=3NN2
[19:53:43] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[20:04:29] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[20:05:15] <FromDiscord> <ajusa> Is there a way to async create a folder or do fs operations other than writing?
[20:05:48] <Zevv> no
[20:10:16] <FromDiscord> <ajusa> In reply to @Zevv "no": Is my best option to use asyncthreadpool and then spawn a thread? I'm trying to avoid blocking the web server in this case
[20:10:45] <FromDiscord> <Shiba> so how can i make the nim compiler ignore those unused variables\modules
[20:11:02] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 260 seconds)
[20:11:16] <FromDiscord> <Shiba> (edit) "variables\modules" => "variables|modules"
[20:11:50] <Zevv> ajusa: yes; your OS is not exposing any async system calls for these file operations, so you will likely need soemthing like threads to work around this
[20:12:05] <FromDiscord> <ajusa> Gotcha, thanks for clarifying!
[20:14:03] <FromDiscord> <Phil> Man, if only donating to open source devs counted as charity donations
[20:14:51] <FromDiscord> <Shiba> In reply to @Isofruit "Man, if only donating": vim?
[20:14:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:15:20] <FromDiscord> <Phil> You mean if I donate to vim devs?
[20:16:27] *** Joins: vicfred_ (~vicfred@user/vicfred)
[20:16:28] <FromDiscord> <Shiba> yes https://media.discordapp.net/attachments/371759389889003532/936663527849095188/Capture.PNG
[20:18:13] <FromDiscord> <Shiba> In reply to @Isofruit "You mean if I": no , https://media.discordapp.net/attachments/371759389889003532/936663972722122822/Capture.PNG
[20:18:49] <FromDiscord> <Shiba> even their license called uganda.txt
[20:18:54] <FromDiscord> <Shiba> (edit) "even their license ... called" 03added "is"
[20:18:57] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[20:20:43] <FromDiscord> <Phil> As I do not, and have never intentionally, use vim, I do not donate specifically to charity towards children in Uganda.
[20:21:11] <FromDiscord> <Phil> Might've stumbled over that sooner if I did.
[20:27:51] <FromDiscord> <mratsim> In reply to @konsumlamm "those are reasons against": they represent closely what the hardware does and are necessary when you need to interact with hardware or simulate hardware. For all other use-cases, you have signed integers.
[20:31:37] <FromDiscord> <Waldecir Santos> Does nim have a trim function and what is the best way to search this kind of things ?
[20:31:54] <FromDiscord> <Rika> trim what exactly
[20:32:23] <FromDiscord> <Waldecir Santos> sorry spaces at the end of a string
[20:32:27] <FromDiscord> <leorize> \`strip()\`
[20:32:29] <FromDiscord> <Rika> https://nim-lang.org/docs/strutils.html#strip%2Cstring%2Cset%5Bchar%5D
[20:32:30] *** Joins: xet7 (~xet7@user/xet7)
[20:32:30] <FromDiscord> <leorize> in strutils
[20:32:33] <FromDiscord> <Rika> end only?
[20:32:42] <FromDiscord> <Waldecir Santos> Correct end only
[20:32:56] <FromDiscord> <Rika> `trailing = true` too in strip
[20:33:06] <FromDiscord> <planetis> Bookmark this\: https://nim-lang.github.io/Nim/theindex.html
[20:33:14] <FromDiscord> <Waldecir Santos> Man I was on that page and couldn't find it i need new glasses, thank you
[20:47:31] <FromDiscord> <Forest> To fix the issue i was having with Emscripten i downloaded an unmodified build of Nim and then edited the config.nims to include the android-glob by default, and then made a specific flag to disable it and now emscripten works fine :D
[20:48:30] <FromDiscord> <konsumlamm> In reply to @mratsim "they represent closely what": how do they represent what the hardware does closer than `int`s? sure, there should be a way to have raw integers without checks, but why should `uint`s specifically be that type? there are enough cases where you have integers that are never negative, and having that checked would eliminate all the C bugs with indexing you like to use as an argument against them
[20:55:13] <FromDiscord> <IsaacPaul> I would lean toward using unsigned. Developer intent is more clear.
[20:55:32] <FromDiscord> <IsaacPaul> but int is easier 'to deal with'
[21:11:43] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[21:30:50] <FromDiscord> <elo88> this is normal or nimsuggest has leak? https://media.discordapp.net/attachments/371759389889003532/936682245442387998/unknown.png
[21:33:09] <FromDiscord> <konsumlamm> both probably
[21:40:29] <l1x> hi folks, is there a TLS lib that I can use in a HTTP server in Nim?
[21:42:52] <FromDiscord> <mratsim> In reply to @konsumlamm "how do they represent": Hardware integers are mod 2⁸ or 2¹⁶ or 2³² or 2⁶⁴.↵↵Using unsigned will NOT eliminate bugs, it will introduce bugs. It will introduce underflows everywhere. We used unsigned int at Status to implement a spec that used unsigned integer along with teams using Java, Typescript, Rust and Go. Everyone including the spec had underflows.
[21:45:46] *** Joins: neceve (~quassel@2.26.93.228)
[21:46:49] <FromDiscord> <konsumlamm> In reply to @mratsim "Hardware integers are mod": but wouldn't those bugs be caught if underflow was checked?
[21:48:27] <FromDiscord> <mratsim> In reply to @konsumlamm "but wouldn't those bugs": so use `range[0..255]`
[21:49:22] <FromDiscord> <konsumlamm> my point is that your arguments against uints are about hoe they're currently implemented, and not uints in general
[21:49:26] <FromDiscord> <mratsim> All C++ most prominent devs agree that you shouldn't use unsigned unless you want the low-level machine like behavior: https://stackoverflow.com/questions/10168079/why-is-size-t-unsigned
[21:49:46] <FromDiscord> <mratsim> uint in Nim maps to the hardware.
[21:50:03] <FromDiscord> <mratsim> they are implemented like uints (and ints) are in the CPU.
[21:50:04] <FromDiscord> <konsumlamm> because unsigned ints in C++ are bad, not unsigned ints in general
[21:50:48] <FromDiscord> <mratsim> why do you want to use unsigned int instead of signed int or range type?
[21:50:56] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[21:52:14] <FromDiscord> <mratsim> In Nim, there is Natural if you want to express positive only integers.
[21:52:20] <FromDiscord> <mratsim> or range type.
[21:52:34] <FromDiscord> <mratsim> Ada does it too. And they also have unsigned integers.
[21:58:51] <FromDiscord> <konsumlamm> In reply to @mratsim "why do you want": because they're the intuitive type for values that are never negative
[21:59:26] <NimEventer> New post on r/nim by TonTinTon: Panther - a shellcode programming language written in Nim. Stopped working on it like a year ago, thought I'd share anyway., see https://reddit.com/r/nim/comments/sex8b8/panther_a_shellcode_programming_language_written/
[22:00:59] <FromDiscord> <konsumlamm> if uints aren't supposed to be used as unsigned integers, but rather as unchecked raw integers, then honestly uint is a bad name (unless you wanna tell me that the u stands for unchecked)
[22:11:54] <FromDiscord> <haxscramper> they are bad representation for values that never have negative value, because this property is not enforced at compile nor runtime, instead they just silently produce a wrong behavior (wrapping around), whereas `Natural` or `range[0..255]`  should work correctly
[22:12:37] <FromDiscord> <mratsim> people coming from high-level languages never had the unsigned vs signed distinction, they use int, = no problem.
[22:13:19] <FromDiscord> <mratsim> people coming from low-level languages either need check or unchecked and know the potential danger and use the appropriate one.
[22:25:41] *** Quits: syl (~z@user/syl) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[22:26:05] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[22:26:15] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Ping timeout: 256 seconds)
[22:26:15] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 256 seconds)
[22:26:34] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[22:27:06] *** Joins: syl (~z@user/syl)
[22:28:29] <FromDiscord> <demotomohiro> `uint` type is used to storing bit pattern in some algorithm (PRNG, hash, cryptograph, etc).↵If `uint` had under/overflow checks, we cannot use it for these algorithm.
[22:29:02] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[22:29:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[22:32:06] <FromDiscord> <demotomohiro> `uint` with range check may make sense for storig 24bit RGB value or 16 bit index buffer of 3D mesh.
[22:33:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Client Quit)
[22:34:08] *** Joins: Ekho (~Ekho@user/ekho)
[22:34:24] <FromDiscord> <demotomohiro> Then, we have to add another `uint` type or operators with range check.
[22:37:35] <FromDiscord> <Waldecir Santos> Can some one explain why string format uses &"" why not just f"" like python, nim even have r"", can someone tell me the reason for that ?
[22:40:37] <FromDiscord> <Forest> Doesn't format use `fmt""`?
[22:40:58] <FromDiscord> <Forest> `&` is for concatenation last i checked
[22:41:20] <FromDiscord> <Waldecir Santos> You can check it here https://nim-lang.org/docs/strformat.html
[22:41:21] <FromDiscord> <demotomohiro> There is both `&` and `fmt` strformat
[22:41:37] <FromDiscord> <Forest> Huh never knew that
[22:42:07] <FromDiscord> <Waldecir Santos> This is not a criticism on complaint, I just want to understand why use `&` it feels confuse for me and over complex
[22:42:49] <FromDiscord> <demotomohiro> strformat define `&` as unary operator. Binary `&` for concatenation.
[22:43:01] <FromDiscord> <Forest> Ah okay
[22:44:31] <FromDiscord> <Forest> `&"Text\n"` looks more aesthetically pleasing to me tbh
[22:45:14] <FromDiscord> <demotomohiro> strformat module added relatively recenty in Nim and I guess author thought using `f` is too
[22:45:23] <FromDiscord> <demotomohiro> Short?
[22:46:26] <FromDiscord> <Forest> Just the fact that stuff isn't automatically escaped and requiring me to use another way to use \n and stuff
[22:49:01] <FromDiscord> <demotomohiro> fmt"foo\n" is generalized raw string literal and you cannot use escape sequence. https://nim-lang.org/docs/manual.html#lexical-analysis-generalized-raw-string-literals
[22:50:45] <FromDiscord> <demotomohiro> But &"foo\n" is not. You can use escape sequence.
[22:52:03] <FromDiscord> <Waldecir Santos> Yeah I still to nim, my question is more about why `&` guess we will never know 😦
[22:52:09] <FromDiscord> <Waldecir Santos> (edit) "Yeah I still ... to" 03added "new"
[22:52:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:52:58] <FromDiscord> <demotomohiro> !eval import strformat; echo &"foo\tbar"; echo fmt"foo\tbar"
[22:53:02] <NimBot> foo	bar↵foo\tbar
[22:53:16] <FromDiscord> <Phil> ~~I would throw money at getting python's f-strings just because I'm lazy~~
[22:53:17] <FromDiscord> <Rika> letters and touching string literal -> raw
[22:53:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[22:53:31] <FromDiscord> <Rika> & is already the equiv. of f strings
[22:53:33] <FromDiscord> <Phil> (edit) "f-strings" => "f-string-syntax"
[22:53:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:55:14] <FromDiscord> <demotomohiro> You might check `git log Nim/lib/pure/strformat.nim` to find the person who created the module and find out the person and ask a question.
[22:55:17] <FromDiscord> <Waldecir Santos> Maybe git history have a explanation about it, I'll check later
[22:55:29] <FromDiscord> <Waldecir Santos> In reply to @demotomohiro "You might check `git": exactly, thank you
[23:02:05] <FromDiscord> <Patitotective> https://github.com/nim-lang/Nim/blame/6b3bdd798d235a465d94ebedbc784d6b41057798/lib/pure/strformat.nim#L17
[23:03:14] <FromDiscord> <demotomohiro> I found a first pull request to add strformat: https://github.com/nim-lang/Nim/pull/6507
[23:10:22] <FromDiscord> <Waldecir Santos> Wow it used to be `%` and it changed to `&` here https://github.com/nim-lang/Nim/commit/9a60eae631e9f778d3920f3a66de0e726e687eef
[23:11:35] <FromDiscord> <Phil> I am an imbecile! How have I missed the existance of strformat for so long!
[23:11:46] <FromDiscord> <Waldecir Santos> No explanation given just a `fixes #7078`
[23:13:09] <FromDiscord> <Waldecir Santos> there we go:
[23:13:18] <FromDiscord> <Waldecir Santos> sent a code paste, see https://play.nim-lang.org/#ix=3NO1
[23:13:27] <FromDiscord> <Phil> Down with & for string concat! here comes the "{myvars}".fmt !
[23:14:07] <FromDiscord> <Waldecir Santos> If you guys want to check the discussion: https://github.com/nim-lang/Nim/issues/7078
[23:14:58] <FromDiscord> <Waldecir Santos> That was the explanation I was looking for, thank you guys.
[23:15:01] <FromDiscord> <Waldecir Santos> sent a code paste, see https://play.nim-lang.org/#ix=
[23:18:24] <FromDiscord> <Phil> I'm honestly never ever going to use "&", that is mentally set as string concat operator
[23:18:55] <FromDiscord> <Phil> The most readable way that has the least amount of gotcha on it really seems to be "your formatted string".fmt
[23:19:29] <FromDiscord> <Phil> (edit) ""&"," => ""&" for formatting,"
[23:23:34] <FromDiscord> <Waldecir Santos> why `"your formatted string".fmt` and not `fmt"your formatted string"` ?
[23:26:08] <FromDiscord> <Phil> sent a long message, see http://ix.io/3NO3
[23:27:01] <FromDiscord> <Phil> I could also do `fmt("your format string")` but I really dislike having to have brackets around long expressions, it's a bother
[23:27:51] <FromDiscord> <demotomohiro> !eval import strformat; echo fmt"foo\tbar"; echo fmt "foo\tbar"
[23:27:55] <NimBot> foo\tbar↵foo	bar
[23:36:02] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[23:36:32] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[23:37:08] <FromDiscord> <Phil> hmmmmm
[23:37:22] <FromDiscord> <Phil> True, I could make use of nim's "bracket-less" form of calling a proc
[23:37:29] <FromDiscord> <Phil> Which... sidequestion, where did nim get that from?
[23:38:49] <FromDiscord> <Phil> this entire  `a.len()` equals `a.len` equals `len a` thing I mean
[23:44:02] <Zevv> it's called "method call syntax": https://nim-lang.org/docs/manual.html#procedures-method-call-syntax
[23:44:33] <Zevv> sometimes called UFCS
[23:44:37] <Zevv> uniform function call syntax
[23:47:06] <Zevv> D does it, rust does it. Even C++ would like to do it.
[23:48:10] <FromDiscord> <Patitotective> In reply to @Isofruit "For some reason, according": https://nim-lang.org/docs/manual.html#lexical-analysis-generalized-raw-string-literals↵It is a generalized raw string literal
[23:57:34] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
