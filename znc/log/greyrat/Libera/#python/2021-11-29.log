[00:00:51] *** Joins: junktext__ (~junktext@gateway/vpn/pia/junktext)
[00:01:02] <sazawal> bjs, Yes
[00:02:21] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[00:02:28] *** Quits: cr0n0s (~quassel@181.66.138.161) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:03:05] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[00:05:13] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[00:05:39] *** Joins: p3lim (~p3lim@ti0006q161-2971.bb.online.no)
[00:05:45] *** Joins: cr0n0s (~quassel@181.66.138.161)
[00:05:50] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:07:36] *** Quits: junktext__ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 256 seconds)
[00:07:46] *** Joins: reset (~reset@user/reset)
[00:08:11] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[00:08:20] *** Joins: Throgkt (~Throgkt@user/throgkt)
[00:08:34] *** Quits: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:08:41] *** Quits: cr0n0s (~quassel@181.66.138.161) (Client Quit)
[00:08:41] *** Quits: jab416171 (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[00:08:52] *** Joins: RasnCain (~rasncain@68.12.15.83)
[00:08:55] *** Quits: hrehf (~foofaoijf@2001:16b8:2c73:b400:ec9e:658e:3caf:38ef) (Remote host closed the connection)
[00:09:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:09:20] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a07d:f577:2eaa:7c3a) (Ping timeout: 265 seconds)
[00:09:47] *** Joins: cr0n0s (~quassel@181.66.138.161)
[00:13:30] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:13:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[00:14:03] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[00:14:47] *** Quits: BlueSky_ (~BlueSky@user/bluesky) (Quit: Leaving)
[00:15:16] *** Joins: whaley (~whaley@2603-6080-a301-33d1-517f-143f-4117-ec87.res6.spectrum.com)
[00:15:21] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 268 seconds)
[00:15:37] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[00:16:38] *** magla is now known as geli
[00:16:50] *** Quits: j1mu5 (~j1mu5@user/j1mu5) ()
[00:17:11] *** Quits: onichomp666 (~onichomp@177.231.43.15) (Ping timeout: 256 seconds)
[00:18:09] *** Quits: ThreeOfLife (~ThreeOfLi@108.red-83-58-131.dynamicip.rima-tde.net) (Quit: Client closed)
[00:18:16] *** Quits: lotsofpizza (~lotsofpiz@2603:3004:100:600:413a:3baf:3075:ed0a) (Ping timeout: 245 seconds)
[00:19:06] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:20:25] <raxor2k> bjs: if i can avoid having some functions "async def", should i avoid it, or should i just make all functions async ?
[00:20:44] <bjs> raxor2k: I'm not sure why that is directed at me,  or how I'm supposed to answer it
[00:20:55] <bjs> You should make the async functions `async def`s and the not-async ones not async defs?
[00:20:57] <raxor2k> bjs: because you are the asyncio specialist
[00:21:12] *** Joins: ideopathic (~ideopathi@2600:1702:8b0:a500:a1d0:7faa:a53f:44e2)
[00:21:59] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[00:22:05] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[00:22:22] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Quit: The Lounge - https://thelounge.chat)
[00:22:52] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[00:23:04] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[00:23:05] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[00:23:21] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:23:49] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[00:24:20] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:24:39] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:26:14] *** Quits: geli (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[00:26:44] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 265 seconds)
[00:27:23] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:27:45] *** Quits: nat_of_cy (~nat_of_cy@user/nat-of-cy/x-1732112) (Remote host closed the connection)
[00:29:11] *** Joins: sfields_ (~sfields@2605:a601:adea:7a00:c93f:d271:743d:e1bd)
[00:31:03] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:32:00] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[00:32:23] <lionslicer> I'm trying to unite two lists. I thought of using 'for i in range()' to check for differences in each list, and then add each 'original' element to a third list
[00:32:33] <lionslicer> should I use 1 or 2 for loops?
[00:33:09] <grym> lionslicer: what should the result of 'uniting' [1,2,3,5] and [4,6,7] be
[00:33:13] <grym> er
[00:33:21] <grym> lionslicer: what should the result of 'uniting' [1,1,1,2,3,5] and [4,6,7] be
[00:34:25] <lionslicer> [1, 2, 3, 4, 5, 6, 7], if we're using set theory, I guess
[00:34:52] <bjs> lionslicer: maybe you want to use sets not lists then?
[00:34:53] <grym> sorted(set(thefirstlist).union(theotherlist))
[00:34:56] <bjs> or does the order matter?
[00:35:48] <lionslicer> the thing is, I have to do it using a function, so I cannot use sorted()
[00:36:03] <lionslicer> I have to do it manually using only loops and basic stuff
[00:36:08] <grym> lionslicer: if you're doing homework, say so
[00:36:21] *** Joins: Celeo (~Celeo@user/celeo)
[00:36:27] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[00:36:29] <lionslicer> yeah, it is homework. I forgot about the restrictions
[00:37:04] <bjs> lionslicer: well, why does it matter how many for loops you use?
[00:37:12] *** Quits: Celeo (~Celeo@user/celeo) (Client Quit)
[00:37:13] <bjs> or is there some other restriction on how many for loops you're allowed to use :)
[00:37:40] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[00:38:22] <lionslicer> It's just a mtter of logic, I think. I don't want to break my code lol. I'm gonna try an approach I think might work
[00:38:25] <lionslicer> just a sec
[00:38:26] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[00:38:47] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[00:41:14] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[00:42:25] *** Quits: Duckle (~Duckle@user/duckle) (Quit: Poof goes the quack - The Lounge - https://thelounge.chat)
[00:42:41] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 265 seconds)
[00:43:44] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:43:50] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[00:44:17] *** Joins: Duckle (~Duckle@user/duckle)
[00:44:19] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[00:44:46] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[00:46:00] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[00:48:13] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[00:48:18] *** Joins: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c)
[00:49:37] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:ed0a:7b46:226c:b740)
[00:50:01] <CrtxReavr> Sets are un-ordered by definition.
[00:50:22] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Remote host closed the connection)
[00:50:33] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[00:51:22] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[00:52:58] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:54:13] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838)
[00:57:31] *** Joins: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net)
[00:57:35] *** Joins: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b)
[00:58:38] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838) (Ping timeout: 265 seconds)
[00:58:49] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:59:02] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[01:01:28] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:01:57] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[01:02:02] *** Quits: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[01:02:41] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[01:03:36] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838)
[01:03:37] *** Joins: userHeni (~userHeni@25.98.60.94.rev.vodafone.pt)
[01:03:51] <userHeni> .
[01:04:01] *** Quits: userHeni (~userHeni@25.98.60.94.rev.vodafone.pt) (Remote host closed the connection)
[01:04:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:04:05] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[01:04:09] *** comruminoAlt is now known as comrumino
[01:04:10] *** Joins: BSaboia (~bsaboia@177.37.198.59)
[01:04:12] *** Parts: Reffter (~Reffter@2001:818:dea5:2b00:ed0a:7b46:226c:b740) ()
[01:04:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838) (Client Quit)
[01:04:24] <phantomotap> /
[01:04:45] *** Joins: Pickchea (~private@user/pickchea)
[01:04:55] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[01:05:39] *** Quits: rolo (~rolo@2a02:8108:8d80:7aa4:3fc3:db4d:f740:3834) (Quit: WeeChat 3.3)
[01:05:58] *** Joins: fikran (~fikran@user/fikran)
[01:07:02] *** Joins: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net)
[01:07:44] *** Joins: Algernon6915 (~Algernon6@88.124.69.179)
[01:08:28] *** Joins: holgersson (~quassel@user/holgersson)
[01:09:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:09:18] *** Quits: Algernon6915 (~Algernon6@88.124.69.179) (Client Quit)
[01:09:38] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[01:10:35] *** Joins: userHeni (~userHeni@25.98.60.94.rev.vodafone.pt)
[01:10:48] <userHeni> .
[01:10:52] *** Quits: userHeni (~userHeni@25.98.60.94.rev.vodafone.pt) (Remote host closed the connection)
[01:11:44] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:1802:f496:bffe:dc54)
[01:11:46] *** Joins: Warkruid (~MarderIII@2001:985:e889:1:1802:f496:bffe:dc54)
[01:11:50] <lionslicer> I think I'll unite two lists and then subtract the intersection between the lists
[01:11:59] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Client Quit)
[01:12:23] *** Joins: stwange (~j@apn-95-40-232-170.dynamic.gprs.plus.pl)
[01:12:38] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[01:14:38] *** Joins: greedom (~greedom@p200300de67375500888e7d1fc2c7a325.dip0.t-ipconnect.de)
[01:15:22] *** Joins: cyphase (~cyphase@user/cyphase)
[01:15:33] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[01:15:58] *** Joins: velix (~velix@user/velix)
[01:16:23] <velix> Can I make "request" talk to FastCGI?
[01:17:12] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[01:17:13] <yitz> Yes. You send a request to a URL that is services via FastCGI
[01:17:25] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[01:18:25] <velix> yitz: Actually it doesn't listen to normal HTML responses. I need a FastCGI client or reverse-proxy in between.
[01:18:37] <velix> yitz: Or do I need to build my own FastCGI client with request?
[01:18:53] <velix> for example https://github.com/wuyunfeng/Python-FastCGI-Client
[01:18:54] *** Joins: jazzy2 (~jaziz@user/jaziz)
[01:19:11] *** Joins: ItsLandon (~quassel@2601:603:1400:c770::521)
[01:19:24] <yitz> FastCGI is typically a server-side implementation
[01:19:35] <velix> yep.
[01:19:52] <yitz> From a client side, you just talk to the server and don't care how it is implemented
[01:20:25] <yitz> If you are writing server side stuff and need to talk the FastCGI protocol, you need the FastCGI protocol. requests is an HTTP protocol, not a CGI protocol.
[01:20:42] <velix> But the FastCGI client doesn't answer to normal URL requests from Python.
[01:20:42] *** Parts: ItsLandon (~quassel@2601:603:1400:c770::521) ()
[01:20:49] <velix> But the FastCGI server* doesn't answer to normal URL requests from Python.
[01:21:58] <yitz> Client talks to web server over HTTP. Web server talks to CGI programs over FastCGI.
[01:22:17] <yitz> Are you trying to talk to the web server? Or to CGI programs?
[01:22:32] *** Quits: mumixam (~m@user/mumixam) (Ping timeout: 240 seconds)
[01:22:41] <velix> I'm running a FastCGI server and I want to talk with it.
[01:22:58] <velix> Without the need to nginx or apache2 in between
[01:23:57] <yitz> What protocols does the server support on the non-CGI side?
[01:24:13] *** Joins: Auron (~Auron956@user/auron)
[01:24:25] <velix> yitz: It only talks in FastCGI protocol
[01:24:37] <yitz> Then you need to talk FastCGI and not HTTP (requests)
[01:24:44] *** Quits: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b) (Ping timeout: 265 seconds)
[01:25:17] <velix> That's why i asked if I can make "requests" talk in FastCGI protocol :D
[01:25:37] <yitz> No. requests is HTTP.
[01:25:58] <velix> Okay. I need to add some stuff then. Thanks.
[01:25:58] <CrtxReavr> http(s)
[01:26:02] *** Quits: raxor2k (~raxor2k@78.158.245.248) (Remote host closed the connection)
[01:26:05] <yitz> (And HTTPS and possibly others)
[01:26:13] <CrtxReavr> gopher?
[01:26:19] <yitz> > Requests is an elegant and simple HTTP library for Python, built for human beings.
[01:26:53] <CrtxReavr> Requests is very awesome - their quickstart guide is some of the best documentation I've ever read.
[01:26:54] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:27:18] <yitz> I'm not sure how the SSL support is plugged in and how flexible that is for other stuff. But it's built for HTTP style stuff.
[01:27:24] <velix> That's why I'm sad that it doesn't support FastCGI. It's simple to use and quick to get into.
[01:27:35] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:27:42] <velix> I could just keep  the existing code and extend it. Now it's getting messy :D
[01:27:46] <CrtxReavr> o_O
[01:28:01] <CrtxReavr> Okay. . .  but woudln't FastCGI be something on the backend of the server?
[01:28:21] <velix> CrtxReavr: Yeah, actually it's another backend reading from this backend ;)
[01:28:27] <CrtxReavr> How's its usefulness get passed along to the user?
[01:28:39] <velix> The backend provides raster images, which the other backend processes and THEN give to nginx.
[01:28:51] <velix> Right now, it's backend -> nginx -> backend -> nginx -> frontend
[01:29:04] <CrtxReavr> https://flask.palletsprojects.com/en/2.0.x/deploying/fastcgi/
[01:29:05] <velix> What I want: backend -> backend -> nginx -> frontend
[01:29:16] <velix> CrtxReavr: Yeah, there are many FastCGI clients in Python.
[01:29:44] *** Joins: Atque (~Atque@user/atque)
[01:29:50] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:1802:f496:bffe:dc54) (Quit: Leaving)
[01:30:05] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[01:30:38] *** Quits: cr0n0s (~quassel@181.66.138.161) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:31:18] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[01:32:37] *** Quits: MaximB (~MaximB@87.68.165.78) (Quit: Client closed)
[01:33:32] *** Joins: vit (~vit@chello085216193138.chello.sk)
[01:33:36] *** Joins: mumixam (~m@user/mumixam)
[01:33:44] *** Joins: ano (~ano@user/ano)
[01:33:48] *** Joins: dohtem (uid524096@user/dohtem)
[01:33:55] *** vit is now known as Guest6777
[01:34:12] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:35:21] *** Joins: nomic (~nomic@185.217.117.132)
[01:36:55] *** Joins: millido (~millido@84.210.150.128)
[01:37:32] *** Quits: Guest6777 (~vit@chello085216193138.chello.sk) (Client Quit)
[01:37:43] *** Quits: doc (~doc@user/doc) (Quit: Things to do)
[01:37:51] *** Joins: vit (~vit@chello085216193138.chello.sk)
[01:38:15] *** vit is now known as Guest8270
[01:38:32] <boris[m]> Hello ! can someone explain flask usgi and asgi ? As far as I know flask 2.0 now supports async. However usgi is synchronous. Does that mean that requests are still being processed synchronously if usgi is used ?
[01:39:30] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:42:45] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:43:30] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[01:43:35] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[01:45:09] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:45:30] *** Joins: bindu (~bindu@user/bindu)
[01:47:54] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:50:03] *** Parts: NyB (~archon@2a02:169:1d9::1:0:0) (WeeChat 3.0)
[01:51:05] *** Joins: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b)
[01:51:07] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:52:24] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:53:01] *** Joins: RNeese (~rneese@2600:6c5c:6a00:c4e3:a49c:a841:f255:cc99)
[01:53:09] <RNeese> hey guys
[01:53:28] <RNeese> I have lost the name of the python app I am looking for
[01:53:47] <RNeese> its a web admin portal like webmin but python based
[01:55:13] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Ping timeout: 256 seconds)
[01:55:30] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:57:06] *** Quits: Warkruid (~MarderIII@2001:985:e889:1:1802:f496:bffe:dc54) (Quit: Leaving)
[01:57:22] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[01:57:44] *** Joins: doc (~doc@user/doc)
[02:03:05] <RNeese> anyone know the python version of webmin
[02:03:14] <RNeese> I can not recall the name
[02:03:48] <sazawal> bjs, I think I have successfully wrote an example of what I wanted to achieve. Would you take a look at it, because I am not sure if I made a mistake, although it works fine https://bpa.st/7FCQ
[02:04:43] *** Joins: AnthonyLN (~AnthonyLN@131-150-140-026.res.spectrum.com)
[02:06:32] *** Quits: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[02:08:01] *** Joins: sedeki (~textual@user/sedeki)
[02:08:29] *** Quits: sedeki (~textual@user/sedeki) (Client Quit)
[02:08:32] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:08:44] <bjs> sazawal: what are you concerned about with this code?
[02:08:54] <bjs> (/what part do you want me to look at?)
[02:09:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:11:05] *** Quits: RasnCain (~rasncain@68.12.15.83) (Ping timeout: 256 seconds)
[02:11:08] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[02:12:00] *** Quits: Inline (~Inline@aftr-37-201-240-2.unity-media.net) (Remote host closed the connection)
[02:12:47] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[02:12:47] <sazawal> bjs, What I wanted is to run a function in another process `process_function` which is more cpu intensive, and another function `thread_function` which is lesser cpu intensive in another thread. And I wanted to establish a communication between the two. Anyway, as it works now I guess I made it right.
[02:13:21] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[02:13:48] <bjs> sazawal: sure, the important thing is that in the async functions you never block.  I'm not sure why you have block=False in process_function though?  just for fun? :)
[02:14:04] *** Joins: ham5urg_ (~ham5urg@2a04:4540:6803:ed00:8f4f:4458:2e43:1fe1)
[02:14:36] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:14:44] <sazawal> bjs, Another thing is in line 27. I wanted a way to stop the running loop in that function running in another process
[02:15:09] <bjs> sazawal: what do you mean "the running loop"
[02:15:13] <bjs> that function is in another process?
[02:15:22] <sazawal> Yes about that block=False because I don't want the loop to wait for the value
[02:15:23] *** Joins: RasnCain_ (~rasncain@68.12.15.83)
[02:15:46] <bjs> Sure
[02:15:59] <sazawal> bjs, Yes I called `process_function` with run_in_executor in ProcessPoolExecutor
[02:16:17] *** Joins: onichomp (~onichomp@2806:264:4404:80b7:69ec:6c4a:3e6b:724b)
[02:16:50] *** Joins: junktext__ (~junktext@gateway/vpn/pia/junktext)
[02:17:24] <AnthonyLN> I am looking for some help porting my code from Gtk3 to Gtk4 specifically the events_pending to context_pending anyone got any experience with this?
[02:17:32] <sazawal> But there must be a better way to do it. You see the loop in process_function waits for period=1 second, and so what I send in qin queue is checked only after that time. I know that it works but there must be a better way for it.
[02:18:57] *** Joins: interweb (~interweb@user/interweb)
[02:19:05] <bjs> sazawal: it's a very artificial example,  you want to check every second if there's something to read and if not to do something else?
[02:19:42] *** Parts: velix (~velix@user/velix) (Leaving)
[02:20:32] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[02:20:44] <sazawal> bjs, Sure this is what I want. But if you look at the architecture, I would want the things running in another process to get data immediately that is sent from the main process (async process in this example)
[02:21:38] <bjs> sazawal: then why don't you want to block?
[02:21:46] <sazawal> Maybe I should make a class containint `process_function` and the attributes of this class must be updated as soon as the data arrives
[02:21:49] <bjs> in the process_function ?
[02:22:43] *** Parts: nickodd (~nickodd@user/nickodd) ()
[02:23:42] *** Quits: junktext__ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 265 seconds)
[02:23:59] <bjs> sazawal: I still don't understand the block=False thing on line 27
[02:24:32] <sazawal> Hmm let me be more clear. The part within `except` is what I want to be there in process_function. In parallel the variables in process_function like `period` must be subjected to change when async process sends that data. All this input data to the process will arrive via qin
[02:25:02] <bjs> sazawal: so you want the process_function to poll every second to see if there's data, and if there's not to do something?
[02:25:32] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:25:39] <bjs> I don't really understand the point of the count thing
[02:26:16] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:26:31] <sazawal> Count thing is just an example. There will be other things in process_function for my particular case, like capturing screenshots at regular intervals
[02:26:54] <bjs> sazawal: but what does this counting thing have to do with the input queue?
[02:26:55] <sazawal> Now I don't want the capturing to wait for the "stop" command from async process
[02:27:34] *** Quits: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b) (Ping timeout: 265 seconds)
[02:27:34] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[02:27:41] <sazawal> The capturing must go on, and when I send "stop", the capturing must stop
[02:28:05] *** lukedashjr is now known as luke-jr
[02:28:12] <Pi-sistance> hi
[02:28:14] <bjs> sazawal: is this the only kind of communication? to say "please stop" ?
[02:28:32] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[02:28:39] <bjs> because you could just kill the process (or send signals to it, or whatever)
[02:29:00] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:29:04] <Pi-sistance> pop-quiz, what is printed with this code? List1=[2,3,4,7]
[02:29:04] <Pi-sistance> for i in List1:
[02:29:04] <Pi-sistance>     List1[i]=1
[02:29:04] <Pi-sistance> print (List1)
[02:29:08] <sazawal> bjs, For now yes. Later I would want to change the variable `period` for example, or change any other parameter used in process_function
[02:29:10] <bjs> sazawal: otherwise you can get(timeout=period) and if you've received no message in that time, you do the screenshot
[02:29:22] *** Quits: Enitin (~Enitin@82.102.22.85) (Read error: Connection reset by peer)
[02:29:29] <sveinse> Pi-sistance: please don't paste in the channel
[02:29:35] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:29:36] <bjs> Pi-sistance: what kind of pop quiz is that?  an IndexError I assume because List1[7] = ... will fail
[02:29:37] <sazawal> bjs, Is killing the process recommended instead of ending the loop and having a clean stop?
[02:30:06] <Pi-sistance> nope it suceeds, I found it interesting
[02:30:08] <bjs> sazawal: remember that "killing the process" means sending a signal to the process,  and processes are allowed to handle the signal and do whatever
[02:30:11] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[02:30:47] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:30:59] <bjs> Pi-sistance: oh, because List1[3] makes List[4] 1 not 7
[02:31:02] *** Quits: p-i- (~Ohmu@223.206.149.59) (Remote host closed the connection)
[02:31:12] <sazawal> bjs, The screenshots must always go on irrespective of async process sending any data. Once async process sends a data say, to modify period or to stop, this must be applied to the next iteration of the loop in capturing
[02:31:19] *** Joins: pycurious (~Adium@user/pycurious)
[02:31:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:32:07] <Pi-sistance> bjs: yeah, I seem to not understand indexing logicso am trying to go slowly
[02:32:10] <bjs> Pi-sistance: or rather, if you just follow the loop through line-by-line you can see what happens.  List[2]=1 (now List = [2,3,1,7] ; List[3]=1 (now List = [2,3,1,1]) and now all the indexes are in-range
[02:32:40] <Pi-sistance> I thought all the elements would be set to 1 heh
[02:32:59] <bjs> Pi-sistance: remember that `for i in some_list` loops over the *elements* of the list not the indices
[02:33:07] <sazawal> bjs, Right so I can just kill the process via a signal. But I anyway have to implement a way to change other parameters of capturing
[02:33:16] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[02:33:28] <Pi-sistance> ok ty
[02:33:32] <sazawal> And that must be done by sending data from async process via qin
[02:33:51] <bjs> sazawal: I've given two possible solutions:  get(timeout=period)  and sending a signal.  Both of these (while different approaches) allow your program to continue to take screenshots or whatever at regular intervals and then not "miss" the command to exit from the other process
[02:34:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:34:40] *** Quits: RasnCain_ (~rasncain@68.12.15.83) (Remote host closed the connection)
[02:35:00] *** Joins: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net)
[02:35:07] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:69ec:6c4a:3e6b:724b) (Read error: Connection reset by peer)
[02:35:07] <sazawal> bjs, Yes get(timeout=period) is definitely a better way. It also lets me get rid of time.sleep
[02:35:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[02:35:35] <bjs> sazawal: it means you're not polling anymore. You're waiting for the message and if it doesn't arrive by the time you want to take the next screenshot then you stop and go ahead and do that
[02:35:40] <bjs> which is a much better way I feel
[02:35:50] <sazawal> Yes
[02:35:50] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:36:45] *** Quits: Guest8270 (~vit@chello085216193138.chello.sk) (Ping timeout: 265 seconds)
[02:37:12] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:37:38] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:50] <sazawal> bjs, Just looking at the possibilities, I hope you don't mind discussing. Suppose there is an async running in another process too. And in this process, there is one async function which waits for the data to arrive and another async function which keeps taking screenshots
[02:38:19] <sazawal> Is such an architecture possible?
[02:38:22] <bjs> sazawal: there is an asymmetry here,  in your example the async one is sending data to a process which may be waiting.  The other way around is more awkward
[02:39:09] <bjs> because waiting on the mp Queue blocks,  and a non-blocking wait just means you have to keep checking if the data is there (polling).
[02:40:16] <sazawal> bjs, Yea so if there is an async event loop in another process too, my async function waiting for the data would have get(block=False)
[02:40:29] <bjs> Fundamentally this architecture works perfectly fine. It's just the libraries we have in our hands (asyncio, multiprocessing etc) don't provide nice handy wrappers to make it work for you nicely
[02:40:49] <sazawal> I see
[02:41:09] <bjs> sazawal: yes that would be polling, it's not very nice to do (since you have to keep coming back and ask "is the data there yet?")
[02:41:35] <sazawal> Right, it doesn't look very nice
[02:42:01] <bjs> (and really that's the event loops job, not yours,  it's just that the libraries don't give you a nice way to tell the event loop "check for data on the mp Queue")
[02:42:03] <sazawal> But I guess this is the only way to handle inter-thread/inter-process communication in async event loop, am I wrong?
[02:42:19] *** Quits: apocalyptech (~apocalypt@wilug/apocalyptech) (Quit: omg reboot)
[02:43:31] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[02:43:58] <sazawal> This reminds me of signal-slot type of communication in Qt event loop. It has a nice way to have a callback once the data is emitted.
[02:44:00] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 265 seconds)
[02:44:20] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[02:44:23] *** Joins: nickodd (~nickodd@user/nickodd)
[02:44:24] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:44:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:44:33] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:45:17] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[02:45:34] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:45:47] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[02:46:03] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:46:11] <bjs> sazawal: well, not really.  There is call_soon_threadsafe on the event loop (so you can register arbitrary callbacks from other threads) and those callbacks can trigger async Events and so there's ways of the thread world to notify a known event loop about something
[02:46:37] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:47:06] <bjs> but it's a lower-level interface than a "queue", so really you'd want the queue implementation to do that
[02:47:45] <sazawal> I see
[02:47:48] *** Joins: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b)
[02:48:23] *** Quits: doc (~doc@user/doc) (Quit: Things to do)
[02:48:51] *** Joins: audiobirb (~audio@user/audio)
[02:49:00] <sazawal> call_soon_threadsafe would only work one way I guess. I don't think I can use it to pass data from another thread to the parent async thread.
[02:49:02] <bjs> sazawal: for example, *if* the queue had an API like `q.get_then(callback=...)`  or something, then this would be easy to do; sadly it does not so probably yes, you'll want to use block=False
[02:49:11] *** Joins: pycurious (~Adium@user/pycurious)
[02:49:12] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:49:42] <sazawal> bjs, Yea
[02:50:30] <sazawal> bjs, What is the status of async development? Is it growing? Do people use it? Are there alternate libraries which do a similar thing like async and are more popular?
[02:50:32] <bjs> sazawal: well I'd expect to find things like call_soon* to be inside the queue implementation, so if the queue isn't doing that for you then you're kind of stuck (unless it exposes some callback or future-based API, which queue does not)
[02:51:27] <sazawal> Yes I get you
[02:51:30] <bjs> sazawal: well it's funny,  what we call "async" today was really big in the early 2000s (see e.g. Java green threads and greenlet and stuff like that)
[02:51:45] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:51:48] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[02:51:51] <bjs> then it became unpopular for a while
[02:52:02] <bjs> and now they're back again with a new coat of paint
[02:52:10] <sazawal> I see
[02:52:20] *** Parts: RNeese (~rneese@2600:6c5c:6a00:c4e3:a49c:a841:f255:cc99) ()
[02:52:35] <sazawal> I find async extremely useful for a number of applications
[02:53:02] <bjs> sazawal: so yeah, they're growing and more and more async libraries showing up and not just in Python.  `trio` and `twisted` are probably the other 2 big async frameworks out there
[02:53:56] <bjs> a lot of the modern "async" paint can be traced back to twisted in some way or another
[02:53:57] <sazawal> Oh twisted I have used once, but only for TLS communication
[02:54:12] *** Quits: cosimone (~user@93-44-184-115.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:54:13] *** Joins: nyah (~nyah@94.6.71.219)
[02:54:16] <bjs> it's very old but also still at the frontier
[02:54:16] <sazawal> I thought twisted is built over asyncio
[02:54:44] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[02:55:29] <bjs> sazawal: twisted is very very old
[02:55:50] <sazawal> I see
[02:56:36] <bjs> It'll soon be celebrating 20 years
[02:56:41] <sazawal> Wow
[02:57:33] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[02:57:40] *** Joins: doc (~doc@user/doc)
[02:57:58] <bjs> sazawal: as far as twisted is concerned, asyncio is this fancy new thing :)
[02:58:08] <sazawal> There are a number of places I am seeing the async kind event loop. I was once making a game which works on IRC on HexChat. The HexChat module is also based on such async event loop. I don't know what they have used in the background
[02:58:31] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[02:59:06] <bjs> sazawal: event loops have been around since we first started running things on computers,  it's a very simple yet effective idea
[02:59:08] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[03:00:37] <sazawal> Yes elegant as well
[03:01:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:02:03] <sazawal> bjs, Thanks a lot, I must head to bed now. I enjoyed the conversation :)
[03:03:35] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:06:58] *** Quits: sazawal (~sazawal@122.161.84.237) (Quit: Leaving)
[03:07:03] *** Quits: interweb (~interweb@user/interweb) (Quit: Leaving)
[03:08:20] *** Quits: stwange (~j@apn-95-40-232-170.dynamic.gprs.plus.pl) (Quit: This computer has gone to sleep)
[03:08:27] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[03:09:09] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:10:15] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:12:02] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[03:12:15] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:12:29] *** Joins: de-facto (~de-facto@user/de-facto)
[03:12:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:13:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[03:15:19] *** Joins: fikran (~fikran@user/fikran)
[03:16:26] *** Joins: poiqwepoiqwe (uid525840@id-525840.hampstead.irccloud.com)
[03:16:32] *** Joins: noord (~noord@user/noord)
[03:16:44] *** Quits: adium (adium@user/adium) (Quit: Stable ZNC by #bnc4you)
[03:19:37] <grym> sometimes i remember how old the roots of my daily tools are
[03:19:58] <grym> always a bit of an odd feeling
[03:20:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:22:18] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:22:59] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[03:23:12] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[03:24:00] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th)
[03:25:18] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:25:54] *** Quits: sudomann (~sudomann@2601:155:8402:4960:b845:8dae:1b6a:9b76) (Ping timeout: 268 seconds)
[03:27:30] *** Joins: monkey_ (~user@190.104.116.153)
[03:28:09] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 265 seconds)
[03:32:26] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:b0bd:e9f6:4e4f:c71e) (Ping timeout: 245 seconds)
[03:32:41] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 256 seconds)
[03:35:12] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:35:33] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[03:35:36] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:37:00] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:38:12] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[03:39:25] *** Joins: Naan (~naan@user/naan)
[03:40:08] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[03:40:46] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[03:41:11] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[03:41:56] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 268 seconds)
[03:43:15] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[03:44:20] <Pi-sistance> er any idea how to loop a small array to give specific function output depending on the array elements. I  can do it with more advanced array commands, but apparently its easy to do with just loops, my brain fails on the easier method, *sigh
[03:45:15] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[03:45:28] <Repiphany> numpy.piecewise
[03:46:56] <Pi-sistance> haha no, I already did that. There is supposed to be a way with just loops
[03:47:52] <Pi-sistance> well im usiing numpy for the inputs, but no other numpy commands allowed
[03:48:06] *** Quits: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b) (Ping timeout: 268 seconds)
[03:49:18] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[03:50:51] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[03:52:09] <sveinse> How can I stop an asyncio application which is started from asyncio.run()? from another task that is?
[03:52:35] *** Joins: orbatos_ (~orbatos@user/orbatos)
[03:53:48] <sveinse> I tried cancel() the main, but it never changes state from pending to cancelling, so the gather() doesn't return
[03:53:57] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[03:54:28] *** Parts: cow_2001 (~un@user/cow-2001/x-5712099) ()
[03:55:20] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[03:55:21] *** Quits: orbatos (~orbatos@user/orbatos) (Ping timeout: 256 seconds)
[03:55:49] <sveinse> Can it be a windows eventloop thing?
[03:56:18] <sveinse> So perhaps I need to go back to basic: How do I exit an async(io) application?
[03:58:06] *** Quits: BSaboia (~bsaboia@177.37.198.59) (Quit: This computer has gone to sleep)
[03:59:10] <meejah> the thing you pass to run() needs to complete (AFAIK) .. maybe there's a stop-event-loop method too?
[03:59:10] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[03:59:38] *** Quits: doc (~doc@user/doc) (Quit: - mpd+pulse is annoying)
[03:59:56] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[04:00:01] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[04:00:10] *** Joins: BSaboia (~bsaboia@177.37.198.59)
[04:00:22] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:00:35] *** Joins: Soni (~quassel@autistic.space)
[04:00:37] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Changing host)
[04:00:37] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[04:01:02] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:01:18] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[04:01:37] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[04:01:42] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[04:02:02] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[04:02:10] *** Quits: manuels (~manuel@80.211.205.88) (Quit: Ping timeout (120 seconds))
[04:02:43] *** Joins: Wulf (~Wulf@user/wulf)
[04:02:46] <sveinse> meejah: loop.stop() only hangs
[04:03:16] *** Quits: betuxy (~betuxy@p579ad707.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[04:03:36] <meejah> hmm .. i mostly do twisted still so mostly-guessing ;)
[04:03:44] *** Joins: bindu_ (~bindu@user/bindu)
[04:03:49] <sveinse> I assume it waits on Task-1, my main() task, which is the one I am unable to cancel
[04:03:54] <meejah> can you arrange for the thing-to-run() to complete?
[04:04:10] <sveinse> meejah: yeah, me too, lots more experience with twisted
[04:04:12] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[04:04:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[04:04:37] <meejah> can you point to the code?
[04:05:26] *** Joins: manuels (~manuel@80.211.205.88)
[04:05:35] *** bindu_ is now known as bindu
[04:05:43] <sveinse> meejah: not really, it's large and ugly from hunting down a pesky deadlock. But I can probably extract a short demo
[04:07:06] <Pi-sistance> oh the loop would only work if its a list not an array, derp
[04:07:16] <Pi-sistance> sorry, talking to myself
[04:07:23] <Pi-sistance> well, typing.
[04:07:35] <Pi-sistance> (much crazier)
[04:07:43] <sveinse> Pi-sistance: rubber ducking is important
[04:08:04] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:08:14] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[04:08:27] *** Joins: pycurious (~Adium@user/pycurious)
[04:08:56] <Pi-sistance> cool ty, hadnt heard of that before
[04:11:29] *** Joins: jim (~jim@about/linux/staff/jim)
[04:11:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:12:01] <sveinse> meejah: One notable difference between twisted and asyncio, is that tasks (ensureDeferred) are executed early as possible in twisted, while they do not in asyncio. Caught me a bit by surprise
[04:12:13] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[04:12:20] *** Joins: audiobirb (~audio@user/audio)
[04:12:21] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[04:12:54] *** Joins: adium (adium@user/adium)
[04:12:58] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[04:13:42] *** queue[m] is now known as stack[m]
[04:15:36] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:9c7d:c861:5a1f:2808)
[04:17:42] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:20:07] *** Joins: doc (~doc@user/doc)
[04:20:11] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[04:20:48] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[04:24:29] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:25:16] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:26:01] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[04:26:09] *** Joins: sgn_ (~sgn@user/sgn)
[04:26:13] *** Joins: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b)
[04:26:24] *** Quits: greedom (~greedom@p200300de67375500888e7d1fc2c7a325.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:26:49] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:29:43] *** Joins: black_13 (~jjosb@209.221.58.189)
[04:30:29] <black_13> is possible to spawn or start a process specifically npm start or a react website?
[04:30:42] <Jonno_FTW> black_13: yes
[04:30:57] <Jonno_FTW> black_13: https://docs.python.org/3/library/subprocess.html
[04:31:22] *** Parts: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) ()
[04:31:28] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:31:49] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[04:33:28] <black_13> Jonno_FTW, i had come up with something like https://bpa.st/DENQ
[04:34:01] <Jonno_FTW> black_13: don't use star imports, please
[04:34:19] <black_13> sloppy
[04:34:22] <black_13> i know
[04:34:26] <Jonno_FTW> do it right, always
[04:34:29] <black_13> point taken
[04:34:35] <black_13> again point taken
[04:35:20] <Jonno_FTW> anyway that should work
[04:36:03] <black_13> what is the result in "p"
[04:36:05] <Jonno_FTW> I'm not on windows so I can't confirm, you can use p.wait() to wait until it finishes, you haven't provided much other detail about what you want it to do
[04:36:38] *** Parts: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) ()
[04:36:44] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:36:46] <Jonno_FTW> Popen makes a Popen object. It's methods are described in this section of the docs: https://docs.python.org/3/library/subprocess.html#popen-objects
[04:37:16] *** Parts: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) ()
[04:38:03] *** Quits: Macuser (~Macuser@216.30.159.201) (Read error: Connection reset by peer)
[04:38:10] <black_13> i have a simple react based website and i need to start and then demonstrate using python selenium
[04:38:27] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[04:38:28] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Read error: Connection reset by peer)
[04:38:30] <black_13> demonstrate that testing using selenium is feasible
[04:38:49] <Jonno_FTW> why not test with nightwatch?
[04:38:58] <Jonno_FTW> keep it all in js land
[04:39:13] <black_13> because i was told to use selenium
[04:39:51] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:39:52] <black_13> i actually wanted to use all js i am not a js guy but thought keep it all js make it easier
[04:40:01] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[04:40:11] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[04:40:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:40:37] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:40:41] <black_13> i love it when my boss corrects me in meetings to tell me of project direction
[04:40:42] <Jonno_FTW> I've never used selenium, but it should be doable, start your web app, wait until it outputs that it is ready, then proceed with your tests
[04:40:53] <Jonno_FTW> your boss pays your bills
[04:40:56] <black_13> yeah sounds doable
[04:40:59] <Jonno_FTW> and customer is king
[04:41:07] <Jonno_FTW> even though he may not always be right
[04:41:24] *** Joins: grayn1 (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:41:47] <black_13> is there way to know when the process is "settled"
[04:41:47] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:41:47] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:09] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:09] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:12] <Jonno_FTW> you can keep reading output lines from the process, or loop/sleep until a port is being listened on
[04:42:31] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:32] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:53] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:54] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:00] <Jonno_FTW> anyway you should wrap this in a pytest.fixture
[04:43:16] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:43:17] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:17] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (K-Lined)
[04:43:43] *** grayn1 is now known as grayn
[04:43:52] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[04:44:48] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Client Quit)
[04:45:04] <Jonno_FTW> that way you can tear the process down when the testing is done
[04:45:12] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:45:43] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[04:45:48] *** Quits: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[04:45:53] *** Joins: cdown_ (~cdown@89.32.122.5)
[04:46:01] *** Joins: audiobirb (~audio@user/audio)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:18] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[04:47:30] <black_13> that is down the road i think
[04:47:41] <black_13> i just need to demonstrate i have done something
[04:47:48] <Jonno_FTW> it'll be easier now
[04:48:14] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[04:48:27] <black_13> we all have to pray to that pagan god know as agile come 9 o'clock tomorrow
[04:48:40] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[04:48:48] *** cdown_ is now known as cdown
[04:49:11] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[04:49:12] <black_13> and have some errors in my code will give an excuse to improve
[04:49:16] <trashbird> hail waterfall satan the one true god
[04:49:41] <black_13> you know everyone says "waterfall" but i never new what it was
[04:50:05] <black_13> the knew
[04:50:11] <black_13> is new
[04:50:19] *** Quits: flokuehn (~flokuehn@87.123.247.58) (Ping timeout: 256 seconds)
[04:51:33] <Jonno_FTW> black_13: something like this https://bpa.st/I2PQ
[04:52:02] *** Joins: flokuehn (~flokuehn@87.123.247.91)
[04:52:07] <black_13> impoy pytest
[04:52:07] <black_13> ?
[04:52:13] <Jonno_FTW> without the typos ovbs
[04:52:15] <Jonno_FTW> obviously
[04:52:34] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[04:52:54] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Quit: grayn)
[04:53:18] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:55:26] <black_13> is check_port part of pytest
[04:55:41] <black_13> why did you pick that port number
[04:55:59] <Jonno_FTW> black_13: example port for purposes of example
[04:56:03] <Jonno_FTW> you can write check_port
[04:56:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 250 seconds)
[04:56:31] <black_13> i can write check_port
[04:56:33] <Jonno_FTW> you use socket to open a connection on a port, and return True if it connects
[04:56:42] *** Quits: doc (~doc@user/doc) (Remote host closed the connection)
[04:56:47] <Jonno_FTW> false if it timeouts in under 0.5s or connection is rejected
[04:56:55] <Jonno_FTW> should be `while not check_port()`
[04:57:05] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Client Quit)
[04:57:28] <Jonno_FTW> you can find an implementation on SO
[04:57:28] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[04:58:56] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:9c7d:c861:5a1f:2808) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[04:59:00] <Jonno_FTW> black_13: here's the one I used https://bpa.st/7E5A
[04:59:15] *** Joins: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5)
[05:00:26] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:01:02] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5) (Read error: Connection reset by peer)
[05:01:40] *** Joins: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5)
[05:02:00] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5) (Read error: Connection reset by peer)
[05:02:36] *** Joins: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5)
[05:03:01] <black_13> thanks you!
[05:05:02] <black_13> i am however going to research nightwatch
[05:05:19] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[05:05:23] <black_13> and my labor pays my boss's bills
[05:05:30] *** Joins: doc (~doc@user/doc)
[05:05:49] *** Quits: lotsofpizza (~lotsofpiz@2601:1c0:8781:2bf0::e47b) (Ping timeout: 268 seconds)
[05:05:52] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[05:06:03] <black_13> and my boss is employee just like me
[05:06:16] <black_13> is AN
[05:06:30] <Jonno_FTW> this is true
[05:06:32] *** Joins: pycurious (~Adium@user/pycurious)
[05:06:39] <Jonno_FTW> all depends on your office's politics
[05:07:04] <black_13> but for all bosses labor pays the bills
[05:07:12] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[05:08:15] <black_13> however
[05:08:17] <sveinse> isn't that why one has a job? one does a job and both you and the company gets benefits?
[05:08:45] <black_13> we can troll later
[05:08:59] <Jonno_FTW> black_13: this is the tutorial I watch when using nightwatch https://www.youtube.com/playlist?list=PLHe-juD38yt4t38EsggDx2viWXz9Dc0OS
[05:09:22] <black_13> thanks
[05:09:28] <black_13> again
[05:10:35] *** Joins: gopar_ (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[05:10:38] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[05:10:51] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[05:11:07] <sveinse> full disclosure: I'm a manager.. And right now I'm head deep into some py code in the middle of the night trying to iron out a pesky race condition of somewhat urgency.
[05:11:28] *** Quits: gopar_ (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Client Quit)
[05:11:44] *** Joins: jazzy (~jaziz@user/jaziz)
[05:11:46] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[05:11:55] <black_13> sveinse, in the us or over seas?
[05:12:08] <sveinse> black_13: Norway
[05:12:23] <black_13> you are a different animal
[05:12:52] <black_13> if you want to talk in a private channel fine but not here
[05:13:07] <black_13> i wont waste peoples bandwidth
[05:13:18] <sveinse> No need, thanks
[05:13:49] <black_13> i may visit norway my gf is from there
[05:13:57] <black_13> nice country
[05:14:09] <sveinse> nice. There is #python-offtopic btw
[05:14:20] <black_13> are you there?
[05:14:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[05:16:24] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[05:16:25] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[05:16:27] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:16:57] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[05:20:09] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[05:20:53] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[05:22:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[05:24:40] *** Joins: fikran (~fikran@user/fikran)
[05:31:27] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[05:31:57] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:33:15] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[05:33:34] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[05:36:36] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[05:37:55] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[05:38:29] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:38:43] <sveinse> I finally found my culprit... an await queue.join() on a consumer task that had been stopped. When I print the list of tasks, there is no hint of where the task was sleeping. How can I print /where/ each task is currently awaiting?
[05:41:30] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[05:44:12] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 256 seconds)
[05:44:43] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[05:45:51] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[05:46:40] *** Joins: nicolas17 (~nicolas@KDE/nalvarez)
[05:47:16] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[05:47:25] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[05:48:28] <nicolas17> https://flask.palletsprojects.com/en/2.0.x/tutorial/database/#create-the-tables
[05:48:53] <nicolas17> this is initializing a SQLite database by calling the nonstandard executescript() with the contents of a .sql file, which contains all the needed CREATE TABLE statements
[05:49:17] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:49:18] *** Joins: emf (~emf@2620:10d:c090:400::5:99c8)
[05:49:27] <nicolas17> how would I do the same with postgresql? psycopg2 doesn't seem to have something similar to executescript
[05:49:34] <nicolas17> execute() wants a single statement afaict
[05:52:04] <Forty-Bot> nicolas17: psql -f
[05:52:05] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[05:52:25] *** Joins: lethu (~lethu@user/lethu)
[05:52:51] <Forty-Bot> oh, for psycopg2 I do
[05:52:53] <Forty-Bot>     with open("{}/schema.sql".format(os.path.dirname(__file__))) as schema:
[05:52:53] <Forty-Bot>         c.cursor().execute(schema.read())
[05:53:11] <Forty-Bot> obviously you can use whatver file you want
[05:53:32] <nicolas17> oh, execute() does support multiple statements?
[05:53:55] <Forty-Bot> yes, as long as you shove them all into one string
[05:54:21] <Forty-Bot> and of course, you only get the rows from the last select
[05:55:11] <Jonno_FTW> nicolas17: have you considered using sqlalchemy?
[05:56:22] <nicolas17> I have 100 lines of quick and dirty "does this idea even work" code, when I go past that I may switch to an ORM yes :)
[05:58:03] *** Joins: qpdb (~qpdb@user/qpdb)
[05:58:26] <black_13> sveinse, cool!
[05:58:30] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:58:50] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[05:58:56] *** brabrax_ is now known as brabrax
[06:00:04] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 268 seconds)
[06:00:21] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[06:05:07] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 256 seconds)
[06:05:35] *** Joins: vlm (~vlm@user/vlm)
[06:09:25] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:11:21] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Ping timeout: 265 seconds)
[06:14:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[06:15:36] *** Quits: AnthonyLN (~AnthonyLN@131-150-140-026.res.spectrum.com) (Quit: Client closed)
[06:15:40] *** Joins: comlord (~Thunderbi@121.227.116.10)
[06:17:04] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[06:17:30] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[06:17:37] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[06:17:47] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Read error: Connection reset by peer)
[06:17:51] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 245 seconds)
[06:17:53] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[06:17:59] *** Joins: blackleitus (~blackleit@189.195.192.41)
[06:18:02] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 240 seconds)
[06:18:10] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Client Quit)
[06:18:11] <blackleitus> I am trying to build a criminal investigative analysis platform for an event , but I would like to know what stack tech can I use in order to manage a large-scale data information in order to perform an analysis and profiling ?  https://dpaste.org/ceQE
[06:21:30] <Jonno_FTW> blackleitus: depends on how much data you have etc.
[06:23:13] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[06:24:13] <Forty-Bot> what's the way to set an attribute on a PyTypeObject? e.g. like "class Foo: bar = 'qux'"
[06:24:24] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 265 seconds)
[06:24:26] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[06:24:44] *** JoelJoel is now known as Joel
[06:24:54] <Jonno_FTW> blackleitus: I'd say you want a full fledged backend with something like pyramid or django, a graphql database, a relational database, a task management system like celery to perform ""long"" running analyses, frontend in vue or react. You can deploy it serverless or on an EC2 or instance or something, that's up to you. This sounds like a very large project
[06:24:59] <KirkMcDonald> Forty-Bot: tp_members
[06:25:08] <Jonno_FTW> maybe not very large, just large
[06:25:17] <Forty-Bot> doesn't that set the members for objects created with the type?
[06:25:23] <Forty-Bot> I want to set a member on the type itselkf
[06:25:45] <KirkMcDonald> Forty-Bot: No, it is elements that will be added to the type's attribute dict.
[06:25:57] <KirkMcDonald> Oh, wait no.
[06:26:03] <Forty-Bot> right, but you can't read them until you create an object
[06:26:36] <KirkMcDonald> I am misremembering how that works. You're right, it is for instances, it adds *descriptors*.
[06:27:09] <KirkMcDonald> What you can do is mutate the tp_dict after the type has been readied.
[06:28:08] <Forty-Bot> hm
[06:28:20] *** Quits: comlord (~Thunderbi@121.227.116.10) (Quit: comlord)
[06:28:22] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[06:28:38] *** Joins: comlord (~Thunderbi@121.227.116.10)
[06:29:27] <KirkMcDonald> Oh, right, but you can't mutate it *directly*.
[06:29:31] <Forty-Bot> of course, the documentation has "It is not safe to use PyDict_SetItem() on or otherwise modify tp_dict with the dictionary C-API."
[06:29:54] <Forty-Bot> so maybe I should set tp_dict before callinh PyType_Ready?
[06:30:01] <KirkMcDonald> Then I think you can just PyObject_SetAttr on the PyTypeObject.
[06:30:28] <KirkMcDonald> Or PyObject_SetAttrString or whatever.
[06:30:44] <Forty-Bot> is it possible to make it read-only?
[06:30:46] <nicolas17> that would be like calling Foo.bar = 'qux' outside the class?
[06:30:54] <KirkMcDonald> nicolas17: Exactly like, yes.
[06:31:03] *** Quits: zaz_ (~zaz@poneybl.eu) (Quit: bye)
[06:31:03] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[06:31:29] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:37:03] *** Joins: sudomann (~sudomann@73.173.238.202)
[06:40:18] *** Quits: comlord (~Thunderbi@121.227.116.10) (Ping timeout: 256 seconds)
[06:41:21] *** Quits: BSaboia (~bsaboia@177.37.198.59) (Quit: This computer has gone to sleep)
[06:41:48] *** Quits: sudomann (~sudomann@73.173.238.202) (Ping timeout: 265 seconds)
[06:43:04] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[06:43:05] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Ping timeout: 256 seconds)
[06:43:18] *** Joins: comlord (~Thunderbi@121.227.116.10)
[06:43:49] <black_13> Jonno_FTW, you would happen to know anything about using BERT? or GPT2
[06:44:25] <Jonno_FTW> black_13: I know a little bit, why?
[06:44:48] <black_13> I am a German student
[06:44:59] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[06:45:01] <Jonno_FTW> I am an Austrlian professional.
[06:45:05] <Jonno_FTW> Australian*
[06:45:27] <black_13> when i drank i use to hit the oilcan
[06:45:32] <black_13> long time back
[06:45:49] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:441d:cdb1:6bdf:37c6) (Quit: Leaving)
[06:45:52] <black_13> i would like to use german gpt2
[06:46:13] <black_13> or use it in a chat bot
[06:46:15] <Jonno_FTW> to generate text?
[06:46:24] <Jonno_FTW> there's plenty of online tutorials
[06:46:46] <black_13> i looked about a year ago
[06:46:58] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[06:47:21] *** Joins: sgn (~sgn@user/sgn)
[06:48:33] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:39] <black_13> it never hurts to ask
[06:48:58] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:49:08] <Jonno_FTW> I would suggest just getting a minimal setup going and playing around with it
[06:49:23] <black_13> they have the online demos
[06:49:32] <Jonno_FTW> you need to get your own code running
[06:49:40] <Jonno_FTW> or getting it running on your machine
[06:50:00] <black_13> do you need a really good gpu
[06:50:14] <black_13> or will it run on sufficiently good laptop
[06:50:30] <Jonno_FTW> you can run it on a cpu
[06:50:55] <Jonno_FTW> GPUs are only really critically important if you want to train the models
[06:52:55] *** Quits: comlord (~Thunderbi@121.227.116.10) (Ping timeout: 265 seconds)
[06:54:37] <black_13> ok
[06:54:37] *** Quits: janemba (~janemba@185.107.80.152) (Read error: Connection reset by peer)
[06:55:17] *** Joins: Vonter (~Vonter@user/vonter)
[06:56:37] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:57:38] <Forty-Bot> KirkMcDonald: doesn't work :l
[06:57:39] <Forty-Bot> "can't set attributes of built-in/extension type 'values.IntegralValue'"
[06:58:23] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[06:59:27] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::7620)
[07:00:08] <KirkMcDonald> Forty-Bot: Ah, you need to specify a flag for that.
[07:02:12] <KirkMcDonald> Or use PyType_FromSpec rather than initializing a PyTypeObject directly.
[07:02:56] <KirkMcDonald> It has been a while since I wrote a C extension, geez.
[07:03:32] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[07:04:35] *** byzandula is now known as byzafk
[07:04:57] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:05:37] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[07:06:39] <Forty-Bot> ok, looks like setting up tp_dict works
[07:06:54] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[07:07:18] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[07:07:35] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[07:07:54] *** Joins: sgn (~sgn@user/sgn)
[07:08:23] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 265 seconds)
[07:09:50] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[07:10:41] *** Joins: janemba (~janemba@94.204.254.193)
[07:11:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:12:45] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[07:16:03] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[07:16:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:17:26] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:17:45] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[07:17:58] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[07:18:55] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::7620) (Ping timeout: 250 seconds)
[07:19:27] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:19:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[07:20:02] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[07:20:57] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:21:14] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[07:22:32] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:23:47] *** Joins: mat001_ (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[07:26:12] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:27:24] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:27:30] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:29:13] *** Quits: nicolas17 (~nicolas@KDE/nalvarez) (Quit: Konversation terminated!)
[07:32:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[07:32:50] *** Joins: kdc (~kdc@196.211.197.159)
[07:34:01] *** Joins: fikran (~fikran@user/fikran)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:42:12] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[07:44:52] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[07:44:57] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[07:45:12] *** Joins: ckdCreations (~ckdCreati@147.55.130.34)
[07:45:12] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[07:45:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:46:19] *** Quits: mat001_ (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:48:59] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Ping timeout: 265 seconds)
[07:50:31] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[07:52:09] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[07:52:56] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[07:55:04] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:55:46] *** Quits: sreve (~quassel@p54a71042.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:56:23] *** Joins: sreve (~quassel@p549d7168.dip0.t-ipconnect.de)
[07:56:40] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:56:56] *** Joins: pycurious (~Adium@user/pycurious)
[07:57:15] *** Quits: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Quit: okbye)
[07:57:22] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Ping timeout: 256 seconds)
[08:03:04] *** Joins: dead1 (~dead1@user/dead1)
[08:03:53] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-0c57-8e43-cde0-fc57.res6.spectrum.com) (Read error: Connection reset by peer)
[08:03:58] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[08:07:08] *** Joins: ham5urg__ (~ham5urg@2a04:4540:6807:5d00:ade:2914:ef5e:152d)
[08:07:16] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:08:48] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 265 seconds)
[08:09:46] *** Quits: ham5urg_ (~ham5urg@2a04:4540:6803:ed00:8f4f:4458:2e43:1fe1) (Ping timeout: 265 seconds)
[08:10:27] *** Quits: dead1 (~dead1@user/dead1) (Quit: dead1)
[08:13:26] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:13:38] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[08:16:08] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:17:22] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[08:19:25] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[08:20:33] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[08:21:54] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[08:22:59] *** Quits: peac (sid344662@id-344662.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[08:24:23] *** Joins: peac (sid344662@id-344662.hampstead.irccloud.com)
[08:25:24] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[08:27:01] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:27:36] *** Joins: grayn (~Thunderbi@130.95.254.127)
[08:28:29] *** Joins: bandit_za (~bandit@102-65-138-35.dsl.web.africa)
[08:28:45] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[08:29:22] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[08:29:34] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 260 seconds)
[08:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[08:30:38] *** Joins: sunarch (uid526836@user/sunarch)
[08:31:09] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:19] *** Joins: grayn1 (Thunderbir@gateway/vpn/protonvpn/grayn)
[08:31:36] *** Quits: grayn (~Thunderbi@130.95.254.127) (Ping timeout: 245 seconds)
[08:31:37] *** grayn1 is now known as grayn
[08:32:00] *** Quits: blackleitus (~blackleit@189.195.192.41) (Ping timeout: 265 seconds)
[08:32:59] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:33:35] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[08:33:48] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[08:34:10] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:35:59] *** Joins: sudomann (~sudomann@2601:543:100:4fc8:8838:fd4e:364:585d)
[08:36:29] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[08:38:41] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[08:41:58] *** Joins: parv (~quass@user/parv)
[08:44:22] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:44:22] *** internalsplit_of is now known as givemeyourpies
[08:44:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[08:44:44] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:47:25] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[08:47:31] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Quit: grayn)
[08:51:46] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[09:00:13] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[09:04:45] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[09:07:15] <willow> if anyone is up and is willing, i would appreciate any feedback on a little script i wrote to list vim syntax highlight styles:  https://bpa.st/CLGQ
[09:08:39] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:08:43] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[09:09:44] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:10:03] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[09:10:26] <willow> the 'rtp' stands for vim's 'realtimepath' which is a list of all available paths that might contain syntax files
[09:11:28] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (Quit: Konversation terminated!)
[09:12:52] <willow> one thing i'm curious about is whether the multiple levels of nested statements can be reduced without decreasing legibility
[09:13:07] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:13:52] <willow> for d in rtp: if os.path.isdir(d): with os.scandir(d) as it: for entry in it: if entry.is_dir .....      a lot of nesting
[09:20:49] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800018c2bbe0a122bce.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[09:23:41] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[09:24:07] *** Joins: sgn (~sgn@user/sgn)
[09:24:48] *** Joins: LBD (LBD@gateway/vpn/protonvpn/lbd)
[09:26:24] *** Joins: manti7 (~manti7@176.10.104.94)
[09:29:08] *** Atque is now known as hammond
[09:29:17] *** hammond is now known as Atque
[09:31:23] *** Joins: Guest8270 (~vit@chello085216193138.chello.sk)
[09:32:02] *** Quits: capn (~capn@user/capn) (*.net *.split)
[09:32:02] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[09:32:02] *** Quits: MJ94 (mj94@user/mj94) (*.net *.split)
[09:32:02] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (*.net *.split)
[09:32:02] *** Quits: redrum88 (redrum88@user/redrum88) (*.net *.split)
[09:32:02] *** Quits: jug (~jug@user/jug) (*.net *.split)
[09:32:02] *** Quits: enrh (~enrh@user/enrh) (*.net *.split)
[09:32:02] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (*.net *.split)
[09:32:02] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[09:32:02] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:32:02] *** Quits: Raichvent (~Raichvent@193.123.33.210) (*.net *.split)
[09:32:02] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[09:32:02] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[09:32:02] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (*.net *.split)
[09:32:02] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (*.net *.split)
[09:32:02] *** Quits: Liexei (~Liexei@user/liexei) (*.net *.split)
[09:32:02] *** Quits: Scarecr0w (~Scarecr0w@user/scarecr0w) (*.net *.split)
[09:32:02] *** Quits: zlg (~zlg@user/zlg) (*.net *.split)
[09:32:02] *** Quits: spiderman (~spiderman@user/spiderman) (*.net *.split)
[09:32:02] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[09:32:02] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[09:32:02] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[09:32:02] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[09:32:02] *** Quits: royaljelly (~royaljell@user/royaljelly) (*.net *.split)
[09:32:02] *** Quits: vishwin (~brioux@pool-108-36-200-79.phlapa.fios.verizon.net) (*.net *.split)
[09:32:02] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[09:32:02] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[09:32:02] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (*.net *.split)
[09:32:02] *** Quits: aileran (~ubuntu@ec2-18-219-39-125.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:32:02] *** Quits: wereii (~wereii@2a03:3b40:fe:4f::1) (*.net *.split)
[09:32:02] *** Quits: agireud (~agireud@2605:a601:ab06:c700:211:32ff:fe32:e15f) (*.net *.split)
[09:32:02] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[09:32:02] *** Quits: phantomcircuit (~phantomci@2604:a880:1:20::f2:c001) (*.net *.split)
[09:32:02] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (*.net *.split)
[09:32:02] *** Quits: kindablue (znc@irc.tpurist.com) (*.net *.split)
[09:32:02] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (*.net *.split)
[09:32:02] *** Quits: jasiek (~jps@kuweta.sanepid.org) (*.net *.split)
[09:32:02] *** Quits: habnabit (habnabit@python/site-packages/habnabit) (*.net *.split)
[09:32:02] *** Quits: zware (~zach@python/psf/zware) (*.net *.split)
[09:32:02] *** Quits: starz (starz@2001:41d0:8:4bd3::1) (*.net *.split)
[09:32:02] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[09:32:02] *** Quits: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8) (*.net *.split)
[09:32:02] *** Quits: Alexer (~alexer@alexer.net) (*.net *.split)
[09:32:02] *** Quits: ghostbuster (~admin@user/ghostbuster) (*.net *.split)
[09:32:02] *** Quits: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08) (*.net *.split)
[09:32:02] *** Quits: Thermoriax2 (Thermoriax@user/thermoriax) (*.net *.split)
[09:32:02] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[09:32:02] *** Quits: dreamer (~dreamer@user/dreamer) (*.net *.split)
[09:32:03] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[09:32:03] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (*.net *.split)
[09:32:03] *** Quits: cjac (~cjac@li1196-20.members.linode.com) (*.net *.split)
[09:32:03] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[09:32:03] *** Quits: Lartza (lartza@user/lartza) (*.net *.split)
[09:32:03] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[09:32:03] *** Quits: emptynine (tkk@cybertron.redlight.li) (*.net *.split)
[09:32:03] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[09:32:03] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (*.net *.split)
[09:32:03] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[09:32:03] *** Quits: greyltc (~greyltc@user/greyltc) (*.net *.split)
[09:32:03] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[09:32:03] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[09:32:03] *** Quits: Darkfoe1 (~chuck@drunk.serverfail.party) (*.net *.split)
[09:32:03] *** Quits: paperManu (~paperManu@138.197.128.151) (*.net *.split)
[09:32:03] *** Quits: carlio (~carlio@static.37.64.203.116.clients.your-server.de) (*.net *.split)
[09:32:03] *** Quits: Buliarous (~gypsydang@185.207.166.57) (*.net *.split)
[09:32:03] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[09:32:03] *** Quits: jootoi_ (~jootoi@130.61.158.197) (*.net *.split)
[09:32:03] *** Quits: svet (~ec2-user@ec2-3-144-179-53.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:32:03] *** Quits: DocMors (~DocMors@web.crypticity.net) (*.net *.split)
[09:32:03] *** Quits: Mocramis (~mocramis@dalaran.sceen.net) (*.net *.split)
[09:32:03] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[09:32:03] *** Quits: drincruz (drincruz@2607:5300:203:3f52::19) (*.net *.split)
[09:32:03] *** Quits: tanner (~tanner@tilde.town) (*.net *.split)
[09:32:03] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:32:03] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[09:32:03] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[09:32:03] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[09:32:03] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[09:32:03] *** Quits: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f) (*.net *.split)
[09:32:03] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:32:03] *** Quits: Spiney_ (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[09:32:03] *** Quits: syntaxman (~wade@li227-215.members.linode.com) (*.net *.split)
[09:32:03] *** Quits: Kaya (~KC@user/kaya) (*.net *.split)
[09:32:03] *** Quits: voirnox (~voirnox@xor.moe) (*.net *.split)
[09:32:03] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[09:32:03] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[09:32:03] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:32:10] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[09:32:10] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[09:32:11] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[09:32:12] *** Joins: Buliarous (~gypsydang@185.207.166.57)
[09:32:12] *** Joins: agireud (~agireud@2605:a601:ab06:c700:211:32ff:fe32:e15f)
[09:32:12] *** Quits: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c) (Quit: Leaving)
[09:32:14] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:32:16] *** Joins: meejah (~meejah@rutas.meejah.ca)
[09:32:16] *** Joins: Alexer- (~alexer@85.17.122.98)
[09:32:20] *** Joins: mgubyt (u@mgub.yt)
[09:32:26] *** Joins: Lartza (lartza@user/lartza)
[09:32:26] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[09:32:26] *** Joins: paperManu (~paperManu@138.197.128.151)
[09:32:31] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[09:32:40] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[09:32:41] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[09:32:41] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[09:32:42] *** Joins: aileran (~ubuntu@ec2-18-219-39-125.us-east-2.compute.amazonaws.com)
[09:32:45] *** Joins: zware (~zach@python/psf/zware)
[09:32:48] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[09:32:49] *** Joins: kcrk (~kcrk@user/kcrk)
[09:32:52] *** Joins: Raichvent (~Raichvent@193.123.33.210)
[09:32:53] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[09:33:04] *** Joins: phantomcircuit (~phantomci@192.241.205.97)
[09:33:06] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[09:33:07] *** Joins: MJ94 (mj94@user/mj94)
[09:33:13] *** Joins: jug (~jug@user/jug)
[09:33:26] *** Joins: deepy (deepy@user/deepy)
[09:33:26] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[09:33:31] *** Joins: enrh (~enrh@user/enrh)
[09:33:34] *** Joins: quesker (~idnet@mail.89vx.net)
[09:33:34] *** Joins: jootoi (~jootoi@130.61.158.197)
[09:33:34] *** Joins: voirnox (~voirnox@xor.moe)
[09:33:34] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[09:33:36] *** Joins: habnabit_ (~habnabit@python/site-packages/habnabit)
[09:33:37] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[09:33:37] *** Joins: dxrt (~dxrt@user/dxrt)
[09:33:38] *** Joins: sirn (~sirn@user/sirn)
[09:33:40] *** Joins: kindablue (znc@irc.tpurist.com)
[09:33:42] *** Joins: stranac (~stranac@195.29.239.126)
[09:33:45] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[09:33:50] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[09:33:53] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[09:33:53] *** Joins: capn (~capn@user/capn)
[09:34:08] *** Joins: tanner (~tanner@tilde.town)
[09:34:09] *** Joins: ghostbuster (~admin@user/ghostbuster)
[09:34:11] *** Joins: explodes (~explodes@user/explodes)
[09:34:24] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[09:34:28] *** Joins: Darkfoe1 (~chuck@drunk.serverfail.party)
[09:35:03] *** Quits: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:35:52] *** Joins: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net)
[09:36:19] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:36:24] *** Quits: grawity (grawity@star.nullroute.lt) (*.net *.split)
[09:36:24] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (*.net *.split)
[09:36:24] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[09:36:24] *** Quits: meph (~mepholic@flux.hxx.in) (*.net *.split)
[09:36:24] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[09:36:24] *** Quits: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com) (*.net *.split)
[09:36:24] *** Quits: linuxdaemon_ (linuxdemon@bnc.linuxdemon.xyz) (*.net *.split)
[09:36:24] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[09:36:24] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (*.net *.split)
[09:36:24] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[09:36:24] *** Quits: ngp (~ngp@199.180.249.183) (*.net *.split)
[09:36:24] *** Quits: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[09:36:24] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (*.net *.split)
[09:36:24] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (*.net *.split)
[09:36:24] *** Quits: stack[m] (~queue-@user/queue/x-7267619) (*.net *.split)
[09:36:24] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[09:36:24] *** Quits: alexyov (~alexyov@79.124.0.2) (*.net *.split)
[09:36:24] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[09:36:24] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[09:36:24] *** Quits: Somni (~insomnia@77-88-237-24.gci.net) (*.net *.split)
[09:36:24] *** Quits: meti_ (~meti@user/meti) (*.net *.split)
[09:36:24] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[09:36:24] *** Quits: launchd (launchd@bitbot/launchd) (*.net *.split)
[09:36:24] *** Quits: cyberjunkie_ (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[09:36:24] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (*.net *.split)
[09:36:24] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (*.net *.split)
[09:36:24] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[09:36:25] *** Quits: Swayze (~gryster@user/swayze) (*.net *.split)
[09:36:25] *** Quits: PsyZeus (~TheLight@user/psyzeus) (*.net *.split)
[09:36:25] *** Quits: Juhaz (juhaz@hilla.kapsi.fi) (*.net *.split)
[09:36:25] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[09:36:25] *** Quits: deetwelve (~deetwelve@user/deetwelve) (*.net *.split)
[09:36:25] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[09:36:25] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[09:36:25] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[09:36:25] *** Quits: gnoirzox (~gnoirzox@user/gnoirzox) (*.net *.split)
[09:36:25] *** Quits: vinnix (~vinnix@user/vinnix) (*.net *.split)
[09:36:25] *** Quits: jessicant (~jessica@static.172.234.251.148.clients.your-server.de) (*.net *.split)
[09:36:25] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[09:36:25] *** Quits: nanonyme (nanonyme@kapsi.fi) (*.net *.split)
[09:36:31] *** Joins: Juhaz (juhaz@hilla.kapsi.fi)
[09:36:34] *** Joins: nvz (~user@nvz.farted.online)
[09:36:39] *** Joins: linuxdaemon (linuxdemon@bnc.linuxdemon.xyz)
[09:36:40] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[09:36:41] *** Joins: launchd (launchd@bitbot/launchd)
[09:36:42] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[09:36:43] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[09:36:43] *** Joins: vinnix (~vinnix@user/vinnix)
[09:36:43] *** Joins: remexre (~remexre@user/remexre)
[09:36:45] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[09:36:46] *** Joins: alexyov (~alexyov@79.124.0.2)
[09:36:50] *** Joins: Fossil (~Fossil@95.85.23.165)
[09:36:51] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[09:36:53] *** Joins: grawity (grawity@star.nullroute.lt)
[09:36:58] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[09:36:59] *** Joins: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com)
[09:37:02] *** Joins: monchi (~joints@143.198.92.132)
[09:37:03] *** Joins: meph (~mepholic@flux.hxx.in)
[09:37:03] *** Joins: vbgunz_ (~vbgunz@35.141.71.47)
[09:37:06] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[09:37:07] *** Joins: Liexei (~Liexei@user/liexei)
[09:37:07] *** Joins: nanonyme (nanonyme@kapsi.fi)
[09:37:08] *** Joins: ngp (~ngp@199.180.249.183)
[09:37:10] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[09:37:12] *** Joins: gaken (~gaken@user/galen)
[09:37:12] *** Joins: regulate (~regulate@koduro.com)
[09:37:13] *** Joins: chronon (~chronon@user/chronon)
[09:37:14] *** Joins: meti (~meti@user/meti)
[09:37:18] *** Joins: svet (~ec2-user@ec2-3-144-179-53.us-east-2.compute.amazonaws.com)
[09:37:27] *** Joins: vit (~vit@chello085216193138.chello.sk)
[09:37:33] *** Joins: wereii (~wereii@37.205.14.89)
[09:37:35] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[09:37:36] *** Joins: Nei (~ailin@user/nemui)
[09:37:37] *** Joins: Portugol9 (~Portugol9@user/portugol9)
[09:37:48] *** Joins: auri (~quassel@fsf/member/auri)
[09:37:51] *** vit is now known as Guest6959
[09:38:09] *** Joins: sabet (~sabet@user/sabet)
[09:38:20] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[09:38:22] *** Joins: redrum88 (redrum88@user/redrum88)
[09:38:42] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[09:40:27] *** Quits: carbolymer (~carbolyme@dropacid.net) (Ping timeout: 256 seconds)
[09:40:51] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:40:52] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[09:41:00] *** Joins: mjsir911 (~bnc@user/mjsir911)
[09:41:01] *** Quits: Guest8270 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[09:41:16] *** Joins: stack[m] (~queue-@user/queue/x-7267619)
[09:41:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[09:42:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:43:22] *** Joins: fikran (~fikran@user/fikran)
[09:43:34] <parv> willow, os.path.walk() instead?
[09:43:49] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[09:44:12] <parv> That will collapse to single level of indent
[09:44:53] <parv> ... well besides the directory test
[09:47:21] *** Quits: bim9262 (~bim9262@user/bim9262) (Ping timeout: 250 seconds)
[09:48:06] <willow> parv: i thought scandir() is faster than walk() ?
[09:48:24] <jinsun> walk uses scandir nowadays
[09:48:31] <willow> aha
[09:49:05] <KirkMcDonald> Also, os.walk(), not os.path.walk().
[09:49:26] <parv> willow, I replied to reduce indents only.
[09:49:51] <parv> KirkMcDonald, Right. I forget that; always have to look up.
[09:50:03] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:54:39] <jinsun> you can do it in a long list comprehension with Pathlib, `sdirs = [subdir for d in rtp for subdir in Path(d).glob("*") if subdir.isdir()]`
[09:56:00] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:57:57] *** Quits: Jong (~Jong@2620:10d:c090:400::5:31eb) (Ping timeout: 250 seconds)
[10:00:57] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Remote host closed the connection)
[10:04:30] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14)
[10:06:57] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:07:52] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[10:11:08] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[10:16:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:16:49] *** Quits: mdrake (~mattd@2601:1c0:6c01:b460:1b72:680d:903d:2b7d) (Remote host closed the connection)
[10:18:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:19:08] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:e574:13cf:2f5d:c5fd) (Read error: Connection reset by peer)
[10:20:18] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 268 seconds)
[10:20:43] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[10:24:21] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[10:24:33] *** Joins: jim (~jim@about/linux/staff/jim)
[10:24:40] *** Joins: mickey8 (~user@user/mickey)
[10:26:33] *** Quits: reset (~reset@user/reset) (Ping timeout: 265 seconds)
[10:28:51] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:31:07] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:32:45] *** Joins: grayn (Thunderbir@gateway/vpn/protonvpn/grayn)
[10:35:42] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[10:36:28] *** Joins: cdown_ (~cdown@188.214.11.14)
[10:36:28] *** Joins: jmd (~user@de.cellform.com)
[10:36:47] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:37:27] *** Guest6959 is now known as freeworld
[10:37:38] *** Joins: ustedes (~whaley@2603-6080-a301-33d1-ccb6-bbee-0edf-6bd3.res6.spectrum.com)
[10:39:07] *** Quits: whaley (~whaley@2603-6080-a301-33d1-517f-143f-4117-ec87.res6.spectrum.com) (Ping timeout: 250 seconds)
[10:39:36] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 265 seconds)
[10:39:38] *** cdown_ is now known as cdown
[10:41:31] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:42:26] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 252 seconds)
[10:46:38] *** Joins: chuck_ (~chuck@181.191.143.126)
[10:46:47] *** Joins: reset (~reset@user/reset)
[10:47:05] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:51:09] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[10:54:18] *** Joins: gusto (~Augustus@109.255.100.54)
[10:56:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[10:56:45] *** Quits: resmo (~resmo@2a00:d420:9:8a00:b149:b8f4:9c2a:cebd) (Remote host closed the connection)
[10:57:02] *** Joins: resmo (~resmo@2a00:d420:9:8a00:50df:2e98:105b:c195)
[10:57:30] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:57:37] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:57:44] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:58:39] *** Joins: seednode (~seednode@user/seednode)
[10:58:59] *** Joins: jim (~jim@about/linux/staff/jim)
[11:00:37] *** Joins: rendar (~rendar@user/rendar)
[11:01:12] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:01:57] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[11:01:57] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[11:01:57] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:01:58] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[11:02:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[11:02:08] *** Joins: rany (~rany@user/rany)
[11:02:12] *** Joins: mickey8 (~user@user/mickey)
[11:02:17] *** Joins: spithash (~spithash@user/spithash)
[11:04:00] *** Joins: blackleitus (~blackleit@189.195.192.41)
[11:04:19] *** Joins: carl-- (~carl-@185.103.188.130)
[11:04:37] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:04:38] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd)
[11:04:48] *** Joins: frost (~frost@user/frost)
[11:05:02] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:88ef:62f9:7f7e:fde3)
[11:05:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:06:35] *** Quits: parv (~quass@user/parv) (Ping timeout: 260 seconds)
[11:07:28] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 264 seconds)
[11:07:42] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:08:26] <willow> switching to os.walk.    am getting duplicates when i use this to find directories named 'syntax'    https://bpa.st/LLJQ
[11:09:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[11:09:57] <willow> also, once i find a directory name that matches, is there a way to immediately search files under it without having to create a whole new os.walk iterator?
[11:12:13] <willow> https://bpa.st/6ZLA
[11:13:53] *** Quits: chuck_ (~chuck@181.191.143.126) (Quit: leaving)
[11:15:33] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[11:16:14] *** Joins: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr)
[11:16:17] *** Joins: luigibu (~luigi@80.30.201.209)
[11:16:51] <cluelessperson> willow, depends on what you're trying to do
[11:17:41] <cluelessperson> willow, you might make a recursive function that yields paths
[11:18:00] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[11:18:54] *** Quits: LBD (LBD@gateway/vpn/protonvpn/lbd) (Quit: leaving)
[11:19:09] *** Joins: parv (~quass@user/parv)
[11:19:59] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:22:01] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd) (Ping timeout: 250 seconds)
[11:22:11] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[11:23:37] *** Joins: palasso (~palasso@user/palasso)
[11:23:54] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:24:05] *** Joins: upsala (~zcb@185.213.155.252)
[11:24:57] *** Joins: kosh (~kosh@user/kosh)
[11:26:47] *** Joins: daoudr_ (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[11:26:48] *** Quits: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr) (Quit: Leaving)
[11:31:41] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[11:31:54] *** Joins: p3hz (~p3hz@ip72-209-166-93.ks.ks.cox.net)
[11:33:15] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[11:33:27] *** Joins: han-solo (~hanish@user/han-solo)
[11:34:26] *** Quits: carl-- (~carl-@185.103.188.130) (Quit: Leaving)
[11:34:28] *** Joins: tobybl (~tobybl@213.31.134.21)
[11:35:02] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:35:11] *** Quits: grooverman (~grooverma@177.102.117.95) (Ping timeout: 265 seconds)
[11:35:19] *** Joins: blackleitus_ (uid270824@id-270824.tinside.irccloud.com)
[11:35:53] *** Joins: ptalbert (~ptalbert@109.212.14.37.dynamic.jazztel.es)
[11:36:07] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[11:37:48] <blackleitus_> I am trying to build a criminal investigative analysis platform for an event , but I would like to know what stack tech can I use in order to manage a large-scale data information in order to perform an analysis and profiling ?  https://dpaste.org/ceQE
[11:39:24] *** Joins: martums (~martums@user/martums)
[11:41:27] *** Joins: jay-m126 (~jay-m@129.0.76.220)
[11:41:31] *** Joins: jay-m126_ (~jay-m@129.0.76.220)
[11:42:25] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th) (Remote host closed the connection)
[11:43:01] *** Joins: p-i- (~Ohmu@223.206.149.59)
[11:44:02] *** Joins: grayn1 (Thunderbir@gateway/vpn/protonvpn/grayn)
[11:44:40] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Ping timeout: 264 seconds)
[11:44:41] *** grayn1 is now known as grayn
[11:45:04] <han-solo> is the data going to be visualized on a map or just charts ?
[11:45:54] <han-solo> eh...feels kinda offtopic anyway
[11:45:57] <parv> I am using Python 3.6 (will be updated as Rocky Linux updates it). The only supplied cache management is functols.lru_cache. Should I change use of dict to lrucache as a general method of caching?
[11:47:07] * parv can't type.
[11:47:22] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd)
[11:47:39] <parv> s/functols.lru_cache/functools.lru_cache/ ; s/lrucache/LRU cache/
[11:48:48] *** Joins: greedom (~greedom@p200300de670bd800076ae5df8b2243b0.dip0.t-ipconnect.de)
[11:48:52] *** Quits: martums (~martums@user/martums) (Ping timeout: 264 seconds)
[11:49:52] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:50:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:51:07] *** Joins: Tas-sos (~Tas-sos@ppp005054041212.access.hol.gr)
[11:51:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[11:52:43] *** Joins: fikran (~fikran@user/fikran)
[11:53:34] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[11:54:32] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 240 seconds)
[11:54:47] *** Joins: rvgate (~rvgate@user/rvgate)
[11:54:55] *** Joins: mrwick (~mrwick@user/mrwick)
[11:55:23] <willow> i see what's going on.  rtp contains some paths and their parent paths, so the os.walk iterator searches twice
[11:56:03] *** Joins: martums (~martums@user/martums)
[11:57:45] *** Quits: Myst (~Myst@user/myst) (Quit: Bye!)
[11:59:30] <willow> i need to prune the children paths using either substring or os.path magic
[12:00:13] <Repiphany> You can change where os.walk goes by modifying the lists in place
[12:00:35] <Repiphany> (may or may not be relevant to your problem)
[12:00:43] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[12:00:54] <willow> i'm guessing that substring comparison is faster/more efficient than utilizing os.path to test each directory
[12:01:00] *** Joins: sazawal (~sazawal@122.161.84.237)
[12:02:07] <willow> yes that might be a good case for a list comprehension
[12:02:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:02:33] *** Joins: Myst (~Myst@user/myst)
[12:02:33] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:03:17] *** Joins: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr)
[12:03:37] <willow> it would be efficient provided it processes the (sorted) list in order
[12:04:56] *** Quits: p3hz (~p3hz@ip72-209-166-93.ks.ks.cox.net) (Ping timeout: 252 seconds)
[12:05:57] <willow> otherwise will convert to tuple or other type that is ordered
[12:07:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:08:41] <willow> blackleitus: hire a CTO ;-)
[12:09:20] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[12:09:30] <sazawal> Hi all. I am figuring out a way to wait for multiprocessing.Manager().Queue item asyncronously without blocking the async thread. I found limited answers online and most of them were waiting for the queue item in a function ran with run_in_executor(None,wait_for_q_item), which is essentially waiting in a spawned thread. Some example asked to run the waiting function with create_task and use asyncio.sleep(n) in the loop, in this case asyncio.sleep(0)
[12:09:31] <sazawal> also works good for me. What would be the better way to do it?
[12:11:32] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[12:12:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:12:58] *** Joins: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net)
[12:13:18] *** Quits: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr) (Quit: Leaving)
[12:16:57] *** Joins: chele (~chele@user/chele)
[12:18:19] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[12:18:31] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:18:51] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[12:21:29] *** Joins: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr)
[12:21:40] *** Joins: shad (~shad@user/shad)
[12:24:05] <sudomann> https://bpa.st/M7BQ can anyone figure out why the pakcage raquest to pypi here is failing?
[12:25:38] *** Joins: BSaboia (~bsaboia@177.37.198.59)
[12:26:27] <dav1d> sazawal, I would do it in a separate thread
[12:26:34] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:29:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:30:28] <parv> sudomann, "telnet pypi.org 443" worked here
[12:30:51] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[12:31:25] *** Joins: Swayze (~gryster@user/swayze)
[12:33:32] *** Quits: blackleitus (~blackleit@189.195.192.41) (Ping timeout: 252 seconds)
[12:33:32] *** blackleitus_ is now known as blackleitus
[12:34:03] <parv> sudomann, I take it multiple tries (of "poetry install") resulted in the same error.?
[12:37:15] *** Parts: gyrow (~gyrow@d54c03e98.access.telenet.be) (Someone stepped on the pi)
[12:37:42] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:39:06] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:40:08] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:41:11] *** Quits: jpic (~jpic@82.142.20.182) (Ping timeout: 245 seconds)
[12:43:12] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[12:45:05] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[12:46:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:47:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:48:04] *** Joins: shad (~shad@user/shad)
[12:49:00] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5) (Read error: Connection reset by peer)
[12:49:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:49:37] *** Joins: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5)
[12:50:29] *** Quits: Enitin (~Enitin@82.102.22.86) (Read error: Connection reset by peer)
[12:50:38] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[12:50:49] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:2d9a:7edb:da1b:a5a5) (Read error: Connection reset by peer)
[12:51:50] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:52:04] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Quit: Leaving)
[12:53:30] *** Joins: michaelis (~michaelis@193.183.209.17)
[12:54:04] *** dcaro_away is now known as dcaro
[12:58:55] *** Quits: jay-m126_ (~jay-m@129.0.76.220) (Read error: Connection reset by peer)
[13:00:37] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (Remote host closed the connection)
[13:01:30] *** Joins: MaximB (~MaximB@87.68.165.78)
[13:01:43] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[13:02:44] <MaximB> hello, I have a json file with many subsections, what is a good way with an if loop to go to each section?
[13:03:26] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[13:03:52] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[13:03:59] *** Joins: jay-m126_ (~jay-m@129.0.76.220)
[13:04:40] <MaximB> for example here: https://paste.debian.net/1221195/ I want to go to the CidrIp section
[13:04:49] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:05:34] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[13:07:12] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[13:07:36] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:08:04] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[13:08:32] <parv> Iterate over each dict element of the list to "get()" the value for the key?
[13:09:08] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:09:31] *** Joins: p-i-_ (~Ohmu@223.206.149.59)
[13:09:36] <MaximB> kinda, how it's done? it's been a while since I worked with json files
[13:10:05] <MaximB> import json
[13:10:06] <MaximB> f = open("sg_full_list.json")
[13:10:06] <MaximB> data = json.load(f)
[13:10:07] <MaximB> for i in data["SecurityGroups"]:
[13:10:07] <MaximB>     print(i)
[13:10:14] <Yhg1s> MaximB: don't paste here.
[13:10:23] <MaximB> this will show all items, but I only want specific things
[13:11:07] *** Joins: luigibu (~luigi@80.30.201.209)
[13:11:40] *** Quits: jay-m126_ (~jay-m@129.0.76.220) (Read error: Connection reset by peer)
[13:11:49] *** Quits: jay-m126 (~jay-m@129.0.76.220) (Read error: Connection reset by peer)
[13:11:57] <Yhg1s> MaximB: each item in the SecurityGroups list is a dict, with an 'IpPermissiosEgress' list, each of which items is a dict with a 'Cidrip' key. You have to loop at least twice (once over SecurityGroups and once over IpPermissionsEgress)
[13:12:23] *** Quits: p-i- (~Ohmu@223.206.149.59) (Ping timeout: 256 seconds)
[13:13:13] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:14:57] <Yhg1s> MaximB: you may be looking to use glom? I'm not sure.
[13:15:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:15:42] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[13:15:51] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:16:02] <MaximB> never heard of it I just want a way to loop over CidrIp and check if they equal to 0.0.0.0
[13:16:05] *** Joins: de-facto (~de-facto@user/de-facto)
[13:16:13] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:16:31] <MaximB> via json
[13:16:55] *** Joins: thevishy (~Nishant@2405:201:f005:c007:f92b:9823:fedf:deab)
[13:17:31] <sazawal> dav1d, Why in a separate thread? Also, I don't get what actually `await asyncio.sleep(0)` does. Is it like a context switch?
[13:18:08] <Yhg1s> MaximB: I understand. That way would be 'for loops', and as I said you need at least two, or something like glom, which can do the loops for you.
[13:18:22] *** Quits: greedom (~greedom@p200300de670bd800076ae5df8b2243b0.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:18:33] <dav1d> sazawal, a separate thread is the clean way how you can block on the queue and return items to the async context, asyncion.sleep(0) is busy waiting on the queue with giving the async context a chance to switch to something else
[13:19:01] *** Joins: jay-m126 (~jay-m@154.72.167.166)
[13:19:25] *** Joins: jay-m126_ (~jay-m@154.72.167.166)
[13:20:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:20:23] <Yhg1s> (waiting in a separate thread is a better idea than using asyncio.sleep(0) and a non-blocking get)
[13:20:41] <MaximB> Yhg1s what is the corret syntax for this? this doesn't give the correct output: https://paste.debian.net/1221198/
[13:21:08] *** Joins: szymon (~ugh@37.120.211.213)
[13:21:28] <sazawal> dav1d, That makes sense.
[13:21:46] <Yhg1s> MaximB: you have to index the dicts that are in data['SecurityGroups']. like a['IpPermissionsEgress']
[13:21:54] <sazawal> Yhg1s, This is indeed what I was suggested before, that is .get(block=False)
[13:21:57] <Yhg1s> MaximB: and likewise for CidrIp
[13:22:12] <Yhg1s> sazawal: yes, I'm saying "use a separate thread instead"
[13:22:15] <sazawal> Anyway, thanks
[13:22:22] <sazawal> Yhg1s, Yes got that
[13:22:24] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[13:22:26] <Yhg1s> a thread that gets from the multiprocessing Queue and puts it in an asyncio Queue.
[13:22:31] <dav1d> ^
[13:23:12] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[13:23:18] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[13:23:50] <MaximB> Yhg1s like this? https://paste.debian.net/1221200/   gives an error KeyError: 'CidrIp'
[13:24:02] *** Joins: mcope (~matt@user/mcope)
[13:24:17] <sazawal> Yhg1s, I can also assign the class variable once the multiprocessing queue gets the data in a separate thread. Threads do share variables, so async thread would have access to the assigned variable.
[13:25:07] <Yhg1s> MaximB: The IpPermissions items don't have a CdrIip key, they have an IpRanges key that is a list of dicts.
[13:25:22] *** Quits: grayn (Thunderbir@gateway/vpn/protonvpn/grayn) (Quit: grayn)
[13:25:30] <Yhg1s> sazawal: sure, but then you can't have another asyncio task respond to the data arriving.
[13:26:21] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[13:26:36] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 256 seconds)
[13:26:48] <sazawal> Yhg1s, Yes I can't have a callback if I do this, true. But what I was looking for is to set/update the class variables arriving as data from another process.
[13:27:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:27:45] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:27:59] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[13:28:00] <Yhg1s> sazawal: all things considered, it's a lot safer if you don't try to share data between threads. It's a lot safer to have a thread *just* passing the data from a multiprocessing Queue to an asyncio Queue, and then have an asyncio task do whatever you want with that data.
[13:28:09] *** Quits: daoudr_ (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Quit: Leaving)
[13:28:22] <sazawal> Yhg1s, I see
[13:30:06] <sazawal> Oh but wait, asyncio queues are not thread safe, and not recommended for inter-thread communication. Then I would have to put the data in a threading queue.
[13:31:09] <Yhg1s> sazawal: you put things in an asyncio Queue by calling asyncio.call_soon_threadsafe to put it in the queue.
[13:31:50] *** Quits: resmo (~resmo@2a00:d420:9:8a00:50df:2e98:105b:c195) (Ping timeout: 252 seconds)
[13:31:59] <sazawal> Yhg1s, Hmm right. I am new to asyncio, so these things are not immediately apparent to me :)
[13:32:23] *** Joins: y1n (~y1n@91.141.74.197.wireless.dyn.drei.com)
[13:32:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:32:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:32:58] *** Joins: summersault (~summersau@179.221.251.16)
[13:33:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[13:33:02] *** Joins: akaWolf (~akaWolf@akawolf.org)
[13:33:29] *** Joins: drogas (~drogas@jump2.jet.uk)
[13:33:35] *** Joins: MrPixels (~MrPixels@82-75-30-20.cable.dynamic.v4.ziggo.nl)
[13:33:54] *** Lord_of_Life_ is now known as Lord_of_Life
[13:34:02] *** Quits: Portugol9 (~Portugol9@user/portugol9) (Remote host closed the connection)
[13:34:32] <MrPixels> For editable, local requirements install I tried adding `-e ./relative/path/to/package`; is this correct?
[13:34:43] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:34:46] <MrPixels> that is, adding this to requirements.txt
[13:35:05] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (Remote host closed the connection)
[13:35:05] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (Remote host closed the connection)
[13:35:22] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[13:35:44] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[13:35:44] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[13:36:00] *** Joins: Portugol9 (~Portugol9@user/portugol9)
[13:37:28] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 264 seconds)
[13:37:38] *** Joins: aklsh (~aklsh@122.164.244.188)
[13:39:48] *** Joins: RiFo (~RiFo@user/rifo)
[13:40:28] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 264 seconds)
[13:41:01] *** Joins: xkuru (~xkuru@user/xkuru)
[13:41:19] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[13:44:04] *** Quits: aklsh (~aklsh@122.164.244.188) (Ping timeout: 264 seconds)
[13:44:38] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6ce8)
[13:45:41] *** Quits: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[13:50:21] *** Quits: mankoff (~quassel@c-67-183-220-189.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[13:50:55] *** Quits: gitly (~gitly@85.255.237.194) (Ping timeout: 256 seconds)
[13:51:15] *** Joins: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net)
[13:51:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[13:51:44] *** Joins: jim (~jim@about/linux/staff/jim)
[13:52:47] *** Joins: gitly (~gitly@85.255.237.194)
[13:54:59] *** Joins: mankoff (~quassel@c-67-183-220-189.hsd1.wa.comcast.net)
[13:55:07] <MaximB> Yhg1s I've tried this: https://paste.debian.net/1221209/  but it only outputs the first result many times.
[13:55:54] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[13:56:40] *** Quits: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[13:57:06] <tsujp> Does anyone know how to change the text of a tkinter button from within the button's command function? AFAIk I cannot just pass the reference to the button itself in it's own constructor can I? i.e. `tw_but = tk.Button(frame, text='Start watching...', command=toggle_text)` within the method `toggle_text` I set that tk button i.e. `tw_but` text to
[13:57:06] <tsujp> say `foo`. You could trivially do this by making the `tw_but` global but that sucks no...?
[13:57:43] *** Quits: gitly (~gitly@85.255.237.194) (Ping timeout: 256 seconds)
[13:58:35] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[13:59:30] *** Joins: gitly (~gitly@85.255.232.247)
[13:59:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:01:18] *** Joins: prompt32 (~kapad@user/kapad)
[14:01:53] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[14:01:55] <cluelessperson> tsujp, I would expect the function being called to have args passed to it, describing the event and object.
[14:02:04] *** Joins: fikran (~fikran@user/fikran)
[14:02:17] <parv> How would text toggling function know about the button? ... unless "text" attribute value could be a function
[14:02:52] *** Joins: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net)
[14:02:53] <tsujp> I can't see any? Is there a conclusive way I can check like how I could do `dir(foo)` if I wanted to find out all properties of `foo`?
[14:02:55] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[14:02:56] <cluelessperson> I'd expect def toggle(button): do things to button
[14:03:18] <Yhg1s> MaximB: it shouldn't. Can you show the JSON you're running it on?
[14:03:49] <MaximB> Yhg1s  https://paste.debian.net/1221209/
[14:03:55] <MrPixels> anybody know of a guide to doing hot module reloading in a container? I tried to bind-mount my `src` folder and install my internal requirements using `-e ./path/to/package` in my requirement file
[14:04:08] <cluelessperson> tsujp, you could also use functools.partial
[14:04:10] <Yhg1s> MaximB: no, the JSON.
[14:04:20] <Yhg1s> MaximB: or, the repr() of the data dict.
[14:04:27] <cluelessperson> tsujp, to prefil some args for a function basically.
[14:04:28] <MaximB> but it is a json file
[14:04:30] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14)
[14:04:58] <tsujp> cluelessperson right but I cannot pass in `tw_but` still because it's a self reference, my main gripe is: how do I pass in a reference to the button that is calling this function without having to maintain a global list
[14:05:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:05:11] *** Quits: prompt32 (~kapad@user/kapad) (Client Quit)
[14:05:13] <tsujp> SURELY maintaining a global list is a bad pattern but it looks like it's the only way by design???
[14:05:39] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[14:05:39] <Yhg1s> MaximB: you'll really have to show why you think it's only showing the first result, because I can't tell from the code why it would do that.
[14:05:56] <Repiphany> tsujp: Use a class
[14:06:01] *** Quits: blackleitus (uid270824@id-270824.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:06:06] *** Joins: prompt32 (~kapad@user/kapad)
[14:06:09] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[14:06:18] <tsujp> So then have a class property which is a list and reference it from that list Repiphany? That still sucks
[14:06:39] <Yhg1s> tsujp: I'm not sure why you think so.
[14:06:45] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[14:06:55] *** Quits: mankoff (~quassel@c-67-183-220-189.hsd1.wa.comcast.net) (Quit: quit)
[14:07:02] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 252 seconds)
[14:07:17] <Yhg1s> tsujp: you can just reference tw_but in a function defined in the same scope as the tw_but variable. Like 'tw_but = tk.Button(frame, text=..., command=lambda: toggle_text(tw_but))'
[14:07:26] <tsujp> I'm registering a command with a widget (what tkinter calls labels, buttons etc) so it seems mad that i need this extra logical structure instead of that command just telling me the widget it's bound to
[14:07:39] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[14:08:28] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 268 seconds)
[14:08:34] *** Joins: jpic (~jpic@82.142.20.182)
[14:08:36] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[14:08:56] <tsujp> Yhg1s yields None for me
[14:09:52] <Yhg1s> tsujp: I'm not sure what part is 'yielding None'. Can you show the actual code you're running?
[14:10:07] *** Joins: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net)
[14:10:17] *** Joins: e2m4n (~ezman@user/e2m4n)
[14:10:26] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[14:11:46] <tsujp> Yhg1s code: https://bpa.st/EKVQ
[14:11:48] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:13:20] <tsujp> Ah heck, it's because it's being destroyed change `row=1` to `row=0` (so it's not overwritten by the button) and there's now a reference to it
[14:13:30] <tsujp> annoyingly chaining .grid() on the same line 100% shows a None though
[14:13:34] <tsujp> because .grid returns None
[14:13:36] <tsujp> that sucks
[14:14:58] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[14:16:18] <tsujp> Yhg1s how come I am able to access `tw_but` from it's own constructor too? What construct is that called so I can read up on it?
[14:16:50] *** Quits: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[14:16:59] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:17:20] *** Joins: shad (~shad@user/shad)
[14:17:34] *** Joins: aklsh (~aklsh@122.164.244.188)
[14:17:42] <sveinse> Is there a way I might dump where the asyncio tasks are awaiting? asyncio.all_tasks() returns them, but I couldn't immediately find where they currently await
[14:17:47] *** Quits: aklsh (~aklsh@122.164.244.188) (Remote host closed the connection)
[14:19:18] *** Joins: arinov (~arinov@178.240.181.140)
[14:19:25] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[14:19:59] *** Joins: prompt32 (~kapad@user/kapad)
[14:21:18] <sveinse> I had a 4 hour hunt for a shutdown/cancel-race yesterday that turns out to be stuck on an await asyncio.Queue().wait(). If I could print all tasks and where they await, it would have saved me a lot of time.
[14:22:00] <sveinse> *correction: asyncio.Queue().join()
[14:22:52] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[14:24:01] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:24:16] *** Quits: gitly (~gitly@85.255.232.247) (Ping timeout: 264 seconds)
[14:24:48] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[14:25:16] <ba> Hi - should I prefer `mydict.copy()` or `dict(mydict)` for copying a dict?
[14:26:10] *** Joins: gitly (~gitly@85.255.237.194)
[14:26:15] <mdk> ba: I'd say `.copy()` if your intention is to copy it, so your intention is literally written in the code, which is good to understand it back later
[14:26:17] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:26:55] <Yhg1s> tsujp: you're not accessing it from its own constructor. You're accessing it from a function (created with lambda). You're not accessing tw_but until that function is called.
[14:27:16] *** Joins: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr)
[14:27:37] <Yhg1s> ba: if it were something other than a dict -- a dict subclass, or a dict-like object -- would you want an actual dict as result, or a copy of the dict-like object?
[14:28:15] <ba> mdk: I guess one interesting thing is that lists don't have a `copy()` method.
[14:28:33] <ba> Yhg1s: I suppose an actual dict in this case. Thanks for the insight
[14:29:06] <mdk> ba: are you sure they don't have one?
[14:29:19] <tsujp> Ok so I assume because the lambda is called after the constructor is called, then at that point tw_but exists hence why there's no problem Yhg1s?
[14:29:21] *** Joins: Colt (~Colt@user/colt)
[14:29:33] <Yhg1s> tsujp: pretty much, yes.
[14:29:46] <ba> mdk: oh, apparently `pydoc` was defaulting to python2 :)
[14:31:18] *** Joins: cheater (~Username@user/cheater)
[14:31:28] <parv> Speaking of pydoc, is there some other (light weight) doc processor to see the doc without executing a damn file?
[14:32:44] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:32:45] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:52] <ba> epydoc used to work like that, but it's fallen by the wayside because extracting docs statically from source code is a bit of a ballache
[14:33:12] <parv> lol
[14:33:29] <parv> Also, "Sad"
[14:33:36] <The-Compiler> I just use the HTML docs someone else already extracted for me :D
[14:34:19] *** Joins: resmo (~resmo@2a00:d420:9:8a00:3a5a:7083:4115:e8ec)
[14:34:20] <The-Compiler> just wish something like https://zealdocs.org/ existed, but working with any Sphinx (or RTD) project rather than specially prepared docsets only
[14:36:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[14:36:54] <Yhg1s> Sphinx can extract docstrings as well as have separate reST docs, but it still executes damned files.
[14:37:09] <Yhg1s> I'm just not sure if _which_ damned files it executes matters to you.
[14:37:10] <parv> Well ... that just points to writing a very limited extractor for """-quote strings, molded for the style/convention in use :-|
[14:37:14] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[14:37:31] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:4c4:6d8e:185d:41cd) (Read error: Connection reset by peer)
[14:37:33] <raek> parv: your IDE might be able to show docstrings for functions without needing to "build" som documentation first
[14:37:36] *** Quits: emf (~emf@2620:10d:c090:400::5:99c8) (Quit: emf)
[14:37:36] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[14:38:05] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[14:38:06] <raek> elpy for emacs shows the docstring in the minibuffer when the point is on an identifier
[14:38:31] <raek> dunno if it executes anything under the hood, though
[14:38:39] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:39:16] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Ping timeout: 264 seconds)
[14:40:58] <parv> I am only concerned about the files being executed which are the commands to be run directly; could not care less about the modules that are imported.
[14:41:34] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[14:41:49] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[14:42:29] *** Joins: prompt32 (~kapad@user/kapad)
[14:43:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:43:36] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:44:16] <parv> Example where pydoc gives me heartburn: https://termbin.com/xty4
[14:45:03] *** Quits: arinov (~arinov@178.240.181.140) (Quit: WeeChat 3.3)
[14:45:33] *** Joins: cursey (~cursey@user/cursey)
[14:46:27] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:47:00] *** Joins: arinov (~arinov@178.240.181.140)
[14:47:39] <nedbat> parv: this looks like a good use for ` if __name__ == "__main__": `
[14:47:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:48:21] <parv> nedbat, Well that would be only to cater to pydoc & nothing else
[14:48:52] <nedbat> parv: i don't know what you mean. it's a standard way to distinguish between running and importing.
[14:49:04] <tsujp> So main thread T1 spawns T2 which runs a blocking task, but from T2 I need to determine when said task finishes so I can send an event back to T1. So really what I need is T1 spawns T2 which spawns blocking task T3 and T2 monitors T3 to send the result back to T1 right? Is that a silly approach or?
[14:49:05] <nedbat> parv: also, it looks like you want "pydoc x", not "pydoc x.py"
[14:49:07] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:49:09] <The-Compiler> parv: it would sure cater to a lot of other things - say, if you wanted to write tests for your module, or use that code from another module
[14:49:28] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[14:49:46] <nedbat> tsujp: doesn't T2 know when the blocking task is done because it has statements after the blockng task?
[14:49:59] <parv> nedbat, Right. but does not (pydoc x) matter in this case as results in same error
[14:50:10] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[14:50:11] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[14:50:13] <tsujp> nedbat apologies, T2 needs to still be able to send events while this blocking task goes on*
[14:50:21] <nedbat> parv: right, but once you add the __name__ block, it works.
[14:51:59] <parv> The-Compiler, I understand about the use in a module designed to be imported && to run directly, but not so much for something that is inherently written to be run directly.
[14:52:18] <nedbat> parv: you had a problem, and this is the solution. it's exactly what it's meant for.
[14:52:49] *** Joins: greedom (~greedom@p200300de670bd800076ae5df8b2243b0.dip0.t-ipconnect.de)
[14:53:08] <The-Compiler> parv: if you run sys.exit when your module is imported, making it impossible to import your module is on that, not really on the tools importing it...
[14:53:16] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 245 seconds)
[14:55:21] *** Quits: MrPixels (~MrPixels@82-75-30-20.cable.dynamic.v4.ziggo.nl) (Quit: Connection closed)
[14:56:31] <nedbat> tsujp: then it sounds like you need another thread.  Or async?
[14:56:51] *** Joins: czuk_cza (~mist@188.147.97.146.nat.umts.dynamic.t-mobile.pl)
[14:57:00] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[14:58:45] *** Quits: arinov (~arinov@178.240.181.140) (Quit: WeeChat 3.3)
[14:59:42] <parv> *ugh* That means boilerplate code is need to be added to commands if I want to use pydoc.
[14:59:48] <jinsun> parv: you can also split your code into a module designed to be imported with docstrings and another one that is designed to run directly
[14:59:50] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 252 seconds)
[15:00:23] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 252 seconds)
[15:00:30] <KirkMcDonald> parv: This is an exceedingly common Python idiom, for almost exactly this reason.
[15:00:36] <parv> jinsun, That is interesting idea. Thanks
[15:01:21] <jinsun> parv: increases the complexity though, a single file is much simpler to deal with
[15:01:47] *** Joins: luigibu (~luigi@80.30.201.209)
[15:02:47] <Yhg1s> parv: it's _one line_ of boilerplate, and as KirkMcDonald said, exceedingly common.
[15:02:51] <arkanoid> how can I create a venv that no only branches from existing python env but is a full independent python env (I mean that pythonpath doesn not need to include system python installation paths)?
[15:03:10] <Yhg1s> arkanoid: that's not a virtualenv, that's a separate Python installation.
[15:03:56] <arkanoid> Yhg1s: well, yes, that would be ok too
[15:04:42] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[15:04:47] <Yhg1s> arkanoid: it really depends on why it needs to be independent from the system python, but pyenv may be what you want.
[15:05:51] <han-solo> arkanoid: just clarifying, you want a new virtualenv, with the current dependencies of some venv and add some more packages to work with, for the same python ?
[15:06:26] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[15:07:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:07:13] *** Joins: Klinda (~superleag@user/klinda)
[15:07:49] <arkanoid> Yhg1s: I'm building a C app that links to libpython3.8.so directly. It works and I'm successfully importing venv pip installed modules by adding site-packages to sys.path. Problem is that it still requires modules from system path (like threading) and I would like to have it all contained as subfolder of my C project
[15:11:01] <Yhg1s> arkanoid: do you still want to be able to pip install packages for that embedded Python?
[15:11:52] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[15:12:03] <arkanoid> Yhg1s, yes, possible, but that's not a requirement as long as I can "sync" the site-packages folder from a standard venv into the embedded one when neccessary
[15:12:06] *** Joins: soman (~soman@83.139.147.234)
[15:12:08] *** Joins: arinov (~arinov@178.240.181.140)
[15:12:11] <arkanoid> s/possible/possibly
[15:12:27] <Yhg1s> arkanoid: you can't just copy site-packages directories from other Python installations, no.
[15:13:32] <Yhg1s> arkanoid: build Python from source, install it in a directory specific to your embedding application. Use that installation's pip to install what you want. (You can still create a separate venv within that installation and have your embedded Python use it, but it's probably not that useful.)
[15:14:09] *** Joins: th0rne (~enomaae1@lyta.org.aalto.fi)
[15:14:12] *** Joins: traptrip (trip@brigaid.xs4all.nl)
[15:14:26] <th0rne> How to do something similar to traps in bash in python?
[15:14:32] <mrwick> is there a really good way to check a file exists and is executable? there seem to be many options, I am opting for pathlib.Path and a try/except catching FileNotFound and Permission
[15:14:36] *** Joins: legola (~legola@46.235.101.65)
[15:14:55] *** dcaro is now known as dcaro_lunch
[15:14:57] <Yhg1s> th0rne: it depends on which trap. The signal module, or try/except, or atexit, perhaps.
[15:15:26] <th0rne> Well, the idea is that a curses program would at least not mess up the terminal when it crashes.
[15:15:43] <arkanoid> why can't I just copy libpython3.8.so into my embedded project, dynload it, adding site-packages (and possibly other requirements) to sys.path? It seems to be working so far
[15:15:53] <Yhg1s> mrwick: pathlib.Path.exists or os.path.exists, and os.access.
[15:17:12] <Yhg1s> arkanoid: you would have to copy the entire installation directory, and you have no control over how it was built. It's much easier to maintain if you build Python from source, because your embedding application is really tightly coupled with the installation it uses. If you want it to be separate from the system python, don't use the system python.
[15:17:55] <mrwick> Yhg1s: you would not do try/except?
[15:18:52] <Yhg1s> mrwick: it depends on the situation.
[15:19:47] <KirkMcDonald> th0rne: There is curses.wrapper for this case, specifically.
[15:20:26] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800ccb8a144218a995d.ipv6.abo.wanadoo.fr)
[15:21:19] <KirkMcDonald> th0rne: If you need more fine-grained control, then you would probably use try/finally.
[15:21:52] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[15:21:52] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:22:49] <arkanoid> Yhg1s: thanks, building from source
[15:22:54] *** Joins: rito_ (~androirc@45.112.243.47)
[15:23:51] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 256 seconds)
[15:24:26] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:25:01] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[15:25:23] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Remote host closed the connection)
[15:25:27] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:26:04] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Ping timeout: 264 seconds)
[15:26:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[15:29:07] *** Quits: soman (~soman@83.139.147.234) (Quit: Client closed)
[15:31:08] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[15:31:57] *** Quits: lyr (~lyr@user/lyr) (Quit: Ping timeout (120 seconds))
[15:32:12] *** Joins: lyr (~lyr@user/lyr)
[15:32:35] <dob1> if I want to delete a virtualenv directory (with all the files inside it) I can just simply delete the dir, no other files/dirs to delete, right?
[15:32:51] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:33:16] <rito_> Yes.
[15:33:25] <rito_> Just delete the whole dir.
[15:33:31] <rito_> rm -rf dir
[15:33:44] <dob1> ok thanks
[15:33:54] <rito_> Sure, mate
[15:35:25] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[15:35:55] <prompt32> https://bugzilla.mozilla.org/show_bug.cgi?id=1739752
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:34] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[15:38:54] *** Quits: p-i-_ (~Ohmu@223.206.149.59) (Remote host closed the connection)
[15:39:29] *** Joins: p-i- (~Ohmu@223.206.149.59)
[15:42:37] *** Joins: xkuru (~xkuru@user/xkuru)
[15:43:01] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:a82d:72b:97d0:ca91)
[15:43:50] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:44:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:45:40] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-115.dynamic.dial.as9105.com)
[15:45:55] *** Quits: justache (~justache@user/justache) (Ping timeout: 268 seconds)
[15:46:53] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[15:47:07] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[15:48:33] *** Joins: aniketgm (~Aniket@49.36.107.115)
[15:48:34] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[15:48:52] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800ccb8a144218a995d.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[15:50:21] *** Quits: l4yer (~l4yer@2001:ac8:31:6e:1012:caf7:418b:4543) (Ping timeout: 245 seconds)
[15:50:49] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[15:51:10] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[15:51:30] *** Quits: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[15:53:36] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[15:54:27] *** Joins: aniketgm (~Aniket@49.36.107.115)
[15:55:01] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[15:55:31] *** Joins: nomic (~nomic@185.217.117.132)
[15:58:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:58:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[15:58:18] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[15:59:04] *** Quits: parv (~quass@user/parv) (Quit: parv)
[16:00:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:01:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:01:20] <th0rne> KirkMcDonald❱ Ok, nice, thanks.
[16:02:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:06:00] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[16:09:04] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:09:11] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[16:09:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[16:10:43] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[16:11:25] *** Joins: fikran (~fikran@user/fikran)
[16:13:05] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:13:18] *** Joins: mickey8 (~user@user/mickey)
[16:13:41] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[16:13:43] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[16:14:10] *** Quits: rito_ (~androirc@45.112.243.47) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[16:14:25] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:16:10] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:19:02] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[16:19:17] *** Quits: nicholaus04 (~nicholaus@172.58.22.198) (Ping timeout: 250 seconds)
[16:20:58] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[16:21:03] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[16:21:12] *** Joins: arinov (~arinov@178.240.181.140)
[16:21:29] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:2920:4094:8818:7c51)
[16:22:01] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Remote host closed the connection)
[16:22:20] *** Quits: prompt32 (~kapad@user/kapad) (Ping timeout: 252 seconds)
[16:23:04] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[16:23:27] *** Joins: grooverman (~grooverma@177.95.12.14)
[16:23:56] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:24:16] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[16:24:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:25:27] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:25:55] *** dcaro_lunch is now known as dcaro
[16:30:27] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:33:17] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:34:15] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[16:34:28] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 264 seconds)
[16:34:35] <NyaaTheCat> mornin everyone
[16:35:23] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (Remote host closed the connection)
[16:35:23] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (Remote host closed the connection)
[16:35:45] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[16:35:46] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[16:35:46] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 245 seconds)
[16:35:51] <rindolf> NyaaTheCat: meow
[16:36:00] * NyaaTheCat meow
[16:36:04] *** Joins: shad (~shad@user/shad)
[16:36:29] <rindolf> NyaaTheCat: bark! ;)
[16:36:39] * NyaaTheCat meow!
[16:36:45] <rindolf> NyaaTheCat: sup?
[16:37:17] *** Joins: zeden (~zeden@user/zeden)
[16:37:46] *** Joins: aniketgm (~Aniket@49.36.107.115)
[16:38:23] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:38:30] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Remote host closed the connection)
[16:41:11] <DPA> meow
[16:41:18] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[16:41:35] <NyaaTheCat> rindolf, I'm doing well
[16:42:01] *** Quits: mosh3k21 (~mosh3k21@user/mosh3k21) (Ping timeout: 268 seconds)
[16:42:46] <th0rne> vim-ale seems to be checking imports against system libraries rather than libraries in the virtual environment - what am I doing wrong?
[16:44:56] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Quit: guenhael)
[16:45:03] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:45:03] <th0rne> Maybe I should ask my distro's channel.
[16:45:04] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:45:08] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[16:45:25] *** Joins: nyah (~nyah@94.6.71.219)
[16:45:56] <aniketgm> are you using neovim ?
[16:45:59] *** Quits: jay-m126_ (~jay-m@154.72.167.166) (Ping timeout: 252 seconds)
[16:46:01] *** Quits: jay-m126 (~jay-m@154.72.167.166) (Ping timeout: 256 seconds)
[16:46:23] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:46:36] <aniketgm> there is option you need to set. https://github.com/dense-analysis/ale/issues/3142
[16:46:58] *** Joins: justache (~justache@user/justache)
[16:47:36] *** Joins: jay-m126 (~jay-m@154.72.167.140)
[16:48:04] *** Joins: jay-m126_ (~jay-m@154.72.167.140)
[16:48:11] *** Joins: guenhael1 (~Thunderbi@193.52.208.97)
[16:48:27] <th0rne> No, regular vim.
[16:48:34] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Read error: Connection reset by peer)
[16:48:34] *** guenhael1 is now known as guenhael
[16:49:14] <aniketgm> check out the link. should as well work for regular vim.
[16:49:28] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 264 seconds)
[16:49:34] *** Quits: gusto (~Augustus@109.255.100.54) (Remote host closed the connection)
[16:49:38] <th0rne> >The default for g:ale_virtualenv_dir_names is ['.env', '.venv', 'env', 've-py3', 've', 'virtualenv', 'venv'], which are some common directory names.
[16:49:40] *** cdown_ is now known as cdown
[16:49:47] <th0rne> My venv dir is called 'env', though.
[16:52:10] *** Quits: cruncher (~cruncher@90.68.118.49) (Ping timeout: 260 seconds)
[16:52:35] <rindolf> NyaaTheCat: nice
[16:52:41] *** Joins: gusto (~Augustus@109.255.100.54)
[16:52:48] <NyaaTheCat> ye ig I had a pretty cruddy weekend
[16:53:33] <aniketgm> try setting it as empty. seems some bug in vim-ale.
[16:54:30] *** Joins: mepholic (~mepholic@flux.hxx.in)
[16:54:35] <th0rne> aniketgm❱ Doesn't seem to help.
[16:54:58] *** Quits: arinov (~arinov@178.240.181.140) (Quit: WeeChat 3.3)
[16:55:46] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection timed out)
[16:56:19] *** Quits: meph (~mepholic@flux.hxx.in) (Read error: Connection reset by peer)
[16:56:21] *** Quits: gildarts (16abab341f@user/gildarts) (Ping timeout: 250 seconds)
[16:56:54] *** Joins: gildarts (16abab341f@user/gildarts)
[16:59:53] <th0rne> Ok, I looked at env/pyenv.cfg, and it says 'home = /usr/bin', which doesn't seem right?
[17:00:01] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:00:05] *** Quits: Disposeable-Nick (~Ident@user/disposeable-nick) (Quit: Leaving)
[17:02:26] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:02:33] *** Joins: luigibu (~luigi@80.30.201.209)
[17:03:02] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 252 seconds)
[17:04:16] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[17:05:43] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[17:06:51] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[17:07:09] *** Joins: ianliu (~ianliu@189-46-252-210.dsl.telesp.net.br)
[17:07:15] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:08:54] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:09:11] *** Joins: p-i-_ (~Ohmu@223.206.149.59)
[17:09:12] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[17:09:38] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[17:12:52] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:12:52] *** Quits: p-i- (~Ohmu@223.206.149.59) (Ping timeout: 264 seconds)
[17:13:34] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[17:13:54] *** Joins: mosh3k21 (~mosh3k21@user/mosh3k21)
[17:14:04] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[17:14:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:15:08] <aniketgm> did just setting g:ale_virtualenv_dir_names = ['env'] work ?
[17:15:47] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[17:16:24] *** Joins: rito_ (~rito_gh@45.112.243.47)
[17:17:00] <aniketgm> there are many other vim-ale options though, which i'm not really aware. I use emacs. although an ex-vimmer I used jedi plugins back in the days. maybe have a look there.
[17:20:16] *** Joins: weedmic (~weedmic@188.120.139.53)
[17:20:34] *** Joins: nichlas (uid374954@id-374954.uxbridge.irccloud.com)
[17:20:53] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[17:21:57] *** Joins: RasnCain_ (~rasncain@68.12.15.83)
[17:22:16] *** Joins: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net)
[17:22:57] *** Joins: irrgit (~irrgit@192.241.175.183)
[17:26:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[17:27:18] *** Joins: weedmic_ (~weedmic@188.120.139.53)
[17:27:47] *** Quits: weedmic (~weedmic@188.120.139.53) (Ping timeout: 252 seconds)
[17:30:03] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection timed out)
[17:30:13] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[17:30:22] <MaximB> I want to check in json file if some var exists, if it is, print it. I  tried: if b["FromPort"]: print("exists"), else... but for some reason it gives me an error if this var does not exists too
[17:30:40] <braxas> last week someone said I can put this stuff https://gitlab.com/aucampia/eg/python-service/-/blob/main/poetry.toml in pyproject.toml, but I don't know how, tried in-project = true inside `[tool.poetry.virtualenvs]` in pyproject.toml, but it did not work
[17:30:48] <MaximB> KeyError: 'FromPort'
[17:30:49] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[17:30:53] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[17:30:58] <Yhg1s> MaximB: you're not dealing with JSON at that point, but a dict. Accessing a non-existent key will give that error.
[17:31:07] <bjs> MaximB: `b["FromPort"]` looks up the value for key "FromPort".  maybe you want `if "FromPort" in b`
[17:31:25] <MaximB> thanks, will try
[17:33:16] *** Joins: stranac (~stranac@195.29.239.126)
[17:33:16] <MaximB> works
[17:33:46] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:35:16] <th0rne> aniketgm❱ No, it doesn't work.
[17:35:44] <th0rne> What is the 'home =' line in pyenv.cfg supposed to point to?
[17:36:02] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:36:09] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:36:23] *** Quits: ustedes (~whaley@2603-6080-a301-33d1-ccb6-bbee-0edf-6bd3.res6.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[17:38:10] <aniketgm> you don't really need to modify that. python interpretor takes care of it when you launch the virtual env.
[17:38:32] <th0rne> Ok.
[17:38:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:38:48] <aniketgm> I'm assuming you are launching vim from a virtual env.
[17:39:19] <th0rne> I'm launching it from shell where the virtual env has been activated, if that's what you mean?
[17:39:21] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:39:25] *** Joins: luigibu (~luigi@80.30.201.209)
[17:39:39] <aniketgm> yes.
[17:39:43] <th0rne> Yeah, sure.
[17:39:47] *** Joins: drincruz (drincruz@2607:5300:203:3f52::19)
[17:41:37] *** Quits: ianliu (~ianliu@189-46-252-210.dsl.telesp.net.br) (Quit: WeeChat 3.3)
[17:42:32] <mawk> does python accept symlinks as packages?
[17:42:55] <mawk> I guess trying it myself would be faster than waiting for an answer lol nevermind
[17:42:59] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[17:43:33] <mawk> yeah it works
[17:43:55] <weedmic_> nice to know - but i was thinking how would python know
[17:43:57] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[17:44:00] <hexnewbie> mawk: Just assume it should, if it does not explicitly check, a symlink is just a file/directory. There would be exceptions, but they are exceptions
[17:44:23] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:44:24] <mawk> weedmic_: you can set NOFOLLOW option to many syscalls so they don't follow symlinks, for security reasons for instance
[17:44:32] <mawk> that's how python could know/error out on symlink if they did that
[17:44:40] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[17:44:45] <mawk> but apparently they don't so it's all fine
[17:44:49] <weedmic_> i meant how would python know a link was real or sym
[17:44:51] *** Joins: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08)
[17:44:57] <CrtxReavr> ^^^
[17:45:06] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[17:45:16] <bjs> weedmic_: i mean, if you have a path you can just check if it's a symlink or not
[17:46:06] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[17:46:27] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[17:47:13] *** Joins: prompt32 (~kapad@user/kapad)
[17:47:19] <hexnewbie> One odd symlink behaviour with Python is the following: I have /opt/vendor/appname/appname symlinked to /usr/local/bin/appname, which correctly finds its packages under /opt/vendor/appname, despite there being no such packages under /usr/local/bin
[17:47:41] <hexnewbie> That is, someone definitely does check if a symlinks is being followed (and I'm not sure if it is the OS executing the shebang, or Python itself)
[17:47:42] <faceface> hello
[17:47:44] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[17:47:50] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:d885:8fcc:5b6d:d01e)
[17:48:03] <faceface> What's the keyword that means 'one of', like all... returns true if one of the arguments is true
[17:48:18] <sveinse> faceface: any()
[17:48:26] <hexnewbie> faceface: (x or y or z) or any(x for x in iterable)
[17:48:27] <faceface> thanks sveinse !
[17:48:35] <faceface> thanks both
[17:48:39] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[17:48:41] <hexnewbie> faceface: Er, any(iterable)
[17:49:07] <jinsun> braxas: looks like it is a poetry bug https://github.com/python-poetry/poetry/issues/2937
[17:49:28] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[17:49:48] *** Joins: drogas (~drogas@jump2.jet.uk)
[17:50:15] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 265 seconds)
[17:50:45] <jinsun> it would be nice if any behaved like chained or and returned the first truthy thing, instead of callng bool on it
[17:51:00] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:51:38] <hexnewbie> It cannot, because otherwise it would be inconsistent for empty iterables
[17:52:12] <hexnewbie> any([]) needs to be False, and all([]) needs to be True
[17:52:51] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:52:52] <MacGyver> It also doesn't make sense from a language semantics point of view.
[17:53:03] <MacGyver> "first()" is what I'd want such a function to be called.
[17:53:14] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[17:53:25] <MacGyver> And I'm pretty sure implementations for that exact concept exist.
[17:53:35] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:53:48] <hexnewbie> first = lambda iterable, default=None: next(filter(None, iterable), default)
[17:54:15] <sveinse> hexnewbie: does any(iterable) consume all of the iterable before returning True?
[17:54:34] <hexnewbie> sveinse: I would hope not
[17:54:55] <han-solo> it doesn't seem to
[17:54:59] <sveinse> hexnewbie: me neither
[17:56:16] <jinsun> well empty iterable can be eassily handled like `False or (chained or if not empty)`, and all can be `True and (chained and if not empty)` and still make sense
[17:56:32] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[17:56:50] <CrtxReavr> ``If the iterable is empty, return True.``  <== that's some curious behavior for all()
[17:56:58] <sveinse> I wonder then any(list_comprehension), will the comp be consumed, or will it be implicitly converted to a list (and thus consumed) before being passed to any?
[17:57:19] <hexnewbie> CrtxReavr: I find it intuitive. Don't know if it's the math background
[17:57:19] *** Joins: luigibu (~luigi@80.30.201.209)
[17:57:39] <han-solo> list comprehension would have created a list already, no ?
[17:57:40] <hexnewbie> CrtxReavr: ...or because it matches your first implementation in Pascal.
[17:57:48] <CrtxReavr> hexnewbie, so all of nothing is truthy?
[17:58:02] <grym> CrtxReavr: all of these zero things meet the condition
[17:58:12] <bjs> CrtxReavr: it's an age-old discussion,  in math you often say that a "forall" is "vacuously true" if the set is empty
[17:58:12] <grym> therefore, true
[17:58:25] <bjs> CrtxReavr: since after all, all the things in the (empty) set satisfy the condition.
[17:58:28] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[17:58:57] <CrtxReavr> bool(0), bool(None), bool([])
[17:58:58] <hexnewbie> CrtxReavr: What grym said. Also, it does not unexpectedly change when you add a new truthy value to the list
[17:59:00] <bjs> It's also nice property that if you want `all([x, *xs]) == x and all(xs)` then it implies that all([]) is True
[17:59:37] <grym> CrtxReavr: the truthyness of an empty collection and the truthiness of a condition applied to it are different things
[17:59:44] <hexnewbie> CrtxReavr: It also satisfies all(x + y) == all(x) and all(y)
[17:59:46] <bjs> CrtxReavr: sure but all(x) is not the same as bool(x). The truthiness of the collection is not necessairly related to the truthiness of the values within
[18:00:03] <hexnewbie> Er, all(x + y) == (all(x) and all(y))
[18:00:36] <hexnewbie> By contrast, any(x + y) == (any(x) or any(y)) # x and y being lists here
[18:00:54] <MacGyver> hexnewbie: It's the math background. People don't tend to have an intuition for the vacuous truth.
[18:00:58] <bjs> but there, any(x+y) == any(x) or any(y) only works if any([]) is False :)
[18:01:23] <hexnewbie> bjs: Which is why it is, and has to be
[18:01:41] <bjs> so if you want these nice properties to hold, then any() and all() have to behave in this way.  It's weird at first but is very standard
[18:01:52] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Read error: Connection reset by peer)
[18:02:14] <han-solo> `Boolean([])` or other empty objects returning true kinda me as a js noob
[18:02:16] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[18:02:21] <sveinse> One thing is for sure: I'm confused as hekk when evaluating truthness on JS compared to Python. I think (or have been tought) that Py does this in a much more applicable way, mathmatical formalism a side for a second
[18:02:26] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:02:37] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Read error: Connection reset by peer)
[18:02:38] *** Quits: weedmic_ (~weedmic@188.120.139.53) (Quit: Konversation terminated!)
[18:02:40] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[18:02:45] <han-solo> s/kinda/kinda annoys/
[18:03:02] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[18:03:11] <sveinse> han-solo: haha, jinx
[18:03:24] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[18:03:24] <han-solo> :)
[18:03:42] <bjs> sveinse: truthiness is totally arbitrary, Python typically says that emptyness implies "false"
[18:03:54] <hexnewbie> Yeah, whenever I write JavaScript code I still mentally expect those to be falsy and get it wrong.
[18:04:16] <bjs> sveinse: but you can have fun: `while "False": ...`
[18:04:20] *** Joins: orbisvicis (~orbisvici@user/orbisvicis)
[18:04:22] <hexnewbie> And I do have a C background where this is a normal expectation
[18:04:58] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[18:05:22] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[18:05:24] <arkanoid> Yhg1s: I've compiled python3.8 from source and statically linked libpython.a to my C application. I successfully load and run builtin modules/functions. Could you please explan me how can I add numpy to this setup? I've tried unpacking "numpy-1.21.4-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl" to custom folder and adding the path to sys.path at runtime, but I'm getting "SIGSEGV:
[18:05:26] <arkanoid> Illegal storage access."
[18:05:29] <hexnewbie> PHP wins this fight, with its (pre-8.0) ‘if ("0") { ... } ’
[18:07:15] *** Quits: poiqwepoiqwe (uid525840@id-525840.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:07:39] <hexnewbie> By the way, even though C's behaviour in this regard makes total sense, you can run into bugs caused by C programmers *expecting* NULL and "" to be similar-ish. LibreOffice still has a bug where an empty PYTHONPATH ("") -- as opposed to unset PYTHONPATH (NULL) cause it to do really weird stuff
[18:07:40] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Ping timeout: 256 seconds)
[18:08:42] <hexnewbie> And while it's normal-ish to distinguish between unset and empty for an environment variable, if that code had been in Python and doing ‘if environ.get('PYTHONPATH'): ...’, it would have never been a bug
[18:08:43] <sveinse> With py interpreting emptyness as False, makes way for logical use of "is".
[18:09:25] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[18:09:49] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[18:09:52] <hexnewbie> sveinse: Well, it's not *mandatory*, as you can still do ‘x == None’. Only issue if you have fears someone may have written type(x).__eq__ which produces True for None
[18:10:06] <bjs> sveinse: or well, with direct comparison operators in general (`==` and `is`) which do not generally check truthiness
[18:10:10] <bjs> but instead compare the values directly
[18:10:36] <bjs> hexnewbie: see numpy for examples
[18:11:06] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[18:11:08] <bjs> where this == approach can fail
[18:11:11] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:11:47] <jinsun> and expecting empty == False also fails with numpy
[18:11:49] <hexnewbie> Even in code that does not use numpy, when I have to turn ‘x is None’ into ‘x in [None, "berries"]’, that bothers me, and I usually go for x is None or x == 'berries'
[18:11:54] <sveinse> hexnewbie: Or simply `if not x` instead of `if x is None`. I raised that very question yesterday and was told that the latter is preferred due to the ability to override the bool operator (or __eq__) ref bjs
[18:12:05] <bjs> sveinse: `if not x` still uses truthiness
[18:12:06] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[18:12:12] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Client Quit)
[18:12:31] <bjs> `if not x: ...` is like saying `if x: pass; else: ...`
[18:12:32] <sveinse> jep
[18:12:39] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[18:13:09] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[18:13:20] <CrtxReavr> ``if x is not None:`` is a verse I see in a lot of others' python.
[18:13:28] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 264 seconds)
[18:13:34] *** Quits: mwichmann_ (~mats@209-188-119-117.taosnet.com) (Quit: Leaving)
[18:14:00] <bjs> CrtxReavr: yeah,  it's pretty much the only way to really check if you have a None in your hands
[18:14:14] *** Joins: abip20 (~abdullah@user/abip20)
[18:14:26] <bjs> `if not x` will also match "" and 0 and other possibly-valid-but-not-None values,  and `if x == None` might even just crash (e.g. if `x` might be a numpy array...)
[18:15:06] <sveinse> notable and common falsy objects are empty lists and dicts
[18:15:07] <bjs> so it's one of the relatively few places where object identity checks actually make sense and are good
[18:15:10] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Read error: Connection reset by peer)
[18:15:11] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[18:15:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[18:15:34] <bjs> sveinse: yeah and 0 and "" and empty tuples and empty sets and I'm sure there are well.. False itself!
[18:15:38] <bjs> False is falsey, but isn't None :)
[18:15:46] *** Quits: Jefren1 (~Jefren@70.35.67.84) (Ping timeout: 268 seconds)
[18:15:56] <Pi-sistance> I see a graph formed from pyplot, the x axis goes up to 4 as the array for the x value is set from 0 to 4., then the xlim function reduces the x values that should be shown from 0 to 2, but it er fails to work
[18:16:27] <CrtxReavr> One of my Mutable Minds(tm) instructors repeatedly said "Things that are zero, empty, or None are False."
[18:16:28] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[18:16:53] <Pi-sistance> thouigh not sure what the point of resetting the x values is after already feeding them in
[18:16:56] *** Joins: e2m4n (~ezman@user/e2m4n)
[18:16:57] *** Joins: luigibu (~luigi@80.30.201.209)
[18:17:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:17:32] *** Joins: Jefren1 (~Jefren@70.35.67.104)
[18:17:32] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[18:17:40] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[18:17:58] <MaximB> I'm trying to send email with smtplib, I have gmail with MFA. will it prevent me from sending an email via python+smtplib?
[18:18:18] <SnoopJ> Pi-sistance, sometimes you want to change the limits on a plot. The particular timing isn't really important to the library's design.
[18:18:32] <SnoopJ> as an example: maybe the underlying data changed, too
[18:18:34] <CrtxReavr> If you're using their SMTP server, then. . . it won't be easy.
[18:18:42] <non-sense> I've been creating an app with flask with server side rendering so I used flask-session for this. It was working fine for a few days and I just started getting access errors in my logs and I'm not sure what caused them or how to get rid of them. Any ideas? It doesn't seem to crash my app.. just floods my console.
[18:18:42] <non-sense> PermissionError: [WinError 5] Access is denied: 'C:\\Users\\admin\\flask\\app1\\flask_session\\tmp8f8w8mxx.__wz_cache' -> 'C:\\Users\\admin\\flask\\app1\\flask_session\\449ceadf56fc7cd7ccff0ae70c2488aa'
[18:18:42] <non-sense> WARNING:root:Exception raised while handling cache file 'C:\Users\admin\flask\app1\flask_session\449ceadf56fc7cd7ccff0ae70c2488aa'
[18:18:49] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[18:18:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[18:19:02] * CrtxReavr looks at the topic.
[18:19:12] <MaximB> can I just send from my localhost without user\pass?
[18:19:20] <Pi-sistance> ticks are also set to be within the original x value upper bound that was outside of the xlimit functions upper bound, perhaps thats why it still showed the original bounds in the examples graph
[18:19:24] <non-sense> Yeah sorry. This was copy/pasta from discord. I didn't thikn it was going to do that.
[18:19:32] <CrtxReavr> MaximB, maybe. . .
[18:19:45] <Pi-sistance> snoopj ok, I guess we might not want to change the original array we are feding into it either
[18:20:03] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[18:20:05] <CrtxReavr> MaximB, well. .. is this actual Gmail, or a Gapps domain?
[18:20:13] <MaximB> gmail
[18:20:19] <CrtxReavr> Then probably no.
[18:20:32] <CrtxReavr> AT least. . . not and get past any spam filters.
[18:20:51] *** Joins: fikran (~fikran@user/fikran)
[18:21:14] <MaximB> spam filter is not important here, I can make exclusion\rule. same title...
[18:21:38] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[18:21:45] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[18:22:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[18:22:10] <CrtxReavr> I have an Gapps domain and I had to add an SPF record that included my external MTAs to do that.
[18:22:33] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:22:36] <SnoopJ> Pi-sistance, the library's not really concerned with reading the user's mind about motives, the xlim() function and the related ones (e.g. set_xlim()) are just there for setting the limits, *whenever* the user is interested in doing this.
[18:22:40] *** Joins: charlie_sando (~q@2603-8080-2901-f106-b43a-2850-18e0-07b7.res6.spectrum.com)
[18:23:00] <CrtxReavr> MaximB, MTAs may not even accept it though.
[18:23:26] <CrtxReavr> They'll basically say "LULZ UR NOT GMAIL!!!"
[18:24:18] <causaui1> using pytest. I'm writing tests for a module that does stuff in AWS via boto3. I want to assure myself that my tests will never ever actually use real boto3 methods. Is there some way I can patch boto3 globally like in conftest.py so that it's faked/mocked whether future test authors remember to patch it later or not? Does this make sense?
[18:24:21] <sveinse> I must admit I enjoy pys approach that emptyness equals False in a truthness test. It results in very practical programming, as I tend to test for emptyness more often than testing for None (I think).
[18:24:37] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[18:24:47] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Client Quit)
[18:25:26] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:26:16] <CrtxReavr> I do a lot of ``if thing`` with the expectation that thing is not empty.
[18:26:19] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[18:26:36] <causaui1> beware that `if thing` is also falsy if thing is 0
[18:27:07] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[18:27:07] <CrtxReavr> I generally have a pretty good clue what thing should be.
[18:27:28] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:a82d:72b:97d0:ca91) (Ping timeout: 265 seconds)
[18:28:42] <lericson> i have a 3x3 matrix and a 3xHxW matrix in numpy and i want to compute their matrix multiplication, which should be 3xHxW
[18:29:00] *** Parts: VaniaPy (~VaniaPy@79.103.148.219.dsl.dyn.forthnet.gr) ()
[18:29:04] <MacGyver> I don't agree that Python's truthiness is totally arbitrary, it mostly follows the principle that the identity element of the addition is false.
[18:29:04] <lericson> but it seems i forgot how broadcasting works so i can't really get numpy to do it
[18:29:37] <MacGyver> I wonder whether that's just coincidence, but I doubt it.
[18:29:51] <SnoopJ> causaui1, you might want to make an autouse fixture that applies your mock for all tests?
[18:30:09] <causaui1> SnoopJ: til "autouse fixture" is a thing, googling this ty
[18:31:14] <SnoopJ> causaui1, tl;dr they are fixtures that execute even when they aren't explicitly requested: https://docs.pytest.org/en/latest/how-to/fixtures.html#autouse-fixtures-fixtures-you-don-t-have-to-request
[18:31:14] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:31:19] *** Joins: luigibu (~luigi@80.30.201.209)
[18:31:24] <Pi-sistance> it should read my mind
[18:31:25] <causaui1> yeah found it, this looks like what I want, thanks
[18:31:29] <Pi-sistance> damnit
[18:32:04] <SnoopJ> MacGyver, it's arbitrary in the sense that builtin types only establish conventions, but user types can do whatever they want
[18:32:16] <MacGyver> Ah, right, sure.
[18:32:34] *** Joins: Enitin (~Enitin@82.102.22.85)
[18:32:59] <SnoopJ> I guess empty-is-false is a little less arbitrary because if __bool__ isn't defined it will fall back on `__len__() != 0` though
[18:33:31] *** Joins: RasnCa___ (~rasncain@ip174-73-119-77.br.br.cox.net)
[18:33:38] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Ping timeout: 268 seconds)
[18:33:56] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:34:13] <jinsun> oh TIL
[18:34:15] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 256 seconds)
[18:34:16] <causaui1> SnoopJ: does it make sense to put this in tests/conftest.py then? or do I need it in subdirectories under tests/ also?
[18:34:39] *** pizzaiolo is now known as pizza
[18:35:14] *** Joins: y2o (~y2o@nat-wifivisitas-1x.campus.utfsm.cl)
[18:35:17] <SnoopJ> causaui1, if you want it to be in every test, you want tests/conftest.py I think. If you wanted it only for some tests, you'd put it in the conftest for those suites
[18:35:28] <causaui1> right, okay
[18:36:16] *** Quits: RasnCain_ (~rasncain@68.12.15.83) (Ping timeout: 264 seconds)
[18:36:27] *** Joins: jmd (~user@de.cellform.com)
[18:36:28] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[18:36:32] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:36:49] *** Joins: jmd (~user@de.cellform.com)
[18:37:18] <aniketgm> why would anyone wanna name themselves pizza, unless they want to be eaten. lol. :D
[18:37:28] <arkanoid> any1 knows how to embed python + numpy? I'm running builting modules successfully but I'm failing running numpy
[18:37:36] <pizza> aniketgm: bite me
[18:37:39] <pizza> <3
[18:38:27] <aniketgm> I wish'd there was a teeth symbol.
[18:38:38] <CrtxReavr> arkanoid, embedd numpy in what?
[18:38:40] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Ping timeout: 264 seconds)
[18:38:44] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-55e4-dd93-e3ad-3730.res6.spectrum.com)
[18:38:49] <SnoopJ> arkanoid, what kind of failure are you seeing?
[18:38:50] <CrtxReavr> You want like a stand-alone binary or a stand-alone python script?
[18:39:00] *** Joins: superboot (~agentgasm@user/superboot)
[18:39:05] <SnoopJ> CrtxReavr, presumably they want to embed an interpreter (and numpy) in another application
[18:39:15] <SnoopJ> as in https://docs.python.org/3/extending/embedding.html
[18:39:16] <aniketgm> arkanoid: what do you mean embed ?
[18:39:34] <aniketgm> oh
[18:39:52] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[18:40:13] <arkanoid> I want a standalone binary. I've a C program that already works with shared (or static) libpython for builtin modules/functions. I want to add numpy to the picture
[18:40:28] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[18:40:32] <Yhg1s> arkanoid: how are you installing numpy? what failure are you seeing?
[18:40:57] <aniketgm> have you tried PyImport_Import ?
[18:41:35] <arkanoid> Yhg1s: I'm seeing SIGSEGV
[18:41:50] <Pi-sistance> why my x ticks labelled in this format, I cant find any explanation anywhere '$3\pi$', '$0$'
[18:42:13] <SnoopJ> Pi-sistance, it's LaTeX: https://matplotlib.org/stable/tutorials/text/usetex.html
[18:42:26] <Yhg1s> arkanoid: exciting! When you do what, exactly? Are you stripping debug symbols? Stop doing that and use a debugger or enable faulthandler to see where the segfault happens
[18:42:36] <Pi-sistance> ty
[18:42:48] <arkanoid> I've been installing numpy by downloading the official wheel from pipy and unzipping it, but it's just a dirty guess. I'm looking for the correct way to add it to my empedded python (that I'm compiling from source)
[18:43:14] *** Joins: BlessJah (~BlessJah@user/blessjah)
[18:43:37] <Yhg1s> arkanoid: prebuilt wheels may be using different versions of the libraries that you're also linking into your C application, so that may be the cause. It's hard to tell without more info on what code actually causes the segfault.
[18:43:53] <Yhg1s> arkanoid: also, installing a wheel isn't just unzipping it.
[18:44:03] <sveinse> numpy requires a lot of C libraries as well iirc
[18:44:14] <Yhg1s> arkanoid: you should really be using pip to install in your Python installation.
[18:44:22] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[18:44:24] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[18:45:04] <SnoopJ> Yhg1s, is it meaningful (and/or desirable) to invoke pip in this embedded context, though?
[18:45:08] <arkanoid> sveinse: sure, I'm aware of it, it's ok to let numpy load them at runtime
[18:45:26] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:45:27] <arkanoid> Yhg1s: but python docs says that embedded python + pip is discouraged
[18:45:30] <Yhg1s> SnoopJ: it's not 'in an embedded context'. It's a separate Python installation that the embedding application also uses.
[18:45:40] <SnoopJ> oh, right, libpython
[18:46:12] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[18:46:21] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[18:46:22] <SnoopJ> then yea, agreed, let pip do the lifting
[18:46:25] <Yhg1s> arkanoid: well, doing what pip does but manually and badly is even more discouraged :) Third-party packages and embedded CPython are problematic for their own reasons.
[18:46:26] <arkanoid> well, actually I'm loading libpython and running it's functions. I'm not running the interpreter
[18:46:38] <Yhg1s> arkanoid: that *is* 'running the interpreter'
[18:46:49] <SnoopJ> (this is pretty much what the `python3` executable does)
[18:47:20] <arkanoid> well, I've been reading different things on stackoverflow, but just naming things. I'm aware that I'm linking libpython and not running python.exe
[18:47:46] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[18:47:46] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection reset by peer)
[18:47:49] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 268 seconds)
[18:47:58] <SnoopJ> arkanoid, does your application use whatever libpython the system makes available, or are you vendoring it with your application?
[18:48:06] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[18:48:25] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[18:49:05] *** Joins: whaley (~whaley@2603-6080-a301-33d1-3d87-1389-bc03-8f50.res6.spectrum.com)
[18:49:11] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:49:19] <arkanoid> SnoopJ: well not yet sure, I'm testing both ways. It depends if the fully embedded option is possible. I'd prefer to have it portable
[18:50:08] <arkanoid> considering that the builtin part already works, it's just up to understand if installing external modules can still end up in a portable solution or not
[18:50:27] *** Joins: BlessJah (~BlessJah@user/blessjah)
[18:50:54] *** Quits: resmo (~resmo@2a00:d420:9:8a00:3a5a:7083:4115:e8ec) (Ping timeout: 268 seconds)
[18:51:06] *** Joins: akk (~akk@75.161.146.115)
[18:51:53] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[18:51:57] <SnoopJ> The reason I ask is because you can change what's "builtin" in the vendored case to include numpy.
[18:52:33] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::a2fc)
[18:52:46] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[18:52:48] *** Joins: noord (~noord@user/noord)
[18:52:57] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[18:53:03] <SnoopJ> but Yhg1s definitely knows an order (several orders?) of magnitude more about this, so take his advice seriously :)
[18:53:25] <arkanoid> well, would be nice. I do have experience working with system python + multiple venvs, but newbie about embedding.
[18:53:38] <arkanoid> sure, I'm taking notes and I'm going to try the pip way
[18:55:12] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[18:56:04] <Yhg1s> arkanoid: if you are linking against (some of) the same libraries as numpy is using, and that's causing problems, tell pip to build from source instead of using the prebuilt binary wheels.
[18:56:39] *** Joins: NyaaTheCat (~CalculusC@user/calculuscat)
[18:56:41] <arash> any idea how to solve this? C:\Users\Arash>pip3
[18:56:43] <arash> Fatal error in launcher: Unable to create process using '"C:\Users\Arash\AppData\Local\Programs\Python\Python310\python.exe"  "C:\Users\Arash\AppData\Local\Programs\Python\Python310\Scripts\pip3.exe" ': The system cannot find the file specified.
[18:57:22] <arkanoid> no, my C code is just about importing sys, edit sys.path, import numpy -> debug
[18:58:13] *** Joins: blackleitus (uid270824@id-270824.tinside.irccloud.com)
[18:58:19] <blackleitus> I am trying to build a criminal investigative analysis platform for an event , but I would like to know what stack tech can I use in order to manage a large-scale data information in order to perform an analysis and profiling ?  https://dpaste.org/ceQE
[18:58:32] <SnoopJ> arkanoid, we can't really tell you much about the segfault without seeing the stack trace and/or the source, except that it tried to poke at memory it's not allowed to poke. This is very easy to do with the C-API, though.
[18:59:05] <Yhg1s> arash: probably reinstall Python 3.10. Something is broken about the install.
[18:59:25] <arash> Yhg1s, thank you
[19:00:05] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:00:19] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[19:01:15] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:01:28] *** Quits: czuk_cza (~mist@188.147.97.146.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 264 seconds)
[19:01:34] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[19:02:23] *** Quits: abip20 (~abdullah@user/abip20) (Quit: Konversation terminated!)
[19:02:55] <arash> I did it, I reinstalled python 310, but its not working when I type python, its only work with py command, is it normal?
[19:03:12] *** Quits: mallkrampus (~mallkramp@172.93.207.234) (Ping timeout: 256 seconds)
[19:03:15] <NyaaTheCat> no I don't think so
[19:03:22] *** Quits: ckdCreations (~ckdCreati@147.55.130.34) (Read error: Connection reset by peer)
[19:03:35] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[19:03:40] <NyaaTheCat> but then again I use 3.9 so what do I know
[19:03:45] <aniketgm> for windows py is python.
[19:04:08] *** Joins: roppert (~roppert@inb4.se)
[19:04:08] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[19:04:32] <NyaaTheCat> oh right
[19:04:37] <NyaaTheCat> I rarely use commands
[19:04:41] <NyaaTheCat> so I forgot
[19:05:25] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 256 seconds)
[19:05:32] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:05:35] <arash> it fixed after I reboot windows
[19:06:14] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[19:06:39] *** Joins: resmo (~resmo@2a00:d420:9:8a00:7069:50d7:73e6:b878)
[19:06:41] <SnoopJ> it's technically the "launcher" https://www.python.org/dev/peps/pep-0397/
[19:06:42] <sveinse> py.exe on windows is great! I am partial towards linux, but this python, python3, python2, thing of linux distros is very confusing when making portable scripts
[19:06:49] *** Quits: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch) (Read error: Connection reset by peer)
[19:07:10] <SnoopJ> sveinse, confusing how?
[19:07:21] <SnoopJ> python3/python2 - I care about major version; python - I don't care
[19:07:41] *** Quits: gitly (~gitly@85.255.237.194) (Ping timeout: 256 seconds)
[19:07:54] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[19:08:26] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:08:54] <sveinse> SnoopJ: I've encountered systems where the #!/usr/bin/env python hash-bang doesn't work. And some where python3 didn't work.
[19:09:13] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[19:09:16] <Swayze> shebang*
[19:09:26] <sveinse> Sorry, shebang of course
[19:09:27] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[19:09:27] <Yhg1s> 'python3' not working should only be the case if no Python 3 is installed, really.
[19:09:29] <Swayze> yeah np
[19:09:30] <SnoopJ> sveinse, there's not much accounting for what distributions might do, and unfortunately they do all sorts of silly things.
[19:09:33] *** Joins: gitly (~gitly@148.252.133.95)
[19:09:41] <Yhg1s> Swayze: 'hashbang' is also an accepted term for it.
[19:09:52] <Swayze> noted
[19:09:54] <aniketgm> you could just create symlinks to your required python 2/3?
[19:09:57] <jinsun> sveinse: you can get it on linux too https://github.com/brettcannon/python-launcher
[19:10:07] <SnoopJ> aniketgm, not all programs will run on "your" system
[19:10:16] <aniketgm> that should solve the shebang issue with just 'python'
[19:10:29] <Swayze> hash-pling
[19:10:29] <arash> why I can't install webdriver package?
[19:10:31] <arash> C:\>pip3 install webdriver
[19:10:31] <arash> ERROR: Could not find a version that satisfies the requirement webdriver (from versions: none)
[19:10:31] <arash> ERROR: No matching distribution found for webdriver
[19:10:32] <Swayze> lol
[19:10:43] <Swayze> arash: please see the topic for pasting things
[19:11:09] <aniketgm> SnoopJ: it's not "my" system specific actually
[19:11:20] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[19:11:25] <sveinse> I've ended up making a bashscript wrapper that seaches for an appropriate python executable and exec it.
[19:11:39] *** Quits: Jefren1 (~Jefren@70.35.67.104) (Ping timeout: 256 seconds)
[19:11:53] <aniketgm> sveinse: you mean for linux ?
[19:11:57] <Swayze> yeah py.exe is basically that
[19:12:02] *** Joins: rsx (~dummy@ppp-188-174-152-19.dynamic.mnet-online.de)
[19:12:03] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[19:12:13] <SnoopJ> As well as Brett's launcher
[19:12:28] <sveinse> aniketgm: jep
[19:12:33] <Yhg1s> arash: it doesn't have any installable files. https://pypi.org/project/webdriver/
[19:12:46] <SnoopJ> https://github.com/brettcannon/python-launcher
[19:12:47] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[19:12:54] <sveinse> Brett's launcher is nice IF you can install something on the system
[19:13:14] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[19:13:15] * SnoopJ nods
[19:13:28] <Yhg1s> arash: maybe you meant to install a different package?
[19:13:42] *** Joins: Jefren1 (~Jefren@208.104.190.60)
[19:13:43] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[19:14:01] <arash> Yhg1s, you mean different python version?
[19:14:29] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[19:15:12] <sveinse> linux aside, I really like py.exe on windows, because one can use in scripts to find an appropriate python
[19:15:14] <arash> It is part of selenium, so I installed selenium and I think problem solved.
[19:15:18] <Yhg1s> arash: no. I mean there is nothing to installed.
[19:15:29] <Yhg1s> arash: yes, if you meant selenium.webdriver, that's 'selenium', not 'webdriver'.
[19:15:41] *** Joins: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5)
[19:15:47] <arash> ok
[19:16:14] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[19:16:30] *** Joins: mallkrampus (~mallkramp@172.93.207.236)
[19:17:01] <hexology> sveinse: indeed, although pyenv works pretty well on other systems
[19:17:14] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:17:19] <hexology> probably better than a diy script, although less spcialized to your own needs
[19:17:32] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[19:17:39] <sveinse> The workflow in win is almost always: py -m venv venv; cd venv; venv/Scripts/python -m pip install --upgrade pip wheel setuptools; venv/Scripts/pip something...
[19:17:55] <jinsun> only if you install from the installer from python.org though
[19:18:01] *** Joins: Naan (~Naan@user/naan)
[19:18:18] <jinsun> the windows store python doesn't have py I think, and anaconda definitely doesn't
[19:18:20] <hexology> in my case it's `pyenv virtualenv {version} {project-name} ; pyenv local {project-name} ; pip install ...`
[19:18:37] <hexology> conda/anaconda imo should be kept far far away from any and all other package managers
[19:18:46] <hexology> especially avoid the trap of installing it with pyenv
[19:19:06] <hexology> it is not "python" despite its history as a python distribution... it's a package manager and dev ecosystem that happens to be python-centric
[19:19:08] <arash> from webdriver.chrome import ChromeDriverManager what package should I install for this?
[19:19:34] <sveinse> I have to note that I dislike that its venv/Scripts/ on Windows, while venv/bin/ on (li)nux. I wished that it wasn't so, because then I often need to write OS tests in my otherwise portable scripts.
[19:19:35] <aniketgm> sveinse: windows does it for you i guess. whenever a new python version is installed. py point to it.
[19:19:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:20:00] <sveinse> aniketgm: or the python installer, but yeah
[19:20:17] *** Joins: tbcr (~tbcr@user/tbcr)
[19:20:37] <Yhg1s> arash: I'm not sure. Where did you get the code that does that?
[19:21:09] <Swayze> thats selenium if im not mistaken
[19:21:19] <Yhg1s> Swayze: a top-level 'webdriver' module?
[19:21:31] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[19:21:56] <Swayze> https://pypi.org/project/webdriver-manager/
[19:22:01] <Swayze> see under 'use wit chromium'
[19:22:19] <Swayze> or chrome
[19:22:25] <Yhg1s> Swayze: that's not 'webdriver', though, it's 'webdriver_manager'.
[19:22:42] <sveinse> If I were granted one wish to change something in python, that would be it
[19:22:44] <Swayze> ah
[19:22:48] <Swayze> :p
[19:23:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:23:34] <Swayze> you can always change python sveinse :-o
[19:23:35] <aniketgm> sveinse: venv/Script vs venv/bin, that's an age old problem. Python-windows maintainers really need to talk this through.
[19:25:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:25:19] *** Quits: RasnCa___ (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[19:25:27] <sveinse> aniketgm: yeah, in these times in particular, where many users are floating freely using different OSes regularly.
[19:25:30] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:25:40] *** Joins: beencubed (~beencubed@209.131.238.248)
[19:25:43] *** Quits: charlie_sando (~q@2603-8080-2901-f106-b43a-2850-18e0-07b7.res6.spectrum.com) (Read error: Connection reset by peer)
[19:25:47] <Helenah> I have an AsyncSSH server, I have ^(?=.*[\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[@#$!])[\w\d@#$!]{12,32}$ as the password regex and I coded a password generator which works but for some reason the server claims the generated passwords don't meet the password criteria. Is there anything in this expression that SSH servers/clients don't like?
[19:25:49] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[19:25:59] <Helenah> Or is this more a question for an actual SSH channel?
[19:26:59] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[19:27:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:27:35] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[19:27:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:27:50] <Helenah> "│15:49:34          sveinse | I have to note that I dislike that its venv/Scripts/ on Windows, while venv/bin/ on (li)nux. I wished that it wasn't so, because then I..."
[19:27:57] <Helenah> Yeah that sounds terrible inconsistant.
[19:28:04] *** Joins: trashbird (~trashbird@user/trashbird)
[19:28:10] <Helenah> and can understand why that may create confusion.
[19:28:21] <Luke> Packages with `console_scripts` entry points will have those installed in a directory that the interpreter (hopes) is on PATH. Is there a way to get the path of this directory from the currently executing interpreter? (ie when running in a venv, "venv/bin/")?
[19:28:36] <aniketgm> Helenah: you pretty much have letters/Caps, numbers and specials there. shouldn't be an issue. maybe you need to revisit the criteria and check what extra is required.
[19:28:59] <Helenah> aniketgm: Correct and agreed it shouldn't be an issue. :)
[19:29:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:29:58] <Helenah> It's the same RegEx used throughout the entirety of my program, it's used for accepting passwords at login, used for manually adding passwords, used for generating passwords.
[19:30:07] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[19:30:27] <Helenah> But when it comes to manually adding passwords I probably haven't tested the entire criteria for example I've only tested the special character !
[19:30:50] <aniketgm> maybe try changing the {12,32} to a bigger digit one. {16,64} maybe
[19:31:07] *** Joins: grooverman (~grooverma@177.95.12.14)
[19:31:13] <Helenah> aniketgm: Why would I need to do that?
[19:31:27] *** Joins: goldfish (~goldfish@user/goldfish)
[19:31:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:31:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:32:09] <Helenah> If I manually add a password it works.
[19:32:15] <aniketgm> if that's what the criteria demands. more characters.
[19:32:31] <aniketgm> Oh you mentioned it worked previously. my bad.
[19:32:32] <Helenah> It demands 16 to 32 chars
[19:32:40] <Helenah> Yes
[19:32:48] <Helenah> No worries. :)
[19:32:56] <bjs> Luke: `python3 -m sysconfig` and look for the "scripts" key
[19:33:16] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[19:33:19] <bjs> Luke: tools like pip "should" put the scripts in that location, but there's nothing actually enforcing it :P
[19:33:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:33:38] <Luke> oooh
[19:33:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:33:41] <aniketgm> Helenah: *It demands 16 to 32 chars*. Well there it is.
[19:34:07] <Helenah> aniketgm: I'm confused, how is that the problem? I thought SSH could take those lengths?
[19:34:09] <Luke> I'll check that out after Star Trek
[19:34:13] <Luke> , thanks
[19:34:19] <aniketgm> Do you understand the regex ? Or is it a copy paste. If I may ask ?
[19:34:27] <Helenah> I understand it.
[19:34:28] <arkanoid> Yhg1s: well, at the end I succeeded in running numpy with wheel just unzipped
[19:34:55] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[19:34:57] <Helenah> Just didn't think I had to explain the in's and out's of each part of it.
[19:35:27] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Ping timeout: 256 seconds)
[19:35:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:35:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:35:41] <aniketgm> if it demands 16 chars {12,32} may sometimes create 12 chars passwords. I don't think  SSH add more.
[19:36:40] <Helenah> I'm confused by why it would demand a 16 char password?
[19:37:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:37:36] <aniketgm> well now, that's more of SSH channel question.
[19:37:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:37:41] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[19:37:56] *** Joins: lacrymology (~lacrymolo@181.167.210.254)
[19:39:14] <SnoopJ> possibly it's adding 4 characters of salt? Or there's just password policy silliness afoot.
[19:39:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:39:38] <Helenah> aniketgm: Any advice on which to join? There isn't #asyncssh but there is #asyncio with only like 5 people in there.
[19:39:40] * SnoopJ strongly suspects the latter, considering
[19:39:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:40:19] <Helenah> SnoopJ: No it uses match() to check if a password is 12-32 chars long.
[19:40:28] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[19:40:41] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:40:42] <MacGyver> Oh god this is terrible.
[19:40:44] <SnoopJ> Helenah, #openssh has 138 users and might be able to answer questions about the protocol. I don't know if your question qualifies, though, it sounds more like "why is this particular server doing this particular thing?"
[19:40:59] *** Joins: d00gy (~d00gy@user/d00gy)
[19:41:00] <MacGyver> The example code has short-circuiting password comparison.
[19:41:10] * MacGyver backs away slowly
[19:41:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:41:40] <Luke> MacQyver: o-oh no
[19:41:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:41:53] *** Joins: xardas (~xardas@149.233.51.127)
[19:42:05] *** Quits: ideopathic (~ideopathi@2600:1702:8b0:a500:a1d0:7faa:a53f:44e2) (Ping timeout: 250 seconds)
[19:42:14] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[19:42:47] *** Joins: bim9262 (~bim9262@user/bim9262)
[19:43:29] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[19:43:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:43:38] *** Joins: sgn (~sgn@user/sgn)
[19:43:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:44:36] <sudomann> Can I place a .py somewhere to make it immediately importable?
[19:45:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:45:45] <SnoopJ> sudomann, sure, anywhere in the search path. This is not going to be consistent between interpreter installations, though.
[19:45:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:45:51] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[19:47:31] <SnoopJ> search paths*
[19:47:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:47:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:48:56] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[19:48:59] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[19:49:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:49:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:49:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:50:33] <akk> geojson
[19:50:47] <akk> (sorry, window focus fail)
[19:51:05] *** Joins: amanjhalmat12 (~Guest75@212.237.123.164)
[19:51:16] *** Quits: jay-m126 (~jay-m@154.72.167.140) (Ping timeout: 264 seconds)
[19:51:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:51:39] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:51:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:51:52] *** Quits: jay-m126_ (~jay-m@154.72.167.140) (Ping timeout: 264 seconds)
[19:53:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:53:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[19:54:00] *** Joins: RozhyarMM (~Guest4@130.193.220.11)
[19:54:28] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[19:54:47] *** Joins: SuperLag (~akulbe@user/superlag)
[19:54:53] <graingert[m]> feels like argparse should have an argparse.RegExp shortcut
[19:54:55] *** Joins: charlie_sando (~q@2603-8080-2901-f106-b43a-2850-18e0-07b7.res6.spectrum.com)
[19:54:58] <p-i-_> RozhyarMM: amanjhalmat12: 👋
[19:55:02] *** Quits: whaley (~whaley@2603-6080-a301-33d1-3d87-1389-bc03-8f50.res6.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[19:55:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:55:51] *** Quits: y1n (~y1n@91.141.74.197.wireless.dyn.drei.com) (Remote host closed the connection)
[19:55:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:56:48] *** Joins: dohtem (uid524096@user/dohtem)
[19:57:21] *** Joins: MikZyth (~MikZyth@host-64-152-66-217.spbmts.ru)
[19:57:23] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 252 seconds)
[19:57:38] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[19:57:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:57:47] *** Joins: jay-m126 (~jay-m@129.0.76.218)
[19:57:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:58:07] *** Quits: RiFo (~RiFo@user/rifo) (Ping timeout: 256 seconds)
[19:58:10] *** Joins: bitplane (~bitplane@141.138.129.46)
[19:58:20] *** Joins: jay-m126_ (~jay-m@129.0.76.218)
[19:58:22] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[19:58:29] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 252 seconds)
[19:58:40] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[19:59:00] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[19:59:36] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[19:59:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:59:52] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[20:00:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:00:17] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:00:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:01:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:01:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:01:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:02:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:02:13] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::a2fc) (Remote host closed the connection)
[20:02:33] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::749a)
[20:03:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:03:47] *** Quits: MikZyth (~MikZyth@host-64-152-66-217.spbmts.ru) (Quit: WeeChat 3.3)
[20:03:56] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:04:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:04:05] *** Joins: sgn (~sgn@user/sgn)
[20:04:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:04:21] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 256 seconds)
[20:04:32] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:04:46] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:05:02] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[20:05:04] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:05:19] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[20:05:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:05:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:06:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:07:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:07:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:07:50] *** Quits: gitly (~gitly@148.252.133.95) (Ping timeout: 252 seconds)
[20:07:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:08:00] *** Quits: bandit_za (~bandit@102-65-138-35.dsl.web.africa) (Ping timeout: 265 seconds)
[20:08:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:08:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:08:23] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[20:08:29] <SnoopJ> I'm generating exception classes for a module whose name I don't know ahead of time (SWIG bindings), can I improve on this? https://bpa.st/UQJA
[20:08:37] *** Joins: tobybl_ (~tobybl@213.31.134.21)
[20:08:57] *** Joins: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net)
[20:09:06] *** Joins: luigibu (~luigi@80.30.201.209)
[20:09:14] <SnoopJ> the idea is that users end up using FooException, FooError directly (they know what they imported), other name-unaware code uses _MODULE_*
[20:09:25] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:09:28] *** Quits: RozhyarMM (~Guest4@130.193.220.11) (Ping timeout: 256 seconds)
[20:09:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:09:55] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:09:56] *** Quits: ham5urg__ (~ham5urg@2a04:4540:6807:5d00:ade:2914:ef5e:152d) (Ping timeout: 265 seconds)
[20:10:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:11:03] *** Joins: Siecje (~Siecje@45.72.239.10)
[20:11:09] *** Quits: tobybl (~tobybl@213.31.134.21) (Ping timeout: 256 seconds)
[20:11:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:12:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:12:15] <Siecje> After I install a PyPI package it is not installed. The package is djangorestframework-api-key, what could cause this?
[20:12:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:12:57] <SnoopJ> Siecje, you might be installing it in a different interpreter than the one you're trying to import it from
[20:13:03] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12)
[20:13:11] <Siecje> SnoopJ: nope
[20:13:18] <SnoopJ> Siecje, are you using `pip` or `pip3` ?
[20:13:26] <Siecje> SnoopJ: venv/bin/python -m pip
[20:13:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:13:38] <SnoopJ> Siecje, well, it's not that, then.
[20:13:40] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[20:13:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:14:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:14:24] <grym> Siecje: what does venv/bin/python -m pip list show
[20:15:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:16:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:16:24] <powftw> Is there an issue if I build something which will crawl a webpage's source code? Is there any problem for requesting a page with requests module?
[20:16:34] <powftw> Will I get ban?
[20:16:36] <SnoopJ> hmm, passing in the globals lets me write the helper I wanted to use that sets the user-facing name (avoiding the need to bind the name): https://bpa.st/2LVQ
[20:16:46] <phantomotap> powftw: depends on the website
[20:16:54] <phantomotap> and their coc
[20:17:08] <grym> powftw: scraping may or may not get your IP blocked, depending on ToS and rate and a few other things
[20:17:29] <powftw> Is that called scraping?
[20:17:38] <grym> broadly speaking it's mostly not _illegal_, but if you thrash someone's server it's at least rude
[20:17:38] <phantomotap> yep
[20:17:49] <SnoopJ> scraping is the process of accessing sites in an automated way to "scrape" data off of them
[20:17:53] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[20:18:33] *** Joins: gitly (~gitly@148.252.128.43)
[20:18:45] <grym> powftw: requests is a fine way to do this until such time as the data you want is generated dynamically when the page is rendered with javascript; requests can't do that
[20:19:05] <grym> so you'll need a tool like scrapy or selenium, which can
[20:19:28] <aniketgm> SnoopJ: that looks improved enough.
[20:19:32] <grym> selenium quite literally runs a headless web browser for you that you can programmatically control
[20:19:41] <powftw> I was thinking to make a public one.  It's not worth the effort. The second day, my ip may get banned
[20:19:43] <powftw> Or spam
[20:20:06] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:20:57] <Siecje> SnoopJ: grym it seems the newest version of setuptools fixes it.
[20:21:01] <akk> powftw: If you only fetch the page occasionally, like a few times a day, you probably won't get banned (depending on the site, of course).
[20:22:08] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[20:22:39] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[20:23:04] *** Quits: gitly (~gitly@148.252.128.43) (Ping timeout: 264 seconds)
[20:23:55] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[20:24:12] *** Quits: bitplane (~bitplane@141.138.129.46) (Ping timeout: 256 seconds)
[20:24:36] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[20:24:49] *** Joins: Pixi_ (~Pixi@user/pixi)
[20:24:51] *** Joins: gitly (~gitly@185.69.145.201)
[20:25:01] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[20:25:27] <blackleitus> I am trying to build a criminal investigative analysis platform for an event , but I would like to know what stack tech can I use in order to manage a large-scale data information in order to perform an analysis and profiling ?  https://dpaste.org/ceQE
[20:25:43] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:27:07] <mawk> a database
[20:27:12] <mawk> anyone you like
[20:27:22] <mawk> depending on how structured and related the information is you choose SQL or not SQL
[20:27:22] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:4ce9:4994:46d4:5d53)
[20:27:28] <mawk> you can read online the latest trends if you want
[20:27:38] *** dcaro is now known as dcaro_away
[20:27:41] <mawk> almost all style of database will provide a large scale infrastructure if you set it up right
[20:27:44] <mawk> or if you pay the right persons
[20:27:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:27:51] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 245 seconds)
[20:28:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:28:23] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[20:28:43] *** Quits: sudomann_ (~sudomann@c-71-60-39-232.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[20:30:00] <octav1a> is there a library / table that can *approximately* tell me which country / region  am email address belongs to? For example it's mostly based on the last part of the suffix but there are also some that end with .edu where you would need to look back at the second to last part.
[20:30:12] *** Joins: fikran (~fikran@user/fikran)
[20:30:32] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[20:30:33] <MacGyver> The whois database.
[20:32:08] *** Joins: bloody (~bloody@user/bloody)
[20:33:05] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[20:33:08] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 260 seconds)
[20:33:08] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[20:34:47] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:35:49] <arkanoid> If I try to compile cpython with --enable-shared --enable-optimizations it fails. if I use just --enable-shared it succeeds
[20:35:58] <SnoopJ> arkanoid, fails how?
[20:36:09] <arkanoid> also it succeeds if I use only --enable-optimizations, but I need shared lib
[20:36:28] <blackleitus> +makw, the information is structured and unstructured consumed from ETL in order to process and extract info
[20:36:28] <arkanoid> Parser/tokenizer.c: In function ‘PyTokenizer_FindEncodingFilename’
[20:36:37] <arkanoid> Parser/tokenizer.c:1821:1: error: number of counters in profile data for function ‘PyTokenizer_FindEncodingFilename’ does not match its profile data (counter ‘arcs’, expected 22 and have 21)
[20:36:57] <arkanoid> I'm compiling the head of branch 3.8
[20:37:20] *** Joins: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51)
[20:37:30] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:37:33] <SnoopJ> arkanoid, it's usually a good idea to share complete error reports at https://bpa.st/
[20:38:17] <arkanoid> let me try checking out tag 3.8.12 instead
[20:38:17] *** Quits: tobybl_ (~tobybl@213.31.134.21) (Remote host closed the connection)
[20:38:28] *** Joins: brainoff (~brainoff@77.222.109.84)
[20:38:54] <SnoopJ> not sure about the error itself, it looks like it has some expectation that isn't quite right; stale cache of some sort?
[20:39:05] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[20:39:24] *** Joins: arinov (~arinov@178.240.181.140)
[20:40:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[20:40:03] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:40:13] *** Joins: vladoski (~vladoski@2001:8a0:7ae1:4400:a24e:5a32:53ae:c7d2)
[20:40:13] *** Quits: nichlas (uid374954@id-374954.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:40:28] *** Joins: nomic (~nomic@185.217.117.132)
[20:40:56] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[20:41:17] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[20:41:23] <arkanoid> SnoopJ: I'm running make clean before configure and make
[20:42:16] *** Quits: lacrymology (~lacrymolo@181.167.210.254) (Ping timeout: 264 seconds)
[20:43:14] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::749a) (Remote host closed the connection)
[20:43:33] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::545f)
[20:43:44] *** Joins: jmd (~user@de.cellform.com)
[20:43:46] *** Joins: darksun (~darksun@user/darksun)
[20:44:02] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[20:44:35] *** Quits: jay-m126_ (~jay-m@129.0.76.218) (Ping timeout: 256 seconds)
[20:44:41] *** Quits: jay-m126 (~jay-m@129.0.76.218) (Ping timeout: 252 seconds)
[20:44:44] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:46:12] *** Quits: szymon (~ugh@37.120.211.213) (Read error: Connection reset by peer)
[20:46:44] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::545f) (Remote host closed the connection)
[20:46:53] *** Quits: vladoski (~vladoski@2001:8a0:7ae1:4400:a24e:5a32:53ae:c7d2) (Ping timeout: 252 seconds)
[20:47:29] *** Joins: zebrag (~chris@user/zebrag)
[20:47:51] *** Joins: nicolas17 (~nicolas@KDE/nalvarez)
[20:48:49] <SnoopJ> arkanoid, looks like maybe `make clean` doesn't actually clean up everything from PGO: https://bugs.python.org/issue34820
[20:49:03] <SnoopJ> I would try removing the *.gcda files mentioned in that issue
[20:49:48] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Quit: Leaving)
[20:51:07] *** Joins: bandit_za (~bandit@164.160.119.212)
[20:51:17] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[20:52:26] <arkanoid> SnoopJ: correct. Manually deleting all *.gcda files restored compilation. Thanks.
[20:52:28] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[20:52:31] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::545f)
[20:52:43] <arkanoid> this means that make clean wants a PR
[20:53:01] <SnoopJ> probably not the clean target, looks like the `profile-removal` target is the one that should be updated
[20:53:04] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f)
[20:55:37] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[20:57:36] <arkanoid> btw loading just compiled libpython3.8.so and setting path to ["manual_unzipped_wheels", "cpython-src/Lib", "cpython-src/build/lib.linux-x86_64-3.8"] I succeed in running numpy and pandas from C, where numpy and pandas are just manually unzipped zips in "manual_unzipped_wheels" folder
[21:00:12] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:01:53] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:02:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:02:37] *** Quits: BSaboia (~bsaboia@177.37.198.59) (Quit: This computer has gone to sleep)
[21:02:39] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[21:03:58] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[21:04:25] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[21:04:25] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[21:04:52] *** Joins: unyu (~pyon@user/pyon)
[21:04:54] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[21:07:15] *** Joins: laptopjazz (~quassel@2603-6010-9105-4982-bc9b-d576-6546-f846.res6.spectrum.com)
[21:08:40] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[21:10:21] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[21:11:36] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[21:13:06] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Quit: Leaving)
[21:13:19] <olspookishmagus> hello, I've cloned a .venv directory and I have trouble replicating how it should work, are there other files that might be having the FULL PATH inside that I need to correct?
[21:13:22] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[21:13:41] <grym> olspookishmagus: could you say more about "cloned"
[21:13:54] <SnoopJ> arkanoid, oh, hrm, the profile-clean target *should* remove .gcda files, as I look at it some more. `*.gc??` should match *.gcda, I wonder why it didn't in your case.
[21:14:06] <bjs> olspookishmagus: cloning a venv directory isn't really supposed to work, depending on the exact tool you used to generate it there may be many files inside it that have absolute paths
[21:14:14] *** Joins: delvian (~delvian@41.13.224.10)
[21:14:23] *** Joins: Klinda (~superleag@user/klinda)
[21:14:49] <bjs> for the same reason you're not really supposed to be able to move a venv either.  Thankfully they're supposed to be easy to delete and re-create wherever you need them.
[21:14:59] <olspookishmagus> ok I've recursively grepped for the previous path and have some results
[21:15:14] *** Joins: learner36 (~learner36@cpef81d0fa12c13-cmf81d0fa12c10.cpe.net.cable.rogers.com)
[21:15:26] *** Parts: learner36 (~learner36@cpef81d0fa12c13-cmf81d0fa12c10.cpe.net.cable.rogers.com) (Closing Window)
[21:15:28] <olspookishmagus> bjs: I'm tidying up some stuff, for example not every project/app has it's own requirements.txt and I need to fix that too
[21:15:35] <olspookishmagus> thank you both grym and bjs
[21:15:44] <bjs> i would be wary of doing some fairly naive hackery on paths hoping it'll all work,  because who knows what other weird things venv is doing inside
[21:15:48] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[21:16:03] <bjs> i'd just make a brand new venv where you want the "clone" and install the same set of packages into it
[21:16:07] <grym> olspookishmagus: if 'clone' has to do with 'git clone', then it's a mistake to version control your venvs; add them to your .gitignore
[21:16:35] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[21:17:02] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[21:17:58] *** Joins: smrtz (~smrtz@user/smrtz)
[21:18:28] <smrtz> Heyo! I'm really struggling with function/class decorators, Can someone recommend a good guide post on them please?
[21:18:40] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[21:19:00] <han-solo> https://realpython.com/primer-on-python-decorators/ # is alright me thinks
[21:19:36] *** Joins: aniketgm (~Aniket@49.36.107.115)
[21:19:36] <olspookishmagus> grym: no I rsync'ed an entire directory from a user directory out of /home into /opt/somewhere and I'm trying to have it running without user-intervention
[21:19:48] <olspookishmagus> maybe I'll create a systemd service, I don't know yet
[21:19:55] *** Parts: aniketgm (~Aniket@49.36.107.115) ()
[21:20:02] <smrtz> Thanks!
[21:20:28] <SnoopJ> olspookishmagus, moving venvs to not-exactly-the-same-path is very much going against the grain of their design
[21:20:47] <smrtz> han-solo Oh, so can you not apply a decorator to a class?
[21:20:48] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[21:20:52] <SnoopJ> smrtz, you can
[21:20:52] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[21:21:01] <smrtz> Ok, I'll keep reading.
[21:21:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[21:21:16] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[21:21:22] <han-solo> https://realpython.com/primer-on-python-decorators/#decorating-classes
[21:21:24] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:21:34] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[21:21:47] <SnoopJ> smrtz, the really short version: a decorator is a callable that 'eats' an object (the thing being decorated) and binds the result to the same name. `@deco def f(): ...` is the same thing as `def f(): ...;; f = deco(f)`
[21:22:12] <smrtz> That's actually quite helpful!
[21:22:47] <grym> olspookishmagus: ok.  that's better than commiting them, but venvs are not relocatable so it won't work
[21:23:24] <grym> olspookishmagus: (but at least your commit history isn't affected )
[21:23:58] *** Joins: emf (~emf@2620:10d:c090:400::5:9a5b)
[21:24:54] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:25:15] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:25:57] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[21:26:27] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[21:26:51] *** Joins: prompt32 (~kapad@user/kapad)
[21:27:35] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 252 seconds)
[21:27:39] *** Joins: emptynine (tkk@cybertron.redlight.li)
[21:27:57] <smrtz> SnoopJ I'm trying to create a Prometheus exporter to collect and report various metrics about a device, and want to use the an exception counting decorator on an ssh session object to count all exceptions within it. Here's the example I'm looking at: https://github.com/prometheus/client_python#counter  and here's what I've got so far:
[21:27:58] <smrtz> https://bpa.st/DRTA  The documentation on that Prometheus library is pretty light, so I'm in way over my head here...
[21:28:00] <SnoopJ> arkanoid, you've gotten me interested in this make-clean problem, if you have a moment later and can still reproduce the problem, I'd appreciate being able to see the contents of your Makefile and the output of `make clean`, as well as any branch-changing or reconfiguring you're doing.
[21:28:15] *** Quits: prompt32 (~kapad@user/kapad) (Client Quit)
[21:28:35] <smrtz> SnoopJ Do you have a minute to take a quick look and point me in the right direction please?
[21:28:35] *** Parts: nicolas17 (~nicolas@KDE/nalvarez) (Konversation terminated!)
[21:28:48] *** Joins: prompt32 (~kapad@user/kapad)
[21:28:50] <arkanoid> SnoopJ: glad to help. Let me try to replicate it now. Hopefully it's just a make clean + configure + make away
[21:29:04] <SnoopJ> smrtz, I had a look, but I don't have an idea what your question is
[21:29:16] *** Quits: prompt32 (~kapad@user/kapad) (Remote host closed the connection)
[21:29:46] *** Joins: prompt32 (~kapad@user/kapad)
[21:29:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:29:54] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[21:29:58] <olspookishmagus> once more, thank you SnoopJ and grym - I'm working on it
[21:30:09] *** Joins: y1n (~y1n@91.141.64.103.wireless.dyn.drei.com)
[21:30:16] <smrtz> Line 116 is throwing an unnamed reference error at "sessionCounter" The example in the library README shows using that decorator to automatically count and report exceptions on a function, but I'd like to use it to count all exceptions that happen within that sshSession object.
[21:30:31] <SnoopJ> arkanoid, well, *hopefully* it's not broken, but if it is, I'd like to note on the issue that the glob should work, and maybe have a guess as to why it *isn't*
[21:30:57] <smrtz> Basically, is it possible to use that existing decorator on a class, or how can I determine if it's written to only accept a function?
[21:30:58] <arkanoid> I've just done "make clean" on tag 3.8.12 and *.gcda got removed, so problem might be limited to 3.8 HEAD
[21:31:59] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[21:32:14] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::545f) (Remote host closed the connection)
[21:32:33] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::b73c)
[21:32:52] *** Quits: thevishy (~Nishant@2405:201:f005:c007:f92b:9823:fedf:deab) (Quit: Leaving)
[21:33:32] <SnoopJ> smrtz, ahh. No, that decorator isn't written to be aware of classes in the way you want. You could maybe do some introspection magic to apply the decorator to all functions inside the class and make *that* a new decorator, though.
[21:34:05] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[21:34:14] *** Quits: cul8r (~cul8r@2601:8c3:4000:b0d0::b73c) (Read error: Connection reset by peer)
[21:34:28] <smrtz> Ahh ok. If you were writing something like this would you try doing it that way, or simply pass the counter into the sshSession object and increment it yourself each time you except an exception?
[21:34:44] *** Parts: prompt32 (~kapad@user/kapad) (Leaving)
[21:34:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:34:53] *** Joins: cul8r (~cul8r@2601:8c3:4000:b0d0::b73c)
[21:35:38] *** Quits: davor (~davor@user/davor) (Ping timeout: 256 seconds)
[21:36:32] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-ddb3-cd8f-aeab-5219.res6.spectrum.com)
[21:36:44] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[21:36:47] <dale> The docs are a little unclear to me, but I think typing.io.IO is going away, typing.IO is here to stay.  Is that right?
[21:37:12] *** Joins: davor (~davor@user/davor)
[21:37:34] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[21:37:41] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[21:38:06] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:38:08] <bjs> dale: yes, typing.io is deprecated
[21:38:18] <dale> bjs: But typing.IO is not?
[21:38:40] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[21:38:48] <bjs> dale: correct,  you should use typing.{IO,BinaryIO} not typing.io.BinaryIO for example
[21:39:09] <dale> bjs: Cool, that's what I thought, thank you.
[21:39:22] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[21:39:43] *** Joins: djapo (~archangel@user/djapo)
[21:39:47] *** Joins: theelous3 (~theelous3@109.255.56.189)
[21:39:58] <Sheilong> I was given an excel spreadsheet where the nan values where marked using the symbol '-'. Does panda have any method that allows to interpret that symbol as nan at the file reading time?
[21:40:58] <bjs> Sheilong: https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html has a "na_values" argument
[21:40:59] <arkanoid> SnoopJ: I have replicated it. Here's the sequence: "git clone -b 3.8 --depth 1 https://github.com/python/cpython", "./configure --enable-optimizations", "make -j12", "make clean". Then you have "find . -name "*.gcda"" all present
[21:41:01] <bjs> which may be what you want?
[21:41:24] <arkanoid> --enable-shared is not needed to replicate it
[21:43:13] <Sheilong> bjs: That was it. Thanks.
[21:43:20] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[21:43:49] <arkanoid> I am at the point where I've run "make clean". I've all the files in place, let me know if you want any of them
[21:44:23] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[21:45:13] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[21:46:08] *** Quits: theelous3 (~theelous3@109.255.56.189) (Quit: is outty)
[21:46:24] *** Joins: theelous3 (~theelous3@109.255.56.189)
[21:46:41] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (Quit: Cya)
[21:47:25] *** Joins: nyah (~nyah@94.6.71.219)
[21:49:01] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 265 seconds)
[21:49:26] <SnoopJ> smrtz, here's a little doodle I did with some ideas about how I'd write a class-aware decorator here, using the `inspect` module to look at the guts of the object passed to the decorator.
[21:49:28] <SnoopJ> https://bpa.st/NCMA
[21:49:48] <smrtz> That's super helpful, thanks so much!
[21:50:09] <SnoopJ> err, here's a paste with the output included: https://bpa.st/2ZSA
[21:50:31] <SnoopJ> hopefully what I did is clear, but if not, be sure to ask what's going on there :)
[21:51:33] *** Quits: arinov (~arinov@178.240.181.140) (Quit: WeeChat 3.3)
[21:51:52] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[21:52:01] <SnoopJ> the spelling for Baz is basically doing with introspection what I did by-hand for Foo: looking for all the functions in the class (you could use ismethod() as well, it might be more reasonable to do that) and decorating them
[21:53:03] <smrtz> SnoopJ You're a wizard. So often people ask for help and the answers are all "you shouldn't do it that way." or just "you're wrong and you should feel bad."  I'm greatly appreciative of the extra effort you've put in to help me.
[21:53:24] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[21:53:41] *** Joins: onichomp (~onichomp@2806:264:4404:80d9:ac88:f7cc:32c7:23b5)
[21:53:43] *** Joins: newpy (~newpy@2601:280:4381:1390:8d8d:7e2a:beea:18db)
[21:53:49] <Lando-SpacePimp> I'm a space pimp
[21:54:18] <NyaaTheCat> well, uh, that's interesting I guess
[21:54:47] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Remote host closed the connection)
[21:54:59] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[21:55:16] <SnoopJ> arkanoid, thanks, that works. Seems like indeed clean does not invoke profile-removal on that branch, you can `make profile-removal` (or the `clobber` target) if it happens again, and it was fixed in this PR (will add to that open issue): https://github.com/python/cpython/pull/15033
[21:55:25] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[21:55:29] *** Quits: onichomp (~onichomp@2806:264:4404:80d9:ac88:f7cc:32c7:23b5) (Read error: Connection reset by peer)
[21:56:00] <SnoopJ> smrtz, it helped that it was a fun problem, I like writing stuff with `inspect` :)
[21:56:06] *** Joins: onichomp (~onichomp@2806:264:4404:80d9:ac88:f7cc:32c7:23b5)
[21:56:33] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:56:38] <arkanoid> thanks!
[21:57:20] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[21:57:38] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[21:58:53] *** Joins: ham5urg (~ham5urg@p200300d167435800b1722dcbc21a2e59.dip0.t-ipconnect.de)
[21:59:40] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 264 seconds)
[22:00:23] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:00:33] *** Joins: sgn (~sgn@user/sgn)
[22:01:01] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[22:01:33] *** Quits: laptopjazz (~quassel@2603-6010-9105-4982-bc9b-d576-6546-f846.res6.spectrum.com) (Quit: laptopjazz)
[22:02:28] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[22:04:29] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 265 seconds)
[22:04:52] <SnoopJ> arkanoid, issue updated, thanks for the help :)
[22:05:06] *** Quits: brainoff (~brainoff@77.222.109.84) (Quit: Client closed)
[22:05:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:06:14] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[22:06:52] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[22:07:08] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[22:08:12] *** Quits: luigibu (~luigi@80.30.201.209) (Read error: Connection reset by peer)
[22:08:27] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[22:08:30] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Client Quit)
[22:08:43] *** Joins: akahs (~Shaka@user/shaka)
[22:08:48] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[22:09:08] *** Joins: Snyp (~Snyp@49.207.215.173)
[22:13:08] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:13:47] *** Joins: Vornotron (~Vornicus@2603-8000-5d07-7ef0-55e4-dd93-e3ad-3730.res6.spectrum.com)
[22:17:04] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-55e4-dd93-e3ad-3730.res6.spectrum.com) (Ping timeout: 264 seconds)
[22:17:43] *** Joins: Vonter (~Vonter@user/vonter)
[22:18:42] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[22:19:00] *** Parts: dece (~dece@dece.space) (Leaving)
[22:20:04] *** Quits: y1n (~y1n@91.141.64.103.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[22:20:51] *** Quits: Madda (~Madda@216.51.198.146.dyn.plus.net) (Remote host closed the connection)
[22:20:54] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[22:21:24] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:22:20] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[22:22:49] *** Quits: Vornotron (~Vornicus@2603-8000-5d07-7ef0-55e4-dd93-e3ad-3730.res6.spectrum.com) (Read error: Connection reset by peer)
[22:23:40] *** Joins: justache (~justache@user/justache)
[22:24:20] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:41] *** Joins: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x)
[22:25:14] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:26:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[22:26:26] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 252 seconds)
[22:27:01] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 245 seconds)
[22:27:11] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[22:27:16] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[22:28:05] *** Joins: Madda (~Madda@216.51.198.146.dyn.plus.net)
[22:28:10] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[22:31:25] *** Joins: dreamon (~dreamon@pd95039d2.dip0.t-ipconnect.de)
[22:31:41] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[22:31:42] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[22:31:42] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[22:31:45] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:31:51] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[22:32:28] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:32:32] *** Quits: rsx (~dummy@ppp-188-174-152-19.dynamic.mnet-online.de) (Quit: rsx)
[22:32:49] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[22:33:10] *** Joins: l4yer (~l4yer@2a07-a880-3101-1051-a922-bb49-135a-4393.pool6.ovpn.com)
[22:33:16] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 264 seconds)
[22:33:36] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[22:33:56] <Pi-sistance> Hi, can anyone tell me why the x axis decided to show from -10 to 100 rather than the linspace fed to it?.. https://bpa.st/XDZA
[22:34:31] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[22:35:51] <dreamon> hello. want to call a function at 0:00 day change, without programming a sleep or time loop interval.. is there a way?
[22:36:19] *** Quits: Siecje (~Siecje@45.72.239.10) (Quit: Leaving...)
[22:36:39] <grawity> some event loops have timers built-in
[22:36:52] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 264 seconds)
[22:37:18] <grym> dreamon: cron is the traditional answer to this problem, and works well
[22:37:19] <grawity> or at least I'm pretty sure I've seen even a full cron-like syntax implementation for one
[22:37:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:37:39] *** Quits: Snyp (~Snyp@49.207.215.173) (Quit: Textual IRC Client: www.textualapp.com)
[22:38:49] <Pi-sistance> so plotting pyplot.plot(x,y1,y2,y3,y4( is bugguy and I should do a seperate ply command for each y? It still seems to show on the same graph meh, just dont know why its buggy
[22:38:51] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[22:39:04] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a239:503:f14f:a0bc:9f5a:4130)
[22:39:07] <SnoopJ> Pi-sistance, it probably isn't "buggy," but it may not work the way you think it does
[22:39:30] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[22:39:33] *** Joins: fikran (~fikran@user/fikran)
[22:39:55] <Pi-sistance> ok, if it doesnt work logically, why allow me to put extra y values under the same plot command
[22:40:05] <Pi-sistance> give me anerror message isntead
[22:40:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:40:22] <dreamon> grym, cronjob I know. but its outside of my program. I want it inside. or is there module for python ?
[22:40:24] <InPhase> Pi-sistance: Type checking of arguments is not pythonic.  ;)
[22:41:02] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 240 seconds)
[22:41:03] <InPhase> Pi-sistance: There is a specific ordering prescribed in the help for plot though.
[22:41:25] <grym> dreamon: no, you'll have to poll for time then
[22:41:25] <SnoopJ> and it should work fine the way you spelled it out, but we can't see your screen or the error message on it
[22:41:27] <InPhase> Pi-sistance: I always do separate plot calls though myself.
[22:41:34] *** Quits: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:42:03] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:43:44] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800086035b9fb310f47.ipv6.abo.wanadoo.fr)
[22:43:49] *** Joins: QuaternionsRock (~Quaternio@76.191.39.82)
[22:44:09] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[22:44:38] *** Joins: tobybl (~tobybl@213.31.134.21)
[22:44:47] <Pi-sistance> yeah, theres no problem if I do that, ill just make a note so i recall I have to do it that way
[22:44:49] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:45:08] *** Quits: Haxxa (~Haxxa@202-63-76-96.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:42] <SnoopJ> you don't *have* to, but we can't tell you what's wrong without seeing the complete error report
[22:45:43] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Read error: Connection reset by peer)
[22:45:53] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[22:46:11] <SnoopJ> and matplotlib's API has a lot of sharp edges where a slight change in spelling can give *very* different and hard to understand results
[22:46:35] *** Joins: mei (~mei@user/mei)
[22:47:04] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[22:47:18] *** Quits: greedom (~greedom@p200300de670bd800076ae5df8b2243b0.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:47:18] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:21] <SnoopJ> (I usually do separate plot() calls as well)
[22:48:08] <QuaternionsRock> Can someone explain why `x = list(range(3)); x[:1] = [-1]` means `x == [-1, 1, 2]` but `x = list(range(3)); x[:][:1] = [-1]` means `x == [0, 1, 2]`?
[22:48:34] *** Quits: amanjhalmat12 (~Guest75@212.237.123.164) (Quit: Client closed)
[22:48:39] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[22:48:42] <InPhase> QuaternionsRock: Because you assigned to a sliced copy in the second case.
[22:48:49] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:49:21] <QuaternionsRock> So does that mean slices of lists are actually some internal view object that cannot be subscripted again without copying?
[22:50:04] <SnoopJ> QuaternionsRock, slicing a list always creates a new list
[22:50:07] <bluss> the left hand side of x[:1] = [-1]  is not an object at all
[22:50:30] <QuaternionsRock> A slice of a list doesn't copy the list or else assigning to a slice wouldn't mutate the original list, or am I mistaken?
[22:50:38] <bluss> this is just syntax for a __setitem__ call
[22:50:48] <QuaternionsRock> Ahhhh
[22:50:56] <QuaternionsRock> so __getitem__ is what's making the copy
[22:50:57] <SnoopJ> QuaternionsRock, you are mistaken; as bluss says, assigning to an index operation is special syntax
[22:51:03] <QuaternionsRock> Makes sense
[22:51:09] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:713a:c3a0:ebd0:8790)
[22:51:13] <SnoopJ> QuaternionsRock, __getitem__ isn't called for `x[idx] = val`
[22:51:38] <QuaternionsRock> But it is for `x[:][:1] = val`, yes?
[22:51:40] <bluss> QuaternionsRock: well, you've pointed out a way in which the abstraction is kind of cracking :)
[22:51:46] <Pi-sistance> SnoopJ: there was no error it just plotted from -10 to 100 on the x-axis even though the x values were 100 points between -10 and 10
[22:51:55] <InPhase> To quote the zen of Python, there should be one - and preferably only one - way to do it without shooting yourself in the foot.
[22:52:38] <Pi-sistance> and the second function used -10 to 100 and the first function used -10 from 10 (of the x axis co-ords)
[22:52:47] <QuaternionsRock> So I suppose that means `list.copy()` is just an alias for `list[:]`
[22:52:49] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[22:53:03] <SnoopJ> the latter is a shorthand, yea
[22:53:16] <QuaternionsRock> Oh lol it literally says that in the docs
[22:53:19] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:53:29] <SnoopJ> QuaternionsRock, and yes, it'd be called for that sample, producing a new object which will be thrown away
[22:54:02] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[22:54:21] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[22:55:20] <QuaternionsRock> is it generally wise to assign to `list[:]` when you're replacing a list variable, performance-wise?
[22:55:44] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[22:56:40] <SnoopJ> I ususally prefer to answer "does X perform better?" questions by measurement. I would think re-assigning the contents could be substantially more expensive if the old list is very large compared to the new one
[22:56:51] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[22:57:12] <SnoopJ> but there might be an optimization branch for it, I don't know (hence measurement)
[22:57:52] *** Joins: neachdainn (~nate@50.224.226.50)
[22:58:13] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:58:32] <InPhase> QuaternionsRock: x[:] assignment is identical in outcome to x assignment except for wasted time recognizing that it's identical.  So x assignment is faster.
[22:58:39] *** byzafk is now known as byzandula
[22:58:51] <neachdainn> Is there a good way to get the source code of a Python function using the C API or is my best bet to import/use the `inspect` module and cross the  FFI boundary?
[22:59:01] <QuaternionsRock> Oh I'm thinking like: `x[:] = [foo(i) for i in x]`
[22:59:03] <QuaternionsRock> So same size
[22:59:23] <QuaternionsRock> versus `x = [foo(i) for i in x]`
[22:59:32] <SnoopJ> QuaternionsRock, the first way will be two scans
[22:59:36] <QuaternionsRock> InPhase is it possible you could explain that another way?
[22:59:45] <SnoopJ> one to build on the RHS, one to do the assignment
[23:00:05] <QuaternionsRock> Hmmm
[23:00:17] <bluss> QuaternionsRock: I've never looked at python performance in context of such funcitons, not sure when it can be important
[23:00:18] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[23:00:22] <QuaternionsRock> It sucks that for loops aren't optimized compared to list comprehensions
[23:00:27] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[23:00:38] <SnoopJ> neachdainn, probably just call inspect.getsource() via the C-API, yea.
[23:00:40] <InPhase> QuaternionsRock: x = [1,2,3]; x[:] = [5,6];  # This has no syntax error.  It's just reassigning x.  But CPython is wasting some time handling the x[:] first so it comes out slower.
[23:00:56] <SnoopJ> QuaternionsRock, I don't understand what that means, but I don't think it has anything to do with what we've just been talking about.
[23:00:58] <bluss> QuaternionsRock: being able to reuse one list allocation sounds neat, but maybe the objects in the list outweigh it anyway, so you see no difference? A list is usually pretty simple
[23:01:13] <SnoopJ> yea, it's "just" a dynamic array of pointers
[23:01:14] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:01:20] <SnoopJ> (in CPython)
[23:01:53] *** Quits: Linux77 (~7Linux7@186.233.182.193) (Ping timeout: 268 seconds)
[23:02:19] <InPhase> QuaternionsRock: Where you want to do x[:] = [5,6]; is if you want id(x) to remain identical, so that previous references to it match the reassignment.  That is the only utility for it.  Don't do it for performance.
[23:02:38] <SnoopJ> It certainly harms legibility
[23:02:45] <QuaternionsRock> SnoopJ It feels more right to modify lists in this manner like `for i, elt in enumerate(x): x[I] = foo(elt)`, but that's a standard for loop and therefore kind of sucky compared to list comprehensions'
[23:03:00] <SnoopJ> QuaternionsRock, why do you say that?
[23:03:05] <neachdainn> SnoopJ: Good to know. Thanks!
[23:03:23] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-115.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:03:33] <QuaternionsRock> List comprehensions are typically optimized (if the stuff inside it can be), isn't it?
[23:03:40] *** southey is now known as foxtrot
[23:03:48] *** Joins: raxor2k (~raxor2k@46.230.133.123)
[23:03:49] <QuaternionsRock> I always thought list comprehensions were generally much faster than for loops
[23:03:51] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:2446:13de:20ec:764f) (Quit: smeeagle)
[23:04:04] <QuaternionsRock> For building lists at least
[23:04:05] <InPhase> QuaternionsRock: The pythonic way is to create new lists when you're doing transformations.  Access by index when you are making small updates to existing data.
[23:04:10] *** Quits: Elzington (~Elzington@static-68-235-44-76.cust.tzulo.com) (Quit: Leaving)
[23:04:13] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[23:04:25] <QuaternionsRock> Oh maybe I'm thinking about using a for loop with `append` in each iteration
[23:04:31] <QuaternionsRock> that's definitely what I'm thinking of
[23:04:32] <QuaternionsRock> my bad
[23:04:44] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:04:58] <InPhase> QuaternionsRock: If performance is in your interest, list comprehensions are generally faster than external for loops for data creation.
[23:05:25] <InPhase> QuaternionsRock: If performance is seriously in your interest, use numpy.  :)
[23:06:12] <InPhase> For math on array data, numpy tends to be 50 to 100 times faster.  Nothing else you do in Python is going to compete with this.
[23:06:43] <SnoopJ> QuaternionsRock, the comprehension emits a LIST_APPEND instruction anyway. The things the compiler produces are quite similar: https://bpa.st/BMJA
[23:07:00] <SnoopJ> in other words, there may be less optimization than you are thinking
[23:07:21] *** Joins: en7ropy (~en7ropy@c-73-60-111-180.hsd1.ma.comcast.net)
[23:07:23] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[23:07:27] <QuaternionsRock> Oh, never mind then
[23:07:41] *** Quits: l4yer (~l4yer@2a07-a880-3101-1051-a922-bb49-135a-4393.pool6.ovpn.com) (Ping timeout: 252 seconds)
[23:07:54] <SnoopJ> LIST_APPEND vs STORE_SUBSCR
[23:08:10] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[23:08:17] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:08:26] <QuaternionsRock> pyjion here I come I guess hehe
[23:08:30] <SnoopJ> the difference between *_NAME and *_FAST is interesting-ish, but yea, pretty much the same thing
[23:08:31] <QuaternionsRock> Can't use numpy unfortunately
[23:08:46] <SnoopJ> if you're optimizing anything, the first thing you want is a profile :)
[23:09:00] <mawk> are you certain that quaternions rock QuaternionsRock? what about octonions?
[23:10:26] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Read error: Connection reset by peer)
[23:10:41] <QuaternionsRock> Non-associative algebra doodoo >:(
[23:10:47] *** Quits: raxor2k (~raxor2k@46.230.133.123) (Ping timeout: 256 seconds)
[23:10:58] <QuaternionsRock> In reality I came up with my username while working in unity haha
[23:11:03] <QuaternionsRock> No use for octonions there
[23:11:21] *** Quits: Andrynet (~Andrynet@190.152.206.33) (Ping timeout: 256 seconds)
[23:12:17] <QuaternionsRock> That said, I'd still put money on the standard model being representative of octonions and some other pure mathematical concepts
[23:13:18] *** Joins: Andrynet (~Andrynet@190.152.206.33)
[23:13:35] <QuaternionsRock> The non-associativity of octonions lines up with CP violation surprisingly well
[23:13:41] <QuaternionsRock> but that's not really python anymore haha
[23:14:15] <SnoopJ> QuaternionsRock, it's explicitly a composition of SU(N) and SO(N) symmetries, and yes, that's #python-offtopic territory :)
[23:14:37] <SnoopJ> err, I guess it's all SU
[23:14:41] * SnoopJ needs a coffee and a break
[23:15:54] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[23:16:18] *** Joins: sunarch (uid526836@user/sunarch)
[23:17:01] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 256 seconds)
[23:17:37] *** Joins: djapo (~archangel@user/djapo)
[23:20:40] *** Quits: NyaaTheCat (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[23:20:42] *** Joins: l4yer (~l4yer@2a07-a880-3101-1051-a922-bb49-135a-4393.pool6.ovpn.com)
[23:21:08] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12) (Quit: Client closed)
[23:21:16] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[23:21:21] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:edef:5ef4:644d:7d12)
[23:22:00] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[23:23:59] *** Joins: raxor2k (~raxor2k@fwa5cd2-48.bb.online.no)
[23:24:10] <raxor2k> https://bpa.st/UEPQ   <---- those to functions here: 'process_rep_data_to_db', and 'predict_wight_with_AI' cause my socketserver /other loops to hang. Even if they run themselves or together. I need a way to run them without the server hanging. Should i use "loop.run_in_executor()" or "backGroundTasks" from fastApi?
[23:26:09] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:28:26] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[23:29:21] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Remote host closed the connection)
[23:29:40] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[23:30:14] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[23:30:20] *** Joins: parv (~quass@user/parv)
[23:31:00] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 265 seconds)
[23:31:04] *** Quits: Lartza (lartza@user/lartza) (Quit: Quit)
[23:31:07] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (Remote host closed the connection)
[23:31:07] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Read error: Connection reset by peer)
[23:31:09] *** Quits: Titore (~Titore@user/titore) (Quit: Bye!)
[23:31:09] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[23:31:16] *** Joins: Lartza (lartza@user/lartza)
[23:31:19] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:31:30] *** Quits: holgersson (~quassel@user/holgersson) (Remote host closed the connection)
[23:31:32] *** Quits: LostInWeb (~quassel@narvi.bifroest.eu) (Remote host closed the connection)
[23:32:12] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[23:32:21] <smrtz> SnoopJ I'm making some good progress with your example, but I'm having some issues adding it to my exporter. The Prometheus Counter.count_exceptions def returns a prometheus_client.context_manager.ExceptionCounter ojbect (https://github.com/prometheus/client_python/blob/master/prometheus_client/metrics.py#L284) which itself returns a decorate
[23:32:22] <smrtz> object (https://github.com/prometheus/client_python/blob/master/prometheus_client/context_managers.py#L6)  I just need to make your example return that ExceptionCounter object instead of the _wrapper one, since theirs will handle wrapping functions on their own, right?
[23:32:45] *** Joins: holgersson (~quassel@user/holgersson)
[23:32:46] *** Joins: LostInWeb (~quassel@narvi.bifroest.eu)
[23:32:56] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: cotsuka (~cotsuka@user/cotsuka) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: mindlesstux[m] (~mindlesst@user/mindlesstux) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: tazle (~tazle@kapsi.fi) (Quit: Lost terminal)
[23:33:04] <smrtz> Maybe the real solution is for me to submit a PR to that library to make that decorator class aware instead of trying to overwrite it locally?
[23:33:05] *** Quits: nanonyme (nanonyme@kapsi.fi) (Quit: WeeChat 3.0.1)
[23:33:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: vodkra (~vodkra@user/vodkra) (Ping timeout: 265 seconds)
[23:33:29] *** Joins: Auron (~Auron956@user/auron)
[23:33:49] *** Joins: vodkra (~vodkra@user/vodkra)
[23:33:50] *** Joins: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297)
[23:33:54] *** Quits: Darkfoe1 (~chuck@drunk.serverfail.party) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 265 seconds)
[23:34:20] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[23:34:40] *** Joins: Titore (~Titore@user/titore)
[23:34:45] *** Joins: Darkfoe1 (~chuck@drunk.serverfail.party)
[23:35:17] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:35:41] *** Joins: legola (~legola@46.235.101.65)
[23:36:17] *** Quits: ham5urg (~ham5urg@p200300d167435800b1722dcbc21a2e59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:37:05] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[23:39:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:39:41] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[23:40:28] *** Joins: Betal (~Betal@user/betal)
[23:40:38] *** Quits: raxor2k (~raxor2k@fwa5cd2-48.bb.online.no) (Remote host closed the connection)
[23:41:10] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[23:43:25] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[23:43:27] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:43:56] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[23:44:35] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[23:45:02] *** Joins: jinsun_ (~jinsun@user/jinsun)
[23:45:10] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[23:45:31] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[23:45:58] *** Joins: ali1234 (~al@user/ali1234)
[23:48:27] *** Joins: mindlesstux[m] (~mindlesst@user/mindlesstux)
[23:48:53] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:49:38] <SnoopJ> smrtz, I probably wouldn't "overwrite" it, I would either write a helper like the one in my sample or write a subclass that calls the base class's decorator when needed.
[23:49:47] <SnoopJ> But it does seem like something the upstream might be interested in, yea
[23:50:02] *** Quits: QuaternionsRock (~Quaternio@76.191.39.82) (Quit: Client closed)
[23:50:37] <smrtz> A subclass seems a bit "cleaner", so I'll take a look at that as well as updating their implementation. Thanks for the help!
[23:51:35] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 256 seconds)
[23:52:05] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:52:47] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[23:54:18] *** Joins: jsmock (~joern@xdsl-78-34-162-163.nc.de)
[23:54:48] <SnoopJ> smrtz, if you send it to them as a PR, I think you'd change ExceptionCounter.__call__ to distinguish between classes and general callables, *if* it makes sense to use the same counter for the entire class.
[23:55:29] *** Joins: teut (~teut@182.68.254.204)
[23:55:39] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[23:55:54] <SnoopJ> I'm not really familiar with Prometheus, but if it'd more idiomatic to structure the recording for an entire class (e.g. per-function counting inside the class all under a single class 'namespace') then I guess you'd have to do the work in Counter.count_exceptions and return a helper that distinguishes instead
[23:55:55] *** Quits: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[23:56:43] <SnoopJ> the analogous function in my sample is count_excs() although as I look back at it, my count_exceptions() wasn't really doing the same thing heh
[23:57:15] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[23:57:27] *** Quits: rito_ (~rito_gh@45.112.243.47) (Quit: Leaving)
[23:57:28] <smrtz> Why would that be better then just making count_exceptions detect if a class was passed in and if so wrap all of its functions like your count_execs def?
[23:58:25] <SnoopJ> smrtz, count_exceptions() in Prometheus is a decorator factory: it can't know what will be passed to the decorator
[23:59:04] *** Quits: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[23:59:25] *** Joins: sudomann_ (~sudomann@c-71-60-38-87.hsd1.pa.comcast.net)
[23:59:29] <SnoopJ> i.e. `@c.count_exceptions() def func(): ...` is really two calls: one to create the decorator (the ExceptionCounter instance), and one to call it with `func` as its argument
