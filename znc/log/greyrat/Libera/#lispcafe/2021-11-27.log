[00:07:52] <shka> https://www.youtube.com/watch?v=V4HXPJtym2Q 
[00:07:52] -ixelp- SYMBOLICS GRAPHICS DIVISION DEMO REEL 1989 - YouTube
[00:09:59] <shka> it is interesting to me that symbolics even had this graphics division
[00:14:46] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[00:15:31] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[00:18:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[00:21:03] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[00:21:15] <selwyn> would be nice to find out more about how they did gollum
[00:24:33] <selwyn> https://www.youtube.com/watch?v=bcxnbfRYM-g
[00:24:34] -ixelp- The Prodigy - One Love (Official Video) - YouTube
[00:24:39] <selwyn> wonder if they did that on a symbolics machine
[00:26:04] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[00:26:23] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[00:34:06] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:34:25] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[00:48:51] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[00:50:55] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:23:11] <hayley> tfw Pascal Costanza retweeted an article where Gophers demonstrate they don't know squat about GC 
[01:24:42] * hayley uploaded an image: (118KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VqAfyKWZvUQsaFeGCxGfwqhh/stack-allocation.jpg >
[01:34:11] <hayley> Technically, this image should be of a crab since Go doesn't expose stack allocation as such, but many stupid performance claims are based on escape analysis working or not.
[01:47:05] <gilberth> Every time we say ((lambda ...) ...) escape analysis is at work. :)
[01:47:29] <hayley> https://www.cs.tufts.edu/~nr/cs257/archive/henry-baker/cons-lazy-alloc.pdf read up kids
[01:47:50] <gilberth> And every time we say LABELS or PROG.
[01:50:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[01:52:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:53:41] <hayley> "But hayley, that's stack allocation!" Yet it doesn't depend on doomed static analysis (Go), doesn't impose a stack model on the programmer (Rust), and can be treated as a compacting collector where you get to push allocation pointer back in time sometimes.
[01:55:03] <hayley> gilberth: Today I suppose I shall try to get SIMD power working.
[01:57:59] <Alfr> hayley, in other words, using a stack (for function calls) is an implementation detail and shouldn't be required by the language itself?...
[01:58:16] <hayley> Yes.
[01:58:43] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[01:58:43] *** ChanServ sets mode: +o MichaelRaskin
[01:59:04] <gilberth> Alfr: Indeed. Where does ANSI-CL demand a stack? It's an optimization.
[02:00:03] <Alfr> hayley, okay. I was simply trying to decipher your ranting above. (I don't have an opinion on that.)
[02:00:18] <hayley> Though the original remark was about allocating objects on the stack or not. You can be too optimistic and have a broken program, or be too pessimistic and have a slow program. Only with runtime statistics do you find out.
[02:00:39] <Alfr> gilberth, ask me again if and when I've memorized it.
[02:03:48] <gilberth> Alfr: Well, thing is: A stack is not mandated, it's an implementation detail. Could as well be just consed activation frames.
[02:04:14] <Alfr> hayley, yeah. I only added that to make clear, that I don't mean stack as a lifo data structure.
[02:04:51] <gilberth> Are there non-LIFO stacks? A LIFO is a stack.
[02:06:30] <hayley> https://www.youtube.com/watch?v=3GE-sfEbJ7I
[02:06:31] -ixelp- Sheep - YouTube
[02:06:32] <Alfr> gilberth, emphasis on data structure, i.e. something for programmers to use with push, pop, peek etc.
[02:09:10] <gilberth> Alfr: BTW with Scheme and the presence of CALL/CC a stack won't do anymore for activation frames.
[02:09:13] <Alfr> gilberth, hm ... can't we have an implementation using continuations instead of a stack?
[02:09:37] <Alfr> ... for CL.
[02:10:14] <hayley> Yes.
[02:10:23] <Alfr> Then we could easily modify it to support call/cc and experiment with it.
[02:11:25] <gilberth> Alfr: What about dynamic binding? UNWIND-PROTECT? You'll open a can of worms with CL, when you would expose CALL/CC.
[02:11:30] <Alfr> hayley, hm ... that's more a wish of mine and not really a question. ;)
[02:11:46] <gilberth> And besides: A return address is a continuation, isn't it?
[02:12:04] *** Joins: x88x88x (~x88x88x@218.212.160.154)
[02:12:06] <pjb> gilberth: well, actual stacks are more sophisticated than mere lifo, since you can access elements inside the stack.
[02:12:10] <Alfr> gilberth, I said experiment, and no, I don't have a good answer for those problems right now.
[02:12:45] <Alfr> gilberth, let's just say, that I'm interested in that can of worms.
[02:13:28] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[02:13:52] <gilberth> pjb: Well what if I have a stack of frames? No need to peek at other stack locations. All a question of the point of view. Does your frame pointer point into the stack or does it point at a frame?
[02:14:10] <Alfr> gilberth, we do have the same problem to a lesser extent with saving and restoring images right now; there's no way you can save file handles.
[02:14:53] <gilberth> Alfr: And?
[02:16:45] <Alfr> gilberth, nothing serious if one isn't too careless.
[02:16:58] <gilberth> Point is: With unwind-protect and progv and that builds upon that like the condition system, CATCH/THROW, special variables, work on defining what it means to leave a dynamic context. Well you have CALL/CC you could stash that continuation. Is the dynamic context still active?
[02:17:17] <gilberth> This could be solved for PROGV, but not for UNWIND-PROTECT.
[02:17:31] *** Quits: x88x88x (~x88x88x@218.212.160.154) (Ping timeout: 256 seconds)
[02:19:13] <gilberth> I just don't like the idea that I must face any random code being executed a random number of times at random times.
[02:19:24] <Alfr> gilberth, I know about the associated problems. That's why I actually want CL with call/cc, to poke at it and maybe figure out some usable model, or certain restrictions on call/cc's use etc.
[02:21:03] <gilberth> Restrictions?
[02:22:32] <Alfr> gilberth, e.g. if you use it to implement a generator that shouldn't be too horrible compared to what call/cc allows in general.
[02:22:35] <gilberth> Nobody stops you from writing a compiler which compiles your cl + call/cc to cl to play with.
[02:23:18] <gilberth> Alfr: Then have generators. I don't like them at all. We don't need them as we have closures.
[02:23:29] <Alfr> gilberth, bucket list item for when I have more time.
[02:23:59] <gilberth> hayley! Generator paper!
[02:24:54] <gilberth> Alfr: Well then. Generators aka Coroutines are sth different than continuations. It only happens that call/c is a convenient too to implement those.
[02:25:09] <gilberth> * tool
[02:26:30] <gilberth> To begin with, with generators you don't get hold of a continuation object you could stash or pass around freely.
[02:26:33] <Alfr> gilberth, yes. And coroutines can be used to implement green threads, which sometimes are also handy.
[02:27:33] <gilberth> The colour of a thread also is an implementation detail. I don't care which colour my threads have.
[02:28:31] <hayley> gilberth: Generator paper?
[02:28:53] <hayley> I only know https://plover.com/~mjd/misc/hbaker-archive/Iterator.html
[02:29:26] <gilberth> hayley: Yes, same thing in green.
[02:29:45] <Alfr> gilberth, yes, using call/cc and arbitrarily jumping back or digging through all and modifying future computations, in cause you're able to access the continuations, will certainly have interesting consequences ...
[02:29:56] <hayley> Or perhaps https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/
[02:30:38] <gilberth> Functions have colour? Are red functions faster? Do we want green functions to save the climate?
[02:31:00] <hayley> idk which you want then. Sorry.
[02:31:01] <Alfr> gilberth, that's what I mean w/ restrictions to the use of call/cc above; i.e. what kinds of use are sane or can be reasoned about.
[02:31:38] <hayley> For call/cc to be sane, you perhaps only want to re-enter once (so they are single use), and ideally you don't want to lose a continuation, so the continuation object would have to be linear.
[02:32:13] <gilberth> filter is not a higher order function. /me quits reading.
[02:33:10] <gilberth> hayley: Then (lambda (x) (return x)) is my continuation. Solved. Next. Am I missing something?
[02:33:26] <hayley> Ouch.
[02:33:42] * hayley survives the wrath of a "Ph.D turned distributed systems engineer" on GC
[02:36:40] <Alfr> hayley, hm. Not familiar with what linearization means in this context or what it would imply, sorry.
[02:37:01] <hayley> A linear variable has to be consumed exactly once, i.e. you can't "lose" the continuation. 
[02:40:54] <Alfr> hayley, so in cps, it means that it gets put once somewhere into the list of future computations, then may be moved around by other things and will be called?
[02:41:05] <hayley> Right.
[02:41:21] *** Joins: robin (~robin@user/terpri)
[02:41:53] <hayley> TL/DR of not getting deadened: "You can't avoid fragmentation, this is silly." "You can reduce it, still." "Sure, but the claim was that there is _no_ fragmentation these days. And you still have somewhat worse locality of reference." "ok then"
[02:45:00] <selwyn> new covid variant named omicron
[02:45:20] <selwyn> is this the first time ο gets some love over ω?
[02:46:29] <selwyn> wiki says that the o in big o notation was meant to be an upper case omicron
[02:47:13] <selwyn> sounds like a troll definition
[02:48:09] <Alfr> hayley, hm ... not sure this avoids the problems gilberth pointed out above.
[02:48:51] <hayley> Alfr: As a continuation is only called exactly once, I think it does. With your list of continuations to call next, you just have green threads.
[02:52:15] <Alfr> hayley, when the program's future is the list list of continuations, and I may reorder it, then by placing the captured continuation further to the end, it may escape an unwind-protect closing a stream or some such, and then invoking it wouldn't be well defined.
[02:53:08] <sham1> Delimited continuations
[02:54:12] <Alfr> hayley, on the other hand, if you don't push it too far to the end, I don't see a problem in placing it/copies of it on the list rpeatedly.
[02:54:33] <hayley> Hmm.
[02:54:36] <Gnuxie> <gilberth> "filter is not a higher order..." <- snob
[02:54:38] * hayley can't visualise continuations in her head.
[02:56:22] <Alfr> sham1, yes, there's that.
[02:58:56] <sham1> hayley: Most people probably can't, even if they deal with them
[03:00:28] <sham1> They're often explained as "the rest of the program" but that's very nebulous
[03:03:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:04:46] <Alfr> hayley, or put it an other way, I suspect that how "late" you may use a continuation depends on what state it "captures", including these of all continuations up to the last one it touches.
[03:08:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[03:21:25] <White_Flame> gilberth: filter certainly seems to be a higher order function to me
[03:22:51] *** Joins: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt)
[03:23:03] *** Quits: X-Scale (~ARM@31.22.203.240) (Ping timeout: 250 seconds)
[03:27:37] *** Joins: X-Scale (~ARM@83.223.225.150)
[03:29:09] *** Quits: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt) (Ping timeout: 268 seconds)
[03:37:30] <gilberth> White_Flame: It doesn't return a functions. And thus is not a function mapping functions to functions.
[03:37:55] <White_Flame> afaik the definition doesn't require it to return a function
[03:38:00] <White_Flame> but returning or taking a function counts
[03:38:40] <gilberth> Hmm. I learned that differently.
[03:39:02] <gilberth> So qsort(3) is a higher order function?
[03:39:27] <White_Flame> well, with C does a functin pointer count as a function?
[03:39:41] <gilberth> Sure, why not?
[03:40:38] <gilberth> I mean, #'car certainly is a function, too?
[03:40:48] <White_Flame> then yes, it's a higher order function
[03:41:19] <gilberth> Still puzzles me with that term "higher order functions". Perhaps it's like one say 0 is a natural number, while others disagree.
[03:46:40] <White_Flame> well, there can't really be much of a difference between a 2nd order function and higher
[03:46:49] <White_Flame> it's either first order (no function parameters) or higher order
[03:46:56] <White_Flame> *parameters/return values
[03:47:14] <Gnuxie> So, nothing to stop reading an article immediately over then? 
[03:48:33] <hayley> gilberth: https://shipilev.net/labs/threadripper-efficiency/ how to compile in Germany
[03:48:55] <White_Flame> Gnuxie: I just saw way more problems than async
[03:49:08] <White_Flame> there's c++ const, and push vs pull APIs in I/O for 2 more examples
[03:50:05] <gilberth> Gnuxie: Besides I am starving, not really.
[03:50:36] <Gnuxie> Aww ok 
[03:52:58] <Gnuxie> Sorry, I said it cos I didn't like how petty of a reason it seemed to stop reading but I guess it's alright 
[03:55:00] <gilberth> hayley: (1) Heating with electricity is politically incorrect. (2) 237W * 24h * 365 * 30ct/kWh = EUR 617.58 not 300 as stated.
[03:55:42] <Gnuxie> Also sure you could use generators in CL to get the pros of continuations... but woukdn't you still be forced to write in CPS yourself?
[03:56:40] <Gnuxie> Which idk I don't wanna do that 
[03:57:45] <Gnuxie> And no one's ever gonna hack on a code walker to cps transform and also capture and restore the dynamic environment 
[03:57:57] * hayley mumbles that map is right there
[03:58:19] <gilberth> What else is a generator than a funny way to write a function either invoking a call back or when you want it the other way around: a function that returns a closure to be called for new values?
[03:59:35] <White_Flame> a generator practically needs state
[04:00:13] <White_Flame> although a singleton static generator can just use global state and not have any function-specific instance state
[04:00:36] <gilberth> Yes, and with lexical closures, we have no trouble there.
[04:04:19] <Gnuxie> But what about when your generator or callbacks need to signal conditions
[04:05:56] <gilberth> I don't see a problem with that.
[04:07:04] <gilberth> CCL's reader needs an overhaul. It accepts 1/0.5 and returns 2.0.
[04:07:16] <Gnuxie> The problem exists when the function that consumes the callback invokes the callback in another dynamic environment to the one it was called from 
[04:07:38] <Alfr> Gnuxie, then the condition likely goes unhandled.
[04:08:18] <Alfr> Gnuxie, probably not the programmer's intent, but the behaviour is defined.
[04:09:37] <gilberth> But the condition is signaled when the dynamic context is left already.
[04:10:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80::7)
[04:11:26] <Gnuxie> Well, i'd like to be able to use the handlers from the environment at the point the consumer was called, as though an escape continuation was passes to the consumer rather than a callback 
[04:11:33] <gilberth> So harm done. And when you paranoid about your call back being called outside your dynamic context, you could guard it.
[04:11:46] <Gnuxie> Passed*
[04:11:59] <gilberth> * no harm
[04:12:43] <gilberth> Gnuxie: What should those handlers do when the dynamic context doesn't exist anymore. What you want is call/cc with all its problems.
[04:12:44] <pjb> gilberth: well, extensions are allowed, if they're documented.
[04:13:45] <gilberth> And this is not like generators usually work.
[04:13:54] <Alfr> gilberth, I think 1/0.5 is a valid potential number.
[04:14:02] <gilberth> It is.
[04:14:23] <gilberth> Still I believe this is an accident.
[04:14:49] <Alfr> gilberth, ccl could fix it by simply documenting this extension.
[04:14:58] <pjb> gilberth: even better, it accepts: 1/3.0d0 -> 0.3333333333333333D0 ; but note that it doesn't take 1/#c(1.0 2.0) ; it's clearly an extensions, not just an implementation quirk.
[04:15:08] <mfiano> Well that file server installation couldn't have gone any worse :(
[04:16:11] <mfiano> Turned it on and watched sparks fry 25TB
[04:16:23] <gilberth> pjb: Nah, my bet is that potential number syntax is detected and read-from-string or sth. is used to parse the denominator. I haven't looked at the code. At least I would expect some comment.
[04:17:15] <pjb> 1/3.0x0 is still read as a symbol.
[04:17:33] <gilberth> Is that a potential number?
[04:17:40] <pjb> Yes, too.
[04:17:53] <pjb> we could look at the source indeed, but really, it doesn't seem to use a trivial algorithm.
[04:18:14] <gilberth> But "0x0" doesn't parse at one. I bet after the "/" the rest is just subject to the constituent reader again.
[04:18:36] <Gnuxie> gilberth: I didn't think i'd need the full continuation for this, bur ir probably implies some spooky stuff like the consumer gets a new env or something if true 
[04:18:40] <Gnuxie> Dunno too asleep 
[04:18:53] <gilberth> Anyhow, later, I really strave and are on caffeine underflow.
[04:28:51] <Gnuxie> Ok, cya 
[04:31:03] <Gnuxie> Yeah I woukd need full continuation if the consumer was ever gonna escape the same dynamic extent as the caller, well that was silly 
[04:31:33] <Gnuxie> Or something like that 
[04:32:16] <Gnuxie> Just wanna write async shit in direct style, donmt wanna have to figure out how 
[04:45:45] <hayley> gilberth: The tricky thing is that, would I go SIMD, I'd probably have to give up grep[] and thus go back to O(mn) searching, which is definitely worse.
[05:13:19] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 250 seconds)
[05:24:26] <hayley> https://www.youtube.com/watch?v=s37cUyTGRUM
[05:24:27] -ixelp- Firth Of Fifth (Remastered 2008) - YouTube
[05:39:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:44:06] *** Joins: notzmv (~zmv@user/notzmv)
[06:20:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[06:27:02] <hayley> https://www.returnyoutubedislike.com/
[06:27:02] -ixelp- Return Youtube Dislike
[06:39:31] <contrapunctus> shka, selwyn: OAuth sounds like something an Experienced Developer(TM) (i.e. not me) could implement a basic library for in...five days tops?
[06:41:28] <contrapunctus> but I suppose $time_taken_to_switch_to_nginx < 5 days
[07:05:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:07:16] <hayley> Someone sent me an email asking about being unable to build 42nd-at-threadmill.
[07:09:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[07:14:53] <hayley> As they say, it works on my machine(tm)
[07:27:04] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:29:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[07:38:23] <hayley> Okay, I have the non-boilerplate stuff generated so far: https://plaster.tymoon.eu/view/2726#2726
[08:20:31] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:31:28] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[08:33:22] *** Joins: semz (~none@user/semz)
[08:43:21] <hayley> With AVX2 it is also possible to use unsigned MAX/MIN to produce a <= for unsigned integers. Though idk if it's better than subtracting by #x80 when the bounds are all constant. Less register pressure for #x80, I guess.
[08:53:08] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:33:30] *** Joins: gko (~user@user/gko)
[10:07:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:17:52] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:18:13] <dave0> maw
[10:18:47] <hayley> maw
[10:20:12] <dave0> maw hayley 
[10:45:27] <hayley> https://www.youtube.com/watch?v=o7QAuZeozFo
[10:45:28] -ixelp- The Number One Song In Heaven - YouTube
[10:57:53] <hayley> https://plaster.tymoon.eu/view/2728#2728 oh lawd he comin
[10:58:08] * hayley just has to write the vector primops now. Oh no
[11:12:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:13:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:15:44] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[11:43:17] *** Joins: X-Scale` (~ARM@25.55.43.5.rev.vodafone.pt)
[11:43:44] *** Quits: X-Scale (~ARM@83.223.225.150) (Ping timeout: 268 seconds)
[11:44:54] *** X-Scale` is now known as X-Scale
[11:46:49] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[12:10:03] <hayley> So we don't even get NOT with AVX. Though you can make your own with XOR and #xFFFFFFFF....
[12:20:30] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[12:28:17] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:38:04] *** Joins: notzmv (~zmv@user/notzmv)
[12:56:18] <selwyn> contrapunctus: i also don't have a passion for implementing that
[12:57:06] <selwyn> i don't mind using an already existing solution in a different language if it works
[12:57:13] <selwyn> nginx also handles lots of other stuff for me
[12:59:33] * hayley now worries there aren't enough micro-ops in the world to make prefix scanning fast
[13:00:44] <contrapunctus> selwyn: I hope I'm able to write it...would be nice to be able to contribute to the ecosystem 🤔
[13:00:55] <selwyn> we might already have something to do that
[13:03:48] <hayley> I read Agner's guide and came up with something like 7 clocks per 8 characters, given that everything has a data dependency.
[13:04:09] <hayley> Unless we can predict missing and run multiple simultaneously idk
[13:45:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[13:59:17] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[14:01:30] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Client Quit)
[14:02:41] <hayley> "Fuckers stole PNOT, can't have shit in AVX"
[14:03:01] *** Joins: eomyulkes (~chee@gateway/vpn/pia/x88x88x)
[14:03:17] *** Quits: eomyulkes (~chee@gateway/vpn/pia/x88x88x) (Client Quit)
[14:04:02] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[14:06:30] <moon-child> internet sez you can use VPTERNLOGD dst,dst,src,#b01010101
[14:06:35] <moon-child> ...of course, that requires avx512 :/
[14:06:44] <hayley> Thanks, now to spend $600 on AVX512
[14:07:13] <hayley> AIUI CMPEQD a, b, b gives you all ones, then I can XOR over to get an inverse.
[14:08:06] <hayley> In any case I fear that I don't have the throughput I was hoping for, but if that's the case, nothing else does.
[14:15:05] <hayley> If I had UTF-8 bytes I could burn some more characters per vector, but it's still only 4x more.
[14:17:04] * hayley feels somewhat underwhelmed. Doesn't help that Zen 1 only has a 128 bit ALU.
[14:17:20] <shka> hayley: not zen 2
[14:17:57] <hayley> Yeah, well, two more years for my five year plan. (Bad name.)
[14:18:05] <selwyn> lol
[14:19:08] <hayley> But I try to keep hardware for five years at least. HDD is coming up on 6, SSD 2, CPU and motherboard 3.
[14:19:50] <shka> i have just retired my oldest peace of hardware 
[14:20:03] <shka> sound card
[14:20:18] <shka> sound blaster 5.1
[14:20:22] <shka> 1999
[14:21:06] <shka> hayley: i can run your benchmark on my cpu
[14:21:10] <shka> which is zen 2
[14:21:23] <hayley> I still don't have a benchmark, since the code generator isn't done.
[14:21:29] <selwyn> my university assigned mac book couldn't last 5
[14:21:33] * hayley guesstimating with Agner tabled
[14:22:07] <hayley> *tables
[14:23:52] <shka> abandon all hope, ye who legitimate need Agner to improve performance :P
[14:25:35] <hayley> The tight loop of grepping is now like 8 instructions, what else can I do?
[14:29:59] <shka> hayley: well, but are those instructions independent? 
[14:30:14] <hayley> Hardly.
[14:30:27] <shka> so it likely uses just one ALU
[14:30:41] <shka> of four
[14:30:46] <hayley> I need to load a vector, compare, move mask, check for matches, then jump back if we miss.
[14:31:54] <pl> shka: thinking of interleaving instructions to push for more IPC?
[14:32:14] <shka> pl: ys
[14:32:16] <shka> *yes
[14:32:48] <pl> poor SMT :P
[14:33:07] <shka> well, you do, what you have to 
[14:35:03] <shka> i personally think that forcing CPU to guess what can be done in parallel is a wacky idea 
[14:35:11] <shka> and it should be done by compiler
[14:35:34] <shka> but somehow we are here ;-)
[14:43:17] <pl> shka: because it turned out to be rather hard for compiler to guess 
[14:44:12] <pl> As much as lessons from iAPX432 could be unlearned due to incorrect scapegoating, Sufficiently Advanced Compiler seems to be going strong in being shit 
[14:44:41] <shka> well, and CPU needs a lot more power and space to do this 
[15:01:02] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Ping timeout: 240 seconds)
[15:18:58] <pl> Well, yes, but it turns to be not so bad in the end when certain shortcuts aren't taken 
[15:20:14] <hayley> shka: I guess it could speculatively run through multiple vectors at once, if we only use one port at a time. idk
[15:21:35] <hayley> I could unroll and have multiple vector scans run in one iteration, but I'd have to have very few matches.
[15:21:41] * hayley wants more statistics
[15:23:59] <hayley> OTOH that serialises when we have to decide if we found a partial match or not.
[15:25:08] <hayley> But you get a lot more stuff to do before the match.
[15:25:42] <hayley> That might be the trick then.
[15:27:53] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:28:29] <hayley> Now, if I had my huge vector LUT computer, I'd clearly have NOT, and I could use huge vectors already for more ILP. No wonder Intel is shit these days
[15:29:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[15:31:30] *** Joins: aeth (~aeth@user/aeth)
[15:32:13] <hayley> Though, surely register pressure and the complexity of the prefix dictates how much I can actually do in parallel. And I'd have to interleave instructions between vectors, which is doable since I am all functional there.
[15:45:02] *** Quits: X-Scale (~ARM@25.55.43.5.rev.vodafone.pt) (Ping timeout: 240 seconds)
[15:45:19] *** Joins: X-Scale` (~ARM@92.250.96.158)
[15:46:44] *** X-Scale` is now known as X-Scale
[15:50:51] <pl> hayley: this reminds me of a presentation at one ELS about using Lisp to get ridiculously better perf from GPGPU thanks to being able to dynamically adjust vectorized loops to the shape of input data 
[15:53:05] <pl> (thus avoiding pathological cases for processing edges of image using same kernel as middle and losing even 90% of processing capacity) 
[15:56:33] <hayley> I'm not sure whether runtime feedback could help or not. It'd be more complex than size sadly.
[16:06:29] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[16:06:48] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[16:07:07] <shka> hayley: yeah, that's what i would try, i don't know if this will be good 
[16:07:15] <shka> but it is worth a shot imho 
[16:09:15] *** Joins: treflip (~user@95.79.32.99)
[16:27:05] <hayley> But the worst case of SIMD matching (everything is a match) is truly awful, since we waste a lot of vector ops, and we are O(mn) to add insult to injury.
[16:36:19] <hayley> OTOH what can you do if the user wrote a RE which matches all the damn time?
[16:42:01] *** Joins: dra (~dra@2a04:4540:641d:2a00:29cc:5e9c:41ed:f149)
[16:42:07] <dra> Hello!
[16:48:36] <shka> hi
[16:48:46] <shka> hayley: nothing, such is the nature of regexps
[16:48:59] <treflip> ☺/
[16:49:46] <shka> https://www.youtube.com/watch?v=8aWcDaVSpnc
[16:49:46] -ixelp- Unboxing a Keymacs keyboard! - YouTube
[16:49:49] <shka> oh boy
[16:52:03] *** Joins: McParen (~mcp@user/mcparen)
[17:04:33] <dra> "Alcoholic unboxing video"
[17:04:37] <dra> Nice. :D
[17:04:58] <shka> and that symbolics keyboard look 
[17:07:50] <dra> Basic kit starting at EUR931.
[17:07:51] <dra> Wow.
[17:09:47] <shka> yeah, you can buy model F repro for less
[17:11:43] <shka> but it looks great
[17:11:48] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[17:12:05] <shka> i really like wedge shape of the symbolics keyboard
[17:12:25] <dra> Looks and sounds great.
[17:12:35] <dra> I did just buy two Filco Majestouch, though.
[17:13:56] <pl> Well, it's still cheaper than even late model Symbolics which it tries to replicate 
[17:14:09] <pjb> dra: congrats!
[17:14:20] <pl> (the ones with "gundam" or "space invaders" switches) 
[17:14:33] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:15:01] <dra> pjb: I really like the Silent Red switches.
[17:15:01] <shka> magnetic valves were expensive 
[17:15:04] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[17:15:23] <clothespin> good morning
[17:15:34] <shka> but space invaders should be comparable to alps of the era
[17:17:31] <shka> still, it is nice that this thing exists
[17:17:47] <shka> i won't be buying it, but damn boy
[17:18:38] <pl> shka: there was no magnetic valve lispm keyboard, they used hall effect sensors instead 
[17:19:29] <shka> https://deskthority.net/wiki/Symbolics_365407 there is a picture of one
[17:20:03] <shka> and mounting certainly looks like ITW
[17:20:50] <pl> Huh, I thought that model has only the leaf spring linear gundam ones 
[17:20:58] <pl> Colour me surprised 
[17:21:14] <pl> 360000 were all hall effect 
[17:21:46] *** Quits: Inline (~Inline@2a02:908:1252:7a80::7) (Quit: Leaving)
[17:21:59] <shka> i think that at the time hall effect keyboard switches were out of production
[17:22:04] <pl> (those are the ones that were shipped with 3600 and related, 365407 was deep in ivory era) 
[17:22:20] <shka> and you ought to either stick to magnetic valve or magnetic reeds 
[17:22:25] <pl> shka: they are still made, but rare 
[17:22:33] <shka> i mean, right now yes
[17:23:00] <pl> There's a German company making hall effect keyboards continuously since 1980s if not earlier 
[17:23:00] <shka> but there was period when there was literally 0 production of hall effect keyboard switches in the western world
[17:23:11] <shka> oh, ok, that makes sense
[17:23:39] <pl> Honeywell stopped manufacturing their keyboard oriented ones, yes 
[17:23:56] <shka> yeah, i thought that they sited on the patent for a moment 
[17:24:03] <pl> Though I think they remained in small production line for industrial hw 
[17:24:29] <pl> Of course, a lot of hall effect sensors in industrial automation, not necessarily keyboard switches 
[17:24:57] <shka> yeah, those are always there
[17:25:10] <shka> and probably to continue to exists for eternity 
[17:25:39] <shka> anyway, it seems that right now hall effect switches made a massive comeback
[17:25:51] <shka> shame that keymacs is not coming with one of those 
[17:26:00] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1)
[17:27:08] <pl> Still hard to get, especially outside China 
[17:27:20] <pl> The German company is quite niche and I think mostly makes for military 
[17:27:42] <shka> well, there are gamerish stuff made with hall effect switches currently 
[17:27:55] *** Joins: Jacobis9000 (~jonaholuf@host86-135-23-182.range86-135.btcentralplus.com)
[17:28:01] <Jacobis9000> Hello :)
[17:28:02] <shka> AND there are optical switches as well
[17:28:04] <shka> Jacobis9000: hi
[17:28:17] <Jacobis9000> How are you shka?
[17:28:20] <pl> Interestingly, one company is doing a lot with optical switches, and plans to introduce keyboard with each key giving full range of results 
[17:28:36] <shka> optical switches are not exactly the same as hall effect, but no contacts so in practice it may not be that different 
[17:28:55] <pl> As in, the controller can report how deeply each key is pressed 
[17:29:02] <shka> Jacobis9000: i am fine, thanks for asking
[17:29:12] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Remote host closed the connection)
[17:29:13] <shka> pl: not just one now
[17:29:34] <shka> wooting is probably what you meant
[17:29:48] <shka> they switched to hall 
[17:29:58] <pl> Oh, shiny 
[17:30:01] <shka> easier to get analog read from hall effect
[17:30:19] <shka> actually that guy made a review of wooting keyboard
[17:30:28] <shka> or actually two
[17:30:42] <shka> https://www.youtube.com/watch?v=QCDjQ0ooAE0
[17:30:43] -ixelp- Wooting Two Lekker Edition keyboard review (Lekker Hall effect) - YouTube
[17:31:10] <shka> the first generation of wooting was optoelectric though
[17:31:56] <shka> and... razer https://www.youtube.com/watch?v=jTLS5LuA66s
[17:31:56] -ixelp- Razer Huntsman v2 analog keyboard review (Light Strike Libra Analog) - YouTube
[17:32:11] <shka> and a4tech
[17:32:18] <shka> and corsair
[17:32:26] <pjb> dra: Despite the security risk (password recovery thru sound monitoring is a thing), I like the sonore effect of the cherry blue switches.  But so far, the Filco are the best quality keyboard I've used (even better than Das Keyboard).
[17:32:44] *** Joins: lagash (lagash@lagash.shelltalk.net)
[17:32:53] <shka> so yeah, i would say that contactless key switches made a comeback 
[17:37:06] <dra> pjb: Works wonderfully for coding and Rocket League. ;)
[17:39:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1)
[17:58:20] <Jacobis9000> I find myself without an online home
[17:58:30] <Jacobis9000> and I'm having trouble finding a new one
[18:01:19] <pjb> Jacobis9000: What do you call an online home? Just rent a dedicated server!
[18:01:55] <pjb> Jacobis9000: or use http://sdf.org
[18:01:56] -ixelp- SDF Public Access UNIX System - Free Shell Account and Shell Access
[18:03:06] <Jacobis9000> Well I just mean a place where I know everyone and can hang out
[18:03:10] <Jacobis9000> I don't mean my own server
[18:03:31] <pjb> Stay here, and it will become.
[18:03:35] <Jacobis9000> Since 2001 I played a game called 8bitMUSH, but in 2021, it started to die
[18:03:45] <Jacobis9000> It's nice here but it's kind of high brow for me
[18:04:22] <dra> Jacobis9000: Sit down, have a coffee. But be careful, you may learn things here. ;)
[18:04:55] <pjb> Start playing the game of lisp programming. It'll never die.  Choose a quest here: https://gitlab.com/informatimago/cl-suggested-projects
[18:04:55] -ixelp- Pascal J. Bourguignon / Common Lisp Suggested Projects · GitLab
[18:05:38] <dra> "An editor with excellent support for writing Common Lisp code."
[18:05:57] <dra> The classic project for learning Common Lisp.
[18:05:58] <pjb> Some work has been done in this direction, with climacs and climacs II.
[18:06:28] <pjb> The Craft of Text Editing   http://www.finseth.com/craft/  can be a starting point.
[18:06:29] -ixelp- The Craft of Text Editing
[18:07:34] <Jacobis9000> I do enjoy Lisp very much
[18:08:58] <dra> pjb: That's great resource.
[18:09:19] <pjb> Jacobis9000: then practice it more :-)
[18:10:36] <Jacobis9000> It is like this: (defun throw-die () (let ((num (random 7))) (if (equal num 0) (throw-die) num)))
[18:10:40] <Jacobis9000> so neat
[18:10:47] <Jacobis9000> I remember writing that
[18:11:00] <dra> Jacobis9000: (1+ (random 6))
[18:11:04] <Jacobis9000> and being so pleased with the naturalness of the recursion
[18:11:07] <pjb> (defun throw-die () (1+ (random 6)))
[18:11:27] <pjb> otherwise it may take a long time…
[18:12:03] <Jacobis9000> doesn't seem slow
[18:12:19] <Jacobis9000> what is '1+' ?
[18:12:32] <dra> (1+ x) === (+ x 1)
[18:13:11] <Jacobis9000> so you're getting a random number 1-7 by adding 1 to a random number 0-6
[18:13:13] <Jacobis9000> clever!
[18:13:37] <Jacobis9000> is that righT?
[18:13:41] <dra> Jacobis9000: 6 is out of range. 0 <= (random 6) < 6.
[18:14:06] <Jacobis9000> I can't remember how random works off the top of my head
[18:14:43] <dra> It depends on the input. In this case, 6 being an integer, it'll return a pseudo-random integer not less than 0 and less than 6.
[18:15:44] <Jacobis9000> ah yeah that's why I did it the way I did it, I wanted a number 1-6, so did (random 7) but if num == 0, then (throw-die)
[18:15:55] <dra> So, 0, 1, 2, 3, 4, or 5. Hence the +1 to get a die.
[18:16:34] <Jacobis9000> it's not slow though, but you're saying it could hit 0 a lot of times and get real slow if you're very unlucky
[18:17:23] <dra> Jacobis9000: Yes. In theory, depending on the random source, you may have to wait forever.
[18:17:58] <dra> In practice, with one throw (or hundreds, thousands, even millions) you probably won't notice a difference.
[18:18:07] <Jacobis9000> yeah
[18:19:02] <Jacobis9000> AFK off to make tea
[18:22:27] <dra> Ha. I fed an your version with speed optimization settings into SBCL and it inlined the random number generation.
[18:24:56] <shka> https://www.youtube.com/watch?v=iSIhX-VWhtQ
[18:24:57] -ixelp- David Bowie - New angels of promise (Omikron: The Nomad Soul version) - YouTube
[18:28:11] <Jacobis9000> dra what does this mean in layman's terms?
[18:28:47] <Jacobis9000> 'inlined the random number generation.'?
[18:43:48] <dra> Jacobis9000: It puts the code from (random 6) into the THROW-DIE code instead of calling the RANDOM function.
[18:45:56] <pjb> Jacobis9000: beware, there's a 1- (1- x) = (- x 1) !
[18:46:34] <pjb> Jacobis9000: better think of 1+ as SUCCessor and 1- as PREDecessor. (mapcar '1- '(1 2 3)) #| --> (0 1 2) |# 
[19:01:40] <Jacobis9000> Is this hypothetically speaking or does it literally remove the last element of a list?
[19:04:20] <pjb> Jacobis9000: look better.
[19:04:45] <pjb> Jacobis9000: (mapcar '1- '(1000 3 201)) #| --> (999 2 200) |# 
[19:04:56] <dra> Jacobis9000: No, MAPCAR returns the list resulting from applying the given function (1- in this case) to the input list ((1 2 3) in this case).
[19:05:20] <dra> *To each element of the input list.
[19:22:31] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[19:50:09] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[19:53:13] *** Joins: Alfr (~Alfr@user/alfr)
[19:57:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:01:40] <pjb> and people thought Idiocracy was a scifi movie, because it was set 500 years into the future!  Euthanasia clinics refusing unvaccinated customers <https://app.spectator.co.uk/2021/11/26/german-euthanasia-clinics-refusing-unvaccinated-customers/content.html>
[20:01:41] -ixelp- German euthanasia clinics refusing unvaccinated customers
[20:30:51] <dave0> nite all
[20:31:21] *** Quits: dra (~dra@2a04:4540:641d:2a00:29cc:5e9c:41ed:f149) (Quit: Leaving)
[20:32:31] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:45:28] <gilberth> Good morning #lispcafe!
[21:00:15] <ck_> so there's an emacsconf and it is streaming at the moment. is anybody here watching?
[21:05:14] *** Joins: ln43 (~ln43@user/ln43)
[21:06:08] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Ping timeout: 268 seconds)
[21:10:11] <ln43> Hi all... i found i think opensdraw that i suppose stands for open symbolic drawing (https://github.com/HazenBabcock/opensdraw) and personally i appreciated reading the docs... because of the use of sexp(s)
[21:10:33] <ln43> wow... but i was not able to get it working : /
[21:11:28] <ln43> found here: https://github.com/ad-si/awesome-lego
[21:11:29] -ixelp- GitHub - ad-si/awesome-lego: Curated list of awesome LEGO resources
[21:14:20] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[21:33:00] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 256 seconds)
[21:37:08] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:43:34] *** Quits: Jacobis9000 (~jonaholuf@host86-135-23-182.range86-135.btcentralplus.com) (Ping timeout: 260 seconds)
[22:06:09] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[22:10:21] *** Joins: Catie (~user@user/catie)
[22:11:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Quit: Leaving)
[22:12:03] <contrapunctus> ck_: I watched a little
[22:13:23] <contrapunctus> good evening gilberth 
[22:14:29] <contrapunctus> gilberth: I thought you were in Germany - isn't it close to night there? Or merely observing the oldest and noblest of IRC traditions - Universal Greeting Time?
[22:16:18] <shka> contrapunctus: gilberth famously functions exclusively after dark
[22:16:29] <contrapunctus> oh
[22:16:56] <shka> I am trying to convert him to goth life-style 
[22:17:06] <gilberth> contrapunctus: It's 19:46 local time here. I am called the Nocturnal One for a reason. I get up when sun sets. At least in winter time.
[22:17:34] <contrapunctus> shka: I'd cheer on the effort, if the Goth lifestyle includes "release early, release often" 😏️
[22:17:54] <shka> https://www.youtube.com/watch?v=HLp6vQ6_yKU
[22:17:55] -ixelp- The Deb of Night Radio Mix – Vampire: The Masquerade - Bloodlines - YouTube
[22:18:01] <gilberth> I just have to many projects on my hand and none is done. And I suffer from releasephobia.
[22:18:06] <shka> contrapunctus: go figure, gilberth of the night
[22:18:30] * contrapunctus sticks a copy of Worse Is Better to gilberth 's wall
[22:19:40] <gilberth> Or rather I have way too high standard. Call it perfectionism, if you wish. And I don't like writing because I am not particular good at it.
[22:20:17] <gilberth> shka: Hey, cool, that's from the game, right?
[22:20:18] <contrapunctus> .o(It's amazing how often the phrase "worse is better" is used in a cynical way - "boo hoo, only Bad Things(TM) are popular" - whereas my understanding of it is really "release early, release often")
[22:20:25] <shka> gilberth: yeah
[22:21:04] <shka> i love adds in this radio
[22:21:21] <semz> Didn't it start somewhat cynical? Afaik the New Jersey people never referred to their philosophy as worse is better.
[22:21:38] <gilberth> I love that game. My then GF loved it too, and we spend hours playing it together. That was a good time.
[22:22:42] <gilberth> Unfortunately we can't see each other because of the pandemic.
[22:23:02] <shka> gosh, see, that's why you should be 100% goth :P
[22:23:10] <shka> you are 95% there
[22:23:54] <gilberth> Is that like software development with the last 5% taking the longest?
[22:24:50] <sham1> contrapunctus: I mean, that's not exactly incorrect though
[22:24:57] *** Parts: McParen (~mcp@user/mcparen) ()
[22:26:11] <contrapunctus> 🤔️
[22:26:35] <gilberth> shka: Thanks for the YT link. I like it.
[22:27:32] <shka> well, that voice actress has also really nice, velvety voice 
[22:27:57] <gilberth> There is music also.
[22:29:17] <shka> well, yes
[22:29:47] <gilberth> It fits my mood.
[22:33:34] <semz> I always understood it as a sort of supply & demand in that they're governing rules that may suck but you can't really get rid of - although worse is better is maybe a little less universal.
[22:33:58] <gilberth> Any idea of Poland imported TTL chips from the west, or did they have their own perhaps with different designation?
[22:34:13] <selwyn> well i am really missing the sun these days
[22:34:19] <semz> Maybe evolution/selection would be a better source of analogies than economics
[22:34:40] <pl> gilberth: we built our own implementations of 74xx series
[22:34:48] <pl> and other standardised logic series
[22:35:07] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:35:24] <gilberth> selwyn: I really enjoy the darkness these days. I am the reverse; while some get winter depression, I get summer depression and do way better at the dark time of the year.
[22:35:36] <selwyn> interesting
[22:35:38] *** Joins: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x)
[22:35:40] <selwyn> well, glad you like it
[22:36:36] <gilberth> pl: I was just wondering because I find a lot of TTL ALU chips offered from east Europe particular from Poland, so I wondered. All NOS.
[22:37:49] <gilberth> Actually I wonder how many 74F181 still exist. In particular the SMD parts, which I am after, and which you can't pull.
[22:39:16] <gilberth> The 74AS882 is very rare and own 266 of them. That must be quite a fraction of the total chips still existing. :)
[22:39:24] <pl> gilberth: I do remember quite big catalogs of standard logic elements, including 74xx compatibles, in books from before 1989. there was a mix of grades from different countries, though, and a lot more milspec than in the west
[22:40:20] <gilberth> pl: Most chips I find and have sourced are made by TI.
[22:52:43] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[22:52:47] *** Joins: Alfr (~Alfr@user/alfr)
[22:57:35] *** Quits: x88x88x (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[23:00:37] *** Quits: X-Scale (~ARM@92.250.96.158) (Ping timeout: 250 seconds)
[23:06:01] <shka> mmm
[23:06:18] <shka> I spent some time today refactoring statistical-learning
[23:06:40] * gilberth looks for the 54Fxx series and finds almost nothing.
[23:07:04] <shka> i will be able to implement part of the lightgbm algorithm thanks to it
[23:07:14] <shka> the other part is the feature bundling 
[23:07:25] <shka> which is more complex, but certainly doable 
[23:09:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1)
[23:18:01] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:29:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[23:31:38] <ck_> A friend just showed me this, I was unaware: https://keymacs.com/
[23:34:28] <ck_> oh, I see it is on hacker news right now, never mind
[23:35:12] <gilberth> That keyboard looks nice. In particular it has its center at the center unlike keyboards with extra cursor keys and a numpad. As I like to balance my keyboard on the lap/legs, this could be a keyboard I'd like.
[23:35:32] <ck_> true bargain at $931 for the kit
[23:35:53] <gilberth> A kit you say. Do I need a soldering iron?
[23:36:50] <ck_> there's three options at the bottom of the page, just take a look. seems you can pay 231 extra for a presoldered board
[23:37:50] <gilberth> The quotes are *aehm* interesting.
[23:38:09] * selwyn starts to feel like a human being again
[23:38:16] <ck_> what happened?
[23:38:22] <selwyn> first proper meal in 2 days
[23:38:31] <ck_> what stopped you?
[23:38:50] <selwyn> i was dumb and did a lot of exercise while eating very little
[23:38:54] <selwyn> which is not sustainable
[23:39:03] <ck_> I'll make a note of that
[23:39:13] <shka> selwyn: the hell are you doing anyway?
[23:40:02] <ck_> losing weight probably
[23:40:07] <selwyn> recently, over 100 pullups per day
[23:40:59] <selwyn> which is not bad as long as you eat enough
[23:43:58] <selwyn> so many modifiers on the keymacs keyboard
[23:44:25] <shka> well, symbolics ancestry shows 
[23:44:39] <ck_> that's also what justifies the super-meta-hyper-price
[23:45:05] <selwyn> symbolics are nice but what are you supposed to do without all 12 function keys
[23:45:09] <shka> well, that and also fact that they ship with alps or alps clone 
[23:45:26] <shka> selwyn: macros, never ending macros
[23:47:19] <gilberth> At least the firmware is open source, so that you could make it work in an uncooperative environment.
[23:47:36] <shka> if you want something that is not cherry mx compatible, you need to pay extra
[23:48:04] <shka> alps style switches = less keycaps, less circuit boards, less supply
[23:48:16] <shka> and apparently matias clickly switch is not exactly durable 
[23:48:25] <shka> *matias clicky switch 
[23:50:24] <semz> Dear god the space bar on that keyboard.
[23:50:26] <shka> https://deskthority.net/viewtopic.php?t=24054
[23:50:46] <selwyn> whats wrong with the space bar
[23:50:59] <semz> Thumbs are the strongest finger so that'd be an idea location for modifier keys
[23:51:04] <semz> ideal*
[23:51:15] <semz> instead they waste all on it on... spaces
[23:51:55] <shka> yup, i also hate when i can't press alt gr with my right thumb
