[00:02:17] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
[00:19:03] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:19:21] <dave0> maw
[00:32:48] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[00:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Read error: Connection reset by peer)
[00:32:54] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[00:34:01] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[00:34:47] *** Inline__ is now known as Inline
[00:59:02] *** Joins: lisp123 (~lisp123@45.86.202.12)
[01:03:32] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
[01:09:10] <GreaseMonkey> this article appears to contradict itself: https://en.wikipedia.org/wiki/Minimalism_(computing)
[01:09:17] <GreaseMonkey> "Minimalism, in this sense, means designing systems that use the least hardware and software resources possible."
[01:09:34] <GreaseMonkey> but about half way through someone coopts the damn thing to talk about how chrome's design is minimalist
[01:10:44] <moon-child> minimalism is also a visual aesthetic
[01:11:20] <GreaseMonkey> which would mean that the introduction doesn't match the article
[01:11:26] <semz> such is life on wp
[01:11:39] <moon-child> ^
[01:11:57] <GreaseMonkey> and yes, minimalistic visual design is in no way contradictory to minimalistic use of hardware resources, but the latter is completely contradictory to, well, chrome
[01:12:42] <pl> well, there are certain ways when you compare chrome and old mozilla where chrome is minimalisst
[01:13:41] <shka> hard to imagine any web browser being minimalist
[01:13:49] <selwyn> how does nyxt work anyway
[01:14:20] <shka> spawns browser in separate process and controls it from lisp IIRC
[01:18:37] <Catie> "Google's Chrome browser and Chrome OS are often cited as examples of minimalist design" (link to article from 2010 about how a chromebook doesn't have any stickers on it, link to article from 2009 about how Chrome didn't have many buttons or toolbars)
[01:19:00] <Catie> "Misleading" would be a generous description
[01:21:24] <semz> it's one of the easiest ways to vandalize WP
[01:21:38] <semz> just cite something, nobody checks it
[01:22:21] <semz> hell, I've seen academic papers do the same
[01:24:17] <moon-child> https://xkcd.com/978/
[01:27:44] <selwyn> our paper got cited by a wikipedia bot
[01:28:00] <shka> russians are funny https://www.youtube.com/redirect?event=backstage_event&redir_token=QUFFLUhqbTlZV2N0T083LU80NVNRMEpSYXFPWE1reXRRQXxBQ3Jtc0tuaTNrZXpWd2l4ZFNxMG1tanUtWGIzLUUtYlVfMVNMS2ZVZlBZbEV1Zm5hSjAydHE2b2c4MGY3Z3NMR2FvZDExX1FfeDE1amcxWHhZOW5INDUybzdVX2V6bG1WSE5iOWRBTTJmQXZkRjZHWXNUWmxCZw&q=https%3A%2F%2Fwww.pravda.com.ua%2Fnews%2F2021%2F12%2F16%2F7317610%2F
[01:28:09] <selwyn> and it is a complete mystery to us, since the article has afaict nothing to do with the paper
[01:28:10] <shka> sorry, this link https://www.pravda.com.ua/news/2021/12/16/7317610/
[01:29:19] <edgar-rft> selwyn: isn't that typical for bots?
[01:29:26] <shka> "we are not involved in Ukraine and now we will sentence our officer for corruption while being involved in the Ukraine"
[01:33:06] <selwyn> edgar-rft: i suppose it is
[01:37:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[01:59:54] *** Joins: lisp123 (~lisp123@45.86.202.12)
[02:03:38] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[02:04:31] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 245 seconds)
[02:04:49] *** Joins: notzmv (~zmv@user/notzmv)
[02:19:54] <hayley> https://www.youtube.com/watch?v=4HgShra-KnY Ooh, can we have a Lisp machine then?
[02:21:02] <hayley> A: nope
[02:22:45] <selwyn> goddamn cufflinks
[02:22:48] <selwyn> always losing them
[02:23:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:31:01] <kakuhen> i want a mini lisp machine
[02:31:11] <kakuhen> imagine solokeys but the firmware is 100% lisp
[02:31:23] <kakuhen> it'd be tough to do that since you have to deal with a tiny microcontroller with virtually no resources
[02:31:37] <kakuhen> so it'd be impressive if someone pulled it off
[02:31:58] <hayley> ulisp.com
[02:32:38] <kakuhen> yeah ive heard of it
[02:32:47] <kakuhen> but can it run on an STM32 microcontroller with like 32 kb of memory
[02:32:59] <hayley> Yes.
[02:33:08] <selwyn> but can it run crysis
[02:33:11] <kakuhen> ^
[02:33:12] <hayley> It can run on an ATmega328p with 2kB of memory (been there, done that).
[02:33:21] <hayley> If you have enough swap...
[02:33:37] <hayley> https://forum.arduino.cc/t/idefat-library-for-ide-hard-drive-and-mega/69516
[02:34:41] <hayley> Conversely, https://www.hackster.io/news/building-an-arduino-based-ssd-cf2007228827
[02:34:55] <moon-child> hayley: what do you expect, from the llvm guy?
[02:35:16] <hayley> moon-child: LLVM IR on 864 cores?
[02:35:27] <hayley> A tag bit for poison values?
[02:35:58] <hayley> getelementptr instruction??
[02:42:26] <gilberth> mulisp for CP/M 80 is like 8kB in size and runs happily in 64kB or less on an 8080 8-bit CPU.
[02:42:56] <gilberth> It has bignums even.
[02:49:32] <selwyn> has minecraft been hacked via the log4j vulnerability yet
[02:49:48] <hayley> Yes.
[02:50:07] <selwyn> lol
[02:51:04] <selwyn> my conviction, as a 12 year old java weenie, to never bother with that dumb shit called logging
[02:51:07] <selwyn> has finally paid off
[03:01:01] *** Joins: lisp123 (~lisp123@45.86.202.12)
[03:03:21] <pl> selwyn: Minecraft was one of the first examples
[03:03:43] <pl> especially since with minecraft all you had to do was type the exploit into chat to own the server and all connected clients
[03:05:37] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
[03:48:07] <hayley> https://www.youtube.com/watch?v=4iZ2-qyqvOs
[03:48:26] * hayley sees another "lowest bound on overhead of GC" paper and complains.
[03:50:16] <hayley> If anyone uses it to promote the use of explicit or compile-time memory management, I will have to bonk them, as that is very different to "compiler magically finds where to free objects, with no impacts on programming style e.g. defensive copying or refcounting some objects".
[03:54:33] <hayley> IOW https://i.redd.it/a8k7az85m5871.jpg
[03:55:12] <kakuhen> java slow on my 68k
[03:55:16] <kakuhen> ergo GC bad
[03:56:08] <semz> Minecraft slow ergo GC bad*
[03:56:16] <semz> seen that one way too often
[03:56:35] <kakuhen> Dude, imagine how faster Minecraft would run on my Pentium shitbox if it were written in C++!!
[03:57:04] <kakuhen> i remember seeing these kind of posts all the time circa 2012
[03:57:15] <kakuhen> and now we have minecraft in c++ and it sucks
[03:57:21] <kakuhen> less extensibility and equally slow
[03:59:16] <hayley> I heard Bedrock was faster.
[04:02:21] *** Joins: lisp123 (~lisp123@45.86.202.12)
[04:07:15] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 256 seconds)
[04:45:13] <GreaseMonkey> you could always opt for minecraft in C
[04:45:39] <GreaseMonkey> https://github.com/ChenThread/fromage disclaimer i'm one half of this team
[04:57:23] * pl recalls that a lot of what Rust does actually works much better with GC and was done sop in Linear Lisp
[05:03:29] *** Joins: lisp123 (~lisp123@45.86.202.12)
[05:04:39] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[05:07:57] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 240 seconds)
[05:11:50] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[05:18:41] <hayley> Yes.
[05:19:42] <hayley> https://www.youtube.com/watch?v=12eWV1eLhf0
[05:19:59] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 252 seconds)
[06:04:37] *** Joins: lisp123 (~lisp123@45.86.202.12)
[06:08:34] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[06:09:29] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[06:09:40] *** Quits: lisp123 (~lisp123@45.86.202.12) (Ping timeout: 268 seconds)
[06:20:37] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:20:59] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[06:29:07] *** Joins: lisp123 (~lisp123@45.86.202.12)
[06:53:29] *** Quits: lisp123 (~lisp123@45.86.202.12) (Quit: Leaving...)
[06:57:54] <mfiano> oh ffs
[07:01:07] <mfiano> I finally figured out the correct incantation/ordering of a bunch of ANSI escape sequences to DWIM on every terminal I tested. What a portability nightmare.
[07:10:49] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[07:58:49] <kakuhen> my irc client is slowly marching towards 1 gb ram usage; nice
[07:59:03] <kakuhen> 956.5 mb
[08:01:54] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:14:41] *** Joins: semz (~none@user/semz)
[08:27:13] <jasom> mfiano: have you considered using terminfo?
[08:27:48] <mfiano> I have.
[09:16:12] <moon-child> terminfo isn't less work than raw escapes, and the gains in compatibility are not meaningful
[09:17:13] <moon-child> http://nethack4.org/blog/portable-terminal-codes.html  more worthwhile approach, if you care even a little bit about non-xterm -u8-compatible terminals (you shouldn't)
[09:47:21] <hayley> https://news.ycombinator.com/item?id=29587687 In which deleting dead assignments is bad, because people can't write good benchmarks
[09:49:37] <moon-child> lol, yeah I've always liked that story
[09:51:11] <hayley> smh they didn't read the slides for Lies, Damn Lies and Microbenchmarks by Cliff Click /s
[10:02:58] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[10:31:02] *** Joins: easye (~user@oxi.slack.net)
[10:39:13] <hayley> https://www.multicians.org/thvv/iwrote.html "To make a big deal out of providing the 40-year-old feature of marking a region of memory non executable is kind of sad. Multicians look at each other and make the rubbing-sticks-together gesture."
[10:43:43] <dave0> ehehe nice
[10:51:09] *** Joins: treflip (~user@user/treflip)
[10:56:05] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[11:00:51] <hayley> https://www.multicians.org/pw-stankee.pdf "Our Engineering Department has confirmed that the Aero Model 77 Windmill you suggested will suffice as a power source when 163 units are connected in series."
[11:04:14] <sm2n> ' Another minor clarification: Peter said, "The buffer overflow problem was solved by making everything outside of the active stack frame not executable, and enforcing that in hardware." '
[11:04:22] <sm2n> so no JIT allowed then?
[11:06:14] <hayley> "the active stack frame"? And there was Maclisp, so idk how that works.
[11:07:45] <sm2n> yeah I don't know
[11:21:33] <dave0> what's the comment character in lisp?
[11:21:55] <gilberth> ;
[11:21:56] <moon-child> ;
[11:22:15] <moon-child> gilberth was faster.  The stolen punctuation must be practically oozing out of his pockets
[11:22:32] <gilberth> Outside stack frame? Wouldn't that imply that only the current function is executable?
[11:23:33] <moon-child> presumably that helps with JOP
[11:23:47] <moon-child> and possibly also ROP, depending on what exactly constitutes a stack frame (and what exactly is enforced with hardware)
[11:24:17] <hayley> CALL/CC in one instruction when
[11:24:41] <gilberth> hayley: JMP?
[11:25:48] <dave0> gilberth DOES have a strange fascination with spaces
[11:25:55] <moon-child> 'I still hate having a shell language (ksh) versus a programming language (C++ or variants) on UNIX.'
[11:26:12] <moon-child> '(I still remember the arguments made that put IPC primitives outside the file system, after ditching MAU in the older versions; what  waste of duplication of effort. I was there at the Summit BTL meetings where that stabilized (the wrong way, IMOHO))'
[11:27:32] <moon-child> (^ from 2004)
[11:27:57] <moon-child> (can tell due to the dated ksh reference.  But it still rings true.  :/)
[11:32:46] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:10:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:56:17] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[13:00:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:06:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:18:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:25:14] *** Joins: shka (~herr@109.231.0.226)
[13:49:49] <kakuhen> i have finally made my irc client use 1.04 gb of ram
[13:49:51] <kakuhen> i feel accomplished
[13:51:18] <moon-child> kakuhen: congratulations!
[13:54:38] <kakuhen> thanks
[13:55:03] <kakuhen> it's the best reminder i have to move to my matrix client eventually
[13:55:12] <kakuhen> i'm just lazy to add libera.chat to the federation whitelist and restart the server
[13:56:22] <moon-child> :<
[13:57:40] <moon-child> first, they came for the unix talk protocol users, and I did not speak for them because I was not a unix talk protocol user.  Then they came for the xmpp/jabber users, and I did not speak for them because I was not an xmpp/jabber user
[13:57:56] <moon-child> Then, they came for the IRC users, and--there was no one to speak for me
[14:05:53] * hayley uploaded a video: (3715KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tgHtuyHUrblmTgJvMKDDuKmq/totally-normal-sicp-lecture.mp4 >
[14:11:23] <phoe> Online Lisp Meeting #12 starting in 20 minutes - https://www.twitch.tv/TwitchPlaysCommonLisp
[14:11:26] <phoe> I have not managed to set up an IRC bridge this time, apologies - commenting will need to happen on Twitch.
[14:19:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:21:08] <hayley> phoe: The last video can be used as intro music btw (no, don't actually do that)
[14:21:33] <phoe> hayley: I won't do that
[14:21:39] <phoe> :D
[14:21:43] <hayley> Good thinking
[14:21:57] <kakuhen> moon-child: well, nobody is coming after the IRC protocol
[14:22:19] <kakuhen> it's just that the only decent irc client for me turns out to be quite the memory hog, and i already use matrix
[14:22:41] <kakuhen> i wouldn't have had this issue if i had 32 gb of ram :<
[14:22:52] <kakuhen> in 5 years i'll get a machine with 32 gb of ram and regret not getting 64 gb, calling it now
[14:24:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:26:57] <treflip> kakuhen:  
[14:27:00] <treflip> sorry
[14:27:18] <moon-child> thinking about btb and inline caches
[14:27:44] <moon-child> why not hash-cons thunks for congruent call sites?
[14:28:02] <moon-child> that way you only pay one branch per callee, instead of per caller
[14:28:52] <moon-child> kinda precludes inlining, but
[14:29:06] <hayley> Don't see why not.
[14:29:06] <treflip> kakuhen: Why do you need such a big client?
[14:29:09] *** Parts: treflip (~user@user/treflip) (ERC (IRC client for Emacs 27.2))
[14:29:18] *** Joins: treflip (~user@user/treflip)
[14:38:43] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[14:38:48] *** Joins: random-nick (~random-ni@87.116.181.93)
[14:44:09] <Gnuxie> missed the start forgot lwl
[14:50:20] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[14:50:57] *** Joins: rogersm (~rogersm@90.166.177.48)
[14:51:07] *** Quits: rogersm (~rogersm@90.166.177.48) (Remote host closed the connection)
[15:03:39] <Gnuxie> selwynning: lib dems got to knock down the blue wall today 
[15:04:12] <hayley> That was very metamodular of you
[15:07:48] <Gnuxie> bloody hell is that esrap parsing TeX?
[15:09:57] <shka> what is the blue wall?
[15:10:03] <hayley> Yes.
[15:11:26] <shka> had to check the wiki
[15:18:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:19:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:25:02] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[15:36:47] <Gnuxie> https://techfak.de/~jmoringe/leg-thing-1.ogv new spiderman movie 
[15:42:05] <pl> Gnuxie: reminds me of the game "Carrion", iirc
[15:45:57] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[15:47:49] *** Joins: random-nick (~random-ni@87.116.181.93)
[15:56:46] <hayley> https://twitter.com/TomKnightSynBio/status/1464729971637764099 
[16:10:05] <lonjil> That was some cool stuff in the Online Lisp Meeting 
[16:26:22] <ck_> yes it was
[16:35:08] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:08:18] <scymtym> not esrap, but esrap was one of the inspirations
[17:11:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[17:13:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:27:26] *** Quits: random-nick (~random-ni@87.116.181.93) (Quit: quit)
[17:34:55] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[18:13:03] <dave0> nite all
[18:13:27] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:20:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:21:14] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:22:46] <gilberth> Most languages do not define lexical closure over labels. But once you have that, you have what could be called a computed goto. In the sense that labels could be passed around and invoked. In CL you could say (SETQ TARGET (LAMBDA () (GO L1)) and later jump to that label by a mere (FUNCALL TARGET).
[18:25:23] <gilberth> In this sense, I believe the set of special forms of CL are complete. With other languages I always get the feeling that something is just absent and plain missing.
[18:25:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:26:22] <gilberth> Something that you cannot easily emulate, when it's just not there.
[18:27:24] <gilberth> And sometimes as with my favorite language, you cannot emulate it without a transformation of the whole program including all libraries.
[18:30:10] <gilberth> Yet I cannot find a good definition of this sense of completeness. Just because you could always undermine it by stating that a language is Turing complete and thus a mere program transformation could do.
[18:41:53] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:46:58] <treflip> gilberth: some languages don't even have any notion of goto because "goto bad" :(
[18:47:30] <sham1> Why have a goto when you can do tail-calls between local functions and get a similar effect while being able to pass parameters
[18:51:56] <treflip> sham1: when you have goto you can tranlate Fortran77 to your language easily and transparently :D
[18:52:11] <gilberth> sham1: Tail calls are not specified most of the time.
[18:54:32] <gilberth> And indeed, tail calls are semantically equivalent modulus the non-local part. In fact with my so called "Core Lisp" I have no GOTO at all, but specified tail calls. This is how I came up with this, as my prototype to actually compile that as JMP instructions could almost turn the (FUNCALL TARGET) into an indirect jump instruction.
[18:57:50] <gilberth> treflip: A mere missing goto could and must be emulated by a while (state) switch (state) ... construct.
[18:58:23] <gilberth> Anyhow, my point was that the existence of real closures turns labels into first class objects.
[19:01:12] <gilberth> So, yes. Real closures and GOTO is something I would demand from a "complete" language.
[19:07:48] <contrapunctus> gilberth: speaking of closures...YIL you wrote an LGPL-licensed XML parser. 🤔
[19:09:17] <gilberth> contrapunctus: You refer to CXML aka Closure XML?
[19:09:28] <contrapunctus> Aye
[19:09:53] <gilberth> And? Did it surprise you?
[19:10:15] <contrapunctus> Sort of 🙂
[19:10:58] * contrapunctus wants to make a CL XMPP client
[19:11:05] <gilberth> How so?
[19:12:10] <contrapunctus> Figured you preferred MIT or something, when you spoke of the McCLIM license not being what you expected...
[19:12:52] <gilberth> Indeed. I changed my mind some 20 years ago.
[19:13:08] <gilberth> After I have given it some thought.
[19:13:56] <contrapunctus> gilberth: what motivated the change?
[19:15:29] <gilberth> Well, I don't see a point in the infectious nature of L^nGPL and I don't like its restrictions.
[19:16:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:17:56] <gilberth> That is, I don't buy the free software at all costs doctrine. Also I won't mind if you take my MIT-licensed software and build a multi-billion dollar closed-source business upon that, which you could.
[19:17:59] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:19:25] <gilberth> I like free software though, but it should be really free in the sense you could do anything with it, including building said business, if you wish.
[19:20:38] <contrapunctus> I see...I prefer licenses which are short and easy to understand (e.g. Unlicense, WTFPL, MIT), and I avoided LGPL until very recently...when I realized it required the release of source for only the LGPL-licensed program, and only when said program was modified. (IIUC) I guess I wouldn't mind using LGPL libraries, then...
[19:22:40] <gilberth> Well, the LGPL is not so nice for Lisp. The LLGPL is better. Because: The LGPL could be read as enabling the user of a closed-source app to modify the LGPL'ed lib and have the closed-source app using that modified library.
[19:23:10] <gilberth> This is tricky with Lisp as we don't have shared libraries like C has e.g.
[19:24:25] <gilberth> And it's a slippery slope in presence of macros. Does the LGPL also demand, that a modified LGPL'ed macro would alter how the closed-source application works? Not possible with a closed source application.
[19:26:14] <gilberth> Further: I could see cases in which I may want to release an actual application and not a library under GPL license. For libraries this is nuts in my opinion.
[19:26:18] <sham1> I personally feel that the sanest way to do this stuff is that libraries are MIT or ISC or BSD or whatever other such short and simple licenses or stuff like Apache, and then applications could be GPL, AGPL or whatever
[19:27:27] <gilberth> And I confess that in my early days, I haven't given the license much thought and just used LGPL as everyone else. LLGPL didn't exist yet.
[19:27:58] <gilberth> sham1: Yep, I agree.
[19:28:35] <gilberth> I would release libraries as just "public domain" when the law would allow for that.
[19:29:09] <sham1> Unlicense
[19:30:05] <sham1> Or CC0 I suppose
[19:30:11] <gilberth> Couldn't be any shorter than "This is in the public domain, have fun!" But I cannot do that. It's not possible with local jurisdiction.
[19:33:10] <gilberth> It's a bit of an accident that CXML is under LGPL as I changed Closure's license to MIT. And CXML and the HTML/SGML parser are the two single pieces which survived of my doomed attempt to have a web browser.
[19:34:40] <gilberth> And few bits and pieces live in McCLIM.
[19:40:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:46:13] <contrapunctus> gilberth: this page says that the LLGPL is no longer required 🤔️ https://www.cliki.net/LLGPL
[19:50:03] <gilberth> It does not say that it is no longer required, it begs to use the LGPL. In fact the texts by the FSF the article points to don't talk about the LLGPL at all.
[19:51:38] <gilberth> There has been a long debate at that time how the LGPL can be interpreted. And some interpretations would demand the vendor of a closed-source Lisp application to distribute a compiler, too. Sth with is not possible with e.g. Franz' Lisp.
[19:52:29] <gilberth> In C land this is easy: Distribute a link kit. And with the advent of shared libraries every vanilla ELF executable (linked to shared libraries) is a link kit.
[19:57:00] <pl> some commercial closed source applications are distributed as libraries + linker
[19:57:15] <pl> and you can regenerate the binaries from those
[19:58:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:58:23] <gilberth> Indeed.
[19:58:45] <gilberth> That is what is called a "link kit".
[19:59:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:00:24] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[20:01:16] <pl> ANSYS used to have that distributed, so you could generate optimised runtimes
[20:01:29] <pl> included a whole lot of Perl, Tcl and such
[20:14:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:21:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Read error: Connection reset by peer)
[20:21:50] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:22:44] *** Joins: random-nick (~random-ni@87.116.181.93)
[20:37:26] *** Joins: makomo (~makomo@user/makomo)
[20:43:53] *** Joins: Catie (~user@user/catie)
[21:31:25] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:31:51] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:40:01] *** Joins: clothespin (~awolven@2601:246:4000:1030:5567:9e23:f3da:d184)
[21:45:30] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[21:57:25] <gilberth> Another note: Even with a specified tail call that is no substitute for GO in the general case when the goto is not itself in tail position. In those cases you would need a mechanism like CATCH/THROW. [Unless you want to convert your whole program to CPS; or to flatten things so that the GO in question pops up in tail position.]
[21:58:40] <shka> hi all
[21:58:49] <gilberth> Funny here is, that both LISP and Standard Lisp demand that GO is in tail position relative to the forms in PROG.
[21:58:58] <gilberth> shka: Hello there!
[21:58:59] *** Joins: notzmv (~zmv@user/notzmv)
[22:04:46] <sham1> One thing I wonder about with garbage collection is how a GC system would handle a situation where you'd for example have some lisp codes say, which calls C code which itself calls some lisp code like a callback, and where that 
[22:05:00] <sham1> Latest invocation would trigger a GC
[22:05:48] <gilberth> What would be the problem with that?
[22:06:26] <sham1> Since the GC would have to traverse the stack to find the collection roots, but that's of course a problem with C because the C frames don't have stuff stored in there the same way as the lisp frames
[22:06:54] <sham1> Like something could look like a pointer to the heap even though it's just a number or some such
[22:07:09] <gilberth> Do you expect Lisp data on the C part of the stack?
[22:08:04] <sham1> Well I don't know, that's the thing. And of course nowadays C compilers tend to just omit the usage of the frame pointer which makes stack traversal annoying as well
[22:09:04] <gilberth> Well, for one thing the stack still is there. The frame pointer is of no particular value for traversal anyhow. It's not a linked list.
[22:09:56] <gilberth> And then: You either make sure that there is no Lisp data on the C part of the stack, or you use a conservative or partly conservative collector.
[22:10:33] <gilberth> Such a collector would not move objects, so it does not need to update pointers it finds on the stack to point to a new location.
[22:11:11] <gilberth> And because of that you don't need to know whether some word you find on the stack is actually a pointer or just some random integer which looks like one.
[22:11:37] <sham1> Well you'd still need to keep a track of the live references and wouldn't that mess with it?
[22:11:54] <gilberth> In doubt you get a false positive and marked an object as reachable, which will not actually be reached by the program.
[22:12:08] <sham1> Like if the random integral data happens to look like a pointer to a heap object, but to the middle of one
[22:12:33] <sham1> Like the pointer actually would point to the middle of a big object
[22:12:35] <gilberth> Yes, but you know where you allocated your objects, don't you?
[22:12:42] <sham1> Yes
[22:13:40] <gilberth> But, yes, pointers into the middle of things are very inconvenient.
[22:14:53] <sham1> Well in that case one would have to differentiate between a pointer to the beginning of an object in the GC'd heap and a pointer to the middle of that object
[22:15:09] <gilberth> With such a scheme you still could copy. Just don't move objects you find from a such a word you find of unknown [use] type.
[22:16:17] <gilberth> sham1: Yes, you would need to implement a mapping of <some random pointer to an object or its middle, or just one beyond> to <the actual object>.
[22:16:17] <sham1> Of course one could keep a track of all the GC heap objects, and at least with 16-byte allocation granuality one would only need to keep track of up to 256 pointers per GC heap page
[22:17:32] <gilberth> You could get as sophisticated as you wish. Keep an area for just cons cells e.g. Those are all of the same size.
[22:17:50] <sham1> Of course, separate from other heap objects
[22:17:59] <sham1> An object pool
[22:18:04] <sham1> A pair pool
[22:18:44] <gilberth> You could do as many malloc(3) implementations do and have areas for say 2-word objects, 4-word objects, more small sizes, and anything "huge".
[22:19:39] <gilberth> However, would I design an FFI I would not allow to have Lisp pointers slipped into the foreign enemy territory. C code would never see Lisp pointers.
[22:21:11] <gilberth> sham1: btw the Boehm collector must do something very similar as it gets no assistance from the C compiler what so ever. It too must implement this map of possibly interior pointers to actual objects.
[22:22:22] <gilberth> And even when, it is taking bets. A C compiler might "encrypt" a pointer. Like shift it by a bit, or what ever. In theory.
[22:32:17] <shka> gilberth: this is actually more then just theory
[22:33:04] <gilberth> shka: Have you seen such a behavior? In the wild? Doesn't surprise me.
[22:33:43] <shka> some video games literally encrypt the RAM to make reverse engineering harder
[22:33:58] <shka> intel recently promised hardware memory encryption in the gpu even
[22:34:08] <gilberth> Yes, but that deliberate, or not?
[22:34:39] <shka> yes, it is deliberate 
[22:35:13] <shka> but it is very, unkind, metal world out there 
[22:35:39] <shka> and considerations like this are the reality https://onlinelibrary.wiley.com/doi/full/10.4218/etrij.2019-0427
[22:36:16] <gilberth> I was talking about a C compiler doing this as part of its optimization.
[22:36:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:36:56] <shka> gilberth: oh, i totally anticipate that this will become a standard "security" measure in the near future
[22:37:08] <shka> if it is not, already 
[22:37:37] <shka> and compilers will be outfitted with extensions to just that 
[22:37:50] <shka> not even for performance 
[22:37:51] <gilberth> This is almost funny.
[22:38:05] <shka> yeah, cynics can't stop laughing 
[22:38:12] <gilberth> Security by obscurity? Again.
[22:38:22] <shka> yes
[22:38:32] <gilberth> Anyhow, you know how the first bots came to Quake IIRC?
[22:38:41] <shka> i do not
[22:39:26] <gilberth> That were just programs playing the online game by talking the whatever protocol.
[22:40:08] <gilberth> People were at first surprised about those player that never miss and could see through walls.
[22:42:34] <shka> i will have to read this up because it does not sound right
[22:42:45] <semz> My guess before clicking on the link was DRM, but anti-cheat is close I guess.
[22:43:10] <shka> semz: some DRM also do that
[22:44:00] <shka> denuvo also does tome binary fuckery IIRC
[22:44:02] <sm2n> Another thing some drm does is virtualizing instructions
[22:44:07] <gilberth> I never got the idea behind DRM.
[22:44:08] <semz> Not surprising, it seems to be the main driver behind these "security" measures that strangely only ever target the nominal machine owner.
[22:44:08] <sm2n> just to make it hard to RE
[22:44:15] <shka> sm2n: yeah, denuvo famously 
[22:44:21] <semz> gilberth: Wishful thinking.
[22:44:21] <sm2n> it's crazy and stupid
[22:46:28] <gilberth> I once read a study by IIRC Valve that most people use anti-DRM measures, just because it is the more convenient way to get at the content, if not the only way. It's not about not paying for a title.
[22:46:53] <shka> because it is true
[22:47:16] <shka> 100% true
[22:47:23] <shka> DRMs are fucking annoying
[22:47:29] <gilberth> In the ere of CD-ROMs still, the very first thing I would do is to find a No-CD crack. Because I don't want to act as a disk jockey. I hate that.
[22:47:30] <shka> especially online drms
[22:48:27] <gilberth> I want my games to reside on some hard disk and be able to play it without needing to search for a physical token.
[22:49:33] <semz> the hilarious thing is that the ever more draconian DRM only really fucks over the legitimate customers
[22:49:36] <semz> the pirates don't care
[22:49:59] <semz> they're actively shooting themselves in the foot to stop the bleeding
[22:50:53] <gilberth> Same story with movies. I personally don't watch movies, but a copy you find somewhere in the internet can (1) be watched without a token (2) can be watched without any warnings you can't skip (3) is available way sooner than you could legally buy it, just because it is not yet sold in your region.
[22:52:04] <gilberth> Yes, and the class of hoarding pirates won't be customers anyway.
[22:52:54] <gilberth> They mindlessly hoard content, just because they can.
[22:54:57] <gilberth> And the success of platforms like iTunes or Steam show that you could do without DRM.
[22:56:22] <gilberth> I personally like the comfort of Steam. You see a game, you might like, pay a few EURs and have it on your disk in no time and can play it everywhere.
[22:58:20] <sham1> Well Steam exactly shows that people are willing to put up with DRM if it's convenient. I think you meant to say GOG
[22:59:24] <gilberth> iTunes is a good example, too. I personally don't buy much music. The industry made zero EUR from me between about 1995 and about 2012. I just bought none, zilch, zero. With iTunes I actually buy an album every now and then.
[23:01:14] <gilberth> sham1: Right. Steam uses DRM, doesn't it?
[23:01:19] <sham1> Yes
[23:01:58] <gilberth> I almost forgot.
[23:02:13] <sham1> Most people don't care about DRM if the DRM isn't crappy
[23:02:28] <sham1> And steam is very much not crappy
[23:03:10] <gilberth> Yes, see, I never noticed. ;-)
[23:03:44] <sham1> Indeed. If a legit user isn't bothered by it, it's a good DRM
[23:04:32] <sham1> Of course one would prefer not having DRM probably, but that's not realistic always
[23:06:03] <gilberth> Well, with software you have this trend to not being able to buy a software, but only to rent it. Because it's a subscription in the cloud.
[23:07:35] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[23:07:35] *** ChanServ sets mode: +o MichaelRaskin
[23:08:11] <ck_> "the shareholders must be pleased"
[23:11:01] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: regular distro update)
[23:11:46] <gilberth> Not only that. It would also provide you with a constant stream of money without the need to sell a new version every year or so, just because it's new and shiny.
[23:17:58] <shka> the shareholders require the sacrifice 
