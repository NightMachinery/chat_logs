[00:00:00] <sonny89> no, I have not seen those yet, but they are now on the list!
[00:00:03] <pyzozord> I need to watch both
[00:00:13] <sonny89> I haven't even seen starwars yet lol
[00:00:24] <pyzozord> feature films from 70s indeed can be masterpieces
[00:00:26] *** Joins: zaher (~zaher@37.48.152.102)
[00:01:01] <sonny89> yep
[00:01:28] <sonny89> I saw laurence of arabia this year after putting it off for so long, great flick
[00:01:51] <GeDaMo> Dark Star is a sci-fi comedy
[00:02:02] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[00:02:07] <GeDaMo> Phase Four is weird :P
[00:02:48] <sonny89> I just looked that up, it's marvel stuff?
[00:03:01] *** Quits: zaher_ (~zaher@37.48.144.85) (Ping timeout: 256 seconds)
[00:03:05] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[00:03:20] <GeDaMo> No, the Marvel films are divided into phases but there's a film called Phase Four
[00:03:33] <GeDaMo> https://en.wikipedia.org/wiki/Phase_IV_(1974_film)
[00:03:33] <bayaz> Title: Phase IV (1974 film) - Wikipedia 
[00:03:38] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[00:03:48] <sonny89> woah yeah that looks like horror
[00:04:31] <GeDaMo> I'm not sure I would call it a horror
[00:05:37] <ircuser> ok dumb question: how is docker any different than just running something like Make with qemu
[00:05:49] <ircuser> why does docker even exist 
[00:06:13] <sonny89> app runtime
[00:06:15] <ircuser> aren't scripts themselves the most portable and customizable way of deploying software? 
[00:06:32] *** Quits: jaysicks (~jaysicks@94-21-138-235.pool.digikabel.hu) (Ping timeout: 240 seconds)
[00:06:37] <sonny89> nope
[00:06:53] <sonny89> it's non trivial to write portable stuff anyways
[00:07:38] <sonny89> but, that's probably just historical legacy, in theory I'd say yes
[00:08:02] <ircuser> if Make solved problem of writing portable code and had some type of orchestration piece where you could run multiple make files and set up networking and shit, then I dont see any use for docker
[00:08:34] *** Quits: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:08:41] *** Quits: jab416171 (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[00:09:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:09:06] <sonny89> sure
[00:09:49] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:f9b1:c475:746a:8f2c) (Ping timeout: 265 seconds)
[00:10:40] *** Joins: xff0x (~xff0x@2001:1a81:523b:c600:e658:9e80:725:12f4)
[00:10:46] <sonny89> hmm, I think docker also has some security benefits iirc
[00:10:53] <sonny89> app isolation
[00:13:47] <MrMobius> ircuser, this seems pretty good https://www.youtube.com/watch?v=SbArdk-TPus
[00:13:48] <bayaz> Title: Getting started with Linux Containers 
[00:13:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[00:13:59] <MrMobius> first 20 minutes or so explains
[00:14:03] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[00:15:36] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[00:16:38] *** magla is now known as geli
[00:16:41] *** Joins: zaher_ (~zaher@178.171.254.13)
[00:16:50] *** Quits: j1mu5 (~j1mu5@user/j1mu5) ()
[00:17:45] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[00:18:09] *** Quits: ThreeOfLife (~ThreeOfLi@108.red-83-58-131.dynamicip.rima-tde.net) (Quit: Client closed)
[00:18:10] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[00:19:47] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Quit: oof.)
[00:20:38] *** Quits: zaher (~zaher@37.48.152.102) (Ping timeout: 256 seconds)
[00:21:14] <pyzozord> ircuser: it uses multiple linux kernel technologies to isolate the running process
[00:21:26] *** Joins: viaSanctus (~viaSanctu@d5152c2f0.static.telenet.be)
[00:21:26] *** Quits: viaSanctus (~viaSanctu@d5152c2f0.static.telenet.be) (Changing host)
[00:21:26] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[00:21:51] <pyzozord> ircuser: for example it makes a different file system just for the running process and makes that process think that this is the only file system available
[00:22:08] <pyzozord> ircuser: same thing with other resources like processes or networking
[00:22:14] <viaSanctus> anyone familiar with fluent nhibernate?
[00:22:50] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[00:22:56] *** Joins: RazielZ (~Raziel@user/raziel)
[00:23:05] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[00:25:38] *** Joins: zaher__ (~zaher@37.48.152.102)
[00:26:14] *** Quits: geli (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[00:26:16] *** zaher__ is now known as zaher
[00:26:28] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 268 seconds)
[00:27:43] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Client Quit)
[00:27:45] *** Quits: nat_of_cy (~nat_of_cy@user/nat-of-cy/x-1732112) (Remote host closed the connection)
[00:29:39] *** Quits: zaher_ (~zaher@178.171.254.13) (Ping timeout: 256 seconds)
[00:31:05] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[00:34:49] <nomagno> Made my JMP instruction take an address. An assembler for the instruction set can now easily implement (stack-less) subroutines!
[00:34:53] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:34:59] *** Joins: sfields_ (~sfields@2605:a601:adea:7a00:c93f:d271:743d:e1bd)
[00:35:46] <d3x0r> just need to make jump take a register now :)
[00:35:47] <ircuser> pyzozord: can't I just use chroot and attach my own file systems to my process myself?
[00:35:57] <ircuser> I "get it" to some extent but just feel its overhyped
[00:35:59] <ircuser> for what it is
[00:37:17] *** Joins: peteyboy_ (~peteyboy1@95.169.232.161)
[00:40:08] <nomagno> dx0r: my VM has a unified address space for one register, one general purpose memory chip, a Zero Flag, a Carry Flag, and output/input registers. So it already does that!
[00:40:55] <d3x0r> nomagno jmp 1245 isn't the same as jmp r1
[00:41:21] <pyzozord> ircuser: I'm not sure, but I think docker uses chroot
[00:41:23] <nomagno> dx0r: How does taking an actual register work?
[00:41:33] <nomagno> That sounds counter-intuitive
[00:41:34] *** Quits: sonny89 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:41:36] <d3x0r> mov r1,1245 jmp r1
[00:42:17] <pyzozord> ircuser: https://github.com/danistefanovic/build-your-own-x#build-your-own-docker
[00:42:18] <bayaz> Title: GitHub - danistefanovic/build-your-own-x: 🤓 Build your own (insert technology here) 
[00:42:23] <nomagno> Like I said, my virtual CPU doesn't actually distinguish between memory and registers
[00:42:25] *** Quits: Duckle (~Duckle@user/duckle) (Quit: Poof goes the quack - The Lounge - https://thelounge.chat)
[00:42:35] <nomagno> Its artificially split up in the address space
[00:42:41] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 265 seconds)
[00:42:55] <nomagno> It is implementable, but fairly hard to implement
[00:43:09] <pyzozord> ircuser: also specifically https://www.youtube.com/watch?v=8fi7uSYlOdc&disableadblock=1
[00:43:10] <bayaz> Title: Containers From Scratch • Liz Rice • GOTO 2018 
[00:43:17] <d3x0r> I see ... saying it takes a memory address iddn't imply 'jmp [1245]' just 'jmp 1245'
[00:43:46] <pyzozord> ircuser: I think the hype is that it's just a de facto standard
[00:43:50] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[00:43:51] <d3x0r> docker is a VM like VMware or VirtualBox; it's not just a 'chroot' though that can get you  along way there
[00:44:07] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[00:44:09] <pyzozord> ircuser: which means that everyone can use it and build on what other people have
[00:44:11] *** Joins: Duckle (~Duckle@user/duckle)
[00:44:38] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[00:44:42] <nomagno> In my (as of yet unimplemented) assembly literals are actually brace-enclosed, and addresses are the default
[00:45:08] <nomagno> Controversial design decision
[00:45:46] <pyzozord> GeDaMo: in ecma-335 I can find a definition of attributes, but I cannot find that #[] syntax
[00:47:18] <GeDaMo> I think it said that was from C#, ECMA-334?
[00:48:03] <d3x0r> c# attributes are just [] tags...
[00:48:18] *** Joins: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c)
[00:48:37] <pyzozord> i'm not very good at finding my way around specifications like this
[00:48:46] <pyzozord> I'll check out 334 too
[00:50:06] *** Quits: password2 (~password8@user/password2) (Ping timeout: 256 seconds)
[00:51:32] *** Joins: flakland (~flaknet99@32.211.211.39)
[00:57:31] *** Joins: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net)
[00:59:00] <Themis3000> d3x0r: docker isn't really like a vm, it's got some key differences. In a docker container the hardware isn't virtualized and the system kernel is shared. It's more of a containerizing and sand boxing thing then a virtualization thing from my understanding
[00:59:02] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[00:59:23] <Themis3000> from a high level I guess they're kinda similar though, certainly helps understanding of what they are
[00:59:54] <d3x0r> Themis3000 behaves much more like a VM to me - it's got an entire linux image, and runs virtual devices... that kernel is NOT in the host OS
[01:00:07] <flakland> it's more like a virtual distro than machine
[01:01:26] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[01:02:02] *** Quits: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[01:02:03] <d3x0r> much more like vmplayer than just a file system or distriution in a parallel file system
[01:02:23] <d3x0r> not like Vmware thinapp
[01:02:41] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[01:02:47] <nomagno> How it behaves it one thing. What it is is another
[01:02:49] <flakland> it can run multiple archictectures at once?
[01:02:54] <d3x0r> no
[01:02:55] <nomagno> it shares the actual low-level system driver, the kernel
[01:03:06] <d3x0r> no
[01:03:07] <nomagno> Hence, it isn't actually virtualization
[01:03:19] <nomagno> it's very bloaty containerization 
[01:03:29] <nomagno> But not virtualization
[01:04:01] <d3x0r> what the hair that's split to make it one and not the other
[01:04:08] <d3x0r> what's
[01:04:30] <nomagno> d3x0r: Wether it shares components with the host OS or not
[01:04:45] *** Joins: Pickchea (~private@user/pickchea)
[01:04:49] <d3x0r> that's like saying all VMs are just containers
[01:04:52] <Themis3000> d3x0r: https://en.wikipedia.org/wiki/Docker_(software) read the first paragraph, it says that it shares a single os kernel. I think it's technically a form of virtualization, but it isn't hardware virtualization like a vm is
[01:04:52] <bayaz> Title: Docker (software) - Wikipedia 
[01:04:57] <d3x0r> they all sahre the host disk system and memory
[01:05:26] <d3x0r> yjru vsm'
[01:05:27] <deniska> docker is closer to launching a process in a fancy way than to virtualization
[01:05:37] <d3x0r> they can't chare the same kernel - every docker image starts with its own kernel
[01:05:40] <nomagno> They don't actually 'share' it. The host OS administers it for the VM
[01:05:42] <deniska> it's like xen-lite :)
[01:05:56] <Themis3000> docker is quite strange, I don't totally understand how it works at a low level at all. It is certainly not a vm though, there's key differences 
[01:06:00] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[01:06:07] <d3x0r> docker doesn't get the disk either - other than the package/container build stuff
[01:06:07] <nomagno> `OS-level virtualization is an operating system paradigm in which the kernel allows the existence of multiple isolated user space instances.`
[01:06:12] <d3x0r> which isn't really docker but docker-builder or something
[01:06:21] <Themis3000> I didn't realize that for a long time, I only learned about it recently sine I started working with a lot
[01:06:22] <nomagno> OS-level virtualization is more commonly called containerization 
[01:06:35] <sonny> it's all under virtualization
[01:06:42] <deniska> Themis3000: linux has namespaces for various userspace components, on a typical system everything runs in a single namespace, docker manages additional namespaces
[01:06:47] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Remote host closed the connection)
[01:06:50] *** Joins: Guest1 (~Guest1@96-65-219-197-static.hfc.comcastbusiness.net)
[01:06:59] <nomagno> ^
[01:06:59] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[01:07:02] *** Joins: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net)
[01:07:25] <sonny> d3x0r it's not different, just referring to something specific
[01:07:25] <Themis3000> deniska: Oh interesting, I didn't know that's exactly how it worked. That makes sense
[01:08:01] <sonny> cgroup?
[01:08:03] <nomagno> You have VMs that run at the CPU level, at the OS level, or are directly emulated
[01:08:10] <flakland> theres a bit more to it than just namespaces but thats the enabling mechanism
[01:08:21] <Guest1> test
[01:08:27] <flakland> oh boy another guest user
[01:08:31] *** Quits: user51 (~user51@176.228.151.30) (Remote host closed the connection)
[01:08:40] <nomagno> the formers are known as VMs running inside hypervisors, the middle one as OS-level VMs or as containers, and the latter ones as VMs or emulators
[01:08:43] <nomagno> It's all very similar
[01:08:49] <nomagno> there isn't even proper coloquial terminology
[01:08:53] <nomagno> but it's different
[01:09:02] <sonny> there is, it's called vm
[01:09:21] <nomagno> There isn't even proper coloquial terminology to distinguish them*
[01:09:38] <sonny> ah that, yeah
[01:09:44] <sonny> context is required
[01:09:54] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:09:57] <deniska> well, while docker uses pretty much the same features as, say, LXD, LXD looks much more like a VM than docker in how they're used
[01:10:59] <sonny> I'm convinced container madness is just because we don't have a suitable os
[01:11:20] <sonny> well, a good portion of it
[01:11:29] <sonny> app runtime stuff, idk that's kinda weird
[01:12:17] <sonny> I mean more in terms of kubernets, lxd, etc
[01:12:35] *** Quits: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[01:12:38] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[01:12:55] *** Joins: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[01:14:10] *** Quits: sh1r4s3 (~sh1r4s3@193.169.4.174) (Ping timeout: 260 seconds)
[01:14:13] <nomagno> sonny: I mean, the Linux kernel is as neutral as it could be. There are tons of different pieces of software that add virtualization on top of it in different ways. Xen adds proper virtualization down to the hypervisor while not actually giving up much interoperability, Docker simply takes extra steps to make the other userspace apps isolated from it, KVM supplies hypervisor full VMs, and QEMU full emulation
[01:14:23] <nomagno> I don't think we need an OS for each of these functions
[01:14:25] <nomagno> any modern OS can perform them
[01:15:02] <sonny> not this, app isolation & networking
[01:15:08] <flakland> is it really a "virtual machine" if it has to be the "exact same machine as host" ?
[01:15:29] <nomagno> flakland: You can argue the same about stuff running under KVM
[01:15:38] <flakland> right
[01:15:38] <nomagno> I argue 'VM' should be reserved for emulators
[01:15:58] <nomagno> as in, programs that have full control over the guest CPU
[01:16:09] <nomagno> that's a Virtual Machine, in proper old-school terms
[01:16:09] <sonny> vm is just cpu in software
[01:16:21] <flakland> intel started this madness with the vm8086 
[01:16:23] <nomagno> Well yeah
[01:16:39] <nomagno> Hypervisors confuse of this tough
[01:17:09] <nomagno> And the 'ring -1, -2, -3'... nonsense is even more confusing
[01:17:10] <nomagno> I'm not saying it's not useful
[01:17:41] <nomagno> but it seems like the conceptualization of this stuff is just being patching on top of different old terminology
[01:17:55] *** Joins: jaysicks (~jaysicks@94-21-138-235.pool.digikabel.hu)
[01:18:14] <beaky> yes it is very old like 1960s and 70s i think
[01:18:27] *** Quits: superdupond (~Kev@2a01cb0400149f001ce1d826eeffaa92.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[01:18:54] *** Joins: jazzy2 (~jaziz@user/jaziz)
[01:19:34] <beaky> back in the mainframe days
[01:19:44] <sonny> ah
[01:19:49] <nomagno> if you replace 'Virtual Machine' with 'Software Turing Machine' it actually makes a fair bit more sense.
[01:19:55] <sonny> P-code was also in the 60s?
[01:20:04] *** Joins: ixil (~ixil@82.197.178.137)
[01:20:14] *** Quits: Akuli (~Akuli@82-203-160-25.bb.dnainternet.fi) (Quit: Akuli)
[01:20:38] * nomagno Daily complaint about x86 being a completely bonkers insane bloaty instruction set
[01:23:59] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Quit:  )
[01:24:13] *** Joins: Auron (~Auron956@user/auron)
[01:24:23] <flakland> i think negative rings make sense for things that completely bypass the CPU protection checks, like mmu or a pci bus master ?
[01:24:28] <beaky> p-code was 70s i think since pascal came around that time 
[01:28:36] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Quit: Leaving)
[01:30:17] *** Joins: Atque (~Atque@user/atque)
[01:33:32] *** Joins: vit (~vit@chello085216193138.chello.sk)
[01:33:55] *** vit is now known as Guest6777
[01:36:02] <Guest1> <new topic> I deserve good things in life. I'm 3%sure;
[01:36:11] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[01:37:32] *** Quits: Guest6777 (~vit@chello085216193138.chello.sk) (Client Quit)
[01:37:51] *** Joins: vit (~vit@chello085216193138.chello.sk)
[01:38:15] *** vit is now known as Guest8270
[01:38:24] <pyzozord> nomagno: there are cpus that natively execute bytecode of a given language
[01:39:05] *** Joins: inky_ (~inky@46.36.112.226)
[01:39:14] *** Quits: _inky (~inky_@5.77.181.107) (Ping timeout: 265 seconds)
[01:39:30] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:40:22] <pyzozord> i think the vm is the correct therm, it's virtual machine, either x86 or turing
[01:40:33] <pyzozord> a virtual turing machine, or virtual intel x86 machine
[01:42:19] <pyzozord> i guess wikipedia distinguishes between "virtual machine" and "interpreter"
[01:42:37] *** Quits: inky (~inky@5.77.181.107) (Ping timeout: 265 seconds)
[01:42:45] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:42:59] <pyzozord> on the other hand, java calls it's interpreter virtual machine, so it seems like there is no definitive consensus
[01:43:31] <vdamewood> The Java VM was called that because it was a virtual CPU with its own machine language.
[01:43:52] <vdamewood> Though, really, it's just an interpreter of JVM bytecode.
[01:44:08] <pyzozord> i think it's the same thing isn't it
[01:45:03] <vdamewood> Uhh... same thing as what?
[01:45:11] <vdamewood> each other? Yeah, pretty much.
[01:45:14] *** Joins: vin (~vin@user/crash)
[01:46:05] <pyzozord> i'd personally call all of them VMs, and then I'd define subtypes "abstract vm" and "concrete vm", AVM and CVM
[01:46:23] <vin> I am trying to understand external distribution sort/ multiway quick sort. https://www.youtube.com/watch?v=GI6wup8D5U8 here is a video explaining it. What I don't understand is how splitting of elements happen using selection algorithm when we know the elements aren't in sorted order.
[01:46:24] <bayaz> Title: 03 - IO Model -The distribution sort 
[01:46:25] <pyzozord> even kind of sounds sciency
[01:46:36] <vdamewood> Personally, I wish we'd stick to using the term virtual machine to mean things like what hypervisors do.
[01:46:43] <sonny> ya
[01:46:56] <sonny> cpu interprets machine code
[01:47:10] <vdamewood> And then use the term bytecode interpreter, or virtual instruction set interpreter for the Java sort of 'VM'.
[01:47:43] <sonny> these bytecode intrepreters predate hypervisors
[01:47:54] <cool2077> bjarne stroustrup said in one talk that machine code is converted to 'something else' before the cpu runs it
[01:48:06] <pyzozord> microcode
[01:48:08] <vdamewood> cool2077: On some CPUs yes.
[01:48:42] <pyzozord> but that is being inside the cpu, so one can argue that it is kind of already being at least processed, or processored :P
[01:48:53] <cool2077> i heard elsewhere that some CISC cpus convert instructions to RISC before executing them or vice versa.. or something like that.. idk if that's what that is
[01:48:56] <vdamewood> Since the Pentium or so, Intel CPUs have been RISC machines with a translation layer on tip.
[01:49:16] <vdamewood> cool2077: It's usual CISC-to-RISC translation.
[01:49:22] <vdamewood> usualy*
[01:49:36] <Guest1> I heard that all CPUs are electric flow
[01:49:48] <flakland> i don't consider hypervisor a virtual machine, i see it as a trick to run multiple kernels on the same hardware
[01:50:00] <pyzozord> i'm ok with calling the them "interpreters and hypervisors", but I think vm as the general term for all of them is a good one
[01:50:01] <cool2077> doesnt microcode just mean cpu instructions?
[01:50:22] <pyzozord> because conceptually they are the same, just that hypervisors tend to be more complex and model existing devices
[01:50:22] <vdamewood> cool2077: Nope. Microcode specifically means the underlying instructions that the CPU translates your program to.
[01:50:51] *** Joins: pavonia (~user@user/siracusa)
[01:51:07] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:51:09] <kzootech> ^ our processors are basically actually risc machines and our complex opcodes get translated to microcodes (dont tell ANYONE)
[01:51:10] <cool2077> vdaemwood: what's the difference between assembled binary instructions and those?
[01:51:15] <vdamewood> flakland: Except the guest 'kernel' (or whatever, it doesn't even have to be a kernel) gets a virtual memory bus, a virtual hard drive, a virtual network card, and basically a whole machine.
[01:51:16] <pyzozord> flakland: yeah that's a good point, hypervisor is more of an implemetation/optimization detail
[01:51:48] *** Quits: Guest1 (~Guest1@96-65-219-197-static.hfc.comcastbusiness.net) (Quit: Client closed)
[01:52:01] <cool2077> vdamewood *
[01:52:22] <vdamewood> An OS running under a hypervisor has to use drivers for the virtual machine's devices, though. It doesn't get direct access to the host machine's hardware.
[01:52:27] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:52:47] <flakland> right so the real kernel is in hardware and it grants you the ability to run more than one program through it
[01:53:04] <cool2077> real kernel is in hardware?
[01:53:06] <flakland> hardly worthy of being classified as a separate machine
[01:53:11] <cool2077> youre saying some wild things
[01:53:32] <flakland> think about EFI, it runs EFI programs
[01:53:37] <flakland> cool2077
[01:53:41] *** Quits: peteyboy_ (~peteyboy1@95.169.232.161) (Ping timeout: 245 seconds)
[01:53:44] <flakland> they don't call it a kernel
[01:53:57] <cool2077> so you dont mean OS kernel
[01:54:05] <pyzozord> i heard also of things like north bridge and south bridge
[01:54:21] <vdamewood> cool2077: I'm not quite sure what you're asking re assembled instructions.
[01:54:24] <cool2077> vdamewood: what's the difference between assembled binary instructions and microcode instructions?
[01:54:35] <pyzozord> going all the way down there are also chips that control your usb ports, it's kernels all the way down
[01:54:39] *** Quits: hsges (~AnCELASTR@186.189.239.67) (Ping timeout: 256 seconds)
[01:54:52] <PlanckWalk> Assembled binary instructions are input to the CPU
[01:54:55] *** Joins: _inky (~inky_@46.36.112.226)
[01:55:11] <pyzozord> forgot the name, for those kind of chips
[01:55:15] <PlanckWalk> Microcode is *inside* the CPU and affects how the CPU processes its input
[01:55:21] <vdamewood> pyzozord: Microcontrollers
[01:55:29] <pyzozord> vdamewood: yes! thanks
[01:55:52] *** Joins: nuh^ (~nuh@68.101.58.90)
[01:56:18] <cool2077> by kernels, you mean firmware?
[01:56:23] <vdamewood> Nope.
[01:56:24] <pyzozord> what we call things and how we categorize them is usually blury and there are always exceptions and gradients
[01:56:31] *** Quits: bud (~bud@user/bud) (Quit: Leaving.)
[01:56:49] <sonny> efi can do a lot iirc
[01:56:54] <vdamewood> Oh, yeah, pyzozord; I wouldn't call the things on microcontrollers kernels.
[01:57:25] <vdamewood> It's just firmware.
[01:57:37] <pyzozord> vdamewood: yes you are right
[01:57:50] <pyzozord> I want a little bit creative with my naming there
[01:57:58] <cool2077> i know a binary instruction can go and be "decoded", which means there's logic gate like logic wired up such that different parts of an instruction do what they're supposed to
[01:58:07] <PlanckWalk> To be fair, you can have a kernel implemented in firmware
[01:58:15] <cool2077> how does microcode fit there?
[01:58:35] <vdamewood> PlanckWalk: Oh, yes, indeed.
[01:59:20] <vdamewood> cool2077: Are you familiar with any CPU's instruction set?
[01:59:55] <pyzozord> cool2077: machine code gets "decoded" to microcode that is being routed to specific modules of the cpu to carry out actual computations
[02:00:17] <pyzozord> well, not even airquotes, it is really decoded
[02:00:19] <cool2077> vdamewood: slightly. most i used was an educational one
[02:00:22] <PlanckWalk> Are you sure you're not thinking of micro-ops?
[02:00:53] <pyzozord> aren't micro-ops the same thing as microcode
[02:00:53] <vdamewood> pyzozord: They;re not air quotes if you actually type them out. :P
[02:00:59] *** Joins: Guest1215 (~Guest12@pool-96-253-74-73.rcmdva.fios.verizon.net)
[02:01:17] <vdamewood> pyzozord: If machine code and opcodes are the same thing
[02:01:29] <pyzozord> vdamewood: those were reified air quotes :D
[02:02:13] <cool2077> in nand 2 tetris you go through making a simpler computer with logic gates
[02:02:14] <PlanckWalk> Microcode handles decoding into micro-ops for complex instructions
[02:02:36] <cool2077> simple*
[02:02:45] <PlanckWalk> Simple instructions just use fixed function circuits.
[02:03:10] <cool2077> in that cpu, instructions from the bus would go into a 'decoder'
[02:03:30] <cool2077> which was just a bunch of logic gates connected such that they send to other parts of the cpu what they're supposed to
[02:04:11] <PlanckWalk> Yep, simple CPUs don't have (or benefit from) microcode
[02:04:53] <PlanckWalk> In theory you could do it even there
[02:05:08] <pyzozord> arguably all of it is just a bunch of logic gates connected in different ways
[02:05:24] <PlanckWalk> The main difference with microcode is that it's writeable
[02:05:29] <vdamewood> microcode is basically what happens when you have an old CISC design and want the benefits of RISC without breaking backward compatability.
[02:05:32] <cool2077> that is what it all was in that one computer
[02:05:39] <cool2077> starting from nand gates
[02:06:06] <PlanckWalk> Well, modern microcode
[02:06:16] <cool2077> so is microcode like, programming the decoder?
[02:06:30] <cool2077> vdamewood: i see
[02:06:31] <pyzozord> no
[02:06:41] <cool2077> so a level of translation
[02:06:44] <cool2077> kinda like two decoders
[02:06:48] <pyzozord> yes
[02:06:53] <PlanckWalk> It's basically using a table instead of logic gates directly
[02:07:14] * vdamewood puts food on the table... and ruins the CPU.
[02:07:32] * cool2077 test
[02:07:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[02:07:37] * pyzozord processes the cpu
[02:07:40] <vdamewood> cool2077: Test failed.
[02:07:43] * pyzozord processes the food
[02:07:51] <cool2077> like most of my tests
[02:07:59] <PlanckWalk> E.g. a ROM to look up state transitions for how to decode some instructions
[02:08:03] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:08:58] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[02:09:20] <PlanckWalk> Usually complex, slower instructions.
[02:09:50] <pyzozord> https://en.wikichip.org/w/images/2/2d/sunny_cove_block_diagram.svg
[02:09:51] <bayaz> Type: image/svg+xml 
[02:09:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:10:25] <pyzozord> https://en.wikichip.org/w/images/7/7e/skylake_block_diagram.svg
[02:10:25] <bayaz> Type: image/svg+xml 
[02:11:07] *** Quits: ghost64 (~ghost64@user/ghost64) (Remote host closed the connection)
[02:11:34] <vdamewood> Cool. Tonight, the celebration of kicking Selucid ass begins.
[02:12:00] *** Quits: Inline (~Inline@aftr-37-201-240-2.unity-media.net) (Remote host closed the connection)
[02:12:49] <vdamewood> Isn't it usually GeDaMo who shares that link?
[02:12:59] <vdamewood> Oh, GeDaMo isn't here right now.
[02:13:21] *** Quits: ircuser (~ircuser@S01069050ca4e3573.cg.shawcable.net) (Ping timeout: 256 seconds)
[02:13:21] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[02:13:28] <pyzozord> yes, I just thought it was compulsory to share them
[02:13:48] *** Joins: gargus (~user@114.198.29.250)
[02:13:57] <vdamewood> Yep. And I guess someone has to take over when GeDaMo isn't around.
[02:14:14] * vdamewood gives pyzozord a treat.
[02:14:19] <nomagno> pyzozord: Sorry for asking again, but did you get around to running the little test in the repo?
[02:14:36] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:14:50] <pyzozord> nomagno: oh, i forgot about that! I totally did nothing productive today I could have tested it
[02:15:06] <pyzozord> nomagno: I'll check it out tomorrow around the same time as now
[02:15:11] <pyzozord> bit earlier
[02:15:18] <nomagno> I mean, if you have any kind of C compiler at hand you can still test it
[02:15:48] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:15:50] <d3x0r> https://godbolt.org?
[02:15:51] <bayaz> Title: Compiler Explorer 
[02:15:52] *** Quits: blahblah441_ (~blahblah4@89.46.62.154) (Quit: byeeeee)
[02:16:03] <nomagno> Oh I haven't tested it there!
[02:16:04] *** Joins: blahblah441 (~blahblah4@89.46.62.154)
[02:16:18] <pyzozord> can godbolt compile entire github repos?
[02:16:23] <pyzozord> that would be amazing
[02:16:43] <nomagno> Its a Gitea repo, but I'll just make a little page to test the VM on and share easily anyways
[02:17:13] *** Quits: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[02:17:33] <pyzozord> i was thinking of spinning up a vm to test it
[02:17:37] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[02:17:50] <pyzozord> a hypervisor that is
[02:18:45] *** Joins: hsges (~AnCELASTR@186.189.239.67)
[02:18:46] <pyzozord> that came out more sarcastic than funny, unintentionally
[02:19:21] <vdamewood> Though, a hypervisor isn't a VM.
[02:19:44] <vdamewood> I hypervisor is the program that allows VMs to run.
[02:19:48] <vdamewood> a/I/A/
[02:19:52] <d3x0r> when does hypervisor stop and vmwareplayer start ?
[02:19:55] <vin> I am not able to understand distribution sortso well. This explains it https://www.youtube.com/watch?v=GI6wup8D5U8 but what I don't understand is how splitting of elements happen using selection algorithm when we know the elements aren't in sorted order.
[02:19:56] <bayaz> Title: 03 - IO Model -The distribution sort 
[02:20:14] <d3x0r> vmware player does run it on real hardware it's not really a VM though you have to enable virtualization suppport
[02:20:15] <pyzozord> yeah I meant qemu
[02:20:21] *** Joins: ghost64 (~ghost64@user/ghost64)
[02:20:23] <d3x0r> there's emulated VM's
[02:20:42] <d3x0r> docker isn't that - can't build arm on x86 and vice versa
[02:20:43] <pyzozord> interestingly qemu calls itself "machine emulator and virtualizer"
[02:21:10] <vdamewood> pyzozord: Yes, virtualization and emulation are separate things, and Qemu does both.
[02:21:37] <vdamewood> pyzozord: Emulation without virtualization is what Apple does with Rosetta.
[02:21:42] <pyzozord> I don't understand the difference exactly
[02:21:48] <pyzozord> one is much slower
[02:22:00] <vdamewood> Virtualization without emulation is when you run another machine inside another, eg with VMware.
[02:22:17] <pyzozord> that is what hypervisor does
[02:22:19] <vdamewood> Virtualization and Emulation combined is when you run another OS that natively runs on another CPU inside another one.
[02:22:30] <vdamewood> pyzozord: Hypervisors do virtualization, not emulation.
[02:22:40] <pyzozord> yes, got it
[02:23:05] <pyzozord> emulator will let you run a different architecture completely, like arm guest on x86 host
[02:23:23] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 250 seconds)
[02:23:40] <vdamewood> Yes, though if you have a 'guest' and a 'host' you have virtualization too.
[02:24:08] <pyzozord> can you have emulatio without virtualization?
[02:24:14] <arahael> d3x0r: docker does leverage qemu on eg, apple m1 systems which support arm and not x86
[02:24:18] <vdamewood> pyzozord: Yep. Apple does it.
[02:24:32] <d3x0r> arahael can't build a amd image on it 
[02:24:36] <pyzozord> vdamewood: not really familiar with what they do
[02:24:49] <arahael> d3x0r: that is surprising.
[02:24:52] <vdamewood> pyzozord: When arahael runs an Intel executable on his M1 mac, it has access to his real system resources. His real filesystem, his real kernel, etc.
[02:25:02] <pyzozord> ooh
[02:25:07] <pyzozord> right that thing
[02:25:07] <d3x0r> right? :) some guy had that problem... I should have offered to build his if he'd build mine :)
[02:25:38] <arahael> pyzozord: the only difference i see when starting an intel binary is it sometimes takes an extra second to launch
[02:25:53] <arahael> sometimes
[02:26:09] <pyzozord> interesting, possibly it does recompilation to arm
[02:26:29] <arahael>  it might but not usually
[02:26:41] <apotheon> Does anyone else find it kind of insane that a genera-purpose "desktop" computer vendor is coupling a specific OS and a specific CPU design together as effectively indivisible in the broader market?
[02:26:48] <apotheon> s/genera-/general-/
[02:27:00] <vdamewood> apotheon: Not really.
[02:27:07] <apotheon> s/CPU/CPU\/chipset/
[02:27:11] <apotheon> vdamewood: Why not?
[02:27:16] <d3x0r> instruction to instruction translation would be really tough
[02:27:20] <arahael> pyzozord: apple's m1, in contrasr to arm64, is able to temporarily put their memory model into a form that is easier to represent when running x86
[02:27:34] <vdamewood> apotheon: I don't really see a reason to.
[02:27:57] <pyzozord> arahael: not really, same way i buy a microwave and it has software specifically designed for it
[02:27:58] <d3x0r> jne over code ishandled entirely differently... arm has 2 bits for 'don't execute code' and the insturctions following will be encoded to just be skipped if the don't execute is set
[02:27:59] <vdamewood> I mean, apple makes a device. Device go brrr.
[02:27:59] <apotheon> . . . to find it "kind of insane"?  I find it several steps backward.
[02:28:02] <pyzozord> apotheon: ^
[02:28:35] <arahael> pyzozord: i disagree with that metaphor
[02:29:10] <pyzozord> yes microwave is not general-purpose
[02:29:14] <apotheon> It "makes sense" within the limited context of a corporation doing everything it can to manipulate market conditions in its favor, but the same can be said for being okay with people dying from use of its products as long as it can make more money overall even after factoring in the lawsuit damage awards.
[02:29:22] *** Quits: Enitin (~Enitin@82.102.22.85) (Read error: Connection reset by peer)
[02:29:35] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:29:40] <vdamewood> apotheon: I disagree with that comparison.
[02:29:56] <apotheon> Why?
[02:30:00] <PlanckWalk> I don't think of Apple as being a "general purpose" vendor anyway.
[02:30:09] <arahael> pyzozord: people dont typically intentionally run custom software on their microwave - and they definitely dont run software written for a completely different arch
[02:30:13] <pyzozord> it's the old cathedral vs bazaar discussio, fortunately you can go where you prefer :)
[02:30:13] <vdamewood> Well, it's equating a propriatary OS with killing people.
[02:30:16] *** Joins: zaher_ (~zaher@37.48.186.49)
[02:30:34] <vdamewood> arahael pyzozord: How about a game console then?
[02:31:09] <pyzozord> arahael: they do put different things inside the microwave though
[02:31:35] <vdamewood> I have a Switch. I bought that Switch to run separate software. That Switch comes with its own OS that's tied to the hardware.
[02:31:45] <pyzozord> you could compare items put inside microwave to apps ran on a computer and the microwave's software to the operating system of a computer
[02:32:14] <nomagno> Single-file demonstration of VM: https://termbin.com/hxnn
[02:32:15] <bayaz> Type: text/plain; charset=utf-8 
[02:32:15] <arahael> a game console where your hypothetical sony device runs original PS1 and PS2 games unmodified, from the original CD?
[02:32:19] <vdamewood> pyzozord: I think your comparison breaks down there. The food I put in my microwave doesn't interact with the software on it.
[02:32:30] <nomagno> It should work with any web C99 compiler
[02:32:32] <PlanckWalk> It's really only an accident of history that we got separate OS and hardware for a long time.
[02:32:39] <nomagno> I have made an actually portable VM
[02:32:42] <apotheon> PlanckWalk: What's your description of the type of "desktop" computers Apple makes, then?
[02:32:46] *** Quits: pizdets (~pizdets@183.182.110.66) (Ping timeout: 250 seconds)
[02:32:52] *** Quits: zaher (~zaher@37.48.152.102) (Ping timeout: 268 seconds)
[02:33:16] <vdamewood> Besides, it used to be that nearly all hardware makers used their own OS.
[02:33:26] *** Quits: Leone (~Leo@216.154.50.172) ()
[02:33:30] <vdamewood> Apple are just the only ones who survived Microsft.
[02:33:31] <pyzozord> vdamewood: it does in some sense interact, for example by it's weight or temperature. Also the software definitely interacts with the food by heating it up
[02:33:35] <apotheon> vdamewood: A larger scale and smaller scale wrong can be compared in terms of the form of the wrong, though.  I wasn't equating them, just pointing out that there's a similarity of justification if you're saying it's "just business".
[02:34:07] *** Joins: pizdets (~pizdets@183.182.110.253)
[02:34:15] <apotheon> vdamewood: I get the impression you're fairly smart, so I imagine you might be able to provide an analogy that better suits your preferences while still illustrating what I am trying to illustrate.
[02:34:21] <apotheon> vdamewood: Please offer an alternative.
[02:34:38] <vdamewood> apotheon: The problem is, I still don't see it as a wrong in the case of what Apple does.
[02:34:51] <vdamewood> So, I don't really see any comparison to make.
[02:35:15] <pyzozord> it's just a matter of preference, I think apotheon is not a fan of the cathedral approach of apple
[02:35:31] <pyzozord> he'd like his microwave to have usb so he can install his own software
[02:35:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[02:35:38] <PlanckWalk> apotheon: I think of Apple as making computing devices for specific purposes, and *separately* licensing people to write software for them.
[02:35:50] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:35:53] <apotheon> vdamewood: Is your basic argument, then, that there's nothing wrong with intentionally creating market conditions of reduced customer choice and reduced technological capabilities for the sake of capturing user base against those users' overall best interests?
[02:36:09] <PlanckWalk> Hah, what a loaded question.
[02:36:21] <pyzozord> apotheon: that's totally different argument though, doesn't have much to do with technology at all
[02:36:22] <PlanckWalk> "Are you *really* arguing for eating babies?"
[02:36:45] *** Quits: Guest8270 (~vit@chello085216193138.chello.sk) (Ping timeout: 265 seconds)
[02:36:52] <apotheon> PlanckWalk: that's an interesting take
[02:37:02] <PlanckWalk> (Implied: because if you aren't then you must accept my viewpoint)
[02:37:11] <apotheon> pyzozord: I'm not talking about technology per se so much as business practices.
[02:37:24] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of hyperdimensional elves at https://indiedevs.net/)
[02:37:28] <apotheon> pyzozord: Technology just happens to be the subject of the business practices in question.
[02:37:28] <PlanckWalk> Anyway, my choice like many others is to not buy Apple products.
[02:37:54] <vdamewood> PlanckWalk: And that, in fact, is the correct way to deal with the situation if you don't like it.
[02:37:56] <pyzozord> yes that's different, from technology point of view both approaches have pros and cons. Apples monopolistic practices are an entirely different story
[02:38:00] <apotheon> PlanckWalk: No, not true.  It's not eating babies, but it's definitely limiting customer choice relative to previously applicable market conditions.
[02:38:14] <PlanckWalk> ... for those who choose to accept that.
[02:38:44] *** zaher_ is now known as zaher
[02:38:50] <PlanckWalk> If Apple became a monopoly, I'd have more to say about it.
[02:38:58] <PlanckWalk> But they're not even close to that.
[02:38:58] <vdamewood> Same.
[02:39:09] <PlanckWalk> Especially on desktop computers.
[02:39:15] <apotheon> Apple's practices in this case seem very much an attempt to become a monopoly in some sense that can evade governmental interference.
[02:39:42] <pyzozord> it's like your microwave suddyenly only accepts only plates from the same company, but you can't do much about it because that company pretty much owns 1/3 of the microwave&plate market
[02:39:51] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:e658:9e80:725:12f4) (Ping timeout: 250 seconds)
[02:39:53] <PlanckWalk> For some value of "monopoly" that includes 2% market share.
[02:39:57] <vdamewood> pyzozord: Like Keurig!
[02:40:03] <nomagno> Microsoft is actually a 'convicted' monopoly and is operating normally 20 years later
[02:40:30] <PlanckWalk> Well, maybe 5% by now
[02:40:46] <vdamewood> I think Apple is at like 7% of the desktop.
[02:40:53] *** Joins: xff0x (~xff0x@2001:1a81:523b:c600:eb6a:2c7d:ead9:34e8)
[02:40:55] <pyzozord> too late for discussios about monopoly on this side of the globe
[02:41:08] <apotheon> Is there only fault in *being* a monopoly, or is *trying to become* a monopoly also bad?
[02:41:13] <nomagno> ^
[02:41:19] <nomagno> Everything is an oligopoly, duopoly and monopoly
[02:41:20] <apotheon> I'd argue the second.
[02:41:27] <vdamewood> Oh wow, 15.9% according to this: https://gs.statcounter.com/os-market-share/desktop/worldwide
[02:41:27] <PlanckWalk> Trying to become a monopoly is no problem at all.
[02:41:30] <nomagno> Well, not everything is one of these
[02:41:37] <PlanckWalk> *BEING* a monopoloy isn't bad in itself either.
[02:41:41] <nomagno> But there are A LOT of them
[02:41:47] <PlanckWalk> Abusing a monopoly position is bad.
[02:41:50] <apotheon> Okay, so I get the impression PlanckWalk is arguing that only effects matter, and never intentions.
[02:42:13] <PlanckWalk> As far as law goes, yes
[02:42:19] <apotheon> I'm not talking about law.
[02:42:20] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[02:42:22] <pyzozord> PlanckWalk: being monopoly is bad by itself
[02:42:24] <apotheon> I'm talking about ideas of right and wrong.
[02:42:30] <flakland> in the US you don't have to be found as "a monopoly" but found by reasonable peoples to have acted in a way that "tends to create a monopoly"
[02:43:02] <apotheon> . . . and I'm also generally of the impression that corporations trying to become monopolies are implicitly doing so for the sake of being able to "abuse" monopoly power.
[02:43:07] <pyzozord> PlanckWalk: because the capitalistic insentive is maximize profit
[02:43:13] <apotheon> To think otherwise seems naïve at best.
[02:43:13] <nomagno> I agree with you, apotheon.
[02:43:25] <pyzozord> and people have no scrupulous
[02:43:48] * vdamewood hands pyzozord a scalpel.
[02:44:09] <apotheon> I must realy be hankering for some philosophical discussion better than can be found in #philosophy or ##philosophy, to try staking a position on this hill.
[02:44:20] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[02:44:29] <nomagno> In my opinion, the only time of monopoly that can be even remotely argued for is that which the state has genuine interest to regulate/legislate in the name of social welfare.
[02:44:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:44:33] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:44:37] <PlanckWalk> Well yes, arguing ethics of capitalism in ##programming is ... odd.
[02:45:10] <vdamewood> So is the number 7.
[02:45:15] <apotheon> indeed
[02:45:23] <pyzozord> yeah
[02:45:31] <pyzozord> that was the root of the original question though
[02:45:34] <nomagno> The number 7 is also prime!
[02:45:39] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:45:59] <PlanckWalk> Anyway yes, I primarily have a consequentialist position.
[02:46:00] <apotheon> It's programming related, though, in that Apple's practices seem always inclined to create a sort of silo software ecosystem.
[02:46:35] <pyzozord> not only in software, in hardware as well
[02:46:41] <PlanckWalk> That does still allow structuring incentives to reduce likelihood of future bad effects, though.
[02:46:41] <nomagno> pyzozord: Anyways a few messages earlier ai posted a link to a single raw source file with the test amalgamated, if you want to give the VM a go on a web compiler
[02:47:01] <apotheon> PlanckWalk: My issue with strict consequentialism is that it essentially makes it impossible to judge any action in time to stop the negative consequences, so it basically just allows one to bitch intelligibly when the world is already fucked.
[02:47:15] <apotheon> PlanckWalk: yes, hardware too
[02:47:16] <PlanckWalk> I already stated why that's false.
[02:47:30] <nomagno> apotheon: Apple is not necessarily creating a monopoly, as much as they are turning their platforms into a rigged free market
[02:48:02] <PlanckWalk> Anyway yes, I agree that they're siloing development for Apple devices.
[02:48:08] <nomagno> I think it's just as immoral, but it's not actually control over a market.
[02:48:13] <apotheon> PlanckWalk: When you don't "structure incentives" by judging monopoly-seeking as something to discourage, it's not false at all.
[02:48:46] <apotheon> nomagno: It seems pretty obviously seeking as much monopoly power as it thinks it can get away with aggregating (for some definition of "it" and "think" and "seeking").
[02:48:47] <PlanckWalk> I don't see monopoly-seeking as *unethical*.
[02:48:51] *** Joins: audiobirb (~audio@user/audio)
[02:48:52] <pyzozord> nomagno: cool, I pasted it in godbolt https://gcc.godbolt.org/z/aWobGfPsY
[02:48:53] <bayaz> Title: Compiler Explorer - C (x86-64 clang (trunk)) 
[02:48:59] <PlanckWalk> I do see it as something that would be useful to discourage.
[02:49:34] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[02:49:35] <pyzozord> nomagno: from the quick look looks very legit :), will be curious to read the code more deeply tomorrow
[02:49:48] <apotheon> PlanckWalk: I see monopoly-seeking in practice, as pursued for the purposes of corporate dominance strategies, unethical.  Monopoly-seeking in isolation with no context as nothing but words is not well-qualified enough to make an ethical judgement.
[02:50:23] <apotheon> I need to get going.  It's time to do the dinner thing soonish.
[02:50:26] <pyzozord> I'm seeing a lot of interpreters' code lately, I feel it's soon going to be time for me to write one of my own
[02:50:34] <flakland> monopoly seeking would be discouraging others ability to compete in the market
[02:50:39] <nomagno> pyzozord: If you add as stdin different characters you get different results!
[02:50:55] <nomagno> '3' (51 in ASCII) changes the code execution path!
[02:51:10] <apotheon> Anyway, I think the M1 CPU thing seems interesting, and it'd be nice if it was available for use in ways that weren't so subject to corporate stranglehold that I essentially can't ever use it.
[02:51:29] <apotheon> (short of weird hobby projects far enough in the future that it's not useful any longer)
[02:51:42] <nomagno> So its a proper VM with simulated memory and serial input and output
[02:51:47] <nomagno> Just, a minified cute version of it
[02:51:53] <flakland> so if you advertise something as a general purpose computer, but prevent people from installing their own software on it, i consider that highly unethical
[02:52:39] <nomagno> Eh, patents only last 20 years anyways
[02:52:41] <apotheon> flakland: Yes, and Apple's strategy seems largely intended to carve out a larger pool within which others cannot compete for reasons other than strict price or quality advantages and similarly acceptable benefits.
[02:52:42] <nomagno> Thankfully
[02:53:00] <apotheon> "only"
[02:53:09] <kzootech> "patents"
[02:53:13] <apotheon> They only last until they've been superseded for ten years anyway.
[02:53:17] <apotheon> Great.
[02:53:29] <apotheon> hold back technological development for a decade or more
[02:53:49] <apotheon> Steam engines were essentially useless for ten years because of patents.
[02:53:58] <PlanckWalk> Speaking of unethical, I opened up the sealed packaging for a hard drive yesterday, to find included a pamphlet with the statement "it is a condition of purchase that you agree to the following terms:..."
[02:54:03] <apotheon> yeah, that dinner thing
[02:54:09] <apotheon> ta
[02:54:17] <nomagno> apotheon: I think it's bad, but actually like, not completely insane. Patents are supposed to offer a balance, in exchange for monopoly you have to actually disclose how to build the thing
[02:54:31] <nomagno> Would stuff be better without them? Yes. But it's not a huge drama
[02:54:31] <PlanckWalk> Fortunately I live in a place where that's completely void.
[02:54:52] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[02:55:04] *** Joins: flakland (~flaknet99@32.211.211.39)
[02:56:05] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[02:56:27] <PlanckWalk> (The terms included things like mandatory arbitration by an arbiter chosen by the manufacturer etc)
[02:56:38] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[02:56:53] <nomagno> Mandatory arbitration is completely bonkers
[02:56:58] <nomagno> I can't believe its legal anywhere
[02:57:16] <PlanckWalk> Especially in a shrinkwrap "contract"
[02:57:22] <nomagno> PlanckWalk: that sounds a lot like a Facebook product's terms of purchase
[02:57:33] <PlanckWalk> In this case it's Western Digital's.
[02:57:37] <nomagno> /use
[02:57:52] *** Quits: terminalpusher (~terminalp@2a01:586:2941:1:aeef:4407:c895:665b) (Remote host closed the connection)
[02:58:24] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:58:26] <nomagno> Ah the Oculus Quest has a nice ToS that mandates arbitration anywhere its legak
[02:58:33] <nomagno> s/legak/legal/
[03:00:41] *** Joins: gurki (~gurki@user/gurki)
[03:00:49] *** Quits: gargus (~user@114.198.29.250) (Quit: Leaving)
[03:01:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:01:37] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[03:01:37] <apotheon> I'm just back because I realized I forgot to say something: It's not about cathedral vs. bazaar development.  It's possible to build a monopoly on bazaar-style development, and it's possible to run an open source project with open standards using cathedral development.
[03:02:01] <apotheon> . . . and while I'm here, nomagno: That doesn't actually address the "prohibited until it doesn't matter anyway" situation that often occurs.
[03:02:52] <gurki> i want to replace about a million entries with a file with a million -different- things. so each a should become b, each c should become e, etc.
[03:03:09] <gurki> im not sure whats a fast way to approach this, sed performance is kinda garbage
[03:03:16] <gurki> am i to expect sth reasonable from python?
[03:03:32] <sonny> not better than sed
[03:03:54] <nomagno> ^
[03:03:58] <sonny> sed, awk > python etc
[03:04:07] <gurki> any recommendations what i could use instead?
[03:04:19] <nomagno> The bottleneck is stranfer speed between processes here
[03:04:23] <nomagno> Not performance
[03:04:24] <sonny> there isn't much tbh
[03:04:30] <nomagno> Try used, its ez to use
[03:04:37] *** Joins: quartz (~quartz@user/quartz)
[03:04:37] *** Joins: Alex123 (~Adium@cpe-172-249-100-115.socal.res.rr.com)
[03:04:41] <nomagno> s/used/sed/
[03:04:48] <gurki> just easy or also faster?
[03:04:53] <sonny> faster
[03:04:55] <gurki> i dont mind having to dig docs for an hour or two if its fast
[03:05:05] <gurki> looking into it then, thx :)
[03:06:25] <sonny> million shouldn't be slow, so it depends what you are doing
[03:06:33] *** Joins: eTnamun (~kvirc@user/heyoka)
[03:08:22] <gurki> tons and tons of s/asdf/fdsa/g, one line each, single file
[03:08:25] <gurki> using that via sed -f
[03:08:27] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[03:08:35] <gurki> should i do this differently?
[03:08:42] <nomagno> That sounds fine
[03:08:46] *** Quits: jollygood2 (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[03:08:51] <gurki> im at ten-ish per second
[03:09:00] <gurki> which obviously is way too slow
[03:09:19] <nomagno> But, feeding automatically, or manually?
[03:09:41] <gurki> sed -f sedcommandsfile.txt inputfile.txt > outputfile.txt
[03:10:14] <d3x0r> -i will inplace
[03:10:15] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:10:25] <d3x0r> cat infile | sed >outfile
[03:10:36] <sonny> script might be bad
[03:10:39] <d3x0r> -f's fie too
[03:10:42] <d3x0r> fine
[03:10:43] *** Quits: jaysicks (~jaysicks@94-21-138-235.pool.digikabel.hu) (Remote host closed the connection)
[03:11:19] <gurki> i wasnt quite sure whether doing inplace with a lot of commands is a great idea since i kinda dont want it to write to the file on each line
[03:11:24] <sonny> what's the problem, the file size?
[03:11:37] <gurki> i need more like 100k-ish commands per second
[03:11:39] <sonny> you can run sed in parallel
[03:11:39] <gurki> 10k is bearble
[03:11:42] <gurki> 10 is way too slow
[03:11:44] <gurki> bearable*
[03:12:02] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[03:12:33] <gurki> is there a good way to have sed in parallel thats not a mess like https://stackoverflow.com/questions/1828236/how-to-make-this-sed-script-faster
[03:12:33] <bayaz> Title: How to make this sed script faster? 
[03:12:36] <gurki> ?
[03:12:38] <d3x0r> you'd probablly want to include an & at the end, and catch the pid, keep a list of N pids open ....
[03:12:47] <d3x0r> as they close start new ones
[03:12:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:12:55] <sonny> xargs parallel
[03:13:26] <gurki> that would enable me to jump to 300-ish per second if i assume not much overhead
[03:13:31] <gurki> which is still not fast enough im afraid
[03:13:45] <sonny> well, you will have to fix the script
[03:13:55] <gurki> i dont mind fixing if you tell me a direction to go
[03:13:57] <gurki> :)
[03:14:10] <gurki> im all ears
[03:14:17] *** Joins: ircuser (~ircuser@S01069050ca4e3573.cg.shawcable.net)
[03:14:28] <sonny> where's the script
[03:14:46] <nomagno> 300 per second is like, 1 hour
[03:14:56] <nomagno> Slow, but not terrible
[03:14:58] <gurki> nomagno: im doing this with a lot of files
[03:15:03] <ircuser> how hard would it be to write a program that "hooks" into a parser for a specific programming language and is able to scan blocks of code for specific patterns I store in a database?
[03:15:05] <nomagno> 1 million
[03:15:21] <gurki> sonny: it really is a ton of said s/asdf/fdsa/g lines
[03:15:28] <ircuser> like a static analyzer type tool
[03:15:38] <sonny> you are using xargs already?
[03:15:53] <sonny> ircuser pattern?
[03:16:24] <[itchyjunk]> I have an exam on tuesday
[03:16:28] <ircuser> ircuser: I want to write a static analyzer for a woman specific language that can identify certain blocks of code when they occur if theyre 'similar' to other blocks I store 
[03:16:29] <[itchyjunk]> java exam
[03:16:38] <ircuser> domain*
[03:16:39] <[itchyjunk]> idk what i should be studying, i'll probably not study anything
[03:16:42] <[itchyjunk]> and hope for the best
[03:16:44] *** Quits: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz) (Quit: FreeZNC - Visit us! Server: irc.libera.chat Channel: #bnc4you)
[03:17:16] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:eb6a:2c7d:ead9:34e8) (Ping timeout: 268 seconds)
[03:17:20] <nomagno> [itchyjunk]: Sounds like a bad plan
[03:17:29] <sonny> the "similar" part sounds reall difficult
[03:17:39] <sonny> what makes a block of code similar?
[03:17:39] <gurki> sonny: no, looking into how to apply this
[03:18:03] *** Joins: xff0x (~xff0x@2001:1a81:523b:c600:ed55:79c2:75f9:f2e2)
[03:18:16] <ircuser> sonny: that'd be the part I could work on, It could just return a fake score for now I just need to figure out how to set up the basic parser 
[03:18:36] <nomagno> You can store the output of a (-O3 or whatever) compiled version of a MVP of these blocks of code on 10-20 batches
[03:18:38] <sonny> that's the easy part
[03:18:52] <nomagno> If the output of the blocks is the same, they are equivalent calculations
[03:19:03] <nomagno> Is it a bad system? Yes. But its fairly reasonable
[03:20:01] <ircuser> http://www.opensourceforu.com/2011/09/joy-of-programming-technology-behind-static-analysis-tools/ basically this
[03:20:01] <bayaz> Title: Joy of Programming: The Technology Behind Static Analysis Tools - Open Source For You 
[03:20:15] <ircuser> but for solidity language 
[03:20:20] <sonny> tldr?
[03:20:57] <nomagno> Reducing a chunk of code to different I/O tests is the quickest way to figure out if it is suitable to be called 'equivalent' to another one
[03:21:23] <nomagno> Not correct, mind you.
[03:21:55] <dre> what is it called
[03:22:00] <dre> when you get a ticket like 
[03:22:18] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:22:21] <dre> " we have a problem with X, so in this ticket I want you to remove Y altogether" 
[03:22:53] <dre> where the team-lead is saying to remove Y because they suppose that might fix the issue, but they're not a developer, and they're not in the code. and really the issue is to fix X. 
[03:23:11] <dre> this is an example of "over prescribing the problem" ??? 
[03:23:31] <nomagno> dre: That is a very well defined concept called hierarchical bull****
[03:24:08] <nomagno> the solution is to figure out a polite way to suggest not destroying the project
[03:24:28] <PlanckWalk> Prescribing the solution isn't usually appropriate in a ticket.
[03:24:36] <PlanckWalk> Especially when it means removing stuff :-p
[03:24:58] <gurki> xargs -a sedcommands.txt sed -i '{}' data.txt
[03:25:01] <gurki> should this ^ work?
[03:25:12] <nomagno> "Can you remove networking from our program? It is really slow"
[03:25:38] <dre> yeah they're not fussy, they just suggested it. some members of the team are also saying "why aren't you doing what the ticket suggests?" -- because it's NOT SOLVING THE ISSUE
[03:25:54] <gurki> something seems to go wrong, i get an error "sed: s/asdf/fdsa/g cant be read: no such file or directory"
[03:26:11] <sonny> idk, I rarely use xargs
[03:26:13] <gurki> but im not quite sure what im doing wrong
[03:26:41] <PlanckWalk> gurki: Are you sure you meant -i?  -e looks more appropriate there
[03:27:11] <PlanckWalk> Well, you might also want -i
[03:27:38] <PlanckWalk> But the name "sedcommands.txt" looks like a bunch of commands, and you specify commands to sed using -e
[03:27:51] *** Quits: eTnamun (~kvirc@user/heyoka) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[03:28:11] <gurki> yes that is a bunch of commands
[03:28:52] <PlanckWalk> However, sed does also accept commands on stdin
[03:29:19] <PlanckWalk> Or from a file
[03:29:29] <PlanckWalk> (Depending what you want)
[03:29:37] <gurki> well i started out with sed -f sedcommands.txt input.txt output.txt
[03:29:48] <gurki> what i actually want is a -lot- more performance from sed
[03:30:00] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[03:30:00] <sonny> sed is top performance
[03:30:00] <gurki> sedcommands is quite large, and so is input.txt
[03:30:10] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[03:30:11] <PlanckWalk> I don't think indirection via xargs is going to give you *more* performance...
[03:30:24] <sonny> he mentioned lots of files
[03:30:42] <sonny> I assume he needs parallel stuff
[03:31:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:31:07] <gurki> i think parallelizing is too early if im not in the same order of magnitude of performance id need
[03:31:10] <gurki> :(
[03:31:27] <gurki> parallelizing will only give me about one of those
[03:32:47] <ircuser> is there a tutorial/book that would explain how to create a bug checker once I have the AST for a program?
[03:33:00] <flakland> a bug checker?
[03:33:10] <ircuser> a static analysis or vulnerability scanner 
[03:33:26] <ircuser> I want to create one for a domain specific language. I have a parser already and can get the AST for a program
[03:33:54] <ircuser> it would just identify common bugs in my program or do basic linting
[03:34:20] <flakland> shouldn't the compiiler do this?
[03:34:37] <sonny> yeah
[03:34:47] <sonny> vuln scanner is another thing
[03:35:09] <ircuser> flakland: no I need it to be at a higher level for example this code block is vulnerable to reentrancy bugs' by comparing it to specific pattern 
[03:35:18] <flakland> the code generated after the AST might contain errors
[03:35:32] <flakland> soooo might not be a good way to spend time
[03:36:13] <sonny> ircuser the compiler is busted?
[03:36:43] <ircuser> compiler is fine but it doesn't identify security issues in the code
[03:36:57] <flakland> it can though
[03:37:31] <sonny> reentrancy bugs at what level?
[03:39:36] <ircuser> sonny: for example a tool like this is what I need to make: https://owasp.org/www-community/Source_Code_Analysis_Tools
[03:39:37] <bayaz> Title: Source Code Analysis Tools | OWASP 
[03:40:20] <ircuser> say it could identify sql injection or buffer overflow with certain probability, or anything I define. but it's for a specific domain language where I already have a parser. I just need to figure out how these tools are created 
[03:40:33] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[03:40:46] *** Joins: flakland (~flaknet99@32.211.211.39)
[03:40:52] <ircuser> I have several examples of patterns, for example even defined by regex that should trigger an alert if they occur in code 
[03:41:02] <sonny> regex?
[03:41:15] <flakland> for detecting vulnerabilities you have to analyze the code that is generated and run on the machine
[03:41:43] <flakland> the source could be correct but  later in the code generation phase there could be a bug that goes undetected
[03:41:56] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 268 seconds)
[03:43:15] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[03:43:38] <sonny> this is gonna be hard yeah, sounds like you are making a vuln scanner
[03:43:53] <ircuser> yes
[03:43:55] <ircuser> its for solidity
[03:43:59] <flakland> anything else is just bringing the language compiler up to par,   i mean completing it's implementation as it should detect simple mistakes like buffer overflows, etc
[03:44:14] <ircuser> so runs on etherum which would require gas can't just run it like a regular program
[03:45:52] <flakland> statically compiled buffer overflows *
[03:46:27] <ircuser> solidity is not Turing complete so is probably a bit easier. I dont think buffer overflow scan happen
[03:46:30] *** Quits: sena (~sena@user/sena) (Read error: Connection reset by peer)
[03:46:43] <flakland> statically compiled bugs *
[03:49:05] *** Joins: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz)
[03:49:25] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[03:52:32] *** Quits: ircuser (~ircuser@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[03:52:44] <sonny> I thought buffer overflow checks where manual?
[03:53:01] <sonny> maybe that's the discover, then you record it and look for it?
[03:53:31] <flakland> if you know the size of the buffer there is no reason you can't detect a bad access at compile time
[03:53:58] <sonny> yeah I'm confused, is it a bad compiler or, are you just looking for CVEs?
[03:53:58] <flakland> and the index is constant
[03:54:30] *** Joins: eTnamun (~kvirc@user/heyoka)
[03:55:09] <flakland> also if the index is dynamic but also range enforced
[03:55:15] <flakland> at runtime
[03:55:55] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[03:59:52] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Quit: Client closed)
[04:00:34] *** Joins: Soni (~quassel@autistic.space)
[04:03:40] *** Joins: jkk (~jkk@213.180.39.162)
[04:03:51] <jkk> https://github.com/UnigramDev/Unigram - anything similar on linux?
[04:03:52] <bayaz> Title: GitHub - UnigramDev/Unigram: Telegram for Windows 10 
[04:11:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:12:20] *** Joins: audiobirb (~audio@user/audio)
[04:13:03] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[04:13:42] *** queue[m] is now known as stack[m]
[04:14:52] <corn266> how long does it take for open source repo maintainers to updated GPG signatures? currently getting an error regarding "Bad signature" for some packages that are required what i'm trying to do
[04:15:22] <jkk> ask them directly
[04:15:40] <corn266> there's already an issue on their gitlab page
[04:17:27] <jkk> go to the distro room and ask there
[04:17:49] <corn266> welp. off to matrix
[04:17:49] <jkk> or email - they are not here Xd
[04:18:25] <flakland> matrix sigs were revoked?
[04:19:37] <corn266> nah they're not on freenode
[04:20:06] <flakland> what project (s) are having issues?
[04:20:15] <corn266> postmarketos
[04:25:02] *** Quits: jsmooth (~quassel@user/jsmooth) (Quit: jsmooth)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:21] <flakland> is it using dl-cdn.alpinelinux.org ?  https://wiki.postmarketos.org/index.php?title=Troubleshooting&mobileaction=toggle_view_mobile
[04:26:25] <bayaz> Title: Troubleshooting - postmarketOS 
[04:28:02] <flakland> says something about sending a PURGE with curl
[04:28:18] <flakland> because of improper caching on alpine server
[04:29:13] <jkk> i installed cat on linux and now it meows Xd
[04:29:20] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:31:06] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[04:32:42] <corn266> flakland yea i've already tried that
[04:33:00] <corn266> i didn't submit this issue but we're having the same errors https://gitlab.com/postmarketOS/pmbootstrap/-/issues/2081
[04:33:01] <bayaz> Title: Bad signature on nftables armv7 package (#2081) · Issues · postmarketOS / pmbootstrap 
[04:33:13] <corn266> it's _just_ those 2 packages too
[04:33:51] <corn266> well
[04:34:29] <corn266> almost the same issue. his says it's telling him he's not allowed to purge. mine just says "ok" and still throws the same error
[04:34:45] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:58bf:a585:9eb2:e25e)
[04:34:48] <flakland> lol
[04:35:29] <flakland> maybe you could build the packages yourself
[04:35:34] <flakland> if it's urgent
[04:35:49] <corn266> nah, was just trying to unbrick my ereader
[04:36:25] <flakland> can you tell it to skip the packages? nftables is not required software afaik
[04:36:36] <corn266> honestly wouldn't know how
[04:37:22] <corn266> just running `pmbootstrap install ...`
[04:38:03] *** Quits: Macuser (~Macuser@216.30.159.201) (Read error: Connection reset by peer)
[04:38:31] *** Joins: KillerWasp (KillerWasp@user/killerwasp)
[04:38:52] <KillerWasp> hello! today is sundae! and i can't sleep!
[04:39:43] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:39:59] <KillerWasp> What advice do you recommend for when you have to deal with a language that you hate so much, it causes you nausea and headaches?
[04:40:28] <flakland> killerwasp, don't use it ?  
[04:40:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:41:02] <KillerWasp> flaklandᐒ I wish that was an option.
[04:41:15] <flakland> it's always an option
[04:41:35] <KillerWasp> flaklandᐒ like fired?
[04:41:47] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:41:47] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:09] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:09] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:19] <KillerWasp> Like Shakespeare: To use or not to use?
[04:42:31] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:32] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:42:32] <flakland> corn266 looks like postmarketos is heavily dependent on alpine linux, even uses it's build system underneath which is called aplbuild
[04:42:49] <flakland> apkbuild
[04:42:53] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:42:54] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:16] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[04:43:17] *** Quits: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[04:43:17] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (K-Lined)
[04:43:21] <corn266> yea
[04:44:38] *** Joins: godSend23 (~gs24@2600:1700:e840:6c30:ac6b:62c3:a91:58e1)
[04:44:40] <godSend23> hey all
[04:45:43] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[04:45:48] *** Quits: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[04:46:01] <KillerWasp> I was looking at the possibilities to create some internal web fabrication code. PHP already exists, but if I had to avoid it, it would be done in C, but then it would no longer offer any alternative to be used by multiple users in modular format, only that it uses something external like tcl / tk, which would already look a lot like PHP shortcutting any code that could be provoked.
[04:46:01] *** Joins: audiobirb (~audio@user/audio)
[04:46:17] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 265 seconds)
[04:46:55] *** Quits: eTnamun (~kvirc@user/heyoka) (Ping timeout: 256 seconds)
[04:47:05] <apotheon> I'm pretty sure a Tcl/Tk replacement for PHP would be an improvement.
[04:47:18] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[04:47:27] <KillerWasp> If I do it in C I can do it without problems, but then it would only serve as a private server unable to accept any other user to function as a multiweb.
[04:48:03] <KillerWasp> apotheon++
[04:48:21] <KillerWasp> good point.
[04:48:42] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Ping timeout: 265 seconds)
[04:48:48] <KillerWasp> Maybe you should look down that road earnestly.
[04:48:56] <KillerWasp> i should*
[04:50:07] <flakland> php is never the answer!   wait why would you be more limited with C than $otherlang ?
[04:50:12] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[04:51:28] <KillerWasp> flaklandᐒ C or C++
[04:51:52] <flakland> you say it would be unable to accpt other user to function a multiweb
[04:51:56] <flakland> i'm not sure what that means
[04:51:58] <KillerWasp> and it is not limited, it offers more freedom of construction.
[04:52:36] <KillerWasp> void MyWeb(){Head();Title();Menu();Content();End();}
[04:53:19] *** Parts: godSend23 (~gs24@2600:1700:e840:6c30:ac6b:62c3:a91:58e1) (Leaving)
[04:53:30] *** Joins: godSend23 (~gs24@2600:1700:e840:6c30:ac6b:62c3:a91:58e1)
[04:53:46] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 256 seconds)
[04:54:20] <KillerWasp> flaklandᐒ If you offer the possibility of being multiweb so that other users can build their own website, it means building the website in C, which allows any type of code within the server where it is hosted, you can even easily put any remote shell in ASM because everything already is served to do it.
[04:54:59] <flakland> that coul happen in php too
[04:55:34] <KillerWasp> flaklandᐒ but same of easily?
[04:55:46] <flakland> does php still let you call execve?
[04:56:17] <KillerWasp> really? i don't know.
[04:56:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 250 seconds)
[04:58:11] <flakland> https://www.php.net/manual/en/function.exec.php
[04:58:13] <bayaz> Title: PHP: exec - Manual 
[04:59:04] <flakland> i think no matter what language you choose you will have to be careful how you sandbox the http server
[04:59:41] <kzootech> c can make it easier to sandbox... static compile and into a chroot
[04:59:56] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 245 seconds)
[05:00:26] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:01:26] <KillerWasp> kzootechᐒ chroot like all your sandbox, rolf
[05:02:05] <apotheon> KillerWasp: I'd be more inclined to use sh+awk and maybe a little SSI or, on the other end of the spectrum, just use Ruby templating engines, as PHP replacement strategies.
[05:02:40] <apotheon> I wonder whether there are good teplating engines using s-expression syntax. . . .
[05:03:35] <apotheon> As for chroot . . . I like FreeBSD jails for that sort of thing.
[05:03:43] <KillerWasp> Everyone seems to have vague ideas on how to design a PHP replacement.
[05:03:48] <KillerWasp> mmmm...
[05:03:50] <apotheon> These days, though, I'm kinda using PaaS stuff for hosting.
[05:04:06] <apotheon> KillerWasp: That's because PHP desperately needs replacing.
[05:04:56] <KillerWasp> On my own I have thought of a bytecode interpreter for a 486 processor, I had already done it, and I think that using it as a sandbox for any code would be great.
[05:05:47] <[itchyjunk]> oh shit
[05:05:56] <[itchyjunk]> my exam is on paper and pencil
[05:06:04] <[itchyjunk]> i asked it we could use docs
[05:06:05] <[itchyjunk]> rofl
[05:06:08] <arahael> KillerWasp: consider bubblewrap, perhaps in addition to selinux, but the bubblewrap bit is easy.  also, there is wasm as a sandbox of sorts but i wouldnt trust such sandboxes - rely instead on the platform, rather than devs.
[05:06:11] <[itchyjunk]> oh well, shouldn't be too bad
[05:06:22] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:06:53] <arahael> [itchyjunk]: as a tip, pencils use graphite, not lead, so should be safe!
[05:07:05] <arahael> [itchyjunk]: speaking of tips, bring a sharpener!
[05:08:39] <[itchyjunk]> it contains "lead" the mixture of graphite and clay
[05:08:44] <[itchyjunk]> i'll take a pen maybe
[05:08:50] <[itchyjunk]> i don't own any pencils
[05:09:06] <[itchyjunk]> they used to have free ones at the library but they stopped giving them out ;_;
[05:09:48] <[itchyjunk]> 50 min long exam, what a shitty time
[05:09:57] <arahael> [itchyjunk]: it's worth owning one - two, actually. make them good.
[05:10:08] <[itchyjunk]> i dont mind writing code on paper but time crunch for code feels horrible to me always
[05:10:12] *** Quits: gitgood (~gitgood@85.210.185.0) (Ping timeout: 256 seconds)
[05:10:14] <[itchyjunk]> too poor to afford pencils
[05:10:39] <arahael> ;(
[05:11:17] <jkk> paper and pencil is nice
[05:11:36] <KillerWasp> [itchyjunk]ᐒ you should value it more, graphite is diamond dust.
[05:11:44] *** Joins: jazzy (~jaziz@user/jaziz)
[05:11:52] <arahael> definitely bring a pen as a backup then, but yeah, perhaps borrow *two* pencils from some friends or admin or something.
[05:12:20] <arahael> a bit surprised you have never owned a pencil - the ones i have are over 10 years old as i use them so rarely...
[05:12:23] <KillerWasp> i draw with pencil and paper
[05:12:32] <KillerWasp> never with the machine
[05:12:35] <[itchyjunk]> no friends and TA's suck
[05:12:42] <[itchyjunk]> doubt they will have pencils
[05:12:51] <[itchyjunk]> pencils would be nice since i could erase stuff
[05:12:52] <[itchyjunk]> :<
[05:13:25] <arahael> what happened to the free ones at the library from a few years back?
[05:13:55] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[05:14:07] <KillerWasp> arahaelᐒ still exist libraries
[05:14:27] <KillerWasp> at least in argentina, other countries i don't know.
[05:14:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[05:15:04] <[itchyjunk]> https://i.pinimg.com/originals/35/ac/7b/35ac7b88290428b9a859ddfac2faed34.png
[05:15:05] <bayaz> Type: image/png Size: 44.1 kB 
[05:15:20] <[itchyjunk]> i still have one of them
[05:15:32] <[itchyjunk]> the graphite was broken and i don't have a sharpner
[05:15:46] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 245 seconds)
[05:15:53] <arahael> do you have a very sharp knife?
[05:15:57] <KillerWasp> [itchyjunk]ᐒ you have teeths
[05:16:20] <[itchyjunk]> i used to have teeth from back when dental clinics were free..
[05:16:24] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[05:16:34] <[itchyjunk]> i know there are sharpners in walls of some other building
[05:16:35] *** Quits: hsges (~AnCELASTR@186.189.239.67) ()
[05:16:41] <[itchyjunk]> i'll carry it and see if i get lucky
[05:16:45] <[itchyjunk]> maybe the library has one too
[05:17:07] *** Quits: probableUser (~probableU@2a02:8388:1a08:4680:d1ed:3524:9dcf:56b) (Read error: Connection reset by peer)
[05:17:25] <[itchyjunk]> used to be that sharpners were on the wall of every class
[05:17:26] <KillerWasp> [itchyjunk]ᐒ a razor
[05:17:35] <[itchyjunk]> not sure what kids these days use
[05:17:50] <[itchyjunk]> i think it's mostly touch screen i pad android tablet things
[05:18:13] <KillerWasp> use a razor every time you want to sharpen your pencils, it always makes you look great in front of the students in the classroom.
[05:18:18] <[itchyjunk]> i assume it will ask about primitive types
[05:18:51] <[itchyjunk]> take a razer to an exam?
[05:18:59] <[itchyjunk]> i don't think i am white enough to get away with that :D
[05:19:08] <arahael> [itchyjunk]: do your best to find a spare pencil regardless.  and have them both reasonably sharp.
[05:19:42] <KillerWasp> [itchyjunk]ᐒ what?
[05:19:49] <arahael> ha.  no, do the razer thing at home, though i personally would use a *very* sharp knife.  razors scare me without a proper handle.
[05:20:32] <[itchyjunk]> KillerWasp, american jokes :D
[05:20:55] <KillerWasp> [itchyjunk]ᐒ sorry, i don't understand... but i guess that not matter...
[05:21:04] <arahael> [itchyjunk]: don't over sharpen them either - you only want it sharp enough to last the exam - the more you expose, the more easy it is to snap.
[05:21:04] *** Joins: temy (~tem@wikimedia-commons/pandakekok9)
[05:21:42] <arahael> might even be worth sharpening both ends?
[05:21:50] <[itchyjunk]> yeah i used sharpen pencils with razor like 100 years ago
[05:23:53] <KillerWasp> [itchyjunk]ᐒ With a razor you can sharpen pencils for the duration of the exam, and if you don't like the teacher's grade, you can sharpen several spears and throw it to leave it trapped on the blackboard as if it were an exhibition of bugs.
[05:24:23] *** Parts: godSend23 (~gs24@2600:1700:e840:6c30:ac6b:62c3:a91:58e1) (Leaving)
[05:24:45] <[itchyjunk]> lol
[05:25:11] <[itchyjunk]> i can't remember all the programming jargon or hiarchay of primitives
[05:25:21] <arahael> man, i don't miss my uni days :)
[05:25:29] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[05:25:50] <[itchyjunk]> hope i get some nice paying job in the future so i can live like a filthy rich life
[05:26:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[05:26:23] <arahael> be wary of lifestyle inflation, but yes, it is very nice having resources. 
[05:27:12] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[05:28:35] <flakland> is it nice because it's nice, or because the world criminalizes being poor?
[05:29:04] <[itchyjunk]> short -> int -> long -> double was it?
[05:29:11] <arahael> thats a bit of a complex social-economic question i think.  i think it's a bit of both.
[05:29:13] <[itchyjunk]> i have it written down somewhere
[05:29:16] *** Joins: quartz (~quartz@user/quartz)
[05:31:47] *** Joins: sonny52 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[05:31:57] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:32:15] <sonny52> long --x-- double
[05:32:20] <sonny52> that's a float
[05:32:43] <[itchyjunk]> oh right, int gets auto type casted to float
[05:32:52] <[itchyjunk]> but i think to double too?
[05:32:54] <sonny52> in any event, double < long iirc
[05:33:03] <[itchyjunk]> ah
[05:33:13] <[itchyjunk]> so int -> double -> long
[05:33:19] <[itchyjunk]> int -> float ?
[05:33:27] <[itchyjunk]> i will have to remember to read through this
[05:33:31] <sonny52> float -> double
[05:33:34] <flakland> they're compltely different types
[05:33:45] <flakland> integers and floats
[05:33:49] <sonny52> ^
[05:34:04] <[itchyjunk]> yes but they get type casted anyways
[05:34:09] <[itchyjunk]> int -> string
[05:34:11] <InPhase> For math the rule is generally "The thing that can hold any of the values of these two types, but at least int."
[05:34:18] <flakland> what abomination lang is this
[05:34:20] <flakland> JS?
[05:34:23] <sonny52> there is a floating point conversion, but it might only be with literals
[05:34:24] <InPhase> Not exactly that, but close enough to that.
[05:34:25] <[itchyjunk]> j
[05:35:15] <flakland> java implicitly converts ints to floats ?
[05:35:27] <flakland> i find it difficult to believe
[05:35:28] <sonny52> double x = 1/1.0 // 1 is converted to double maybe
[05:35:40] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:35:47] <sonny52> float x = 1/1.0 // 1 is float
[05:36:10] <sonny52> either way, the result will be float or double
[05:36:22] <flakland> x is float, but what is 1/1.0
[05:36:23] <sonny52> for each case respectively
[05:36:35] <sonny52> x is 1.0
[05:36:44] <[itchyjunk]> i don't remember what floar vs double is
[05:36:47] <InPhase> sonny52: No, 1 gets converted to double in both cases before the division, because 1.0 is a double.
[05:36:54] <[itchyjunk]> if 1/1.0 then it converts 1 to 1.0
[05:36:58] <flakland> yes but thats after the expression is evaluated, it knows the type because x is float
[05:37:04] <flakland> but what about in the middle of evaluation
[05:37:16] <[itchyjunk]> oh its a double isn't it?
[05:37:18] <sonny52> time to check jls
[05:37:22] <InPhase> The evaluation itself does not take into account the destination.
[05:37:31] <[itchyjunk]> 1/1.0 -> 1.0/1.0 -> 1.0
[05:37:35] <[itchyjunk]> auto type conversion
[05:37:47] <InPhase> float x = 1/1.0; first converts 1 to double, does double 1.0 divided by double 1.0, then converts it down to a float and stores it.
[05:37:58] <[itchyjunk]> int x = 1/1.0 -> error
[05:38:15] <InPhase> (At least until an optimizer gets its hands on that and turns it all into a constant.
[05:38:18] <InPhase> )
[05:38:29] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:38:38] <[itchyjunk]> okay so 1.0 is double
[05:38:40] <sonny52> "int to long, float, or double" on widening conversion
[05:38:41] <[itchyjunk]> what's a float?
[05:38:43] <[itchyjunk]> can't remember
[05:38:48] <InPhase> 1.0f
[05:38:57] <[itchyjunk]> oh we didn't use much of that i think
[05:39:04] <[itchyjunk]> screw float, no one like it anyways
[05:39:19] <sonny52> I suspect it would be converted to float in that case float x = 1/1.0
[05:39:33] <PlanckWalk> Nah, because 1.0 is a double.
[05:39:35] <sonny52> var x = 1/1.0 // 1 is double
[05:39:35] <InPhase> sonny52: It's not.
[05:39:58] <[itchyjunk]> 1 is int
[05:39:59] <apotheon> IEEE 754 floating point numbers are, in many contexts, kinda like MongoDB: that's what you use when you don't care about your data.
[05:40:19] <PlanckWalk> If you replace 1 with some large int that can't be represented in a float, you'll get different result.
[05:40:19] <flakland> lol viscious!
[05:40:42] *** Quits: FreeFull (~freefull@user-5-173-153-27.play-internet.pl) ()
[05:41:02] <InPhase> apotheon: Floating point numbers are designed to represent real world measured values.  And they do that spectacularly.  They get a bad reputation from people who expect them to not behave like finite representations of values.
[05:41:39] <maxzor> do the stack libmesa, xlib and potentially egl remotely make sense for me to give a try at a micro 2d/3d engine?
[05:41:45] <PlanckWalk> There's a Java decompiler that makes that mistake, though. I had to fix the bug.
[05:42:26] <PlanckWalk> Err, that made*
[05:42:28] <InPhase> The challenge I extend to everyone trashing floating point representation is to come up with something that would have worked better.  It's worth spending some time thinking about, and you'll realize eventually why there truly is no other generalized approach.  :)
[05:42:36] <flakland> maxzor yes
[05:42:39] <maxzor> (i just want to draw curves and see them in 2d/3d, maybe I'd be better off in matlab or something but thought it could be fun)
[05:43:02] <flakland> for 2d simple graphing,  meh not really
[05:43:09] <[itchyjunk]> damnit, forgot to post the meme cause of exam stress
[05:43:11] <[itchyjunk]> https://i.pinimg.com/originals/35/ac/7b/35ac7b88290428b9a859ddfac2faed34.png
[05:43:11] <bayaz> Type: image/png Size: 44.1 kB 
[05:43:30] <maxzor> well i have nurbs surface on the horizon so
[05:43:31] <sonny52> so, if it gets converted to double, it will loose info won't it? I'm still looking for it
[05:43:44] <PlanckWalk> int -> double never loses information
[05:43:51] <PlanckWalk> int -> float can
[05:43:56] <sonny52> in float x = 1/1.0
[05:44:20] <PlanckWalk> The final conversion to float can lose information, yes
[05:44:36] <sonny52> with a language like java, it will warn on narrowing conversion
[05:45:01] <d3x0r> maxzor HTML canvas :)
[05:45:08] <InPhase> Only large ints can lose information upon converting to 32-bit float.
[05:45:09] <apotheon> InPhase: Note I said "in many contexts".  There are definitely cases where they're useful; there are also many where they're an atrociously bad idea.
[05:45:19] <sonny52> ah
[05:45:22] <d3x0r> desmos, geogebra/3d
[05:45:35] <sonny52> yep, doesn't work "Main.java:13: error: incompatible types: possible lossy conversion from double to float" https://ideone.com/7xPyhj
[05:45:37] <bayaz> Title: Ideone.com 
[05:45:41] <sonny52> so it is double
[05:45:50] <PlanckWalk> Yes, that's right
[05:46:11] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[05:46:27] <d3x0r> maxzor https://www.geogebra.org/3d/sadtqz3x 2d and 3d curves?
[05:46:29] <bayaz> Title: 3D Calculator - GeoGebra 
[05:47:08] <InPhase> apotheon: I think the right solution is almost always choose floats for any value from the set of reals.  They are almost always the right solution.  When they are the wrong solution is when you're dealing with strictly countable objects and you need to keep the count.
[05:47:13] <PlanckWalk> In Java you can write either  1/1.0f  or  (float)(1/1.0)
[05:47:40] *** Joins: raj (uid72176@user/raj)
[05:47:54] <sonny52> yeah
[05:48:03] <InPhase> apotheon: And by "floats" I mean generally "doubles" of course, on modern systems.
[05:48:07] <sonny52> better to use the float literal
[05:48:34] <PlanckWalk> I prefer to just use double unless there's some specific need for float
[05:48:40] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:48:40] <apotheon> "when you're dealing with strictly countable objects and you need to keep the count" i.e. when you care about your data
[05:48:56] <InPhase> apotheon: I care enormously about my data, but it is generally from the set of reals.
[05:49:12] <InPhase> apotheon: Floating points do not corrupt data.  That's a myth.
[05:49:17] <apotheon> I'm guessing you can understand my hand-wavy use of the term, though.
[05:49:18] *** Joins: emf (~emf@2620:10d:c090:400::5:99c8)
[05:49:29] <apotheon> I never said anything about *corrupting* data.
[05:49:44] <maxzor> d3x0r, will definitely have a deeper look, thanks! Guess I feel masochist today thinking C-programming 3D
[05:49:56] <PlanckWalk> maxzor: Did you say xlib?
[05:50:00] <PlanckWalk> That's masochistic!
[05:50:02] <apotheon> You just have to be very careful about various common operations, and being very careful about such things is error prone.
[05:50:30] <apotheon> . . . so, by way of neglecting care at some point, you could end up screwing up your own data.
[05:51:01] <PlanckWalk> If your data is naturally real-valued, it's not like there are viable alternatives.
[05:51:22] <InPhase> apotheon: But, not.  Floating points do exactly what is correct on data from the reals.
[05:51:48] *** Joins: midhun__ (~liberapoo@117.212.160.238)
[05:52:00] <PlanckWalk> Eh, not really.  They do exactly what is the closest viable thing to correct on approximations of real values.
[05:52:19] <InPhase> apotheon: There's really not any special care needed except handling classics like dividing by 0 or dealing with nans from domain errors.  But floats actually handle these more reliably than ints.
[05:52:43] <apotheon> InPhase: Okay, you can ignore my point and keep pretending I'm talking about something else.  I have things to do.
[05:52:44] <InPhase> PlanckWalk: All real world reals are approximations anyway.
[05:52:52] <PlanckWalk> Sure
[05:53:00] <flakland> is infinity a nan ?
[05:53:07] <InPhase> flakland: It's not.
[05:53:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:53:42] <danielcamiel> you're not a number, you're not a number, you and all them punks like you. not a number. not a number, not a number!
[05:53:49] <PlanckWalk> The trouble is that the intermediate results of calculations are approximations that are always worse.
[05:53:58] <maxzor> NaNNaNNaNNaN
[05:54:00] <PlanckWalk> Hmm okay, nearly always worse.
[05:54:17] <PlanckWalk> Sometimes you can get guarantees of exact results, but very rarely.
[05:54:31] *** Quits: jkk (~jkk@213.180.39.162) (Ping timeout: 245 seconds)
[05:54:38] *** Quits: midhun_ (~liberapoo@59.92.160.151) (Ping timeout: 260 seconds)
[05:55:26] <PlanckWalk> But the real point is that there isn't anything that is both substantially better and practical.
[05:56:21] <d3x0r> three.js even gives you handy structures for meshes
[05:56:27] <d3x0r> and faces
[05:56:36] <d3x0r> it's only a few k - small compared to a opengl library
[05:57:49] <d3x0r> *few hundred k*
[05:58:04] <maxzor> yes but js :O it scares me
[05:58:15] <PlanckWalk> If x and y are real values, it is always true that  (x+y)-y = x.  That's not true for floating-point arithmetic, and the error can be arbitrarily bad (e.g. much worse than the error in approximating the true values of x and y by floating point values)
[05:58:15] <maxzor> is it that not bad
[05:58:30] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:58:50] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[05:58:56] *** brabrax_ is now known as brabrax
[05:59:03] <d3x0r> just pretend it's C
[05:59:28] <d3x0r> with import instead of include :) only here #include is actually useful code not just definitions
[06:00:13] <maxzor> alright :) will forget about the prototyping stuff that goes over my head for now
[06:00:26] <d3x0r> exactly :)
[06:00:48] <d3x0r> class is alright-ish if you have that sort of background but prototype is oboslete
[06:00:48] <maxzor> source for geogebra is hard to find
[06:01:08] <d3x0r> maxzor that'd be nice huh? It even handles some expression solving like x+y^3=5
[06:01:10] <sonny52> launchpad probably
[06:01:36] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[06:01:39] <sonny52> nvm, was thinking of another one
[06:05:12] *** Quits: Alex123 (~Adium@cpe-172-249-100-115.socal.res.rr.com) (Read error: Connection reset by peer)
[06:05:15] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:ed55:79c2:75f9:f2e2) (Ping timeout: 250 seconds)
[06:06:17] <sonny52> I'm changing code from imperative to functional, it is a big leap. Though it's mostly just ditching global variables, some other parts require redesign in some sense
[06:06:28] <sonny52> s/imperative/procedural/
[06:06:34] *** Joins: Alex123 (~Adium@2603-8000-db40-0080-ad51-d4c2-0509-2322.res6.spectrum.com)
[06:07:13] *** Joins: xff0x (~xff0x@2001:1a81:527f:8300:c0be:43f4:9685:d0cc)
[06:09:28] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[06:18:09] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 256 seconds)
[06:21:47] <d3x0r> struct { int a; } globals;  can reduce your globals to 1 global; and then even share the globals between multiple files
[06:22:32] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[06:25:46] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[06:32:27] *** Joins: rawgreaze (~rawgreaze@c-24-91-94-184.hsd1.nh.comcast.net)
[06:32:27] *** Quits: rawgreaze (~rawgreaze@c-24-91-94-184.hsd1.nh.comcast.net) (Changing host)
[06:32:27] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[06:34:01] *** Joins: password2 (~password8@user/password2)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:55] <InPhase> PlanckWalk: Yeah.  The mental model which helps is to think of floating points as doing real-world things.  Like if you measure a meter, mark it off, measure one more meter, mark it off, and measure back one meter, the probability of your marks in the middle exactly overlapping is 0.  So floating points do slightly better than this 0.  ;)  But it's not a deficit in either, it's just not something 
[06:37:01] <InPhase> you get from that sort of process, so it's not what one should look for.
[06:40:49] *** Quits: sonny52 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:42:35] *** ChromaCat248 is now known as monarchess
[06:43:16] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 245 seconds)
[06:48:33] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:58] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:50:30] *** Quits: slakman (~slakman@112.202.246.24) (Quit: leaving)
[06:52:00] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[06:56:10] *** Joins: One39Dev (LordShiva@user/one39dev)
[06:57:59] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[07:01:31] *** Quits: monarchess (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[07:04:31] *** Quits: zaher (~zaher@37.48.186.49) (Ping timeout: 245 seconds)
[07:07:18] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[07:11:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:11:25] <vin> What does || mean in an algorithm? From math I know it's mod but it does not make sense here. For example, An array A of records of length n. if |A| < kM then //. Does |A| indicate lenght of A?
[07:12:16] <kzootech> vin: length/cardinality
[07:12:37] <vin> kzootech: is |A| == n?
[07:12:55] <kzootech> if n == |A|, sure
[07:13:31] <vin> so why couldn't that algorithm be written as if n < kM then //
[07:13:52] <kzootech> idk, i dont have enough context to answer that really
[07:13:55] <flakland> is n a vector ?
[07:14:12] <kzootech> An array A of records of length n.
[07:14:14] <vin> flakland: An array A of records of lengh n
[07:14:16] <flakland> errr A
[07:14:23] <kzootech> thats super unclear really.... 
[07:14:35] <kzootech> i could read that as an array of n records
[07:14:48] <kzootech> but i think it means an array of records where each record is size n
[07:15:46] <kzootech> but really the sentence is pretty unclear to me
[07:16:05] <kzootech> honestly if its a homework problem i would just go with whatever is easier to solve ;)
[07:16:23] <vin> haha it's not but thanks
[07:16:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:17:10] <kzootech> my instinct is |A|!=n
[07:17:25] <kzootech> except when |A|=n by coinidence 
[07:17:31] <flakland> the wording is too confusing
[07:18:29] <flakland> wht is kM ?
[07:18:56] <kzootech> no idea, we dont have enough context to solve this story problem 
[07:19:25] <flakland> i hate when that happens
[07:19:30] *** Quits: stagas (~stagas@2a02:587:c40e:fc00:8e37:1873:bcd0:d385) (Ping timeout: 265 seconds)
[07:20:39] <vin> https://arxiv.org/pdf/1603.03505.pdf kzootech flakland algorithm 2
[07:20:40] <bayaz> Type: application/pdf Size: 507.7 kB 
[07:20:53] <vin> For more context
[07:21:26] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[07:23:49] <flakland> ah, the records are fixed length!
[07:24:40] <flakland> yeah its "length" of A
[07:24:42] <vin> Yes so n can't be record length
[07:24:59] <kzootech> i think n is the record length
[07:25:06] <vin> So why not use n where ever |A| is being used
[07:25:24] <kzootech> that if |A| < kM is saying that when the array is less than some size kM dont do merge sort to finish the sort
[07:26:02] <vin> yes
[07:26:08] <flakland> or not even mention "of length n"
[07:26:19] <vin> exactly flakland 
[07:26:49] <vin> nvm it was a trivial observation anyway.
[07:27:04] <vin> *never mind
[07:27:27] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[07:27:30] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[07:27:56] <kzootech> i think its interesting algorithm 1 is "an array of records A of length n"
[07:28:49] <flakland> hahah
[07:29:05] <kzootech> hmm maybe n=|A|
[07:29:14] <kzootech> id have to actually read the paper to find out though
[07:29:52] *** Joins: Duchess (~Duchess@security.orcacomputers.com)
[07:30:28] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[07:30:40] *** Joins: flakland (~flaknet99@32.211.211.39)
[07:32:38] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[07:33:35] *** Joins: zemzem (~zem@41.sub-174-211-172.myvzw.com)
[07:45:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:45:28] *** Quits: RedNifre (~michael@dslb-088-073-104-092.088.073.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[07:46:37] *** Parts: zemzem (~zem@41.sub-174-211-172.myvzw.com) ()
[07:46:59] *** Joins: RedNifre (~michael@dslb-002-205-008-196.002.205.pools.vodafone-ip.de)
[07:47:26] *** Parts: corn266 (~corn266@ec2-18-217-219-218.us-east-2.compute.amazonaws.com) ()
[07:49:53] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[07:51:09] *** Quits: rtypo (~alex@user/rtypo) (Quit: WeeChat 3.3)
[07:53:50] *** Joins: rtypo (~alex@user/rtypo)
[07:57:53] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:58:24] *** Quits: Alex123 (~Adium@2603-8000-db40-0080-ad51-d4c2-0509-2322.res6.spectrum.com) (Quit: Leaving.)
[08:10:13] *** Joins: dead1 (~dead1@user/dead1)
[08:10:27] *** Quits: dead1 (~dead1@user/dead1) (Quit: dead1)
[08:13:05] <vdamewood> Yum, coffee!
[08:14:23] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[08:14:32] *** Quits: xff0x (~xff0x@2001:1a81:527f:8300:c0be:43f4:9685:d0cc) (Ping timeout: 240 seconds)
[08:15:25] *** Joins: xff0x (~xff0x@2001:1a81:527f:8300:57da:badd:210c:d109)
[08:15:45] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:16:09] <unetudiantJS> vdamewood: what kind of coffee do you drink?
[08:16:29] <vdamewood> unetudiantJS: Starbucks Viranda blend.
[08:16:52] <ent58> Am I a monster for liking coffee black?
[08:17:09] <vdamewood> ent58: No, but there may be other reasons.
[08:17:11] <unetudiantJS> vdamewood: :( starbucks, really?
[08:17:24] <unetudiantJS> ent58: i only drink it black and i drink espresso
[08:17:26] <vdamewood> unetudiantJS: It's what my mom buys, and I'm not picky.
[08:17:40] <unetudiantJS> ah ok
[08:17:47] <unetudiantJS> are you in the US?
[08:17:54] <vdamewood> Yep.
[08:17:57] <ent58> I get this stuff
[08:18:00] <ent58> https://www.deathwishcoffee.com/
[08:18:00] <bayaz> Title: Death Wish Coffee Company: World&#39;s Strongest Coffee | Best Coffee 
[08:18:13] <unetudiantJS> if you ever feel motivated to do it try backyard beans, it's made in my town and really good
[08:18:16] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 245 seconds)
[08:18:25] <unetudiantJS> yea i've heard good things about deathwish
[08:18:28] *** Quits: temy (~tem@wikimedia-commons/pandakekok9) (Read error: Connection reset by peer)
[08:18:29] <vdamewood> A friend of mine buys that stuff. (Death Wish)
[08:18:37] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[08:18:38] *** Quits: password2 (~password8@user/password2) (Read error: Connection reset by peer)
[08:19:06] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:19:43] <ent58> it really is quite the kick, I like it because it's basically an energy drink without all the nasties
[08:20:06] <vdamewood> Yay, I just fixed a bug.
[08:20:17] *** Joins: temy (~tem@wikimedia-commons/pandakekok9)
[08:20:21] <ent58> and statistically created 2 more :D
[08:20:37] *** Joins: BlueShark (sid10311@user/blueshark)
[08:20:38] <ent58> what did you fix?
[08:20:44] <arahael> ent58: I only drink black coffee.
[08:21:29] <ent58> honorary club member
[08:22:30] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 265 seconds)
[08:22:41] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[08:22:59] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 265 seconds)
[08:23:14] <vdamewood> ent58: A recent change caused my builds scripts to fail on non-Apple systems.
[08:23:23] <vdamewood> I fixed that.
[08:23:39] <arahael> vdamewood: That's easy to fix.  You replace them all with apple systems.
[08:23:50] <ent58> arahael: pure evil.
[08:24:02] <arahael> Not evil at all! Pragmatic. ;)
[08:24:21] <ent58> noooooo. I hate it. But I've taken a liking to Tup
[08:24:36] <ent58> for building pretty much anything
[08:24:42] <vdamewood> I'm still half tempted to write a GUI for Haiku for my project.
[08:24:43] <arahael> Tup?
[08:24:55] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Ping timeout: 265 seconds)
[08:25:09] <vdamewood> But I won't because I need to keep the scope limited.
[08:25:21] <arahael> vdamewood: And you'd need to make the app multithreaded.
[08:25:31] <ent58> it's at gittup.org, but I can't reach the site
[08:25:47] *** Joins: morgabra (sid500580@user/morgabra)
[08:26:12] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 265 seconds)
[08:26:16] <ent58> it's basically a make-like build system that has very sleek automatically generated dependency graphs based on watching I/O
[08:26:31] <vdamewood> Oh, I use ninja.
[08:26:34] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[08:26:37] <ent58> yeah, same spirit as ninja
[08:26:41] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[08:27:35] <tomathy> what's a nice simple algorithm for random yet sensible poker betting?
[08:28:02] <vdamewood> I doubt there's such a published algorithm.
[08:28:04] <ent58> it has some sharp corners, mostly because it has the same mindshare as a git repository, so it's mostly meant to build everything in-tree
[08:28:27] <vdamewood> in-tree? You mean, like in-source?
[08:28:36] <tomathy> to the labratory!
[08:29:06] <ent58> Yeah, so that it's only basically "touching" anything located next to or deeper than its repository
[08:29:23] <vdamewood> That's a deal breaker for me.
[08:29:34] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 260 seconds)
[08:29:40] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[08:29:50] <vdamewood> I do my builds with source in read-only network shares, so out-of-source builds are required.
[08:29:53] *** Joins: flakland (~flaknet99@32.211.211.39)
[08:31:00] *** Joins: sunarch (uid526836@user/sunarch)
[08:31:21] <ent58> So, that can be dealt with very easily by chaining them...but that does mean that all your components get built under one umbrella
[08:32:00] <ent58> and then you can use variants to pick between different build types (debug/release/info/anything)
[08:32:36] <ent58> that is one very interesting design decision that I wish they didn't do
[08:33:15] <ent58> It makes it hard to invoke things that may have numerous outputs in-tree, like using cmake/make on a library in your project
[08:33:19] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[08:34:58] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:36:29] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[08:42:57] *** Quits: temy (~tem@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[08:44:00] <vdamewood> I think I'll stick with CMake and Ninja.
[08:44:22] *** Joins: internalsplit_of (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:44:22] *** internalsplit_of is now known as givemeyourpies
[08:44:22] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Excess Flood)
[08:44:44] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:45:30] *** Quits: Guest1215 (~Guest12@pool-96-253-74-73.rcmdva.fios.verizon.net) (Ping timeout: 256 seconds)
[08:45:50] <ent58> it's rather unfortunate that CMake became the operating standard imo
[08:45:57] *** Joins: sonny80 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[08:46:04] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:47:07] <sonny80> if you are making a scanner should it return the token or should that be stored in a variable?
[08:47:34] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[08:47:46] *** Joins: flakland (~flaknet99@32.211.211.39)
[08:49:02] <ent58> do you mean something that functions more like strntok
[08:49:47] <sonny80> not really, I'm just parsing numbers
[08:50:47] <ent58> whenever I've made something that parses anything, I usually separate the text/binary conversion for when the user requests it
[08:51:05] <ent58> so the only thing I do is create a mapping of where a particular text token is and how long it is
[08:51:27] <sonny80> ok, that makes sense
[08:51:34] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[08:52:57] <ent58> for data that's transient you can destructively tokenize it to save memory and cache fit
[09:00:13] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[09:00:47] <vdamewood> When I write a tokenizer, I have the tokenizer return an object that has all the toekn's information. Lexeme, value, and all.
[09:01:00] <vdamewood> Actually, No. I leave out the lexeme.
[09:01:36] <vdamewood> So, for example, when I encounter "123 * 2", the first token returned is an integer token, with a value 123.
[09:03:11] *** Joins: reumeth (~reumeth@user/reumeth)
[09:11:27] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[09:11:28] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (Quit: Konversation terminated!)
[09:11:36] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:13:07] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:14:57] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 256 seconds)
[09:20:02] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[09:25:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:25:20] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[09:29:08] *** Atque is now known as hammond
[09:29:17] *** hammond is now known as Atque
[09:31:23] *** Joins: Guest8270 (~vit@chello085216193138.chello.sk)
[09:32:02] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[09:32:02] *** Quits: yin (~z@user/zero) (*.net *.split)
[09:32:02] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:32:02] *** Quits: neunon (~neunon@user/neunon) (*.net *.split)
[09:32:02] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[09:32:02] *** Quits: Scarecr0w (~Scarecr0w@user/scarecr0w) (*.net *.split)
[09:32:02] *** Quits: adrian17 (~adrian17@thehyper.space) (*.net *.split)
[09:32:02] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[09:32:02] *** Quits: barlas (~aqeel@user/barlas) (*.net *.split)
[09:32:02] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[09:32:02] *** Quits: dislabled (~dislabled@115.229.164.82.customer.cdi.no) (*.net *.split)
[09:32:02] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[09:32:02] *** Quits: MrPockets (~John@user/mrpockets) (*.net *.split)
[09:32:02] *** Quits: d1z (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050) (*.net *.split)
[09:32:02] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (*.net *.split)
[09:32:03] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (*.net *.split)
[09:32:03] *** Quits: davve (davve@bsd.douchedata.com) (*.net *.split)
[09:32:03] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[09:32:03] *** Quits: fcser (~fcser@booty.farted.net) (*.net *.split)
[09:32:03] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[09:32:03] *** Quits: Noventicx1 (~Noventicx@crux.uberspace.de) (*.net *.split)
[09:32:03] *** Quits: Dijky_ (~Dijky@user/dijky) (*.net *.split)
[09:32:03] *** Quits: jootoi_ (~jootoi@130.61.158.197) (*.net *.split)
[09:32:03] *** Quits: cfjk (~cfjk@user/cfjk) (*.net *.split)
[09:32:03] *** Quits: astiak (~astiak@ownage.biz) (*.net *.split)
[09:32:03] *** Quits: fingercomp (fingercomp@fomalhaut.me) (*.net *.split)
[09:32:03] *** Quits: bayaz (~bayaz@user/jeaye/bot/bayaz) (*.net *.split)
[09:32:03] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:32:03] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[09:32:03] *** Quits: jacekowski (jacekowski@jacekowski.org) (*.net *.split)
[09:32:03] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[09:32:03] *** Quits: Spiney_ (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[09:32:03] *** Quits: Kaya (~KC@user/kaya) (*.net *.split)
[09:32:03] *** Quits: voirnox (~voirnox@xor.moe) (*.net *.split)
[09:32:03] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[09:32:09] *** Joins: Kaya_C (~KC@2a01:4f9:c010:3917::1)
[09:32:11] *** Joins: fingercomp (fingercomp@fomalhaut.me)
[09:32:11] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[09:32:12] *** Quits: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c) (Quit: Leaving)
[09:32:14] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:32:20] *** Joins: adrian17 (~adrian17@thehyper.space)
[09:32:20] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[09:32:20] *** Joins: fcser (~fcser@booty.farted.net)
[09:32:20] *** Joins: Lea2 (~learath2@user/learath2)
[09:32:20] *** Joins: jacekowski (jacekowski@jacekowski.org)
[09:32:21] *** Joins: davve (davve@bsd.douchedata.com)
[09:32:24] *** Joins: Noventicx1 (~Noventicx@crux.uberspace.de)
[09:32:28] *** Joins: barlas (~aqeel@user/barlas)
[09:32:34] *** Joins: d1z (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050)
[09:32:36] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[09:32:40] *** Joins: AkechiShiro (~licht@2a01:e0a:5f9:9681:1473:3dff:fe42:56a9)
[09:32:42] *** Joins: astiak (~astiak@ownage.biz)
[09:32:49] *** Joins: kcrk (~kcrk@user/kcrk)
[09:32:53] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[09:32:56] <vdamewood> Slurp slurp.
[09:33:03] *** Joins: Dijky (~Dijky@user/dijky)
[09:33:08] *** Joins: cncr04s (~cncr04s@afxr.net)
[09:33:12] *** Joins: neunon (~neunon@user/neunon)
[09:33:20] *** Joins: bayaz (~bayaz@user/jeaye/bot/bayaz)
[09:33:20] <ent58> hmm
[09:33:26] *** ChanServ sets mode: +o bayaz
[09:33:27] *** Joins: cfjk (~cfjk@user/cfjk)
[09:33:34] *** Joins: jootoi (~jootoi@130.61.158.197)
[09:33:34] *** Joins: voirnox (~voirnox@xor.moe)
[09:33:37] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[09:33:38] *** Joins: zero (~z@user/zero)
[09:33:39] *** Joins: dislabled (~dislabled@115.229.164.82.customer.cdi.no)
[09:33:41] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[09:33:42] <vdamewood> We went without a bot for 7 seconds!
[09:33:45] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[09:33:50] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[09:34:03] <ent58> Oh, is that what's going on?
[09:34:12] *** Joins: MrPockets (~John@user/mrpockets)
[09:34:26] *** Joins: kmh (~kmh@2a00:6020:5004:6800:8331:e01e:f268:e1ec)
[09:35:05] *** Joins: user51 (~user51@176.228.151.30)
[09:35:12] <vdamewood> ent58: Well, no. Server maintenance.
[09:35:27] <vdamewood> The bot was connected to one of the servers being maintained.
[09:35:55] <ent58> Ah. I don't use IRC too often
[09:36:19] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:36:24] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (*.net *.split)
[09:36:24] *** Quits: les (znc@user/les) (*.net *.split)
[09:36:24] *** Quits: joj (~joj@jojeee.xyz) (*.net *.split)
[09:36:24] *** Quits: edenist (edenist@rdns.robotprofessor.net) (*.net *.split)
[09:36:24] *** Quits: bmahe[m] (~bmahematr@2001:470:69fc:105::d140) (*.net *.split)
[09:36:24] *** Quits: Alpha3031 (~alpha3031@wikipedia/alpha3031) (*.net *.split)
[09:36:24] *** Quits: BenLand100 (~bland@user/benland100) (*.net *.split)
[09:36:24] *** Quits: ninjabanjo (~ninjabanj@107.150.45.163) (*.net *.split)
[09:36:24] *** Quits: stack[m] (~queue-@user/queue/x-7267619) (*.net *.split)
[09:36:24] *** Quits: tehenderz (~tehenderz@ti0018a400-10817.bb.online.no) (*.net *.split)
[09:36:24] *** Quits: kaivai (~kaivai@user/kaivai) (*.net *.split)
[09:36:24] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[09:36:24] *** Quits: tanto (~tanto@178.62.223.32) (*.net *.split)
[09:36:24] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[09:36:24] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[09:36:24] *** Quits: launchd (launchd@bitbot/launchd) (*.net *.split)
[09:36:24] *** Quits: Vesryn (~vesryn@user/vesryn) (*.net *.split)
[09:36:25] *** Quits: CoJaBo (~aztec@user/CoJaBo) (*.net *.split)
[09:36:25] *** Quits: PsyZeus (~TheLight@user/psyzeus) (*.net *.split)
[09:36:25] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[09:36:25] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[09:36:25] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[09:36:25] *** Quits: birkoff (birkoff@user/birkoff) (*.net *.split)
[09:36:33] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[09:36:33] *** Joins: theglass (~glass@246.ip-137-74-113.eu)
[09:36:34] *** Joins: PsyZeus (~TheLight@37.48.95.134)
[09:36:36] *** Joins: tehenderz (~tehenderz@ti0018a400-10817.bb.online.no)
[09:36:37] *** Quits: theglass (~glass@246.ip-137-74-113.eu) (Changing host)
[09:36:37] *** Joins: theglass (~glass@user/theglass)
[09:36:40] *** Joins: joj (~joj@jojeee.xyz)
[09:36:40] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[09:36:41] *** Joins: edenist (~edenist@rdns.robotprofessor.net)
[09:36:41] *** Joins: launchd (launchd@bitbot/launchd)
[09:36:41] *** Quits: PsyZeus (~TheLight@37.48.95.134) (Changing host)
[09:36:41] *** Joins: PsyZeus (~TheLight@user/psyzeus)
[09:36:41] *** Joins: les (znc@user/les)
[09:36:46] *** Joins: mweckbecker (~matthias@weckbecker.name)
[09:36:47] *** Joins: tanto (~tanto@178.62.223.32)
[09:37:02] *** Joins: monchi (~joints@143.198.92.132)
[09:37:06] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[09:37:06] *** Joins: kaivai (~kaivai@user/kaivai)
[09:37:10] *** Joins: Vesryn (~vesryn@user/vesryn)
[09:37:10] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[09:37:13] *** Joins: chronon (~chronon@user/chronon)
[09:37:25] *** Joins: Alpha3031 (~alpha3031@wikipedia/alpha3031)
[09:37:27] *** Joins: vit (~vit@chello085216193138.chello.sk)
[09:37:33] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[09:37:34] *** Joins: bmahe[m] (~bmahematr@2001:470:69fc:105::d140)
[09:37:40] *** Joins: ninjabanjo (~ninjabanj@107.150.45.163)
[09:37:51] *** vit is now known as Guest6959
[09:39:05] *** Joins: BenLand100 (~bland@64.253.5.174.dyn-cm-pool75.pool.hargray.net)
[09:39:06] *** Quits: BenLand100 (~bland@64.253.5.174.dyn-cm-pool75.pool.hargray.net) (Changing host)
[09:39:06] *** Joins: BenLand100 (~bland@user/benland100)
[09:40:27] *** Quits: carbolymer (~carbolyme@dropacid.net) (Ping timeout: 256 seconds)
[09:40:27] *** Quits: fingercomp (fingercomp@fomalhaut.me) (Ping timeout: 256 seconds)
[09:40:51] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:41:01] *** Quits: Guest8270 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[09:41:12] *** Joins: stack[m] (~queue-@user/queue/x-7267619)
[09:42:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:42:55] <arahael> vdamewood: i felt a bit sick a few moments ago, but it lasted 7 seconds!  coincidence? :)
[09:43:12] <vdamewood> arahael: Probably. I was wrong about the amount of time.
[09:43:24] *** Joins: namkeleser (~namkelese@101.175.102.188)
[09:44:12] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[09:45:01] *** Joins: hololeap_ (~hololeap@user/hololeap)
[09:45:20] *** Joins: fingercomp (fingercomp@fomalhaut.me)
[09:45:30] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[09:48:17] *** Joins: birkoff (birkoff@thunderirc.net)
[09:48:17] *** Quits: birkoff (birkoff@thunderirc.net) (Changing host)
[09:48:17] *** Joins: birkoff (birkoff@user/birkoff)
[09:50:03] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:52:57] *** Joins: pulse (~pulse@user/pulse)
[09:53:30] * vdamewood checks pulse's pulse.
[09:53:43] * pulse plays dead
[09:54:03] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[09:54:38] <ent58> we've got a live one
[09:56:00] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:56:53] *** Quits: sonny80 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[09:57:49] <vdamewood> The nice thing about dead people is that once they're dead, you can stab them in the neck repeatedly and they won't die again.
[09:57:57] *** Quits: Jong (~Jong@2620:10d:c090:400::5:31eb) (Ping timeout: 250 seconds)
[09:57:59] * vdamewood gets his stabbing knife.
[09:58:35] * vdamewood doesn't find his stabbing knife. Gets his decapitating chainsaw instead.
[10:00:19] *** hololeap_ is now known as hololeap
[10:00:35] <ent58> that's violent
[10:01:00] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[10:04:04] <ent58> I hope pulse is okay
[10:04:20] <vdamewood> I should probably figure out how to get a C# program to use a C++ library.
[10:04:40] <pulse> Lol vdamewood 
[10:04:47] <ent58> Step one: delete C# codebase
[10:04:51] <ent58> ??
[10:04:55] <vdamewood> Profit!
[10:05:36] <pulse> C sharpify your life
[10:05:50] <vdamewood> Ah! Zombie!
[10:06:34] <arahael> vdamewood: honestly? on windows? use COM.
[10:06:55] <vdamewood> arahael: That's what I was thinking too.
[10:07:27] <vdamewood> P/Invoke doesn't look like it works well with vanilla C++.
[10:07:44] <arahael> p/invoke is just not worth it,
[10:07:56] <vdamewood> So, I can either extern "C" everything, and P/Invoke that, or use COM.
[10:08:12] <arahael> but it works fine if you get it completely correct. the slightest mistake, and you're in undefined behaviour.
[10:08:34] <vdamewood> Now I'm wondering if I want to COMify the library, or write a wrapper.
[10:08:44] *** Joins: stagas (~stagas@2a02:587:c40e:fc00:3af6:c0f1:31e8:8d6a)
[10:09:42] *** Joins: Rounin (~david@84.212.130.215)
[10:10:05] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (Remote host closed the connection)
[10:10:28] <arahael> For windows, probably the former.  Keep things a bit simpler.  And use reg-free COM.
[10:10:42] <vdamewood> reg = registration?
[10:10:47] <arahael> yep
[10:11:10] <vdamewood> I'll need to blow the dust off my COM book.
[10:11:28] <arahael> for some reason most of those books didnt mention it.
[10:11:43] <ent58> when I think COM, I think nausea
[10:12:04] <vdamewood> Didn't mention what? Reg-free cOM?
[10:12:09] <arahael> Yeah.
[10:12:22] <ent58> luckily the only time I've directly worked with it is a C project manually calling COM for very specific things
[10:12:35] <arahael> And another caveat: Since your server is in C++, you don't want to consider updating it to .NET, otherwise .NET will suddenly completely change the way it works with it.
[10:12:54] <arahael> ent58: Windows COM is poorly understood, but it worked remarkably well.
[10:13:01] <vdamewood> You've mentioned that.
[10:14:17] <arahael> Infact, I wonder why COM never really got particularly popular outside of windows.
[10:15:22] <vdamewood> I wand to say due to lack of popularity of C++ in general at the time, but I'm starting to doubt that.
[10:15:54] <vdamewood> Mac development switched to C++ with System 7.
[10:16:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:16:17] <ent58> I mean *nix has things like dbus
[10:16:18] <vdamewood> Not every Unix had a C++ compiler, but many of them did.
[10:16:32] <arahael> ent58: dbus is a very recent thing, and it's addressing a very different need.
[10:16:41] <arahael> vdamewood: COM wasn't just a C++ thing though.
[10:16:49] *** Quits: mdrake (~mattd@2601:1c0:6c01:b460:1b72:680d:903d:2b7d) (Remote host closed the connection)
[10:16:56] <arahael> Maybe the linux approach there was gobject.
[10:17:03] <vdamewood> arahael" Nope. COM is how I get my VB6 code and C++ code to talk.
[10:17:28] <arahael> vdamewood: COM, by contrast, is how I got my Delphi code and...  Anything else...  To talk.
[10:17:57] <vdamewood> Is there a COM standard for string representations?
[10:18:06] <arahael> vdamewood: Yes.  The bstr.
[10:18:21] <ent58> I guess then it was always some form of standardized general IPC before settling on dbus
[10:18:31] * arahael tries to find docs on bstr.
[10:18:35] <vdamewood> arahael: Great, thanks.
[10:18:53] <vdamewood> ent58: CM isn't IPC.
[10:18:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:19:01] <vdamewood> COM isn't IPC*
[10:19:08] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:e574:13cf:2f5d:c5fd) (Read error: Connection reset by peer)
[10:19:09] <arahael> https://docs.microsoft.com/en-us/dotnet/framework/interop/default-marshaling-for-strings
[10:19:11] <bayaz> Title: Default Marshaling for Strings - .NET Framework 
[10:19:52] <arahael> ent58: DCOM+ can be used as an IPC, but honestly, most devs just used it as a dynamic library interface.
[10:20:16] <ent58> well no, but the model for doing things in general is kind of inverted between the OS's right? Heavy processes/threads/components vs lightweight processes/multiprocess/process-as-component
[10:20:18] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 268 seconds)
[10:20:54] <arahael> ent58: Well, COM supports *all* of those.
[10:21:33] <arahael> vdamewood: Oh, another caveat: Don't let C++ exceptions cross the COM boundary. It's not nearly as good as the docs claim it is.
[10:21:53] <arahael> It's possible to get them to work, but...  There is only pain.
[10:24:21] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[10:24:40] *** Joins: mickey8 (~user@user/mickey)
[10:27:33] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:29:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:29:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:30:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:33:37] <vdamewood> Is thee a word for when the multiplication operation is implied by adjacent terms in standard mathemetical notation?
[10:33:50] <vdamewood> eg xy is implicitly x * y.
[10:35:16] *** Joins: temy (~tem@wikimedia-commons/pandakekok9)
[10:35:50] <ent58> juxtaposition?
[10:35:50] <pulse> Yes, it's literally called "implied multiplication"
[10:36:19] <pulse> https://en.wikipedia.org/wiki/Multiplication#Implicit
[10:36:20] <bayaz> Title: Multiplication - Wikipedia 
[10:36:20] <ent58> or that
[10:37:27] *** Guest6959 is now known as freeworld
[10:37:33] <vdamewood> ent58: Not too far off, thought. From pulse's link. "In algebra, multiplication involving variables is often written as a juxtaposition..."
[10:38:09] <pulse> Yes, but that's not the name for it
[10:38:23] <pulse> Juxtaposition is the "technique" for implied multiplication
[10:38:27] <pulse> At least that's how I parsed it
[10:38:27] <ent58> yeah it's....it's like describing how it's written
[10:38:39] <ent58> not what it is
[10:39:01] <jinsun> how did you get a link to the middle of a bullet list?
[10:39:06] <ent58> There should be one concise word for it
[10:39:40] <ent58> a number sign is a standard URI behavior that jumps to a dom element
[10:39:45] <ent58> I think
[10:40:18] <pulse> jinsun, I followed a link from here https://en.wikipedia.org/wiki/Order_of_operations#Mixed_division_and_multiplication
[10:40:19] <bayaz> Title: Order of operations - Wikipedia 
[10:40:32] <ent58> being part of a list implies that property (or like a header? I'm not a web person)
[10:41:06] <ent58> hopefully that's what you meant lol
[10:41:58] <jinsun> pulse: ah cool, so it was a separate page earlier
[10:42:11] <pulse> Yeah, but that is a good question, how would you link there
[10:42:17] <pulse> I suppose you could inspect code
[10:43:20] <ent58> manually adding \# to a link with the name of a header-looking element of the page usually works
[10:43:39] <ent58> #*
[10:44:00] <vdamewood> The # will link to any element with an id value.
[10:44:03] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[10:44:18] <ent58> ooo nice, I didn't know that
[10:44:22] *** Joins: Buttercat (~Buttercat@user/buttercat)
[10:44:24] <vdamewood> So, if you have #implicit, then it links to some element with id="implicit", which wikipedia set up already.
[10:44:42] <ent58> so basically any element including divs
[10:44:55] <pulse> <span class="anchor" id="Explicit"></span>
[10:44:56] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[10:44:57] <pulse> Look for these
[10:45:12] <pulse> It's weird that this isn't a browser feature
[10:45:19] <pulse> Or maybe it is and I just don't know how to activate it
[10:45:30] <vdamewood> pulse: What isn't a browser feature?
[10:45:42] <pulse> Some way to link to X
[10:46:52] <vdamewood> -lxlib
[10:47:06] <vdamewood> ... :D
[10:48:08] <ent58> lol
[10:49:22] <pulse> But I use Visual Studio
[10:52:48] *** Joins: Alex123 (~Adium@cpe-172-249-100-115.socal.res.rr.com)
[10:57:21] <DPA> This could be implemented as a bookmarklet: javascript:void(addEventListener("click",e=>{event.preventDefault();event.stopPropagation();event.stopImmediatePropagation();location.href='#'+event.target.closest('[id]').id;},{once:true,captue:true}))
[10:57:43] <DPA> s/event/e/
[10:58:07] <PlanckWalk> You can do it via the dev tools in most browsers
[10:58:44] <DPA> Seams cumbersome, though.
[10:58:53] <pulse> Didn't wikipedia used to have those anchor symbols that would appear if you hovered something
[10:58:56] <ent58> the fact that there's even a function to get the closest target ID is funny to me
[10:58:57] <pulse> Or am I misremembering
[10:58:57] *** Quits: Alex123 (~Adium@cpe-172-249-100-115.socal.res.rr.com) (Quit: Leaving.)
[10:59:14] <ent58> you're not pulse, I've seen them on other sites that use wiki as a base
[10:59:43] <pulse> In Chrome you can also link to highlight now
[11:00:07] <pulse> https://en.wikipedia.org/wiki/Goat#:~:text=the%20Yule%20Goat%20is%20one%20of%20the%20oldest%20Scandinavian
[11:00:08] <bayaz> Title: Goat - Wikipedia 
[11:00:15] <pulse> Kinda weird link but I guess it works
[11:00:53] <ent58> that literally just searches for the text I imagine
[11:01:12] <pulse> What https://en.wikipedia.org/wiki/Yule_goat#/media/File:Christmas-Goat.JPG
[11:01:12] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:01:13] <bayaz> Title: Yule goat - Wikipedia 
[11:01:16] <pulse> ent58, Yeah, I think so
[11:01:18] <ent58> I mean so is an ID link but that's like doing a ctrl+f when you hit the page
[11:01:22] <ent58> lol
[11:01:44] <ent58> media links?
[11:01:56] <ent58> man I'm learning today
[11:01:57] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[11:01:57] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:02:08] *** Joins: rany (~rany@user/rany)
[11:02:12] *** Joins: mickey8 (~user@user/mickey)
[11:03:28] <pavonia> TIL void
[11:03:58] <mawk> void *
[11:04:19] <ent58> void *(*) (void *)[4]
[11:04:48] *** Joins: frost (~frost@user/frost)
[11:05:00] <mawk> void (*)(void (*[])(void))
[11:05:10] <pulse> Hey, that is illegal
[11:05:11] <pavonia> Oh, I was referring to the JS operator (thought this was #javascript)
[11:05:13] <ent58> ^
[11:05:18] <ent58> yeah mine broke
[11:05:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:06:08] <mawk> why is it illegal pulse 
[11:07:00] <pulse> The nipples are showin... err, never mind
[11:07:14] <ent58> LOL
[11:08:59] *** Joins: mrig (~AdiIRC@user/mrig)
[11:11:51] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[11:14:08] <ent58> All I want for christmas is C++ to define the nature of a function type
[11:15:54] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:16:14] *** Joins: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr)
[11:20:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:23:37] *** Joins: palasso (~palasso@user/palasso)
[11:25:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[11:26:48] *** Quits: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr) (Quit: Leaving)
[11:27:19] <DPA> I really like bookmarklets. In switzerland, we have QR codes for payments now, but my bank website only provides an input field and no QR code reader.
[11:27:19] <DPA> But I didn't make or use an extension or external program. I just made a bookmarklet: https://qr-s.s.abrecht.li/ Browser independent & just works. Bookmarklets are awesome.
[11:27:22] <bayaz> Title: QR Scanner 
[11:27:28] <pyzozord> mawk: do i read this right, it'd a function that returns pointer to void and as argument takes a function that returns an array lf pointers to void and taks void as argument
[11:27:57] <mawk> yes pyzozord 
[11:28:06] <mawk> well
[11:28:07] <mawk> no
[11:28:26] *** Joins: prompt32 (~prompt32@ppp-94-66-58-183.home.otenet.gr)
[11:28:29] <mawk> it's a function pointer to a function that takes an array of function pointers that point to void(void) functions
[11:28:42] <mawk> and the return of the outer function pointer is void
[11:28:46] <mawk> not a pointer to void
[11:28:54] <mawk> otherwise it'd be void *(*)...
[11:29:17] <mawk> the (*) is actually shortcut for (*name)
[11:29:23] *** Quits: _inky (~inky_@46.36.112.226) (Ping timeout: 265 seconds)
[11:29:25] <mawk> you can always imagine a name there when you see the (*)
[11:31:41] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[11:31:52] <DPA> (*) is not a shortcut for (*name). There can always be a name, but there is nothing about (*) that makes it a shortcut. In types which don't declare anything, a name is always optional.
[11:32:30] <mawk> yes it's optional
[11:32:34] <mawk> that's what I meant
[11:32:39] <mawk> if you see (*), you can add a name
[11:32:56] <mawk> so (*) is a lazy way to write (*name), or in other words a shortcut
[11:34:10] <pyzozord> mawk https://cdecl.org/ gives me syntax error
[11:34:12] <bayaz> Title: cdecl: C gibberish ↔ English 
[11:34:27] <mawk> you need a name in the outer function pointer to make it valid
[11:34:38] *** Joins: inky (~inky@5.77.165.221)
[11:34:42] <mawk> like typedef void (*stuff)(void (*[])(void));
[11:35:40] <pyzozord> ah indeed
[11:35:40] *** Quits: inky_ (~inky@46.36.112.226) (Ping timeout: 265 seconds)
[11:35:51] <pyzozord> didn't know how was it a pointer not a function
[11:35:56] <pyzozord> but now i see it
[11:36:03] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[11:37:50] <pyzozord> if you remove the first pair of parentheses it will be a function declaration
[11:38:04] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:38:57] *** Joins: martums (~martums@user/martums)
[11:40:00] <DPA> Although it is always possible to write a name in (*name), it still isn't a shortcut. When a type doesn't declare anything (for example within a sizeof), it is always possible to omit the name. There is nothing special about (*) in that regard, and no reason writing a name would be any more complete than not writing one.
[11:40:51] <DPA> It's not a shortcut, it's just pointless.
[11:42:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:42:52] <mawk> (*) is (*name) with a zero-length name
[11:42:57] <mawk> a shorter way to do it
[11:43:00] <mawk> shorter = shortcut
[11:43:02] <mawk> QED
[11:43:04] <ent58> What I really want is a type that represents a kind of super-inline function, where it's kind of like an abstraction of a code-object
[11:44:04] <ent58> being able to store a compiled function into a buffer, etc
[11:44:21] *** Joins: _inky (~inky_@5.77.165.221)
[11:45:30] <ent58> it would require a huge change in how the language is designed, but it would create the opportunity to do so many awesome things directly from within the language
[11:45:41] <DPA> When (*) is possible, (*name) is setting a name where none is necessary. It's not declaring anything, it's not doing anything, it essentialy doesn't exist. It's not a shortcut. It's just useless gibebrish. QED.
[11:45:48] *** Joins: absc (~absc@81.31.144.28)
[11:46:14] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[11:46:51] <DPA> (also, identifiers in C can't have a length of zero, so it can't be a zero length name).
[11:47:40] <mawk> by this logic comments are gibberish and unnecessary
[11:47:48] <mawk> since they get stripped by the compiler
[11:47:49] <pyzozord> hah i just came up with a name for a programming language: Rest. it's a play on rust and the full name is Restructured Programming Language. and it's goal is to adhering to structured programming principles 100% and be fully static.
[11:48:03] <ent58> Noooo
[11:48:05] <mawk> you will have google issues pyzozord 
[11:48:05] <DPA> mawk: Technically true.
[11:48:07] <mawk> with the real rest
[11:48:29] *** Joins: qbt (~qbt@user/edun)
[11:48:32] <mawk> it's technically true that they get stripped by the compiler, I don't think it's technically true to call them unnecessary
[11:48:35] *** Parts: qbt (~qbt@user/edun) ()
[11:48:37] <pyzozord> RestPro could be it's pet name
[11:48:40] <ent58> pyzo please go the other way, we want dynamic everything
[11:48:45] <pyzozord> or RPL
[11:48:52] *** Quits: martums (~martums@user/martums) (Ping timeout: 264 seconds)
[11:48:58] <mawk> there are two ends reading the code: an human and a compiler
[11:49:26] <pyzozord> ent58 that's the point, I have a hypothesis that dynamic is really not that great
[11:50:06] <mawk> the greatness lies in the type system
[11:50:15] <ent58> so I don't mean duck typing
[11:50:32] <ent58> but there is a huge gap in what, say, C/C++ specifies
[11:50:47] <pyzozord> mawk that sounds rusty
[11:50:57] <ent58> and it's the dynamics of treating code as data
[11:51:01] <mawk> duck typing means you have 1 type
[11:51:11] <mawk> so that's strictly less expressive than a strongly typed language
[11:51:15] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[11:51:34] <ent58> Yeah I've always used that as a secondhand for not-statically-types
[11:51:41] <ent58> typed*, maybe that's a bit lazy :D
[11:51:46] <pyzozord> i am not convinced that greatness lies in type system. it's like i have a sports car and speed limit. Kind of pointless and expensive.
[11:52:10] <mawk> why
[11:52:11] <pyzozord> i have a expressive dynamic language limited by strict typing system
[11:52:19] <mawk> you can use a single type for everything, and recreate duck typing
[11:52:25] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[11:52:32] <mawk> it allows you to do more
[11:52:49] <pyzozord> yes you can ignore the speed limit if you want
[11:52:59] *** Joins: skepta (~eric2@82.102.25.12)
[11:53:14] <pyzozord> I'm wondering if that is the right mindset for all of this
[11:53:24] <mawk> I'd rather say it's crashing your car, that is the limitation
[11:53:29] <pyzozord> I'm wondering if a bicycle isn't the right answer
[11:53:32] <mawk> the type system prevents you from ramming your car in a tree
[11:54:30] *** Joins: rvgate (~rvgate@user/rvgate)
[11:54:36] <mawk> but you can still override it, for instance with stuff like *(othertype *)&x in C++
[11:54:55] <ent58> the problem is that any language that starts getting really powerfully expressive switches to non-natively-compiled representation
[11:55:03] <ent58> thus mooting it for me
[11:55:07] <mawk> why
[11:55:11] <mawk> if there's a JIT you don't feel it
[11:55:13] <mawk> and it rhymes
[11:55:15] <pyzozord> bicycle makes you stay in shape, you are better for the environment etc. if enough people use bikes, cities transform by necessity to smaller local shop owners and generally things change
[11:55:25] <mawk> lol
[11:55:31] <mawk> I don't think you're supposed to make analogies like that pyzozord 
[11:55:36] *** Joins: martums (~martums@user/martums)
[11:55:43] <ent58> I don't want to hide the behavior of a JIT behind the implementation of the language, I want to express that behavior
[11:55:48] <mawk> you can make a fake .exe out of the bytecode representation
[11:55:50] <mawk> if you want to hide it
[11:55:57] <ent58> and I want to be able to do things you strictly can't with a jit
[11:56:03] <mawk> like what?
[11:56:24] <mawk> you can run assembly code from regular python, which doesn't even have a JIT
[11:56:36] <mawk> you can call an arbitrary function pointer
[11:56:41] <mawk> I don't see what you can't do
[11:56:41] <ent58> self modification for superoptimization
[11:56:47] <DPA> I think Cuprite isn't taken as a programming language name yet. It's a name for the second oxidized form of copper and the mineral / ore.
[11:56:53] <pyzozord> mawk i think those are good analogies. i am referring to the fact that if you are limited to a static lsnguage you find other ways of dealing with your problems, and those might be better ways
[11:57:27] <pyzozord> like static code generation
[11:57:43] <mawk> you can probably do that in python as well ent58 , it's compiled to bytecode at the start and you can probably modify it on the fly if you are dedicated enough
[11:57:50] <mawk> but self-modification is a theme that even in C I never see
[11:57:55] <ent58> yeah but that's cheating
[11:57:55] <mawk> except in malware
[11:57:56] <pyzozord> that could be built into language. it could have a compiler time execution to run itself on itself to generate itseld
[11:57:59] <ent58> Right...it's unsafe
[11:58:07] <DPA> (Rust is the oxidized form of iron, but it doesn't make for pretty gem stones, unlike Cuprite)
[11:58:43] <ent58> C/C++ step headfirst into undefined behavior when you start treating functions as anything but callable locations
[11:59:19] <ent58> superoptimization requires the ability to self modify
[11:59:26] <mawk> ah yes the cuprite is a nice bordeaux red DPA 
[11:59:53] <mawk> https://upload.wikimedia.org/wikipedia/commons/6/6a/Cuprite-66649.jpg
[11:59:54] <bayaz> Type: image/jpeg Size: 34.7 kB 
[11:59:56] <pyzozord> maybe what we do with languages is that we indeed hyperoptimize the obvious way forward instead of reconsidering our way all together
[12:00:05] <ent58> it could be made safe, and divided into types: statically-analyzable, dynamic, and customizing
[12:01:05] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[12:01:20] *** prompt32 is now known as kapad
[12:02:00] <ent58> the dream there is having the customizability of a scripting language embedded in an application but without any performance hit
[12:02:21] <mawk> using JIT
[12:02:25] <ent58> as if the code you wrote becomes part of the program: as if it was compiled that way to begin with
[12:02:26] *** Quits: kapad (~prompt32@ppp-94-66-58-183.home.otenet.gr) (Quit: Leaving)
[12:02:30] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Quit: Leaving)
[12:02:45] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:02:45] <ent58> If there's something that can do that in C/C++ right now, then maybe I'm just not up to date
[12:02:52] <ent58> but are you sure that's the same thing?
[12:02:59] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[12:03:17] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:03:17] *** Joins: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr)
[12:03:20] <mawk> well you will have a performance hit in the beggining, but then the hot code paths will get JIT'd and reach almost native performance
[12:03:23] *** Joins: jaysicks (~jaysicks@94-21-138-235.pool.digikabel.hu)
[12:03:32] <mawk> so it needs a startup time and such
[12:04:09] <mawk> and it works if you don't play too much with the duck typing; for instance when you JIT a code path like a function calls, it is for specific argument types
[12:04:19] <mawk> at least in the javascript JIT of chrome, I don't know if there are better techniques
[12:04:35] <ent58> I think maybe I just misunderstand what exactly the JIT is doing to accomplish this, but I mean literally rewriting instructions
[12:05:36] <pyzozord> Just In Time [Compilation]
[12:05:49] <mawk> if the embedded script changes it will just need to be JIT'd again, so it will have again the startup time
[12:05:59] <mawk> but after a while reach almost native performance again
[12:06:02] <ent58> if you have a simple loop counting to 10 in C and printing it along the way, my idea here is to be able to, from C, modify the instruction that's adding to the variable to subtract from it
[12:06:46] <PlanckWalk> Well, you can get something *like* that...
[12:06:51] <PlanckWalk> E.g. with function pointers
[12:07:08] <ent58> but in a systematic fashion, clearly you could arrange to have it happen by manually writing it and knowing where it is in the function, etc
[12:07:18] <ent58> but that's "cheating"
[12:07:22] <mawk> you can modify your own code in C, if you setup the elf correctly to have a writable executable code page
[12:07:40] <PlanckWalk> Yes but ewww.
[12:07:41] <ent58> Only in a very, very brittle way that depends entirely on your compiler
[12:07:44] <mawk> or if you mmap a new rx page and copy your code there; using PIC
[12:07:51] <mawk> why brittle?
[12:07:54] <mawk> that works on anything that speaks elf
[12:08:05] <mawk> and you can probably do the same with PE and mach and whatever
[12:08:35] <ent58> well it is certainly possible to do it that way, I mean I have a small example of a project that does something like it
[12:08:37] <mawk> wx page sorry
[12:08:50] <ent58> but the idea is that this is able to be systematically written from the language
[12:09:13] <mawk> well if the restriction is not being able to modify the machine code directly, you don't have many other options
[12:09:25] <ent58> no no, that's exactly what I want! Lol
[12:09:32] <mawk> you'd have to use an intermediary representation that get's compiled on the fly, or JIT'd, or interpreted
[12:09:48] <mawk> well what's wrong with modifying your own code from C then? if that's exactly what you want
[12:09:52] <ent58> the restriction is not using function pointers and duplicating code as a stopgap, or resorting only to trampolining
[12:09:56] <mawk> you just need to enable WX code page and that's it
[12:10:01] <ent58> lol
[12:10:08] <DPA> New idea for a name: Zincite, the mineral form of zinc oxide.
[12:10:19] <mawk> open your elf with hexedit and modify the right bit like a pro hacker
[12:10:31] <ent58> That's not the point though mawk, that's possible, but inferior to a solution that's included in the language as a direct feature
[12:10:50] <ent58> imagine a C compiler
[12:10:54] <ent58> that with some magic keyword
[12:10:57] <ent58> like `mutate`
[12:11:06] *** Quits: temy (~tem@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[12:11:08] <mawk> so you want a compiler in your compiler
[12:11:15] <ent58> gives a function the property that it is "ghostly compiled" where it's used
[12:11:19] *** Quits: maxzor (~maxzor@2a01cb04054faa00042e24f24e247518.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[12:11:24] <mawk> that compiles bits of code so that you can swap them out at runtime
[12:11:27] <ent58> and if a function by the same name is redefined
[12:11:30] <ent58> yes precisely
[12:11:32] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[12:11:36] <ent58> but in a completely optimized way
[12:11:48] <mawk> but that's not very powerful, what would be better is to be able to compile new code at runtime
[12:11:50] <ent58> so that the code would look as if it was compiled that way to begin with
[12:12:03] <ent58> that's the dynamic part of the equation
[12:12:12] <Jck_true> ... But if you want optimized you need to know all the registers etc etc
[12:12:18] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:12:19] <ent58> exactly jck_true
[12:12:22] <mawk> yeah just embed a compiler in your program
[12:12:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:12:27] <ent58> exactly...that analysis can be done by the compiler
[12:12:36] <mawk> it sounds like a joke but there are pretty light C compilers out there, it's not impossible
[12:12:37] <Jck_true> ... This makes no sense
[12:12:38] <ent58> I imagine some aspect of it would have to be
[12:12:50] <ent58> What do you mean jck_true?
[12:12:55] <mawk> why Jck_true ? dynamic languages do it routinely
[12:12:56] <mawk> eval() etc
[12:13:05] <Jck_true> ent58: https://bellard.org/tcc/
[12:13:07] <bayaz> Title: TCC : Tiny C Compiler 
[12:13:18] *** Quits: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr) (Quit: Leaving)
[12:13:27] <mawk> yes that's what I had in mind for the light C compiler
[12:13:31] <mawk> by my boy Fabrice
[12:13:33] <PlanckWalk> JIT compilers already do similar analysis
[12:13:59] <PlanckWalk> E.g. for things like dynamic dispatch
[12:13:59] *** Joins: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr)
[12:14:33] <ent58> so
[12:14:41] <DPA> Fun fact: efficient JIT is impossible in WASM
[12:14:44] *** Joins: maxzor (~maxzor@2a01cb04054faa00b117f66329c31897.ipv6.abo.wanadoo.fr)
[12:14:53] *** Quits: kapad (~kapad@ppp-94-66-58-183.home.otenet.gr) (Client Quit)
[12:15:06] <mawk> isn't WASM dumb enough to be compiled directly to machine code?
[12:15:16] <mawk> I thought it was basically like an llvm IR ready to be compiled
[12:15:23] <PlanckWalk> Sounds like amphiboly or excessively strict load on "efficient"
[12:16:06] <DPA> There is no efficient way to modify code at runtime.
[12:16:44] <mawk> well there's at least C swapping out machine code at runtime, that's efficient
[12:16:47] <mawk> even if it's not very useful
[12:16:53] <mawk> malware authors find it useful though
[12:17:07] <pyzozord> DPA why
[12:17:07] <ent58> It's about as useful as any language with the equivalent of an eval()
[12:17:11] <ent58> so isn't that a bit trivial?
[12:17:27] <mawk> well eval() is expressive enough for what you want to do ent58 
[12:17:47] <ent58> so, imagine for a second
[12:18:05] <ent58> that you want to re-write things that are going to be in the hot-path of a game loop, say
[12:18:29] <mawk> yeah
[12:18:31] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:18:33] <DPA> In WASM, you can't access the code as data at all. Or rather, you have a buffer, and give it so some browser function, which turns it into a wasm module, with JS functions that can be imported, and exported functions callable from JS. But to change it, you need to make a new buffer with code, and repeat the process.
[12:18:36] <PlanckWalk> Do you mean using WASM to implement a JIT runtime?
[12:18:43] <mawk> then for instance you'd have that game loop stored as a string template, and you fill the template variables and eval() it
[12:18:47] <mawk> so eval() is powerful enough
[12:19:05] <PlanckWalk> Because that's a bit silly.  WASM is itself often implemented in a runtime using JIT.
[12:19:43] <PlanckWalk> (and the underlying JIT *can* do code modification)
[12:19:45] <pyzozord> oh that's great, so wasm is truly static
[12:19:47] <ent58> if you show me a modern game that can run in a complex networked environment with potent graphics that operates the core of its logic in a string, I'll give you 500 dollars
[12:19:50] <pyzozord> i like it more and more
[12:19:54] <ent58> lol
[12:20:16] <pyzozord> however i heard it reaches only 80% of the native performance, I'm not sure way.
[12:20:29] <pyzozord> maybe it's 80% in the interpreted mode?
[12:20:31] <ent58> speed is important to me mawk
[12:20:38] <mawk> well nobody does it but that's not the point ent58 
[12:20:41] <mawk> the point is that it's possible
[12:20:46] <PlanckWalk> A heck of a lot of Stellaris runs in an interpreted (and pretty awful) language.
[12:20:49] <ent58> that's not my point ;-;
[12:20:54] <kennyd> the problem with eval is that it is too expressive. and it requires entire compiler/interpreter to be shipped with your executable. which isn't a problem if your code runs in an interpreter, but is if it doesn't
[12:20:58] <DPA> I've read WASM can in special cases outperform native code.
[12:21:00] <mawk> don't put the plow before the oxen ent58 
[12:21:15] <ent58> you're right Planck, and it suffers for it heavily
[12:21:31] <pyzozord> I'd imagine wasm is perfectly fine being compiled to native code
[12:21:33] <ent58> but those values are lifted out..it's gotten better than just re-referencing the config every time
[12:22:04] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 265 seconds)
[12:23:08] <ent58> the type of statically-analyzable self modification I'm talking about can be done without including an entire C/C++ compiler in the program, just a small set of functions that perform the modifications (as well as the data of the different versions of sections of code)
[12:23:16] <DPA> My main issue with WASM is that I can't have multiple memories in the same address space / memory mapping. I think if I had that, I could compile everything to wasm pretty much unchanged.
[12:23:19] *** Joins: aradesh (~aradesh@user/aradesh)
[12:23:48] <PlanckWalk> Yes, WASM is just a little bit too restricted
[12:23:52] <pyzozord> you mean memory aliasing?
[12:24:15] <ent58> but in the case that you're receiving code you haven't written in your project until after the program's already running, that's when you'd need at least a subset of the compiler in your program
[12:24:18] *** RazielZ is now known as Raziel
[12:24:22] <DPA> I just can't implement mmap completely.
[12:24:22] <pyzozord> you can emulate it with just loads and stores
[12:24:38] <pyzozord> or you can make syscalls
[12:24:57] <mawk> emulate it by returning to JS to give you a new buffer?
[12:24:59] <mawk> or isn't that possible
[12:25:17] <pyzozord> mawk no, by loads and stores
[12:25:21] <DPA> WASM takes only 1 linear bufer for it's memory.
[12:25:35] <mawk> make the buffer bigger and subdivise it yourself?
[12:25:51] <mawk> like buf[1000*k:1000*(k+1)] for the kth page
[12:25:55] *** Joins: zaher (~zaher@37.48.157.64)
[12:25:57] <pyzozord> yes but you can have your own code block that emulates mmap your own loads and stores
[12:25:59] <mawk> or whatever page size
[12:26:03] <DPA> I have some applications of my own which do mmap the same page twice, for a ring buffer.
[12:26:14] <pyzozord> essentially address transform functions
[12:27:11] <pyzozord> memory in a computer is fundamentally 1d rest is emulated by os or language
[12:27:56] <ent58> DPA: I'd assume that mmap'ing memory in that fashion has the gotcha that it will basically always incur a cache miss, right?
[12:28:39] <ent58> I've never thought about mapping the same physical page of normal (non file) memory to two virtual addresses from a caching point of view
[12:29:14] <DPA> Memory mapping is usually a feature provided my CPUs (MMU). Emulating that is extremely inefficient, as any acces would have been checked.
[12:29:14] <DPA> I think it's fine cache wise, but I'm not an export in those things.
[12:29:32] <DPA> *have to be
[12:29:41] <pyzozord> hmm, if the mapping is supported by the cpuz I'd imagine it also keeps cs he intact
[12:29:58] <mawk> memory mapping is not only allocating memory
[12:30:04] <mawk> it's also memory protection which is very important
[12:30:09] <mawk> and you'd have to emulate that, which is very slow
[12:30:39] <ent58> so in other words the cache operation occurs via the physical tagged address in the TLB or further down and not the virtual one
[12:30:50] <pyzozord> if you want native you must call syscalls anyway, and that is possible
[12:30:59] <pyzozord> via the external functions interfsce
[12:31:11] <mawk> as an extension pyzozord right?
[12:31:14] <mawk> not just a web page
[12:31:17] <pyzozord> yes
[12:31:23] <ent58> I mean it would have to be that way, multiprocess duh, but I think the confusion is what happens if you alternate between accessing that memory via two distinct virtual addresses that map to the same physical one
[12:31:27] <pyzozord> no I'm not talking about web pages and js at all
[12:31:41] <ent58> in the same process
[12:31:44] <pyzozord> that is not very interesting for me :p
[12:31:53] <pyzozord> I'm talking just about the bytecode
[12:32:09] <pyzozord> running some way on the os
[12:32:14] <pyzozord> not in browser
[12:32:17] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[12:32:30] *** Joins: mrig (~AdiIRC@user/mrig)
[12:32:54] <pyzozord> but theoretically browsers could expose some limited syscall wrappers to wasm, i don't see why not
[12:33:08] <mawk> what about the W in WASM pyzozord 
[12:33:15] <mawk> well in chrome it's possible as a chrome extension to call syscalls
[12:33:20] <pyzozord> it's got nothing to do with web
[12:33:21] <vdamewood> turn it upside down. make is MASM
[12:33:22] <mawk> but it's pretty convoluted, the syscall has to be worth it
[12:33:28] <pyzozord> it's just it's origin story
[12:33:37] <mawk> well if you don't want it in the web just use llvm ir
[12:33:39] <mawk> much better
[12:33:39] <vdamewood> s/is/it/
[12:34:13] <vdamewood> yum, LLVM bytecode.
[12:34:26] <DPA> I wish they had just used ELF for WASM code. Would have avoided lots of problems.
[12:34:31] *** Joins: ixil (~ixil@82.197.178.137)
[12:34:32] <pyzozord> i heard bad things about llvm ir
[12:34:37] <pyzozord> complex etc
[12:35:11] <pyzozord> also wasm has stronger potential, because literally has an interpreter for it
[12:35:13] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:35:27] <pyzozord> that's it's power, availability
[12:35:39] <DPA> Are there any interpreters outside of for x86_64?
[12:35:46] <pyzozord> yes
[12:35:50] <vdamewood> Probably ARM64
[12:35:58] <pyzozord> browsers
[12:36:25] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:36:30] <vdamewood> Granted, x86-64 and aarch64 are the only ones that matter anymore.
[12:36:36] <pyzozord> however i do imagine browser environment is limited, no mmaps
[12:36:48] <vdamewood> Hopefully RISC V gets popular
[12:38:07] <DPA> RISC-V and ARM have the same problem. The people who let them be made let secure boot be implement such that only the vendor can set the signing cert. Makes most smartphones useless for me.
[12:38:30] <DPA> There are exceptions, but few.
[12:39:06] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:40:46] <arahael> DPA: Apparently Apple M1's are an exception.
[12:40:58] <arahael> DPA: The #asahi folks on oftc seem quite happy with them.
[12:41:44] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:41:47] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[12:42:03] <DPA> Yes. It'd be great if they where available to hardware engineers outside of apple too. I'd love an easily repairable M1 machine.
[12:42:25] <vdamewood> DPA: Wait for them to be added to Apple's self-repair program.
[12:42:29] <arahael> DPA: Hardware wise they are considerably less repairable, true - but they seem quite happy with the software situation.
[12:43:08] <DPA> Did they get the GPU running yet? (I mean, not just the framebuffer)
[12:44:17] <arahael> DPA: Not sure but they have glxgears running smoothly I hear.
[12:45:16] <DPA> I know it can run 3d in software at impressive speeds. So that doesn't have to say much.
[12:45:39] * vdamewood renders arahael in  3D
[12:46:24] <DPA> If the GPU and video HW decoding run properly, I may consider getting one.
[12:46:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:46:59] <vdamewood> I like the fact that Apple Silicon has separate cores for AI and for the GPU.
[12:48:39] *** Quits: skepta (~eric2@82.102.25.12) (Ping timeout: 265 seconds)
[12:49:00] <Jck_true> DPA: Apple said the iPhone self repair program will be extended to the M1's also
[12:49:34] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:50:29] *** Quits: Enitin (~Enitin@82.102.22.86) (Read error: Connection reset by peer)
[12:50:50] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:51:50] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:52:18] <DPA> I wonder how much they will charge for the hardware. I bet they will keep signing it for use with specific devices only.
[12:53:17] *** Joins: peteyboy_ (~peteyboy1@95.169.232.161)
[12:53:25] <ent58> why is that even allowed?
[12:53:50] <rvalue> Jck_true: i wish Apple would make ssd upgrades available for mac minis
[12:54:33] <Jck_true> rvalue: Haven't they soldered the SSD directly to the main board?
[12:54:48] <Jck_true> (I never owned a mac so I don't know)
[12:56:13] <DPA> In politics and society, the idea that if businesses do well, then it will be good for us, has been deeply engraved. It's not wrong, but it leads politicians to forget that policies should in the end benefit people, and companies are only a tool for that, and not the goal.
[12:56:56] <rvalue> yep thats the problem, but i thought the "self repair" program meant, "hey if you can solder things on and off and understand electricals, then here is a kit for you" and then third party repair shops could use those kits to upgrade instead of the user doing it themselves
[12:57:59] <Jck_true> DPA: "Capitalism is the astounding belief that the most wickedest of men will do the most wickedest of things for the greatest good of everyone."
[12:58:54] *** Joins: hero (~quassel@176.62.187.24)
[12:59:55] <Jck_true> rvalue: I'm curious of A) Costs. B) availability C) Repairability of actual device.
[13:00:51] <ent58> I thinkB)  availability is at an all time high :P
[13:00:57] <ent58> 8)  *
[13:01:00] <arahael> rvalue: You don't want to solder things most of the time these days.  Multi-layer PCB's are complex.
[13:01:16] <rvalue> i expect the costs to be relatively high, as does every apple product
[13:02:09] <mawk> if you have a microscope and fume extractor and hot air gun and soldering iron and found the pirated schematics somewhere then maybe you can repair yourself
[13:02:18] <ent58> arahael: this ends up being an excuse for throwaway culture and it sucks
[13:02:44] *** Quits: hero (~quassel@176.62.187.24) (Client Quit)
[13:02:45] <arahael> ent58: Right, but also consider that an M1 is almost a SoC.
[13:03:00] <arahael> ent58: There's nothing *to* solder.
[13:03:26] <mawk> there are a million support components
[13:03:28] <ent58> right, yeah....I mean it would be nice if being an SOC increased reliability proportionately
[13:03:31] <mawk> the SoC itself isn't what usually breaks I suppose
[13:03:42] <arahael> mawk: I doubt it (on M1's)
[13:03:43] <ent58> at least there's that, yeah
[13:03:52] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[13:04:23] <arahael> The SSD isn't on the SoC, isn't it? But almost everything else is.
[13:04:26] <rvalue> arahael: i would agree with you. i dont know if technically its called soldering for this too but i quite like how many of the repair videos by rossmann, he just heats the board to add chips to the board
[13:04:36] *** Joins: skepta (~eric2@180.243.15.173)
[13:04:51] <arahael> rvalue: I think that's called reflowing.
[13:04:54] *** Quits: _inky (~inky_@5.77.165.221) (Read error: Connection reset by peer)
[13:04:54] <ent58> reflowing
[13:04:55] <DPA> I want a smartphone running my favorite linux distro on an M1, with USB-C DP alt mode for convergence. This would be my device of dreams.
[13:05:10] <arahael> DPA: That's basically want an M1 is.
[13:05:26] <arahael> DPA: Infact, the reference pre-production units were an iPad hacked up into a desktop.
[13:05:30] <rvalue> reflowing, cool..
[13:06:45] <DPA> I can't buy it like that, though.
[13:06:46] <vdamewood> arahael: Almost?
[13:07:28] *** Joins: Twipply (~Twipply@user/twipply)
[13:07:30] <arahael> vdamewood: I think the hinge is not part of the SoC. ;)
[13:07:36] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:07:47] <vdamewood> Hinge?
[13:07:56] <vdamewood> The one between the screen and the rest of the system?
[13:08:11] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[13:08:18] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[13:09:02] *** Quits: kmh (~kmh@2a00:6020:5004:6800:8331:e01e:f268:e1ec) (Quit: Leaving)
[13:09:03] <ent58> is there a convincing argument that might go along the lines of: Making certain products with an SoC, even if superior in some way, is ultimately not worth the tradeoff of not being even moderately easy to replace/repair?
[13:09:09] <arahael> vdamewood: Yes. :)
[13:09:27] <arahael> ent58: Well, let me put it this way, even the 16 GB of memory my laptop has is part of the SoC.
[13:10:03] * vdamewood soldiers arahael into the SoC.
[13:10:03] <arahael> ent58: It's literally fused to the rest of the CPU, which contains just about everything else.
[13:10:22] <ent58> I guess if the whole deal was designed to be cradle to grave recyclable then there wouldn't really be a fundamental issue
[13:10:27] <pyzozord> noo, don't solider arahael
[13:10:33] * arahael hugs pyzozord.
[13:10:34] <vdamewood> I wonder if the Wifi controller is also part of the SoC.
[13:10:34] * pyzozord unsoliders arahael
[13:11:02] <ent58> solidering, a new technique?!
[13:11:20] * vdamewood soldiers ent58 to the army.
[13:11:28] <ent58> wait a minu-
[13:11:29] *** Joins: kmh (~kmh@2a00:6020:5004:6800:e4b6:6015:65e3:7907)
[13:12:13] * vdamewood marines pyzozord to the Marine Corp.
[13:12:18] <pyzozord> lol :D
[13:12:32] * arahael glues vdamewood to the wood.
[13:12:33] <pyzozord> just realized I made a typo
[13:12:35] * pyzozord salutes
[13:12:44] <vdamewood> pyzozord: You copied mine.
[13:13:05] * pyzozord salutes to vdamewood
[13:13:18] <vdamewood> pyzozord: s/to //
[13:13:47] *** Joins: izak (~user@196.189.63.255)
[13:13:58] <pyzozord> oh in Polish we salte to
[13:14:00] <pyzozord> *salute
[13:14:49] * vdamewood saltes to pyzozord.
[13:15:15] * pyzozord feels salty
[13:15:32] * vdamewood tastes pyzozord.
[13:15:36] <vdamewood> You taste salty too.
[13:15:41] <pyzozord> :D
[13:15:49] <ent58> D:
[13:15:51] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:15:57] <pyzozord> I better stope before I spell every single word in english
[13:15:58] <vdamewood> ent58: Want some?
[13:16:13] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:16:18] <ent58> I salted my eggs
[13:16:22] <ent58> all is well, no worries
[13:16:49] <ent58> they are scrambled and delicious
[13:17:02] * vdamewood licks ent58's eggs.
[13:17:04] <vdamewood> Yum!
[13:17:07] <ent58> I can make some, but in exchange you have to te-
[13:17:12] <ent58> .__.
[13:17:18] <pyzozord> it's getting hot in here, I better cool the atmosphere a bit
[13:17:30] <vdamewood> ent58: Your eggs taste better than pyzozord.
[13:17:31] * pyzozord opens windows
[13:17:38] <ent58> 98*
[13:17:40] * vdamewood closes windows. Opens Linux.
[13:17:46] <ent58> there we go
[13:18:19] * vdamewood licks a penguin.
[13:18:22] <pyzozord> i just found out I get tv in my internet package for free
[13:18:30] <vdamewood> Yay!
[13:18:33] <vdamewood> When does it arrive?
[13:18:41] <pyzozord> if I'd buy tv package, I'd pay for the same thing
[13:18:59] <pyzozord> I think it's already here, in the cables, not sure how to use it though
[13:19:25] * arahael coughs, and points to the rules.  vdamewood!
[13:19:39] <arahael> vdamewood: Please don't lick eggs that aren't yours!  Makes people uncomfortable, you see.
[13:20:03] <vdamewood> Oh, sorry.
[13:20:26] <ent58> .___.
[13:20:32] <vdamewood> ent58: Do you want the egg residue I licked off back?
[13:20:36] <ent58> I have to make new eggs
[13:20:39] <ent58> no
[13:20:41] <ent58> it's okay
[13:20:45] <arahael> ent58: Sensible choice.
[13:20:46] <ent58> you can keep it
[13:20:49] * vdamewood keeps the egg residue!
[13:20:53] <ent58> lol!
[13:21:16] * vdamewood doesn't lick ent58's new eggs.
[13:21:37] <arahael> Funny thing, my entire childhood, I thought eggs were laid hard, like, with a hard shell and all that.
[13:21:45] <pyzozord> that's pretty eggy
[13:22:02] <vdamewood> arahael: I thought chiecken eggs were until now.
[13:22:05] <vdamewood> chicken
[13:22:05] <pyzozord> arahael: aren't they?
[13:22:10] <arahael> No...
[13:22:17] <pyzozord> are they laid soft?
[13:22:24] <vdamewood> I know most reptile eggs are soft, even until they hatch.
[13:22:30] <arahael> They made in the chook, and actually *rotate* as part of the laying process.  And yeah, I think they're laid soft.
[13:22:37] <arahael> I should find a citation.
[13:22:52] <Jck_true> Sometimes eggs are laid without a shell at all
[13:22:53] <ent58> TIL about egg laying softness
[13:23:07] <pyzozord> I was today years old when I learned that chicken eggs are laid soft
[13:23:11] <vdamewood> It's only two hours into today, and I'm already learning.
[13:23:11] *** Joins: _inky (~inky_@5.77.165.221)
[13:23:48] <pyzozord> it's understandable, most of us don't have chickens around to ask the question
[13:23:55] <pyzozord> and even then it would be probably rude to ask
[13:24:09] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:24:37] <arahael> I'm actually finding it very hard to find citations about this.
[13:24:45] *** Joins: eTnamun (~kvirc@user/heyoka)
[13:25:04] <arahael> pyzozord: My grandparents used to own chooks, they're always hard by the time you collect them.  The hardening happens fast.
[13:25:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[13:25:06] *** Quits: eTnamun (~kvirc@user/heyoka) (Remote host closed the connection)
[13:25:17] <ent58> my entire egg-shell worldview is being cracked
[13:25:23] <pyzozord> the secret well kept by the generations of chickens world wide
[13:25:52] <pyzozord> there should be a shell named an egg, that's a missed opportunity
[13:26:10] <pyzozord> s/an egg/Egg/
[13:26:17] <vdamewood> I want to call my shell 'For example'.
[13:26:29] <vdamewood> Then it will be the Eg Shell
[13:26:47] <pyzozord> oh yeah nice :D
[13:26:52] <arahael> Hmm, perhaps I'm wrong. Perhaps they're indeed laid hard.
[13:26:58] <arahael> I just can't find citations...
[13:27:05] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:27:05] <ent58> evidence of absence!
[13:27:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:27:54] <pyzozord> ok need to stop stalling and start doing stuff, I must finish cleaning the old apartment and give back the keys today
[13:28:06] <ent58> oh wow you're moving? rough
[13:28:39] *** Joins: Burgundy (~yomon@79.115.213.171)
[13:29:31] <vdamewood> pyzozord: Where are you moving to?
[13:30:12] <pyzozord> I already moved
[13:30:30] <pyzozord> away from Amsterdam, that city is just too expensive
[13:31:12] <arahael> I sometimes think of moving to the country.
[13:31:32] <pyzozord> I found an apartment in a city not far away, that is about 10% smaller and 33% cheaper
[13:31:42] <arahael> Nice - job opportunities, though?
[13:32:26] <pyzozord> yes me too, I think it's general wave of people being tired of stressful big city living and corona and remote work only accelerated the process
[13:32:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:32:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:32:47] <arahael> Yeah, I've the same situation. Sadly I couldn't take advantage at the time.
[13:33:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[13:33:02] <pyzozord> I just found a new job that literally pays almost twice as much
[13:33:05] <arahael> So now that I'm thinking of moving to the country, the crowd's already moved.
[13:33:09] <arahael> OOoh, nice!
[13:33:16] <pyzozord> little worried about the cultural differences though, we'll see how it goes
[13:33:26] <arahael> Eh, keep an open mind, you'll be fine.
[13:33:44] <DnzAtWrk> can people stop using fusion 360's "prt" format for storing 3d models
[13:33:48] <DnzAtWrk> it's starting to sicken me
[13:33:53] <vdamewood> Movin' to the country. Gonna eat a lot of peaches.
[13:33:54] *** Lord_of_Life_ is now known as Lord_of_Life
[13:34:00] <dodo> cultural differences? just don't talk politics?
[13:34:17] <ent58> as soon as you infiltrate their development team and slowly knock the idea into their head to remove it
[13:34:33] <ent58> dodo: I find that starts not working when decisions are made on precisely those politics
[13:34:43] <pyzozord> yeah that's not it, I hope THEY will keep open mind... They are from a much more reserved and indirect culture
[13:34:55] <DnzAtWrk> japan?
[13:34:59] <dodo> ent58: technical decisions?
[13:35:00] <vdamewood> arahael: (FWIW: ^song reference.)
[13:35:21] <pyzozord> direct conflict is avoided as much as possible
[13:35:29] <arahael> vdamewood: I think that can be interpreted otherwise, too!
[13:35:32] <pyzozord> and I tend to be quite assertive
[13:35:33] <ent58> I guess I was going for big picture there, but that too yes
[13:35:59] <dodo> pyzozord: in my experience that simply means you need to use a different communication style 
[13:36:07] <dodo> it's not like conflict doesn't exist
[13:36:32] <pyzozord> I'm not good at different communication styles to be honest
[13:36:52] <dodo> ah, yeah.. that's not really part of our job description..
[13:37:01] *** Quits: d3x0r (~d3x0r@user/d3x0r) (Ping timeout: 268 seconds)
[13:37:05] <pyzozord> gotta go, or I'll really mess up giving back the keys
[13:37:16] <ent58> we're losing him to real life
[13:37:29] <ent58> good luck pyzo
[13:38:31] *** Joins: mestre (~mestre@191.177.175.57)
[13:38:52] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[13:39:13] <arahael> He may return. :)
[13:39:16] <arahael> G'luck!
[13:41:01] *** Joins: xkuru (~xkuru@user/xkuru)
[13:41:19] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[13:42:41] *** Quits: kmh (~kmh@2a00:6020:5004:6800:e4b6:6015:65e3:7907) (Remote host closed the connection)
[13:42:53] *** Joins: kmh (~kmh@2a00:6020:5004:6800:e4b6:6015:65e3:7907)
[13:44:07] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[13:44:47] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6ce8)
[13:47:07] *** Joins: eTnamun (~hexchat@139.47.5.180)
[13:47:07] *** Quits: eTnamun (~hexchat@139.47.5.180) (Changing host)
[13:47:07] *** Joins: eTnamun (~hexchat@user/heyoka)
[13:51:13] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5323:266d:2c0f:d0ec) (Ping timeout: 268 seconds)
[13:51:30] *** Joins: zwr (~zwr@2804:d45:b966:fb00:3ac9:5265:a79e:4a2a)
[13:58:10] <vdamewood> arahael: I'm pretty sure the original songwriter meant it that way.
[13:58:35] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[13:58:52] <vdamewood> arahael: but the song got famous in the mid 90s and no one thought about any hidden meaning in the lyrics. It just seems like a silly song about peaches.
[13:59:19] <arahael> vdamewood: No double-meaning like the emojis have today? ;)
[13:59:59] *** Joins: prompt32 (~kapad@ppp-94-66-58-183.home.otenet.gr)
[14:00:14] <vdamewood> arahael: Well, people who have noticed the lyrics think it's about something else.
[14:00:16] *** Quits: prompt32 (~kapad@ppp-94-66-58-183.home.otenet.gr) (Remote host closed the connection)
[14:00:26] <vdamewood> But not what the modern emoji is used as innuendo for.
[14:00:27] <arahael> How disappointing.
[14:00:48] <vdamewood> Oh, Let's just say that the real hidding meaning is such that I don't want to mention it in the channel.
[14:00:51] *** Joins: temy (~tem@wikimedia-commons/pandakekok9)
[14:01:18] *** Joins: prompt32 (~kapad@user/kapad)
[14:01:54] <arahael> vdamewood: That's beyond my knowledge, I must say.  I'm not an expert in these things, I just know that there's an innuendo. :D
[14:02:13] <vdamewood> Want me to spell it out for you in a /msg ?
[14:03:08] <arahael> No, it's OK :D
[14:03:50] <vdamewood> I'll just say the real innuendo is about a certain... 'mastery'.
[14:04:10] <arahael> Oooh...
[14:04:12] * arahael msg's.
[14:04:38] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[14:05:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:05:11] *** Quits: prompt32 (~kapad@user/kapad) (Client Quit)
[14:06:06] *** Joins: prompt32 (~kapad@user/kapad)
[14:06:09] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[14:06:45] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[14:07:15] *** Quits: _inky (~inky_@5.77.165.221) (Read error: Connection reset by peer)
[14:07:20] *** Quits: inky (~inky@5.77.165.221) (Read error: Connection reset by peer)
[14:08:28] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 268 seconds)
[14:08:36] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[14:08:58] <vdamewood> arahael: Wikipedia says this about the song for what it officially means: Lead singer Chris Ballew has stated that he wrote "Peaches" about a girl he once had a crush on. He allegedly wrote this song after sitting under a peach tree she had in her yard while waiting for her to arrive, so that he could finally let her know that he liked her
[14:09:20] <vdamewood> Seems officially that it's mundane, but people have their theories.
[14:10:01] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[14:10:11] *** Joins: inky (~inky@46.36.112.226)
[14:10:26] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[14:10:30] <vdamewood> https://en.wikipedia.org/wiki/Peaches_(The_Presidents_of_the_United_States_of_America_song)
[14:10:31] <bayaz> Title: Peaches (The Presidents of the United States of America song) - Wikipedia 
[14:11:22] *** Quits: arahael (~arahael@125-209-128-15.tpgi.com.au) (Ping timeout: 256 seconds)
[14:14:58] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[14:16:24] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[14:16:24] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[14:16:24] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[14:16:58] <vdamewood> Must have lost interest.
[14:16:59] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:17:15] * vdamewood hands GeDaMo the duck.
[14:17:20] *** Quits: nuh^ (~nuh@68.101.58.90) (Remote host closed the connection)
[14:18:34] <ent58> duck with magical properties?
[14:19:25] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[14:19:44] <GeDaMo> https://vignette.wikia.nocookie.net/hitchhikers/images/3/33/496_hitchhikers2_lp_uk_front.jpg/revision/latest?cb=20180828003639
[14:19:45] <bayaz> Type: image/jpeg Size: 14.0 kB 
[14:19:59] *** Joins: prompt32 (~kapad@user/kapad)
[14:24:22] <vdamewood> GeDaMo: Do you have a favorite Doctor?
[14:24:31] <GeDaMo> Tom Baker
[14:24:34] <Raziel> Dr Evil
[14:24:44] <vdamewood> Raziel: Not that kind of Doctor.
[14:25:16] <vdamewood> I need to find somewhere to watch the pre-gap Doctors.
[14:25:40] *** Quits: wildo (~lain6141@119.224.72.222) (Quit: leaving)
[14:25:58] <vdamewood> Were ther any Scottish Doctors before David Tennent?
[14:26:13] <Raziel> old doctor who was a bit before my time, but from the newer ones I quite liked david tennant
[14:26:19] <GeDaMo> Yes, Sylvester McCoy is Scottish
[14:26:40] <GeDaMo> vdamewood: https://archive.org/details/doctorwhocomplete
[14:26:43] <bayaz> Title: Doctor Who Complete : Davros : Free Download, Borrow, and Streaming : Internet Archive 
[14:26:51] *** Joins: _inky (~inky_@46.36.112.226)
[14:27:40] *** Joins: Guest18 (~Guest18@2409:4064:2e1f:fcaa:4776:1652:4b03:9d3e)
[14:28:16] <vdamewood> It seems to be missing some episodes in Seasons 1 and 2.
[14:28:23] <vdamewood> (Kidding, of course.)
[14:28:55] <vdamewood> GeDaMo: Oh, cool. McCoy is Tennants father in law, right?
[14:29:10] <GeDaMo> No, that's Colin Baker
[14:29:19] <vdamewood> Well, nuts.
[14:29:21] *** Joins: Colt (~Colt@user/colt)
[14:29:22] <GeDaMo> :D
[14:29:29] *** Quits: Guest18 (~Guest18@2409:4064:2e1f:fcaa:4776:1652:4b03:9d3e) (Quit: Client closed)
[14:29:56] <vdamewood> Nope. We're both wrong. It's Peter Davison.
[14:30:07] <GeDaMo> Ah, is it?
[14:30:18] <vdamewood> https://en.wikipedia.org/wiki/David_Tennant
[14:30:19] <bayaz> Title: David Tennant - Wikipedia 
[14:30:37] <GeDaMo> I was close :P
[14:30:59] <user51> single stepping is life's greatest struggle. change my mind :P
[14:31:20] * vdamewood replaces user51's mind with that of a baboon.
[14:31:29] <user51> kaboon!
[14:31:52] <user51> i'm being slightly ironic, but it's just somehting i noticed.
[14:32:09] <user51> sometimes, ideas just don't work as well in practice.
[14:32:33] <user51> now i'm not even sure i'm explaining it right :|
[14:32:45] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:47] <vdamewood> Did you know there's a tradition, most years, to make a Doctor Who special for Tennant's wife's birthday?
[14:34:58] <vdamewood> I love that joke about how David Tennant, the Doctor, married the woman from The Doctor's Daughter who played the Doctor's Daughter who was the Doctor's (Davison's) Daughter.
[14:35:14] <GeDaMo> :P
[14:35:47] <vdamewood> So now the Doctor is his own father-in-law... which si oddly not surprising for the show.
[14:36:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[14:37:36] *** Quits: emf (~emf@2620:10d:c090:400::5:99c8) (Quit: emf)
[14:37:40] <Raziel> wait. that's illegal.
[14:37:52] <vdamewood> dNot on Gallifrey.
[14:38:39] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:39:37] <GeDaMo> https://www.youtube.com/watch?v=gkiOm-vmpcY
[14:39:39] <bayaz> Title: Muppet Show. Gogolala Jubilee Jugband - I'm My Own Grandpa 
[14:39:54] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[14:41:49] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[14:42:29] *** Joins: prompt32 (~kapad@user/kapad)
[14:43:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:43:10] <vdamewood> GeDaMo: "I'm my on father-in-law" almost fits.
[14:43:14] <vdamewood> s/on/own/
[14:45:33] *** Joins: cursey (~cursey@user/cursey)
[14:46:27] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:46:51] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:47:45] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:48:16] *** Quits: izak (~user@196.189.63.255) (Ping timeout: 264 seconds)
[14:48:17] <vdamewood> Well, now I wonder if I want to add P/Invoke lines for every exported function in my library, or just the ones I use in the demo program.
[14:48:43] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[14:50:07] <vdamewood> No, I want to get rid of this stupid requirement that I use free().
[14:50:29] *** Joins: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com)
[14:51:38] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[14:52:41] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[14:52:45] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[14:53:16] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 245 seconds)
[14:53:34] *** Quits: maxzor (~maxzor@2a01cb04054faa00b117f66329c31897.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[14:54:14] *** Joins: maxzor (~maxzor@2a01cb04054faa00b117f66329c31897.ipv6.abo.wanadoo.fr)
[14:55:03] <vdamewood> Oh, hey, look. I already have.
[14:56:54] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[14:57:47] *** Quits: kirua (~Username@134.238.50.47) (Ping timeout: 256 seconds)
[14:58:34] *** Joins: kirua (~Username@134.238.50.47)
[14:58:50] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[14:59:45] <vdamewood> Yay. It works.
[15:03:05] <vdamewood> This also means that all of my test programs were written wrong.
[15:03:11] <vdamewood> ... and probably have memory leaks.
[15:03:22] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[15:03:52] *** Quits: kirua (~Username@134.238.50.47) (Ping timeout: 264 seconds)
[15:05:14] *** Joins: Meuri (~Meuri@c-24-30-27-91.hsd1.ga.comcast.net)
[15:05:29] <Meuri> Why does objective-C++ even exist when C++ already has object oriented features to it?
[15:07:11] <GeDaMo> Objective C is older than C++; Objective C++ appears to be a mix of the two
[15:07:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:07:13] *** Joins: Klinda (~superleag@user/klinda)
[15:08:17] <Meuri> Does anyone even use Objective-C++ anymore? I get objective-c is mostly a MacOS thing.
[15:08:19] *** Joins: federico_it (~textual@151.51.81.237)
[15:08:25] <GeDaMo> https://web.archive.org/web/20101203170217/http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocCPlusPlus.html
[15:08:27] <bayaz> Title: Loading 
[15:08:47] <GeDaMo> "Apple’s Objective-C compiler allows you to freely mix C++ and  Objective-C code in the same source file. This Objective-C/C++ language  hybrid is called Objective-C++."
[15:08:55] <GeDaMo> Yeah, looks like an Apple thing
[15:09:43] <Meuri> Right. I was thinking of making a toy compiler and was debating if I should support objective-c++ at all. Objective-c probably, but not sure if objective-c++ is worth it.
[15:13:55] <pyzozord> having two object models in language is too much
[15:14:35] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[15:14:37] <Meuri> gcc supports objective-c despite being written in mostly C. Not sure if gcc even supports objective-c++
[15:15:13] <GeDaMo> https://gcc.gnu.org/onlinedocs/gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html
[15:15:14] <bayaz> Title: Objective-C and Objective-C++ Dialect Options (Using the GNU Compiler Collection (GCC)) 
[15:17:18] <Meuri> Well I'll be damned, gcc actually does support objective-c++. I'll just support the primary C family languages such as C, C++, and objective-c. No C# and probably not objective-c++ until later.
[15:17:58] <Meuri> It's just a hobbyist compiler, will never overtake gcc or clang.
[15:19:10] <CoJaBo> I, too, have strange hobbies.
[15:19:31] <Meuri> Compilers and deeper assembly hacking is some of the most fun you can have with computers.
[15:21:08] <merijn> Meuri: "just" C and C++? o.O
[15:21:42] <merijn> Implementing your C compiler seems perfectly doable (albeit it a lot of work), but C++...good fucking luck with your sanity :D
[15:21:52] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[15:22:05] <Meuri> Well I don't want to be like gcc and support languages like java or go or D which would be out of the scope of the project.
[15:22:41] <DPA> C# is a completely different architecture, isn't it (.NET)?
[15:22:48] <merijn> why do you wanna support more than 1 language anyway?
[15:22:49] <GeDaMo> There was a site which was offering a "C++ Guru" certification, it was mainly about building a C++ compiler :P
[15:23:09] <merijn> GeDaMo: That's the only way to become a C++ guru (or, more likely, realise you don't want to be one) :p
[15:23:21] <Meuri> merijn, C++ is widely used, might as well support C++ because pure C projects are less common than a mix of C and C++.
[15:23:43] <merijn> Meuri: Have you ever looked at the C++ spec?
[15:23:48] <merijn> That's some nightmare fuel shit
[15:24:07] <pyzozord> oh wow, yeah i guess that makes sense if you write a 100% complaint c++ compiler you are a c++ guru
[15:24:08] <Meuri> No, but if you're worried about my sanity, I already am certified crazy (lol) so nothing much left to rob from me.
[15:24:22] <pyzozord> also doesn't make you a good programmer :D
[15:24:26] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:24:36] <merijn> Meuri: I would highly recommend taking some time to look into both the C and C++ spec, before deciding what you'll support
[15:24:46] <pyzozord> but does make you quite aware of all c++ syntax details
[15:24:49] <merijn> Note that you need two different compilers anyway, since C is not a subset of C++
[15:25:21] <DPA> I'm still working on my lexer / parser library thing. I should have been done with that long ago, but somehow, it keeps taking up more time than expected...
[15:25:32] <Meuri> I absolutely must support C. No question about it. C++ is more because I might as well also support given how widespread it is. Maybe or maybe not objective-c. No languages like D, don't care for D.
[15:25:57] <merijn> Meuri: There are...multiple levels of insanity. "Implementing your own bootstrapped compiler" is insane, but at a level I still call sane. Implementing standard compliant C++...not so much xD
[15:26:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[15:26:25] <merijn> DPA: In what language?
[15:26:27] <pyzozord> i don't know but i feel like the difference between c and c++ feature sets and parsers is a really big one
[15:26:30] <DPA> C
[15:26:44] <merijn> DPA: yeah...that's gonna be a PITA xD
[15:26:50] <merijn> DPA: Why not just use flex/bison?
[15:27:20] <DPA> I just don't like the approach. I kind of want something like lark, but for c.
[15:27:41] <Meuri> I don't even know if I'll support modern C++, maybe I'll start with C++98/C++03 and then think about C++11.
[15:27:44] <deniska> https://i.imgur.com/vmecDGP.png Hello win16
[15:27:44] <bayaz> Type: image/png Size: 159.5 kB 
[15:28:21] <merijn> ah, but lark is basically a parser generator, like flex/bison :p
[15:28:55] <merijn> DPA: tbh, I think that when it comes to handrolling things in C a recursive descent parser is the easiest/least time consuming approach
[15:29:12] <GeDaMo> https://en.cppreference.com/w/cpp/language/sfinae
[15:29:12] <bayaz> Title: SFINAE - cppreference.com 
[15:29:24] <deniska> s/when it comes to handrolling things in C //
[15:29:35] <deniska> recursive descent all the things
[15:30:00] <vdamewood> Meuri: I use Objective-c++ https://github.com/vdamewood/silikego/blob/master/cocoa/Delegate.mm
[15:30:01] <bayaz> Title: silikego/Delegate.mm at master · vdamewood/silikego 
[15:30:10] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[15:30:32] <merijn> deniska: THere's some argument for using LALR(1) in some scenarios
[15:30:38] <DPA> I'm currenty going that route with my parser generator. I originally planned something more elaborate, but it's taking too much time.
[15:30:43] <merijn> Plus, recursive descent is nicest if you got proper parser combinators
[15:30:52] <DPA> (recursive descent)
[15:31:41] <GeDaMo> "PEG-based transformer provides front-, middle and back-end stages in a simple compiler" http://www.vpri.org/pdf/tr2010003_PEG.pdf
[15:31:41] <bayaz> Type: application/pdf Size: 351.0 kB 
[15:31:48] <merijn> The various parsecs in Haskell are lightyears ahead of what's in other languages (well, I suppose Ocaml and F# and, I think, Swift have ports/reimplementations of those)
[15:31:51] <vdamewood> Meuri: By the way, yes g++ supports Objective C++. Also, the main reason Objective C++ exists is to act act glue code for Objective C and C++
[15:32:00] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[15:32:01] <vdamewood> a/act act/act as/
[15:32:03] <Meuri> Interesting vdamewood.
[15:32:38] <vdamewood> Meuri: For example, my Objective C++ code is so that I can use an Objective C API (Cocoa) and a C++ API (My own library) in the same file.
[15:33:04] <Meuri> I'm a bit like terry davis, I find compilers and operating systems to be fun. Won't be making a full operating system like terry did, but want to make my own compiler for the fun of it.
[15:33:07] <pyzozord> what's a good way to describe recursive descend in few words?
[15:33:23] <pyzozord> i think i kind of get it but not well enough to describe it well
[15:33:32] <vdamewood> pyzozord: 'recursive descent' is already only two words.
[15:33:51] <pyzozord> yeah it is pretty descriptive actuallt
[15:34:06] <vdamewood> pyzozord: The parser parses something recursively, starting at the 'top' of the syntax tree, and going down (descending).
[15:34:13] <vdamewood> recursively.
[15:34:28] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 264 seconds)
[15:34:59] <Meuri> This project started off with me wanting to make some tools for DOS i486 processors, but later decided I should attempt to support non DOS 32 bit and maybe even 64 bit as well. Big project I know, but it's just a hobby.
[15:35:26] <vdamewood> Hehehe, 'just a hobby'. That's what Linus said.
[15:35:39] <Meuri> I don't intend on making a job out of this though.
[15:35:48] <vdamewood> Neither did Linus.
[15:36:05] <prompt32> https://bugzilla.mozilla.org/show_bug.cgi?id=1739752
[15:36:06] <bayaz> Title: 1739752 - Entering local Server URL without protocol and with suffix /index.php redirects to web search 
[15:36:17] <pyzozord> ... where each function is responsible for one part of syntax, like expression will descend to a function call.m
[15:36:29] <Meuri> There already is gcc and llvm/clang backed by millions of dollars. No way in hell could I alone compete with that.
[15:36:45] <vdamewood> gcc is backed by millions of dollars?
[15:37:05] <vdamewood> I thought it was backed in dozens of dollars.
[15:37:05] <Meuri> Well apple isn't throwing cash to gcc, but gcc I think has corporate backing.
[15:37:17] <pyzozord> ... or to an assgnment
[15:38:15] <pyzozord> so what would be similar description of  LL(k) parser?
[15:38:40] <pyzozord> "read in k tokens, pattern match to something?"
[15:38:40] <merijn> pyzozord: As in equally expressive as recursive descent?
[15:38:54] *** Quits: hans_ (~hans@36.84-48-255.nextgentel.com) (Read error: Connection reset by peer)
[15:38:54] <pyzozord> just naive explanation of how it works
[15:38:55] <merijn> pyzozord: Pretty much
[15:39:14] <vdamewood> I forget which ones are LL(k)
[15:39:28] <vdamewood> I've only ever worked with RDPs and LALR(1)s.
[15:39:32] <merijn> LALR(1) = "Look-Ahead Left-to-Right"
[15:39:40] <Meuri> vdamewood, how would I even make a job out of this? Who would throw money my way? I want to do other things other than programming.
[15:39:42] <merijn> pyzozord: Where the 1 stands for the number of lookahead tokens
[15:39:43] <pyzozord> it's like LL(1) but with k. LL(1) as far as i understand had 1 token lookahead
[15:39:45] *** Joins: bud (~bud@user/bud)
[15:39:47] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[15:39:58] <vdamewood> Meuri: What makes you think I know how to find a job?
[15:40:21] <pyzozord> what's the difference between LL and LALR?
[15:42:02] <vdamewood> I forget.
[15:42:37] *** Joins: xkuru (~xkuru@user/xkuru)
[15:42:40] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[15:42:56] <merijn> pyzozord: https://stackoverflow.com/questions/12170869/lalr-vs-ll-parser
[15:42:57] <bayaz> Title: LALR vs LL parser 
[15:44:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:45:02] *** Joins: xavie (~xavie@176-139-252-198.abo.bbox.fr)
[15:45:48] <pyzozord> wait so recursive descent is LL?
[15:45:55] *** Quits: justache (~justache@user/justache) (Ping timeout: 268 seconds)
[15:45:58] <Meuri> Is supporting FORTRAN even worth it?
[15:46:24] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[15:46:28] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 264 seconds)
[15:46:33] <pyzozord> i thought they are on the same level. but it now seems like LL is not a specific algorithm but rather a class od algorithms
[15:46:44] *** xavie is now known as xcombelle
[15:47:06] <pyzozord> all that stuff is still confusing to
[15:47:10] <pyzozord> me
[15:48:01] <GeDaMo> pyzozord: I did a formal languages and compiler course as part of my degree and recursive descent is still the only one I feel like I understand :P
[15:48:36] *** Joins: justache (~justache@user/justache)
[15:48:45] <pyzozord> heh
[15:49:00] <pyzozord> well then I'm on the right track
[15:49:19] <merijn> GeDaMo: The others aren't so bad, but it's easy to forget them
[15:49:36] <merijn> GeDaMo: I TAed compilers for, like, 5 years and had to "relearn" it each year for class >.>
[15:49:53] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 252 seconds)
[15:49:53] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 252 seconds)
[15:49:54] *** Joins: breavyn_ (~breavyn@user/breavyn)
[15:50:00] <merijn> Recursive descent is just so obvious and simple once you've seen it
[15:50:09] *** Joins: MangyDog (Mange@user/mangy-dog/x-7397214)
[15:50:18] <GeDaMo> The grammar is a program, each rule is a function
[15:51:02] <mawk> yes Meuri 
[15:51:06] <mawk> LAPACK is still popular
[15:51:06] *** Quits: breavyn (~breavyn@user/breavyn) (Ping timeout: 256 seconds)
[15:51:30] *** Quits: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[15:51:31] <merijn> That's a fucking understatement :p
[15:51:54] <merijn> BLAS and LAPACK power so much stuff without people knowing
[15:52:30] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[15:52:54] *** Joins: thevishy (~Nishant@2405:201:f005:c007:f92b:9823:fedf:deab)
[15:52:58] <Meuri> I'll add FORTRAN to the list of languages supported then. Maybe even COBOL, but who the hell even uses COBOL anymore than ancient databases on life support?
[15:53:16] *** Joins: kuolex (~kuolex@r167-62-97-30.dialup.adsl.anteldata.net.uy)
[15:53:19] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[15:53:30] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:53:35] <merijn> tbh, I wouldn't add multiple languages to support until you've written a compiler that supports just one
[15:53:47] <Meuri> Good point merijn 
[15:53:55] <Meuri> Getting a bit ahead of myself.
[15:53:56] <merijn> Meuri: lol, if you think that's all COBOL powers...you have no idea
[15:53:59] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:54:06] <DPA> Recursive descent kind of sucks. "z = x y; x = 1*; y = 1234;" This should always fail with a recursive decent parser. It matches all the 1s, then tries to match 1234, but there are no 1s left, so it doesn't match.
[15:54:53] <merijn> An old colleague of mine got a several million euro project to reverse an OS/360 binary back to COBOL, the machine translate to a different COBOL dialect (since the original compiler was lost, just like the program source) because this is running core business processes at a bank :p
[15:55:25] <merijn> DPA: eh, recursive descent supports arbitrary backtracking, so that doesn't fail at all
[15:55:33] <merijn> DPA: You just have to properly implement backtracking
[15:55:44] <DPA> But that's inefficient.
[15:55:49] <merijn> Well, yes
[15:56:02] <merijn> But that's a grammar design problem, not a recursive descent parsing problem
[15:57:33] *** Joins: arahael (~arahael@203.166.224.240)
[15:57:35] <pyzozord> is it really inefficient in the modern age?
[15:57:51] <DPA> I'm pretty sure such gramar can be translated into a representation where at any point, the next possible characters for any next tokens are known, so backtracking positions can be found & remembered easily, and not all possibilities have to be tried.
[15:58:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:58:06] <pyzozord> backtracking is essentially explore all allowed possibilities until you find one that works
[15:58:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[15:58:27] <merijn> pyzozord: arbitrary backtracking means potentially arbitrary slowdown
[15:59:03] <pyzozord> yeah but i mean in practice languages are not THAT complex to make a difference no?
[15:59:06] <merijn> pyzozord: The reason that people use flex/bison in LALR(1) mode, even though it makes creating a grammar harder, is that once you have a grammar that's LALR(1) it can always be parsed with finite (1) lookahead
[15:59:26] <merijn> pyzozord: If you need to parse 1 GB/s of JSON you might think differently :p
[15:59:36] <merijn> For programming languages, parser efficiency is mostly irrelevant
[15:59:49] <merijn> But for data formats, not so much
[15:59:54] <pyzozord> yeah i mean for programming languages
[15:59:55] <DPA> My current parser syntax allows specifying rules which may occur in a specified quantity in any order for a parent rule, backtracking would be especially bad with this.
[16:00:12] <GeDaMo> https://pdos.csail.mit.edu/~baford/packrat/thesis/
[16:00:13] <bayaz> Title: Packrat Parsing: a Practical Linear-Time Algorithm with Backtracking 
[16:00:35] <merijn> GeDaMo: That obtains linear time by using massive amounts of memory, though :p
[16:00:39] <pyzozord> merijn there are 50gb/s fizzbuzzes now, we live in amazing times
[16:00:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:01:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:01:03] <aoei\Chickatrice> you talkin' bout the ais523 fizzbuzz?
[16:01:06] <merijn> pyzozord: You need to know what you're designing for. Even giant programs aren't gonna have files bigger than 10k lines of code
[16:01:22] <GeDaMo> "All programming is an exercise in caching." - Terje Mathisen
[16:01:23] <merijn> pyzozord: Whereas gigabyte (or even terabyte) CSV and JSON files definitely exist
[16:02:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:02:22] *** Joins: justache (~justache@user/justache)
[16:03:42] <deniska> Don't underestimate the power of ~metaprogramming~
[16:04:50] *** Quits: temy (~tem@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[16:05:10] <vdamewood> Well, now I'm doing something completely disgusting just for the fun of it. I'm hand-writing a .NET wrapper around my C library.
[16:05:42] <pyzozord> don't care too much about parsing data. althought this finally makes me realize why people hate Jason and would prefer binary formats
[16:05:50] *** Quits: Meuri (~Meuri@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[16:05:57] <deniska> And I'm considering writing wasm interpreter in C89
[16:06:17] <deniska> or is there one already?
[16:06:22] <pyzozord> i think i will write something for wasm too
[16:06:24] <vdamewood> Why 89?
[16:06:37] <vdamewood> 89 is so 98.
[16:06:43] <deniska> vdamewood: think of all the fun platforms which never got a more modern compiler :)
[16:06:55] <vdamewood> deniska: Like VAX?
[16:06:56] *** Quits: justache (~justache@user/justache) (Ping timeout: 252 seconds)
[16:07:34] <pyzozord> hopefully GCC or llvm can compile wasm to object files
[16:07:43] <deniska> vdamewood: I'm poking at win16 at the moment
[16:08:33] <deniska> so unless I figure out how to seduce djgpp into producing windows executable, the best I've got is openwatcom which is C89 with some C99 sprinkles
[16:09:04] *** Joins: justache (~justache@user/justache)
[16:09:04] *** Quits: justache (~justache@user/justache) (Excess Flood)
[16:09:23] <GeDaMo> No TurboC? :P
[16:09:40] <pyzozord> i wonder how far I can get with just slapping the C's preprocessor on wasm code
[16:09:41] <vdamewood> deniska: Let me guess, // comments and variable declarations intermixed with expressions?
[16:10:16] <pyzozord> or maybe forget the c preprocessor i can use php, it's a templating language.
[16:10:47] <pyzozord> write php program that generates wasm program that llvm will compile
[16:10:52] <deniska> pyzozord: https://nedbatchelder.com/code/cog :D
[16:10:53] <bayaz> Title: Cog 
[16:10:55] <pyzozord> to native code
[16:11:12] <deniska> I doubt llvm can compile wasm to native
[16:11:20] <deniska> the whole point of wasm was not to :)
[16:11:27] <Jck_true> deniska: I'd reallllly like one for embedded :)
[16:11:45] <pyzozord> oh yeah python I'd always better. i just thought of php because or built in <?php ?>
[16:12:33] *** Joins: justache (~justache@user/justache)
[16:12:37] <Jck_true> deniska: Sort of like a plugin system for embedded software where the user can supply his or hers logic as WASM binaries...
[16:13:05] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:13:18] *** Joins: mickey8 (~user@user/mickey)
[16:13:32] <deniska> vdamewood: apparently if you put -za99 on its command line, it stops outputting 20 errors on the line `for (int i = 0; i < 10; i++) {`
[16:13:55] <deniska> so, false alarm
[16:15:55] <pyzozord> I'm surprised, looks like indeed there is no good wasm compiler
[16:16:56] <GeDaMo> They're probably built-in to web browsers
[16:17:07] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[16:22:12] *** Joins: justache (~justache@user/justache)
[16:22:20] *** Quits: prompt32 (~kapad@user/kapad) (Ping timeout: 252 seconds)
[16:23:04] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[16:23:56] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:26:36] <merijn> GeDaMo: Optimist :D
[16:26:40] *** Quits: justache (~justache@user/justache) (Ping timeout: 264 seconds)
[16:27:08] <GeDaMo> P
[16:27:10] <GeDaMo> :P
[16:28:58] <pyzozord> llvm uses bytecode called IR, whats the name for GCC bytecode
[16:29:22] <[itchyjunk]> the written quiz got turned into written final
[16:29:24] <GeDaMo> I think it uses a three address code
[16:29:29] <pyzozord> i found this https://github.com/jcbeyler/wasm-to-llvm-prototype
[16:29:30] <bayaz> Title: GitHub - jcbeyler/wasm-to-llvm-prototype: s-expression → internal IR → LLVM IR 
[16:29:30] <[itchyjunk]> i have a fucking written final for a programming class :D
[16:29:33] <[itchyjunk]> great
[16:30:12] <pyzozord> what's "a fucking" :p
[16:31:11] <GeDaMo> https://gcc.gnu.org/wiki/GIMPLE
[16:31:13] <bayaz> Title: GIMPLE - GCC Wiki 
[16:31:39] <GeDaMo> https://gcc.gnu.org/onlinedocs/gccint/RTL.html
[16:31:40] <bayaz> Title: RTL (GNU Compiler Collection (GCC) Internals) 
[16:32:14] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:32:18] <vdamewood> pyzozord: Are you not familiar with inserting 'fucking' randomly into a sentance?
[16:32:40] <GeDaMo> Or even into a word e.g. fan-fucking-tastic :P
[16:32:45] *** Joins: justache (~justache@user/justache)
[16:32:50] <vdamewood> GeDaMo: Abso-fucking-lutely.
[16:33:13] <pyzozord> oh well the place he put it in a sentence it sounded like it was an actual thing
[16:33:17] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:33:17] *** Joins: zaher_ (~zaher@37.48.183.17)
[16:33:26] <merijn> It is an actual fucking thing :D
[16:33:30] <vdamewood> pyzozord: Nope. It's 'a fucking written final'.
[16:33:31] <GeDaMo> https://en.wikipedia.org/wiki/Expletive_infixation
[16:33:32] <bayaz> Title: Expletive infixation - Wikipedia 
[16:34:21] <pyzozord> yeah i read I have written as present perfect at first
[16:34:23] *** Joins: mel (~caramel@user/caramel)
[16:34:28] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 264 seconds)
[16:34:47] <vdamewood> pyzozord: Nope, present passive.
[16:35:15] <vdamewood> Or rather, a passive used as an adjective.
[16:35:16] *** Joins: Leone (~Leo@216.154.50.172)
[16:35:31] <pyzozord> like I have a program written. but the rest of the sentence didn't makr much sense
[16:35:44] <vdamewood> I have a written program.
[16:36:01] <GeDaMo> https://www.theguardian.com/commentisfree/2016/sep/13/sentence-order-adjectives-rule-elements-of-eloquence-dictionary
[16:36:02] <bayaz> Title: Order force: the old grammar rule we all obey without realising | Tim Dowling 
[16:36:16] *** Quits: zaher (~zaher@37.48.157.64) (Ping timeout: 264 seconds)
[16:36:18] <vdamewood> " I have a program written." is a shortening of " "I have a program [that is/i've] written."
[16:37:11] *** Quits: justache (~justache@user/justache) (Ping timeout: 252 seconds)
[16:37:34] *** Quits: caramel_ (~caramel@user/caramel) (Ping timeout: 256 seconds)
[16:37:55] <vdamewood> GeDaMo: You familiar with Tom Scott?
[16:37:58] *** Joins: Guest12 (~Guest12@pool-96-253-74-73.rcmdva.fios.verizon.net)
[16:38:07] <GeDaMo> The name is familiar
[16:38:30] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Remote host closed the connection)
[16:38:41] <merijn> GeDaMo: The british youtube dude wearing red shirts :p
[16:38:41] <vdamewood> GeDaMo: He makes YouTube videos. He's guest presented on a couple of Computerphile and one Numberphile videos.
[16:38:42] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:39:29] *** Joins: src (~src@user/src)
[16:39:42] <mrig> heh oh anglitsh my favorable suject :P
[16:39:48] <mrig> Hello :)
[16:40:00] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Read error: Connection reset by peer)
[16:41:00] <vdamewood> GeDaMo: He makes videos about grammar occasionally, and in one of them he pointed out that a 'British blue box' was the normal order, and a 'Blue British Box' implies that there is a kind fo British Box that is blue, while a Police Box (ie Tardis) flies across the screen.
[16:41:04] <merijn> You know what I'm suddenly considering? Shenzhen I/O and Exapunks inspired topdown 2D shooter where you have that classic Zachtronics programming game, but you program bots that fight eachother
[16:41:12] <KillerWasp> hello random singing flowers guys
[16:41:35] <vdamewood> merijn: Look at the board game RoboRalley
[16:41:42] <GeDaMo> merijn: I feel like there have been games like that
[16:41:45] <merijn> vdamewood: I know several games like that, yes :p
[16:42:12] <merijn> GeDaMo: There've been a few, like Screeps, where you need to use JS but I feel they don't have the right level of constraints
[16:42:30] <merijn> CoreWars is, of course, a classic, but that's rather abstract and not nice to visualise
[16:43:08] <merijn> GeDaMo: If you know any others, I'd be interested
[16:43:41] <KillerWasp> anyone here build a game today?
[16:43:59] <GeDaMo> There was one written by somebody in another channel a long time ago, you wrote an assembly language program to control a character who could move eat or punch
[16:45:16] <KillerWasp> GeDaMoᐒ I have already thought of similar ideas, only that it is very difficult to complete it.
[16:45:46] <merijn> GeDaMo: You don't remember a name, I suppose? :p
[16:45:51] <GeDaMo> In fact, the only thing on my github account is my (winning) program for that :P
[16:46:11] <GeDaMo> https://github.com/GeDaMo/gridbot
[16:46:11] *** Joins: justache (~justache@user/justache)
[16:46:12] <bayaz> Title: GitHub - GeDaMo/gridbot: Bots for GridControl 
[16:46:22] <KillerWasp> It is as if any assembly language was not made to be used in reality, only in computers.
[16:46:52] <vdamewood> GeDaMo: So, what's Da short for?
[16:47:21] <GeDaMo> Don't Ask :P
[16:47:43] <vdamewood> George Don't Ask Morrison. Your parents gave you a terrible name.
[16:48:23] <GeDaMo> My winning bot took advantage of the fact there was no penalty for suiciding
[16:48:39] <GeDaMo> If there was nothing nearby, the bot would die and restart somewhere else
[16:49:22] <GeDaMo> Also, it used a lookup table of actions indexed by the contents of the surrounding squares
[16:49:25] <hans_> why is HTTP 415 called "Unsupported media type" ? shouldn't it be "Unsupported Content Type" ? 
[16:49:43] <hans_> given that its a Content-Type issue kind of thing?
[16:50:05] <KillerWasp> hans_ᐒ is fault of google
[16:51:45] <phogg> reason strings are not significant
[16:52:08] <mrig> This is pretty thought provoking, no wonder floating point numbers are so troubles some, if they are this badly behaved on paper too : https://www.youtube.com/watch?v=GVhFBujPlVo
[16:52:09] <bayaz> Title: Why it’s mathematically impossible to share fair 
[16:52:16] *** Quits: kuolex (~kuolex@r167-62-97-30.dialup.adsl.anteldata.net.uy) (Quit: Leaving)
[16:52:35] <mrig> troublesome in a way that troubles some.
[16:52:38] <merijn> mrig: Floating point numbers are really *well* behaved. They are just not behaving like *reals*
[16:52:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 256 seconds)
[16:52:52] <hans_> phogg, HTTP 418 I'm a teapot
[16:53:01] <merijn> mrig: People like to pretend floats are reals, but they are not.
[16:53:05] <mrig> merijn sure yes, this is indicating that decimals are a problem too
[16:53:12] *** Parts: Buttercat (~Buttercat@user/buttercat) ()
[16:53:29] <mrig> floats are not included there, only issues when rounding to integers.
[16:53:36] <phogg> hans_: sure, but the meaning is in the RFC definition of the code (not the string following it). You can literally respond with "HTTP 403 Can't Let You Do That Star Fox" and no one will care.
[16:54:02] <mrig> merijn so the problem here is with 'reals'
[16:54:34] *** Quits: PlanckWalk (~Planck@user/planckwalk) (Ping timeout: 256 seconds)
[16:54:38] <merijn> mrig: The problem is that you cannot represent the reals using a fixed, finite representation
[16:54:45] <KillerWasp> float are real number by use the decimal
[16:55:00] <merijn> mrig: Actually, you can't represent reals using a non-fixed finite representation either :p
[16:55:01] <KillerWasp> but don't have all the limitation of a real number
[16:55:21] <merijn> mrig: Effectively, the problem is "finite precision = cannot work with reals" even though people often want to
[16:55:31] <mrig> as mentioned seems quite thought provoking, this is about divisions when not using fraction.
[16:55:45] <mrig> Seems to be the case where fractions are so much better.
[16:55:50] <merijn> mrig: Another problem is that most languages don't have a data type for the rationals
[16:56:08] <merijn> (well that, and we don't have hardware acceleration for rationals)
[16:56:09] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (Read error: Connection reset by peer)
[16:56:14] <mrig> really is a complicated problem.
[16:56:45] <mrig> such a simple thing, when you glance at it, but man, there is more to it than meets the eye.
[16:56:46] *** Joins: rtypo (~alex@user/rtypo)
[16:56:49] <merijn> mrig: Fractions are rational and thus, by definition, can be represented in finite space
[16:57:10] <mrig> ah, that definition makes sense now.
[16:57:16] <KillerWasp> a=0.1;b=0.2;a+=0.1;if(a!=b)printf("SPOT!!");
[16:57:17] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[16:57:23] <mrig> reals are irrational :|
[16:57:34] <mrig> irrationable.
[16:57:44] <merijn> mrig: In fact, that's basically the definition of rationals, "can be represented as a fraction" :p
[16:57:58] <Guest12> Hi I have a database design question. Can I ask my question here?
[16:58:18] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[16:58:22] <KillerWasp> float is fine for work with real numbers, or double
[16:58:37] <KillerWasp> or mpfr
[16:58:43] <mrig> so real numbers are that which can not fit into the real world, only room for them in the real number world :)
[16:59:33] <mrig> Guest12 just ask, it is likely that someone will be able to answer you.
[16:59:34] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[16:59:39] <Guest12> Ok sure
[16:59:51] <Guest12> I want to do something like this https://stackoverflow.com/questions/57510457/better-way-to-design-payment-database-with-multiple-payment-methods but for my database https://dpaste.org/fiw0 how would I design the tables? The only difference is that my database includes monthly/yearly membership subscriptions. Stripe is recurring payments while
[16:59:51] <Guest12> cryptocurrency payments are not.
[16:59:52] <bayaz> Title: Better way to design payment database with multiple payment methods 
[17:00:27] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[17:01:33] <KillerWasp> Guest12ᐒ Payment methods have multiple components, so you have no choice but to create a field for each of them.
[17:02:01] *** Joins: PlanckWalk (~Planck@user/planckwalk)
[17:02:15] <KillerWasp> at least a byte type (0-255 number) for each one.
[17:02:36] <Guest12> you mean a table for each payment method? Or field means column? Which table should the column go in?
[17:03:07] <KillerWasp> field == column, and for only 1 component of a payment method
[17:03:59] *** Joins: rickybob (~rickybob@35.143.255.39)
[17:04:07] <KillerWasp> Consider as the payment method a huge group that needs to be separated into elements.
[17:04:33] *** Joins: rickybobby (rickybob@gateway/vpn/protonvpn/rickybob)
[17:04:40] <Guest12> so 1 payment method table but with 1 column in that table indicating all of the payment methods used?
[17:05:17] <KillerWasp> Each element are subgroups, interrelated to each other to form an extensive list of payment methods.
[17:06:08] <KillerWasp> Guest12ᐒ well, It seems that this is how you want to do it. Then do it. :/
[17:06:44] <KillerWasp> 1 column and problem fixed. *sigh*
[17:06:51] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[17:06:52] <Guest12> Well I am not exactly sure myself. I am having a bit of a hard time understanding what you mean. Can you kindly make a new paste showing the table schemas?
[17:07:04] *** Quits: gravypod (~gravypod@user/gravypod) (Quit: Disconnecting)
[17:08:00] <KillerWasp> Guest12ᐒ what you need is not to be solved, but to understand how to solve it yourself.
[17:08:41] *** Quits: rickybob (~rickybob@35.143.255.39) (Ping timeout: 256 seconds)
[17:08:44] <KillerWasp> Read what I have told you over and over again.
[17:08:55] *** Quits: eTnamun (~hexchat@user/heyoka) (Remote host closed the connection)
[17:09:06] <Guest12> Ok I will try reading again. At first glance I am confused where I need to put this column you are referring to
[17:09:37] <KillerWasp> New concepts are always confusing at first, you will understand. :)
[17:11:18] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[17:14:54] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:15:42] <Guest12> The UserMembership table with a new column for payment method?
[17:17:11] *** Joins: rito_ (~rito_gh@45.112.243.47)
[17:17:19] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:18:39] *** Joins: aqua (~sid742412@user/aqua)
[17:18:55] *** aqua is now known as monkish
[17:18:55] *** Quits: monkish (~sid742412@user/aqua) (Remote host closed the connection)
[17:19:12] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[17:19:13] *** Joins: motherr (~motherr@user/motherr)
[17:19:15] *** Joins: aqua (~sid742412@user/aqua)
[17:19:27] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Ping timeout: 256 seconds)
[17:19:34] *** aqua is now known as kish`
[17:20:22] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[17:20:38] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[17:22:39] *** Quits: getynge (~getynge@2601:702:80:2fc0::c4bf) (Client Quit)
[17:22:59] *** Lea2 is now known as Learath2
[17:23:25] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[17:26:52] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:29:58] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:30:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[17:36:17] *** Quits: s0berage (~s0berage@135-23-213-77.cpe.pppoe.ca) (Quit: Leaving)
[17:37:32] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[17:38:43] *** Quits: MangyDog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 256 seconds)
[17:43:08] <getynge> I'm going to write an annoyingly "safe" programming language.  I don't have a full grasp of what features it would have yet but at a bare minimum it would consider all unchecked arithmatic expressions unsafe, also branches will be fallable to account for radiation flipping bits
[17:43:51] <sonny> unchecked arithmetic expressions?
[17:44:04] <sonny> radiation?
[17:44:23] <getynge> arithmatic*, as in overflow checks
[17:44:32] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:4042:a7af:5016:5937) (Read error: Connection reset by peer)
[17:44:35] <merijn> getynge: Man, that sounds like a great candidate for the (no longer running) PLT games :p
[17:44:44] <getynge> e.g. adding 1 + 1 would require you to check that the addition doesn't result in a number less than either input
[17:45:20] <getynge> and radiation can result in memory getting modified in unpredictable ways, so to account for this all if statements require sanity checks of some kind
[17:45:20] <sonny> so overflow/underflow warning/error?
[17:45:43] <getynge> yeah exactly, that would've been a more clear way to word that
[17:45:57] <sonny> that requirement seems hard to implement in practice
[17:46:02] <getynge> exactly
[17:46:15] <GeDaMo> On overflow goto :P
[17:46:55] <KillerWasp> JMP 0
[17:46:56] <sonny> probably easier to build memory technology that does not get disturbed by radiation
[17:47:06] <merijn> getynge: Have you seen the Vigil language?
[17:47:13] *** Joins: prompt32 (~kapad@user/kapad)
[17:47:26] <merijn> getynge: https://github.com/munificent/vigil
[17:47:27] <bayaz> Title: GitHub - munificent/vigil: Vigil, the eternal morally vigilant programming language 
[17:47:33] <getynge> in rust most operations that can fail would return a Result type that has to be unwrapped to grab it's contents, I'd do something like that with the results of arithmatic operations.  As for branches, I imagine adding parity to booleans could do the needful maybe
[17:47:50] <getynge> merijn: I'll take a look!  I genuinely proposed this as a joke but I actually find the idea interesting nonetheless
[17:47:53] *** Joins: reumeth (~reumeth@user/reumeth)
[17:48:10] <merijn> getynge: I wholly endorse people creating weird joke programming languages :p
[17:48:24] <merijn> getynge: Infinitely more respectable than yet another JS clone :p
[17:48:28] <vdamewood> sonny: Radiation: https://youtu.be/AaZ_RSt0KP8
[17:48:29] <bayaz> Title: The Universe is Hostile to Computers 
[17:48:37] <KillerWasp> You could be getting excuses that the machine is surrounded by radiation, but the truth is that it is being hacked.
[17:48:59] <getynge> I really wonder how on earth I could account for radiation without relying on ECC memory
[17:49:15] <getynge> parity sounds easy but it's error prone, maybe I could mirror all allocations and assignments?
[17:49:16] <merijn> getynge: See also fuckitpy :p https://github.com/ajalt/fuckitpy
[17:49:17] <bayaz> Title: GitHub - ajalt/fuckitpy: The Python error steamroller. 
[17:50:08] <vdamewood> getynge: Parity at least requires for an even number of errors for it to fail.
[17:51:22] <getynge> also for that matter what kind of ungodly syntax would I have to use to represent a branch statement that can fail since _every_ branch, including any response to branch failure, can fail
[17:51:40] <sonny> vdamewood why does this video mention transistors?
[17:52:07] <sonny> oh, maybe cause the computers that do it are old
[17:52:41] <getynge> all computers have transistors though
[17:53:10] <getynge> the new ones are just very very very small
[17:53:20] <getynge> which is actually the precise reason radiation can be a problem
[17:53:29] <Atque> getynge: You don't need transistors to build a turing machine.
[17:53:29] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:53:35] <KillerWasp> bah, I can recreate the glitch of mario. Is so easy
[17:53:49] <merijn> sonny: What do you think CPUs are made off, if not transistors?
[17:53:49] <vdamewood> Yeah, computers still use transistors.
[17:54:17] <getynge> Atque: true, so I guess the more correct phrase is that most computers use transistors, and all modern ones do
[17:54:18] <sonny> I thought that was specific hardware from older computers
[17:54:21] <getynge> well, modern ones that get any work done
[17:54:44] *** Joins: gitgood (~gitgood@85.210.185.0)
[17:54:47] <sonny> I thought they use silicon now
[17:54:54] <getynge> silicon is used to make the transistors
[17:54:58] <getynge> it's just a material
[17:55:11] <sonny> a transistor is not a specific component?
[17:55:34] <vdamewood> sonny: silicon is a material. Transistors are a component.
[17:55:46] <vdamewood> Transistors are made with or of silicon.
[17:55:52] <getynge> think of a transistor as a building block upon which all other building blocks are constructed
[17:56:06] <getynge> logic gates are made of transistors, which are in turn used to make CPU instructions, which are in turn used to run programs
[17:56:16] <getynge> that's a bit of a simplification but it gets the idea across I think
[17:56:23] <Atque> getynge: But not the heatsync?
[17:56:28] <GeDaMo> https://www.youtube.com/watch?v=33vbFFFn04k
[17:56:29] <bayaz> Title: How semiconductors work 
[17:56:32] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[17:56:48] <vdamewood> GeDaMo: Wait until sonny has finished my video!
[17:57:07] <getynge> Atque: of course I'm just referring to the building blocks inside the cpu, of course the rest of the computer doesn't need transistors.  After all the cpu and GPU have no transistors connecting them, it's just plain traces
[17:57:13] <GeDaMo> That was ages ago! :P
[17:57:30] <pulse> Those damn semiconductors, always conducting, but never perfectly
[17:57:31] *** Joins: jsmooth (~quassel@068-186-087-058.res.spectrum.com)
[17:57:34] *** Quits: jsmooth (~quassel@068-186-087-058.res.spectrum.com) (Changing host)
[17:57:34] *** Joins: jsmooth (~quassel@user/jsmooth)
[17:57:57] <getynge> however excessive precision only aids to confuse rather than further understanding, though sometimes I admit I overcompensate for that fact
[17:58:19] <getynge> I need to turn on spellcheck in my client I can't spell for the life of me
[17:58:21] <vdamewood> GeDaMo: My video is ages long.
[17:58:40] <nomagno> I'm having fairly bad results trying to find accepted, non-introductory-to-programming, Scheme learning materials. Any recommendations?
[17:58:46] <Atque> pulse: Yeah, semiconductors are only semi-conducting. : P
[17:59:04] <sonny> nomagno scheme.com
[17:59:20] <sonny> the scheme programming language 4 is on that page
[17:59:34] <Atque> nomagno: Scheme's a functional programming language. You should be able to find books, but if you already know functional programming there will probably be a lot you already know.
[18:00:04] <sonny> sicp is a classic, there is also concrete abstractions (free)
[18:00:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:00:32] <sonny> sicp is free also iirc
[18:01:11] <sonny> and, learn scheme in fixnum days, you probably want this one
[18:01:13] *** Joins: zaher (~zaher@37.48.144.181)
[18:01:21] <davve> i tried sicp but language felt so formal
[18:01:30] <davve> then tried land of lisp
[18:01:35] <davve> and actually learned to code a bit :P
[18:01:42] <davve> probably says more about me than SICP
[18:02:02] <sonny> heh, land of lisp looks cool :-)
[18:02:25] <davve> its great... im a huge fan of no starch press
[18:02:26] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:02:36] <getynge> What I love about programming and really computers in general is that I'm always learning
[18:02:50] <getynge> this of course means I always feel incompetent, but learning is fun so w/e
[18:02:50] <sonny> vdamewood I heard of cosmic rays ages ago, but I've literally never thought about it
[18:03:16] *** Quits: zaher_ (~zaher@37.48.183.17) (Ping timeout: 264 seconds)
[18:07:22] *** Quits: getynge (~getynge@2601:702:80:2fc0::c4bf) (Quit: enabling system spellcheck brb)
[18:07:43] <GeDaMo> https://en.wikipedia.org/wiki/Radiation_hardening
[18:07:44] <bayaz> Title: Radiation hardening - Wikipedia 
[18:07:50] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[18:09:49] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[18:10:01] <MrMobius> some neat chips you can build a little computer out yourself nowadays of came in rad hard versions. i was trying to find one until i found out that the rad hard material is carcinogenic 0_0
[18:10:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[18:10:43] <sonny> :O
[18:13:59] *** Quits: One39Dev (LordShiva@user/one39dev) (Quit: Leaving)
[18:14:12] <vdamewood> sonny: Also, cosmic rays are part of the reason why we can't just shrink CPU sizes down much smaller than they are now.
[18:14:40] <vdamewood> sonny: Because as the transistors get smaller, they are impacted more by cosmic rays.
[18:14:48] <sonny> ah, interesting
[18:14:55] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[18:15:11] <vdamewood> Also, are sort of approaching the size of a silicon atom in the processes we use to make transistors.
[18:15:15] <vdamewood> we are*
[18:15:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[18:15:48] <vdamewood> You hear of terms like 10 nm, 7 nm, and 5nm. Silicon atoms are about 0.2 nm.
[18:16:01] <sonny> I wonder if they can use optics to make transistors if they will have the same problem
[18:16:20] <GeDaMo> "That would require extremely tiny atoms. And have you priced those lately? I'm not made of money - leave me alone!"
[18:16:20] <MrMobius> some space companies use FPGAs because the larger process size makes them more resistant
[18:16:25] <sonny> 5nm is the size of the transistors?
[18:16:29] *** Quits: getynge (~getynge@2601:702:80:2fc0::c4bf) (Quit: Leaving)
[18:16:47] *** Joins: slakman (~slakman@112.202.246.24)
[18:16:54] <GeDaMo> https://onlinelibrary.wiley.com/doi/10.1002/lpor.202100348
[18:16:57] <bayaz> Title: Lasing in a Hybrid Rare‐Earth Silicon Microdisk 
[18:17:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:17:19] <vdamewood> sonny: Not exactly, anymore. Fabricators are kind fo exaggerating their sizes to sell more product.
[18:17:31] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[18:17:49] <sonny> oh
[18:18:09] <GeDaMo> «The term "3 nm" is simply a commercial name for a generation of a certain size and its technology, and does not represent any geometry of the transistor.»  https://en.wikichip.org/wiki/3_nm_lithography_process
[18:18:11] <bayaz> Title: 3 nm lithography process - WikiChip 
[18:18:45] <vdamewood> but yeah, the size of the process used to be the size of the transistor or the distance between them or something like that. It doesn't anymore though.
[18:19:12] <vdamewood> I think the 'BS' units started happening abount 20 nm or so. But I'm not sure.
[18:19:20] <vdamewood> Maybe 40.
[18:20:35] *** Joins: temy (~tem@wikimedia-commons/pandakekok9)
[18:22:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[18:22:16] *** Quits: getynge (~getynge@2601:702:80:2fc0::c4bf) (Client Quit)
[18:22:34] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[18:22:47] *** Quits: _inky (~inky_@46.36.112.226) (Quit: Leaving.)
[18:23:45] *** JTL is now known as JLT
[18:23:51] *** JLT is now known as JTL
[18:26:47] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:29:47] <lf94> Huh, TIL.
[18:31:45] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[18:32:12] *** night_wulfe_ is now known as night_wulfe
[18:32:19] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[18:32:34] *** Joins: Enitin (~Enitin@82.102.22.85)
[18:32:50] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[18:33:15] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[18:34:29] <psystemupdate> anyone aware of a proper project to bring a unified approach to live and historical aquisition of OHCLV csv data? preferably something that uses p2p tech under the hood to mitigate single point of failure for this data. OR if there is a blockchain for that already, then i guess thats what im looking for.
[18:34:39] *** pizzaiolo is now known as pizza
[18:34:49] *** Quits: bud (~bud@user/bud) (Remote host closed the connection)
[18:35:07] *** Joins: d3x0r (~d3x0r@ip68-96-102-241.lv.lv.cox.net)
[18:35:08] *** Quits: d3x0r (~d3x0r@ip68-96-102-241.lv.lv.cox.net) (Changing host)
[18:35:08] *** Joins: d3x0r (~d3x0r@user/d3x0r)
[18:35:28] <psystemupdate> for crypto
[18:35:53] *** Joins: img (~img@user/img)
[18:35:54] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[18:37:52] <GeDaMo> What is OHCLV?
[18:39:52] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[18:40:31] <vdamewood> Yay, one more type converted to C#.
[18:42:11] *** Quits: inky (~inky@46.36.112.226) (Ping timeout: 256 seconds)
[18:43:20] *** Quits: jsmooth (~quassel@user/jsmooth) (Quit: jsmooth)
[18:43:20] *** Quits: Devilirium (~Deviliriu@catv-80-99-193-173.catv.broadband.hu) (Read error: Connection reset by peer)
[18:43:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:44:24] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[18:44:49] *** Joins: jsmooth (~quassel@068-186-087-058.res.spectrum.com)
[18:45:26] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:47:49] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 268 seconds)
[18:48:15] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[18:49:29] <[itchyjunk]> My burrito is always cold at the center after microwaving. Does anyone know of a good blockchain solution for that?
[18:49:44] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 252 seconds)
[18:50:10] *** Joins: eTnamun (~kvirc@user/heyoka)
[18:50:46] *** Parts: skepta (~eric2@180.243.15.173) ()
[18:51:53] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[18:52:31] <Raziel> [ins4ne], graphite rods
[18:52:34] <Raziel> straight through the middle.
[18:52:39] <Raziel> oops. I meant [itchyjunk] 
[18:52:44] <Raziel> there's two [i people v:
[18:54:01] *** Joins: password2 (~password8@user/password2)
[19:01:17] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[19:02:04] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:02:59] <getynge> [itchyjunk]: a blockchain enabled smart-microwave that keeps an ongoing record of the state of the burrito, once it can securely confirm that the burrito has reached the desired temperature, the microwave is stopped and the record can then be analyzed by the International Burrito Heating Authority (IBHA) who then reports any deviations from the ideal temperature, which clients may then use to reach more ideal burrito cooking times
[19:03:35] <getynge> oh deary me I comma spliced the hell out of that sentence my english teacher would be very mad at me if I was still at any form of educational institution 
[19:03:37] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[19:05:25] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 256 seconds)
[19:07:41] *** Quits: hans_ (~hans@36.84-48-255.nextgentel.com) (Read error: Connection reset by peer)
[19:08:48] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[19:09:27] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[19:12:02] *** Joins: rsx (~dummy@ppp-188-174-152-19.dynamic.mnet-online.de)
[19:18:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:20:41] *** Joins: quartz (~quartz@user/quartz)
[19:23:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:23:52] *** Quits: getynge (~getynge@2601:702:80:2fc0::c4bf) (Quit: Leaving)
[19:23:59] <GeDaMo> http://www.righto.com/2021/11/reverse-engineering-yamaha-dx7_28.html
[19:24:01] <bayaz> Title: The Yamaha DX7 synthesizer's clever exponential circuit, reverse-engineered 
[19:24:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:24:59] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[19:25:25] <[itchyjunk]> getynge, okay that has ML and blockchains in there
[19:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:25:37] <[itchyjunk]> but i am disappointed you didn't leverage anything quantum
[19:25:40] *** Joins: beencubed (~beencubed@209.131.238.248)
[19:26:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:27:14] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[19:27:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:28:04] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:28:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:30:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:31:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:32:08] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[19:32:20] <vdamewood> Oohh... Hey.. This is starting to be a Challenge.
[19:32:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:33:27] <Soni> can docs license be different from software license? even for docs embedded into source files?
[19:33:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:33:50] <sillymob[m]> well, you could write your own license that specifies this
[19:33:51] <sillymob[m]> so, yes
[19:34:10] <vdamewood> I have a struct that is basically a C implementation of an abstract class. (It had a void* state member, and a bunch of function pointers that take the state object as a parameters.) Now I get to try and write a .NET wrapper for this.
[19:34:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:34:40] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[19:34:45] <vdamewood> Soni: Yes. You just have to specify which is liccensed under which in your license statement.
[19:35:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:35:46] *** Parts: getynge (~getynge@2601:702:80:2fc0::c4bf) (Leaving)
[19:35:49] <vdamewood> Soni: FWIW, the GNU project does this almost universally. The documentation is under the GNU Free Documentation License, the program is under the GNU General Public License.
[19:36:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:36:44] *** Quits: temy (~tem@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[19:37:20] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[19:37:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:38:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:39:07] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:39:35] <tomathy> can someone make a program for me
[19:39:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:39:52] *** Quits: hans_ (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 264 seconds)
[19:40:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:40:41] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:41:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:41:58] <pyzozord> if that whole programming thing won't work out, i think i have a backup plan. Like scale shower tiles remover.
[19:42:13] <sonny> oberon seems to have some type of object that represents a reader and writer, it's crazy because you can use them and not specify any resources until later
[19:42:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:43:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:43:50] *** Joins: mrig (~mrig@user/mrig)
[19:43:57] <sonny> the closest thing in other languages would be to store the data as a sequence, but I think this only works if the language has generators
[19:44:16] <pyzozord> like=lime
[19:44:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:45:11] <KillerWasp> all scientists are stupid, they believe in flying whales and they just do stupid things, and they end up proud to fart. They should lose the subsidies to get to work seriously.
[19:45:28] <KillerWasp> wrong channel...
[19:45:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:45:54] <sillymob[m]> OR the very best channel
[19:46:06] <vdamewood> I may have just found a bug in my code.
[19:46:29] <pyzozord> vdamewood you must not let it bug you
[19:46:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:46:41] <pyzozord> use a debugger!
[19:46:56] <vdamewood> Well, it's not so much a bug as it is an oversight.
[19:47:09] <KillerWasp> sillymob[m]ᐒ seem like very offtopic here
[19:47:44] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[19:47:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:48:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:48:35] <tomathy> i find it hard to work out the return type of my function interfaces
[19:48:40] <tomathy> how do i establish them
[19:49:01] <vdamewood> pyzozord: Oh, no need for a debugger.
[19:49:06] <vdamewood> tomathy: Type it out?
[19:49:11] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:49:22] <vdamewood> tomathy: It might help if you specify which language you're using.
[19:49:24] <tomathy> i just put everything as void until i can work it out
[19:49:31] <tomathy> Java
[19:49:37] <tomathy> i'm a Java hipster
[19:49:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:50:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:50:40] <KillerWasp> https://www.youtube.com/watch?v=OxGsU8oIWjY - i see it, and it's related with the idea of infinite number that scientists cling so hard.
[19:50:41] <bayaz> Title: How An Infinite Hotel Ran Out Of Room 
[19:50:54] <vdamewood> tomathy: Oh, in that case, I can't really relate to the problem.
[19:51:21] <tomathy> vdamewood: you have helped with Java before
[19:51:45] <vdamewood> tomathy: Yeah, and I usually have a pretty good handle on what kind of value I expect from a function.
[19:51:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:52:19] <tomathy> do you work out the argument first
[19:52:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:52:44] <vdamewood> tomathy: Well, I start with the interface first. What does the function do? Why am I even writing it?
[19:53:13] <vdamewood> If it converts hex strings to color values, then it takes a String, and returns a Color object.
[19:53:18] <tomathy> i need classes for both Poker Bots and Playable players
[19:53:27] <tomathy> so i want an interface for their behaviour
[19:53:39] <tomathy> because they can only do the same stuff
[19:53:48] <tomathy> although a human controls one not the other
[19:53:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[19:53:54] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[19:54:05] <tomathy> and i just wonder what "check()" would return for example
[19:54:14] <tomathy> for "raise()"
[19:54:16] <tomathy> or*
[19:54:28] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[19:54:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:54:42] *** Joins: hololeap (~hololeap@user/hololeap)
[19:54:47] <vdamewood> Why would a program need to call raise() on a human player? Wouldn't the human make that decision?
[19:55:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:56:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:57:09] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[19:57:18] <tomathy> well if i'm playing against a poker robot it needs to be able to raise if it wants to
[19:57:19] <vdamewood> pyzozord: I have my aforementioned hack of an interface, but the delete function on it assumes the overall object was malloc()ed. Now that I'm trying to write a .NET Wrapper, that assumption is no longer true.
[19:57:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:58:19] <vdamewood> tomathy: But I asked about a human player.
[19:58:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:58:46] <tomathy> well the human would need to be able to raise
[19:58:58] <vdamewood> So, does the human call raise()?
[19:59:18] <vdamewood> How would a human call raise()?
[20:00:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:00:01] <vdamewood> s/How/If so, how/
[20:00:02] *** Quits: xff0x (~xff0x@2001:1a81:527f:8300:57da:badd:210c:d109) (Ping timeout: 240 seconds)
[20:00:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:00:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:00:56] *** Quits: okt (~okt@user/okt) (Ping timeout: 260 seconds)
[20:01:05] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:58bf:a585:9eb2:e25e) (Quit: simon323)
[20:01:08] *** Joins: xff0x (~xff0x@2001:1a81:527f:8300:4a2b:7ccd:5352:f2b5)
[20:01:31] *** Quits: absc (~absc@81.31.144.28) (Ping timeout: 256 seconds)
[20:01:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:01:45] <tomathy> he would have to select the option through the gui or console
[20:01:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:02:03] <tomathy> either with a mouse click, or by typing something
[20:02:27] <tomathy> providing for both would be best
[20:02:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:04:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:04:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:05:13] <vdamewood> It sounds like you don't actually want a raise() function on the player, but on an object the player interacts with.
[20:06:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:06:31] <vdamewood> Say, for example, the player's betting state.
[20:06:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:07:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:07:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:08:05] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[20:08:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:08:28] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:08:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:08:57] *** Quits: federico_it (~textual@151.51.81.237) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:09:25] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:09:58] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[20:10:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:10:16] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[20:10:35] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[20:10:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:12:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:12:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:12:49] <vdamewood> Well, it looks like the C++ version of my code just simply deletes the object with unique_ptr's destructor.
[20:12:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:13:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:14:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:14:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:16:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:16:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:17:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (K-Lined)
[20:18:08] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[20:19:12] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:21:02] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:21:26] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Quit: Client closed)
[20:22:01] <jiffe> is there a hash algorithm called kobe?
[20:24:02] <KillerWasp> kobe? one new?
[20:24:10] <edgar-rft> maybe here -> http://kobehash.com/
[20:24:16] *** Quits: zaher (~zaher@37.48.144.181) (Ping timeout: 264 seconds)
[20:24:27] <tomathy> vdamewood: usually during a game there is a round and each player raises his own stack in front of him, then the dealer collects the chips after each round, and players who are still in the game must have paid the same amount (the highest bet/raise)
[20:24:36] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[20:24:49] *** Joins: Pixi_ (~Pixi@user/pixi)
[20:25:03] <KillerWasp> ok, not's new...
[20:25:17] <tomathy> so maybe i need a Pot class, which each player creates each round, and also sits amidst the table as the total reward
[20:26:04] * edgar-rft also wants some pot :-)
[20:26:39] *** Joins: inky (~inky@37.252.90.88)
[20:26:41] <vdamewood> tomathy: I'm familiar with how betting works in poker.
[20:27:22] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:4ce9:4994:46d4:5d53)
[20:27:48] <tomathy> this means that the "pot is raised", which is what people say
[20:27:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:27:51] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 245 seconds)
[20:28:46] <jiffe> yeah no clue what this kobe checksum is, I don't think its proprietary, I'll just have to wait for a response on this
[20:29:08] <mawk> it's a delicacy
[20:29:43] <vdamewood> tomathy: https://en.wikipedia.org/wiki/Socratic_questioning
[20:29:44] <bayaz> Title: Socratic questioning - Wikipedia 
[20:30:12] <vdamewood> tomathy: I was hoping you'd figure out that you might be modeling your data wrong.
[20:30:44] *** Joins: reumeth (~reumeth@user/reumeth)
[20:30:48] <tomathy> i know i am modelling it wrong
[20:31:08] <tomathy> what matters to me is that it works
[20:31:12] <vdamewood> Then figure out how to model it right before you worry about how you interact with your models.
[20:32:18] <tomathy> i am
[20:35:17] *** Joins: raj (uid72176@user/raj)
[20:37:20] *** Joins: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51)
[20:37:55] *** Quits: jsmooth (~quassel@068-186-087-058.res.spectrum.com) (Quit: jsmooth)
[20:40:03] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:43:17] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[20:43:21] <vdamewood> Yay! Near-dead battery.
[20:44:02] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[20:44:18] *** Joins: lavos (~molt@178-222-245-206.static.isp.telekom.rs)
[20:46:44] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:47:40] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 264 seconds)
[20:48:45] *** Joins: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c)
[20:51:09] *** Joins: teut (~teut@182.68.254.204)
[20:51:22] <teut> https://bpa.st/Y3XQ
[20:51:23] <bayaz> Title: View paste Y3XQ 
[20:51:34] <teut> can someone explain the output?
[20:51:38] <_73> What would you call a software equivalent of an x86-64 CPU that takes an executable file as input and then executes the instructions as an actual CPU would? I would have thought `virtual CPU` was a fine name for this but this term seems to have been claimed by the virtual machine people.
[20:51:44] *** Joins: okt (~okt@user/okt)
[20:52:06] <GeDaMo> Emulator, maybe
[20:52:37] <GeDaMo> But it's also a virtual machine
[20:53:04] <_73> emulator seems to be what I am looking for
[20:53:18] <teut> what would be such a software written in?
[20:54:34] <GeDaMo> C or C++ probably
[20:54:36] <_73> teut: you could write it in anything but C would probably be a natural choice.
[20:55:14] <teut> and will one require to parse that exe?
[20:55:46] <GeDaMo> Yes
[20:55:59] <teut> oh ok, I was thinking that
[21:01:21] <teut> do you have some example of such code ?
[21:01:42] <teut> will really help me understand some good stuff
[21:01:57] <GeDaMo> A CPU emulator?
[21:02:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:02:27] <teut> ya, parsing binary that a human cannot understand
[21:02:40] <_73> teut: I found this book on the topic - http://www.xsim.com/papers/Bario.2001.emubook.pdf
[21:02:41] <bayaz> Type: application/pdf Size: 856.6 kB 
[21:03:05] <GeDaMo> DOSBox emulates an x86 processor
[21:03:22] <teut> firefox has gone mad  https://ibb.co/94Y1rzP
[21:03:22] <bayaz> Title: image 
[21:04:01] <_73> try this link - http://emubook.emulation64.com/
[21:04:02] <bayaz> Title: EMUBook 
[21:05:05] <_73> I don't know if these are actually good resources
[21:05:23] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[21:05:35] <teut> thanks, but I cannot see "understanding and seeking meaning from binary code" anywhere
[21:05:55] <teut> I actually took a quick glance
[21:06:10] <teut> inside of the index and content
[21:06:54] <_73> oh thats a different topic called `reverse engineering`
[21:08:20] <teut> XD  sure its reverse engineering
[21:09:33] <teut> btw about the snippet that  shared
[21:09:44] <teut> there will the second fork() be called?
[21:09:56] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi)
[21:10:05] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[21:10:42] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:10:43] *** Joins: Akuli (~Akuli@213.216.208.32)
[21:11:04] <GeDaMo> The second fork will be called if the first returns false
[21:12:04] <teut> so two processes should spawn isnt it from the fork's in the if?
[21:12:27] <teut> I mean 2 processes would be living
[21:12:44] <teut> the main and child
[21:13:35] *** Quits: inky (~inky@37.252.90.88) (Remote host closed the connection)
[21:13:50] *** Joins: inky (~inky@37.252.90.88)
[21:14:17] <teut> and then the third fork would be called , so would there be copy of that in each of the main and child?
[21:14:23] *** Joins: Klinda (~superleag@user/klinda)
[21:14:31] <teut> so 3 processes?
[21:14:37] <teut> including the main
[21:15:44] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[21:15:44] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[21:15:44] *** Joins: tane (~tane@user/tane)
[21:16:43] *** Quits: maxzor (~maxzor@2a01cb04054faa00b117f66329c31897.ipv6.abo.wanadoo.fr) (Quit: compiuter crash)
[21:17:58] *** Joins: maxzor (~maxzor@2a01cb04054faa00b117f66329c31897.ipv6.abo.wanadoo.fr)
[21:19:30] <teut> when you call fork, what part of code starts executing in the child?
[21:19:58] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[21:20:00] <InPhase> teut: The next instruction in both.
[21:20:15] <InPhase> teut: Behavior is then changed based on the return value of fork.
[21:20:52] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[21:20:53] <teut> next instruction, that looks like I should know assembly
[21:21:11] <InPhase> teut: In a higher level language, interpret that as the next statement.  :)
[21:21:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[21:21:30] <KillerWasp> i make a emulator of 486
[21:21:38] <KillerWasp> thanks by ask
[21:21:51] <InPhase> teut: The next statement is almost always an "if", switching on the return value.
[21:22:28] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 264 seconds)
[21:23:53] *** Joins: emf (~emf@2620:10d:c090:400::5:9a5b)
[21:24:18] *** Joins: aradesh (~aradesh@user/aradesh)
[21:24:20] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d5-193.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:25:01] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[21:26:27] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[21:26:27] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[21:26:41] *** Joins: FreeFull (~freefull@user-94-254-233-43.play-internet.pl)
[21:26:51] *** Joins: prompt32 (~kapad@user/kapad)
[21:28:15] *** Quits: prompt32 (~kapad@user/kapad) (Client Quit)
[21:28:48] *** Joins: prompt32 (~kapad@user/kapad)
[21:29:16] *** Quits: prompt32 (~kapad@user/kapad) (Remote host closed the connection)
[21:29:46] *** Joins: prompt32 (~kapad@user/kapad)
[21:29:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:29:54] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[21:31:38] <user51> GeDaMo: what makes c/c++ particularly useful for emulators?
[21:32:39] <GeDaMo> Performance, direct control of memory
[21:32:46] *** Joins: akevinhuang (~thekevinh@user/thekevinhuang)
[21:32:52] *** Quits: thevishy (~Nishant@2405:201:f005:c007:f92b:9823:fedf:deab) (Quit: Leaving)
[21:33:58] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:34:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:35:04] <user51> more generally, what are we emulating anyway? i've only written one emu, which just read a rom, call the relevant function from a table, repeat
[21:35:39] <GeDaMo> Basically, executing machine code instructions from anotehr processor
[21:35:42] <user51> no reason you couldn't say, interpret the assembly source rather than the binary i believe
[21:35:58] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:36:15] <GeDaMo> Sure, it's just another language
[21:36:34] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-ddb3-cd8f-aeab-5219.res6.spectrum.com)
[21:37:02] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:ed37:6ac3:14e1:7117)
[21:40:45] <user51> wonder what tradeoffs you get
[21:41:02] *** Quits: Akuli (~Akuli@213.216.208.32) (Quit: Akuli)
[21:41:19] *** Joins: Akuli (~Akuli@213.216.208.32)
[21:41:20] <GeDaMo> A lot of emulators actually compile to the native code of the host machine
[21:41:34] <GeDaMo> In order to remove interpreter overhead
[21:41:37] <user51> stop making me feel jealous :)
[21:41:50] <GeDaMo> Although that can be difficult if the code is self-modifying
[21:42:54] <user51> how does the compilation process go? on a per-instruction basis, or looking at some sequences of instructions. think it's called dynamic recompilation.
[21:43:20] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[21:43:20] <user51> it seems like lovely stuff, but also fairly complex.
[21:43:25] <GeDaMo> It varies
[21:43:38] *** Joins: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3)
[21:43:58] <user51> it's actually a nice idea, tbh
[21:44:06] *** Joins: _kimchi (~kimchi@87.247.123.112)
[21:44:11] *** Akuli is now known as Akuli2
[21:44:18] <user51> i had no idea how to do a carry when i wrote mine, which had 8-bit ops
[21:45:06] <user51> it compared it with the value before, e.g carry = before > after
[21:45:07] <GeDaMo> If you were doing your arithmetic in a larger type, you could just read out the carry bit from the result
[21:46:14] *** Joins: ixil (~ixil@82.197.178.137)
[21:46:21] *** Quits: arahael (~arahael@203.166.224.240) (Ping timeout: 256 seconds)
[21:46:41] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (Quit: Cya)
[21:46:50] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 252 seconds)
[21:46:57] <user51> something like carry = result > 0xff?
[21:47:05] <user51> s/ff/ff00/
[21:47:14] <user51> wait, damnit
[21:47:56] <GeDaMo> If you values are 8 bit, the 9th bit is the carry bit
[21:48:15] <GeDaMo> It would be the carry out of the last bit adder
[21:48:54] *** Joins: aradesh (~aradesh@user/aradesh)
[21:49:26] <user51> the idea is to do the calculation bit-wise, rather than byte + byte?
[21:50:17] <GeDaMo> No, but do the addition in a 16 bit value, say
[21:50:43] <GeDaMo> The least significant 8 bits are the result, the 9th bit is the carry
[21:51:05] <MrMobius> hmm, so if you dynamically recompile self modifying code in your emu, do you just keep a flag for each byte of memory and set it when write anything to memory? seems like a performance killer but cant think of how else to do it
[21:51:16] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 264 seconds)
[21:51:17] *** Parts: KillerWasp (KillerWasp@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[21:51:24] <MrMobius> and then check the flag on jump and recompile if necessary
[21:52:19] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[21:53:07] *** Akuli2 is now known as Akuli
[21:53:26] <nomagno> My ISA is super, extremely, insanely RISCy
[21:53:43] *** Joins: newpy (~newpy@2601:280:4381:1390:8d8d:7e2a:beea:18db)
[21:54:01] <nomagno> 12 instructions. Which means compiling your average C program to it would probably take a lot of RAM
[21:56:17] <user51> GeDaMo: okay, let me rubber duck it: we add two 8-bit values, store the result in a 16-bit variable, then check the 9th bit of the result for carry. ok so far?
[21:57:11] <GeDaMo> Yes
[21:57:28] <GeDaMo> Well, Ideally, you would convert the 8 bit values to 16 bit before the addition
[21:58:21] <nomagno> In C, you can check for unsigned overflow because it just wraps around
[21:58:32] <nomagno> Don't know what language you're coding this in though
[21:58:57] <nomagno> (It's not 'overflow', it is actually defined behaviour)
[21:59:08] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[22:00:11] <GeDaMo> user51: https://ideone.com/cGafHI
[22:00:13] *** Joins: Teckla (~Teckla@user/teckla)
[22:00:14] <bayaz> Title: Ideone.com 
[22:01:01] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[22:01:12] *** Joins: Twipply (~Twipply@user/twipply)
[22:02:09] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[22:02:55] <nomagno> You can also have result be a uint8_t and check `if ((result < b) || (result < a))`
[22:03:04] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[22:03:22] <MrMobius> you can also do it in assembly if your host architecture lets you use 8 bit registers
[22:04:08] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[22:04:50] *** Joins: arahael (~arahael@27-32-144-20.tpgi.com.au)
[22:05:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:07:21] *** Joins: molten (~molt@178-222-245-206.static.isp.telekom.rs)
[22:07:47] *** Quits: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c) (Quit: leaving)
[22:07:49] *** Quits: _kimchi (~kimchi@87.247.123.112) (Quit: Leaving)
[22:11:02] *** Quits: lavos (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 252 seconds)
[22:11:06] <user51> GeDaMo: thanks, do you have some cement handy? i need to fill some knowledge gaps
[22:11:40] <user51> i added two 255s manually, then compared with 510 in binary, then it made sense
[22:12:29] <GeDaMo> :P
[22:12:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:13:02] <GeDaMo> (I also double checked the result in binary :P )
[22:13:35] <user51> https://ideone.com/2VJ9yE
[22:13:38] <bayaz> Title: Ideone.com 
[22:13:46] <nomagno> I'm not sure binary addition is different from decimal addition.
[22:14:05] <nomagno> Actually, its exactly the same thing
[22:14:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:14:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:15:10] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of quantum tunnelers at https://indiedevs.net/)
[22:15:31] <user51> what i was stuck on was overflow.
[22:16:01] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:16:10] <user51> i'm not sure if i'm getting rusty or if i didn't study or the details.. :|
[22:16:13] <GeDaMo> https://en.wikipedia.org/wiki/Overflow_flag
[22:16:14] <bayaz> Title: Overflow flag - Wikipedia 
[22:16:30] <nomagno> Well overflow is just what happens when the carry has no space to go in
[22:16:35] *** Joins: tomtomgps (~tom@2a01:cb1c:56f:a200:25ed:a2da:a455:9ad7)
[22:16:53] <tomtomgps> Hi, is ayone familair with complexity theory ?
[22:17:08] <tomtomgps>  I want to show that given  a problem A  CO-NP complete, if A is in NP then CO-NP = NP
[22:17:10] *** Joins: getynge (~getynge@2601:702:80:2fc0::c4bf)
[22:17:22] <nomagno> For signed, overflow is tricky. For unsigned, dead simple
[22:18:17] <getynge> I just spent three hours debugging why a task inside a program was never run, and I just found out it wasn't running because there are two different places i needed to initialize it but only did so in one place.
[22:18:31] <getynge> Sometimes my job puts me in my place when it comes to my own intelligence
[22:21:07] *** Joins: nkrth (~nkrth@103.210.42.179)
[22:21:22] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:22:07] <nomagno> Portable debugging == printf()
[22:22:20] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[22:22:24] <nomagno> Or whatever most-basic IO function your language has
[22:22:25] <user51> does the calculation look right? https://ideone.com/2VJ9yE
[22:22:28] <bayaz> Title: Ideone.com 
[22:22:35] <user51> nomagno: nothing wrong with echo :)
[22:22:53] *** Joins: justache (~justache@user/justache)
[22:23:38] <nomagno> user51: I was clearly referring to C, dammit!
[22:24:00] <user51> #define echo printf // :P
[22:25:08] <nomagno> user51: that looks like proper addition, yes
[22:25:11] <teut>   whats the way to solve the ques?  https://bpa.st/Y3XQ
[22:25:12] <bayaz> Title: View paste Y3XQ 
[22:25:31] <GeDaMo> teut: what are you trying to solve?
[22:26:00] <teut> they ask this in interviews so I m trying to understand how to predict the output
[22:26:06] <nomagno> The quest, clearly
[22:26:17] <teut> **question**
[22:26:41] *** Joins: nulleip (~luiz@user/nulleip)
[22:27:05] <nkrth> what does fork do?
[22:27:26] <GeDaMo> Duplicates the process
[22:28:00] <GeDaMo> fork returns the child PID which is read as true or it returns false
[22:28:14] <teut> and you said next instruction above, so in the parent fork returns 1 , so the or part and the second part dont get executed
[22:28:34] <teut> but in the child, there next instruction is unclear
[22:28:53] <GeDaMo> If the first fork returns true, the logical OR is short circuited and the body runs which calls fork again; both of those forks print 1
[22:29:02] <teut> yes
[22:29:06] *** Quits: plantman (~plantman@2601:405:4680:1b0::2) (Ping timeout: 245 seconds)
[22:29:17] <nomagno> So, theoretically, this program will run undefinitely and each iteration will only stop after either both forks fail or one succeeds and the other fails
[22:29:18] <GeDaMo> if the first fork returns false, it moves to the second clause of the OR and forks again
[22:29:18] <teut> and now what about the spawned chils
[22:29:19] <nomagno> Or something
[22:29:24] <nomagno> Weird recursive behaviour
[22:29:26] *** Joins: kron (~weechat@user/qaph)
[22:29:28] *** Quits: austincheney (~austinche@104-189-235-24.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 256 seconds)
[22:29:39] <GeDaMo> If that fork returns false then then body does not run, and 1 gets printed out
[22:29:52] <teut> its the main process why it will return 0?
[22:30:01] *** Quits: nkrth (~nkrth@103.210.42.179) (Quit: Client closed)
[22:30:18] <GeDaMo> If the second clause is true then the body runs creating another fork and both print 1
[22:30:29] <teut> the parent is lucid
[22:30:35] <GeDaMo> fork returns 0 in the child process
[22:30:39] <teut> the child is complicated
[22:31:16] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:31:16] <teut> so inside the child spawned from first fork, whats the "next instruction"?
[22:31:42] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[22:31:59] <GeDaMo> That call to fork would return 0 so it moves to the second clause of the logical OR
[22:32:02] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[22:32:32] *** Quits: rsx (~dummy@ppp-188-174-152-19.dynamic.mnet-online.de) (Quit: rsx)
[22:32:36] <teut> the if statement is already used
[22:32:48] <teut> so why would it be a part of child process?
[22:32:50] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[22:32:52] <GeDaMo> It isn't complete
[22:33:03] <teut> so you start again?
[22:33:13] <GeDaMo> The if condition is not complete after the first fork
[22:33:31] <teut> if is a JUMP NEQ  instruction
[22:33:38] <teut> something like that
[22:33:56] *** Joins: austincheney (~austinche@104-189-235-24.lightspeed.rcsntx.sbcglobal.net)
[22:34:19] <teut> ya that part does make it confusing
[22:34:44] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:35:15] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[22:35:16] <teut> https://stackoverflow.com/questions/39594176/how-fork-will-work-here oh I got something
[22:35:17] <bayaz> Title: How fork() will work here? 
[22:35:29] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[22:36:52] *** Joins: federico_it (~textual@151.38.159.220)
[22:37:51] *** Quits: federico_it (~textual@151.38.159.220) (Read error: Connection reset by peer)
[22:39:30] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[22:40:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:40:15] *** Joins: nkrth (~nkrth@103.210.42.179)
[22:41:20] *** Joins: federico_it (~textual@5.170.212.50)
[22:44:22] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[22:45:08] *** Quits: Haxxa (~Haxxa@202-63-76-96.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:09] *** Joins: mei (~mei@user/mei)
[22:47:18] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:49:24] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[22:50:33] *** Quits: nkrth (~nkrth@103.210.42.179) (Quit: Client closed)
[22:51:14] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[22:51:37] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:51:52] <lf94> spoon()
[22:51:56] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[22:52:49] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[22:52:49] <GeDaMo> Ah, you've played knifey - spoony before :P
[22:53:12] <lf94> knifey in the gut but spoony in the eye
[22:53:16] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 245 seconds)
[22:54:11] *** Quits: rickybobby (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybobby)
[22:54:21] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[23:00:18] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[23:00:26] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[23:02:21] <pyzozord> God damnit. i just got clrs few months ago. of course they just released fourth version, or course
[23:02:38] <pyzozord> s/or/of
[23:03:40] *** southey is now known as foxtrot
[23:04:10] *** Quits: Elzington (~Elzington@static-68-235-44-76.cust.tzulo.com) (Quit: Leaving)
[23:04:47] *** Joins: kish` (~sid742412@user/aqua)
[23:04:49] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[23:08:46] *** Joins: en7ropy (~en7ropy@c-73-60-111-180.hsd1.ma.comcast.net)
[23:14:21] <teut>     if (fork() || fork())      so   in the child generated from first fork   it would  kind of see the  if(fork())  , correct?
[23:14:42] <teut> instead of if(fork() || fork())
[23:14:50] *** Quits: inky (~inky@37.252.90.88) (Ping timeout: 252 seconds)
[23:15:52] *** Quits: password2 (~password8@user/password2) (Ping timeout: 264 seconds)
[23:16:40] *** Joins: sunarch (uid526836@user/sunarch)
[23:17:01] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 256 seconds)
[23:17:10] <mawk> let me see teut 
[23:17:20] <teut> hi mawk
[23:17:22] <mawk> hi
[23:17:25] <mawk> fork() returns 0 when you're in the child
[23:17:40] <mawk> so fork() || fork() will execute the second fork in the child
[23:17:53] <mawk> and the `if' condition will be true in the grandchild
[23:17:54] <teut> ok so the child doesnt see the first fork
[23:18:04] <mawk> no sorry
[23:18:11] <mawk> the `if' condition will be true in the child
[23:18:19] <mawk> which is incorrect, right?
[23:18:20] <edgar-rft> why is there no knife() and spoon() ?
[23:18:40] <mawk> you want to make a grandchildren to daemonize or something teut is that right?
[23:18:58] *** Joins: probableUser (~probableU@2a02:8388:1a08:4680:1def:c32f:7090:13ee)
[23:18:58] <teut> no
[23:19:01] <mawk> so you do if (!(fork() || fork())) { /* in the grandchild */ }
[23:19:05] <teut> I dont even use linux
[23:19:08] <mawk> ??
[23:19:08] <pyzozord> i think it makes more sense to return 1 in the child, then if(fork()) reads more natural
[23:19:14] <teut> i m windows guy
[23:19:15] <mawk> why did you write that code then?
[23:19:20] <teut> CreateProcess
[23:19:27] <teut> for interviews
[23:19:29] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:19:32] <mawk> well
[23:19:33] <GeDaMo> edgar-rft: kill() is knife() :P
[23:19:42] <mawk> we don't really care what the code is for, you want to understand it right?
[23:19:49] <mawk> so, as I said, it's incorrect/useless
[23:19:49] <teut> yes
[23:19:51] <jelly> what about cake()
[23:19:54] <phogg> teut: I think it's better to say "I am not a Unix guy, I would have to do some research"
[23:19:54] <mawk> you spawn a grandchild but you lose it
[23:20:02] <mawk> what's the intention of the code?
[23:20:05] <teut> right, fork is unix
[23:20:08] <mawk> you can negate the condition to be in the grandchild
[23:20:24] <teut> ya I read something for sure phogg
[23:20:32] <jelly> not even if(fork() && fork()) { ... seems idiomatic 
[23:20:39] <teut> but this && or || usage this I wont get
[23:20:42] *** Joins: sbodin (~Android@185.12.224.209)
[23:20:43] <mawk> the condition needs to be negated jelly 
[23:20:55] <phogg> spoon() sounds like it should be like clone()
[23:20:58] <mawk> if (!fork() && !fork()) { /* in the grandchild */ }
[23:21:11] <mawk> what don't you get about it teut ? it's simple boolean logic
[23:21:15] <mawk> && means AND and || means OR
[23:21:28] <probableUser> looks like de morgans laws?!
[23:21:37] <mawk> you evaluate the truth value of each name, left to right, and you compound them using the && and || and ! operators
[23:21:42] <teut> i just want to confirm if the first spawned child  gets the next
[23:21:48] <mawk> the next what?
[23:21:50] <teut> instruction  as  if(fork())
[23:21:57] <mawk> I don't get it
[23:22:04] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[23:22:08] <mawk> if (fork()) is weird in any case
[23:22:11] <mawk> you need to save the PID
[23:22:18] <phogg> fork() returns true in the original process and false in the new child process, so then the second fork() is evaluated in the child, returns true in that process, and then false in *its* child process.
[23:22:19] <mawk> to wait() on the child for its death
[23:22:27] <probableUser> in c# if you evaluate a logical and &&, then if the first is false, the second is not evaluated
[23:22:27] <InPhase> mawk: It literally does what it says on the label, it forks the process into two identical processes except for the return value.
[23:22:48] <phogg> probableUser: that's true in essentially all languages in the C family, and many outside it
[23:22:51] <InPhase> I mean, teut
[23:22:52] <mawk> yes InPhase I get the fork part, what bothers me is the if() around it
[23:22:59] <InPhase> Or mawk.  :)
[23:23:00] <mawk> the if() will be evaluated in the first child, and not the grandchild
[23:23:06] <teut> they said above that fork executes from next instruction
[23:23:14] *** Joins: ixil (~ixil@82.197.178.137)
[23:23:18] <GeDaMo> https://en.wikipedia.org/wiki/Short-circuit_evaluation
[23:23:18] <bayaz> Title: Short-circuit evaluation - Wikipedia 
[23:23:21] <teut> so the first fork is not seen by the child process
[23:23:24] <mawk> ah is that true?
[23:23:25] <InPhase> teut: For fork() && fork(), && is the next thing.
[23:23:30] <mawk> ah
[23:23:32] <mawk> yes I thought so
[23:23:32] <teut> I know shortcircuit
[23:23:37] <d3x0r> the child process returns after the fork
[23:23:40] <mawk> for a moment I thought I'd learn something new
[23:23:48] <d3x0r> so it sort of seees the return side of fork but not for
[23:23:53] <mawk> so it's making a child and then a grandchild
[23:24:00] <mawk> in fork() || fork()
[23:24:20] <phogg> the question I have is under what circumstance you would ever want to do this
[23:24:28] <mawk> for daemon phogg 
[23:24:34] <InPhase> phogg: You often don't need the child pid.
[23:24:41] <mawk> you make a grandchild, seppuku to the child, and the grandchild gets reparented to PID 1
[23:24:42] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Quit:  )
[23:24:49] <phogg> InPhase: I guess maybe not, but that seems uncommon
[23:24:50] <mawk> yes that's true InPhase but you often want to know if fork() failed
[23:24:56] <mawk> so in any case I wouldn't write the code like that
[23:25:10] <mawk> need to check the return value if it's < 0 or not, then check errno
[23:25:18] <pyzozord> the top level program forks twice and has two children. those children have no children of their own
[23:25:26] <phogg> since you can't tell the difference between success and failure it seems like there are few scenarios where you can "fire and forget" the child process
[23:25:31] <mawk> pyzozord: it's fork() || fork(), not fork() && fork()
[23:25:39] <mawk> why can't you tell phogg ?
[23:25:42] <jelly> phogg, that's exactly opposite.  fork() returns 0 (true) in child, and pid of child or -1 in parent.
[23:25:44] <mawk> you can perfectly tell, fork() returns < 0
[23:25:45] <phogg> mawk: -1 is as true as a pid
[23:25:55] <mawk> pid_t is signed, no?
[23:25:57] <InPhase> mawk: Well sure.  Although fork pretty much always succeeds unless the system is in a badly broken state like someone just ran a fork bomb.
[23:25:59] <mawk> anyway you can always tell
[23:26:04] <mawk> you set errno to 0, then check errno again
[23:26:08] <mawk> if the return value bothers you
[23:26:11] <phogg> I suppose that's true
[23:26:15] <jelly> wait no, is 0 true in C? :-)
[23:26:20] <pyzozord> oh right it's an or, second condition will not be evaluated because the first one is true
[23:26:22] <mawk> sometimes yes jelly 
[23:26:36] <teut> if(a && b)    is same as  if(a)  {if(b)  ... }
[23:26:37] <pyzozord> in that case it's parent, child and grandchild
[23:27:18] <teut> if (a || b)   is   if(a)   { ...}        if (b){...}
[23:27:24] <mawk> InPhase: or funny scheduler business, or thread limit is reached as you said, or you're under a debugger and you can't fork right now, or out of memory, or PID 1 died
[23:27:31] <pyzozord> and both top level parent and the first child go inside the if. the grandchild doesn't go inside the if
[23:27:38] <mawk> not exactly no teut 
[23:27:40] <teut> so probably I should write equivalent code for this
[23:27:44] <teut> why not?
[23:27:52] <mawk> in if (a||b), b is not evaluated when a is true
[23:27:52] <jelly> teut, you forgot an else before if (b)
[23:27:56] <mawk> it short-circuits
[23:27:59] <teut> oh ok the shortcircuiting
[23:28:06] <InPhase> mawk: The list of errors for fork is pretty small.  On a standard setup it basically won't fail unless you are out of pids because of a user limit or because you have 4194304 processes running already.
[23:28:16] <mawk> yeah
[23:28:25] <mawk> well a user limit isn't that uncommon now, with sandboxes and containers and all that
[23:28:30] <mawk> it's a single ulimit call away
[23:28:31] <InPhase> mawk: A memory error typically just causes the program to be killed by the OOM killer.
[23:28:32] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[23:28:37] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[23:28:41] <mawk> the offender program
[23:28:44] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[23:28:49] <pyzozord> is that how many pics there are? it doesn't look like a power od two
[23:28:49] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[23:28:57] *** Joins: Raziel (~Raziel@user/raziel)
[23:29:01] <InPhase> mawk: Yes, so either the program is the offender or "not my problem".  :)
[23:29:02] <pyzozord> pics=pids
[23:29:04] *** Joins: ixil (~ixil@82.197.178.137)
[23:29:07] <teut> mawk: so fork() || fork() will execute the second fork in the child
[23:29:07] <mawk> yeah
[23:29:12] <mawk> yes teut 
[23:29:21] <InPhase> mawk: So I agree, one should check the error.  Those are just the reasons someone might skip it.  That and laziness.
[23:29:32] <teut> I understood this point just now
[23:29:34] *** Joins: jenova (~jenova@user/quetzl)
[23:29:34] <mawk> I don't think expanding the if conditions like that gives much intuition teut by the way
[23:29:41] <mawk> just try to understand the boolean logic
[23:29:46] <mawk> there are few rules
[23:29:53] <teut> so the child sees      if(0 || fork())
[23:29:56] <teut> like this
[23:29:57] <mawk> for instance !(A && B) == !A || !B
[23:30:06] <mawk> it can be very helpful to negate conditions like this
[23:30:14] <mawk> or A && (B || C) == A && B || A && C
[23:30:18] <mawk> see de morgan laws
[23:30:29] <pyzozord> this is kind of cool
[23:30:34] <teut> no no , so here's whats confusing me
[23:30:38] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:30:40] <mawk> also A => B, "A implies B", is tested as !A || B
[23:30:45] <pyzozord> puzzles are cool as long as they are not brutal
[23:30:48] <mawk> and !B => !A is tested as A && !B
[23:31:04] <mawk> no no what teut 
[23:31:07] *** Quits: morgabra (sid500580@user/morgabra) (Read error: Connection reset by peer)
[23:31:07] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Read error: Connection reset by peer)
[23:31:09] *** Quits: hbjy (~hbjy@rockylinux/web/hbjy) (Quit: ZNC 1.8.2 - https://znc.in)
[23:31:10] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (Read error: Connection reset by peer)
[23:31:10] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Read error: Connection reset by peer)
[23:31:16] <teut> when you spawn a process from the next instruction the code starts
[23:31:16] *** Joins: morgabra (sid500580@user/morgabra)
[23:31:17] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:31:22] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[23:31:29] *** Joins: hbjy (~hbjy@rockylinux/web/hbjy)
[23:31:32] <teut> the executed code is not a part of the child
[23:31:35] <mawk> in stuff like intuitionist logic where the law of excluded middle doesn't hold anymore you have more operators pyzozord 
[23:31:37] <mawk> it's pretty cool
[23:31:41] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[23:31:53] <InPhase> Now if you want to be really cool:  if ((fork(), fork(), fork(), fork())) is true for 8 processes and false for 8 processes.
[23:32:09] <mawk> you have a kind of logic where variables are destroyed when you use them; it models computers pretty well
[23:32:16] <pyzozord> I've heard the ter intuitionistic logic recently, I'm not sure what is it though
[23:32:20] <mawk> lol nice InPhase 
[23:32:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[23:32:27] <mawk> pyzozord: logic without the law of excluded middle
[23:32:34] *** Quits: jenova (~jenova@user/quetzl) (Client Quit)
[23:32:34] <mawk> propositions can be true, false, or neither of those
[23:32:42] <[itchyjunk]> eating is public is probably one of the hardest thing ever
[23:32:48] <pyzozord> i was trying to understand how many kinds of logic are there and could find a nice answer
[23:32:56] <teut> https://ibb.co/1qxsvwB
[23:32:56] <mawk> and some other thing are probably excluded as well depending on the construction
[23:32:56] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: fichid (~fichid@2a00:d880:3:2::2cf0:1238) (Ping timeout: 265 seconds)
[23:32:57] <bayaz> Title: image 
[23:33:06] <teut> so here is the assembly instructions
[23:33:09] <mawk> you can share a link you know te
[23:33:11] <mawk> teut: 
[23:33:22] <mawk> we know it's godbolt, why share a screenshot
[23:33:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: geeknix (~pi@2001:e68:5432:abd2:b9e4:e37d:3d09:4004) (Ping timeout: 265 seconds)
[23:33:29] <teut> https://godbolt.org/z/9bqjP4q8n
[23:33:29] *** Joins: Auron (~Auron956@user/auron)
[23:33:29] <bayaz> Title: Compiler Explorer - C (x86-64 gcc 11.2) 
[23:33:32] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Ping timeout: 252 seconds)
[23:33:40] <mawk> ah nice
[23:33:43] <teut> sorry I forgot I could share the godbolt
[23:33:54] *** Quits: tomathy (~jenova@user/quetzl) (Ping timeout: 265 seconds)
[23:34:02] <mawk> maybe do x86 assembly teut it's much easier to read
[23:34:05] <teut> so the child starts its instructions from  line 5 in assembly
[23:34:08] <mawk> and maybe disabe PIC/PIE code so it's even easier to read
[23:34:22] <[itchyjunk]> mawk you ever had to eat in public?
[23:34:41] <mawk> you add -m32 to the flags for 32 bits
[23:34:48] <mawk> yes [itchyjunk] why?
[23:34:51] <teut> ya I learned very few things , I will need to learn assembly more
[23:34:53] <mawk> I just don't look at people and that's it
[23:35:01] <[itchyjunk]> what if people look at you?
[23:35:11] <InPhase> uint8_t ID = (!fork() << 3) + (!fork() << 2) + (!fork() << 1) + !fork();  This assigns each process a unique ID from 0 to 15, assuming no fork failures.
[23:36:17] <teut> i will definitely spit this on the interviewer if he messes with me
[23:36:51] <[itchyjunk]> don't spit on the interviewer
[23:36:52] *** Quits: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3) (Remote host closed the connection)
[23:36:56] *** Joins: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com)
[23:37:07] <VincentValentine> i hate math logic so much i can't even stand the look of it
[23:37:07] <teut> its online , no worries
[23:37:09] *** Joins: terminalpusher (~terminalp@2a01:586:2941:1:e472:132f:6ad:d0f3)
[23:37:17] *** Joins: fichid (~fichid@2a00:d880:3:2::2cf0:1238)
[23:37:21] <[itchyjunk]> how about sitting to look at it?
[23:37:33] <[itchyjunk]> logic is vast and hard topic
[23:37:40] <[itchyjunk]> I should learn some of the basics some day
[23:38:12] <VincentValentine> i loved it at schoo, but university ruined that relationship
[23:38:20] <pyzozord> about food. i just realized that me from  this morning has bought me some materials for sandwiches. Thank you so much past me.
[23:38:25] <mawk> I just don't look at people and that's it [itchyjunk] 
[23:38:30] <mawk> teut: https://godbolt.org/z/PfGfoT67n
[23:38:31] <bayaz> Title: Compiler Explorer - C (x86-64 gcc 11.2) 
[23:38:34] <mawk> use these flags for 32 bits
[23:38:43] <mawk> the asm is easier to read
[23:38:45] <[itchyjunk]> mawk I see them from the corner of my eyes
[23:38:57] <mawk> look at the ground
[23:39:07] <[itchyjunk]> I am looking at the screen
[23:39:12] <mawk> stop
[23:39:18] <[itchyjunk]> done eating anyways
[23:39:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:39:21] <mawk> you're typing on your keyboard with your greasy fingers
[23:39:21] <[itchyjunk]> I huffed it
[23:39:27] <[itchyjunk]> yes
[23:39:31] <[itchyjunk]> not my keyboard
[23:39:33] *** Joins: inky (~inky@46.36.112.226)
[23:39:33] <mawk> and your keyboard is a whole ecosystem of infectious filth 
[23:39:35] <mawk> why are you doing this
[23:39:36] <teut> what changed in the godbolt mawk except for the flags?
[23:39:43] <mawk> wow it's not your keyboard that's even worse
[23:39:46] <[itchyjunk]> not my keyboard
[23:39:55] <[itchyjunk]> oh I have a banana too
[23:39:55] <mawk> nothing teut ; except I included unistd.h
[23:39:56] <[itchyjunk]> nice
[23:40:01] <mawk> to get rid of the warning
[23:40:14] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:40:40] <teut> ya but what information did I get better than before when I posted it?
[23:40:48] <teut> I couldnt observe it
[23:41:17] <teut> oh there's  jeq  and jneq
[23:41:24] <pyzozord> [itchyjunk] eat in public is normal, but have you tried going to a restaurant alone
[23:41:46] <[itchyjunk]> I come from a country where eating is class might get you suspended
[23:41:53] <[itchyjunk]> people here bring mc Donalds to class
[23:41:53] <pyzozord> that stuff is only for people with iron gut
[23:41:58] <[itchyjunk]> and eat crunchy chips
[23:42:02] <[itchyjunk]> anything goes
[23:42:13] <[itchyjunk]> I saw someone cook some ramen and eat
[23:42:28] <[itchyjunk]> I see people eating alone in restaurants all the time around here
[23:42:36] <[itchyjunk]> no food related taboo here It seems
[23:42:53] <pyzozord> eating alone in mcdonalds is easy. Go to a sushi restaurant or a stake house alone
[23:43:21] <nomagno> Eating in class is completely unrespectful here, but eating alone not so much
[23:43:40] <teut> same here nomagno
[23:43:56] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[23:43:59] <teut> eating in university is fine but
[23:44:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Client closed)
[23:44:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[23:44:21] <SuperNintendoSUX> eating sushi alone is great. just you and the sushiman creating very nice recipes
[23:44:24] <[itchyjunk]> shit froze, had to restart
[23:44:27] <teut> depends on the proffessor
[23:44:27] <VincentValentine> i once ate in class and it was disaster everyone looked at me like a did a crime and deserve xapital punishment
[23:44:34] <pyzozord> well i love red the bar of the conversation, sorry about that
[23:44:39] <[itchyjunk]> I've never seen a prof complain here
[23:44:39] *** Quits: armin (~armin@unix.porn) (Quit: leaving)
[23:44:43] <pyzozord> lowered*
[23:44:55] <mawk> teut: the assembly is easier to read
[23:44:58] <teut> some professors are cool with it others aret
[23:44:58] <mawk> and it's 32 bits
[23:44:59] <[itchyjunk]> I think it's a cultural thing. eating is very solo activity so people are comfy doing it
[23:45:01] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[23:45:01] *** Joins: jinsun_ (~jinsun@user/jinsun)
[23:45:04] <mawk> that's the difference
[23:45:07] <[itchyjunk]> I've never had a prof say no food
[23:45:24] <[itchyjunk]> back in homeland, it would be the shooting squad
[23:45:27] *** Joins: geeknix (~pi@2001:e68:5432:abd2:b9e4:e37d:3d09:4004)
[23:45:28] *** Joins: voices- (~voices_@84.238.197.28)
[23:45:36] <[itchyjunk]> you sit there and starve like everyone else
[23:45:45] <mawk> and you don't have all the lea and push and stuff; also it will show for more complex programs teut 
[23:45:51] <mawk> if you use these flags the assembly will be easier in the future
[23:45:59] <teut> mawk I can see difference in instructions but I dont understand what you are talking about
[23:46:03] <mawk> ??
[23:46:07] <mawk> what do you mean
[23:46:15] <mawk> I'm just saying using these flags will make a simpler assembly
[23:46:18] <teut> I dont know assembly probably
[23:46:24] <mawk> yes but that's not a problem
[23:46:27] <teut> oh ok got it
[23:46:33] <mawk> the problem is that you don't understand what I'm saying
[23:46:33] <mawk> ah
[23:47:00] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[23:47:14] <teut> ya definitely with those flags something looks better with the assembly
[23:47:14] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[23:47:25] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[23:48:01] *** Joins: buzzard (~quassel@37.120.199.237)
[23:48:38] *** Quits: jaysicks (~jaysicks@94-21-138-235.pool.digikabel.hu) (Remote host closed the connection)
[23:49:15] *** Joins: jaysicks (~jaysicks@94-21-138-235.pool.digikabel.hu)
[23:49:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[23:49:52] *** Joins: aradesh1 (~aradesh@2a02:c7c:120a:b200:d586:113:c744:5fea)
[23:49:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[23:51:39] <pyzozord> so looks like there is about three intermediate representations in GCC: Generic, Gimple and RTL. RTL is the byte code. The first two are some sort of tree representations
[23:52:29] <pyzozord> I'm not sure but i think it might make sense to convert wasm directly to RTL
[23:52:42] <pyzozord> I'm thinking about writing a wasm frontend in gcc
[23:52:47] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[23:52:58] <pyzozord> if noone else did it yet, I must...
[23:52:58] *** Quits: voices- (~voices_@84.238.197.28) (Remote host closed the connection)
[23:53:30] <pyzozord> that shouldn't be too hard should it?
[23:53:40] <deniska> pyzozord: y tho? Not to dunk, but that's not too different from writing, dunno, MIPS frontend for gcc :)
[23:53:53] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 252 seconds)
[23:53:54] <deniska> kinda backwards of a task
[23:54:08] <Twix> isn't there a wasm frontend for llvm?
[23:54:08] <pyzozord> hmm? why?
[23:54:24] *** Joins: voices- (~voices_@84.238.197.28)
[23:54:29] <deniska> pyzozord: wasm is a part which goes into the backend, not into the frontend
[23:54:41] <pyzozord> deniska i just want to write wasm and get native object file
[23:54:42] *** Joins: superdupond (~Kev@2a01cb0400149f00f4d81e3213220661.ipv6.abo.wanadoo.fr)
[23:54:48] <mawk> why would you want that pyzozord 
[23:54:53] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:54:59] <mawk> if it's native object file it's not wasm anynmore
[23:55:05] <mawk> wasm is an intermediary
[23:55:13] <mawk> just write llvm IR directly if you want
[23:55:21] <mawk> or write regular C like everyone
[23:55:35] <pyzozord> i mean maybe i confused something
[23:55:48] <pyzozord> but don't you guys see the tremendous potential?
[23:56:02] <deniska> I mean, nothing technically impossible, just very weird thing to do
[23:56:19] <deniska> but it's like asking gcc to recompile x86 to arm
[23:56:38] *** Joins: zippit (~chirag@user/chir4gm)
[23:57:03] <Twix> deniska, x86 is quite machine specific
[23:57:10] <Twix> i would wasm compare to java
[23:57:21] <mawk> to LLVM IR
[23:57:26] <mawk> java is high level
[23:57:27] *** Quits: rito_ (~rito_gh@45.112.243.47) (Quit: Leaving)
[23:57:27] <Twix> you have a bytecode which you want to execute on multible platforms
[23:57:35] <Twix> *java bytecode
[23:57:38] <mawk> a
[23:57:40] *** aradesh1 is now known as aradesh
[23:57:42] <mawk> I don't see the tremendous potential no pyzozord lol
[23:57:46] <deniska> hey, I want to execute x86 on *every* machine available :)
[23:58:11] <pyzozord> you can can compile to native binary anything that can compile to wasm
[23:58:15] <zippit> Hi everyone, I am a high schooler (aspiring) engineer. So glad to be here
[23:58:27] <zippit> *high school
[23:58:29] <mawk> pyzozord: yes LLVM IR as well
[23:58:35] <mawk> that's what clang does to target so many target
[23:58:47] <Twix> makes totally sense to have somekind of (ahead of time-)compiler to compile wasm to native code
[23:58:49] <mawk> this tremendous potential has been realized before, by clang
[23:58:51] <pyzozord> you can write stuff in rust, compile to wasm, then import that library in c via this thing
[23:59:04] <Twix> and i think there is a llvm frontend(and also a backend) there
[23:59:06] <mawk> you can also write stuff in rust, compile to LLVM IR
[23:59:12] <Twix> so you should be able to use llvm for this
[23:59:17] <mawk> exact same thing, except that IR is designed for the purpose
[23:59:19] <mawk> and it works very well
[23:59:24] <deniska> but again, I doubt gcc (or clang for that matter) has good enough machinery for that task
[23:59:25] <pyzozord> well yeah but that way you get it for every language that supports wasm
[23:59:26] <mawk> sorry, someone stole your idea pyzozord 
[23:59:30] <pyzozord> it's the lingua franca
[23:59:32] <deniska> or, not exactly good enough, but just suitable
[23:59:39] <mawk> well every language supports LLVM IR, or almost
[23:59:44] <mawk> it's already the lingua franca of clang
[23:59:48] <deniska> wasm is already on the level of llvm or gcc intermediate representations
[23:59:56] <deniska> you are probably better off writing your own compiler :P
[23:59:57] <pyzozord> llvm ir is compiler specific, wasm is not
[23:59:59] <mawk> just look at how many targets LLVM IR has, and how many languages have a llvm backend
