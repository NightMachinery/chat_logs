[00:11:41] <FromDiscord> <Varriount> In reply to @RattleyCooper "I compiled nim 1.4.8": What message do you get?
[00:15:16] <FromDiscord> <RattleyCooper> I will have to check tonight.  I really should have written it down or screencapped it.  I was refraining from posting the error until I could confirm there was actually an issue.
[00:15:36] <FromDiscord> <RattleyCooper> I believe it was an OSError though.  I can check after work and update.
[01:33:33] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:46:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:75d9:8ee9:c723:ca70) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:55:21] *** Quits: ozzz (~oz@46.49.41.80) (Ping timeout: 248 seconds)
[01:57:40] <FromDiscord> <brainproxy> sent a code paste, see https://play.nim-lang.org/#ix=3xud
[01:58:16] <FromDiscord> <brainproxy> I feel I'm hitting an encoding problem, maybe, or maybe I've misunderstood how to defined `hash`
[02:00:53] <FromDiscord> <Yardanico> to properly define `hash` you have to run `hash` on all fields of your character, and all types of the fields of the object should have `hash` defined too
[02:01:00] <FromDiscord> <Yardanico> see https://nim-lang.org/docs/hashes.html
[02:01:09] <FromDiscord> <Yardanico> for an example on defining a hash proc for a custom type
[02:01:34] <FromDiscord> <brainproxy> but if hash for that type is `hash $instance`
[02:01:41] <FromDiscord> <brainproxy> then should string hashes get compared?
[02:01:51] <FromDiscord> <brainproxy> (edit) "should" => "shouldn't"
[02:10:28] <FromDiscord> <Yardanico> In reply to @brainproxy "then shouldn't string hashes": yes, but IMO it's not good to rely on this
[02:27:34] <FromDiscord> <konsumlamm> In reply to @brainproxy "I have an `OrderedSet[MyType]`.": `hash` should return an `int`, not a `string`â†µare you sure that your `hash` implementation is consistent with `==`?
[02:32:30] <FromDiscord> <Yardanico> oh lol, didn't see that
[02:43:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:45:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:46:17] *** Quits: max22- (~maxime@2a01cb08833598003c11741276acc8d8.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:52:17] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xuo
[02:58:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[03:00:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:05:34] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:05:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[03:08:00] *** Gustavo6046_ is now known as Gustavo6046
[03:09:19] <FromDiscord> <RattleyCooper> In reply to @trenta3 "Is there a way": IIRC you can do this in a template with `unpackVarargs` from the `macros` library.  You can also use a tuple
[03:11:26] <FromDiscord> <trenta3> In reply to @RattleyCooper "IIRC you can do": I did find `unpackVarargs` by searching in the documentation. What I don't understand is how to implement the part in the line `args += (element,)`, where I need to update a tuple by adding an element at the end of it. This is a part that I cannot realize using unpackVarargs or other methods that I know of.
[03:16:07] *** Quits: byanka__ (~byanka@78.137.43.40) (Ping timeout: 240 seconds)
[03:25:23] <FromDiscord> <RattleyCooper> In reply to @trenta3 "I did find `unpackVarargs`": So, it looks like the decorator parses stuff and then runs some kind of function using the aggregated outputs from the parsing functions.  It's kinda difficult to give you direction though because depending on what you're parsing, and the variability of the types used as inputs to that last function call, it's gonna be a different answer
[03:26:28] <FromDiscord> <RattleyCooper> Bc you can definitely do what you're trying to accomplish, but depending on types and that kind of stuff it'll likely just end up working different than python.
[03:31:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[03:31:25] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:32:20] <FromDiscord> <trenta3> In reply to @RattleyCooper "So, it looks like": Yes the types of the parsed elements are widely different, and it doesn't really matter to me if it ends up working differently from python.â†µI would like to have something that works and performs more or less such kind of recursive usage of varargs.
[03:32:57] <FromDiscord> <trenta3> Searching on the internet I couldn't find any examples and I feel it is too early for me to start writing macros
[03:33:25] *** Gustavo6046_ is now known as Gustavo6046
[03:36:47] <FromDiscord> <trenta3> If you could just point me to a possible way to archieve it, that would be awesome
[03:37:10] <FromDiscord> <Elegantbeef> Could you give a more elaborate input/output example?
[03:38:46] <FromDiscord> <trenta3> In reply to @Elegantbeef "Could you give a": I'm really just interested in how to handle packing and unpacking of tuples, since this is what I don't know how to archieve. The example was mainly "motivating". I will write a more complete example shortly.
[03:40:00] <FromDiscord> <RattleyCooper> There is no "pythonic" way to pass args using an arbitrary iterable like python's `someFunc(someArgs, someKwargs)`
[03:40:59] <FromDiscord> <RattleyCooper> You can unpack args similar to python: `(arg1, arg2) = someFuncThatReturnsTuple()`
[03:41:10] <FromDiscord> <RattleyCooper> (edit) "args" => "tuples"
[03:41:50] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:42:22] <FromDiscord> <RattleyCooper> It's kind of funny bc I was coming from python a few weeks ago and had the same exact question lol.  Unfortunately it's just not an easy answer due to Nim's strict type system
[03:43:16] <nrds> <06Prestige99> or fortunately :P
[03:44:26] <FromDiscord> <Elegantbeef> Well there is but to a template rattley and it's in devel
[03:44:28] <FromDiscord> <Elegantbeef> `iterable[T]` exists in `devel` \:D
[03:44:35] <FromDiscord> <RattleyCooper> ðŸ˜®
[03:45:06] <FromDiscord> <Elegantbeef> For examples of it in use https://github.com/beef331/truss3d/blob/master/src/truss3D/models.nim#L176-L221
[03:45:07] <FromDiscord> <trenta3> In reply to @RattleyCooper "It's kind of funny": Ouch, that was actually unexpected, since the `varargs[untyped]` seemed to be exactly the kind of way out of the type system that allows you to do it.â†µI see that the implementation of `unpackVarargs` is very short. Maybe I can try to write similar thing to pack and unpack tuples
[03:45:48] <FromDiscord> <RattleyCooper> Lol, same thing I though XD
[03:45:54] <FromDiscord> <Elegantbeef> Well Nim has tuple unpacking
[03:46:29] <FromDiscord> <Elegantbeef> Could also look at https://github.com/technicallyagd/unpack
[03:46:32] <nrds> <12R2D299> 4GitHub: 7"sequence/object unpacking/destructuring for nim"
[03:46:34] <FromDiscord> <Elegantbeef> Alternatively https://hlaaftana.github.io/assigns/assigns.html
[03:48:33] <FromDiscord> <RattleyCooper> In reply to @trenta3 "Ouch, that was actually": You should definitely check out macros when you have a few minutes.  It's kind of confusing at first but it is well worth the time to learn
[03:49:26] <FromDiscord> <trenta3> In reply to @Elegantbeef "Could also look at": Thanks a lot! This seems a really interesting project to look at and I should definitely try to understand the implementation
[03:51:02] <FromDiscord> <trenta3> In reply to @RattleyCooper "You should definitely check": I know it pays. Unfortunately nim macro syntax does seem wizardry to me
[03:51:39] <FromDiscord> <trenta3> Building the AST components manually is no fun
[03:51:48] <FromDiscord> <Elegantbeef> It's simply writing code to write code. Bit confusing at start but once you get to the AST it's fine
[03:51:54] <FromDiscord> <RattleyCooper> In reply to @trenta3 "Building the AST components": You need some `quote do` in your life
[03:52:07] <FromDiscord> <Elegantbeef> Well that's why there are things like genast and quote, use those as much as you can
[03:52:52] <FromDiscord> <Elegantbeef> You can also break the macro into smaller procedures to make it more managable
[03:53:23] <FromDiscord> <RattleyCooper> Looking at actual macros helps too... I didn't get it until I looked at your macro in nettyrpc beef
[03:53:43] <FromDiscord> <RattleyCooper> and started using treerepr/repr etc
[03:53:53] <FromDiscord> <Elegantbeef> Yep if you need a source of macros, i've got more than a couple libraries that use htem
[03:54:22] <FromDiscord> <Elegantbeef> kashae, constructor, nettyrpc, sumtypes(shittiest) ðŸ˜€
[03:55:06] <FromDiscord> <Elegantbeef> You also can ask here i'm more than happy to help
[03:55:10] <FromDiscord> <RattleyCooper> I'm gonna check out kashae and constructor macros next.
[03:56:15] *** Joins: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de)
[03:56:37] <FromDiscord> <Elegantbeef> Kashae i think uses more quote do than nettyrpc did, so should be more understandable, but yea still AST manipulation in there
[03:56:58] <FromDiscord> <trenta3> In reply to @Elegantbeef "Well that's why there": Thanks I'm gonna look at those.
[04:10:37] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:11:43] *** Joins: flynn (~mcbloch@user/flynn)
[04:19:19] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:46:26] <FromDiscord> <Alea> sent a code paste, see https://play.nim-lang.org/#ix=3xuE
[04:48:59] <FromDiscord> <RattleyCooper> Can you escape the quotes? `"\"src/nanovg.c\""`
[04:50:55] <FromDiscord> <Alea> no that seems to cause some other issue https://media.discordapp.net/attachments/371759389889003532/882057322816503848/unknown.png
[04:54:40] *** Joins: watzon1 (~Thunderbi@136.36.149.145)
[04:54:58] <FromDiscord> <RattleyCooper> Escapes and `strformat` don't like to play together
[04:55:14] <FromDiscord> <RattleyCooper> You may need to escape the quotes outside the `fmt`
[04:55:50] <FromDiscord> <RattleyCooper> Beyond that I'm not sure how to do it
[04:58:46] <FromDiscord> <impbox [ftsf]> try using & instead of fmt
[04:58:47] <FromDiscord> <Alea> sent a code paste, see https://play.nim-lang.org/#ix=
[04:59:34] <FromDiscord> <Alea> do I need the c lib installed for this?
[04:59:51] <FromDiscord> <Alea> It kind of seemed like the nim version came with the c version packaged
[05:00:57] <FromDiscord> <impbox [ftsf]> how did you install nim?
[05:01:26] <FromDiscord> <impbox [ftsf]> if you can build with nim you've probably got a c build environment set up
[05:02:26] <FromDiscord> <Alea> sent a code paste, see https://play.nim-lang.org/#ix=3xuF
[05:02:35] <FromDiscord> <Alea> which makes it seem like something on the c side is missing
[05:03:25] <FromDiscord> <impbox [ftsf]> it is, the linker can't find that function
[05:03:49] <FromDiscord> <impbox [ftsf]> could be you're not linking to the library that contains it
[05:04:45] *** Quits: watzon1 (~Thunderbi@136.36.149.145) (Quit: watzon1)
[05:05:05] *** Joins: watzon (~Thunderbi@136.36.149.145)
[05:05:51] <FromDiscord> <Alea> The function seems to be defined in one of the packaged .h files
[05:06:09] <FromDiscord> <Alea> is there something specific I need to compile with to link it?
[05:07:19] <FromDiscord> <impbox [ftsf]> i'm not familiar with that library, are you using nim-nanovg?
[05:07:37] <FromDiscord> <Alea> yeah
[05:09:40] <FromDiscord> <impbox [ftsf]> can you build the demo?
[05:10:44] <FromDiscord> <Alea> installed through nimble, so I haven't got the whole repo cloned
[05:11:12] <FromDiscord> <Alea> but I'll say no because I just copied out a section of the demo to test
[05:11:23] <FromDiscord> <Alea> so if that doesn't work...
[05:12:18] <FromDiscord> <impbox [ftsf]> i'd clone the repo and try running `nimble examples` as suggested and see if that works
[05:12:57] <FromDiscord> <Bren> What is the simplest way to use regex in a conditional?
[05:13:26] <FromDiscord> <impbox [ftsf]> (edit) "i'd clone the repo and try running `nimble examples` as suggested and see if that works ... " 03added "(looks like it's `nimble examplesGL3` now"
[05:14:13] <FromDiscord> <impbox [ftsf]> @bren what is the condition you want to check?
[05:14:46] <FromDiscord> <Elegantbeef> as someone that avoids regex, what's the pattern?
[05:14:48] <FromDiscord> <Elegantbeef> Also which regex
[05:17:11] <FromDiscord> <Bren> sent a code paste, see https://play.nim-lang.org/#ix=3xuJ
[05:17:30] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xuK
[05:18:41] <FromDiscord> <impbox [ftsf]> `if "ABCD1234".match(re"[a-zA-Z0-9]{8}").isSome:`
[05:19:19] <FromDiscord> <Bren> what about false
[05:19:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3xuM
[05:19:28] <FromDiscord> <Elegantbeef> Atleast i think `{8}` is length
[05:19:42] <FromDiscord> <impbox [ftsf]> @bren `if not ...`
[05:19:48] <FromDiscord> <impbox [ftsf]> or `.isNone`
[05:19:55] <FromDiscord> <Bren> cool sorry
[05:20:02] <FromDiscord> <Elegantbeef> `isNone` is the better way
[05:20:24] <FromDiscord> <impbox [ftsf]> or add an else section
[05:20:40] <FromDiscord> <Bren> That is why I asked
[05:20:40] <FromDiscord> <Bren> thank you
[05:21:56] <FromDiscord> <impbox [ftsf]> hmm are static res compiled at compiletime i wonder?
[05:22:08] <FromDiscord> <Elegantbeef> I'm going to go find duct tape so i can prevent myself insulting regex for a bit ðŸ˜€
[05:22:23] <FromDiscord> <Elegantbeef> `re` cannot be used at CT
[05:22:54] <FromDiscord> <Elegantbeef> nim regex is what you'd use for compile time
[05:23:42] <FromDiscord> <impbox [ftsf]> i mean, compiling the re at compile time to use at runtime
[05:24:08] <FromDiscord> <impbox [ftsf]> _doesn't really care since they don't use re much_
[05:24:18] <FromDiscord> <Elegantbeef> !eval import std/nre; const match = re"Hello"
[05:24:22] <NimBot> Compile failed: /playground/nim/lib/impure/nre.nim(280, 25) Error: cannot 'importc' variable at compile time; compile
[05:24:31] <FromDiscord> <impbox [ftsf]> but i imagine it'd be handy if you used regular expressions a lot for say a webserver  or something
[05:45:14] <FromDiscord> <RattleyCooper> Ok, so my Rpi4 version of Nim throws this error when I try to use `netty`.   The conversion of a `uint32` to `int` is invalid for some reason?
[05:45:23] <FromDiscord> <RattleyCooper> `Error: conversion from uint32 to int is invalid`
[05:45:51] <FromDiscord> <Elegantbeef> is the rpi4 64 bit?
[05:45:56] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3xuS
[05:46:28] <FromDiscord> <RattleyCooper> The chip is but I have 32bit os installed bc apparently the official 64bit os isn't really working well
[05:46:48] <FromDiscord> <Elegantbeef> Well then there is your issue uint32.high \> int32.high
[05:47:07] <FromDiscord> <RattleyCooper> Ah, is there a way to update the code so it can work on 32bit and 64bit?
[05:47:30] <FromDiscord> <Elegantbeef> `.int64` instead of `int32`
[05:47:45] *** Joins: neurocyte3 (~neurocyte@212.232.81.2)
[05:47:45] *** Quits: neurocyte3 (~neurocyte@212.232.81.2) (Changing host)
[05:47:45] *** Joins: neurocyte3 (~neurocyte@user/neurocyte)
[05:47:54] <FromDiscord> <RattleyCooper> instead of `uint32` or in place of the `int`?
[05:49:57] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:49:57] *** neurocyte3 is now known as neurocyte
[05:51:53] <FromDiscord> <Elegantbeef> in place of `int`
[05:55:14] <FromDiscord> <RattleyCooper> `reactor.r.rand(uint32.high.int64).uint32` now throws `conversion from int64 to Natural is invalid`
[05:56:53] <FromDiscord> <impbox [ftsf]> use int32 instead of int64
[05:57:17] <FromDiscord> <impbox [ftsf]> does `reactor.r.rand(uint32.high).uint32` work?
[05:57:22] <FromDiscord> <RattleyCooper> It's weird bc that throws the same error
[05:57:24] <FromDiscord> <RattleyCooper> `conversion from uint32 to int32 is invalid`
[05:57:26] <FromDiscord> <RattleyCooper> Let me see
[05:57:30] <FromDiscord> <impbox [ftsf]> sorry yes my mistake
[05:58:10] <FromDiscord> <RattleyCooper> Conversion to Natural is invalid.   wth? lol
[05:58:39] <FromDiscord> <impbox [ftsf]> what's the full error?
[05:58:51] <FromDiscord> <Elegantbeef> natural is `high(int)`
[05:59:05] <FromDiscord> <RattleyCooper> /home/pi/.nimble/pkgs/netty-0.2.0/netty.nim(108, 24) Error: conversion from uint32 to Natural is invalid
[05:59:15] <FromDiscord> <Elegantbeef> do yourself a favour and do `rand(0u32..uint32.high)`
[06:00:11] <FromDiscord> <RattleyCooper> Hey, that worked!
[06:01:26] <FromDiscord> <RattleyCooper> Thanks for the help guys!
[06:01:36] <FromDiscord> <Elegantbeef> you also could do `rand(uint32)`
[06:04:05] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[06:08:17] <FromDiscord> <Bren> Whats a way I can get a random string of `[a-zA-Z0-9]` chars should I have some runes and select them with random until I get the length or is there a better way?
[06:11:34] <FromDiscord> <Elegantbeef> Here you go https://play.nim-lang.org/#ix=3xuX
[06:11:56] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3xuY
[06:12:02] <FromDiscord> <Elegantbeef> That uses the global state of course
[06:12:35] <FromDiscord> <Elegantbeef> Cmon impbox be quicker/cooler ðŸ˜›
[06:12:46] <FromDiscord> <impbox [ftsf]> at least mine gives different results each time =p
[06:13:07] <FromDiscord> <Elegantbeef> Hey i'm not going to call randomize unless it's needed ðŸ˜›
[06:14:03] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:23:23] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[06:25:20] <FromDiscord> <RattleyCooper> Is there a big performance impact of setting the seed the random number generator?
[06:26:09] <FromDiscord> <impbox [ftsf]> no, but you should probably do it just once at the start of your app
[06:27:20] <FromDiscord> <RattleyCooper> Well in my procedural generation stuff I hash the coordinates of a tile and use it as an rng seed then roll a number between 0 and 1
[06:27:30] <FromDiscord> <RattleyCooper> For choosing tiles to spawn trees
[06:27:45] <FromDiscord> <RattleyCooper> That way it's always the same ðŸ˜›
[06:27:54] <FromDiscord> <RattleyCooper> and I don't have to save the coordinates to a file
[06:28:04] <FromDiscord> <impbox [ftsf]> you could just do it once at the start of your procgen
[06:28:10] <FromDiscord> <impbox [ftsf]> with the procgen seed
[06:28:12] <FromDiscord> <impbox [ftsf]> rather than per tile
[06:28:15] <FromDiscord> <RattleyCooper> No, because if you wander back into the area
[06:28:20] <FromDiscord> <impbox [ftsf]> as long as you do each tile in the same order
[06:28:21] <FromDiscord> <cabboose> oh god I scrolled up too far and saw some python code
[06:28:22] <FromDiscord> <RattleyCooper> It will be different then the initial load
[06:28:22] <FromDiscord> <cabboose> vomit
[06:28:24] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 244 seconds)
[06:30:15] <FromDiscord> <impbox [ftsf]> yeah that works, for that kind of thing i'd probably use a noise algorithm that takes a coordinate as input and returns a float
[06:30:47] <FromDiscord> <impbox [ftsf]> you set the seed for the noise once, then you can sample it at any point to get your output
[06:30:52] <FromDiscord> <RattleyCooper> In reply to @impbox "as long as you": Yeah, when I did my version I only had simplex noise to work with
[06:31:18] <FromDiscord> <RattleyCooper> So I either had to calculate a bunch of distances to keep the trees separated or just set the rng seed
[06:32:33] <FromDiscord> <RattleyCooper> but that was in godot.  I want to try  again with different noise algorithms bc I know they exist for placing trees.
[06:33:01] <FromDiscord> <impbox [ftsf]> for placing things like that check out possion disc sampling
[06:33:19] <FromDiscord> <impbox [ftsf]> (edit) "possion" => "poisson"
[06:33:20] <FromDiscord> <RattleyCooper> Gotcha!
[06:34:09] <FromDiscord> <impbox [ftsf]> combine that with simplex or perlin noise
[06:34:37] <FromDiscord> <RattleyCooper> Yeah, get some biome action going.
[06:35:39] <FromDiscord> <impbox [ftsf]> could do voronoi regions to define biome boundaries
[06:35:48] <FromDiscord> <impbox [ftsf]> lots of cool tools to play with in procgen
[06:36:34] <FromDiscord> <RattleyCooper> Never heard of that
[06:36:52] <FromDiscord> <RattleyCooper> I found poisson disk implementation in nim
[06:36:53] <FromDiscord> <RattleyCooper> https://github.com/nonvirtualthunk/nledgine/blob/f6329e8727864715dedc0b9256c81a4685b18cea/src/core/poisson_disk.nim
[06:40:40] <FromDiscord> <impbox [ftsf]> http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/
[06:43:47] <FromDiscord> <RattleyCooper> Oh nice, I am going to check this out right now ðŸ˜„
[07:15:40] <FromDiscord> <retkid> anyway to send and receive without hosting 2 servers?
[07:20:03] <FromDiscord> <impbox [ftsf]> you only need one server and one client?
[07:20:07] <FromDiscord> <impbox [ftsf]> or just two clients peer to peer
[07:25:06] <FromDiscord> <retkid> I've been running a server on bothsides and encountering kernel issues
[07:25:06] <FromDiscord> <retkid> :\
[07:25:06] *** Quits: sagax (~sagax@213.138.71.146) (Excess Flood)
[07:25:06] <FromDiscord> <impbox [ftsf]> which issues?
[07:25:06] <FromDiscord> <Elegantbeef> I'd wager trying to listen on the same socket as they're hosting on
[07:25:16] <FromDiscord> <retkid> its not a same socket issue
[07:25:29] <FromDiscord> <retkid> running multiple servers on the same IP in the same process
[07:25:36] <FromDiscord> <retkid> either way it wasn't needed
[07:25:50] <FromDiscord> <impbox [ftsf]> by server do you mean listening socket?
[07:26:13] <FromDiscord> <retkid> is there 1 socket per process
[07:26:15] <FromDiscord> <retkid> if so, yes
[07:26:39] <FromDiscord> <impbox [ftsf]> i don't know what you've done so i can't say, "server" is very vague
[07:26:48] <FromDiscord> <retkid> just socket listening
[07:26:59] <FromDiscord> <retkid> basic stuff just trying to get stuff to wkork
[07:27:04] <FromDiscord> <impbox [ftsf]> you can create many sockets on the same process
[07:27:23] <FromDiscord> <impbox [ftsf]> you'd only be limited by number of open files i guess which should be in the thousands
[07:27:25] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3xv9
[07:27:28] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3xv9" => "https://paste.rs/e7S"
[07:27:38] <FromDiscord> <retkid> thats all i really got
[07:27:53] <FromDiscord> <impbox [ftsf]> ok, so you're using unix sockets?
[07:28:06] <FromDiscord> <impbox [ftsf]> and the socket file you're trying to open doesn't exist?
[07:28:16] <FromDiscord> <impbox [ftsf]> you'd need to create that socket file first
[07:28:31] <FromDiscord> <retkid> well, this problem only happens when i have the 2 servers running at the same time
[07:28:36] <FromDiscord> <impbox [ftsf]> or maybe you don't have permission to access it, not sure if that gets its own error
[07:28:43] <FromDiscord> <retkid> either way
[07:28:46] <FromDiscord> <retkid> im doing it the wrong way
[07:29:08] <FromDiscord> <impbox [ftsf]> `/var/run/nscd/socket` is this something you created?
[07:29:19] <FromDiscord> <retkid> no
[07:29:41] <FromDiscord> <impbox [ftsf]> "Nscd is a daemon that provides a cache for the most common name service requests"
[07:29:48] <FromDiscord> <impbox [ftsf]> are you doing domain name lookups?
[07:30:28] <FromDiscord> <impbox [ftsf]> also, what's the actual problem that happens when you do what?
[07:32:35] <FromDiscord> <retkid> In reply to @impbox "are you doing domain": something to do with threading and spamming connecting but i'm looking into doing a P2P and if not i'll do threading with stdin and stdout
[07:45:33] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:53:53] *** Joins: Guest19 (~Guest19@024-240-045-218.res.spectrum.com)
[07:54:09] *** Quits: Guest19 (~Guest19@024-240-045-218.res.spectrum.com) (Client Quit)
[08:31:47] <FromDiscord> <SandwichBop> Nim looks really comfy and want to get into it, but I'm curious to why you all use it?
[08:31:56] <FromDiscord> <SandwichBop> (edit) "it?" => "it/what projects do u often use it for?"
[08:32:35] <FromDiscord> <SandwichBop> (edit) "it/what" => "over other langs in the first place? what"
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:19] <FromDiscord> <Rika> everything, because its one of the only languages i seriously enjoy writing stuff in
[08:39:20] <FromDiscord> <SandwichBop> that's great to hear, I plan on doing the same
[08:39:28] <FromDiscord> <SandwichBop> it looks so neat, just wish it were more popular
[08:39:43] <FromDiscord> <SandwichBop> don't know anyone at University that has even heard of the language ðŸ˜¢
[08:39:52] <FromDiscord> <RattleyCooper> Spread the word
[08:40:01] <FromDiscord> <InventorMatt> that is why we must evangelize to everyone we meet
[08:40:01] <FromDiscord> <SandwichBop> lol imma try as soon as I get a good grasp of it first
[08:40:32] <FromDiscord> <RattleyCooper> Show them how to interop with python using nimpy
[08:40:40] <FromDiscord> <SandwichBop> I love that u can do that with nim
[08:40:55] <FromDiscord> <SandwichBop> lots of the data science peeps would use that
[08:41:12] <FromDiscord> <RattleyCooper> Yeah, everyone knows python so it should be easy to show them the benefits
[08:43:18] <FromDiscord> <Arathanis> Yeah I came to Nim because of its syntactical similarity to python.
[08:43:24] <FromDiscord> <Arathanis> That definitely helps to get people to look at it.
[08:44:02] <FromDiscord> <Rika> theres a lot of differences
[08:44:25] <FromDiscord> <RattleyCooper> And even though it's not as popular it's so much easier to read.  You can look at most nim source code and figure out how to do what you need to do.
[08:45:07] <FromDiscord> <Arathanis> There are always differences but in this case its similar enough. The syntax they chose is, imo, very inspired from python and I can appreciate that.
[08:45:25] <FromDiscord> <Arathanis> In reply to @RattleyCooper "And even though it's": I think its pretty easy to read Python source code and figure out what the business is tbh.
[08:45:28] <FromDiscord> <Rika> imo its not as "python like" as you think, theres plenty of differences
[08:45:35] <FromDiscord> <Arathanis> Nim is nice cause its similar.
[08:45:40] <FromDiscord> <Rika> and many similarities are likely coincidental
[08:46:02] <FromDiscord> <RattleyCooper> Not when there are 50 classes in 15 files
[08:46:31] <FromDiscord> <RattleyCooper> It really depends on who wrote it, like in most cases..
[08:46:48] <FromDiscord> <Arathanis> That's true of every language.
[08:47:32] <FromDiscord> <Arathanis> I don't think the similarities are coincidental at all.
[08:47:38] <FromDiscord> <Arathanis> I see them as very much intential
[08:47:45] <FromDiscord> <Arathanis> and then branching in its own direction
[08:47:48] <FromDiscord> <Arathanis> which I always think is best
[08:47:55] <FromDiscord> <Arathanis> i think its good that they took it in their own direction.
[08:48:09] <FromDiscord> <Rika> no, nim is mostly influenced by pascal and its ancestors and successors
[08:48:27] <FromDiscord> <Rika> i would be led to believe that python only influenced the indentation style blocks
[08:48:31] <FromDiscord> <Arathanis> And I like a lot of the alternative choices they made.
[08:49:41] <FromDiscord> <ElegantBeef> Cursory they look a lot a like but the overall image is two vastly different languages
[08:49:49] <FromDiscord> <Arathanis> Oh yes.
[08:50:07] <FromDiscord> <Arathanis> If they weren't wildly different there would be no point.
[08:50:08] <FromDiscord> <Arathanis> :]
[08:52:00] <FromDiscord> <Rika> there can be a point in a "new" language that isnt wildly differeent
[08:52:10] <FromDiscord> <Rika> as long as the primary change is substantial
[08:52:16] <FromDiscord> <Rika> eg. typescript
[08:53:15] <FromDiscord> <Arathanis> Sure. Though I am not sure i think that typescript is a great example. I see typescript as someone trying to add typing to JS not trying to be adjacent to JS.
[08:54:01] <FromDiscord> <Rika> well its a superset
[08:54:03] <FromDiscord> <Arathanis> Either way, love the pythonic syntax inspiration. Keeps the language expressive, and free of "character noise"
[08:54:10] <FromDiscord> <Rika> not as much as C++ is to C but it is a superset
[08:54:33] <FromDiscord> <Arathanis> C++ makes it harder to shoot yourself in the foot than C, but when you do it blow the whole leg off.
[08:54:49] <FromDiscord> <Rika> harder is debatable
[08:55:00] <FromDiscord> <impbox [ftsf]> new exciting ways to shoot yourself in the foot
[08:55:02] <FromDiscord> <Arathanis> also true, im not sure who the quote is attributed to
[08:55:08] <FromDiscord> <Arathanis> still humorous lol
[08:55:32] <FromDiscord> <SandwichBop> haven't check myself yet, but does Nim have good support on any of the JetBrain IDEs?
[08:55:37] <FromDiscord> <Rika> no
[08:55:37] <FromDiscord> <impbox [ftsf]> currently writing C and i have no idea where all these bullets are coming from, but there's not much foot left
[08:55:40] <FromDiscord> <SandwichBop> rip
[08:55:43] <FromDiscord> <Rika> support? yes
[08:55:45] <FromDiscord> <Rika> good? no
[08:56:10] <madprops> vscode support is not too bad
[08:56:26] <madprops> i'd even say it's good
[08:56:35] <FromDiscord> <SandwichBop> o that's nice to know
[08:56:46] <FromDiscord> <SandwichBop> https://plugins.jetbrains.com/plugin/15128-nimâ†µseems like JetBrains has their own plugin for nim, that's a good sign ig
[08:56:50] <FromDiscord> <Rika> i cannot comment on that because it has been a few months since i seriously used vsc
[08:57:07] <FromDiscord> <Rika> In reply to @SandwichBop "https://plugins.jetbrains.com/plugin/15128-nim seem": as i said, support exists but it is not good
[08:57:18] <FromDiscord> <SandwichBop> what do you use Rika?
[08:57:22] <FromDiscord> <Rika> neovim
[08:57:30] <FromDiscord> <SandwichBop> lol should had remembered, vim prolly best bet
[09:01:03] <FromDiscord> <SandwichBop> sorry, last dumb question, anyone know how well nim runs on apple sillicon? (if it doesn't, I'll just dev on windows)
[09:02:17] <FromDiscord> <SandwichBop> (edit) "sillicon?" => "sillicon (seems like based the github only x86, x86_64 and ppc64 work on mac but maybe people have tried apple silicon)?"
[09:07:17] <FromDiscord> <xflywind> > Just like our devel branch, v1.4.8 is built using csources_v1, which means you can use it on Apple M1 chips.
[09:07:21] <FromDiscord> <xflywind> https://forum.nim-lang.org/t/8031
[09:07:55] <FromDiscord> <xflywind> see also https://github.com/nim-lang/Nim/issues/16211
[09:08:47] <FromDiscord> <SandwichBop> awesome, that's so great to know :nim1:
[09:27:40] <FromDiscord> <garett> Is there a convenient way to infer the type of a proc or var?  Something akin to gcc/clang typeof()?
[09:28:27] <FromDiscord> <impbox [ftsf]> `typeof`
[09:28:40] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/manual.html#special-types-typeof-operator
[09:30:21] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://paste.rs/7U5
[09:39:54] *** Quits: watzon (~Thunderbi@136.36.149.145) (Remote host closed the connection)
[09:39:58] <FromDiscord> <garett> Thank you, impbox!
[09:40:12] *** Joins: watzon (~Thunderbi@136.36.149.145)
[09:40:58] <NimEventer> New thread by Puruneko: Can't run on UNC path, see https://forum.nim-lang.org/t/8383
[09:41:00] <FromDiscord> <impbox [ftsf]> np, keep in mind typeof gives the _compile time type_, not the runtime type
[09:42:55] *** Joins: ozzz (~oz@46.49.41.80)
[09:55:17] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[10:44:46] <Gustavo6046> Is there composition without the concept type?
[10:46:55] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xvx
[10:48:11] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xvy
[10:49:34] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3xvA
[11:08:17] *** Joins: max22- (~maxime@2a01cb0883359800abc384d6504f49b2.ipv6.abo.wanadoo.fr)
[11:13:23] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[12:16:00] <FromDiscord> <enthus1ast> does one have a good idea how to detect/guess an unknown source encoding of a dataset?â†µI already tried to loop through all encodings in "encodings" and convert from every to ut-8 to maybe identify the source encoding, but yeah, no sucess.â†µâ†µBia\\u00c5\\u0082ystok-Krywlany Airport  -\>  BiaÅ‚ystok-Krywlany Airport
[12:16:45] <FromDiscord> <enthus1ast> and i do not know unicode enough to make a more educated guess
[12:25:09] <FromDiscord> <enthus1ast> it is oc. possible that the source dataset is rubbish...
[12:30:08] <PMunch> Well it's hard to just detect
[12:31:19] <PMunch> But that encoding seems to be UTF-8
[12:31:35] <PMunch> Å‚ is 0xC5 0x81 in UTF-8
[12:34:03] <PMunch> @enthus1ast
[12:36:11] <FromDiscord> <enthus1ast> mhh
[12:47:03] <FromDiscord> <enthus1ast> it seems this is the solution\:â†µ`echo convert(ss, "iso-8859-1", "utf-8")`
[12:48:25] <FromDiscord> <enthus1ast> it is indeed utf-8 but somehow wrongly encoded
[12:50:46] <PMunch> Is it actually 0x00 0xC5 0x00 0x82?
[12:54:03] <FromDiscord> <enthus1ast> this gives the wrong result
[12:57:15] <FromDiscord> <enthus1ast> another option would be to replace `\u00` with `\x` but convert from "utf-8" to "iso-8859-1" result in correct utf-8
[12:58:54] <FromDiscord> <enthus1ast> encodings are shiâ–¡
[12:59:43] <PMunch> Haha :P
[13:06:01] <PMunch> Hmm, as a function argument is `proc` and `ptr proc` the same?
[13:07:18] <FromDiscord> <Elegantbeef> Can you even get a proc's address?
[13:07:39] <PMunch> Sure
[13:07:51] <PMunch> How else do you think it's passed as an argument?
[13:08:17] <FromDiscord> <Elegantbeef> That's not what i meant
[13:08:38] <FromDiscord> <Elegantbeef> I mean in Nim can you explictly get a proc as a `ptr proc` without casting
[13:08:49] <PMunch> I think so?
[13:09:21] <FromDiscord> <Elegantbeef> How both `addr` and `unsafeaddr` cannot be used
[13:09:24] <PMunch> Hmm, seems you can't
[13:09:26] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3xw0
[13:09:52] <FromDiscord> <Elegantbeef> Yes you can cast anything to anything, but that wasnt the question ðŸ˜€
[13:09:53] <FromDiscord> <enthus1ast> then i guess a proc is a ptr
[13:10:23] <FromDiscord> <enthus1ast> a pointer not ptr
[13:10:56] <PMunch> The question really is what do I convert `void lruhash_traverse(struct lruhash* h, int wr, void (*func)(struct lruhash_entry*, void*), void* arg);` to in Nim
[13:12:04] <PMunch> proc lruhash_traverse(h: ptr lruhash, wr: cint, func: proc(a0: ptr lruhash_entry, a0: pointer) {.cdecl.}, arg: pointer)` I guess
[13:12:20] <PMunch> Well, `func` would have to be a  different name
[13:12:21] <FromDiscord> <Elegantbeef> Yea that's what i'd go with
[13:13:29] <FromDiscord> <Elegantbeef> Wonder if the first arg could be `var lruhash`
[13:14:16] <PMunch> Hmm, possibly..
[13:14:31] <FromDiscord> <Elegantbeef> I know it works in many cases but dont know if it's "proper"
[13:15:49] <PMunch> Would be interesting to know
[13:16:01] <PMunch> Certainly more idiomatic Nim to use var if it works
[13:23:46] <PMunch> Hmm, how do I handle a typedef to a procedure that isn't a pointer then though?
[13:24:37] <PMunch> It's obviously only ever used as a pointer type..
[13:27:37] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:34:41] <PMunch> Hmm, can you do inline unions in a type definitions in Nim?
[13:35:05] <PMunch> ie: http://ix.io/3xw7/c
[13:35:45] <FromDiscord> <Elegantbeef> The union would need it's own typedef
[13:47:08] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[13:48:15] *** Joins: flynn (~mcbloch@user/flynn)
[13:51:37] <FromDiscord> <impbox [ftsf]> yay! I got my weird dither generator working just how i wanted
[13:52:15] <FromDiscord> <Elegantbeef> Congrats
[13:53:02] <FromDiscord> <impbox [ftsf]> horribly inefficient but it can be cached
[13:53:06] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3xwd
[13:53:34] <FromDiscord> <Elegantbeef> Kashae, kashae!
[13:54:14] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xwe
[13:55:19] <FromDiscord> <Rika> What does it either
[13:55:25] <FromDiscord> <Elegantbeef> Imp i will get your code snippets to have `std/` eventually
[13:55:30] <FromDiscord> <Elegantbeef> Yes rika but english
[13:55:44] <FromDiscord> <Rika> I didnâ€™t realise I miswrote
[13:55:46] <FromDiscord> <Rika> Dither
[13:55:51] <FromDiscord> <impbox [ftsf]> the new version is more balanced =)
[13:55:52] <FromDiscord> <Rika> What does it dither
[13:56:04] <FromDiscord> <impbox [ftsf]> it's how many pixels a thing should move per frame
[13:57:38] <FromDiscord> <Elegantbeef> I'll make an issue tomorrow impbox but nico doesnt like this palette https://lospec.com/palette-list/aurora png fails for an index reason, and gpl fails due to it not using consistent seperators between numbers
[13:57:50] <FromDiscord> <Elegantbeef> "Tomorrow" is what i should've said
[13:58:10] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xwh
[13:58:55] <FromDiscord> <impbox [ftsf]> which png are you using? 1x?
[13:59:01] <FromDiscord> <impbox [ftsf]> i'll see if i can repro
[13:59:10] <FromDiscord> <Elegantbeef> 1x yea
[13:59:30] *** Quits: max22- (~maxime@2a01cb0883359800abc384d6504f49b2.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[13:59:36] <FromDiscord> <Elegantbeef> It worked previously so i imagine something changed recently to cause it but didnt hunt it down
[14:00:01] <arkanoid> is it possible with a proc pragma to generate AST or 2 procs instead of one?
[14:01:16] <FromDiscord> <Elegantbeef> You can use a pragma on a proc to do anything
[14:01:26] <arkanoid> long story short, I have tons of importc procs that all have C format "int f(arg1,arg2,return)", and I want to turn them in more idiomatic nim format
[14:01:46] <FromDiscord> <Elegantbeef> You want to make it a type definition feel free to
[14:02:15] <FromDiscord> <Rika> In reply to @arkanoid "is it possible with": I donâ€™t think it can make two
[14:02:26] <FromDiscord> <Rika> Or can it? I forget
[14:02:30] <FromDiscord> <Rika> I recall not being able to
[14:02:38] <arkanoid> one possibility was to use proc pragma on them and use the macro to returns 2 procs: the unmodified c style importc version, and the new one with proper nim idiomatic syntax that calls the first one
[14:02:40] <FromDiscord> <Elegantbeef> a proc pragma gets the proc definition so can emit code outside of a proc statement
[14:04:13] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3xwj
[14:04:33] <FromDiscord> <Rika> Has anyone tried integrating Nim with an existing Android application code base? Would there be any different procedures to do for such a case versus a from-scratch application?
[14:04:56] <arkanoid> yeah! thanks Elegantbeef
[14:05:07] <FromDiscord> <Rika> And what resources do you refer to when doing so, Iâ€™ve never tried compiling Nim code for Android
[14:05:19] <FromDiscord> <Elegantbeef> Arkanoid taking the tedious route of writing my entire name
[14:05:31] <FromDiscord> <Elegantbeef> Impbox might be able to help with the latter part
[14:06:00] <FromDiscord> <Rika> Are there Android SDK requirements since I have a hard minimum of Android 6
[14:06:31] <FromDiscord> <Rika> Thanks in advance lol
[14:07:50] <arkanoid> what is impbox?
[14:11:25] <FromDiscord> <Rika> Person
[14:11:31] <FromDiscord> <Rika> He is a person
[14:12:16] <arkanoid> oh! Very toolish name
[14:35:44] <FromDiscord> <impbox [ftsf]> @Rika i've made nim+android applications using the SDL2 Android base
[14:36:20] <FromDiscord> <Rika> I donâ€™t remember if your projects are open source, if they are, are they easy to dissect for me to understand how theyâ€™re built ?
[14:45:13] <FromDiscord> <impbox [ftsf]> you can try doing a nico android build
[14:46:01] <FromDiscord> <Rika> Iâ€™m already lost lol what do you mean by such
[14:48:01] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3xwu
[14:48:37] <FromDiscord> <Rika> Okay Iâ€™ll look at such
[14:48:47] <FromDiscord> <impbox [ftsf]> if the stars align maybe you'll end up with an apk
[14:49:02] <PMunch> @Elegant, that's what I feared..
[14:49:20] <PMunch> @impbox, ooh do you have an image of the dithering? I need to implement a ditherer soon myself
[14:49:50] <FromDiscord> <impbox [ftsf]> @PMunch it's dithering in time, so not great for an image
[14:50:02] <FromDiscord> <impbox [ftsf]> though i've done bayer dithering in nico
[14:50:18] <PMunch> Dithering in time?
[14:51:00] <FromDiscord> <impbox [ftsf]> how many pixels something should move each frame
[14:51:39] <FromDiscord> <Rika> In reply to @impbox "if the stars align": ðŸ˜“
[14:52:02] <FromDiscord> <impbox [ftsf]> @Rika i just ran it on my machine and it gave me an apk, so it's looking good
[14:52:09] <FromDiscord> <Rika> In reply to @impbox "<@392962235737047041> it's dithering in": Ah thatâ€™s cool, temporal dithering is difficult
[14:52:22] <FromDiscord> <Rika> In reply to @impbox "<@!259277943275126785> i just ran": Windows or Linux ?
[14:52:26] <FromDiscord> <impbox [ftsf]> Windows
[14:53:03] <FromDiscord> <Rika> Hmm Iâ€™m on Linux though, letâ€™s see once I can use my desktop
[15:00:22] <FromDiscord> <linux user> rikea use linox :o
[15:02:42] <PMunch> Aah similar to the stuff I used for my masters to implement some machine-learning without floating point support
[15:04:19] <FromDiscord> <Rika> Huh? What topic are we on right now??
[15:04:46] <FromDiscord> <Rika> Oh the temporal dithering
[15:05:08] <FromDiscord> <Rika> How the hell do you start with implementing machine learning given no floating points what the hell
[15:07:18] <FromDiscord> <impbox [ftsf]> dithering? i guess
[15:13:39] *** Joins: max22- (~maxime@2a01cb0883359800c385dd054c0a20af.ipv6.abo.wanadoo.fr)
[15:13:54] <PMunch> It was a very simple kind of machine learning, nothing with neural nets or anything like that
[15:14:35] <PMunch> Basically the way I did dithering was that instead of subtracting 0.5 I subtracted 1 with 50% probability
[15:14:43] <PMunch> And similar for other fractions
[15:15:12] <PMunch> And for the random chance I basically just masked of bits of a nanoscale time
[15:18:51] <FromDiscord> <Rika> Ah I see
[15:18:55] <FromDiscord> <Rika> How well did it work
[15:19:09] <PMunch> Pretty well actually
[15:19:40] <PMunch> I used it to classify whether internet traffic was good or bad
[15:19:47] <FromDiscord> <Rika> Actually I just realised that this Android project thing I was going to do is also related to dithering but just image dithering
[15:19:53] <PMunch> Or rather normal or abnormal
[15:20:05] <PMunch> I'm going to need image dithering soon
[15:20:10] <PMunch> Probably
[15:20:15] <FromDiscord> <Rika> Normal as in not malicious?
[15:20:32] <PMunch> Normal as in whatever the network was used to seeing
[15:20:48] <FromDiscord> <Rika> In reply to @PMunch "I'm going to need": Then I should upload that program I made that dithers images to GitHub then
[15:21:03] <PMunch> Definitely
[15:21:12] <PMunch> I mean implementing one in OpenGL isn't exactly hard
[15:21:59] <FromDiscord> <Rika> Ah in my case it was implemented as a read in PNG write out PNG
[15:22:09] <FromDiscord> <Rika> But it should be easier to port given existing code lol
[15:24:09] <PMunch> What kind of dithering did you do?
[15:24:18] <FromDiscord> <Rika> All sorts of them
[15:24:37] <FromDiscord> <Rika> The ones listed on Wikipedia lol
[15:24:37] <PMunch> All sorts?
[15:25:33] <FromDiscord> <Rika> Floyd-Steinberg and Sierra are the ones I remember
[15:27:13] <PMunch> Hmm, problem is that I need to be able to dither parts of the image
[15:27:26] <PMunch> So I can't use most of the error-diffusion ones..
[15:27:45] <FromDiscord> <Rika> Hmm what method would that use them
[15:27:47] <FromDiscord> <Rika> Then
[15:28:29] <PMunch> That's what I'm trying to figure out :P
[15:28:38] <PMunch> I mean the obvious one is a basic ordered approach
[15:29:17] *** Joins: arkurious (~arkurious@user/arkurious)
[15:29:48] <FromDiscord> <Rika> Was gonna say but that doesnâ€™t provide good quality IMO
[15:30:00] <PMunch> Yeah quality is poor
[15:30:12] <FromDiscord> <Rika> Oh wait thereâ€™s the noise ordered one
[15:30:26] <FromDiscord> <Rika> http://cv.ulichney.com/papers/1993-void-cluster.pdf
[15:55:43] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:56:50] *** Joins: flynn (~mcbloch@user/flynn)
[16:12:24] <PMunch> Hmm, I think a little cleanup now and my clang auto-wrapping thing should be useable
[16:16:42] *** Joins: rockcavera (~rc@192.12.112.218)
[16:16:42] *** Quits: rockcavera (~rc@192.12.112.218) (Changing host)
[16:16:42] *** Joins: rockcavera (~rc@user/rockcavera)
[16:16:54] <PMunch> Is it possible to read passC and passL?
[16:17:39] <FromDiscord> <haxscramper> What do you mean "read"?
[16:17:56] <PMunch> Get the value of
[16:18:02] <PMunch> From inside my Nim program
[16:19:24] <FromDiscord> <haxscramper> No, without parsing whole module. `std/compilesettings` might have access to this, in theory https://nim-lang.org/docs/compilesettings.html
[16:19:32] <FromDiscord> <haxscramper> `  linkOptions,              ## additional options passed to the linker`
[16:26:21] <FromDiscord> <trenta3> In reply to @Elegantbeef "It's simply writing code": Hi! I started trying to build some macros, but I'm having a bit of problems in understanding the error message "expression '...' has no type (or is ambiguous)".â†µWhat does that mean? What could the problem be?â†µThe macro code itself is a bit long and has some context as well, but I will post it.
[16:26:55] <PMunch> Hmm, doesn't seem to give me passL or passC
[16:28:27] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xwW
[16:29:30] <FromDiscord> <haxscramper> PMunch\: then it only gives direct arguments to `nim --passl/passc`
[16:33:55] <FromDiscord> <Cark> hum so let's say i have an object type A and its ref counterpart ARef. now I have an instance of A on the stack, but i need to call a proc which requires an ARef, is there  a way to do it ?
[16:34:37] <FromDiscord> <Cark> or should i go with pointers ?
[16:35:17] <FromDiscord> <Rika> In reply to @Cark "hum so let's say": Yes, make a new ref and copy the contents into it and pass to the function
[16:35:32] <FromDiscord> <Rika> Donâ€™t go with a pointer unless you know why you need it
[16:35:56] <FromDiscord> <Rika> Thereâ€™s likely a reason it takes a ref, the proc
[16:35:56] <FromDiscord> <Cark> ah but the whole point was to avoid copying
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:04] <FromDiscord> <Rika> There is no other way
[16:36:07] <FromDiscord> <Cark> i control the proc
[16:36:19] <FromDiscord> <Rika> Then why do you need a ref?
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:56] <FromDiscord> <Cark> it made sense to use refs in order to avoid copying, but i can start from refs on the stack or just use ptr
[16:37:17] <FromDiscord> <Cark> i can see how making a ref out of a stack object is dangerous
[16:37:32] <FromDiscord> <Rika> You shouldnâ€™t avoid copying unless you can measurably see there is a difference, and even then you shouldnâ€™t change to ref just because of thatâ€¦
[16:37:46] <FromDiscord> <Rika> Nim already automatically passes via pointer if it is faster for the size of the object
[16:38:18] <FromDiscord> <Cark> but if the semantics is to pass by value, there surely has some copying going on ?
[16:38:28] <FromDiscord> <Cark> (edit) "has some" => "issome"
[16:38:33] <FromDiscord> <Cark> (edit) "issome" => "is some"
[16:38:37] <FromDiscord> <Rika> Yes, but so what if there is?
[16:38:51] <FromDiscord> <Rika> Pass by reference is not always significantly faster than pass by value
[16:39:31] <FromDiscord> <Cark> ok i get that, but what if the passed object has some state that might change, and i need it reflected in the copies ?
[16:39:34] <FromDiscord> <Rika> Do you observably see the difference in speed if using one or the otherV
[16:39:43] <FromDiscord> <Rika> In reply to @Cark "ok i get that,": Use var
[16:39:44] <FromDiscord> <Cark> i'm not arguing about speed
[16:39:50] *** Quits: max22- (~maxime@2a01cb0883359800c385dd054c0a20af.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:40:03] <FromDiscord> <Rika> In reply to @Cark "i'm not arguing about": Yes I just sent that before I read the newest message
[16:40:11] <FromDiscord> <Cark> =)
[16:40:20] <FromDiscord> <Cark> my problem statement is ill specified
[16:40:35] <FromDiscord> <Cark> what i want is to model my application state
[16:40:49] <FromDiscord> <Rika> Okay
[16:41:13] <FromDiscord> <Cark> but i have already writen a bunch of procs that are using values rather than refs
[16:41:41] <FromDiscord> <Rika> Yeah and you can use var for mutability of regular object parameters
[16:41:42] <FromDiscord> <Cark> now it looks like one of my substates would be better specified with refs
[16:42:35] <FromDiscord> <Cark> ok i need to think a bit on that, thanks for your help
[16:42:39] <FromDiscord> <Rika> Okay
[16:43:29] <FromDiscord> <Cark> var can be seen as passing the address of the object
[16:43:34] <FromDiscord> <Cark> just like in c
[17:01:07] <FromDiscord> <Rika> Yes but you donâ€™t need to manage it yourself
[17:12:04] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Bridge terminating on SIGTERM)
[17:12:05] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Bridge terminating on SIGTERM)
[17:12:09] *** Quits: happycorsair[m]1 (~happycors@2001:470:69fc:105::205) (Quit: Bridge terminating on SIGTERM)
[17:15:31] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[17:17:28] *** Quits: lain (~lain@172.16.254.xxx) (Ping timeout: 252 seconds)
[17:18:24] *** Joins: lain (~lain@172.16.254.xxx)
[17:26:34] <FromDiscord> <Rika> this is a kind of strange question
[17:26:35] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[17:26:35] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[17:26:47] <FromDiscord> <Rika> are there libraries that can produce both a parser and a generator
[17:27:26] <FromDiscord> <Rika> eg. parse this format, then also write out this format
[17:27:51] *** Joins: max22- (~maxime@2a01cb0883359800da62ac58cdf235c4.ipv6.abo.wanadoo.fr)
[17:33:13] <PMunch> Like what binaryparse does?
[17:34:06] *** Quits: max22- (~maxime@2a01cb0883359800da62ac58cdf235c4.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:35:06] <FromDiscord> <Rika> i guess? but text
[17:43:33] <PMunch> None that I know of
[17:44:52] <FromDiscord> <Rika> not a problem, the generation part is much easier to make i guess
[18:06:28] *** Quits: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:15:09] <FromDiscord> <pietroppeter> https://github.com/sealmove/binarylang
[18:15:12] <nrds> <12R2D299> 4GitHub: 7"Binary parser/encoder DSL"
[18:15:34] <FromDiscord> <pietroppeter> it says binary but it actually works fine with text (see tutorials by Ajusa)
[18:26:37] *** Joins: krux02 (~krux02@p4ff8b737.dip0.t-ipconnect.de)
[18:34:55] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:37:58] *** Joins: max22- (~maxime@2a01cb0883359800979df6351629e372.ipv6.abo.wanadoo.fr)
[18:46:42] <NimEventer> New thread by Enthus1ast: Nimja; compiled and statically typed template engine (like twig or jinja2), see https://forum.nim-lang.org/t/8384
[19:15:49] <FromDiscord> <trenta3> Sorry for insisting, can someone explain to me what does the error "expression '...' has no type (or is ambiguous)" mean? How can I diagnose the problem when the exact same printed content seems correct to me?
[19:22:20] <FromDiscord> <haxscramper> It means that expression ... has no type. Usually? Like `let varname = echo 123`
[19:22:25] <FromDiscord> <haxscramper> In your particular case you just defined a function
[19:22:33] <FromDiscord> <haxscramper> Not assigned it, and it is not written in expression form
[19:22:40] <FromDiscord> <haxscramper> `proc name()` is a declaration
[19:23:02] <FromDiscord> <haxscramper> `let callback = proc() = ...` is an expression, specifically `proc() = ...` part of it
[19:23:33] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xxV
[19:23:59] <FromDiscord> <haxscramper> Or construct proc via `nkLambda`, or `nnkProcDef` without arguments
[19:24:07] <FromDiscord> <haxscramper> I don't remember which one it is exactly, so you need to look at treeDump for expression specifically
[19:24:12] <FromDiscord> <haxscramper> @trenta3\:
[19:25:52] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:26:57] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xxW
[19:26:59] *** Joins: flynn (~mcbloch@user/flynn)
[19:27:18] <FromDiscord> <trenta3> I honestly cannot understand exactly what you mean
[19:27:22] <FromDiscord> <haxscramper> Your macro generates statement not an expression
[19:27:30] <FromDiscord> <haxscramper> try pasting echoed code
[19:27:50] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xxX
[19:28:02] <FromDiscord> <trenta3> This is the code echoed at the end of the macro for a specific case
[19:28:18] <FromDiscord> <Rika> that is a statement
[19:28:58] <FromDiscord> <trenta3> Ouch, what would an equivalent expression be like?â†µCan't I just assign a proc to a variable?
[19:29:04] <FromDiscord> <Rika> you can
[19:29:20] <FromDiscord> <Rika> what is the typedef of `Parser`?
[19:29:27] <FromDiscord> <Rika> i assume parseApply is your macro
[19:29:49] <FromDiscord> <Rika> a proc expression has the same syntax as a proc statement, just without the proc name
[19:30:08] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xy0
[19:30:12] <FromDiscord> <Rika> remove the proc name
[19:30:22] <FromDiscord> <haxscramper> Should be sufficieng
[19:30:23] <FromDiscord> <haxscramper> Should be sufficient
[19:30:23] <FromDiscord> <haxscramper> I just provided two examplesâ†µ(@trenta3)
[19:30:31] <FromDiscord> <Rika> oh yes that works too
[19:30:43] <FromDiscord> <haxscramper> Sometimes this errors out on parsingâ†µ(@Rika)
[19:30:45] <FromDiscord> <Rika> (hax your messages just got here now)
[19:31:00] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/eeD
[19:31:12] <FromDiscord> <haxscramper> No, I re-send itâ†µ(@Rika)
[19:31:13] <FromDiscord> <trenta3> In reply to @Rika "remove the proc name": Thanks a lot
[19:31:21] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/8Yl
[19:31:48] <FromDiscord> <trenta3> sent a code paste, see https://paste.rs/RWE
[19:32:10] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xyf
[19:32:14] <FromDiscord> <haxscramper> At least that's a simplest fix, though it produces rather ugly `.repr()` when used
[19:32:24] <FromDiscord> <haxscramper> So I usually try to actually generate closure expression
[19:32:36] <FromDiscord> <haxscramper> But that needs more `.newTree()`,
[19:32:39] <FromDiscord> <trenta3> When removing the proc name from the quote do I get ` Error: identifier expected, but got '('`
[19:32:53] <FromDiscord> <haxscramper> Can you try the code I sent?
[19:33:20] <FromDiscord> <haxscramper> I mean the one which simply adds `parse` at the end
[19:33:43] <FromDiscord> <trenta3> sent a code paste, see https://paste.rs/ryE
[19:33:50] <FromDiscord> <trenta3> Thank! I initially did not notice the name at the end
[19:35:39] <FromDiscord> <trenta3> Now I can try to continue writing the macro.â†µAnd I will probably have to look more carefully at the difference between statements and expressions in nim, which I find extremely different from other languages.
[19:36:37] <FromDiscord> <haxscramper> No, it is not really different, we just allow more in expressions
[19:36:52] <FromDiscord> <haxscramper> Just C-style langs don't do `if/case` expressions
[19:37:09] <FromDiscord> <haxscramper> And `block` expressions
[19:37:40] <FromDiscord> <haxscramper> Lisp/\<insert FP lang\>/Rust/ etc. have almost the same expression concepts, for `if/match/for`
[19:38:02] <FromDiscord> <haxscramper> lisp especially
[19:39:49] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xyp
[19:40:06] <FromDiscord> <trenta3> Ok, so maybe I get it: the inner `proc` is a statement.
[19:40:19] <FromDiscord> <trenta3> But then what would be an equivalent expression to return a function/proc?
[19:40:48] <FromDiscord> <trenta3> sent a code paste, see https://play.nim-lang.org/#ix=3xyq
[19:40:53] <FromDiscord> <haxscramper> Yes, procedure block is a statement, and if the last entry in block is an expression than it is returned
[19:41:19] <FromDiscord> <haxscramper> Remove `proc inc`, just `return proc()` is enougâ†µ(@trenta3)
[19:41:58] <FromDiscord> <trenta3> Ok thanks, this clarification was really useful
[19:42:27] <FromDiscord> <haxscramper> So the error about `(` that you got earlier was just because we can't easily determine whether random `proc` in the midle of nowhere is an expression
[19:42:49] <FromDiscord> <haxscramper> So when used in places that are clearly not expressions
[19:43:24] <FromDiscord> <haxscramper> E.g. `return, let, var, const` assign to any kind  ... basically anything that is not a standalone statement
[19:43:31] <FromDiscord> <haxscramper> THen you can easily do `let a = proc()`
[19:43:45] <FromDiscord> <haxscramper> But when you do `proc()` without anything else nim tries to parse it as statement
[19:43:51] <FromDiscord> <haxscramper> Probably the only caveat
[19:44:02] <FromDiscord> <haxscramper> Python has explicit `lambda`
[19:44:03] <FromDiscord> <haxscramper> Rust has `||` for closures
[19:44:24] <FromDiscord> <haxscramper> But we reuse the same `proc()` for all encounters, which leads to this difference
[19:44:39] <FromDiscord> <trenta3> Ok, but then the error I got before was that I was returning a block generated by `quote do`?
[19:45:11] <FromDiscord> <haxscramper> You generated statemetn that was basically `StmtList[ProcDeclaration]`, and `ProcDeclaration` cannot be an expression
[19:45:33] <FromDiscord> <haxscramper> After you added `parse` at the end it became `StmtList[ProcDef, Ident]` and `Ident` can be an expression
[19:45:52] <FromDiscord> <haxscramper> So "block expression" triggers
[19:46:13] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#statements-and-expressions-block-expression
[19:46:38] <FromDiscord> <trenta3> Ok, now I get it. So I could also take my `result` and extract just the ProcDeclaration using `result = result[0]` and return that?
[19:46:43] <FromDiscord> <haxscramper> The manual is a bit to dry on examples in this case, but basically `Stmt[ ????, Ident/Lit/Other-Expr]` can be expr
[19:47:00] <FromDiscord> <haxscramper> No, the ast is more involved, and proc declaration cannot be splitâ†µ(@trenta3)
[19:47:23] <FromDiscord> <haxscramper> Because again, `ProcDef` (I used wrong name the first time) is not an expression
[19:47:38] <FromDiscord> <haxscramper> Proc/Iterator/Macro/Type/Const/Let/Var declarations are not expressions
[19:47:48] <FromDiscord> <trenta3> In reply to @haxscramper "The manual is a": Yes I totally agree on this, resources on the web are scarce too for a language that is around by such a long time (compare it to the number of examples for Golang e.g.)
[19:47:52] <FromDiscord> <haxscramper> While/For statements are not expressions either
[19:48:13] <FromDiscord> <haxscramper> If/Try/Case/Block can be an expression dependoning on context
[19:48:30] <FromDiscord> <haxscramper> The context is - is it a part of bigger expression or not?
[19:48:55] <FromDiscord> <haxscramper> Enumerating all combinations will take some time but I hope you get general idea
[19:49:03] <FromDiscord> <haxscramper> @trenta3)
[19:49:20] <FromDiscord> <haxscramper> No the language to compare anything to
[19:49:26] <FromDiscord> <haxscramper> Except maybe ruse
[19:49:27] <FromDiscord> <haxscramper> rust
[19:49:28] <FromDiscord> <trenta3> In reply to @haxscramper "Enumerating all combinations will": Yes, I definitely get it
[19:50:03] <FromDiscord> <trenta3> In reply to @haxscramper "No the language to": Agree, I'm definitely not comparing the languages, just the number of examples that one can find on the web.
[19:52:19] <FromDiscord> <trenta3> But then thanks again, having places to ask for help is great
[19:56:07] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3xyw
[19:59:18] <FromDiscord> <Rika> `...[T: AnyVector3](a: T): T`?
[19:59:49] <FromDiscord> <Rika> or what you just wrote, does it not work?
[20:04:33] <FromDiscord> <Ayy Lmao> In reply to @Rika "`...[T: AnyVector3](a: T): T`?": That seems to make `V` as the value type become undeclared.
[20:04:53] <FromDiscord> <Ayy Lmao> In reply to @Rika "or what you just": When I do `typeof(a)` it's apparently `void`
[20:05:06] <FromDiscord> <Rika> concepts spicy
[20:05:43] <FromDiscord> <Ayy Lmao> Yeah I'm finding them hard to wrap my head around but I like the idea. Is anyone using them extensively?
[20:07:04] <FromDiscord> <Rika> i bet this is a bug of some sorts
[20:24:40] <FromDiscord> <Cark> sent a code paste, see https://play.nim-lang.org/#ix=3xyF
[20:24:58] <FromDiscord> <Cark> there is no r =)
[20:25:17] <FromDiscord> <Rika> look at the filename
[20:25:22] <FromDiscord> <Rika> its not your module
[20:25:53] <FromDiscord> <Cark> yeah but ".nim(32, 18) template/generic instantiation of `new` from here" which is the line with nex(ImageDataRef)
[20:26:04] <FromDiscord> <Cark> (edit) "nex(ImageDataRef)" => "new(ImageDataRef)"
[20:26:55] <FromDiscord> <Cark> what i'm trying to achieve : those init functions are returning regulare objects
[20:27:13] <FromDiscord> <Cark> and i want these to be in those refs
[20:27:29] <FromDiscord> <Cark> (edit) "regulare" => "regular"
[20:28:48] <FromDiscord> <Cark> the program works correctly despite the warning, but i can't leave a warning dangling there, there must be a correct way to do this
[20:34:48] <FromDiscord> <Rika> pmunch: I forgot, i also implemented a dither https://pippin.gimp.org/a_dither/
[20:35:46] <FromDiscord> <Rika> actually it still recommends void and cluster for speed
[20:43:34] <FromDiscord> <Cark> from the height of my ignorance i'll call this a compiler bug and disable the warning there
[20:44:23] <FromDiscord> <gerwy> How can i read some specific place in file?
[20:44:40] <FromDiscord> <gerwy> without looping over every line
[20:46:43] <FromDiscord> <Rika> specific place as in specific byte? setposition
[20:49:35] <FromDiscord> <gerwy> i mean like, i know the line, and how many characters i want to get from it
[20:49:56] <FromDiscord> <gerwy> ah in streams?
[20:51:15] <FromDiscord> <Cark> there is no getting to a line in a text file without scanning for it, unless you have an index of some sort
[20:51:50] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[20:52:34] *** Joins: xet7 (~xet7@user/xet7)
[20:53:26] <FromDiscord> <Rika> "lines" do not exist in files
[20:53:33] <FromDiscord> <Rika> you need to know the exact byte
[20:53:39] <FromDiscord> <Rika> and if you dont then you need to scan the whole file
[20:53:58] <FromDiscord> <Rika> well, the file until the specific line more accurately
[20:54:05] <FromDiscord> <gerwy> and it works Thanks<3
[20:54:27] <FromDiscord> <gerwy> In reply to @Rika "you need to know": and i know it so its working
[21:18:15] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[21:20:39] <FromDiscord> <tandy> I have overloaded a function from a library i have `include`d and i get this warning `overloaded '' leads to ambiguous calls`, anything i could do to stop it?
[21:23:05] <FromDiscord> <haxscramper> Use import
[21:23:09] <FromDiscord> <Rika> are you sure what you wrote is an overload? check the types and if they are aliases
[21:23:31] <FromDiscord> <haxscramper> First solution, otherwise what is the problem you are trying to solve with `include` specifically?
[21:27:46] <FromDiscord> <tandy> i have tried another solution for now, but im using that to import types, etc
[21:29:43] <FromDiscord> <haxscramper> Using `include` is highly discoraged unless you want it's specific functionality. `import` is preferred in almost all use cases
[21:30:28] <FromDiscord> <haxscramper> And unconstrained use of `include` can easily lead to this specific error you are getting (overloaded function and ambiguous calls)
[21:30:51] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:31:59] *** Joins: flynn (~mcbloch@user/flynn)
[21:32:04] <FromDiscord> <tandy> what is its specific functionality?
[21:32:15] <FromDiscord> <haxscramper> include does dumb copy-paste of the code
[21:33:00] <FromDiscord> <haxscramper> thus you can split file into multiple small ones without need to import-export "internal" things
[21:33:26] <FromDiscord> <haxscramper> compiler uses this for `sem` implementation that would otherwise be around 15k SLOC total (\~)
[21:33:26] <FromDiscord> <tandy> oh interesting
[21:33:34] <FromDiscord> <haxscramper> Also `system` does `include` for certain parts
[21:33:49] <FromDiscord> <haxscramper> But if you do `include` anything twice it would declare it's contents twice as well
[21:33:58] <FromDiscord> <haxscramper> Because it is a dumb copy-paste
[21:35:42] <FromDiscord> <haxscramper> And if you have copy-pasted things twice, it naturally leads to ambiguous overloads, because there is actually multiple identical implementations in the same scope
[21:35:43] <FromDiscord> <haxscramper> So try `import` first, if it fails somewhere else check whether you have appropriate export markers in place
[21:37:36] <FromDiscord> <tandy> im just using it so i dont have to import something multiple times across a large codebase
[21:37:43] <FromDiscord> <tandy> so i just include it in a file where its always needed
[21:37:53] <FromDiscord> <haxscramper> Yes, that's the wrong usage
[21:37:54] <FromDiscord> <tandy> then i import that file and i can access its stuff
[21:38:08] <FromDiscord> <haxscramper> We have `import`/`export` pair for that
[21:38:53] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xz2
[21:39:41] <FromDiscord> <haxscramper> A little more tedious to write, but you control what is being exported etc. But mostly you need to use `import-export` because `include` is just was not meant for that
[21:43:44] <FromDiscord> <tandy> i see
[21:48:59] <FromDiscord> <tandy> i dont really know how to fix that atm, but il add it to my todo
[21:51:20] <FromDiscord> <Clonkk> What would be the "best" way to get a typedesc based on an enum value ?
[21:52:09] <FromDiscord> <haxscramper> as in `nnkSym` with `skEnumField` to `typedesc[EnumType]`?
[21:52:39] <FromDiscord> <haxscramper> Probably `getType()`, `getImpl()`, `getTypeImpl()` in random combinations will get you there after some tries
[21:52:56] <FromDiscord> <Clonkk> As in, I have a runtime integer -\> enum vamue and ideally I'd like to use a typedesc
[21:54:02] <FromDiscord> <haxscramper> I don't exactly understand what exactly you want to use typedesc for
[21:54:16] <FromDiscord> <haxscramper> Automate writing of `int -> enum` mapping?
[21:54:31] <FromDiscord> <haxscramper> Or map `int` to typedesc
[21:54:46] <FromDiscord> <deech> How do I set the Nim C++ compiler? I have both `clang` and `gcc` and want to switch between them.
[21:55:12] <FromDiscord> <Clonkk> I have a numpy array obtained from a big Nimpy black box (that can't easily be ported to Nim for now) that I convert to `pt UncheckedArray[T]` for some supported types.
[21:56:12] <FromDiscord> <Clonkk> So from a PyObject (in Nim) I can access the attributes `num` of the dtypes (which is an integer); and this enum would ideally be converted to a typedesc to be used for type dispatch / generic obect creation (if possible)
[21:56:24] <FromDiscord> <Clonkk> `when defined(cpp):`â†µ(@deech)
[21:56:43] <FromDiscord> <Yardanico> gcc.cpp.exe
[21:56:43] <FromDiscord> <Clonkk> To check if it exists
[21:56:44] <FromDiscord> <Clonkk> -b\:cpp for backend switch
[21:56:48] <FromDiscord> <Yardanico> and gcc.cpp.linkerexer
[21:56:49] <FromDiscord> <Yardanico> (edit) "gcc.cpp.linkerexer" => "gcc.cpp.linkerexe"
[21:57:06] <FromDiscord> <Yardanico> ah right
[21:57:10] <FromDiscord> <deech> So something like `switch("gcc.cpp.exe", "clang")`?
[21:57:11] <FromDiscord> <Yardanico> you just want to switch between clang and gcc right?
[21:57:16] <FromDiscord> <Yardanico> In reply to @deech "So something like `switch("gcc.cpp.exe",": nonono, it's not needed in your case
[21:57:25] <FromDiscord> <Yardanico> just do nim cpp --cc:clang to use clang++
[21:57:30] <FromDiscord> <Yardanico> and nim cpp --gcc:gcc to use g++ (default)
[21:57:39] <FromDiscord> <Yardanico> (edit) "--gcc:gcc" => "--cc:gcc"
[21:58:04] <FromDiscord> <deech> Nice! Thanks!
[21:59:04] <FromDiscord> <haxscramper> In that case, you need some form of reverse mapping for enum values via manual annotations. If I understand correctly, you basically need to get "type id to typedesc"
[21:59:14] <FromDiscord> <Clonkk> Yup
[21:59:16] <FromDiscord> <Clonkk> Basically
[22:00:30] <FromDiscord> <haxscramper> In cases like these, the simplest form would be to just declare `func as(npBox: NumpyBox, target: typedesc[T]): T = npBox.unpackForTypeT(T)`. SO you can write `np[0, 2] as float`
[22:00:44] <FromDiscord> <haxscramper> But some form of manual wrapping has to be done
[22:00:59] <FromDiscord> <haxscramper> You can automate construction of the `as` using templates for example
[22:01:23] <FromDiscord> <RattleyCooper> Are the nightly builds fairly stable?  Not exactly sure what to expect but want to give it a shot so I can use a couple libraries that require nim >= 1.5 .
[22:01:24] <FromDiscord> <haxscramper> And do runtime validation of the input data, to make sure it matches ID
[22:02:46] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3xz6
[22:03:22] <FromDiscord> <haxscramper> Or `float from <numpy box>` if you want it differently
[22:04:03] <FromDiscord> <haxscramper> Usually stuff either builds and runs correctly or does not even compileâ†µ(@RattleyCooper)
[22:04:12] <FromDiscord> <haxscramper> So there are not hidden unstable runtime footguns
[22:04:14] <FromDiscord> <Clonkk> Yeah, okay I get the gist
[22:04:59] <FromDiscord> <RattleyCooper> In reply to @haxscramper "So there are not": Thanks!
[22:05:28] <FromDiscord> <Clonkk> I was hoping I could construct something like `nnkBrakcetExpr(eqIdent "typedesc", eqIdent "int8") inside a big `case of\`\` but I can't use that as a generic
[22:15:21] *** Quits: euantorano (sid180289@id-180289.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[22:15:30] *** Joins: euantorano (sid180289@id-180289.helmsley.irccloud.com)
[22:37:56] *** Quits: watzon (~Thunderbi@136.36.149.145) (Quit: watzon)
[22:44:42] *** Joins: watzon (~watzon@136.36.149.145)
[22:45:18] <arkanoid> Is it possible to have an inner "aux" proc that is a importc?
[22:46:59] <arkanoid> I mean proc foo() =proc aux() {.importc: "foo".} aux()
[22:59:06] <FromDiscord> <haxscramper> yes, the only limitation on inner procs it that they can't be exported
[23:01:22] *** Quits: watzon (~watzon@136.36.149.145) (Quit: WeeChat 3.2)
[23:12:08] <FromDiscord> <tandy> can you parse an int64 from a string?
[23:17:34] *** Joins: watzon (~watzon@136.36.149.145)
[23:17:50] <FromDiscord> <haxscramper> `std/strutils.parseInt()`
[23:26:09] <FromDiscord> <RattleyCooper> What's the deal with custom pragmas on a type def?  If I try to turn a TypeSection/TypeDef into a statement list I get an illformed AST error even though it appears to be valid?
[23:26:15] <FromDiscord> <RattleyCooper> sent a code paste, see https://paste.rs/EjM
[23:26:59] <FromDiscord> <RattleyCooper> This works, but if you try to apply `{.t.}` to the `Bob` typeDef it errors out
[23:27:13] <FromDiscord> <RattleyCooper> `type Bob {.t.} = ref object of RootObj`
[23:27:37] <arkanoid> Thanks!
[23:28:25] <FromDiscord> <RattleyCooper> Am I missing something here?  I thought that it was having issues with the pragma details not existing but even if I modify the AST to add the pragma details and make sure the type is in a `typeSection`, it still says it's illformed AST
[23:29:28] <FromDiscord> <RattleyCooper> I need to add some boilerplate code after my `typeDef`s
[23:30:04] <FromDiscord> <RattleyCooper> I'm not actually declaring types in a proc, was just doing that so I could get the full AST with the pragma in the treeRepr
[23:31:32] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[23:54:49] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[23:56:04] *** Joins: flynn (~mcbloch@user/flynn)
