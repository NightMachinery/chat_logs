[00:03:24] <shka> Posterdati: this depends on the webpage
[00:03:35] <shka> and i hate to say it
[00:03:41] <shka> but sometimes it is just impossible
[00:04:16] <Posterdati> is what I feared
[00:04:22] <Posterdati> thanks!
[00:06:58] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:14:28] <jcowan> How common is it to use (disembodied, not on a symbol) plists rather than alists?
[00:14:47] <shka> jcowan: depends on the context
[00:15:01] <jcowan> As for example?
[00:15:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:15:56] <shka> if by "using" you mean using getf, it is reasonably common if you have function with &rest argument
[00:16:17] <shka> because it is handier to write (function :a 1 :b 2 :c 3)
[00:16:23] <shka> then, for instance
[00:16:44] <shka> (function '((:a . 1) (:b . 2 ) (:c . 3)))
[00:17:07] <jcowan> Agreed, but isn't that what &key is all about?  When do you need to process them yourself?
[00:17:50] <shka> yes, but sometimes you don't know ahead of time what keys are getting passed
[00:18:00] <shka> especially for generic functions
[00:19:16] <shka> (defgeneric fun (&rest all &key &allow-other-keys)
[00:19:26] <shka> but that's besides the point
[00:19:43] <jcowan> Actually I think it is the point, but okay.
[00:20:01] <shka> i think that this kind of use case is the most common for the plists
[00:20:56] <shka> it is from what i noticed used less often for actually long term storing of dictionaries
[00:21:09] <shka> i guess because it is handier to iterate and modify alists
[00:21:23] <shka> and dicts offer O(1) read and write
[00:21:29] <shka> *hash-tables
[00:21:30] <shka> sorry
[00:21:33] <shka> no dicts :D
[00:21:58] <shka> jcowan: those this answer your question?
[00:22:46] <jcowan> "Dicts" in Scheme-to-be are a generic interface to key-value stores, including HAMTs, alist, and hashtables.
[00:23:04] <shka> yeah, sorry about that
[00:23:11] <jcowan> np
[00:23:19] <shka> my language slipped
[00:23:37] <jcowan> Allowing plists as a kind of dict means that () can be either an empty alist or an empty plist, you don't know which.
[00:24:02] <shka> could be also false boolean :-)
[00:24:17] <shka> in cl, that is
[00:24:36] <shka> because no distinct boolean type
[00:24:56] <shka> anyway, i hope that this explains everything
[00:28:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[00:32:38] <Bike> i think disembodied plists are uncommon now but used to be way more common.
[00:43:47] <AnimalClatter> If I recall correctly, Common Lisp Recipes makes the point that plists have a simplicity and readability that would lend themselves to, e.g., a config file
[00:48:04] <jcowan> But it looks to me that using plists as generic k/v stores doesn;t make much sense
[00:49:01] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[00:49:46] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[00:50:06] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[00:50:24] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[00:53:04] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[00:53:42] <mfiano> correction: hash tables offer O(1) read and write _on average_
[00:55:45] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 250 seconds)
[00:57:04] *** Joins: dsk (~dsk@user/dsk)
[00:57:41] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 255 seconds)
[00:59:41] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:00:28] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:02:22] *** Joins: silasfox (~sbv@165.56.184.236)
[01:04:02] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Read error: Connection reset by peer)
[01:04:20] <mfiano> jcowan: I would say it is very common, moreso than alists.
[01:05:18] <jcowan> it = pkists?
[01:05:23] <mfiano> Yes
[01:05:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:05:32] <mfiano> In combination with #'APPLY for example, especially if you want to override just a single key/value (earlier ones take precedence)
[01:05:52] <mfiano> Which avoids the linear search (just push a new pair)
[01:06:15] <jcowan> equally true of alists
[01:06:40] <mfiano> A lot of the Common Lisp API makes use of APPLY'ing functions to plists though
[01:07:09] <mfiano> (apply #'make-instance my-plist :allow-other-keys t) for example
[01:07:57] <jcowan> right
[01:08:28] <mfiano> or (apply #'some-func :a "new-value" '(:a "a" :b "b" :c "c")
[01:08:29] <jcowan> But itd still specialized to keyword args
[01:09:32] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:10:07] <mfiano> They make complex DSL's lighter and easier to parse in my experience too.
[01:10:39] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[01:11:05] *** Joins: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de)
[01:11:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:13:23] *** Joins: pjb (~pjb@user/pjb)
[01:13:42] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[01:21:49] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[01:26:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[01:45:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:47:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:48:23] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Ping timeout: 245 seconds)
[01:50:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:56:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:11:07] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[02:13:01] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.0.1)
[02:13:55] *** Quits: silasfox (~sbv@165.56.184.236) (Ping timeout: 255 seconds)
[02:14:42] *** Joins: silasfox (~sbv@165.56.184.236)
[02:20:20] *** Quits: gaqwas (~john@dynamic-077-002-070-022.77.2.pool.telefonica.de) (Ping timeout: 268 seconds)
[02:23:10] *** Quits: PuercoPop (~user@190.237.88.161) (Remote host closed the connection)
[02:31:09] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[02:31:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:33:02] *** Quits: frgo (~frgo@p200300deef181d003c3efe8a0799d48f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:33:30] *** Joins: frgo (~frgo@p200300deef181d005042a47c27277884.dip0.t-ipconnect.de)
[02:38:02] *** Quits: silasfox (~sbv@165.56.184.236) (Ping timeout: 265 seconds)
[02:39:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[02:39:46] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:44:04] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[02:44:50] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:44:57] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[02:45:11] *** Joins: jmhimara (~jmhimara@170.39.139.5)
[02:45:29] <lotuseater> How can I specialize the element type of an array after initializing?
[02:45:49] <NotThatRPG> Is there a CL library that has an equivalent of the Unix "find" utility?  Or something like the (admittedly kind of scary) perl find library?
[02:46:06] <NotThatRPG> lotuseater: I don't think you can do that.
[02:46:30] <xach> NotThatRPG: i don't know of one
[02:47:08] <NotThatRPG> @xach: Given the mismatches in the various CL interfaces to the file system, that isn't entirely surprising, but it is kind of disappointing.
[02:47:26] <lotuseater> NotThatRPG: also good to know ^^
[02:47:53] <NotThatRPG> lotuseater: I think that would be a CHANGE-CLASS kind of thing to do...
[02:48:44] <lotuseater> ha yes I could try when it comes to that. there's no #'(setf array-element-type) in default
[02:49:10] <Bike> there is no way to do that. adjust-array is how you change arrays, but there's no defined behavior for changing element type
[02:49:53] <lotuseater> but not defined doesn't directly mean not possible
[02:50:16] <Bike> it means not possible in a conforming program
[02:50:27] <lotuseater> yes okay thx :)
[02:50:36] <Bike> and in general implementations won't allow it
[02:50:39] <Bike> as far as i know
[02:50:50] <lotuseater> NotThatRPG: did you work through the circle-ellipse problem sometime?
[02:51:24] <xach> NotThatRPG: i've been using wild-inferiors to look through file trees but not in very complicated ways
[02:52:23] <lotuseater> so expanding at compiletime and throw an error if it won't be specialized by pushing some value
[02:52:56] <NotThatRPG> lotuseater: You mean for CHANGE-CLASS. I did once upon a time have a real use for CHANGE-CLASS, but I can't for the life of me remember what it was.
[02:54:45] <xach> change-class can be pretty handy
[02:54:48] <NotThatRPG> @xach: Not tasty, but it works: (uiop:run-program (format nil "find ~a -type f -name \"*run-all.lisp\" -print" (namestring (asdf:system-relative-pathname "shop3" "examples/"))) :output :lines)
[02:55:11] <lotuseater> circle-ellipse is of much usecase ^^
[02:55:47] <xach> NotThatRPG: (directory (system-relative-pathname "shop3" "examples/**/*run-all.lisp")) is what I'd use
[02:56:30] <NotThatRPG> @xach: that is much neater! thanks!
[02:56:40] <lotuseater> xach: I once asked friends "so can your Java (or another blub) change classes in such a way at runtime?" :D
[02:58:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[02:58:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:58:59] <pve> NotThatRPG: there is also cl-fad:walk-directory
[02:59:52] <NotThatRPG> pve: Would that work? I have stopped using CL-FAD because it isn't able to identify when a directory entry is a file or a subdirectory (because it is too trusting of the form of CL pathnames).
[03:00:45] <pjb> Bike: I beg to differ.  adjust-array lets you change the element-type, with the constraint that: If element-type is supplied, the consequences are unspecified if the upgraded array element type of element-type is not the same as the actual array
[03:00:45] <pjb> element type of array.
[03:01:53] <pjb> So (let ((a (make-array 3 :element-type '(integer 3 10) :initial-element 10))) (adjust-array a (array-dimensions a) :element-type '(integer 10 100))) #| --> #(10 10 10) |#  is perfectly conforming AFAICS.
[03:02:35] <pjb> (let ((a (make-array 3 :element-type '(integer 3 10) :initial-element 10))) (adjust-array a (array-dimensions a) :element-type '(integer  100 200))) #| --> #(10 10 10) |# might also be, until the printer tries to read the elements.
[03:04:12] <pve> NotThatRPG: i guess you could double check in the function given to walk-directory with better definition of what a directory is, and then call walk-directory recursively
[03:04:41] <pjb> lotuseater: so (let ((a (make-array 3 :element-type '(integer 3 10) :initial-element 10))) (adjust-array a (array-dimensions a) :element-type '(integer 10 100)))
[03:05:09] <NotThatRPG> pve: I will have a look, thanks. I should probably double-check UIOP and make sure it does not have such a beast in it.
[03:05:38] <pve> NotThatRPG: or write your own walk-directory, it should be like 10 lines..
[03:05:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[03:05:55] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:06:27] <pve> NotThatRPG: uiop at least has a definition for how to identify directories, it's what I use in my own walk-directory
[03:06:30] <NotThatRPG> pve: uiop:collect-sub*directories looks like it will do the job.
[03:06:59] <NotThatRPG> pve: Yes, that's right, because it can't be done in pure CL, and i think CL-FAD is pure CL.
[03:07:02] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[03:07:44] <NotThatRPG> pve: Even the superhuman Fare could not make symlinks work consistently across lisps, though!
[03:08:12] <pve> NotThatRPG: I meant uiop:directory-pathname-p, no idea if it consistently
[03:08:18] <pve> *works
[03:09:58] <NotThatRPG> pve: Alas, no: "Note that this does _not_ check to see that pathname points to an actually-existing directory. "
[03:10:13] <NotThatRPG> (from the directory-pathname-p docstring).
[03:10:39] <lotuseater> thx pjb :)
[03:10:49] <pve> NotThatRPG: and symlinks will break it somehow?
[03:10:50] <NotThatRPG> pve: We may be in IOLIB territory here.
[03:11:20] <NotThatRPG> pve: If I recall correctly, CCL either always or never follows symlinks.
[03:11:48] <NotThatRPG> There's a longstanding ASDF bug related to this, that I don't believe we can fix.
[03:15:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:18:07] <pve> NotThatRPG: can you help me understand what exactly causes the problem (it's a bit late here)? If I symlink a directory into another directory foo and then walk-directory foo, it walks into the symlinked directory and finds its files like I would expect
[03:18:19] <pve> on ccl
[03:18:31] <pve> are you saying it might not work on sbcl?
[03:18:51] <NotThatRPG> If I recall correctly (and I could be wrong), there is no way to tell CCL *not* to follow the symlinks.
[03:19:23] <pve> ohh, and find has an option to not follow symlinks?
[03:20:40] <NotThatRPG> Yes, and I think there are ways that aggressively following symlinks can cause a mess in some ASDF link farms.
[03:22:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:22:42] <NotThatRPG> Here's an example: https://gitlab.common-lisp.net/asdf/asdf/-/issues/65
[03:23:07] <pve> ok, I see now.. well if it makes a difference, cl:directory in my ccl version does have a :follow-symlinks keyword parameter
[03:24:10] <pve> oh, they tested that in the issue
[03:40:15] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:41:37] *** Quits: random-nick (~random-ni@87.116.179.136) (Ping timeout: 258 seconds)
[03:50:03] *** Joins: zacts (~zacts@user/zacts)
[03:58:14] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[03:59:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[04:07:54] *** Quits: pve (~pve@188-67-169-112.bb.dnainternet.fi) (Quit: leaving)
[04:20:08] *** Quits: jmhimara (~jmhimara@170.39.139.5) (Quit: Client closed)
[04:21:21] *** Joins: jmhimara (~jmhimara@170.39.139.5)
[04:37:10] *** Quits: jmhimara (~jmhimara@170.39.139.5) (Quit: Client closed)
[04:41:00] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:42:04] *** Quits: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:43:48] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[04:57:14] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:05:32] <jeosol> NotThatRPG: lol at "superhuman Fare" ...
[05:10:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[05:12:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[05:14:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:16:45] <jeosol> btw, I do agree with the superhuman part of the statement ...
[05:18:49] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[05:46:02] *** Joins: zacts (~zacts@user/zacts)
[05:46:03] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 265 seconds)
[05:51:17] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[05:59:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[06:02:20] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[06:03:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[06:14:54] <NotThatRPG> jeosol: I have looked at a lot of Fare's code and it is superhuman. His ability to keep track of the idiosyncrasies of all the different implementations is astounding.
[06:15:13] *** NotThatRPG is now known as NotThatRPG_away
[06:15:29] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[06:15:40] *** Quits: NotThatRPG_away (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[06:16:18] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[06:16:37] <jeosol> @NotThatRPG: I agree with you. I started asking him questions many years ago, and even now that he moved to Gerbil scheme, he is still able to give me good pointers regarding asdf and poiu. His advice and pointers have been helpful
[06:18:25] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[06:22:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[06:27:54] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[06:37:51] *** Quits: citizenajb (~citizenaj@216.13.217.230) (Quit: Client closed)
[06:43:48] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[06:58:27] *** Joins: jmhimara (~jmhimara@170.39.139.5)
[07:10:02] *** Joins: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9)
[07:13:07] *** Joins: pegaso (~reis-r@131.72.121.77)
[07:17:27] *** Joins: prxq_ (~quassel@x4db9618d.dyn.telefonica.de)
[07:21:20] *** Quits: prxq (~quassel@dynamic-077-012-093-241.77.12.pool.telefonica.de) (Ping timeout: 255 seconds)
[07:22:22] *** mister_m` is now known as mister_m
[07:22:39] *** Joins: asarch_ (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3)
[07:25:19] *** Quits: asarch (~asarch@2806:10ae:7:e1:da06:3f53:fc11:16e9) (Ping timeout: 268 seconds)
[07:34:01] <beach> Good morning everyone!
[07:34:34] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b01f:b572:7caa:3058:2c13:83d4)
[07:37:37] <pegaso> good morning
[07:47:32] <beach> pegaso: Are you new here?  I don't recognize your nick.
[07:51:05] <beach> cheers: With respect to SICL, I don't like to give estimates.  You should definitely not try it yet.  Most of the code is written.  Register allocation is done.  Code generation is next.  And there are some parts of bootstrapping that still need to be designed.
[07:54:08] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[07:56:53] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 255 seconds)
[07:57:07] *** Quits: jmhimara (~jmhimara@170.39.139.5) (Quit: Client closed)
[07:58:39] <jeosol> Good morning beach. Congratulations on that news
[07:59:00] <beach> jeosol: Thanks.
[07:59:07] <jeosol> Haven't been here much, but good to know that SICL has progressed a lot further
[07:59:16] <jeosol> Really great news
[07:59:37] <beach> It is being worked on every day, but the task is not trivial.
[08:00:20] <jeosol> I was in the weeds a few weeks ago, looking into parallel build with poiu and google's bazelisp systems - the latter too heavy from what I told by goggle guys
[08:00:36] <recordgroovy> #:trivial-task
[08:01:08] <jeosol> beach: I started delving more deep into program internals, following some MIT courses, and one topic with Julia about auto-boxing at all. I then remember your callsite optimization paper
[08:01:40] <beach> That's one of my better ideas I think.
[08:05:52] <beach> It's a strange feeling in that I execute SICL code every day, so most of the code has been "tested" in that it goes through the bootstrapping steps that we currently have.  Yet, we have no executable to show to the world yet.
[08:08:09] <beach> I mean, the bootstrapping code does some pretty essential stuff like all the MOP machinery of computing effective slots, class precedence lists, effective methods, and discriminating functions.  And it does this for a large number of generic functions.
[08:12:47] <beach> And SICL uses the MOP machinery everywhere, because only a handful of classes are not standard classes.  SICL classes such as SYMBOL, PACKAGE, ARRAY, are all standard classes.  And functions such as EQUAL and EQUALP, and also all the slot accessors like SYMBOL-NAME etc. are generic functions.
[08:12:56] <jcowan> In short, the sicl bootstrap is a large CL program with a specialized purpose.
[08:13:00] <beach> I know _death said EQUAL and EQUALP should not be extensible, but they are written this way for reasons of modularity.
[08:15:03] <jcowan> I understand why not: if you are allowed to add methods to EQUALP, you break its contract.
[08:15:06] <beach> Not that large actually.  Currently, the bootstrapping code consists of around 4kLOC, including a GUI-based backtrace inspector.
[08:15:19] * jcowan nods
[08:15:45] <beach> Yes, I might seal EQUAL etc.
[08:16:16] *** Joins: derelict (~derelict@user/derelict)
[08:16:52] <beach> And the bootstrapping code contains a lot of duplication that we will eventually get rid of.
[08:19:46] <jcowan> I think you have to seal every function from T to (generalized-)boolean
[08:20:23] <beach> I don't know what that means.  But then, I haven't finished my morning coffee yet.
[08:24:07] <jeosol> @beach: Great list of things that have been implemented. This will help the language see some resurgence in some fashion given it could be a good general base for the other implementations (with time) and development efforts can be pushed in other directions
[08:24:51] <jcowan> As an example, NUMBERP's signature is "numberp object => generalized-boolean".  You don't want to permit a method on it that maps pairs to T, or worse yet to "What, me worry?"
[08:25:07] <jcowan> so anything with that signature or a related signature needs to be considered for sealing.
[08:25:33] <beach> jeosol: Thanks.  Yes, I think I need to make the bootstrapping technique applicable to other implementations.
[08:25:49] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 246 seconds)
[08:25:56] <Bike> oh, "i think you have to seal type predicates"
[08:26:06] <Bike> or at least i can't think of any functions that describes that aren't type predicates
[08:26:18] <beach> jcowan: I would just seal the generic function as a whole.
[08:26:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[08:26:40] <jcowan> also eq and friends
[08:26:55] <beach> EQ is not generic.
[08:27:52] <beach> Bike: What's the quotation from?
[08:28:15] <Bike> nothing. that's my interpretation of "you have to seal every function from T to generalized-boolean"
[08:28:31] <beach> Oh, I see.  I still haven't understood that one.
[08:28:35] <Bike> like, "for every function with an argument of type T and return value of type generalized boolean, that function must be sealed"
[08:28:54] <beach> Since neither T nor generalized-boolean are functions.
[08:29:04] <jcowan> On the other hand, if you want to add classes that actually represent numbers (quaternions, Gaussian integers, etc.) you may indeed want to unseal NUMBERP to include them.
[08:29:11] <Bike> right but there are functions of type (function (t) generalized-boolean)
[08:29:15] <Bike> like numberp
[08:29:19] <jcowan> Exactly
[08:29:22] <Bike> and those have to be sealed
[08:29:32] <Bike> although really it would probably be easier to list what doesn't have to be sealed.
[08:29:47] <beach> I am starting to understand.
[08:30:01] <Bike> do any implementations actually allow extended numbers?
[08:30:13] <Bike> several have extended sequences, but i dunno if there are ones with other stuff like that
[08:30:36] <beach> I am not sure about the "have to".  Perhaps a "don't do that then" is enough.
[08:31:22] <beach> I am not a strong believer in trying to cater to incompetent programmers.
[08:31:43] <Bike> well, you would kind of have to go out of your way to mess up numberp or whatever
[08:31:54] <Bike> but on the other hand if you could do that it might screw up safety, which you don't want
[08:31:55] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[08:32:03] <Bike> like if a compiler definition gets out of sync with the actual runtime definition or something
[08:32:36] <beach> Sure, for CLOSOS, those considerations are much more important.
[08:51:20] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:53:23] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b01f:b572:7caa:3058:2c13:83d4) (Quit: Leaving)
[08:55:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[08:56:56] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:19:05] *** Joins: reis-r (~reis-r@131.72.121.77)
[09:19:36] *** Quits: pegaso (~reis-r@131.72.121.77) (Ping timeout: 252 seconds)
[09:29:57] *** Joins: pjb (~pjb@user/pjb)
[09:57:22] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 252 seconds)
[09:57:26] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[09:57:36] *** Joins: raeda (~raeda@72.49.219.33)
[10:02:44] *** Joins: mariari (~mariari@user/mariari)
[10:07:19] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 258 seconds)
[10:20:13] *** Joins: gaqwas (~john@dynamic-077-004-085-046.77.4.pool.telefonica.de)
[10:30:34] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[10:32:56] *** Joins: mariari (~mariari@user/mariari)
[10:41:22] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:44:50] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[10:45:48] *** Quits: asarch_ (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3) (Remote host closed the connection)
[10:45:59] *** Joins: shka (~herr@109.231.62.239)
[10:46:08] *** Joins: asarch_ (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3)
[10:51:20] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:51:47] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 258 seconds)
[10:54:27] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[10:58:41] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[11:00:04] *** Joins: amb007 (~a_bakic@120.146.204.77.rev.sfr.net)
[11:03:23] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[11:03:29] *** Joins: mariari (~mariari@user/mariari)
[11:12:07] *** Quits: svillemot (~sebastien@rama.villemot.name) (Quit: WeeChat 3.0)
[11:19:04] *** Joins: silasfox (~sbv@165.56.184.158)
[11:21:54] *** Quits: gaqwas (~john@dynamic-077-004-085-046.77.4.pool.telefonica.de) (Ping timeout: 255 seconds)
[11:30:03] *** Joins: cranium (~cranium@user/cranium)
[11:31:42] *** Quits: amb007 (~a_bakic@120.146.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[11:33:03] *** Joins: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr)
[11:33:19] *** Joins: amb007 (~a_bakic@75.106.204.77.rev.sfr.net)
[11:40:20] *** Quits: amb007 (~a_bakic@75.106.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[11:40:48] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[11:41:25] *** Joins: amb007 (~a_bakic@145.197.204.77.rev.sfr.net)
[11:45:51] *** Quits: amb007 (~a_bakic@145.197.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:46:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:46:14] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:46:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:49:59] *** Joins: pve (~pve@37-33-124-163.bb.dnainternet.fi)
[11:57:34] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[11:58:00] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[12:05:06] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[12:12:04] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[12:12:58] *** Joins: pegaso (~reis-r@131.72.121.77)
[12:13:45] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:14:08] *** Quits: reis-r (~reis-r@131.72.121.77) (Ping timeout: 252 seconds)
[12:14:41] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:15:22] *** Joins: domovod (~domovod@176.196.122.197)
[12:19:46] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:19:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:25:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[12:25:59] *** Joins: amb007 (~a_bakic@145.197.204.77.rev.sfr.net)
[12:33:15] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[12:36:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:42:21] *** Joins: svillemot (~sebastien@rama.villemot.name)
[12:43:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:43:51] <flip214> Help, please. What's the difference between these forms? (intersection r l)    (remove-if-not (lambda (l) (member l r)) l)
[12:44:14] <flip214> r and l are lists of structures; the first form returns the expected 10 results, the second only 6 values.
[12:44:57] <beach> Duplicate entries might make a difference.
[12:47:12] *** Joins: selwyn (~selwyn@user/selwyn)
[12:47:13] <beach> Oh, wait.
[12:47:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[12:47:51] <flip214> beach: you seem to be right
[12:48:11] <beach> Yes, I think that's it.
[12:48:16] <flip214> thanks a lot...
[12:48:22] <beach> Sure.
[12:48:25] <flip214> didn't think of that
[12:48:37] <beach> It's easy to forget.
[12:48:39] <flip214> especially as duplicate entries are unexpected here
[12:58:17] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[13:11:34] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[13:13:38] <pjb> (let ((r '(1 2 3 4 1 2 3)) (l '(3 4 5 6 4 5))) (values  (intersection r l)    (remove-if-not (lambda (l) (member l r)) l))) #| --> (3 4 3) ; (3 4 4) |#
[13:14:04] <pjb> duplicate entries make a difference only if you don't consider the result as a set.
[13:14:10] <beach> I think INTERSECTION is underspecified in the standard.
[13:14:16] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[13:14:31] <beach> But maybe I am reading it wrong.
[13:14:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:14:56] <pjb> What is missing is only (defun seq-equal (a b) (and (subsetp a b) (subsetp b a))) ; perhaps more efficiently.
[13:14:57] <gin> Need some advice with this code: https://plaster.tymoon.eu/view/2558 - I am comparing two approaches here. (1) ex-1: A single LET for all lexical variables. (2) ex-2: Multiple nested LETs for defining lexical variables only where they are needed.
[13:15:06] <pjb> s/seq-equal/set-equal/
[13:15:13] <gin> Is one approach better than the other? What is your advice on my plaster link above?
[13:15:39] <pjb> a set-equal function would make it more concrete that there's a set type based on list, like subst and copy-tree make it clear there's a tree type based on lists.
[13:15:57] <beach> gin: You should always aim to minimize the scope of each variable.
[13:16:13] <pjb> gin: yes.  And assume the compiler can optimize things out.
[13:16:32] <pjb> gin: notably, for closures, it may help to have the most limited scopes.
[13:17:07] <gin> pjb: If I assume compiler can optimize things out, then I can stick with ex-1 where a single LET contains all lexical variables, couldn't I?
[13:17:07] <beach> gin: Oh, and this one looks like a case for SPLIT-SEQUENCE.
[13:17:07] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[13:17:55] <beach> gin: It is not a question of compiler optimizations.  It is a matter of how much code the person reading your code has to consider for an occurrence of the variable.
[13:17:57] <gin> beach: thanks! I was thinking that too. But then does it bother anyone that it may lead to multiple nested-LETs making the code harder to parse with eyes? Or is that not a valid concern?
[13:18:29] <beach> Again, you should do what is easier to read.
[13:18:47] <beach> Clearly, if you have tons of nested LETs, that might be a problem too.
[13:18:56] <gin> beach: SPLIT-SEQUENCE from cl-ppcre?
[13:19:11] <beach> I think it is an independent repository.
[13:19:17] <gin> okay thanks
[13:19:50] <beach> I think EX2 is better with respect to newline-position.
[13:20:26] <beach> And I recommend you use LOOP and COLLECT instead of manually pushing to titles.
[13:21:24] <beach> gin: And the COUNT return value is silly.  That should be done by the caller.
[13:22:28] <gin> beach: thanks! I have mentioned in comments at the top that I am making a contrived example to compare my LET-approaches. could not make a more sensible example. I understand that LOOP COLLECT is appropriate here and COUNT is not required.
[13:23:54] <gin> will stick with EX-2 then. I like the approach of minimizing the scope.
[13:23:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[13:24:04] <_death> gin: the nested LETs make it easier to pull the forms out into their own function, for example.. they also make it easier for the reader to know the value of the bindings, considering the alternative is a variable that changes over time
[13:24:26] <beach> (loop for article in articles for newline-position = (position #\Newline article) collect (subseq article 0 newline-position)) with appropriate newlines inserted.
[13:27:22] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:27:34] <beach> gin: A general rule of programming is that a function should do one single thing.  The computation of the length makes the function do two things, which is not good.
[13:28:26] <beach> gin: You might see that more easily if you consider this function as also computing the reverse of the list, the Fibonacci number of the length, etc.
[13:29:03] *** asarch_ is now known as asarch
[13:29:06] <gin> beach: yes. makes sense.
[13:30:08] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[13:34:33] <beach> gin: But, as I recall, you have already programmed before, in other languages.
[13:35:00] <gin> yes
[13:35:08] <beach> So you must already know those rules, i.e., minimize the scope to make life easier for the person reading your code, and make each function do one thing.
[13:35:21] <beach> There is no reason to do it differently in Common Lisp from what you already know.
[13:35:50] <gin> yes I do. just wanted to confirm that nested-LETs are not considered ugly.
[13:36:05] <beach> OK.
[13:39:04] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[13:46:33] *** Quits: amb007 (~a_bakic@145.197.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[13:48:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:48:19] *** Quits: asarch (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3) (Remote host closed the connection)
[13:48:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:48:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[13:51:07] *** Lord_of_Life_ is now known as Lord_of_Life
[13:54:24] *** Joins: asarch (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3)
[13:55:34] *** attila_lendvai_ is now known as attila_lendvai
[14:01:01] <gin> does (length string) take constant time to get the string length?
[14:01:15] <shka> gin: yes
[14:01:40] <gin> thanks shka. Is that true in general too? does it take constant time for any proper sequence?
[14:02:08] <shka> it is not actually defined, but strings are arrays, and arrays have array dimensions
[14:02:14] <shka> or fill pointers
[14:02:18] <gin> ok
[14:02:36] <shka> and as a result any sane implementation would give you length in constant time
[14:02:51] <shka> for lists, it will take O(n)
[14:03:09] <shka> because it has to traverse the whole of the list before returning the result
[14:03:55] <shka> however, list are of type sequence
[14:04:01] <beach> gin: If you think about how lists are represented, you can see that it has to traverse every CONS cell as shka is saying, so there is no way it can be O(1).
[14:04:44] <shka> as the PCL laid it out, there is no list
[14:04:49] <shka> https://gigamonkeys.com/book/they-called-it-lisp-for-a-reason-list-processing.html
[14:06:39] <beach> gin: And if you don't know how lists are represented, it is time to learn that part.  Otherwise, may things will likely confuse you in the future.
[14:08:06] <beach> ... like why (defun push-it (element list) (push element list)) won't "work" as expected.
[14:08:51] <beach> s/may things/many things/
[14:09:27] <shka> PCL chapter i just linked should be helpful in this regard
[14:10:04] <beach> shka: Indeed.  But a significant number of newbies here don't seem to find it useful to read about things like that.
[14:15:47] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[14:30:32] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[14:31:28] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:33:04] *** Quits: frgo (~frgo@p200300deef181d005042a47c27277884.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:33:31] *** Joins: frgo (~frgo@p200300deef181d005042a47c27277884.dip0.t-ipconnect.de)
[14:37:18] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 265 seconds)
[14:42:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:42:59] *** Joins: selwyn (~selwyn@user/selwyn)
[14:59:34] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:03:22] *** Quits: asarch (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3) (Quit: Leaving)
[15:04:24] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:06:10] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[15:06:38] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 255 seconds)
[15:07:22] *** Joins: asarch (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3)
[15:09:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[15:14:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:29:08] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[15:30:16] *** Joins: amb007 (~a_bakic@202.246.204.77.rev.sfr.net)
[15:34:10] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[15:36:20] *** Quits: pegaso (~reis-r@131.72.121.77) (Ping timeout: 255 seconds)
[15:47:13] *** Quits: amb007 (~a_bakic@202.246.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:49:04] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:49:04] *** Quits: engblom (~foo@62-121-47-42.static.lounea.fi) (Read error: Connection reset by peer)
[15:49:28] *** Joins: engblom (~foo@62-121-47-42.static.lounea.fi)
[16:04:15] *** Quits: asarch (~asarch@2806:10ae:7:92d5:3b15:d30e:e2cd:7cd3) (Quit: Leaving)
[16:14:11] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[16:19:45] *** Joins: notzmv (~zmv@user/notzmv)
[16:20:26] *** Joins: cullsure (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net)
[16:20:28] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a44a:8604:b487:1d4e)
[16:21:13] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[16:23:47] *** Joins: IPmonger (~IPmonger@172.58.203.157)
[16:24:02] *** Quits: IPmonger (~IPmonger@172.58.203.157) (Remote host closed the connection)
[16:27:59] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[16:29:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:29:15] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 255 seconds)
[16:30:26] *** Joins: luna-is-here (~quassel@ip-95-223-58-13.hsi16.unitymediagroup.de)
[16:39:43] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[16:43:24] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[16:43:49] *** Joins: Bike (~Glossina@71.69.170.70)
[16:43:49] *** ChanServ sets mode: +o Bike
[16:45:33] *** Quits: luna-is-here (~quassel@ip-95-223-58-13.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[16:45:48] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:47:31] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[16:54:17] *** Joins: lisp123 (~lisp123@45.130.83.200)
[17:14:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:15:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:21:44] *** Joins: derelict (~derelict@user/derelict)
[17:24:36] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 255 seconds)
[17:25:37] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[17:35:28] *** Joins: zacts (~zacts@user/zacts)
[17:35:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:56:48] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:00:09] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[18:03:48] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 258 seconds)
[18:07:19] *** Joins: domovod (~domovod@89.113.143.153)
[18:13:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:17:30] *** Quits: domovod (~domovod@89.113.143.153) (Ping timeout: 252 seconds)
[18:19:39] *** Joins: domovod (~domovod@89.113.143.153)
[18:31:33] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:44:06] *** Quits: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[18:45:04] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[18:47:56] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[18:49:52] *** Quits: domovod (~domovod@89.113.143.153) (Quit: WeeChat 3.2)
[18:51:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:51:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:52:08] *** Joins: zacts18 (~zacts@user/zacts)
[18:52:11] *** Quits: zacts18 (~zacts@user/zacts) (Client Quit)
[18:59:53] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[19:14:32] *** Quits: silasfox (~sbv@165.56.184.158) (Ping timeout: 256 seconds)
[19:15:18] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[19:15:20] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[19:37:01] *** Joins: lisp123 (~lisp123@45.130.83.200)
[19:45:37] *** Quits: djuber (~user@65.79.128.64) (Read error: Connection reset by peer)
[19:46:36] *** Joins: silasfox (~sbv@165.56.184.158)
[19:57:22] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[19:58:31] *** Joins: lisp123 (~lisp123@45.130.83.200)
[20:00:19] *** Joins: zacts (~zacts@user/zacts)
[20:01:34] *** Joins: domovod (~domovod@176.196.122.197)
[20:03:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:06:02] *** Quits: silasfox (~sbv@165.56.184.158) (Ping timeout: 252 seconds)
[20:09:48] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:12:44] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[20:14:39] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[20:16:19] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[20:31:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[20:35:47] <lisp123> Any good resources to learn algorithms when working with trees and also searching / traversing across trees & nodes?
[20:37:52] <beach> Aho Hopcroft Ullman, "The Design and Analysis of Computer Algorithms" is the classic text.
[20:38:05] *** Joins: dsk (~dsk@user/dsk)
[20:38:09] <lisp123> beach: thank you! <3 :)
[20:38:57] <beach> Apparently, they also wrote "Data Structures and Algorithms" later.  I haven't read that one.
[20:39:41] <lisp123> Google brought that one up as well, I will read TDACA first
[20:39:54] <beach> Be careful with any old book on data structures and algorithms.  I estimate around half of published books get a simple thing like binary search wrong.
[20:40:13] <beach> "wrong" in that the published version takes twice the time it needs to.
[20:40:30] <beach> And sometimes "wrong" in that it doesn't work with duplicate elements, etc.
[20:40:57] <lisp123> beach: urgh. Sometimes being published doesn't mean being right I guess :-/
[20:40:59] <beach> These authors get it right as I recall.
[20:41:27] <beach> Publishing houses will print and sell anything you are willing to write, and they fired all the copy editors decades ago.
[20:41:49] <beach> Apress seems to be the exception.  They recruit qualified editors to screen the material.
[20:42:04] <lisp123> Yeah, their business models are coming under fire a lot (especially for technical books)
[20:42:22] <lisp123> Apress has done a great job for Lisp, can't say about other languages
[20:42:27] <jackdaniel> there is an interesting book that touches this topic in polish "przejęzyczenie" (misspell) - it is a set of interviews with well known translators
[20:42:54] <beach> Interesting.
[20:44:01] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[20:44:14] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[20:45:12] <beach> Speaking of which, the reason "Lisp in Small Pieces" is better in its English version, is that the translator is also an experienced editor.  The original publishing house doesn't have staff like that as far as I know.
[20:46:03] <jcowan> Wasn't it also based on revisions made by Q to the original text?
[20:46:34] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[20:47:05] <beach> As far as I remember, it was just the original text.  He later wrote a revised French version, but I don't know more about it.
[20:47:44] <beach> Though, the translation was made interactively, i.e., they met on a regular basis to discuss the material, so it is not a "blind" translation.
[20:48:01] <jcowan> Ah.
[20:49:07] <beach> But the translator had knowledge of Lisp, so was able to introduce improvements because of that as well.
[20:49:18] <hendursaga> beach: what's the (revised) French version called?
[20:49:39] <beach> I actually don't know.  Let me see what I can find...
[20:51:21] <beach> It could be the same title, just a new edition.  But don't quote me on that.
[20:51:52] <hendursaga> beach: OK but what's the French version called, either edition?
[20:52:13] <jcowan> jackdaniel: I saw a list of Russian surnames somewhere that look scary even to Russians because they are of (remote) Polish origin:
[20:52:17] <beach> Les Langages Lisp.
[20:53:24] <hendursaga> Cool. Any other translations you know of?
[20:53:26] <beach> https://www.eyrolles.com/Informatique/Livre/les-langages-lisp-9782729605490/
[20:53:27] <jcowan> Not as clever as the English title, which shows how flexible (twisty) English actually is
[20:54:00] <beach> hendursaga: No, I am familiar with the French one because I used it in a course, and with the English one because I know the translator.
[20:54:24] <hendursaga> beach: wait which came first, the English or the French version?
[20:54:27] <jcowan> jackdaniel: Here's a few of them: "Yastrzhembsky (the diplomat), Krzhizhanovsky (the writer), and even Przhevalsky (of the horse)."
[20:54:42] <beach> hendursaga: The French version is the original.
[20:57:11] <jackdaniel> I think that Russian nicknames are written in cirillic :) that would be Jastrzębski (Hawk-ski), Chrzanowski (horserasish-ski) and Przewalski (bulldoze-ski); sorry for bringing offtopic :)
[20:57:12] <hendursaga> beach: Principes d'implantation de Scheme et Lisp might be the new one??
[20:57:18] <jackdaniel> s/nicknames/surnames/
[20:57:33] <beach> hendursaga: Sounds plausible.
[20:58:09] <hendursaga> See: https://pages.lip6.fr/Christian.Queinnec/WWW/LiSP.html
[20:59:14] <beach> I see.  "slightly revised".
[21:01:10] <hendursaga> I'm now looking through the publisher's catalog, fun books!
[21:10:36] <Bike> a little while back i wrote up this thing for a type-expand extension https://github.com/Bike/clhs-extension/tree/main/type-expand and i was thinking of filing a pull request to add it (i.e. type-expand(-1), not the other) to ECL, but i was wondering if anyone had opinions on typexpand versus type-expand versus typeexpand
[21:10:57] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 255 seconds)
[21:12:01] <yitzi> type-expand
[21:13:32] <jackdaniel> following convention used for macroexpand that would be typeexpand (and typeexpand-1)
[21:14:02] <hendursaga> beach: not sure how complete/accurate this is but.. https://github.com/ilammy/lisp
[21:14:14] <Bike> right, but the double e is weird so maybe it should be type-expand, and alternately maybe it should be typexpand to collapse the double e (this is what sbcl does)
[21:14:19] <Bike> hardest problem in computer science etc
[21:14:41] <yitzi> Plus CL naming is a bit inconsistent.
[21:14:44] <jackdaniel> if sbcl already has that operator, then a pragmatist in me says: skip "e"
[21:15:13] <beach> hendursaga: Yes, I see.
[21:15:35] <hendursaga> I can't really read Russian, heh
[21:15:47] <beach> hendursaga: The title says "Interpretation", which looks strange.
[21:16:44] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[21:23:27] <beach> I vote for type-expand.
[21:23:40] <jcowan> jackdaniel: Sure, I just can't type Cyrillic easily so I do Russian in romanization.
[21:24:28] <jcowan> Part of the trouble is the cyrillicization of "rzh" as such rather than using just zh (or sh)
[21:25:11] <jcowan> So if I happen to mention Przhewalski's horse (rare, but not unknown), I call it "Shevalski's horse" (with silent "p" as usual in English).
[21:25:14] <Bike> ecl actually builds on my home machine without the weird problems about floating point i had before, neat
[21:26:34] <Bike> oh, and other wrinkle, ccl has type-expand (though it is unexported)
[21:27:03] <jackdaniel> perhaps ecl development isn't lightning fast but we are moving forward :)
[21:27:30] <Bike> i think this was probably more an issue with my build environment than ecl. plus i didn't try very hard to figure it out
[21:27:39] <Bike> anyway, time 2 patch
[21:29:13] <Bike> i expect there are very few users of sbcl's typexpand to begin with, so renaming things shouldn't be too horrible if it comes to that
[21:29:55] <lisp123> A philosophical question: How do you choose to order your functions? Say you have A calling B calling C calling D. Do you write D at the top of your file, then C, then B, then A or the other way? Writing bottom up means you will progressively build up the functions so easier to follow (somewhat), whereas writing top down is easier to understand the purpose (since A will contain the main goal, and the remaining functions help it achieve it)
[21:31:24] <mfiano> I suppose it depends if any are proclaimed inline, and if they even belong next to each other (same file, same package, etc)
[21:31:36] <lisp123> same file
[21:31:59] <jackdaniel> they are in the same compilation unit so inlining could take effect either way
[21:32:00] <mfiano> then depends on the design of my program, such as inlining, and intuition
[21:33:28] *** Joins: selwyn (~selwyn@user/selwyn)
[21:34:18] <White_Flame> I have big demarcations between sections of the file, and keep tightly/privately correlated functions together.  Ordering has more to do how commenting works best
[21:34:22] <lisp123> I started doing topdown (start with exported functions and then working one's way down), although I'm finding today if I write literate programs, bottom up is easier
[21:34:45] <lisp123> White_Flame: "how commenting works best" -> that's a great way to look at it
[21:34:59] <White_Flame> any aesthetics of your source code files should be driven by documentation/readability, not the code specifically
[21:35:34] <White_Flame> and that will certainly be relative to the code in question
[21:36:13] <lisp123> White_Flame: Although one could argue having certain conventions (regardless of the code), helps in consistency - if every file is top down for example, then one would come to expect that format, and vice versa
[21:37:02] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[21:44:34] *** Joins: zacts (~zacts@user/zacts)
[21:47:12] <Bike> jackdaniel: if i want to add exported symbols to the EXT package, do i add them in symbols_list.h somewhere or is there a preferred procedure?
[21:52:52] <jackdaniel> yes, you add them to symbols_list.h; also you need to add the function to src/h/external.h with a C name declared in symbols_list.h (i.e cl_type_expand) and src/cmp/proclamations.lsp
[21:53:06] <jackdaniel> Bike: ^
[21:53:20] <Bike> oh, but i wrote the function in lisp, does it still need a C name?
[21:54:04] <jackdaniel> it doesn't, but if it is an exported interface it should (so C programmers may invoke it:)
[21:54:15] <Bike> rrrrright
[21:54:32] <jackdaniel> also you have a gain of direct call instead of dispatching the symbol (in compiled code)
[21:55:47] <jackdaniel> whatever you put in symbols_list as the C name that name will be used in transpiled code; symbols_list.h is arranged alphabetically afair
[21:56:22] <Bike> it has do-deftype followed by create-type-name, so i put it in there
[21:57:59] <jackdaniel> (macros doesn't have C names)
[22:01:53] *** Joins: citizenajb (~citizenaj@216.13.217.230)
[22:07:12] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[22:11:01] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[22:21:27] *** Joins: derelict (~derelict@user/derelict)
[22:23:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[22:28:16] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[22:44:45] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[22:50:20] *** Joins: lisp123 (~lisp123@45.130.83.200)
[22:54:17] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:54:54] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 255 seconds)
[22:55:22] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:57:55] *** Joins: zacts (~zacts@user/zacts)
[23:03:39] <scymtym> Bike: would it make sense for TYPE-EXPAND and TYPE-EXPAND-1 to specify the exceptional situations that TYPE-SPECIFIER is not a valid type specifier and ENV is not an environment?
[23:04:26] *** Joins: jmhimara (~jmhimara@dc-auraria-nat13-08.ucdenver.edu)
[23:04:37] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:06:42] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:07:35] <Bike> scymtym: maybe, but i mentally filed that under https://github.com/s-expressionists/wscl/blob/invalid-type-specifier/wscl-issues/proposed/invalid-type-specifier
[23:07:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:08:06] <scymtym> makes sense
[23:12:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:13:46] *** Quits: jmhimara (~jmhimara@dc-auraria-nat13-08.ucdenver.edu) (Quit: Client closed)
[23:13:47] *** Joins: slyrus (~slyrus@135.180.166.51)
[23:14:18] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[23:16:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:17:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:20:25] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[23:25:37] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[23:29:58] *** Joins: gaqwas (~john@dynamic-077-004-085-046.77.4.pool.telefonica.de)
[23:38:36] *** Joins: IPmonger (~IPmonger@172.58.206.167)
[23:38:50] *** Quits: IPmonger (~IPmonger@172.58.206.167) (Remote host closed the connection)
[23:47:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:53:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:53:07] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:54:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 258 seconds)
[23:57:13] *** Joins: pjb (~pjb@user/pjb)
