[00:00:04] *** Joins: hayley (~theemacss@user/hayley)
[00:04:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:06:42] <gilberth> It's depressing how low-level RENDER is. I need to create a pixmap and a picture addressing that, fill it with my colour, just to be able to specify the colour of a triangle. And the nice thing is that X11 has so many visuals and colormaps to chose from.
[00:11:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:12:30] <gilberth> Still no triangle on my screen. :(
[00:13:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:15:03] <hayley> https://www.youtube.com/watch?v=tbHix56qfG8
[00:15:04] -ixelp- The Aircrash Bureau - YouTube
[00:15:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:15:28] <hayley> Day 4 of trying to make gencgc parallel.
[00:17:09] <selwyn> hayley: gl
[00:26:22] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: WeeChat 3.3)
[00:26:47] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[00:39:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:42:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:47:09] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:48:45] *** Joins: sp (~sp@user/susam)
[00:50:38] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[00:51:23] * gilberth just can't get used to pre-multiplied alpha.
[01:01:23] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[01:01:33] <selwyn> alpha channel?
[01:02:27] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[01:04:28] <gilberth> selwyn: Yes, somehow my brain is wired to non-premultiplied alpha, yet most APIs take pre-multiplied alpha. I expected a 50% opacity red with R=1, B=0, G=0, alpha=0.5; which it is not. That CLIM doesn't use pre-multiplied alpha, doesn't help either.
[01:05:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[01:05:23] *** Quits: hayley (~theemacss@user/hayley) (Read error: Connection reset by peer)
[01:05:24] *** Quits: sp (~sp@user/susam) (Write error: Connection reset by peer)
[01:05:24] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Read error: Connection reset by peer)
[01:05:25] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[01:06:07] <gilberth> Though CLIM is not explicit about gamma, which is a pity. As mentioned a few nights ago here this is a concern already with games. Seems like I am not the first to notice. More homework for me to do.
[01:06:55] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:09:32] *** Joins: hayley (~theemacss@user/hayley)
[01:09:32] <hayley> "GC invariant lost, file "gencgc.c", line 4268" "Well, let's see what it is." "gc_assert(g->bytes_allocated == 0);" "Sure. Now what is the byte count instead of 0?"
[01:09:53] <hayley> (gdb) p/x generations[4]
[01:10:13] <hayley> Yeah, sure.
[01:10:13] <hayley> $4 = {bytes_allocated = 0xfffffffffffdfff0, gc_trigger = 0x1e8480, bytes_consed_between_gc = 0xa3d70a, num_gc = 0x0, number_of_gcs_before_promotion = 0x1, cum_sum_bytes_allocated = 0x6c887e0, minimum_age_before_gc = 0x0}
[01:10:35] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:10:35] *** Joins: sp (~sp@user/susam)
[01:10:35] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:10:50] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:15:00] *** Joins: semz (~semz@user/semz)
[01:15:05] <hayley> Seems I forgot a generation[blah].bytes_allocated -= smth; which wasn't locked, and it'd lose writes. Oops.
[01:15:47] <selwyn> i would still recommend black mesa but it is too easy
[01:16:19] <hayley> Now I can run REGRIND for 10000 REs without it crashing. Not a bad start.
[01:19:11] <hayley> Now to look at my list of things that still crash: - attempting to re-instate that page filter thing - using 8 GC threads instead of 4
[01:19:42] <hayley> The latter works, the former doesn't.
[01:20:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:25:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:32:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[01:39:09] <hayley> https://www.youtube.com/watch?v=GJTHZo0U6cw
[01:39:10] -ixelp- The result was negligible! - YouTube
[01:41:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:44:58] <hayley> Well, REGRIND now runs 40% faster with 8 GC threads.
[01:48:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:49:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:51:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:56:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[01:59:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:02:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:04:08] *** Joins: aeth (~aeth@user/aeth)
[02:12:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:14:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:16:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:54:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[02:59:01] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:c18:ddd:1a74:88e2) (Ping timeout: 240 seconds)
[03:07:57] *** Joins: random-nick (~random-ni@87.116.167.125)
[03:09:43] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:17:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:19:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:41:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[03:51:40] *** Joins: jeosol (~jeosol@user/jeosol)
[03:53:48] <selwyn> sigma male regrindset
[03:55:13] <hayley> Which male? /me looks behind her
[03:55:33] <selwyn> the grindset is available to all genders
[03:56:14] <selwyn> hustle is more of a spiritual thing
[04:02:19] * hayley thinks she should set the names of the GC worker threads to something interesting.
[04:03:30] <hayley> "The thread name is a meaningful C language string, whose length is restricted to 16 characters, including the terminating null byte ('\0')." Not an awful lot. Can't we afford the RAM for more?
[04:03:48] <hayley> "Parallel GC" is shorter, but barely.
[04:04:04] <gilberth> ck_: Progress. Polylines rendered with RENDER <http://clim.rocks/gilbert/triangle-demo.png>
[04:04:15] <selwyn> how fun can the names be
[04:05:03] <hayley> IIRC SBCL does set the names from MAKE-THREAD, so I better check how that works.
[04:05:49] <moon-child> gilberth: you can render curvy stuff with x?
[04:05:56] <hayley> ...it's all #ifdef'ed in new_thread_trampoline. No use to me.
[04:06:58] <hayley> htop doesn't feel like showing the thread names though. Hmph.
[04:07:08] <gilberth> moon-child: RENDER can render triangles and X11R4 was able to render Beziers. I assume you first turn a curve to a polyline and then render that.
[04:08:03] <moon-child> that looks like a circular segment, though, unless you cheated that with beziers?
[04:08:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:08:52] <gilberth> moon-child: <https://gist.github.com/kc-/9f1e0318ed1971fe826a66e2159c7371> see the screenshot below.
[04:08:53] -ixelp- triangles.lisp Â· GitHub
[04:09:56] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:10:08] <moon-child> oh!--even worse, it is faked with triangles
[04:10:14] <moon-child> :/
[04:10:34] <gilberth> moon-child: RENDER can draw triangles only.
[04:11:16] <gilberth> No circles, no curves, no nothing, only triangles. And bitmaps.
[04:11:50] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[04:12:07] <gilberth> And btw this is how this is usually done.
[04:12:08] <vms14> I'm doing aberrations
[04:12:14] <moon-child> what a crock of dingos' kidneys
[04:12:16] <vms14> hi gilberth :D
[04:12:20] <selwyn> aberrations?
[04:12:24] <moon-child> gilberth: circle is super easy to draw analytically though
[04:12:26] <moon-child> on gpu
[04:12:28] <moon-child> in realtime
[04:12:50] <gilberth> Yep, but impossible with the X11 protocol.
[04:12:52] <vms14> Have this  https://termbin.com/hne2 which translates to https://termbin.com/uek9a
[04:12:56] <vms14> xd
[04:13:03] * moon-child whispers: G L X
[04:13:40] <gilberth> Well, GLX also cannot do lines.
[04:14:06] <moon-child> glDrawArrays can do lines
[04:14:09] <moon-child> if you ask nicely
[04:14:45] <gilberth> Try with proper line-cap and line-joint with dashing.
[04:15:07] <moon-child> sure, more work then.  But obviously you can do it
[04:15:29] <gilberth> Yes, but I would wind up generating triangles again.
[04:15:34] <moon-child> for dashing you probably need trig; not so nice but still doable
[04:15:43] <moon-child> why would you generate triangles then?
[04:16:10] <gilberth> Because that are the primitives that are there.
[04:16:33] <moon-child> i mean, sure, you have to cover the bounding box of your shape with triangles
[04:16:36] <hayley> Seriously, I have to #define _GNU_SOURCE to get pthread_setname_np?
[04:16:40] <moon-child> but the actual rendering you can do in a fragment shader
[04:16:47] <hayley> ...or not, idk.
[04:16:50] <moon-child> and then not worry about scaling stuff on the cpu
[04:17:23] <gilberth> moon-child: I could do all sorts of things, would I want to implement a rendering library.
[04:17:30] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[04:17:49] <moon-child> haven't you already implemented a rendering library, rendering curves as triangles?
[04:18:29] <gilberth> Not yet. ck_ donated this polylines -> triangles. This is my missing link for a fallback CLX port.
[04:18:59] <moon-child> so, ck_ implemented a rendering library and you're using it.  Same thing
[04:20:09] <gilberth> Since the practical interface to X11 isn't the network protocol anymore, but a bunch of libraries, this won't be my primary port though.
[04:20:46] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[04:21:31] <gilberth> I am not sure, if I even would bother with the RENDER extension and with fonts. I could as well settle for core X11.
[04:22:26] <gilberth> Perhaps I will do as I did for McCLIM and use RENDER or the Porter-Duff operations only.
[04:24:11] <gilberth> Even XKEYBOARD is nuts, as I have to guess a keymap. The server won't give it to me, I have to find it in the file system at whatever place and in whatever format libX11 uses.
[04:25:46] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:27:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:31:08] * hayley contemplates reworking how SBCL manages its new area set, to make it more like the actual parallel GC she should be implementing.
[04:32:20] <hayley> For some reason, when the set of new pages to scan is small, SBCL maintains two sets, works on one to completion, and pushes work to another. Then the first set is cleared, and the two sets are swapped. But the more common way to do this seems to be to use one set, which we push and pop from concurrently.
[04:34:32] <hayley> This matters since I've merely parallelised that two-set procedure, and it introduces some time where one GC thread might have work, but is waiting for the others to complete.
[04:41:30] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:42:13] <gilberth> And yes, given GLX, RENDER is somewhat redundant.
[04:43:52] <hayley> OTOH I still don't have a way of really measuring what locks suck the most.
[04:44:55] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[04:46:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[04:59:26] <hayley> <https://simonmar.github.io/bib/papers/parallel-gc.pdf> presents the wrong terminating condition for a GC thread. If you only finish when the pending set is empty, then you can lose GC threads if all pages are concurrently being processed when you observe the set. The termination condition is when no other threads have work, and the pending set is empty.
[05:02:42] <hayley> Aha, the actual algorithm on pages 4-5 is correct though.
[05:02:48] <hayley> The simple version on p.3 was wrong.
[05:06:06] <hayley> w.r.t parallelism when you have few parallel pointers (e.g. too many linked lists), I wonder if there's a sort of "trial marking" as a dual to "trial deletion" in reference counting. There was a paper where they randomly decided objects were live, which gave additional parallelism at the cost of keeping random data live. You could hypothetically represent "these objects are speculatively live iff this object is live". idk
[05:07:38] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[05:07:41] <White_Flame> hayley: call your GC threads reapers
[05:08:20] <hayley> I think https://medium.com/flutter/flutter-dont-fear-the-garbage-collector-d69b3ff1ca30 beat you to it.
[05:08:21] -ixelp- Flutter: Donât Fear the Garbage Collector | by Matt Sullivan | Flutter | Medium
[05:08:44] <White_Flame> certainly it's not new, but if you're going to name them somethign more interesting, then that's the first line to go on :)
[05:09:27] <hayley> All the threads are called "Parallel GC". I know the Azul VM had a weird name for background GC threads, but I can't legally tell you it.
[05:09:36] <White_Flame> necromancers, reviving dead memory locations into new live ones?
[05:10:04] <White_Flame> did the garbage man in Dilbert have a name?
[05:11:28] <hayley> It was weird, not because it was a funny name, but because the marketing says "Hey, looky here, C4 collector, that's right we got the continuously compacting concurrent collector" and then the name strongly alludes to olde "generational Pauseless", which is also a fine name, but less alliterative. Guess C4 is only a marketing name.
[05:11:45] <hayley> (Damn, continuously concurrent compacting collector. 2/4)
[05:12:13] <White_Flame> ooh, or you could call the threads defibrillators
[05:13:05] <White_Flame> AEST - Anti Entropy Scanning Thread
[05:13:09] <hayley> Speaking of marketing...
[05:13:17] * hayley uploaded an image: (30KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/frxyjZRvjJOlXJwzIVEerClL/swcl-regrind.png >
[05:13:39] <White_Flame> what's the opposite of alzheimers?  something that would grant new memory instead of take it away :-P
[05:13:53] <hayley> Not even close to what I'd like from eight GC threads, but it's an improvement I guess.
[05:16:25] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[05:17:20] <White_Flame> eh, it's a 20-30% improvement on the 2 ends, not that bad
[05:17:35] <hayley> Hm, I also have to wonder if using a "stack" of pages might help with caching, as we scan pages we just copied into first. But it also might hinder list linearisation efforts. Not that 1/[a fair few] misses is so much worse than 0 misses.
[05:22:28] *** Quits: Catie (~user@user/catie) (Quit: going home)
[05:32:31] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 256 seconds)
[05:32:40] *** Joins: neominimum (sid537410@user/neominimum)
[05:56:00] *** Joins: razetime (~quassel@49.207.209.26)
[06:14:01] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:57:04] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[06:58:46] <vms14> https://termbin.com/7513 xd
[06:59:20] <vms14> it's being translated to css html and php https://termbin.com/5yim8
[07:02:16] <hayley> https://www.youtube.com/watch?v=DaY4r_9xIOI
[07:02:16] -ixelp- Genesis - Dancing With The Moonlit Knight (Live '73) - YouTube
[07:16:16] <hayley> Hey, porting the work-set algorithm from that paper actually worked.
[07:17:02] <hayley> It did for a bit, now it seems to have livelocked. Hmph.
[07:19:13] <hayley> Just forgot to reset the new area counter before going into a fallback full scavenge.
[07:20:29] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[07:59:13] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:10:36] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[08:11:31] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[08:24:33] *** Joins: semz_ (~semz@user/semz)
[08:27:23] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:59:53] <hayley> https://www.youtube.com/watch?v=4rdSfCR8UKU mark3611 is back
[08:59:53] -ixelp- [YTP] Anthony Sullivan's Apple Pie - YouTube
[09:22:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:23:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:27:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:30:28] * hayley tries to build SBCL with a smaller card size, so that the GC can churn on more cards, but instead the build bums out about an invalid object.
[09:40:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:59:43] *** Joins: Oddity (~Oddity@user/oddity)
[10:22:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:46:07] <ck_> gilberth: nice lines, it appears as if the butt end of the red center is off by one on the one side though, is that intentional?
[10:53:50] <moon-child> oh yeah speaking of which
[10:54:05] <moon-child> zooming in, I noticed the shapes weren't pixel aligned
[10:54:27] <moon-child> which idk could be because somebody thought it was a good idea to say 'pixel centres at 0.5' or something
[10:58:39] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[11:01:18] <hayley> .oO(<canvas>)
[11:02:19] <humasect> yes
[11:02:35] <humasect> wait no .oO{<div>}
[11:03:13] <humasect> why is half the internet lgblgqtlt+}]++
[11:03:46] <hayley> idk, why is the other half not? Seems like more of a problem to me.
[11:03:50] <humasect> the other half selling+advertisement
[11:04:05] <humasect> i suppose two sides of the same coin
[11:04:28] <humasect> https://www.youtube.com/playlist?list=PLm4ovLHmWqKZyOIgnco_NkJAlxT7B8up2 
[11:04:29] -ixelp- Radiohead - OK Computer OKNOTOK 1997 2017 - YouTube
[11:05:10] <humasect> hayley: i suppose if it wasn't still a problem, it wouldn't be mentioned/pushed/adverted so much ?
[11:05:39] <moon-child> I saw advertising material outside of some bank the other week: 'such-and-such bank supports such-and-such marginalised group' (I think gay people).  Really blatant
[11:05:42] <humasect> https://www.rom.on.ca/en/exhibitions-galleries/exhibitions/a-third-gender-beautiful-youths-in-japanese-prints#:~:text=Four%20hundred%20years%20ago%20in,distinct%20social%20and%20sexual%20roles. 
[11:05:43] -ixelp- A Third Gender: Beautiful Youths in Japanese Prints | Royal Ontario Museum
[11:05:55] <humasect> sorry - (from HN) - https://daily.jstor.org/the-disappearance-of-japans-third-gender/
[11:05:56] -ixelp- The Disappearance of Japanâs âThird Genderâ - JSTOR Daily
[11:06:11] <humasect> its normal until its villified
[11:06:43] <humasect> then its "oh did you hear about charles/bethany? they are 'that way' and different than xyz(us)"
[11:07:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[11:07:15] <humasect> moon-child: i see that netflix and etc reboots, called "being woke" i think is the term
[11:07:28] <moon-child> https://www.youtube.com/watch?v=06yy88tLWlg ?
[11:07:28] -ixelp- WOKE BRANDS - YouTube
[11:07:36] * moon-child does not pay much attention to popular culture, but
[11:07:44] <humasect> heh when the model did the protest coke/pepsi advert ..
[11:08:01] <humasect> yeah some things stand out, or at least echos of such come through our friends and dear ones and neighbors 
[11:09:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:09:50] <humasect> just to be saying, its normal until we "make it wierd" by pointing it out and making a deal of it; becomes a kind of advert/violence even
[11:09:53] <hayley> Apparently I can crank out another 40% or so of object copying throughput on Boehm's GC test. But it doesn't translate to much of a real-time speedup.
[11:10:11] <hayley> And, when I throw 8 threads at it (on a 6 core machine), I still expect more than 40% speedup somehow.
[11:10:20] <humasect> real-time or in-the-field ?
[11:10:58] <hayley> I don't have so many real-world tests. I mean the amount of time that elapses, not the amount of time that cores are running.
[11:11:09] <humasect> ohh
[11:11:11] <moon-child> what does perf say?
[11:11:43] <moon-child> and: what about e.g. sicl bootstrap?  Seems like a fairly real-world test, and allocates a lot
[11:11:54] <hayley> I couldn't find anything out of the ordinary with perf, IIRC. I usually suspect poor locking at first.
[11:12:01] <hayley> moon-child: lol, I swear I thought of that before.
[11:12:52] <hayley> Marginally ironic too, since beach wants a parallel, concurrent, non-moving global GC.
[11:13:25] <ck_> humasect: if half if l^3g^2qt^2+}]++ and half is selling+advertisement, which half am I in?
[11:13:41] <humasect> ck_: the irc outskirts =)
[11:13:52] <humasect> emacs/oss land which is on the fringes~
[11:14:33] <hayley> .oO(Don't make a "my ex" joke on a list of "notable people who use Emacs")
[11:15:04] <humasect> ._. and aside from discord it seems
[11:15:18] <hayley> "ERROR while evaluating compile-time side effect: The value #<SICL-IR:NAMED-CALL-INSTRUCTION {1002825453}> is not of type NUMBER when binding SB-KERNEL::Y" Dammit.
[11:15:40] <hayley> Now how's that even happen?
[11:16:03] <hayley> I guess I do have to check if my experimental GC just crapped itself. sigh
[11:16:33] <humasect> type error is user(dev) halt
[11:17:59] <hayley> And mainline SBCL gives me a different error. I don't even
[11:18:53] <humasect> is this an sicl thing? try clasp/etc? 
[11:20:53] <humasect> i deleted facebook, family doesn't talk anyway. aside from irc, should i discord ?
[11:21:55] <ck_> "NO!" is the only true answer in discordian fashion
[11:22:58] <humasect> heh - ahh what book is that from
[11:25:58] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:27:31] *** Joins: shka (~herr@109.231.0.226)
[11:28:51] <humasect> https://www.todaysparent.com/wp-content/uploads/2014/11/lego-letter.jpg  =)
[11:31:58] <ck_> is that Times New Roman
[11:36:20] <humasect> tried a few font-matching sites (like What The Font!) and they all match almost every random typeset
[11:36:37] <humasect> i thought we had AI that worked magically
[11:37:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[11:39:03] <humasect> hayley i think you need more virtual machines, VM per thread or some such, let the network stack deal with the loads
[11:39:15] <hayley> ð¤
[11:39:50] *** Joins: aeth (~aeth@user/aeth)
[11:41:25] <humasect> hi aeth
[11:48:07] <humasect> actors/object_processes make sense when we are always dealing with people, persons, selfs and egos; adds character to the program story 
[12:06:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:40:02] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Read error: Connection reset by peer)
[12:40:29] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:00:00] <shka> https://www.youtube.com/watch?v=531Wsv5Igtk
[13:00:01] -ixelp- Portal 2 - The Moron Theory - YouTube
[13:00:23] <shka> selwyn: now i understand, working with the scientists is like being trapped in Portal game
[13:00:46] <shka> you are trying to solve problems while the phds are "doing science"
[13:00:51] *** Joins: ogamita (~pjb@pop.92-184-124-124.mobile.abo.orange.fr)
[13:01:46] <selwyn> lol
[13:02:04] <selwyn> i haven't completed portal 2
[13:02:42] <selwyn> a lot of people in science are .. overoptimised in some areas and not others
[13:03:30] <selwyn> most unrealistic thing about the portal series is how polished everything is
[13:03:44] <selwyn> there should be lasers wrapped in kitchen foil
[13:03:53] <ck_> and someone's lunch next to it
[13:04:06] <ck_> unwashed coffee cups everywhere
[13:04:26] <selwyn> one of the main laser companies sends out complimentary snack boxes
[13:05:09] <selwyn> so there are both snacks and empty snack boxes (repurposed to contain screws, resistors, etc.) all over the place
[13:05:23] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[13:08:51] <selwyn> black mesa has the best science posters of any game i've played
[13:09:00] <selwyn> some of the stuff on whiteboards looks like real research
[13:09:39] <humasect> research the research
[13:09:48] *** Joins: semz (~semz@user/semz)
[13:10:43] <humasect> strange how "Design" and "Designated" are pronounced.
[13:11:15] <selwyn> yeah
[13:12:32] <selwyn> it seems that 'design' comes from french so inherits a french pronunciation
[13:12:40] <selwyn> whereas designate comes directly from latin
[13:14:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:14:38] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[13:17:52] <shka> selwyn: try genetics and genealogy
[13:18:00] <selwyn> ?
[13:18:19] <shka> greek->latin->english vs greek->english
[13:18:28] <selwyn> oh
[13:18:30] <shka> but based on the same greek word at root
[13:18:50] <selwyn> zero and cipher
[13:19:52] <humasect> hebrew b4 greek
[13:20:14] <humasect> alphabet -> alphabeta -> alephbeth
[13:20:52] <moon-child> why the h in beth?
[13:20:55] <selwyn> isnt it from phoenician
[13:21:20] <humasect> moon-child: to point out the hebrewness mostly.. some pronounce as "bess"
[13:21:34] <shka> africa is mighty far from the england :P
[13:21:38] <moon-child> i have never heard that
[13:21:55] <humasect> ashkenaz vs. shephardi jewish
[13:22:19] <humasect> the last letter (tav/tau) pronounced "s" for the Shephs, like "shabbos" instead of "shabbat[h]"
[13:22:20] <moon-child> hmm maybe
[13:22:27] <humasect> maybe.... ?
[13:22:51] *** Joins: notzmv (~zmv@user/notzmv)
[13:24:34] <selwyn> shka: there is a theory that cornwall was settled by phoenicians
[13:24:59] <selwyn> but it is probably esoteric nonsense, sadly
[13:25:37] <humasect> ethiopia has the most accurate wordings
[13:25:51] <selwyn> main piece of evidence that the letter 'z' features prominently in place names
[13:25:51] <Gnuxie> Well i thought Phoenicians went to Cornwall all the time 
[13:26:03] <humasect> ashkenazzzz?
[13:26:36] <selwyn> gnuxie: they did but they went to lots of places
[13:27:23] <selwyn> and didn't settle that many of them
[13:28:10] <Gnuxie> They settled all over the Mediterranean though 
[13:28:20] <selwyn> https://cornwallyesteryear.com/where-the-phoenicians-werent-by-craig-weatherhill/ this guy isn't having any of it
[13:30:35] <humasect> im searching, but what is phoenician(s) ?
[13:31:11] <selwyn> "ancient lebanon"
[13:32:59] <Gnuxie> LwL 
[13:37:00] <selwyn> its crazy that nearly every writing system comes from hieroglyphs
[13:38:23] <ck_> "I'm american sweetie our names don't mean shit"
[13:38:52] <ck_> let's trace CR/LF back to its origins then :)
[13:39:41] <humasect> im having trouble rectifying right-to-left and left-to-right, like does the brain or language move differently ?
[13:40:09] <selwyn> https://en.wikipedia.org/wiki/Boustrophedon why not have both
[13:40:43] <humasect> learning JP was a trip, hacked english to death, and hebrew now... because writing is intimately tied into visual processing, writing right-to-left with right hand is... all right ??
[13:40:49] <humasect> yeh =)
[13:45:07] <kakuhen> my favorite part in writing japanese is when i get to make really nice and compact axes labels for graphs
[13:45:26] <kakuhen> because for horizontal axis, I simply write horizontal right -> left, then for labels on vertical axis, i just write vetically
[13:45:57] <kakuhen> or if you have a graph with bins on horizontal axis and you want to neatly pack them, writing vertically helps a lot
[13:46:19] <selwyn> what kinds of graphs do you make? do you publish in japanese?
[13:47:13] <kakuhen> i do not publish anything, but i used to make a bunch of my own ltitle charts and graphs when discussing finance with some friends and shared with them
[13:47:18] <kakuhen> this would be ca 2017-2018
[13:47:21] <selwyn> i see
[13:47:35] <selwyn> cool
[13:47:45] <kakuhen> if i search really deep into my old computers i can find some and share them
[13:48:02] <kakuhen> so you have an idea of what i wasted time with every day in 2017-2018
[13:48:19] <selwyn> well, if you want
[13:48:23] <kakuhen> (as a result I can pretty comfortable with basic pivot table stuff in  excel lol)
[13:48:28] <selwyn> i asked because i thought you might be publishing maths in japanese
[13:48:41] <selwyn> which would be unexpected and cool
[13:48:50] <kakuhen> i wish that were possible
[13:48:55] <humasect> kakuhen: yep! agree on this. tried with hebrew, it almost works. so i mix up hebrew/japanese in my notes n drawings
[13:49:00] <kakuhen> most math departments will only take english, german, or russian
[13:49:12] <selwyn> you can publish in german?
[13:49:17] <kakuhen> i think even in japanese universities, most math papers will be written in english unless it's lecture notes for some class
[13:49:19] <humasect> what about french being main politick language
[13:49:56] <kakuhen> yes, some german mathematicians decide to write papers or textbooks in german out of "linguistic pride," so to speak.
[13:49:57] <kakuhen> and you can apparently find lots of useful literature in combinatorics that's still only in russian
[13:50:16] <selwyn> in quantum computing, there are like 2 foundational papers in russian that i don't think have been translated
[13:50:38] <humasect> sounds like ripe seeds for yiddish hehe
[13:51:13] <selwyn> but its not a commonly used language anymore
[13:51:49] <humasect> german ? or russian
[13:51:51] <selwyn> and even though i am a native speaker - i am still terrible at writing
[13:51:55] <selwyn> so i don't even have an excuse
[13:52:13] <selwyn> humasect: no-one publishes in russian in quantum computing anymore
[13:52:23] <humasect> secret red knowledges
[13:52:38] <kakuhen> this conversation reminds me there was some documentation for roswell i found that only seems available in japanese
[13:52:51] <kakuhen> i was supposed to get around to translating it, in case anyone wanted to reference it
[13:54:16] <humasect> jp is fun, i wouldn't mind a gander 
[13:56:36] <kakuhen> jp is fun, programming in jp not so much
[13:57:05] <humasect> end\n end\n end #if \n end # module      ;; ugh julia takes the worst of python =)
[13:57:20] <kakuhen> a few days ago i remember trying to demonstrate to my friend how like
[13:57:22] <humasect> kakuhen: how come ? most of my comments were in jp from 99 onward 
[13:57:31] <kakuhen> i dont even know where to begin
[13:57:32] <kakuhen> but i found the most braindead article on programming in japanese
[13:57:34] <kakuhen> basically the dude was arguging "you should never comment your code because you can simply think what you want to do in english, and code looks like that english"
[13:57:34] <hayley> https://www.youtube.com/watch?v=M2irYat2wf4
[13:57:35] -ixelp- Julia's Song (Remastered 2003) - YouTube
[13:57:42] <kakuhen> i dont know, it seems that many japanese online do not like commenting their code
[13:57:49] <kakuhen> and the most braindead justification i saw was very recently in that article
[13:58:04] <humasect> i rarely comment.. but i grew up jp in habit and in mindset 
[13:58:44] <humasect> in jp we have 2 charsets, then all the kanji, 26 abc's are no problem. almost quirky or cutesy if anything 
[13:59:30] <humasect> (and notice, culture or nation's cartoons reflect their writing. simpsons vs. naturo for example. and check russian cartoons =)
[13:59:50] <humasect> animal can't see cartoon because not writing/reading
[14:00:26] <humasect> english and roman character (and simpsons..) are attractive to asian because cute and round and simple like pokemon
[14:00:29] <humasect> :o
[14:00:37] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:01:00] <selwyn> reminded that i am prescribed serial experiments lain
[14:01:17] <humasect> ohh, nice
[14:01:46] <kakuhen> my mind registers lain as "the anime where a little girl jumps off a building in the 1st episode, and for some reason a subset of programmers in the west are obsessed with the show."
[14:01:55] <kakuhen> you can probably guess my opinion on the show based off that 
[14:01:59] <selwyn> it has lisp in it
[14:02:06] <humasect> it has been a while since i've seen it 
[14:02:51] <humasect> probably similar cult to FLCL 
[14:03:08] <kakuhen> oh right i forgot about the lisp in it
[14:04:04] <humasect> https://moviecode.tumblr.com/post/88732163495/everyone-knows-the-anime-serial-experiments-lain 
[14:04:05] -ixelp- Source Code in TV and Films
[14:04:19] <kakuhen> another similarly old show would be hikaru no go
[14:04:26] <kakuhen> when hikaru plays go on the internet, they use a bondi blue imac g3
[14:04:31] <humasect> interesting comments ;)
[14:04:38] <humasect> oh my that was a good anime. 
[14:04:44] <shka> not everybody know that SEL was a thing
[14:05:19] <humasect> and why is environment-macro calling itself 
[14:05:29] <kakuhen> my mind registers SEL as the Objective-C type before serial experiments lain, lmao
[14:05:42] <humasect> heh. IMP
[14:06:04] <humasect> id obj = objc_msg(..);
[14:06:31] <kakuhen> objc_msgSend( stuff );
[14:06:42] <kakuhen> i'd have to open up the obj-c runtime reference to remember what arguments it takes
[14:06:52] <humasect> eh i was in the gnu objc camp
[14:07:03] <selwyn> thankfully i never got round to learning obj x
[14:07:05] <selwyn> c
[14:07:05] <humasect> msgsendv takes argv =P
[14:07:09] <kakuhen> oh... I never looked to deep into GNUstep though I like the idea
[14:07:37] <kakuhen> in fact i wonder if there any bindings to gnustep for me to make graphical CL software for both mac & linux
[14:07:40] <humasect> i would have to say i really loved obj-c, sitting on a mac it is tempting. and still sitting in #GNUstep
[14:07:55] <humasect> i worked on it late 90s =) 
[14:08:09] <selwyn> well, glad you had fun
[14:08:42] <humasect> kakuhen: i was looking at StepTalk again, it has some smalltalk scripting, and a bit like ActiveScript (if you remember Softimage|XSI) . so why not lisp too
[14:09:21] <kakuhen> sounds cool
[14:09:28] <humasect> one day i took GNU smalltalk and GNU obj-c runtime and smashed them together in the same file. (gnu smalltalk is not so much images like regular smalltalk, but source files with plenty of '!') 
[14:09:41] <kakuhen> being able to sketch an interface in GORM and then use emacs+SLY for coding everything else sounds extremely comfortable to me
[14:09:50] <humasect> inspired by ST/X (german smalltalk that mixes native C) 
[14:11:00] <humasect> kakuhen: yep! the first openstep macOS (rhapsody until about 10.x) used emacs for all text widgets like NeXT have. very close to smalltalk+c+lisp system, if we are being honest
[14:11:49] *** Joins: treflip (~user@user/treflip)
[14:12:32] <humasect> http://www.gnustep.org/experience/StepTalk.html 
[14:12:32] -ixelp- GNUstep - StepTalk Scripting Framework
[14:13:18] <humasect> lisp(CL,sbcl) can talk with C, so that is automatic objective-c (objc_msgsend, etc), instead of fighting with CLIM
[14:14:55] <humasect> i don't know, smalltalk and lisp. let's just python and js
[14:15:02] <kakuhen> steptalk looks  very  cool
[14:15:02] <selwyn> you then have to maintain a whole ffi bridge
[14:15:18] <kakuhen> too bad I am currently a busy math student and am deferring most programming stuff until April or so
[14:15:27] <kakuhen> I occasionally distract myself with painful things though
[14:15:55] <kakuhen> recently I spent 2 hours trying to get clojurescript + react-native working in emacs so i can work on iOS software entirely inside of emacs (sans the iphone emulator)
[14:17:44] <humasect> hehe. sounds like me 10 yr ago
[14:18:12] <humasect> ahh no offense, clojure is awesome and i loved every bit of working with it. when i had a mac! havent had one since until now
[14:19:12] <humasect> perhaps i may miss the dev license (iOS), perhoops i may unst take another swing at 'er
[14:23:57] <kakuhen> i dont have developer license, but in any case i am interested in writing something
[14:24:16] <kakuhen> patiently waiting for an iOS 14.8.1 jailbreak so i can install my own software and keep it for more than 7 days
[14:25:17] <dave0> gasp you're a pirate!
[14:26:24] <dave0> only people with something to hide want to install their own software on their phone
[14:26:43] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/smt5hf/the_launch_of_bevy_reddit_post_is_the_most/hw2g0ht/?context=3 Aircrash Bureau time
[14:26:44] -ixelp- the launch of Bevy Reddit post is the most upvoted post on the Rust subreddit. Intrigued by it, we immediately started e [...]
[14:27:04] <humasect> kakuhen: perhaps android would be more fun for yeh ?
[14:27:43] <kakuhen> i had an android phone, then about one year ago, i switched to an iphone
[14:27:53] <kakuhen> the ability to just download an apk and run it was really nice. i still miss it today
[14:28:55] <kakuhen> there is another major thing missing in iphones, depending on your personality, but it's a bit embarrassing to say
[14:28:59] <humasect> yeah true. and other software; for eg. i can download nintendo 3ds rom to the sd card, and install it on the 3ds. no computer or network between
[14:29:38] <kakuhen> dave0: that is correct. """"sideloading"""" is the root of all evil in modern computing, that dude from apple said so and he had big numbers on the screen...
[14:29:53] <moon-child> kakuhen: hw vulnerability on older chips
[14:30:15] <moon-child> and they're better anyway, having the force-sensitivity screen
[14:30:16] <kakuhen> oh right i should've specified my iphone model is not covered by that hw vuln
[14:30:40] <kakuhen> you're referring to the unc0ver exploit probably, which basically exploits everything older than the A12 chip iirc
[14:30:45] <kakuhen> targets everything*
[14:30:49] * moon-child still salty they got rid of that, and then gimped the software to match :/
[14:30:56] <hayley> WHO WOULD WIN
[14:31:03] <hayley> - isolation in operating system
[14:31:09] <hayley> - one weird application boi
[14:31:13] <humasect> i miss my iphone 7 it went black randomly =( 
[14:31:26] <dave0> kakuhen: apple is a 2T company whatever they say is right .. was the big numbers how much apple is worth?
[14:31:43] <kakuhen> hayley: i elect the third option: one weird application boi that composes other weird application bois together
[14:31:53] <hayley> https://twitter.com/nodefunallowed/status/1379276277199249410/
[14:32:31] <dave0> the more a company is worth the more trustworthy they are
[14:32:46] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[14:32:53] <hayley> .oO(Cause you make money by doing the right thing. Hm.)
[14:36:06] <humasect> larger body = more people, average of all opinion, makes company (demand creates supply as well as supply creates demand?)
[14:41:59] <hayley> When are we doing a cover of The Aircrash Bureau
[14:42:42] <humasect> soon as we zoom; i got elec drums, guitar, pianer + midi, and mic
[14:52:15] <selwyn> return to midi
[14:58:06] <moon-child> ok seriously though trying to run untrusted code on trusted hardware is a trap
[14:58:08] <moon-child> it'll never work
[14:58:17] <moon-child> if you actually wanna separate things, run them on separate computers
[14:59:04] <moon-child> like I find it insane that javascript is pervasive as it is
[15:02:59] <humasect>  web browser ;|
[15:06:00] <shka> js, the cockroach of the IT
[15:06:31] <selwyn> programming languages as animals go
[15:07:08] <selwyn> common lisp = crocodile
[15:07:23] <selwyn> hasnt evolved in ages, doesn't need to, and still better than all the other animals
[15:08:38] <shka> oh, so that lisp lizard
[15:08:41] <shka> is not a lizard
[15:08:48] <shka> it is a croc :P
[15:08:51] <selwyn> scheme would be good as a lizard
[15:08:59] <selwyn> crocodiles younger brother
[15:09:48] <moon-child> the problem is not js, the problem is untrusted code
[15:10:10] <moon-child> js is whatever, there are lots of shitty languages
[15:10:31] <kakuhen> i like clojurescript so far
[15:10:56] <kakuhen> i dont like executing megabytes of random js code however, but at the same time i do that already in different languages when i use my computer or phone
[15:12:04] <moon-child> sure, the question is one of trust.  I have a reasonable degree of trust in the developers of popular operating systems and applications which I use
[15:12:15] <moon-child> i have considerably less trust in j random website developer
[15:12:20] <selwyn> wow crocodiles are cool
[15:12:43] <moon-child> in no small part because the former have made a concerted effort to _earn_ trust
[15:12:51] <moon-child> also just because they tend to be cooler
[15:20:21] <hayley> "hey girl are you the L2 cache because youâre far away and i miss you a lot"
[15:22:16] *** Joins: shozo (~user@178.74.52.55)
[15:23:31] <selwyn> trying to use google scholar properly and it sucks
[15:23:42] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:24:58] <dave0> hayley: you're such an internet flirt ;-)
[15:27:33] * moon-child thinks he must be an L1, because he can finish within 5ns, and can't remember very much
[15:28:20] <dave0> thats just creepy lol
[15:28:50] <moon-child> Â¯\_(ã)_/Â¯
[15:31:02] <hayley> I need to watch what locks are contended in C. Any ideas?
[15:33:01] <hayley> Valgrind can apparently, but it's slow. Someone else wrote a mugrind too...
[15:35:40] <hayley> perf does locks too? Sheesh, spoilt for choice here.
[15:38:17] <hayley> Nope, perf measures locks in the kernel apparently. Oh well.
[15:39:23] <hayley> https://github.com/isc-projects/mutrace
[15:39:23] -ixelp- GitHub - isc-projects/mutrace: Fork of git://git.0pointer.net/mutrace.git
[15:41:12] <moon-child> is that ...
[15:41:16] <moon-child> poettering-ware? D:
[15:49:01] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:53:42] <shka> postmodern does not offer RETRY-TRANSACTION restart
[15:53:47] <shka> :(
[15:58:27] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:35:53] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[17:17:41] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:51:01] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[18:17:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:21:31] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[18:24:47] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[18:25:10] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:26:35] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Ping timeout: 256 seconds)
[18:31:17] *** Quits: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:32:58] <gilberth> Good morning #lispcafe!
[18:35:22] <gilberth> It's depressing how much RENDER is based on bitmaps. When I want to draw a triangle with a certain colour, I need two auxiliary bitmaps: One filled with the colour I want and one serving as the clip mask. Even if the colour is just an RGBA tuple and the clip mask is a simple rectangle, I need to render both to a bitmap.
[18:35:49] <phoe> ouch
[18:37:41] <gilberth> Yes, and as the clip mask needs to be sharp, that is not anti-aliased, while I want the shape itself rendered with anti-aliasing, I cannot in general clip my triangles analytically.
[18:38:19] <phoe> I've been using Vecto recently
[18:38:29] <phoe> have you ever looked at it?
[18:39:36] <gilberth> Never. Actually, I believe I don't want to follow the low-level route and rather use libX11 and libcairo by FFI.
[18:40:31] <White_Flame> but the triangle itself can be antialiased by teh server?
[18:40:55] <White_Flame> so it sounds like clipping needs to happen as part of your triangle tesselation, as opposed to the clip mask
[18:42:10] <gilberth> White_Flame: The triangle is rendered with anti-aliasing by the server. But as I said: The clip mask must be sharp. That is a _bit_mask with discrete alpha values either being fully-opaque or fully-transparent on the pixel grid.
[18:42:22] <White_Flame> what are you trying to use the clip mask for?
[18:42:39] <scymtym> phoe: vecto is built on top of cl-vectors and cl-aa. McCLIM has a backend (and other extensions) using the latter two. the rendering is nice but pretty slow. this example uses parts of the backend to produce a raster image: https://techfak.de/~jmoringe/clim-raster-graphic.png
[18:42:59] <gilberth> Subwindows and responding to exposure events.
[18:43:42] <White_Flame> and subwindows are rectangular?
[18:43:53] <White_Flame> or at least don't have any subpixel effects?
[18:44:10] *** Quits: santiagopim (~user@44.pool90-167-219.static.orange.es) (Remote host closed the connection)
[18:44:25] <gilberth> White_Flame: They could be any shape, but they must be sharp.
[18:45:05] <gilberth> So that I could render a single subwindow anew without needing to render all ancestors too.
[18:46:34] <scymtym> gilberth: are only top-level sheets mirrored in your system?
[18:46:35] <White_Flame> that does make sense
[18:47:20] <gilberth> And yes, when a clip mask, which comes from the subwindow shape, the exposure event at hand and the user clipping region is not a rectangle list, I already render it to a bitmap with my core X11 backend. And at times with Cocoa and Cairo too. My point was that, even for the simple case that the effective clip mask is just a rectangle list, I need to render that to a bitmap with RENDER.
[18:47:57] <gilberth> scymtym: With X11: yes, only the top-level sheets are mirrored.
[18:48:29] <scymtym> gilberth: makes sense, thanks
[18:48:39] <White_Flame> of course, by going bitmap with that, it's the same speed & message size no matter the complexity of the number of windows affecting the clip
[18:50:51] <gilberth> White_Flame: But me needing to allocate and deallocate the underlying bitmap server resources. But I could go with a stack of aux buffers the size of my back buffer, which is the size of my top-level window at hand.
[18:51:41] <gilberth> scymtym: I do this for double buffering and for scrolling not triggering a round-trip.
[18:52:51] <selwyn> whats the best place to store data
[18:53:53] <White_Flame> it does sound like you could use singleton bitmaps for the common cases
[18:54:03] <White_Flame> but yeah, annoying to manage if it's always just the base case render
[18:54:26] <White_Flame> selwyn: the nsa
[18:54:43] <scymtym> gilberth: you can only avoid the repaint part of the roundtrip, right? the best case i can image is that you have the pixmaps/images prepared and only have to draw them onto the mirror of the top-level sheet in response to the input event (or timing event, whatever)
[18:54:56] <gilberth> White_Flame: Indeed. That I have a pixmap cache inbetween for non-trivial cases doesn't make it any easier.
[18:56:09] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[18:56:42] <gilberth> scymtym: I can do better: Anticipate the exposure event and just send the needed drawing requests beforehand, note that the exposure will come in and then ignore it. McCLIM does (did?) that. You can also play tricks with the background pixmap of the scrolled windows.
[18:57:53] <scymtym> gilberth: if you are talking about drawing to the off-screen buffer, sure, i can see that
[18:58:56] <gilberth> I decided against this approach. It's way easier and nicer to handle this with non-mirrored sheets also for double buffering. I can't see how you can have the latter with mirrored sheets. That is, when you resize or scroll with Free-CLIM, all needed redrawing is made in the back buffer and then a single CopyArea request is send to the server once done => Look ma, no tearing.
[19:01:00] <gilberth> scymtym: You can do the former without an off-screen buffer. You know, which areas are exposed with you change the scrolled subwindow position. Just send then right away. I have no idea, if that is still present in McCLIM. I called that "negative exposures", as I maintain a list of the anticipated exposure to ignore them, when they come in.
[19:01:41] <phoe> gilberth: TIL, thank you
[19:01:45] <scymtym> right, i also use single-mirroring, an off-screen buffer and CopyArea once a frame should be displayed on the monitor
[19:01:55] <phoe> oh goodness that is a mahjong tile
[19:01:59] <phoe> I want to go and play some riichi now
[19:02:36] <scymtym> phoe: yeah, some time ago you asked about options for producing raster images and didn't want to mention CLIM without making sure it works first
[19:03:18] <phoe> :D
[19:03:34] <selwyn> white_flame: great, wonder if i can do crypto cloud mining on there as well
[19:04:02] <shka> cloud mining
[19:04:05] <gilberth> scymtym: With my design the back-buffer is optional, I also could do without. And when [non-mirrored] subwindows are just moved -- which also happens when scrolling -- I blitter those pixels that just moved within the back buffer without calling the repaint handler.
[19:04:06] <shka> that's a new one 
[19:04:13] <selwyn> like in star wars
[19:04:32] <shka> https://www.youtube.com/watch?v=pllRW9wETzw
[19:04:32] -ixelp- Kate Bush - Cloudbusting - Official Music Video - YouTube
[19:06:37] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[19:07:26] <scymtym> gilberth: right, that's more sophisticated. do you force sheet transformations to result in integer positions? otherwise scrolling factional pixel amounts could give different results depending on whether the rectangle copying optimization or the repaint handler was used
[19:09:01] <gilberth> scymtym: BTW there is the DOUBLE-BUFFER extension with X11, which works just fine, but for one annoying issue: Whenever the top level window is resized, the back-buffer is too, there is no hysteresis implemented at the server making opaque resize painfully slow.
[19:09:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:10:05] <gilberth> scymtym: Yes, I round sheet coordinates to the port's physical grid/pixel resolution.
[19:10:45] <scymtym> gilberth: i knew it existed but i heard it was flawed, so i haven't looked into it yet. so far, having the off-screen buffer as a pixmap, drawing into that and copying to the mirror to "flip" buffers has worked ok
[19:10:48] <gilberth> Which could be pretty coarse in case of a TTY backend, which I am also working on.
[19:12:12] <gilberth> scymtym: The major flaw is resizing the backbuffer each time the top-level window resized. What is the real pity though is, that the implementation of DOUBLE-BUFFER doesn't use the real back-buffer.
[19:13:00] <gilberth> In the OpenGL sense where your graphics boards has a single screen-sized backbuffer to be flipped on vsync.
[19:13:08] <scymtym> funny, i just added hysteresis-style resizing of off-screen buffers
[19:13:45] <gilberth> Funny indeed. Should make things way more responsive with opaque resize.
[19:14:27] <scymtym> wouldn't using a screen-sized buffer in applications interfere with compositing (was that the term?) window managers?
[19:15:31] <gilberth> No, composing works by each window having its own window sized buffer to be blittered by the window manager into another buffer for display.
[19:17:08] <gilberth> That's an awful long chain of buffers. Your back-buffer => the compositing back-buffer => the window manager's back-buffer => screen. Three needless copies.
[19:17:58] <scymtym> that is my understanding as well. which is why i don't see how applications could use, which would imply sharing(?), the global back buffer
[19:18:30] <gilberth> The "traditional" approach is you painting to the graphics board's backbuffer and the flip on vsync is just a single bit flip on the graphic boards to tell it which buffer to scan and send to the display.
[19:18:58] <scymtym> but i should study the double buffer extension first instead of making assumptions and speculating
[19:19:33] <scymtym> sure, that's the traditional opengl model i know
[19:20:02] <gilberth> scymtym: The problem is: The existing implementation of the DOUBLE-BUFFER extension doesn't do anything different from what you do. In theory it could give you access to the real back-buffer, in practice it does not.
[19:21:03] <scymtym> i can somewhat see that, but still wonder how multiple application wouldn't draw over each other's stuff with a single shared real back buffer
[19:21:44] <gilberth> How is that prevented for the front-buffer with core X11?
[19:23:30] <scymtym> fair point. i was thinking "access" = upload to/download from the buffer arbitrarily, but it doesn't have to be like that
[19:26:17] <scymtym> one thing, though. if the display server was literally "flipping" between buffers instead of repeatedly copying an off-screen buffer to the screen, the application would get an "outdated" back buffer to draw onto and would have to either clear and redraw from scratch like in opengl or redraw in some more complicated way
[19:27:27] <gilberth> Well, if you just upload stuff to the back-buffer, that back-buffer isn't your back-buffer anymore. The whole idea of the back-buffer in the GL sense is to be the temporary buffer you do your actual rendering on. The idea: "I prepare a bitmap on my own and send that to some other buffer" is the new IMHO flawed thinking.
[19:29:09] <gilberth> scymtym: Indeed. The old-school GL does just that. You get an outdated back-buffer and render anew. These days, you could also indicate that the back-buffer keeps its contents.
[19:30:49] <scymtym> i understand, but say you render to buffer A, then A is displayed and you render to buffer B, then B is displayed and you render to buffer A again. the (say uncleared) buffer A you get does not have the things you drew to B
[19:32:01] <gilberth> Correct. Unless you have hardware which copies your back-buffer on a flip.
[19:33:22] <gilberth> What you describe is the original GL model. At a different time, with slower copying speeds and on the rationale that a new frame needs to rendered anew anyway, because you view and animate some 3D scene.
[19:34:22] <scymtym> right, with moving cameras and such, you probably can't keep any regions in the general case
[19:34:46] <scymtym> i have to ride to the office now, sorry
[19:34:51] <scymtym> talk to you later
[19:37:21] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[19:42:02] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 240 seconds)
[19:43:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:46:03] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[19:47:12] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[19:52:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[19:55:28] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:58:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:59:06] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[20:03:16] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[20:05:17] *** Quits: shozo (~user@178.74.52.55) (Ping timeout: 240 seconds)
[20:21:05] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[20:23:57] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Quit: Leaving...)
[20:32:39] *** Quits: ogamita (~pjb@pop.92-184-124-124.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[21:14:34] <gilberth> Oh dear, cl-vectors adopted the numerically unstable SVG idea to define an arc.
[21:16:48] <gilberth> But otherwise it seems to be pretty nice.
[21:19:34] <gilberth> But in theory, we have all bits and pieces to render to just a bit array. I could perhaps craft a VNC backend. Or use it as an all-Lisp bitmap file medium.
[21:21:35] <scymtym> McCLIM does the bitmap file medium in this way. the earlier screenshot was an example of that
[21:21:55] <gilberth> I see.
[21:22:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:22:38] <gilberth> Though in practice I would still prefer SVG as a "bitmap file" target, if feasible.
[21:22:54] <gilberth> Or EPS^WPDF.
[21:23:55] <scymtym> right. those backends exist as well but are much less capable
[21:24:34] <ck_> mysterious things happen in offices that you /arrive/ at by 5pm. what happen?
[21:24:50] <ck_> night shift?
[21:29:00] <scymtym> my schedule is out of whack and there are other constraints such as hardware which must not be taken into home office
[21:29:40] <gilberth> ck_: Your code works nicely with RENDER, as RENDER does the right thing with overdrawn regions. And what you do is much simpler than what I always considers, as you seem to first generate the rectangle from the edge and then put whatever joint is needed on top. When I attempted triangulation I was more thinking along the line to generate a contour.
[21:30:59] <gilberth> However as RENDER is happy with overlap, your method is suffice. The screenshot I posted was drawn with 50% opaque green.
[21:34:06] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[21:34:10] *** Joins: Catie (~user@user/catie)
[21:34:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:34:59] <shka> https://www.youtube.com/watch?v=jlFU8fykKkQ
[21:35:00] -ixelp- Night Shift - YouTube
[21:35:31] <clothespin> haven't reached my necessary caffeine intake yet
[21:36:27] <gilberth> clothespin: I recommend intravenous then.
[21:36:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:37:21] <clothespin> yes
[21:37:37] <clothespin> you don't have to wait for coffee to cool down
[21:38:28] <clothespin> well I successfully used restart-bind for the first time
[21:39:05] * gilberth is off to the Lisp CafÃ©'s backroom to get some medical injection gear.
[21:39:12] <clothespin> improves the stability of my app immensely
[21:40:22] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:40:55] <gilberth> Who is supposed to invoke those restarts?
[21:46:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:48:26] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:49:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:49:32] <clothespin> the user
[21:57:01] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[22:16:22] <clothespin> it's for debugging while in a render loop
[22:23:32] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Quit: Testing)
[22:24:56] <phoe> nice
[22:26:22] <shka> phoe approves restarts
[22:27:07] <shka> will i get approval for https://github.com/marijnh/Postmodern/pull/294 ?
[22:27:08] -ixelp- Added retry-transaction restart in the call-with-transaction function. by sirherrbatka Â· Pull Request #294 Â· marijnh/Pos [...]
[22:27:22] <phoe> shka: I have no postmodern competence to be able to approve that
[22:27:34] <phoe> I think I have a bit of knowledge regarding restarts, but postmodern is still mostly opaque for me
[22:27:38] <shka> moral approval :D
[22:27:48] <phoe> oh, wait
[22:27:52] <phoe> there's a restart there
[22:28:02] <shka> i am trying to be a good boy
[22:32:29] <phoe> there
[22:32:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[22:32:42] <phoe> three comments and it should be good for merging
[22:33:50] <shka> oh
[22:33:51] <shka> ok
[22:34:05] *** Joins: aeth (~aeth@user/aeth)
[22:34:50] <shka> phoe: remind me what is the deal with find-restart 
[22:34:52] <phoe> 1) INVOKE-RESTART will signal a CONTROL-ERROR if a restart is not found
[22:34:53] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:35:07] <phoe> and you probably don't want that, because e.g. CL:CONTINUE does not do that
[22:35:36] <phoe> 2) a missing report will mean that the restart will be displayed like [RETRY-TRANSACTION] RETRY-TRANSACTION in sldb
[22:35:43] <shka> ok, but is it better to silently fail?
[22:36:05] <phoe> silently fail where?
[22:36:30] <phoe> if you are in the debugger then calling (retry-transaction) will return NIL in the new scheme, but you will still be in the debugger
[22:36:56] <phoe> in your current implementation, when you are in the debugger, calling (retry-transaction) will cause you to end up in a recursive debugger with a CONTROL-ERROR
[22:37:23] <phoe> (if there is no restart with that name)
[22:37:41] <shka> ok, but what if handler-bind?
[22:38:05] <phoe> you want your HANDLER-BIND to decline handling a condition and let something else handle it
[22:38:15] <phoe> or do you want it to signal a CONTROL-ERROR out of nowhere
[22:38:39] <shka> i would actually prefer control-error...
[22:39:23] <phoe> a control-error means that control flow in your program is fucked
[22:39:23] <shka> because failing to retry transaction is just a fatal programming error
[22:39:46] <shka> well, i would actually say that it kinda is at this point
[22:39:50] <phoe> in other words:
[22:39:52] <phoe> it doesn't matter
[22:40:29] <phoe> unless someone calls RETRY-TRANSACTION when there is no transaction to retry
[22:40:30] <shka> but whatever you can just keep calling invoke-restart manually
[22:40:48] <phoe> calling it manually? what do you mean?
[22:40:48] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[22:41:40] <shka> phoe: handler-bind ((database-error (lambda (c) (invoke-restart 'postmodern:retry-transaction)))...
[22:42:00] <phoe> so you want to retry a transaction for all database errors
[22:42:00] <shka> instead of calling retry-transaction function
[22:42:14] <shka> no, 
[22:42:19] <phoe> yes
[22:42:24] <phoe> this handler-bind says exactly that
[22:42:28] <shka> that was example
[22:42:31] <phoe> :D
[22:42:39] <shka> because i didn't want to write check for the error code
[22:42:48] <phoe> OK, understood
[22:42:52] <shka> which is supposed to be 40001
[22:43:00] <phoe> oh
[22:43:14] <phoe> so you only want to offer the RETRY-TRANSACTION restart when the error code is 40001?
[22:43:19] <shka> no
[22:43:36] <shka> i want to offer it all times, and let the user check 
[22:43:45] <shka> separation of concerns and all that
[22:43:59] <phoe> OK
[22:44:09] <phoe> that works
[22:44:10] <shka> also, variable active transactions are kinda evil IMHO
[22:44:36] <phoe> my nitpick is, what do you do when there is *no* transaction to retry
[22:44:42] <phoe> like, there is no transaction in progress whatsoever
[22:44:52] <phoe> and that would be calling (retry-transaction) with no active transaction
[22:45:07] <shka> yes, i would expect that to be some kind of error
[22:45:12] <phoe> OK, that works then
[22:45:27] <shka> because dude, your transactions don't work the way you think they work
[22:45:33] <phoe> fixed my comment
[22:45:49] <phoe> you need to add the condition object to FIND-RESTART so you don't end up invoking a restart associated with another condition
[22:45:50] <shka> and i would rather get slapped in the face at this point then debug silent failure
[22:46:01] <phoe> so, no WHEN there
[22:46:41] <shka> very well
[22:46:56] <shka> i am tempted at signaling error when restart is nil
[22:47:12] <phoe> when restart is nil?
[22:47:16] <phoe> INVOKE-RESTART will do that for you
[22:47:30] <phoe> unless you want a custom error message
[22:47:32] <shka> not a descriptive error 
[22:47:33] <phoe> then that'll work
[22:47:42] <phoe> oh, yes, (error "No transaction in progress.") or something
[22:47:55] <shka> also, postmodern has custom condition types, let me check that
[22:48:09] <phoe> OK
[22:48:22] *** Joins: shozo (~user@178.74.52.55)
[22:48:22] <phoe> I'll AFK for now
[22:48:27] <shka> but nothing that fits the bill
[22:48:29] <shka> so error it is
[22:55:17] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[22:55:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:56:43] <shka> https://i.imgur.com/mJYvgI1.jpg
[22:57:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:43:09] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[23:49:54] *** Joins: shka (~herr@109.231.0.226)
[23:55:04] <shka> phoe: thanks for the review
[23:57:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:59:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
