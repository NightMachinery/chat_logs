[00:00:01] <rpav> "several times faster than lld" sheesh
[00:00:22] <kalven> see the readme for some benchmarks
[00:00:28] <rpav> yea
[00:01:16] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[00:01:16] <rpav> that reminds me i wanted to try ccache
[00:02:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:04:21] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:05:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:07:10] *** Parts: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Leaving)
[00:08:44] *** Joins: teepee (~teepee@openscad/teepee)
[00:10:21] *** Quits: pa (~pah@user/pah) (Quit: quit.)
[00:11:11] *** Joins: pah (~pah@user/pah)
[00:13:32] *** Quits: proller (~p@2a02:6b8:b081:8003::1:3) (Ping timeout: 240 seconds)
[00:15:23] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[00:21:35] *** pah is now known as pa
[00:22:36] *** Quits: paul424 (~tom@ip-37-248-155-42.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:24:03] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[00:26:37] <cq-work> Wasn't lld supposed to be several times faster than ld
[00:27:02] <kalven> it is?
[00:27:11] *** Quits: pa (~pah@user/pah) (Quit: quit.)
[00:27:23] <cq-work> Oh I just read that wrong.
[00:27:49] <cq-work> That is insanely fast... suspiciously so even.
[00:28:14] *** Joins: proller (~p@2a02:6b8:b081:8801::1:2d)
[00:30:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[00:30:55] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:31:24] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:32:46] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:32:56] *** Quits: DrMax_ (~DrMax@132.215.96.36) (Remote host closed the connection)
[00:33:08] *** Joins: pah (~pah@user/pah)
[00:33:30] <kalven> I remember when gold was the hot new thing
[00:33:33] <cq-work> Wasn't gold made to be more efficient than the GNU linker?
[00:33:39] <rpav> eh .. if lld isn't using MP as much as it could or more fully optimizing data then it could have a long way to go
[00:33:48] <rpav> gold is better thna ld, but nothing on lld
[00:34:16] <kalven> cq-work: yep, and it was
[00:34:52] <cq-work> That's a good study case I feel like. Four tiers of speed, each one seemingly doing better than the next to a ridiculous degree.
[00:35:00] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:35:13] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[00:35:39] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7bc1:436b:e88b:37f9)
[00:36:26] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:36:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:36:48] <rpav> it's a bit annoying when git stuff just lists <dist> packages to install
[00:37:36] <cq-work> Like "in order to build, make sure you do apt-get libbob"?
[00:37:42] <rpav> yea
[00:37:49] <cq-work> What's the alternative you think?
[00:38:34] <rpav> link to the upstream source =P
[00:38:46] <rpav> it's not even that far off, e.g. xxHash is right there on github
[00:42:17] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:43:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:46:45] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[00:48:54] *** Quits: Simplar (~Simplar@188.163.93.76) (Remote host closed the connection)
[00:49:13] *** Joins: Simplar (~Simplar@188.163.93.76)
[00:50:11] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[00:51:31] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:53:53] <mort> I don't understand why linking has to be so slow tbh, it's a big hash table for the most part innit
[00:54:47] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:57:47] <mort> *so slow with GNU ld that is, I understand why what mold does is impressive compared to something like lld
[00:58:58] *** pah is now known as pa
[00:59:04] <wootehfoot> that's why bfd stood for 'big fucking deal', until that became non-pc
[01:01:44] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:01:45] <rpav> mold is very fast .. and doesn't link, where lld does?
[01:02:06] <mort> mold does link doesn't it?
[01:04:25] <rpav> no -flto D:
[01:05:00] <mort> no GC either
[01:05:20] <kalven> even without those features it's useful as a development linker
[01:05:21] <mort> it seems reasonable to use mold for fast dev builds but lld for release builds
[01:05:24] <mort> yeah
[01:05:59] <rpav> i'll have to see if i can build some of this stuff without -flto
[01:06:28] <wootehfoot> what about -fwhole-program ?
[01:06:58] <rpav> actually maybe that's not the problem, but, i'm not sure
[01:07:28] <wootehfoot> and if it's just the linker streaming, add -ffat-lto-objects
[01:10:41] *** Joins: johnny (~johnny@user/johnny)
[01:15:53] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[01:16:42] *** Joins: c4017w (~c4017@209.52.68.8)
[01:18:29] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[01:19:41] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:19:53] <rpav> https://logging.apache.org/log4cxx/latest_stable/
[01:20:06] <rpav> "is a logging framework for C++ patterned after Apache log4j"
[01:20:59] <OnlineCop> I've got a template with this kind of signature: `template<typename T> bool getParam(std::string key, std::vector<T>& out) const { /* generic handling */ }` and would like to specialize when `T` is a `std::string`. Is there some notation I can use to restrict T's type at compile time?
[01:21:44] <rpav> http://freshmeat.sourceforge.net/projects/log4shell -> Log4shell is a command-line interface to log4cxx
[01:21:59] <PJBoy> specialise as in different behaviour for string, or as in no other type should compile?
[01:22:22] <OnlineCop> The current way I'm seeing this implemented is `bool getParam(std::string key, std::vector<std::string>& out) const { ... }` but was hoping to reuse 'T' in the body of the function instead of rewriting 'std::string' all over the place.
[01:22:43] <OnlineCop> Different behaviour for string; other types should compile using the generic handling.
[01:22:49] <PJBoy> right, you want constexpr if
[01:23:39] <rpav> or you could use the overload, and `using T = std::string;` at the top of your function
[01:23:39] <PJBoy> `template<typename T> void f(T arg) { if constexpr (std::is_same_v<T, std::string>) { /* string specific code */ } }` kinda code
[01:23:54] <rpav> if constexpr for that is kinda terrible
[01:24:16] <rpav> with the exception that you would want to do something _very_ specific for string, in addition to all the usual things
[01:24:43] <johnny> hmm.. if i ever get into needing more generic code (which i probably will at some point in my life) I'd like to see a kind of Q/A for solving problems just like was asked here
[01:24:49] <rpav> but probably if it's "getParam", you want to handle copying, or return a string_view, or something
[01:25:09] <OnlineCop> Most of the time, I'm pulling a vector of int or double from some map, and then testing that they fall between certain ranges. `std::string` would not have the range check, so I wanted to specialize that.
[01:25:20] <johnny> although i'd want to avoid out params
[01:25:31] <PJBoy> out parameters can be more efficient
[01:25:33] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:25:41] <PJBoy> I wouldn't take a hard stance against them
[01:25:46] <johnny> i would..
[01:26:01] <rpav> PJBoy: these days there's very little you'd need "out" parameters for though
[01:26:04] <OnlineCop> If the key isn't found, I want the out param to be unmodified; I only want to update it if the key exists.
[01:26:05] <johnny> it's like when i build a database, i always normalize it to the third normal form, but then denormalize if it becomes neessariy
[01:26:30] <PJBoy> that's not a hard stance against denormalising
[01:26:40] <PJBoy> so analogously you might use out parameters if it becomes necessary
[01:26:44] <johnny> basically.. don't write one until metrics tell you
[01:26:45] <PJBoy> in which case, cool
[01:26:55] <rpav> it seems everyone agrees .. it's a christmas miracle!
[01:26:59] <OnlineCop>  \o
[01:27:02] <OnlineCop> ... \o/
[01:27:36] <johnny> i freakin got some in the C++ project started by someone else and i haven't yet figured out how to remove them
[01:27:51] <johnny> and it's nested so deep that it will require serious surgery :(
[01:28:42] <rpav> OnlineCop: ... á´§ ... ... \o/
[01:29:22] <OnlineCop> How or where do I use the `if constexpr (std::is_same<...>)` in the definition?
[01:29:44] <OnlineCop> `template<typename T> bool getParam(std::string key, T& out) { if constexpr (std::is_same_v<T, std::string>) { /* string specific code */ } }` ?
[01:29:48] <PJBoy> wherever you need it
[01:30:00] <PJBoy> and the how is like that ^
[01:30:29] <OnlineCop> If constexpr() is false, wouldn't this be missing a `return` statement?
[01:30:46] <OnlineCop> Or do I need to `else if constexpr(...)` other conditions within the same body?
[01:31:19] <PJBoy> it works just like other if statements
[01:32:05] <PJBoy> if you need a return statement in one, you write one in there
[01:32:15] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[01:32:32] <PJBoy> it has `else` as a followup statement
[01:34:48] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[01:35:46] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:36:34] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:39:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:41] *** ChanServ sets mode: +v npaperbot
[01:41:55] <RazielZ> stupid question time! why does map.emplace call the destructor for my value type, but map[] does not, when I try to insert a "new" (default constructed) value to a key that was not in the map before the emplace/[] attempt?
[01:42:06] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:42:21] <rpav> code
[01:42:35] <RazielZ> feck. lemme make a testcase
[01:43:02] <rpav> (because it could be a number of things, and it's hard to tell with english descriptions ;)
[01:48:35] <RazielZ> rpav, https://wandbox.org/permlink/JIQLk4WSAOPX5w0y
[01:48:43] <RazielZ> 1 and 2 don't call destructor, 3 and 4 do
[01:49:50] *** Quits: Kebianizao (~Kebianiza@188.127.172.253) (Read error: Connection reset by peer)
[01:50:16] <manuels> On some linux systems this works. Can I generally design plugin based apps such that there is no library but only header files and the executable?
[01:50:16] <manuels> Can we use an executable file as shared library on all platforms(Windows, Mac, Linux)? Afaik this always works if the interface classes are interfaces in the sense that the only contain pure virtual functions. But can I also define classes in the interface containing symbols that have to be bound by linking against an executable containing them?
[01:50:16] <manuels> Use case: an executable foo, the app, offers plugins an interface through a shared library libfoo. Plugins (shared libs) are loaded at runtime. Both, the app and plugins, link against libfoo to resolve symbols in the classes both of them use. Is this necessary or can put the classes in the executable target and let the plugins link the executable
[01:50:16] <manuels> instead?
[01:50:48] <OnlineCop> RazielZ: If you update the line `std::cout << "destroying a foo" << std::endl;` to this: `std::cout << "destroying a foo for " << x << std::endl;` then you see the order of destruction.
[01:51:21] <rpav> RazielZ: https://wandbox.org/permlink/Ql9VadE2jyPQ57py
[01:51:30] <OnlineCop> map.emplace() constructs the new object in-place with the arguments passed to the constructor, without using any move/copy.
[01:51:52] <rpav> OnlineCop: it will use move/copy if you explicitly pass something to move/copy
[01:51:56] <OnlineCop> map.operator[] copies the value in place, but uses copy/move.
[01:51:56] <manuels> sorry copy paste the order is wrong
[01:52:05] <manuels> https://stackoverflow.com/questions/70370572/can-we-use-an-executable-file-as-shared-library-on-all-platformswindows-mac-l
[01:52:59] <RazielZ> rpav, so emplace is using move by default, while [] is... actually making it in place
[01:53:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:54:00] <RazielZ> OnlineCop, outputting the x there doesn't really identify anything since it's 0 (uninitialized) at that point anyway
[01:54:07] <rpav> RazielZ: yeah emplace is usually used when you can directly initialize it, e.g. https://wandbox.org/permlink/MTcoJOlHjIEMukyP
[01:54:13] <rpav> but like, it's not really hurting much
[01:54:38] <rpav> er, why are the messages like off by one
[01:54:50] <kalven> there's also piecewise_construct
[01:55:05] <rpav> oh nm i'm misreading
[01:56:51] <RazielZ> rpav, right, I see. in my case it's a rather big-ish class and the destructor explicitly .clears some vectors, and even though they would be empty at that point it feels like a bit of unnecessary overhead
[01:57:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:58:28] *** Joins: Kebianizao (~Kebianiza@188.127.172.253)
[01:59:52] <kalven> https://wandbox.org/permlink/dy263tDic5syXXkV
[02:01:02] <RazielZ> kalven, good to know that works as such too. 's a bit of a mouthful compared to [] though eh
[02:01:23] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:01:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[02:02:05] <kalven> yeah, if operator[] does what you need then by all means use it :P
[02:02:53] *** Quits: magla (~gelignite@55d4970c.access.ecotel.net) (Quit: Stay safe!)
[02:06:30] <RazielZ> yeah in this case it should be fine, since I also always clear the map before those insertions so
[02:07:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[02:07:39] *** Joins: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de)
[02:08:04] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[02:08:10] *** Quits: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de) (Client Quit)
[02:10:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:10:54] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:14:00] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:16:22] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[02:34:00] *** Joins: wyre_ (~wyre@user/wyre)
[02:35:17] *** Quits: wyre (~wyre@user/wyre) (Ping timeout: 265 seconds)
[02:39:54] *** Joins: ferdna (~ferdna@user/ferdna)
[02:45:14] *** Joins: markong (~kvirc@dynamic-adsl-78-12-27-21.clienti.tiscali.it)
[02:45:25] *** Quits: markong (~kvirc@dynamic-adsl-78-12-27-21.clienti.tiscali.it) (Client Quit)
[02:53:40] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[02:56:36] <OnlineCop> Is it possible to specify a template type akin to `template<typename T=std::string>`?
[02:57:59] <kalven> that is a known syntax, yes
[03:01:12] <OnlineCop> What is this notation called so I can DDG/Google it? Template Specialization?
[03:01:49] <kalven> it's a default template parameter
[03:01:52] <CarloWood> What you showed is a ..
[03:02:18] <kalven> it just means T will default to std::string if a type hasn't been explicitly provided
[03:03:34] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[03:19:48] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Quit: Client closed)
[03:24:09] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 250 seconds)
[03:25:56] *** Joins: markong (~kvirc@213.146.188.203)
[03:27:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:29:12] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[03:30:03] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7bc1:436b:e88b:37f9) (*.net *.split)
[03:30:03] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (*.net *.split)
[03:30:03] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (*.net *.split)
[03:30:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[03:30:03] *** Quits: minto_ (~mintograd@47.201.5.61) (*.net *.split)
[03:30:03] *** Quits: limubs (~limubs@cgn-89-0-53-192.nc.de) (*.net *.split)
[03:30:03] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[03:30:03] *** Quits: hackkitten (~hackkitte@94.31.103.136) (*.net *.split)
[03:30:03] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[03:30:03] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (*.net *.split)
[03:30:04] *** Quits: vin (~vin@user/crash) (*.net *.split)
[03:30:04] *** Quits: fluter- (~fluter@user/fluter) (*.net *.split)
[03:30:04] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (*.net *.split)
[03:30:04] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[03:30:04] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[03:30:04] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[03:30:04] *** Quits: Latexi95 (late@banhammer.fi) (*.net *.split)
[03:30:04] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[03:30:05] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (*.net *.split)
[03:30:05] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (*.net *.split)
[03:30:05] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[03:30:05] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[03:30:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[03:30:05] *** Quits: c4017w (~c4017@209.52.68.8) (*.net *.split)
[03:30:05] *** Quits: DSpider (~DSpider@82.79.237.57) (*.net *.split)
[03:30:05] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[03:30:05] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (*.net *.split)
[03:30:05] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (*.net *.split)
[03:30:06] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[03:30:06] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[03:30:06] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[03:30:06] *** Quits: DrMax (~DrMax@node-1w7jra94757g13bsjcy4kedx7.ipv6.telus.net) (*.net *.split)
[03:30:06] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[03:30:06] *** Quits: celphi_ (sid97751@helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: headline (sid102736@id-102736.tinside.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[03:30:06] *** Quits: HvszrStykp (~X@81.171.62.85) (*.net *.split)
[03:30:06] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:16] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[03:30:16] *** Joins: Latexi95 (late@banhammer.fi)
[03:30:16] *** Joins: noent (~quassel@squint.a-oben.org)
[03:30:17] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[03:30:18] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[03:30:19] *** Joins: HvszrStykp (~X@81.171.62.85)
[03:30:20] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6562)
[03:30:22] *** Joins: DrMax (~DrMax@node-1w7jra94757fzkt36qk02mggx.ipv6.telus.net)
[03:30:24] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[03:30:32] *** Joins: c4017w (~c4017@209.52.68.8)
[03:30:34] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[03:30:35] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[03:30:38] *** Joins: unyu (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1)
[03:30:42] *** Joins: traxex (~traxex@205.166.94.16)
[03:30:51] *** Joins: celphi_ (sid97751@helmsley.irccloud.com)
[03:30:52] *** Joins: zoraj (~zoraj@209.126.81.159)
[03:30:59] *** Joins: Stryyker (~stryyke1@ppp118-209-97-173.hba-tec-tas-bras31.tpg.internode.on.net)
[03:31:00] *** Joins: vin (~vin@cortana.cs.wisc.edu)
[03:31:08] *** Joins: headline (sid102736@2a03:5180:f::1:9150)
[03:31:14] *** Quits: Stryyker (~stryyke1@ppp118-209-97-173.hba-tec-tas-bras31.tpg.internode.on.net) (Changing host)
[03:31:14] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:36] *** Joins: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de)
[03:31:49] *** unyu is now known as Guest6030
[03:32:22] *** vin is now known as Guest1693
[03:32:28] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[03:32:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:33:18] *** Joins: mintograde (~mintograd@47.201.5.61)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:33:48] *** Joins: elemongw (~elemongw@20.107.36.50)
[03:34:14] *** Quits: celphi_ (sid97751@helmsley.irccloud.com) (Changing host)
[03:34:14] *** Joins: celphi_ (sid97751@user/celphi)
[03:34:36] *** Joins: slavfox (~slavfox@93.158.232.111)
[03:34:46] *** Joins: kurfen (~kurfen@176.119.195.10)
[03:35:22] *** celphi_ is now known as celphi
[03:35:27] *** Joins: klys (~mdasoh@show.op8.us)
[03:37:34] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[03:42:34] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[03:42:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:47:57] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[03:49:26] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:49:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[03:51:03] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:51:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:51:45] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[04:02:42] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:07:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f0bc:a1a7:555f:2527) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[04:14:09] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:20:07] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[04:24:10] *** vinleod is now known as vdamewood
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[04:34:37] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:40:44] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6562) (Quit: Leaving)
[04:41:20] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[04:43:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[04:43:24] *** Joins: malloy (~jimery@116.30.221.255)
[04:59:48] <Alipha> OnlineCop: unfortunately, if that's a template on a class, you still have to write the <>, eg, Foo<> myfoo;
[05:03:27] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[05:04:02] *** Joins: frost (~frost@user/frost)
[05:08:56] <RandomReader> { S s; }  template <typename T = void> struct S { };   // that requirement was removed in C++17
[05:08:57] <geordi>  
[05:10:05] <RandomReader> I think it's part of CTAD, but I can't remember
[05:13:41] <Alipha> RazielZ: https://wandbox.org/permlink/OqAiuf73UKte2jE2
[05:16:21] <RazielZ> Alipha, oh, that's also very polite
[05:21:28] <Alipha> RazielZ: emplace is shit and try_emplace is what emplace should have been :-)
[05:24:57] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[05:27:44] <Alipha> mort: is your gpu side buffer wrapper copyable?
[05:29:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:30:57] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 240 seconds)
[05:32:31] <smallville7123> kalven: yes
[05:39:12] <kalven> smallville7123: how ocme?
[05:39:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:43] *** ChanServ sets mode: +v npaperbot
[05:42:00] <smallville7123> is blindly using map[var] bad when you do not intend to always add var to map?
[05:43:49] <kalven> seeing as it will always add an entry for var, probably?
[05:43:54] <RazielZ> well it's gonna add it if it doesn't exist, or get it if it does, so yeah
[05:44:11] <smallville7123> alright
[05:44:55] <smallville7123> should i use std::find instead or is there a better way of checking if a key exists and obtaining it's value if it does ?
[05:45:10] <kalven> you should use fin
[05:45:48] <smallville7123> ok
[05:46:11] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[05:46:28] <RazielZ> you can also use .at, if you like catching an exception for when the key doesn't exist
[05:51:01] <kalven> smallville7123: fwiw, boost has an implementation of a preprocessor (as a library)
[05:51:52] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 268 seconds)
[05:52:33] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[05:52:37] <smallville7123> does map.find(key) return pointers to references or pointers to values?
[05:53:39] *** Quits: proller (~p@2a02:6b8:b081:8801::1:2d) (Ping timeout: 250 seconds)
[05:54:41] <RazielZ> um
[05:54:54] <KombuchaKip> RandomReader: Do you think the WorkQueueManager's consumer threads, or the work std::function lambdas could benefit in any way from thread_local storage?
[05:56:23] <RazielZ> smallville7123, it returns an iterator, you can then get the element from that either as reference or as a copy
[05:57:40] <RandomReader> KombuchaKip - no, I only mentioned it as a place storage could be "hidden" and associated with the threads
[05:57:53] <RandomReader> relative to what you were trying to debug
[05:58:06] <KombuchaKip> RandomReader: Suggestions to how I might check?
[05:58:33] <RandomReader> it only mattered when it seemed to be related to threads being destructed, but since that's no longer true, it seems irrelevant
[05:58:46] <KombuchaKip> RandomReader: I don't know if it's even specific to TBB because I'm also seeing the same problem on a POWER9 machine (ppc64el) which, presumably, Intel's TBB isn't being used by libstdc++
[05:59:10] <KombuchaKip> RandomReader: No but it is. The memory appears to clean up on thread destruction.
[05:59:13] <RandomReader> libstdc++ doesn't have parallel STL without TBB
[05:59:29] <RandomReader> so if it's working at all, must be generic fallbacks, not just intel-cpu specific code
[05:59:37] <KombuchaKip> RandomReader: Interesting. I wouldn't have thought Intel would have spent time porting it to a rival platform.
[06:02:41] <RandomReader> ...hm, unless they just go non-parallel
[06:03:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[06:03:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:03:37] <RandomReader> it's annoyingly difficult to find info on this, they don't seem to have any real documentation
[06:04:41] <RandomReader> but I see hints that libstdc++ can be built with either a TBB backend, or a "serial" backend (which simply doesn't parallelize anything)
[06:05:02] <RandomReader> (side note: why are you combining your own thread pool with parallel STL?)
[06:06:24] *** Joins: proller (~p@80.240.216.69)
[06:06:40] <RandomReader> in general though, there seems to be so much going on that I'd still just reach for a memory profiling tool to narrow things down
[06:07:47] <KombuchaKip> RandomReader: I have a consumer thread pool, yes. But the std::function's provided to it, as work functions, could do anything, including using STL parallel execution policy which would probably create a thread pool, if not already, by the implementation.
[06:07:48] <RandomReader> without that kind of tool available, I'd start stubbing/commenting out operations until the problem disappears
[06:08:18] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[06:08:26] <RandomReader> but for what you're working on, you control this, right?
[06:10:10] <KombuchaKip> RandomReader: Yes and no. Yes, the user work functions I could change to use std::execution::seq, but that's not really desirable. But when using std::execution::par within a work function, I don't have any control over what TBB does behind the scenes in creating a thread pool, allocating a stack for each of a particular size, etc.
[06:11:28] <RandomReader> I mean I'm wondering why anything would use execution::par when you already have a thread pool
[06:11:42] <RandomReader> as in, these things are more likely to sabotage each other than run effectively
[06:11:56] <RandomReader> in terms of raw efficiency I mean, not in terms of bugs
[06:13:04] <RandomReader> anyway, beside the point in terms of trying to track down the memory issue, was just curious
[06:13:09] <KombuchaKip> Well each work function is a discrete logical task that needs to be performed. How it's actually performed is up to the work function, but when it's performed is up to the WorkQueueManager.
[06:15:23] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Quit: Client closed)
[06:15:35] <RazielZ> https://en.cppreference.com/w/cpp/utility/source_location we don't have to use macros anymore? well fuck me
[06:15:45] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[06:15:59] <kalven> and thus macros were killed once and for all
[06:16:10] <RazielZ> :p
[06:17:07] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[06:20:22] <Alipha> KombuchaKip: it doesn't matter if it's "desirable". What RandomReader is suggesting is not supposed to be a permanent change, but to just try to identify what the actual problem is, and then revert the change. Because once you figure out for sure what the problem is, then maybe you can come up with an appropriate solution
[06:21:18] <KombuchaKip> Alipha: Yeah I get that. But I have tried chipping away at the code trying to figure out where the space leak is. I will keep at it.
[06:28:54] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:33:11] <smallville7123> welp
[06:33:31] <smallville7123> no viable conversion from returned value of type 'const GLSL_PREPROCESSOR::Data::Macro *' to function return type 'std::optional<Macro *>'
[06:33:50] <smallville7123> return &search->second`
[06:34:33] <RazielZ> why are you optinal-ing a pointer, that's what nullptr is for :p
[06:34:40] <RazielZ> optional-ing even
[06:35:45] <RazielZ> and your problem there is probably the lack of const
[06:38:29] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 250 seconds)
[06:38:43] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[06:39:53] <smallville7123> wtf even for (auto & pair : map) { if (pair.first == key) return &pair.second; }      fails with same error
[06:40:44] <kalven> and likely because you're in a const member function, or map is otherwise const.
[06:41:04] <smallville7123> even tho im passing std::unordered_map<std::string, Macro>
[06:41:52] <smallville7123> nvm im using const &
[06:42:40] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community: https://indiedevs.net/)
[06:42:56] *** Joins: adeliktas51 (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[06:43:57] * smallville7123 uses pointer instead of optional
[06:44:18] <RazielZ> instead of? looked like you were using both there :p
[06:45:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[06:46:29] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Ping timeout: 256 seconds)
[06:48:24] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[06:51:03] *** Joins: paule32_ (~paule32@user/paule32)
[06:53:07] *** Joins: paule32__ (~paule32@user/paule32)
[06:53:39] <smallville7123> :p
[06:54:46] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[06:55:52] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:56:37] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 268 seconds)
[06:57:51] *** Joins: paule32 (~paule32@user/paule32)
[06:59:37] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 240 seconds)
[07:02:15] * smallville7123 gets more complex
[07:02:45] *** Quits: traxex (~traxex@205.166.94.16) (Changing host)
[07:02:45] *** Joins: traxex (~traxex@user/traxex)
[07:04:21] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[07:10:14] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:13:59] <smallville7123> qwq    ==63932==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000071c98 at pc 0x0001036481bc bp 0x7ffeecfae5a0 sp 0x7ffeecfae598
[07:16:52] <smallville7123> https://gist.github.com/mgood7123/dabaeae7b2c45e51cc3023c16cbeaa0d would this be the result of a stack corruption or buffer overflow or lifetime/scope issues?
[07:19:43] *** adeliktas51 is now known as adeliktas
[07:22:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[07:23:48] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:26:04] <kalven> any of the above?
[07:26:08] <smallville7123> could this be due to iterator invalidation?
[07:29:38] <kalven> probably not
[07:29:47] <kalven> eh, could be
[07:29:58] <kalven> since your string object seems to be broken
[07:32:40] <smallville7123> this appears to happen even before my changes...
[07:34:01] <smallville7123> this is the full log https://gist.github.com/mgood7123/0306e82bf8b99eefa37de0e99e71a470
[07:35:34] <smallville7123> the problem is not XLog as i use it to print all my output and it is capable of printing endless output without crashing
[07:36:12] <smallville7123> https://gist.github.com/mgood7123/84a2890c43a574be516dcd9a0fd2beed/revisions these are my changes (not sure if helps)
[07:37:21] <kalven> omg.. why do you churn out shit like this?
[07:39:18] <Alipha> smallville7123:....you're looping over an unordered_map to see if a key exists?
[07:39:52] <smallville7123> Alipha: yes
[07:39:58] <johnny> why?
[07:40:09] <Alipha> smallville7123: do you understand what a map is?
[07:40:24] <johnny> if maps don't let you get keys easily, then it's not a good ma
[07:40:25] <johnny> map*
[07:41:23] <smallville7123> the problem does not seem to be with defining and object-macro expansion as the following does not crash the parser              std::string s = "#define bar x\n#define foo bar\n"; for (int i = 0; i < 1000; i++) s += "foo\n";
[07:43:46] <smallville7123> and it successfully parses it with 35108 parser rule attempts
[07:44:16] <smallville7123> Alipha: yes
[07:44:48] <smallville7123> johnny: cus map[key] will always insert or assign a key and i dont want to always do that
[07:45:53] <Alipha> smallville7123: use map.find(key)
[07:46:02] <smallville7123> Alipha: alright
[07:46:04] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[07:47:17] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:48:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:51:56] <smallville7123> so this? return map.find(key) != map.end();
[07:52:45] <kalven> map.contains if you're just checking if it exists
[07:52:53] <kalven> map.find if you need the value
[07:58:13] <smallville7123> ok
[08:02:31] <Alipha> smallville7123: you can also update getValueIfExists to use find
[08:02:50] <smallville7123> yea
[08:04:17] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 240 seconds)
[08:05:02] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[08:09:08] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[08:18:23] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 256 seconds)
[08:29:07] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Ping timeout: 268 seconds)
[08:35:04] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[08:40:07] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:41:09] <smallville7123> and it was cus i was doing var->args[var->count] instead of var->args[var->count-1]
[08:50:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[08:51:19] <johnny> it is pretty common to check if the key exists indeed
[08:54:21] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:54:25] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[08:54:41] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[08:56:11] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 245 seconds)
[08:57:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[08:59:19] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Ping timeout: 250 seconds)
[08:59:44] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[09:06:21] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[09:08:06] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:08:57] *** Joins: Burgundy (~yomon@79.115.213.171)
[09:14:23] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Ping timeout: 256 seconds)
[09:28:25] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[09:28:45] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[09:30:23] <pflanze> I'm looking for recommendations on how to set up Emacs, for development with clang and g++
[09:30:37] <pflanze> (I'm on Debian)
[09:30:53] <ville> pflanze: to get emacs and its addons to work with c++ in reasonable manner firstly you want to setup your build system so it produces a compile_commands.json. probably into your project root
[09:31:35] <pflanze> OK, I guess I'll google that format (I'm using hand written Makefiles and scripts)
[09:32:45] <pflanze> Or maybe I should bite the bullet and learn cmake, I don't know.
[09:33:40] <ville> you can get plain make to spit it out as well with couple of rules. you can also use a tool such as bear
[09:34:00] <ville> https://github.com/rizsotto/Bear
[09:35:15] <pflanze> Thanks! That's in Debian as `bear`.
[09:36:43] <ville> this is my makefile "template" i copy around when i start a project: http://coliru.stacked-crooked.com/a/61ef91720667ff35 it does the compile_commands.json with plain make. no need for external tools
[09:38:12] <ville> you can call it like so: `make CXX=clang++ sanitizer` and it will build with clang++ passing in flags to enable sanitizer builds for example
[09:38:59] <ville> or `make debug` and it will use g++ to do a debug build
[09:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:42] *** ChanServ sets mode: +v npaperbot
[09:39:48] <pflanze> OK, cool. I think I should look at that tomorrow or so, since it's very late and my head is hazy already; maybe it's best if you give me just some hints on what you use, then I'll try it and get back to you when needed.
[09:39:52] <pflanze> Makes sense?
[09:40:28] <ville> anyways with that out of the way you'll probably then want to look into: https://github.com/emacs-lsp/lsp-mode/ for "IDE"-like features
[09:40:38] <AmR> Can I build boost.xxxx.zip from cmake ?
[09:40:43] <ville> this needs the compile_commands.json
[09:41:00] <pflanze> ok
[09:41:59] <pflanze> Is lsp-mode the only thing you added? (on top of standard c++-mode I guess)
[09:42:13] <ville> no. getting to them...
[09:42:17] <pflanze> aha
[09:42:59] <ville> you will possibly also want to look into some package that let's you run your build commands. i use: https://github.com/ReanGD/emacs-multi-compile
[09:43:24] <pflanze> ok
[09:44:27] <ville> it's fairly flexible and easy to configure. for example i've set it up so that if it sees makefile in the project root, it shows me a menu for: make CXX=clang++ debug, make CXX=clang++ release, make CXX=clang++ sanitizer. and same for g++ builds
[09:45:18] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:45:20] <pflanze> ok
[09:45:26] <ville> those correspond to the makefile i showed earlier, but you can configure it to give you specific menus based on various criteria
[09:45:58] <ville> for example if it sees a CMakeList.txt it would know to show things related to that
[09:47:32] <ville> that should get you going i guess
[09:47:46] <pflanze> OK, cool, thanks! I'll try it asap.
[09:48:42] <ville> AmR: you can run sequences of shell commands from most any build system. boost has instructions how to build it on its website. so that means you can replicate that sequence in your build system
[09:49:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:50:27] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:50:41] *** Joins: sonic (~sonic@user/sonic)
[09:51:29] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[09:51:54] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:52:26] *** Quits: aniketgm (~Aniket@49.36.109.33) (Client Quit)
[09:52:53] <AmR> ville: I not that good with cmake I only starting read the book About it. But I need to to do. I plan to have boost.zip UnZIp it  before building And then build it and get result and then include the boost lib's to my project.
[09:53:07] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:54:17] <ville> AmR: one of the steps you can take is to try to follow the instructions boost gives on its website. does not need any cmake knowledge
[09:55:19] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:56:23] <smallville7123> ok, so for    #define bar x\n#define foo(bar) bar()\nfoo()         i get      (x())
[09:57:18] *** Quits: segnior_ (segnior@user/segnior) (Ping timeout: 268 seconds)
[09:57:24] <AmR> ville: I think I can edit that https://stackoverflow.com/questions/3016448/how-can-i-get-cmake-to-find-my-alternative-boost-installation
[09:59:47] <AmR> I mean 26
[10:00:16] *** Joins: segnior (segnior@user/segnior)
[10:02:08] *** wyre_ is now known as wyre
[10:04:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:07:33] *** Joins: ravan (~ravan@user/ravan)
[10:10:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:10:36] *** Joins: ravan_ (~ravan@42.201.198.151)
[10:10:36] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[10:10:36] *** Joins: ravan_ (~ravan@user/ravan)
[10:11:22] *** Quits: ravan_ (~ravan@user/ravan) (Remote host closed the connection)
[10:11:37] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 240 seconds)
[10:11:47] *** Quits: ravan (~ravan@user/ravan) (Client Quit)
[10:11:56] *** Joins: sonic (~sonic@user/sonic)
[10:12:04] *** Joins: ravan (~ravan@user/ravan)
[10:19:22] <smallville7123> AmR: thought that said "find my interracial boost installation" lol
[10:19:39] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 256 seconds)
[10:19:47] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[10:27:02] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 240 seconds)
[10:28:48] *** Joins: sonic (~sonic@user/sonic)
[10:34:03] *** Joins: jancoow (~jancoow@user/jancoow)
[10:40:16] <smallville7123> when a function macro is expanded, is it's body first expanded with its params, and then rescanned for expansion with #define's
[10:47:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:53:36] <smallville7123> https://gist.github.com/mgood7123/4a2d4449b29ba7ce1b7e70d3ae5c1183 this is the wrong way to go about expanding a function-object's arguments in the macro body, right?
[10:55:21] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[10:56:30] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[10:58:11] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 256 seconds)
[10:58:33] *** Joins: sonic (~sonic@user/sonic)
[11:03:09] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[11:05:23] <ville> i would guess how macro expansion works exactly is unfortunately beyond most everyone programming c or c++ and people rather have a working understanding how it sort of works. certainly is the case for me
[11:08:27] <ville> the best looking explanation i've seen so far is: https://www.spinellis.gr/blog/20060626/cpp.algo.pdf but never tried to implement it, so dunno if that has all the necessary details
[11:10:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[11:12:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:51ae:332f:e744:1dea)
[11:17:05] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:17:50] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:19:59] *** Joins: malloy (~jimery@116.30.221.255)
[11:33:48] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[11:38:46] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[11:41:15] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 256 seconds)
[11:41:42] *** Joins: shad0w (~shad0w@user/xshadow)
[11:46:47] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:47:12] <xkoncek> has anyone used parallel algos from <execution> in practice?
[11:49:30] <RandomReader> scroll up :P    KombuchaKip has been dealing with them recently
[11:50:55] <RandomReader> the current issue being debugged aside, I think they've been a help overall, I don't remember the original conversations about them
[11:54:23] <RandomReader> IIRC it's being used for some fairly large datasets
[11:56:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:51ae:332f:e744:1dea) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[12:06:19] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:07:11] <AmR> How I can get output lib dir with cmake ?
[12:11:24] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[12:11:53] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[12:13:25] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[12:23:19] *** Joins: xShad0w (~shad0w@user/xshadow)
[12:26:33] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 268 seconds)
[12:26:33] *** Joins: robod34 (Username@79.113.195.239)
[12:26:35] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[12:33:06] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:34:41] <urdh> AmR: look at the LIBRARY_OUTPUT_DIRECTORY property of the target?
[12:34:55] <urdh> sort of depends on what you mean by "output lib dir" and what you need it for, though
[12:35:14] *** Joins: andreasbuhr (~quassel@p548ddec4.dip0.t-ipconnect.de)
[12:39:37] *** Quits: xShad0w (~shad0w@user/xshadow) (Ping timeout: 256 seconds)
[12:40:24] *** Joins: shad0w (~shad0w@user/xshadow)
[12:44:48] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[12:46:14] <Deneb> in c++ one can use strtok to get tokens from a char array. After getting, say, the first 3 tokens, how does one then get the remainer of the characters in the buffer?
[12:50:31] <smallville7123> ville: alright
[12:51:58] <smallville7123> ville: i remember looking at that ages ago
[12:52:25] <smallville7123> ville: difficult to understand with all the symbols
[12:57:38] <leduyquang753> Deneb Get the characters with the positions from the position of the token's null.
[12:58:03] <leduyquang753> Has to be worded this way as `strtok` modifies the original string.
[12:58:48] <comrad> i found strtok very horrible, so i ended up writing my own tokenizer
[12:58:52] <AmR> urdh: I build local boost so I want add to lib dir when I install it that's allwhen I have sub static lib project where .a go that what I need to find to install boost.
[13:05:40] <smallville7123> ville: https://gist.github.com/mgood7123/cffea86e5bee16bdc18614855f689001 as this is how i currently implement my macro preprocessor   (and this is only the actions that do function expansion https://gist.github.com/mgood7123/4a2d4449b29ba7ce1b7e70d3ae5c1183 )
[13:06:15] <ville> smallville7123: yeah i am not going to go through 500+ lines of code
[13:06:26] <smallville7123> ik
[13:06:29] <urdh> AmR: i have trouble parsing that, but maybe you want find_package?
[13:06:52] <smallville7123> the last one is 160 lines with only the code that does function expansion
[13:07:44] <AmR> I move test case to win now for testing what I done.
[13:08:17] <comrad> smallville7123: nothing personal, but if i see that complexity of code i know why Java is popular
[13:08:38] <smallville7123> comrad :)
[13:08:48] <ville> smallville7123: if symbols seem difficult, rewrite it with better names
[13:09:11] <smallville7123> ville: i meant in the pdf
[13:09:36] <smallville7123> the symbols in the pdf are difficult to decypher to clear intent
[13:09:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:18] <ville> smallville7123: yes. copy paste it into your editor and start replacing them with names you understand
[13:11:58] <smallville7123> eg "if TS is THS â¢ TSâ and T is a "()-less macro" then return expand(subst(ts(T ),{},{},HS âª{T },{}) â¢ TSâ );â
[13:12:29] <ville> the pdf does give you some help right off the bad: T is "token" TS is "token sequence"...
[13:12:34] <ville> err bat
[13:12:55] <smallville7123> true
[13:13:04] <LordKalma> what's u p?
[13:13:31] <smallville7123> imma just ignore the pdf for now as it is complex
[13:14:30] *** Joins: limubs (~limubs@cgn-89-0-53-192.nc.de)
[13:14:31] <ville> LordKalma: ?
[13:14:39] <LordKalma> up*
[13:15:22] <ville> smallville7123: so you're going to ignore the one document that explains it?
[13:17:16] <smallville7123> imma do one problem/step at a time, instead of attempting to understand the pdf and probably creating tons of problems along the way
[13:18:55] <Deneb> leduyquang753: never though to use null as the delimiter. Thanks.
[13:20:02] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:60d3)
[13:21:57] *** Quits: limubs (~limubs@cgn-89-0-53-192.nc.de) (Ping timeout: 240 seconds)
[13:26:50] <AmR> How I can know ASM ? I need it for debug :(
[13:28:14] <Haohmaru> you have to climb everest barefoot, alone, and there you'll find these ASM monks, a few years later you'll be an ASM ninja
[13:28:31] <LordKalma> you don't need asm to debug anything
[13:28:37] <LordKalma> you probably need to learn how to debug instead
[13:28:56] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:30:59] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:32:08] <PJBoy> woah there https://devblogs.microsoft.com/cppblog/visual-studio-code-c-december-2021-update-clang-tidy/
[13:32:14] <PJBoy> I just got done setting up the clangd stuff in the last couple weeks
[13:32:35] <PJBoy> and then they come out with official support for clang-tidy with the native C++ extension
[13:33:23] <LordKalma> hahah damn
[13:33:32] <LordKalma> clangd is still better than intellisense imho
[13:34:04] <LordKalma> but I'll give it another try one of these days
[13:34:47] <LordKalma> but intellisense getting clang-tidy is cool
[13:35:08] <LordKalma> PJBoy, you don't have to chang anything. the article says it's compatible with .clang-tidy files, so all is good
[13:36:00] <PJBoy> it'd be pretty depressing if it didn't
[13:36:17] <PJBoy> but yeah now it's clangd vs intellisense
[13:37:19] <PJBoy> does intellisense read compile_commands.json?
[13:37:26] <LordKalma> yes, if you set it to
[13:37:33] <LordKalma> but the c_cpp_properties.json file is weird
[13:37:57] <LordKalma> https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference
[13:38:04] <LordKalma> "compileCommands": "/path/to/compile_commands.json",
[13:38:20] <PJBoy> ah indeed
[13:38:30] <LordKalma> what I don't understand is whether "compileCommands" overrides the rest or not
[13:38:39] <PJBoy> so the clangd and c++ extensions are in direct competition then
[13:38:42] <PJBoy> that's true
[13:39:01] <LordKalma> compileCommands (optional) The full path to the compile_commands.json file for the workspace. The include paths and defines discovered in this file will be used instead of the values set for includePath and defines settings. If the compile commands database does not contain an entry for the translation unit that corresponds to the file you opened in the editor, then a warning message will appear and the extension will use the includePath and
[13:39:01] <LordKalma> defines settings instead.
[13:39:12] <PJBoy> yup just saw that bit
[13:39:18] <LordKalma> so it seems to only care for -I and -D
[13:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:43] *** ChanServ sets mode: +v npaperbot
[13:40:29] <PJBoy> well
[13:40:35] <PJBoy> it still might care about other stuff
[13:40:47] <PJBoy> just only those two things exist in the settings otherwise
[13:40:58] <LordKalma> you try it if you want
[13:41:02] *** Quits: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[13:41:04] <LordKalma> I might as well when I get back to c++ projects
[13:41:12] <LordKalma> but clanagd 13 is pretty good :p
[13:41:13] <PJBoy> I might have to
[13:41:21] <PJBoy> but yeah I mean
[13:41:26] <PJBoy> I just finished the clangd setup
[13:41:34] <PJBoy> >:(
[13:41:57] <LordKalma> for the C++ extension it's all about that c_cpp_properties.json
[13:45:25] <LordKalma> the extension will provide you with a basic one
[13:51:48] *** Quits: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de) (Quit: WeeChat 3.2)
[13:51:57] *** Joins: xcm (~xcm@user/xcm)
[14:02:17] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[14:08:17] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 268 seconds)
[14:11:39] *** Joins: Simplar (~quassel@188.163.93.76)
[14:11:53] <AmR> How I can build ExternalProject_Add at config time with cmake ?
[14:12:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:24:43] *** Joins: proller (~p@80.240.216.69)
[14:26:38] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[14:27:14] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[14:43:03] <LordKalma> AmR, https://cmake.org/cmake/help/latest/module/FetchContent.html
[14:45:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1de0:ae4d:2639:9c8e)
[14:45:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1de0:ae4d:2639:9c8e) (Changing host)
[14:45:25] *** Joins: skapata (~Skapata@user/skapata)
[14:50:07] <Haohmaru> !fact
[14:50:08] <nolyc> Haohmaru: A type having an extended alignment requirement is an over-aligned type.
[14:54:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:56:50] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:57:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[14:57:56] *** Quits: Guest6030 (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1) (Quit: WeeChat 3.3)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[15:00:05] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[15:00:12] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[15:19:37] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 240 seconds)
[15:21:25] <oj> If I have an object that is very expensive to copy, in my case it contains a very large buffer of memory, what's the best way to create a vector of such objects?
[15:21:46] <oj> I'm thinking just std::vector<std::shared_ptr<T>>
[15:22:40] <oj> but I'm also reading about std::reference_wrapper
[15:22:44] *** Joins: markong (~kvirc@213.146.188.203)
[15:22:45] <oj> is that worth thinking about?
[15:26:29] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:26:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[15:28:50] <PJBoy> no
[15:29:13] <PJBoy> are you ever going to copy this vector?
[15:29:23] <PJBoy> and does your type not have a quick move ctor?
[15:30:43] <oj> I don't want to move anything, these vectors are going to be used temporarily
[15:31:04] <oj> The objects are grids of floats
[15:31:10] <PJBoy> would just have a vector<T> then
[15:31:21] <PJBoy> preferably with a .reserve(n) called on it early on
[15:31:22] <oj> and copy the entire grid?
[15:31:36] <oj> not an option
[15:31:37] <PJBoy> oh these objects already exist
[15:31:46] <oj> yes
[15:31:49] <PJBoy> vector<T*> then
[15:31:56] <oj> yeah, that makes sense
[15:32:02] <PJBoy> something already handles ownership of these objects
[15:32:07] <PJBoy> so raw pointers are appropriate
[15:32:16] <oj> but not reference_wrappers?
[15:32:23] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[15:32:39] <PJBoy> you can use it if you want, but I would always suggest pointers over reference_wrapper
[15:32:43] <oj> I agree that raw pointers are the correct solution, it's obvious
[15:32:57] <oj> ok, good to know
[15:33:35] <PJBoy> reference_wrapper is really a utility used for stdlib faculties like std::thread, std::make_tuple, std::function and maybe a few others
[15:34:02] <PJBoy> they all have special semantics for reference_wrapper
[15:34:20] <oj> that's good to know
[15:34:25] <PJBoy> which is why the interface for reference_wrapper is so limited
[15:34:35] <PJBoy> and yet has an operator()
[15:35:35] <oj> cheers, you answered everything I was wondering about
[15:35:40] <oj> :)
[15:35:46] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:36:04] <PJBoy> :D
[15:41:54] *** Joins: pulse (~pulse@user/pulse)
[15:44:36] *** Joins: frost (~frost@user/frost)
[15:58:23] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0b2:c99d:ea0d:cee6)
[16:00:47] *** Joins: seninha (~seninha@user/seninha)
[16:03:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0b2:c99d:ea0d:cee6) (Ping timeout: 268 seconds)
[16:05:00] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:08:50] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[16:10:47] <LordKalma> !rq
[16:10:47] <nolyc> LordKalma: <Juliu> Why the fuck does anyone need types? When you write x.foo(), simply execute foo, no matter what the fuck x is
[16:10:50] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[16:12:00] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:14:13] <Juliu> I say fuck too often
[16:15:26] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:21:31] <mort> fuck
[16:22:08] <mort> also I think you just invented dynamic typing?
[16:22:13] <mort> !rq
[16:22:13] <nolyc> mort: <Juliu> Why the fuck does anyone need types? When you write x.foo(), simply execute foo, no matter what the fuck x is
[16:22:57] *** Joins: proller (~p@2a02:6b8:0:40c:33db:f79e:ea53:6ff6)
[16:24:01] <PJBoy> that's just duck typing in general
[16:24:30] <PJBoy> either way you still need types ofc
[16:26:44] *** Joins: pac1 (~pac1@pool-72-74-61-158.bstnma.fios.verizon.net)
[16:29:20] <urdh> is that the only quote in the db or what?
[16:29:24] <urdh> !rq
[16:29:24] <nolyc> urdh: <PJBoy> pull it, pull harder, keep pulling
[16:31:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:39:25] * Haohmaru spins nolyc like a roulette
[16:39:27] <Haohmaru> !rq
[16:39:27] <nolyc> Haohmaru: <geordi> error: 'omg' is not a member of 'wow'; did you mean 'omg'?
[16:42:00] <PJBoy> visual studio needing to reboot on some updates is the most bullshit thing
[16:44:46] <Haohmaru> the telemetry rootkit needs to be updated
[16:49:17] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[16:58:20] <LordKalma> mostly it's either locked files or making sure your $PATH is up to date or something
[16:59:06] <Haohmaru> my hypothesis is more spicy
[16:59:24] <Haohmaru> !fact
[16:59:25] <nolyc> Haohmaru: [basic.lookup.classref] describes how name lookup proceeds after the . and -> operators.
[17:00:52] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[17:01:16] <AmR> Any one Can help me with this CMake code " https://pastebin.com/3iaT48N8 " ?
[17:02:21] <lmat> In gdb, I run   break renderer::renderer(void)<CR> and it's good: sets a breakpoint on the constructor. Then later, I run ^rrenderer (that is, start reverse search with ^r then search for "renderer") and the same result comes up. That's fine. But how do I cancel that reverse search?
[17:02:52] <rpav> ctrl-g?
[17:03:32] <urdh> AmR: do you have an actual question, any error output, excpected/actual behavior, ... ?
[17:06:05] <AmR> urdh: I try build boost form .7z file But I can't make funded by cmake find pkg I try both FetchContent ExternalProject
[17:06:14] <hxx> If I don't want to go crazy with C++ features, what are some must use C++14 (at the minimal) features I should definitely use?
[17:06:35] <rpav> hxx: auto, range-based for, and lambdas
[17:07:17] <rpav> c++14 isn't really a lot different than 11 except in like constexpr permissiveness, so if you're already using a lot of 11 stuff, start looking at 17
[17:08:35] <rpav> oh, i guess make_unique was 14 .. if you're not using unique_ptr (or even if you were), that's a big one
[17:09:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:10:11] <smallville7123> how could i rewrite my grammar to correctly collect my arguments separated by comma? https://gist.github.com/mgood7123/6f7b51f5a4b2318fe53ace68eab57494
[17:10:30] <rpav> if you're writing library stuff, huge new tools are constexpr (improved in 14), variadic templates (not sure much chnaged in 14), and _variable_ templates (apparently a new-in-14!)
[17:10:50] <hxx> I'm going to be combining C and C++ together because some things I rather just use C and some things just C++. cfltk requires a C++11 compiler, but not sure if I should bump up to 14 or 17.
[17:11:14] <rpav> yea i started there too heh
[17:11:36] <Haohmaru> just splosh C++17 on it
[17:11:40] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[17:11:55] <hxx> But FLTK doesn't even take advantage of C++17 though.
[17:11:58] <smallville7123> and C++17 introduces if constexpr among other things such as any and optional
[17:12:05] <rpav> just start writing code, and have an idea of what's new .. auto, range-based-for, and lambdas are kinda critical in that you'll have a hard time even _reading_ modern C++ without understanding them
[17:12:21] <smallville7123> hxx: probs cus it has to be backwards compatible with old systems and old compilers
[17:12:30] <AmR> Can Any one help me , On how I can make this find local boost in this code
[17:12:32] <AmR> ?
[17:12:33] * Haohmaru doesn't schprachen ze lambda yet
[17:12:36] <veverak> Haohmaru: raii
[17:12:38] <veverak> fuu, sorry
[17:12:41] <veverak> hxx: RAII
[17:12:49] <Haohmaru> RAII isn't new ;P~
[17:13:00] <rpav> raii is c++11
[17:13:00] <smallville7123> AmR: abandon boost and find another library :)
[17:13:11] <Haohmaru> rpav what?!
[17:13:28] <urdh> rpav: lol no it isn't
[17:13:37] <rpav> anything before is sortof a grossly-lacking hack
[17:13:41] <veverak> ah :)
[17:13:54] <xkoncek> it->second.second = ...
[17:13:56] <urdh> (you can have RAII without move semantics, though admittedly it'll be more annoying)
[17:14:20] <rpav> urdh: without move semantics you only get a fraction of functionality .. sure you can ctor/dtor to do things by scope, but that's only the bare minimum
[17:14:38] <rpav> like implement some raii thing without move, and you'll soon feel the pain
[17:14:45] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[17:14:50] <urdh> been there, done that ;)
[17:14:52] <rpav> yea
[17:14:57] <xkoncek> hey, i rmeember when c++11 was called "modern c++"
[17:15:05] <xkoncek> waiting for postmodern c++
[17:16:17] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[17:16:19] <rpav> urdh: now don't get me wrong, they absolutely could have implemented a move idiom without language support pre-11, but they didn't, and thus i consider it unfair to say pre-11 raii was really complete enough to be generally useful
[17:17:04] <rpav> thus you don't really get it til 11 kicks in
[17:17:06] <urdh> fair enough, RAII in the standard library is pretty much C++11
[17:17:39] <PJBoy> idk that you could have had the move idiom prior to C++11
[17:17:39] <urdh> and I wouldn't expect much RAII in code written prior to C++11 existing
[17:17:56] <PJBoy> rvalue references or something equivalent seems necessary
[17:18:06] <rpav> it's slightly boggling because you had big libraries like Qt that _also_ could have independently done their thing .. i've never really looked up the origins of "move semantics" conceptually but i wonder if it didn't actually start as a consideration til like mid-00s
[17:18:25] <PJBoy> as you need references that bind to temporaries to be able to steal their resources
[17:18:34] <urdh> PJBoy: the shitty auto_ptr hack is usually what you end up with
[17:18:44] <xkoncek> although you can const_cast too
[17:19:10] <PJBoy> can you const_cast away the constness of a const ref to a temporary?
[17:19:19] <PJBoy> and have the result not be undefined
[17:19:24] <PJBoy> I'm genuinely not sure
[17:19:45] <rpav> PJBoy: nah you could have like .get() and deal with "non-owning" refs but
[17:19:48] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[17:20:25] <xkoncek> PJBoy afaik, const casting away if the object was not declared const is defined
[17:20:31] <rpav> also you could have a `handle<T> x = some_smrt_ptr;` that does it implicitly i think?
[17:20:36] <xkoncek> *well-defined
[17:20:46] <PJBoy> but it's a temporary :/
[17:20:48] <rpav> i haven't written 03 in a long time and don't really recall the limits
[17:20:59] <PJBoy> bound to a const ref :/
[17:21:24] <PJBoy> it's the case of the temporaries that couldn't work pre 11
[17:21:39] <rpav> what case was this?
[17:21:41] <leduyquang753> You can only cast away `const` and modify the value if the reference was not `const` to begin with.
[17:21:42] <PJBoy> otherwise yeah you can just use normal lvalue references to steal resources
[17:22:33] <PJBoy> like say `vector<int> v(make_vector());`
[17:22:51] *** Joins: aniketgm (~Aniket@49.36.109.33)
[17:22:58] <PJBoy> that invokes the move ctor of vector<int> because `make_vector()` returns a prvalue that binds to the rvalue reference overload
[17:23:13] <PJBoy> you couldn't bind a non-const lvalue reference to that
[17:23:23] <rpav> well you can't invoke a move ctor when you don't have move ctors
[17:23:46] <rpav> you can always model a thing with another type rigfht
[17:23:55] <PJBoy> couldn't get a non ctor function to do it either, for the same reason
[17:24:17] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 240 seconds)
[17:24:31] <PJBoy> I think you'd have to make a variable out of that temporary first, at minimum
[17:24:48] <PJBoy> but then that would already mean a copy is made
[17:25:09] <PJBoy> so avoiding a copy would end up meaning some kind of out parameter type situation for `make_vector`
[17:25:20] <PJBoy> and move semantics stop being a useful concept
[17:27:44] <rpav> hrm
[17:29:18] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:29:37] <rpav> let's see if i can even write some c++03 that compiles
[17:29:58] <fiesh> void f(){}
[17:30:34] <rpav> apparently cmake cannot set c++03 as a the standard
[17:30:42] <rpav> https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD.html
[17:30:42] <PJBoy> bahaha
[17:30:43] <urdh> that's not too difficult
[17:30:46] <PJBoy> wow
[17:31:10] <PJBoy> C++98 is the same as C++03 anyway
[17:31:19] <PJBoy> in GCC they're aliases, and MSVC doesn't have the option at all
[17:31:23] <urdh> the real challenge is sticking to C++03 when almost all of your toolchains accept some (but not all) C++11
[17:31:34] *** Joins: pulse (~pulse@user/pulse)
[17:31:34] <rpav> is it? i was not paying attention at that point and never went back to check
[17:31:42] <rpav> yea
[17:31:59] <PJBoy> value initalisation was the only major change from C++98 to C++03, and that got DR'd back into C++98
[17:32:06] <PJBoy> so standards wise they're the same too
[17:32:19] <urdh> also auto_ptr I guess?
[17:32:31] <PJBoy> I thought that was C++98
[17:32:38] <RazielZ> 98 and 03 are the same in clang too, iirc
[17:32:41] *** RazielZ is now known as Raziel
[17:32:49] <PJBoy> cppreference would indicate that auto_ptr was C++98
[17:32:57] <urdh> hm, maybe
[17:33:19] <rpav> no variadic templates is hell
[17:33:52] <PJBoy> no idea what CMake does for visual studio here
[17:33:55] <rpav> auto_ptr was definitely around pre-03, i remember discussions in class
[17:34:13] *** Joins: adeliktas (~adeliktas@i59F5284A.versanet.de)
[17:34:45] <PJBoy> pretty sure VS doesn't support C++11 or prior
[17:35:18] <urdh> the correct thing would be to error out
[17:36:17] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[17:36:54] <PJBoy> wish they'd DR all the C++14 features back onto C++11
[17:36:57] <urdh> looks like it just falls back to c++14 though
[17:37:31] <urdh> (it does something similar for TI compilers which have also dropped C++03 support)
[17:37:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 245 seconds)
[17:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:43] *** ChanServ sets mode: +v npaperbot
[17:41:44] <PJBoy> wait is visual studio community open source??
[17:42:16] <rpav> only vscode
[17:43:37] <PJBoy> oh I misread their slogan
[17:43:40] <PJBoy> > Free, fully-featured IDE for students, open-source and individual developers
[17:44:09] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:44:18] <Haohmaru> PJBoy shows strong signs of addiction
[17:44:27] <PJBoy> addiction to what?
[17:44:33] <Haohmaru> the M$
[17:45:22] <PJBoy> idk about that
[17:46:07] <Haohmaru> that's how it always starts
[17:46:38] <Haohmaru> !fact
[17:46:39] <nolyc> Haohmaru: A member or a member template may be nested within many enclosing class templates.
[17:46:42] <PJBoy> VS Code just happens to be the only text editor that supports clangd well
[17:46:53] <PJBoy> and visual studio just happens to be the best development environment for windows
[17:47:19] <PJBoy> but I hate teams and outlook, and I'm not looking forward to windows 11 one bit
[17:47:19] <LordKalma> both true
[17:47:27] <LordKalma> all true
[17:47:30] <LordKalma> agree 100%
[17:47:37] <ville> PJBoy: vim and emacs support clangd just fine
[17:47:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:47:45] <ville> PJBoy: as do various other editors
[17:48:36] <Haohmaru> this was that thing that analyzes the code and provides descriptions and other clues to the IDE so you can see what's what and where this or that was declared/defined.. right?
[17:48:37] <ville> if "supports" counts that there is an addon/package for the functionality
[17:48:42] <PJBoy> vim and emacs don't count of course
[17:48:54] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:49:03] <Haohmaru> and can suggest about the names of existing things as you write the code..
[17:49:19] <PJBoy> clangd, yeah
[17:49:31] <PJBoy> it's a C++ implementation of the Language Server Protocol
[17:49:37] <Haohmaru> i think i heard someone was making a plugin for it for C::B even
[17:49:42] <Haohmaru> but not sure what happened
[17:49:52] <ville> Haohmaru: at least for emacs it modularized, so clangd can be used to do the parsing part. but that it self has no visible interface in emacs. you can choose your own "representation thing"
[17:49:53] <PJBoy> which aims to be generic interface that IDEs can use to process C++
[17:50:08] <PJBoy> but IDEs have been doing a lousy job of using it so far
[17:50:51] <PJBoy> with VS Code, its clangd extension is great and all
[17:50:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[17:51:17] <PJBoy> but there's still a weird Microsofty thing where they've added support for clang-tidy to their own brand C++ extension
[17:51:17] <Haohmaru> meh
[17:51:30] <PJBoy> I wish they'd just commit to using clangd
[17:51:36] <PJBoy> which already does clang-tidy integration
[17:51:55] <ville> you mean lsp in general?
[17:52:05] <PJBoy> I wish VS Code would use LSP in general yeah
[17:52:10] <PJBoy> and IDEs in general
[17:52:20] <PJBoy> but clangd is the only case I'm familiar with
[17:52:40] <ville> in general it's a major problem they ackowledge private-ly
[17:52:59] <ville> couldn't fit more military ranks
[17:54:10] <ville> but no reason to discount emacs or vim. they aren't that much worse editors than anything else
[17:54:55] <Haohmaru> they probably aren't written in Electron ;P~
[17:55:22] <ville> worse in emacs' case: elisp
[17:55:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[17:56:18] <Haohmaru> don't tell me it's interpreted
[17:58:29] <LordKalma> PJBoy, I have a generic LSP client extension in mind
[17:58:36] <LordKalma> it's bottom of my project log though
[18:00:16] <ville> it may be intepreted as-is, but in general it's compiled into bytecode. and everyone is now waiting for emacs 28 which will be able to compile to native
[18:01:41] <Haohmaru> so there's gonna be a compiler from this "elisp" down to native, or did they just rewrite the emacs thing in something more normal like C?
[18:01:51] <PJBoy> yo we're setting up conan now
[18:02:01] <PJBoy> what an incredible period of time
[18:02:06] <Haohmaru> PJBoy that's barbaric
[18:02:26] <LordKalma> no. Barbarian is another piece of software :p
[18:02:38] <LordKalma> PJBoy, you might want to join the slack. conan will generate a lot of questions
[18:03:04] <Haohmaru> stay here PJBoy
[18:03:23] <ville> emacs' "core" or the interpreter and byte compiler are written in c i believe. the "editor" commands and such are then written in elisp. which can be intepreted, compiled to bytecode and in the future to native code
[18:04:04] <Haohmaru> is that basically its own dedicated "language" like mIRC's scripts?
[18:04:08] <ville> the native compilation uses libgccjit i believe
[18:04:16] <ville> elisp?
[18:04:19] <Haohmaru> yeah
[18:04:28] <PJBoy> LordKalma, I don't want questions, I want answers
[18:04:29] <Haohmaru> altho i've heard about "lisp" which sounds similar
[18:04:47] <rpav> PJBoy: https://godbolt.org/z/TE6KvsYrY maybe
[18:04:50] <ville> it's a lisp-something language. derivative or whatever you wish to call it
[18:05:15] <rpav> PJBoy: uses const moving<T>& with a mutable value, and always-moves on copy, but moving defaults to copy
[18:05:51] <ville> your basic dynamically typed, garbage collected, funtional language. basically hitting the trifecta of things that suck
[18:06:03] <rpav> i think maybe you'd want an `operator T&()` in `moving` so you could transparently initialize things that didn't implement a "T(const moving<T>&)`
[18:06:24] <rpav> lisp isn't a functional language :p
[18:06:35] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:06:53] <rpav> at least not from "everything is immutable, everything is a function" perspective, though it has some functional toys
[18:06:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:07:45] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[18:10:12] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[18:11:10] <ville> yes it's not pure, but if i am going to stick it into one bin then it's going to be functional
[18:11:19] <rpav> then your binning is poor
[18:11:36] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[18:11:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 268 seconds)
[18:11:59] <rpav> PJBoy: https://godbolt.org/z/K5cddYP9W with `moving<T> make<T>()` and a B that only has a copy ctor
[18:12:32] <rpav> it's possible/probable that it's fragile, but i don't know
[18:13:34] <rpav> also i think you can't `move<T>(T())` as that would require accepting/moving const T&, which is likely a step too far for safety
[18:13:34] *** Joins: sandal (~sandal@pool-108-21-229-216.nycmny.fios.verizon.net)
[18:13:37] <sandal> hey folks! I am attempting to add a header and cpp source file to my project, on windows, msvc, c++17, and I am getting a bunch of errors like this: 'BOOL SetCurrentDirectoryW(LPCWSTR)': cannot convert argument 1 from 'const _Elem *' to 'LPCWSTR'... I am not very familiar with windows, but this code compiles just fine when it is compiled independently of my project
[18:14:19] <PJBoy> any context on that?
[18:14:38] <Haohmaru> are you missing some -DDEFINEs?
[18:14:39] <PJBoy> windows notably has a different definition of wchar_t than linux
[18:14:55] <Haohmaru> oh, it's not even gcc
[18:15:19] <sandal> I don't think I am missing an DEFINEs, I threw it in a blank cmake project and it compiled just fine
[18:15:54] <leduyquang753> What is `_Elem`?
[18:16:11] <rpav> UB? ;)
[18:17:18] <sandal> ahh sorry, below the error I originally gave, it gives me: cannot convert argument 2 from 'char *' to 'LPWSTR'
[18:17:49] <PJBoy> the error is sensible
[18:17:53] <sandal> not sure what _Elem is
[18:17:53] <leduyquang753> It is expecting a wide string rather than a normal string.
[18:18:00] <PJBoy> but one would wonder why you're calling that function
[18:18:29] <PJBoy> it could well be that your windows build is `#define UNICODE` or something
[18:18:31] <leduyquang753> So it is probable you were compiling your thing without Unicode on and now you do.
[18:18:37] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:19:38] <sandal> the char * comes from calling .c_str() on a std::string
[18:19:53] <PJBoy> that makes sense too
[18:20:21] <sandal> oh so is there a way to tell the compiler to give me back a wide string instead of a char *
[18:20:40] <sandal> it looks like the windows API is using the right call (the unicode call instead of the ascii one)
[18:20:51] <sandal> but the std lib is giving me ascii stuff
[18:21:05] <leduyquang753> Use `std::wstring` or `MultiByteToWideChar`.
[18:21:29] <sandal> ah gotcha. I am using an external library (duckDB) and was hoping to avoid a code change :)
[18:24:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:24:07] *** Joins: markong (~kvirc@213.146.188.203)
[18:24:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:25:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:25:34] *** Joins: aniketgm_ (~Aniket@49.36.109.33)
[18:25:42] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:29:32] *** Quits: aniketgm_ (~Aniket@49.36.109.33) (Client Quit)
[18:29:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[18:33:55] *** Quits: adeliktas (~adeliktas@i59F5284A.versanet.de) (Quit: Client closed)
[18:34:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:34:09] <rpav> variadic templates and auto were such game changers for nice APIs
[18:35:02] <PJBoy> idk I still don't really like auto
[18:35:06] <rpav> and lambdas, then really structured bindings
[18:35:40] <rpav> you say that, but i still remember the days of `for(std::vector<MyType>::iterator it = v.begin(); ...)` :P
[18:36:08] <rpav> and i'm abbreviating because i don't want to type it all
[18:36:08] <PJBoy> you mean the days of using a typedef for that
[18:36:29] <rpav> it would be rare to do such
[18:36:47] <PJBoy> yeah well it's rare to do anything right
[18:37:19] <sandal> i think I am on the right track now with my issue. wanted to say thanks PJBoy & others for helping me!
[18:37:20] <rpav> yeah, but then they finally did and introduced auto
[18:37:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:37:32] <Haohmaru> is that clangd thing able to figure out what the actual type of some "auto" variable is?
[18:37:34] <PJBoy> <_<
[18:37:41] <PJBoy> sandal, I'm glad I was of some help
[18:37:46] <rpav> Haohmaru: yeah of course
[18:37:52] <Haohmaru> fancy
[18:37:52] *** Quits: sandal (~sandal@pool-108-21-229-216.nycmny.fios.verizon.net) ()
[18:38:11] <rpav> not really, it can't compile without knowing
[18:38:18] <PJBoy> auto is genuinely useful at times, for sure
[18:38:34] <Haohmaru> rpav i mean, that's where my IDE farts on the pants
[18:38:39] <Haohmaru> ..and shrugs
[18:38:41] <PJBoy> like if you need to do something like `T var = static_cast<T>(expr);`, the writing of T there is pointless
[18:38:45] <rpav> though if you start using auto lambas, different story since it's basically a template
[18:38:56] <PJBoy> and generic code benefits from auto quite directly
[18:38:57] <rpav> Haohmaru: use a better editor?
[18:39:01] <Haohmaru> no
[18:39:09] <Haohmaru> it's fine
[18:39:43] <Haohmaru> i just avoid using auto unless it's really a good idea
[18:40:01] <PJBoy> :)
[18:40:09] <BurumaSerafuku> nah
[18:40:12] <BurumaSerafuku> use auto everywhere
[18:40:16] <Haohmaru> no, u
[18:40:23] <BurumaSerafuku> auto makes code better
[18:40:28] <rpav> BurumaSerafuku: yeah basically
[18:40:34] <PJBoy> types are useful
[18:40:39] <BurumaSerafuku> yes. they are
[18:40:42] <BurumaSerafuku> declare them only once
[18:40:45] <rpav> ^
[18:40:46] <PJBoy> no need to make code cryptic
[18:40:47] <BurumaSerafuku> or when you need a cast/conversion
[18:41:11] <rpav> it boggles me how people who otherwise know C++ still have the "auto means no type" misconception
[18:41:22] <PJBoy> you also lose out on basic sanity checks by forcing the compiler to deduce the variable type
[18:41:29] <BurumaSerafuku> { auto v = vector({1,2,3}); cout << v; } // beautiful
[18:41:30] <geordi> {1, 2, 3}
[18:41:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:42:03] <PJBoy> wow that mixes so many concepts together
[18:42:04] <Haohmaru> { vector v = {1,2,3}; cout << v; } // shorter?
[18:42:05] <geordi> {1, 2, 3}
[18:42:22] <BurumaSerafuku> I don't like {} init directly. too many ways to screw it up
[18:42:30] <PJBoy> I completely agree
[18:42:38] <BurumaSerafuku> vector{10} == ?? (10 elements or single element?)
[18:42:56] <Haohmaru> single?
[18:43:01] <PJBoy> in any case, that instance of auto is neither here nor there
[18:43:02] <paule32> hello
[18:43:10] <PJBoy> you don't actually infer the type or anything like that
[18:43:14] <BurumaSerafuku> vector{3,3} == ?? (3 elements or 2 elements?)
[18:43:20] <BurumaSerafuku> this is a better example
[18:43:27] <PJBoy> you're just doing the "put the type on the RHS of the = token" style
[18:43:51] <BurumaSerafuku> vector(3,3) is always 3 elements and vector({3,3}) is always 2
[18:43:52] <Raziel> I don't see how that's so confusing. {} is a list, not a function
[18:43:54] <PJBoy> which I dislike, but only stylistically
[18:43:56] <rpav> `auto p = make_unique<SomeType>(...);`
[18:43:58] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:441e:c15a:a245:7337)
[18:44:05] <BurumaSerafuku> << vector(3,3),vector({3,3})
[18:44:06] <geordi> {3, 3, 3}, {3, 3}
[18:44:23] <paule32> is it possible to get the instance number of a control (window class) of a child window under windows (hwnd handle) with win32api function(s) ?
[18:44:26] <Raziel> << vector(3,3),vector{3,3}
[18:44:27] <geordi> {3, 3, 3}, {3, 3}
[18:44:38] <BurumaSerafuku> uniform init my ass
[18:44:57] <rpav> BurumaSerafuku: this being C++, nothing is universally uniform
[18:45:03] <PJBoy> paule32, I believe so
[18:45:08] <BurumaSerafuku> that's why I always use ()
[18:45:23] <BurumaSerafuku> always auto and always (). I reached some degree of uniformity
[18:45:50] <PJBoy> but auto is necessarily inconsistent
[18:45:55] <rpav> BurumaSerafuku: sadly you can't `struct S { auto x = ...; }`
[18:46:05] <PJBoy> as you can't use it for class members or function parameters
[18:46:08] <BurumaSerafuku> yeah
[18:46:18] <BurumaSerafuku> but declaring types is necessary
[18:46:18] <PJBoy> or use it to declare a variable that's default initialised
[18:46:26] <BurumaSerafuku> just want to declare the type once
[18:46:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 260 seconds)
[18:47:23] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[18:47:27] <PJBoy> my issue is more along the lines of `auto v_new = v;`
[18:47:38] <PJBoy> I'd much rather specify that v_new is a vector there
[18:47:46] <PJBoy> then I know what I'm working with
[18:47:55] <PJBoy> and enforce that I'm working with that thing
[18:48:10] <PJBoy> if I try to initialise this v_new with something that can't be converted to a vector, I wanna know about it
[18:49:09] <PJBoy> i.e. it's important to me to know what I expect and what I'm working with
[18:49:11] <rpav> lame, template argument deduction not allowed for struct members either
[18:49:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:49:27] <PJBoy> it is to a degree
[18:49:59] <PJBoy> { Arr arr{{1, 2, 3}}; } template<typename T, size_t n> struct Arr { T data[n]; };
[18:50:00] <geordi>  
[18:50:31] <PJBoy> albeit quite a limited degree
[18:50:41] <PJBoy> { Arr arr{{1, 2, 3}}; } template<typename T, size_t n> struct Arr { array<T, n> data; };
[18:50:41] <geordi> error: class template argument deduction failed:
[18:51:20] <PJBoy> list initialisation is extremely limited -_-
[18:51:49] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:441e:c15a:a245:7337) (Ping timeout: 256 seconds)
[18:53:39] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Remote host closed the connection)
[18:53:42] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:d5e0:f147:33e0:420f)
[18:56:23] <rpav> {} struct S { vector v = {1, 2, 3}; };
[18:56:23] <geordi> error: invalid use of template-name 'vector' without an argument list
[18:56:48] <PJBoy> oh that thing
[18:57:04] <PJBoy> not sure what the deal with that is
[18:57:21] <PJBoy> I think the class needs to be completed before the DMI can be evaluated?
[18:57:21] <rpav> i think the solution is obvious though. obvious
[18:57:44] <PJBoy> so a non deduced data member causes a catch 22
[18:58:03] <rpav> {} struct S { any v = vector{1,2,3}; };
[18:58:03] <geordi>  
[18:58:07] * rpav runs
[18:58:15] <PJBoy> haha
[19:00:48] <urdh> you misspelled `var`
[19:01:00] <rpav> don't you have `#define var any`
[19:01:27] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:d5e0:f147:33e0:420f) (Ping timeout: 256 seconds)
[19:02:13] *** Joins: markong (~kvirc@213.146.188.203)
[19:05:20] *** Joins: xkuru (~xkuru@user/xkuru)
[19:10:37] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[19:12:21] *** Joins: msk (~msk@103.213.213.70)
[19:12:21] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:f0eb:8037:7cd:2630)
[19:13:09] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:f0eb:8037:7cd:2630) (Client Quit)
[19:14:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:17:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:23:14] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:23:16] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[19:23:20] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Client Quit)
[19:31:29] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:31:55] *** Joins: meator (~meator@user/meator)
[19:34:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d672:a7f5:a798:3393)
[19:34:46] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[19:38:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[19:40:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:43:59] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[19:46:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:48:36] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:48:41] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 245 seconds)
[19:50:41] *** Joins: jiffe (~jiffe@mail.nsab.us)
[19:57:03] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:06:16] <manuels> Is there a patter similar to the service locator pattern, but such that there is no a single serviceendpoint, but rather an extension pool where multiple extensions are stored which clients can get?
[20:09:58] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:12:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[20:13:13] <manuels> Imagine a keyboard launcher. Plugins can implement the querhandler interface and register itself. A query engine then fetches the handler from the pool. This could also be achieved by the service locator pattern if the engine provides a service endpoint and all handler register themselves there. But now imagine there is also an action provider
[20:13:13] <manuels> interface for e.g. Files. The files query handler itself is a plugin implementing the query handling interface. If it would offer a service endpoint only this plugin could use the registered action providers, but since other plugins could offer file items too, the extension pool allows more plugins to use the file action providers.
[20:13:32] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:13:50] <manuels> Is that a valid use case for this pattern or is this nonsense? And does this pattern exist?
[20:15:47] <BurumaSerafuku> what's the C++ question? I got lost
[20:17:03] *** Joins: paul424 (~tom@ip-5-172-236-186.multi.internet.cyfrowypolsat.pl)
[20:18:45] <manuels> It's rather a software design question but it's c++ practice (topic) and code (and it's limitations)
[20:18:55] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:20:05] <manuels> In short does it make sense in a mutilpe producer multiple consumer topology to just have a global passive pool?
[20:20:13] <rpav> there aren't really limitations that aren't theoretical (you can't solve the halting problem) or purely syntactic (can't make the code you type precisely as brief as you'd like)
[20:20:14] *** Quits: paul424 (~tom@ip-5-172-236-186.multi.internet.cyfrowypolsat.pl) (Client Quit)
[20:20:18] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[20:20:30] <rpav> but i think whatever you're doing sounds overly complicated as it is
[20:21:52] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[20:26:33] *** Joins: Simplar (~quassel@188.163.93.76)
[20:34:40] <msk> manuels: how do you implement the plugins, curious to know.
[20:34:59] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:43:39] <PJBoy> I don't think anyone here really buys into general coding "pattern"s
[20:45:35] <malinus> PJBoy: not more than they can sometimes be a inspiration I guess
[20:51:04] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:51:59] <xkoncek> first problem i noticed with octrees was that if my object happens ot overlap with the boundaries, i cannot split the space further
[20:52:51] <xkoncek> a solution that seems to work is not to split the cube in 8 half-sized cubes but in 8 larger cubes that overlap in the middle
[20:53:16] <xkoncek> like 2/3 or 5/8 or so
[20:54:26] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:54:44] <xkoncek> last issue, that is probably not possible to solve is that very eccentric shapes will end up occupying large cubes
[21:03:01] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:03:20] <ville> xkoncek: you can either stick the object at the level it fits or stick it into multiple leafs
[21:03:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[21:04:26] <ville> or those may be some of the conventional choices to resolve it
[21:04:29] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:04:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:05:15] <ville> suppose split it on insertion to subobjects should be there as well
[21:07:35] <xkoncek> i am going to assume that i will be working with cube-like shapes, otherwise splitting the object into multiple cubes would be the workaround
[21:09:54] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:226:6685:3dd4:7093)
[21:24:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:28:40] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:21a3:4bf2:b994:55b1)
[21:33:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ¦)
[21:39:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:43] *** ChanServ sets mode: +v npaperbot
[21:46:04] <AmR> Any one Can help me with cmake please ?
[21:50:58] <manuels> Msk the plugin itself? QtPlugin Or how they integrate into the system?
[21:51:47] <LordKalma> QPlugin is a great way to do plugins
[21:51:52] <LordKalma> if you know how to use it ;)
[21:52:09] <manuels> PJBoy it's a pattern not some thing. If you name it or not, you use it.
[21:52:34] <PJBoy> yeah I know
[21:52:51] <PJBoy> but actively thinking about named patterns?
[21:52:52] <PJBoy> idk man
[21:54:23] <manuels> Sure, I'm am just looking libraries up. Trying to find inspiration. It is similar to dependency injection stuff, which has tons of libraries.
[21:55:08] <manuels> And actually I don't know the term which I should google
[21:59:06] *** Quits: proller (~p@2a02:6b8:0:40c:33db:f79e:ea53:6ff6) (Ping timeout: 245 seconds)
[22:05:43] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:06:12] *** Quits: DrMax (~DrMax@node-1w7jra94757fzkt36qk02mggx.ipv6.telus.net) (Remote host closed the connection)
[22:07:39] *** Joins: DrMax (~DrMax@node-1w7jra94757g0eo72mt0a6p21.ipv6.telus.net)
[22:14:56] <LordKalma> vscode updated yesterday and today again... someone fucked up :p
[22:16:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:16:41] <Raziel> AmR, try asking your actual question and someone probably will
[22:18:23] *** Quits: andreasbuhr (~quassel@p548ddec4.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:19:44] <jkaye> IME dependency injection frameworks massively overcomplicate what is really a very simple problem solved by good design
[22:19:56] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[22:21:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:21:48] *** vinleod is now known as vdamewood
[22:23:08] <great_taste> how to deal with being stuck at a stupid problem for days?
[22:24:06] <kalven> write a shitty solution and move on
[22:24:08] <kalven> get back to it later
[22:24:23] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Quit: Client closed)
[22:24:49] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[22:25:02] <InPhase> great_taste: Choose from:  1) Get more diagnostic data in a different manner, focusing on exploring the fundamentals of what's happening.  2) Get a change of scenery to break out of your mental blindspot and try to think big-picture about the nature of the problem to try to brainstorm possible causes.
[22:25:49] <PJBoy> LordKalma, still not as bad as Steam client
[22:26:07] <PJBoy> I've yet to log in to Steam without an updating being required
[22:26:51] <PJBoy> great_taste, I like to put down my current working state into comments
[22:26:58] <PJBoy> and then do what kalven said
[22:27:21] <PJBoy> helps clear your mind
[22:27:49] <great_taste> it's nice when you can write a shitty solution
[22:27:54] <great_taste> that's not always possible
[22:28:09] <kalven> I'm sure the people who use your code are used to it by now
[22:28:32] <great_taste> e.g. when you have a crash that you cant figure out
[22:29:51] <PJBoy> that sounded really harsh, kalven hahaha
[22:30:09] <great_taste> nobody uses my code
[22:30:11] <PJBoy> I assume you mean all developers are used to crappy solutions to problems
[22:30:25] <PJBoy> not used to great_taste's code being crappy in general
[22:30:33] <kalven> I.. yeah, that's what I meant!
[22:30:52] <PJBoy> hahahaha
[22:31:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[22:34:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:37:44] <Raziel> great_taste, hey I was stuck on a stupid problem for months. :p
[22:38:20] *** Joins: magla (~gelignite@55d46610.access.ecotel.net)
[22:38:47] *** Joins: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl)
[22:44:33] <great_taste> you survived, congrats
[22:46:03] *** Quits: c4017w (~c4017@209.52.68.8) (Quit: Leaving)
[22:46:19] *** Joins: c4017w (~c4017@209.52.68.8)
[22:48:28] *** Joins: meator (~meator@user/meator)
[22:49:21] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[22:51:26] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[22:52:32] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:53:02] *** Joins: aniketgm (~Aniket@2405:201:1007:4e71:c1d:1ac6:7baf:8a43)
[22:56:57] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[22:57:15] *** Joins: meator (~meator@user/meator)
[22:57:37] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[22:58:52] *** Joins: proller (~p@2a02:6b8:b081:a428::1:24)
[23:00:19] *** Joins: paul424 (~tom@ip-5-172-236-186.multi.internet.cyfrowypolsat.pl)
[23:01:29] <AmR> I try build boost form .7z file But I can't make funded by cmake find pkg I try both FetchContent ExternalProject , My code https://pastebin.com/3iaT48N8
[23:23:49] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Quit: Client closed)
[23:24:21] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[23:24:54] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:28:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:33:08] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Quit: Client closed)
[23:33:35] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[23:45:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 240 seconds)
[23:46:47] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:54:14] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
