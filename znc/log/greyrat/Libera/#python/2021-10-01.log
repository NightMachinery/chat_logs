[00:03:24] *** Joins: alex11 (~alex11@user/alex11)
[00:05:08] *** Joins: Auron (~Auron956@user/auron)
[00:06:52] *** Joins: zeden (~zeden@user/zeden)
[00:07:19] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[00:08:11] *** Joins: cebor (~cebor@user/cebor)
[00:09:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:11:02] <NoImNotNineVolt> https://bpa.st/WODQ
[00:11:18] <NoImNotNineVolt> okay, so, that's my issue. i'm trying to make a JSONEncoder that handles decimal.Decimal objects right.
[00:11:50] <NoImNotNineVolt> unfortunately, what i have so far include spurious doublequotes around the result, and i don't want to blindly trim them off, i guess.
[00:12:59] <NoImNotNineVolt> i.e.   return str(o).replace('"', '') doesn't seem like the best way of "solving" this.
[00:13:08] <NoImNotNineVolt> any ideas?
[00:14:14] <matsaman> why don't you want to blindly trim them off?
[00:14:42] <NoImNotNineVolt> i dunno, seems hackish?
[00:15:06] *** Joins: sybariten (~jake@157.90.217.120)
[00:15:16] <matsaman> what else would you do?
[00:15:28] <matsaman> besides remove the quotes
[00:15:32] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[00:15:34] *** Quits: murd0c (~Murdoc@user/murd0c) (Quit: WeeChat 2.8)
[00:16:21] <NoImNotNineVolt> i could try creating an int, comparings its value against the original decimal; if match, return int, if not, try float, return that.
[00:16:40] <NoImNotNineVolt> but that's even more hackish, i guess.
[00:17:35] <NoImNotNineVolt> ... and that wouldn't work anyway. doesn't a json encoder need to return strings? :P
[00:17:57] <NoImNotNineVolt> okay, fine. .replace('"', '') it is.
[00:17:57] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:20:37] <ali1234> doesn't the built-in one have this capability?
[00:21:16] <matsaman> NoImNotNineVolt: or .strip()
[00:21:40] <ali1234> or is that only the decoder?
[00:22:41] <matsaman> good question, 'json' doesn't handle decimal.Decimal objects?
[00:22:54] <ali1234> apparently only the encoder
[00:22:58] *** Joins: pycode (~pycode@2001:b07:5d28:551:78b8:b18:ca19:70f3)
[00:23:03] <ali1234> via parse_float=Decimal.decimal
[00:23:08] <ali1234> *decoder i mean
[00:23:11] <matsaman> ah
[00:23:15] <ali1234> the encoder can only do regular types
[00:23:25] <matsaman> weird
[00:24:01] <matsaman> 'simplejson', I guess
[00:24:04] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 268 seconds)
[00:24:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:24:23] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[00:24:38] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[00:24:43] <matsaman> https://stackoverflow.com/questions/1960516/python-json-serialize-a-decimal-object
[00:24:58] <Togra> I found myself needing to use json to store trees of objects, it got weird but worked out in the end. plenty of stackoverflowing
[00:25:22] <Togra> the solution was turn the objects into dictionaries with all their properties, and child dictionaries, etc., and add a property to each dict that's just a string saying what object it was
[00:25:32] <Togra> use that property on each to reconstuct the objects when loading back in
[00:25:33] <NoImNotNineVolt> Object of type str is not JSON serializable
[00:25:34] <NoImNotNineVolt> lol
[00:25:47] <Togra> worked for my stuff lol
[00:25:53] *** Quits: truth (~truth@user/truth) (Quit: brb)
[00:25:58] <Togra> testvar = "string here" ?
[00:26:15] <Togra> oddly enough this whole setup works faster than using yaml, which can serialize objects
[00:26:18] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 260 seconds)
[00:26:33] <NoImNotNineVolt> json.dumps({"foo": decimal.Decimal(10)}) still gives me {"foo": "10"} :|
[00:26:50] <matsaman> I wish there was just a .pydict instead of .json
[00:26:59] <Togra> pickle? :<
[00:26:59] <matsaman> what a dumb format
[00:27:02] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:27:22] <Togra> before I found json, I was using xml, those were fun days
[00:27:35] <Togra> didn't realize the alternatives available allowed you to just skip all of the mess
[00:27:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:28:19] <matsaman> I admit it's better than XML, but that's not saying much
[00:28:38] <matsaman> at least, in most ways people use XML & JSON it is
[00:28:51] <Togra> I guess in theory, if you got really desperate, you could have the decimal.Decimal() stuff saved in a dict with two keys, one for the value and another just saying "I'm a decimal please convert me back when read in" and have something go over your data after you load it
[00:29:06] <matsaman> you wouldn't have to deal with any stupid quoting issues in XML, for example
[00:29:29] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:31:58] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:387b:9fcf:63d:76d6)
[00:32:43] <NoImNotNineVolt> Togra: that's not far off from what dynamodb does under the hood
[00:33:01] <Togra> nice
[00:33:05] <Togra> whatever works
[00:33:32] <Togra> as long as you keep straight all the different values you might use for "this is what this dict should turn into when you parse it", it shouldn't have any issues
[00:34:16] <NoImNotNineVolt> well, it works for them, but not for me, when i try to serialize dynamodb data to json and preserve some type metadata.
[00:34:29] <NoImNotNineVolt> that's my point. i need to fix my JsonEncoder :P
[00:34:43] <Togra> oh, right
[00:34:59] *** Joins: nomic (~nomic@185.192.69.207)
[00:36:22] *** pizzaiolo is now known as pizza
[00:37:35] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[00:37:49] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:38:43] <NoImNotNineVolt> okay, so i guess i can't return a str, i've gotta return an int or float. i guess my other idea will work, then.
[00:38:56] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[00:42:16] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:42:20] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:692:209f:b5f6:f28f)
[00:42:41] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:42:43] *** Quits: ubert (~Thunderbi@178.115.54.19.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[00:42:47] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[00:44:03] *** Quits: Jefren (~Jefren@70.35.66.187) (Quit: WeeChat 2.8)
[00:44:18] *** Quits: pmn (~pmn@bras-base-mtrlpq4706w-grc-03-174-89-235-156.dsl.bell.ca) (Quit: WeeChat 3.1)
[00:45:13] *** Joins: Jefren (~Jefren@70.35.66.187)
[00:45:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:45:45] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:45:48] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:46:38] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[00:47:43] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[00:47:58] *** Joins: grooverman (~grooverma@177.102.119.40)
[00:48:43] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 252 seconds)
[00:49:19] *** Joins: taoe (~taoe@pool-100-7-98-213.rcmdva.fios.verizon.net)
[00:49:32] *** Quits: Akuli (~Akuli@82-203-162-233.bb.dnainternet.fi) (Quit: Leaving)
[00:50:53] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:54:20] *** Quits: vimart (~vimart@85.255.232.93) (Ping timeout: 252 seconds)
[00:56:58] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[00:58:02] *** Quits: int3l (~int3l@78-83-117-10.spectrumnet.bg) (Quit: WeeChat 3.3)
[00:58:11] *** Quits: taoe (~taoe@pool-100-7-98-213.rcmdva.fios.verizon.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:58:51] *** Joins: taoe (~taoe@pool-100-7-98-213.rcmdva.fios.verizon.net)
[01:05:44] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[01:06:29] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[01:08:57] *** Quits: taoe (~taoe@pool-100-7-98-213.rcmdva.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:09:14] <retlo> i remember when there was soap and xml
[01:09:21] *** retlo is now known as malvin
[01:10:56] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:7198:69bc:11b9:2f9d) (Ping timeout: 245 seconds)
[01:11:18] <grym> NoImNotNineVolt: i assume you've read https://hynek.me/articles/serialization/
[01:14:38] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[01:14:56] *** Quits: upsala1 (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[01:17:06] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[01:19:54] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[01:19:55] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:21:12] <CrtxReavr> KirkMcDonald, haven't done crazy extensive testing yet, but this seems to work well so far: https://bpa.st/O5SQ
[01:22:23] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:22:54] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[01:23:54] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:23:57] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[01:25:08] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 250 seconds)
[01:26:25] *** Quits: Narrat (~omnius@p200300df5f13e73906ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:26:34] *** softwherewolf is now known as softwarewolf
[01:30:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[01:30:38] *** Joins: djapo (~archangel@user/djapo)
[01:30:42] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (Quit: See you later :))
[01:30:56] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[01:31:05] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[01:31:27] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[01:31:39] *** Joins: nawcom (~nawcom@bulldadachat.com)
[01:32:27] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 240 seconds)
[01:32:42] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a9f0:2446:43b8:d07c)
[01:32:46] *** Quits: elena_re (~elena@178.176.79.2) (Ping timeout: 252 seconds)
[01:33:08] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Quit: Leaving)
[01:33:10] <jokoon> Im doing sorted_tags = sorted(list(tag_set)) and I get TypeError: list() takes 0 positional arguments but 1 was given
[01:33:31] <jokoon> type(tag_set) returns "set"
[01:34:01] <KirkMcDonald> jokoon: Did you reassign `list` to something?
[01:34:06] <jokoon> oh
[01:34:20] <jokoon> yup :(
[01:34:53] *** Quits: DXR_ (~lyrical@213.16.170.112.dsl.dyn.forthnet.gr) (Ping timeout: 264 seconds)
[01:34:55] <jokoon> ty
[01:34:58] *** Joins: p-i-_ (~Ohmu@223.206.71.80)
[01:35:13] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:36:03] *** Joins: DXR (~lyrical@46.246.214.198.dsl.dyn.forthnet.gr)
[01:36:34] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:692:209f:b5f6:f28f) (Quit: Konversation terminated!)
[01:37:04] *** Joins: nomic (~nomic@185.192.69.207)
[01:37:19] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:fe04:b022:91be:e39) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:37:29] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[01:37:52] *** Joins: andytoshi (~apoelstra@s66-183-0-205.bc.hsia.telus.net)
[01:38:20] *** Quits: p-i- (~Ohmu@223.206.71.80) (Ping timeout: 252 seconds)
[01:39:44] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:40:10] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[01:41:53] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[01:43:31] <SnoopJ> `lst` is a nice replacement when you want to clobber that name
[01:43:33] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:45:26] *** Quits: oprypin (~irc@pryp.in) (Quit: Bye)
[01:45:36] *** Joins: oprypin (~irc@pryp.in)
[01:45:55] *** Joins: elena_re (~elena@178.176.79.2)
[01:47:13] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[01:48:02] *** Joins: y04nn (~y04nn@193.32.127.238)
[01:49:00] <jokoon> also ls, lis, lit
[01:49:09] <jokoon> _list
[01:49:10] <KirkMcDonald> Or just `L`
[01:49:19] <jokoon> vector
[01:49:31] <KirkMcDonald> Or get actually descriptive. `items`, or whatever.
[01:51:28] *** Quits: DPA (~DPA@2a05:41c0:2:4001:2ff:1ff:fe01:10d) (Ping timeout: 252 seconds)
[01:52:01] <SnoopJ> yea, actually describing the contents is preferable :)
[01:52:05] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[01:52:08] *** Hexmind is now known as Hexmind_
[01:52:24] <jokoon> a_list_of_things_with_stuff_in_it
[01:52:31] *** Hexmind_ is now known as Hexmind__
[01:52:37] *** Hexmind__ is now known as Hexmind
[01:52:45] <SnoopJ> `stuff = ...`
[01:53:11] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[01:54:20] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[01:54:44] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[01:55:38] *** Quits: pycode (~pycode@2001:b07:5d28:551:78b8:b18:ca19:70f3) (Ping timeout: 246 seconds)
[01:55:51] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[01:56:12] *** Quits: elena_re (~elena@178.176.79.2) (Read error: Connection reset by peer)
[01:56:25] *** Joins: alzgh (~alzgh@user/alzgh)
[02:02:24] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[02:02:54] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a9f0:2446:43b8:d07c) (Quit: Leaving)
[02:03:23] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[02:04:55] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[02:04:58] *** Joins: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net)
[02:05:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:06:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:07:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[02:08:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:08:52] *** Joins: GravitaZ (~GravitaZ2@64-203-169-228.unassigned.ntelos.net)
[02:10:35] *** Joins: ttys000 (~ttys000@user/ttys000)
[02:11:12] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[02:13:44] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[02:14:17] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[02:16:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[02:16:17] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:16:32] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[02:17:56] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[02:19:03] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[02:21:26] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[02:26:41] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:27:57] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Read error: Connection reset by peer)
[02:28:31] *** Quits: cul8r (~cul8r@2601:8c3:4280:ae00:6d9:f5ff:fe89:5583) (Quit: Leaving)
[02:32:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:34:13] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:35:01] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[02:35:10] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[02:37:50] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3d27-f9b8-30f5-ae89.res6.spectrum.com) (Read error: Connection reset by peer)
[02:38:52] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[02:39:12] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:39:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[02:40:04] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[02:40:29] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[02:41:37] *** Joins: P1ro (~quassel@user/p1ro)
[02:41:39] *** Quits: tbcr (~brclark@user/tbcr) (Quit: WeeChat 2.8)
[02:42:50] *** Quits: ham5urg (~ham5urg@p200300d167429600da1a9e2f0107e997.dip0.t-ipconnect.de) (Quit: Leaving)
[02:43:02] <aphysically> I've been meaning to try single dispatch but it's a bit weird with comprehensive type annotations
[02:43:30] <aphysically> I think it's really just a mypy --strict problem
[02:43:52] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:44:05] <aphysically> I guess I could just bug up and try it
[02:45:03] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:46:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 264 seconds)
[02:47:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:47:05] <aphysically> after dinner (:
[02:47:27] <jinsun> what's going wrong? mypy complaining?
[02:47:31] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[02:47:50] <jinsun> or just looks ugly
[02:47:57] *** Joins: Wulf (~Wulf@user/wulf)
[02:48:33] *** Joins: MercilessDeth (~brad@136.49.61.2)
[02:49:30] *** Joins: semeion (~semeion@user/semeion)
[02:52:42] <aphysically> I hadn't tried it yet, but I had read online mypy complains about _ named functions or some such and/or doesn't know about the single dispatch typing, but I should just try it myself
[02:53:17] <aphysically> I have at least one or two use cases where I could do single dispatch, or at least where I should be checking the argument of the input
[02:53:41] <aphysically> https://github.com/GBeauregard/pyffstream/blob/bddb53fbcaea9aaa7eb1c6b93e1e9b387e18c4b1/src/pyffstream/ffmpeg.py#L581
[02:53:57] <aphysically> i.e. instead of casting always into a str here just to convert to a float/such again
[02:54:30] <aphysically> I've also thought I should maybe make this only a function on strings and not rely on this function to do pseudo-deserializing
[02:55:51] *** Quits: Karel (~Karel@ptr-9091p564tn5baind631.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[02:55:53] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[02:58:08] *** Quits: emerent (~quassel@p200300cd574855a9ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:58:25] *** Joins: emerent (~quassel@p200300cd5748557eba27ebfffed28a59.dip0.t-ipconnect.de)
[02:58:44] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[03:06:46] *** Leonarbro_ is now known as Leonarbro
[03:09:41] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[03:13:12] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:15:05] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:15:51] *** Joins: joako (~joako@104-12-70-21.lightspeed.miamfl.sbcglobal.net)
[03:16:50] *** Joins: SuperLag (~akulbe@user/superlag)
[03:16:58] <joako> I use pip to install a module and its placed in /usr/lib/python/site-packages but apparently this server is using 64-bit and the stuff is running out of another copy at /usr/lib64/python/site-packages
[03:17:09] <joako> So how can I use 64-bit pip to install a package?
[03:18:28] *** Joins: nbao (~nbao@187.20.181.193)
[03:19:23] *** r0bby is now known as r0bby[m]
[03:19:38] *** r0bby[m] is now known as r0bby
[03:20:30] <nedbat> joako: how did you run pip, and how are you running the python program?
[03:21:34] <joako> nedbat, I ran pip through the commandline, and I am not certain how the python program is running
[03:21:42] <BtbN> That's one of the reasons why you never run pip as root
[03:21:47] <BtbN> it tends to make a broken mess
[03:22:05] <nedbat> joako: find out what python executable is running, and do:  /path/to/python -m pip install .....
[03:22:35] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[03:22:35] <joako> Yes I see the software has its own /env/bin/python
[03:22:38] <SnoopJ> agreed, it sounds like `python` and `pip` don't point to the same place (the `pip` executable does basically the -m invocation, but goes wrong more often)
[03:23:01] <joako> So if I run pip as that user it will know to use /home/user/env/bin/python?
[03:23:22] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[03:23:34] <grym> joako: probably not
[03:23:49] <nedbat> joako: run it with the python
[03:23:52] <nedbat> joako: find out what python executable is running, and do:  /path/to/python -m pip install .....
[03:23:59] <SnoopJ> joako, if you invoke python using nedbat's spelling, it will *always* be the pip for *that* interpreter.
[03:24:50] <SnoopJ> https://snarky.ca/why-you-should-use-python-m-pip/
[03:27:38] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[03:30:01] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[03:30:34] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:30:44] <bookworm> why you should use -m pip or other things people say when they don't understand $PATH and related concepts
[03:31:32] <bookworm> at least pip defaults to --user now days does it?
[03:31:33] <SnoopJ> bookworm, I'm relatively sure Brett Cannon understands those concepts.
[03:32:19] <bookworm> that blog makes it sound like there's no freaking way to know
[03:32:37] <SnoopJ> bookworm, to know what?
[03:32:39] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:b9b1:7286:7d07:ab17) (Ping timeout: 250 seconds)
[03:32:52] <bookworm> what pip aliases too
[03:32:56] <bookworm> to*
[03:33:19] *** Joins: Fiji (~Fiji@user/fiji)
[03:33:31] <joako> nedbat, Yes that works
[03:33:35] <nedbat> bookworm: if you know how, you can find out what it aliases to.  but why bother?
[03:33:42] <nedbat> bookworm: python -m pip    will work
[03:33:49] <bookworm> so does pip
[03:33:52] <joako> but just so strange theres a lib & lib64 site package. I wonder if someone installed a 2nd copy from source?
[03:34:10] <nedbat> bookworm: you understand we're here because "pip" didn't work for joako, but "python -m pip" did?
[03:34:25] <SnoopJ> bookworm, when it says "you don't know," I believe it is referring to the question which it is answering from the previous question. As he points out, that information is not part of the question, so he's quite right: you cannot answer the question without more information.
[03:34:31] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[03:35:29] <SnoopJ> but if you like using `pip`, you are of course free to disagree and use that.
[03:36:10] *** Quits: Rain42 (~Rain@li958-238.members.linode.com) (Quit: Ping timeout (120 seconds))
[03:36:10] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: Ping timeout (120 seconds))
[03:36:19] <bookworm> the mistake they made was doing the usual it didn't work as non root so instead of thinking let me prepend sudo and hit enter most likely
[03:36:22] *** Joins: Geronimo (~Geronimo@user/geronimo)
[03:36:31] *** Joins: Rain42 (~Rain@li958-238.members.linode.com)
[03:36:40] <bookworm> else you wouldn't have been able to mess up /usr/... in the first place
[03:37:01] <nedbat> bookworm: that may be.  in any case, "python -m pip" worked great.
[03:37:21] <SnoopJ> "Don't `sudo pip`" is a separate and equally good piece of advice.
[03:38:20] <bookworm> don't sudo anything unless you really know what you are doing, especially no software package manager that's not your distro package manager
[03:38:47] <bookworm> that includes conda, pip and whatever else
[03:38:50] <nedbat> bookworm: yup, another good piece of advice
[03:39:22] * SnoopJ finds that people start using sudo in desparation more when they have multiple piece of information to keep track of just to know what they have invoked
[03:39:58] <bookworm> which ends up in a borken Frankenstein 100% of the time
[03:40:34] <tar_xvf> bookworm: fortunately homebrew straight up quits if it discovers you are using sudo
[03:41:21] <bookworm> osx has sodo? they are a bsd derivative, doas would be more appropriate no?
[03:41:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:41:49] <tar_xvf> lol, yea
[03:41:49] <tar_xvf> hh
[03:41:51] *** Joins: ShinyCyril (~ShinyCyri@2601:249:8600:240:6572:448:2ef5:47e2)
[03:41:51] <bookworm> who uses brew on Linux, we have better tools
[03:41:58] <joako> How did I mess up /usr/... all pip did was place an un-needed package there
[03:42:07] <tar_xvf> yes, im an impostor i actually use macos
[03:42:19] *** Quits: luva (~luva@5.180.62.231) (Ping timeout: 265 seconds)
[03:42:26] <SnoopJ> joako, you'd be surprised how little it takes to damage a system site
[03:42:46] <SnoopJ> In particular, pip's _uninstall_ command can make a real mess if run as root.
[03:42:57] *** Joins: luva (~luva@5.180.62.228)
[03:43:20] *** Joins: greknod2 (~grek@120.88.171.98)
[03:43:34] *** Quits: ShinyCyril (~ShinyCyri@2601:249:8600:240:6572:448:2ef5:47e2) (Client Quit)
[03:43:48] <SnoopJ> once that site isn't what the distribution has used as a design target, all bets are off
[03:44:05] *** Joins: ShinyCyril (~ShinyCyri@2601:249:8600:240:6572:448:2ef5:47e2)
[03:44:09] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:f832:81cc:b381:813e)
[03:44:09] <SnoopJ> (if it's managed by the operating system, that is)
[03:44:45] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:f832:81cc:b381:813e) (Remote host closed the connection)
[03:44:48] *** Quits: ShinyCyril (~ShinyCyri@2601:249:8600:240:6572:448:2ef5:47e2) (Client Quit)
[03:46:09] <bookworm> /usr/lib is managed by the OS by definition... if you manually mess with it it belongs to /usr/local/lib
[03:46:15] <SnoopJ> Hopefully PEP 668 reduces this particular end-user pain, once it's finished
[03:46:35] <SnoopJ> bookworm, on a compliant system, sure.
[03:47:59] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 246 seconds)
[03:48:17] <SnoopJ> having a way to just tell pip not to touch a site should be great
[03:48:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:49:14] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:49:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:49:35] <bookworm> indeed, sane defaults from the beginning would have been nice too, especially when it knew that ut was running as a normal user
[03:49:53] <SnoopJ> you'll have to try a different timeline for that
[03:50:29] *** Quits: flokuehn_ (~flokuehn@mue-88-130-54-078.dsl.tropolys.de) (Ping timeout: 264 seconds)
[03:50:57] *** Joins: pdjprogrammer (~pdjprogra@24.14.26.52)
[03:52:03] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-184.citykom.de)
[03:52:04] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:52:15] *** Joins: luva4 (~luva@5.180.62.230)
[03:52:22] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[03:52:30] *** Quits: luva (~luva@5.180.62.228) (Ping timeout: 268 seconds)
[03:52:30] *** luva4 is now known as luva
[03:53:44] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 268 seconds)
[03:54:13] <bookworm> https://github.com/pypa/pip/pull/7002 for the curious
[03:54:21] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[03:56:09] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[03:58:24] *** Joins: tracey (~trace@dynamic-002-247-249-251.2.247.pool.telefonica.de)
[03:59:26] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[03:59:35] *** Joins: CodePoint (~CodePoint@89.38.227.236)
[03:59:50] *** Joins: khrbt (~znc@user/khrbt)
[03:59:54] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 268 seconds)
[04:00:11] *** Joins: luva (~luva@5.180.62.230)
[04:00:54] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[04:01:11] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[04:01:27] *** Joins: P1ro (~quassel@user/p1ro)
[04:03:18] *** Quits: tracey (~trace@dynamic-002-247-249-251.2.247.pool.telefonica.de) (Ping timeout: 250 seconds)
[04:03:41] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[04:03:52] *** Joins: P1ro (~quassel@user/p1ro)
[04:04:04] <ouemt> Am I missing something simple here? https://bpa.st/AB5Q It seems like the for loops is only running after the first return from the c.f.PPE above it?
[04:07:57] <ouemt> should the for loop be one level of indentation higher? i.e. not in the context manager?
[04:08:16] *** Joins: P1ro_ (~quassel@user/p1ro)
[04:08:52] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[04:09:22] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 250 seconds)
[04:10:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 246 seconds)
[04:11:13] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 250 seconds)
[04:11:14] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[04:11:16] *** Joins: CodePoint_ (~CodePoint@94.198.42.140)
[04:12:00] <energizer> ouemt: yes
[04:12:16] <energizer> sorry i didnt notice that before
[04:12:34] <ouemt> energizer: it still seems like it's not working
[04:12:44] <ouemt> now it's not running that "other" code at all
[04:13:21] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[04:13:24] <ouemt> like, I get the "worker done, returning" log message from "process_file()", but no output form the for loop, unless it's going to wait until all the tasks are complete?
[04:13:42] *** Quits: CodePoint (~CodePoint@89.38.227.236) (Ping timeout: 250 seconds)
[04:13:58] <jinsun> if you move the for loop out it will wat for all tasks to complete then start the loop
[04:14:10] <jinsun> s/wat/wait
[04:14:14] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[04:14:32] <ouemt> jinsun: makes sense, but why isn't it running when it's under the context manager?
[04:14:50] <jinsun> I didn't understand what the problem in the original code was
[04:14:50] <ouemt> when I've used this pattern before, it starts evaluating the for loop as soon as there are results form the workers?
[04:14:52] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:387b:9fcf:63d:76d6) (Ping timeout: 256 seconds)
[04:15:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[04:15:11] <ouemt> jinsun: the for loop runs once, then doesn't keep going even though I can see the workers returning stuff
[04:15:12] <energizer> maybe PPE is ok with that
[04:15:28] <energizer> normally i think of that pattern as nursery-like
[04:15:38] *** Joins: CodePoint__ (~CodePoint@96.44.191.140)
[04:15:38] *** Quits: CodePoint__ (~CodePoint@96.44.191.140) (Client Quit)
[04:15:38] <energizer> in which case you have to exit the cm before it does anything
[04:15:46] <energizer> but maybe PPE doesnt work that way
[04:15:52] *** Joins: CodePoint (~CodePoint@96.44.191.140)
[04:16:05] * energizer checks
[04:17:28] <jinsun> ua dunno about ProcessPoolExecutor, maybe it behaves weird, I
[04:18:13] <jinsun> *I have used only ThreadPoolExcutor where the as_completed loop runs as expected
[04:18:54] *** Quits: CodePoint_ (~CodePoint@94.198.42.140) (Ping timeout: 250 seconds)
[04:19:22] <ouemt> they're supposed to be drop-in alternatives, so it should behave the same, and this pattern has worked for me before, so I'm really confused here
[04:19:23] <energizer> ok no it should work https://bpa.st/AJVQ
[04:20:10] <jinsun> ouemt: how do you know that tasks are complete but as_completed is not returning them?
[04:20:39] <ouemt> jinsun: so the last line before the return statement in the "process_file()" function is a print statement, I see those
[04:20:47] <ouemt> the first line in the for loop is a print statement, and I never see that
[04:21:07] <ouemt> these print statements were added because it wasn't behaving like it should and I was trying to figure out why
[04:22:37] <jinsun> check the future objects themseveles
[04:22:41] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[04:22:57] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[04:22:58] <jinsun> whether future.done() is True or False
[04:23:30] <ouemt> jinsun: the print statement in the for loop is "print(type(future.result()))"
[04:24:01] <ouemt> because the other possibility was that I was getting "None" instead of the expected value, but like I said, it only evaluates once
[04:24:45] <energizer> ouemt: https://bpa.st/6UBQ works fine
[04:24:51] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:25:23] <ouemt> yeah, like I said, this pattern works other places, but I just can't figure out why it's not working here
[04:25:34] <jinsun> ouemt: okay but it will reach that part only if future.done() is True, because of as_completed, check the done() thing without as_completed, maybe with a simpel loop + sleep
[04:25:48] <ouemt> jinsun: where should I insert that check?
[04:26:31] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[04:26:58] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:27:13] <jinsun> before just replace the as_completed looop with some infinie loop, and inisde that check the done() for all futures in a listcomp (or set comprehension), and see if you get any True after you see those prints
[04:27:35] <jinsun> s/infinie/infinite
[04:27:56] <jinsun> aah I can't type, too many typos
[04:28:09] *** Joins: oxniu (~oxniu@240e:30d:102:5268:12a:691d:8704:39b9)
[04:28:22] <jinsun> but you know what I mean hopefully
[04:28:36] <ouemt> so while True: (future.done() for future in futures)?
[04:29:01] <jinsun> sleep in between
[04:29:09] <jinsun> and print it
[04:29:16] <jinsun> and make it a list or a set not generator
[04:29:17] <energizer> make it a listcomp not a gencomp
[04:30:23] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:02] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Quit: Leaving...)
[04:32:14] <ouemt> ok, it's running, it'll be a minute
[04:32:27] *** Quits: oxniu (~oxniu@240e:30d:102:5268:12a:691d:8704:39b9) (Ping timeout: 250 seconds)
[04:32:27] <jinsun> expect to see no True otherwise would be a bug in as_completed probably
[04:32:31] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:32:46] *** Quits: gitly (~gitly@185.69.144.8) (Ping timeout: 250 seconds)
[04:33:15] <ouemt> I got 2 trues after the first 2 files completed
[04:33:24] <ouemt> waiting to see if it does it again
[04:33:45] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 250 seconds)
[04:34:00] <ouemt> yep, up to 4
[04:34:15] <ouemt> so.... now I wonder if it's getting hung on the first pass of the for loop?
[04:34:20] <ouemt> somehow?
[04:34:40] *** Joins: vlm (~vlm@user/vlm)
[04:34:42] <ouemt> that would prevent other executions of the code if the first for loop never finished, right?
[04:34:48] <energizer> ouemt: did you try *only* printing in the loop?
[04:34:52] *** Joins: gitly (~gitly@85.255.235.96)
[04:34:54] <ouemt> energizer: nope
[04:34:58] <energizer> do that
[04:35:01] <ouemt> thinking that's next
[04:35:41] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[04:35:45] <jinsun> okay your "other" code was more than print? then  should have fixed that first yeah
[04:36:14] *** Quits: P1ro_ (~quassel@user/p1ro) (Read error: Connection reset by peer)
[04:36:19] *** Joins: vimart (~vimart@85.255.232.94)
[04:36:56] <ouemt> ok, it's running
[04:37:11] *** Joins: P1ro (~quassel@user/p1ro)
[04:37:12] *** Joins: tg (~tg@rockylinux/infra/tg)
[04:37:57] <ouemt> yep, it's running now
[04:38:00] <ouemt> fml
[04:38:11] <ouemt> what in the world could be blocking this?!
[04:41:55] *** Joins: montybanksnyc (~montybank@pool-108-5-238-57.nwrknj.fios.verizon.net)
[04:42:36] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[04:42:52] *** Joins: P1ro (~quassel@user/p1ro)
[04:43:08] *** Joins: Barones (~Barones@201.22.191.165.dynamic.adsl.gvt.net.br)
[04:43:35] <ouemt> no clue, gonna go eat dinner and come back to it
[04:43:39] <ouemt> something strange is happening
[04:43:51] <ouemt> thanks for the help energizer and jinsun
[04:44:06] <SnoopJ> ouemt, is there a way you can carve it down to something we can see all of?
[04:44:42] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[04:45:46] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 250 seconds)
[04:46:29] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[04:46:39] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:47:05] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[04:47:37] *** Quits: CodePoint (~CodePoint@96.44.191.140) (Quit: CodePoint)
[04:47:50] *** Joins: dulanic (~dulanic@47.187.144.163)
[04:48:41] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[04:49:42] *** Joins: elias117 (~elias117@user/elias117)
[04:50:03] *** Quits: dulanic (~dulanic@47.187.144.163) (Client Quit)
[04:50:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:50:34] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[04:50:55] *** Joins: dulanic (~dulanic@47.187.144.163)
[04:51:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[04:52:02] *** Joins: califax- (~califax@user/califx)
[04:54:33] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[04:54:46] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:55:24] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:55:25] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[04:55:25] *** brabrax_ is now known as brabrax
[04:55:25] *** califax- is now known as califax
[04:55:33] *** Joins: P1ro (~quassel@user/p1ro)
[04:56:05] *** Quits: Abrax- (~Abrax@user/abrax) (Quit: Leaving)
[04:56:44] *** Joins: P1ro_ (~quassel@user/p1ro)
[04:58:06] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[05:00:37] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[05:02:03] *** Joins: emf_ (~emf@2601:600:104:ef88:1466:bc65:7f72:4c40)
[05:03:30] *** Quits: emf (~emf@2620:10d:c090:400::5:5b52) (Ping timeout: 260 seconds)
[05:04:25] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[05:04:28] <altendky> if a distribution package installs just a single `.so` directly into `site-packages/` rather than as `site-packages/mypackage/mypackage.etc.so`...  is it appropriate to say it installs as a module, not a package?  or can the `.so` provide a package too?
[05:06:42] *** Quits: emf_ (~emf@2601:600:104:ef88:1466:bc65:7f72:4c40) (Client Quit)
[05:09:55] <energizer> altendky: what does "installs as" mean?
[05:10:35] <altendky> energizer: when i have installed it and i look in `site-packages/` i see `mypackage.etc.so` not `mypackage/`
[05:11:44] <energizer> altendky: i mean i've never heard "installs as" before so i don't know how to use it in a sentence
[05:12:10] *** Joins: eyepeetee (~aa@user/eyepeetee)
[05:12:32] <energizer> altendky: are you trying to invent a term "distribution module"?
[05:12:37] <altendky> energizer: scratch that wording.  can a straight `.so` in `site-packages/` provide a python package?  or only a python module?
[05:12:59] <altendky> when you import it, can you have a package object with modules inside, or just a single module object
[05:13:19] <altendky> (where yes, package vs. module isn't the strongest differentiator there)
[05:13:39] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Quit: Leaving)
[05:13:56] <eyepeetee> i don't have any question, i just wanted to share some code i made earlier that i felt some folks here may appreciate: https://pastebin.com/bLZCiZCw
[05:13:57] <altendky> but it's also not all that big a deal.  just maybe a chance for me to learn something mostly.  either way if we want stubs for it we need `mypackage-stubs` for the .pyi to live in afaik
[05:13:58] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[05:14:18] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[05:14:20] <eyepeetee> oh, wrong channel maybe
[05:14:39] <altendky> it's python, so it's on topic :]
[05:14:53] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[05:14:53] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:ad36:6318:ed12:a8eb)
[05:15:08] <eyepeetee> got mixed up, i saw the #python-unregistered in the modes in the title bar :)
[05:15:20] <altendky> nope, you're here
[05:15:22] <xheimlich> this is a question about rust/python interop. I'm using pyo3 (on Rust) and maturin (on Python).
[05:15:31] <energizer> altendky: i dont remember where "distribution package" is documented
[05:15:33] <altendky> i did some vaguely related code for translating name forms a few years ago.  it was a pain...
[05:15:44] <xheimlich> I think it's more kosher here because it has to do with dynamic typing.
[05:16:15] <xheimlich> specifically what happens in python when you feed an numpy.ndarray to a function that "expects" a list?
[05:16:29] <altendky> energizer: i'm thinking of more whether it can provide a package object at runtime.  i would think "a distribution package" would still apply even if the `.whl` etc provide only a module.
[05:16:41] <energizer> oh
[05:17:03] <energizer> i dont see why not
[05:17:09] <altendky> it doesn't have a `mypackage/` package directory or an `__init__.py` but...
[05:17:23] <energizer> sure but python is dynamic!
[05:17:36] <energizer> package: A Python module which can contain submodules or recursively, subpackages. Technically, a package is a Python module with an __path__ attribute. https://docs.python.org/3/glossary.html
[05:17:39] <altendky> right, that's why i questioned myself when i started writing 'it is just a module'
[05:17:40] *** Quits: P1ro_ (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[05:18:30] <energizer> man, that mustve been written before "dunder" was invented
[05:18:34] <altendky> anyways, all the more reason here that you should just have "some python code" at the outside.  even if it is a `__init__.py` with nothing more than an EOL in it...  because then you can put hints in it
[05:18:44] <grym> xheimlich: an attempt is made to treat it like a list.  (which ndarrays will let you do)
[05:19:27] <xheimlich> I know numpy.ndarrays have a .tolist() method.
[05:20:04] <energizer> i'm going with 'yes, just define __path__ in a file'
[05:20:19] <energizer> (and you've got a module goin')
[05:20:26] <energizer> er (and you've got a package goin')
[05:20:43] <xheimlich> but I have no simple way to pass numpy.ndarrays to rust ndarrays. So the plan is to pass lists somehow and convert to rust ndarrays on the other side. I wish my library users could avoid saying .tolist() to everything though.
[05:20:57] <grym> xheimlich: what is a rust ndarray?
[05:21:09] <grym> numpy has a well-defined notion of what one is
[05:21:19] <grym> SnoopJ has An Image that is quite handy
[05:21:26] <xheimlich> it's something that exists in rust and has logical similarities to numpy.ndarray. Doesn't matter much for this discussion.
[05:21:31] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[05:21:54] <grym> well, if you can pass a ndarray, it does...
[05:22:06] *** Quits: ArtisticMask (~masque@user/fluffymask) (Quit: WeeChat 3.2.1)
[05:22:07] <xheimlich> I more or less prototype code in numpy and rewrite in Rust. But it's increasingly clear that it's much more productive to have python as glue lang.
[05:22:47] *** Joins: fikran (~fikran@user/fikran)
[05:22:58] <xheimlich> grym: I don't think the rust ndarray structure "knows" about numpy. which is implementation-dependent too, right?
[05:23:22] <energizer> xheimlich: i'm curious what kind of application this is
[05:23:34] <xheimlich> it's a library. distance correlation.
[05:24:27] <xheimlich> I wrote a proof of concept that calculated an estimator of the mode of continuous variables. a simple recursive algo. that doesn't fit neatly in numpy idioms. works great. of course, I'm passing lists.
[05:24:49] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[05:25:29] <xheimlich> now I want to do something that's actually useful. distance correlation also fits poorly with the numpy idiom, and a direct python implementation is not fast... (on the reference interpreter, but eh.)
[05:27:28] <energizer> mhmm
[05:29:45] <energizer> xheimlich: fwiw if you dont like bouncing between two languages, julia is designed for that
[05:30:32] *** Joins: edr (~edr@user/edr)
[05:30:51] *** Joins: Abrax (~Abrax@user/abrax)
[05:32:22] *** Joins: sahilsinha (~sahil@c-98-35-17-178.hsd1.ca.comcast.net)
[05:32:44] *** Quits: Abrax (~Abrax@user/abrax) (Client Quit)
[05:32:48] <sahilsinha> is there a way I can import python modules from a specific git revision from a local repository?
[05:32:56] *** Joins: Abrax (~Abrax@user/abrax)
[05:33:29] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[05:33:41] *** Quits: Abrax (~Abrax@user/abrax) (Remote host closed the connection)
[05:33:48] <grym> sahilsinha: https://git-scm.com/docs/git-worktree is probably your friend here
[05:33:52] *** Joins: Abrax (~Abrax@user/abrax)
[05:34:23] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 246 seconds)
[05:34:24] <sahilsinha> grym: very cool thanks, i was thinking of archiving and putting in an in memory fs?
[05:34:32] <sahilsinha> and then importing from that
[05:34:36] <grym> i don't think pip install file:///some/git/repo@hash works
[05:34:39] <grym> but, it might!1
[05:34:49] <sahilsinha> it's an internal submodule
[05:34:59] <grym> yich
[05:35:02] <sahilsinha> i want to basically version big long running functions
[05:35:14] <sahilsinha> and all their associated importsz
[05:35:32] <sahilsinha> so i figured ok just use the revision and execute the given revision for a user
[05:36:49] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[05:37:14] *** Joins: nomic (~nomic@185.192.69.207)
[05:37:31] <sahilsinha> right now i just store the folder as a string and it keeps running from that folder till the function finishes
[05:37:43] <sahilsinha> so v1, v2, v3
[05:37:51] <sahilsinha> all dependencies inside each version
[05:38:23] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[05:39:50] <grym> depending on how you do this, you could conceivably have a bare git repo somewhere and make each user their own little venv out of a specific commit
[05:39:56] <grym> and delete it on completion
[05:39:59] <grym> or what have you
[05:40:11] <sahilsinha> grym: that sounds great if i can get it to be near instant
[05:40:19] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[05:40:25] <grym> you could cache them...
[05:40:38] *** Joins: aknot (~bl@2603:900a:1503:17bb:8420:7c21:2576:eed7)
[05:40:51] <grym> it'll be slow the first time but .. this is more or less an aws-style lambda, at this point
[05:40:54] <grym> just homebrew
[05:41:06] <sahilsinha> haha yes so I was also thinking use something like openfaas
[05:41:13] <sahilsinha> or kubeless or something
[05:41:29] <sahilsinha> right now the functions run through celery which is similarish I guess
[05:41:54] <sahilsinha> thank for you for helping me feel a little less crazy
[05:42:59] *** Joins: gsh (~gsh@2601:281:d17f:1740:3e43:8708:59ab:2581)
[05:43:15] *** Joins: SteveR (~SteveR@192.146.154.3)
[05:43:49] <grym> cheers :D
[05:44:10] *** Joins: wyclif (~wyclif@user/wyclif)
[05:46:40] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[05:52:03] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:52:57] *** Joins: matsaman (~matsaman@user/matsaman)
[05:53:26] *** Joins: Samian (~Sami@user/samian)
[05:53:39] *** Joins: xiongxin (~quassel@119.123.101.90)
[05:54:49] <SnoopJ> xheimlich, grym, the image in question: https://jamesgerity.com/remembery/img/numpy_ndarray.png
[05:57:39] *** Quits: NeoCore (~neocore@37.120.204.180) (Quit: Leaving)
[05:58:25] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[05:58:29] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[06:00:26] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:02:44] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[06:03:11] *** Joins: grooverman (~grooverma@177.95.12.14)
[06:04:02] *** Quits: SteveR (~SteveR@192.146.154.3) (Quit: Client closed)
[06:09:23] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Quit: ZNC - https://znc.in)
[06:09:58] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[06:10:35] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 252 seconds)
[06:11:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:12:12] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:14:15] *** Joins: matsaman (~matsaman@user/matsaman)
[06:17:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:18:14] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[06:18:51] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[06:18:52] *** Quits: devios (~devios@75-166-173-50.hlrn.qwest.net) (Ping timeout: 252 seconds)
[06:19:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:20:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:20:58] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:22:55] *** Joins: Samian (~Sami@user/samian)
[06:24:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[06:25:27] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:26:28] *** Quits: junktext (~junktext@109.201.152.178) (Ping timeout: 252 seconds)
[06:27:34] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Remote host closed the connection)
[06:30:19] *** Quits: aknot (~bl@2603:900a:1503:17bb:8420:7c21:2576:eed7) (Ping timeout: 250 seconds)
[06:30:41] *** Quits: LiftLeft (~LiftLeft@154.21.114.169) (Ping timeout: 264 seconds)
[06:31:53] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:32:30] *** Quits: Samian (~Sami@user/samian) (Remote host closed the connection)
[06:33:23] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[06:33:46] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:34:58] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 260 seconds)
[06:37:18] *** Quits: newpy (~newpy@2601:280:4381:1390:305a:ce35:a10a:f73b) (Quit: Leaving)
[06:37:32] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:38:43] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[06:39:34] *** Joins: klu_ (~klu@user/klu)
[06:43:38] *** Quits: vimart (~vimart@85.255.232.94) (Ping timeout: 250 seconds)
[06:44:06] *** Quits: softwarewolf (~software@user/softwarewolf) (Quit: Quit)
[06:45:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:45:47] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[06:46:12] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Quit: Leaving)
[06:46:48] *** Quits: montybanksnyc (~montybank@pool-108-5-238-57.nwrknj.fios.verizon.net) (Quit: Leaving)
[06:47:49] *** Joins: lethu (~lethu@user/lethu)
[06:47:53] *** Joins: SallyAhaj_ (SallyAhaj@user/sallyahaj)
[06:48:34] *** Joins: RedAero (~RedAero@20014C4E20578C002990996F18680467.dsl.pool.telekom.hu)
[06:49:01] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[06:50:08] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:51:55] <RedAero> How do I create a class of objects where the object must be created with a tuple of tuples argument?
[06:52:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:53:00] <RedAero> i.e. when you crate the object called foo(), you should have to supply a tuple of 2-tuples as an argument
[06:53:02] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 2.9)
[06:53:20] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[06:53:37] <RedAero> e.g. foo(((0,0),(0,1),(0,2)))
[06:53:42] <KirkMcDonald> RedAero: You'd define an __init__ method.
[06:54:18] <RedAero> I got that far, but how do I mandate this format specifically?
[06:54:21] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[06:54:59] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[06:56:03] <KirkMcDonald> RedAero: Mostly you don't. You just take the object and treat it like it's the thing you want. Something will raise an exception eventually if it isn't, after all.
[06:56:12] *** Quits: gsh (~gsh@2601:281:d17f:1740:3e43:8708:59ab:2581) (Ping timeout: 250 seconds)
[06:56:25] <KirkMcDonald> RedAero: *Or* you use function annotations and some sort of type-checking tool to graft static type checking onto the language.
[06:56:30] <RedAero> would assert in an init be poor form?
[06:56:37] <KirkMcDonald> RedAero: Not necessarily.
[06:58:07] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[06:58:40] *** Quits: xiongxin (~quassel@119.123.101.90) (Read error: Connection reset by peer)
[06:58:40] *** Quits: DerpGusta_ (~quassel@user/derpgusta) (Ping timeout: 260 seconds)
[06:59:55] *** Joins: xiongxin (~quassel@119.123.101.90)
[07:04:51] <meejah> RedAero: you should probably "raise ValueError(..)" if there's a wrong arg to __init__ though
[07:05:52] *** Joins: y1n (~y1n@178.115.40.239.wireless.dyn.drei.com)
[07:10:41] *** Joins: iflema (~ian@user/iflema)
[07:11:07] *** Joins: lint_coder (~lint_code@2405:201:f00c:805f:488c:a958:c13c:756e)
[07:14:57] *** Joins: DerpGusta (~quassel@user/derpgusta)
[07:15:19] *** Joins: dstein64- (~dstein64@dannyadam.com)
[07:15:37] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:16:35] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 246 seconds)
[07:16:56] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 246 seconds)
[07:16:56] *** dstein64- is now known as dstein64
[07:17:34] *** Quits: joako (~joako@104-12-70-21.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 252 seconds)
[07:18:05] *** Quits: baltazar (~baltazar@84-236-99-193.pool.digikabel.hu) (Ping timeout: 264 seconds)
[07:19:45] *** Joins: baltazar (~baltazar@92-249-212-113.pool.digikabel.hu)
[07:20:07] *** Quits: lint_coder (~lint_code@2405:201:f00c:805f:488c:a958:c13c:756e) (Quit: Leaving)
[07:20:35] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:4ae7:ffe7:25e2:7e87)
[07:20:35] *** Quits: nbao (~nbao@187.20.181.193) (Quit: leaving)
[07:21:54] *** Joins: fluter (~fluter@user/fluter)
[07:22:06] *** Quits: fluter (~fluter@user/fluter) (Client Quit)
[07:22:19] *** Parts: etbcf (~etbcf@2001:8a0:7b3a:dd01:4ae7:ffe7:25e2:7e87) ()
[07:22:32] *** Joins: fluter (~fluter@user/fluter)
[07:23:44] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[07:26:19] *** Joins: saroy (~Sandipan@45.249.73.179)
[07:26:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:29:58] <Togra> wouldn't you use __init__(self, tuplehere) ?
[07:30:07] <Togra> just the one arg, which you then treat as a tuple of tuples after that?
[07:30:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:30:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[07:32:07] *** Joins: fikran (~fikran@user/fikran)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:34] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:c587:e33d:2b0a:a0be)
[07:37:51] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:38:22] *** Quits: helloplsdohelp (~helloplsh@203-129-25-247.cb8119.syd.static.aussiebb.net) (Read error: Connection reset by peer)
[07:39:50] *** Quits: y1n (~y1n@178.115.40.239.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[07:40:07] *** Quits: sahilsinha (~sahil@c-98-35-17-178.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:41:24] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[07:42:22] *** Quits: p-i-_ (~Ohmu@223.206.71.80) (Read error: Connection reset by peer)
[07:42:34] *** Joins: Atque (~Atque@user/atque)
[07:42:50] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:42:56] *** Joins: p-i- (~Ohmu@223.206.71.80)
[07:43:31] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Client Quit)
[07:43:44] *** Joins: lazerlapin (~lazerlapi@ad001129.dynamic.ppp.asahi-net.or.jp)
[07:43:50] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:45:04] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 252 seconds)
[07:45:30] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[07:51:48] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[07:53:12] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[07:53:30] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[07:53:38] *** Quits: RedAero (~RedAero@20014C4E20578C002990996F18680467.dsl.pool.telekom.hu) (Quit: Ping timeout (120 seconds))
[07:53:57] *** Joins: RedAero (~RedAero@20014C4E20578C002990996F18680467.dsl.pool.telekom.hu)
[07:54:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:55:15] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:56:40] *** Joins: mmercer (daemoen@2605:d100:0:2d:5054:ff:fef0:3953)
[08:01:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:02:32] *** Joins: wyclif (~wyclif@user/wyclif)
[08:02:39] *** Joins: jazzy2 (~jaziz@2600:380:863e:b8c:48da:61c2:f573:151a)
[08:04:46] *** Quits: jazzy (~jaziz@2600:380:4557:1bb1:b9a8:9b17:cf07:e9b5) (Ping timeout: 265 seconds)
[08:06:08] *** Joins: dvx (~dvx@185.63.97.64)
[08:10:12] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[08:11:38] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[08:12:21] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[08:12:40] <oldguy>            ~~
[08:14:36] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[08:15:15] *** octav1a is now known as Jackal-o-lantern
[08:15:18] *** Joins: emf (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05)
[08:16:25] *** Quits: emf (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05) (Client Quit)
[08:18:54] *** Joins: rsrx (~rsrx@103.225.150.81)
[08:19:55] *** Joins: fdan (~fdan@192.146.154.3)
[08:20:05] <fdan> hi there
[08:20:06] <fdan> https://dpaste.org/9Q5u
[08:20:08] <fdan> any idea why this is wrong
[08:21:30] <InPhase> fdan: Computer does not have an attribute 'design', as it says.
[08:21:32] <fdan> is it because i am combining both the instance and the class methods
[08:21:44] <InPhase> fdan: That design was assigned to the object, not to Computer.
[08:23:11] <fdan> InPhase how to make it work
[08:23:45] *** Joins: AnySomebody (~AnySomebo@pd9eeb15c.dip0.t-ipconnect.de)
[08:24:17] *** Quits: Confusioned (~AnySomebo@p200300c2873b59103433ff7c3ab051d2.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:24:57] *** Joins: pycurious (~Adium@user/pycurious)
[08:25:21] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[08:25:25] <energizer> where does code like this come from?
[08:25:40] <pycurious> When I run a python webserver using tornado, the rest api appears to start working after 15 seconds of my firing the torando server. Any ideas on how to profile this and figure out what is going wrong/or taking so much time?
[08:25:56] <InPhase> fdan: Also, if it helps your reasoning process along, the two things your print function received were "Computer" that got assigned to "self", and the string 'test' that got assigned to cls.  This was probably not what you wanted to do.
[08:27:03] <Jackal-o-lantern> pycurious: https://github.com/pyutils/line_profiler
[08:27:07] <RedAero> Is it a better idea to create independent functions that do things to objects, or should I put that in the object itself as a method?
[08:27:33] *** Joins: djapo (~archangel@user/djapo)
[08:27:36] <RedAero> by "do things to objects" I mean create derived information that'll be added to them as a property
[08:27:48] <InPhase> fdan: To fix it, delete "@classmethod" which is doing you no favors, make it say def print(self, s):  and make your print function print(self.design, self.brand)
[08:28:23] <RedAero> so, for example if the object would be a list of ints, I might want a function that computes the list's average and stores it under list.avg as a property - should such a function be a method, or an independent function?
[08:28:59] <InPhase> RedAero: It depends on the identity you give to a particular class.
[08:29:15] *** Quits: pdjprogrammer (~pdjprogra@24.14.26.52) (Quit: Leaving)
[08:29:20] <energizer> RedAero: you are describing something unusual
[08:29:28] <energizer> so the standard answers wont apply
[08:30:14] <InPhase> RedAero: In general if I have a special class that accumulates data for which I will be wanting an average, I put that averaging behavior within the class as a function, so behavior is associated with data.
[08:30:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:31:09] <InPhase> RedAero: But it is possible to have a different design, for example if I have a special class that accumulates some data, but as a side-note somewhere I also happen to want an average of the data in that class, then this is not a core feature of the class, so I do it on the side.
[08:31:26] <RedAero> Thanks, that helps
[08:31:35] *** Joins: emf (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05)
[08:31:39] <RedAero> in this case I think I'll put it as a method
[08:32:18] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[08:32:39] *** jazzy2 is now known as jazzy
[08:33:56] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-5422-0cb4-aeaf-4572.res6.spectrum.com) (Ping timeout: 246 seconds)
[08:34:39] <RedAero> related question: all the properties of an object that can be determined on initialization should/have to go in the __init__, right?
[08:34:55] <KirkMcDonald> RedAero: Generally, yes.
[08:35:18] <energizer> RedAero: i suggest generally using https://docs.python.org/3/library/dataclasses.html
[08:35:36] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[08:36:21] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-bcfd-e74c-43c9-4dcf.res6.spectrum.com)
[08:36:24] <InPhase> RedAero: Rule of thumb, yes.  But sometimes you need to inject some initialization later with a separate call if there's an intertwined setup order.
[08:36:46] *** Joins: SallyAhaj__ (~SallyAhaj@user/sallyahaj)
[08:36:46] *** SallyAhaj__ is now known as SallyAhaj
[08:37:21] <InPhase> RedAero: It's a code quality hazard though to have a partially initialized object hanging around for a while, so try to keep that contained to a brief few lines if you can.
[08:38:27] *** Quits: SallyAhaj_ (SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[08:39:31] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[08:40:36] <RedAero> thanks again
[08:40:56] <RedAero> energizer: decorators are at this point *way* above my head so I'll leave that for later :D
[08:41:57] <jinsun> it is just a line that you put above the class definition
[08:42:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:42:55] <jinsun> you don't have to know what decorator is to use it, just see the dataclass documentation to see what @dataclass specifically does
[08:44:02] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[08:44:34] *** Joins: gggp (~textual@60.10.194.45)
[08:44:47] <rsrx> I have concurrent test runners (pytest-xdist) and I want to do some cleanup once parallel tests finish
[08:44:52] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[08:44:59] <rsrx> i need to do this in the last test that is being executed, not knowing which one it is
[08:45:08] <rsrx> how can I do this? is there some kind of lock on a system level with counter
[08:45:24] *** Joins: stranac (~stranac@195.29.239.126)
[08:45:45] <jinsun> RedAero: I mean you have to kinda know what decorator is, but you don't need to know how to implement it yourself to just use it
[08:46:00] *** Joins: emf_ (~emf@2601:600:108:7a24:462:20d8:dada:19d8)
[08:46:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:46:56] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[08:47:00] *** Quits: emf_ (~emf@2601:600:108:7a24:462:20d8:dada:19d8) (Client Quit)
[08:47:14] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 246 seconds)
[08:48:22] *** Quits: emf (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05) (Ping timeout: 252 seconds)
[08:50:29] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:50:37] *** Joins: gggp (~textual@60.10.194.45)
[08:50:37] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[08:50:47] *** Joins: pycurious (~Adium@user/pycurious)
[08:55:28] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[08:55:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[08:56:13] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[08:56:53] *** Joins: pycurious (~Adium@user/pycurious)
[09:00:13] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[09:00:18] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca) (WeeChat 3.2)
[09:01:27] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[09:04:08] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:ad36:6318:ed12:a8eb) (Quit: Leaving)
[09:05:16] *** Joins: gggp (~textual@60.10.23.162)
[09:05:26] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[09:06:40] *** Joins: kib (~kib@user/kib)
[09:06:52] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[09:07:09] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[09:12:58] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:3b86:b596:c2f2:bce3)
[09:13:11] <RedAero> t = [0] * 5; t.append(t) - why does this not result in a t with length 2 but instead a t with length 6?
[09:13:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:14:28] <jinsun> [0] * 5 gives a list of 5 zeros, then you add the whole list as the 6th item
[09:15:20] <jinsun> did you expect [0] *  5, to give [0]?
[09:15:21] *** Joins: pycurious (~Adium@user/pycurious)
[09:15:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[09:15:57] <RedAero> oh, I'm being stupid
[09:15:58] <RedAero> right
[09:16:05] <RedAero> I need a super-list
[09:16:19] <RedAero> got it, thanks
[09:16:50] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[09:18:10] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[09:18:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[09:19:44] *** Joins: srhm (~srhm@user/srhm)
[09:21:15] *** Joins: emf (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5)
[09:21:45] *** Joins: gggp (~textual@111.61.226.166)
[09:21:53] *** Quits: gggp (~textual@111.61.226.166) (Client Quit)
[09:21:53] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[09:24:28] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:25:19] *** Quits: OPK (~OPK@user/opk) (Quit: Textual IRC Client: www.textualapp.com)
[09:26:19] *** Joins: subho (~subho@2405:201:9001:a805:b4da:d96f:ea11:2db1)
[09:29:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) ()
[09:32:57] *** Joins: canarts (~stranac@195.29.239.126)
[09:33:02] *** Joins: martums1 (~martums@user/martums)
[09:33:14] *** Quits: thekingofbandit (~thekingof@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit3!thekingofb@thunix.net)))
[09:33:32] *** Joins: ouzel8___ (~ouzel8_@shams.boastblast.com)
[09:33:45] *** Joins: riz (~BillyZane@91.196.220.174)
[09:33:55] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[09:33:58] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[09:34:04] *** Joins: han-solo (~hanish@user/han-solo)
[09:34:16] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[09:34:23] *** Joins: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com)
[09:34:29] *** Joins: simone9 (~nya@user/sx)
[09:34:38] *** Joins: SoF1 (~skius@user/skius)
[09:34:38] *** Joins: dav1d2 (~dav1d@user/dav1d)
[09:34:41] *** Joins: nac3 (~nac@user/nac)
[09:34:51] *** Joins: nanook2 (~nanook@137.184.134.238)
[09:35:05] *** Joins: dalan62360 (~dalan@110-175-157-10.tpgi.com.au)
[09:35:11] *** Joins: kiska3 (james@user/kiska)
[09:35:18] *** Joins: comruminoAlt (~comrumino@li87-103.members.linode.com)
[09:35:30] *** Joins: dab21_ (~dab21@pistis.amyanddavid.net)
[09:35:32] *** Joins: nyaaa (~realTaru9@user/taru9)
[09:35:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:35:38] *** Joins: bim9262_ (~bim9262@user/bim9262)
[09:35:38] *** Joins: dbristow_ (~dbristow@user/dbristow)
[09:35:40] *** Joins: lucerne9 (~lucerne@ip202.ip-51-178-215.eu)
[09:35:40] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[09:35:46] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[09:35:50] *** Joins: manuels8 (~manuel@80.211.205.88)
[09:35:58] *** Joins: kenoba9 (~kenoba@user/kenoba)
[09:36:02] *** Joins: vinay_ (~Vinay@user/vinay-keshava)
[09:36:12] *** Joins: xakan6 (~xakan@ns354170.ip-91-121-101.eu)
[09:36:14] *** Joins: koltrast_ (~koltrast@h77-53-57-114.cust.a3fiber.se)
[09:36:18] *** Joins: kai7 (~kai@x50d24799.cust.hiper.dk)
[09:36:22] *** Joins: lockywol- (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:36:27] *** Joins: sirn- (~sirn@user/sirn)
[09:36:28] *** Joins: carbolymer_ (~carbolyme@dropacid.net)
[09:36:29] *** Joins: capn_ (~capn@user/capn)
[09:36:33] *** Joins: dthpulse_ (~quassel@podciarou.sk)
[09:36:35] *** Joins: Elzington_ (~Elzington@94.198.42.142)
[09:36:39] *** Joins: derek_v_ (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[09:36:51] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[09:37:00] *** Joins: willcl_ark_ (~quassel@user/willcl-ark/x-8282106)
[09:37:13] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[09:37:16] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[09:37:27] *** Joins: theo2 (~theo@user/theo)
[09:37:29] *** Joins: trench_ (trench@user/trench)
[09:37:32] *** Joins: Avaris_ (~Avaris@avar.is)
[09:37:33] *** Joins: barometz_ (~dvanb@i117058.upc-i.chello.nl)
[09:37:34] *** Joins: Gamah_ (~quassel@gamah.net)
[09:37:35] *** Joins: roguelazer_ (~jbrown@sietchtabr.roguelazer.net)
[09:37:48] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:37:56] *** Joins: emf_ (~emf@2620:10d:c090:400::5:2fc4)
[09:38:08] *** Quits: Barones (~Barones@201.22.191.165.dynamic.adsl.gvt.net.br) (Remote host closed the connection)
[09:38:13] *** Joins: AlanMD_ (~AlanMD@193.105.140.131)
[09:38:21] *** Joins: dstein64- (~dstein64@dannyadam.com)
[09:38:21] *** Joins: xy (~icy@user/icy)
[09:38:42] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:38:49] *** Joins: encukou_ (quassel@nat-pool-brq-t.redhat.com)
[09:38:56] *** Joins: botfathe1 (~botfather@shell2.dds.nl)
[09:38:59] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[09:39:08] *** Joins: Celelibi_ (celelibi@user/celelibi)
[09:39:16] *** Joins: erica5 (~erica@user/erica)
[09:39:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:39:37] *** Joins: oldguy1 (~oldguy@user/oldguy)
[09:39:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:39:48] *** Joins: redgloboli_ (~redglobol@user/redgloboli)
[09:39:55] *** Joins: Retr0id5 (~Retr0id@user/retr0id)
[09:40:13] *** Joins: visl_ (visl@user/visl)
[09:40:15] *** Joins: carl-- (~carl-@185.103.188.130)
[09:40:19] *** Joins: randall_ (~randall@user/randall)
[09:40:21] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[09:40:22] *** Joins: jinsun__ (~quassel@user/jinsun)
[09:40:23] *** Joins: andrewSC_ (~andrewSC@archlinux/trusteduser/andrewSC)
[09:40:28] *** Joins: defn (~n0b0dy@user/defn)
[09:40:31] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[09:40:42] *** Quits: emf (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5) (Ping timeout: 260 seconds)
[09:40:50] *** Joins: BytesAndCoffee|a (~libera@bytes.coffee)
[09:40:54] *** Joins: mavhq_ (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[09:41:05] *** Joins: urb4nm8 (~urb4nm@165.227.158.65)
[09:41:07] *** Joins: Sadale_ (~Sadale@user/sadale)
[09:41:08] *** Joins: quesker_ (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[09:41:15] *** Joins: CrunchyChewie_ (~CrunchyCh@user/crunchychewie)
[09:41:20] *** Joins: Henry_The_Longsh (~Henry@46.101.4.181)
[09:41:27] *** Joins: fikran (~fikran@user/fikran)
[09:41:33] *** Joins: Gaffel_ (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[09:41:38] *** Joins: ldm (~ldm@hacksoc/member)
[09:41:39] *** Joins: nedbat_ (~nedbat@python/psf/nedbat)
[09:41:47] *** Joins: newdimension8 (~newdimnes@user/newdimension)
[09:42:01] *** Joins: dstufft_ (~dstufft@shitbird.caremad.io)
[09:42:11] *** Joins: phryk_ (~totallyno@user/phryk)
[09:42:15] *** Joins: lpapp_ (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[09:42:20] *** Quits: urb4nm8 (~urb4nm@165.227.158.65) (Client Quit)
[09:42:24] *** Joins: Keira (~k@lulzsec.co.uk)
[09:42:31] *** Joins: Koffa_ (jkohvakk@user/koffa)
[09:42:33] *** Joins: erry_ (~erry@errietta.me)
[09:42:35] *** Joins: SuperL4g (~akulbe@user/superlag)
[09:42:39] *** Joins: urb4nm4 (~urb4nm@165.227.158.65)
[09:42:45] *** Joins: meejah_ (~meejah@rutas.meejah.ca)
[09:42:46] *** Joins: Repiphany_ (~Repiphany@user/repiphany)
[09:42:48] *** Joins: simplici1y (~yti@user/simplicity)
[09:42:59] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[09:43:44] *** Joins: jesster1234 (~jessica@static.172.234.251.148.clients.your-server.de)
[09:43:49] *** Joins: PanamaCity3003_ (~PanamaCit@skylab/user/panamacity3003)
[09:43:53] *** Joins: shodan45_ (~quassel@107.161.22.155)
[09:43:59] *** Joins: NeilHanlon (~kneel@rockylinux/infra/neil)
[09:44:03] *** Joins: dm1 (~dm@157.230.21.14)
[09:44:15] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[09:44:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[09:44:18] *** Quits: stranac (~stranac@195.29.239.126) (*.net *.split)
[09:44:18] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (*.net *.split)
[09:44:18] *** Quits: wyclif (~wyclif@user/wyclif) (*.net *.split)
[09:44:18] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[09:44:18] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:44:18] *** Quits: iflema (~ian@user/iflema) (*.net *.split)
[09:44:18] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (*.net *.split)
[09:44:18] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[09:44:18] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (*.net *.split)
[09:44:18] *** Quits: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net) (*.net *.split)
[09:44:18] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[09:44:18] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[09:44:18] *** Quits: randall (~randall@user/randall) (*.net *.split)
[09:44:18] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[09:44:18] *** Quits: jessicant (~jessica@static.172.234.251.148.clients.your-server.de) (*.net *.split)
[09:44:18] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[09:44:18] *** Quits: Elzington (~Elzington@94.198.42.142) (*.net *.split)
[09:44:18] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (*.net *.split)
[09:44:19] *** Quits: llh (~llh@user/llh) (*.net *.split)
[09:44:19] *** Quits: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[09:44:19] *** Quits: maharg101_ (~maharg101@savoy.force9.co.uk) (*.net *.split)
[09:44:19] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[09:44:19] *** Quits: dbristow (~dbristow@user/dbristow) (*.net *.split)
[09:44:19] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (*.net *.split)
[09:44:19] *** Quits: BillyZane2 (~BillyZane@91.196.220.174) (*.net *.split)
[09:44:19] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (*.net *.split)
[09:44:19] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[09:44:19] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (*.net *.split)
[09:44:19] *** Quits: zaz\ (~zaz@poneybl.eu) (*.net *.split)
[09:44:19] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[09:44:19] *** Quits: KeiraT (~k@lulzsec.co.uk) (*.net *.split)
[09:44:19] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (*.net *.split)
[09:44:19] *** Quits: AlanMD (~AlanMD@193.105.140.131) (*.net *.split)
[09:44:19] *** Quits: Timrit (~scott@047-012-066-084.res.spectrum.com) (*.net *.split)
[09:44:19] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (*.net *.split)
[09:44:19] *** Quits: icy (~icy@user/icy) (*.net *.split)
[09:44:19] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[09:44:19] *** Quits: urb4nm (~urb4nm@165.227.158.65) (*.net *.split)
[09:44:19] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[09:44:19] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (*.net *.split)
[09:44:19] *** Quits: martums (~martums@user/martums) (*.net *.split)
[09:44:19] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (*.net *.split)
[09:44:19] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[09:44:19] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[09:44:19] *** Quits: oldguy (~oldguy@user/oldguy) (*.net *.split)
[09:44:19] *** Quits: d3fn (~n0b0dy@user/defn) (*.net *.split)
[09:44:19] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[09:44:19] *** Quits: dab21 (dab21@pistis.amyanddavid.net) (*.net *.split)
[09:44:19] *** Quits: redgloboli (~redglobol@user/redgloboli) (*.net *.split)
[09:44:19] *** Quits: kenoba (~kenoba@user/kenoba) (*.net *.split)
[09:44:19] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:44:19] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[09:44:19] *** Quits: neil (~kneel@rockylinux/infra/neil) (*.net *.split)
[09:44:19] *** Quits: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) (*.net *.split)
[09:44:19] *** Quits: skreech (skreech@user/skreech) (*.net *.split)
[09:44:19] *** Quits: jbe (~hellother@lysator/root/jbe) (*.net *.split)
[09:44:19] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[09:44:19] *** Quits: Brocker (~NoBody@user/brocker) (*.net *.split)
[09:44:19] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (*.net *.split)
[09:44:19] *** Quits: summonner (~summonner@188.24.90.174) (*.net *.split)
[09:44:19] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[09:44:19] *** Quits: Gaffel (~gaffel@h-178-174-170-170.a1405.priv.bahnhof.se) (*.net *.split)
[09:44:19] *** Quits: hakeem (~hakeem@user/hakeem) (*.net *.split)
[09:44:19] *** Quits: nac (~nac@user/nac) (*.net *.split)
[09:44:19] *** Quits: birkoff (birkoff@user/birkoff) (*.net *.split)
[09:44:19] *** Quits: erica (~erica@user/erica) (*.net *.split)
[09:44:19] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (*.net *.split)
[09:44:19] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[09:44:19] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[09:44:19] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[09:44:19] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[09:44:19] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[09:44:19] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[09:44:19] *** Quits: nanook (~nanook@137.184.134.238) (*.net *.split)
[09:44:19] *** Quits: capn (~capn@user/capn) (*.net *.split)
[09:44:19] *** Quits: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net) (*.net *.split)
[09:44:19] *** Quits: botfather (~botfather@shell2.dds.nl) (*.net *.split)
[09:44:19] *** Quits: arza (arza@arza.us) (*.net *.split)
[09:44:19] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[09:44:19] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[09:44:19] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[09:44:19] *** Quits: xakan (~xakan@ns354170.ip-91-121-101.eu) (*.net *.split)
[09:44:20] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[09:44:20] *** Quits: kiska (james@user/kiska) (*.net *.split)
[09:44:20] *** Quits: simone (~nya@user/sx) (*.net *.split)
[09:44:20] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:44:20] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (*.net *.split)
[09:44:20] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:44:20] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[09:44:20] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[09:44:20] *** Quits: visl (visl@user/visl) (*.net *.split)
[09:44:20] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (*.net *.split)
[09:44:20] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (*.net *.split)
[09:44:20] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[09:44:20] *** Quits: HenryTheLongshot (~Henry@46.101.4.181) (*.net *.split)
[09:44:20] *** Quits: dthpulse (~quassel@podciarou.sk) (*.net *.split)
[09:44:20] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[09:44:20] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[09:44:20] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[09:44:20] *** Quits: zamba (~marius@5.226.162.54) (*.net *.split)
[09:44:20] *** Quits: ouzel8_ (~ouzel8_@shams.boastblast.com) (*.net *.split)
[09:44:20] *** Quits: erhandsome (~erhandsom@user/erhandsome) (*.net *.split)
[09:44:20] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[09:44:20] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (*.net *.split)
[09:44:20] *** Quits: gamah (~quassel@gamah.net) (*.net *.split)
[09:44:20] *** Quits: Avaris (~Avaris@avar.is) (*.net *.split)
[09:44:20] *** Quits: twainwek (~user@144.211.196.35.bc.googleusercontent.com) (*.net *.split)
[09:44:20] *** Quits: dstufft (~dstufft@shitbird.caremad.io) (*.net *.split)
[09:44:20] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[09:44:20] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[09:44:20] *** Quits: malwar3hun73r (~malwar3hu@134.122.29.124) (*.net *.split)
[09:44:20] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[09:44:20] *** Quits: glider (~glider@user/glider) (*.net *.split)
[09:44:20] *** Quits: Repiphany (~Repiphany@user/repiphany) (*.net *.split)
[09:44:20] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[09:44:20] *** Quits: BytesAndCoffee (~libera@bytes.coffee) (*.net *.split)
[09:44:20] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[09:44:20] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[09:44:20] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[09:44:20] *** Quits: redj (~quassel@76.69.197.62) (*.net *.split)
[09:44:20] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[09:44:20] *** Quits: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (*.net *.split)
[09:44:20] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[09:44:20] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (*.net *.split)
[09:44:20] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (*.net *.split)
[09:44:20] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[09:44:20] *** Quits: CoderCop (~CoderCop@user/codercop) (*.net *.split)
[09:44:20] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[09:44:20] *** Quits: MightyMu (~MightyMu@104.131.138.31) (*.net *.split)
[09:44:20] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[09:44:20] *** Quits: dav1d (~dav1d@user/dav1d) (*.net *.split)
[09:44:20] *** Quits: theo (~theo@user/theo) (*.net *.split)
[09:44:20] *** Quits: tudor_ (~tudor@tomka.hu) (*.net *.split)
[09:44:20] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:44:20] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (*.net *.split)
[09:44:20] *** Quits: trench (trench@user/trench) (*.net *.split)
[09:44:20] *** Quits: bim9262 (~bim9262@user/bim9262) (*.net *.split)
[09:44:20] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[09:44:20] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[09:44:20] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[09:44:20] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[09:44:20] *** Quits: yemel (~yemel@user/yemel) (*.net *.split)
[09:44:20] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[09:44:20] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[09:44:20] *** nac3 is now known as nac
[09:44:20] *** martums1 is now known as martums
[09:44:20] *** sirn- is now known as sirn
[09:44:20] *** dstein64- is now known as dstein64
[09:44:20] *** SoF1 is now known as SoF
[09:44:20] *** dalan62360 is now known as dalan6236
[09:44:20] *** newdimension8 is now known as newdimension
[09:44:20] *** lucerne9 is now known as lucerne
[09:44:20] *** dav1d2 is now known as dav1d
[09:44:20] *** Avaris_ is now known as Avaris
[09:44:20] *** dstufft_ is now known as dstufft
[09:44:20] *** theo2 is now known as theo
[09:44:20] *** quesker_ is now known as quesker
[09:44:21] *** erica5 is now known as erica
[09:44:21] *** Retr0id5 is now known as Retr0id
[09:44:21] *** Koffa_ is now known as Koffa
[09:44:21] *** simone9 is now known as simone
[09:44:21] *** kenoba9 is now known as kenoba
[09:44:21] *** nanook2 is now known as nanook
[09:44:21] *** xakan6 is now known as xakan
[09:44:21] *** kiska3 is now known as kiska
[09:44:21] *** nyaaa is now known as taru9
[09:44:21] *** manuels8 is now known as manuels
[09:44:22] *** bim9262_ is now known as bim9262
[09:44:22] *** Joins: MightyMu_ (~MightyMu@104.131.138.31)
[09:44:23] *** Joins: jbe_ (~hellother@lysator/root/jbe)
[09:44:30] *** Joins: tudor (~tudor@tomka.hu)
[09:44:32] *** Joins: lethu (~lethu@user/lethu)
[09:44:34] *** Joins: Nei (~ailin@user/nemui)
[09:45:03] *** NeilHanlon is now known as neil
[09:45:05] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[09:45:08] *** Joins: malwar3hun73r (~malwar3hu@134.122.29.124)
[09:45:17] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[09:45:29] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:45:32] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[09:45:43] *** Quits: urb4nm4 (~urb4nm@165.227.158.65) (Client Quit)
[09:45:46] *** Joins: arza (arza@arza.us)
[09:45:50] *** Joins: zaz\ (~zaz@poneybl.eu)
[09:45:52] *** Joins: skreech (skreech@user/skreech)
[09:46:07] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[09:46:18] *** Joins: ubert (~Thunderbi@178.115.54.19.wireless.dyn.drei.com)
[09:46:24] *** Joins: Antibody (~Antibody@107.170.145.30)
[09:46:27] *** Joins: wyclif (~wyclif@user/wyclif)
[09:46:27] *** Joins: iflema (~ian@user/iflema)
[09:46:27] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[09:46:27] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[09:46:27] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[09:46:27] *** Joins: hakeem (~hakeem@user/hakeem)
[09:46:27] *** Joins: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net)
[09:46:27] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[09:46:27] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[09:46:27] *** Joins: chronon (~chronon@user/chronon)
[09:46:27] *** Joins: dxrt (~dxrt@user/dxrt)
[09:46:27] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[09:46:27] *** Joins: tazle (tazle@kapsi.fi)
[09:46:27] *** Joins: glider (~glider@user/glider)
[09:46:27] *** Joins: easter_egg (~jeffry@user/easter-egg/x-4406379)
[09:46:45] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:46:48] *** Joins: Timrit (~scott@047-012-066-084.res.spectrum.com)
[09:46:49] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[09:46:50] *** Joins: jinsun (~quassel@user/jinsun)
[09:46:52] *** Joins: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net)
[09:47:04] *** Quits: jinsun__ (~quassel@user/jinsun) (Read error: Connection reset by peer)
[09:47:14] *** Quits: jesster1234 (~jessica@static.172.234.251.148.clients.your-server.de) (Excess Flood)
[09:47:18] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[09:47:20] *** Joins: auri (~quassel@fsf/member/auri)
[09:47:30] *** Joins: seednode9 (~seednode@user/seednode)
[09:47:54] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Ping timeout: 250 seconds)
[09:48:02] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[09:48:03] *** Joins: BtbN_ (btbn@ffmpeg/developer/btbn)
[09:48:14] *** Joins: dlam (~dlam@dlam.me)
[09:48:28] *** Joins: yemel (~yemel@user/yemel)
[09:48:30] *** Joins: CoderCop (~CoderCop@user/codercop)
[09:48:50] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[09:48:50] *** Quits: coldmountain (sid484352@id-484352.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[09:49:08] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[09:49:15] *** BtbN_ is now known as BtbN
[09:49:16] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[09:49:41] *** Quits: theo (~theo@user/theo) (Ping timeout: 250 seconds)
[09:49:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:49:59] *** Joins: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[09:50:11] *** Joins: theo (~theo@user/theo)
[09:50:31] *** Joins: coldmountain (sid484352@id-484352.helmsley.irccloud.com)
[09:51:15] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[09:51:48] *** Joins: ein^sof (~michael@199.116.119.74)
[09:51:51] *** Joins: summonner (~summonner@188.24.90.174)
[09:52:05] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[09:53:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[09:53:41] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[09:54:18] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[09:54:30] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[09:55:18] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:55:31] *** Joins: hakeem_ (~hakeem@user/hakeem)
[09:55:39] *** meejah_ is now known as meejah
[09:55:43] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 250 seconds)
[09:55:47] *** Quits: dnns01 (~quassel@173.212.236.80) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:55:50] *** Joins: Dan39 (~dan@user/dan39)
[09:56:06] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[09:56:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:56:24] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 252 seconds)
[09:56:24] *** Joins: iflema_ (~ian@user/iflema)
[09:56:28] *** Quits: hakeem (~hakeem@user/hakeem) (Read error: Connection reset by peer)
[09:56:31] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 252 seconds)
[09:56:31] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 252 seconds)
[09:56:39] *** Joins: tazle (tazle@kapsi.fi)
[09:56:42] *** hakeem_ is now known as hakeem
[09:56:55] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[09:57:04] <tsujp> if I have a 1d array that looks like [ 'abc', 'def', 'ghi' ] how can I get numpy to transform this into [[ 'a', 'd', 'g' ], [ 'b', 'e', 'h' ], [ 'c', 'f', 'i' ]]?
[09:58:27] *** Joins: kosh (~kosh@user/kosh)
[09:58:30] <han-solo> does it have to be numpy ? `[list(e) for e in zip(*x)]` # ?
[09:58:42] <tsujp> could do without yeah
[09:59:34] *** Quits: Vonter_ (~Vonter@user/vonter) (Read error: Connection reset by peer)
[09:59:48] <han-solo> could drop the `list` if you don't need it to be a `list`
[10:00:20] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[10:01:17] *** Quits: subho (~subho@2405:201:9001:a805:b4da:d96f:ea11:2db1) (Quit: subho)
[10:01:24] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[10:01:59] *** Joins: gusto (~Augustus@109.255.100.54)
[10:02:20] *** Joins: Vonter (~Vonter@user/vonter)
[10:02:40] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[10:03:00] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: WeeChat 3.3)
[10:03:42] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[10:03:49] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[10:04:38] <tsujp> ah sugar how do you reverse the order the zip selects in? so I did 'a', 'd', 'g' as the first sub-array but I wanted it as the last sub-array
[10:04:45] <tsujp> I guess just .reverse() the produced list?
[10:04:56] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[10:04:58] *** Quits: jazzy (~jaziz@2600:380:863e:b8c:48da:61c2:f573:151a) (Ping timeout: 260 seconds)
[10:07:40] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[10:11:29] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:13:03] *** Quits: canarts (~stranac@195.29.239.126) (Ping timeout: 250 seconds)
[10:13:42] *** Joins: slav0nic (slav0nic@python.su)
[10:14:18] *** Quits: voirnox (~voirnox@voidbyte.xyz) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:14:37] *** Joins: voirnox (~voirnox@xor.moe)
[10:15:20] *** Quits: AlanMD_ (~AlanMD@193.105.140.131) (Ping timeout: 252 seconds)
[10:18:33] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[10:19:06] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:19:25] *** Joins: dnns01 (~quassel@2a02:c207:3003:651::1)
[10:19:54] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[10:20:30] *** Joins: glider_ (~glider@user/glider)
[10:20:32] *** Quits: glider (~glider@user/glider) (Ping timeout: 252 seconds)
[10:20:32] *** Quits: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[10:20:32] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Ping timeout: 252 seconds)
[10:20:38] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Read error: Connection reset by peer)
[10:20:59] *** Joins: pro_z (~pro_z@37.214.58.182)
[10:21:21] *** Joins: bhoman (~bhoman@pool-74-102-26-111.nwrknj.fios.verizon.net)
[10:25:17] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 264 seconds)
[10:25:25] *** Joins: dxrt_ (~dxrt@user/dxrt)
[10:26:08] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[10:26:47] *** Quits: dxrt (~dxrt@user/dxrt) (Ping timeout: 252 seconds)
[10:26:47] *** dxrt_ is now known as dxrt
[10:26:53] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[10:28:33] *** Quits: emf_ (~emf@2620:10d:c090:400::5:2fc4) (Quit: emf_)
[10:29:49] *** Joins: vd81 (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[10:30:14] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Quit: Bye!)
[10:31:01] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[10:31:31] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:31:34] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[10:32:23] *** Joins: rendar (~rendar@user/rendar)
[10:33:14] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[10:33:45] *** Joins: Vonter (~Vonter@user/vonter)
[10:33:53] *** Joins: stranac (~stranac@195.29.239.126)
[10:33:58] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[10:34:42] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[10:35:18] *** Joins: emf (~emf@2620:10d:c090:400::5:2fc4)
[10:35:26] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[10:35:35] *** Joins: gggp (~textual@111.61.226.166)
[10:35:38] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:387b:9fcf:63d:76d6)
[10:35:51] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:387b:9fcf:63d:76d6) (Client Quit)
[10:37:21] *** Quits: emf (~emf@2620:10d:c090:400::5:2fc4) (Client Quit)
[10:38:59] *** Joins: chele (~chele@user/chele)
[10:39:59] *** Quits: de-facto (~de-facto@user/de-facto) (Read error: Connection reset by peer)
[10:40:18] *** Joins: Nei_ (~ailin@user/nemui)
[10:41:12] *** Joins: _0x5fc31 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[10:41:44] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 252 seconds)
[10:41:49] *** Joins: mcfrd (~mcfrdy@user/mcfrdy)
[10:42:13] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[10:42:17] *** Quits: SuperL4g (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[10:42:17] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 252 seconds)
[10:42:17] *** Quits: obiwahn (~heini@user/obiwahn) (Ping timeout: 252 seconds)
[10:42:17] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[10:42:17] *** Quits: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de) (Ping timeout: 252 seconds)
[10:42:26] *** Joins: LucaTM (~LucaTM@user/lucatm)
[10:42:28] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[10:42:31] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[10:42:38] *** Joins: SuperLag (~akulbe@user/superlag)
[10:42:50] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (Ping timeout: 252 seconds)
[10:42:50] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Ping timeout: 252 seconds)
[10:42:50] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Ping timeout: 252 seconds)
[10:42:50] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Ping timeout: 252 seconds)
[10:42:51] *** _0x5fc31 is now known as _0x5fc3
[10:42:59] *** Joins: de-facto (~de-facto@user/de-facto)
[10:43:11] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[10:43:40] *** Nei_ is now known as Nei
[10:44:07] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:44:45] *** Joins: tobybl (~tobybl@31.111.35.255)
[10:44:50] *** mcfrd is now known as mcfrdy
[10:44:56] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[10:45:43] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Quit: Leaving...)
[10:45:48] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:46:02] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[10:46:31] <zitter> hi, is there a smbclient for Pyhton? I'm looking at this https://pypi.org/project/PySmbClient/ but it gives me "UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb0 in position 72233: invalid start byte" for some files
[10:46:32] *** Quits: chele (~chele@user/chele) (Read error: Connection reset by peer)
[10:46:37] *** Quits: apteryx (~maxim@207.35.95.110) (Ping timeout: 252 seconds)
[10:46:40] *** Joins: chele_ (~chele@user/chele)
[10:46:42] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[10:47:01] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[10:47:14] *** Quits: fredrikhl (~fhl@myrsnipa.uio.no) (Ping timeout: 252 seconds)
[10:47:38] *** Quits: abraham (~abraham@143.244.185.86) (Quit: Ping timeout (120 seconds))
[10:48:02] *** Quits: p3lim (~p3lim@ti0006q161-0896.bb.online.no) (Quit: Ping timeout (120 seconds))
[10:48:03] <Widdershins> zitter: that library is super out of date
[10:48:09] <bkhl> zitter, I'd look into some wrapper for libcurl, which supports SMB.
[10:48:10] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[10:48:11] *** Joins: diplomatic_tyran (~diplomati@ec2-13-212-137-131.ap-southeast-1.compute.amazonaws.com)
[10:48:13] *** Joins: abraham (~abraham@143.244.185.86)
[10:48:15] *** Joins: fredrikhl (~fhl@myrsnipa.uio.no)
[10:48:21] *** Joins: p3lim (~p3lim@ti0006q161-0896.bb.online.no)
[10:48:37] *** Joins: michele_ (~eraser@user/michele)
[10:48:50] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[10:49:05] *** Joins: d3x (michal@bielaw.ski)
[10:49:11] *** Joins: djhankb4 (~djhankb@208.113.164.68)
[10:49:12] *** Joins: taeaad_ (~taeaad@user/taeaad)
[10:49:20] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[10:49:26] *** Quits: xiongxin (~quassel@119.123.101.90) (Ping timeout: 252 seconds)
[10:49:26] *** Quits: mdw (~root@159.65.86.163) (Ping timeout: 252 seconds)
[10:49:33] *** Joins: lorenzosu_ (~lorenzosu@user/lorenzosu)
[10:49:37] *** Joins: OMGOMG_ (~bobrobert@poppy.ifi.uio.no)
[10:49:46] *** Joins: micronnn (~micronn@user/micronn)
[10:49:52] *** Joins: mike18 (~geri@217-149-162-127.nat.highway.telekom.at)
[10:49:55] *** Joins: Nei_ (~ailin@user/nemui)
[10:49:57] *** Joins: mdw (~root@159.65.86.163)
[10:50:07] <mike18> hi - how can i check thread safety for my python code?
[10:50:12] <mike18> is there a race detector?
[10:50:47] *** jbe_ is now known as jbe
[10:50:50] *** Joins: meti_ (~meti@user/meti)
[10:51:12] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Quit: No Ping reply in 180 seconds.)
[10:51:12] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: d3x_ (michal@bielaw.ski) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: djhankb (~djhankb@208.113.164.68) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: taeaad (~taeaad@user/taeaad) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: micronn (~micronn@user/micronn) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Remote host closed the connection)
[10:51:12] *** Quits: Nei (~ailin@user/nemui) (Remote host closed the connection)
[10:51:12] *** Quits: gerard (~gerard@user/gerard) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: michele (~eraser@user/michele) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: lorenzosu (~lorenzosu@user/lorenzosu) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: cursey- (~cursey@136-26-145-118.cab.webpass.net) (Ping timeout: 252 seconds)
[10:51:12] *** djhankb4 is now known as djhankb
[10:51:12] *** Quits: mabi (~m42e@pb42.de) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: meti (~meti@user/meti) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: Forkk_ (~forkk@li926-228.members.linode.com) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: mxp_ (~mxp@185.16.205.131) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: Aminda- (~mikaela-@Feneas/Mikaela-) (Ping timeout: 252 seconds)
[10:51:12] *** Quits: TFKyle (~kyle@64.201.205.70) (Ping timeout: 252 seconds)
[10:51:13] <Widdershins> i have never heard of a tsan mode for python, no
[10:51:23] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[10:51:26] <Widdershins> the general solution to thread safety is "design your threaded code with care"
[10:51:30] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Client Quit)
[10:51:39] *** Joins: mabi (~m42e@pb42.de)
[10:51:41] *** Quits: dskull (~dskull@user/dskull) (Ping timeout: 252 seconds)
[10:51:41] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[10:51:43] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[10:51:53] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 252 seconds)
[10:51:53] *** Quits: DCTWD (~dc@uz.utmappro.com) (Ping timeout: 252 seconds)
[10:51:55] *** Joins: cursey (~cursey@136-26-145-118.cab.webpass.net)
[10:51:57] *** Joins: gerard (~gerard@user/gerard)
[10:52:05] *** Joins: dskull (~dskull@user/dskull)
[10:52:11] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[10:52:14] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Ping timeout: 252 seconds)
[10:52:14] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Ping timeout: 252 seconds)
[10:52:14] *** Quits: bronsen (~bronsen@2a04:d480:0:1::3) (Ping timeout: 252 seconds)
[10:52:14] *** Quits: ente_ (~ente@p200300dc5f2e8500056745c22255634d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:52:21] *** Joins: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de)
[10:52:40] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[10:52:47] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Ping timeout: 252 seconds)
[10:52:47] *** Quits: jab416171 (~jab416171@c-174-52-53-66.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[10:53:02] *** Joins: ente_ (~ente@p200300dc5f2e8500056745c22255634d.dip0.t-ipconnect.de)
[10:53:05] *** Joins: mxp (~mxp@185.16.205.131)
[10:53:15] *** Nei_ is now known as Nei
[10:53:30] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[10:53:47] <mike18> Widdershins: ok - i use a class which sends a request to a server reads response and stuff - will i need to synchronize access if i use multiple threads?
[10:53:55] *** Joins: vegii_ (~quassel@2001:470:1f18:3aa:30f::5439)
[10:53:55] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[10:54:01] *** Joins: DCTWD (~dc@uz.utmappro.com)
[10:54:10] <Widdershins> no idea
[10:54:20] *** Joins: suffer (znc@mutant.penguin.fyi)
[10:54:34] *** Joins: lifefir39 (~lifefir3@152.37.120.101)
[10:54:36] <mike18> Widdershins: thats why i would like to run a race detector :)
[10:55:01] <Widdershins> why don't you just guard things that happen across threads with locks and conditions like normal
[10:55:08] *** Joins: WayToDoor7 (~WayToDoor@user/waytodoor)
[10:55:08] *** Joins: notepad (~notepad@129.159.46.243)
[10:55:11] <Widdershins> use a thread-safe queue
[10:55:29] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[10:55:31] <mike18> in what sense?
[10:55:44] *** Joins: woky (~woky@li1651-31.members.linode.com)
[10:55:44] <Widdershins> ?
[10:55:54] <mike18> why don't you just guard things that happen across threads with locks and conditions like normal?
[10:56:04] <mike18> like locking access to that class oject?
[10:56:09] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[10:56:11] *** Joins: oisota9 (~oisota@user/oisota)
[10:56:20] *** Joins: obiwahn (~heini@user/obiwahn)
[10:56:35] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[10:56:36] <Widdershins> have you... written multithreaded code before? are you familiar with the general concepts? why does this one have to be threaded?
[10:56:42] <mike18> yes
[10:56:46] <mike18> but not in python
[10:56:54] <Widdershins> well it's the same in python
[10:57:02] *** Quits: vegii (~quassel@2001:470:1f18:3aa:30f::5439) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: phlixi_ (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: Jackal-o-lantern (~quassel@173.195.145.98) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: notepad5 (~notepad@129.159.46.243) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: jrabbit (~jack@user/jrabbit) (Ping timeout: 252 seconds)
[10:57:02] *** Quits: tpr (~tpr@user/tpr) (Ping timeout: 252 seconds)
[10:57:03] *** Quits: strungout (znc@mutant.penguin.fyi) (Ping timeout: 252 seconds)
[10:57:03] *** Quits: woky_ (~woky@li1651-31.members.linode.com) (Ping timeout: 252 seconds)
[10:57:03] *** Quits: oisota (~oisota@user/oisota) (Remote host closed the connection)
[10:57:03] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (Ping timeout: 252 seconds)
[10:57:03] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 252 seconds)
[10:57:03] *** Quits: lifefir3 (~lifefir3@152.37.120.101) (Ping timeout: 252 seconds)
[10:57:03] *** oisota9 is now known as oisota
[10:57:03] *** WayToDoor7 is now known as WayToDoor
[10:57:03] *** lifefir39 is now known as lifefir3
[10:57:16] *** Joins: tpr (~tpr@user/tpr)
[10:57:27] <mike18> Widdershins: what you use on python - mutexes?
[10:57:38] *** Joins: jrabbit (~jack@user/jrabbit)
[10:57:51] <Widdershins> if you're wondering what exactly is different, python code *specifically* can only run one thread at a time in the same process, so things you do with python objects are not thread unsafe. it's safe to access an object, put things in dictionaries, etc. etc. without causing the whole program to crash. but data access races and so on still have all the same problems as any other language
[10:58:10] *** Joins: semeion (~semeion@user/semeion)
[10:58:16] <mike18> idk if that class is thread safe
[10:58:19] <Widdershins> yeah there's a threading module: https://docs.python.org/3/library/threading.html
[10:58:32] <Widdershins> it has locks and reentrant locks and conditions and all that
[10:58:36] <mike18> that class abstracts sending to a http server and waiting for response and parses some stuff
[10:58:55] <mike18> and gets data back to caller
[10:59:00] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[10:59:03] *** Joins: jim87 (~quassel@93.55.249.30)
[10:59:05] <Widdershins> events, semaphores, barriers. lots of useful constructs already made for you. also queue.Queue is thread-safe
[10:59:05] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[10:59:11] *** Joins: apteryx (~maxim@dsl-154-64.b2b2c.ca)
[10:59:34] <Widdershins> in that it is blocking if no items are in the queue yet
[10:59:34] <mike18> i currently have 1 instance of that class per thread
[10:59:38] <mike18> i could create 2 of them
[10:59:47] <mike18> i mean create 1 instance per thread
[10:59:51] <Widdershins> i have no idea what "that class" is or what it's doing so how would i know
[11:00:15] *** Joins: P1ro (~quassel@user/p1ro)
[11:00:26] *** Joins: OPK (~OPK@user/opk)
[11:00:33] <Widdershins> most libraries that fetch results over the network in python are written to be blocking. if it's not safe to use them from more than one thread they'll generally tell you
[11:00:55] <mike18> @Widdershins the class is an abstraction to a http server. you call it - it sends a request - it waits for reply from server - parses data and returns data to caller
[11:01:18] <Widdershins> yeah, that still doesn't tell me anything
[11:01:33] <mike18> i dont see what should not be thread safe here
[11:01:58] <mike18> it will create a new http request every time i call it
[11:01:59] <Widdershins> thread unsafety can occur for that kind of thing if the object's instance data isn't designed to have in-flight requests for more than one thread at a time
[11:02:19] <Widdershins> such as maintaining the state of the connection, or the context of its interactions with the server
[11:02:43] *** dcaro_away is now known as dcaro
[11:02:52] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[11:02:59] <Widdershins> python requests recommends that you have one session per thread for these reasons, for example
[11:03:09] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[11:03:13] *** Joins: Henry151_ (~bishop@user/henry151)
[11:03:31] *** Joins: CombatVet (~c4@user/combatvet)
[11:03:49] <mike18> Widdershins: i could create one session per thread
[11:03:52] *** Joins: Aminda- (~mikaela-@Feneas/Mikaela-)
[11:03:57] <mike18> at the moment its 1 session for all threads
[11:04:12] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[11:04:14] <Widdershins> basically the problem can lie in the fact that these usually use TCP connections, which are stateful entities. if they store those connections with the wrapper object instead of with each request (like if they want to re-use the connection and don't just check a connection out from a pool) you can run into problems as multiple requests sent without a response can be invalid
[11:04:22] <jim87> Hello! Since a couple of days I'm having troubles connecting to an API service behind SSL HTTPS because python-requests says the certificate, issued by Let's Encrypt, is expired. In the chain indeed I see that the root certificate (DST Root CA X3) expired the 29th of September, at 19:21. Reading the news here https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/ it seems that it should be still accepted due to an extension of the certificate
[11:04:22] <jim87> trusting the "ISRG Root X1" and using openssl 1.1.0 or later... I'm so confused. I'm currently running the python application via alpine (using the python3.9:alpine docker image). Please help :(
[11:04:33] *** Quits: AM (~techman@82-203-161-159.bb.dnainternet.fi) (Killed (NickServ (GHOST command used by AM__)))
[11:04:36] <zitter> hi, is there a smbclient for Pyhton? I'm looking at this https://pypi.org/project/PySmbClient/ but it gives me "UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb0 in position 72233: invalid start byte" for some files
[11:04:37] *** Joins: niluje1 (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd)
[11:04:40] *** Joins: AM (~techman@82-203-161-159.bb.dnainternet.fi)
[11:04:43] *** Quits: Henry151 (~bishop@user/henry151) (Ping timeout: 252 seconds)
[11:04:43] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Ping timeout: 252 seconds)
[11:04:43] *** Quits: thm_ (~thomas@fedora/thm) (Ping timeout: 252 seconds)
[11:04:43] *** Quits: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd) (Ping timeout: 252 seconds)
[11:04:52] *** Joins: TFKyle (~kyle@64.201.205.70)
[11:05:10] *** Joins: emf (~emf@2620:10d:c090:400::5:2fc4)
[11:05:15] <supakeen> Widdershins: HTTP defines quite well what happens when multiple requests are on a socket :)
[11:05:19] <supakeen> (and one fails)
[11:05:52] <Widdershins> yes, but if your connection object doesn't understand which thread gets the response shit's going to go sideways
[11:05:53] <mike18> supakeen: what does it say?
[11:06:04] <rindolf> zitter: you have been answered
[11:08:04] *** Joins: brelod (~me@90.244.150.142)
[11:08:30] <supakeen> So, the theory is called pipelining (or HTTP pipelining) browsers never adapted it but load balancers do. You can send out multiple requests and the other side is guaranteed to send responses back in the order it received requests. All idempotent requests are allowed to be pipelined, a failed request in between invalidates all following requests.
[11:08:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:08:41] <zitter> rindolf, ?
[11:08:45] <supakeen> Usually you see pipelining only on sequences of GET/HEAD.
[11:09:02] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:09:10] *** Joins: thm (~thomas@fedora/thm)
[11:09:17] <supakeen> However, 'just' speak HTTP/2 so you don't need to think about this at all since it doesn't need any of the above :)
[11:09:28] *** Joins: wyclif (~wyclif@user/wyclif)
[11:09:37] <supakeen> Widdershins: Yea, it does :)
[11:09:49] <rindolf> zitter: <bkhl> zitter, I'd look into some wrapper for libcurl, which supports SMB.
[11:11:02] <zitter> oh, thanks.
[11:11:38] <rindolf> zitter: you're welcome
[11:11:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[11:12:03] *** Joins: rsx (~dummy@ppp-188-174-153-249.dynamic.mnet-online.de)
[11:12:37] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:12:38] <pr100> Widdershins: this kind of thing is much more straight forward with asyncio and an asyncio capable http client like httpx or aiohttp. No need to worry about threads...
[11:12:48] <Widdershins> yes
[11:13:04] <Widdershins> failing that, using queues is much better
[11:13:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:13:17] *** Joins: Name (~clarjon1@user/clarjon1)
[11:13:25] *** Name is now known as Guest4024
[11:13:38] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:14:37] *** Joins: carl--- (~carl-@185.103.188.130)
[11:14:45] *** Joins: pavelow_ (~pavelow@opticalchimp.com)
[11:14:46] *** Joins: randall (~randall@user/randall)
[11:15:12] *** Quits: randall_ (~randall@user/randall) (Ping timeout: 250 seconds)
[11:15:12] *** Quits: justache (~justache@user/justache) (Ping timeout: 250 seconds)
[11:15:12] *** Quits: pavelow (~pavelow@opticalchimp.com) (Ping timeout: 250 seconds)
[11:15:17] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 250 seconds)
[11:15:17] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[11:15:37] *** Quits: canardo (~canardo@2001:470:69fc:105::e110) (Ping timeout: 250 seconds)
[11:15:39] *** Joins: canardo1 (~canardo@2001:470:69fc:105::e110)
[11:15:39] *** Joins: justache (~justache@user/justache)
[11:15:43] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[11:15:44] *** Joins: dstein64 (~dstein64@dannyadam.com)
[11:15:47] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 250 seconds)
[11:15:47] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[11:15:54] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[11:16:28] *** Quits: Tritium (~tritium@toxin.sdamon.com) (Ping timeout: 250 seconds)
[11:16:28] *** Quits: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 250 seconds)
[11:16:39] *** Quits: clarjon_1 (~clarjon1@user/clarjon1) (Ping timeout: 250 seconds)
[11:16:52] <tsujp> I want to construct a regex string from a variable like how you template strings, e.g. '{foo}{bar}' but use this to produce the regex that a string will be matched against
[11:16:57] <tsujp> How do I do that?
[11:17:02] *** Quits: vd81 (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[11:17:04] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 250 seconds)
[11:17:05] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 250 seconds)
[11:17:05] *** Quits: carlio (~carlio@88.198.149.110) (Ping timeout: 250 seconds)
[11:17:09] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:17:19] *** Joins: carlio (~carlio@88.198.149.110)
[11:17:22] *** Joins: Skyfire (~pyon@user/pyon)
[11:17:36] *** Quits: themill (~stuart@debian/stuart) (Excess Flood)
[11:17:36] <rindolf> tsujp: regex strings are not special
[11:17:50] *** Joins: themill (~stuart@debian/stuart)
[11:17:54] *** Quits: Hackerpcs_1 (~user@user/hackerpcs) (Quit: Hackerpcs_1)
[11:18:34] <tsujp> abc = 'X' and then print(re.match('{abc}', 'XX')) gives None though? rindolf
[11:18:51] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[11:19:00] <rindolf> tsujp: f'...'
[11:19:04] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[11:19:08] *** Joins: drogas (~drogas@jump2.jet.uk)
[11:19:12] <tsujp> oh derp
[11:19:20] *** Joins: Hackerpcs (~user@user/hackerpcs)
[11:19:26] <rindolf> Skyfire: hi
[11:19:53] <tsujp> Thank you friend
[11:20:07] <rindolf> tsujp: you're welcome
[11:20:27] *** Joins: todda7 (~torstein@81.61.117.48.dyn.user.ono.com)
[11:20:49] <todda7> what am i doing wrong?
[11:20:50] <todda7> re.sub(r'\brd\.\b|\brd\b', "", 'rdx rd rd.').strip() == 'rdx'
[11:21:59] <pr100> "now you have two problems..." :)
[11:22:17] *** Joins: upsala (~zcb@185.213.155.160)
[11:24:41] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6) (Ping timeout: 264 seconds)
[11:25:03] *** Joins: pycurious (~Adium@user/pycurious)
[11:25:21] *** Quits: gitly (~gitly@85.255.235.96) (Ping timeout: 265 seconds)
[11:26:24] *** Joins: Tireos (~Tireos@91.223.118.131)
[11:26:58] *** Joins: gitly (~gitly@148.252.132.191)
[11:27:14] *** abc_ is now known as zwindl
[11:28:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:29:57] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[11:30:39] *** Joins: Vonter (~Vonter@user/vonter)
[11:30:44] *** Joins: emf_ (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5)
[11:30:46] *** Quits: eldenring0 (uid506233@id-506233.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:31:52] <han-solo> re.sub(r'\brd\.|\brd\b', "", 'rdx rd rd.').strip() == 'rdx'
[11:32:14] <han-solo> `r'\bfoo\b' matches 'foo', 'foo.', '(foo)', 'bar foo baz' but not 'foobar' or 'foo3'.`
[11:32:39] *** Joins: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net)
[11:33:39] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[11:33:45] <han-solo> r'\brd\.\b' won't match `rd.`
[11:34:06] *** Quits: emf (~emf@2620:10d:c090:400::5:2fc4) (Ping timeout: 260 seconds)
[11:34:34] <Skyfire> rindolf: Hello. Sorry, I did not notice your message.
[11:35:05] *** mavhq_ is now known as mavhq
[11:35:06] *** Joins: emf (~emf@2620:10d:c090:400::5:2fc4)
[11:35:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:01] *** Joins: vimart (~vimart@85.255.232.67)
[11:36:26] *** Joins: raxor2k (~raxor2k@78.158.232.147)
[11:36:54] *** Quits: emf_ (~emf@2601:602:9400:84d:83e:973e:4aa8:d9e5) (Ping timeout: 260 seconds)
[11:37:56] *** Joins: P1ro (~quassel@user/p1ro)
[11:38:30] *** Joins: Payam (~Payam@138.106.57.131)
[11:38:42] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi)
[11:39:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:04] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:39:44] *** Joins: matrixise (~weechat@python/psf/matrixise)
[11:39:50] *** Guest4024 is now known as clarjon1
[11:40:02] *** Quits: greknod2 (~grek@120.88.171.98) (Ping timeout: 252 seconds)
[11:41:18] *** Joins: iwkse (~iwkse@iurit.com)
[11:41:47] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[11:42:02] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[11:42:14] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[11:42:33] <Widdershins> yeah i think \b only exists between characters that are in \w and anything that isn't
[11:42:45] <rindolf> Skyfire: sup?
[11:42:50] <Widdershins> because \. isn't a word character, there's no match for \b between it and $
[11:43:21] <iwkse> Hi, how's possible to match the key of a pandas dataframe row? I'm using this https://bpa.st/C5AA but it's not working
[11:43:21] *** Joins: MJ94_ (mj94@user/mj94)
[11:43:24] <Widdershins> r'\brd\.\b' does not match "rd." but it does find a match in "rd.abc"
[11:44:52] <rindolf> iwkse: you use both «mykey» and «"mykey"» - why?
[11:45:18] *** Quits: MJ94 (mj94@user/mj94) (Ping timeout: 250 seconds)
[11:45:20] *** Quits: Strom (strom@fedora/strom) (Ping timeout: 250 seconds)
[11:45:21] *** MJ94_ is now known as MJ94
[11:45:29] <iwkse> rindolf: I need to find if the key exists than print it
[11:45:41] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 250 seconds)
[11:45:56] *** Joins: lastshell (~lastshell@user/lastshell)
[11:46:23] <rindolf> iwkse: but "mykey" is different than mykey
[11:46:29] *** Joins: Strom- (strom@fedora/strom)
[11:46:34] <han-solo> `if key in df.columns: print(df[key])` # ?
[11:46:47] <iwkse> rindolf: true, wrong copypaste! because there's I'm passing a variable
[11:46:57] <iwkse> han-solo: thanks!
[11:47:48] <rindolf> iwkse: ah, see https://github.com/shlomif/how-to-share-code-online
[11:48:00] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[11:48:47] <iwkse> rindolf: thanks!
[11:48:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:49:06] <rindolf> iwkse: you're welcome
[11:49:15] *** Quits: gggp (~textual@111.61.226.166) (Ping timeout: 250 seconds)
[11:49:31] <Payam> Is anyone familiar with the paralell keyword in Gitlab?
[11:49:40] *** Joins: mnemonic (~semeion@user/semeion)
[11:49:48] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Client Quit)
[11:50:21] <Payam> I would like to run my tests in  different jobs in paralell. A part of them in one job and the others in another job.
[11:50:47] *** Joins: fikran (~fikran@user/fikran)
[11:50:51] <Payam> When I only use the paralell :2 then it just run the same tests in both of them
[11:50:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[11:52:15] *** Joins: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr)
[11:52:23] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[11:52:24] <rindolf> Payam: hi , it is spelled https://en.wiktionary.org/wiki/parallel
[11:52:48] *** Joins: gggp (~textual@60.10.194.45)
[11:53:32] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[11:53:32] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Remote host closed the connection)
[11:54:00] <Payam> thanks
[11:54:01] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[11:54:20] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[11:54:43] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[11:55:12] *** Quits: p-i- (~Ohmu@223.206.71.80) (Ping timeout: 250 seconds)
[11:55:29] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[11:55:42] *** Joins: chele__ (~chele@user/chele)
[11:56:02] *** Joins: gutt_ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[11:56:30] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[11:56:30] *** Quits: chele_ (~chele@user/chele) (Read error: Connection reset by peer)
[11:56:30] *** Quits: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[11:56:51] *** Joins: jancoow2 (~jancoow@user/jancoow)
[11:56:56] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[11:56:56] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[11:57:12] <rindolf> Payam: you're welcome - and is there an environment variable for the job's id?
[11:57:48] *** Joins: OverCoder6 (~OverCoder@user/overcoder)
[11:57:54] *** Joins: fxrs_ (~fxrs@192.227.212.130)
[11:58:19] *** Joins: gtristan (~tristan@110.11.238.160)
[11:58:30] <Payam> rindolf sorry I am not so familiar with variables. What do you mean?
[11:58:52] *** Joins: ztrawhcse (eschwartz@archlinux/bugwrangler/eschwartz)
[11:58:58] *** Quits: fxrs (~fxrs@192.227.212.130) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: graingert (sid128301@2a03:5180:f::1:f52d) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: Cienisty (Cienisty@user/cienisty) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: gutt__ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: liam (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: OverCoder (~OverCoder@user/overcoder) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 252 seconds)
[11:58:58] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 252 seconds)
[11:58:58] *** jancoow2 is now known as jancoow
[11:58:58] *** OverCoder6 is now known as OverCoder
[11:59:02] *** Quits: Duckle (~Duckle@user/duckle) (Remote host closed the connection)
[11:59:02] *** Quits: masterkorp (~masterkor@user/masterkorp) (Quit: Ping timeout (120 seconds))
[11:59:07] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[11:59:13] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[11:59:13] *** Quits: JayDoubleu (sid339529@id-339529.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[11:59:13] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Ping timeout: 252 seconds)
[11:59:13] *** Quits: mindlesstux (sid18072@id-18072.lymington.irccloud.com) (Ping timeout: 252 seconds)
[11:59:15] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:59:18] *** Joins: masterkorp (~masterkor@user/masterkorp)
[11:59:19] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Remote host closed the connection)
[11:59:20] *** Joins: Cienisty (Cienisty@user/cienisty)
[11:59:25] *** Joins: Duckle (~Duckle@user/duckle)
[11:59:31] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[11:59:45] <tsujp> how do I wait for recursion to finish before continuing?
[11:59:46] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[11:59:46] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[11:59:46] *** Quits: Ennea (~Ennea@user/ennea) (Ping timeout: 252 seconds)
[11:59:48] <rindolf> Payam: https://en.wikipedia.org/wiki/Environment_variable
[11:59:59] *** Joins: Ennea (~Ennea@user/ennea)
[12:00:00] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[12:00:10] *** Joins: liam (sid7517@id-7517.helmsley.irccloud.com)
[12:00:13] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[12:00:19] *** Joins: JayDoubleu (sid339529@id-339529.hampstead.irccloud.com)
[12:00:19] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (Ping timeout: 252 seconds)
[12:00:24] <rindolf> tsujp: hi, using asyncio?
[12:00:33] <gtristan> Is there something a bit more simple than urllib.parse.urlunparse() if you simply want to "take a path on the localhost and create a file:// URI with it" ?
[12:00:33] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[12:00:51] <tsujp> I am not
[12:00:52] *** Quits: saroy (~Sandipan@45.249.73.179) (Ping timeout: 252 seconds)
[12:01:16] *** Joins: mindlesstux (sid18072@id-18072.lymington.irccloud.com)
[12:01:25] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 252 seconds)
[12:01:48] *** Joins: vm (~vm@user/ansible)
[12:02:23] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[12:02:28] <rindolf> tsujp: share code then - recursion normally blocks
[12:03:27] <Payam> rindolf there isn't any enviroment variable for jobs id
[12:03:29] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[12:03:44] *** Joins: P1ro (~quassel@user/p1ro)
[12:04:25] <lucerne> How do I do `dig TXT +short o-o.myaddr.l.google.com @8.8.4.4` in Python?
[12:04:44] *** Quits: todda7 (~torstein@81.61.117.48.dyn.user.ono.com) (Ping timeout: 250 seconds)
[12:06:40] *** Joins: dre (~dre@2001:8003:c932:c301:34d2:f449:f8cf:6e39)
[12:07:01] <dre> YO!
[12:07:29] <dre> if I wanted to capture the docstring from some function in another file, but without running that file, can I do some sort of:
[12:08:00] <han-solo> gtristan: not sure if it's any better but `urllib.parse.urlparse(x)._replace(scheme='file').geturl()` # untested
[12:08:09] <dre> the_docs = importlib.import('file.name.ClassThing.method_name').__doc__
[12:08:23] <dre> without having to run the code? does importlib always run code?
[12:08:41] <dre> I basically want to extract information out of the python files without invoking them
[12:08:44] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Remote host closed the connection)
[12:08:44] <dre> and without grepping
[12:09:01] <gtristan> han-solo, testing it out in the shell actually it seems that urlunparse() to not properly escape the path :-/
[12:09:31] <gtristan> urllib.parse.urlunparse(("file", None, "/pony/horsy/one+two three.txt", None, None, None)) -> 'file:///pony/horsy/one+two three.txt'
[12:09:41] <gtristan> I'm expecting the proper escape sequences
[12:10:07] <han-solo> oh
[12:10:15] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:10:40] *** Quits: portalrat (~portalrat@user/portalrat) (Read error: Connection reset by peer)
[12:10:42] *** Joins: portalrat_ (~portalrat@user/portalrat)
[12:10:46] *** Quits: dxrt (~dxrt@user/dxrt) (Ping timeout: 252 seconds)
[12:10:46] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 252 seconds)
[12:10:46] *** Quits: hardwire (sid415742@id-415742.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[12:10:55] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[12:10:56] *** Joins: hardwire (sid415742@id-415742.uxbridge.irccloud.com)
[12:10:57] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[12:11:13] *** Joins: jmft2 (~jmft2@213.31.248.255)
[12:11:19] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 252 seconds)
[12:11:19] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Ping timeout: 252 seconds)
[12:11:43] *** Joins: pycurious (~Adium@user/pycurious)
[12:11:55] *** Joins: mchlumsky8 (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[12:12:09] *** Joins: KirkMcDo1ald (~Kirk@python/site-packages/KirkMcDonald)
[12:12:10] *** Joins: flay1 (~flay@user/flay)
[12:12:21] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 252 seconds)
[12:12:21] *** Quits: olasd (~olasd@softwareheritage/olasd) (Ping timeout: 252 seconds)
[12:12:28] <gtristan> Ah there is urllib.parse.quote() for this purpose
[12:12:29] *** Quits: phantomcircuit (~phantomci@192.241.205.97) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: flay (~flay@user/flay) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: bertiger (~bertiger@user/bertiger) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: dvx (~dvx@185.63.97.64) (Ping timeout: 252 seconds)
[12:12:29] *** Quits: the_rat (~ratto@emily.sorcio.org) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: peterandre (peterandre@2605:6400:c847:1524::4251) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: josh_h (sid301834@2a03:5180:f:1::4:9b0a) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: strudl (~strudl@user/strudl) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: _moep_ (~moep@user/moep/x-3358975) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: asix (~Anders@user/asix) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: mattmcc (matt@2600:3c00::f03c:91ff:fe89:c2e8) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 252 seconds)
[12:12:30] *** Quits: Mocramis (~mocramis@dalaran.sceen.net) (Ping timeout: 252 seconds)
[12:12:31] *** Joins: r0bby (r0bby@user/r0bby)
[12:12:45] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[12:12:47] *** Joins: josh_h (sid301834@id-301834.helmsley.irccloud.com)
[12:12:48] *** Joins: asix (~Anders@user/asix)
[12:12:48] <gtristan> I can just "file://" + urllib.parse.quote(path)
[12:12:54] *** Joins: phantomcircuit (~phantomci@2604:a880:1:20::f2:c001)
[12:12:56] *** Joins: the_rat (~ratto@emily.sorcio.org)
[12:12:57] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Read error: Connection reset by peer)
[12:12:58] *** Quits: Titore (Titore@user/titore) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: roppert (~roppert@inb4.se) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (Ping timeout: 252 seconds)
[12:12:58] *** Quits: Armen (~Armen@armen138.com) (Ping timeout: 252 seconds)
[12:12:58] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[12:13:00] *** Joins: dxrt (~dxrt@user/dxrt)
[12:13:17] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[12:13:23] *** Joins: Titore (Titore@user/titore)
[12:13:26] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[12:13:26] *** mchlumsky8 is now known as mchlumsky
[12:13:28] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[12:13:31] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Ping timeout: 252 seconds)
[12:13:31] *** Quits: gusto (~Augustus@109.255.100.54) (Ping timeout: 252 seconds)
[12:13:31] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 252 seconds)
[12:13:38] *** Joins: bertiger (~bertiger@user/bertiger)
[12:13:39] *** Joins: loworderbit (~dave@s0106e81cba1736ea.ss.shawcable.net)
[12:13:39] *** Joins: olasd (~olasd@softwareheritage/olasd)
[12:13:49] *** Joins: strudl (~strudl@user/strudl)
[12:13:54] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[12:14:04] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 252 seconds)
[12:14:06] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[12:14:07] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[12:14:58] <han-solo> yeah
[12:15:16] *** Quits: emf (~emf@2620:10d:c090:400::5:2fc4) (Quit: emf)
[12:15:29] <han-solo> wish the unparse did quoting for the path ':)
[12:15:43] <han-solo> or parse for that matter
[12:15:47] *** Repiphany_ is now known as Repiphany
[12:15:54] *** Quits: ztrawhcse (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[12:16:12] *** Joins: gusto (~Augustus@109.255.100.54)
[12:16:13] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:16:13] *** Joins: emf (~emf@2620:10d:c090:400::5:2fc4)
[12:16:23] *** Quits: carl--- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[12:16:23] *** Joins: Mocramis (~mocramis@dalaran.sceen.net)
[12:16:43] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[12:17:06] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[12:17:29] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:17:40] *** Quits: emf (~emf@2620:10d:c090:400::5:2fc4) (Client Quit)
[12:18:50] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[12:18:55] *** Joins: y04nn (~y04nn@193.32.127.238)
[12:20:09] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[12:21:37] <jinsun> dre: importlib.import will run the code no guarded by ` if __name__ == "__main__"`  block, which should iideally be just the class and function definitions, which shouldn't take a lot of time if you are worried about that
[12:22:11] <jinsun> s/no/not
[12:24:23] *** Joins: xiongxin (~quassel@119.123.101.32)
[12:28:11] *** Quits: ubert (~Thunderbi@178.115.54.19.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[12:29:03] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[12:29:31] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[12:32:13] <dre> jinsun, ok cool, what about if I'm worried about from a "side effects" pov, is there anything I can do to prevent that?
[12:32:27] <dre> remember I'm just trying to get the docstrings
[12:32:37] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[12:33:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:34:45] *** Joins: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net)
[12:35:24] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[12:35:30] *** Quits: lifefir3 (~lifefir3@152.37.120.101) (Quit: Ping timeout (120 seconds))
[12:35:54] *** Joins: canarts (~stranac@195.29.239.126)
[12:36:10] *** Joins: chele_ (~chele@user/chele)
[12:36:17] *** Joins: masterkorp6 (~masterkor@user/masterkorp)
[12:37:04] *** Joins: gutt__ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[12:37:14] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 250 seconds)
[12:37:34] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[12:37:37] *** Quits: gutt_ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Remote host closed the connection)
[12:37:40] *** Quits: loworderbit (~dave@s0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: carlio (~carlio@88.198.149.110) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: brelod (~me@90.244.150.142) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Ping timeout: 252 seconds)
[12:37:40] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (Ping timeout: 252 seconds)
[12:37:42] *** Joins: Nei_ (~ailin@user/nemui)
[12:37:47] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Read error: Connection reset by peer)
[12:38:00] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[12:38:00] *** Joins: lifefir3 (~lifefir3@152.37.120.101)
[12:38:26] *** Quits: masterkorp (~masterkor@user/masterkorp) (Ping timeout: 252 seconds)
[12:38:26] *** Quits: OverCoder (~OverCoder@user/overcoder) (Ping timeout: 252 seconds)
[12:38:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:38:26] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 252 seconds)
[12:38:26] *** Quits: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de) (Ping timeout: 252 seconds)
[12:38:26] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 252 seconds)
[12:38:26] *** masterkorp6 is now known as masterkorp
[12:38:32] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[12:39:05] *** Joins: de-facto_ (~de-facto@user/de-facto)
[12:39:09] *** Joins: OverCoder (~OverCoder@user/overcoder)
[12:39:12] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[12:39:20] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[12:39:21] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[12:39:24] *** Joins: brelod (~me@90.244.150.142)
[12:40:04] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[12:40:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:40:18] *** Joins: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net)
[12:40:48] *** Joins: mnemonic (~semeion@user/semeion)
[12:40:53] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[12:40:55] *** Joins: oisota7 (~oisota@user/oisota)
[12:41:10] <jinsun_> <dre> "jinsun, ok cool, what about if I..." <- if you just have class and function definitions then there will be no side effects, just put everything that can cause side effects inside `if __name__ == "__main__"`
[12:41:41] *** Joins: renrelkha_ (~renrelkha@user/renrelkha)
[12:41:41] <dre> yes, but I'm creating something that means I don't have control over the code that this is run on.
[12:42:30] *** Joins: P1ro_ (~quassel@user/p1ro)
[12:42:32] <dre> I want to capture the structured data from python ( and docstrings) - something like AST, on code that isn't mine... should I not use importlib altogether ?
[12:42:37] <dre> perhaps I should use AST
[12:42:39] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[12:43:02] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[12:43:21] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:44:08] <jinsun_> yes don't use importlib if you don't want to run code
[12:44:28] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[12:44:31] *** Joins: the_rat_ (~ratto@emily.sorcio.org)
[12:44:39] *** Quits: chele__ (~chele@user/chele) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: gtristan (~tristan@110.11.238.160) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: abraham (~abraham@143.244.185.86) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: oisota (~oisota@user/oisota) (Quit: Ping timeout (120 seconds))
[12:44:39] *** Quits: chronon (~chronon@user/chronon) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 252 seconds)
[12:44:39] *** oisota7 is now known as oisota
[12:44:39] *** Quits: raxor2k (~raxor2k@78.158.232.147) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: shantaram (shan@cyblog/maintainer/shan) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 252 seconds)
[12:44:39] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:44:39] *** Quits: the_rat (~ratto@emily.sorcio.org) (Ping timeout: 252 seconds)
[12:44:41] *** de-facto_ is now known as de-facto
[12:44:50] *** Joins: upsala (~zcb@185.213.155.160)
[12:44:50] *** Joins: shan (shan@cyblog/maintainer/shan)
[12:45:38] *** Nei_ is now known as Nei
[12:45:49] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[12:45:51] *** Joins: fikran (~fikran@user/fikran)
[12:45:56] <jinsun_> no idea if ast will help much, haven't used it
[12:45:57] <jinsun_> I know sphinx just imports the code and gives a warning about side effects
[12:46:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:46:15] *** Joins: chronon (~chronon@user/chronon)
[12:46:37] *** Joins: VaniaPy (~VaniaPy@adsl-76.176.58.192.tellas.gr)
[12:46:51] *** Joins: pycurious (~Adium@user/pycurious)
[12:47:06] <VaniaPy> Hello, i'm getting this error when i'm dumping a ml model TypeError: Object of type Series is not JSON serializable
[12:49:02] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[12:49:06] *** Joins: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085)
[12:50:04] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[12:50:07] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:50:09] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[12:50:09] *** Quits: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net) (Remote host closed the connection)
[12:50:09] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[12:50:18] *** Quits: y04nn (~y04nn@193.32.127.238) (Remote host closed the connection)
[12:50:30] *** Joins: y04nn (~y04nn@193.32.127.238)
[12:50:31] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6)
[12:50:44] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi) (Remote host closed the connection)
[12:50:47] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi)
[12:50:57] <lericson> i just for the life of me cannot understand why my code runs SLOWER with multiple threads
[12:51:00] <lericson> they do not hold the GIL
[12:51:08] <lericson> there must be some other lock?
[12:51:21] <lericson> maybe BLAS or something crazy like that
[12:51:35] <lericson> i'm at a point where i'm using ctypes to
[12:51:35] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:51:35] <lericson>     assert not PyGILState_Check()
[12:51:49] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[12:52:07] <lericson> anybody know of a good way to profile numba?
[12:52:08] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Ping timeout: 252 seconds)
[12:53:58] *** Quits: mike18 (~geri@217-149-162-127.nat.highway.telekom.at) (Remote host closed the connection)
[12:54:53] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Remote host closed the connection)
[12:54:57] *** Joins: arinov (~arinov@213.194.126.155)
[12:55:07] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Ping timeout: 240 seconds)
[12:55:20] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[12:55:56] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (Ping timeout: 245 seconds)
[12:56:47] <lericson> what was that, austin?
[12:56:52] <lericson> i guess it doesn't do C
[12:56:52] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[12:57:19] <lericson> https://bpa.st/HB4A here is more details on timings
[12:57:53] <lericson> at this point, i don't really need faster execution times, i'm just completely baffled by this behavior
[13:00:19] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[13:01:20] *** Quits: P1ro_ (~quassel@user/p1ro) (Read error: Connection reset by peer)
[13:01:39] *** Joins: gggp (~textual@111.63.14.119)
[13:02:04] <bjs> lericson: how much threads help/harm is usually a function of the code itself
[13:02:28] <bjs> so it's hard to help say why,  it could be that your code is very serial (regardless of threadedness), it could be that one operation really is for whatever reason holding the GIL,  it could be that you wrote it wrong
[13:02:28] <bjs> :P
[13:02:35] *** Joins: P1ro (~quassel@user/p1ro)
[13:02:43] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: The Lounge - https://thelounge.chat)
[13:03:49] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[13:04:12] <lericson> bjs: they share no data
[13:04:18] <lericson> there is no inter-thread communication
[13:04:22] <bjs> lericson: can you share the code then?
[13:04:27] <lericson> it's very long
[13:04:29] *** Joins: tspng (~tspng@2a02:168:a1a1:1:1cd0:b178:8c4f:1fe)
[13:04:50] <bjs> lericson: or at least, the part that does the threads? are you making threads manually? using a thread pool?
[13:04:53] <bjs> or some other library
[13:05:08] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[13:05:15] <lericson> i tried multiple ways, concurrent.futures, the numba's built-in thing, and my own work queue thing
[13:05:23] *** Joins: Payam (~Payam@138.106.57.131)
[13:05:26] <lericson> they all behave the same except numba which just deadlocks and/or segfaults
[13:06:18] <lericson> https://bpa.st/NVLA the numba code that seems to have a secret lock
[13:06:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:06:39] <lericson> this is the brunt of dedupe_polylines()
[13:06:58] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[13:07:18] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:07:37] *** Joins: bronsen (~bronsen@2a04:d480:0:1::3)
[13:08:11] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Quit: Leaving)
[13:10:07] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[13:10:37] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:11:34] *** Quits: RedAero (~RedAero@20014C4E20578C002990996F18680467.dsl.pool.telekom.hu) (Quit: Client closed)
[13:11:43] *** Quits: han-solo (~hanish@user/han-solo) (Quit: Lost terminal)
[13:12:16] *** Joins: pycode (~pycode@2001:b07:5d28:551:b939:17d2:2f17:2669)
[13:12:28] *** Joins: shad (~shad@user/shad)
[13:12:38] <bjs> lericson: don't you need nogil=True or something?
[13:12:43] *** Joins: bfortified (~bfortifie@172.83.243.94)
[13:12:43] <bjs> Im not a numba expert
[13:12:51] <lericson> bjs: yeah my decorator njit is doing that
[13:13:01] <lericson> it's not numba's normal njit
[13:13:27] <dre> I can't even get the python module syntax algorithm right :laughing-shaking-head:
[13:13:32] <dre> I'm too drunk for this
[13:13:55] <dre> i want to do like, dir.file.ClassName.SubClass.Function
[13:14:53] *** Joins: mactron (~mactron@apn-123-214-101-gprs.simobil.net)
[13:14:53] <bjs> dre: okay
[13:15:19] <bjs> lericson: hmm,  and just to check this machine you're running it on actually does have multiple cores yeah :P
[13:15:29] <lericson> 6 of 'em, with hyperthreading
[13:15:34] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:16:04] <lericson> i'm thinking there may be some weird interaction with the later part that contends for the GIL
[13:16:16] <lericson> sample_valid_positions() in my case
[13:16:33] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:16:51] <lericson> but it can't really be
[13:17:28] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Remote host closed the connection)
[13:17:29] <lericson> dedupe_polylines() takes 42s TOTAL in single-threaded mode, it cannot reasonably take longer in multi-threaded scenarios
[13:17:47] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[13:18:25] <lericson> unless there is some lock contention
[13:18:33] <bjs> dre: what does module syntax have to do with that :P
[13:19:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:19:24] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[13:19:28] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 252 seconds)
[13:21:52] *** Joins: jonaskabrink (~jonaskabr@mue-88-130-56-206.dsl.tropolys.de)
[13:23:26] <dre> I'm trying to find a nice algo that doesn't involve doing a bunch of "try load(file) except:" ...
[13:24:16] <bjs> dre: what?
[13:24:22] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:24:23] <bjs> an algorithm to do what
[13:24:28] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:25:03] *** Quits: lethu (~lethu@user/lethu) (Quit: Leaving)
[13:25:18] <dre> sorry. look, I'm trying to write a function like "load_docstring_from('module.name.Class.SubClass.function.inner_function')" and it would return precisely that function's docstring.
[13:25:21] *** Joins: lethu (~lethu@user/lethu)
[13:25:55] <dre> without putting a big "is it a class? nooo, is it a function?? nooo... " switch in my code
[13:26:20] <dre> but i don't think there's a way to do that, I'll have to do it, and keep it readable
[13:26:34] <bjs> dre: inner_function sounds impossible
[13:26:36] <bjs> the rest sounds easy
[13:27:04] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[13:27:41] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[13:27:54] *** Joins: P1ro (~quassel@user/p1ro)
[13:28:11] <dre> no? recursively go into the function, if this is the "last" item then get that docstring, else keep trying to load whatever's next
[13:28:30] <bjs> dre: what is an "inner_function" exactly?
[13:28:58] <dre> def outer()\n\tdef inner()\n\t\tprint("me")
[13:29:14] <bjs> dre: and how exactly are you supposed to access "inner" from outside the function?
[13:29:20] <bjs> that sounds pretty much impossible...
[13:29:36] <dre> ast.load_module
[13:29:50] <bjs> Oh you want to read the source code? That's pretty ugly,
[13:30:11] <dre> ok thanks, what's next.
[13:30:15] <bjs> But I guess pretty much the only way
[13:30:39] <bjs> dre: I mean, everything -except- that last step is basically trivial to do,  wanting to get the docstring from the inner function is almost impossible and you'll have to parse the actual source file and search for it
[13:31:01] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:13] <dre> can't you just get the node from ast? I don't understand
[13:31:35] <dre> inner_function in outer.body
[13:31:41] <bjs> dre: you can, but you have to find it :P
[13:31:59] *** Joins: y04nn (~y04nn@193.32.127.238)
[13:32:14] *** Quits: y04nn (~y04nn@193.32.127.238) (Remote host closed the connection)
[13:33:10] *** Joins: cdown (~cdown@163.114.131.1)
[13:33:48] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:33:48] <coc0nut> hmm, ive done like maybe 50 training functions now :p and i still struggle to get overview of how it really works. is there anywhere this is explained in a good way?
[13:34:27] <pr100> how what really works?
[13:34:37] <coc0nut> functions...
[13:35:02] <coc0nut> theres quite many angles tho...
[13:35:13] <bjs> dre: importing and attribute lookup can get very hairy and lots of code out there does strange things.  nested functions are just a huge pain for many reasons, and are basically impossible to inspect from within the language and you pretty much *have* to do some ast walking
[13:35:28] <bjs> dre: everything except the nested functions is totally trivial https://bpa.st/RHOQ
[13:35:30] *** Quits: tspng (~tspng@2a02:168:a1a1:1:1cd0:b178:8c4f:1fe) (Remote host closed the connection)
[13:35:32] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[13:37:03] *** Quits: vimart (~vimart@85.255.232.67) (Quit: WeeChat 2.8)
[13:37:04] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 252 seconds)
[13:37:49] <dre> bjs, neat, thanks but that ties with jinsun_'s comment about importlib always running code :P -- so I'm doing ast first.
[13:37:56] *** Joins: todda7 (~torstein@7.red-88-0-5.dynamicip.rima-tde.net)
[13:38:11] <bjs> dre: if you want to support nested functions you can take that code and extend it so if the attr doesn't exist, you grab the source code, and inspect the ast and find the thing and see if there's a nested function
[13:38:27] <pr100> coc0nut: your request is kind of vague, can you give a specific example of something you have difficulty understanding?
[13:38:46] <bjs> dre: yes that is how import works,  and in the "real world" this is basically the only approach that will work.  Because a.b.c.d.e is just attribute lookup and importing modules can run arbitrary code
[13:39:04] *** Joins: upsala (~zcb@185.213.155.160)
[13:39:38] <bjs> dre: so if you do the ast way, you're gonna be re-implementing all of the import machinery to locate the file (although you can hook into the one that exists to make this slightly easier) and then import ast and basically "evaluate" the file to figure out where things are
[13:39:47] *** Joins: AutomatedTester (uid395371@selenium/developer/AutomatedTester)
[13:39:48] <pr100> coc0nut: I mean... you get what's happening with `def  foo(x): print (x)` and then `foo(42)`?
[13:40:37] <bjs> coc0nut: write more functions,  some things you only really "get" through experience -- once you "get" what's going on the explanations will make sense
[13:40:50] *** Joins: ub (~Thunderbi@178.115.54.19.wireless.dyn.drei.com)
[13:41:16] <coc0nut> more like the nature of the language. like right now im looking at a lesson about converting a list of integers to a list of floats. there is aloooot of ways a function can function... like finding even or odds has a specific way, so when its first learned, its easy to do it again.
[13:41:30] <lericson> i just love it when i change something and everything is slower
[13:41:50] <bjs> coc0nut: yes,  there are lots of ways to achieve the same goal usually :)
[13:43:16] *** Quits: todda7 (~torstein@7.red-88-0-5.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[13:43:20] *** Sadale_ is now known as Sadale
[13:44:31] <pr100> coc0nut: again this is pretty vague: "the nature of the language..."? I'm not sure how we can usefully address that - I'd recommend that you try with some more specific, concrete questions about things you don't understand.
[13:44:34] *** Quits: jmft2 (~jmft2@213.31.248.255) (Quit: This computer has gone to sleep)
[13:45:25] *** dbristow_ is now known as dbristow
[13:45:36] *** Quits: dre (~dre@2001:8003:c932:c301:34d2:f449:f8cf:6e39) (Remote host closed the connection)
[13:46:16] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[13:46:45] *** Quits: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr) (Quit: leaving)
[13:47:35] <coc0nut> well, ive just started, and thats the reason im pretty vague. im struggeling to know how to attack problems of making functions... so im really asking for where to get a overview or better sight on it to be more specific :)
[13:48:01] <coc0nut> reading art of war to learn python programming language... dont know if thats right.. lol
[13:48:21] *** xy is now known as icy
[13:48:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:48:49] <bjs> coc0nut: the actual "making functions" part is a bit of a red herring here,  the act of writing functions to do things is called "programming" :)
[13:48:56] *** Joins: lostpackets (~lostpacke@185.97.93.7)
[13:49:10] <bjs> coc0nut: probably there are better books than the art of war
[13:49:19] <coc0nut> i hope so :)
[13:49:43] *** Quits: ub (~Thunderbi@178.115.54.19.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[13:49:48] *** Joins: ub1 (~Thunderbi@91.141.77.30.wireless.dyn.drei.com)
[13:49:56] <bjs> coc0nut: are you looking for book references to read?  There are a couple in the /TOPIC (namely Think Python 2e  and Automate the Boring Stuff ) which are both sort of introductory texts
[13:50:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:50:19] *** ub1 is now known as ubert
[13:50:32] <pr100> yeah, I wouldn't focus too much on ancient Chinese philosophy if your goal is to learn to program
[13:51:12] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[13:51:12] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[13:51:31] <cdown> (not to mention that the art of war is literally a sales catalogue.)
[13:51:35] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[13:51:56] <summonner> coc0nut,  https://en.m.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3
[13:52:25] <summonner> it isn't a full-fledged "teach you how to program" programming book, but it will convey the concepts to you
[13:52:44] <summonner> It sounds like you're hung up on that part right now?
[13:52:50] <bjs> no single book can "teach you how to program" anyway, regardless of what the blurb might tell you
[13:53:01] *** Joins: P1ro (~quassel@user/p1ro)
[13:53:01] *** iflema_ is now known as iflema
[13:53:24] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[13:53:41] <summonner> this is true, even if you learn intro programming concepts, and program for a year, there are apprenctice level, journeyman level, master level books to review
[13:54:36] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[13:54:56] *** Joins: iflema (~ian@user/iflema)
[13:55:21] <pr100> ... and programming is a practical skill; it's not theoretical computer science. You mostly learn by doing - pick a simple thing to do and figure out how to implement it; then something slightly more tricky. Rinse; repeat...
[13:55:42] *** Quits: diplomatic_tyran (~diplomati@ec2-13-212-137-131.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[13:55:46] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[13:55:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:56:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:56:15] *** Joins: pycurious (~Adium@user/pycurious)
[13:56:33] <coc0nut> thank you summonner ! :)
[13:56:45] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:ac3a:1f28:437:f98b)
[13:56:49] <summonner> yw
[13:58:41] *** Quits: xiongxin (~quassel@119.123.101.32) (Ping timeout: 252 seconds)
[13:59:17] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:59:45] *** Joins: RedAero (~RedAero@20014C4E20578C002990996F18680467.dsl.pool.telekom.hu)
[14:00:32] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi)
[14:00:44] *** Quits: Tireos (~Tireos@91.223.118.131) (Quit: Leaving)
[14:01:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:02:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:02:08] *** Joins: diplomatic_tyran (~diplomati@ec2-13-212-137-131.ap-southeast-1.compute.amazonaws.com)
[14:02:31] *** Parts: diplomatic_tyran (~diplomati@ec2-13-212-137-131.ap-southeast-1.compute.amazonaws.com) ()
[14:02:53] *** Joins: diplomatic_tyran (~diplomati@ec2-13-212-137-131.ap-southeast-1.compute.amazonaws.com)
[14:03:07] *** Joins: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr)
[14:03:32] *** Quits: vm (~vm@user/ansible) (Quit: Client closed)
[14:04:59] *** Joins: peterandre (peterandre@2605:6400:c847:1524::4251)
[14:05:16] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:05:17] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[14:05:26] *** Joins: todda7 (~torstein@143.red-83-58-159.dynamicip.rima-tde.net)
[14:05:32] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:05:43] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:05:51] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Client closed)
[14:06:01] *** Joins: thiras (~thiras@user/thiras)
[14:06:06] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[14:06:14] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi)
[14:07:11] <lericson> bjs: the plot thickens
[14:07:25] <lericson> if i use concurrent.futures.ProcessPoolExecutor, i get the expected concurrency just fine
[14:07:44] <lericson> it seems to me that numba is using some library that, too, has a global lock
[14:08:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:08:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:08:52] *** Joins: mnemonic (~semeion@user/semeion)
[14:09:02] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:09:57] *** LordKalma_ is now known as LordKalma
[14:12:29] *** Joins: rendar (~rendar@user/rendar)
[14:15:47] *** Joins: alzgh (~alzgh@user/alzgh)
[14:17:11] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[14:18:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[14:18:55] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 252 seconds)
[14:19:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:19:57] *** Joins: BUSY (~BUSY@user/busy)
[14:20:00] *** Joins: oxniu (~oxniu@2409:8914:c08:f11e:d4e5:462a:903a:c833)
[14:20:35] *** Quits: lostpackets (~lostpacke@185.97.93.7) (Read error: Connection reset by peer)
[14:20:48] *** Celelibi_ is now known as Celelibi
[14:21:37] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[14:24:25] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[14:25:13] *** Joins: shad (~shad@user/shad)
[14:25:19] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:24dc:7e16:7bd2:c476) (Remote host closed the connection)
[14:25:29] *** Quits: oxniu (~oxniu@2409:8914:c08:f11e:d4e5:462a:903a:c833) (Read error: Connection reset by peer)
[14:28:52] *** BlessJah_ is now known as BlessJah
[14:28:53] *** Quits: gggp (~textual@111.63.14.119) (Ping timeout: 252 seconds)
[14:29:01] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5)
[14:29:06] *** Joins: aib (~marvin@159.146.54.106)
[14:29:16] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[14:29:17] *** Joins: gggp (~textual@60.10.194.45)
[14:30:07] <bjs> lericson: maybe it's worth making a cut down toy example that exhibits the same behaviour
[14:30:19] <bjs> maybe someone who knows about numba can actually explain what's going on then
[14:30:50] <aib> is there a way to raise an exception from an except block *without* chaining exceptions? right now, I get "<inner exception> during handling of another <outer exception>". I want to swallow the outer one, it's a glorified error code
[14:30:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:44] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:32:14] <bjs> aib: `raise ... from None`
[14:32:24] *** Joins: rany (~rany@user/rany)
[14:32:26] <nedbat_> aib: either `raise NewException from None`, or `raise`, depending on which you want to hide
[14:32:57] *** nedbat_ is now known as nedbat
[14:33:19] *** Joins: pycurious (~Adium@user/pycurious)
[14:33:26] *** dcaro is now known as dcaro_lunch
[14:33:34] <Zweimer> I have a class TestClass(ABC) and would like to define a variable with a getter only (which will contain a ui-tag for the class). If I do something like @property \n def id_word(self): return self._id, I could get and set the variable, right? What, if I only want to set it once per class before runtime?
[14:34:03] *** Quits: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr) (Quit: leaving)
[14:34:10] <bjs> Zweimer: well you can't do `self.id_word = ...` if you only have @property and not a .setter too
[14:34:16] <aib> bjs: nedbat: "from None"... excellent! thanks
[14:34:16] *** Joins: xiongxin (~quassel@113.116.35.63)
[14:34:30] <bjs> Zweimer: but you can read/write to self._id as much as you want
[14:34:47] *** Joins: mnemonic (~semeion@user/semeion)
[14:34:56] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[14:35:10] *** Quits: rsx (~dummy@ppp-188-174-153-249.dynamic.mnet-online.de) (Quit: rsx)
[14:35:14] <Zweimer> bjs, wait. Did I understand it incorrectly? @property is not generating a getter AND setter at the same time? Just a getter?
[14:35:37] <nedbat> Zweimer: you said "once per class" did you mean "once per object"?
[14:35:46] <nedbat> Zweimer: right: @property is only the getter
[14:35:47] <bjs> Zweimer: well it's not "generating" either, you have to write them.
[14:35:50] <Zweimer> No, once per class
[14:35:59] *** Joins: Ivii (~Ivyy@2001:a61:1329:3e01:5855:ad9a:9590:a14c)
[14:36:09] <bjs> Zweimer: your `return self._id` is the getter, you also have to write a `def` to implement a setter if you want a setter.
[14:36:13] <Zweimer> Yikes. I missunderstood this property thing then.
[14:36:27] *** Joins: mrwick (~mrwick@user/mrwick)
[14:36:52] <bjs> Zweimer: but why do you want a setter? Just make the property return a global variable no?
[14:37:13] <bjs> Zweimer: see https://docs.python.org/3/library/functions.html#property see the `class C:` example for how to use it
[14:37:19] *** CuriousErnestBri is now known as CuriousErnestBro
[14:37:44] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:37:46] *** Joins: Pickchea (~private@user/pickchea)
[14:38:33] *** Joins: pycurious (~Adium@user/pycurious)
[14:41:28] *** Quits: pycode (~pycode@2001:b07:5d28:551:b939:17d2:2f17:2669) (Ping timeout: 252 seconds)
[14:42:20] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Read error: Connection reset by peer)
[14:42:33] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:43:07] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:43:57] *** Joins: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr)
[14:44:30] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:24dc:7e16:7bd2:c476)
[14:46:14] *** Joins: greknod2 (~grek@120.88.171.98)
[14:46:40] *** Quits: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr) (Client Quit)
[14:47:07] *** Joins: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr)
[14:50:29] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Read error: Connection reset by peer)
[14:50:30] *** trench_ is now known as trench
[14:51:25] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[14:52:13] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:53:23] *** Joins: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi)
[14:53:34] *** Quits: jamwil (~jamwil@user/jamwil) (Remote host closed the connection)
[14:53:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[14:55:33] *** Joins: fikran (~fikran@user/fikran)
[14:56:54] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Read error: Connection reset by peer)
[14:57:52] <lericson> bjs: yeah i really should
[14:58:06] <lericson> problem is, i already spent too long just finding out how to get the expected speed-up..
[14:58:31] *** Quits: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi) (Quit: brylie)
[14:59:26] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:00:06] *** Joins: CombatVet_ (~c4@user/combatvet)
[15:00:33] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 276 seconds)
[15:00:45] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[15:00:54] *** CombatVet_ is now known as CombatVet
[15:00:56] *** Quits: jonaskabrink (~jonaskabr@mue-88-130-56-206.dsl.tropolys.de) (Quit: Client closed)
[15:00:58] *** Joins: jamwil (~jamwil@user/jamwil)
[15:03:37] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:03:39] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:06:33] *** Joins: mchlumsky0 (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[15:06:57] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[15:06:58] *** mchlumsky0 is now known as mchlumsky
[15:10:44] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[15:10:51] *** Joins: P1ro_ (~quassel@user/p1ro)
[15:11:23] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[15:12:44] *** Joins: Armen (~Armen@armen138.com)
[15:12:49] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[15:14:11] *** Joins: khrbt (~znc@user/khrbt)
[15:14:30] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:14:40] *** Joins: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi)
[15:14:47] *** Quits: RedAero (~RedAero@20014C4E20578C002990996F18680467.dsl.pool.telekom.hu) (Quit: Client closed)
[15:15:17] *** Joins: tspng (~tspng@2a02:168:a1a1:1:418a:d5c1:780b:96b8)
[15:15:52] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[15:19:45] *** waveform_ is now known as waveform
[15:21:20] *** Joins: stevea (~stevea@user/stevea)
[15:21:47] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[15:21:53] *** Quits: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi) (Quit: brylie)
[15:22:12] *** Joins: paul424 (~chatzilla@pfn101.internetdsl.tpnet.pl)
[15:22:16] *** Joins: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi)
[15:24:16] *** Quits: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi) (Client Quit)
[15:24:28] *** Joins: plastico (~plastico@neomutt/plastico)
[15:24:29] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[15:27:07] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[15:27:53] <no_gravity> Is there a good way to calculate user provided expression? At first I only need terms that look like this: "3+2+5+7". Aka sum up integers. But I might want to allow more complex terms later.
[15:28:40] <bjs> no_gravity: well, there's eval()
[15:28:59] <bjs> but that might not be a good idea for arbitrary user provided expressions (since eval accepts all of Python)
[15:29:21] *** Joins: nicktaylor (~nt@nickgrahamtaylor.plus.com)
[15:29:36] <no_gravity> bjs: Yeah, I need something totally safe for untrusted user input.
[15:29:52] <bjs> no_gravity: probably the easiest way to make a calculator for Python-looking expressions is to use `ast` to build a little walker (an ast.NodeVisitor)
[15:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:16] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:31:29] <no_gravity> bjs: I see. That might be a bit more complex then writing my own from string functions I think.
[15:31:38] <bjs> no_gravity: until you want brackets :)
[15:31:42] <bjs> and operator precedence
[15:32:17] <no_gravity> It could very well be that ([0-9]+\+)+ is the only kind of term I'll ever allow.
[15:32:43] <no_gravity> Let's see, how could that be implemented ...
[15:32:58] <canarts> no_gravity: i have an old gist here using ast for a simple calculator like that: https://gist.github.com/stranac/1555dd7e944592d58d73c5d3829544f3
[15:33:47] <paul424> Hello, hello I have found such teaching program for teenagers ; what do you think : https://pastebin.com/nmyVgKf3 The bad part it seems to teach "Simultaneous equation solving" very early , and afaik it requires the matrix calculus elements to solve ... so what do you think ?
[15:33:48] <infobob> https://bpaste.net/DJ7A (repasted for paul424)
[15:33:56] <no_gravity> canarts: Nice, let me check it ...
[15:34:17] <paul424> is pastebin.com so evil ?
[15:34:24] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[15:34:35] <no_gravity> canarts: Wow, pretty cool.
[15:34:42] *** Quits: aib (~marvin@159.146.54.106) (Quit: So long and thanks for all the fish.)
[15:35:29] *** Joins: y1n (~y1n@178.115.57.150.wireless.dyn.drei.com)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:35] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:ac3a:1f28:437:f98b) (Ping timeout: 252 seconds)
[15:36:42] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:39:30] <bjs> paul424: it depends what it actually means by that,  it might involve linear agebra it might not
[15:39:32] <bjs> algebra
[15:39:50] <bjs> no_gravity: yeah, ast.NodeVisitor is really powerful for these kind of things
[15:40:37] <paul424> bjs: anyway the simplest solution would be to compute the mysterious determiner for W_x W_y and W afair
[15:40:48] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[15:42:05] <bjs> paul424: given "Simultaneous equation solving" appears before "if" I'm assuming it's not doing linear algebra :)
[15:42:31] *** Quits: greknod2 (~grek@120.88.171.98) (Ping timeout: 252 seconds)
[15:42:31] *** Joins: greknod2 (~grek@120.88.171.98)
[15:43:08] <paul424> also there are some corner cases which ought to be checked with 'if elif else ' hmmm
[15:43:17] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:7ada:17a5:80cb:1ddc) (Ping timeout: 264 seconds)
[15:43:33] *** Quits: nicktaylor (~nt@nickgrahamtaylor.plus.com) (Quit: Leaving)
[15:43:34] <paul424> so this topic might be raised up later
[15:44:07] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[15:44:41] <bjs> paul424: I think you're reading too much into it,  I don't think the "simultaneous equation solving" part is really anything,  it sounds like "using Python as a calculator"
[15:45:00] <bjs> if it appears before teaching about if and loops and functions :)
[15:45:27] <paul424> yeah you are right :)
[15:45:53] <hexnewbie> OK. That's funny. Someone commented this week about the list comprehension scoping changes when used in class scope when converting from py2 to py3: Turns out, not only I have code suffering from that problem, I explicitly replaced a Python 2 generator expression with a list comprehension to fix it in Python 2, not cognizant that would fail in 3 *and* is basically using deprecated behaviour as a f
[15:46:10] <hexnewbie> ix.
[15:46:11] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 246 seconds)
[15:46:42] <bjs> hexnewbie: replacing a py2 generator expression with a py3 list comprehension doesn't sound like it should fail because of scopes
[15:47:24] <hexnewbie> My (censored) Python 2 code is: x = (1,2,3,4,5); y = (3, 4); z = tuple(v for v in x if v not in y)
[15:47:31] <hexnewbie> Errr
[15:47:44] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[15:47:53] *** Joins: han-solo (~hanish@user/han-solo)
[15:48:06] <hexnewbie> That would fail in Python 2 as well. So I had rewritten it as: z = tuple([v for v in x if v not in y]), which now fails in Python 3 as well, when used in the body of a class
[15:49:02] <bjs> hexnewbie: why would that fail in python 2?
[15:49:08] <hexnewbie> I guess the fixed version would be: z = tuple(OrderedDict.fromkeys(x).keys() - OrderedDict.fromkeys(y).keys())
[15:49:10] *** Joins: dulanic (~dulanic@47.187.144.163)
[15:50:11] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 250 seconds)
[15:50:56] <bjs> hexnewbie: your comments aren't really making a coherent story, the things you say "fail in Python 2" seem to have no reason to fail in Python 2 and now you introduce OrderedDict from nowhere :P
[15:51:37] *** CrunchyChewie_ is now known as CrunchyChewie
[15:52:15] <hexnewbie> bjs: https://bpa.st/YZHQ
[15:52:51] <bjs> hexnewbie: ah okay,  yes
[15:52:51] <no_gravity> canarts: I have tried to throw some code at it and would have expected it to fail, but it only returns none? https://www.online-python.com/pK8JGg2LTm
[15:53:05] <bjs> no_gravity: that's because canarts didn't write any code to make it fail if it got an unknown node
[15:53:25] <bjs> no_gravity: you can add `def generic_visit(self, n): raise ValueError("unknown node")` or something
[15:53:46] <bjs> (maybe actually `ValueError(f"unknown node {n}")` so you can see what the node was...)
[15:53:47] <no_gravity> bjs: bjs: I am surprised line 14 does not error out.
[15:53:50] *** Joins: raph_ael (~raphael@user/raph-ael/x-7806685)
[15:54:04] <bjs> no_gravity: why would line 14 error out?
[15:54:50] <no_gravity> bjs: It accesses the AST_OP_TO_OPERATOR array with the type of the node it processes, right?
[15:55:03] <bjs> no_gravity: yeah, but line 14 doesn't even get executed with your code does it?
[15:55:06] <bjs> there's no binary ops to visit
[15:55:07] <no_gravity> Thsi is line 14: op = AST_OP_TO_OPERATOR[type(node.op)]
[15:55:15] <no_gravity> What is a binary op?
[15:55:33] <bjs> no_gravity: an operator with 2 arguments,  Like + and * and - and /
[15:55:51] <hexnewbie> bjs: Point is, this week I argued to someone here that this is a pretty weird behaviour to rely on and in need in class scope. Then today I find it in my own code that I need to yet update to Python3 .
[15:55:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:56:13] <bjs> hexnewbie: well you've not invalidated your own argument, you just wrote weird code also :P
[15:56:50] <no_gravity> bjs: Thinking about it, I don't even understand line 26: return Calculator().visit(tree.body[0].value)
[15:57:22] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[15:57:26] <no_gravity> bjs: There is no visit() function defined in the Calculator class. So how can it be called?
[15:57:27] *** Joins: mnemonic (~semeion@user/semeion)
[15:57:35] <bjs> no_gravity: the NodeVisitor class defines it
[15:57:57] <bjs> NodeVisitor's visit() class looks at the node and then calls the correct visit_NodeName() method (if it exists)
[15:58:09] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:58:09] <no_gravity> bjs: Oh! So class A(B) means "class A extends B"?
[15:58:13] *** Joins: pycurious (~Adium@user/pycurious)
[15:58:14] <bjs> no_gravity: yes...
[15:58:21] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[15:58:21] <no_gravity> Ok
[15:58:33] <no_gravity> My first contact with inheritance in Python.
[15:59:27] <no_gravity> bjs: And if visit_NodeNAme() does not exist? It just does nothing?
[15:59:52] <bjs> no_gravity: well the visit will return None in that case
[15:59:59] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[16:00:13] *** Quits: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com) (Quit: Leaving)
[16:00:43] <bjs> (or well actually it calls self.generic_visit() in that case, which is why my above code works)
[16:00:57] <bjs> no_gravity: have you actually read the NodeVisitor docs? I'm sure the ast docs explain all of this :P
[16:00:57] <bjs> https://docs.python.org/3/library/ast.html#ast.NodeVisitor
[16:01:00] <no_gravity> bjs: So the NodeVisitor will never execute code?
[16:01:08] <no_gravity> Then this seems pretty safe.
[16:01:14] *** Joins: nicktaylor (~nt@nickgrahamtaylor.plus.com)
[16:01:38] <bjs> no_gravity: no it doesn't execute code, it just parses it and lets you walk the ast
[16:01:43] <hexnewbie> bjs: Indeed. Good news, I have OrderedSet implementation here, so tuple(OrderedSet(x) - OrderedSet(y)) is slightly clearer than the ordered dictionary thing
[16:01:44] <no_gravity> bjs: Nice.
[16:01:57] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[16:02:14] <no_gravity> This is a pretty nice solution then.
[16:02:57] <no_gravity> The class "Calculator" could probably rather be named "myNodeVisitor" or something.
[16:02:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[16:03:20] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[16:03:27] *** Quits: lazerlapin (~lazerlapi@ad001129.dynamic.ppp.asahi-net.or.jp) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:03:50] *** portalrat_ is now known as portalrat
[16:05:12] *** Quits: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:05:23] *** Joins: pycode (~pycode@2001:b07:5d28:551:f257:7b13:dc7d:dc6c)
[16:06:36] *** Joins: vladoski (~vladoski@2001:b07:add:d406:3c5e:291b:841d:1aa6)
[16:06:39] <bjs> no_gravity: uh, what's wrong with calculator?
[16:06:42] *** Joins: mrwick (~mrwick@user/mrwick)
[16:07:27] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[16:08:31] <no_gravity> bjs: I would put the whole code canarts provided into a module called "calculator". So calculator.calc('7+3') will return 10. Having a class "Calculator" inside a module "calculator" that is an extension of ast.nodevisitor does not seem fitting to me.
[16:09:05] <bjs> no_gravity: okay, but "myNodeVisitor" is a terrible name for a class :P
[16:09:14] <no_gravity> bjs: How would you name it?
[16:09:33] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Quit: Leaving)
[16:09:56] <bjs> no_gravity: well if you really wanted to then CalculatorNodeVisitor or _Calculator or something
[16:10:01] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[16:10:08] <no_gravity> bjs: How about NV?
[16:10:10] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:10:30] <bjs> just give it a sensible name that actually says what it is, NV is worse than "myNodeVisitor"
[16:10:31] <bjs> whatever
[16:10:41] <no_gravity> bjsNodeVisitor :)
[16:10:56] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:11:18] <bjs> the fact it's a node visitor isn't so interesting, what's important is that it's the thing that does the evaluation/calculations;  so presumably that should be part of the name
[16:11:49] <no_gravity> In my optinion the calc() function does that. And that one is outside of the class.
[16:12:03] <no_gravity> It uses the extended nodevisitor as kind of a helper.
[16:12:15] <debnet> Hello people, I need your help. I'm seeking to extract syllables/sound from a word in Python. I already tried hyphenisation and IPA translation but it's not what I need. Do you have any clue?
[16:12:33] *** Joins: elena_re (~elena@31.173.85.129)
[16:12:43] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Ping timeout: 250 seconds)
[16:12:48] <bjs> no_gravity: if you delete calc() you can still do calculations, if you delete the nodevisitor class you can't do calculations anymore
[16:12:50] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[16:13:01] <bjs> so it's pretty clear which of the two was actually doing the calculations :P
[16:13:27] <no_gravity> bjs: That is like calling the engine of a car "car" because without the steering wheel it is still a driving car but without the engine it is not.
[16:13:47] <no_gravity> I would neither call the steering wheel nor the engine "car".
[16:14:02] <bjs> no_gravity: what's an engine? Don't you mean a myMetalBox
[16:14:03] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[16:14:09] <no_gravity> bjs: myEngine
[16:14:31] <bjs> no_gravity: just call it an Engine (or call it an Evaulator or Calculator) that's clearly what the NodeVisitor is.  myNodeVisitor and NV are terrible names
[16:14:39] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[16:15:23] <bjs> and in general the my* prefix doesn't convey any information so it's a little redundant,  that's useful in languages without namespacing
[16:15:40] <no_gravity> I think I will call it NV
[16:16:06] <bjs> no_gravity: seriously, call it CalculatorNodeVisitor or CalcEvaulator or *something* that conveys what it actually does
[16:16:09] <paul424> Suppuse I do add python only to the console to the game I help with : Opendungeons, what benefits I can have ... also would the functions I have already in console be difficult to pin up into python interpreter .....
[16:17:02] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[16:17:26] <no_gravity> bjs: The module is 26 lines. And the string "NV" is used exactly twice. I think it is very readable with the name NV. Also because it is obvious from the first use: class NV(ast.NodeVisitor):
[16:18:07] <no_gravity> bjs: Similar to how canarts uses "op" for the variable that holds the operator.
[16:18:17] <no_gravity> Some variables can be short.
[16:18:20] <bjs> no it's not similar :l
[16:18:30] <bjs> but whatever
[16:19:05] *** Joins: shad (~shad@user/shad)
[16:19:50] <paul424> or my question is more related to c++ ?
[16:20:22] <xheimlich> debnet: try either nltk (easier to get running) or spacy.
[16:20:30] <no_gravity> paul424: I don't understand your question.
[16:20:39] *** Joins: ph88 (~ph88@ip5f5af6fd.dynamic.kabel-deutschland.de)
[16:20:44] <paul424> naah newbie ;)
[16:21:01] <paul424> do you play games ?
[16:21:14] <no_gravity> paul424: I play one game.
[16:21:21] <paul424> dose it have a console ?
[16:21:26] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[16:21:32] <paul424> terminal for example for cheats ...
[16:21:33] <xheimlich> google has this https://stackoverflow.com/questions/5876040/number-of-syllables-for-words-in-a-text
[16:21:36] <xheimlich> using nltk.
[16:21:38] <no_gravity> paul424: Nope
[16:21:40] <paul424> or for debuging
[16:21:42] <paul424> :(
[16:21:49] <Andrew> nltk? Sounds familiar, that natural language processing library
[16:21:55] <paul424> but mine has a console it starts with '~'
[16:22:01] <no_gravity> Well, I gotta go.
[16:22:08] <no_gravity> Thanks and cu everybody!
[16:22:09] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[16:22:10] <paul424> you can pass there diffrent options
[16:22:13] <paul424> cu
[16:22:30] *** Joins: Konsgn (~Konsgnx3@66-109-34-138.static.firstlight.net)
[16:22:31] <Andrew> paul424: Can you restate your problem?
[16:23:03] <Konsgn> hey all, is there a good way to convert a python float value to a Ieee-754 float32 byte array?
[16:23:18] <paul424> and in this console I have already some functions / commands exactly , which modify the game state
[16:23:20] <Konsgn> I tried writing my own, but it borked on really small values
[16:23:32] <hexnewbie> Konsgn: The struct module, perhaps?
[16:23:45] <paul424> this console is not a programming language it doesn't do evaluation and other stuff
[16:23:53] <paul424> console commands*
[16:23:56] <Konsgn> will take a look. already using it to re-shuffle data, thanks
[16:24:19] <paul424> so I would like to have python in that game console , andrew , is that clear ? :)
[16:24:59] <Andrew> What console?
[16:25:03] <paul424> game console
[16:25:14] *** Joins: jcbsv (~jcbsv@185.247.236.137)
[16:25:29] <Andrew> What game console? Where can I find information about it? (I can't really help without more information, "game console" is too generic)
[16:25:34] <paul424> in the game Opendungeons ...
[16:25:49] <Andrew> I don't really understand why you want python in it
[16:25:55] *** Quits: canarts (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:26:13] <paul424> hmm  oki .. maybe it's too ambitious goal
[16:26:25] <Andrew> I mean, why would you want to do that?
[16:26:33] <Andrew> You could run a python interpreter on your normal device?
[16:27:24] <paul424> for example I could have scripts and extent the commands without recompliling the whole project ( in c++ ) \
[16:27:26] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:27:49] <Andrew> Hmm... this reminds me of the Minetest Lua API
[16:27:59] <Andrew> Minetest is a game engine written in C++, but all the mods and games and stuff is in lua
[16:28:07] <Konsgn> son of a b, that was too easy "struct.pack('f', thefloat)"
[16:28:17] <paul424> aha good to know ... blb, I really need to go for a bus sorry ....
[16:28:28] <paul424> andrew++
[16:28:28] <Konsgn> Thanks hexnewbie!
[16:28:48] *** Quits: paul424 (~chatzilla@pfn101.internetdsl.tpnet.pl) (Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805])
[16:28:50] <Andrew> Hmm, ig bye?
[16:29:48] *** Joins: zepolen (~zepolen@ppp-94-66-223-73.home.otenet.gr)
[16:29:51] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[16:30:55] *** Quits: vladoski (~vladoski@2001:b07:add:d406:3c5e:291b:841d:1aa6) (Ping timeout: 252 seconds)
[16:30:59] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:24dc:7e16:7bd2:c476) (Quit: Leaving)
[16:32:02] <xheimlich> is there any reason that Vec<Vec<f64>> should be an invalid type? A list of lists, we call it in Python.
[16:32:14] <xheimlich> damn, wrong channel.
[16:32:27] <andi_> xheimlich: looks like rust ;)
[16:32:31] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[16:32:51] <andi_> is there a neat way to skip sub-dirs by using .rglob() to find all fileS?
[16:33:20] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[16:34:02] *** Joins: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[16:35:17] *** Joins: elkclone (~elkclone@user/elkclone)
[16:38:06] <jinsun> use .glob instead of .rglob?
[16:38:15] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:38:39] *** phryk_ is now known as phryk
[16:38:49] *** Joins: pycurious (~Adium@user/pycurious)
[16:39:10] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[16:40:09] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:40:18] *** Joins: zebrag (~chris@user/zebrag)
[16:41:22] *** Quits: y1n (~y1n@178.115.57.150.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[16:42:13] <andi_> so if i want all *.csv files in root/ and skip root/ref/ i can do .glob('[!ref]/*.csv')
[16:43:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[16:44:26] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[16:44:45] <jinsun> oh you want to skip only one subfolder, does that pattern actually work?
[16:44:52] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[16:45:08] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[16:45:09] <jinsun> I would have done .rglob and and then just skip that subdir with a if condition in the code
[16:45:52] *** Joins: srhm (~srhm@user/srhm)
[16:45:55] *** Joins: elkclone (~elkclone@user/elkclone)
[16:46:19] *** Quits: zepolen (~zepolen@ppp-94-66-223-73.home.otenet.gr) (Ping timeout: 252 seconds)
[16:46:40] *** Joins: kosh (~kosh@user/kosh)
[16:47:25] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[16:47:31] *** Joins: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085)
[16:48:58] *** Joins: shad (~shad@user/shad)
[16:50:15] *** Joins: zepolen (~zepolen@ppp-94-66-223-73.home.otenet.gr)
[16:52:01] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[16:52:11] <Zweimer> I am trying to add an Icon to a tabWidget: QtGui.QIcon("icon.png"). Hovering the filename with my mouse makes the icon in pycharm appear (as a mouse over) but I cannot see it in my program. I guess the path is not correctly set. How can I do it properly? (the icon is within the folder of the package)
[16:53:24] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[16:53:35] <ApostleInTriumph> hello i'm able to install this package for python 3.7. http://imagine.enpc.fr/~langloip/data/^Cmesh2-0.2.1-cp37-cp37m-linux_x86_64.whl how do I port it for python 3.8 too?
[16:53:36] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:c9c4:251e:1e89:6807)
[16:54:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:55:14] <ApostleInTriumph> sorry correct link :http://imagine.enpc.fr/~langloip/data/pymesh2-0.2.1-cp37-cp37m-linux_x86_64.whl
[16:56:13] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[16:56:38] <jinsun> do you have the source code instead of just the wheel?
[16:56:48] <ApostleInTriumph> jinsun unfortunately no
[16:57:16] <ApostleInTriumph> I've some information (from terminal) while installing it on python3.7
[16:57:21] <ApostleInTriumph> is that helpful?
[16:57:25] *** Joins: paul424 (~tom@apn-37-7-114-31.dynamic.gprs.plus.pl)
[16:57:57] <paul424> Andrew, I'm back so where we ? you said something about minecraft and lua
[16:58:58] *** Quits: zepolen (~zepolen@ppp-94-66-223-73.home.otenet.gr) (Ping timeout: 252 seconds)
[16:59:14] <ApostleInTriumph> jinsun https://github.com/PyMesh/PyMesh/releases
[16:59:22] *** Joins: LiftLeft (~LiftLeft@154.21.23.29)
[16:59:52] <jinsun> ApostleInTriumph: okay good, so there is source code available
[17:00:17] *** erry_ is now known as erry
[17:00:30] <ApostleInTriumph> jinsun so clone and pip install -e . ?
[17:01:28] *** Joins: han-solo (~hanish@user/han-solo)
[17:01:39] <jinsun> ApostleInTriumph: they have some custom build insttruction here https://github.com/PyMesh/PyMesh#build
[17:02:01] <jinsun> probably best to follow that
[17:02:05] <ApostleInTriumph> yes i believe the wheel was supposed to alleviate this?
[17:02:27] *** Joins: driib (~driib@185.195.233.167)
[17:02:48] <jinsun> yes but C extension wheels have to be compiled separately for each version of python
[17:02:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:02:58] <jinsun> and they did only for 3.6 and 3.7
[17:04:07] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:04:53] *** Joins: fikran (~fikran@user/fikran)
[17:06:22] *** Quits: kib (~kib@user/kib) (Ping timeout: 268 seconds)
[17:07:10] *** Joins: pycurious (~Adium@user/pycurious)
[17:08:04] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 250 seconds)
[17:08:08] *** Joins: kib (~kib@user/kib)
[17:08:49] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[17:10:03] *** Joins: Vonter (~Vonter@user/vonter)
[17:10:54] *** Joins: softwarewolf (~software@user/softwarewolf)
[17:11:37] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[17:12:53] <Andrew> paul424: I mean that there are games that have a Lua API (Minetest, not Minecraft) ... It would be hard to implement a python or lua api if the game doesn't support it
[17:13:22] *** Joins: pycurious (~Adium@user/pycurious)
[17:14:00] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:14:22] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[17:14:28] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:14:28] *** Quits: mnemonic (~semeion@user/semeion) (Ping timeout: 252 seconds)
[17:15:15] *** softwarewolf is now known as softwherewolf
[17:16:09] <paul424> Andrew, doesn't the boost provide some python support , especially the interpeter ?
[17:17:08] <SnoopJ> paul424, it allows you to provide bindings for software you are building. It doesn't give you any ability to do something new to software that's already been built.
[17:17:46] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[17:19:04] *** Quits: dthpulse_ (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:19:20] <Andrew> paul424: What exactly are you trying to do with python interpretation in a game?
[17:19:44] *** dcaro_lunch is now known as dcaro
[17:21:04] *** Joins: dthpulse (~quassel@podciarou.sk)
[17:21:31] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Quit: upekkha)
[17:21:42] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[17:21:48] <SnoopJ> Andrew, it sounds like they want a 'proper' programming language available in this console, and Python is the one they'd prefer
[17:22:06] <paul424> paul424, I want to get all pythonic spells PLUS https://github.com/OpenDungeons/OpenDungeons/blob/c180ed1864eab5fbe847d1dd5c5c936c4e45444e/source/modes/ConsoleCommands.cpp#L517
[17:22:09] *** Joins: smvg (~smvg@85.218.163.88)
[17:22:38] <paul424> those commands should be invoked when they are called via interpreter. ..
[17:23:00] <Andrew> SnoopJ: I understand that they want "python integration" in the game in the form of a console? Hmm... Nice idea
[17:24:14] <paul424> Andrew, yeap :D
[17:24:41] <paul424> Andrew, look at the link
[17:24:46] *** Quits: mactron (~mactron@apn-123-214-101-gprs.simobil.net) (Ping timeout: 252 seconds)
[17:24:54] <Andrew> I'll do that later, a bit busy now, sry
[17:24:57] *** lorenzosu_ is now known as lorenzosu
[17:25:10] <paul424> so to all : those commands should be invoked via python interpreter
[17:26:38] <Soni> okay, how would we go about adding __raise__ to context managers?
[17:26:53] <bjs> Soni: what is __raise__ ?
[17:26:55] <SnoopJ> paul424, since this is a project you can modify, you could use Boost::Python for this, sure.
[17:27:09] <Soni> bjs: every "raise" inside an "with" becomes a __raise__
[17:27:42] <bjs> Soni: and this would be different to __exit__ ?
[17:27:44] *** Quits: smvg (~smvg@85.218.163.88) (Remote host closed the connection)
[17:28:18] <Soni> bjs: english doesn't have words to distinguish lexically inside an "with" from contexually inside an "with"
[17:28:33] <bjs> Well, it has the word "lexically" okay
[17:28:40] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:2810:4482:4442:ac6b)
[17:28:50] <bjs> so literally, `raise` statements within the `with` block would ... do something special?
[17:28:55] <Soni> yeah
[17:29:08] <Soni> they'd call __raise__, which by default calls __exit__
[17:29:20] <SnoopJ> paul424, what you're after would be "embedding" a Python interpreter in this game engine. The docs about that in Boost::Python live here: https://www.boost.org/doc/libs/1_77_0/libs/python/doc/html/reference/embedding.html
[17:29:25] <bjs> Soni: Hmm, i assume you don't quite actually mean what you say
[17:29:28] <bjs> but I see what you're getting at
[17:29:36] <SnoopJ> It might also be helpful to read the docs about embedding in general using the Python C-API: https://docs.python.org/3/extending/embedding.html
[17:29:45] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:29:52] <bjs> Soni: and you want to implement a proof of concept?
[17:30:01] <SnoopJ> (but it's generally nice when a tool can talk to the C-API for you, it can be pretty complicated to use)
[17:30:07] <paul424> SnoopJ, So how those commands could  be invoked via python interpreter
[17:30:22] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:30:24] <SnoopJ> paul424, have you read the links that I just shared?
[17:30:40] <paul424> I;m reading
[17:30:48] *** Joins: csgeek (~textual@2600:1700:4f32:c010:f41e:3ece:9fce:49ee)
[17:30:52] <Soni> bjs: point being this lets you do `def foo(): with exceptions(ValueError): int("false")` and make it raise RuntimeError from the ValueError, but `def foo(): with exceptions(ValueError): raise ValueError` raises ValueError directly
[17:31:01] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[17:31:06] <SnoopJ> paul424, the second one is probably more helpful to your question.
[17:31:07] *** Quits: Ivii (~Ivyy@2001:a61:1329:3e01:5855:ad9a:9590:a14c) (Quit: Leaving)
[17:31:09] *** Joins: ivan_ (~Ivyy@2001:a61:1329:3e01:5855:ad9a:9590:a14c)
[17:31:15] *** Quits: micronnn (~micronn@user/micronn) (Quit: .)
[17:31:22] <SnoopJ> But the first one is useful to know about if you want to do this with Boost (and since OpenDungeons appears to already be using it, that's probably a good idea)
[17:31:33] *** Joins: micronn (~micronn@user/micronn)
[17:31:43] <Soni> bjs: (it does get exciting when you start to nest the context managers but w/e)
[17:31:51] <paul424> SnoopJ, oki many thanks as usaully to all , and especially you , SnoopJ :D
[17:32:06] <bjs> Soni: you could write a proof-of-concept "exceptions" context-manager today, with a little stack inspection
[17:32:08] <csgeek> hi all.  I'm not sure if there is a better place to ask this but I'm working with FastAPI and trying to figure out how to get more hierarchiecal settings loaded into the app.  So far I have ENV ==> Settings Object.  Can't find anything that loads a yaml file for example or allows say arrays /dict or other structs to be loaded in.
[17:32:15] <Soni> bjs: you can't
[17:32:20] <bjs> Soni: why can't you?
[17:32:42] <SnoopJ> paul424, probably what you're asking about doing amounts to replacing the game's console with a Python REPL. It might also be helpful to look at how some other applications have done this. I don't know any games that do it, but GIMP's Script-Fu interface does it.
[17:32:45] <Soni> bjs: 1 sec cooking up the example use-case (unit test)
[17:32:53] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[17:36:46] *** Joins: koziad (~koz@user/koziad/x-1285628)
[17:36:53] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[17:37:07] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:37:13] <Soni> bjs: https://bpa.st/KJ3A
[17:38:39] <bjs> Soni: why can't you write a exceptions that does some stack inspection to make a proof of concept?
[17:38:56] *** Quits: tspng (~tspng@2a02:168:a1a1:1:418a:d5c1:780b:96b8) (Remote host closed the connection)
[17:39:05] <Soni> bjs: because it can't identify bare "raise" like this
[17:39:27] <Soni> or even "raise e" where e is an exception from another stack context
[17:39:29] *** Joins: mei (~mei@user/mei)
[17:39:36] *** Quits: paul424 (~tom@apn-37-7-114-31.dynamic.gprs.plus.pl) (Quit: Leaving)
[17:39:47] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[17:39:53] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[17:40:45] <bjs> Soni: I see
[17:41:09] <bjs> So this `raise` doesn't get turned into a runtime error because?
[17:42:33] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:42:41] <Soni> bjs: because it would call __raise__ instead of __exit__, and the exceptions.__raise__ would allow anything to be thrown whereas exceptions.__exit__ would wrap the exceptions passed as arguments to the exceptions instantiation into RuntimeError
[17:43:36] <Soni> 99.9999995% of the time we do mean what we say
[17:44:07] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6844-6dda-c97d-34cb.res6.spectrum.com)
[17:45:22] <Soni> this wouldn't be the first time we implement a feature in a language, proof of concept or otherwise
[17:45:31] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[17:46:06] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[17:46:10] *** Joins: mnemonic (~semeion@user/semeion)
[17:50:07] <anddam> howdy, how does this make sense?   libshiboken: Overflow: Value 0 exceeds limits of type [signed] "int" (4bytes).
[17:50:21] <anddam> I figure any signed int conversion would be able to host 0
[17:50:26] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:50:33] <anddam> this happens while using a Qt widget
[17:51:53] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:52:17] <pr100> csgeek, fastapi is already bundled with pydantic, you can do complex settings data with appropriate definitions - see https://pydantic-docs.helpmanual.io/usage/settings/
[17:53:27] <bjs> Soni: what you mean is that it would propagate up like a normal exception, but be 'tagged' with where it was raised
[17:53:40] <bjs> and then only ones tagged with that with would call __raise__? or would all exceptions call __raise__ ?
[17:53:44] *** comruminoAlt is now known as comrumino
[17:53:56] <Soni> bjs: no
[17:54:03] <bjs> Soni: no to which
[17:54:29] *** Joins: akk (~akk@75.161.146.115)
[17:54:40] *** Gamah_ is now known as gamah
[17:54:41] <Soni> bjs: we mean `raise` lexically inside `with` would call `__raise__`, but exception handling would otherwise proceed normally
[17:54:47] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[17:54:54] <bjs> Soni: you mean it *always* calls __raise__?
[17:55:02] <Soni> bjs: yes
[17:55:05] <bjs> I'm confused, what do you mean "otherwise"?
[17:55:24] <bjs> Soni: so `try: raise ValueError(...) except ValueError: pass` would still call __raise__ ?
[17:55:24] *** Joins: Vonter (~Vonter@user/vonter)
[17:55:30] <Soni> bjs: because exceptions that propagate up to `with`, like those from deeper function calls, call `__exit__`
[17:55:50] <Soni> bjs: well no, that one gets swallowed by the except
[17:55:57] <bjs> Soni: so they don't always call __raise__ okay
[17:56:58] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[17:57:06] <Soni> bjs: the point is that the literal token `raise` is special, not the exception
[17:58:42] <bjs> Soni: okay
[17:59:33] *** Joins: tspng (~tspng@2a02:168:a1a1:1:a955:c6ee:a3e5:9fc6)
[17:59:46] <bjs> Usually a proof-of-concept for something like this would be your own branch of CPython,  or a hacky version of exceptions() that inspected the stack and/or ast
[17:59:50] <SnoopJ> Soni, why is changing the language necessary for this at all? https://bpa.st/HC2Q
[18:00:01] *** Quits: todda7 (~torstein@143.red-83-58-159.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[18:00:59] <bjs> SnoopJ: I think Soni hasn't explained very well,  I think they want exceptions from deeper in the stack to be handled differently to exceptions that are explicitly `raise`d within the block
[18:01:06] <Dev0n> hey, if you a workload of making http requests and db calls (sqlachmy), would you be safe to run these tasks in a gevent type loop and allocate a concurrency of 500 per spu?
[18:01:08] <Dev0n> cpu*
[18:01:18] <bjs> with some subtlety for nested managers and re-raising
[18:01:21] <Soni> bjs: that is what we explained, tho
[18:01:33] <bjs> Soni: not very well
[18:01:36] <bjs> but I think I understand now
[18:02:01] <SnoopJ> bjs, why does that necessitate changes at the language level, though? Or is that what you're asking, too? Seems to me you could introspect that, too, just with more machinery.
[18:02:10] <Soni> SnoopJ: look at the test case
[18:02:10] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[18:02:16] *** Joins: pro_z_ (~pro_z@37.214.79.2)
[18:02:25] <Soni> SnoopJ: https://bpa.st/KJ3A
[18:02:53] <SnoopJ> Soni, why does that necessitate changes at the language level, though? Or is that what you're asking, too? Seems to me you could introspect that, too, just with more machinery.
[18:03:00] <bjs> SnoopJ: Soni wants to know where the top-most `raise` was that lead to the exception,  which is typically not information that is on the exception and/or traceback
[18:03:15] <bjs> e.g. for `except: raise` <- this raise doesn't appear in the traceback.
[18:03:17] <Soni> SnoopJ: have you tried it? the requirement is obvious once you actually try it
[18:04:13] <Soni> please actually try it
[18:04:31] <SnoopJ> I think I'll abstain from discussing it further, actually.
[18:04:53] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:05:07] *** Quits: pro_z (~pro_z@37.214.58.182) (Ping timeout: 240 seconds)
[18:05:53] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi)
[18:08:33] <Soni> if you can't understand a problem from one angle (english words), try a different angle (trying to make a given test case pass)
[18:08:47] <Soni> don't give up
[18:11:25] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[18:11:56] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[18:12:01] <SnoopJ> I tire easily when my clarifying questions are met with "it's obvious," and I have reached that point. Best of luck with the problem, though, it does seem interesting.
[18:12:06] <Soni> (and yeah, trying to make it work is meant to be frustrating - because it's impossible! but we can't show ppl that it's impossible, we need ppl to try it for themselves, so they can figure out that it's impossible on their own terms.)
[18:12:08] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:12:08] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Killed (NickServ (GHOST command used by Seto_Kaiba)))
[18:12:12] *** Seto_Kaiba is now known as Hunterkll
[18:12:53] <Soni> SnoopJ: we shall preface that "it's obvious" with "after a week of working on the problem"
[18:13:06] <Soni> it's not immediately obvious (we never said that)
[18:13:08] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi)
[18:13:23] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:13:30] <Soni> we again encourage you to try it
[18:13:34] <SnoopJ> noted
[18:13:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:13:48] *** Joins: Pickchea (~private@user/pickchea)
[18:14:09] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[18:14:28] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:17:30] *** Joins: shad (~shad@user/shad)
[18:17:48] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:19:16] *** Joins: tobybl_ (~tobybl@31.111.35.255)
[18:19:25] *** Joins: grooverman (~grooverma@177.189.91.225)
[18:19:49] *** Joins: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk)
[18:20:02] <bjs> Soni: I think I understand the problem now,  but it doesn't feel very well motivated.  I'm sure I've run into these cases before but I can't recall them
[18:20:13] <bjs> Does the stdlib have any examples where this causes problems?
[18:20:47] <Soni> bjs: it's not a matter of "where this causes problems" but of "what this would enable ppl to do"
[18:20:52] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[18:21:14] <Soni> for almost all context managers, __raise__ = __exit__ is fine
[18:21:37] *** dcaro is now known as dcaro_away
[18:22:05] *** Quits: tobybl (~tobybl@31.111.35.255) (Ping timeout: 252 seconds)
[18:23:58] <Soni> (for all existing context managers, __raise__ = __exit__ is fine)
[18:24:37] *** Quits: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:24:53] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:24:58] *** Joins: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085)
[18:25:19] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:c9c4:251e:1e89:6807) (Ping timeout: 252 seconds)
[18:28:01] <ApostleInTriumph> okay i giveup jinsun . after 2hrs I couldn't build the Pymesh2 library
[18:28:37] *** Joins: semeion (~semeion@user/semeion)
[18:28:37] *** mnemonic is now known as Guest608
[18:28:51] <ApostleInTriumph> is there anyway at all i can port the whl across python versions?
[18:30:21] <SnoopJ> ApostleInTriumph, not really. It's not impossible, but doing surgery on the library inside of it will certainly be more work than resolving your build error for PyMesh, which may be topical here.
[18:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:31:28] *** Quits: Guest608 (~semeion@user/semeion) (Ping timeout: 252 seconds)
[18:32:06] *** Joins: zeden (~zeden@user/zeden)
[18:32:13] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:32:53] *** Joins: srhm (~srhm@user/srhm)
[18:33:30] <ouemt> when you use a for loop with concurrent.futures.as_completed(), does that code run concurrently, or serially?
[18:34:08] <bjs> ouemt: for loop itself run sequentially, but the futures might be futures for things that are running concurrently with the loop.
[18:34:10] <SnoopJ> ouemt, I think it can be either, that function just knows about the futures
[18:35:18] *** Quits: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[18:36:12] <ouemt> so I'm calling a function that builds 3 dataframes and returns them in a tuple in the actual ProcessPoolExecutor. There's no interaction with other objects, and the dataframes are created from scratch in each worker. Then in the for loop with as_completed, I append the the returned dataframes into three longer dataframes.
[18:36:46] <ouemt> I know pandas isn't generally threadsafe, but I thought I was in the clear here, but something is going wrong that I'm having trouble tracking down
[18:37:11] <ouemt> the futures are completing, but when I read future.result(), which should be a tuple, it hangs on the first one, and never runs again.
[18:37:32] <ApostleInTriumph> SnoopJ but why would whl be version specific?
[18:37:54] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[18:38:49] *** Joins: mactron (~mactron@APN-123-214-101-gprs.simobil.net)
[18:39:27] *** Quits: tspng (~tspng@2a02:168:a1a1:1:a955:c6ee:a3e5:9fc6) (Remote host closed the connection)
[18:39:37] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[18:40:05] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[18:40:14] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Remote host closed the connection)
[18:40:20] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:40:39] <bjs> ouemt: processes aren't threads, so thread safety isn't a big issue.  The first as_completed() future returns immediately and its result() waits for the first future to be finished
[18:40:53] *** Joins: KombuchaKip (~kip@192.252.230.5)
[18:40:55] <SnoopJ> ApostleInTriumph, because the runtime ABI can (and does) change between versions.
[18:40:57] <bjs> ouemt: maybe it's just taking a long time?
[18:41:36] *** Joins: RougeR (~rougex250@user/rouger)
[18:41:51] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:41:53] <ApostleInTriumph> what is ABI?
[18:41:58] <ouemt> bjs: so last night, I replaced my code in the for loop with a code that just checks if future.done() is True, and watched them slowly start marking as done, when I added back in one line of the code, the debug output stops after the first entry into the for loop, and the loop never finishes
[18:42:48] *** Joins: syrius (syrius@titan.stormtek.net)
[18:42:58] <ouemt> and my understanding is that as_completed() won't yield a future until it's done?
[18:43:04] <SnoopJ> ApostleInTriumph, application binary interface. It's like an API, but for binaries. The layout and structure of libpython changes between versions, basically.
[18:43:04] <bjs> ouemt: you're talking about specific behaviour of specific code that we cannot see
[18:43:06] <bjs> so it's hard to comment
[18:43:28] *** Quits: mactron (~mactron@APN-123-214-101-gprs.simobil.net) (Ping timeout: 252 seconds)
[18:44:42] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[18:45:50] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:46:46] <ouemt> bjs: I appreciate that, but I can't really share more than https://bpa.st/AB5Q
[18:46:50] <bjs> ouemt: it yields the futures as they complete
[18:47:17] <ApostleInTriumph> SnoopJ I see..
[18:47:23] <mawk> how do you want me to refer to you Soni ?
[18:47:25] <ouemt> I've used this pattern elsewhere with good results, so I'm really confused why this is being such a pain
[18:47:42] <bjs> ouemt: probably you are misattributing the problem
[18:47:45] <RougeR> quick question
[18:47:49] <bjs> or there is something else going on
[18:48:16] <RougeR> what is the general consensus on using pipenv/poetry whilst developing using a containerized env?
[18:48:23] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[18:49:10] <RougeR> will this alone cause issues? (i think so)
[18:49:10] <RougeR> RUN pip3 install -r /requirements.txt
[18:50:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:51:24] *** Joins: rsx (~dummy@ppp-188-174-153-249.dynamic.mnet-online.de)
[18:52:23] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Read error: Connection reset by peer)
[18:52:51] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[18:53:14] *** Joins: sgn (~sgn@user/sgn)
[18:53:41] <w0rp> I'm trying to make sense of the changes in Python 3.10. Is postponed evaluation of annotations the default behaviour in 3.10, or has that been moved to 3.11 or something?
[18:54:20] <w0rp> I would love for that to be how annotations work without the __future__ import soon.
[18:54:41] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Client closed)
[18:54:48] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:55:45] *** Joins: ham5urg (~ham5urg@p200300d167429600705cd859664b1b03.dip0.t-ipconnect.de)
[18:56:02] *** Joins: mactron (~mactron@APN-123-214-101-gprs.simobil.net)
[18:56:23] <jinsun> it was going to be added in 3.10 but changed few months back and now it is planned for 3.11
[18:56:29] <w0rp> Aha, thought so!
[18:56:37] <w0rp> I saw it in the page of changes before, and it's gone now.
[18:56:44] <jinsun> see this https://github.com/samuelcolvin/pydantic/issues/2678
[18:57:03] <w0rp> I'll still get my company to update to 3.10 over the next few months just for `T | U` syntax and pattern matching syntax.
[18:57:28] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[18:57:39] <ham5urg> Are tools available which can analyze a used command e.g. "result = a_command(arg0)" and tell which exceptions such command could theoreticaly raise?
[18:58:10] <SnoopJ> the relevant mailing list discussion linked from that issue might also be worth looking at if you only care about the picture w/r/t Python itself: https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/
[18:58:42] <w0rp> jinsun: Makes sense. It broke something, which isn't surprising.
[18:58:51] <w0rp> It's hard to change just about anything without breaking something.
[19:00:40] <jinsun> ya, just that this time the change broke something that got really popular recently
[19:01:17] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 264 seconds)
[19:02:24] <w0rp> There's a flake8 future imports plugin to nag you to put __future__ imports at the top of every file. I'll probably just use that again.
[19:02:37] <w0rp> I used it way back when in the days of upgrading from Python 2.7 to 3.x.
[19:03:14] *** Quits: lastshell (~lastshell@user/lastshell) (Remote host closed the connection)
[19:03:18] <w0rp> You can fix the codebase with `sed` and then you just nag people to add the import lines to new files. It's not so bad.
[19:03:54] <jinsun> there is a isort setting to add that automatically, let me see if I can find that article
[19:04:43] <jinsun> w0rp: https://adamj.eu/tech/2021/05/15/python-type-hints-future-annotations/
[19:04:44] <SnoopJ> that, and the issue wasn't raised in time to do something about it, hence the deferral
[19:05:20] <w0rp> Yeah, I use isort and flake8 together, and it works.
[19:06:01] <w0rp> I really like Pyright, BTW.
[19:06:10] <w0rp> Pyright has been the best tool I've found so far for checking types.
[19:06:46] <w0rp> Pretty fast, works in VSCode, works in Vim with my ALE plugin, can't complain really.
[19:07:18] *** Quits: diplomatic_tyran (~diplomati@ec2-13-212-137-131.ap-southeast-1.compute.amazonaws.com) (Quit: Client closed)
[19:07:48] <jinsun> yeah it is great, compared to mypy it is much faster, less buggier and has better messages
[19:08:02] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:08:10] <w0rp> I do wonder if Guido will contribute much to it, because he did move to Microsoft for fun.
[19:08:15] <jinsun> at least from my experience in using it with vscode
[19:08:38] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:09:47] *** Joins: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com)
[19:10:13] *** Quits: pycode (~pycode@2001:b07:5d28:551:f257:7b13:dc7d:dc6c) (Remote host closed the connection)
[19:10:15] *** Quits: mactron (~mactron@APN-123-214-101-gprs.simobil.net) (Quit: Leaving)
[19:10:19] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[19:10:30] *** Joins: pycode (~pycode@2001:b07:5d28:551:3b64:f70b:c5cd:e699)
[19:10:48] *** Joins: ckdCreations (~ckdCreati@147.55.130.33)
[19:11:56] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[19:12:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:12:46] *** Quits: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:13:06] *** Joins: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085)
[19:13:15] *** Joins: badsektor (~badsektor@user/badsektor)
[19:13:52] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[19:14:13] *** Joins: fikran (~fikran@user/fikran)
[19:15:14] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_1)
[19:15:28] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[19:15:30] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[19:15:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:17:54] *** Joins: pycurious (~Adium@user/pycurious)
[19:18:52] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[19:18:53] *** Quits: vladoski (~vladoski@2001:b07:add:d406:fd77:f5b2:b966:5085) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:19:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:21:18] <ouemt> bjs: this might actually be tqdm's fault
[19:21:55] <ouemt> I removed it, and we're getting farther... turning on one statement at a time
[19:23:01] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[19:24:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:25:10] *** Quits: VaniaPy (~VaniaPy@adsl-76.176.58.192.tellas.gr) (Quit: Connection closed)
[19:26:00] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[19:26:22] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[19:27:51] *** Quits: jcbsv (~jcbsv@185.247.236.137) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:29:11] <ouemt> oh interesting.... it worked for 25 iterations, then the workers kept returning, but the for loop stopped
[19:29:53] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:29:56] <NoImNotNineVolt> alias gitdiff='git diff -U0 --word-diff --no-index -- '
[19:30:06] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Quit: You have been kicked for being idle)
[19:30:11] <NoImNotNineVolt> so, i use git's word diff to give me prettier diffs than a traditional diff would
[19:30:34] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:30:57] <NoImNotNineVolt> and, i have a python program where i use difflib to generate unified diffs....
[19:31:07] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:31:19] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:2810:4482:4442:ac6b) (Ping timeout: 252 seconds)
[19:31:39] <NoImNotNineVolt> i was wondering if there was a relatively painless way to use gitpython to generate git word diffs for me like that (for two files in the filesystem, outside of any git repo, etc)
[19:32:01] <NoImNotNineVolt> or, ideally for two large multiline python strings.
[19:33:29] *** Parts: ein^sof (~michael@199.116.119.74) ()
[19:35:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:35:44] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[19:35:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:36:05] *** Quits: shad (~shad@user/shad) (Ping timeout: 264 seconds)
[19:36:23] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[19:36:27] *** Quits: chele_ (~chele@user/chele) (Remote host closed the connection)
[19:36:44] *** Joins: alzgh (~alzgh@user/alzgh)
[19:36:59] <NoImNotNineVolt> ooh, i can git.Repo().git.diff()
[19:37:02] <NoImNotNineVolt> nm :)
[19:37:08] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:37:19] <NoImNotNineVolt> but that still leaves me needing to write the strings to the filesystem first. not ideal, but oh well.
[19:37:29] *** Joins: ExeciN (~ExeciN@user/nicexe)
[19:37:38] *** Joins: emf (~emf@2620:10d:c090:400::5:113f)
[19:37:58] <kenwoodfox> Hey python! im using pyplot and im trying to do an annotation, my program dosent crash but right now, if i annotate at 0,0, my max temp annotation points to the bottom left of the screen, witch would not be so odd... if my y scale was not epoch time, and my x scale 20-38
[19:37:58] <kenwoodfox> how can i make the annotation use the scale of my data, instead of 0,0 to 10,10?
[19:37:58] <kenwoodfox> code here, https://github.com/KenwoodFox/EG-207-CCEMS/blob/lab1/python/goldplot/goldplot.py
[19:37:58] <kenwoodfox> annotations on line 211
[19:38:56] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 246 seconds)
[19:38:57] *** Quits: xiongxin (~quassel@113.116.35.63) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:39:39] *** Quits: tobybl_ (~tobybl@31.111.35.255) (Remote host closed the connection)
[19:39:59] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Remote host closed the connection)
[19:40:37] <kenwoodfox> I have my xycoords set to 'data' but if try and annotate the data point say, (1633069779.5313888, 33) it goes off the scale, even though my plot shows those values,
[19:40:37] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:30:b0ea:f6c1:a3e7)
[19:41:04] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:42:00] <sdfgsdfg> maybe a data conversion issue ?? where's it going off scale
[19:42:00] *** Joins: tobybl (~tobybl@31.111.35.255)
[19:42:09] <SnoopJ> kenwoodfox, what are xlim() and ylim() for your plot?
[19:42:49] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[19:43:03] <kenwoodfox> SnoopJ: I dont think i know, do i set those terms manually? Ive been letting pyplot autoscale for now
[19:43:16] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:43:33] <SnoopJ> kenwoodfox, the "data" coordinate system is limited to those values: https://matplotlib.org/stable/tutorials/advanced/transforms_tutorial.html
[19:44:02] <kenwoodfox> SnoopJ: Can i get the xlim, and ylim from the autoscaled graph, and use those to scale my data values for my annotations?
[19:44:42] *** Joins: jazzy (~jaziz@2600:380:863e:b8c:48da:61c2:f573:151a)
[19:45:09] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[19:45:11] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:30:b0ea:f6c1:a3e7) (Read error: Connection reset by peer)
[19:45:31] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[19:45:41] *** Joins: Narrat (~omnius@p200300df5f13e7a606ea56fffe2e7cdc.dip0.t-ipconnect.de)
[19:45:50] <SnoopJ> kenwoodfox, yes, you can call get_xlim(), get_ylim() on the Axes object.
[19:46:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[19:46:18] *** Quits: tobybl (~tobybl@31.111.35.255) (Remote host closed the connection)
[19:46:34] <SnoopJ> kenwoodfox, the problem you're having might be because you're calling annotate() on the Figure instance instead of an Axes instance. Figure itself does not really contain data, so I'm not sure what the 'data' coordinate system really means for it, but it might just always be (0.0, 1.0)
[19:47:18] <SnoopJ> oh, nevermind, you are calling it on an Axes instance, hmm
[19:47:22] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[19:48:25] <kenwoodfox> SnoopJ: Was worried for a sec there, yeah it is on the axes there, i expected the data cord system would be just, the system on the graph, i can try using getxlim and getylim, then ill set those just, back?
[19:48:46] <SnoopJ> kenwoodfox, why are you using 'data' for xycoords, but 'axes fraction' for textcoords?
[19:49:28] *** Quits: jazzy (~jaziz@2600:380:863e:b8c:48da:61c2:f573:151a) (Ping timeout: 265 seconds)
[19:49:57] <kenwoodfox> SnoopJ: I only want the arrow to point to the precise location of the data, i dont mind if the text has a fixed location that is a fraction of the plot, because the text overlay dosent need to cover up or match with any other data
[19:50:01] <kenwoodfox> SnoopJ: is that tripping me up?
[19:50:22] <Soni> mawk: huh?
[19:51:57] <SnoopJ> kenwoodfox, I don't know, it would be easier to tell if I was looking at code I could run to reproduce the failure you're looking at. It could be.
[19:52:11] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5) (Quit: Client closed)
[19:52:14] <ska> For pytest, can I tell pyproject.toml that an entire folder is marked as "unit" ?
[19:52:15] *** Joins: wyclif (~wyclif@user/wyclif)
[19:52:19] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[19:52:26] *** Joins: nomic (~nomic@185.192.69.207)
[19:52:38] <SnoopJ> What you have looks like it should be okay, it would locate the arrow in the 'data' coordinate system, and the text in the 'axes fraction' coordinate system, and those values seem okay...
[19:52:57] *** Quits: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk) (Quit: WeeChat 2.8)
[19:53:43] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[19:54:22] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:54:23] <kenwoodfox> SnoopJ: That should run locally, all the requirements are there, running `python goldplot --data junk-data.csv` should be enough to see what i see :3
[19:54:51] <kenwoodfox> SnoopJ: I know it looks right but, it cleearly works... weird, plotting 0, 0 dosent make sense on a graph whos minimum valies are 30, and 1633070118.306025
[19:56:04] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[19:56:06] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[19:56:10] <kenwoodfox> Oh wait, sorry junk data is local, to test use `python goldplot --data resources/Team_Gold_Response.csv`
[19:56:17] <SnoopJ> ska, could you do `pytestmark = pytest.mark.unit` in that suite? I'd think it applies to modules below the scope where it's used, unless overridden (but haven't tested)
[19:56:42] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[19:57:01] <SnoopJ> kenwoodfox, it makes sense, it's just out of the frame
[19:57:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[19:57:33] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[19:57:45] *** Joins: wyclif (~wyclif@user/wyclif)
[19:58:07] <kenwoodfox> SnoopJ: No i mean, it actually shows at 0,0, witch is an invalid location
[19:58:07] <kenwoodfox> and does not show at like 1633070118.306025, 30 witch is a valid location, but is graphed offscreen!
[19:58:14] <kenwoodfox> the annotations are not using the same cord system as my data :c
[19:58:53] <lesshaste> when I do from tensorboardX import SummaryWriter the first time I get  lots of errors https://bpa.st/67ZQ
[19:58:58] <lesshaste> but the second time it works
[19:59:08] <ska> SnoopJ: I tried that in ~/tests/__init__.py but it didn't work
[19:59:09] <SnoopJ> kenwoodfox, I don't know what "shows at 0.0" means if the graph does not show this location.
[19:59:19] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[19:59:21] <SnoopJ> ska, is that where the tests themselves are located?
[19:59:27] <ska> SnoopJ: yes.
[19:59:36] <kenwoodfox> SnoopJ: Exactly! I dont understand it either, it points to 1633070118.306025, 20 (my min values), when i tell it to plot 0, 0
[19:59:51] <SnoopJ> kenwoodfox, I mean that I cannot understand what you are saying to me
[20:00:12] <SnoopJ> I am hearing "my plot has limits 30 to <bignum>, and I see something at 0.0" and this seems like an impossibility
[20:00:24] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:00:31] <kenwoodfox> SnoopJ: My data scales my plot to some values, epoch time on the y, and 20 to 30 or so on the x, but my annotations dont use that scale clearly, they're plotting on a scale that looks like it starts at 0,0 and only goes to 10, 10
[20:00:50] <kenwoodfox> SnoopJ: im sorry i cant explain it more clearly, im just trying to say my annotations are not using the same xy system as the graph they're being drawn o
[20:00:51] <kenwoodfox> on*
[20:01:16] <kenwoodfox> Yes! exactly it is an impossiblity, i dont understand it, 0,0 should be entirely invalid, my min y value is in the hundreds of thousands!
[20:01:18] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Client Quit)
[20:01:26] <SnoopJ> kenwoodfox, I don't understand what "it" is
[20:01:32] *** Joins: magla (~gelignite@55d4bce1.access.ecotel.net)
[20:01:34] <SnoopJ> You keep saying 0.0 and I have no idea what you're talking about
[20:01:38] *** Quits: jim87 (~quassel@93.55.249.30) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:01:38] <kenwoodfox> SnoopJ: Im not sure how to make it more clear,
[20:01:47] <aphysically> the one time I forgot to mark a constant as Final it was a dict that i ended up accidentally modifying by forgetting to copy
[20:01:47] <kenwoodfox> SnoopJ: My annotations dont plot in the same cord system as my data
[20:01:51] <kenwoodfox> SnoopJ: just that
[20:01:57] <aphysically> >.<
[20:01:59] <kenwoodfox> SnoopJ: they plot in a different system, that starts at 0,0
[20:02:30] <kenwoodfox> SnoopJ: I want them to like, not do that. I want to plot annotations and markers using my data
[20:02:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:02:52] <SnoopJ> kenwoodfox, I still don't understand where you are getting 0.0 from
[20:03:16] <SnoopJ> The normalized coordinates (e.g. axes fraction) are always (0.0, 1.0)
[20:03:16] *** Joins: wyclif (~wyclif@user/wyclif)
[20:03:22] <kenwoodfox> https://cdn.discordapp.com/attachments/506631005189177355/893536055989506089/unknown.png
[20:03:37] <kenwoodfox> SnoopJ: attached a pic, if i plot my annotation with x=(0,0) i see that
[20:03:54] <kenwoodfox> SnoopJ: im not using axes fraction though, im using `data`
[20:04:00] *** Joins: ptival (~ptival@2001:470:69fc:105::41fc)
[20:05:46] <kenwoodfox> Sorry i just, think im stressed is all.
[20:05:52] <kenwoodfox> I really appreciate you looking at this with me, really
[20:07:19] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[20:07:51] *** Quits: Guest8130 (~il@irc.oh1cgn.fi) (Quit: WeeChat 3.3-dev)
[20:08:00] *** Joins: ilmais1n (~il@irc.oh1cgn.fi)
[20:08:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:08:39] <SnoopJ> kenwoodfox, I can't really make sense of the picture because the labels are illegible
[20:08:47] *** Joins: wyclif (~wyclif@user/wyclif)
[20:08:47] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:09:02] <kenwoodfox> SnoopJ: Sorry i dont know how to fix that either but the y values are in epoch time, and huge
[20:10:05] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[20:10:22] <kenwoodfox> SnoopJ: Trying to set the x, and y lim but getting this error AttributeError: 'AxesSubplot' object has no attribute 'ylim' witch is odd i think, but, another issue entirely
[20:10:25] *** Joins: ExeciN (~ExeciN@user/nicexe)
[20:10:26] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[20:10:31] <kenwoodfox> just to see if it helps
[20:12:46] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:13:07] *** Joins: alzgh (~alzgh@user/alzgh)
[20:13:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:14:04] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[20:14:12] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[20:14:16] *** Joins: wyclif (~wyclif@user/wyclif)
[20:14:48] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi) (Quit: Leaving)
[20:14:50] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Ping timeout: 252 seconds)
[20:14:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:15:50] <ptival> hi, I have two Python packages living in say `parent/Package1` and `parent/Package2`. `Package2` imports some sub-packages of `Package1`. Now my colleagues seem to just install everything ambiently, but I'm trying to make this not ugly and have a declarative spec with a `setup.cfg` showing the dependency. However, I cannot figure out how to make `Package2` depend on `Package1`.
[20:15:50] <ptival> An attempt of `install_requires = Package1`, `package_dir = Package1 = ..`, `packages = Package`, is accepted by pip, but it does not bring in the package in the `site-packages`.
[20:16:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:16:05] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[20:16:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:16:24] *** Joins: mago (~mago@87.125.57.238)
[20:16:32] <mago> Hello, need help with some code..
[20:16:35] <mago> https://pastebin.com/raw/4J4EsP78
[20:16:36] <infobob> https://bpaste.net/35JA (repasted for mago)
[20:16:54] <mago> Before it was working fine, but now it exits the application without posting..
[20:17:07] <mago> If i press the post button manually it works..
[20:17:13] *** Joins: y1n (~y1n@178.165.173.39.wireless.dyn.drei.com)
[20:17:18] <grym> ptival: why not just make parent a package and install that? then both subpackages will be installed together
[20:17:31] <mago> But before it would do it on its own, and it would even repeat the action x times, as many as requested..
[20:17:51] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:189f:52c6:5bfd:606d)
[20:17:59] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[20:18:07] <mago> Can someone help me audit the code and find out why it exits the app without pressing the post button?
[20:18:08] *** Joins: jazzy (~jaziz@2600:380:863e:b8c:2c7e:3597:d015:9d41)
[20:18:23] <mago> (it used to do so programatically..)
[20:18:28] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[20:18:33] *** Joins: fikran (~fikran@user/fikran)
[20:18:44] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[20:19:02] <mago> Its a comment method for social media APIs
[20:19:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:19:14] *** Joins: demirok (~bell@user/demirok)
[20:19:32] <ptival> grym: I kind of considered that... It's just the parent directory has a bunch of stuff that is completely unrelated to Python, so it's going to be hard to get people to agree to make it a Python package folder... Likely, I considered moving the two folders into a subfolder that would be a Python package, but people are likely going to want these folders to stay where they are because reasons. :(
[20:19:47] *** Joins: wyclif (~wyclif@user/wyclif)
[20:20:46] *** Joins: darksun (~darksun@user/darksun)
[20:21:41] <Swayze> sounds like an evil spammers too mago
[20:21:43] <Swayze> tool*
[20:21:45] *** Joins: junktext (~junktext@77.247.181.216)
[20:21:58] *** Joins: kosh (~kosh@user/kosh)
[20:22:08] <mago> Swayze not evil, just automation..
[20:24:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[20:24:42] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 260 seconds)
[20:24:54] *** Joins: kenoba1 (~kenoba@user/kenoba)
[20:25:10] *** Joins: ganchan (~thomas_w@user/ganchan)
[20:25:18] *** Joins: wyclif (~wyclif@user/wyclif)
[20:25:49] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[20:26:24] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[20:26:26] <bancroft> hon
[20:26:47] *** Quits: nicktaylor (~nt@nickgrahamtaylor.plus.com) (Quit: Leaving)
[20:27:35] *** Joins: badsektor (~badsektor@user/badsektor)
[20:27:41] <bancroft> what's a good memory profiler for a python webserver?
[20:28:19] <bancroft> I tried mprof but it didn't have the same leak so adding that profiler actually removed the leak
[20:28:20] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Killed (NickServ (GHOST command used by xavie!~xavie@abordeaux-551-1-111-191.w92-156.abo.wanadoo.fr)))
[20:28:43] *** Quits: ganchan (~thomas_w@user/ganchan) (Client Quit)
[20:30:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:30:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:31:08] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:31:12] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:31:43] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:31:48] <ptival> is a Python project (something with a setup.py) not a Python package? (in the absence of a init.py)
[20:32:18] *** Joins: sandb0y (~pirate@user/sandb0y)
[20:32:47] *** riz is now known as BillyZane
[20:32:50] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 246 seconds)
[20:33:20] <grym> ptival: i am used to `rootdir/setup.py`, `rootdir/installable_thing/__init__.py`, and setup.py installs `installable_thing`
[20:33:39] *** Joins: Akuli (~Akuli@82-203-162-67.bb.dnainternet.fi)
[20:33:55] <grym> you can just install a single .py file
[20:34:00] <grym> but i rarely/never do
[20:34:16] <ptival> so `installable_thing` would be a valid thing to drop in a setup's `packages` field, while `rootdir` would be a valid thing to drop in a `install_requires` field?
[20:34:38] <ptival> or I guess whatever the `name` of the thing defined in the root dir is
[20:35:28] <SnoopJ> bancroft, what kind of data are you trying to get out of your profiler? I've written a dumb little tool (https://git.io/Jgy2E) to monitor total usage of a process before and used it to help find a leak in a server, but this isn't very much granularity
[20:35:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:35:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:36:19] *** Joins: wyclif (~wyclif@user/wyclif)
[20:36:27] <NoImNotNineVolt> can python preserve ansi color codes?
[20:36:42] <SnoopJ> NoImNotNineVolt, why wouldn't it? They're 'just' text
[20:36:53] *** Joins: xcombelle (~xavie@abordeaux-551-1-111-191.w92-156.abo.wanadoo.fr)
[20:37:12] <bancroft> SnoopJ: I just need to know why it suddenly takes more memory then it did yesterday when what I changed is basically updated a package
[20:37:50] <NoImNotNineVolt> SnoopJ: when i use git directly, i get color diffs, but when i use gitpython, i don't.
[20:38:08] <SnoopJ> NoImNotNineVolt, git doesn't include them when you're using the porcelain interfaces, IIRC
[20:38:13] *** Joins: ub (~Thunderbi@178.115.52.70.wireless.dyn.drei.com)
[20:38:14] <grym> NoImNotNineVolt: git's likely sensitive to pager diff... ^
[20:38:16] <grym> yeah that
[20:38:25] <NoImNotNineVolt> i'll try an explicit --color=always, i guess
[20:38:30] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:506c:d13:492a:2835)
[20:38:34] <SnoopJ> yea you might be able to force it back on
[20:39:31] *** Quits: ubert (~Thunderbi@91.141.77.30.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[20:39:31] *** ub is now known as ubert
[20:40:12] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Remote host closed the connection)
[20:40:47] *** Joins: p-i- (~Ohmu@223.206.71.80)
[20:41:05] <SnoopJ> maybe it's not a porcelain thing, but it just turns it off if the output isn't a terminal, I can't find that in the doc
[20:41:12] *** Quits: RougeR (~rougex250@user/rouger) (Quit: Leaving)
[20:41:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:41:53] *** Joins: wyclif (~wyclif@user/wyclif)
[20:43:34] <NoImNotNineVolt> yay, that worked. thanks.
[20:43:56] <bancroft> SnoopJ: so just sudo python3 monitor_memory_usage.py -pid 9817 and control +c whenever?
[20:45:30] <bancroft> SnoopJ: ahh, it's cool but I would need to know which library is eating the memory
[20:45:49] *** Joins: greedom (~greedom@2001:16b8:2e9d:9400:e0ea:a51a:cb7c:59df)
[20:46:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:46:48] <SnoopJ> bancroft, if you're on Linux, you might be able to look at /proc/<pid>/maps to gauge the sizes of each mapping associated with a file. I've done some stuff like that recently (for other purposes), but don't have any sharable code.
[20:47:06] <bancroft> SnoopJ: I am always on linux :D
[20:47:24] *** Joins: wyclif (~wyclif@user/wyclif)
[20:47:25] <SnoopJ> That tool was helpful to me just to locate when the leak was happening, and then I was able to go in and chop around in the relevant part of the code until I figured out what was sucking up memory.
[20:47:51] <SnoopJ> bancroft, if this is relatively long-lived server, scalene might be helpful, it has a very useful memory diagnostic.
[20:47:57] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[20:48:08] *** Quits: jeho2 (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[20:48:19] *** Quits: pycode (~pycode@2001:b07:5d28:551:3b64:f70b:c5cd:e699) (Ping timeout: 252 seconds)
[20:48:20] <bancroft> SnoopJ: scalene, never heard of it but will try it :)
[20:48:26] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[20:49:15] <SnoopJ> it's a relatively new sampling profiler https://github.com/emeryberger/scalene
[20:49:18] *** Joins: jay-m126 (~jay-m@129.0.226.200)
[20:49:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:49:47] *** Quits: rsx (~dummy@ppp-188-174-153-249.dynamic.mnet-online.de) (Quit: rsx)
[20:51:00] <SnoopJ> you might have to mess around with the options to capture what you want, depending on what your leak is like
[20:51:33] *** Quits: csgeek (~textual@2600:1700:4f32:c010:f41e:3ece:9fce:49ee) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:52:00] *** Quits: coraxx (~coraxx@mail.8-pm.com) (Quit: Leaving)
[20:52:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:52:54] *** Joins: wyclif (~wyclif@user/wyclif)
[20:53:55] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[20:54:47] *** Joins: dez (uid92154@user/dez)
[20:55:07] *** Quits: junktext (~junktext@77.247.181.216) (Remote host closed the connection)
[20:55:18] *** Quits: ivan_ (~Ivyy@2001:a61:1329:3e01:5855:ad9a:9590:a14c) (Remote host closed the connection)
[20:56:18] *** Joins: junktext (~junktext@77.247.181.209)
[20:56:24] *** Joins: Azin (~Azin@user/azin)
[20:57:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:58:25] *** Joins: wyclif (~wyclif@user/wyclif)
[21:00:13] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[21:00:48] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:00:49] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:01:25] <ExeciN> Hi people, I'm doing some filtering with pandas like so type_string = types[(types.lower <= type_number) & (types.upper >= type_number)].head(1) I then get the first column but how would I get the value of a specific column?
[21:01:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:01:58] <ExeciN> *I then get the first row but how would I get the value of a specific column?
[21:03:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:03:56] *** Joins: wyclif (~wyclif@user/wyclif)
[21:04:20] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 246 seconds)
[21:04:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:04:52] *** Quits: emerent (~quassel@p200300cd5748557eba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:05:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[21:05:19] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[21:05:36] *** Joins: emerent (~quassel@p200300cd57485570ba27ebfffed28a59.dip0.t-ipconnect.de)
[21:07:31] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[21:08:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[21:08:41] *** Quits: greedom (~greedom@2001:16b8:2e9d:9400:e0ea:a51a:cb7c:59df) (Remote host closed the connection)
[21:08:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:08:47] <sveinse> oof, stuck with porting an ancient py2 tool, using gnosis from 2004 and stone age wx. I am SO glad pypi is a well functioning thing these days
[21:09:26] *** Joins: wyclif (~wyclif@user/wyclif)
[21:09:28] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:7479:b9dd:8a01:6621)
[21:09:38] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:09:55] <p-i-> Suppose I have class C, and I call `C.foo`. How to make a generic handler in C to catch any 'foo' I pass in?
[21:10:09] *** Joins: tspng (~tspng@2a02:168:a1a1:1:f55c:89ac:8736:db51)
[21:10:38] <sveinse> p-i-: you'll have to do it in each of the methods
[21:10:43] *** Joins: brachamh_ (~brachamh@user/brachamh)
[21:11:38] <p-i-> I thought there was some way of overloading __getattr__ or something
[21:12:02] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 252 seconds)
[21:12:18] <p-i-> Yes I think that's it.
[21:12:19] <sveinse> p-i-: yeah, that's possible... but not very common thou
[21:13:00] *** Quits: goepsilongo (~chacho@2603-7000-ab00-62ed-0000-0000-0000-0bd0.res6.spectrum.com) (Quit: Konversation terminated!)
[21:13:29] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:13:54] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:13:57] <p-i-> I have a deeply nested JSON structure, and it's very clunky to do J['foo']['bar']['quux'] when I'm 8 levels in.
[21:14:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:14:24] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:14:51] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:14:56] *** Joins: wyclif (~wyclif@user/wyclif)
[21:14:59] <p-i-> So I'm trying something that lets me do C(J).foo.bar.quux
[21:15:00] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[21:15:05] *** brachamh_ is now known as brachamh
[21:15:54] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[21:15:59] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:16:01] <Swayze> maybe write a function that accepts a string like 'foo.bar.quux'
[21:16:07] <Swayze> and then looks it up in the list
[21:16:16] <Swayze> and returns the element
[21:16:20] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[21:16:22] <sveinse> I am looking for the name of that package...
[21:16:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:16:42] <p-i-> 👍 yeah that's better than a recursive class technique
[21:16:58] <grym> p-i-: glom. https://glom.readthedocs.io/en/latest/
[21:17:03] *** Joins: arinov (~arinov@31.142.103.218)
[21:17:26] <p-i-> Thankyou grym!
[21:17:27] <sveinse> grym: thanks grym! I was searching and thing my mind dry here :D
[21:17:46] <grym> p-i-: target = {'a': {'b': {'c': 'd'}}} ; glom(target, 'a.b.c') == 'd'
[21:17:49] <grym> for example
[21:18:00] <Swayze> ahh seems someone wrote it alreayd
[21:18:04] <Swayze> i'd still write my own ftlols
[21:18:05] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[21:18:24] <p-i-> The only unknown with using these packages is performance
[21:18:25] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[21:18:29] <p-i-> But I can benchmark it
[21:18:29] <SnoopJ> glom does quite a bit more than just this, but it's often convenient to drag it in for just this functionality
[21:18:46] <grym> i have not bothered to benchmark glom because its convenience is worth it and i've never noticed a hit
[21:18:53] <sveinse> unfortunately, and evidently I have no mental label on that name "glom" :D
[21:19:22] <grym> sveinse: you could say it hasn't glommed onto you
[21:19:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:19:38] <Swayze> glom itself means steal
[21:19:40] <SnoopJ> I believe it's from "conglomerate"
[21:19:41] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:19:52] <sveinse> aha, thanks
[21:20:09] <Swayze> or stuck
[21:20:13] *** Joins: semeion (~semeion@user/semeion)
[21:20:27] *** Joins: wyclif (~wyclif@user/wyclif)
[21:21:52] *** Quits: junktext (~junktext@77.247.181.209) (Ping timeout: 252 seconds)
[21:22:10] <sveinse> whats the quickest way to identify all *.py file a program is running in a py script? (...in py2)
[21:23:27] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Quit: Leaving)
[21:25:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:25:21] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:25:43] *** Quits: jay-m126 (~jay-m@129.0.226.200) (Ping timeout: 252 seconds)
[21:25:57] *** Joins: wyclif (~wyclif@user/wyclif)
[21:25:59] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[21:26:22] *** Joins: teut (~teut@182.69.68.230)
[21:26:45] <p-i-> It's still a bit awkward when I have J['foo']['bar'][3]['quux'] ... i.e. one particular sub-level is a list.
[21:27:04] <SnoopJ> sveinse, I'm not entirely sure I know what the question means, but you might get started on that by scanning over locals() with inspect.getfile() (you'll need to handle cases where that raises an exception for built-ins or things defined in C)
[21:27:11] <grym> p-i-: glom supports that too
[21:28:06] <grym> spec=("foo.bar",["quux"]), i think
[21:28:32] *** Quits: arinov (~arinov@31.142.103.218) (Ping timeout: 252 seconds)
[21:28:38] <p-i-> neat
[21:28:48] <p-i-> gee this could have saved me some time these last few weeks
[21:28:58] <grym> it's very very nice
[21:29:15] <p-i-> `import antigravity`
[21:29:34] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:30:00] *** Henry151_ is now known as Henry151
[21:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[21:30:53] <TheRoeyening> import python4
[21:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:06] <sveinse> I hope not...
[21:31:09] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[21:31:11] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[21:31:20] <SnoopJ> I believe you need to get the 3 in there to do what they want, but you can e.g.: `spec = ("foo.bar", glom.T[3], "quux"); glom.glom(J, spec)`
[21:31:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:31:51] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[21:31:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:32:09] *** Joins: stevea (~stevea@user/stevea)
[21:32:17] <SnoopJ> https://bpa.st/XZFQ
[21:32:38] *** Quits: stevea (~stevea@user/stevea) (Client Quit)
[21:32:45] <p-i-> tx SnoopJ
[21:32:57] *** Joins: stevea (~stevea@user/stevea)
[21:32:57] <p-i-> I wonder if they considered allowing a 'foo.bar.3.quux' syntax
[21:33:14] *** Joins: wyclif (~wyclif@user/wyclif)
[21:33:25] *** Quits: stevea (~stevea@user/stevea) (Client Quit)
[21:33:37] <SnoopJ> that's valid, actually
[21:33:44] *** Joins: stevea (~stevea@user/stevea)
[21:34:03] <p-i-> wohhhhhhh
[21:34:04] <SnoopJ> I forgot you can do it that way because it always confuses me
[21:34:06] <p-i-> so it is
[21:34:13] *** Quits: stevea (~stevea@user/stevea) (Client Quit)
[21:34:27] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[21:34:28] *** Quits: xcombelle (~xavie@abordeaux-551-1-111-191.w92-156.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[21:34:28] <SnoopJ> it's a very powerful library, but best used sparingly because it's quite complicated and creates write-only code easily...
[21:34:48] <p-i-> What does that mean?
[21:35:05] <p-i-> It's easy to mees up the object that you pass in?
[21:35:22] <SnoopJ> write-only code is code that can't be read (i.e. it's complicated)
[21:35:36] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:36:06] *** Joins: coreyl (~cl@45-27-193-254.lightspeed.mssnks.sbcglobal.net)
[21:36:11] <SnoopJ> and when you're doing more than just chaining index operations together, glom starts to get pretty complicated, heh.
[21:36:39] <p-i-> u = glom(J, 'message.content.photo.sizes.0.photo.remote.unique_id')  # boom, 0.1ms
[21:36:57] <SnoopJ> example of a not-particularly-complicated spec that is already pretty obscure: https://github.com/SnoopJeDi/playground/blob/master/python/glom_/conditional_extraction.py#L45-L50
[21:37:26] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[21:37:31] <coreyl> Anyone use the PyGreSQL module?  How can I get Info notices.  Such as if I ran Connection.query('ANALYZE VERBOSE').
[21:37:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:37:55] *** Joins: zeden (~zeden@user/zeden)
[21:38:05] <sveinse> SnoopJ: thx
[21:38:15] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[21:38:44] *** Joins: wyclif (~wyclif@user/wyclif)
[21:38:50] *** Quits: mago (~mago@87.125.57.238) (Quit: Client closed)
[21:39:00] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:40:02] *** Joins: petaflot (~root@lutolf.vserver.nimag.net)
[21:41:44] *** Joins: ^-^hi (~nikw@user/-hi/x-1729478)
[21:41:46] *** Joins: jamiejackson (~jamiejack@207.172.87.34)
[21:41:58] <^-^hi> How do python lists work under the hood?
[21:42:24] *** Quits: tspng (~tspng@2a02:168:a1a1:1:f55c:89ac:8736:db51) (Remote host closed the connection)
[21:42:45] <p-i-> Actually writing from scrach is only 2x faster:
[21:42:50] <SnoopJ> ^-^hi, in CPython, they're dynamic arrays of pointers to objects.
[21:42:51] <p-i-> def extract(J, levels):
[21:42:52] <p-i->     for level in levels.split('.'):
[21:42:52] <p-i->         J = J[int(level) if level.isnumeric() else level]
[21:42:53] <p-i->     return J
[21:43:32] *** KirkMcDo1ald is now known as KirkMcDonald
[21:43:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:44:05] <p-i-> I wonder if there's a way of accomplishing that without creating intermediary objects
[21:44:14] *** Joins: wyclif (~wyclif@user/wyclif)
[21:44:25] <SnoopJ> p-i-, please don't paste in the channel
[21:44:31] <sveinse> p-i-: please don't paste in this chat
[21:44:58] <p-i-> sorry, my bad
[21:45:24] <SnoopJ> p-i-, why are you optimizing this, do you need to go faster than 0.1 msec for a given retrieval?
[21:45:25] *** Joins: iogue (~iogue@gateway/tor-sasl/iogue)
[21:45:35] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[21:45:37] *** Quits: EgonX_ (~EgonX@2601:2c6:47f:9c18:f9d6:48b1:5c28:31fb) (Quit: Textual IRC Client: www.textualapp.com)
[21:46:15] <p-i-> Probably not actually
[21:46:19] <sveinse> 0.1 msec sounds actually kinda slow for this op
[21:46:37] *** Quits: Azin (~Azin@user/azin) (Quit: Leaving...)
[21:46:49] <SnoopJ> sveinse, it's probably not the global minimum
[21:47:07] <p-i-> It's quite a heavy JSON object
[21:47:12] *** BytesAndCoffee|a is now known as BytesAndCoffee
[21:47:20] <sveinse> I'm doing realtime audio DSP processing in python and I'm amazed at what py is able to do in 100us
[21:48:45] *** Joins: semeion (~semeion@user/semeion)
[21:48:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:48:50] <SnoopJ> I've been meaning to watch Łukasz's PyCon talk about building an FM synth in Python, but haven't gotten around to it yet
[21:49:15] <sveinse> cool
[21:49:32] *** Joins: cheater (~Username@user/cheater)
[21:49:44] *** Joins: wyclif (~wyclif@user/wyclif)
[21:51:01] *** Quits: softwherewolf (~software@user/softwarewolf) (Ping timeout: 252 seconds)
[21:52:21] <sveinse> SnoopJ: trying to find it on youtube
[21:52:45] *** Joins: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83)
[21:52:49] *** Joins: jess (~jess@libera/staff/jess)
[21:52:51] <Soni> so how do you submit a patch/feature to python?
[21:52:59] <sveinse> never mind, found it
[21:53:02] <SnoopJ> https://www.youtube.com/watch?v=eKEjkB2bXK4
[21:53:06] <Swayze> wow one would assume C for realtime audio DSP processin
[21:53:15] <Swayze> you doing it for fun ?
[21:53:18] <bjs> Soni: depends what kind of patch/feature, if small enough (e.g. a small doc change) then just a PR
[21:53:28] <bjs> Soni: big language changes need a PEP,  and probably a core dev to champion it
[21:53:54] <Soni> making "with" intercept literal "raise" in body of "with" requires a PEP?
[21:53:54] <sveinse> Swayze: no absolutely not. desktop CPUs are pretty powerful things and audio isn't really that high bandwidth
[21:54:09] <SnoopJ> It probably would
[21:54:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:54:20] <graingert[m]> Soni: Intercept?
[21:54:22] <bjs> Soni: yes that kind of change almost certainly would
[21:54:35] *** Quits: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83) (Client Quit)
[21:54:49] <Soni> graingert[m]: having a __raise__ path (that defaults to __exit__ for backwards compatibility)
[21:54:52] <bjs> Soni: `with` itself was a PEP https://www.python.org/dev/peps/pep-0343/
[21:54:58] *** Joins: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83)
[21:54:58] <sveinse> The biggest challenge with real-time audio is the processing latency. And "real-time" often puts caps on how large buffers you may process at any given time
[21:55:10] <p-i-> sveinse: Are you using numba?
[21:55:16] *** Quits: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83) (Remote host closed the connection)
[21:55:16] *** Joins: wyclif (~wyclif@user/wyclif)
[21:55:24] <graingert[m]> Soni: It does that already
[21:55:50] <sveinse> p-i-: We use it to concept test audio algos before going into hard DSP. numpy mostly.
[21:55:54] <Soni> graingert[m]: no, it has an __except__ path, not a __raise__ path.
[21:55:56] <bjs> graingert[m]: Soni wants to make a feature to distinguish between exceptions from explicit `raise`s within the block and from those from deeper in the callstack
[21:56:03] <Soni> and the __except__ path can't be replaced
[21:56:07] <bjs> graingert[m]: with a new feature
[21:56:11] <p-i-> sveinse: yup I was doing that too
[21:56:38] <graingert[m]> Oh I see, you can check the traceback
[21:56:45] <bjs> graingert[m]: btw I've been trying to figure out whether what raymond said was true;  it's turning out to be a quite a twisty path to see what's going on
[21:56:45] <Soni> graingert[m]: no, you can't
[21:56:54] <graingert[m]> Twisted does this for defer.returnValue
[21:57:05] <bjs> graingert[m]: Soni also wants re-raised exceptions to be counted as if they were raised from the place they were re-raised
[21:57:06] <Soni> you can suppress the traceback when creating an exception instance
[21:57:12] <bjs> not from the place they were originally raised (if that makes sense()
[21:57:37] <graingert[m]> bjs: FAQ says D1.update(D2) is atomic so it is
[21:57:56] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[21:57:57] <bjs> graingert[m]: I know it says that, I'm the one who pointed it out to you and Łukasz :P
[21:58:20] <graingert[m]> Yep
[21:58:21] <bjs> but what he said is also interesting, about re-sizing (although dict.update(dict) is special-cased to do the re-sizing early)
[21:58:43] <graingert[m]> I can't repeat the list(d.items()) failure
[21:58:56] <bjs> graingert[m]: I wasn't able to either.
[21:59:28] *** Quits: teut (~teut@182.69.68.230) (Quit: Client closed)
[21:59:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:00:11] <graingert[m]> I think an rlock on weak collections (but then KI problems) or do the whole lot in c
[22:00:18] <graingert[m]> Is the only way
[22:00:22] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[22:00:28] <bjs> graingert[m]: yeah I think that was my conclusion too
[22:00:32] <bjs> RLock all the things
[22:00:47] *** Joins: wyclif (~wyclif@user/wyclif)
[22:01:26] <graingert[m]> Or just disallow multiple threads
[22:01:33] <graingert[m]> And signals
[22:01:36] <bjs> graingert[m]: `sys.modules["threading"] = None`
[22:01:36] <bjs> :D
[22:01:49] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:e429:af12:c956:fdff) (Quit: Leaving)
[22:01:52] <SnoopJ> lol
[22:04:15] <bjs> Soni: so basically, yes. You need to write a PEP.  The PEP will probably have to have sections motivating it and describing the syntax and semantics in detail as well as discussion about alternatives;  Given you've come up with many ideas for this exceptiony stuff before
[22:04:24] <bjs> it might be a good exercise regardless to write a PEP-sized document
[22:05:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:06:04] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[22:06:18] *** Joins: wyclif (~wyclif@user/wyclif)
[22:06:33] *** Joins: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83)
[22:09:00] *** Joins: junktext (~junktext@109.201.152.179)
[22:09:36] <ouemt> do I need to be worried about joblib warnings about "leaked folder objects to clean up at shutdown?"
[22:10:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:11:03] *** Joins: zeden (~zeden@user/zeden)
[22:11:49] *** Joins: wyclif (~wyclif@user/wyclif)
[22:12:19] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:12:52] *** Quits: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83) (Quit: rudrab)
[22:13:22] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:13:38] *** Quits: pro_z_ (~pro_z@37.214.79.2) (Ping timeout: 252 seconds)
[22:14:09] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:14:25] *** Joins: maharshipatel (~maharship@2409:4041:2e9a:7b4e:947f:ea70:d4c6:a88a)
[22:14:55] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[22:16:23] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[22:16:52] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[22:16:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:17:19] *** Joins: wyclif (~wyclif@user/wyclif)
[22:18:03] *** Joins: teut (~teut@182.69.68.230)
[22:18:03] *** Quits: elena_re (~elena@31.173.85.129) (Read error: Connection reset by peer)
[22:18:08] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[22:19:30] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[22:20:53] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:22:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[22:22:49] *** Joins: wyclif (~wyclif@user/wyclif)
[22:23:05] *** Joins: Macuser (~Macuser@216.30.159.201)
[22:24:02] *** Joins: elena_re (~elena@31.173.85.129)
[22:25:24] <sveinse> SnoopJ: fantastic video by Łukasz Langa about FM synthesis. Thanks a lot for the tip! Cheers
[22:25:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[22:26:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:26:53] <sveinse> I love how his py typings flows inline and naturally while coding :D
[22:27:32] *** Quits: ham5urg (~ham5urg@p200300d167429600705cd859664b1b03.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:27:47] *** Joins: ham5urg (~ham5urg@p200300d167429600dfbfd83bfa3528c6.dip0.t-ipconnect.de)
[22:27:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:27:53] *** Joins: fikran (~fikran@user/fikran)
[22:28:07] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[22:28:21] *** Joins: wyclif (~wyclif@user/wyclif)
[22:28:27] *** Quits: ham5urg (~ham5urg@p200300d167429600dfbfd83bfa3528c6.dip0.t-ipconnect.de) (Client Quit)
[22:30:37] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[22:30:39] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[22:30:49] *** rud0lf is now known as Chojrak
[22:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:30] *** Chojrak is now known as rud0lf
[22:32:18] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[22:32:19] *** Joins: loki_val (~crabbedha@user/crabbedhaloablut)
[22:32:56] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[22:32:56] *** Quits: teut (~teut@182.69.68.230) (Quit: Client closed)
[22:36:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:36:45] *** Joins: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46)
[22:38:06] *** Joins: wyclif (~wyclif@user/wyclif)
[22:38:15] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[22:39:30] *** Quits: shodan45_ (~quassel@107.161.22.155) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[22:39:49] *** Joins: shodan45 (~quassel@107.161.22.155)
[22:40:55] *** ezzieygu1wuf is now known as ezzieyguywuf
[22:41:06] *** Joins: d00gy (~d00gy@user/d00gy)
[22:41:42] *** Quits: Elzington_ (~Elzington@94.198.42.142) (Quit: Leaving)
[22:42:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:43:07] *** Quits: maharshipatel (~maharship@2409:4041:2e9a:7b4e:947f:ea70:d4c6:a88a) (Quit: Client closed)
[22:43:36] *** Joins: wyclif (~wyclif@user/wyclif)
[22:44:55] *** Quits: y1n (~y1n@178.165.173.39.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[22:46:51] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[22:47:32] *** Joins: teut (~teut@182.69.68.230)
[22:48:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:48:17] <anddam> nedbat: I am in a pain no Unicode can soothe
[22:49:05] *** Joins: jcbsv (~jcbsv@185.247.236.137)
[22:49:07] *** Joins: wyclif (~wyclif@user/wyclif)
[22:50:14] *** Joins: jonaskabrink (~jonaskabr@mue-88-130-56-206.dsl.tropolys.de)
[22:51:53] *** Joins: tspng (~tspng@2a02:168:a1a1:1:8e6:3aef:f9bf:ff0c)
[22:53:16] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:54:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:54:28] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[22:54:36] *** Joins: wyclif (~wyclif@user/wyclif)
[22:55:54] *** Joins: Samian (~Sami@user/samian)
[22:56:40] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[22:57:46] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[22:58:10] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[22:59:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:59:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:00:09] *** Joins: wyclif (~wyclif@user/wyclif)
[23:00:26] <anddam> I have a sequence of 4 bytes, I was just decoding it as utf-8 and passing to a Qt table item widget, until on b'\x01\x00' the runtime dies miserably since the underlying ffi cannot convert that to a signed int
[23:00:40] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:01:08] <anddam> (I have no idea why given it's failing on 0 and that should be withing representation of any int type)
[23:01:36] <anddam> anyway is   ' '.join(f"{k:02d}" for k in bytearray(value))  resonable or is there some value.as_hex() I do not know about?
[23:01:51] <anddam> x/resonable/ c/reasonable/
[23:02:30] <InPhase> anddam: Something in your problem description is confused.  utf-8 has nothing to do with signed ints.
[23:04:32] <InPhase> anddam: If that was not a typo/misphrasing, perhaps unwind a step and explain what your source data is and what your target goal is.
[23:04:35] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[23:04:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:04:52] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:05:38] *** Joins: wyclif (~wyclif@user/wyclif)
[23:05:41] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[23:05:54] <anddam> InPhase: "Something in your problem description is confused. " yes, sounds like me
[23:05:55] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[23:06:25] <Wooble> (plus b'\x01\x00' is a sequence of 2 bytes, not 4...)
[23:06:38] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:07:02] *** Joins: white_magic (~white_mag@91.196.220.228)
[23:07:08] <anddam> step back: I have a GUI, I fill data in tables, I have a "take Whatever input, give me some str instance back" I use to sanitize input to QTableWidgetItem, that accepts str
[23:07:43] <anddam> until now data is coming that is a 4 bytes ID number, and that failed with pain
[23:08:27] <anddam> Wooble: that's because, smart that I am, I minimized my example here, it's actually b'\x01\x00\x00\x00'
[23:08:58] <white_magic> Can someone here recommend a way to handle errors in Python scripts when they are called using crontab/cronjob? I typically call a shell script that invokes a shell script or 2, but sometimes I invoke a specific Python script every day at a certaiin hour. Should I be returning a success or failure condition from a Python script and then capture it
[23:08:58] <white_magic> in bash? Or perhaps I should handle all the error logging within Python, itself? Relately, I started to use a 'cloud logging' service called LogDNA and I might even send alerts to myself under certain conditions.
[23:09:08] *** Quits: jcbsv (~jcbsv@185.247.236.137) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:09:43] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[23:09:50] <anddam> Wooble: but the issue is just the first 0, since this reproduces the issue     from PySide2.QtWidgets import QTableWidgetItem; QTableWidgetItem('\x01\x00', 0)
[23:10:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:10:17] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:10:27] <Wooble> anddam: well, putting a NULL into a GUI doesn't make much sense.
[23:10:31] <anddam> OverflowError, problem is that C null byte ending the line
[23:10:49] <anddam> Wooble: but I didn't know I was going to handle ID as hex bytes
[23:11:09] *** Joins: wyclif (~wyclif@user/wyclif)
[23:11:10] <Wooble> anddam: would it make more sense to just decode it to an integer ID?
[23:11:16] <anddam> now I do, I ask for forgiveness and I wonder how I should handle that
[23:11:16] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[23:11:25] <anddam> Wooble: I'd rather keep the bytes
[23:11:53] <anddam> Wooble: those devices are usually identified between employees spelling the ID
[23:12:10] <Wooble> anddam: you could just use repr(), or your join above is reasonable if you want to display like 01 00 00 00
[23:12:12] *** Quits: dgw (dgw@sopel/admin/dgw) (Quit: Stalemate resolved. Core transfer initiated.)
[23:12:15] <anddam> Wooble: I mean those devices I haven't mentioned and you have no idea what they are
[23:12:25] <anddam> mm repr
[23:12:43] <Wooble> if 01 00 would make sense to the end user, \x01\x00 probably won't. :)
[23:12:51] <anddam> isn't "b'\\x01\\x00'"  way worse?
[23:13:07] <Wooble> maybe?
[23:13:07] <anddam> so the join I wrote it is
[23:13:17] *** Joins: dgw (dgw@sopel/admin/dgw)
[23:13:22] *** Joins: Naan (~naan@user/naan)
[23:13:27] <Wooble> I dunno, I'm a python programmer so I'd appreciate the bytes literal :)
[23:13:49] <anddam> that, or switch to a robot clientele
[23:14:06] <anddam> thanks for the feedback
[23:14:43] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[23:15:32] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[23:15:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:16:41] *** Joins: wyclif (~wyclif@user/wyclif)
[23:17:50] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 260 seconds)
[23:17:53] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[23:19:17] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:19:43] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:20:21] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:21:19] *** Quits: teut (~teut@182.69.68.230) (Quit: Client closed)
[23:21:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:22:06] <anddam> Wooble: ok, just found  .hex()
[23:22:10] *** Joins: wyclif (~wyclif@user/wyclif)
[23:22:43] *** Joins: khrbt (~znc@user/khrbt)
[23:23:44] <Wooble> oh, nice. (also... why does bytes need a .hex() method when hex() builtin already exists but only for numbers? :/)
[23:25:20] *** Joins: minip (~minip@user/minip)
[23:25:36] *** Joins: _xor (~xor@74.215.232.67)
[23:26:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:27:40] *** Joins: wyclif (~wyclif@user/wyclif)
[23:27:56] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[23:29:13] <hexnewbie> Wooble: data.hex() is shorter and easier to read than ''.join(hex(c)[2:].rjust(2, '0') for c in b'abc') or binascii.b2a_hex(b'abc').decode('ascii')
[23:29:26] <hexnewbie> Wooble: Er, b'abc'.hex()
[23:30:10] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[23:30:25] <Wooble> hexnewbie: I was strictly complaining that hex(b'abc') working would have been fine and not needed an added method on bytes objects.
[23:31:17] *** Joins: somlis (~somlis@user/somlis)
[23:32:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:33:16] *** Joins: wyclif (~wyclif@user/wyclif)
[23:33:29] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[23:34:18] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[23:34:21] *** Joins: Auron (~Auron956@user/auron)
[23:35:22] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[23:35:31] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 245 seconds)
[23:38:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:38:20] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 246 seconds)
[23:38:52] *** Joins: wyclif (~wyclif@user/wyclif)
[23:43:29] *** Quits: white_magic (~white_mag@91.196.220.228) (Quit: Client closed)
[23:43:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:44:22] *** Joins: wyclif (~wyclif@user/wyclif)
[23:47:39] *** Joins: Samian (~Sami@user/samian)
[23:48:36] <SnoopJ> sveinse, you might also be interested in https://www.bespokesynth.com/ if you've not yet seen it
[23:49:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:49:30] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:49:53] *** Joins: wyclif (~wyclif@user/wyclif)
[23:54:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:55:23] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:51] *** Joins: bomb-on (~bomb-on@194.144.47.113)
