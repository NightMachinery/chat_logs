[00:00:11] <PMunch> @Patitotective, that is the default behaviour
[00:00:21] <PMunch> You have to use `distinct` to make it not behave like that
[00:01:24] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LV1
[00:02:43] <FromDiscord> <huantian> In reply to @PMunch "https://github.com/PMunch/badger": hmm maybe one day I'll take a crack at getting this on my  atmega32U4 board but that's probably a long way off
[00:03:24] <arkanoid> PMunch: I'll wait for the possibility to reach FOSDEM, otherwhy happy to sponsor
[00:03:38] <PMunch> @huantian, It's build for a Teensy 2.0 which runs the atmega32u4, so it should be as easy as `make upload`
[00:04:15] <PMunch> @Patitotective, yes, like that it will be it's own type and you can't use any of OrderedTables procedures on it
[00:04:21] <FromDiscord> <huantian> oh I didn't realize that↵might check it out in a bit then
[00:04:25] <arkanoid> if I have a seq[Tuple[string,string]] can I unpack during "for a,b in myseq" iteration? I'm getting the index instead
[00:04:49] <FromDiscord> <huantian> you can do `for (a, b) in myseq` or `for a, b in myseq.items` I believe
[00:05:10] <PMunch> @huantian, right now it's built for using port expanders over i2c though, so you might have to delete some bits to make it use internal pins
[00:05:28] <FromDiscord> <Patitotective> In reply to @PMunch "<@762008715162419261>, yes, like that": huh? i think you misunderstood me, i want to be able to use `OrderedTable` procedures
[00:05:41] <PMunch> But should be super easy, only file you should have to edit is badger.nim
[00:05:50] <FromDiscord> <huantian> hm ok
[00:05:55] <FromDiscord> <huantian> is there rotary encoder support?
[00:05:57] <PMunch> @Patitotective, then don't put `distinct` there
[00:06:03] <PMunch> @huantian, not yet
[00:06:23] <PMunch> It's really bare bones, just scanning a matrix and outputting keys over USB
[00:06:39] <PMunch> I wrote it all live on stream, so I focused on just getting everything to work
[00:07:27] <FromDiscord> <huantian> mm makes sense, seems like a pretty cool project though
[00:07:54] <FromDiscord> <Patitotective> In reply to @PMunch "<@762008715162419261>, then don't put": yea, thats the problem, i dont have `distinct` but it doesn't work
[00:08:06] <arkanoid> thanks
[00:08:14] <PMunch> Oh just wait, I'm making it more generic now so that the underlying libraries can be used on more controllers. The plan is to make a super-framework for writing microcontroller applications
[00:08:34] <PMunch> @Patitotective, do you import the tables module where you're using your type?
[00:09:04] <PMunch> If you have that definition in one module and use it from another module that other module still needs to import tables
[00:09:29] <PMunch> You can of course put `import tables; export tables` in the file where you create that type alias though
[00:11:18] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/hLI
[00:12:25] <FromDiscord> <Patitotective> I'm trying to implement an object that can have multiple value types (just like json's node), so `objectV` is the field of an `PObjectType`, which is an `OrderedTable[string, PrefsNode]`↵(`PrefsNode` is my object)
[00:12:30] <PMunch> Well of course
[00:12:39] <FromDiscord> <Elegantbeef> `export tables`
[00:12:49] <PMunch> Your second argument is a string, not a PrefsNode
[00:12:53] <FromDiscord> <Elegantbeef> You dont have the tables module exported so you cannot `table.objectV["lang"] = "es"`
[00:13:28] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LV4
[00:13:39] <FromDiscord> <Patitotective> In reply to @Elegantbeef "You dont have the": all occurs in a same file
[00:13:49] <FromDiscord> <Patitotective> In reply to @PMunch "Your second argument is": hehe that was it thanks 🙃
[00:13:53] <FromDiscord> <Elegantbeef> As an ex C# programmer i default to byte↵(@konsumlamm)
[00:14:11] <FromDiscord> <Patitotective> (edit) "In reply to @PMunch "Your second argument is": hehe ... that" 03added "it was" | 04removed "was it"
[00:14:22] <PMunch> I use byte if I want to use a byte, and I use uint8 if I want a number.
[00:14:36] <PMunch> Well, I try to. I'm not very good at it
[00:14:55] <FromDiscord> <Elegantbeef> Yea i either go `u8` or `byte`
[00:15:02] <FromDiscord> <Elegantbeef> I just dont think about `uint8`
[00:17:32] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LV5
[00:19:36] <arkanoid> when should I prefer "proc `myattribute=`" instead of "proc getMyAttribute" ?
[00:19:40] <PMunch> Hmm, is there a way to create a byte literal?
[00:19:42] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LV7
[00:19:51] <PMunch> I like to use 0xff'u8 for example
[00:19:56] <FromDiscord> <huantian> isn't byte just an alias for uint8?
[00:20:13] <PMunch> arkanoid, well one is a getter and the other is a setter?
[00:20:23] <PMunch> @huantian, I think so, yes
[00:21:02] <arkanoid> PMunch: getter would be "proc myattribute"?
[00:21:16] <PMunch> You should be able to overload `[]=` for string, string @Patitotective 
[00:21:30] <PMunch> arkanoid, sure, that's what I usually do
[00:21:47] <PMunch> Oh well, I'm off to take a shower and go to bed
[00:21:48] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[00:21:59] <FromDiscord> <Patitotective> In reply to @PMunch "You should be able": hmmm, quite long but thanks hehe 🙃
[00:22:16] <FromDiscord> <Elegantbeef> Buh bye
[00:22:24] <FromDiscord> <huantian> In reply to @Patitotective "hmmm, quite long but": I mean it's just like 1-2 lines of code
[00:22:33] <FromDiscord> <huantian> In reply to @PMunch "Oh well, I'm off": good sleeps
[00:22:49] <arkanoid> PMunch, interesting approach, thanks
[00:22:52] <arkanoid> oh, he's gone
[00:23:20] <FromDiscord> <Elegantbeef> Bunch of overloads means more↵(@huantian)
[00:24:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LV8
[00:25:24] <FromDiscord> <Patitotective> why there are two `=`?
[00:25:27] <FromDiscord> <Patitotective> (edit) "why there are two `=`? ... " 03added "what does that mean"
[00:25:29] <FromDiscord> <Patitotective> (edit) "mean" => "mean?"
[00:25:36] <FromDiscord> <huantian> the first one is part of the proc definition
[00:25:41] <FromDiscord> <huantian> the second one is the actual assignment
[00:25:51] <FromDiscord> <Elegantbeef> What huantian said
[00:25:58] <FromDiscord> <Elegantbeef> It's just a single lined proc
[00:26:09] <FromDiscord> <Patitotective> In reply to @huantian "the first one is": what the first means, the return type?
[00:26:22] <FromDiscord> <Patitotective> (edit) "In reply to @huantian "the first one is": what ... themean," 03added "does" | "means," => "mean,"
[00:26:33] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LVa
[00:26:39] <FromDiscord> <Patitotective> oh lol
[00:26:42] <FromDiscord> <Elegantbeef> There is nothing fancy going on nim uses `=` for proc bodies
[00:26:54] <FromDiscord> <Patitotective> let me try
[00:28:17] <FromDiscord> <Elegantbeef> @ajusa\: if you get a chance to update slicerator and test it with your code with peek/reset that'd be nice
[00:28:26] <FromDiscord> <Elegantbeef> I'm using some low level logic to reset now but i dont know if it's safe
[00:29:29] <FromDiscord> <ajusa> In reply to @Elegantbeef "<@102899813149855744>\: if you get": Sure, I'll try that! Hadn't actually integrated it yet, was planning on doing it today.
[00:30:00] <FromDiscord> <Elegantbeef> Nice, it passes my tests but i dont know if it's "right" on complex types
[00:30:19] <FromDiscord> <Elegantbeef> But yea we're at relatively cheap peek only 64bytes are copied
[00:30:45] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LVf
[00:31:08] <FromDiscord> <Patitotective> and if i remove the convert part, infinit recursion
[00:31:32] <FromDiscord> <Elegantbeef> `T: not NiPref`
[00:31:35] <FromDiscord> <Elegantbeef> Or whatever the node is
[00:31:46] <FromDiscord> <Elegantbeef> Generic type constraints are magic
[00:38:17] <FromDiscord> <Elegantbeef> replace `NiPref` for whatever the `toPref` returns
[00:42:55] <FromDiscord> <ajusa> Works perfectly, thanks mr beef
[00:43:23] <FromDiscord> <Elegantbeef> Nice if you have any odd behaviour shoot me a message of course 😀
[00:43:32] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3LVm
[00:44:00] <FromDiscord> <ajusa> sure! looking forward to this landing on Nimble!
[00:58:07] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[00:58:21] *** Joins: anddam (~anddam@user/anddam)
[02:09:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[03:00:11] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:d1fc:dda9:232e:355e) (Remote host closed the connection)
[03:00:54] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:a46d:fd8c:bae7:e48a)
[03:33:31] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:39:54] <NimEventer> New thread by Sixte: Module typing, code reuse and separate compilation , see https://forum.nim-lang.org/t/8795
[03:43:46] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:44:13] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LW1
[03:46:23] <FromDiscord> <Elegantbeef> No
[03:46:45] <FromDiscord> <Elegantbeef> `proc `[]=`[T: not NiPref](node: var PrefsNode, key: string, val: T) = `
[03:47:34] <FromDiscord> <Elegantbeef> Replace `NiPref` for whatever the second type is
[03:48:13] <FromDiscord> <Patitotective> the second type?
[03:49:10] <FromDiscord> <Patitotective> do you mean `PrefsNode`? or the table type, which is `PObject`?
[03:49:22] <FromDiscord> <Patitotective> (edit) "`PObject`?" => "`OrderedTable[string, PrefsNode]`?"
[03:53:31] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LW4
[03:53:37] <FromDiscord> <Elegantbeef> What ever the value is for the table
[03:53:37] <FromDiscord> <Elegantbeef> You have `Table[K,V]` that should be `T: not V` with whatever your V is
[03:54:02] <FromDiscord> <Patitotective> why?
[04:02:18] *** Quits: covoid19 (~covoid19@190.104.112.156) (Quit: Client closed)
[04:02:24] <FromDiscord> <Elegantbeef> why what?
[04:03:04] <FromDiscord> <Patitotective> why `T: not V`?
[04:03:41] <FromDiscord> <Elegantbeef> Cause you dont want to call this proc when `T is V` you want to call the `table[K] = V`
[04:03:59] <FromDiscord> <Elegantbeef> If you remove that it'll always dispatch on this and have stack overflows
[04:04:12] <FromDiscord> <Elegantbeef> Since `node.objectV[key] = newPNode(val)` matches the procedure call
[04:05:02] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/6J6
[04:06:08] <FromDiscord> <Elegantbeef> i mean i dont know why it doesnt i dont know what any of this is
[04:06:12] <FromDiscord> <Elegantbeef> A compiler error or output would be nice
[04:07:30] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LWb
[04:07:49] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LWb" => "https://play.nim-lang.org/#ix=3LWc"
[04:07:59] <FromDiscord> <Elegantbeef> I mean the compiler error says why
[04:08:20] <FromDiscord> <Elegantbeef> `but expression 'val' is of type: PrefsNode`
[04:09:09] <FromDiscord> <Patitotective> so i must do `newPNode` for every element in a sequence?
[04:09:21] <FromDiscord> <Patitotective> (edit) "so ... i" 03added "should" | 04removed "must"
[04:10:30] <FromDiscord> <Patitotective> nvm
[04:10:34] <FromDiscord> <Elegantbeef> Well `proc newPNode(obj: PSeqParam): PrefsNode` you need a `PSeqParam`
[04:10:37] <FromDiscord> <Elegantbeef> Whatever that is
[04:51:25] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[05:01:03] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:18:48] <FromDiscord> <Patitotective> How can I make a type that's just a shortcut for another type?↵https://play.nim-lang.org/#ix=3LWp
[05:19:00] <FromDiscord> <Elegantbeef> You didi
[05:19:06] <FromDiscord> <Patitotective> But it doesn't work
[05:19:10] <FromDiscord> <Patitotective> (edit) "work" => "work, run it"
[05:19:37] <FromDiscord> <Elegantbeef> Read the erroor
[05:19:39] <FromDiscord> <Elegantbeef> error even
[05:19:55] <FromDiscord> <Elegantbeef> `expected var`
[05:20:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/4qN
[05:20:36] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Read the erroor": sorry... hehe ;-;
[05:25:24] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/Vtt
[05:25:42] <FromDiscord> <Elegantbeef> Typically
[05:25:47] <FromDiscord> <Elegantbeef> Unless it's a reference
[05:26:25] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LWs
[05:26:33] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LWs" => "https://play.nim-lang.org/#ix=3LWt"
[05:26:56] <FromDiscord> <Patitotective> What happens when it is a reference?
[05:27:22] <FromDiscord> <Elegantbeef> An immutable reference's fields are mutable
[05:27:30] <FromDiscord> <Elegantbeef> So `var` is only required to change where the reference points
[05:34:58] <FromDiscord> <huantian> sent a code paste, see https://paste.rs/4gX
[05:36:45] <FromDiscord> <huantian> XQueryTree takes `para1: PDisplay, para2: Window, para3: PWindow, para4: PWindow, para5: PPWindow, para6: Pcuint`
[05:37:07] <FromDiscord> <Elegantbeef> Making a window manager?
[05:37:09] <FromDiscord> <Rika> What is wrong?
[05:37:38] <FromDiscord> <huantian> wups forgot a line
[05:37:46] <FromDiscord> <Rika> Lol
[05:37:47] <nrds> <06Prestige99> must be, beef
[05:37:53] <FromDiscord> <Elegantbeef> https://github.com/beef331/goodwm/blob/master/src/goodwm.nim#L47-L55 is how you should do it
[05:38:12] <FromDiscord> <huantian> but the for loop segfaults on the second iteration
[05:39:49] <FromDiscord> <Elegantbeef> Why are you creating a cuint
[05:40:00] <FromDiscord> <Elegantbeef> just do `n = 0.cuint`
[05:40:05] <FromDiscord> <Elegantbeef> then pass `n.addr`
[05:40:31] <FromDiscord> <huantian> oh I can do that? that is helpful
[05:41:43] <FromDiscord> <Elegantbeef> Also you should use XCreate to interact with Xlib
[05:43:31] <FromDiscord> <huantian> trying to get the window of an already existing window though
[05:44:29] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:45:21] <FromDiscord> <Elegantbeef> Anyway everthing else looks good
[05:46:26] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3LWC
[05:46:29] <FromDiscord> <huantian> then segfaults
[05:46:55] <FromDiscord> <huantian> I think I'm doing something incorrect with children/childrens?
[05:47:39] <FromDiscord> <huantian> (edit) "https://play.nim-lang.org/#ix=3LWC" => "https://paste.rs/Sc3"
[05:49:15] <FromDiscord> <congusbongus> do you need to check the return value of XQueryTree
[05:49:17] <FromDiscord> <Elegantbeef> It seems right to me but i've been known to read bad
[05:49:40] <FromDiscord> <Elegantbeef> It returns an error code so they should
[05:51:23] <FromDiscord> <huantian> hm yeah it returns 1
[05:52:23] <FromDiscord> <huantian> why is it failing
[05:53:35] <FromDiscord> <huantian> wait no nonzero is success
[05:57:02] <FromDiscord> <huantian> so that isn't failing
[05:57:30] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[05:59:44] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:59:44] *** neurocyte09170 is now known as neurocyte0917
[06:11:17] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWD
[06:11:26] <FromDiscord> <Elegantbeef> Avoiding "X is not used"
[06:11:37] <FromDiscord> <auxym> oh
[06:11:38] <FromDiscord> <Rika> just doing nothing pretty much
[06:11:40] <FromDiscord> <auxym> so nothing
[06:11:42] <FromDiscord> <auxym> yeah
[06:11:44] <FromDiscord> <auxym> thanks
[06:11:47] <FromDiscord> <Elegantbeef> As you can tell it's "not implemented"
[06:11:52] <FromDiscord> <auxym> heh
[06:27:25] <FromDiscord> <auxym> btw @ElegantBeef, what do you think of my proposal to write all the target_link_libraries stuff in a separate include file for your picostdlib PR?
[06:28:00] <FromDiscord> <Elegantbeef> Seems fine, i'm still disliking the method of writing the linked libraries though
[06:28:04] <FromDiscord> <Elegantbeef> I really dislike the hack
[06:28:56] <FromDiscord> <Elegantbeef> I dont know if you looked at the hack but it's a hack
[06:29:20] <FromDiscord> <Elegantbeef> https://github.com/beef331/picostdlib/blob/683445f825b1ff538133f0aec840f8eafc72dfa6/src/picostdlib/private/linkutils.nim makes me hurt inside
[06:29:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:29:29] <FromDiscord> <auxym> I don't mind the "write some nim code and invoke nim" thing, personally.
[06:29:45] <FromDiscord> <auxym> not a huge fan of "importing this library writes to a file"
[06:30:09] <FromDiscord> <Elegantbeef> I mean we need to propagate to the builder somehow
[06:30:15] <FromDiscord> <Elegantbeef> I'm still lost at the best way to do that
[06:30:20] <FromDiscord> <Elegantbeef> I dont like the searching for headers
[06:30:28] <FromDiscord> <auxym> not sure if there's a better way. Why not scan the nim compiler C files though?
[06:30:30] <FromDiscord> <Elegantbeef> It's probably the least hacky
[06:30:59] <FromDiscord> <auxym> yeah, choice between a hack and a hack 🙂
[06:31:09] <FromDiscord> <Elegantbeef> Cause you can import multiple different ways
[06:31:35] <FromDiscord> <auxym> how so?
[06:31:42] <FromDiscord> <Elegantbeef> `from x import y` `import x as y` `import x except y`
[06:31:55] <FromDiscord> <Elegantbeef> What do you mean?
[06:33:57] <FromDiscord> <auxym> that shouldn't break either method of detecting the import, no? You get the module output as a c file. Or the import writes to the file
[06:34:30] <FromDiscord> <Elegantbeef> Oh i misread
[06:34:46] <FromDiscord> <Elegantbeef> I dont like scanning C files, i'm think the usage of the name might be sensible
[06:35:20] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:35:42] <FromDiscord> <Elegantbeef> I mentioned somewhere about how the files end with `picostdlib@picostdlib@module.c`
[06:35:56] <FromDiscord> <Elegantbeef> That's the least ugly solution imo
[06:36:24] <FromDiscord> <auxym> yeah that sounds reasonable to me too
[06:37:35] <FromDiscord> <Elegantbeef> The down side is that it requires a new `piconim` executable every update
[06:38:58] <FromDiscord> <auxym> every update of what?
[06:39:22] <FromDiscord> <Elegantbeef> picostdlib, anytime a new module is added that needs to be linked
[06:39:26] <FromDiscord> <Elegantbeef> I assume we dont have them all
[06:41:42] <FromDiscord> <auxym> oh, well every time you add a new module, you need to add the logic to detect it in piconim? Sounds reasonable I think
[06:42:35] <FromDiscord> <Elegantbeef> Well i might make a PR for that variant tomorrow
[06:43:18] <FromDiscord> <Elegantbeef> Dont know about the cmake stuff whatsoever though\`
[06:44:21] <FromDiscord> <auxym> yeah pretty new to me too. I'm trying to get a barebones POC working for tinyusb HID. it's a pita.
[06:47:13] <FromDiscord> <Elegantbeef> Yea that was my experience with attempting to get tinyusb to work
[06:47:57] <FromDiscord> <auxym> i got their C example working, even modified for CDC+HID composite, now trying to mix in Nim
[06:49:04] <FromDiscord> <Elegantbeef> Yea i had the C stuff working, just not anything with Nim compiling
[06:50:45] <FromDiscord> <auxym> you're supposed to implement callbacks that they declare in headers, say `uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t buffer, uint16_t reqlen)` where `hid_report_type_t` is an enum
[06:51:07] <FromDiscord> <Elegantbeef> Yea i have macros for that
[06:51:13] <FromDiscord> <Elegantbeef> Or templates
[06:51:57] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWK
[06:52:16] <FromDiscord> <auxym> But nim exports the enum type as `long int` and that fails to compile :S
[06:53:09] <FromDiscord> <Elegantbeef> Are you doing `{.size: sizeof(uint16)}`?
[06:54:32] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWL
[06:54:39] <FromDiscord> <Elegantbeef> Well there is your problem
[06:55:12] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWL
[06:55:21] <FromDiscord> <Elegantbeef> Is it supposed to be `sizeof(byte)`?
[06:55:26] <FromDiscord> <auxym> wait
[06:55:50] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWM
[06:56:03] <FromDiscord> <auxym> are enums not `int`  by default?
[06:56:07] <Amun-Ra> they are
[06:56:15] <FromDiscord> <Elegantbeef> Do i look like a C programmer to you?
[06:56:36] <FromDiscord> <Hamid_Bluri> LOL beef
[06:56:49] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 256 seconds)
[06:57:01] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWN
[06:57:13] <FromDiscord> <auxym> the only discrepancy is the enum:
[06:57:32] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWO
[06:57:55] <FromDiscord> <auxym> nim exports `long int`, gcc is expecting `hid_report_type_t`
[06:58:13] <FromDiscord> <Elegantbeef> Oh you're not doing `importC: "hid_report_type_T"`
[06:58:36] <FromDiscord> <auxym> no. i can try that though
[07:00:50] <FromDiscord> <Rika> im back hello
[07:01:01] <FromDiscord> <auxym> well that's working 👍
[07:01:08] <FromDiscord> <Rika> what shenanigans are you folk up to now
[07:01:13] <FromDiscord> <auxym> c stuff
[07:01:16] <FromDiscord> <Rika> i c
[07:01:19] <FromDiscord> <auxym> fun times
[07:03:28] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWQ
[07:03:43] <FromDiscord> <auxym> how can I get nim to output that `const unsigned char` signature?
[07:03:46] <FromDiscord> <Rika> i dont remember if nim had a way of representing const
[07:04:02] <FromDiscord> <Elegantbeef> https://github.com/beef331/picostdlib/blob/master/src/picostdlib/tusb.nim#L174-L223
[07:04:24] <FromDiscord> <Rika> lol thats major pain
[07:05:04] <FromDiscord> <auxym> lol that's ridiculously nicer that what I have atm (a bunch of crappy c2nim output)
[07:05:21] <FromDiscord> <Elegantbeef> beef2nim
[07:12:24] <FromDiscord> <auxym> unfortunately your `setReportCb` implementation seems to have the same result: gcc rejects it because it's lacking a `const` on a param
[07:12:45] <Amun-Ra> auxym: that's how I do it: https://play.nim-lang.org/#ix=3LWS
[07:14:26] <FromDiscord> <auxym> I think I want to `exportc` a proc though? TinyUSB wants the user to implement some functions (callbacks) that they declare a signature for in their header
[07:15:31] <FromDiscord> <auxym> I can't call `foo`, because there's no actual implementation in the c code
[07:15:35] <Amun-Ra> you have to use {.cdecl.}
[07:16:36] <Amun-Ra> proc somecallback(some c typed params) {.cdecl.} = …
[07:16:51] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3LWT
[07:17:09] <FromDiscord> <auxym> Can I get nim to output that `uint8_t const` signature though?
[07:17:34] <FromDiscord> <Elegantbeef> with the `codegendecl` procs
[07:17:34] <FromDiscord> <Elegantbeef> On the procs\
[07:18:00] <FromDiscord> <auxym> ah yeah, I guess that'd be the only way
[07:20:38] <FromDiscord> <auxym> anyways, enough fun for tonight, gotta sleep
[07:36:39] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:a46d:fd8c:bae7:e48a) (Remote host closed the connection)
[07:37:22] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:97cf:36c6:1f92:6a33)
[07:41:58] <arkanoid> what are the cons of -d:useMalloc? I use it to run valgrind and check for leaks, but I'm not aware what are the cons of leaving it enabled
[07:43:51] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:53:34] <nrds> <06Prestige99> Been having a lot of issues recently reporting through nimlsp by nimsuggest, but the code compiles and runs just fine. Anyone else been having issues?
[07:55:36] <nrds> <06Prestige99> e.g. https://play.nim-lang.org/#ix=3LX0  https://i.imgur.com/oieV8uc.png
[07:57:07] <FromDiscord> <Elegantbeef> Is your nimlsp/nimsuggest not the same version as your compiler?
[07:57:29] <FromDiscord> <Elegantbeef> Nevermind that compiles all the way back in 0.13.0
[07:59:53] <nrds> <06Prestige99> Maybe I'll just ping PMunch about it when he's around, see if he has an idea
[07:59:58] <nrds> <06Prestige99> I'm on 1.6.2
[08:02:16] <nrds> <06Prestige99> ah it's actually just a nimsuggest bug
[08:02:34] <nrds> <06Prestige99> Was able to repro just using nimsuggest, chk 1 on the file
[08:02:42] <FromDiscord> <Elegantbeef> Ah
[08:03:37] <FromDiscord> <Elegantbeef> Wait you do `nimsuggest file.nim` then `chk 1`?
[08:03:44] <nrds> <06Prestige99> yeah
[08:03:52] <nrds> <06Prestige99> happens in 1.6.0 but not 1.4.8
[08:04:19] <FromDiscord> <Elegantbeef> Ah doesnt happen on devel
[08:04:25] <nrds> <06Prestige99> oh
[08:04:43] <FromDiscord> <Elegantbeef> Wait nvm it does
[08:04:46] <nrds> <06Prestige99> it does for me with devel
[08:04:47] <FromDiscord> <Elegantbeef> I somehow wasnt on devel 😀
[08:04:57] <nrds> <06Prestige99> I'll just downgrade to 1.4.8 for now and file a bug
[08:05:17] <FromDiscord> <Elegantbeef> I dont like this bug since it might be related to me
[08:05:25] <nrds> <06Prestige99> lol
[08:05:41] <nrds> <06Prestige99> It also happens on base methods, very easy to repo. It says they aren't a base
[08:06:37] <FromDiscord> <Elegantbeef> Testing with my code breaker
[08:10:05] <FromDiscord> <Elegantbeef> Try with this commit https://github.com/nim-lang/Nim/commit/f373c17ad926b669bb3b5819ae1dff4bde1da88a
[08:11:43] <nrds> <06Prestige99> Is there an easy way to do that with choosenim?
[08:12:56] <FromDiscord> <Elegantbeef> You should be able to do `choosenim install #commitHash`
[08:14:59] <nrds> <06Prestige99> ah it's choosenim #f373c17ad926b669bb3b5819ae1dff4bde1da88a
[08:15:05] <nrds> <06Prestige99> I tried without the # before
[08:15:16] *** Quits: cyraxjoe (~joe@2806:109f:13:79ff:201:2eff:fe80:7df4) (Quit: No Ping reply in 180 seconds.)
[08:15:32] <nrds> <06Prestige99> Filed https://github.com/nim-lang/Nim/issues/19371 - I'm building that commit now
[08:15:35] <FromDiscord> <Elegantbeef> If that doesnt fail try the next commit
[08:16:41] *** Joins: cyraxjoe (~joe@2806:109f:13:79ff:201:2eff:fe80:7df4)
[08:16:56] <nrds> <06Prestige99> failed to build 
[08:17:26] <nrds> <06Prestige99> /home/avahe/.choosenim/toolchains/nim-#f373c17ad926b669bb3b5819ae1dff4bde1da88a/config/nim.cfg(16, 1) Error: invalid command line option: '--hint'
[08:17:45] <nrds> <06Prestige99> Gonna get dinner I'll be back in a bit
[08:17:50] <FromDiscord> <Elegantbeef> Odd
[08:21:51] *** Joins: vicfred (~vicfred@user/vicfred)
[08:23:55] <arkanoid> speaking of nimsuggest, do you have any idea if it is expected it to consider nim files into .cache/nim/myproject_* ?
[08:24:19] <arkanoid> because if yes, I have a problem, if no, I should open a ticket to PMunch
[08:25:05] <FromDiscord> <Elegantbeef> Well if they're importable they should be considered
[08:25:18] <FromDiscord> <Elegantbeef> if the compiler can find them so should the tooling
[08:28:49] <arkanoid> so I have a problem
[08:30:00] <FromDiscord> <Rika> yes
[08:31:27] <arkanoid> but how can I track it down? I am using futhark that generates a nim file in .cache/nim/myproject_d/, if I leave it there I have hundreds of errors in vscode but the code compiles and runs. If I copy the generated nim file into local dir and import it instead of running futhark I've zero errors and code completion works nicely
[08:33:15] <arkanoid> I have a define to switch between the two behaviors, it is immediate: just commenting "--d:futhark" in config.nims makes the errors appears again, but compilation works https://github.com/arkanoid87/nimmap/blob/faa3d11411ee0d029fa3a4f958ce31be1633ca00/src/nimmap.nim#L8
[08:40:15] <FromDiscord> <Elegantbeef> You might be able to add a `config.nims` with `--path:"~.confing/nim/myproject_d`
[08:40:20] <FromDiscord> <Elegantbeef> Thought not overly safe
[08:41:22] <arkanoid> let me try
[08:42:34] <arkanoid> in my case I think it should be --path:"~/.cache/nim/nimmap_d"
[08:43:26] <arkanoid> but no, it is not working
[08:43:52] <FromDiscord> <leorize> I don't think the compiler resolve `~` in path
[08:44:04] <arkanoid> target file is "/hom/jack/.cache/nim/nimmap_d/futhark_ABCBC588AD64774C.nim"
[08:44:12] <arkanoid> *home
[08:44:54] <arkanoid> but even --path:"/home/jack/.cache/nim/nimmap_d" does not solve the problem
[08:45:30] <arkanoid> if I copy futhark_ABCBC588AD64774C.nim into ./src/gdal.nim and do "import gdal" I have perfectly fine error correction/completion
[08:57:55] *** Joins: Lord_Nightmare2 (Lord_Night@user/lord-nightmare/x-3657113)
[09:05:11] *** Quits: szahid (~szahid@user/szahid) (*.net *.split)
[09:05:12] *** Quits: lain (~lain@172.16.254.xxx) (*.net *.split)
[09:05:12] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[09:05:12] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (*.net *.split)
[09:05:13] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[09:05:13] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[09:05:13] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[09:05:13] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[09:05:13] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:09:55] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[09:09:59] *** Quits: Lord_Nightmare2 (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[09:10:13] *** Joins: lain (~lain@172.16.254.xxx)
[09:10:13] *** Joins: szahid (~szahid@user/szahid)
[09:10:13] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[09:10:13] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[09:10:13] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[09:10:13] *** Joins: drewr (~drew@user/drewr)
[09:10:13] *** Joins: tinystoat (~squeek@user/tinystoat)
[09:10:13] *** Joins: flynn (~mcbloch@user/flynn)
[09:16:55] <nrds> <06Prestige99> @Elegantbeef I'm back, not sure why that isn't building. Are you able to build that commit?
[09:17:54] <adigitoleo> do I need to explicitly close the `File` of a `FileLogger`?
[09:22:08] <FromDiscord> <Elegantbeef> I'm not prestige even from source atm
[09:22:24] <nrds> <06Prestige99> hm
[09:23:43] <FromDiscord> <Elegantbeef> Building it now i guess
[09:31:44] <FromDiscord> <Elegantbeef> Yea that's not the breaking change it seems
[09:33:23] <FromDiscord> <Elegantbeef> Built with that commit and also borked
[09:35:29] <FromDiscord> <Elegantbeef> So yay for me
[09:43:32] <nrds> <06Prestige99> Could probably git bisect to figure out the commit, if it'll build that is :P
[09:43:41] <nrds> <06Prestige99> know it's a 1.6.0 bug
[09:44:01] <FromDiscord> <Elegantbeef> well it's between 1.4.8 and that commit
[09:44:11] <nrds> <06Prestige99> yeah
[09:44:40] <FromDiscord> <Elegantbeef> I'm a numpty that just randomly chooses commits and guesses
[09:50:21] <nrds> <06Prestige99> git bisect is great
[10:29:23] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:97cf:36c6:1f92:6a33) (Remote host closed the connection)
[10:30:06] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:393a:180b:7a9e:c656)
[10:44:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[10:54:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:00:29] *** Joins: PMunch (~PMunch@user/pmunch)
[11:05:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[11:19:31] <FromDiscord> <Rika> pmunch do you think its worth it to make a futhark kinda thing that works more like c2nim than a macro or w/e
[11:19:54] <FromDiscord> <Rika> im really not liking the macro idea so far, and would much rather edit the converted file directly
[11:20:17] <PMunch> Well, you're free to copy the file out and edit it to your hearts desire
[11:20:36] <PMunch> It completely defeats the purpose though, but I'm not going to arrest you for it
[11:21:26] <FromDiscord> <Elegantbeef> Of course not norway doesnt have extradition agreements with all the nations of the world!
[11:21:55] <PMunch> The whole point of Futhark is to bring C files into Nim exactly as they are, with some support for changing types if you want to make a more strict alias or something.
[11:22:19] <FromDiscord> <Rika> well its not enough support for what i want to do
[11:22:46] <PMunch> As soon as you edit the Futhark output you've broken the possibility of rebuilding if a new version of the library comes out
[11:22:54] <PMunch> What do you want to do?
[11:23:02] <FromDiscord> <Rika> that's already broken given that i am making a full wrapper and not a thin wrapper
[11:23:27] <PMunch> The idea is that you take the C code into Nim exactly as it appears, then you write your wrapper on top, calling the functions from the library.
[11:23:33] <NimEventer> New post on r/nim by Familiar_Ad_8919: why do we have to import everything, see https://reddit.com/r/nim/comments/s20r04/why_do_we_have_to_import_everything/
[11:23:45] <FromDiscord> <Rika> converting C-style flags (or'ed ints) into sets is somewhat hairy
[11:23:53] <PMunch> This way you will get type mismatch errors if the library updates
[11:24:05] <arkanoid> PMunch: I'm still on that weird clang bug, it's strange, I've been working successfully with futhark until couple hours ago and then suddenly SIGSEGV
[11:24:11] <PMunch> Instead of silent errors that suddenly crashes or allows exploits on runtime
[11:25:03] <PMunch> Hmm, that is very unfortunate. I do remember having some SIGSEGVs while I was developing it, but that was just me actually making mistakes and all those should be fixed
[11:25:28] <PMunch> I mean the error comes from the clang library, so I'm not entirely sure what we can do about it
[11:25:28] <FromDiscord> <Rika> then what would be a better way for me to change what i said
[11:25:42] <FromDiscord> <Rika> or'ed ints into sets and enums
[11:25:58] <arkanoid> PMunch: I agree with leaving the generated futhark nim file in .cache/nim/myproject_*, but the issue with that is that nimsuggests seems not picking it's contents for helping users out. I have to copy that file into local project folder and remove futhark to get bindings+nimsuggest working correctly
[11:25:58] <FromDiscord> <Elegantbeef> Templates/procs that do the Nim \<-\@Rika)
[11:26:07] <FromDiscord> <Rika> no
[11:26:13] <FromDiscord> <Rika> inelegant to me
[11:26:20] <arkanoid> just like here: https://github.com/arkanoid87/nimmap/blob/master/src/nimmap.nim
[11:26:22] <PMunch> Well that's the way to do it
[11:26:27] <FromDiscord> <Elegantbeef> I agree but that's what pmunch suggests if you want
[11:26:28] <arkanoid> sorry: https://github.com/arkanoid87/nimmap/blob/faa3d11411ee0d029fa3a4f958ce31be1633ca00/src/nimmap.nim#L8 here
[11:26:43] <FromDiscord> <Elegantbeef> You can always use futhark like c2nim and just copy the nim files
[11:26:56] <FromDiscord> <Elegantbeef> There is nothing stopping you from automating half the process
[11:27:22] <PMunch> You overload the proc you want to "fix" with a version that takes a set and then you do the conversion and call the underlying function
[11:27:40] <FromDiscord> <Rika> its not just a proc
[11:27:41] <FromDiscord> <Rika> its a type as well
[11:28:08] <PMunch> Same concept applies to types
[11:28:36] <PMunch> You shouldn't force Nim to think C code is something else than what it is. Just build your abstractions on top of the C code like a sane person
[11:28:39] <FromDiscord> <Elegantbeef> You do the cast internally with the template/proc
[11:28:40] <FromDiscord> <Rika> there are facilities for me to add prefixes to every symbol right
[11:28:45] <FromDiscord> <Rika> if there are then that would be better
[11:29:28] <PMunch> Yes, you can create a rename hook (a procedure that gets called upon to rename things)
[11:29:39] <PMunch> And then just add a prefix or postfix that way
[11:30:18] <arkanoid> oh, I've just found that also Yardanico faces the "var cursor = getTranslationUnitCursor(unit)" SIGSEGV, but that happened 01-12-2021
[11:30:35] <PMunch> Or you can have a module that runs Futhark and then have `from myWrapper import nil` and then have to prefix everything with `myWrapper`
[11:30:49] <FromDiscord> <Rika> okay]
[11:30:55] <FromDiscord> <Rika> good enough
[11:31:15] <PMunch> arkanoid, did you check the clang library headers and compare them to the wrapper I use?
[11:31:47] <arkanoid> which wrapper?
[11:32:04] <PMunch> This one: https://github.com/PMunch/futhark/blob/master/futhark.nimble#L15
[11:33:44] <arkanoid> no I havent, but I need some more hint to understand where to check, it's a log of text there
[11:34:38] <PMunch> Well I was thinking compare the call at the point of the SIGSEGV from that wrapper to the actual libclang header on your system
[11:35:17] <arkanoid> sure, let me get it
[11:37:09] <arkanoid> I've already checked that the symbol is present in /usr/lib/x86_64-linux-gnu/libclang-10.so.1
[11:37:36] <arkanoid> but "rg clang_getTranslationUnitCursor" in "/usr/lib/clang/10/include" returns zero results
[11:38:06] <PMunch> Well it would probably be called get_translation_unit_cursor or something I guess
[11:38:28] <PMunch> Wait, clang/10?
[11:38:41] <PMunch> That might be why, I'm running clang/13.0.0
[11:39:51] <arkanoid> the importc in index.nim is "proc getTranslationUnitCursor*(a1: CXTranslationUnit): CXCursor {.importc: "clang_getTranslationUnitCursor", cdecl.}"
[11:40:15] <arkanoid> nm -D /usr/lib/x86_64-linux-gnu/libclang-10.so.1 | grep clang_getTranslationUnitCursor results in 00000000003cf1c0 T clang_getTranslationUnitCursor
[11:40:45] <arkanoid> nm -D /usr/lib/x86_64-linux-gnu/libclang-12.so.1 | grep clang_getTranslationUnitCursor results in 0000000000455710 T clang_getTranslationUnitCursor
[11:40:57] <arkanoid> I have more than one libclang installed
[11:41:24] <arkanoid> But I've been always working with the v 10 so far, and futhark behaved correctly
[11:41:40] <PMunch> Oh right, I see
[11:41:42] <arkanoid> (10 is the one shipped with ubuntu 20.04 LTS)
[11:42:40] <arkanoid> I get same error with both versions (nim c --passl:"-lclang" opir.nim, nim c --passl:"-lclang-12" opir.nim)
[11:42:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:44:18] <arkanoid> question is why I don't ripgrep it in clang headers folder
[11:44:28] <arkanoid> is it a private function?
[11:44:30] <PMunch> I can't seem to find it either
[11:45:46] <arkanoid> seems documented https://clang.llvm.org/doxygen/group__CINDEX__CURSOR__MANIP.html#gaec6e69127920785e74e4a517423f4391
[11:45:47] <PMunch> Aha, on my system it's in /usr/include/clang-c
[11:47:32] <arkanoid> zero results in my /usr/include/clang
[11:47:54] <arkanoid> I see it should be in index.h https://github.com/hdoc/llvm-project/blob/a6ad3505abc7409abd2a4118338b9c85ec2e9f09/clang/include/clang-c/Index.h#L2729
[11:50:56] <arkanoid> got it, is in /usr/lib/llvm-12/include/clang-c/Index.h
[11:53:01] <arkanoid> the original signature is "CINDEX_LINKAGE CXCursor clang_getTranslationUnitCursor(CXTranslationUnit);"
[11:53:22] <PMunch> Yeah I just asked my package manager to list all the files installed for `clang` and then grepped that list for Index.h
[11:53:41] <PMunch> That's the same as it is for me
[11:55:32] <FromDiscord> <Rika> whats the recommended enum entry naming scheme nowadays>
[11:55:34] <FromDiscord> <Rika> (edit) "nowadays>" => "nowadays?"
[11:56:26] <arkanoid> what if the problem in in a linked library used by libclang? https://termbin.com/txld
[11:59:18] <PMunch> I guess we could see if we could find a clang/llvm channel to ask these questions in :P
[11:59:22] <PMunch> Might be more productive
[11:59:33] <PMunch> And @Rika, I'm not sure TBH
[12:01:12] <PMunch> I used to be a fan of pure enums..
[12:01:20] <FromDiscord> <Rika> i recall not exactly needing to prefix enum names with prefixes anymore but yeah
[12:01:33] <FromDiscord> <Rika> they can be disambiguated easily nowadays ig
[12:01:39] <PMunch> Of course
[12:01:54] <FromDiscord> <Elegantbeef> there is the experimental overridedable enums\:D
[12:02:18] <FromDiscord> <Rika> @_@
[12:02:44] <PMunch> Overrideable?
[12:03:00] <FromDiscord> <Elegantbeef> Cant tell if that's a correction or asking
[12:03:15] <FromDiscord> <Rika> asking likely
[12:03:19] <FromDiscord> <Elegantbeef> Overloadable enum sorry
[12:03:28] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/RFCs/issues/373 RFC
[12:03:54] <FromDiscord> <Elegantbeef> Why arent they in the manual somewhere, no clue
[12:04:09] <FromDiscord> <Elegantbeef> Ah nvm i'm dumb they're in the normal manual
[12:04:11] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#types-overloadable-enum-field-names
[12:04:18] <FromDiscord> <Elegantbeef> Not the experimental manual
[12:04:21] <PMunch> I've just never heard of them before :P
[12:04:56] <FromDiscord> <Elegantbeef> They're new in 1.6.0
[12:05:14] <FromDiscord> <Rika> so do i still prefix or not xd
[12:05:26] <FromDiscord> <Elegantbeef> If you use overloadable you do not
[12:05:35] <FromDiscord> <Elegantbeef> otherwise it's up to you
[12:05:39] <FromDiscord> <Rika> if i dont since this is a library
[12:06:28] <FromDiscord> <Elegantbeef> personally i prefer prefix
[12:06:49] <FromDiscord> <Elegantbeef> I dont like the name spacing
[12:06:55] <FromDiscord> <Rika> why not
[12:07:07] <FromDiscord> <Rika> personally im torn
[12:07:12] <FromDiscord> <Rika> both have upsides and downsides
[12:07:17] <FromDiscord> <Elegantbeef> It's just tedious especially when there no ambiguity
[12:07:17] <FromDiscord> <Rika> and im not sure which is better
[12:07:51] <FromDiscord> <Elegantbeef> like if you have `a: MyEnum` i do not like typing `myObj.a = MyEnum.myEnumVal`
[12:07:51] <FromDiscord> <Rika> if theres no ambiguity then you dont have to "namespace" i thought?
[12:08:20] <FromDiscord> <Elegantbeef> I always forget the semantics for enums so i dont recall at the moment
[12:08:51] <FromDiscord> <Elegantbeef> Just dont write your library until 1.8 or 2.0 whenever overloadables are stable 😀
[12:09:11] <FromDiscord> <Rika> gotcha, delay my program by a century
[12:09:22] <FromDiscord> <Elegantbeef> Indeed
[12:09:29] <FromDiscord> <Rika> though i dont know if ill live to 120
[12:09:34] <arkanoid> PMunch: I'm asking in #llvm (oftc) and first idea is ABI mismatch
[12:09:43] <FromDiscord> <Elegantbeef> Well good luck
[12:09:52] <arkanoid> not sure how to handle this hint in our context
[12:09:54] <FromDiscord> <Elegantbeef> Hopefully no one needs the library you're wanting to write
[12:10:12] <FromDiscord> <Rika> prolly not, this is a convenience wrapper more than a thin one
[12:10:36] <FromDiscord> <Rika> theres already a thin wrapper of it but its not "updated" i think or its slightly wrong which led to errors
[12:11:01] <PMunch> Maybe try to wrap clang with Futhark and see if it gives you the same signature :P
[12:13:25] <arkanoid> futhark inception
[12:15:19] <arkanoid> well, the original signature is "CINDEX_LINKAGE CXCursor clang_getTranslationUnitCursor(CXTranslationUnit);", it's just matter of expanding the macros with preprocessor
[12:16:58] <arkanoid> done, here's the expanded version "__attribute__((visibility("default"))) CXCursor clang_getTranslationUnitCursor(CXTranslationUnit);"
[12:37:17] *** Joins: sagax (~sagax_nb@user/sagax)
[12:43:02] <PMunch> Hmm, that looks like it should match what the wrapper says
[12:45:33] <arkanoid> PMunch: I've recovered the list of the installed packages before the error, and matched it with the dynamic libraries needed by libclang
[12:45:51] <arkanoid> the only thing that pops out is linux-libc-dev:amd64 (5.4.0-92.103, 5.4.0-94.106)
[12:46:00] <arkanoid> but not sure if that means anything
[12:47:31] <arkanoid> that package only contains header files, and here it doesn't seem that the error is driven by a .h import
[12:47:34] <arkanoid> but not sure
[12:49:53] <arkanoid> what puzzles me is that the error seems to be into clang-*.so no matter the version
[12:50:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[12:54:32] <PMunch> This happens with all C files right?
[12:54:47] <PMunch> You can't create a simple hello world header and it works?
[12:58:39] <arkanoid> I've been trying to compile a different (old) project that was working before (libgiintrospection) and I got same error. I'm going to build a barebone test case
[12:58:42] *** Joins: jjido (~Denis@94.9.124.97)
[13:05:06] <arkanoid> PMunch: I've created a test similar to the one in your readme using single stb file, but I'm getting same SIGSEGV
[13:05:40] <arkanoid> opir -I/usr/lib/clang/10/include -I/home/jack/nim/futhest/stb /home/jack/.cache/nim/futhest_d/futhark-includes.h
[13:05:43] <PMunch> Hmm
[13:06:18] <arkanoid> sigsegv is always at /home/jack/.nimble/pkgs/futhark-#head/opir.nim(343) opir
[13:06:41] <arkanoid> in the meanwhile I've installed clang-11, so now I have 3 versions to test agains
[13:07:00] <PMunch> Why not clang-13?
[13:07:15] *** Quits: jjido (~Denis@94.9.124.97) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:07:44] <arkanoid> because it is not present in ubuntu LTS repository
[13:08:16] <arkanoid> opir compiles and links successfully to all 3, but same sigsegv
[13:11:43] <PMunch> Since a update triggered it and none of those versions fix it I think this might be related to another dependency of clang..
[13:12:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[13:17:27] <arkanoid> PMunch: sure, but gdb should point to it
[13:17:53] <PMunch> What does it point to now?
[13:18:06] <arkanoid> or at least the backtrace would show libclang calling a symbol in another .so
[13:20:05] <arkanoid> 0x00007ffff62a81d3 in clang_getTranslationUnitCursor () from /usr/lib/x86_64-linux-gnu/libclang-10.so.1
[13:21:13] <PMunch> That's the last part?
[13:22:09] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[13:23:29] <arkanoid> yes, the gdb backtrace stops there
[13:23:36] <arkanoid> before that is nimland
[13:23:47] <arkanoid> #0  0x00007ffff62a71d3 in clang_getTranslationUnitCursor () from /usr/lib/x86_64-linux-gnu/libclang-10.so.1
[13:23:53] <arkanoid> #1  0x0000555555592c52 in NimMainModule ()
[13:24:57] <PMunch> Hmm
[13:26:37] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:26:51] <PMunch> It's really hard to help you when it doesn't crash for me..
[13:28:48] <arkanoid> I wish I didn't do that apt upgrade
[13:29:27] <arkanoid> but it should have a meaningful explanation. It's a compiled .so, and that had not been upgraded
[13:37:34] <PMunch> Yeah, I mean it has to be *something* in that update you did which caused it
[13:38:40] <PMunch> This is part of the reason I switched to Arch in the first place. Apt just lagging so far behind on packages. I mean even if you find the error it is likely that it has been fixed like a year ago and you just have to wait for the next release
[13:41:01] *** Joins: Figworm (FiggyWitIt@user/figworm)
[13:41:02] <arkanoid> PMunch: if I need an upgraded package I have many different alternative ways (nix, container, vm), but here I'm dealing with something that was working before without apparent change in the relevant file
[13:41:14] <arkanoid> here's the list of the upgraded packages: https://termbin.com/pna3
[13:41:25] <FromDiscord> <Rika> Could it be the fact that you didn’t update somehow
[13:41:53] <arkanoid> Rika, what do you mean?
[13:43:44] <arkanoid> gdb shows that the error is in /usr/lib/x86_64-linux-gnu/libclang-10.so.1 and here's the stats: https://termbin.com/eqb7 last change is more than 1 month old
[13:45:18] <arkanoid> and if we consider the modification date, is more than 8 months
[13:50:10] <PMunch> That could be when it was built though, file timestamps can be wonky
[13:52:52] <arkanoid> Sure, you can hack them, but thats not what server distros generally do. Other like nix do them for every package for reproducible builds
[13:57:45] <PMunch> Oh I just meant like if you unzip a folder for example you get the original timestamps
[14:04:48] <arkanoid> Sure it is the build time. The last time a .so is modified is hopefully the linking time.
[14:05:06] <arkanoid> Or some patchelf hack
[14:47:18] <NimEventer> New question by Clarence Liu: Nim Compile - Modify default compile flags on MacOS - issue with clang ld: library not found for -lrt, see https://stackoverflow.com/questions/70680615/nim-compile-modify-default-compile-flags-on-macos-issue-with-clang-ld-libra
[14:56:35] <FromDiscord> <hmmm> yo doods what libs would you use to create something like this in nim https://media.discordapp.net/attachments/371759389889003532/930784821423251486/thing.PNG
[15:00:48] <FromDiscord> <Rika> What
[15:00:51] <FromDiscord> <Rika> Like what’s
[15:00:56] <FromDiscord> <Rika> Graph generation?
[15:00:58] <FromDiscord> <Rika> Sorting?
[15:01:02] <FromDiscord> <Rika> Hash tables?
[15:01:39] <PMunch> Shuffling algorithm?
[15:02:27] <FromDiscord> <hmmm> like some graphical representation that connects similar element from 2 lists. I'll figure the backend logic, I'm just looking for what can I use for the presentation part
[15:04:42] <FromDiscord> <hmmm> I started looking at plots options in python since they have massive libs but still not finding something that models arrows
[15:04:57] <FromDiscord> <Rika> So a graph library
[15:05:03] <FromDiscord> <hmmm> yea something like that
[15:10:05] <PMunch> Neat, trimmed some unnecessary code off-of my keyboard firmware, it is now smaller than the Blink example from Arduino :P
[15:10:49] <PMunch> @hmmm, easiest is probably just to have Nim output Dot/graphviz definitions and then use that tool to build the graph
[15:12:01] <PMunch> Ah there are apparently also some bindings for it: https://github.com/Aveheuzed/nimgraphviz
[15:12:10] <PMunch> So you don't have to create a file and build it externally
[15:18:17] <FromDiscord> <hmmm> graphviz seems like a strong option, still looks a bit heavy weight for my usecase but I can see it working. I want to try to look if I find easier options before committing tho
[15:18:27] <FromDiscord> <hmmm> ty pmunchie 👑
[15:36:12] *** Joins: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21)
[15:45:56] <FromDiscord> <hmmm> scratch that, nimgraphviz is perfect 😃 https://media.discordapp.net/attachments/371759389889003532/930797241772441610/test_graph.png
[15:49:26] <PMunch> I mean it's been around for ages and is built for exactly this kind of thing
[15:49:32] <PMunch> So you'd expect it to be good
[15:51:14] <FromDiscord> <vindaar> definitely better than 'plotting' it \:P
[15:51:18] <FromDiscord> <vindaar> funny\_arrows.png https://media.discordapp.net/attachments/371759389889003532/930798591570739230/funny_arrows.png
[15:51:38] <FromDiscord> <vindaar> (yeah, yeah, I didn't feel like creating a proper arrow 🤣)
[15:51:42] <FromDiscord> <hmmm> hey how you did that vind
[15:51:57] <FromDiscord> <vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3LYJ
[15:52:18] <FromDiscord> <hmmm> dataframes and ggplot
[15:52:38] <FromDiscord> <hmmm> it's very good tbh
[15:53:50] <FromDiscord> <hmmm> I mean dataframes are like the best structure to model my stuff since it's basically 2 lists that gets connected with some logic
[15:55:35] <FromDiscord> <vindaar> well, that may be the case, but I'd still opt for generating graphviz based on the data (maybe use some DF logic for some processing before, sure). At least graphviz gives you a nice figure without specifying everything
[16:24:36] *** Joins: rockcavera (~rc@192.12.112.107)
[16:24:36] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[16:24:36] *** Joins: rockcavera (~rc@user/rockcavera)
[16:33:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[16:41:47] *** Joins: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de)
[16:42:44] <yann-kaelig> Hello
[16:42:59] <yann-kaelig> Maybe you have read this news https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/
[16:43:27] <yann-kaelig> I wonder how this similar things could not happen on nim and why ?
[16:43:48] <FromDiscord> <mratsim> In reply to @yann-kaelig "I wonder how this": use lockfiles
[16:47:16] <FromDiscord> <Rika> It can happen
[16:47:57] <yann-kaelig> I don't understand. So I should use a lockfiles on all the ecternal packages available for nim, to prevent that maybe one day a dev of an external package available for nim could be corrupted ? How can I be also sure that a new package added to the list of nim-lang/packages is "clean"
[16:48:34] <FromDiscord> <mratsim> In reply to @yann-kaelig "I don't understand. So": You audit the package
[16:48:57] <FromDiscord> <mratsim> and before updating you lock at the diff
[16:49:13] <FromDiscord> <mratsim> (edit) "lock" => "look"
[16:49:29] <FromDiscord> <xx_ns> In reply to @yann-kaelig "I don't understand. So": this problem exists with all dependency managers regardless of language
[16:49:41] <FromDiscord> <xx_ns> and to an extent, all package managers even for linux distros
[16:49:59] <FromDiscord> <xx_ns> the difference being that uploaded linux distro packages are usually vetted by a central authority
[16:50:16] <FromDiscord> <mratsim> There is a reason supply chain attacks are getting more popular, especially on Pypi and NPM, it's effective
[16:50:57] <FromDiscord> <Rika> People aren’t taught in mitigating the attacks yet I guess
[16:51:49] <yann-kaelig> I never heard of this on a language like C or C++. Apologize for my ignorance, maybe I missed something that I should learn.
[16:52:06] <FromDiscord> <mratsim> because C and C++ don't have a package manager
[16:53:00] <yann-kaelig> ok, I was aware of that, so there is an issue with these new languages making use of package manager
[16:53:32] <FromDiscord> <mratsim> well even distro packaged C libraries can break everything cough systemd
[16:53:50] <FromDiscord> <mratsim> someone somewhere needs to spend time
[16:54:08] <FromDiscord> <mratsim> it can be the one who depends on that library, a distro maintainer or the end user
[16:54:10] <FromDiscord> <Rika> It’s a problem in C and C++ if you use a package manager
[16:54:13] <FromDiscord> <Rika> It’s not inherent to the language
[16:55:17] <FromDiscord> <mratsim> glibc manages to break everything every couple years
[16:57:17] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[16:58:25] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[17:01:28] <FromDiscord> <haxscramper> I think it is inherent to the algorithm used
[17:01:44] <FromDiscord> <xx_ns> In reply to @yann-kaelig "I never heard of": c/c++ projects usually either simply import symbols from shared libraries on the system where the executable is.. executed, or libraries are compiled in statically in which case they are vendored in the source tree and vetted
[17:01:49] <FromDiscord> <haxscramper> pull-highest vs pull-lowest, and former is more "convenient" as recent discussion indicated
[17:01:56] <FromDiscord> <xx_ns> ie - supply chain does not include an untrusted link
[17:02:09] <FromDiscord> <haxscramper> viewed as more convenient by some people
[17:07:15] <PMunch> I guess GitHub has tried to help with this recently. For popular languages you will get security warnings if you depend on a package that is tagged as insecure.
[17:07:25] <PMunch> Of course then it might be too late
[17:08:31] <PMunch> But yeah, if you lock your versions you should be safe (and vet any updates). It still boggles me how many people have stuff breaking when a rogue dev pushes an edit to a package. Do their live environments just pull in new versions willy-nilly?
[17:09:06] <FromDiscord> <Rika> Yes
[17:09:09] <PMunch> That being said Nimble, unlike NPM, doesn't actually host any packages. So even if you have locked your versions a dev can still just delete their repo..
[17:09:23] <PMunch> And if you don't have a backup you're out of luck
[17:09:42] <FromDiscord> <Rika> NPM hosting the packages doesn’t help, the owner could probably still delete their package
[17:09:52] <PMunch> I'm assuming the lockfile system uses hashes, otherwise they could also hard-push exploits
[17:10:12] <PMunch> @Rika, AFAIK you can't remove or edit previous versions
[17:10:19] <PMunch> The only thing you can do is push a new one
[17:11:25] <FromDiscord> <xx_ns> as a rule of thumb, i commit my node_modules directory alongside source code. This way, diffs between pulled dependencies are highlighted by git itself, which makes it super easy to vet differences. As an added bonus, my CI pipeline does not require internet access after the initial git clone
[17:12:13] <FromDiscord> <xx_ns> coincidentally enough, I am currently conducting a supply chain attack proof of concept on npm right this second (I'm a security researcher)
[17:12:27] <FromDiscord> <xx_ns> i unpublished a package, but have to wait 24 hours before i can publish it again
[17:13:25] <FromDiscord> <xx_ns> getting a 403 `<package-name> cannot be republished until 24 hours have passed.`
[17:14:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:15:31] <PMunch> @xx_ns, adding node_modules to your git repo is a nice way to make your Git repo huge and unwieldy. Generally it's not recommended to do that
[17:16:16] <yann-kaelig> Well, not talking only about security, but I have the feeling that something is wrong with nim, rust, npm and all others languages that use the package manager model. The fact that it is based on one person and everything that comes from that, security, audit and finally the possibility of seeing one day the project disappear. I found a lof of 404 in the nim external package list
[17:20:26] <PMunch> The alternative is writing everything yourself though
[17:20:41] <PMunch> And using that system you won't get much done
[17:21:19] <PMunch> Well, I guess you could wait for someone to set up an organisation to implement libraries for you. But a lot of stuff is maintained by single people
[17:21:39] <FromDiscord> <Rika> In reply to @yann-kaelig "Well, not talking only": Well I’m not aware of any other systems that would be better
[17:21:43] <yann-kaelig> In fact it seems to be fine in a corporate or organisation model ( like mozilla and that where rust comes from ) but in a community model, it's too much 'scattered'
[17:23:00] <FromDiscord> <xx_ns> PMunch: yes, this is usually what people tell me, but i don't care
[17:24:20] <FromDiscord> <xx_ns> it is the approach that google takes, for example
[17:24:21] <FromDiscord> <xx_ns> https://www.jackfranklin.co.uk/blog/check-in-your-node-dependencies/
[17:24:44] <PMunch> @xx_ns, sure you do you, but posing this as a fix to the problem isn't really helpful, because it's literally the opposite of how you're supposed to use Git
[17:25:49] <FromDiscord> <xx_ns> what do you mean by "not supposed to use git"?
[17:26:06] <FromDiscord> <auxym> In a company setting, I think the best way would be to set-up an immutable mirror of the packages you use (old versions cannot be removed or modified) and lockfiles on each project. Still can't get around auditing new packages though.
[17:26:12] <FromDiscord> <xx_ns> node dependencies are code, and you absolutely are meant to use git to commit code and keep track of its history
[17:27:04] <FromDiscord> <xx_ns> you're _not_ supposed to store binaries in git projects (without LFS), but "large amounts of code" is not a problem
[17:27:05] <PMunch> Sure, but not in your own tree
[17:27:26] <szahid> best ide for nim?
[17:27:37] <szahid> vsc?
[17:27:37] <PMunch> szahid, depends on which IDE you like
[17:27:50] <PMunch> And how much you tend to use the IDE
[17:27:59] <FromDiscord> <hmmm> In reply to @PMunch "That being said Nimble,": can nimble store backups if you ask with a flag?
[17:28:33] <PMunch> @hmmm, I meant the external packages, Nimble is just a huge list of repos with some tags and links to where to find them.
[17:28:36] <FromDiscord> <xx_ns> PMunch: i absolutely don't see why not
[17:29:00] <PMunch> @xx_ns, well you can start with the list of things from the article you listed
[17:29:37] <FromDiscord> <xx_ns> ... the article also details why those issues aren't really issues
[17:29:53] <FromDiscord> <hmmm> In reply to @PMunch "<@887269570765791243>, I meant the": no I mean store installed backups on your local machine in a backup folder
[17:30:01] <FromDiscord> <xx_ns> from the same article, "As with anything in software engineering, most "rules" are guidelines, and we're able to side-step them when required."
[17:30:27] <PMunch> I mean if you want to speed up builds, keep a consistent set of packages, etc. you can create another repo with just your node modules that you update when you need it, and then submodule that or something.
[17:31:13] <PMunch> @xx_ns, oh yeah, as I said I'm not going to tell you not to do this. If it fits your use-case and you don't mind the drawbacks I won't stand in your way. But it's not something I would recommend
[17:32:12] <FromDiscord> <xx_ns> i'm just a tad miffed at the statement that my recommendation is "not helpful" when it has clear benefits and is used by very large companies
[17:32:51] <FromDiscord> <xx_ns> the latter being anecdotal, of course, but proof that it works in practice
[17:33:19] <PMunch> Sorry, I didn't mean that is wasn't helpful at all, just that it wasn't helpful as a general solution to the package manager issues debate
[17:33:38] <PMunch> Didn't mean to sound so dismissive
[17:34:24] <FromDiscord> <xx_ns> of course, no worries, and i agree that it is not a solution to the package management issue in general, just said that as a side note
[17:37:17] <PMunch> The whole problem is quite complex though. Even if you check all you node_modules into your repo there's nothing stopping it from containing a `if epochTime() > 1643000000: staticExec("rm -rf ~")`
[17:38:45] <PMunch> And maybe one of the dependencies you're holding back from an update was a critical security fix for a non-disclosed security hole. They won't draw too much attention to it because that would mean disclosing the bug, and you will then be vulnerable until you either update or it is disclosed.
[17:42:23] *** Joins: lumo_e (~enrico@151.29.77.175)
[17:43:25] <FromDiscord> <xx_ns> of course, but you can say that about anything, all dependencies everywhere are ultimately untrusted. The issue with supply chain attacks specifically is the fact that previously benign packages are replaced with malicious versions - when checking node_modules into your tree, you force yourself to be very mindful of vetting dependencies when they are updated
[17:43:44] <FromDiscord> <xx_ns> i'm not advocating against regular patch updates at all
[17:44:05] <FromDiscord> <xx_ns> rather, even patch updates should not be pulled in blindly
[17:44:13] <PMunch> Of course
[17:44:36] <PMunch> At least not if the package isn't actually checked to make sure that it is in fact a patch update
[17:45:01] <PMunch> Nothing that stops a malicious (or even just ignorant) dev from just ticking up the patch number and rewriting their entire API
[17:45:48] <FromDiscord> <hmmm> well apparently the solution is just trust the devs are not out to damage you and just trust them and you will be safe 99.99% of the times, if you need 100% it means you are a business so you have the means to pay someone to inspect the lesser vetted packages every update
[17:48:21] <FromDiscord> <xx_ns> ultimately it comes down to your specific use case and balancing software fast (and trusting/using third party dependencies) vs writing secure software (ie - first party dependencies or a vetting procedure for dependencies)
[17:48:46] <FromDiscord> <xx_ns> in most cases, companies don't have the resources or simply don't want to go the latter route
[17:49:59] <FromDiscord> <hmmm> no one said 100% was free 😃 the alternative is just accept the risk and have some backups for catastrophe scenarios
[17:50:09] <FromDiscord> <haxscramper> In reply to @hmmm "well apparently the solution": I bet in several years we will see a lot of "verified by" packages - someone certainly would be willing to monetize on that
[17:50:34] <FromDiscord> <xx_ns> that's not a bad business idea
[17:50:53] <FromDiscord> <haxscramper> Or maybe this will just become a standard practice, like debian thoroughly reviews things IIRC (not sure how detailed the review is though)
[17:51:43] <FromDiscord> <haxscramper> Or maybe more attention will be given to semantic diff tools, to automate patterns like `static(rm rf)`
[17:52:15] <FromDiscord> <haxscramper> nobody prevents me from doing `var a = "rm"; var b = "rf` and then  merging things together
[17:53:03] <FromDiscord> <haxscramper> then maybe some proxy layer for interpreted languages, some kind of stricter "audit" mode, where it tries to see all the paths that execution can take
[17:53:36] <FromDiscord> <haxscramper> `if epochTime() > 1643000000:` is probably ok, but what about`when (...): static: kill everything`
[17:54:19] <FromDiscord> <xx_ns> as someone who writes malware for a living: there's a million different ways to hide malicious behaviour and backdoors. Ultimately, you _will_ need to be observing behaviour when executed. Static analysis can only get you so far
[17:55:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[17:58:13] <FromDiscord> <Tanguy> Is there a way to make a distinct type implicitly convertible to it's original type without converters?
[18:00:24] <FromDiscord> <haxscramper> no, for user-defined implicit conversion you need to use `converter`, I don't think there is a way around that
[18:04:21] <PMunch> The "verified by" sounds interesting, but you'd probably be out of business the first time you slip up and a package makes it through your vetting process with some kind of breaking bug..
[18:04:36] <PMunch> And as @xx_ns pointed out, vetting packages isn't all that easy
[18:05:03] <PMunch> @Tanguy, implicit conversion is the whole point of a converter, why do you want to avoid them?
[18:08:33] <FromDiscord> <Tanguy> They don't always work
[18:09:12] <FromDiscord> <Tanguy> I was hopping for a simpler shortcut with distinct
[18:11:00] <PMunch> Well the whole goal of distinct is to *not* make the types implicitly convertible
[18:11:42] <yann-kaelig> "all dependencies everywhere are ultimately untrusted" >> That right, but between a dependency built by one person with several users and eyes on it, and a dependency built by many people, I will certainly make more confidence in the second model, the issue being resolved upstream and I have less chance to leave it and touch the 'users'
[18:12:10] <FromDiscord> <Rika> In reply to @PMunch "The "verified by" sounds": well i guess thats why many companies should do it
[18:12:31] <FromDiscord> <Tanguy> Yes, but I basically need: `type test = distinct int`, test -> int = implicit conversion, int -> test: explicit conversion
[18:15:16] <FromDiscord> <Rika> maybe package managers should encourage audits when updating, but thats still a lot of work
[18:15:23] <PMunch> Then a converter is what you're supposed to use
[18:15:32] <FromDiscord> <Rika> or have a slow rollout? and a feedback system?
[18:15:33] <PMunch> Why do you say they don't always work?
[18:15:52] <FromDiscord> <mratsim> NPM and Pypi main feature is low overhead and 0 friction
[18:16:06] <FromDiscord> <mratsim> basically it's production readyness vs happy-go-lucky
[18:16:11] <FromDiscord> <mratsim> (edit) "readyness" => "readiness"
[18:16:41] *** Joins: arkurious (~arkurious@user/arkurious)
[18:17:32] <FromDiscord> <hmmm> In reply to @Rika "well i guess thats": since they will be vetting it internally anyway they might as well share it. Not something like verified by since they would implicitly taking responsability but something like "package xyz ver 0.3.0 used by {BigCorp} for {BigCorpProject}" if that version is good for BigCorp to rely on it should be good for the rest of us
[18:17:33] <FromDiscord> <Rika> long time no see
[18:18:05] <FromDiscord> <mratsim> In reply to @hmmm "since they will be": that's what we do at Status, we pin all dependencies, even our own libraries.
[18:18:24] <FromDiscord> <mratsim> and the Nim compiler
[18:18:47] <FromDiscord> <Rika> In reply to @hmmm "since they will be": it would need to be a hash of the code and not a version, or the host platform should be like npm and not allow changes to code once pushed and versioned
[18:18:50] <PMunch> I mean that's the obvious way to do it
[18:19:12] <PMunch> @Rika, I'd still use a hash just in case
[18:19:20] <PMunch> Never know when you get mitm-ed
[18:19:26] <FromDiscord> <Rika> yeah i guess so
[18:19:31] <PMunch> Or maybe NPM itself could get hacked
[18:19:41] <FromDiscord> <Rika> i mean if the host is compromised then you cant trust anything there at all anymore
[18:19:46] <FromDiscord> <Rika> even hashes
[18:20:00] <PMunch> @hmmm, problem is now BigCorp is paying for vetting the package and BigCompetitor can use it for "free"
[18:20:14] <FromDiscord> <xx_ns> i mean, packages can be (and are) signed
[18:20:18] <FromDiscord> <Rika> In reply to @PMunch "<@887269570765791243>, problem is now": make it anonymous then
[18:20:32] <FromDiscord> <mratsim> just like all Linux kernel development is paid by afew and enjoyed by many.
[18:20:39] <PMunch> "Someone vetted this" doesn't inspire a whole lot of confidence :P
[18:20:46] <FromDiscord> <Rika> vetted by 1, 2, 3, now competitors would need to weigh against "trusting one" or vetting then adding to the auditor count
[18:20:50] <FromDiscord> <Rika> i mean thats the point
[18:21:06] <PMunch> @mratsim, oh yeah, I was just saying that for some companies they wouldn't care to do this
[18:21:15] <FromDiscord> <mratsim> In reply to @Rika "long time no see": 👋
[18:21:41] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:21:41] <FromDiscord> <Rika> a lot of companies prolly wouldnt care
[18:22:04] <FromDiscord> <Rika> such is the issue of open source i guess
[18:22:09] <FromDiscord> <mratsim> Talent is a harder problem than competitors to be honest
[18:22:22] <FromDiscord> <Rika> ~~technically thats literally the problem that caused the supply chain attack~~
[18:22:25] <FromDiscord> <Tanguy> @PMunch in a generic-heavy codebase, I get a nice `Error: cannot instantiate: 'T'` on my generic converter. Will try to do a minimal repro, but in the meantime i'm stuck
[18:22:27] <FromDiscord> <mratsim> attract all the talent with your open-source policy and competitors cannot reuse the code 😉
[18:22:43] <FromDiscord> <Rika> though the dude has more history than just "not being paid by the big corps that use his code"
[18:22:58] <FromDiscord> <mratsim> In reply to @Tanguy "<@!696333749570371585> in a generic-heavy": do you have `foo[T](a: T)` something?
[18:23:10] <FromDiscord> <mratsim> cannot isntantiate T is often because you forgot the [T]
[18:23:18] <FromDiscord> <mratsim> (edit) "isntantiate" => "instantiate"
[18:23:19] *** Quits: lumo_e (~enrico@151.29.77.175) (Quit: Quit)
[18:24:23] <FromDiscord> <Tanguy> Yeah yeah, it works on simple use cases, but when embedded in weird generic stuff, fails
[18:24:32] <FromDiscord> <hmmm> In reply to @PMunch "<@887269570765791243>, problem is now": since all the BigCompetitors will be slurping BigCorp efforts for free I see great opportunity for GoBigOrDieFastStartup to use all the bleeding edge stuff and become the next BigCorp 😃
[18:25:04] <FromDiscord> <mratsim> In reply to @Tanguy "Yeah yeah, it works": I removed all converters from my codebases
[18:25:20] <FromDiscord> <mratsim> I had converters for float->complex and it messed up everything.
[18:25:32] <FromDiscord> <mratsim> I only do converters scoped by template
[18:25:41] <FromDiscord> <Rika> maybe only show the "verified by x" when more than n companies have vetted it? im not sure, this just delays the issue
[18:26:33] <FromDiscord> <Tanguy> Yes, I'm not fond of converters, but I need backward compat and so needs to be able to convert the old type to the new one implicitly, basically
[18:27:18] <FromDiscord> <mratsim> maybe instead of having the converter generic, you create a template and instantiate only concrete converters
[18:27:53] <FromDiscord> <mratsim> like `template createConverter(inType, outType: typedesc): untyped =`
[18:28:22] <FromDiscord> <Tanguy> Mhh seems tricky, don't know which types it's going to be used with (it's for the Future type)
[18:30:47] <FromDiscord> <mratsim> you can also overload all calls that use the new API
[18:31:36] <FromDiscord> <mratsim> you can create an overloading macro similar to https://github.com/mratsim/Arraymancer/blob/61188413abb269471ff5cbf4b9326ddd3c2a38c7/src/arraymancer/private/deprecate.nim#L20-L70
[18:33:15] <FromDiscord> <Tanguy> That's pretty cool
[18:33:40] <PMunch> I have also had code break with converters. I wonder if there's something "wrong" with them or how they're invoked that is the source for these issues
[18:33:41] <FromDiscord> <mratsim> this one is also an overload generator: https://github.com/mratsim/Arraymancer/blob/61188413abb269471ff5cbf4b9326ddd3c2a38c7/src/arraymancer/linear_algebra/helpers/overload.nim
[18:33:56] <FromDiscord> <mratsim> I think here it's generics
[18:34:32] <FromDiscord> <mratsim> you can just modify this part to call a conversion procedure that doesn't need to be a converter - https://github.com/mratsim/Arraymancer/blob/61188413abb269471ff5cbf4b9326ddd3c2a38c7/src/arraymancer/linear_algebra/helpers/overload.nim#L14
[18:35:11] <FromDiscord> <mratsim> usage: https://github.com/mratsim/Arraymancer/blob/61188413abb269471ff5cbf4b9326ddd3c2a38c7/src/arraymancer/linear_algebra/helpers/solve_lapack.nim#L14
[18:41:28] *** Joins: cuibonobo (~cuibonobo@c-73-43-219-210.hsd1.ga.comcast.net)
[18:53:39] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (Ping timeout: 256 seconds)
[19:04:08] *** Joins: Zevv (~Zevvvvv@not.connected.by.freedominter.net)
[19:06:16] <FromDiscord> <Patitotective> Does someone have an example of a parser package parsing json? I've this parser https://github.com/chocobo333/mcmurry but it only have an example of a calculator and `std/parsejson` is raw, and complex
[19:06:24] <FromDiscord> <Patitotective> (edit) "Does someone have an example of a parser package parsing json? I've ... this" 03added "found"
[19:07:07] <FromDiscord> <Patitotective> _honeycomb_'s example is also a calculator
[19:07:13] <FromDiscord> <Patitotective> 😕
[19:07:28] <FromDiscord> <Patitotective> (edit) "a calculator" => "simple"
[19:08:53] <FromDiscord> <Patitotective> _nimly_'s example is also a calculator
[19:12:01] <FromDiscord> <eyecon> Do you really need to reimplement JSON parsing though? There are so many JSON parsers, I thought
[19:12:07] <FromDiscord> <eyecon> Or is this a learning project
[19:12:13] <FromDiscord> <eyecon> In which case more power to you
[19:12:24] <FromDiscord> <Patitotective> i want to parse a syntax similar to json
[19:12:35] <FromDiscord> <Patitotective> https://patitotective.github.io/PREFS/
[19:13:02] <FromDiscord> <Patitotective> (edit) "https://patitotective.github.io/PREFS/" => "sent a code paste, see https://play.nim-lang.org/#ix=3LZS"
[19:13:06] <FromDiscord> <Rika> ah were back to this again
[19:13:09] <FromDiscord> <Patitotective> hehe
[19:13:09] <FromDiscord> <Rika> i forgot youre that guy
[19:13:35] <FromDiscord> <Rika> imo
[19:13:45] <FromDiscord> <Rika> i would just "make my own examples"
[19:13:49] <FromDiscord> <eyecon> Well, I assume you know how to parse the atoms, the complicated part is the recursion
[19:14:00] <FromDiscord> <Rika> not really i dont think
[19:14:12] <FromDiscord> <Patitotective> i dont know which parser to use
[19:14:18] <FromDiscord> <Rika> wdym?
[19:14:27] <FromDiscord> <Patitotective> like, a parser library
[19:14:32] <FromDiscord> <Rika> ah
[19:14:37] <FromDiscord> <mratsim> In reply to @Patitotective "Does someone have an": jsony, nim-json-serialization, .... there are like 7 or so
[19:15:11] <FromDiscord> <Rika> i really like status' serialisation lib, dunno why people arent using it that much
[19:15:29] <FromDiscord> <eyecon> I would just use CBOR for everything if it were up to me
[19:15:33] <FromDiscord> <eyecon> Compact and well-defined
[19:15:42] <FromDiscord> <Rika> cbor is a binary format
[19:15:48] <FromDiscord> <Rika> i assume he wants it to be readable
[19:15:52] <FromDiscord> <Patitotective> yea
[19:15:53] <FromDiscord> <mratsim> there is a chronos dependencies because we need it for testing and we don't have test-only / optional dependencies in nimble :/
[19:15:55] <FromDiscord> <Rika> in which case why invent a new format?
[19:15:59] <FromDiscord> <Rika> just use json....
[19:16:07] <FromDiscord> <mratsim> (edit) "dependencies" => "dependency"
[19:16:12] <FromDiscord> <Rika> In reply to @mratsim "there is a chronos": ah i see
[19:16:20] <FromDiscord> <Patitotective> In reply to @Rika "just use json....": that's not the idea ._.
[19:16:26] <FromDiscord> <Rika> im just sayin
[19:16:56] <FromDiscord> <Patitotective> back to my question, which parser should I use?
[19:17:00] <FromDiscord> <Patitotective> (edit) "back to my question, which parser ... should" 03added "library"
[19:17:11] <FromDiscord> <mratsim> what constraints do you have?
[19:17:12] <FromDiscord> <Rika> if you want you can start with a peg
[19:17:15] <FromDiscord> <eyecon> Do you have a specific reason to implement your own (citing Greenspun) half-assed implementation of half the JSON?
[19:17:18] <FromDiscord> <Rika> in which case id use npeg
[19:17:28] <FromDiscord> <mratsim> In reply to @eyecon "Do you have a": Isn't it about Lisp though?
[19:17:44] <FromDiscord> <Patitotective> In reply to @mratsim "what constraints do you": huh?
[19:17:53] <FromDiscord> <eyecon> In reply to @mratsim "Isn't it about Lisp": It is but I have to think of this every time I hear of a new configuration format nowadays
[19:18:01] *** Quits: Zevv (~Zevvvvv@not.connected.by.freedominter.net) (Ping timeout: 256 seconds)
[19:18:13] <FromDiscord> <eyecon> The idea is the same
[19:18:21] <FromDiscord> <mratsim> In reply to @Patitotective "huh?": well what development constraint and design constraint do you have?
[19:18:27] <FromDiscord> <Rika> In reply to @Patitotective "huh?": its a kinda-difficult question, probably about what kind of language it is in the chomsky hierarchy to be able to choose which type of parser
[19:18:30] <FromDiscord> <Rika> ah
[19:18:35] <FromDiscord> <Rika> misinterpretation galore
[19:18:36] <FromDiscord> <eyecon> Every human-readable declarative configuration language converges to one of JSON, YAML or TOML
[19:19:31] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[19:19:43] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LZT
[19:19:56] <FromDiscord> <Rika> In reply to @eyecon "Every human-readable declarative configuration": i'd wish someone made an ultra-YATOJSONML that combined each's benefits
[19:20:09] <FromDiscord> <mratsim> There are way more but see the many json read/writer: https://github.com/treeform/jsony/blob/master/tests/bench.nim#L2-L10
[19:20:28] <FromDiscord> <Rika> lmfao tha reaction
[19:20:39] <FromDiscord> <mratsim> jsony, jason, eminim, packedjson, json-serialization, json
[19:21:56] <FromDiscord> <mratsim> if you want to code-gold on loc, I guess npeg.
[19:22:02] <FromDiscord> <mratsim> code-golf
[19:22:17] <FromDiscord> <Patitotective> ill try npeg
[19:22:18] <FromDiscord> <Patitotective> thanks
[19:22:20] <FromDiscord> <Patitotective> 🙃
[19:24:08] <FromDiscord> <mratsim> there is a json parser in the tests if you want to use that as a reference
[19:24:49] <FromDiscord> <mratsim> https://github.com/zevv/npeg/blob/master/tests/examples.nim#L85-L107
[19:36:38] <FromDiscord> <auxym> json sort of sucks for human-writeable config though, cause no comments and no trailing commas
[19:37:49] <FromDiscord> <auxym> plain old ini, json5, toml or kdl are probably the best for that IMO. (yaml has... issues)
[19:38:04] <FromDiscord> <eyecon> I root for TOML
[19:38:06] <FromDiscord> <eyecon> FWIW
[19:38:21] <FromDiscord> <eyecon> Nice, intuitive, relatively capable
[19:40:38] <FromDiscord> <auxym> agreed. toml's biggest disadvantage is probably deeply nested structures, but that should hopefully not come up for the "human writeable config" usecase (or you have bigger issues)
[19:44:50] <FromDiscord> <Rika> same here
[19:45:07] <FromDiscord> <Rika> config should probably be max. 3 depth
[19:45:19] <FromDiscord> <Rika> and 3 is already kinda pushing it
[19:45:22] <FromDiscord> <Rika> so not much of an issue id say
[20:05:55] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:08:35] *** Parts: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de) ()
[20:13:46] *** Joins: rockcavera (~rc@192.12.112.107)
[20:13:46] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[20:13:46] *** Joins: rockcavera (~rc@user/rockcavera)
[20:20:07] <FromDiscord> <IsaacPaul> big fan of json5 here. Simple and explicit.
[20:22:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[20:32:46] <FromDiscord> <Patitotective> Can Nim `char`s be defined like `Print  <- {'\x21'..'\x7e',' '}, # Visible characters and spaces`?↵(npeg)
[20:34:09] <FromDiscord> <Patitotective> is there a place where i could see how nim type's grammar is defined?
[20:34:34] <FromDiscord> <Patitotective> like this https://nim-lang.org/docs/manual.html#syntax-grammar↵but for types
[20:46:47] <FromDiscord> <mratsim> In reply to @Patitotective "Can Nim `char`s be": Nim char are 0..255
[20:46:50] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:46:52] <FromDiscord> <mratsim> the same as C
[20:47:15] <FromDiscord> <hmmm> uh oh, I forgot again how to zip two seqs into a std table, halp pls 😑
[20:47:40] <FromDiscord> <mratsim> In reply to @hmmm "uh oh, I forgot": import sequtils?
[20:47:44] <FromDiscord> <hmmm> oh
[20:47:59] <FromDiscord> <hmmm> I don't think I did it with sequtils when I did it the last time
[20:51:01] <FromDiscord> <hmmm> oh yea I used zip, ty miri
[20:51:52] <FromDiscord> <Rika> miri?
[20:52:15] <FromDiscord> <hmmm> 😅
[21:20:40] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[21:47:09] <FromDiscord> <yallxe> hi, how do I compile nim application without any console/window?
[21:50:29] <FromDiscord> <Rika> --app:gui? not sure
[22:05:15] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[22:05:16] *** Quits: cyraxjoe (~joe@2806:109f:13:79ff:201:2eff:fe80:7df4) (*.net *.split)
[22:05:16] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[22:05:16] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[22:05:16] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[22:05:17] *** Quits: dv2 (~dv2@eclipse.oxfordfun.com) (*.net *.split)
[22:05:17] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[22:05:17] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: termer (termer@2600:3c02::f03c:91ff:fe1c:eca1) (*.net *.split)
[22:05:18] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[22:05:18] *** Quits: euantorano (sid180289@id-180289.helmsley.irccloud.com) (*.net *.split)
[22:05:18] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[22:05:19] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (*.net *.split)
[22:05:19] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[22:05:19] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[22:05:20] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[22:05:20] *** Quits: ecs (~ecs@user/ecs) (*.net *.split)
[22:05:20] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[22:05:21] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (*.net *.split)
[22:05:22] *** Quits: robertmeta (sid514@user/robertmeta) (*.net *.split)
[22:05:22] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[22:05:22] *** Quits: rockcavera (~rc@user/rockcavera) (*.net *.split)
[22:05:23] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (*.net *.split)
[22:05:24] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (*.net *.split)
[22:05:25] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[22:05:25] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[22:05:26] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[22:05:26] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (*.net *.split)
[22:05:26] *** Quits: averell (~averell@user/averell) (*.net *.split)
[22:05:27] *** Quits: meowray (MaskRay@user/meowray) (*.net *.split)
[22:05:29] *** Quits: toothlessgear (2c15493d69@user/toothlessgear) (*.net *.split)
[22:05:29] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[22:05:30] *** Quits: zgasma[m] (~mckaymatr@2001:470:69fc:105::1:627c) (*.net *.split)
[22:05:30] *** Quits: xet7 (~xet7@user/xet7) (*.net *.split)
[22:05:30] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (*.net *.split)
[22:05:30] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[22:05:31] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[22:05:31] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[22:05:32] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[22:05:32] *** Quits: adium (adium@user/adium) (*.net *.split)
[22:05:33] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (*.net *.split)
[22:05:33] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[22:05:33] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[22:05:34] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[22:05:34] *** Quits: Yardanico (~quassel@user/yardanico) (*.net *.split)
[22:05:34] *** Quits: NimEventer (~NimBot@78.47.140.224) (*.net *.split)
[22:05:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (*.net *.split)
[22:05:34] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (*.net *.split)
[22:05:34] *** Quits: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21) (*.net *.split)
[22:05:35] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (*.net *.split)
[22:05:35] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (*.net *.split)
[22:05:35] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[22:05:36] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[22:05:36] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[22:05:36] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[22:05:37] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[22:05:37] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[22:05:38] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[22:05:38] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (*.net *.split)
[22:05:39] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[22:05:39] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[22:05:39] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[22:05:39] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (*.net *.split)
[22:05:39] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[22:08:44] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[22:09:52] *** Joins: oprypin_ (~irc@pryp.in)
[22:09:52] *** Joins: MightyJoe (~joe@2806:109f:13:79ff:201:2eff:fe80:7df4)
[22:09:52] *** Joins: hexeme (~hexeme@user/hexeme)
[22:09:52] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[22:09:52] *** Joins: termer_ (termer@2600:3c02::f03c:91ff:fe1c:eca1)
[22:09:52] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[22:09:52] *** Joins: euantorano (sid180289@id-180289.helmsley.irccloud.com)
[22:09:52] *** Joins: oisota (~oisota@user/oisota)
[22:09:52] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:09:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[22:09:52] *** Joins: rockcavera (~rc@user/rockcavera)
[22:09:52] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[22:09:52] *** Joins: neurocyte09170 (~neurocyte@user/neurocyte)
[22:09:52] *** Joins: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21)
[22:09:52] *** Joins: sagax (~sagax_nb@user/sagax)
[22:09:52] *** Joins: vicfred (~vicfred@user/vicfred)
[22:09:52] *** Joins: anddam (~anddam@user/anddam)
[22:09:52] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[22:09:52] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[22:09:52] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[22:09:52] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[22:09:52] *** Joins: zgasma[m] (~mckaymatr@2001:470:69fc:105::1:627c)
[22:09:52] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[22:09:52] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[22:09:52] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[22:09:52] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[22:09:52] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[22:09:52] *** Joins: jkl1337 (~jkl@user/jkl)
[22:09:52] *** Joins: rb (~augh@theguntretort.com)
[22:09:52] *** Joins: [R] (~rs@genoce.org)
[22:09:52] *** Joins: ecs (~ecs@user/ecs)
[22:09:52] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[22:09:52] *** Joins: mahlon (~mahlon@martini.nu)
[22:09:52] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[22:09:52] *** Joins: robertmeta (sid514@user/robertmeta)
[22:09:52] *** Joins: meowray (MaskRay@user/meowray)
[22:09:52] *** Joins: averell (~averell@user/averell)
[22:09:52] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[22:09:52] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[22:09:52] *** Joins: NimEventer (~NimBot@78.47.140.224)
[22:09:52] *** Joins: Yardanico (~quassel@user/yardanico)
[22:09:52] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[22:09:52] *** Joins: mjsir911 (~bnc@user/mjsir911)
[22:09:52] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[22:09:52] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[22:09:52] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[22:09:52] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[22:09:52] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[22:09:52] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[22:09:52] *** Joins: xet7 (~xet7@user/xet7)
[22:09:52] *** Joins: adium (adium@user/adium)
[22:09:52] *** Joins: dom96 (~dom@mail.nim-lang.org)
[22:09:52] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[22:09:52] *** Joins: madprops (hj8oijo@user/madprops)
[22:09:52] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[22:09:52] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[22:09:52] *** Joins: gshumway (~gshumway@user/gshumway)
[22:09:52] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[22:09:52] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[22:09:52] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[22:09:52] *** Joins: ozzz (~oz@46.49.41.80)
[22:10:32] <FromDiscord> <yallxe> In reply to @Rika "--app:gui should disable the": works! what about `echo`? will it just ignore all the `echo` statements?
[22:10:33] <FromDiscord> <Rika> no it still runs, its just "hidden"
[22:10:33] <FromDiscord> <Rika> afaik
[22:12:22] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[22:14:40] *** Joins: Ekho- (~Ekho@user/ekho)
[22:15:30] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[23:03:47] <FromDiscord> <Patitotective> In reply to @mratsim "Nim char are 0..255": 0..255?
[23:09:32] <nrds> <06Prestige99> a range from 0 to 255
[23:11:22] <FromDiscord> <demotomohiro> !eval echo char.low, ",", char.high
[23:11:29] <Amun-Ra> the difference is 'a' in nim is char, 'a' in C is int
[23:12:38] <FromDiscord> <el__maco> its not
[23:12:54] <Amun-Ra> hm?
[23:12:56] <FromDiscord> <el__maco> I mean in C 'a' is char
[23:12:57] *** Quits: joshbaptiste (~josh@192.210.151.34) (Ping timeout: 240 seconds)
[23:12:59] <FromDiscord> <Patitotective> and strings are just a chain of chars? or do they have a different range
[23:13:13] <Amun-Ra> el__maco: nope, check the standard
[23:13:40] <FromDiscord> <el__maco> In reply to @Amun-Ra "<@266582742307700737>: nope, check the": https://en.cppreference.com/w/cpp/language/character_literal
[23:13:55] <FromDiscord> <el__maco> that's c++ but I'm not sure C is any different
[23:14:12] <Amun-Ra> el__maco: yes, it's char in C++
[23:14:16] <FromDiscord> <el__maco> at some point the standard has been in my head but I have forgotten most of it
[23:14:54] <FromDiscord> <xx_ns> @yallxe I hope whatever you're writing is legal
[23:14:54] <Amun-Ra> in C, character literals are ints
[23:15:12] <FromDiscord> <xx_ns> or, rather, used in a legal way
[23:16:55] <Amun-Ra> el__maco: C99, 6.4.4.4p10 "An  integer  character  constant  has  type int"
[23:18:23] <FromDiscord> <el__maco> I see. It seems to be even in C89
[23:18:37] <Amun-Ra> yes
[23:19:00] <Amun-Ra> it predates ansic c, k&r had that too
[23:19:18] <FromDiscord> <el__maco> I guess it makes some sense, since the integer promotion takes place and the original C doesn't have many situation where that would make a difference?
[23:20:58] <FromDiscord> <el__maco> (edit) "I guess it makes some sense, since the integer promotion takes place ... andsituations" 03added "anyways" | "situation where that" => "situations in which having a char literal" | "difference?" => "difference 🤔"
[23:21:37] <Amun-Ra> mhm
[23:22:08] <FromDiscord> <el__maco> apparently nim chars are unsigned however, most C compilers provide signed chars by default
[23:22:58] <Amun-Ra> and again, default sigedness in C char is… weird ;>
[23:23:32] <FromDiscord> <el__maco> it is, a bit
[23:23:35] <Amun-Ra> (it's implementation defined)
[23:23:51] <FromDiscord> <el__maco> I guess its in some ways consistent, since all other integer types are signed by default
[23:36:19] <FromDiscord> <Ksr> Are `typedesc[Type]` and `type Type` the same in proc signatures?
[23:36:57] <FromDiscord> <Ksr> I  could not find any thing on `type Type` in proc signatures in the docu.
[23:37:04] <FromDiscord> <Ksr> (edit) 04removed "" | "any thing" => "anything"
[23:40:52] *** Joins: neurocyte091707 (~neurocyte@user/neurocyte)
[23:42:39] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[23:42:39] *** neurocyte091707 is now known as neurocyte09170
[23:42:41] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[23:50:46] <FromDiscord> <yallxe> In reply to @xx_ns "<@336955873790525441> I hope whatever": its not, but used in legal way
[23:51:35] <FromDiscord> <yallxe> im not gonna distribute it
[23:51:44] <FromDiscord> <xx_ns> In reply to @yallxe "its not, but used": elaborate?
[23:53:14] <FromDiscord> <yallxe> ?
[23:54:20] <FromDiscord> <xx_ns> what do you mean by what you said
[23:54:55] <FromDiscord> <yallxe> im writing a malware but using  in educational purposes and not distributing it
[23:55:05] <FromDiscord> <xx_ns> it's not illegal to write malware, its use and specifically who you're targeting is what would make it illegal
[23:55:08] <FromDiscord> <xx_ns> okay
[23:56:14] <FromDiscord> <xx_ns> if i may ask, what are these educational purposes?
[23:56:29] <FromDiscord> <xx_ns> it's easy to say that
[23:57:13] <FromDiscord> <xx_ns> not that I'm accusing you of anything, but I think most people would feel easier helping you overall if they knew what it exactly is you're doing
[23:57:20] <FromDiscord> <yallxe> treat it as a research
[23:57:59] <FromDiscord> <yallxe> i mean i try to reverse some shitty antiviruses
[23:58:53] <FromDiscord> <yallxe> pls pm me if you want to ask something
