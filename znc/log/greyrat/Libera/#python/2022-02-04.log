[00:00:29] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[00:00:50] *** Joins: djapo_ (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[00:00:52] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[00:02:37] *** Quits: gambl0re (~gambl0re@cpe688f2e1852a3-cm688f2e1852a0.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[00:03:07] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[00:03:17] *** Quits: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 240 seconds)
[00:04:35] *** Quits: cybercrysis (~cybercrys@190-198-104-174.dyn.dsl.cantv.net) (Quit: Client closed)
[00:04:49] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[00:06:01] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Remote host closed the connection)
[00:07:11] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[00:07:12] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[00:07:31] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:08:16] *** Quits: iwkse (~iwkse@iurit.com) (Ping timeout: 245 seconds)
[00:08:34] *** Joins: jkl (~jkl@user/jkl)
[00:09:01] *** Quits: nikomo (~quassel@nikomo.fi) (Ping timeout: 240 seconds)
[00:09:22] *** Joins: elwoodpd (~elwoodpd@host-92-8-70-132.as13285.net)
[00:10:15] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:10:24] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:11:07] *** Joins: trace987 (~trace@ip5f5ad14d.dynamic.kabel-deutschland.de)
[00:11:10] *** Quits: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:11:24] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[00:11:35] *** Quits: jkl (~jkl@user/jkl) (Client Quit)
[00:11:53] *** Joins: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it)
[00:12:29] *** Quits: KeiraT (~k@lulzsec.co.uk) (Quit: KeiraT)
[00:12:31] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:12:31] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[00:12:47] *** Joins: dme86 (~dan@user/dan86)
[00:12:49] <CapitaoJonas> wazzap, anyone alive?
[00:12:59] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (Ping timeout: 256 seconds)
[00:13:01] *** Joins: jkl (~jkl@user/jkl)
[00:13:12] <SnoopJ> yep
[00:13:20] <mat001_> How could I get HTTP user-agent from this constructed HTTP event? Headers only include {'Content-Type': 'application/json'}   https://github.com/optimizely/python-sdk/blob/master/optimizely/event_builder.py#L39. But no user-agent information. How could I get user agent info from the request payloag?
[00:13:37] <CapitaoJonas> Nice, where are you from brother?
[00:13:57] <mat001_> Is there such thing as the default user-agent if you don't provide one/
[00:14:36] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[00:14:45] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[00:14:51] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8) (Ping timeout: 250 seconds)
[00:15:41] <FunkyBob> mat001_: there's no specific reason it needs to set one
[00:15:43] *** Quits: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it) (Client Quit)
[00:15:47] *** Joins: Y4kuzi (~provision@85.159.233.183)
[00:15:58] *** Joins: nikomo (~quassel@nikomo.fi)
[00:16:21] <mat001_> FunkyBob: u think there is a programmatic way to print it's info from that example file?
[00:16:37] <mat001_> I can generate that event and get the request payload I guess...
[00:16:55] <FunkyBob> mat001_: if they're not specifying it (and 'user-agent' doesn't appear in the codebase, so it seems they don't)
[00:16:57] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[00:17:08] <FunkyBob> then _maybe_ requests is setting it... though I doubt it
[00:17:40] <mat001_> FunkyBob: I see. So headres definition is completely in developer's hands, no efault values. user-agent would be browser info etc
[00:18:23] *** Joins: iwkse (~iwkse@iurit.com)
[00:18:24] <FunkyBob> that's what I'd hope... and a little checking the docs supports this
[00:18:41] *** Joins: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it)
[00:18:43] <FunkyBob> is there a specific problem you think the user-agent header might help you fix?
[00:20:19] *** Quits: CapitaoJonas (~CapitaoJo@72.2.239.74) (Read error: Connection reset by peer)
[00:20:43] *** Joins: CapitaoJonas (~CapitaoJo@72.2.239.74)
[00:20:56] <FunkyBob> mat001_: ?
[00:21:57] <mat001_> I mean, one can define headers right? YOu can only specify Content-Type for example. So what happens if you don't set user-agent value? Do browsers add that to the request payload?
[00:21:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[00:22:00] *** Joins: crashrep (~crashrep@user/crashrep)
[00:22:18] *** Quits: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it) (Client Quit)
[00:22:23] <mat001_> not strictly Py topic, but it relates to a Py code example
[00:22:57] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[00:23:18] *** boris[m]12 is now known as zb[m]
[00:23:37] <mat001_> Someone in my company asked me what user-agent info that SDK (link I shared) might generate. But I'm a bit struggling to find that out
[00:24:49] <FunkyBob> probably none... but you could set up a line in your /etc/hosts to control where it posts to, and see what it actually sends
[00:24:50] *** Joins: d1cor (~diego@179.63.242.122)
[00:24:57] <FunkyBob> instead of trying to dig through however many layers
[00:26:02] <jinsun__> if it ends up going through the stdlib urllib.request (which requests does) then it is set here https://github.com/python/cpython/blob/v3.10.2/Lib/urllib/request.py#L1718
[00:26:05] <FunkyBob> mat001_: did they give any indication why t hey cared?
[00:26:52] <mat001_> Seemed like they would
[00:26:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:26:55] *** Joins: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it)
[00:27:18] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:28:31] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[00:28:59] *** Joins: RabidToaster1 (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:29:42] *** Quits: paul424 (~tom@ip-5-172-232-177.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:30:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:31:47] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:31:47] *** RabidToaster1 is now known as RabidToaster
[00:31:58] *** Quits: l4yer (~l4yer@2001:ac8:31:8900:1012:29b6:fb45:418b) (Read error: Connection reset by peer)
[00:33:37] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[00:34:40] *** Quits: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:35:34] *** Quits: djapo_ (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[00:35:48] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[00:37:04] *** Quits: CapitaoJonas (~CapitaoJo@72.2.239.74) (Read error: Connection reset by peer)
[00:37:42] *** Joins: CapitaoJonas (~CapitaoJo@72.2.239.74)
[00:37:49] *** Joins: djapo (~archangel@user/djapo)
[00:38:09] *** Joins: l4yer (~l4yer@2001:ac8:31:8900:1012:e31a:385d:4cc5)
[00:38:11] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[00:38:27] *** Parts: agireud (~agireud@user/agireud) ()
[00:38:28] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[00:39:30] *** Quits: CapitaoJonas (~CapitaoJo@72.2.239.74) (Read error: Connection reset by peer)
[00:39:40] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc)
[00:39:53] *** Joins: CapitaoJonas (~CapitaoJo@72.2.239.74)
[00:40:11] *** Quits: fxhp (~fxhp@d-206-53-88-50.ct.cpe.atlanticbb.net) (Quit: WeeChat 1.9.1)
[00:40:19] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.4)
[00:40:38] *** Quits: elwoodpd (~elwoodpd@host-92-8-70-132.as13285.net) (Quit: Leaving)
[00:40:45] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[00:41:17] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[00:41:32] *** Joins: shad (~shad@user/shad)
[00:41:56] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[00:42:38] *** Joins: dme86 (~dan@user/dan86)
[00:42:44] *** Joins: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it)
[00:43:06] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[00:43:35] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[00:43:58] *** Joins: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net)
[00:44:09] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:45:29] *** Quits: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net) (Remote host closed the connection)
[00:46:11] *** Quits: argument (~0ptions@user/argument) (Ping timeout: 256 seconds)
[00:46:19] *** Joins: rixycan (~rixycan@modemcable253.165-177-173.mc.videotron.ca)
[00:46:53] *** Joins: Masterphi (~Masterphi@user/masterphi)
[00:47:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[00:47:56] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:48:08] *** Quits: rixycan (~rixycan@modemcable253.165-177-173.mc.videotron.ca) (Quit: Konversation terminated!)
[00:48:56] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:49:49] *** Joins: Stas_ (~Stas@78.162.42.17)
[00:51:45] *** Quits: vladoski (~foo@93-36-219-239.ip62.fastwebnet.it) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:51:50] *** Joins: eyepeetee (~aa@024-151-038-076.res.spectrum.com)
[00:52:33] *** Quits: briian (uid321220@id-321220.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:52:59] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl488773kq551v5c1.ipv6.telus.net) (Quit: Leaving)
[00:53:37] *** Quits: trace987 (~trace@ip5f5ad14d.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:53:47] *** Quits: Stas__ (~Stas@78.162.42.17) (Ping timeout: 256 seconds)
[00:54:55] *** Quits: Esexe_ (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[00:56:01] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[00:56:07] *** Joins: panella32 (~panella32@154.6.22.15)
[00:57:03] *** Joins: KeiraT (~k@lulzsec.co.uk)
[00:57:35] *** Joins: ShArkZ (sharkz@user/sharkz)
[00:57:48] *** Parts: ShArkZ (sharkz@user/sharkz) ()
[00:57:50] *** Joins: saddy (~saddy@dslb-002-207-086-013.002.207.pools.vodafone-ip.de)
[00:59:38] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:01:45] *** Joins: Gudddu (~Guddu@66.203.113.253)
[01:01:56] <evidlo> are you not allowed to unpack slices like this?  array[*slices]
[01:02:11] *** Joins: kickingvegas (~cchoi@c-67-170-234-150.hsd1.ca.comcast.net)
[01:02:58] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (Remote host closed the connection)
[01:03:30] *** Joins: Guddddu (~Guddu@59.95.234.221)
[01:03:31] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[01:04:37] <evidlo> where slices is something like [slice(1, 2, 3), slice(4, 5, 6)]
[01:05:07] *** Quits: panella32 (~panella32@154.6.22.15) (Quit: Textual IRC Client: www.textualapp.com)
[01:05:17] *** Quits: Guddu (~Guddu@59.95.234.221) (Ping timeout: 240 seconds)
[01:05:44] <evidlo> oh, I just need to drop the *
[01:06:25] <SnoopJ> evidlo, what would it mean to unpack a slice? They aren't iterable
[01:06:52] <SnoopJ> oh, you mean a list of slices
[01:06:57] *** Quits: Gudddu (~Guddu@66.203.113.253) (Ping timeout: 240 seconds)
[01:06:58] <evidlo> I was just applying the pattern of argument unpacking to array indexing
[01:07:56] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[01:08:16] <SnoopJ> the equivalent thing would be `arr[tuple(slices)]` but if this is numpy it's a wash IIRC, you still get a view
[01:11:13] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[01:11:48] *** Quits: resmo (~resmo@143-48-239-77.dyn.cable.fcom.ch) (Remote host closed the connection)
[01:13:49] *** Joins: dme86_ (~dan@user/dan86)
[01:13:59] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 250 seconds)
[01:16:27] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[01:16:45] *** Joins: lakrass (~lakrass@user/lakrass)
[01:17:43] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[01:17:44] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[01:18:30] *** Parts: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com) (Leaving)
[01:19:26] *** Joins: naranja (~orange@user/orangeboxcutter)
[01:19:32] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[01:19:44] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:20:06] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:21:02] *** Joins: duuude (~user@user/duuude)
[01:22:21] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[01:23:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:23:54] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[01:23:58] *** Quits: vakera_pingveno_ (~dan@2600:1700:21f9:b150::40) (Quit: Konversation terminated!)
[01:24:07] *** Joins: resmo (~resmo@2a00:d420:9:8a00:a359:80e7:d362:cc2b)
[01:24:54] *** Joins: oriba (~oriba@dynamic-089-014-172-069.89.14.pool.telefonica.de)
[01:25:05] *** Quits: Barones (~Barones@user/Barones) (Quit: Leaving)
[01:25:41] *** Quits: {HD} (~{HD}@86.106.121.213) (Ping timeout: 250 seconds)
[01:26:31] *** Joins: JamesB192 (~quassel@96-18-37-245.cpe.sparklight.net)
[01:27:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:29:32] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[01:30:28] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:30:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:31:56] <dba> What are some of the use cases of `**kwarg`?
[01:32:42] <Repiphany> Passing kwargs to subfunctions
[01:32:51] <SnoopJ> dba, frequently: "I don't know or care what keyword arguments the thing I'm wrapping might accept, I just want to pass along whatever the user gave me after I do my work"
[01:35:24] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[01:35:44] <dba> SnoopJ: How would you know if the right keyword argument passed correctly?
[01:35:48] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:4d71:500a:4c7b:3a82)
[01:36:19] *** Quits: novapy (~chronos@12.71.10.20) (Ping timeout: 250 seconds)
[01:36:30] <saddy> kwargs.get(name, default)
[01:37:20] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::40)
[01:37:31] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[01:37:50] <bjs> dba: well usually when you `def f(**kwargs)` you're not necessarily doing the checking and using of the keyword arguments in that function,  otherwise you'd have just written them there
[01:37:50] *** Quits: aslicedbanjo (~aslicedba@host31-48-146-27.range31-48.btcentralplus.com) (Quit: Leaving.)
[01:38:07] <bjs> dba: but you can for example go `def foo(**kwargs): bar(**kwargs)` to "pass them along" to another function unedited, much like with *args
[01:38:37] <bjs> rather than repeat all of the args over again, especially in the case where you might -not know- what arguments `bar` takes (because e.g. it's also an argument or a callback or something)
[01:39:12] <phy1729> Or when you're wrapping someone else's API and don't want to have to update your wrapper when they change their API.
[01:39:39] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[01:39:52] <SnoopJ> dba, I don't understand the question, but as saddy said, if you need to know something about what was passed, `kwargs` is available inside your function as a dict.
[01:40:15] *** Quits: dme86_ (~dan@user/dan86) (Ping timeout: 256 seconds)
[01:40:15] *** Quits: SlicerDicer68 (~SlicerDic@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net) (Ping timeout: 256 seconds)
[01:40:23] <SnoopJ> in the case where you're wrapping another function, the answer is "you don't, it's that other function's problem" unless your wrapper has an opinion about it for some other reason.
[01:40:48] *** Joins: beli6147 (~Thunderbi@174.128.60.162)
[01:40:51] *** Joins: dme86 (~dan@user/dan86)
[01:41:42] <dba> SnoopJ, bjs: let say a `def foo(**kwarg)` and inside `foo` you are expecting a `dict` and `string`, my question if do I have to do some check inside `foo` to know which one is a `dict` and which one is `string` and get the key for each one then use them? is this how it supposed work
[01:42:19] *** Joins: SlicerDicer68 (~SlicerDic@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net)
[01:42:36] <bjs> dba: inside foo `kwargs` is just a dictionary of the arguments passed by keyword and you can do whatever you want with that dictionary as it's just a normal Python dictionary
[01:43:07] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[01:43:07] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:44:07] <bjs> I'm not sure what you mean by need to check?
[01:44:08] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:44:13] <dba> bjs:  so  I still have to unpack the dict and see which argument should I use from what is passed, isnt this extra work? more line to write, just curious
[01:44:29] <bjs> dba: I'm not sure what you mean, why do you "have" to unpack the dict?
[01:44:34] *** Quits: Kruppt (~Kruppt@50-111-49-4.drhm.nc.frontiernet.net) (Quit: Leaving)
[01:44:43] <bjs> Like I said, if `foo` is actually going to *use* some of the arguments then probably you wouldn't use **kwargs for those
[01:45:17] <bjs> But you of course can, as kwargs is just a dictionary. If you foo(x=1, y=2) then kwargs=={"x": 1, "y": 2} and you can just print(kwargs["x"]) to get the x parameter.
[01:45:18] *** Joins: novapy (~chronos@12.71.10.20)
[01:45:50] <bjs> But as I say, if foo is going to want the x parameter then probably you would just make an x parameter and not use **kwargs
[01:45:57] <saddy> as dba said kwargs is good for 1) many keywords 2) unknown keywords
[01:46:12] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[01:46:19] <saddy> I meam bjs...
[01:46:36] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:46:45] <dba> Thanks
[01:47:01] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:e969:51aa:91c7:d473)
[01:47:13] *** Joins: pgbr (~pgbr@186.225.54.42)
[01:47:23] <dba> bjs, what is the point of passing `**kwargs` if none of them are going to be used inside a function
[01:47:31] *** Joins: johnkeats7 (~johnkeats@2804:14c:32:a0cc:edb9:3356:e637:dccc)
[01:47:36] <bjs> dba: like I said, you might want to pass them to another function that will use them
[01:48:10] <phy1729> I wouldn't say kwards is good for many keywords, because that makes the interface/types/default less apparant.
[01:48:11] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[01:48:14] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[01:48:46] <dba> very interesting to know
[01:48:54] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:d4e4:7334:6ed2:d874)
[01:49:04] <saddy> let me rephrase that: good for=used often for
[01:49:05] *** Joins: djapo (~archangel@user/djapo)
[01:49:19] *** Quits: SlicerDicer68 (~SlicerDic@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net) (Ping timeout: 256 seconds)
[01:50:48] <dba> Thanks saddy
[01:50:49] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:4d71:500a:4c7b:3a82) (Ping timeout: 250 seconds)
[01:50:57] <bjs> dba: let me give you a concrete example, say I want to write an @autolog function that will automatically print out when a function is called and with what arguments. I could write it like this https://bpa.st/JFPA
[01:51:01] *** Quits: novapy (~chronos@12.71.10.20) (Ping timeout: 256 seconds)
[01:51:30] <bjs> dba: using *args and **kwargs means my autolog() function works for every function,  as I don't know what arguments the function might have had, and autolog doesn't need to know what they were specifically.
[01:51:37] *** Quits: johnkeats7 (~johnkeats@2804:14c:32:a0cc:edb9:3356:e637:dccc) (Ping timeout: 240 seconds)
[01:52:00] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[01:53:30] <dba> Thank you bjs for the example
[01:53:53] <dba> very helpful ;)
[01:55:12] *** Quits: saddy (~saddy@dslb-002-207-086-013.002.207.pools.vodafone-ip.de) (Quit: Quit)
[01:56:01] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:56:27] *** Quits: officerping (~officerpi@c-73-235-167-226.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[01:57:32] *** Quits: CapitaoJonas (~CapitaoJo@72.2.239.74) (Quit: Going offline, see ya! (www.adiirc.com))
[01:59:03] *** Joins: maelstrom (~maelstrom@gateway/tor-sasl/maelstrom)
[01:59:14] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::40) (Quit: Konversation terminated!)
[02:01:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[02:03:17] *** Quits: d1cor (~diego@179.63.242.122) (Read error: Connection reset by peer)
[02:04:34] <JamesB192> How do I proper comment/document this thing I'm writing. https://bpa.st/5DRQ A pointer to a pre-existing example would be nice.
[02:05:37] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e2c7:ae5c:c5e4:1022)
[02:05:51] <grym> JamesB192: that doesn't look to bad as it is
[02:06:30] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:07:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b8e4-8b58-fcf6-173a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:07:46] <jinsun__> you can look at https://github.com/numpy/numpydoc/blob/main/doc/example.py for numpy style example
[02:07:46] <SnoopJ> JamesB192, re: examples, two good sources for reading are PEP 257 and the numpydoc style guide. https://www.python.org/dev/peps/pep-0257/ and https://numpydoc.readthedocs.io/en/latest/format.html respectively
[02:08:16] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[02:08:30] <SnoopJ> I don't care for the indentation of the Parameters section there but otherwise it looks very legible.
[02:08:33] *** Joins: pepper (~pepper@user/pepper)
[02:08:56] *** Joins: d1cor (~diego@179.63.242.122)
[02:09:05] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:09:36] <SnoopJ> doctest might also be good reading re: the example given there. Not sure if you'd want to run *that* example, but it's worth knowing about in general.
[02:11:09] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[02:11:25] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[02:11:25] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 256 seconds)
[02:11:46] <JamesB192> doctest projectile vomits on it because it is seems named wrong.
[02:12:31] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8)
[02:13:00] *** Joins: mdemo (~mdemo@user/mdemo22)
[02:13:31] <SnoopJ> yea it doesn't seem to be quiiite the idioms it would expect
[02:14:13] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::40)
[02:15:01] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:27] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4ce:a69e:9f8:9f77)
[02:15:44] *** Joins: lseactuary (~lseactuar@2601:646:202:2f10:38ad:2504:b1b7:acee)
[02:15:57] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:16:43] <lseactuary> i have a dataframe with child_node, level0id, level1id, level2 id. given an input of parent, child, if the parent = level0id (each/any row), and child is in level1id/2id etc, then i want to return the child_node's as a list
[02:17:12] <lseactuary> i have a code like child_list = [] then if heirarchy_node == policy_table['level_0_business_id'].any():
[02:17:13] <lseactuary>       if lookup_node == policy_table['level_0_business_id'].any(
[02:17:13] <lseactuary>       ) or lookup_node == policy_table['level_1_business_id'].any(
[02:17:14] <lseactuary>       ) or lookup_node == policy_table['level_2_business_id'].any()
[02:17:19] *** Quits: Guddddu (~Guddu@59.95.234.221) (Quit: Leaving)
[02:17:27] <lseactuary> :child_list.append(policy_table['business_id'])
[02:17:29] <SnoopJ> lseactuary, please don't paste code directly into the channel.
[02:17:34] <lseactuary> ok
[02:17:40] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[02:17:44] *** Joins: Guddu (~Guddu@59.95.234.221)
[02:17:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c90c-ab57-145c-eab1.res6.spectrum.com)
[02:18:13] <lseactuary> this is my code: https://pastebin.com/5W71raQw
[02:18:19] <lseactuary> but i get the typeerror i pasted at the end
[02:18:22] <lseactuary> can't understand why
[02:18:47] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[02:19:07] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:19:09] <Repiphany> lseactuary: You can't make a set out of mutable objects
[02:20:25] *** Joins: naranja (~orange@user/orangeboxcutter)
[02:20:51] <lseactuary> ah silly me!
[02:21:02] <jinsun__> was your child_list supposed to contain Series objects?
[02:21:03] <lseactuary> but does my function make sense? if there a slicker way?
[02:21:18] <Repiphany> I have no idea what it's trying to do
[02:21:24] <lseactuary> jinsun__ yes
[02:21:26] <jinsun__> set and sorted both would break for those
[02:22:04] *** Joins: Roey (~Roey@user/Roey)
[02:22:04] <lseactuary> 1) check if heirarchy_node is in level_0_business_id (could be multiple rows)
[02:22:05] <Roey> y
[02:22:17] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[02:22:24] <lseactuary> 2) if yes, check if lookup_node is in any of the other levels.
[02:22:31] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[02:22:48] <lseactuary> 3) if yes, return the business_id (there could be multiple rows hence multiple business_ids)
[02:22:50] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[02:23:03] <lseactuary> that is what i am trying to write
[02:23:29] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[02:24:05] *** Quits: shamasu (~shamasu@2600:1700:697d:20::3f) (Quit: Konversation terminated!)
[02:24:29] <jinsun__> `heirarchy_node == policy_table['level_0_business_id'].any()` this is not checking if level_0_business_id contains heirarchy_node
[02:24:31] <Repiphany> Maybe you want to do `child_list.extend(policy_table['business_id'])` instead
[02:24:56] <lseactuary> jinsun__ oh :(
[02:25:01] <lseactuary> Repiphany  you are right
[02:25:04] <jinsun__> it is comparing heirarchy_node with the result of policy_table['level_0_business_id'].any() which is a boolean
[02:25:06] *** Joins: mdemo (~mdemo@user/mdemo22)
[02:25:07] <Repiphany> Or pandas might already have a unique function like np.unique
[02:25:31] <jinsun__> Series objects have a .unique method
[02:26:21] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[02:26:40] <jinsun__> so pd.concat the list of Series objects to get a bigger Series and do .unique on that
[02:26:55] <jinsun__> list(set( won't work
[02:27:31] <jinsun__> and Series has .sort_values too
[02:27:36] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[02:27:41] <jinsun__> so no need for sorted
[02:27:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:28:11] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:28:27] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[02:28:40] <Repiphany> np.unique sorts for you
[02:28:43] <lseactuary> if heirarchy_node == pandas.Series(policy_table['level_0_business_id']).unique()
[02:28:46] <lseactuary> something like this?
[02:29:05] *** Joins: naranja (~orange@user/orangeboxcutter)
[02:29:15] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:29:32] *** Joins: elias117 (~elias117@user/elias117)
[02:30:10] <jinsun__> if policy_table is a DataFrame then policy_table['level_0_business_id'] is already a Series
[02:30:31] <lseactuary> but heirarchy_node == policy_table['level_0_business_id'].unique()
[02:30:35] <lseactuary> throws the same TypeError
[02:30:51] <Repiphany> unique is meant to replace your final sorted(set(...)) stuff
[02:30:59] <jinsun__> and no that's not how you check if Series contains a value
[02:31:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:31:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[02:31:35] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:31:47] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[02:31:54] <jinsun__> you can just slightly change what you were doing before, just have to add parens
[02:32:02] <jinsun__> (heirarchy_node == policy_table['level_0_business_id']).any()
[02:32:37] *** Quits: Guddu (~Guddu@59.95.234.221) (Ping timeout: 240 seconds)
[02:32:58] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: see you later)
[02:33:46] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:34:07] *** Joins: walterwhip (~www@user/walterwhip)
[02:35:07] <lseactuary> got ya
[02:35:08] <lseactuary> thanks!
[02:35:48] *** Joins: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269)
[02:36:16] *** Quits: pgbr (~pgbr@186.225.54.42) (Remote host closed the connection)
[02:36:19] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[02:37:15] *** Quits: pgib (~textual@173.38.117.89) (Ping timeout: 256 seconds)
[02:37:29] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[02:37:51] <lseactuary> works :)
[02:37:54] <lseactuary> one last thing
[02:37:55] <lseactuary> if l[ii][jj] == l[ii + 1][jj]:
[02:37:55] <lseactuary> IndexError: list index out of range
[02:37:59] <lseactuary> what does this mean?
[02:38:22] *** Quits: alchzh (alchzh@stable.bnc.by.bnc4you.xyz) (Quit: Stable ZNC by #bnc4you)
[02:38:24] <lseactuary> https://pastebin.com/bxuqZwrR
[02:38:27] <lseactuary> this is the function
[02:38:28] <Repiphany> ii+1 has no guarantee of being in l
[02:39:14] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[02:39:31] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[02:39:47] <Repiphany> Also again, I have no idea what that function is trying to do on first glance
[02:40:15] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[02:40:19] <lseactuary> im checking for string sequences
[02:40:22] *** Joins: djapo_ (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[02:40:37] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[02:40:48] <jinsun__> define checking
[02:41:28] *** Quits: MrCollinsGA (~MrCollins@38.21.140.217) (Quit: Leaving)
[02:41:30] *** Quits: Masterphi (~Masterphi@user/masterphi) (Quit: Masterphi)
[02:41:43] *** Joins: SlicerDicer68 (~SlicerDic@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net)
[02:42:22] <lseactuary> say i have values ABCZ02J and ABCZ02K they are sequential, as is ABCZ02 ABCZ03 etc
[02:42:26] <jinsun__> the code seems to be doing at lot more than isintance checks, which is what I assume from "checking for string sequences"
[02:42:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[02:42:45] *** Joins: au (~au@4.59.10.31.omegatech.cz)
[02:43:02] <lidless> 02K is sequential?
[02:43:04] <Repiphany> (it could also be jj out of range, who knows what input you're giving it)
[02:43:05] <jinsun__> okay so bad working
[02:43:09] <au> hi, is there a way how to format the way datetime.strftime('%z') formats the timezone? I mean the output is like "+0100", I need to get "+01:00"
[02:43:13] <jinsun__> s/working/wording
[02:43:35] <lidless> for jj in range(len(min(l[ii], l[ii + 1]))):  <- doesn't this add a lot of cycles each iteration?
[02:43:53] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:43:54] <Repiphany> Premature optimization killed the cat
[02:44:06] <lidless> so yes? Honest question. Not sure how python optimizes
[02:44:25] <jinsun__> from sequence you norrmally assume something like collections.abc.Sequence, you should say sequential
[02:44:51] <bjs> lidless: what do you mean exactly?
[02:45:01] <lseactuary> would this work for letter/alphabet combinations?
[02:45:11] <lidless> bjs: My old school teachings of "Always store the lengths first before doing a for(; i < lenght; i++)"
[02:45:15] <Repiphany> I suspect you don't even need to be working with indices and could clean up by using zip or other iteration tools
[02:45:28] <bjs> lidless: I'm still not following, what thing do you think is "adding cycles"
[02:45:28] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:e969:51aa:91c7:d473) (Read error: Network is unreachable)
[02:45:37] <lidless> bjs: so it doesn't have to re-evaluate the result each iteration
[02:45:41] <bjs> lidless: having a for loop adds cycles because that's kind of the point
[02:45:50] *** Joins: Masterphi (~Masterphi@user/masterphi)
[02:45:56] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:788c:165b:ff1b:b5b3)
[02:45:58] <bjs> lidless: in `for <name> in <expr>` Python only evaluates the expr once.
[02:46:02] <Repiphany> `for i in range(len(blah)):` only calculates len once
[02:46:05] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 250 seconds)
[02:46:09] *** Quits: nomic (~nomic@185.217.117.244) (Quit: Leaving)
[02:46:11] <lidless> Okay, thank you! That's what I was wondering
[02:46:12] <jinsun__> lidless: len doesn't loop like C strlen if you were worried about that
[02:46:17] <lidless> yes, exactly
[02:46:30] <lidless> well, C, JS, PHP
[02:46:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c90c-ab57-145c-eab1.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:46:58] <jinsun__> not sure about JS PHP
[02:47:11] <Repiphany> Clean understandable code > unnecessarily squeezing out performance
[02:47:15] <jinsun__> I tthink C is the only horrible one with O(n) len
[02:47:16] <lseactuary> jinsun__ not sure that library works for my use case?
[02:47:16] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:47:25] <lidless> I was always taught to assign the result first and compare to that. Could've been paranoid advice
[02:48:00] <jinsun__> lseactuary: what library?
[02:48:07] *** Quits: az (az@user/azz) (Quit: Stable ZNC by #bnc4you)
[02:48:55] <lidless> jinsun__: guessing your reference to collections.abc.Sequence
[02:49:24] <lseactuary> jinsun__  collections.abc
[02:49:29] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[02:49:32] <jinsun__> lidless: also yeah like Repiphany pointed out, even if len was O(n) the for loop would calculate it only once, so no point in saving that before
[02:49:51] <lidless> jinsun__: that's good to know!
[02:49:56] *** Quits: XV8 (~XV8@2601:5cb:c001:50:b02a:1289:ddb1:fbc8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:32] <lidless> lseactuary: are you solving a real-world problem or is this some hackerrank mumbo jumbo?
[02:50:33] <jinsun__> lseactuary: oh that was just me pointing out your poor description, I know it won't help, but from your docstring it sounded like you were checking for that
[02:50:46] <lseactuary> lidless  real problem
[02:50:48] <SnoopJ> point of clarification: you can write a string that has O(1) len in C relatively easily, but that's not particularly common
[02:50:52] <lseactuary> jinsun__ got you
[02:51:00] <lidless> lseactuary: so does Unicode need to factor in to your definition of "string"?
[02:51:55] <lidless> SnoopJ: It's a habit that made theoretical sense to me years ago and I never questioned it again until moments ago
[02:52:13] <lidless> Maybe when the answer wasn't really clear in whatever language I was using
[02:52:17] <SnoopJ> Repiphany, I found a recent change in CPython the other night that operates on the inverse principle: apparently dicts got a little 1% boost from extending the object's "preheader" to get rid of some loads when you access it
[02:52:25] <SnoopJ> https://bugs.python.org/issue45947
[02:52:34] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:52:46] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[02:52:51] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[02:52:57] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:9d5c:62a8:fd4f:5327) (Quit: Konversation terminated!)
[02:53:17] <jinsun__> I think most of the faster-cpython changes follow that inverse principle
[02:53:28] *** Joins: walterwhip (~www@user/walterwhip)
[02:53:56] * SnoopJ is willing to believe there's non-eldritch gains left to be had
[02:54:01] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[02:54:39] * lidless is sad he missed that reference
[02:55:17] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[02:55:23] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Ping timeout: 256 seconds)
[02:55:24] <SnoopJ> lidless, writing string implementations like that?
[02:55:56] <lidless> "non-eldritch"
[02:56:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[02:56:32] <SnoopJ> sorry I meant to clarify what theoretical-sense "habit" you meant
[02:56:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:56:58] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[02:57:11] *** Joins: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[02:57:37] <lidless> Oh! No, just for loops in general. I always assign the "length" first and compare to that in each iteration
[02:58:14] <lidless> because somewhere along the line someone said "No, that will evaluate on each iteration" and I thought "That seems reasonable"
[02:58:39] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:788c:165b:ff1b:b5b3) (Ping timeout: 250 seconds)
[02:58:57] *** Joins: crashrep (~crashrep@user/crashrep)
[02:59:21] <Repiphany> Idiomatic python tends to go for `try: ... except IndexError:` rather than checking if the index is in range
[02:59:21] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[02:59:55] *** Quits: dreamon (~dreamon@pd9503ca8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:01:29] <lseactuary> i dont think my function is correct actually
[03:02:05] *** Joins: mdemo (~mdemo@user/mdemo22)
[03:03:11] *** Joins: az (az@stable.bnc.by.bnc4you.xyz)
[03:03:35] *** az is now known as Guest1161
[03:03:46] <zen_coder> I have the official docker image "FROM python:3.9" and I get there following error: "ImportError: No module named 'yaml'"
[03:04:00] <zen_coder> is this normal? Python 3.9 does not have yaml installed?
[03:04:14] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:04:24] <lseactuary> i think my function returns all nodes: https://pastebin.com/9HvRf0bD
[03:04:35] <lseactuary> i put the function and logic in the code linked
[03:05:26] <Repiphany> I don't think yaml isn't part of the standard library
[03:05:44] <SnoopJ> lidless, I recall seeing someone squeezing so hard on their hot loops that they were getting a performance boost out of doing something like `_len = len` so they would get LOAD_FAST instead of LOAD_GLOBAL (this was before an optimization was added to CPython that I think provides caching to close the gap between those spellings)
[03:06:02] *** Joins: maxzor_ (~maxzor@2a01cb04054faa0098bd91394fed2f26.ipv6.abo.wanadoo.fr)
[03:08:05] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[03:08:21] *** Joins: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net)
[03:08:26] <nedbat> zen_coder: yaml is not in the stdlib. you need to pip install it
[03:08:34] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-7df6-2fc1-a099-d746.res6.spectrum.com)
[03:08:37] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[03:08:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[03:08:47] <SnoopJ> it's...kind of a missing stair at the moment :/
[03:08:57] <nedbat> SnoopJ: the random module does that sort of thing all over the place (_len=len)
[03:09:06] <SnoopJ> nedbat, I love the random module 💙
[03:09:20] *** Quits: NoelFlantier3 (~Hubert@195.201.244.189) (Remote host closed the connection)
[03:09:20] <nedbat> SnoopJ: it's great, and also needlessly micro-optimized
[03:09:30] *** Joins: ivii (~ivan@user/ivii)
[03:09:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:09:43] <SnoopJ> at least it's legible :)
[03:09:44] *** Joins: NoelFlantier3 (~Hubert@195.201.244.189)
[03:09:49] <SnoopJ> ...aside from those bits
[03:09:50] <jarthur> Anyone know what happened to the offtopic channel? Did it get h4xed?
[03:09:58] <SnoopJ> jarthur, two #s now, ##python-offtopic
[03:10:02] <jarthur> ty
[03:10:05] <nedbat> SnoopJ: or maybe it isn't? I don't see it in the code now
[03:10:17] *** Joins: loofy (~loofy@ip70-191-113-247.cl.ri.cox.net)
[03:10:20] <SnoopJ> nedbat, I see `_int = int`
[03:10:28] <impermanence> sorry to ask this here: did something happen admiinistrative-wise to python-offtopic; it says I'm banned
[03:10:30] <SnoopJ> in *checks* 3.8
[03:10:48] <SnoopJ> I don't see it in 3.10
[03:11:02] <nedbat> SnoopJ: right, i'm looking at master. seems like they cleaned it up. nice.
[03:11:05] *** Quits: molten (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[03:11:36] <SnoopJ> impermanence, the channel has been decouple from "official" status and moved to ##python-offtopic (libera naming policy), #python-offtopic is now +b *@*
[03:11:48] <SnoopJ> nedbat, I bet it's because of the caching!
[03:11:51] <impermanence> ah
[03:11:58] <impermanence> my b.  thanks snoop.
[03:12:15] *** Joins: tortal (~tortal@217-215-62-17-no247.tbcn.telia.com)
[03:12:27] <impermanence> I actually have a flame-war level "deploying python in production" question I need to ask but I'm a scurt boi
[03:12:33] <nedbat> SnoopJ: https://github.com/python/cpython/commit/26a1ad1c24717990265b71ed093d691500d6301c "small cleanups"
[03:12:39] <impermanence> no flame-wars intended but the spice is hot with this one
[03:12:53] <impermanence> was going to ask in offtopic lol
[03:13:05] <SnoopJ> impermanence, if the question is in good faith and about Python, it's topical
[03:13:06] *** Joins: freefall (~owner@2600:6c40:1600:39ec:f181:62fb:e89b:4221)
[03:13:13] <lseactuary> i can upload a working example if someone can help me?
[03:13:15] <impermanence> alright
[03:13:20] <freefall> hi
[03:13:33] <freefall> i need help with python buttons
[03:14:07] <freefall> it seem like it exit the function an goes right to the loop
[03:14:22] <SnoopJ> nedbat, ...ah, and looks like `_int = int` -> `floor = _floor`
[03:14:37] <lseactuary> https://pastebin.com/R0X3FbZB
[03:14:41] <lseactuary> can someone help me with this?
[03:14:51] <SnoopJ> so, still chasing LOAD_FAST, but using more explicit floor behavior I guess
[03:14:52] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:15:19] <nedbat> SnoopJ: yeah, there's still some micro-opt in there
[03:15:33] <SnoopJ> Raymond does mention the narrowed gap at least: https://github.com/python/cpython/pull/21038#issuecomment-647718234
[03:16:00] <impermanence> my colleague who I totally trust and acutally *has* experience deploying py apps in production said "To properly secure and manage, the lift is very high on python applications.  Right now Infrastructure doesn’t have time to spend on this.  The JVM will probably have the best driver support."
[03:16:46] <Pilate> sounds like someone salty you didnt use java
[03:16:46] <nedbat> impermanence: how can we help? what's the question?
[03:17:09] *** Quits: djapo_ (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Quit: Lost terminal)
[03:17:24] *** Joins: c4017w_ (~c4017@2605:8d80:4c0:3dca:59b7:9ca3:e0f:776b)
[03:17:24] <impermanence> is this true: that properly securing python for production, is, comparatively, significantly more out of reach than for many other languages?
[03:17:40] <impermanence> I simply have no idea.
[03:17:43] *** Joins: djapo (~archangel@user/djapo)
[03:17:49] <SnoopJ> it's going to depend strongly on what exactly "properly securing" (and "managing") means
[03:17:58] <SnoopJ> impermanence, can you elaborate on your production requirements viz. "driver support" ?
[03:18:05] <ChrisWarrick> yeah, what is driver support?
[03:18:09] <freefall> https://bdp.st/Q&%Q
[03:18:26] <SnoopJ> viz. isn't the abbreviation I wanted there, I guess I mean re:, oops
[03:18:47] <impermanence> I'm honestly not sure what he meant by driver support!
[03:18:47] <freefall> why is it skipping the print command right before it goes to the mainloop
[03:18:48] <SnoopJ> oO(maybe I should stop trying to micro-optimize english and say it plain)
[03:18:50] <impermanence> regarding security:
[03:18:58] <nedbat> impermanence: i think it will also depend on what you are used to. If your colleague is proficient at java and not python, then python will be hard.
[03:19:08] <ChrisWarrick> impermanence: that sounds like they’re throwing random words at you and expect you to get scared from running python in production
[03:19:17] <SnoopJ> freefall, that link appears to be broken
[03:19:19] <impermanence> he's proficient with python I would say; not like y'all but more initiated than most.
[03:19:27] <Peng> For that matter, what do they mean by "secure" or "manage"?
[03:19:30] <impermanence> ChrisWarrick: he's not like that tbh
[03:19:30] <nedbat> impermanence: you'd have to ask him what he means then.
[03:19:38] <freefall> https://bdp.st/Q76Q
[03:19:43] <impermanence> yeah I notice he deleted that comment from our thread lol
[03:19:54] <freefall> help if i let go of the shift key
[03:20:31] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4ce:a69e:9f8:9f77) (Quit: Konversation terminated!)
[03:20:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:21:06] <impermanence> I think "secure" means anything practical; nothing like SOC2 or CIS or anything like that.
[03:21:06] *** Joins: c4017w (~c4017@209.52.68.8)
[03:21:14] <JamesB192> Thanks for the help grym, SnoopJ.
[03:21:16] <ChrisWarrick> impermanence: anything practical?
[03:21:19] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:21:22] *** Parts: JamesB192 (~quassel@96-18-37-245.cpe.sparklight.net) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:21:24] <impermanence> ha yeah idk I guess
[03:21:40] <nedbat> freefall: that isn't a valid url either. Are you re-typing it?
[03:21:40] <SnoopJ> impermanence, it's hard to say how Python does or does not stack up to requirements that aren't particularly well-formed. I can tell you that at $employer, we have no real difficulty with Python and device drivers (mostly CUDA) in Docker.
[03:21:43] <impermanence> I need some clarification; my impression is that he jumped the gun in his response;
[03:22:08] <SnoopJ> As far as "secure": well, that's even less clear to me :)
[03:22:12] <impermanence> SnoopJ: okay that's useful actually, thank you; our env is k8s
[03:22:21] <impermanence> yes me as well; to be fair though that's kind of why I dragged this out here
[03:22:33] <SnoopJ> impermanence, if this is something you think you have the bandwidth to clarify between you and your coworker, I would start taking notes *right now* on what's confusing you
[03:22:43] <ChrisWarrick> impermanence: docker/k8s doesn’t care about the language you’re working with at all
[03:22:45] <impermanence> yep, nice one.
[03:22:56] *** Joins: Esexe_ (~aa@024-151-038-076.res.spectrum.com)
[03:22:57] <nedbat> freefall: on line 72, change `command = lambda:lookup_stock()`  to:  `command = lookup_stock`
[03:23:12] * SnoopJ got a lot of mileage out of that proverb today preparing for a similar discussion about requirements
[03:23:18] <nedbat> freefall: though idk why that would change the behavior
[03:23:21] <freefall> if i do it trigger it to open the other windows
[03:23:23] <impermanence> ChrisWarrick: I get your sentiment, but from a security standpoint that simply isn't true.
[03:23:26] <ChrisWarrick> impermanence: your coworker should clarify what they’re talking about
[03:23:39] <impermanence> if I have log4j in a container in needs to be patched: plain and simple.
[03:23:50] <ChrisWarrick> impermanence: That’s not specific to Java or k8s, really
[03:23:50] <freefall> unless it just the ide doing it... let me try it from command line
[03:24:03] <nedbat> impermanence: that's not docker caring about the language. that's running insecure software.
[03:24:04] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[03:24:11] <SnoopJ> impermanence, Python dependencies are relatively easy to patch, in my experience.
[03:24:14] <impermanence> yep I understand the difference
[03:24:23] <ChrisWarrick> impermanence: tomorrow we can wake up and find out $popular_python_library has an equally terrible vulnerability
[03:24:34] <impermanence> ^ which was my only point
[03:24:37] *** Quits: c4017w_ (~c4017@2605:8d80:4c0:3dca:59b7:9ca3:e0f:776b) (Ping timeout: 240 seconds)
[03:24:43] <SnoopJ> we sometimes have to roll ours around when we snag on some weird incompatibility (usually between numpy and something that depends on it)
[03:25:41] <SnoopJ> impermanence, I could understand your coworker's hestitation here if they don't feel confident in managing a deploy Python application, but know exactly what they'd do patch log4j, for instance.
[03:25:47] *** Quits: maxzor_ (~maxzor@2a01cb04054faa0098bd91394fed2f26.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:25:59] *** Quits: eyepeetee (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[03:26:01] <SnoopJ> do to* patch
[03:26:40] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[03:26:44] <SnoopJ> CPython/PyPy/etc. are not particularly hard to build or install, I would say quite the opposite: they're certainly the simplest part of $employer's stack
[03:26:47] <freefall> nedbat: yep i remove the lambd it make it pop open the next window at start which i want to do when you click the button not before
[03:26:54] <nedbat> impermanence: it definitely sounds like you need to have a deeper conversation with your colleague
[03:26:58] <SnoopJ> +1
[03:27:02] <impermanence> SnoopJ: Dude is very cool.  I'm going to give him the benefit of the doubt. Sounds like he had maybe an unpleasant experience at a previous shop.
[03:27:05] <impermanence> yeah clearly.
[03:27:11] <nedbat> freefall: you have to also remove the parentheses, like I showed.
[03:27:25] <impermanence> I think I already won the first part of the battle as I  noticed he deleted the whole "security" comment thing:)
[03:27:26] <SnoopJ> impermanence, it happens. I feel pretty strongly about making your questions _extremely clear_ because I've been doing this dance with my manager over the last...my entire employment.
[03:27:38] <impermanence> haha that sucks man
[03:27:57] <freefall> oh ok... interesting.. last time i did that it error..
[03:28:04] <impermanence> how's your golang?  happy to make a reference lol.
[03:28:07] *** Quits: loofy (~loofy@ip70-191-113-247.cl.ri.cox.net) (Quit: WeeChat 3.0)
[03:28:25] <omegatron> hmm, the man page of pip doesn't tell me, how to get rid of the two annoying messages  "DEPRECATION: Python 2.7 will reach .."  and  "WARNING: You are using pip version 19.2.3 ..."   -  yes, I know this is old software, but it's a dependency for something else and  --quiet doesn't help
[03:28:26] <SnoopJ> Upshot: consistent clear communication gave us enough road that once he saw how easy it was to write tooling, my manager became a big fan of Python.
[03:28:58] <SnoopJ> impermanence, and mostly that road was trying to understand that he was coming at Python from this perspective of "ugh, why does everything *feel wrong* in Python" more than it was technical objections
[03:29:23] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:29:45] <SnoopJ> As it turned out, a lot of his objections were because of things Debian/Ubuntu were responsible for.
[03:30:05] <Repiphany> ~system python~
[03:30:24] <SnoopJ> We've gone from snubbing a nose at Python to "hmm, we should think about embedding Python"
[03:30:35] *** Quits: lakrass (~lakrass@user/lakrass) (Quit: WeeChat 3.4)
[03:30:54] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[03:30:56] <dminuoso> impermanence: Our experience has, deploying most non-trivial Python application has been a major pain in the butt. It's a mess of various poorly fitted build systems, all in simultaneous use, non-deterministic build descriptions, incorrect build requirements.
[03:31:06] *** Joins: parv (~quass@user/parv)
[03:31:26] <dminuoso> The reality is: most complex python software is distributed via docker images because the only way you can really ship a "but it works on this machine", is by shipping the machine.
[03:32:12] * Techcable laughs
[03:32:13] <SnoopJ> That seems like painting with a pretty broad brush. Is the scipy ecosystem not complex?
[03:32:30] <freefall> https://bpa.st/B4VA
[03:32:55] <freefall> some where im not getting how to return back variables
[03:33:05] <nedbat> freefall: what's going wrong with this code?
[03:33:19] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[03:33:25] <SnoopJ> Build specification has certainly been a mess for a long time. Things are improving a lot with PEP 517/518, but there's still a lot of idiosyncratic workflows and that's never a lot of fun.
[03:33:46] *** Joins: loofy (~loofy@ip70-191-113-247.cl.ri.cox.net)
[03:34:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:34:01] <freefall> im try to return the variable from get_current_price back to the main loop to send to a different function later on
[03:34:12] *** Joins: alchzh (alchzh@stable.bnc.by.bnc4you.xyz)
[03:34:29] *** Quits: d1cor (~diego@179.63.242.122) (Ping timeout: 256 seconds)
[03:34:39] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[03:35:07] <dminuoso> SnoopJ: Our experience is limited to a particular field of networking tools, mostly various web tools to do various things.
[03:35:16] *** Joins: arshcus (~arshcus@99-97-216-110.lightspeed.okcbok.sbcglobal.net)
[03:35:16] <freefall> but get_current_price was call from a different function
[03:35:29] <lseactuary> anyone here who can help me with the code i uploaded please? https://pastebin.com/R0X3FbZB
[03:35:39] <dminuoso> Most of them django based, so this could be somewhat biased in that django evangelists might have particularly poor build hygiene
[03:35:42] <dminuoso> I dont know.
[03:35:54] <nedbat> freefall: i don't think a button action can return anything.  nothing accepts the returned value
[03:36:21] <dminuoso> But the amount of friction we've had in getting reproducible environments between coworkers, or between development/staging/production
[03:36:25] *** Quits: tortal (~tortal@217-215-62-17-no247.tbcn.telia.com) (Ping timeout: 256 seconds)
[03:36:32] <SnoopJ> dminuoso, Python sits somewhere between C++ and JS for me in terms of how much *stuff* ends up involved between your code and your build.
[03:36:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:36:55] <SnoopJ> which is not to say C++ chains can't be really convoluted and JS chains can't be simple, but on average let's say
[03:37:01] <freefall> ok.. so any idea how to
[03:37:08] <dminuoso> Its incredible how much patching we have to do every week, and Im not just talking about the packages themselves, but entire transitive dependency graphs with really poor and undeployable code..
[03:37:17] * dminuoso shrugs
[03:37:28] <jinsun__> nedbat: https://github.com/pyenv/pyenv/pull/2241 :D
[03:37:48] <SnoopJ> dminuoso, out of curiosity, how much of it is painful because of extension modules written in not-Python
[03:37:48] <nedbat> jinsun__: they released a5?
[03:38:03] <nedbat> jinsun_: i guess a4 was delayed, but they kept a5 on schedule?
[03:38:05] <jinsun__> yeah, you lost your streak :D
[03:38:08] * SnoopJ knows relatively little about the Django ecosystem
[03:38:08] *** Joins: ouestbillie (~ced@192-222-138-215.qc.cable.ebox.net)
[03:38:10] <nedbat> jinsun_: you are welcome to it.
[03:38:22] <dminuoso> SnoopJ: Honestly? I wouldn't want to make a guess because it'd be just based on emotion and not actual data.
[03:38:30] <dminuoso> So anything Id say would just be a reflection of todays pain.
[03:38:31] <nedbat> jinsun_: is there a reliable twitter feed for releases?
[03:39:10] <arshcus> So are there any channels where people actually chat here? Is it me or you?
[03:39:15] <jinsun__> nedbat: I just caught it by chance in #python-dev-notifs
[03:39:27] <SnoopJ> dminuoso, I have a suspicion that there's a lot of fear/pain involved in pretty much any conversation about building/deploying
[03:39:30] *** Joins: {HD} (~{HD}@86.106.121.213)
[03:39:39] <jinsun__> nedbat: maybe highlight pablo to not miss it :)
[03:39:40] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[03:39:55] <SnoopJ> e.g. my manager's distaste for Python is *definitely* related to associating system Python strangeness with Python itself
[03:39:57] <dminuoso> SnoopJ: In my experience its particularly bad in some of the interpreted languages. I think part of the problem is lack of foresight in the founding steps.
[03:40:18] <nedbat> jinsun_: i'm installing it now
[03:40:41] <nedbat> arshcus: we talk here, but focused on python help and discussion
[03:40:42] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[03:40:47] <arshcus> K
[03:41:02] <SnoopJ> dminuoso, I think this is why a lot of languages don't even bother to provide building/packaging tooling: they'd rather make it someone else's problem.
[03:41:17] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[03:41:17] *** Quits: mat001_ (~mat001@72.28.108.216) (Ping timeout: 240 seconds)
[03:41:37] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[03:42:02] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:42:19] <SnoopJ> I might be biased, though, I've been having a surprisingly wonderful time getting a web service packaged up for deployment as a Windows service. Kinda shocked how smoothly it's gone.
[03:42:38] *** Joins: Matt__ (~Matt@ns324361.ip-37-59-58.eu)
[03:42:52] <causasui> I'm using TextIOWrapper.write() to over-write the contents of a file, but is not printing a newline at the end of the file. is there an approved way of getting the newline or should I just `+ "\n"` to the object I'm writing to the file?
[03:43:02] *** Joins: johnjaye (~pi@173.209.65.233)
[03:43:06] <dminuoso> SnoopJ: Im absolutely confident that with enough discipline and tight control over your dependencies it's not too bad. But that's the view of a developer that is can excercise this.
[03:43:28] <SnoopJ> dminuoso, bingo, it all comes down to what skills are present *right now in this shop* at the end of the day.
[03:44:12] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Quit: Konversation terminated!)
[03:45:06] <dminuoso> SnoopJ: For starters, we're using a lot of nix to gain reproducible builds for our software so it makes sense to try and package python software with nix here.
[03:45:35] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[03:45:39] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[03:45:47] <dminuoso> We have a particular tool that essentially takes a poetry.lock, picks up all the python packages described by it, builds wheels out of all them, and cooks up a sort of virtual environment.
[03:45:48] <SnoopJ> *nod* that's mostly how we deploy ours. $project will be our first deploy of Python on Windows, I'm fairly excited about it.
[03:45:50] <dminuoso> All is great
[03:46:45] <dminuoso> But here comes the catch, there's a lot of packages that use setuptools_scm out of complete lazyness or lack of creativity. Not pinning the version into your build description means the ability to even specify what version you are depends on being in a physical repository,.
[03:46:47] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[03:47:03] <graingert[m]> What happened to #python-offtopic@libera.chat?
[03:47:08] *** ouestbillie is now known as cedb
[03:47:12] <dminuoso> Because our builder doesn't check out git repositories, the whole resolver mess breaks down, since each such package offers `none` as a version
[03:47:19] <nedbat> graingert[m]: ##python-offtopic
[03:47:19] <SnoopJ> graingert[m], moved to (unofficial) ##python-offtopic
[03:47:23] <freefall> ok question.. when you use global in a function where is it meaning gloabal?
[03:47:24] <graingert[m]> Why is it now ##python-offtopic@libera.chat
[03:47:37] <nedbat> graingert[m]: i wanted to remove the word python entirely
[03:47:41] <dminuoso> So each time we have to pick up the pieces, and apply hotfixes
[03:47:52] *** Quits: Masterphi (~Masterphi@user/masterphi) (Quit: Masterphi)
[03:48:01] <nedbat> jinsun_: installed, and coverage.py test suite passes on 3.11.0a5.  First alpha that didn't need tweaks on my side.
[03:48:11] *** Quits: mspe (~user@tilde.team/user/mspe) (Quit: WeeChat 2.8)
[03:48:14] <jinsun__> nedbat: ah nice
[03:49:21] *** Quits: bennydarshan (~darshan@2a0d:6fc2:4820:8f00:c1e7:bcbf:e0c1:df21) (Quit: bennydarshan)
[03:49:43] <graingert> graingert[m]: ##python-offtopic
[03:50:00] <graingert[m]> :/
[03:50:05] <TML> lseactuary: policy_table['level1'] consists of https://bpa.st/Q6MQ
[03:50:07] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[03:50:11] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[03:50:14] <dminuoso> SnoopJ: So do you see how setuptools_scm alone ruins my confidence in python developers? It's the antithesis of portable software, if the only way you can build it is out of a git repository.
[03:50:30] <dminuoso> Not just *a* repository, but the original one.
[03:50:39] <lseactuary> TML - ye. can't figure out how to fix this. I was thinking maybe iterate through the rows, but that function also isn't working.
[03:50:51] <dminuoso> If I start playing in the repository and mess around with branches or tags, the build suddenly breaks
[03:50:52] <nedbat> dminuoso: the existence of a package that requires building from git means that python developers are bad?
[03:51:00] <dminuoso> If I lack the repository, resolvers build
[03:51:00] <TML> lseactuary: I'm not understanding the behaviour you were expecting to see
[03:51:04] <dminuoso> *resolvers break
[03:51:21] <SnoopJ> dminuoso, I do, actually, we had a question about it in here just the other day and it left a bad taste in my mouth. I end up vendoring wheels for built projects relatively often, and if I can't get (or build and be done with) a wheel for a project I have serious reservations about using it.
[03:51:22] <graingert> dminuoso: they fixing it shortly tho
[03:51:34] <TML> lseactuary: 9 is always a member of policy_table['level1']
[03:51:56] <lseactuary> TML - it should output the 'child' column values that correspond to levelo being heirarchy_node and lookup_node being any other level
[03:51:58] <SnoopJ> especially when it comes to poetry. I've lost what little taste I ever had for poetry, I think.
[03:52:04] <lseactuary> i can share my colab notebook if helpfuk
[03:52:06] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:52:08] <graingert> The latest git supports putting all the info setuptools_scm needs into git archives
[03:52:14] <dminuoso> SnoopJ: for what its worth, the poetry.lock files are good.
[03:52:14] <lseactuary> with the same dummy data
[03:52:21] <dminuoso> but that's the extend of it.
[03:52:36] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[03:52:41] <SnoopJ> dminuoso, they're okay. I'd rather just use the equivalent functionality offered by e.g. pip-tools.
[03:52:45] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[03:52:57] <SnoopJ> But I think the variety we're discussing here is a big fear/pain point for people.
[03:53:11] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[03:53:20] <dminuoso> Im slowly heading to using mach-nix, which essentially uses resolvelib every day or so across the entirety of pypi to build entire build graphs
[03:53:29] <dminuoso> So we can get reproducible dependency graphs in time
[03:53:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:54:32] <dminuoso> Beauty is we side step the entire dependency resolution, dont need to talk about poetry either
[03:54:39] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[03:54:39] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[03:54:42] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[03:55:02] <SnoopJ> "virtualenv-style python environment" makes me slightly uneasy, but mostly because of unfamiliarity. Is this a conda-alike?
[03:55:15] <dminuoso> No, nix is way more absolute
[03:55:24] <dminuoso> Think virtualenv but on a global system scale
[03:55:25] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:56:19] <lseactuary> TML can you please unblock me.
[03:56:39] <TML> lseactuary: Unblock you?
[03:56:43] <TML> I don't have you blocked
[03:56:48] <lseactuary> lol i didnt mean like that
[03:56:56] <lseactuary> *help unblock me :)
[03:57:12] <TML> lseactuary: I'm trying to figure out what you were expecting to have happen
[03:57:43] <lseactuary> is the code you are seeing with the df?
[03:58:02] <lseactuary> say you have heirarchy node = 1 then you should check all the rows which have 1 inside in level 0
[03:58:19] <lseactuary> then we should use lookup_node to check which rows have this value in for level1/2/3
[03:58:30] <lseactuary> then if there is a match, output the 'child'
[03:58:43] <lseactuary> for example, if we input 1, 4 i nthe function
[03:58:49] <lseactuary> 4 is a level3 node
[03:58:54] <lseactuary> we should output A
[03:58:58] <lseactuary> as that is the child
[03:59:03] <lseactuary> say we input 1,9
[03:59:11] *** Parts: Matt__ (~Matt@ns324361.ip-37-59-58.eu) (Leaving)
[03:59:24] <lseactuary> there are 2 rows, where level0=1 and level2 = 9 in this case, so we output D and E
[03:59:25] <lseactuary> etc
[03:59:29] <dminuoso> SnoopJ: Imagine you had one global store in which every python package went, its directory name containing the hash of its contents. If the same package is used twice, its automatically shared. If you have two different versions or build flags, they coexist via different hashes.
[03:59:32] <lseactuary> does it make sense?
[03:59:39] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:59:51] <dminuoso> And you synthesize PATH and some arbitrarily steered python import path based from that
[03:59:57] *** Quits: emf (~emf@2620:10d:c090:400::5:e4c1) (Ping timeout: 240 seconds)
[04:00:17] <dminuoso> Baked into a read-only file system, so these things stay in place
[04:00:27] <dminuoso> So that's what you end up with
[04:00:43] *** Joins: _ev (ev@user/ev/x-8999918)
[04:01:01] *** Joins: emf (~emf@163.114.132.4)
[04:01:08] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[04:01:10] <dminuoso> (What I wrote is a gross oversimplification with some incorrect things, but its morally close enough to the truth)
[04:01:56] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:02:01] *** Quits: arshcus (~arshcus@99-97-216-110.lightspeed.okcbok.sbcglobal.net) (Quit: Client closed)
[04:02:04] *** Quits: _ev (ev@user/ev/x-8999918) (Client Quit)
[04:02:59] *** Joins: audiobirb (~audio@user/audio)
[04:04:00] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[04:04:12] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:04:13] <SnoopJ> dminuoso, hmm, I think conda does all of that except that it might involve some replication of that data. How does it cut across different coexisting Python versions? Sounds like it could almost be a super-pyenv.
[04:04:28] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[04:04:45] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[04:05:21] <mefistofeles> SnoopJ: also nix (?) I still have to test that one
[04:05:40] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:05:53] *** Quits: emf (~emf@163.114.132.4) (Ping timeout: 256 seconds)
[04:05:59] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:05:59] *** Joins: cliluw (~cliluw@47.147.73.223)
[04:06:04] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[04:06:04] <dminuoso> SnoopJ: It doesn't matter whether you have multiple python versions, heck you could have two different Python versions using different glibc versions at the same time as well.
[04:06:38] <dminuoso> The major difference between nix is the guaranteed determinism. So the lie I did above is that the hash depends on the contents - in reality the hash depends on what we consider "inputs"
[04:06:42] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[04:06:47] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:07:06] <SnoopJ> mefistofeles, well, nix is this idea for *the system itself* AFAIK
[04:07:11] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:07:31] *** Joins: Wulf (~Wulf@user/wulf)
[04:07:35] <dminuoso> And by input I mean anything that the package either depends upon (directly, indirectly) or the input source files to build whatever it is you're building
[04:07:40] <lseactuary> TML  actually I got it :)
[04:07:40] <SnoopJ> but maybe I'm misunderstanding the relationship between this and nix
[04:07:48] <dminuoso> So if you depend on some library, a change in taht dependency causes a hash difference
[04:07:57] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::40) (Ping timeout: 240 seconds)
[04:08:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:08:09] <dminuoso> So you can have two identical versions of a package that both use different libraries - and they can coexist via different hashes in that store
[04:08:24] <TML> lseactuary: I guess I get hung up on why you don't think "F" should be part of the result
[04:08:33] <lseactuary> it is :)
[04:08:39] <lseactuary>   def find_children(policy_table, heirarchy_node, lookup_node):
[04:08:40] <lseactuary>     child_list = []
[04:08:40] <lseactuary>     for _, row in policy_table.iterrows():
[04:08:41] <SnoopJ> Sure, I understand the purpose of being able to lookup by hash. It's why requirements specifiers allow you to pin hashes. And the idea makes a lot of sense for "build me an environment" tooling
[04:08:41] <lseactuary>       if row["level0"] == heirarchy_node and (row["level1"] == lookup_node or row["level2"] == lookup_node or row["level3"] == lookup_node):
[04:08:41] <lseactuary>         child_list.extend(row['child'])
[04:08:42] <lseactuary>     return child_list
[04:08:42] *** litharge sets mode: +q *!*@2601:646:202:2f10:38ad:2504:b1b7:acee
[04:08:48] <SnoopJ> lseactuary, please don't paste code into the channel
[04:08:52] <TML> your pastebin says it should only include D and E
[04:09:14] *** litharge sets mode: -q *!*@2601:646:202:2f10:38ad:2504:b1b7:acee
[04:09:14] <TML> "it should only return D and E though."
[04:09:18] <mefistofeles> SnoopJ: yes, but you can use nix for dev envs
[04:09:20] *** Quits: lseactuary (~lseactuar@2601:646:202:2f10:38ad:2504:b1b7:acee) (Quit: Client closed)
[04:09:30] *** Joins: lseactuary (~lseactuar@2601:646:202:2f10:38ad:2504:b1b7:acee)
[04:09:32] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[04:09:32] <lseactuary> yes it was a mistake on my end :(
[04:09:34] <mefistofeles> SnoopJ: well, afaik, at least
[04:09:35] <TML> oh
[04:09:54] <dminuoso> SnoopJ: Right. So nix gives us a simple pure functional language that follows the pure/deterministic model, all the build descriptions are done in that same language. Nix is not a package manager, its a language fitted onto a reproducibile build ecosystem.
[04:09:56] *** Guest1161 is now known as az
[04:10:00] <dminuoso> It's very different from conda in so many ways
[04:10:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:10:14] <TML> lseactuary: In that case, I'd say: https://bpa.st/V7FA
[04:10:25] <dminuoso> Anyway
[04:10:26] *** az is now known as Guest3672
[04:11:00] <TML> lseactuary: IMO that's way more readable than your chain of conditionals
[04:11:07] <lseactuary> oki testing
[04:11:09] *** Guest3672 is now known as az
[04:11:17] <dminuoso> The point I making is, there's tools to help automatically convert say a poetry.lock into what we dub a nix closure, (think of it as a big ball of all these hashes/packages that constitute the set of *all* python packages, and their native dependencies down to the glibc)
[04:11:25] *** Quits: az (az@stable.bnc.by.bnc4you.xyz) (Changing host)
[04:11:25] *** Joins: az (az@user/azz)
[04:12:07] <dminuoso> So we can turn a poetry.nix into a perfect, reproducible and deterministic output that we can just toss onto machines
[04:12:19] <dminuoso> Assuming all the packages build portably.
[04:12:19] <TML> dminuoso: I actually love the ideas behind Nix (the tooling), but I really struggle with Nix (the language) and how to get my Python packages installed
[04:12:45] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:13:11] *** Joins: walterwhip (~www@user/walterwhip)
[04:13:24] <freefall> ok let try this.... https:/bpa.st/4HTQ
[04:13:31] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[04:13:33] <TML> I don't understand the whole withPackages thing and haven't been able to figure out how to get it to install stuff that's not packaged by Nix
[04:14:03] <freefall> ok so i define the variable in get_current_price but i want it define in the main area
[04:14:06] <dminuoso> SnoopJ: And that's the thing you just dont get from pure pip. Todays install might be different from tomorrows.
[04:14:27] <dminuoso> Or it might not even be that extreme. You can try something now, deploy it in 5 minutes and have it break because someone updated some package in pypi
[04:14:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:15:03] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8) (Ping timeout: 256 seconds)
[04:15:21] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[04:15:25] *** Joins: newpy (~newpy@206.168.231.90)
[04:15:28] <dminuoso> And yeah, you can maintain very strict requirement.txt to limit that danger, but that introduces extra maintenance burden whenever you want to update packages. At least poetry has that ergonomics mostly right, if semver was being followed well enough
[04:16:11] *** Joins: pepper (~pepper@user/pepper)
[04:16:22] <dminuoso> wheels would be nice, but they are simply not really portable :(
[04:16:32] *** Quits: capn (~capn@user/capn) (Quit: Later!)
[04:16:40] *** Quits: oriba (~oriba@dynamic-089-014-172-069.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:17:13] *** Joins: Common (~Common@096-033-221-075.res.spectrum.com)
[04:17:37] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[04:18:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:18:16] *** Joins: deadmund (~quassel@155.68.54.74)
[04:18:20] *** Quits: tomg (~tomg@user/tomg) (Remote host closed the connection)
[04:18:43] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:19:05] *** Quits: freefall (~owner@2600:6c40:1600:39ec:f181:62fb:e89b:4221) (Quit: Leaving)
[04:20:01] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:20:40] *** Joins: tomg (~tomg@user/tomg)
[04:21:07] *** Quits: tomg (~tomg@user/tomg) (Remote host closed the connection)
[04:21:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:21:51] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[04:22:23] <SnoopJ> I guess it depends on where you're porting from/to
[04:22:52] *** Joins: tomg (~tomg@user/tomg)
[04:22:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[04:23:13] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[04:23:18] <SnoopJ> Since you mentioned glibc, I can fully believe that you're well down the path of needing to worry about it, sounds like a big deployment footprint.
[04:23:21] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Quit: WeeChat 3.4)
[04:23:29] *** Quits: lseactuary (~lseactuar@2601:646:202:2f10:38ad:2504:b1b7:acee) (Quit: Client closed)
[04:23:46] <dminuoso> Dont really have to, this happens all behind the scenes and automatically
[04:24:09] <dminuoso> The point is not that you have to worry about it, but rather that it supports it
[04:24:55] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:26:17] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: Leaving)
[04:26:19] <dminuoso> https://gist.github.com/dminuoso/cf29526de4cd9c4453a493c82145a335
[04:26:35] *** Joins: cdown_ (~cdown@188.214.11.14)
[04:26:37] *** Joins: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[04:27:01] <dminuoso> This is an example of what such a packaging looks like. Take note that most the noise, starting from 30, is just various hotfixes working various build issues that python packages experience
[04:27:12] <dminuoso> This list is quite short..
[04:27:38] <SnoopJ> "Needing to worry about it" → moving from [whatever you used before] to this
[04:28:05] <dminuoso> Ah heh
[04:28:43] <dminuoso> Actually had our share our python dependency hell from manually and globally installed packages already
[04:29:07] *** Quits: tomg (~tomg@user/tomg) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[04:29:13] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[04:29:24] *** cdown_ is now known as cdown
[04:29:29] *** Joins: tomg (~tomg@user/tomg)
[04:29:40] <gambl0re> can a table have two FK's?
[04:30:14] <dminuoso> cryptography is a particularily annoying one, because that one requires rust/cargo at build time, but here comes the problem
[04:30:55] <dminuoso> Because the build process must be non-deterministic (I agree, so this one in particulary is not really a cryptography *bug*, we nix users are just a special flake), it means you dont get network access
[04:31:26] <dminuoso> so we must provide the cargo deps a priori as build input (so they appear in the input and can therefore influence the hash)
[04:31:29] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 256 seconds)
[04:31:41] <dminuoso> but that means we must constantly monitor whatever rust package versions that package wants
[04:32:10] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:11] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[04:32:19] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:32:24] <dminuoso> but other such issues exist with other packages that make dumb assumptions about being able to write to the world, make arbitrary http requests to weird servers..
[04:32:37] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Ping timeout: 256 seconds)
[04:32:38] <dminuoso> they mostly go unnoticed in the wide world
[04:32:47] <dminuoso> but pypi is full of them
[04:32:56] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:33:01] *** Joins: brabrax (~brabrax@user/brabrax)
[04:33:10] *** Joins: califax (~califax@user/califx)
[04:33:12] <dminuoso> (I mean doing these things at setup/build time, of course)
[04:33:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:33:25] *** Joins: llanhmod_ (~developer@user/domhnall/x-2887755)
[04:33:28] *** Quits: llanhmod_ (~developer@user/domhnall/x-2887755) (Client Quit)
[04:33:33] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e2c7:ae5c:c5e4:1022) (Remote host closed the connection)
[04:33:37] *** Joins: b100100 (~b100100@31.7.59.226)
[04:33:44] <SnoopJ> ah, so this answers my earlier question in part: crossing the FFI boundary is causing some of these headaches transitively.
[04:33:54] *** Joins: junebug (~junebug@2600:1700:3db0:2540:7d65:4803:5dd7:22ab)
[04:34:00] *** Joins: pepper (~pepper@user/pepper)
[04:34:13] <SnoopJ> or maybe not "causing" but that's the ballpark
[04:34:34] <dminuoso> It's just making assumptions about the world you shouldn't be making
[04:34:43] <dminuoso> Like assuming that your build environment is inside a git repositoryu
[04:34:48] <dminuoso> Or that you have network access
[04:34:48] *** Joins: miremeister (uid387155@id-387155.uxbridge.irccloud.com)
[04:34:54] *** Joins: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[04:35:01] <dminuoso> Or that particular directory paths (like /usr/lib/include) exists and must be readable
[04:35:04] <SnoopJ> dminuoso, what are the artifacts that come out the other side of this tooling? Is it something agnostic to the toolchain? I see that it can rendor Docker images, so that seems promising.
[04:35:09] <dminuoso> Or even writeable
[04:35:36] <SnoopJ> nix-shell sounds like it's an 'adaptor' you slot standalone environments into, but I didn't go deep into the docs, I started going a little crosseyed
[04:35:41] <dminuoso> SnoopJ: They are simple paths that closely resemble the FHS root
[04:35:51] <dminuoso> (but could in principle contain anything you cwant)
[04:36:37] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 240 seconds)
[04:37:01] <SnoopJ> dminuoso, okay, how do I install [that thing]? Just copy/overlay that onto my FS, or is nix-shell a pile of environment indirection that "does the right thing" for whatever you're running?
[04:37:23] <SnoopJ> install/use
[04:37:32] <jinsun__> what is the problem in assuming build environment is inside a git repository?
[04:37:43] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:38:04] <dminuoso> SnoopJ: You just install `nix` into whatever path you like, and then make sure its in your PATH. From there on `nix` will manage a directory under /nix/store. The rest of the nix tools will synthesize PATH and other environment variables as necessary to provide you the necessary environment.
[04:38:17] *** Quits: junebug (~junebug@2600:1700:3db0:2540:7d65:4803:5dd7:22ab) (Ping timeout: 240 seconds)
[04:38:20] *** Quits: maelstrom (~maelstrom@gateway/tor-sasl/maelstrom) (Quit: Leaving)
[04:38:41] <dminuoso> nix-shell is a very useful primitive to set up shell environments that have the right packages
[04:38:45] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[04:39:17] <dminuoso> For example, I just wanted to use `tree`, but I dont have it installed in my system description, so I quickly ran `nix-shell -p tree`, which sets me up with a bash in which `tree` is available.
[04:39:49] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:39:54] <dminuoso> To do this, nix will automatically grab tree and its transitive dependencies from the cache (or build them locally if cache is unavailable), place them in the nix store, and set up my PATH to include the store path of the newly added tree.
[04:40:02] <dminuoso> The same works for python packages as well
[04:40:17] <dminuoso> (Except with python packages there's a slight bit of indirection for various reasons)
[04:40:46] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:40:55] *** Joins: _ev (ev@user/ev/x-8999918)
[04:41:34] <dminuoso> jinsun__: It means the notion of source distributions is fundamentally broken now.
[04:42:11] <dminuoso> And you cant simply fiddle int he git repository
[04:42:18] <dminuoso> What if I want to switch to mercurial, will it work?
[04:42:41] <dminuoso> What if I want to use something else? Or maybe no versioning system?
[04:42:42] *** Joins: mspe (~user@tilde.team/user/mspe)
[04:42:50] <dminuoso> Maybe I want to fetch a tarball from github archives instead of a git repo?
[04:43:09] <SnoopJ> dminuoso, ah, okay. That's probably quite tidy when you control the deployment environment.
[04:43:22] *** Quits: _ev (ev@user/ev/x-8999918) (Client Quit)
[04:43:38] <dminuoso> SnoopJ: Heh, well we go one step further, we deploy NixOS which extends all these notions to the entirety of the file system.
[04:43:56] <dminuoso> SnoopJ: So the kernel, systemd, all units, firewall... everything is described with nix and is fed from that nix store.
[04:44:01] <SnoopJ> If there's one thing I've learned about the nix community, it's that "one step further" seems like standard practice :)
[04:44:07] <dminuoso> my entire /etc is just a huge bunch of symlinks pointing towards /nix/store
[04:44:09] <SnoopJ> (that might be the single thing, though)
[04:44:37] *** Quits: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269) (Remote host closed the connection)
[04:44:38] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::40)
[04:44:40] <dminuoso> in fact, almost all files in entire root directory, exceot for /home and /nix is just, mostly, symlinks pointing inside the nix store :p
[04:45:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[04:45:17] *** Joins: califax- (~califax@user/califx)
[04:45:17] *** Joins: mickey84 (~user@user/mickey)
[04:45:42] <jinsun__> dminuoso: that didn't explain much, if git is required to build then obviously it won'y work if you do it any other way
[04:45:57] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[04:46:01] <dminuoso> Yes, making it very non-portable
[04:46:05] *** Joins: EdFletcher (~PKD@user/edfletcher)
[04:46:14] <dminuoso> And brittle as well, because git tags are not part of commit objects
[04:46:23] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-d101-c13b-d21b-fd51.res6.spectrum.com) (Read error: Connection reset by peer)
[04:46:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:46:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:46:39] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[04:46:40] *** califax- is now known as califax
[04:46:48] <dminuoso> Which means I cant simply point towards a commit hash and get the same result.
[04:46:53] *** mickey84 is now known as mickey8
[04:47:04] <dminuoso> If the author moves a tag around, suddenly this breaks things, despite me pointing at the same commit hash
[04:47:15] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 256 seconds)
[04:47:35] <dminuoso> All that for 5 seconds of a maintainers time. It's a tradeoff not worth it.
[04:47:59] <dminuoso> I'd rather have some git pre push hook that asserts whether the specified version matches with a tag
[04:48:04] *** Quits: b100100 (~b100100@31.7.59.226) (Quit: Leaving)
[04:48:26] *** Joins: Viewday117 (~Viewday@user/viewday)
[04:48:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326)
[04:48:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326) (Changing host)
[04:48:56] *** Joins: skapata (~Skapata@user/skapata)
[04:49:35] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 250 seconds)
[04:50:16] *** Joins: justm3 (~Username@84-84-41-7.fixed.kpn.net)
[04:50:39] *** Quits: Viewday11 (~Viewday@61.141.126.127) (Ping timeout: 256 seconds)
[04:50:39] *** Viewday117 is now known as Viewday11
[04:51:05] <dminuoso> There was a time when people wrote portable software out of conviction. Wanting your software to be buildable on solaris, linux, *BSD variants, IRIX and what not - people wouldn't just limit "this software only builds under this special precious environment"
[04:51:35] <dminuoso> It's a bad habit that stems out of people trying to increase velocity of their software output, that they care less and less about how and where their software gets build
[04:52:05] <dminuoso> (Okay, IRIX definitely didnt belong there)
[04:52:36] <SnoopJ> Red queen hypothesis, but for software deployment
[04:52:46] <grym> "all the world's a vax" is also from that time, so i wouldn't be quite so sure that the good old days were particularly better here
[04:53:13] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[04:53:26] <SnoopJ> Yea, what about those users who are on systems that predate virtual memory? :)
[04:54:24] <dminuoso> hah, how many users would know their modern 2022 CPUs still start in real mode?
[04:54:31] <dminuoso> Or what real mode even is
[04:55:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:55:08] <grym> or care, or have to
[04:55:10] <dminuoso> (Or I must admit, things might have changed with UEFI)
[04:55:13] <SnoopJ> All the more reason that "buildable everywhere" is kind of a strange thing to chase.
[04:55:18] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:55:21] <grym> (i don't manually adjust the timing on my sparkplugs, neither)
[04:55:23] <SnoopJ> But when you have tall requirements, you have tall requirements.
[04:55:37] <SnoopJ> I will say that I think CPython itself stacks up *very* well here.
[04:55:37] *** Joins: hamms (~hams@73.232.205.0)
[04:56:17] <SnoopJ> It is by far the easiest thing I ever build for work, including our core product
[04:56:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[04:56:34] <dminuoso> What is your core product?
[04:57:03] *** Joins: b100100 (~b100100@31.7.59.226)
[04:57:05] <grym> cpython, emacs, and to a certain extent mpv have proven just dead easy to build
[04:57:20] <grym> (mpv has mpv-build, which _really_ helps)
[04:57:33] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[04:57:38] <SnoopJ> dminuoso, a computer vision system, resting atop a bunch of C++ miscellany, CUDA, and assorted odds and ends. Python is a relatively recent (~2 years) addition to our stack and we have a very narrow deployment context
[04:57:43] *** Joins: bigbianarch40 (~bigbianar@117.176.106.101)
[04:57:59] *** Quits: AlanMD (~AlanMD@5-12-8-203.residential.rdsnet.ro) (Remote host closed the connection)
[04:58:30] <SnoopJ> In particular: we only started deploying to *customer machines* last year, we didn't do on-prem software before that, so everything got shoved into containers. Still does for those products.
[04:58:50] *** Joins: nomic (~nomic@185.217.117.244)
[04:58:51] <dminuoso> By computer vision system, do you mean like object recognition in automotives?
[04:59:15] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:59:18] <SnoopJ> Thank god no. Quality assurance in automated manufacturing, mostly.
[04:59:34] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[04:59:40] * SnoopJ would probably not take a job with an outfit that does cars
[04:59:47] <dminuoso> I see, what kind of responsibility does the python have in that product?
[04:59:48] *** Joins: newpy (~newpy@206.168.231.90)
[04:59:58] *** Joins: AlanMD (~AlanMD@5-12-8-203.residential.rdsnet.ro)
[05:00:41] <SnoopJ> Answer is complicated because it's been changing steadily over those 2 years. At the start: research's proving grounds, individual contract deliverables. Now we're doing more services.
[05:01:08] <SnoopJ> When it comes to interfacing with other software, mostly HTTP servers.
[05:02:30] <dminuoso> Mmm, its hard to imagine working in that environment.
[05:02:31] <SnoopJ> Did some prototyping for implementing a plugin to the core product in Python recently, and tossed some ideas around about what value we'd get out of embedding. It's not the right time for that, though.
[05:03:05] <SnoopJ> Especially because we have two (2) Python folks who will be doing deployment and there's enough work to fill our plates.
[05:03:12] *** Quits: deadmund (~quassel@155.68.54.74) (Remote host closed the connection)
[05:03:32] *** Joins: audiophile_ (~audiophil@user/audiophile)
[05:03:52] <audiophile_> How can I refer type hinting to a class within its init method?
[05:03:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[05:04:02] <audiophile_> class Node:
[05:04:02] <audiophile_>     def __init__(self, val: int, next: <HERE> = None) -> None:
[05:04:25] <SnoopJ> audiophile_, as a string, or using `from __future__ import annotations`. https://www.python.org/dev/peps/pep-0484/#forward-references
[05:04:41] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[05:04:45] <SnoopJ> In 3.11 you will have access to typing.Self for this as well: https://www.python.org/dev/peps/pep-0673/
[05:04:53] *** Quits: hamms (~hams@73.232.205.0) (Quit: Leaving)
[05:04:54] <audiophile_> awesome thanks!
[05:05:10] *** Joins: hams (~hams@73.232.205.0)
[05:05:10] *** Quits: hams (~hams@73.232.205.0) (Changing host)
[05:05:10] *** Joins: hams (~hams@user/hams)
[05:05:19] <dminuoso> SnoopJ: As much as Id like to continue this, I really have to get some sleep some - was staying this long to finish pleasing all CI pipelines for this dependency I bumped. Let's continue this some other time
[05:05:37] <dminuoso> Really curious about some insights you have to share about software in the manufacturing industry
[05:05:42] <audiophile_> I'm not a fan of how much changes there are to the type hinting system over python3 versions. First there was List, Set, etc then it became list, set, etc with 3.9 and now this. I should keep myfingers crossed whatever interpreter I get is the latest!
[05:05:46] <SnoopJ> dminuoso, sure, it's always interesting trading shop talk about CI/CD. Don't be a stranger :)
[05:05:55] <audiophile_> github actions?
[05:06:11] <TML> audiophile_: Or just relax your usage of type hinting until it stabilizes
[05:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:06:57] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:06:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:07:00] <SnoopJ> I'm looking forward to being able to rely on generic builtins
[05:07:33] <TML> I'm mostly waiting until the expasperated comments about type hinting issues die down here before really exploring it
[05:08:05] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[05:08:13] *** Joins: newpy (~newpy@206.168.231.90)
[05:08:30] <TML> I am strongly opposed to aiming at swiftly moving targets as a general rule
[05:08:40] *** Parts: miremeister (uid387155@id-387155.uxbridge.irccloud.com) ()
[05:08:44] <SnoopJ> I try to annotate the very simple stuff but it kinda comes and goes. It does help build confidence, but...yea, lil shaky.
[05:09:02] *** Joins: funhouse (~funhouse@user/funhouse)
[05:09:31] <SnoopJ> OTOH our target doesn't exactly move around a lot, so "this targets exactly 3.8 and therefore we can use typing.List" is tenable
[05:09:49] *** Quits: truth2 (~truth@user/truth) (Ping timeout: 240 seconds)
[05:10:26] *** Joins: strugee (~strugee@2603-7000-4900-3a47-2247-47ff-fe82-d58c.res6.spectrum.com)
[05:10:37] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[05:11:40] *** Quits: lidless (~lidless@user/lidless) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[05:12:08] <audiophile_> yeah my bad, but it's one of those things that drives me crazy. Sort of like how dictionary is sorted by default now but wassn't earlier
[05:13:01] <Repiphany> Insertion-order-preserving != sorted
[05:13:18] <TML> audiophile_: Why does that drive you crazy? You can still treat it as though it doesn't preserve insertion order
[05:13:19] <SGautam> I can't seem to figure out how textboxes work.
[05:13:26] *** Quits: ingo (~ingo@user/ingo) (Quit: Leaving)
[05:13:30] *** Joins: truth2 (~truth@user/truth)
[05:13:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[05:13:45] <TML> costs you nothing at all to ignore that behaviour
[05:13:45] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[05:13:50] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[05:13:58] <audiophile_> hurts my eyes when I print()
[05:14:10] <SnoopJ> ?
[05:14:28] <TML> I don't understand - having them come out in a completely random order didn't hurt your eyes, but having them come out in insertion order does?
[05:14:48] <SGautam> So I have a display_text which is a string, a cursor_pos which tells my insertion location in the string and I have a way to put string on the screen. How do I make it such that I am able print only the part of the string that needs to be on the display and also am able to advance left and right on the textbox? It seems such a complicated behaviour to implement?
[05:14:55] <audiophile_> ok bad example
[05:16:29] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Read error: Connection reset by peer)
[05:16:40] <SGautam> The easy way out is to divide the string text into "blocks" of strings that can be displayed one at a time on the textbox (=textbox_width / font_width), and simply set display_text to next block whenever cursor_pos moves past one of the blocks.
[05:17:09] <SGautam> But that doesn't mimic actual textbox behaviour where it scrolls in a much more natural way, one character at a time.
[05:17:22] <TML> audiophile_: I've heard other people complain about that change as well, and I cannot fathom why anyone cares about it. It should have zero impact on people who never expected dictionaries to have a stable order.
[05:17:35] <SGautam> Wait sorry, this is not #programming. Oops
[05:18:14] *** Joins: jazzy (~jaziz@user/jaziz)
[05:18:15] *** Joins: newpy_ (~newpy@206.168.231.90)
[05:18:16] <jinsun__> spreaking of typing, I'm not sure how to do decorator factories without mypy and pyright complaining
[05:18:25] <audiophile_> it's probably a carryover from other programming languages
[05:18:29] *** Quits: newpy_ (~newpy@206.168.231.90) (Remote host closed the connection)
[05:18:30] <audiophile_> you sorta expect it
[05:18:30] <jinsun__> s/spreaking/speaking
[05:18:37] <jinsun__> https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=19a41e3c88c81c28d175f456335bbcc6
[05:18:46] <audiophile_> but yes ill shut up now
[05:19:10] <jinsun__> mypy and pyright both don't like line 16
[05:19:45] <jinsun__> mypy docs have a section on decorator factories https://mypy.readthedocs.io/en/stable/generics.html?highlight=decorator#decorator-factories
[05:19:57] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[05:20:16] <jinsun__> but it doesn't actually show the implementation, just puts ...
[05:20:47] <TML> audiophile_: I don't understand - what's the expected behaviour people are carrying over from other languages?
[05:21:05] <audiophile_> expecting dictionaries to be sorted by default
[05:21:15] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[05:21:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:22:12] <TML> Interesting - what's a language which has that behaviour? Because most of the ones I work with are very explicit that their equivalent of the "dictionary" type are explicitly UNsorted, and must be treated as such.
[05:22:21] *** Quits: SorinK (~SK@79.117.172.158) (Remote host closed the connection)
[05:22:59] *** Joins: hyiltiz (~quassel@31.220.5.250)
[05:23:44] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[05:23:44] *** Quits: bigbianarch40 (~bigbianar@117.176.106.101) (Quit: bigbianarch40)
[05:24:12] *** Joins: bigbianarch (~bigbianar@117.176.106.101)
[05:24:24] <ssbr> TML: C++
[05:24:33] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[05:24:56] <ssbr> (std::set and std::map are sorted binary search tree style data structures, std::unordered_set and std::unordered_map are hash tables)
[05:25:31] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:25:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:25:42] *** Joins: newpy_ (~newpy@206.168.231.90)
[05:25:48] *** Quits: newpy_ (~newpy@206.168.231.90) (Remote host closed the connection)
[05:26:25] *** Joins: newpy (~newpy@206.168.231.90)
[05:26:26] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:26:48] <ssbr> if the question is about *ordered*, I know of no language that defaults to dicts being ordered by insertion order
[05:26:49] *** Joins: cedb (~ced@192-222-138-215.qc.cable.ebox.net)
[05:26:54] <ssbr> (except Python, obviously)
[05:27:40] <TML> Java's HashMap, JavaScript's objects, D and Perl's hashes explicitly are not stored in a stable order; PHP's associative arrays and Ruby's use the same behaviour that Python recently adopted…
[05:27:44] *** Quits: newpy (~newpy@206.168.231.90) (Client Quit)
[05:28:37] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[05:28:58] *** Quits: advanced_malform (~advanced_@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Remote host closed the connection)
[05:29:06] <ssbr> nice
[05:29:31] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[05:29:36] <ssbr> (BTW, for unordered, C++ unordered_map also has no stable guaranteed order. Common libraries like absl::flat_hash_map etc. are the same.)
[05:29:46] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[05:29:54] <ssbr> (it's just a quirk of the language that it defined the sorted containers first and gave them the short names.)
[05:30:02] <TML> the little bit of C++ I write, we never used std::, so I wasn't aware of its behaviour there - thanks for the explanation
[05:30:17] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[05:30:25] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 256 seconds)
[05:30:39] <ssbr> im always happy to nerd out comparing Python, C++, and Rust.
[05:31:30] <InPhase> import unsafe
[05:31:53] <ssbr> every Python programmer should be eternally grateful that this is impossible. :)
[05:32:07] <TML> for me, Python's decision to setting on SOME kind of stable ordering was a sensible move, and I think it's reasonable that they chose a method that is common to other langauges that people often compare to Python
[05:32:28] <InPhase> ssbr: While they're busy fighting the borrow wrecker.
[05:32:38] <ssbr> TML: it makes doubly much sense because it obsoletes an entire metaclass feature, and makes metaprogramming using keyword arguments and namespaces in general that much more powerful.
[05:32:39] <exarkun> in the face of ambiguity, succumb to the temptation to guess
[05:32:41] *** Joins: vlm (~vlm@user/vlm)
[05:33:09] <nedbat> TML: they didn't choose an order at all, it was a side-effect of memory saving
[05:33:10] <ssbr> I love the dict ordering change with every fiber of my being
[05:33:27] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[05:33:37] <TML> nedbat: sure - and I believe that's the reason PHP and Ruby behave that way as well :)
[05:34:13] <TML> meaning "it's simply a side-effect of the implementation details"
[05:34:23] *** Quits: nicode (~nic@2607:f2c0:9541:7100:4a3c:29f0:c179:f26c) (Ping timeout: 256 seconds)
[05:34:43] <InPhase> TML: The reason dicts traditionally aren't insertion ordered is because that typically locks you into inefficient structures.  Someone stumbled across an approach for cpython which preserves order and was not slow, and therefore it became viable.
[05:34:57] <TML> still confused why people are upset at "it has a stable order now, where it didn't before"
[05:35:09] <TML> InPhase: +1
[05:35:10] <InPhase> TML: I look at it as a "because we can get away with it without hurting" feature.
[05:36:49] <InPhase> I didn't look into who it was who implemented that feature, but I applaud the clever audacity to try.
[05:36:53] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:38:04] *** Joins: ebrau (~ebrau@142.126.175.200)
[05:38:36] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:39:02] <SnoopJ> It wasn't even the aim of the changes that introduced it
[05:39:12] <SnoopJ> oh, nedbat already said that
[05:39:24] *** Joins: jazzy3 (~jaziz@user/jaziz)
[05:39:34] <SnoopJ> hence the weird gap between the change and when the property got frozen into the language
[05:40:03] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 256 seconds)
[05:40:07] <SnoopJ> (in line with Hyrum's Law)
[05:40:31] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[05:41:47] *** Quits: Z-cat (~Z-cat@user/z-cat) (Ping timeout: 250 seconds)
[05:42:17] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[05:42:30] *** Quits: ebrau (~ebrau@142.126.175.200) (Client Quit)
[05:43:02] *** Joins: TakinOver (~quassel@96.44.191.138)
[05:43:06] <TML> SnoopJ: beautiful - thanks for sharing that one
[05:43:27] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[05:44:37] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:d4e4:7334:6ed2:d874) (Ping timeout: 240 seconds)
[05:45:23] *** Quits: bigbianarch (~bigbianar@117.176.106.101) (Ping timeout: 256 seconds)
[05:46:17] *** Quits: therufuser (~therufuse@p5b02e5be.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:46:30] *** Quits: akk (~akk@75-161-95-245.albq.qwest.net) (Quit: +++)
[05:46:32] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[05:48:06] *** Joins: therufuser (~therufuse@p5b02e102.dip0.t-ipconnect.de)
[05:49:27] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:49:30] *** Quits: b100100 (~b100100@31.7.59.226) (Quit: Leaving)
[05:49:42] <mh3f> o
[05:49:54] *** Joins: califax- (~califax@user/califx)
[05:49:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:50:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:50:46] <grym> https://xkcd.com/1172/  now if you could do something about that spacebar problem
[05:51:17] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 240 seconds)
[05:51:20] *** Joins: dme86 (~dan@user/dan86)
[05:51:42] <jinsun__> ah the Callable bounded TypeVar from mypy docs was not the way to go, this works https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=4309a4648e31dab1902e834e22e407d5
[05:51:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:52:19] <jinsun__> now if I can figure out how to TypeAlias that ugly  Callable[[Callable[P, T]], Callable[P, T]]
[05:52:45] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:52:45] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:53:09] *** brabrax_ is now known as brabrax
[05:54:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:54:15] *** califax- is now known as califax
[05:54:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[05:55:07] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:55:37] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[05:57:25] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[05:58:05] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[05:58:25] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[05:58:37] *** Joins: johnjaye (~pi@173.209.65.233)
[05:59:28] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[05:59:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[05:59:42] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:59:50] *** Joins: eyepeetee (~aa@024-151-038-076.res.spectrum.com)
[05:59:53] *** Quits: johnjaye (~pi@173.209.65.233) (Max SendQ exceeded)
[06:00:47] *** Joins: JanC_ (~janc@user/janc)
[06:00:49] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[06:00:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:00:56] *** Quits: jinsun__ (~quassel@user/jinsun) (Read error: Connection reset by peer)
[06:00:57] *** JanC is now known as Guest7251
[06:00:57] *** Quits: Guest7251 (~janc@user/janc) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[06:00:57] *** JanC_ is now known as JanC
[06:01:12] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:01:16] *** Joins: bigbianarch (~bigbianar@117.176.106.101)
[06:01:17] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:4068:9ee7:4484:133c)
[06:02:37] *** Joins: jinsun (~quassel@user/jinsun)
[06:02:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:02:54] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[06:03:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:03:45] *** Quits: Esexe_ (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[06:04:53] *** Joins: johnjaye (~pi@173.209.65.233)
[06:05:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[06:06:28] *** Joins: teelrabbit (~teelrabbi@206.214.238.3)
[06:06:55] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[06:08:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:09:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:10:45] *** Parts: __ld (63a6f45fee@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[06:10:53] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 256 seconds)
[06:11:17] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:12:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:12:46] *** Joins: mrlemke (~quassel@2604:a880:4:1d0::394:0)
[06:12:57] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Ping timeout: 240 seconds)
[06:12:59] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8)
[06:13:19] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[06:13:50] *** Joins: XV8 (~XV8@2601:5cb:c001:50:5a5:1e58:a606:31d7)
[06:16:12] *** Quits: bigbianarch (~bigbianar@117.176.106.101) (Quit: Client closed)
[06:16:41] *** Joins: bigbianarch (~bigbianar@117.176.106.101)
[06:17:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[06:17:49] *** Joins: nomic2 (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130)
[06:20:11] *** Quits: nomic (~nomic@185.217.117.244) (Ping timeout: 256 seconds)
[06:20:17] *** nomic2 is now known as nomic
[06:21:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[06:22:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:22:37] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 240 seconds)
[06:22:57] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 240 seconds)
[06:22:59] *** Joins: johnjaye (~pi@173.209.65.233)
[06:23:14] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[06:24:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:26:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:26:14] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[06:26:57] *** Joins: fzf404 (~fzf404@101.32.126.24)
[06:29:06] *** jazzy3 is now known as jazzy
[06:29:15] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 256 seconds)
[06:29:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[06:29:18] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:29:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:30:11] *** Quits: fzf404 (~fzf404@101.32.126.24) (Client Quit)
[06:30:23] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[06:30:44] *** Joins: humbertowoody (~humbertow@187.202.198.64)
[06:31:51] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 250 seconds)
[06:32:23] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:32:51] *** Joins: skapata (~Skapata@user/skapata)
[06:34:41] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:34:43] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[06:35:44] *** Quits: XV8 (~XV8@2601:5cb:c001:50:5a5:1e58:a606:31d7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:36:43] *** Joins: XV8 (~XV8@2601:5cb:c001:50:5a5:1e58:a606:31d7)
[06:38:09] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:38:13] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[06:38:58] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:40:11] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:40:23] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:40:39] <jim> hi, trying to find (complete) docs for list.split(), where it adds an extra item when the last thing it split, had the delimiter it splits on
[06:41:15] *** Joins: Common_ (~Common@096-033-221-075.res.spectrum.com)
[06:41:29] *** Joins: Masterphi (~Masterphi@user/masterphi)
[06:42:41] *** Joins: junebug (~junebug@2600:1700:3db0:2540:28cc:6923:954d:b773)
[06:42:47] <jim> here;s code that shows it, in a partial last item case, and in a case where the last item DOES have the delimiter ('
[06:42:51] *** Quits: junebug (~junebug@2600:1700:3db0:2540:28cc:6923:954d:b773) (Remote host closed the connection)
[06:42:53] <jinsun> you mean str.split?
[06:43:00] <jinsun> lists don't have .split
[06:43:09] *** Quits: Masterphi (~Masterphi@user/masterphi) (Client Quit)
[06:43:17] <grym> jim: https://docs.python.org/3/library/stdtypes.html#str.split
[06:43:26] <jim> thanks :)
[06:44:37] *** Quits: Common (~Common@096-033-221-075.res.spectrum.com) (Ping timeout: 240 seconds)
[06:44:39] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:45:07] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 256 seconds)
[06:45:26] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:48:40] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[06:49:36] <jinsun> why is this written weirdly like this https://github.com/conda/conda/blob/4.11.0/conda/auxlib/_vendor/five.py#L46-L49
[06:50:24] *** Joins: Esexe_ (~aa@024-151-038-076.res.spectrum.com)
[06:50:31] <mefistofeles> jinsun: wow, that is weird
[06:50:43] <grym> wat
[06:50:52] <jinsun> isn't that whole thing just `from imp import reload`
[06:51:19] <jinsun> (which can be replaced with from importlib import reload I guess?)
[06:51:21] <avu> older versions of Python had a builtin function by that name
[06:51:38] <mefistofeles> ah!
[06:51:48] <avu> and if running on such a version of Python, no NameError would be thrown
[06:51:51] <jinsun> ah, so it was some 2-> 3 reshuffle
[06:52:09] <jinsun> or maybe 2.x -> 2.y
[06:52:14] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Remote host closed the connection)
[06:52:26] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:52:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[06:52:40] <ssbr> I completely forgot about the reload builtin. It was terrible!
[06:52:55] <mefistofeles> I get the feeling it can be done with checking built-ins or something, rather than that
[06:53:17] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Ping timeout: 240 seconds)
[06:53:36] <mefistofeles> ssbr: what was it suppose to do? I think I've never used it
[06:53:51] *** Joins: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[06:54:05] <avu> reload a module (with countless caveats)
[06:54:07] <ssbr> mefistofeles: it re-imported the module, rerunning the code inside its definition, etc.
[06:54:19] <ssbr> mefistofeles: this sorta worked, and sorta didn't. The sorta didn't part is what bit people.
[06:54:31] *** Quits: eyepeetee (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[06:54:34] <mefistofeles> I see
[06:54:44] <ssbr> for example, existing objects of type foo.T were no longer of type foo.T.
[06:55:01] <ssbr> so anything based on isinstance (including exception handling) could start failing, etc.
[06:55:18] *** Joins: Vonter (~Vonter@user/vonter)
[06:55:20] <KirkMcDonald> And then new objects of the same type would be of a different type.
[06:55:22] <ssbr> reloading code live is hard in a language like Python. Probably easier in something like C
[06:55:38] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[06:55:47] <ssbr> (if C interpreters existed, anyway)
[06:56:48] <jinsun> so impotlib.reload does the same thing right?
[06:56:56] <jinsun> importlib
[06:57:02] <KirkMcDonald> Yes, that's the same function.
[06:57:12] <KirkMcDonald> They just moved it.
[06:57:17] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[06:57:22] <mefistofeles> ssbr: there are some out there
[06:57:45] <ssbr> KirkMcDonald: noooooo
[06:57:50] <ssbr> that's so sad
[06:58:26] <KirkMcDonald> ssbr: I mean at least it isn't a builtin anymore.
[06:59:01] <jinsun> yeah inside importlib is not too bad, you know you are playing with fire when you touch import
[06:59:10] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[06:59:27] <jinsun> it has its uses in interactive environment like repls and notebooks
[06:59:27] <mefistofeles> who uses something in the stdlib that has to be explicitly imported anyways? :P
[06:59:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[07:00:05] *** Joins: adeliktas4 (~adeliktas@i59F52850.versanet.de)
[07:01:17] *** Quits: adeliktas (~adeliktas@i59F4A09F.versanet.de) (Ping timeout: 240 seconds)
[07:01:17] *** adeliktas4 is now known as adeliktas
[07:02:35] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[07:03:20] *** Quits: imp (~imp@179-191-215-167.static.sumicity.net.br) (Quit: imp)
[07:04:46] <SnoopJ> ssbr, CINT?
[07:05:00] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:05:22] <ssbr> SnoopJ: I was thinking Cling as I wrote that, because Cling is a funnier name, but that too
[07:05:22] <whatsupdoc> Anyone wanna help me with a leetcode puzzle?
[07:05:33] <SnoopJ> I'm not sure if ROOT does (did?) live reloading of the sort you describe but it's something I could believe in, ROOT has everything else.
[07:05:35] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:9c80:d8ad:628a:2d90)
[07:05:39] <SnoopJ> ssbr, Cling is strictly C++ AFAIK
[07:05:43] <ssbr> fair
[07:05:47] <SnoopJ> ...which I guess is not *much* different
[07:05:55] <ssbr> SnoopJ: yeah, it's the sort of thing you'd want to surely do if you're all the way to writing an interpreter
[07:06:02] <ssbr> not a lot of benefits to writing interpreters, but this is one of them
[07:06:10] <ssbr> (or rather, non-optimizing compilers)
[07:06:14] <SnoopJ> ssbr, the main thing that was important for HEP-ex was the rapid development loop
[07:06:47] *** Quits: dtux (~dtux@c-98-207-149-218.hsd1.ca.comcast.net) (Quit: dtux)
[07:06:52] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:06:54] <SnoopJ> and the ability to get down to something that works over their scale of data, I mean
[07:06:59] <whatsupdoc> Here is my code: https://dpaste.com/GRWP9F9BC
[07:07:30] <whatsupdoc> The code works, but my question is how do you do this more elegantly?
[07:08:18] <jinsun> whatsupdoc: link to the problem?
[07:08:21] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:08:49] <whatsupdoc> https://leetcode.com/problems/word-search/
[07:09:03] <whatsupdoc> Code does not fully work though.
[07:09:09] <ssbr> whatsupdoc: I usually write a helper neighbors() that yields all in-range neighbors. you can loop over the offsets: `for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]: ...`. Things like that. Reducing code duplication while also reducing indirection is a thing I enjoy.
[07:09:23] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:09:37] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:11:01] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:11:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[07:11:10] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:11:16] *** Joins: cdown (~cdown@188.214.11.14)
[07:11:18] <jinsun> I see potenttial for some recursion
[07:11:39] <ssbr> jinsun: it recurses in search_letter
[07:11:47] *** Quits: justyb11 (~justyb@64.253.212.72) (Quit: Leaving)
[07:12:28] <ssbr> the solution visits letters more than once, which is incorrect
[07:13:10] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[07:13:15] <jinsun> yeah leetcode puzzles can be solved cleanly with recursion way too many times, much more than I get to see in "real" code
[07:13:23] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[07:13:30] <ssbr> in real code I'd use an explicit stack, which is also clean :B
[07:13:34] <whatsupdoc> ssbr:  not sure what you mean by that
[07:13:47] <ssbr> cleaner, arguably, since it can easily be changed to a queue so that it can be BFS, or a priority queue so that it can be A*
[07:14:07] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:14:14] <jinsun> doesn't look nicer though
[07:14:14] <ssbr> whatsupdoc: I said a lot of things, what's got you?
[07:14:28] <whatsupdoc> ssbr: "the solution visits letters more than once, which is incorrect"
[07:14:37] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 240 seconds)
[07:14:52] *** Joins: redbear (~guy@2601:642:c000:2c38:c75c:dc57:6aeb:26d5)
[07:14:55] *** Quits: teelrabbit (~teelrabbi@206.214.238.3) (Ping timeout: 256 seconds)
[07:14:55] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:14:58] <ssbr> whatsupdoc: nothing stops the solution from getting `frodo` from "frod" by stepping over o twice
[07:15:02] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.4)
[07:15:05] <ssbr> whatsupdoc: the page you linked to says you aren't allowed to do that
[07:15:15] <ssbr> ("The same letter cell may not be used more than once.")
[07:15:38] <whatsupdoc> oh
[07:15:44] <whatsupdoc> i see, thanks
[07:16:08] *** Joins: johnjaye (~pi@173.209.65.233)
[07:18:02] <redbear> I need help writing to columns of a spreadsheet using variables. I have a cell number stored in variable cellnum, I have an amount of cells to loop through stored in variable num. I need to write data to column B, so I am trying to do something like sheet.["B"+str(cellnum):"B"+str(cellnum + num)] but I can't get it to work, can anyone help?
[07:18:21] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[07:18:40] *** Quits: rms2511 (~rrrrrrrrr@107-138-155-103.lightspeed.rlghnc.sbcglobal.net) (Quit: Leaving)
[07:18:43] *** Joins: sandb0y (~pirate@user/sandb0y)
[07:18:46] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:19:05] <ssbr> whatsupdoc: IDK if you know this already, but the search you're doing here is a "depth-first search" (DFS), and so looking at other code that also does DFS might help give you a picture of the common patterns
[07:20:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:21:37] <whatsupdoc> oh wait, you can't move diagnally i think
[07:21:46] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:22:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:22:12] <whatsupdoc> I can pass the previous index as tuple
[07:22:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:23:37] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[07:24:19] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[07:24:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:25:54] *** Joins: rms2511 (~rrrrrrrrr@107-138-155-103.lightspeed.rlghnc.sbcglobal.net)
[07:26:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:27:25] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[07:28:31] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 256 seconds)
[07:29:00] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[07:29:22] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:06] *** Quits: GreenLlama (~quassel@80-219-124-12.dclient.hispeed.ch) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:30:46] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[07:30:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[07:31:21] *** Quits: rms2511 (~rrrrrrrrr@107-138-155-103.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 256 seconds)
[07:31:21] *** Joins: haasn (~nand@haasn.dev)
[07:31:26] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:32:20] *** Joins: GreenLlama (~quassel@80-219-124-12.dclient.hispeed.ch)
[07:32:24] *** Joins: pankid (~quassel@pankid.club)
[07:33:13] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:33:23] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[07:34:02] *** Joins: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:15] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[07:39:40] <ssbr> whatsupdoc: it's not just the previous index, *any* previous index.
[07:40:30] *** Joins: humbertowoody (~humbertow@187.202.198.64)
[07:40:56] *** Joins: nunggu (~q@user/nunggu)
[07:42:30] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[07:42:41] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[07:42:56] *** Joins: johnjaye (~pi@173.209.65.233)
[07:43:01] <seanicus> Is anyone here familiar with asyncssh?  I am quite confused as to how I actually implement checking the password.  https://asyncssh.readthedocs.io/en/stable/_modules/asyncssh/server.html  Returning "True" on validate_password always results in a failure.  I implemented every method here, but apparently something is running that is sending the prompt anyway.
[07:43:42] *** Quits: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6) (Quit: Leaving)
[07:43:52] *** Joins: ClearlyRandom (~ClearlyRa@075-132-054-135.res.spectrum.com)
[07:44:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:44:09] <whatsupdoc> ssbr: Any idea why this doesn't work: https://dpaste.com/5GKJ6CG9D
[07:44:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:45:06] *** Quits: ClearlyRandom (~ClearlyRa@075-132-054-135.res.spectrum.com) (Client Quit)
[07:47:15] *** Joins: aiena (~aiena@user/aiena)
[07:47:36] <aiena> I am on python 3. If I use subprocess.run(["coomand])
[07:47:49] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[07:47:53] <whatsupdoc> omgg it's a variable clash
[07:48:29] <aiena> I am on python 3. If I use subprocess.run(["command","arg1"]) then I am able to use stdin of the process in terminal but if I use POpenthe behaviour is different
[07:48:41] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[07:49:30] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[07:49:58] *** Joins: bluedust (~bluedust@103.160.194.110)
[07:50:33] *** Joins: freefall (~owner@2600:6c40:1600:39ec:f181:62fb:e89b:4221)
[07:50:34] <aiena> I am running ffmpeg via that. If the file exists I get a "y/n" input prompt in term in I usue subprocess.run() but if I use subprocess.POpen() it's like as if an enter key was pressed directly
[07:52:16] <freefall> need some enlightenment... so in programing as i find out using Global() is bad practice so how do you get a variable from a function that was call to by a tkiner button
[07:53:09] <whatsupdoc> Wow, I solved ,it but now it's too slow
[07:53:13] <whatsupdoc> https://dpaste.org/0WnW
[07:53:14] *** Joins: junebug (~junebug@2600:1700:3db0:2540:28cc:6923:954d:b773)
[07:53:53] <whatsupdoc> This question is too annoying
[07:55:18] <llanhmod> Advice touse bpa.st but instead using dpaste.org is annoying too.
[07:56:03] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[07:56:12] <whatsupdoc> It doesn't do syntax highlighting so I don't like it
[07:58:36] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[07:59:16] <llanhmod> In 'Text only' no, it wouldn't.
[07:59:19] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[07:59:31] *** Quits: junebug (~junebug@2600:1700:3db0:2540:28cc:6923:954d:b773) (Quit: Leaving)
[07:59:45] <whatsupdoc> llanhmod: I don't like haven't to change it by myself
[07:59:48] <whatsupdoc> *having
[07:59:55] <Repiphany> bpa.st/+python
[08:00:07] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Remote host closed the connection)
[08:00:19] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[08:00:20] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[08:00:46] <whatsupdoc> ok Repiphany i'll see if I can get used to it
[08:00:52] <llanhmod> whatsupdoc: Don't confuse my comment as attack on your or your preference. I'm just using my keyboard to type things.
[08:01:06] *** Quits: au (~au@4.59.10.31.omegatech.cz) (Quit: Lost terminal)
[08:01:43] <llanhmod> ../ your person or your preference
[08:02:22] <freefall> any suggestion?
[08:02:46] <Repiphany> Anyone can delete a dpaste link just by clicking "Delete Now"
[08:03:16] <Repiphany> freefall: Encapsulate your tkinter app in a class, or pass everything around as arguments
[08:03:36] <freefall> does this work with button calls?
[08:04:19] <Repiphany> Use closures or functools.partial
[08:05:33] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[08:05:37] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 240 seconds)
[08:05:41] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[08:05:43] <freefall> sorry still new to this what you mean closures
[08:07:00] <Repiphany> A function that returns a function
[08:07:27] *** Joins: nunggu (~q@user/nunggu)
[08:08:34] <freefall> ok so have the button call to a function which basically call the other fuction
[08:09:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[08:11:14] <freefall> ok so my next question Repiphany how would i take the data from that function call and use it else where with out global the variable?
[08:11:27] <aiena> solved it ha to call p.wait() hmm
[08:12:20] <llanhmod> freefall: return it
[08:13:02] <freefall> ok but right now if im calling the function with a button command pretty much anything im returning goes dead even with Global in my program
[08:13:17] *** Joins: bytehackr (~Sandipan@45.249.73.198)
[08:15:19] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8) (Ping timeout: 256 seconds)
[08:15:56] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[08:18:06] <llanhmod> freefall: Maybe I misunderstood the details of that question.
[08:19:28] *** Joins: icy_hot (~icy_hot@99-83-35-64.lightspeed.elpstx.sbcglobal.net)
[08:19:43] <freefall> ok i call to the area of my program with a button but with button you cant pass variables so how do you get them from one area to another... it seem the button command after function done delete all variable even global
[08:19:44] <llanhmod> freefall: to me it asked, 'how to use the data from a function else where in a program'. Is that right?
[08:19:54] *** Joins: Oddity (~Oddity@user/oddity)
[08:20:06] <aiena> llanhmod: his question is more specific to tkinter
[08:20:24] <aiena> I think he'd have to read some tkinter tutorials as gui programming event loops are different
[08:20:26] <freefall> pretty much yes aiena.. as im try to make something gui
[08:20:39] <llanhmod> aiena: oh okay... well I will say nothing else further unless it is a question of my own since I dont know about tkinter.
[08:20:47] <Repiphany> If you want your button clicks to have side-effects, the sensible way is to use class encapsulation
[08:21:37] <freefall> so have the button call to a class?
[08:21:53] <Repiphany> Have your whole GUI app as a class
[08:22:13] <freefall> oh ok
[08:22:38] <aiena> freefall: make sure to create an object of that class and call the run method though
[08:22:45] <aiena> a class is a template only otherwise
[08:22:54] <aiena> no one can run a class itself
[08:23:05] <aiena> err call
[08:23:21] <freefall> right so def some name then do a class inside it
[08:23:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:23:45] <freefall> an have the call being mainloop()
[08:23:45] <aiena> so basically here your globals are local to the class object
[08:24:10] <aiena> so this.var is accessible from all functions and still not superglobal
[08:24:18] <freefall> ok so with class your vars that are global dont get kill ?
[08:24:37] *** Joins: txhc4lif- (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[08:24:48] <aiena> ah sorry I think I am unable to explain varialbe scope correctly to you one sec
[08:24:57] *** Quits: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Ping timeout: 240 seconds)
[08:25:00] <freefall> right but in programming isnt this kinda of no no? as global can cause problems else where?
[08:25:23] <aiena> hmm not if you are careful
[08:25:40] <freefall> as in not reuse it else where to change it..
[08:25:59] <freefall> unless it to be updated?
[08:26:05] <aiena> hmm
[08:26:14] <llanhmod> 'variable environment' == 'variable scope' aiena ?
[08:26:46] <aiena> actually I am struggling to help you sorry if I am confusing you'll more
[08:26:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:26:53] <aiena> can you make some minimal sample code?
[08:27:04] <freefall> not really just wait for the light in my head to turn on
[08:27:29] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:27:51] <freefall> no really as for me im doing something that kinda dumb i think as im calling a function to a function
[08:28:23] <aiena> huh
[08:28:30] <llanhmod> freefall: try not to call your 'constants'  'variables'.
[08:28:44] <aiena> just show some code please with what is not working and what you want to acheive
[08:28:56] <freefall> https://bpa.st/3QJQ
[08:28:58] <llanhmod> that's what is confusing
[08:29:24] <Repiphany> freefall: https://bpa.st/SUJQ
[08:30:16] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[08:30:17] <freefall> im try to use more then one windows basically off the main window you hit a button to go to another window that ask you to enter a ticker name of a stock then it look it up and return back what it fines
[08:30:34] *** Joins: johnjaye (~pi@173.209.65.233)
[08:30:58] <freefall> well from the call to the get current part it not return it back to anywhere
[08:31:43] <freefall> it seem like the button just dumps the memory of anything there.. i been racking my brain for a few days try to figure this out
[08:31:45] *** Joins: teelrabbit (~teelrabbi@206.214.238.3)
[08:31:55] *** Joins: emerent_ (~quassel@p200300cd57044366ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:55] *** Quits: emerent (~quassel@p200300cd5704437cba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (mercury.libera.chat (Nickname regained by services)))
[08:31:55] *** emerent_ is now known as emerent
[08:32:55] <freefall> thanks Repiphany
[08:33:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[08:33:44] <freefall> i notice you used pack() instead of the .grid i try using the pack but ended up having a lot of problems with it
[08:34:07] <Repiphany> That's just being lazy and not caring about layout
[08:34:17] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 240 seconds)
[08:34:44] <freefall> oh ok so the grid take care of the layout? thought you could do layout with pack
[08:35:06] <Repiphany> It's just a toy example where layout doesn't matter
[08:35:28] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[08:35:34] *** Quits: teelrabbit (~teelrabbi@206.214.238.3) (Client Quit)
[08:36:11] *** Quits: txhc4lif- (~txhc4life@cpe-70-117-20-42.satx.res.rr.com) (Ping timeout: 256 seconds)
[08:36:24] <freefall> ok.. but how does the program event loop with tkinter or gui differ from just scripting
[08:36:31] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[08:36:34] <freefall> as in just display to terminal
[08:37:19] <Repiphany> https://en.wikipedia.org/wiki/Event-driven_programming
[08:37:37] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 240 seconds)
[08:37:48] *** Joins: txhc4life (~txhc4life@cpe-70-117-20-42.satx.res.rr.com)
[08:38:23] *** Joins: zebrag (~chris@user/zebrag)
[08:38:35] <freefall> ohhhh ok.. that why i can display any output at the main part of the program....
[08:38:47] *** Joins: reset (~reset@user/reset)
[08:39:17] <freefall> so all the buttons and etc flows to the main.loop after init of the program an then just stay there until something happens
[08:39:37] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[08:39:40] <freefall> not why i can but cant sorry
[08:39:44] *** Joins: analoq (~yashi@user/dies)
[08:40:22] *** Joins: sandipan (~Sandipan@202.142.96.81)
[08:41:17] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 256 seconds)
[08:41:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[08:42:31] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[08:42:37] *** Quits: bytehackr (~Sandipan@45.249.73.198) (Ping timeout: 240 seconds)
[08:43:17] *** Joins: masoudd (~masoudd@user/masoudd)
[08:43:43] <freefall> so if you encapsulate the program in a class do you still define variable with global
[08:44:00] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:44:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:44:23] <Repiphany> No, you use instance attributes like `self.clicked` in my example
[08:44:50] *** Joins: jinsun (~quassel@user/jinsun)
[08:45:45] *** Quits: duuude (~user@user/duuude) (Ping timeout: 250 seconds)
[08:46:34] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:46:34] <freefall> so say i want stockticker that has something store in it and i want it  somewhere else in my program do i use self.stockticker to get it?
[08:47:39] <Repiphany> Instance methods all get passed `self` so they have access to all of its attributes to use or modify
[08:48:05] *** Joins: canurabus (~canurabus@ip-24-156-182-149.user.start.ca)
[08:48:14] <freefall> so pretty much any variable made get it own self method
[08:48:15] <Repiphany> Depending on how you write your program, you might be passing instances of different objects around
[08:49:08] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[08:49:45] *** Quits: bluedust (~bluedust@103.160.194.110) (Remote host closed the connection)
[08:50:19] *** Joins: bluedust (~bluedust@103.160.194.110)
[08:51:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:51:11] *** Joins: mtwx (~mtwx@ns324361.ip-37-59-58.eu)
[08:51:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:52:43] *** Joins: duuude (~user@user/duuude)
[08:52:59] <Repiphany> https://bpa.st/JRGQ Each instance of App has independent variables so clicking the button in one window doesn't affect the other
[08:56:17] <freefall> right so window2 cant see anything from window 1
[08:56:20] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[08:59:11] *** Quits: amrooting (~amrooting@95.211.187.223.adsl.inet-telecom.org) (Ping timeout: 256 seconds)
[08:59:24] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:03:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:05:36] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[09:06:00] <canurabus> Hi all. I am trying to write a bunch of json data I recieve from events to file. The events have a sequence number within the data. All I do is write as the events are received. The application is a long running process, and I can't call file.close() in the middle, the file needs to be updated as the events arrive. I wrote something like this simple code (https://bpa.st/SZKA) to do that. For some reason, all the events aren't
[09:06:00] <canurabus> written to file. From the sequence numbers, I can see that some are out of order, others are missing completely. However, the corresponding logging statement outputs the data as expected (no missing events, all in the correct order). Am I doing something obviously wrong here?
[09:07:25] <deniska> canurabus: are there multiple instances of that running at the same time?
[09:07:33] <canurabus> No
[09:08:02] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[09:08:02] *** Quits: freefall (~owner@2600:6c40:1600:39ec:f181:62fb:e89b:4221) (Quit: Leaving)
[09:08:20] <deniska> canurabus: does it have to be a text file? I probably would use an sqlite database
[09:08:51] <deniska> canurabus: or if it has to be a text file, in a single function open in append mode, write to it, close
[09:09:07] <canurabus> I'm trying to debug something in a somewhat restricted environment, I thought the easiest thing to do would be just to write to a file
[09:09:07] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[09:09:19] <deniska> canurabus: what's the environment?
[09:09:54] <canurabus> its a container where i cant freely install whatever modules i want
[09:10:12] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:10:18] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[09:10:27] <deniska> Whatever is running a container might be running multiple instances/threads of it, common for web related stuff and such
[09:10:28] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:10:36] <grawity> is the file stored on a network filesystem (sshfs, nfs, etc)?
[09:11:23] <grawity> hmm, actually, as you're using line-buffering, can you try *not* telling json.dumps() to indent the output? i.e. keep it all in a single line?
[09:11:55] <grawity> or alternatively, not using buffering=1, but instead an explicit self._my_file.flush() after each event
[09:11:56] *** Quits: Ringtailed-Fox (~BoingBoin@2001:1970:5d2a:c500:b1d7:e341:3a4a:bbf6) (Read error: Connection reset by peer)
[09:11:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[09:12:20] *** Joins: Ringtailed-Fox (~BoingBoin@2001:1970:5d2a:c500:e0b9:77e3:d2e6:9927)
[09:12:34] <canurabus> No the file system isn't special.
[09:12:47] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 256 seconds)
[09:12:58] <cluelessperson> canurabus, I don't think you can have multiple processes writing to the same file.
[09:13:06] <canurabus> Yes I can try those thing. So far I guess the list of things to try is: Explicit flush, and then maybe open and close the file within the function that writes the event
[09:13:08] <cluelessperson> canurabus, I would suggest writing to separate files.
[09:13:16] <grawity> of course you can have multiple processes writing to the same file
[09:13:25] <grawity> as long as you're careful about coordinating them
[09:13:32] <cluelessperson> grawity, well, I suppose, yeah.
[09:13:33] <canurabus> There aren't multiple processes
[09:13:50] <canurabus> im not use multithreading or multiprocess.
[09:13:52] <grawity> but having several handles open for writing has been a normal thing for ~decades
[09:14:26] <cluelessperson> canurabus, I would suggest just writing each event to a new file, maybe, as a simple workaround.
[09:14:49] *** Quits: beli6147 (~Thunderbi@174.128.60.162) (Ping timeout: 256 seconds)
[09:15:02] <canurabus> There are hundreds of events. I could do that but it'd be sort of a pain. What is also confusing is that the "logging.debug" statement works as expected
[09:15:04] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:15:05] *** Joins: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[09:15:17] <canurabus> The output there is ordered and complete. Its just the file writes that got screwed up somehow
[09:15:17] <grawity> your log message is probably a single line, a single write() syscall under the hood, whereas your events consist of multiple lines (thanks to that "dumps(indent=)") and so there's one write() per line because of your chosen line-buffering mode
[09:15:34] <canurabus> right
[09:16:40] *** Quits: mtwx (~mtwx@ns324361.ip-37-59-58.eu) ()
[09:16:48] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[09:16:56] <grawity> and hmm, are you always using the same instance of Foo for storing all events, or are you accidentally creating a new instance every single time?
[09:17:20] <canurabus> Only one instance of foo.
[09:17:59] <canurabus> I'll try the suggestions out and see if anything works. I can't generate the events on the fly, so I'll have to test it later... was just thinking I might be missing something completely obvious
[09:18:37] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 240 seconds)
[09:19:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[09:19:13] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Client Quit)
[09:19:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:19:23] *** Joins: georgios (~georgios@user/georgios)
[09:23:03] *** Quits: d00gy (~tonberry@user/d00gy) (Quit: WeeChat 3.4)
[09:23:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:24:26] *** Joins: mtwx (~mtwx@ns324361.ip-37-59-58.eu)
[09:24:56] *** Quits: Ringtailed-Fox (~BoingBoin@2001:1970:5d2a:c500:e0b9:77e3:d2e6:9927) (Read error: Connection reset by peer)
[09:25:20] *** Joins: Ringtailed-Fox (~BoingBoin@2001:1970:5d2a:c500:e0b9:77e3:d2e6:9927)
[09:27:04] *** Joins: upsala (~zcb@185.213.155.232)
[09:27:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:28:17] *** Quits: maxzor (~maxzor@2a01cb04054faa00ba55ec6489e8f679.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[09:30:13] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:31:49] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[09:31:58] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[09:32:17] *** Joins: saroy|afk (~Sandipan@45.249.73.198)
[09:32:35] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[09:33:08] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:33:28] *** Joins: han-solo (~hanish@user/han-solo)
[09:34:17] *** Joins: berong91 (~noob4ever@75.154.235.153)
[09:34:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:34:20] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[09:34:39] *** Quits: sandipan (~Sandipan@202.142.96.81) (Ping timeout: 256 seconds)
[09:35:19] *** Quits: mtwx (~mtwx@ns324361.ip-37-59-58.eu) ()
[09:38:39] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[09:39:35] *** Quits: bluedays (~sean@2603-6080-7b0a-cbc9-08f8-50bf-4000-7260.res6.spectrum.com) (Quit: WeeChat 3.3)
[09:40:57] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[09:41:11] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:42:05] *** Quits: reticuli (~reticuli@user/reticuli) (Ping timeout: 250 seconds)
[09:43:09] *** Joins: clarkk (~clarkk@2a00:23c7:d106:2600:6883:54f8:8cd9:bb54)
[09:43:21] *** saroy|afk is now known as bytehackr
[09:43:57] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[09:44:22] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[09:44:43] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[09:45:14] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[09:45:14] *** Joins: callq (~callq@2409:4062:2e9e:2081:9830:efc1:e4d2:4309)
[09:45:52] *** Joins: avaxar (~avaxar@36.72.213.74)
[09:46:37] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Client Quit)
[09:46:59] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[09:48:46] *** Quits: Strom (~strom@fedora/strom) ()
[09:48:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[09:49:17] *** Quits: vivekl (~viveklane@ip-38-34-35-85.fibre.fibrestream.ca) (Ping timeout: 240 seconds)
[09:50:25] *** Joins: Strom (strom@fedora/strom)
[09:51:32] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:52:50] <aiena> canurabus: I am wondering if you could dumps to a variable first and then write the variables data to file
[09:53:31] <aiena> then free the var though most likely that wont be needed ram most likely isn't an issue
[09:54:14] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[09:54:49] <grawity> that wouldn't make any difference to file.write()
[09:55:21] <grawity> since dumps already returns a whole string at once, not a weird iterator
[09:59:01] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:00:41] *** Quits: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130) (Quit: Leaving)
[10:00:48] *** Joins: vanessa (~vanessa@103.160.128.7)
[10:05:49] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[10:06:03] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Ping timeout: 256 seconds)
[10:06:51] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[10:09:55] <whatsupdoc> Can someone tell me what I'm doing wrong in this code? https://bpa.st/KHNQ
[10:10:13] <whatsupdoc> I'm trying to solve this question: https://leetcode.com/problems/word-search/
[10:10:54] *** Joins: edd_lc (edd_lc@gateway/vpn/protonvpn/eddlc/x-09207710)
[10:11:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:11:35] *** Joins: dreamon (~dreamon@pd9503ca8.dip0.t-ipconnect.de)
[10:12:34] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[10:13:11] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8)
[10:13:20] *** Quits: canurabus (~canurabus@ip-24-156-182-149.user.start.ca) (Quit: Leaving)
[10:15:07] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:16:39] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[10:19:06] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:19:35] *** Joins: eyepeetee (~aa@024-151-038-076.res.spectrum.com)
[10:19:35] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:20:03] *** Quits: jdmark (~jdmark@user/jdmark) (Read error: Connection reset by peer)
[10:20:13] <callq> I want to arrange these entries by name.
[10:20:13] <callq> I have: [{'id': 1, 'name':'a'}, {'id': 2, 'name':'a'}, {'id': 3, 'name':'b'}, {'id': 4, 'name':'b'}]
[10:20:13] <callq> I want: [{'a': [{'id': 1, 'name':'a'}, {'id': 2, 'name':'a'}]}, {'b': [{'id': 3, 'name':'b'}, {'id': 4, 'name':'b'}]}]
[10:21:33] *** Joins: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130)
[10:21:43] *** Quits: kickingvegas (~cchoi@c-67-170-234-150.hsd1.ca.comcast.net) (Quit: leaving)
[10:21:46] *** Joins: mrwick (~mrwick@user/mrwick)
[10:22:52] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[10:23:04] *** Joins: mtwx (~mtwx@ns324361.ip-37-59-58.eu)
[10:23:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[10:23:17] *** Quits: Esexe_ (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[10:23:46] <han-solo> `collections.defaultdict(list)`
[10:24:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:24:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:24:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:25:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:26:05] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[10:26:11] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[10:26:53] <han-solo> callq: https://bpa.st/YMDA
[10:27:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[10:27:23] <jazzy> whatsupdoc, dfs not good, do bfs
[10:27:43] <whatsupdoc> jazzy: why?
[10:27:44] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[10:27:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:28:30] <jazzy> whatsupdoc, bfs better for tree that's much deeper than it is wide
[10:29:04] *** Quits: vanessa (~vanessa@103.160.128.7) (Quit: WeeChat 3.4)
[10:29:19] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Client Quit)
[10:29:38] <callq> Thanks han-solo . Now to access it, do I need to first check with `if 'a' in d: d['a']` ? Otherwise, it will keep adding empty lists.
[10:29:46] *** Joins: vanessa (~vanessa@103.160.128.7)
[10:30:30] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:30:35] <whatsupdoc> jazzy: how do you define deep and wide?
[10:30:55] <jazzy> deep is lots and lots of children
[10:31:00] <jazzy> wide is lots and lots of siblings
[10:31:18] <whatsupdoc> but how much do you consider being a lot?
[10:31:30] <jazzy> it's about the proportion
[10:31:51] <whatsupdoc> len(word) > the 4 directions?
[10:31:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:32:02] <jazzy> yes here, 4 siblings
[10:32:29] <jazzy> whereas depth is a possible n * m
[10:33:09] <whatsupdoc> ok i'll keep that in mind
[10:33:15] *** Quits: dreamon (~dreamon@pd9503ca8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:33:34] <whatsupdoc> but i still want to fix this dfs for practice lol
[10:33:57] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc) (Ping timeout: 240 seconds)
[10:34:13] <jazzy> I mean there's no fixing if it uses too many resources for leetcode's time limit
[10:34:36] *** Joins: Guest11 (~Guest11@216.24.177.3.16clouds.com)
[10:34:41] <whatsupdoc> I don't think I would have a problem with that
[10:34:54] <whatsupdoc> Since I am caching the result, shouldn't that help?
[10:35:17] <whatsupdoc> it's essentially a dynamic programming solution?
[10:35:49] *** Joins: dvx (~dvx@5.181.92.64)
[10:35:57] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:35:58] <whatsupdoc> I just wanna pass this test case https://bpa.st/T6NQ
[10:36:12] <whatsupdoc> I'm not sure why it fails, hard to debug
[10:36:15] *** Quits: someuser (~user@197.54.43.98) (Ping timeout: 250 seconds)
[10:36:25] <jazzy> I see
[10:38:42] <whatsupdoc> Hmm... I think ythe caching is what is throwing it off
[10:39:18] *** Joins: Guest1159 (~Guest11@216.24.177.3.16clouds.com)
[10:39:46] <jazzy> whatsupdoc, also for doing the coords have you tried doing `for x,y in zip([1, -1, 0, 0], [0, 0, 1, -1])` and then (i + x, j + y) to get each new coord?
[10:39:54] <jazzy> less annoying to type out
[10:40:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[10:42:11] *** Joins: maxzor (~maxzor@2a01cb04054faa00ecc4f4c39ad96c0f.ipv6.abo.wanadoo.fr)
[10:42:26] *** Joins: Esexe_ (~aa@024-151-038-076.res.spectrum.com)
[10:42:32] *** Quits: maxzor (~maxzor@2a01cb04054faa00ecc4f4c39ad96c0f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[10:42:37] *** Quits: vanessa (~vanessa@103.160.128.7) (Quit: WeeChat 3.4)
[10:42:51] *** Joins: maxzor (~maxzor@2a01cb04054faa00ecc4f4c39ad96c0f.ipv6.abo.wanadoo.fr)
[10:42:53] *** Joins: vanessa (~vanessa@103.160.128.7)
[10:43:01] *** Quits: vanessa (~vanessa@103.160.128.7) (Client Quit)
[10:43:13] *** Joins: vanessa (~vanessa@103.160.128.7)
[10:44:35] *** Quits: eyepeetee (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[10:45:12] <whatsupdoc> why would caching break the solution?
[10:45:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:46:02] <jazzy> whatsupdoc, well what's being cached?
[10:46:12] <whatsupdoc> the result of the function
[10:46:19] *** Parts: mtwx (~mtwx@ns324361.ip-37-59-58.eu) (Leaving)
[10:46:32] <whatsupdoc> I wonder if I manually do it, will it fail
[10:46:45] <jazzy> yeah I'm not really familiar with the decorator
[10:47:06] <whatsupdoc> it basically does memoization for you automatically
[10:47:54] <whatsupdoc> Yep, even when I try to cache it manually, it fails, i wonder what makes this solution uncachable
[10:48:10] <whatsupdoc> Oh wait, I see why
[10:49:13] <whatsupdoc> nvm lol
[10:49:16] <jazzy> nice
[10:49:52] <whatsupdoc> I added memoization, causing it to fail https://bpa.st/K42A
[10:50:30] <jazzy> hmm
[10:50:35] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:50:38] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:50:50] <jazzy> does it fail in the same way?
[10:51:02] <whatsupdoc> Yep, same testcase https://bpa.st/T6NQ
[10:51:06] <jazzy> cool
[10:51:17] *** Joins: mtwx (~mtwx@ns324361.ip-37-59-58.eu)
[10:52:24] <jazzy> oh I know why it fails
[10:52:25] *** Joins: doomer (~doomer@user/doomer)
[10:52:32] <whatsupdoc> How come?
[10:52:37] <jazzy> because the first time you cache it you were coming in from a different direction
[10:53:09] <whatsupdoc> oh
[10:53:16] <jazzy> the visited letters the first time would've been part of the latter's solution
[10:53:37] <doomer> How can i speed up python code?
[10:53:51] <whatsupdoc> so if you include the direction in memo as well, it should work lol
[10:54:08] <whatsupdoc> I finally gave in and read someone's solution
[10:54:12] <apollo13> doomer: that depends on the code and task at hand, there is no general solution
[10:54:13] <deniska> doomer: depends on what it's doing
[10:54:21] <jazzy> whatsupdoc, yeah you could just memoize the sequence of coords you visited
[10:54:33] <whatsupdoc> ew
[10:54:42] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[10:54:51] <whatsupdoc> i don't think that's worth it at that point
[10:55:06] <jazzy> I mean it's just a tuple
[10:55:09] <jazzy> added to set
[10:55:17] <jazzy> but I'd do bfs anyway
[10:55:37] <whatsupdoc> it just seems like a memory waste
[10:55:52] <whatsupdoc> unhahable type: 'set'
[10:55:53] <doomer> I'm looping *1413720* numbers of arrays , with inside  i'm using beautiful soup to scrape website site, checking if that url is available. I'm thinking of using Cython , i dont know if it will increase ?
[10:56:09] <jazzy> whatsupdoc, you can't hash mutables
[10:56:29] <jazzy> so you'd probably add them all to a list, convert to tuple, add to set
[10:56:32] <whatsupdoc> omg it worked lol
[10:56:32] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:56:56] <deniska> doomer: so if it's accessing each individual page which is slow, you can download multiple pages at once (a framework like scrapy may help, and obviously don't stress someone else's server)
[10:57:10] <doomer> apollo13  i'm using google colab, to scrape those sites. I was thinking if some multithreading or something
[10:57:13] *** Joins: bluedust_ (~bluedust@59.89.210.27)
[10:57:17] <whatsupdoc> still fails on time though, all that caching probalby slows it down even more
[10:57:34] <jazzy> yeah lol basically makes the caching useless anyway since you'd never take the same route regardless
[10:57:38] <apollo13> doomer: figure out what exactly is to slow (I bet the scraping in itself probably) and then adjust accordingly
[10:57:57] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:57:59] <han-solo> callq: empty list ?
[10:58:28] <jazzy> turns out no point in caching at all if you take the route into account haha
[10:58:37] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[10:58:50] <doomer> deniska , nice name.
[10:59:01] <jazzy> what does it mean
[10:59:44] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:559:4860:51c2:6b3e)
[11:00:04] *** Joins: manti7 (~manti7@176.10.104.94)
[11:00:17] *** Quits: bluedust (~bluedust@103.160.194.110) (Ping timeout: 240 seconds)
[11:00:29] <whatsupdoc> Solved it by using the solution found in forums
[11:00:30] <whatsupdoc> https://bpa.st/26UA
[11:00:54] <jazzy> what do they do differently?
[11:01:06] <whatsupdoc> Instead of keeping a set that tracks what you've seen, they change the character to a random symbol
[11:01:18] <jazzy> don't see why that'd save that much time though
[11:01:20] <whatsupdoc> and then change it back before they leave
[11:01:22] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:01:43] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[11:01:48] <whatsupdoc> took 9547ms
[11:01:56] <whatsupdoc> 10seconds is the cutoff lol
[11:02:02] <jazzy> you basically had the solution anyway then
[11:02:12] <jazzy> would fly on an interview probably
[11:02:38] <whatsupdoc> i'll try to implement bfs just to see how much faster it would be
[11:02:38] <jazzy> try bfs and see if it's faster
[11:02:42] <jazzy> yeah
[11:02:54] *** Joins: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de)
[11:03:03] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[11:03:07] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[11:04:14] *** Joins: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de)
[11:05:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:06:07] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:08:25] *** Joins: dme86 (~dan@user/dan86)
[11:08:51] *** Joins: parv (~quass@user/parv)
[11:11:37] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[11:11:45] <dba> Hi all this is my first ever code published on github and it is part of a school project https://github.com/hamidnahli/rs-app/blob/main/spiders/ulta.py . I highly appreciate your feedback with any kind. what can it be improved, what bad code practices to remove. Thanks
[11:12:47] *** Joins: Vonter (~Vonter@user/vonter)
[11:12:48] <dba> I will start with `parse_review()` not sure if there is a bette way of handling that situation
[11:12:52] *** Quits: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130) (Quit: Leaving)
[11:13:08] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[11:15:23] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[11:15:51] <colo_work> dba, what is obviously missing are docstrings :) those would already improve your code for others to read a fair bit
[11:15:55] <jinsun> dba: all of those if else can be one line, for example `parsed_review['comments'] = review.get('comments') or None`
[11:16:19] *** Quits: doomer (~doomer@user/doomer) (Ping timeout: 256 seconds)
[11:16:30] <dba> colo_work, what is docstrings?
[11:16:38] <dba> let me just google it
[11:16:42] <dba> never mind
[11:16:59] <dba> Thanks jinsun much appreciated
[11:17:09] <deniska> if `review` is a dict, `review.get('comments')` would already give you None if there's no key
[11:17:13] <colo_work> dba, check out https://www.python.org/dev/peps/pep-0257/ for the canonical meaning. but other search engine results will also explain it./
[11:17:19] <jinsun> dba: and since all of those lines will do the same thing, just for different keys, just loop over the keys and covert that whole 60 line thing to 2 lines
[11:17:42] <jinsun> or 3 lines, one more to make the list of keys
[11:17:50] <dba> jinsun, sounds exciting :D
[11:18:00] <dba> let try it out
[11:18:14] *** Joins: luigibu (~luigi@93.176.155.54)
[11:20:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:20:47] <dba> deniska: true, but then I cant add comment to the review dict like this `parsed_review['comments'] = review['comments']`
[11:20:47] *** Quits: bluedust_ (~bluedust@59.89.210.27) (Read error: Connection reset by peer)
[11:20:59] *** Joins: bluedust (~bluedust@103.160.194.110)
[11:22:10] <deniska> dba: parsed_review['comments'] = review.get('comments')
[11:22:55] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:23:32] <dba> deniska, yes I didnt know that `review.get('comments')` would actually get me the value if the key exist
[11:23:40] <dba> Thanks
[11:24:11] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:24:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:25:06] <deniska> .get also has the second parameter if you want a default value other than NOne
[11:25:26] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[11:25:48] *** Joins: moto (~moto@user/moto)
[11:26:31] *** Quits: edd_lc (edd_lc@gateway/vpn/protonvpn/eddlc/x-09207710) (Ping timeout: 256 seconds)
[11:26:32] <callq> han-solo yeah just do ['c'] in that example. the defaultdict now creates another entry for that.
[11:28:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:28:28] *** Quits: Guest11 (~Guest11@216.24.177.3.16clouds.com) (Quit: Client closed)
[11:29:21] *** Joins: programmar (~whatever@118.69.128.37)
[11:29:21] *** Quits: programmar (~whatever@118.69.128.37) (Client Quit)
[11:30:09] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:30:21] *** Joins: palasso (~palasso@user/palasso)
[11:30:34] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[11:30:47] *** Quits: Helithumper (~Helithump@c-76-25-170-226.hsd1.co.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:30:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:31:06] *** Quits: Guest1159 (~Guest11@216.24.177.3.16clouds.com) (Quit: Client closed)
[11:31:08] *** Joins: Helithumper (~Helithump@c-76-25-170-226.hsd1.co.comcast.net)
[11:32:19] *** Quits: wac (~wac@user/wac) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:32:25] *** Joins: chele (~chele@user/chele)
[11:32:30] <han-solo> oh, i see. Yeah, but you would be iterating with something like `[{'name': 'c', 'somekey': '...'},...]` right ?
[11:33:38] <han-solo> if you are just accessing the keys from some other iterable, then `d.get(...)`
[11:33:57] *** Joins: Guest11 (~Guest11@216.24.177.3.16clouds.com)
[11:34:05] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 250 seconds)
[11:34:21] *** Guest11 is now known as czgg
[11:34:37] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[11:34:52] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-7df6-2fc1-a099-d746.res6.spectrum.com) (Quit: jarthur)
[11:34:54] <jazzy> whatsupdoc, hmm maybe the part where you have to keep track of visited makes it as bad as bfs
[11:35:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:35:23] <jazzy> threw my crappy solution at it and got TLE
[11:35:42] <jazzy> I'm super rusty though, just getting back into it recently after 4 months break
[11:36:26] *** Joins: kosh (~kosh@user/kosh)
[11:36:57] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[11:38:11] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[11:38:17] <jiffe> is it possible to know if a class is a super class of another class given the class name as opposed to an instance of the class?
[11:38:34] *** Quits: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de) ()
[11:38:39] *** Quits: vanessa (~vanessa@103.160.128.7) (Ping timeout: 256 seconds)
[11:38:58] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[11:39:21] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[11:40:13] *** czgg is now known as czgc
[11:40:27] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[11:40:45] *** Joins: vanessa (~vanessa@103.160.128.7)
[11:40:52] *** Quits: toxictrash (~toxictras@host-91-237-158-49.anfa.net.pl) (Quit: leaving)
[11:41:27] <Repiphany> jiffe: Do you mean by looking in __mro__ or something
[11:42:24] <Repiphany> or __subclasses__()
[11:43:11] *** v- is now known as vaio
[11:43:25] <jiffe> yeah __mro__ looks like what I was looking for, thanks
[11:43:39] *** Joins: toxictrash (~toxictras@host-91-237-158-49.anfa.net.pl)
[11:43:51] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[11:45:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:48:29] *** Joins: ircuser (~ircuser@216.24.177.3.16clouds.com)
[11:50:05] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:51:32] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[11:52:00] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[11:52:28] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[11:54:55] <vanessa> how to find the current python version from python REPL?
[11:55:17] <Repiphany> vanessa: `import sys; print(sys.version)`
[11:55:30] *** Joins: dme86 (~dan@user/dan86)
[11:55:53] *** Joins: rendar (~rendar@user/rendar)
[11:56:30] <vanessa> thank you Repiphany I see GCC in there too. I guess it means that my Python my compiled with GNU GCC.
[11:56:57] <jinsun> and sys.version_info if you want to do some comparisons, since it gives a nice tuple instead of a string
[11:58:11] *** Emet-Selch is now known as haise01
[11:58:17] *** haise01 is now known as Azem
[11:58:20] <vanessa> jinsun: no I am like a few thousand lines into Blender's console and I wanted to know what version Blender was using.
[11:58:21] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:58:50] *** Quits: clarkk (~clarkk@2a00:23c7:d106:2600:6883:54f8:8cd9:bb54) (Remote host closed the connection)
[11:58:59] <deniska> it's usually a recent one
[11:59:23] *** Quits: lastshell (~lastshell@user/lastshell) (Ping timeout: 256 seconds)
[11:59:35] <deniska> They were among the first to adopt python3, being afraid to be left behind :)
[11:59:44] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:00:06] <vanessa> yeah both my system and blender uses 3.10.2 right now
[12:02:13] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[12:02:39] *** Joins: jant (~jant@pavlov.tiddo.net)
[12:03:03] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:05:22] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:404e:406d:36f8:5285)
[12:05:27] *** Joins: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de)
[12:06:38] *** Joins: p-i- (~Ohmu@mx-ll-183.89.36-208.dynamic.3bb.co.th)
[12:06:38] *** Quits: ircuser (~ircuser@216.24.177.3.16clouds.com) (Quit: Client closed)
[12:06:38] *** Quits: czgc (~Guest11@216.24.177.3.16clouds.com) (Quit: Client closed)
[12:06:45] *** Joins: czgg (~czgg@216.24.177.3.16clouds.com)
[12:06:49] *** Joins: Stas__ (~Stas@78.162.42.17)
[12:07:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[12:07:28] <merijn> Any recommendations for a memory usage profiler? I've found the memory-profiler package, but that wants me to annotate individual functions, which kinda defeats the purpose of using a profiler to find out what things are blowing up memory usage
[12:07:59] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:08:02] *** Quits: czgg (~czgg@216.24.177.3.16clouds.com) (Client Quit)
[12:08:41] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[12:10:57] *** Quits: Stas_ (~Stas@78.162.42.17) (Ping timeout: 256 seconds)
[12:11:51] *** Quits: bluedust (~bluedust@103.160.194.110) (Remote host closed the connection)
[12:12:03] *** zb[m] is now known as boris[m]
[12:14:21] *** Quits: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 256 seconds)
[12:14:39] *** Joins: jmd (~user@de.cellform.com)
[12:15:14] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:15:26] *** Joins: goepsilongo (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[12:16:39] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[12:16:47] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8) (Ping timeout: 250 seconds)
[12:19:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:21:44] *** Joins: lakrass (~lakrass@user/lakrass)
[12:22:54] *** Joins: __ld (63a6f45fee@2a00:c70:1:178:170:40:189:1)
[12:24:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[12:25:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:25:37] *** Joins: dme86 (~dan@user/dan86)
[12:26:02] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:28:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:28:56] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[12:29:43] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Quit: WeeChat 2.8)
[12:30:12] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[12:31:09] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:31:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[12:31:56] *** Quits: Armen (~Armen@armen138.com) (Quit: Ping timeout (120 seconds))
[12:32:26] *** Joins: Armen (~Armen@armen138.com)
[12:32:42] *** Joins: lastshell (~lastshell@user/lastshell)
[12:33:27] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[12:34:03] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[12:34:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[12:34:35] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:34:37] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:34:45] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:35:53] *** Quits: Lunatrius (~Lunatrius@77.38.76.5) (Ping timeout: 256 seconds)
[12:36:38] *** Parts: __ld (63a6f45fee@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[12:36:56] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:38:12] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[12:38:54] *** Quits: dave2F (~dave@78-56-248-37.static.zebra.lt) (Quit: ZNC - https://znc.in)
[12:38:57] *** Joins: vladoski (~vladoski@93-36-219-239.ip62.fastwebnet.it)
[12:39:14] *** Joins: dave2F (~dave@78-56-248-37.static.zebra.lt)
[12:39:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:39:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:40:53] *** Joins: jay-m126 (~jay-m@129.0.76.219)
[12:40:57] *** Joins: jay-m126_ (~jay-m@129.0.76.219)
[12:40:58] *** Joins: jay-m1261 (~jay-m@129.0.76.219)
[12:41:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:41:54] *** Joins: someuser (~user@197.54.43.98)
[12:41:55] *** Joins: anotheruser (~user@197.54.43.98)
[12:42:58] *** Quits: Stas__ (~Stas@78.162.42.17) (Quit: Leaving)
[12:43:36] *** Joins: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de)
[12:44:21] *** Joins: shad (~shad@user/shad)
[12:44:21] *** Quits: someuser (~user@197.54.43.98) (Read error: Connection reset by peer)
[12:44:22] *** Quits: anotheruser (~user@197.54.43.98) (Read error: Connection reset by peer)
[12:44:38] *** Joins: someuser (~user@197.54.43.98)
[12:44:38] *** Joins: anotheruser (~user@197.54.43.98)
[12:44:53] *** Joins: mickey86 (~user@user/mickey)
[12:44:56] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:44:56] *** mickey86 is now known as mickey8
[12:45:08] *** Quits: jay-m126_ (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[12:45:08] *** Quits: jay-m126 (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[12:45:12] *** Quits: jay-m1261 (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[12:46:16] *** Quits: anotheruser (~user@197.54.43.98) (Client Quit)
[12:47:47] *** Quits: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net) (Ping timeout: 256 seconds)
[12:49:28] *** Joins: jay-m126 (~jay-m@129.0.76.149)
[12:50:04] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:50:27] *** Joins: mat001 (~mat001@213.143.69.121)
[12:51:08] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[12:51:37] *** Joins: LimeOn (~user@user/limeon)
[12:52:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[12:53:15] *** Joins: xkuru (~xkuru@user/xkuru)
[12:53:33] *** Joins: Auron (Auron956@user/auron)
[12:53:41] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[12:53:56] *** Joins: shad (~shad@user/shad)
[12:54:03] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[12:54:22] *** Joins: jay-m126_ (~jay-m@129.0.76.149)
[12:54:23] *** Joins: jay-m1261 (~jay-m@129.0.76.149)
[12:54:30] *** Joins: LimeOn_ (~user@user/limeon)
[12:54:30] *** Quits: LimeOn_ (~user@user/limeon) (Client Quit)
[12:54:32] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[12:54:56] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 250 seconds)
[12:55:08] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[12:55:18] *** Quits: shad (~shad@user/shad) (Client Quit)
[12:55:34] *** Joins: shad (~shad@user/shad)
[12:55:46] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[12:56:45] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:58:44] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[12:59:36] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:00:07] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[13:00:42] *** Joins: bluedust (~bluedust@103.160.194.110)
[13:01:00] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:02:41] *** Joins: mat001 (~mat001@213.143.69.121)
[13:04:13] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[13:04:33] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:05:55] *** Joins: rsx (~dummy@ppp-188-174-139-15.dynamic.mnet-online.de)
[13:05:55] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[13:07:04] *** Joins: Molot (~Molot@2a02:2149:8ab6:2d00:79bd:9ad4:c08a:4264)
[13:07:13] *** Joins: luigibu (~luigi@93.176.155.54)
[13:08:51] *** Joins: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130)
[13:11:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:20] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[13:15:42] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Quit: Soupy Twist!)
[13:16:08] *** Joins: Vonter (~Vonter@user/vonter)
[13:16:36] *** Quits: ubert (~Thunderbi@141.98.252.252) (Ping timeout: 250 seconds)
[13:16:47] *** Quits: Molot (~Molot@2a02:2149:8ab6:2d00:79bd:9ad4:c08a:4264) (Ping timeout: 256 seconds)
[13:17:01] *** Parts: mtwx (~mtwx@ns324361.ip-37-59-58.eu) (Leaving)
[13:18:39] *** Joins: Babar_ (~Babar@115.74.184.138)
[13:18:39] *** Quits: Babar (~Babar@115.74.184.138) (Killed (tantalum.libera.chat (Nickname regained by services)))
[13:18:39] *** Babar_ is now known as Babar
[13:19:17] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[13:20:14] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[13:20:33] *** Joins: arinov_ (~arinov@176.89.27.174)
[13:21:29] <dminuoso> Does NamedTemporaryFile give me an assurance that the created file not be a symlink?
[13:23:46] *** Joins: redsith (~user@45.81.189.55)
[13:24:12] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:24:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[13:24:25] *** Joins: mickey8 (~user@user/mickey)
[13:24:31] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[13:24:32] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:24:44] <grawity> hmm I *think* all the temporary file APIs are supposed to give you assurance that it's a freshly created object (I think they use open(path, 'x') for exclusive creation)
[13:25:44] *** Quits: bigbianarch (~bigbianar@117.176.106.101) (Quit: Client closed)
[13:25:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:26:21] <dminuoso> Well thats not mutually exclusive. For all I know it could generate some fresh file on one place, generate a symlink in another and hand me that, for whatever bizarre reasons.
[13:26:30] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:27:23] <p-i-> Suppose I have strings that look like this: 'Direction: ⬆️**UP**' ... and I want something like `if 'Direction' in s: J['dir'] = 'UP' if 'UP' in s else 'DOWN'`
[13:27:50] <p-i-> Actually each string S is multiline, so I'm doing `for s in S.split('\n'): ...`
[13:28:06] <p-i-> But I know 'Direction:' is going to be in one of those lines.
[13:29:04] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:29:06] <p-i-> Is there a way to regexp/codegolf it so that I can do something like: J['dir'] = S.match('Direction').nextword()`?
[13:29:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:29:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:29:24] <grawity> if m := re.search(r'^Direction: .*(UP|DOWN)', string, re.M): J['dir'] = m.group(1)
[13:29:26] *** Joins: dme86 (~dan@user/dan86)
[13:29:42] <p-i-> I've got several criteria to pull out of this multiline string in a similar fashion
[13:29:45] <p-i-> Thanks grawity
[13:29:57] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:30:34] *** Joins: xa0s (~xa0s@mab.sdf.org)
[13:30:45] <callq> halp https://bpa.st/B2XA
[13:31:08] *** Joins: xereeto (~xereeto@77.101.39.21)
[13:31:15] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:31:18] <callq> i make an empty list `` [] `` then I use += (tuple1, tuple2); but it's all just one contiguous list
[13:31:20] <grawity> callq: += [(symbol, len...)]
[13:31:45] <grawity> += is like .extend() in that it concatenates a whole another list (or iterable)
[13:32:02] <grawity> so you want either .append() the tuple, or += a 1-item list with the tuple inside
[13:32:05] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:32:12] <p-i-> callq: Couldn't you do the whole thing in a list comp?
[13:32:14] <grawity> .append((symbol, len...)) would also work
[13:32:44] <p-i-> `aoc = [(s, len(ao[s]) for s in ao]`
[13:33:08] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:33:27] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[13:34:33] <p-i-> Are you trying to get the number of orders pertaining to each symbol?
[13:34:49] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:35:28] <p-i-> Looks like a job for collections.Counter
[13:36:29] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[13:37:16] *** Joins: ubert (~Thunderbi@p200300ecdf0994a856831da0cd63cc4d.dip0.t-ipconnect.de)
[13:37:39] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:37:54] <xereeto> hey quick question... in my code I'm getting behaviour that suggests multiple successive print statements don't output anything until i prints a newline, then it prints everything at once
[13:38:02] *** Joins: aphyy (~aphyy@cpe1033bf7b3aca-cm1033bf7b3ac8.cpe.net.cable.rogers.com)
[13:38:19] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[13:38:19] <xereeto> i assume there's some kind of buffer? but how do i make it clear the buffer immediately
[13:38:36] <TML> xereeto: python -u
[13:38:59] <deniska> xereeto: or pass flush=True to print()
[13:39:03] *** Quits: aphyy (~aphyy@cpe1033bf7b3aca-cm1033bf7b3ac8.cpe.net.cable.rogers.com) (Quit: Client closed)
[13:39:10] <xereeto> ah, thank you!
[13:39:37] <TML> deniska: I always forget about that one :)
[13:40:06] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:40:44] <p-i-> There's also sys.flush() I think
[13:41:25] *** Quits: callq (~callq@2409:4062:2e9e:2081:9830:efc1:e4d2:4309) (Quit: callq)
[13:42:45] *** jazzy is now known as jaziz
[13:43:29] *** jaziz is now known as jazzy
[13:43:44] <jinsun> sys.stdout.flush()
[13:43:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:44:03] *** Joins: Vonter (~Vonter@user/vonter)
[13:44:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:44:36] *** Joins: slav0nic (slav0nic@python.su)
[13:45:12] <grawity> recent pythons also have sys.stdout.reconfigure(line_buffering=True)
[13:45:19] <grawity> to make it the default if that's what your script needs
[13:46:17] <p-i-> niiice
[13:47:03] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:47:03] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[13:47:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:49:54] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:50:38] *** Quits: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130) (Quit: Leaving)
[13:51:04] <p-i-> grawity: How could I adapt that to pick up 'FOO' and 'BAR' from 'Pair: $FOO/BAR' where it might be written without the $ and there might be a space either side of the '/'?
[13:51:28] <p-i-> Basically I'd be looking for the next 2 A-Z0-9 blocks
[13:51:40] <merijn> hmm, so I guess I will just have to create a separate thread that just periodically prints a heap snapshot and keep that running during the whole process?
[13:52:16] <grawity> hmm try r"Pair: \$?(\w+)\W+(\w+)" – the \w includes _ but that shouldn't be a problem here
[13:52:51] <grawity> alternatively r"Pair: \$?([A-Z0-9]+) */ *([A-Z0-9]+)"
[13:52:56] <p-i-> Yes, perfect!
[13:53:01] <grawity> see also https://regex101.com
[13:53:27] <grawity> r"^Pair
[13:53:52] <p-i-> Thanks! Someone gave me that link last time I was regexing and I forgot to bookmark it
[13:55:05] <grawity> so in your case https://regex101.com/r/VXrFlN/1
[13:55:49] *** Joins: vladoski_ (~foo@93-36-219-239.ip62.fastwebnet.it)
[13:56:03] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:56:08] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[13:56:23] *** Joins: callq (~callq@49.37.43.70)
[13:56:27] *** gentooclimax is now known as climax
[13:56:31] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:57:37] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[13:57:59] <p-i-> `foo, bar = re.search(r'Pair: \$?(\w+)\W+(\w+)', m, re.M).group(1,2)` ... this works
[13:58:10] *** Quits: jochum (~quassel@user/jochum) (Quit: No Ping reply in 180 seconds.)
[13:58:27] *** Quits: callq (~callq@49.37.43.70) (Read error: Connection reset by peer)
[13:58:56] *** Quits: dfch (~dfch@user/dfch) (Remote host closed the connection)
[13:59:00] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Quit: leaving)
[13:59:10] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[13:59:12] *** Joins: dfch (~dfch@user/dfch)
[13:59:55] *** Joins: jochum (~quassel@user/jochum)
[13:59:59] *** Quits: vladoski_ (~foo@93-36-219-239.ip62.fastwebnet.it) (Client Quit)
[14:00:09] *** Joins: Lunatrius (~Lunatrius@77.38.76.5)
[14:00:26] *** climax is now known as gentooclimax
[14:00:35] *** Joins: vladoski_ (~foo@93-36-219-239.ip62.fastwebnet.it)
[14:00:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:00:53] *** Joins: Lynxthecat (~Lynxtheca@109.70.147.187)
[14:01:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:01:20] <Lynxthecat> Is there a package in python that supports sending ICMP type 13 requests to ascertain one way delays?
[14:01:20] *** Joins: georgios (~georgios@user/georgios)
[14:01:52] <Lynxthecat> Or would this require manual implementation
[14:02:34] *** Quits: vladoski_ (~foo@93-36-219-239.ip62.fastwebnet.it) (Client Quit)
[14:03:37] <grawity> Lynxthecat: scapy
[14:03:53] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[14:04:01] <grawity> though scapy is kinda huge
[14:04:17] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 256 seconds)
[14:04:22] *** Joins: kuter (~kuter@public-gprs525957.centertel.pl)
[14:04:44] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:05:01] <Lynxthecat> this is for the purpose of running on a router
[14:05:32] <Lynxthecat> to adapt CAKE bandwidth based on estimated bandwidth - I need to determine uplink and downlink delays by using ICMP type 13 requests and working with timestamps
[14:05:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[14:05:55] <Lynxthecat> hping3 can do this but I'd love for there to be something in python that I can use rather than external binary
[14:06:10] <Lynxthecat> But I would not love having to code all this from scratch
[14:07:17] *** Joins: callq (~callq@2409:4062:2e9e:2081:598e:77bd:9a69:ff34)
[14:07:53] <callq> Every time I get back into Python, I end up re-learning all these handy language tools over again. And there's so many ways to do the same thing, too.
[14:07:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[14:08:21] *** Quits: redsith (~user@45.81.189.55) (Remote host closed the connection)
[14:08:38] *** Quits: xereeto (~xereeto@77.101.39.21) (Quit: Client closed)
[14:08:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:10:33] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[14:11:27] <p-i-> Suppose I have a bunch of lines in my string: 'Target 1 - 123', 'Target 2 - 456', etc. They will be consecutive, and 'TARGET' won't appear anywhere else. But I don't know how many items to expect.
[14:11:43] <p-i-> Can I pull out the list of numbers with re?
[14:11:57] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 240 seconds)
[14:12:20] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[14:12:22] <p-i-> (just interested in the last number for each line)
[14:12:53] <grawity> re.findall(r'^Target \d+ - (\d+)$', thestring, re.M)
[14:13:19] <p-i-> So I'd be looking for lines containing the word 'TARGET', and just interested in the last number before the \n
[14:13:38] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8)
[14:15:44] *** Quits: georgios (~georgios@user/georgios) (Remote host closed the connection)
[14:16:15] *** Quits: hams (~hams@user/hams) (Read error: Connection reset by peer)
[14:16:41] *** Joins: georgios (~georgios@user/georgios)
[14:16:52] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[14:17:11] *** Joins: dante-as (~dante-as@5-12-102-114.residential.rdsnet.ro)
[14:17:18] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[14:17:42] *** Joins: ckdCreations (~ckdCreati@147.55.133.129)
[14:18:13] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[14:18:40] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[14:19:21] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:19:29] *** Joins: rando25892 (~homefame@user/rando25892)
[14:19:40] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:19:53] *** Quits: jmd (~user@de.cellform.com) (Read error: No route to host)
[14:21:06] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:21:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:22:10] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:22:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:23:10] *** Joins: vitali64 (~vitali64@user/vitali64)
[14:24:17] *** Quits: Lynxthecat (~Lynxtheca@109.70.147.187) (Quit: Client closed)
[14:24:45] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:25:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:25:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:26:03] *** Lord_of_Life_ is now known as Lord_of_Life
[14:26:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:27:19] *** Joins: bluedust_ (~bluedust@59.89.210.27)
[14:29:32] *** Joins: Molot (~Molot@213.16.211.245.dsl.dyn.forthnet.gr)
[14:29:33] *** Quits: vitali64 (~vitali64@user/vitali64) (Ping timeout: 256 seconds)
[14:29:48] *** Joins: naranja (~orange@user/orangeboxcutter)
[14:29:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:30:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:30:37] *** Quits: bluedust (~bluedust@103.160.194.110) (Ping timeout: 240 seconds)
[14:30:51] *** Quits: Molot (~Molot@213.16.211.245.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[14:31:14] *** Joins: Molot (~Molot@2a02:2149:8ab6:2d00:79bd:9ad4:c08a:4264)
[14:31:15] *** Quits: dante-as (~dante-as@5-12-102-114.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[14:31:42] *** Joins: pepper (~pepper@user/pepper)
[14:33:07] *** Joins: tortal (~tortal@217-215-62-17-no247.tbcn.telia.com)
[14:33:35] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[14:33:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:33:51] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:33:52] *** Joins: spithash (~spithash@user/spithash)
[14:33:57] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[14:34:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:34:57] *** Quits: maxzor (~maxzor@2a01cb04054faa00ecc4f4c39ad96c0f.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[14:35:13] *** Joins: maxzor (~maxzor@2a01cb04054faa00ecc4f4c39ad96c0f.ipv6.abo.wanadoo.fr)
[14:35:26] *** Quits: colo_work (~colo_work@046125249113.public.t-mobile.at) (Quit: Leaving)
[14:35:37] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 240 seconds)
[14:36:07] *** Quits: jay-m126_ (~jay-m@129.0.76.149) (Ping timeout: 256 seconds)
[14:38:10] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:38:29] *** Quits: LimeOn (~user@user/limeon) (Ping timeout: 250 seconds)
[14:40:34] <p-i-> This is tricky. My data sometimes has a unicode fluff before the 'Target', sometimes it uses 'TARGET', and it doesn't always have ' - ' before the number I'm trying to collect.
[14:41:08] *** Joins: humbertowoody (~humbertow@187.202.198.64)
[14:41:17] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:41:28] <p-i-> Is there a way I can get re to somehow engage when it gets a 'Target' or 'TARGET' and scrape the last number on the line before the \n?
[14:41:36] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:41:46] *** Joins: LimeOn (~user@user/limeon)
[14:42:11] <deniska> there's re.IGNORECASE flag
[14:42:18] <parv> p-i-, Seems to me you could be better served by a custom data parser than ad-hoc regexen
[14:42:42] <p-i-> I'm torn between trying to regex it and just hand-writing Python code.
[14:43:08] <p-i-> I think regex is the W if I can push through it.
[14:45:27] <deniska> .split() goes ['brr']
[14:45:39] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 256 seconds)
[14:46:28] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[14:46:54] *** Joins: redsith (~user@45.81.189.55)
[14:47:51] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[14:49:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[14:50:07] <grawity> tbh you'll probably end up reinventing regex
[14:50:49] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[14:54:15] *** Quits: jay-m1261 (~jay-m@129.0.76.149) (Ping timeout: 256 seconds)
[14:55:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:55:41] <Fairy> I'm a bit confused; I'm trying to spawn N threads to chug through X tasks, each thread needs to allocate some resources, then can run though any number of tasks, I can do this simply with multiprocessing.Pool, but how do I then do cleanup? Once ALL tasks are done, I'd like to cleanup the allocated resources on each thread; am I using the wrong tool?
[14:56:28] <Fairy> (I'm using multiprocessing.Pool, with map_async in this scenario)
[14:57:47] *** Joins: DavidMilestone (~DavidMile@182.64.8.212)
[14:57:49] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[14:58:27] <DavidMilestone> Hello, can someone explain how this program is supposed to work? https://bpa.st/6PUA
[14:58:37] <p-i-> So `^foo` only matches lines starting 'foo'. Can I strip out a leading unicode character that might or might not be there?
[14:58:40] <supakeen> what type of resources are we talking about Fairy, normally things get cleaned as soon as they go out of scope
[14:58:48] <p-i-> If I could wildcard up to 'foo' that would do it
[14:59:14] <p-i-> Fairy: What kind of task is it? Are you sure you want threads and not async?
[14:59:28] <supakeen> DavidMilestone: supposed to? Is there something wrong about it?
[14:59:37] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[15:00:19] <DavidMilestone> No, I don't understand the role of  the slice assignment in line 3. supakeen
[15:01:21] <Fairy> how do I tell if things are _actually_ cleaned up? when I try to see if the __del__ function is called, it never is; in this case each thread is a DB connection
[15:01:36] <Fairy> (I'm using global inside the init function)
[15:01:37] *** Quits: jay-m126 (~jay-m@129.0.76.149) (Ping timeout: 256 seconds)
[15:02:00] <supakeen> DavidMilestone: You have to labels pointing to `[1, 2, 3]` list: a and b, if you were to do `a = "somethingnew"` a would point to that and `b` would still point to your other list. Using the slice assignment changes the `[1, 2, 3]` list in place.
[15:02:45] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:03:04] *** Joins: jay-m126 (~jay-m@129.0.76.149)
[15:03:28] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[15:04:27] <supakeen> Fairy: that is usually reasonably hard, but since you are using a multiprocessing.Pool you have separate processes that will be closed when the Pool is closed which would close the database connections.
[15:04:41] *** Quits: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[15:04:41] <DavidMilestone> Wouldn't changing `a` also change the elements inside `b` as they're apparently pointing to the same thing? supakeen
[15:04:50] *** Joins: jay-m126_ (~jay-m@129.0.76.149)
[15:05:02] <supakeen> DavidMilestone: Changing the contents of a and changing what a points to are two different actions :)
[15:05:26] <supakeen> If you do `a[:] = [4, 5, 6]` then you're changing the contents of what both a and b point to, if you do `a = [4, 5, 6]` you're making the label a point to another thing.
[15:05:40] <supakeen> (while b still points to the old thing)
[15:05:45] <DavidMilestone> Okay
[15:05:48] <supakeen> Python labels/names always point to values, not to eachother.
[15:05:57] *** Joins: georgios (~georgios@user/georgios)
[15:06:00] <callq> def get_all_orders() -> collections.defaultdict[string, list]: # why this bad syntax? what do?
[15:06:38] <supakeen> e.g. `b = a` is actually `b points to the value a points to` not `b points to whatever a is pointing to`
[15:06:39] <p-i-> DavidMilestone: Interesting, I didn't know you can do that. L = list([1,2,3,4,5]) ; L[2:4] = '0' # [1, 2, '0', 5]
[15:06:46] *** Joins: Z-cat (~Z-cat@user/z-cat)
[15:06:47] <supakeen> s/points/refers if you prefer that word :)
[15:07:17] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[15:07:19] *** Joins: jay-m1261 (~jay-m@129.0.76.149)
[15:07:19] *** Joins: patchie (sid504252@id-504252.ilkley.irccloud.com)
[15:07:36] <supakeen> p-i-: Yes, it's called 'slice assignment' :)
[15:07:37] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:07:41] <patchie> Why doesnt SqlAlchemy upload to SQL? Dont get any error messages either. https://pastebin.com/HhzWnWfC
[15:08:21] <grawity> callq: does it actually say "syntax error" or does it say "name 'string' undefined"?
[15:08:30] <callq> undefined
[15:08:37] *** Quits: Molot (~Molot@2a02:2149:8ab6:2d00:79bd:9ad4:c08a:4264) (Ping timeout: 240 seconds)
[15:08:38] <grawity> exactly
[15:08:44] <callq> I just wanted to be clear on what's being returned
[15:09:14] <grawity> the syntax is fine, but the string type is named 'str' in python
[15:09:15] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 250 seconds)
[15:09:27] <callq> :)       :')
[15:10:03] <kuhilas> how do I set width of a glyph int fontforge. This python doc has glyph.width() but I can't do like glyph.width(1000) or ('1000') it says typeError int object is not callable. And yeah in the docs there is nothing indicated to be passed as arguments into that function https://fontforge.org/docs/scripting/python/fontforge.html#fontforge.glyph.width
[15:10:19] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[15:11:02] <grawity> kuhilas: it's not a function in the first place though
[15:11:21] <grawity> in python it'd always have the () if it were a function
[15:11:26] <kuhilas> in fontforges GUI if I right click a glyph I can choose "set width" and there is a text box where I can input the value
[15:11:32] <grawity> without them it's just a field that you directly assign to
[15:11:37] *** Quits: driib2 (~driib@185.65.135.253) (Ping timeout: 240 seconds)
[15:11:39] <grawity> as in, .width = 1000
[15:12:02] <DavidMilestone> Yeah, thank you for the explanation. I understand it now, supakeen; we're redefining the variable, and not changing it at the given memory address.
[15:12:55] <supakeen> DavidMilestone: This is a super good article to read on it: https://nedbatchelder.com/text/names.html
[15:13:08] <DavidMilestone> thank you!
[15:13:57] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:c185:156:17c8:9868)
[15:14:12] <patchie> any SQLAlchemy experts here?
[15:14:43] *** Joins: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130)
[15:14:45] <nedbat> patchie: it works better here to ask your question directly. People might not volunteer as experts, and sometimes non-experts can help.
[15:14:46] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[15:14:58] <kuhilas> ah thanks! I don't get errors now, but it doesn't set the width of the glyph I select. I guess I have to select the glyph with other ways. I tried now with font.selection.select("a")
[15:15:01] *** Quits: redsith (~user@45.81.189.55) (Remote host closed the connection)
[15:15:02] <patchie> nedbat: I already did :P got no response
[15:15:09] *** Joins: Babar_ (~Babar@115.74.184.138)
[15:15:09] *** Babar is now known as Guest1890
[15:15:09] *** Babar_ is now known as Babar
[15:15:24] *** Joins: fanis30 (~anon@adsl-188.176.58.139.tellas.gr)
[15:15:27] *** Quits: Guest1890 (~Babar@115.74.184.138) (Ping timeout: 256 seconds)
[15:15:48] <patchie> Why doesnt SqlAlchemy upload to SQL? Dont get any error messages either. Code: https://pastebin.com/HhzWnWfC     Debug output: https://pastebin.com/xxkz7Vhk
[15:16:04] <DavidMilestone> "A for loop is effective for looping through a list, but you shouldn’t modify
[15:16:05] <DavidMilestone> a list inside a for loop because Python will have trouble keeping track of the
[15:16:05] <DavidMilestone> items in the list."
[15:16:06] <DavidMilestone> What does this mean? I believe I've modified list values inside the for loop quite a few times till now, and I didn't observe any unexpected behavior.
[15:16:12] *** Joins: naranja (~orange@user/orangeboxcutter)
[15:16:48] <p-i-> DavidMilestone: just be careful of sitting on the branch you are sawing on
[15:17:40] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:18:30] *** Joins: Molot (~Molot@2a02:2149:8ab6:2d00:79bd:9ad4:c08a:4264)
[15:18:34] <DavidMilestone> LOL
[15:18:47] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[15:19:28] <bjs> DavidMilestone: imagine `for item in some_list: some_list.remove(item)`
[15:19:34] <bjs> this line might not do what you expect it to
[15:19:44] <supakeen> patchie: the code you've shown is not runnable and is using pandas if I look into my crystal orb *maybe* you need to commit? Dunno.
[15:20:38] <nedbat> DavidMilestone: the line could be better written as "you shouldn't change the length of a list inside a for loop over the list"
[15:20:51] <bjs> DavidMilestone: if you're looping over something and then suddenly things get added or removed then your place in the looping can become confused.
[15:22:20] <DavidMilestone> Ah, I got it now. Thank you, guys.
[15:22:42] <bluss> if you do the corresponding this for a dict while iterating it, you'll get an exception
[15:23:00] *** Quits: jay-m126_ (~jay-m@129.0.76.149) (Read error: Connection reset by peer)
[15:23:32] *** Quits: jay-m126 (~jay-m@129.0.76.149) (Read error: Connection reset by peer)
[15:23:55] *** Quits: jay-m1261 (~jay-m@129.0.76.149) (Read error: Connection reset by peer)
[15:24:24] <bluss> "RuntimeError: dictionary changed size during iteration"        I'm not sure why lists don't have the same check. Maybe because it's not needed for "memory safety" i.e it won't crash, it will just have weird results (?)
[15:24:45] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:25:01] *** Joins: jay-m126 (~jay-m@129.0.76.213)
[15:26:25] *** Joins: jay-m126_ (~jay-m@129.0.76.213)
[15:26:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:27:07] *** Joins: Klinda (~superleag@user/klinda)
[15:27:09] <kosh> there are ways to remove items from a list while iterating over it but you do have to be more careful
[15:27:32] <kosh> basically you have to remove from the end
[15:28:24] <patchie> supakeen: Well, it only lacks the import of sqlalchemy and pandas i guess?
[15:29:10] *** Joins: jay-m1261 (~jay-m@129.0.76.213)
[15:29:53] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:30:25] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:30:45] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[15:30:48] *** Joins: sudorm (~sudorm@atoulouse-556-1-147-235.w92-162.abo.wanadoo.fr)
[15:31:53] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[15:32:59] *** Quits: tortal (~tortal@217-215-62-17-no247.tbcn.telia.com) (Read error: Connection reset by peer)
[15:33:35] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[15:35:33] *** Joins: raxor2k (~raxor2k@3.109-247-153.customer.lyse.net)
[15:35:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:02] <Yhg1s> bluss: more importantly, it will give _predictable_ results. Modifying a dict during iteration will not.
[15:38:43] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:38:44] *** Joins: Xeroine (~Xeroine@user/xeroine)
[15:39:49] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:40:08] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:40:57] *** Quits: jay-m1261 (~jay-m@129.0.76.213) (Ping timeout: 256 seconds)
[15:41:09] <nedbat> demonstrating the list problem: https://gist.github.com/12e081f3054d5dea27a97f1c67c9f941
[15:41:11] *** Quits: jay-m126_ (~jay-m@129.0.76.213) (Ping timeout: 256 seconds)
[15:41:45] *** Quits: jay-m126 (~jay-m@129.0.76.213) (Ping timeout: 256 seconds)
[15:42:14] <raxor2k> what are the different between using a dict.values()   and    dict.copy().values(), why not just include copy all the time?
[15:42:48] *** Joins: jay-m126 (~jay-m@129.0.76.218)
[15:42:56] <nedbat> raxor2k: often you don't need to make a copy
[15:42:57] *** Joins: unyu (~pyon@user/pyon)
[15:44:15] <patchie> supakeen: In the devbug pastebin, you can see the commit beeing sent
[15:45:14] *** Joins: capn (~capn@user/capn)
[15:45:21] *** Joins: duds- (~duds-@user/duds)
[15:45:27] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:45:34] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:45:51] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:559:4860:51c2:6b3e) (Ping timeout: 250 seconds)
[15:46:48] *** Joins: jay-m126_ (~jay-m@129.0.76.218)
[15:46:52] *** Joins: jay-m1261 (~jay-m@129.0.76.218)
[15:46:57] *** Quits: arinov_ (~arinov@176.89.27.174) (Ping timeout: 256 seconds)
[15:47:31] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Quit: WeeChat 3.3)
[15:48:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:48:41] *** Joins: Retr0id6 (~Retr0id@user/retr0id)
[15:48:42] *** Quits: Retr0id (~Retr0id@user/retr0id) (Read error: Connection reset by peer)
[15:48:42] *** Retr0id6 is now known as Retr0id
[15:49:27] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[15:49:57] *** Quits: jay-m126 (~jay-m@129.0.76.218) (Ping timeout: 240 seconds)
[15:50:26] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[15:50:35] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:50:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:50:53] *** Joins: spinningCat (~spinningC@about/web/muscles)
[15:50:55] *** Joins: jay-m126 (~jay-m@129.0.76.218)
[15:51:04] <spinningCat> can i use python selenium for powerbi?
[15:52:47] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:53:17] *** Joins: kts (~kts@103.73.237.65)
[15:53:49] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[15:54:33] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[15:55:31] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[15:55:41] *** Quits: luva (~luva@37.120.197.44) (Ping timeout: 256 seconds)
[15:56:05] <nedbat> spinningCat: use it how? You can use selenium to drive any web application
[15:57:16] *** Joins: naranja (~orange@user/orangeboxcutter)
[15:57:30] *** Joins: duds- (~duds-@user/duds)
[15:57:32] <p-i-> re.search(r'[A-Z\/]+', 'FOO/BAR', re.M).group(1)   # why is this failing with 'No such group'? The regex checks out: https://regex101.com/r/CzLGcH/1
[15:57:35] *** Joins: tWqaq_ (~tWqaq@101.93.138.74)
[15:59:23] <bjs> p-i-: i don't see any groups in that regex, what did you want group(1) to be?
[15:59:23] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:59:57] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:4068:9ee7:4484:133c) (Ping timeout: 240 seconds)
[15:59:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:00:42] *** Joins: luva (~luva@37.120.197.54)
[16:01:10] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[16:01:17] *** Joins: eyepeetee (~aa@024-151-038-076.res.spectrum.com)
[16:01:18] *** Joins: shlomif (~shlomif@inkscape/dev/shlomif)
[16:01:19] <p-i-> ah I see. I needed re.search(r'[A-Z\/]+', 'FOO/BAR', re.M)[0]
[16:01:47] <bjs> p-i-: group 0 contains the whole match
[16:01:56] <bjs> group 1 is the first group from the regex
[16:03:31] *** Quits: kts (~kts@103.73.237.65) (Quit: Konversation terminated!)
[16:03:51] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[16:04:19] *** Joins: pagios (~pagios@life.is-a.beauty)
[16:04:30] *** Quits: shlomif (~shlomif@inkscape/dev/shlomif) (Client Quit)
[16:04:31] *** Quits: Esexe_ (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[16:04:43] <pagios> hi, how can i refer to a windows home directory in windows
[16:04:53] <ChrisWarrick> pagios: pathlib.Path.home()
[16:05:21] *** Quits: st3fan (sid43079@id-43079.lymington.irccloud.com) (Ping timeout: 245 seconds)
[16:05:28] <pagios> shutil.copyfile("C:\windows\test.exe",pathlib.Path.home()) ?
[16:06:08] *** Joins: zamanf (~dev@213.133.91.246)
[16:06:10] <ChrisWarrick> you should be using pathlib for all your paths
[16:06:20] <ChrisWarrick> and your path is invalid due to \t
[16:06:30] <pagios> can i refer to C:\windows in path lib? what is the qquiv
[16:06:47] *** Quits: dez (uid92154@user/dez) (Ping timeout: 256 seconds)
[16:06:49] <p-i-> re.search(r'^Pair:(\$?[A-Z\/]+)', 'Pair:$FOO/BAR', re.M)[1] ... how can I make this return FOO/BAR instead of $FOO/BAR?
[16:07:19] *** Joins: st3fan (sid43079@id-43079.lymington.irccloud.com)
[16:07:20] <ChrisWarrick> p-i-: move the $ outside of your match group
[16:07:33] <parv> Capture the only thing that you want?
[16:07:38] <xheimlich> move the \$ outside the parentheses.
[16:07:40] <ChrisWarrick> p-i-: r'^Pair:\$?([A-Z\/]+)'
[16:07:42] *** Joins: Vonter (~Vonter@user/vonter)
[16:07:53] <p-i-> gottit
[16:07:53] <pagios> ChrisWarrick: where is my \t ?
[16:07:58] *** Joins: dez (uid92154@user/dez)
[16:08:09] *** Quits: cliluw (~cliluw@47.147.73.223) (Remote host closed the connection)
[16:08:22] *** Joins: cliluw (~cliluw@47.147.73.223)
[16:08:22] <ChrisWarrick> pagios: "windows\test.exe" will be interpreted as "windows<TAB>est.exe"
[16:08:36] <parv> In '\tourist'
[16:08:58] <parv> Use pathlib or r''
[16:09:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:09:17] *** Quits: bluedust_ (~bluedust@59.89.210.27) (Remote host closed the connection)
[16:09:55] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[16:10:08] <xheimlich> or escape all of your backslashes, or use WSL.
[16:10:53] <pagios>  shutil.copyfile("C:\windows\\test.exe",pathlib.Path.home())
[16:12:14] <xheimlich> ehh. use r"c:\string" barring anything else.
[16:12:15] <ChrisWarrick> pagios: you still have a backslash where it shouldn’t be
[16:12:22] <ChrisWarrick> just use pathlib
[16:12:28] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[16:12:39] <ChrisWarrick> pathlib.Path("C:") / "Windows" / "test.exe"
[16:12:58] <ChrisWarrick> (Also, if you must use plain strings, "C:/Windows/test.exe" is valid on Windows)
[16:13:47] *** Joins: Phineas (~Phineas@user/Phineas)
[16:14:07] <deniska> (until it gets into some weird corner where it's not)
[16:14:26] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 260 seconds)
[16:14:58] <xheimlich> os.path.join master race
[16:15:45] *** Quits: luva (~luva@37.120.197.54) (Ping timeout: 256 seconds)
[16:16:19] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:16:19] <spinningCat> nedbat,  is powerbi web application?
[16:16:20] *** Joins: luva (~luva@146.70.62.238)
[16:16:31] <nedbat> spinningCat: i have no idea what powerbi is. i thought you knew
[16:16:39] *** Joins: esther (~esther@2607:fb90:5fee:6e40:33b1:e979:adc5:f3a7)
[16:16:48] <xheimlich> word, excel, ppt etc. are all web applications now.
[16:17:09] <xheimlich> it's very hard to imagine there wouldn't be a powerbi for the web.
[16:17:17] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:17:23] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:17:28] <ChrisWarrick> spinningCat: what are you doing with powerbi and how would selenium be a part of it?
[16:18:02] *** Joins: newdimension (~newdimnes@user/newdimension)
[16:20:37] *** Quits: esther (~esther@2607:fb90:5fee:6e40:33b1:e979:adc5:f3a7) (Ping timeout: 240 seconds)
[16:20:43] <spinningCat> like i dont know get some reports or select something
[16:20:59] <spinningCat> there is an automation tool called ui path i think it sucks
[16:21:00] *** Joins: bluedust (~bluedust@59.89.210.27)
[16:21:17] <spinningCat> you can do something with uipath for powerbi
[16:21:19] <xheimlich> is odbc still a thing?
[16:21:30] <spinningCat> what is odbc?
[16:21:30] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[16:21:33] <xheimlich> maybe you can exfiltrate your dada with odbc
[16:21:47] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[16:21:48] <ChrisWarrick> spinningCat: so you want to use selenium as a data source for your power bi reports?
[16:21:51] *** Joins: Atque (~Atque@user/atque)
[16:22:02] <xheimlich> it used to be a database interoperability thing for windows.
[16:22:05] *** Quits: sawk (~quassel@151.81.119.74) (Ping timeout: 256 seconds)
[16:22:07] <spinningCat> well if it is possible
[16:22:19] <spinningCat> i dont know a thing about powerbi
[16:22:23] *** Quits: sudorm (~sudorm@atoulouse-556-1-147-235.w92-162.abo.wanadoo.fr) (Quit: Leaving)
[16:22:37] <xheimlich> my machine's firing on all eight cylinders so I don't think I cn open a web browser, but wikipedia the thing.
[16:22:39] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:404e:406d:36f8:5285) (Ping timeout: 256 seconds)
[16:22:57] <ChrisWarrick> spinningCat: I suppose your employer or whatever forces you to use powerbi?
[16:23:31] *** Joins: naranja (~orange@user/orangeboxcutter)
[16:23:38] *** Joins: __ld (63a6f45fee@2a00:c70:1:178:170:40:189:1)
[16:24:17] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[16:24:46] <spinningCat> ChrisWarrick,  yei
[16:25:32] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (Ping timeout: 250 seconds)
[16:25:58] <ChrisWarrick> spinningCat: I have zero experience with powerbi, but looking at https://docs.microsoft.com/en-us/power-bi/connect-data/desktop-data-sources suggests they have some kind of web loading support. If it doesn’t work for you, then you could perhaps build a Python app that runs Selenium and scrapes saving output to eg. a PostgreSQL database from which PowerBI would also read
[16:26:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:27:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:27:33] *** Joins: seoul_man (~meh@097-087-062-229.res.spectrum.com)
[16:27:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:30:17] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[16:30:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:31:43] *** Quits: jay-m126 (~jay-m@129.0.76.218) (Ping timeout: 256 seconds)
[16:31:57] *** Quits: jay-m1261 (~jay-m@129.0.76.218) (Ping timeout: 256 seconds)
[16:32:17] *** Quits: jay-m126_ (~jay-m@129.0.76.218) (Ping timeout: 256 seconds)
[16:32:43] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:9c80:d8ad:628a:2d90) (Quit: pvergain)
[16:33:42] *** Joins: jay-m126 (~jay-m@129.0.76.219)
[16:33:51] *** Joins: jay-m126_ (~jay-m@129.0.76.219)
[16:34:00] *** Joins: jay-m1261 (~jay-m@129.0.76.219)
[16:36:27] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:559:4860:51c2:6b3e)
[16:37:39] <spinningCat> thanks ChrisWarrick
[16:38:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[16:38:18] *** Joins: cdown (~cdown@188.214.11.14)
[16:38:24] *** Quits: rsx (~dummy@ppp-188-174-139-15.dynamic.mnet-online.de) (Quit: rsx)
[16:39:01] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[16:39:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:40:04] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:40:17] *** Joins: pingpongball (~pingpongb@43.228.192.119)
[16:40:42] *** Joins: JordiGH (~jordi@gcc2-power8.osuosl.org)
[16:40:42] *** Quits: JordiGH (~jordi@gcc2-power8.osuosl.org) (Changing host)
[16:40:42] *** Joins: JordiGH (~jordi@user/jordigh)
[16:40:44] *** Joins: pmcnabb6 (~pmcnabb@user/pmcnabb)
[16:41:17] *** Quits: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[16:41:31] *** Joins: eXtre3m0 (~eXtr3m0@user/eXtr3m0)
[16:41:37] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 240 seconds)
[16:41:37] *** pmcnabb6 is now known as pmcnabb
[16:41:47] *** Joins: shad (~shad@user/shad)
[16:42:39] *** Joins: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net)
[16:43:22] *** Joins: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net)
[16:43:59] *** Quits: jay-m126 (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[16:43:59] *** Quits: jay-m126_ (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[16:44:01] *** Quits: jay-m1261 (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[16:44:18] *** Quits: pingpongball (~pingpongb@43.228.192.119) (Client Quit)
[16:44:39] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:45:04] *** Joins: pro_z_ (~pro_z@37.214.83.4)
[16:45:17] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[16:46:57] *** Joins: jay-m126 (~jay-m@129.0.76.230)
[16:47:02] *** Joins: jay-m126_ (~jay-m@129.0.76.230)
[16:47:18] *** Joins: jay-m1261 (~jay-m@129.0.76.230)
[16:48:26] *** Joins: cren (cren@tilde.team)
[16:48:57] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[16:49:35] <cren> hi! I'm looking for a simple way to manage dependencies for a Python app which falls short of full-on project management. I basically want a simple way to pin dependencies like `pip-tools` provides, but `pip-tools` broke when `pip` updated a couple of days ago
[16:49:47] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[16:49:48] <cren> I would welcome suggestions!
[16:50:14] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[16:50:24] <ChrisWarrick> I would suggest waiting for pip-tools to get fixed
[16:50:36] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[16:50:46] <ChrisWarrick> in fact, they made a new release 2 hours ago: https://pypi.org/project/pip-tools/
[16:50:46] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:51:36] <callq> is string formatting ```print("{: >20} {: >20} {: >20}".format(*row))``` this this, still the best way to print information in columns?
[16:51:48] <taeaad> Hmm, I'm trying to have a cmd parameter as a Boolean, but doing --my_parameter False actually parses to True.
[16:52:38] <grym> taeaad: sure, "False" is nonempty and a string
[16:52:46] *** Joins: Esexe_ (~aa@024-151-038-076.res.spectrum.com)
[16:53:04] <grym> taeaad: what argument parsing library are you using
[16:53:38] <taeaad> grym: "import argparse"
[16:54:13] <nedbat> cren: pip-tools made a new release a few hours ago that fixed the new-pip problem
[16:54:14] <grym> taeaad: you probably want .add_argument('--thearg', action='store_true')
[16:54:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[16:54:19] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:54:20] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[16:54:25] <grym> or 'store_false' : https://docs.python.org/3/library/argparse.html#action
[16:54:32] <nedbat> oops, ChrisWarrick said that :)
[16:54:59] <nedbat> callq: there are third-party packages that make tables
[16:55:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:55:12] <grym> tabulate <3
[16:55:59] *** Quits: eyepeetee (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[16:56:08] *** Joins: naranja (~orange@user/orangeboxcutter)
[16:56:10] *** Joins: elias117 (~elias117@host-24-224-142-233.public.eastlink.ca)
[16:56:10] *** Quits: elias117 (~elias117@host-24-224-142-233.public.eastlink.ca) (Changing host)
[16:56:10] *** Joins: elias117 (~elias117@user/elias117)
[16:57:30] <cren> ChrisWarrick: it appears to be fixed now. Thanks
[16:58:59] <taeaad> grym: So store_true would set the default, but how do I parse when the user specifies the opposite?
[16:59:10] <grym> taeaad: you get a bool back either way
[16:59:21] <grym> (it's a switch)
[16:59:34] <taeaad> OK so if I specify the other thing at command line it should parse then. Let me check.
[16:59:45] <grym> no if you omit the flag you'll get the other
[17:00:08] <grym> i forget how argparse does --foo/--no-foo
[17:00:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:00:56] <taeaad> grym: Do you use a different parsing library?
[17:01:29] *** Quits: someuser (~user@197.54.43.98) (Ping timeout: 250 seconds)
[17:01:43] <grym> taeaad: yes, i use usually either click or typer
[17:01:52] <grym> typer more than click, these days
[17:01:54] *** Quits: lakrass (~lakrass@user/lakrass) (Quit: WeeChat 3.4)
[17:03:09] <ssbr> the benefit of sticking with argparse is that people keep creating new argument parsing libraries for you to learn, and you keep ignoring them. The downside is that it's AFAICT literally impossible to learn argparse, and you reference the docs whenever you do anything.
[17:03:27] *** Joins: sawk (~quassel@2001:b07:6465:4691:16b5:1dfd:a020:7eb0)
[17:03:28] <grym> typer is quite literally click in a trenchcoat
[17:03:45] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:03:45] <ssbr> la la la la
[17:03:47] <grym> which is ~good ; i just like the api
[17:04:28] <grym> and shellingham for free is often nice
[17:04:29] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 256 seconds)
[17:05:27] <DavidMilestone> What's an ideal project that covers all the concepts of Python or system design (for beginners)?
[17:05:34] <grym> uhh
[17:05:40] <grym> no such magical beast :)
[17:05:45] <phy1729> ssbr: argparse also doesn't have an inspection API so you can't create a shell completer from your code
[17:06:01] *** Joins: waynew (~wayne@user/waynew)
[17:08:30] *** Joins: badsektor (~badsektor@user/badsektor)
[17:08:40] <bjs> DavidMilestone: the project that you will actually complete
[17:08:55] <DavidMilestone> True
[17:09:11] <bjs> You can try make some artifical perfect project that teaches you everything but if you give up before you finish it then you won't really have learned
[17:09:42] <bjs> so work on things that you enjoy or will find useful or have some motivation to do,  especially if it's contributing to other large projects that already exist as there's no better way to learn system design than just seeing lots of systems and understanding how they are designed
[17:10:41] <grym> ^^^
[17:10:41] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:78:d033:7f28:3acb)
[17:10:52] <DavidMilestone> Thank you!
[17:11:10] <grym> all of my software skills are more or less epiphenomena that arose from ab external motivation
[17:11:16] <shad> DavidMilestone: build a flask api if you don't know what to do
[17:11:24] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[17:11:32] <DavidMilestone> Welp, I've not yet learned flask...
[17:11:36] <shad> best return on investment i think
[17:11:52] *** Joins: toma (~RubbishPu@node-1w7jr9yhpl48a59ipk07r5z4f.ipv6.telus.net)
[17:12:19] <shad> Build a weather application. Have Flask make request to some weather API and answer you in JSON. Then, make a front end app with React that consumes your API
[17:12:43] <DavidMilestone> I started practising Python a week ago, so there's still a long way to go
[17:12:50] <DavidMilestone> shad, thank you for the suggestion
[17:13:03] <shad> that would make maybe 5-10 hours of work for a beginner, and then you can build over that to make more stuff
[17:13:21] <nedbat> DavidMilestone: take shad's time estimate with a huge grain of salt.
[17:13:33] <nedbat> DavidMilestone: people travel at different speeds, and it's fine.
[17:13:34] *** Joins: maladaptive_75 (~maladapti@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[17:13:42] <DavidMilestone> That's true
[17:13:51] <nedbat> shad: 5-10 hours to learn flask and react?
[17:13:52] <grym> for contrast, i wrote python for 5 years before i ever knew what a POST was
[17:14:15] *** Quits: bfortified (~bfortifie@user/bfortified) (Ping timeout: 250 seconds)
[17:14:19] <bjs> DavidMilestone: the truth is that it doesn't really matter what you do, so long as you are programming.
[17:14:48] *** Quits: naranja (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[17:14:48] <bjs> If you continue to program and work on things you will improve and learn,  the way most beginners fail is not by learning badly or missing something but simply by giving up and stopping programming
[17:14:54] <deniska> grym: POST is when you turn a computer on and it beeps only once if everything is alright? :)
[17:14:54] <shad> nedbat: true, it can widly vary depending on the background of the people. But i think that's a reasonable estimate
[17:15:17] <callq> Hey I'm initializing a Counter by passing in a dictionary of [str, str] but I'd actually like the resulting Counter to be of type [str, float]. What can I do?
[17:15:28] <ChrisWarrick> shad: I’d say 5-10 hours would be quite an optimistic estimate for an experienced developer, let alone a newbie.
[17:15:43] <bjs> callq: convert the dictionary to a dict of {str: float} before giving it to Counter
[17:16:00] <bjs> callq: like `new_dict = {key: float(value) for key, value in old_dict}`   I would assume
[17:16:02] <callq> list comprehension?
[17:16:04] <shad> nedbat: not for a fully fledged web app, but reading a few tutorials of Flask and React, having the two communicate and being able to display data from the API in the front end, 5-10 hours  seems legit
[17:16:07] <bjs> old_dict.items() sorry !
[17:16:09] <nedbat> shad: i have tried to learn react, and it took me more than 10 hours to not understand it :)
[17:16:13] *** Joins: naranja (~orange@user/orangeboxcutter)
[17:16:19] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:16:23] <ssbr> shad: I'd burn the first 5 hours just crying
[17:16:35] <ssbr> yeah, what nedbat said
[17:16:38] <DavidMilestone> thanks for the motivation, you guys are amazing :]
[17:16:38] <shad> ChrisWarrick: i'm an experienced developer in both technologies, i think i would speedrun the assignment in 15mn, more or less
[17:16:41] *** Joins: cdown_ (~cdown@163.114.131.1)
[17:16:41] <supakeen> i felt react was quite close to GTK in the beginning until i found out it was not
[17:16:45] <supakeen> and i also shared the big sad
[17:16:47] <shad> nedbat: have you tried `npx create-react-app` ?
[17:16:49] <bjs> callq: Python has dictionary comprehensions too,  but a comprehension lik that is a nice way to build a new thing from an old thing in general.
[17:16:57] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[17:17:07] <shad> maybe a few years ago it was complex, but today everything works out of the box
[17:17:11] <shad> no assembly required
[17:17:13] <nedbat> shad: this also depends on learning style: some people want to truly grok what's going on, which can take long than cobbling together some examples.
[17:17:14] <callq> bjs worked like a charm! now I have to deal with this exponent scientific notation...
[17:17:17] *** Joins: XV9 (~XV8@2601:5cb:c001:50:4d1d:eb87:5761:ea2c)
[17:17:19] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:17:37] <bjs> callq: you mean when you print it out?  You might want to format things manually.
[17:18:57] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[17:19:00] *** cdown_ is now known as cdown
[17:19:11] <ssbr> shad: at any rate, I think someone learning Python should not sidetrack themselves with React :)
[17:19:17] *** Quits: XV8 (~XV8@2601:5cb:c001:50:5a5:1e58:a606:31d7) (Ping timeout: 240 seconds)
[17:19:40] <shad> ssbr: true, but one should not "learn how to python", instead it should learn how to build stuff
[17:19:59] <shad> python is just a means to an end, a tool in the box.
[17:20:54] <shad> And once you got the hang of how a program input/output, control structures (eg: if, for), OOP (class), there's nothing much more to learn
[17:21:20] <nedbat> .. except react :)
[17:21:43] <shad> there's no point in learning what `yield` does in python if not applied to build something. And building some fullstack application is a cool exercise to realize what programmation can bring to the table
[17:22:08] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[17:22:21] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[17:22:27] <DavidMilestone> Isn't JavaScript a prerequisite for React? If I have to learn React from scratch, perhaps the first thing I should do is learn JS (?)
[17:22:35] <shad> also, the true problem of react is that what you learned 1 or 2 years ago is already outdated. I miss the simpler times of `componentDidMount()`
[17:22:41] <ssbr> shad: sure, but people don't learn how to do engineering by first being told to do engineering -- they first learn arithmetic, how to read, etc.  Baby steps.
[17:22:52] <ssbr> also, I expect most Python programmers do not build things with react
[17:23:04] <shad> ssbr: i think that's a receipe for failure, but maybe it's just me
[17:23:06] <ssbr> so if anything, going in that direction, you should be doing some tensorflow project or something
[17:23:22] <ssbr> shad: I mean, it worked for you
[17:23:24] <ssbr> it worked for me
[17:23:30] <shad> DavidMilestone: True, but start with python and flask. That's the easier part
[17:23:33] <ssbr> learning to walk before you run is probably fundamental.
[17:23:42] *** Quits: parv (~quass@user/parv) (Quit: parv)
[17:23:48] <DavidMilestone> Yep, that's what I'm focusing on right now
[17:23:58] <shad> DavidMilestone: And at some point, you realize that every programming language is relatively the same. Starting point, end point, functions and returns, data structures
[17:24:01] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[17:24:03] <ChrisWarrick> shad: for that weather assignment, `create-react-app` takes about 2.5 minutes on my server. Installing flask may take another couple seconds. Let’s be generous and say you have 12 minutes left. Now for the weather API, if you already know a reasonable API and already have an API key, this is solved. But if you don’t, then finding an API and figuring out how it works can easily take half an hour
[17:24:05] <ChrisWarrick> or more.
[17:24:21] *** Joins: kts (~kts@103.73.237.56)
[17:24:29] *** Joins: han-solo (~hanish@user/han-solo)
[17:24:30] <merijn> shad: Tbh, that opinion is only true if you've only encountered the small handful of mainstream programming languages
[17:24:33] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:25:02] <ssbr> ChrisWarrick++
[17:25:08] *** Quits: fanis30 (~anon@adsl-188.176.58.139.tellas.gr) (Quit: WeeChat 3.3)
[17:25:16] <merijn> Sure, C#, Java, Python, JS, and ruby (and even C/C++, tbh) are all basically the same if you squint a bit. But there's a large number of languages that are *wildly* different
[17:26:09] *** Joins: zaquest (~notzaques@5.130.79.72)
[17:26:10] <ssbr> I maintain to this day that C and C++ are categorically different from JS or Python due to the existence of undefined behavior
[17:26:22] <ssbr> (not sure if Java has UB, suspect C# does)
[17:26:24] <shad> ChrisWarrick: if we're talking speedrun setting we have to set rules. A speedrun starts at the first input, i don't think installing `npx create-react-app` should count as one
[17:26:24] <bjs> For a person who started learning a week ago, perhaps they look more different than they do similar at this point.
[17:26:52] <merijn> ssbr: Python is literally *all* undefined behaviour, on account of not having a spec defining it's behaviour >.> (well, I guess "implementation defined" if we're charitable)
[17:27:25] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:75e8:31dc:d8c4:44c9)
[17:27:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:28:08] <ChrisWarrick> shad: you can optimize the rules so that the time is only counted while you’re holding your fingers on at least one keyboard key inside of an IDE. But that’s not a very reasonable metric for a programming assignment.
[17:28:50] <shad> also, speedrun setting implies that I already know my tools, so I'd say API key & specs from the weather provider should be known
[17:28:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[17:28:59] <bjs> merijn: I mean https://docs.python.org/3/ acts as a rough spec,  it's not formal by any means but it's certainly enough to constrain most implementations to be "Python".
[17:29:06] <bjs> and it certainly discounts anything that looks like "UB".
[17:29:23] <nedbat> shad: i appreciate you encouraging people.  it can be tricky though.  Sometimes beginners hear "this will be easy" as "it was easy for that guy, but I don't get it, so I must be dumb"
[17:29:26] <ssbr> merijn: that's precisely the difference that is importance -- UB is completely different from implementation-defined or unspecified behavior
[17:29:32] <ssbr> important.
[17:29:57] <merijn> ssbr: I'm not 100% sure unspecified behaviour is different from undefined, but I'd have to grab my copy of the spec :)
[17:30:02] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[17:30:14] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:30:18] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:30:21] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[17:30:30] <bjs> merijn: the C spec says that unspecified things are undefined,  so you have to be careful because the two words don't actually mean the same thing
[17:30:52] <merijn> But sure, UB is nasty can of worms. My point was that "all mainstream languages are roughly the same" shouldn't be extrapolated to "all programming languages are basically the same" :)
[17:30:55] *** Joins: Roey (~Roey@user/Roey)
[17:30:56] <ssbr> merijn: undefined behavior is defined not to occur -- and anything can happen, including rm -rf /. Unspecified is just "implementation-defined, but doesn't need to be documented"
[17:31:17] <merijn> ssbr: I don't think that's true
[17:31:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:31:33] <merijn> ssbr: In that implementation-defined is required to be *consistent*, unspecified is not
[17:31:39] <merijn> Anyway, kinda off-topic here :)
[17:31:42] <bjs> I don't want to get into a discussion about what C calls "undefined behaviour"
[17:31:45] <bjs> here :P
[17:32:00] <ssbr> merijn: you're right, consistency isn't required! I didn't know that, actually.
[17:32:01] <ssbr> https://en.cppreference.com/w/c/language/behavior
[17:32:22] *** Joins: wac (~wac@user/wac)
[17:32:24] <shad> nedbat: true, the one skill to get is resilience to failure, not discourage yourself. But i think realizing that programming should be the mean to an end and not the end in itself is the most important part
[17:32:25] <ssbr> in summary, C sux
[17:32:50] <shad> ask yourself what to do, then how to do it. Cause if you focus on the "how" before the "what", you never build anything.
[17:33:00] *** Joins: ice9 (~ice9@user/ice9)
[17:33:04] <shad> I was way better at physics than mathematics though. That explains that
[17:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:33:39] <icy_hot> shad i guess I've been struggling with that concept too
[17:33:45] <nedbat> icy_hot: which concept?
[17:33:57] *** Quits: zamanf (~dev@213.133.91.246) (Ping timeout: 256 seconds)
[17:34:08] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[17:34:11] *** Joins: esperegu (~quassel@ip-213-124-221-102.ip.prioritytelecom.net)
[17:34:16] <icy_hot> asking yourself what to do, then how to do it
[17:34:27] <nedbat> shad: i find people often need ideas for projects, so the weather app is cool. I'm always looking for more ideas if you have them: https://nedbatchelder.com/text/kindling.html
[17:34:48] <icy_hot> often times, i do the other way around which led to so many unfinished projects
[17:35:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:35:35] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[17:35:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:35:51] <ChrisWarrick> shad: I’m all for learning by doing, but at the same time, the first steps are quite difficult. For someone experienced, decomposing the weather task (sorry for abusing it a little) into steps is fairly simple. But a newbie doesn’t know where to start, doesn’t understand half the terms in this discussion — and in my mind, it would be better to start with the basics, a more theoretical
[17:35:53] <ChrisWarrick> understanding, and then take on more practical stuff.
[17:36:04] <ssbr> nedbat: Diplomacy adjudicator
[17:36:05] <ssbr> (sorry)
[17:36:25] *** Joins: reticuli (~reticuli@user/reticuli)
[17:36:55] <bjs> merijn: ssbr: tl;dr C has roughly 4 behaviours: "defined behaviours", "unspecified behaviours", "implementation-defined behaviours" and "undefined behaviours".  Python doesn't have the "undefined behaviour" flavour.
[17:38:31] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[17:38:36] <bjs> Although technically CPython inherits C's UB through ctypes and cextensions :)
[17:39:45] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:39:46] <shad> ChrisWarrick: true, but that's why these very channels exist, to help people find their way. This is the way
[17:40:06] <ssbr> shad: this isn't the way for everyone at every stage of their development
[17:40:07] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:40:45] *** Joins: johnjaye (~pi@173.209.65.233)
[17:41:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c)
[17:41:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c) (Changing host)
[17:41:06] *** Joins: skapata (~Skapata@user/skapata)
[17:41:17] *** Quits: TakinOver (~quassel@96.44.191.138) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:41:52] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[17:44:06] *** Joins: naranja (~orange@user/orangeboxcutter)
[17:44:29] *** Quits: icy_hot (~icy_hot@99-83-35-64.lightspeed.elpstx.sbcglobal.net) (Quit: WeeChat 3.4)
[17:45:00] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[17:45:04] <shad> ssbr: i think there's a point in time, different for everyone, where you have to stop learning the tool, and just use it to create stuff to really become skilled with said tool
[17:45:17] <ssbr> shad: yup
[17:45:21] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[17:45:45] <shad> Sure, you can follow the whole python.org/docs papers, and really know how to make `yield` work, but will you know how to build the weather app after that ? I don't think so
[17:46:01] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[17:46:37] *** Quits: Molot (~Molot@2a02:2149:8ab6:2d00:79bd:9ad4:c08a:4264) (Read error: Connection reset by peer)
[17:46:57] *** Joins: kts_ (~kts@103.73.237.5)
[17:47:08] <nedbat> shad: i think our overall point is that learning styles and paths differ, and you seem very certain about the One Right Way
[17:47:44] *** Quits: kts_ (~kts@103.73.237.5) (Client Quit)
[17:47:53] *** Quits: kts (~kts@103.73.237.56) (Ping timeout: 256 seconds)
[17:48:25] <merijn> tbh, my main frustration/problem with python is the lack of concise detailed specification of how things like yield works >.>
[17:48:35] <shad> i might be; although, DavidMilestone was looking for a project, and I don't think i was that much off with the time estimate I gave :>
[17:49:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:49:57] <DavidMilestone> :]
[17:50:23] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:51:48] *** Joins: FilM (~FilM_81@93-41-18-64.ip79.fastwebnet.it)
[17:52:03] *** Joins: Barones (~Barones@user/Barones)
[17:52:15] *** Quits: FilM (~FilM_81@93-41-18-64.ip79.fastwebnet.it) (Client Quit)
[17:52:28] *** Joins: audiophile_ (~audiophil@user/audiophile)
[17:52:44] *** Joins: FilM (~FilM_81@93-41-18-64.ip79.fastwebnet.it)
[17:53:14] *** Quits: jay-m1261 (~jay-m@129.0.76.230) (Remote host closed the connection)
[17:53:33] *** Quits: aiena (~aiena@user/aiena) (Ping timeout: 256 seconds)
[17:53:34] *** Joins: jay-m1261 (~jay-m@129.0.76.230)
[17:54:27] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 256 seconds)
[17:55:01] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:55:04] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-580b-afe0-58c1-a2bf.res6.spectrum.com)
[17:55:59] *** Joins: analoq (~yashi@user/dies)
[17:56:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:56:57] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (Ping timeout: 256 seconds)
[17:58:09] *** vaio is now known as v-
[17:59:27] *** Quits: jay-m126_ (~jay-m@129.0.76.230) (Ping timeout: 256 seconds)
[17:59:27] *** Quits: jay-m126 (~jay-m@129.0.76.230) (Ping timeout: 256 seconds)
[17:59:41] *** Joins: someuser (~user@197.54.43.98)
[17:59:45] *** Joins: vindex10 (~vindex10@gateway/tor-sasl/vindex10)
[17:59:47] *** Quits: jay-m1261 (~jay-m@129.0.76.230) (Ping timeout: 256 seconds)
[17:59:49] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[18:00:41] *** Quits: avaxar (~avaxar@36.72.213.74) (Remote host closed the connection)
[18:00:41] *** Quits: duuude (~user@user/duuude) (Ping timeout: 256 seconds)
[18:01:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:01:36] *** Joins: St327 (~St327@user/st327)
[18:02:33] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:02:38] *** Quits: St327 (~St327@user/st327) (Client Quit)
[18:03:18] *** Joins: kts (~kts@103.73.237.5)
[18:04:53] *** Quits: luva (~luva@146.70.62.238) (Ping timeout: 256 seconds)
[18:06:25] *** Joins: luva (~luva@45.141.152.62)
[18:06:56] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[18:07:06] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl48a59ipk07r5z4f.ipv6.telus.net) (Quit: Leaving)
[18:07:58] *** Joins: aiena (~aiena@user/aiena)
[18:09:26] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[18:10:51] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:12:06] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[18:12:28] *** Joins: pingpongball (~pingpongb@43.228.192.105)
[18:12:42] *** Joins: ice9 (~ice9@user/ice9)
[18:13:00] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[18:13:12] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:13:12] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[18:13:28] *** Joins: CombatVet (~c4@user/combatvet)
[18:13:57] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:13:59] *** Joins: VinnySauce (~james@user/vinnysauce)
[18:14:28] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:14:36] *** Joins: Kruppt (~Kruppt@50-111-49-4.drhm.nc.frontiernet.net)
[18:15:20] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[18:15:23] *** Quits: postal_blab_ (~quassel@2a01:4f8:202:53d9::bad:deed) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[18:15:31] *** Joins: postal_blab (~quassel@2a01:4f8:202:53d9::bad:deed)
[18:15:56] *** Joins: jay-m126 (~jay-m@129.0.76.230)
[18:16:03] *** Joins: jay-m126_ (~jay-m@129.0.76.230)
[18:16:32] *** Joins: jay-m1261 (~jay-m@129.0.76.230)
[18:17:35] *** Quits: pingpongball (~pingpongb@43.228.192.105) (Quit: Client closed)
[18:18:43] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[18:19:07] *** Joins: alex11 (~alex11@user/alex11)
[18:19:29] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[18:19:32] <BinarySavior> I am watching  a "nature sounds" video  that is 3 hours long of a bird chirping that claims it's not on a "loop" in the title.  To me it sounds like it actually _is_ a loop.  I know birds can be repetitive so perhaps it's not a loop but I want to test it.  I was thinking about doing a frequency domain transform on the audio to see if there's a
[18:19:34] <BinarySavior> repeating signal... has anyone done anything like this before?
[18:20:12] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:20:22] <bjs> BinarySavior: aren't those videos for like trying to relax;  it doesn't sound like it worked very well for you :P
[18:20:37] <BinarySavior> hahahaha
[18:20:52] *** Quits: Barones (~Barones@user/Barones) (Remote host closed the connection)
[18:21:00] <BinarySavior> it is relaxing and I'll still watch it even if it's looping, but I just want to know
[18:21:15] <mefistofeles> haha
[18:21:26] *** Quits: yac (~user@user/yac) (Remote host closed the connection)
[18:21:34] *** Quits: reticuli (~reticuli@user/reticuli) (Quit: WeeChat 3.4)
[18:22:07] *** Quits: luva (~luva@45.141.152.62) (Ping timeout: 256 seconds)
[18:22:38] *** Joins: luva (~luva@185.168.9.240)
[18:22:39] <mefistofeles> BinarySavior: well, of course you want to deal with fft, but I can think of a couple of different approaches
[18:23:17] <mefistofeles> a naive one would just be trying to do fft in some time windows and check how they are similar to each other
[18:24:14] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Client Quit)
[18:24:57] <lantech19446> finally did something in class that feels like i made a real program, granted very simple and almost completely based on nested loops but I'm understanding loops in python so much more than I ever did in js just have to get used to how to indent them
[18:25:29] <aiena> xD
[18:25:39] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Ping timeout: 276 seconds)
[18:25:55] <aiena> I am having fun using python as a scripting language because it is a bit saner
[18:26:19] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[18:26:35] <aiena> end up making a .sh first then getting bugged and making a .py :P
[18:27:00] <aiena> looping is a lot of fun too.
[18:27:44] <vanessa> why does a class c, that has overloaded __iter__ gives me an error when I iter(c) ?
[18:27:45] *** Quits: bluedust (~bluedust@59.89.210.27) (Read error: Connection reset by peer)
[18:27:59] *** Joins: bluedust (~bluedust@103.160.194.110)
[18:28:03] <bjs> vanessa: that's hard to answer without seeing your overloaded __iter__ and the error you got
[18:28:05] <bjs> vanessa: can you share them
[18:28:17] <deniska> aiena: nowadays I typically skip the .sh step
[18:28:33] <aiena> deniska: yeah I am moving in that direction too
[18:28:47] <aiena> I had to learn to use POen today though
[18:28:52] <aiena> *Popen
[18:28:55] *** Quits: luva (~luva@185.168.9.240) (Ping timeout: 256 seconds)
[18:29:00] <aiena> .run() has limitiations
[18:29:32] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc)
[18:29:33] *** Quits: kuter (~kuter@public-gprs525957.centertel.pl) (Quit: Lost terminal)
[18:29:34] <aiena> and then I was stumped for a while because I dod not do a .wait() which I think .run() does automatically
[18:29:48] *** Joins: luva (~luva@45.141.152.54)
[18:30:15] <aiena> deniska: how do you sent environment variables like in a shell in python?
[18:30:33] <BinarySavior> os.environ
[18:30:39] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[18:31:19] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[18:31:28] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[18:31:33] <BinarySavior> accessing environment variables from python: https://docs.python.org/3/library/os.html#os.environ
[18:31:36] <deniska> aiena: or env= param in subprocess.run and friends
[18:31:53] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[18:32:31] *** Joins: ice9 (~ice9@user/ice9)
[18:32:47] *** Joins: NeoCore (~neocore@195.200.221.109)
[18:33:06] <lantech19446> aiena: once i get good enough i'll likely do the same, I have one script I really want to write and since I have python installed on my server I'll be able to do it
[18:33:21] *** Joins: luigibu (~luigi@93.176.155.54)
[18:33:24] <aiena> yeah bash is a freaking minefeild
[18:33:43] <aiena> it has looping and basically everything but it is so easy to screw up
[18:33:53] <BinarySavior> python is really nice until your stuff becomes deprecated
[18:33:56] <BinarySavior> lol
[18:34:04] <lantech19446> when I see people script in bash it makes no sense to me so many symbolic representations
[18:34:04] <SnoopJ> BinarySavior, like what
[18:34:12] <BinarySavior> python 2.7
[18:34:22] <sco1> here we go
[18:34:31] <aiena> hmm for scripting it may not matter so much
[18:34:46] <aiena> i think only the print function was the main issue
[18:34:57] <aiena> the rest is done by os programs anyway
[18:35:00] <lantech19446> i mean hell if i'm just writing scripts for my own use i'll just keep running the version i need unless it's such a glaring security hole that it would warrant me rewriting it
[18:35:01] <aiena> like ffmpeg etc.
[18:35:20] <aiena> lantech19446: usually that is in the OS choice
[18:35:31] <aiena> as in linux is a pile of dependent friends
[18:35:46] <BinarySavior> yea, I just inherited a project that I have to maintain but it's python 2.7 and I can't even get an environment working (granted IT has a large role to play preventing me from installing deprecated pypi repos)
[18:35:47] <aiena> they all need to be updated to be happy with each other
[18:35:50] <SnoopJ> aiena, old versions of Python don't get security patches at all
[18:36:03] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[18:36:03] <SnoopJ> where "old" is "old enough that Python stops doing that"
[18:36:09] <aiena> SnoopJ: I never advocated old versions
[18:36:20] <lantech19446> even in linux you can install any version you want or use something like anaconda to create a venv with that version but work is a windows domain so i just install whatever i need
[18:36:22] <SnoopJ> aiena, I just wanted to clarify what BinarySavior was crowing about
[18:36:34] <SnoopJ> There are bugs in outdated versions of bash, too
[18:36:40] <BinarySavior> haha:D  I<3  python didn't mean to crow
[18:36:42] <grym> BinarySavior: "closedcantfix"
[18:36:57] *** Quits: NovaXrine_ (~NovaXrine@2604:a880:4:1d0::183:6000) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:37:13] <SnoopJ> very relatedly, macos is *finally* dropping 2.7
[18:37:16] *** Joins: NovaXrine (~NovaXrine@void.novaxrine.com)
[18:37:22] <SnoopJ> https://developer.apple.com/documentation/macos-release-notes/macos-12_3-release-notes#Python
[18:37:28] <aiena> yay
[18:37:30] *** Quits: kts (~kts@103.73.237.5) (Quit: Konversation terminated!)
[18:37:41] <aiena> change is inevitable
[18:37:54] <nedbat> SnoopJ: and also not shipping python3, as I understand it.
[18:37:58] <aiena> BinarySavior: maybe you need to rewrite that shit if it's so ancient
[18:38:19] *** Joins: kts (~kts@103.73.237.5)
[18:38:20] <aiena> erm sorry
[18:38:21] <BinarySavior> aiena we are in the process of that haha but short-term dependencies require continued life support of this relic
[18:38:28] <aiena> sorry for the language
[18:38:33] *** Quits: luva (~luva@45.141.152.54) (Ping timeout: 256 seconds)
[18:38:46] <aiena> BinarySavior: then use a vm
[18:38:48] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:38:59] <grym> nedbat: that was once the plan, but i believe no longer
[18:39:05] <aiena> sandbox this piece of history there
[18:39:39] <BinarySavior> I wish it was that simple, IT has these computers locked down... can't install anything that would make my life easier unfortunately
[18:39:42] *** Quits: phylaz (~phylaz@82.51-174-55.customer.lyse.net) (Remote host closed the connection)
[18:39:59] <vanessa> bjs, this is not my code, my friend's code. she works in cryptography. the MWE is here: https://dpaste.org/oe3F and run it here: https://sagecell.sagemath.org
[18:40:03] *** Joins: drvanon (~drvanon@81.89.199.26)
[18:40:09] *** Joins: Liblx (~Alex@2a02:810c:280:59c:397f:f818:af6f:5a2d)
[18:40:12] <grym> BinarySavior: time for lots of CYA emails, i guess
[18:40:36] <SnoopJ> aiena, there is deployed code running stuff even older than 2.7. That doesn't provide any assurance against "this absolutely will not have known flaws officially patched" though
[18:40:55] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8) (Ping timeout: 256 seconds)
[18:41:12] *** Joins: akk (~akk@75-161-95-245.albq.qwest.net)
[18:41:29] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[18:41:40] <aiena> deprecated software ends up all over the place i think
[18:41:49] <aiena> eventually
[18:41:49] <SnoopJ> Is that not the point of software :)
[18:42:28] <grym> "In the long run every program becomes rococo - then rubble. "
[18:42:29] <aiena> all software has bugs and sometimes an exploit is needed to discover it
[18:43:00] <aiena> grym: I think python is little more maintainable than say cpp though
[18:43:11] *** Joins: cedb (~ced@192-222-138-215.qc.cable.ebox.net)
[18:43:11] <aiena> QT changes so much all the time
[18:43:13] <SnoopJ> aiena, why's that?
[18:43:32] <aiena> you can do more with less LOCs
[18:43:52] <SnoopJ> Is maintainability tied to lines of code?
[18:44:13] <aiena> not necessarily
[18:44:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:44:37] <aiena> but less LOCs could mean it is easier to keep it up to date
[18:44:53] <aiena> or it could also mean a piece of garbage untested
[18:45:11] *** Joins: mattfoxxx (~mattfoxxx@200116b82279760065f54d6a36d41c11.dip.versatel-1u1.de)
[18:45:11] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:45:14] <bjs> vanessa: is a BooleanPolynomialRing object supposed to be iterable?
[18:46:00] *** Quits: DavidMilestone (~DavidMile@182.64.8.212) (Quit: Client closed)
[18:47:08] *** upekkha is now known as metta
[18:47:26] *** Joins: ice99 (~ice9@user/ice9)
[18:48:27] <vanessa> A BooleanPolynomialRing(4) should return a 4 variable ring, bjs. I am completely out of my depths here. Maybe I should ask her to ask in #crypto or something.
[18:48:31] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[18:49:05] *** Joins: zebrag (~chris@user/zebrag)
[18:49:24] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e2dd:ac35:d905:e9b4)
[18:49:30] <vanessa> I was just wondering if it was possible for a class c to overload __iter__() and yet throw error iter(c)
[18:49:33] <bjs> vanessa: okay well, I suggest reading the sage documentation because probably just BooleanPolynomialRing isn't an iterable thing
[18:49:45] <bjs> vanessa: who said the class overloaded __iter__ at all.
[18:49:52] *** Joins: Pickchea (~private@user/pickchea)
[18:49:53] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[18:49:56] <bjs> vanessa: if I go `self.x = 42` then dir() contains "x" but the class didn't "overload" it
[18:50:20] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[18:50:59] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[18:51:22] <bjs> vanessa: you can check if '__iter__' in dir(BooleanPolynomialRing)  if you want to know if the class overloads it.
[18:51:22] *** Quits: ice99 (~ice9@user/ice9) (Remote host closed the connection)
[18:51:32] <SnoopJ> it gets __iter__ from sages.rings.ring.Ring which raises NotImplementedError
[18:51:32] *** Joins: ice99 (~ice9@user/ice9)
[18:51:36] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:75e8:31dc:d8c4:44c9) (Quit: pvergain)
[18:51:42] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 260 seconds)
[18:52:14] <bjs> SnoopJ: so there,  sage Ring objects aren't supposed to be iterable.
[18:52:21] <bjs> in general?
[18:52:26] *** Quits: rjwiii (~mr-rich@072-187-031-098.res.spectrum.com) (Changing host)
[18:52:26] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[18:52:35] <SnoopJ> bjs, I think the right way to say it is that the base class does not define iteration
[18:52:58] *** Quits: vindex10 (~vindex10@gateway/tor-sasl/vindex10) (Quit: vindex10)
[18:53:31] *** Joins: imp (~imp@138-59-122-25.static.sumicity.net.br)
[18:54:16] <SnoopJ> https://github.com/sagemath/sage/blob/develop/src/sage/rings/ring.pyx#L208-L220
[18:54:30] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 260 seconds)
[18:54:43] <bjs> SnoopJ: the docstring even uses my "in general" comment :P
[18:54:57] <SnoopJ> bjs, I was objecting to "aren't supposed to be iterable"
[18:55:04] *** Joins: pingpongball (~pingpongb@43.228.192.99)
[18:55:19] *** Quits: jay-m1261 (~jay-m@129.0.76.230) (Ping timeout: 256 seconds)
[18:55:30] <SnoopJ> there's no proscription against iterating a ring, but it may not be a terribly meaningful thing to do if the ring isn't finite
[18:55:46] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[18:56:07] *** Quits: jay-m126_ (~jay-m@129.0.76.230) (Ping timeout: 256 seconds)
[18:56:07] *** Quits: jay-m126 (~jay-m@129.0.76.230) (Ping timeout: 256 seconds)
[18:56:24] <SnoopJ> or uh, I guess density is really the property you'd be fussed about? I don't know if that's a meaningful notion this deep into abstract algebra :)
[18:56:56] <vanessa> so NotImplementedError means that in future it may be implemented. I mean if rings are not supposed to have meaningful iterator, then why even overload __iter__?
[18:57:12] <SnoopJ> vanessa, it is incorrect to say "not supposed to have" here
[18:57:32] <SnoopJ> The base class does not implement the behavior and is signaling this with that NotImplementedError, but a derived class could define the method
[18:57:33] <vanessa> SnoopJ: I too don't know algebra
[18:57:46] <dirtwash> how do I do a simple commandline arg support in my script? I just need like script.py something and use taht something in a var
[18:58:11] <SnoopJ> vanessa, I know a bit, but mostly whatever I learned by osmosis in topology and rubbing shoulders with people who think about particles all day
[18:58:17] <aiena> dirtwash: read about the subprocess module in python
[18:58:27] <han-solo> `sys.argv` if it's dirt simple, or `argparse`
[18:58:29] <aiena> that how I do my shell scripts with python
[18:58:39] <grym> aiena: other way around
[18:58:47] <bjs> vanessa: not "in future" but that in general sage Ring objects are not iterable, and specifically a BooleanPolynomialRing is not iterable.  that's just what the Python says. Maybe SnoopJ is right that the obvious interpretation for iterating over a Ring object doesn't make sense if the set is infinite
[18:58:55] <aiena> grym: meaning
[18:58:57] <grym> dirtwash: argparse is fine for little stuff or if you want to stay in stdlib
[18:59:08] <grym> aiena: dirtwash wants to parse args, not pass them to other programs
[18:59:10] <aiena> ah he want to pass arguments to the py script
[18:59:15] <grym> yes
[18:59:25] <aiena> got it
[18:59:27] <SnoopJ> bjs, I could soooorta see why it might make sense to iterate an infinite discrete one but at any rate, it's not something you wanna implement at the base level
[18:59:45] <vanessa> SnoopJ: it is similar to a what abstract class does in Java. it only defined but any child has to overrider it
[19:00:02] <bjs> vanessa: no it doesn't "have" to, it's just by default Rings are not iterable
[19:00:25] <dirtwash> thanks sys arg works
[19:00:36] <bjs> vanessa: a specific Ring class can overwrite that and have an __iter__ if it wants, but the BooleanPolynomialRing class does not.
[19:00:49] <bjs> so it's not iterable.
[19:00:52] <vanessa> bjs I am not following you discussion with SnoopJ since I know little about algebra. I am talking from Python's way
[19:01:01] <grym> dirtwash: note that sys.argv[0] is probably not what you think it is
[19:01:12] <SnoopJ> vanessa, from Python's way, it is relatively common to define a method that does `raise NotImplementedError` on a base class.
[19:01:25] <SnoopJ> As bjs says, you do not *have* to override this as you would with an abstract method, but you *can*
[19:01:32] <dirtwash> grym: already read
[19:02:07] <SnoopJ> vanessa, all the rest of that is just us trying to guess at *why* Ring raises NotImplementedError :)
[19:02:19] <bjs> vanessa: I'm only talking about the classes here. The Ring class is the base class, and it has a default __iter__ method (which chooses to raise an error).  Subclasses of Ring can choose to overwrite __iter__ if they wish.  BooleanPolynomialRing chooses not to.  So BooleanPolynomialRing is not iterable (you get the error).
[19:02:49] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[19:03:02] <vanessa> yes. so what is the advantage of raising a NotImplementedError instead of like printing "this is an error" and quiting. Both have the same effect.
[19:03:16] <grym> vanessa: well, one's an exception
[19:03:21] <SnoopJ> vanessa, they have *very* different effects
[19:03:30] <bjs> vanessa: that's basically what an exception is,  except you can handle exceptions inside the language if you wanted
[19:03:37] <SnoopJ> you can't handle "the base class decided to bring the whole program to a halt"
[19:03:39] *** Joins: lakrass (~lakrass@user/lakrass)
[19:03:41] <SnoopJ> you can handle an exception, though
[19:03:53] <lesshaste> hmm.. could anyone tell me what is wrong with my code https://bpa.st/AHIA for https://adventofcode.com/2021/day/1 please. It looks so simple
[19:04:16] *** Quits: callq (~callq@2409:4062:2e9e:2081:598e:77bd:9a69:ff34) (Quit: callq)
[19:04:32] <deniska> lesshaste: what is type(L[0])?
[19:04:43] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 256 seconds)
[19:04:46] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:04:46] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[19:04:57] <lesshaste> deniska, argh!!
[19:04:58] <lesshaste> thank you
[19:05:04] <sco1> :D
[19:05:11] *** Quits: brentaarnold (~brentaarn@24.112.58.14) (Ping timeout: 256 seconds)
[19:05:14] <vanessa> SnoopJ: you can do the same with a if and goto then why exception. and if I return say EXIT_FAILURE as in C, the calling process knows that an error has occured.
[19:05:28] <lesshaste> nice starting trick by them
[19:05:30] <SnoopJ> vanessa, I'm not really sure what you're asking me.
[19:05:35] <lesshaste> the difference is 1 exactly! :)
[19:05:57] <sco1> lesshaste: that's not what deniska asked
[19:06:05] *** Joins: darksun (~darksun@user/darksun)
[19:06:05] <bjs> vanessa: exceptions are basically what you are describing: but better.  They tell you *where* it happened, they have a message,  they can be checked and used *inside* the program itself
[19:06:06] <bjs> etc
[19:06:08] <SnoopJ> vanessa, if you want an analogy for C, exiting here would be the equivalent of calling abort(). It's inappropriate for the class to have such a strong opinion about *the entire program*
[19:06:31] <deniska> sco1: part 2 will make things more obvious :)
[19:06:34] <SnoopJ> (unless something has gone so wrong in the class that the program is guaranteed to be spoiled)
[19:06:59] <lesshaste> sco1, they asked for the type. I looked at the type and saw what I was doing wrong
[19:07:19] <sco1> Then what does a difference of 1 have to do with it?
[19:07:22] <SnoopJ> but yea, exceptions are basically error codes, except good
[19:07:41] *** Joins: karlpinc (~user@173-161-46-9-Illinois.hfc.comcastbusiness.net)
[19:08:03] *** Joins: bluedust_ (~bluedust@59.89.210.27)
[19:08:32] <lesshaste> sco1,  if you don't get the type right you get 1582. If you do you get 1583
[19:08:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:08:40] <SnoopJ> hmm that's an unkind way to say that; better phrasing: very simple error codes have their uses, but exception systems provide more features
[19:09:06] <sco1> ah, I understand now
[19:09:07] <vanessa> ok, so I can see an advantage that with an exception, I can do what is basically a backtrace in GDB and see where it happened.
[19:09:25] <SnoopJ> exceptions can carry arbitrary data, too
[19:09:31] <Repiphany> That's not really a "trick", that's just a side effect of string comparison almost behaving the same as numbers (only when they have the same length)
[19:09:36] <SnoopJ> and you can write subclasses for them, etc.
[19:09:51] <ssbr> vanessa: yes, that's one of the big benefits. The other big benefit is that they are implicitly propagated if not caught -- although this isn't always considered a good thing.
[19:11:05] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[19:11:07] <vanessa> I mean, I love some little things that python does to make life of it's users easier. No GDB, the backtrace is right there when error occurs.
[19:11:29] *** Quits: bluedust (~bluedust@103.160.194.110) (Ping timeout: 250 seconds)
[19:11:55] <SnoopJ> the little things are nice, but the big thing is the big thing: an exception doesn't mean the sky is falling, code above you on the call stack can recover, if they know how to handle the exceptional behavior.
[19:12:03] *** Joins: SOMBRIO (~SOMBRIO@177.137.113.73)
[19:12:21] <vanessa> I remember the horror of hours sinked in Valgrind and GDB trying to catch that nasty leak somewhere.
[19:12:42] <SnoopJ> and if an exception makes it all the way to the top, the interpreter knows there's nobody left to possibly handle it, so the default handling is "exit the program and print the traceback"
[19:12:48] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) ()
[19:12:51] <dirtwash> anyone has experiecne with having multiple redis connections open? to parallelize input
[19:13:03] <SnoopJ> (but you can change that, too!)
[19:13:14] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[19:13:47] *** Quits: sawk (~quassel@2001:b07:6465:4691:16b5:1dfd:a020:7eb0) (Ping timeout: 256 seconds)
[19:13:49] <vanessa> from where I come from, error are the end of the world, SnoopJ :p
[19:14:03] <bjs> vanessa: exceptions aren't always errors
[19:14:10] <SnoopJ> ^
[19:14:17] <bjs> "this object isn't iterable" isn't the end of the world, and you can easily imagine a program go "well okay then, do this other thing instead"
[19:14:41] <bjs> and that's what exceptions give you, the opportunity to do that if you wanted
[19:15:08] <SnoopJ> Among many other things
[19:15:12] <ssbr> Even if they were errors, errors in most running software can't be the end of the world, because it'd be bad for the user. For example, if an error occurs in your word processor, you should at *least* try to save a backup before crashing -- and at best totally ignore the error and pop up a bug reporting menu, unless it's serious.
[19:15:27] <vanessa> so exceptions are easier way of doing GOTO without acutally doing GOTO
[19:15:37] <SnoopJ> 95% of programming languages are tbqh
[19:15:43] <bjs> vanessa: I mean all control-flow mechanisms are "ways of doing GOTO"
[19:16:00] <bjs> an `if` is a way of doing goto, a `while` is a way of doing goto, a function is just a goto :P
[19:16:04] <ssbr> vanessa: it's dynamic goto to a caller-provided error handling point :)
[19:16:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[19:16:37] <bjs> vanessa: for an exception you don't know *where* to goto, instead they "flow" up the stack until they get handled (or if not, get reported to the user).
[19:16:40] <ssbr> (this is actually literally how exceptions are implemented in some languages -- it's faster than going frame by frame up the call stack)
[19:16:58] * SnoopJ grumbles about exception policy at $work
[19:17:36] <vanessa> I blame dijkstra
[19:17:39] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[19:18:26] <bjs> vanessa: for arguing against unstructured control flow?
[19:19:02] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[19:19:46] <vanessa> bjs if the control has passed through a line, the compiler knows what that line is, just smash the stack and GOTO the labeled line. that is exception handling :P
[19:20:02] *** Parts: pingpongball (~pingpongb@43.228.192.99) ()
[19:20:09] <bjs> vanessa: I mean, that's also functions.
[19:20:20] <vanessa> bjs, for villianizing GOTO
[19:20:24] <bjs> vanessa: `def foo(f, x): f(x)` <- the compiler doesn't know where f is going to either
[19:20:35] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[19:21:26] <bjs> vanessa: I mean he argued against unstructured control flow in higher level languages, which is exactly what we find today.
[19:21:44] <SnoopJ> and loops!
[19:21:48] *** Joins: jmd (~user@de.cellform.com)
[19:21:48] *** Quits: jmd (~user@de.cellform.com) (Read error: Connection reset by peer)
[19:22:07] <SnoopJ> (are basically jumps, I mean; I don't know what Dijkstra said about them)
[19:22:40] <vanessa> if we still find unstructured code today, then was villianizing GOTO worth it.
[19:22:48] *** Joins: apteryx (~maxim@dsl-10-149-70.b2b2c.ca)
[19:23:00] <bjs> vanessa: you don't in Python.
[19:23:01] <apteryx> hello!  how is sys.prefix computed at the lowest level?
[19:23:14] <apteryx> I can't find where it's defined in the C sources
[19:23:24] <grym> '"you never know where it's going to put things", he explained, "so you'd have to use separate constants"'
[19:23:49] <vanessa> I know people who treat GOTO as if it is the worst thing to ever happen. If you ever put a single GOTO anywhere, you gave spiderman cancer
[19:24:01] <bjs> vanessa: there are no unstructured control flow primitives in Python, so you do not find any.
[19:24:56] <bjs> vanessa: certainly Dijkstra did not argue against goto for everything, just in our higher level languages.  In lower level things (think asm and perhaps up to C) then `goto` is still an important construct
[19:24:57] *** Joins: Masterphi (~Masterphi@user/masterphi)
[19:25:07] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[19:25:47] <vanessa> python. does it have GOTO?
[19:25:51] <bjs> vanessa: no.
[19:25:53] <phy1729> Sometimes goto is still less evil than say a single run loop just for the ability to break
[19:25:59] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:26:50] <vanessa> exactly phy1729 break and continue are literally GOTO in disguse.
[19:27:21] *** Quits: nomic (~nomic@2a00:23c7:ec90:a501:b0:4012:86ae:6130) (Quit: Leaving)
[19:28:08] <vanessa> bjs: then how to break out of a outer loop from inner loop?
[19:28:20] <dirtwash> I have to check like a LOT of keys in redis. Is there any way to paralllize this? right now its iterating over a list and checking every one by one, maybe I can do like x at once?
[19:28:29] <ssbr> vanessa: I like labeled break and continue for that :)
[19:28:33] <bjs> vanessa: in Python? there is no "break outer loop" command,  but you can `return`
[19:28:47] <grym> dirtwash: check them how?
[19:28:52] <ssbr> in Python, you'd write a function to encapsulate it, yeah.
[19:29:00] <MacGyver> ssbr: Which aren't a thing in Python, it got rejected over a decade ago.
[19:29:10] <grym> dirtwash: often, converting lists to sets can speed things up really significantly if you're testing "if this is in that"
[19:29:13] *** Quits: FilM (~FilM_81@93-41-18-64.ip79.fastwebnet.it) (Remote host closed the connection)
[19:29:16] *** Joins: bfortified (~bfortifie@user/bfortified)
[19:29:16] <bjs> vanessa: but loops are structured, and aren't gotos.  All structured control flow can be *implemented* with goto, but Dijkstra argued against including an un-structured `goto` statement directly in our higher-level languages.
[19:29:29] <MacGyver> Unless I missed the memo and it has them now.
[19:29:38] <ssbr> MacGyver: nope, you had it the first time around
[19:29:41] <ssbr> someday!
[19:29:42] <dirtwash> grym: the bottleneck is that it is doing for each : check if exists, if not set it. It'd be faster to paralllize this I had hoped
[19:30:01] <grym> dirtwash: do you care at all if these keys are ordered
[19:30:06] <dirtwash> grym: no
[19:30:10] <ssbr> bjs: I'm not even sure if he was arguing against that, or just a style of spaghetti code that was ubiquitous at the time and no longer seems even remotely ok to modern eyes
[19:30:18] <grym> dirtwash: use a set
[19:30:23] <bjs> vanessa: and that's what we have, low-level languages with jumps and high-level languages with structured control flow.  Each "block" of the program has well-defined entry and exit points.
[19:30:27] <dirtwash> i think that single connection is a bottleneck, because redis server pretty idle when I run this
[19:30:36] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[19:30:46] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[19:30:53] <ssbr> a total ban on goto does seem like overkill in retrospect. nothing especially bad happens from gotos that don't cross structured programming constructs
[19:31:00] <dirtwash> grym: how again do I convert list to set? Its been many years
[19:31:05] <dirtwash> it was simple..
[19:31:07] <bjs> ssbr: you can read yourself https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf
[19:31:11] <grym> dirtwash: set(thelist)
[19:31:15] <dirtwash> thx
[19:31:24] <vanessa> so, you write a function where you might need to break out of the inner loop? yet another call on top of stack?
[19:31:32] <bjs> (a quick google to get the link, it might not be "the" official source, it looks typed-up which I believe wasn't the norm for EWD)
[19:31:55] <bjs> Although it's CACM so it probably is
[19:32:11] <ssbr> bjs: yes, but the go to statement he describes is not, for example, the go to statement in C
[19:32:24] <apteryx> OK, it was in getpath.c
[19:32:35] *** Parts: apteryx (~maxim@dsl-10-149-70.b2b2c.ca) ()
[19:32:37] *** Quits: elias117 (~elias117@user/elias117) (Read error: Connection reset by peer)
[19:32:44] *** Quits: maladaptive_75 (~maladapti@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Ping timeout: 250 seconds)
[19:32:45] <Jimmy2027> hi, I want to create a flat list (a list with no list inside) with a setup like this: https://bpa.st/CFBA but I don't know hot to unpack the results of my_function(). Is there a way in python to do that?
[19:32:53] <vanessa> ssbr: I agree total ban on GOTO was overkill
[19:32:55] *** Joins: elias117 (~elias117@host-24-224-142-233.public.eastlink.ca)
[19:32:55] *** Quits: elias117 (~elias117@host-24-224-142-233.public.eastlink.ca) (Changing host)
[19:32:55] *** Joins: elias117 (~elias117@user/elias117)
[19:32:57] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e2dd:ac35:d905:e9b4) (Ping timeout: 240 seconds)
[19:32:57] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[19:32:58] *** Joins: sawk (~quassel@5.170.68.34)
[19:33:00] *** Joins: jdmark (~jdmark@user/jdmark)
[19:33:09] <Jimmy2027> I guess what I want is something like this: [1 if my_condition else *my_function() for _ in range(5)]
[19:33:36] <ssbr> bjs: he describes this as a problem of being unable to describe coordinates in program state space, but you can do that in C pretty easily, even with goto -- C's goto is actually not very complicated
[19:34:00] <jinsun> but you can't have with statements with goto I heard, so it was worth it I guess
[19:34:08] <ssbr> bjs: in other words, the "goto" he suggests banning no longer exists, and so I'm not convinced that the advice holds with today's "goto"
[19:34:20] <ssbr> we don't write unstructured assembly anymore, for the most part
[19:34:20] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[19:34:40] <bjs> ssbr: what do you mean it no longer exists? There are no structured control flow mechanisms in our processor architectures
[19:34:42] <MacGyver> goto is regularly used in C because it lacks a proper error handling mechanism. If C had an error handling mechanism, using goto for that would be considered bad as well.
[19:34:51] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[19:34:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[19:34:59] <MacGyver> The modnr issue with goto is mainly that it's *flexible* and ill-defined.
[19:35:01] <MacGyver> modern*
[19:35:08] <ssbr> bjs: I mean in modern languages that have something like goto, it usually can't e.g. cross function boundaries, or do arbitrary unstructured things, the way he describes
[19:35:14] <bjs> ssbr: our jump instructions are really what he is describing here, and those still exist and he didn't argue for their removal. Simply their non-inclusion in high level languages.
[19:35:17] <grym> i just don't like it when things vanish before my eyes :P
[19:35:17] <MacGyver> You *can* use goto to do error handling. You can also use it to break your program.
[19:35:32] <ssbr> bjs: we still call it "goto", but it isn't the same "goto" that he describes, or that exists in machine code
[19:35:36] <ssbr> you can't "goto 10" in C
[19:35:51] <MacGyver> What Dijkstra is effectively arguing, and what remains true, is that any proper use of goto *should* be promoted to a language feature.
[19:35:55] *** Joins: Barones (~Barones@user/Barones)
[19:35:55] <ssbr> it's much closer to a labeled break or even a function call
[19:36:09] *** Joins: ice9 (~ice9@user/ice9)
[19:36:10] <bjs> ssbr: I'm still not sure why you're saying all this to me.
[19:36:21] *** Quits: ice99 (~ice9@user/ice9) (Read error: Connection reset by peer)
[19:36:23] <bjs> Did you mean to be talking to vanessa
[19:36:39] <ssbr> bjs: I mean you kept saying things, and i kept replying
[19:36:44] <ssbr> was I not supposed to
[19:36:58] <bjs> ssbr: I'm just unsure what point you're trying to make
[19:37:22] <vanessa> ssbr: in what language  you can goto 10 ? is there even a language that exposes virtual address to its users?
[19:37:24] <bjs> That our modern high-level languages do not have unstructured gotos in them? Yes, that's correct.
[19:37:30] <ssbr> bjs: the point is that I don't think it's correct to interpret dijkstra's words relative to a high-level language's goto feature, like C or C++'s goto -- it applies to unstructured assembly goto or BASIC goto
[19:37:50] <ssbr> vanessa: BASIC
[19:38:12] <bjs> ssbr: yes that's precisely what he is saying,  that we do not want these low-level gotos in our high-level languages.  Now where you put C in this mess is up to you, it's clearly somewhere in-between
[19:38:21] <ssbr> bjs: right.
[19:38:21] <bjs> and obviously Dijkstra wasn't going to mention C by name in this memo
[19:38:23] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[19:38:44] <ssbr> it's just that people quote this as a reason not to add a structure whose name is "goto", even if it's very different from what the essay argues against.
[19:39:10] <ssbr> I don't like the essay very much as a result :(
[19:39:10] <bjs> ssbr: okay but the goto vanessa was arguing really *is* unstructured,  because it would jump from the middle of one function far outside of it.
[19:39:19] <ssbr> yes that is bad owie
[19:39:45] <bjs> vanessa: and our modern assembly languages still have jump instructions, and that's fine (and good).
[19:39:59] <vanessa> bjs: then how will you handle exception if you do not jump out of the program controll deep in the stack?
[19:40:15] <bjs> vanessa: I mean, the language does it for you.
[19:40:19] <ssbr> vanessa: under the hood, those use machine jumps or the equivalent, yes. they aren't exposed to users directly, of course.
[19:40:34] <bjs> vanessa: you don't need to explicitly "jump backwards" because we have a `while` loop.
[19:40:34] <vanessa> I did that in C
[19:40:44] <MacGyver> Yes. Because C *lacks an error handling mechanism*.
[19:40:48] <MacGyver> As I already mentioned.
[19:40:50] <ssbr> vanessa: C doesn't have exceptions, with statements, or RAII, so that's no surprise!
[19:41:20] <bjs> vanessa: you can't do this in C,  you're not allowed arbitrary jumps
[19:41:39] <bjs> That's why it has setjmp and longjmp
[19:41:49] <MacGyver> Languages which do, like C++, Java, Python, and a plethora of others, have effectively chosen to create a structured, well-defined mechanism for the same task, which makes writing and reasoning about the code that does that easier.
[19:42:09] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[19:42:31] <MacGyver> Using goto in such a manner is effectively a kludge for something that should've had a better mechanism.
[19:42:37] *** Quits: Kruppt (~Kruppt@50-111-49-4.drhm.nc.frontiernet.net) (Quit: Leaving)
[19:42:39] <MacGyver> Similarly, Java's labeled breaks and continues.
[19:42:51] <vanessa> yes, I am not advocating that we use goto instead of while, if and functions, I am advocating using goto instead of creating stack bloat.
[19:42:54] <MacGyver> Yes, superficially they're like goto.
[19:42:58] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[19:43:03] <bjs> vanessa: what do you mean by "stack bloat"
[19:43:06] <MacGyver> But there's restrictions on them that make them acceptable for that task.
[19:43:36] <vanessa> to write a function and use return as GOTO for breaking out of inner loop
[19:44:03] <bjs> vanessa: if you're inside a single function then there's only 1 stack frame so I'm not sure what the stack bloat is
[19:44:11] <bjs> you can handle an exception in the same call you generate one
[19:44:24] <bjs> so you could implement this with `raise BreakException` and try/except around the outer, if you wanted
[19:44:28] <ssbr> bjs: I think they're saying "where in another language, you could just break out of the loop, in Python, you need to restructure the function so that you can use a `return` statement to do it"
[19:44:35] <ssbr> (or try/except, etc.)
[19:44:48] <ssbr> I like labeled break too, but it's not important very often
[19:45:03] <vanessa> I think stack have a overload and GOTO doesn't.
[19:45:15] <bjs> vanessa: what are you talking about?
[19:45:17] *** Joins: nicode (~nic@2607:f2c0:9541:7100:1164:ccd2:17cc:5d1a)
[19:45:47] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Quit: beli6147)
[19:46:04] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[19:46:20] <vanessa> when you create a function, a new call has to be added on the stack with it's local variables and stuffs. GOTO doesn't do that.
[19:46:33] *** Joins: maxzor_ (~maxzor@2a01cb04054faa0098bd91394fed2f26.ipv6.abo.wanadoo.fr)
[19:46:37] <bjs> vanessa: yes but even in our assembly languages with gotos we still make a stack
[19:46:52] <bjs> infact it's very hard, in general, to write programs that do not have something that looks like a stack
[19:46:56] *** Joins: Emet-Selch (~haise01@user/haise01)
[19:47:13] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:47:28] <vanessa> I am talking about breaking out inner loop in particular: stack vs GOTO.
[19:47:36] <ssbr> vanessa: in Python, function calls are ubiquitous and assumed to be cheap. Even `if my_bool:` is a function call. No point avoiding them or worrying about their efficiency.
[19:47:51] <bjs> vanessa: I'
[19:47:53] <bjs> vanessa: I'm confused
[19:47:54] <ssbr> (well, maybe not `if my_bool:`, depends on interpreter internals. But *definitely* `x + 3`)
[19:48:42] <bjs> vanessa: inside a function call there's a stack frame whether you have goto or not
[19:48:46] *** Quits: JordiGH (~jordi@user/jordigh) (Remote host closed the connection)
[19:48:51] *** Quits: vladoski (~vladoski@93-36-219-239.ip62.fastwebnet.it) (Remote host closed the connection)
[19:49:03] *** Joins: JordiGH (~jordi@fencepost.gnu.org)
[19:49:03] *** Quits: JordiGH (~jordi@fencepost.gnu.org) (Changing host)
[19:49:03] *** Joins: JordiGH (~jordi@user/jordigh)
[19:49:25] <newdimension> Is there a way to pass a variable to logging config file handler? I'm using the dict config version
[19:49:45] <newdimension> Currently I'm defining a file handler for each file location
[19:50:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[19:50:38] *** Quits: p-i- (~Ohmu@mx-ll-183.89.36-208.dynamic.3bb.co.th) (Remote host closed the connection)
[19:51:30] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[19:51:45] <vanessa> bjs, if I want to break out of inner loop, I can either create a function call or use GOTO. for function call I have some overload since a stack has to be created and handled. A goto doesn't need to do that. that doesn't mean I am saying we replace all stacks, while with goto. only that particular case, goto is more elegant
[19:51:48] <bjs> vanessa: exceptions don't add new stack frames or anything,  they're basically implemented with a check-and-goto.  On an exception, check where you need to branch to and set the stack pointer then jump. Exceptions can be (and in Python are) very cheap (compared to the other features of the language that is) as there is relatively little work to do.
[19:52:24] <bjs> vanessa: you can also use exceptions, or re-write your loop to break out of the outer if the inner breaks etc
[19:52:37] <MacGyver> Sorry, just picking up on something vanessa is saying.
[19:52:39] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e2e2:d030:77ec:b316)
[19:52:53] <MacGyver> But do you mean that each function call creates *a stack*?
[19:53:13] <vanessa> MacGyver: doesn't it?
[19:53:18] <bjs> vanessa: labelled breaks, or a very restricted form of goto,  might make it easier yeah.  But certainly Dijkstra wasn't arguing against those,  it was just that Python decided not to
[19:53:22] <bjs> vanessa: no, each call makes a stack *frame*
[19:53:24] <bjs> not a whole stack
[19:53:41] <MacGyver> Not unless you're doing very interesting things with multithreading / multiprocessing and/or asynchronous stuff.
[19:54:08] <MacGyver> But you wouldn't be doing that for restructuring a nested loop to use a return as an inner-loop break.
[19:54:43] <MacGyver> That just adds a stack frame on the existing stack, same as every other function call to get there in the first place.
[19:55:17] <vanessa> wait stack and stack frames are different !
[19:55:59] <vanessa> I have been using stack to refer to what you say stack frame
[19:58:17] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::40) (Ping timeout: 240 seconds)
[19:59:59] *** Joins: ice99 (~ice9@user/ice9)
[20:00:07] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[20:00:17] <vanessa> if they are different what is a stack again? there are processes and which have different address space, there are threads that share some address space. each thread has heaps and stackframes(which I have been calling stack) on top of each other that keep track of function calls. so, what is a stack then?
[20:00:26] *** Joins: kickingvegas (~cchoi@c-67-170-234-150.hsd1.ca.comcast.net)
[20:00:30] <bjs> vanessa: a stack is a collection,  like a list or a queue
[20:00:44] <bjs> and when you are dealing with functions the things in the stack ("on" the stack) are "frames"
[20:00:46] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[20:01:06] *** Joins: humbertowoody (~humbertow@187.202.198.64)
[20:01:24] *** Joins: dtux (~dtux@c-98-207-149-218.hsd1.ca.comcast.net)
[20:03:09] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[20:03:29] *** Joins: harpia (~harpia@2804:2aec:205:4600:1f64:3c12:1a0e:3b09)
[20:03:29] <MacGyver> And, importantly, adding and removing stack frames is cheap. Setting up stacks is not.
[20:03:34] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:03:41] <vanessa> bjs, you mean the call-stack?
[20:03:45] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:03:47] <bjs> vanessa: yes, the call stack is a stack
[20:03:48] <bjs> hence the name :P
[20:04:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:04:47] *** Joins: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de)
[20:04:57] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[20:04:58] *** Joins: luva (~luva@45.141.152.53)
[20:05:01] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[20:05:36] <vanessa> oh. really sorry for the confusion. I thought call-stack=call-stack and stack=stackframe. I probably missed that lecture. I've been using it wrong this entire time.
[20:06:09] <bjs> vanessa: see https://en.wikipedia.org/wiki/Stack_(abstract_data_type)
[20:06:38] <bjs> You can have a stack of integers, or a stack of plates (like in the image on wiki) the call stack is a stack of frames
[20:06:55] <bjs> each frame contains the local variables for the function,  calling a function pushes a frame, returning pops the frame
[20:07:21] *** Joins: maladaptive_75 (~maladapti@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[20:08:51] <vanessa> that was a huge misunderstanding on my part, a ''call stack'' is a stack of function calls made perfect sense to my brain :(
[20:09:00] <bjs> an exception pops stack frames off until it reaches a handler, then continues in that frame from the handler.  Some languages have a handler for the entire frame (I think Ada?) but languages like Python have finer-grained control with some clever logic to jump to the right handler.
[20:10:18] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[20:10:37] *** Quits: sawk (~quassel@5.170.68.34) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:12:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:13:08] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Quit: WeeChat 3.4)
[20:13:19] *** Quits: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de) ()
[20:13:46] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[20:14:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:14:12] *** Joins: sawk (~quassel@5.170.68.34)
[20:14:16] *** Joins: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de)
[20:15:13] *** Quits: vanessa (~vanessa@103.160.128.7) (Quit: WeeChat 3.4)
[20:17:21] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[20:18:59] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[20:19:17] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[20:19:39] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:19:48] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:559:4860:51c2:6b3e) (Read error: Connection reset by peer)
[20:20:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:20:04] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:559:4860:51c2:6b3e)
[20:21:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[20:21:53] *** Quits: l4yer (~l4yer@2001:ac8:31:8900:1012:e31a:385d:4cc5) (Remote host closed the connection)
[20:24:17] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e2e2:d030:77ec:b316) (Ping timeout: 240 seconds)
[20:25:11] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:25:49] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:26:40] *** Quits: magla (~gelignite@d5361383.access.ecotel.net) (Quit: Stay safe!)
[20:27:05] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[20:27:42] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[20:27:53] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[20:28:10] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[20:28:30] *** Quits: esperegu (~quassel@ip-213-124-221-102.ip.prioritytelecom.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:28:35] *** Quits: bluedust_ (~bluedust@59.89.210.27) (Ping timeout: 256 seconds)
[20:28:41] *** Quits: rMdes (~rmdes@my.armada.digital) (Ping timeout: 245 seconds)
[20:29:03] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-00be-7568-6f09-f29d.res6.spectrum.com)
[20:29:28] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[20:29:55] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:29:56] *** Joins: l4yer (~l4yer@2001:ac8:31:8900:1012:1bf5:ba27:3ee)
[20:31:28] *** Quits: ubert (~Thunderbi@p200300ecdf0994a856831da0cd63cc4d.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:32:13] *** Quits: raxor2k (~raxor2k@3.109-247-153.customer.lyse.net) (Ping timeout: 256 seconds)
[20:32:51] *** Joins: han-solo (~han-solo@user/han-solo)
[20:34:00] *** Joins: raxor2k (~raxor2k@3.109-247-153.customer.lyse.net)
[20:34:02] *** Quits: raxor2k (~raxor2k@3.109-247-153.customer.lyse.net) (Remote host closed the connection)
[20:34:13] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[20:34:26] *** Joins: ice9 (~ice9@user/ice9)
[20:34:49] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[20:35:03] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 256 seconds)
[20:35:14] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:35:23] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[20:35:34] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[20:35:37] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (Ping timeout: 240 seconds)
[20:36:04] *** Joins: erein-chan (~Elaine@112.202.227.189)
[20:36:14] *** Joins: mat001 (~mat001@72.28.108.216)
[20:36:31] *** Quits: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[20:36:46] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[20:37:04] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[20:37:29] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[20:37:44] *** Joins: ice9 (~ice9@user/ice9)
[20:38:42] *** Joins: yac (~user@user/yac)
[20:39:13] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:645d:2a7c:96cb:dc8)
[20:39:27] *** Quits: yac (~user@user/yac) (Remote host closed the connection)
[20:40:16] *** Quits: tWqaq_ (~tWqaq@101.93.138.74) (Quit: Leaving)
[20:40:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689)
[20:40:29] *** Quits: erein-chan (~Elaine@112.202.227.189) (Ping timeout: 256 seconds)
[20:40:51] *** Quits: SOMBRIO (~SOMBRIO@177.137.113.73) (Quit: Client closed)
[20:41:05] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[20:41:06] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[20:41:15] *** Joins: hecman (~hecman@207.155.98.24)
[20:41:48] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: Connection reset by peer)
[20:41:51] *** Quits: schumaml (~schumaml@dslb-188-104-168-024.188.104.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:42:23] <sleepingforest> is it realistic to get 100% testing coverage? Im not sure how i would test running uvicorn or running the initialization steps in __name__ == __main__ section (which are a few lines of code only)
[20:42:39] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[20:43:27] *** Joins: Feuermagier_ (~Feuermagi@84.17.48.173)
[20:43:35] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[20:43:46] *** Joins: matsaman (~matsaman@user/matsaman)
[20:44:06] <SnoopJ> sleepingforest, it's possible, but as a goal, a poor fit for most projects
[20:44:21] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[20:44:43] <sleepingforest> ok, so its just ocd
[20:45:28] <hecman> i dont even use tests
[20:45:41] <sco1> Chaos has entered the chat
[20:45:41] <hecman> i have print() during development
[20:45:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 250 seconds)
[20:46:00] <sleepingforest> only development?
[20:46:12] <sleepingforest> why not print in production too :)
[20:46:18] <hecman> well, for logging
[20:46:54] <hecman> only issues i ever have are network issues, or things caused by google or amazon being down :p
[20:47:11] *** Joins: Neoon (~Neoon@2607:5300:60:23a5::1111)
[20:47:14] <Neoon> Hey
[20:47:19] <Neoon> can someone explain me this error?
[20:47:21] <hecman> HOLA!
[20:47:22] <Neoon> https://pastebin.com/raw/7BWBkkfN
[20:47:33] <Neoon> I don't understand it why this works but this not
[20:48:34] <Neoon> I just put the code in a class
[20:48:37] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[20:48:59] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[20:50:41] *** Quits: Liblx (~Alex@2a02:810c:280:59c:397f:f818:af6f:5a2d) (Ping timeout: 256 seconds)
[20:50:50] <MacGyver> Shouldn't that be a def cmd(self, command):?
[20:50:50] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:51:02] *** Joins: cdown_ (~cdown@163.114.131.1)
[20:51:13] <SnoopJ> Neoon, can we see the class?
[20:51:21] <matsaman> Neoon: yeah that's not enough code, really
[20:51:33] <matsaman> one could make an easy guess, but it wouldn't be as accurate
[20:51:39] *** Joins: Liblx (~Alex@2a02:810c:280:59c:397f:f818:af6f:5a2d)
[20:51:46] <SnoopJ> the error is the pickle module telling you that it doesn't know how to pickle the class instance, but you are giving us even less information than you have, so it's hard to tell exactly how it got to that
[20:52:05] *** Joins: WarpedAI (~Warped@user/warped)
[20:52:25] <SnoopJ> Related reference reading: https://docs.python.org/3/library/pickle.html#pickle-inst
[20:52:29] <Neoon> the class is inherited from Base
[20:52:40] <SnoopJ> Can we see it?
[20:52:57] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[20:53:17] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[20:53:20] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 250 seconds)
[20:53:26] <Neoon> https://github.com/Ne00n/latency-geolocator-4550/blob/experimental/Class/base.py and https://github.com/Ne00n/latency-geolocator-4550/blob/experimental/Class/geolocator.py
[20:53:31] <Neoon> I just added the lines mentioned
[20:53:31] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[20:53:45] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[20:53:49] <Neoon> was line 204 geolocator.py
[20:53:49] *** cdown_ is now known as cdown
[20:54:19] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[20:54:40] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[20:54:55] <twainwek> am i supposed to use an assertion library with pytest?
[20:55:12] <twainwek> how can i get things like near(a,b, tolerance) etc
[20:55:35] <The-Compiler> twainwek: assert actual == pytest.approx(expected)
[20:55:37] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[20:55:48] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:56:10] <SnoopJ> which takes optional `rel, abs` arguments to define tolerances
[20:56:14] *** Quits: blddk (~blddk@user/blddk) (Quit: The Lounge - https://thelounge.chat)
[20:56:30] <The-Compiler> twainwek: https://docs.pytest.org/en/7.0.x/reference/reference.html#pytest.approx
[20:56:35] <twainwek> looking, thanks
[20:56:51] <MacGyver> Neoon: Either pastebin the version that's giving you trouble, or at least be clearer about *what* you added, *where*.
[20:56:53] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[20:56:59] <MacGyver> But preferably pastebin the version that's giving you trouble.
[20:57:00] *** Joins: ice9 (~ice9@user/ice9)
[20:57:39] <SnoopJ> if you wrote a minimal example, that should be fine, we just need to see all of the example. I can't tell where in this code you're using a pool, though.
[20:57:45] <MacGyver> I'm still fairly confident the answer is a simple "That's not a class method because you forgot the self".
[20:57:47] <SnoopJ> I guess it's in Base?
[20:58:00] <SnoopJ> MacGyver, the error isn't complaining about that
[20:58:27] <MacGyver> No, it's not, but self.cmd isn't valid either like this.
[20:58:31] <cyphase> am i missing it, or is there no good library for reading, manipulating, and writing svg files?
[20:58:51] <SnoopJ> MacGyver, it looks fine in their 'real' code, I do not think this is the problem: https://github.com/Ne00n/latency-geolocator-4550/blob/experimental/Class/base.py#L5-L7
[20:58:54] <MacGyver> So I'm not exactly willing to dive into the error if there's this obvious things staring me in the face.
[20:59:03] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[20:59:27] <SnoopJ> it seems to be some kind of problem with figuring out the state of the instance, but this is a little beyond my knowledge of pickle
[20:59:58] *** Joins: novns (~novns@user/novns)
[21:00:01] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[21:00:06] <sleepingforest> i think SnoopJ is correct, you may need to write your own __getstate__ and __setstate__ functions
[21:00:16] *** Quits: someuser (~user@197.54.43.98) (Ping timeout: 250 seconds)
[21:00:34] <Neoon> https://pastebin.com/raw/MJXj7r9C that's all I had modified in my class
[21:00:36] *** Joins: blddk (~blddk@user/blddk)
[21:00:43] <SnoopJ> point of clarification: I'm not saying you need to do that, I can't really tell what's wrong. It *might* be necessary
[21:01:17] <Neoon> https://pastebin.com/raw/tbKeyErn
[21:01:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:01:35] *** v- is now known as vaio
[21:02:19] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[21:02:25] *** Quits: blddk (~blddk@user/blddk) (Client Quit)
[21:02:39] <Neoon> well I have been told that I should use pools instead of queues
[21:02:45] <Neoon> since they are a pain in the arse
[21:02:48] <Neoon> turns out pools are worse
[21:02:50] <sleepingforest> is pyasn / sqlite3 pickle-able?
[21:03:05] <Neoon> why?
[21:03:20] <Neoon> it just runs a ping with a few IP's
[21:03:24] <Neoon> it does not access sqlite
[21:03:28] <Neoon> nor pyasn
[21:03:36] <Neoon> and yes it does run already in a thread
[21:03:40] <Neoon> maybe thats the main cause
[21:03:51] <Neoon> thread in thread did worked fine tho
[21:04:34] <hecman> port it to twisted i my advice lol
[21:04:35] *** Quits: sawk (~quassel@5.170.68.34) (Remote host closed the connection)
[21:05:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:05:27] *** Quits: Liblx (~Alex@2a02:810c:280:59c:397f:f818:af6f:5a2d) (Ping timeout: 250 seconds)
[21:05:44] *** Quits: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de) ()
[21:05:59] <Neoon> well fuck it, I am going to use queues again
[21:06:02] *** Joins: Liblx (~Alex@2a02:810c:280:59c:397f:f818:af6f:5a2d)
[21:06:08] <SnoopJ> Neoon, does this SSCCE reproduce the problem? If not, can you modify it until it does? https://bpa.st/46UQ
[21:06:29] <Neoon> lemme try
[21:07:11] <Neoon> that seems to work fine
[21:07:14] <SnoopJ> It seems to work but it's a useful starting point for whittling this failure down to something that can be understood
[21:07:33] <hecman> seems it is def cmd(self,...
[21:07:46] <SnoopJ> hecman, no
[21:08:10] <hecman> def cmd(self, command):
[21:08:12] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[21:08:12] <hecman> SEEMS IT IS
[21:08:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[21:08:39] <sleepingforest> if you went from pool.map(worker.. ) to pool.map(self.cmd..) i would say pickle does not know how to serialize some class members
[21:08:51] <SnoopJ> hecman, no, it really isn't, it produces an entirely separate error if `self` isn't present: https://bpa.st/7YLA
[21:09:16] <hecman> oh my
[21:10:26] *** Joins: junebug (~junebug@2600:1700:3db0:2540:7cc6:c8a3:cf2c:c4f6)
[21:11:02] *** Joins: blddk (~blddk@user/blddk)
[21:12:27] *** Joins: Soni (~quassel@autistic.space)
[21:12:31] <MacGyver> Considering what cmd is doing here, I'd possibly opt for making that a function not bound to an object.
[21:12:55] <MacGyver> Unless you're planning to add lots of instance-based complexity later.
[21:13:28] <MacGyver> But effectively it's just a dispatch method for subprocess but the way you're using it looks like it might be forcing pickling of its enclosing instance and ... well, that's failing?
[21:13:32] <SnoopJ> hmm, well it isn't the sqlite3 connection stored on the class. Nothing in the class or the base class sticks out to me as something pickle would choke on, though.
[21:13:37] *** Joins: kosh (~kosh@user/kosh)
[21:14:09] <hecman> hmm
[21:14:24] <sleepingforest> nah there is something pickle is choking on, that error message is just that
[21:14:39] <SnoopJ> I think we're all in agreement about that
[21:15:27] *** Joins: blddk8 (~blddk@user/blddk)
[21:15:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:15:57] *** Quits: bytehackr (~Sandipan@45.249.73.198) (Ping timeout: 240 seconds)
[21:16:57] *** Quits: blddk (~blddk@user/blddk) (Ping timeout: 240 seconds)
[21:16:57] *** blddk8 is now known as blddk
[21:17:15] <Neoon> I made the function static, it looks like its happy now
[21:17:29] *** Quits: blddk (~blddk@user/blddk) (Client Quit)
[21:18:10] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[21:18:33] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:19:55] *** Joins: blddk8 (~blddk@user/blddk)
[21:20:43] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:20:56] *** hecman is now known as slackware15
[21:20:57] *** Quits: kujo (~kujo@188.166.12.52) (Ping timeout: 256 seconds)
[21:21:46] <SnoopJ> setuptools question: extras can't define optional internal packages, right? I am trying to quarantine some optional dependencies and think I might be stuck writing internal packages that `try: import optional_dep; _HAVE_OPTIONAL_DEP = True;; except ImportError: _HAVE_OPTIONAL_DEP = False` or somesuch..
[21:22:24] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:22:52] *** Joins: kujo (~kujo@188.166.12.52)
[21:23:08] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[21:23:14] *** lola is now known as relativism
[21:23:59] *** relativism is now known as lola
[21:26:05] <Neoon> MacGyver, SnoopJ thanks
[21:27:09] *** Joins: PsyStemUpdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[21:27:17] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 240 seconds)
[21:29:35] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:29:43] *** Joins: Naan (~Naan@user/naan)
[21:29:48] *** Joins: mickey8 (~user@user/mickey)
[21:30:15] <sleepingforest> SnoopJ: do you think the error above was due to a non-thread safe instance in the class since its an UnpicklingError and multiprocess pools are over threads?
[21:31:00] *** Joins: dreamon (~dreamon@p54b14d36.dip0.t-ipconnect.de)
[21:31:14] <SnoopJ> sleepingforest, I have really no clue. Just going off the error it *looks* like something was successfully serialized, but couldn't be *de*serialized. I don't know how that could happen here.
[21:31:22] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[21:32:12] *** Joins: funhouse (~funhouse@user/funhouse)
[21:32:15] *** Joins: bloody (~bloody@user/bloody)
[21:32:19] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:32:36] *** Quits: bloody (~bloody@user/bloody) (Client Quit)
[21:32:45] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[21:32:46] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[21:32:58] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e3:76f:559:4860:51c2:6b3e)
[21:33:21] *** Joins: zuhkov (~duycop@14.166.144.253)
[21:33:34] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[21:34:11] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[21:34:34] *** Joins: bloody (~bloody@user/bloody)
[21:36:01] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fa:4cc7:559:4860:51c2:6b3e) (Ping timeout: 256 seconds)
[21:38:00] *** Joins: lidless (anon@user/lidless)
[21:38:17] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:41:13] *** Joins: ice9 (~ice9@user/ice9)
[21:41:42] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[21:41:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[21:42:26] *** Parts: lxwulf (~lxwulf@user/lxwulf) (Leaving)
[21:42:30] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[21:42:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:42:55] *** blddk8 is now known as blddk
[21:44:11] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 256 seconds)
[21:44:12] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[21:44:29] *** Joins: lidless_ (~lidless@user/lidless)
[21:44:39] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[21:44:45] *** Quits: lidless (anon@user/lidless) (Ping timeout: 256 seconds)
[21:45:48] *** lidless_ is now known as lidless
[21:45:48] *** Quits: Liblx (~Alex@2a02:810c:280:59c:397f:f818:af6f:5a2d) (Quit: Leaving)
[21:46:12] *** Joins: ice9 (~ice9@user/ice9)
[21:47:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:48:11] *** Quits: ice9 (~ice9@user/ice9) (Read error: Connection reset by peer)
[21:48:20] *** Joins: ice99 (~ice9@user/ice9)
[21:48:57] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 240 seconds)
[21:49:58] *** Joins: bluedust (~bluedust@117.193.122.44)
[21:50:08] *** Joins: mickey8 (~user@user/mickey)
[21:50:44] *** Quits: darksun (~darksun@user/darksun) (Quit: Lost terminal)
[21:50:56] *** Joins: M3RELATIVISM[m] (~irelativi@2001:470:69fc:105::1:741f)
[21:51:00] *** Parts: zuhkov (~duycop@14.166.144.253) ()
[21:51:56] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[21:52:25] *** Joins: ajnulo (~ajnulo@2a02:3102:4cc5:fffd:bd3:1db6:a16d:5acd)
[21:53:27] *** Quits: bluedust (~bluedust@117.193.122.44) (Remote host closed the connection)
[21:53:37] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[21:53:39] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[21:54:11] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Quit: WeeChat 3.4)
[21:56:05] *** Joins: kosh (~kosh@user/kosh)
[21:56:33] <jiffe> is there a magic class function to catch boolean tests such as `inst = Class(); if inst:` to make that evaluate to false ?
[21:57:59] <SnoopJ> jiffe, can you elaborate on what "catch boolean test" means?
[21:58:14] <SnoopJ> you can define __bool__() on the class to turn instances into booleans in general
[21:59:20] *** Quits: trace987 (~trace@ip5b42976d.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:00:17] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 256 seconds)
[22:00:54] <jiffe> SnoopJ: yup that is what I am looking for, thanks
[22:01:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:02:54] *** Quits: lidless (~lidless@user/lidless) ()
[22:02:58] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[22:04:56] *** Joins: p-i- (~Ohmu@2403:6200:8978:7ad7:d1c7:ded6:188d:580e)
[22:05:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:07:26] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[22:07:50] *** Quits: mattfoxxx (~mattfoxxx@200116b82279760065f54d6a36d41c11.dip.versatel-1u1.de) (Quit: WeeChat 3.4)
[22:08:07] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[22:08:38] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-66.range86-160.btcentralplus.com)
[22:09:39] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[22:10:14] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[22:10:22] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64)
[22:10:22] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64) (Changing host)
[22:10:22] *** Joins: skapata (~Skapata@user/skapata)
[22:13:59] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 256 seconds)
[22:14:57] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 240 seconds)
[22:15:28] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[22:16:16] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:17:57] *** Joins: Polyblank (~Polyblank@user/polyblank)
[22:18:21] *** Joins: saline_retry_ (auk@gateway/vpn/protonvpn/auk)
[22:18:32] *** Joins: sandb0y (~pirate@user/sandb0y)
[22:18:59] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[22:19:53] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Ping timeout: 256 seconds)
[22:20:04] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:20:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[22:20:42] *** Quits: junebug (~junebug@2600:1700:3db0:2540:7cc6:c8a3:cf2c:c4f6) (Quit: Leaving)
[22:21:36] *** Quits: Polyblank (~Polyblank@user/polyblank) (Quit: Leaving)
[22:22:06] *** Joins: Polyblank (~Polyblank@user/polyblank)
[22:23:01] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 250 seconds)
[22:23:39] *** Joins: goldfish (~goldfish@user/goldfish)
[22:23:52] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[22:26:48] *** Joins: newpy (~newpy@2601:280:4381:1390:8d06:414:95a4:85bf)
[22:26:58] *** Joins: Stenean (~Stenean@cpc83665-brig20-2-0-cust104.3-3.cable.virginm.net)
[22:27:05] *** Joins: csm3105 (~csm3105@31.177.99.29)
[22:27:33] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e3:76f:559:4860:51c2:6b3e) (Ping timeout: 250 seconds)
[22:27:51] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 245 seconds)
[22:28:34] *** Quits: tofran (~tofran@bl15-47-228.dsl.telepac.pt) (Read error: Connection reset by peer)
[22:28:52] *** Joins: vurr (~seymon@82.131.10.22.cable.starman.ee)
[22:32:29] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:32:53] *** Quits: VinnySauce (~james@user/vinnysauce) (Quit: WeeChat 3.4)
[22:32:57] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[22:33:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:33:52] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:78:d033:7f28:3acb) (Ping timeout: 250 seconds)
[22:34:10] *** Quits: Polyblank (~Polyblank@user/polyblank) (Quit: Leaving)
[22:35:36] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 250 seconds)
[22:35:59] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[22:36:03] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.4)
[22:36:36] *** Joins: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de)
[22:38:57] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[22:39:08] *** Joins: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[22:41:12] *** Joins: Harlin_ (~DonQixote@75-163-136-96.clsp.qwest.net)
[22:43:38] *** Quits: lakrass (~lakrass@user/lakrass) (Quit: WeeChat 3.4)
[22:43:41] *** Quits: Harlin (~DonQixote@75-163-148-159.clsp.qwest.net) (Ping timeout: 256 seconds)
[22:44:26] *** Quits: drvanon (~drvanon@81.89.199.26) (Quit: Client closed)
[22:45:22] *** Joins: crashrep (~crashrep@user/crashrep)
[22:47:07] *** Quits: ajnulo (~ajnulo@2a02:3102:4cc5:fffd:bd3:1db6:a16d:5acd) (Remote host closed the connection)
[22:47:14] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 252 seconds)
[22:47:44] *** Joins: kts_ (~kts@103.73.237.127)
[22:47:47] *** Quits: csm3105 (~csm3105@31.177.99.29) (Quit: Leaving)
[22:48:13] *** Quits: kts (~kts@103.73.237.5) (Ping timeout: 256 seconds)
[22:48:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[22:51:02] *** Quits: ckdCreations (~ckdCreati@147.55.133.129) (Quit: Leaving)
[22:51:03] <admin123> how do you call a method from a class you are subclassing? https://dpaste.org/EpOa
[22:51:51] *** Joins: schumaml (~schumaml@p200300e2ef02330053c1821a43d17d29.dip0.t-ipconnect.de)
[22:51:58] <bjs> admin123: did y ou mean super().allocate(hostType) ?
[22:52:11] <bjs> admin123: your actual code looks like it has something similar to that, but your error message implies the code you ran didn't
[22:52:15] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:53:35] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[22:53:54] *** Joins: eyepeetee (~aa@024-151-038-076.res.spectrum.com)
[22:54:03] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[22:54:37] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[22:55:21] *** Joins: emf (~emf@162.218.217.190)
[22:55:30] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[22:56:35] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 252 seconds)
[22:57:01] *** PublicWifi is now known as nou
[22:57:31] *** nou is now known as PublicWiFi
[22:57:37] *** Quits: Esexe_ (~aa@024-151-038-076.res.spectrum.com) (Ping timeout: 256 seconds)
[22:57:54] *** gentooclimax is now known as climax
[22:58:25] *** Quits: pro_z_ (~pro_z@37.214.83.4) (Ping timeout: 256 seconds)
[22:58:37] *** Joins: freefall (~owner@2600:6c40:1600:39ec:5d76:cad6:c1ff:993d)
[22:58:49] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[22:59:07] *** Joins: emf_ (~emf@2620:10d:c090:400::5:9a32)
[22:59:34] <freefall> Repiphany, if your on i want to say thank you so much for help me about 12hrs ago.. the class way works so much better
[22:59:52] *** Quits: emf (~emf@162.218.217.190) (Ping timeout: 250 seconds)
[23:00:16] *** Joins: vicfred (~vicfred@user/vicfred)
[23:00:33] *** saline_retry_ is now known as auk
[23:00:58] *** Joins: panella32 (~panella32@92.119.19.155)
[23:01:04] *** Joins: newpy_ (~newpy@2601:280:4381:1390:688f:d566:6b05:3e4b)
[23:01:34] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[23:02:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:03:22] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:03:24] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[23:03:43] *** Joins: aw1231 (~alan@155.58.3.30)
[23:03:56] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[23:04:33] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:04:43] *** Quits: ChrisWarrick (kwpolska@user/kwpolska) (Quit: Rebooting!)
[23:04:50] *** Quits: newpy (~newpy@2601:280:4381:1390:8d06:414:95a4:85bf) (Ping timeout: 252 seconds)
[23:04:54] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:05:37] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[23:05:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:05:58] *** Joins: Soni (~quassel@autistic.space)
[23:06:36] *** Quits: greedom (~greedom@p200300de670cc900c869bde1e7c9d04d.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:07:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:08:11] *** Joins: f1se4 (~f1se4@213.195.113.45)
[23:08:38] *** Quits: kts_ (~kts@103.73.237.127) (Quit: Konversation terminated!)
[23:09:03] *** climax is now known as gentooclimax
[23:09:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:09:41] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[23:09:59] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[23:10:51] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[23:12:11] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:12:50] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Quit: Leaving)
[23:12:52] *** Quits: newpy_ (~newpy@2601:280:4381:1390:688f:d566:6b05:3e4b) (Quit: Leaving)
[23:14:31] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 256 seconds)
[23:15:33] *** Joins: ChrisWarrick (kwpolska@user/kwpolska)
[23:15:50] *** Joins: humbertowoody (~humbertow@187.202.198.64)
[23:17:26] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 245 seconds)
[23:17:42] *** Quits: ice99 (~ice9@user/ice9) (Remote host closed the connection)
[23:17:48] *** Joins: alnr (~alnr@38.125.204.99)
[23:17:51] *** Joins: ice99 (~ice9@user/ice9)
[23:18:45] *** Quits: Vision (~Vision@097-087-115-181.res.spectrum.com) (Read error: Connection reset by peer)
[23:18:59] <alnr> within an except block does a variable assignment bind to the out scope? was there any change to this in 3.9+
[23:19:08] *** Joins: Vision (~Vision@097-087-115-181.res.spectrum.com)
[23:19:39] <altendky> alnr: `try`/`except` blocks do not create scope, no.  other than maybe the `except Exception as e:` assignment to `e` i think.  let me check.
[23:19:48] <bjs> alnr: there is no "outer" scope, try/except doesn't introduce scope, and afaik this didn't change in 3.9
[23:20:12] <bjs> alnr: but this does sound like a "I have a specific problem in this code I'm looking at" kind of question, and often it's easier just to share the code and any errors as we can explain those directly
[23:20:13] <altendky> yeah, `e` isn't available after.  you have to `x = e` inside if you want that.
[23:20:45] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Ping timeout: 256 seconds)
[23:21:59] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[23:22:08] *** Joins: rwbrambler (~Thunderbi@65.183.138.202)
[23:22:28] *** Joins: ice9 (~ice9@user/ice9)
[23:22:42] *** Joins: parv (~quass@user/parv)
[23:23:01] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[23:23:07] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[23:23:27] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Ping timeout: 268 seconds)
[23:23:42] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 250 seconds)
[23:24:09] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[23:24:23] *** Joins: duds- (~duds-@user/duds)
[23:24:33] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc) (Ping timeout: 250 seconds)
[23:24:36] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[23:25:00] *** Joins: Betal (~Betal@user/betal)
[23:25:39] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[23:27:47] <aphysically> somewhat technical question, sorry:
[23:28:24] <aphysically> what is is run when I do class A(otheritem): pass
[23:28:46] <aphysically> I'm trying to make sense of a testcase in cpython
[23:28:55] <bjs> aphysically: answers can be at very many levels here
[23:28:59] <aphysically> where otheritem is an instance of a particular class
[23:29:08] <bjs> aphysically: I guess, let's start with "it makes a class called 'A' with an otheritem base"
[23:29:31] <aphysically> in particular, somehow a particular method got called in typing.py and I have no idea how it happened
[23:29:33] <bjs> aphysically: well everything in Python is an instance of a particular class
[23:29:44] <bjs> aphysically: which particular class are you thinking of?
[23:29:59] <aphysically> I will link you the exact testcase one moment
[23:30:49] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc)
[23:30:53] <aphysically> bjs: https://github.com/python/cpython/blob/bf95ff91f2c1fc5a57190491f9ccdc63458b089e/Lib/test/test_typing.py#L227-L230
[23:30:59] <aphysically> this fails because.... one moment
[23:31:20] <aphysically> it fails this check https://github.com/python/cpython/blob/bf95ff91f2c1fc5a57190491f9ccdc63458b089e/Lib/typing.py#L183
[23:31:55] <aphysically> but it's *not* that check that gets run like if you did TypeVar('T') naked in the wild, that would pass fine: https://github.com/python/cpython/blob/bf95ff91f2c1fc5a57190491f9ccdc63458b089e/Lib/typing.py#L763
[23:31:58] <aphysically> because that's perfectly valid
[23:32:16] <aphysically> so I'm trying to understand what happens at runtime to reach that code when that class is initialized
[23:32:30] <alnr> altendky, i'm checking if i have an obscure case because the variable is passed as an argument, its referenced in try clause, the except clause assigns to it and the try block is repeated
[23:33:08] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[23:33:13] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[23:33:21] <alnr> which ofc is kind of smelly
[23:33:22] <aphysically> if you remove that callable() check I linked you that testcase no longer raises and the test starts failing
[23:33:28] *** Quits: Masterphi (~Masterphi@user/masterphi) (Quit: Masterphi)
[23:33:37] <altendky> alnr: sounds fishy.  yeah.  can you share code?  https://bpa.st/+python
[23:34:09] <altendky> alnr: might just be running into reference before assignment.  i guess https://bpa.st/+pytb+python would be better with the output first
[23:36:29] *** Joins: humbertowoody (~humbertow@187.202.198.64)
[23:36:38] <aphysically> bjs: so it should be about whatever runtime code is getting called on the subclass/base during the creation of the class itself, but I don't really understand what's happening
[23:37:02] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Remote host closed the connection)
[23:38:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689) (Ping timeout: 256 seconds)
[23:38:36] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:85dd:181d:cfcf:3433)
[23:39:18] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e3:76f:559:4860:51c2:6b3e)
[23:39:29] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[23:40:12] *** Joins: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14)
[23:41:02] *** Quits: humbertowoody (~humbertow@187.202.198.64) (Ping timeout: 250 seconds)
[23:41:39] <bjs> aphysically: I see
[23:41:41] <stewie925> how do we run isna() on a specific row, instead of a column>
[23:42:02] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[23:42:06] <stewie925> on a pandas dataframe
[23:42:23] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc) (Ping timeout: 256 seconds)
[23:42:47] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[23:42:59] <mefistofeles> stewie925: I guess you could transpose the dataframe, that's an option
[23:43:16] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:43:29] <stewie925> mefistofeles: ahh, so there is no direct way to do this...
[23:43:37] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e3:76f:559:4860:51c2:6b3e) (Ping timeout: 250 seconds)
[23:43:37] <bjs> aphysically: I'm kind of confused at what's going on here, I don't think TypeVar is doing anything particularly weird
[23:43:51] <sco1> Why can't you use iloc?
[23:44:10] <mefistofeles> sco1: actually yes, that works better
[23:44:29] *** Quits: mekhami (~mekhami@2605:a601:aaf2:ef00:deb:a9dc:ee58:aa14) (Ping timeout: 250 seconds)
[23:45:02] <aphysically> I'm confused as well :) See also _Final that TypeVar subclasses that prohibits subclassing, but I think that applies to the naked version (and for sure isn't what's being tested in the testcase, after all changing the callable() check means it no longer raises the TypeError)
[23:45:10] <SnoopJ> stewie925, `df.loc[row, :].isna()` ?
[23:45:15] <aphysically> naked (non-instance)
[23:45:25] <stewie925> sco1: OMG, thanks!
[23:45:27] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 256 seconds)
[23:45:33] <stewie925> SnoopJ: thank you!!!
[23:45:36] *** Joins: lakrass (~lakrass@user/lakrass)
[23:45:49] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[23:45:50] <SnoopJ> stewie925, I don't know if there's a better spelling, but that's the one that comes immediately to mind
[23:46:18] <stewie925> SnoopJ, you gave me some ideas,  that is already very helpful :)
[23:46:27] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[23:46:44] *** SallyAhaj_ is now known as SallyAhaj
[23:47:17] <SnoopJ> stewie925, you always end up back at the basic indexing idioms in my experience, a lot of questions reduce to "how do I build the Series I want to call somemethod() on"
[23:47:46] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:48:00] * stewie925 agrees with SnoopJ
[23:48:39] <stewie925> been learning pandas this week, and making some notes to save to Github
[23:49:35] <SnoopJ> stewie925, if you haven't yet read it, I strongly recommend the indexing part of the user guide: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html
[23:49:49] <SnoopJ> It's a *lot* of information but just like in numpy, indexing is almost everything
[23:50:05] <mefistofeles> I also recommend Jake Vanderplas data science handbook
[23:50:08] <mefistofeles> for this
[23:50:08] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[23:50:10] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:50:10] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[23:50:44] <SnoopJ> hard to go wrong with anything by him, really :)
[23:51:04] *** Joins: brabrax (~brabrax@user/brabrax)
[23:51:05] <bjs> aphysically: https://bpa.st/SGEQ
[23:51:17] *** Joins: dme86 (~dan@user/dan86)
[23:51:20] <stewie925> thank you guys!!!
[23:51:29] *** Joins: califax (~califax@user/califx)
[23:52:41] <stewie925> I'd like to get python jobs that use pandas
[23:52:46] *** Quits: akk (~akk@75-161-95-245.albq.qwest.net) (Quit: +++)
[23:53:04] <stewie925> so I am focusing on pandas (and I think I should do numpy as well)
[23:53:45] <aphysically> bjs: okay, so extra arguments are getting passed to the b __init__ constructor somehow on class creation, that explains where _type_check gets called, but not why this is happening in the first place(????)
[23:54:15] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[23:54:17] <SnoopJ> stewie925, I'm very biased, but I would say numpy is substantially simpler
[23:54:19] *** Joins: akk (~akk@75-161-95-245.albq.qwest.net)
[23:54:44] <bjs> aphysically: interesting if I manually create the class type("D", (b,), {}) I get the error I expected
[23:54:47] <SnoopJ> it also does a lot less, but a surprising amount of stuff people use pandas for can be done with just numpy instead of all the stuff pandas stacks on top of it
[23:54:53] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 252 seconds)
[23:55:10] <stewie925> SnoopJ: I  didnt know that - then i should really need to learn numpy after I am done with Pandas
[23:55:28] <bjs> aphysically: and why metaclass=type changes the answer,  something funky is going on. Let me check bugs.python.org/
[23:55:34] <aphysically> bjs: either way I'm 95% sure this cpython test isn't testing what they thought it was
[23:55:46] <aphysically> but yeah, let me know what you find
[23:56:07] <stewie925> SnoopJ:  I was in a python interview once, and I was asking the interviewer if they were using pandas in their job -  he said pandas is slow
[23:56:13] *** Quits: zamba (~marius@5.226.162.54) (Ping timeout: 256 seconds)
[23:56:24] <SnoopJ> stewie925, the upshot is that since pandas is built on top of numpy, if you learn one, you have some knowledge about how the other one works
[23:56:27] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[23:56:47] <stewie925> SnoopJ: I should have asked the interviewer if they use numpy
[23:57:14] <SnoopJ> stewie925, in my experience, pandas code can be fast, slow, or in-between. It's easy to write code that goes slow if you don't know how the indexing works (because you might make copies all over the place, and copying is s l o w)
[23:57:36] <Repiphany> I
[23:57:36] <SnoopJ> the main offender: if you see apply(), that code is probably slower than it could be
[23:58:13] <bjs> aphysically: I do dislike pinging people but I do wish Yhg1s were here. I'm sure I recall something about non-{class object} bases, but at the moment it seems mysterious (but I'm not yet ready to say buggy...)
[23:58:35] <altendky> i'm working on a context manager to make 'proper' db locking and transactions easier.  in the future there may be a version that creates connections instead of locking.  it should be able to nest with inner uses being no-ops.  already have this working with a contextvar.  i also want it to _not_ propagate it's value to new asyncio tasks.  new tasks should have the default value so i can force them to acquire the lock instead of
[23:58:36] <altendky> interleaving with any outer uses.  anyone know how to make a contextvar not propagate to new tasks?  or do i just have to code up task id tracking.  https://bpa.st/GOCA
[23:58:43] <stewie925> SnoopJ: I just went through the apply() lesson lesson
[23:59:01] * SnoopJ does not like apply()
[23:59:20] <stewie925> SnoopJ: what do you use in place of apply()?
[23:59:54] <SnoopJ> stewie925, I don't use pandas very often, but if I ever found myself with something that could *only* be done with apply(), I would probably wonder why I need pandas for it at all, since it's basically a for loop.
