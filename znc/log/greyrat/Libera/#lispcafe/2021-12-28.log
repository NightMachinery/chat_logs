[00:29:57] <Gnuxie> selwyn: brilliant, will watch after tea 
[00:30:06] <pl> ck_: consider this - 99% of food we eat is genetically modified, a lot of it we couldn't eat otherwise
[00:30:13] <Gnuxie> Whole family is gonna be in for it now 
[00:30:58] <pl> The closest thing I've been to unmodified food I think was when at military party they brought in wild boar
[00:33:45] <selwyn> the arxiv preprint submission involves simply running hdfplatex twice in order to fix the references
[00:38:19] <White_Flame> pl: people tend to distinguish focused breeding from direct genetic manipulation; I kind of doubt it's 99% for the latter
[00:38:43] <pl> White_Flame: I call the former "shotgun genetic manipulation"
[00:39:21] <pl> much less stable and sometimes you lose the whole phenotype across the world in few years due to overspecialization thanks to shitty methods
[00:39:52] <MichaelRaskin> I think «shotgun genetic manipulation» was irradiating seeds of crops then selecting among those
[00:40:30] <MichaelRaskin> (yep, this has happened and people generally don't try to find descendant lines of those out and declare them GMO)
[00:42:39] <White_Flame> well, monoculture from any source is going to be fragile
[00:43:13] <ck_> pl: I know, and if you count selective breeding (if that's the term for agriculture as well), it's probably even closer to 100%. The graph I posted, I posted only for the ownership structure
[00:43:49] <ck_> oh, White_Flame already said that, sorry
[00:44:38] <pl> MichaelRaskin: irradiation was somewhat more conscious effort than the random stumbling we like to sweep under the cover of "directed breeding"
[00:44:52] <White_Flame> it's kind of funny, the industry selects for the best-looking, best-tasting stuff... then picks it early and ships it unripe
[00:45:32] <ck_> too much doom and gloom for me right now. I already know everything sucks and I'm just waiting for my time to expire
[00:45:33] <MichaelRaskin> pl: sure, but it also carried a chance of creating something that would definitely not exist on its own
[00:45:33] <White_Flame> vs if you had a lower "quality" and larger variation, but had it fresher, it'd probably still taste better
[00:47:16] <MichaelRaskin> When did industry start selecting for _best-tasting_ and not _best-looking_?
[00:47:58] <pl> Consumers select for best looking, so best looking wins. I think one of the best known cases is with apple cultivars
[00:48:06] <MichaelRaskin> OK, regionally local apple suppliers might care about repeat business. But they are also better on freshness
[00:48:11] <selwyn> depends heavily on culture though
[00:49:34] <pl> MichaelRaskin: local culture impacts apple cultivar selection a lot, due to local recipes, but apples bought for just eating in USA iirc ended up winning on looks alone
[00:50:34] <selwyn> in some places, different banana species are sold, which taste much better than the standard cultivar, which itself cannot be found
[00:50:44] <selwyn> but it would be very difficult to market and sell them in western europe
[00:51:11] <MichaelRaskin> There is the lemon effect, too: I guess people who seek out specifically locatable and reachable sources of apples (and pay premium for that…) have some chance to learn which has which taste and hope to get some use out of that knowledge later…
[00:51:35] <gilberth> The source code of LISP I is available, right? I wonder if the GC was precise, as it sticked raw words into CAR cells. But the manual also mentions some tag bits being present in the 36-bit words. There would be room as pointers were just 15 bit wide. Six spare bits to play with.
[00:52:22] <pl> as for selection for best looking - there's also selection for most organic bull shit, and after experimenting with different carrots on that spectrum I'll stick with industrial best looking :P
[00:52:33] <gilberth> But: It mentioned putting six characters into a word, which would leave no room for tag bits.
[00:53:14] <White_Flame> and why are all our carrots orange? :(
[00:53:33] <pl> White_Flame: because dutch went overboard
[00:54:38] <gilberth> Why are all our tomatoes red? There are yellow tomatoes, too. My local grocery store sold them for a brief period of time. I guess, nobody bought those.
[00:54:48] <selwyn> well, not all tomatoes are red then
[00:55:15] <gilberth> The ones you find at the grocery store are.
[00:56:08] <selwyn> perhaps people expect red tomatoes, because that is what they are sold
[00:56:37] <selwyn> different coloured ones are a novelty, which can help them sell in certain circumstances, but mean they may not be trusted as a staple
[00:57:32] <gilberth> Novelty? Rather something old, that people are not used to.
[00:57:36] <pl> Also, if you're not sure, the red of the most common cultivar helps track how ripe it is
[00:57:55] <pl> gilberth: if it's not remembered, then it's novelty when it's reintroduced
[00:58:31] <MichaelRaskin> most of the «new» is well-forgotten old anyway
[00:58:42] <gilberth> Sure. Anyhow, I liked the yellow ones for some change.
[00:59:44] <gilberth> pl: btw I judge the quality of tomatoes by how they smell, not by the red they have.
[01:00:02] <selwyn> which country has the least superficial tastes?
[01:00:10] <pl> gilberth: interesting. They all smell the same to me, and are anyway useless unless processed
[01:00:50] <MichaelRaskin> That might also be a function of what tomatoes are available around you
[01:01:26] <gilberth> pl: The good ones, which have actual taste, have the distinctive tomato smell.
[01:02:07] <pl> MichaelRaskin: Tomatoes in general have quality that is incompatible with my taste when raw, even the ones consider higher quality
[01:02:08] <gilberth> The others with just look nice and almost perfect, have no taste at all.
[01:02:15] <pl> too "watery"
[01:02:26] <gilberth> Yep.
[01:02:29] <pl> I'm good with tomato sauces and the like
[01:02:52] <pl> but even highest quality tomato is too watery for me and triggers automatic bad response
[01:03:06] <gilberth> Well, I don't particular like tomatoes in general.
[01:03:47] <gilberth> pl: Try the small ones called "Cherry Tomatoes" here.
[01:04:52] <selwyn> not easy to find good tomatoes here
[01:05:00] <selwyn> wish i lived in california/southern europe
[01:05:16] <pl> once tomato is turned into passata or similar, it becomes useful for me, so...
[01:05:21] <pl> gilberth: those don't work for me either
[01:05:41] <selwyn> its well established that tomatoes develop their taste during cooking, you are not alone
[01:05:44] <pl> also, I've actually suffered a tomato mist in the past, so tomato "smell" is probably off putting
[01:06:07] <selwyn> tomato mist?
[01:06:42] <pl> selwyn: mother got a good deal on tomatoes from local farmer, ended up buying huge amounts and turning it into passata
[01:06:46] <gilberth> Well, as I said, I am not into the tomato taste. The more concentrated by cooking and removing water, the less I like it.
[01:06:53] <pl> ... unfortunately it resulted in palpable tomato mist in the house
[01:07:09] <selwyn> oh dear
[01:07:18] <selwyn> gilberth: there's other things that happen besides the concentration
[01:08:04] <gilberth> Oh dear. My cousin is allergic to vegetables. Whenever I prepare onions or cabbage in particular, I need to close the kitchen door because of the "smell".
[01:08:08] <MichaelRaskin> pl: was a pressure cooker involved?
[01:08:29] <pl> MichaelRaskin: unfortunately, not
[01:08:34] <gilberth> selwyn: I am aware. I just don't like that taste.
[01:08:57] <pl> MichaelRaskin: just huge pots with slowly cooking tomato
[01:09:07] <pl> and probably some mincing done beforehand
[01:09:15] <pl> kitchen was highest concentration so I avoided it
[01:09:36] <MichaelRaskin> Hmm, not sure it counts as mist then!
[01:10:02] <gilberth> selwyn: I am more into the bitter category. Like what Google tells me is called "brussels sprouts" for instance.
[01:10:13] <pl> MichaelRaskin: well, my memories suggest the air has gained a bit of reddish tint
[01:10:49] <MichaelRaskin> Are you sure you don't have smell-to-vision synsthesia?
[01:10:54] <pl> nope
[01:11:21] <selwyn> hopefully the tomato paste was worth it
[01:11:29] <pl> cooking in open pots simply resulted in enough, ahem, "tomato particulate" to end up in air
[01:11:37] <pl> selwyn: that was the bright side
[01:11:53] <pl> but it definitely counted as "don't look at how sausage is made" kind of moment
[01:12:15] <selwyn> really
[01:12:36] <selwyn> the only food i don't like is those imitation crabsticks
[01:18:27] <hayley> https://www.youtube.com/watch?v=zLtW1WoF1C8
[01:18:28] -ixelp- Gary Numan (London 1981) [02]. This Wreckage - YouTube
[01:31:57] <selwyn> do devs view phds negatively?
[01:32:17] <hayley> Why would they?
[01:34:56] <gilberth> You could be over-qualified. That's a thing.
[01:36:33] <hayley> I think my idea of counting DFAs was a bit of a mistake. I mean, I can duplicate registers to handle some non-determinism, as we usually do, but you simply cannot remove similar REs as they now have hidden state. And you can't trust yourself to kill REs that clearly should have been exhausted by now.
[01:37:32] <selwyn> idk, they could be over qualified middle management
[01:37:37] <selwyn> who can't code
[01:38:23] <hayley> What we want is to compress e.g. a{N} into O(1) states rather than O(n). And using a counter should help here.
[01:38:36] <gilberth> Well, an academic grade does not imply any hacking skills in general.
[01:39:26] <gilberth> hayley: You will need an IF. A transition guarded by a condition. Welcome back to NFAs!
[01:40:14] <hayley> I am very tempted to say that, if all conditions are disjoint, we still have a DFA, as only one transition will fire still.
[01:40:21] <gilberth> Incrementing a counter is easy. I showed that you could have arbitrary assignments at transitions. But: At any time there could be multiple versions of 'n'.
[01:41:12] <gilberth> hayley: If your condition turns out that way, yes, your NFA is a DFA by accident.
[01:42:40] <gilberth> Consider (a|aa){n}(a|aa){m} or sth similar. That should be a tough thing. /me scratches head.
[01:43:12] <hayley> Right.
[01:44:23] <hayley> And it's marginally tempting to make "large" REs into NFAs/hybrid machines of some sort. Sorry.
[01:44:50] <gilberth> There is no escape. However, it would be nice, if we could do the cases, which would be a DFA, as this {n} could leave us dead in the water quick otherwise.
[01:45:54] <gilberth> Again, I am not concerned about {n}. These usually don't pop up in scanners.
[01:46:30] <hayley> FWIW if we had an NFA, we'd use power sets to get a DFA. Similar seems to be how we handle duplicating registers.
[01:46:59] * hayley is traumatised by that guy telling her to try a DFA for \w{3}, and also from a dream she had about her ex.
[01:47:34] <gilberth> This is somewhat related to the idea I once had, to have Boolean NFAs with AND/OR nodes, which would "fire" when all/any of there incoming transitions have a token wanting to wander. A bit like gates or neurons.
[01:49:37] <gilberth> Well, \w is easy if you do that on code points.
[01:50:07] <hayley> I'm aware. But repetition generally is concerning.
[01:50:18] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:50:19] <gilberth> But, indeed, I was surprised that direct UTF-8 is not feasible here.
[01:50:25] <gilberth> hayley: Yes.
[01:50:45] <hayley> gilberth: The funny thing is that his RE engine (Rust regex) decodes UTF-8 on the fly and thus uses code points.
[01:50:57] <hayley> Bit of a hypocrite to convince me that I should be operating on bytes.
[01:51:33] <gilberth> Indeed. Remember that Rust keeps strings as UTF-8 encoded octet vectors.
[01:51:46] <hayley> But the IR^W24-bytes-code also allows for testing bytes, so he could possibly optimise if the length of the character is known.
[01:52:15] <hayley> e.g. . would be a variable character match, but a would match exactly the right byte (#x65 was it?)
[01:52:35] <gilberth> And, considering locality and branch prediction, batch decoding should fare better than inline decoding.
[01:52:35] *** Joins: Alfr (~Alfr@user/alfr)
[01:53:13] <hayley> But it was written in Rust, so clearly they have locality and branches figured out.
[01:53:34] <gilberth> Yeah, right.
[01:55:00] <gilberth> I could dig my notes. I have some work on guarding conditions on transitions. But: You potentially face NFAs. But as you noted, some of them happen to be DFAs "by accident".
[01:55:15] <hayley> Or maybe I should introduce counters as another optimisation pass. Hm.
[01:55:44] <gilberth> Milady, we get there. You could do as I did for EOL and BOL.
[01:56:06] <hayley> Do my GVN for once, figure out that we don't assign any new tags for the innermost 19 a's of a{20}, and use a counter to de-duplicate states.
[01:56:36] <hayley> OTOH I don't want to be waiting around for .{2000} to generate or something.
[01:56:41] <gilberth> Have a counting DFA. And factor in it being accepting or non accepting into the primary RE.
[01:58:28] <gilberth> I don't feel like doing RE work right now. But I could image my lookahead/lookbefore machinery could do that.
[01:59:24] <hayley> Well, yeah, generalising the conditions for when a transition fires would allow for some simple forms of lookahead/lookbefore (mostly $ and ^ which seem the most frequent).
[01:59:33] <hayley> Again, that's all Rust regex does.
[02:00:34] <gilberth> Yeah, but I want a general solution. There also is \< and \> which is very useful.
[02:01:00] <hayley> ...FWIW, anything "non-linear" in derivatives is basically doing the work of a power set algorithm for NFA->DFA conversion, as it puts all possibilities into the result.
[02:01:02] <gilberth> And does Rust really handle ^ and $ or does it just handle anchors?
[02:01:17] <hayley> Pretty sure the former.
[02:02:53] <gilberth> Would (^.*)(^.*) work on "foo\nbar"? Given that "." includes the newline.
[02:03:20] <hayley> idk, haven't tested it.
[02:03:44] <hayley> I've only read the source code for the DFA simulator, and that won't apply if you have submatches.
[02:05:02] <gilberth> See. These inner ^ and $ are the tricky part. And you need to be careful with "." as it sometimes matches the newline character, while at other times it does not.
[02:06:05] <gilberth> It's a bit like the term "natural number" including zero or not. :-)
[02:06:32] <gilberth> But why bother with Rust? It's a joke, anyway.
[02:06:47] <hayley> Cause apparently the RE engine is supposed to be fast. But they use an interpreter.
[02:07:01] <hayley> More accurately, the SIMD prefix scanning is fast, and the RE engine is dog slow.
[02:07:30] <gilberth> Yeah, marketing. Rust is supposed to be fast, too. It's slow in reality. Next.
[02:08:30] <hayley> Well, I'm still only similar-ish in performance on [0-9]+x[0-9]+ on some logs, which confuses me.
[02:09:05] <hayley> "similar" being like 53% throughput.
[02:09:40] <MichaelRaskin> Dunno, a completely stupid rewrite of C++ code into Rust was slightly faster once it finally agreed to compile
[02:09:42] <gilberth> Hmm.
[02:10:05] <gilberth> MichaelRaskin: Is C++ fast to begin with?
[02:10:22] <hayley> Same went for CL-PPCRE; when I compiled (char= x #\a) incorrectly as (char<= #\a x #\a) I went slower than CL-PPCRE. But we have a compiler. So what the hell?
[02:11:21] <gilberth> hayley: That doesn't compute. Hmm.
[02:11:38] <hayley> "I'm seeing some behaviour I don't grok.  I have a parameter containing a hash-table.  I create a bunch of scanners using #'cl-ppcre:create-scanner for later use at runtime and I try to store them in that hash-table.  When doing so, I'm exhausting the heap.  It's a dolist with a (setf gethash).  How would this land on the heap?"
[02:11:40] <hayley> What kind of question is this? wtf
[02:12:00] <hayley> "You are aware that April fool's day is in April?"
[02:13:03] <gilberth> Milday, what happens, if you put aside register assignments? You're a greeper, after all.
[02:13:28] <hayley> There weren't any register assignments in that.
[02:13:32] <White_Flame> I believe the proper quote is "Is this an out-of-season April fool's joke?"
[02:13:38] <hayley> ...except for START and END which I need for correctness.
[02:13:38] <sm2n> lol
[02:13:48] <gilberth> hayley: Oops.
[02:14:19] <hayley> Unless the answer is that the SBCL compiler is pulling my leg w.r.t scheduling, which it probably is. But then I should be hacking Lisp compilers and not REs.
[02:14:32] <selwyn> looking for latex cv templates
[02:14:37] <selwyn> nothing quite fits
[02:14:39] <gilberth> hayley: What happens if you emit C code and subject that to gcc or clang?
[02:14:50] <hayley> Haven't tried it.
[02:15:22] <gilberth> That would factor out any SBCL oddness.
[02:15:51] <hayley> It would, but I have absolutely nothing to make it work at the moment.
[02:15:54] <sm2n> selwyn: I adapted this <https://github.com/sb2nov/resume>
[02:15:55] -ixelp- GitHub - sb2nov/resume: Software developer resume in Latex
[02:16:22] <selwyn> ty
[02:16:30] <gilberth> hayley: At times even the stupid CCL compiler generates faster code, so there must be something going on.
[02:17:04] <hayley> ...and I have no idea what code scheduling would do, other than not making the processor jump over like 3000 bytes between the two tests in (CHAR<= #\a x #\c) 
[02:17:14] <selwyn> i did actually like that one
[02:17:24] <selwyn> problem is, i had one that i really like, but i lost the latex source
[02:17:45] <gilberth> hayley: You could try Franz' compiler and see if there is a difference.
[02:19:07] <selwyn> ah i just found it actually :)
[02:19:17] <sm2n> selwyn: that happened to me too actually
[02:19:19] <MichaelRaskin> Or ECL so that some things actually go to GCC?
[02:19:41] <gilberth> MichaelRaskin: Dream on.
[02:20:08] <hayley> I couldn't get ECL to behave with the new RE compiler. Which is odd, as the old one generated code that was slightly faster than SBCL.
[02:20:19] <sm2n> compile times++
[02:21:06] <gilberth> I never saw ECL generating fast code. Which is silly as it could easy do so with fully declared types as we have.
[02:22:00] <MichaelRaskin> Well, hayley has seen it generating faster code than SBCL…
[02:22:39] <gilberth> Oh! Then she managed to do something, which I always failed at.
[02:22:42] <hayley> It only took 80x as long to compile, and the difference was pretty small.
[02:23:14] <drakonis> so, what's so cool about SICL?
[02:23:17] <gilberth> Greppers! Scanners have plenty of compile time to spare.
[02:23:18] <hayley> But I'd guess that C compilers got good at state machines by now.
[02:23:24] <drakonis> fresh implementation?
[02:23:41] <hayley> Yes.
[02:23:55] <hayley> You get to re-consider everything which might matter when primary memory is slow.
[02:24:28] <hayley> And in my very biased experience, the compiler framework is easier to hack on.
[02:24:33] <gilberth> hayley: Yes. My lex(1) ersatz is very fast. It got nice tight loops.
[02:24:43] <drakonis> hmm
[02:25:14] <hayley> Not sure why ECL stinks now though. Maybe I missed some type inference? /me forgot how to make ECL store the generated C code somewhere.
[02:28:07] <hayley> Also, concurrent parallel thread-local GC (so now your 256GB heap is usable), first class global environments for some more of your encapsulation needs, and some other crap I can't think of right now.
[02:38:19] * hayley reads hacker noos^Wnews
[02:38:47] <hayley> "As for the energy efficiency, I seriously doubt that bringing all memory into cache once in a while [...] only bin order to find live vs dead memory is all that energy efficient" Didn't I just mention the train algorithm?
[02:42:19] <hayley> But I have been thinking that "partial" region collections like that could bring down GC cost, would we operate on a region size that fits in cache at a time. And if objects have kinda okay locality of reference (they tend to) then we can reclaim enough garbage to make it effective.
[03:03:47] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:04:32] <dave0> maw
[03:07:02] <gilberth> Hello dave0!
[03:07:36] <dave0> maw gilberth !
[03:08:45] <gilberth> Hey! A new space to stash more single quotes at, though I lost a few recently. Have you seen moon-child?
[03:09:43] <dave0> not since yesterday
[03:10:09] <gilberth> How was your Christmas?
[03:10:26] <dave0> i slept :-)
[03:10:47] <dave0> dad came over and carried on about covid vaccine conspiracies
[03:11:05] <gilberth> Sleeping sounds like a nice plan.
[03:11:21] <gilberth> Conspiracies? Really?
[03:11:51] <dave0> yeah
[03:12:09] <dave0> he likes the sound of his own voice
[03:12:26] <gilberth> Heh.
[03:13:04] <gilberth> Which plot was it? The Bill Gates plot or the autism plot?
[03:13:27] <dave0> oh geez i gotta think
[03:13:30] <gilberth> I only recently learned about the latter. Must be some Anglo-Saxon thing.
[03:13:57] <dave0> i think it was the covid doesn't really exist plot
[03:14:12] <dave0> i kinda tuned out
[03:14:25] <dave0> because it was bullshit
[03:14:27] <dave0> :-)
[03:14:31] * hayley spots one synthesizer crash for the second time in forever.
[03:14:34] <gilberth> Yep, made up to rob our freedom.
[03:15:45] <selwyn> yes, mmr causing autism is an anglo thing
[03:15:46] <gilberth> dave0: You know what? I am pretty angry about all those almost 30% here who refuse to get vaccinated.
[03:15:59] <selwyn> vaccine scares are usually culturally dependent and localised
[03:16:06] <selwyn> covid might be the first one that isn't
[03:17:01] <Gnuxie> selwyn: have watched 
[03:17:03] <Gnuxie> it was good 
[03:17:12] <Gnuxie> excited for next episode 
[03:17:22] <gilberth> Those anti-vaccination people cause needless death. Already. And in particular in the next weeks, which will be a disaster.
[03:18:38] <gilberth> selwyn: I learned about the autism plot only by watching a documentary. This plot is not common here.
[03:19:34] <gilberth> I assume it's told in the Ango-Saxon world because hayley mentioned it to me while I didn't get the reference at all.
[03:19:50] <selwyn> weird that it isn't known elsewhere
[03:20:15] <selwyn> i guess you learned the story from the documentary
[03:20:44] <selwyn> problem is, when you look up the paper, it has 'retracted' printed over it in big red letters
[03:20:50] <selwyn> adds to the conspiracy
[03:20:57] <gilberth> Yep, I hope so. As in: I hope the documentary was correct.
[03:21:04] * hayley has a song in the next album about someone who wanted to drive their autistic daughter off a bridge.
[03:21:48] <Gnuxie> https://www.youtube.com/watch?v=8BIcAZxFfrc
[03:21:48] -ixelp- Vaccines: A Measured Response - YouTube
[03:22:40] <gilberth> hayley: It seems like autism is dealed with quite differently in your world to how it is in mine.
[03:22:52] *** Alfr is now known as Guest6901
[03:22:57] *** Joins: Alfr (~Alfr@user/alfr)
[03:24:57] <gilberth> Anyhow, this was the first time I have heard about the myth that vaccination would cause autism. Granted, I live on the dead side of the moon, but I read news daily to stay informed.
[03:25:42] <pl> gilberth: if you stay away from antivaxer circles, you wouldn't hear of it
[03:25:57] *** Quits: Guest6901 (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[03:26:19] <pl> and it's more known in english-speaking countries because the frauds that created most cited "study" were from England
[03:26:57] <pl> I wish we brought back the laws from last time we had epidemic in Poland, regarding vaccination
[03:27:14] <gilberth> pl: Well, I read news about those people and their protests. If that plot would be common, it would have been mentioned.
[03:27:31] <selwyn> its a sad story
[03:27:39] <pl> on first refusal to get vaccinated, it was a fine comparable to several months of wages. On the second, I think 5 years of prison and you'd get the vaccine in prison
[03:27:41] <selwyn> the guy who came up with the study simply wasn't fit to be a researcher
[03:27:53] <selwyn> i don't think he understood what he did wrong
[03:27:58] <pl> selwyn: the guy was paid by ambulance chaser
[03:28:05] <selwyn> for mmr?
[03:28:11] <pl> he knew very well that he was doing evil, and actually abused kids
[03:28:12] <pl> yes
[03:28:14] <selwyn> wakefield
[03:28:22] <gilberth> pl: And I get some insight about anti-vaccine circles by hearsay from friends having friends being lost in that circles.
[03:28:48] <selwyn> huh, i must have him confused with someone else
[03:28:58] <pl> selwyn: It surfaced when people started looking deeper into how gastroenterologist ended up with such study in the first place
[03:29:20] <pl> I think after it was already retracted by Lancet
[03:30:02] <pl> Generally, there are good reasons he lost his medical license and ran away from UK
[03:30:03] <gilberth> selwyn: See. This is a name I never heard about prior to watching that documentary about him.
[03:30:35] <pl> also, the supposed issue with MMR was to be thiomersal, which contained Mercury
[03:30:52] <pl> do you know how to easily get more mercury active in your bloodstream?
[03:31:04] <selwyn> um
[03:31:08] <gilberth> Chew?
[03:31:13] <selwyn> catch measles?
[03:31:31] <pl> drink a cup of water from a river passing through a city in first world
[03:31:49] * gilberth has plenty of mercury in his mouth and shrugs.
[03:31:58] <pl> that's after considering bioactivation etc.
[03:32:28] <pl> of course the amount would be still way below getting any result on anyone who doesn't need extensive life support system and isolation
[03:32:57] <selwyn> it seems that i had the perpretator of the mrsa hoax in mind
[03:33:06] <gilberth> Aluminum was mentioned in that documentary. How about deodorants? And, yes, aluminum is bad and you get aluminum-free deodorants now.
[03:33:49] <pl> btw, my favourite claim about covid vaccines is how they supposedly contain "graphene oxide"
[03:34:09] <selwyn> the mercury thing is interesting, because it echoes previous beliefs that autism is due to heavy metal poisoning
[03:35:08] <pl> combine it with people who probably would prefer dead than autistic
[03:35:45] <gilberth> And dihydrogenmonoxide! People die of that each day.
[03:38:32] * hayley got into metal after her diagnosis, not before.
[03:39:08] <gilberth> You got treatment? For being normal?
[03:39:18] <hayley> Nope.
[03:39:29] <gilberth> Good.
[03:39:53] <hayley> Song's also about what "treatment" looks like. Which I didn't get cause I was considered able to work, more or less.
[03:40:12] <hayley> I mean, that's what Mr Asperger was deciding upon for the Nazis, many years ago.
[04:01:29] <selwyn> it seems that my favourite quantum computing company started accepting applications again
[04:01:34] <selwyn> *internship applications
[04:18:39] <selwyn> oh he's doing wales again lol
[04:20:11] <hayley> https://www.youtube.com/watch?v=eUJ_ifjKopM
[04:20:12] -ixelp- Sparks - "This Town Ain't Big Enough For Both Of Us" (official video) - YouTube
[04:36:26] <selwyn> new years eve won't be cancelled here
[04:38:00] <selwyn> starting to think the government will try to herd immunity everyone
[04:38:05] <selwyn> or is trying
[04:38:13] <sm2n> isn't that just called doing nothing
[04:38:47] <Catie> Ah yeah, the usual
[04:48:35] <epony> herd e-munity, sounds like a new model of society ;-)
[04:48:50] <epony> maybe call that e-mutiny instead
[04:52:02] <epony> you know, pseudo rioters and the good government to solve all problems, familiarity with history, anyone?
[05:15:44] <hayley> https://www.youtube.com/watch?v=hReCPMIcLHg
[05:15:45] -ixelp- EEVblog 1409 - The DANGERS of Inductor Back EMF - YouTube
[05:22:21] <selwyn> https://www.youtube.com/watch?v=pt4WxxduSGY
[05:22:21] -ixelp- The World's Oldest Computer [Full Documentary] - YouTube
[05:22:25] <selwyn> hayley: one for the spreadsheet
[05:22:37] <hayley> 🤔
[05:26:48] <gilberth> selwyn: Was it Turing complete?
[05:27:12] <selwyn> no idea
[05:27:31] <hayley> When I was in high school a friend and I snuck out of a boring English class and we watched EEVblog until we were caught.
[05:27:36] <selwyn> i feel it should be more of a point of pride for greek nationalists than it is
[05:28:22] <gilberth> Well, even the Z3 is only Turing complete when you glue the program tape to form a loop.
[05:29:32] <gilberth> hayley: I guess you learned more with that EEVblog than in class. So much for the idea that you would learn something in class.
[05:36:48] * gilberth mumbles "Tesla coil" and "boost converter".
[05:39:03] <hayley> I wonder if I should have applied for electrical engineering instead of computer science.
[05:39:09] * hayley would enjoy either.
[05:39:27] <selwyn> sounds like you don't enjoy computer science
[05:39:43] <hayley> Not really, no.
[05:40:32] <selwyn> very happy i didn't do computing, or computer science
[05:40:35] <selwyn> that was my plan at some point
[05:40:58] <hayley> One of my hacker friends studies physics instead.
[05:41:05] <hayley> (One that isn't selwyn FWIW)
[05:41:07] <gilberth> Well, I should have studied physics.
[05:41:25] <gilberth> I would have learned all the CS stuff anyway.
[05:41:25] <hayley> But I'm not very good at physics, only EE.
[05:41:42] <selwyn> i studied maths and then switched to physics
[05:42:14] <selwyn> i used to want to do computer science as well, then i could sit in the intersection of all three areas
[05:42:16] <gilberth> I am bad at calculus, so I figured physics is not the right thing to study.
[05:42:44] <selwyn> but it's not really clear what i could do at this point. maybe very theoretical stuff?
[05:42:52] <hayley> If things had gone better this year (hey, I only have 2.5 days of it to go) I'd have studied FPGAs and still taken the 3 hours/day bus trips.
[05:42:55] <selwyn> quantum computing does not often intersect with computer science that much
[05:43:16] <selwyn> 3 hours a day? is melbourne that big?
[05:43:36] <hayley> 3 hours round trip, i.e. 1.5 hours there. But it was way out in Bundoora...
[05:43:51] * selwyn nods sagely
[05:43:56] <selwyn> beyond the smart bins
[05:44:24] <hayley> Only 13km the city? Well the bus trip is pretty slow.
[05:44:36] <hayley> *from the city. But I live on the other side of the city, so I have to get into the city too.
[05:45:36] <hayley> But the real issue is that one has to get through city traffic, as I used to get home at 5-7pm which is when everyone leaves from work.
[05:46:11] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 245 seconds)
[05:48:06] <hayley> Or maybe I should have done something that didn't involve electronics. Like psychology so I could figure out what a dream involving awkwardly avoiding contact with my ex is supposed to mean.
[05:49:09] <hayley> I mean, I did better on the maths test for high school than I did on the computing test. Though the latter gets "adjusted" by dropping your grade so much unless you get 100%, more or less.
[05:49:48] <hayley> And I refused to argue for Hungarian notation, and for using binary search on a database with fixed size records and contiguous IDs.
[05:51:03] <selwyn> my school had one of the biggest electronic labs in the country (for secondary schools) but i didn't choose it in the end
[05:51:38] <moon-child> ach
[05:52:27] <selwyn> meh
[05:52:30] <selwyn> i can solder and shit
[05:52:33] <selwyn> what else do you need
[05:52:50] <moon-child> I mean, binary search on the db
[05:52:56] <moon-child> ee/not ee is fine
[05:53:15] <moon-child> hey I can kinda solder too
[05:54:02] <selwyn> my dad learnt to assemble electronics by copying other people at work
[05:54:11] <selwyn> he has the weirdest soldering technique i've ever seen
[05:54:33] <selwyn> melts balls of solder and drops them onto the metal contact, and then pushes the wire into place
[05:54:43] <hayley> https://www.youtube.com/watch?v=mR9Jkw177Mg
[05:54:44] -ixelp- [Greek YTP collab] Kamu to Yurushi: Part 2 - YouTube
[05:55:49] <moon-child> ...huh
[05:56:21] <hayley> I know my dad would melt a crap ton of solder onto the iron, but not drop the solder.
[05:57:08] <selwyn> mediterranean dad soldering
[06:00:16] <hayley> Pity I can't seem to find a translation of σκατόμενο, but by the prefix I suspect "shitty".
[06:02:36] <selwyn> i told him that the polarities of leds mattered
[06:02:54] <selwyn> and he simply didn't believe me
[06:03:19] <moon-child> eh
[06:03:27] <moon-child> ain't it a light emitting _diode_? ¯\_(ツ)_/¯
[06:03:40] <selwyn> turns out that he was grabbing them from the pile and putting them in the right position
[06:03:42] * hayley uploaded an image: (63KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/AhCNjLtEaspEQwaekLDuBwvN/horse-body-dysmorphia.jpg >
[06:03:45] <selwyn> i assume from copying the other guy
[06:04:33] <hayley> In primary school we made model houses for an electronics project (most pathetic project you could do with electronics, I knew that at age 11) and the teacher cut up Christmas lights for cheap lights.
[06:05:12] <hayley> Also had a stash of solar panels for some reason, but we couldn't figure out how to get any useful current out of them, even using all ~10 of em.
[06:13:33] <gilberth> hayley: <http://clim.rocks/gilbert/digit-plus-x-digit-plus.c>
[06:14:29] <gilberth> I'd like to know how that fares.
[06:14:58] <hayley> Can't say I'm going to get any hacking done today.
[06:15:12] <selwyn> goodnight everyone
[06:15:52] <gilberth> Take care!
[06:18:39] <hayley> So this implements [0-9]+x[0-9]+?
[06:18:54] <gilberth> Yes, it does.
[06:20:03] <hayley> Already "informative" to see that SBCL generates 2.67× as much assembly as gcc then.
[06:20:49] <gilberth> Hmm. And then I do a binary decision always. Even for the 'x'.
[06:23:31] <hayley> How do I make a .so file with GCC again?
[06:23:41] <hayley> -fPIC -shared?
[06:24:02] <gilberth> I don't know off my head, sorry.
[06:24:17] <hayley> "Error opening shared object "/tmp/foo.so":  /tmp/foo.so: only ET_DYN and ET_EXEC can be loaded."
[06:24:24] <hayley> Seems not.
[06:25:25] <hayley> gcc -shared -fPIC -Wl,-soname,libfoo.so.1 -o libfoo.so.1 foo.o # How memorable.
[06:25:51] <gilberth> Oh dear!
[06:30:13] <hayley> 196ns Lisp vs 73ns C (with CFFI).
[06:30:30] <gilberth> Ouch!
[06:31:24] <gilberth> What's the throughput?
[06:31:36] <hayley> I know I waste 40ns or so making a submatch vector, and checking that the user provided valid :START and :END, but this is still crap
[06:32:12] <hayley> (OPTIMIZE SPEED) doesn't help, as per usual. SBCL can't really help with scheduling AIUI.
[06:33:00] <gilberth> You think that scheduling is the issue?
[06:33:51] <hayley> Well, I found SBCL would happily put the two tests in (char<= #\a x #\c) very far away from each other.
[06:34:42] <hayley> ...and there aren't many Lisp-ish optimisations that will help; no types to infer, we don't cons...only backend optimisations remain.
[06:35:26] <gilberth> ok
[06:36:25] <hayley> wtf, the C code has 4x as much throughput.
[06:36:38] <hayley> ...when it is skipping over stuff that is obviously not a match. /me goes to check more subtle things.
[06:38:01] <hayley> Only about 3x for something like "555.....a0x0123", but that's still pretty sad.
[06:41:56] * hayley uploaded an image: (102KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/hmIhEGQgiKyRoJruhBFRmgwg/digits.png >
[06:42:03] <hayley> Just to check, you get a DFA like this (for a grep machine)? I could check the C code too.
[06:42:54] <gilberth> Yes, this is a greper.
[06:43:38] *** Joins: djuber (~user@65.79.128.64)
[06:44:52] <hayley> But I suspect, at this point, we are very sensitive to how the compiler backend behaves.
[06:45:29] <hayley> You fancy compiling to JVM bytecode, so that we could see if HotSpot does its job?
[06:47:24] <gilberth> My machine somehow looks similar.
[06:49:27] <gilberth> Though I have two registers.
[06:49:56] <moon-child> that many?  How extravagant
[06:50:55] <gilberth> Yeah, I like it fancy.
[06:51:17] <hayley> Well, by my Xorg.log test, the C code is only on par with the Rust regex engine. But it's possible I have a very different Xorg.log; you can tell this is a shit test. /me re-benchmarks
[06:52:39] <gilberth> She is in greedy grep mode again, chasing the last cycle to squeeze.
[06:53:02] <hayley> Hey, I think "instruction scheduling being shit" also applies to lexers.
[06:53:03] <moon-child> superoptimizer when
[06:53:34] <gilberth> hayley: It does.
[06:54:08] * hayley counts again.
[06:54:37] <gilberth> Which is curious as I never noticed shit scheduling, but I have not tested with recent versions of SBCL. My major work with optimizing the driver is years old.
[06:54:48] <hayley> The generated C has 2.35× the throughput of Rust regex.
[06:55:19] <gilberth> At last. And your Lisp code?
[06:56:02] <gilberth> And what throughput do we get now?
[06:57:29] <hayley> Still miserable. Your C runs at 685Mchar/s, Rust at 291Mchar/s, one-more-re-nightmare 148Mchar/s.
[06:58:14] <hayley> The latter two measure finding all matches FWIW, whereas your C code finds one, but I've calculated the C throughput using the number of characters it did actually scan.
[06:58:34] <gilberth> It's in the ball park of my 10 year's old 7\tau per char.
[06:59:17] <gilberth> Dammit, I lost another single quote.
[06:59:25] * hayley wonders how to make a visualisation of how block scheduling fares.
[07:01:05] <gilberth> But something is wrong with one-more-re-nightmare's performance. It ought to be better.
[07:01:06] <hayley> But it isn't a great start when the fourth instruction is "JMP L15" perhaps.
[07:01:56] <gilberth> Yes, "JMP L69" would have been more to your liking.
[07:02:42] <hayley> The code then jumps to a L0, so I wouldn't mind a ""
[07:02:55] <gilberth> Still curious. The 7\tau per char figure, I remember, is with SBCL.
[07:04:16] <gilberth> It's not easy for me to do grep benchmarks, I carry all the scanner infrastructure around.
[07:04:26] <hayley> https://plaster.tymoon.eu/view/2802
[07:04:36] <hayley> Well, does this CL code look suspect to you?
[07:06:45] <gilberth> Nope.
[07:07:19] <gilberth> Apart from having the results in a vector. Lisp can do better than that.
[07:07:19] <hayley> FWIW SBCL is sensible about eliminating redundant tests in e.g. (COND ((= x A) ...) ((NOT (= x A)) ...)) for once.
[07:08:07] <gilberth> Sure comes free with type interference.
[07:10:05] <gilberth> It says (SPEED 0)
[07:10:29] <hayley> That doesn't change anything.
[07:10:48] <hayley> The generated code has always been byte-for-byte identical - there's nothing SBCL can offer me that's worth slower compile times.
[07:11:21] <hayley> ...even if you don't care for compile times, cause it can't offer anything at this point.
[07:11:53] <gilberth> What is the MAX doing there and where are the bounds checks?
[07:12:39] <hayley> The MAX makes sure we end up advancing the scan index. The bounds checks have their own tags.
[07:13:13] <hayley> e.g. on lines 28-30. We jump to the tag after bounds checks if it's provably safe.
[07:15:13] <gilberth> ok, I am not that clever.
[07:17:06] <hayley> In this situation, the very best strategy IMO would be to recognise the infix [0-9]x[0-9] using SIMD, and then scan backwards and forwards to get the whole match. But I don't know how to write a compiler that does that.
[07:17:40] <hayley> But having a 3 to 4× difference for the same code, more or less, is disappointing.
[07:19:31] <hayley> It's possible that the additional ADDs for (> (+ P 2) END) could waste ops, to be fair, since I barely win anything on this RE.
[07:22:17] <hayley> ...no, it's a bit faster to check everywhere with JE but only barely. Not 3-4x.
[07:26:26] * hayley reads the SBCL assembly more carefully.
[07:27:16] <hayley> What's CMP R10D, 240; JNE L31; CMP R10D, 240; JNE L29; going to get me? Best I can tell, we're not ever going to get to L29 from this sequence.
[07:28:59] <hayley> Maybe I overestimate SBCL's type inference/redundant test elimination/etc. The old compiler would recognise stuff like (COND (a ...) ((NOT a) ...)) and simplify to (COND (a ...) (T ...)) as that obviously must be true. i.e. we assume (NOT a), so we compute (OR a (NOT a)) == T.
[07:32:39] <hayley> OTOH I don't want to go backwards and un-simplify (COND (a ...) (b ...)) to (COND (a ...) ((OR a b) ...)), but I can literally just compare lengths of isums to figure out how many branches I'm generating.
[07:35:37] <hayley> Eh, doesn't help. Fuck.
[07:39:11] <gilberth> You misspelled "fun".
[07:40:02] <hayley> If I did bother to profile, you'd be right that I could ideally just give my counters to the compiler (as taken/not taken probabilities) and have that inform register allocation and scheduling.
[07:40:43] <gilberth> hayley: Anyhow, I'll call it a night for tonight, prepare dinner, chill a bit, and hopefully crash. I'll stick around awhile.
[07:40:50] <hayley> Sure.
[07:41:17] <hayley> Didn't get anything done today. Did I say that I wouldn't be hacking, as I was distracted by that stupid dream I had?
[07:41:32] <gilberth> Apropos profiling. What would -fprofile-generate and -fprofile-use do with the C code?
[07:42:05] <gilberth> hayley: Care to share the dream or would that be embarrassing to one of us?
[07:42:11] <hayley> I'd guess the former inserts code for branch counters and such, and the latter eats the file?
[07:42:24] <gilberth> Yes.
[07:42:45] <gilberth> The former instruments the code to dump some profile data.
[07:42:57] <hayley> gilberth: Well, I was walking through a house, and decided to sit in one of the rooms. Then my ex walks in from another corner, looks at me and mumbles, and I awkwardly walk off.
[07:44:00] <hayley> I had two years to have the good kind of dreams with her in them, but apparently I am not allowed to enjoy dreaming ever.
[07:44:19] <gilberth> Hmm, what's so strange about that dream? What did she mumble? Did she enter the room, or was she in the room all the time?
[07:44:39] <hayley> Didn't hear it (and I'm pretty sure I dreamed some more, but forgot it), and she was there the whole time.
[07:45:30] <gilberth> Ok, so you entered her realm. And you walked away again. Hmm.
[07:45:51] <hayley> "again" - she walked from me first. But sure.
[07:46:19] <gilberth> You didn't mention that. But, ok.
[07:46:47] <hayley> Oh, I thought you meant "again" as in I left her, not the other way around.
[07:46:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:46:58] <hayley> ...in real life, half a year ago.
[07:48:30] * hayley puts https://www.youtube.com/watch?v=WXvlzUCB74o on the jukebox.
[07:48:36] <gilberth> Well I have a strange recurring dream. Me and my wife would search something and never find in. In old abandoned houses or hotels. We are chased by some agents or similar who are after us or the very same thing we search for. We never see them and she has the weapon to defend us. This sure tells something about me and my relationship.
[07:49:22] <gilberth> hayley: I meant "again" in that very dream of yours.
[07:49:40] <hayley> No, I only walked away once.
[07:49:53] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:50:50] <gilberth> "Again" in the sense that you entered the room to leave the room. To be outside of this very room again.
[07:50:59] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:51:03] <hayley> Yeah, sure.
[07:51:20] <gilberth> Maybe "again" is not used like that.
[07:51:43] <hayley> I'd expect "again" to mean I left the room before.
[07:51:57] <hayley> I'd be outside the room again, sure. Doesn't matter too much.
[07:52:47] <gilberth> Milady, perhaps I was using "again" here as I would do with German.
[07:53:52] <moon-child> maybe looking for 'return'?
[07:54:27] <gilberth> hayley: Did it upset you what she was mumbling?
[07:54:38] <hayley> Not sure.
[07:55:07] <dave0> you know that scene in star wars where they are in the trash compactor? it is my dream
[07:55:40] <gilberth> moon-child: No. German works like "I entered the room to look for something, didn't find it, and left again." No recurrence of entering. This perhaps makes no sense at all in English.
[07:56:24] <gilberth> dave0: Yep. What do you say about that I never may have the damn weapon?
[07:57:40] <dave0> maybe she's rambo?
[07:58:17] <gilberth> More like Emma Peel.
[07:58:55] <dave0> aha!
[07:59:01] <dave0> avengers
[07:59:20] <gilberth> Though Emma Peel looks just like my ex-GF I had before I met my wife. /me shrugs.
[08:00:28] <gilberth> Anyhow, this dream of mine stopped recurring a while ago.
[08:00:32] * hayley distracts herself with https://www.youtube.com/watch?v=MCW5HUkrr-o
[08:00:53] <gilberth> But she took the weapon with here. I still have none to defend myself.
[08:01:53] <dave0> hand to hand combat works
[08:02:21] <gilberth> Not at a distance.
[08:03:02] *** Joins: semz (~none@user/semz)
[08:05:20] *** Quits: djuber (~user@65.79.128.64) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[08:06:48] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[08:18:01] <gilberth> The fun thing was: While I was leading (I always do), she had the weapon to protect us.
[08:18:31] <dave0> gilberth: maybe you were being cautious
[08:19:09] <gilberth> Ruins from abandonment usually mean you have unresolved things with your past or live too much at the past.
[08:19:42] <gilberth> dave0: Sure, we were operating in secret and didn't want to get detected.
[08:20:06] <gilberth> It must have been dozens of time I had that dream.
[08:20:53] <gilberth> I still don't know what I was searching for.
[08:21:43] <gilberth> I take this as a manifestation that I am not satisfied with my life at all.
[08:22:26] <dave0> i used to have a scary dream where i was in a huge black room with no walls
[08:25:27] <gilberth> How could a room have no walls?
[08:27:32] <mfiano> a mushroom?
[08:27:36] <gilberth> hayley: lol. "If you think your wife's voice is noise, you should get a divorce and not a noise cancelling device." Made my day.
[08:27:40] <dave0> i couldn't see any walls
[08:27:42] <contrapunctus> gilberth: consider how the German word for "outer space" is "Raum" 😏
[08:28:11] <dave0> but it did echo so i guess there was walls
[08:28:47] <gilberth> contrapunctus: Rrrright.
[08:29:03] <gilberth> dave0: You shouted?
[08:29:43] <dave0> gilberth: hmm no, there was a repetitive noise
[08:30:01] <dave0> without form
[08:30:05] <dave0> it was scary
[08:30:14] <gilberth> Uh. You watched too many star trek episodes.
[08:30:43] <dave0> yes there was an episode like that on next gen!
[08:30:45] <mfiano> There are herbs you can put in tea to induce lucid dreaming
[08:30:54] <dave0> yeah like lsd herbs
[08:30:59] <dave0> :-)
[08:31:05] <mfiano> No that doesn't induce lucid dreaming
[08:31:40] <gilberth> mfiano: You can have lucid dreams without herbs. Step one: Be aware that you dream.
[08:32:12] <mfiano> Yes I pretty much always am
[08:32:29] <gilberth> And you can't take control?
[08:32:35] <mfiano> I can
[08:33:15] <mfiano> And one trick to wake up that is pretty common, is to try to wiggle your toes.
[08:34:04] <gilberth> Reminds me of another star trek episode. The one where everyone was dreaming while believing they would not until they spotted the moon. Which was impossible, as they where light years away. I believe it was Voyager.
[08:35:29] <gilberth> mfiano: I wake myself up when I don't like a dream. But then at times, I dream that I woke up. And then the dream is bad again, and I wake myself up again, only to dream that I woke up, and again and again.
[08:36:30] <gilberth> Sometimes it takes a few iterations until I reach reality.
[08:36:36] <dave0> i have schizophrenia, it is a sleep disorder, i have weird dreams
[08:36:46] <mfiano> Sure, that is probably the most common dream people have that can't control their dreams.
[08:38:18] <gilberth> mfiano: I am gettng better at this, but am not really going after it. Most of the time my dreams are just strange. I almost never have nightmares, so I am fine.
[08:39:07] <gilberth> dave0: Dreams are always weird.
[08:39:31] <dave0> true
[08:39:47] <mfiano> I would prefer a nightmare anyday over a sleep paralysis spell
[08:39:57] <mfiano> Those are rough
[08:40:38] <gilberth> Some are fun though. As we were chased again at a gigantic hotel complex. We entered the roof top and this roof was so large that we played golf up there. The view was breathtaking.
[08:40:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:41:00] <mfiano> Most people are lucky that they never have them
[08:41:02] <gilberth> mfiano: Yes, they are. And scary.
[08:41:55] <gilberth> As I was way younger I had a few. I am lucky that it passed. Never had that again.
[08:42:53] <mfiano> Yeah same. It's more common when younger, most likely due to staying awake for too long.
[08:43:42] <gilberth> Could well be. Hacking for 72h straight was routine for me. Can't do that anymore.
[09:10:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 252 seconds)
[09:16:49] <moon-child> pfah!  I could never do something like that
[09:19:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:19:56] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Client Quit)
[09:20:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:20:39] *** Alfr is now known as Guest5028
[09:20:43] *** Joins: Alfr (~Alfr@user/alfr)
[09:22:23] *** Quits: Guest5028 (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[10:02:27] *** Joins: notzmv (~zmv@user/notzmv)
[10:39:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[11:18:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:20:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[11:21:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:26:22] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:28:07] <kakuhen> I think I figured out how to use the IRC bridge -- it took quite a while to get authentication right, so I have no idea if this is correct
[11:28:39] <kakuhen> Now here's hoping synapse doesn't OOM because I joined a relatively large IRC room; synapse's federation consumes a ton of memory
[11:29:17] <sham1> Well it looks like it is correct
[11:29:39] <kakuhen> cool; with that said, I am messing around with Caveman2 and it's really nice
[11:30:24] <kakuhen> it basically sets up hunchentoot, djula, and some database thingy for you -- and it's been straightforward so far to make basic templates and routes for a website I'm making
[11:33:00] <kakuhen> documentation is pretty lacking for everything, so I am taking notes of how I'm getting some stuff to work that is not documented
[11:37:38] <contrapunctus> kakuhen: why not try running an XMPP server and (your own/someone else's) Biboumi instance? It'd be lighter on resources, if you're self-hosting.
[11:38:38] <contrapunctus> for clients, see Conversations and Gajim (there's also a newer fork of jabber.el - https://tildegit.org/wgreenhouse/emacs-jabber and a few terminal clients)
[11:39:29] <kakuhen> are there any XMPP clients for iOS? Quite an arbitrary thing to ask for, but it's because I have almost everything set up on Matrix already, and it's convenient that I can access from my computer & phone
[11:39:48] <kakuhen> I know one of my friends swears by XMPP as being a superior protocol to Matrix
[11:41:35] <contrapunctus> IIRC there's ChatSecure and Monal for iOS
[11:41:48] <kakuhen> cool; I'll look into those
[11:42:20] <contrapunctus> but XMPP on iOS was a shitshow last I heard (admittedly a while ago), thanks to Apple's policies on push notifications et al
[11:42:49] <kakuhen> anything that wants to send a push notification is a shitshow on iOS
[11:43:26] <ck_> I never even thought of doing this, it's a good idea
[11:43:33] <kakuhen> it's funny because on OS X it's simply just passing a string to some class method of NSNotificationCenter, and on Android iirc it's also a pretty straightforward API call
[11:43:48] <ck_> (what's a good xmpp client for android?)
[11:43:50] <kakuhen> then iOS has you go through dozens of hoops with Apple's tightly controlled servers just to send anything
[11:44:00] <kakuhen> and there's no way to tell it works because notifications just won't support iOS simulator
[11:44:05] <kakuhen> * it works without a physical device because notifications
[11:44:09] <ck_> kakuhen: that's called "courage" in apple terms, no? :)
[11:44:29] <kakuhen> courage is when they make hardware decisions
[11:44:36] <kakuhen> i don't know the term they use for software decisions
[11:45:03] <ck_> it's amazing, it just works. so your content is center-stage. incredible
[11:45:04] <kakuhen> I know that their way of saying "we're killing off X API" is by making a WWDC keynote titled "The future of X"
[11:45:06] <ck_> oh and beautiful
[11:45:27] <kakuhen> e.g. "The future of Carbon," where most ppl expected a long-anticipated (and even confirmed!) port of 64-bit Carbon
[11:45:31] <kakuhen> instead what they got: "lol jsut use Cocoa"
[11:45:33] <contrapunctus> ck_: Conversations
[11:45:35] <kakuhen> * use Cocoa we're deprecating Carbon"
[11:45:47] <kakuhen> s/e.g. "The future of Carbon," where most ppl expected a long-anticipated (and even confirmed!) port of 64-bit Carbon/e.g. "The future of Carbon," where most ppl expected a long-anticipated (and even confirmed!)  64-bit port of the Carbon APIs/
[11:45:49] <ck_> contrapunctus: thank you
[11:45:51] <contrapunctus> ck_: and Yaxim for older/low resource phones
[11:46:23] <ck_> maybe there's a way to connect irssi to some xmpp hub locally
[11:50:50] *** Joins: treflip (~user@user/treflip)
[11:53:16] <ck_> everything keeps getting worse, just last week I was sitting at a windows machine and puzzled through three layers of historical ux design to find some file scan settings
[11:53:52] <ck_> or maybe it always was bad and the memories of "windows for workgroups" is just a rose-tinted memory
[11:56:44] <kakuhen> it's possible; i often think there's more bugs in software today than before, but then i read some blogpost that convinced me I was simply oblivious to them than now, for various reasons
[11:58:18] <hayley> gilberth: Hm, I could "merge" states and perform some dispatch at runtime, instead of compile-time, for something like a{1000}. But then our notion of "similar" is no longer a proper equivalence function, and is just heuristic, in a way.
[11:58:46] <hayley> If I merged all states, I'd basically have a RE interpreter. But if I merge some states where the DFA is large, I might get something in-between that is still useful.
[12:04:39] <hayley> The tradeoff is code size <--> branches I guess.
[12:15:37] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[12:20:24] * hayley notes that a{100} takes 3 seconds to make a grep machine. Ouch.
[12:42:47] <kakuhen> I found an issue opened on GitHub that the poster themselves fixed, and they never closed the issue
[12:43:08] <kakuhen> this is like the opposite of what I usually see, and I don't know what to think of it
[12:51:23] <hayley> Hm, now it appears I have worse throughput with (a|aa)* too, now that I updated SBCL. Oh dear.
[12:51:43] <hayley> 870Mchar/s, so still excessive, but not as excessive as before.
[12:55:05] <epony> at least you did not use Baud or Sym
[12:56:02] <epony> the units of data these people choose, are like the ones a scribe would do (remember words)
[12:57:09] <epony> try with Octet too ;-)
[12:57:27] <epony> (like the Frenchies)
[12:58:46] <epony> just don't go Nit, that would be simply too much even for a coucou
[12:59:10] <hayley> (SPEED 3) seems to hurt performance, dropping to 600Mchar/s.
[13:01:16] <hayley> No, it's bad with (SPEED 0) too. /me scratches head
[13:03:37] <epony> am wasting my time with in CPU data processing cause, why the feck anyone would care about accelerators  https://en.wikipedia.org/wiki/Data_processing_unit
[13:03:41] <hayley> Now there is a difference between ((speed 0) (safety 0) (compilation-speed 0) (debug 0)) and ((speed 0) (safety 0) (compilation-speed 3) (debug 0)), but speed doesn't change anything.
[13:09:58] <hayley> I can't seem to find much other than COMPILATION-SPEED that correlates with the performance regression. ):
[13:25:19] <hayley> Also possible my desktop is broken. Hm.
[13:33:01] *** Quits: Alfr (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[13:33:06] *** Joins: Alfr (~Alfr@user/alfr)
[13:34:08] <hayley> There is a regression between SBCL 2.0.1.debian and 2.1.11 on my laptop, but it's only 900µs to 1.1ms on one test. And also the Rust code also slowed down since I wrote the one-more-re-nightmare article. Hence methinks my desktop is fucked.
[13:36:39] <moon-child> thermals?
[13:36:54] <hayley> sensors doesn't show anything too abnormal.
[13:36:56] <moon-child> here in the northern hemisphere it is outlandishly cold.  Perhaps our heat has left to haunt you
[13:39:56] * hayley forgot what to modprobe for Zen 1 sensors.
[13:40:24] <moon-child> lm-sensors thingy can autodetect I think
[13:41:47] <hayley> Indeed that works. Thanks!
[13:43:16] <hayley> Pretty fine 38°C or so. So it shouldn't be throttling.
[13:46:29] <hayley> OTOH all my cores sit at 1550MHz, benchmarking or otherwise. Whereas my laptop happily jumps from 800MHz to 2400MHz or so.
[13:48:12] <hayley> Now, I recall paying for a 3600MHz processor, so this could explain throughput being halved.
[13:49:11] <hayley> For fuck's sake, why was my frequency governor on powersave? If I change to performance it's back to normal.
[14:03:32] <kakuhen> off-topic, but I finally fixed an issue I had a djula, though I think my "fix" is actually abusing a bug lole
[14:03:51] <hayley> Such is life.
[14:04:13] <kakuhen> I was able to {%include "some-template.html"%} in a template file itself, and some-template has two blocks, one of which is defined nowhere but in that file itself
[14:04:35] <kakuhen> anyway, it works and i don't see any complaints from the repl
[14:04:41] <hayley> So, you have late binding?
[14:04:51] <kakuhen> those words are too fancy for me
[14:05:08] <hayley> "block names are looked up at runtime, not when loading blocks"
[14:05:22] <kakuhen> well, they are "compiled," somehow
[14:05:28] <kakuhen> I think it happens at runtime, though, yeah
[14:06:07] <kakuhen> the documentation states that {%include ... %} will first compile the template you're pulling in, then paste its contents 
[14:06:48] <kakuhen> oh actually the fancy terminology they use is "render," not "compile"
[14:06:55] <kakuhen> https://mmontone.github.io/djula/djula/include.html#include
[14:06:55] -ixelp- include (Djula HTML templating system)
[14:08:08] <kakuhen> anyway, caveman2 provides a really nice boilerplate for just getting started with writing front-end stuff; I haven't had to modify much lisp code, besides adding saner defaults for the routing and a default language (since I intend to add i18n soon)
[14:08:20] <Gnuxie> I don't like Djula 
[14:08:47] <Gnuxie> Iirc it does some bs to catch conditions from the template and resignal them 
[14:09:24] <Gnuxie> Which is bs because it makes it harder to see what is wrong 
[14:10:57] <kakuhen> I'm only using djula because it's what caveman bundles; so far it's good for simple substitutions, and checking values of some variables
[14:12:08] <kakuhen> you'll think i am clinically insane once you find out i am intentionally using html 4.01 and css 2.1
[14:12:34] <kakuhen> for some reason i care about old computers that people refuse to install NetBSD on, and I am treating the w3c specs as a sort of CLHS but for html and css
[14:17:47] <hayley> Some notes: SBCL emits 58 MOVs, GCC only 18. SBCL emits 46 jumps of some sort, GCC 24.
[14:26:43] <kakuhen> ok I found a possible bug in caveman2, doesn't seem so fun to fix either
[14:26:57] <kakuhen> I decided to use a regex to match / and /index.html and for some reason it's matching /foobar
[14:27:19] <hayley> What's your RE?
[14:28:06] <kakuhen> "(/|/index\\.html)"
[14:29:27] <moon-child> what happens if you wrap ^$ around it?
[14:29:59] <moon-child> (or, maybe just try $ at the end, idk if it matches the whole uri or just the requested path)
[14:31:58] <kakuhen> just matches the requested path
[14:32:35] <kakuhen> it somehow still matched /foo.html using the regex "(/|/index\.html$)"
[14:32:56] <kakuhen> oh and for some reason matrix removed the escape character before .html
[14:33:29] <moon-child> I mean, "^(/|/index\\.html)$"
[14:33:54] <moon-child> I think it may be that it is matching / as _part_ of /foobar, when you want to match / as an entire string
[14:34:31] <kakuhen> oh that's a good point
[14:35:20] <kakuhen> ok this works now, thank you so much!
[14:36:02] <moon-child> np
[14:38:17] <kakuhen> also I found a potential typo in the boilerplate code
[14:38:25] <kakuhen> maybe I'm wrong, but I'm sure robot.txt should be robots.txt
[14:38:50] <kakuhen> I know not a single web crawler follows the standard, but iirc they look explicitly for robots.txt
[14:39:44] <kakuhen> in any case, the default config from caveman will redirect /robot.txt to {PROJECT_ROOT}/static/robot.txt, rather than using robots.txt
[14:40:31] <hayley> Could GCC be throwing heuristics at ordering the branches, or does it follow the order the programmer gave? And I guess I do need to examine ISUM-CASE since I would have to hack up my own redundant test elimination thing.
[14:41:23] <moon-child> 'throwing heuristics at ordering the branches'  it definitely does that if you use pgo or __builtin_expect; but I wouldn't be surprised if it also assigned probabilities based on how you slice up the range of a 'char'
[14:41:38] <hayley> The latter.
[14:41:39] <moon-child> like, [0-9] has probability 10/256, x has probability 1/256, everything else 245/256
[14:41:57] <hayley> Though I had changed it to use unsigned int to match Lisp, but same thing.
[14:42:21] <moon-child> 0-9 would be 10x more likely than x in either case
[14:43:03] * hayley wonders if this is gilberth's plan to make OMRN cgrep2
[14:44:04] <moon-child> http://ix.io/3JJZ/c  it generates different code for these two.  So, probably not?
[14:44:52] * hayley can't have shit on Von Neumann machines
[14:45:25] <moon-child> lol
[14:47:12] <hayley> Then I "just" have to figure out where I end up with 260% the code size for the same RE going through roughly the same algorithm, just targeting different backends (C and Lisp).
[14:52:48] <hayley> (First to say basic block positioning loses the game.)
[14:54:18] <moon-child> whatever happend to the sea-of-nodes supremacy?
[14:55:16] <hayley> SoN ends up producing basic blocks in the very end.
[14:56:00] <moon-child> bah!  This is beside the point
[14:56:16] <moon-child> (also wasn't that for register allocation?  I bet you can totally do scheduling on sea of nodes)
[14:56:44] <hayley> I guess the same idea holds with a sea of nodes, still. You schedule so that you don't jump too much, and jumps don't go too far.
[14:57:11] <hayley> I dunno. SICL does register allocation on a sea of nodes with a back-arc set computed prior.
[14:57:30] <hayley> And in any case, SBCL does use basic blocks.
[14:59:40] <moon-child> they use basic blocks but not ssa?  Huh
[15:00:01] <hayley> Yup.
[15:03:11] <hayley> https://gcc.gnu.org/news/reorder.html Seems to be called "basic block reordering".
[15:03:12] -ixelp- Basic Block Reordering - GNU Project
[15:04:45] <hayley> And congratulations, reordering is NP. But I guess I can pull out simulated annealing if no one is watching.
[15:08:25] <hayley> Though that's probably not the whole story. Nor are redundant branches by my crap code generator, nor is SBCL insisting on tagging integers. Hopefully it's not all those combined.
[15:09:26] <moon-child> one revision of zen was 20~25% faster than the previous revision.  Same physical process.  Death by a thousand cuts
[15:10:58] <hayley> ):
[15:11:53] <hayley> But the former two are like 50 bytes each, and the latter is harder to measure. So there's probably more to it.
[15:12:11] <moon-child> might be worth comparing the asm outputs of the two directly
[15:12:16] <hayley> ...when I want to get from 680 bytes to 257 IIRC.
[15:12:17] <moon-child> throw perf at it too
[15:12:37] <moon-child> (pita but ..)
[15:12:58] <hayley> I have, yes. And I'll get to perf tomorrow (though I've seen instruction level statistical profiling thanks to SB-SPROF already).
[15:14:31] <moon-child> probably representative but not technically a level playing field.  Otoh sbcl output would have to be massaged to stand alone so maybe not worth it unless there are no answers
[15:14:41] * hayley still cannot have shit on Von Neumann machines.
[15:15:04] <hayley> DISASSEMBLE gives me a perfectly fine pile of assembler from experience.
[15:16:45] <moon-child> I mean, if you wanted to put it in a standalone file and pipe it through as/ld to perf it, you'd need to get rid of, say, calls to cons
[15:16:57] <hayley> But whatever gilberth is getting right here should help me have a consistently faster grepper (contrary to his ideas of what's important, but still).
[15:18:04] <hayley> Oh, yeah. Right. The best I've done is SAVE-LISP-AND-DIE then perf stat. Though I think someone worked on dumping enough information to make perf work, and idk what I want from perf that SB-SPROF can't get me.
[15:18:56] <moon-child> oh, didn't think of that
[15:19:38] <hayley> That's what I did to profile and assert dominance against Hyperscan on some tests.
[15:21:09] <hayley> Even with SIMD being able to compile matchers for any ranges really helps.
[15:21:35] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[15:31:16] <hayley> But if I could pick an ordering, should I just do the most common first? As we can punch holes of "don't care" into boolean expressions/isums to simplify, I don't know if it's going to be the most efficient all the time.
[15:32:20] * moon-child whispers: JIT
[15:40:08] <selwyn> dumb question: if the sunshield layers on the jwst are a hair thick
[15:40:19] <selwyn> what's to stop some random piece of debris tearing them
[15:40:40] <selwyn> is that why its folded until it gets far enough out of earth orbit?
[15:40:49] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:40:50] <moon-child> random piece of debris would probably cause trouble anyway
[15:41:09] <moon-child> unless you put, like, a solid 2-metre steel wall or something
[15:41:29] <selwyn> telescope in a pillbox
[15:49:49] <selwyn> these non elliptical orbits are really something
[15:50:37] <ck_> of the scope?
[15:50:49] <selwyn> yes
[15:51:30] <ck_> I see :o neat https://www.youtube.com/watch?v=6cUe4oMk69E
[15:51:31] -ixelp- Animation: The James Webb Space Telescope's Orbit - YouTube
[15:52:23] <ck_> can one orbit a lagrange point in general? I didn't ever think about that before
[15:54:50] <selwyn> https://en.wikipedia.org/wiki/Halo_orbit
[15:55:18] <ck_> thank you
[15:57:01] <Alfr> ck_, L_{4,5} can be stable.
[16:10:14] <selwyn> quarantine is boring
[16:22:05] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[16:35:37] <mfiano> Hmm Is there a way to merge 2 separated git trees as siblings of each other?
[16:35:52] <mfiano> s/separated/separate/
[16:57:34] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 265 seconds)
[17:21:03] <dave0> nite all
[17:21:41] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:34:11] <selwyn> arxiv identifiers use two-digit years
[17:42:32] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[18:31:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:50:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[18:52:17] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[19:07:09] <ck_> how deep is your quarantine, selwyn?
[19:07:20] <selwyn> i just tested negative
[19:07:27] <selwyn> so i might get out tomorrow
[19:07:38] <ck_> neat
[19:07:45] <ck_> do you think the world is still there?
[19:08:02] <selwyn> under a certain set of circumstances, i can test negative and still be required to quarantine
[19:09:01] <ck_> mfiano: siblings in what sense? You could make a new repository and attach the others to that new root, with separate branch-prefixes or something. but that would make them incompatible to continued merging for example, unless I'm mistaken
[19:09:16] <ck_> what is that set of circumstances? your peer group doesn't test negative or something?
[19:09:21] <selwyn> uh
[19:09:24] <ck_> (do you do contact tracing or is that out the window, like here)
[19:09:35] <mfiano> Suppose I have repo1-branch1 and repo2-branch1 and I want to combine these into a new "mono-repo" with these rooted into toplevel sibling sub-directories, without losing their original commit histories. I figured it out though.
[19:10:11] <ck_> oh, right, that's probably what subtrees were made for
[19:10:40] <mfiano> or just merge with --allow-unrelated-histories after fetching
[19:11:39] <selwyn> 1) if the test result is from a pcr test in order to confirm a positive result from a lateral flow test 2) if there were more than 2 days between the tests 3) if i don't live in scotland, wales or n ireland
[19:15:57] <ck_> well I hope freedom is yours soon again
[19:28:54] <selwyn> probably
[19:28:56] <selwyn> i feel fine
[19:29:45] <selwyn> https://coronavirus.data.gov.uk/details/interactive-map/cases
[19:29:53] <selwyn> they keep increasing the extent of the colour bar
[19:34:48] <ck_> how come you are in quarantine anyway? do you know where or from whom you could have contracted it?
[19:35:02] <ck_> oh yeah, the color scale thing is happening here as well
[19:35:18] <selwyn> i have a good idea where i got it from
[19:35:32] <ck_> https://www.tagesschau.de/inland/coronavirus-karte-deutschland-101.html
[19:35:33] -ixelp- Situation in Deutschland: Die Corona-Lage im Überblick | tagesschau.de
[19:36:45] <selwyn> the wedding i went to
[19:37:17] <selwyn> but whether i got it from the wedding itself, or from taking a bus/train leading up to it, i have no idea
[19:38:01] <ck_> is wearing masks mandatory in public transport in the uk?
[19:38:07] <selwyn> it is but not enforced
[19:38:26] <selwyn> last time i was out and about (over 1 week ago) i would say 25-50% of people don't wear one on public transport
[19:38:56] <selwyn> uh
[19:41:43] <selwyn> for a while masks were compulsory on some services but not others, thanks to privatisation
[19:42:20] *** Joins: Catie (~user@user/catie)
[19:43:52] <gilberth> Good morning #lispcafe!
[19:43:57] <selwyn> good morning gilberth
[20:08:48] <sm2n> what do people think of the new ruby JIT?
[20:09:26] <sm2n> https://dl.acm.org/doi/10.1145/3486606.3486781
[20:09:27] -ixelp- YJIT: a basic block versioning JIT compiler for CRuby | Proceedings of the 13th ACM SIGPLAN International Workshop on Vi [...]
[20:09:48] <sm2n> it hit mainline a few days ago
[20:22:21] <gilberth> I wonder, if when compiling the state dispatch in an DFA, it would be a good bet to order the transition tests so that tests for those that loop first would make sense. On the grounds that we bet that another round in the loop is more likely.
[20:23:29] <gilberth> Take a scanner, once you are at a white space, another white space would probably be more likely than some other character.
[20:24:35] <moon-child> sounds legit.  I can not think of any obvious counterexample
[20:24:48] <gilberth> The minimum distance from the current state to the next state could be a measure. Stating at the same state would be zero distance.
[20:25:28] <moon-child> I guess there's probably a decent number of length-1 symbols and integers
[20:26:03] <moon-child> but probably not enough of either that it would be probable to assume them
[20:26:04] <gilberth> Well I still do a binary dispatch/search. This is ok for an initial state in a scanner which has a huge dispatch for all the punctuation. But I think it's not optimal once you're inside white space, a string literal, etc.
[20:26:40] <moon-child> sure
[20:26:54] <moon-child> I was thinking of branch prediction, but that makes sense too
[20:27:22] <gilberth> Ok. I'll give it shot.
[20:28:04] <moon-child> (also: probably could dispatch on the first character.  E.G. symbols starting with x or y are disproportionately likely to have length 1, so you bet the next character is a separator there)
[20:28:11] <gilberth> What I really want in the long run though is profile guided optimization. Makes sens in my application, which is scanning.
[20:28:37] * moon-child nods
[20:28:59] <gilberth> moon-child: I have to tell which separator it is. That is a way larger dispatch than [a-zA-Z_] say.
[20:29:36] <moon-child> sure.  But you save one mispredicted branch.  Sometimes, victory comes from death by a thousand cuts :)
[20:29:39] <gilberth> Just testing for any separator is not enough, I have to tell which one it is.
[20:29:53] <moon-child> (also: you can probably bet that separatoor is   or )
[20:30:16] <gilberth> Profiling will tell me.
[20:30:16] <moon-child> it appears I have lost so many apostrophes they have formed a new character!
[20:31:11] * gilberth tries to look as innocent as he could.
[20:52:55] *** Joins: christophergray (~christoph@190.148.50.74)
[21:18:12] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[22:00:20] <gilberth> Oh dear. Compiling a linear dispatch is not easy. You need to test for a character being in a set, while previous test were already made. This outrules certain values. Say we dispatch on 'a', then on 'b', and then on [^ab], you would expect that the last test would boil down to just T, as the character cannot be 'a' or 'b'. Just take the union of the already tested cases and the current. Easy? [^ab]|[ab] = always true. Easy!
[22:02:27] <gilberth> But it isn't. By that logic the second test for 'b' would turn into [ab]. That is 'a' is handled already, we take the union of 'a' and the current test for 'b'. But: [ab] needs more comparisons than [b]. *sigh*
[22:05:32] <gilberth> Also I wonder if this work on compiling and later profiling a dispatch could also apply to generic function dispatch.
[22:06:45] <gilberth> I mean, that the same work. Perhaps even handling ranges, when you somehow topological sort and index the classes.
[22:09:48] <moon-child> why not: for each range in a given test, check if it is contained completely within the union of all the previous tests, and if so eliminate it?
[22:13:05] <moon-child> though, hmm, you need to do something about [a-c]|[a-d], because it's more efficient to turn the second alternation into d
[22:13:32] <moon-child> maybe there are other complications too
[22:15:55] <gilberth> Hmm, I do that. But that somehow is not enough. Say I handled 'a' 'd' and 'g' already, that is [adg], then I see [^adg]. This is [\000-`b-ce-fi-\255].
[22:16:57] <gilberth> It might not even be the catch all [^adg] but [^adg0-9], say.
[22:18:42] <gilberth> I need to think about that. Also I need a way to detect that detecting for the complement may be cheaper.
[22:20:21] <gilberth> I mean [^b] would be (or (char<= c #\a) (char>= c #\c)). (not (char= c #\b)) is cheaper.
[22:21:29] <gilberth> [And this already dropped the redundant tests for (char>= ch (code-char 0)) and (char<= ch (code-char (1- char-code-limit))).
[22:27:29] <gilberth> Well, given a single range test (<= from ch to), I could widen the range by already handled characters. This could result into adjacent tests to merge. However, it also could turn a singleton test into a range test. /me thinks.
[22:30:00] <moon-child> maybe the thing to do is to consider the range of a given test
[22:30:18] <moon-child> so given a|b|[^ab], the third test is not operating on characters, it's operating on (characters sans a and b)
[22:30:33] <moon-child> so you consider every element in the set separately
[22:30:38] <moon-child> and then construct ranges at the end
[22:31:06] <moon-child> that seems a bit expensive to work with--but I guess you do not care about compile time? :)
[22:31:22] <moon-child> s/range/domain, bleh
[22:31:31] <gilberth> moon-child: I already have a canonical union of ranges, I need to test for.
[22:32:39] <gilberth> That is: The internal representation of the set of characters to map to a transition to take is a union of ranges, no matter what appeared in the RE initially.
[22:33:16] <moon-child> yea: I'm suggesting the opposite
[22:33:36] <moon-child> so then [^ab] is operating in a domain where ` comes right before c
[22:33:57] <moon-child> so then you can see that the test covers the entire domain
[22:34:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:34:23] <gilberth> [^ab] is represented as [\000-`c-\255]
[22:35:06] <moon-child> I understand.  I am suggesting that [^ab] be represented as \000 \001 \002 \003 ... ` c ... \253 \254 \255
[22:35:09] <gilberth> [\000-`c-\x10FFFF] really.
[22:35:34] <gilberth> moon-child: What would that buy me but memory usage?
[22:35:39] *** Joins: epony (epony@user/epony)
[22:36:36] <moon-child> you can easily compute the domain of that test as the complement of a|b
[22:36:57] <moon-child> and then generate optimal code for a given set of accepted characters given its domain
[22:37:24] <gilberth> I could with sums^Wunions of ranges as easy. No need to enumerate all codes.
[22:38:28] <moon-child> then what is the problem?
[22:38:50] <gilberth> moon-child: See <http://clim.rocks/gilbert/isum.lisp>, I have the whole set of Boolean operations on my set data type.
[22:39:21] <moon-child> yes.  But how do you figure out that ` and c are contiguous?
[22:39:52] <moon-child> say it is b|c|[adef].  The last test can be simplified to [a-f]
[22:40:39] <gilberth> moon-child: The problem is, that for the last catch all, which needs to turn into T, taking the union of the already covered characters and the dispatched on works to yield T. Doing so for tests in between would sometimes harm and sometimes do good.
[22:41:35] *** Quits: christophergray (~christoph@190.148.50.74) (Ping timeout: 268 seconds)
[22:41:36] <moon-child> yes.  Hence why I propose considering directly the domain of a given test
[22:41:56] <gilberth> moon-child: b|c|[adef] is represented as as [a-f], always. No matter what.
[22:42:31] <moon-child> gilberth: I mean by that: one test is for b, another is for c, and a third for [adef].  You must do different things in each case
[22:44:10] <gilberth> Yes, here taking the union of b, c, and [adef] does good. When the test after 'a' and 'c' is for 'x' taking the union does no good.
[22:44:37] <moon-child> it is not a binary.  Sometimes you want to union with only some of the already covered characters
[22:45:22] <gilberth> Yep. I consider doing a search.
[22:46:01] <moon-child> I do not understand your dismissal of my proposal to consider the domain of a test explicitly
[22:47:17] <gilberth> I don't get that, because my test is the domain.
[22:48:15] <moon-child> say you have one test, which is for a, and then another test, which is for b.  We can consider the domain of the first test to be the set of all characters; but the domain of the second test is the set of all characters which are not a
[22:48:24] <moon-child> because it will never be given a character which is a
[22:48:41] <gilberth> ok
[22:50:17] <moon-child> if you then have a third test for [`acd], you can do two things.  First: notice that a is not in the domain, and so remove a check for it.  Second: notice that, in the domain, c immediately follows ` and d immediately follows c, and use that knowledge to generate code which checks only for one range
[22:52:51] <gilberth> I won't have a test for [`acd], as there is a transition for 'a'. So I would have [`cd] to begin with.
[22:53:10] <moon-child> ok
[22:53:50] <gilberth> All the test are already a partition of the whole domain.
[22:55:37] <gilberth> So what you do is to take the union of [ab] (already tested) and [`cd] (to test), which is [`-d] and cheaper than [`cd]. I figured that this "take the union" is not always a good move. Hence, I need a search.
[22:57:45] <gilberth> I am just not sure, if I need to consider each range individually, or if I could get away with considering the whole sets.
[22:58:12] <moon-child> I suppose it amounts to the same thing.  Try to completely fill in the gaps between ranges in the current test
[22:59:40] <gilberth> The gaps are the complement of the test. That's easy. Hmm.
[23:05:17] *** Joins: christophergray (~christoph@190.148.51.100)
[23:09:57] *** Quits: christophergray (~christoph@190.148.51.100) (Ping timeout: 240 seconds)
[23:10:44] <gilberth> Gaps are filled by my union operation already. I could take the union of the already tested and the thing to be tested and remove those ranges, which are completely covered yet. This would turn [`cd] into [`-d] while not turning [x] into [abx], but just [x].
[23:11:50] <gilberth> I also need to consider that singleton tests are cheaper and by that a complement test may also be cheaper.
[23:20:19] <selwyn> til only humans have chins
[23:20:29] <ck_> :D
[23:21:00] <ck_> "quarantine is the most effective way of making humans acquire knowledge" -- confucius
[23:21:57] <gilberth> Good. I am in quarantine whole year.
[23:22:28] <White_Flame> I was quarantining before covid made it the cool thing to do
[23:22:33] <ck_> but did *you* already know only humans have chins?
[23:24:59] <gilberth> Depends on what exactly you call a chin.
[23:27:51] <selwyn> is it worth making a resume one page long
[23:29:34] <White_Flame> clearly wolves have chins
[23:29:51] <White_Flame> to quote the encyclopedic reference "Not by the hair of my chinny chin hin!"
[23:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:49:37] <ck_> how far off are you, selwyn?
[23:50:05] <selwyn> zero pages off at the moment
[23:50:13] <ck_> perfect
[23:50:18] <selwyn> i reduced the margins a bit
[23:50:56] <ck_> a friend recommended a page of "selected projects" to me once, I thought that might be good advice (depending on the recipient of course)
[23:51:30] <ck_> you know, like a highlight reel, with shiny graphs and all that
[23:51:43] <selwyn> mine is very academic focused rn
[23:52:53] <ck_> how can it be one page then, don't you need like a half a dozen for publications or something like that?
[23:52:57] <selwyn> well
[23:53:11] <selwyn> an 'academic cv' should be that
[23:53:32] <selwyn> but this is merely a cv for applying for research positions at companies, not a proper academic cv
[23:53:49] <ck_> got it. have you got somewhere specific in mind?
[23:53:50] <selwyn> i also can't fill half a dozen pages with publications lol
[23:54:02] <selwyn> i have a baby publications section
[23:54:14] <selwyn> https://psiquantum.com/
[23:54:16] -ixelp- PsiQuantum | Building the world’s first useful quantum computer.
[23:54:29] <ck_> oh, neat. I wish you good luck and success!
[23:54:35] <selwyn> thanks
[23:55:53] <selwyn> huh, they do remote roles now
[23:57:24] <ck_> "U.S. remote" means anywhere in country?
[23:57:58] <selwyn> i suppose
[23:58:14] <selwyn> i wonder how negotiable the 'u.s.' part of that is in practice
[23:58:50] <ck_> anything is negotiable I would say, depending on who you are or what you bring as an applicant. I mean they don't sound like a company with rigid structures that won't budge
[23:59:49] <ck_> also the "u.s. remote" entries in that job list say "resume submission", so not a specific role they're looking to fill but gathering applications on initiative
