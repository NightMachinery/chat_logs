[00:04:36] <FromDiscord> <IsaacPaul> https://github.com/nim-lang/RFCs/issues/216 ah ok I didn't know nim did that
[00:07:51] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Iqx
[00:08:21] <FromDiscord> <IsaacPaul> but I'm just nitpicking at this point
[00:12:10] *** Joins: xet7 (~xet7@user/xet7)
[00:18:29] <NimEventer> New question by How2: Pythonic string.replace() in Nim?, see https://stackoverflow.com/questions/70355338/pythonic-string-replace-in-nim
[00:19:10] <FromDiscord> <konsumlamm> In reply to @IsaacPaul "But if you look": i literally told you that u8 is special cased
[00:20:42] <FromDiscord> <IsaacPaul> I guess I misunderstood you 🙂
[00:40:48] <NimEventer> New thread by Miran: Release candidates for Nim 1.6.2 and 1.2.16, see https://forum.nim-lang.org/t/8712
[00:42:17] <FromDiscord> <hmmm> o boi we got new stuff?
[00:42:36] <FromDiscord> <hmmm> what kind of new stuff we got 😋
[00:44:10] *** rwb is now known as rb
[00:47:33] <FromDiscord> <impbox [ftsf]> Mmm a changelog would be nice to include in these posts
[01:22:52] *** Joins: tiorock (~rc@192.12.114.194)
[01:22:52] *** Quits: tiorock (~rc@192.12.114.194) (Changing host)
[01:22:52] *** Joins: tiorock (~rc@user/rockcavera)
[01:22:52] *** rockcavera is now known as Guest3263
[01:22:52] *** Quits: Guest3263 (~rc@user/rockcavera) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[01:22:52] *** tiorock is now known as rockcavera
[01:29:10] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[01:31:32] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[01:45:21] <FromDiscord> <ynfle (ynfle)> I'm trying to make a minimal docker image for nim without nimble and stuff like that. Can someone help me? I get this error when copying `/nim/lib/` from `1.6.0-alpine-regular`
[01:45:30] <FromDiscord> <ynfle (ynfle)> /nim/lib/pure/json.nim(162, 16) Error\: cannot open file\: tables
[01:45:40] <FromDiscord> <ynfle (ynfle)> So it at least has some stuff
[02:16:31] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[02:49:11] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:57:51] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[02:58:49] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:59:38] *** Joins: src_ (~src@user/src)
[03:00:24] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Client Quit)
[03:00:37] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:03:14] *** Quits: src_ (~src@user/src) (Client Quit)
[03:03:25] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[03:03:25] *** Joins: src_ (~src@user/src)
[03:15:11] <NimEventer> New thread by Parra: Using C, C#, Java, Wasm, Ruby, Python NodeJS, TypeScript... libraries from Nim with MetaCall, see https://forum.nim-lang.org/t/8713
[03:22:48] *** Quits: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:07:37] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[04:08:06] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[04:14:13] <arkanoid> This is cool! https://godbolt.org/
[04:17:17] <NimEventer> New thread by Dom96: HttpBeast 0.4.0 is here, see https://forum.nim-lang.org/t/8714
[04:22:38] <FromDiscord> <eyis> I am trying to understand slices, but I'm a bit confused.↵This is using  a slice: `val[2 .. 4] = [4, 3, 10]`
[04:22:57] <FromDiscord> <eyis> (edit) "10]`" => "10]`↵but this create a new seq: `var slice = val[2 .. 4]`"
[04:23:28] <FromDiscord> <Elegantbeef> `[]=` and `[]` are different operators
[04:23:41] <FromDiscord> <eyis> I see
[04:24:13] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/version-1-6/lib/system.nim#L2621 if you want to see the impl
[04:24:14] <FromDiscord> <eyis> so you can't have a slice of an array like you can in go, can you?
[04:24:46] <FromDiscord> <Elegantbeef> You can using unsafe methods or `toOpenArray`(cannot be held in a variable)
[04:25:26] <FromDiscord> <Elegantbeef> There is also the experimental views which does allow holding openarrays in variables
[04:27:01] <FromDiscord> <pyautogui> sent a code paste, see https://play.nim-lang.org/#ix=3Irw
[04:27:50] <FromDiscord> <eyis> my next question was about openArray :D are they the recommended way to pass an array of unknown size to a proc?
[04:28:00] <FromDiscord> <Elegantbeef> They are indeed
[04:28:00] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Iry
[04:28:07] <FromDiscord> <eyis> and practically when do you use slices?
[04:28:21] <FromDiscord> <eyis> (edit) "do" => "would"
[04:28:29] <FromDiscord> <Elegantbeef> They're a hidden conversion which allows arrays/sequences to colesce into a API that can be written once
[04:28:45] <FromDiscord> <Elegantbeef> Cause enum arrays/non zero indexed arrays can cause errors in generics
[04:30:23] <FromDiscord> <Elegantbeef> Dont know what to say py, havent looked at aoc in a while so i dont know the intended logic
[04:30:56] <FromDiscord> <eyis> I see. And are openarrays views into the array/seq?
[04:31:07] <FromDiscord> <Elegantbeef> Yes
[04:31:22] <FromDiscord> <pyautogui> Thanks @ElegantBeef  I will keep working by myself.
[04:31:48] <FromDiscord> <Elegantbeef> Openarray is internally a pointer/len but is checked it does not get assigned to a variable without the aforementioned experimental feature
[04:32:17] <FromDiscord> <Elegantbeef> The views feature gives a borrow checker allowing safe usage of openArrays
[04:33:01] <FromDiscord> <Elegantbeef> But as the experimental name suggests it has code gen/design issues, but can be used
[04:33:09] <FromDiscord> <eyis> Great! Thank you for answering :D that covers pretty much all I was wondering about
[04:33:52] <FromDiscord> <Elegantbeef> If you're purely looking at iteration you can now implement slice operators for borrowing slices
[04:34:15] <FromDiscord> <Elegantbeef> Which i do here https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L10-L18
[04:37:25] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[04:37:53] *** Joins: xet7 (~xet7@user/xet7)
[04:38:49] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3IrC
[04:38:52] <FromDiscord> <Rika> I replied to the wrong thing
[04:39:33] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3IrD
[04:40:25] <FromDiscord> <pyautogui> Got it
[04:40:28] <FromDiscord> <pyautogui> Deleting it
[04:40:42] <FromDiscord> <Rika> AFAIK it's GG for those in IRC now
[04:41:07] <FromDiscord> <Rika> Actually no I think it's fine
[04:41:16] <FromDiscord> <Rika> Since code blocks go into pastes
[04:41:41] <FromDiscord> <Rika> Anyway feel free to repost in aoc but the code goes in a paste link
[04:43:37] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[04:56:14] <FromDiscord> <pyautogui> got it
[05:01:43] <FromDiscord> <evoalg> oooo I figured out how to do: `myseq.toHashSet.toSeq` to get rid of duplicates in a list
[05:08:33] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[05:30:53] *** Joins: mahlon (~mahlon@martini.nu)
[05:31:18] <FromDiscord> <Yardanico> In reply to @evoalg "oooo I figured out": why
[05:31:20] <FromDiscord> <Yardanico> there's deduplicate
[05:31:33] <FromDiscord> <Yardanico> https://nim-lang.org/docs/sequtils.html#deduplicate%2CopenArray%5BT%5D%2Cbool
[05:32:55] <FromDiscord> <evoalg> oh thank you!
[05:49:46] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[06:16:27] *** Joins: huantian (~huantian@c-24-23-76-78.hsd1.az.comcast.net)
[06:18:00] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[06:18:13] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:26:07] *** Quits: huantian (~huantian@c-24-23-76-78.hsd1.az.comcast.net) (Quit: WeeChat 3.3)
[06:26:30] *** Joins: huantian (~huantian@c-24-23-76-78.hsd1.az.comcast.net)
[06:32:53] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[06:33:09] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:52:16] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:18:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[07:34:01] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 252 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:00] *** Quits: huantian (~huantian@c-24-23-76-78.hsd1.az.comcast.net) (Quit: WeeChat 3.3)
[08:27:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[09:58:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[10:06:33] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[10:45:05] *** Joins: Guest1650 (~Guest16@43.129.242.42)
[10:52:11] *** Quits: Guest1650 (~Guest16@43.129.242.42) (Quit: Client closed)
[11:05:04] <FromDiscord> <rb3.nim> sent a code paste, see https://play.nim-lang.org/#ix=3IsE
[11:23:58] *** Joins: PMunch (~PMunch@user/pmunch)
[12:15:47] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[12:50:02] *** Joins: pro (~pro@user/pro)
[13:01:07] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[13:04:49] <FromDiscord> <Elegantbeef> @pietroppeter\: like i was saying overloads are handled seemlessly though some caveats exist
[13:05:27] <FromDiscord> <Elegantbeef> `proc(a, b: int or float)` presently generates a `proc(a, b: int)` and `proc(a, b: float)` but not a `proc(a: int, b: float)`
[13:05:36] <FromDiscord> <pietroppeter> ah nice! (we are continuing a discussion that was originally in #fosdem channel)
[13:06:32] <FromDiscord> <Elegantbeef> But if you have `proc doThing(a: int)` and `proc doThing(a: string)` it'll properly handle overloads
[13:06:36] <FromDiscord> <pietroppeter> I was referring to the line in nimscripter's readme when I thought overloads would not work: "Any exported non overloaded and non generic procedures can be called from Nim"
[13:06:54] <FromDiscord> <Elegantbeef> Yea "from Nim" is key
[13:07:28] <FromDiscord> <pietroppeter> 🤦‍♂️
[13:08:50] <FromDiscord> <Elegantbeef> Eitherway i do need to work on documentation, it's as big black box presently
[13:09:35] <FromDiscord> <Elegantbeef> After helping my friend fight with godot-nim for the past few days i'm feeling very self conscious about docs and my code now
[13:09:59] <FromDiscord> <Elegantbeef> As nice as the bindings are, they're hell to use
[13:23:40] <FromDiscord> <Michal58> In reply to @Yardanico "there's deduplicate": Contrary to .toHashSet.toSeq that seems to have quadratic complexity?
[13:43:07] <FromDiscord> <lumi> what's the reasoning for allowing proc call without parenthesis? Is it just for the convenience or is there another reason? (like: `echo "hello world"`)↵I find it hard when reading code to know if `foo.bar` is accessing a field or calling a proc
[13:44:16] <FromDiscord> <Elegantbeef> Well in the case of the method call syntax it's for fields
[13:44:23] <FromDiscord> <Elegantbeef> well properties i should say
[13:45:33] <FromDiscord> <Elegantbeef> So yes mostly for convience/elegance
[13:45:52] <FromDiscord> <Elegantbeef> It's more convient to drop `()` when it's a property than to do `foo.body()` for instance
[13:48:49] <FromDiscord> <Michal58> I guess the idea is we shouldn't treat those two cases as different? Like  `text.len` could very well just be a field of the string the usage would be the same
[13:49:19] <FromDiscord> <Michal58> Also, it's similar to for example C# getters
[13:49:37] <FromDiscord> <Michal58> except Nim is less explicit about it?
[13:49:39] <FromDiscord> <Elegantbeef> Well just properties all together
[13:49:48] <FromDiscord> <Elegantbeef> Nah Nim is equally implicit
[13:50:08] <FromDiscord> <Elegantbeef> If you have a property in C# it's 100% identical to a Nim property
[13:50:22] <FromDiscord> <Elegantbeef> It runs code on field access/assignment
[13:50:33] <FromDiscord> <Elegantbeef> Nim arguably more explicit since there is a proc definition
[13:52:23] <FromDiscord> <Michal58> yeah, so this behaviour in Nim is not even something unusual/suprosing, just the syntax is different?
[13:52:46] <FromDiscord> <Michal58> lol what is suprosing
[13:52:57] <FromDiscord> <Elegantbeef> The syntax they have an issue with is the dropping of `()` which i'd argue means you have badly named functions if you think they could be misconstrude as fields
[13:53:42] <FromDiscord> <Michal58> In reply to @Elegantbeef "The syntax they have": yes, but you droop the () in C# too
[13:53:47] <FromDiscord> <Michal58> (edit) "droop" => "drop"
[13:54:03] <FromDiscord> <Michal58> (edit) "In reply to @Elegantbeef "The syntax they have": yes, but you drop the () in C# too ... " 03added "so I'm just saying this is not only related to Nim"
[13:54:05] <FromDiscord> <Elegantbeef> No you cannot drop `()` on any proc calls
[13:54:17] <FromDiscord> <Michal58> In reply to @Elegantbeef "No you cannot drop": I mean for properties
[13:54:43] <FromDiscord> <Elegantbeef> Yea i know but they're not talking about properties i just brought it up as one reason why `()` is droppable
[13:55:21] <FromDiscord> <Elegantbeef> Chaining is another reason why you can drop them, since `10d.int.mod(2).float` is much more nice to write than `10d.int().mod(2).float()`
[13:55:26] <FromDiscord> <Michal58> And if in Nim, somebody uses that syntax, arguable that are conveying an additional semantics - meaning that the call can be viewed as accessing a property
[13:55:47] <FromDiscord> <Michal58> (edit) "syntax," => "syntax (dropping ()),"
[13:55:54] <FromDiscord> <Elegantbeef> Yea if there is ambiguity it's almost certainly a case of badly named procedures
[13:55:55] <FromDiscord> <Michal58> (edit) "arguable that" => "arguably they"
[13:57:13] <FromDiscord> <Elegantbeef> procedures afterall should be verby
[13:58:07] <FromDiscord> <Elegantbeef> @lumi\: anywho hope that gives you some stuff to reason why they're optional 😛
[13:59:39] <FromDiscord> <Michal58> right, if it's a noun than usually it can be defined as a `func` instead and be treated like a `property` and in that case it doesn't matter that you cannot tell if it is a field or calling that `func` do I make sense, @ElegantBeef ?
[14:00:23] <FromDiscord> <Elegantbeef> Yea ideally it should be a function if it's a property
[14:00:46] <FromDiscord> <Elegantbeef> Property vs field doesnt matter if your properties are properly written and not expensive
[14:02:22] <FromDiscord> <Elegantbeef> This comes down to a case of user ambiguity, really it doesnt matter if something is a proc call or a field, if it looks like a field and it's a property what's the issue "performance"? There are properties that are templates so that's not the case... it's a nothing burger to me
[14:02:30] <FromDiscord> <Michal58> In reply to @Elegantbeef "Property vs field doesnt": yeah that was my idea when I said Nim enforces us to not treat those differently
[14:03:24] <FromDiscord> <Elegantbeef> I do hope lumi chimes in really making me feel like i scared them away
[14:08:24] <FromDiscord> <lumi> Ahah sorry, I had a call.
[14:08:32] <FromDiscord> <lumi> yeah it does! Not sure I like that feature but it does make sense in the context of nim
[14:08:39] <FromDiscord> <lumi> at least your reasoning is sound
[14:09:35] <FromDiscord> <Elegantbeef> Well it's a relatively common thing in languages now, so it's here to stay 😛
[14:10:28] <FromDiscord> <lumi> yes I'm not asking for nim to change for me :D
[14:13:29] <FromDiscord> <Elegantbeef> The interesting thing to note, is that allowing dropping of `()` on proc calls actually means that only setters need to be handled specially
[14:13:51] <FromDiscord> <Elegantbeef> Since all procs can be used as if they're fields the compiler doesnt have to do anything special for getters
[14:14:28] <FromDiscord> <Elegantbeef> I suppose that's only interesting if you like compiler developing any
[14:17:03] <FromDiscord> <Michal58> In reply to @Elegantbeef "The interesting thing to": yeah, that is what I meant when I said in Nim it was less explicit - in Nim everything behaves like a getter implicitly
[14:17:27] <FromDiscord> <Elegantbeef> Ah we were talking about different sides of the coin
[14:17:37] <FromDiscord> <Elegantbeef> I was talking about implementation and you about calling 😀
[14:18:08] <FromDiscord> <Elegantbeef> Anyway i'm off so directly all questions to the nearest paper shreader
[14:27:25] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[14:28:37] *** Joins: xet7 (~xet7@user/xet7)
[14:38:43] *** Joins: PMunch (~PMunch@user/pmunch)
[15:26:07] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3ItO
[15:26:35] <FromDiscord> <Michal58> (edit) "https://play.nim-lang.org/#ix=3ItO" => "https://play.nim-lang.org/#ix=3ItP"
[15:30:17] <FromDiscord> <haxscramper> toplevel procs are not mixined in generics
[15:30:23] <FromDiscord> <SuperFola> i'm guessing this is due to scope rules, you are using functions from heapQueue and HashSet which must call said operator, but they can access only what is top level?
[15:30:34] <FromDiscord> <haxscramper> when you define `>` in a local scope it is defined as `>_somelocalid`, and can't be mixined in generic
[15:31:25] <FromDiscord> <haxscramper> heapqueu looks for `>` visible in the instantiation scope, but `>` is defined locally, and has some additional data to disambiguate it, so it is not considered by gensym
[15:32:23] <FromDiscord> <haxscramper> Although I'm not sure if this is a 100% correct explanation from the compiler implementation standpoint
[15:33:15] <FromDiscord> <Michal58> I see
[15:33:29] <FromDiscord> <Michal58> makes sense actually
[15:33:57] <FromDiscord> <Michal58> but then is there another way of achieving the same?
[15:34:26] <FromDiscord> <Michal58> without having to define it globally
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:18] <FromDiscord> <haxscramper> heapqueue does not have an additional generic parameter that would allow you to specify a comparator (like `std::map` from C++ does for example), so your only option is to define `<` globally.
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:34] <FromDiscord> <haxscramper> Do you need to sort data in two different orders?
[15:36:41] <FromDiscord> <Michal58> hmm, I was afraid you'd say so
[15:36:47] <FromDiscord> <haxscramper> With different behaviors for `<`?
[15:37:07] <FromDiscord> <Michal58> In reply to @haxscramper "With different behaviors for": yes, that would be handy
[15:37:54] <FromDiscord> <haxscramper> You can define `PointSortedOneWay = distinct Point` and `PointSortedAnotherWay = distinct Point`, and define `<` for them, I think currently it is the only solution
[15:38:22] <FromDiscord> <haxscramper> There was an RFC for Table parametrization, I don't remember whether it required to change the language code
[15:38:23] <FromDiscord> <haxscramper> (edit) "code" => "core"
[15:38:35] <FromDiscord> <haxscramper> Maybe it has a library-only solution that is not as dirty as `distinct`
[15:38:49] <FromDiscord> <Michal58> In reply to @haxscramper "You can define `PointSortedOneWay": that doesn't work for what I was trying to do - I don't now the sorting methods nor their count at compile time
[15:39:27] <FromDiscord> <Michal58> by that I mean I'd like to define < inside the function and use nonlocal values in there
[15:40:21] <FromDiscord> <Michal58> so < would be different for each call of shortestDistance in my case
[15:42:03] <FromDiscord> <Michal58> I don't miss OOP in Nim but with OOP you don't have those kinda problems 😄
[15:43:46] <FromDiscord> <Tanguy> You can create a `method >` if you want to do oop
[15:46:47] <FromDiscord> <Michal58> would defining `<` as a `method` inside the function solve the problem?
[15:46:58] <FromDiscord> <Tanguy> I don't think that works
[15:49:23] <FromDiscord> <Tanguy> sent a code paste, see https://paste.rs/4mQ
[15:49:34] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3ItU" => "https://paste.rs/Yu1"
[15:50:27] <FromDiscord> <Michal58> that is kinda funny, but very clever 🙂
[15:50:45] <FromDiscord> <Rika> Cursed
[15:57:25] <FromDiscord> <Michal58> thanks
[16:00:41] <FromDiscord> <haxscramper> In reply to @haxscramper "There was an RFC": I was unable to find this RFC/issue/PR
[16:01:02] <FromDiscord> <haxscramper> But I believe it was by timotheecour
[16:34:33] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[16:57:32] *** Joins: rockcavera (~rc@192.12.113.200)
[16:57:32] *** Quits: rockcavera (~rc@192.12.113.200) (Changing host)
[16:57:32] *** Joins: rockcavera (~rc@user/rockcavera)
[17:01:43] <FromDiscord> <narimiran> we have a release candidate for Nim 1.6.2: https://forum.nim-lang.org/t/8712 - please try it and see if you encounter any regressions
[17:08:40] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[17:09:52] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[17:13:10] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Quit: The Lounge - https://thelounge.chat)
[17:13:49] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[17:21:22] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 260 seconds)
[17:42:52] *** Joins: arkurious (~arkurious@user/arkurious)
[17:57:12] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[18:21:37] *** Quits: fputs (~fputs@67.59.83.166) (Quit: The Lounge - https://thelounge.chat)
[18:23:39] *** Joins: fputs (~fputs@67.59.83.166)
[18:27:22] *** Quits: ecs (ecs@user/ecs) (Ping timeout: 268 seconds)
[18:27:52] *** Joins: ecs (~ecs@user/ecs)
[18:28:33] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Ping timeout: 250 seconds)
[18:50:54] *** Joins: xet7 (~xet7@user/xet7)
[18:53:25] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:14:06] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[19:24:46] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3Iv5
[19:25:52] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3Iv6
[19:26:18] <FromDiscord> <hmmm> oh this look cool except I need to import an entire module to do it. what is it
[19:26:21] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3Iv6" => "https://play.nim-lang.org/#ix=3Iv7"
[19:26:22] <FromDiscord> <hmmm> "it"
[19:27:11] <FromDiscord> <Tanguy> https://nim-lang.org/docs/sequtils.html#keepItIf.t%2Cseq%2Cuntyped↵↵keepItIf will call what you give in parameter for each value in the sequence, replacing the magic `it` by the current value
[19:27:26] <FromDiscord> <hmmm> I see
[19:28:09] <FromDiscord> <Tanguy> sequtils has a lot of useful stuff, if you don't use it you'll have to do it manually, like you did, more or less
[19:33:00] <FromDiscord> <Rosen> Hold on, what's the difference between keepItIf and filterIt?
[19:33:53] <FromDiscord> <hmmm> damn sequtils is like heroi- I mean magicks
[19:34:17] <FromDiscord> <hmmm> pmunchie should do a tutorial series on sequtils tbh
[19:34:29] <FromDiscord> <hmmm> summoning pmunchie 🧔‍♂️
[19:35:18] <FromDiscord> <el__maco> sent a code paste, see https://play.nim-lang.org/#ix=3Ivf
[19:35:29] <FromDiscord> <el__maco> perhaps unsurprisingly the runtime isn't happy with this
[19:36:25] <FromDiscord> <hmmm> maco this is the saner version I couldn't think of when I yoloed my while instead. But the sequtils one looks so much better than both
[19:36:52] <FromDiscord> <el__maco> mine doesn't work. You cannot delete from the container you're iterating over
[19:37:04] <FromDiscord> <hmmm> maybe you need to use mitems?
[19:37:17] <FromDiscord> <el__maco> maybe someone knows how to express it in a way it actually works 😅
[19:37:30] <FromDiscord> <Rosen> What do you guys use to measure runtime? I want to try a few different ways
[19:38:19] <PMunch> epochTime or monotimes
[19:38:20] <FromDiscord> <hmmm> In reply to @Rosen "What do you guys": yea I'm interested too, also I want to know how to debug without echo like a champ without hassling setups
[19:38:52] <PMunch> You can do debugging with GDB if you like
[19:39:04] <FromDiscord> <hmmm> munchie direct me to an example
[19:39:17] <FromDiscord> <hmmm> do you use echo munchie?
[19:39:21] <PMunch> Of gdb usage?
[19:39:26] <FromDiscord> <hmmm> yes
[19:39:28] <PMunch> `gdb myprogram`
[19:39:39] <FromDiscord> <hmmm> oh really
[19:39:48] <PMunch> Huh?
[19:40:11] <FromDiscord> <hmmm> sorry for the confusion I know absolutely nothing about gdb 😅
[19:42:49] <FromDiscord> <Rika> In reply to @el__maco "maybe someone knows how": It is required to use two containers
[19:43:02] <FromDiscord> <Rika> In reply to @Rosen "Hold on, what's the": Keep on true versus remove on true
[19:43:38] <FromDiscord> <Rosen> But filter keeps on true as well
[19:44:28] <FromDiscord> <Rosen> Oh! keepItIf is in-place while filterIt is creating a new seq
[19:44:44] <FromDiscord> <Rika> ?
[19:44:59] <FromDiscord> <Rika> Let me check I was pretty sure filter was remove on true
[19:45:33] <PMunch> @hmmm, this is probably helpful: https://internet-of-tomohiro.netlify.app/nim/gdb.en.html
[19:45:48] <FromDiscord> <Rika> That’s right I guess
[19:45:56] <FromDiscord> <Rika> Strange break of naming tradition
[19:46:15] <FromDiscord> <el__maco> In reply to @Rika "It is required to": hmm, so you have to basically create a duplicate container when you remove items from it? If so, is the sequtils solution more efficient?
[19:46:48] <FromDiscord> <Rika> In reply to @el__maco "hmm, so you have": Actually I can think of a way to do filtering on one container
[19:47:12] <FromDiscord> <Rika> “Sort” the proper elements and resize the container
[19:47:13] <FromDiscord> <el__maco> I guess if a seq is dynamic array then you kinda have to copy if you want to maintain the order of the items
[19:47:21] <FromDiscord> <Rika> No resizes during iteration but swaps occur
[19:47:55] <FromDiscord> <Rika> Only extra data needed is a tracked index for the next “sorted” location I guess
[19:48:04] <NimEventer> New question by How2: Pythonic dir(module_name) in Nim?, see https://stackoverflow.com/questions/70366960/pythonic-dirmodule-name-in-nim
[19:49:48] <FromDiscord> <Gready> hello, i can't get this simple macro example to compile : https://stackoverflow.com/questions/65519270/nim-custom-macro-pragma-to-get-ast-of-complete-module-but-get-cannot-attach-a, but i get undeclared identifer for the proc when i add the pragma to the function, any idea why? https://play.nim-lang.org/#ix=3Ivj
[19:50:48] <FromDiscord> <hmmm> In reply to @PMunch "<@887269570765791243>, this is probably": thanks munchie! I skimmed it and for my purposes looks totally overkill unless my apps grow so much I end up needing it. I was thinking along the line of some automatic logger that is not a hassle to setup
[19:51:04] <FromDiscord> <Rika> In reply to @Gready "hello, i can't get": For the proc you must return the ast again
[19:51:16] <FromDiscord> <Rika> Because the macro consumes the code
[19:51:31] <FromDiscord> <Rika> So now you can’t call it because it technically doesn’t exist
[19:51:47] <PMunch> @hmmm, automatic logger? What kind of stuff would you like to log?
[19:52:30] <FromDiscord> <Gready> @Rika thanks!
[19:54:53] <FromDiscord> <hmmm> In reply to @PMunch "<@887269570765791243>, automatic logger? What": hmm don't know how to explain. the kind of stuff I usually echo for debug. Like something that can be disabled and reenabled massively, or makes a copy on file
[19:55:20] <FromDiscord> <Rika> so literally just std/logging
[19:55:21] <FromDiscord> <Rika> ?
[19:55:27] <FromDiscord> <hmmm> hmm possibly?
[19:55:32] <FromDiscord> <hmmm> I should look into it
[19:55:39] <PMunch> @Rika, he wants it to log automatically
[19:56:08] <FromDiscord> <Rika> log...what
[19:57:45] <PMunch> Exactly
[19:59:39] <FromDiscord> <hmmm> basically something that records the echo of all the variables of interest without actually peppering all the program of echo statements. I don't even know if it exist lol
[20:00:32] <PMunch> It doesn't, and it can't really :P
[20:00:41] <FromDiscord> <hmmm> oh I see 😦
[20:00:47] <PMunch> How would the program know what variables are interesting?
[20:01:08] <FromDiscord> <hmmm> hmm I can mark them
[20:01:13] <PMunch> I guess you could write a macro that does something, but I've never seen anything like that
[20:02:47] <FromDiscord> <Rika> In reply to @hmmm "hmm I can mark": then its not automatic lol
[20:03:29] <FromDiscord> <hmmm> I mean the pain point is having to clean up all the echoes after fixing the broken program, and when it breaks again maybe you want all the previous echoes back and it's just a hassle
[20:04:56] <FromDiscord> <Rika> std/logging then
[20:05:03] <FromDiscord> <Rika> can  turn it on and off easy
[20:05:11] <FromDiscord> <hmmm> I'll look into it
[20:05:24] <FromDiscord> <Rika> can also direct debug into a file and everything else into stdout
[20:05:30] <FromDiscord> <Hamid_Bluri> have you seen this btw?↵https://github.com/hamidb80/uncomment/
[20:09:05] <FromDiscord> <hmmm> In reply to @hamidb80 "have you seen this": this is very gud my man! Now just make a version that actually comments stuff out based on a switch and you have a sell!
[20:09:54] <PMunch> You could just create a small wrapper pragma that either adds uncomment or nothing to the pragmas set based on a switch
[20:10:09] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:10:23] <FromDiscord> <hmmm> you could but I cannot since I never made a pragma in my life lol
[20:11:41] <PMunch> Time to learn something new then I guess :)
[20:12:32] <FromDiscord> <Hamid_Bluri>  https://media.discordapp.net/attachments/371759389889003532/920717470782869534/unknown.png
[20:12:40] <FromDiscord> <hmmm> oh he can't see
[20:12:42] <FromDiscord> <Hamid_Bluri> he's really pmunch
[20:13:03] <PMunch> Haha :P
[20:13:09] <nrds> <06Prestige99> Lol
[20:15:25] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[20:15:50] *** Joins: fputs7 (~fputs@67.59.83.166)
[20:17:39] <FromDiscord> <Rosen> Trying to mess around with macros, I'm wondering how to generate an unused Ident. I'm trying to make some sort of thing that will insert a timing around some code, but when I use for example ↵`result.add newLetStmt(newIdentNode("startTime"), newCall("getMonoTime"))`, if one declares the variable startTime in the block I'm passing to this macro, the compiler complains
[20:17:45] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 250 seconds)
[20:17:45] *** fputs7 is now known as fputs
[20:17:50] <FromDiscord> <Rosen> Anyone know how to solve that?
[20:19:04] <FromDiscord> <Hamid_Bluri> https://nim-lang.org/docs/macros.html#genSym%2CNimSymKind%2Cstring
[20:19:19] <FromDiscord> <Rosen> Aha! That's exactly what I was looking for, thank you!
[20:20:04] *** Joins: rockcavera (~rc@192.12.113.200)
[20:20:04] *** Quits: rockcavera (~rc@192.12.113.200) (Changing host)
[20:20:04] *** Joins: rockcavera (~rc@user/rockcavera)
[20:51:54] <FromDiscord> <z3nchada> Has anyone run across a tool for statically finding call traces? I wanted to generate call graphs for nim code and hoped to not need to go the path of regex. Also if there is a better way then regex I am all ears.
[20:52:14] <FromDiscord> <z3nchada> (edit) "Has anyone run across a tool for statically finding call traces? I wanted to generate call graphs for nim code and hoped to not need to go the path of regex. Also if there is a better way then regex I am all ears. ... " 03added "It would need to be across files and libraries."
[20:53:07] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Read error: Connection reset by peer)
[20:53:43] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[21:26:05] <FromDiscord> <hmmm> with std/options an int that is 0 is different from an int that is none right?
[21:27:39] <FromDiscord> <Rika> yes
[21:27:42] <FromDiscord> <hmmm> still it's a bit verbose
[21:27:48] <FromDiscord> <Rika> yes
[21:27:49] <FromDiscord> <hmmm> how does python do the same?
[21:27:57] <FromDiscord> <Rika> it has the None type
[21:28:07] <FromDiscord> <hmmm> oh
[21:28:12] <FromDiscord> <hmmm> and where is our none
[21:28:22] <FromDiscord> <Rika> semantics are similar to nil but applicable for everything because dynamic typing
[21:28:29] *** Joins: Colt (~Colt@user/colt)
[21:28:35] <FromDiscord> <hmmm> ah ok it's a dynamic vs static thingy
[21:28:39] <FromDiscord> <Rika> yes
[21:28:56] <FromDiscord> <Rika> well no, a lot of verbosity can be reduced in std/options
[21:28:57] <FromDiscord> <Rika> if
[21:29:07] <FromDiscord> <Rika> we had "reverse" type inference
[21:29:14] <FromDiscord> <Rika> rhs -> lhs inference
[21:29:31] <FromDiscord> <Rika> wait
[21:29:37] <FromDiscord> <Rika> no l -> r inference i think is what i mean
[21:29:58] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3IvL
[21:30:06] <FromDiscord> <Rika> what?
[21:30:08] <FromDiscord> <hmmm> lol
[21:30:14] <FromDiscord> <hmmm> it was a dumb question don't worry
[21:30:18] <FromDiscord> <Rika> that makes no sense, you mean to build in options?
[21:30:18] <FromDiscord> <hmmm> 😅
[21:33:30] <FromDiscord> <Rika> i shall go, it is 3 am
[21:34:53] <FromDiscord> <hmmm> good sleep rika
[22:10:28] *** Joins: src (~src@user/src)
[22:31:24] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[22:51:51] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[23:05:13] <FromDiscord> <spazzy> so im trying to translate a c header file and c2nim doesnt like (...)  in any macro
[23:05:22] <FromDiscord> <spazzy> where its trying to load a file
[23:06:53] <FromDiscord> <spazzy>  https://media.discordapp.net/attachments/371759389889003532/920761352316928060/unknown.png
[23:07:15] <FromDiscord> <spazzy> any ideas
[23:13:16] <FromDiscord> <Solitude> yeah, parser is incomplete, c2nim requires manual pre/postprocessing
[23:16:05] <FromDiscord> <spazzy> if i define it as a def it doesn't help
[23:24:08] *** Joins: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de)
[23:24:08] *** Quits: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de) (Changing host)
[23:24:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:30:53] <FromDiscord> <IsaacPaul> delete the macro
[23:32:26] <FromDiscord> <IsaacPaul> if you set up clangd with vscode and create a `compile_commands.json` at the root of your project you should have an option to resolve the macro into code.
[23:34:53] <FromDiscord> <geekrelief> In reply to @spazzy "so im trying to": What's the macro c2nim is failing on?
[23:39:58] <FromDiscord> <spazzy> all of them that have a variadic function
[23:40:11] <FromDiscord> <spazzy> which is most of them lol
[23:40:36] <FromDiscord> <spazzy> im trying to translate https://github.com/krychu/wfc
[23:41:23] <FromDiscord> <geekrelief> Cool library, I was hoping to do some WFC eventually.
[23:41:37] <FromDiscord> <spazzy> yeah i thought i might as well go ahead and make it a package
[23:42:20] <FromDiscord> <spazzy> it would save me a lot of time with the thing im working on
[23:42:46] <FromDiscord> <spazzy> and i might as well pass it forward
[23:43:22] <FromDiscord> <geekrelief> is `...` a preprocessor operator?
[23:44:13] <FromDiscord> <geekrelief> found it https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html
[23:44:23] <FromDiscord> <geekrelief> I wonder if this works in nimterop
[23:44:42] <FromDiscord> <spazzy> yeah if it wasnt one it wouldnt work at all right?
[23:46:13] <FromDiscord> <spazzy> so ive never used nimterop
[23:46:26] <FromDiscord> <spazzy> but doesnt it not output a nim file like c2nim does?
[23:46:35] <FromDiscord> <spazzy> its mostly for inline stuff?
[23:47:10] <FromDiscord> <geekrelief> nimterop is a separate binding generator based on tree-sitter.  It's been abandoned, but I forked it to wrap The Machinery.
[23:47:17] <FromDiscord> <geekrelief> I've had success so far.
[23:47:29] <FromDiscord> <spazzy> how well does your wrap work anyway
[23:47:44] <FromDiscord> <spazzy> (edit) "wrap" => "wrapper"
[23:48:10] <FromDiscord> <spazzy> i was thinking about using it for something but i settled with raylib
[23:48:56] <FromDiscord> <IsaacPaul> You could try this.. but I don't think it will help.. https://github.com/izackp/c2nim - It's a fork that recovers from errors better (in the cases I've tried)
[23:51:08] <FromDiscord> <geekrelief> In reply to @spazzy "how well does your": converted the first person example so far https://media.discordapp.net/attachments/371759389889003532/920772484607909938/Umtezvizeu-1.mp4
[23:52:06] <FromDiscord> <spazzy> nice
[23:53:06] <FromDiscord> <IsaacPaul> 😮 ... are your keywords.. glowing
[23:53:10] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3IwD
[23:53:18] <FromDiscord> <geekrelief> In reply to @IsaacPaul "😮 ... are your": maybe 🙂
[23:54:01] <FromDiscord> <Elegantbeef> Geek uses that weird extension that simulates phosphorus displays
[23:54:01] <FromDiscord> <hmmm> In reply to @geekrelief "converted the first person": what is this wizardry and how can I play with it
[23:54:08] <FromDiscord> <Recruit_main707> In reply to @geekrelief "just tried nimterop on": iirc nimterop just ignored issues and emitted the c code as a comment instead of stopping
[23:54:50] <FromDiscord> <geekrelief> In reply to @Recruit_main707 "iirc nimterop just ignored": yea pretty much.
[23:54:57] <FromDiscord> <spazzy> huh
[23:55:17] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3IwE
[23:56:55] <FromDiscord> <geekrelief> In reply to @hmmm "what is this wizardry": yeah I have it up here: https://github.com/geekrelief/tm-nim  but it's a work in progress. I've only converted the first person example so far, but it took quite a bit of work to get there.  I'm currently working on my genit macro before I continue with TM.
[23:58:17] <FromDiscord> <spazzy> you know for a language that compiles to c, i feel like the wrapping is kind of weird
[23:58:34] <FromDiscord> <spazzy> (edit) "wrapping" => "wrapping/translating"
