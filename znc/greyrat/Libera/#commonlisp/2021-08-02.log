[00:06:10] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Ping timeout: 240 seconds)
[00:07:20] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[00:09:58] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:10:42] *** Quits: pegaso (~reis-r@131.72.121.30) (Quit: Leaving)
[00:14:57] *** Quits: zos (~zos@ool-457a8044.dyn.optonline.net) (Quit: Leaving)
[00:21:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[00:26:28] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[00:33:14] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:39:13] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[00:49:00] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[00:49:05] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[00:49:52] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[01:02:24] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 272 seconds)
[01:05:01] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[01:06:38] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[01:06:50] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:12:49] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[01:17:37] *** Joins: Bike (~Bike@71.69.170.70)
[01:17:37] *** ChanServ sets mode: +o Bike
[01:20:35] *** Quits: pve (~pve@87-93-136-138.bb.dnainternet.fi) (Quit: leaving)
[01:25:52] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[01:26:46] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Quit: Leaving...)
[01:30:21] *** Quits: frgo_ (~frgo@p200300deef181d00a166054f1275918f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:30:50] *** Joins: frgo (~frgo@p200300deef181d00dcb5028d15d76cdf.dip0.t-ipconnect.de)
[01:36:57] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[01:37:14] *** Quits: psycomic (~psycomic@2a01cb0588c5e4009135c9a7fd9986ce.ipv6.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[01:41:46] *** Joins: shka (~herr@109.231.62.239)
[01:48:30] *** Joins: tfeb (~tfb@88.98.95.237)
[01:48:46] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[01:57:59] *** Joins: selwyn (~selwyn@user/selwyn)
[01:58:06] *** Quits: Melantha (~pyon@user/pyon) (Quit: WeeChat 3.2)
[02:00:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:00:36] *** Quits: gaqwas (~john@dynamic-095-115-067-118.95.115.pool.telefonica.de) (Ping timeout: 272 seconds)
[02:00:57] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[02:09:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[02:22:12] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[02:22:28] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[02:30:02] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:35:31] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[02:47:26] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[02:52:04] *** Joins: tfeb (~tfb@88.98.95.237)
[02:57:58] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[03:00:01] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[03:09:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:12:31] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[03:18:44] *** Joins: cjb (~cjb@user/cjb)
[03:19:06] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 276 seconds)
[03:20:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:22:02] *** Quits: frgo (~frgo@p200300deef181d00dcb5028d15d76cdf.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:22:29] *** Joins: frgo (~frgo@p200300deef181d00dcb5028d15d76cdf.dip0.t-ipconnect.de)
[03:34:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:38:18] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[03:39:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:42:43] *** Joins: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca)
[03:51:02] *** Joins: akoana (~ah@user/akoana)
[03:54:01] *** Joins: dlowe (~dlowe@user/dlowe)
[04:02:56] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:03:26] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[04:03:41] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[04:04:10] *** Quits: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca) (Ping timeout: 272 seconds)
[04:04:48] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:07:22] *** Joins: igemnace (~ian@user/igemnace)
[04:09:53] *** Joins: Bike (~Bike@71.69.170.70)
[04:09:53] *** ChanServ sets mode: +o Bike
[04:39:01] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 250 seconds)
[05:17:04] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:28:37] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:28:55] *** Joins: Bike (~Bike@71.69.170.70)
[05:28:55] *** ChanServ sets mode: +o Bike
[05:48:27] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[05:48:40] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[06:16:06] *** Joins: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca)
[06:18:49] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[06:19:02] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[06:34:54] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[06:38:13] *** Joins: atgreen (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com)
[06:46:25] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 250 seconds)
[06:47:23] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[07:04:02] *** Joins: prxq_ (~quassel@x4db4d3c2.dyn.telefonica.de)
[07:05:33] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[07:08:28] *** Quits: prxq (~quassel@x4db90c59.dyn.telefonica.de) (Ping timeout: 272 seconds)
[07:10:40] *** Joins: silasfox_ (~sbv@2a0a-a540-4382-0-698f-2153-29cf-9f8a.ipv6dyn.netcologne.de)
[07:14:13] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Ping timeout: 265 seconds)
[07:21:11] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:22:07] *** Joins: green__ (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com)
[07:24:56] *** Quits: atgreen (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com) (Ping timeout: 272 seconds)
[07:28:51] *** Joins: lisp-newbie (~lisp-newb@190.218.237.48)
[07:31:19] <beach> Good morning everyone!
[07:35:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Read error: Connection reset by peer)
[07:47:38] *** Joins: Bike (~Bike@71.69.170.70)
[07:47:38] *** ChanServ sets mode: +o Bike
[08:14:20] *** Quits: green__ (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com) (Ping timeout: 272 seconds)
[08:17:56] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[08:23:22] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 256 seconds)
[08:28:20] *** Quits: nirnam (~nirnam@1.46.144.168) (Read error: Connection reset by peer)
[08:33:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:34:02] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:36:18] *** Joins: green__ (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com)
[08:41:58] <char> the following doesn't work (end-of-file). I don't understand why the output isn't being read.
[08:46:00] <char> https://paste.debian.net/1206304/
[08:46:46] *** Quits: lisp-newbie (~lisp-newb@190.218.237.48) (Quit: Leaving)
[08:54:16] *** Parts: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca) (Leaving)
[08:55:11] <beach> It looks to me like you need to make your output go to the input stream of the echo stream.
[08:57:34] <pillton> char: When you write to S in your example it sends the data to the output stream.
[08:57:48] <pillton> char: I think you need another library to create a pipe.
[08:58:22] <char> I see now. pillton: which library would that be?
[08:59:15] <pillton> I am trying to think. I have seen someone do it but I can't remember where.
[09:01:20] <pillton> cl-plumbing I think.
[09:01:56] <pillton> I imagine there would be a few implementations.
[09:02:37] <pillton> I'd look for systems/libraries which depend on trivial-gray-streams.
[09:14:32] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:18:01] <kakuhen> iirc osicast-posix has a wrapper for pipes
[09:18:32] <kakuhen> yup it exists, i just checked
[09:18:55] <kakuhen> and iirc this same library also offers a relatively portable way to make "fd-streams"
[09:23:43] *** Quits: silasfox_ (~sbv@2a0a-a540-4382-0-698f-2153-29cf-9f8a.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[09:24:19] <beach> jcowan: We can't know that all those function should be changed.  The reason I am making individual issues is so that each one can be discussed and voted upon separately.
[09:25:06] <beach> jcowan: But thanks for the list of candidates.  It saves me a lot of work going through each Common Lisp HyperSpec page.
[09:26:59] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[09:31:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[09:34:08] *** Quits: green__ (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com) (Ping timeout: 272 seconds)
[09:34:15] *** Joins: maddog (~user@2600:6c52:457f:bc2b:813e:18f5:e35c:4005)
[09:37:38] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:38:04] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:54:33] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:54:44] *** Joins: silasfox_ (~sbv@xdsl-87-78-42-3.nc.de)
[10:05:38] *** Joins: shka (~herr@109.231.62.239)
[10:07:07] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:10:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[10:18:12] *** Joins: spiaggia (~user@2a01:cb19:150:3400:45fb:6ea:ed7:77ac)
[10:21:15] *** Joins: nirnam (~nirnam@1.46.144.168)
[10:31:38] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[10:40:11] <moon-child> 'Prima facie these are all candidates for adding type-error for each wrongly typed argument'  barring constructors and predicates, and a couple of other fun ones like constantly
[10:42:41] <spiaggia> Yes, it's a good list.
[10:43:11] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:43:47] *** Joins: gaqwas (~john@dynamic-077-007-123-010.77.7.pool.telefonica.de)
[10:44:00] <moon-child> (actually, I guess constantly is a function constructor :P)
[10:45:42] <spiaggia> By "barring", do you mean that they are not (yet) on the list, or that they are and they shouldn't be?
[10:46:02] <moon-child> the latter
[10:46:03] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[10:47:35] <spiaggia> Why would you exclude constructors?
[10:48:05] <moon-child> when would, say, CONS signal a type error?
[10:48:09] <spiaggia> clhs make-echo-stream
[10:48:10] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ech.htm
[10:48:36] *** Quits: maddog (~user@2600:6c52:457f:bc2b:813e:18f5:e35c:4005) (Quit: rack time)
[10:48:44] <spiaggia> Sure, CONS should not.  But other constructors might, like MAKE-ECHO-STREAM.
[10:48:57] <moon-child> you are right.  I should have said 'certain constructors'
[10:49:17] <spiaggia> Ah, OK.  I understand.
[10:51:52] <phantomics> Hi, a question. I can't create subclasses of built-in CL classes like simple-array, so is there any other way of creating an array that has some specialized metadata that it carries with it but which functions as a standard array in all other respects and can be arefed and measured without the code doing so needing to be aware of its special type?
[10:52:19] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:53:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[10:53:34] *** Lord_of_Life_ is now known as Lord_of_Life
[10:54:22] <hayley> You could put the metadata in a weak hash table, but of course that is not in the array, and it is not reflected in the type system.
[10:54:56] <phantomics> That's what I've been doing, created a big hash table whose keys are the actual arrays I'm keeping track of
[10:55:08] <phantomics> There are various annoyances with this approach
[10:57:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[10:57:47] <spiaggia> You need to wait for SICL in which arrays are instances of standard classes. :)
[10:58:08] <flip214> phantomics: you could have a few reserved elements in your array - eg. at the beginning. (Perl would allow to specify a negative start point for the indizes; CL doesn't, sadly.)
[10:58:11] <spiaggia> And no, you can't create subclasses of built-in classes.
[10:58:13] <moon-child> I thought you were still not going to allow user code to subclass them, for portability reasons?
[10:58:19] <phantomics> Sounds great, but will only work with SICL
[10:58:45] <spiaggia> moon-child: Me?  It will be hard to stop them.
[10:59:17] <phantomics> flip214: the problem with that approach is that I want these arrays to be usable with any old CL code outside the system without someone having to make special allowances
[10:59:32] <moon-child> Hm.  I thought you had said you were going to add a special-case to prevent that.  I must be misremembering
[10:59:54] <spiaggia> I may have said that.  And I may have changed my mind. :)
[11:00:22] <moon-child> :)
[11:00:51] <flip214> phantomics: CL21 might allow that - (defgeneric getf (place key &optional default)
[11:00:52] <phantomics> Currently, the arrays April generates are completely standard Lisp arrays, you can aref them, take their size and dims like any other array. If I wrap the contents in another array structure containing metadata it'll defeat that purpose, I might as well create a special class containing the array and its metadata at that rate
[11:01:23] <moon-child> phantomics: what metadata do you want to store?
[11:01:26] <spiaggia> moon-child: In fact, I think it would be a good idea to expose the mechanism by which I create specialized arrays, so that someone who wants an array of (say) 24-bit integers can do that.  It is basically a matter of defining the transformations CST-AST-HIR-MIR and associated classes.
[11:02:44] <flip214> phantomics: you could make the visible array displaced, and keep the metadata in the array the visible one is displaced to
[11:02:45] <phantomics> moon-child: I want to store something called the "array prototype." This sounds very strange, but an APL array will "remember" what its first element was if you shrink it to size zero, and if you then take that 0-size array and do a larger take of it, it'll reproduce its first element
[11:02:49] <spiaggia> moon-child: And, the SICL code should also be structured this way in fact.  Currently, that's not the case.
[11:03:09] <flip214> but that makes a bit of difference - performancewise, and what you can do with that (displaced) array
[11:03:59] <phantomics> moon-child: if an array's first element is an array itself, the prototype will be an array of the same composition but with all its values set to the default for its type, like blanks for characters and zeroes for any other type. Hopefully that makes some sense
[11:04:14] <moon-child> phantomics: what is wrong with using a fill pointer?
[11:05:56] <phantomics> moon-child: so for a 20x10 array with metadata, I could have the base array be a 201-element vector with the first element containing metadata, and then there would be a 20x10 array displaced to it with an offset of 1?
[11:07:37] <moon-child> that could work
[11:08:02] <phantomics> If I have a fill pointer my understanding is that the (array-size), (aref) and other functions will still be aware of the array's full size, my goal is to have something that behaves just like an array for an external system that receives these arrays but has some special metadata
[11:08:18] <moon-child> though note for certain higher-rank array operations it is useful to pad the shape to have some alignment
[11:08:18] <phantomics> Is there a way to find out the array that a given displaced array references?
[11:09:21] <moon-child> clhs array-displacement
[11:09:22] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_ar_dis.htm
[11:10:53] <phantomics> Ok, that could work, so you're suggesting create an extra row for the "parent" array, the first element would be the metadata and the rest of the element would be blank
[11:11:44] <phantomics> Although the thing is, all arrays that need this metadata are necessarily empty, like (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (0 0 0))
[11:11:54] <phantomics> If an array is populated I don't need to store this data for it
[11:12:24] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[11:14:27] <flip214> phantomics: well, then declare (deftype my-array-prototype () T), and when an array should be empty it actually contains 1 element, with that type.
[11:14:51] <flip214> so, by checking the :element-type, you can see that an incoming array should be treated as empty.
[11:15:14] <flip214> (deftype my-empty-array-prototype () t), perhaps.
[11:15:52] <flip214> basically, use the element-type of an array to store _whether_ it is special - and then it may contain arbitrary data.
[11:16:07] <flip214> makes it even non-displaced, and not needing a fill pointer - both good for performance.
[11:16:16] <spiaggia> flip214: Are you assuming that ARRAY-ELEMENT-TYPE returns whatever you used when it was created?
[11:16:27] <phantomics> Ok, so I can store arbitrary data in the element-type?
[11:17:12] <flip214> spiaggia: yes. Is that wrong?
[11:17:12] <phantomics> Because the prototype of the array is an array itself, i.e. #2A((0 0 0 0) (0 0 0 0) (0 0 0 0))
[11:17:20] <flip214> phantomics: well, arbitrary types, at least
[11:17:44] <phantomics> And the array can even be nested, that's a tough part
[11:18:06] <flip214> well, you can also define a structure that contains the prototype - and have that as element-type for empty arrays.
[11:18:12] <phantomics> So unless I can store an arbitrary array inside that type it won't work
[11:18:17] <spiaggia> flip214: Try (array-element-type (make-array 234 :element-type 'symbol))
[11:18:23] <phantomics> Ok, so a struct can be an element-type
[11:18:39] <spiaggia> phantomics: It won't work.
[11:18:41] <flip214> phantomics: (defstruct my-empty-array-type (prototype)) (make-array 1 :element-type my-empty-array-type)
[11:18:56] <spiaggia> flip214: It won't work.
[11:19:14] <spiaggia> clhs array-element-type
[11:19:14] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_ar_ele.htm
[11:19:49] <flip214> hrmpf
[11:19:51] <flip214> right
[11:20:29] <flip214> another idea: only when empty, the array is displaced - to another array, whose elements contain the dimensions and/or type
[11:20:54] <flip214> so array-displacement is the boolean check for emptiness
[11:21:05] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:21:41] <phantomics> That sounds like the best approach
[11:22:04] <phantomics> I only need to collect this data for empty arrays that were reduced from an array with an array as its first element
[11:22:25] <phantomics> So when that is done, I'll create a 0-size array that's displaced to a 1-size vector whose element contains the list of metadata
[11:24:16] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[11:30:15] <flip214> it might be more convenient to have a non-displaced array with a :fill-pointer 0 and size 1, with the prototype in index 0. perhaps there's a performance difference for array-has-fill-pointer-p vs array-displacement.
[11:31:37] <moon-child> empty arrays are likely to be the exception rather than the rule.  And fetching the prototype is a constant overhead in any case.  I don't think optimizing heavily for that case is worthwhile
[11:36:36] <phantomics> Yeah, the logic will be 1) is the array empty? 2) is it displaced? 3) get the displaced-to array and check for valid metadata
[11:37:08] <phantomics> This is a corner case and one of the stranger things about APL's array model, the only aspect that can't be neatly reproduced in CL
[11:38:43] <moon-child> prototypes are convenient at times, but ... I don't like them
[11:38:51] <moon-child> you're making your own implementation!  Break from convention!
[11:39:15] *** Parts: spiaggia (~user@2a01:cb19:150:3400:45fb:6ea:ed7:77ac) (ERC Version 5.3 (IRC client for Emacs))
[11:43:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:44:10] <phantomics> That's the trouble with CL... if you want to break from convention you open the door to a host of compatability problems
[11:44:33] <beach> And that's a problem with Common Lisp?
[11:45:02] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[11:45:03] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:45:04] <phantomics> If you want to add new features to the language, yes, that's what drove fare to Gerbil Scheme
[11:45:18] <moon-child> you're using cl to make an apl implementation.  No apl implementation is compatible with any other anyway, so I don't see the problem?
[11:45:21] <moon-child> nothing to do with cl
[11:45:25] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:45:34] <beach> Unbelievable!
[11:45:44] <phantomics> Ok, if you're talking about APL that's a different thing
[11:46:17] <rain3> what's wrong with the current apl implementations in CL ?
[11:46:23] <phantomics> I could just leave array prototypes out but it's an accepted feature of the language, there's some interesting code out there that uses them
[11:46:57] <phantomics> rain3: the current APL implementations in CL? As in multiple? haha
[11:47:09] <rain3> at least one
[11:47:22] <beach> Yesterday, we heard that Common Lisp is bad because it has a standard, and today we hear that Common Lisp is bad because it is strict about conventions.
[11:47:28] <beach> Truly unbelievable.
[11:47:38] <phantomics> April is -the- one
[11:47:51] <phantomics> CL is still the best of all options I know of
[11:48:06] <flip214> beach: like with parents... either too strict or not opinionated enough
[11:48:06] <moon-child> can't you just make everything use prototype 0?  I can't imagine there's _very_ much interesting code using characters or nested arrays in a way that that would matter for
[11:48:23] <pl> beach: what, what was that about standard being bad?
[11:48:28] <pl> was it a pythonista claiming it?
[11:48:58] <beach> pl: Check the logs.  It makes me upset just to think about it.
[11:49:18] <phantomics> The Schemes all have discordant features, choosing one is taking a major gamble that it won't fall out of favor. The Racket devs seem to want to move it away from being a Lisp entirely
[11:49:24] <pl> jeez. Sorry for bringing up bad memories, I'm just too WTF at it
[11:49:39] <shka> pl: pythonists seem to have a slavish mentality so i my bet is that it is not one of those :P
[11:49:47] <beach> pl: Yes, me too (when it happened).
[11:49:50] <shka> slaveish?
[11:49:57] *** Quits: gaqwas (~john@dynamic-077-007-123-010.77.7.pool.telefonica.de) (Ping timeout: 258 seconds)
[11:50:18] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[11:50:24] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:50:39] <pl> shka: Python is also one of the few languages that /explicitly/ go out of their way against standardisation. Maybe Rust too, but most other stuff has some level of standardisation even if it's not fully formal static one
[11:50:40] <phantomics> moon-child: I can easily have the array default element be either " " for character arrays or 0 for all other array types, I can deduce that from an array's type
[11:51:29] <shka> pl: sure, but the typical python programmer is just all over the every little detail of python guideline
[11:51:40] <shka> regardless if it makes sense or not
[11:51:40] <phantomics> The array-as-prototype is useful in a few cases, I've ported some functions from Dyalog that use the feature to do interesting things
[11:51:52] <pl> phantomics: CL being mostly compatible between implementations (and nearly to the point of irrelevance when you add portability libs) is what finally got me good on Lisps :)
[11:52:00] <moon-child> phantomics: interesting, have a link?
[11:52:08] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[11:52:48] <phantomics> moon-child: see this function: http://dfns.dyalog.com/c_from.htm
[11:53:01] <phantomics> click "test script" to see tests using it
[11:53:48] <phantomics> The (0⍴⊂_)from 99 is a particular case of using a displaced array, the 0⍴ creates an empty array whose prototype is the "_" variable defined earlier
[11:54:53] <phantomics> The idea of being to create arbitrary-shape nested arrays from with a prototype array element is useful for a few things
[11:57:53] *** Joins: ad-absurdum (~ad-absurd@2600:1700:b2d2:4560::433)
[11:58:18] *** Quits: lad (~lad@user/lad) (Ping timeout: 240 seconds)
[12:02:11] <susam> Good morning, #commonlisp!
[12:02:52] <phantomics> morning, susam
[12:03:08] <susam> Hello, phantomics.
[12:03:23] *** Joins: pve (~pve@37-136-181-173.rev.dnainternet.fi)
[12:03:56] *** Joins: selwyn (~selwyn@user/selwyn)
[12:11:48] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 258 seconds)
[12:19:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:19:30] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:34:03] *** Joins: j-sh (~j-sh@94.134.88.53)
[12:34:23] *** Quits: j-sh (~j-sh@94.134.88.53) (Client Quit)
[12:35:31] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[12:36:05] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[12:38:26] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:43:27] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[12:44:06] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[12:44:10] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[13:19:15] <pve> phoe: Hey, you mentioned yesterday that "the reader macro for #\( cannot call READ-DELIMITED-LIST directly". Can I read more about this somewhere?
[13:25:17] <beach> pve: I think phoe is just making the observation that READ-DELIMITED-LIST has no provisions for handling the consing dot.
[13:27:43] <beach> pve: The reader macro for #\( must be able to handle things like (A B . C).
[13:28:20] <pve> beach: hmm, I see
[13:29:23] <pve> on CCL I get: (with-input-from-string (s "a b . c)") (read-delimited-list #\) s)) ==> (A B . C)
[13:29:48] <pve> I might be misunderstanding
[13:31:39] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[13:32:00] <beach> I don't think so.  It seems CCL READ-DELIMITED-LIST can handle the consing dot.
[13:32:06] <beach> SBCL can not apparently.
[13:32:31] <pve> aha! apparently not
[13:32:36] <beach> I think it's debatable whether it should.
[13:33:01] <pve> beach: ok that clears it up, thanks
[13:33:42] <pjb> pve: this is clearly non-conforming.
[13:33:55] <pve> pjb: ccl's behaviour?
[13:34:02] <pjb> Yes.
[13:34:02] <pjb> https://termbin.com/eygr
[13:34:53] <pjb> Indeed, the lisp reader algorithm and specifications of the reader macros imply that the reader macro for #\( cannot use the standard read-delimited-list.
[13:35:45] <pjb> pve: note: #(a b c)  could use read-delimited-list.  But ccl uses a ccl::read-list in that case :-P
[13:36:18] <phoe> pve: exactly what beach said
[13:36:31] <phoe> and what pjb clarified
[13:36:36] <pjb> The algorithm of read-delimited-list is specified: read-delimited-list looks ahead at each step for the next non-whitespace[2] character and peeks at it as if with peek-char. If it is char, then the character is consumed and the list of objects is returned. If it is a constituent or escape character, then read is used to read an object, which is added to the end of the list. If it is a macro character, its reader macro function is
[13:36:36] <pjb> called; if the function returns a value, that value is added to the list. The peek-ahead process is then repeated.
[13:36:38] <pve> pjb: ok good to know, thanks
[13:37:04] <phoe> in that case, SBCL is conforming, CCL is convenient
[13:38:00] <phoe> pjb: now I am longing for a publicly exported and available CCL::READ-LIST, why did you mention it out loud
[13:38:13] * phoe adds it to the idea box for the Hypothetical Future Revision
[13:38:21] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[13:38:57] <pjb> phoe: well, the point is that ccl inverts ccl::read-list and cl:read-delimited-list !
[13:39:35] <pve> although, I should admit, I don't quite see *why* the specification implies that read-delimited-list can't be used
[13:39:50] <pve> is it hidden in the paragraph pjb quoted?
[13:40:02] <phoe> pve: yes
[13:40:09] <phoe> there is no mention of a consing dot in the algorithm
[13:40:17] * pve is still having morning coffee
[13:40:26] <beach> The consing dot is a constituent, but if it is read by itself, it signals an error.
[13:41:07] <beach> clhs 2.3.3
[13:41:07] <specbot> The Consing Dot: http://www.lispworks.com/reference/HyperSpec/Body/02_cc.htm
[13:41:34] <pve> ah, and the #\( reader macro should instead handle the dot?
[13:41:50] <beach> That's what it usually does.
[13:41:57] <pve> (not using read-delimited-list)
[13:42:16] <pve> ok, I think I get it now
[13:43:13] <pve> thanks all
[13:43:42] <beach> Pleasure.
[13:51:25] <phoe> CLHS 2.3.2.2 - "An implementation may provide one or more kinds of float that collectively make up the type float."
[13:51:51] <phoe> "may provide" - so it doesn't have to!?
[13:52:28] <beach> It does.
[13:52:34] <phoe> (it's probably a nitpick from my side, I just looked at this passage and got both confused and amused)
[13:52:40] *** Joins: dsk (~dsk@user/dsk)
[13:52:49] <phoe> (since "may" is not "must" and all)
[13:54:10] <beach> clhs single-float
[13:54:10] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_short_.htm
[14:02:36] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[14:08:58] *** silasfox_ is now known as silasfox
[14:10:04] <pjb> there are only a small constraint on where to split the floats when you provide only 2 or 3 float types.
[14:11:05] <pjb> Note also about floats, it means most typecase trying to dispatch on float subtypes are not conforming!
[14:11:50] <pjb> see: com.informatimago.common-lisp.cesarum.utility:float-typecase et al.
[14:11:54] <beach> Why?
[14:12:35] *** Joins: random-nick (~random-ni@87.116.182.181)
[14:12:41] <pjb> https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/utility.lisp#L1261
[14:12:42] <pjb> https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/utility.lisp#L1380
[14:13:34] <pjb> beach: Well, non-conforming is perhaps too strong a word.  The problem is that (typecase foo (single-float 1) (double-float 2)) may list two identical types. It will make compilers generate code about unreachable code (eg. 2).
[14:14:01] <beach> OK, that I agree with.
[14:14:50] <pjb> The docstring of distinct-float-types quotes the small constraints on how to split the floats when fewer than 4 types are provided.
[14:15:00] <pjb> But not the url. :-(
[14:18:32] *** Parts: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Leaving)
[14:35:30] *** Quits: d4ryus (~d4ryus@ppp-188-174-95-171.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[14:47:51] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Ping timeout: 256 seconds)
[14:48:21] *** Joins: d4ryus (~d4ryus@ppp-188-174-95-171.dynamic.mnet-online.de)
[14:49:31] <mrcom> pjb: Weird crashes I was getting in CCL on OSX have stopped. Which is even weirder. Didn't update anything.
[14:57:46] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[15:03:46] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:04:26] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[15:04:47] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:15:38] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[15:16:28] *** Joins: amb007 (~a_bakic@61.146.204.77.rev.sfr.net)
[15:18:31] *** Quits: amb007 (~a_bakic@61.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:19:14] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:21:04] *** Quits: frgo (~frgo@p200300deef181d00dcb5028d15d76cdf.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:21:31] *** Joins: frgo (~frgo@p200300deef181d00dcb5028d15d76cdf.dip0.t-ipconnect.de)
[15:24:48] *** Quits: silasfox (~sbv@xdsl-87-78-42-3.nc.de) (Ping timeout: 265 seconds)
[15:25:28] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[15:28:53] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[15:29:55] <nij-> Swank.lisp has ~4000 lines of code, much for a newbie like me. Could someone confirm that it implements socket/connection by itself, making no use of any networking library like usocket or trivial-socket? https://github.com/slime/slime/blob/master/swank.lisp
[15:31:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:31:45] <lotuseater> what is good to notice, swank only accepts connections from localhost
[15:33:02] <lotuseater> look in the file swank.asd
[15:33:59] <nij-> Yeah.. I'm thinking if it's possible to factor the socket part out, making it easier to support other protocols.
[15:34:29] <Xach> nij-: it is essentially implementing its own version of usocket or similar.
[15:34:48] <Xach> you can save time by using usocket or similar directly.
[15:35:52] <nij-> Xach: Thanks for your confirmation. And yes, if they switch to usocket, the amount of codes could be largely decrease.
[15:36:04] <Xach> "they"?
[15:36:33] <Xach> Ah, I misunderstood your goal. I don't think swank will ever change like that.
[15:36:45] <nij-> Why not?
[15:37:21] <Xach> Because I don't think the people involved will see it as a net benefit
[15:37:54] <nij-> Oh I see. I remember seeing one closed issue that addresses this too.. :(
[15:38:24] <nij-> https://github.com/slime/slime/issues/286
[15:38:31] <pl> nij-: the issue is that you want swank to run self-contained so that you can just start it on any supported implementation without external dependencies
[15:39:41] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:40:31] <nij-> That makes sense. I feel that being orthogonal and being self-contained are two good attributes that contradict to each other.
[15:40:51] <nij-> Wonder how people strike the balance between them.
[15:49:48] <shka> swank does not support encryption or logging so it's only natural that localhost is only allowed
[15:58:29] <nij-> shka: My apologies if the following is too simple: Does that mean all instances in the same LAN can get access to my swank server?
[15:58:51] <shka> nij-: no, just machine where the swank is running
[15:59:06] <shka> otherwise, you typically tunnel via ssh
[16:01:51] <nij-> I see.
[16:02:34] <nij-> My main concern is that I want to let root to open a swank server, without letting the other users (on the same machine) to get access to it.
[16:02:37] <nij-> Is it possible?
[16:04:05] <akater[m]> What should `(truename #P"")` return?  I can't even infer it must share attributes with `*default-pathname-defaults*`.
[16:06:22] <shka> nij-: i don't think so...
[16:06:32] <shka> maybe you can use docker or something
[16:08:44] <jmercouris> I wrote a piece of code that I'm not very happy with: http://dpaste.com/DPG7WHVEN
[16:08:47] <jmercouris> any ideas for how to make it better?
[16:09:27] <jmercouris> sorry, correct link: http://dpaste.com/EUZGF3C7A
[16:09:32] <jmercouris> there was a small typo in the old version
[16:10:29] <lotuseater> yeah now (push point cluster)
[16:10:51] <jmercouris> that is correct
[16:12:54] <shka> jmercouris: it would be easier if clusters would be vectors
[16:12:58] <shka> then use find
[16:13:12] <jmercouris> shka: ?
[16:13:13] <shka> and vector-push-extend result
[16:13:35] <shka> this is in relation to code that you pasted
[16:13:45] <jmercouris> right, but how would that be easieR?
[16:14:46] <shka> well, because then you would simply CL:FIND-IF the right cluster, and you could vector-push-extend to it if found
[16:14:48] *** Joins: green__ (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com)
[16:14:54] <shka> or make a new cluster if not
[16:15:26] <shka> you can still do that by playing with cdr of the first cons cell
[16:15:28] <jmercouris> I guess what tripped me up was why you thought vectors would be easier
[16:15:39] <jmercouris> because I was thinking it could be done exactly that way but with lists
[16:15:43] <shka> but this is not exactly nice either
[16:15:53] <jmercouris> also there is a mistake in my code, the finally breaks out of both loops
[16:16:07] <shka> well, vectors are "naturally" mutable if you know what i mean
[16:16:35] <yitzi> shka's solution would only have a single loop. That makes it better, IMHO.
[16:17:07] <jmercouris> OK
[16:17:11] <jmercouris> I'll try it
[16:17:23] <shka> if you really want to use lists
[16:17:27] <jmercouris> I just can't help but feel this is a solved problem
[16:17:32] <jmercouris> and there is some alexandria function
[16:17:34] <shka> you can use position-if
[16:17:48] <jmercouris> I have had to do to this kind of operation many times
[16:17:54] <jmercouris> grouping things based on some predicate
[16:18:40] <shka> i am not aware of anything like this in alexandria, sorry
[16:19:41] *** Quits: green__ (~green@cpe40623101e184-cm9050caca3ee0.cpe.net.cable.rogers.com) (Read error: Connection reset by peer)
[16:19:42] <yitzi> If you need to do that kind of thing and position, find, member, etc don't work I would suggest writting a function to do it versus making an embedded loop. I personally find them to be confusing sometimes.
[16:20:28] *** borodust is now known as boro
[16:20:35] *** boro is now known as borodust
[16:23:06] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 240 seconds)
[16:30:35] <jmercouris> never mutate a variable you are looping over...
[16:30:44] <jmercouris> ay yai yai, you would think I am a first year programmer
[16:31:33] *** Joins: dickbar__ (~dickbaren@dyndsl-087-245-035-237-teleos.ewe-ip-backbone.de)
[16:33:38] *** dickbar__ is now known as DBa_
[16:34:00] *** DBa_ is now known as DBar
[16:34:33] *** DBar is now known as DBa_
[16:36:21] *** DBa_ is now known as DBa55
[16:38:01] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:44:14] *** Joins: pjb (~pjb@user/pjb)
[16:44:56] *** Quits: DBa55 (~dickbaren@dyndsl-087-245-035-237-teleos.ewe-ip-backbone.de) ()
[16:45:07] *** Joins: dickbar__ (~dickbaren@dyndsl-087-245-035-237-teleos.ewe-ip-backbone.de)
[16:47:32] <pjb> mrcom: perhaps because of an upgrade of the system? Since Apple collects crash reports, it may correct its system before the application developper can get around them ;-)
[16:48:07] *** dickbar__ is now known as DBa55
[17:07:51] *** Joins: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08)
[17:10:49] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[17:13:58] *** Joins: Melantha (~pyon@user/pyon)
[17:15:37] *** Joins: Bike (~Glossina@71.69.170.70)
[17:15:37] *** ChanServ sets mode: +o Bike
[17:20:22] <Josh_2> 'ello
[17:27:19] <rain3> hey
[17:44:05] *** Joins: Guest87 (~Guest87@107-218-253-217.lightspeed.tukrga.sbcglobal.net)
[17:44:53] <phoe> heyyyy
[17:45:18] <Guest87> Hi
[17:46:23] <beach> Hello Guest87.
[17:47:56] <Guest87> Would a spinneret question fit here?
[17:50:04] <beach> Go ahead and ask.
[17:52:39] <Guest87> I'm trying to generate a table from a list of lists representing the rows.  The straightforward dolist works for text data.  I need the first column to be buttons.  I can't get a (:button) from a list to evaluate.  I'm stumped.
[17:56:22] <rain3> show a working snippet with the straightforward dolist which works, maybe we can change it into something better
[17:58:47] <Guest87> ok, trimming an example out now
[18:01:50] <Guest87> (spinneret:with-html  (dolist (row '(("a" "b") ("c" "d"))) (:tr (dolist (col row) (:td col)))))
[18:03:04] *** Joins: tfb (~tfb@88.98.95.237)
[18:05:52] <Guest87> That produces two rows of two cells.  My intuition was to substitute something like (:button "Test1") and (:button "Test2") for "a" and "c", or something similar.
[18:08:00] *** Guest87 is now known as eric
[18:10:33] <rain3> (spinneret::parse-html '(:button "test1") nil) ;;; just playing with it
[18:11:33] *** Quits: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de) (Ping timeout: 276 seconds)
[18:11:56] *** Joins: silasfox (~sbv@cgn-89-1-215-100.nc.de)
[18:14:30] <rain3> I remember that spinneret in public interface only has macros , that's the reason it is awkward when we need to pass data to it other than hardcoded sourcecode and we must use eval
[18:16:57] <rain3> https://termbin.com/nbxg   ;;; change (:td col) to (eval `(spinneret:with-html ,col ))
[18:17:05] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[18:22:16] <rain3> this sucks because eval can't see the surrounding lexical bindings
[18:23:02] <rain3> an alternative is to use this library instead https://gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html https://gigamonkeys.com/book/practical-an-html-generation-library-the-compiler.html
[18:23:03] *** Joins: jans1 (~Thunderbi@185.213.154.244)
[18:23:27] <eric> Thanks! Even if it's not perfect, I think it'll work.  Yeah, I'm working though that book now.
[18:24:47] *** Quits: jans (~Thunderbi@185.65.135.236) (Ping timeout: 258 seconds)
[18:24:47] *** jans1 is now known as jans
[18:25:08] <Josh_2> eric: is this correct? https://plaster.tymoon.eu/view/2577#2577
[18:26:20] <tfb> dumb question: is there a version of quickload which loads only if not already loaded (like require ish)
[18:26:58] <beach> tfb: That should already be the case.
[18:28:31] <tfb> oh.  Does that mean quickload tells you what it *would* do?  So it's 'To load ...' message doesn't mean it is loading it?
[18:29:01] *** Joins: lisp123__ (~lisp123@45.130.83.208)
[18:29:19] <beach> I don't know.  I use ASDF directly most of the time.
[18:30:53] <tfb> answer is yes, it does and I'm an idiot: tracing load would have told me.
[18:31:13] <eric> Josh_2: close, and was another approach, but that hardcodes the column as a button.  I was looking for a generic (make-table) that I could feed lists with tags in the list instead of the generator.
[18:31:57] <Josh_2> so you would have a button depending on a tag at the start of the list?
[18:32:12] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[18:35:16] <eric> I'd have a button in a cell when the data list had a (:button) in it instead of a "plain text" element.  So it could be '((:button "button1") "b") or '("b" (:button "button1:)), with the items switching places.
[18:35:47] <Josh_2> I see
[18:36:25] *** Quits: retropikzel (~retropikz@2001:999:202:19ef:ae12:3ff:fe96:9d08) (Quit: Leaving)
[18:39:38] <Josh_2> https://plaster.tymoon.eu/view/2578#2578 ?
[18:43:06] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:44:48] *** Joins: aeth (~aeth@user/aeth)
[18:48:30] <eric> Interesting approach.   I thought about listp, but if I wanted to use an (:a "http://somewhere") or (:img "smile.png") I'd have to write more cases on (car a), (car b), for each tag type.
[18:49:23] <Josh_2> Nah
[18:49:35] <Josh_2> Oh yes sorry
[18:49:42] <Josh_2> I finally see what you mean
[18:54:14] *** Quits: lisp123__ (~lisp123@45.130.83.208) (Remote host closed the connection)
[18:55:08] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[18:57:21] <Josh_2> eric: I believe this is what the tag :tag is for
[18:58:15] <Josh_2> you would do something like (if (listp <item>) (destructuring-bind (tag ele &rest args) <item> (:tag :name tag ele)) (:th ele))
[18:58:17] <eric> I wondered about that, but I didn't understand it.
[18:58:22] <Josh_2> :tag allows you to select arbitrary tags
[18:58:45] <Josh_2> When you were talking about this I was certain I had done this before
[18:58:56] <eric> Oh, right, but what tag do I use for plain text?
[18:59:11] <Josh_2> p or span
[18:59:30] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 240 seconds)
[18:59:32] <eric> I guess I could listp and use :tag on lists.
[19:00:36] <Josh_2> Well :tag lets you select your tag at runtime, how you use it is up to you :P
[19:05:16] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[19:07:20] *** Quits: Patternm1ster (~georg@li1192-118.members.linode.com) (Quit: leaving)
[19:07:36] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[19:11:12] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:13:56] <rain3> Josh_2 cool
[19:17:09] <Josh_2> Front end webdev really sucks, even if you are using a great language like CL
[19:20:51] *** Joins: psycomic (~psycomic@2a01cb0588c5e4006e2238a91a0021a3.ipv6.abo.wanadoo.fr)
[19:24:09] <phoe> Is it possible to get a symbol macro definition somehow?
[19:24:22] <phoe> Or is macroexpand-1 on a symbol the way to go?
[19:24:27] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[19:24:39] *** Joins: Oladon (~olad@98.43.81.226)
[19:26:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:26:42] <Bike> phoe: that is how you do it
[19:27:04] <Bike> is there something more than the expansion you want?
[19:27:07] <phoe> nope
[19:27:29] *** Joins: lisp123__ (~lisp123@5.30.23.247)
[19:27:29] <Bike> technically it might be required that there's an expander so *macroexpand-hook* works, but there's no standard way to retrieve it
[19:28:02] <phoe> of course there is
[19:28:22] <phoe> (block nil (let ((*macroexpand-hook* (lambda (expander hook env) (declare (ignore hook env)) expander))) (macroexpand-1 'foo))i)
[19:28:35] <phoe> s/i//
[19:28:44] <phoe> this is cursed though
[19:28:57] <phoe> macroexpand-1 is better for my use case
[19:29:16] <phoe> wait a second, BLOCK NIL is unnecessary there
[19:29:28] *** Quits: silasfox (~sbv@cgn-89-1-215-100.nc.de) (Ping timeout: 272 seconds)
[19:29:44] <Bike> huh.
[19:30:01] <phoe> if the macroexpand hook has access to the expander function, then I have access to the expander function
[19:30:09] <phoe> so I can just RETURN-FROM it, or something
[19:30:28] <phoe> except above I forgot to RETURN-FROM it, and miraculously this code still worked despite not being correct
[19:30:58] <Bike> i hadn't thought of that.
[19:31:09] *** Joins: silasfox (~sbv@2a0a-a540-4382-0-698f-2153-29cf-9f8a.ipv6dyn.netcologne.de)
[19:31:22] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 272 seconds)
[19:32:33] <phoe> that was the first thing that I thought of, but I'm a control flow freak
[19:33:48] <Bike> i mean i hadn't thought of using macroexpand-hook like that at all
[19:34:07] <jcowan> One of those "I don't know how this *ever* worked" moments.
[19:34:30] <phoe> oh, I see
[19:34:45] <phoe> well usually you don't want to escape the macroexpand hook early
[19:35:14] *** Quits: psycomic (~psycomic@2a01cb0588c5e4006e2238a91a0021a3.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:35:28] *** Joins: psycomic (~psycomic@2a01cb0588c5e4000dc20050acc303e6.ipv6.abo.wanadoo.fr)
[19:35:35] *** Joins: fbiaaa (~fbiaaa@89-73-224-15.dynamic.chello.pl)
[19:44:24] *** Quits: ad-absurdum (~ad-absurd@2600:1700:b2d2:4560::433) (Quit: Leaving)
[19:47:10] *** Quits: lisp123__ (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:47:48] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[19:52:54] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[19:53:17] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:59:21] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[20:01:30] <fbiaaa> hi! I'm using company-mode in Emacs but get no completion suggestion while editing common lisp file. I'm using two company backends: company-files and company-capf. Should I add some other backend?
[20:03:25] *** eric is now known as icer
[20:04:03] *** icer is now known as rr
[20:04:19] *** rr is now known as icer
[20:05:44] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[20:05:48] *** Joins: selwyn (~selwyn@user/selwyn)
[20:06:05] *** Quits: silasfox (~sbv@2a0a-a540-4382-0-698f-2153-29cf-9f8a.ipv6dyn.netcologne.de) (Remote host closed the connection)
[20:07:40] *** Joins: silasfox (~sbv@xdsl-87-78-42-3.nc.de)
[20:12:08] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:12:20] *** Joins: tfb (~tfb@88.98.95.237)
[20:12:55] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:13:07] *** Joins: tfb (~tfb@88.98.95.237)
[20:13:11] *** Quits: psycomic (~psycomic@2a01cb0588c5e4000dc20050acc303e6.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:13:30] *** Joins: psycomic (~psycomic@2a01cb0588c5e40013ca379584e5300b.ipv6.abo.wanadoo.fr)
[20:13:42] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:13:55] *** Joins: tfb (~tfb@88.98.95.237)
[20:14:30] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:14:42] *** Joins: tfb (~tfb@88.98.95.237)
[20:15:17] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:15:23] <beach> fbiaaa: Use SLIME and slime-company.
[20:15:29] *** Joins: tfb (~tfb@88.98.95.237)
[20:15:40] <mfiano> Or Sly with company support built-in
[20:16:05] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:16:18] *** Joins: tfb (~tfb@88.98.95.237)
[20:16:19] <beach> Having said that, I find slime-company more irritating than helpful most of the time.
[20:16:38] <beach> I can type the completion faster than I can select the right choice.
[20:16:53] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:17:05] *** Joins: tfb (~tfb@88.98.95.237)
[20:17:24] <beach> And often I get suggestions that are completely wrong for the context, and no suggestions that would be appropriate.
[20:17:41] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:17:45] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[20:17:53] *** Joins: tfb (~tfb@88.98.95.237)
[20:18:28] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:18:40] *** Joins: tfb (~tfb@88.98.95.237)
[20:19:16] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:19:28] *** Joins: tfb (~tfb@88.98.95.237)
[20:20:03] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:20:15] *** Joins: tfb (~tfb@88.98.95.237)
[20:20:37] <beach> I guess it's a consequence of the fact that Emacs and SLIM have very limited "knowledge" about the meaning of the Common Lisp code.
[20:20:50] <phoe> the following line is cursed:
[20:20:50] <akater[m]> Asking again, just in case: what should `(truename #P"")` return according to spec?  SBCL and ECL both seem to use `*default-pathname-defaults*` here but I don't see why it should be taken into account.
[20:20:51] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:20:52] <phoe> (import 'lambda-list-keywords "KEYWORD")
[20:20:57] <phoe> akater[m]: woop, apologies
[20:21:03] *** Joins: tfb (~tfb@88.98.95.237)
[20:21:38] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:21:50] *** Joins: tfb (~tfb@88.98.95.237)
[20:22:25] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:22:38] *** Joins: tfb (~tfb@88.98.95.237)
[20:23:13] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:23:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 272 seconds)
[20:23:25] *** Joins: tfb (~tfb@88.98.95.237)
[20:24:00] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:24:12] *** Joins: tfb (~tfb@88.98.95.237)
[20:24:22] <phoe> akater[m]: I guess that the NIL pathname directory gets interpreted same as (:RELATIVE)
[20:24:36] <phoe> see http://clhs.lisp.se/Body/19_bbdc.htm
[20:24:48] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:25:00] *** Joins: tfb (~tfb@88.98.95.237)
[20:25:01] <phoe> and getting the truename of a pathname that is relative to the current directory and has all other components empty is going to result in the current directory
[20:25:35] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:26:06] *** Joins: tfb (~tfb@88.98.95.237)
[20:26:38] <phoe> I mean, (merge-pathnames #p"") does that
[20:26:54] <phoe> can't see why TRUENAME would do it differently
[20:27:52] <akater[m]> phoe: Thank you.  So, `(:relative)` directory component should always be converted to nil.
[20:28:21] *** Joins: tfeb (~tfb@88.98.95.237)
[20:28:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:30:45] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 265 seconds)
[20:32:16] <phoe> yes, the two are equivalent
[20:32:52] *** Quits: tfeb (~tfb@88.98.95.237) (Remote host closed the connection)
[20:33:03] *** Joins: tfb (~tfb@88.98.95.237)
[20:34:42] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 272 seconds)
[20:36:15] <akater[m]> Well, it says “not used”.  I read it as, `(:relative)` should not occur as the value.
[20:36:15] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:37:05] <phoe> "The list (:relative) has the same meaning as nil and hence is not used."
[20:37:11] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:37:19] <phoe> hm
[20:39:45] <phoe> if it has the same meaning that I assume that it's safe to use it there
[20:40:10] <akater[m]> I happen to be porting pathnames to elisp so gotta adhere.
[20:41:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[20:42:18] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 272 seconds)
[20:42:21] *** Quits: silasfox (~sbv@xdsl-87-78-42-3.nc.de) (Ping timeout: 276 seconds)
[20:42:35] *** Joins: amb007 (~a_bakic@13.146.204.77.rev.sfr.net)
[20:43:04] *** Joins: aeth (~aeth@user/aeth)
[20:43:09] <phoe> yep, I understand
[20:43:16] *** attila_lendvai_ is now known as attila_lendvai
[20:43:54] <phoe> I read this as, "(:RELATIVE) is not going to occur in any pathnames returned by the Lisp implementation because it will use NIL instead, but if you use (:RELATIVE), then it's harmless, Lisp will treat it same as NIL"
[20:50:10] *** Joins: pjb (~pjb@user/pjb)
[20:50:57] *** Quits: DBa55 (~dickbaren@dyndsl-087-245-035-237-teleos.ewe-ip-backbone.de) ()
[20:52:11] <lisp123_> Can the condition system replicate continuations?
[20:52:26] <phoe> no
[20:52:50] <phoe> continuations require the ability to store away control stacks, whereas the condition system works on a single control stack.
[20:53:18] <lisp123_> Thanks - I was wondering if it was possible with some sort of nesting structure
[20:53:20] <phoe> when an unwind is performed, whether by the condition system or by some other means, the stack is destroyed
[20:53:32] <phoe> you can't work around that without support from the language runtime
[20:53:34] <lisp123_> Got it, thanks
[20:53:58] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[20:54:11] <phoe> gotta go lower level than conditions if you want to get support for that
[20:55:18] <lisp123_> Yeah I was able to do it via PG's Continuation Macros (which I'm debugging now, not sure if I made a mistake somewhere), but was something that just popped in my mind because he was using the function RESTART, which means he did it before the condition system entered CL
[20:56:06] <pjb> akater[m]: that's because TRUENAME must do the same as OPEN, and OPEN must call MERGE-PATHNAMES on relative pathnames. "For information about opening relative pathnames, see Section 19.2.3 (Merging Pathnames)."
[20:56:27] <lotuseater> lisp123_: but the other way around could be possible ^^ Continuations, the mother of all monads :D
[20:56:51] *** Quits: amb007 (~a_bakic@13.146.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[20:56:53] <lisp123_> lotuseater: And GOTO the mother of all expressions :D
[20:57:05] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[20:57:08] <Bike> restarts only have dynamic extent, so you couldn't use them for full call/cc
[20:57:26] <lisp123_> https://dspace.mit.edu/bitstream/handle/1721.1/5753/AIM-443.pdf
[20:57:28] <lotuseater> I thought it was: Lambda, The ultimate GOTO.
[20:57:31] <lisp123_> Good article for anyone interested
[20:57:41] <lotuseater> nice thx
[20:57:44] <lisp123_> lol I just linked the same article
[20:58:19] <lotuseater> wish me luck, later I have the first phone call with the customer for the new project
[20:58:44] <lisp123_> (append 'luck lotuseaster)
[20:58:59] <lotuseater> hah lisp123_ we had the same thought. there are also this paper with Imperative/Declarative
[20:59:13] <lotuseater> hm would that work?
[20:59:34] <pjb> (let ((lotuseaster '())) (append 'luck lotuseaster)) #| ERROR: The value luck is not of the expected type list. |#   (let ((lotuseaster '())) (append lotuseaster  'luck)) #| --> luck |#
[21:00:10] *** Joins: amb007 (~a_bakic@235.145.204.77.rev.sfr.net)
[21:00:15] <lotuseater> or (setf (person-lucky-p *lotuseater*) t) or an amount between 0 and 1 but bigger than 0
[21:01:26] <lotuseater> i should drink some water
[21:01:59] <pjb> lisp123_: we can implement delimited continuations in CL easily enough. But full contiuations need a lot of machinery (basically a re-compilation of the CL code).
[21:02:31] <pjb> lisp123_: cf https://www.cliki.net/continuations
[21:02:37] <lisp123_> pjb: what does it mean by "delimited continuations"? Is that the same as PG's restriction that every continuation should be nested?
[21:02:42] <lisp123_> in a tail call
[21:02:43] <pjb> lisp123_: compare arnesi vs cl-cont
[21:03:24] <pjb> It's continations that don't escape their lexical scope.
[21:03:34] <Bike> https://en.wikipedia.org/wiki/Delimited_continuation
[21:03:39] <pjb> So the processor doesn't have to jump back to unstacked stack frames.
[21:03:50] <pjb> Ie. we don't have to copy stack frames to the heap.
[21:04:05] <lisp123_> Thanks, that makes sense (and what was noted in On Lisp too)
[21:04:29] <lotuseater> when I told someone it's kind of runtime GOTO he just heard "GOTO" and said "no that shouldn't be used"
[21:05:10] <beach> That's what Turbo thought about Pascal, so they removed the only exception mechanism that Pascal had.
[21:05:32] <Bike> delimited continuations as used in other languages are orthogonal to lexical extent
[21:05:48] <Bike> you can see this in the wikipedia article in the definition of "yield" a ways down
[21:05:59] <lisp123_> Bike: that is a very nice and clear way to put it
[21:06:06] * lotuseater presses the "Turbo" button at his computer
[21:07:34] <Bike> you might also have to copy frames to the heap to implement them, since the delimited continuation still has indefinite extent, which you can see in "stream-yield" where the continuation is stored in a lazy list
[21:09:00] <lisp123_> Yes (i think, haven't look at "stream-yield" yet)
[21:09:35] <Bike> i don't remember how well CPS transform macros fit into this off the top of my head
[21:10:04] <lisp123_> They seem to work well for most cases
[21:10:25] <Bike> i just mean i don't remember whether they're theoretically equivalent to some kind of delimited continuation or what
[21:11:08] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[21:11:09] <lisp123_> Based on what I saw, I say they are, but there might be some points I missed, I'm only looking at the two at a superficial level
[21:11:35] <lisp123_> "If an =bind, =values, =apply, or =funcall expression occurs in a seg- ment of code, it must be a tail call. Any code to be evaluated after an =bind should be put in its body."
[21:12:03] <lisp123_> vs. "So the processor doesn't have to jump back to unstacked stack frames."
[21:12:12] <lisp123_> Sounds about the same
[21:12:33] <Bike> okay, but as i mentioned, that's not actually an accurate description of delimited continuations
[21:12:46] <Bike> that's just a continuation with dynamic extent, which we already have with block/return-from
[21:12:53] <White_Flame> yeah, I've made the same linguistic mistake before
[21:13:24] <Bike> and i think CPS macros give you more than that
[21:14:20] <lisp123_> Nice, I will have to read into it more
[21:15:15] *** Quits: amb007 (~a_bakic@235.145.204.77.rev.sfr.net) (Ping timeout: 250 seconds)
[21:16:16] *** Joins: amb007 (~a_bakic@254.147.204.77.rev.sfr.net)
[21:16:19] <Bike> block/return-from are undelimited continuations, i guess, since they abort control, unlike a delimited continuation
[21:16:28] <Bike> some confusing language here to be sure
[21:17:00] <lisp123_> Yup and with material consequences for not being exact, given their use in estoeric code
[21:22:39] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[21:28:33] *** Joins: dsk (~dsk@user/dsk)
[21:30:12] <phoe> Bike: hmmm
[21:30:37] <phoe> just thinking about "what if restarts weren't DX"
[21:30:57] <phoe> you would still need to be able to encode the rest of the computation in some way, which still requires a CPS transform
[21:31:24] <Bike> yeah, probably.
[21:31:36] *** Joins: srhm (~ascii@user/srhm)
[21:34:18] *** Joins: lad (~lad@user/lad)
[21:34:19] *** Quits: amb007 (~a_bakic@254.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:34:25] <Bike> restarts are just a dynamic namespace for functions. don't actually do any control transfer stuff themselves. i forgot.
[21:34:30] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:35:35] <phoe> it's easy to define a non-DX restart equivalent, everything control-flow-related is still up to THROW and RETURN-FROM and GO though
[21:35:47] <phoe> and you need to somehow defeat these in order to preserve stacks for CPS
[21:39:33] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[21:42:48] *** Joins: lisp123__ (~lisp123@45.130.83.212)
[21:46:02] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[21:51:13] <pjb> Bike: the argument is that they are not because: (let ((c (block cont (lambda (x) (return-from cont x))))) (list (funcall c 42) (funcall c 33))) does not work.
[21:51:59] <shka> i am having problem with azure postgres server and postmodern
[21:52:21] <shka> azure postgres uses special format of the user
[21:52:25] <shka> user@host
[21:52:38] <shka> and i think that this causes in postmodern
[21:52:58] <pjb> If postmodern parses user strings, it's possible. A patch would be in order.
[21:53:58] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[21:54:11] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[21:55:52] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:04:54] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:44d8:4ffb:6857:e507)
[22:06:07] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:07:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:07:58] <shka> i will investigate
[22:09:22] <Bike> pjb: they are not what? undelimited? "undelimited" does not mean "indefinite extent". i know blocks don't have indefinite extent and i said as much
[22:11:10] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[22:18:10] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Remote host closed the connection)
[22:19:43] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[22:43:51] <lisp123__> I'm getting a strange error, but I'm not sure if anyone can point me in the right direction as its obscure
[22:44:02] <phoe> what is the error
[22:44:24] <lisp123__> It is "RESTART1 is a macro, not a function" when I am calling the macro RESTART1
[22:44:35] <phoe> how are you calling the macro RESTART1?
[22:44:39] <phoe> and is that Common Lisp?
[22:44:44] <lisp123__> CL yes
[22:44:57] <lisp123__> (cond ((null tree) (print "yo") (restart1))
[22:45:10] <phoe> hmmmmmm
[22:45:12] <lisp123__> so the error happens when tree is null and restart1 is called
[22:45:18] <lisp123__> but it works for all other nodes
[22:45:24] <phoe> I need more context, please post your code at https://plaster.tymoon.eu/
[22:45:29] <phoe> what is your implementation and version?
[22:46:38] *** Quits: icer (~Guest87@107-218-253-217.lightspeed.tukrga.sbcglobal.net) (Quit: Client closed)
[22:46:53] *** Joins: Guest87 (~Guest87@107-218-253-217.lightspeed.tukrga.sbcglobal.net)
[22:47:41] <lisp123__> SBCL
[22:47:42] <lisp123__> https://plaster.tymoon.eu/view/2579#2579
[22:48:17] <lisp123__> Its pretty convoluted so I wouldn't bother too much, it will take me some time to figure out...
[22:49:10] *** Quits: kpoeck (~kpoeck@87.140.193.0) (Quit: Client closed)
[22:49:14] *** Guest87 is now known as icer
[22:49:30] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[22:51:00] <phoe> please read the compilation warnings
[22:51:23] <phoe> there are some heavy warnings all over the place coming from the two =DEFUN forms
[22:51:35] <phoe> I'm not touching that code until it compiles cleanly
[22:52:05] <lisp123__> no worries, its a bit obscure I know
[22:52:35] <phoe> obscure or not, if it doesn't compile without warnings then it very likely won't work
[22:52:56] <Bike> you need (defvar *cont*) (defvar *saved*) in there somewhere
[22:53:14] <Bike> also, this doesn't have a definition of dft-node, so we can't run it.
[22:53:17] <phoe> "undefined function: COMMON-LISP-USER::DFT-NODE" also looks like it needs some attention
[22:54:09] <Bike> (defvar *cont* #'identity), actually. PG has (setq *cont* #'identity) in his book, which is incorrect.
[22:54:25] <lisp123__> Bike: Sorry, added in: https://plaster.tymoon.eu/view/2579#2579
[22:55:26] <lisp123__> This is a related version: https://stackoverflow.com/questions/24721676/continuation-in-common-lisp-by-macros-regarding-an-implemetation-in-onlisp
[22:55:46] <lisp123__> Currently my code is 1:1 from the On Lisp
[22:56:32] <lisp123__> Most of it works, except for when trying to work with the very last function
[22:56:40] <lisp123__> expression*
[22:57:37] <Bike> Okay. I fixed all the problems and ran that expression, and then I did (restart1) repeatedly. It returned a bunch of different values and then DONE, so I think it's working.
[22:58:08] <lisp123__> What was the problem?
[22:58:15] <Bike> If you're seeing something different you might just need to recompile it. =defun will define RESTART1 as a macro rather than a function, as PG explains in his book, so you might have an out of date definition of it.
[22:58:33] <Bike> The problems were mostly that PG keeps doing (setq something value) instead of (defvar something value)
[22:58:49] <Bike> if you want to use a top level variable you actually have to define one
[22:59:00] <lisp123__> I loaded the functions with C-x C-e - that wouldn't have been the source of the issues by any chance (you mentioned 'recompile')?
[22:59:23] <Bike> I don't think evaluating rather than compiling would matter, but let me check
[22:59:53] <Bike> er, hang on
[22:59:58] <Bike> you mean you did C-x C-e one by one on each form?
[23:00:02] <lisp123__> Yes
[23:00:20] <phoe> in which order?
[23:00:29] <phoe> I usually use C-x C-k for whole-file compilation
[23:00:29] <Bike> just do C-c C-l to load the whole file at once
[23:00:33] <lisp123__> Just down the page
[23:01:10] <Bike> oh hey, evaluating it did result in the error. let me see
[23:01:21] <lisp123__> yyup - sometimes it does, sometimes it doesn't
[23:01:29] <Bike> I see the problem.
[23:01:46] <Bike> =defun defines restart1 as a macro, as mentioned. However, you have restart1 defined after dft-node, which has a (restart1) form.
[23:02:07] <Bike> So if you load the file sequentially, the macroexpansion of dft-node's body will assume that restart1 is a function, and rewrite it as a CPS call.
[23:02:38] <Bike> which doesn't work obviously.
[23:02:58] <lisp123__> Yay! It works
[23:03:02] <lisp123__> :) Thanks!!!!!
[23:03:15] <lisp123__> Now I know why it worked sometime and not, I must have evaluated restart1 first in those caes
[23:03:45] <Bike> no problem. in the future you might want to default to using slime-compile-and-load-file, C-c C-k in slime
[23:04:12] <lisp123__> You guys are too smart, that was pretty obscure!
[23:04:28] <Bike> although really the good fix is to define restart1 first. i wonder why PG didn't
[23:05:08] <lisp123__> Yeah he had it in the wrong order too
[23:05:40] <lisp123__> It worked for the simple cases, but fell over in the more advanced one that I was having at the end of the file
[23:06:05] <lisp123__> Does order not matter if one uses C-c C-k?
[23:08:31] <lisp123__> Also (as a final), is this how you avoided the undefined variables "trick" that PG did? https://plaster.tymoon.eu/view/2580#2580
[23:08:36] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 272 seconds)
[23:09:31] <Bike> i just did (defvar *cont* #'identity)
[23:09:31] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[23:09:54] <Bike> i think PG meant it to be dynamically scoped
[23:10:11] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Quit: Leaving)
[23:10:15] <Bike> that's usually what *earmuffs* mean
[23:10:41] <lisp123__> No he wanted it to not be special
[23:10:56] <Bike> where does it say that?
[23:11:00] <lisp123__> That's why he didn't define it, because he wanted *cont* within the macros to shadow the outer *cont*
[23:11:23] <lisp123__> It is by manipulating *cont* that we will get the effect of continuations. Although *cont* has a global value, this will rarely be the one used: *cont* will nearly always be a parameter, captured by =values and the macros defined by =defun. Within the body of add1, for example, *cont* is a parameter and not the global variable. This distinction is important because these macros wouldn’t work if *cont* were not a local variable. That’
[23:11:24] <lisp123__> s why *cont* is given its initial value in a setq instead of a defvar: the latter would also proclaim it to be special.
[23:11:46] <Bike> okay, well, that's kind of perverse
[23:11:52] <phoe> right?
[23:12:01] <Bike> do not follow PG's example here
[23:12:09] <phoe> a defglobal would not work here because it doesn't allow shadowing
[23:12:15] <phoe> a symbol macro would kind of work
[23:12:15] <lisp123__> This was the suggested approach on SO https://plaster.tymoon.eu/view/2580#2580
[23:12:39] <phoe> yes, except the symbols are mismatched
[23:12:45] <phoe> actual-cont versus *actual-cont*
[23:12:46] <lisp123__> Does that work to create global lexically scoped variables?
[23:13:00] <phoe> it *emulates* global lexically scoped variables that can also be shadowed
[23:13:07] <phoe> standard CL has no way of creating those
[23:13:40] <lisp123__> Thanks! And this is 'portable' code?
[23:14:02] <phoe> yes, it should work on all conforming implementations
[23:14:24] <lisp123__> Cool :)
[23:14:32] *** Quits: icer (~Guest87@107-218-253-217.lightspeed.tukrga.sbcglobal.net) (Quit: icer)
[23:17:04] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:44d8:4ffb:6857:e507) (Remote host closed the connection)
[23:19:34] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:20:55] *** Joins: lambdatheultimat (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr)
[23:23:51] *** Quits: psycomic (~psycomic@2a01cb0588c5e40013ca379584e5300b.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[23:24:54] *** Joins: psycomic (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr)
[23:25:15] *** Quits: lambdatheultimat (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr) (Read error: Connection reset by peer)
[23:29:33] *** Joins: gaqwas (~john@dynamic-077-007-123-010.77.7.pool.telefonica.de)
[23:38:48] *** Joins: hafat (~hafat@95.70.167.173)
[23:43:36] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[23:44:33] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:45:21] *** Joins: selwyn (~selwyn@user/selwyn)
[23:47:32] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Quit: Leaving)
[23:47:51] <shka> pjb: i created bug for postmodern
[23:48:03] <shka> because it looks like it
[23:48:07] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[23:49:04] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[23:49:08] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 272 seconds)
[23:53:57] *** Quits: lisp123__ (~lisp123@45.130.83.212) (Remote host closed the connection)
[23:56:10] <Josh_2> sabra is very good at responding to issues on github
