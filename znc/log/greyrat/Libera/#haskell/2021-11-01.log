[00:03:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[00:04:56] *** Joins: cjb (~cjbayliss@user/cjb)
[00:05:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[00:06:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:06:36] <hololeap> this is what fails: https://github.com/dhall-lang/dhall-haskell/blob/master/dhall-toml/src/Dhall/DhallToToml.hs#L218-L219
[00:07:47] <hololeap> this is the error I get: http://sprunge.us/nrvtl0
[00:08:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[00:09:04] <hololeap> I'm trying to package dhall-toml for gentoo and while I know it is silly to disable a test that isn't passing, as long as I have it well documented it makes sense, considering every other test passes.
[00:09:56] <sclv> if the test isn't passing you should file a ticket -- it seems like their error!
[00:10:15] <hololeap> yeah, but in the meantime, I want to package this
[00:11:05] <sclv> then remove the formatting from the block in the meantime, or change the test so it passes
[00:11:47] *** Quits: catman (~catman@user/catman) (Read error: Connection reset by peer)
[00:12:03] *** Joins: NoidedSuper (~manjaro-u@2601:280:5a81:520::f8be)
[00:12:04] * geekosaur wonders if the latter is reliably possible
[00:12:14] <sclv> afaik there's no way to leave the cmd exactly the same and fully disable the test.
[00:12:17] <sclv> er the haddock
[00:12:24] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[00:12:28] <geekosaur> if it's say using HashMap is it guaranteed to use the same order every time?
[00:12:47] <Hecate> https://www.reddit.com/r/haskell/comments/qjxjh5/ann_jordan_abstract_inspectable_json/
[00:12:50] <Hecate> noice
[00:12:51] <sclv> i suspect in this case its swapped the hashmap for the ordmap in the latest, so its more reliable now!
[00:13:15] <sclv> (latest aeson)
[00:13:48] <hololeap> yeah, it's a hashmap, it seems: https://hackage.haskell.org/package/tomland-1.3.3.0/docs/Toml-Type-TOML.html#t:TOML
[00:14:06] <NoidedSuper> That Jordan library looks sick Hecate, I bet the guy who wrote it is smart and attractive
[00:14:31] <NoidedSuper> (I wrote it :D. You have no idea how hype I am that people are finding it cool enough to share)
[00:16:42] *** Joins: econo (uid147250@user/econo)
[00:16:49] <hololeap> which explains why it fails with the inner list being out of order
[00:17:43] *** Joins: fog (~fog@176-157-77-163.abo.bbox.fr)
[00:18:15] *** Joins: catman (~catman@user/catman)
[00:20:16] *** Quits: fog (~fog@176-157-77-163.abo.bbox.fr) (Client Quit)
[00:20:31] *** Joins: fen (~fen@176-157-77-163.abo.bbox.fr)
[00:20:57] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:af93:19b0:8b26:3fa2)
[00:21:17] *** Quits: fen (~fen@176-157-77-163.abo.bbox.fr) (Client Quit)
[00:21:34] *** Joins: motle (~motle@176-157-77-163.abo.bbox.fr)
[00:21:40] *** Quits: motle (~motle@176-157-77-163.abo.bbox.fr) (Client Quit)
[00:22:10] *** Joins: dartford (~dartford@176-157-77-163.abo.bbox.fr)
[00:22:20] <dartford> hi!
[00:22:45] <dartford> >700 users online! iv never seen it so busy
[00:22:52] <dartford> anyone active?
[00:22:59] <geekosaur> yes
[00:23:03] <dartford> woop!
[00:23:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[00:23:17] <geekosaur> and we've been riding over 700 users for a couple of months now
[00:23:31] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Read error: Connection reset by peer)
[00:23:40] <geekosaur> the move from fn did shake out a bunch of never-active folks though
[00:23:49] <dartford> awesome, i want to ask about probabilistic models in streaming space models as state traversals  
[00:24:30] <sm> some of them moved to #haskell:matrix.org 
[00:24:43] <dartford> geekosaur: i guess there are some more people learning haskell each year, or maybe people from other languages migrating
[00:25:46] <dartford> basically, im not too used to using nestings of monads - with "the probability monad" etc needing to go along with the "state applicative" in the traversal
[00:26:17] <dartford> if it were me, id just "partition" the state, but i gather that this isnt idomatic haskell, and monad transformers or something is
[00:26:38] <dartford> like, keep the random seed as "part" of the state
[00:26:41] <dartford> somehow...
[00:27:07] <dartford> but i dont want to get frustrated by trying to then have a nested datatype for the state that would need its own lesnses
[00:27:20] <dartford> does that make sense?
[00:27:46] <Rembane_> dartford: What stops you from having the state as an argument to the functions working on it?
[00:27:54] <dartford> pardon?
[00:28:09] <dartford> im not sure what you mean, or why you think im saying that
[00:28:53] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[00:29:24] <Rembane_> I don't think I'm understanding what the problem you are trying to solve is, which makes me ask the wrong question. Sorry about that. 
[00:29:28] <dartford> :t mapAccumL
[00:29:29] <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
[00:29:43] <dartford> the state is `a' there, the functions act on it just fine
[00:29:55] <dartford> this is the archetypal "state traversal"
[00:30:11] <dartford> ie, traverse, but where the applicative is chosen to be StateL
[00:31:01] <dartford> what im saying is i would replace the polymorphic type `a' by something with a lens into the "seed" for an RNG that allows PDFs to be worked with
[00:31:16] *** Joins: mestre (~mestre@191.177.175.57)
[00:31:32] <dartford> so that on each encountered element, the new seed can be updated into its portion of the state
[00:32:11] <dartford> normally people use monad transformers for this partitioning of reader/writer/state monads
[00:32:28] <dartford> instead of lenses into the "seed part"
[00:32:36] <dartford> see what i mean?
[00:33:07] <dartford> im confused about if im supposed to use lenses or nested monads or what
[00:33:34] <hololeap> It seems like you just want a regular State monad to me
[00:33:52] <dartford> thats already factored into mapAccumL
[00:33:59] <dartford> really i should be using traverse, sorry
[00:34:02] <dartford> :t traverse
[00:34:03] <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[00:34:17] *** Joins: zebrag (~chris@user/zebrag)
[00:34:41] <dartford> so thats `f' in the type signature, which should hold both the RNG seed, and anything else thats an "updated carry"
[00:35:10] <dartford> i guess its a question about composite data, and nested datatypes vs monad transformers
[00:35:53] <dartford> ie, it would be a composition of monads that would still have the applicative instance of StateL to allow it to scan properly 
[00:36:00] <dartford> i think...
[00:37:50] <hololeap> % :t \f -> runState . traverse (state . f)
[00:37:50] <yahb> hololeap: Traversable t => (a -> s -> (b, s)) -> t a -> s -> (t b, s)
[00:37:55] <dartford> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Traversable.html#mapAccumL
[00:38:20] <dartford> ah, your implementation is much better, it doesnt use coerce
[00:38:22] <dartford> thanks
[00:38:23] <hololeap> so you are correct that mapAccum is the same as traverse over some State
[00:38:42] <dartford> thats why i was calling it a "state traversal" - basically a scanner
[00:39:02] <dartford> and im calling the `s' variable a "carried state"
[00:39:13] <dartford> and the whole thing is a "streaming state space model"
[00:39:20] <hololeap> but I think you might be overcomplicating things. what you're looking for doesn't need a huge monad transformer stack
[00:39:34] <dartford> since StateL is lazy, so it can work over infinite streams, unlike plain old traverse
[00:39:50] <dartford> i think theres a superclass proposal in their somewhere
[00:40:17] <dartford> hololeap: sure, i mean, i could use a lens, but thats more complicated right?
[00:40:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:40:37] <dartford> like, i was assuming the monad transformer stack way was actually easyer than the nested datatype way then
[00:40:53] <dartford> since there is some subtle handling of the algebra of monadic composition or something
[00:40:57] <hololeap> no, none of this stuff is complicated. it's quite basic really, perhaps more basic than you're expecting
[00:40:58] <dartford> i never fully understood it
[00:41:22] <dartford> ok, so that way you need the existance of a lens in the constraint
[00:41:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:41:47] <hololeap> @hoogle zoom
[00:41:47] <lambdabot> Control.Lens.Combinators zoom :: Zoom m n s t => LensLike' (Zoomed m c) t s -> m c -> n c
[00:41:47] <lambdabot> Control.Lens.Zoom zoom :: Zoom m n s t => LensLike' (Zoomed m c) t s -> m c -> n c
[00:41:47] <lambdabot> Diagrams.Prelude zoom :: Zoom m n s t => LensLike' (Zoomed m c) t s -> m c -> n c
[00:42:00] <dartford> something like; CanUpdateTheSeed f,ApplicativesLikeStateL f => 
[00:42:34] <dartford> ok, lets not *actually* use lens
[00:42:35] *** Quits: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz) (Read error: Connection reset by peer)
[00:42:47] <dartford> i cant read those type signatures and id prefer not to have to learn how to
[00:42:50] *** Joins: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz)
[00:43:02] <dartford> i mean, this is the main reason im leaning towards the nested monads way
[00:43:14] *** Quits: tabemann (~travisb@2600:1700:7990:24e0:95ab:c391:8962:61e4) (Remote host closed the connection)
[00:43:14] <hololeap> there's something that I'm looking for that you may be interested in
[00:43:26] <dartford> actually, i think the only way it would work is if they were both States
[00:43:32] *** Joins: tabemann (~travisb@2600:1700:7990:24e0:25bd:a66c:dc78:d416)
[00:43:38] <hololeap> but really you will be passing some concrete state around and you should know how to modify it, with or without lenses
[00:43:40] <dartford> but i guess this could be relaxed to parts being only Reader or Writer
[00:44:44] <dartford> ok, so suppose the only thing i ever read+write is the RNG seed, but i also accumulate some data into a writer 
[00:45:14] <dartford> like, i grow a list of accumulated elements 
[00:45:27] <hololeap> do you even need a Writer here? do you have some monoidal data that you want to append to as a side-effect?
[00:45:31] *** Joins: acidjnk (~acidjnk@p5487d843.dip0.t-ipconnect.de)
[00:45:45] <dartford> something like using cons to update the state, but not actually using it, in mapAccumL
[00:45:49] <dartford> :t mapAccumL
[00:45:50] <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
[00:46:38] <dartford> i thought if you update it you need writer...
[00:47:04] <dartford> er, ok nvm lets just use full state
[00:47:15] <dartford> since it would need to be read to update it
[00:47:27] <dartford> :t mapAccumL (\_ b -> (b:?,undefined))
[00:47:27] <lambdabot> error:
[00:47:28] <lambdabot>     A section must be enclosed in parentheses thus: (b :?)
[00:47:34] <dartford> oops!
[00:47:47] <hololeap> https://hackage.haskell.org/package/optics-extra-0.4/docs/Optics-Zoom.html
[00:47:50] <dartford> like, it needs the `a' not to be a wildcard above
[00:48:01] <dartford> hololeap: i really want to avoid lenses
[00:48:23] <hololeap> ok, it seemed like you were interested earlier
[00:48:50] <dartford> i was presenting 2 alternatives, and asking about the other
[00:49:05] <dartford> well, i kind of forgot how difficult i find lesnse
[00:49:20] <hololeap> you might like this optics library a little better
[00:49:29] <dartford> im sorry
[00:49:35] *** Quits: Alleria (~textual@user/alleria) (Remote host closed the connection)
[00:49:41] <hololeap> just for future reference
[00:50:03] <dartford> its illegible, im sorry
[00:50:03] *** Quits: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz) (Read error: Connection reset by peer)
[00:50:25] <hololeap> yeah it takes some getting used to, for sure, and the type signatures don't help much, unfortunately
[00:50:30] <dartford> even if it did exactly what i described, its impenetrable 
[00:50:31] *** Joins: proboscis (~proboscis@14.137.28.197)
[00:50:43] <dartford> none of it helps at all!
[00:51:08] <dartford> it has some inklings that its the right thing, suggesting you can "change part of the state"
[00:51:25] <dartford> but i can say that quite easily, "the rng would have its own lens"
[00:51:31] <dartford> i just use that term to comunicate
[00:51:41] <dartford> i have no intension of ever wrangling with its machinery 
[00:52:29] <dartford> i use deep extensible generic containers instead of anything to do with records, is the actual reason for my hesitance
[00:52:36] <dartford> but this is an asside
[00:52:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[00:53:04] <dartford> the only relavence being, this is not yet something we have a unified approach too
[00:53:10] <dartford> "change that part of it"
[00:53:25] <dartford> easyer said than done!
[00:53:42] <dartford> my approach uses algebraic pointers instead of string symbol records
[00:53:52] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[00:54:04] <dartford> "down 3 levels, along 2, down until the leaf" kind of thing
[00:54:29] <dartford> these directions are equivalent, and i spent years developing it. im not going to start on with symbolic records now
[00:54:49] <dartford> you cant add together records... thats why i bang on about mine being algebraic
[00:54:59] <dartford> navigations compose...
[00:55:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:55:26] <dartford> but then, when everything is an nd grid, where positions make a lot of sense, 
[00:55:35] <dartford> and then *only one of them is special*
[00:55:40] <dartford> because its the RNG seed
[00:55:43] <dartford> i get scuppered 
[00:56:11] <dartford> i figured the easyest way would just be to wrap it up in the probability monad 
[00:56:24] <dartford> and do the monad transformer stack way instead 
[00:56:51] <hololeap> what you're calling "the probability monad" is just State carrying around some random seed, right?
[00:57:02] <dartford> (instead, of having the seed as part of the datatype, and reserving that extensible domain for the euclidian grid) 
[00:57:04] <hololeap> and perhaps some other info
[00:57:23] <dartford> hololeap: exactly, essentially just a tuple with an Int, nothing that should be too difficult...
[00:57:26] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 260 seconds)
[00:57:43] <dartford> (Int,BigCrazyExtensibleGraphThing)
[00:57:45] *** Joins: proboscis (~proboscis@14.137.28.197)
[00:57:53] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[00:58:17] <dartford> its just, this form of "extension", pairing it with the seed int, isnt the same way as the graph is extended
[00:58:20] <sclv> that seems very reasonable
[00:58:34] <dartford> cheers!
[00:58:35] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[00:58:44] <dartford> so wtf do i do!?
[00:59:16] <sclv> what do you mean. you just described what you do
[00:59:24] <sclv> you have a state monad that has a pair in the state
[00:59:37] <dartford> i mean, i dont know how to work with monad transformers
[00:59:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[00:59:50] <sclv> you don't need a transformer if you just have a single state with a pair in the state
[01:00:08] <dartford> i reccon to presereve the lazy StateL business, for the stream transduction, so i need a similar Applicative instance for the (Int,)
[01:00:32] <dartford> sclv: oh, i think i was anticipating its partial application
[01:00:37] *** Joins: img (~img@user/img)
[01:00:47] <dartford> like, so i could do "probabilistic scanning" 
[01:00:57] <dartford> as a thing that was already abstracted
[01:01:02] <dartford> if that makes any sense at all
[01:01:17] <dartford> like, handling this "top layer" already
[01:01:20] <sclv> just follow the types -- you can adapt any functions that worked over the old state to work over one component of the tuple
[01:01:25] <dartford> ie, having to partition it into layers
[01:01:38] <dartford> thats why i was considering the monad transformer stack to begin with
[01:02:11] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 264 seconds)
[01:02:36] <dartford> sclv: i want to compose two lazy "StateL style" applicatives together to get a new lazy StateL applicative style thing
[01:02:48] <dartford> so the scanners work
[01:02:55] <sclv> what is a StateL
[01:03:00] <sclv> also applicatives compose directly
[01:03:02] <dartford> if the applicative instances dont *compose* then this wont work
[01:03:13] <dartford> they are different instances
[01:03:20] <dartford> and a new instance is required for their nesting
[01:03:27] <sclv> https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Functor-Compose.html#t:Compose
[01:03:30] <dartford> thats the kind of composition i mean. not <*>
[01:04:05] <dartford> oh, sorry, you were talking about the same form of composition...
[01:04:15] <dartford> im just concerned it wont preserve the lazyness
[01:04:29] <sclv> if you don't need monad composition, just applicative composition, it comes via Compose, no transformers necessary
[01:04:29] <dartford> not all applicatives end up producing lazy traversals, but StateL does...
[01:04:39] <dartford> nice!
[01:04:41] <dartford> thanks
[01:04:49] <dartford> what about the lazyness consideration though?
[01:05:01] <dartford> i guess they are both StateL actually...
[01:05:18] <dartford> does that have its own rule for how it forms a new applicative via use of Compose?
[01:05:44] <dartford> like, StateL is basically just a tuple at the end of the day, iirc
[01:06:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:06:07] <dartford> so it should work for how i want it to handle the RNG seed
[01:06:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[01:06:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:06:21] <sclv> your description is both very specific and vague
[01:06:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:06:31] <sclv> take a look at the source and try it out and see if it works how you expect https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Functor-Compose.html#t:Compose
[01:06:41] <dartford> basically, this describes an extensible deep datatype equivalent, instead of nested pairs, as nested StateL applicatives
[01:07:01] <dartford> motivated by its use for scanning
[01:07:05] <dartford> (!)
[01:07:14] <dartford> (seems like a result, right?)
[01:07:41] <dartford> Q"which kind of extensible generic lens thingy do i need" ? 
[01:07:52] <dartford> A: nested StateL applicatives using Compose
[01:08:00] <dartford> peer review?#
[01:08:35] <dartford> what do you reccon?
[01:09:03] <sclv> i genuinely can't follow. just try what i suggested and post some much more specific actual code in a pastebin if you need more advice.
[01:09:18] <dartford> peer review denied.
[01:09:23] <dartford> ok, thanks for the help
[01:10:10] <dartford> really hate it when that happens!
[01:10:31] <dartford> anyone that understood could chip in?
[01:11:14] <geekosaur> I don't think any of us really understood
[01:12:02] <dartford> well, regardless of that assertion, im not going to be roped into another explanation if this one would do
[01:12:11] <dartford> like, maybe you just cant be bothered, idk!
[01:12:25] <dartford> this is bat country 
[01:12:39] <dartford> rabbit holes must be avoided
[01:13:14] <geekosaur> it's not that we can't be bothered, it's that your attempts at describing what you're doing is really confusing. like you're not quite speaking the same language we do
[01:14:03] <geekosaur> I've been sitting here trying to follow the discussion and just getting more and more confused as it went on
[01:16:53] *** Quits: Jing_ (~textual@103.121.208.115) (Remote host closed the connection)
[01:17:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[01:17:31] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[01:19:34] <dartford> hmm, thats quite bad
[01:20:14] *** Joins: nickkkkk_all (~nick_all@139.102.124.132)
[01:20:39] <dartford> i thought the conclusion that the compositional thing i was after, wasnt a monad transformer stack, or a deep nested record, but was Applicatives - specifically StateL, composed using Data.Functor.Compose - seemed like a really good result
[01:20:56] <dartford> and then your like "dude, i cant follow, spoonfeed us"
[01:21:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[01:21:44] <dsal> Sometimes when communication isn't effective, the communicator needs to do a better job.
[01:21:47] <dartford> erm, oh right, maybe you dont understand why StateL is motivated by scanners, aka "state traversals" - for lazy compositional stream transduction
[01:22:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:22:35] <dartford> dsal: great advice, in general. but totally useless in an actual setting where specific inquisitiveness would be required to try to fathom what was so apparently difficult to understand
[01:22:49] <dartford> otherwise im just left guessing
[01:22:57] <dartford> maybe thats direction enough, but not for me
[01:23:15] <geekosaur> well, for one example you keep saying "lens" but I keep getting the impression you don't mean the same thing we do when we say it
[01:23:17] <dsal> When nobody understands you, it's not everyone else who's at fault.
[01:23:24] <dartford> "frustrate them towards their goal" being, like, kind of, suboptimal from *my* perspective
[01:23:26] <hololeap> it seems to me that you are over-abstracting the problem which leads to overly-complex ideas like BigCrazyExtensibleGraphThing and "probabilistic scanning". work on refining it until you have NiceEasyToUnderstandAndExplainThing
[01:23:36] *** Parts: ksu (~ksu@user/prtr) (End of Transmission Block)
[01:23:56] <dartford> geekosaur: seems like lens "means" - i can get at part of it
[01:24:26] <hololeap> lens is really just a convenience thing. they don't do anything that you couldn't already do without them
[01:24:34] <dartford> if thats a confusing way to use the word ill opt for a disambiguation, but since this seems like what we understand it to mean, i dont think thats nesacary
[01:24:52] <dartford> i just have to explain that i dont want to actually use someone elses machinery since im developing my own
[01:24:54] *** Quits: tabemann (~travisb@2600:1700:7990:24e0:25bd:a66c:dc78:d416) (Quit: Leaving)
[01:25:10] <dartford> well, its motivated by scanning
[01:25:11] <geekosaur> "lens" describes a specific data access mechanism based on van Laarhoven lenses
[01:25:25] <dartford> we wouldnt have arived at Comosed StateL applicatives without that as the specifying thing
[01:25:40] <dartford> and basically, what we end up constructing is a "BIGCRAZYEXTENSIBLETHING"
[01:25:48] <dartford> so no, i dont think those are superflous notions
[01:25:55] <dartford> they are infact, almost all of the actual thing
[01:26:04] <geekosaur> there are some other varieties but they all do the same basic thing, they're a specific way to access data, not a general/vague description of accessing data
[01:26:32] <dartford> geekosaur: yeah exactly, a getter and a setter, being able to access part of the thing
[01:26:41] <dartford> "access"
[01:26:41] *** Joins: tabemann (~tabemann@2600:1700:7990:24e0:25bd:a66c:dc78:d416)
[01:26:54] <dartford> "lens" into it
[01:27:09] <dartford> its a common term and im using it correctly
[01:27:33] <dartford> but, no records, please 
[01:28:04] <dartford> if the RNG seed is on the outer layer, i will use this *positional* information only
[01:28:13] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[01:28:16] <dartford> layered pairs essentially
[01:28:19] <dartford> everything is
[01:28:34] <dartford> thats why its what your true love gives to you on the first day of christmas
[01:28:42] <dartford> "part"ridges, in *pair* trees
[01:28:53] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[01:29:00] <dartford> deep theorm there, but just a mnemonic 
[01:30:02] <dartford> im just contesting having to write carrot underscore RNG_ update zoom underscore 
[01:30:19] <dartford> which i dont believe is at all legible
[01:30:32] <dartford> "update the outer layer, remember which layer is which"
[01:30:39] <dartford> is my preferred approach 
[01:31:19] <dartford> anyway, this is why i refuse to be gauded into further explanations, my first one was fine
[01:31:26] <dartford> now im just getting pissed
[01:31:30] <dartford> i appologise
[01:33:01] <dartford> i guess really my problem is that in an ND cartesian domain, which has easily interpretable "dimension" as the layers, having the outer layer as a plain Int is totally different, so doesnt fit into my usual abstraction as every nesting being wrapping in a list
[01:33:23] <dartford> now its pairing with an int instead of wrapping with a list, so i get confused, but i guess the notion of position is still good
[01:33:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[01:33:31] <dartford> how deep it is, being what im calling position
[01:34:39] <dartford> ahhh
[01:34:55] <dartford> yeah its quite reasonable im concerned, a pair is essentially a length restricted list
[01:35:13] <dartford> im used to always being able to say "go down a bit, go along a bit, go down a bit more" etc
[01:35:21] <dartford> but with a pair there is no "going along a bit"
[01:35:35] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[01:35:40] <dartford> i suppose if i have extent restricted layers, it would just throw a type error if i tried to "go along" 
[01:35:42] *** Quits: nickkkkk_all (~nick_all@139.102.124.132) (Ping timeout: 260 seconds)
[01:35:45] <dartford> on the Int level
[01:36:10] <dsal> You're gonna have a pretty hard time in general if you continue to assert that you're good at explaining things while ignoring evidence from people who fail to understand your explanations.
[01:36:30] <hololeap> I think Data.Tree (rose trees) would model an n-dimensional cartesian domain just fine, wouldn't they?
[01:36:30] <dartford> er, actually yeah, you do have the option to "go along" either the first or second element, so i can just use the same concept of typesafe navigation
[01:36:49] * dsal goes to play with chainsaws instead
[01:36:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:37:31] <dartford> thanks for that. im just saying, when i ask for help, you say "do more work - we cant understand" and im like "that wouldnt actually help"
[01:37:43] <dartford> see what i mean...
[01:37:49] <dartford> "no, we dont"
[01:38:03] <dartford> and im like "dsal, wait for me, i want to play too"
[01:38:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[01:38:27] <dartford> hololeap: this is the theorem
[01:38:34] <dartford> all is trees
[01:38:36] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:39:00] <dartford> even if some of the branches are just pairs
[01:39:22] <dartford> i guess the point is youd better remember how wide the branches are everywhere
[01:39:31] *** Joins: zebrag (~chris@user/zebrag)
[01:39:43] <dartford> which is what you get for doing away with string symbol labels, aka records
[01:39:53] <dartford> which is what edkmet lenses use
[01:40:04] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:40:11] <dartford> right, i finally said that comprehensibly
[01:40:15] <dartford> so sorry
[01:41:10] <hololeap> so at each node, you have zero or more child nodes, correct? and you want to memoize the number of children for each node? and also an RNG for some reason? haha
[01:41:27] <hololeap> trying to piece it together
[01:41:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[01:41:51] <dartford> one or more
[01:41:55] <dartford> nonempty lists
[01:41:59] <dartford> no "shaped empty"
[01:42:11] <dartford> [[],[]] is disalowed for example
[01:42:28] <dartford> just for the sake of it, it was a glitch i kept encountering
[01:42:46] <dartford> hololeap
[01:42:55] <dartford> its for probabalistic scanning
[01:43:07] <dartford> thats why we ended up with StateL where pairs used to be
[01:43:32] <dartford> to get the lazyness of mapAccumL
[01:43:44] <dartford> for lazy stream transduction
[01:43:48] <hololeap> ok, what would the termination state be for a each node, to say "the tree stops here". if it is required to have at least one child it would be infinite, which sounds like why you are trying to figure out this laziness thing
[01:44:16] <dartford> no, the length of the rose trees branches can be infinite
[01:44:22] <dartford> its not strictly infinite in depth
[01:44:26] <dartford> it can terminate at a value 
[01:44:37] <dartford> though it can be recursive 
[01:44:54] <dartford> but thats handled slightly differently since it has to be labled, not really whats being discussed here
[01:45:08] <dartford> we can stick to just considering scanning over a list for simplicity
[01:45:17] <dartford> a strictly infinite stream rather
[01:45:24] <dartford> for instance an IOList
[01:45:45] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:46:12] <dartford> like, the server can just keep returning requests, no real notion of the "end of the list"
[01:46:18] <dartford> so it *needs* to be lazy
[01:46:22] <dartford> you *cant* use traverse
[01:46:33] <dartford> well, unless its restricted to StateL as the applicative
[01:46:42] <dartford> or some other "lazy applicative"
[01:46:52] <dartford> some applicatives would force evaluation of the whole thing
[01:47:07] <dartford> thats why i talk about mapAccumL and scanners as if they are a seperate thing to traverse
[01:47:32] <dartford> traverse + StateL = scanners, basically
[01:47:52] <dartford> scanners, being always lazy, form an algebra for stream transduction
[01:48:10] <dartford> anyway, i forgot the question, i hope that clears something up at least
[01:48:18] <dartford> i dont really want to just keep explaining that point
[01:48:22] <dartford> but thats the central point
[01:48:29] <dartford> about the lazy stream algebra
[01:48:49] <dartford> offered by scanners, as a distinction from the rest of Traversable
[01:49:17] <hololeap> I wonder if something like conduit might fit your use case
[01:49:33] <dartford> yeah, this replaces that
[01:49:41] <dartford> with actual theorems
[01:49:45] <dartford> in idomatic haskell
[01:49:53] <dartford> acording to the class hierarchy of the prelude
[01:50:05] <dartford> scanners beat conduits!
[01:50:16] *** Quits: NoidedSuper (~manjaro-u@2601:280:5a81:520::f8be) (Remote host closed the connection)
[01:50:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[01:51:22] <dartford> its not hard to understand why. its because of that point about lazyness, that allows them to be scanned repeatedly, since each of them actually returns
[01:51:41] <dartford> so notionally, its as if it does one element at a time, passing it through *each* scanner applied 
[01:51:50] <dartford> as if the scanners were algebraically composed
[01:52:15] <dartford> this compositionality being what conduit does, but in a much less direct way
[01:52:43] *** Joins: zebrag (~chris@user/zebrag)
[01:52:45] <dartford> the lazyness of StateL means mapAccumL has a rewrite rule essentially
[01:53:18] <hololeap> so you are reading from an infinite stream, threading a random seed through, creating this tree structure along the way, and doing some sort of sliding-window calculation with each new chunk of data that comes in?
[01:53:46] <dartford> erp, im kind of wanting to not be concerned with the "shape" of the state
[01:53:56] <dartford> other than to say, it has a lens into the RNG seed
[01:54:13] <dartford> so never mind about if the carry is a grid or not
[01:54:31] <dartford> the point is that whatever the carry is, it should have part of it be the seed
[01:54:40] <dartford> so that the update function can be probablistic
[01:54:47] <dartford> .
[01:55:26] <hololeap> that's fine. you can write something that transforms `State RandomSeed a` to `State (RandomSeed, s) a`, generically. that way you can have your functions that only deal with the seed and ignore the rest of the state
[01:56:47] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 264 seconds)
[01:57:05] <hololeap> that's what the zoom thing from lens does... it "zooms" into part of a State so that you can think about it in isolation. but, you don't have to use the implementation from lens specifically, you can write it "by hand" as well
[01:58:09] *** Joins: proboscis (~proboscis@14.137.28.197)
[02:00:11] <dartford> essentially commuting part of it into the pair and back again, as in a getter and a setter of the van larhoven lens
[02:00:17] <dartford> yeah "i can lens into the seed"
[02:00:21] <dartford> being the spec
[02:00:33] <dartford> i get that this library seems to achieve this
[02:00:55] <dartford> but i just want to use StateL and Compose, so i preserve the lazyness of its applicative when used with traverse
[02:01:00] <dartford> you understand this part?
[02:01:17] <dartford> the lazy compositionality of StateL?
[02:01:23] <dartford> for the scanner...
[02:01:33] <dartford> its all about that applicative instance
[02:01:41] <dartford> to give something like mapAccumL
[02:01:49] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[02:02:08] <dartford> otherwise i dont get my rewrite rule that expresses the algebra
[02:02:11] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 245 seconds)
[02:02:51] <hololeap> what is StateL? Control.Monad.State.Lazy?
[02:03:11] <dartford> L for left 
[02:03:16] <dartford> :t mapAccumL
[02:03:17] <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
[02:03:26] <dartford> no good traversing from the right in an infinite stream!
[02:03:37] <dartford> so yeah, maybe left and lazy are synonimous in this case
[02:03:42] <dartford> not sure what module its in, sorry
[02:03:59] <dartford> oh, its herer
[02:04:00] <dartford> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Functor.Utils.html#StateL
[02:04:18] *** Joins: son0p- (~ff@181.136.122.143)
[02:04:32] <dartford> right above the all essential applicative instance
[02:04:40] <hololeap> oh, that's new. I don't have that in my base
[02:04:55] <dartford> well, you dont need it if you use scanners
[02:05:08] <dartford> basically you wouldnt be using traverse in the streaming setting
[02:05:12] <dartford> it would be dangerous to
[02:05:33] <dartford> should be strictly restricted to using scanners to avoid the pottential for composing with a non-lazy applicative
[02:06:07] <dartford> but then i guess you couldnt be able to use this compose machinery to get the composed applicative instance
[02:06:15] <hololeap> the only problem I see is that you probably want this thing to emit some sort of status periodically, right? so you would need it to have access to IO?
[02:06:20] <dartford> but then, the scanner implementation makes do without that anyway..
[02:06:38] <dartford> huh, IO in the monad transformer stack
[02:06:40] <dartford> yeah
[02:06:41] <dartford> could be
[02:06:57] <dartford> but, can be avoided, like, using a carried seed instead of an IO RNG.
[02:07:01] <dartford> its determanistic then too
[02:07:07] <dartford> important for reproducability
[02:07:08] *** Joins: proboscis (~proboscis@14.137.28.197)
[02:07:24] <dartford> theres a link to a github for the scanners over IOList if you like i can find it
[02:07:39] <dartford> but really i just want to use a pure infinite list 
[02:07:47] <dartford> to avoid the additional complexity
[02:07:54] <dartford> and any pottential for runtime errors
[02:08:12] <hololeap> if it runs indefinitely, you would not have access to any of the output unless it was emitted through IO
[02:08:35] <dartford> scanner f (repeat ())
[02:08:38] <dartford> for example
[02:08:47] <dartford> clock = repeat ()
[02:08:56] <dartford> in the IO setting you can add a thread delay
[02:09:14] <dartford> so its more like an actual clock, but the pure versions fine
[02:09:30] <dartford> oh yeah sure, but main being the only IO
[02:09:49] <dartford> hmm, your right though, that puts IO into the monad stack
[02:10:20] <dartford> it ends up like Compose IO (Compose (StateL Int) (whatever the rest of the carry is))
[02:10:46] <dartford> it ends up like Compose IO (Compose (StateL Int) (StateL `whatever the rest of the carry is'))
[02:11:06] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[02:11:15] <hololeap> probably just `Compose (StateL (RandomSeed,s)) IO`
[02:11:35] <dartford> where you can rewrite that to use just one StateL, i think like Compose IO (StateL (Int,restOfCarry))
[02:11:35] <hololeap> and then, yeah you would be restricted to the Applicative instance of IO, but that doesn't sound like it would be a problem
[02:12:08] <hololeap> because you wouldn't need arbitrary input from IO, just the ability to emit
[02:12:13] <dartford> yeah it rewrites to what you wrote, but im not sure if the applicative instance is the same
[02:12:48] <dartford> ahh, ok, i think i understand that consideration, so IO input could mess it up somehow? wouldnt make it not lazy though
[02:12:56] <dartford> all the lazy streaming works in IO just fine
[02:13:02] <dartford> well, when its an IO list
[02:13:12] <dartford> and all the functions acting over it have option for IO too,
[02:13:20] <dartford> im going to find the gist, hang on
[02:13:48] <hololeap> this is getting into territory I'm not very familiar with, namely the technical details on laziness, IO, etc, but at least we're getting to the meat of your question
[02:13:58] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 260 seconds)
[02:13:59] <dartford> this version is tested working https://github.com/fog-hs/streaming-binary-files-take2/tree/master/Stream
[02:14:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:14:24] <dartford> hololeap: sorry it took so long
[02:14:34] <dartford> i was busy
[02:14:37] <dartford> ...
[02:14:38] <hololeap> no worries
[02:14:59] <dartford> try telling her that!
[02:15:57] <dartford> anyway, its in the public domain now, so i can get hit by a bus safely without it being redacted from reality
[02:16:04] <dartford> unless you get hit by a bus at the same time
[02:16:16] <dartford> so we probably need to ride different buses or something
[02:16:17] <hololeap> what if the whole world gets hit by a bus :o
[02:16:21] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[02:16:23] <dartford> or do more work or road safety
[02:16:37] <dartford> hololeap: you cant crash a tesla!
[02:17:03] <dartford> but you can spill drinks on your structured access memory
[02:17:29] <hololeap> anway, I'm not sure if using the Monad interface for IO would mess up laziness somehow, but I think it's safe to say that restricting the domain to Applicative makes sense in this case
[02:17:32] <dartford> not that i can remember where i put my drink
[02:17:36] <dartford> or my glasses!
[02:18:26] <dartford> https://alchetron.com/cdn/professor-branestawm-3dd7e260-7142-4b63-962a-be473023b6c-resize-750.jpeg
[02:18:56] <dartford> go on go on go on go on - its got cocain in it!
[02:19:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:19:42] <dartford> hololeap: it will be fine, its out of my hands now
[02:20:01] *** Quits: fendor (~fendor@77.119.160.25.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[02:20:14] <dartford> thanks for your help - confirming you understand at least dissuades geekosaurs asserion that nobody understands and therefore that i have to explain any more
[02:20:56] <dartford> aka im satisfied im off the hook, and look forwards to living in a world where more than just me knows my results
[02:21:14] <dartford> dont worry - im not going to be taking any buses any time soon
[02:21:47] <hololeap> well, you have to understand that this is a support channel, so the assumption is that there is a specific problem you're trying to solve and you're looking for a concrete answer
[02:22:23] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[02:22:26] <dartford> yes, your right, i totally forgot i actually quite need these probabalistic scanners up and running
[02:22:32] <dartford> damn
[02:22:45] *** jinsun__ is now known as jinsun
[02:22:58] <hololeap> I mean, hook one up to an SDR and you might find something cool... IDK
[02:23:11] *** Quits: son0p- (~ff@181.136.122.143) (Remote host closed the connection)
[02:23:23] <dartford> i meant just in terms of the "result" that the crazy composable thing is an applicative stack using compose which preserves lazyness when used with traverse - ie, that its just ensted StateL with an IO in there somewere somehow
[02:24:07] <dartford> whats an SDR?
[02:24:17] <hololeap> software defined radio
[02:24:23] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:af93:19b0:8b26:3fa2) (Ping timeout: 260 seconds)
[02:24:31] <dartford> yeah, and aim it at your dog
[02:25:04] <dartford> its ok, my dog drives a tesla
[02:25:19] <hololeap> it's a good source for infinite data streams, since it's really just a analogue-digital converter hooked up to an antenna and a tuner
[02:26:06] *** Joins: son0p- (~ff@181.136.122.143)
[02:26:10] <dartford> better than hooking it up to the stock market, where there are robots evolved to conduct adversarial privacy preserving system inference and control
[02:26:27] <dartford> optimally
[02:26:42] <dartford> "dont use that socket!!!" ... "noooo"
[02:27:05] <dartford> "hey, whats up with your dog, it cant trade for shit!"
[02:27:24] <dartford> "its been hacked by trading robots!!!" 
[02:27:34] <dartford> hide your wife...
[02:28:16] <dartford> taxi!
[02:28:20] *** Quits: dartford (~dartford@176-157-77-163.abo.bbox.fr) (Quit: Connection closed)
[02:31:01] <Axman6> good lord, what happened there?
[02:31:35] <Hecate> I honestly stopped reading
[02:31:39] <Hecate> how are doing Axman6 btw?
[02:32:51] <Axman6> It is a beautiful day, I am doing well
[02:33:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[02:33:59] * geekosaur was at one point wondering if what they really wanted was a comonadic structure of some variety
[02:34:07] <geekosaur> but it was so hard to tell…
[02:34:40] <Rembane_> I was hoping that they could implement everything just using plain functions but I didn't understand what they wanted.
[02:34:58] * awpr is proud of successfully staying out of it
[02:35:15] <hololeap> it doesn't sound like there was any concrete problem they were trying to solve, just some vague idea that they wanted us to piece together.
[02:35:31] <awpr> also couldn't tell what was going on, too much of a terminology barrier and too unfocused
[02:35:42] <hpc> definitely unfocused
[02:35:46] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:35:55] <hololeap> that person has been on here in the past, asking those kinds of super vague super abstract questions, under different names
[02:36:10] <monochrom> software defined {lens, radio, network, socket}
[02:36:22] <Axman6> All I saw was a sea of green from one person and decided I didn't want to read it
[02:36:40] <Axman6> SDS< software defined software
[02:36:43] <Axman6> ,*
[02:36:46] <monochrom> What were some of their previous names?
[02:36:52] <hololeap> fog
[02:36:58] <monochrom> Oh, that. Bannable.
[02:37:00] <Axman6> ah yes
[02:37:05] <Axman6> an apt name
[02:37:06] <hololeap> that's the only one I remember
[02:37:11] <awpr> I had a flashback triggered by the github URL
[02:37:12] <hololeap> lol, yes it is
[02:37:21] <Rembane_> Dang! Was that fog?! 
[02:37:26] <hpc> yep
[02:37:33] *** Quits: DNH (~DNH@8.43.122.53) (Quit: Textual IRC Client: www.textualapp.com)
[02:37:36] <Rembane_> I was so easily fooled! 
[02:37:53] <Axman6> ah HA,you fool!
[02:39:04] <monochrom> lenses focus, fog unfocuses. That's the definition of unfocused. >:)
[02:41:24] <hololeap> the arrogant attitude was the cherry on top
[02:41:56] <Rembane_> So good 
[02:42:05] <Rembane_> Axman6: I am the foolest of fools! 
[02:43:19] * geekosaur should have kickbanned at [31 21:50:56] <dartford> and then your like "dude, i cant follow, spoonfeed us"
[02:45:02] <geekosaur> but I'd said my piece and was working on dinner and only half following at that point
[02:45:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:45:22] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:46:54] *** Joins: proboscis (~proboscis@14.137.28.197)
[02:48:01] *** Quits: max22- (~maxime@2a01cb0883359800143d8394a75c565e.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:51:57] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:53:47] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 264 seconds)
[02:53:47] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[02:55:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:55:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:55:58] *** Joins: wroathe (~wroathe@user/wroathe)
[03:07:34] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:13:22] *** Joins: johnjay (~pi@192.142.100.50)
[03:18:18] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[03:18:43] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[03:27:14] *** Joins: proboscis (~proboscis@14.137.28.197)
[03:30:02] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[03:31:02] *** Joins: zopsi (~zopsi@irc.dir.ac)
[03:33:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:34:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:39:50] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 260 seconds)
[03:45:28] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Quit: ZNC - https://znc.in)
[03:45:58] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[03:47:08] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:47:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[03:48:43] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:50:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:51:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:55] *** Lord_of_Life_ is now known as Lord_of_Life
[03:56:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:00:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[04:00:59] *** Quits: acidjnk (~acidjnk@p5487d843.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:10:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:12:34] <janus> is it allowed to to make a Haskell Wiki article on fog? or would it worsen the problem? hmmm
[04:15:09] <monochrom> I don't think the readership would be interested in IRC drama :)
[04:16:00] <sm> not a good idea
[04:18:47] <janus> sm: did you upgrade to Monterey? does it work?
[04:19:21] <Nachtgespenst> What was the drama about fog?
[04:19:31] <sm> not yet janus. shapr reports no problems
[04:19:41] <sm> there wasn't any
[04:21:31] <shapr> eh?
[04:21:36] <Axman6> Did Apple manage to make a major release which _didn't_ break GHC? That's impressive!
[04:22:19] <shapr> although today my laptop kernel panicked twice, and I wasn't compiling
[04:23:40] *** Joins: CannibisIndica (~herb@user/mesaboogie)
[04:25:25] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[04:26:47] *** Quits: CannibisIndica (~herb@user/mesaboogie) (Client Quit)
[04:27:13] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[04:27:26] <shapr> Axman6: I think it broke everything else
[04:27:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:27:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:27:34] *** Joins: wroathe (~wroathe@user/wroathe)
[04:32:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[04:35:01] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[04:40:34] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:42:48] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:16] *** Joins: proboscis (~proboscis@14.137.28.197)
[04:45:41] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[04:45:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:48:54] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:50:01] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:50:18] *** Quits: proboscis (~proboscis@14.137.28.197) (Ping timeout: 260 seconds)
[04:51:42] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[04:52:51] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[04:53:06] <Axman6> Classic. Definitely waiting for the .1
[04:55:00] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[04:55:28] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[04:55:50] <geekosaur> this does not exactly make me regret ditching Apple
[04:56:37] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[04:57:24] *** Joins: proboscis (~proboscis@115-189-129-241.mobile.spark.co.nz)
[04:59:36] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[04:59:53] *** tafama is now known as tafa
[05:00:06] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[05:03:10] *** Joins: trillp (~trillp@69.233.98.238)
[05:08:24] <dsal> shapr: compile more!
[05:10:24] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[05:10:36] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[05:11:07] <Cajun> does apple seriously kernel panic that often? if so im shocked
[05:14:06] *** Quits: proboscis (~proboscis@115-189-129-241.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[05:14:53] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[05:16:21] *** Joins: hololeap (~hololeap@user/hololeap)
[05:17:06] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[05:19:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:20:33] <Axman6> It's been a couple of years since I've had one, but they tend to crop up occasionally with new major OS releases, when they do things like rrqrite their whole graphics framework or security stuff you'd somewhat expect that to happen sometimes
[05:21:00] <dsal> I've had a couple, but I'm running new hardware and all the bleeding edge stuff I can get.
[05:21:12] <dsal> And much of the software I'm running is emulated.
[05:22:35] <justsomeguy> I've had kernel panics on every operating system I've used. (Windows, Linux, FreeBSD, Cisco IOS, Android ...)
[05:23:51] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 245 seconds)
[05:25:46] <geekosaur> it's been a decade since I had a linux kernel panic. that said I don't run bleeding edge kernels or weird hardware
[05:26:25] *** Quits: catman (~catman@user/catman) (Read error: Connection reset by peer)
[05:26:39] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[05:27:45] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[05:28:31] <justsomeguy> My laptop has an ACPI implementation bug.
[05:29:39] * justsomeguy really should spend some time investigating it, it's been bugging him for six years, now.
[05:29:53] *** Joins: proboscis (~proboscis@115-189-129-110.mobile.spark.co.nz)
[05:32:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[05:33:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:33:20] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[05:36:46] *** Quits: frobnicator (~frobnicat@185-227-75-147.dsl.cambrium.nl) (Ping timeout: 245 seconds)
[05:39:06] *** Joins: catman (~catman@user/catman)
[05:40:05] <Axman6> the one that surprises me least is Cisco IOS
[05:40:33] *** Quits: n3t (n3t@user/n3t) (Read error: Connection reset by peer)
[05:42:31] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Quit: m5zs7k)
[05:42:46] *** Joins: n3t (~n3t@s45.mydevil.net)
[05:44:21] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[05:45:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:48:27] *** Quits: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[05:49:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[05:49:42] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[05:53:27] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[06:15:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:17:44] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Quit: Konversation terminated!)
[06:20:15] *** Quits: n3t (~n3t@s45.mydevil.net) (Changing host)
[06:20:15] *** Joins: n3t (~n3t@user/n3t)
[06:20:47] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 264 seconds)
[06:21:59] *** Quits: xff0x (~xff0x@2001:1a81:5344:9700:97c:3a82:54b0:a6da) (Ping timeout: 264 seconds)
[06:23:33] *** Joins: xff0x (~xff0x@2001:1a81:537f:9c00:f676:7afa:ede:1e04)
[06:32:11] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[06:35:38] *** Joins: fef (~thedawn@user/thedawn)
[06:35:50] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:43:03] *** Joins: mbuf (~Shakthi@122.174.251.211)
[06:46:40] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:46:41] *** Quits: proboscis (~proboscis@115-189-129-110.mobile.spark.co.nz) (Read error: Connection reset by peer)
[06:47:16] *** Joins: proboscis (~proboscis@115-189-129-110.mobile.spark.co.nz)
[06:54:04] *** Joins: desophos (~desophos@2601:249:1680:a570:b44c:753b:291d:308f)
[06:54:57] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[06:55:08] *** Quits: desophos (~desophos@2601:249:1680:a570:b44c:753b:291d:308f) (Client Quit)
[06:56:27] *** Quits: catman (~catman@user/catman) (Read error: Connection reset by peer)
[06:57:59] *** Joins: rtypo (~alex@user/rtypo)
[06:58:01] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[06:59:19] *** Joins: hololeap (~hololeap@user/hololeap)
[07:00:02] *** Quits: proboscis (~proboscis@115-189-129-110.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[07:04:21] *** Parts: rtypo (~alex@user/rtypo) (WeeChat 3.3)
[07:07:10] *** Quits: alx741 (~alx741@181.196.69.253) (Quit: alx741)
[07:10:53] *** Joins: boxscape_ (~boxscape_@mue-88-130-59-084.dsl.tropolys.de)
[07:11:53] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:12:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:12:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:12:13] *** Joins: wroathe (~wroathe@user/wroathe)
[07:13:07] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:16:21] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 245 seconds)
[07:18:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:19:02] *** Joins: catman (~catman@user/catman)
[07:27:33] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[07:30:54] *** Joins: yauhsien_ (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[07:30:54] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:33:57] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Quit: Leaving)
[07:35:47] *** Quits: yauhsien_ (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[07:41:47] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:41:56] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:42:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:43:11] *** Joins: img (~img@user/img)
[07:43:49] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[07:44:14] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:44:46] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[07:46:39] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[07:52:18] *** Quits: boxscape_ (~boxscape_@mue-88-130-59-084.dsl.tropolys.de) (Ping timeout: 260 seconds)
[08:05:03] *** Joins: trillp (~trillp@69.233.98.238)
[08:07:42] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[08:12:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:23:45] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:23:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:24:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0)
[08:42:32] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:44:26] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:54:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:59:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[08:59:46] *** Joins: cjb72647 (~cjbayliss@user/cjb)
[09:00:00] *** Joins: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au)
[09:01:16] <quazimodo> if someone was going to write a function called 'compose' to do right to left composition, as an exercise, what would the type look like?
[09:01:32] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:01:55] <quazimodo> in typescript we have to do all sorts of finite function type overloads to handle the case for each size of tuple of lambdas
[09:01:58] <dibblego> @type flip (.)
[09:01:59] <lambdabot> (a -> b) -> (b -> c) -> a -> c
[09:02:04] *** Quits: cjb (~cjbayliss@user/cjb) (Ping timeout: 260 seconds)
[09:02:19] <quazimodo> dibblego: what happens when you have 10 of those lambdas?
[09:02:26] <dibblego> wot now?
[09:03:01] <quazimodo> (a -> b) -> (b -> c) -> (c -> d) ... all the way to  -> (j -> k) -> a -> k
[09:03:17] <dibblego> @type flip ((.) . (.))
[09:03:18] <lambdabot> (a1 -> a2 -> b) -> (b -> c) -> a1 -> a2 -> c
[09:03:22] <dibblego> ?
[09:04:05] <quazimodo>  @type flip ((.) . (.) . (.))
[09:04:14] <quazimodo> :(
[09:04:19] <quazimodo> it hates me
[09:04:21] <quazimodo> @type flip ((.) . (.) . (.))
[09:04:22] <lambdabot> (a1 -> a2 -> a3 -> b) -> (b -> c) -> a1 -> a2 -> a3 -> c
[09:05:03] <dibblego> brb
[09:05:12] *** Quits: cjb72647 (~cjbayliss@user/cjb) ()
[09:07:10] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[09:08:37] *** Joins: Jing (~textual@103.121.208.115)
[09:10:44] <dibblego> @type f g h -> h . g . f
[09:10:45] <lambdabot> error: parse error on input ‘->’
[09:10:47] <dibblego> @type \f g h -> h . g . f
[09:10:48] <lambdabot> (a -> b1) -> (b1 -> b2) -> (b2 -> c) -> a -> c
[09:10:52] <dibblego> maybe you mean that
[09:21:00] *** ghoulguy is now known as glguy
[09:24:12] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (*.net *.split)
[09:24:12] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (*.net *.split)
[09:24:12] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[09:24:12] *** Quits: koz (~koz@2404:4408:430f:a900:ca69:658c:ba89:aa9f) (*.net *.split)
[09:24:12] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[09:24:12] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[09:24:12] *** Quits: stilgart (~Christoph@chezlefab.net) (*.net *.split)
[09:24:12] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (*.net *.split)
[09:24:12] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[09:24:12] *** Quits: hongminhee (sid295@tinside.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[09:24:12] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: stevenxl (sid133530@uxbridge.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: berberman (~berberman@user/berberman) (*.net *.split)
[09:24:12] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:24:12] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[09:24:12] *** Quits: vgtw (~vgtw@c-6a60205c.07-348-756d651.bbcust.telenor.se) (*.net *.split)
[09:24:12] *** Quits: gawen_ (~gawen@user/gawen) (*.net *.split)
[09:24:12] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[09:24:12] *** Quits: Eoco (~ian@x-160-94-179-157.acm.umn.edu) (*.net *.split)
[09:24:12] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[09:24:12] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[09:24:12] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[09:24:12] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[09:24:12] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[09:24:12] *** Quits: Athas (athas@sigkill.dk) (*.net *.split)
[09:24:12] *** Quits: robertm (robertm@lattice.rojoma.com) (*.net *.split)
[09:24:12] *** Quits: flukiluke (~m-7humut@plum.alephc.xyz) (*.net *.split)
[09:24:12] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[09:24:12] *** Quits: canta (~canta@user/canta) (*.net *.split)
[09:24:12] *** Quits: royo (~royo@user/royo) (*.net *.split)
[09:24:12] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[09:24:12] *** Quits: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com) (*.net *.split)
[09:24:12] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[09:24:12] *** Quits: caubert (~caubert@136.244.111.235) (*.net *.split)
[09:24:12] *** Quits: root1 (root@2600:3c02::f03c:92ff:fe1a:c779) (*.net *.split)
[09:24:21] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[09:24:21] *** Joins: royo (~royo@user/royo)
[09:24:22] *** Joins: Athas (athas@2a01:7c8:aaac:1cf:ca09:aa6a:e1e8:dce5)
[09:24:24] *** Joins: jackdk (sid373013@cssa/jackdk)
[09:24:25] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[09:24:26] *** Joins: stilgart (~Christoph@chezlefab.net)
[09:24:27] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[09:24:30] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[09:24:32] *** Joins: koz (~koz@2404:4408:430f:a900:ca69:658c:ba89:aa9f)
[09:24:32] *** Joins: stevenxl (sid133530@id-133530.uxbridge.irccloud.com)
[09:24:32] *** Joins: root1 (root@2600:3c02::f03c:92ff:fe1a:c779)
[09:24:34] *** Joins: canta (~canta@cvm0.d5k.one)
[09:24:34] *** Joins: caubert (~caubert@136.244.111.235)
[09:24:35] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[09:24:35] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[09:24:43] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[09:24:43] *** Joins: Eoco (~ian@x-160-94-179-157.acm.umn.edu)
[09:24:44] *** Joins: robertm (robertm@lattice.rojoma.com)
[09:24:46] *** Quits: canta (~canta@cvm0.d5k.one) (Changing host)
[09:24:46] *** Joins: canta (~canta@user/canta)
[09:24:51] *** Joins: Unhammer (~Unhammer@2a01:799:60:df00::237)
[09:24:52] *** Joins: thonkpod (~thonkpod@2001:19f0:ac01:b46:5400:1ff:fec7:d73d)
[09:24:58] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[09:25:05] *** Quits: Unhammer (~Unhammer@2a01:799:60:df00::237) (Changing host)
[09:25:05] *** Joins: Unhammer (~Unhammer@user/unhammer)
[09:25:11] *** Joins: exarkun (~exarkun@user/exarkun)
[09:25:14] *** Quits: thonkpod (~thonkpod@2001:19f0:ac01:b46:5400:1ff:fec7:d73d) (Changing host)
[09:25:14] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[09:25:28] *** Joins: dfg (~dfg@li490-89.members.linode.com)
[09:25:31] *** Quits: dfg (~dfg@li490-89.members.linode.com) (Changing host)
[09:25:31] *** Joins: dfg (~dfg@user/dfg)
[09:25:35] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[09:25:42] *** Joins: haskl (~haskl@user/haskl)
[09:25:50] *** Joins: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com)
[09:25:55] *** Joins: berberman (~berberman@user/berberman)
[09:25:57] *** Joins: hexology (~hexology@user/hexology)
[09:25:57] *** Joins: gawen (~gawen@user/gawen)
[09:26:03] *** Joins: vgtw (~vgtw@c-6a60205c.07-348-756d651.bbcust.telenor.se)
[09:26:19] *** Joins: rkrishnan (~user@223.226.59.167)
[09:26:20] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[09:26:30] *** Joins: energizer (~energizer@user/energizer)
[09:28:48] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[09:29:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[09:29:29] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[09:29:46] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[09:30:31] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:30:43] <dsal> :t (&)
[09:30:44] <lambdabot> a -> (a -> b) -> b
[09:31:34] <dsal> I don't know why I was thinking that was similar to flip (.) other than being late. heh
[09:31:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:31:49] <dibblego> @type flip ($) -- you might be thinking of that
[09:31:50] <lambdabot> a -> (a -> c) -> c
[09:32:20] <dsal> I think it's just how . and $ are sometimes interchangeable.
[09:32:50] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[09:32:50] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[09:32:50] *** Quits: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0) (*.net *.split)
[09:32:50] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[09:32:50] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[09:32:50] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[09:32:50] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[09:32:50] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (*.net *.split)
[09:32:50] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (*.net *.split)
[09:32:50] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[09:32:50] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[09:32:50] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[09:32:50] *** Quits: ddb (~ddb@ipv6two.tilde.club) (*.net *.split)
[09:32:50] *** Quits: tito (tito@tilde.team) (*.net *.split)
[09:32:50] *** Quits: phaazon (~phaazon@2001:41d0:a:fe76::1) (*.net *.split)
[09:32:50] *** Quits: mht (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[09:32:50] *** Quits: meridion (~meridion@punt.hetgrotebos.org) (*.net *.split)
[09:32:50] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[09:32:50] *** Quits: noddy (~user@user/noddy) (*.net *.split)
[09:32:50] *** Quits: acro (~acro@user/acro) (*.net *.split)
[09:32:50] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (*.net *.split)
[09:32:50] *** Quits: rookie101 (~rookie@207.154.204.166) (*.net *.split)
[09:32:50] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (*.net *.split)
[09:32:50] *** Quits: dunj3 (~dunj3@kingdread.de) (*.net *.split)
[09:32:50] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[09:32:50] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (*.net *.split)
[09:32:50] *** Quits: dixie (~dixie@real.wilbury.sk) (*.net *.split)
[09:32:50] *** Quits: xnbya (~xnbya@2a01:4f8:c17:cbdd::1) (*.net *.split)
[09:32:50] *** Quits: V (~v@anomalous.eu) (*.net *.split)
[09:32:50] *** Quits: tired (~tired@user/tired) (*.net *.split)
[09:32:50] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (*.net *.split)
[09:32:50] *** Quits: janus (janus@anubis.0x90.dk) (*.net *.split)
[09:32:50] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[09:32:50] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[09:32:50] *** Quits: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp) (*.net *.split)
[09:32:50] *** Quits: sphynx (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288) (*.net *.split)
[09:32:50] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[09:32:50] *** Quits: res0nat0r8 (~Fletch@dia.whatbox.ca) (*.net *.split)
[09:32:50] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[09:32:50] *** Quits: cpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:32:57] *** Joins: xnbya (~xnbya@2a01:4f8:c17:cbdd::1)
[09:32:57] *** Joins: meridion (~meridion@punt.hetgrotebos.org)
[09:32:58] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[09:32:59] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[09:32:59] *** Joins: dunj3 (~dunj3@kingdread.de)
[09:32:59] *** Joins: cpape (~user@2a01:4f9:c010:632d::1)
[09:33:00] *** Joins: dixie (~dixie@real.wilbury.sk)
[09:33:02] *** Joins: res0nat0r8 (~Fletch@dia.whatbox.ca)
[09:33:02] *** Joins: tristanC (~tristanC@163.172.94.116)
[09:33:03] *** Joins: sphynx (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288)
[09:33:04] *** Joins: lisq (~quassel@lis.moe)
[09:33:05] *** Joins: tito (tito@tilde.team)
[09:33:06] *** Joins: janus (janus@anubis.0x90.dk)
[09:33:06] *** Joins: phaazon (~phaazon@2001:41d0:a:fe76::1)
[09:33:07] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[09:33:15] *** Quits: tristanC (~tristanC@163.172.94.116) (Changing host)
[09:33:15] *** Joins: tristanC (~tristanC@user/tristanc)
[09:33:17] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[09:33:17] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:33:19] *** Joins: V (~v@anomalous.eu)
[09:33:21] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[09:33:21] *** Joins: mht (~mht@mht.wtf)
[09:33:26] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[09:33:30] *** Joins: madnight (~madnight@static.59.103.201.195.clients.your-server.de)
[09:33:30] *** Joins: tired (~tired@user/tired)
[09:33:31] *** Joins: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp)
[09:33:46] *** Joins: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[09:33:57] *** Joins: rookie101 (~rookie@207.154.204.166)
[09:35:02] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:35:10] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[09:35:43] <dibblego> only syntactically
[09:35:48] <dibblego> f $ g $ h
[09:35:50] <dibblego> f $ (g $ h)
[09:35:53] <dibblego> f . g . h
[09:35:56] <dibblego> oops
[09:36:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[09:36:36] *** Joins: acro (~acro@user/acro)
[09:36:55] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[09:36:55] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[09:37:12] *** Joins: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0)
[09:37:22] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[09:38:11] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[09:39:16] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[09:39:36] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[09:40:54] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[09:41:05] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[09:41:05] *** Joins: psydroid (~psydroid@user/psydroid)
[09:41:06] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[09:42:12] *** Joins: v01d4lph4 (~v01d4lph4@223.190.95.48)
[09:42:12] *** Quits: v01d4lph4 (~v01d4lph4@223.190.95.48) (Changing host)
[09:42:12] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:47:52] <jackdk> quazimodo: is a tuple the best choice here? Can you compose the functions sooner so you're not carrying wide tuples around everywhere?
[09:48:43] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[09:58:49] *** Joins: Guest16 (~Guest16@103.99.84.6)
[09:59:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[10:00:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:08:01] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[10:08:27] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[10:16:28] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:21:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:21:26] <quazimodo> jackdk: it's more of a mental exercise, I use typescript a lot in our business and it doesn't compose/curry the same way as haskell
[10:21:55] <quazimodo> i suppose in haskell the compose operation operates on pairs, never a big tuple of functions that are passed into a function
[10:22:26] <dibblego> nah, compose in haskell operates on functions, and all functions in haskell take exactly one argument
[10:23:30] <quazimodo> the people who came up with this stuff are arcane wizards honestly
[10:24:12] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:26:10] <jackdk> I don't think so. It's more that they've started from a different set of baseline assumptions than the ones you're used to, and as you practice more and internalise those assumptions you'll find it easier to think about.
[10:26:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[10:26:25] *** Quits: phma (~phma@host-67-44-208-63.hnremote.net) (Read error: Connection reset by peer)
[10:27:00] <jackdk> (Although, yes, there are some terrifically smart people around, and it's an absolute privilege to build atop their work.)
[10:27:15] *** Joins: phma (~phma@host-67-44-209-24.hnremote.net)
[10:28:43] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[10:33:04] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[10:33:20] *** Joins: boxscape_ (~boxscape_@mue-88-130-59-184.dsl.tropolys.de)
[10:33:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:37:15] *** Joins: cheater (~Username@user/cheater)
[10:38:25] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[10:38:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[10:39:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:39:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:41:23] * Lycurgus now that he's used it, thinks of typescript as just a more OO js, not related to FP in the hs sense
[10:42:18] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[10:44:38] <quazimodo> Lycurgus: we try to use it functionally but it's not
[10:45:38] <Lycurgus> no it isn't but a lot pkgs use it, and I find it convenient
[10:46:20] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:46:58] <Lycurgus> xstate is the one I was trynna think of 
[10:47:43] <Lycurgus> a lot of react pkgs too
[10:49:20] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:50:21] <quazimodo> xstate is useful, we use it
[10:50:58] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[10:51:56] <Lycurgus> it's an almost embarrasing but extremely common cognitive error, from "type" to assume FP because hs
[10:55:56] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:00:53] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 265 seconds)
[11:06:49] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[11:09:31] *** Quits: aegon (~mike@174.127.249.180) (Quit: leaving)
[11:10:28] *** Joins: fendor (~fendor@77.119.160.25.wireless.dyn.drei.com)
[11:24:10] *** Quits: quazimodo (~quazimodo@n1-40-235-47.bla1.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[11:25:32] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[11:26:20] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:1b26:eada:1c7:e76b)
[11:26:51] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[11:31:45] *** Quits: fendor (~fendor@77.119.160.25.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[11:31:58] *** Joins: cheater (~Username@user/cheater)
[11:32:42] *** Joins: fendor (~fendor@77.119.160.25.wireless.dyn.drei.com)
[11:34:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[11:35:25] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:35:33] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:00] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:41:21] *** Joins: acidjnk (~acidjnk@p200300d0c74411311cbabef3984b18e3.dip0.t-ipconnect.de)
[11:46:25] *** LiaoTao_ is now known as LiaoTao
[11:47:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:47:53] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:48:07] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:48:43] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[11:52:52] <kritzefitz> Does the PVP specify an exception for upper bounds on base? People are asking me to weaken the upper bound for base to `< 5` in one of my libraries. But from what I understand, that wouldn't be compliant with PVP.
[11:53:58] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:59:23] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:02:12] *** Joins: cfricke (~cfricke@user/cfricke)
[12:03:29] <dminuoso> kritzefitz: No.
[12:03:59] <dminuoso> kritzefitz: Since base has a history of breaking changes, its simpler to just use set-notation + ^ notation, to quickly add known working base versions
[12:05:22] <kritzefitz> That's the approach I have taken so far. But I guess people are annoyed that they have to poke me for updated bounds on every GHC release.
[12:06:13] <dminuoso> kritzefitz: It's the trade off between honest version bounds, and the risk of breaking builds in the future.
[12:07:11] <mc47> Hello, I'm having a question about GHC, specifically the -Wincomplete-uni-patterns flag. It feels too agressive, since things like `let [i1,i2] = map f [w1,w2]` are also handled as errors
[12:07:34] <mc47> Is this a conscious choice? Isn't it possible to detect that this is safe somehow? 
[12:07:56] <dminuoso> Yes and no.
[12:08:43] <mc47> how so? I could think of some abstract interpretation pass that might detect this
[12:09:07] <mc47> (No idea how or where GHC implements these checks)
[12:09:25] <dminuoso> mc47: Im not entirely sure about incomplete-uni-patterns, but the incomplete-patterns is ridiculously complicated to do right.
[12:09:40] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:10:21] <dminuoso> It wasnt until about 2 years ago until someone figured out how to it correctly, there was a WIP branch in ghc to implement it, not sure whether it has been merged already.
[12:11:04] <dminuoso> SPJ once put it this way, there are problems that look simple and are hard to solve, problems that look hard but are hard to solve, and then there's incomplete pattern matches, which looked hard and was hard to solve.
[12:12:12] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[12:13:13] <dminuoso> mc47: The difficulty really is writing a generic algorithm that works over arbitrary code. In your example, we'd have to leverage either a law (namely that map cant change the length of a list), or do this diagnostic *after* inlining.
[12:13:35] <dminuoso> Without either, you're in incomplete patterns territory
[12:14:24] <dminuoso> GHC right now doesn't really know about such laws, and doing diagnostics after inlining seems quite hard, given that the diagnostic would have to operate on completely transformed core - and then somehow map the results back to the original code (which might not be applicable at all)
[12:14:29] <mc47> Makes sense, but aren't these laws written anywhere?
[12:14:41] <mc47> oh
[12:15:10] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[12:15:25] <lortabac> type-class laws are just conventions, nothing prevents you from writing instances that break the laws
[12:15:32] <mc47> It was a breeze proving `length xs = length (map f xs)` with Isabelle
[12:15:34] <mc47> yeah yeah that's true
[12:15:36] <dminuoso> Well in case of `map` you know this law to hold, lortabac.
[12:15:46] <dminuoso> So one could really teach GHC about this.
[12:16:17] <lortabac> ok but that would mean adding special cases to the exaustiveness checker
[12:16:19] <dminuoso> But then you have to wonder, whether special casing for this singular function is going to add much value.
[12:16:20] <dminuoso> Yeah
[12:16:46] <mc47> Do you recommend and reading material or talks about where this is implemented in the GHC pipeline? 
[12:16:51] <mc47> true
[12:17:31] <mc47> or any "getting started" guide on GHC? The more theoretical the better :D
[12:17:43] <dminuoso> mc47: https://www.youtube.com/watch?v=SWO5OzSxD6Y
[12:17:45] <dminuoso> Is a good starting point
[12:18:08] <dminuoso> In there SPJ should at some point refer to the paper he helped author that is the basis for this new exhaustiveness checker
[12:18:22] <dminuoso> Note, that this is not what GHC does not right, but will be doing (?) in the near future
[12:18:41] <dminuoso> What GHC does right now in terms of exhausitiveness checking is very complicated and highly error prone
[12:18:58] <dminuoso> Few things have provoked as many error reports as that singular part. :)
[12:19:08] <mc47> thank you
[12:19:09] *** Joins: arjun (~user@user/arjun)
[12:19:44] <mc47> I guess we'll just disable -Wincomplete-uni-patterns for GHC 9.2.1 for the time being, many things just look too ugly
[12:23:23] *** Joins: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl)
[12:26:24] *** Joins: fendor_ (~fendor@77.119.160.25.wireless.dyn.drei.com)
[12:26:24] *** Quits: fendor (~fendor@77.119.160.25.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[12:26:42] <tomsmeding> isn't this the Lower Your Guards paper? https://www.microsoft.com/en-us/research/uploads/prod/2020/03/lower-your-guards-icfp20.pdf
[12:27:17] *** Joins: Guest396 (~Guest39@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[12:28:39] <dminuoso> tomsmeding: Looks like, yes. Couldn't find it on short notice
[12:29:18] <tomsmeding> I read it a while ago, is quite readable IIRC :)
[12:30:08] *** Quits: kar1 (~kar1@2001:470:69fc:105::c308) (Quit: You have been kicked for being idle)
[12:30:47] <mc47> Awesome! THanks tomsmeding 
[12:31:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[12:31:37] *** Joins: alzgh (~alzgh@user/alzgh)
[12:31:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[12:31:55] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:34:41] <alzgh> Can someone help me understand `>>`? The doc says it chains actions while discarding any value produced by the first action but when I do `putStrLn "hello" >> putStrLn "goodbye"` it outputs both words. Is this because writing "hello" is an effect and not a value produced by `putStrLn`? If so, can you give me an example where the value produced is discarded? Thank you.
[12:35:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[12:35:15] <tomsmeding> % return 42 >> putStrLn "goodbye"  -- alzgh 
[12:35:15] <yahb> tomsmeding: goodbye
[12:35:52] <tomsmeding> the value is the thing of type 'a' in the 'IO a', or more generally the 'm a' where m is a Monad
[12:36:02] <tomsmeding> the effect is all the other stuff that you can do in the monad
[12:36:27] <alzgh> right, thank you tomsmeding
[12:37:43] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[12:37:54] *** Joins: gentauro (~gentauro@user/gentauro)
[12:40:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Ping timeout: 268 seconds)
[12:41:10] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:45:06] *** Joins: chele (~chele@user/chele)
[12:45:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:47:11] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Ping timeout: 245 seconds)
[12:47:21] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[12:51:32] <kritzefitz> Can I force cabal to skip building a specific build-tool-depends and instead use one found one the path or specified via `--with-PROG`?
[12:51:36] *** Quits: Jing (~textual@103.121.208.115) (Remote host closed the connection)
[12:53:26] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:58:26] <kritzefitz> More specifically: I installed GHC 9.2.1 via ghcup. Now I can't build packages with hsc2hs, because hsc2hs-0.68.7 doesn't build with base-1.16.0.0 and hsc2-hs0.68.8 is not on hackage. Using a hsc2hs compiled with an older base or using the hsc2hs shipped with ghc-9.2.1 would probably work, but I don't know how to prevent "cabal build" from wanting to build a new hsc2hs.
[12:59:16] <arjun> kritzefitz: maybe try cabal build --alow-newer
[12:59:30] <arjun> not sure if that would work tho
[12:59:47] <arjun> --allow-newer* typo
[13:02:38] <kritzefitz> That seems to work. Or rather it seems to reveal that the ghc-9.2 I installed seems to be completely broken and always fail with a linker error.
[13:02:59] <arjun> yea, 9.2.1 is still new
[13:03:31] <arjun> common thing to do in this case is wait for the libs to catch-up
[13:03:45] <fvr> whats the linker error?
[13:03:51] <arjun> and move to an older, stabler version, like 8.10.7
[13:05:02] <kritzefitz> “cannot find -lnuma“ and then some missing symbols. I guess I'm just missing some dependency libraries on my system.
[13:05:32] <kritzefitz> Yup, install libnuma-dev helped.
[13:06:15] <kritzefitz> And now hsc2hs also works. Thanks for the help!
[13:06:54] *** Joins: oxide (~lambda@user/oxide)
[13:08:23] <arjun> kritzefitz: np
[13:08:47] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[13:09:08] <kritzefitz> I usually use more stable versions of GHC for my day-to-day development. But people specifically asked me to upgrade one of my libraries to GHC-9.2.
[13:09:37] <arjun> kritzefitz: it has the native arm codegen, so that might be the reason : P
[13:12:51] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:13:09] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:13:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:14:26] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[13:14:51] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[13:16:31] <timCF> Hello! Let's say I do have 2 different cabal/stack Haskell packages which do export 2 different modules with the same name Foo. My package is using them both as dependencies. How do I import/use 2 different modules named Foo separately?
[13:18:34] <int-e> there's https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/package_qualified_imports.html
[13:19:22] *** Quits: xff0x (~xff0x@2001:1a81:537f:9c00:f676:7afa:ede:1e04) (Ping timeout: 260 seconds)
[13:19:37] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[13:22:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[13:24:31] *** Joins: xff0x (~xff0x@2001:1a81:537f:9c00:f676:7afa:ede:1e04)
[13:26:24] *** Quits: acidjnk (~acidjnk@p200300d0c74411311cbabef3984b18e3.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:27:34] *** Joins: tdwamdors^ (~tdwamdors@wsip-98-188-242-6.mc.at.cox.net)
[13:27:36] <merijn> timCF: The recommended solution is: publically shame the authors to "stop fucking doing that"
[13:33:08] *** Joins: acidjnk (~acidjnk@p200300d0c74411311cbabef3984b18e3.dip0.t-ipconnect.de)
[13:33:42] *** Joins: fef (~thedawn@user/thedawn)
[13:35:41] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[13:38:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[13:38:51] *** Joins: shidima (~user@188-206-67-204.mobile.kpn.net)
[13:41:28] <shidima> Can some one tell me what I'm doing wrong here: https://pastebin.com/DeyjxsiC 
[13:41:44] <shidima> Am I creating the type wrong?
[13:44:38] <Hecate> shidima: okay so
[13:45:02] <Hecate> shidima: how many arguments does the constructor "Individual" have?
[13:47:18] *** Quits: shidima (~user@188-206-67-204.mobile.kpn.net) (Read error: Connection reset by peer)
[13:49:48] *** Joins: Jing (~textual@103.121.208.52)
[13:49:54] *** Joins: fef (~thedawn@user/thedawn)
[13:51:57] <arjun> .
[13:52:10] <arjun> oh, they left?
[13:52:15] <arjun> nvm
[13:53:22] *** Parts: fef (~thedawn@user/thedawn) ()
[13:54:12] <Hecate> yep :')
[13:54:22] <arjun> \o Hecate 
[13:57:22] <merijn> As is tradition
[14:00:34] *** Joins: Guest|83 (~Guest|83@101.100.131.49)
[14:00:55] *** Quits: Guest|83 (~Guest|83@101.100.131.49) (Client Quit)
[14:03:32] <alzgh> when I add libraries to the `build-depends` directive in my `.cabal` file, I don't need to separately install those libraries? cabal will download and install them for me automatically?
[14:04:01] <Hecate> alzgh: yes absolutely :)
[14:04:03] <Hecate> arjun: o/
[14:04:05] <Hecate> merijn: indeed
[14:04:07] <arjun> alzgh: sure
[14:04:44] <arjun> i neat trick i picked up earlier, you may not even mention the bounds initially
[14:05:07] <arjun> you just go build-depends:    base,text,time etc
[14:05:16] <arjun> then run cabal gen-bounds
[14:05:55] <alzgh> I'm just a little bit confused about where cabal installs them. Is it per project? So, I don't need to worry about version hell on global level between different projects? Also, what about `cabal install` then?
[14:06:00] *** Joins: phma_ (~phma@host-67-44-209-61.hnremote.net)
[14:06:28] <arjun> alzgh: you don't need to worry about cabal hell anymore with cabal 3.0+
[14:06:54] <arjun> these are installed in .cabal in home in unix or the relevant counterpart in windows
[14:07:20] *** Quits: phma (~phma@host-67-44-209-24.hnremote.net) (Read error: Connection reset by peer)
[14:07:39] <alzgh> nice, so `cabal install` is not needed anymore?
[14:07:50] <arjun> it is
[14:07:56] <merijn> alzgh: All installed dependencies are tagged with a hash of their (and transitive dependencies) code/config
[14:08:16] <merijn> alzgh: So you can have unlimited number of parallel installs of the same packages with conflicting configuration
[14:08:29] <arjun> well, if you're building a executable and want to install it, else, you can work with cabal run or cabal build
[14:09:03] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (Ping timeout: 268 seconds)
[14:10:46] <alzgh> Thank you, I think I'm starting to understand. So, the selling point of Stack isn't enabling different/parallel versions of the same package (maybe it was before cabal 3.0), but rather guaranteeing that different package work smoothly together like in a stable distro.
[14:11:39] <arjun> totes, it's like a snapshot of package versions that are bound to play nice with each other and will always will, given the same resolver version.
[14:12:21] <alzgh> thank you :D
[14:12:46] <geekosaur> it was before cabal 2.0
[14:14:38] *** Quits: Guest16 (~Guest16@103.99.84.6) (Quit: Client closed)
[14:14:49] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 633 seconds)
[14:18:38] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[14:18:38] *** Joins: maerwald (~maerwald@user/maerwald)
[14:19:21] <maerwald> arjun: sup
[14:19:41] <arjun> maerwald: \o
[14:19:47] <arjun> how you been doin mate
[14:20:32] <maerwald> doing haskell on windows mostly
[14:20:38] <maerwald> which gives me odd pleasure
[14:20:51] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:20:52] <maerwald> I'm not sure if it's good or bad
[14:21:01] *** Joins: Farzad (~FarzadBek@178.131.25.90)
[14:21:10] <arjun> i tried it sometime back, it surprisingly works well enough, doesn't it
[14:21:15] <arjun> ghcup is champ
[14:21:33] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[14:21:53] *** Joins: mniip (mniip@libera/staff/mniip)
[14:21:59] <maerwald> mostly due to my abstract-filepath stuff
[14:22:10] <maerwald> trying to migrate my directory package fork to windows
[14:22:46] <maerwald> reading windows API is like looking at a car crash from a distance... it shouldn't be fun, but it is
[14:22:50] *** Quits: phma_ (~phma@host-67-44-209-61.hnremote.net) (Ping timeout: 260 seconds)
[14:23:00] <arjun> lmao
[14:24:18] <maerwald> I still don't really know what junction points are
[14:24:57] *** Joins: phma_ (~phma@host-67-44-209-61.hnremote.net)
[14:25:25] *** phma_ is now known as phma
[14:25:37] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[14:25:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[14:28:00] <maerwald> also, the semantics of what an "executable" is on windows are... well
[14:28:02] <maerwald> complicated
[14:28:24] <arjun> the refactor was great, looks likes a different code-base now but still familiar and sort of cleaner
[14:28:37] <maerwald> directory package uses a hardcoded list https://github.com/haskell/directory/blob/f0da64307959fcd2225c01f97df851ff45285e68/System/Directory/Internal/Windows.hsc#L633
[14:28:43] <maerwald> which seems wrong too
[14:29:21] <maerwald> then there is a PATHEXT variable, but to be really complete you'd also need to look up some random registry entries
[14:29:41] <arjun> are we testing on windows 11?
[14:29:42] <maerwald> and then it's still not clear what "executable" means, because it's not a file attribute
[14:30:03] <arjun> cause that probably might have changed things a bit
[14:30:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[14:30:19] <maerwald> not sure
[14:30:40] *** Joins: alx741 (~alx741@181.196.69.253)
[14:33:44] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Changing host)
[14:33:44] *** Joins: kritzefitz (~kritzefit@user/kritzefitzm/x-3779698)
[14:34:38] *** Quits: kritzefitz (~kritzefit@user/kritzefitzm/x-3779698) (Changing host)
[14:34:38] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[14:34:39] *** Quits: Nachtgespenst (~user@user/siracusa) (Quit: Bye!)
[14:34:55] *** kritzefitz is now known as kritzefitz[m]
[14:35:12] *** kritzefitz[m] is now known as kritzefitz
[14:35:54] *** Joins: __monty__ (~toonn@user/toonn)
[14:37:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[14:37:40] *** Quits: Guest396 (~Guest39@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[14:37:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[14:38:24] *** Joins: kritzefitz[m] (~kritzefit@fw-front.credativ.com)
[14:38:56] *** Quits: kritzefitz[m] (~kritzefit@fw-front.credativ.com) (Changing host)
[14:38:56] *** Joins: kritzefitz[m] (~kritzefit@debian/kritzefitz)
[14:39:41] *** Quits: kritzefitz[m] (~kritzefit@debian/kritzefitz) (Client Quit)
[14:41:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Ping timeout: 260 seconds)
[14:42:42] *** Joins: AlexNoo_ (~AlexNoo@94.233.241.118)
[14:44:55] *** Quits: Alex_test (~al_test@178.34.163.209) (Ping timeout: 260 seconds)
[14:45:30] *** Quits: AlexZenon (~alzenon@178.34.163.209) (Ping timeout: 260 seconds)
[14:46:35] *** Quits: AlexNoo (~AlexNoo@178.34.163.209) (Ping timeout: 264 seconds)
[14:50:15] *** Joins: Alex_test (~al_test@94.233.241.118)
[14:50:57] *** Joins: AlexZenon (~alzenon@94.233.241.118)
[14:54:19] *** Parts: arjun (~user@user/arjun) (ERC (IRC client for Emacs 28.0.50))
[14:55:15] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:58:17] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 246 seconds)
[14:58:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:58:41] *** Joins: xkuru (~xkuru@user/xkuru)
[14:59:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:59:42] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[15:00:12] *** Quits: xkuru (~xkuru@user/xkuru) (Client Quit)
[15:00:55] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:01:03] *** Joins: xkuru (~xkuru@user/xkuru)
[15:08:51] <Hecate> maerwald: plz don't trainwreck the GHC proposal ticket 😭
[15:09:09] <maerwald> spj started the discussion
[15:09:12] <maerwald> not me
[15:09:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:09:31] <maerwald> and it's true, there are only two options: 1. overlays, 2. downstream patches
[15:09:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:10:30] <maerwald> and this surely touches the core issue: smooth upgrades
[15:15:34] *** Quits: chele (~chele@user/chele) (Ping timeout: 268 seconds)
[15:20:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:21:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:35] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:bc44:afc4:50a0:6ab8)
[15:25:05] *** Joins: Guest10 (~Guest10@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:33:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:36:16] *** AlexNoo_ is now known as AlexNoo
[15:37:17] *** Joins: guniberas (~guniberas@42.191.188.121)
[15:41:53] *** Quits: Guest10 (~Guest10@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[15:49:05] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:50:49] *** Joins: chexum_ (~quassel@gateway/tor-sasl/chexum)
[15:51:22] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[15:52:11] <tomjaguarpaw> There's a third option of trying to instill a pervasive sense of responsibility across the community so that this issue doesn't arise so often
[15:52:18] <maerwald> tomjaguarpaw: :D
[15:52:21] <tomjaguarpaw> Admittedly that is very hand and fraught with many difficulties
[15:52:39] <tomjaguarpaw> *hard
[15:53:06] <tomjaguarpaw> But ultimately I don't think a community can escape its own culture with technical solutions
[15:54:12] <maerwald> I mean... what confuses me is that we're relatively quick with package takeovers, but overly conservative with NMUs. While, in the end: both have the danger of incompetency sneaking in. That's just how it is.
[16:04:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[16:06:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:10:24] *** Quits: xff0x (~xff0x@2001:1a81:537f:9c00:f676:7afa:ede:1e04) (Remote host closed the connection)
[16:10:26] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 268 seconds)
[16:10:41] *** Joins: xff0x (~xff0x@2001:1a81:537f:9c00:f94d:493e:e9e:5a9)
[16:14:32] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[16:25:34] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[16:26:15] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Ping timeout: 260 seconds)
[16:28:05] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[16:29:22] *** Joins: dartford (~dartford@176-157-77-163.abo.bbox.fr)
[16:30:38] <dartford> hi, whats up with the tunes log?
[16:30:48] <dartford> http://tunes.org/~nef/logs/haskell/21.09.14
[16:31:04] <dartford> i cant find yesterdays conversation 
[16:31:18] <dartford> oh ok, i can see it in the header
[16:31:51] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[16:32:05] <dartford> wow, it sure is less organised than when it was grouped by date
[16:32:27] <dartford> i wonder if tomsmeding would consider that option, or linking it back to the old tunes log somehow
[16:33:10] <tomsmeding> dartford: see the "calendar" link at the top of ircbrowse
[16:33:30] <dartford> horay!
[16:33:46] <dartford> how goes it, havent been online in a while
[16:33:49] <tomsmeding> is there anyone who actually uses that browse view with 3000+ pages of content?
[16:34:04] <tomsmeding> like, there's the "recent" view which could be useful, and there's calendar
[16:34:05] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[16:34:10] <dartford> last time we spoke you helped me with a buffer, for which i was most thankful
[16:34:21] <dartford> have you got any cool projects on the go at the moment?
[16:34:31] <tomsmeding> making the browse view efficient has _serious_ implications on the database structure :p
[16:34:35] <dartford> (i was using the handle fog at the time)
[16:34:39] <tomsmeding> ah!
[16:34:45] <tomsmeding> I remember FogBuffer.hs :)
[16:35:02] *** Joins: Sgeo (~Sgeo@user/sgeo)
[16:35:12] <tomsmeding> that's... slightly more than a year ago, I think?
[16:35:14] <dartford> im stuck with probabilty monad at the moment, but i tried asking yeasterday and it ended up as gobeldygook 
[16:35:31] <dartford> tomsmeding: yeah, i have been basically out of action for about that long
[16:35:32] * tomsmeding is currently looking more closely at automatic differentiation
[16:35:49] <tomsmeding> somehow the university decided that it was a good idea to let me do a phd
[16:36:23] <dartford> well if your maintaining the haskell logs id say you probs have the credentials 
[16:36:28] <tomsmeding> :D
[16:36:34] <dartford> most of the aplicants are just tramps after a free lunch
[16:36:37] <tomsmeding> "maintaining"
[16:36:47] <dartford> "able to establish" 
[16:38:13] <tomsmeding> fun thing is, a while ago I added some route timing statistics to ircbrowse
[16:38:28] <dartford> yes, that does sound fun.... not
[16:38:33] <tomsmeding> apparently I did something wrong regarding memory usage because it went from being ~constant to rising like 500M per day
[16:38:56] <tomsmeding> turned it off after I became tired of 'systemctl restart ircbrowse'
[16:38:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[16:39:31] <dartford> basically, the probability monad i envisage is a variant of a state, where instead of just being able to "view" the state, as an input to the update of the carry
[16:39:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[16:39:54] <dartford> ie, from within the monad, being able to draw the value using <- from the monadic wrapper
[16:40:08] <dartford> that instead, a "pdf" could be drawn from using the <- 
[16:40:26] <dartford> and somehow behind the scenes this would be handling the replacement of the seed for the rng
[16:40:45] <tomsmeding> there is no implementation of a probability monad yet that does what you want??
[16:40:49] <tomsmeding> s/??/?/
[16:41:17] <dartford> er, i mean, maybe there is, but maybe not, i think i need to use StateL to preserve an applicative instance
[16:41:43] <dartford> the conclusion of yesterdays garbled discord was that i should use Data.Functo.Compose
[16:41:47] <dartford> instead of pairs
[16:41:52] <tomsmeding> "preserve an applicative instance" -- do you mean 'pure = return ; (<*>) = ap' ?
[16:41:53] <dartford> to build up larger states
[16:42:09] <dartford> hmm, the applicative instance of StateL
[16:42:23] <tomsmeding> hoogle doesn't know what StateL is
[16:42:32] <dartford> which can be located following links in the hadocks starting from the implementation of mapAccumL
[16:43:38] *** Quits: fjmorazan_ (~quassel@user/fjmorazan) (Quit: fjmorazan_)
[16:43:44] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Ping timeout: 268 seconds)
[16:44:02] <dartford> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Functor.Utils.html#StateL
[16:44:13] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[16:44:29] <tomsmeding> ah I see
[16:44:40] <tomsmeding> so StateL would be the same as State from transformers, right?
[16:44:46] <tomsmeding> and StateR the dual, sortof
[16:44:46] <dartford> i got there by clicking the StateL word here; https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Traversable.html#mapAccumL
[16:44:57] <dartford> yeah
[16:45:11] <dartford> you want to traverse from the left if your given an infinite stream you want to consume lazily
[16:45:15] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:45:26] <tomsmeding> right
[16:45:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[16:45:40] <tomsmeding> so what prevents you from using State from transformers?
[16:45:43] <dartford> hololeap suggested;
[16:45:43] <dartford> % :t \f -> runState . traverse (state . f)
[16:45:43] <yahb> dartford: Traversable t => (a -> s -> (b, s)) -> t a -> s -> (t b, s)
[16:45:52] <dartford> is that the state you mean?
[16:45:54] <tomsmeding> yeah
[16:46:06] <dartford> idk if that has the same applicative instance
[16:46:15] <dartford> that allows it to be lazy when used in traverse
[16:46:32] <dartford> like, how traversing from the right is certainly not going to be lazy
[16:46:43] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[16:46:45] <dartford> lets check
[16:47:28] <tomsmeding> seems to be the same
[16:47:51] <tomsmeding> apart from the pair being swapped of course
[16:47:54] <dartford> https://hackage.haskell.org/package/transformers-0.6.0.2/docs/src/Control.Monad.Trans.State.Lazy.html#withStateT
[16:47:56] <dartford> its just below that
[16:49:12] <tomsmeding> yeah
[16:49:25] <maerwald> are there any good automatic ways to observe and benchmark memory fragmentation?
[16:49:30] <tomsmeding> that's the Lazy variant; the Strict variant seems to be the same but missing the lazy tuples
[16:49:30] *** Joins: hololeap (~hololeap@user/hololeap)
[16:49:45] <maerwald> the only post on this topic I can find is https://www.well-typed.com/blog/2020/08/memory-fragmentation which is an odyessey of manual debugging
[16:50:04] <dartford> tomsmeding: lazy tuples!? is that what the ~ i doing there?
[16:50:13] <dartford> s/i/is
[16:50:38] *** Joins: alzgh (~alzgh@user/alzgh)
[16:51:28] *** Joins: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net)
[16:51:31] <tomsmeding> yeah wrong terminology, that's an irrefutable pattern match officially
[16:51:46] <tomsmeding> > case undefined of (a, b) -> ()
[16:51:48] <lambdabot>  *Exception: Prelude.undefined
[16:51:53] <tomsmeding> > case undefined of ~(a, b) -> ()
[16:51:55] <lambdabot>  ()
[16:52:03] <tomsmeding> > case undefined of ~(a, b) -> a
[16:52:05] <lambdabot>  *Exception: Prelude.undefined
[16:52:29] <tomsmeding> dartford: the pattern match always succeeds and doesn't force the value being matched, and is thus also lazy
[16:52:41] <tomsmeding> usages effectively become projections
[16:54:00] <dartford> hmm, nice
[16:54:11] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[16:54:31] <dartford> so its use in the StateT Applicative instance reasures us that the traversal should be lazy
[16:54:52] <dartford> ie that we get a rewrite rule for the instance of mapAccumL defined using runState above
[16:55:05] <dartford> that combines to subsequent mapAccumL's into one
[16:55:21] <dartford> as if it were just consuming one element at a time and passing it through to the next scanner
[16:56:13] <tomsmeding> yeah the StateL is also lazy, because let bindings are lazy, so its behaviour would be equivalent to the .Lazy version from transformers, with the ~ matches
[16:56:50] <dartford> wait, iv gotten distracted, i forgot what we were trying to do
[16:57:10] <dartford> good info about how its lazy though
[16:58:56] <dartford> ok, so i want to make something like an existing probability monad
[16:59:06] <dartford> but that uses the Compose idea to build up the state
[16:59:29] <dartford> and then factor away the functionality so that the user doesnt actually see the "top layer" where the seed is
[16:59:30] * tomsmeding is not sure what the Compose idea is, but has to go anyway -- meetings meetings
[17:00:23] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 268 seconds)
[17:00:39] <dartford> the idea is that if you use the Applicative instance of Data.Functor.Compose to smash together two StateL's into what should effectively then opperate *lazily* as StateL does, by the Applicative instance offered by Compose
[17:00:48] <dartford> tomsmeding: ok, thanks for your help
[17:01:03] <dartford> ill wait to see if anyone else picks up the convo before continuing
[17:01:37] *** Joins: cfricke (~cfricke@user/cfricke)
[17:01:39] *** Joins: hololeap_ (~hololeap@user/hololeap)
[17:02:09] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[17:02:41] <dartford> i guess in the worst case i would just have to write my own version of compose, posibly that just accepts stateL encoded data, to ensure its applicative instance is lazy as required
[17:02:54] <dartford> not quite sure how that would work, but anyway...
[17:03:11] <dartford> this is turning into a nightmare
[17:03:41] <[exa]> do you have some example of code of how the probability monad should work?
[17:03:46] <dartford> probablistic stream algebras they say, easy they say
[17:04:21] <dartford> [exa]: thats very simple. something like do; x <- gausian1d (0,1)
[17:04:37] <[exa]> what's the type of `x` after that?
[17:04:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:04:42] <dartford> or, gausian1d (0,1) >>= \x -> ... 
[17:04:44] <[exa]> "type"....semantics
[17:04:49] <dartford> x :: Double here
[17:04:58] <[exa]> so it draws from the distribution, I see
[17:05:02] <dartford> yeah
[17:05:14] <dartford> and this requires the rng seed is updated behind the scenes
[17:05:16] <[exa]> ok so far that's a monad that just holds a RNG
[17:05:20] <dartford> its in a StateL composition somehow
[17:05:31] <dartford> yeah, its just a fancy version of a pair with an int
[17:05:39] <[exa]> how did you get to StateL?
[17:05:45] <dartford> probably one of these lazy pairs from the StateT applicative instance example
[17:05:58] <dartford> [exa] StateL appears in mapAccumL
[17:06:10] <dartford> this is the basis for the idea of scanners
[17:06:20] <[exa]> trying to hoogle in vain, lemme click backlog
[17:06:30] <dartford> not all applicatives being lazy, scanners being the subset of traversals which use lazy applicatives, basically
[17:07:02] <dartford> [exa] dont worry, we can work even with a custom instance, as long as it has a lazy applicative instance
[17:07:18] <[exa]> oh wow that's the StateLegendary, with the tuple that just™ fmaps™
[17:07:27] <dartford> ie that when used with traverse that we get a rewrite rule for two subsequent mapAccumL's to compose into one
[17:07:41] <dartford> [exa]: pardon1?
[17:08:08] <[exa]> what would be an example of the 2 mapAccumL's ?
[17:08:15] <[exa]> (that should compose)
[17:08:19] <dartford> let me get the type hang on
[17:08:22] <dartford> :t mapAccumL
[17:08:23] <lambdabot> Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
[17:08:40] <dartford> so the functions that you want to compose are these ... er wait let me uncurry that
[17:08:46] <dartford> :t uncurry mapAccumL
[17:08:47] <lambdabot> Traversable t => (a -> b -> (a, c), a) -> t b -> (a, t c)
[17:09:00] <dartford> so you would have 2 of that first argument
[17:09:11] <dartford> each needs its own initial state
[17:09:15] <dartford> and state update function
[17:09:24] <dartford> then, the initial states should compose into a pair
[17:09:43] <dartford> and then you would have the `a' appearing in the state update function also ending up as a pair
[17:09:55] <dartford> so it acts to accept and update the tuple of both states
[17:09:57] <dartford> clear?
[17:10:11] <[exa]> not sure what's the point of that
[17:10:20] <[exa]> wait
[17:10:58] <dartford> well, suppose it wasnt lazy, then you couldnt do that
[17:11:00] <[exa]> why'd you want to compose the tuples manually when you'd have a monad below that does it for you? (mapAccumL kinda becomes traverse)
[17:11:12] <dartford> notionally it nyams up one element at a time, and passes it through to the next accumulator
[17:11:21] <dartford> next scanner
[17:11:24] <dartford> whatever
[17:11:46] <dartford> its just the idea that we get an algebra for scanners as a result of the lazyness
[17:11:53] <dartford> it wouldnt *work* if it wasnt lazy
[17:12:02] <dartford> but its difficult to express that 
[17:12:15] <[exa]> so you want something like:  mapAccumL (...) `magicCompose` mapAccumL (...)  ?
[17:12:18] <dartford> because the first thing would hang, you would never be able to realise the composed version
[17:12:32] <[exa]> it's as difficult as writing an example of the cool thing it does at the end
[17:12:38] <dartford> [exa] exactly, it becomes monoidal under `magicCompose'
[17:12:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:13:15] <dartford> but only with the lazy applicatives, so instead of bothering with traverse that could break, and supplying StateL's only
[17:13:23] <[exa]> ok and what would be the problem of writing that as `traverse (...) >> traverse (...)` with a custom state inside, as lazy as you want?
[17:13:33] <dartford> just combine them to keep the user from breaking it, and end up with Scanners as an actual thing
[17:14:04] <dartford> kind of as a safety net, and to encapsulate this idea of stream transduction only working with lazy applicatives
[17:14:05] <[exa]> (or *> to keep it applicative)
[17:14:29] *** hololeap_ is now known as hololeap
[17:14:50] <dartford> im not sure i understand
[17:15:10] <dartford> you could certainly write it using traverse
[17:15:24] <dartford> perhaps you dont agree with the notion of scanners as being well motivated
[17:15:24] <Tisoxin> Are GADts a complete replacement for the normal data type declarations?
[17:16:09] <dartford> Tisoxin: no, you do away with user defined records, but gain something in terms of actual type signatures, eg being able to add constraints
[17:16:30] <Tisoxin> hm
[17:16:40] <Tisoxin> I have a problem apart from records
[17:17:06] <[exa]> dartford: re "safety", what would be the unsafe situation there? It starts consuming randomness forever?
[17:17:34] <[exa]> also not sure what "scanners" is, pls elucidate. :]
[17:18:37] <dartford> well suppose one traverse used StateR by mistake
[17:19:02] <dartford> then it would hang, and none of the values would make it through to the next state update function aka scanner
[17:19:20] <Tisoxin> dartford: I need the equivalent of `type Test = (String, Expr)`, where Expr should be a GADT
[17:19:20] <dartford> [exa] scanners is just traversals where the applicative is restricted to StateL
[17:19:37] <dartford> thats easy
[17:19:39] <[exa]> ok good, and why should it hang?
[17:19:46] <[exa]> it doesn't click still
[17:19:55] <dartford> because if it tries to consume the last element first, and the stream is infinite...
[17:19:58] <Tisoxin> `type Test = (Int, Expr (forall p. p))` apparently doesn't work yet (v. 8.10.7 GHC)
[17:20:04] <dartford> you cant traverse streams from the right
[17:20:20] <dartford> streams being strictly infinite lists
[17:20:27] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:20:36] *** Quits: chexum_ (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[17:20:50] <dartford> so, while i can write a Traversable instance, it might break, so i should just be contented with being restricted to using scanners instead
[17:21:07] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[17:21:07] <dartford> ie, write a Scanner instance, not a Traversable instance, when you have a strictly infinite list
[17:21:15] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:21:17] <[exa]> ah okay, cool, so basically you want a kinda-total subset of all possible operations on streams
[17:21:42] <dartford> the traversables that dont hang
[17:21:46] <c_wraith> lazy state is neither necessary nor sufficient for that
[17:21:48] <dartford> traversals*
[17:22:10] <dartford> c_wraith: there are some subtelties to do with IO we encountered yesterday
[17:22:42] <dartford> basically, you have to have IO in the stack of composed StateL's if its going to be able to do anything 
[17:22:45] <dartford> is that what you mean?
[17:22:50] <dartford> what else is wrong with it?
[17:23:14] <[exa]> dartford: where did you get IO in there?
[17:23:20] <c_wraith> using a lazy state type doesn't actually guarantee the operations you do with it are sufficiently non-strict
[17:23:22] <[exa]> I thought it's a RNG monad :]
[17:23:33] <dartford> oh no, even more stacked things
[17:24:11] <c_wraith> and there are a lot of other Applicative instances which can work in certain cases.
[17:24:15] <dartford> c_wraith: are you saying that depending on how the state update function uses the encoutered elements, that somehow they could demand the next element, and break the whole thing!?
[17:24:19] <dartford> that would be terrible!
[17:24:44] <[exa]> dartford: SW eng advice-- make a maximal sample that works for you now, and then show us how you break it, that's going to trigger people into solving it. For me this stuff here is pretty much too abstract.
[17:24:47] <dartford> the IO thing was just because if you want it to return any effect before it reaches the end of the infinite stream
[17:24:51] <c_wraith> yes, you can create unfounded circular data dependencies
[17:25:02] <dartford> well, lets not do that
[17:25:08] <dartford> :-/
[17:25:13] <dartford> not sure what to say really
[17:25:20] <dartford> scanners recieve pushback
[17:25:29] <dartford> i like the idea anyway
[17:25:38] <dartford> i dont need traverse, just mapAccumL
[17:25:42] <dartford> in some cases
[17:25:43] <[exa]> dartford: to prevent the magic strictness from happening you can make your own "realworld token" and pass it around
[17:25:52] <c_wraith> also, for what it's worth, you really should be modelling traverse_ instead of traverse
[17:26:20] <dartford> [exa] that sounds utterly brutal
[17:26:22] <[exa]> dartford: but at that point you just want to materialize a complete eDSL for it, and avoid reliance on haskell strictness rules
[17:26:24] <dartford> but like it could work!
[17:26:25] <[exa]> yep
[17:26:41] <dartford> whats traverse_ ?
[17:26:56] <c_wraith> part of Foldable
[17:27:07] <dartford> oh, like >> instead of >>= ? to prevent some kind of applicative effect spilling over?
[17:27:19] <dartford> % :t traverse_
[17:27:20] <yahb> dartford: (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()
[17:27:24] <[exa]> yeah, basically `traverse ..thesame... >> return ()`
[17:27:42] <dartford> no, it should update the contents to not be ()
[17:27:44] <c_wraith> To prevent memory waste caused by holding on to values that will never get returned
[17:27:48] <dartford> otherwise it cant do mapAccumL
[17:28:07] <dartford> its supposed to update the encountered elements, and change the carried state
[17:28:16] <[exa]> dartford: then you want `($> ())`
[17:28:41] <[exa]> (what's the human name for $> ? fmapconst?)
[17:28:53] <dartford> the values will be returned? or they have to just be producing effects?
[17:29:02] <dartford> er, i mean, no certainly they are returned
[17:29:03] <c_wraith> I get the feeling that what you're really looking for is some kind of streaming abstraction
[17:29:10] <dartford> thats how the next scanner has values to opperate on
[17:29:24] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:29:31] <dartford> only the rewritten version, written into one overall state update function, acting on the full tuples of states 
[17:29:34] <[exa]> dartford: btw did you see Selective? I've got a serious feeling you're heading somewhere that way
[17:29:36] <dartford> acts like you say
[17:30:02] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 260 seconds)
[17:30:20] <dartford> [exa] i was under the impression that what i had was very much complete, and superior in many ways to existing approaches of which im aware
[17:30:32] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[17:32:24] <[exa]> dartford: I didn't see much of it yet, sorry :]
[17:32:45] <[exa]> (likely missed a few important pastebins)
[17:34:39] <dartford> is there a paper for selective? it looks like an actual thing
[17:34:56] <dminuoso> Mmm, what kind of paper are you looking for?
[17:34:58] <dartford> [exa] not to worry
[17:35:03] <dminuoso> There's really not much to it
[17:35:14] <dartford> this one i think!
[17:35:15] <dartford> https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf
[17:35:20] <[exa]> yep that one
[17:35:28] <dminuoso> Yeah, that's the original paper
[17:35:34] <dartford> dminuoso: whats the idea?
[17:35:54] <dminuoso> dartford: So with selective functors you get something between applicative and monad.
[17:35:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:35:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:35:55] *** Joins: wroathe (~wroathe@user/wroathe)
[17:36:31] <dminuoso> You have static analyzability, because the *potential* effects are predetermined, and yet you have the power of chosing effects based on previous results.
[17:36:50] <dminuoso> They're kind of like monads but with predetermined possible outcomes
[17:37:57] <[exa]> re static analyzability, I kinda hoped to use that here to get some easy assurances on whether the stuff terminates or explodes
[17:38:02] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[17:38:06] <dminuoso> One use case is say `optparse-applicative`, where this static analyzability allows the library to derive a parser and documentation from the specification. If we upgrade its applicative to selective functors, you can do something where say one command flag `-a` decides what further command flags are allowed.
[17:38:32] <dminuoso> Another is if you had parser combinators with selective functors, you can statically analyze and optimize at compile time (say via TH).
[17:39:26] <maerwald> dminuoso: https://imgflip.com/i/5skojf
[17:39:28] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Read error: Connection reset by peer)
[17:41:29] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[17:41:35] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[17:45:06] *** Joins: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de)
[17:47:57] *** Joins: max22- (~maxime@2a01cb088335980078b9d498c24675c0.ipv6.abo.wanadoo.fr)
[17:48:53] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[17:48:53] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[17:48:53] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[17:49:57] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[17:50:30] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 260 seconds)
[17:52:48] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[17:53:20] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[17:53:22] *** Quits: tput (~tim@S0106a84e3fe54613.ed.shawcable.net) (Ping timeout: 260 seconds)
[17:55:02] *** Joins: cigsender (~cigsender@74.124.58.162)
[17:58:49] *** Joins: img (~img@user/img)
[17:58:49] <Hecate> cigsender: hello you :)
[17:59:03] <cigsender> salut Hecate :p
[17:59:13] <Hecate> cigsender: how are you doing? 
[17:59:47] <cigsender> not bad! pondering the CLC issues that have been sparking discussion
[17:59:52] <cigsender> and you?
[18:02:25] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[18:02:49] *** Quits: Jing (~textual@103.121.208.52) (Quit: Textual IRC Client: www.textualapp.com)
[18:02:56] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[18:04:11] <Hecate> cigsender: pondering if I should pile-up with my own proposal to imitate Rust on having PartialEq/PartialOrd :3
[18:04:26] <Hecate> but we need the mechanism to change a typeclass's superclass ± seamlessly first
[18:04:40] <Hecate> and I simply do not posess the brainpower to implement that
[18:04:50] <Hecate> hmm
[18:04:57] <Hecate> that being said we could have them separated 
[18:05:07] <Hecate> without any superclass dependency
[18:05:38] <Hecate> and say "y'all we give you three years to add PartialEq & PartialOrd to your stuff"
[18:06:01] <maerwald> we'll first have to come up with a new proposal process before we can discuss that
[18:06:17] <Hecate> isn't there already the new proposal process, maerwald ?
[18:06:18] <cigsender> a new proposal process for GHC?
[18:06:28] <Hecate> I'm speaking of base here
[18:06:46] <maerwald> a proposal process for asking questions
[18:06:55] <Hecate> tss
[18:06:59] <Hecate> silly maerwald 
[18:07:10] <maerwald> only occasionally
[18:08:05] * cigsender sighs in bureaucracy
[18:08:27] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[18:08:47] <Hecate> oh btw cigsender, you're not in https://github.com/haskell-core/core-libraries-proposals ?
[18:08:51] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.185)
[18:08:51] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.185) (Changing host)
[18:08:51] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:08:51] <Hecate> in the table of the README
[18:09:16] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Read error: Connection reset by peer)
[18:09:54] <cigsender> oh yeah the new link is https://github.com/haskell/core-libraries-committee
[18:10:01] <cigsender> i'd never heard of that other one
[18:10:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:10:13] <Hecate> :'')
[18:10:22] <Hecate> I had it in my browser history apparently
[18:10:33] <Hecate> chessai should remove that org
[18:11:00] * geekosaur keeps misreading that /nick as "cisgender" and wondering why you'd point that up
[18:11:52] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:12:19] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:12:32] *** Quits: alx741 (~alx741@181.196.69.253) (Ping timeout: 268 seconds)
[18:14:02] *** Joins: jespada (~jespada@190.7.36.46)
[18:14:28] *** Joins: Fred9 (~Fred@78-73-197-175-no2480.tbcn.telia.com)
[18:16:10] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:16:10] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:16:10] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:16:44] <Hecate> geekosaur: yes, same brainfart here
[18:16:45] <Hecate> :D
[18:16:58] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[18:19:21] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:19:46] <maerwald> . o O ( maybe a proposal process for all my issue trackers )
[18:20:37] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[18:22:41] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.185)
[18:22:41] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.185) (Changing host)
[18:22:41] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:23:47] *** Joins: drdo6 (~drdo@roach0.drdo.eu)
[18:25:06] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[18:25:34] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 260 seconds)
[18:25:34] *** drdo6 is now known as drdo
[18:26:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:26:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:26:51] *** Joins: wroathe (~wroathe@user/wroathe)
[18:27:46] *** Joins: johnjay (~pi@192.142.100.50)
[18:27:51] <cigsender> the trick is: i'm not cisgender :D
[18:28:12] *** Quits: dartford (~dartford@176-157-77-163.abo.bbox.fr) (Quit: Connection closed)
[18:28:16] <merijn> I pretty much assumed that was an intentional spoonerism for that reason
[18:29:02] <merijn> I get irrationally annoyed by the name, because my brain wants to parse it as, like, SIGSENDER or some other unix signal >.>
[18:29:21] <maerwald> that's some serious PTSD right there :D
[18:29:31] *** Quits: tdwamdors^ (~tdwamdors@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[18:29:53] <merijn> maerwald: I had to dig through cpython source code with an open APUE to figure out what they broke and how, so yes :p
[18:31:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:32:50] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:33:26] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[18:34:16] <maerwald> I'll switch gladly with you, then you can try to figure out how blockchains work
[18:34:25] <merijn> Easy
[18:34:33] <merijn> They don't. Next question :)
[18:34:53] <maerwald> next question would be: how did I end up here
[18:34:56] * maerwald mumbles
[18:36:21] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:1b26:eada:1c7:e76b) (Quit: WeeChat 2.8)
[18:37:09] <merijn> So, in Dutch (and German, I think?) we have a term for "feeling shame for someone else's behaviour". I wonder if we can invent a similar term for when other people's behaviour traumatises me in their place. Because that'd describe the effect of "everyone else's posix code" on me >.>
[18:37:44] <maerwald> posix has principles at least, even if some are misguided
[18:38:26] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[18:39:10] <maerwald> also, I've been looking more closely into windows filesystem API
[18:39:17] <maerwald> so if you think you've seen it all... well
[18:39:28] <merijn> maerwald: My complaint isn't with posix
[18:39:43] <merijn> maerwald: My complaint is that people write *terrible* posix code using deprecated and broken interfaces
[18:39:50] <maerwald> well, posix provides difficult APIs
[18:39:59] <merijn> Yes, but people *think* they're easy
[18:40:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[18:40:54] *** Quits: acidjnk (~acidjnk@p200300d0c74411311cbabef3984b18e3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:41:14] <maerwald> well, I looked at posix_spawn and the process code that uses it... it's also a family of functions (as always) with initilization and all sorts of stuff you don't care about
[18:41:31] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[18:42:02] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.185)
[18:42:02] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.185) (Changing host)
[18:42:02] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:42:09] <maerwald> it's almost like you need an algorithm to correctly use posix API
[18:43:41] <maerwald> windows API documentation is much nicer... the awful details are usually 5 clicks away and the base page gives you an impression of "wow, this function is surely well-defined"
[18:43:44] <maerwald> until you run it
[18:43:58] <shapr> @quote
[18:43:58] <lambdabot> xentrac says: I [15;2~|"
[18:44:02] <shapr> whoa
[18:45:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Ping timeout: 268 seconds)
[18:45:46] *** Joins: zys (~zys@116.21.145.62)
[18:51:42] *** Quits: zys (~zys@116.21.145.62) (Ping timeout: 260 seconds)
[18:53:26] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:54:51] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[18:55:00] *** Quits: cigsender (~cigsender@74.124.58.162) (Quit: Lost terminal)
[18:56:34] *** Joins: alx741 (~alx741@181.196.69.253)
[18:58:44] *** Joins: cigsender (~cigsender@74.124.58.162)
[19:01:14] *** Quits: Farzad (~FarzadBek@178.131.25.90) (Quit: Leaving)
[19:05:12] *** Quits: sy4 (~sy4@user/sy4) (Quit: WeeChat 1.9.1)
[19:05:34] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:05:42] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:07:20] *** Joins: jespada (~jespada@190.7.36.46)
[19:07:39] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[19:08:02] *** Quits: jespada (~jespada@190.7.36.46) (Client Quit)
[19:10:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[19:14:15] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:14:42] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:15:18] *** Quits: Fred9 (~Fred@78-73-197-175-no2480.tbcn.telia.com) (Quit: Connection closed)
[19:18:10] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:18:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:f456:9370:22df:9c55)
[19:21:01] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[19:22:41] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Quit: Leaving.)
[19:22:57] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:22:57] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[19:23:25] *** Joins: fendor__ (~fendor@77.119.197.65.wireless.dyn.drei.com)
[19:24:41] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[19:25:24] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:25:42] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:26:33] *** Quits: fendor_ (~fendor@77.119.160.25.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[19:26:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[19:28:45] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[19:29:25] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[19:29:57] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:30:00] *** Joins: acidsys (~LSD@2.lsd.systems)
[19:31:09] <[exa]> ignoring the fact that unbounded dependencies are Just Bad, is there any reason why would cabal choose to install a historical brick-0.26 incompatible with any current base in case I specify unbounded `build-depends: base, brick, vty, vector` ?
[19:31:22] <[exa]> (alternatively, is there any option for tracking the decisions & finding why's ?
[19:31:48] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:32:12] <myShoggoth> Haskell Foundation Office Hours: https://www.twitch.tv/myshoggoth
[19:32:28] <c_wraith> was there a previous build plan for that project that it might still be getting some version info from?
[19:32:34] <maerwald> [exa]: it has less dependencies... check the diff of them
[19:32:38] <maerwald> one of them must be the reason
[19:33:04] <[exa]> like, if I specify something sane like `brick > 0.60`, the new version (0.64.2 afaik) gets installed without any problems
[19:33:21] <[exa]> so just kinda thinking why cabal decides on the older
[19:33:54] <[exa]> "less dependencies" is a criterion for selection?
[19:34:02] <maerwald> no
[19:34:05] <shapr> myShoggoth: whoa, I'll come to office hours if these happen regularly.
[19:34:07] <[exa]> c_wraith: how do I find that?
[19:34:30] <[exa]> (the project is completely new and fresh)
[19:34:33] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[19:34:38] <c_wraith> then no, there wouldn't be.
[19:34:53] <maerwald> it's possible that it's trying older versions before e.g. checking different flag configuration
[19:35:07] <[exa]> hm that could work with brick+vty
[19:36:49] <jlamothe> Does anyone know if there's an equivalent to bracket that'll work on an arbitrary MonadIO?
[19:37:21] <maerwald> @hoogle bracket
[19:37:22] <lambdabot> Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
[19:37:22] <lambdabot> Control.Exception.Base bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
[19:37:22] <lambdabot> GHC.IO bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
[19:37:53] <c_wraith> jlamothe: that's not possible in general.  But there are several packages that provide classes that can work, like MonadCatch
[19:38:05] <cigsender> jlamothe: check in UnliftIO? there's a bunch of MonadIO versions of base functions there
[19:38:21] <maerwald> https://hackage.haskell.org/package/exceptions-0.10.4/docs/Control-Monad-Catch.html#v:bracket
[19:38:24] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.185)
[19:38:24] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.185) (Changing host)
[19:38:24] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[19:38:28] <maerwald> no need to look in unliftioo
[19:38:53] <jlamothe> That's what I thought. I basically wanted to confirm that I wasn't missing something.
[19:39:14] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[19:40:35] <jlamothe> It's fine. I can work with just a regular IO. I was just trying (unsuccessfully) to be fancy.
[19:40:49] <c_wraith> [exa]: what version of ghc?
[19:41:31] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[19:42:19] <jlamothe> I generally hate exceptions. I much prefer functions whose output types have a way of representing a failure state, then you don't have to worry about forgetting to catch it.
[19:44:05] <[exa]> c_wraith: 9.0.1, fresh from the binary builds, same cabal
[19:44:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[19:45:45] <c_wraith> [exa]: hmm.  testing with ghc 9.2 makes me suspicious...
[19:46:51] <c_wraith> [exa]: yeah, I think I see what's going on.  brick 0.26 has a base <5 constraint.  starting at 0.26.1, it gets a tighter bound on base
[19:47:14] <[exa]> aaaaaah yes that could make some sense
[19:47:15] <c_wraith> [exa]: I think the solver is preferring wider version bounds
[19:47:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[19:48:32] <[exa]> yeah that makes sense because the 0.26 actually fails on Monoid/Semigroup portability bug
[19:49:13] <[exa]> ....someone could really fix that in hackage. :D
[19:49:36] <[exa]> anyway yeah thanks for catching this, sounds plausible to me
[19:51:58] <maerwald> c_wraith: that sounds like a bug :>
[19:52:05] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:52:09] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[19:52:47] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:53:40] <[exa]> oioi
[19:54:48] <[exa]> no like, technically there's no problem with picking that version (from cabal side) because it looks plausible and certainly seems to cause less compilation
[19:56:01] <c_wraith> maerwald: doesn't sound like a bug to me. it's a heuristic for finding *some* package set that satisfies the requested constraints.
[19:56:25] <c_wraith> I would say maybe it's not an ideal heuristic. but that's not the same as being just wrong.
[19:56:53] <maerwald> it's picking an older version, while a newer version would satisfy the constraints as well
[19:57:05] <maerwald> that's undesired
[19:57:07] <geekosaur> how's it supposed to know it's wrong? it needs the constraints to make sense
[19:58:24] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:59:36] <c_wraith> isn't there a package manager for another language that, by policy, will always pick the oldest set of packages that satisfy the constraints?
[19:59:48] <c_wraith> people don't always want the newest thing.
[20:00:29] <c_wraith> (I think lock files are a better solution to what that package manager was trying to do, but that's a different issue)
[20:01:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[20:03:34] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:03:52] <maerwald> I think the number of people who expect this behavior is low
[20:04:06] *** Joins: ystael (~ystael@user/ystael)
[20:06:58] <c_wraith> which provides a good argument that the heuristic could be improved. but that's not the same as "this is a bug"
[20:07:40] <c_wraith> a big would imply it wasn't fulfilling its spec. it is here... the spec is very loose.
[20:08:07] <c_wraith> my spelling, on the other hand, might be considered buggy
[20:09:13] <[exa]> maerwald: you might get "recompile everything after each cabal update" if you forced newer versions... but yeah here it could make some sense
[20:09:26] <maerwald> c_wraith: we can debate semantics of the term "bug", sure
[20:09:36] <maerwald> I think breaking users expectations is a bug
[20:09:39] <[exa]> I assume the brick 0.26 version in hackage can't be "fixed" anymore?
[20:09:56] <maerwald> [exa]: I think it can be marked as deprecated
[20:09:59] <maerwald> which affects  the solver
[20:10:13] <c_wraith> a metadata revision could also be issued
[20:10:19] <[exa]> where's the button for that? :D
[20:10:32] <maerwald> you need to be a maintainer to do that
[20:10:42] <c_wraith> I'm not sure anyone other than hackage trustees can do that
[20:10:58] <geekosaur> hm. wouldn't you have to deprecate it and all earlier versions, in case it decides to build an even older one?
[20:11:09] <[exa]> likely
[20:11:25] <awpr> I revise my version bounds all the time.  it's not limited to Hackage trustees
[20:11:47] <c_wraith> I used to work with the author of brick. but I no longer have a convenient way to yell at him. :P
[20:11:52] <[exa]> so the best way to communicate that would be IMO to open an issue in brick repo?
[20:12:22] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[20:12:30] <maerwald> only time will tell
[20:12:49] <[exa]> I'm going to open it and see
[20:18:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[20:18:03] <sm> cabal's "randomly" picking an ancient version on any given day is if not a functionality bug, certainly a terrible ux fail 
[20:18:20] <sclv> it doesn't randomly pick ancient versions on any given day
[20:18:30] <sclv> it has a greedy solver that tries newest first
[20:18:38] <sclv> and is deterministic
[20:18:42] <c_wraith> in some sense, it was trying to maximize for forward compatibility
[20:18:46] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[20:19:08] <c_wraith> sclv: well, as we've discovered, that isn't exactly what it does.
[20:19:14] <sclv> but there's no perfect heuristic and also solving is np complete so moving to a nongreedy algorithm could introduce significant complexity
[20:19:22] <geekosaur> rather than my doing a cabal update and having my whole xmonad+contrib setup getting rebuilt?
[20:19:29] <sclv> c_wraith: i mean, in the code, its literally a greedy algorithm
[20:19:33] <sclv> that tries newest first
[20:19:49] <sclv> if it didn't do that, that's because there's some backtracking issue that drove it away from that goal
[20:19:49] <maerwald> sm: well, what's the alternative: don't solve at all? :D
[20:19:54] <c_wraith> sclv: it appears that it tries the thing with the highest version bound first.
[20:20:12] <c_wraith> sclv: otherwise it wouldn't prefer brick 0.26
[20:20:18] <awpr> perhaps it chose the newest base and then chose the only brick that worked with that?
[20:20:22] <sclv> hrm, that doesn't sound right -- i would check the code
[20:20:27] <sm> maerwald: that's an alternative yes, hence stack
[20:20:37] <maerwald> sm: and when you NEED a solver, you do what? :)
[20:20:39] <sclv> the solver is big but its factored to be easy to read
[20:20:49] <sclv> also you can look at the -v3 trace of the solver to see why its making choices
[20:20:59] *** Quits: Null_A (~null_a@2601:645:8700:2290:f456:9370:22df:9c55) (Remote host closed the connection)
[20:21:02] <sm> you use it obviously. There's a right time for each approach
[20:21:03] <geekosaur> I don't think it can choose the newest base, base is pinned by the compiler
[20:21:10] <maerwald> sm: except stack doesn't have one
[20:21:22] <sm> I didn't say it did!
[20:21:29] <c_wraith> [exa]: any chance you're actually on GHC 9.2?
[20:21:32] <sclv> like if it tries to pick a newer something else first, and the newer bricks have upper bounds on that thing, then that'll cause an older brick to be picked
[20:21:36] <maerwald> sm: right, but you don't need stack to disable the solver
[20:21:36] <sclv> because it is greedy
[20:21:54] <sclv> instead, if you disallow that, then it is forced to use a newer brick and bactrack on the older choice
[20:22:09] <sclv> greedy algos vary in their result based on the order of goals
[20:22:19] <sclv> there's goal reordering heuristics in cabal, but they're necesarily ad hoc
[20:22:23] <c_wraith> because pure greedy based on version would explain this if you ran it against GHC 9.2
[20:24:19] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[20:24:21] <[exa]> c_wraith: 9.0.1
[20:24:52] *** Joins: thyriaen (~thyriaen@dynamic-077-011-154-101.77.11.pool.telefonica.de)
[20:25:08] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[20:25:26] *** Joins: v01d4lph4 (~v01d4lph4@106.215.90.6)
[20:25:26] *** Quits: v01d4lph4 (~v01d4lph4@106.215.90.6) (Changing host)
[20:25:26] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:25:43] *** Joins: hololeap (~hololeap@user/hololeap)
[20:25:50] <maerwald> windows filetime epoch starts in 1601-01-01 ... that's honestly how this OS feels like
[20:26:06] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[20:26:36] <[exa]> re brick version bounds, feel free to discuss here https://github.com/jtdaugherty/brick/issues/341
[20:26:37] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.185)
[20:26:37] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.185) (Changing host)
[20:26:37] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:27:15] <janus> maerwald: at least it has broken compat with the Antikythera mechanism from 87 BC :P
[20:27:24] <[exa]> awpr: I assume there's no weird trick needed for changing of the dependencies in hackage and it just works?
[20:27:52] *** Quits: thyriaen (~thyriaen@dynamic-077-011-154-101.77.11.pool.telefonica.de) (Client Quit)
[20:28:16] <awpr> right, there's a link on the package page to edit package information, and from there a link to edit each version's cabal file (only maintainers + trustees can access it, though)
[20:28:49] *** Joins: v01d4lph_ (~v01d4lph4@106.215.91.221)
[20:29:39] *** Papa_ is now known as papa
[20:29:48] <sm> my point: a solver as free and powerful as cabal's current default behavior is not ideal for most users - it is too smart for them to predict and on any given day depending on factors they can't see, it can suddenly give new and unexpected results. most of the time it works brilliantly but it can't be completely relied on, without special extra configuration
[20:29:59] <sclv> right. any maintainer can add correct upper bounds to their package, and they can use the matrix for that
[20:30:11] <sclv> to see what works and doesnt
[20:30:33] <sclv> trustees get involved when maintainers are not available or responsive
[20:30:41] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[20:30:56] <sclv> re solvers: there's no such thing as a "dumber" solver. you either solve bounds or you dont
[20:31:23] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[20:31:53] <sm> sclv: I can imagine adding some extra constraints and safety belts though
[20:32:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[20:35:18] *** fendor__ is now known as fendor
[20:37:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:40:03] *** Joins: econo (uid147250@user/econo)
[20:40:31] <[exa]> sclv: is there any quick way to project the fails from matrix into version bounds? :] (the response was fast, here: https://github.com/jtdaugherty/brick/issues/341#issuecomment-956409689 )
[20:40:46] *** Joins: nickkkkk_all (~nick_all@139.102.124.132)
[20:42:17] <awpr> +1, I would find that useful too -- I anticipate a lot of my packages will work with 9.2 at all versions, and manually typing in the cabal file changes to each one sounds unpleasant
[20:42:22] <sm> (eg, save the plan on first success and stick to it until told otherwise ?)
[20:43:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:43:11] <awpr> er, I was responding to the GitHub comment rather than the IRC message -- want a CLI for bumping version bounds, rather than automation of updating bounds according to the matrix
[20:43:23] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 260 seconds)
[20:44:52] <[exa]> I guess you want a better CLI than a sed exercise right. :]
[20:45:13] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[20:45:16] <awpr> sed would be fine, I suppose, but I don't know of a way to apply it to the metadata on Hackage
[20:45:50] <awpr> I suppose there could be a curl-accessible way of uploading revisions, but I'm not sure I'd trust my own sed script with pushing directly to Hackage
[20:47:22] *** Joins: dartford (~dartford@176-157-77-163.abo.bbox.fr)
[20:48:08] <[exa]> maybe something for just downloading all packages/metadata to a git repo and pushing the changed stuff back could make 99% of it
[20:48:18] *** Quits: rkrishnan (~user@223.226.59.167) (Ping timeout: 260 seconds)
[20:54:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[20:59:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[20:59:11] <dartford> i have to say, i cant understand why selective was proposed for this problem
[21:00:05] <dartford> maybe its because of the carry?
[21:00:10] <dartford> is that a decent use case?
[21:00:28] <dartford> the "accumulater" or state in mapAccumL
[21:00:55] <dartford> the paper mentions about "depending on previous values" - i wonder if selective formalises the notion of an accumlator or carry
[21:01:10] <dartford> but perhaps i dont understand it, can anyone say?
[21:01:31] <[exa]> dartford: not sure if it's the right abstraction but it adds the notion of a "regularly analyzable computation" which you kinda seemed to want
[21:01:45] <[exa]> dartford: I might have missed the point as well
[21:02:34] <dartford> this probably isnt the language i would understand unfortunately 
[21:02:54] <dartford> is what i said right?
[21:03:43] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:03:49] <dartford> what makes you think that a "regularly analyzable computation" is what i was after?
[21:04:11] <dartford> seems like a tuatological redefinition, since it isnt itself comprehensible in an obvious way
[21:04:20] <dartford> place is riddled with them
[21:05:43] <dartford> i dont even understand how applicative effects are suposed to be independent
[21:05:55] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:06:03] <dartford> and that monadic effects by contrast are "dependent on previous effects"
[21:06:14] <dartford> and i dont get what it means to "statically declare an effect"
[21:06:24] <dartford> its like gibberish soup at this point
[21:06:49] <sclv> dartford: it sounds to me like you don't have enough background in the basics to be trying to ask the questions you're asking
[21:07:16] <sclv> you can try writing the code you want directly with no typeclasses
[21:07:23] <dartford> [exa] why did you think thats what i need?
[21:07:24] <sclv> or you can buckle up and read some tutorials and ooks
[21:07:28] <sclv> books
[21:07:51] <dartford> thats quite condescending. just an observation
[21:08:25] <[exa]> dartford: it helped me when trying to do a monad that computes weirdly measured dimensions of stuff, this seemed similar :]
[21:08:39] <dartford> what does it mean to "declare" an effect?
[21:08:58] <[exa]> dartford: anyway the truth is that I really don't get your problem completely, more code examples of what you want to achieve would really help
[21:09:01] <davean> declare, definition: formally announce the beginning of (a state or condition).
[21:09:04] <sclv> [exa]: the matrix bounds can turn into base constraints, which can suffice.
[21:09:04] <dartford> [exa] - ah, no wonder that wasnt apparent!
[21:09:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:09:16] <davean> reveal one's intentions or identity.
[21:09:47] <[exa]> "write a part of declarative program"
[21:09:50] <dartford> [exa] i was just asking what selective does
[21:10:52] <dartford> or, how applicative is "independent" effects, vs monads as effects which can depend on previous effects 
[21:10:58] <dartford> i dont see how that works at all
[21:11:08] <dartford> but have plenty of "background" in both
[21:11:10] <davean> dartford: well, look at the type class
[21:11:18] <davean> No, you clearly lack background
[21:11:25] <sclv> [exa]: there's also https://github.com/phadej/trustee
[21:11:56] <davean> dartford: so with Applicative you get "(<*>) :: f (a -> b) -> f a -> f b"
[21:12:04] <davean> as your (only) way to combine effects
[21:12:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:12:11] <dartford> davean: right, i dont understand the jargon. but have been using applicative and monad for nearly 15 years now
[21:12:17] <[exa]> dartford: ah there. it's like applicatives, it can do effects that depend on previous effects, but it's highly restricted (unlike in full monads). The restriction could ensure that you almost get monads but don't do the problematic operation you were mentioning there
[21:12:20] <sclv> [exa]: and i know some people have bulk edit scripts but i don't know where. you can just open a ticket at https://github.com/haskell-infra/hackage-trustees/issues to ask for help as well
[21:12:39] <davean> dartford: how could you change one given one you combined before it? You clearly can't
[21:12:50] <[exa]> sclv: ah nice thanks! (cc awpr -- the link some 6 lines above)
[21:13:15] <dartford> which probelamatic opperation!?
[21:13:50] <[exa]> dartford: eating data from an end of an infinite list, iirc
[21:13:51] <dartford> davean: are you saying the order of sequential composition matters?
[21:13:59] <davean> dartford: no, I didn't say that
[21:14:07] <sclv> ?where lyah
[21:14:07] <lambdabot> http://www.learnyouahaskell.com/
[21:14:11] <dartford> could you explain what you meant?
[21:14:37] <dartford> [exa] oh right, thanks
[21:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:15:30] <davean> dartford: I give you a :: f a and b :: f b, if I combine them - in either order - how can you change what f a or f b is?
[21:15:39] <davean> you very clearly can't
[21:16:07] <davean> Applicatively only gives you the ability to build an f c using the a and bs
[21:17:48] <dartford> i wonder if thats because they sequence together in an order independent way...
[21:18:01] <davean> Really though, you should read a tutorial
[21:19:02] <dartford> i just read some of the comments people were saying about me at the top of this chatlog and im actually on the verge of tears
[21:19:12] <dartford> im going to have to come back to this another time
[21:19:14] *** Quits: dartford (~dartford@176-157-77-163.abo.bbox.fr) (Quit: Connection closed)
[21:20:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:22:54] <maerwald> https://haskellweekly.news/survey/2021.html
[21:26:35] *** Quits: mbuf (~Shakthi@122.174.251.211) (Quit: Leaving)
[21:26:47] *** Quits: nickkkkk_all (~nick_all@139.102.124.132) (Ping timeout: 268 seconds)
[21:26:47] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 268 seconds)
[21:27:43] *** Joins: cosimone (~user@93-47-228-135.ip115.fastwebnet.it)
[21:29:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:f456:9370:22df:9c55)
[21:32:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[21:35:05] <shapr> yay survey!
[21:35:08] *** Joins: emf (~emf@2620:10d:c090:400::5:f24f)
[21:35:11] <davean> "Do you use Haskell?" Where is the "I neither confirm or deny I engage in this deviant act"?
[21:36:22] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:bc44:afc4:50a0:6ab8) (Ping timeout: 260 seconds)
[21:37:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9dc4:877c:4cec:30b6)
[21:37:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Ping timeout: 260 seconds)
[21:37:29] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:38:16] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[21:38:30] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[21:38:46] *** Quits: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[21:40:14] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[21:40:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:42:58] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[21:43:34] *** Quits: v01d4lph_ (~v01d4lph4@106.215.91.221) (Remote host closed the connection)
[21:43:39] <monochrom> I think the close-tab/window button is th "I neither confirm nor deny" button :)
[21:44:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[21:46:12] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:46:22] *** Joins: nickkkkk_all (~nick_all@139.102.124.132)
[21:47:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dc4:877c:4cec:30b6) (Ping timeout: 268 seconds)
[21:48:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:f456:9370:22df:9c55) (Remote host closed the connection)
[21:53:11] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[21:57:52] *** Joins: timCF_ (~timCF@m91-129-101-112.cust.tele2.ee)
[22:02:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[22:05:01] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[22:06:50] <timCF_> Did anybody thought how might be possible to express in Haskell type system some sort of typical school-math compatible computations like `let distance :: Meter = 1; let time :: Second = 2; let speed :: Meter `Per` Second = distance / time`? Ideally in a way where left and right sides of `Per` type constructor will simplify themselves to canonical form and remove redundant type factor (in case something 
[22:06:57] <timCF_> is presented in both left and right and might be remove because of redundancy)
[22:07:58] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:08:17] *** Joins: neurocyte0132889 (~neurocyte@45.10.60.185)
[22:08:17] *** Quits: neurocyte0132889 (~neurocyte@45.10.60.185) (Changing host)
[22:08:17] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:08:33] *** Joins: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a)
[22:08:48] <davean> monochrom: ok, perfect. Thank you for your assistance, I've answered thusly
[22:09:07] <davean> timCF_: Thats pretty standard
[22:09:23] <davean> https://hackage.haskell.org/package/dimensional etc
[22:09:26] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[22:09:28] <davean> timCF_: people use that all the time
[22:09:46] <davean> (Theres several other implimentations, that just happens to be the one I've been using when I need it)
[22:11:12] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[22:11:40] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[22:12:00] <timCF_> davean: cool, thanks! How this kind of stuff is named in general? I just had no idea which keywords to hoogle :)
[22:12:07] <tomsmeding> units?
[22:13:04] <tomsmeding> case in point: https://hackage.haskell.org/package/units (I had no idea this library existed, the name just matches my guess)
[22:15:22] <timCF_> tomsmeding: looks good as well!
[22:16:44] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[22:17:51] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[22:18:04] <davean> timCF_: uh, its dimensional analysis
[22:18:07] <davean> isthe general term
[22:20:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:21:04] *** Quits: nickkkkk_all (~nick_all@139.102.124.132) (Ping timeout: 268 seconds)
[22:21:20] <timCF_> davean: thanks! 
[22:22:34] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[22:24:28] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[22:28:26] *** Joins: nickkkkk_all (~nick_all@139.102.124.132)
[22:33:26] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[22:34:08] *** Quits: nickkkkk_all (~nick_all@139.102.124.132) (Quit: Leaving)
[22:35:15] *** Quits: max22- (~maxime@2a01cb088335980078b9d498c24675c0.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:37:11] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:3a97:eaba:c01a:d700)
[22:39:28] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[22:39:28] *** Joins: Nachtgespenst (~user@user/siracusa)
[22:39:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[22:42:05] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[22:42:31] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:51:54] *** Quits: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a) (Read error: Connection reset by peer)
[22:52:29] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:53:22] *** Quits: cosimone (~user@93-47-228-135.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[22:55:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:01:05] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:05:14] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[23:05:27] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[23:07:04] *** Joins: vicfred (~vicfred@user/vicfred)
[23:10:34] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[23:15:54] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:16:10] <sm> +1
[23:18:06] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:18:10] *** Server sets mode: +Cnt 
[23:22:22] *** Joins: max22- (~maxime@2a01cb0883359800a1b4cd1a3eb225c1.ipv6.abo.wanadoo.fr)
[23:23:31] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[23:23:44] *** Quits: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Remote host closed the connection)
[23:23:51] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[23:24:00] *** Joins: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[23:25:26] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[23:28:05] <justsomeguy> How do I write literal values for Float values like -Infinity and NaN? -Infinity doesn't work in GHCi, but -1/0 does?
[23:28:36] <justsomeguy> Ah, scratch that, I've just found the relevant section in the haskell report.
[23:28:46] <monochrom> :)
[23:29:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:35:14] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 246 seconds)
[23:37:15] *** Joins: juhp (~juhp@128.106.188.220)
[23:45:28] <shapr> justsomeguy: what's the answer? I don't know!
[23:45:43] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.121)
[23:47:27] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:48:29] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[23:48:42] <dsal> I wanted to ask, but then people would know I was stupid.
[23:49:50] <shapr> dsal: I don't care if people think I ask stupid questions, I want to know the answers more
[23:49:52] <dsal> I avoid floating point so much, I generally try to keep my code as point free as possible just in case one of them decides to start floating away.
[23:51:03] <janus> is there really a literal for this? it seems so odd that i can't find it here https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Float.html
[23:52:06] <janus> seems roundabout to define isNaN as a foreign function if there were a way to write "== NaN"
[23:52:25] <geekosaur> I don't think two NaNs compare equal?
[23:52:30] <dsal> Isn't == NaN always False?
[23:52:37] <geekosaur> NaN follows some really weird rules
[23:52:46] <dolio> Right.
[23:53:18] <dsal> This is one of the reasons floating point is painful to work in.
[23:53:38] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.121) (Ping timeout: 260 seconds)
[23:53:45] <dsal> You treat them like regular numbers, and then sometimes the answer can't be represented properly and sometimes it's not a number at lal.
[23:54:04] <janus> ok but the comparison with negative zero is a foreign function
[23:54:38] <geekosaur> that's because
[23:54:42] <geekosaur> > -0 == 0
[23:54:44] <lambdabot>  True
[23:55:01] <geekosaur> > -0.0 == 0.0
[23:55:03] <lambdabot>  True
[23:55:15] *** Joins: aristid___ (sid1599@id-1599.uxbridge.irccloud.com)
[23:55:23] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.118)
[23:55:27] <janus> oh ok
[23:55:29] <geekosaur> negative zero is the same as zero for all but a few functions thta care about quadrants
[23:55:39] <geekosaur> (e.g. atan2)
[23:56:09] *** aristid___ is now known as aristid
[23:56:18] <geekosaur> as dsal said, this is why FP is painful
[23:56:30] <geekosaur> (and the same painful in all languages)
[23:56:47] <dsal> The pain was standardized.
[23:56:57] <[exa]> hopefully one day all FP equality comparisons will just return False
[23:57:22] <janus> > atan2 (0) (-1)
[23:57:24] <lambdabot>  3.141592653589793
[23:57:29] <janus> > atan2 (-0) (-1)
[23:57:31] <lambdabot>  -3.141592653589793
[23:57:36] <aristid> fixed point (or any other alternative to FP) is not exactly a panacea though
[23:58:04] <dsal> Adding negative numbers in general was a bad idea.  Zero was already bad enough.
[23:58:10] <[exa]> janus: noooooo
[23:58:29] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 268 seconds)
[23:59:01] <janus> i don't use atan anyway because i don't want untanned people to feel excluded
[23:59:28] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:59:36] <dsal> If I were a geometrist cooped up in my office all day, I could probably use atan.
