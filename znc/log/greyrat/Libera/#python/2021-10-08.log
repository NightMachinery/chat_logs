[00:00:10] <jinsun> it is not useless if you run the type checker though
[00:00:14] <bjs> stealth_: it's not useless,  it's the developer who writes the bugs in their code and writes the documentation and typing can help with that,  plus it can be leveraged by editors to help the developer
[00:00:18] <stealth_> jinsun, you can if you compile and it will raise type error
[00:00:26] <bjs> stealth_: those aren't runtime either
[00:00:34] <bjs> something like haskell doesn't even have types at runtime :)
[00:00:36] *** Quits: BSaboia (~bsaboia@177.37.198.74) (Remote host closed the connection)
[00:00:42] <deniska> There're frameworks which use type hints at runtime
[00:00:54] <bjs> stealth_: it's basically equally as useless as pylint or something,  it's the same sort of idea.
[00:01:22] <bjs> deniska: that too,  something like pydantic I guess
[00:01:28] <stealth_> sure having linter and such is very good tools... but ppl go so far into using typing that it isn't productive anymore!
[00:01:29] <bjs> although it's a less common use
[00:01:47] <bjs> stealth_: I mean,  so you agree that having a linter is a useful thing.  isn't mypy just... a bigger linter?
[00:01:59] <bjs> you give it more information, it gives you more information
[00:02:11] *** Quits: Jefren (~Jefren@70.35.67.141) (Ping timeout: 265 seconds)
[00:02:20] <deniska> I guess in this channel we see the extremes of trying to hint everything sometimes
[00:02:24] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:02:32] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[00:02:33] <bjs> it's clearly a trade-off,  how much information you give vs how much you get and the kinds of information and the time it takes to give that information and the different circumstances where it helps more or less
[00:03:04] <stealth_> bjs, linter isn't restricting you in this extreme typing everything mindset!
[00:03:22] <bjs> stealth_: wasn't your complaint earlier that it wasn't restrictive and that's why it's useless
[00:03:27] <bjs> now it's useless because it is restrictive
[00:03:37] <deniska> It traps some people in puzzle solving mindset
[00:03:52] <bjs> stealth_: I don't really understand your arguments,  you seem to like linters but a slightly larger linter you suddenly dislike because we label it a "typechecker"
[00:04:02] <bjs> what about running pytype? You don't even need to annotate the code? Is that also bad?
[00:04:13] *** Joins: Jefren (~Jefren@70.35.67.89)
[00:04:39] <jinsun> deniska: :D yes, I end up solving puzzles and never actually running my code sometimes
[00:05:02] <stealth_> deniska, or obsession!
[00:05:04] <bjs> stealth_: The more annotations you add, the more information the "linter" (typechecker) gets and can use, and the more situations it can warn about.
[00:05:36] <deniska> At some point the best way to annotate some quirky thing is just "don't"
[00:06:06] <jinsun> that is why you have the Any and object+cast cheats
[00:06:07] <stealth_> bjs, since its not enforced, types are bypass in actual running code
[00:06:10] <bjs> there are lots of cases where the annotations are very useful (for finding missing None checks and random TypeError's) and there are places where the trade-off with how much you need to annotate (or the impossibility of annotating the thing correctly) means it might be less useful
[00:06:17] <bjs> stealth_: yes just like a linter
[00:06:28] *** Joins: hudo_ (~hudo@62.68.20.210)
[00:06:47] <bjs> I mean you're happy to admit pylint is a useful tool, and can help the developer write better code that has fewer bugs.
[00:06:55] <bjs> So I don't understand your stance?
[00:08:11] <stealth_> bjs, you need it enforced or else its like memory overflow type of error.
[00:08:18] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[00:08:31] <bjs> stealth_: well yes if the developer writes type annotations but then doesn't run mypy, they don't get as much use out of it
[00:08:48] <bjs> I'm still not sure what your point is?  If you write annotations and then don't use the annotations then they don't help you
[00:08:56] <bjs> that's kind of obvious,  the benefit comes from writing them and then using them
[00:09:15] <bjs> are you arguing that Python *should* enforce them (e.g. that `python file.py` should auto-run mypy or something for you?)
[00:09:21] <stealth_> since its not enforced at the production level, whats the point? user will keep passing bad types
[00:09:32] <bjs> stealth_: what's the point of a linter?
[00:09:32] <jinsun> that is solved by shell aliases
[00:09:39] <bjs> stealth_: you can just not run the linter
[00:09:55] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[00:10:01] *** Quits: hudo_ (~hudo@62.68.20.210) (Client Quit)
[00:10:06] <aphysically> "there are places where the trade-off (...)" -> *cough* typeddict with several hundred unique items *cough*
[00:10:10] <stealth_> bjs linter help you, but you spending 5min writing code and 1hr dealing with typing/mypy isn't helping
[00:10:11] <aphysically> re: bjs
[00:10:14] <bjs> stealth_: if i  choose to not run a linter, i don't get the benefits of linting.  If I choose to not run a typechecker I don't get the benefits of typing.  I don't understand the point
[00:10:21] *** Joins: hudo (~hudo@62.68.20.210)
[00:10:53] <bjs> stealth_: sure there's a trade-off, some things are small effort for large gain and there are things that adding type annotations everywhere has diminishing returns.
[00:10:59] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[00:11:03] *** Quits: Payam (~Payam@138.106.57.132) (Ping timeout: 256 seconds)
[00:11:08] <deniska> Writing types out sucks the fun out of programming :P
[00:11:29] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[00:11:38] <aphysically> I'm having great fun :D
[00:11:39] <jinsun> making the liniter errors go away is more fun to me
[00:11:40] <bjs> But in general for "bug finding" tools that's always true,  you can ask the same question about testing and coverage tools and mutation tessting and property-based testing and model checking and verification
[00:11:45] <jinsun> than running my code
[00:11:46] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[00:11:59] <bjs> as you go up the chain you get more confidence but at a higher cost to the developer
[00:11:59] <aphysically> except when nobody has replied to my Final proposal yet :^(
[00:12:03] <stealth_> bjs its better to write normal python and compile your code with enforced type to make sure what you wrote and what user runs is enforced.
[00:12:27] <aphysically> huh?
[00:12:34] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Quit: philipp64|work)
[00:12:36] <stealth_> pyton + cython = win, win
[00:12:49] <bjs> stealth_: I really don't understand your objection here,  sure it might be better if the user *also* runs the typechecker.  But them choosing to not run the typechecker doesn't invalidate the usefulness of *you* running it
[00:12:53] <bjs> exactly.. .like... the.. linter.
[00:13:01] <aphysically> aren't there runtime enforcers of typehints?
[00:13:01] <jinsun> does cython enforce types at runntime?
[00:13:05] <stealth_> you get the best python code with typing in cyhton that actually improve your speed!!!!
[00:13:17] <aphysically> jinsun: I think your subtlety here was lost earlier
[00:13:22] <stealth_> with normal typing+mypy+whatever you are just wasting time.
[00:13:32] <bjs> stealth_: You run the linter to find dumb bugs in your code,  and typecheckers are just big linters that find even more bugs.  The "user" can choose to run these tools or not,  but they still get the benefits of a less buggy library
[00:13:46] *** Joins: DrunkenDwarf (~DrunkenDw@148.252.128.36)
[00:13:48] <bjs> stealth_: see I still don't understand, you're perfectly happy to accept linting as useful, even though the user doesn't run the linter themselves
[00:13:52] <bjs> but typecheckers *are linters*
[00:14:03] <stealth_> bjs, i get what you are saying, think about what i am trying to say with python + cython
[00:14:14] *** Joins: jancoow (~jancoow@user/jancoow)
[00:14:20] <deniska> cython is a different language for somewhat specific usecases
[00:14:33] <aphysically> that reminds me; mypyc is cool but a concern I have is the recommendation to type functions with generic collections.abc types everywhere possibly hurting it
[00:14:48] <bjs> stealth_: okay you're saying they could do *more* but that's always true, and it doesn't mean they're useless because they don't do things.
[00:15:09] <stealth_> deniska, well its python compiled into C where adding type information actually gives you a speed benefit
[00:15:13] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[00:15:22] <aphysically> (so is mypyc)
[00:15:33] <bjs> stealth_: sure some tools (like cython and mypyc) can possibly use the annotations to make more efficient code.  The fact CPython doesn't optimize based on the annotations doesn't remove the usefulness they have elsewhere
[00:15:50] <deniska> stealth_: last time I looked, it was a superset of python, with additional keywords and a different extended data model
[00:16:10] <bjs> stealth_: there's lots of potential benefits of running a typechecker on your code, even if the user does not and even if their runtime doesn't use the annotations for performance optimizations.
[00:16:38] <madduck> Is there still a concept of "new-style" classes, and deriving from "object" in py3?
[00:16:40] *** Joins: _xor (~xor@72.49.199.147)
[00:16:44] <jinsun> no
[00:16:45] <deniska> madduck: no
[00:16:47] <bjs> as they can help the developer (you!) write code that is better (less buggy, more clear documentation) etc.  Of course, there's a trade-off of how much information you put in vs how much comes out
[00:16:54] <madduck> thought so, thanks for clarifying.
[00:16:56] <bjs> madduck: all classes in python3 inherit from object automatically
[00:17:04] <KirkMcDonald> madduck: It's more that there's no concept of classic classes in Python 3.
[00:17:17] <bjs> madduck: so really all classes are "new-style" now,  there are no "old-style" ones :)
[00:17:37] <stealth_> bjs, you already get a proper type checker with cython
[00:17:39] <madduck> yeah. good!
[00:17:54] <bjs> stealth_: sure what's your point?
[00:18:00] <bjs> You seem to be arguing now that typecheckers are good and useful.
[00:18:30] <stealth_> bjs, its good if it was enforced! thus using something like cython give you that also speed.
[00:18:53] <bjs> stealth_: so are you arguing that CPython not inforcing the types means running mypy is useless or pointless in some way?
[00:18:57] <deniska> stealth_: what do you mean by "enforced"?
[00:19:03] <bjs> enforcing*
[00:19:07] <jinsun> how is cython enforcing it different from mypy enforcing it
[00:19:35] <madduck> so before I write a new base class for objects that are designed to hold rows of data with varying fields, and the base class would take care of storing, checking required fields are filled, and providing __getattr__, I am sure this has been written 1000 times already, and I wonder if there's code I better reuse?
[00:19:56] <bjs> madduck: a library like pandas?
[00:20:24] <stealth_> jinsun, you are shipping for compiled `.so` vs `.py`
[00:20:32] <madduck> I think that's probably a bit over the top in terms of pulling in the requirement just for this.
[00:20:42] <deniska> stealth_: just don't ship .py if it fails mypy check
[00:20:56] <stealth_> here you are doing extra work that actually gives you benefit
[00:20:57] <energizer> madduck: how do you want to reuse code without requiring any?
[00:21:07] <bjs> stealth_: but running mypy gives benefit too
[00:21:20] <bjs> on its own
[00:21:53] <stealth_> deniska, bjs, those 2 are not the same thing
[00:22:01] <bjs> stealth_: what do you mean?
[00:22:04] <bjs> What two things?
[00:22:10] <stealth_> mypy and cython
[00:22:13] <madduck> energizer: ;) I guess what I am trying to say is that if all I needed is a way to hold an IP address, I wouldn't pull in all of twisted either.
[00:22:13] <bjs> stealth_: yes we know
[00:22:18] <jinsun> also you have to type hint C extensions compiled with cython too, the cython hints are useless when using the compiled code
[00:22:30] *** Joins: orbatos (~orbatos@user/orbatos)
[00:22:42] <bjs> stealth_: you seem to be arguing that typing is "useless" unless it is used to do performance optimizations on your code?
[00:22:53] <bjs> and that all other uses are a "waste of time" ?
[00:23:04] <deniska> madduck: you're in luck today: https://docs.python.org/3/library/ipaddress.html
[00:23:16] <madduck> hah!
[00:23:18] <stealth_> bjs, mypy only give you type checker that you as a developer can check for bugs, but cython comipiled code is actually prevents bugs in production code as well
[00:23:32] <energizer> madduck: there are others like staticframe
[00:23:45] <bjs> stealth_: but isn't mypy preventing bugs too?  If mypy stops me introducing a bug in my library,  then that also stopped the bug being put into production
[00:24:05] <bjs> Right?
[00:24:10] <stealth_> bjs, maybe if you ran your proudct code using mypyp
[00:24:12] <stealth_> mypy*
[00:24:15] <bjs> stealth_: no even if I don't
[00:24:22] <stealth_> production*
[00:24:28] <bjs> stealth_: say I write a library, and you use that library. I run mypy, you don't.  You still benefit from me running mypy.
[00:24:29] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:24:38] <stealth_> bjs, no cause user can still supply wrong type
[00:24:46] <bjs> Because mypy found a bug in my code and I removed it.  This bug cannot appear in your program.
[00:24:49] <deniska> madduck: is your usecase working specifically with tabular data, or you just need a class to describe a single item of such data?
[00:24:49] <aphysically> awww, cannot use black with match/case using # fmt: off either :(; I guess that makes sense since it's a parsing problem
[00:25:08] <nedbat> aphysically: it's surprising to me that black is not ready for 3.10
[00:25:11] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[00:25:14] <bjs> stealth_: I don't understand. If I have a library, and I run mypy and find a bug in the library.  Then I fix the bug.  That helps all the users, even if they don't run mypy.
[00:25:38] <stealth_> bjs, you get that with speed with cython though!
[00:25:47] <aphysically> nedbat: I looked into it pretty deeply and they don't seem very close; the replacement parser discussion is in the planning stage
[00:26:04] <bjs> stealth_: but that's besides the point
[00:26:04] *** Joins: monkey_ (~user@181.114.17.106)
[00:26:07] <stealth_> bjs, mypy = win, cython = win, win, win.
[00:26:11] <bjs> stealth_: me using mypy, even if you don't, helps you too
[00:26:19] <bjs> it's beneficial to both of us
[00:26:23] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:26:40] <energizer> nedbat: Łukasz was release manager for 3.8 and 3.9, i think he deserves a vacation :)
[00:27:30] <aphysically> for software maintaining backward compatibility I guess it's fine I just wish I had a better workaround than commenting match/case blocks when running black
[00:27:35] <bjs> stealth_: if I ran mypy on requests or asyncio or twisted or something and it found a bug and I fixed the bug that would be beneficial to everyone, even those that don't run mypy.
[00:27:39] <nedbat> energizer: just seems odd considering black is under the PSF org, and isn't ready for the big new feature that's been in the works for months.
[00:27:55] <nedbat> energizer: what does it mean for a project to be in the psf GitHub org?
[00:27:58] <stealth_> bjs, its like we (python community) is going in this huge round about say and in the end going, o ya, cython! just use that.
[00:28:09] <bjs> stealth_: no we are not doing that
[00:28:26] <bjs> people are running mypy and pytype and others happily without any intention of running cython or anything like that, and are still getting benefit
[00:29:27] <energizer> nedbat: i think it means "uh oh kr almost sold requests for cash, we better figure something out"
[00:29:36] <stealth_> bjs, i are not arguing you don't get benefit with mypy, i am saying you get more with something like cython.
[00:29:39] <bjs> One can argue over how much effort/information you have to put in vs how much you get out,  and the trade-offs vs how much benefit you get from added confidence or bug finding
[00:29:40] <nedbat> energizer: what does that have to do with black?
[00:30:15] <bjs> stealth_: you *were* arguing there was no benefit though,  although you seem to have silently changed your mind :P
[00:30:57] <nedbat> stealth_, bjs: maybe we should pause, or at least restate standpoints?
[00:30:59] <stealth_> bjs, i said its useless since it isn't enforced!
[00:31:00] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[00:31:15] <bjs> stealth_: but mypy isn't enforced,  so you're saying it's useless? I'm confused :)
[00:31:19] *** ub is now known as ubert
[00:31:28] <nedbat> stealth_: this sounds like an unsupportable opinion
[00:32:13] <stealth_> well maybe someday you will get my point.
[00:32:26] <energizer> nedbat: https://twitter.com/llanga/status/1123980467911495680
[00:32:32] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[00:32:45] <bjs> stealth_: that sounds a bit patronizing,  can you explain your point better?  It's hard to understand because it sounds like you are saying mypy is useless because the end-users are not required to run it
[00:33:08] <nedbat> bjs: or we can all just put it on pause.
[00:33:34] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[00:33:42] <bjs> nedbat: energizer: is ambv still the "developer in residence" or whatever it's called?
[00:33:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:34:10] <nedbat> bjs: i think so
[00:34:30] <stealth_> bjs, well i wasn't really picking on mypy, i was talking more about typing/type-hinting, you can type your python code with cython and now you get typing+enforced+speed boost
[00:34:39] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:34:43] <nedbat> stealth_: cython sounds great
[00:35:04] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[00:35:06] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[00:35:25] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 260 seconds)
[00:35:46] *** Joins: stevea (~stevea@user/stevea)
[00:35:49] <stealth_> nedbat, not sure if you are being sarcastic! but main reason why i choose to use python vs something like c/c++ cause of cython.
[00:35:55] *** Quits: stevea (~stevea@user/stevea) (Read error: Connection reset by peer)
[00:36:01] <nedbat> stealth_: i am not being sarcastic. it sounds great.
[00:36:09] <stealth_> nedbat, cool
[00:36:18] <nedbat> stealth_: how does it enforce the typing?
[00:36:19] *** Quits: dudek (~dudek@185.150.236.103) (Read error: Connection reset by peer)
[00:36:44] *** Joins: dudek (~dudek@185.150.236.103)
[00:37:00] <stealth_> nedbat, well if you read about cython, it converts python code into C
[00:37:11] <nedbat> stealth_: ok, but C code doesn't enforce types
[00:37:29] <nedbat> or, it does it with static checking, which is the same as mypy
[00:37:32] <stealth_> nedbat, yes, cython is like c + python mix
[00:37:56] <stealth_> nedbat, sure static checking compiled into your code
[00:38:37] <nedbat> stealth_: do you agree that running mypy gives you the same type enforcement as cython?
[00:39:13] <stealth_> nedbat, only if you run your code with mypy which you don't ship in production code
[00:39:25] *** Joins: Vonter (~Vonter@user/vonter)
[00:39:28] <stealth_> there is no speed boost either.
[00:39:30] <nedbat> stealth_: i can't parse that.
[00:39:39] *** Gustavo6046 is now known as Several
[00:39:41] <nedbat> stealth_: let's set the speed boost aside, mypy doesn't claim to change speed.
[00:39:44] *** Several is now known as Gustavo6046
[00:39:50] <jinsun> you don't ship C compiler with the compiled C code either
[00:39:58] *** Joins: comet23 (~comet23@user/comet23)
[00:40:05] <comet23> hi
[00:40:25] <nedbat> stealth_: mypy and cython are the same in this respect: there's a step before running, when the types are checked.  Then you run the code, the types are not checked then.
[00:40:25] <jinsun> the type enforcement is done by the compiler not the compiled code
[00:40:29] <comet23> i would like to make a cli mortgage calculator that is clickable and has a gui
[00:40:41] <comet23> but the gui is in the terminal
[00:40:50] <nedbat> comet23: those are often called tui
[00:40:52] <grym> comet23: the canonical thing for this is urwid
[00:41:02] <nedbat> comet23: and the better thing is rich or textual
[00:41:44] <stealth_> jinsun, well you can't pass `-1` into `unsigned int` into a compiled cython code, it rill raise `OverFlow` error
[00:41:45] <comet23> oh wow sounds complicated... i'm working on my portfolio and i think a mortgage calculator is a good useful app to make
[00:42:06] <nedbat> stealth_: what makes it raise Overflow?
[00:42:22] <grym> ooo textual looks nice
[00:42:25] <comet23> thank you grym and nedbat
[00:43:00] <nedbat> stealth_: that sounds like something at run time is checking the range, which would be counter to the speed goal.
[00:44:06] <stealth_> nedbat, you will just have to read about cython
[00:44:16] *** Joins: wladimir (~doforlove@user/doforlove33)
[00:45:24] <nedbat> stealth_: cython says that Python value converted to a C value will check, but arithmetic will not.
[00:45:39] <energizer> nedbat: i'd phrase stealth_'s argument this way. a cython-compiled binary offers a constructive proof that the program was type-checked. a mypy-checked .py has no such proof, so you can't be sure your program has been checked
[00:45:52] <stewie925> hi guys, I have this list append dilemma:   I have `res = [[1]]`  and `pairs = [[2,3,], [4,5]]` -  how do I code to make res =  `[[1,2,3], [1,4,5]]`
[00:45:58] <nedbat> energizer: sure, and you can't be sure I ran my test suite before shipping.
[00:46:14] *** Quits: Narrat (~omnius@p200300df5f0b351206ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[00:46:46] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba) (Remote host closed the connection)
[00:47:02] <stewie925> correction : pairs would be `[[2,3], [4,5]]`
[00:47:07] * aphysically has mypy strict on CI
[00:47:07] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba)
[00:47:22] <nedbat> energizer: it's a bit far to say, "people shouldn't use mypy they should just use cython" (if that is what stealth_ is saying)
[00:47:27] <jinsun> stewie925: `[x + y for x in res for y in pairs]` ?
[00:47:46] <energizer> nedbat: i kinda like the argument tbh. programs could be shipped with not just certificates of who built & signed them but also certificates of their testing and type checking
[00:47:48] <madduck> deniska: tabular data. I have two types of spreadsheets with 3 sheets each, and I need to unify those, i.e. massage some data on either side so that the resulting records are the same independent of which spreadsheet they come from.
[00:47:50] <stewie925> jinsun: thank you, I will give that a try
[00:47:58] <stealth_> nedbat, i never said don't use mypy, i actually like the idea of mypy as well.
[00:48:23] <nedbat> stealth_: ok, then this goes back to me (and perhaps others) not knowing what stances people in this debate are taking.
[00:48:34] <aphysically> 😕
[00:49:39] <stealth_> nedbat, i am saying rather then using typing as only developer note, you can set the same type in cython that actually give you a lot of benefits
[00:49:56] <nedbat> stealth_: that sounds like, "why use mypy when you can use cython?"
[00:49:57] <jinsun> if it just about performance then most of the time it is not really worth it if you have to deal with a C compiler instead of nice python tools
[00:50:29] *** Joins: nomic (~nomic@185.192.69.208)
[00:50:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:50:39] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba) (Remote host closed the connection)
[00:50:47] <comet23> what's the easiest/best documented tui to use?
[00:51:07] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba)
[00:51:21] <KirkMcDonald> comet23: Probably Urwid.
[00:52:15] <nedbat> comet23: take a good look at textual. i think it will be easier than urwid
[00:52:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:52:32] <stealth_> nedbat, what you take away from my argument is up to you! all typing has its benefits.
[00:52:47] *** Quits: kmikita (uid461814@id-461814.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[00:52:47] *** Quits: josh_h (sid301834@id-301834.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[00:52:59] *** Quits: jtanner (sid194399@id-194399.helmsley.irccloud.com) (Ping timeout: 246 seconds)
[00:53:06] <aphysically> I should look into seeing if I can fix the race condition bug in rich that bothers me, but I worry that any potential fix would be invasive enough that the author would prefer own ideas
[00:53:07] *** Quits: hwrd (sid64402@id-64402.lymington.irccloud.com) (Ping timeout: 240 seconds)
[00:53:07] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 240 seconds)
[00:53:08] *** Quits: ross (sid305269@user/ross) (Ping timeout: 252 seconds)
[00:53:18] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 268 seconds)
[00:53:18] *** Quits: sharpertool (sid80151@id-80151.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:53:18] *** Quits: Venhal (sid515085@id-515085.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:53:18] *** Quits: pierrepaul (sid504261@id-504261.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:53:22] *** Quits: eichin (sid27120@id-27120.tinside.irccloud.com) (Ping timeout: 260 seconds)
[00:53:22] *** Quits: nocko (sid501219@user/nocko) (Ping timeout: 260 seconds)
[00:53:22] *** Quits: ziky (sid27087@user/ziky) (Ping timeout: 260 seconds)
[00:53:22] *** Quits: cmagina (sid286142@user/cmagina) (Ping timeout: 260 seconds)
[00:53:22] *** Quits: Pr0phet (sid505706@id-505706.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:53:22] *** Quits: boxrick (sid98261@id-98261.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:53:23] <nedbat> stealth_: ok, cython is great. mypy is great.
[00:53:23] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 250 seconds)
[00:53:23] *** Quits: Yhg1s (sid387777@python/psf/thomas) (Ping timeout: 250 seconds)
[00:53:26] *** Quits: arseru (uid515527@user/arseru) (Ping timeout: 245 seconds)
[00:53:27] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 240 seconds)
[00:53:29] *** Quits: Darkfoe (sid402081@id-402081.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[00:53:31] <stewie925> jinsun: thank you!
[00:53:33] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Ping timeout: 265 seconds)
[00:53:34] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[00:53:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:53:40] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (Ping timeout: 252 seconds)
[00:53:42] *** Quits: Freso (sid7914@libera/staff/metabrainz.user.Freso) (Ping timeout: 268 seconds)
[00:53:42] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:53:42] *** Quits: hjmcnew_ (sid86092@id-86092.tinside.irccloud.com) (Ping timeout: 268 seconds)
[00:53:49] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 250 seconds)
[00:53:50] *** Quits: llinguini (sid257922@id-257922.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:53:55] *** Quits: Tiago_Paolini (sid172748@id-172748.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:54:02] *** Quits: WhyNotHugo (sid269118@id-269118.hampstead.irccloud.com) (Ping timeout: 246 seconds)
[00:54:02] *** Quits: Gaurhoth (sid75085@id-75085.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[00:54:02] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 246 seconds)
[00:54:02] *** Quits: coldmountain (sid484352@id-484352.helmsley.irccloud.com) (Ping timeout: 246 seconds)
[00:54:05] *** Quits: fury (uid193779@id-193779.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[00:54:05] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 264 seconds)
[00:54:05] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 264 seconds)
[00:54:05] *** Quits: han-` (sid293063@id-293063.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[00:54:05] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (Ping timeout: 260 seconds)
[00:54:08] *** Quits: mindlesstux (sid18072@id-18072.lymington.irccloud.com) (Ping timeout: 250 seconds)
[00:54:08] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (Ping timeout: 250 seconds)
[00:54:16] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[00:54:16] *** Quits: ballingt (sid190590@id-190590.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[00:54:18] *** Quits: drmessano (drmessano@user/drmessano) (Ping timeout: 260 seconds)
[00:54:18] *** Quits: hogarius (hogarius@id-222644.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[00:54:18] <comet23> i hate how development gets very complicated very fast
[00:54:18] *** Quits: flagrama (sid145621@id-145621.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:54:27] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[00:54:34] <stealth_> jinsun, you as a user of the library isn't dealing with C compiler, normally the package developer takes care of it, all you are doing is `pip install stuff`
[00:54:34] *** Quits: JayDoubleu (sid339529@id-339529.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[00:54:34] *** Quits: liam (sid7517@id-7517.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[00:54:35] <grym> comet23: one of the timeless features of nature, i think
[00:54:40] *** Quits: dez (uid92154@user/dez) (Ping timeout: 252 seconds)
[00:54:41] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[00:54:41] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[00:54:41] *** Quits: dunc (sid16@id-16.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[00:54:41] *** Quits: seds (sid492514@user/seds) (Ping timeout: 250 seconds)
[00:54:44] *** Quits: AhmedAmerican (sid470527@id-470527.ilkley.irccloud.com) (Ping timeout: 246 seconds)
[00:54:44] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (Ping timeout: 246 seconds)
[00:54:44] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Ping timeout: 246 seconds)
[00:54:44] <stealth_> nedbat, yep
[00:54:46] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (Ping timeout: 260 seconds)
[00:54:46] *** Quits: Tips|Cloud (sid62231@id-62231.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[00:54:46] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 260 seconds)
[00:54:46] *** Quits: Evolver (sid32215@user/evolver) (Ping timeout: 260 seconds)
[00:54:47] *** Quits: hardwire (sid415742@id-415742.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[00:54:56] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[00:54:56] *** Quits: Knyght (sid365271@id-365271.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[00:54:56] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 268 seconds)
[00:54:56] *** Quits: mrproper (sid382572@id-382572.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:54:56] *** Quits: ericoc (sid179921@id-179921.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:55:09] *** Quits: jesse-s (sid98646@id-98646.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:55:09] *** Quits: jposer (sid132110@id-132110.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:55:14] *** Quits: Memory (sid459764@user/memory) (Ping timeout: 260 seconds)
[00:55:14] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[00:55:14] *** Quits: crazysim (sid86009@id-86009.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:55:17] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) (Ping timeout: 264 seconds)
[00:55:20] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[00:55:24] *** Joins: morgabra (sid500580@user/morgabra)
[00:55:25] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[00:55:25] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[00:55:26] *** Joins: Pr0phet (sid505706@hampstead.irccloud.com)
[00:55:26] *** Joins: Lvl4Sword_ (sid483043@user/lvl4sword)
[00:55:27] *** Joins: llinguini (sid257922@hampstead.irccloud.com)
[00:55:28] *** Joins: greyblue9_ (sid500829@ilkley.irccloud.com)
[00:55:33] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: circuitbone (sid355934@user/circuitbone) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: salimfadhley (sid31217@wikipedia/salimfadhley) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: rburton (rburton@user/rburton) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: johnny_ (sid481967@id-481967.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: altendky (sid135382@id-135382.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: matthewwilkes (sid500242@id-500242.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:55:33] *** Quits: MrNaz (sid133418@id-133418.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:55:33] *** Lvl4Sword_ is now known as Lvl4Sword
[00:55:33] *** Joins: JayDoubleu (sid339529@hampstead.irccloud.com)
[00:55:33] *** greyblue9_ is now known as greyblue9
[00:55:37] *** Joins: ormiret (sid314108@lymington.irccloud.com)
[00:55:39] *** Joins: dez (uid92154@user/dez)
[00:55:42] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba) (Ping timeout: 260 seconds)
[00:55:44] *** Joins: Memory (sid459764@user/memory)
[00:55:50] *** Quits: Memory (sid459764@user/memory) (Client Quit)
[00:55:52] *** Joins: eichin (sid27120@5.254.36.57)
[00:55:55] *** Joins: cmagina (sid286142@user/cmagina)
[00:55:57] *** Joins: drmessano (drmessano@user/drmessano)
[00:55:58] *** Joins: sa (sid1055@5.254.36.57)
[00:56:00] *** Joins: bn_work (uid268505@uxbridge.irccloud.com)
[00:56:03] *** Joins: ross (sid305269@user/ross)
[00:56:06] *** Joins: nicksloan (sid195124@user/nicksloan)
[00:56:09] *** Joins: seds (sid492514@user/seds)
[00:56:10] *** Joins: ericoc (sid179921@uxbridge.irccloud.com)
[00:56:26] *** Joins: shurane (sid132556@helmsley.irccloud.com)
[00:56:37] *** Joins: altendky (sid135382@hampstead.irccloud.com)
[00:56:38] *** Joins: Gaurhoth (sid75085@ilkley.irccloud.com)
[00:56:39] *** Joins: Tiago_Paolini (sid172748@hampstead.irccloud.com)
[00:56:39] *** Joins: johnny_ (sid481967@hampstead.irccloud.com)
[00:56:39] *** Joins: WhyNotHugo (sid269118@hampstead.irccloud.com)
[00:56:41] *** Joins: flagrama (sid145621@hampstead.irccloud.com)
[00:56:43] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[00:57:05] *** Joins: Venhal (sid515085@uxbridge.irccloud.com)
[00:57:08] *** Joins: hogarius (hogarius@uxbridge.irccloud.com)
[00:57:08] *** Joins: Evolver (sid32215@user/evolver)
[00:57:11] *** Joins: Darkfoe (sid402081@helmsley.irccloud.com)
[00:57:14] *** Joins: pierrepaul (sid504261@uxbridge.irccloud.com)
[00:57:14] *** Joins: rburton (rburton@user/rburton)
[00:57:15] *** Joins: EWDurbin (sid38710@5.254.36.57)
[00:57:17] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[00:57:19] *** Joins: ziky (sid27087@user/ziky)
[00:57:20] *** Joins: kmikita (uid461814@helmsley.irccloud.com)
[00:57:22] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[00:57:22] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[00:57:28] *** Joins: r0bby (r0bby@user/r0bby)
[00:57:36] <aphysically> comet23: you could go for something wild like notcurses (not often used at all in py ecosystem maybe)
[00:57:37] *** Joins: shawwwn (uid6132@helmsley.irccloud.com)
[00:57:41] *** Joins: nocko (sid501219@user/nocko)
[00:58:13] *** Joins: boxrick (sid98261@hampstead.irccloud.com)
[00:58:14] *** Quits: DrunkenDwarf (~DrunkenDw@148.252.128.36) (Quit: Leaving)
[00:58:31] *** Joins: hwrd (sid64402@lymington.irccloud.com)
[00:58:43] *** Joins: matthewwilkes (sid500242@uxbridge.irccloud.com)
[00:58:45] *** Joins: mindlesstux (sid18072@lymington.irccloud.com)
[00:58:49] *** Joins: Knyght (sid365271@helmsley.irccloud.com)
[00:58:51] *** Joins: coldmountain (sid484352@helmsley.irccloud.com)
[00:58:51] *** Joins: graingert (sid128301@5.254.36.57)
[00:58:52] *** Joins: jtanner (sid194399@helmsley.irccloud.com)
[00:58:52] *** Joins: josh_h (sid301834@helmsley.irccloud.com)
[00:58:52] *** Joins: holbrode (sid339826@5.254.36.57)
[00:58:53] *** Joins: bjs (sid190364@user/bjs)
[00:58:54] *** Joins: Freso (sid7914@libera/staff/metabrainz.user.Freso)
[00:58:54] *** Joins: TingPing (sid2800@helmsley.irccloud.com)
[00:58:55] *** Joins: jposer (sid132110@uxbridge.irccloud.com)
[00:59:02] *** Joins: BlueShark (sid10311@user/blueshark)
[00:59:03] *** Joins: liam (sid7517@helmsley.irccloud.com)
[00:59:48] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[00:59:50] *** Joins: jesse-s (sid98646@hampstead.irccloud.com)
[00:59:50] *** Joins: Tips|Cloud (sid62231@ilkley.irccloud.com)
[00:59:58] *** Joins: salimfadhley (sid31217@wikipedia/salimfadhley)
[00:59:58] *** Joins: LyndsySimon (sid34452@lymington.irccloud.com)
[01:00:09] *** Joins: braxas (sid508886@lymington.irccloud.com)
[01:00:11] *** Joins: Pent (sid313808@lymington.irccloud.com)
[01:00:23] *** Joins: dunc (sid16@uxbridge.irccloud.com)
[01:00:25] *** Joins: MrNaz (sid133418@uxbridge.irccloud.com)
[01:00:26] *** Joins: JacobFrost (sid494713@5.254.36.57)
[01:00:27] *** Joins: cliluw (~cliluw@47.147.80.149)
[01:00:28] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[01:00:32] *** Joins: fury (uid193779@helmsley.irccloud.com)
[01:01:06] *** Joins: AhmedAmerican (sid470527@ilkley.irccloud.com)
[01:01:11] *** Joins: hnOsmium0001 (uid453710@hampstead.irccloud.com)
[01:01:12] *** Joins: debnet (sid330295@python/afpy/debnet)
[01:02:24] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[01:02:50] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[01:04:07] <madduck> I am just going to subclass dict. I mean, why not…
[01:04:12] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:04:22] <grym> madduck: https://treyhunner.com/2019/04/why-you-shouldnt-inherit-from-list-and-dict-in-python/
[01:04:26] <grym> there are some reasons why
[01:04:30] <bjs> madduck: are you looking for an answer to "why not"? :P
[01:05:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[01:05:09] *** Quits: ubert (~Thunderbi@77.119.205.6.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[01:05:25] <grym> collections.UserDict is worth a look, i think
[01:05:54] <grym> (depending on what you need)
[01:06:09] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:06:41] *** Joins: crazysim (sid86009@id-86009.hampstead.irccloud.com)
[01:08:22] *** Quits: DanTheAutomator (~dantheaut@user/dantheautomator) (Ping timeout: 252 seconds)
[01:08:25] *** Joins: circuitbone (sid355934@user/circuitbone)
[01:08:25] <madduck> yeah
[01:08:32] <madduck> thanks guys, this is extremely helpful!
[01:08:38] <madduck> (guys and gals)
[01:08:55] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[01:09:01] *** Joins: han-` (sid293063@id-293063.helmsley.irccloud.com)
[01:09:12] *** Joins: arseru (uid515527@user/arseru)
[01:09:19] <grym> sure thing
[01:09:24] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[01:09:27] *** Joins: hardwire (sid415742@id-415742.uxbridge.irccloud.com)
[01:10:38] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[01:11:00] *** Quits: Jefren (~Jefren@70.35.67.89) (Ping timeout: 260 seconds)
[01:12:36] *** Joins: Jefren (~Jefren@206.253.157.205)
[01:13:03] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[01:14:55] *** Quits: dudek (~dudek@185.150.236.103) (Quit: Leaving)
[01:15:10] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 265 seconds)
[01:15:18] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[01:15:43] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[01:16:22] *** Joins: akk (~akk@75.161.146.115)
[01:18:14] *** Quits: gitly (~gitly@148.252.129.5) (Ping timeout: 245 seconds)
[01:20:02] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[01:20:10] <Dev0n> hey, if you use a gevent pool for celery, does it only really a server with 1 cpu core?
[01:20:21] *** Joins: gitly (~gitly@148.252.128.36)
[01:20:22] <Dev0n> need*
[01:20:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:21:56] *** Quits: bloody (~bloody@user/bloody) (Quit: WeeChat 2.8)
[01:21:59] *** Joins: DanTheAutomator (~dantheaut@user/dantheautomator)
[01:22:40] *** Joins: bloody (~bloody@user/bloody)
[01:23:39] *** Quits: vimart (~vimart@85.255.232.192) (Ping timeout: 245 seconds)
[01:25:14] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[01:25:41] *** Joins: emf_ (~emf@2620:10d:c090:400::5:fdfa)
[01:26:16] <comet23> nedbat there are no docs for textual and i'm a beginner =(
[01:27:37] *** Joins: pycurious (~Adium@user/pycurious)
[01:28:01] *** Quits: emf (~emf@2620:10d:c090:400::5:fdfa) (Ping timeout: 245 seconds)
[01:28:05] <aphysically> I just unliterally add typing_extensions as a dependency I guess?
[01:28:07] <aphysically> (if I want to use)
[01:28:13] *** Quits: Jefren (~Jefren@206.253.157.205) (Ping timeout: 252 seconds)
[01:30:09] *** Joins: Jefren (~Jefren@70.35.67.188)
[01:30:43] *** Joins: vimart (~vimart@85.255.232.192)
[01:30:58] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:4e8a:6c47:97fe:7092) (Ping timeout: 252 seconds)
[01:31:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[01:31:39] *** Quits: wladimir (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[01:31:54] <aphysically> it looks like mypyc isn't as smart about variable return type signatures as mypy itself
[01:32:21] <aphysically> maybe I shouldn't really be doing that anyway..I think I have a better solution
[01:33:41] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Remote host closed the connection)
[01:33:51] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[01:33:57] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[01:35:01] *** Quits: Jefren (~Jefren@70.35.67.188) (Ping timeout: 268 seconds)
[01:35:22] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Remote host closed the connection)
[01:35:28] *** Quits: hudo (~hudo@62.68.20.210) (Ping timeout: 265 seconds)
[01:37:02] *** Joins: Jefren (~Jefren@70.35.66.104)
[01:38:28] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:39:58] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[01:40:31] *** Quits: niemal (~niemal@user/niemal) (Ping timeout: 245 seconds)
[01:41:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:41:46] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Remote host closed the connection)
[01:41:55] *** Quits: Jefren (~Jefren@70.35.66.104) (Ping timeout: 252 seconds)
[01:42:50] *** Quits: emf_ (~emf@2620:10d:c090:400::5:fdfa) (Ping timeout: 260 seconds)
[01:43:03] <energizer> comet23: textual is very new so it might not have all the nice things like docs
[01:43:44] *** Quits: magla (~gelignite@55d40f0d.access.ecotel.net) (Quit: Stay safe!)
[01:44:08] <comet23> i read the docs for urwid and it looks way too complicated for me
[01:44:09] <energizer> comet23: urwid is old and shows its age
[01:44:26] *** Joins: emf (~emf@163.114.132.7)
[01:44:56] *** Joins: wladimir (~doforlove@user/doforlove33)
[01:45:18] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:45:34] *** Quits: hnOsmium0001 (uid453710@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:45:38] <comet23> energizer did you really just type 7 words in 2 seconds?
[01:45:43] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[01:46:02] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[01:46:05] *** Joins: Jefren (~Jefren@70.35.66.247)
[01:46:28] <energizer> comet23: i was already typing that before you said
[01:46:49] <comet23> oh i thought you read what i said and then typed all that i was like 0_0
[01:47:18] <stealth_> reading up on this mypyc, seems promising! will have to try it out someday
[01:47:21] <energizer> there are like 5 of these libraries, you can gooogle around for them
[01:47:39] <energizer> idk if any of them check all the boxes
[01:48:07] <comet23> i'm a beginner and i'm still not sure when to use super() in classes just that i saw it being used in examples
[01:48:18] <comet23> and all the code i've seen so far uses super()
[01:48:45] <comet23> i understand it imports the function from the parent class it inherited from but i just don't understand the use case for it
[01:49:07] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[01:49:16] <madduck> is it somehow possible to add a property to an instance during __init__?
[01:49:28] <energizer> madduck: do you mean an attribute
[01:49:36] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Remote host closed the connection)
[01:49:47] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[01:50:17] <madduck> well yeah, but I want the attribute to be computed on access
[01:50:19] <energizer> comet23: it's like, there's the general stuff that Widget.on_click() should do and then you customize it in MyWidget.on_click but you still want to do the generic stuff so you say def on_click(self): my_stuff(); super().on_click()
[01:50:28] <stealth_> comet23, https://www.pythonsheets.com/notes/python-new-py3.html?highlight=super#new-super
[01:50:38] <madduck> but I will not try any more with __getattr__, that stuff is evil ;)
[01:50:39] <energizer> madduck: so why dont you just use a method or property like normal
[01:50:49] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:51:12] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[01:51:20] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:51:27] <comet23> the other thing that i'm not understanding is when i import using super i don't have to add self as an argument
[01:51:33] *** Quits: Jefren (~Jefren@70.35.66.247) (Ping timeout: 265 seconds)
[01:51:36] <madduck> I want "foo.one" to return self.data['one'], but the set of names of attributes for which this should be possible is passed to __init__
[01:51:56] <energizer> comet23: that's just super magic
[01:51:59] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[01:52:53] <nedbat> comet23: ok, it's not ready yet. sorry about that.
[01:53:36] <comet23> no need to apologize nedbat i'm a beginner and all this stuff looks super complicated to me and i don't think it's a good idea to do this
[01:53:44] <comet23> thank you for helping
[01:54:55] <comet23> i had this idea and then i realized i was in way over my head =(  maybe i'll get to it later
[01:55:09] *** Joins: wladimir (~doforlove@user/doforlove33)
[01:55:12] <comet23> when i have more experience
[01:55:23] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Remote host closed the connection)
[01:55:30] *** Joins: whatsupdoc (~whatsupdo@148.64.18.1)
[01:55:30] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[01:55:32] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[01:55:57] <whatsupdoc> Hi there, can someone show me how to generate combinations of a list?
[01:56:22] <whatsupdoc> I have a random list of numbers [3,8,40, 24, 18]
[01:56:25] <vimart> What Python version are you on guys?
[01:56:38] <energizer> whatsupdoc: itertools has that
[01:56:43] <whatsupdoc> I want to select 3 of those numbers
[01:56:44] <madduck> can we call Py 3.11 "for Workgroups" please?
[01:56:51] <whatsupdoc> and generate all possible sums
[01:57:23] <madduck> whatsupdoc: whatsupdoc: itertools.combinations
[01:57:48] <comet23> i think he's doing homework like me
[01:58:00] <whatsupdoc> Me?
[01:58:00] <comet23> i think he wants to do it manually or reinvent the wheel or so to speak
[01:58:03] <vimart> whatsupdoc: look up itertools, best way way to do that things, and you'll amazed what more things it does too.
[01:58:11] <whatsupdoc> No.
[01:58:17] <whatsupdoc> Leetcode though lol
[01:58:26] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:58:41] <comet23> whatsupdoc leetcode is considered homework lol
[01:58:51] <vimart> comet23: it's nothing but in reinventing a wheel.
[01:59:03] <whatsupdoc> How would you even program this? I have no idea
[01:59:21] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[01:59:23] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Remote host closed the connection)
[01:59:29] <whatsupdoc> Cuz you would need a different amount of for loops depending on the number of items you need
[01:59:30] <aphysically> ../src/pyffstream/ffmpeg.py:57: error: Variable "typing_extensions.TypeAlias" is not valid as a type
[01:59:31] <vimart> whatsupdoc: that's the point of reinventing the wheel.
[01:59:33] <aphysically> huh I guess it doesn't work?
[01:59:34] *** Joins: nomic (~nomic@185.192.69.208)
[01:59:42] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[01:59:46] *** Quits: nomic (~nomic@185.192.69.208) (Client Quit)
[02:00:02] <aphysically> oh it's not supported https://github.com/python/mypy/issues/9404 derp
[02:00:15] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 265 seconds)
[02:00:40] <whatsupdoc> can anyone post the code that generates all subsets of size k of a list?
[02:00:41] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:2ca0:dd77:79c9:aedb) (Quit: Leaving)
[02:00:57] <comet23> we could but you wouldn't learn anything
[02:00:58] <madduck> that does sound like homework :)
[02:00:59] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[02:01:01] *** Joins: Jefren (~Jefren@208.104.190.60)
[02:01:06] <whatsupdoc> lol it's not homework
[02:01:11] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[02:01:12] <vimart> whatsupdoc: if you're not curious how the things work go look up itertools if you want to know the idea how at least it work behind start the thing and work for it.
[02:01:13] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:01:15] <whatsupdoc> i'm literally doing thisfor myself
[02:01:17] *** Joins: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba)
[02:01:21] <grym> whatsupdoc: itertools is your friend, then
[02:01:23] *** Joins: wladimir (~doforlove@user/doforlove33)
[02:01:27] <whatsupdoc> I know I will use itertools
[02:01:36] <whatsupdoc> I just want to know how it works behind the scenes
[02:01:41] <comet23> yes we get it but us giving you the answer won't help you later down the line
[02:01:41] <whatsupdoc> Instead of just blindly using a tool
[02:01:49] <grym> whatsupdoc: then go look up the impl in cpython
[02:01:50] <vimart> whatsupdoc: then think
[02:01:53] <whatsupdoc> comet23: Yes it will
[02:01:57] <whatsupdoc> I'm not an idiot
[02:02:05] <comet23> it won't actually i've been where you were before
[02:02:10] <vimart> whatsupdoc: nobody says you're
[02:02:19] <whatsupdoc> Just because you have a solution, doesn't mean I'm not going to take the time to understand it
[02:02:22] <whatsupdoc> It's faster that way
[02:02:25] <comet23> all it did was hinder my progress
[02:02:54] <comet23> what you want to do is create a working implementation first and then ask people how you can make it better
[02:03:13] *** Joins: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it)
[02:03:17] <vimart> whatsupdoc: think how could you personally aproach a problem and create a flowchart
[02:03:23] <jinsun> itertools docs have the equivalent python code also for most of the functions
[02:03:34] <whatsupdoc> Damn I could have googled this by now
[02:03:38] <grym> whatsupdoc: https://github.com/python/cpython/blob/main/Modules/itertoolsmodule.c#L2677  i mean, there you go
[02:03:42] *** Joins: XV8 (~XV8@2601:5cb:c001:50:c0e0:2ca5:895:347c)
[02:03:48] <grym> but being all fighty about things won't help you
[02:03:56] <nedbat> whatsupdoc: tbh, i don't know how itertools.combinations does its thing.  Sometimes it's fine to use it without knowing how the engine works.
[02:04:18] <comet23> ^
[02:04:20] <jinsun> https://docs.python.org/3/library/itertools.html#itertools.combinations
[02:04:21] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[02:04:21] <grym> (full disclosure: c is like line noise to me; i haven't the first clue how this works)
[02:04:22] <whatsupdoc> Hallelujah someone who doesn't just talk a bunch of trash
[02:04:43] <comet23> nobody here is talking trash we're trying to help you because we've been where you were
[02:04:47] <nedbat> whatsupdoc: we're all here in our free time.  take what you can from it.
[02:04:56] *** Joins: bukata (~lev@user/bukata)
[02:04:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[02:05:03] <comet23> and we can all agree that giving you the answer to this particular problem won't benefit you
[02:05:06] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[02:05:26] <mehwork> anyone khnow how i can sort this by 'x': myDict = {'item1': [{'y':1, 'x':4}], 'item2': [{'y':8, 'x':2}] } ?
[02:05:35] <whatsupdoc> Comet23 go solve the collatz conjecture
[02:05:49] <nedbat> whatsupdoc: let's talk about combinations
[02:05:50] <mehwork> so far i tried this sorted(myDict.items(), key=lambda e: e['x'])
[02:06:03] <mehwork> TypeError: tuple indices must be integers or slices, not str
[02:06:17] <nedbat> mehwork: .items() will give you ("item1", [{...}])
[02:06:22] <tmart> Are code snippets on the 3.10.0 doc pages in a non-fixed-width font for anyone else? example: https://docs.python.org/3.10/library/pathlib.html (Just updated my firewall rules, want to make sure I'm not blocking a needed stylesheet or something)
[02:06:31] <nedbat> tmart: we are working on that.
[02:06:39] <mehwork> nedbat: yeah i'm struggling with what to use in the lambda value
[02:06:40] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:06:40] *** Quits: Jefren (~Jefren@208.104.190.60) (Ping timeout: 252 seconds)
[02:06:43] <tmart> roger that. Thanks @nedbat
[02:06:46] <nedbat> tmart: https://github.com/python/python-docs-theme/pull/85
[02:06:48] *** Joins: fikran (~fikran@user/fikran)
[02:06:52] <whatsupdoc> Just use your brain and think hard enough and you'll be able to solve it
[02:06:57] <jinsun> ah yes I noticed the bad font too
[02:07:17] <nedbat> whatsupdoc: can we talk about combinations?
[02:07:39] <whatsupdoc> Oh and no point in looking at a numbers theory textbook because you should just reinvent number theory on your own
[02:07:42] <whatsupdoc> Otherwise that's cheating
[02:07:48] <nedbat> whatsupdoc: please stop
[02:08:01] <whatsupdoc> Don't ever use any refernce because that's cheating
[02:08:10] <comet23> whatsupdoc at least make an attempt at solving the problem that way we can know what gaps you have in your knowledge... it's really the best way forward for everyone
[02:08:17] <nedbat> comet23: you should stop also
[02:08:23] <comet23> yes sir
[02:08:23] <nedbat> comet23: read the room
[02:08:24] *** Joins: Jefren (~Jefren@70.35.66.193)
[02:08:28] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:08:35] <comet23> i'm just trying to help[
[02:08:47] <comet23> because i've been there i'll move onto pm
[02:08:53] <nedbat> comet23: we all are. it's an advanced skill to know when it's not helping.
[02:08:57] <nedbat> comet23: don't PM them.
[02:09:00] <whatsupdoc> "Go figure it out on your own without using any resources" is not help
[02:09:05] <mehwork> nedbat: since it gives me a tuple, do i hae to iterate it? I was able to do something else that sorted each individual list but i need the entired dict sorted
[02:09:15] <nedbat> whatsupdoc: it's time to take a deep breath and move on.
[02:09:31] <nedbat> mehwork: can you show us what result you want?
[02:09:39] <mehwork> nedbat: yes one sec
[02:09:50] <DanTheAutomator> mehwork, when you say sort by x, do you mean sort by the keys?
[02:09:54] *** Joins: nomic (~nomic@185.192.69.208)
[02:10:00] <mehwork> DanTheAutomator: the key 'x' yes
[02:10:03] *** Joins: Atque (~Atque@user/atque)
[02:10:24] <nedbat> mehwork: you don't mean keys. you want to sort by the values under the 'x' key
[02:10:33] <mehwork> i want {'item1': [{'y':8, 'x':2}], 'item2': [{'y':1, 'x':4}] }  to sort by the keys 'x' and end up like: {'item1': [{'y':8, 'x':2}], 'item2': [{'y':1, 'x':4}] }
[02:10:44] <mehwork> nedbat: er yes, by x's values i meant,s orry
[02:10:46] <nedbat> mehwork: why is it still a dict?
[02:10:50] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba) (Ping timeout: 260 seconds)
[02:11:25] <mehwork> nedbat: I want the exact same structure, just sorted
[02:11:50] <mehwork> hol on i probably messed something up, i'm beyhond fried after lunch crash
[02:12:00] <whatsupdoc> Oh I guess you can use recursion and generate the combinations pretty nicely
[02:12:04] <mehwork> i can't even type
[02:12:11] <bjs> whatsupdoc: did you see madduck's suggestion of itertools.combinations ?
[02:12:12] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[02:12:15] <whatsupdoc> https://i0.wp.com/algorithms.tutorialhorizon.com/files/2015/02/Print-All-Combinations-of-subset-of-size-K-from-Given-Array-1.png?resize=1024%2C372&ssl=1
[02:12:16] <nedbat> whatsupdoc: that would be a good way to do it.
[02:12:18] <madduck> Can I introspect the argument names of a function? Like for "def foo(bar, baz)", can I somehow get ['bar', 'baz'] ?
[02:12:35] *** Quits: jabberwock (~jessy@user/jabberwock) (Changing host)
[02:12:35] *** Joins: jabberwock (~jessy@idlerpg/player/jabberwock)
[02:12:48] <whatsupdoc> omg i know you can use itertools.combinations
[02:12:50] <bjs> madduck: yes, something like inspect.signature(...) is the easiest probably
[02:12:54] <habnabit_> madduck, yes and no. you can't, given an arbitrary function, know which arguments it will accept
[02:12:55] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:12:55] <grym> madduck: inspect.getargspec, i think
[02:12:58] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:13:00] <nedbat> madduck: https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
[02:13:30] <whatsupdoc> i should just leave to #algorithms lol
[02:13:33] <bjs> whatsupdoc: why not look at how it does it?
[02:13:43] <nedbat> bjs: the link has been provided
[02:13:49] <bjs> Okay
[02:13:53] <habnabit_> madduck, it's common to forward arguments from one function to another (especially in decorators), so it's not uncommon to get a function that accepts '*a, **kw'
[02:14:03] <nedbat> whatsupdoc: we can talk about it here. just know that people might give you suggestions different than you want.  roll with it.
[02:14:06] <comet23> whatsupdoc no you should attempt at writing an implementation and then post your code here so we can help you =)
[02:14:20] <habnabit_> madduck, also there are many more callable things which can't/don't report argspecs like that
[02:14:35] <bjs> nedbat: it's just the docs for itertools.combinations has "equivalent" code showing how it does it
[02:14:49] <nedbat> bjs: true
[02:15:29] <madduck> habnabit_: yeah, just trying to work within some constraints that won't easily let me do this I don't think.
[02:15:36] <comet23> https://stackoverflow.com/questions/5731505/where-can-i-find-source-code-for-itertools-combinations-function
[02:15:37] <habnabit_> madduck, do what?
[02:15:42] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:15:46] <madduck> habnabit_: use *args
[02:15:47] <nedbat> whatsupdoc: if you are looking for code that does the algorithm, there is Python code on the itertools page: https://docs.python.org/3/library/itertools.html#itertools.combinations
[02:15:56] <bjs> comet23: you don't need to do that, you just look at the docs and it shows you some example code of what it does underneath...
[02:16:03] <madduck> bjs, grym, nedbat: doesn't seem to be possible *from within* the function though
[02:16:16] <nedbat> madduck: you can use inspect anywhere
[02:16:17] <whatsupdoc> What does yield do in python?
[02:16:25] <comet23> bjs i solely rely on stackoverflow because docs are for people with phd level iqs =(
[02:16:25] <stealth_> bjs, whats you experience with mypyc?
[02:16:28] <nedbat> whatsupdoc: it produces the next value from a generator
[02:16:28] <habnabit_> madduck, if you need to know what arguments the function you're writing exepcts, scroll up ;)
[02:16:30] <bjs> stealth_: 0
[02:16:36] <madduck> nedbat: what is the name of the current function?
[02:16:50] <nedbat> madduck: there isn't a special name for it. You look at the def line, that's the name.
[02:17:06] <nedbat> madduck: won't that work?
[02:17:15] <stealth_> bjs, o
[02:17:22] <habnabit_> madduck, it's very odd to want to do this inspection from inside the function itself
[02:17:26] <habnabit_> madduck, is this for __init__?
[02:17:27] <DanTheAutomator> mehwork, I think you want something like sorted(md, key=lambda a: md[a][0]['x'])
[02:17:27] <bjs> whatsupdoc: it is just an efficient way to make many values, like building a list
[02:17:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:17:34] <bjs> whatsupdoc: if you want I can translate what it says there to make explicit lists?
[02:17:58] <madduck> habnabit_: yes. Yes, it's odd. I am probably doing this wrong.
[02:18:15] <habnabit_> madduck, well, explain it to us ;)
[02:18:16] <madduck> nedbat: within __init__, '__init__' is not defined.
[02:18:27] <nedbat> madduck: it's self.__init__
[02:18:40] <habnabit_> madduck, so really this whole time you just wanted to do `def __init__(self, x): self.x = x`
[02:18:59] <habnabit_> madduck, fortunately, that's a solved problem: https://www.attrs.org/en/stable/examples.html
[02:19:18] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[02:19:48] <mehwork> DanTheAutomator: thanks, i think tha'ts roughtly what i needed
[02:19:51] *** Joins: Sabinno (~Sabinno@75.26.52.152)
[02:20:16] <habnabit_> madduck, is every value a list with exactly one item?
[02:20:18] <bjs> whatsupdoc: here's the code from the itertools docs but using lists rather than yield https://bpa.st/MYZQ
[02:20:24] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:20:35] <Sabinno> What is the recommended way to use numpy in a script that requires root if pip will not allow installing as root?
[02:20:51] <madduck> habnabit_: almost. I just don't know the set of 'x' and its friends until called.
[02:20:58] <madduck> attrs is beautiful ;)
[02:20:58] <whatsupdoc> thanks bjs
[02:21:09] <madduck> habnabit_: I wouldn't know until runtime
[02:21:28] <habnabit_> madduck, https://docs.python.org/3/library/types.html#types.SimpleNamespace
[02:21:32] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: brb)
[02:21:34] <nedbat> Sabinno: you need to be root while doing matrix calculations?
[02:21:49] <habnabit_> mehwork, is every value a list with exactly one item?
[02:21:51] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[02:22:11] <Sabinno> nedbat: I need to be root for specific parts of the script and require numpy for a couple of things
[02:22:19] *** Joins: jimklo (~jimklo@097-093-003-026.res.spectrum.com)
[02:22:46] <habnabit_> Sabinno, usually you can get by with more granular permissions than the sledgehammer of "run as root"
[02:22:49] *** Quits: whatsupdoc (~whatsupdo@148.64.18.1) (Quit: Client closed)
[02:22:50] <nedbat> Sabinno: you can install packages somewhere else. you don't need to be root.  Make a virtualenv.
[02:22:52] <habnabit_> Sabinno, what things are you doing?
[02:23:06] <Sabinno> I'm utilizing the DNF API
[02:23:35] <Sabinno> One cannot (and should not) install packages without root
[02:23:56] <habnabit_> (... "should not"?)
[02:23:57] *** Quits: comet23 (~comet23@user/comet23) (Quit: Client closed)
[02:23:57] <nedbat> Sabinno: do you mean with root?
[02:24:04] <Sabinno> No
[02:24:08] <nedbat> Sabinno: also: https://dnf.readthedocs.io/en/latest/api.html doesn't define DNF at all :)
[02:24:10] <Sabinno> One cannot install packages without root access
[02:24:18] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:24:20] <habnabit_> Sabinno, sure you can
[02:24:20] <nedbat> Sabinno: you can
[02:24:43] <Sabinno> ...Then why can't I do it when running `dnf upgrade`?
[02:24:57] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[02:24:58] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[02:24:58] <Sabinno> Seems rather destructive to be able to upgrade system packages without root.
[02:25:16] <nedbat> Sabinno: you can install things without installing them into "the system".
[02:25:27] <nedbat> i didn't realize pip refused to install things as root.
[02:25:40] <nedbat> Sabinno: i don't know what DNF is
[02:25:42] <habnabit_> Sabinno, it's very common to install things per-user, especially in python
[02:25:42] <Sabinno> Oh, see, I'm needing to upgrade system packages. That's the whole point of my script.
[02:25:57] <Sabinno> DNF is Red Hat's package manager.
[02:26:19] <nedbat> Sabinno: can't you install your Python packages with DNF?
[02:26:32] <Sabinno> I'm not trying to install Python packages.
[02:26:46] <jinsun> numpy is python package
[02:27:01] <Sabinno> Let me run `dnf install numpy` and find out.
[02:27:23] <Sabinno> That doesn't work :p
[02:27:46] *** Joins: devios (~devios@75-166-173-50.hlrn.qwest.net)
[02:28:00] <jinsun> if the distro doesn't have the python package you can always build your own distro package
[02:28:12] <jinsun> but probably it is called python3-numpy ro something
[02:28:29] <Sabinno> I'm running dnf search numpy now lol
[02:28:44] <Sabinno> Jesus search is sloooowwww
[02:29:47] <nedbat> Sabinno: you asked about pip refusing to install packages as root.  that was about installing python packages, no?
[02:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[02:30:35] <Sabinno> I hopped into a root shell and tried to install pip; it complained that "you should not install pip as root"
[02:30:45] <Sabinno> I'm paraphrasing but that's the gist of it
[02:30:49] *** Joins: xa0s (~xa0s@mab.sdf.org)
[02:31:02] <nedbat> Sabinno: sounds like you should use dnf instead of pip
[02:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:16] <Sabinno> Yeah, still waiting for `dnf search` to finish.
[02:31:25] <habnabit_> Sabinno, you can make/use a venv as root if you need to
[02:31:33] *** Quits: bloody (~bloody@user/bloody) (Quit: WeeChat 2.8)
[02:31:33] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[02:31:56] <Sabinno> I'll look into that.
[02:32:07] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[02:32:07] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 252 seconds)
[02:32:08] <Sabinno> I don't really need to (or want to) program often. This is out of necessity alone
[02:33:01] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:33:04] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[02:33:07] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[02:34:41] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[02:35:00] *** Joins: ali1234 (~al@user/ali1234)
[02:35:55] *** Joins: Memory (sid459764@user/memory)
[02:37:04] *** Joins: nomic (~nomic@185.192.69.208)
[02:37:57] <Sabinno> That said
[02:38:08] <Sabinno> Why is this invalid syntax? :
[02:38:13] <Sabinno> `return [for row in csvreader.readrows]`
[02:38:23] <habnabit_> Sabinno, did you mean [row for for ..] ?
[02:38:24] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-28db-81e5-493b-2536.res6.spectrum.com) (Read error: Connection reset by peer)
[02:38:25] <habnabit_> er
[02:38:29] <habnabit_> [row for row ..]
[02:38:50] <Sabinno> I just want to return the whole CSV file as an array, so probably.
[02:39:01] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:eb8d:cfc2:863:4d53) (Quit: Leaving)
[02:39:05] *** Joins: bloody (~bloody@user/bloody)
[02:39:10] <Repiphany> readrows is also a function I presume, so you'd need ()
[02:39:42] <Sabinno> I actually didn't need it
[02:39:48] <Sabinno> just `csvreader` works
[02:39:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:39:56] <Sabinno> I guess reading rows is implied for a `csv.reader`
[02:40:05] <ska> I want to use a mocked side_effect (function) to a method, but I want to modify the passed in parameters.. Can i do that?
[02:40:23] <Sabinno> nedbat You were right. DNF got it.
[02:40:24] <habnabit_> ska, that's not really a mock, is it?
[02:40:31] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[02:40:42] <Sabinno> Thank you nedbat and habnabit_ you are IMMENSELY helpful
[02:40:43] <habnabit_> ska, mocks aren't very good anyway. just make a fake object and you can define methods to do whatever you want
[02:43:01] <dre> talking about mocks...
[02:43:15] <dre> is there any way I can mock an entire DB? ;D
[02:43:40] <habnabit_> dre, well, again, mocks aren't very good. there's a number of ways to do fake databases
[02:44:04] *** Quits: cdown (~cdown@31-131-247-200.ip252.fastwebnet.it) (Ping timeout: 252 seconds)
[02:44:11] <habnabit_> dre, if you're using sqlalchemy, it's common to use sqlite for this. you can set it to be a memory-only database
[02:44:32] <dre> I want to load up prod data, act on it, and instead of writing the results to the prod db ( which is very bad, and I use read-only access for that reason) -> i want to write to a fake DB. I don't care about the results, I'm actually just trying to trigger code paths and see what's causing breakage.
[02:44:37] *** Joins: semeion (~semeion@user/semeion)
[02:45:07] <habnabit_> dre, so make a local copy of it?
[02:45:13] *** Joins: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7136:d153:c8ad:1941)
[02:45:21] <dre> thanks, I'm using django and I did try and use a nice database router that reads from read-only and writes to local, but it got a bit tangled.
[02:45:47] *** Joins: jimklo_ (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba)
[02:45:47] <dre> the data is a bit too /relational/
[02:45:49] <habnabit_> dre, sure. use sqlite and populate the test database fixtures by subsetting the prod database
[02:46:18] <dre> yeah I gotta find a better way of making those fixtures
[02:46:22] <habnabit_> dre, there's tools which can sample a database down into something that's the same shape and relative orders of magnitudes of rows
[02:46:46] <dre> oh? i figured there might be something out there but I couldn't find something that worked.
[02:46:49] *** Quits: sartan (~sartan@user/sartan) (Remote host closed the connection)
[02:47:02] <dre> or seemed to be what I was looking for
[02:47:06] <habnabit_> dre, try searching for 'database subsetting
[02:47:10] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[02:47:11] *** Quits: emerent (~quassel@p200300cd5748555fba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[02:47:17] <dre> thanks :D
[02:47:24] <DanTheAutomator> dre, Can you clone the prod db? Then if debug=True use the connection to the clone.
[02:47:36] *** Joins: emerent (~quassel@p200300cd57485522ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:47:40] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[02:48:00] <DanTheAutomator> I do that with Postgres and Django frequently.
[02:48:02] <dre> DanTheAutomator, nope, too large; "subsetting" is the right idea, but it's a bit of a tangle so it might take work, tools
[02:48:25] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:48:54] <Memory> Habibis
[02:49:34] *** Quits: jimklo (~jimklo@097-093-003-026.res.spectrum.com) (Ping timeout: 252 seconds)
[02:51:11] *** Quits: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7136:d153:c8ad:1941) (Quit: WeeChat 3.3)
[02:51:59] <vimart> Isn't that Py10 just tells you what you could learn specifically about the problem in documentation?
[02:53:03] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:53:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 245 seconds)
[02:53:32] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[02:53:42] <mehwork> habnabit_: no, each value is a list with one or more items
[02:54:02] <habnabit_> mehwork, which 'x' would you sort if there's >1?
[02:54:07] *** Joins: redrum88 (~redrum88@user/redrum88)
[02:54:08] <vimart> from what I do see the biggest focus was to tell the programmer where the probem was made :-)
[02:54:30] <mehwork> habnabit_: there's only one key named 'x' in each
[02:54:39] <Sabinno> What is the difference between an array formatted as `[(thing, thing2), (thing3, thing4)]` vs `[[thing, thing2], [thing3, thing4]]` ?
[02:54:56] <Sabinno> Is there any difference at all?
[02:55:17] *** Joins: Wulf (~Wulf@user/wulf)
[02:55:25] <nedbat> Sabinno: the first is a list of tuples, the second is a list of lists.
[02:55:30] <avu> Sabinno: neither of those are arrays. One is a list containing two tuples, the other is a list containing two other list. The main difference between tuples and lists are that tuples are immutable
[02:55:40] <habnabit_> mehwork, if it's [{'y': 1}, {'x': 2}] then that[0]['x'] will fail
[02:55:42] <nedbat> Sabinno: depending on what you are doing, the might be interchangable
[02:55:43] <Sabinno> List is what I meant. My bad.
[02:56:13] *** Quits: guardian (~guardian@planet-d.net) (Ping timeout: 252 seconds)
[02:56:35] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[02:56:51] <Sabinno> So if I just wanted to compare the values of [thing, thing2] and (thing, thing2), would they be equal in the eyes of... Whatever I deicde to use to compare these lists?
[02:56:52] *** Joins: morteza24 (~morteza24@178.131.26.100)
[02:57:11] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 245 seconds)
[02:57:15] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[02:57:27] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:57:33] <nedbat> Sabinno: a tuple and a list will never compare as equal
[02:57:41] <Sabinno> Hmm.
[02:57:48] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[02:57:50] <nedbat> Sabinno: but you could use:  list(x) == list(y)
[02:58:01] <Sabinno> So type cast it into a list?
[02:58:12] <Sabinno> Idk what you mean by that.
[02:58:29] <nedbat> Sabinno: you can convert the value to a list
[02:58:36] <nedbat> Sabinno: list((1,2,3)) == [1,2,3]
[02:59:05] <mehwork> habnabit_: yeah, luckily there's always at least one 'x' but it could appear in any key order: [{'y': 0, 'x': 1}, {'x': 2, 'y': 3}]
[02:59:44] <Sabinno> How does that work if I never know the values of the list?
[02:59:44] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Remote host closed the connection)
[02:59:55] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[03:00:09] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[03:00:20] <Sabinno> AHA!
[03:00:21] <aphysically> jinsun: if a week or so goes by and nobody says anything about the Final thing I might ask Eric directly on the issue for thoughts/openness to me trying to implement it
[03:00:22] <nedbat> Sabinno: i don't understand the question.  i was just giving an example of converting a tuple to a list
[03:00:25] <habnabit_> mehwork, ok, so if it's present in all of the dicts in the list, how do you order by all of them?
[03:00:26] <Sabinno> I gotcha
[03:00:34] <Sabinno> My prior script was:
[03:00:42] <mehwork> habnabit_: still working on it
[03:00:45] <Sabinno> `def current_upgrade_candidates():
[03:00:46] <Sabinno>     return [(pkg.name, pkg.version) for pkg in base.sack.query().upgrades()]`
[03:00:55] <aphysically> dataclasses is in python and the scope is pretty narrow so I think I would be okay
[03:00:58] <habnabit_> mehwork, you don't know what it is you want?
[03:01:09] *** Quits: emf (~emf@163.114.132.7) (Ping timeout: 245 seconds)
[03:01:21] <Sabinno> I changed `(pkg.name, pkg.version)` to `[pkg.name, pkg.version]` and it became a list which is pretty much what I wanted
[03:01:31] <mehwork> habnabit_: i'm just doing it for learning purpose, haven't played with sort on this type of structure yet
[03:01:32] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:01:59] <mehwork> habnabit_: most of the tutorials i saw only sorted a list of dicts, not a dict of lists of dicts
[03:02:02] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[03:02:30] <habnabit_> mehwork, it's true; you can't sort a dict
[03:02:51] <habnabit_> mehwork, it's more like you're sorting a list of lists of dicts tho
[03:02:57] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Read error: Connection reset by peer)
[03:04:12] <mehwork> right
[03:05:18] <mehwork> i want the list part sorted, not the dict part
[03:05:21] <InPhase> habnabit_: {k:d[k] for k in sorted(d)}
[03:05:34] <habnabit_> InPhase, that's making a new dict
[03:05:52] <InPhase> A sorted one, yes.
[03:06:30] <habnabit_> InPhase, sure. you're sorting a thing that isn't a dict, then turning it back into one
[03:06:47] <mehwork> actually i do want the dict sorted, based a value that's in the list of dicts
[03:07:07] *** Quits: {HD} (~{HD}@86.106.121.213) (Remote host closed the connection)
[03:08:01] <mehwork> i guess i really want both sorted, let me try this again...
[03:08:12] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:08:51] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:08:52] <habnabit_> mehwork, so you want the lists ordered individually by their d['x'] and all the lists ordered by.. what? their min 'x'? max 'x'?
[03:09:35] <mehwork> { "item1": [{'x':4}, {'x':2}], "item2": [{'x':2}, {'x':1}] }  should become: { "item2": [{'x':1}, {'x':2}], "item1": [{'x':2}, {'x':4}] }
[03:10:38] <Gustavo6046> python -> x86
[03:11:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:12:34] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[03:13:23] *** Joins: {HD} (~{HD}@86.106.121.213)
[03:13:34] *** Parts: akk (~akk@75.161.146.115) (+++)
[03:14:03] <mehwork> habnabit_: i want the d['itemN'] part sorted by the lists x order, if possible
[03:14:15] <mehwork> the inner lists affecting the outer key order
[03:14:35] <habnabit_> mehwork, sure. but there's a number of ways for it to affect that order, which is why i asked
[03:15:11] <mehwork> habnabit_: you're right that there is a lot i have to consider here
[03:15:28] <habnabit_> mehwork, e.g. what about {item1: [{x: 2} {x: 3}], item2: [{x: 1}, {x: 4}]}
[03:16:50] <mehwork> yeah it doesn't really make sense what i want
[03:17:03] <Repiphany> Python dicts generally aren't meant to be sorted in-place
[03:17:10] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[03:17:15] <Repiphany> The only thing that's usually remembered is insertion order
[03:17:24] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 245 seconds)
[03:17:27] <mehwork> that's why i'm using sorted
[03:17:51] *** Joins: yobi (~yobi@122.173.27.250)
[03:18:29] <Repiphany> So you're clear that you're making a new dict with the desired insertion order and not sorting the starting one in-place
[03:18:36] *** Quits: morteza24 (~morteza24@178.131.26.100) (Quit: Leaving)
[03:18:43] *** Quits: Jefren (~Jefren@70.35.66.193) (Ping timeout: 252 seconds)
[03:19:29] *** Quits: zeden (~zeden@user/zeden) (Ping timeout: 245 seconds)
[03:20:06] <mehwork> does that mean all i should really be sorting here is the inner lists?
[03:20:39] <mehwork> since i don't want the outer item1, item2 sorted by alphabetical order
[03:20:40] *** Quits: Sabinno (~Sabinno@75.26.52.152) (Quit: Client closed)
[03:20:51] *** Joins: Jefren (~Jefren@70.35.67.253)
[03:21:47] <Repiphany> I'm just saying if you have `d = {'a': 1, 'b': 2}`, there is no built-in way to modify d so that it becomes `{'b': 2, 'a': 1}`
[03:21:56] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[03:22:04] <Repiphany> Modifying the values themselves is trivial
[03:22:40] *** Joins: Sabinno (~Sabinno@75.26.52.152)
[03:23:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:23:47] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[03:24:01] <Repiphany> There are other ways to iterate over the dict keys/items in whatever order you want without having sorted the dict
[03:24:48] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[03:24:54] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[03:25:54] *** Joins: zaquest (~notzaques@5.128.210.178)
[03:26:12] <Sabinno> Let's say I have two arrays in the format of `[[pkg, ver], [pkg, ver]]`... If I want to get a list of intersecting `pkg` and `ver`, how would I do that?
[03:26:36] <Sabinno> If I wrote it in pseudocode, I'd write it like:
[03:26:39] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[03:26:41] *** Quits: yobi (~yobi@122.173.27.250) (Quit: Leaving)
[03:27:29] <Sabinno> `[pkg in intersection(list1, list2)` or something
[03:27:42] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:27:47] <grym> Sabinno: set(list1).intersection(list2)
[03:27:55] <KirkMcDonald> Sabinno: Meaning every (pkg, ver) tuple that is present in both lists?
[03:28:48] <mehwork> habnabit_: i guess if i had: { item1: [{x: 3} {x: 2}], item2: [{x: 4}, {x: 1}] }
[03:28:50] <Sabinno> Hmm
[03:28:59] <Sabinno> "unhashable type: list" lmao
[03:29:03] <mehwork> habnabit_: i would only want: { item1: [{x: 2} {x: 3}], item2: [{x: 1}, {x: 4}] }
[03:29:04] <Sabinno> Weird
[03:29:22] <nedbat> Sabinno: you can't put lists into sets.   you can put tuples into sets
[03:29:32] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[03:29:34] <Sabinno> I'm not using tuples
[03:29:50] *** Quits: DanTheAutomator (~dantheaut@user/dantheautomator) (Ping timeout: 260 seconds)
[03:30:02] <nedbat> Sabinno: i know, but you could.
[03:30:15] <Sabinno> How do I type cast tuples?
[03:30:17] <Sabinno> E.g.
[03:30:25] <Sabinno> `return [row for row in csvreader]`
[03:30:44] <Sabinno> `[(row) for row...` doesn't work
[03:31:01] <nedbat> Sabinno: tuple(a_list) will make a tuple
[03:31:01] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[03:31:28] <grym> Sabinno: https://bpa.st/BDHQ  slightly unweildy
[03:31:33] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:35] <grym> works though
[03:31:48] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:33:18] <Sabinno> I just typecasted the `row`
[03:33:26] <Sabinno> using `tuple(row)`
[03:33:29] <mehwork> now i'm just trying to figure out how to make: { 'item1': [{'x': 3}, {'x': 2}], 'item2': [{'x': 4}, {'x': 1}] }  become sorted by 'x': { 'item1': [{'x': 2}, {'x': 3}], 'item2': [{'x': 1}, {'x': 4}] }
[03:33:32] *** Quits: bukata (~lev@user/bukata) (Ping timeout: 265 seconds)
[03:33:51] <mehwork> er not become sorted by 'x', but just sort 'x' in each item
[03:34:10] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[03:34:23] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[03:34:30] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 265 seconds)
[03:35:13] <KirkMcDonald> mehwork: for L in d.values(): L.sort(key=lambda x: x['x'])
[03:35:29] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:36:06] <mehwork> KirkMcDonald: hmm, i started with iteration and then thought maybe there's a shortcut to not iterate, by d.items and sorted key
[03:36:26] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Ping timeout: 265 seconds)
[03:36:35] *** Joins: HaMsTeRs (~Thunderbi@49.130.122.173)
[03:36:47] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[03:36:52] <mehwork> i want to keep the structure the same
[03:37:03] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[03:37:18] <mehwork> yours worked, i just need to play with it to really unrderstand. Thanks
[03:37:28] <KirkMcDonald> You're doing a thing to a bunch of things, iteration is going to be involved at some level.
[03:37:56] *** Joins: hrobj (~hrobj@nova-046-182-187-208.nat.novanet.is)
[03:38:18] <grym> Sabinno: well, you constructed a new tuple out of each element of the list
[03:38:21] <hrobj> hi o/
[03:39:02] <mehwork> KirkMcDonald: ok
[03:40:28] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[03:41:41] *** Joins: zeden (~zeden@user/zeden)
[03:42:26] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73) (Ping timeout: 256 seconds)
[03:42:50] <hrobj> ehm Im really sorry to ask a unicode question --- Im working with sqlalchemy  and it does a great job of mapping python3 utf8 strings to database and back.  However when using some special filtering methods in DB queries, like .filter( cast(Obj.aJsonField, String).contains("something utf8") )  it doesnt match on special utf8 chars) ) )
[03:42:52] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[03:43:14] <mehwork> KirkMcDonald: and i guess there's no reason to try to use sorted over sort in this case, since it would be more convoluted
[03:44:21] <hrobj> I think this will work fine,  if I filter with encoded strings..  i.e..     .contains( mystring.encode('utf-8') )
[03:45:45] <hrobj> however I notice in python this adds things like "b'.....'"   to the encoded string.... Im rather confused, and novice so please forgive me
[03:46:18] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:46:28] <hrobj> is there an easy way to strip or skip the b'....'  encapsulation
[03:47:19] <Sabinno> Here's what I don't understand. When I do `listoftuples1 == listoftuples2` , it returns True. But when comparing with `set.intersection`, the output is different
[03:47:19] <KirkMcDonald> mehwork: It's a question of whether you want to construct a new value that has been altered in this way, or to mutate the existing object in-place.
[03:48:01] <mehwork> KirkMcDonald: yeah. I think in this case mutating is probably better
[03:48:09] <mehwork> unless there's some other side-effect that can happen during it
[03:48:19] <Sabinno> I can prove this because I get a much different result when doing `len(listoftuples1)` vs `len(set(listoftuples1).intersection(listoftuples2))`
[03:48:30] <Sabinno> Even though the lists are literally identical
[03:49:31] <KirkMcDonald> Sabinno: Does the list contain duplicate items?
[03:50:04] <KirkMcDonald> Sabinno: The conversion to a set will eliminate the duplicates, which will change the length.
[03:50:23] <Sabinno> Aha!
[03:50:24] <Sabinno> That's it
[03:50:37] <Sabinno> There are multiple `kernel-headers` packages. (Weird?) But those are the dupes.
[03:51:20] <ano> is there a simple/modern way to edit text files in place? inb4: seek/flush
[03:52:09] <grym> ano: subprocess.run(['sed','-i',...  >:)
[03:52:35] <KirkMcDonald> ano: Generally it makes sense to write an entirely new file under a new name, then to rename it over the old file once you've finished writing it.
[03:53:50] <ano> KirkMcDonald: in case of big files it will reduce storage resource and slower
[03:54:20] <grym> (i'm only half kidding)
[03:54:22] <phy1729> but unless you're just swapping bytes, everything after the changed part has to be rewritten anyway
[03:54:50] <grym> or like 1/3 kidding...
[03:54:52] <KirkMcDonald> ano: One difficulty is that if the edit changes the length of the file, then you have to re-write everything following the edit anyway.
[03:54:57] <grym> i would absolutely shell out to sed in some cases
[03:55:18] <KirkMcDonald> ano: Writing to a new file and renaming also has the advantage of being atomic.
[03:55:31] *** Joins: williria (~someone@177.11.235.52)
[03:55:48] <KirkMcDonald> (Assuming the files are on the same filesystem and that filesystem isn't some weird thing that doesn't support atomic renames, like NFS.)
[03:56:17] *** Quits: williria (~someone@177.11.235.52) (Quit: WeeChat 2.8)
[03:56:47] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73)
[03:57:42] *** Quits: {HD} (~{HD}@86.106.121.213) (Ping timeout: 265 seconds)
[03:57:50] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:58:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[03:58:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:59:40] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:59:43] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[04:00:13] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[04:00:29] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Max SendQ exceeded)
[04:02:05] *** Joins: {HD} (~{HD}@86.106.121.213)
[04:03:20] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[04:04:31] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:04:44] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[04:05:11] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:05:57] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:06:57] <ano> phy1729: according to https://security.stackexchange.com/a/178453 it will be only partially rewritten
[04:08:12] *** Quits: flokuehn (~flokuehn@i5E86B3EB.versanet.de) (Ping timeout: 265 seconds)
[04:08:50] *** Joins: jonthesnow (~xizhendu@240e:404:8610:62b2:dadc::30c0)
[04:08:52] <ano> think it will takes much longer to save really big file after small change if file has to be fully rewritten
[04:09:39] <phy1729> That's what we said
[04:09:43] *** Joins: vicfred (~vicfred@user/vicfred)
[04:09:55] *** Joins: flokuehn (~flokuehn@i5e86b3fe.versanet.de)
[04:10:45] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[04:11:05] <habnabit_> ano, how large are these text files, and what kind of modifications are you making?
[04:12:20] <pipapipapipo> I can invoke pipenv shell from a regular terminal, but when I try to run it in visual studio code's terminal, I get "shell already activated"
[04:12:26] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[04:12:49] <ano> habnabit_: around ~1gb of sentences per line, change/fix/replace some words
[04:13:02] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73) (Ping timeout: 256 seconds)
[04:13:04] <pipapipapipo> but I can manually activate the shell if I put in the absolute path to the activate folder... how can I get a pipenv shell on the vs code terminal?
[04:13:37] <avu> pipapipapipo: are you sure it isn't right and it's not already activated?
[04:13:38] <habnabit_> pipapipapipo, sounds like it is already activated
[04:14:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:14:38] *** Joins: Fiji (~Fiji@user/fiji)
[04:14:47] <grym> ano: ok i'd def. use sed and awk for that
[04:15:12] *** Joins: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net)
[04:15:30] <pipapipapipo> if it's already activated, how do I get to the virtual shell in other terminal windows?
[04:15:48] <pipapipapipo> I remember always using `pipenv shell` to get that parenthesis indicating a virtual shell
[04:16:08] *** Joins: fikran (~fikran@user/fikran)
[04:16:51] <aphysically> ano: you mean in a way that guarantees the data is overwritten?
[04:17:12] <aphysically> I'm not entirely sure that's possible in userspace in general
[04:17:21] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[04:17:43] <habnabit_> pipapipapipo, did you try to use the shell as if it's already been activated?
[04:18:10] <aphysically> in fact I'm fairly confident it's not
[04:18:19] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:18:44] <hexology> i usually doe `pipenv run ...`
[04:18:47] <hexology> do*
[04:19:20] <hexology> e.g. i have a makefile target for `make test` -> `pipenv run pytest`
[04:19:41] <pipapipapipo> habnabit_: hm, I am able to access django-admin that I've installed using `pipenv install django`... but I also have django installed globally, so not sure if it's the global django or the virtual shell's django
[04:19:57] <habnabit_> pipapipapipo, python -c 'import django; print(django)'
[04:20:07] <aphysically> there are both filesystems that don't really provide a method and storage controllers that would make it impossible
[04:20:48] <pipapipapipo> habnabit_: ahh, I see now, django path is in the virtualenvs folder.
[04:20:52] <pipapipapipo> thank you
[04:21:01] <habnabit_> pipapipapipo, hooray
[04:21:34] <pipapipapipo> weird that it doesn't show the parenthesis, I suppose it doesn't show it if the virtual shell is already activated?
[04:21:52] <habnabit_> pipapipapipo, the parens are a weird artifact that don't mean anything important
[04:22:23] <hexology> if you already have a venv activated it will use the current one. or you can disable the prompt effect
[04:22:58] <habnabit_> pipapipapipo, the default activate script changes your shell prompt but does so in a very naieve way. it's unrelated to what activation actually does
[04:23:39] <hexology> and this is why i use `pipenv run` for everything when possible, i don't have to guess what scripts might have messed w/ my PATH
[04:23:54] <habnabit_> i don't recommend using pipenv at all, but w/e
[04:24:34] *** Joins: newpy (~newpy@2602:ffc6:200:ce:cdda:49c3:129a:15ef)
[04:25:31] *** Quits: Sabinno (~Sabinno@75.26.52.152) (Quit: Client closed)
[04:25:44] <pipapipapipo> I see, thanks for clarifying that! I'm following along with a django tutorial that uses pipenv. What alternative to pipenv would you suggest?
[04:26:31] <habnabit_> pipapipapipo, poetry
[04:30:29] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:32:08] *** Joins: HaMmY1 (~Thunderbi@49.130.21.237)
[04:33:23] *** Joins: elkclone (~elkclone@user/elkclone)
[04:33:26] *** Joins: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[04:33:32] *** Joins: hornpoint (~hornpoint@104.254.15.128)
[04:33:34] *** Quits: HaMsTeRs (~Thunderbi@49.130.122.173) (Ping timeout: 252 seconds)
[04:33:34] *** HaMmY1 is now known as HaMsTeRs
[04:33:37] *** Joins: aknot (~aknot@2603:900a:1503:17bb:9870:f982:d544:bc0f)
[04:35:07] *** Joins: vlm (~vlm@user/vlm)
[04:36:27] *** Quits: hrobj (~hrobj@nova-046-182-187-208.nat.novanet.is) (Quit: Client closed)
[04:37:47] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[04:41:46] *** Quits: hornpoint (~hornpoint@104.254.15.128) (Quit: Leaving)
[04:43:32] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:a846:19fa:b088:c5c1)
[04:46:46] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[04:46:46] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:46:57] *** Quits: k162_ (~k162@user/k162) (Quit: BitchX: [v0.2.1])
[04:47:10] *** brabrax_ is now known as brabrax
[04:47:44] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:47:52] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[04:49:05] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[04:49:14] *** Joins: srhm (~srhm@user/srhm)
[04:49:23] *** Joins: nomic (~nomic@185.192.69.208)
[04:50:07] <aphysically> err
[04:50:40] *** Leonarbro_ is now known as Leonarbro
[04:51:48] *** Quits: nomic (~nomic@185.192.69.208) (Client Quit)
[04:51:53] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[04:55:44] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[04:57:44] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:57:52] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:58:14] *** Joins: nomic (~nomic@185.192.69.208)
[04:58:21] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:58:47] *** Quits: XV8 (~XV8@2601:5cb:c001:50:c0e0:2ca5:895:347c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:00:24] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Quit: WeeChat 3.2.1)
[05:05:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[05:07:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:08:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:08:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:13:01] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[05:13:55] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[05:14:47] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 246 seconds)
[05:16:33] *** Quits: hacksword (~hacksword@173.244.209.142) (Quit: stuff)
[05:17:23] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[05:17:25] *** Joins: SteveR (~SteveR@192.146.154.3)
[05:18:40] *** Quits: introom (~introom@li699-62.members.linode.com) (Quit: WeeChat 3.3)
[05:19:02] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[05:22:25] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[05:24:05] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 265 seconds)
[05:27:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[05:27:31] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[05:28:03] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[05:28:23] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[05:29:41] *** Joins: SlaveGeek334269 (~root@li2114-242.members.linode.com)
[05:30:05] *** Parts: SlaveGeek334269 (~root@li2114-242.members.linode.com) ()
[05:30:57] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[05:30:59] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 265 seconds)
[05:31:26] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:32:06] *** Seto_Kaiba is now known as Hunterkll
[05:35:47] *** Joins: HaMmY1 (~Thunderbi@121.202.34.194)
[05:35:52] *** Quits: HaMmY1 (~Thunderbi@121.202.34.194) (Client Quit)
[05:36:09] *** Quits: HaMsTeRs (~Thunderbi@49.130.21.237) (Ping timeout: 245 seconds)
[05:40:08] *** Quits: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[05:50:45] *** Joins: emf (~emf@2620:10d:c090:400::5:4a32)
[05:52:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 265 seconds)
[05:55:06] *** Quits: emf (~emf@2620:10d:c090:400::5:4a32) (Ping timeout: 245 seconds)
[05:56:47] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:00:19] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[06:01:52] *** Joins: trace987 (~trace@95.90.106.112)
[06:01:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[06:02:19] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[06:02:40] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[06:02:43] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Remote host closed the connection)
[06:03:14] *** Joins: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr)
[06:04:30] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[06:05:14] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:06:52] *** Joins: _abrantesasf_ (~abrantesa@187.36.170.211)
[06:06:56] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[06:07:14] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 265 seconds)
[06:08:24] *** Quits: shawwwn (uid6132@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:12:05] *** Quits: _abrantesasf_ (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:16:29] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[06:17:42] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[06:18:26] *** Quits: aknot (~aknot@2603:900a:1503:17bb:9870:f982:d544:bc0f) (Ping timeout: 245 seconds)
[06:23:23] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[06:23:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:25:28] *** Joins: fikran (~fikran@user/fikran)
[06:25:57] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[06:27:45] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:31:13] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[06:34:10] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[06:34:34] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73)
[06:36:45] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:5519:f432:c2f4:a9f3)
[06:37:03] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[06:39:16] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:39:22] <foo> I wrote a CLI app to send a message with Twilio. I was asked to include media in the text message... which is different with a CLI app. It requires a place to host the image. I suppose I could have someone upload an image to a service somewhere and link it
[06:44:28] *** Quits: aphysically (~aphysical@user/aphysically) (Remote host closed the connection)
[06:44:49] *** Joins: aphysically (~aphysical@user/aphysically)
[06:45:29] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[06:45:38] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:45:51] *** Joins: nomic (~nomic@185.192.69.208)
[06:46:13] *** Quits: aphysically (~aphysical@user/aphysically) (Remote host closed the connection)
[06:46:33] *** Joins: aphysically (~aphysical@user/aphysically)
[06:47:00] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[06:47:00] *** jmiehe1 is now known as jmiehe
[06:48:01] *** Quits: junktext (~junktext@77.247.181.212) (Ping timeout: 245 seconds)
[06:48:40] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[06:53:54] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[06:54:53] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[06:55:34] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[06:56:34] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[06:56:48] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[06:58:17] *** Quits: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[07:00:07] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:00:45] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:01:14] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[07:04:04] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:05:13] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:05:41] *** Joins: relight (~relight@user/relight)
[07:06:06] *** Quits: sunyour (~sunyour@129.226.182.99) (Quit: WeeChat 3.1)
[07:06:26] *** Joins: sunyour (~sunyour@129.226.182.99)
[07:07:03] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:08:32] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:09:33] *** Joins: whatsupdoc (~whatsupdo@148.64.18.72)
[07:10:05] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:10:24] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73) (Ping timeout: 256 seconds)
[07:11:55] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:16:23] *** Joins: barzo (~barzo@31.177.222.75)
[07:20:26] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:20:55] <madduck> have you heard of a placeholder type for Python, i.e. you can call set(obj) on an instance, and the instance replaces itself with obj? I remember such a concept from C++ and was keen on trying something out.
[07:21:39] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:23:20] *** Quits: newpy (~newpy@2602:ffc6:200:ce:cdda:49c3:129a:15ef) (Quit: Leaving)
[07:23:29] *** Quits: relight (~relight@user/relight) (Quit: Konversation terminated!)
[07:24:41] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:26:31] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:26:40] *** Quits: Jefren (~Jefren@70.35.67.253) (Ping timeout: 260 seconds)
[07:26:50] *** Joins: audiobirb (~audio@cpe-24-27-99-134.tx.res.rr.com)
[07:28:17] *** Joins: Jefren (~Jefren@70.35.67.42)
[07:28:51] <habnabit_> madduck, not exactly. what would it mean to call methods on the instance when it was still a "placeholder"?
[07:29:12] <madduck> ideally it would behave like None
[07:29:16] *** Quits: audio (~audio@2603-8081-1800-1546-2f35-9681-dd0e-8587.res6.spectrum.com) (Ping timeout: 245 seconds)
[07:29:24] <mehwork> is there a datetime library in python that has the ability to parse in one format and locale and output in another?
[07:29:41] <habnabit_> madduck, sounds like you can just do `x = None` and then `x = obj`
[07:29:43] <madduck> mehwork: dateutil.parser?
[07:30:06] <madduck> habnabit_: for reasons, I do not want __setattr__ to be called
[07:30:24] <habnabit_> madduck, eh? the example i gave doesn't have any attributes
[07:30:34] *** Quits: whatsupdoc (~whatsupdo@148.64.18.72) (Quit: Client closed)
[07:30:44] <madduck> yeah, but I need it as an instance variable
[07:30:54] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:30:55] <mehwork> madduck: i can try that, i know strptime crapped out on it
[07:31:27] <habnabit_> madduck, ok, then what's this __setattr__ restriction
[07:32:01] <mehwork> madduck: for example, i want this to parse in de_DE: 'May 10 2019'
[07:32:59] <madduck> it's an immutable object, so __setattr__ prevents it. But there are attributes in derived classes that can and should be set later
[07:33:09] <madduck> so I want a placeholder for them.
[07:33:17] <habnabit_> madduck, sounds like it's not really immutable then
[07:33:29] <madduck> nope
[07:33:45] <habnabit_> madduck, so.. why pretend it is? ;)
[07:34:20] <madduck> that is a question for the person who wrote this code
[07:34:58] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:15] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:53] <madduck> I seem to remember there was some black magic Python code that morphed a wrapper object into the object it wrapped.
[07:37:28] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:39:18] *** Joins: p-i- (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th)
[07:41:17] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[07:41:41] <madduck> I think there is some deity that will kill kittens for this: https://scratch.madduck.net/2021-10-08-171114-paste
[07:41:43] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:41:58] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[07:42:22] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th)
[07:43:21] *** Joins: comet23 (~comet23@user/comet23)
[07:43:33] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:43:36] <comet23> if i make a tui game can it play music?
[07:45:17] *** Quits: jimklo_ (~jimklo@2600:6c52:6f00:ae5f:1d93:a562:6898:bcba) (Quit: Leaving...)
[07:45:28] <mehwork> madduck: thanks that worked
[07:45:42] *** Quits: p-i- (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th) (Ping timeout: 265 seconds)
[07:46:36] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:48:25] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:49:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[07:50:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:53:10] <mehwork> is 'arrow' or any 3rd party datetime library worth using in python, or just stdlib
[07:55:06] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:55:59] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[07:58:01] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-9006-d8f2-cc1e-b078.res6.spectrum.com) (Ping timeout: 245 seconds)
[07:58:25] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[07:59:38] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:01:24] <Wulf> mehwork: I sometimes use dateutil, e.g. for dateutil.tz.local
[08:01:26] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[08:01:42] <Wulf> s/local/tz&/
[08:02:04] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:03:17] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:03:20] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[08:03:26] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 245 seconds)
[08:03:39] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:03:50] <Wulf> dateutil.parser.parse is also handy for common formats
[08:03:51] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 245 seconds)
[08:04:05] *** Joins: pycurious (~Adium@user/pycurious)
[08:04:35] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[08:05:59] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[08:06:19] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:06:30] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:07:17] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:08:09] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:08:33] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[08:10:35] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:10:49] *** Joins: pycurious (~Adium@user/pycurious)
[08:11:10] <mehwork> is pytest good enough to test modern apps that do async/await, asyncio, stuff or is there a better testing lib?
[08:11:48] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:15:26] *** Joins: alzgh (~alzgh@user/alzgh)
[08:17:24] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[08:18:38] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:19:54] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[08:20:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:20:37] *** Quits: ckdCreations (~ckdCreati@147.55.130.32) (Read error: Connection reset by peer)
[08:20:53] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:23:19] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:23:58] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:25:11] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:25:14] <energizer> mehwork: yes but i'd suggest trio over asyncio
[08:26:25] <habnabit_> madduck, especially if you're mucking with someone else's __attributes__, there's probably a better way
[08:26:39] *** Joins: guardian (~guardian@planet-d.net)
[08:29:11] *** Joins: chamgry (~chamgry@user/chamgry)
[08:30:00] *** thursdaylark is now known as thurstylark
[08:31:02] *** Quits: sbrown2 (~sbrown@66.44.16.44) (Quit: Leaving…)
[08:31:13] *** Joins: stranac (~stranac@195.29.239.126)
[08:31:43] *** Quits: baltazar (~baltazar@92-249-212-113.pool.digikabel.hu) (Ping timeout: 252 seconds)
[08:32:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[08:33:16] *** Joins: pradhvan (~pradhvan@dgplug/pradhvan)
[08:33:29] *** Joins: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu)
[08:33:34] *** Quits: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[08:34:19] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:34:48] *** Joins: fikran (~fikran@user/fikran)
[08:36:08] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:37:53] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[08:39:11] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:40:48] *** Quits: y1n-v1 (~y1n@77.119.208.211.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[08:41:00] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:45:15] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[08:46:28] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:48:18] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:48:51] *** Joins: Saurabh (~Saurabh@103.87.59.222)
[08:50:02] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:a846:19fa:b088:c5c1) (Read error: Connection reset by peer)
[08:50:57] *** Quits: LiftLeft (~LiftLeft@102.165.16.193) (Ping timeout: 265 seconds)
[08:51:57] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[08:53:06] *** Joins: pycurious (~Adium@user/pycurious)
[08:53:10] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[08:57:43] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[08:59:12] *** Quits: comet23 (~comet23@user/comet23) (Ping timeout: 256 seconds)
[09:01:03] *** Joins: me-sudoer-dentne (~me-sudoer@2405:204:549a:c220:66d4:682d:c966:b6f6)
[09:01:04] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:01:24] *** Joins: upsala (~zcb@185.213.155.160)
[09:02:54] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:03:14] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[09:03:35] *** Joins: oakridge (~oakridge@user/oakridge)
[09:03:47] *** Parts: oakridge (~oakridge@user/oakridge) ()
[09:04:20] *** Quits: upsala (~zcb@185.213.155.160) (Client Quit)
[09:04:40] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[09:05:07] *** Joins: upsala (~zcb@185.213.155.160)
[09:05:56] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:07:24] *** Quits: jazz-o-lantern (~jaziz@172.58.19.25) (Ping timeout: 245 seconds)
[09:07:46] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:09:46] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Read error: Connection reset by peer)
[09:10:12] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:11:25] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:11:51] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[09:11:59] *** Quits: barzo (~barzo@31.177.222.75) (Ping timeout: 245 seconds)
[09:12:04] <The-Compiler> mehwork: there's https://pypi.org/project/pytest-asyncio/
[09:13:12] *** Quits: gitly (~gitly@148.252.128.36) (Ping timeout: 268 seconds)
[09:14:40] *** Joins: gitly (~gitly@148.252.132.20)
[09:18:06] *** Joins: ubert (~Thunderbi@91.141.46.27.wireless.dyn.drei.com)
[09:19:20] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:21:09] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:22:10] *** Joins: foozle (~foozle@2001-b011-c001-50f7-d8e8-416e-43e4-6f21.dynamic-ip6.hinet.net)
[09:24:12] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:24:24] *** Quits: cursey (~cursey@136-26-145-118.cab.webpass.net) (Changing host)
[09:24:24] *** Joins: cursey (~cursey@user/cursey)
[09:26:01] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:26:13] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:27:30] *** Joins: pycurious (~Adium@user/pycurious)
[09:27:47] *** gegensch1in is now known as gegenschein
[09:29:03] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:30:42] *** Joins: dvx (~dvx@185.63.97.64)
[09:30:53] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:30:58] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:31:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[09:32:26] *** Joins: swensson (~swensson@213.88.131.10)
[09:33:30] *** Joins: ice9 (~ice9@user/ice9)
[09:33:43] *** Joins: mrwick (~mrwick@user/mrwick)
[09:33:55] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:35:45] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:36:57] *** Joins: HaMsTeRs (~Thunderbi@49.130.26.236)
[09:38:16] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 252 seconds)
[09:38:47] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:39:00] *** Joins: aphysically (~aphysical@user/aphysically)
[09:40:37] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:42:20] *** Quits: chamgry (~chamgry@user/chamgry) (Quit: WeeChat 2.8)
[09:42:21] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:44:25] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:44:33] *** Joins: mei (~mei@user/mei)
[09:46:05] *** Quits: HaMsTeRs (~Thunderbi@49.130.26.236) (Ping timeout: 260 seconds)
[09:46:47] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:18] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:47:29] *** Joins: seednode1 (~seednode@user/seednode)
[09:48:19] *** Joins: manti7 (~manti7@176.10.104.94)
[09:48:27] *** Joins: kosh (~kosh@user/kosh)
[09:49:08] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:49:50] *** Joins: df_data (sid466269@ilkley.irccloud.com)
[09:50:44] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 245 seconds)
[09:50:52] *** Quits: swensson (~swensson@213.88.131.10) (Quit: Ping timeout (120 seconds))
[09:51:22] <df_data> Test
[09:52:04] *** Joins: mexen (uid495612@user/mexen)
[09:52:10] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[09:52:29] *** Joins: swensson (~swensson@213.88.131.10)
[09:54:00] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[09:54:16] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[09:54:39] *** Joins: cheater (~Username@user/cheater)
[09:55:30] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[09:55:32] *** Joins: pabs3 (~pabs3@user/pabs3)
[09:55:47] *** Quits: mertsas (~martin@ti0185q160-2775.bb.online.no) (Remote host closed the connection)
[09:56:12] *** Quits: gitly (~gitly@148.252.132.20) (Ping timeout: 265 seconds)
[09:56:24] <pabs3> is there a Python packaging tool that makes it easy to put a script in sbin instead of bin? (and that allows people to override that with an option)
[09:56:38] *** Quits: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com) (Quit: leaving)
[09:57:31] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:7eb7:2ebc:285:ce97)
[09:58:00] *** Joins: gitly (~gitly@148.252.129.25)
[09:58:15] *** Quits: swensson (~swensson@213.88.131.10) (Quit: Client closed)
[10:00:16] *** Quits: botfather (~botfather@shell2.dds.nl) (Remote host closed the connection)
[10:00:33] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 265 seconds)
[10:01:12] *** Joins: swensson (~swensson@213.88.131.10)
[10:01:15] *** Joins: pycurious (~Adium@user/pycurious)
[10:01:22] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:01:25] <thm> not sure there is. see also this lengthy discussion: https://mail.python.org/pipermail/distutils-sig/2013-December/023168.html
[10:02:33] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[10:04:21] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:05:46] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[10:06:10] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:07:01] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73)
[10:07:12] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:07:46] *** Quits: swensson (~swensson@213.88.131.10) (Ping timeout: 256 seconds)
[10:08:46] <rindolf> df_data: toast
[10:09:13] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:11:02] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:11:23] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:11:36] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[10:11:47] *** Quits: vimart (~vimart@85.255.232.192) (Ping timeout: 268 seconds)
[10:13:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:14:05] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:14:12] *** Quits: Saurabh (~Saurabh@103.87.59.222) (Quit: Leaving)
[10:15:30] *** Joins: gusto (~Augustus@109.255.100.54)
[10:15:54] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:16:36] *** Joins: pro_z (~pro_z@37.214.40.135)
[10:18:45] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:18:57] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:20:33] <Syzygy_> I have a google virtual machine running a database via docker. on the same VM - but not in the docker, I'm running a python script that uploads files - from local - to the database.
[10:20:35] <Syzygy_> https://bpa.st/ODEQ
[10:20:46] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:20:47] *** Joins: chele (~chele@user/chele)
[10:20:53] <Syzygy_> Can someone tell me why this times out on the second file?
[10:20:59] <Syzygy_> each file is about 2gb in size
[10:21:14] <habnabit_> Syzygy_, i'm going to guess because you're not streaming the upload
[10:21:17] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[10:21:42] <habnabit_> Syzygy_, you read the whole file into one 2GB string object before sending any of it to the server
[10:21:48] *** Joins: palasso (~palasso@user/palasso)
[10:21:59] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th) (Remote host closed the connection)
[10:22:00] <habnabit_> Syzygy_, https://www.python-httpx.org/async/#streaming-requests
[10:22:35] *** Joins: p-i- (~Ohmu@223.206.146.51)
[10:22:39] <habnabit_> Syzygy_, oh, you're not using the async httpx? why not?
[10:22:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[10:23:04] <Syzygy_> I'll give it a try, but since it's all on the same system, I don't see why that would sometimes work and sometimes doesn't.
[10:24:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:24:59] *** Quits: lyr (~lyr@user/lyr) (Quit: Ping timeout (120 seconds))
[10:25:02] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:25:04] <habnabit_> Syzygy_, 'that'?
[10:25:28] *** Joins: lyr (~lyr@user/lyr)
[10:25:40] <Syzygy_> my current code with the files. sometimes it  works, sometims it doesn't. they're all roughly the same
[10:25:50] <Syzygy_> and it always, first works, second doesn't.
[10:26:16] <habnabit_> Syzygy_, ok. i think it's the thing i said. presumably you don't want your program using 2GB memory to read a 2GB file anyway
[10:26:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:27:16] <Syzygy_> it doesn't really matter tbh. the VM should have 16gb available - shared between the database and the upload code.
[10:27:27] <habnabit_> Syzygy_, ok. good luck
[10:27:45] <Syzygy_> but I'll give the async thing a try the next time the upload fails
[10:28:10] <habnabit_> Syzygy_, you don't need to use async to have a streaming upload
[10:28:53] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.106)
[10:29:41] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[10:30:21] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:30:54] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:30:57] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[10:31:35] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[10:32:19] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:33:39] <aphysically> jinsun: so the only pyright strict complaint in my server-side code (much simpler) was just the thing I need ParamSpec to type https://bpa.st/5MRQ
[10:33:45] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:34:06] <aphysically> I'm not even sure the correct way to silence pyright but probably I should just move server code to 3.10 anyway
[10:34:09] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:34:35] *** Joins: pycurious (~Adium@user/pycurious)
[10:34:39] *** Joins: millido (~millido@84.210.150.128)
[10:35:05] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[10:35:28] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.106) (Ping timeout: 252 seconds)
[10:36:44] <Syzygy_> habnabit_, is this in line with what you're suggesting? I'm not familiar with async in python https://bpa.st/SF4Q
[10:36:51] *** Joins: gulzar (~gulzar@14.139.123.36)
[10:37:11] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:37:24] *** Quits: guardian (~guardian@planet-d.net) (Ping timeout: 245 seconds)
[10:38:51] <gulzar> Hi. I am using doom-emacs for python dev. It's quite good. The problem, it doesn't execute if __main__ , as tolld here https://github.com/jorgenschaefer/elpy/issues/69   . Question is, what's the alternative to if__main?  I always use this as startpoint for my scripts.
[10:39:01] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:39:16] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[10:40:12] <habnabit_> Syzygy_, no. just do this: https://bpa.st/TTCA
[10:40:59] *** Joins: rendar (~rendar@user/rendar)
[10:41:13] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[10:41:24] <energizer> gulzar: `if __name__ == "__main__"` is the right way to do scripts
[10:41:27] *** Quits: niv (~niv@limbo.cypherpunks.io) (Quit: Powered by LunarBNC: https://LunarBNC.net)
[10:41:37] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[10:42:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[10:42:19] <energizer> gulzar: how are you running your scripts?
[10:42:44] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 265 seconds)
[10:42:57] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:43:00] <gulzar> energizer: using inbuild python inferior shell.  From terminal everything works fine
[10:43:19] <gulzar> C-c C-c
[10:43:25] <energizer> gulzar: what does print(__name__) say
[10:44:08] *** Joins: fikran (~fikran@user/fikran)
[10:44:24] <gulzar> energizer: putting that print after if__main printts,   __main__
[10:44:30] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:44:49] *** Joins: cation21 (cation@user/cation)
[10:45:15] <energizer> gulzar: i'm not understanding your report
[10:45:42] *** Quits: cation (cation@user/cation) (Ping timeout: 268 seconds)
[10:46:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:46:19] <gulzar> energizer: https://paste.debian.net/1214703/   gives           __main__
[10:46:46] *** Quits: me-sudoer-dentne (~me-sudoer@2405:204:549a:c220:66d4:682d:c966:b6f6) (Ping timeout: 245 seconds)
[10:46:55] <energizer> that seems impossible
[10:47:23] <gulzar> energizer: fom terminal, it gives both the prints
[10:47:33] <gulzar> energizer: the issue is dicussed in that git. I wanted to know the altenatives. Can't understand how to develop if we can't run the complete code......
[10:48:12] *** cation21 is now known as cation
[10:48:16] <energizer> holy crap that's nuts
[10:48:52] <gulzar> energizer: so, i write the if_main code outside of if_main, when everything is done, just indend the block inside :(
[10:49:40] *** Quits: jpic (~jpic@82.142.13.78) (Ping timeout: 260 seconds)
[10:49:49] <energizer> gulzar: ok so this is actually an emacs question
[10:49:58] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:50:02] <energizer> gulzar: if you look at the C-h k C-c C-c
[10:50:03] <gulzar> emacs is the best one I found for everything. VSCode is out because of MS and chrome crap. Pycharm is tooooo heavy even for writing simple stuff.
[10:50:04] <energizer> you will see
[10:50:19] <Syzygy_> habnabit_, so reading it as a binary helps with streaming?
[10:50:20] <gulzar> energizer: Yes, I asked here to know if there is some alt to if__main :)
[10:50:20] <energizer> python-shell-send-buffer explains
[10:50:33] <energizer> gulzar: try C-u C-c C-c
[10:50:59] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[10:51:11] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:51:11] *** Joins: Tas-sos (~Tas-sos@ppp141237138042.access.hol.gr)
[10:51:18] <gulzar> energizer: doesn't work on all scripts. Not working here.  Will discuss that with emacs folks
[10:51:40] <energizer> gulzar: look at the emacs help for python-shell-send-buffer
[10:51:41] <gulzar> energizer: so for here, is there any way to develop without if_main
[10:52:23] <energizer> gulzar: you could make a separate file that includes the stuff that you'd normally put in __
[10:52:36] <gulzar> in which case does if_main is not used
[10:52:37] <KirkMcDonald> gulzar: If I'm reading right, this thing detects the line `if __name__ == "__main__":` and rewrites it.
[10:52:38] <energizer> gulzar: but really just configure emacs
[10:52:57] <KirkMcDonald> So I wonder if you could just confuse it, e.g. `if "__main__" == __name__:`
[10:53:10] <KirkMcDonald> Because that implementation seems really brittle.
[10:53:34] <gulzar> does it make any sense to avoid if_main from python perspective?
[10:53:48] <KirkMcDonald> As far as Python is concerned, no.
[10:54:01] <gulzar> only words I could make out is, not everyone wants to run entire code and wants to test functions
[10:54:04] <gulzar> KirkMcDonald: ok
[10:54:14] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[10:54:28] <energizer> gulzar: not for scripting. for making a library or application you'd make a cli with `console_scripts`
[10:54:37] *** Joins: pycurious (~Adium@user/pycurious)
[10:54:50] <energizer> but for scripting you'd use __main__
[10:54:55] <gulzar> KirkMcDonald: hahah, reversing if_main==name worked
[10:55:51] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) Wouldn't it be great if the dog could walk itself?)
[10:56:03] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[10:56:24] <energizer> gulzar: it's documented to not do that manipulation if you use a prefix argument
[10:56:29] <gulzar> energizer: I do  if _main with parser for cli apps parameteres.
[10:56:33] <energizer> so i'd start there
[10:56:46] *** Joins: mat001 (~mat001@213.143.69.121)
[10:57:25] <gulzar> energizer: that 'console scipt' thing, any link please. Will read about it
[10:58:29] <energizer> gulzar: if you're making a library or application, i use poetry instead of setup.py, and the poetry version of console_scripts is  https://python-poetry.org/docs/pyproject/#scripts
[10:59:04] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[10:59:12] *** Quits: bloody (~bloody@user/bloody) (Quit: WeeChat 2.8)
[10:59:17] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:59:20] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[11:00:00] <energizer> there are various guides for entry_points console_scripts online (eg https://amir.rachum.com/blog/2017/07/28/python-entry-points/) but that's a setup.py thing which i don't suggest anymore
[11:01:16] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[11:02:38] <gulzar> energizer: ok, will read and try to understand that
[11:02:44] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:02:47] <gulzar> KirkMcDonald: energizer: Thank You
[11:03:41] <energizer> gulzar: again i'd say just use poetry, skip the complicated setup.py/entry-points/console-scripts  thing. https://python-poetry.org/
[11:03:49] *** Joins: guardian (~guardian@planet-d.net)
[11:04:03] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[11:04:34] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:04:48] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[11:04:58] <gulzar> energizer: thaat's the last step. Will test both
[11:05:11] <Syzygy_> habnabit_, reading the file as a binary doesn't help with streaming apparently, and I'm not sure why it should (at least not as the only change). still got the same issue.
[11:05:24] *** Parts: pabs3 (~pabs3@user/pabs3) (Don't rest until the streets are paved in poems.)
[11:06:29] *** Joins: ln43 (~ln43@user/ln43)
[11:06:45] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 276 seconds)
[11:06:49] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[11:07:00] <ln43> hi all, using jupyter lab there is a way to reload *.py files after modification avoiding restarting the kernel ? thx
[11:07:27] <ln43> ok so that using iport new modifications take immediate effects ?
[11:07:31] <ln43> *import
[11:07:34] *** Joins: cheater (~Username@user/cheater)
[11:07:36] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:07:38] *** Joins: ub (~Thunderbi@178.115.60.191.wireless.dyn.drei.com)
[11:07:49] *** Quits: ubert (~Thunderbi@91.141.46.27.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[11:07:50] *** ub is now known as ubert
[11:07:55] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:5519:f432:c2f4:a9f3) (Ping timeout: 252 seconds)
[11:07:58] <energizer> ln43: ipython has a magic called %reload and %autoreload that usually mostly works
[11:08:22] <ln43> so i should use %reload *.py ?
[11:08:28] <ln43> ok, i should try
[11:08:34] <ln43> thank you
[11:08:54] <energizer> the exact usage should appear in the ipython/juptyer documentation
[11:09:07] <energizer> under "magics"
[11:09:26] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:10:41] <habnabit_> Syzygy_, fortunately, that wasn't the only change
[11:11:34] <ln43> thanks energizer
[11:12:04] <Syzygy_> habnabit_, I don't see anything else
[11:12:17] *** Joins: pycurious (~Adium@user/pycurious)
[11:12:24] <habnabit_> Syzygy_, it's not calling .read()
[11:12:40] *** Parts: ln43 (~ln43@user/ln43) ()
[11:12:52] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.106.mobile.tre.se)
[11:13:16] <Syzygy_> ah, true. well, as I said, I didn't see that D:
[11:13:23] *** Joins: stranac (~stranac@195.29.239.126)
[11:13:54] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:13:55] <Syzygy_> trying again on my next timeout.
[11:14:22] <Syzygy_> actually, nevermind. i did already try it and it had the same issue.
[11:14:54] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:16:13] *** Joins: comet23 (~comet23@user/comet23)
[11:16:44] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:17:17] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:7eb7:2ebc:285:ce97) (Quit: WeeChat 2.8)
[11:17:32] *** Quits: pradhvan (~pradhvan@dgplug/pradhvan) (Ping timeout: 265 seconds)
[11:17:42] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:7eb7:2ebc:285:ce97)
[11:18:04] *** Joins: SteveR (~SteveR@192.146.154.3)
[11:19:51] *** Joins: drzacek (~drzacek@130-062-074-080.ip-addr.inexio.net)
[11:19:54] <drzacek> hello there
[11:20:03] *** Joins: Mattiasl_ (~Mattiasln@94.191.152.106)
[11:20:38] *** dcaro_away is now known as dcaro
[11:21:06] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[11:21:16] <drzacek> I have a nice gui program, with lots of quick-access stuff etc (python/tkinter). I have the paths there hard-coded. I would like to share the script with friend, but his paths to files/documents are different
[11:21:28] <drzacek> so I would like to offload the paths to separate file
[11:21:35] <drzacek> what would be the best way to achieve that?
[11:21:45] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[11:22:05] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.106.mobile.tre.se) (Ping timeout: 268 seconds)
[11:22:50] <energizer> drzacek: are all the files in a single directory?
[11:23:30] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:2416:760d:64ce:2c73) (Quit: Client closed)
[11:24:22] <drzacek> the .py files? yes. the files I call/open from the .py - no. They are all over the place. Some of net storage
[11:24:56] *** Joins: shad (~shad@user/shad)
[11:25:17] <Syzygy_> I believe environment variables are a common approach. Otherwise you could simple put all the info into a config.json file and load it from that.
[11:25:46] <drzacek> was hoping it could have been some object/struct/class/variable/namespace in another .py file
[11:25:51] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:26:13] *** Joins: shangxiao (~davids@124.187.230.212)
[11:26:13] <comet23> json has been useful for over 20 years
[11:26:19] <comet23> it's crazy to think about
[11:26:23] <energizer> drzacek: is there a fixed set of files known to you right now, or will they change
[11:26:23] * drzacek is still scared tho
[11:26:29] <aphysically> there's also configparser
[11:26:44] <Syzygy_> drzacek,  a json is basically just a dict that you can use as a file, so similar to what you want  Iguess.
[11:26:58] <energizer> configparser is probably the right answer
[11:27:00] *** Quits: Mattiasl_ (~Mattiasln@94.191.152.106) (Ping timeout: 260 seconds)
[11:27:53] <aphysically> you can even load straight to a path with a converter
[11:28:40] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[11:29:42] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[11:30:00] <aphysically> aww mypy doesn't support paramspec yet either
[11:30:22] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:30:24] <aphysically> well my server code doesn't have  CI so I guess it doesn't matter
[11:30:31] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[11:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:31:00] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:15] *** Joins: Auron (~Auron956@user/auron)
[11:32:39] *** Joins: barzo (~barzo@176.55.50.114)
[11:32:58] *** Quits: barzo (~barzo@176.55.50.114) (Quit: Quit)
[11:33:09] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:34:06] *** Joins: brelod (~me@90.244.150.142)
[11:34:59] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:35:25] <drzacek> okay, thanks, gonna read into that
[11:36:18] <shangxiao> So… who's excited about pattern matching
[11:36:34] *** Joins: barzo (~barzo@176.55.50.114)
[11:37:07] *** Quits: canurabus (~canurabus@ip-24-156-182-35.user.start.ca) (Quit: Leaving)
[11:38:01] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:38:26] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:41:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:20] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[11:43:27] *** Joins: vimart (~vimart@185.69.144.169)
[11:44:06] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:45:01] <rendar> is `msg = f"Hello {msg}"` a common construct?
[11:45:08] <rendar> or it may bring errors?
[11:45:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[11:45:52] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[11:45:56] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:46:39] *** Joins: drogas (~drogas@jump2.jet.uk)
[11:46:40] <energizer> rendar: it's fine. there is a situation where it can cause errors tho
[11:46:52] <energizer> https://bpa.st/G75A
[11:46:56] <rendar> energizer, uhm let's see
[11:47:13] <rendar> oh right
[11:47:20] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:47:31] <energizer> that has nothing to do with f-strings, its just that arrangement of lookups and assignment
[11:47:52] *** Parts: comet23 (~comet23@user/comet23) ()
[11:48:35] <Syzygy_> I guess my problem was somewhat solved just by increasing the timeout time. for some reason it seems like additional requests in a loop take twice as long compared to the first result. Thanks for the help habnabit_
[11:48:38] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[11:48:58] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:49:08] *** Quits: foozle (~foozle@2001-b011-c001-50f7-d8e8-416e-43e4-6f21.dynamic-ip6.hinet.net) (Quit: Leaving)
[11:50:25] *** Joins: comet23 (~comet23@user/comet23)
[11:50:48] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:50:59] *** Joins: pycurious (~Adium@user/pycurious)
[11:52:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:53:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:53:50] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[11:54:16] <rendar> energizer, yes of course
[11:54:27] <comet23> it's working :D  https://postimg.cc/9zp64WR6
[11:54:43] <comet23> i just started but i'm very tired now i'll finish later
[11:55:35] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[11:55:40] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[11:56:01] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[11:56:27] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[11:57:58] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[11:58:54] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[12:00:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[12:01:14] *** Joins: botfather (~botfather@shell1.dds.nl)
[12:01:23] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:e4ec:c443:b98c:2c06)
[12:02:21] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:02:22] *** Quits: jonthesnow (~xizhendu@240e:404:8610:62b2:dadc::30c0) (Ping timeout: 252 seconds)
[12:03:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:04:11] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:04:22] *** Joins: plastico (~plastico@neomutt/plastico)
[12:05:43] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[12:05:44] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 265 seconds)
[12:05:56] *** Joins: mat001 (~mat001@213.143.69.121)
[12:07:30] *** Joins: jpic (~jpic@82.142.13.78)
[12:07:54] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[12:08:26] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:10:16] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:10:41] *** Joins: arinov (~arinov@213.194.126.155)
[12:11:51] *** Joins: Hax0r (~Hax0r@87.101.192.39)
[12:12:41] <rendar> with `a={}; a.setdefault("World", set()).add(8899)` i can quickly have a dict which maps str->set, but does exist a counterpart method to erase "World" from dict whenever the set gets empity?
[12:14:31] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:15:03] *** Quits: botfather (~botfather@shell1.dds.nl) (Quit: -)
[12:15:25] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:16:21] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:17:26] *** Joins: botfather (~botfather@shell1.dds.nl)
[12:17:56] *** Quits: jpic (~jpic@82.142.13.78) (Ping timeout: 246 seconds)
[12:18:05] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[12:19:14] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:20:00] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:21:13] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:22:38] <stealth_> rendar, first, why not just write it like so `a = {"World": {8899}}` and you would have to either manual check if `a['World']` is true or createa class and use magic method to track 'World'
[12:23:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:23:23] <rendar> stealth_, huh? i have an input, 8899 and i have add that to a set of numbers which has "World" key in that dictionary
[12:23:33] <rendar> setdefault is the only wise choice here
[12:24:15] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:24:22] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:24:42] <stealth_> rendar, k, well you would have to write a custom class to handle this
[12:25:34] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:26:04] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[12:26:05] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:26:20] *** Joins: pycurious (~Adium@user/pycurious)
[12:26:26] <rendar> i don't, i can just remove 8899 from the set, and check if the set has len()==0
[12:26:34] <rendar> if so, i can do dict.pop("World", None)
[12:26:43] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[12:26:49] <rendar> i was just wondering if there was a method to do these 2 operations into 1
[12:26:55] *** Quits: pro_z (~pro_z@37.214.40.135) (Quit: LINUX is 2 sexy now)
[12:28:35] <stealth_> thast what i said when i said "manual check if `a['World']` is true". and no there isn't, you need some kind of callback/wrapper function since you want to do something unique
[12:28:57] <rendar> ok
[12:30:20] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[12:30:44] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[12:31:01] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:32:10] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:33:15] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.106)
[12:33:44] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[12:34:35] <spaceone> can you explain why this timeouts in python2 but not in python3? https://bpa.st/OJTA
[12:35:12] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:36:38] <Wulf> spaceone: do you want it to time out?
[12:37:02] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:37:06] <Wulf> and what does "timeout" mean?
[12:37:13] *** Joins: han-solo (~hanish@user/han-solo)
[12:37:40] *** Quits: comet23 (~comet23@user/comet23) (Quit: Client closed)
[12:37:40] <Wulf> spaceone: anyway, it's possible that one of those implements time.sleep using alarm.
[12:37:54] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[12:39:42] <spaceone> time.sleep is only an example, anything happening there ignores ending the process
[12:40:01] <spaceone> Wulf: yes, i want it to stop the process after 2 seconds
[12:40:04] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:40:29] <Wulf> spaceone: then use exit() instead of return None?
[12:40:31] <spaceone> in python3 i need to raise an exception in the signal handler and call signal.alarm(0) again.
[12:40:35] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:8d93:a3ee:e409:74cc)
[12:40:43] <spaceone> jeah or that way
[12:40:48] <spaceone> but this is not why i ask
[12:40:59] <spaceone> i would like to understand what is happening in py2 - why does it work there
[12:41:26] *** Joins: opashley (~opashley@70.138.105.34.bc.googleusercontent.com)
[12:41:50] *** Joins: pro_z (~pro_z@37.214.40.135)
[12:42:15] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:42:28] <Wulf> spaceone: https://docs.python.org/3/library/time.html#time.sleep
[12:43:44] <Wulf> spaceone: compare that to earlier versions
[12:44:20] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:45:31] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[12:45:33] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:46:21] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[12:47:28] *** opashley is now known as OliverUK
[12:48:49] <stealth_> spaceone, replace `return None` with `raise TimeoutError()` to see if that does what you wanted
[12:49:51] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:50:52] *** Joins: paul424 (~tom@ip-37-248-153-29.multi.internet.cyfrowypolsat.pl)
[12:51:02] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:51:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[12:52:34] <madduck> how do I undo a "pip install -e ." ?
[12:52:50] <madduck> "Can't uninstall 'pytcnz'. No files were found to uninstall."
[12:52:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:52:56] *** Joins: computeiro (~Wender@189.37.67.116)
[12:53:28] *** Joins: fikran (~fikran@user/fikran)
[12:53:45] <spaceone> Wulf: thank you ;-) the same applies to os.waitpid
[12:53:56] <spaceone> stealth_: yes, this is a working way.
[12:55:50] *** Joins: vladoski (~vladoski@2001:b07:add:d406:ab41:2432:9ec8:b095)
[12:55:54] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[12:56:25] *** Joins: pradhvan (~pradhvan@dgplug/pradhvan)
[12:57:25] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[12:57:39] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:57:43] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[12:59:38] <stealth_> spaceone, btw, https://bpa.st/A4DQ i ran it with both python2/3 it giving me almost the same result!
[13:00:45] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:02:35] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:03:43] <spaceone> stealth_: can you give the pastebin with the py file? not the result
[13:04:22] <stealth_> spaceone, i just ran your code as is, just added `sys.version_info` to see what python  version it was running in
[13:04:46] <spaceone> ok, but you have to call is with `time`
[13:05:05] <spaceone> with py2 it's 2 seconds, with py3 it's 4 seconds
[13:05:37] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:05:40] <stealth_> spaceone, https://bpa.st/Z6IQ
[13:05:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[13:06:16] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:07:16] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 252 seconds)
[13:07:19] <drzacek> another question. I want to start a program from my script, that requires administrator priviledges (windows 10). subprocess.popen simply fails. I would like that this fancy dialog asking for admin password pop-up to start it instead
[13:07:27] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:10:29] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:11:28] *** Quits: pradhvan (~pradhvan@dgplug/pradhvan) (Ping timeout: 265 seconds)
[13:11:28] <lericson> how do you do type annotations with numpy.ndarray?
[13:11:52] <lericson> I was told you didn't need a 3rd party library anymore
[13:12:19] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:13:29] *** Joins: lethu (~lethu@user/lethu)
[13:14:23] <spaceone> stealth_: https://bpa.st/LHBQ
[13:15:58] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:16:10] *** Joins: rsx (~dummy@ppp-188-174-147-237.dynamic.mnet-online.de)
[13:16:14] *** Joins: pycurious (~Adium@user/pycurious)
[13:16:47] <stealth_> spaceone, i see, that is interestingg
[13:17:11] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:17:26] *** Quits: barzo (~barzo@176.55.50.114) (Remote host closed the connection)
[13:17:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[13:17:36] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 245 seconds)
[13:17:39] <stealth_> spaceone, i suppose you should raise that timeout or else it just continues in python3
[13:17:51] *** Quits: the4oo4 (~the4oo4@shenzhou.whatbox.ca) (Quit: bye)
[13:18:02] <spaceone> yes
[13:19:20] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 265 seconds)
[13:20:28] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:20:58] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:20:59] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[13:21:48] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[13:22:03] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:22:15] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[13:22:44] *** Quits: drzacek (~drzacek@130-062-074-080.ip-addr.inexio.net) (Quit: Leaving)
[13:22:52] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[13:23:16] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:23:27] *** Joins: barzo (~barzo@176.55.53.201)
[13:24:03] *** Quits: barzo (~barzo@176.55.53.201) (Client Quit)
[13:24:17] *** Joins: barzo (~barzo@176.55.53.201)
[13:24:54] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[13:25:42] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[13:26:18] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:27:19] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[13:28:08] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:29:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:30:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:31:05] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[13:31:30] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:33:01] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[13:34:49] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:35:20] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[13:35:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:36:39] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:37:11] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 245 seconds)
[13:37:54] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:39:19] *** Joins: upsala (~zcb@185.213.155.232)
[13:39:41] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:39:45] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:40:59] *** Quits: Hax0r (~Hax0r@87.101.192.39) (Quit: Leaving)
[13:41:31] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:41:38] *** Quits: vimart (~vimart@185.69.144.169) (Quit: WeeChat 2.8)
[13:44:04] *** Quits: jpic (~jpic@bernadette.objectif-libre.com) (Ping timeout: 252 seconds)
[13:45:47] *** Joins: jpic (~jpic@82.142.13.78)
[13:49:25] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:49:52] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Read error: No route to host)
[13:50:10] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[13:51:15] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:52:28] *** Joins: pycurious (~Adium@user/pycurious)
[13:53:42] *** Quits: gulzar (~gulzar@14.139.123.36) (Quit: Konversation terminated!)
[13:54:18] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:54:45] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:56:05] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:56:07] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[13:56:56] *** Joins: jonthesnow (~xizhendu@240e:82:2c02:6bd9:d86e:b38:b0bf:4133)
[13:57:02] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[13:57:49] *** Quits: ubert (~Thunderbi@178.115.60.191.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[13:59:10] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[13:59:50] <petaflot> hello! I was hopig to get help on this short snippet of code: https://bpa.st/OG6A
[14:00:59] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:02:09] *** Joins: wladimir (~doforlove@user/doforlove33)
[14:02:28] <stealth_> petaflot, no ned to use `nonlocal QR_PATH_STYLE`
[14:02:41] <stealth_> petaflot, and is `self.QR_PATH_STYLE['stroke-width'] =`
[14:02:44] <stealth_> its*
[14:03:02] *** Joins: p-i-_ (~Ohmu@223.206.146.51)
[14:03:14] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:03:28] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:03:41] <stealth_> spaceone, `nonlocal` is normally for function within a function variable
[14:03:53] <stealth_> petaflot, ^
[14:03:54] *** Joins: eldenring0 (uid506233@id-506233.lymington.irccloud.com)
[14:04:02] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:04:47] <petaflot> if I remove "nonlocal QR_PATH_STYLE" I get NameError: name 'QR_PATH_STYLE' is not defined
[14:04:47] *** Quits: barzo (~barzo@176.55.53.201) (Read error: Connection reset by peer)
[14:05:03] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[14:05:23] *** Joins: barzo (~barzo@31.177.222.75)
[14:05:28] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:05:37] <stealth_> petaflot, ya, use  `self.QR_PATH_STYLE['stroke-width'] = ...`
[14:05:44] *** Quits: p-i- (~Ohmu@223.206.146.51) (Ping timeout: 245 seconds)
[14:05:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:06:31] <petaflot> oh I got it. thanks, didn't know QR_PATH_STYLE would magically become self.QR_PATH_STYLE...
[14:08:03] <stealth_> petaflot, do you get that by defining `QR_PATH_STYLE` inside the class like that and not inside `__init__` that `QR_PATH_STYLE` data  is going to be shared with every new instance of `SvgForPlotters`
[14:08:17] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:09:22] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[14:09:30] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:15:29] <stealth_> petaflot, if you don't know what i am talking about think of `QR_PATH_STYLE` beging outside of the class and now you are sharing `QR_PATH_STYLE` with every new `SvgForPlotters()` you create
[14:16:06] *** Joins: Juhaz (juhaz@hilla.kapsi.fi)
[14:17:04] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 252 seconds)
[14:17:37] *** Joins: Klinda (~superleag@user/klinda)
[14:17:43] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[14:19:16] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[14:19:54] *** Quits: LuKaRo (~LuKaRo@p4fc33c32.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[14:20:31] *** Joins: pycurious (~Adium@user/pycurious)
[14:20:32] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:20:47] *** Joins: LuKaRo_ (~LuKaRo@p4fc32cd3.dip0.t-ipconnect.de)
[14:20:59] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[14:21:03] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:21:27] <jinsun_> <lericson> "I was told you didn't need a 3rd..." <- https://numpy.org/devdocs/reference/typing.html
[14:21:49] *** Quits: cursey (~cursey@user/cursey) (Remote host closed the connection)
[14:22:27] *** Joins: cursey (~cursey@user/cursey)
[14:22:53] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:23:28] <gitesh> How to build executable?
[14:23:47] <gitesh> I want to hand my app to my sister
[14:23:57] <gitesh> I want to create installer
[14:24:05] <The-Compiler> gitesh: e.g. via http://www.pyinstaller.org/
[14:24:11] <gitesh> Okay
[14:24:13] <gitesh> Thanks
[14:24:22] <The-Compiler> there are also other alternatives (cx_freeze or py2exe), but PyInstaller seems to be the most common one
[14:25:19] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 245 seconds)
[14:25:55] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:27:03] *** Joins: Payam (~Payam@138.106.57.131)
[14:27:45] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:27:50] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[14:29:33] *** Quits: paul424 (~tom@ip-37-248-153-29.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:30:12] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:30:26] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:33:06] <gitesh> The-Compiler: never thought this can be that easy using pyinstaller
[14:33:08] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[14:33:53] *** Joins: wladimir (~doforlove@user/doforlove33)
[14:35:28] <apollo13> gitesh: depending on the packages you use, pyinstaller is relatively easy
[14:35:39] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:36:07] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[14:36:17] *** Joins: arinov (~arinov@178.240.185.108)
[14:37:14] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 246 seconds)
[14:37:19] *** Quits: lethu (~lethu@user/lethu) (Read error: Connection reset by peer)
[14:37:29] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:37:54] *** Quits: dld (~davidlowr@2601:197:600:1210:f114:5b21:6fb7:1fc1) (Ping timeout: 250 seconds)
[14:41:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[14:41:23] *** Quits: zepolen (~zepolen@2a02:587:860a:4682:9785:126b:4813:20f) (Remote host closed the connection)
[14:41:38] *** Joins: srhm (~srhm@user/srhm)
[14:41:44] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:41:48] *** Joins: zepolen (~zepolen@2a02:587:860a:4682:d782:6bc4:a35f:6d7)
[14:42:00] *** Joins: lethu (~lethu@user/lethu)
[14:43:34] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:44:34] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 252 seconds)
[14:46:22] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[14:47:00] *** dcaro is now known as dcaro_lunch
[14:47:49] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:48:49] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:48:53] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[14:49:01] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[14:49:02] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:49:39] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:52:42] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:54:31] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:56:13] *** Quits: wladimir (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[14:57:33] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[14:59:23] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[14:59:50] *** Joins: pycurious (~Adium@user/pycurious)
[15:00:43] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[15:00:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[15:01:45] *** Joins: frost (~frost@59.71.244.36)
[15:02:25] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[15:02:36] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (WeeChat 3.2)
[15:02:48] *** Joins: fikran (~fikran@user/fikran)
[15:04:15] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[15:04:16] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[15:07:01] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:07:11] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 245 seconds)
[15:07:14] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:07:18] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[15:08:24] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[15:08:27] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Read error: Connection reset by peer)
[15:08:56] <Dev0n> if you have 500 gevent tasks that execute a DB query, could sqlalch/pg pooling help to mitigate the "sorry, too many clients already" issue?
[15:09:07] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[15:09:19] <Dev0n> I don't see how it could if all 500 tasks were to run at the same time, but maybe there is something smarter happening in the background I'm not sure about
[15:09:35] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[15:10:09] *** Joins: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[15:11:08] *** Joins: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl)
[15:11:09] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 245 seconds)
[15:12:09] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[15:13:05] *** Quits: trace987 (~trace@95.90.106.112) (Remote host closed the connection)
[15:13:59] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[15:16:01] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:16:15] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[15:16:37] *** Joins: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com)
[15:17:02] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[15:17:51] <mav`rik> With mypy, is there a nice way to say "this thing has the same type as this other class's attribute"? Without just littering the code with type aliases everywhere.
[15:18:18] *** Joins: ravan (~ravan@user/ravan)
[15:18:26] *** Joins: lalilulelo (~lalilulel@2804:14d:7680:8ed4:1ca3:687:50d6:68c4)
[15:18:48] <mehwork> why is trio better than asyncio?
[15:18:51] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (Remote host closed the connection)
[15:19:13] <bjs> mehwork: it's newer and solves some problems asyncio has with cancellation,  exceptions and task management
[15:19:35] <mehwork> ah
[15:19:43] <mawk> will asyncio be improved with these any time soon?
[15:20:26] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:20:54] <deniska> it's hard (impossible?) to do without breaking it for existing libraries
[15:20:56] <mav`rik> mawk: unlikely if that change would result in backward-incompatibility
[15:21:13] <bjs> mawk: maybe and maybe not,  it's gaining trio's MultiError stuff https://www.python.org/dev/peps/pep-0654/
[15:21:35] <mawk> I see
[15:21:35] <bjs> nurseries and stuff are a potential but seemingly unlikely addition,  *removing* the old low-level APIs is basically a no-go at this point
[15:21:49] <bjs> (there is 0 chance of removing or even just hiding create_task...)
[15:22:07] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[15:22:21] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[15:23:20] <deniska> Which was added relatively late into asyncio life :)
[15:23:31] *** Joins: fixing_auth (~lalilulel@2804:14d:7680:8ed4:8c7f:427b:ff87:a27b)
[15:23:36] *** Quits: fixing_auth (~lalilulel@2804:14d:7680:8ed4:8c7f:427b:ff87:a27b) (Remote host closed the connection)
[15:23:49] <mehwork> is AnyIO worth using over Trio at this point? Sounds like Trio is what everyone is recommending these days
[15:24:15] <mehwork> well i use httpx which i think only supports asyncio and trio not anyio
[15:24:59] <mav`rik> mehwork: AnyIO is kinda/sorta a wrapper around multiple kinds of async base library, to make some things intercompatible iirc
[15:25:19] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 245 seconds)
[15:25:33] <graingert[m]> but it does work differently on trio and asyncio for performance reasons
[15:25:34] <graingert[m]> mehwork: it works with anyio and depends on anyio
[15:25:45] <graingert[m]> also it has support for curio
[15:25:46] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[15:26:19] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 265 seconds)
[15:26:48] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[15:26:55] <mehwork> oh
[15:26:56] *** Quits: lalilulelo (~lalilulel@2804:14d:7680:8ed4:1ca3:687:50d6:68c4) (Ping timeout: 265 seconds)
[15:29:04] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 245 seconds)
[15:29:54] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:30:38] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:e53f:8189:1a81:81ec)
[15:32:07] *** Joins: ub (~Thunderbi@178.115.60.191.wireless.dyn.drei.com)
[15:33:03] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[15:34:04] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 245 seconds)
[15:35:14] <mehwork> it's interesting how 'newer' is sometimes considered more mature but also less mature at the same time
[15:35:16] *** Joins: BSaboia (~bsaboia@177.37.198.74)
[15:35:42] <mehwork> less mature usually is just less supported
[15:35:56] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:23] <gitesh> I could use pyinstaller but how to make a installer that i will pass to my sister, is that zip file?
[15:37:25] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:37:32] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:37:45] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:37:53] <gitesh> can I just make one .exe?
[15:38:00] <han-solo> yes
[15:38:04] <gitesh> how?
[15:38:25] <han-solo> --onefile or something, i;d have to check the docs
[15:38:41] <gitesh> yeah i know that let me see
[15:38:43] <gitesh> thanks
[15:38:48] <han-solo> https://pyinstaller.readthedocs.io/en/stable/usage.html#what-to-generate
[15:39:55] *** Joins: promeys (~Promeys@gateway/tor-sasl/promey)
[15:40:21] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[15:41:45] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[15:42:18] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[15:42:40] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:42:56] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[15:44:08] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.106)
[15:44:29] <mehwork> i just read some SO article by the author of Trio written in march of 2018 that said it wasn't mature for production. I assume now that it's 3.5 years later it is?
[15:44:50] *** Quits: nicode (~nic@2607:f2c0:952b:a700:bfee:6ab1:cc4b:b210) (Remote host closed the connection)
[15:44:52] *** Joins: pycurious (~Adium@user/pycurious)
[15:45:09] <stealth_> mehwork, what are you trying to do?
[15:45:56] <stealth_> mehwork, you can use https://github.com/MagicStack/uvloop with asyncio
[15:46:00] *** Quits: klu_ (~klu@user/klu) (Ping timeout: 260 seconds)
[15:46:19] <mehwork> stealth_: currently just trying to use async with httpx in production
[15:47:16] *** Quits: barzo (~barzo@31.177.222.75) (Ping timeout: 252 seconds)
[15:47:34] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Read error: Connection reset by peer)
[15:48:47] <mehwork> stealth_: just want the easiest to use thing that won't have all the issues of asyncio, and will be easy to unit test too
[15:49:09] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[15:49:21] <stealth_> mehwork, what issue are you having with asyncio?
[15:49:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[15:49:43] *** Joins: barzo (~barzo@31.177.222.75)
[15:51:27] <mehwork> stealth_: none that i know of yet, but it's a greenfield app and i've only made one call with it so far.
[15:51:33] <mehwork> i want to make sure that as i scale i chose the right thing
[15:52:08] <stealth_> mehwork, it looks like you can run this httpx on both ayncio or trio! and you can even use that uvloop (for production)
[15:52:19] <stealth_> all you are really switching is the event manager
[15:54:55] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[15:54:58] *** Joins: dez (uid92154@user/dez)
[15:55:09] <mehwork> i'm getting more confused as more libs are mentioned. so uvloop says it makes asyncio faster, but i'm not yet worried about performance improvements so much as readability and stability
[15:55:54] <stealth_> mehwork, then just use whatever you like! there is a lot to choose from
[15:57:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:58:49] *** Quits: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu) (Ping timeout: 252 seconds)
[16:01:55] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:02:22] *** Joins: gtz (~gtz@185.12.215.241)
[16:02:55] <gtz> I am using the python "build" package to package my code. How can I tell it to include a bash script into my distribution? It only include .py files.
[16:03:35] *** Joins: zeden (~zeden@user/zeden)
[16:03:57] *** Joins: pycurious (~Adium@user/pycurious)
[16:03:59] <grym> gtz: use something like importlib.resources or setup(package_data=...
[16:04:33] <gtz> grym, I have a setup.cfg
[16:04:35] *** Joins: omegatron (~some@p5b056a70.dip0.t-ipconnect.de)
[16:04:43] <grym> gtz: same deal
[16:04:48] <gtz> I would appreciate some example... Docs online are fragmented and confusing.
[16:05:43] <mehwork> is Cython pronounced sython or c-i-thon
[16:05:54] *** Joins: XV8 (~XV8@2601:5cb:c001:50:c0e0:2ca5:895:347c)
[16:06:26] <grym> gtz: i think it's [options.package_data]
[16:06:35] <grym> gtz: https://setuptools.pypa.io/en/latest/userguide/declarative_config.html?highlight=package_data#configuring-setup-using-setup-cfg-files
[16:07:01] <grym> mehwork: in the event i prounounce it at all, the former
[16:07:10] *** Joins: shad (~shad@user/shad)
[16:07:24] <grym> c-i-thon is what ops people do at great length! ^_^
[16:07:46] <mehwork> :)
[16:07:52] <gtz> grym, It's "scripts", thanks for pointing me to the correct page.
[16:08:05] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:8d93:a3ee:e409:74cc) (Quit: Textual IRC Client: www.textualapp.com)
[16:08:39] *** Joins: imakestuff (~imakestuf@197.156.86.65)
[16:08:43] <mehwork> stealth_: does uvloop make trio faster too?  (I'm still trying to understand if trio and/or anyio use asyncio at all)
[16:08:45] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:08:52] <grym> gtz: i'm pretty sure that's for entry points
[16:09:06] <grym> gtz: which may be what you thought you wanted a bash script for anyway, i dunno :)
[16:09:09] *** Quits: XV8 (~XV8@2601:5cb:c001:50:c0e0:2ca5:895:347c) (Client Quit)
[16:09:41] <stealth_> mehwork, no, just asyncio
[16:09:54] <stealth_> mehwork, asyncio has improved alot and its actually good now.
[16:11:01] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[16:11:06] *** Joins: LordVan (~lordvan@gentoo/developer/lordvan)
[16:14:19] *** Joins: y1n-v1 (~y1n@91.141.45.116.wireless.dyn.drei.com)
[16:14:29] <mehwork> stealth_: i'm so confused, just a little bit ago everyone was talking about how trio is much better and that asyncio isn't likely to improve very much
[16:15:26] <mehwork> stealth_: i was reading more about trio and it was saying that it's much simpler to use, things work better (returning from a function actually returns, ctrl+c / cancellation works, etc)
[16:15:44] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:15:48] <gtz> grym, yeah, "scripts" didn't work as I wanted to. I don't want to expose the script like that
[16:16:01] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:16:14] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[16:16:28] *** Joins: Elodin (~weechat@user/elodin)
[16:16:29] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[16:16:42] <gtz> grym, why is it so difficult to add a darn file
[16:17:41] <grym> gtz: it's not
[16:17:42] <stealth_> mehwork, i see, i can't really comment on whats better in that sense, since i don't use neither of those
[16:18:03] <grym> gtz: but i would say that adding a bash script to a python wheel is unusual
[16:18:09] <grym> gtz: what's it for?
[16:18:40] <gtz> grym, I tried with package_data and it doesn't copy the bash file, even though it's present in the tar.gz
[16:18:54] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:19:33] <stealth_> gtz, you can use `MANIFEST.in` file to include whatever files/dir you need
[16:19:51] <grym> gtz: what happens if you `pip wheel`
[16:19:54] <Masklin_Gurder> (33,33,33)>(33,33,32)
[16:19:55] <grym> and look in the wheel
[16:19:56] *** Joins: xiongxin (~quassel@113.116.33.66)
[16:19:59] <grym> Masklin_Gurder: sure is
[16:19:59] <stealth_> gtz https://packaging.python.org/guides/using-manifest-in/
[16:20:01] <Masklin_Gurder> Can I trust this to do what I think it does?
[16:20:18] <stealth_> Masklin_Gurder, probably syntax error
[16:20:26] <grym> stealth_: no?
[16:20:27] <Masklin_Gurder> It should compare 33 to 33, then 33 to 33, then 33 to 32.
[16:20:42] <grym> Masklin_Gurder: it does
[16:20:43] <stealth_> ya my bad
[16:20:47] <Masklin_Gurder> Most excellent.
[16:20:51] *** Joins: dld (~davidlowr@2620:6e:6000:2900:2184:de22:ee5e:5a79)
[16:20:51] <stealth_> i thought it was . .
[16:21:32] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[16:23:22] *** dcaro_lunch is now known as dcaro
[16:23:44] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:25:31] *** Joins: mistery (~mistery@96.59.174.9)
[16:25:53] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:26:29] *** Joins: e2m4n (~ezman@213.195.104.19)
[16:27:11] *** Quits: y1n-v1 (~y1n@91.141.45.116.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[16:27:24] *** Quits: gitly (~gitly@148.252.129.25) (Ping timeout: 245 seconds)
[16:28:43] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:28:48] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[16:29:06] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[16:29:30] *** Joins: gitly (~gitly@185.69.144.60)
[16:29:50] <Masklin_Gurder> Suppose foo='ape'. Which is faster? ape=='ape', or ape==foo?
[16:30:27] <Masklin_Gurder> I feel the latter, since literals are... maybe recreated every time?
[16:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[16:31:03] <Julian> Masklin_Gurder: Microbenchmarks like that are generally not helpful, even to think about much. They'll never matter in a real program (and if they do, you'll have something telling you what to do)
[16:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:10] <nedbat> Masklin_Gurder: 1) literals are not recreated each time, 2) the local has to be looked up, so probably the literal is faster, and 3) this won't be a difference that matters anywhere
[16:32:25] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[16:33:07] <mehwork> so basically httpx uses AnyIO as a way to support both asyncio and trio, with a high level abstraction that allows it to not have to implement both independently?
[16:33:37] *** Quits: eldenring0 (uid506233@id-506233.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:33:38] <Julian> yes
[16:33:42] <Masklin_Gurder> Julian: nedbat: Biscuits!
[16:33:51] <Masklin_Gurder> I thought I was being efficient ;(
[16:34:00] <nedbat> Masklin_Gurder: it's a common misconception
[16:34:20] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[16:35:41] <Masklin_Gurder> The literal is faster
[16:35:47] *** Joins: semeion (~semeion@user/semeion)
[16:35:53] <Masklin_Gurder> I guess it's a python thing?
[16:37:13] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[16:38:14] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[16:38:26] *** Quits: fandre1986 (~fandre198@178-36-241-155.adsl.inetia.pl) (Quit: Connection closed)
[16:38:29] <stealth_> Masklin_Gurder, write the software to do what you want in python, later you can worry about improving speed and what not
[16:39:08] <mav`rik> nedbat: how slow is LOAD_FAST compared to LOAD_CONST in bytecode/CPython?
[16:39:23] <nedbat> mav`rik: i don't know
[16:39:37] *** Quits: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net) (Quit: Client closed)
[16:39:38] <nedbat> Masklin_Gurder: it really doesn't matter, right?
[16:39:45] <stealth_> Masklin_Gurder, only if you want those things, normally ppl want it to do task
[16:39:47] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[16:40:10] <han-solo> i'm a bit confused about pyproject.toml. Is that a replacement for setup.py ? do people write out the pyproject.toml by hand, or have to use a tool like poetry or something ?
[16:40:22] <Julian> han-solo: no, it's not a replacement for setup.py
[16:40:28] <han-solo> Julian: i see
[16:40:29] *** Joins: shad (~shad@user/shad)
[16:40:32] <Julian> han-solo: it's one main thing and one (unfortunate) side thing
[16:40:43] <han-solo> um ':)
[16:40:45] <Julian> han-solo: the main thing it is is a way to declare your project uses setuptools in the first place (if it does)
[16:40:50] <mehwork> Julian: was that yes for me?
[16:40:55] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[16:40:59] <Julian> han-solo: otherwise you declare you use some other way to build your package
[16:41:09] *** Joins: y1n-v1 (~y1n@178.165.197.76.wireless.dyn.drei.com)
[16:41:10] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[16:41:42] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[16:41:47] <han-solo> Julian: i was reading, you don't need setup.py, if you don't want editable installs. Is that right ?
[16:41:50] <Julian> han-solo: the other side thing is it's a junk drawer for tools to put their configuration in without creating their own configuration file, and in this sense those sections have nothing to do with packaging at all. And yes I suspect most people write it by hand (or by copy paste) but probably some tools will emit one
[16:42:03] *** Joins: spithash (~spithash@user/spithash)
[16:42:05] <Julian> han-solo: Yes that's correct, but also doesn't have to do with pyproject.toml :).
[16:42:10] <Julian> mehwork: yes
[16:42:34] <mehwork> Julian: thanks
[16:45:03] <han-solo> Julian: < Julian> han-solo: Yes that's correct, but also doesn't have to do with pyproject.toml :). # i didn't get this ':)
[16:45:21] <Masklin_Gurder> Is there a built-in to transform negative numbers (ints) to 0?
[16:45:39] <mehwork> so if i'm writing a library i'd use AnyIO, to offer support to multiple things, but if i'm writing a specific app, i'd probably just chose trio directly? Or is it always smart to use anyio in case you change your mind?
[16:45:43] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:46:21] <Julian> han-solo: you can get rid of setup.py (and move all your settings to setup.cfg) without anything related to pyproject.toml
[16:46:25] <Julian> han-solo: meaning without adding one
[16:46:31] <Julian> han-solo: that's purely a setuptools feature
[16:46:38] *** Quits: p-i-_ (~Ohmu@223.206.146.51) (Read error: Connection reset by peer)
[16:46:48] <grym> Masklin_Gurder: x = int(x>=0) is a really nasty clip
[16:47:02] <Julian> han-solo: pypyroject.toml is however independent, and all projects should now have one, even if you don't use setuptools, or even if you use setuptools and don't use setup.py, or even if you created your own packaging tool, or etc.
[16:47:03] *** Joins: chandoo (~chandoo@pool-71-172-140-13.nwrknj.fios.verizon.net)
[16:47:06] <chandoo> hi
[16:47:11] <Julian> han-solo: it's how you tell other tools how to build your package
[16:47:14] <grym> Masklin_Gurder: er, but that's not correct either
[16:47:14] *** Joins: p-i- (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th)
[16:47:15] *** Joins: CodePoint (~BitShift@94.198.42.197)
[16:47:24] <chandoo> how do i list pip3 packages installed for root user
[16:47:49] <han-solo> Julian: ah, Okay
[16:48:30] <grym> Masklin_Gurder: `x = int(x>=0) and  x` :(
[16:48:47] <Masklin_Gurder> grym: built-in intensifies? :(
[16:49:00] <stealth_> Masklin_Gurder, `x = x if >= 0 else 0`
[16:49:09] <Masklin_Gurder> Yes yes
[16:49:13] <grym> stealth_: now _that_ is a syntax error
[16:49:21] <Masklin_Gurder> So the answer is "no" ^-^
[16:49:25] <stealth_> gry, i missed `x >=`
[16:49:43] <grym> Masklin_Gurder: yeah.  numpy's got it
[16:50:04] <hexnewbie> Ha, different case for sys.stdout.encoding depending on locale: https://bpa.st/DBXA - that may cronjobs converted from Python 2 to Python 3 work *really funny* when the scripts were checking sys.stdout.encoding == 'UTF-8', and it was really hard to reproduce the trigger the problem
[16:50:06] *** Quits: allegary (~allegary@apache/committer/gjm) (Read error: Connection reset by peer)
[16:50:06] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Read error: Connection reset by peer)
[16:50:06] *** Quits: jinsun_ (~jinsun@user/jinsun) (Write error: Connection reset by peer)
[16:50:07] *** Quits: Aminda- (~mikaela-@Feneas/Mikaela-) (Read error: Connection reset by peer)
[16:50:07] *** Quits: ptival (~ptival@2001:470:69fc:105::41fc) (Read error: Connection reset by peer)
[16:50:07] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Read error: Connection reset by peer)
[16:50:07] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (Write error: Connection reset by peer)
[16:50:07] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Write error: Connection reset by peer)
[16:50:08] *** Quits: neolem[m] (~neolem@2001:470:69fc:105::c675) (Read error: Connection reset by peer)
[16:50:08] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Read error: Connection reset by peer)
[16:50:08] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Read error: Connection reset by peer)
[16:50:08] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Read error: Connection reset by peer)
[16:50:09] *** Quits: psydroid (~psydroid@user/psydroid) (Read error: Connection reset by peer)
[16:50:09] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Write error: Connection reset by peer)
[16:50:09] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Write error: Connection reset by peer)
[16:50:09] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Write error: Connection reset by peer)
[16:50:09] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Write error: Connection reset by peer)
[16:50:10] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Read error: Connection reset by peer)
[16:50:10] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Write error: Connection reset by peer)
[16:50:10] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (Write error: Connection reset by peer)
[16:50:11] *** Quits: berton[m] (~berton@2001:470:69fc:105::ce36) (Read error: Connection reset by peer)
[16:50:11] *** Quits: Mikaela- (~mikaela-@Feneas/Mikaela-) (Write error: Connection reset by peer)
[16:50:11] *** Quits: meain1 (~meain@2001:470:69fc:105::2db) (Write error: Connection reset by peer)
[16:50:11] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Write error: Connection reset by peer)
[16:50:11] *** Quits: cotsuka (~cotsuka@user/cotsuka) (Write error: Connection reset by peer)
[16:50:11] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Write error: Connection reset by peer)
[16:50:11] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (Write error: Connection reset by peer)
[16:50:11] *** Quits: canardo1 (~canardo@2001:470:69fc:105::e110) (Write error: Connection reset by peer)
[16:50:12] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Write error: Connection reset by peer)
[16:50:12] *** Quits: bim9262[m] (~bim9262@user/bim9262) (Write error: Connection reset by peer)
[16:50:12] *** Quits: Vipulk (~vipulk@user/vipulk) (Write error: Connection reset by peer)
[16:50:12] <stealth_> Masklin_Gurder, `x = x if x >= 0 else 0` there happy now grym
[16:50:41] <mav`rik> max(0, x)
[16:50:50] <grym> mav`rik: shhhh :D
[16:51:15] <grym> (forgot about that for some reason)
[16:51:41] <mav`rik> grym: :P I'm still wondering about my earlier mypy/typing question from just after I joined.
[16:52:41] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[16:52:50] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[16:52:58] <han-solo> Julian: so i can have something like https://github.com/takluyver/flit/blob/master/pyproject.toml without needing any setup.py or setup.cfg, right ?
[16:52:59] *** Joins: Aminda- (~mikaela-@Feneas/Mikaela-)
[16:52:59] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[16:52:59] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[16:52:59] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[16:53:00] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[16:53:01] <grym> mav`rik: not my wheelhouse, i'm afraid
[16:53:10] *** Quits: CodePoint (~BitShift@94.198.42.197) (Quit: Never gonna give you up, never gonna let you down...)
[16:53:13] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[16:53:14] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[16:53:16] <han-solo> it's just it's being used in very different ways in different projects confuses me
[16:53:21] <hexnewbie> One can invent even funnier ways to reinvent max(0, x) if they were really meaning to challenge having only one way to do it.
[16:53:28] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[16:53:31] <pycurious> when a subclass is instantiated, what code in the base class is always run? (__init__ perhaps?)
[16:53:32] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[16:53:42] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[16:53:42] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[16:53:42] *** Joins: psydroid (~psydroid@user/psydroid)
[16:53:42] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[16:53:42] *** Joins: neolem[m] (~neolem@2001:470:69fc:105::c675)
[16:53:42] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[16:53:42] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[16:53:42] *** Joins: allegary (~allegary@apache/committer/gjm)
[16:53:55] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[16:53:56] *** Joins: canardo (~canardo@2001:470:69fc:105::e110)
[16:53:56] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[16:53:56] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[16:53:56] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[16:53:56] *** Joins: jinsun_ (~jinsun@user/jinsun)
[16:53:59] <mav`rik> grym: I was doing so well for a while until I realised that all my different objects' ids would be considered the same type (since they were all just marked something_id: int or whatever)
[16:54:07] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 240 seconds)
[16:54:10] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[16:54:24] *** Joins: berton[m] (~berton@2001:470:69fc:105::ce36)
[16:54:25] *** Joins: bim9262[m] (~bim9262@user/bim9262)
[16:54:25] *** Joins: Vipulk (~vipulk@user/vipulk)
[16:54:25] *** Joins: Mikaela- (~mikaela-@Feneas/Mikaela-)
[16:54:25] *** Joins: ptival (~ptival@2001:470:69fc:105::41fc)
[16:54:25] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[16:54:25] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:54:40] <han-solo> Julian: so, since one doesn't necessarily need setup.py or setup.cfg, i was wondering if people are moving away from setup.py...
[16:54:45] <mav`rik> pycurious: nothing, unless you're explicit about it by calling the superclass from whatever you override.
[16:54:54] <MacGyver> You could bitmask the number with the inverse expansion of the MSB.
[16:55:06] <hexnewbie> - (x - (x if x < -x else x + x))
[16:55:38] <MacGyver> Though I'll admit I'm not sure how to get the sign bit from an arbitrary-sized int in python.
[16:56:21] *** Quits: y1n-v1 (~y1n@178.165.197.76.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[16:56:23] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:56:47] *** Joins: foozle (~foozle@2001-b011-c001-5dc7-8884-87bf-7f5f-861d.dynamic-ip6.hinet.net)
[16:56:54] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[16:57:09] <Julian> han-solo: yes
[16:57:15] *** ub is now known as ubert
[16:57:43] <SnoopJ> MacGyver, `math.copysign(1.0, the_int)`
[16:57:53] <Julian> pycurious: In the general case, none.
[16:57:56] <Julian> pycurious: Why do you ask
[16:58:16] <Julian> han-solo: Some are, yes
[16:58:37] <hexnewbie> MacGyver: Beware, the signs of -0.0 and +1.0 are different
[16:58:44] <han-solo> Julian: mm. Thanks
[16:58:46] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[16:58:48] <SnoopJ> or I guess you could do `the_int // abs(the_int)` if a float result would be a problem
[16:59:15] <MacGyver> Well this was about code golfing "Map all negative integers to 0 without using max".
[16:59:24] <MacGyver> So this is only step 1.
[16:59:37] <SnoopJ> n.b. that not all platforms have negative zero, too
[16:59:38] *** Quits: kr0nk (~kr0nk@user/kr0nk) (Remote host closed the connection)
[17:00:04] <grym> what platforms don't support ieee754?
[17:00:48] *** Joins: shad (~shad@user/shad)
[17:01:15] <p-i-> Does anyone know of an efficient way to convert a uint8 3D numpy array (image bitmap [y][x][rgb]) to float?
[17:01:18] <mav`rik> grym: a number of older mainframes have some glorious floating point hardware, IBM was always quite fun because some clinical data is represented in its record format. 16 * exponent and 4-bit mantissa shifts, etc.
[17:01:45] <grym> p-i-: .astype(np.float<precision you want>)
[17:01:55] <p-i-> grym: that's actually really slow
[17:02:00] <grym> p-i-: ok
[17:02:03] <SnoopJ> grym, I don't know, but the math.copysign docs specifically mention them.
[17:02:16] <Julian> grym: check the cpython test suite if no one knows off hand, it'll likely have comments somewhere on the tests that skip non-ieee 754 platforms on which platforms those are
[17:02:32] <mehwork> is VSCode what python coders typically use now? I mainly want an editor that works with multiple languages and supports 'jump to definition'
[17:02:45] <grym> mehwork: it's one of a few common choices
[17:02:46] <Julian> mehwork: there isn't a "typical", but it's a choice
[17:02:48] *** Joins: grooverman (~grooverma@177.189.91.225)
[17:03:04] <stealth_> mehwork, depends who you ask
[17:03:26] <p-i-> I'm thinking along the lines of: map it into every 4th byte of a numpy.zeros that is 4x the size, and then reinterpret that memory block as float32s.
[17:03:29] <mehwork> ok
[17:03:46] <p-i-> But I don't know if I can do that kind of 'reinterpret a raw pvoid' in Python/numpy.
[17:04:05] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 265 seconds)
[17:04:16] *** Quits: jpic (~jpic@82.142.13.78) (Ping timeout: 245 seconds)
[17:04:49] <stealth_> mehwork, i personally use sublimetext.com
[17:04:59] <mav`rik> grym: for reference I was slightly out on representation, but the use-cases are annoying to work around on non-HFP hardware - https://en.wikipedia.org/wiki/IBM_hexadecimal_floating-point#Special_uses
[17:05:19] <han-solo> i use VScode mainly for angular, and at times python. It works quite well so far
[17:05:45] *** Quits: rsx (~dummy@ppp-188-174-147-237.dynamic.mnet-online.de) (Quit: rsx)
[17:06:14] *** Joins: jpic (~jpic@bernadette.objectif-libre.com)
[17:06:20] <grym> Julian: it just checks `float.__getformat__("double").startswith("IEEE")`
[17:06:49] *** Quits: dvx (~dvx@185.63.97.64) (Read error: Connection reset by peer)
[17:07:05] *** Quits: arinov (~arinov@178.240.185.108) (Ping timeout: 260 seconds)
[17:07:16] <SnoopJ> p-i-, you can create an array from a void* with `numpy.ctypeslib.as_array(ptr, shape=...)` https://numpy.org/devdocs/reference/routines.ctypeslib.html#module-numpy.ctypeslib
[17:08:01] *** Joins: holgersson (~quassel@user/holgersson)
[17:08:08] <SnoopJ> (or just use the numpy C-API directly from whatever it is you're doing elsewhere that is generating pointers in the first place)
[17:08:48] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:09:07] *** Joins: paul424 (~tom@apn-37-248-75-149.dynamic.gprs.plus.pl)
[17:09:18] *** Joins: WhiteKarura (~WhiteKaru@user/whitekarura)
[17:09:45] *** Quits: WhiteKarura (~WhiteKaru@user/whitekarura) (Client Quit)
[17:09:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[17:10:19] *** Quits: Jefren (~Jefren@70.35.67.42) (Ping timeout: 252 seconds)
[17:10:49] *** Joins: nomic (~nomic@185.192.69.208)
[17:11:01] <Julian> grym: that's how the skip's implemented, what I meant was check what some of those tests do and possibly one will tell you a platform (but it's possible none do as well of course)
[17:11:32] <grym> Julian: haven't found it, just copious decorator use and then full steam ahead
[17:12:02] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:12:08] *** Joins: fikran (~fikran@user/fikran)
[17:12:15] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:12:31] *** Joins: Jefren (~Jefren@70.35.66.231)
[17:12:44] <mav`rik> p-i-: the value would sadly be wrong as the mantissa is 1.bits_of_mantissa which means you'd need to pack the bits to the left of the mantissa field (sans high bit) and set the exponent to 7
[17:12:56] <Julian> grym: well, plan b always works then
[17:13:10] <Julian> grym: (googling site:bugs.python.org non-ieee floats)
[17:13:16] <grym> Julian: hah
[17:13:19] <Julian> grym: which yields: https://bugs.python.org/issue1580#msg58456
[17:13:34] <grym> why am i not very surprised that worked
[17:13:45] <p-i-> mav`rik: thanks! I guess I could pack the third byte then, and divide by 2
[17:13:57] <Julian> grym: plan b always works
[17:14:09] <grym> Julian: like the fast way to get help online?
[17:15:00] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Quit: Leaving)
[17:15:07] <mav`rik> p-i-: https://en.wikipedia.org/wiki/IEEE_754#/media/File:Float_example.svg it's awkward.
[17:15:33] <Julian> grym: yup, notice I gave you the wrong answer first
[17:16:09] <SnoopJ> p-i-, is numpy's astype() not fast enough for your use-case?
[17:16:15] *** Joins: bloody (~bloody@user/bloody)
[17:16:55] *** Joins: darksun (~darksun@user/darksun)
[17:17:23] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.1 Beta Build (2021/10/08 UTC) 64 Bit)
[17:17:37] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:17:38] *** Parts: gtz (~gtz@185.12.215.241) (Leaving)
[17:17:46] *** Quits: foozle (~foozle@2001-b011-c001-5dc7-8884-87bf-7f5f-861d.dynamic-ip6.hinet.net) (Quit: Leaving)
[17:17:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:18:21] <mav`rik> p-i-: you'd have to make a 16-bit val of 0b0_00000111_0000000 | (uint_val & 127) and pack that into the high-half of each 32 bit float position
[17:18:50] <mav`rik> and that only works if the high bit is _set_ on the uint :(
[17:19:27] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[17:19:44] <SnoopJ> it's also worth asking where this image data came from: is it possible to lay it out as float to begin with, if numpy's conversion process is inadequate? e.g. I'm pretty sure with PIL you can load to a desired dtype
[17:20:37] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[17:20:44] *** Joins: CodePoint (~BitShift@89.38.227.229)
[17:21:09] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 245 seconds)
[17:22:08] <p-i-> SnoopJ: that's odd. I profiled it at 20ms earlier, but using %timeit on a similar-dimension array now shows 500us per loop.
[17:22:35] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[17:22:55] *** Joins: nomic (~nomic@185.192.69.208)
[17:23:11] <p-i-> I get it as a .jpg, then raw_rgb = np.array(PIL.Image(BytesIO(bytes_of_jpeg)))
[17:23:59] <p-i-> I have to investigate. Big diff between 20ms and 500us.
[17:24:04] *** Joins: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[17:24:38] <grym> Image also has an .asarray() method, i believe
[17:24:54] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 245 seconds)
[17:25:57] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th)
[17:26:02] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:26:13] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:27:03] <greyrat> I have a rather simple BeautifulSoup script (https://www.goodreads.com/en/book/show/53730364) that is very slow. Can I do anything to improve the performance? I assume BS doesn't use C extensions, so is there a library that does?
[17:28:05] <mav`rik> greyrat: it's not likely the soup that's slow but the network access required to fetch the page. That link you shared isn't a script
[17:28:11] <mehwork> is this how i should create a requirements.txt after i've already pip installed a bunch of stuff:  pip freeze > requirements.txt
[17:29:04] *** Quits: Jefren (~Jefren@70.35.66.231) (Ping timeout: 245 seconds)
[17:29:22] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[17:29:29] *** Quits: p-i- (~Ohmu@mx-ll-223.206.146-51.dynamic.3bb.co.th) (Ping timeout: 245 seconds)
[17:30:04] *** Joins: Jefren (~Jefren@70.35.66.231)
[17:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[17:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:32:59] *** Joins: Roey (~Roey@user/Roey)
[17:34:50] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[17:36:00] <Julian> mehwork: you should generally be creating it *before* installing a bunch of stuff -- but yes, if you missed a step, you can use that, you just now get to go look through it manually to check it doesn't have packages you installed but aren't using
[17:36:01] *** Quits: ubert (~Thunderbi@178.115.60.191.wireless.dyn.drei.com) (Quit: ubert)
[17:36:03] *** Joins: junktext (~junktext@77.247.181.218)
[17:36:37] <mehwork> i see
[17:38:44] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[17:38:47] *** Joins: dgdg (~dg_dg@191.101.31.24)
[17:39:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:39:21] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:39:42] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-147f-b5d4-1962-58a8.res6.spectrum.com)
[17:39:45] *** Quits: inomoz (~inomoz@176.59.124.136) (Quit: WeeChat 3.2.1)
[17:40:02] <mehwork> Julian: it added some stuff i didn't explicitly pip install, like dependencies of the things i did pip install. Does that make it more like package-lock.json in javascript/npm?
[17:40:32] <grym> mehwork: pipdeptree can give you the graph
[17:41:09] *** Quits: dg_dg (~dg_dg@156.146.63.138) (Ping timeout: 245 seconds)
[17:43:33] <mehwork> grym: i just mean should i only have stuff in requirements.txt that is the main package? e.g., if i ran 'pip install httpx' but it installs anyio, should requirements.txt have anyio
[17:44:50] <grym> mehwork: if you're going to start using requirements.txt and you want to generate one post hoc from a dirty venv, run pipdeptree and pick the root nodes
[17:45:06] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[17:45:21] <grym> (so no, requirements.txt should simply have httpx)
[17:45:31] <mehwork> ok thanks
[17:46:04] <mehwork> and it probably shouldn't have cli tools like pipdeptree itself
[17:46:15] <SnoopJ> p-i-_, it is a big difference, yes. Is it one that is significant in your application? If so, perhaps getting PIL to load with a float dtype in the first place would be better, avoiding the underlying copying altogether
[17:46:27] <grym> mehwork: right.  you can have a requirements-dev or something, if you like.  there are a bunch of ways to do this.
[17:47:24] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 245 seconds)
[17:48:18] *** Joins: akk (~akk@75.161.146.115)
[17:49:51] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Quit: This is the hidden truth, the world between the lines.)
[17:50:15] *** Joins: nomic (~nomic@185.192.69.208)
[17:51:40] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:51:46] <greyrat> What are my options in doing =for key in keys: some_dict[key] = long_taking_subprocess(key)= concurrently?
[17:52:08] <mehwork> but how should i be remembering to update requirements.txt every time i pip install something?
[17:52:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:52:17] *** Joins: jinsun (~quassel@user/jinsun)
[17:52:31] <grym> mehwork: CI
[17:52:47] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[17:53:03] <InPhase> greyrat: multiprocess Pool map.
[17:53:06] *** Joins: spithash (~spithash@user/spithash)
[17:53:14] <greyrat> mehwork: write a shell wrapper function around pip, and automatically update your reqs. I guess poetry etc already do this.
[17:53:23] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:53:34] <greyrat> inphase: thanks
[17:54:06] <grym> mehwork: something like poetry or flit or pip-tools are helpers for this sort of thing ^
[17:54:10] <SnoopJ> p-i-_, in particular, PIL's 'F' mode might be applicable here. Something like `PIL.Image.open("/path/to/img").convert("F")` I think (Image is lazy, although I don't know if calling convert() triggers the relevant load; worth timing)
[17:54:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:54:41] *** gitesh is now known as sanskrit
[17:54:48] *** sanskrit is now known as gitesh
[17:54:57] *** Quits: nomic (~nomic@185.192.69.208) (Client Quit)
[17:55:09] *** Joins: srhm (~srhm@user/srhm)
[17:57:17] <mehwork> darn, i wish pip was more like npm where you can have a flag to save to the file and in which section dev, etc
[17:57:50] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[17:57:59] <han-solo> poetry works something like that, i think
[17:59:00] <grym> yes, `poetry add --dev ipython`, e.g.
[17:59:03] <mehwork> ok thanks
[18:00:19] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[18:00:36] <mehwork> i'm using pyenv / virtualenv.  Should i 'pip install poetry pipdeptree' inside of a virtualenv like that or should cli tools go to a global place somewhere
[18:01:02] <grym> mehwork: poetry kind of replaces virtualenv and then adds more on top
[18:01:04] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 268 seconds)
[18:01:17] *** Joins: khrbt (~znc@user/khrbt)
[18:01:20] <grym> mehwork: so you install poetry with get-poetry.py or pip, in its own venv, and use it to make stuff
[18:01:31] <mehwork> oh wow
[18:01:48] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:01:57] <grym> pipdeptree takes a --python argument that you can point to ~wherever, so you can install it in its own venv too
[18:02:04] <grym> but i usually drag it in as a dev dep
[18:03:17] <mehwork> software development is exhausting
[18:03:21] <grym> yes
[18:03:26] <grym> it's work, after all ;)
[18:03:34] <mehwork> i spend more time doing all this stuff and keeping up than writing any actual code
[18:03:42] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:d0f6:5d12:b374:4314) (Quit: Textual IRC Client: www.textualapp.com)
[18:03:47] <grym> the toil ratio can drift a bit
[18:03:55] <mehwork> it should just be called software research & development
[18:04:09] <mehwork> 'software development' makes managers think you spend most of your time actually developing stuff
[18:05:45] <mehwork> my manager actually told me "you can pick up python in a weekend" yeah right. I hate when people say stuff like that because it's not true at all. Not in any useful way
[18:06:10] <grym> yeah, that's usually nonsense
[18:06:21] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:e53f:8189:1a81:81ec) (Ping timeout: 245 seconds)
[18:06:51] <mehwork> and it's usually manager types that say that. People who talk about how "i actually used to be a software engineer" when really they mean "i took a coding course once but never did much"
[18:07:08] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:07:18] <mehwork> except for the ones who actually did, but those are few and far between
[18:07:26] *** Quits: CodePoint (~BitShift@89.38.227.229) (Quit: Never gonna give you up, never gonna let you down...)
[18:08:41] <mehwork> anyway, i could get this task done in the the amount of time they want if i rush it, don't understand anything i'm doing, and just force some crap to work and be incomplete
[18:09:08] <mehwork> i'm torn because that would feel like selling myself out, yet is what they _want_ me to do.
[18:09:51] <mehwork> and be like every other bad code base i've worked on where the people who wrote it are like "yeah sorry, we didn't do things right to begin with because of time constraints and now we suffer the tech debt indefinitely"
[18:10:37] <grym> "Every programmer occasionally, when nobody’s home, turns off the lights, pours a glass of scotch, puts on some light German electronica, and opens up a file on their computer. It’s a different file for every programmer. "
[18:10:48] *** Quits: lastshell (~lastshell@user/lastshell) (Remote host closed the connection)
[18:10:57] <mehwork> to finish the rant, I can do it there way but they need to stop using titles like Senior Software Engineer, and start using "Sr conformist"
[18:11:05] <mehwork> or Senior Hack
[18:11:40] <mehwork> *their way
[18:12:11] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[18:12:12] <deniska> Phony Architect
[18:12:13] <mehwork> I wish they'd stop using the concept of 'sprints' too. It already puts everyone in 'rush' mode
[18:12:43] <mehwork> i've yet to seen any quality code come out of sprints
[18:12:56] *** Joins: nbao (~nbao@187.20.156.163)
[18:13:22] *** Joins: MercilessDeth (~brad@136.49.61.2)
[18:13:52] <han-solo> **Agile**
[18:14:13] *** Joins: EgonX (~EgonX@c-98-194-169-75.hsd1.tx.comcast.net)
[18:14:46] <mehwork> agile is a fancy way of saying "constantly deploying bug fix tickets for our rushed out sprint code"
[18:15:19] <SnoopJ> PyCon sprints have produced pretty good output, but it seems common for people to adopt the names/trappings of work paradigms without actually following the important parts of whichever framework they prefer
[18:15:26] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.106) (Ping timeout: 260 seconds)
[18:15:28] <mehwork> basically every concept has good intentions and works in its pureist form, but then some corporation gets ahold of it and mangles it into something unrecognizeable
[18:15:51] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[18:15:53] * SnoopJ is on a team that uses "sprints" that are explicitly tied to time 🙁
[18:15:53] <mehwork> SnoopJ: wow we said the same thing in parallel but different wording
[18:16:36] <mehwork> "devops" is another one that is completely mangled in practice by work
[18:17:09] <SnoopJ> mehwork, https://www.youtube.com/watch?v=XZFwCplj4ME
[18:17:58] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 252 seconds)
[18:18:23] <SnoopJ> tl;dw - the entire point of agile is that estimation in terms of time is hard, but estimation in terms of complexity is something we're pretty good at. Management's role is supposed to be at the conversion point, but it rarely is and the whole process becomes a more complex/annoying form of the thing it's supposed to fix.
[18:18:54] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[18:19:10] <mehwork> SnoopJ: i'll check that out later thanks
[18:19:11] <SnoopJ> (and probably predecessor workflows, agile not being particularly special)
[18:19:40] *** Joins: LiftLeft (~LiftLeft@191.96.185.14)
[18:19:46] <deniska> devops is hiring a single person to do the job of two
[18:19:53] <han-solo> " how many story point do you think this will take ? " :p
[18:20:14] <deniska> on the other hand we have frontend vs backend dichotomy which is hiring two people to do the work of one :)
[18:20:31] <deniska> so it kinda evens out
[18:20:47] <mehwork> han-solo: yeah that's exactly what happens.  They ask you to measure its complexity but are really asking you "how long do you think it will take you by thinking about the complexity"
[18:21:16] <mehwork> and every time i pad for all the things i know will come up, they say "that seems long" and some other engineer or two jumps in and says "yeah that shouldn't take that long"
[18:21:35] <mehwork> even though it will take each engineer a totally different amount of time, and also depending on how much quality they put into it
[18:22:05] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:22:10] <mehwork> that's why i think this job has turned into cash for crap code
[18:22:11] <greyrat> Inphase: okay, that multiprocessing.Pool doesn't nest: daemonic processes are not allowed to have children
[18:22:21] <greyrat> Now what? :))
[18:22:34] <han-solo> honestly, i don't even know i get to some time with BA, and even then they will come up with some "suggestions", and in the end they sprint usually spills over. So ':)
[18:22:39] <mehwork> i wish i could get paid enough for open source
[18:22:58] <mehwork> maybe i could if i really had something valuable to create and got sponsors but that's a pipe dream at this stage
[18:23:05] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[18:24:18] <InPhase> greyrat: https://xyproblem.info/  It is unlikely you have enough processors to be facing the efficiency problem you are describing.
[18:24:46] <greyrat> InPhase: It's an IO bound problem, I think.
[18:24:52] <mehwork> han-solo: it's so bad. I had a manager fault me for taking 2 weeks to do a complete feature that i started on right away. Meanwhile, another person on my team didnt' even *start* his ticket for 2 weeks longer than they wanted (because of taking time off, etc) and then rushed it out in literally 2 days and the praised him and in my review said i'm much slower than him and need to pick up the pace
[18:24:52] <deniska> "multiprocessing.Pool doesn't nest" sounds like one of these "describe a horror story in 3 words" kind of tweets
[18:24:54] <bjs> greyrat: maybe you want a ThreadPool then
[18:25:01] <InPhase> greyrat: Which is not accelerated by parallelizing.
[18:25:20] <greyrat> I asked for concurrency, remember? :D
[18:25:37] <bjs> greyrat: yes
[18:25:41] <greyrat> bjs: I will check that out
[18:25:41] <InPhase> greyrat: Are we talking disk IO?  Or are you waiting for network responses?
[18:25:56] <han-solo> mehwork: maybe we should take this to #python-offtopic :)
[18:26:16] <greyrat> InPhase: I am processing some small amount of HTML, sending little pieces of it to pandoc to convert to some other format.
[18:26:17] <mehwork> han-solo: oh nice, didn't know that was a thing. It's ok i'm done
[18:26:51] <greyrat> It's all very small, but it takes ~10 seconds which is just crazy.
[18:26:51] <han-solo> also, that;s a topic boss you've got there
[18:26:53] <InPhase> greyrat: Ok, but that didn't really answer the question.
[18:26:57] <han-solo> toxic*
[18:27:12] <greyrat> It's not network IO at all.
[18:27:24] <greyrat> The HTML is fed into the python script.
[18:27:33] <InPhase> Fed how?
[18:27:39] <greyrat> from stdin
[18:27:47] *** Quits: gutt_ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Ping timeout: 240 seconds)
[18:27:51] <mehwork> han-solo: for sure and believe me i'm already looking elsewhere
[18:27:52] <InPhase> greyrat: Why by stdin?
[18:28:12] <greyrat> Well, it's a script that gets the html from its stdin and outputs JSON.
[18:28:41] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:28:56] *** Joins: y1n-v1 (~y1n@178.165.204.179.wireless.dyn.drei.com)
[18:28:57] <paul424> What does it mean to concatenate __IN__ place two lists ? in place ?
[18:29:14] <bjs> paul424: in-place means without making a new list
[18:29:16] <paul424> in place of a, when a, b are given
[18:29:24] <paul424> aha, as I thought , thanks ....
[18:29:25] *** Joins: me-sudoer-dentne (~me-sudoer@2405:204:549a:c220:f39a:1821:97d2:98a7)
[18:30:07] <InPhase> paul424: a.extend(b) in Python, although this is not going to reliably happen "in place" if you mean in terms of raw memory.
[18:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[18:30:55] <paul424> InPhase, I look over the most popular questions for python on stackoverflow to learn something new
[18:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:33:01] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:91dd:865c:ff98:51ed)
[18:35:24] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[18:36:02] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[18:36:21] <jinsun> paul424: and list1 + list2 is the non-inplace version
[18:36:53] <paul424> jinsun, yeah , I see that on overflow :D thanks
[18:37:23] <gitesh> what does interactive means technically?
[18:38:04] <deniska> gitesh: it's not exactly a technical term, it just means that you can… interact with a thing
[18:38:22] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:91dd:865c:ff98:51ed) (Ping timeout: 252 seconds)
[18:38:24] <paul424> gitesh, give a full sentence context :)
[18:38:53] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:39:28] <gitesh> i thought html is about creating objects , CSS is about setting attributes of objects and javascript is about changing object states using methods, is that right?
[18:39:39] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[18:39:51] <bjs> gitesh: "Interactive" means "can be interacted with (by a human)" https://www.dictionary.com/browse/interactive
[18:40:47] <paul424> here's nedbat https://nedbatchelder.com/text/names.html on names and values , does this from 2013 also applies to python 3 version ?
[18:40:50] <deniska> it's quite hard to describe what html, css, and js are all about in a succint sentence :)
[18:40:53] <bjs> paul424: yes.
[18:42:05] *** Quits: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Quit: Leaving)
[18:42:36] *** Quits: death916 (~death916@user/death916) (Ping timeout: 245 seconds)
[18:42:47] *** Quits: vladoski (~vladoski@2001:b07:add:d406:ab41:2432:9ec8:b095) (Remote host closed the connection)
[18:42:51] *** Joins: sbrown (~sbrown@66.44.16.44)
[18:43:20] <InPhase> greyrat: Your problem description wasn't really complete enough yet to give information about why the performance is slow.  Your words make it sound like this should take fractions of a second.  So something else must be going on.
[18:45:32] *** Joins: vladoski (~vladoski@2001:b07:add:d406:ab41:2432:9ec8:b095)
[18:46:29] *** Joins: NikaWritesCode (~NikaWrite@149.3.80.8)
[18:46:29] *** Joins: wladimir (~doforlove@user/doforlove33)
[18:47:50] <ska> If I have a project with multple repos (say mostly python), how do you define a release that takes into consdieration of the various 'valid' states of each repo? sub-repos, subtrees? Something else?
[18:48:42] <greyrat> InPhase: I changed my code to use a global (so not "nested") ThreadPoolExecutor. It reduced the time from 10s to 3.4s. But this is still way too much time IMO, as each call to pandoc doesn't take even half a second, and there is pretty much zero sequential code flow. Here is the script: https://files.lilf.ir/tmp/selectors2json.py
[18:48:58] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 265 seconds)
[18:49:24] <grym> ska: ideally, a pypi mirror
[18:50:01] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:50:09] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[18:50:11] *** Joins: alzgh (~alzgh@user/alzgh)
[18:50:25] *** Joins: DanTheAutomator (~dantheaut@user/dantheautomator)
[18:50:44] *** Quits: wladimir (~doforlove@user/doforlove33) (Ping timeout: 245 seconds)
[18:51:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:52:36] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[18:53:39] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[18:56:20] *** Quits: e2m4n (~ezman@213.195.104.19) (Changing host)
[18:56:20] *** Joins: e2m4n (~ezman@user/e2m4n)
[18:56:36] <SnoopJ> ska, can you elaborate on what problem you're solving? It isn't clear from your question.
[18:56:47] *** Quits: imakestuff (~imakestuf@197.156.86.65) (Remote host closed the connection)
[18:57:03] *** Joins: zebrag (~chris@user/zebrag)
[18:57:14] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:00:27] *** dcaro is now known as dcaro_away
[19:01:30] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:03:28] *** Quits: grooverman (~grooverma@177.189.91.225) (Remote host closed the connection)
[19:04:07] <SnoopJ> is anyio.CancelScope only meaningful when the body of the context manager is 'properly' asynchronous? It seems like if I wrap a sync dummy task that does `time.sleep(1)` in a loop, I can cancel the scope, but it doesn't stop the execution of the task function, but an async dummy using `anyio.sleep(1)` can be canceled
[19:04:58] *** Joins: grooverman (~grooverma@177.189.91.225)
[19:05:01] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:05:49] <SnoopJ> my coarse understanding is that cancellation is going to actually apply wherever there's an `await`, and I think what I want to do (cancel synchronous work) requires a framework that runs tasks on a separate process.
[19:08:11] <ska> SnoopJ: people do a "release" of a repo  but its done in a vacuum. What versions of each repo are compatible? A product is a collection of repos and they need to be released in a cohesive way.
[19:09:12] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[19:09:26] <ska> So I'm wondering: are there standard tools to specify consistent versions of that group of repos for a release.
[19:10:00] <ska> There should be a ? at the end of that last one.
[19:10:13] *** Joins: Goblins (~mz@12.231.191.170)
[19:14:06] <InPhase> greyrat: Why are you using this "brish" library?
[19:14:10] <InPhase> greyrat: This seems absurd.
[19:15:20] <SnoopJ> ska, you can do that with submodules. Each revision of the main repo is associated with particular commits in each of its submodules. It's not a great solution compared to declaring the dependencies in pyproject.toml/setup.cfg though (you can depend on a repository at a particular commit, even)
[19:15:25] <InPhase> greyrat: It appears you are launching a very large number of shell instances.
[19:15:38] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 260 seconds)
[19:15:42] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[19:16:29] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:16:31] *** Quits: paul424 (~tom@apn-37-248-75-149.dynamic.gprs.plus.pl) (Remote host closed the connection)
[19:16:39] *** Joins: Guddu (~Guddu@190.84.88.92)
[19:16:51] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[19:17:10] <InPhase> greyrat: I've not used it, but you should probably look at the pandocfilters package.
[19:18:16] <SnoopJ> ska, if your dependencies aren't Python packages though, you're kind of stuck with either submodules, or combining the repositories. Of those two, submodules at least lets you keep them separate, even though it's an extremely unpleasant feature.
[19:19:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[19:19:22] *** Joins: kosh (~kosh@user/kosh)
[19:19:58] <ska> SnoopJ: At least submodules let you test the group as a unit, in cicd.
[19:20:04] <zodd> I want to parse args in three groups: generic (reusable code), app specific and I have to take into account unknown args/bad syntax is provided. Preferably I want to split the parsing into three different functions and files. Generic and others can be handled by parse_known_arguments, but that does not do the whole trick. So this is a nice example but not entirely what I want: str(os.pathsep)
[19:20:19] <zodd> any suggestions?
[19:20:53] <SnoopJ> ska, "at least" is very much what the submodules experience is about.
[19:21:28] *** Joins: fikran (~fikran@user/fikran)
[19:21:47] <SnoopJ> It's the least-bad solution to an inherently hard problem, but still bad enough to warrant serious consideration about whether you can avoid the problem altogther (e.g. Python requirements are superior imo)
[19:21:51] *** Joins: SteveR (~SteveR@192.146.154.3)
[19:22:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:22:41] *** Joins: Klinda (~superleag@user/klinda)
[19:22:47] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:23:04] <SnoopJ> They're worth using when you have a build-time dependency, though. $employer does this for our C++ product. It can bring things to a crawl and you have to watch the submodules like a hawk or they'll go stale, but it does work.
[19:23:05] *** Joins: sartan (~sartan@user/sartan)
[19:23:32] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad)
[19:23:33] <kek_> hi
[19:23:39] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[19:23:48] *** Quits: Klinda (~superleag@user/klinda) (Client Quit)
[19:26:42] *** Quits: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de) (Quit: WeeChat 3.3)
[19:26:42] <Guddu> I am trying to invoke an API using python requests module. I specify verify="/path/to/certificate" Even then the certificate verify is getting failed with this error
[19:26:43] <Guddu> CERTIFICATE_VERIFY_FAILED
[19:26:47] <Guddu> This is on Centos
[19:26:54] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Client Quit)
[19:26:54] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:27:14] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:27:19] *** Quits: dld (~davidlowr@2620:6e:6000:2900:2184:de22:ee5e:5a79) (Ping timeout: 252 seconds)
[19:27:30] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:27:38] <Guddu> I understand this could have something to do with the Letsencrypt root ceritificate expiration but I am validating against the right certificate And the remote server does not have this issue. I can use postman for example and get response cotrrectly from it.
[19:27:52] *** Joins: stockholm (~Andreas@p200300d2c7058000a00e95cb357dc3fa.dip0.t-ipconnect.de)
[19:28:16] *** Joins: srhm (~srhm@user/srhm)
[19:30:06] <SteveR> hi there, i want to loop through 3 list at a time.. for example, i have a list that containers ['fair','abcd','wxyz'] = fax abx icy
[19:30:12] <SteveR> i want to loop and print these
[19:30:20] <SnoopJ> Guddu, can you elaborate on what /path/to/certificate is pointing at? `verify` is indended to point to a CA_BUNDLE or a directory of CA certs, but your description makes it sound like you're maybe pointing at the issued certificate directly?
[19:31:14] *** Quits: dambuster (~dambuster@185.193.170.225) (Quit: Leaving)
[19:31:15] <han-solo> SteveR: `zip(*that)`
[19:31:22] *** Quits: vladoski (~vladoski@2001:b07:add:d406:ab41:2432:9ec8:b095) (Remote host closed the connection)
[19:31:31] <SteveR> han-solo without zip how can i do this?
[19:31:54] <KirkMcDonald> SteveR: Tediously. Why not zip?
[19:32:01] <han-solo> oh, wait. `fax` ? or `faw` ?
[19:32:13] <Guddu> SnoopJ, I tried using my default certifi certificate explicitly (the path that i get if i import certifi and do certifi.where() ). I also trying copying over the pem that i get if i open the website and click on the lock besides the URL bar and from there see the certificate and download the pem.
[19:32:21] <SteveR> sorry it was faw
[19:32:27] <sartan> Guddu: the x1 root certificate from letsencrypt has expired a few days ago
[19:32:30] <han-solo> ah
[19:32:42] <KirkMcDonald> SteveR: The alternative is basically to use range() and index things.
[19:32:57] <jinsun> there is no good reason to avoid zip though
[19:32:57] <KirkMcDonald> SteveR: But zip() is right there.
[19:33:22] <Guddu> sartan That why i am trying to find out what is it that i need to update.
[19:33:42] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[19:33:54] <Guddu> is there a way to know if my certifi has the right certificate or the expired one?
[19:34:06] <sartan> openssl s_client --connect <ip>:<port>
[19:34:16] <sartan> er -showcerts as well
[19:34:35] <SteveR> KirkMcDonald could you give a simple working snippet of these please
[19:34:38] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[19:34:40] <SteveR> without zip
[19:35:06] <SteveR> i am trying to learn hence avoiding to use python builtins
[19:35:19] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[19:36:00] <grym> SteveR: if you're doing homework and you have a 'no zip' rule, that's one thing
[19:36:12] <jinsun> list is python built in too
[19:36:12] <grym> but zip is not special to python
[19:36:24] <jinsun> maybe you shouldn't use that also
[19:36:36] <grym> SteveR: and the way that you loop over lots of things at once, the same index at a time, is zip.
[19:36:44] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:36:58] *** Quits: xiongxin (~quassel@113.116.33.66) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:37:13] <KirkMcDonald> SteveR: https://bpa.st/3PIA
[19:37:36] *** Quits: Neoon (~Neoon@2607:5300:60:23a5::1111) (Ping timeout: 245 seconds)
[19:37:40] <SteveR> thanks KirkMcDonald
[19:37:56] <SteveR> grym no im too old
[19:38:27] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[19:38:49] <SnoopJ> Guddu, if you're pointing to the *certificate* then this error is correct. You verify a certificate against the associated certificate authority (CA), not against itself (unless it's self-signed and you trust that)
[19:38:51] <Guddu> sartan, That command gives me the following output https://dpaste.org/skyZ
[19:39:10] <sartan> on port 80? that's noit https
[19:39:17] <SnoopJ> (but I still can't tell which thing you're pointing at based on your answer)
[19:39:29] <sartan> you can see here on line 3 as well. this ip/port doesn't speak tls/ssl
[19:39:41] <Guddu> SnoopJ, I pointed at whatever certifi.where() gave me as the location of store
[19:39:58] <Guddu> Sorry. Repeating with 443
[19:41:17] <Guddu> sartan, https://dpaste.com/EP7NDMTPF This is the information
[19:42:07] <SnoopJ> Guddu, this seems a little bit convoluted, since certifi is the bundle pulled out of requests anyway. Does it verify with the default `verify=True` ?
[19:43:02] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 268 seconds)
[19:43:14] *** Joins: sticheln (~atsbomb@116.88.220.71)
[19:43:32] <Guddu> SnoopJ, Default fails. Here is the output for example https://dpaste.com/66F5F7JG7
[19:44:42] *** Joins: ksu (~ksu@user/prtr)
[19:45:10] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:46:48] <SnoopJ> Guddu, what version of requests is this?
[19:47:00] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:47:30] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 260 seconds)
[19:47:31] <Guddu> SnoopJ, '2.26.0'
[19:47:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[19:47:57] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[19:48:25] <diverdud1> Hello, using pyredis values has been added to redis using: db.rpush('ziebel.ui.model_updates', json.dumps(update))  . I know i can get them again using db.lpop....But i dont want to remove them in the process...I just want to see whats in the list. How do i do that?
[19:48:28] <Guddu> SnoopJ, Even from 2.23.0 but on a different machine (Windows) this works. Its something with this particular server that I cannot seem to figure out.
[19:48:41] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[19:49:14] <SnoopJ> Guddu, sounds like your CA bundle is screwed up. Is REQUESTS_CA_BUNDLE set in your environment?
[19:49:32] <Guddu> SnoopJ, REQUESTS_CA_BUNDLE is not set
[19:50:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 252 seconds)
[19:50:45] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[19:51:43] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:14e9:d913:de41:9808)
[19:53:33] *** Quits: gustik (~gustik@2a01:c844:2411:2d20:922e:5225:fa8f:b211) (Quit: Leaving)
[19:54:24] <mehwork> what's typically recommended for unit testing: nose, pytest or something else?
[19:54:37] *** Joins: semeion (~semeion@user/semeion)
[19:55:12] <mehwork> seems harder to tell with python what is the 'one true' or 'most popular' and just to use whatever you want but i'm not sure
[19:55:32] <jinsun> pytest, and maybe unittest if you are stuck with stdlib for some reason, definitely not nose
[19:55:38] <SnoopJ> mehwork, pytest is definitely dominant
[19:56:05] <grym> mehwork: nose is super duper dead
[19:56:08] *** Joins: nickodd (~nickodd@user/nickodd)
[19:56:09] <mehwork> ok thanks
[19:56:17] <aphysically> oh I found an interesting thing yesterday jinsun
[19:56:24] <aphysically> you remember how I used AnyStr for my generic class
[19:56:43] <rendar> `assert expr, "Message"` can i also specify a type of exception to raise, instead of the default AssertionError ?
[19:56:44] <aphysically> mypyc (not mypy) treats AnyStr different from TypeVar("AnyStr",str,bytes)
[19:56:56] <aphysically> I think there might be a hardcoded behavior somewhere for AnyStr
[19:57:02] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:50da:5207:5652:613a)
[19:57:14] <jinsun> yeah causiinig the weird bug with walrus
[19:57:31] <jinsun> so it doesn't happen with mypyc ?
[19:57:43] <sartan>  Guddu need a few minutes, meeting
[19:57:51] <Guddu> Thanks sartan
[19:57:53] <aphysically> I Think this is a separate thing; mypyc separately has any issue with AnyStr
[19:57:58] <aphysically> an issue*
[19:58:42] <jinsun> rendar: maybe you want raise instead of assert?
[19:58:45] <SnoopJ> rendar, no, you should do `if not expr: raise RendarException("message")` instead if you want to do that.
[19:59:06] <rendar> ok
[19:59:16] <aphysically> my program fails to compile with mypyc anyway, something about my overloaded function with variable signatures mucks it up. I decided that was really a poor function on my part, and now that I've learned to type it correctly I'm really just going to split it into two functions
[19:59:25] <rendar> the thing is, asserts get disabled when __debug__==False, but `if not expr: raise` won't
[19:59:33] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[19:59:41] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[19:59:57] <SnoopJ> rendar, you can't specify the exception for `assert`, it will always be AssertionError. Did we answer your question?
[20:00:01] <aphysically> this function here https://github.com/GBeauregard/pyffstream/blob/66ec7287ee576f0b21ee62497643a49f564f2e05/src/pyffstream/ffmpeg.py#L187
[20:00:06] <bjs> rendar: it's kind of weird to want a debug assertion error that wasn't an AssertionError
[20:00:13] <rendar> ok
[20:00:25] <rendar> SnoopJ, yes
[20:00:26] <bjs> rendar: what are you trying to do?
[20:00:35] <rendar> bjs, type checking
[20:00:43] <aphysically> it's a wrapper for ffprobe basically, and it handles returning both json and specific string values which makes the signature awfully complicated instead of just making two functions
[20:00:44] *** Joins: emf (~emf@162.218.217.186)
[20:00:57] <jinsun> can't you, check for `__debug__` in your if condition
[20:01:06] <rendar> jinsun, yep
[20:01:07] *** Joins: legola (~legola@46.235.101.220)
[20:01:27] <SnoopJ> Guddu, I'm not sure what's going on with your CA bundle, but it seems like it's buggered. I would check where `requests.certs.where()` points and check manually if LetsEncrypt is in there. I suspect it isn't, for some reason.
[20:01:59] <SnoopJ> Possibly the rest of your operating environment is as out of date as your Python version? Hard to tell
[20:02:01] *** Joins: han-solo (~hanish@user/han-solo)
[20:02:18] <sartan> Guddu: here's your server cert chain: https://dpaste.com/FDLMTBUHE i don't see any expired certs here
[20:02:20] <Guddu> SnoopJ, Its pointing to the same path as  certifi.where()
[20:02:20] <rendar> another thing, if i have def myfn(text, *, param1=None, param2=None, ... param87=None): ... how can i call recursively from here myfn(text, param23=True, **kwargs <- and here apply all other initial parameters without rewriting all of them? i want to change only 1 of them
[20:03:08] <SnoopJ> sartan, yea the cert is fine, I think they're missing the necessary CA on this machine
[20:03:35] * SnoopJ doesn't know off-hand how to query a bundle to check for a particular authority but is pretty sure it can be done with openssl
[20:03:36] <sartan> yeah. i can't validate that from my side, but you could just add the root ca to your local openssl config to get requests lib to use it
[20:03:50] <bjs> rendar: it sounds like you just want to use **kwargs rather than juggling 87 different individual parameters manually
[20:04:55] <rendar> bjs, yes, but in the original function i want the parameters
[20:05:20] <rendar> i mean, i want my_fn(text, *, param1=True, param2=False, ...)
[20:05:29] <jinsun> why not kwargs?
[20:05:31] <bjs> rendar: sure but my_fn can call _my_fn that has **kwargs
[20:05:33] <bjs> or whatever
[20:05:47] <bjs> jinsun: presumably so rendar can annotate them and document them and have IDE completion
[20:05:51] *** Quits: DanTheAutomator (~dantheaut@user/dantheautomator) (Quit: Bye everybody!)
[20:05:54] <xavierdarkness>  
[20:05:56] <rendar> jinsun, because param1=True is more readable and i can immediately specify a default value
[20:05:58] <bjs> and giving them defaults nicely..
[20:06:07] <rendar> exactly, also that
[20:06:36] <jinsun> defaults can be done with kwargs.get("param", default) no?
[20:06:38] <Guddu> sartan, I executed the same command on my certifi.where() path and got one certificate with the following
[20:06:39] <Guddu> Not After : Sep 30 14:01:15 2021 GMT
[20:06:52] <rendar> but then i also want to call recursively the function with those parameters, can't i access to __locals__ or some stuff like that where i get all the parameters the function has been called?
[20:06:52] <bjs> jinsun: but then you can't see the default unless you read the code
[20:07:38] <bjs> rendar: this is why I suggest a helper function like `def _my_fn(**kwargs)` that does it.  Or find some nicer solution than passing so many keyword arguments
[20:07:51] *** Joins: freeworld (~vit@85.216.193.138)
[20:07:57] <jinsun> ya so just for helping the IDE then
[20:07:58] <bjs> or `def _my_fn(options)` (rather than packing and unpacking keyword arguments everywhere)
[20:08:12] <mehwork> when unit testing a script with pytest, should i do the `if __name__ == '__main__': main()` thing in my script so i can import it into pytest safely?
[20:08:34] <mehwork> or is there another practice for that
[20:08:36] <rendar> bjs, uhm, how that helper function should work?
[20:09:20] <SnoopJ> Guddu, that would explain the failure, I guess your bundle has a recent expiry
[20:09:25] *** Joins: hudo (~hudo@62.68.20.210)
[20:09:40] *** Joins: emf_ (~emf@2620:10d:c090:400::5:3586)
[20:09:59] *** Joins: jazzy (~jaziz@172.58.28.72)
[20:10:02] <Guddu> SnoopJ, i will try to update certifi selectively.
[20:11:10] <jinsun> rendar: take a class with 87 fields as one arg instead of 87 difffent parameters maybe
[20:11:16] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 252 seconds)
[20:11:19] <rendar> jinsun, nope
[20:11:28] <SnoopJ> Guddu, this works for me with certifi 2021.5.30, what version do you have?
[20:11:29] *** Quits: NikaWritesCode (~NikaWrite@149.3.80.8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:11:42] *** Joins: ExeciN (~ExeciN@user/nicexe)
[20:12:28] <Guddu> SnoopJ, 2021.05.30
[20:12:40] <bjs> rendar: `def my_fn(param1, param2, param3, ...): ...; return _my_fn(param1, param2, ...)`
[20:12:50] <bjs> rendar: then `def _my_fn(**kwargs): ...`
[20:13:09] *** Joins: Klinda (~superleag@user/klinda)
[20:13:43] <bjs> rendar: the nice thing about kwargs is you can .pop() particular args to use, and then pass them through explicitly
[20:13:47] <rendar> bjs, sorry, i can't see it, afer 30 years of C++, it's tough
[20:13:53] <bjs> rendar: what can't you see?
[20:13:57] <Guddu> SnoopJ, Could you kindly execute this command and tell me if you see the expired entry?
[20:13:57] <Guddu> https://dpaste.com/3W4PT7APH
[20:15:17] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:15:30] <rendar> bjs, from my_fn i still have to call _my_fn passing all the parameters manually...
[20:15:50] <bjs> rendar: yeah,  but you're not doing anything clever, and then _my_fn does the clever stuff that's painful to do when you have lots of args
[20:15:57] *** Joins: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu)
[20:16:12] <Guddu> sartan, The certificate that shows up as expired in the store pointed by certifi.where() is this one . . . https://dpaste.com/GV2UMXMFY It does not seem to be a letsencrypt certificate though
[20:16:48] *** iphone is now known as spiderman
[20:17:09] <rendar> bjs, so you say, use _my_fn once with parameters manually, and it will return a dict, and you can use that dict in multiple part of your code
[20:17:15] <bjs> rendar: the painful thing is not the typing it out, but the juggling of passing some things by keyword and others though ** in the body.  There is no "wrap up all the args into a dict now" operation
[20:17:27] <bjs> rendar: I didn't say anything about what it returns
[20:17:42] <rendar> bjs, i think i'd get that with a small snippet
[20:18:24] *** Quits: spiderman (~iphone@user/iphone) (Changing host)
[20:18:24] *** Joins: spiderman (~iphone@user/spiderman)
[20:18:35] <bjs> rendar: I mean I gave you the snippet. `def my_fn(param1=None, param2=42): return _my_fn(param1=param1, param2=param2)` then `def _my_fn(**kwargs): ...` and now you can use kwargs in _my_fn while still having the list of params and nice defaults and everything at the top-level func
[20:19:04] <rendar> bjs, oh ok, i see now
[20:19:07] <rendar> yeah
[20:20:00] <bjs> rendar: but still, 87 parameters is a lot for a function :)
[20:20:03] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[20:20:18] <rendar> :)
[20:20:27] <mehwork> how do you see the output of print when running pytest?
[20:21:04] <grym> i think my record's 18, and 17 of them have sane defaults
[20:21:05] <SnoopJ> Guddu, I have the expired entry and two non-expired ones
[20:21:12] <mehwork> nm it's -s, i tried -v
[20:21:14] <bjs> mehwork: you can pass -s a
[20:21:18] <grym> mehwork: pass -v until good
[20:21:22] <grym> (you can pass it multiple times)
[20:21:41] <mehwork> -vvv didn't work
[20:21:44] <Guddu> SnoopJ, So somehow the system level certificate is taking precedence I guess.
[20:21:47] <mehwork> it's ok -s did
[20:22:02] <SnoopJ> Guddu, the non-expired certs are 04:00:00:00:00:01:0f:86:26:e6:0d  (GlobalSign) and 04:00:00:00:00:01:0f:85:aa:2d:48 (Cybertrust)
[20:22:28] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:22:44] <SnoopJ> Guddu, I don't think precedence is the right way to say it, but you can't verify anything with a CA cert that's expired, no. What is the operating environment this is running inside of?
[20:23:01] <Guddu> SnoopJ, This is on rhel
[20:23:12] <SnoopJ> Guddu, how old?
[20:23:45] <Guddu> SnoopJ, Red Hat Enterprise Linux Server release 6.10
[20:23:50] <Guddu> SLES Expanded Support platform release 6.10
[20:24:56] <Guddu> SnoopJ, Could we assume that the expired entry that shows up in certifi.where() store is not the one causing problem? As it is not a Letsencrypt certificate.
[20:25:03] <rendar> let's consider i start a task with asyncio.create_task, inside a class TaskGroup that will manage tasks, waiting multiple tasks. now: this class exports also a wait() method, that let you to call (internally) asyncio.wait/wait_for on a single/multiple tasks, based on their integer ID. can i be *SURE* that the wait/wait_for i call there will wake up BEFORE the managing wait()?
[20:25:13] <SnoopJ> Guddu, no, we can't.
[20:25:37] *** Quits: stockholm (~Andreas@p200300d2c7058000a00e95cb357dc3fa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:30:33] <Guddu> SnoopJ, Since it works on your setup with the same version of certifi and with those same entries showing uo.
[20:30:40] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 260 seconds)
[20:30:58] <SnoopJ> Guddu, yes, but I have non-expired certs as well. I assume that those are what is being used to verify this cert.
[20:31:07] <SnoopJ> non-expired CA certs, that is
[20:31:48] <Guddu> SnoopJ, I have those too.
[20:32:16] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 265 seconds)
[20:32:24] <bjs> rendar: what do you mean?
[20:32:41] <bjs> rendar: you have an `async def wait(self):` which calls `await asyncio.wait_for(...)` inside it?
[20:32:49] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[20:32:55] <SnoopJ> Guddu, I don't know what to tell you, but it certainly can't hurt anything to see if RHEL has updates available for your CA bundle.
[20:33:07] <Guddu> SnoopJ, Chekcing those now.
[20:33:16] <Guddu> Also installing python updated version to see if that helps.
[20:33:48] *** Joins: fofoni (~fofoni@user/fofoni)
[20:33:50] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[20:34:12] *** Parts: nova (novasenco@user/nova) (♥☺)
[20:35:18] <rendar> bjs, yes
[20:35:35] <rendar> bjs, but also async def run() which calls another wait/wait_for
[20:35:39] <bjs> rendar: if you go `await self.wait()` then it's not creating a new task or anything,  it's just calling that method
[20:35:57] <rendar> bjs, basically i have asyncio.wait() called 2 times on the task
[20:35:58] <bjs> rendar: I'm not sure what your question is exactly
[20:36:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:36:19] <rendar> bjs, the question is: if 2 asyncio.wait() are waiting for a task, who wakes up first? and why?
[20:36:27] <bjs> rendar: it's a race
[20:36:34] <rendar> huh?
[20:36:37] <bjs> You've asked this before
[20:36:42] <bjs> rendar: they race,  either one can wake up first
[20:36:49] <bjs> or they both wake up "at the same time"
[20:37:14] <rendar> but, since we're not in multithreading programming, and we're on single thread, one will run first
[20:37:31] <stealth_> rendar, do you have a link to code?
[20:37:36] <bjs> rendar: but they're racing, you don't know which will be first
[20:37:45] <rendar> stealth_, yes but its complex, its like 1300 lines of code
[20:38:08] *** Quits: fofoni (~fofoni@user/fofoni) (Client Quit)
[20:38:10] <stealth_> rendar, just this 2 function+task you are talking about
[20:38:26] *** Quits: pro_z (~pro_z@37.214.40.135) (Ping timeout: 245 seconds)
[20:38:54] <rendar> https://bpa.st/VLKA
[20:39:10] *** Quits: me-sudoer-dentne (~me-sudoer@2405:204:549a:c220:f39a:1821:97d2:98a7) (Ping timeout: 260 seconds)
[20:40:48] <stealth_> rendar, whats up with line:16? why `{task}` ?
[20:40:55] <rendar> read the NOTE
[20:40:56] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[20:41:07] <bjs> stealth_: what should it be?
[20:42:42] <aphysically> jinsun: have you ever played with mypyc? playing with it now; the errors aren't always especially  helpful
[20:43:40] <stealth_> bjs, i would assume it should be without iterable but i guess its a feature now
[20:43:46] <bjs> stealth_: "now" ?
[20:43:55] <stealth_> bjs https://docs.python.org/3/library/asyncio-task.html#asyncio.wait
[20:44:02] <rendar> bjs, thing is, _run_core will wait tasks and clean up associated internal dictionaries, while the wait() function, is an user function that will simply wait the task and return the result, i want to avoid that the task doesn't exist anymore
[20:44:02] <bjs> stealth_: yes, I'm confused what you meant by "now"
[20:44:09] *** Joins: loki_val (~crabbedha@user/crabbedhaloablut)
[20:44:38] <bjs> rendar: what do you mean by "doesn't exist anymore"
[20:44:46] <SnoopJ> aphysically, it's come up here from time to time, it seems pretty good
[20:44:53] * SnoopJ hasn't used it, though
[20:45:04] <stealth_> bjs, as in, i am not sure why they made it so you are passing it iterable
[20:45:29] <stealth_> bjs, makes more sense to pass it coro since you would be waiting for it!
[20:45:33] <aphysically> since I went through all the trouble to strictly type my code I might as well play with it I think SnoopJ, although not gonna ship the binary from it or anything
[20:45:36] <bjs> stealth_: ... no infact you're not allowed to pass coros to it
[20:46:19] <rendar> bjs, there are 2 waits: 1) wait the task, removes it from internal dicts -- 2) get the task from an integer id (with that internal dict), wait that task and return the result --- do you think i'd get a race condition here?
[20:46:46] <bjs> rendar: I mean there's a race obviously,  but whether it matters? not really
[20:47:08] <bjs> stealth_: passing coros to wait() is deprecated and infact will be totally forbidden in the next Python version
[20:47:11] *** Quits: emf_ (~emf@2620:10d:c090:400::5:3586) (Ping timeout: 245 seconds)
[20:47:15] <SnoopJ> aphysically, of all the ways to write an extension module, there are certainly worse ones :)
[20:47:25] <stealth_> looks like you pass coro to wait_for()
[20:47:51] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[20:48:28] <rendar> bjs, shouldn't we avoid every race condition?
[20:48:49] <stealth_> how can there be race in async?
[20:49:01] <bjs> rendar: no.. I mean existence of races is what concurrency is really.
[20:49:28] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:49:30] *** Joins: me-sudoer-dentne (~me-sudoer@2405:204:51a4:9465:51f0:3c68:b150:1ace)
[20:49:38] <bjs> stealth_: `await asyncio.gather(print_1(), print_2())`  <- here the two functions can race,  there's no defined order in which they execute and if they contain other awaits then they can interleave freely
[20:49:49] <aphysically> fighting nebulous errors now https://bpa.st/CGXQ
[20:50:03] <rendar> bjs, you mean that in most concurrency parts, races are not dangerous
[20:50:15] <SnoopJ> rendar, we only care about racing when order actually matters to program correctness
[20:50:25] <bjs> rendar: yeah,  lots of things are races they really only matter if something goes wrong
[20:50:32] <rendar> well, true
[20:50:38] <rendar> that may be true even for threading
[20:50:53] <SnoopJ> (and it's often hard to tell what will or won't affect program correctness, so the tendency is to avoid them, but they aren't verboten if you can be *sure* about correctness)
[20:51:01] <stealth_> bjs how is that race? you meant race condition? or something else?
[20:51:02] <bjs> rendar: it's true for all concurrency,  infact if you have concurrency without races some might argue you don't have concurrency at all
[20:51:05] <rendar> SnoopJ, yes, wise words
[20:51:17] <rendar> bjs, true!
[20:51:59] <bjs> stealth_: what do you mean "how is that a race?"
[20:52:14] <rendar> i don't think correctness is broken because task result is saved into the Task object, and once the second wait will get tasks by their integer id, those won't get garbage collected
[20:52:41] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 252 seconds)
[20:52:50] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[20:53:07] <bjs> rendar: yes you can wait on the same future (e.g. a task) multiple times.  Things won't get gc'd until there's no references left.
[20:53:09] <stealth_> bjs, there is no order in which those function will get run or which one will finish first, not sure what that has to do with race condition
[20:53:25] <bjs> stealth_: ... you just defined race condition
[20:53:39] <stealth_> bjs, what data would those 2 function be trying to change at same time to rigger a race condition?
[20:53:50] <bjs> stealth_: are you confusing race condition with "data race"
[20:54:40] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:54:43] <bjs> usually data race means something specific (and often, though not always "bad").  races (or race conditions) is a broad generic term
[20:54:47] <bjs> usually
[20:54:54] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 245 seconds)
[20:55:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:55:46] *** Joins: nomic (~nomic@185.192.69.208)
[20:56:41] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:56:50] <stealth_> bjs is this unique to asyncio?
[20:56:54] <bjs> stealth_: no
[20:56:55] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[20:57:02] <SnoopJ> it might be helpful to think about it in terms of the arbitrariness of execution order. A "race" happens any time that you might have A,B or B,A. It's a problem if the program isn't correct for some possible orderings, frequently when the execution involves writes.
[20:57:14] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:57:26] *** Joins: sgn (~sgn@user/sgn)
[20:57:33] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:57:57] <stealth_> what does it matter which function gets run first? its async! its what task gets finished first gets processed.
[20:58:10] <bjs> stealth_: in this case, it doesn't matter, so it's not an issue
[20:58:57] <stealth_> if you want order, then you use locks/links/whatever the frameworks calls it
[20:59:09] <bjs> stealth_: yes, and that's how you can prevent races
[20:59:19] <bjs> here there is no need. there is a race, but it's not an issue.
[20:59:40] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:00:37] <bjs> (although technically with locks you don't actually prevent races,  you just move them to be races on the lock itself, which is a safer kind of race)
[21:00:49] <stealth_> i call it order vs race
[21:01:05] <jinsun> aphysically: no haven't used mypyc myself, I thought the errors would be same as mypy, and didn't really care about the performance improvement
[21:01:18] <stealth_> race is more like 2 threads modifying 1 memory block/value at same time
[21:01:25] <bjs> stealth_: inventing your own terminology that uses the same word but with different meaning is an interesting decision :)
[21:01:37] <stealth_> bjs :D
[21:01:50] *** Joins: emf (~emf@163.114.132.6)
[21:01:58] <bjs> stealth_: but if you do that, you can't then turn around and go "But how is that a race?  MY definition of race is totally different!"
[21:02:05] <bjs> ;)
[21:02:09] <stealth_> bjs i feel like this "race" was ported to async from thread and losts its actual meaning
[21:02:23] <bjs> stealth_: how did it lose its meaning?
[21:02:44] *** Joins: khrbt (~znc@user/khrbt)
[21:02:56] <stealth_> bjs cause you are not getting a race condition in async, you are having order/sequence issues or waiting
[21:03:02] <bjs> I mean we can talk about races between threads,  but also races between processes, races between whole computers or networks or servers
[21:03:10] <bjs> or even races between two bits of wire in the same circuit
[21:03:30] <aphysically> idk I'm guessing I'm just doing something mypyc doesn't support yet so I'll give up on it for now
[21:03:39] <bjs> it all means the same thing,  that the order is unspecified and the order that things happen in means the program does different things
[21:03:45] <bjs> program/system/whatever
[21:03:51] <stealth_> bjs in the library i use you "IOSQE_IO_LINK" there is no race!
[21:03:59] <jinsun> aphysically: usually making C extensions is something I want someone else to deal with and just provide to me :D
[21:04:05] <aphysically> SnoopJ: yes I reported a bad (to me) race in the rich TUI library ;[
[21:04:18] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:04:21] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:04:33] <bjs> stealth_: if you have a concurrent program you can't get rid of races.
[21:04:38] <bjs> If there are no races, it's just not concurrent
[21:05:12] <stealth_> bjs, don't you get anymore concurrent then io_uring
[21:05:33] <bjs> stealth_: yes and when you write programs using it there's lots of races
[21:05:38] <bjs> but totally harmless innocuous ones
[21:05:48] <SnoopJ> bjs, I think it probably depends on what exactly makes arbitrary ordering a race? Not sure if CS has a formal definition
[21:06:38] <bjs> SnoopJ: it's a race "if the order matters",  it might matter for the program semantics but not its correctness
[21:06:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[21:07:01] <stealth_> that's order of execution
[21:07:16] <bjs> stealth_: yes, and if the order of these things matter, it's a race
[21:07:55] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[21:08:07] <stealth_> bjs if order matter and you haven't linked the task, you get garbage data. you are calling that race?
[21:08:44] <bjs> stealth_: yes, any time the system could do things in different orders and the program does something different you have a race condition of some form.
[21:08:45] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[21:08:54] <SnoopJ> bjs, yea, seems like it gets pretty wibbly. I guess probably a lot of bugs originate because "correctness" is a moving target as software grows. An innocuous race today might be a critical vulnerability tomorrow.
[21:09:55] *** Quits: ripdog (~quassel@user/ripdog) (Quit: ripdog)
[21:10:00] <stealth_> SnoopJ, we all fall for that pitfall, i just did the other day cause i forgot to link them together!
[21:10:03] <bjs> SnoopJ: sure and race-ness isn't dependent on correctness. You can have a totally race-free or data-race-free program that is still wrong.  You can have a program with data races that does the right thing still.
[21:10:10] * SnoopJ nods
[21:11:10] <bjs> (in languages that *allow* you to have data races that is, and don't define them away like Rust and C do)
[21:11:22] <bjs> some may debate that you can't even have a data race in Python at all because of the GIL
[21:11:29] *** Joins: nomic (~nomic@185.192.69.208)
[21:11:39] <stealth_> you wouldn't for ref count
[21:11:46] <bjs> stealth_: wouldn't what
[21:11:52] *** Quits: nomic (~nomic@185.192.69.208) (Client Quit)
[21:12:21] <stealth_> bjs, you wouldn't have race condition in ref count since there is GIL
[21:12:39] *** Joins: ripdog (~quassel@user/ripdog)
[21:13:05] <bjs> stealth_: you still have races
[21:13:12] <bjs> just not data races
[21:13:47] <stealth_> bjs, ya like this async, order on which functions gets run first and what finishes first.
[21:13:49] <bjs> (by some/usual definitions of "data race", e.g. the ones that C/C++, Java and Rust use where well-locked access are not data races)
[21:13:54] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:14:08] <stealth_> not sure what that has to do with GIL though, since that is jut a atomic counter
[21:14:41] <bjs> it's a lock
[21:14:48] *** Quits: me-sudoer-dentne (~me-sudoer@2405:204:51a4:9465:51f0:3c68:b150:1ace) (Quit: Leaving)
[21:15:01] *** Quits: e2m4n (~ezman@user/e2m4n) (Quit: leaving)
[21:15:14] <stealth_> bjs, only really matters if you are using threads
[21:15:16] <bjs> by holding the lock you prevent data races (by some peoples definition).  Since pretty much all accesses in Python are protected by the GIL, it's pretty much impossible to get data races (following the C/Java/Rust definition of data race)
[21:16:28] *** Quits: SteveR (~SteveR@192.146.154.3) (Quit: Client closed)
[21:17:01] <stealth_> ya why i was saying its not really race thing! but more order of execution + linking thing.
[21:17:22] <aphysically> jinsun: looks like no noise https://bugs.python.org/issue45384 oh well
[21:18:01] *** Joins: Akuli (~Akuli@87-94-109-27.bb.dnainternet.fi)
[21:18:24] <bjs> stealth_: look, I'm glad you have your own definition of race condition.  But you can't just go "I just invented my own definition of 'race condition' and now everyone else is wrong when they use the term the way it's written in text books" :p
[21:19:16] <stealth_> bjs its now my fault, that term shouldn't belong in async world :p
[21:19:20] *** Joins: nomic (~nomic@185.192.69.208)
[21:19:28] <bjs> stealth_: race condition?  It's a perfectly fine word
[21:19:32] <bjs> and fits the async world just fine
[21:20:05] <bjs> threads isn't the only place that has race conditions,  and race conditions have been studied and explored long long before we ever had "threads"
[21:20:30] <stealth_> maybe for you, since you can tell the difference, most ppl they are probably lost on it
[21:20:42] <bjs> Race conditions and data races have been part of the CS nomenclature for decades, long long before we got Linux or "threads" or "async" or anything like that
[21:20:44] <avu> race conditions are quite common in electronics and I think that's where the term comes from
[21:20:49] <bjs> avu: indeed
[21:21:19] *** Joins: parzival (~parzival@user/parzival)
[21:22:34] <stealth_> its better to use new words that make more sense to what the actual problem is vs a word that has a lot of baggage attacked to it!
[21:23:10] <bjs> stealth_: but the word race condition is exaclty the word rendar meant, and the word we want to describe what rendar was asking is exactly what race condition means
[21:23:35] <jinsun> aphysically: yeah probably starting a thread on the mailing list or https://discuss.python.org/ would get some discussion (if not then asssume no one is opposed to it and send the pull request :D)
[21:24:08] <aphysically> jinsun: https://mail.python.org/archives/list/typing-sig@python.org/thread/DK2Q6ZLTXFHXDRFOXS5CCDMN2OIWZIVU/ :P
[21:24:28] *** Quits: taeaad_ (~taeaad@user/taeaad) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:24:34] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[21:25:15] <avu> stealth_: I wouldn't call it "baggage", the definition has been pretty stable I think. It describes a system's behaviour being dependent on the timing/order of events it does not control.
[21:25:26] <aphysically> I was looking at the dataclasses code and I think a pull request is within my capabilities, but there's a few loose ends I didn't look into (CPython's unit testing for example?)
[21:25:46] <jinsun> aphysically: ah, maybe put in python-dev too since it affects runtime behaviour of dataclasses
[21:25:52] <aphysically> dataclasses being a python module means this is a much easier issue for me to try to do myself since I don't need to understand the C
[21:26:16] <jinsun> (the mailing list not the irc channel)
[21:26:50] <aphysically> yeah
[21:27:01] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[21:27:02] *** Quits: jonthesnow (~xizhendu@240e:82:2c02:6bd9:d86e:b38:b0bf:4133) (Ping timeout: 268 seconds)
[21:27:41] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:28:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[21:28:55] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[21:29:14] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[21:29:24] <stealth_> avu, me and bjs just argued about it, i don't wana go another round with you :p
[21:30:09] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[21:30:19] <avu> stealth_: I've read the discussion, just wanted to offer you another point of view showing how there is already a well established definition of the term that is not the definition you came up with
[21:30:48] *** Joins: fikran (~fikran@user/fikran)
[21:32:15] <stealth_> avu, if you tell someone its a race condition, they are going to scratch their head and wonder for hr what the problem would be, if you tell them they need to link, order, lock, ... then its more specific!
[21:32:37] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:33:11] *** Joins: magla (~gelignite@55d4b3fc.access.ecotel.net)
[21:34:08] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 265 seconds)
[21:34:34] <avu> stealth_: I didn't see anybody arguing for something like "just saying it's a race condition is enough to help somebody solve any problem that might occur from a race condition" so I don't quite understand why you are replying like that
[21:34:53] *** Joins: dld (~davidlowr@2620:6e:6000:2900:2184:de22:ee5e:5a79)
[21:35:58] *** Joins: parzi (~parzival@user/parzival)
[21:36:37] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[21:37:08] <stealth_> avu, cause ppl come here to get help with their code and such, just throwing fancy word at them, isn't going to help them vs being specific as to what they need to do!
[21:38:19] <avu> stealth_: again, I didn't see anybody arguing that just saying that word to people constitutes acceptable help
[21:38:21] *** Quits: parzi (~parzival@user/parzival) (Client Quit)
[21:39:49] *** Quits: parzival (~parzival@user/parzival) (Ping timeout: 252 seconds)
[21:40:37] *** Joins: taeaad (~taeaad@user/taeaad)
[21:41:50] <stealth_> avu, i don't know about you but bjs and is a pro and they know exactly what race condition means and all its quarks. ppl trying to learn isn't going to know all that.
[21:41:55] *** Quits: Goblins (~mz@12.231.191.170) (Quit: Leaving.)
[21:43:16] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:44:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[21:46:15] <bjs> stealth_: when dealing with concurrency, "race condition" is not some fancy word it's a fundamental concept that people *must* understand to be able to write correct code.  Also I wasn't the one who mentioned races.
[21:47:17] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[21:47:19] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[21:47:40] *** Joins: paul424 (~tom@ip-37-248-152-97.multi.internet.cyfrowypolsat.pl)
[21:47:52] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:49:23] <stealth_> bjs, ok
[21:50:49] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 252 seconds)
[21:52:17] *** Joins: sandbox (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[21:52:17] *** sandbox is now known as Spawns_Carpeting
[21:52:29] *** Joins: Goblins (~mz@12.231.191.170)
[21:52:32] *** Joins: bloody_ (~bloody@user/bloody)
[21:55:44] *** Quits: bloody (~bloody@user/bloody) (Ping timeout: 245 seconds)
[21:55:49] *** bloody_ is now known as bloody
[21:57:04] <rjwiii> Is there any documentation on the structure of the "Error" object returned by a try...except block?
[21:57:07] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[21:57:40] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[21:58:09] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[21:58:15] <SnoopJ> rjwiii, not all try/except clauses do, but it sounds like you want to read about Exceptions: https://docs.python.org/3/library/exceptions.html
[21:58:39] <hexnewbie> rjwiii: Do you mean the exception that you caught within the ‘... as var’ part of the statement?
[21:58:54] <SnoopJ> it's not uncommon for an `except` body to complete without raising a new exception or re-raising the one that was caught
[21:59:07] <bjs> rjwiii: it's called an Exception,  they're just ordinary Python objects but they inherit from Exception which will have an .args attribute.  More specific types may have other attributes too https://docs.python.org/3/library/exceptions.html#built-in-exceptions
[21:59:10] <bjs> rjwiii: if that's what you mean
[22:01:13] <rjwiii> hexnewbie: Yes ... I'm I'm debugging "not my code" and the original author tried to concatenate the "Error" in a string passed to the logging module ...
[22:01:50] *** Joins: bloody_ (~bloody@user/bloody)
[22:02:33] <rjwiii> hexnewbie: Of course, there are zero comments in the code ... :(
[22:02:43] *** Joins: bloody__ (~bloody@user/bloody)
[22:03:01] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[22:03:48] *** Joins: bloody___ (~bloody@user/bloody)
[22:03:56] *** Quits: bloody___ (~bloody@user/bloody) (Client Quit)
[22:04:25] <hexnewbie> I'm averaging about 1 comment per 100 lines, and that's if we include the ones that say “FIXME: Wait, why did I do this?”
[22:04:49] *** Joins: pycurious (~Adium@user/pycurious)
[22:05:33] *** Quits: bloody (~bloody@user/bloody) (Ping timeout: 265 seconds)
[22:05:34] *** Quits: legola (~legola@46.235.101.220) (Remote host closed the connection)
[22:05:55] <rjwiii> hexnewbie: I liberally comment ... I have to tell myself what I was thinking when I wrote the code in the first place ... :)
[22:06:09] *** Joins: bloody (~bloody@user/bloody)
[22:06:19] <sartan> i try to use git commit messages pretty heavily in addition to comments
[22:06:23] <sartan> atomic commits whenever possible
[22:06:31] <sartan> i'm pretty verbose
[22:06:41] <rjwiii> hexnewbie: this is Python 2.7 to boot ...
[22:06:46] *** Quits: bloody_ (~bloody@user/bloody) (Ping timeout: 252 seconds)
[22:06:48] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:07:24] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:07:24] *** Quits: bloody__ (~bloody@user/bloody) (Ping timeout: 245 seconds)
[22:07:25] * SnoopJ writes a fair number of 'why' comments, or ones that reference supplementary information
[22:08:42] <rjwiii> bjs: Thanks ... I'm reading that page now ... what I'm looking for is a layout of what is in the "Error" object so I can log the necessary information ...
[22:08:53] <hexnewbie> I learned that when you have code that you wrote that's incomprehensible (most often in the sense that it *appears* that it should not be there and it makes no sense to exist), a good way to figure what it does is to remove it. Then things break.
[22:09:18] <bjs> rjwiii: you keep saying "Error" but I'm not sure if you mean Exception object or whether you're referring to something specific
[22:09:19] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[22:09:25] *** Quits: jazzy (~jaziz@172.58.28.72) (Ping timeout: 265 seconds)
[22:09:58] <bjs> rjwiii: but, if you're using logging you can pass exc_info=... to the log call and the logging framework will log the exception and traceback and details for you
[22:10:23] <hexnewbie> rjwiii: import traceback; try: ... ; except Exception as exc: logging.debug("Kermit dropped %s: %s\n%s", type(exc).__name__, exc, traceback.format_exc())
[22:10:32] <bjs> like `logger.warning("oops there was an error", exc_info=sys.exc_info())`  inside the `except`
[22:10:36] *** Joins: bloody_ (~bloody@user/bloody)
[22:10:40] *** Quits: bloody_ (~bloody@user/bloody) (Client Quit)
[22:10:44] <hexnewbie> oh, didn't know about exc_info
[22:11:36] <hexnewbie> It does even work in Python 2.7, so it's not a new thing.
[22:13:14] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:13:15] <rjwiii> hexnewbie: but it's 2.7 .... eeeeeewwwwww
[22:13:17] <rjwiii> :)
[22:13:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:13:45] <rjwiii> They have RHEL 7 servers ...
[22:14:06] <hexnewbie> I couldn't even use Python 3.x until I stopped getting import errors for my dependencies somewhere around 2018
[22:14:09] *** Joins: jazzy (~jaziz@172.58.39.11)
[22:14:22] <rjwiii> python 2.7 == no "f" strings ...
[22:14:22] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[22:14:28] *** Quits: bloody (~bloody@user/bloody) (Ping timeout: 252 seconds)
[22:15:01] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[22:15:40] *** Quits: magla (~gelignite@55d4b3fc.access.ecotel.net) (Quit: Stay safe!)
[22:15:45] <SnoopJ> f-strings perfectly demarcate the boundary between deprecated and not-deprecated Python...for another two months :)
[22:18:58] <mefistofeles> I was thinking about ordered dicts as well, but I think f-strings do a better job at that :P
[22:19:14] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[22:19:23] <mefistofeles> also, I just realized that order in dicts is kinda accidental and not to be relied upon
[22:19:54] <jinsun_> only for 2 months
[22:20:11] <ksu> on cpython, you can rely on it
[22:20:41] <sartan> I thought i read somewhere that although it was accidently support for the feature will be maintained?
[22:21:04] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-84ec-26e7-f43c-0412.res6.spectrum.com)
[22:21:05] <SnoopJ> mefistofeles, it's a language feature starting in 3.7, so it will be a demarcation line soon
[22:22:05] <SnoopJ> but it's a coincidental property in 3.6 and it would be unwise to rely on it unless you're absolutely sure your code won't run on <=3.6 (and even then, it's not like OrderedDict costs you anything)
[22:22:40] <mefistofeles> ksu: I was reading this https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation
[22:23:01] <mefistofeles> specially the part that says "The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon"
[22:23:09] *** spiderman is now known as BritneySpears14
[22:23:16] *** BritneySpears14 is now known as spiderman
[22:23:54] <sartan> Yeah, what snoop said
[22:23:56] <ksu> yes, but they changed their mind later, as snoopj says
[22:24:28] <mefistofeles> ok
[22:24:42] <mefistofeles> I was actually in this very moment writing some software that does rely on dicts being ordered
[22:24:45] <mefistofeles> so I was wondering
[22:26:16] <SnoopJ> "Changed in version 3.7: Dictionaries did not preserve insertion order in versions of Python before 3.6. In CPython 3.6, insertion order was preserved, but it was considered an implementation detail at that time rather than a language guarantee." per the 'Mappings' section in https://docs.python.org/3/reference/datamodel.html
[22:27:05] <SnoopJ> it's a cute side effect of optimizations for other reasons, and they decided (wisely, imo) that people are going to rely on it anyway, might as well make it a language feature
[22:27:28] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[22:28:56] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[22:29:33] *** Quits: pycurious (~Adium@user/pycurious) (Read error: Connection reset by peer)
[22:29:36] *** spiderman is now known as iphone
[22:29:52] *** Quits: iphone (~iphone@user/spiderman) (Changing host)
[22:29:52] *** Joins: iphone (~iphone@user/iphone)
[22:30:07] *** Joins: pycurious (~Adium@user/pycurious)
[22:30:10] *** iphone is now known as spiderman
[22:30:33] *** Quits: spiderman (~iphone@user/iphone) (Changing host)
[22:30:33] *** Joins: spiderman (~iphone@user/spiderman)
[22:30:47] *** Joins: kosh (~kosh@user/kosh)
[22:32:29] *** Joins: vicfred (~vicfred@user/vicfred)
[22:32:58] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[22:33:12] *** Quits: Goblins (~mz@12.231.191.170) (Quit: Leaving.)
[22:33:30] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[22:33:30] *** Joins: gloin (~gloin@user/gloin)
[22:34:58] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[22:35:06] <sartan> i make tremendous use of ordered dicts, nested ordered dicts, defaultdicts, etc. it would be lovely to just.. no longer have to worry about all the overhead
[22:35:17] <sartan> one day will get out of 2.7
[22:36:35] <sartan> i'm curious if anyone knows whether json.loads in 3.7+ also preserves order top-to-bottom when parsing the json doc, or you still have to do object_pairs_hook=OrderedDict
[22:37:05] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:37:52] <sbrown> sartan: when you say "no longer have to worry about all the overhead" do you mean logical overhead, like the added logic needed to call the correct object?
[22:37:58] <sartan> yes sbrown
[22:38:38] <sartan> it's tedious
[22:38:38] *** Quits: dld (~davidlowr@2620:6e:6000:2900:2184:de22:ee5e:5a79) (Ping timeout: 260 seconds)
[22:38:58] <sartan> things go in and out of json all over the place for various reasons, and i have to constantly implement custom sorting whenever it loads and dumps again
[22:39:03] *** Joins: _xor (~xor@72.49.199.147)
[22:39:26] <sartan> performance wise it's fine, but it's a lot of annoying code to wrap around hundreds of places
[22:39:27] <hexnewbie> I'm feeling awkward that I have two regular dicts (added after I decided not to support Python versions prior to the change), among a sea of OrderedDict calls
[22:39:37] <hexnewbie> it feels like those two are wrong.
[22:39:50] <bancroft> I'm having a brain fart, i'm using subprocess.run to run a bash script on a remote machine. I'm not using python fabric because of a lack of color support, and TLDR no ansible or terraform please. Now, subprocess.run will show the output in real time but if the bash script fails, the subprocess.run doesn't raise an exception so I could recover. How do I get it to raise an exception because
[22:39:52] <bancroft> check,shell, stderr, stdout all seems to stop the realtime output of the command.
[22:39:53] *** Joins: water_27300935_ (~xe@182.90.129.190)
[22:40:21] *** Parts: water_27300935_ (~xe@182.90.129.190) (WeeChat 3.3)
[22:40:43] <bancroft> and it's the same with check_output, unless i'm overlooking something which I probably am
[22:41:38] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 246 seconds)
[22:41:42] <sartan> you need to buffer the file descriptors for stderr and stdout
[22:41:53] <sartan> to get them in realtime during code execution you'll havce to tee them
[22:42:16] *** Quits: irrgit_ (~irrgit@192.241.175.183) (Remote host closed the connection)
[22:42:35] *** Joins: irrgit_ (~irrgit@192.241.175.183)
[22:42:42] *** Joins: Goblins (~mz@12.231.191.170)
[22:42:43] <bancroft> sartan: so shell=True and add ["|", "tee"] at the end?
[22:42:53] <sartan> not exactly, let me see if i can find a recipe
[22:42:58] <sartan> it can be complicated
[22:43:28] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[22:43:37] <sartan> I just want to check a couple questions before i go down into this rabbit hole; you want to execute a process and capture its output for some processing logic later -- but do you want to see the output _during_ execution as well as capturing its output?
[22:43:38] <hexnewbie> bancroft: This works for me for commands that *actually fail*: https://bpa.st/MSCA
[22:43:51] *** peeps[zen] is now known as peepsalot
[22:44:25] <sbrown> sartan: for wrapping old behavior, I've been adding compatibility submodules to some projects -- using a pattern something like this  https://bpa.st/ELUA
[22:44:56] *** Joins: Betal (~Betal@user/betal)
[22:45:11] <sartan> when i said tee, i meant some fcntl madness
[22:45:17] <ksu> if you want to get the results interactively, you need Popen
[22:45:28] <han-solo> sbrown: isn't that why `six` exists ? :)
[22:46:21] <ksu> with stdin = subprocess.PIPE, stdout = subprocess.PIPE
[22:47:02] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[22:47:17] <hexnewbie> Well, the default if you don't pass stdin=, stdout= is to actually pump them to the TTY, which is interactive for one meaning of the word
[22:47:33] <hexnewbie> Actually, one of my examples accidentally did display realtime stderr
[22:47:40] <sbrown> han-solo: yes it is, but I'm reluctant to add a dependency when I can easily handle the few changes I need (it's a personal choice and I've sort of made a sport out of seeing how many versions I can support)
[22:47:56] <sartan> display in realtime and capture after the fact at same time is complicated
[22:47:58] <han-solo> sure :)
[22:47:59] <sartan> are you sure you need to do it
[22:48:00] <bancroft> sartan: I don't need the output really, just want to see it stream in terminal because there are some TLi user interactions. This is the whole sha-bang if you want all the details. bash -> python subprocess.run -> bash script on remote that ends in exec "$@" that runs a ansible playbook
[22:48:34] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[22:48:34] <sbrown> han-solo: And I'm not advocating for my approach -- real humans that need to GSD should totally use six.
[22:48:46] <ksu> also you need to flush() your data when communicating through pipes
[22:48:57] <peepsalot> i'm looking at making a python script to benchmark a number of subprocesses (mostly to track cpu user time and resident memory, in a cross platform compatible way).  psutil looks like the best bet so far, but i want to get this info just before the subprocess is done.  is there any standard way to do something like that?
[22:49:05] <hexnewbie> bancroft: subprocess.check_call() seems to be the one that you want?
[22:50:54] *** Quits: paul424 (~tom@ip-37-248-152-97.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[22:51:09] <bancroft> sartan: and the subprocess call is a long ssh command
[22:51:41] <bancroft> hexnewbie: i'll try it :)
[22:52:28] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Read error: Connection reset by peer)
[22:53:06] <peepsalot> i'm guessing i might need to write the subprocess to signal python in some way, and wait just before exiting.  then the python parent can take measurement and kill the child when its done
[22:53:11] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[22:53:59] *** Quits: bluss (~bluss@user/bluss) (Ping timeout: 268 seconds)
[22:54:29] *** Joins: bluss (~bluss@user/bluss)
[22:54:40] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[22:55:40] <sartan> i've got a small recipe for executing ansible-playbook and capturing status execution success/fail, hang on let me see if i can remove some stuff and share it
[22:55:46] *** Quits: y1n-v1 (~y1n@178.165.204.179.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[22:57:07] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[22:58:20] *** Joins: Gudddu (~Guddu@190.84.88.92)
[22:59:07] *** Joins: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[22:59:15] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[22:59:16] *** Quits: jazzy (~jaziz@172.58.39.11) (Ping timeout: 245 seconds)
[22:59:18] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Read error: Connection reset by peer)
[23:00:40] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 252 seconds)
[23:00:58] <sartan> i sent you a pm
[23:01:08] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 265 seconds)
[23:01:12] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[23:01:13] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[23:01:46] *** Quits: greatgatsby__ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Ping timeout: 252 seconds)
[23:02:07] *** Quits: duoi (~duoi@user/duoi) (Ping timeout: 240 seconds)
[23:02:19] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Ping timeout: 252 seconds)
[23:02:19] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 252 seconds)
[23:02:19] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 252 seconds)
[23:02:24] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[23:02:38] <sbrown> han-solo: actually, I *am* advocating for a similar approach but only if it can be handled quickly and reliably
[23:03:00] <sartan> This snippet does not stream its output during execution, it's buffered for analysis afterward.. not quite your use case
[23:03:14] <sbrown> han-solo: The `mock` package used a similar idea to good effect a long time ago https://github.com/testing-cabal/mock/blob/51346f488cd28e6a9a6727901922a4cff2df3714/mock/mock.py
[23:03:25] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[23:03:25] *** Quits: shodan45 (~quassel@107.161.22.155) (Ping timeout: 252 seconds)
[23:03:35] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[23:03:41] *** Joins: shodan45 (~quassel@107.161.22.155)
[23:03:49] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[23:03:53] *** Joins: cheater (~Username@user/cheater)
[23:03:58] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[23:04:11] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[23:04:35] *** Quits: junktext (~junktext@77.247.181.218) (Remote host closed the connection)
[23:04:39] *** Joins: duoi (~duoi@user/duoi)
[23:04:42] <han-solo> peepsalot: maybe a naive approach, but have the process run using `Popen`, so you will get the pid, use that pid with the psutil and collect the stats until the process.wait() is done ?
[23:04:49] <stewie925> I am trying to submit my code to leetcode but its giving me grief :(
[23:04:58] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[23:05:04] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Ping timeout: 252 seconds)
[23:05:04] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Ping timeout: 252 seconds)
[23:05:12] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[23:05:44] <stewie925> https://bpa.st/MJRA
[23:05:44] *** Joins: junktext (~junktext@109.201.152.171)
[23:05:46] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:06:04] <han-solo> sbrown: ah, personal preference i guess ':). I wouldn't want to write all that, and keep up with the changes, if someone has already written that for me :)
[23:06:31] *** Quits: Goblins (~mz@12.231.191.170) (Remote host closed the connection)
[23:06:33] <stewie925> I created a program that should run with 5sum, 4sum, 3sum, and 2sum - trying to customize it so I could test that with 4sum
[23:06:43] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[23:07:07] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:50da:5207:5652:613a) (Quit: Client closed)
[23:07:09] <mefistofeles> stewie925: so you either want to pass self there to the fourSum method, or make it a static method
[23:07:14] <jinsun> stewie925: why did you comment out the def line that they provided and wrote your own?
[23:07:14] <mefistofeles> bye xD
[23:07:22] <mefistofeles> jinsun: they left
[23:07:29] <jinsun> ah
[23:08:54] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:50da:5207:5652:613a)
[23:09:03] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[23:09:04] <stewie925> sorry I closed the browser by mistake
[23:09:49] <han-solo> 09:52 < mefistofeles> stewie925: so you either want to pass self there to the fourSum method, or make it a static method
[23:09:54] <han-solo> 09:52 < jinsun> stewie925: why did you comment out the def line that they provided and wrote your own?
[23:10:15] <stewie925> thank you han-solo!
[23:10:24] <mefistofeles> han-solo: and you get the credit! :)
[23:10:25] <mefistofeles> hahaha
[23:10:32] <han-solo> i helped :D
[23:10:33] <stewie925> thank you mefistofeles and jinsun!
[23:10:36] <mefistofeles> haha just jk
[23:10:39] <han-solo> ik
[23:10:55] <stewie925> hahaha - han-solo reposted your inputs, mefistofeles
[23:11:04] <mefistofeles> stewie925: yeah, no worries
[23:11:16] <stewie925> let me put back the self...
[23:12:11] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[23:12:13] *** Quits: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[23:12:38] *** Joins: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr)
[23:13:41] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[23:14:58] *** Quits: spenat (~spenat@c-1125235c.012-6-62726f1.bbcust.telenor.se) (Ping timeout: 252 seconds)
[23:19:57] *** Joins: water_27300935_ (~xe@182.90.129.190)
[23:20:45] <water_27300935_> numpy not support Python 3.10?
[23:20:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[23:21:07] *** Quits: devios (~devios@75-166-173-50.hlrn.qwest.net) (Ping timeout: 268 seconds)
[23:21:13] <han-solo> in a couple of days
[23:21:16] <han-solo> or weeks ?
[23:21:23] <han-solo> 3.10 is very new, right ? ':)
[23:21:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:21:28] <grym> wheels are up no
[23:21:29] <grym> w
[23:21:31] <grym> https://pypi.org/project/numpy/#files
[23:21:38] <han-solo> oh, cool
[23:21:46] <grym>  numpy-1.21.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl looks promising, right
[23:21:49] <han-solo> oh yes, indeed
[23:21:51] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[23:22:12] <grym> what i don't know is whether- or if - old versions will get wheels
[23:22:16] <han-solo> wait
[23:22:42] <grym> numpy dropped 3.6 support early -- there's a NEP about this somewhere
[23:23:11] <grym> https://numpy.org/neps/nep-0029-deprecation_policy.html
[23:23:41] <jinsun> yeah numpy supporst python only for 42 months instead of 60
[23:24:01] *** Joins: jazzy (~jaziz@172.58.36.71)
[23:24:06] <grym> yup
[23:24:10] <jinsun> s/supporst/supports
[23:24:17] <grym> which explains a bit about why i never learned py2
[23:24:28] <Gudddu> Could someone please tell me what is the best way to download all the dependencies required by requests and twisted module so that I can take them over to install on a server which does not has internet?
[23:24:37] <grym> Gudddu: `pip wheel`
[23:25:17] <Gudddu> grym, Thanks. I Should do that on a server which has internet and same python version etc right?
[23:25:24] <Gudddu> Does it has to be the same OS also?
[23:25:29] <grym> Gudddu: as close to identical as possible
[23:25:41] <grym> you can do it in a docker container, even
[23:26:29] <han-solo> grym: the upload date is Aug 16, but the official release was only couple of days ago, right ?
[23:26:46] <dman777> I have 'class GetMeApi(token): ...' but then I got token is not defined error. But when I place 'class GetMeApi(object): ...' I do not get that error. Why is that?
[23:27:06] <grym> han-solo: yep
[23:27:25] <han-solo> maybe it doesn't matter i guess ':)
[23:27:28] <avu> dman777: the thing between the parens is the superclass and it needs to exist
[23:27:43] *** Joins: wolfdale8 (~wolfdale@ec2-3-0-147-70.ap-southeast-1.compute.amazonaws.com)
[23:27:48] *** Joins: Jmtrix (~qed@user/jmtrix)
[23:27:59] <avu> dman777: are you maybe trying to create a class that takes a `token` parameter when it's instantiated?
[23:28:12] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 265 seconds)
[23:29:13] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[23:29:33] *** Joins: alzgh (~alzgh@user/alzgh)
[23:29:36] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[23:30:54] <aphysically> jinsun: playing around with mypyc I caught a bug! Do you remember that ffprogress generic class I was instantiating?
[23:31:04] <aphysically> it was in a dataclass! Should have been a default_factory
[23:31:08] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[23:31:15] <dman777> avu: yes
[23:31:30] *** Quits: jabberwock (~jessy@idlerpg/player/jabberwock) (Remote host closed the connection)
[23:31:33] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:7508:7cb8:4794:2754)
[23:31:47] <avu> dman777: then that would be an argument to the __init__ method of that class
[23:31:58] <avu> dman777: or maybe what you really want is just a function?
[23:32:24] *** Parts: water_27300935_ (~xe@182.90.129.190) (WeeChat 3.3)
[23:32:28] *** Joins: schumaml (~schumaml@p200300e2ef0b030053c1821a43d17d29.dip0.t-ipconnect.de)
[23:32:40] <jinsun> aphysically: oh ya, does mypyc complain if you call functions when defining default args
[23:33:32] <aphysically> the problem was mypyc has a special native implementation of dataclasses that's not fully compatible with normal dataclasses; this clashed with two ways i was using my dataclass there:
[23:34:03] <aphysically> 1) I was (by bug) trying to set one of the dataclass members to a mutable, which mypyc warns is unsupported (good! it was a bug!)
[23:34:33] <aphysically> 2) I was accessing the default values of the dataclass via the class namespace in a few spots, and mypyc's native implementation doesn't support this (need to make it an instance)
[23:34:55] <aphysically> 2) is a bit annoying but probably a "reasonable" limitation
[23:35:26] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[23:35:41] *** Joins: dagwood (~NooneOfCo@pool-108-45-46-117.washdc.fios.verizon.net)
[23:36:25] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 252 seconds)
[23:37:26] <jinsun> ah it complains about mutable default, which is better
[23:38:02] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[23:38:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:38:54] <aphysically> none of my linters or anything caught that, probably because it's hard in general to tell
[23:40:08] *** Joins: fikran (~fikran@user/fikran)
[23:41:08] <jinsun> yeah that is not really a type error, maybe something for pylint to catch (pylint does catch it, but only for defs, not dataclasses, and only a few hardcoded mutable things like list and dict)
[23:43:33] <aphysically> another thing that I would have to refactor to fix is it doesn't like my nested class
[23:44:18] <aphysically> it's not as awful as it sounds, it's this: https://github.com/GBeauregard/pyffstream/blob/b82b9b6250ae2e309769443bc73af5a37b84c4f0/src/pyffstream/encode.py#L317
[23:44:38] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:e4ec:c443:b98c:2c06) (Remote host closed the connection)
[23:44:50] *** Quits: wolfdale8 (~wolfdale@ec2-3-0-147-70.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[23:45:39] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:46:30] *** Joins: wolfdale8 (~wolfdale@ec2-3-0-147-70.ap-southeast-1.compute.amazonaws.com)
[23:46:36] <aphysically> I also ran into this: https://github.com/mypyc/mypyc/issues/861
[23:46:54] *** Joins: henistein (~henistein@2001:8a0:c18a:f601:2196:8498:72ff:bf8e)
[23:47:04] <aphysically> mypyc doesn't support the class syntax for namedtuples yet, but I learned that typing's NamedTuple apparently supports a typed functional declaration too!
[23:47:28] *** clarjon_1 is now known as clarjon1
[23:48:11] <aphysically> this caused bugs in mypy proper recently even https://github.com/pranavrajpal/mypy/commit/3a592031b47b18ace05fd0feeeaa1c22db164a35
[23:48:17] *** Joins: bloody (~bloody@user/bloody)
[23:48:51] <aphysically> mypyc doesn't like my get_stream_list function in cli.py but the error was so nebulous i replaced it with a stub function so I could get a handle on what kind of other errors it had about my code
[23:50:05] <aphysically> another change I had to make was to the singledispatch again! mypyc's singledispatch implementation requires all the singledispatch to be subtypes of the base function, so it basically means the base function needs to be one of object that throws error or the like
[23:51:42] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[23:51:56] *** Joins: shiriru (~shiriru@user/shiriru)
[23:52:37] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:7508:7cb8:4794:2754) (Read error: Connection reset by peer)
[23:53:31] *** Quits: freeworld (~vit@85.216.193.138) (Ping timeout: 252 seconds)
[23:54:09] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:50da:5207:5652:613a) (Quit: Client closed)
[23:58:13] *** Quits: emf (~emf@163.114.132.6) (Quit: emf)
[23:58:31] *** Joins: emf (~emf@2620:10d:c090:400::5:3586)
[23:58:34] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Quit: Client closed)
[23:58:40] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
