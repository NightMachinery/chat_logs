[00:16:10] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[00:37:00] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 240 seconds)
[00:40:15] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[00:42:41] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[00:43:20] *** Joins: leah2_ (~leah@vuxu.org)
[00:45:20] *** Quits: X-Scale (~ARM@46.50.5.24) (Ping timeout: 272 seconds)
[00:45:21] *** X-Scale` is now known as X-Scale
[00:46:28] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 260 seconds)
[00:51:32] *** Joins: civodul (~user@guix/contributor/civodul)
[01:06:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:08:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:14:19] *** leah2_ is now known as leah2
[01:41:55] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Reconnecting)
[01:42:08] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:49:17] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Remote host closed the connection)
[02:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:19:31] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:21:37] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Ping timeout: 240 seconds)
[02:22:15] *** Joins: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[02:54:57] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[02:55:38] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[02:58:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:59:16] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[03:09:21] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Read error: Connection reset by peer)
[03:12:28] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[03:18:03] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 260 seconds)
[03:28:12] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:40:55] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[03:44:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:53:53] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:02:47] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:07:32] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 252 seconds)
[04:10:22] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Reconnecting)
[04:10:36] *** Joins: Mrtn[m] (~mrtnm]@2001:470:69fc:105::1f44)
[04:16:52] *** Joins: apg (~apg@71-34-103-243.ptld.qwest.net)
[04:23:40] *** Joins: badkins (~badkins@136.56.92.199)
[04:33:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:40:46] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:02:54] *** Joins: zacque (~zacque@1.32.90.32)
[05:03:31] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[05:04:31] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[05:10:05] *** Quits: rx80 (~quassel@user/rx80) ()
[05:12:15] *** Joins: rx80 (~quassel@user/rx80)
[05:13:14] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 272 seconds)
[05:18:47] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[05:25:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:27:19] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[05:27:51] *** Joins: Techcable (~Techcable@user/Techcable)
[05:36:02] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 272 seconds)
[05:37:32] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[05:42:29] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[05:42:30] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: reboot)
[05:46:53] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[05:54:59] <Mrtn[m]> If I can talk in here, does that I am registered with my nick?
[05:55:21] <Mrtn[m]> * does that mean, that I am
[05:57:29] <Zipheir> I'm not sure that follows from "if you aren't registered, you can't talk".
[05:58:18] <Zipheir> All I know at the moment is that some people had to register their nicks to talk here.  I'm not sure if that's Libera policy or if it's a bug.
[06:05:26] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:14:56] *** Joins: badkins (~badkins@136.56.92.199)
[06:19:23] <fizzie> That would be the `+q $~a` mode that's been set on this channel, which certainly isn't network-wide policy (plenty of channels allow unregistered chatter) but could be channel policy.
[06:20:42] <Zipheir> fizzie: It isn't.  How did you find that?  For me, /MODE #scheme shows only +ntz.
[06:21:07] <fizzie> Do /mode #scheme q
[06:21:51] <Zipheir> I see.
[06:22:58] *** ChanServ sets mode: +o Zipheir
[06:26:18] <Zipheir> Hmm, I don't seem to be able to disable it with /mode #scheme -q.  That's odd.
[06:26:27] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:26:46] <fizzie> Try /mode #scheme -q $~a
[06:26:57] *** Zipheir sets mode: -q $~a
[06:27:03] <fizzie> It's like a ban, it's a specific hostmask.
[06:27:04] <Zipheir> Aha!
[06:27:53] <Zipheir> fizzie: Thanks a lot for your help.
[06:27:58] *** ChanServ sets mode: -o Zipheir
[06:28:24] <Zipheir> Guess we can do without the ENTRYMSG, then.
[06:29:23] <fizzie> NP. I'd guess it might've been a leftover from a spam avoidance measure, I think that mode got recommended when there was a flood of spambots at one point.
[06:30:05] <Zipheir> Probably sometime in the very early days of libera.  Hell, maybe it was set by taylan the day he registered it.
[06:31:24] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:51:57] *** Joins: notzmv (~zmv@user/notzmv)
[06:54:20] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:56:02] *** Joins: Everything (~Everythin@37.115.210.35)
[06:57:07] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[07:06:25] *** Joins: klovett_ (~klovett@107.116.92.97)
[07:09:57] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[07:12:47] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[07:14:41] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[07:18:30] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[07:24:54] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[07:36:09] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[07:39:10] *** Joins: irontom (~user@69.174.103.168)
[07:46:11] *** Joins: m455 (~m455@user/m455)
[07:46:39] *** Quits: m455 (~m455@user/m455) (Client Quit)
[07:49:22] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:52:59] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[08:01:27] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[08:01:47] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[08:04:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:06:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:07:15] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Quit: Leaving)
[08:11:42] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[08:17:52] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Quit: Leaving)
[08:18:58] *** Joins: m455 (~m455@user/m455)
[08:54:47] *** Joins: sonny100 (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[08:55:04] *** Parts: sonny100 (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) ()
[09:05:28] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Client closed)
[09:17:47] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 256 seconds)
[09:19:03] *** Joins: badkins (~badkins@136.56.92.199)
[09:23:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:37:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:38:50] *** Quits: klovett_ (~klovett@107.116.92.97) (Quit: ZZZzzz…)
[09:57:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:59:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:08:37] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[10:11:48] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[10:12:04] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[10:42:07] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[10:42:25] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[10:57:28] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[10:57:48] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[10:59:06] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[11:16:28] *** Joins: silasfox (~sbv@p200300cec717230004f2e58485b580c9.dip0.t-ipconnect.de)
[11:48:55] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[11:49:24] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 240 seconds)
[11:50:26] *** Joins: Everything (~Everythin@37.115.210.35)
[11:58:29] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[11:58:36] <ChoHag> I've not registered on this network and I don't have trouble talking in #scheme.
[11:59:48] <ChoHag> At least, it doesn't tell me that my messages aren't getting out. It could be lying to me by omission.
[12:02:27] <ChoHag> This is the second time in recent days (that I know of) there's been some confusion surrounding that. Where is the idea that people are being silenced coming from?
[12:03:33] *** Joins: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[12:04:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[12:24:37] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:31:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:32:19] *** Joins: civodul (~user@guix/contributor/civodul)
[12:33:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[12:34:28] <amazigh> experience
[12:34:49] <amazigh> Zipheir removed the flag that required people to be registred\
[12:35:27] <dpk> ChoHag: have you been talking into the void all this time?
[12:39:53] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[12:43:06] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[12:48:20] *** Quits: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Quit: leaving)
[13:04:55] *** Joins: badkins (~badkins@136.56.92.199)
[13:05:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:06:03] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:07:34] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:07:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:07:48] *** alMalsamo is now known as lumberjack123
[13:09:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[13:14:12] *** Parts: retropikzel[m] (~retropikz@2001:470:69fc:105::14e7) ()
[13:32:26] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:38:09] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[13:38:31] <joel135> hello, is this an appropriate place for racket?
[13:38:48] <joel135> i was thinking of playing a bit with call/cc
[13:42:49] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[13:43:08] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[13:46:06] <dpk> yes, you can ask Racket questions here, but there is also #racket
[13:46:26] <joel135> ok
[13:47:39] <sham1> There is a good Scheme hiding inside Racket
[13:48:07] <sham1> #!lang racket that is, since of course the dedicated "Scheme modes" would be excelent
[13:48:55] *** Joins: worstname (~w@2601:8c1:80:70d0::f2ca)
[13:51:08] <joel135> i don't quite understand. is there a difference between #lang and #!lang ?
[13:53:09] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[13:53:28] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[13:55:26] <sham1> Me not remembering how the lang of a racket file is specified
[13:55:35] <sham1> That's the difference. One of them is correct and the other is incorrect
[13:57:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[13:58:33] <joel135> ok
[13:59:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:17:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:19:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:30:59] <joel135> first steps with call/cc :D https://paste.tomsmeding.com/9XfxhfKc
[14:48:14] *** Joins: notzmv (~zmv@user/notzmv)
[14:52:22] *** Joins: TCZ (~tcz@91.150.178.124)
[15:05:31] <amazigh> triple call/cc soon (tm)
[15:05:34] <amazigh> :)
[15:06:45] <amazigh> ChoHag: it used to be the case that you could talk, but nobody would receive your message (except some ops)
[15:10:41] <amazigh> joel135: what is your grand scheme plan machination with call/cc?
[15:12:59] <sham1> call/cc is particularly interesting once one realises that the "continuation procedure" one gets passed isn't just a single-value receiver, even though that's the most common scenario 
[15:13:16] <joel135> what do you mean sham1 ?
[15:13:45] <sham1> It leads to a trivial implementation of (values) for when it doesn't get optimized 
[15:14:23] <joel135> i don't understand
[15:14:57] <joel135> can you show that the continuation procedure isn't a single-value receiver by example?
[15:17:43] <sham1> Well, for example in the R7RS-small spec has this piece of code in it. `(define (values . args) (call/cc (lambda (k) (apply k args))))`
[15:19:41] <sham1> And if you use something like (call-with-values), you should be able to give the receiving function the values through its continuation, although I'm not sure if this would work in actuality or if it's just a conceptual example
[15:20:46] <joel135> what is values supposed to do?
[15:21:41] <amazigh> rudybot: eval: 42
[15:22:08] <rudybot> amazigh: consider (setq foo 42)(eval (quote foo))
[15:23:19] <sham1> joel135: values is how one returns, well, multiple values
[15:23:29] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[15:23:44] <joel135> i think i need an example of this example
[15:23:46] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[15:24:24] <amazigh> here is an example:
[15:24:26] <amazigh> #;arew #; (call-with-values (lambda () (call/cc (lambda (k) (k "extra" "olive") 42))) (lambda (f0 f1) (pk f0) (pk f1)))
[15:24:28] <amazigh> ;; ("extra")
[15:24:30] <amazigh> ;; ("olive")
[15:25:31] <amazigh> that one use call-with-values, that is how you would use it in a program
[15:25:51] <amazigh> in a REPL, multiple value returns produce multiple results, so it looks like:
[15:25:56] <amazigh> #;arew #; (call/cc (lambda (k) (k "extra" "olive")))
[15:25:58] <amazigh> #; "extra"
[15:26:00] <amazigh> #; "olive"
[15:27:05] <amazigh> that is, the continuation procedure of call/cc can take several arguments, which results in the continuation having multiple returned values, as if you called `values`
[15:27:10] <joel135> pk?
[15:28:29] <amazigh> e.g. #;arew #; (values "olive" "oil")
[15:28:31] <amazigh> #; "olive"
[15:28:33] <amazigh> #; "oil"
[15:28:35] <amazigh> #;arew #;
[15:28:52] <joel135> what's arew?
[15:28:59] <amazigh> pk is a debug procedure that looks like: (define pk (lambda args (write args)(newline) (car (reverse args))))
[15:29:10] <amazigh> arew is my toy system
[15:29:17] <joel135> ok
[15:29:37] <amazigh> pk will write its arguments, and return the last argument, it is very handy
[15:30:23] <amazigh> e.g. Say you have a let such as (let ((myvalue (some-complex-computation a b c))) myvalue)
[15:31:05] <amazigh> instead of going through various whoops inside the procedure `some-complex-computation` to add `display` and `newline` etc...
[15:31:11] <amazigh> you can do something like: 
[15:31:31] <amazigh> (let ((myvalue (pk 'some-complex-computation a b c (some-complex-computation a b c))) myvalue)
[15:31:51] <joel135> can you write your example using call/cc and pk ?
[15:32:02] <amazigh> what example?
[15:32:10] <joel135> #;arew #; (call-with-values (lambda () (call/cc (lambda (k) (k "extra" "olive") 42))) (lambda (f0 f1) (pk f0) (pk f1)))
[15:32:35] <amazigh> I do not understand the question. The code you pasted use both pk and call/cc
[15:32:49] <amazigh> I think I got it!
[15:33:14] <amazigh> #;arew #; (call-with-values (lambda () (call/cc (lambda (k) (k "extra" "olive") 42))) pk)\
[15:33:16] <amazigh> ;; ("extra" "olive")
[15:33:18] <amazigh> #; "olive"
[15:33:20] <amazigh> #;arew #;
[15:33:33] <amazigh> I replaced the (lambda (f0 f1) ...) with pk
[15:33:53] <joel135> ok
[15:33:55] <amazigh> the line: #; "olive" is the value returned by (pk "extra" "olive")
[15:34:16] <joel135> i don't know what call-with-values does, so is it possible to use this values pattern without it?
[15:35:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[15:35:16] <amazigh> mind the fact, that I am keen on using call-with-values, a lot of people prefer `receive` see https://srfi.schemers.org/srfi-8/
[15:35:56] <amazigh> yes, you can use receive :)
[15:36:32] *** Joins: badkins (~badkins@136.56.92.199)
[15:36:40] <joel135> does values have no meaning without introducing more primitives?
[15:36:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:36:50] <amazigh> if a procedure returns multiples values via a continuation such as the above, or via the common `values` e.g. (lambda () (values 1 2 3)) you need to either use call-with-values or receive
[15:37:14] <amazigh> I do not understand the question.
[15:37:28] <joel135> i think you answered the question j́ust now.
[15:37:42] <joel135> "you need to either use call-with-values or receive"
[15:37:49] <amazigh> the `values` primitive only exist to support returns with multiple values
[15:37:59] <joel135> i.e. i can't do without them
[15:38:16] <amazigh> with scheme or racket, returns with multiple values is different from returning an array or list
[15:38:28] <amazigh> unlike JavaScript or Python.
[15:38:41] <joel135> is this "multiple values" similar to logic programming multiple query answers?
[15:38:54] <amazigh> hmm no
[15:39:06] <joel135> then i still don't know what it is
[15:39:32] <amazigh> are you familiar with the following syntax: a, b, c = func()
[15:39:40] <joel135> in python yes
[15:39:54] <joel135> returning a tuple like "return a, b, c" or "return (a, b, c)"
[15:40:00] <amazigh> yes
[15:40:12] <amazigh> there is two ways to write that with scheme
[15:40:37] <amazigh> using a list and matching the return value of `func`: (match (func) ((a b c) ...)
[15:40:42] <amazigh> that is what python and javascript do
[15:41:00] <amazigh> or with `values` and `call-with-values`
[15:41:16] <amazigh> both approach have different performances.
[15:41:27] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[15:41:51] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[15:43:00] <joel135> ok then i understand
[15:44:39] <amazigh> re match can be rewritten a little as: (define out (func)) (match out ((a b c) ...) with python it would look like: out = func(); a, b, c = out
[15:59:06] <sham1> Of course, one need not use (values) for returning stuff, although that's where it is the most useful
[16:00:38] <sham1> For example, one can do something like (let ((x (values 1 2 3)))), where x is *something*, the spec doesn't specify what one should do here
[16:01:27] <sham1> I'd feel that erroring would be the most natural thing, but not every implementation does that
[16:06:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:08:18] <sham1> For example, chibi gives you a special list, iirc it's something like (values (1 2 3))
[16:08:22] *** Joins: seninha (~seninha@user/seninha)
[16:08:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:12:49] <sham1> Ah, it's actually `((values) 1 2 3)`
[16:30:48] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[16:34:02] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:7216:513:f2b:17c3)
[16:47:54] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:48:58] <pinoaffe> sham1: oh wow, I'd have assumed (let ((x (values 1 2 3))) x) would be guaranteed to be 1
[16:49:46] <pinoaffe> but I guess it makes sense to allow implementations to implement "multiple-values" as regular old lists
[16:51:01] <pinoaffe> though that does kinda inhibit some of the "niceties" guile offers for multiple values, such as how it interoperates with compose
[16:51:12] <pinoaffe> (I don't know how other schemes deal with this)
[16:54:31] *** Quits: worstname (~w@2601:8c1:80:70d0::f2ca) (Quit: nyaa~)
[16:56:56] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[16:58:08] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 272 seconds)
[16:59:13] <sham1> Yeah. If (values 1 2 3) should work at all with a single value receiver, I feel that it should also just return 1, like in CL. It would certainly make multiple-value returning functions more attractive since one could have the "primary" output be the first return value, and if the user needs something more, they can use let-values or receive or whatever for that
[17:08:49] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[17:09:07] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[17:11:08] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:13:07] *** Joins: civodul (~user@guix/contributor/civodul)
[17:33:07] *** Quits: rx80 (~quassel@user/rx80) ()
[17:35:23] *** Joins: rx80 (~quassel@user/rx80)
[17:47:41] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[17:48:42] *** Joins: klovett (~klovett@107.116.92.97)
[17:51:02] *** Joins: badkins (~badkins@136.56.92.199)
[17:53:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[17:54:34] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:54:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:55:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:09:04] *** Quits: ymherklotz (~ymherklot@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5) (Read error: Connection reset by peer)
[18:10:18] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[18:27:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:34:42] <amazigh> re chibi ((values) 1 2 3) maybe that is a temporary behavior, without the current trick it is not possible to tell that it is the results of a multiple return
[18:38:26] <amazigh> whatever the user does to workaround the current behavior, may or may not be useful in the future if / when multiple value return are checked.
[18:38:48] <amazigh> s/may or may not/can/
[18:39:10] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[18:39:27] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[18:41:02] <amazigh> IIRC my scheme to js toy compiler that rely on CPS does not check for multiple return values, because return values are passed as arguments of javascript functions, and javascript function have no check on the number of arguments
[18:41:52] <amazigh> it has the same behavior as CL (let ((a (call-with-values (lambda () (values 1 2 3)))) a) evalutes to 1
[18:41:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[18:43:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:45:49] <s-liao> It does not work.
[18:46:01] <amazigh> Anyway, It is unclear to me what could be the behavior of (define a (values 1 2 3)) or (let ((a (values 1 2 3))) a)
[18:46:21] <amazigh> s-liao: yes, my toy project is broken toy
[18:46:46] <s-liao> Why?
[18:46:52] <amazigh> ^^
[18:46:58] <amazigh> because!
[18:47:17] <s-liao> You do it for your purpose
[18:49:15] <amazigh> just for fun at this time :)
[18:49:28] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[18:49:31] <sham1> amazigh: while I feel that erroring out on that situation would be the "morally correct" thing to do, I'd probably go with the thing CL does and just have it so that (define a (values 1 2 3)) results in `a` having the value of `1` bound to it
[18:49:42] <s-liao> Okay
[18:49:42] <sham1> IIRC chicken also does this
[18:50:13] <sham1> Yeag
[18:50:46] <s-liao> (apply cont things)
[18:51:08] <s-liao> That is  (values things)
[18:51:11] <sham1> Yes
[18:51:38] <s-liao> (define a (values 1 2 3)) have not have the meaning
[18:52:24] <pinoaffe> in guile (define a (values 1 2 3)) is equivalent to (define a 1), which is morally correct imo
[18:52:26] <amazigh> (sorry, I was confused, I just checked (define-values (a b) (values 42 1337)) is valid construct even if I have never seen it)
[18:53:22] <amazigh> sham1: what I mean, is that this time with chibi, one needs to do something like (define a (frob (values 1 2 3))) to capture 1. If the behavior of `values` change in chibi, it will only require to change frob)
[18:55:09] <amazigh> no?
[18:57:49] <s-liao> (define sss (lambda (cont) (apply cont (list 1 2))))
[18:58:07] <s-liao> (sss +)
[18:58:17] <s-liao> (call/cc (lambda (cont) (apply cont (list 1 2))))
[18:58:32] <sham1> The most I can say is that (apply values args) is cursed
[19:00:55] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[19:00:58] <amazigh> here is a chibi REPL run:
[19:01:05] <amazigh> > (define frob cadr)
[19:01:06] *** Joins: m5zs7k_ (~m5zs7k@web10.mydevil.net)
[19:01:07] <amazigh> > (define a (frob (values 42 1337)))
[19:01:09] <amazigh> > a
[19:01:11] <amazigh> 42
[19:01:13] <amazigh> >
[19:01:34] *** m5zs7k_ is now known as m5zs7k
[19:02:19] <sham1> Yeah. I just feel like one shouldn't need frob there
[19:02:22] <amazigh> In fact if even guile behavior can be patched!
[19:02:25] <amazigh> yep1
[19:03:28] *** Joins: badkins (~badkins@136.56.92.199)
[19:07:42] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[19:08:19] <pinoaffe> sham1: I have (define (list->values list) (apply values list)) in my list of personal "utility" functions :)
[19:10:51] <pinoaffe> I tend to use it to replace `(lambda (list) (apply func list))` with `(compose func list->values)`
[19:15:10] <s-liao> apply only accept a list
[19:16:58] <pinoaffe> s-liao: yes? I don't understand your comment
[19:21:38] <s-liao> What I understood is that values and call-with-values in the function call with arglist to bind to these variables, like you have let form and  cl-destructuring-bind form to bind those variables.
[19:22:15] <s-liao> But never mess with that two kind of thing up together.
[19:24:13] <s-liao> Like they were born in the different land.
[19:26:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:28:19] *** Quits: f8l (~f8l@37.228.213.3) (Ping timeout: 256 seconds)
[19:28:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:31:41] *** Joins: badkins (~badkins@136.56.92.199)
[19:31:51] <amazigh> ahah
[19:31:54] *** Joins: f8l (~f8l@37.228.213.3)
[19:37:38] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 265 seconds)
[19:39:00] <s-liao> pinoaffe compose is a good practice like in the go language. In scheme, I have not notice too much, and should see how compose works in the scheme.
[19:39:09] *** Joins: badkins (~badkins@136.56.92.199)
[19:39:21] <amazigh> compose is not in R7RS
[19:39:45] <dpk> compose in SRFI 211 (the only 'standard' for compose in Scheme afaik) is explicitly multiple-value-capable
[19:39:55] <amazigh> and not in chez..
[19:39:57] <amazigh> yes
[19:43:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[19:45:42] <amazigh> s-liao: go has compose? 
[19:48:29] <s-liao> The interface of go language do compose, it is quite strong. I am looking for whether they are the same concept.-_-
[19:52:18] <gwatt> s-liao: probably not. In the lisp  world  `compose' usually refers to function composition. (compose f g) => (lambda (x) (f (g (x)))
[19:53:02] <amazigh> maybe you think about clojure "threading" macro
[19:53:04] <gwatt> oops, extra parens around `x' there in the application
[19:54:57] <pinoaffe> s-liao: while individual schemes may implement "interfaces", there's no scheme standard for interfaces afaik, and thus, no way to compose 'm either
[19:57:03] <pinoaffe> dpk: I can't seem to find a compose in srfi 211, am I looking wrong or did you mean another SRFI?
[19:57:41] <dpk> oh. the problem with numbers is that they're all numbers
[19:57:49] <dpk> i meant SRFI 210
[19:58:12] <pinoaffe> thanks!
[19:59:04] <Franciman> i'm looking for a job
[19:59:13] <Franciman> wondering if i should put my scheme interpreter in my portfolio
[19:59:15] <Franciman> .P
[19:59:17] <Franciman> :P
[20:00:15] <pinoaffe> depends on the type of job you're looking for ;)
[20:04:33] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[20:04:46] <sham1> One might quickly find themselves be hired to write some javascript engine code or something
[20:04:51] <sham1> At least one might possibly hope
[20:09:24] <Franciman> intriguing, sham1 
[20:09:26] <Franciman> intriguing
[20:09:39] <Zipheir> ChoHag: I found out unregistered people were quieted recently when a Scheme mailing-list regular tried to talk and couldn't.  Anyway, fixed now.
[20:10:29] <Zipheir> (Let's see if we now get buried in spam, spam, spam, wonderful spam.)
[20:19:30] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[20:19:50] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[20:26:37] *** Quits: silasfox (~sbv@p200300cec717230004f2e58485b580c9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:26:53] *** Joins: silasfox (~sbv@p200300cec717230004f2e58485b580c9.dip0.t-ipconnect.de)
[20:29:51] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[20:30:09] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[20:32:07] *** Quits: silasfox (~sbv@p200300cec717230004f2e58485b580c9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:40:30] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[20:53:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:55:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:06:52] *** Joins: klovett_ (~klovett@107.116.92.97)
[21:08:59] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 265 seconds)
[21:16:32] *** Quits: apg (~apg@71-34-103-243.ptld.qwest.net) (Ping timeout: 272 seconds)
[21:20:50] *** Joins: badkins (~badkins@136.56.92.199)
[21:43:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:45:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:50:05] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[21:50:35] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[21:55:15] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[21:58:52] *** Joins: klovett (~klovett@107.116.92.97)
[22:01:57] *** Quits: klovett_ (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[22:02:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4dd0:35a3:af1d:f7b)
[22:02:33] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4dd0:35a3:af1d:f7b) (Changing host)
[22:02:33] *** Joins: skapata (~Skapata@user/skapata)
[22:07:24] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:09:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[22:10:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:23:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:25:12] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[22:25:32] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[22:27:08] *** Joins: badkins (~badkins@136.56.92.199)
[22:28:57] *** Quits: amazigh (~amazigh@user/amirouche) (Quit: WeeChat 2.8)
[22:29:07] *** Joins: amazigh (~amazigh@user/amirouche)
[22:33:01] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:35:33] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[22:35:50] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[22:43:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:44:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:07:52] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[23:25:53] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[23:26:10] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[23:32:42] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[23:34:19] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[23:36:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:38:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:39:57] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[23:47:00] *** Joins: silasfox (~sbv@p200300cec717230004f2e58485b580c9.dip0.t-ipconnect.de)
[23:53:44] *** robin_ is now known as robin
