[00:01:56] <Josh_2> I assume asdf:system-relative-pathname requires a system that can be found by asdf in order to convert the path from relative to absolute?
[00:02:02] <phoe> yes
[00:02:39] <phoe> the path you provide is relative to the system, but the path of the system itself is (AFAIK) absolute and the path returned by asdf:s-r-p is (AFAIK) also absolute
[00:02:40] <Josh_2> Alright, what can I use that is not relative to an asdf system? Ofcourse "../" would normally work, but bknr doesn't like it
[00:02:55] <Josh_2> I need relative to a deployed image
[00:03:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:03:49] <Josh_2> I could always just use an absolute path when deploying on linux
[00:05:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:05:51] *** Quits: amb007 (~a_bakic@87.116.175.48) (Ping timeout: 250 seconds)
[00:06:43] *** Joins: amb007 (~a_bakic@109.245.225.179)
[00:07:41] <foxfromabyss> what's the difference between .asd and package.lisp, as far as dependencies go? do I need to keep both updated at the same time?
[00:07:50] *** Quits: trocado- (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 260 seconds)
[00:08:41] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[00:08:44] <dlowe> asd(f) files contain the system definition - instructions on how to build a particular system. package.lisp usually contains package definitions - namespaces used by the program
[00:09:03] <dlowe> the system name doesn't have to be the same as the package name but it's a lot less confusing that way
[00:10:00] <NotThatRPG> Josh_2: When you say "deployed image," do you mean a lisp core image?
[00:10:24] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[00:10:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:10:44] <Josh_2> I mean a deployed executable that goes to my customers
[00:10:49] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:11:42] <foxfromabyss> i see i see, thanks
[00:12:15] <_73> Is it possible to use a lambda as a predicate when denoting a type with DEFTYPE? I was expecting SATISFIES to be able to take a lambda as an argument but it doesn't seem to work. http://dpaste.com/CFPFAF8K7
[00:12:44] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[00:12:53] <lisp123> I am experimenting with a style of CLOS where I make each of the slots their own classes. E.g. if (defclass something ((A ..) (B ..) (C ..))) then A, B and C are also their own classes. Seems to work relatively well. However I am seeing some duplicate code across methods implementing for A, B and C. So I am thinking of a SOMETHING-COMPONENT protocol to group these methods. Has anyone gone down this road?
[00:12:59] <phoe> Josh_2: https://github.com/Shinmera/deploy/blob/9b20e64fe924b9e31832304d87a3a72c383dc6d8/toolkit.lisp#L12-L13
[00:13:19] <phoe> (deploy:data-directory) handles this for you if you use deploy
[00:13:24] <phoe> lisp123: you are describing mixins
[00:13:36] <lisp123> (and in my example, I would actually write SOMETHING as (defclass something (a b c) ()))
[00:13:46] <Josh_2> I do not have to worry about foreign libraries
[00:13:56] <Bike> _73: No
[00:14:19] <phoe> Josh_2: sure, but deploy isn't just about foreign libraries, it's about actually managing stuff from inside deployed images
[00:14:26] <Bike> _73: that would entail TYPEP compiling functions at runtime (in a compiling implementation), which would be kind of silly
[00:16:16] <lisp123> phoe: Yes and No I think. Yes in the sense you are absolutely right. No in the sense that I am thinking less about adjacent concepts that can be "mixed-in" and more about seperating all the 'essential' slots of a class into their own. And then grouping them when needed by a 'something-component' protocol
[00:16:34] <Josh_2> Perhaps roswell would be more useful
[00:16:55] <_73> Bike: ok thanks now I know what the problem is. I will need to spend time thinking about why.
[00:17:18] <lisp123> So A could be (defclass A (something-component) ((A :initarg :a :accessor A)))
[00:18:09] <lisp123> So just wondering if others have used protocol classes like 'something-component' in my example to group together components of a class which have been separated out from it during the definition process
[00:18:51] <phoe> lisp123: uhhh, what's the difference between "separating all behaviors of a class into their own and later assembling concrete classes from them" and "separating all behaviors of a class into mixins and later assembling concrete classes from them"
[00:19:00] <phoe> from what I read, you *are* describing mixins
[00:19:15] <Josh_2> Slots are already instances of a class
[00:19:22] <Josh_2> problem solved :P
[00:19:28] <phoe> mixins are protocol classes, they are used to group together components of a class which have been separated out from it during the definition process
[00:19:41] <phoe> like it's literally s/component/mixin/g from what I see
[00:20:29] <lisp123> phoe: Okay so if you have three mixins, A, B & C, is it common to define ANOTHER protocol called 'something-component' which all three mixins inherit from to show that they will be mixed in later into SOMETHING?
[00:20:49] <phoe> sure, it is - even if just to prevent them from being directly instantiated
[00:21:20] <lisp123> Great, ok sounds like I am not doing anything too crazy :P
[00:22:20] <phoe> oh wait, scratch that - I misunderstood what you are doing
[00:22:38] <phoe> if all of your mixing inherit some class then all concrete classes will *also* inherit that class
[00:22:42] <lisp123> Oh okay, does it make sense now?
[00:22:45] <phoe> s/mixing/mixins/
[00:22:51] <phoe> do you want that to happen?
[00:23:40] <lisp123> I don't mind. I just want to be able to group all the components of a class (defined in their own classes), so that I can write methods that apply to all of them
[00:23:57] <lisp123> But not sure if I'm overinventing here
[00:23:59] <phoe> it'll work, just remember that if A is an indirect instance of SOME-COMPONENT then (defclass concrete-thing (a b c) ()) (make-instance 'concrete-thing) is an indirect instance of SOME-COMPONENT
[00:24:14] <phoe> so your methods are also going to work for concrete things.
[00:24:43] <lisp123> Makes sense and I would need to be careful about that - I guess that only applies for BEFORE/AFTER/AROUND yes?
[00:24:51] <phoe> no, for all methods
[00:25:16] <lisp123> But if I have a method defined on concrete-thing, that will take precedence right
[00:25:17] <phoe> if you have a method that applies to a SOME-COMPONENT then every CONCRETE-THING is a SOME-COMPONENT
[00:25:21] <phoe> yes
[00:25:23] <lisp123> So unless I didn't define that method
[00:25:34] <phoe> but something seems off for me, but I'd need to take a look at your inheritance tree
[00:25:53] <lisp123> It does seem a bit off, let me play around with it and come back with an example
[00:26:11] <phoe> and why do you want to define methods for your mixins only that do *not* apply to concrete things that have these things mixed in
[00:26:31] <phoe> these are the weird parts
[00:27:55] <lisp123> Basically, if I have A, B and C. I can create A from B, B from A, C from B, etc. So once I have a few basic functions that generate A->B, B->C, C->A for example, the rest can be built on the top of that
[00:28:15] <phoe> What do you mean, create A from B?
[00:28:51] <lisp123> A can be an english version of a sentence. B can be an equivalent in Japanese or French
[00:29:28] <lisp123> (not that simple, but basically they are separate objects that can be mechanically transformed to each other)
[00:30:42] <lisp123> I kinda see your point though, let me have a think
[00:31:06] <lisp123> on whether it makes sense to group them into a class to begin with
[00:32:43] <lisp123> The main reason for grouping was to do the transformations once off and store the results in slots
[00:35:09] <phoe> huh - a sentence should not keep its own translations in slots
[00:35:25] <phoe> unless you want to have N-1 slots if you have N languages
[00:35:53] <phoe> if anything, an abstract sentence can keep a hashtable from languages into strings, or something like that
[00:36:00] <phoe> but that's already OO design sort of stuff
[00:36:56] <lisp123> hmm let me consider this hash table approach further
[00:37:34] <lisp123> Makes sense from a memoizing calculation perspective
[00:38:17] *** Quits: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[00:39:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:40:18] <lisp123> phoe: thanks for the help. i didn't really consider hash tables vs. storing in slots until now, that could quite useful later on (depending on performance and the computational intensity of each transformation)
[00:40:52] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[00:42:09] *** Joins: aeth (~aeth@user/aeth)
[00:42:11] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:43:06] <phoe> lisp123: no problem
[00:44:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:45:17] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[00:51:49] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[00:52:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:52:58] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:56:04] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:56:49] *** Quits: rito_ (~rito_gh@45.112.243.151) (Quit: Leaving)
[01:02:02] *** Parts: VincentVega (~user@212.97.4.33) (ERC (IRC client for Emacs 27.2))
[01:06:07] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[01:07:07] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[01:08:23] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[01:15:24] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:15:45] <foxfromabyss> yet another stupid question, probably not very Common Lisp related, but still. I created a new project with `quickproject`, but when I try to load the project via `ql:quickload :project_name` that fails with "SYSTEM NOT FOUND". the project is located in `~/quicklisp/local-projects/project_name`, but the `ql:list-local-projects` returns nil :/  out
[01:15:45] <foxfromabyss> of ideas what is wrong at this point to be honest
[01:16:13] <foxfromabyss> what might I be doing wrong? :)
[01:16:44] <phoe> foxfromabyss: does (quicklisp:register-local-projects) help?
[01:17:13] <foxfromabyss> phoe, tried that already, forgot to mention. sadly, no
[01:17:34] <foxfromabyss> i know for a fact that it worked like 2 hours ago, but i've already set up a fresh projects with nothing in it and it still doesn't work
[01:18:13] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[01:18:13] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[01:18:29] *** Joins: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs)
[01:19:12] <phoe> foxfromabyss: what is the name of the ASD file?
[01:19:24] <foxfromabyss> project_name
[01:19:29] <foxfromabyss> `project_name`
[01:19:34] <phoe> does the system name and the filename match? like, does project_name.asd contain (defsystem project_name ...)?
[01:19:39] <foxfromabyss> * `project_name.asd`
[01:19:58] <foxfromabyss> yes, everything matches
[01:20:18] <foxfromabyss> i haven't changed anything after it's been spewed out by the quickproject
[01:20:47] <phoe> is it the underscore in the project name?... I don't think so
[01:21:12] <foxfromabyss> no, it's actually called `hexagoner`
[01:21:18] <foxfromabyss> but i've omitted it for simplicity
[01:26:00] <Xach> foxfromabyss: hi
[01:26:11] <Xach> foxfromabyss: that sounds pretty weird!
[01:26:24] <_death> are you sure that it refers to system hexagoner
[01:26:35] <Xach> foxfromabyss: what do you get from ql:*local-project-directories*?
[01:26:43] <foxfromabyss> @_deathow do I check that?
[01:26:47] <foxfromabyss> _death  do I check that?
[01:27:11] <_death> what is the exact error message
[01:27:50] <foxfromabyss> oh, i think i know what the issue is
[01:27:50] <foxfromabyss> ```
[01:27:51] <foxfromabyss> CL-USER> ql:*local-project-directories*
[01:27:51] <_death> also, I missed your remark about list-local-projects
[01:27:51] <foxfromabyss> (#P"/usr/lib/quicklisp/local-projects/")
[01:27:52] <foxfromabyss> ```
[01:28:04] <foxfromabyss> sorry for the borked markdown
[01:28:25] <phoe> oh, that would be the reason
[01:28:35] <phoe> you do not have ~/quicklisp/local-projects/ in there
[01:28:46] <foxfromabyss> well yes, but why would it be like that. I don't think i have changed anything
[01:29:08] <phoe> what's your OS?
[01:29:12] <foxfromabyss> arch
[01:29:13] <phoe> how did you install quicklisp?
[01:29:20] <foxfromabyss> from AUR
[01:29:23] <phoe> that's the reason
[01:29:40] <phoe> arch people try to outsmart lispers and set their own local-projects dir
[01:29:41] <foxfromabyss> is this a very-not-canonical way?
[01:30:09] <phoe> well, I have learned to distrust linux distro maintainers when it comes to anything CL - be it arch or debian or whoever
[01:30:22] <phoe> I get my implementations from roswell and I download quicklisp straight from the official website
[01:30:34] <phoe> no chance for pathname or version incompatibility this way.
[01:30:45] <zbrown[m]> I mean, that's generally a good practice for all programming languages except maybe the system C
[01:30:47] <foxfromabyss> makes sense :P
[01:30:47] <foxfromabyss> I would honestly love to stick it into the package manager somehow, but i guess i can live without that as well
[01:30:52] <zbrown[m]> (see: `asdf`)
[01:31:41] <foxfromabyss> any hints/tips/advices on where to stick `quicklisp.lisp` ?
[01:32:05] <foxfromabyss> thanks a lot for the help by the way, really appreciate ti
[01:32:07] <foxfromabyss> *it
[01:32:46] <foxfromabyss> > any hints/tips/advices on where to stick `quicklisp.lisp` ?
[01:32:47] <foxfromabyss> directory wise i mean
[01:33:35] <Josh_2> Is there a lisp -> json that will pretty print json? Instead of all the json being on a single line, there are newlines between elements in the object?
[01:33:48] <Josh_2> jonathan outputs with no newlines which makes using it for a config file kinda hard
[01:34:20] <Josh_2> foxfromabyss: Pretty sure you dont have to touch that, just follow the install instructions on the website
[01:34:28] <Josh_2> perhaps quicklisp.lisp is the file, one sec
[01:34:45] <foxfromabyss> i mean, i think i have to keep it around(?)
[01:34:46] <Josh_2> oh right yes, just put it anywhere and then follow the instructions
[01:36:19] <_death> foxfromabyss: you can delete it after installing quicklisp
[01:36:26] <foxfromabyss> i see i see, thanks!
[01:37:24] <Josh_2> Perhaps I will have no config file at all and will just have it as a program within my image
[01:39:08] *** Joins: igemnace (~ian@user/igemnace)
[01:49:49] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[01:51:17] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[02:09:15] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[02:09:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:14:14] <phoe> Josh_2: jzon does
[02:14:27] <phoe> https://github.com/Zulu-Inuoe/jzon#writing see :pretty
[02:16:19] <Josh_2> Thanks phoe
[02:17:17] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[02:17:37] *** Joins: robin (~robin@user/terpri)
[02:21:16] *** Quits: foxfromabyss (~foxfromab@2a01:c22:a4a9:d200:c166:a367:e0ab:b41d) (Quit: Client closed)
[02:30:25] *** Joins: mrmr (~mrmr@user/mrmr)
[02:32:40] *** Quits: pve (~pve@87-93-199-246.bb.dnainternet.fi) (Quit: leaving)
[02:38:42] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[02:40:21] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[02:44:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:50:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[02:51:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:51:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:55:43] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 256 seconds)
[03:00:15] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:06:10] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[03:07:26] *** Quits: rotateq (~user@185.66.193.48) (Ping timeout: 245 seconds)
[03:20:39] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[03:24:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 268 seconds)
[03:26:11] *** Joins: igemnace (~ian@user/igemnace)
[03:29:37] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[03:31:00] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:32:37] *** Quits: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[03:35:38] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[03:38:44] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[03:51:21] <madnificent> I'm moving from structs to classes because the class hierarchy helps me out.  Is there some trick to print these classes similar to how structs are printed?  It doesn't need to be readable.
[03:53:48] <hayley> I had a DEFINE-TUPLE macro that would define a class and define a method which prints the slots like a struct. Probably could use a separate macro though.
[03:54:19] <madnificent> hayley: I was hoping something could use introspection for this.
[03:54:22] <hayley> e.g. (defclass something () ((%a ... :reader a))) (define-printer something :a a) would suffice.
[03:56:06] *** Joins: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs)
[03:56:29] <hayley> If one is using objects in an object-oriented (or protocol-oriented) way, then introspecting slots probably isn't the right approach.
[03:58:34] <madnificent> hayley: Why? This sounds like it could bind to the superclass of all the classes I'm now defining.  It could be overridden by any of the subclasses.
[03:59:33] <hayley> Well, what are you introspecting then? What do you want to print out?
[03:59:53] <madnificent> The slots that were defined in the subclass so I can print those out by default.
[04:00:33] *** Parts: hayley (~theemacss@user/hayley) ()
[04:04:23] <madnificent> That wasn't the moment to have a connection dropped.  Come back.
[04:05:15] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[04:06:39] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:11:15] *** Joins: karlosz (~karlosz@136.56.98.53)
[04:25:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:26:10] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[04:26:42] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:26:57] *** Joins: igemnace (~ian@user/igemnace)
[04:28:43] <Josh_2> Perhaps you could grab the class slots from the class and its superclass then remove the difference and display what remains
[04:28:50] <Josh_2> you could do that at class definition time I believe
[04:30:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[04:30:58] <Josh_2> Or perhaps you can just use c2mop:class-direct-slots
[04:32:05] *** Joins: aeth (~aeth@user/aeth)
[04:33:40] <madnificent> Josh_2: that would be very reasonable.
[04:40:47] <madnificent> Hmmm, any trick to print recursively with some indentation for the properties?
[04:41:15] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[04:48:04] *** Joins: yottabyte (uid195082@id-195082.lymington.irccloud.com)
[04:50:32] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[04:53:35] <madnificent> welcome jgart !
[04:55:56] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[04:56:16] <jgart> heyooooooo
[04:57:32] <jgart> I'd like to rewrite this app in common lisp: https://git.genenetwork.org/jgart/binderlite/src/branch/master/app.py
[04:57:48] <jgart> What should I use to replace the flask part?
[04:57:51] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[04:58:10] <jgart> And the jinja templates, I guess djula?
[04:59:03] <madnificent> I'd pick hunchentoot for the flask part though I tend to sprinkle a tiny layer on top of it to make such route definitions more trivial to read.
[04:59:33] <madnificent> There are Common Lisp web frameworks but I'm unsure what the most mature thing is right now.
[04:59:44] <jgart> do you have an extant repo that can serve as an example of that?
[04:59:59] <jgart> so I can do some reading and get ideas on how that would look
[05:00:12] <jgart> or any repo in the wild would do
[05:00:23] *** Quits: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[05:01:03] *** Joins: amb007 (~a_bakic@109.245.225.179)
[05:01:41] <jgart> madnificent, what's your workflow for lisp currently? emacs and slime or sly?
[05:02:20] <madnificent> Sure thing, though I think the community will have a different preference than what I enjoyed with this.  Anyhow, a use of it is at https://github.com/mu-semtech/mu-cl-resources/blob/master/framework/call-specification.lisp and sources that allow you to write defcall are at https://github.com/mu-semtech/mu-cl-support/tree/3031e08070605c67f6610748a15026901c8f58e7
[05:02:52] <madnificent> jgart: I use emacs + slime but if I'd start now I guess I'd use sly instead.  I suspect I'll shift when I have some brain-space to just try something out.
[05:03:12] <madnificent> People that used both seem to prefer Sly (either that, or those that do are more vocal about it than those that don't)
[05:03:48] <Catie> I made the switch to Sly recently, it was very easy to do
[05:04:49] *** NotThatRPG is now known as NotThatRPG_away
[05:06:18] <jgart> madnificent, Catie thnx!
[05:10:55] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[05:11:34] *** Joins: amb007 (~a_bakic@cable-94-189-186-89.dynamic.sbb.rs)
[05:12:17] <madnificent> Catie: any differences I should read about or resources that helped you?
[05:14:25] <Catie> I have not gotten really far into the differences yet, but there are three things that immediately jump out at me: C-r when you're on the repl line does a backward-search of _history_, not of the buffer; C-c C-u no longer clears the repl input; and you get a special notation for referencing past results of evaluation, not just the last three with *, **, and ***
[05:15:40] <Catie> Also it shows ASCII art of cats at startup! This isn't an important difference, but it is something I think is really fun
[05:18:29] <madnificent> hehe.  Thanks
[05:22:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:25:37] *** Quits: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[05:26:22] *** Joins: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[05:31:59] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[05:36:46] <yottabyte> what is the difference between reduce and apply?
[05:37:11] <yottabyte> second question: what's the difference between (reduce '+ '(1 2 3)) and (reduce #'+ '(1 2 3))?
[05:37:18] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[05:38:12] <Catie> Reduce takes a function of two arguments and applies it down the list you give it. Apply applies a function to a list, so the list must be of suitable structure for the lambda-list of the function
[05:39:00] <Catie> For the second question, they're technically different, but in that specific case they're functionally equivalent
[05:41:08] <Catie> I think a better way of phrasing it is that reduce accumulates the result of several applications of a function, but apply only uses the function once
[05:41:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[05:42:58] <Catie> This shows apply and reduce, and equivalent forms that could replace them: http://ix.io/3K02
[05:43:22] <jgart> reduce reduces a list by applying a function to each pair in the list. It moves to the next pair after getting the result (return value) from the first application (0 + 1) -> 1 + 2 -> 3 + 3 -> 6
[05:43:36] <jgart> Am I correct in thinking of it that way?
[05:44:06] <Catie> Yeah, absolutely! "Pairwise" is the word I was looking for, you nailed it!
[05:44:16] <jgart> sometimes reduce can take a default value (0 for example)
[05:44:28] <jgart> pairwise, yes
[05:44:51] <Catie> I was really spinning my wheels there, thank you
[05:45:49] <yottabyte> I see
[05:46:09] <yottabyte> does ' vs #' look in the function namespace, so #' is better?
[05:47:17] <Catie> Yeah, sharpsign-quote is a reader macro that expands to (FUNCTION ...), whereas plain quote is a reader macro that expands to (QUOTE ...). Most -- but not all -- places where you can pass a function using sharpsign-quote you can also use plain quote, but it's generally best not to mix up their usage like that
[05:47:45] <Bike> (reduce (lambda (x y) `(+ ,x ,y)) '(1 2 3 4 5)) => (+ (+ (+ (+ 1 2) 3) 4) 5). this did not occur to me before now
[05:47:58] <jgart> A convoluted hello world program in guile: (reduce string-append "" '("world" "hello "))
[05:48:57] <jgart> the universe is made of atoms and pairs
[05:49:30] <jgart> and some other datastructures...
[06:05:30] *** Quits: amb007 (~a_bakic@cable-94-189-186-89.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[06:05:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:05:49] *** Joins: amb007 (~a_bakic@cable-94-189-186-89.dynamic.sbb.rs)
[06:07:15] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:13:54] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:16:12] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:32:42] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:38:29] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (ERC (IRC client for Emacs 27.2))
[06:42:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:52:40] *** Alfr is now known as Guest3054
[06:52:40] *** Quits: Guest3054 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[06:52:45] *** Joins: Alfr (~Alfr@user/alfr)
[06:53:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:53:37] *** Joins: leo_song_ (~leo_song@101.176.134.2)
[06:55:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[06:55:28] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Ping timeout: 268 seconds)
[06:56:04] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[07:05:03] *** Quits: leo_song_ (~leo_song@101.176.134.2) (Ping timeout: 256 seconds)
[07:07:08] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[07:17:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:26:01] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Ping timeout: 256 seconds)
[07:29:07] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[07:30:15] <beach> Good morning everyone!
[07:38:08] *** Joins: leo_song_ (~leo_song@101.176.201.241)
[07:38:37] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Ping timeout: 240 seconds)
[07:46:38] *** Quits: leo_song_ (~leo_song@101.176.201.241) (Ping timeout: 268 seconds)
[07:47:14] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[07:47:30] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:48:01] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Read error: Connection reset by peer)
[07:51:45] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[08:00:05] *** Joins: semz (~none@user/semz)
[08:04:48] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Read error: Connection reset by peer)
[08:05:04] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[08:17:20] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:30:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:32:28] *** Joins: alfonsox (~quassel@103.92.42.182)
[08:45:24] *** Joins: notzmv (~zmv@user/notzmv)
[09:08:57] *** Joins: taiju (~taiju@166.140.5.103.wi-fi.wi2.ne.jp)
[09:15:04] *** Quits: taiju (~taiju@166.140.5.103.wi-fi.wi2.ne.jp) (Read error: Connection reset by peer)
[09:17:08] *** Joins: taiju (~taiju@166.140.5.103.wi-fi.wi2.ne.jp)
[09:17:27] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[09:18:16] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[09:18:58] *** Quits: taiju (~taiju@166.140.5.103.wi-fi.wi2.ne.jp) (Read error: Connection reset by peer)
[09:19:49] *** Joins: taiju (~taiju@166.140.5.103.wi-fi.wi2.ne.jp)
[09:24:02] *** Quits: taiju (~taiju@166.140.5.103.wi-fi.wi2.ne.jp) (Ping timeout: 240 seconds)
[09:37:41] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[09:49:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:50:46] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:06:14] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[10:09:26] <beach> I am trying to read MIDI messages from /dev/midi1 on Linux.  If I open the file with an :ELEMENT-TYPE of 'CHARACTER and an :EXTERNAL-FORMAT of :LATIN-1, things work as I expect.
[10:09:26] <beach> But if I open with :ELEMENT-TYPE '(UNSIGNED-BYTE 8), and I read using READ-BYTE, nothing is read.  I am no doubt doing something wrong, but what?  This is SBCL.  Any hints?
[10:12:09] <beach> I need to vanish for a while.  I'll read up when I get back.
[10:16:32] <jackdaniel> beach: perhaps a code snippet would help to spot the issue if any
[10:24:31] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 256 seconds)
[10:25:42] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[10:27:56] <beach> Oh, I should mention that the second technique works if I read from a file.
[10:28:03] <beach> So maybe it's just a buffering issue.
[10:28:56] <beach> Ah, yes it is.
[10:28:59] <beach> Sorry for the noise.
[10:29:10] <beach> If I push enough keys, I get the input.
[10:30:16] <beach> So how do I get SBCL not to buffer the input?
[10:31:14] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[10:32:02] * beach checks the SBCL manual for clues.
[10:40:37] <jackdaniel> glance over the source code seems to indicate that with-open-file (and open) doesn't expose the necessary argument (inner implementation-specific have buffer-p arg though) - apparently buffering is "temporarily disabled" for io streams
[10:40:43] <jackdaniel> (also for bivalent streams)
[10:40:46] <jackdaniel> beach: ^
[10:42:25] <beach> I see.  Thanks.  Let me see if I can interpret what you are saying to make things work.
[10:42:35] <jackdaniel> good luck
[10:42:50] <beach> Thank you.
[10:42:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:48:28] <beach> I think I'll just take the easy way out and use the :LATIN-1 technique.  At least for now.
[11:21:13] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[11:26:47] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 268 seconds)
[11:27:16] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:27:18] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[11:28:00] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[11:28:01] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[11:31:57] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 256 seconds)
[11:49:35] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[11:58:38] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:00:16] *** Quits: alfonsox (~quassel@103.92.42.182) (Remote host closed the connection)
[12:02:04] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[12:05:32] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[12:06:31] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[12:08:50] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:09:15] *** Joins: cranium (~cranium@user/cranium)
[12:28:54] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[12:31:52] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[12:34:53] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10eb:872a:ec51:2707:3f87:4a36)
[12:38:16] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[12:41:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[12:41:28] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:42:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:46:20] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:50:04] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[12:52:33] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[13:00:37] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:02:02] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[13:10:20] *** Joins: cosimone (~user@93-34-133-35.ip49.fastwebnet.it)
[13:14:26] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[13:15:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:16:16] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[13:17:38] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:19:32] *** Joins: treflip (~user@user/treflip)
[13:24:41] *** Joins: pve (~pve@37-136-205-24.rev.dnainternet.fi)
[13:38:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:52:27] <phoe> sigh
[13:52:43] <phoe> TIL that PNGLOAD, IMAGO, and ZPNG have mutually incompatible internal image representations
[13:54:04] <phoe> either I create code that copies between these, or I decide on the One True Format™ and fork'n'modify two of them
[13:56:16] <jackdaniel> then you'll decide that you want to go faster and work on 16bit argb, or 8bit greyscale, more fun to come
[13:56:29] *** Joins: Lycurgus (~juan@98.4.112.204)
[13:56:33] <phoe> nope, argb only for me
[13:56:54] <phoe> "nope" as in "I won't need any other modes" but also as in "nope nope nope nope nope nope I'm not touching that stuff"
[13:57:12] <phoe> s/argb/argb 8bpp/
[13:57:25] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:57:41] <mfiano> And also, opticl wraps pngload to put it in its own internal image representation.
[13:57:55] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:58:29] <jackdaniel> and then you have mcclim that probably wraps opticl to revert the internal representation back to what pngload has ,) (I don't remember, but hey, that's not impossible!)
[13:58:37] <mfiano> lol
[13:58:51] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:eaf0::a3b)
[13:59:28] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:05:47] * jackdaniel wonders how many people tought: "time for a new library trivial-image-representations" :)
[14:06:40] <Lycurgus> i was gonna try to select the best current macclim to use but decided just to talk to a squeak socket for gui from lisp
[14:06:56] <Lycurgus> s/mcclim/CLIM/
[14:07:41] <phoe> I'll just write methods that operate on both imago and vecto representations - I need a concrete operation, composition of an imago image onto the vecto canvas
[14:07:58] <phoe> all other transformations can happen on the imago side, so I'm kinda lucky - I won't need to copy anything this way
[14:08:47] <random-nick> isn't the purpose of opticl to unify image representations?
[14:10:30] <jackdaniel> random-nick: perhaps it is, but when you communicate with something else (i.e some kind of a display server), then you need to pick a compatible representation either way
[14:10:42] <mfiano> yes it is, but when you...oh nevermind
[14:11:17] <mfiano> OpenGL particularly expects a 1D array, even better a static-vector.
[14:11:44] <mfiano> opticl uses varying ranks
[14:14:20] <jackdaniel> Lycurgus: wow, first time I've heard of using smalltalk as a display server for lisp programs
[14:16:59] <Lycurgus> yes, but if you were to look at statements I've made over the years it would be clear I deplore monoglossy
[14:17:07] <Lycurgus> (in computing)
[14:17:22] <Lycurgus> it fell out naturally
[14:17:53] <Lycurgus> i don't wanna be bothered with lisp gui crap and headless lisp is actually the norm
[14:18:19] <Lycurgus> and there's an excellent squeak actors pkg, and I actually learned smalltalk before C
[14:18:42] <Lycurgus> also it's a natural
[14:18:42] *** Joins: varjag (~user@188.95.247.249)
[14:34:18] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:37:39] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[14:39:28] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:48:55] *** Joins: VincentVega (~user@212.97.4.33)
[15:12:30] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10eb:872a:ec51:2707:3f87:4a36) (Ping timeout: 268 seconds)
[15:16:09] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[15:16:28] *** Joins: ebrasca (~user@librepanther.com)
[15:25:49] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[15:31:50] *** Joins: psf (~pi@206.55.172.18)
[15:35:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:36:30] *** Joins: igemnace (~ian@user/igemnace)
[15:37:13] *** Joins: VincentV` (~user@212.97.4.33)
[15:38:41] *** Quits: VincentVega (~user@212.97.4.33) (Ping timeout: 245 seconds)
[15:41:51] *** Joins: foxfromabyss (~foxfromab@2a01:c23:61e9:bc00:edc7:c6f0:136a:3f96)
[15:43:11] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zirconium.libera.chat (Nickname regained by services)))
[15:43:15] *** Joins: Alfr (~Alfr@user/alfr)
[15:43:35] <foxfromabyss> Hello. When I try to evaluate this in Sly/SLIME https://pastebin.com/yt72qtZy, I get `The variable HELLO-WORLD is unbound.`
[15:43:35] <foxfromabyss> not sure why. Using the `sketch` library
[15:43:42] <foxfromabyss> Would really appreciate the help
[15:44:26] <phoe> foxfromabyss: show me your DEFPACKAGE HEXAGONER
[15:45:03] <phoe> very likely you do not import/use the sketch package, which means that DEFSKETCH gets treated as a function, which means that it evaluates its arguments, which means that HELLO-WORLD is attempted to get evaluated, which fails with an unbound variable error
[15:45:58] <foxfromabyss> that is true
[15:46:33] <foxfromabyss> `(defpackage #:hexagoner  (:use #:cl #:sketch))`
[15:46:41] <phoe> oh, so you have it used
[15:46:44] <foxfromabyss> i've just added `#:sketch`
[15:46:54] <foxfromabyss> but the problem persists even after syncing the repl
[15:47:03] <phoe> recompile all of your code
[15:47:12] <phoe> as in, reevaluate DEFPACKAGE and then DEFSKETCH
[15:51:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:52:02] <jackdaniel> defpackage will scream about defsketch being already interned  in the package
[15:52:20] <phoe> s/defpackage/uiop:define-package/ and it'll stop screaming
[15:52:36] <foxfromabyss> okay I am feeling dumber by the second. `(defpackage #:hexagoner  (:use #:cl #:sketch))` results in `The name "SKETCH" does not designate any package.` Do I have to `ql:quickload :sketch` manually?
[15:52:49] <phoe> oh! yes, you should
[15:52:56] <phoe> your ASDF system definition should have it as a dependency
[15:53:13] <phoe> if you aren't using ASDF for your code, then you need to quickload Sketch manually
[15:53:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:53:49] <foxfromabyss> well the `hexagoner.asd` has `:depends-on (#:sketch)`
[15:54:06] <foxfromabyss> is this not sufficient?
[15:54:27] <phoe> that should be enough
[15:54:34] <phoe> (ql:quickload :hexagoner) should load Sketch then
[15:54:52] <foxfromabyss> oh i see !
[15:55:28] <foxfromabyss> everything works now, many-many thanks :D  the build system is a bit confusing to me
[15:56:21] <phoe> ASDF manages systems which mostly consist of files which mostly consist of Lisp forms, packages manage symbols which are used for naming things in the Lisp image
[15:56:54] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[15:57:14] <foxfromabyss> i think part of the confusion for me comes from the difference between system and package
[15:57:36] <phoe> yes, that's the main confusion point I've seen in people learning Lisp system-building
[15:58:06] <phoe> a system is a collection of files, a package is a collection of symbols - and both have some metadata associated with them
[15:58:19] <madnificent> like many other packaging systems on other platforms, this is something that could probably use some polish.  i only have a vague clue on how some js code we are running is converted into single image.
[15:58:27] <_death> https://web.archive.org/web/20171127051637/http://www.weitz.de/packages.html
[15:58:56] <madnificent> if graphically-minded people arrive here at some point, it'd be cool to have a simple graphic explaining this.  it's not hard, just confusing for new users.
[15:59:02] <foxfromabyss> i see i see! Thanks for the help and for the link :)
[15:59:05] <jackdaniel> module is a dll, system is a package, package is a namespace, namespace is a hash table :) /half jokingly/
[15:59:21] <phoe> foxfromabyss: what kind of graphic are you thinking of?
[15:59:43] <_death> bart simpson graphic
[15:59:44] <foxfromabyss> when you are talking about packages vs systems?
[15:59:46] <madnificent> jackdaniel: such renaming jokes add to the confusion of newcomers :P
[15:59:59] <foxfromabyss> or in which context
[16:00:02] <phoe> foxfromabyss: yes, yes - just, do you have any ideas of how it could/should look?
[16:00:17] <jackdaniel> that's why I have added that it is a "half joke" - I've tried mapping Lisp names to something used by /virtually everybody except lispers/ ;p
[16:01:25] <foxfromabyss> i mean, i honestly just get 2 separate trees in my head. the system tree is a file tree while the symbol tree is a .. let's say library or AST(very wrong usage here but i can't remember anything better) tree
[16:01:35] <foxfromabyss> inb4 i misunderstand the concepts still :D
[16:01:40] <madnificent> jackdaniel: no one in our company uses DLLs (except maybe for games, who knows?).  But anyways, it's a joke probably better left separate from someone new trying to understand.  :P  Because fo system -> package; package -> namespace.  The double mapping.
[16:02:44] <madnificent> foxfromabyss: the picture I see in my head is indeed also something like that.  Some picture of files and folders in the ASD corner.  Some packages (perhaps as boxes?) with parens and symbols thrown in.
[16:03:08] <madnificent> A package is most akin to a dictionary/index but I don't know how to express that.
[16:03:42] <jackdaniel> I believe in newcomer's intelligence to ignore remarks explicitly dubbed as a joke. on the other hand describing pictures in ones head may indeed bring some confusion ;] /me gets back to work
[16:03:57] <rain3> beach: "I myself recently discovered a marvelous feature in a programming language that I had purposely avoided for the past 10 years, simply because 10 years ago, a colleague (who did not know the feature) explained to me that it was no good. We were both victims of our own minds." What feature is that?
[16:04:34] <madnificent> jackdaniel: good luck with the work :)  i wouldn't be able to resist to try and parse it, which is why i chose to mention it.  more important things!
[16:04:42] <madnificent> jackdaniel: agree on the picture thing btw.
[16:05:22] <foxfromabyss> madnificent that's roughly what I envision as well, but a bit more SERIOUS represenation via the trees
[16:09:15] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[16:09:56] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[16:10:57] <beach> rain3: CLOS.
[16:11:15] <rain3> okay, thank you
[16:11:35] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[16:11:50] <beach> Sure.
[16:11:58] <beach> But that was a while ago now. :)
[16:21:59] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[16:26:43] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[16:33:59] *** Quits: kdlv (~kdlv@user/kdlv) (Quit: The Lounge - https://thelounge.chat)
[16:34:43] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:35:50] <unixlisp> phoe: your 2D array "rotation" interface looks like this: https://github.com/tinwatchman/2d-array-rotation (clockwise, js).
[16:37:32] <phoe> unixlisp: I know what it looks like. I'm going to add it to ARRAY-OPERATIONS soon-ish.
[16:37:59] <unixlisp> What is the result of the image after rotating array?
[16:38:24] <phoe> the image being rotated by N * 90° where N is a non-negative integer
[16:39:15] <unixlisp> oh.
[16:43:11] *** Joins: nature (~nature@45.32.235.173)
[16:55:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[16:56:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[16:56:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[16:58:44] *** Joins: ldb (~user@user/ldb)
[16:59:13] <ldb> pong
[16:59:23] <phoe> pong successful
[17:02:36] *** Joins: Algernon91 (~Algernon6@88.124.69.179)
[17:04:12] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[17:04:42] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10eb:872a:f511:ac07:821:2d8d)
[17:08:05] *** Quits: Algernon91 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[17:10:08] *** Quits: treflip (~user@user/treflip) (Quit: bye!)
[17:15:06] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[17:19:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:20:32] *** Joins: miique (~miique@181.46.139.166)
[17:24:30] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[17:25:00] *** Joins: srji (~srji@p5499dc4a.dip0.t-ipconnect.de)
[17:31:57] *** Joins: pjb (~pjb@user/pjb)
[17:34:49] *** Joins: Bike (~Glossina@71.69.170.70)
[17:34:49] *** ChanServ sets mode: +o Bike
[17:49:21] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[17:49:49] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:54:10] *** Joins: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[17:54:21] *** Quits: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:55:37] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[17:57:06] <Xach> phoe: what are you doing with radial gradients?
[17:57:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:02:01] <ck_> maybe flipping some wigs is in the cards?
[18:03:28] <Xach> RIP
[18:03:30] <phoe> Xach: I'm trying to programmatically generate board game tiles, and these have circular drop shadows. These are doable with radial gradients.
[18:04:05] <Xach> phoe: cool
[18:04:58] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:e510:deb5:c8b6:50d6)
[18:04:58] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10eb:872a:f511:ac07:821:2d8d) (Read error: Network is unreachable)
[18:05:27] <phoe> the next thing I'll do is hacking vecto to accept IMAGO images for superimposition over the vecto canvas
[18:05:39] <phoe> since there's raster PNGs that I need to add there, too
[18:06:08] <Xach> I don't think that would be too hard, the internal structure is pretty straightforward.
[18:06:24] <phoe> yes, it isn't a big problem
[18:06:33] <Xach> phoe: please share any cool pictures you make
[18:07:24] <phoe> the only question is how to structure this code - would you mind a VECTO/CONTRIB system that depends on IMAGO and implements this functionality?
[18:07:43] <Xach> Hmm
[18:07:45] <phoe> Xach: https://cdn.discordapp.com/attachments/670707716322492436/925899261655261285/Zrzut_ekranu_z_2021-12-30_00-22-34.png
[18:08:02] <phoe> that's some elements of a tile from a boardgame called Neuroshima Hex
[18:08:10] <phoe> one of my old boardgame loves
[18:08:19] <phoe> and I want to use vecto to programmatically generate tiles for it
[18:08:56] <Xach> Have you looked at vectometry? That's what I use 99% of the time now.
[18:09:34] <Xach> phoe: I almost think a system named something like vecto-imago would be the way to (ima)go
[18:10:09] <phoe> Xach: I haven't
[18:10:24] <phoe> Xach: OK, I'll make a vecto-imago then
[18:11:10] <Xach> phoe: vectometry has a pretty good toolbox for manipulating points, angles, colors, and rects as objects rather than loose collections of component values.
[18:11:31] <Xach> like (setf shrunk (contract rect 10)) and such
[18:11:42] <phoe> ooh
[18:11:56] <phoe> I'll check it out once it's time to stop happy hacking and clean up my code
[18:14:05] <phoe> but anyway! is there anything left to be done with my radial gradient PR?
[18:14:14] <Xach> Merging it
[18:14:17] <phoe> thanks
[18:18:22] *** Joins: cranium (~cranium@user/cranium)
[18:21:49] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:e510:deb5:c8b6:50d6) (Ping timeout: 268 seconds)
[18:35:47] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10eb:872a:6998:4307:2323:94d4)
[18:39:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:49:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[18:53:35] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[19:13:04] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[19:15:49] <_73> is it possible to compile a package from another package in the same system? For example I have a test package TEST-PACK that is testing the package PACK. Whenever I recompile TEST-PACK I also want to recompile PACK.
[19:17:23] <beach> Why would you want to recompile PACK if it hasn't changed?
[19:17:45] <beach> And you probably mean "system" rather than "package".
[19:17:51] <_73> PACK is changing quite often in my case
[19:18:12] <beach> If it changes it will automatically be recompiled if TEST-PACK depends on it.
[19:18:17] <beach> No other action is needed.
[19:19:15] <_73> the problem must be in my system architecture then. hmm
[19:19:49] <beach> (defsystem #:test-pack :depends-on (#:pack) ...)
[19:19:59] <beach> But seriously, rename them to SYSTEM.
[19:22:13] <beach> Unless you seriously mean "package" of course.  But then, you don't recompile packages, you define them.
[19:23:53] <beach> _73: Does that make sense to you?
[19:27:47] * _73 is trying to reproduce the problem
[19:30:43] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[19:34:54] <cranium> You are aware of 1. the distinction between the terms package and system 2. the best practice of defining your tests as a separate ASDF system?
[19:34:57] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (Quit: WeeChat 1.6)
[19:37:50] <cosimone> hello, this is probably going to sound like a stupid question, but i'm going to ask anyway: when compiling a defun with slime+ccl with optimization (C-- C-c C-c), it doesn't seem to make a difference (no warnings about missed optimization opportunities, etc.). with sbcl, it works as intended.  do i need some additional setup in slime, ccl or both?
[19:38:23] <Bike> i don't think ccl is ever as verbose about notes as sbcl is
[19:38:49] <cosimone> uhm... i see
[19:40:04] <cosimone> is anyone here aware of some way to have more verbosity during compilation, by any chance?
[19:40:36] <cosimone> it's not a big deal, since i can use multiple implementations, but it would be nice anyway
[19:41:04] <Bike> What I mean is that I don't think CCL actually has the same equipment to produce optimization notes that SBCL does
[19:41:15] *** Joins: treflip (~user@user/treflip)
[19:41:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[19:41:46] <Catie> Oh yeah, I've never gotten optimization notes from CCL
[19:42:10] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:43:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:47:43] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (#commonlisp)
[19:53:12] *** Quits: cosimone (~user@93-34-133-35.ip49.fastwebnet.it) (Remote host closed the connection)
[19:53:23] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:53:52] <Xach> and notes for sbcl do not apply to other implementations
[19:54:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:56:15] <cosimone> i see, i didn't know that
[20:00:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:01:38] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:02:50] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:03:19] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[20:05:27] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:05:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:06:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:12:58] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:13:38] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:14:36] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[20:15:13] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[20:16:10] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:16:16] <_73> I was able to reproduce the problem: http://dpaste.com/GTQ4KDN7V
[20:16:20] <hobo> does anyone know of a terminal emulator whose interaction is done in lisp?
[20:16:53] <random-nick> if emacs lisp counts, term.el
[20:17:03] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:17:18] <hobo> like a lisp REPL but a terminal emulator also?
[20:17:31] <Xach> hobo: i think mezzano includes one
[20:17:32] <cranium> you mean a command line where you type in lisp commands? You have your terms confused, that is on the shell. There are multiple shells that allow you to enter lisp forms.
[20:17:47] <hobo> cranium: oops, yes. thank you
[20:17:49] <random-nick> oh, I thought you mean interaction with the spawned process
[20:17:58] <beach> _73: You didn't mention a problem before.
[20:18:36] <cranium> hobo, if you're familiar with unix shells: https://github.com/SquircleSpace/shcl
[20:19:35] <random-nick> mezzano doesn't have a terminal emulator, just regular command line windows (the difference being, they don't implement the terminal control protocols that terminal emulators do)
[20:20:47] <beach> _73: You must re-run your (asdf-load-system ...)
[20:20:54] <_73> beach: I want to know if there is a way I can force the package I am testing, in this case SCRATCH-PACK to be recompiled whenever I recompile the test package, in this case `SCRATCH-TEST-PACK`.
[20:21:12] <beach> _73: Please use the right terminology.
[20:21:20] <cranium> _73, you know the difference between packages and systems?
[20:21:36] <Xach> random-nick: hmm, i thought https://github.com/froggey/Mezzano/blob/master/gui/xterm.lisp was a full emulator
[20:21:47] *** Quits: amb007 (~a_bakic@cable-94-189-186-89.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[20:22:02] *** Joins: amb007 (~a_bakic@109.245.225.179)
[20:22:23] <hobo> cranium: awesome. this is what I'm looking for exactly. thank you
[20:22:41] <varjag> is there any way to get command line args in a ccl app saved with save-application?
[20:22:42] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[20:23:09] <varjag> ccl:*unprocessed-command-line-arguments* doesn't appear to work
[20:23:13] <random-nick> Xach: oh, I didn't know about that, looks like it's used for the telnet client
[20:23:22] <beach> _73: What is recompiled is "systems" not "packages".  To recompile your system, do your (ql:quickload :scratch-test-sys) again.  Then the system scratch-sys should be recompiled automatically.
[20:23:28] <random-nick> the other applications use the simpler widget I think
[20:23:31] <_73> when I compile a file that defines a package with `sly-compile-file` it is still improper to say I am compiling the package?
[20:23:42] <beach> _73: I think you may still be confusing packages and systems.
[20:23:58] <cranium> beach: see the dpaste link they posted above.
[20:24:20] *** Joins: amb007 (~a_bakic@109.245.225.179)
[20:24:39] <beach> _73: You are supposed to recompile the system.  Notice that it is one system that depends on the other system.  Recompiling a single file containing a package definition is not going to do it.
[20:24:46] <Xach> _73: it would be more common to say you are recompiling a file
[20:24:48] <beach> cranium: What am I supposed to see?
[20:24:57] <cranium> I thought you hadn't seen it.
[20:25:01] <cranium> sorry.
[20:25:06] <beach> Oh, OK.  Yes, I saw it.
[20:26:05] <cranium> _73: I think one solution is to run (asdf:test-system "scratch-test-sys").
[20:26:27] <_73> yes thanks for the help I know what I need to now
[20:26:29] <beach> cranium: I suggested quickload since that's the technique already used.
[20:26:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:27:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:28:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:30:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:30:22] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:30:49] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:31:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Excess Flood)
[20:33:25] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:34:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:36:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80::47)
[20:36:44] *** Quits: Inline (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:37:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:39:48] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:41:51] *** Joins: Guest1191 (~Inline@2a02:908:1252:7a80::47)
[20:42:09] *** Quits: Guest1191 (~Inline@2a02:908:1252:7a80::47) (Remote host closed the connection)
[20:43:54] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[20:45:20] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ef:d61b:6998:4307:2323:94d4)
[20:45:38] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[20:47:29] *** Inline__ is now known as Inline
[20:48:11] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10eb:872a:6998:4307:2323:94d4) (Ping timeout: 252 seconds)
[20:48:35] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[21:00:33] <varjag> ok there's ccl:*command-line-argument-list*
[21:00:44] *** Joins: karlosz (~karlosz@136.56.98.53)
[21:11:40] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[21:14:17] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[21:16:29] *** Quits: varjag (~user@188.95.247.249) (Read error: Connection reset by peer)
[21:19:59] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[21:21:43] *** Quits: foxfromabyss (~foxfromab@2a01:c23:61e9:bc00:edc7:c6f0:136a:3f96) (Ping timeout: 256 seconds)
[21:32:15] *** Joins: varjag (~user@188.95.247.249)
[21:38:10] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Remote host closed the connection)
[21:44:38] <Josh_2> Good afternoon
[21:45:30] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[22:11:36] *** Joins: karlosz (~karlosz@136.56.98.53)
[22:12:07] <cranium> A question: How was the in-browser interactive code highlight etc. here generated: https://s-expressionists.github.io/Eclector/presentation-slides/slides.html#/slide-slide:errors:recovery
[22:14:50] *** Joins: Oladon (~olad@98.43.81.226)
[22:15:39] <cranium> or interactive-ish :)
[22:23:53] <cranium> ouch nevermind, it's mentioned during the representation video (42:00 in https://www.youtube.com/watch?v=3Yvv2XVBi58)
[22:24:02] <cranium> *presentation
[22:25:59] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:38:24] <Josh_2> Can someone suggest a command line args parser library to me?
[22:38:51] <Catie> I've recently been made aware of Adopt, I'm told it's very feature-rich and easy to use
[22:39:17] <Josh_2> This is the one I was thinking of, thank you Catie
[22:39:22] <Catie> Nice!
[22:39:35] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[22:44:06] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 245 seconds)
[22:47:39] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3a7:d033:9c36:7bdf)
[22:50:43] *** Parts: travv0 (sid293381@user/travv0) ()
[22:52:29] <hobo> wow, Adopt is pretty neat.
[22:53:45] <varjag> i use command-line-arguments
[22:56:21] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[22:57:04] <NotThatRPG_away> Thoughts about Adopt vs. Didier's CLON?
[22:57:06] *** Joins: amb007 (~a_bakic@109.245.225.179)
[22:57:15] *** NotThatRPG_away is now known as NotThatRPG
[23:02:38] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[23:02:52] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:05:41] <jackdaniel> Didier's CLON is a pleasure to work with and it has a comprehensive manual
[23:06:00] <jackdaniel> I've never used adopt so I can't comment on the "vs." part :)
[23:10:19] <drakonis> https://spwhitton.name/tech/code/consfigurator/ very impressive.
[23:18:32] <Josh_2> Adopt seems to work well
[23:18:42] <Josh_2> drakonis: thats giving me a 403
[23:18:51] <Josh_2> 503*
[23:19:22] <Alfr> Josh_2, just-getopt-parser is one I sometimes like to use instead, certainly to as fancy as adopt.
[23:19:45] <Alfr> s/to as/not as/
[23:20:12] <drakonis> https://github.com/spwhitton/consfigurator
[23:23:34] *** Joins: rain3 (~rain3___@86.127.204.59)
[23:26:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:27:48] <drakonis> linking to the github mirror should work
[23:27:55] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 250 seconds)
[23:32:51] <Josh_2> do I have to build sbcl manually to enable core compression?
[23:34:30] <Josh_2> 2.2.0 released today
[23:35:37] <cranium> ":compression
[23:35:37] <cranium> This is only meaningful if the runtime was built with the :sb-core-compression feature enabled."
[23:35:45] <Josh_2> Ye
[23:36:08] <Josh_2> I think I am just using the prebuilt linux binary from sbcl.org
[23:36:09] <engblom> For simplicity assume I have something like: (defun mypush (item list) (push item list)). How could I modify it so it alters the original list and not a copy of it?
[23:36:22] <Josh_2> push does modify the list
[23:36:39] <White_Flame> you need to store the list in something, then pass that container
[23:36:51] <White_Flame> however, the "proper" way is to return the list and let the caller either save it or not
[23:37:02] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[23:37:20] <Josh_2> http://www.lispworks.com/documentation/HyperSpec/Body/m_push.htm
[23:37:22] <engblom> Josh_2: Assume I had (defvar foo '()) and then called (mypush foo "bar"). That would not modify foo.
[23:38:25] <Josh_2> What White_Flame said
[23:38:57] <White_Flame> also, a "list" is not a thing in Lisp other than a usage policy of cons cells
[23:38:59] *** Quits: rain3 (~rain3___@86.127.204.59) (Ping timeout: 256 seconds)
[23:39:15] <White_Flame> so there's no passable identity for the list itself as a mutable thing
[23:39:19] <White_Flame> hence the container
[23:39:56] <Josh_2> How do I build sbcl with core compression?
[23:40:05] <Josh_2> I cannot give my customer a 100mb binary :joy:
[23:41:30] <drakonis> oh, new sbcl release, neat.
[23:41:36] <White_Flame> engblom: however, as a "place" is a syntactic thing, and macros deal with syntax, you can implement (defmacro mypush (item place) `(push ,item ,place))
[23:41:38] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:41:44] <cranium> Josh_2: See the INSTALL file or so, iirc it's explained in a straightforward fashion.
[23:43:19] <theothornhill> Is The Art of the Metaobject Protocol transferrable to other languages?  As in, Is the investment into reading and understanding it going to help understand other systems?  Or is too outdated/lisp-specific?
[23:44:47] <theothornhill> I do want to read it, but not sure if it'll take too much effort for too little gain...
[23:46:04] <jackdaniel> theothornhill: eulisp has metaobject protocol and it is significantly different from common lisp
[23:46:48] <jackdaniel> I wouldn't be surprised if one of schemes has such extension too; mop rather doesn't make much sense for statically typed languages
[23:47:32] <random-nick> I think there's a OOP system with a MOP for perl too
[23:47:45] <jackdaniel> learning mop gives you also an interesting insight for how oop is implemented "behind the scenes"
[23:48:09] <random-nick> but I've heard on the internet that AMOP might be hard to understand if you don't have preexisting CL knowledge
[23:48:40] <theothornhill> jackdaniel: right!  That is more in line of what I was hoping for.  CL knowledge isn't the problem :)
[23:48:41] <jackdaniel> well, examples are in common lisp. but nothing too fancy
[23:49:16] <random-nick> actually now that I think of it, that might be an alan kay quote?
[23:49:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:50:53] <theothornhill> I'm just thinking that most of my reading on common lisp usually yields insights into the other systems I work with on a daily basis, and I'm hoping that to be true with this as well
[23:51:03] <Josh_2> theothornhill: you should read the practical examples
[23:51:34] <random-nick> alan kay did say something similar, according to the last paragraph of this wikipedia article: https://en.wikipedia.org/wiki/The_Art_of_the_Metaobject_Protocol
[23:52:05] <theothornhill> Josh_2: You mean the exercises?
[23:52:14] <Josh_2> Yes
[23:52:34] <Josh_2> There are a few chapters in the middle which demonstrate the MOP, this is the most important bit imo
[23:52:42] <Josh_2> unless you are going to implement your own ofcourse
[23:53:14] <theothornhill> Thanks!
[23:54:47] <cranium> Kay quote: https://www.youtube.com/watch?v=oKg1hTOQXoY 54:02
[23:54:47] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:55:23] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:55:58] <Josh_2> Closed club centric? epic ;)
[23:56:06] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[23:59:06] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 245 seconds)
[23:59:28] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
