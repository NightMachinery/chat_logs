[00:00:07] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Read error: Connection reset by peer)
[00:00:17] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:00:23] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[00:02:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:03:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:03:47] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:03:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:04:37] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 240 seconds)
[00:05:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:05:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:06:36] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[00:07:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:07:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:09:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:09:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:11:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:11:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:13:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:14:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:15:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:16:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:17:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:18:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:19:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:20:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:21:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:21:56] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[00:22:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:23:19] *** Joins: bluedust (~bluedust@89.238.130.73)
[00:23:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:24:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:25:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:26:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:26:13] *** Quits: bluedust_ (~bluedust@194.37.96.137) (Ping timeout: 240 seconds)
[00:27:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:28:07] *** Joins: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b)
[00:28:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:29:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:29:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[00:30:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:31:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:32:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:32:15] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 268 seconds)
[00:33:04] *** Joins: kodah (~kodah@user/kodah)
[00:33:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:34:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:35:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:35:51] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[00:35:51] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[00:35:51] *** Joins: resamvi (~resamvi@user/resamvi)
[00:36:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:37:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:38:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:39:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:40:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:40:33] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[00:41:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:42:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:43:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:43:51] *** Joins: bluedust_ (~bluedust@103.161.144.152)
[00:44:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:45:06] *** Joins: Maxattax97 (~max@199.8.13.212)
[00:45:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:46:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:47:35] *** Quits: bluedust (~bluedust@89.238.130.73) (Ping timeout: 250 seconds)
[00:47:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:48:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:49:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:50:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:51:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:52:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:53:04] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[00:53:04] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[00:53:04] *** Joins: resamvi (~resamvi@user/resamvi)
[00:53:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:54:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:55:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:56:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:57:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:58:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:58:52] *** Quits: bluedust_ (~bluedust@103.161.144.152) (Remote host closed the connection)
[00:59:34] *** Quits: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b) (Ping timeout: 260 seconds)
[00:59:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:00:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:01:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:02:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:03:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:04:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:06:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:06:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:08:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:08:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:10:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:10:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:12:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:12:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:14:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:14:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:16:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:16:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:18:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:18:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:20:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:20:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:22:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:22:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:24:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:24:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:25:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[01:26:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:26:43] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[01:26:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:28:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:28:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:30:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:30:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:31:15] <mfiano> Well, golps crashes when I add a generic type parameter to a struct. First day writing non-test Go code, and figured I'd try the beta. Guess it needs more polish.
[01:31:34] <mfiano> gopls*
[01:32:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:32:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:34:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:34:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:36:16] <b0nn> which version of gopls
[01:36:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:36:48] <b0nn> and "crash" could mean a bit - there was a recursive problem in a build earlier, but that's been marked as fixed
[01:36:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:37:14] <b0nn> https://github.com/golang/go/issues/50321#issuecomment-1000468245
[01:37:39] <mfiano> golang.org/x/tools/gopls v0.7.4
[01:38:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:39:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:39:29] *** Quits: Maxattax97 (~max@199.8.13.212) (Ping timeout: 268 seconds)
[01:39:29] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 268 seconds)
[01:40:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:41:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:41:31] <mfiano> I see. I will try compiling from head
[01:42:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:43:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:44:10] <mfiano> I don't really get any output from vim-go when it crashes. It opens an empty stack.go window/buffer with a single "package debug" line, that seems to be mapped to the path /usr/local/go/src/runtime/debug/stack.go
[01:44:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:45:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:45:25] <b0nn> https://github.com/golang/tools/blob/master/gopls/doc/vim.md
[01:45:37] <b0nn> https://github.com/golang/tools/blob/master/gopls/doc/settings.md
[01:46:08] <mfiano> What about them? I've read them before
[01:46:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:46:38] <b0nn> You can configure gopls to change your editor experience or view additional debugging information. Configuration options will be made available by your editor, so see your editor's instructions for specific details. A full list of gopls settings can be found in the Settings documentation.
[01:46:54] <b0nn> Or try this https://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md
[01:47:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:47:38] <llorllale> Anybody know of any 3rd party SQL connection pool library?
[01:48:15] <b0nn> llorllale: most people use RDBMS specific dribers that come with their own pools
[01:48:25] <b0nn> eg pgx for postgres
[01:48:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:48:53] <llorllale> oh - I wasn't aware people did that. We use the mysql driver at work - I'll check what options we have there.
[01:49:11] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:49:45] <llorllale> Nope - they rely on database/sql for pooling: https://github.com/go-sql-driver/mysql#connection-pool-and-timeouts
[01:49:46] <b0nn> https://github.com/go-sql-driver/mysql#connection-pool-and-timeouts
[01:49:51] <b0nn> yeah
[01:50:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:50:47] <llorllale> Any idea why pgx provided their own pool impl?
[01:51:05] <b0nn> None at all
[01:51:11] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:52:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:53:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:53:22] <llorllale> https://github.com/jackc/pgx#choosing-between-the-pgx-and-databasesql-interfaces
[01:54:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:55:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:56:22] <llorllale> https://github.com/jackc/pgx#features
[01:56:30] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[01:56:37] <llorllale> All these features bleed through to the pool API
[01:56:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:57:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[01:57:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[01:58:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[01:59:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:00:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:01:01] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 256 seconds)
[02:01:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:02:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:03:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:04:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:05:09] <mfiano> b0nn: On closer inspection, it is golangci-lint that is crashing. I get a stack trace when calling it manually on the CLI. However, it crashing causes gopls to crash. I'm sort of confused here.
[02:05:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:06:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:07:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:08:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:08:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:09:26] <b0nn> hmmm look at issues on thr golangci-lint's project page?
[02:09:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:09:54] <b0nn> I think that it might also be helpful to ddrill down and figure if it's golangci-lint, or a specific linter
[02:10:40] *** Joins: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de)
[02:10:59] <b0nn> go pls crashing is likely that golangci-lint is passing bad stuff to the gopls server which it's clearly not handling properly, so an issue is appropriate on gopls too (they should handle linters throwing rubbish at them better)
[02:11:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:11:08] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[02:11:08] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[02:11:08] *** Joins: resamvi (~resamvi@user/resamvi)
[02:11:41] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (Client Quit)
[02:11:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:12:17] <mfiano> Will do. In any case, here is the output https://gist.github.com/mfiano/58e06f9d7b0e0fffa9abbdc22b8ead99
[02:13:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:13:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:14:19] *** Joins: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de)
[02:15:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:15:31] <b0nn> hmm dominek might want to see that as well
[02:15:47] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 252 seconds)
[02:15:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:17:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:17:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:19:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:19:36] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:19:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:21:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:21:32] *** Joins: arcatech (~arcatech@user/arcatech)
[02:21:36] <mfiano> The problem goes away if I disable the "unused" linter if type parameters exist. Seems to definitely be a parsing problem with that linter.
[02:21:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:23:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:23:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:25:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:25:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:26:57] <b0nn> nice work
[02:27:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:27:46] *** Joins: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de)
[02:27:46] *** Quits: resamvi (~resamvi@p4ff77978.dip0.t-ipconnect.de) (Changing host)
[02:27:46] *** Joins: resamvi (~resamvi@user/resamvi)
[02:27:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:29:12] <mfiano> seems related https://github.com/dominikh/go-tools/issues/1146
[02:29:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:29:55] <mfiano> So at least it seems acknowledged.
[02:29:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:30:24] <b0nn> Id still talk to the gopls people about gopls crashing when it gets one of these messages
[02:30:40] <b0nn> If not a formal ticket, then their slack channel
[02:31:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:31:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:32:20] *** Joins: arinov (~arinov@178.240.190.206)
[02:32:50] <mfiano> I will do that, but as a beginner to Go and someone just trying to get more familiar with the language by writing a simple CLI app, I think I'm going to revert to 1.17 stable and ignore generics until the February release when most of the rough edges have been taken care of.
[02:33:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:33:27] <b0nn> Sure - but letting them know that there's something is helpful (even if they dismiss it)
[02:33:45] <mfiano> Yes, of course.
[02:33:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[02:34:33] <mfiano> I just spent the last few days reading two books, one not so great, and the other pretty great, and I am getting antsy to start coding, and ran into that bug in my first 10 lines of code :)
[02:35:06] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:35:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:35:25] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[02:35:26] <b0nn> It's a great time to be alive :)
[02:35:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:36:08] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:60f4:8918:4e21:358d) (Ping timeout: 252 seconds)
[02:36:45] <mfiano> The new(ish -- March) O'Reilly book is an excellent resource for anyone wondering.
[02:37:01] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:3db5:d923:f92e:ca5a)
[02:37:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:37:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:38:25] *** Quits: arinov (~arinov@178.240.190.206) (Ping timeout: 256 seconds)
[02:38:48] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[02:39:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:40:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:40:35] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:3db5:d923:f92e:ca5a) (Client Quit)
[02:41:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:42:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:43:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:43:38] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:43:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:45:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:46:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:47:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:48:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:49:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:50:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:51:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:52:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:52:50] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[02:53:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:54:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:55:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:56:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:57:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[02:58:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[02:58:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:59:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:00:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:01:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:01:58] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:02:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:03:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:04:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:05:29] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[03:05:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:06:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:07:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:08:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:09:51] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[03:09:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:10:37] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[03:10:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:12:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:12:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:14:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:14:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:16:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:16:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:18:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:18:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:20:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:20:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:22:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:22:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:24:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:24:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:26:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:26:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:27:10] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: see you all on the morrow)
[03:28:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:28:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:30:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:30:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:32:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:32:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:34:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:34:44] *** Joins: Maxattax97 (~max@199.8.13.212)
[03:34:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:36:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:36:38] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:36:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:38:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:39:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:40:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:41:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:42:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:42:58] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[03:43:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:44:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[03:45:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[03:55:55] *** Quits: Maxattax97 (~max@199.8.13.212) (Quit: WeeChat 3.3)
[04:18:13] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Ping timeout: 240 seconds)
[04:18:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:20:15] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[04:23:58] *** Joins: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com)
[04:39:04] *** Joins: Everything (~Everythin@37.115.210.35)
[04:41:15] *** Joins: noop14 (~noop14@l208005.ppp.asahi-net.or.jp)
[04:44:28] *** Quits: noop14 (~noop14@l208005.ppp.asahi-net.or.jp) (Client Quit)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:32] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[04:48:50] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Client Quit)
[04:54:13] *** Quits: Jmainguy1 (~Jmainguy@static.204.41.76.144.clients.your-server.de) (Ping timeout: 240 seconds)
[04:54:16] *** Joins: Maxattax97 (~max@199.8.13.212)
[04:55:22] *** Joins: moog_ (~moog@107.126.48.46)
[04:57:25] *** Quits: moog (~moog@107.126.48.46) (Ping timeout: 240 seconds)
[05:01:08] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:e9ed:7d60:97d5:a584)
[05:11:56] *** Joins: Jmainguy (~Jmainguy@static.204.41.76.144.clients.your-server.de)
[05:37:50] *** Joins: huoy99 (~huoy99@gateway/vpn/pia/huoy99)
[05:38:30] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[05:40:05] *** Quits: zwr (~zwr@2804:d45:b966:fb00:7f50:bd17:59b3:3c7a) (Ping timeout: 250 seconds)
[05:40:56] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:2ddd:6dac:4c0:2c1a)
[05:40:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:fe5b:101b:8e76:fe8f)
[05:43:17] *** Quits: Maxattax97 (~max@199.8.13.212) (Ping timeout: 240 seconds)
[05:51:31] *** Joins: califax- (~califax@user/califx)
[05:52:01] *** Quits: huoy99 (~huoy99@gateway/vpn/pia/huoy99) (Quit: Client closed)
[05:54:45] *** Quits: yolo (~xxiao@159.89.184.51) (Quit: Lost terminal)
[05:55:14] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:e9ed:7d60:97d5:a584) (Quit: dingdreher)
[05:55:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:55:22] *** califax- is now known as califax
[05:57:01] *** Joins: cskr (~cskr@49.207.213.84)
[05:57:52] *** Quits: cskr (~cskr@49.207.213.84) (Client Quit)
[05:59:49] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[06:04:39] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[06:07:25] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[06:07:48] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[06:10:18] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:17:15] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[06:23:24] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[06:28:29] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[06:29:25] *** Quits: astraad[m] (~astraadma@2001:470:69fc:105::1:4425) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: borring (~borringma@2001:470:69fc:105::1:532b) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: yodajelly (~p@2001:470:69fc:105::1:e8) (Ping timeout: 240 seconds)
[06:32:09] *** Joins: Maxattax97 (~max@199.8.13.212)
[06:33:45] *** Joins: astraad[m] (~astraadma@2001:470:69fc:105::1:4425)
[06:34:13] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[06:34:13] *** Quits: moog_ (~moog@107.126.48.46) (Remote host closed the connection)
[06:34:39] *** Joins: moog_ (~moog@107.126.48.46)
[06:35:22] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[06:35:35] *** Joins: mickey8 (~user@user/mickey)
[06:39:48] *** Quits: moog_ (~moog@107.126.48.46) (Ping timeout: 240 seconds)
[06:40:32] *** Quits: ddevault (e7b4bb6755@sourcehut/staff/ddevault) (Ping timeout: 240 seconds)
[06:40:32] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (Ping timeout: 240 seconds)
[06:40:58] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[06:40:59] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[06:41:01] *** Quits: cation (cation@user/cation) (Ping timeout: 268 seconds)
[06:42:25] *** Joins: jackneilll (~jackneill@20014C4E1821BB00CA0618EC531795A9.dsl.pool.telekom.hu)
[06:44:58] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[06:45:21] *** Quits: jackneillll (~jackneill@86FF5325.dsl.pool.telekom.hu) (Ping timeout: 268 seconds)
[06:46:09] *** Joins: wim (~wim@42.be)
[06:47:16] *** Joins: yodajelly (~p@2001:470:69fc:105::1:e8)
[06:50:43] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[06:51:43] *** Quits: Maxattax97 (~max@199.8.13.212) (Ping timeout: 256 seconds)
[06:52:51] *** Joins: Maxattax97 (~max@199.8.13.212)
[06:53:38] *** Joins: wim (~wim@42.be)
[06:54:27] *** Joins: darkapex_ (~darkapex@user/darkapex)
[06:54:56] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[07:05:49] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[07:08:41] *** Joins: darkapex (~darkapex@user/darkapex)
[07:09:37] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[07:12:05] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[07:14:20] *** Joins: cation (cation@user/cation)
[07:16:25] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[07:25:57] *** Quits: Maxattax97 (~max@199.8.13.212) (Ping timeout: 240 seconds)
[07:37:03] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[07:37:30] *** Joins: Maxattax97 (~max@199.8.13.212)
[07:45:34] <hendry> hi there, how do I sort the output here by word length? https://go.dev/play/p/NAUoeIdwizx
[07:49:26] <b0nn> https://yourbasic.org/golang/how-to-sort-in-go/
[07:50:15] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[07:50:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:57:42] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[07:58:41] *** Quits: Maxattax97 (~max@199.8.13.212) (Quit: WeeChat 3.3)
[08:06:06] <hendry> b0nn: that would need me to set the length in the struct, right? https://go.dev/play/p/NAUoeIdwizx
[08:07:07] <foobaz> no, it would not
[08:09:09] <foobaz> i would create a type for "Posts" that implements sort.Interface
[08:09:35] <foobaz> that type's Less() function can call len()
[08:10:26] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 268 seconds)
[08:11:12] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[08:15:02] *** Joins: bluedust (~bluedust@117.207.229.182)
[08:17:13] *** Joins: Snyp (~Snyp@49.207.204.101)
[08:30:37] <hendry> Can you see where I am going wrong here? https://go.dev/play/p/NC31eAhfrW6 cc foobaz
[08:32:56] <fizzie> It needs more use of the * operator. (*a)[i] and so on.
[08:32:57] <foobaz> your biggest issue is "a *Posts" should be "a Posts"
[08:33:35] <foobaz> yea dereferencing would be another solution
[08:34:29] <fizzie> Or that, right, that's more reasonable. I just remember having to do that. But of course none of the sort.Interface methods mutate the slice, so they don't need a pointer receiver.
[08:34:55] <foobaz> a slice already points to its contents, so it's not necessary to add another level of indirection unless you need to modify the slice itself
[08:35:36] <foobaz> changing the length or capacity of the slice, e.g. by calling append(), would require a pointer receiver
[08:35:42] <fizzie> I think I was thinking of implementing "container/heap" instead, where you do need a pointer for the Push/Pop methods.
[08:36:22] <hendry> i'm still confused how to move past https://go.dev/play/p/0J5388BTsh8 ./prog.go:35:12: sort.Sort(Posts{...}) used as value
[08:37:05] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.3)
[08:37:27] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[08:38:25] <foobaz> there's something wrong with your t.Execute() call
[08:39:34] <foobaz> oh, sort.Sort() doesn't return the sorted array
[08:39:52] <foobaz> you will need to assign the unsorted array to a variable, then sort it, then use the variable
[08:40:00] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[08:43:32] <hendry> foobaz: yay! thanks https://go.dev/play/p/KWczVDJ8MSS
[08:45:06] *** Quits: Snyp (~Snyp@49.207.204.101) (Quit: Textual IRC Client: www.textualapp.com)
[08:46:57] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Ping timeout: 240 seconds)
[08:52:13] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 240 seconds)
[08:52:29] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[08:52:46] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[08:53:30] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[08:54:07] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[08:54:36] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Client Quit)
[08:55:41] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[08:56:46] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Client Quit)
[08:57:56] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[08:59:07] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[09:04:37] *** Joins: Echoz (~chris@user/echoz)
[09:07:03] *** gbmor1 is now known as gbmor
[09:07:50] *** Joins: bluedust_ (~bluedust@185.248.85.57)
[09:11:00] *** Quits: bluedust (~bluedust@117.207.229.182) (Ping timeout: 240 seconds)
[09:16:24] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[09:20:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:29:49] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Quit: WeeChat 2.8)
[09:43:44] *** Joins: shka (~herr@109.231.0.226)
[09:56:48] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[10:43:23] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Read error: Connection reset by peer)
[10:46:21] <mfiano> Is there a channel more suitable for beginner questions?
[10:47:36] <shibumi> This one is suitable for beginner questions
[10:47:47] <shibumi> at least I was using this channel a lot when I learned Go
[10:47:54] <shibumi> and the people were always very helpful and friendly
[10:48:05] * shibumi sends love into the channel <333
[10:48:20] <shibumi> mfiano: do you have specific questions?
[10:48:43] <mfiano> I wrote my first bit of Go snippet, and looking for advice on how to improve it before I continue
[10:50:57] <foobaz> don't ask to ask, just ask
[10:51:28] <foobaz> the channel is slow, you are not disrupting anything, the worst that will happen is no one will respond
[10:52:28] <mfiano> How can this simple code be improved? I never wrote in a non-Lisp language before, so this is very new to me: https://go.dev/play/p/KDWEA5eTG0L
[10:52:35] <bailsman> Is there a way to run tests programmatically and capture the call stack from it?
[10:53:35] <bailsman> If something goes wrong, that is.
[10:54:17] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[10:54:21] <foobaz> mfiano: it's pretty good
[10:54:25] *** Joins: bluedust (~bluedust@117.207.229.182)
[10:55:20] <foobaz> personally i prefer to do "c := cell{}" instead of "c := new(cell)" but that's just my style
[10:55:59] <mfiano> Actually, I want to allocate a type that implements Cell. So this is a bit wrong, hard-coding that specific struct type
[10:56:03] <blinux> The syntax highlighting doesn't seem to be fully working with vim-go. I've tried vim and nvim. I can compared to VSCode or pictures. functions are white instead of orange and many other things are white text too. I got the syntax highliting to work for javascript by installing the pollyglot plugin which includes vim-javascript, and also vim-go
[10:56:03] <blinux> syntax, but it didn't help with Go.
[10:56:06] <mfiano> The user should supply the type
[10:56:24] <shibumi> You may need a different colorscheme
[10:56:27] <foobaz> maybe the user could supply a factory function
[10:56:58] <mfiano> foobaz: Can you give an example on what you mean?
[10:57:10] <blinux> Does anyone know why the syntax highliting isn't working in Vim? Anyone notice lots of text in white instead of color?
[10:57:13] <shibumi> I am not a fan of vim-go :S I never got used to it, although I am a vim user for over 7 years now. GoLand <3 (I hope for Jetbrains Fleet)
[10:57:41] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[10:57:57] *** Quits: bluedust_ (~bluedust@185.248.85.57) (Ping timeout: 240 seconds)
[10:57:57] <shibumi> mfiano: I think foobaz means the factory pattern
[10:58:09] <mfiano> Something to learn then
[10:58:15] <shibumi> https://www.sohamkamani.com/golang/2018-06-20-golang-factory-patterns/
[10:58:30] <blinux> shibumi, OK, I was thinking of trying GoLand. Not super easy as I'd need to check the options for a free license since I'm just experimenting.
[10:58:33] <shibumi> It's a software design pattern and not Go specific
[10:58:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:59:01] <shibumi> blinux: oh yes.. that's why I hope for Jetbrains fleet.. if Jetbrains is smart they will make this free to use and then it will probably be a vscode killer
[10:59:03] <mfiano> I come from Lisp, where design patterns are not needed due to syntactic macros, so I never learned them
[10:59:05] <foobaz> mfiano: https://go.dev/play/p/q3-qpoyi5jN
[10:59:20] <b0nn> blinux: https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins
[10:59:29] <bookworm> blinux: syntax highlighting works just fine, as suggested maybe set a different theme
[10:59:44] <bookworm> in Neovim we also have treesitter
[10:59:55] <bookworm> which can help with the highlights
[11:00:21] <mfiano> Oh I see, so just make it a HOF
[11:01:22] <b0nn> blinux: are you using vanilla vim? Maybe look at the more popular vim-go plugin?https://github.com/fatih/vim-go
[11:01:50] <blinux> b0nn, Yes, I'm using fatih/vim-go and tried vim and neovim
[11:02:07] <b0nn> paste your ~/.vimrc somewhere
[11:02:08] <mfiano> blinux: I am using vim-go on neovim just fine with proper syntax highlighting
[11:02:11] <blinux> I'm looking at the vim-go alternatives on the go wiki somebody linked and the jetbrains options.
[11:02:37] <mfiano> If you want I can link to my config for you to look at my colorscheme etc
[11:03:04] <foobaz> you all should set up gopls in vim, if you haven't already
[11:03:11] <foobaz> it's a game changer once you get it working
[11:03:31] <blinux> mfiano, I see some syntax highlighting, but functions are showing in white text instead of colored.
[11:03:32] <b0nn> uhhh vim-go installs gopls...
[11:03:40] <foobaz> ok good :)
[11:04:03] <mfiano> blinux: Not here
[11:04:32] <blinux> mfiano, Do you have your init.vim file posted? Maybe it is a config problem.
[11:05:05] *** Joins: hexology (~hexology@user/hexology)
[11:06:02] <mfiano> blinux: It's fairly large, so feel free to ask any questions. screenshot: https://i.lisp.cl/tSMVja.png config: https://gitlab.com/axion/dotfiles/-/tree/master/.config/nvim
[11:11:51] <blinux> mfiano, I got a ton of errors loading it due to missing files.
[11:12:10] <mfiano> Well it does source the lua files next to it
[11:12:12] *** launchd is now known as l
[11:12:26] <mfiano> And you'll need to PlugInstall (assuming you have vim-plug setup)
[11:12:36] <blinux> Yes, it is looking for a bunch of lua files which I don't have.
[11:12:53] <mfiano> Well they are right in that link
[11:13:40] <mfiano> I didn't expect you to try my config. I don't even know if it will work on a non-FreeBSD machine, as it uses gmake for a post-install hook, etc
[11:13:56] <mfiano> But browsing how it's setup might be more insightful
[11:21:43] *** Joins: analogsalad (~analogsal@user/analogsalad)
[11:23:53] <blinux> mfiano, I don't think I'll try anymore. I put the lua folder in the ~/.config/nvim folder as well as trying some other sub-folder placement. I'm using linux, not free-bsd.
[11:30:03] <mfiano> The point wasn't to try to install my config. That is unlikely to work without my particular environment. As mentioned above, there are only a few things to look at: the colorscheme, tree-sitter, and termguicolors
[11:35:18] <bookworm> neovim only, in case that wasn't obvious
[11:36:35] <mfiano> Is there a way to declare the index variable in a for-range loop to be unsigned, or should I shadow the binding and cast it. I'm using "i" in a few places that expects a uint, but for some reason the index binding is of type int
[11:37:19] <b0nn> for i := uint(0); i< uint(3); i++ {}
[11:37:46] <b0nn> for i := range will only give you an int though
[11:37:55] <mfiano> Yeah this is for a range loop
[11:38:09] <b0nn> what are you ranging over?
[11:38:28] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:38:29] <b0nn> for i := uint(0); i < len(Foo); i++ {}
[11:38:50] <b0nn> or, if it's a string i : utf8.RuneCountInString(Foo)
[11:38:59] <mfiano> All uses of i need to be passed as unsigned. A [][]type
[11:39:39] <b0nn> s/"/play.golang.org will make it easier
[11:39:54] <b0nn> er, remove that s/"/ stuff
[11:39:59] <mfiano> b0nn: See above play link. Basically that, except replace all ints with uint
[11:40:55] <b0nn> Yeah - post it again - I'm not searching through history
[11:41:11] <mfiano> https://go.dev/play/p/YgejI3OchN9
[11:41:36] <mfiano> just want to avoid the case on 35-36
[11:41:55] <mfiano> cast*
[11:42:23] <b0nn> there's no way to avoid a cast that I can see
[11:42:59] <b0nn> I mean, you can do i := uint(0); i < w; i++{} and j with h if you want
[11:43:01] <mfiano> Well my point is that I will be using i and j more than just that one time, so I was going to shadow them so they are only casted once. Is that acceptable?
[11:43:17] <j416> mfiano: why do you need uint? can you just use int?
[11:44:10] <mfiano> Because X and Y are effectively array indices, and I want it to be a type error if they are signed.
[11:45:02] <j416> I see. Sounds like a bit of a hassle, to me. I think normally int is what would be used here, in Go.
[11:45:32] <mfiano> Fair enough, thanks.
[11:48:32] <b0nn> There's going to be a lot of casting if you go down the uint path https://go.dev/play/p/NVrlIaa4MXc
[11:49:20] <b0nn> actual, because w and h are uint you can save a couple of casts
[11:49:57] <b0nn> https://go.dev/play/p/KW61d9Mjxud
[11:50:28] <b0nn> https://go.dev/play/p/lvlRGdU7T59
[11:51:15] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[11:51:53] *** Joins: teasea (~teasea@user/teasea)
[11:53:40] <mfiano> Thanks
[11:54:05] <b0nn> heh - I'm procrastinating - this Swift UI is boring :\
[11:54:14] <mfiano> hehe
[11:56:03] *** Quits: bluedust (~bluedust@117.207.229.182) (Remote host closed the connection)
[11:57:59] *** Joins: bindu (~bindu@user/bindu)
[11:59:25] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[12:03:07] <mfiano> So about that factory solution; would it be possible to instead pass in an interface like "cell Cell", and have the body automatically instantiate them with the x=i, y=j values, leaving any user fields as their zero values?
[12:04:41] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[12:08:19] <mfiano> This would probably need reflection I'd assume, to get the type of the passed in value that implements the interface
[12:08:26] <mfiano> But I'm not sure how doable this is
[12:09:59] <ikke> type assertions
[12:10:45] <mfiano> I am aware of them, but this is not client code
[12:11:00] <ikke> foo, ok := cell.(underlying_type)
[12:11:03] <mfiano> It does not know the concrete type the user passes in for the interface
[12:11:04] <ikke> ok
[12:11:42] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[12:16:09] *** Joins: bluedust (~bluedust@117.207.229.182)
[12:18:04] <j416> mfiano: the x and y indices of each cell effectively _is_ its coordinate; why do you need the x and y ints? or alternatively, why do you need to put the cells in a grid structure?
[12:18:30] <j416> s/is/make up/
[12:19:01] <mfiano> Idea is to wrap the grid with more domain knowledge later on
[12:19:35] <j416> ok but why do you need to store the coordinate twice?
[12:21:10] <mfiano> cell objects should be able to know their own coordinates, and will also contain more domain knowledge
[12:21:32] <j416> and the grid?
[12:21:39] <mfiano> Yes
[12:22:07] <j416> why do you need the grid structure ([][]Cell)?
[12:22:49] <mfiano> I am not sure how to better explain it. I am currently occupied trying to think how to solve that reflection issue.
[12:23:02] <j416> I'm trying to help you avoid that
[12:24:27] <mfiano> Ok, well the idea is that the user should be able to create a grid from their own extension of a cell (and the grid will be a struct eventually).
[12:25:23] <j416> mfiano: here's a different approach to storing cells in a grid while keeping them accessable by x, y coordinates: https://go.dev/play/p/66kROg_umZs
[12:25:31] <mfiano> The user will be be embedding cell into their own struct.
[12:26:41] <mfiano> I honestly don't want the cost of a hashing function.
[12:27:43] <j416> it all depends on your problem; this can be much cheaper for large grids and also much cheaper if all coordinates don't need to have cell data
[12:28:46] <mfiano> Eventually this will be used in several contexts, but one noteable project is for image convolution.
[12:29:14] <mfiano> It should be general, yet fast.
[12:29:19] *** Joins: rendar (~rendar@user/rendar)
[12:29:25] <mfiano> A good trade-off between the two, anyway
[12:32:16] <j416> fwiw, https://pkg.go.dev/image provides read/write access to individual pixels if needed
[12:34:14] <j416> anyway; just trying to provide a different perspective. Reflection should be a last-resort.
[12:34:51] <mfiano> I agree there.
[12:35:07] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[12:36:14] <mfiano> Thank you for your help. I am still in the exploratory phase of this design, but by image I meant some arbitrary 2D representation for some AI algorithms, not necessarily a particular image format.
[12:36:40] <j416> o/ I hope you figure out a nice design for it.
[12:36:42] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[12:37:53] <mfiano> Your suggestions will definitely be considered. I am a bit tired now so I will think more tomorrow.
[12:39:58] *** Quits: bluedust (~bluedust@117.207.229.182) (Remote host closed the connection)
[12:40:29] <j416> it doesn't have to be a map either, you can store a grid structure in a flat slice too and calculate the offset for each row, for example.
[12:41:07] <j416> I'd perhaps look at existing matrix implementations and see if there's inspiration to be drawn
[12:41:18] <mfiano> Yes, that is what I did in my original Lisp implementation.
[12:41:25] <j416> :)
[12:43:12] <mfiano> My first project idea was actually a linear algebra library for graphics programming (I know, a few already exist, but I have very strong opinions about how one should be designed), however, I would like to wait for generics to be stable for that.
[12:43:19] *** Joins: mrig (~mrig@user/mrig)
[12:43:43] <j416> cool
[12:43:48] <mfiano> My background is graphics programming, particularly procedural generation and texture synthesis.
[12:44:34] <j416> sounds fun
[12:48:09] *** Quits: deniska (~denis@user/deniska) (Quit: leaving)
[12:48:16] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[12:48:50] <bailsman> How do I grab a panic from a goroutine (a test in this case)?
[12:49:15] <ikke> https://go.dev/blog/defer-panic-and-recover
[12:49:32] <bailsman> "Well don't run it in a go routine" - sure, but testing.(*T).Run() runs it in a go routine itself
[12:50:09] <ikke> With defer + recover
[12:50:16] *** Joins: deniska (~denis@user/deniska)
[12:50:31] <bailsman> ikke: the go routine is started inside of the go standard library (inside testing.(*T).Run()) I need to grab the panic from "the outside"
[12:52:44] *** Joins: trafficjam (~trafficja@119.17.42.59)
[12:52:48] <trafficjam> greetings
[12:52:48] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:53:58] <j416> hello, 世界.
[12:54:25] <trafficjam> what sort of use cases is golang good for?
[12:55:01] <mfiano> Very modular programs.
[12:55:07] <j416> APIs and command-line tools are cases for which I've found it well-suited.
[12:55:18] <bailsman> what sort of use cases is golang not good for?
[12:55:26] <ikke> graphical applications
[12:55:30] <j416> ^
[12:55:32] <mfiano> Hard real-time applications
[12:55:36] <bailsman> can I override a thing that's testing.T with my custom T and then pass it to a function that expects testing.T?
[12:55:45] <j416> bailsman: no
[12:55:54] <j416> bailsman: testing.T is always testing.T
[12:55:58] <bailsman> I reckon the answer is no - if you want that it would need to be a interface
[12:56:06] <bailsman> OK so I'm stuck - I can't grab the stacktrace from a test then
[12:56:15] <bailsman> at least not without putting a defer in every one of my tests
[12:56:37] <ikke> xy
[12:56:44] <trafficjam> so when should i pick c++/rust over golang?
[12:56:51] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[12:56:57] <trafficjam> seems like go is very good for networking type applications
[12:57:00] <mfiano> When you want to be able to code fast with minimal syntactical nonsense
[12:57:13] <j416> nah ^
[12:57:15] <ikke> thath's the other way around
[12:57:22] <mfiano> Yes, invert that
[12:57:28] <j416> then yes
[12:57:37] <trafficjam> what are we inverting?
[12:57:59] <mfiano> Go is concise and very light on syntax. It also compiles blazingly fast compared to C++ or Rust
[12:58:08] <bailsman> trafficjam: inverting to counter a guard pass
[12:58:12] <mfiano> If you want to get work done, and get it done quickly, choose Go over those 2
[12:58:24] <ikke> rust's type system is stronger
[12:58:33] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[12:58:34] <bailsman> ikke: x is that I need to filter the stack trace of the test through a function that replaces my interpreter runtime frames with the actual code being interpreted. But I guess I need to reimplment much of stdlib.testing to do that if I can't access it otherwise.
[12:58:34] <j416> Go is a higher level language if you will than C++/Rust; C++/Rust might give you more fine control at the expense of more time spent
[12:58:39] <trafficjam> ok nice, and if i want better performance or "safer" code pick rut?
[12:58:50] <trafficjam> *rust
[12:59:00] <mfiano> I would not say Rust is safer
[12:59:10] <j416> I don't think it could be summarized that short
[12:59:21] <j416> Rust has safety mechanisms but so does Go
[12:59:37] <mfiano> Go has garbage collection, which comes from the 1950's Lisp era, so "safe" GC languages have had time to mature.
[13:00:15] <Disconsented> Depends on which safer you care about
[13:00:54] <j416> trafficjam: Go also has a quite extensive standard library when it comes to networky things; it has an HTTP server and client for example, which comes in useful for web things
[13:01:17] <Disconsented> Memory safety is more or less about the same but it has a fair few foot guns, type assertions are a good example of this
[13:01:25] <mfiano> Garbage collected languages can be much faster for large, complicated programs than manual memory management, without writing a lot of custom allocators.
[13:02:04] <trafficjam> fair enough, thanks for the info guys
[13:02:08] <mfiano> There is even Rust advice floating around to deallocate on another thread, since the compiler's safety guarantees lead you to lots of heap data.
[13:02:15] <j416> did he pick Go did he pick Go :O
[13:02:33] <j416> or she
[13:02:36] <j416> (or it)
[13:02:39] <trafficjam> lol i like both, but i think go is the better general language i would say
[13:02:44] <mfiano> Which is solving one problem for a bigger one, at best.
[13:02:47] <bailsman> "zero cost abstractions" are a nice idea but so far no free lunch
[13:02:51] <j416> that's the spirit. good choice trafficjam!
[13:02:53] <trafficjam> better for development speed, etc
[13:03:12] <trafficjam> does go have generics yet?
[13:03:15] <j416> almost
[13:03:23] <ikke> 1.18
[13:03:26] <trafficjam> will that make the language less verbose?
[13:03:26] <mfiano> They are in the latest beta release
[13:03:39] <trafficjam> not quite sure what the main benefit of generics is tbh
[13:03:43] <mfiano> More verbose, but less duplication, I'd say
[13:03:50] <j416> ^ this
[13:03:52] <ikke> trafficjam: generic functions for container types
[13:04:23] <mfiano> generics are also opt-in, so verbosity won't change if you don't want
[13:04:41] <trafficjam> that's good to hear
[13:04:54] <trafficjam> also, how do you guys compare C against golang?
[13:05:10] <j416> C more hassle Go less hassle
[13:05:17] <trafficjam> i've just started reading K&R, thought it might help make me a better go programmer
[13:05:39] <mfiano> Too much undefined behavior.
[13:05:42] <ikke> go abstracts a lot of thigns away you need to take care of in C
[13:05:45] <mfiano> Much more hassle
[13:06:50] <j416> C can do things that Go cannot, but if you don't need that, Go is a nice time saver
[13:07:30] <trafficjam> like lower level access to hardware?
[13:07:35] <bailsman> Is there truly no fully general way to capture the call trace of a goroutine?
[13:07:39] <j416> yes, like the above-mentioned; graphics stuff, low-level things, embedded systems
[13:07:48] <bailsman> I don't want to reimplement all of the standard library to make it not use goroutines
[13:08:04] <j416> you can do some of that with Go as well, just not to the same degree or with the same control
[13:08:14] <mfiano> I wouldn't say Go is unsuitable from graphics stuff. The garbage collector is fine for soft real-time applications like games.
[13:08:15] <trafficjam> ah ok, good to know
[13:08:50] <bailsman> So when the child goroutine panics, it prints the stacktrace on stdout. Where does that come from? Is that the runtime doing that?
[13:08:51] <j416> bailsman: ikke said xy to mean, if you give more context, perhaps there's a different solution altogether to this problem that doesn't involve all of that
[13:09:04] <bailsman> stderr*
[13:10:06] <j416> yes, there are nice graphics libraries available for Go, as well. But you won't be writing your next PS5 game in Go.
[13:10:21] <bailsman> j416: I want to parse the stacktrace and clean it up before it goes to the user. In my main goroutine, I catch panics and then clean up the stacktrace before printing it. But when I run a test, it's printed to stderr without being caught by the main defer function in raw form.
[13:10:23] <j416> (or will you, plot twist)
[13:10:50] <j416> bailsman: who is the user?
[13:10:53] <bailsman> also me
[13:11:40] <bailsman> so I could catch the panic in each test instead, but then I have to sprinkle a million defers all over my tests
[13:11:45] <j416> is your test case like a "it doesn't panic when" scenario?
[13:11:59] <bailsman> it's not supposed to panic
[13:12:10] <j416> right, so that's the test?
[13:12:40] <bailsman> no, it tests some functionality and then pass/fail if the functionality is working. I'm not testing whether it will panic - it panics by accident.
[13:12:59] <j416> isn't it useful to have the panic with the stack trace and all?
[13:13:17] <j416> the tests still fail, technically
[13:13:17] <mfiano> I would want to see the unaltered stack trace.
[13:13:24] <bailsman> I want the filtered stacktrace - the raw stacktrace just shows me the interpreter runtime. It doesn't tell me what caused the panic
[13:14:06] <j416> could you write a smaller test to capture just the relevant bits?
[13:15:10] *** Quits: frebib (~frebibcha@nerdhouse.io) (Quit: Bridge terminating on SIGTERM)
[13:15:14] <bailsman> The test is not of the interpreter, it's just *being interpreted* with the result that each line of code is some kind of call inside the interpreter
[13:16:00] <bailsman> that stacktrace is not very useful - I want one that shows the *code being interpreted* rather than the *runtime of the interpeter*
[13:16:15] <j416> I think you lost me on interpreter
[13:16:24] *** Joins: frebib (~frebibcha@nerdhouse.io)
[13:16:36] <j416> are you writing a compiler?
[13:16:48] <j416> script interpreter?
[13:17:14] <bailsman> It's not a compiler so much as an interpreter. It's not mine, I downloaded it from github and I'm hacking on it.
[13:17:49] <j416> so you want to know on what part of the input to (not) your interpreter that causes the interpreter to panic?
[13:18:40] <bailsman> Kind of. To make it more complicated, a lot of code is actually run directly in the go runtime, only small parts of it are being interpreted. So some stack frames will be in normal go code, some stack frames will be in the interpeter runtime
[13:18:52] <j416> tricky
[13:19:18] <j416> https://pkg.go.dev/runtime/debug provides some things to read the stack trace
[13:19:22] <bailsman> so I want to see the call stack, but then replace interpreter runtime calls with the interpreted code instead
[13:19:30] <bailsman> OK so this part may or may not be tricky but I actually already have that working
[13:19:46] <bailsman> the problem now is that when something runs in a goroutine, I can't capture the stack trace to filter it in this way
[13:19:48] <j416> and the issue is it's a different goroutine I suppose
[13:19:48] <j416> right
[13:20:09] <j416> never done this so I'm lost to be honest
[13:20:33] <j416> thanks for explaining the context.
[13:21:41] <j416> sounds a bit like the interpreter implementation should be able to aid in providing this info
[13:21:55] <j416> does it not provide helpers for it?
[13:22:02] <j416> just, guessing.
[13:22:31] <bailsman> What info? The stacktrace? How do I get that stacktrace is the problem! I'm hacking on the interpreter, I can add whatever helper we need.
[13:22:51] <bailsman> The panic is in binary code, not in interpreted code.
[13:23:26] <bailsman> How does the stacktrace end up on stderr? Does the go runtime just print it to stderr if a panic is uncaught? Maybe I can capture stderr and parse from there.
[13:23:30] <j416> maybe https://stackoverflow.com/questions/19094099/how-to-dump-goroutine-stacktraces ?
[13:23:47] <j416> pprof.Lookup
[13:25:05] <bailsman> I can print the stack trace at a random point, but I need to print it at the moment of a panic. After the child goroutine exits, it's too late, no?
[13:25:32] <j416> that's more than I know, sorry.
[13:27:05] <j416> does recover not record it?
[13:27:18] <j416> recover + debug.Stack()
[13:27:22] <bailsman> From my testing, inside the goroutine yes, outside no.
[13:27:26] <j416> huh.
[13:27:31] <bailsman> but the goroutine is started from the go stdlib, not by me.
[13:27:41] <j416> I see.
[13:28:25] <j416> I heard graphics programming is fun, maybe try that
[13:28:27] * j416 runs
[13:28:38] <bailsman> I wonder if I should parse stderr for anything that looks like a stacktrace. That seems like a horrible idea
[13:28:59] <j416> indeed
[13:29:47] <j416> or maybe you could find a way to not hook into the runtime like that when testing the specific part you're writing?
[13:31:36] <bailsman> So the test itself is being interpreted, but I'm calling it through stdlib.testing.(*T).Run which is binary code. What I could do is reimplement stdlib.testing to make it interpreter aware. But I don't want to end up reimplenting all of the std library, so I was hoping there was a more general way to capture stack traces from child goroutines
[13:32:45] <bailsman> The only fully general way I've thought of so far as parsing stderr (blegh)
[13:33:20] <bailsman> I don't think I understand how it ends up on stderr in the first place. Is it the go runtime that does that when a panic is not recovered?
[13:36:15] <j416> no idea. sorry. I'm out; perhaps someone else knows! good luck with it. :)
[13:39:53] <bailsman> I wonder if I can lie about the type? Could I wrap the testing.T object to not really be testing.T, but secretly something else, so that when stdlib.testing.runTests calls Run on my object, it actually goes to a different function instead?
[13:40:49] <bailsman> It would still have to think it's testing.T to pass the type checker when entering the function, but at the same time go to a different function
[13:42:00] <bailsman> I think it should be impossible - the function that's going to get called is going to get selected by the type.
[13:43:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:43:31] *** Quits: deniska (~denis@user/deniska) (Quit: leaving)
[13:44:28] *** Joins: deniska (~denis@user/deniska)
[13:45:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[13:47:30] <bailsman> BTW this is an archetypical case of Hyrum's law. I'm already depending on so many things that no language/runtime designer should ever predict someone to depend on, and contemplating adding a few more such things. :(
[13:48:10] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[13:51:07] *** Quits: deniska (~denis@user/deniska) (Read error: Connection reset by peer)
[13:51:26] *** Joins: deniska (~denis@user/deniska)
[14:21:29] *** Joins: bluedust (~bluedust@117.207.229.182)
[14:34:11] *** Joins: arinov (~arinov@213.194.126.155)
[14:44:34] *** Joins: moto (~moto@user/moto)
[14:47:43] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[14:53:30] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 260 seconds)
[14:55:40] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[14:58:27] *** Joins: darkapex_ (~darkapex@user/darkapex)
[14:58:37] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[15:12:30] *** Joins: arinov (~arinov@213.194.126.155)
[15:15:04] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:17:47] *** Quits: haniaF (~haniaF@83.24.188.64.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[15:17:55] *** Joins: mrig (~mrig@user/mrig)
[15:41:11] *** Quits: arinov (~arinov@213.194.126.155) (Quit: Konversation terminated!)
[15:41:33] *** Joins: arinov (~arinov@213.194.126.155)
[15:42:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:46:39] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[15:59:20] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:02:54] <bailsman> I'm a very silly goose - I can just iterate over all testing.T objects and replace their function with a wrapper that defers. This works great. I haven't run into any other parts of the stdlib yet that do things in goroutines that might panic, so I'm saved from parsing stderr for now.
[16:13:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:16:54] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[16:17:25] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[16:22:17] *** Joins: eroux (~eroux@102-65-85-112.ftth.web.africa)
[16:23:49] *** Joins: jimeh (~jimeh@matrix.bah.io)
[16:24:02] *** Joins: Mattiaslndstrm (~Mattiasln@185.213.154.236)
[16:24:03] *** Quits: Mattiaslndstrm (~Mattiasln@185.213.154.236) (Client Quit)
[16:25:59] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[16:27:40] *** Joins: jimeh (~jimeh@matrix.bah.io)
[16:27:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[16:29:59] *** fling is now known as swing
[16:30:35] <rawtaz> so https://pkg.go.dev/path/filepath#Glob using https://pkg.go.dev/path/filepath#Match doesnt support the ** syntax. if you want to support matching with ** on file- and dirpaths, what package or solution would you use?
[16:31:25] *** Quits: eroux (~eroux@102-65-85-112.ftth.web.africa) (Ping timeout: 256 seconds)
[16:31:33] <ikke> https://github.com/goreleaser/fileglob is an option
[16:35:51] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[16:36:08] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[16:45:46] <rawtaz> yeah
[16:46:35] *** Joins: jimeh (~jimeh@matrix.bah.io)
[16:48:16] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[16:49:13] *** Joins: jimeh (~jimeh@matrix.bah.io)
[16:49:36] *** Quits: jimeh (~jimeh@matrix.bah.io) (Remote host closed the connection)
[16:51:17] *** Joins: jimeh (~jimeh@matrix.bah.io)
[16:53:13] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[16:53:28] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[16:53:28] *** Joins: menace (~someone@user/menace)
[16:53:30] *** menace is now known as Deknos
[16:55:18] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:59:45] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:05:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:09:42] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Quit: Leaving)
[17:12:46] *** Joins: rvalue (~rvalue@user/rvalue)
[17:14:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[17:14:56] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Client closed)
[17:15:56] *** Joins: hellstabber (~hellstabb@178.233.16.12)
[17:18:27] *** Joins: bluedust_ (~bluedust@117.207.230.68)
[17:18:37] *** Quits: bluedust (~bluedust@117.207.229.182) (Ping timeout: 240 seconds)
[17:45:44] *** Joins: dingdreher (~dingdrehe@46.140.25.62)
[17:46:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:46:06] <fikran> I have an issue with a self-signed certificate. I am trying to add it to the trusted store on ubuntu, which I think I did correctly. HOwever. golang's http says its not trusted.
[17:46:13] <fikran> is there a way to identify where the breakdown may be?
[17:52:33] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[17:53:23] *** Quits: Deknos (~someone@user/menace) (Read error: Connection reset by peer)
[17:53:28] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:54:16] *** Joins: neurocyte0132889 (~neurocyte@IP-185117068002.dynamic.medianet-world.de)
[17:54:16] *** Quits: neurocyte0132889 (~neurocyte@IP-185117068002.dynamic.medianet-world.de) (Changing host)
[17:54:16] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:55:11] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[17:55:37] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[17:55:37] *** Joins: menace (~someone@user/menace)
[17:55:41] *** menace is now known as Deknos
[17:56:14] <fikran> fixed it...
[17:56:55] <fikran> no, I'm wrong. Spoke too soon.
[17:59:25] *** Quits: Deknos (~someone@user/menace) (Client Quit)
[17:59:29] *** Quits: hellstabber (~hellstabb@178.233.16.12) (Quit: Cy@)
[18:04:08] <MrElendig> lose cert or cert signed by your own custom CA?
[18:05:13] *** swing is now known as bedroller
[18:09:31] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:12:04] *** Joins: fef (~thedawn@user/thedawn)
[18:14:54] *** Quits: rdg (~rdg@user/rdg) (Quit: leaving)
[18:24:24] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[18:33:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[18:35:35] <bailsman> Is there any way to know from a panic whether you're going to get recovered or not?
[18:38:56] *** neurocyte0132889 is now known as neurocyte
[18:42:09] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Remote host closed the connection)
[18:45:26] *** Joins: rdg (~rdg@user/rdg)
[18:56:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:57:34] <ramblebamble> you mean if the throwing code knows that?
[18:58:40] <ramblebamble> unlikely, when I think about it, the code panics because there is no way forward, so the calling code needs to handle that, but that is outside of the domain of the called code
[18:59:01] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[18:59:02] *** Joins: neurocyte4 (~neurocyte@IP-185117068002.dynamic.medianet-world.de)
[18:59:02] *** Quits: neurocyte4 (~neurocyte@IP-185117068002.dynamic.medianet-world.de) (Changing host)
[18:59:02] *** Joins: neurocyte4 (~neurocyte@user/neurocyte)
[19:00:00] <bailsman> Is there a way to pass a variable to a parent defer() function without panicking?
[19:01:15] <ramblebamble> what is a parent defer() ?
[19:02:02] <bailsman> so I have function A, which defers something, and then it calls function B. I want to pass a variable from function B into the defer from functionA.
[19:02:59] *** darkapex_ is now known as darkapex
[19:03:03] *** Joins: arinov (~arinov@178.240.190.206)
[19:03:09] <ramblebamble> that does not make sense, if you need s.th. from func B to pass to a func call in A defer it at a later time, or not at all, after all defer only means execute at a later date
[19:03:26] <bailsman> You're right, I'm being fairly confused at the moment.
[19:03:44] <bailsman> I just need to return that value from B.
[19:05:18] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[19:09:17] <bailsman> Actually, returning is going to be tricky. It's not only 2 functions deep, it's many functions deep. I've been taking advantage of the fact that panic directly jumps to the right defer frame. If I don't do that, I have to pass that return value everywhere.
[19:09:44] <ramblebamble> bailsman, what about channels?
[19:12:18] <bailsman> So hold on, if I don't call recover() in my defer frame, that panic is going to happily travel up the call stack, until some other defer recovers it, right?
[19:13:17] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[19:13:46] <bailsman> ramblebamble: another problem is that it's a recursive function and I don't know how deep I am - I guess I want only the top one to panic.
[19:14:07] <bailsman> I think that may be what I need to focus on - once I know that I'm the top level one, I can just make sure none of the lower level ones call recover()
[19:15:42] <bailsman> ...but there's no way to know that without looking at the call stack and checking if I'm first. But that is so dumb. *cries*
[19:17:14] <ramblebamble> usually when you have an error it is not within the first layer, I would just check and be thorough with the calls, after all, you ought to know what the datastructure or logic is to be structured like when you are traversing it
[19:17:52] <ramblebamble> also, recover only makes sense in a defered function and the signature of a panic is panic(interface{})   so you can pass it a parameter, recover returns that interface
[19:18:12] <ramblebamble> so instead of panicing a thorough structure might be in order
[19:18:15] *** Quits: arinov (~arinov@178.240.190.206) (Remote host closed the connection)
[19:19:04] <bailsman> I don't suppose you can check what recover() would give you without actually recovering?
[19:19:26] <bailsman> like oh, it's that, never mind I don't want to recover :P
[19:20:17] <bailsman> OK so currently what I'm doing is just repanic the thing. But now what happens that if I don't recover it in the end, I have panic: panic: panic: panic: panic: printed a dozen times, and my error is a huge wall of text. So I only want to print that wall of text once if I can.
[19:20:54] *** Joins: Mattiaslndstrm (~Mattiasln@185.213.154.224)
[19:21:38] <ramblebamble> panic is not an exception you can rethrown, I have no idea what will happen when you panic in a recoverymethod, also why would you want to panic, it is a recursion and they have to meet certain conditions. not met the recursion ends
[19:23:03] *** Joins: Teckla (~Teckla@user/teckla)
[19:23:11] <bailsman> Panicking in a recovery method is basically rethrowing the exception, no?
[19:23:34] <bailsman> Ah, that might have been where I went wrong in my thinking.
[19:24:17] <ramblebamble> I am not saying don't panic, I am saying you might want to reconsider your approach making your life easier and your program sturdier
[19:26:25] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:27:13] *** Quits: bluedust_ (~bluedust@117.207.230.68) (Remote host closed the connection)
[19:28:14] *** Joins: bluedust (~bluedust@117.207.230.68)
[19:28:48] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[19:30:24] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[19:30:41] <bailsman> It would make a lot of sense if I could redesign it with only one panic handler
[19:30:53] <bailsman> and maybe a slice or map with the handler functions I need to call in order
[19:32:30] *** Joins: holgersson (~quassel@user/holgersson)
[19:33:52] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[19:34:03] *** Quits: bluedust (~bluedust@117.207.230.68) (Remote host closed the connection)
[19:34:10] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Client Quit)
[19:43:42] *** Joins: moog (~moog@107.126.53.180)
[19:47:29] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:52:53] *** Joins: et_ (~et@user/et)
[19:53:17] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[19:53:21] *** et_ is now known as et
[19:54:06] <mfiano> Are types first-class?
[19:54:25] *** Joins: bluedust (~bluedust@117.207.230.68)
[19:54:38] *** Joins: mobbi_ (~quassel@dfsm20yyg93ywxscj9bjt-3.rev.dnainternet.fi)
[19:54:59] <j416> no
[19:55:04] <mfiano> Can they be passed to and returned from functions, just as values can? I am assuming if this were possible, only with reflect.Type, so not really a good idiom.
[19:56:44] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-57.dsl.bell.ca) (Ping timeout: 252 seconds)
[19:58:41] *** Quits: mobbi (~quassel@dfsm20ydpm85l8nn-br0t-3.rev.dnainternet.fi) (Ping timeout: 245 seconds)
[20:01:39] *** Joins: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl)
[20:07:02] *** lechner_ is now known as lechner
[20:07:22] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:14:52] <mfiano> In the book I read, it mentions that modules no longer have to be under GOPATH, and one can adopt their own project hierarchy anywhere. Is this true? I ask because sometimes I get 'BrokenImport: could not import github.com/mfiano/some/pkg/path (no required module provides package "github.com/mfiano/some/pkg/path")', even though I do have a go.mod file in the root of the project directory. This
[20:14:54] <mfiano> only occurs sometimes though, so it's driving me mad.
[20:16:48] <rawtaz> try `go mod vendor`
[20:19:45] <mfiano> I don't have any third-party dependencies. I have a cmd/main.go file with a "main" package, that tries to import "github.com/mfiano/module/pkg/foo" with a file existing at pkg/foo.go with package "foo".
[20:20:52] <mfiano> "no dependencies to vendor"
[20:21:03] <j416> mfiano: go mod tidy
[20:21:27] <mfiano> That didn't seem to do anything. go.mod looks the same
[20:22:21] <j416> wrong package name somewhere?
[20:23:05] <mfiano> I mean I only have 2 files, where one tries to import the other. I am not sure where I have gone wrong here.
[20:27:45] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[20:29:54] *** Quits: cfebs (~cfebs@user/cfebs) (Quit: ZNC 1.8.2 - https://znc.in)
[20:34:13] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[20:34:24] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[20:34:24] *** Joins: menace (~someone@user/menace)
[20:34:28] *** menace is now known as Deknos
[20:35:15] <lazyreader> bailsman if you're recursing down a function call, just return `, err` and check for the error as you unwind the recursion. if you're at the top level, handle it, otherwise just return the error again
[20:38:15] <lazyreader> https://go.dev/play/p/TAH2RZ9qa1F
[20:38:28] <lazyreader> something like that
[20:39:20] <lazyreader> basically, don't try and use panics like you would an exception in languages with exceptions. panics are for truly unrecoverable cases, and shouldn't be used to mimic control-flow.
[20:40:20] <lazyreader> https://go.dev/play/p/SFpqGUndf4Q makes the flow slightly clearer
[20:42:27] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:48:09] <mfiano> Maybe I'm confused here. If I use a module called github.com/mfiano/foo, can I initially develop it privately with no remote repository?
[20:53:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[20:56:14] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: /help nick)
[20:56:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[20:56:44] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[20:57:44] *** ramblebamble is now known as gone_fishing_ram
[20:58:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[20:58:02] *** Joins: cfebs_ (~cfebs@user/cfebs)
[20:58:55] *** gone_fishing_ram is now known as ramblebamble
[20:59:03] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Client Quit)
[20:59:21] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[21:00:36] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[21:00:39] <novns> yes, why not
[21:01:48] <ikke> mfiano: it's just a namespace
[21:02:13] <ikke> a namespace that by convention has the same name of a remote repository
[21:02:28] <mfiano> This is what I'm working with now: https://i.lisp.cl/pUzpAk.png
[21:08:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[21:10:58] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Remote host closed the connection)
[21:11:37] *** Quits: cfebs_ (~cfebs@user/cfebs) (Quit: ZNC 1.8.2 - https://znc.in)
[21:11:38] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:13:02] <j416> mfiano: one package one directory
[21:13:07] <j416> mfiano: put cell.go in a subdirectory
[21:15:45] *** Joins: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[21:17:56] *** Quits: rvt (~rvt@librecad/rvt) (Ping timeout: 268 seconds)
[21:18:36] <mfiano> Thanks, I just discovered that. Yes, I had a false assumption that a package was the file at the last component of an import path. The Slack channel cleared that up for me.
[21:19:33] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: I hear the kitchen calling)
[21:22:29] *** Joins: sponji (~i5@2607:fb90:f391:27c:8593:7ad4:b206:b37c)
[21:28:00] *** Joins: mattmurr[m] (~mattmurrt@2001:470:69fc:105::1:5ea0)
[21:28:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:29:27] *** Joins: danmurf (uid480399@user/danmurf)
[21:33:09] *** Joins: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca)
[21:35:47] *** Quits: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[21:38:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5401-fb84-56c5-61fd.res6.spectrum.com)
[21:44:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[21:48:40] <blinux> omg, trying to get an educational license for jetbrains and it is so complicated. I had to use three email addresses and the thing is so confused I don't even want to deal with it now.
[21:49:30] <blinux> It locked me out due to already existing username, account etc. I don't even know what is going on now.
[21:50:07] <blinux> You have to apply free license from one email addresses to apply to another and create a new account because you can't apply license to already existing account etc.
[21:50:46] *** Quits: mattmurr[m] (~mattmurrt@2001:470:69fc:105::1:5ea0) (Quit: Reconnecting)
[21:51:02] *** Joins: mattmurr[m] (~mattmurrt@2001:470:69fc:105::1:5ea0)
[21:55:05] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 250 seconds)
[21:58:14] *** Joins: johnjaye (~pi@154.6.152.74)
[22:00:16] <blinux> I don't get what this means. The email actually says I can use an existing account, but when I try to click the license link to apply it and login with my Jetbrains account I get this error: "Sorry, you can not accept invitation for administration of already managed personal JetBrains Account. Please contact JetBrains Sales."
[22:03:33] *** Joins: fef (~thedawn@user/thedawn)
[22:04:55] *** Quits: mohan43u (~mohan@user/mohan43u) (Read error: Connection reset by peer)
[22:05:27] *** Joins: jdrab (~jdrab@user/jdrab)
[22:05:40] <blinux> It looks like the vim-ide is outdated. It is asking for me to use GOPATH and use go get which is depricatd. I thought maybe vim-ide would be better than vim-go.
[22:07:42] *** Joins: phoenixh (~phoenixh@p200300dd6f218c006fcd5b7df0ccdf2d.dip0.t-ipconnect.de)
[22:08:07] <blinux> I'm using a really old PC at the moment. It looks like GoLand is telling my PC is too slow to use GoLand.
[22:08:10] *** Quits: phoenixh (~phoenixh@p200300dd6f218c006fcd5b7df0ccdf2d.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:08:23] *** Joins: mrig (~mrig@user/mrig)
[22:10:25] *** Joins: mohan43u (~mohan@user/mohan43u)
[22:17:45] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:21:07] *** Festive_Dragon is now known as A_Dragon
[22:27:51] *** Joins: bluedust_ (~bluedust@89.238.143.233)
[22:29:37] *** Quits: KonaArctic (~KonaArcti@cpe589630c73bed-cm589630c73beb.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[22:30:50] *** Quits: bluedust (~bluedust@117.207.230.68) (Ping timeout: 260 seconds)
[22:31:51] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:33:55] <blinux> omg, I found why the syntax highlighting wasn't working with vim-go. There is an issue report from 2015 on github saying you have to enable syntax highliting in the .vimrc with special settings for vim-go because syntax highliting is slow on slow machines. So, otherwise only some highliting works. https://github.com/fatih/vim-go/issues/316
[22:35:34] <blinux> It looks like "let g:go_highlight_functions = 1" and operators and a few other things were set to 0 by default for some reason driving me crazy.
[22:36:20] <Vigdis> I'm playing with https://go.dev/blog/pipelines/bounded.go, I would like to make L21 errc unbuffered. I guess I should use a select as said L25. Where should this select go? In walkFiles() or L75?
[22:48:37] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[22:49:50] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[22:50:52] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Max SendQ exceeded)
[22:56:48] *** Quits: Piraty (~irc@user/piraty) (Quit: -)
[22:56:57] *** Joins: Piraty (~irc@user/piraty)
[23:04:24] *** Quits: Piraty (~irc@user/piraty) (Quit: -)
[23:04:43] *** Joins: Piraty (~irc@user/piraty)
[23:04:54] *** Quits: Piraty (~irc@user/piraty) (Client Quit)
[23:06:48] *** Joins: Piraty (~irc@user/piraty)
[23:08:39] *** Quits: dingdreher (~dingdrehe@46.140.25.62) (Ping timeout: 256 seconds)
[23:08:54] *** Quits: Piraty (~irc@user/piraty) (Client Quit)
[23:09:03] *** Joins: Piraty (~irc@user/piraty)
[23:12:13] <b0nn> Vigdis: the reader needs the select
[23:13:45] <b0nn> There's a select at line 55 though :\
[23:14:26] <Vigdis> yeah digester is unrelated to the error path
[23:14:59] <Vigdis> I wonder if the for L81 needs to be changed for the select
[23:15:35] <b0nn> errc is only read a line 101 though
[23:15:58] <b0nn> you'd have to clear errc to let the writer continue
[23:16:09] <Vigdis> oh sorry, L94's for
[23:16:34] <Vigdis> I don't understand why they don't show properly the tabs, I find the code unreadable
[23:16:56] <Vigdis> and with "?m=text" there isn't the line numbers
[23:18:12] <Vigdis> b0nn, the 'interesting thing is that if I make walkFiles fail (with chmod 0), it 'works'. It's if there's no error, it blows up with "fatal error: all goroutines are asleep - deadlock!"
[23:18:33] <b0nn> It's kind of weird that the error channle is handled in the main goroutine, but the digestion of the done channel is in a different goroutine
[23:22:35] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[23:27:24] <mickey8> when i write a test for pkg/cli/cli.go and i want to use testdata/cli/file.ext, the test runs with with getwd() of pkg/cli and not ./ so it cant find the testdata folder. am i missing something? would you put a testdata folder in every pkg/*/ ?
[23:30:13] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-630-171.w86-246.abo.wanadoo.fr) (Quit: The Lounge - https://thelounge.chat)
[23:32:25] *** Quits: Mattiaslndstrm (~Mattiasln@185.213.154.224) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:38:02] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:38:22] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[23:38:28] *** Quits: wim (~wim@42.be) (Ping timeout: 265 seconds)
[23:38:33] *** Joins: isnessness (~ugjka@ugjka.net)
[23:38:38] *** Joins: Nixieboluo8 (~Nixiebolu@47.93.220.75)
[23:38:39] *** Joins: kochchef_ (~quassel@80.146.255.46)
[23:38:53] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[23:38:58] *** Joins: haniaF_ (~haniaF@83.24.213.141.ipv4.supernova.orange.pl)
[23:39:21] *** Joins: zwrr (~zwr@2804:d45:b966:fb00:1f1f:72e7:c7dc:fde0)
[23:39:25] *** Joins: predmijat_ (~predmijat@mail.strogopro.com)
[23:39:25] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[23:39:32] *** Joins: hayaliali (~alip@exherbo/developer/alip)
[23:39:33] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[23:39:33] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[23:39:33] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[23:39:35] *** Joins: Rudde_ (~rudde@netboot.io)
[23:39:37] *** Joins: opc0de (~nathan@user/opcode)
[23:39:40] *** Joins: pieguy128_ (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[23:39:40] *** Joins: oelewapp1rke (~cde@ns509915.ip-198-245-49.net)
[23:39:46] *** Joins: fling (~fling@user/fling)
[23:39:47] *** Joins: maxamillion_ (sid276220@ansible/staff/maxamillion)
[23:39:49] *** Joins: caubert_ (~caubert@136.244.111.235)
[23:39:51] *** Joins: orninator (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[23:39:55] *** Joins: iivvoo3 (~l@m3r.nl)
[23:39:57] *** Joins: danmurf_ (uid480399@user/danmurf)
[23:39:58] *** Joins: alm_ (~alm@user/alm)
[23:40:02] *** Joins: hjmcnew_____ (sid86092@id-86092.tinside.irccloud.com)
[23:40:03] *** Joins: xlei_ (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[23:40:07] *** Joins: d3fn (~n0b0dy@user/defn)
[23:40:23] *** Joins: llorllale1 (~llorllale@2607:9880:3a18:69:2ddd:6dac:4c0:2c1a)
[23:40:33] *** Joins: dfch (~dfch@user/dfch)
[23:40:53] *** Joins: svedrin_ (~quassel@tiamat.funzt-halt.net)
[23:40:55] *** Joins: vds__ (sid12483@id-12483.helmsley.irccloud.com)
[23:40:56] *** Joins: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de)
[23:40:56] *** Server sets mode: +Ccnt 
[23:41:00] *** Joins: jamra_ (sid16103@id-16103.ilkley.irccloud.com)
[23:41:10] *** Joins: sgarciapdx2 (~serge@irc.shork.io)
[23:41:12] *** Joins: bw_ (sid2730@user/betawaffle)
[23:41:31] *** Joins: void09_ (~void@150.230.21.57)
[23:41:35] *** Joins: teasea5 (~teasea@user/teasea)
[23:41:35] *** Joins: bookworm_ (~bookworm@thelounge/maintainer/bookworm)
[23:41:36] *** Joins: noarb- (~noarb@user/noarb)
[23:41:39] *** Joins: Dap (~Dap@user/dap)
[23:41:40] *** Joins: earthbreaker (~earthbrea@li778-229.members.linode.com)
[23:41:42] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[23:41:47] *** Joins: casastortaAway (~casastort@dc4.krivokuca.net)
[23:41:54] *** Joins: jkl1337 (~jkl@user/jkl)
[23:41:54] *** Joins: aeadio (~aead@user/aead)
[23:42:00] *** Joins: CrunchyChewie_ (~CrunchyCh@user/crunchychewie)
[23:42:03] *** Joins: moto_ (~moto@user/moto)
[23:42:07] *** Joins: darkapex_ (~darkapex@user/darkapex)
[23:42:11] *** Joins: cp-- (~cp-@b157153.ppp.asahi-net.or.jp)
[23:42:14] *** Joins: monoxane6 (~monoxane@user/monoxane)
[23:42:16] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[23:42:18] *** Joins: rdg_ (~rdg@user/rdg)
[23:42:19] *** Joins: itsalexjones_ (~itsalexjo@82.4.99.241)
[23:42:27] *** Joins: vj--_ (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca)
[23:42:29] *** Joins: mrig_ (~mrig@user/mrig)
[23:42:30] *** Joins: remote_ (~self@user/hackers)
[23:42:37] *** Joins: wkalt (~wkalt@user/wkalt)
[23:42:39] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[23:42:48] *** Joins: noord_ (noord@user/noord)
[23:42:55] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.57)
[23:42:56] *** Joins: michele_ (~eraser@user/michele)
[23:43:00] *** Joins: neurocyte (~neurocyte@IP-185117068002.dynamic.medianet-world.de)
[23:43:00] *** Quits: neurocyte (~neurocyte@IP-185117068002.dynamic.medianet-world.de) (Changing host)
[23:43:00] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[23:43:05] *** Joins: Batzy_ (~quassel@user/batzy)
[23:43:12] *** Joins: pmcnabb6 (~pmcnabb@user/pmcnabb)
[23:43:23] *** Quits: mrig_ (~mrig@user/mrig) (Client Quit)
[23:43:36] *** Joins: avemestr_ (~avemestr@2a01:4f8:121:228f::2)
[23:43:40] *** Joins: jsvcycling_ (sid369784@id-369784.uxbridge.irccloud.com)
[23:43:43] *** Joins: hexology- (~hexology@user/hexology)
[23:43:44] *** Joins: Ugrastil6 (~Ugrastil@89.40.112.204)
[23:43:44] *** Joins: bpalmer` (~user@user/bpalmer)
[23:43:45] *** Joins: abraham5 (~abraham@143.244.185.86)
[23:43:53] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[23:43:53] *** Quits: bluedust_ (~bluedust@89.238.143.233) (*.net *.split)
[23:43:53] *** Quits: mohan43u (~mohan@user/mohan43u) (*.net *.split)
[23:43:53] *** Quits: johnjaye (~pi@154.6.152.74) (*.net *.split)
[23:43:53] *** Quits: vj-- (~vj@bras-base-toroon3514w-grc-63-174-89-63-91.dsl.bell.ca) (*.net *.split)
[23:43:53] *** Quits: danmurf (uid480399@user/danmurf) (*.net *.split)
[23:43:53] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (*.net *.split)
[23:43:53] *** Quits: sponji (~i5@2607:fb90:f391:27c:8593:7ad4:b206:b37c) (*.net *.split)
[23:43:53] *** Quits: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl) (*.net *.split)
[23:43:53] *** Quits: Teckla (~Teckla@user/teckla) (*.net *.split)
[23:43:53] *** Quits: neurocyte4 (~neurocyte@user/neurocyte) (*.net *.split)
[23:43:53] *** Quits: rdg (~rdg@user/rdg) (*.net *.split)
[23:43:53] *** Quits: rvalue (~rvalue@user/rvalue) (*.net *.split)
[23:43:53] *** Quits: jimeh (~jimeh@matrix.bah.io) (*.net *.split)
[23:43:53] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[23:43:53] *** Quits: frebib (~frebibcha@nerdhouse.io) (*.net *.split)
[23:43:54] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (*.net *.split)
[23:43:54] *** Quits: jackneilll (~jackneill@20014C4E1821BB00CA0618EC531795A9.dsl.pool.telekom.hu) (*.net *.split)
[23:43:54] *** Quits: zwr (~zwr@2804:d45:b966:fb00:fe5b:101b:8e76:fe8f) (*.net *.split)
[23:43:54] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:2ddd:6dac:4c0:2c1a) (*.net *.split)
[23:43:54] *** Quits: strubbl891941988 (~strubbl@ipbcc1859d.dynamic.kabel-deutschland.de) (*.net *.split)
[23:43:54] *** Quits: monoxane (~monoxane@user/monoxane) (*.net *.split)
[23:43:54] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (*.net *.split)
[23:43:54] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (*.net *.split)
[23:43:54] *** Quits: kochchef (~quassel@80.146.255.46) (*.net *.split)
[23:43:54] *** Quits: MD87 (~MD87@user/md87) (*.net *.split)
[23:43:54] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (*.net *.split)
[23:43:54] *** Quits: jamra (sid16103@id-16103.ilkley.irccloud.com) (*.net *.split)
[23:43:54] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[23:43:54] *** Quits: ugjka (~ugjka@ugjka.net) (*.net *.split)
[23:43:54] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[23:43:54] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[23:43:54] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[23:43:54] *** Quits: aead (~aead@user/aead) (*.net *.split)
[23:43:54] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (*.net *.split)
[23:43:54] *** Quits: OMGOMG_ (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[23:43:54] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[23:43:54] *** Quits: rawtaz (~rawtaz@user/rawtaz) (*.net *.split)
[23:43:54] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[23:43:54] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[23:43:54] *** Quits: iivvoo (~l@m3r.nl) (*.net *.split)
[23:43:54] *** Quits: eggsampler (~ur@s.id-rsa.pub) (*.net *.split)
[23:43:54] *** Quits: dfch_ (~dfch@user/dfch) (*.net *.split)
[23:43:54] *** Quits: pvalenta (~petr@mail.open-system.cz) (*.net *.split)
[23:43:54] *** Quits: oelewapperke (~cde@ns509915.ip-198-245-49.net) (*.net *.split)
[23:43:54] *** Quits: psil (~krwlisp@karatefylla.nu) (*.net *.split)
[23:43:54] *** Quits: Rudde (~rudde@netboot.io) (*.net *.split)
[23:43:54] *** Quits: alm (~alm@user/alm) (*.net *.split)
[23:43:54] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[23:43:54] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[23:43:54] *** Quits: gpeskens[w] (~gpeskens@94-208-100-217.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[23:43:54] *** Quits: hjmcnew____ (sid86092@id-86092.tinside.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: caubert (~caubert@136.244.111.235) (*.net *.split)
[23:43:55] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[23:43:55] *** Quits: noord (~noord@user/noord) (*.net *.split)
[23:43:55] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[23:43:55] *** Quits: sgarciapdx (~serge@irc.shork.io) (*.net *.split)
[23:43:55] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[23:43:55] *** Quits: maxamillion (sid276220@ansible/staff/maxamillion) (*.net *.split)
[23:43:55] *** Quits: derfj (sid19429@id-19429.tinside.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[23:43:55] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[23:43:55] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[23:43:55] *** Quits: vds_ (sid12483@id-12483.helmsley.irccloud.com) (*.net *.split)
[23:43:55] *** isnessness is now known as ugjka
[23:43:55] *** danmurf_ is now known as danmurf
[23:43:55] *** iivvoo3 is now known as iivvoo
[23:43:55] *** sgarciapdx2 is now known as sgarciapdx
[23:43:58] *** maxamillion_ is now known as maxamillion
[23:44:01] *** bw_ is now known as bw
[23:44:06] *** Joins: deniska (~denis@user/deniska)
[23:44:17] *** Joins: Teckla (~Teckla@user/teckla)
[23:44:23] *** Joins: Kaivo_ (~Kaivo@user/kaivo)
[23:44:28] *** Joins: Echoz_ (~chris@user/echoz)
[23:44:32] *** Joins: zer0bitz__ (~zer0bitz@196.244.192.57)
[23:44:33] *** Joins: dalan8 (~dalan@194-193-164-106.tpgi.com.au)
[23:44:37] *** Joins: zaz_ (~zaz@poneybl.eu)
[23:44:38] *** Joins: notevil_ (~notevil@user/notevil)
[23:44:43] *** Joins: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl)
[23:44:43] *** Joins: SoF8 (~skius@user/skius)
[23:44:45] *** Joins: eggsampler (~ur@s.id-rsa.pub)
[23:44:47] *** Joins: cnf1 (~cnf@d5152daf0.static.telenet.be)
[23:44:48] *** Joins: cation21 (cation@user/cation)
[23:44:51] *** Joins: KDDLB8 (kevin@user/kddlb)
[23:44:55] *** Joins: dozn_ (uid249292@user/dozn)
[23:44:56] *** Joins: amk (~amk@109.255.169.126)
[23:44:57] *** Quits: SoF (~skius@user/skius) (Killed (NickServ (GHOST command used by SoF8)))
[23:44:57] *** SoF8 is now known as SoF
[23:44:58] *** Joins: Anderson-D_ (sid146635@id-146635.tinside.irccloud.com)
[23:45:04] *** Joins: itsalexjones__ (~itsalexjo@82.4.99.241)
[23:45:05] *** Joins: Jmainguy1 (~Jmainguy@static.204.41.76.144.clients.your-server.de)
[23:45:06] *** Joins: yonson_ (~yonson@2600:8801:d900::16db)
[23:45:13] *** Joins: pvalenta (~petr@mail.open-system.cz)
[23:45:13] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[23:45:21] *** Joins: hhes_ (sid420846@id-420846.ilkley.irccloud.com)
[23:45:25] *** Joins: hwrd_ (aa272caead@2604:bf00:561:2000::137)
[23:45:25] *** Joins: alrs_ (alrs@tilde.team)
[23:45:26] *** Joins: jhchabran_ (~jhchabran@user/jhchabran)
[23:45:30] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[23:45:31] *** Joins: neurocyte4 (~neurocyte@IP-185117068002.dynamic.medianet-world.de)
[23:45:32] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[23:45:34] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[23:45:35] *** Quits: aml_ (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: hanzo (uid532183@user/hanzo) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: nortoh (~nortoh@user/nortoh) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: chameleon (~chameleon@62.ip-51-89-164.eu) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: jsvcycling (sid369784@id-369784.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5401-fb84-56c5-61fd.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Liexei (~Liexei@user/liexei) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: hannibal_ad_port (c99abf4150@2604:bf00:561:2000::297) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: mrmanner (29a724a13e@user/mrmanner) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: frode (9b90a24314@2604:bf00:561:2000::1d1) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: haniaF_ (~haniaF@83.24.213.141.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: notevil (~notevil@user/notevil) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: okt (560965ea7b@user/okt) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: paulgrmn (4935b8e2c8@user/paulgrmn) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Read error: Connection reset by peer)
[23:45:35] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: irc (~irc@h-158-174-80-2.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: dozn (uid249292@user/dozn) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: yonson (~yonson@2600:8801:d900::16db) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Ugrastil (~Ugrastil@89.40.112.204) (Read error: Connection reset by peer)
[23:45:35] *** Quits: KonaArctic (~KonaArcti@2607:fea8:33a0:d600:b661:3266:9f9:3dea) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Vigdis (~danj@ns4.chown.me) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: psw (2b13331353@user/psw) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Anderson-D (sid146635@id-146635.tinside.irccloud.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: salem_ (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: pmcnabb4 (~pmcnabb@user/pmcnabb) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: KDDLB (kevin@user/kddlb) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: bluedust (~bluedust@89.238.143.233) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: eggsampler_ (~ur@s.id-rsa.pub) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: derfj_ (sid19429@id-19429.tinside.irccloud.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: gijs (~gpeskens@94-208-100-217.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Jmainguy (~Jmainguy@static.204.41.76.144.clients.your-server.de) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Thinkofname (~thinkthin@2a01:430:17:1::ffff:1980) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: jhchabran (~jhchabran@user/jhchabran) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: phylaz (~phylaz@80.203.89.4) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: novns (~novns@user/novns) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: jemaclus (~jemaclus@64.227.108.73) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: egy (egy@tilde.team) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: cim (~cim@205.185.117.110) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: dg (~dgl@dg.wtf) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: justIrresolute (~justache@user/justache) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: redquasar (~redquasar@redquasar.xyz) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: hhes (sid420846@id-420846.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: michele (~eraser@user/michele) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: abraham (~abraham@143.244.185.86) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: mooff (mooff@awful.cooking) (Quit: Ping timeout (120 seconds))
[23:45:37] *** Quits: d42 (~root@user/d42) (Remote host closed the connection)
[23:45:37] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[23:45:37] *** Quits: rvalue- (~rvalue@user/rvalue) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: dalan (~dalan@194-193-164-106.tpgi.com.au) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: alrs (alrs@tilde.team) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: demsh (b86gbgex0y@hermod.demsh.org) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: babilen (~babilen@user/babilen) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: kcrk (~kcrk@user/kcrk) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[23:45:37] *** Quits: aaaaa (~a@65.79.136.69) (Read error: Connection reset by peer)
[23:45:37] *** Quits: rednul (~textual@098-127-178-044.biz.spectrum.com) (Read error: Connection reset by peer)
[23:45:37] *** Quits: girafe3 (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Suzumiya (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: sus (zero@user/zeromomentum) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (Read error: Connection reset by peer)
[23:45:37] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Read error: Connection reset by peer)
[23:45:37] *** Joins: aaaaanews (~a@65.79.136.69)
[23:45:37] *** Joins: Wessie- (~Wessie@static.226.41.47.78.clients.your-server.de)
[23:45:38] *** hhes_ is now known as hhes
[23:45:38] *** KDDLB8 is now known as KDDLB
[23:45:38] *** Quits: neurocyte4 (~neurocyte@IP-185117068002.dynamic.medianet-world.de) (Changing host)
[23:45:38] *** Joins: neurocyte4 (~neurocyte@user/neurocyte)
[23:45:38] *** Joins: ThatOtherGuy (~LogicAsid@user/logicaside)
[23:45:38] *** Anderson-D_ is now known as Anderson-D
[23:45:38] *** jsvcycling_ is now known as jsvcycling
[23:45:38] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: jlaffaye (~jlaffaye@user/jlaffaye) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: beanzilla (~beanzilla@user/beanzilla) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 240 seconds)
[23:45:38] *** Joins: cim9 (~cim@205.185.117.110)
[23:45:38] *** cim9 is now known as cim
[23:45:38] *** cnf1 is now known as cnf
[23:45:38] *** dalan8 is now known as dalan
[23:45:38] *** yonson_ is now known as yonson
[23:45:38] *** Joins: Liexei (~Liexei@user/liexei)
[23:45:39] *** Joins: michele- (~eraser@user/michele)
[23:45:39] *** dozn_ is now known as dozn
[23:45:40] *** Joins: teasea50 (~teasea@user/teasea)
[23:45:43] *** Joins: hanzo_ (uid532183@user/hanzo)
[23:45:44] *** Joins: babilen_ (~babilen@user/babilen)
[23:45:45] *** Joins: irc (~irc@h-158-174-80-2.A357.priv.bahnhof.se)
[23:45:46] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[23:45:47] *** Joins: wim (~wim@42.be)
[23:45:51] *** Joins: jlaffaye (~jlaffaye@ns517217.ip-158-69-27.net)
[23:45:54] *** Joins: d42- (~root@user/d42)
[23:45:54] *** Quits: jlaffaye (~jlaffaye@ns517217.ip-158-69-27.net) (Changing host)
[23:45:54] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[23:45:58] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[23:46:00] *** Joins: bluedust (~bluedust@89.238.143.233)
[23:46:02] *** Joins: sus (zero@user/zeromomentum)
[23:46:04] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[23:46:05] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[23:46:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:46:08] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[23:46:09] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[23:46:09] *** Joins: transacid (~transacid@transacid.de)
[23:46:14] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[23:46:15] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[23:46:15] *** Joins: dr0n (~nabromov@94.11.23.235)
[23:46:15] *** Joins: derfj_ (sid19429@id-19429.tinside.irccloud.com)
[23:46:16] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[23:46:17] *** Joins: tofran (~tofran@37.189.158.134)
[23:46:18] *** Joins: sad443 (~user@37.164.221.231)
[23:46:21] *** Joins: monoxane (~monoxane@user/monoxane)
[23:46:23] *** Joins: leah2 (~leah@vuxu.org)
[23:46:23] *** Joins: mooff9 (mooff@awful.cooking)
[23:46:24] *** Joins: Thinkofname (~thinkthin@37.205.12.211)
[23:46:26] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[23:46:28] *** Joins: alip (~alip@chesswob.org)
[23:46:29] *** Quits: casastortaAway (~casastort@dc4.krivokuca.net) (Ping timeout: 256 seconds)
[23:46:29] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Ping timeout: 256 seconds)
[23:46:30] *** Quits: pmcnabb6 (~pmcnabb@user/pmcnabb) (Read error: Connection reset by peer)
[23:46:33] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[23:46:33] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[23:46:35] *** Quits: alip (~alip@chesswob.org) (Changing host)
[23:46:35] *** Joins: alip (~alip@exherbo/developer/alip)
[23:46:40] *** Joins: dg (~dgl@dg.wtf)
[23:46:41] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[23:46:41] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[23:46:45] *** Joins: Praise (~Fat@user/praise)
[23:46:45] *** Joins: novns (~novns@sumbur.info)
[23:46:46] *** Joins: Nixieboluo9 (~Nixiebolu@47.93.220.75)
[23:46:46] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:46:47] *** Joins: psil (~krwlisp@karatefylla.nu)
[23:46:50] *** Quits: svedrin_ (~quassel@tiamat.funzt-halt.net) (Read error: Connection reset by peer)
[23:46:50] *** Quits: novns (~novns@sumbur.info) (Changing host)
[23:46:50] *** Joins: novns (~novns@user/novns)
[23:46:54] *** Joins: Vigdis (~danj@2001:19f0:b001:9ee:5400:2ff:fec5:18cb)
[23:46:55] *** Joins: jemaclus (~jemaclus@64.227.108.73)
[23:47:01] *** Joins: jay_wild_ (~very@138.68.15.221)
[23:47:03] *** Quits: aeadio (~aead@user/aead) (Ping timeout: 256 seconds)
[23:47:03] *** Quits: earthbreaker (~earthbrea@li778-229.members.linode.com) (Ping timeout: 256 seconds)
[23:47:03] *** Quits: ajfriesen7 (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[23:47:05] *** Parts: sad443 (~user@37.164.221.231) ()
[23:47:10] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[23:47:11] *** Joins: kcrk (~kcrk@user/kcrk)
[23:47:13] *** Quits: hayaliali (~alip@exherbo/developer/alip) (Read error: Connection reset by peer)
[23:47:13] *** Quits: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[23:47:14] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (*.net *.split)
[23:47:14] *** Quits: mrig (~mrig@user/mrig) (*.net *.split)
[23:47:14] *** Quits: darkapex (~darkapex@user/darkapex) (*.net *.split)
[23:47:14] *** Quits: moto (~moto@user/moto) (*.net *.split)
[23:47:14] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[23:47:14] *** Quits: teasea (~teasea@user/teasea) (*.net *.split)
[23:47:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[23:47:14] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[23:47:14] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[23:47:15] *** Quits: predmijat (~predmijat@mail.strogopro.com) (*.net *.split)
[23:47:15] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[23:47:15] *** Quits: void09 (~void@150.230.21.57) (*.net *.split)
[23:47:15] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[23:47:15] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (*.net *.split)
[23:47:15] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (*.net *.split)
[23:47:15] *** Quits: bedroller (~fling@user/fling) (*.net *.split)
[23:47:15] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[23:47:15] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[23:47:15] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[23:47:15] *** Quits: tharkun_ (tharkun@kvm6.telegraphics.com.au) (*.net *.split)
[23:47:15] *** Quits: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (*.net *.split)
[23:47:15] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[23:47:15] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[23:47:15] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (*.net *.split)
[23:47:15] *** Quits: remote (~self@user/hackers) (*.net *.split)
[23:47:15] *** Quits: jay_wild (~very@138.68.15.221) (*.net *.split)
[23:47:16] *** Quits: Kaivo (~Kaivo@user/kaivo) (*.net *.split)
[23:47:16] *** Quits: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net) (*.net *.split)
[23:47:16] *** Quits: Batzy (~quassel@user/batzy) (*.net *.split)
[23:47:16] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[23:47:16] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[23:47:16] *** Quits: zaz\ (~zaz@poneybl.eu) (*.net *.split)
[23:47:16] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[23:47:16] *** Quits: Nixieboluo (~Nixiebolu@47.93.220.75) (*.net *.split)
[23:47:16] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[23:47:16] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[23:47:16] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (*.net *.split)
[23:47:16] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[23:47:16] *** Quits: higgins (~higgins@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[23:47:16] *** Quits: pgloor (~petergloo@mix.cubus.space) (*.net *.split)
[23:47:16] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (*.net *.split)
[23:47:16] *** Quits: wkalt_ (~wkalt@user/wkalt) (*.net *.split)
[23:50:17] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:52:42] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:52:44] *** Joins: jemaclus (~jemaclus@64.227.108.73)
[23:53:02] *** Quits: yodajelly (~p@2001:470:69fc:105::1:e8) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 240 seconds)
[23:53:14] *** Quits: pztrn (~pztrnpztr@user/pztrn) (Ping timeout: 252 seconds)
[23:53:14] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (Ping timeout: 252 seconds)
[23:53:14] *** Quits: gio[m] (~giolekvam@2001:470:69fc:105::1:16a) (Ping timeout: 252 seconds)
[23:53:16] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[23:53:16] *** Quits: mattmurr[m] (~mattmurrt@2001:470:69fc:105::1:5ea0) (Ping timeout: 245 seconds)
[23:53:16] *** Quits: astraad[m] (~astraadma@2001:470:69fc:105::1:4425) (Ping timeout: 245 seconds)
[23:53:16] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Ping timeout: 245 seconds)
[23:53:16] *** Quits: anonton (~anonton@user/anonton) (Ping timeout: 245 seconds)
[23:53:16] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Ping timeout: 245 seconds)
[23:53:16] *** Quits: mambang[m] (~mambang@user/mambang) (Ping timeout: 245 seconds)
[23:53:23] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (Ping timeout: 250 seconds)
[23:53:23] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 250 seconds)
[23:53:25] *** fling_ is now known as fling
[23:53:35] *** Quits: MarkWatson[m] (~markwatso@2001:470:69fc:105::1:5be8) (Ping timeout: 250 seconds)
[23:53:35] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Ping timeout: 250 seconds)
[23:53:35] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Ping timeout: 250 seconds)
[23:53:40] *** Joins: crudo (~crudo@livredigital.com)
[23:53:54] *** Quits: wielding (~wielding@user/wielding) (Ping timeout: 260 seconds)
[23:53:54] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Ping timeout: 260 seconds)
[23:53:54] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (Ping timeout: 260 seconds)
[23:53:54] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Ping timeout: 260 seconds)
[23:53:54] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Ping timeout: 260 seconds)
[23:53:59] *** Joins: sus (zero@user/zeromomentum)
[23:54:05] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[23:54:48] *** Quits: Guest9386 (~irc@v22017044557248481.happysrv.de) (Quit: -)
[23:55:09] *** Joins: Piraty_ (~irc@user/piraty)
[23:55:12] *** Server sets mode: +Ccnt 
[23:55:53] *** Joins: fhs (~fhs@pool-98-113-240-43.nycmny.fios.verizon.net)
[23:56:05] *** Joins: holgersson (~quassel@user/holgersson)
[23:56:47] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[23:57:04] *** Quits: rawtaz (~rawtaz@rho.hobbyhotellet.se) (Changing host)
[23:57:04] *** Joins: rawtaz (~rawtaz@user/rawtaz)
[23:57:14] *** Quits: Piraty_ (~irc@user/piraty) (Client Quit)
[23:57:37] *** Joins: frode (9b90a24314@2604:bf00:561:2000::1d1)
[23:57:38] *** Joins: hannibal_ad_port (c99abf4150@2604:bf00:561:2000::297)
[23:58:12] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[23:58:41] *** Joins: Piraty_ (~irc@user/piraty)
[23:58:47] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
