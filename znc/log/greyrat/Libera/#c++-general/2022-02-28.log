[00:11:56] *** Quits: minto (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[00:25:25] *** climax is now known as gentooclimax
[00:29:18] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[00:31:05] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[00:31:07] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:31:56] *** Quits: ville (~ville@user/ville) (Quit: ville)
[00:34:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:36:21] *** Joins: ville (~ville@user/ville)
[00:39:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:40:36] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[00:41:47] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:42:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:44:50] *** Quits: DSpider (~DSpider@82.79.237.101) (Quit: Leaving)
[00:46:36] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 245 seconds)
[00:49:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:50:14] *** Quits: magla (~gelignite@d5364c1c.access.ecotel.net) (Quit: Stay safe!)
[00:51:26] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:56:19] *** Joins: ivii (~ivan@user/ivii)
[01:01:05] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[01:05:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:09:42] *** Quits: paul424 (~tom@ip-5-172-237-214.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:09:48] *** Joins: ibenn (~benn@ip-078-043-023-131.um18.pools.vodafone-ip.de)
[01:10:54] *** Joins: ville (~ville@user/ville)
[01:14:09] *** Quits: ibenn (~benn@ip-078-043-023-131.um18.pools.vodafone-ip.de) (Client Quit)
[01:14:35] *** Joins: ibenn (~benn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87)
[01:22:54] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:28:48] *** Quits: ibenn (~benn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87) (Quit: Leaving)
[01:30:48] *** Joins: ibenn (~ibenn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87)
[01:31:26] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:31:34] *** Quits: ibenn (~ibenn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87) (Client Quit)
[01:33:03] *** Joins: ibenn (~ibenn@ip-078-043-023-131.um18.pools.vodafone-ip.de)
[01:34:27] *** Quits: ibenn (~ibenn@ip-078-043-023-131.um18.pools.vodafone-ip.de) (Client Quit)
[01:34:58] *** Joins: ibenn (~ibenn@ip-078-043-023-131.um18.pools.vodafone-ip.de)
[01:35:11] *** Quits: ibenn (~ibenn@ip-078-043-023-131.um18.pools.vodafone-ip.de) (Remote host closed the connection)
[01:35:37] *** Joins: ibenn (~ibenn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87)
[01:35:44] *** Quits: ibenn (~ibenn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87) (Remote host closed the connection)
[01:36:20] *** Joins: ibenn (~benn@ip-078-043-023-131.um18.pools.vodafone-ip.de)
[01:36:41] *** Quits: ibenn (~benn@ip-078-043-023-131.um18.pools.vodafone-ip.de) (Client Quit)
[01:36:59] *** Joins: ibenn (~benn@ip-078-043-023-131.um18.pools.vodafone-ip.de)
[01:37:02] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:8ced:edd8:f03f:1ab2)
[01:37:26] *** Joins: rond_ (~rond_@90.251.84.153)
[01:38:07] *** Quits: ibenn (~benn@ip-078-043-023-131.um18.pools.vodafone-ip.de) (Client Quit)
[01:38:12] *** Joins: badone (~badone@209.132.189.152)
[01:38:24] *** Joins: ibenn (~ibenn@ip-078-043-023-131.um18.pools.vodafone-ip.de)
[01:39:05] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b911:2c82:7dec:2cb9) (Ping timeout: 256 seconds)
[01:39:08] <rond_> Hi! I'm debugging a project in CLion. I've got a lot of recursive, deterministic functions and an input I debug them on. Everytime I try to understand what's happening I need to follow a long path of calls etc. My question is: is there a way to save the state of program so whenever I want I can start debugging from that saved state? (rather then
[01:39:08] <rond_> following the path to get there)?
[01:39:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:39:40] *** Quits: ibenn (~ibenn@ip-078-043-023-131.um18.pools.vodafone-ip.de) (Client Quit)
[01:39:55] *** Joins: ibenn (~ibenn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87)
[01:42:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[01:43:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:15] *** ChanServ sets mode: +v npaperbot
[01:46:18] <RandomReader> I think those kinds of tools are still a bit specialized, but something that may help in the meantime is conditional breakpoints: if there's a particular value or similar you can use as a starting point, it would save having to step through the calls yourself until that state is reached
[01:48:41] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 256 seconds)
[01:50:10] <rond_> ... obviously! You're indeed genius, RandomReader!
[01:53:01] <RandomReader> hehe welcome
[01:53:19] *** Quits: ibenn (~ibenn@2a02:8071:45af:1700:88a3:7f3c:9b38:af87) (Quit: Leaving)
[01:54:08] <rond_> However, CLion freezes for some reason... Ehh, damn you tools!!!
[01:54:59] <rond_> *injects if-clause that was meant to be a conditional breakpooints*
[02:01:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[02:02:16] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[02:02:29] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[02:04:32] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[02:06:32] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:8ced:edd8:f03f:1ab2) (Ping timeout: 240 seconds)
[02:06:54] *** Quits: jsbach (~jsbach@2a01:c22:a5fd:a200:2161:527a:895c:c9a2) (Ping timeout: 260 seconds)
[02:08:26] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:95c8:781:a3b:e4d4)
[02:09:41] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[02:10:13] <relipse> Is there an off topic channel? I made a 2D rpg puzzle game I wanted to share. Is anyone interested?
[02:11:01] *** Joins: markong (~kvirc@213.146.188.203)
[02:14:04] *** Quits: Leone (~Leo@216.154.12.122) (Read error: Connection reset by peer)
[02:16:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:17:08] <InPhase> relipse: There is #C++-Social
[02:18:19] <RandomReader> (as long as it's a C++ project then here is ok too, it's just that the discussion is expected to be C++ related)
[02:18:43] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[02:19:56] <RandomReader> there are also some channels like #gamedev floating around, no idea what their rules are though
[02:19:59] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:21:09] <rond_> c++ is the best and the worst language
[02:21:29] <rond_> freedom comes with responsibilities and pain
[02:21:31] <rond_> :(
[02:23:17] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 252 seconds)
[02:25:24] *** Joins: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it)
[02:37:42] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[02:38:15] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[02:39:32] *** Joins: kevr` (~kevr@user/kevr)
[02:39:35] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[02:39:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[02:39:55] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Ping timeout: 240 seconds)
[02:40:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:40:33] *** kevr` is now known as kevr
[02:40:56] *** Joins: teepee (~teepee@openscad/teepee)
[02:43:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:45:01] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:1484:c44b:e205:8211)
[02:45:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[02:47:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[02:48:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:48:31] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:ddd7:6df9:8dc6:cf6c) (Ping timeout: 250 seconds)
[02:49:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[02:50:54] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:54:10] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:95c8:781:a3b:e4d4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:03:49] *** Joins: proller (~p@80.240.216.69)
[03:04:18] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:07:02] <RandomReader> aye, it's not very apologetic .. "You want the C++? You can't handle the C++! <insert rant about lifetimes, layout and UB>"
[03:07:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:10:51] *** Quits: rond_ (~rond_@90.251.84.153) (Quit: Client closed)
[03:11:35] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:13:14] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:19:03] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:22:12] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[03:22:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:25:32] *** Quits: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it) (Quit: Leaving.)
[03:26:35] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[03:35:34] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[03:36:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:39:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:40:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:43:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:44:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[03:45:08] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[03:46:12] *** Joins: teepee (~teepee@openscad/teepee)
[03:46:21] *** Quits: Guest8574 (~Guest@181.95.237.11) (Remote host closed the connection)
[04:00:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:05:02] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:32:18] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:50] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[04:37:15] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[04:39:20] *** Joins: ymwm (~yingmanwu@117.26.69.52)
[04:41:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:44:02] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:3df8:cd30:3e5c:fc25) (Quit: CodePoint)
[04:44:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:46:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:50:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[04:57:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:06:01] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:10:56] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[05:17:09] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 250 seconds)
[05:28:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:35:00] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:37:39] *** Joins: epony (epony@user/epony)
[05:38:27] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[05:40:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:41:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:43:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:15] *** ChanServ sets mode: +v npaperbot
[05:45:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:50:55] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[06:00:03] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[06:26:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:34:14] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:37:35] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:41:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[06:41:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:42:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:45:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:50:54] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:55:29] *** Joins: adeliktas2 (~adeliktas@i59F4A127.versanet.de)
[06:57:47] *** Quits: adeliktas (~adeliktas@i59F5F949.versanet.de) (Ping timeout: 256 seconds)
[06:57:47] *** adeliktas2 is now known as adeliktas
[07:07:18] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:49] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:29:56] *** Parts: very_sneaky (~very_snea@user/very-sneaky/x-7432109) ()
[07:34:56] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[07:37:01] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 245 seconds)
[07:42:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:46:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:53:24] *** Quits: cq-work (~cq-work@user/cq-work) (Read error: Connection reset by peer)
[07:53:48] *** Joins: cq-work (~cq-work@user/cq-work)
[07:55:24] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[08:07:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:13:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:16:09] *** Joins: angelacrust (~angelacru@171.50.163.218)
[08:22:32] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:25:49] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:26:38] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[08:27:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[08:30:46] *** Quits: Aph3x-WL (~Aph3x@li616-175.members.linode.com) (Ping timeout: 245 seconds)
[08:32:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:38:47] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[08:39:02] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:39:30] *** Joins: Aph3x-WL (~Aph3x@li616-175.members.linode.com)
[08:43:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:46:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[08:50:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[08:51:57] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:02:06] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[09:02:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:08:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:10:36] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:16:37] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[09:43:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:16] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:16] *** ChanServ sets mode: +v npaperbot
[09:43:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:47:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:00:52] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:05:30] *** Quits: angelacrust (~angelacru@171.50.163.218) (Quit: Client closed)
[10:07:17] *** Joins: pulse (~pulse@user/pulse)
[10:08:03] *** Joins: rajkosto (~rajkosto@178.220.158.3)
[10:08:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[10:09:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:38:18] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:44:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:46:01] *** Joins: callq (~callq@2409:4062:2e1f:6d40:fd73:8ec0:e5d1:5559)
[10:47:52] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:50:50] *** Joins: jsbach (~jsbach@2a01:c23:5c2e:ba00:a719:4726:e5ec:dc00)
[10:51:02] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:59:53] *** Quits: rajkosto (~rajkosto@178.220.158.3) (Quit: Leaving)
[11:01:53] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:02:14] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:04:29] *** Joins: sigma_ (~sigma@86.57.124.14)
[11:11:36] <sigma_> hi, i have question: i can use other IDE except QT creator for qt app. i prefer to use vscode
[11:12:51] *** Joins: DSpider (~DSpider@82.79.237.29)
[11:13:45] <ville> yes. it's just c++. some aspects/features may require running a separate code generation step during builds. some aspects may be simpler to do with the qtcreator ide such as creating the ui layout for wigets in drag-and-drop style rather than writing code for it
[11:13:51] *** Joins: andreasbuhr (~quassel@p549db21b.dip0.t-ipconnect.de)
[11:20:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c899:9204:fa5a:d2de)
[11:29:02] *** Joins: ivii (~ivan@user/ivii)
[11:35:16] <TinoDidriksen> CMake can quite easily drive a Qt project, and then you can use any IDE that works with CMake, which by now is basically all of them.
[11:39:24] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:1484:c44b:e205:8211) (Ping timeout: 240 seconds)
[11:39:58] <cbreak> cmake's supported by both VS Code and QtCreator
[11:40:32] <cbreak> and you can use designer standalone too if you want to create GUIs that way, no need for all of QtCreator
[11:44:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:46:23] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:47:07] <comrad> we use cmake for our QT-Application on Windows and Linux
[11:48:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:50:18] *** Joins: Inline (~Inline@p200300cd470c79003cbee1ceac867d03.dip0.t-ipconnect.de)
[12:01:19] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[12:18:43] *** Joins: proller (~p@80.240.216.69)
[12:19:26] *** Joins: Burgundy (~NA@86.121.143.206)
[12:23:37] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[12:23:59] *** Joins: proller (~p@2a02:6b8:b081:b584::1:22)
[12:28:01] *** Joins: robod34 (Username@79.113.243.73)
[12:30:28] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[12:32:03] <johnny> sigma_, so what they're saying is that designing the gui part is still best done in the designer portion of qtcreator (which is also available standalone)
[12:32:27] *** Quits: proller (~p@2a02:6b8:b081:b584::1:22) (Ping timeout: 256 seconds)
[12:32:30] <johnny> the qt C++ code is fine in vscode tho.
[12:34:58] *** Joins: txtsd (~txtsd@user/txtsd)
[12:37:32] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:41:48] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[12:43:00] <ville> whether you launch `designer` or `qtcreator` is bit academic. you still have to install qtcreator to get the designer as far as i know
[12:44:02] *** Joins: p-i- (~Ohmu@183.89.33.105)
[12:45:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:48:02] <sigma_> tnx, yes i tested and it is worked but autocomplete doesnt work. i set QT include path but cant detect method or class ? this is for both IDE vscode and QT creator !?
[12:48:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:48:45] *** Quits: p-i- (~Ohmu@183.89.33.105) (Ping timeout: 268 seconds)
[12:59:11] <LordKalma> ville pyqt for example ships standalone designer
[12:59:57] <LordKalma> You'll need to properly configure VSCode if you want to build C++ with it, and have its autocompletion work and etc
[13:00:26] <LordKalma> I do have it setup, but it's kind of an advanced setup that is, like, "works for me", since I designed it around *my* workflow
[13:01:10] <LordKalma> involves opening the project both on vscode, and QtCreator, using clangd instead of intellisense, and having cmake copy the compile_commands.json to the src dir, so I autocompletion works.
[13:01:20] <LordKalma> I prefer running and debugging in creator, editing on VSCode
[13:01:31] <LordKalma> but that's a very personal setup
[13:10:12] <Haohmaru> such much fancy
[13:13:01] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:14:31] <ville> ok looks like: extra/qt5-tools 5.15.2+kde+r17-4 is responsible for designer on my system
[13:15:25] <ville> ...perhaps you may install that independently of qtcreator package
[13:15:48] *** Quits: Inline (~Inline@p200300cd470c79003cbee1ceac867d03.dip0.t-ipconnect.de) (Quit: Leaving)
[13:16:05] <ville> it would appear so
[13:26:36] *** Joins: paul424 (~tom@ip-5-172-235-21.multi.internet.cyfrowypolsat.pl)
[13:37:20] *** Joins: p-i- (~Ohmu@2403:6200:8978:e242:a51b:a242:723e:6936)
[13:37:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:01] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:e242:1823:78f5:fee:fdd6)
[13:40:56] *** Joins: p-i-__ (~Ohmu@2403:6200:8978:e242:9823:317e:c75a:be2a)
[13:41:17] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.4)
[13:41:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e242:a51b:a242:723e:6936) (Ping timeout: 240 seconds)
[13:42:25] *** Joins: txtsd (~txtsd@user/txtsd)
[13:42:43] *** Joins: p-i- (~Ohmu@2403:6200:8978:e242:88f4:1752:92fb:49a7)
[13:43:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:17] *** ChanServ sets mode: +v npaperbot
[13:44:17] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:e242:1823:78f5:fee:fdd6) (Ping timeout: 240 seconds)
[13:45:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:45:57] *** Quits: p-i-__ (~Ohmu@2403:6200:8978:e242:9823:317e:c75a:be2a) (Ping timeout: 240 seconds)
[13:49:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:55:01] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[13:55:12] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:55:53] *** Joins: jokoon (~eio@2a01:e0a:542:e160:1159:390b:ecc7:8afb)
[13:56:30] <sigma_> LordKalma: thank you for help, i never heard about clangd and it is worked better.
[14:03:17] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[14:06:14] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:07:05] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[14:07:49] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[14:10:17] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:11:32] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[14:11:51] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:12:25] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[14:15:11] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:17:20] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:e2ee:44e2:1d49:1e2c:593f)
[14:19:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e242:88f4:1752:92fb:49a7) (Ping timeout: 240 seconds)
[14:32:51] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:40:05] *** Joins: Hercules (~Hercules@user/hercules)
[14:46:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:49:26] *** Joins: cursey (~cursey@user/cursey)
[14:49:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:49:40] *** Joins: proller (~p@2a02:6b8:0:40c:59e8:3dd8:820c:c325)
[14:57:43] *** gentooclimax is now known as climax
[14:58:28] *** climax is now known as gentooclimax
[15:05:54] <noent> what happens when the return *this is missing in a Foo& operator=(Foo const& other)? It compiles with a warning and doesn't crash. Does that mean the assigned to object gets default constructed?
[15:06:16] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[15:12:06] <PJBoy> UB
[15:12:29] *** Joins: markong (~kvirc@213.146.188.203)
[15:12:39] *** gentooclimax is now known as climax
[15:12:40] <LordKalma> { cout << foo()} bool foo() {/* oops*/};
[15:12:40] <geordi> error: expected ';' before '}' token (fix known)
[15:12:45] <PJBoy> most likely scenario is that if you tried to use the return value of operator=, it would not work
[15:12:46] <LordKalma> { cout << foo()} bool foo() {/* oops*/;};
[15:12:46] <geordi> Same error.
[15:12:52] <LordKalma> { cout << foo();} bool foo() {/* oops*/;}
[15:12:52] <geordi> warning: no return statement in function returning non-void
[15:13:03] <PJBoy> for example if you tried to do `f(my_foo = my_other_foo)`
[15:13:17] <PJBoy> or `my_foo = my_foo2 = my_foo3;`
[15:17:29] <PJBoy> do note that `void operator=(T const&)` is a completely valid way of writing the assignment operator
[15:18:02] <PJBoy> the return is only needed for chained operations like the above two examples
[15:18:20] <PJBoy> which generally aren't considered clean by most people in most situations
[15:25:30] *** Quits: paul424 (~tom@ip-5-172-235-21.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:26:49] *** climax is now known as gentooclimax
[15:27:46] <mort> can't wg21 just standardise #pragma once already
[15:30:08] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:32:08] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[15:32:31] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[15:32:32] *** Joins: ivii (~ivan@user/ivii)
[15:33:54] *** Joins: plastico (~plastico@neomutt/plastico)
[15:34:36] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[15:36:02] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[15:46:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:48:58] <ville> why?
[15:50:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:50:17] <ville> there really is no compelling reason to standardize it that i can think of
[15:51:40] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[15:52:31] <libh> Is the usage of "using namespace std" instead of explicitly using "std::cout" a bad idea?
[15:53:06] <Haohmaru> you'll bring everything from std:: into scope
[15:54:30] <Haohmaru> you might thing your "bottle_opener" class is safe, but some years later C++ might come with a std::bottle_opener and it'll then clash with yours
[15:54:36] <Haohmaru> * think
[15:55:12] <libh> How can I get out of C/Procedural mentality (Absolutely no intention to diss C, it was my first language) and be more OOP/C++ like?
[15:57:17] <mort> ville: how about avoiding mistakes? Avoiding collisions? Avoiding mental overhead when creating new files?
[15:59:17] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:03:41] *** Joins: Leone (~Leo@216.154.12.122)
[16:04:33] <libh> Also, is it bad practice to use .cc rather than .cpp in the file name or is purely your own preference?
[16:04:45] <Haohmaru> that shouldn't matter
[16:04:48] <PJBoy> pure preference
[16:05:02] <noent> PJBoy: thanks. So the fact that it hasn't broken over the year might hint at the fact that that case isn't used anywhere?
[16:05:22] <PJBoy> in those words, yeah
[16:05:25] <pulse> libh, wrap everything in a class
[16:05:51] <PJBoy> missing return statement can potentially break things even if it wouldn't normally be used
[16:05:52] <noent> ok, thanks. This code base makes me so unhappey
[16:05:59] <pulse> think of classes as building blocks. stack several together = behavior
[16:06:02] <libh> I'm looking at this C++ example. https://github.com/Codecademy/learn-cpp/blob/master/7-classes-and-objects/profile.hpp Why does Profile() under public not use a type like int?
[16:06:25] <pulse> that's a constructor
[16:06:27] <mort> libh: fwiw, OOP isn't really regarded as the panacea, there's nothing wrong with a function-oriented rather than an OOP-oriented approach
[16:06:41] <PJBoy> libh, you mean a return type?
[16:06:49] <PJBoy> constructors don't have return types
[16:06:53] <libh> Yes, I mean a return type, like int.
[16:07:07] <libh> It's a constructor for a namespace?
[16:07:09] <PJBoy> they construct the object, so telling the programmer to return *this would be redundant
[16:07:19] <ville> lenovo put out an arm-based _thinkpad_. that's a surprise. wasn't expecting one for year or few...
[16:07:33] <PJBoy> oh boy
[16:07:56] <ville> PJBoy: could use ctor return type for returning a different type. an error for example
[16:08:11] <PJBoy> such a shame
[16:08:35] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[16:08:47] <PJBoy> there's several reasons why that would be bad though
[16:08:54] <ville> https://arstechnica.com/gadgets/2022/02/lenovo-announces-the-first-arm-based-thinkpad/
[16:09:03] <ville> it'd be absolutely great
[16:09:08] <PJBoy> will 2022 be the year of the ARM desktop?
[16:09:19] *** gentooclimax is now known as climax
[16:09:30] <PJBoy> well like what the hell would vector do with elements whose copy constructor returns an error type?
[16:09:32] *** test_ is now known as _flood
[16:09:40] <PJBoy> or whose default constructor does that
[16:09:56] <PJBoy> what would any generic piece of code ever be able to do with a constructor that doesn't return the type in question
[16:10:06] <ville> return the error
[16:10:21] <ville> it really is not that difficult as you make it out to be
[16:10:23] *** climax is now known as gentooclimax
[16:10:28] <PJBoy> so I do `vector<T> vec(2);` and the default ctor returns an error
[16:10:32] <PJBoy> how do you report that?
[16:10:43] <PJBoy> it can't be stored in the vector, and it can't be returned by the vector ctor
[16:11:26] <kenanmarasli> throwing errors for failed ctors is the common practice, is it not?
[16:11:28] <PJBoy> same with .resize(), the vector copy ctor, etc.
[16:11:36] <kenanmarasli> so no need to return an error
[16:11:43] <ville> you wouldn't then get a variable of type of std::vector<T>, you'd get result<vector<T>> for example. or if the language had statement expressions or similar mechanisms then you could have vector<T>
[16:12:58] <PJBoy> then you have to make special case vectors for each kind of error reporting ctor
[16:13:04] <ville> no
[16:13:20] <libh> Is it really bad practice to use <cstdio> rather than <iostream> because I strongly prefer using the C libraries at times.
[16:14:24] <PJBoy> I can't comment on the statement expression thing
[16:14:35] *** Quits: callq (~callq@2409:4062:2e1f:6d40:fd73:8ec0:e5d1:5559) (Ping timeout: 256 seconds)
[16:14:36] <PJBoy> statement expressions sound like lambdas to me
[16:14:55] <ville> can't return from the "outter scope" from a lambda
[16:15:00] <PJBoy> that's true
[16:15:09] <PJBoy> there was some talk of that recently
[16:15:17] <ville> PJBoy: you're thinking too narrow. you're thinking about what are the bumps you'd hit right now if you now changed ctors to return a result and changed absolutely nothing else. think about what it could be if you start designing it around different concepts from the getgo
[16:15:21] *** Joins: Snyp (~Snyp@49.207.217.84)
[16:15:41] <ville> designing it, as in the language
[16:16:12] <PJBoy> if there was a standardised error return type, such as std::expected, then you could get vector designed around that
[16:16:32] <PJBoy> but I don't think you could get vector to work more generally with non-T return types from ctors
[16:16:42] *** Quits: Snyp (~Snyp@49.207.217.84) (Client Quit)
[16:17:16] *** Joins: Snyp (~Snyp@49.207.217.84)
[16:17:32] <PJBoy> also now that std::expected is in C++23, I wonder if we'll get a set of expected versions of containers
[16:17:34] <kenanmarasli> that idea conflicts with the strongly typed nature of this language, doesn't it?
[16:17:48] <kenanmarasli> return either the object itself or an error type
[16:17:57] <PJBoy> that's what std::expected is for
[16:18:01] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[16:18:11] <PJBoy> and other such variant<value_t, error_t> types
[16:18:35] <kenanmarasli> ah I see
[16:20:47] <libh> Going to be frank with you guys, I like to use C++ as a better C. I don't like iostream and prefer cstdio and other C libraries. Would that make things difficult to get other C++ devs to work with me?
[16:20:55] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:24:28] <noent> libh: have you heard about std::format?
[16:24:54] <libh> No, I haven't actually. What about it?
[16:25:00] <ville> yes and no. people will pick and choose their favourie subset of what's available and then have a knee-jerk reaction to anything that isn't theirs
[16:26:06] <libh> I like projects like FLTK that use a subset of C++ and could compile on a C++98 compiler for windows 2000.
[16:26:54] <Haohmaru> and i like C++17 minimum on my 8bit MCUs
[16:27:20] <noent> libh: check it out. I don't like iostreams either, but always seen them as the lesser evil compared to cstdio. The fmt library has been around for a while and std::format is coming with C++20.
[16:30:36] <PJBoy> [p2012]
[16:30:36] <npaperbot> P2012R2: [Evolution, Core] Fix the range-based for loop, Rev2 <https://wg21.link/p2012r2> (by Nicolai Josuttis, Victor Zverovich, Arthur O'Dwyer, Filipe Mulonde) (2021-09-30) (Related: https://wg21.link/p2012r2/github)
[16:31:36] <PJBoy> bottom of page 6, it shows a pseudo-lambda that can use return/goto/etc in the lambda and have it affect the outer scope
[16:31:55] <PJBoy> (for the purposes of explaining how range-for's body should work)
[16:32:19] <PJBoy> I wouldn't be too mad if that construct was standardised somehow
[16:32:53] *** Joins: ymwm_ (~yingmanwu@117.26.69.165)
[16:33:20] <PJBoy> I think it's easily the simplest wording for the proposed lifetime extensions too
[16:33:47] *** Joins: evangeline (~Eleanor@178.79.105.181)
[16:35:31] *** Quits: ymwm (~yingmanwu@117.26.69.52) (Ping timeout: 256 seconds)
[16:38:20] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:38:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:19] <libh> I'm going to stick with C++14 for now. I want to work with some older versions of gcc such as gcc5 for some older linux distros.
[16:43:57] *** Joins: sophia (~nafen@gateway/tor-sasl/nafen)
[16:43:58] <Haohmaru> my condolences
[16:44:02] <cq-work> What distro still has a minimum supported of gcc5
[16:44:08] <cq-work> I'd like to go scream at them.
[16:45:07] <libh> I'm really not going to take full advantage of C++, just use a small subset of it. I don't like a lot of the bloat of C++, but it has some improvements over C that I do like.
[16:45:56] * cq-work sighs.
[16:46:00] <LordKalma> PJBoy, for (auto e : getVector()[0]) { // UB
[16:46:04] <LordKalma> wtf is this shit?
[16:46:07] <LordKalma> what a fucking language
[16:46:26] * LordKalma subscribes cq-work's feeling on previous statement
[16:46:57] <LordKalma> c++ is not a bloated language, it is a language that actually has some features. C just doesn't have features.
[16:47:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:47:44] <cq-work> If anything, newer versions of the langauge help reduce bloat
[16:48:02] <cq-work> But you do you I suppose
[16:48:29] <ville> cq-work: that's debatable. they've added stuff at higher rate than they've removed
[16:49:03] <libh> Well I like C++ as a better C, nothing wrong with that.
[16:49:11] <cq-work> You don't have to use those things and most of it doesn't cost you if you don't use it.
[16:49:23] <LordKalma> it's a language with a large scope and a large toolbox that's n-times redundant due to the "old way" and "new way" and "newer way"
[16:49:35] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Ping timeout: 240 seconds)
[16:49:44] <LordKalma> that said, I prefer that
[16:50:11] <ville> cq-work: yes and might be true in a codebase you completely control from creation to grave. soon as you come to contact with third party code that probably goes out the window
[16:50:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:50:25] <PJBoy> LordKalma, did you understand why that's UB?
[16:51:00] <cq-work> I don't think that's fair. You choose your own dependencies. If a dependency does something you don't want it to, then don't use it.
[16:51:03] <PJBoy> it's only UB if getVector() returns by value
[16:51:29] <LordKalma> ville, well, that's kind of the problem with "old c++". you could not teach/learn it, if you wouldn't encounter it
[16:51:50] <ville> LordKalma: it's a problem that they bloated the language with "new" stuff
[16:52:02] <ville> is an alternate take on it
[16:52:13] <LordKalma> well, the alternative would be to keep it the C way
[16:52:16] <LordKalma> and I don't prefer that at all
[16:52:25] <LordKalma> pick your poison, really
[16:52:42] <LordKalma> PJBoy the problem seems to be range-fors don't keep objects alive for their scope?
[16:52:46] <LordKalma> like... regular for's do?
[16:53:11] <PJBoy> they don't keep intermediate temporaries used to calculate the thing being range-for'd over
[16:53:19] <PJBoy> they do keep the thing being range-for'd over though
[16:53:52] <LordKalma> so you'd need to lifetime-extend any object appearing between () ?
[16:53:53] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[16:54:02] <LordKalma> emphasis on *any*
[16:54:20] <PJBoy> the intermediate temporaries
[16:54:24] <cq-work> That said, things like regex, networking, and filesystem I've always been mixed on being in the stdlib
[16:54:34] <PJBoy> so like `for (auto e : getVector())` is completely fine
[16:54:41] <cq-work> regex particularly has been pretty disastrous...
[16:54:51] <PJBoy> but in `for (auto e : getVector()[0])`, that getVector() temporary dies
[16:55:06] <PJBoy> the `getVector()[0]` is alive, but dangles
[16:55:09] <LordKalma> yes, understood
[16:55:31] <PJBoy> here's clang's protest https://godbolt.org/z/KM53aY81T
[16:56:19] <LordKalma> seems good
[16:56:35] <ville> i am not sure if regex's inclusion should be judged by the failure it became. with slightly different specification it could have been a success
[16:56:54] <PJBoy> here's cppinsights explanation https://cppinsights.io/s/6f2c965c
[16:57:23] <PJBoy> which hopefully makes it obvious why range-for doesn't save intermediate temporaries
[16:57:43] <cq-work> I do think regex is important but I also think that regex has been particularly egregious for what it does.
[16:57:56] <ville> it's easy to judge that the specific flavour of regex which was accepted shouldn't have beeb. but the question whether there should be regex at all is a different one
[16:58:09] <PJBoy> and if they *do* fix range-for to remember all the intermediate values, then that will be inconsistent with the same problem existing more generally with references
[16:58:12] <ville> err been
[16:58:29] <PJBoy> e.g. `auto&& ref = getVector()[0];` is the same bug
[16:58:36] <LordKalma> PJBoy consistency in C++ has been thrown out the window a long time ago
[16:58:47] <cq-work> I don't think there's anything wrong with that kind of regex implementation staying as a library outside of stdlib. Same for asio and filesystem
[16:59:26] <PJBoy> filesystem at least integrates with fstream's ctor
[16:59:33] <ville> and i don't think regex is in any way vital. filesystem is slightly different matter. it could be viewed as bringing value for the purpose of a programmer doing fundamental things with the system
[16:59:43] <PJBoy> so you can portably open files now
[17:00:12] <PJBoy> before it was awkward because of windows and wide string filepaths
[17:00:36] <cq-work> Yeah, I still deal with that. MSVC had an extension to help with that as well but it was still awkward.
[17:01:21] <cq-work> Couldn't open an ASCII file with a UTF-16 path lol
[17:01:47] <PJBoy> regex might as well not be in stdlib with the way it is
[17:01:49] *** Quits: proller (~p@2a02:6b8:0:40c:59e8:3dd8:820c:c325) (Ping timeout: 240 seconds)
[17:02:05] <PJBoy> it's a fairly painful interface, and it's slow
[17:02:14] <LordKalma> programmers will never agree on this issue
[17:02:25] <LordKalma> some languages have wide, useful, and decent stdlibs
[17:02:26] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[17:02:28] <ville> you cant disagree that it isn't slow
[17:02:30] <LordKalma> some don't
[17:02:35] <Haohmaru> hey, don't remove std::regex
[17:02:38] <Haohmaru> because i use it
[17:02:41] <LordKalma> ville, I mean fat vs slim stdlib
[17:02:48] <PJBoy> I'd ideally want some kind of regex in stdlib
[17:02:52] <PJBoy> but not std::regex
[17:02:59] <Haohmaru> crazy::regex?
[17:03:16] <Haohmaru> turbo::regex::which::also::makes::coffee?
[17:03:18] <PJBoy> if they imported google's re2, that'd be great
[17:03:26] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[17:03:28] *** Joins: ravan_ (~ravan@user/ravan)
[17:03:32] <LordKalma> did you know python has a packed vector in the stdlib? but nobody gives a crap, and everybody uses numpy
[17:03:34] <ville> PJBoy: it's bit ambiguous what your opinion there is. presumably it's against specifically the current existing std::regex spec and resulting implementation
[17:03:35] <Haohmaru> did you just say "google"
[17:04:04] <cq-work> re2c is really nice performance wise.
[17:04:20] <PJBoy> yeah I don't like the std::regex API nor its implementations
[17:04:34] <PJBoy> std::smatch? get outta here
[17:04:41] <PJBoy> no string_view support, terrible
[17:04:45] <ville> the _current_ one, but the idea of an std::regex is fine?
[17:05:04] <PJBoy> I'd like an overhauled std::regex that can perform well
[17:05:14] <PJBoy> possibly named something else
[17:05:49] <cq-work> Narrator: And that's how the name regex2 was invented.
[17:06:26] <PJBoy> like if regex wasn't in the standard library, I would complain
[17:06:42] <LordKalma> >>> import re
[17:06:44] <cq-work> I don't because I end up not using std::regex regardless.
[17:06:44] * LordKalma runs
[17:07:00] <PJBoy> you wouldn't complain in hindsight then
[17:07:08] <LordKalma> ah, I love the argument "what should be in the std lib? exactly what ****I**** use"
[17:07:11] <PJBoy> but in foresight you'd complain that there's no regex
[17:07:30] <cq-work> I never said I don't use regex
[17:07:44] <cq-work> I don't use std::regex because it's awful and causes problems.
[17:07:50] <cq-work> Really that simple.
[17:07:51] <LordKalma> aah ok fair
[17:08:11] <PJBoy> I don't like std::regex, but I'm not aware of any problems it causes
[17:08:44] <PJBoy> other than performance issues ofc
[17:09:03] <PJBoy> also no compile time regex string validation
[17:09:10] <PJBoy> what is this, python?
[17:09:19] <cq-work> Well, I have to deal with MSVC a lot, that implementation has been pretty mean about failing at runtime with something that runs fine in libstdc++
[17:10:12] <cq-work> GCC's implementation is "better" in recent days, still very slow sometimes.
[17:10:28] <cq-work> Sometimes problematically so so I end up hand-writing it anyways which sucks.
[17:11:16] <ville> i never use regex, just write a parser if you're parsing something. there's a chance it's understandable and debuggable at a later date as well
[17:12:15] *** Joins: Guest4896 (~Guest@host126.190-137-36.telecom.net.ar)
[17:12:33] <Haohmaru> PJBoy my program is significatly faster than the "competition.py"
[17:12:34] *** Quits: Snyp (~Snyp@49.207.217.84) (Read error: Connection reset by peer)
[17:12:36] <cq-work> Sort of depends but I'm often wanting to use regex as part of a tokenizer.
[17:12:44] <Haohmaru> ..using std::regex
[17:12:46] <ville> as opposed to some of the "more creative" regex you might see in the wild
[17:12:59] <ville> still i just write a function that does it and be done with it
[17:15:50] <ville> the functions that implement some regex-like matching, especially regex you can understand 6 months down the line, tend to be really simple 10-30 line functions anyways
[17:16:23] <LordKalma> I only know .*
[17:16:40] <cq-work> I'm apparently a wizard for memorizing regex rules
[17:16:49] <cq-work> But yeah, I get what you mean
[17:16:51] <Haohmaru> i've written these: https://gitlab.com/antto/pimpmykicadbom/-/blob/master/fp2pkg_regex.txt
[17:16:58] <LordKalma> I use regexr when I need anything more interesting
[17:17:03] <LordKalma> mostly for the cheat sheet and texting
[17:17:06] <cq-work> oh... my god that regex
[17:17:37] <ville> cq-work: see what i mean...
[17:19:05] *** Joins: proller (~p@2a02:6b8:0:40c:e641:5109:d268:8331)
[17:20:13] <PJBoy> I quite enjoy writing simple regexes
[17:20:36] <PJBoy> beats handling whitespace and capturing and whatnot otherwise
[17:21:48] <cq-work> I mean, sometimes RFCs give regular expressions to use as well.
[17:21:56] <cq-work> Like the URI RFC gives ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
[17:21:56] <PJBoy> and if you use a standard enough grammer, they're debuggable
[17:22:14] <cq-work> Which is unreadable as hell but you're almost guaranteed that it works
[17:22:25] <ville> kelsey grammer?
[17:22:45] <PJBoy> that expression seems to have lots of redundant parentheses
[17:23:03] <Haohmaru> cq-work did you react to my regex.txt there?
[17:23:08] <cq-work> Yeah.
[17:23:13] <Haohmaru> is it bad?
[17:23:18] <cq-work> Yeah.
[17:23:21] <Haohmaru> :~(
[17:23:27] <cq-work> Sorry, not sorry :D
[17:23:38] <PJBoy> they're very long, but other than that, they're not too bad
[17:23:50] <PJBoy> but being long makes it bad
[17:24:08] <Haohmaru> i knew nothing about regex before that
[17:24:14] <Haohmaru> (i still don't now)
[17:24:49] <PJBoy> you can use the preprocessor to make regex more readable sometimes
[17:24:55] <ville> when you have squint with one eye only and start calculating open and close parens, matching where they start and begin you know you're doing it wrong
[17:25:23] <PJBoy> mostly by taking advantage of string literal concatenation to break up the expression into lines
[17:25:37] <PJBoy> and being able to #define some of those string literals and give it a name
[17:25:59] <Haohmaru> PJBoy this is user-editable txt file, like a config
[17:26:09] <Haohmaru> i don't think macros can help
[17:26:12] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[17:26:24] <PJBoy> regex in config file is another story
[17:26:40] <Haohmaru> :/
[17:26:48] <PJBoy> wouldn't be my first resort
[17:27:45] <PJBoy> people do it though
[17:28:19] * LordKalma laughs in https://doc.qt.io/qt-6/qsettings.html
[17:28:52] * PJBoy sighs
[17:29:06] <PJBoy> Qt is the dark side
[17:29:18] <PJBoy> it's so tempting sometimes, but then I hate it so much
[17:29:30] <LordKalma> hhahah
[17:29:42] <cq-work> I kinda like QML it turns out
[17:30:17] <LordKalma> you should have seen the latest thread ranting about QML/Quick on the desktop in the mailing list
[17:30:17] <PJBoy> I think it's using the registry by default on windows?
[17:30:24] <LordKalma> PJBoy you can set that
[17:31:05] <PJBoy> yeah
[17:31:19] <PJBoy> it supports INI files, which is good
[17:31:30] <PJBoy> damn it Qt, stop being good sometimes
[17:31:43] <LordKalma> QSettings is kinda nice becayse you can give it to your plugins and they can store their settings
[17:31:47] <PJBoy> it invalidates my prejudice
[17:32:08] <LordKalma> Qt::Core modules are pretty amazing
[17:32:17] *** Quits: ymwm_ (~yingmanwu@117.26.69.165) (Quit: Leaving)
[17:33:29] <cq-work> I haven't seen the latest desktop QML rant.
[17:33:49] <cq-work> Admittedly, I haven't given the desktop QML stuff a go so can't comment much on it.
[17:34:12] *** Joins: callq (~callq@2409:4062:2e1f:6d40:ade2:90cc:f912:5fc5)
[17:34:22] <LordKalma> https://lists.qt-project.org/pipermail/interest/2022-February/thread.html [Interest] Is there a good alternative to the QML Controls in Qt6 for native desktop integration purposes?   Mark Gaiser
[17:34:29] <LordKalma> it's grilling the Qt Company :D that's always fun
[17:34:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[17:35:24] <Haohmaru> !fact
[17:35:25] <nolyc> Haohmaru: A string literal is an lvalue; all other literals are prvalues.
[17:36:13] <PJBoy> that's a cool fact
[17:36:28] *** Joins: artok (~azo@mobile-access-567373-209.dhcp.inet.fi)
[17:36:35] <PJBoy> although
[17:36:41] <LordKalma> PJBoy embrace Qt::Core
[17:36:42] * Haohmaru tunes a string literal to 440Hz
[17:36:54] <LordKalma> good, you're not a 432 nutjob
[17:37:03] <Haohmaru> of course
[17:37:41] <PJBoy> << TYPE(0_pj); int operator"" _pj(unsigned long long) { static int ret{}; return ret; }
[17:37:42] <geordi> prvalue int
[17:37:50] <PJBoy> looks like there are other prvalue literals to me
[17:38:00] <LordKalma> PJBoy " all other literals are prvalues."
[17:38:01] <PJBoy> erm wait
[17:38:04] <LordKalma> learn to read
[17:38:14] <Haohmaru> he made such effort
[17:38:17] <PJBoy> nah I read correctly, I thunked incorrectly
[17:38:24] <LordKalma> !grab PJBoy
[17:38:25] <nolyc> LordKalma: The operation succeeded.
[17:38:29] <PJBoy> << TYPE(0_pj); int& operator"" _pj(unsigned long long) { static int ret{}; return ret; }
[17:38:30] <geordi> lvalue int
[17:38:32] <PJBoy> is what I wanted to write
[17:38:58] <Haohmaru> dafuq is that even
[17:39:03] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[17:39:07] <PJBoy> standard text = bad
[17:39:13] <PJBoy> that's a user defined literal
[17:39:13] <LordKalma> all other <non-custom-literal-suffixed> literals are prvalues.
[17:39:23] <LordKalma> user defined literal, that, sorry
[17:39:57] <Haohmaru> lemme clarify that fact:
[17:40:03] <PJBoy> I have in the past made UDLs just for the sake of adding a bit of exposition
[17:40:13] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:40:29] <Haohmaru> "A string literal is a value; all other literals are values too."
[17:40:38] <LordKalma> so what you're saying is that you're a pretentious fuck
[17:40:46] <PJBoy> { int progress = 0_percent; } unsigned long long operator"" _percent(unsigned long long x) { return x; }
[17:40:46] <geordi>  
[17:40:48] <PJBoy> for example
[17:40:50] <cq-work> "We spent a large chunk of cash paying someone to get a TreeView working since Qt5 doesnâ€™t supply one"
[17:41:03] <cq-work> I ran into this exact same problem.
[17:41:09] <cq-work> I wanted to stab a person over this lol
[17:41:29] <PJBoy> I was gonna say, I can whip up a TreeView in a day or so
[17:41:38] <PJBoy> but a day's wage is still a large chunk of cash
[17:41:50] <LordKalma> you can't make a Quit TreeView in a day
[17:41:54] <cq-work> The only TreeView that worked was one in an old set of controls that looked like it was from Windows 98. So we ended up creating our own but it's rudimentary.
[17:42:03] <PJBoy> nah I can't make a TreeView on linux
[17:42:08] <PJBoy> but on windows, happy days
[17:42:09] <LordKalma> *Quick (as in Qt Quick)
[17:43:03] <cq-work> It was just astounding that this set of controls and widgets didn't have a tree view. I feel like that's one of those things you really need to be provided out of the box.
[17:43:08] <cq-work> Caught me off guard.
[17:43:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:18] *** ChanServ sets mode: +v npaperbot
[17:47:27] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:47:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:49:13] <LordKalma> cq-work you agree with the thread, in general?
[17:51:29] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:51:34] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:53:33] <ville> what you on about: https://doc.qt.io/qt-5/qtreeview.html
[17:54:51] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:54:52] <cq-work> No, QML only didn't have a treeview
[17:55:26] <ville> who gives a shit about some web tech
[17:55:43] <cq-work> It's not web tech, it's declarative ui
[17:56:00] <cq-work> No web engine involved
[17:56:06] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Client Quit)
[17:56:10] <cq-work> Well, it does have a JS parser but aside from that
[17:57:17] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[17:57:23] <cq-work> LordKalma, I'm not sure. The only QML app I've seen at scale is miserable but it's not really QMLs fault.
[17:57:33] <pulse> what type of man-made horror is this http://randomcat.org/cpp_initialization/initialization.svg
[17:57:59] <LordKalma> cq-work which app?
[17:58:05] <cq-work> In-house
[17:58:26] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[17:59:00] <cq-work> It's just disorganized, nobody followed recommended practices, and hacks all over the place. Granted, it was built in the early days of QML but still
[17:59:01] <PJBoy> randomcat be like that
[17:59:36] <ville> pulse: what do you mean? it looks accurate
[18:01:04] <ville> pulse: never tried to understand the initialization rules from the standard then?
[18:02:06] <pulse> does it HAVE to be this complex
[18:02:37] <cq-work> Opening that in firefox is not friendly
[18:03:08] <LordKalma> didn't render for me
[18:03:14] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:03:17] <PJBoy> it's not necessarily that complex
[18:03:24] <PJBoy> but it's broken down into several many steps
[18:03:39] <PJBoy> you sure it didn't render for you?
[18:03:48] <PJBoy> by default for me it was zoomed into empty space
[18:04:11] *** Quits: artok (~azo@mobile-access-567373-209.dhcp.inet.fi) (Ping timeout: 256 seconds)
[18:04:32] <ville> pulse:  no it absolutely does not but here we are. it's kind of hard if not impossible to get rid off it
[18:04:33] <cq-work> Firefox is particularly inefficient with it seems, caused my computer to freeze for a few seconds
[18:04:53] <PJBoy> it rendered in my old firefox without too much of an issue
[18:04:58] <lh_mouse> why doesn't GCC optimize the second function here:  https://gcc.godbolt.org/z/ffx481Ms9
[18:05:48] <PJBoy> because gcc is god awful
[18:05:53] <cq-work> Use O2
[18:06:02] <cq-work> O3 is being too aggressive there I think
[18:06:02] <pulse> !grab PJBoy
[18:06:03] <nolyc> pulse: The operation succeeded.
[18:06:18] <pulse> ville, i see
[18:06:25] <PJBoy> man clang really nails it
[18:06:26] <pulse> ville, i'm past the initial shock now
[18:06:30] <ville> PJBoy: it's very easy to find examples to favour any compiler
[18:06:35] <PJBoy> yeah I know
[18:06:43] <PJBoy> gcc's pretty good
[18:07:31] <ville> pulse: don't get me wrong, the current state is garbage and i've been voicing opinions about it for decade or two by now
[18:07:50] <PJBoy> that's so weird, it optimises the first four byte loads into a word load
[18:07:53] <PJBoy> but not the last four
[18:08:14] <PJBoy> oh is this some integer promotion garbage
[18:08:36] <Haohmaru> what if clang is wrong ;P~
[18:09:26] <PJBoy> doesn't seem to be
[18:09:46] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[18:10:47] <PJBoy> I got nothing
[18:11:03] <lh_mouse> from my little experiments, there is no compiler that is perfectly satisfactory on this piece of code.
[18:11:15] <LordKalma> inline asm it, then
[18:12:15] <PJBoy> I guess it just doesn't know how to bitshift many times
[18:13:49] <PJBoy> changing the parameter type to uint8_t* makes it optimise better
[18:16:14] <lh_mouse> no.
[18:16:33] <lh_mouse> it wouldn't.
[18:16:45] <PJBoy> it does...
[18:16:52] <PJBoy> I didn't just guess
[18:17:05] <rpav> changing from what
[18:17:18] *** Joins: artok (~azo@31.15.34.140)
[18:17:18] <ville> PJBoy: perhaps good idea to post an url that has the changes you mean
[18:17:25] <rpav> oh i think i see link
[18:17:27] <PJBoy> https://gcc.godbolt.org/z/hTo9ea1M9
[18:17:50] <PJBoy> you'd struggle to misinterpret the change I described
[18:17:51] <rpav> i see probable issues
[18:18:08] <lh_mouse> PJBoy, well I tested with `char*`.
[18:18:43] <lh_mouse> I know no details, but it seems `uint8_t*` makes a difference here.
[18:18:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:18:47] <lh_mouse> (despite the cast)
[18:18:51] <PJBoy> and now you've learnt a new optimisation technique
[18:19:07] <ville> PJBoy: don't underestimate people
[18:20:53] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:50da:5cb6:2c18:f59d)
[18:21:49] <lh_mouse> :)
[18:25:40] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Quit: RabidToaster)
[18:31:20] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2ee:cdf6:8538:d464:b49a)
[18:33:38] <lh_mouse> I thought `std::copy` could be better, but when I instantiate my template with `string::const_reverse_iterator`, clang produces much much worse code:  https://gcc.godbolt.org/z/d3oGYaf13
[18:34:11] <lh_mouse> GCC doesn't behave better, but at least it's not worse.
[18:34:12] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[18:34:36] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:e2ee:44e2:1d49:1e2c:593f) (Ping timeout: 240 seconds)
[18:34:37] * lh_mouse cries
[18:34:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:9489:acfe:a0fe:d45d)
[18:34:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:9489:acfe:a0fe:d45d) (Changing host)
[18:34:51] *** Joins: skapata (~Skapata@user/skapata)
[18:34:58] *** Joins: sigma__ (~sigma@86.57.86.120)
[18:35:14] *** Joins: furrymcgee (~devuan@cgn-89-1-209-226.nc.de)
[18:35:54] *** Quits: sigma_ (~sigma@86.57.124.14) (Ping timeout: 272 seconds)
[18:36:34] <lh_mouse> there are reasons why I can't use pointers. It's primarily because this is in reality the specialization of a template.
[18:37:25] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:e2ee:e06c:a143:626:8571)
[18:37:50] *** Joins: ymwm (~yingmanwu@117.26.69.165)
[18:38:35] <rpav> the gnu braces
[18:38:52] <rpav> lh_mouse: but are you doing the same thing? and why can't you?
[18:38:58] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:39:11] *** Joins: artok_ (~azo@95.204.62.151)
[18:39:23] <lh_mouse> the same with what?
[18:39:36] <rpav> "copy data to a uint64_t from something of sufficient size" shouldn't be template-dependent except getting the starting address
[18:39:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2ee:cdf6:8538:d464:b49a) (Ping timeout: 240 seconds)
[18:40:22] <lh_mouse> this is part of a templated `memchr` implementation.
[18:40:46] <lh_mouse> if I wish to search backwards, I can pass reverse iterators.
[18:40:50] <rpav> the reverse_iterator being optimized would probably depend a lot
[18:41:00] <lh_mouse> indeed.
[18:41:13] *** Quits: ymwm (~yingmanwu@117.26.69.165) (Client Quit)
[18:41:58] <lh_mouse> there is currently a report about missed optimization in GCC (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104632) but Clang has no problem on this.
[18:42:01] *** Quits: artok (~azo@31.15.34.140) (Ping timeout: 245 seconds)
[18:42:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[18:42:24] <rpav> clang's code looks considerably worse than optimal though?
[18:42:24] <lh_mouse> (well there could be more missed optimization cases.)
[18:43:33] <lh_mouse> this kind of tweaking sounds like dancing on the edge of a knife. I dislike it.
[18:44:14] <rpav> it is if this isn't something you've identified as being a big cost factor in something you've profiled and you're trying to improve
[18:44:39] <lh_mouse> actually I did.
[18:45:03] <rpav> then it _is_ an issue and you do what you need to to meet the goal you have
[18:45:29] <rpav> probably start by not dealing with reverse_iterators (ime they kinda suck .. probably due to lack of attention)
[18:45:58] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:46:32] *** Quits: callq (~callq@2409:4062:2e1f:6d40:ade2:90cc:f912:5fc5) (Quit: callq)
[18:46:44] <lh_mouse> true. I start to admit that only forward searching deserves optimization.
[18:47:44] <cq-work> If you switch to clang trunk, seems like they fix whatever that is
[18:47:50] <lh_mouse> the reverse one is less common, and unless I specialize (duplicate) it, it would be much slower.
[18:47:53] <rpav> i don't know that that's the case, it's just reverse_iterator stuff needs some implementation love really
[18:48:14] <rpav> cq-work: whoa yeah
[18:48:21] <rpav> _that's_ a bit more optimal
[18:48:50] <rpav> though wtf is with the xor eax,eax / test al,al / jne
[18:49:04] <cq-work> I have no idea.
[18:49:42] <rpav> "just making sure your hardware / reality / math still functions as expected"
[18:50:28] <lh_mouse> time for bed. :)
[18:50:33] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:59:48] *** Quits: artok_ (~azo@95.204.62.151) (Ping timeout: 240 seconds)
[19:00:46] *** Joins: artok (~azo@2.71.83.230.mobile.tre.se)
[19:06:19] *** Joins: callq (~callq@2409:4062:2e1f:6d40:8d8:8e3a:d57f:e1a)
[19:06:52] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:12:31] *** Joins: artok_ (~azo@mobile-access-567373-209.dhcp.inet.fi)
[19:13:01] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[19:14:35] *** Quits: artok_ (~azo@mobile-access-567373-209.dhcp.inet.fi) (Client Quit)
[19:15:10] *** Quits: artok (~azo@2.71.83.230.mobile.tre.se) (Ping timeout: 272 seconds)
[19:15:32] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[19:17:51] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[19:25:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:26:11] *** Joins: magla (~gelignite@d5362da6.access.ecotel.net)
[19:26:33] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[19:31:56] <PJBoy> that clang code weirdly optimises slightly better if reg is initialised to 0
[19:32:23] <rpav> what
[19:32:32] <rpav> that seems werid
[19:33:22] <pulse> compile half of the code with clang and another half with gcc
[19:33:35] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:33:46] <rpav> well you could, it would just be a bit of a pita
[19:33:58] <PJBoy> also wow what
[19:34:01] <rpav> PJBoy: i only see an extra RET
[19:34:12] <rpav> err, wait are we talking not-trunk clang
[19:34:13] <PJBoy> I didn't know you could cast to char(&)[] with unspecified size
[19:34:23] <PJBoy> the extra ret is what I meant, yeah
[19:34:50] <rpav> i'm not sure you can, i actually chnaged that to a uint8_t* cast when toying with it
[19:35:06] <rpav> like i mean the syntax works but
[19:36:06] *** Joins: artok (~azo@mobile-access-567373-209.dhcp.inet.fi)
[19:36:17] <rpav> must decay to a char*
[19:36:23] <rpav> return sizeof(...) is an error
[19:36:38] <PJBoy> but then the argument of the cast isn't a pointer
[19:36:43] <PJBoy> so it's not as simple as decay
[19:37:42] <rpav> why not .. if it were a regular char[N] it wouldn't be a pointer value
[19:38:06] <rpav> it's casting the reference of reg to a char(&)[] and that decays to char*
[19:38:34] <rpav> i mean, if it were, reg would decay to a pointer, but it's not like it is one obvs
[19:39:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:39:36] <PJBoy> << TYPE<decltype(y)>; string::iterator x; auto y = reinterpret_cast<char(&)[]>(x);
[19:39:37] <geordi> char*
[19:39:51] <PJBoy> :/
[19:40:04] <PJBoy> { string::iterator x; reinterpret_cast<char*>(x); } // but this is an error
[19:40:04] <geordi> error: invalid cast from type 'string::iterator' to type 'char*'
[19:40:13] <rpav> i'm not sure the cast to an array reference is defined behavior
[19:40:24] <rpav> well of course it is
[19:40:52] <PJBoy> { string::iterator x; cout << TYPE<decltype(reinterpret_cast<char(&)[]>(x))>; }
[19:40:53] <geordi> char (&)[]
[19:40:57] <rpav> you're just forgetting the bit where `char c[5];` involves no pointers
[19:41:27] <PJBoy> how can you have a reference to an array of unknown bound
[19:41:39] <rpav> it's an incomplete type
[19:41:41] <PJBoy> and why does that decay into a pointer to its address
[19:41:52] <rpav> you can have those as long as you don't actually try to use them directly, and they can decay
[19:42:06] <rpav> it decays because arrays decay here
[19:42:31] <PJBoy> yeah that's true
[19:42:35] <rpav> think like "how can i have a pointer to a struct of incomplete type" because basically it's the same thing, except T[] decays implicitly
[19:42:43] <PJBoy> so yeah I'm just surprised you can cast to that
[19:43:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:44:13] *** Quits: shailangsa (~shailangs@host86-185-102-18.range86-185.btcentralplus.com) (Ping timeout: 256 seconds)
[19:47:35] *** Quits: callq (~callq@2409:4062:2e1f:6d40:8d8:8e3a:d57f:e1a) (Quit: callq)
[19:49:51] *** Joins: AmR (~AmREiSa@156.199.49.129)
[19:50:07] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:58:35] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:05:32] *** Joins: sigma_ (~sigma@164.215.209.153)
[20:05:48] *** Quits: sigma__ (~sigma@86.57.86.120) (Ping timeout: 240 seconds)
[20:07:06] *** Quits: artok (~azo@mobile-access-567373-209.dhcp.inet.fi) (Ping timeout: 272 seconds)
[20:07:47] *** Joins: artok (~azo@mobile-access-567373-209.dhcp.inet.fi)
[20:10:04] *** Joins: gehn (~gehn@user/gehn)
[20:10:20] *** Quits: gehn (~gehn@user/gehn) (Client Quit)
[20:10:41] *** Joins: shailangsa_ (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[20:10:53] *** Quits: magla (~gelignite@d5362da6.access.ecotel.net) (Read error: Connection reset by peer)
[20:18:01] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[20:23:16] *** Joins: magla (~gelignite@d5362da6.access.ecotel.net)
[20:30:40] *** Joins: markong (~kvirc@213.146.188.203)
[20:31:07] *** Joins: xkuru (~xkuru@user/xkuru)
[20:35:57] <rpav> haha i had a terrible idea
[20:36:35] <rpav> how we were doing the `vector *at* 42` stuff .. use it for strings
[20:37:08] <PJBoy> strings how?
[20:37:38] <rpav> `print("C++ with " *"formatted text"* ".")` .. the quotes sortof ruin it ;/
[20:38:15] <PJBoy> you'd need a custom type in there somewhere
[20:38:21] <rpav> and unfortunately it has the unary/binary problem, so you can't have like print(/"italicized"/);
[20:38:56] <rpav> but you _could_ have `format /"italicized text"/ end;`
[20:40:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:43:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:43:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[20:43:57] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[20:46:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 240 seconds)
[20:53:39] *** Joins: cesello (~cesello@user/cesello)
[20:54:09] *** Quits: cesello (~cesello@user/cesello) (Client Quit)
[20:55:52] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:1159:390b:ecc7:8afb)
[20:56:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:28] *** Joins: eio__ (~eio@2a01:e0a:542:e160:5140:b2aa:3ca7:2c48)
[20:57:55] *** Quits: jokoon (~eio@2a01:e0a:542:e160:1159:390b:ecc7:8afb) (Ping timeout: 250 seconds)
[21:00:02] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:1159:390b:ecc7:8afb) (Ping timeout: 240 seconds)
[21:00:22] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[21:01:57] <yolo> how to differentinate non-member std::swap vs algorithm std::swap, I found swap and erase are a bit messy as they could be: algorithm, non-member, member
[21:02:11] *** Quits: DSpider (~DSpider@82.79.237.29) (Quit: Leaving)
[21:04:03] *** Joins: ibenn (~ibenn@2a02:8071:45af:1700:4fb0:4b14:64dc:e322)
[21:08:27] <PJBoy> algorithm std::swap is non-member
[21:08:35] <PJBoy> there's nothing to differentiate
[21:09:10] <yolo> so they're the same thing? std::swap non-member and std::swap algorithm
[21:09:45] <PJBoy> not sure what illusion you're under that they might be different
[21:10:10] <PJBoy> there's only one std::swap in the standard library, and it's in the algorithms library
[21:12:05] <yolo> i was checking cppreference and notice std::swap is under non-member of containers, then a global search finds it's also listed under algorithm, and their URL are not linked: https://en.cppreference.com/w/cpp/container/vector/swap2 vs https://en.cppreference.com/w/cpp/algorithm/swap vs https://en.cppreference.com/w/cpp/string/basic_string/swap2
[21:12:27] <yolo> swap2 means it has a member swap
[21:12:34] *** Quits: AmR (~AmREiSa@156.199.49.129) (Ping timeout: 260 seconds)
[21:13:04] <kalven> yolo: you don't really have to worry about the member versions. you can just assume that std::swap has been specialized for all the standard containers.
[21:13:06] <PJBoy> those swap2s are specialisations of std::swap
[21:13:28] <PJBoy> or you could call them overloads
[21:13:36] <PJBoy> either way they're still just std::swap
[21:14:08] <yolo> https://en.cppreference.com/w/cpp/container/deque/swap2 it looks like almost each container overloads with its own non-member std::swap, under swap2 name in URL
[21:14:29] <yolo> they're more like std::swap_ranges in algorithm to me
[21:14:53] <PJBoy> you can see all the std::swap specialisations from the https://en.cppreference.com/w/cpp/algorithm/swap page
[21:15:03] <ville> (algorithm is not the only way to get std::swap)
[21:15:53] <yolo> thanks, yes that swap page lists about 30 specialized std::swaps, got it.
[21:16:21] <PJBoy> there's also std::ranges::swap now
[21:16:35] <PJBoy> which would be the preferred way of swapping from C++20 onward
[21:17:41] <PJBoy> although its cppreference documentation is *horrible*
[21:19:00] <yolo> 7 months into c++, the hardest bug I got(only detectable at runtime) is iterator invalidated, e.g. vec.push_back() will invalidate iter inside loop!
[21:19:02] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b809:dee4:ffde:c8e9)
[21:19:02] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b809:dee4:ffde:c8e9) (Changing host)
[21:19:02] *** Joins: skapata (~Skapata@user/skapata)
[21:26:04] <PJBoy> that's pretty good
[21:26:10] <LordKalma> !rq
[21:26:10] <nolyc> LordKalma: <LordKalma> I hate C++ too, but at least I like C++
[21:28:12] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:29:49] *** Quits: eio__ (~eio@2a01:e0a:542:e160:5140:b2aa:3ca7:2c48) (Quit: Leaving)
[21:32:13] *** Quits: artok (~azo@mobile-access-567373-209.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:32:19] *** Quits: ibenn (~ibenn@2a02:8071:45af:1700:4fb0:4b14:64dc:e322) (Quit: Leaving)
[21:35:42] *** Joins: Inline (~Inline@p200300cd47142200d42e13192b15e793.dip0.t-ipconnect.de)
[21:39:14] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[21:40:36] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:40:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:43:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:17] *** ChanServ sets mode: +v npaperbot
[21:44:18] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[21:44:21] <xkoncek> i have an object that only temporarily needs to store some additional information then throw it away, what c++ object is a good way to model this?
[21:44:23] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:45:06] <xkoncek> i could live with a unique_ptr, but at best i would completely remove it from the object data members
[21:45:23] <xkoncek> so possibly some map<string, any>
[21:47:20] <PJBoy> not a lot of information to off of there
[21:48:21] <xkoncek> wait... i actually changed the design so i probably don't need it anymore
[21:48:28] <xkoncek> but the motivation was:
[21:49:10] <xkoncek> server has clients and right after connecting the client would send its public key to which the server would respond with an encrypted symmetric key
[21:49:39] <xkoncek> the server would have to store that public key but it is really just a one-off
[21:50:36] *** Quits: proller (~p@2a02:6b8:0:40c:e641:5109:d268:8331) (Ping timeout: 240 seconds)
[21:51:26] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:e2ee:e06c:a143:626:8571) (Remote host closed the connection)
[21:51:41] <PJBoy> doesn't sound like it needs to store it
[21:51:53] <PJBoy> not beyond a local variable that is
[21:52:07] *** Quits: magla (~gelignite@d5362da6.access.ecotel.net) (Quit: Stay safe!)
[21:52:08] <PJBoy> but if it did, then unique_ptr probably would have been my choice
[21:55:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[22:01:27] *** Quits: Guest4896 (~Guest@host126.190-137-36.telecom.net.ar) (Remote host closed the connection)
[22:01:34] *** Quits: andreasbuhr (~quassel@p549db21b.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:03:24] *** Joins: Inline__ (~Inline@p200300cd4715f5002bb20ed77dab6816.dip0.t-ipconnect.de)
[22:05:10] *** Quits: Inline (~Inline@p200300cd47142200d42e13192b15e793.dip0.t-ipconnect.de) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:05:10] *** Inline__ is now known as Inline
[22:05:16] *** Quits: sigma_ (~sigma@164.215.209.153) (Quit: Konversation terminated!)
[22:09:46] <LordKalma> https://devblogs.microsoft.com/oldnewthing/20220228-00/?p=106296
[22:09:52] <LordKalma> "Zero-cost exceptions arenâ€™t actually zero cost" pt 5435345
[22:10:31] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Remote host closed the connection)
[22:11:50] <LordKalma> "These costs are not visible to the naked eye. They take the form of lost optimization opportunities."
[22:11:53] <LordKalma> interesting article
[22:14:56] <PJBoy> when someone says "zero cost" though
[22:15:05] <PJBoy> dubious
[22:15:25] <kalven> it's regularly thrown around by proponents of exceptions
[22:15:42] <PJBoy> someone should catch it
[22:15:53] <LordKalma> get out
[22:15:59] <Friithian> nah, let is fall through
[22:16:08] <Friithian> std::terminate the fuckers throwing things around!
[22:16:16] <ville> virtual is another language construct that is tricky to pin down its cost. it doesn't exactly show up in your profiler output
[22:18:52] <yolo> real coder nothrow
[22:19:31] <LordKalma> things like polymorphism... nobody is telling you to use them.  "omg thing of the overhead of a vtable lookup" "use C"
[22:19:39] <LordKalma> and then C programmers manually invent vtables
[22:20:11] <rpav> ville: not in every instance, but unless you're like "slow everywhere" then in loops or blocks you can definitely see virtual's impact
[22:20:25] <yolo> yes but C does not need read a few thousands of spec to do that
[22:21:18] *** Joins: magla (~gelignite@d5362da6.access.ecotel.net)
[22:21:19] <yolo> C can do OOD just fine including ctor|dtor c26 can make a c+ (adding some must-have ood to c)
[22:21:43] <rpav> LordKalma: yeah .. "use a tool for its job"
[22:22:00] <rpav> though i had a "hidden nail"? "reverse hammer problem"? for real yesterday
[22:22:04] <LordKalma> yeah, honestly, yeah, people are always like "MAH OVERHEAD"
[22:22:07] <LordKalma> don't use it then
[22:22:17] <Friithian> *mumbles about !rule 1*
[22:22:36] <LordKalma> well, rule 1 is nice, and I honestly like it
[22:22:44] <rpav> i.e. a problem didn't look like a nail but it actually was (literally, pounded a bolt in reverse using a claw hammer to get it back in the proper threads)
[22:22:48] <LordKalma> but rule 1 misses thefact you have to make software design first haha
[22:23:29] <Friithian> yeah you sorta get into a deadlock of designing the software and picking performant ways
[22:24:07] <Friithian> and for something this low level of design it is hard to change it later
[22:24:16] <LordKalma> I believe in rule 1 at like function-level
[22:24:22] <rpav> well you learn approaches / idioms for doing things then follow those .. if the idioms you learn are less overhead, you'll probably tend to have a better start .. but this assumes you _can make it work_
[22:24:27] <LordKalma> at architecture level.. you kinda gave to get it more or less right
[22:24:34] <LordKalma> *have
[22:24:54] <Friithian> just throw a faster processor at the program, don't worry about overhead :P
[22:25:09] <rpav> like a lot of people will start with "Object" and "subclass" and "maek virtual method" and others will start with "struct of data" and "compose them" and guess which is probably going to have less overhead
[22:25:13] <yolo> data center is 1% of global power consumption already(and increasing), c and rust are now called "green language"
[22:25:45] <yolo> python obviously is the sucker
[22:25:59] <ville> rpav: i mean there isn't a box labeled: time spent doing virtual function lookup
[22:26:00] <rpav> "languages you use if you're green"
[22:26:11] <Friithian> <insert statement hating on python here>
[22:27:15] <rpav> ville: you can glean some of that from cachegrind-like metrics
[22:27:52] *** Joins: blackout69 (~blackout6@37.183.230.121)
[22:28:39] <rpav> virtual is definitely not always a miss and not always worse performance than any other solution, but if you're _finding_ issues and you _suspect_ it's that because you know what you're code's doing and how, you can at least get some early verification before rewriting chunks
[22:34:11] *** Joins: proller (~p@80.240.216.69)
[22:36:29] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:40:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[22:40:35] *** Joins: proller (~p@2a02:6b8:b081:8816::1:22)
[22:41:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:44:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:48:46] <Alipha> LordKalma: indeed, there's a difference between "premature optimization" and "picking a performant design from the start". Proper container selection falls in the latter. Virtual call overhead is the former, unless you know that the virtual calls are going to be in a hot loop
[22:50:16] <rpav> virtual call overhead can _also_ be the latter depending on your design
[22:50:36] <rpav> but that's less "virtual overhead" and just "poor software design all around"
[22:51:47] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 256 seconds)
[22:51:50] <Alipha> rpav: what i mean is, if using polymorphism makes the most sense in your design, then go with it, not worrying about performance, unless the virtual calls are in the critical path
[22:52:32] *** Joins: ravan (~ravan@42.201.198.151)
[22:52:32] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[22:52:32] *** Joins: ravan (~ravan@user/ravan)
[22:52:45] <rpav> sure .. but it's sortof the same thing
[22:52:55] <Alipha> so, indeed, you may also decide not to use virtual calls for non-performance related things
[22:53:17] <Alipha> s/things/reasons/
[22:53:32] <rpav> like, polymorphism "makes sense" in the places where dynamic dispatch is already unavoidable, but some people are under the mistaken impression one starts with and makes everything virtual by default ;)
[22:54:54] <rpav> like, "i load this data into a working structure then act on each piece" .. well, that's dynamic by nature and if you want unlimited extension (vs a fixed set of functionality), you probably might as well use virtual
[22:55:21] <rpav> but "i'm making a UI and everything starts with a billion virtual calls" is facepalm
[23:09:27] <cq-work> iinm, vtables can be optimized away if done properly and the compiler determines it's not used.
[23:09:51] <rpav> cq-work: sortof a myth
[23:10:30] <rpav> like, yes they absolutely can: you use a final class with a pointer/ref of that class, and it will be devirtualized, or your program is entirely trivial and visible in a single TU
[23:10:44] <rpav> this is even very occasionally useful
[23:10:57] *** Joins: Guest3896 (~Guest@181.91.158.121)
[23:10:59] <cq-work> It's not caught in link-time optimizations?
[23:11:18] <rpav> in any case you should generally be using virtual, it's not possible
[23:12:00] <rpav> LTO is not magic, it can't make things go away that it can't determine, and the entire point of virtual is future nondeterministic use
[23:12:29] *** Parts: blackout69 (~blackout6@37.183.230.121) ()
[23:12:43] <rpav> there are rare cases when _very_ occasionally you might want to use something virtually, but most of the time you're going to be using the concrete impl, so you can use `final` and mostly have both things
[23:14:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:15:38] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 252 seconds)
[23:16:57] *** Joins: ravan (~ravan@42.201.198.151)
[23:16:57] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[23:16:57] *** Joins: ravan (~ravan@user/ravan)
[23:18:54] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:19:07] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:31:43] <rpav> someone make the anti-Qt and call it Fglui
[23:34:03] <cq-work> pronounced fugly?
[23:34:36] <cq-work> I don't even know what a good UI library would look like anymore
[23:34:46] <rpav> yes
[23:35:16] <cq-work> I used to think spice might have been onto something but nobody gives a shit about it
[23:35:18] <rpav> "future graphics library/UI"
[23:35:48] <rpav> dunno, i have a vision or few of what a next-gen UI should be like but who has time
[23:37:06] <Guest3896> qt is great...
[23:37:38] <rpav> ly overdue for retirement
[23:37:41] <Friithian> inb4 reeeeeeeing
[23:37:45] <Friithian> ah darn too late
[23:38:36] <cq-work> I do think declarative UI is a must, even for desktop.
[23:39:02] <rpav> nah i think to some degree while we can definitely have better "traditional" UIs, we need a new vision of desktop UI in general
[23:39:11] <cq-work> I used to think UIML was the shit
[23:39:14] <rpav> or at least the zombie of an older vision
[23:39:32] <rpav> i think any UI you have to type things to get is DOA
[23:39:39] <rpav> get/make
[23:39:46] <Guest3896> why do all need to be new?
[23:39:54] <Guest3896> due to fake evolution?
[23:40:27] <cq-work> Because what we have is a broken maintainance hell
[23:40:37] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[23:40:42] <Guest3896> even qt has the webkit (versus html5) iirc
[23:41:00] <rpav> i mean imagine if someone was like "any new raster image editor should definitely be driven by declarative markup language"
[23:41:23] <Guest3896> cq-work: just don't use too new features
[23:41:37] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:41:41] <Guest3896> "the rush for the new" --> bad
[23:41:57] <rpav> who is "rushing for hte new"
[23:42:08] <Guest3896> in example "smart pointers" :)))
[23:42:12] *** Joins: Terminus (~null@user/terminus)
[23:42:19] * cq-work sighs.
[23:42:23] <rpav> we're using GUI that's 35+ years old; it's not new... it's stale and outmoded and there are vastly better/nicer ways
[23:42:38] <rpav> Guest3896: an example of what?
[23:43:10] <Guest3896> rpav: give me an example of "declarative markup language"
[23:43:17] <Guest3896> html?
[23:43:25] <cq-work> UIML if you want one that's based around UI
[23:43:26] <rpav> i don't care about declarative markup language; you can find plenty
[23:43:29] <rpav> that would be one
[23:44:06] <Friithian> wait is there something wrong with smart pointers?
[23:44:12] <Guest3896> cq-work: why do you sigh now?
[23:44:26] <cq-work> Because you sound like you program like it's 1990
[23:44:45] <Guest3896> [17:09:26] <rpav> we're using GUI that's 35+ years old; it's not new... it's stale and outmoded and there are vastly better/nicer ways --> C/C++ is 60 years old and going
[23:45:07] <Friithian> >C/C++
[23:45:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[23:45:14] <Guest3896> [17:09:41] <rpav> Guest3896: an example of what? --> it was a joke but maybe an example of rushing
[23:45:15] <rpav> C++ is not 60 years old and arguably it's so new post-c++11 that it's not even 20
[23:45:47] <rpav> C is barely 50
[23:45:57] <cbreak> QWERTY is 149 years old.
[23:46:04] <Guest3896> [17:11:28] <cq-work> Because you sound like you program like it's 1990 --> I like C/C++ which is 60 years old
[23:46:23] <rpav> cbreak: and kinda sucks but it's one of those things
[23:47:02] <Guest3896> [17:12:17] <rpav> C++ is not 60 years old and arguably it's so new post-c++11 that it's not even 20 --> well, 50
[23:47:19] <rpav> well, no
[23:47:26] <Guest3896> and C++ 37
[23:47:40] <Guest3896> you just said 35...
[23:47:46] <Guest3896> come on
[23:48:04] <rpav> no i just said that post-c++11 it's such a different language it ought to be only considered ~13
[23:48:28] <Friithian> there's old c++, then there is modern c++
[23:48:29] <rpav> with an overbearing parent
[23:49:02] <rpav> it's like Ye Olde English vs modern verbing
[23:49:18] <Guest3896> now it is a different language... you re rushing, see
[23:49:30] <Guest3896> people, evolution is a lie!
[23:49:35] *** Joins: artok (~azo@mobile-access-567373-209.dhcp.inet.fi)
[23:49:41] <Guest3896> and there are things that don't change!
[23:49:54] <rpav> mostly human idiocy
[23:50:24] <rpav> if C++ has any issue it's that its dev cycle isnt' fast enough
[23:50:37] <Guest3896> i call it igrnorance better
[23:51:49] <Guest3896> returning to the topic... C/C++ is great and as well the GUI basically; do you want virtual reality environment or what?
[23:52:27] <Guest3896> the time when it is necessary will appear alone, dont rush. Its my humble opinion.
[23:52:27] <rpav> i'd ask if you were gpt3, but this is more like, eliza 1.5
[23:53:01] <Guest3896> and Qt is great: what is wrong with it?
[23:53:17] <Guest3896> as well as gtk as far as i know it
[23:53:31] <rpav> qt is passable and useful .. but mostly becuase there's not a lot of choice
[23:54:11] <Guest3896> maybe critizice html5 or javascript better :)
[23:54:41] *** Quits: artok (~azo@mobile-access-567373-209.dhcp.inet.fi) (Ping timeout: 256 seconds)
[23:54:41] <Guest3896> with their support for libre formats like webm
[23:55:19] <Guest3896> there was a fight webkit versus html5 not so long ago
[23:56:14] <rpav> i'm not a fan of the web, but that's not the only alternate _possibility_
[23:56:15] <Guest3896> the key in libre software is that there are not lots of options; people tend to go for 1
[23:56:40] <Guest3896> then if that one doest work, then a new one appears
[23:56:43] <rpav> that wasn't always the case ;/
[23:57:09] <rpav> once, there were lots of options; most of them sucked, but people were interested in working on things
[23:57:13] *** Joins: mkjp (~mkjp@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[23:57:14] <Guest3896> I guess it is becasue there are not many human resources
[23:57:32] <Guest3896> think in any technology and you wil see mostly 1 or 2 options
[23:57:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:58:10] <cq-work> It's because UI libraries aren't trivial and they're tedious/resource-consuming to make.
[23:58:13] <Guest3896> and the software needs to be mature: let's say about version 1.0
[23:58:16] <rpav> that wasn't really always the case either
[23:58:24] <rpav> cq-work: kinda
[23:58:35] <Alipha> NeoGfx!
[23:58:57] <Guest3896> in example, image editor: GIMP
[23:59:13] <Guest3896> audio editor: Audacity; Ardour maybe too
[23:59:24] <Guest3896> music editor: LMMS
[23:59:27] <Guest3896> etc.
[23:59:27] <rpav> i think the real issue is dealing with text is hard, especially with an increasing need to support international text
[23:59:33] *** Quits: mkjp (~mkjp@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: mkjp)
[23:59:38] <cq-work> GIMP has a notoriously bad design and the docking framework they used is in-house i.e. it doens't exist in the toolkit itself.
[23:59:42] <rpav> there are lots of alternatives to gimp; just most of them not free
[23:59:46] <rpav> all of them mostly better though
[23:59:49] <Guest3896> suite office; a big topic; LibreOffice
