[00:00:55] *** Joins: haj (~haj@ip5f5beb98.dynamic.kabel-deutschland.de)
[00:01:50] <Manis> xenu: OMG, you are my rescue. Thank you very much!
[00:02:51] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[00:03:13] <Manis> I'm a Perl noob so I have no idea what "predeclared constant" means, but this like is a very clever "hack" to get some magic constant through three libraries ;-)
[00:05:35] *** Joins: R2robot (~R2robot@user/r2robot)
[00:07:58] *** Quits: mingdao_ (~mingdao@107-146-172-064.res.spectrum.com) (Quit: leaving)
[00:08:08] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[00:11:39] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[00:12:21] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:13:31] *** Joins: kensanata (~user@user/kensanata)
[00:21:03] *** Quits: martinus__ (~martin@127.59.202.77.rev.sfr.net) (Ping timeout: 256 seconds)
[00:21:17] * GumbyPAN CPAN Upload: Music-Duration-Partition-0.0704 by GENE https://metacpan.org/release/GENE/Music-Duration-Partition-0.0704
[00:23:22] *** Quits: proller (~p@2a02:6b8:b081:12::1:2e) (Ping timeout: 268 seconds)
[00:34:04] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9841-fdb7-086b-ec04.res6.spectrum.com) (Remote host closed the connection)
[00:35:37] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[00:35:59] *** Joins: proller (~p@80.240.216.69)
[00:36:12] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[00:38:03] *** Joins: skraito (~skraito@user/skraito)
[00:38:15] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[00:42:45] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785)
[00:48:19] <lopid> mjgardner, ah, good. the comments address my thought O:)
[00:49:10] *** Quits: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[00:49:11] <lopid> well, one of them
[00:51:09] <mjgardner> lopid: Glad to hear. I’m encouraging people to comment closer to the source material instead of remaining locked away in other channels and forums.
[00:51:20] * GumbyPAN CPAN Upload: Data-Stacker-1.03 by CADE https://metacpan.org/release/CADE/Data-Stacker-1.03
[00:52:23] <lopid> my other thought isn't worthy of a comment on the article, tbh not that i'm usually dishonest
[00:53:02] <lopid> nor here, to continue this not unusual streak of honesty
[00:53:17] <mjgardner> I love reasoned disagreement in the comments, it means both I and my readers can make up their mind and learn something new.
[00:57:46] <mjgardner> I wish there was an easy way to syndicate Reddit and other forums’ threads back onto my blog to consolidate everything.
[00:58:58] <lopid> reminds me of "pingbacks", where an article can have "12 comments", all of which are just links to other places that link to said article
[01:06:21] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:06:32] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (Ping timeout: 268 seconds)
[01:11:48] *** Joins: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca)
[01:18:18] <El_Che> I agree tbat unless can be confusing, but it's not in your example. I feel your example is the postchild for using unless (single line statements)
[01:18:21] <El_Che> 2c etc
[01:20:56] <lopid> i think there was a little misunderstanding of the perlcritic rule
[01:21:55] <El_Che> I miss unless in other languages
[01:25:37] *** Quits: ufobat (~martin@dynamic-077-009-048-067.77.9.pool.telefonica.de) (Ping timeout: 240 seconds)
[01:25:52] <xenu> unless $foo is okay, unless($foo && bar) is bad, unless(!$foo && !$bar) is literally hitler
[01:26:18] <El_Che> xenu: of course you went there. I am happy you didn't say penis :)
[01:26:40] <El_Che> xenu: agreed on the simple cases
[01:27:38] <lopid> postfix
[01:36:46] <ether> I use 'and' rather than && for logical conditions, and 'not' and 'or'.  'unless not' is awful, but 'unless $foo and $bar' isn't so bad
[01:37:17] <ether> I would still say  if not $foo and $bar;  though
[01:40:34] <lopid> same
[01:41:47] <revhippie> same, but I'd have to run it through -MO=Deparse,-p first to make sure I've got my precedence right.
[01:42:34] <El_Che> "if not $foo and $bar" <= I'll use parenthesis otherwise I'll have to slowdown when reading that
[01:42:50] *** Quits: haj (~haj@ip5f5beb98.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:44:39] <lopid> maybe i'd prefer a block for that. i don't want to spend more time parsing the postfix bit only to have to go back to the main bit
[01:45:09] *** Quits: Manis (~Manis@77-56-190-146.dclient.hispeed.ch) (Quit: Manis)
[01:45:45] <lopid> important_thing if complex_thing
[01:50:32] <Adura> complex_thing && important_thing
[01:50:46] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:51:28] * GumbyPAN CPAN Upload: Text-Levenshtein-BV-0.06 by WOLLMERS https://metacpan.org/release/WOLLMERS/Text-Levenshtein-BV-0.06
[01:51:35] <lopid> makes logical but not 'human'(?) sense
[01:51:59] <Adura> It's situation specific for me
[02:00:41] <LeoNerd> I'm getting tired of trying to remember to drag around my .inputrc and .bashrc and a few other files, to every user of every box I am setting up. Does anyone have any suggestions for something nicer?
[02:02:35] <Adura> You'd assume /etc has a base it goes on...
[02:03:43] <ether> I still pull up the precedence table in 'perldoc perlop' about once a week or so
[02:04:18] *** Joins: proller (~p@2a02:6b8:b081:8814::1:f)
[02:05:24] <EvanCarroll> HALLO MY PEOPLE
[02:05:55] <LeoNerd> Basically I want a command "setup-my-standard-files-in-my-homedir user@host" and it will just do that
[02:05:57] <EvanCarroll> Who wants to be my a Japanese Titanium socket set? Will trade buu.
[02:05:59] <EvanCarroll> https://www.youtube.com/watch?v=sbK9m4gucAk
[02:06:00] <Paperbot_> YouTube video linked by EvanCarroll: The MOST Expensive Socket Set, You've Never Seen! Ko-ken Titanium TI4261M - published by MrSubaru1387
[02:06:00] <LeoNerd> Can anyone name me something?
[02:06:24] <EvanCarroll> LeoNerd: skelcp
[02:07:10] <LeoNerd> Not finding much
[02:07:20] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:07:40] <lopid> a shell function or script to scp them?
[02:07:47] <LeoNerd> Yes I'm sure I could make that
[02:07:50] <EvanCarroll> are you asking for a command? or are you making one and wanting to name it?
[02:07:53] <LeoNerd> I want to use the standard one everyone uses
[02:08:01] <LeoNerd> I refuse to believe I'm the first person ever to design or invent it
[02:08:27] <lopid> perhaps because it's too simple: scp file1 file2 … user@host
[02:08:33] <LeoNerd> A list of 20 files every tmie
[02:08:34] <EvanCarroll> The standard method is to add your "standard files" to a repo with chezmoi and install chezmoi remotely and it'll do it.
[02:08:40] <LeoNerd> Better make sure I definitely remember all 20 of them
[02:08:41] <tirnanog> here's a few to get your teeth into: https://wiki.archlinux.org/title/Dotfiles#Tools
[02:08:42] <Paperbot_> Link title(s): [ Dotfiles - ArchWiki ]
[02:08:42] <lopid> hence a function or script
[02:08:58] <EvanCarroll> (chezmoi is the best one probably)
[02:08:58] <LeoNerd> Right
[02:09:00] <x5c30> many useradd that automatically add /home dir will have a template dir somewhere (/etc/skel, /etc/default/useradd, ..). that can make it less annoying if you can populate that once early after build.
[02:09:01] <Adura> LeoNerd, just populate /etc/skel ?
[02:09:03] <LeoNerd> Are you saying _everybody_ always does this?
[02:09:15] <EvanCarroll> Adura: yea, but he wants it be remote.
[02:09:18] <lopid> whatever solution you go with, you're going to have to give it your definitive list
[02:09:19] <LeoNerd> That no person alive in the history of the world has ever thought "youknow this is stupid and boring and I'll write myself a 30second script and name it somewhere"
[02:09:34] <tirnanog> apparently not.
[02:09:37] <Adura> Populate /usr/skel, remotely!
[02:09:44] <tirnanog> or, rather, it's apparently not the case that nobody thought to write a tool.
[02:09:54] <EvanCarroll> LeoNerd: it's not that complex, everyone installs chezmoi and then you run chezmoi init --apply --verbose https://github.com/username/dotfiles.git
[02:10:04] <lopid> skel is for before the user is creted
[02:10:09] <lopid> a
[02:10:24] <LeoNerd> and skel is for one machine, so yes doubly not usefl here
[02:11:33] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[02:11:51] <LeoNerd> Aha, chezmoi looks about right; thanks EvanCarroll 
[02:12:08] <lopid> foo() { scp ~/.bashrc ~/.inputrc … "$1"; }  # not sure it needs… ok then
[02:12:13] <revhippie> hmm.  "securely" -> "sh -c "$(curl ...)" ..." always makes me a little nervous.
[02:12:34] <revhippie> Maybe they meant "sh-curly".
[02:12:43] <LeoNerd> Hah; yes... I'm sure they have a "install this from a debian package" option too ;)
[02:14:10] <EvanCarroll> =)
[02:14:11] <EvanCarroll> ahahha
[02:14:38] <lopid> related: https://news.ycombinator.com/item?id=18902090
[02:14:39] <Paperbot_> Link title(s): [ Chezmoi: manage your dotfiles securely across multiple machines | Hacker News ]
[02:14:40] <EvanCarroll> chezmoi installing .bin instead of .local/bin is annoying imho
[02:15:55] <tirnanog> that's a disappointment. I like me some .local/bin.
[02:16:21] <lopid> i prefer ~/bin
[02:16:30] * GumbyPAN CPAN Upload: Music-Duration-Partition-0.0705 by GENE https://metacpan.org/release/GENE/Music-Duration-Partition-0.0705
[02:22:09] *** Quits: choroba (~choroba@plecka.ms.mff.cuni.cz) (Quit: leaving)
[02:22:54] *** Joins: monkey_ (~user@190.104.116.153)
[02:23:45] *** Joins: fwg (~fwg@user/fwg)
[02:23:56] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:24:30] *** Joins: monkey_ (~user@190.104.116.153)
[02:24:42] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:29:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:30:46] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[02:31:33] * GumbyPAN CPAN Upload: Sim-OPT-0.653 by GLBRUNE https://metacpan.org/release/GLBRUNE/Sim-OPT-0.653
[02:32:46] *** Quits: pizdets (~pizdets@183.182.114.168) (Ping timeout: 250 seconds)
[02:33:57] *** Joins: pizdets (~pizdets@183.182.114.97)
[02:34:51] *** Joins: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com)
[02:36:59] *** Quits: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com) (Remote host closed the connection)
[02:37:46] *** Quits: cmburn (~cmburn@2601:441:4c00:67d:339f:5ff7:9031:96f) (Remote host closed the connection)
[02:41:02] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[02:41:06] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[02:43:46] *** Quits: magla (~gelignite@55d4c25e.access.ecotel.net) (Quit: Stay safe!)
[02:45:58] *** Joins: monkey_ (~user@190.104.116.153)
[02:49:36] <vague> LeoNerd, maybe you could just setup .ssh/config with PermitLocalCommand yes \ LocalCommand scp ~/.bashrc remotehost:~/.bashrc then remember to run bash after the files are transfered, the transfer happens after you are logged in sadly
[02:50:32] *** Joins: cmburn (~cmburn@2601:441:4c00:67d:339f:5ff7:9031:96f)
[02:55:41] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[02:56:22] *** Joins: monkey_` (~user@190.104.116.153)
[02:56:47] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:57:36] *** Quits: monkey_` (~user@190.104.116.153) (Client Quit)
[02:58:21] *** Joins: monkey_ (~user@190.104.116.153)
[02:59:47] <cmburn> I got the impression from perldoc that XS bindings retain their C bindings, is that not the case? 
[03:00:32] <LeoNerd> Wha?
[03:02:17] <Grinnz> XS is (usually) just C code, using a bunch of macros
[03:02:37] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:03:03] *** Joins: monkey_ (~user@190.104.116.153)
[03:03:30] <cmburn> Attempting to call C code from perl subroutines called by a C library that's called by a perl script  
[03:03:40] <cmburn> i'm regretting all my life choices
[03:04:16] *** Joins: monkey_` (~user@190.104.116.153)
[03:04:27] <LeoNerd> I'm struggling to follow the question: "XS bindings retain their C bindings" ... what?
[03:06:53] *** Quits: monkey_` (~user@190.104.116.153) (Client Quit)
[03:09:00] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.4)
[03:09:57] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[03:11:06] *** Quits: proller (~p@2a02:6b8:b081:8814::1:f) (Ping timeout: 268 seconds)
[03:11:37] * GumbyPAN CPAN Upload: Music-Duration-Partition-0.0706 by GENE https://metacpan.org/release/GENE/Music-Duration-Partition-0.0706
[03:12:56] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[03:15:45] *** Joins: whynot (~whynot@37.73.129.187)
[03:19:23] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[03:23:45] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[03:23:52] *** Joins: proller (~p@80.240.216.69)
[03:25:58] <cmburn> Essentially trying to run some tests in Perl, and just need to test the callbacks in the C portion of a library, so I was trying to write XS wrappers to test those callbacks
[03:26:31] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:31:38] *** Quits: ferz (~ferz@93-39-141-81.ip76.fastwebnet.it) (Ping timeout: 256 seconds)
[03:32:46] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[03:41:50] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[03:42:05] *** Joins: skraito (~skraito@user/skraito)
[03:42:15] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[03:42:29] <LeoNerd> Ok.. I mean, vauge question is still vague
[03:42:35] <LeoNerd> and doesn't really relate to the first statement
[03:44:04] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:46:15] *** Joins: proller (~p@2a02:6b8:b081:8804::1:27)
[03:47:02] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 240 seconds)
[03:49:19] *** Quits: waltman (waltman@2601:4a:701:4451:5797:609a:e52f:335f) (Quit: leaving)
[03:49:53] *** Joins: monkey_ (~user@190.104.116.153)
[03:50:31] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[03:51:01] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[03:52:44] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[03:56:56] *** Joins: fwg (~fwg@user/fwg)
[03:57:25] *** Joins: waltman (waltman@2601:4a:701:4451:b590:a3d3:7a8b:271c)
[04:04:36] <cmburn> Figured it out, but I was just talking about external linkage when compiled, sorry for being unclear :$
[04:09:57] <LeoNerd> external linkage of what, though?
[04:11:05] <cmburn> The actual C functions generated from xsubpp 
[04:11:22] <LeoNerd> Ohright; they're almost useles to anyone else, as they're basically perl pp funcs
[04:11:31] <LeoNerd> They're also usually static, because... as I said they're useless :)
[04:11:40] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:12:42] <cmburn> Yep I didn't understand that from perldoc, so i'm just doing it through perlembed
[04:14:34] *** Quits: Pali (~pali@user/pali) (Ping timeout: 250 seconds)
[04:18:08] *** Joins: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it)
[04:20:19] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:24:13] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[04:25:37] <simcop2387> https://news.ycombinator.com/item?id=29976096 cool
[04:25:38] <Paperbot_> Link title(s): [ Oh yes, thank you for spreading the good news. 'systemd-analyze security' is a f... | Hacker News ]
[04:29:44] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785)
[04:31:01] *** Quits: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:32:14] *** Joins: EvanCarroll (~ecarroll@50.222.187.218)
[04:33:38] *** Joins: travaldo (~travaldo@159.203.88.148)
[04:37:30] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[04:50:22] *** Joins: waitman (znc@irc.y0m4m4.com)
[04:53:06] *** Joins: R2robot (~R2robot@user/r2robot)
[04:55:05] <aquanight> even if an XS sub had external linkage I think it is not really trivial to just call it directly from C code. At very minimum you'd want to route through call_sv().
[04:55:28] <aquanight> and then in that case you don't even need it to be extern because you can just get the XSUB CV* from the package symbol
[04:57:34] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[05:02:33] <aquanight> that said...
[05:02:55] <aquanight> 17:41:35/BCBA6 < LeoNerd> Ohright; they're almost useles to anyone else, as they're basically perl pp funcs ## isn't this kindof a bad comparison since the perl pp_* operator functions are externally visible?
[05:08:43] *** Joins: monkey_ (~user@190.104.116.153)
[05:11:50] * GumbyPAN CPAN Upload: PDL-2.068_03 by ETJ https://metacpan.org/release/ETJ/PDL-2.068_03
[05:13:22] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[05:16:21] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:29:39] *** Joins: fwg (~fwg@user/fwg)
[05:36:53] * GumbyPAN CPAN Upload: Task-MusicBundle-0.1905 by GENE https://metacpan.org/release/GENE/Task-MusicBundle-0.1905
[05:47:19] *** Joins: monkey_ (~user@190.104.116.153)
[05:47:32] *** Joins: monkey_` (~user@190.104.116.153)
[05:47:46] *** Quits: monkey_` (~user@190.104.116.153) (Remote host closed the connection)
[05:47:58] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:11:15] *** Joins: xenial-user10 (~androirc@20014C4C17E1D20038FB1EEFD56FB32E.catv.pool.telekom.hu)
[06:12:15] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Remote host closed the connection)
[06:13:47] *** Joins: jmdaemon (~jmdaemon@142.207.76.198)
[06:15:18] *** Quits: jmdaemon (~jmdaemon@142.207.76.198) (Changing host)
[06:15:18] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:15:40] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[06:16:54] *** Quits: cmburn (~cmburn@2601:441:4c00:67d:339f:5ff7:9031:96f) (Quit: Leaving.)
[06:21:15] *** Joins: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769)
[06:21:19] *** Joins: frost (~frost@user/frost)
[06:25:38] *** Quits: whynot (~whynot@37.73.129.187) (Quit: Lost terminal)
[06:26:32] *** Quits: Su-Shee (~Susanne@p5089439a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:26:59] * GumbyPAN CPAN Upload: PLS-0.898 by MREISNER https://metacpan.org/release/MREISNER/PLS-0.898
[06:27:52] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[06:28:41] *** Joins: Su-Shee (~Susanne@p4ffc7b08.dip0.t-ipconnect.de)
[06:30:03] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[06:33:37] *** Quits: EvanCarroll (~ecarroll@50.222.187.218) (Ping timeout: 240 seconds)
[06:37:08] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20038FB1EEFD56FB32E.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[06:39:20] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[06:52:02] * GumbyPAN CPAN Upload: Text-FrontMatter-YAML-1.00 by VITAHALL https://metacpan.org/release/VITAHALL/Text-FrontMatter-YAML-1.00
[07:04:20] <mmlj4> how can I make Mechanize only use IPv4 ?
[07:04:37] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[07:06:54] <v`> https://twitter.com/Telegraph/status/1483844518067806216
[07:06:54] <Paperbot_> The Telegraph (@Telegraph) 10h46m ago: ✈️ British Airways has begun cancelling flights to America over concerns signals from 5G mobile phone masts could endanger the lives of passengers https://www.telegraph.co.uk/business/2022/01/19/british-airways-cancels-us-flights-5g-safety-fears/?utm_content=telegraph&utm_medium=Social&utm_campaign=Echobox&utm_source=Twitter#Echobox=1642610833
[07:06:57] <v`> eesh
[07:06:59] <v`> sorry
[07:07:12] <v`> i guess it thought the link would get shortened
[07:07:18] <v`> didn't mean to eye-pollute
[07:07:31] <v`> s/it/i
[07:08:22] <v`> The UK flag carrier has been forced to axe “a handful” of Boeing 777 services after it emerged that 5G signals could interfere with cockpit altimeters, which measure the aircraft’s height
[07:09:54] <zgu> 5G!!
[07:10:50] *** Quits: gko` (~user@2400:8902::f03c:91ff:fe70:e605) (Quit: ERC (IRC client for Emacs 27.2))
[07:12:31] *** Joins: gko (~user@user/gko)
[07:12:34] <zgu> how is the 5G interfering with the air pressure though?
[07:13:49] <xenu> they use radio waves to measure it
[07:14:04] <xenu> er
[07:14:17] <xenu> it was altitude, not air pressure
[07:15:36] <zgu> oh maybe it's the radar altimeters
[07:15:50] <jaguart> I heard that the air-pressure in the cabin rises quickly when the altitude decreases rapidly - mostly methane apparently
[07:16:46] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[07:17:06] * GumbyPAN CPAN Upload: WebService-AcousticBrainz-0.0601 by GENE https://metacpan.org/release/GENE/WebService-AcousticBrainz-0.0601
[07:19:25] <zgu> https://l.perl.bot/p/dun2ad
[07:19:26] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[07:19:35] <zgu> yeah it's gotta be the radar altimeter
[07:22:12] <zgu> https://arstechnica.com/tech-policy/2022/01/faa-clears-62-of-us-planes-for-low-visibility-landings-amid-5g-rollout/ "AT&T and Verizon are deploying 5G on C-band frequencies between 3.7 GHz and 3.8 GHz this year." "The radio altimeters used to determine airplane altitudes rely on spectrum from 4.2 GHz to 4.4 GHz."
[07:22:12] <Paperbot_> Link title(s): [ FAA clears Boeing 777 and other planes after 5G warning halted some flights | Ars Technica ]
[07:24:21] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[07:27:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:27:22] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:27:22] *** finn_elija is now known as FinnElija
[07:37:08] * GumbyPAN CPAN Upload: Lang-HL-0.33 by RAJ https://metacpan.org/release/RAJ/Lang-HL-0.33
[07:37:08] * GumbyPAN CPAN Upload: Lang-HL-Export-0.16 by RAJ https://metacpan.org/release/RAJ/Lang-HL-Export-0.16
[07:38:53] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:40:45] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:49:47] *** Joins: SpiceMan (~Don_Spice@zaq31fa4c95.rev.zaq.ne.jp)
[07:50:03] *** Quits: SpiceMan (~Don_Spice@zaq31fa4c95.rev.zaq.ne.jp) (Changing host)
[07:50:03] *** Joins: SpiceMan (~Don_Spice@user/SpiceMan)
[07:59:09] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[07:59:31] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[08:00:52] *** Joins: deadmarshal (~deadmarsh@95.38.3.145)
[08:07:31] *** Quits: laslmtdwbcs^ (~laslmtdwb@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[08:12:02] *** Quits: madduck (~madduck@user/madduck) (Ping timeout: 250 seconds)
[08:13:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[08:13:45] *** Joins: Martchus_ (~martchus@dynamic-077-009-120-027.77.9.pool.telefonica.de)
[08:13:46] *** Quits: Martchus (~martchus@2a01:c22:7b7f:ff00:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[08:17:48] *** Quits: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it) (Ping timeout: 256 seconds)
[08:18:49] *** Joins: madduck (~madduck@user/madduck)
[08:26:14] *** Joins: jmdaemon (~jmdaemon@142.207.63.195)
[08:28:49] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[08:30:03] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:32:49] <gordonfish> It's hard to believe that they once tried to remake Knight Rider with K.I.T.T. as a Mustang..
[08:34:32] *** Joins: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it)
[08:35:01] *** Joins: frost (~frost@user/frost)
[08:37:07] *** Joins: skraito (~skraito@user/skraito)
[08:37:15] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[08:37:53] *** Quits: defjam (~eb0t@90.203.120.248) (Read error: Connection reset by peer)
[08:43:42] *** Joins: defjam (~eb0t@90.209.247.249)
[08:50:55] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:57:28] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 256 seconds)
[08:58:26] *** Quits: SpiceMan (~Don_Spice@user/SpiceMan) (Quit: WeeChat 2.8)
[08:59:43] *** Joins: SpiceMan (~Don_Spice@zaq31fa4c95.rev.zaq.ne.jp)
[08:59:55] *** Quits: SpiceMan (~Don_Spice@zaq31fa4c95.rev.zaq.ne.jp) (Changing host)
[08:59:55] *** Joins: SpiceMan (~Don_Spice@user/SpiceMan)
[09:03:10] *** Quits: deadmarshal (~deadmarsh@95.38.3.145) (Ping timeout: 250 seconds)
[09:06:18] * GumbyPAN CPAN Upload: App-DocKnot-7.01 by RRA https://metacpan.org/release/RRA/App-DocKnot-7.01
[09:10:14] *** Joins: deadmarshal (~deadmarsh@95.38.3.145)
[09:10:37] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:e974:656b:a40a:b91a) (Ping timeout: 240 seconds)
[09:11:04] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:13:58] *** Quits: jmdaemon (~jmdaemon@142.207.63.195) (Changing host)
[09:13:58] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:25:44] *** Joins: vanessa (~annada@103.160.128.7)
[09:31:14] *** Joins: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi)
[09:34:08] *** Joins: frost (~frost@user/frost)
[09:35:37] *** Quits: japh (~scp1@user/japh) (Ping timeout: 240 seconds)
[09:35:56] *** Joins: japh (~scp1@user/japh)
[09:37:33] *** Joins: judabuda (kowbunga@thunderirc.net)
[09:48:29] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[09:48:33] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Read error: Connection reset by peer)
[09:49:32] *** Quits: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:50:00] *** Joins: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi)
[09:50:09] *** Joins: diskin (~diskin@87.117.54.105)
[09:50:34] *** Quits: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:50:42] *** Joins: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi)
[09:50:47] *** Quits: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:51:15] *** Joins: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi)
[09:57:17] *** Quits: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:57:27] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[09:57:46] *** Joins: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi)
[09:58:22] *** Joins: koo5_ (~quassel@51.140.155.227)
[09:59:01] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[09:59:05] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:02:18] *** Joins: ovid__ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[10:03:02] *** Quits: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[10:05:34] *** Quits: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[10:08:51] *** Joins: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi)
[10:09:48] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:14:08] *** Quits: mattil (~mattil@d5hyc-gn1f5kxgc6ypy-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[10:20:26] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[10:20:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:29:55] *** Joins: jmd_ (~jmdaemon@142.207.120.123)
[10:30:42] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[10:30:59] *** Joins: ufobat (~martin@dynamic-077-004-046-204.77.4.pool.telefonica.de)
[10:31:28] * GumbyPAN CPAN Upload: qq-0.05 by RAJ https://metacpan.org/release/RAJ/qq-0.05
[10:32:52] *** Quits: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it) (Ping timeout: 250 seconds)
[10:36:48] *** Joins: jplesnik (~jplesnik@83.240.61.101)
[10:37:38] *** Quits: jmd_ (~jmdaemon@142.207.120.123) (Quit: ZNC 1.8.2 - https://znc.in)
[10:37:58] *** Joins: jmdaemon (~jmdaemon@142.207.120.123)
[10:39:33] *** Joins: martinus__ (~martin@127.59.202.77.rev.sfr.net)
[10:40:44] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:52:09] *** Joins: R2robot (~R2robot@user/r2robot)
[10:53:14] *** Joins: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it)
[11:01:42] *** Dreadnaught is now known as Kulrak
[11:13:11] *** Joins: diskin_ (~diskin@87.117.48.146)
[11:13:11] *** diskin is now known as Guest6126
[11:13:11] *** Quits: Guest6126 (~diskin@87.117.54.105) (Killed (strontium.libera.chat (Nickname regained by services)))
[11:13:11] *** diskin_ is now known as diskin
[11:18:24] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[11:21:21] *** Quits: deadmarshal (~deadmarsh@95.38.3.145) (Ping timeout: 268 seconds)
[11:24:48] *** Joins: tobybl (~tobybl@248.195.115.87.dyn.plus.net)
[11:30:33] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:30:36] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[11:36:36] * GumbyPAN CPAN Upload: Sim-OPT-0.663 by GLBRUNE https://metacpan.org/release/GLBRUNE/Sim-OPT-0.663
[11:41:05] *** Quits: capn (~capn@user/capn) (Ping timeout: 268 seconds)
[11:41:47] *** Joins: capn (~capn@user/capn)
[11:45:00] *** Joins: art1 (~romeyke@p200300ccdf07e0003bb4d7b754752223.dip0.t-ipconnect.de)
[11:45:56] *** Quits: Croran (~Croran@71.231.214.173) (Quit: leaving)
[11:47:25] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:47:40] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:48:38] *** Joins: fwg (~fwg@user/fwg)
[11:52:40] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[11:52:40] *** Quits: diskin (~diskin@87.117.48.146) (Killed (calcium.libera.chat (Nickname regained by services)))
[11:52:40] *** diskin_ is now known as diskin
[11:52:57] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[11:53:58] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:54:00] *** Joins: frost (~frost@user/frost)
[11:55:40] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[11:59:03] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[12:00:47] *** Joins: furrymcgee (~devuan@cgn-89-1-211-103.nc.de)
[12:01:42] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 250 seconds)
[12:07:07] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (Ping timeout: 256 seconds)
[12:14:08] *** Joins: choroba (~E.Choroba@88.146.255.106)
[12:14:32] *** Joins: Croran (~Croran@71.231.214.173)
[12:14:45] *** Joins: haj (~haj@95.91.235.152)
[12:14:51] <bkhl> So I have a thing where I want to have the equivalent of -MInline=info, but rather do it in the script itself, how would I do that without having to make any changes to all the dependent modules that actually use the module?
[12:15:19] <bkhl> Can't add it to hasbang because we already used up the argument allowed there.
[12:15:40] <bkhl> (Also not sure if it will always be run through the hashbang.)
[12:15:52] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[12:17:18] *** Quits: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com) (Ping timeout: 250 seconds)
[12:18:18] <choroba> Change the import sub in the module?
[12:18:44] <bkhl> It's not in the same module, I want it to affect the behaviour in various imported modules.
[12:18:51] *** Joins: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com)
[12:18:54] <bkhl> (The script I'm editing is an in-house test runner)
[12:19:50] <bkhl> But if I just import it in the "top level" script too and add parameters there those will take effect in the later imported modules, even though they also have their own configuration blocks?
[12:24:30] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:26:40] <Adura> Uh... modify the PERL5OPT env var?
[12:36:37] *** Joins: tejr (~tejr@user/tejr)
[12:37:26] <bkhl> Will that take effect even if I do it after starting the script?
[12:37:58] <Adura> You'd probably have to use system.
[12:38:58] *** Joins: Pali (~pali@user/pali)
[12:40:00] <bkhl> Oh, nvm, can smash the options together in the hashbang
[12:40:04] <bkhl> -wMInline=info
[12:40:19] <Adura> Well, good!
[12:40:23] <bkhl> At least that doesn't give an error.
[12:40:31] <bkhl> So should be fine until I need another -M I guess
[12:40:57] <Adura> eval: say 'Hello'; $ENV{PERL5OPT} = '-MO=Deparse'; system {perl} 'perl', '-E', 'say q(World!)';
[12:40:59] <perlbot> Adura: Unquoted string "perl" may clash with future reserved word at (IRC) line 1. Hello -e syntax OK use feature 'current_sub', 'bitwise', 'evalbytes', 'fc', 'postderef_qq', 'say', 'state', 'unicode_strings', 'unicode_eval'; say 'World!'; 
[12:41:11] <Adura> eval: say 'Hello'; $ENV{PERL5OPT} = '-MO=Deparse'; system {'perl'} 'perl', '-E', 'say q(World!)';
[12:41:13] <perlbot> Adura: Hello -e syntax OK use feature 'current_sub', 'bitwise', 'evalbytes', 'fc', 'postderef_qq', 'say', 'state', 'unicode_strings', 'unicode_eval'; say 'World!'; 
[12:41:19] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:41:41] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[12:41:42] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[12:45:41] <bkhl> Odd, gives an error when I do it on the hasbang line:
[12:45:58] <bkhl> > Too late for "-MInline=info" option at /tmp/testscript.pl line 1.
[12:46:43] <Adura> What's the issue with use Inline 'info'?
[12:47:09] <bkhl> Will that propagate to when other modules import it with their own options.
[12:47:20] <bkhl> I guess I'll try and find out.
[12:50:09] <bkhl> Hm, yeah, seems to work so far.
[12:50:48] <bkhl> Well, my original question was really if there's any unexpected behaviour with "inheritance" of these 'use' configuration options that I should be aware of.
[12:53:03] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:59:13] <vague> bkhl, about -w in shebang, https://perldoc.perl.org/warnings#What's-wrong-with-w-and-%24%5EW
[12:59:13] <Paperbot_> Link title(s): [ warnings - Perl pragma to control optional warnings - Perldoc Browser ]
[13:01:37] <bkhl> vague, there's literally thousands of scripts in this project using the perl -w thing, so that I'll leave for a rainy day.
[13:01:59] <bkhl> OK, not literally thousands actually but it's betweeen 1000 and 2000. :-)
[13:02:49] <bkhl> Many of them probably never used anymore, but that's a third matter for multiple rainy days.
[13:05:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:21:37] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 240 seconds)
[13:28:12] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[13:29:53] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[13:30:03] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[13:36:50] *** Quits: hethw (~heth@46.238.32.56) (Ping timeout: 256 seconds)
[13:47:17] *** Quits: furrymcgee (~devuan@cgn-89-1-211-103.nc.de) (Ping timeout: 240 seconds)
[13:50:43] *** Joins: hethw (~heth@85.14.7.247)
[13:53:14] <Altreus> We make changes like that to keep people in jobs :D
[13:53:56] <choroba> removing -w from the first line of a script is a one-liner :)
[13:53:58] <Altreus> I would assume that -M is equivalent to use in main, and so is lexically scoped to main
[13:54:14] *** Joins: alex11 (~alex11@user/alex11)
[13:54:18] <Altreus> choroba: yeah but then activating warnings correctly is probably a bit harder
[13:57:42] *** Joins: furrymcgee (~devuan@cgn-89-1-211-103.nc.de)
[13:58:39] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:03:22] <japh> how can I get a list of all the unused subroutines in a very large web application?
[14:03:47] <japh> https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitUnusedPrivateSubroutines like this but for all subroutines
[14:03:48] <Paperbot_> Link title(s): [ Perl::Critic::Policy::Subroutines::ProhibitUnusedPrivateSubroutines - Prevent unused private subr... ]
[14:03:50] <Altreus> NYTProf?
[14:04:14] *** Quits: jmdaemon (~jmdaemon@142.207.120.123) (Changing host)
[14:04:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[14:04:15] <Altreus> Without running it and paying attention you can't, because Perl is unreasonable
[14:04:38] *** Joins: Darkcoal (~user@130.164.146.159)
[14:05:14] <japh> hmm
[14:12:23] <Altreus> same reason I couldn't figure out where a method was being called: it was my $method = "something_${type}_something"
[14:12:35] <Altreus> can't find that callsite until runtime
[14:15:44] <bkhl> choroba, I'm more concerned about sticking use warning into all of them in some way that won't screw anything up.
[14:16:04] <bkhl> Obviously not super difficult either but you know …
[14:17:06] <choroba> well, run the oneliner, git will tell you what files to edit :)
[14:19:41] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[14:22:09] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[14:22:10] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[14:24:27] *** Joins: frost (~frost@user/frost)
[14:25:53] <Altreus> 1964 files changed
[14:26:37] <Altreus> perl -pi -e'print "use warnings;\n$_" if $. == 2'
[14:26:43] <Altreus> :D
[14:26:52] <Altreus> wait
[14:26:57] <Altreus> without the $_ cos you get that anyway
[14:28:01] <japh> is that your work codebase? :p
[14:28:59] <Altreus> no I was just offering a big number :)
[14:29:21] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[14:30:13] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:32:04] *** Quits: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[14:33:01] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[14:36:19] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[14:36:20] *** Quits: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[14:40:31] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:295b:27c3:87b1:2b8f)
[14:43:42] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[14:49:39] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:54:51] *** Quits: lopid (~lopid@user/lopid) (Ping timeout: 256 seconds)
[14:55:30] *** Joins: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it)
[14:56:00] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[14:57:32] *** Joins: lopid (~lopid@user/lopid)
[15:04:33] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94)
[15:07:26] <Altreus> er, does b postpone subname not accept a FQ subname? :x
[15:14:08] <Altreus> maybe it doesn't work if it's already compiled
[15:31:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[15:33:28] <LeoNerd> [OT] Bah.. Is it just me, or is the ubifi AP management software a total disaster?
[15:34:13] <El_Che> compared to what?
[15:34:23] <LeoNerd> I have one of those fancy white disc APs with the green ring. The AP itself is lovely, but the management software that runs on a server is terrible. A few months ago it ate all my disk space, it almost permanently spins a CPU core and tonnes of RAM running some mongodb thing, and this morning it had forkbombed the server into a server load of 2700% and I had to reboot the box
[15:34:27] <LeoNerd> compared to.. not having anything
[15:34:33] <LeoNerd> I don't know why it needs it. Most APs don't
[15:34:50] <El_Che> I run it in a container
[15:34:54] <El_Che> no problems so far
[15:34:59] <xq> what is the recommended mechanism of parsing and comparing dotted decimal versions? (not Perl versions)
[15:35:05] <El_Che> and you don´t need it to operate
[15:35:11] <El_Che> just to make changes
[15:35:29] <LeoNerd> xq: That'd hugely depend on the rules of your versioning system. For really simple dotted-decimals you can likely get away with  split m/\./
[15:35:40] <LeoNerd> For more complex stuff like debian versions they probably have a dedicated module for doing that
[15:35:57] <LeoNerd> El_Che: yeah; I've stopped it for now and the AP seems to run fine. Maybe I'll just leave it off
[15:36:07] <Altreus> LeoNerd: is this the software that's a Java app that you have to run somewhere so that you can connect to the network it's on?
[15:36:33] <LeoNerd> No, it's the Java software that spins a mongodb database to keep device stats and all sorts for *managing* the AP
[15:36:36] <Altreus> It took me a good half an hour to figure out what bloody port the damn thing ran on
[15:36:40] <LeoNerd> As a plain ethernet AP it runs fine autonomously
[15:36:42] <El_Che> LeoNerd: you can run it on the cloud@ubiqui, but I don't trust that
[15:36:53] <Altreus> oh
[15:37:20] <Altreus> Cos I have these UFOs on my wall and I had to run this software so I could tell my edge router x to use them ...
[15:37:27] <Altreus> even though the router already has software on it
[15:37:48] <Altreus> I'm a little perplexed that something called unifi hasn't unified its software :P
[15:37:51] <El_Che> I run it on a 5y old celeron NUC (the cheapeas I can find) amd it eats around 1-2% cpu
[15:38:09] <Altreus> I have a laptop it runs on, so I have to get the laptop out if I want to configure anything!
[15:38:18] <Altreus> luckily I don't - 2 APs is more than enough
[15:38:37] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Ping timeout: 240 seconds)
[15:39:21] <El_Che> it's nice to see whoś connected at what speed and see if there is any problem etc
[15:39:58] <Altreus> oh is that where that is
[15:40:21] *** Quits: proller (~p@2a02:6b8:b081:8804::1:27) (Ping timeout: 268 seconds)
[15:40:21] <Altreus> I was trying to figure out issues a while ago and the interface on the router looks like it can give me the information but I couldn't figure out how
[15:40:56] <El_Che> you can also scan the area to pick the best frequencies etc
[15:46:08] <El_Che> the info is nice enough for me to keep it running
[15:46:24] <El_Che> (again, in a container not using much resources)
[15:46:36] <El_Che> oh I also configured it to send logs to a syslog server
[15:46:43] <El_Che> that's gold for debugging
[15:46:57] <El_Che> (and the openwrt router as well)
[16:00:21] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[16:05:38] *** Quits: veesh (~veesh@89.237.99.29) (Ping timeout: 268 seconds)
[16:06:12] *** Joins: veesh (~veesh@89.237.101.151)
[16:11:46] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[16:15:25] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (Client Quit)
[16:15:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[16:17:07] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[16:18:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[16:19:07] * mst takes fat fingering and killing his irssi as an opportunity to RETVRN
[16:19:28] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:20:59] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[16:21:21] *** ChanServ sets mode: +o mst
[16:21:29] *** mst changes topic to 'No pasting, paste to https://l.perl.bot/#perl | perl-5.34.0 released! https://bit.ly/342Xxw8 | https://perl7faq.grinnz.com | Channel rules (diff mgmt): https://bit.ly/3fxtuDv | Docs: https://perldoc.perl.org | Module Search: https://metacpan.org | TPRC 2021 https://youtube.com/playlist?list=PLA9_Hq3zhoFzMAS-IYBS8aLyfCh0k9hej'
[16:21:34] *** mst sets mode: -o mst
[16:23:11] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[16:23:52] <daemon> welcome back mst, thought you had given up on libera :)
[16:25:14] * mst was just chilling for a while
[16:25:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:25:40] <LeoNerd> I thought Sunday was the chill day
[16:26:03] <LeoNerd> If it's good enough for the Hungry Caterpillar, Craig David, and God.
[16:26:12] <mst> sunday is the sabbath
[16:26:15] <mst> wherein we MOSH
[16:26:50] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[16:26:50] <LeoNerd> https://twitter.com/martindoyleit/status/1363392381945536513 -- context
[16:26:50] <Paperbot_> Martin Doyle (@MartinDoyleIT) 333d5h ago: God, Craig David and The Very Hungry Caterpillar: A Timetable
[16:31:42] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[16:34:58] *** Joins: HvszrStykp (~X@81.171.62.86)
[16:36:26] *** jercos_ is now known as jercos
[16:37:04] *** Joins: proller (~p@2a02:6b8:0:40c:1ed0:ad16:fa54:185d)
[16:41:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:44:38] <El_Che> mst: if you want support, please post the code
[16:44:44] <El_Che> (rules for newbies)
[16:45:42] <mst> ... bastard :D
[16:46:06] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[16:47:54] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:51:56] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[16:52:32] *** Joins: henry40408 (~henry4040@175.181.155.165)
[16:53:10] <bkhl> Anyone know if it's possible to get a variable with references to all registered END blocks globally?
[16:53:58] <mst> bkhl: why?
[16:54:02] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 256 seconds)
[16:54:37] <bkhl> I've got a test runner loading tests from a large project and I think some module somewhere has an END block that's messing it up for everyone else.
[16:54:51] <mst> why do you think that?
[16:54:54] <bkhl> But I can't find any by grepping that I think sensibly should have been loaded
[16:55:02] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:55:08] <bkhl> Because the Perl process gets a return code of -1 for no discernible reason
[16:55:38] <mst> write your own END block that dumps 'values %INC' to see what actually -was- loaded?
[16:55:50] <alh> perl -d:Trace (if it's small enough) should show you the last thing executed (You need Devel::Trace)
[16:56:07] <bkhl> Both helpful ideas, thanks.
[16:56:19] <aquanight> sweval: END { my $x = "test"; } use B; B::end_av->object_2svref
[16:56:21] <perlbot> aquanight: [undef]
[16:56:28] <bkhl> Suspect it's not small enough for trace, but we'll see.
[16:57:31] <aquanight> sweval: END { my $x = "test"; } use B; B::end_av->object_2svref; END { my $q = "fart"; }
[16:57:33] <perlbot> aquanight: [undef,undef]
[16:57:59] <aquanight> don't know why they're 'undef' like that, but if nothing else you can check B::end_av
[16:58:23] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:9dce:76e7:4731:23dd)
[16:58:29] <alh> Something like use B; my @e = B::end_av->ARRAY; for my $e (@e) { print "FROM: " . $e->FILE . "\n" }
[17:00:00] <mst> bkhl: another moderately evil trick would be to use Variable::Magic to try and spot $? being set in an END block
[17:00:52] <aquanight> wait hang on
[17:01:13] <aquanight> how would the "perl process" get a return code of -1? process exit status are unsigned integers
[17:01:53] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:02:12] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[17:02:36] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[17:03:46] <mst> aquanight: -1 is 255
[17:04:30] <aquanight> and it would be really weird to report it as -1 though
[17:05:42] <alh> sweval: use B; use B::Deparse; END { print "oh no"; } END { print "Hi\n" } my $d = B::Deparse->new; for my $e (B::end_av->ARRAY) { print $d->deparse_sub($e) . "}\n" }
[17:05:44] <perlbot> alh: { 	BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x00\x04\x50\x01\x01\x00\x55"} use strict; use feature 'current_sub', 'bitwise', 'defer', 'evalbytes', 'fc', 'isa', 'declared_refs', 'postderef_qq', 'refaliasing', 'say', 'signatures', 'state', 'unicode_strings', 'unicode_eval'; no feature 'bareword_filehandles', 'in... [Output truncated. http://perl.bot/p/88ix1g ]
[17:05:49] <alh> haha, warning bits
[17:05:50] <alh> Fine.
[17:06:17] <LeoNerd> They're getting quite noisy :(
[17:06:39] <alh> There's an old task about deparsing them sensibly
[17:06:51] <alh> I took a whack at it years ago and failed sadly
[17:06:57] <alh> Could try again for the challenge though
[17:10:49] <aquanight> hmm
[17:10:58] <aquanight> simcop2387: does perlbot not announce pastes anymore?
[17:11:15] <aquanight> bkhl: https://l.perl.bot/p/2fohu2 ## this method will point to file and line number if you really need it
[17:11:15] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[17:11:34] <bkhl> aquanight, nifty.
[17:13:27] <aquanight> it's not perfect. It won't locate XSUBs that are put into END for some strange reason. And it won't find "perl subs" that are built by anything other than the perl parser.
[17:13:56] <aquanight> but these won't be actual 'END' blocks in that case
[17:15:10] <bkhl> Hopefully it's nothing that weird.
[17:17:00] <mst> famous last words
[17:19:49] <aquanight> someone would have to go to a lot of trouble for that I think
[17:22:11] *** Joins: tobybl_ (~tobybl@248.195.115.87.dyn.plus.net)
[17:22:15] * GumbyPAN CPAN Upload: UI-Various-0.14 by DORNER https://metacpan.org/release/DORNER/UI-Various-0.14
[17:25:01] *** Quits: tobybl (~tobybl@248.195.115.87.dyn.plus.net) (Ping timeout: 256 seconds)
[17:25:17] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 240 seconds)
[17:28:59] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:29:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:13] *** Joins: alex11 (~alex11@user/alex11)
[17:34:50] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[17:34:54] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:34:56] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 250 seconds)
[17:35:25] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[17:36:27] *** Joins: japh (~scp1@user/japh)
[17:36:45] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[17:42:02] *** Joins: morte_ (~user@190.104.116.153)
[17:42:11] *** Joins: mattil (~mattil@d558lb4g2rj0fsvrbd8-4.rev.dnainternet.fi)
[17:42:17] * GumbyPAN CPAN Upload: App-sizecheck-0.060 by TULAMILI https://metacpan.org/release/TULAMILI/App-sizecheck-0.060
[17:45:25] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[17:46:18] *** Quits: mattil (~mattil@d558lb4g2rj0fsvrbd8-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:47:04] *** Quits: deecat (~deecat@73.99.215.70) (Ping timeout: 250 seconds)
[17:48:54] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Quit: rwbrambler)
[17:49:45] *** Joins: mattil (~mattil@d558lb4g2rj0fsvrbd8-4.rev.dnainternet.fi)
[18:00:43] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94) (Ping timeout: 256 seconds)
[18:01:30] *** Quits: mattil (~mattil@d558lb4g2rj0fsvrbd8-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:02:03] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[18:03:06] <Altreus> The nice thing about Perl is that no matter how much effort people put into protecting you from yourself, there's always a way around it
[18:03:16] *** Quits: judabuda (kowbunga@thunderirc.net) (Changing host)
[18:03:16] *** Joins: judabuda (kowbunga@user/judabuda)
[18:04:12] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94)
[18:04:43] <LeoNerd> Perl: Sufficient Rope
[18:06:20] * GumbyPAN CPAN Upload: DateTime-Calendar-Julian-0.106_01 by WYANT https://metacpan.org/release/WYANT/DateTime-Calendar-Julian-0.106_01
[18:07:04] *** Parts: yassernasc (~yassernas@2804:29b8:505a:f33d:7937:b295:da60:ef94) ()
[18:11:20] * GumbyPAN CPAN Upload: App-DBBrowser-2.291 by KUERBIS https://metacpan.org/release/KUERBIS/App-DBBrowser-2.291
[18:14:19] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[18:16:21] <japh> okay so, that Variable::Magic module was cool. Can I setup a wizard() that will act on _every_ scalar that could possibly exist, or do I need to have the scalar ready and defined and do a  cast $foo, $wiz; on it?
[18:16:37] *** Joins: kylese (~kylese@p5dd8b201.dip0.t-ipconnect.de)
[18:17:47] <aquanight> unfortunately no I'm pretty sure you have to apply it to each scalar you want it on
[18:18:24] <japh> alright
[18:19:02] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:9dce:76e7:4731:23dd) (Ping timeout: 240 seconds)
[18:19:23] *** Joins: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com)
[18:19:45] <aquanight> or perhaps fortunately
[18:20:11] <aquanight> since, you know, you'd essentially be inserting a hook that is going to end up happening at damn near every single sequence point
[18:20:35] <aquanight> anything less than completely trivial would absolutely trash runtime performance
[18:20:59] <aquanight> in fact, you'd have the auxillary problem that perl-defined magic couldn't be executed without itself triggering the magic again
[18:21:00] <japh> sure. I just wanted to try stupid things
[18:21:23] <japh> good point
[18:22:10] <aquanight> but there's not even a C way to do it. Really the better question is "what stupid thing are you trying to do"
[18:23:00] *** Quits: SpiceMan (~Don_Spice@user/SpiceMan) (Quit: WeeChat 2.8)
[18:23:31] <mst> you could, however, walk the package stashes to cast magic on every global
[18:24:01] <japh> hmm, yeah
[18:25:21] <mst> and then recursively walk the padlists of every subroutine you find to cast magic on every lexical
[18:25:46] <aquanight> you can also apply magic to the package stash itself to detect new globals
[18:25:53] <aquanight> including new subs
[18:26:51] <aquanight> hmm.
[18:26:52] <mst> right, I implemented sigilless perl by autogenerating zero arg lvalue subs on demand via that trick
[18:27:10] <mst> foo = 1; # 'sub foo :lvalue :prototype() { $SCOPE{foo} }'
[18:27:44] <Altreus> just what the world needed
[18:27:46] *** Joins: gast0n (~g4570n@user/gast0n)
[18:28:10] *** Joins: deecat (~deecat@73.99.215.70)
[18:28:18] <Altreus> if you add braces and variable declaration to python, do they meet in the middle?
[18:28:22] <aquanight> mst: all you need then is some way to inline the sub
[18:28:43] <aquanight> sadly, :Pure won't help you there.
[18:29:19] <aquanight> actually hmm that is a question...
[18:30:22] <mst> at that point you'd be better off returning a dummy subroutine that can be recognised by a PL_check wrapper and just convert the thing back to normal padsv ops
[18:31:03] <mst> Altreus: deciding the world really didn't, in fact, need that, is why I never put it on cpan, I'm not sure I've ever exceeded my own capacity for crack that hard before or since
[18:33:55] <Altreus> It's good to have peaked
[18:34:02] <mst> well, there was the Devel::Declare implementation of TT syntax in perl that dependend on my sigilless code but thankfully for everybody I gave up on that before it really ran
[18:34:25] *** Joins: frost (~frost@user/frost)
[18:36:44] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:40:51] *** Parts: hethw (~heth@85.14.7.247) (Leaving)
[18:48:23] <aquanight> "TT syntax"?
[18:48:45] <Altreus> [% this %]
[18:48:46] <buu> template
[18:48:49] <buu> toolkit
[18:48:49] <Altreus> for people who are good at shift
[18:48:51] <corwin> Template::Tookit
[18:48:57] <corwin> Toolkit*
[18:53:19] *** Parts: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Leaving)
[18:55:55] *** Quits: mowcat (~mowcat@host86-129-162-211.range86-129.btcentralplus.com) (Remote host closed the connection)
[18:59:50] *** Quits: veesh (~veesh@89.237.101.151) (Ping timeout: 256 seconds)
[19:00:50] *** Joins: veesh (~veesh@89.237.107.142)
[19:05:38] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:06:04] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:12:20] *** Joins: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769)
[19:14:33] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[19:14:58] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:e974:656b:a40a:b91a)
[19:15:05] *** Joins: morte_ (~user@190.104.116.153)
[19:16:27] * GumbyPAN CPAN Upload: Lang-HL-0.34 by RAJ https://metacpan.org/release/RAJ/Lang-HL-0.34
[19:17:42] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Quit: Leaving)
[19:19:54] *** Joins: magla (~gelignite@55d4ea14.access.ecotel.net)
[19:20:51] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[19:39:16] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[19:41:29] * GumbyPAN CPAN Upload: FCGI-Buffer-0.17 by NHORNE https://metacpan.org/release/NHORNE/FCGI-Buffer-0.17
[19:43:28] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Quit: This computer has gone to sleep)
[19:43:51] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[19:57:49] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[19:58:01] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 256 seconds)
[20:02:33] *** Quits: jplesnik (~jplesnik@83.240.61.101) (Quit: Leaving)
[20:06:51] *** Joins: diskin (~diskin@87.117.48.146)
[20:14:00] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[20:16:21] <vanfanel64> template toucan ? :)
[20:17:32] *** Joins: gce108 (~gce@user/gce108)
[20:18:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[20:19:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769) (Ping timeout: 240 seconds)
[20:19:47] *** Joins: HvszrStykp (~X@81.171.62.86)
[20:21:41] <mst> vanfanel64: I DON'T KNOW HOW TO CAN
[20:22:30] <rindolf> mst: can can then
[20:22:56] <mst> eval: mst->can('can')
[20:22:58] <perlbot> mst: Unquoted string "mst" may clash with future reserved word at (IRC) line 1. sub { "DUMMY" }
[20:23:43] * emanuele6 queues CAN - Paperhouse
[20:24:18] <rindolf> mst: it worked for https://en.wikipedia.org/wiki/Sarah_Bernhardt ;) ♥
[20:24:19] <Paperbot_> Link title(s): [ Sarah Bernhardt - Wikipedia ]
[20:25:18] <LeoNerd> With my PSC hat on: I promise not to implement a keyword called `mst`
[20:25:24] <bingos> Can Caan or Khan can-can?
[20:26:10] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.10 [SeaMonkey 2.53.10.2/20211221193415])
[20:26:16] <mst> ... I still get cognitive dissonance from seeing your nick in all lower case :P
[20:26:17] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[20:27:36] <El_Che> he's a cheap knock-off
[20:29:16] <ilmari> could be worse, could be BingOS
[20:29:21] <rindolf> LeoNerd: heh... i wouldn't mind "perldoc -f fluttershy" ;) 
[20:31:35] * GumbyPAN CPAN Upload: Playwright-0.018 by TEODESIAN https://metacpan.org/release/TEODESIAN/Playwright-0.018
[20:31:54] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[20:31:54] *** diskin is now known as Guest3572
[20:31:54] *** Quits: Guest3572 (~diskin@87.117.48.146) (Killed (strontium.libera.chat (Nickname regained by services)))
[20:31:54] *** diskin_ is now known as diskin
[20:32:40] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: ...)
[20:36:35] * GumbyPAN CPAN Upload: Geo-Address-Formatter-1.97 by EDF https://metacpan.org/release/EDF/Geo-Address-Formatter-1.97
[20:36:37] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 240 seconds)
[20:37:07] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[20:37:20] <El_Che> bingós
[20:38:15] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[20:40:37] <rindolf> El_Che: what about bingos ?
[20:40:42] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:41:22] <El_Che> the s is an East-European Sh sound
[20:43:32] <choroba> how is that different to the West-European Sh sound?
[20:44:07] <El_Che> it depends if it's pronounced with an East-European accent
[20:44:51] <El_Che> Miloš
[20:44:59] <El_Che>  Beneš
[20:48:52] <choroba> These two words are Czech names, and we pronounce it as "sh" in "cash"
[20:49:12] <El_Che> like in caš ?
[20:49:16] <choroba> Russian ш sounds a bit different
[20:49:32] <El_Che> I use Miloš because I heard it in Seinfeld :)
[20:49:48] <El_Che> d
[20:53:21] <gordonfish> El_Che: That sounds fimiliar to me too, from Seinfeld
[20:53:49] <choroba> in fact, the Czech one is a voiceless postalveolar fricative, while the Russian and Polish are voiceless retroflex sibilant fricatives
[20:55:08] <choroba> ʃ versus ʂ in IPA
[20:55:14] <gordonfish> (Though Polish doesn't have that inverted carat/v diacritic)
[20:56:07] <rindolf> https://en.wikipedia.org/wiki/Shibboleth#Origin
[20:56:07] <Paperbot_> Link title(s): [ Shibboleth - Wikipedia ]
[20:56:09] <gordonfish> (caroncomb)
[20:56:58] <rindolf> chibboleth; schibboleth
[20:57:16] <rindolf> שיבולת
[20:57:27] <gordonfish> Trying saying that while weilding a batleth
[20:57:43] <mst> *Bat'leth
[20:58:13] <gordonfish> Indeed, thanks, couldn't remember for certain if it had that mark
[20:58:41] <cmburn> If a perl interpreter is launched from perlembed, is there a way to pass a variable from it to a regular perl program without dumping info to a tmpfile? 
[20:58:45] <mst> I apparently could but then worried I hadn't and double checked via google
[20:58:51] <mst> to avoid being hoist by my own pedantard
[20:58:53] * rindolf is a 100% pure semite
[20:59:03] <mst> cmburn: wat
[20:59:19] <gordonfish> (Fun fact, there is an episode of SG-1 where there is a bat'leth in the background in a Goa'uld base.)
[20:59:49] <mst> cmburn: so, yes, multiple ways
[20:59:55] <xenu> pass from where
[21:00:02] <mst> cmburn: for example you could set a global variable
[21:00:08] <mst> cmburn: you could even set @ARGV
[21:00:28] <mst> cmburn: or you could definie the embedded script as being required to provide a main() function and call that with arguments
[21:00:35] <rindolf> gordonfish: https://www.shlomifish.org/humour/Selina-Mandrake/indiv-nodes/selina-and-the-three.xhtml
[21:00:36] <Paperbot_> Link title(s): [ Selina Mandrake - The Slayer (Buffy Parody) - Ongoing Text - Selina and The Three ]
[21:00:45] <mst> cmburn: many possibilities, but http://trout.me.uk/data.jpg limits my ability to say which one I'd prefer
[21:01:12] *** Quits: tobybl_ (~tobybl@248.195.115.87.dyn.plus.net) (Remote host closed the connection)
[21:02:21] * genio is listening to the Bob-iverse series again. such a good first book
[21:02:21] <gordonfish> mst: That just never gets old :)
[21:03:20] <mst> genio: it is excellent but I love the murderbot diaries even more
[21:03:26] <rindolf> gordonfish: my crossovers fics are often unapologetic
[21:03:29] <mst> I find them almost as re-bingeable as discworld
[21:03:40] *** Quits: WantToHelp (~WantToHel@96.77.40.70) (Changing host)
[21:03:40] *** Joins: WantToHelp (~WantToHel@user/wanttohelp)
[21:04:00] <cmburn> so automated testing of a much larger program written mostly in C, some in perl, I wrote a shim that takes data from the C portion and builds a perl object with the relevant info, and this c program is to be called by a perl script during testing, so just wanted to get the data from A->B here
[21:04:36] <cmburn> very much a C programmer so not sure the "best" way to do so
[21:05:02] <mst> depends what shape you want your tests to be I guess
[21:05:27] <mst> if you're only running the script once, go with setting a global variable
[21:05:57] <mst> if you're running the same perl test on multiple cases, a subroutine called with arguments would seem saner
[21:06:10] *** salparad1 is now known as salparadise
[21:06:12] <cmburn> it's getting run repeatedly on cases
[21:06:15] * gordonfish just noticed there is someone named DaTa in here and hopes they have mention highlighting disabled
[21:06:16] *** Parts: Yaakov (sid19863@user/Yaakov) ()
[21:06:17] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:06:25] <genio> I did like the murderbot series as well. I need to re-visit that series as I think I've forgotten a lot about it
[21:06:32] <mst> though the other way you could do this is to embed the C portion into an XS module and call it from perl
[21:06:52] <cmburn> so how would I "pass" it back out from the embedded interpreter?
[21:08:04] <cmburn> oh, trust me, I tried XS, problem is I have to deal with a bunch of callbacks which XS is not friendly towards
[21:08:40] <mst> it's not entirely unfriendly, there are plenty of XS module IO loops on CPAN
[21:09:21] <LeoNerd> Possibly even a few written by people who aren't even me ;)
[21:09:23] <mst> note for the record I am spectacularly bad at C so if -I- tried it I'd just end up with a segfault generator, but that's what happens every time I try and write C and you're presumably less incompetent at it
[21:09:28] <genio> cmburn: Calling callbacks is doable, just takes a bit of learning to get it.
[21:12:33] <cmburn> well, already wrote the C bindings with perlembed, is there a significant advantage to doing it in XS instead? 
[21:13:26] <mst> cmburn: I thought you were saying you had perl -> C -> perl here ... or is this a perl program calling the C binary which then embeds perl?
[21:13:56] *** Joins: rgrinberg (~textual@2806:101e:7:2b:35cd:febc:a65a:3a4f)
[21:14:29] <mst> sorry for the question cascade, I want to be sure I actually understand the problem so I don't suggest something based on the wrong mental model and lead you down a path to suckage
[21:14:55] <cmburn> It's a perl program calling a C binary that's got an embedded perl
[21:15:48] <cmburn> Bindings currently trick the C program into thinking it's passing around pointers to C structs, but for the testing part it's actually passing around Perl SV* variables
[21:17:01] <alh> Do you need to pass anything more than a string? 
[21:18:32] <mst> cmburn: for ease of debugging I would suggest have the C program emit the relevant data as YAML
[21:18:32] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Ping timeout: 250 seconds)
[21:19:41] <cmburn> yeah, i'm passing around a bunch of objects and a string would not be fun to try to pack full of data since there's a pretty wide scope of what's "allowed"
[21:20:11] <mst> right, so YAML providing a human readable format that can tag things with classes should work nicely
[21:20:27] <mst> (some people claim YAML is also human writeable but I continue to roll to disbelieve that one)
[21:20:29] <cmburn> mst: yeah that's what I figured I would have to do, was just wondering if there was some ancient perl wisdom I hadn't heard 
[21:21:05] <mst> cmburn: I mean, Storable or Sereal would be acceptable binary encodings but in the name of debugging without wanting to stab yourself in the scrotum with a rusty fork I'd go with YAML
[21:21:52] <mst> the closest to ancient perl wisdom available here would be "turn it into an XS module and then you could just set or return a variable" but I'm not entirely sure that would actually be easier for you here
[21:22:30] <alh> You said you're using perlembed - so I'd think you can take whatever data you have and tuck the data into perl. I'm kinda confused about what you're trying and where you're having trouble 
[21:22:54] <cmburn> could I embed a perl interpreter in an XS function and return it from that? 
[21:23:26] <cmburn> alh: essentially I'm at the point I have perl->c->perl->c, and I'm trying to pass data from the second perl to the first perl
[21:23:30] <mst> cmburn: why not have the XS function pass the perl interpreter you want to use to the C code
[21:24:03] <cmburn> ... I didn't even know I could pass the whole perl interpreter
[21:24:17] <cmburn> I tried googling something to that effect but nothing of use came up
[21:24:24] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[21:25:09] <cmburn> that would certainly solve my problems, can I still access it through the standard dTHX macro in C?
[21:25:13] <mst> LeoNerd: actual expertise required please
[21:25:27] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[21:25:29] * mst does not trust himself to answer this question correctly
[21:25:48] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[21:25:48] <alh> does this look like, your first perl is using an XS module (C) that's... embedding a perl interpreter which is using more xs?
[21:25:53] <alh> I don't quite understand your model here
[21:26:09] <alh> Like, in perlembed, you can serialize C to perl and back fairly easily. I don't understand where your upper perl resides in relation to this though
[21:26:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[21:26:56] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:27:38] <alh> Right, perl program calling a c binary with embedded perl.... That sounds like my $output = `embedded-c-program`. So you'd have to pass data around through files or sockets or output?
[21:27:55] <mst> alh: the C code under test is using perl code via perlembed to emulate some components thereof, the top level test driver is also perl code
[21:28:01] <mst> currently they're two different processes
[21:28:08] <cmburn> ^^^^ that's it
[21:28:17] <alh> And you ... want them to be one process?
[21:28:23] <mst> but part of the reason for that is that cmburn hadn't figured out how to make them share an interpreter
[21:29:07] <mst> hence why if we can make -that- work I think making them a single process gets much easier
[21:30:00] <cmburn> Ideally yeah, I don't really care to run the entire process under the C executable since there's a lot of other stuff to be tested, and the stuff the embedded perl creates ends up being used to reference a lot of other steps along the way
[21:30:08] *** Joins: ueberall (ueberall_l@user/ueberall)
[21:30:14] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[21:30:50] <mst> cmburn: I've spent the past 15 years doing consultancy and commercial support for basically all of the perl ecosystem, I ask a lot of questions but then I build a mental model that's usually right, and frankly I'm mostly typing this to add that your answers are way easier to do that from than most of the people I'm helping for money (so thanks for bearing with me ;)
[21:30:51] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:27] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:31:54] <cmburn> I recognize I could do this in C or C++ somewhat easier, but I've got a mountain of code already and testing some of the more complex stuff in C hurts to think about
[21:32:05] <cmburn> mst: thanks for all the help :) 
[21:32:51] <cmburn> I've been called a walking edge case on many occasions so apparently that means I've at least got describing why I break stuff so much down to a T
[21:33:34] <mst> I usually get called 'edge case magnet' or 'walking destruction test'
[21:34:49] <alh> Well what you're already doing is insane
[21:34:58] <alh> So you could use https://metacpan.org/release/GSAR/PerlInterp-0.02/source/README
[21:34:59] <Paperbot_> Link title(s): [ README - metacpan.org ]
[21:35:17] <mst> or you could just aTHX the interpreter into the C code
[21:35:19] <alh> Or at least for inspiration
[21:35:40] <mst> and use that to invoke your callbacks
[21:35:43] <alh> Alternatively have your top level program be C and then you can have two interpreters there (perlembed shows how to do this)
[21:35:44] <alh> ¯\_(ツ)_/¯
[21:36:12] *** Joins: morte_ (~user@190.104.116.153)
[21:36:42] <mst> yes but we don't -want- two interpreters AFAICS
[21:36:43] * GumbyPAN CPAN Upload: Minion-10.23 by SRI https://metacpan.org/release/SRI/Minion-10.23
[21:36:52] <mst> being able to share the class bytecode between the two is a feature
[21:37:08] <cmburn> I tend to do most things the insane way to be fair
[21:37:33] <mst> I knew there was a reason I liked you on sight
[21:38:01] *** Quits: proller (~p@2a02:6b8:0:40c:1ed0:ad16:fa54:185d) (Ping timeout: 268 seconds)
[21:38:58] <mst> cmburn: oh, right, you're exactly the sort of person who might find this particular piece of fuckery useful (though please don't use it for your current problem, there are better ways)
[21:39:09] <mst> eval: {}
[21:39:10] <perlbot> mst: {}
[21:39:14] <mst> eval: ''.{}
[21:39:15] <perlbot> mst: HASH(0x560f7b353348)
[21:39:23] <mst> eval: 0+{}
[21:39:24] <perlbot> mst: 94240867318600
[21:40:33] <mst> eval: my $x = { foo => 1 }; my $address = 0+$x; use B; my $y = bless(\$address, 'B::SV'); $y->object_2svref;
[21:40:34] <perlbot> mst: {foo => 1}
[21:41:37] <mst> cmburn: because the hex value of a perl reference is actually its literal memory address, and the guts-introspecting objects of p3rl.org/B (i.e. B.pm) are just a blessed reference to a memory address ... so provided your object still exists you can use the debug print info to create a B object and ... get the real perl value back out of it
[21:42:01] <cmburn> hmm.... intriguing 
[21:42:17] *** Quits: magla (~gelignite@55d4ea14.access.ecotel.net) (Quit: Stay safe!)
[21:43:01] <mst> cmburn: if you use this for anything except "oh shit" debugging, everybody will be entitled to hate you for it, but given you're fucking around with perl to C to perl to C type stuff ...
[21:43:40] <cmburn> manually ripping the memory like that seems like playing russian roulette with a howitzer
[21:44:24] <cmburn> but i will keep that in mind when I inevitably create bizarre memory errors nobody ever intended and need to test them
[21:44:53] <mst> right, I basically only use that trick when I'm already fucked and basically it's just a question of how much debugging I can do before I either -9 the process or it fucks off into the distance on its own
[21:45:20] <mst> but you seem like the sort of person who will also get into such situations and therefore I present the evil hack in that specific spirit
[21:46:44] * GumbyPAN CPAN Upload: YAML-PP-0.031_002 by TINITA https://metacpan.org/release/TINITA/YAML-PP-0.031_002
[21:47:00] <cmburn> oh don't worry i've done some truly disgusting things with computer memory 
[21:47:13] <cmburn> it's a when not if
[21:48:33] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:49:32] <mst> cmburn: the one piece of significant C code I ever wrote that worked was actually a cpan module ... which intercepted chunks of the compilation process basically by, uh, wrapping a bunch of function pointers I noticed had been laying around and not const-ed ... and thereby managed to add custom keywords to perl, that was the first time anybody ever managed to implement a workable 'method' keyword for example
[21:50:08] <cmburn> if I called the program in XS, and gutted the "initialization" part, would dTHX then just use the perl interpreter that called the xsub?
[21:50:18] <mst> cmburn: the code was sufficiently evil that as soon as one of the perl core developers got given co-maint and looked at the code, he invented a custom keyword API for perl core just so he could kill my code with fire forever
[21:50:31] <mst> (that's how custom keywords landed in 5.14 btw)
[21:50:44] <cmburn> oddly enough the higher level languages usually lead me to the more egregious offenses
[21:51:15] <cmburn> i get so hardwired for C that I end up trying to do some things that aren't legal in them for very good reasons
[21:51:54] <mst> I ... think you're probably right that it would, but I wouldn't trust me to be right about that
[21:52:00] <mst> almost certainly worth a try though
[21:53:32] <mst> the funny part here is that "implement a core feature so mst's C code can cease to exist" ... was precisely my hoped for end game when I wrote that giant hack in the first place, so I was truly pleased by every criticism he made of the code while doing the thing I'd hoped somebody would :D
[21:54:06] <mst> oh, right, also, again for 'in extremis' situations, p3rl.org/PadWalker is very handy
[21:54:12] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:54:16] <revhippie> mst: it's like the "if you want the answer, don't ask the question -- post the wrong answer and someone will correct you" ?
[21:54:50] <cmburn> I love when policies are made specifically because I did some heinous thing to a program, makes me feel accomplished
[21:55:09] <cmburn> my foray into python when I joined a new unit at work using it for networking QA got me deemed a security risk and my network access shut off when I was trying to prove the root of a problem they  were having but didn't believe me
[21:55:20] <mst> cmburn: btw, I have actually deployed PadWalker as part of production code before now and not felt terrible about it
[21:55:22] <cmburn> to be fair, it did reproduce the problem immediately
[21:56:18] <cmburn> oh wow your coworkers must hate you
[21:56:25] <mst> we had a situation where (a) we were depending on a (very good other than this) library (b) it had a hard-coded global for something (let's pretend it was a timeout, I don't remember but it's equivalent) (c) the author had implemented said global as a 'my' variable
[21:56:44] * GumbyPAN CPAN Upload: YAML-PP-Ref-0.01_002 by TINITA https://metacpan.org/release/TINITA/YAML-PP-Ref-0.01_002
[21:56:50] <mst> so I used ->can to get a random named subroutine out of the package
[21:56:57] <mst> used closed_over() to get the outside scope
[21:57:03] <mst> and poked a higher value into the timeout
[21:57:39] <cmburn> wouldn't it have just been easier to fork it and submit a patch?
[21:58:26] <mst> consultant.
[21:59:08] *** Quits: kylese (~kylese@p5dd8b201.dip0.t-ipconnect.de) (Quit: Leaving)
[21:59:13] <mst> the customer's deployment setup was not up to the challenge of reliably deploying a patched version and not accentally reverting it while I was trying to get the patch accepted and production was on fire.
[21:59:27] <cmburn> ah, fair
[22:00:31] <cmburn> inevitably running some linux from 15 years ago and constantly breaking i'm sure
[22:00:33] <mst> note that as of a few years ago, I already wrote p3rl.org/App::opan so you can provide pinned patched dependencies if you need to integrated with the standard cpanm/carton/whatever workflow so I could probably avoid this now
[22:01:23] <mst> but at the time, "make production not on fire and be sure their systems team wouldn't accidentally reignite it" was the order of the day
[22:03:13] <aquanight> to be fair, if you put important values into file-scope lexicals, you deserve to have your shit padwalked and poked
[22:03:17] <mst> in the past five years the only time I've committed lexical pad related atrocities was when I wrote a pure perl async/await implementation so I could App::FatPacker the resulting code ( Future::AsyncAwait is far superior if you can actually install XS modules but y'know, sometimes life isn't as conducive to that as you might like )
[22:03:31] *** Parts: art1 (~romeyke@p200300ccdf07e0003bb4d7b754752223.dip0.t-ipconnect.de) ()
[22:03:54] <aquanight> s/file-scoped lexicals \K/and don't provide an API to adjust them/
[22:04:30] <aquanight> ...
[22:04:45] <aquanight> s/file-scoped lexicals\K(?=,)/ and don't provide an API to adjust them/
[22:04:56] <aquanight> there
[22:05:48] <aquanight> mst: I remember using the "bless a number value into B::xV" to create a scalar in which Scalar::Util::reftype(\$x) eq "INVLIST"
[22:06:21] <mst> I don't even know what one of those is, please explain? :D
[22:06:56] <aquanight> mst: apparently INVLIST is a legitimate scalar type, but all of the ones used by perl are static hidden variables stuffed in the regex internals as part of some unicode character class nonsense
[22:07:43] <aquanight> INVLIST -> inversion list -> basically a sorted list of integers that's good at compactly describing an integer set composed of multiple contiguous ranges
[22:08:07] <aquanight> they apparently turn up a lot in unicode crap
[22:08:25] <mst> revhippie: nobody was convinced it was a worthwhile core feature so prototyping it on CPAN was the obvious answer, three pumpkings told me it was impossible, so I spent six months reading the core C code on and off and Devel::Declare ensued - turns out it wasn't actually impossible, just the way it -was- possible was so horrific it hadn't occurred to them. I ... was not limited by this question
[22:09:22] <aquanight> LeoNerd at one point asked someone to get ref/reftype to legitimately return REFTYPE. So I did. By building the needed SV header inside a string. Then I think I used pack to get the string's C pointer as an integer, then blessed said integer into B::SV and object_2svref
[22:09:36] <aquanight> return INVLIST* god dammit I can't keyboard today apparently
[22:10:17] <aquanight> mst: I was actually very recently about to consider trying to abuse it to see if one could create a tainted scalar without -T in effect, and see if it would actually apply taint logic.
[22:10:48] <mst> cmburn: so, yeah, "edge case magnet" is kind of an archetype amongst the regulars here, welcome to #perl, please stick around, it sounds like your problems will be at least as fascinating as they are horrifying :D
[22:10:54] <aquanight> the only reason I even thought that taint logic might exist outside -T was because of that whole "taint support existing affects performance even without -T" thing that prompted #define NO_TAINT_SUPPORT
[22:11:19] <aquanight> but as it turns out
[22:11:23] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 250 seconds)
[22:11:33] <mst> I would imagine that's down to "an if statement to check if tainting is on is still overhead given how often it gets checked" ?
[22:11:40] <aquanight> while you can indeed get a tainted scalar
[22:11:52] <aquanight> you can in fact get a legitimate true from Scalar::Util::tainted f.ex
[22:12:03] <aquanight> it does not propogate, it does not trigger errors, nothing
[22:12:53] <aquanight> except you can absolutely turn tainting on after parsing has begun if you're evil.
[22:13:09] <aquanight> and then tainting will work (except you probably won't have tainted %ENV and @ARGV like you should)
[22:13:13] *** Joins: klys (~mdasoh@show.op8.us)
[22:13:51] <aquanight> mst: yeah probably.
[22:14:23] <aquanight> mst: what I find weird about it is what makes a scalar tainted is the existence of the taint magic
[22:14:48] <aquanight> so in some part I wonder why it had to be so viral
[22:15:10] <aquanight> but I guess you can't have propogation without it.
[22:15:33] <aquanight> hmm
[22:17:09] <aquanight> sweval: use Scalar::Util 'tainted'; use Inline C => q{ void foo() { TAINTING_set(TRUE); TAINT_WARN_set(FALSE); } void make_evil(SV* sv) { sv_taint(sv); } } BEGIN { foo; } my $x = 42; make_evil $x; sub bar { 3; } my $y = bar($x); [ tainted($x), tainted($y) ]
[22:17:11] <perlbot> aquanight: Bareword found where operator expected at (IRC) line 1, near "q{ void foo() { TAINTING_set(TRUE); TAINT_WARN_set(FALSE); } void make_evil(SV* sv) { sv_taint(sv); } } BEGIN" Scalar found where operator expected at (IRC) line 1, near "make_evil $x" 	(Do you need to predeclare make_evil?) ERROR: syntax error at (IRC) line 1, near "q{ void foo() { TAIN... [Output truncated. http://perl.bot/p/wajycr ]
[22:17:23] *** Joins: xenial-user10 (~androirc@20014C4C17E1D20038FB1EEFD56FB32E.catv.pool.telekom.hu)
[22:17:27] <aquanight> sweval: use Scalar::Util 'tainted'; use Inline C => q{ void foo() { TAINTING_set(TRUE); TAINT_WARN_set(FALSE); } void make_evil(SV* sv) { sv_taint(sv); } }; BEGIN { foo; } my $x = 42; make_evil $x; sub bar { 3; } my $y = bar($x); [ tainted($x), tainted($y) ]
[22:17:28] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[22:17:35] <perlbot> aquanight: Scalar found where operator expected at (IRC) line 1, near "make_evil $x" 	(Do you need to predeclare make_evil?) ERROR: syntax error at (IRC) line 1, near "make_evil $x" 
[22:19:10] <aquanight> sweval: use Scalar::Util 'tainted'; use Inline C => q{ void foo() { TAINTING_set(TRUE); TAINT_WARN_set(FALSE); } }; use Inline C => q{ void make_evil(SV* sv) { sv_taint(sv); } }; BEGIN { foo; } my $x = 42; make_evil $x; sub bar { 3; } my $y = bar($x); [ tainted($x), tainted($y) ]
[22:19:13] <perlbot> aquanight: [1,0]
[22:19:29] <aquanight> oh interesting
[22:19:41] <aquanight> sweval: use Scalar::Util 'tainted'; use Inline C => q{ void foo() { TAINTING_set(TRUE); TAINT_WARN_set(FALSE); } }; use Inline C => q{ void make_evil(SV* sv) { sv_taint(sv); } }; BEGIN { foo; } my $x = 42; make_evil $x; sub bar { 3 + shift; } my $y = bar($x); [ tainted($x), tainted($y) ]
[22:19:44] <perlbot> aquanight: [1,1]
[22:20:15] <aquanight> I guess that makes sense.
[22:20:34] <aquanight> that you can get untainted values from a sub called with tainted arguments. If the point is so you can define a "cleaner".
[22:23:12] <mst> ($foo) = $foo =~ /^(.*)$/;
[22:26:49] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[22:27:48] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:35:02] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[22:35:37] <cmburn> appreciate the kind words mst! :)
[22:36:26] <mst> cmburn: I'm hoping that your future pain will be my amusement :D
[22:36:43] <mst> cmburn: and that we'll help you fix it, but mostly the entertainment part? :P
[22:38:08] <mst> aquanight: seriously btw that snippet ends up all over codebases that have to run with taint mode, I think Catalyst was the first major perl project where we just flat out declared we weren't supporting it because it caused lots of problems and there were enough layers between user strings and the main app code that it still didn't actually save us from any of the common ways people (myself sadly included) 
[22:38:14] <mst> wrote security holes
[22:38:55] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:39:04] *** Quits: ferz (~ferz@93-39-143-97.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[22:41:23] <aquanight> I want to say people who do the "just untaint it" pattern probably should be slapped
[22:41:45] *** Joins: proller (~p@80.240.216.69)
[22:42:10] <aquanight> but there are quite a few times where either there is no safe value you can really use (%ENV) or you're in a place where you've already ensured there's no such thing as an 'unsafe' value
[22:42:49] <aquanight> but perhaps my biggest complaint about taint: it complains at the site of *use* of a value, but gives absolutely no information about where the unsafe value might have come from.
[22:43:32] <aquanight> you can be 7 calls deep in a 90KLOC module get slapped in the face with an "Insecure dependency" and find out it was because some code 300 miles away passed a string that was concatenated from a config file
[22:43:33] <mst> right, which is why I preferred declaring it unsupported because otherwise we'd've ended up with a shitload of 'just untaint it' code and people would've got a false sense of security and neither seemed worthwhile
[22:44:16] <aquanight> like it'd be nice if the taint magic could store the PL_curcop at the place the taint originated.
[22:44:35] *** Joins: HvszrStykp (~X@81.171.62.86)
[22:44:56] <aquanight> I feel like that alone would solve a lot of the taint woes
[22:45:16] <aquanight> but then, again
[22:45:23] <aquanight> the answer still was probably going to be /^(.*)$/
[22:45:44] <mst> I think transmissible magic would be an interesting feature to surface not-special-cased
[22:46:07] <mst> and then we could build custom subsets of taint-like features
[22:48:46] <cmburn> yeah, lots of pain right now D:
[22:49:32] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[22:49:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[22:49:53] <ilmari> if your taint is painful, see a doctor
[22:51:55] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:52:02] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20038FB1EEFD56FB32E.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[22:53:18] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[22:55:44] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[22:58:19] *** Joins: magla (~gelignite@55d4ea14.access.ecotel.net)
[23:02:16] <cmburn> does xpushs not work in an xsub? 
[23:02:56] *** Quits: martinus__ (~martin@127.59.202.77.rev.sfr.net) (Ping timeout: 256 seconds)
[23:03:12] *** Joins: proller (~p@2a02:6b8:b081:a412::1:24)
[23:04:12] <mst> cmburn: lol?
[23:06:36] <cmburn> I know the answer to the question I just can't figure out why the hell it's not working in my instance
[23:08:38] <mst> http://trout.me.uk/vaguecat.jpg
[23:12:57] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[23:14:40] *** Joins: morte_ (~user@190.104.116.153)
[23:16:24] <gordonfish> Check the ODN conduits
[23:17:01] <LeoNerd> cmburn: Don't forget to PUTBACK
[23:18:00] <mst> oh, right, yeah, gotta -write- the stack pointer so perl knows what you did
[23:22:57] <aquanight> I swear SP is probably one of the most confusing pieces of nonsense ever.
[23:24:42] <aquanight> what even is the point of having a local vs global stack pointer. I feel like I've asked this before.
[23:25:25] <mst> it lets me generate 0.002% more segfaults than my general C ability?
[23:25:37] <aquanight> only 0.002%?
[23:26:08] <cmburn> ah no it was even stupider than that, I mixed up eval and call
[23:26:08] <LeoNerd> I think the point was that in 1990, C compilers weren't very good at keeping hot struct values in registers, so that was necessary to help it gain a bit more performance
[23:26:18] <mst> aquanight: my general C ability is generally difficult to underestimate
[23:26:33] <mst> cmburn: excellent!
[23:26:35] <LeoNerd> Sometime I keep meaning to try a branch where that just gets turned off and it always uses the struct's value, such that SP_AGAIN and PUTBACK become pointless, and therefore no harm if you forget it
[23:26:42] <LeoNerd> I want to see if that makes *any* difference on modern compilers
[23:27:00] <mst> cmburn: always celebrate realising you made a really stupid mistake, they're so much faster to fix than the clever ones
[23:27:11] <aquanight> hmm
[23:27:33] <aquanight> can I just say for a moment that dzil is awful?
[23:28:04] <mst> aquanight: https://github.com/p5sagit/Distar
[23:28:05] <Paperbot_> Link title(s): [ GitHub - p5sagit/Distar ]
[23:28:07] <aquanight> dzil run perl -MAttribute::Pure -Mv5.32 -w -e 'my $x; sub x :Pure :prototype() { $x } $x = 42; printf STDERR "%d\n", x;' ## this is fine. I get an "uninitialized value" warning which is probably to be expected.
[23:28:35] <aquanight> dzil run perl -MAttribute::Pure -Mv5.32 -w -e 'my $x; sub x :Pure :prototype() { $x } x = 42; printf STDERR "%d\n", x;' ## this fails. I just get "Error while running" but no error from perl
[23:28:48] <aquanight> I'm only guessing it's a segfault of some sort
[23:28:59] <mst> strace -f
[23:30:34] <aquanight> how do I strace to a logfile
[23:30:38] <aquanight> because holy cats it spews a lot
[23:30:58] <aquanight> ah -o of course
[23:31:05] <aquanight> it's always -o, when is it ever *not* -o
[23:32:15] <aquanight> 758   --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xfffffffffffffff8} ---
[23:32:20] <aquanight> well that confirms my suspicions
[23:32:26] <aquanight> next question: fucking why
[23:32:57] <mst> dzil run is basically 'dzil build' then it runs perl in that directory
[23:33:18] <aquanight> yeah I get that part
[23:33:21] <cmburn> ah thank christ, the other half of the issue was PUSHBACK which is why I thought I wasn't sharing data, seems that you can indeed share your perl interpreter with a perlembed C program
[23:33:28] <aquanight> I just dislike that it doesn't tell me the thing died by signal
[23:33:39] <aquanight> at least make is that nice
[23:34:18] <aquanight> I'm not even sure what to make of that si_addr
[23:34:26] <aquanight> I'm guessing it's (int64_t*)-1
[23:34:29] <Grinnz> dzil commands are actually insanely simple, you're probably expecting it to do more than it does
[23:34:46] <aquanight> Grinnz: ...... I've literally said what I was expecting.
[23:34:50] <aquanight> Something like
[23:34:57] <mst> Grinnz: error while running without the exit code is retardulous
[23:34:58] <aquanight> "command failed with SIGSEGV"
[23:35:09] <aquanight> or at least state the exit status
[23:35:20] <xenu> i guess patches are welcome
[23:35:41] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[23:35:47] <Grinnz> looks like it's just system(@$cmd) and die "error while running: @$cmd";
[23:36:07] <aquanight> and that's awful. At least include $?
[23:36:10] <mst> so basically it needs porting to use IPC::System::Simple which IIRC already handles that just fine
[23:36:22] <Grinnz> probably would be a good idea
[23:36:24] <mst> and it's not like dzil needs to worry about dependencies
[23:36:40] <xenu> it probably depends on it indirectly anyway!
[23:36:44] <mst> aquanight++ # well volunteered, tell me when you want me to review your patch
[23:37:02] <Grinnz> https://metacpan.org/dist/Dist-Zilla/source/lib/Dist/Zilla/Dist/Builder.pm#L858
[23:37:02] <Paperbot_> Link title(s): [ lib/Dist/Zilla/Dist/Builder.pm - metacpan.org ]
[23:37:23] <Grinnz> note that affects much more than just the dzil run command
[23:38:10] <Grinnz> actually i'm wrong, that's the only thing that uses it
[23:38:32] <mst> aquanight: even dzil experts don't understand dzil - and that's why I wrote Distar
[23:40:00] <Grinnz> i understand it fine
[23:40:10] <Grinnz> only other thing on cpan using run_in_build appears to be https://metacpan.org/pod/Dist::Zilla::App::Command::interact
[23:40:10] <Paperbot_> Link title(s): [ Dist::Zilla::App::Command::interact - Run the Module::Build::Service 'interact' command for your ... ]
[23:40:58] <mst> Grinnz: yes, but I was being a dick :P
[23:41:24] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:41:42] <aquanight> hmm
[23:41:45] <Grinnz> most likely, too few people ever use dzil run to care
[23:42:08] <aquanight> I mainly use it to try things as part of planning what to stick in t/
[23:42:24] <aquanight> now
[23:42:32] <Grinnz> i've tended to just 'dzil build' and then do things in the build dir
[23:42:36] <aquanight> do I go minimum effort and just stick [Error $?] in the error message
[23:43:01] <Grinnz> that certainly seems the bare minimum of usefulness
[23:43:13] <aquanight> or do I maybe pull in 'use POSIX;' and use the proper WTHING() to decode it
[23:43:25] <Grinnz> just use IPC::System::Simple like mst suggested?
[23:46:33] <aquanight> tempting
[23:47:51] <gordonfish> mst: And we wouldn't want you any other way :) Good to have you back in here.
[23:51:00] <aquanight> > perl -MPOSIX -e 'print POSIX::WEXITSTATUS(4857)'
[23:51:00] <aquanight> POSIX::WEXITSTATUS not implemented on this architecture at -e line 1.
[23:51:03] <aquanight> fucking Windows
[23:51:31] <aquanight> and fucking strawberry that can't provide the likely-very-trivial wrappers
[23:52:02] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:52:42] <gordonfish> aquanight: Yeah that is surprising. We can have vfork and such, but not an exit status wrapper?!
[23:53:55] <aquanight> to be fair I would be surprised if $? needs one under windows
[23:54:02] <xenu> it isn't strawberry's job
[23:54:34] <mst> aquanight: seriously, IPC::System::Simple already built the wrapping shit and produces a decent error, just let it do the work (or worst case copy paste the handling but I don't see why you'd bother)
[23:54:51] <aquanight> mst: yeah that's getting more tempting by the minute
[23:55:04] <aquanight> I just don't know how many fucking places I'm going to have to add that dependency for
[23:55:21] <aquanight> I wanted to just get in, change the one fucking error message and get out
[23:55:32] <corwin> Does %errorlevel% not DTRT?  https://stackoverflow.com/questions/334879/how-do-i-get-the-application-exit-code-from-a-windows-command-line
[23:55:33] <Paperbot_> Link title(s): [ How do I get the application exit code from a Windows command line? - Stack Overflow ]
[23:55:51] <aquanight> corwin: %errorlevel% is a CMD thing.
[23:55:52] <Grinnz> aquanight: you add a "use" line, and done
[23:55:59] <Grinnz> this is a rjbs dist, it uses AutoPrereqs
[23:56:05] <aquanight> Grinnz: plus how many damned metadata files
[23:56:08] <Grinnz> none
[23:56:13] <Grinnz> that's dzil's job
[23:56:17] <aquanight> see I didn't even know AutoPrereqs is a thing
[23:56:29] <Grinnz> this is literally the point of dzil
[23:58:11] <gordonfish> sweval: use Inline C => q{ void go(int x) { printf("[%d]", x); } }; go(123);
[23:58:14] <perlbot> gordonfish: [123]
[23:58:17] <gordonfish> sweval: use Inline C => q{ union PackIF { int i; float f; }; void go(int x) { printf("[%d]", x); } }; go(123);
[23:58:20] <perlbot> gordonfish: ERROR: Undefined subroutine &main::go called at (IRC) line 1. 
[23:58:25] <gordonfish> Why?
