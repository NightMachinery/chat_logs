[00:00:06] <selwyn> i think they invested too much time in talking about it a couple of years ago
[00:00:14] <selwyn> so they can´t cancel it now (even if for covid reasons)
[00:00:53] <MichaelRaskin> Due to pandemic situation, they can keep it but run it without spectators. Or participants.
[00:01:05] <shka> selwyn: this is brexit festival, so it should get delayed
[00:01:44] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:02:02] *** Joins: livoreno (~livoreno@user/notzmv)
[00:02:02] <selwyn> lol
[00:03:22] <selwyn> there might be 90 000 fans at the euros final on sunday
[00:07:37] <MichaelRaskin> Yeah, in the local news (Germany) the reaction of German politicians to Euro games in UK hits the top spot. The reaction can be summarised as «The What?»
[00:07:59] <shka> yes, good, let the virus spread
[00:09:16] <MichaelRaskin> Well, if one assumes that post-infection immunity to same-variant as higher than immunity from original-variant vaccination for the delta-infection…
[00:09:30] <shka> mmmmmmmmmmmmm
[00:09:31] <shka> rrrrr
[00:09:33] <shka> aaaaa
[00:09:36] <shka> I MUST
[00:09:57] <MichaelRaskin> «I have no mouth to say what I must do»
[00:10:10] <shka> MichaelRaskin: but let's consider perfectly round quantum bukakke
[00:10:17] * selwyn enjoys normal island
[00:11:04] * shka goes to the horny jail now
[00:11:14] <MichaelRaskin> Me, having taught geometric algorithms this week: normal to what?
[00:11:53] <selwyn> the mainland
[00:11:59] <selwyn> no overlap anymore
[00:12:31] <MichaelRaskin> Normal is stronger than lack of overlap, and I think Great Britain is still mostly parallel to Europe
[00:12:48] <MichaelRaskin> Otherwise it would not be too hospitable, I guess…
[00:25:43] *** Joins: [deleted] (~livoreno@user/notzmv)
[00:26:45] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:27:14] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:27:33] *** Joins: livoreno (~livoreno@user/notzmv)
[00:27:36] <gilberth> Oops, all of a sudden my fan is silent. Hmm.
[00:40:40] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[00:50:06] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[00:50:46] *** Joins: [deleted] (~livoreno@user/notzmv)
[00:53:26] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 255 seconds)
[01:15:04] *** Quits: cond (~example@user/aeth/bot/cond) ()
[01:17:24] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[01:42:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:43:39] <dave0> maw
[01:55:34] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:59:19] <Alfr> Hello dave.
[02:02:27] <dave0> hi Alfr 
[02:07:30] *** Joins: derelict (~derelict@user/derelict)
[02:17:46] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 240 seconds)
[02:34:41] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 255 seconds)
[02:35:14] *** Joins: livoreno (~livoreno@user/notzmv)
[02:35:52] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:43:58] <dave0> this ones for hayley: https://youtu.be/p-JeQduJ0f8
[02:43:58] -ixelp- XTC - Generals And Majors - YouTube
[03:34:29] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:42:29] *** Joins: cond (~example@user/aeth/bot/cond)
[03:47:47] *** Quits: clothespin (~awolven@2601:245:4080:1100:40b8:5a0f:8e29:1a4f) (Ping timeout: 252 seconds)
[04:00:21] *** Quits: Alfr (~Alfr@user/alfr) (Killed (osmium.libera.chat (Nickname regained by services)))
[04:00:25] *** Joins: Alfr (~Alfr@user/alfr)
[04:16:37] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[04:23:25] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:26:35] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[04:44:10] *** Quits: random-nick (~random-ni@87.116.179.235) (Ping timeout: 246 seconds)
[04:48:22] *** Joins: random-nick (~random-ni@87.116.179.235)
[04:54:33] *** Quits: cammie (~cammie@2001:470:69fc:105::b993) (Quit: issued !quit command)
[05:15:55] *** Quits: random-nick (~random-ni@87.116.179.235) (Quit: quit)
[05:38:16] <hayley> https://www.reddit.com/r/davidbowiecirclejerk/comments/oghn4n/world_record_best_david_bowie_song_speedrun_any/
[05:38:17] -ixelp- [World Record] Best David Bowie song Speedrun (Any%) in 18.99 : davidbowiecirclejerk
[06:04:32] <hayley> https://www.youtube.com/watch?v=MYaf94V3aRU
[06:04:32] -ixelp- Fracture (Live at the Concertbebouw, Amsterdam, Nov. 23, 1973) - YouTube
[06:11:43] <hayley> Finally I got to speak to someone at the job finding organisation that understands that I can't do part time university and a full time job.
[06:15:05] <Aurora_v_kosmose> Progress
[06:41:56] * gilberth has a different notion what full time is.
[06:52:31] <hayley> gilberth: Would you find it funny to JIT instructions for a (slower) microcontroller to have them run on a (faster) microcontroller?
[06:55:29] <hayley> https://github.com/mikeakohn/java_grinder
[06:55:30] -ixelp- GitHub - mikeakohn/java_grinder: Compile Java byte-code to native CPU's.
[07:01:18] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:04:41] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[07:07:56] <hayley> Seriously, ESP32 uses 3 byte instructions?
[07:19:56] *** Joins: caz (~caz@2001:470:69fc:105::b9fc)
[07:22:06] <Aurora_v_kosmose> Does it actually need that many?
[07:23:45] <hayley> The list of core instructions is about 2 pages long, but they want a plain RISC instruction set.
[07:24:55] <hayley> And then the memory map is a bit weird as internal RAM (about 288K free IIRC) can be executed but not external. Could be made to work.
[07:54:26] *** Joins: rt (~robin@user/terpri)
[07:55:31] *** Quits: robin (~robin@user/terpri) (Ping timeout: 256 seconds)
[07:57:23] *** Joins: rt` (~robin@user/terpri)
[08:00:02] *** Quits: rt (~robin@user/terpri) (Ping timeout: 255 seconds)
[08:06:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:09:22] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:19:24] <gilberth> hayley: How can you JIT for one MCU to run on another?
[08:19:58] <hayley> Program goes in, program goes out?
[08:20:38] <gilberth> But you said JIT for CPU A, yet to run on CPU B. How is that possible when it's not for B?
[08:20:56] <hayley> Oh, I see.
[08:21:23] <hayley> Would you find it funny to JIT a program for a microcontroller so that it would run on another?
[08:21:54] <gilberth> Why another? I don't get it.
[08:22:21] <hayley> No reason, it's just funny to me.
[08:23:00] <gilberth> Had you said on MCU A for another, that would make sense.
[08:23:11] <hayley> Well, I can find a Raspberry Pi Pico for cheaper than an Arduino Uno clone...
[08:23:32] <gilberth> And?
[08:23:53] <hayley> You want to run on a cheaper MCU but can't be assed to port code? I dunno. 
[08:24:28] <gilberth> You still puzzle me.
[08:25:42] <hayley> Fine, I'll write it your way. Would you find it funny to JIT a program targetting one microcontroller from an image written for another?
[08:28:23] <dave0> i think she's saying writing an emulator for a microcontroller for a microcontroller is funny
[08:29:01] <gilberth> Anyhow, it's a pity that my wasm2wat and my clang don't get along. I would like to teach it memory. And the longer you think about it PS is a pretty nice BC. It even has a goto due to TCO. All you need is LABELS. You could even "link" and instead of saying e.g. { ... L1 }, with L1 then being looked up at runtime, you could construct the procedure so, that the target procedure L1 is right in the code vector, like { ... { something else } 
[08:29:39] <hayley> dave0: Yes, but dynamic compilation would make it barely fast enough.
[08:29:48] <gilberth> hayley: Yes, I would find that funny and is that really JIT? One MCU asking the other to JIT for it?
[08:30:14] <hayley> gilberth: I was going to look at memory, but the "S-expressions" had crap like (i32.store align=4 blabla) and I decided it could die in a fire. 
[08:30:30] <gilberth> Now I get it. You want to emulate a foreign instruction set? By JITing?
[08:30:37] <hayley> Yes.
[08:30:57] <hayley> One microcontroller (eg RP2040) from another (eg ATmega328p)
[08:31:48] <gilberth> That's not funny. Would I have time, I'd like to redo the 8-bit MCU emulates a 32-bit RISC to run Linux. Done right. Can't be really that slow.
[08:32:42] <gilberth> hayley: Well, I still like the idea of C on the printer. I would want to compile and run e.g. my ulisp (which needs a rename), or perhaps uemacs :-)
[08:33:04] <hayley> My favourite coauthor didn't find it funny either. Oh well.
[08:33:38] <gilberth> But for that you'd need a libc, which I want anywar for my long mode stuff and for my putative C->CL compiler. And most parts of ISO C99's libc are already done.
[08:34:13] <dave0> there was a computer in the 80's which ran an emulator for some bytecode that in turn ran an emulator for basic... it was notoriously slow
[08:35:26] <gilberth> dave0: Well memory was at a premium. See all the microcode designs. Essentially fast CPUs with some special purpose support to emulate a BC.
[08:36:44] <dave0> https://en.wikipedia.org/wiki/TI_BASIC_(TI_99/4A)
[08:37:22] <dave0> gilberth: my first computer had 4k of memory
[08:37:28] <dave0> MC-10
[08:38:19] <dave0> but it was a 80's microcomputer.. reading about retrocomputing, far better programmers made lots of things work in 4k-words of memory!
[08:38:45] <hayley> http://www.forth.org/fd/FD-V07N4.pdf p.2 A FORTH machine!
[08:43:11] <gilberth> dave0: Mine was a "Laser 210" I don't recall the exact amount of RAM, but also as tiny as your machine.
[08:47:16] <gilberth> hayley: Boring. The LMI Forth might be more interesting, but suppose that's not the Lisp machine company.
[08:48:15] <dave0> gilberth: unfortunately i was too young to appreciate what i had and lots it during the passing of time
[08:48:25] <dave0> "you never throw out your first computer"
[08:48:37] <dave0> unfortunately i did :-(
[08:50:31] <gilberth> I still have mine somewhere.
[08:52:33] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[08:53:18] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:55:00] <dave0> re maw
[08:56:15] *** Quits: ^[ (~user@user//x-8473491) (Read error: Connection reset by peer)
[08:56:43] *** Joins: ^[ (~user@user//x-8473491)
[09:05:46] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[09:06:28] *** Joins: nihaal (~nihaal@106.201.177.18)
[09:13:03] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[09:23:50] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[09:31:23] *** Joins: robin__ (~robin@user/terpri)
[09:33:37] *** Quits: rt` (~robin@user/terpri) (Ping timeout: 246 seconds)
[09:47:51] <hayley> https://mastodon.social/@mhoye/106546771511613058 libera dot net redirects you to Freenode
[09:47:51] -ixelp- mhoye: "Just typo'ed a servername while reconnecting to a…" - Mastodon
[09:49:07] <dave0> nice
[10:06:37] <hayley> https://www.youtube.com/watch?v=9Zvw428NNxI
[10:06:37] -ixelp- YTP: Patman Post re-investigates - YouTube
[10:17:15] *** Joins: shka (~herr@109.231.62.239)
[10:32:40] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[10:33:53] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[10:35:45] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[10:55:05] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 255 seconds)
[11:14:29] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[11:14:45] *** Quits: nihaal (~nihaal@106.201.177.18) (Quit: nihaal)
[11:49:09] <hayley> Huh, I could swear my DFA generator choked on some weird combination of Kleene stars and groups but I can't remember what :/
[11:53:35] * hayley is thinking of a way to use the fact that most REs use registers in a linear sense, i.e. not backing them up most of the time, so as to make for fewer assignments and a program and memory model suited for a fast interpreter.
[11:58:32] *** Joins: treflip (~user@95.79.32.99)
[12:19:34] <shka> hmmm
[12:20:30] <shka> do you guys have a decent example of dockerfile with sbcl application?
[12:27:20] <easye> shka: <https://common-lisp.net/project/cl-docker-images/> provides a good base start for various implementations.
[12:27:20] -ixelp- CL Docker Images
[12:27:49] <easye> etimmons on IRC (East Cost USA timezone) is pretty active on IRC.
[12:28:56] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:29:14] <shka> easye: thanks, but i have a slightly different problem, you see
[12:29:25] <shka> issue is that i am docker noob
[12:30:37] <shka> and i don't know how exactly i should build stuff inside the docker
[12:30:47] <shka> but maybe i will figure this out...
[12:31:20] <easye> With a little bit of documentation reading, you should be able to use the cl-docker-images SBCL Dockerfile as a base from which you can experiment building things locally.
[12:31:57] <easye> I never found the Docker documentation particularly easy to understand either.
[12:33:29] <easye> Perhaps start by cloning <https://gitlab.common-lisp.net/cl-docker-images/sbcl>, then trying to build the SBCL Docker image locally.
[12:33:30] -ixelp- cl-docker-images / sbcl · GitLab
[12:34:51] <easye> That is slightly more involved then the simplest Dockerfile recipe possible, but if you can understand how that build process works, you will be in good shape to make modifications for your own application.
[12:35:54] <easye> What is "more involved" is that there is no direct Dockerfile, but rather templating procedures to generate a variety of Dockerfiles
[12:50:10] <hayley> Hm, think I found another bug in my unifier. It only stores assertions one way, so it would reject (A, A) ~ (B, C) but not (B, C) ~ (A, A) which is stupid.
[12:53:45] <hayley> https://tiermaker.com/create/cool-book-covers-727013 tier list for the books I mostly don't own but would show off
[13:01:35] <shka> easye: ok, thanks!
[13:02:27] <hayley> imho AMOP and SICP easily S tier, ANSI Common Lisp probably B, GC Handbook in C tier
[13:16:48] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:19:46] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[13:33:46] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[13:33:53] *** Joins: nihaal (~nihaal@106.201.177.18)
[13:46:46] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f08c:c9bc:4856:b89a)
[13:55:16] *** Joins: selwyn (~selwyn@user/selwyn)
[14:37:31] <gilberth> In PS procedures are just arrays, thus we could self-modifying code: http://clim.rocks/gilbert/self-modifying.ps.txt
[14:39:57] <gilberth> The implication however is that you could stick any literal into a procedure, say another array or a some value cell. This won't need to go through the dictionary then. Remember that you always build procedures at runtime, like [ 2 /add cvx ] cvx.
[14:47:44] <gilberth> I contemplate to use this for "linking" and caller-checks-arg-count in my toy Lisp. Suppose instead of looking up a symbol function at runtime, I would stick the procedure object right into the procedure of the caller. With a little database about where each function is invoked and with how many arguments, I could update all those places by either the new function or some stub code branching to the function with &optional filled in, &res
[14:49:47] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:52:49] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
[14:55:23] <gilberth> I once did sth similar for my heavily modified XLISP for which I had a BC interpreter and compiler. In ancient times under XENIX.
[15:30:14] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[15:31:05] *** Joins: random-nick (~random-ni@87.116.179.201)
[15:34:46] *** Quits: random-nick (~random-ni@87.116.179.201) (Client Quit)
[15:34:54] *** Joins: [deleted] (~livoreno@user/notzmv)
[15:35:41] *** Joins: random-nick (~random-ni@87.116.179.201)
[15:38:08] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[15:40:54] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f08c:c9bc:4856:b89a) (Remote host closed the connection)
[15:45:25] *** Joins: lonzo (~lonzo@user/lonzo)
[15:51:57] *** Joins: pjb (~pjb@user/pjb)
[16:10:58] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[16:11:17] *** Joins: livoreno (~livoreno@user/notzmv)
[16:27:19] <shka> easye: thanks for help, dockerfile builds now just fine
[16:41:18] <hayley> Hmm, maybe I should take the gensymed of A_n <- P to be A_n <- A_n rather than make a new n. I think it'd work.
[16:47:55] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[16:49:08] <hayley> Trouble with my fast interpreter idea is I need to identify indices that are dead so I can reuse them.
[16:55:06] <hayley> If we (incrementally) compile to bytecode I could add liveness bitmaps to each RE.
[17:03:44] *** Quits: lonzo (~lonzo@user/lonzo) (Ping timeout: 252 seconds)
[18:01:50] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[18:02:42] <dave0> nite all!
[18:03:11] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:03:37] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[18:07:17] *** Joins: makomo (~makomo@user/makomo)
[18:16:56] *** Joins: [deleted] (~livoreno@user/notzmv)
[18:20:46] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 258 seconds)
[18:21:20] *** Joins: derelict (~derelict@user/derelict)
[18:41:55] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[18:42:14] *** Joins: livoreno (~livoreno@user/notzmv)
[18:58:31] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 246 seconds)
[19:00:10] *** Joins: elflng (~elflng@5.28.137.182)
[19:07:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 255 seconds)
[19:13:17] *** Quits: treflip (~user@95.79.32.99) (Quit: bb)
[19:17:20] <hayley> Hm, trouble is that my derivatives could become ambiguous, but I only allow for submatching and not arbitrary tags (i.e. each tag occurs once in the original RE) and I "clone" when I want to duplicate, like the search vector in a grep machine.
[19:31:19] *** Joins: [deleted] (~livoreno@user/notzmv)
[19:31:50] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:33:56] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 265 seconds)
[19:34:50] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[19:42:02] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:42:27] *** Joins: selwyn (~selwyn@user/selwyn)
[19:56:38] <gilberth> hayley: You still duplicate?
[19:57:16] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[19:57:35] *** Joins: livoreno (~livoreno@user/notzmv)
[20:05:22] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:05:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:07:00] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[20:24:43] *** Joins: [deleted] (~livoreno@user/notzmv)
[20:27:29] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 255 seconds)
[20:44:19] *** Joins: rogersm (~rogersm@92.59.121.109)
[21:07:09] *** Quits: nihaal (~nihaal@106.201.177.18) (Quit: nihaal)
[21:31:03] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[21:32:28] *** Joins: minion (~minion@common-lisp.net)
[21:45:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:48:46] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[21:58:40] * gilberth got his second shot of BioNTech. Arm hurts.
[21:59:59] <aeth> so many vaccines around the world
[22:00:20] <gilberth> Still not enough. IMHO.
[22:00:35] <aeth> https://en.wikipedia.org/wiki/COVID-19_vaccine#List_of_authorized_and_approved_vaccines
[22:00:40] <aeth> 4 different categories
[22:00:58] <aeth> looks like BioNTech is "Pfizer—BioNTech" and an RNA one
[22:01:04] <aeth> In the US, branded Pfizer
[22:01:19] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:01:37] *** Joins: livoreno (~livoreno@user/notzmv)
[22:01:59] <aeth> Amazing how there were 4 entirely different approaches to the vaccine
[22:02:02] <gilberth> My wife got her second vaccination earlier this week and had real problems like dizziness and headaches.
[22:02:12] <aeth> I was like you, just arm
[22:02:26] <aeth> It's a good thing I sleep on my right side and got the vaccination on my left arm or I might have had trouble sleeping
[22:02:27] <gilberth> aeth: Yes, BioNTech = Pfizer.
[22:02:50] <aeth> It basically felt like someone punched my arm and was sore for several days
[22:03:38] <gilberth> aeth: I was vaccinated just a few hours ago, the other symptoms could come later. But then it only means that it is working, that is the immune system doing sth.
[22:04:41] <gilberth> aeth: Yes, feels like this to me too. And certain movements/positions hurt. When I keep the arm still, all is fine. Could be worse, I'll survive.
[22:04:50] <Aurora_v_kosmose> Mild soreness. Light fever.
[22:06:11] <gilberth> still? "at rest" I guess. False friend.
[22:06:54] <gilberth> Anyhow, I am grateful that there is a vaccine.
[22:07:27] <Aurora_v_kosmose> Quite, it'd make my eventual moving annoying if I had to do it all by myself.
[22:08:12] <gilberth> You move?
[22:08:58] <Aurora_v_kosmose> Trying to leave the city. Remote or even flex is worth it if I can diminish rent by a third or more.
[22:09:38] *** Joins: Alfr (~Alfr@user/alfr)
[22:10:17] <gilberth> Oh, I could offer an completely unused house in somewhat rural north Germany. I need a city. I hope I will eventually get better to make my move.
[22:10:51] <Aurora_v_kosmose> I can't go quite as far into cheaper lands as I want as I currently have no vehicle (nor license)
[22:11:49] <Aurora_v_kosmose> There's some rural-ish sweet spots here that cost a fraction of what it costs to live everywhere else. But without a car they're not really an option unless you want to go full subsistance-farming/offgrid
[22:11:51] <gilberth> Yes, couldn't survive there with a car. I am not made for a rural area. I need people and not complete isolation.
[22:12:18] <gilberth> * w/o
[22:12:47] <gilberth> This is why my house literally kills me.
[22:12:49] <Aurora_v_kosmose> I moved from a smaller locality to the city and found that even before covid my reclusive habits were unchanged by my location.
[22:13:16] <Aurora_v_kosmose> So other than commute and easy in ordering takeout, I don't really get anything out of living in the city.
[22:13:25] <Aurora_v_kosmose> s/easy/ease/
[22:14:49] <gilberth> Hmm, everyone is different. I need to see some human beings. And *gasp* even talk to them. As much as I need solitude for hacking, I am not made for isolation.
[22:17:22] <gilberth> Which is perhaps also why I hang out in the Lisp Café so often.
[22:17:32] <Aurora_v_kosmose> I've got some social needs but like... having tea with friends once or a few times a month is enough.
[22:17:59] <gilberth> I have that zero times a year.
[22:18:59] <Aurora_v_kosmose> Yeah, that might be a bit too little for a lot.
[22:22:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[22:22:54] <aeth> Compiling ironclad in SBCL on a pi 3 took me almost exactly 7 minutes, and that seems to be the worst case compilation in the ecosystem right now (slowest library to compile + slowest compiler + slowest common 64 bit machine)
[22:23:03] <aeth> If anyone's interested in my result from the other day
[22:23:14] <Aurora_v_kosmose> That's not too bad
[22:23:30] <aeth> Of course, some applications might take much longer, at least with nothing cached
[22:23:38] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:23:53] <aeth> Although I suspect that any long-compiling application has ironclad as a huge chunk of it
[22:24:01] * gilberth remembers a cross build of CMUCL which took a day.
[22:24:13] <aeth> ah, well implementations might take longer
[22:24:29] <aeth> they have the advantage of not needing to be compiled, though... at least if you can use the probably-oudated binary
[22:24:32] <gilberth> CLISP used to an hour.
[22:25:01] <aeth> Libraries will recompile about once a month with Quicklisp... possibly more if you update your implementation (SBCL updates roughly monthly, too, afaik)
[22:27:08] <gilberth> Now imagine CL would be in general batch oriented like most other languages. I can't imagine hacking this way. This alone leads to faster development IMHO.
[22:27:45] <Aurora_v_kosmose> It's feasible, but it definitely is a more grating user experience.
[22:28:06] <aeth> gilberth: CL is batch-oriented, but it's batch-oriented from the REPL (typically SLIME) rather than from the POSIX shell.
[22:28:08] <Aurora_v_kosmose> Guile is probably the Scheme that best supports it, and it still has edge-cases that lead to needing a general restart once in a while.
[22:29:30] <gilberth> aeth: Well, I could modify a running program instantly with a REPL.
[22:30:01] <aeth> yes, but in general, beyond maybe your first function, you're not actually writing non-trivial things in the REPL, you're mostly just recompiling modified files (or portions of them)
[22:30:11] <aeth> at least if you code like a "normal" Lisper
[22:30:48] <gilberth> What is a normal Lisper? I hardly recompile a file, but a DEFUN.
[22:31:19] <cond> And then there's this, where I'm literally getting the channel appearing in SLIME and I am typing messages with (msg "#lispcafe" "MESSAGE")
[22:31:35] <cond> So is it trivial because it's one liners or is it non-trivial because it's IRC?
[22:32:04] <gilberth> IRC is quite trivial.
[22:32:23] <aeth> gilberth: I used to C-c C-C (recompile form) everything but now I mostly C-c C-k (recompile file) because sometimes, rarely, it makes a difference
[22:32:24] <gilberth> But still, you couldn't do that with a C client.
[22:32:45] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:33:01] <aeth> C-c C-k rarely is slower than C-c C-c, but it sometimes causes issues to just recompile a form because now you're changing the compilation unit that the form belongs in, since the compiler can and will treat the entire file as a compilation unit
[22:33:23] <gilberth> aeth: Sometimes, yes. I like to test alot routine for routine and develop some program incrementally.
[22:33:33] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[22:34:29] <gilberth> aeth: Isn't that kind of SBCL-specific? As it likes to remember quite a lot about individual functions? At least CMUCL is like that.
[22:34:52] <aeth> no, it's specific to optimizing compilers
[22:35:08] <aeth> the compiler MAY assume that the file is a compilation unit, and MAY introduce optimizations based on that assumption within the file
[22:35:30] <gilberth> Yes, with a wrong approach. I'd like see that implemented differently,
[22:35:44] <aeth> In particular, if a function returns a constant string (or probably array in general) then every other function in that file in SBCL will know the length
[22:35:48] <aeth> so it can remove bounds checking
[22:36:01] <aeth> However, that means you can't C-c C-c that function and expect the file to work
[22:36:08] <aeth> Mostly just that
[22:36:50] <aeth> (it doesn't break safety, it just type errors, since it turns the potentially many bounds check into one type check to make sure that the function is still returning the length that it expects)
[22:37:27] <gilberth> Yes, this it what I mean. It's in the design of the compiler and conforming to the standard. Still I don't like that too much. I would wish for a system, which would recompile also all other functions which code generated for on some assumptions, that are updated.
[22:38:03] <aeth> yes, useful for macros and inline functions
[22:38:06] <aeth> unfortunately, it'd use a lot of memory
[22:38:18] <aeth> always seemed wrong that things can go "stale" though
[22:38:36] <gilberth> You care about memory and use the implementation which the hugest footprint already?
[22:38:49] <gilberth> * with ;dammit
[22:39:13] <aeth> gilberth: As for interfacing with a minimal IRC via a minimal REPL command language in SLIME... well, that's actually not too unlike what you could get in C. Since, remember, the POSIX shell is C's "REPL" in this analogy.
[22:39:22] <aeth> And you have e.g. https://tools.suckless.org/ii/
[22:39:22] -ixelp- tools | suckless.org software that sucks less
[22:39:45] <aeth> Less trivial, more unusual, and not something you can (or should, anyway) grow directly into a large program, though
[22:39:54] <gilberth> aeth: I can't modify a C program while it is running.
[22:40:18] <aeth> Well, yes, you can, but again it's unusual, and I doubt ii provides for it because it's minimalist
[22:40:19] <gilberth> Or invoke functions at will.
[22:40:48] <aeth> Recompiling parts of a C or C++ program while running is "hot loading" and large applications (e.g. game engines) advertise it as a feature because it's hard and unusual
[22:41:48] <gilberth> Right. And not always possible. Change a 'struct' -> won't work.
[22:43:08] <gilberth> Anyhow my dream Lisp system would in general do whole program analysis, but with a albeit perhaps huge database provide for still changing things incrementally.
[22:43:22] <aeth> Well, that exact thing happens to be UB in CL, too... redefining a struct.
[22:43:39] <gilberth> Yes, but not a class.
[22:43:52] <aeth> yeah, but a CL struct is the direct analogy
[22:44:01] <aeth> with :type in its slots
[22:44:14] <aeth> a CL class is a weird thing that you'd build with some sort of magic C library
[22:44:16] <gilberth> class in C++ is what? Won't work either.
[22:44:27] <aeth> well, yes, but now we're changing languages :-)
[22:44:49] <aeth> I'm sure someone somewhere in the past 40 years thought to have dynamic classes in C rather than C++-like static classes
[22:44:58] <aeth> Still wouldn't get you hot loading for free, though
[22:45:39] <gilberth> aeth: Yes, with a library but not as part of the langage. And after all CLOS also is a library of sorts. Can't I have both? Inlined slot access with a known slot offset, while it is a valid assumption, but update code, when it is not anymore?
[22:46:31] <gilberth> Likewise for any type interference.
[22:46:37] <aeth> you can do that manually in CL... even if SBCL didn't let you recompile structs (it just warns you), as long as you know the users, you could just (1) drop the struct by UNINTERNing the symbol and maybe a handful of other things (2) compile the "new" struct (3) recompile all downstream users of the struct
[22:46:47] <aeth> You could probably add this machinery without requiring a new implementation
[22:46:58] <aeth> Would affect the structs currently in memory, though
[22:47:21] <aeth> So if you wanted to be fully robust you'd need an upgrade protocol that copies old->new
[22:47:22] <gilberth> See. Won't work.
[22:48:24] <aeth> Well, no, you'd just have to treat it like networked code that supports multiple API versions rather than like in-process code
[22:48:39] <aeth> So the first time you encounter old-struct you'd update it to new-struct
[22:48:43] <aeth> and eventually fully drop old-struct
[22:49:00] <aeth> Similarly if you did a very incompatible DEFCLASS change
[22:49:16] <gilberth> And this is partly the problem with the Python compiler. I was bitten many, many times with it not updating its knowledge about functions on redefinition. Once known as always returning NIL => Always assumed so. Even if you recompiler the callers.
[22:49:45] <gilberth> aeth: CLOS does that.
[22:51:06] <gilberth> There always is a shadow pointer in objects pointing to the class definition the object was created with, you change the class, the system would when such a stale object is first touched again, update the instance.
[22:51:41] <aeth> gilberth: that's how people deceptively benchmark against CL in dynamic language comparisons. Because CL will (or at least should) only assume always returning NIL if you DECLARE it as such.
[22:52:37] *** Joins: [deleted] (~livoreno@user/notzmv)
[22:52:44] <aeth> gilberth: re your second point, my guess is that structs (in some implementations anyway) skip that machinery and thus receive a speedup (even more so if :type is provided for the slot).
[22:52:48] <aeth> I guess, anyway
[22:52:53] <gilberth> Well CMUCL also infers that, and never drops that inference. Dunno if SBCL does better. So there are situations in which a DELETE-PACKAGE would give you back some saneness.
[22:53:10] <aeth> well, I recently had to DELETE-PACKAGE a bunch
[22:53:36] <gilberth> aeth: Exactly. This why I still use DEFSTRUCT at times. But I would like to have both.
[22:54:02] <aeth> if you forget to export something in a DEFPACKAGE, it's easier to delete the downstream packages than to UNINTERN all of the symbols that are now expecting the undefined DOWNSTREAM::FOO instead of UPSTREAM:FOO
[22:54:35] <aeth> gilberth: ime, DEFSTRUCT is when the :type is (1) known and (2) low-level... so it shows up a lot when I'm working with things designed with C in mind
[22:55:05] <aeth> (e.g. parsing binary files, parsing IRC, using common gamedev idioms... all will have a lot more type information than normal)
[22:55:09] <gilberth> Hmm, CCL offers me to just unintern the offending symbols.
[22:55:53] <aeth> IRC in particular has strict length restrictions, meaning that you know (1) something is a string and (2) some index into that string is < 512
[22:56:10] <gilberth> aeth: I use it, when I want the speed. Otherwise I don't care. Most things are just fast enough.
[22:56:17] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[22:56:39] <aeth> (and IRC is 512 in bytes, so in octet form it's < 512, while in CHARACTER form it's also < 512, but possibly considerably so if the message is entirely emoji (4 each)... still gives the upper bound, though)
[22:56:41] <gilberth> aeth: This is a bet, I don't want to take.
[22:58:01] <gilberth> You need to have a notion of where a message ends, so you gain nothing to declare a line as (simple-array (unsigned-byte 8) (512))
[22:58:43] <aeth> well, for indices, I use int16 (alias for (signed-byte 16)) since I just need to upper bound, not the least upper bound. That will cover the 1024 length extension, for instance. And then some. With negatives = invalid.
[22:59:16] <gilberth> And why not just FIXNUM?
[22:59:38] <aeth> As for messages, I do in fact use (simple-array octet (512)) although I should use (simple-array octet (1024)) for the IRCv3 tags extension
[23:00:24] <aeth> gilberth: an index upper bound is probably a bit less than a positive fixnum's limit (iirc alexandria exposes them)
[23:00:30] <gilberth> And, BTW, when I want the speed I can scan at about ~130MB^Wcharacters a second. I don't see, why I would need to be that fast with IRC.
[23:01:25] <gilberth> aeth: Then take array-total-size-limit, if you wish. Doesn't change a thing.
[23:01:29] <aeth> Bounding the index type ensures that it stays within 'alexandria:array-index (if either unsigned or with a MINUSP test first)
[23:02:39] <gilberth> aeth: So you allocate 512 octets for each line?
[23:03:05] <aeth> Although a non-tight bound is still going to get a bounds check. You could restrict it to (integer 0 1023) and hope that the implementation doesn't make that larger. But you might actually want to use 1024 as well, to represent, say, the starting point of the PRIVMSG's message contents in the empty message "!aeth!foo@bar PRIVMSG #lispcafe :"
[23:03:41] <aeth> (well, assuming that the channel name pads it out to max length first)
[23:04:27] <gilberth> You still need a test somewhere, as not every message is exactly 512 octets. Or 1024 or what ever.
[23:04:30] <aeth> gilberth: I recycle the octet array, which makes it impure, but also means that when I check for an EOF I don't have to pass in the non-EOF that's read (if one is read), I can just set the 0th element of the octet array, then tell it to start at 1 instead of 0
[23:05:01] <aeth> not strictly necessary when it's 1, but what if I somehow do other partial reads later on?
[23:05:17] <aeth> e.g. a bouncer that only needs to parse for the server's PING (to PONG)
[23:06:27] <aeth> gilberth: but, yes... there is a bound, but instead of allocating an irregular amount, I cache the maximum size and tell it when to stop reading (most sequence functions have a start/end or start1/end1/start2/end2 anyway)
[23:06:55] <aeth> something that you can't reasonably do on an arbitrary protocol, but you can in a C-first protocol like IRC
[23:12:26] <gilberth> Heh, by that argument you could stick NUL in there. :-)
[23:12:55] <gilberth> aeth: Apropos EOF, were you bitten by SBCL's broken READ-CHAR-NO-HANG?
[23:15:49] <gilberth> BTW I use ISO-8859-1 streams, because (1) READ-LINE does what I want, that is read a line in one GF call, which you cannot do with octet streams. (2) It's a transparent identity encoding (3) You win, when no 8-bit chars are there at all.
[23:16:32] * gilberth still wishes for direct buffer access.
[23:21:50] <aeth> gilberth: no, I have to use an octet stream
[23:21:53] <aeth> because IRC uses a weird encoding
[23:22:08] <aeth> https://modern.ircdocs.horse/#character-encodings
[23:22:08] -ixelp- IRC Client Protocol Specification
[23:22:23] <aeth> Essentially, guess UTF-8 and then fall back to Latin-1 if invalid
[23:22:28] <gilberth> You don't have to. ISO-8859-1 is transparent.
[23:22:28] <aeth> Unless UTF8ONLY
[23:22:37] <aeth> I don't have to, no
[23:22:47] <aeth> Ideally, I'd bivalent stream. Trivalent, even
[23:23:23] <gilberth> Won't buy you a think unless you could rewind.
[23:23:24] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[23:23:24] *** ChanServ sets mode: +o MichaelRaskin
[23:23:40] <gilberth> thing
[23:24:23] <gilberth> Which you can't. Thus: /me wanting a buffer API.
[23:26:05] <gilberth> What I do is: I read a line, try to decode as UTF-8, when that works I use that decoding, otherwise I assume ISO-8859-1. I assume that servers could bounce around octets without knowing anything about the encoding. So one nick could write in ISO-8859-1, while another uses UTF-8. I need to handle both on a message per message basis.
[23:27:08] <gilberth> If you care at all and would not just somehow bounce octets around, too.
[23:31:19] <sham1> Thankfully UTF-8 is usually what you get nowadays, so it's a reasonable default path
[23:31:56] <gilberth> sham1: You still deal with it not being valid UTF-8.
[23:32:24] <sham1> Sure, but that seems to be an uncommon thing nowadays, although that's a good point
[23:32:42] <gilberth> And besides, when I generate HTML, JSON, what ever I stick to 7-bit US-ASCII and escape.
[23:33:30] <sham1> Having a fallback on Latin-1 is reasonable for IRC. As for HTML or JSON or whatever, sure
[23:34:05] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[23:34:20] <gilberth> sham1: The uncommon thing is: UTF-8 is often the default, but for instance not so with HTML, where it is ISO-8859-1 and you can't override a Content-Type HTTP header with a META tag. Therefore: I am only safe, when I use US-ASCII only.
[23:34:37] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:34:41] <gilberth> HTML defaults to ISO-8859-1.
[23:34:43] <sham1> I see
[23:35:10] <aeth> gilberth: nicks usually use a very restricted encoding vs everything else (except perhaps channel names, although some unicode channel names exist, e.g. neo-freenode had it, at least initially)
[23:35:22] <aeth> it's not guaranteed, ofc
[23:35:31] <aeth> usually it's a configuration that's chosen
[23:36:08] <gilberth> And, I have that problem with my very own CL-HTTPD. It announces Content-Type; text/html; charset=iso-8859-1 and I can't override it with a META tag. I could try to fix my setup but I hesitate to do so, as the clim-spec in fact is ISO-8859-1.
[23:36:15] <sham1> Depends mostly on the server, yeah, although there is a (somewhat frozen-looking) effort at speccing Unicode channel and nicknames
[23:36:53] <gilberth> nicks are strange as uppercase { is [. e.g.
[23:36:57] <aeth> the problem is that you'd have to deal with similar looking symbols (e.g. all of the "o" stuff)
[23:37:04] <gilberth> And nicks are case insensitive.
[23:37:15] <aeth> and you'd also have to exclude things that are reasonably expected used as separators/prefixes
[23:37:40] <aeth> like &, ~, @, %, +, #, \,, \ , etc.
[23:38:58] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 272 seconds)
[23:39:04] <gilberth> Hmm, nicks are specified as A-Za-z0-9{|}[\]^` and - and _. IIRC.
[23:39:46] <aeth> standard, yes
[23:40:14] <aeth> however, any superset that doesn't use problematic characters (such as the ones I listed, and more) might be usable
[23:40:32] <aeth> (anything that's a PREFIX cannot be used because you have to parse and remove the PREFIX when getting the reply from NAMES on e.g. channel join)
[23:40:33] <gilberth> With {|}[\] being accented chars/umlauts --- evil echo from a 7-bit past.
[23:40:37] <shka> https://github.com/robhagemans/hoard-of-bitfonts
[23:40:38] -ixelp- GitHub - robhagemans/hoard-of-bitfonts: turns out I like bitmap fonts
[23:40:40] <aeth> (at the very least, a PREFIX cannot be the first character)
[23:40:57] <aeth> (channels don't really care though e.g. ## is fine and so is ### etc.)
[23:42:01] <aeth> IRC clients can mostly support Unicode in nicks these days
[23:42:04] <aeth> e.g. irssi
[23:42:06] <gilberth> You talk about prefixes on the message/line level?
[23:42:32] <aeth> gilberth: I mean e.g. for libera
[23:42:35] <aeth> -!- PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=Libera.Chat STATUSMSG=@+ CASEMAPPING=rfc1459 NICKLEN=16 MAXNICKLEN=16 CHANNELLEN=50 ...
[23:42:58] <aeth> when you get the raw /NAMES result (automatically sent on channel join) the NAMES have the prefix
[23:43:39] <gilberth> Ah, ok, now I know what you mean. The bad, curly hair that I have here.
[23:43:55] <aeth> so are you gilberth or @gilberth? The correct way to handle that is to look for the RPL_ISUPPORT on connect, parse the PREFIX, determine that @ and + are prefixes, and then on the RPL_NAMREPLY (on e.g. channel join) @gilberth is gilberth role +o
[23:44:15] <aeth> however I don't know if you also have +v and can't tell unless you -o yourself or if I was around when you received +v
[23:44:32] <aeth> there is an IRCv3 proposal or accepted extension or whatever that would show all of the roles so you'd be e.g. @+gilberth
[23:44:38] <gilberth> Do I have a +v?
[23:44:41] <sham1> Yeah, multi-prefix
[23:45:15] <aeth> generally the prefix is some subset of ~&@%+
[23:45:24] <aeth> usually @+ or ~&@%+
[23:45:26] <aeth> not always, though
[23:45:39] <aeth> neo-freenode is afaik !@%+ for some strange reason of wanting to break poorly written clients or whatever
[23:45:50] <gilberth> Yeah, but won't be anything not a member of the set of legal names for a nick automatically be a prefix?
[23:46:25] <aeth> you don't necessarily know what the legal names are
[23:46:34] <aeth> everyone uses an extension
[23:46:46] <aeth> iirc the original rfc doesn't include _ or - or both but everyone has those
[23:47:09] <gilberth> Hmm.
[23:47:32] <aeth> So you should assume that anything that's not a protocol separator (so ! is actually safely excluded, as is @, since that's part of the source format e.g. !aeth!user@host) is potentially a valid part of the name's encoding
[23:48:14] <aeth> unless it shows up in PREFIX in which case it's illegal, at least at the starting character, but if multi-prefix is accepted, it's illegal period (although in theory you could still have foo+ as long as there's one non-prefix after the prefix(es), but really shouldn't)
[23:48:47] *** Quits: rogersm (~rogersm@92.59.121.109) (Quit: Leaving...)
[23:49:26] <gilberth> It would be no enough to outrule prefix chars as a first char.
[23:49:36] <aeth> I think you can't start with numbers in the spec, too
[23:50:02] <aeth> so you could probably just safely say: alphabetic(alphanumeric)*
[23:50:12] <aeth> with any kind of non-alphanumeric reserved for potential PREFIX
[23:50:14] <gilberth> No, but that too could be an extension. Perhaps some that you are not aware of.
[23:50:32] <aeth> but, yeah, to be truly safe, you *MUST* parse PREFIX
[23:50:33] <gilberth> And then you have the difficulty to tell hosts from nicks apart.
[23:50:52] <aeth> and if the IRCd lets + be both a PREFIX and part of the start of the nick, then it's broken
[23:51:05] <gilberth> Agreed.
[23:51:18] <aeth> no way to distinguish between +aeth and voiced aeth if it does
[23:51:21] <aeth> at least, on join
[23:51:23] <gilberth> And "." would be broken too.
[23:51:36] <aeth> as would any trailing !
[23:51:40] <gilberth> aeth: In NAMES, yes.
[23:51:44] <aeth> in theory you could allow one !
[23:51:57] <aeth> it would be absurd, though
[23:52:30] <gilberth> No, you can't the ! suffix as in gilberth!~joe@foo.net is optional.
[23:52:41] <aeth> right, however
[23:52:52] <aeth> you could allow a leading ! in nicks and still be unambiguous
[23:52:56] <aeth> it would have to be leading, though
[23:53:01] <gilberth> As is the @. So when you see "gilberth!joe", what would it be?
[23:53:26] <gilberth> Anyhow "foo" could either be a host or a nick. Strange.
[23:53:46] <aeth> in practice "foo" is either a server or a nick
[23:54:02] <gilberth> Yes, I mean server.
[23:54:05] <aeth> or, possibly a channel as well, depending on the thing
[23:54:18] <aeth> complete channel-server-nick unification would simplify the protocol (-:
[23:54:18] <gilberth> Still more strange.
[23:54:51] <aeth> nothing's wrong with treating the server as essentially a nick though
[23:55:12] <aeth> unless for some very, very strange reason you can set your nick as the same as a server, but that would affect routing at the ircd level
[23:55:16] <gilberth> So when you get a PRIVMSG from "foo" you can't tell what it is. Unless you share a channel with a nick "foo".
[23:55:28] <aeth> You kind of have to forbid . and : in nicks
[23:55:36] <aeth> (: being IPv6 unnamed server)
[23:55:48] <aeth> and in turn require . or : in servers
[23:55:57] <aeth> but that's at the server, not client, level
[23:55:57] <gilberth> Yes, as it is. But the grammar says, that "foo" too could be server name.
[23:56:09] <aeth> and, yes, foo could be a server
[23:56:16] <aeth> it's only a problem if "foo" is both a nick and a server
[23:56:36] <aeth> similarly, "foo" could be a channel if channels don't need a prefix (and # isn't the only prefix)
[23:56:45] <aeth> and, again, there can only be one
[23:56:50] <aeth> since where does the PRIVMSG go
[23:56:51] <gilberth> I'd like to know where a server or a nick sends me a NOTICE/PRIVMSG message.
[23:57:09] <gilberth> whether ;sigh
[23:57:57] <gilberth> I guess in practice this is not a problem as you see FQDNs on public networks.
[23:58:41] <aeth> or IPs
[23:58:51] <aeth> I don't know if any ircd would do that, but in theory you could see it
[23:58:57] <aeth> and wouldn't have an issue as long as . and : are banned in nicks
[23:59:04] <gilberth> And on a private network you probably recognize that "closos-1" is her server down the hall.
[23:59:29] <aeth> but in general, symbols shouldn't be allowed in nicks with few exceptions since they could be used as various prefixes or extended separators other things
[23:59:45] <aeth> symmetric symbols are good exceptions, such as [] and {}
