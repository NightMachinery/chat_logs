[00:05:58] <FromDiscord> <ynfle (ynfle)> Is there a way to display a result of modifying an image with arraymancer like in matlab other than saving it
[00:07:15] <FromDiscord> <deech> I have an `object` with a single field, eg. `type O = object; val: pointer` that I would like to export to C but instead of `struct O { void val }` I would like to generate `typedef void O`, is there a pragma that let's me do that?
[00:07:49] <FromDiscord> <deech> For reasons of inheritance it needs to be an `object`.
[00:07:51] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-codegendecl-pragma might do the trick
[00:08:13] <FromDiscord> <deech> Tried, that doesn't work in a type declaration.
[00:09:07] <FromDiscord> <Elegantbeef> Hmm can one do `noDecl` then `emit` after...?
[00:09:29] <FromDiscord> <Recruit_main707> i guess
[00:33:03] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[00:33:36] <FromDiscord> <reilly> In reply to @impbox "A lot of imgui": https://discord.com/channels/371759389889003530/371759389889003532/902968489009086484 :)
[00:35:38] <FromDiscord> <impbox [ftsf]> Ahh cool i missed that one
[00:52:14] <FromDiscord> <Imperatorn> sent a long message, see http://ix.io/3D6o
[00:55:23] <FromDiscord> <reilly> In reply to @Imperatorn "Is there any shorthand": https://nim-lang.org/docs/sugar.html
[00:56:57] <FromDiscord> <Imperatorn> I'm so used to it from other languages 😔
[00:57:03] <FromDiscord> <haxscramper> `import std/sugar` and then literally the code you just wrote
[00:57:11] <FromDiscord> <haxscramper> `x => x.len < 6`
[00:58:21] <FromDiscord> <Imperatorn> Nim rox
[01:10:08] <FromDiscord> <Imperatorn> sent a code paste, see https://play.nim-lang.org/#ix=3D6r
[01:12:33] <FromDiscord> <Imperatorn> Wait... The terminology here for Nim is arrays are compile time entities, right?
[01:12:36] <FromDiscord> <Imperatorn> nvm
[01:12:43] <FromDiscord> <impbox [ftsf]> Arrays are fixed size at compile time
[01:12:46] <FromDiscord> <Imperatorn> I understand now
[01:12:58] <FromDiscord> <impbox [ftsf]> Sequences are variable size
[01:13:20] <FromDiscord> <impbox [ftsf]> Converting from array to seq is doable but not the other way around since the size of the seq isn't know
[01:13:44] <FromDiscord> <impbox [ftsf]> You can fill an array with the contents of a seq
[01:14:46] <FromDiscord> <Imperatorn> Yeah, I saw there are open array also, but as I understand it those are only bound to parameters
[01:14:57] <FromDiscord> <etan> There is also `filterIt` in `sequtils` , e.g., `nums.filterIt(it < 3)`
[01:15:11] <FromDiscord> <impbox [ftsf]> Yeah, it's basically a generic which takes either seq or array
[01:15:44] <FromDiscord> <impbox [ftsf]> openarray is when you want your proc to work with either seqs or arrays and don't care
[01:16:35] <FromDiscord> <impbox [ftsf]> And keepItIf you want in place filtering
[01:17:05] <FromDiscord> <Imperatorn> Oh, ok.. In general I try to stay immutable as long as possible, but good to know
[01:18:30] <FromDiscord> <etan> Immutable / Mutable is not related to `array`  vs `seq` . You can use a `static:` block to force compile-time execution of an expression, or assign it to a `const` .↵`array`  is for fixed-size / `seq`  is for dynamic-size. As the `filter`  result depends on the predicate, it returns a `seq` .
[01:18:32] <FromDiscord> <Imperatorn> I only asked about the conversion at first because when I echo a list I get that @ in the front
[01:18:48] <FromDiscord> <Imperatorn> In reply to @etan "Immutable / Mutable is": "keepItIf you want in place filtering"
[01:19:55] <FromDiscord> <impbox [ftsf]> Depends on if you want to alloc or not
[01:20:08] <FromDiscord> <Imperatorn> Oh wait, Nim has templates
[01:20:19] <FromDiscord> <impbox [ftsf]> Yep, they're handy
[01:20:59] <FromDiscord> <etan> BTW: When we are already at arrays – I recently got a PR into Nim that fixes the conversion from `static[seq[T]]` (a compile-time seq constant) to `openArray` .↵Is there a timeline somewhere to roughly see upcoming Nim release dates? Especially interested in a new 1.2 release.
[01:21:29] <FromDiscord> <impbox [ftsf]> Maybe ask in internal
[01:21:37] <FromDiscord> <etan> Thanks!
[01:22:42] <FromDiscord> <Imperatorn> In reply to @etan "BTW: When we are": When you say 1.2 what do you refer to then?
[01:23:34] <FromDiscord> <etan> Nim has several versions, i.e., 1.2 / 1.4 / 1.6. I'm on a codebase that's still on Nim 1.2.
[01:23:54] <FromDiscord> <Imperatorn> Oh, I understand
[01:25:36] <FromDiscord> <Imperatorn> Yeah would ne nice to have something similar to this, but ofc that depends on how frequent releases are https://media.discordapp.net/attachments/371759389889003532/903039252118532178/unknown.png
[01:26:23] <FromDiscord> <Elegantbeef> Well iirc 1.6 is going to be the new LTS so if you arent on it now you should be 😛
[01:27:03] <FromDiscord> <Elegantbeef> Backporting requires work so doubt they want to support stable of 3 versions
[01:27:17] <FromDiscord> <Imperatorn> Probably not
[01:27:21] <FromDiscord> <aura> whats up
[01:27:28] <FromDiscord> <Imperatorn> !down
[01:27:41] <FromDiscord> <aura> ive always been too lazy to learn c and c++ but this seems to be easier tbh
[01:27:51] <FromDiscord> <aura> and compiles to them and rust
[01:27:55] <FromDiscord> <aura> i like the syntax
[01:28:13] <FromDiscord> <Elegantbeef> Nim doesnt compile to rust 😀
[01:28:18] <FromDiscord> <Imperatorn> Well, yeah. Since I know C/C++ I can tell you it is
[01:28:24] <FromDiscord> <Imperatorn> In reply to @Elegantbeef "Nim doesnt compile to": Thank god
[01:29:56] <FromDiscord> <Imperatorn> Btw are core contribs in here or is it the forum one should look
[01:30:34] <FromDiscord> <Elegantbeef> They hang out in internals
[01:30:34] <FromDiscord> <Elegantbeef> Some non core contributors hang out here like this joe schmoe named beef
[01:30:34] <FromDiscord> <haxscramper> Depends on what you need to talk about though
[01:31:05] <FromDiscord> <Imperatorn> Cool, just curious 🙂
[01:31:06] <FromDiscord> <aura> ohh okay
[01:31:10] <FromDiscord> <aura> still very cool
[01:32:27] <FromDiscord> <aura> why do you dislike rust?
[01:32:32] <FromDiscord> <Imperatorn> I haven't absorbed enough yet after 4 hours of Nim to have questions on that level. But good to know
[01:32:37] <FromDiscord> <Imperatorn> In reply to @aura "why do you dislike": Syntax from hell
[01:32:47] <FromDiscord> <aura> its not bad
[01:32:55] <FromDiscord> <Gumber> you need to defend why you like rust here
[01:33:03] <FromDiscord> <Gumber> no one here needs to explain why they dislike rust
[01:33:08] <FromDiscord> <Gumber> to us you're the weirdo 🙂
[01:33:33] <FromDiscord> <Gumber> I'm kidding of course 😉 but seriously I doubt many folks in here are huge rust fans, otherwise they'd probably be using Rust
[01:33:38] <FromDiscord> <ynfle (ynfle)> What's the syntax for changing lineinfo with a pragma?
[01:33:52] <FromDiscord> <aura> fanboyish server
[01:34:06] <FromDiscord> <Imperatorn> In reply to @aura "its not bad": Bad is subjective of cource. It's just verbose
[01:34:07] <FromDiscord> <Gumber> rust discord? yeah
[01:34:16] <FromDiscord> <Gumber> it is definitely a fanboyish server
[01:34:19] <FromDiscord> <aura> this is
[01:34:22] <FromDiscord> <Gumber> heh
[01:34:24] <FromDiscord> <aura> a lot worse
[01:34:35] <FromDiscord> <Gumber> are you here to talk about Nim or talk about Rust?
[01:34:46] <FromDiscord> <Gumber> because we like to focus on Nim here
[01:34:50] <FromDiscord> <impbox [ftsf]> There's plenty of detractors too, not just fans
[01:34:54] <FromDiscord> <aura> Anything I feel like that doesn't break rules
[01:35:10] <FromDiscord> <Gumber> okay well please keep the talk in #main focused on Nim
[01:35:11] <FromDiscord> <aura> We're talking about both
[01:35:13] <FromDiscord> <impbox [ftsf]> But the topic here is nim not other language, they have their own servers
[01:35:18] <FromDiscord> <Imperatorn> Having the borrow checker forced upon you makes it so that you have to type more on average to do simple things
[01:35:28] <FromDiscord> <Gumber> if you want to talk about Rust there are other channels / servers to do that in
[01:35:42] <FromDiscord> <aura> mmmm
[01:35:51] <FromDiscord> <aura> sounds like
[01:35:55] <FromDiscord> <aura> I don't care
[01:36:04] <FromDiscord> <hips> what's wrong with being a fanboy :O
[01:36:06] <FromDiscord> <Gumber> don't care about what?
[01:36:17] <FromDiscord> <aura> I'm talking about nim
[01:36:24] <FromDiscord> <aura> so it's suitable here
[01:36:28] <FromDiscord> <haxscramper> Can you maybe stop this back and forth shit throwing?
[01:36:31] <FromDiscord> <ynfle (ynfle)> > What's the syntax for changing lineinfo with a pragma?↵Anyone? I remember seeing code like this in the past month or two
[01:36:53] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#pragmas-line-pragma
[01:37:00] <FromDiscord> <Gumber> yeah - I'll entertain this for about one more second but keep the topic focused on Nim please or find somewhere else to be
[01:37:18] <FromDiscord> <aura> Hmmmmmmmmmmmmmmmmmmmmm
[01:37:22] <FromDiscord> <aura> okay nimrod
[01:37:31] <FromDiscord> <Gumber> bye
[01:39:12] <FromDiscord> <jоshuа> In reply to @Imperatorn "Syntax from hell":  https://media.discordapp.net/attachments/371759389889003532/903042675391987732/unknown.png
[01:39:31] <FromDiscord> <ynfle (ynfle)> @beef, you da man once again. Using you identify as male...
[01:40:13] <FromDiscord> <Elegantbeef> Yea joshua that's a casestatement 😀
[01:40:24] <FromDiscord> <Elegantbeef> How dare you ynfle i'm "the beef" 😛
[01:40:48] <FromDiscord> <impbox [ftsf]> Graduated Bovine University
[01:40:53] <FromDiscord> <ynfle (ynfle)> Is it mutually exclusive?
[01:41:27] <FromDiscord> <Elegantbeef> Top of my class in grass feeding!
[01:41:47] <FromDiscord> <Elegantbeef> To finish this joke for ynfle Grade A alberta Beef
[01:44:33] <FromDiscord> <ynfle (ynfle)> I prefer Argentinian imported meat
[01:53:59] <FromDiscord> <Imperatorn> Well done
[01:54:15] <FromDiscord> <Imperatorn> Anyway ttyl guys, thanks for helping out
[01:55:52] <FromDiscord> <Imperatorn> Seems to have an upward trend?↵https://tjpalmer.github.io/languish/#y=mean&names=nim
[01:55:55] <FromDiscord> <Imperatorn> gn
[02:11:11] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[02:11:31] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Client Quit)
[02:22:12] <FromDiscord> <IsaacPaul> sent a long message, see http://ix.io/3D6J
[02:23:56] <FromDiscord> <IsaacPaul> Yea that's all I was able to come up with 😛 lol
[02:24:00] <FromDiscord> <IsaacPaul> (edit) "😛" => ": p"
[02:24:07] <FromDiscord> <IsaacPaul> (edit) 04removed "lol"
[02:26:20] <FromDiscord> <geekrelief> Any advice on how I can get this iterator to work? Nim says I need a return type. https://play.nim-lang.org/#ix=3D6K
[02:26:59] <FromDiscord> <geekrelief> I'm using the `ptr_math` package so `p += 1` will work in my code, but I just want to get past this error.
[02:31:11] <FromDiscord> <ynfle (ynfle)> Weird message
[02:31:41] <FromDiscord> <geekrelief> In reply to @ynfle (ynfle) "Weird message": yeah, in theory it should work right?
[02:33:09] <FromDiscord> <geekrelief> hmmm if I change the return type from `ptr T` and `yield 1` it still errors the same
[02:33:32] <FromDiscord> <ynfle (ynfle)> Well one isn't type of ptr T
[02:34:10] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3D6P
[02:34:24] <FromDiscord> <Elegantbeef> I dont get why you're iterating this way do you know the count?
[02:34:37] <FromDiscord> <Elegantbeef> Or do you just have start/end?
[02:34:38] <FromDiscord> <geekrelief> `p != ending` is the check
[02:35:21] <FromDiscord> <geekrelief> I don't know the count I just have a start and end `ptr T`
[02:36:13] <FromDiscord> <Elegantbeef> Ok
[02:36:21] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3D6Q
[02:36:45] <FromDiscord> <ynfle (ynfle)> https://play.nim-lang.org/#ix=3D6R
[02:36:52] <FromDiscord> <ynfle (ynfle)> @geekrelief try this
[02:37:27] <FromDiscord> <geekrelief> k, can we make pointer -> `ptr T`  I actually need to return ptr T
[02:37:37] <FromDiscord> <Elegantbeef> Yea yea i'm on it!
[02:41:15] <FromDiscord> <impbox [ftsf]> beef you should set up a tip jar for nim help
[02:41:32] <FromDiscord> <geekrelief> oh man
[02:41:41] <FromDiscord> <geekrelief> silly me
[02:41:46] <FromDiscord> <geekrelief> the `` is in the wrong place!
[02:42:15] <FromDiscord> <Elegantbeef> Even so what you're doiing is wrong
[02:42:21] <FromDiscord> <geekrelief> not `items[T]` -> `items[T]` .  I've made this mistake twice!
[02:42:23] <FromDiscord> <Elegantbeef> You're incrementing a pointer which isnt valid nim
[02:42:36] <FromDiscord> <geekrelief> yeah I'm using `ptr_math`
[02:42:40] <FromDiscord> <Elegantbeef> Ah
[02:42:41] <FromDiscord> <geekrelief> https://github.com/kaushalmodi/ptr_math/blob/main/src/ptr_math.nim
[02:42:45] <FromDiscord> <Elegantbeef> Well then fuck you 😛
[02:42:57] <FromDiscord> <geekrelief> lol
[02:43:03] <FromDiscord> <geekrelief> sorry 😄
[02:43:13] <FromDiscord> <Elegantbeef> I'm kidding of course!
[02:43:22] <FromDiscord> <geekrelief> I love Nim error messages!
[02:43:35] <FromDiscord> <Elegantbeef> procs/types give the proper error
[02:44:12] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3D6S
[02:44:55] <FromDiscord> <ynfle (ynfle)> bug report...
[02:44:58] <FromDiscord> <geekrelief> yeah
[02:45:11] <FromDiscord> <geekrelief> I'll create an issue
[02:45:26] <FromDiscord> <Elegantbeef> Impbox if i made a tipjar for help i'd have to quit being an asshole
[02:45:32] <FromDiscord> <Elegantbeef> Or maybe that's what the tip buys you
[02:45:54] <FromDiscord> <Elegantbeef> For each dollar spent i restrain from calling you a name atleast once
[02:46:28] <FromDiscord> <ynfle (ynfle)> @geek does it work? Because I get a different error message
[02:46:54] <FromDiscord> <Elegantbeef> They've got ptrmath so they can do ptr += 1 like an animal
[02:47:11] <FromDiscord> <ynfle (ynfle)> No, the error message is the lent has to be object type
[02:47:20] <FromDiscord> <Elegantbeef> Ah the lent does make no sense
[02:47:20] <FromDiscord> <geekrelief> 1 sec let me try it in my real codebase
[02:47:31] <FromDiscord> <Elegantbeef> a lent pointer is pointless
[02:48:06] <FromDiscord> <geekrelief> Yeah I see your point. It's my first time using a custom iterator 🙂
[02:48:23] <FromDiscord> <Elegantbeef> Ah make sense just looked at one of the lent iterators and copied it
[02:48:33] <FromDiscord> <geekrelief> yah
[02:48:58] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3D6U
[02:49:08] <FromDiscord> <Elegantbeef> No point in putting `inline`
[02:49:12] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3D6V
[02:49:12] <FromDiscord> <ynfle (ynfle)> iterators are inline
[02:49:24] <FromDiscord> <geekrelief> ok I guess the manual needs updating?
[02:49:31] <FromDiscord> <Elegantbeef> posssibly
[02:49:40] <FromDiscord> <Elegantbeef> `inline` is the default iterator calling convention
[02:49:54] <FromDiscord> <geekrelief> https://nim-lang.github.io/Nim/manual.html#iterators-and-the-for-statement
[02:51:45] <FromDiscord> <ynfle (ynfle)> sent a code paste, see https://play.nim-lang.org/#ix=3D6X
[03:03:35] <FromDiscord> <geekrelief> In reply to @ynfle (ynfle) "@geek minimal example if": Thanks. I just posted my sample code.  https://github.com/nim-lang/Nim/issues/19063
[03:05:27] <FromDiscord> <ynfle (ynfle)> @geek the manual you are looking at is on devel
[03:05:27] <FromDiscord> <Elegantbeef> I mean 1.6 is out so why go to devel?
[03:05:31] <FromDiscord> <ynfle (ynfle)> They just happened to link to devel
[03:05:58] <FromDiscord> <geekrelief> In reply to @Elegantbeef "I mean 1.6 is": why not devel? I'm on devel
[03:06:02] <FromDiscord> <Elegantbeef> Well it doesnt matter presently
[03:06:10] <FromDiscord> <Elegantbeef> Devel is pretty much 1.6 with minor changes
[03:06:17] <FromDiscord> <ynfle (ynfle)> @geek also, use minimal example in issue, the specific use case isn't relevant
[03:06:37] <FromDiscord> <geekrelief> k I'll edit it
[03:35:48] *** Joins: TakinOver (~quassel@193.27.13.150)
[04:20:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:03:52] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b028:ac3c:c115:3dc4:2cd9:50c1)
[05:13:22] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:03:08] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[06:21:57] *** Quits: TakinOver (~quassel@193.27.13.150) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:52:58] <FromDiscord> <evoalg> to get the max value in a seq containing ints, I can't seem to do: max(myseq), so I have to do: myseq[maxIndex(myseq)] ... is that really what I should do?
[06:53:15] <FromDiscord> <Elegantbeef> `myseq[^1]`?
[06:53:39] <FromDiscord> <evoalg> not the value of the max index, but the max value
[06:53:55] <FromDiscord> <Elegantbeef> `mySeq.high`?
[06:54:41] <FromDiscord> <evoalg> that's the max index, but I want the max value that myseq holds
[06:55:06] <FromDiscord> <Elegantbeef> you want the highest value stored in the seq?
[06:55:15] <FromDiscord> <evoalg> yes
[06:56:49] <FromDiscord> <evoalg> maxIndex returns the index of the maximum value of a seq, so maxIndex(myseq) returns the index of that highest value stored in seq, but to get that actual value, I seem to have to do: myseq[maxIndex(myseq)] ... other programming languages it's just "max(myseq)"
[06:57:24] <FromDiscord> <impbox [ftsf]> Sounds like something that would be in a statistics library
[06:58:27] <FromDiscord> <evoalg> ahhh ... I tried googling and looked at math, sequtils but they didn't have it ... and I couldn't see anything else in google .. I'll try stat library...
[06:59:23] <FromDiscord> <Rika> https://nim-lang.org/docs/sequtils.html#maxIndex%2CopenArray%5BT%5D
[06:59:59] <FromDiscord> <Elegantbeef> wait max should work
[07:00:20] <FromDiscord> <Rika> https://nim-lang.org/docs/system.html#max%2CopenArray%5BT%5D
[07:00:27] <FromDiscord> <Elegantbeef> !eval var a = @[10, 20, 5, 100, 3]; echo a.max
[07:00:30] <NimBot> 100
[07:00:58] <FromDiscord> <evoalg> oh it works out of the box? ... gosh must be my code then ... thanks!
[07:01:21] <FromDiscord> <Elegantbeef> If you're doing `yourSeq.max = someVal` it wont work
[07:02:31] <FromDiscord> <evoalg> it works ... gosh I dunno what I was doing before ... hehe it was driving me a bit crazy ... thank you all for your help once again!
[07:03:12] <FromDiscord> <evoalg> (... and I thought it was strange that I could do "sum" but not "max" hehe)
[07:14:00] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b028:ac3c:c115:3dc4:2cd9:50c1) (Remote host closed the connection)
[07:16:25] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b028:ac3c:c115:3dc4:2cd9:50c1)
[07:27:22] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b028:ac3c:c115:3dc4:2cd9:50c1) (Remote host closed the connection)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:55:00] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:09:28] <FromDiscord> <theangryepicbanana> In reply to @Elegantbeef "If you're doing `yourSeq.max": wait this is a cool idea though
[08:11:03] <FromDiscord> <Elegantbeef> Sure it's doable just not clear what it should do 😛
[08:11:55] <FromDiscord> <theangryepicbanana> it would assign the max value in a seq to something else, no?
[08:12:11] <FromDiscord> <Elegantbeef> It could or it could just add a new value that's max
[08:12:19] <FromDiscord> <Elegantbeef> Both would be technically correct
[08:12:37] <FromDiscord> <Elegantbeef> I'm kidding mostly, it should mutate
[08:12:40] <FromDiscord> <theangryepicbanana> yeah but that seems less helpful and less intuitive
[08:13:18] <FromDiscord> <theangryepicbanana> ah ok
[08:13:54] <FromDiscord> <Elegantbeef> But luckily it's easy to implement https://play.nim-lang.org/#ix=3D7O
[08:14:20] <FromDiscord> <theangryepicbanana> yeah I figured, pretty neat
[09:27:15] <NimEventer> New Nimble package! db_nimternalsql - An in-memory SQL database library, see https://github.com/rehartmann/nimternalsql
[09:57:29] <FromDiscord> <Revenant> hey there, just upgraded to 1.6.0 and i'm getting a lot of HoleEnumConv warnings in my code
[09:57:34] <FromDiscord> <Revenant> any way to suppress only those?
[09:57:46] <FromDiscord> <Revenant> can't use the hint disabling mechanism, because it's not a hint...
[09:59:24] <FromDiscord> <Revenant> ooooooo, just tried `warning "HoleEnumConv", false` and it worked!
[09:59:43] <FromDiscord> <Revenant> should be probably documented in the manual, though
[10:01:03] <FromDiscord> <Elegantbeef> It's in the compiler user guide and on the 1.6.0 changelogs
[10:01:44] <FromDiscord> <Revenant> cheers, but info about disabling hints is in the manual
[10:01:58] <FromDiscord> <Revenant> it's a bit counterintuitive to start looking for missing info in the compiler docs 🙂
[10:02:09] <FromDiscord> <Revenant> if you don't find it in the manual
[10:02:24] <FromDiscord> <Elegantbeef> The compiler docs document the compiler interface
[10:02:42] <FromDiscord> <Elegantbeef> Guess you're using the pragma though
[10:03:01] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/nimc.html#compiler-usage-list-of-warnings for reference
[10:03:36] <FromDiscord> <Revenant> yes yes, but the manual also partially contains info that's in the compiler manual, that is why it's misleading
[10:04:00] <FromDiscord> <Revenant> thanks for that link
[10:04:29] <FromDiscord> <Revenant> i'm talking about this
[10:04:30] <FromDiscord> <Revenant> https://nim-lang.org/docs/manual.html#pragmas-disabling-certain-messages
[10:04:39] <FromDiscord> <Revenant> that's in the manual but it only mentions hints
[10:04:58] <FromDiscord> <Elegantbeef> Yea it should mention warning/hints and link to the compiler guide for a list of them
[10:05:06] <FromDiscord> <Rika> Well it does
[10:05:09] <FromDiscord> <Rika> At the first line
[10:05:19] <FromDiscord> <Rika> Just the example doesn’t show warning disabling
[10:05:20] <FromDiscord> <Revenant> yes, because some people might just give up at that point instead of looking everywhere 🙂
[10:05:31] <FromDiscord> <Elegantbeef> Well time for a PR to docs revenant 😛
[10:05:38] <FromDiscord> <Revenant> haha yeah 😄
[10:05:47] <FromDiscord> <Revenant> i might do that actually
[10:05:47] <FromDiscord> <Rika> Smh beef you’re lazy why not do it yourself
[10:05:54] <FromDiscord> <Rika> I’m joking
[10:05:57] <FromDiscord> <Revenant> noticed the manual is lagging behind quite a bit in general
[10:05:58] <FromDiscord> <Elegantbeef> too busy looking at the VM
[10:06:11] <FromDiscord> <Rika> Man are you in love with it or something
[10:06:23] <FromDiscord> <Elegantbeef> No i'm trying to clean it up/optimize it
[10:07:22] <FromDiscord> <Elegantbeef> I did find something that can cause a sizable compilation impact if using macros so take that 😛
[10:10:41] <FromDiscord> <Rika> What is it
[10:10:44] <FromDiscord> <Revenant> umm, disabling warnings work when provided as a compiler flag, but how do i do it per file? or per proc would be even better
[10:10:51] <FromDiscord> <Revenant> tried this at the top of the file `{.warningHoleEnumConv:off.}`
[10:10:58] <FromDiscord> <Rika> Probably using push
[10:11:03] <FromDiscord> <Revenant> that just gives me an error
[10:11:05] <FromDiscord> <Rika> Push and pop
[10:11:06] <FromDiscord> <Revenant> `Error: cannot attach a custom pragma to 'persistence'`
[10:11:10] <FromDiscord> <Elegantbeef> you dont need to push it
[10:11:30] <FromDiscord> <Rika> In reply to @Revenant "tried this at the": Isn’t this missing the angle brackets
[10:11:33] <FromDiscord> <Rika> Sorry
[10:11:37] <FromDiscord> <Rika> Square brackets
[10:11:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3D8b
[10:11:50] <FromDiscord> <Rika> Am I going insane
[10:12:00] <FromDiscord> <Revenant> right...
[10:12:00] <FromDiscord> <Elegantbeef> or do `{.push warningHoleEnumConf.}` with `{.pop.}`
[10:12:00] <FromDiscord> <Revenant> thanks
[10:12:13] <FromDiscord> <Revenant> the manual actually contains some references to that in an offhand manner
[10:12:22] <FromDiscord> <Revenant> in the examples
[10:12:58] <FromDiscord> <Revenant> yeah so a general comment, and don't take it a wrong way, i think it should be made easy to find this info in the manual for a clueless person like me 🙂
[10:13:25] <FromDiscord> <Revenant> anyway, thanks, that gets me past my problems for now 🙂
[10:14:40] <FromDiscord> <Revenant> that push pragma thing is nifty
[10:17:17] <FromDiscord> <Elegantbeef> Though sadly doesnt work with destructors so you cannot error selectively on implicit copies
[10:17:29] <FromDiscord> <Elegantbeef> And you cannot make your own
[10:18:47] <FromDiscord> <Rika> I think the push pragma is a hack
[10:19:20] <FromDiscord> <Yardanico> why?
[10:19:46] <FromDiscord> <Yardanico> imo it's actually a pretty good alternative to indentation if you want to switch some stuff for a big block of code
[10:19:52] <FromDiscord> <Revenant> seems like you can only use it around proc/template/etc declarations, but not inside them
[10:19:55] <FromDiscord> <Revenant> still, that's good enough
[10:20:28] <FromDiscord> <Revenant> tried to narrow it down the usage to just a single line, but that didn't work. had to wrap the whole proc.
[10:20:59] <FromDiscord> <Elegantbeef> given the work why not just do `enum.ord.otherEnum`?
[10:22:37] <FromDiscord> <Revenant> well if you have a HoleyEnum, say E, whenever you do E(intval), you get the warning
[10:23:04] <FromDiscord> <Revenant> even if you use `enumutils`  and do `E.items`, you get the warning
[10:23:27] <FromDiscord> <Revenant> so to me it seems the only way it just to suppress it
[10:23:34] <FromDiscord> <Revenant> (edit) "it" => "is"
[10:23:56] <FromDiscord> <Revenant> now i have this which is fine
[10:24:08] <FromDiscord> <Revenant> sent a code paste, see https://play.nim-lang.org/#ix=3D8e
[10:24:17] <FromDiscord> <Revenant> (edit) 
[10:24:39] <FromDiscord> <Revenant> actually, could get rid of the `name`...
[10:24:41] <FromDiscord> <Elegantbeef> `YourEnum(range[YourEnum.low.ord..YourEnum.high.ord](yourInt))`
[10:24:41] <FromDiscord> <Elegantbeef> Seems to work to me
[10:25:01] <FromDiscord> <Elegantbeef> you're catching an enum defect
[10:25:08] <FromDiscord> <Elegantbeef> Dont catch defects
[10:25:49] <FromDiscord> <Revenant> ok, but why does that matter if they're catchable?
[10:26:00] <FromDiscord> <Elegantbeef> Cause they're not always catachable
[10:26:07] <FromDiscord> <Elegantbeef> They're only catchable in some dialects
[10:26:09] <FromDiscord> <Rika> There is a setting that will not make them catchable
[10:26:23] <FromDiscord> <Revenant> hmm okay
[10:26:26] <FromDiscord> <Rika> It will crash the program instead
[10:26:37] <FromDiscord> <Elegantbeef> Nah it'll silently work
[10:26:51] <FromDiscord> <Elegantbeef> here is a write up about it https://forum.nim-lang.org/t/8342#53776
[10:27:04] <FromDiscord> <Revenant> hmm, `std/enumutils` doesn't seem that useful then
[10:29:55] <FromDiscord> <Revenant> well, your example still gives me the warning
[10:29:58] <FromDiscord> <Revenant> `Warning: conversion to enum with holes is unsafe: Foo(range[low(Foo).ord .. high(Foo).ord](5)) [HoleEnumConv]`
[10:30:05] <FromDiscord> <Elegantbeef> Odd
[10:30:10] <FromDiscord> <Elegantbeef> maybe i did it wrong 😀
[10:30:11] <FromDiscord> <Revenant> in any case, i'm happy with catching the defect for now 🙂 it works
[10:30:27] <FromDiscord> <Elegantbeef> Is this for a library or your own code?
[10:30:34] <FromDiscord> <Revenant> my own code
[10:30:47] <FromDiscord> <Revenant> i mean, some app i will release in binary form
[10:31:10] <FromDiscord> <Elegantbeef> Well as long as you build it so you can catch defects you'll be fine, but it's bad form
[10:31:14] <FromDiscord> <Revenant> yeah i get your point it can be problematic for a library that people are going to use in different ways on different platforms etc
[10:31:56] <FromDiscord> <Elegantbeef> So just disregard the defect then and ensure you never accidently disable catching defects 😛
[10:31:59] <FromDiscord> <Revenant> yeah, the only option is to suppress the warning, convert the result to string
[10:32:18] <FromDiscord> <Revenant> and if you instantiated a "hole", then this will be the stringified value: `2 (invalid data!)`
[10:32:47] <FromDiscord> <Revenant> then check if the string contains `(invalid data!)`... i thought using `symbolRank` will be less hacky
[10:33:06] <FromDiscord> <Revenant> ...but then i need to catch a defect 🤷‍♂️ hence i said, `enumutils` doesn't seem that useful, after all...
[10:33:32] <FromDiscord> <Elegantbeef> Yea this is the prefered solution imo but i'm biased 😀 https://forum.nim-lang.org/t/8188#52705
[10:33:36] *** Joins: pro (~pro@user/pro)
[10:35:37] <FromDiscord> <Revenant> thanks, probably this could go into the stdlib
[10:35:43] <FromDiscord> <Revenant> i'll try this
[10:35:57] <FromDiscord> <Revenant> guess it's a bit slower, but it doesn't actually matter in my case
[10:36:46] <FromDiscord> <Elegantbeef> It's 3 checks 1 of which is bitwise, so it's not overly complex
[10:41:27] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:03:49] *** Joins: casionaut (~casionaut@user/casionaut)
[11:23:36] <meowray> `var a: seq[cint]; a.reverse` generates something like `reverse_a_175((a0.p)->data, a0.len);` which may be a null pointer dereference.  Does reverse support empty seq?
[11:26:54] <FromDiscord> <haxscramper> !eval import std/algorithm; var a: seq[int]; a.reverse()
[11:26:58] <NimBot> <no output>
[11:27:25] <FromDiscord> <haxscramper> as you can see there is no failure in execution, so yes
[11:27:34] <FromDiscord> <Yardanico> @haxscramper wonder how that works though
[11:27:48] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3D8w
[11:28:29] <meowray> i get a failure by compiling with -fsanitize=undefined
[11:28:50] <meowray> for-submit.c:2057:23: runtime error: member access within null pointer of type 'struct tySequence__9apztJSmgERYU8fZOjI4pOg_Content'
[11:29:51] <FromDiscord> <Yardanico> well nim doesn't always play nice with C compiler sanitizers like this :)
[11:29:56] <FromDiscord> <Yardanico> especially refc
[11:30:00] <FromDiscord> <haxscramper> I guess it has something to do with pointer magic
[11:33:57] <meowray> ok, i believe `var a: seq[int]; a.reverse()` is an arc/orc specific problem due to `reverse_a_175((a0.p)->data, a0.len);`  refc seems fine
[11:56:14] *** Quits: casionaut (~casionaut@user/casionaut) (Remote host closed the connection)
[12:58:48] <FromDiscord> <Stuffe> Does anyone know how garbage collection works with multi threading? I am creating a new thread with createThread(), but it looks like the garbage of that thread is not getting collected
[12:59:44] <FromDiscord> <Rika> Every thread has its own collector I would be led to believe
[12:59:51] <FromDiscord> <Rika> How are you passing data between threads
[12:59:59] <FromDiscord> <Stuffe> I use 2 channels
[13:00:07] <FromDiscord> <Stuffe> one for each direction
[13:01:00] <FromDiscord> <Rika> What kind of garbage are you seeing that isn’t being collected
[13:01:31] <FromDiscord> <Stuffe> I can just tell from system monitor that the program memory grows each time I send a task to the thread
[13:01:39] <FromDiscord> <Stuffe> and it never goes away
[13:02:09] <FromDiscord> <Stuffe> I know you may think I could have a reference to the data somewhere, but I really don't think that is the case
[13:02:56] <FromDiscord> <Stuffe> I might try to kill the threads and respawn them after each task instead of keeping this one thread alive
[13:03:37] <FromDiscord> <Rika> You can force a GC call
[13:03:56] <FromDiscord> <Rika> https://nim-lang.org/docs/gc.html
[13:05:29] <FromDiscord> <Stuffe> I tried GC_step, it only seems to work in the main thread
[13:06:54] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:06:57] <FromDiscord> <Rika> https://nim-lang.org/docs/system.html#GC_fullCollect
[13:11:10] <FromDiscord> <Stuffe> ok just tried that and it didn't help. But checking getFreeMem() from the first page you sent
[13:11:21] <FromDiscord> <Stuffe> that number just increases explosively
[13:11:38] <FromDiscord> <Stuffe> meaning the GC reserves a bunch of memory it doesn't reuse for some reason
[13:13:42] <FromDiscord> <Stuffe> no actually the used memory is also exploading
[13:14:16] <FromDiscord> <enthus1ast> Is this the winapi createThread?   If yes, does the gc also works there?
[13:14:57] <FromDiscord> <Stuffe> https://nim-lang.org/docs/threads.html it is the one mentioned here
[13:15:00] <FromDiscord> <enthus1ast> Maybe with orc?
[13:15:48] <FromDiscord> <Stuffe> no I am not using orc
[13:15:58] <FromDiscord> <enthus1ast> Can you try?
[13:16:20] <FromDiscord> <Stuffe> wouldn't that be worse since it doesn't collect cycles?
[13:16:24] <FromDiscord> <Stuffe> I can try though why not
[13:16:29] <FromDiscord> <Yardanico> In reply to @Stuffe "wouldn't that be worse": what?
[13:16:34] <FromDiscord> <Yardanico> orc does collect cycles, arc doesn't
[13:18:03] <FromDiscord> <Stuffe> ah yes sorry
[13:18:27] <FromDiscord> <Stuffe> the library I am using does not allow me to use orc, I was able to try a few of the other ones though
[13:18:34] <FromDiscord> <Rika> Why not
[13:18:41] <FromDiscord> <Yardanico> what library? just curious
[13:18:51] <FromDiscord> <Stuffe> `/Users/stefanlund/.nimble/pkgs/godot-0.8.5/nim/godotnim.nim(899, 3) Error: undeclared identifier: 'GC_disable'`
[13:18:56] <FromDiscord> <Yardanico> oh godot nim
[13:18:56] <FromDiscord> <Stuffe> (edit) "`/Users/stefanlund/.nimble/pkgs/godot-0.8.5/nim/godotnim.nim(899," => "`/Users/.nimble/pkgs/godot-0.8.5/nim/godotnim.nim(899,"
[13:19:06] <FromDiscord> <Yardanico> also why does it use GC_disable
[13:19:09] <FromDiscord> <Rika> Probably needs to put that under a when
[13:19:28] *** Joins: xet7 (~xet7@user/xet7)
[13:19:36] <FromDiscord> <Stuffe> I tried commented a few lines out just to try, but there are too many
[13:19:50] <FromDiscord> <Stuffe> it is built for the default GC with realtime I guess
[13:19:58] <FromDiscord> <Yardanico> not really
[13:20:03] <FromDiscord> <Rika> Comment them all with sed
[13:20:05] <FromDiscord> <Yardanico> i don't see it using any "realtime" features of refc :)
[13:20:20] <FromDiscord> <Yardanico> ah nvm, actually yes, it does use GC_step
[13:20:26] <FromDiscord> <Stuffe> yeah
[13:20:30] <FromDiscord> <Stuffe> In reply to @Rika "Comment them all with": sed?
[13:20:31] <FromDiscord> <Yardanico> but yeah, you can try just removing GC_disable and GC_step and see if it works
[13:20:39] <FromDiscord> <Yardanico> with orc
[13:20:57] <FromDiscord> <Stuffe>  https://media.discordapp.net/attachments/371759389889003532/903219272447316018/Screen_Shot_2021-10-28_at_12.50.51.png
[13:21:08] <FromDiscord> <Stuffe>  https://media.discordapp.net/attachments/371759389889003532/903219320073650186/Screen_Shot_2021-10-28_at_12.51.03.png
[13:21:16] <FromDiscord> <Stuffe> these places also throw errors using orc
[13:21:33] <FromDiscord> <Rika> That looks like funky code that shouldn’t be there ngl
[13:21:38] <FromDiscord> <Yardanico> oh well, seems like those leaks you are experiencing might as well come from godot nim itself
[13:22:15] <FromDiscord> <Yardanico> it does seem to use a lot of the gc options extensively :)
[13:22:39] <FromDiscord> <Stuffe> any suggestions?
[13:23:49] <FromDiscord> <Stuffe> I will try to respawn the thread for each task, just in case this somehow causes those objects to get collected
[13:35:58] <FromDiscord> <r2> sent a long message, see http://ix.io/3D9n
[13:36:48] <FromDiscord> <Rika> Async functions are iterator s
[13:36:52] <FromDiscord> <Rika> (edit) "iterator s" => "iterators"
[13:41:23] <FromDiscord> <r2> ah :D
[14:05:53] <FromDiscord> <Stuffe> trying to use threads that compute a single result and die, I keep getting this kind of error: `'threading_get_latest' is not GC-safe as it accesses 'data_result' which is a global using GC'ed memory`
[14:07:07] <FromDiscord> <Stuffe> I am guessing this means that I can't use dynamically sized global objects in threads in general?
[14:12:14] <FromDiscord> <Rika> You can’t use global objects period
[14:12:16] <FromDiscord> <Rika> Afaik
[14:12:25] <FromDiscord> <Rika> Unless you go tell the compiler shh it’s fine
[14:12:32] <FromDiscord> <Rika> With a cast gcsafe
[14:12:36] <FromDiscord> <Stuffe> how am I supposed to get data back then?
[14:12:38] <FromDiscord> <Rika> I don’t remember the specific syntax
[14:13:00] <FromDiscord> <Yardanico> In reply to @Stuffe "how am I supposed": with refc you can't use global variables that have GC'd types
[14:13:08] <FromDiscord> <Yardanico> because each thread has its own heap
[14:13:16] <FromDiscord> <Stuffe> ok I see
[14:13:28] <FromDiscord> <Yardanico> so you either pass by channels, messages, or something like that, or allocate memory by yourself with raw pointers
[14:13:56] <FromDiscord> <Stuffe> I was passing by channels
[14:13:59] <FromDiscord> <Yardanico> but if you're planning on accessing the same global variable from separate threads at the same time you should also use locks of course
[14:14:35] <FromDiscord> <Stuffe> just now I was trying to use the thread_pool thing
[14:14:48] <FromDiscord> <Stuffe> but I need to keep a reference to the resulting FlowVar
[14:15:32] <FromDiscord> <Stuffe> Idk, if you guys know the specifics of this, but basically a reference to the running thread, so I can ask it if it is done and has the result for me
[14:16:41] <FromDiscord> <Stuffe> I guess I could try using createThread like my first attempt, then pass the result back through Channel and then let it die and respawn it
[14:16:43] <FromDiscord> <Rika> Ideally you would just do message passing “I need this, parameters are this, my address is this, post back”
[14:17:34] <FromDiscord> <Stuffe> Ok, I never tried that before, could you please elaborate a little bit on how I get started
[14:17:59] <FromDiscord> <Rika> Well I was just saying that conceptually
[14:18:38] <FromDiscord> <Stuffe> I guess you are saying I should pass a pointer to the memory where I want the result to be stored?
[14:20:04] <FromDiscord> <Rika> No, address as in channel
[14:20:23] <FromDiscord> <Rika> “This is the channel you use to contact me back” I guess, but then the issue is how to pass such channel
[14:21:06] <FromDiscord> <Stuffe> Originally I used one channel for sending to the thread and one channel for receiving the results back
[14:21:22] <FromDiscord> <Stuffe> but yeah, it didn't garbage collect in the thread
[15:18:43] *** Joins: rockcavera (~rc@192.12.112.240)
[15:18:43] *** Quits: rockcavera (~rc@192.12.112.240) (Changing host)
[15:18:43] *** Joins: rockcavera (~rc@user/rockcavera)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:46:35] <PMunch> @r2, if you want to understand what's going on with Async check out this: https://peterme.net/asynchronous-programming-in-nim.html
[15:46:43] <PMunch> In particular appendix A
[16:00:27] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[16:02:10] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[16:11:08] *** Joins: arkurious (~arkurious@user/arkurious)
[16:21:22] <FromDiscord> <Imperatorn> Hey again guys
[16:22:13] <FromDiscord> <Imperatorn> (remember I'm a Nim noob) Have a question about async/await or coroutines or <<insert_name_that_nim_uses_here>>
[16:22:47] <FromDiscord> <Imperatorn> Coming from languages like Erlang, I'm used to having peace of mind when it comes to process isolation
[16:23:05] *** Joins: neurocyte0132889 (~neurocyte@212.232.89.185)
[16:23:05] *** Quits: neurocyte0132889 (~neurocyte@212.232.89.185) (Changing host)
[16:23:05] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:23:15] <FromDiscord> <Imperatorn> Someone told me about Go that, if a coroutine crashes, the entire program crashes, which sounded kinda insane to me.
[16:23:51] <FromDiscord> <Imperatorn> That made me wonder how Nim does it. Does it rely on normal threads, a fiber approach etc
[16:24:47] <FromDiscord> <Imperatorn> Or rather the question might be:↵If I want to isolate some unit of execution in Nim (so that a crash in A doesn't spread to B), how would I do it.↵↵Thanks
[16:25:08] <PMunch> Total separation? Run it as a separate program
[16:25:17] <FromDiscord> <enthus1ast> Yes if you use async and your async procedure crash (and the exception is not catched) your whole application will crash as well
[16:25:18] <PMunch> But you could also wrap things in a try statement
[16:26:01] <FromDiscord> <enthus1ast> Hu didn't know that erlang does this I maybe should have a look at erlang 😁
[16:26:49] <FromDiscord> <enthus1ast> I think the same is for threads but I'm not 100% sure
[16:26:52] <FromDiscord> <Imperatorn> Erlang is extreme in this sense
[16:27:02] <PMunch> I mean that is what it is designed for
[16:27:05] <PMunch> So it makes sense
[16:27:07] <FromDiscord> <Imperatorn> Yeah
[16:27:18] <PMunch> Threads are the same in Nim, crash one thread and you crash them all
[16:27:52] <FromDiscord> <Imperatorn> Yes, I just thought maybe there are some green threads/fiber library which handled things for you in some way
[16:29:42] <FromDiscord> <Imperatorn> Anyway, thanks for answering. I think I'll still use the "let it crash" mindset, but wrap it in try-catch or something similar
[16:30:32] <FromDiscord> <Rika> not really the same idea i would say
[16:30:35] <FromDiscord> <Rika> when you catch stuff
[16:31:03] <FromDiscord> <Rika> if you really want to do it like erlang you'd prolly use different processes or design the system in nim yourself (though that might even need a language fork)
[16:32:16] <PMunch> I wonder how Erlang does that actually
[16:32:23] <PMunch> I mean it has to be separate processes right?
[16:35:36] <FromDiscord> <Imperatorn> Yes, separate stacks and heaps, everything is isolated
[16:35:54] <FromDiscord> <Imperatorn> Message passing between "processes"
[16:36:14] <FromDiscord> <Imperatorn> A process in Erlang is nothing like a OS process or thread
[16:36:58] <FromDiscord> <Rika> vm process afaik
[16:37:00] <FromDiscord> <Imperatorn> It's a lightweight thing, about 300 bytes or so
[16:37:01] <PMunch> Nothing like it? It's gotta be somewhat like it if it doesn't cause a crash
[16:37:02] <PMunch> Oh wait
[16:37:05] <FromDiscord> <Imperatorn> Yes
[16:37:08] <PMunch> Duh, Erlang runs in a VM
[16:37:13] <FromDiscord> <Rika> ya forgot? 😛
[16:37:27] <pro> I always wondered how earlang bypasses limit of 65k TCP ports
[16:37:32] <PMunch> Yeah I was super confused there for a second
[16:38:24] <FromDiscord> <Imperatorn> In reply to @pro "I always wondered how": Does it? I don't recall
[16:38:52] <FromDiscord> <Rika> "bypass" because its on the vm it doesnt need tcp ports i assume
[16:39:01] <FromDiscord> <Imperatorn> Oh you mean in the Erlang world
[16:39:38] <FromDiscord> <Imperatorn> Yeah it can be raised to 268 435 456
[16:39:56] <pro> but how/why
[16:40:07] <FromDiscord> <Imperatorn> Why not 😎
[16:40:40] <FromDiscord> <Rika> why? prolly needed in erlang because of how it works
[16:40:49] <FromDiscord> <Rika> how? again, implemented in vm
[16:40:59] <FromDiscord> <Rika> a vm makes things easier
[16:41:12] <pro> got it
[16:54:43] <PMunch> What does this mean? Warning: suspicious code: enum to enum conversion [EnumConv]
[16:55:24] <FromDiscord> <Rika> you uh
[16:55:29] <FromDiscord> <Rika> converted from an enum to another enum
[16:55:43] <FromDiscord> <Rika> apparently that isnt desirable, you have to convert from enum to ordinal to enum
[16:55:48] <FromDiscord> <enthus1ast> 65k TCP ports?
[16:55:59] <FromDiscord> <Rika> what about the tcp ports
[16:56:07] <FromDiscord> <enthus1ast> s socket constist if yourIP\:port + remoteIP\:port
[16:56:15] <FromDiscord> <Rika> yes
[16:56:42] <FromDiscord> <enthus1ast> only relevant afaik when you run behind a proxy or so
[16:56:56] <FromDiscord> <enthus1ast> but even then you can always assign another ip or use ipv6
[16:57:21] <FromDiscord> <Rika> assign another ip?
[16:57:42] <FromDiscord> <enthus1ast> that you have more allowed sockets
[16:58:08] <FromDiscord> <enthus1ast> or addressable sockets
[17:00:04] <PMunch> @Rika, I don't though. As far as I can tell
[17:00:25] <PMunch> I do `if someobject.field in {enumVal1, enumVal2}`
[17:01:32] <FromDiscord> <Rika> is that the line where the warning pops up? then it might be a system thing
[17:10:33] <FromDiscord> <Gumber> @Imperatorn I work in Elixir for my day job
[17:12:34] <FromDiscord> <Gumber> also writing the backend for my game in Elixir
[17:17:24] <FromDiscord> <Gumber> Nim doesn't have anything like BEAM's supervisor hierarchy / process isolation - it does have channels to facilitate message passing and previously there were some libraries that focused on the actor model but I think they're very old and outdated at this point
[17:17:58] <FromDiscord> <Gumber> as far as green threads go - nim has closure iterators and now CPS is in the works
[17:18:08] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[17:18:26] <FromDiscord> <Gumber> I've also implemented fibers /coroutines using boost's context library (deboostified)
[17:29:57] <FromDiscord> <Imperatorn> Interesting 👌
[17:39:21] *** Joins: casionaut (~casionaut@user/casionaut)
[17:44:19] *** Joins: lively_sparkle (~v_iskra@185.176.221.96)
[18:00:36] *** pch is now known as kinkinkijkin
[18:12:14] <FromDiscord> <no name fits> I keep forgetting that ^1 is last element and not ^0. Is there a good way to memorize it other than repetition?
[18:12:45] <FromDiscord> <Rika> nth to the last
[18:13:28] <FromDiscord> <Rika> wrt deepcopy, why is it off by default on [ao]rc?
[18:14:29] <nrds> <06Prestige99> @no name fits I think of it as -1
[18:15:18] <nrds> <06Prestige99> but with ^ it moves "left" from the 0th element, bringing it to the rightmost element (like it loops around) 
[18:17:33] <FromDiscord> <Rika> afaik its why it's 1 indexed, to copy python afaik
[18:21:35] <FromDiscord> <no name fits> In reply to @nrds "<Prestige> but with ^": That makes sense to me
[18:25:54] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3DaS
[18:26:08] <FromDiscord> <haxscramper> for `var stack: seq[T]` and for `var generalList: seq[T]`
[18:28:16] <FromDiscord> <Rika> ~~tail~~
[18:28:51] <FromDiscord> <haxscramper> I have this one as well
[18:29:16] <FromDiscord> <haxscramper> Though ideal signature would be a `func tail[T](s: seq[T]): openarray[T]`, but without view types it is super expensive
[18:29:41] <FromDiscord> <haxscramper> and I think I ran into some bug when I tried to use it this, way so I just dropped it altogether
[18:43:33] *** Quits: lain (~lain@172.16.254.xxx) (Ping timeout: 265 seconds)
[18:44:26] *** Joins: lain (~lain@172.16.254.xxx)
[18:48:18] <FromDiscord> <Rika> beef are ya here? if ya aint then ping me, do you have any benchmark numbers for ya nimscripter?
[19:36:40] <FromDiscord> <MrMadPie> hello
[19:37:18] <FromDiscord> <MrMadPie> i keep seeing things like `{.gcsafe}` in function definitions and i don't understand what those are called and what they do
[19:37:24] <FromDiscord> <MrMadPie> can anyone clear that up for me?
[19:38:53] <nrds> <06Prestige99> They are called pragmas, I believe they are documented in the manual
[19:39:35] <nrds> <06Prestige99> https://nim-lang.org/docs/manual.html#effect-system-gc-safety-effect
[19:43:45] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 260 seconds)
[19:45:36] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[19:51:46] <NimEventer> New thread by Ggibson: Basic nimterop usage for simple c++ struct?, see https://forum.nim-lang.org/t/8555
[19:53:12] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[19:53:44] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[20:03:53] <FromDiscord> <MrMadPie> thank you
[20:08:19] *** Quits: lively_sparkle (~v_iskra@185.176.221.96) (Ping timeout: 260 seconds)
[20:21:10] *** Joins: andylearningnimt (~andy@static-68-235-44-21.cust.tzulo.com)
[20:30:48] <andylearningnimt> Hello! I have some confusion about declaring objects: can I specify a field's initial value? can I specify that a certain proc be run whenever the object is instantiated?
[20:32:03] <FromDiscord> <Rika> no
[20:32:04] <FromDiscord> <Rika> no
[20:32:27] <FromDiscord> <Rika> common convention is to make an initialiser proc for instantiation
[20:32:34] <FromDiscord> <Rika> instead of using object construction synta
[20:32:35] <FromDiscord> <Rika> (edit) "synta" => "syntax"
[20:32:47] <FromDiscord> <Rika> initial values go in such proc as well
[20:33:12] <FromDiscord> <Rika> RFCs are in place for both initial values and more standardised initialisation procedures
[20:33:33] *** Joins: lively_sparkle (~v_iskra@185.176.221.96)
[20:34:06] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[20:34:16] <andylearningnimt> Thanks
[20:34:25] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[20:37:41] <andylearningnimt> What's the simplest way to determine what a type's default value is? e.g. looking at https://nim-lang.org/docs/manual.html#types-boolean-type I can't tell if my objects' boolean fields will be true or false
[20:39:57] <FromDiscord> <Rika> default(T)
[20:40:06] <FromDiscord> <Rika> all values are zero initialised
[20:40:18] <FromDiscord> <Rika> eg booleans will always be false
[20:40:22] <FromDiscord> <Rika> integers 0
[20:40:30] <FromDiscord> <Rika> strings empty
[20:40:51] <FromDiscord> <Rika> (note that strings and seqs are somewhat special in that they are implemented as pointers but do not behave like such)
[20:41:37] <andylearningnimt> Thank you again
[20:47:35] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: o7)
[20:51:06] <FromDiscord> <Alea> I used nim for a code signal test↵And I got boofed because of an index error that wouldn't show a line number 😒
[20:51:21] <andylearningnimt> OK now I have an object field that is seq[string], and in a proc try to add a string to it, but apparently that field is immutable? field is lst (line 18) add at line 30: http://ix.io/3DbX
[20:51:27] <FromDiscord> <Alea> I wonder if that was nim or codesignal's fault
[20:52:19] <FromDiscord> <Rika> andy, objects need to be marked as mutable
[20:52:25] <FromDiscord> <Rika> `proc init(self: var Allergies) =`
[20:52:48] <FromDiscord> <Rika> same with `is_allergic_to`
[20:52:51] <andylearningnimt> oh as a parameter? cool cool cool thanks
[20:56:08] <andylearningnimt> oof but the included tests from exercism use an immutable instance, so I guess I have to rethink how I'm doing everything
[20:59:38] <FromDiscord> <Rika> create a copy and return the copy
[21:02:50] <andylearningnimt> OK, thank you, I'll think this way. A copy of the object? None of my procs return an object right now, and if I copied it during init, I'd still have to add a whole caching mechanism anyway to prevent calculating the lst field every time is_allergic_to is called, I think.
[21:04:36] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[21:04:51] <andylearningnimt> So I think I'll start a cache as a map of score to seq
[21:04:55] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[21:27:24] *** Joins: PMunch_ (~PMunch@c01F28BC3.dhcp.as2116.net)
[21:33:04] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Killed (NickServ (GHOST command used by PMunch_!~PMunch@c01F28BC3.dhcp.as2116.net)))
[21:33:10] *** PMunch_ is now known as PMunch
[21:33:29] *** Joins: PMunch_ (~PMunch@vpn.dualog.com)
[21:38:18] <andylearningnimt> Rika: The tests from exercism (so I shouldn't change them) have, e.g.:: let allergies = Allergies(score: 1); check allergies.lst == @["eggs"] :: How or where could I be returning a copy so I can modify the field?
[21:39:19] <FromDiscord> <Imperatorn> In reply to @Gumber "<@!750836245919170771> I work in": Btw, have you tried the BeamAsm?
[21:40:58] <FromDiscord> <Gumber> In reply to @Imperatorn "Btw, have you tried": I haven't! Thanks for cluing me into this - I figured something like this had to exist but I hadn't really poked around much yet
[21:42:53] <FromDiscord> <Gumber> I might already be using it and just not know - but I doubt it
[21:44:59] <andylearningnimt> I just don't understand how I can do the calculation when the instantiations and tests are outside my control, and the field is checked immediately after that initialization.
[21:48:44] <FromDiscord> <Rika> Is the object itself out of your control
[21:48:52] <FromDiscord> <Rika> Can you link me the exercise I’ll read it
[21:49:11] <andylearningnimt> Rika: no I can define it, just the tests should be unchanged. 1 sec
[21:49:49] <FromDiscord> <Rika> Recall that in Nim, that syntax doesn’t only mean a field
[21:49:55] <andylearningnimt> instructions: http://ix.io/3Dcj -- tests: http://ix.io/3Dci
[21:50:31] <andylearningnimt> Rika: oh, I thought maybe I could make it a fake field and actually a proc, but then it complained about the field being missing so I must have done that wrong if it's possible
[21:50:40] <andylearningnimt> (lst, that is)
[21:51:55] <andylearningnimt> my latest attempt: http://ix.io/3Dcl
[21:52:23] <FromDiscord> <Rika> “Complained that the field is missing” how
[21:52:27] <FromDiscord> <Rika> In what way
[21:52:48] <FromDiscord> <Rika> You didn’t export the proc
[21:52:48] <andylearningnimt> "test_allergies.nim(175, 20) Error: undeclared field: 'lst' for type allergies.Allergies"
[21:52:52] <FromDiscord> <Rika> That’s why it complained
[21:52:54] <andylearningnimt> ohh
[21:52:59] <andylearningnimt> ugh, thank you again
[21:53:48] <andylearningnimt> compiling nicely, now to go find out all the other mistakes I've made
[21:55:12] <andylearningnimt> ah yes I wanted to see if Tables filled in default values for missing keys, which they don't
[21:55:55] <FromDiscord> <Elegantbeef> Ah that's a nice challenge
[21:57:47] <FromDiscord> <Elegantbeef> More solutions than i'd think to use sets to solve it
[22:05:31] <FromDiscord> <Imperatorn> In reply to @Gumber "I might already be": Depends. I think atm you need to run 64-bit x86 for it to be enabled
[22:11:11] *** Quits: lively_sparkle (~v_iskra@185.176.221.96) (Ping timeout: 264 seconds)
[22:11:18] <FromDiscord> <Gumber> In reply to @Imperatorn "Depends. I think atm": found out we're quite a few versions behind so I dont't hink we're using it
[22:14:04] <andylearningnimt> Is there a common, obvious way to prepend to a seq?
[22:14:34] <FromDiscord> <Elegantbeef> `insert`?
[22:14:56] <PMunch> Or concat if you want to add more than one value
[22:16:05] <andylearningnimt> thanks, I thought maybe I could add an element without first wrapping it in a second seq, I'll use insert
[22:17:22] <andylearningnimt> oh unless I can do that if I go find out what sink means. I'll check it out
[22:23:37] <andylearningnimt> Thanks to all the help, I'm *almost* there, just one case to fix. current version: http://ix.io/3Dcs
[22:24:04] *** Joins: lively_sparkle (~v_iskra@185.176.221.96)
[22:44:14] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[22:51:52] <PMunch> Man editing these videos on Badger takes forever..
[22:51:58] <PMunch> There has to be a better way
[22:59:17] <nrds> <06Prestige99> What are you doing?
[23:01:48] <FromDiscord> <Elegantbeef> Methinks he's editing videos of him using badger from his keyboard streams
[23:02:07] <PMunch> Almost
[23:02:20] <PMunch> I'm editing down the original streams into a more watchable format
[23:02:43] <PMunch> Like I did for the first three videos
[23:02:59] <PMunch> I have 4-7 that I've recorded but not edited -_-
[23:09:41] <FromDiscord> <tandy> https://github.com/jjv360/nim-classes
[23:09:50] <FromDiscord> <tandy> has anyone used this?
[23:10:34] <FromDiscord> <Elegantbeef> I know impbox used oolib
[23:11:09] <andylearningnimt> woohoo, just posting my finally-passing-the-tests but amateur solution to the exercism problem I've been working on: http://ix.io/3DcI
[23:13:07] <FromDiscord> <tandy> oh this looks good
[23:15:01] <FromDiscord> <Elegantbeef> Nice andy, very elaborate though 😀
[23:15:12] *** Joins: lively_s1 (~v_iskra@mm-106-247-57-86.leased.line.mgts.by)
[23:16:11] <FromDiscord> <tandy> whats the fastest / easiest gui library? i need to make a tictactoe game quick lol
[23:17:01] <FromDiscord> <Elegantbeef> Nigui, Nimx, Gintro, Nico one of these has to be usable for you
[23:17:11] *** Quits: lively_sparkle (~v_iskra@185.176.221.96) (Ping timeout: 245 seconds)
[23:17:20] <FromDiscord> <tandy> ive used gintro
[23:17:20] <PMunch> Nico would probably be a good match
[23:17:32] <PMunch> Or maybe even Pixie
[23:17:34] <andylearningnimt> Elegantbeef: I figure there's a nim pattern/feature to do a more do-while style loop, but otherwise I'm not sure where/how to simplify. Not that I need to, but if something seems obviously too-much-work-for-the-job please do give me a hint
[23:17:34] <FromDiscord> <Elegantbeef> Nico is a game framework so probably the easiest
[23:17:35] <FromDiscord> <tandy> i was curious if there was anything that would be super fast / no boiler plate needed
[23:17:36] <PMunch> Does it have inputs?
[23:17:47] <FromDiscord> <tandy> yep, mouse controled
[23:18:16] <FromDiscord> <Elegantbeef> Andy the challenge is written such to have a slightly lower level solution
[23:18:21] <PMunch> Haha, I meant Pixie :P
[23:18:38] <FromDiscord> <tandy> ohh
[23:18:40] <FromDiscord> <tandy> hahaha
[23:18:44] <FromDiscord> <Elegantbeef> Pixie is just a drawing library
[23:18:54] <FromDiscord> <Elegantbeef> So you use sdl2/gflw for inputs
[23:18:56] <FromDiscord> <tandy> il peep nico, would be cool to play with that
[23:19:21] <PMunch> Ah right, so you can have it draw to a SDL2 surface or something, and then use that for input handling
[23:19:23] <PMunch> Cool
[23:19:34] <FromDiscord> <Elegantbeef> Indeed
[23:19:45] <FromDiscord> <Elegantbeef> Treeform even has boxy if you wanted to do it efficiently
[23:20:05] <andylearningnimt> I know I could alternatively use a Table to make the known point values constant as well, but what kind of "lower level" do you mean?
[23:20:15] <FromDiscord> <Elegantbeef> Andy this is the intended solution https://exercism.org/tracks/nim/exercises/allergies/solutions/beef331
[23:20:54] <andylearningnimt> holy moly ok thanks
[23:21:46] <FromDiscord> <Elegantbeef> It's just a bitwise operation which was eluded to with the `1, 2, 4, 8, 16, 32, 64, 128`
[23:23:55] <FromDiscord> <Elegantbeef> If you have any questions feel free to ask
[23:25:30] *** Joins: casionaut (~casionaut@user/casionaut)
[23:42:12] <PMunch> Ugh, this video is a mess..
[23:42:39] <PMunch> I have a 1 hour segment where I try to make some progmem stuff work and end up patching the compiler..
