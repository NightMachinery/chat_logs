[00:03:18] *** Quits: constxo (~brad@192.75.101.164) (Ping timeout: 260 seconds)
[00:07:56] *** Joins: pulse (~pulse@user/pulse)
[00:09:07] *** Joins: kexec (~kexec@user/kexec)
[00:10:03] *** Joins: terminalpusher (~terminalp@2a01:586:9810:1:d5c5:51af:c205:6a9c)
[00:11:31] *** Joins: kadir (~kadir@95.7.9.203)
[00:11:38] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[00:14:34] *** Quits: x11ff (~x11ff@151.250.201.160) (Ping timeout: 260 seconds)
[00:15:21] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:15:34] *** Quits: supernova (~quassel@2405:9800:ba11:6207:3dac:6101:b44d:85fe) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:16:21] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[00:16:54] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:16:58] *** Joins: jbauer (~jbauer@146.71.11.98)
[00:19:03] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[00:20:14] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Read error: Connection reset by peer)
[00:20:44] *** Quits: ToDDynho (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:23:43] *** Joins: x11ff (~x11ff@151.250.201.160)
[00:25:25] *** Quits: x11ff (~x11ff@151.250.201.160) (Client Quit)
[00:27:59] *** Parts: kadir (~kadir@95.7.9.203) (good night)
[00:31:52] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[00:32:26] *** Joins: engest (~engest@50.39.177.170)
[00:33:43] *** Joins: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:34:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:36:29] *** Quits: Akuli (~Akuli@82-203-165-175.bb.dnainternet.fi) (Quit: Leaving)
[00:38:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:41:47] *** Joins: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net)
[00:43:46] *** Joins: RogOne_gg (~igloo@109.139.23.88)
[00:44:34] *** Quits: RogOne_gg (~igloo@109.139.23.88) (Remote host closed the connection)
[00:47:29] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:47:42] *** Joins: RogOne_gg (~igloo@109.139.23.88)
[00:49:55] *** Quits: shivesh (~shivesh@user/shivesh) (Read error: Connection reset by peer)
[00:50:01] *** Joins: shivesh__ (~shivesh@user/shivesh)
[00:50:02] *** Quits: RogOne_gg (~igloo@109.139.23.88) (Remote host closed the connection)
[00:51:04] *** Quits: jbauer (~jbauer@146.71.11.98) (Quit: Quitting)
[00:52:08] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[00:52:21] *** Quits: shivesh__ (~shivesh@user/shivesh) (Read error: Connection reset by peer)
[00:57:03] *** Joins: jesings[m] (~jesingsma@2001:470:69fc:105::1:2bb8)
[01:00:19] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[01:01:08] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[01:03:45] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[01:05:08] *** Quits: LuKaRo (~LuKaRo@p4fc32190.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:06:18] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) ()
[01:08:07] *** Joins: LuKaRo (~LuKaRo@p5deda91b.dip0.t-ipconnect.de)
[01:09:45] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:12:27] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:13:01] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[01:13:05] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Client Quit)
[01:13:14] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[01:15:17] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[01:15:43] *** Joins: semeion (~semeion@user/semeion)
[01:16:40] *** Quits: terminalpusher (~terminalp@2a01:586:9810:1:d5c5:51af:c205:6a9c) (Remote host closed the connection)
[01:18:54] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[01:19:29] *** Joins: engest (~engest@50.39.177.170)
[01:25:18] *** Joins: Viewday7 (~Viewday@user/viewday)
[01:25:31] *** Quits: ericlee (~ericlee@2601:647:4681:3420::2) (Remote host closed the connection)
[01:25:54] *** Joins: ericlee (~ericlee@2601:647:4681:3420::2)
[01:26:26] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[01:26:50] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 260 seconds)
[01:26:51] *** Viewday7 is now known as Viewday
[01:32:15] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:32:57] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:37:14] *** Quits: kexec (~kexec@user/kexec) (Ping timeout: 256 seconds)
[01:38:25] *** Joins: Klinda_PING (~superleag@user/klinda)
[01:39:05] *** Quits: Klinda (~superleag@user/klinda) (Killed (NickServ (GHOST command used by Klinda_PING)))
[01:39:12] *** Klinda_PING is now known as Klinda
[01:40:22] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Remote host closed the connection)
[01:41:21] *** Joins: vysn (~vysn@user/vysn)
[01:41:47] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Ping timeout: 264 seconds)
[01:46:22] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:47:00] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[01:47:09] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[01:48:26] *** Joins: jinsun (~quassel@user/jinsun)
[01:50:13] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:53:00] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[01:54:51] *** Quits: magla (~gelignite@55d4c66c.access.ecotel.net) (Quit: Stay safe!)
[01:57:38] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Read error: Connection reset by peer)
[01:58:36] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[01:59:14] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[02:01:26] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[02:10:03] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[02:13:17] *** Quits: alch (~alch@151.36.216.238) (Ping timeout: 268 seconds)
[02:14:51] *** Joins: alch (~alch@pa-18-173-12.service.infuturo.it)
[02:17:37] <kurahaupo> nomagno: (responding to your comment 8h4m ago) zero initialising to prevent segfaults is just hiding bugs, not fixing them. Consider instead, always initialising a variable with the first useful value you want to put in it. If necessary move the declaration later in the program to allow this to happen.
[02:19:29] <kurahaupo> (technically it may not always be possible, but if you adopt this as your default, the uninitialised variables become more obvious)
[02:21:24] *** Quits: ericlee (~ericlee@2601:647:4681:3420::2) (Remote host closed the connection)
[02:21:43] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[02:21:43] *** Joins: ericlee (~ericlee@2601:647:4681:3420::2)
[02:21:58] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[02:22:00] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Quit: Leaving)
[02:22:26] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[02:26:14] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Ping timeout: 268 seconds)
[02:26:48] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:28:41] <nomagno> kuragaupo: my main issue is I want to have the default behaviour of declaration=zero initialization. Whenever I use a value, I automatically mentally assume it is zero unless stated otherwise, and I think it is a ver y reasonable behaviour
[02:28:48] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[02:29:21] <floatcomplex> nomagno: what kurahaupo is saying is that you could be making it harder to debug an actual logic error by doign that
[02:29:48] <dave0> nomagno: too useful, it would never get standardized
[02:29:49] <floatcomplex> if you don't initialize it, it will be more obvious when you accidentally use an uninitialized value, vs if you habitually zero-initialize it even when you didn't need to
[02:29:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ae5d:7719:e7f1:5947) (Ping timeout: 260 seconds)
[02:30:40] <floatcomplex> you're basically making it impossible for a tool like valgrind or -fsanitize=memory to say "hey you used this value on this line of code before initializing it"
[02:30:41] <dave0> floatcomplex: maybe, if the computer trapped when you use uninitialized value... instead there's silent corruption
[02:30:57] <floatcomplex> dave0: only if you insist on not using your diagnostic tools
[02:32:14] <dave0> why can't the compiler do both?
[02:32:32] <nomagno> Look I understand your point, but the overwhelming majority of bugs in my code is DIRECTLY related to assuming stuff is 0 by default
[02:32:50] <dave0> complain if you used a variable before you assigned it a value, and initialize to zero
[02:34:02] <kurahaupo> nomagno: There's a difference between "assume it's zero when zero is the value I want" and "make it be zero when I have no expectation of any particular value". I'm not saying you would never initialise to zero, if that's what you're mentally thinking anyway. I'm saying only do that when you actually think that 0 is a useful value for that variable.
[02:34:20] <nomagno> I definitely think initializing everything to zero unless stated otherwise would be reasonable behaviour to add even now. What code would it break?
[02:34:46] <nomagno> Just, tangential question. If you all of a sudden replace all declarations to zeros initialisations, what breaks?
[02:34:46] <dave0> nomagno: better than that, it's backwards compatible
[02:34:48] <nomagno> Just curious
[02:34:51] <kurahaupo> It doesn't break code, but it makes it harder to find existing bugs
[02:35:21] <dave0> uninitiazlied means bugs are harder to reproduce
[02:35:31] <nomagno> ^
[02:35:45] <dave0> because the values you get might change from run to run, or the debugger may alter the values
[02:35:50] <nomagno> It is a trade-off. One the ISO committee would not make anyways
[02:35:53] <dave0> heisenbug
[02:35:56] <kurahaupo> I would go the other way: if I can't think of a suitable initialiser, I would fill with an unlikely bit pattern such as 0x55555555…
[02:36:04] <nomagno> because mUH commercial interests
[02:36:19] <dave0> if it trapped (in the sense of cpu exception) when you used the value, that's even better
[02:36:31] <dave0> but afaik x86 and arm don't do that
[02:36:40] <dave0> maybe with floats?
[02:36:46] <kurahaupo> dave0: x86_64 has NAT
[02:36:54] <dave0> kurahaupo: oh cool didn't know that
[02:37:06] <kurahaupo> but compilers don't take advantage of it yet
[02:38:33] <dave0> another point of uninitialized values is it could leak information
[02:38:44] <nomagno> ^
[02:38:49] <floatcomplex> oh come on
[02:38:58] <dave0> if malloc somehow reuses a buffer that had a secret in it
[02:39:23] <dave0> not quite variable initialization though :-/
[02:39:27] <floatcomplex> the compiler is free to elide you setting a value to zero if it knows you set it to some other value later before needing it
[02:39:39] <floatcomplex> if you're depending on that behaviour to hide secrets, you shouldn't be doing anything with secrets
[02:39:55] <dave0> yes it's still a bug
[02:40:47] <nomagno> I do not think there are any real disadvantages to making uninitialized a specific state, and default declarations default to 0. Can it make certain bugs harder to track down? Yes. Is it a sane default in every other context? Yes.
[02:42:32] <nomagno> Actually lemme just make a macro `#define ZERO = {0}`
[02:43:41] *** Joins: quartz (~quartz@user/quartz)
[02:43:52] *** Joins: kexec (~kexec@user/kexec)
[02:44:09] <jnip> Quick networking question, If I want a two way UDP communication between a client and server, do I need to bind() the socket on the client side in order to recvfrom()? Wouldn't most firewalls block incoming packets?
[02:44:32] <floatcomplex> nomagno: it seems like a significant amount of you explorations of C are aimed at making it so only you can read the source code
[02:44:36] <floatcomplex> consider whether this is wise
[02:45:17] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:45:29] *** Joins: dutch (~DutchIngr@user/dutch)
[02:47:45] <floatcomplex> the purpose of C, as an abstraction on top of assembly, is so that you need to know LESS, in order to have a complete mental model of how the machine and your program are going to work together to do something useful. if you add layers of abstraction that result in someone needing to know MORE domain-specific knowledge to know what is going on, then the layer of abstraction is working against its own 
[02:47:51] <floatcomplex> reason for existing
[02:48:28] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[02:49:07] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:49:39] <floatcomplex> tl dr: source code is for humans
[02:49:52] *** Joins: pizdets (~pizdets@183.182.115.116)
[02:51:08] <floatcomplex> jnip: there isn't really a notion of client and server in udp, you need to bind() in order to receive packets
[02:51:53] <nomagno> floatcomplex: I can see my programming language just a step away from what C actually is. So it is certainly a dilemma
[02:52:10] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:53:24] <apotheon> 23:14 < floatcomplex> nomagno: it seems like a significant amount of you explorations of C are aimed at making it so only you can read the source code
[02:53:25] <floatcomplex> jnip: you can connect() a udp socket in order to then be able to use send() or write() instead of sendto() but there are some subtle consequences to doing that
[02:53:28] <apotheon> Yeah, that's bad.
[02:53:38] <jnip> floatcomplex: maybe i did something wrong because i assumed when you bind() a UDP socket, it becomes read-only (I couldn't receive any packets on the other end)
[02:53:50] <apotheon> . . . considering that after a couple months of not reading it, the source code might as well have been written by someone else.
[02:53:55] <floatcomplex> jnip: nope it just means you can receive packets
[02:54:01] <jnip> hmm
[02:54:03] <floatcomplex> it has no effect on whether you can send packets
[02:56:51] <floatcomplex> (iirc the reason not to connect() is because it can fail if the destination address is currently unreachable, even if a later sendto() to that address would succeed)
[02:56:53] <vin>  
[02:57:06] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[02:57:10] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[02:57:20] <rcm888> why this example works? https://termbin.com/9brd how do threads get synchronized?
[02:57:21] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[02:58:05] <floatcomplex> rcm888: that's bad
[02:58:34] <floatcomplex> rcm888: it would work as expected if "sum" were a c11 stdatomic
[02:58:47] <floatcomplex> otherwise if it appears to work it's just luck
[02:59:16] <rcm888> floatcomplex: haha, not always works..
[02:59:47] <floatcomplex> ,cc _Atomic int sum = 0;
[02:59:50] <candide> floatcomplex: no output: sum = 0
[03:00:07] <floatcomplex> rcm888: put #include <stdatomic.h> in there and put _Atomic in front of int sum
[03:00:11] <floatcomplex> see if that makes it work reliably
[03:01:06] <rcm888> it does
[03:01:39] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:01:59] <rcm888> how does _Atomic modify the code?
[03:03:27] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[03:03:45] <floatcomplex> if x is atomic, it forces x += y to be implemented with a routine provided by the compiler (ie via libgcc) that atomically read-modify-writes x, unless it has enough information to know that the operation is already implicitly atomic
[03:03:47] <quartz> Hi. I'm using fgets() to read the input from stdin. If the input is larger than the buffer that I've set (10 chars), than I want the program to print "input too long" and prompt the user to input something again. However, I get this weird output, where it prints everything in the database, or sometimes prints the "input too long" string many times. 
[03:04:06] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:04:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:04:22] <quartz> I'm not sure how to fix it, because I try using fflush(). Here is my code: https://bpa.st/GYUQ   Here is the weird output: https://bpa.st/CAYQ
[03:06:38] <floatcomplex> quartz: i don't think fflush does what you think it does
[03:06:45] <dave0> quartz: oh fflush doesn't work like that.. you could make a small loop    int c; while((c = getchar()) != EOF) { if(c == '\n') break; }
[03:06:49] <rcm888> floatcomplex: so header file doesn't do it all?
[03:06:59] <floatcomplex> rcm888: ?
[03:07:12] *** Joins: nvmd (~nvmd@user/nvmd)
[03:08:11] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Ping timeout: 268 seconds)
[03:08:13] <rcm888> floatcomplex: _Atomic is compiler builtins, not header file work?
[03:08:14] <quartz> dave0: But I want it to fill the buffer that I've set which is char input[10]; on line 42
[03:08:20] <floatcomplex> rcm888: it's both
[03:08:37] <quartz> floatcomplex: Right. I've tried to pass input into it, but it's not the correct type.
[03:09:01] <floatcomplex> quartz: is there a specific reason you can't use getline()
[03:09:04] <dave0> quartz: i meant when the program says "input too long, try again"
[03:09:06] <floatcomplex> did your professor say you could not
[03:09:09] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:09:37] <quartz> floatcomplex: We can use getline(), sure, it was just never mentioned in lecture
[03:09:56] <rcf> Using getline() presents a much nicer interface to the user. 
[03:10:26] <dave0> quartz: on line 54 .. i guess you want to discard the rest of the line, because you fflush(stdin) ? put the little loop there
[03:11:25] <rcf> rcm888: how you actually implement it is highly platform-dependent. 
[03:11:44] <kurahaupo> nomagno: I would call such a macro "UNDEF" rather than "ZERO". Then use actual 0 when that's a useful state.
[03:11:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:11:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:11:55] *** Joins: wroathe (~wroathe@user/wroathe)
[03:12:14] <floatcomplex> orrrrrr don't do that, and let -fsanitize=memory and/or valgrind do their job properly for you
[03:12:22] <floatcomplex> which they will not be able to do, if you do that
[03:13:16] <quartz> dave0: But how does that loop fill char input?
[03:13:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:13:40] <floatcomplex> quartz: put it in your array if it's not eof or '\n'
[03:13:43] <floatcomplex> but just use getline
[03:13:59] <De4nWhit3> floatcomplex I am learning about struct now. Its the most fun code I've been writing today! Also, I saw my confusion earlier about terminating the array early was actually a bug in my code. It should've been '0' + instead of '\0' +.
[03:14:18] <quartz> OHhhh
[03:14:28] *** Joins: ferdna (~ferdna@user/ferdna)
[03:16:02] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[03:22:59] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 268 seconds)
[03:24:35] *** Quits: engest (~engest@50.39.177.170) (Read error: Connection reset by peer)
[03:24:42] *** Parts: Burgundy (~yomon@86.127.194.72) ()
[03:24:55] <jnip> lmao i got UDP voice loopback working, it sounds horrible
[03:25:11] *** Joins: engest (~engest@50.39.177.170)
[03:25:44] *** Joins: richbridger (~richbridg@089144202237.atnat0011.highway.a1.net)
[03:28:48] <quartz> floatcomplex: Sorry to bug you again, but how would I use copy the input from the loop into my char array? I'm not sure where the input is stored since I can't use stdin.
[03:28:56] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[03:30:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:25ae:baa7:4680:70ca) (Ping timeout: 260 seconds)
[03:30:45] <floatcomplex> quartz: for context, dave0's loop was to replace a single fflush() call
[03:31:04] <quartz> floatcomplex: Ohh
[03:31:10] <floatcomplex> but you can adapt it to actually read the data
[03:31:13] <quartz> So I don't need break, I'd need continue
[03:33:42] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Quit: Leaving)
[03:35:38] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:36:45] <quartz> dave0: Thanks a lot for the help :)
[03:37:43] <dave0> quartz: okay cool no worries
[03:38:41] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[03:40:03] <quartz> Yeah I can see how getline is actually better here.
[03:42:58] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:43:13] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:43:24] *** Joins: eXeC65 (~eXeC64@80.1.220.46)
[03:43:56] *** Quits: eXeC64 (~eXeC64@80.1.220.46) (Ping timeout: 268 seconds)
[03:44:07] *** Quits: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[03:44:07] <kexec> i need to declare an array of strings in main() and then call a function to determine number of strings and allocate that array. i have this basic code but i get segmentation fault. please, could someone check why? https://bpa.st/QMQQ
[03:44:21] *** Joins: Thedarkb (~Thedarkb@cpc84151-pool16-2-0-cust89.15-1.cable.virginm.net)
[03:45:36] <dave0> kexec: line 12 ...   (*strarray)[i] = (char *)calloc(length_of_string, sizeof(char));
[03:45:53] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:46:00] <dave0> i'm surprised it compiles
[03:46:53] <dave0> oh you commented out the loop in main
[03:47:33] <masterbuilder> you're indexing it like it was a 2D array in 26
[03:47:47] <masterbuilder> oh right, commented out, like dave0 said
[03:47:55] <kexec> dave0: thanks man
[03:48:05] <dave0> kexec: no worries
[03:48:44] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[03:49:34] <dave0> kexec: when you uncomment the loop, you need a way to share num_of_strings and  length_of_string between those two functions
[03:49:58] <dave0> kexec: the easiest way is to move lines 6 & 7 to line 4 (ie. make them global variables)
[03:50:39] <dave0> you could also have allocate() return them (in the same way you "return" the strarray)
[03:52:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:53:25] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:53:48] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Ping timeout: 268 seconds)
[03:54:25] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[03:56:02] *** Joins: Wulf (~Wulf@user/wulf)
[03:56:34] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[03:56:52] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:59:43] *** Joins: seninha (~seninha@user/seninha)
[04:00:30] *** Joins: Raguile (~Raguile@user/raguile)
[04:02:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:03:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b)
[04:04:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[04:09:42] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[04:10:19] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[04:11:39] *** Quits: rcm888 (~u1@95.54.110.203) (Remote host closed the connection)
[04:12:30] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Quit: Leaving)
[04:13:07] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[04:13:13] *** Quits: komputilo (~Komputilo@dhcp-077-250-239-118.chello.nl) (Quit: Leaving)
[04:14:21] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[04:14:49] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:17:33] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[04:17:54] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:18:21] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[04:19:21] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[04:19:49] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[04:19:53] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[04:20:20] *** Quits: kurahaupo (~kurahaupo@pa49-195-92-201.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[04:20:33] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[04:23:28] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Quit: Leaving)
[04:26:00] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[04:26:34] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[04:27:20] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[04:28:55] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[04:31:42] *** Joins: jbauer (~jbauer@146.71.11.98)
[04:32:56] *** Joins: pulse (~pulse@user/pulse)
[04:33:00] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[04:33:18] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[04:33:18] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[04:33:25] *** Joins: kish` (~aqua@user/aqua)
[04:34:17] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[04:35:20] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[04:38:23] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:42:42] *** Quits: Budd (~Budd@2001:470:8d44:1::5) (Read error: Connection reset by peer)
[04:43:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[04:44:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:45:03] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:46:30] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[04:51:36] *** Quits: kexec (~kexec@user/kexec) (Ping timeout: 256 seconds)
[04:51:52] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:59:04] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[04:59:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:59:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:59:56] *** Joins: wroathe (~wroathe@user/wroathe)
[05:02:44] *** Quits: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net) (Remote host closed the connection)
[05:02:53] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 268 seconds)
[05:04:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:13:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[05:13:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:16:00] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[05:16:23] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[05:24:44] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:26:54] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[05:27:19] *** Quits: pi0 (~default@23.95.234.10) (Changing host)
[05:27:19] *** Joins: pi0 (~default@user/pi0)
[05:28:10] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[05:29:28] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[05:32:24] *** Joins: pucara (~i@host194.181-14-159.telecom.net.ar)
[05:35:33] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 268 seconds)
[05:35:37] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[05:35:51] *** Joins: gzj (~GZJ0X@199.193.127.57.16clouds.com)
[05:36:57] *** Joins: jbauer (~jbauer@146.71.11.98)
[05:37:54] *** Joins: moose (~moose@user/moose)
[05:38:35] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:39:13] *** Joins: Guest82 (~Guest82@pool-100-38-19-214.nycmny.fios.verizon.net)
[05:40:25] *** Quits: gzj (~GZJ0X@199.193.127.57.16clouds.com) (Client Quit)
[05:41:05] *** Guest82 is now known as Shloime
[05:41:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:41:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:41:13] *** Joins: wroathe (~wroathe@user/wroathe)
[05:41:15] *** Quits: Shloime (~Guest82@pool-100-38-19-214.nycmny.fios.verizon.net) (Client Quit)
[05:45:47] *** Quits: Fleck (~fleck@user/fleck) (Quit: GOSUB w/o RETURN)
[05:46:22] *** Joins: Fleck (~fleck@user/fleck)
[05:46:40] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[05:47:11] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 264 seconds)
[05:47:18] *** Quits: eau (~chat@user/eau) (Ping timeout: 260 seconds)
[05:48:21] *** Joins: eau (~chat@user/eau)
[05:48:22] *** Quits: jbauer (~jbauer@146.71.11.98) (Remote host closed the connection)
[05:48:35] *** Joins: Famine- (~Famine@user/famine)
[05:50:44] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[05:52:12] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 268 seconds)
[05:52:53] *** Joins: malloy (~jimery@116.30.220.108)
[05:53:00] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:55:51] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[05:56:15] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[05:56:30] *** Joins: nitrix_ (~nitrix@user/nitrix)
[05:56:53] *** nitrix_ is now known as nitrix
[05:57:01] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Quit: Bye)
[05:57:17] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[05:57:38] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[05:58:45] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[05:59:54] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Ping timeout: 260 seconds)
[05:59:58] *** Joins: alphabeta (~kilolympu@185.65.135.177)
[06:00:17] *** Quits: kuku (~kuku@user/kuku) (Read error: Connection reset by peer)
[06:00:22] *** Quits: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com) (Ping timeout: 260 seconds)
[06:00:47] *** Joins: kuku (~kuku@user/kuku)
[06:01:10] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Client Quit)
[06:01:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:02:52] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[06:03:10] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 260 seconds)
[06:03:21] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[06:03:21] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[06:03:21] *** Joins: blinky42 (~quassel@user/blinky42)
[06:03:31] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Ping timeout: 256 seconds)
[06:06:24] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[06:08:18] *** Quits: energizer (~energizer@user/energizer) (Ping timeout: 260 seconds)
[06:10:06] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[06:10:10] *** Quits: alch (~alch@pa-18-173-12.service.infuturo.it) (Read error: Connection reset by peer)
[06:12:57] *** Joins: energizer (~energizer@user/energizer)
[06:13:46] *** Joins: davros (~davros@host86-185-61-22.range86-185.btcentralplus.com)
[06:14:14] *** Joins: alch (~alch@151.82.198.29)
[06:19:59] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[06:20:30] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[06:20:41] <caze> You could also use variable arrays.
[06:21:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[06:21:19] <caze> Oh, 2.5 hours old discussion.
[06:21:40] <pony> :O
[06:22:13] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[06:22:35] *** Quits: Guest4193 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[06:25:46] *** Joins: pulse_ (~pulse@user/pulse)
[06:26:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:27:30] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:29:01] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[06:29:35] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 256 seconds)
[06:29:59] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[06:30:04] *** pulse_ is now known as pulse
[06:30:12] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:12ac:c0f0:d0ed:dca9)
[06:30:54] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:31:36] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[06:34:09] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:34:46] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[06:36:16] *** Joins: khoa (~khoa@user/khoa)
[06:36:23] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[06:36:38] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[06:36:52] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[06:38:06] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[06:41:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:41:33] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[06:41:47] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:12ac:c0f0:d0ed:dca9) (Ping timeout: 264 seconds)
[06:42:28] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:44:04] *** Quits: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net) (Quit: WeeChat 3.3)
[06:47:12] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:50:48] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:51:50] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[07:00:49] *** Joins: simon323 (~A113@112.49.180.130)
[07:04:58] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[07:05:33] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:05:51] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[07:08:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[07:10:11] *** Quits: simon323 (~A113@112.49.180.130) (Quit: leaving)
[07:12:06] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[07:12:20] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:12:30] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[07:13:55] *** Joins: kexec (~kexec@user/kexec)
[07:14:07] *** Joins: tar_xvf_ (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[07:14:14] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 268 seconds)
[07:14:56] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[07:15:28] *** Quits: mahmutov_ (~mahmutov@37.155.85.233) (Ping timeout: 256 seconds)
[07:18:32] *** Joins: pgib (~textual@173.38.117.89)
[07:19:16] *** Joins: missogra (~missogra@dynamic-077-010-253-012.77.10.pool.telefonica.de)
[07:20:32] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:19ce:57cd:27d4:595b)
[07:33:43] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[07:34:04] *** Joins: tejr (~tejr@user/tejr)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:43:19] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[07:43:26] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:8212:cc0d:c5bc:fb1e)
[07:43:53] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[07:43:58] *** Quits: missogra (~missogra@dynamic-077-010-253-012.77.10.pool.telefonica.de) (Quit: Leaving)
[07:44:27] *** Quits: tar_xvf_ (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 268 seconds)
[07:56:12] *** Joins: tar_xvf_ (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[07:56:47] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 268 seconds)
[07:58:50] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 260 seconds)
[08:00:10] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[08:00:33] *** Quits: puke (~puke@user/puke) (Quit: puke)
[08:02:54] *** Joins: Khoyo (~khoyo@user/khoyo)
[08:04:27] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[08:18:11] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[08:19:20] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[08:28:19] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[08:36:26] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:39:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:40:52] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:44:44] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[08:45:08] *** Joins: de-facto (~de-facto@user/de-facto)
[08:47:49] *** Joins: EdFletcher (~ubuntu@user/edfletcher)
[08:49:52] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[08:50:06] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[08:55:21] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[08:56:31] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 252 seconds)
[08:57:04] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (Ping timeout: 252 seconds)
[08:57:31] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[08:58:23] *** Joins: trn (jhj@sourcehut/user/trn)
[09:04:28] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:07:23] *** Joins: eeee (~eeee@user/eeee)
[09:10:21] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.3)
[09:11:20] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:11:27] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[09:13:23] *** Quits: eeee (~eeee@user/eeee) (Quit: WeeChat 3.3)
[09:20:43] <pony> hi
[09:20:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[09:21:29] <dave0> hi pony 
[09:21:35] <pony> sup
[09:21:47] <dave0> nuffing, you?
[09:21:51] <pony> nm
[09:21:53] *** Quits: tar_xvf_ (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 268 seconds)
[09:26:46] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[09:28:03] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[09:29:52] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:35:47] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 264 seconds)
[09:39:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:39:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:41:00] *** Quits: engest (~engest@50.39.177.170) (Ping timeout: 268 seconds)
[09:43:00] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[09:44:25] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[09:44:53] *** Joins: de-facto (~de-facto@user/de-facto)
[09:45:18] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[09:46:27] *** Joins: EdithT_41 (~EdithT_41@148.255.157.131)
[09:46:35] *** Quits: Samian (~s@user/samian) (Ping timeout: 264 seconds)
[09:46:46] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[09:49:45] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:52:42] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[09:53:25] *** Quits: EdithT_41 (~EdithT_41@148.255.157.131) (Remote host closed the connection)
[09:57:01] *** Joins: miqztee (~username@user/miqztee)
[09:58:04] *** Joins: Atque (~Atque@user/atque)
[10:06:54] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[10:08:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:09:02] *** Joins: RogOne_gg (~igloo@ptr-178-51-201-115.dyn.mobistar.be)
[10:11:17] *** Quits: presonic (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[10:11:39] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[10:13:04] *** Quits: alch (~alch@151.82.198.29) (Ping timeout: 268 seconds)
[10:14:39] *** Joins: alch (~alch@151.82.188.126)
[10:24:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[10:25:39] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[10:28:20] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:29:56] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[10:31:15] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[10:36:33] *** Quits: RogOne_gg (~igloo@ptr-178-51-201-115.dyn.mobistar.be) (Remote host closed the connection)
[10:36:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:46:06] *** Joins: kurahaupo (~kurahaupo@203.206.24.213)
[10:46:42] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[10:50:30] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Client Quit)
[10:50:38] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[10:54:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:58:30] *** Joins: Samian (~s@user/samian)
[10:58:42] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[10:59:55] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[11:00:55] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[11:01:04] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[11:01:17] *** Joins: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr)
[11:02:52] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:03:13] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[11:03:36] *** Joins: thing (~thing@user/thing)
[11:03:58] <fluter> hi
[11:04:06] <fluter> hi caze 
[11:05:17] *** Joins: tinyweasel (~weasel@15.235.28.27)
[11:07:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[11:11:39] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[11:13:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:15:45] *** Quits: miqztee (~username@user/miqztee) (Quit: Leaving)
[11:18:59] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 264 seconds)
[11:19:55] *** Joins: vysn (~vysn@user/vysn)
[11:20:40] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:24:01] *** Joins: mrig (~AdiIRC@user/mrig)
[11:27:40] *** Quits: rahl (~rahl@102.114.98.151) (Ping timeout: 268 seconds)
[11:29:18] *** Joins: rahl (~rahl@102.114.127.19)
[11:29:31] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[11:31:07] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:31:13] <enyc> fluter: yes so you said ;p
[11:31:20] <enyc> fluter: try asking your question or showing your code
[11:32:12] *** Joins: szutt (~szutt@116.37.2.145)
[11:35:16] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:8212:cc0d:c5bc:fb1e) (Quit: Leaving)
[11:36:19] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[11:39:06] *** Quits: kurahaupo (~kurahaupo@203.206.24.213) (Ping timeout: 260 seconds)
[11:40:06] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[11:45:35] *** Quits: Libero (~Libero@188.4.25.75.dsl.dyn.forthnet.gr) (Quit: Leaving)
[11:47:22] *** Quits: high_ground (~yes@129.151.69.173) (Changing host)
[11:47:22] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[11:47:27] *** Joins: Rounin (~david@84.212.130.215)
[11:49:06] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[11:51:05] *** Joins: aradesh (~aradesh@user/aradesh)
[11:51:26] <useretail_> what's the top 5 libraries every c dev should know?
[11:51:33] *** useretail_ is now known as useretail
[11:51:46] <high_ground> stdio.h
[11:52:10] <LangerJan> thats not a library, but that would be libc ;)
[11:52:38] <high_ground> oh
[11:52:58] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[11:53:09] <useretail> i'd classify libc as a collection of libraries
[11:53:24] <high_ground> i mean libraries usually depend on the use cases
[11:53:48] <useretail> that you use in most cases
[11:55:08] <LangerJan> for numbers: gmp, mpir and mpfr
[11:55:11] <high_ground> libcurl maybe
[11:58:08] <LangerJan> sometimes, you need to deal with bigger numbers or floating point numbers with arbitrary precision and correct rounding. These are your workhorses
[11:58:27] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[11:58:43] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:03:13] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[12:06:06] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:312d:62c2:720b:cc3b)
[12:06:11] *** Joins: arinov (~arinov@213.194.126.155)
[12:14:05] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:14:56] *** Quits: msk (~msk@185.124.240.174) (Read error: Connection reset by peer)
[12:15:08] *** Joins: msk (~msk@185.124.240.174)
[12:16:14] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:17:20] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[12:19:53] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[12:23:19] *** Quits: Guest4382 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Remote host closed the connection)
[12:23:31] *** Joins: qwerty- (~qwerty@user/badwolf)
[12:24:05] *** Quits: qwerty (~qwerty@user/badwolf) (Ping timeout: 264 seconds)
[12:27:26] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:27:38] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[12:28:05] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (Client Quit)
[12:28:27] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[12:28:28] <shiroyasha> libsodium is definitely near the top of my list.
[12:30:14] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (Client Quit)
[12:31:17] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:35:04] *** Joins: Klinda (~superleag@user/klinda)
[12:35:59] <markand> useretail, SDL2, jansson, rexo, libarchive/libzip, zstd, sqlite, 
[12:38:09] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[12:40:22] *** Joins: klf (~fkl@135.12.180.212)
[12:41:08] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (Client Quit)
[12:41:40] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[12:42:16] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[12:44:09] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 268 seconds)
[12:44:11] *** Quits: klf (~fkl@135.12.180.212) (Quit: leaving)
[12:44:26] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 260 seconds)
[12:44:28] *** Joins: Khoyo (~khoyo@user/khoyo)
[12:45:27] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[12:45:53] *** Joins: johnnyreb (~tth@user/johnnyreb)
[12:46:45] <dave0> libc libcurses libedit libm libpthread
[12:47:31] <dave0> and then there's X11 oy!
[12:48:29] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:48:40] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:50:49] <sham1> Wayland
[12:52:17] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:52:30] <dave0> never tried it
[12:52:34] <dave0> how is it?
[12:52:46] *** Joins: Guest0 (~Guest0@114.254.3.5)
[12:53:10] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[12:53:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[12:54:03] *** Joins: ski (~ski@remote12.chalmers.se)
[12:54:13] <sham1> I wrote a bit of a Wayland compositor (read: an amalgam of Xorg server, window management and window compositor) a while back. I find it nicer to work with than X, but of course not everyone agrees with that viewpoint
[12:55:17] <dave0> i learned enough x to draw a picture
[12:55:20] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[12:56:11] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[12:56:50] *** Quits: pucara (~i@host194.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[12:57:09] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[13:00:49] *** Joins: saribro (~swinnenb@user/swinnenb)
[13:02:13] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Read error: No route to host)
[13:02:31] *** Quits: Guest0 (~Guest0@114.254.3.5) (Quit: Client closed)
[13:03:08] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:03:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:03:13] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[13:04:25] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 260 seconds)
[13:07:25] *** Joins: plastico (~plastico@neomutt/plastico)
[13:08:22] *** Joins: samlamamma (~samlamamm@proxy01.se.axis.com)
[13:09:10] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[13:14:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[13:16:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[13:18:36] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[13:21:15] <earnestly> sham1: arcan
[13:21:30] <sham1> Is also good
[13:25:27] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:29:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:29:55] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[13:30:25] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Client Quit)
[13:31:33] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[13:37:48] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 268 seconds)
[13:38:50] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[13:38:55] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:40:49] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[13:43:21] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Quit: Leaving)
[13:43:22] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:43:37] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[13:45:20] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[13:47:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:49:29] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Read error: Connection reset by peer)
[13:49:31] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[13:50:18] *** Joins: fra (~fra@93-35-145-197.ip55.fastwebnet.it)
[13:50:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:51:05] *** Parts: fra (~fra@93-35-145-197.ip55.fastwebnet.it) ()
[13:55:45] *** Joins: javi (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[13:56:18] *** Quits: javi (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Client Quit)
[13:56:44] *** Joins: javi_ (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[13:57:27] *** Quits: javi_ (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Client Quit)
[13:57:56] *** Joins: javi_ (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[13:58:11] <javi_> .
[13:59:25] <javi_> why does it say im authenticated with my nickname but everytime a send a message another nick appears?
[14:01:38] <bookworm> javi_: I'm very sure #c couldn't know. This is not a general IRC support chan, try #libera
[14:09:40] *** Joins: ToDDynho (~i.am@user/marlboro)
[14:10:23] *** Quits: alch (~alch@151.82.188.126) (Read error: Connection reset by peer)
[14:12:03] *** Joins: supernova (~quassel@2405:9800:ba11:6207:2e99:799d:3d6:6376)
[14:14:55] *** Joins: alch (~alch@ca-18-207-26.service.infuturo.it)
[14:15:41] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[14:15:46] *** Joins: msmhnd^ (~msmhnd@wsip-98-188-242-6.mc.at.cox.net)
[14:18:11] *** javi_ is now known as hxztnxt
[14:18:42] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 260 seconds)
[14:19:59] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:21:18] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:25:25] *** Joins: mrig (~AdiIRC@user/mrig)
[14:29:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:28] *** Joins: fra1 (~fra@93-35-145-197.ip55.fastwebnet.it)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:31:58] *** Quits: fra1 (~fra@93-35-145-197.ip55.fastwebnet.it) (Quit: WeeChat 3.0)
[14:32:32] *** qwerty- is now known as qwerty
[14:36:18] <fluter> enyc: :p
[14:36:18] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:36:23] <fluter> enyc: hello , how you doing
[14:39:32] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[14:39:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:40:17] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[14:40:19] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[14:41:48] *** Joins: ecart (~Guest13@138.185.239.191)
[14:42:23] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:43:13] *** Joins: malloy (~jimery@116.30.220.108)
[14:43:54] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 260 seconds)
[14:46:21] <ecart> Does anyone speak Portuguese here?
[14:46:22] <ecart> I need a bilingual teacher
[14:46:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Client Quit)
[14:47:22] <ecart> I have the following question
[14:49:34] <ecart> int main(int argc char argv)    e  int main(int *x char *y)
[14:49:57] <ecart> what does it mean?
[14:50:28] *** Joins: fra (~fra@93-35-145-197.ip55.fastwebnet.it)
[14:50:43] <supakeen> it's a function definition
[14:51:11] <ecart> ok
[14:51:15] <LangerJan> ecart: fyi: cdecl.org
[14:51:26] <supakeen> it's also not valid C but I can pretend it is
[14:51:56] <fra> can i ask for code review here?
[14:52:23] <supakeen> you can ask, but it takes a lot of time and everyone here is a volunteer so if someone looks at it dunno
[14:52:36] *** Joins: khoa (~khoa@user/khoa)
[14:54:29] <fra> thanks, so i need an help to improve this code because it takes 25 seconds to calculate the edit distance of a list of given word with each words of another list of words i think the problem could be the excessive usage of mallocs and free, here is the code https://gist.github.com/Zophirel/abb0a30d916793e17d4b3d2ad3de5e7a
[14:54:30] <candide> Title of fra's link: edit_dist_lists.c · GitHub
[14:56:33] <supakeen> if i have time after lunch i'll take a look but don't bet on it :)
[14:57:11] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:57:12] <Bou> it would be nice to have edit_distance.h and your calling function
[14:58:48] <supakeen> If I have to crystal orb it you might be in "accidentally quadratic" land.
[14:59:01] <supakeen> From your description at least.
[14:59:37] <Bou> it does seem to rebuild a lot of structures for each word
[15:00:37] <Bou> `create_wordlist()` sounds expensive, does that need to be run for each word?
[15:00:50] <fra> i'll update with the other files
[15:01:13] <fra> yes it create each time counter i change
[15:01:45] <fra> so each time the word to be analyzed (w1) change 
[15:02:55] <Bou> there are profilers that can tell you exactly how much time was spent on each line of code
[15:04:30] <fra> i tried to use valgrind but it's really slow
[15:05:18] <Bou> gprof maybe? compile with -pg, run your program, then `gprof -l ./yourprogram`
[15:05:41] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[15:06:08] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[15:10:57] <Bou> ah, you create a full copy of your dictionary for each word? that will be expensive
[15:14:28] <fra> i run my program with pg flag but i think it get stuck because the SO send a Kill signal anyway i have the gmon.out but it seems i cannot run it with gmon it says it is not an executable 
[15:14:48] <fra> with gprof*
[15:15:37] *** Joins: serbest (~serbest@user/serbest)
[15:15:54] <Bou> you run gprof on the executable, and then it will read the gmon
[15:16:44] <Bou> but wait, kill signal? and "SO" is? stack overflow?
[15:17:04] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[15:17:23] *** Quits: ecart (~Guest13@138.185.239.191) (Quit: Client closed)
[15:17:26] <fra> sorry i'm italian SO is OS, operative system
[15:17:56] <fra> to use gprof with an executable that need arguments do i need to use some flags?
[15:18:15] <clarity> No
[15:18:46] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:18:54] <fra> so just gprof ./a.out file1.txt file2.txt?
[15:18:58] <clarity> No
[15:19:18] <clarity> You run a.out with whatever arguments you want, then you run gprof a.out
[15:19:35] <Bou> or `gprof -l ./a.out` to get line-by-line output
[15:19:44] <fra> ah ok thanks
[15:20:34] <Bou> you don't run your program in gprof, you run your program, it makes a gmon.out, then you use gprof to show the results
[15:21:33] *** ToDDynho is now known as ko
[15:25:03] *** Joins: puke (~puke@user/puke)
[15:26:10] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[15:26:12] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[15:27:14] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[15:27:22] *** Joins: lisbeths (uid135845@id-135845.lymington.irccloud.com)
[15:27:35] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[15:27:36] *** Joins: sudden (~cat@user/sudden)
[15:29:27] <fra> here is the gprof output https://pastebin.com/3i5HsfuT it is strange because without -pg the execution is slow but not that slow to be killed by the OS and from what i can see from the output it seems that the program get stuck on collection_phrases 
[15:30:36] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[15:30:49] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:31:09] *** Quits: samlamamma (~samlamamm@proxy01.se.axis.com) (Quit: Client closed)
[15:31:18] <clarity> Is that an optimized binary?
[15:31:24] <fra> no
[15:31:26] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:31:42] <Bou> so you have two words, `for each (w1 in correctme) { for each (w2 in dictionary) { calculate (w1,w2) distance; ... } }`
[15:31:56] <fra> yes 
[15:31:57] <Bou> and if it's the same distance as the best match, add it to the array of matches. if it's better, free your array and make a new one (starting size: 10 elements)
[15:32:11] <fra> yes
[15:33:42] <Bou> why is your thing being killed by the OS, do you allocate too much memory?
[15:34:57] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[15:34:58] <Bou> this collect_phrases seems to take up all the time
[15:35:10] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Client Quit)
[15:35:11] *** Quits: baltazar (~baltazar@193-110-63-186.cable-modem.hdsnet.hu) (Ping timeout: 264 seconds)
[15:35:27] <Bou> but we don't have that code
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:14] <fra> ok now it get killed even without -pg so it surely beacaues of memeory problem 
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:34] <fra> sorry i updated the git with the entire code https://gist.github.com/Zophirel/abb0a30d916793e17d4b3d2ad3de5e7a
[15:36:35] <candide> Title of fra's link: collect_element.c · GitHub
[15:36:40] *** Joins: helppls (~helppls@86.228.71.37.rev.sfr.net)
[15:36:53] *** Joins: baltazar (~baltazar@178-164-254-231.pool.digikabel.hu)
[15:37:01] <helppls> https://onlinegdb.com/Qeu4SQcob can someone explain why when i comment toupper() lines it prints something but not when I use it 
[15:37:51] <Bou> fra: wait a sec, that collect_phrases reads a file... are you reading the same files over and over and over?
[15:39:13] <fra> mh not really i think, i call collect_phrases just one time so it does an fopen and then when it enter the while loop it read the file char by char
[15:39:32] <helppls> https://onlinegdb.com/Qeu4SQcob can I get help
[15:39:37] <dave0> helppls: the trouble is LetterCaptialize("hello world");
[15:39:41] <markand> fra, line 37 be careful with that realloc eugune
[15:39:50] <markand> if it fails, you lose the original pointer in the memory 
[15:40:03] <markand> that's why OpenBSD designed reallocf for example
[15:40:11] <dave0> helppls: int main(void) { char test[] = "hello world"; LetterCapitalize(test); puts(test); }
[15:40:13] *** Joins: Khoyo (~khoyo@user/khoyo)
[15:41:23] <helppls> dave0 : what's the difference ?
[15:41:52] <helppls> in one we have an array that is a pointer and in the second one it's a pointer to an array too no ?
[15:42:04] <dave0> helppls: http://www.c-faq.com/decl/strlitinit.html
[15:42:16] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[15:42:47] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[15:43:59] <clarity> fra: How large is your input anyway?
[15:44:16] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[15:44:21] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 256 seconds)
[15:44:25] <clarity> Reading character by character and making a copy of each character is generally not the fastest way to process large files
[15:44:43] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[15:45:00] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[15:45:47] <clarity> And then you allocate & make a copy of each word too
[15:46:05] <helppls> ok it works now
[15:46:06] <helppls> ty guys
[15:46:20] <dave0> welco
[15:46:43] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[15:47:18] <fra> dictionary.txt (w2) has 661563 word (lines) correctme.txt (w1) has only 48 words
[15:47:58] <clarity> And reading the words from correctme takes 100 seconds?
[15:48:07] <clarity> Yeah something's wrong, are you sure you're not overflowing your buffer?
[15:48:30] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[15:48:41] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[15:48:48] <fra> there is no words that has more the 20 charathers so i don't think so
[15:49:36] <clarity> Punctuation counts as words too
[15:49:46] *** Joins: loganlee (~Thunderbi@user/loganlee)
[15:50:29] <clarity> Oh wait
[15:50:32] <fra> i ignore them (don't put into the buffer)
[15:50:47] <clarity> Yeah sorry I read that wrong
[15:51:01] *** Joins: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:814e:792b:9779:a1a2)
[15:51:16] <clarity> Did you try printing the words as you're adding them?
[15:51:31] <Bou> I ran it with a 100.000 word dictionary, it spent 47.41% in dynamic_edit_distance and 39.51% in calculate_costs
[15:51:44] <clarity> Ok so the pg output is bogus?
[15:52:37] <Bou> looks like it, the 100.7% was suspicious anyway
[15:53:04] *** Quits: loganlee (~Thunderbi@user/loganlee) (Client Quit)
[15:53:05] <clarity> Hold on
[15:53:27] <clarity> It said realloc is called 661562 times..
[15:53:28] <clarity> Eheh
[15:54:23] <Aloli_9264> A global variable used by two threads need to use 'volatile'?
[15:54:26] *** Quits: avar (avar@vm.nix.is) (Ping timeout: 260 seconds)
[15:54:37] <fra> @clarity yes the words are correctly stored i can print them when the collec_phrases finsh
[15:54:39] <Bou> it starts with a 10-element array, so if more than 10 words in the dictionary have the same edit distance it will realloc
[15:55:10] *** Quits: supernova (~quassel@2405:9800:ba11:6207:2e99:799d:3d6:6376) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:55:15] *** Joins: avar (~avar@vm.nix.is)
[15:55:43] <fra> so i should multiply by 10 instead of 2 that would help to call fewer reallocs?
[15:56:02] <LangerJan> Aloli_9264: no
[15:56:04] <Bou> or start with arr_size = 100? or better yet, allocate the buffer once and reuse it
[15:56:32] <LangerJan> Aloli_9264: volatile is not for thread safety
[15:56:33] *** Quits: malloy (~jimery@116.30.220.108) (Quit: WeeChat 3.0)
[15:58:14] <LangerJan> Aloli_9264: check out the _Atomic type specifier/qualifier, or use other means of synchronization (mutexes) to avoid data races 
[15:58:38] *** Joins: constxo (~brad@192.75.101.164)
[15:58:41] <fra> thanks a lot for your help, i will solve it after lunch thanks a lot
[15:59:05] <Aloli_9264> but i think it may storage the variable from memory to register temporarily
[15:59:24] <Bou> fra: but that's not where the problem is, it's in dynamic_edit_distance calling all those strlens and calculate_costs
[16:00:32] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:01:08] <LangerJan> Aloli_9264: yes, but thats happening all the time and is not in the scope of C to avoid. "volatile" basically means: "Something out of my domain is able to manipulate that variable". This can be, for example, in embedded systems an interrupt register or a digital input 
[16:01:28] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[16:01:43] <fra> @Bou is there a cheaper way to know a string length?
[16:01:43] <LangerJan> Aloli_9264: s/out/outside/g
[16:03:03] *** Quits: constxo (~brad@192.75.101.164) (Ping timeout: 256 seconds)
[16:03:21] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[16:03:47] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[16:03:56] *** Joins: constxo (~brad@192.75.101.164)
[16:04:11] *** Joins: Khoyo (~khoyo@user/khoyo)
[16:04:20] <Aloli_9264> so i mean the other thread may change the variable in memory ,but this thread still use the variable in register 
[16:04:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[16:04:34] *** Quits: serbest (~serbest@user/serbest) (Ping timeout: 268 seconds)
[16:05:14] <dave0> we have found that you can squeeze three 21 bit unicode points into one 64 bit register
[16:05:20] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[16:05:41] <dave0> mind blown
[16:06:06] <LangerJan> Aloli_9264: Again, C has no idea about registers. But if you use atomic data types or semaphores/etc. you get CPU-assisted memory barriers which will force a reload of variables from memory if needed
[16:06:51] <Bou> fra: sure, but I think you do too many recursive calls: if the lengths don't line up you recurse with i+1 and that's going to strlen both words again, recurse, strlen again, etc
[16:07:43] <Aloli_9264> thanks very much:P
[16:08:12] <Zophirel> So maybe passing length as parameter instead of calling strlen again and again could solve the porblem
[16:08:24] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:d29:7f9f:ec16:1313) (Remote host closed the connection)
[16:08:35] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Quit: Leaving)
[16:08:36] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[16:08:52] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[16:08:57] <Zophirel> I'm fra just changed client ahaha
[16:09:33] *** Joins: johnnyrichard (~johnnyric@c213-89-136-181.bredband.tele2.se)
[16:09:40] <Bou> I don't know why dynamic_edit_distance is recursing at all, the idea of dynamic programming approach is you fill that matrix[][] once and get the best match directly
[16:10:37] *** Quits: helppls (~helppls@86.228.71.37.rev.sfr.net) (Quit: Connection closed)
[16:11:23] <LangerJan> does this channel have a bot with shortcuts to the standard or FAQs?
[16:11:33] *** Joins: gareppa (~gareppa@user/gareppa)
[16:11:50] *** Joins: sedeki (~textual@user/sedeki)
[16:11:51] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Client Quit)
[16:11:54] <Xgc> LangerJan: Check the channel topic.
[16:12:12] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[16:12:15] *** Quits: gareppa (~gareppa@user/gareppa) (Client Quit)
[16:13:41] <Zophirel> @Bou the recursion is needed by the assignament so it must be recursive
[16:13:51] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Changing host)
[16:13:51] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:13:52] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:14:14] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[16:14:32] <LangerJan> Xgc: thx, so, no bot, no faq, but the standard linked :)
[16:14:33] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:15:18] <Xgc> LangerJan: Pretty much anything the bot would have told you (on that subject) is accessed via the topic.
[16:15:46] <Xgc> LangerJan: faq, books, standards, etc, all through the topic.
[16:18:17] <Xgc> LangerJan: Here's the top level wiki link (also indirectly from the topic): https://iso-9899.info/wiki/Main_Page
[16:18:58] *** Quits: sudden (~cat@user/sudden) (Quit: leaving)
[16:19:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:22:38] <LangerJan> ah, thanks. Much appreciated :)
[16:22:39] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[16:31:08] *** Joins: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de)
[16:32:19] <Bou> Zophirel: teacher said it needs to recurse, so then you have no choice... but does it need to call a separate calculate_costs for each matrix element?
[16:33:41] <Bou> to compare "hello" with "world" that's 25 function calls just to set 25 matrix elements
[16:35:42] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[16:36:22] *** MrMobius_ is now known as MrMobius
[16:38:51] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[16:39:00] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[16:39:00] *** Joins: sudden (~cat@user/sudden)
[16:39:58] *** Joins: whup_dup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:01] *** Quits: p0g0__ (~p0g0@216.211.157.175) (Read error: Connection reset by peer)
[16:40:19] *** Joins: p0g0__ (~p0g0@216.211.157.175)
[16:40:29] *** Joins: constxd (~brad@192.75.101.164)
[16:42:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[16:42:46] *** whup_dup is now known as whupdup
[16:43:17] *** Quits: constxo (~brad@192.75.101.164) (Ping timeout: 256 seconds)
[16:43:23] <Zophirel> Bou so it's better to implement it directly into dynamic_edit_distance
[16:43:30] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:46:44] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[16:47:03] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[16:47:10] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:48:03] *** Joins: johnnyrichard32 (~johnnyric@c213-89-136-181.bredband.tele2.se)
[16:48:57] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[16:50:53] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:53:31] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:312d:62c2:720b:cc3b) (Quit: Leaving)
[16:54:06] <Xgc> Zophirel: I didn't follow the entire conversation.  But you do have allocation issues in the original posted program which could easily cause problems.  Have you corrected them?
[16:54:20] <Bou> I'm trying to see what your program does. it builds a matrix, it gets the correct result, but I think it works in exactly the wrong direction
[16:55:23] <Bou> you want the value of matrix[i][j] to be the minimum of matrix[i-1][j] and matrix[i][j-1] so it should recurse from i=strlen(word1)-1, j=strlen(word2)-1 to (0,0)
[16:56:43] <Xgc> Zophirel: create_wordlist is called/allocated over and over.  You probably want to do that outside the loop, and just reset any pointer if you want to rescan that list.
[16:58:56] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:00:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:00:52] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:01:29] *** Quits: jess (~jess@libera/staff/jess) ()
[17:02:19] <Xgc> Zophirel: or rename that function if it's for some "per word" use, instead of representing a list of words from a dictionary or other fixed list.
[17:02:53] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:4c0:1247:9522:a835)
[17:03:07] <fra> no wait the recursion starts from mat[1][1] it shouldn't start from the end of the row or from the last because i don't have all the values needed to calculate the current one
[17:03:40] <fra> so resetting a malloced struct is cheaper of freeing it and re mallocing?
[17:03:40] <Xgc> fra: I guess that message was meant for you.
[17:04:14] <Xgc> fra: If you can reuse, sure.  Don't just free/malloc if the same memory can be reused.
[17:05:04] *** Joins: AmR (~AmREiSa@156.199.92.40)
[17:05:08] <fra> ok i'll try resetting instead mallocing
[17:05:19] <floatcomplex> within reason
[17:05:42] *** Joins: earnestly (~earnest@user/earnestly)
[17:06:37] <Xgc> fra: If it's a single instance, always, and not in the recursive logic, you probably don't even need to malloc.
[17:06:46] *** Joins: engest (~engest@50.39.188.0)
[17:07:10] <Xgc> fra: But in that case, the difference will be immaterial.
[17:07:19] <Bou> here's how it recurses: https://pastebin.com/raw/XPkyRfcC, that looks odd
[17:08:44] *** Joins: quartz (~quartz@user/quartz)
[17:09:04] <Bou> I'm expecting to see (5,6) calling (4,6) followed by (5,5)
[17:10:37] <Xgc> fra: For your current question, you can mostly ignore anything outside the recursive logic.  collection_edit_distance seems to be outside.
[17:10:39] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[17:10:40] *** Quits: johnnyrichard (~johnnyric@c213-89-136-181.bredband.tele2.se) (Quit: leaving)
[17:13:40] <Xgc> fra: Be careful of comparing strings with ==, unless you know the pointers are required to match, including any literals you are using, like "\0".  This could be a problem.
[17:14:15] <floatcomplex> where's the code we are looking at that has this free and malloc
[17:15:26] *** Quits: johnnyrichard32 (~johnnyric@c213-89-136-181.bredband.tele2.se) (Quit: Client closed)
[17:15:34] <Xgc> floatcomplex: That wasn't really an issue in this case.  It's before the recursion in edit_dist_lists.c
[17:15:56] *** Joins: johnnyrichard (~johnnyric@c213-89-136-181.bredband.tele2.se)
[17:16:02] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[17:16:07] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c927:fbd7:acc4:9375)
[17:16:09] <floatcomplex> no i mean i can't find the link
[17:16:10] <Xgc> It's inside a loop, which could be avoided.  But not within the recursive logic.
[17:16:26] <Xgc> floatcomplex: https://gist.github.com/Zophirel/abb0a30d916793e17d4b3d2ad3de5e7a
[17:16:27] <candide> Title of Xgc's link: collect_element.c · GitHub
[17:16:35] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[17:17:27] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:18:05] <Xgc> floatcomplex: Download the zip will get everything to build.
[17:19:03] <fra> @Bou i'll try to reverse the assignament 
[17:19:45] *** Parts: johnnyrichard (~johnnyric@c213-89-136-181.bredband.tele2.se) ()
[17:20:06] <fra> Xgc about the string i solved checking the derefernced pointer with '\0' should be fine right+
[17:20:08] <fra> ?
[17:21:06] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[17:21:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c927:fbd7:acc4:9375) (Quit: Leaving)
[17:21:48] <Bou> still... it makes no sense to have recursion here, the dynamic programming algorithm is a simple nested for loop
[17:22:11] <Bou> are you sure your teacher wants that? there's a recursive algorithm and a dynamic one that just fills the matrix[][]
[17:22:33] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[17:22:56] <fra> Xgc doing `memset(checked_word -> word_list -> arr, 0, arr_size);` should reset the array correctly or should i use another value?
[17:23:14] <fra> Bou yes 100% sure i just read it againg
[17:23:29] *** Quits: X-Scale (~ARM@83.223.227.196) (Ping timeout: 268 seconds)
[17:24:57] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[17:26:00] *** Joins: X-Scale (~ARM@83.223.240.168)
[17:26:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ab95:d5d6:558a:3a83)
[17:26:55] <Xgc> fra: No. '\0' is not a pointer.  If you're trying to test for NULL, use NULL, even if a null pointer constant can be used too.  Your intention will be clearer.  '\0' seems more like you're looking for a string terminator.
[17:27:22] *** Joins: seninha (~seninha@user/seninha)
[17:27:46] *** Quits: derjanni (~textual@p5ddafd7f.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[17:29:07] <fra> Xgc ok thanks
[17:29:11] *** Quits: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[17:29:25] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:30:54] <Xgc> fra: Were you testing for an empty string or a NULL pointer?  It seems you were using that to test for a 0 length string.  If so, that was a mistake.
[17:31:35] *** Quits: LARathbone (~logan@user/poprocks) (Ping timeout: 260 seconds)
[17:32:20] <fra> yes it was to check for a 0 length string 
[17:32:21] <Xgc> fra: It's hard to tell what that expression intended, since you seem to test for NULL and strlen separately, plus this == "\0".  It looks like a mistake or at least unnecessary.
[17:32:30] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:60b5:43:52c6:40a7)
[17:32:30] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:60b5:43:52c6:40a7) (Changing host)
[17:32:30] *** Joins: skapata (~Skapata@user/skapata)
[17:33:16] <fra> yeah i agree it was just a mistake i completely removed it from the checks
[17:35:22] *** Quits: lisbeths (uid135845@id-135845.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:38] *** Quits: fra (~fra@93-35-145-197.ip55.fastwebnet.it) (Quit: WeeChat 3.0)
[17:41:02] *** Joins: fra (~Zophirel@93-35-145-197.ip55.fastwebnet.it)
[17:42:47] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[17:46:07] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:46:53] <fizzie> '\0' is not a pointer, but it is a null pointer constant (just like any other integer constant with the value 0). ;)
[17:48:35] *** Quits: Aloli_9264 (~Administr@2408:820c:8f3f:2b10:814e:792b:9779:a1a2) (Quit: Leaving.)
[17:48:38] *** Quits: mr_ab (~nobody@74-207-237-112.ip.linodeusercontent.com) (Remote host closed the connection)
[17:55:11] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:58:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[17:59:33] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:59:34] <fra> is counting (in a for loop) each char before '\0' cheaper then calling strlen() or they are pratically the same? 
[18:00:26] *** Joins: pucara (~i@host194.181-14-159.telecom.net.ar)
[18:00:30] <Bou> an interesting question, it probably depends on the length of the string
[18:00:55] <floatcomplex> and whether statically or dynamically linking, and the intelligence of the libc
[18:01:02] <Bou> if your first character is a '\0' right away you save the strlen call, if it's megabytes of text, strlen probably wins
[18:01:14] *** Quits: esselfe (~steph@user/esselfe) (Quit: brb)
[18:01:17] <floatcomplex> i'd say make your decision based on whether the resulting code is cleaner and less error-prone one way vs another
[18:01:30] <floatcomplex> if you have to jump through a bunch of hoops to use strlen in that situation, don't
[18:01:32] <floatcomplex> otherwise do
[18:01:50] <Bou> and it's "premature optimization", your algorithm is wrong, fix that first
[18:01:50] <clarity> Yea this is going into pointless micro-optimization and if you really need to know, you will know
[18:02:02] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::b67c) (Remote host closed the connection)
[18:03:34] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[18:04:45] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.3)
[18:05:19] <NRK[m]> strlen calls on string literals can also be optimized away by the compiler
[18:06:12] <NRK[m]> but if the value is known at compile time the loop will probably be optimized away as well
[18:07:03] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[18:07:28] *** Joins: thing (~thing@user/thing)
[18:07:39] <NRK[m]> stick to the idiom, only break away if you have actual good reason to
[18:07:47] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::b67c)
[18:09:25] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Read error: Connection reset by peer)
[18:09:45] *** Quits: alch (~alch@ca-18-207-26.service.infuturo.it) (Read error: Connection reset by peer)
[18:10:37] *** Joins: seninha_ (~seninha@user/seninha)
[18:11:00] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[18:11:35] *** Joins: Beastie (~lcu@user/thebeastie)
[18:12:02] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[18:14:15] *** Joins: alch (~alch@ca-18-196-143.service.infuturo.it)
[18:14:28] *** Joins: seninha (~seninha@user/seninha)
[18:16:45] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:18:59] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[18:19:44] *** Quits: pgib (~textual@173.38.117.89) (Quit: 00 PC LOAD LETTER)
[18:20:15] <fra> ok "solved" the problem, in few words it "wasn't" a problem it was intended to be slow 
[18:20:33] *** Joins: Praise (~Fat@user/praise)
[18:22:09] <Bou> the recursive one, yes. that's what they want to show you
[18:23:10] <fra> at least i can optimize the few things that can be obtimized
[18:23:26] <fra> Bou even the dynamic-recursive one 
[18:24:33] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Ping timeout: 268 seconds)
[18:24:33] *** Joins: Khoyo (~khoyo@user/khoyo)
[18:27:26] <Bou> because you still build the whole matrix
[18:28:15] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[18:31:48] <Zophirel> Mmmh, i think i could at least try to use only one matrix but i need to learn how to "clean" it
[18:33:58] *** Joins: pulse (~pulse@user/pulse)
[18:38:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9d8f:c086:2e21:c52e)
[18:38:16] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9d8f:c086:2e21:c52e) (Changing host)
[18:38:16] *** Joins: skapata (~Skapata@user/skapata)
[18:38:38] *** Joins: lleo (~leo@83.232.58.240)
[18:41:09] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 256 seconds)
[18:41:33] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[18:41:36] <makersmasher> is there an easy way/any tools out there to visualize the call stack ?
[18:45:23] *** Joins: rgrinberg (~textual@200.5.63.76)
[18:45:51] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[18:48:24] *** Joins: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com)
[18:51:22] <Zophirel> gdb a.out -> run -> bt
[18:52:03] <ARoxdale> Debuggers normally list the call stack. Do you mean graphically show the size of each function on it? I don't think I've seen something like that.
[18:52:55] <omegatron> reverse engineers tools often provide such a function .. maybe the capstone ecosystem has a tool for this
[18:53:07] <floatcomplex> you could do some goofy stuff with sigaltstack and walk the linked list of the main call stack to get a backtrace in situ
[18:53:40] <floatcomplex> aiui libbacktrace exists to do this sort of thing
[18:53:47] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 264 seconds)
[18:54:02] *** Joins: vmcs (~vmcs@194.135.154.245)
[18:54:21] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:54:43] <floatcomplex> perf + flamegraphs is a useful way of visualizing program cost that includes the call stack as the y axis
[18:54:48] *** Joins: seninha (~seninha@user/seninha)
[18:54:50] <ARoxdale> You can manually read the value of the stack pointer (esp) inside each function to determine how the stack changes size on each call. Not elegant, but it would give you an idea of size.
[18:55:35] *** Quits: fra (~Zophirel@93-35-145-197.ip55.fastwebnet.it) (Ping timeout: 264 seconds)
[18:55:42] <ARoxdale> More generally, is there a way of modifying the C runtime to do this automatically for functions? As in, run some piece of code before/after calling a function?
[18:56:14] <floatcomplex> nope
[18:56:22] <omegatron> define  "C runtime"
[18:56:28] <floatcomplex> perf really is the way to do this
[18:56:49] <floatcomplex> noninvasively i mean
[18:57:01] <ARoxdale> Whatever is handling functions being called, tieing the bits together, all the assembly stuff I only half/quarter know.
[18:57:30] <floatcomplex> there are other ways to visualize the output of perf besides flamegraphs but flamegraphs are really quite useful
[18:58:07] <floatcomplex> ARoxdale: in a compiled language, there is no machinery that ties functions together. it's all defined by the call ABI, which is just a spec, not a piece of machinery
[18:59:07] <floatcomplex> ARoxdale: so at the call site for a function, the compiler knows to, for example, put the first four arguments that function needs in four specific registers, put any additional arguments on the call stack, put the current program counter in another place, and then jump the program counter to the beginning of the function being called
[18:59:45] <floatcomplex> ARoxdale: on some architectures it might be possible to find that pattern and alter it to insert additional stuff
[18:59:46] <Bou> just printf :^) https://godbolt.org/z/ra3ebnrGY
[18:59:52] <floatcomplex> but it's not something you could count on in general
[19:02:36] <floatcomplex> in a dynamically linked program you can of course replace a specific function being called with a wrapper for that function
[19:03:07] <floatcomplex> assuming...well assuming a lot actually
[19:03:58] <ARoxdale> But is there a way to get the compiler to alter the calling convention, so that code gets run before/after each call? 
[19:04:00] *** Quits: msmhnd^ (~msmhnd@wsip-98-188-242-6.mc.at.cox.net) (Ping timeout: 268 seconds)
[19:04:27] *** Quits: varioust (~varioust@rrcs-76-79-31-136.west.biz.rr.com) (Quit: varioust)
[19:05:43] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:06:46] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:07:38] <Bou> I think you could have the wrapper remove itself from the stack before calling (well, jmp'ing to) the wrapped function
[19:07:49] <omegatron> sure - but you need to program it yourself .. and the program will most likely not work anymore
[19:12:20] <hxztnxt> can i use semaphores and cv distinctively?
[19:13:16] <hxztnxt> im having some amount of consumers reading from a queue, and a producer inserting in that queue
[19:13:27] *** Joins: neutral (~user@user/neutral)
[19:15:41] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:16:46] *** Joins: leo__ (~leo@83.232.58.240)
[19:17:22] *** Joins: Macuser (~Macuser@2607:b400:26:0:9ca7:a8d7:21ee:5b22)
[19:18:09] *** Joins: magla (~gelignite@55d469ae.access.ecotel.net)
[19:20:15] *** Quits: lleo (~leo@83.232.58.240) (Ping timeout: 256 seconds)
[19:23:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:27:26] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Remote host closed the connection)
[19:28:20] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:30:04] *** Joins: arinov (~arinov@178.240.154.245)
[19:31:10] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[19:31:18] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[19:34:11] <ozzz> Hi! Calling signal(2, SIG_DFL); raise(2); before return 0; in int main(void) - is this barbarism?
[19:38:28] *** Joins: superboot (~agentgasm@user/superboot)
[19:38:36] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Ping timeout: 260 seconds)
[19:39:10] *** Quits: khoa (~khoa@user/khoa) (Ping timeout: 268 seconds)
[19:41:25] <twkm> some would feel it is.
[19:41:40] *** Joins: fra (~Zophirel@93-35-145-197.ip55.fastwebnet.it)
[19:42:02] *** Parts: neutral (~user@user/neutral) (ERC (IRC client for Emacs 27.2))
[19:42:36] <APic> twkm > *
[19:43:20] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[19:46:51] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[19:48:14] <floatcomplex> wtf is signal 2
[19:48:21] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:48:37] <floatcomplex> hxztnxt: what is cv
[19:48:56] <ozzz> interrupt
[19:49:10] <floatcomplex> if SIG_DFL is define then why is SIGINT not defined
[19:49:35] <ozzz> you got the idea... :) it doesnt matter
[19:50:23] *** Joins: khoa (~khoa@user/khoa)
[19:50:29] *** Joins: tiotags (~tiotags@user/tiotags)
[19:51:29] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[19:53:45] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[19:53:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:54:28] <fizzie> (Guessing cv -> condition variable. Less sure about the specific question.)
[19:54:37] <APic> Poor interrupt controllers like me
[19:56:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Client Quit)
[19:59:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:00:16] <floatcomplex> if the things being inserted into and removed from the queue are single bytes (which could in turn be indices into a length-256 buffer of slots) then you can just use a unix pipe and read() and write() and it will just work
[20:00:22] <floatcomplex> no mutexes or conds or semaphores necessary
[20:00:53] <floatcomplex> works for M producers, N consumers
[20:01:03] <APic> Pipes ♥
[20:01:07] <floatcomplex> it's probably not as efficient as a more bespoke solution but it will always work
[20:01:28] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: sorry for all the connect/quit spam)
[20:01:53] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[20:02:45] <floatcomplex> for the N producers, 1 consumer problem it can be done entirely lock-free as long as the consumer has something else to do rather than blocking on input
[20:03:47] <floatcomplex> in between those two extremes, i'd probably use a mutex and cond var
[20:03:58] <floatcomplex> even if a semaphore might sometimes be faster
[20:06:36] *** Joins: Akuli (~Akuli@82-203-163-207.bb.dnainternet.fi)
[20:07:08] *** Quits: Macuser (~Macuser@2607:b400:26:0:9ca7:a8d7:21ee:5b22) (Quit: Textual IRC Client: www.textualapp.com)
[20:07:26] <floatcomplex> (because in nontrivial situations you might have multiple cond vars that should logically share a mutex)
[20:12:10] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:13:41] *** Quits: vmcs (~vmcs@194.135.154.245) (Ping timeout: 268 seconds)
[20:18:38] *** Joins: serbest (~serbest@user/serbest)
[20:18:51] *** Quits: PendulumSwinger (~PendulumS@user/pendulumswinger) (Read error: Connection reset by peer)
[20:20:34] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[20:20:47] <stealth_> inside struct `something[]` what does `[]` mean? `[0]`?
[20:21:19] <bookworm> VLA
[20:21:51] <bookworm> C11 version of the compiler extensions people were using
[20:22:29] *** Joins: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net)
[20:22:37] <stealth_> i am trying to wrap with cython, not sure what `[]` is, since its giving me an erro
[20:22:38] *** Joins: johnnyreb (~tth@user/johnnyreb)
[20:22:39] <stealth_> error
[20:22:39] <bookworm> ehw, not VLA sorry
[20:23:33] <floatcomplex> it's a flexible array member (FAM)
[20:23:36] <floatcomplex> if it's at the end of a struct
[20:23:41] <bookworm> right
[20:23:43] <stealth_> https://github.com/axboe/liburing/blob/master/src/include/liburing/io_uring.h#L385
[20:23:46] <floatcomplex> you have to explicitly allocate space for it
[20:24:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ab95:d5d6:558a:3a83) (Ping timeout: 268 seconds)
[20:25:18] <floatcomplex> i thought the whole point of io_uring was to overcomplicate your already-fast code in pursuit of some marginal additional performance by mitigating the cost of syscalls
[20:25:26] <floatcomplex> not sure why you'd be motivated to do that in python
[20:25:51] *** Joins: CaCode (~CaCode@user/cacode)
[20:26:03] <stealth_> not sure how i can define that! since it says `ops_len     # length of ops[] array below`
[20:26:22] <hxztnxt> floatcomplex: "(which could in turn be indices into a length-256 buffer of slots)" can you elaborate?
[20:26:23] <floatcomplex> stealth_: you are using malloc() to allocate one of these structs, right
[20:26:53] <stealth_> floatcomplex, at this point its just defining struct, not really calling it or anything
[20:27:15] <floatcomplex> stealth_: then you don't have anything to worry about yet
[20:27:56] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:28:07] <stealth_> floatcomplex, i get "Variable type 'io_uring_probe_op []' is incomplete" while compiling 
[20:28:20] <floatcomplex> stealth_: show us
[20:28:51] *** topside_ is now known as topside
[20:29:16] <stealth_> https://bpa.st/Z3EQ
[20:29:24] *** Joins: mahmutov_ (~mahmutov@37.155.85.233)
[20:31:31] <floatcomplex> hxztnxt: so you'd have two pipes created with pipe(), and an array of 256 void * pointers. the values written through the pipes would be uint8_t's. one of the pipes would be the normal "forward" one for the producers to write to the consumers, and the other would be a "freelist" pipe for the consumers to write available slot indices back to the producers. you'd preload the "freelist" pipe with all 256 
[20:31:33] <supakeen> Oh, you're asking about it here as well. I don't know Cythin.
[20:31:37] <floatcomplex> possible values. when a producer wants to write, it would first read from the freelist (which would almost always not block), put the pointer for whatever it wants to pass into that slot in the length-256 array of void pointers, and write the index of that slot as a uint8_t into the "forward" pipe
[20:31:42] <floatcomplex> it's brute force but it will always work
[20:32:34] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:37] <floatcomplex> stealth_: idk that's not c
[20:32:55] <floatcomplex> stealth_: figure out how to express that layout of bytes in python i guess
[20:33:32] <supakeen> Oh.
[20:33:34] <supakeen> It's pretty clear why:
[20:33:36] <supakeen> > Cython doesn’t support variable length arrays from C99. Note that Cython uses array access for pointer dereferencing, as *x is not valid Python syntax, whereas x[0] is.
[20:33:37] <stealth_> supakeen, can't ask in #cython there is like < 5 users ther never answer.
[20:33:48] <supakeen> Which means they likely also don't support flexible array members.
[20:33:55] <stealth_> floatcomplex, its closer to C so python ppl don't know about it either
[20:33:57] <supakeen> Listed on their basics page here: https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#types
[20:35:19] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:35:21] <supakeen> So that'd be why :)
[20:37:01] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[20:38:09] <floatcomplex> variable length arrays and flexible array members are very different constructs
[20:38:16] <floatcomplex> flexible array members are just syntactic sugar
[20:38:31] <floatcomplex> you can get at that memory without needing language support for it explicitly
[20:38:43] <stealth_> ya, suppose i can just comment it out.
[20:38:55] <floatcomplex> variable length arrays require that the size of the current stack frame be not knowable until runtime
[20:39:16] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:39:44] <stealth_> like the field `resv2[3]` has np since the variable length is provided
[20:40:27] <supakeen> You can't just comment it out.
[20:40:49] <floatcomplex> well you can, you just need to then access the memory some other way
[20:41:29] <stealth_> what i comment out, i (python) wont be able to access it but C can still access that struct and pass values to it. 
[20:41:52] <stealth_> since the same struct is in .h
[20:41:54] <floatcomplex> you need to find some other way of accessing those values from python
[20:42:04] <floatcomplex> the struct, without the fam, is a certain number of bytes
[20:42:20] <floatcomplex> so you read those bytes, then at the next place in memory, read the values in the fam
[20:42:43] *** Joins: dansan (~daniel@75.81.148.51)
[20:44:20] <supakeen> Fine, you can comment it out if you then make up another way to access them but I might be worried about the size of the structs with padding perhaps differing between both sides.
[20:44:41] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[20:45:35] <floatcomplex> this particular struct appears to have been carefully laid out to prevent that from being an issue
[20:45:38] <floatcomplex> but yes in general
[20:45:41] <stealth_> well if i just pass it as `ops` vs `ops[]` it doesn't raise any error either, also with commenting it out.
[20:45:55] <hxztnxt> floatcomplex: where can i find an example for the 2 pipes idea?
[20:45:57] <stealth_> also its just a probe! its normally used only for debugging
[20:46:01] <floatcomplex> stealth_: ops is wrong
[20:46:17] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: sorry for the floodù)
[20:46:30] <floatcomplex> stealth_: sizeof(the struct with the FAM commented out) == sizeof(the original struct) != sizeof(the struct with one array member instead of an FAM)
[20:46:59] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:47:26] <stealth_> floatcomplex, true
[20:47:45] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[20:49:18] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 260 seconds)
[20:50:28] *** Joins: reset (~reset@user/reset)
[20:52:25] *** Joins: jelle (~jelle@archlinux/developer/jelle)
[20:53:45] <stealth_> floatcomplex, as for why i would want to use io_uring in python, when its working get double the speed, if not more ...
[20:54:24] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 268 seconds)
[20:55:24] *** Joins: Klinda (~superleag@user/klinda)
[20:58:37] *** Joins: sedeki (~textual@user/sedeki)
[20:59:49] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:00:04] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:00:25] <nomagno> If I include a struct whose last member is a flexible array, in another struct whose last member is a different one, what happens?
[21:01:24] <supakeen> It's allowed but 'eh'.
[21:01:34] <supakeen> Err, not valid.
[21:01:35] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Ping timeout: 264 seconds)
[21:01:43] <supakeen> §6.7.2.1.3
[21:02:08] <sedeki> supakeen how did you look that up so fast?
[21:02:45] <supakeen> ctrl+f flexible array member in the PDF then scroll up to the start of it ;)
[21:02:55] <hxztnxt> floatcomplex: where can i find an example for the 2 pipes idea?
[21:03:30] <sedeki> supakeen wow ;)
[21:03:51] <sedeki> anyway, i always forget the formal terms
[21:04:41] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[21:05:03] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: vacations.)
[21:05:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:05:10] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[21:05:23] *** Quits: fra (~Zophirel@93-35-145-197.ip55.fastwebnet.it) (Quit: WeeChat 3.0)
[21:05:36] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[21:06:43] *** Quits: arinov (~arinov@178.240.154.245) (Ping timeout: 268 seconds)
[21:07:46] <nomagno> supakeen: I am looking in C99, and I'm pretty sure it is not mentioned
[21:08:10] <nomagno> (I should really start specifying which standard I mean in my questions)
[21:09:02] *** Quits: leo__ (~leo@83.232.58.240) (Quit: Leaving)
[21:10:26] <APic> ,o0(Be careful. candide can read thoughts.)
[21:10:41] <candide> A​Pic, It would seem so.
[21:11:25] <nomagno> ,o0(What)
[21:12:29] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[21:14:52] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[21:17:59] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:22:03] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[21:22:03] *** Quits: eXeC65 (~eXeC64@80.1.220.46) (Quit: There goes my bouncer)
[21:22:46] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[21:23:14] *** Joins: eXeC64 (~eXeC64@80.1.220.46)
[21:24:25] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:25:23] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[21:27:47] <APic> ,o0(CAPTAIN: WHAT YOU SAY !!)
[21:30:16] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:30] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:30:31] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[21:30:49] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[21:31:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:31:21] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:19ce:57cd:27d4:595b) (Quit: simon323)
[21:31:58] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[21:33:00] *** Quits: mahmutov_ (~mahmutov@37.155.85.233) (Read error: Connection reset by peer)
[21:34:31] *** Joins: mahmutov (~mahmutov@37.155.85.233)
[21:34:50] *** Joins: nyah (~nyah@176.249.120.61)
[21:36:19] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 268 seconds)
[21:36:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:36:43] *** Joins: raj (uid72176@user/raj)
[21:36:44] *** Joins: MrFantastik (~f@c-24-6-209-143.hsd1.ca.comcast.net)
[21:37:17] *** Joins: arinov (~arinov@213.194.126.155)
[21:38:06] <Pentode> make your time
[21:40:47] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Ping timeout: 256 seconds)
[21:42:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:42:11] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 245 seconds)
[21:42:34] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[21:43:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:43:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:44:00] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[21:45:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:45:47] *** Joins: esselfe (~steph@user/esselfe)
[21:47:58] <MrFantastik> make time
[21:49:26] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[21:50:31] *** Quits: LuKaRo (~LuKaRo@p5deda91b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:50:37] *** Joins: CaCode_ (~CaCode@user/cacode)
[21:50:38] <stealth_> if you have time https://github.com/axboe/liburing/issues/475 https://github.com/axboe/liburing/blob/master/src/syscall.h any idea how to bypass it? wasting time waiting for reply
[21:50:39] <candide> Title of stealth_'s link: nolibc error? · Issue #475 · axboe/liburing · GitHub
[21:53:11] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[21:53:22] *** Joins: LuKaRo (~LuKaRo@p4fc32456.dip0.t-ipconnect.de)
[21:57:24] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Read error: Connection reset by peer)
[21:57:46] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[22:01:00] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b) (Ping timeout: 268 seconds)
[22:01:48] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[22:03:05] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:05:54] *** Quits: nyah (~nyah@176.249.120.61) (Ping timeout: 260 seconds)
[22:08:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:09:26] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:09:26] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:09:53] *** Quits: alch (~alch@ca-18-196-143.service.infuturo.it) (Read error: Connection reset by peer)
[22:12:35] *** Joins: CaCode- (~CaCode@user/cacode)
[22:14:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b)
[22:14:42] *** Joins: alch (~alch@151.82.135.217)
[22:15:11] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[22:15:31] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:15:58] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:17:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:18:10] *** Joins: nyah (~nyah@94.6.71.219)
[22:20:56] *** Joins: smlavine (smlavine@sourcehut/user/smlavine)
[22:20:58] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:26:16] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[22:27:00] *** Joins: seninha (~seninha@user/seninha)
[22:27:37] *** Joins: Wulf (~Wulf@user/wulf)
[22:28:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[22:28:51] *** Quits: Matt|home (~matt@adsl-74-233-58-50.mia.bellsouth.net) (Ping timeout: 245 seconds)
[22:31:54] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[22:31:57] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:35:06] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[22:35:06] *** Quits: decartes_ (sid240036@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[22:35:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[22:35:35] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[22:36:02] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[22:36:14] *** Joins: tech_exorcist_ (~tech_exor@user/tech-exorcist/x-0447479)
[22:36:29] *** Quits: tech_exorcist_ (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[22:36:45] *** Joins: cousteau (~cousteau@user/cousteau)
[22:37:14] *** Joins: strajder (~strajder@user/strajder)
[22:37:33] <floatcomplex> hxztnxt: https://godbolt.org/z/qsah7PMMG
[22:38:29] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[22:42:38] *** Joins: Matt|home (~matt@adsl-74-233-58-207.mia.bellsouth.net)
[22:42:49] *** Joins: Inline (~Inline@2a02:908:1252:7a80:8056:a659:b191:c249)
[22:43:45] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[22:46:08] <floatcomplex> note it is still possible to fuck up and deadlock with this, as with any other synchronization primitive, if you cast off from structured concurrency and get in a fight with a whale
[22:48:29] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[22:48:29] *** Quits: pucara (~i@host194.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[22:49:15] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[22:50:47] *** Joins: xcm (~xcm@user/xcm)
[22:51:09] *** Joins: serbest (~serbest@user/serbest)
[22:51:16] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[22:51:30] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[22:52:14] *** Quits: _slate_ (~slate@159.69.26.92) (Ping timeout: 265 seconds)
[22:52:21] *** Joins: flynn0 (~mcbloch@user/flynn)
[22:53:02] *** Joins: _slate_ (~slate@2a01:4f8:c0c:f0a9::1)
[22:53:23] *** Joins: thing (~thing@user/thing)
[22:53:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 268 seconds)
[22:53:26] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 245 seconds)
[22:53:26] *** flynn0 is now known as flynn
[22:53:33] *** Quits: serbest (~serbest@user/serbest) (Client Quit)
[22:53:33] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:53:40] *** Quits: xcm_ (~xcm@user/xcm) (Ping timeout: 260 seconds)
[22:53:58] *** Quits: sdk_ (~x@shell.codevoid.de) (Ping timeout: 260 seconds)
[22:54:09] *** Joins: sdk_- (~x@shell.codevoid.de)
[22:54:55] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[22:57:02] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[22:57:21] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[22:59:18] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:59:33] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[23:00:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[23:01:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:05:33] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[23:05:38] *** Quits: LuKaRo (~LuKaRo@p4fc32456.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[23:05:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e118-d184-1f68-13bf.res6.spectrum.com)
[23:06:21] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[23:09:50] *** Quits: smlavine (smlavine@sourcehut/user/smlavine) (Ping timeout: 260 seconds)
[23:11:24] *** Joins: LuKaRo (~LuKaRo@p4fc32052.dip0.t-ipconnect.de)
[23:13:08] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 268 seconds)
[23:14:13] *** Quits: pizdets (~pizdets@183.182.115.116) (Ping timeout: 250 seconds)
[23:15:04] *** Joins: pizdets (~pizdets@183.182.111.233)
[23:17:45] *** Joins: Macuser (~Macuser@216.30.159.201)
[23:19:19] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[23:20:36] *** Joins: msmhnd^ (~msmhnd@h50.174.139.63.static.ip.windstream.net)
[23:26:49] *** Joins: dohtem (uid524096@user/dohtem)
[23:28:31] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Read error: Connection reset by peer)
[23:28:42] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[23:33:10] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[23:33:26] *** Joins: shadowchaser4 (~Shadowcha@liox.eu)
[23:33:47] *** Joins: random-nick (~random-ni@87.116.176.55)
[23:33:55] *** Joins: flynn (~mcbloch@user/flynn)
[23:35:33] *** Quits: shadowchaser (~Shadowcha@liox.eu) (Read error: Connection reset by peer)
[23:35:58] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[23:36:23] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[23:37:48] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[23:40:16] *** Joins: Khoyo (~khoyo@user/khoyo)
[23:42:56] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:45:55] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[23:48:24] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[23:50:46] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[23:55:59] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:58:49] *** Joins: Telvana (~capo@user/telvana)
[23:59:05] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:21d8:f508:23f8:99f8) (Read error: Connection reset by peer)
[23:59:42] *** Joins: freakazoid343 (~matt@35.136.210.185)
[23:59:52] *** Joins: Alhazred (~Alhazred@130.245.70.25)
