[00:02:09] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[00:07:32] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[00:16:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[00:16:36] <selwyn> qhong: i would hate that
[00:17:28] <selwyn> imagine reading source code lol
[00:17:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:18:13] <selwyn> 'clhs L573'
[00:18:27] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:18:58] *** Joins: Oddity (~Oddity@user/oddity)
[00:27:28] <shka> selwyn: consult the book of hyperspec, line 573
[00:27:56] <qhong> selwyn: same sentiment here lol, I think natural language presentation of code/symbols matters at least to certein degree
[00:28:03] <selwyn> like a bible verse
[00:28:10] <shka> yes, exactly 
[00:28:13] <selwyn> hyperspec 5:73
[00:29:13] <qhong> Or L18447 5:73 because hyperspec is also a symbol
[00:32:23] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[00:33:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[00:34:01] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Remote host closed the connection)
[00:34:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:36:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:36:33] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[00:41:35] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[00:42:52] <sm2n> https://www.rfc-editor.org/rfc/rfc9225.txt
[00:42:56] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:43:26] <sm2n> Anyone seen any funny april fools jokes?
[00:45:33] <pl> Belgorod People's Republic
[00:49:21] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[00:55:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[00:58:07] <rotateq> sm2n: was just playing around with the april compiler today again :) now 100% discount this month! :D
[00:58:41] <rotateq> no but on pi day i really got mails from Wolfram Research for "discounts on Mathematica are back"
[00:59:00] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[00:59:44] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[01:05:05] <sm2n> haha
[01:07:14] <rotateq> sm2n: and if you're also nice like him phantomics likes to help people with things :)
[01:20:50] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:27:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:27:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:27:48] <shka> https://www.youtube.com/watch?v=fWqqHYH5XuA this one made me giggle 
[01:27:49] -ixelp- Telegraph keyboard review (direct contact switches) - YouTube
[01:28:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:29:05] <shka> this one is better https://www.youtube.com/watch?v=J_y5viBu47c
[01:29:06] -ixelp- Top 10 tanks!!! - YouTube
[01:37:53] <shka> https://www.telegraph.co.uk/world-news/2022/04/01/russian-soldier-dies-radiation-poisoning-chernobyl/
[01:37:53] -ixelp- Russian soldier dies from radiation poisoning in Chernobyl
[01:38:01] <shka> this is weird
[01:38:33] <shka> they should be fine, as long as they don't eat/drink contaminated stuff
[01:42:14] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Remote host closed the connection)
[01:46:33] <pjb> shka: it seems they didn't know where they were and anything about contaminated areas.
[01:53:10] <selwyn> perhaps the story is bullshit
[01:53:34] <selwyn> the telegraph doesn't automatically become reputable when it talks about ukraine
[01:53:45] <shka> yeah, it sounds bullshit
[01:54:03] <shka> but soldiers were stationed near the reactor
[01:54:05] <shka> so who knows
[02:03:02] <pl> shka: well, it's more that the soldiers played around in radioactive dust, some apparently stole gamma ray sources from laboratory, and generally they did all the stuff stalkers know not to do unless they plan for consequences
[02:03:34] <shka> gamma radiation is not that scary
[02:04:11] <shka> it looks more like someone ate something with alpha/beta emitters in it
[02:04:26] <shka> accidental radiotherapy 
[02:05:34] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[02:05:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:07:21] <pl> shka: alpha emitting dust is everywhere those idiots were in
[02:07:25] <pl> and they disturbed a lot of it
[02:07:42] <pl> supposedly even slept in trenches made in red forest
[02:07:52] <shka> ... i don't know if you know
[02:08:05] <shka> but you can literally smell alpha particles in the air
[02:08:28] <shka> so, yeah, weird
[02:08:29] <pl> dunno about smell, but if you taste iron, it's generally a very good idea to RUN THE FUCK AWAY
[02:09:10] <shka> alpha particles ionize air, so it gives that ozone smell
[02:09:10] <pl> Need to load up Stalker series on my laptop soon
[02:10:31] <shka> pl: well, no need to panic, just make sure that you don't inhale this stuff and cover yourself 
[02:10:52] <shka> (radiation safety seems to be more important currently)
[02:11:24] <pl> shka: I know the general rules for visitors in the zone, yeah
[02:11:32] <pl> It was on my list of places to visit one day
[02:11:46] * shka googles nuclear weapon survival tutorials
[02:12:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:14:03] <selwyn> > It is unlikely that the Russian soldiers, mainly conscripts from the poorer fringes of Russia, would have known about the dark history of the abandoned power plant that they had been ordered to capture. 
[02:14:05] <selwyn> ?
[02:14:09] <selwyn> it is chernobyl
[02:14:39] <shka> selwyn: don't ask me, it is weird
[02:14:47] <selwyn> yeah, calling bullshit on this
[02:14:55] <shka> and again, not that difficult to operate safely in the area if you know what to do
[02:15:15] <selwyn> and the russian soldiers are not 'mainly conscripts' so the quoted sentence is wrong
[02:15:49] <shka> they are
[02:16:02] <shka> effectively 
[02:16:22] <shka> russian contract soldiers are not professional soldiers like you have in the UK
[02:16:41] <shka> they are just conscripts that decided to stay in the army for extra 2 years
[02:17:57] <selwyn> uh
[02:18:04] <selwyn> for payment, surely
[02:18:07] <shka> yup
[02:18:43] <shka> Russia contemplated going full professional, but it would shrink they military to 20% of it's current size
[02:19:08] <shka> goodnight all
[02:20:08] <selwyn> goodnight
[02:21:00] <hayley> Hm, someone is calling TRIVIAL-GRAY-STREAMS:STREAM-READ-SEQUENCE in a loop and it always unwinds.
[02:22:39] *** Joins: lisp123 (~lisp123@143.238.171.43)
[02:23:15] <rotateq> i will now unwind too with (unwind-protect (sleep (* 8 3600)) (come-back))
[02:23:58] <lisp123> nights
[02:24:19] <rotateq> to you too later
[02:24:41] <lisp123> just woke up :)
[02:24:42] <rotateq> or hm no, must be now morning in downunder
[02:24:47] <lisp123> yup
[02:25:58] <rotateq> eat sleep lisp repeat
[02:26:44] <pl> selwyn: it's been mostly conscripts born in 2002-2003 dying
[02:26:51] <pl> and yes, a lot of them from very poor regions
[02:27:01] <pl> poor enough that asphalt in village is astounding
[02:28:47] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[02:31:01] <hayley> Seemed to be CL+SSL getting NIL rather than a SYSTEM-AREA-POINTER.
[02:31:36] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[02:33:58] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[02:53:23] <kakuhen> lol apparently im getting a free G5 via my same friend who gave away an FPGA
[02:53:33] <kakuhen> one of the dual core 2003 models
[02:53:42] <kakuhen> dual cpu i mean
[02:58:04] <pl> ahh, back when Mac hw was cool
[02:58:59] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[03:01:41] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:10:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[03:15:27] *** Joins: lisp123 (~lisp123@143.238.171.43)
[03:26:29] <hayley> https://github.com/fukamachi/websocket-driver/blob/master/src/ws/base.lisp#L209-L213
[03:26:29] -ixelp- websocket-driver/base.lisp at master · fukamachi/websocket-driver · GitHub
[03:26:35] <hayley> Here we have the infinite loop I found.
[03:26:45] <hayley> Thankyou fukamachi very cool
[03:27:22] <sm2n> you're doing something with websockets?
[03:27:39] <sm2n> I've been considering writing a websockets thing because a friend of mine is
[03:28:22] <hayley> Yes, letting Bakerposting use the Discord API.
[03:28:23] -Bakerposting- Since Puzzle utilizes Fortran-like indexing (fastest-varying-first), we first build the patterns along the i dimension, then the j dimension, and finally the k dimension. (Speeding up the 'Puzzle' Benchmark a 'Bit' <https://plover.com/~mjd/misc/hbaker-archive/PuzzleB.html>)
[03:28:55] <kakuhen> tfw i check out one of the kansai lisp slides and theres a fucking 3-slide-long ad
[03:29:15] <sm2n> kansai lisp?
[03:29:20] <hayley> I guess I need to think of a replacement strategy that's better than (go retry). Exponential backoff + bail out after too many tries?  
[03:29:49] <sm2n> sounds reasonable
[03:31:55] <kakuhen> well slides given at some lisp thing in kansai region i guess
[03:31:57] <kakuhen> i just find the ad funny
[03:32:07] <kakuhen> reminds me of the defining feature of japanese television
[03:32:32] <kakuhen> 「この番組は、ご覧のスポンサーの提供でお送りしています。」
[03:33:05] <kakuhen> every show almost certainly has this phrase right before CMs
[03:33:40] <hayley> If it's really supposed to handle timeouts though, I guess I don't need the backoff though. Just give up after 10 tries or something.
[03:50:38] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[03:57:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[03:59:08] *** Joins: aeth (~aeth@user/aeth)
[04:03:18] <hayley> https://www.youtube.com/watch?v=aELiGg4SQXU "Ah, it mentions thread local heaps - dammit, these are thread local allocation buffers" 
[04:03:18] -ixelp- Coffee Compiler Club, 2022_04_01 - YouTube
[04:14:14] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[04:25:48] * hayley uploaded an image: (18KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/jpDrilrbHgleTWowWiydLMoe/self-pixels.png >
[04:26:04] <hayley> Can we get this at around (730,625) on r/place?
[04:35:26] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[04:35:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:04:09] <mfiano> Is there a "subclass of" predicate, or does that require the MOP? I'm currently doing (and (subtypep foo 'bar) (not (eq foo 'bar)))
[05:04:49] <hayley> I think that's the nicest way to do it.
[05:04:59] <mfiano> Thought so. Thanks.
[05:36:33] <kakuhen> why do you want not equal?
[05:36:45] <kakuhen> I would consider a class X to be a subclass of itself
[05:37:17] <kakuhen> im assuming doing this makes programming stuff more difficult hence the usage of not eq
[05:42:12] <hayley> gilberth: On the topic of flags and emulation, I managed to mess up a lot because I didn't know which instructions preserved flags or not in LC3-in-LC3. And the VM we were given for university assignments didn't update flags for some instructions that should.
[05:43:12] <hayley> The initial state of the flags register was not defined, either, so you could write an "unconditional jump" like BR<all flags> but then the university VM had all lights off for the flag register at first. So L: BR<all flags> L did not infinitely loop.
[05:47:33] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:58:56] <kakuhen> I found a hot take that may frustrate you hayley
[05:59:04] <kakuhen> >General GC is really overrated I think. Automatic retain counting is nicer because it's deterministic and you never have to scan memory. Compaction can be nice but you can live without it.
[06:00:02] <kakuhen> gc bad, but refcounting good, because shitty thread unsafe apple implementation that used to make you count yourself is automatic now :)
[06:00:10] * hayley uploaded an image: (400KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ydeKovDqkppkIsSGbWogKqpJ/gun-baker.png >
[06:01:20] <hayley> 1. RC ain't deterministic 2. Copying/generational GCs avoid scanning the heap, but RC is not complete so a comparison is moot 3. Compaction is the difference between running out of memory and not over time
[06:01:38] <hayley> w.r.t 3. compaction improves locality too
[06:02:30] <hayley> Hard real time tracing (e.g. Metronome) is also more common than hard real time RC, too.
[06:04:40] * hayley points to https://shipilev.net/jvm/anatomy-quarks/11-moving-gc-locality/
[06:11:33] <hayley> Or the abstract for https://dl.acm.org/doi/abs/10.1145/3385412.3385977 claims between 5 and 45% speedups for being very careful about copying order. And IIRC the Immix paper claimed something like a 10% gap in mutator performance between mark-sweep and copying.
[06:13:30] <hayley> "Reorganise objects in mutator’s accessing order: With the help of concurrent relocation, mutators can participate in moving of objects, directly affecting the order in which objects are laid out, which is prefetching friendly" I hear the TI Lisp Machine did the same thing decades ago. Funny that.
[06:20:28] *** Joins: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[06:21:37] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[06:22:53] *** Joins: mala (~mala@user/malaclyps)
[06:22:59] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:24:52] <kakuhen> now that im at home i can figure wtf is an fpga and how to make this board do something
[06:27:06] <semz> memory fragmentation is not a problem if your process segfaults often enough
[06:27:25] <hayley> ( ͡° ͜ʖ ͡°)
[06:29:29] <drakonis> i wonder what happened to conrad barski
[06:29:34] *** Joins: lisp123 (~lisp123@143.238.171.43)
[06:29:39] <drakonis> why did he leave the lisp community?
[06:30:49] <hayley> he posted cringe <https://i.redd.it/4vd5p0fusvg81.png>
[06:32:03] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[06:32:11] <drakonis> i mean
[06:32:21] <drakonis> i've seen that he's been playing with zig recently
[06:32:37] <drakonis> https://www.youtube.com/watch?v=2SFNbiurWhc
[06:32:37] -ixelp- GoodGuesser: Sprinkle a little machine learning magic over your regular code! - YouTube
[06:32:48] <drakonis> he's playing with clojure now...
[06:33:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:34:10] <lisp123> clojure sucks compared to CL
[06:34:24] <lisp123> cant understand why anyone would see differently
[06:35:00] <kakuhen> clojure is a nice language actually
[06:35:10] <kakuhen> its debugging sucks compared to CL, I'll agree with that
[06:35:37] <kakuhen> but when I use CL, i think it's really stupid that e.g. I can only call FIRST and REST on lists and  not sequences
[06:36:00] <kakuhen> I dont know what rationale is behind this, but one nice thing about Clojure is that you can use the same functions across sequences and you can treat hash maps like actual functions
[06:36:14] <drakonis> these things are why cl needs a revision
[06:36:16] <lisp123> kakuhen: you could write your own FIRST and REST though
[06:36:19] <drakonis> clean up the inconsistencies
[06:36:21] <Alfr> kakuhen, what should rest of a vector give you?
[06:36:25] <drakonis> lisp123: that doesnt really improve it
[06:36:26] <Alfr> kakuhen, a displaced one?
[06:36:26] <hayley> REST on a vector is O(n) so you're doing something wrong if you want REST on a vector.
[06:36:56] <hayley> And structure sharing happens too, sure. Do you displace or copy? In Clojure you don't care, since sequences are immutable.
[06:36:58] <kakuhen> Alfr: the subvector starting at index 1 (assuming indexing starts at 0)
[06:37:25] <hayley> As far as I can tell, it's only good if you don't care for time complexity.
[06:38:03] <Alfr> kakuhen, I understand that. But what kind of thing do you want for (REST SOME-VECTOR)?
[06:38:10] <kakuhen> lisp123: sure, alexandria probably already has something like that already, still annoying that I have to either do this myself or pull in a huge library just for that
[06:38:41] <kakuhen> Alfr: i want to be able to use the same basic operations on sequences
[06:38:42] <lisp123> kakuhen: Fair enough
[06:39:40] <Alfr> kakuhen, that doesn't in any way answer my question.
[06:39:58] <kakuhen> Alfr: then what is your question?
[06:40:06] <kakuhen> i already told you what i expect (rest some-vector) to be
[06:40:58] <kakuhen> i
[06:41:03] <Alfr> kakuhen, what is a subvector for you?
[06:41:05] <lisp123> I usually use REST in recursive code, list <--> recursion, arrays <--> iteration 
[06:41:09] <kakuhen> i'm not sure why REST needs special justification for a vector but not a list
[06:41:58] <kakuhen> Alfr: any contiguous part of a vector
[06:42:39] <kakuhen> so for instance if I have a vector #(1 1 2 3 5 ...) then I consider #(1 2 3 5 ...) to be a "subvector"
[06:43:49] <lisp123> as a new copy or part of the original?
[06:45:36] <Alfr> kakuhen, (make-array (list (1- (length vector))) :displaced-to vector :displaced-index-offset 1)
[06:45:55] <kakuhen> hmm now that i think about it, i'd actually rather have a more general definition of "subcollection"
[06:46:17] <kakuhen> i.e. given two collections A,B, we define A is subcollection of B if there exists an embedding A->B, where embedding is defined the usual sense
[06:46:59] <kakuhen> but i guess this would be too hard to implement with computers
[06:48:21] <kakuhen> so i think i'd ultimately want (rest some-vector) to actually give me a new copy, lisp123
[06:48:37] <lisp123> kakuhen: thats expensive ;)
[06:48:40] <kakuhen> that way i can compose several functions, pass in (rest some-vector) and i know i'm not modifying some-vector
[06:48:54] <lisp123> CL is a poor language, we can't afford fancy new machines
[06:49:26] <kakuhen> i cant even expect SBCL to run on a microcontroller with 64 mb of ram, so im not sure how "poor language" CL is nowadays hehe
[06:49:41] <kakuhen> but yes, that will be very expensive memory-wise
[06:49:54] <Alfr> kakuhen, what's your usual sense for embeddings of collections?
[06:50:57] <kakuhen> in the most general sense: existence of a monomorphism
[06:51:11] <kakuhen> so if our collections are actually sets, then we would want injective functions, etc.
[06:51:30] <kakuhen> this would be useful to me but i also dont think it'd be easy to implement at all
[06:51:48] <Alfr> kakuhen, so, (a .. z) is a subcollection of (1 ..) ?
[06:52:04] <kakuhen> up to isomorphism, yes
[06:53:09] <kakuhen> this definition is nice to be because then i'd be able to talk about subsequences and so on, while representing them with vectors or a list
[06:53:11] <kakuhen> nice to me*
[06:53:20] <Alfr> kakuhen, okay. But I suspect some people will not like that very much.
[06:53:45] <kakuhen> so for instance, if i were crazy enough to make my own lisp, i'd ideally want list and vector to be instances of some generic "sequence" or "collection" object
[06:53:58] <kakuhen> and then functions like FIRST and REST operate on "sequence" or "collection"
[06:54:39] <kakuhen> and I would want to be able to get as general of a definition of "subsequence" or "subcollection" as I can
[06:54:51] <lisp123> honestly its not the worst idea
[06:55:07] <lisp123> it is annoying working across lists and arrays at times when refactoring
[06:55:27] <Alfr> kakuhen, unlikely that you can implement that.
[06:55:30] <kakuhen> in any case, i like the way clojure implements various data structures like these
[06:55:37] <kakuhen> because it seems to be very close to what i want
[06:56:46] <kakuhen> but yeah, there's countless things that annoy me in common lisp, but i can't switch to other languages because they either have inferior interactivity or inferior debugging (or both!)
[06:56:57] <kakuhen> and in those moments, i realize i dont like computers a lot.
[06:57:29] <kakuhen> for instance, i really like clojure, but it can never replace common lisp for me because debugging is just terrible
[06:58:11] <lisp123> I still stay implement the best idioms of clojure (apart from [] {}) in CL
[06:58:33] <lisp123> unless you are venturing too much into lisp-1 territory, then it will become too much work
[06:59:08] <kakuhen> the other thing i like a lot from clojure is being able to treat hash maps as actual functions
[06:59:37] <lisp123> example for the uninitiated?
[06:59:41] <kakuhen> e.g. ({:x 1 :y 2} y) ;=> 2
[07:00:00] <kakuhen> the notation {:x 1 :y 2} means I have a hash map with keys x,y and values 1,2 respectively
[07:00:35] <kakuhen> sorry, I mean :y at the end
[07:00:54] <kakuhen> you can also write (:y {:x 1 :y 2}), this returns 2 as well
[07:01:02] <kakuhen> but i prefer the former
[07:01:18] <lisp123> whats the benefit?
[07:02:39] <kakuhen> it's concise and let's you work with records as if they were structs
[07:03:02] * kakuhen uploaded an image: (217KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/gMBMRJLomeHSjeFnRQKmKcoT/image.png >
[07:03:08] <kakuhen> here's some example code i have for an abandoned project
[07:03:18] <kakuhen> lines 13-22, that's where i use it
[07:03:39] <lisp123> got it
[07:03:56] <lisp123> so instead of (gethash suit tile), just do (:suit tile)
[07:04:01] <lisp123> nifty
[07:04:02] <kakuhen> yeah
[07:04:04] <kakuhen> anyway, I know you can do the same with get-hash, but I like being able to think of hash maps as actual functions
[07:04:19] <kakuhen> more specifically, functions between finite sets
[07:04:46] <lisp123> its nice
[07:06:58] <kakuhen> yeah, i really like clojure; maybe it's worse than CL, but it's still very convenient language
[07:07:37] <kakuhen> when I use clojure, I miss CLOS and condition system; when i use common lisp, i miss a lot of syntactical sugar in clojure and the "genericness" of functions like first/rest/etc
[07:08:05] <lisp123> +1 that's a pretty good summary
[07:10:54] <Alfr> kakuhen, make your own package shadowing first/rest/etc. with versions you like? As for syntactic sugar, poke the reader a bit. Though I'm not sure how to make hash-tables funcallable across implementations.
[07:12:40] <lisp123> It may be good syntactic sugar but goes against the philosophy that the CAR of every list should be a function / special form or macro
[07:13:11] <kakuhen> Alfr: yes, I've considered a reader macro to mimic the clojure way of handling hash maps, but it seemed too complicated to implement for me 
[07:13:43] <kakuhen> i actually very rarely use or write macros since i dont understand the meanings of backtick etc. all that well
[07:14:01] <kakuhen> I'm very slowly starting to understand it after failing at countless attempts to make my own macros
[07:14:16] <lisp123> ` is same as ' but allows you to turn evaluation back on inside with , or ,@ (list splicer)
[07:14:32] <kakuhen> sure, but what happens when you nest `
[07:14:43] <lisp123> innermost ` pair with ,
[07:14:56] <gilberth> kakuhen: Nobody gets nesting backquotes.
[07:16:46] <Alfr> kakuhen, for the hash-map part, you'll have the problem that CL doesn't look for a value of the first argument but a function binding.
[07:17:53] <kakuhen> i se
[07:17:54] <kakuhen> see*
[07:18:07] <kakuhen> this is why I firmly believe "there are no S-tier languages"
[07:18:14] <kakuhen> though common lisp is definitely the closest to one in my mind...
[07:19:20] <gilberth> kakuhen: It's trial an error for me. But in `(idenity `(bar ,(+ 1 2) ,',(+ 3 4))), the (+ 3 4) is evaluated right away, while (+ 1 2) is evaluated by what you get.
[07:19:29] <Alfr> kakuhen, but if you get the hash object to appear there, you could using some mop magic, make a funcallable wrapper for hash-table doing the "right thing".
[07:20:35] <hayley> gilberth: I call ,', the middle-finger operator, cause that's how I feel when I have to think about double backquotes.
[07:20:36] <gilberth> That is , pairs with the innermost `. To get one level up say ,' (that's single quote). And yes, it's nasty.
[07:26:02] <gilberth> Anyhow, what I never quite got is, why backquote must be implemented in the reader.
[07:27:28] <gilberth> Also I really don't get why SBCL believes sticking structure objects into Lisp code is a good idea. It really breaks any attempt at code walking as you don't expect that structure objects would contain forms.
[07:29:41] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:29:49] * hayley notes that only 15 people are attending the startup thing, and she is one.
[07:34:24] *** Joins: jeosol (~jeosol@user/jeosol)
[07:36:37] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Remote host closed the connection)
[07:36:53] * hayley hotpatches websocket-driver and restarts websocket threads, hoping it'll behave now.
[07:37:13] <hayley> "double free or corruption (fasttop)" wot
[07:38:06] <kakuhen> I love FFI code
[07:38:27] <hayley> I love CL+SSL, because it does (declaim (optimize (debug 0))). Lambda lists are for suckers.
[07:38:46] <kakuhen> is there a pure lisp implementation of TLS 
[07:39:07] <hayley> https://github.com/mateuszb/tls1.3
[07:39:08] -ixelp- GitHub - mateuszb/tls1.3: A Common Lisp implementation of TLS1.3
[07:39:13] <kakuhen> impressive
[07:39:15] <hayley> https://github.com/shrdlu68/cl-tls
[07:39:15] -ixelp- GitHub - shrdlu68/cl-tls: An implementation of TLS and related specifications in Common Lisp
[07:39:37] <kakuhen> the tls1.3 one was last updated on my 19th birthday...
[07:40:04] <kakuhen> are either of the two still being developed?
[07:40:16] <kakuhen> at one point I fancied the idea of a pure CL implementation of TLS but figured itd be too much work
[07:40:16] * hayley is younger than kakuhen
[07:40:28] <hayley> I have no idea. But if it works...
[07:40:37] <kakuhen> re: age; yes, I am 21 years old
[07:41:37] <kakuhen> oh looks like the TLS one still needs some fancy FFI code
[07:42:40] <kakuhen> https://github.com/mateuszb/tls1.3/blob/master/tls-1.3.asd#L7=
[07:42:40] -ixelp- tls1.3/tls-1.3.asd at master · mateuszb/tls1.3 · GitHub
[07:42:46] <kakuhen> i cant find this in quicklisp or even ultralisp...
[07:42:57] * hayley updated Quicklisp dist, waits for the poor Pi 4 to recompile everything
[07:43:14] <kakuhen> lol i made ECL on my iPhone compile slynk before... it took like 5 entire minutes
[07:43:48] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[07:43:51] <hayley> Food for thought, couldn't we fake having parallel compilation at a function level by having LAMBDA be compiled on a new thread, and the only code generated immediately is a stub that waits for the compiler to finish?
[07:44:25] <kakuhen> ok this is cursed
[07:44:30] <kakuhen> the tls1.3 guy uh
[07:44:40] <kakuhen> he manually wraps kqueue calls etc with cffi
[07:44:52] * kakuhen uploaded an image: (68KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/dRNlARiNJaIHzBAOeRzLZruU/image.png >
[07:44:53] <hayley> Oh no
[07:44:58] <kakuhen> i dont like this...
[07:45:06] <hayley> Better just use cl-tls then.
[07:45:09] <kakuhen> i mean, i suppose it's just impossible to avoid FFI at all if you do networking
[07:45:58] <kakuhen> also how do i remove ultralisp from my system
[07:46:04] <kakuhen> it seems that ultralisp package "shadow" the quicklisp ones
[07:46:07] <kakuhen> and i dont really like that
[07:46:18] <hayley> (ql:uninstall-dist "ultralisp") or smth?
[07:46:42] <kakuhen> i'll try that, ty
[07:46:47] <hayley> pony
[07:46:47] <Bakerposting> OMG!! Ponies!!!
[07:48:00] *** Joins: semz_ (~semz@user/semz)
[07:50:31] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:11:32] <lisp123> kakuhen: best thing is to use a nginx reverse proxy
[08:13:40] <hayley> https://www.youtube.com/watch?v=bBUijSfA300
[08:13:41] -ixelp- what we do in the shadows without context - YouTube
[08:32:42] <hayley> https://www.youtube.com/watch?v=EhuNRWskgNQ
[08:32:42] -ixelp- [1435] How To Fill My Wife’s Beaver - YouTube
[08:43:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:48:17] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[09:12:59] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[09:43:16] * hayley uploaded an image: (113KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/IWWYRBxAjwOAZOfnwQkGVVOm/parastatal-problem2.jpeg >
[09:47:00] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Remote host closed the connection)
[10:07:41] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[10:23:55] * hayley reads someone say that ADD R1, R2 is three-address code
[10:24:46] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[10:24:55] <rotateq> and my sleep is approximately over
[10:46:45] <hayley> "The example still applies, just with another "slot" / "address"."
[10:46:52] <hayley> "If you change the defining part of something, you just have to change it back for it to be correct."
[11:10:24] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:12:37] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[11:12:50] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:13:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[11:14:07] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:18:16] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:20:11] *** Quits: Madsy (~madsy@223.239.164.82.customer.cdi.no) (Ping timeout: 256 seconds)
[11:23:04] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[11:42:46] *** Joins: lisp123 (~lisp123@143.238.171.43)
[12:31:13] <hayley> https://twitter.com/drpeterrohde/status/1502767249140359168
[12:32:45] <kakuhen> for some reason I can't find the #mezzano channel on libera chat
[12:37:04] <selwyn> kakuhen: if you change the order of distribution installation ultralisp won't have priority over quicklisp
[12:48:41] <edgar-rft> kakuhen: #mezzano exists on Libera.Chat - what happens if you try to /join #mezzano ?
[12:48:57] <kakuhen> hmm for some reason my matrix server wont show it
[12:50:19] <kakuhen> ok cool i just had to send the "!join #mezzano" to the bridge bot
[12:50:54] <edgar-rft> yes, I can see you there :-)
[13:03:29] <rotateq> edgar-rft: worked for me this week
[13:03:41] <kakuhen> im gambling on swank and sly being interopable rn
[13:03:56] <kakuhen> trying to open remote repl in mezzano to drop in some files and compile my decoders to test for compatibility on mezzano
[13:11:16] <rotateq> I'm moving to IKEA now, see you later.
[13:12:13] *** Joins: shka (~herr@109.231.3.55)
[13:12:28] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[13:51:43] <hayley> moon-child: Party trick: you don't need on stack replacement if all loops are tail calls. (I think.)
[14:00:08] *** Quits: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Quit: Leaving)
[14:06:13] <moon-child> T_T
[14:06:22] <moon-child> also I think osr is frequently done on loops
[14:12:54] <kakuhen> how long would it take to run binary diff on two 1.8 gb files lole
[14:14:14] <shka> with the speed of file read
[14:14:50] <moon-child> I'm curious what the latest is on binary diffing
[14:15:21] <moon-child> I would assume apple/google care a great deal (minimize mobile app update sizes), probably also sony/ms/nintendo
[14:15:54] <kakuhen> well i have an mp3 file that is okay-ish
[14:16:03] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[14:16:03] <kakuhen> its from a live stream and my laptop died 12 hours into recording
[14:16:13] <kakuhen> was out all day and forgot to plug in charger
[14:16:20] <kakuhen> anyway i have this 1.8 gb mp3 that quicktime can't play, but ffprobe gives no errors
[14:16:43] <kakuhen> yet `ffmpeg -i faulty.mp3 -c:a copy new.mp3` gives my something with about 1 kb appended and quicktime can play that one
[14:16:44] <moon-child> ffmpeg -i x.mp3 x.wav?
[14:16:46] <kakuhen> i have no idea what is going wrong
[14:16:48] <moon-child> oh
[14:16:58] <kakuhen> ffprobe gives me no errors when i check faulty.mp3
[14:17:22] <moon-child> shove quicktime in a debugger
[14:17:49] <kakuhen> hmm, maybe
[14:18:00] <kakuhen> there is decent symbolication in mac os frameworks
[14:18:25] <kakuhen> but then i'd have to be sift through a rat's nest of c++ function calls and random template stuff
[14:29:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[14:38:32] <hayley> https://www.youtube.com/watch?v=LEo8wAk0wLQ
[14:38:33] -ixelp- Waiting For The End Of The World - YouTube
[14:39:45] <dave0> maw hayley 
[14:39:52] <dave0> i'm eating icecream :-)
[14:39:55] <hayley> maw
[14:41:24] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[14:43:10] <moon-child> dave0: nice what kind?
[14:43:15] <moon-child> I'm eating ice cream too
[14:44:39] <dave0> https://connoisseuricecream.com.au/product/vanilla-caramel-brownie/
[14:44:41] -ixelp- Vanilla Caramel Brownie - Connoisseur
[14:54:47] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[14:57:33] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:03:31] <hayley> https://www.nber.org/system/files/working_papers/w29874/w29874.pdf  "Firms appointing business managers are not on differential trends and do not enjoy higher output, investment, or employment growth thereafter."
[15:03:47] <hayley> Average b*s*ness degree student
[15:04:51] <dave0> moon-child: i just finished the whole tub :-p
[15:05:32] <moon-child> same!
[15:05:44] * hayley too cold for ice cream
[15:06:08] <hayley> Currently operating in my warm office (read: bed)
[15:06:19] <dave0> yes now i have the shivers lol
[15:07:02] <hayley> After waiting like 2 years, I am trying to counter-cancel someone. Not working.
[15:07:03] <dave0> something something daylight savings apparently
[15:07:23] <hayley> Huh, it ends tonight.
[15:08:13] <dave0> which way do i turn the clocks?
[15:08:22] <hayley> Well, at least I have a good insult for business students. "It has been shown that you have no effect whatsoever on the output of a company." 
[15:08:25] <dave0> this gets me every year
[15:08:27] <hayley> I think an hour back.
[15:08:36] <dave0> oh cool
[15:08:40] <dave0> thanks hayley 
[15:09:16] <dave0> one good thing is my other laptop will have the correct time now :-)
[15:09:57] <hayley> Also TIL the Fediverse server I used is considered to host malware, because some malware for Windows would scrape someone's bio to get the IP address for a C&C server. Cute. 
[15:24:19] *** Joins: treflip (~user@user/treflip)
[15:34:55] <selwyn> i am forced into respecting the java development lifecycle by this competition
[15:34:58] <selwyn> which is kind of amusing
[15:35:27] <shka> respecting is a strong word
[15:35:29] <gilberth> What is the java development lifecycle?
[15:35:44] <shka> acknowledge would be perhaps more suitable  
[15:35:49] <selwyn> i can check that my code 'works' by seeing if asdf can load my system in a separately running lisp image
[15:36:27] <selwyn> but apart from that, i can only really see if it works by executing it either on their servers or under some local test scripts
[15:36:32] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:36:55] <selwyn> shka: i try to see the funny side of it
[15:37:20] <shka> well, running unit tests in the fresh lisp image is a thing that i do... so yeah
[15:37:21] <selwyn> gilberth: compile -> pray -> run -> ... -> compile
[15:37:53] <selwyn> it is a real throwback for me since java was what i started out with but it has been a while since i used it
[15:38:10] <selwyn> common lisp probably has made me a better java programmer but i don't care lol
[15:41:44] * Lycurgus is loving the smalltalk right now
[15:42:00] <rotateq> Lycurgus: the language :D
[15:42:05] <gilberth> selwyn: Ah, the batch oriented way. No editing though? And, why would they care? Are you allowed to use the debugger?
[15:42:29] <selwyn> the lisp debugger?
[15:42:30] <Lycurgus> rotateq, y i meant squeak
[15:42:43] <Lycurgus> https://eg.meansofproduction.biz/eg/index.php/WFL/DCP_SPO
[15:42:52] <gilberth> selwyn: I doubt gdb would be helpful. ;)
[15:43:08] <rotateq> :)
[15:43:27] <gilberth> I mean, just define SLIME as being your debugger.
[15:43:31] <selwyn> well, there is surely some java debugger
[15:43:46] <selwyn> i haven't figured out a way to use the lisp debugger
[15:43:48] <rotateq> ohai gilberth. a bit snow here in the Ruhrgbiet and at your place?
[15:44:02] <Lycurgus> their isnt a java development life cycle as such
[15:44:11] <selwyn> hm, if i try harder i can get proper lisp stack traces
[15:44:17] <Lycurgus> but there is a tool culture and practice niches
[15:44:24] <selwyn> these java ones are not helpful at all
[15:45:00] <Lycurgus> *are tool cultures
[15:45:28] <Lycurgus> when I first heard of java i thought it was a joke
[15:45:39] <Lycurgus> c. '95/6
[15:45:50] <selwyn> tool cultures
[15:45:55] <Lycurgus> today it's the cobol
[15:46:09] <Lycurgus> it and .net
[15:46:10] <selwyn> neolithic tool culture maybe
[15:46:22] <Lycurgus> yeah like ant and maven and whatnow
[15:46:46] <Lycurgus> and server dictated stuff live from jboss ore whatever now u got
[15:46:55] <Lycurgus> *like from
[15:47:10] <selwyn> lisp is bronze age tool culture
[15:47:14] <Lycurgus> like any other culture it's a matter of aculturation
[15:48:27] <Lycurgus> actually most/alot of the testing frameworks descent from smalltalk sunit
[15:48:38] <Lycurgus> *descend
[15:48:51] <gilberth> rotateq: No idea, but the temperature is 6°C, so I doubt very much that there is snow outside.
[15:49:01] <selwyn> age of piracy and collapse
[15:49:33] <shka> lisp the elegant tool for more civilized age
[15:50:13] <selwyn> i have been mentally quoting obi wan a lot today
[15:50:45] <shka> when compiling java: i felt great disturbance in the force 
[15:52:59] <selwyn> 'i have a bad feeling about this'
[15:53:39] <rotateq> gilberth: Yes honestly it th tiny bits from yesterday still hanging around melt now.
[15:54:03] <rotateq> shka: like in this one xkcd
[15:54:16] <hayley> I used jshell extensively for university.
[15:54:35] <hayley> (Past tense, as I don't actually do any subjects with much programming at the moment.)
[15:55:16] <hayley> Speaking of: the lecturer for one course asked us why few people show up, someone answered, and the lecturer replied by saying we have no critical thinking skills.
[15:55:55] <shka> not the worst
[15:56:31] <rotateq> hayley: erm
[15:56:45] <shka> i can give you something much weirder 
[15:56:46] <Lycurgus> is it the case the class could be taken succesfully without attending the lectures?
[15:57:32] <hayley> Probably. But I believe she was also talking about workshops too.
[15:57:40] <Lycurgus> ah
[15:57:52] <shka> so i had this lecture about network protocols once
[15:58:00] <shka> and it was about FTP
[15:58:01] <Lycurgus> yeah workshops are generally optional i think
[15:58:25] <Lycurgus> as opposed to full on "lab" which might not be
[15:58:41] <shka> so the lecturers explains that FTP sets up UDP connection... and *me* is clearly visibly confused 
[15:58:58] <shka> because lecturer asks why i am confused
[15:59:17] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:59:18] <rotateq> we now have FINALLY a well experienced and very competent teacher who can also explain things to classmates who have not really something serious done with computers before. and he strongly is into Linux, from day 0 nearly on
[15:59:32] <shka> so i stated that i am confused because UDP by it's nature is connection-less
[15:59:41] <Inline__> lol
[15:59:46] <shka> the answer i got for that was
[15:59:49] <shka> "So what?"
[16:00:00] <shka> so... yeah
[16:00:04] <Lycurgus> udp isn't connectionless
[16:00:09] <Lycurgus> it's sessionless
[16:00:35] <Inline__> some books say it is connectionless
[16:00:39] <Lycurgus> difficult to do cross machine comms without connecting
[16:01:00] <Lycurgus> books say shit
[16:01:10] <Inline__> maybe the word meant to be used was sessionless instead
[16:01:21] <Lycurgus> in ghettoese book can straight out mean a lie
[16:01:28] <shka> well, i still don't see what UDP connection is supposed to be
[16:01:41] <Inline__> yah
[16:01:49] <Inline__> i see it as connectionless too
[16:02:09] <gilberth> Where is the connection handshake with UDP?
[16:02:24] <Inline__> it is addressed and it gets to it's destination at some time
[16:02:39] <shka> gilberth: no
[16:03:02] <Lycurgus> in the vast majority of cases a socket carries the connection but there are other ways
[16:03:02] <shka> that's why people call it connectionless 
[16:03:22] <selwyn> many amusing memories of being lectured quantum field theory
[16:03:36] <shka> arguably, you can send UDP without connection
[16:03:49] <shka> it is just it won't be received :P 
[16:04:14] <hayley> "The other end will notice if you send UDP packets to it"?
[16:04:39] <shka> hayley: maybe
[16:04:41] <shka> :P
[16:04:57] <dave0> i picked a random port and just sent packets back and forth
[16:05:02] <hayley> Leslie Lamport also invented SIMD within a register https://dl.acm.org/doi/abs/10.1145/360933.360994
[16:05:03] <dave0> does that count?
[16:05:04] -ixelp- Multiple byte processing with full-word instructions | Communications of the ACM
[16:05:07] <shka> well, anyway
[16:05:22] <Inline__> what if it arrives at a time the OS doesn't make room for handling it ?
[16:05:36] <shka> Inline__: shitty drivers being shitty
[16:05:54] <shka> after this experience i came to expect little from lecturers 
[16:06:04] <Inline__> well, the sender sends until it receives a signal back right ?
[16:06:15] <Inline__> so it will send on and on
[16:06:21] <shka> and i had some other hilarious examples but enough of that 
[16:06:25] <shka> Inline__: in UDP?
[16:06:27] <Lycurgus> yeah reliable delivery is conflated with a lack of connection
[16:06:44] <Lycurgus> un
[16:07:15] <shka> Inline__: you can do that with UDP, but you are getting TCP with extra steps 
[16:07:53] <dave0> hayley: https://en.wikipedia.org/wiki/SWAR
[16:08:44] <dave0> hayley: ah yes it says:  Leslie Lamport presented SWAR techniques in his paper titled "Multiple byte processing with full-word instructions"[5] in 1975. 
[16:12:12] <dave0> http://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord
[16:12:13] -ixelp- Bit Twiddling Hacks
[16:15:56] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:16:17] <hayley> I used that website when I wrote the non-SIMD version of a SIMD hash table for SICL.
[16:24:33] <dave0> it's clever
[16:26:17] <rotateq> hayley: freenode :D
[16:26:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:33:05] <selwyn> sigh
[16:33:48] <rotateq> dave0: ah those are really nice, I should go on with those
[16:38:17] <contrapunctus> hayley: hayey 😏️
[16:45:04] <selwyn> hm, jss takes a long time to compile
[16:46:25] <selwyn> sigh
[16:47:35] *** Joins: razetime (~quassel@49.207.199.125)
[16:54:58] <selwyn> if i put fasls under the source tree, will asdf be able to find them
[16:55:07] <easye> selwyn: but you should only need to compile it once, right?  Or is this for a different deployment scenario?  (assuming this is ABCL/JSS)
[16:56:39] <selwyn> yes
[16:56:40] <easye> > if I put the fasls under the source tree:  naw, you need to place them in the respective ASDF output translations path
[16:56:55] <selwyn> it is just fiddly to deal with this automated deployment system
[16:57:16] <easye> The ASDF-JAR contrib has a mechanism to find pre-compiled fasls in new instance of the implementation.
[16:57:23] <easye> (which I think should still work)
[16:57:28] <selwyn> yes, looking into that
[16:57:44] <easye> If it is bit-rotted or incomplete for your needs, please file a ticket.
[16:57:49] <selwyn> will do
[16:57:52] <selwyn> thanks for your help!
[16:58:02] <easye> prego
[16:58:17] * easye is on the road in Lisbon at the moment.
[17:03:55] <selwyn> well, i can package my own asdf system, but not jss
[17:12:51] *** Quits: razetime (~quassel@49.207.199.125) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:13:07] *** Joins: razetime (~quassel@49.207.199.125)
[17:15:20] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ac31:7ac1:bab2:710d) (Remote host closed the connection)
[17:15:44] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:67d2:d391:3f5:bf92)
[17:23:56] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Remote host closed the connection)
[17:39:21] <selwyn> waiting for things to compile and run is admittedly more relaxing than interactive development
[17:39:51] <selwyn> you get more breaks, and because things take longer you get a greater sense of accomplishment from less
[17:41:50] *** semz_ is now known as semz
[17:42:26] <rotateq> That's a nice trick, selwyn! :D
[18:28:30] <shka> selwyn: nice story bro
[18:34:42] * selwyn should be in #javacafe
[18:37:56] <rotateq> no it's good to have you around here
[18:47:36] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:58:10] *** Quits: razetime (~quassel@49.207.199.125) (Ping timeout: 272 seconds)
[19:12:35] <selwyn> it is neat that pathnames are general enough to handle jar files
[19:16:43] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Quit: ZNC - https://znc.in)
[19:17:22] <shka> James Webb operational, meanwhile, grandpa hubble https://www.youtube.com/watch?v=nuWuTTHOAOo
[19:17:22] -ixelp- Wow, Hubble Found a Star At The Edge of the Observable Universe - YouTube
[19:21:01] <selwyn> hubble is a good name for an old man
[19:27:03] <selwyn> i felt it was weird to name it after a bureaucrat
[19:27:13] <selwyn> kind of thing you would get in imperial china
[19:28:04] *** Parts: treflip (~user@user/treflip) (ERC (IRC client for Emacs 27.2))
[19:32:46] <selwyn> easye: i was able to customise asdf output translations to get what i wanted
[19:48:13] *** Joins: treflip (~user@user/treflip)
[19:59:50] <selwyn> hayley: do you know much about how to reduce jvm startup times?
[20:00:07] <selwyn> hoping that tweaking some vm options will help
[20:00:21] *** Quits: shka (~herr@109.231.3.55) (Read error: Connection reset by peer)
[20:00:42] *** Joins: shka (~herr@109.231.3.55)
[20:07:06] <easye> selwyn: RE: i can package my own asdf system, but not jss: that should be possible as well, as JSS is loaded by ASDF
[20:07:10] *** Joins: Oddity (~Oddity@user/oddity)
[20:07:30] <easye> When I get a chance I will look at it.  Making a ticket would help me remember.
[20:18:20] <selwyn> issue opened on github
[20:30:54] <rotateq> easye: as long as you don't get tickets for non-allowed parking in Lisbon :)
[20:31:29] <rotateq> or you clip tickets on cars around with "Have you heard of ABCL?"
[20:35:45] <selwyn> have managed to solve 90% of my problem by using jvm options that were surely never meant to see prod
[20:35:57] <selwyn> i suppose it is in the spirit of the competition :D
[20:39:09] <rotateq> selwyn: Has the work with Java to do with your PhD thesis?
[20:39:40] <selwyn> no, thank god
[20:40:04] <selwyn> i have entered a programming competition in which only rust, java and python are acceptable languages
[20:40:07] <selwyn> but i have other plans
[20:40:44] <rotateq> selwyn: Lucky you! phew!
[20:41:12] <rotateq> ahh. maybe cause the site can just understand that if code analysis is involved?
[20:42:22] <selwyn> well, with abcl it appears to be just like any other java program
[20:42:26] <selwyn> it builds with gradle
[20:45:31] <rotateq> i was wondering if JVM and .NET bytecode may be compatible in some way, this could help at some points in the next 2 years
[20:46:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:46:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[21:06:17] <mfiano> Is it sufficient to copy-list an association list, or should i copy-tree?
[21:08:25] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:08:43] <rotateq> Why not COPY-ALIST?
[21:10:05] <mfiano> I forgot about that one. What does it do differently from COPY-TREE?
[21:11:03] <rotateq> I don't know right now, but I thought the motto is 'be specific' so if you really know you hav alists use that one.
[21:11:39] <mfiano> Yes indeed. From the looks of it, COPY-TREE works on any input, even an atom.
[21:12:37] <rotateq> I didn't use those myself not often yet, but now one reason more to read their specs in more detail. :)
[21:13:03] <rotateq> Yes so that would be useful if edgecases are able to happen.
[21:13:23] <mfiano> Yes, the constant battle of reading the spec, and then reading it recursively because you missed something. I feel the pain.
[21:14:12] <rotateq> So much to do for me.
[21:14:15] <mfiano> 16 years of reading the spec like a lawyer and I learn something new every time I open it up.
[21:15:48] <rotateq> Found some meme last year: https://trash.randomerror.de/112tk/clhs_too_afraid.jpg
[21:16:32] *** Joins: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1005)
[21:17:10] <ck_> selwyn: how did you install abcl, just from the tarball?
[21:17:29] <rotateq> mfiano: So one can work as a well paid judge. ^^ I'll need 10 years and more to be any good.
[21:19:05] <rotateq> And found a nice PDF version (just 1300 pages) typeset with TeX of the hyperspec for my shirt pocket.
[21:19:44] <mfiano> Better idea. Tattoo it on yourself. I just hope you work from home.
[21:20:02] * ck_ .oO( shave left thigh )
[21:22:41] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 246 seconds)
[21:22:43] <rotateq> I have no tattoos but if then the metacircular evaluator might fit. or just a big parentheses pair on my back and a small lambda yin yang sigyll to protect me from blubs, like I did with foil printing on one of my sweatshirt jackets
[21:22:52] *** Joins: razetime (~quassel@49.207.199.125)
[21:24:23] <mfiano> I am having a hard time reasoning about a potential design decision here, maybe I could get some opinion on.
[21:24:43] <rotateq> and on the other half is the haskell symbol
[21:25:06] <rotateq> ah hm :/
[21:25:58] <mfiano> I have a function, CONVERT, that COMPILEs a function that converts between two color spaces if it is not cached in a hash table yet keyed by the given color space pair, and then funcalls the function.
[21:27:01] <mfiano> I am wondering if it makes sense to return the function directly without funcalling, so the user can avoid the hash table lookups for potentially hundreds of thousands of pixels, and funcall it themself.
[21:27:37] <mfiano> That sort of leaks implementation details though, so I'm not sure. Also it would need to be named something else obviously.
[21:30:05] <mfiano> I realize I should probably ask in #commonlisp too.
[21:30:18] <mfiano> Sometimes I just default to this channel out of habit.
[21:37:15] *** Quits: razetime (~quassel@49.207.199.125) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:38:05] <selwyn> ck: abcl is in the maven central repository
[21:38:43] <selwyn> it can be 'installed' using gradle
[21:41:43] <ck_> thanks!
[21:43:53] <gilberth> mfiano: If you want to get fast, consider a CONVERT-LAMBDA function, which gives me a lambda expression for converting a pixel, which I then can embed into another lambda expression of mine, so that at the end of day I could compile the whole loop over some pixel array. This is what I did with Closure, which perhaps made it into McCLIM, I am not sure, and what I do with my CLIM.
[21:45:59] <gilberth> Though I am concerned about pixel formats and details like dithering. But it's the same thing.
[21:53:53] <selwyn> ck: well i don't recommend gradle if you can help it
[22:04:19] *** Joins: Oddity (~Oddity@user/oddity)
[22:09:10] <selwyn> it works well running it out of the jar file
[22:18:06] <shka> be careful selwyn
[22:18:14] <shka> you get enough of java
[22:18:18] <shka> and you start to like it
[22:24:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[22:44:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:44:43] <Lycurgus> a slippery slope to preferring clojure 
[22:44:55] <Lycurgus> because enterprise
[22:47:15] <ck_> I have to clojure because of enterprise
[22:47:36] <ck_> but now I'm speculating that I built sufficient standing to move the common lisp chess piece
[22:48:27] <Lycurgus> got over my repugnance in the recent episode of equivocation with "Polylith"
[22:49:03] <ck_> I don't know what that means
[22:49:06] <Lycurgus> an old cl thing which has a same named but unrelated modern clojure doppelganger
[22:49:19] <ck_> oh
[22:49:26] <Lycurgus> (repugnance to clojure)
[22:49:51] <Lycurgus> now I'm loving the lisp in java should i need it which i prolly will
[22:50:39] <Lycurgus> s/unrelated/separately conceived/
[22:51:21] <Lycurgus> when there's a name collision like that there's usually a strong semantic overlap unless it's a junk name like google 
[22:51:51] <Lycurgus> the clojure author was unaware of the lisp system
[22:52:05] <Lycurgus> *cl system
[22:52:52] <Lycurgus> purity freaks will always be haters igess
[22:54:49] <Lycurgus> had there been a really good cl java bridge pkg that might have headed off clojure
[22:56:55] <selwyn> i don't hate clojure
[22:57:11] <selwyn> ck: is there reason to
[22:57:50] *** Inline__ is now known as Inline
[22:57:55] <selwyn> reason to hate clojure i mean
[23:00:37] <semz> Didn't Clojure start off as a .NET project and only switched to Java halfway in? Not sure if a Java bridge would have changed all that much.
[23:01:04] <selwyn> common lisp for .net would be ok i guess
[23:01:14] <Lycurgus> from 'polylith' you can infer that both were about componentizing, done the lisp way originally and ofc more interestingly/ambitiously and then the java way
[23:01:48] <ck_> selwyn: reason to use common lisp instead of clojure?
[23:02:20] <selwyn> yeah
[23:02:32] <ck_> well uh
[23:02:38] <ck_> yes, personal reasons :)
[23:03:04] <ck_> on a purely technical level I think you lose solid ground when arguing about almost any language
[23:03:15] <selwyn> ok
[23:03:44] <ck_> if you're interested in my own reasons, one is the debugging facilities
[23:04:09] <ck_> clojure stack traces almost read like the compile errors C++ template mistakes give you
[23:04:44] <selwyn> lol
[23:04:49] <selwyn> in cider?
[23:04:55] <ck_> yes
[23:05:33] <ck_> I also maintain things written in clojurescript, that's whole other can of worms
[23:05:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[23:09:02] <ck_> 'a whole' even
[23:10:23] <ck_> I forgot the results of our conversation about binding reference material. did you say you had a preference?
[23:10:30] <selwyn> um
[23:10:39] <ck_> I remember comparisons with plastic laminated restaurant menus
[23:10:52] <selwyn> no preference
[23:11:04] <ck_> what I'd go for is wire binding with slightly heavier paper
[23:11:13] <selwyn> if the price is exorbitant i may have to refuse
[23:11:30] <ck_> what do you mean by exorbitant and what do you mean by refuse? :)
[23:11:48] <selwyn> iirc we agreed to bind the hyperspec at some print shop
[23:12:16] <selwyn> if its too expensive i might not buy one
[23:12:29] <ck_> I said I'd like to do that, and offered you one
[23:12:49] <ck_> as a gift. from internet man.
[23:12:56] <selwyn> oh
[23:12:57] <ck_> so as you can tell refusal is right out of the question
[23:13:04] <selwyn> well that's very kind :) sure i'd like one
[23:18:36] <selwyn> until recently, phd students here had to pay for phd thesis binding out of pocket
[23:19:47] <ck_> that's, to my knowledge, standard for everybody over here
[23:20:01] <selwyn> it seems very harsh
[23:20:06] <selwyn> seeing as how it is a requirement to graduate
[23:20:19] <ck_> ah, but does it specify the kind of binding? :)
[23:21:36] <ck_> there is a lot, and I mean a lot, of shelf space filled with the most basic cardboard-on-end, glue-tape-on-the-spine type of 'book' containing doctoral dissertations
[23:21:46] <ck_> especially in the humanities, cough cough
[23:23:30] <ck_> have you heard back from where was it, berkeley(?) already?
[23:24:59] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:27:27] <lagash> humanities, hah 
[23:28:16] <lagash> you'd think the fields that "move" the most would have the least archival quality theses ;)
[23:45:18] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:52:04] <selwyn> ck: not heard back yet
[23:52:11] <selwyn> but they are known to move at a glacial pace
[23:57:38] <selwyn> they used to require a hard bound copy but a pdf will do now
[23:57:57] <selwyn> putting the pdf into long term storage format (pdf/a) was not trivial actually
