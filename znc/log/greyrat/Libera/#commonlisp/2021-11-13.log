[00:02:48] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[00:02:48] *** Joins: hayley (~theemacss@user/hayley)
[00:03:00] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:06:46] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[00:10:32] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:12:23] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[00:12:36] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:13:21] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:16:04] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 268 seconds)
[00:16:46] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:16:46] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b006:43b8:dc61:7cc0:46dd:a959) (Ping timeout: 245 seconds)
[00:16:59] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:21:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:21:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:26:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:26:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:26:55] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[00:27:15] *** Joins: X-Scale` (~ARM@46.50.4.208)
[00:27:59] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:29:08] *** X-Scale` is now known as X-Scale
[00:31:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:31:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:34:18] *** Quits: alvaro121 (~akira121@201.230.126.66) (Ping timeout: 260 seconds)
[00:35:11] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 256 seconds)
[00:36:19] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[00:36:23] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[00:36:36] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:41:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:41:24] *** Quits: VincentVega (~user@212.241.28.95) (Remote host closed the connection)
[00:41:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:44:47] *** Joins: akoana (~ah@user/akoana)
[00:46:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:46:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:47:50] *** Quits: ym (~ym@5.143.220.3) (Ping timeout: 260 seconds)
[00:49:33] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:51:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:51:30] *** Quits: cage (~cage@dynamic-adsl-94-34-55-34.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:51:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:54:18] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[00:54:54] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b008:1248:481b:1f8f:edc9:ed83)
[00:56:21] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:56:21] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[00:56:34] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[00:58:11] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[01:01:35] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:01:48] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:03:59] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[01:06:23] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:06:36] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:09:22] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[01:09:46] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[01:11:11] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:11:24] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:12:23] *** Quits: splatt9990 (~user@2600:2b00:8a19:ea00:216:3eff:fec3:387a) (Ping timeout: 264 seconds)
[01:14:01] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[01:15:59] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:16:07] *** Joins: splatt9990 (~user@74.215.190.180)
[01:16:12] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:17:14] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[01:18:29] *** Parts: splatt9990 (~user@74.215.190.180) ()
[01:20:31] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[01:20:44] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:21:54] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[01:25:31] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[01:25:44] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:30:31] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[01:30:44] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:31:41] *** Joins: gaqwas (~john@dynamic-077-004-006-222.77.4.pool.telefonica.de)
[01:32:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:33:34] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:35:31] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[01:35:44] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:40:35] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:40:48] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:42:35] *** Joins: raeda (~raeda@74.215.157.51)
[01:45:23] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:45:36] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:50:11] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:50:28] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:52:01] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[01:54:59] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:55:12] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[01:57:37] *** Joins: amb007 (~a_bakic@199.146.204.77.rev.sfr.net)
[01:59:47] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:59:47] *** Quits: amb007 (~a_bakic@199.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[02:00:00] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:00:29] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:04:16] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:04:29] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:09:16] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:09:30] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:14:16] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:18:39] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:21:18] *** Quits: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl) (Quit: Leaving)
[02:22:29] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:27:59] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[02:28:12] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:32:10] *** Quits: gaqwas (~john@dynamic-077-004-006-222.77.4.pool.telefonica.de) (Remote host closed the connection)
[02:32:36] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:32:49] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:35:32] *** Joins: gaqwas (~john@dynamic-077-004-006-222.77.4.pool.telefonica.de)
[02:37:36] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[02:39:50] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[02:40:40] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[02:42:25] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[02:51:23] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[02:54:35] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[02:54:57] *** Quits: gaqwas (~john@dynamic-077-004-006-222.77.4.pool.telefonica.de) (Remote host closed the connection)
[02:55:35] *** Joins: gaqwas (~john@dynamic-077-004-006-222.77.4.pool.telefonica.de)
[02:56:24] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[03:00:23] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:05] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[03:05:11] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 264 seconds)
[03:05:24] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[03:09:41] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Ping timeout: 245 seconds)
[03:09:54] *** Joins: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com)
[03:12:14] *** Quits: reb`````` (~brown@2603-7000-d93b-e900-859e-4423-783d-b776.res6.spectrum.com) (Remote host closed the connection)
[03:13:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1049) (Remote host closed the connection)
[03:17:38] *** Joins: Jing (~hedgehog@2604:a840:3::1049)
[03:23:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[03:24:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:27:25] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Remote host closed the connection)
[03:29:21] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 250 seconds)
[03:34:12] *** Quits: pve (~pve@178-55-217-122.bb.dnainternet.fi) (Quit: leaving)
[03:37:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:39:59] *** Quits: gaqwas (~john@dynamic-077-004-006-222.77.4.pool.telefonica.de) (Ping timeout: 264 seconds)
[03:50:53] *** Joins: Guest7482 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:52:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5) (Quit: Leaving)
[03:52:31] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[03:57:02] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1)
[03:57:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:58:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:03:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873)
[04:04:28] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[04:21:17] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 256 seconds)
[04:32:33] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[04:43:19] *** Joins: alvaro121 (~akira121@201.230.126.66)
[04:51:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[04:53:06] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:53:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:54:30] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[04:54:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:56:32] *** Quits: jealousmonk (~user@2804:431:e7c4:7f35:7769:1f33:9572:c142) (Quit: ERC (IRC client for Emacs 27.1))
[04:58:44] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1) (Remote host closed the connection)
[04:59:01] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1)
[05:02:27] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[05:06:31] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 268 seconds)
[05:08:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873) (Remote host closed the connection)
[05:08:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b)
[05:11:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b) (Remote host closed the connection)
[05:15:59] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1) (Ping timeout: 264 seconds)
[05:16:10] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[05:16:22] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:17:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:17:29] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[05:17:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[05:18:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:21:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[05:27:14] *** Joins: notzmv (~zmv@user/notzmv)
[05:28:19] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[05:34:23] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[05:41:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[05:46:05] *** Joins: s-liao (~s-liao@101.86.103.113)
[05:55:36] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[05:56:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:56:07] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[05:57:20] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[05:59:38] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[06:01:27] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[06:04:28] *** Quits: alvaro121 (~akira121@201.230.126.66) (Quit: Leaving)
[06:05:30] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) ()
[06:10:46] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[06:24:07] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b008:1248:481b:1f8f:edc9:ed83) (Quit: Leaving)
[06:24:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98)
[06:29:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:37:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[06:38:11] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Ping timeout (120 seconds))
[06:42:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:42:35] *** Joins: s-liao (~s-liao@101.86.103.113)
[06:52:50] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[07:12:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:15:46] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:18:26] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 260 seconds)
[07:30:55] <beach> Good morning everyone!
[07:32:17] <lisp123> (print 'good-morning-beach)
[07:37:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[07:45:54] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[07:59:01] *** Joins: Oladon (~olad@98.43.81.226)
[08:02:46] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[08:05:18] *** Joins: nature (~nature@45.32.235.173)
[08:09:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:13:58] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 260 seconds)
[08:28:06] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:28:56] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[08:38:26] <susam> Good morning!
[08:38:30] <susam> Hello beach!
[08:38:33] <susam> Hello lisp123!
[08:41:41] *** Joins: semz (~none@user/semz)
[08:57:15] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 256 seconds)
[09:03:08] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:08:35] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[09:12:14] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: leaving)
[09:17:26] *** Quits: Guest7482 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 260 seconds)
[09:18:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98) (Ping timeout: 264 seconds)
[09:24:21] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[09:34:13] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:40:16] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:03:00] *** Joins: aartaka (~aartaka@176.59.193.20)
[10:06:50] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 268 seconds)
[10:15:14] *** Joins: ym (~ym@5.143.220.3)
[10:15:32] *** Joins: VincentVega (~user@212.241.28.158)
[10:17:09] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:19:40] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:23:53] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:24:03] *** Quits: Posterdati (~posterdat@host-82-63-88-92.business.telecomitalia.it) (Ping timeout: 250 seconds)
[10:25:06] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[10:26:20] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:30:10] *** Joins: pve (~pve@37-136-155-235.rev.dnainternet.fi)
[10:31:38] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[10:36:58] *** Joins: Posterdati (~posterdat@host-95-233-159-142.retail.telecomitalia.it)
[10:50:55] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:52:31] *** Joins: s-liao (~s-liao@101.86.101.64)
[10:57:11] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[11:06:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:06:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:10:06] *** Joins: Oladon (~olad@98.43.81.226)
[11:10:52] *** Quits: d4ryus (~d4ryus@ppp-188-174-80-12.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[11:14:57] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[11:17:21] *** Joins: d4ryus (~d4ryus@ppp-188-174-80-12.dynamic.mnet-online.de)
[11:25:11] *** Joins: gaqwas (~john@dynamic-077-007-156-064.77.7.pool.telefonica.de)
[11:33:29] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[11:33:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[11:34:03] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[11:40:08] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[11:41:21] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 245 seconds)
[11:45:17] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:47:36] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[11:52:23] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[11:52:52] *** Joins: Everything (~Everythin@37.115.210.35)
[11:57:30] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[12:01:57] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[12:09:40] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[12:11:35] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:14:27] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[12:30:13] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[12:31:40] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[12:32:54] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:37:36] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[12:40:04] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:44:13] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[12:44:30] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[12:48:20] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[12:49:01] *** Quits: gendl (sid100083@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[12:49:03] *** Joins: ullbeking (sid5364@user/ullbeking)
[12:49:15] *** Quits: victor_ (sid208353@tinside.irccloud.com) (Read error: Connection reset by peer)
[12:49:35] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:49:35] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:49:36] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 256 seconds)
[12:49:46] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 265 seconds)
[12:49:52] *** Joins: victor_ (sid208353@tinside.irccloud.com)
[12:50:11] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[12:52:51] *** Joins: travv0 (sid293381@user/travv0)
[12:53:33] *** Joins: pl (sid98063@helmsley.irccloud.com)
[12:53:34] *** ChanServ sets mode: +o pl
[12:54:49] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[12:55:16] *** Quits: ullbeking (sid5364@user/ullbeking) (Max SendQ exceeded)
[12:56:47] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:57:39] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[12:58:07] *** Joins: ullbeking (sid5364@user/ullbeking)
[12:58:08] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:00:04] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1)
[13:00:47] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:05:47] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[13:10:11] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[13:10:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:15:56] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[13:21:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:25:52] *** Quits: aartaka (~aartaka@176.59.193.20) (Read error: Connection reset by peer)
[13:26:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:26:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:27:20] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:29:21] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e097:ace:b6b8:a6c1) (Remote host closed the connection)
[13:29:32] *** Quits: dre (~dre@2001:8003:c932:c301:3aa0:ae93:dc87:2b3) (Ping timeout: 240 seconds)
[13:32:11] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[13:32:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[13:32:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:37:19] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:30f5:9848:95e4:c61b) (Remote host closed the connection)
[13:37:43] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:bdac:69cd:e627:f419)
[13:38:58] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 268 seconds)
[13:42:53] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:48:06] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[13:55:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:59:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[14:03:23] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[14:03:26] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[14:07:42] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[14:13:36] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:26:22] *** Joins: s-liao21 (~s-liao@101.86.101.64)
[14:27:48] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[14:36:19] *** Joins: resttime (~resttime@159.89.237.107)
[14:44:29] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[14:45:03] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[14:51:50] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803)
[14:54:17] *** Quits: resttime (~resttime@159.89.237.107) (Quit: resttime)
[14:58:39] *** Joins: cage (~cage@dynamic-adsl-94-34-55-34.clienti.tiscali.it)
[15:03:02] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[15:27:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[15:33:33] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[15:34:25] *** Quits: VincentVega (~user@212.241.28.158) (Read error: Connection reset by peer)
[15:36:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b)
[15:37:53] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[15:37:55] *** Quits: s-liao21 (~s-liao@101.86.101.64) (Quit: Client closed)
[15:42:54] *** Joins: random-nick (~random-ni@87.116.176.55)
[15:46:52] *** Joins: s-liao (~s-liao@101.86.101.64)
[15:49:55] *** Joins: igemnace (~ian@user/igemnace)
[15:51:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:05:08] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[16:05:13] *** Joins: ebrasca (~user@librepanther.com)
[16:15:49] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:18:32] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 240 seconds)
[16:34:48] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:36:29] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:43:03] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:44:09] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:04:33] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:11:41] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:18:06] *** Joins: vats (~vats@103.158.91.90)
[17:26:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:32:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:34:05] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[17:35:11] *** Joins: Krystof (~user@81.174.155.115)
[17:36:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[17:39:06] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[17:41:58] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:42:31] *** Joins: nature (~nature@45.32.235.173)
[17:51:02] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[17:51:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b) (Quit: Leaving)
[17:53:42] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[17:55:16] <_73> I copied code directly from the book `on lisp (page 19)` but I am getting a compiler warning for `undefined variable`. I would like help understanding what the problem is - http://dpaste.com/B76NZ6D8G
[17:55:41] <_73> I am using SBCL
[17:56:02] <beach> You are not allowed to use SETQ on a variable that has not been defined.
[17:56:12] <beach> Use DEFPARAMETER instead.
[17:56:46] <_73> ok that works thanks
[17:56:48] <beach> Or, rather, using SETQ on an undefined variable is undefined behavior.
[17:57:13] <beach> Sure.
[18:13:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7)
[18:15:59] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[18:16:04] *** Joins: VincentVega (~user@212.241.28.158)
[18:29:31] <VincentVega> Heyall. Suppose there's two libraries, A and B. They define they same functions in different ways (same lambda lists, though maybe different declared types/etc). There's library C that relies on the functions. There's application D from which I want to control whether C loads and uses (e.g. imports from) A or B. I have control over all these libraries. How can I do this? I don't want to use CLOS for this. I guess what I am looking for a
[18:29:32] <VincentVega> conditional dependency mechanism. Any better ideas than try to wrap my defpackage/defsystem into a let and set a dynamic variable and use it in package C?
[18:29:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:33:45] <Demosthenex> so i was looking at the trivia pattern matching library. it's pretty slick, and i was curious if i missed it, or does it have an option to ignore "one or more" items? (trivia:match '(1 2 3 4 ) ((list 1 _ _ a ) a)) resolves to 4, but i'd rather not repeat the _, like (trivia:match '(1 2 3 4 ) ((list 1 _* a ) a))
[18:37:34] <Guest74> vincentvega: apparently asdf has an :if-feature option that can do stuff depending if something is in *features*. Unfortunately you cannot set this with the asd itself.  so maybe if You have the user/yourself set the feature before loading D then you can load a or b appropriately.
[18:37:49] <Guest74> s/with/within/
[18:39:46] <VincentVega> Guest74: I will look into it, thanks for the pointer!
[18:41:39] <Guest74> np, I was looking for the same thing, haven't used it yet though.
[18:42:47] <beach> VincentVega: If you don't import at all, and instead use package-local nicknames, you can just prefix all the symbols from the external libraries with a prefix of your choice and change it according to which external library you want.
[18:43:51] <beach> VincentVega: In fact, it is not recommended to :USE packages other than the COMMON-LISP package, because of the risk of conflicts; even future ones.
[18:44:36] <Guest74> heh, that's what I currently do, but didn't know if it was frowned upon.
[18:44:47] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[18:45:35] <beach> Package-local nicknames?  No, they are great!
[18:47:39] <VincentVega> beach: Hmmm, yeah, I am not too keen on importing, so that sounds fine, but could you please elaborate on the "change it according to which external library you want." You mean conditionally set up the package local nicknames using :if-feature?
[18:47:58] <Guest74> well, actually I have a generic protocol and then implementations follow the protocol semantics in their own packages and then wrap those up for the protocol. So you can develop using the generics and simply use a pln to swtich to a fast path if needed.
[18:48:30] <beach> I just meant that you can modify the package definition of C.
[18:48:53] <Guest74> but it seemed unusual to do that as I haven't really seen anybody else do that.
[18:49:01] <beach> But I guess then you may have to use an implementation-specific programmatic interface.
[18:49:45] <VincentVega> beach: Oh, I see. I was wondering if I could do that without the user modifying C at all, hopefully, only setting up the option in D.
[18:50:18] <beach> Guest74: Why not just compile and load one of the interface packages as you please, without changing the protocol package?
[18:51:37] <beach> VincentVega: I see.  Well, maybe another solution would be to have C refer to some entirely different package, and have C create that package with symbols imported from either A or B.
[18:52:11] <beach> You can do this using only standard functions.
[18:55:44] <Guest74> I might not have explained properly, or I misunderstood. Usual me.  it's just so you can have draw:line in your code that will draw to any surface, and then if you want to package for only the framebuffer you can just use a pln for draw-frame-buffer to draw.
[18:56:37] <VincentVega> beach: Huh, that's an interesting direction to think about I guess. I could maybe define that middle-man package in before quickloading D or even in D, maybe that could actually work.
[18:56:50] <VincentVega> Guest74: is pln the package you are developing?
[18:57:08] <Guest74> package-local-nickname
[18:57:23] <VincentVega> oh
[18:57:53] <VincentVega> But is your package open source yet? I am also working on some drawing stuff here : D
[18:58:04] <beach> Guest74: I am notorious for not understanding the point, so I'll let someone else figure it out.
[18:58:06] <Guest74> so instead of draw:line referencing the generic protocol, it directly uses draw-frame-buffer:line
[19:00:18] <Guest74> it can make quite a difference when drawing pixels millions of times a second, otherwise I'm not sure it's worth the trouble.
[19:06:35] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:08:12] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:17:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:18:58] <pjb> VincentVega: I think you're confusing functions with their names.  You cannot define the same function with different declared types.  But once you have the same signature (lambda-list) and source and image types, you can indeed define a function in different ways. As long as they're really the same function (compute the same results), it doesn't matter.
[19:20:25] <pjb> VincentVega: You can use one implementation or the other, by using a wrapper for example: (defun d:factorial (x) (if d:*use-c* (a:fact x) (b:! x)))
[19:21:01] <VincentVega> pjb: But I don't want to define the same function twice, I either load A or B, but not both at the same time.
[19:21:49] <pjb> Then you can use the backend pattern, where you edfine the D:factorial API, and load d-a.lisp and d-b.lisp backends to forward the call to right function.
[19:22:22] <pjb> you can have a d-a and a d-b system, d-a depends on a and loads d-a.lisp, while d-b depends on b and loads d-b.lisp
[19:23:04] <pjb> and of course, if the name of the functions are also the same, you can define the d package by using a or b, and re-exporting  the symbol naming that function.
[19:28:19] <VincentVega> pjb: I hear you, and I would probably be ok even with CLOS otherwise, but I want this to be as performant as possible.  Actually, I am trying out the middle-man package idea (thanks beach!), and it seems to be working, but I am still testing it.
[19:29:18] <pjb> VincentVega: packages are just collections of symbols. Those symbols aren't necessarily interned in that package.
[19:30:19] <pjb> VincentVega: (defpackage "SIMPLE-LISP" (:use "CL") (:export "DEFUN" "COND" "NULL" "CAR" "CDR" "CONS" "EQL" "QUOTE"))
[19:30:37] <pjb> VincentVega: then you can write your programs in simple-lisp instead of in common-lisp.
[19:30:58] <pjb> (defpackage "YOUR-PROGRAM" (:use "SIMPLE-LISP")) (in-package "YOUR-PROGRAM") …
[19:30:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:31:35] <VincentVega> pjb: ok, gotcha
[19:35:16] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[19:39:43] *** Quits: vats (~vats@103.158.91.90) (Ping timeout: 268 seconds)
[19:39:50] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Remote host closed the connection)
[19:40:03] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[19:45:56] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[19:58:13] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[20:00:35] <phantomics> Interesting data point: in ABCL, (log 2.0d0 2.0d0) will produce 1.0d0, but (log 2 2.0d0) and (log 2.0 2.0d0) will produce 1.0000000027478353d0
[20:03:05] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[20:05:16] <Guest74> is FINDing something in an array faster than finding it in a list?
[20:06:17] *** Joins: Guest91 (~Guest91@153.3.4.93.rev.sfr.net)
[20:06:18] <phantomics> Guest74: no, in each case you iterate over each element
[20:06:47] <Guest74> just wondering if there's less indirection with an array.
[20:07:19] <phantomics> Arrays are faster when you want to get something at an arbitrary location, but when you're scanning over each element in turn both are equally as fast
[20:08:23] <phantomics> Now, if you're searching for something where the search involves some kind of sorting, an array would be faster
[20:08:46] <phantomics> Like searching for a name in an alphabetical list
[20:09:16] <Guest74> sorting an array is faster than sorting a list?
[20:09:45] <phantomics> Yes, because you need to access arbitrary elements
[20:10:07] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:10:39] <jcowan> There is also better locality with an array.
[20:11:06] <pjb> A list might take twice the memory, since it needs to store cdr pointers. So it's possible that for big sequences, searching in vector be fster than in lists.
[20:11:31] <Guest74> trying to figure out what's the best structures to handle all these adjacency rules for wave function collapse.  Anything to speed it up would be nice.
[20:11:33] <pjb> On the other hand, on big vectors, with modern memory systems, accesses are not O(1).
[20:12:19] <phantomics> Say you're doing a quicksort, you choose an index as the pivot point and access the elements at either side of it, you have to access specific numbered elements
[20:12:43] <jcowan> CDR coding was an attempt to mitigate these issues while keeping the semantics of lists.
[20:13:52] <jcowan> An attempt was made to keep list cells contiguous whenever possible, each cell containing a 2-bit flag representing the following cases:
[20:14:15] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:14:19] <Guest74> now if i'm constantly removing members I'm guessing a list would be better?  I need to also constantly update a list of possible neighbours.
[20:14:27] *** Joins: Nselm (~Nselm@p200300d56f367683b08fa78cb7502f6a.dip0.t-ipconnect.de)
[20:14:33] <pjb> Of course.
[20:14:37] <Guest74> and impossible neighbours
[20:14:42] <jcowan> (a) the cdr is the next cell; b) the cdr is (); c) the cdr *pointer* is in the next cell; d) this cell is a cdr pointer
[20:14:47] <pjb> On the other hand, you may also prefer to use a doubly-linked list.
[20:16:55] <jcowan> then (a b c d) occupies the same amount of storage as #(a b c d), and you can determine in O(n) time whether a list is in fact contiguous.
[20:17:19] <Guest74> but nobody does that anymore right?
[20:19:05] <phantomics> Guest74: Is there any existing work in other languages to solve this problem? That could be helpful
[20:19:16] <Guest74> plenty
[20:19:24] <phantomics> For the possible/impossible neighbor lists, you could use two matrices
[20:19:25] <Guest74> i just don't understand other languages.
[20:19:44] <phantomics> Say you have elements (a b c d e)
[20:19:50] <Guest74> and i'm guessing they each have differences in performance.
[20:19:58] <phantomics> You would create a 5x5 binary matrix
[20:20:06] <jcowan> Guest74: In the 16-bit and 32-bit eras, there were no flag bits to spare.  In the 64-bit era it might be worth reviving.
[20:20:35] <Alfr> Arrays are also expensive if you have to insert things at random positions (same goes for lists if it's not the current position).
[20:21:05] <phantomics> Actually, just one matrix, not binary
[20:21:39] <Guest74> I guess I could use a bitmask and just flip bits
[20:21:39] <jcowan> Arrays are more expensive than lists because of the repeated memory allocations.  Inserting/deleting on lists is O(n), the same as retrieving.
[20:21:50] <phantomics> Or yes binary, each value would be 0 (impossible neighbor) or 1 (possible neighbor)
[20:22:48] <Guest74> though i'm guessing that could be a problem depending on the size.
[20:23:00] <jcowan> Note that mutable boolean arrays may be more time-efficient as bytevectors than as bitvectors if you are okay with the space cost.
[20:23:14] <phantomics> Only thing to remember with bitmasks is that there are issues with flipping bits and multithreading
[20:23:21] <phantomics> Is this job parallelizable at all?
[20:23:35] <jcowan> Such matrixes assume uniqueness.
[20:24:08] <phantomics> Like jcowan said, the matrix could have 8-bit integers of 1 or 0 since those are faster to flip
[20:24:21] <Guest74> not sure.  i guess while propagating it could be, but there might be multiple access to each possibility
[20:24:43] <phantomics> Ok, if you can run parts in parallel those could get a big speedup
[20:25:04] *** Joins: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl)
[20:25:20] <jcowan> an extension flag :reptype to make-array might be helpful here
[20:25:30] <Guest74> but if you propagate up and to left of a cell, those will both propage to the nw diagonal of the starting cell.
[20:25:43] <Guest74> s/propage/propagate
[20:27:04] <jcowan> (English is whimsical about the -ate suffix.  There is simply no reason except historical accident that we use prepare and separate instead of *separe and/or *preparate.)
[20:27:11] <Guest74> those would end up being quite large matrices.
[20:28:02] <phantomics> So in one "cycle" propagation could move in multiple directions for a diagonal movement and that may not be doable in parallel? I don't know much about your use case, granted
[20:28:12] <phantomics> How many elements are you typically working with?
[20:28:35] <Guest74> depends on the image being sampled.
[20:28:42] <jcowan> What is a good data structure that balances the big-O time for traversing, adding at an arbitrary position, and removing ditto?
[20:29:08] <jcowan> Mutable is fine, I don't need persistence here.
[20:29:08] <Guest74> say I've got a 23x23 image here, that gives me 400 samples without including any rotations or reflections.
[20:29:19] <Guest74> how many of those samples are unique depends on the image.
[20:29:47] <jcowan> Presumably users will be willing to wait longer for bigger images, though.
[20:33:23] <beach> jcowan: A balanced tree.
[20:33:40] <beach> jcowan: You get O(log n) for every operation.
[20:34:27] <beach> Well, traversing everything is O(n) obviously.
[20:34:53] <phantomics> 400x400? That's not too big
[20:35:39] <Guest74> for a 23x23 input without rotations/reflections which most people want.
[20:36:08] <jcowan> Okay, and what is the most balanced way to keep the tree balanced?
[20:36:47] <beach> Doesn't matter much.  2-3 tree, red-black tree, AVL tree.
[20:38:11] <beach> Red-black trees are notoriously hard to implement right, but then you might find some in an existing library.
[20:42:47] <beach> jcowan: Most implementations perhaps use the dictionary model where you store keys and values, but you want to store the size of a subtree in the root of that subtree, and branch based on some accumulated number of items to your left or to your right.
[20:44:13] <jcowan> How about skip lists?  They are also O(log n) and are said to be less fiddly.
[20:44:24] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[20:45:52] <jcowan> (I have no experience implementing any of them.)
[20:56:24] <phantomics> Quick question: is there an accepted way to do GCD/LCM of floats? My current method is to (rationalize) them, do the operation and then convert them back to floats, but I'm having some problems with (rationalize)
[21:02:35] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[21:02:38] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:03:17] *** Joins: amb007 (~a_bakic@69.144.204.77.rev.sfr.net)
[21:04:05] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:04:42] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:04:54] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Client Quit)
[21:10:39] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[21:12:22] <Guest74> that's an interesting question.  What are you using it for?
[21:12:36] *** Joins: McParen (~mcp@user/mcparen)
[21:15:38] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[21:17:02] <pjb> phantomics: given that / has always a result for any couple of float (but (x 0)), the (GCD x y) = most-positive-long-float
[21:17:14] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:17:47] *** Quits: amb007 (~a_bakic@69.144.204.77.rev.sfr.net) (Ping timeout: 264 seconds)
[21:19:10] <pjb> phantomics: going thru rationalize or any other transformation intended to map reals to ratio is rather nonsensical. You can get any result, since you can use any mapping.
[21:20:19] *** Joins: amb007 (~a_bakic@103.147.204.77.rev.sfr.net)
[21:20:32] <pjb> phantomics: the problem is that 1.0 represents any number between 1.0-ε and 1.0+ε (an infinite number of reals in there), therefore there are n infinite number of ratio that could be mapped from that 1.0 float.
[21:20:53] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:22:49] <phantomics> pjb: Hmm, ok, APLs have GCD and LCM for floats so they clearly have some idea of how to approach it
[21:24:41] *** Quits: amb007 (~a_bakic@103.147.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[21:25:02] *** Joins: amb007 (~a_bakic@77.145.204.77.rev.sfr.net)
[21:26:52] <phantomics> ABCL has trouble with (rationalize) I'm sure because of the details with Java, try (rationalize -2.3) and (rationalize -2.3d0) to see the zany results
[21:29:21] *** Quits: Guest91 (~Guest91@153.3.4.93.rev.sfr.net) (Quit: Client closed)
[21:32:56] <edgar-rft> An IEEE floating-point number n represents a *range* of n+/-ε numbers, where I have no idea howto find the GDD or LCM of a range of numbers in a meaningful way, but maybe some math experts know that better than me.
[21:34:02] <Guest74> I'm still wondering what the use case is.
[21:34:43] <phantomics> For use case, see: http://dfns.dyalog.com/n_cfract.htm
[21:35:47] <phantomics> This is an APL function that can use a float GCD (the 1÷1∨⍵ part) in the source code here: http://dfns.dyalog.com/c_cfract.htm
[21:36:38] <Guest74> oh are you one of the guys with an apl implementation?
[21:37:15] <phantomics> Yes, I wrote the April compiler: https://github.com/phantomics/april
[21:38:23] <phantomics> It could be handy for your image processing case, you mention permuting things in different ways, rotation, reflection, etc.
[21:39:20] <Guest74> ah, my brain sees gobbledygook when looking at apl.  we're not compatible.
[21:39:46] <phantomics> Reflecting an array A is literally just ⌽A
[21:40:33] <Guest74> well, it's just (reflect a) in lisp...
[21:41:50] <phantomics> And the library you're using handles reflecting any rank array on any axis?
[21:42:11] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 27.2)
[21:42:31] *** Joins: Catie (~user@user/catie)
[21:42:37] <Guest74> nope, haven't written all cases yet :)
[21:43:05] <phantomics> Another option for you could be to use the functions in here: https://github.com/phantomics/april/blob/master/aplesque/aplesque.lisp
[21:43:17] <Guest74> but at least I can read it, and not try and figure out why phi is reflect or how am I going to type it.
[21:45:06] <phantomics> The aplesque package holds all the array operations that power APL, including rotation and reflection, so you can use them in CL
[21:45:19] <phantomics> See the (turn) function in there for rotation
[21:46:07] <phantomics> They're all parallelized too
[21:48:10] <Guest74> interesting.  but all my arrays are 1d
[21:49:01] <Alfr> edgar-rft, I don't think there is, for a, b rationals consider: gcd(a,b) = gcd(x/q, y/q) = gcd(x,y)/q for q a common denominator of a and b; thus when you're free to choose a or b you can make gcd(a,b) arbitrarily small by forcing q to be sufficiently large.
[21:49:45] <Alfr> ^ q s.t. x, y are integers.
[21:50:11] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 264 seconds)
[21:50:14] *** Quits: Nselm (~Nselm@p200300d56f367683b08fa78cb7502f6a.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:51:08] *** Joins: vats (~vats@103.158.91.90)
[22:12:40] <edgar-rft> Alfr: that's very nice but I haven't understood a word of it, can you explain it in normal english?
[22:15:46] <phantomics> You just need to find a common denominator for the args a and b he says
[22:16:06] <phantomics> Divide them by it to make whole numbers, then GCD those numbers and divide the result by q
[22:16:10] <phantomics> Right?
[22:18:57] <edgar-rft> but an IEEE float is *not* a rational
[22:19:21] <Alfr> edgar-rft, you said you'd like to have a gcd(a,b) where a and/or b represent intervals of values, what I'm saying is that you can choose rationals in those intervals such that gcd(a',b') is arbitrarily small.
[22:19:34] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[22:22:38] <Alfr> edgar-rft, I use rationals because, becaus I'm not sure how to compute the gcd for two arbitrary reals and as the rationals are dense in the reals it's possible to choose appropriate ones for the argument in any open interval.
[22:22:58] <edgar-rft> yes, a common "practical" algorithm (that is mathematically incorrect) is defining a "precisision" of the result (e.g. three digits after the dot) and use rationals that are in the "precision" range of the result
[22:27:14] <semz> What prompted this problem in the first place?
[22:28:43] *** Joins: thmprover (~user@047-042-215-236.res.spectrum.com)
[22:30:16] <phantomics> semz: APL allows you to take the GCD/LCM of floats, and it's used in some functions like this one: http://dfns.dyalog.com/c_cfract.htm
[22:30:40] <phantomics> I'm implementing an APL compiler so working to find the best way to do this
[22:32:54] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[22:37:19] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 268 seconds)
[22:37:47] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[22:41:25] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:46:34] *** Joins: tyson2 (~user@cpe3497f6b5e860-cmbc4dfbbe6670.sdns.net.rogers.com)
[22:47:59] <semz> phantomics: There's a general notion of GCD that can be specialized to rationals, but it's only unique up to units and therefore trivial for ℚ because every non-zero element of ℚ is a unit (the units of ℤ are 1 and -1, so you'd get uniqueness up to sign there). From what I can tell, APL seems to refer to something very specific from doi:10.1145/800117.803810 ("A Notation for the GCD and LCM Functions", McDonnell) when it talks about the GCD of rationals.
[22:48:36] <Alfr> phantomics, maybe don't use rational_ize_? Instead use rational, it returns a rational that's equal to the value the float represents.
[22:49:12] <semz> APL Code will probably rely on the intricacies of this (non-standard as far as math goes afaik) definition.
[22:51:25] <semz> multiplication by units*, sorry
[22:54:43] <phantomics> In ABCL (rational -2.3) and (rationalize -2.3) give the same wacky result
[22:55:28] <phantomics> Interesting, thanks semz
[22:55:37] <Guest74> clhs says rational is implementation dependent.
[22:56:01] <Guest74> interesting difference between the two, didn't know that.
[22:59:04] <semz> It must be implementation-dependent because the floating-point formats are.
[23:00:12] <phantomics> Yeah, there's some weirdness in ABCL's floats
[23:00:45] <semz> I'm surprised that rationalize isn't required to return the simplest rational though. I guess many implementations just happen to do that and ABCL is not one of them.
[23:01:45] <semz> Or _a_ simplest rational, since the formats are implementation-defined and all.
[23:04:04] <phantomics> Must be some kind of oversight, I'd think Java's floats would be fairly robust
[23:04:16] <Guest74> how do you clear everything in the slime repl and hopefully not clear the history?
[23:04:40] <Catie> Guest74: You kill the repl buffer, then run slime-repl to get a new one
[23:04:43] <_death> C-c M-o?
[23:05:04] <Guest74> thanks death:
[23:05:39] <phantomics> C-x C-k to kill the buffer
[23:05:49] <Guest74> i hate having to try to find the start of some long output.
[23:06:23] <Guest74> wouldn't killing the buffer kill the repl and the history?
[23:07:23] <Catie> Your SLIME history is saved in a file, I don't think you get rid of your history unless you delete it
[23:07:39] <phantomics> The history stays
[23:08:04] <Guest74> lol, I should know that since I use it all the time after restarting the lisp.
[23:09:22] <Alfr> phantomics, what's that wacky result you get? -9646899/4194304
[23:09:53] <phantomics> same: -9646899/4194304
[23:10:41] <_death> you can borrow the code from say sbcl and submit to abcl
[23:13:37] <Alfr> phantomics, I think that one is fine. Remember that binary floats are of the form (-1)^sign*2^exponent*sum-of-powers-of-two, and I suspect there's no exact representation for -2.3.
[23:14:17] <_death> I'm assuming we're talking about rationalize, which is supposed to give a more "human friendly" approximation
[23:15:11] <phantomics> Unfortunately it causes a problem here in ABCL: (april-f "{⌊⎕CT+⍵ 1÷1∨⍵} ¯2.3") => #(-2589569785738035 1125899906842624)
[23:15:38] <phantomics> In other impls the result is #(-23 10)
[23:16:50] <phantomics> _death: I would think their (rationalize) is implemented in Java
[23:16:55] <Alfr> phantomics, I see.
[23:17:17] <_death> phantomics: you can also borrow it for your own code, so that your results will be portable across implementations
[23:18:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[23:18:23] *** Joins: VincentV` (~user@212.241.28.158)
[23:18:52] <Alfr> phantomics, problem is that I don't think that's bug in abcl. As the standard only guarantees (float (rationalize x) x) ==  x, and the part pertaining to rationalize "only to the precision of the floating-point representation" doesn't prescribe how to choose the rational.
[23:20:17] *** Quits: VincentVega (~user@212.241.28.158) (Ping timeout: 256 seconds)
[23:23:02] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[23:28:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[23:28:43] <jackdaniel> the fact that floats are not rational tells it all.. them irrational numbers
[23:29:04] <phantomics> Alfr: I see, I'm looking at importing SBCL's implementation but it relies on a bunch of different functions
[23:29:55] *** Quits: vats (~vats@103.158.91.90) (Ping timeout: 256 seconds)
[23:31:51] <phantomics> jackdaniel I've been getting segfaults with ECL just loading my quicklisp setup file, does it use an extremely small heap by default?
[23:35:55] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[23:36:09] *** Quits: amb007 (~a_bakic@77.145.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[23:37:09] <jackdaniel> no, I don't think so. also when heap is exhausted ecl should signal a condition (it has specially reserved space for that)
[23:37:19] <jackdaniel> so you are hitting probably some other issue
[23:37:26] <jackdaniel> if you narrow it down please let me know
[23:38:36] <phantomics> Hmm ok, I just built it from source
[23:39:00] <phantomics> Here's what happens;
[23:39:45] <phantomics> (load "~/quicklisp/setup.lisp") → Condition of type: STACK-OVERFLOW, BINDING-STACK overflow at size 10240. Stack can probably be resized.
[23:40:34] <phantomics> I enter :r1 to continue and expand the stack, then: ;;; Detected access to protected memory, also known as 'bus or segmentation fault'. Jumping to the outermost toplevel prompt
[23:40:35] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[23:41:00] <phantomics> This is repeated several times, then it crashes with a Segmentation fault
[23:41:01] <jackdaniel> stack is not a heap. as of why you can't expand it - perhaps an rlimit?
[23:42:24] <phantomics> If the rlimit is so low as to make loading QL impossible, I don't see why any other Lisp would work work on my system
[23:42:57] <phantomics> It it something that can be set specifically for ECL?
[23:42:59] <jackdaniel> what can I say - it works here
[23:43:43] <jackdaniel> you may set the stack size, but if it overflows at default values perhaps you have some tail call recurrency that ecl doesn't pick up?
[23:44:07] <jackdaniel> what ecl version do you use?
[23:44:10] <phantomics> Perhaps, I'm not loading anything of my own yet though, just QL so it's confusing
[23:44:24] <phantomics> 21.2.1
[23:44:31] <Catie> I've got a working ECL built from source, version 21.2.1
[23:44:58] *** Joins: amb007 (~a_bakic@80.196.204.77.rev.sfr.net)
[23:45:15] <phantomics> Must be something in my system, I've run ECL successfully in the past
[23:45:20] <phantomics> I'll try on another machine
[23:45:36] <jackdaniel> phantomics: try gdb to see what blows the stack
[23:46:24] *** Quits: VincentV` (~user@212.241.28.158) (Read error: Connection reset by peer)
[23:47:24] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[23:47:53] *** Quits: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:50:08] *** Joins: akoana (~ah@user/akoana)
[23:51:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[23:51:24] *** Quits: cage (~cage@dynamic-adsl-94-34-55-34.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:53:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:53:51] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:55:31] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
