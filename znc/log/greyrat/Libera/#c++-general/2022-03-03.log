[00:00:35] *** Quits: Guest7398 (~Guest@host28.190-137-37.telecom.net.ar) (Remote host closed the connection)
[00:00:43] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[00:01:00] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[00:01:03] *** Joins: kevr (~kevr@user/kevr)
[00:01:37] <rpav> most(/all?) overloads were "overloads" prior, e.g. `1 + 1` vs `1.0 + 1.0`
[00:03:59] <RandomReader> function call and comma might be unique, but yeah, I guess all the others already had type-specific behavior
[00:04:10] <RandomReader> aside from the brand new ones at least
[00:05:12] <PJBoy> operator& :/
[00:06:14] <PJBoy> I'm not sure why operator, was ever allowed to be overloaded
[00:06:45] <kalven> I'd like to know how one arrives at: this problem is best solved by overloading sizeof
[00:07:12] <rpav> well _sortof_, `(a,b)` differs by the type of `b` right ;)
[00:07:50] <rpav> but this assumes you consider operator, an operator at all, and not expression syntax
[00:08:21] <PJBoy> yeah it's weird that (a,b) returns b by default
[00:08:31] <PJBoy> I don't see the point
[00:08:41] <rpav> cuz it's operator, not operator.
[00:08:42] * rpav runs
[00:08:46] *** Quits: proller (~p@2a02:6b8:0:40c:d670:d4d4:112e:82b6) (Ping timeout: 260 seconds)
[00:08:54] <rpav> if only that had been a thing .. the fun we could nhave
[00:09:28] <PJBoy> it does seems like operator. should have been a thing
[00:09:29] <rpav> or even if operator-> didn't have to return a raw pointer
[00:09:37] <PJBoy> like you have operator-> and you have operator.*
[00:09:41] <PJBoy> so like
[00:09:51] <rpav> operator.* seems weirder than operator,
[00:09:52] <PJBoy> how is operator. missing that the mix
[00:10:21] <PJBoy> operator.* is the kind of thing reference_wrapper would provide is reference_wrapper was any good
[00:10:35] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:10:35] <PJBoy> s/is/if/
[00:10:41] <rpav> i don't know how you use it and googling it isn't very easy
[00:11:06] <PJBoy> obj .* ptr_to_member
[00:11:09] <rpav> yeah
[00:11:42] <rpav> stackoverflow post claiming .* can't be overloaded
[00:11:56] * rpav has never tried/considered
[00:12:40] <Alipha> I assume we have the for loop to blame for operator, For example, `for(int i = 0, j = n-1; i < n; i++, j--)
[00:12:43] <PJBoy> oh indeed
[00:12:51] <rpav> whoa maybe you can use ->* overloads for properties
[00:12:51] <PJBoy> I was mistaken about .* being overloadable
[00:13:15] <PJBoy> also yeah, it's weird that -> requires some pointer to be returned, but ->* doesn't require some pointer to member to be returned
[00:13:24] <Alipha> Or maybe macros
[00:13:38] <rpav> but ->* takes arbitrary value arguments?
[00:13:45] <PJBoy> yeah it's a binary operator
[00:14:17] <rpav> ob->*"foo"_p
[00:14:23] <rpav> fugly but possible perhaps
[00:14:40] <PJBoy> ok maybe not quite arbitrary
[00:14:41] <rpav> or maybe enum values
[00:15:12] <PJBoy> R& operator->*(D*, R B::*) where B is D or a base class of D
[00:17:06] <rpav> { S s; s->*42; }     struct S{}; void operator->*(S&, int i) { cout << i; }
[00:17:07] <geordi> 42
[00:17:32] <PJBoy> hm
[00:17:50] <PJBoy> this is new territory for me
[00:17:55] <rpav> but .. you have the problem where it has to return the same type and it can't be value-dependent
[00:18:24] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:7630:55e8:b663:9893)
[00:18:24] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:7630:55e8:b663:9893) (Changing host)
[00:18:24] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:19:04] <rpav> _but_, it could return a Property<S> where that holds a S::* and has a templated operator= or something?
[00:20:53] <rpav> nah cuz it'd still need virtualized to pass through the untemplated ->*
[00:21:49] <rpav> _or_ maybe you could actually pass it through as part of the property ref .. hrm
[00:26:13] <rpav> it compiles without crashing the compiler, which is a start!
[00:27:00] <Friithian> it compilers? ship it
[00:27:03] <Friithian> compiles*
[00:31:58] <ac_slater> anyone here decent at SWIG? I have a basic template not being exported and it's driving me nuts
[00:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:35:58] <rpav> holy shit it works heh
[00:36:05] <rpav> a bit fugly can possibly improve
[00:36:40] <rpav> not sure it's not a lot better than the alternative either
[00:37:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:38:57] <rpav> actually wait this doesn't even demonstrate the potential
[00:39:09] <LordKalma> !compiles
[00:39:10] <nolyc> It compiles?! SHIP IT!!
[00:39:26] <LordKalma> Swig ain't easy
[00:39:32] <Friithian> oh we have a factoid for it
[00:39:44] <LordKalma> But the docs are very good and thorough
[00:39:58] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:39:58] <LordKalma> The c++ explain template exporting quite nicely
[00:40:06] <ac_slater> LordKalma: yea.. they are good.
[00:40:36] <LordKalma> Swig has a few rough edges that annoy me
[00:42:09] <LordKalma> for example when you try to collapse (T*, size_t) into a single argument it picks up the docs/name of one and sometimes not the one you want
[00:42:27] <LordKalma> and you can't make more interesting and complicated argument wraps without writing a manual wrapper
[00:42:29] *** Joins: ibenn (~ibenn@2a02:8071:45af:1700:5519:93b:fe80:4c46)
[00:42:47] <ac_slater> exactly. I'm hitting those exact problems - which is funny
[00:43:08] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:43:31] <rpav> https://godbolt.org/z/dP85PWP13 .. C++ properties with ->*
[00:43:45] <LordKalma> I disabled automatic docstring generation because of that
[00:44:05] <LordKalma> It'd not generate what I wanted
[00:44:16] <LordKalma> But the whole project is held together by like one guy
[00:44:23] <LordKalma> So you really can't be hard on them
[00:44:29] <ac_slater> yea totally
[00:44:41] <LordKalma> Swig, if properly funded, would be amazing
[00:44:45] <ac_slater> there is no real support system outside of some random github issues
[00:45:02] *** Quits: magla (~gelignite@55d4a4ec.access.ecotel.net) (Quit: Stay safe!)
[00:45:47] <LordKalma> The mailing list is active given the size of the core community
[00:46:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[00:46:29] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[00:46:39] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Ping timeout: 250 seconds)
[00:46:47] <rpav> bah, https://github.com/spaceotter/unplusplus is a better approach
[00:47:40] <rpav> generate a C API from a C++ api, then wrap that
[00:48:48] <LordKalma> swig generates C code haha
[00:48:56] <LordKalma> and the wrapper :)
[00:49:11] <LordKalma> it's widely supported, even numpy ships swig typemaps
[00:49:28] *** Joins: ik (uid540109@id-540109.uxbridge.irccloud.com)
[00:49:54] <ac_slater> maybe LordKalma, you can help. https://paste.debian.net/plain/1232796
[00:50:50] <ac_slater> VERY small test. Cant get `template<typename T> using mat = std::vector<std::vector<T>>;` to be specialized for `double`. Seems to work for std::vector<double> alone as SWIG ships with support for std_vector.i
[00:51:53] <LordKalma> I never used templates with swig, my experience is small, but let's see
[00:52:45] <rpav> yeah but swig is terrible
[00:53:46] <ac_slater> LordKalma: following the doc, seems like template specialization is simple with the %template() directive. Seems to hate my simple template alias
[00:54:44] <LordKalma> `namespace std {` ? interesting
[00:54:56] <ac_slater> yea took that from the examples. Seems OK
[00:55:17] <ac_slater> doing without the namespace wrap works too
[00:56:06] <LordKalma> does it work with a typedef? (can you even template those?)
[00:56:12] <ac_slater> doing the vector %template() specialization outputs stuff to the wrapper, but doing my simple specialization outputs nothing to the wrapper.
[00:56:23] <ac_slater> LordKalma: maybe it doesn't like `using`... good point
[00:56:32] <LordKalma> btw, what version of swig do you have?
[00:56:36] <LordKalma> not some old ass version, I hope
[00:56:37] <ac_slater> latest 4.0.3
[00:56:48] <ac_slater> 4.0.2*
[00:57:43] <LordKalma> did you see this: http://www.swig.org/Doc4.0/SWIGDocumentation.html#SWIGPlus_template_scoping ?
[00:58:10] <ac_slater> yes
[00:58:15] <LordKalma> nevermind, you seem to be making a wellformed directive according to that
[00:59:43] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[01:02:36] *** Quits: Tokamak (~Tokamak@172.58.188.134) (Ping timeout: 240 seconds)
[01:03:11] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:03:14] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:03:29] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:03:57] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:04:43] *** Joins: Tokamak (~Tokamak@172.58.188.181)
[01:06:00] <LordKalma> ac_slater actually, it might be working weirdly
[01:06:29] <Soni> what would even cause this https://bpa.st/7KJA
[01:06:47] <LordKalma> ac_slater this line in the generated cc: ``static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t",
[01:06:47] <LordKalma> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|test::mat< double > *", 0, 0, (void*)0, 0};`
[01:07:10] <LordKalma> that |test::mat< double >  in the end...
[01:07:20] <ac_slater> good point!
[01:07:29] <ac_slater> I might be able to use %rename() in that case
[01:07:42] <ac_slater> thanks LordKalma
[01:07:44] <LordKalma> and it's using `test::mat *arg1 = 0 ;` in other cases
[01:07:51] <LordKalma> (wrapping your test function)
[01:08:05] <LordKalma> I think it perhaps is seeing there's just a single template specialization and just neverminding the name?
[01:08:06] <ac_slater> yea that's a typo, it should be test::mat<double>. In that case, it works
[01:08:13] <ac_slater> could be
[01:09:16] *** Quits: ibenn (~ibenn@2a02:8071:45af:1700:5519:93b:fe80:4c46) (Quit: Leaving)
[01:09:17] <LordKalma> I read in the docs something interestng
[01:09:24] <LordKalma> ctrl+f for "Compatibility Note: In earlier versions of SWIG, the %template directive introduced a new class name."
[01:09:26] <LordKalma> and read it
[01:10:00] <LordKalma> basically you cannot do `%template(vectori) vector<int>; %extend vectori {` but you can do `%template(vectori) vector<int>; %extend vector<int> {`
[01:10:07] <LordKalma> which I think goes in line with this
[01:10:14] <LordKalma> SWIG doesn't care for your %template names
[01:10:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:10:26] <LordKalma> (unless there are many, I guess?)
[01:12:40] <LordKalma> but indeed it's kinda weird it does `arg1 = reinterpret_cast< test::mat * >(argp1);` because tst::mat is a template?!
[01:14:00] <LordKalma> urgh, this test needs to be put into an actual build system (CMake which can FindPython, and FindSWIG) and be tested
[01:16:49] <LordKalma> Soni well, apparently you have max_align_t twice?
[01:16:53] <LordKalma> what's your build system?
[01:18:24] <Soni> LordKalma: cmake
[01:18:36] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[01:18:48] <Soni> this is still going better than b2, despite not having any idea how to proceed
[01:19:05] <rpav> Soni: what's the issue?
[01:19:07] <LordKalma> can you share your build code? is it public?
[01:19:45] <Soni> it's just libtorrent 2.0.5 with a small patch to CMakeLists.txt to disable mmap
[01:19:51] <LordKalma> building targeting wasm is a cross-compilation for all practical purposes, and you have to be *very* careful on how you write and use your build code
[01:19:56] <LordKalma> otherwise it goes to shit
[01:20:20] <rpav> Soni: you probably don't need to patch it, if it's a compiler flag or similar
[01:20:39] <LordKalma> ahahah rpav you're so optimist
[01:20:51] <LordKalma> do you think people write decent cmake when you can disable all the qestionable bits?
[01:20:53] <LordKalma> HAHAHA
[01:20:56] <LordKalma> :(
[01:21:28] <Soni> rpav: it's basically a few -DTORRENT_HAVE_MMAP=0 -DTORRENT_HAVE_MAP_VIEW_OF_FILE=0 flags but for some reason the cmake script doesn't support it (the boost script does but uh. yeah fuck boost...)
[01:21:32] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 240 seconds)
[01:22:13] <Soni> so it was a simple matter of porting that from the boost script to the cmake script
[01:22:17] <rpav> you can possibly target_compile_definitions(..) after the fact?
[01:22:29] <LordKalma> I wonder if the conan recipe of libtorrent builds nicely on wasm
[01:22:33] <LordKalma> https://github.com/conan-io/conan-center-index/tree/master/recipes/libtorrent/all/patches
[01:22:39] <LordKalma> clearly some crap was patched out
[01:23:30] <LordKalma> https://github.com/conan-io/conan-center-index/blob/master/recipes/libtorrent/all/conanfile.py
[01:24:56] <Soni> doesn't seem like it would
[01:25:34] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:25:49] <rpav> well i mean, in any case if it works it works, patched or not .. what's your "how to proceed" problem
[01:26:24] <LordKalma> how are you calling cmake, let's start with that
[01:26:29] <LordKalma> to build libtorrent
[01:26:50] <LordKalma> because you def should be using a toolchain file
[01:27:35] *** Quits: paul424 (~tom@ip-5-172-234-113.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:27:59] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:a5e0:1373:74cf:b4e8) (Ping timeout: 252 seconds)
[01:29:43] <kalven> emscripten comes with a cmake wrapper.. so you go "emcmake cmake ... " when generating files
[01:30:01] <Soni> just using emscripten's toolchain file CXXFLAGS='-Oz -s USE_BOOST_HEADERS=1 -fno-inline' LDFLAGS='-s PURE_WASI=1 -s USE_BOOST_HEADERS=1' emcmake cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=14 -G Ninja -S .. -B . -Dmmap-disk-io=off
[01:30:08] *** Quits: ik (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Updating details, brb)
[01:30:13] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:30:16] *** Joins: ik (uid540109@id-540109.uxbridge.irccloud.com)
[01:30:22] <Soni> (btw -Oz isn't being passed through correctly, -DCMAKE_BUILD_TYPE=Release is overriding it with -O3 which is unfortunate)
[01:31:29] <LordKalma> USE_BOOST_HEADERS is something I would expect to be handled by libtorrent's cmake
[01:31:45] <LordKalma> this all seems sus tbh
[01:31:59] <Soni> nope, that's just emscripten's way of loading emscripten boost
[01:32:02] <kalven> -s are special emscripten flags
[01:32:16] <LordKalma> ah interesting
[01:35:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:36:54] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[01:38:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:41:02] *** Joins: proller (~p@80.240.216.69)
[01:42:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:43:11] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:43:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:23] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:43:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:24] *** ChanServ sets mode: +v npaperbot
[01:50:32] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:52:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:52:25] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:53:40] *** Joins: badone (~badone@209.132.189.152)
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:55:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:88a7:1068:8c94:c172)
[01:55:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:88a7:1068:8c94:c172) (Changing host)
[01:55:07] *** Joins: skapata (~Skapata@user/skapata)
[01:55:48] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:58:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[02:01:48] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[02:04:51] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:07:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:09:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[02:12:13] *** Joins: peoliye (~peoliye@54-240-198-33.amazon.com)
[02:17:13] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:17:57] <nightstrike> if I have volatile struct S { uint32_t reg; } * s;  uint32_t temp = s->reg; int x = temp & X1 >> X2; int y = temp & Y1 >> Y2;   // Is gcc allowed to generate code that reads from s->reg twice (presumably eliminating the temp variable)? (note the volatile) I'm intending that volatile here is telling gcc that reading from that has side effects (in my case, it generates a potentially slow PIO read over the bus), and I would hope
[02:17:57] <nightstrike> that in the "abstract machine" concept, having that side effect occur twice isn't allowed
[02:18:51] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:23:08] *** Joins: xkuru (~xkuru@user/xkuru)
[02:23:58] *** Quits: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Quit: Leaving)
[02:24:55] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 256 seconds)
[02:25:52] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[02:27:37] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5329)))
[02:27:38] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[02:35:30] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:35:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:39:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[02:40:09] <ashafq> What is a decent command line parser library for C++?
[02:40:58] <Friithian> argparse
[02:42:25] <ashafq> Friithian: https://github.com/p-ranav/argparse this?
[02:42:40] <Friithian> yes
[02:47:24] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[02:50:58] *** Joins: markong (~kvirc@213.146.188.203)
[02:51:20] <nightstrike> I use glibc's argp
[02:52:08] <ashafq> That looks like getopt_long
[02:52:47] <nightstrike> so... any thoughts on my volatile struct?
[02:53:29] *** Joins: pulse (~pulse@user/pulse)
[02:53:52] <ashafq> nightstrike: anything with volatile is like saying "do not optimize, I know what I am doing"
[02:54:26] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 260 seconds)
[02:54:58] <ashafq> so, I think it will only read that volatile once in temp, but GCC is allowed to optimize how temp is used.
[02:55:25] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[02:56:33] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:56:50] <nightstrike> Strictly reading the definiton of volatile, it doesn't say do not optimize, it says that the compiler has to take side effects into account when removing reads
[02:56:59] <nightstrike> it doesn't say that it has to take them into account when adding reads
[02:57:37] <nightstrike> "within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is sequenced-before or sequenced-after the volatile access"
[02:57:59] <ashafq> well in your case, the volatile is only read once (when you assign to temp)
[02:58:00] <nightstrike> I guess I should ask a gcc person
[02:58:09] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[02:58:10] <nightstrike> in theory
[02:58:20] <nightstrike> but in practice, it appers to be accessing the volatile twice
[02:58:28] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[02:58:29] <ashafq> well you can always look at the assembly
[02:58:37] <nightstrike> I can look at it, but I can't understand it
[02:59:06] <ashafq> reading assembly (not necessarily writing it) may be a good skill for C++
[02:59:08] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[02:59:56] <nightstrike> Can you decipher this? https://www.irccloud.com/pastebin/nlW8jjq1/
[03:01:04] <ashafq> Yes, but what is your question?
[03:01:33] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[03:02:17] *** AbleBacon_ is now known as AbleBacon
[03:03:35] <nightstrike> is it reading from lp_781->ADC_FifoCSR twice?
[03:04:41] <ashafq> This is the load:    movl    12336(%r12), %ebx       # lp_781->ADC_FifoCSR, _784
[03:04:57] <ashafq> In line 19 of your snippet
[03:05:06] <ashafq> and the store happens on line 44
[03:05:30] <ashafq> Sorry there are two stores
[03:05:43] <ashafq> Line 40 and line 44
[03:05:58] <nightstrike> I can show the code that generates this... well, technically I don't think I can, but I'll delete the pastebin
[03:06:13] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:06:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:06:26] *** Joins: ferdna (~ferdna@user/ferdna)
[03:07:08] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:07:25] <ashafq> Well, you're reading once and storing twice according to the assembly snippet
[03:07:26] <nightstrike> https://www.irccloud.com/pastebin/r781a6SG/
[03:07:55] <ashafq> yep, it matches the assembly
[03:08:08] <ashafq> You're reading once and storing twice
[03:08:52] <nightstrike> ok, well then I can't explain the timing anomaly
[03:09:04] <nightstrike> a & b >> c shouldn't take 5 us
[03:09:22] <ashafq> What are the types of fifo_csr and those macros?
[03:09:26] <nightstrike> so I presume that the time is sunk by the PIO read across the bus to the volatile
[03:09:31] <ashafq> Are they signed or unsigned?
[03:09:35] <nightstrike> uint32_t
[03:09:41] <ashafq> the macros as well?
[03:09:51] <nightstrike> macros are undecorated literals, like "(29)"
[03:09:51] <ashafq> the MASK and SHIFT
[03:09:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:09:58] <nightstrike> let me verify that
[03:10:16] <nightstrike> yeah, what I said
[03:11:00] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[03:11:05] <Alipha> #asm or whatever the assembly channel here might also be helpful
[03:11:07] <ashafq> Hm, I smell an integer bitmask bug, but I could be wrong 😊
[03:11:23] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[03:11:30] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[03:14:11] <ashafq> I have no idea what CPU you're using so I don't know what's taking 1.2uS
[03:14:24] <nightstrike> Intel(R) Xeon(R) Gold 6256 CPU @ 3.60GHz
[03:14:40] <ashafq> pretty fast
[03:14:55] <ashafq> why are you using volatile??? firmware?
[03:15:05] <nightstrike> reading the pointer is a mapped read to an IO card, so it's a PIO read across the bus.  That's why it's 1.2us.  I'm fine with that time (well, annoyed at it, but it's not the root problem).  I'm bothered by the 10us spike.
[03:15:47] <nightstrike> yes, firmware.  volatile is required to read the device registers
[03:15:56] <nightstrike> and PIO reads suck
[03:16:01] <nightstrike> but they shouldn't suck that much
[03:16:05] *** Joins: pulse (~pulse@user/pulse)
[03:16:15] <ashafq> The if (OVERFLOW) branch will cause two stores with a volatile
[03:16:29] <nightstrike> that's fine, though.  I can prove I never hit it.
[03:16:40] <nightstrike> overflow occurs when samples is > 128k, and I'm at 2k
[03:16:50] *** Quits: pulse (~pulse@user/pulse) (Client Quit)
[03:17:05] <ashafq> just for lols... can you try "register int fifo_csr ="?
[03:17:11] *** Joins: pulse (~pulse@user/pulse)
[03:17:34] <nightstrike> I hate to sound old, because VME was legacy when I was in elementary school, but I miss working on legacy VME equipment where I could easily attach a bus analyzer
[03:18:03] <nightstrike> hah, wasn't register removed? :)
[03:19:48] <ashafq> oops
[03:20:48] <ashafq> The assembly checks out on how I'd probably optimize it
[03:21:23] <ashafq> Now, in intel arch, assembly does not determine speed.
[03:23:14] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[03:23:20] <ashafq> ok
[03:24:21] <nightstrike> this is a system that should be more highly deterministic than a typical server... bios, os, and process settings are all tuned for that
[03:24:49] <nightstrike> which is why I guessed (probably incorrectly based on your feedback and concurrence from people in #c) that the spike was due to a PIO read happening twice
[03:25:17] <ashafq> another just for lols: if (OVERFLOW) --> if (__builtin_expect(OVERFLOW, !!0)) { ... }
[03:25:43] <ashafq> Because looking at the assembly, it places the true condition before false
[03:25:45] <nightstrike> !!0?
[03:25:46] <nolyc> nightstrike: Error: "!0?" is not a valid command.
[03:25:59] <ashafq> oh sorry, C++ would be false
[03:26:07] <OnlineCop> Converts to boolean.
[03:26:12] <ashafq> !!0 --> how I write false in C
[03:26:12] <nolyc> ashafq: An error has occurred and has been logged. Please contact this bot's administrator for more information.
[03:26:14] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:26:25] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:27:20] <Soni> how would one go about debugging stuff like this? https://bpa.st/7KJA
[03:28:12] <OnlineCop> You declared your own struct for max_align_t ?
[03:30:19] <nightstrike> ashafq: ..................
[03:30:24] <nightstrike> wtf
[03:31:05] <ashafq> did that work?
[03:31:08] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:31:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 245 seconds)
[03:31:14] <Alipha> `!1` is shorter
[03:31:25] <Soni> OnlineCop: no
[03:31:28] <nightstrike> .............. I gotta confirm this
[03:31:29] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:31:33] <nightstrike> that's witchcraft
[03:32:40] <cbreak> nightstrike: nah, C just sucks.
[03:32:49] <ashafq> nightstrike: is it faster?
[03:32:50] <cbreak> C++ is much easier to read :)
[03:33:15] <nightstrike> It is, but I mean....  I'm gonna run the test out for a longer period.
[03:33:22] <ashafq> If it is, that will be $1000 😉
[03:33:26] <nightstrike> hahahaha
[03:34:15] <ashafq> It's because of pipeline, you had an unlikely branch in the main code path
[03:35:18] <nightstrike> I have a test that runs for 4 minutes, and there's another problem after 4 minutes that this delay was contributing towards... so I'm going to run it out there in both versions to compare
[03:36:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:36:42] <nightstrike> I read about expect often, and I was always told to not bother with it, because I'd probably guess wrong about likliness
[03:36:52] <nightstrike> in fact, I think that's in the docs
[03:37:02] *** Quits: peoliye (~peoliye@54-240-198-33.amazon.com) (Quit: Client closed)
[03:37:16] <nightstrike> but in this case, I mean, the error condition better be unlikelly, because if tehre's an overflow, you have to abort the whole system
[03:37:54] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:38:36] <OnlineCop> "abort the WHOLE system" sounds like computer is in danger of being hurled into a garbage bin.
[03:39:21] <nightstrike> it's a machine control system
[03:39:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[03:43:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:43:40] <nightstrike> ashafq: min: 0.000001296 avg: 0.000001426 max: 0.000001661
[03:44:31] <nightstrike> that was an impressive feat
[03:44:33] *** Quits: AmR (~AmREiSa@197.42.112.70) (Quit: Konversation terminated!)
[03:44:53] *** Quits: oscurochu (~oscurochu@2603:9000:c202:1034:b91b:aea:2691:8fb6) (Remote host closed the connection)
[03:45:00] *** Quits: p-i-_ (~Ohmu@183.89.25.222) (Remote host closed the connection)
[03:45:07] <nightstrike> hm....  strangely, I'm still getting a 5us spike on the second thread.....  but at least it's not 10us on both
[03:45:19] <nightstrike> max: 0.000004974 on thread 2
[03:45:28] *** Joins: pulse (~pulse@user/pulse)
[03:45:33] <nightstrike> (2 threads on separate cores talking to separate cards)
[03:45:45] *** Joins: p-i- (~Ohmu@183.89.25.222)
[03:46:12] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:46:55] <ashafq> 😊
[03:46:55] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:51:14] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[03:51:37] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[03:56:54] *** Quits: miklcct (~quassel@vps.miklcct.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:57:25] *** Joins: miklcct (~quassel@vps.miklcct.com)
[03:58:41] *** Joins: dextaa9 (~DV@user/dextaa)
[03:59:26] *** Joins: Inline__ (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de)
[03:59:29] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 250 seconds)
[03:59:29] *** dextaa9 is now known as dextaa
[03:59:53] *** Quits: Inline (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[04:04:19] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:06:17] *** Joins: raekye (~raekye@creatifcubed.com)
[04:07:49] *** Joins: sbrothy (~sbrothy@192038128240.mbb.telenor.dk)
[04:10:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[04:13:48] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[04:17:36] *** Joins: ravan (~ravan@user/ravan)
[04:21:00] *** Quits: raekye (~raekye@creatifcubed.com) (Remote host closed the connection)
[04:21:00] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:32:12] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[04:33:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:36:04] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[04:36:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:39:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:40:20] <leonardus> Was C++98 called C++98 at the time or was it called something else?
[04:42:46] <hnOsmium0001[m]> if I'm not mistaken it was also called "modern c++" back then?
[04:46:47] <Alipha> Probably just c++ or standard c++, since it was the first official standard
[04:49:03] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[04:49:17] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[04:50:14] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:7f3c:b8f6:7b13:a80d)
[04:51:59] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[04:59:24] <pulse> thoughts? https://bpa.st/FZ5Q
[05:00:04] <pulse> found it in some very old backups :p
[05:00:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[05:00:12] <OnlineCop> Needs more templates.
[05:00:23] <pulse> tru
[05:00:24] <OnlineCop> Oh wait, that's definitely pre-C++.
[05:00:31] <pulse> i think it's C :D
[05:01:03] <pulse> you could make a whole sub-language this way
[05:01:45] <OnlineCop> STR() is unused.
[05:07:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:10:36] <nightstrike> looks like a fortran or maybe ratfor person wrote that :)
[05:14:11] <sbrothy> whasnt it A, B, C, D? In that order? :)
[05:26:32] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Ping timeout: 240 seconds)
[05:30:36] *** Quits: sbrothy (~sbrothy@192038128240.mbb.telenor.dk) (Read error: Connection reset by peer)
[05:34:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:37:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:38:37] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[05:40:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:43:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:24] *** ChanServ sets mode: +v npaperbot
[05:45:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:51:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:cc2b:fb51:4740:6209) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:53:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:53:55] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[05:56:21] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:56:26] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:56:28] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:56:54] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a) (Ping timeout: 260 seconds)
[05:58:44] *** Praise- is now known as Praise
[05:59:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a)
[06:00:43] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e)
[06:00:51] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e) (Remote host closed the connection)
[06:17:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:19:45] *** Joins: Inline (~Inline@p200300cd470c380061a83d28f03bd1ae.dip0.t-ipconnect.de)
[06:22:12] *** Quits: Inline__ (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:23:40] *** Joins: CodePoint_ (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e)
[06:23:54] *** Quits: CodePoint_ (~CodePoint@2600:1700:3070:3790:d907:53e4:549e:c64e) (Remote host closed the connection)
[06:25:51] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[06:26:13] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[06:37:36] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:41:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:41:56] *** Joins: adeliktas8 (~adeliktas@i59F52FC5.versanet.de)
[06:43:18] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::11)
[06:43:48] *** Quits: adeliktas (~adeliktas@i59F4D9E7.versanet.de) (Ping timeout: 240 seconds)
[06:43:48] *** adeliktas8 is now known as adeliktas
[06:49:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:55:41] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::11) (Quit: CodePoint)
[06:57:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:58:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:03:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:04:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:08:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:12:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:18:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[07:18:58] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:24:05] <yolo> vector<string> vs; I want to do index-based operation(it's an matrix of chars), how can I preset its size M*N? vs.server(M); for(M)arr[i].reserve(N); segfaults. M*N are based on input arg so I can not do array<string,M> either
[07:24:23] <yolo> s/server/reserve/
[07:25:01] <yolo> it's really a matrix of chars but M*N size depends on arg passed
[07:26:19] <yolo> or maybe I just malloc/new `char matrix[M][N]` and forget containers
[07:26:43] <Friithian> malloc/new? this is c++ in the modern age, is it?
[07:26:46] <yolo> when c++ needs to deal with matrix it seems to me the old C-approach might be best?
[07:27:40] <nightstrike> yolo: what "matrix" features do you need?
[07:27:48] <yolo> well, yeah smart-pointer, here I'm seeking for efficieny with a well defined boundary, so smart pointers are actually 'slower', index-based operation is faster
[07:27:52] <nightstrike> composition might work, for instance
[07:28:10] <yolo> i need a 2D array of chars, but their size is passed by args, so no static allocation on the stack
[07:28:50] <yolo> i do use smart pointers elsewhere
[07:29:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:29:28] <yolo> std::array doe not allow me to do std::array<std::string,arg*100> for example
[07:29:39] <nightstrike> class M { std::vector<char> m; M(size_t x, size_t y) { m.resize(x*y); }  char at(size_t x, size_t y) { return m.at(x * X + y); }  ... etc
[07:30:06] <nightstrike> The above is horribly written, but I'm just trying to illustrate that you can wrap a vector in your own class and provide accessor methods that fit your needs
[07:30:40] <nightstrike> I think this is called Composition
[07:30:50] <nightstrike> or maybe it's a Decorator
[07:31:01] <nightstrike> I dunno....  Design Patterns is from... like... 1995
[07:31:09] <yolo> thanks, digesting
[07:31:11] <Friithian> it's not a decorator
[07:31:20] <nightstrike> whatever the heck it is, it's called something
[07:31:37] <Friithian> it's sure is, I haven't the foggiest either
[07:32:03] <johnny> i'd just call it a wrapper
[07:32:20] <johnny> it's not really configurable, so i wouldn't think about it in terms of composition
[07:32:26] <johnny> intent matters a fair amount here
[07:33:06] <johnny> now if you could pass another contant rather than that hardcoded vector, then one might think of it as composition, but you're still wrapping it
[07:33:18] <johnny> another container*
[07:33:28] <nightstrike> ok, wrapper...
[07:33:37] <nightstrike> but I think it solves the problem as stated
[07:34:00] <johnny> my thinking is colored by typescript and python when it comes to decorators..
[07:34:18] <johnny> it feems more you use it for cross cutting concerns
[07:34:26] <Friithian> I should remember how decorators work given I was supposed to learn it… last semester? year? idk
[07:34:42] <nightstrike> " object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, dynamically, without affecting the behavior of other objects from the same class." << I dunno, sounds in the ball park
[07:35:16] <yolo> { string s; s.reserve(10);s[1]='a';}
[07:35:17] <geordi> /usr/local/include/c++/12.0.1/bits/basic_string.h:1221: constexpr basic_string<_CharT, _Traits, _Alloc>::reference basic_string<_CharT, _Traits, _Alloc>::operator[](size_type) [with _CharT = char; _Traits = char_traits<char>; _Alloc = allocator<char>; reference = char&; size_type = long unsigned int]: Assertion '__pos <= size()' failed. [+ 1 discarded line]
[07:35:32] <johnny> too big
[07:35:39] <johnny> lol
[07:35:58] <yolo> {vector<int> v; v.reserve(10); v[0]=100;}
[07:35:59] <geordi> /usr/local/include/c++/12.0.1/debug/vector:442: [+ 10 discarded lines]
[07:36:15] <yolo> {vector<int> v; v.resize(10); v[0]=100;}
[07:36:16] <geordi>  
[07:36:28] <yolo> { string s; s.resize(10);s[1]='a';}
[07:36:29] <geordi>  
[07:36:42] <yolo> so, what's diff reverse vs resize
[07:37:11] <yolo> i have always been using reserve to avoid allocation cost, but, reserve does not really allocate anything, while resize does?
[07:37:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:37:29] <nightstrike> yolo:  https://www.irccloud.com/pastebin/7xpg2eyW/
[07:37:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:37:58] <nightstrike> There are many ways to improve that, returning references, const correctness, etc etc etc..
[07:38:04] <johnny> doesn't it say it in the documentation? i though it was pretty clear the difference
[07:38:17] <johnny> yolo, what in the cppreference for both resize() and reserve() don't you understand?
[07:38:19] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:38:55] <nightstrike> reserve allocates the memory but doesn't extend the internal representation to use the memory, so size() doesn't change
[07:38:57] <johnny> the only thing unclear to meat the time was that push_back still starts at the end, since the iterator doesn't point to the beginning anymore
[07:39:22] <nightstrike> resize changes size(), and also will stick valid objects in each element (which could potentially be resource intensive depending on the contained type)
[07:40:01] <johnny> the the change or not in size() was unappreciated to me when i first read it :(
[07:41:37] <nightstrike> I use reserve a lot in systems where resource allocations can only occur in very specific circumstances
[07:41:54] <nightstrike> and it has the benefit that I can still use push_back or whatever
[07:42:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:44:14] <yolo> i do read just never used resize(), as resize() is not good for push_back() but prefect for matrix here as I don't do push|pop just indexes.
[07:44:19] <nightstrike> I wonder, can you abuse operator[] on that matrix class to make m[3][3] work?
[07:44:21] <johnny> i had a terrible time with that when doing something on embedded where i couldn't see why it kept failing . i did discover it was because of size() tho.. and that's how you learn sometime :(
[07:45:09] <yolo> size() does not change anything, just read back the size info, resize() is doing allocation and probably initialization
[07:45:26] * yolo is writing a small program to verify
[07:45:45] <yolo> nightstrike: thanks, will try that, learned resize() tonight from your code
[07:46:13] <nightstrike> np. share and share alike :)  I was greatly helped in here earlier today
[07:48:42] <nightstrike> ah, hey, neat! >> Since C++23, operator[] can take more than one subscripts. For example, an operator[] of a 3D array class declared as T& operator[](std::size_t x, std::size_t y, std::size_t z); can directly access the elements.
[07:49:15] <nightstrike> you write it weird tho
[07:49:16] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[07:49:24] <nightstrike> m[3, 3] instead of m[3][3]
[07:53:54] <yolo> resize() is kind of realloc()
[07:57:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:06:48] *** Joins: p-i-_ (~Ohmu@183.89.25.222)
[08:07:39] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:09:57] *** Quits: p-i- (~Ohmu@183.89.25.222) (Ping timeout: 240 seconds)
[08:30:57] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:33:52] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[08:35:28] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[08:37:22] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 272 seconds)
[08:39:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:39:51] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:42:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:49:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:53:13] *** Joins: sss123next[m] (~sss123nex@2001:470:69fc:105::1:ceac)
[08:53:48] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[08:54:28] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:54:42] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:13:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:13:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:15:37] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:17:39] *** Joins: ferdna (~ferdna@user/ferdna)
[09:18:39] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[09:21:44] *** Joins: jsbach (~jsbach@2a01:c23:64c8:ff00:8062:461e:f6a0:9313)
[09:22:21] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:23:43] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[09:25:16] <ac_slater> LordKalma: thanks for the help earlier
[09:25:34] <ac_slater> I lost network for a bit. Very helpful!
[09:27:53] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[09:28:07] *** Joins: raekye (~raekye@creatifcubed.com)
[09:28:18] *** Joins: jkl (~jkl@user/jkl)
[09:37:13] <MaddHatter> you could do m[3][3] but you'd probably need the m's operator[] to return a proxy object with its own (different) operator[]
[09:43:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:24] *** ChanServ sets mode: +v npaperbot
[09:45:07] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a5e0:1373:74cf:b4e8)
[09:45:57] *** Quits: cncr04s (~cncr04s@afxr.net) (Ping timeout: 240 seconds)
[09:46:52] *** Joins: cncr04s (~cncr04s@afxr.net)
[09:57:50] *** Joins: radu2424078215 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[09:58:14] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[09:58:14] *** radu2424078215 is now known as radu242407821
[10:00:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[10:03:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 250 seconds)
[10:03:55] *** Joins: ravan_ (~ravan@42.201.198.151)
[10:03:55] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[10:03:55] *** Joins: ravan_ (~ravan@user/ravan)
[10:04:48] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:04:57] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[10:05:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:06:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a5e0:1373:74cf:b4e8) (Quit: Quit)
[10:06:40] *** Joins: |7| (~seachdamh@user/seachdamh)
[10:07:49] *** Joins: msimm (~msimm@p200300cd4701a600ccdd4792351c1b11.dip0.t-ipconnect.de)
[10:11:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:27:31] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[10:33:35] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:37:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:40:28] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:41:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:46:14] *** Quits: ville (~ville@user/ville) (Quit: ville)
[10:51:37] *** Joins: ville (~ville@user/ville)
[10:56:43] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:01:31] *** Quits: Cyp (~cyp@213.237.85.100) (Read error: Connection reset by peer)
[11:10:17] *** Quits: dld (~davidlowr@2601:197:600:1210:7c23:245c:3a8b:a0db) (Ping timeout: 240 seconds)
[11:12:33] *** Joins: dld (~davidlowr@73.61.9.48)
[11:15:54] *** Quits: ravan_ (~ravan@user/ravan) (Quit: Leaving)
[11:19:24] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[11:24:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:27:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ec7a:c710:284d:4802)
[11:35:37] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[11:36:42] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[11:37:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:41:23] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:41:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:42:23] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[11:43:40] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[11:44:10] *** Joins: gentooclimax (~gentoocli@2a02-8440-3141-a12f-e37b-616c-4757-cbab.rev.sfr.net)
[11:52:09] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:53:12] *** Joins: Cyp (~cyp@213.237.85.100)
[11:56:14] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[11:56:38] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:04:41] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:05:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[12:08:50] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[12:13:02] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[12:15:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:16:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[12:19:46] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:26:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:30:09] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Quit: You have been kicked for being idle)
[12:35:22] *** Joins: robod34 (Username@79.113.243.73)
[12:38:39] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:40:19] *** Joins: bobb_ (~bobb_@dslb-092-074-246-082.092.074.pools.vodafone-ip.de)
[12:42:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:42:17] *** Joins: AmR (~AmREiSa@197.42.112.70)
[12:42:41] *** gentooclimax is now known as climax
[12:47:32] *** Quits: bobb_ (~bobb_@dslb-092-074-246-082.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[12:51:17] *** Joins: Snyp (~Snyp@49.207.217.84)
[13:02:49] *** Joins: Raziel (~Raziel@user/raziel)
[13:02:51] *** Joins: ivii (~ivan@user/ivii)
[13:10:55] *** climax is now known as gentooclimax
[13:10:57] *** Joins: plastico (~plastico@neomutt/plastico)
[13:19:03] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:21:27] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 256 seconds)
[13:21:56] *** Joins: ivii (~ivan@user/ivii)
[13:22:27] *** gentooclimax is now known as climax
[13:22:46] <LordKalma> !rq
[13:22:47] <nolyc> LordKalma: <Raziel> PJBoy, and autotools is a clone army, but all the clones are of jar jar binks?
[13:23:07] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[13:23:09] <Raziel> [imperial march is heard in the distance]
[13:26:11] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[13:26:51] *** Quits: Snyp (~Snyp@49.207.217.84) (Quit: Textual IRC Client: www.textualapp.com)
[13:27:40] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:37:14] *** climax is now known as gentooclimax
[13:37:38] *** Quits: gentooclimax (~gentoocli@2a02-8440-3141-a12f-e37b-616c-4757-cbab.rev.sfr.net) (Quit: Konversation terminated!)
[13:38:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:42:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:43:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:25] *** ChanServ sets mode: +v npaperbot
[13:45:05] *** Joins: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net)
[13:47:44] *** Joins: gentooclimax (~gentoocli@173.15.23.93.rev.sfr.net)
[13:52:05] *** Quits: gentooclimax (~gentoocli@173.15.23.93.rev.sfr.net) (Client Quit)
[13:54:19] *** Joins: Burgundy (~NA@86.121.143.206)
[13:58:52] *** Quits: msimm (~msimm@p200300cd4701a600ccdd4792351c1b11.dip0.t-ipconnect.de) (Quit: Leaving)
[14:22:32] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[14:24:08] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[14:24:26] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[14:30:01] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (Remote host closed the connection)
[14:39:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:39:49] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:40:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:43:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[14:51:59] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[15:21:45] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:22:09] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[15:40:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:43:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:51:57] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[15:52:59] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:53:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:03:23] *** Joins: markong (~kvirc@213.146.188.203)
[16:07:10] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:17:18] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[16:26:12] *** Joins: pulse (~pulse@user/pulse)
[16:30:50] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:39:04] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[16:41:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:44:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:44:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:47:32] <LordKalma> the fact signed integers dont have a symmetric range annoys me more than it should
[16:47:42] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:47:57] <Friithian> do you ever use an int to the positive negative max?
[16:55:06] <LordKalma> the problem is like, I have here a scope that transmits the curve on 2 bytes signed integers
[16:55:44] <LordKalma> to scale it to the real voltage, you need to basically do curve/32768*real_scale
[16:55:58] <LordKalma> what annoys me is the /32768... /32768 or /32767? get what I mean?
[16:56:22] <LordKalma> if your signal would max out the scope, /32767 would give you a nice 1, on the normalization
[16:56:34] <Friithian> make a wrapper for int that makes it symmetric?
[16:56:44] <LordKalma> but if it the signal hits the bottom... get what I mean?
[16:56:48] <LordKalma> Friithian doesnt matter
[16:56:51] <LordKalma> you always have to decide
[16:56:59] <LordKalma> you always have to decide where to error
[16:57:07] <Friithian> make a custom datatype for this?
[16:57:18] <LordKalma> do I look like a scope manufacturer to you_
[16:57:22] <Friithian> …
[16:57:23] <Friithian> yes?
[16:57:48] <LordKalma> I know many APIs that do this
[16:57:57] <LordKalma> in fact.. everything I have with a ADC does this
[16:58:21] <LordKalma> antto you'll know this as well, for sure
[16:58:21] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[16:58:21] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[16:58:21] *** Joins: skapata (~Skapata@user/skapata)
[16:58:43] <antto> hm?
[16:58:52] <LordKalma> scaling ADCs to real values
[16:58:59] <LordKalma> when the data type is signed
[17:00:23] <antto> aww
[17:00:31] <antto> make sure you don't have OCD
[17:00:48] <Friithian> think it's too late for that :D
[17:01:04] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (*.net *.split)
[17:01:04] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (*.net *.split)
[17:01:04] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (*.net *.split)
[17:01:04] *** Quits: Cyp (~cyp@213.237.85.100) (*.net *.split)
[17:01:04] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (*.net *.split)
[17:01:04] *** Quits: jsbach (~jsbach@2a01:c23:64c8:ff00:8062:461e:f6a0:9313) (*.net *.split)
[17:01:04] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[17:01:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (*.net *.split)
[17:01:04] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[17:01:04] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (*.net *.split)
[17:01:04] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (*.net *.split)
[17:01:04] *** Quits: Tokamak (~Tokamak@172.58.188.181) (*.net *.split)
[17:01:04] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (*.net *.split)
[17:01:04] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[17:01:04] *** Quits: dasrael (~rabbit@user/dasrael) (*.net *.split)
[17:01:04] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (*.net *.split)
[17:01:04] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: MetaNova (~zero-one@znc/supporter/metanova) (*.net *.split)
[17:01:04] *** Quits: DrMax__ (~DrMax@132.215.96.30) (*.net *.split)
[17:01:04] *** Quits: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net) (*.net *.split)
[17:01:04] *** Quits: HvszrStykp (~X@81.171.62.82) (*.net *.split)
[17:01:04] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[17:01:04] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[17:01:04] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[17:01:04] *** Quits: xq (~xq@user/xq) (*.net *.split)
[17:01:04] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: zoraj_ (~zoraj@209.126.81.159) (*.net *.split)
[17:01:04] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[17:01:04] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[17:01:04] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[17:01:04] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[17:01:04] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[17:01:04] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[17:01:04] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[17:01:04] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[17:01:04] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[17:01:04] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[17:01:04] *** Quits: kaichiuchu (~mike@user/kaichiuchu) (*.net *.split)
[17:01:18] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[17:01:22] <oj> how is std::set supposed to work with a custom compare function?
[17:01:28] <LordKalma> its fine, just annoying
[17:01:45] <oj> it expects a type, not a function for the Compare function?
[17:01:52] <oj> does it have to be a functor?
[17:02:30] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[17:02:30] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:02:30] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:02:30] *** Joins: Cyp (~cyp@213.237.85.100)
[17:02:30] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[17:02:30] *** Joins: jsbach (~jsbach@2a01:c23:64c8:ff00:8062:461e:f6a0:9313)
[17:02:30] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[17:02:30] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:02:30] *** Joins: miklcct (~quassel@vps.miklcct.com)
[17:02:30] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[17:02:30] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:02:30] *** Joins: Tokamak (~Tokamak@172.58.188.181)
[17:02:30] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[17:02:30] *** Joins: dasrael (~rabbit@user/dasrael)
[17:02:30] *** Joins: tobs (~tobs@taboege.de)
[17:02:30] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[17:02:30] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[17:02:30] *** Joins: DrMax__ (~DrMax@132.215.96.30)
[17:02:30] *** Joins: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net)
[17:02:30] *** Joins: HvszrStykp (~X@81.171.62.82)
[17:02:30] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[17:02:30] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[17:02:30] *** Joins: notevil (~notevil@user/notevil)
[17:02:30] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[17:02:30] *** Joins: xq (~xq@user/xq)
[17:02:30] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[17:02:30] *** Joins: zoraj_ (~zoraj@209.126.81.159)
[17:02:30] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[17:02:30] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[17:02:30] *** Joins: m42e (~m42e@pb42.de)
[17:02:30] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[17:02:30] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[17:02:30] *** Joins: deepy (deepy@user/deepy)
[17:02:30] *** Joins: obiwahn (~heini@user/obiwahn)
[17:02:30] *** Joins: geordi (~geordi@tinodidriksen.com)
[17:02:30] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[17:02:30] *** Joins: ivan (~ivan@user/ivan)
[17:02:30] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[17:02:30] *** erbium.libera.chat sets mode: +v geordi
[17:02:35] <LordKalma> it can be a lambda/function pointer, probably?
[17:02:50] <PJBoy> yeah
[17:03:16] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Max SendQ exceeded)
[17:03:16] *** Quits: deepy (deepy@user/deepy) (Max SendQ exceeded)
[17:03:16] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Max SendQ exceeded)
[17:03:21] <oj> oh, so the function typedef is the template param, and the function the actual param
[17:03:22] <oj> got it
[17:03:35] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:03:38] <Friithian> https://stackoverflow.com/questions/2620862/using-custom-stdset-comparator
[17:03:43] <Friithian> no idea how good or bad that is
[17:03:45] <LordKalma> just use it and let it deduce the template
[17:04:07] *** Joins: deepy (deepy@user/deepy)
[17:04:08] <LordKalma> ah you need to explicitely give it beforehand
[17:04:10] <LordKalma> nevermnind
[17:04:23] <LordKalma> that std::set<int, decltype(cmp)> s; sounds legit
[17:04:52] <oj> can't deduce it
[17:05:18] <oj> it has to be std::set<int, decltype(cmp)*> s(cmp);
[17:05:20] <PJBoy> you can deduce it if you try hard enough
[17:05:27] <PJBoy> { set s({1, 2, 3}, comp); } bool comp(int, int) { return {}; }
[17:05:28] <geordi>  
[17:05:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:06:14] <LordKalma> that didnt look much effort
[17:06:25] <LordKalma> why do you lie to me?
[17:06:36] <PJBoy> I'm confused why they list the C++20 solution as different
[17:06:41] <oj> I get "no matching constructor" for the set when I try that
[17:06:56] <Friithian> ``Before C++20 we need to pass lambda as argument to set constructor'' *shrug*
[17:06:57] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[17:07:13] <LordKalma> { set s({1, 2, 3}, &comp); } bool comp(int, int) { return {}; }
[17:07:14] <geordi>  
[17:07:31] <LordKalma> oj what about excplicitely requesting the function pointer like that?
[17:07:33] <oj> oh, it needs an empty first param
[17:07:34] <PJBoy> geordi --2011 { set<int, decltype(&comp)> s; } bool comp(int, int) { return {}; }
[17:07:35] <geordi>  
[17:07:41] <PJBoy> I disagree
[17:07:46] <oj> uh no wait
[17:07:59] <PJBoy> nothing about std::set changed in C++20 as far as I can tell
[17:07:59] <LordKalma> !std::set
[17:08:00] <nolyc> http://en.cppreference.com/w/cpp/container/set
[17:08:14] <PJBoy> except the addition of contains() and the operator<=> stuff
[17:08:16] <Friithian> PJBoy: yell at the guy in the discussion!
[17:08:17] <PJBoy> and erase
[17:08:19] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[17:08:20] <LordKalma> the latest constructor change is in c++14
[17:08:24] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:08:42] <PJBoy> Friithian, but that would slightly validate looking at stack overflow for answers
[17:08:47] <Friithian> lol
[17:09:01] <LordKalma> oj there is no constructor taking just the comp function
[17:09:09] <LordKalma> https://en.cppreference.com/w/cpp/container/set/set
[17:09:29] <PJBoy> there's the first ctor
[17:09:45] <PJBoy> { set<int, decltype(&comp)> s(comp); } bool comp(int, int) { return {}; }
[17:09:46] <geordi>  
[17:10:06] <LordKalma> wow, I missed it haha
[17:10:09] <LordKalma> I was looking at 5
[17:10:13] <oj> yeah idk why, but if I explicitly give the function type in the template param it works
[17:10:16] <oj> but it can't deduce it
[17:10:30] <oj>  no matching member function for call to '_M_insert_range_unique'
[17:11:03] <LordKalma> I guess 1, 2, and 5 cant be distinguished wihout explicitely telling the template param
[17:11:18] <oj> it's trying to use std::less
[17:11:18] <LordKalma> when using a single argument I mean
[17:11:34] <LordKalma> that means its using constructor 5
[17:13:00] <PJBoy> wow that first example I did gives a crazy error in C++17
[17:13:07] <PJBoy> geordi --2017 { set s({1, 2, 3}, comp); } bool comp(int, int) { return {}; }
[17:13:07] <geordi> error: 'const _Tp* __new_allocator<_Tp>::address(const_reference) const [with _Tp = bool(int, int); const_pointer = bool (*)(int, int); const_reference = bool (&)(int, int)]' cannot be overloaded with '_Tp* __new_allocator<_Tp>::address(reference) const [with _Tp = bool(int, int); pointer = bool (*)(int, int); reference = bool (&)(int, int)]'
[17:13:17] <oj> it tries to use (1), but it says "no known conversion from <custom compare function type> to std::less<Type>
[17:13:46] <PJBoy> you're probably doing something crazy like `set<int> s(comp);`
[17:13:58] <oj> yes
[17:14:35] <PJBoy> so if you specify template arguments, then you don't get deduction anymore
[17:14:40] <oj> is that crazy to expect that it could deduce the function signature from that?
[17:14:51] <oj> oh, ok
[17:15:09] <LordKalma> hahah you expect C++ to have sane, sensible, expecteable behaviour?
[17:15:12] <PJBoy> so `set(args...)` can deduce the set's template arguments, but not otherwise
[17:15:12] <LordKalma> you must be new here
[17:15:12] <oj> right, it just uses the default params
[17:15:28] <oj> makes sense now
[17:16:21] <oj> so I either give it a container in the initializer to deduce the type from, or I give the compare signature as a template param
[17:16:34] <oj> or I make the compare func conform to std::less
[17:16:57] <oj> (whatever that last option even means)
[17:17:49] <PJBoy> yeah that's not an option
[17:18:07] <LordKalma> decltype(x) never hurt anyone
[17:18:09] <PJBoy> if you want a custom comparator, you need that template argument specified
[17:18:42] <PJBoy> either by deduction using one of the ctors that allows that, or as an explicit template argument
[17:19:01] <oj> got it, thx
[17:19:38] <PJBoy> I have no idea what that C++17 error message is about
[17:19:57] <PJBoy> might be a gcc bug?
[17:20:11] <Friithian> does the bot do clang?
[17:20:15] <PJBoy> nope
[17:20:22] <Friithian> darn
[17:24:37] *** Quits: p-i-_ (~Ohmu@183.89.25.222) (Read error: Connection reset by peer)
[17:25:24] *** Joins: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[17:26:21] <PJBoy> man
[17:26:36] <Friithian> and the woman, the woman and the man
[17:26:45] <PJBoy> someone committed a change this year that includes the files "cmutex.h" and "CMutex.h"
[17:26:58] <PJBoy> in the same directory
[17:27:09] <PJBoy> the former is used for linux and the latter for Windows
[17:27:16] <Friithian> oh no
[17:27:19] <PJBoy> like holy shit
[17:27:29] <PJBoy> windows can't even check out both those files
[17:27:38] <Friithian> what would happen if you downloaded that on a non-case-sensitive filesystem?
[17:27:39] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:27:42] <PJBoy> svn seems to prefer checking out the cmutex.h one
[17:29:18] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d9b:5b3e:4e6b:74da)
[17:30:10] <Friithian> like, are ifdefs that hard?
[17:30:30] <LordKalma> who the fuck did that?
[17:35:04] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[17:38:41] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[17:39:44] *** Joins: ivii (~ivan@user/ivii)
[17:41:17] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 240 seconds)
[17:42:01] <PJBoy> ikr
[17:42:11] <PJBoy> I don't even think it's intentional
[17:42:26] <PJBoy> I suspect they converted Windows code to linux code and forgot to svn remove that file
[17:43:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[17:43:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:27] *** ChanServ sets mode: +v npaperbot
[17:45:58] <urdh> i was going to shit on SVN but I can't honestly say I know how Git would behave in that scenario
[17:46:57] <Friithian> according to https://www.hanselman.com/blog/git-is-casesensitive-and-your-filesystem-may-not-be-weird-folder-merging-on-windows not well
[17:47:14] <Friithian> although that is just for folders
[17:48:05] <PJBoy> I mean there's nothing SVN can do
[17:48:29] <PJBoy> it works just fine on linux and tells me it can't check out both files on windows
[17:48:39] <Friithian> the most it could do is show a warning, but this is still a user issue
[17:48:46] <PJBoy> yeah
[17:49:41] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[17:52:19] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[17:52:38] *** Joins: undephin3d (~undephin3@158.181.83.107)
[17:54:31] *** Joins: artok (~azo@193.210.8.114)
[17:54:37] *** Joins: proller (~p@2001:6d0:8000:105:2f5b:3e33:40c1:6a44)
[17:59:43] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[18:02:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:06:38] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[18:07:03] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[18:07:20] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:09:08] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:12:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[18:19:24] *** Quits: proller (~p@2001:6d0:8000:105:2f5b:3e33:40c1:6a44) (Ping timeout: 240 seconds)
[18:19:47] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[18:22:14] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:24:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[18:25:35] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:25:49] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:32:04] *** Quits: artok (~azo@193.210.8.114) (Ping timeout: 272 seconds)
[18:36:52] <rpav> i wonder how ntfs handles utf-8
[18:37:13] <Friithian> knowing ntfs, badly
[18:37:46] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 272 seconds)
[18:38:51] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:39:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:41:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:41:37] *** Joins: pulse (~pulse@user/pulse)
[18:42:34] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:44:27] <LordKalma> https://i.gyazo.com/c03523c11ff7401071a0c121a3be4350.png
[18:44:28] <LordKalma> just fine
[18:44:58] <furrymcgee> obcaseinsensitive?
[18:45:11] <Friithian> huh, surprising
[18:47:13] <Friithian> just don't have any / ? < > \ : * | " a
[18:47:50] <furrymcgee> try cygwin on windows, https://cygwin.com/cygwin-ug-net/using-specialnames.html#pathnames-casesensitive
[18:48:32] <LordKalma> cygwin barely hold together, let alone handling funny filenames
[18:49:12] <furrymcgee> its microsoft thats funny
[18:49:20] <LordKalma> cygwin is a big dumpsterfire
[18:49:40] <furrymcgee> join free software
[18:49:48] <Friithian> heck yeah dude
[18:50:04] <LordKalma> not sre what youre trying to preach me
[18:50:22] <OnlineCop> They're advocating WSL, that's what.
[18:50:37] <OnlineCop> Or piracy. Something like that.
[18:51:26] <furrymcgee> ntfs is in linux kernel btw
[18:51:46] <LordKalma> any software is open source software if you Ghidra it enough
[18:52:02] <Friithian> needs more gplv3
[18:52:23] <LordKalma> the fact every simple driver for anything must be inside the kernel is insane, but I already ranted about that too many times
[18:52:50] <Friithian> compile it yourself with support for what you want, then suffer when it turns out you need support for something you didn't enable
[18:53:32] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[18:53:35] <LordKalma> my main problem with it is that the fact youre expected to have everything in the kernel results in a couple bad situations for developers
[18:54:05] <LordKalma> either vendors have to upstream to the kernel, OR, very often, linux kernel devs end up supporting random crap on their backs
[18:54:27] <Friithian> you can use dkim
[18:54:31] <Friithian> wait no dkms
[18:54:43] <LordKalma> and thats like... why are linux kernel devs wasting time supporting china prolific clones for usb serial
[18:54:51] <LordKalma> *why* is that on the kernel
[18:55:01] <Friithian> email linus idk
[18:55:13] <LordKalma> honestly,  it just creates work for themselves, all in the sake of radical freedom
[18:55:15] <LordKalma> but oh well
[18:55:40] <antto> LordKalma, what do you suggest for usb serial then?
[18:56:16] <LordKalma> its just an example. I just dont agree with this huge monolith model, where you have to keep everything upstream
[18:56:30] <LordKalma> and thus making work for core kernel maintainers that they shouldn't have
[18:56:37] <LordKalma> they should be worried about more interesting things
[18:56:50] <Friithian> but are those drivers actually changed at all?
[18:57:17] <LordKalma> they are probably mostly a write once situation, but still
[18:57:26] <LordKalma> and I just used that as an example
[18:57:58] <Friithian> well, what's the real alternative? have people download random drivers from some shady site? force distro maintainers to deal with it?
[18:58:07] * antto hardcodes LordKalma into the kernel
[18:58:13] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:58:32] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[18:58:51] <LordKalma> shady website should be the manufacturers website, but I get what you mean. yeah, I guess the alternative would just be shifting to package maintainers, idk
[18:59:16] <LordKalma> but the kernel would need proper APIs to jailbreak from the monolith anyway, and thats not happening anytime soon
[18:59:21] <LordKalma> cough nvidia cough
[18:59:33] <antto> who even uses crapvidia
[18:59:38] * antto hides
[18:59:43] <Friithian> like, with virtualbox using dkim to do virtualization drivers that's fine
[18:59:45] <Friithian> dkms, ffs
[18:59:47] <Friithian> novideo
[18:59:55] <Friithian> I've been dealing with email too much…
[19:00:10] <LordKalma> just use webmin and let it configure it for you :)
[19:00:25] <Friithian> never! I manually configured postfix, dovecot, and mariadb!
[19:00:29] <LordKalma> webmin is the stuff, love it to admin my vps
[19:00:41] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:00:43] *** Joins: AmR| (~AmREiSa@156.199.197.9)
[19:00:51] <LordKalma> I tried manually configuring postfix and dovecot... twice... my VPS provided blocked my VPS both times
[19:00:52] <Friithian> although I do need to setup postfixadmin one day, just to learn
[19:00:55] <LordKalma> so yeah... no
[19:01:06] <Friithian> my provider provides tutorials for how to do it :P
[19:01:31] <LordKalma> webmin, just click on "enable dkim", automatic integration with DNS records, everything, so good
[19:01:35] *** Quits: AmR (~AmREiSa@197.42.112.70) (Ping timeout: 268 seconds)
[19:01:52] <LordKalma> let's encprypt wildcard certificates, need editing DNS records, all auto
[19:01:55] <LordKalma> I really like it.
[19:02:18] <LordKalma> webmin + portainer when I need to check things on my docker containers, and I have a pretty good server setup I am very happy with
[19:02:39] <LordKalma> I have like 15 docker containers running, with like 5 or 6 things under reverse proxies
[19:02:41] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[19:06:00] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[19:06:19] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[19:07:24] <Friithian> bah, docker
[19:07:28] <Friithian> real men use microK8s :P
[19:09:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:10:25] <rpav> there's no reason to std::forward if you say _always_ want `const Ts&...`
[19:10:31] <rpav> right
[19:13:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:15:18] *** Joins: ravan (~ravan@user/ravan)
[19:16:45] <PJBoy> right
[19:20:05] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:22:13] <udet> TinoDidriksen, at least gcc build does not complain when libs are not present
[19:23:12] <rpav> i wish you could call default constructors in their non-default counterparts
[19:23:31] <rpav> e.g. S(S&& v) : default(v) { .. }
[19:23:50] <rpav> "move all the things normally then let me fiddle with it"
[19:24:23] <udet> rpav, ctor template?
[19:24:45] <rpav> udet: i don't think that helps?
[19:25:01] <rpav> like, you can't both implement and default a ctor
[19:25:33] <udet> ah, ok I got it the wrong way
[19:27:06] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:28:06] *** Quits: jbalint (~jbalint@071-090-119-177.res.spectrum.com) (Read error: Connection reset by peer)
[19:28:36] <udet> the question might be if thats architecturally correct. so you want to move it 1:1. and then you want to do what? would it probably be more correct to do the "what" more explicit?
[19:29:12] <udet> so would the interface be what one would expect?
[19:29:33] <rpav> i want to not have to manually type moves for all the data members which would normally happen automatically
[19:30:15] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[19:30:50] *** Joins: k8yun (~k8yun@user/k8yun)
[19:30:59] <rpav> and also be able to override things i want to handle, which would mean slightly more smarts on the compiler's part .. i.e., `S(S&&) : default(), foo(..), bar(..) {}` would generate a default-except-foo/bar
[19:31:36] <yolo> { auto s = "abc"; auto s1="abc"s; assert(s == s1);}
[19:31:36] <geordi>  
[19:32:05] <yolo> though s is const char* while s1 is std::string, why do they equal
[19:32:12] <yolo> s/though/thought/
[19:32:49] <udet> yolo, what operator== would your assert call and does it implicit conversion?
[19:34:35] <udet> since std::string(char*) is an ctor of std::string I assume so
[19:34:51] <yolo> must be implicit conversion
[19:35:17] <yolo> google led me to microsoft c++ doc site quite a bit these days, now i found MS c++ reference site is actually pretty decent
[19:35:51] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:36:25] <yolo> was playing with unicode a bit, c++ should use u for utf8(as this is _the_ popular one these days), and use u16 and u32 for others, now the most popular utf-8 got a u8, ugly, plus reminds me of uint_8
[19:36:39] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:36:51] <Friithian> utf-64 when
[19:37:30] <yolo> u for utf-16, U for utf-32, u8 for utf-8?? should be u for utf-8 at least
[19:38:34] *** Quits: mitch0 (~mitch@178-164-190-49.pool.digikabel.hu) (Ping timeout: 272 seconds)
[19:39:12] *** Quits: baltazar (~baltazar@178-164-190-49.pool.digikabel.hu) (Ping timeout: 272 seconds)
[19:39:54] <yolo> hope to write a blog after one-year-c++-usage: the 20% c++ features you need for 80% of the work(e.g. c++ 101), before you got lost on those advanced and seldomly used features as a mediocre programmer.
[19:40:09] *** Joins: mitch0 (~mitch@176-241-40-35.pool.digikabel.hu)
[19:40:21] *** Joins: baltazar (~baltazar@176-241-40-35.pool.digikabel.hu)
[19:43:07] <rpav> let's all switch to gtf-16
[19:43:22] <Friithian> ascii only
[19:43:24] <Friithian> not even extended
[19:43:36] <rpav> every codepoint is just a single column of 16 pixels according to the 16 bits given .. you can make whatever characters you want!@#
[19:46:28] <udet> hmm... would something like template<typename C> requires(std::is_same_v<C, std::string>) bool cmp(const C, const C); allow implicit conversion?
[19:46:48] <udet> from char* to std::string
[19:47:36] <udet> and if not, or also if yes... is there a better way to forbid implicit conversion for a parameter?
[19:50:50] *** Joins: magla (~gelignite@d53619a1.access.ecotel.net)
[19:52:56] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:56:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:58:40] *** Joins: gehn (~gehn@user/gehn)
[20:01:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:03:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:08:59] *** AmR| is now known as AmR
[20:10:34] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:11:11] <rpav> _can_ you forbid implicit conversion
[20:11:38] <rpav> though i think i've done it with pre-20 templates but it's been a bit
[20:11:43] <imMute> rpav: make the conversion operator/ctor explicit?   or do you mean on arbitrary types?
[20:12:14] <rpav> imMute: no as udet asked above; make a function that takes two C and require they not be implicitly converted-to, even if implicit conversion is available
[20:12:17] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Read error: Connection reset by peer)
[20:12:30] <imMute> oh, I missed that.
[20:14:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:14:28] <rpav> i feel like this would require the template "know about" the conversion happening, which when i think about it seems weird
[20:17:44] *** Joins: xkuru (~xkuru@user/xkuru)
[20:24:02] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[20:30:17] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 240 seconds)
[20:33:29] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[20:34:21] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th)
[20:37:30] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[20:38:01] *** Quits: p-i- (~Ohmu@mx-ll-183.89.25-222.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[20:38:28] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[20:40:44] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:43:38] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d9b:5b3e:4e6b:74da) (Quit: Konversation terminated!)
[20:44:38] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[20:46:54] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[20:47:28] <udet> rpav, https://godbolt.org/z/Go1ssqPGo << this assumption is proking. requires matches to passed type, not to possible conversions. espectially since the template does not know that a string should be targeted
[20:48:17] <udet> so it doe not need to know about conversioning is happening because it does not know that conversion is possible
[20:48:49] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:49:20] <udet> for making this work with implicit conversion you'd need to extend requires with something like "|| std::is_implicitly_convertible_v<C>"
[20:49:20] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:52:42] <rpav> ooh right the way to do that is to take <C,D> f(C, D) and make sure they're is_same
[20:52:55] <rpav> you don't need the requires for C,C
[20:53:12] <rpav> or alternatively it will still implicitly convert, not sure
[21:03:21] *** Joins: paul424 (~tom@ip-5-172-234-25.multi.internet.cyfrowypolsat.pl)
[21:07:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[21:07:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:08:22] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:11:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:14:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:14:55] *** Joins: markong (~kvirc@213.146.188.203)
[21:18:16] *** Joins: immibis_ (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[21:21:10] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 272 seconds)
[21:26:07] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[21:26:35] *** Quits: immibis_ (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[21:26:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758)
[21:26:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758) (Remote host closed the connection)
[21:27:13] *** Joins: Juliu (~Juliu2@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758)
[21:27:30] *** Quits: Juliu (~Juliu2@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758) (Remote host closed the connection)
[21:27:45] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758)
[21:28:03] *** Joins: ipe (~ipe@91-156-246-15.elisa-laajakaista.fi)
[21:31:19] *** Joins: k8yun (~k8yun@user/k8yun)
[21:36:53] <rpav> hrm where did i see swap_if
[21:43:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:26] *** ChanServ sets mode: +v npaperbot
[21:45:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:45:52] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[21:48:59] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:49:14] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[21:49:47] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:49:49] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[21:50:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:51:00] *** Joins: k8yun_ (~k8yun@user/k8yun)
[21:53:09] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[21:54:31] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[21:55:13] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:ec43:dea0:dfe1:cce1)
[21:55:13] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:ec43:dea0:dfe1:cce1) (Changing host)
[21:55:13] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:55:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:56:42] *** Quits: magla (~gelignite@d53619a1.access.ecotel.net) (Read error: Connection reset by peer)
[21:57:10] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[21:57:16] *** Joins: magla (~gelignite@d53619a1.access.ecotel.net)
[21:59:21] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[21:59:28] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[22:01:51] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Excess Flood)
[22:01:58] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[22:08:04] *** Joins: timwis (uid152344@id-152344.uxbridge.irccloud.com)
[22:09:47] *** Quits: imMute (~immute@user/immute) (Quit: Reconnecting)
[22:09:55] *** Joins: imMute (~immute@user/immute)
[22:10:29] *** Quits: imMute (~immute@user/immute) (Client Quit)
[22:10:57] *** Joins: imMute (~immute@user/immute)
[22:12:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:12:41] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:15:23] <ville> what's the experience on https://github.com/MPI-SWS/genmc looks quite interesting
[22:15:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:22:35] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:25:40] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:26:34] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:27:01] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 245 seconds)
[22:27:29] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[22:30:17] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[22:33:48] *** Joins: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net)
[22:43:53] *** Quits: cq-work (~cq-work@user/cq-work) (Read error: Connection reset by peer)
[22:53:52] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ec7a:c710:284d:4802) (Remote host closed the connection)
[22:54:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ec7a:c710:284d:4802)
[22:56:47] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:57:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:01:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[23:05:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:11:01] *** Quits: dld (~davidlowr@73.61.9.48) (Ping timeout: 256 seconds)
[23:12:44] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:12:47] *** Joins: dld (~davidlowr@73.61.8.74)
[23:13:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:14:31] *** Quits: paul424 (~tom@ip-5-172-234-25.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:16:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:24:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:25:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:26:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:26:56] *** Joins: sbrothy (~sbrothy@192038128240.mbb.telenor.dk)
[23:27:44] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:28:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:30:51] *** Quits: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[23:35:04] *** Parts: sbrothy (~sbrothy@192038128240.mbb.telenor.dk) ()
[23:39:16] *** Joins: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net)
[23:43:30] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:43:59] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758) (Quit: Quit)
[23:45:12] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:7359:5fa7:37ed:e9d5)
[23:45:12] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:7359:5fa7:37ed:e9d5) (Changing host)
[23:45:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:45:44] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Read error: Connection reset by peer)
[23:46:16] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[23:46:27] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:54:51] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:55:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:59:44] *** Quits: Deneb (~johnch@245.82.159.143.dyn.plus.net) (Quit: Leaving)
