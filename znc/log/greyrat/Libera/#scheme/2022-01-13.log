[00:04:08] *** Joins: yewscion (~yewscion@52.94.133.128)
[00:27:00] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[00:28:06] *** Joins: seninha (~seninha@user/seninha)
[00:41:44] *** Ekho- is now known as Ekho
[01:01:52] *** Joins: klovett (~klovett@166.205.110.2)
[01:02:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:03:37] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[01:07:11] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:16:44] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:48:54] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:08:42] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[02:24:35] *** Joins: akarle (~akarle@user/akarle)
[02:29:25] *** Quits: sdu (~sidu@185.44.146.61) (Ping timeout: 240 seconds)
[02:39:54] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 250 seconds)
[02:43:08] *** Quits: civodul (~user@guix/contributor/civodul) (Remote host closed the connection)
[03:00:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[03:21:57] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:26:11] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:29:01] *** Quits: jao- (~jao@61.red-176-80-130.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[03:31:40] *** Joins: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net)
[03:31:49] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[03:32:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:39:42] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[03:47:04] *** Quits: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[03:49:22] *** Joins: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net)
[04:48:12] *** Joins: frost (~frost@user/frost)
[04:59:08] *** Joins: s-liao87 (~s-liao@101.86.96.21)
[05:00:16] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:02:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:21:06] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[05:35:10] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[05:37:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:51:20] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:56:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[06:00:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[06:03:01] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[06:04:05] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[06:04:44] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:11:58] *** Quits: s-liao87 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:26:16] *** Quits: aeka` (~aeka@2606:6080:1001:f:ed79:9361:ea0e:3e88) (Read error: Connection reset by peer)
[06:28:45] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:35:10] *** Joins: aeka (~aeka@user/hiruji)
[06:58:53] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:01:47] *** Joins: aeka (~aeka@user/hiruji)
[07:10:00] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:12:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:06] *** Joins: aeka (~aeka@user/hiruji)
[07:15:00] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:05] *** Quits: klovett (~klovett@166.205.110.2) (Quit: ZZZzzz…)
[07:28:36] *** Joins: klovett (~klovett@166.205.110.2)
[07:29:33] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:32:59] *** Joins: aeka (~aeka@user/hiruji)
[07:37:31] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:38:28] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:42:12] *** Joins: aeka (~aeka@user/hiruji)
[07:43:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[07:43:49] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:43:58] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:46:35] *** Joins: aeka (~aeka@user/hiruji)
[07:46:35] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:56:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:01:11] *** Joins: aeka (~aeka@user/hiruji)
[08:01:58] <ns12> Hi, in Scheme, must the "display" procedure allow any type of object in its first argument (not just strings)?
[08:04:16] <Zipheir> Yes.
[08:08:10] <ns12> There is no object in Scheme that cannot be "display"ed?
[08:15:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:23:01] <Zipheir> ns12: It's more like display has to show *something* for every Scheme object.
[08:23:28] <Zipheir> ns12: So most Schemes just show #<procedure> or something like that for a procedure object.
[08:23:57] <Zipheir> There is no object which it is an error to pass to display.
[08:25:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:28:43] *** Joins: seninha (~seninha@user/seninha)
[08:39:11] *** Quits: bandali (~bandali@jir.shemshak.org) (Changing host)
[08:39:11] *** Joins: bandali (~bandali@gnu/bandali)
[08:41:36] <ns12> When I (define str "\n\n\n"), what is actually held in memory? Three newline characters, or six characters (three "\" and three "n")?
[08:43:53] <ns12> I am asking because "display" and "write" will print str differently. If only three newline characters are held in memory, "write" will need to do a translation to print "\n" for each newline character. If six characters are held in memory, "display" will need to convert each "\n" into a newline character.
[08:48:24] <s-liao> https://github.com/schemedoc/cookbook/issues/8
[08:48:41] <s-liao> There is a little bit we talked before.
[09:08:31] <Zipheir> ns12: Probably three newlines.
[09:09:58] <Zipheir> ns12: The reader/writer usually perform escape sequence de/encoding.  They almost certainly don't show up in the actual data.
[09:12:34] *** hugo- is now known as hugo
[09:21:10] *** Quits: jao (~jao@84.red-176-83-203.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[09:24:42] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[09:25:22] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:28:32] *** Joins: malaclyps (~mala@user/malaclyps)
[09:28:35] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[09:36:29] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:40:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:40:48] *** Joins: seninha (~seninha@user/seninha)
[09:49:36] <ns12> Zipheir: Is this an implementation detail that is unspecified by the standards?
[09:53:11] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[09:55:15] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:57:23] *** Joins: notzmv (~zmv@user/notzmv)
[10:04:32] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:16:11] *** Quits: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:17:11] <Zipheir> ns12: It's strongly implied by the standards, I think.  They seem to assume that you will also not, e.g., store #(1 2 3) as the string "#(1 2 3)" but rather as a vector.
[10:17:17] *** Joins: croc (~quassel@45.33.123.12)
[10:17:56] <Zipheir> ns12: In other words, the standards describe external representations as denoting Scheme objects, and string literals are external representations.
[10:19:07] <Zipheir> But there's nothing non-compliant about producing the denoted object some other way.
[10:20:44] <Zipheir> Maybe you want to store a literal and create the object it denotes just-in-time.  But I can't see much reason to do that with string literals, since they take up (marginally) more space than what they denote.
[10:30:01] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:31:27] <ns12> Zipheir: Thank you for the explanation.
[10:36:24] *** Joins: sdu (~sidu@185.44.146.61)
[10:38:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:40:23] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:47:24] *** Joins: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[11:02:53] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:11:03] *** Quits: confuzius (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[11:13:06] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[11:13:11] *** Joins: confuzius (~h_m@186-149-117-154.bitcointernet.co.za)
[11:15:07] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[11:15:56] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[11:30:44] <dpk> oh hey, Gerbil 0.17 is out, with my patch for actual working breakable ephemerons (along other things)
[11:41:26] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:41:53] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:48:49] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[11:54:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:56:41] *** Joins: Darkcoal (~user@2001:16a2:77a8:a200:61fe:e24f:d8ee:6a76)
[12:21:30] <dpk> now up to 30 issues to raise about R7RS. we need somewhere to keep track of these …
[12:31:51] *** Joins: klovett_ (~klovett@166.205.110.2)
[12:32:51] *** Quits: Darkcoal (~user@2001:16a2:77a8:a200:61fe:e24f:d8ee:6a76) (Ping timeout: 245 seconds)
[12:33:14] *** Joins: Darkcoal (~user@139.64.2.214)
[12:34:37] *** Quits: klovett (~klovett@166.205.110.2) (Ping timeout: 256 seconds)
[13:04:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:10:34] *** Joins: civodul (~user@guix/contributor/civodul)
[13:26:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:38:36] <Franciman> dpk: what is docket?
[13:39:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:40:37] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[13:41:48] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[13:45:28] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:49:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:57:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:58:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:34:12] <wasamasa> ns12: you'll have to read the standard to see whether it mandates handling newline escapes
[14:34:46] <wasamasa> ns12: r7rs-small for example does mandate \n to be interpreted as a newline in a string
[14:35:32] <wasamasa> ns12: whereas r5rs only specifies \" and \\
[14:45:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:49:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:04:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:09:19] *** Quits: Wezl (Wezl@grape.ircnow.org) (Ping timeout: 256 seconds)
[15:25:13] <leah2> dpk: pushed it to void yesterday! :)
[15:29:09] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:30:54] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:40:44] *** Joins: Wezl (Wezl@grape.ircnow.org)
[15:50:15] *** Joins: frost73 (~frost@user/frost)
[15:53:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:54:07] *** frost73 is now known as frost
[16:06:52] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[16:16:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[16:44:25] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:07:00] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[17:33:58] *** Joins: topoi (~topoi@user/topoi)
[17:42:42] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[18:00:11] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[18:17:07] *** Joins: livoreno (~livoreno@user/notzmv)
[18:43:53] *** Joins: klovett (~klovett@166.205.110.2)
[18:44:56] *** Quits: klovett_ (~klovett@166.205.110.2) (Ping timeout: 250 seconds)
[19:20:21] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:22:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:29:03] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[19:43:59] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:48:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:49:39] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:50:30] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[19:55:30] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:757c:fc03:72c5:c066)
[20:03:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:03:59] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:05:43] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:07:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[20:09:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:15:04] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[20:20:32] <wasamasa> mdhughes: you quoted something about linux being "a knockoff of a 1970s operating system well past its sell-by date", but wouldn't that immediately discredit every unix-like OS, including the BSD and macOS kind?
[20:23:34] <aeth> the problem with people who attack the popular (only?) two OS families is...
[20:23:38] <aeth> the point of the OS is to run software
[20:23:48] <aeth> You can make a better OS, but if it doesn't run the software you want, what's the point?
[20:24:34] <aeth> and any suggested improvements usually hurt performance... if you're going to spend all day in, say, Firefox, then you want to have most of your hardware's capabilities go to Firefox, not to the OS
[20:25:18] <aeth> You're not going to have a LispOS/SchemeOS that's successful unless it can run the popular web browsers (and some other software, but it's a much easier task than in the '90s) with less overhead than the existing ones
[20:31:12] <Zipheir> "successful" depends on what you want to succeed at.
[20:32:53] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:33:09] <Zipheir> Of course, if that means "millions of users", then you're basically forced into POSIX, or at least a POSIX compatibility layer.
[20:33:59] <gwatt> Zipheir: the best definition of success for an OS is being about to use the random number generator to talk to god
[20:34:53] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:35:40] <Zipheir> gwatt: In that case, there's only one success story, I guess...
[20:40:11] <wasamasa> I just found it funny because if I read the quote correctly, that would mean to discredit your own OS
[20:44:06] <Zipheir> OS X seems at least as outdated as every other UNIX.
[20:45:21] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:45:30] <Zipheir> "Not only is UNIX dead, it's starting to smell really bad." (Rob Pike not being remotely prophetic, sometime in the 90s)
[20:47:14] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:48:55] <mdhughes> I think the cheap knock-off's past its sell-by date. The real ones are slightly less prone to spoiling.
[20:49:50] <mdhughes> But also note that, say, MacOS isn't 1970 UNIX, it's Mach kernel with a BSD userland, heavily modified since then. I dunno if any old code remains.
[20:50:46] <mdhughes> Alas Solaris was murdered by Oracle, but it was also massively different from its roots, because they actually learned how to make an OS better over time.
[20:52:05] <mdhughes> Linux has mostly just gotten fatter as it absorbs every damned thing into the kernel for X% better runtime speed and X**2 worse security.
[20:53:36] <mdhughes> The purpose of an OS is to provide the services you don't want every application to reinvent for themselves. You can write a whole new thread scheduler in each program if you like! That's a terrible idea.
[20:55:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:56:27] <tokie> rob pike gave us golang, so that's really enough said
[20:57:34] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:01:55] <Zipheir> tokie: Perhaps, but what does that mean? :)
[21:02:47] <tokie> it means something different to everyone :)
[21:03:52] <Zipheir> Excellent.
[21:06:18] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[21:08:04] <tokie> golang is fairly controversial for having a really lame type system, poor garbage collector performance and for rob pike saying that the language is purposely simpified because programmers at google are dumb
[21:10:27] <gwatt> I thought the gc performance was fine. iirc they were going for minimal impacting gc pauses, but potentially needing them more frequently
[21:11:01] <gwatt> mostly, I think the error handling is a pain. everything else seems fine
[21:12:16] <gwatt> It was nice to be able to trivially cross-compile binaries
[21:18:51] <Zipheir> People seem to ignore its approach to concurrency, which I think is pretty nice.
[21:19:11] <Zipheir> (The concurrency, not the ignorance.)
[21:19:46] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:757c:fc03:72c5:c066) (Ping timeout: 256 seconds)
[21:20:02] <Zipheir> A rare language without the ugly thread abstraction!
[21:22:55] <tokie> gwatt: it's pretty bad. there's plenty of cases of people having to migrate away due to gc pauses
[21:23:27] <tokie> including the now famous discord article: https://discord.com/blog/why-discord-is-switching-from-go-to-rust
[21:24:02] <gwatt> Zipheir: Yeah, the channels are neat
[21:24:24] <tokie> i haven't written a lot of golang, but i've been told by googlers that in high performance situations channels are discouraged because they can be quite slow
[21:24:27] <tokie> but maybe that's old news
[21:25:58] <Zipheir> . o O (Maybe the Discord devs should stop driving SUVs if they want bicycle-level power consumption...)
[21:27:45] <tokie> right, but there's a sort of industry misconception about golang's performance and it's worsened by the golang developers claims
[21:27:45] <gwatt> I do with that I could do something like: "channel := go funcall()" instead of having to do something like: "go func() { channel <- actuallFunCall() }()" 
[21:28:17] <siiky> jcowan: Hey there! The CHICKEN wiki page for SRFI-178 reads "for simplicity and possibly for speed, they use a whole byte to represent each bit"; was that explained somewhere (the ML maybe)? I don't know how to search the ML archives, so if it's there, could you point to the thread/mail discussing that? Or better yet, teach how to fish? :)
[21:28:39] <tokie> gwatt: yeah, at my last job we built such a facility for C++ (ugh) 
[21:28:45] <tokie> it was really nice
[21:28:53] <Zipheir> siiky: Basically, we took the easy route.  It's a huge SRFI.
[21:28:54] <tokie> it was probably a bit more like rust's async stuff, though
[21:28:58] <siiky> I went over the subjects of the emails, but nothing jumped to the eye
[21:29:08] <Zipheir> siiky: Ahem, basically *I* took the easy route.
[21:29:23] <siiky> lol that's fair
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:06] <Zipheir> We discussed creating a "packed" implementation, but it would have been a ton of work and the SRFI was already long past its end-of-draft date.
[21:30:30] <siiky> but is it that hard to do some bit fiddling in Scheme? I haven't looked at the code, I don't know how things are implemented, so apologies if that sounds like I'm talking from a high horse
[21:30:31] <Zipheir> It's still something I'd like to get done, though.
[21:31:00] *** Joins: ns12 (~ns12@user/ns12)
[21:31:47] <siiky> (I have one such bitvector implementation in C; it was easy enough, just needed the right abstractions)
[21:32:05] <Zipheir> siiky: There are only a few procedures that I think are legitimately tricky (e.g. bitvector rotate with start/end indices).  It's more the sheer number of forms to reimplement.  A big time-saver with 178 was the fact that about half of it could be implemented by wrapping bytevector operations.
[21:32:49] <Zipheir> siiky: If you want to work on it, go for it! :)  I'd be happy to help if I can.
[21:33:10] <siiky> ah! the shifts! I also skipped those on my C implementation hahaha
[21:33:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f51e:b0c2:b34a:2f5a)
[21:33:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f51e:b0c2:b34a:2f5a) (Changing host)
[21:33:25] *** Joins: skapata (~Skapata@user/skapata)
[21:35:16] <Zipheir> Yeah, that stuff is ugly with packed vectors.  There's probably some code from foof's implementation https://wiki.call-cc.org/eggref/5/iset#bit-vectors that could be snarfed, though.
[21:42:15] <siiky> neat, didn't know iset had bitvectors
[21:42:32] <siiky> alright, think it's explained well enough, thanks Zipheir!
[21:46:26] <Zipheir> siiky: yw!
[21:47:32] <amazigh> x')
[21:47:42] <amazigh> oops sorry out-of-context I was backlogging
[21:47:59] <amazigh> I was replying to googlers are dumb
[21:49:40] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[21:53:46] <Zipheir> I wonder why SRFI 152's implementation extends the string comparisons to 0 or 1 args when the SRFI explicitly says they're for 2 or more?
[22:00:54] <Zipheir> Also re: SRFI 178, there's some question of whether the "packed" implementation is worth the effort.  It's definitely going to be slower, possibly much slower depending on how the CPU does things.
[22:01:57] <Zipheir> Especially the mutative stuff, where there will be tons of shifting.
[22:09:33] <siiky> hmm in a bitvector I'd say the space has higher priority than speed; plus, a shift and an AND (or two shifts) (for getting/setting) are fast operations, faster than dereferencing a pointer. Getting 1 bit of information out of 1 byte is more concerning to me
[22:11:02] <siiky> but in the end it depends on what you use it for, of course
[22:11:12] <Zipheir> There's prior art for both approaches.
[22:11:28] *** Joins: jao (~jao@79.red-79-159-137.dynamicip.rima-tde.net)
[22:11:30] <Zipheir> Apparently the space waste hasn't troubled Java or C# programmers.
[22:12:06] <ecraven> ;)
[22:14:18] <Zipheir> Also, how big are your bitvectors?  I don't know, but I'd guess that huge bitvectors are rarer than huge strings.  I might well prioritize speed and cacheability ...
[22:14:20] <siiky> does anyone in Java or C# even really care about performance at that level? (:  one of the subjects I saw in the archives was how to read a file into a bitvector, which is a reasonable (I think) usecase for them. Using 1B for every 1b read is a no go (speed wise and memory wise)
[22:15:12] <Zipheir> Yes, it really depends on the use case.
[22:16:31] <Oxyd> I'd find it rather surprising if a bitvector used an entire byte for each bit. If you want to use a byte to represent one bit for whatever reason, you can use an u8vector already.
[22:16:45] <Zipheir> Two implementations would be nice to have.  You could use (scheme bitvectors packed) for the high-volume cases.
[22:17:04] <Zipheir> Oxyd: Take a look at SRFI 178.  There's lots in there you can't easily do with bytevectors.
[22:18:05] <siiky> Zipheir: I've used them in the past for very large sets
[22:18:19] <Zipheir> And, again, the "wasting a byte for a bit" thing has to take into account how processors are accessing memory.
[22:20:19] <siiky> what do you mean? getting one bit out of memory is never slower than getting one byte
[22:21:52] <gwatt> I doubt it will ever be faster either.
[22:22:50] <Zipheir> IIUC it depends greatly on caching behavior.  At the very least, you've got to call a bunch of extra Scheme-level shift operations to get a single bit.
[22:24:14] <Zipheir> There's no way it's faster.  It may even result in the same amount of data being loaded by the processor.
[22:25:29] *** Joins: notzmv (~zmv@user/notzmv)
[22:25:34] <Zipheir> But it be very convenient to have packed bitvectors for e.g. bitmaps in cases where memory size is crucial.
[22:25:35] <gwatt> I guess the cases it will be faster are if you have a large enough dataset to cause cache misses if you're using bytes as bits.
[22:26:07] <Zipheir> *it would be (unintentional pirate-speak)
[22:33:23] <siiky> gwatt: of course getting a single a bit isn't faster either, though that's not really the point :)  but I guess you already know that too, judging from your other message
[22:36:34] <Zipheir> The bottom line is that two implementations would be nice to have.
[22:40:16] <siiky> aye, true that! :)
[22:48:11] <dpk> Zipheir: ah, but what can you do with a bitvector that you can't with a bignum?
[22:48:16] <dpk> that's a real question
[22:48:27] <dpk> i guess 'mutate them' is one answer
[22:48:59] <dpk> but Chibi's char-set implementation uses bignums as bitfields for absurdly large and complicated sets like char-set:letter and it works fine
[22:50:04] <Zipheir> dpk: Not go crazy.
[22:50:39] <Zipheir> I hate dealing with functions that do tons of bitwise stuff.
[22:51:28] <gwatt> Is that because thinking in terms of bitwise operations is a pain, or because the scheme bitwise procedures have long names
[22:52:32] <Zipheir> Both, for me.
[22:53:15] <Zipheir> Bit-munging is a language you pick up, but there are always new tricks.
[22:54:27] <gwatt> fair. I wonder if a bitwise-infix macro would be good? 
[22:56:47] *** Joins: taylan2 (~taylan@user/taylan)
[22:57:57] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Ping timeout: 256 seconds)
[22:59:22] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[22:59:39] *** Quits: taylan (~taylan@user/taylan) (Ping timeout: 256 seconds)
[23:01:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[23:07:45] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:19:07] *** Quits: Darkcoal (~user@139.64.2.214) (Quit: Darkcoal)
[23:29:50] *** Joins: seninha_ (~seninha@user/seninha)
[23:31:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[23:44:49] *** Quits: seninha_ (~seninha@user/seninha) (Ping timeout: 256 seconds)
[23:48:58] <dpk> jcowan: SRFI 160 is listed on the Orange Docket, but was already adopted by the Tangerine Edition
[23:51:11] *** Joins: seninha (~seninha@user/seninha)
[23:52:12] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[23:59:39] *** Joins: johnjaye (~pi@154.6.152.74)
