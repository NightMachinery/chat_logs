[00:00:17] <mst> genio: you may need to try again to explain what you've tried and how that README didn't help
[00:03:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[00:03:18] *** Quits: deadmarshal (~deadmarsh@95.38.229.214) (Ping timeout: 260 seconds)
[00:06:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:07:55] *** Joins: xenial-user5 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[00:08:36] *** Quits: xenial-user5 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Remote host closed the connection)
[00:09:09] *** Joins: xenial-user10 (~androirc@20014C4C17E1D200B98768E36F8CFDB5.unconfigured.pool.telekom.hu)
[00:15:50] *** Joins: superboot (~agentgasm@user/superboot)
[00:20:56] *** Quits: superboot (~agentgasm@user/superboot) (Remote host closed the connection)
[00:21:42] * GumbyPAN CPAN Upload: App-Bitcoin-PaperWallet-1.02 by BRTASTIC https://metacpan.org/release/BRTASTIC/App-Bitcoin-PaperWallet-1.02
[00:31:43] * GumbyPAN CPAN Upload: Yancy-1.083 by PREACTION https://metacpan.org/release/PREACTION/Yancy-1.083
[00:36:44] * GumbyPAN CPAN Upload: Yancy-Plugin-OpenAPI-0.001 by PREACTION https://metacpan.org/release/PREACTION/Yancy-Plugin-OpenAPI-0.001
[00:46:45] * GumbyPAN CPAN Upload: Yancy-Plugin-OpenAPI-0.002 by PREACTION https://metacpan.org/release/PREACTION/Yancy-Plugin-OpenAPI-0.002
[00:54:47] *** Quits: xenial-user10 (~androirc@20014C4C17E1D200B98768E36F8CFDB5.unconfigured.pool.telekom.hu) (Ping timeout: 260 seconds)
[01:05:18] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[01:23:02] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:36:01] *** Joins: proller (~p@80.240.216.69)
[01:46:51] * GumbyPAN CPAN Upload: App-Git-Workflow-v1.1.16 by IVANWILLS https://metacpan.org/release/IVANWILLS/App-Git-Workflow-v1.1.16
[01:56:45] *** Joins: whynot (~whynot@88.155.61.96)
[02:00:28] *** Parts: jabberwok (~wlindley@75.105.20.104) ()
[02:01:15] *** Joins: humky_ (~humky@user/humky)
[02:03:26] *** Quits: humky (~humky@user/humky) (Ping timeout: 245 seconds)
[02:06:42] *** Quits: humky_ (~humky@user/humky) (Remote host closed the connection)
[02:06:58] *** Joins: humky (~humky@user/humky)
[02:17:08] *** Quits: soliste (~soliste@88.164.90.135) (Remote host closed the connection)
[02:21:14] *** Joins: humky_ (~humky@user/humky)
[02:23:42] *** Quits: humky (~humky@user/humky) (Ping timeout: 260 seconds)
[02:26:05] *** Quits: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net) (Remote host closed the connection)
[02:33:16] *** Quits: pizdets (~pizdets@183.182.115.247) (Ping timeout: 250 seconds)
[02:34:03] *** Joins: pizdets (~pizdets@183.182.111.19)
[02:34:16] *** Joins: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net)
[02:37:31] *** Quits: humky_ (~humky@user/humky) (Quit: Leaving)
[02:40:21] *** Quits: magla (~gelignite@55d47dc5.access.ecotel.net) (Quit: Stay safe!)
[03:04:45] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:06:26] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Read error: Connection reset by peer)
[03:08:50] *** Quits: Pali (~pali@user/pali) (Ping timeout: 246 seconds)
[03:16:32] *** Quits: rbrHAUNT (I0USO6iz@user/rbraun) (Quit: leaving)
[03:22:43] *** Joins: rbrHAUNT (nnycux8j@user/rbraun)
[03:25:42] *** Joins: X-Scale` (~ARM@92.250.98.212)
[03:26:11] *** Quits: murrayn (~murray@user/murrayn) (Ping timeout: 264 seconds)
[03:26:14] *** Quits: X-Scale (~ARM@31.22.147.35) (Ping timeout: 260 seconds)
[03:27:03] *** X-Scale` is now known as X-Scale
[03:42:03] * GumbyPAN CPAN Upload: NewsExtractor-v0.44.0 by GUGOD https://metacpan.org/release/GUGOD/NewsExtractor-v0.44.0
[03:45:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[03:48:06] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:49:49] *** Joins: krismatrix (~krismatri@2601:2c6:4a80:b410:19b1:2d2e:3be1:a23a)
[03:51:06] *** Quits: krismatrix (~krismatri@2601:2c6:4a80:b410:19b1:2d2e:3be1:a23a) (Client Quit)
[03:54:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:16:13] *** Quits: whynot (~whynot@88.155.61.96) (Quit: leaving)
[04:30:21] *** Joins: humky (~humky@user/humky)
[04:31:22] *** Joins: murrayn (~murray@static.38.4.181.135.clients.your-server.de)
[04:31:54] *** Quits: murrayn (~murray@static.38.4.181.135.clients.your-server.de) (Changing host)
[04:31:54] *** Joins: murrayn (~murray@user/murrayn)
[04:37:09] * GumbyPAN CPAN Upload: Alien-OpenMP-0.003004 by OODLER https://metacpan.org/release/OODLER/Alien-OpenMP-0.003004
[04:42:09] * GumbyPAN CPAN Upload: Alien-OpenMP-0.003005 by OODLER https://metacpan.org/release/OODLER/Alien-OpenMP-0.003005
[05:07:07] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[05:15:36] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:19:38] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[05:32:40] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[05:34:21] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[05:45:06] *** Quits: Su-Shee (~Susanne@p4ffc72ca.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:46:03] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:47:06] *** Joins: Su-Shee (~Susanne@p508948f9.dip0.t-ipconnect.de)
[05:47:21] *** Joins: pucara (~i@181.92.84.206)
[06:08:54] *** Joins: lloo^ (~lloo@wsip-98-188-242-6.mc.at.cox.net)
[06:26:21] * GumbyPAN CPAN Upload: App-Greple-subst-2.2906 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-subst-2.2906
[06:26:26] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[06:40:37] <EvanCarroll> YOOO PEOPLE
[06:40:45] <EvanCarroll> how are we doing today
[06:50:42] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[07:16:21] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 245 seconds)
[07:18:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:20:07] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:26:09] *** Joins: mexijoe (~Android@97.115.177.65)
[07:26:26] <mexijoe> hello
[07:28:15] *** Joins: mexijoe_ (~Android@97.115.177.65)
[07:30:59] *** Quits: mexijoe_ (~Android@97.115.177.65) (Client Quit)
[07:33:42] <gordonfish> Remember, if you're going to write an algorithm to programatically open the puzzle box, make sure to use the GNU Cenobite Compiler.
[07:33:48] <mexijoe> hello world 
[07:33:57] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Quit: Leaving)
[07:34:47] *** Quits: mexijoe (~Android@97.115.177.65) (Quit: -a- IRC for Android 2.1.59)
[07:39:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[07:41:56] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:43:49] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[07:44:05] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[07:44:14] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:44:33] *** Joins: tejr (~tejr@user/tejr)
[07:45:59] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:48:46dd:8f1:e85e) (Ping timeout: 264 seconds)
[07:47:29] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[07:48:21] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:11:30] *** Joins: Martchus (~martchus@2a01:c22:7b64:f00:d250:99ff:fe49:3cce)
[08:12:46] *** Quits: Martchus_ (~martchus@2a01:c23:c134:1000:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[08:23:45] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:24:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0)
[08:29:29] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[08:44:26] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:45:27] *** Joins: deadmarshal (~deadmarsh@95.38.231.169)
[08:56:18] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:11:47] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[09:12:13] *** Joins: tejr (~tejr@user/tejr)
[09:15:50] *** Quits: deadmarshal (~deadmarsh@95.38.231.169) (Ping timeout: 260 seconds)
[09:16:27] *** Joins: jplesnik (~jplesnik@83.240.62.176)
[09:24:12] *** Quits: PonyBlocks-_- (ponyblocks@user/ponyblocks) (*.net *.split)
[09:24:12] *** Quits: f3ew1 (~f3ew@2a01:4f9:4b:3b57::2) (*.net *.split)
[09:24:12] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[09:24:12] *** Quits: Champi (Champi@damn.e-leet.be) (*.net *.split)
[09:24:12] *** Quits: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6) (*.net *.split)
[09:24:12] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[09:24:12] *** Quits: jelly (~me@user/jelly) (*.net *.split)
[09:24:12] *** Quits: mstevens (sid285816@tinside.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: Yaakov (sid19863@user/Yaakov) (*.net *.split)
[09:24:12] *** Quits: rjbs (sid498898@uxbridge.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: toddr (sid457681@tinside.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: Pny (pny1312@2605:6400:c847:1985::5891) (*.net *.split)
[09:24:12] *** Quits: schro (~schroding@etruscan.konundrum.org) (*.net *.split)
[09:24:12] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[09:24:12] *** Quits: daemon (znc@about/web/TheBeardedBSDer) (*.net *.split)
[09:24:12] *** Quits: gugod (gugod@li7-202.members.linode.com) (*.net *.split)
[09:24:12] *** Quits: polettix (~polettixx@linode.polettix.it) (*.net *.split)
[09:24:12] *** Quits: arcanez (~arcanez@warpedreality.org) (*.net *.split)
[09:24:12] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[09:24:12] *** Quits: digdilem (~digdilem@rolf.yuss.org) (*.net *.split)
[09:24:12] *** Quits: a6502 (~wieger@stofzuiger.a6502.net) (*.net *.split)
[09:24:12] *** Quits: bnjf (~bnjf@vm.bnjf.id.au) (*.net *.split)
[09:24:12] *** Quits: cxreg (~count@63.228.111.44) (*.net *.split)
[09:24:12] *** Quits: Juerd (juerd@computervrede.nl) (*.net *.split)
[09:24:12] *** Quits: hquirinosmith1 (~hquirinos@hqs.rocks) (*.net *.split)
[09:24:12] *** Quits: Getty (getty@stardestroyer.de) (*.net *.split)
[09:24:12] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[09:24:12] *** Quits: fatalnix (~hodbogi@user/fatalnix) (*.net *.split)
[09:24:12] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[09:24:12] *** Quits: aindilis_ (~aindilis@152-44-40-72.us-chi1.upcloud.host) (*.net *.split)
[09:24:12] *** Quits: drbean (drbean@thinks.life.is-a.beauty) (*.net *.split)
[09:24:12] *** Quits: francis (francis@user/francis) (*.net *.split)
[09:24:19] *** Joins: arcanez (~arcanez@warpedreality.org)
[09:24:19] *** Joins: cxreg (~count@63.228.111.44)
[09:24:20] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[09:24:21] *** Joins: francis (francis@user/francis)
[09:24:21] *** Joins: zeus (~user@user/kamyl)
[09:24:22] *** Joins: hodbogi (~hodbogi@9600-baud.net)
[09:24:24] *** Joins: Getty (getty@stardestroyer.de)
[09:24:24] *** Joins: a6502 (~wieger@stofzuiger.a6502.net)
[09:24:26] *** Joins: polettix (~polettixx@linode.polettix.it)
[09:24:26] *** Joins: Riviera (Riviera@user/riviera)
[09:24:27] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[09:24:28] *** Joins: f3ew1 (~f3ew@2a01:4f9:4b:3b57::2)
[09:24:28] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[09:24:29] *** Joins: bleb (~cm@user/bleb)
[09:24:33] *** Joins: gugod (gugod@li7-202.members.linode.com)
[09:24:35] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[09:24:36] *** Joins: mstevens (sid285816@id-285816.tinside.irccloud.com)
[09:24:37] *** Joins: toddr (sid457681@id-457681.tinside.irccloud.com)
[09:24:48] *** Joins: rjbs (sid498898@id-498898.uxbridge.irccloud.com)
[09:24:48] *** Joins: Juerd (juerd@computervrede.nl)
[09:24:50] *** hodbogi is now known as Guest4471
[09:24:51] *** Joins: hquirinosmith1 (~hquirinos@hqs.rocks)
[09:24:52] *** Joins: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host)
[09:24:58] *** Joins: Yaakov (sid19863@id-19863.tinside.irccloud.com)
[09:25:06] *** Joins: OnlineCop (~OnlineCop@2001:470:1f07:89::beef:beef)
[09:25:22] *** Quits: Yaakov (sid19863@id-19863.tinside.irccloud.com) (Changing host)
[09:25:22] *** Joins: Yaakov (sid19863@user/Yaakov)
[09:25:23] *** Quits: OnlineCop (~OnlineCop@2001:470:1f07:89::beef:beef) (Changing host)
[09:25:23] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[09:25:29] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[09:25:38] *** Joins: Champi (Champi@damn.e-leet.be)
[09:25:44] *** Joins: daemon (znc@about/web/TheBeardedBSDer)
[09:27:48] *** Joins: drbean (drbean@thinks.life.is-a.beauty)
[09:29:26] *** Joins: bnjf (~bnjf@vm.bnjf.id.au)
[09:29:27] *** Joins: schro (~schroding@etruscan.konundrum.org)
[09:32:50] *** Quits: Kate[m] (~katewecab@2001:470:69fc:105::1:2b2) (*.net *.split)
[09:32:50] *** Quits: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88) (*.net *.split)
[09:32:50] *** Quits: gordonfish[m] (~gordonfis@user/gordonfish) (*.net *.split)
[09:32:50] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[09:32:50] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[09:32:50] *** Quits: Frosku (~frosku@user/frosku) (*.net *.split)
[09:32:50] *** Quits: jayray (~jayray@user/jayray) (*.net *.split)
[09:32:50] *** Quits: usr1 (select@fosshost/director/corwin) (*.net *.split)
[09:32:50] *** Quits: nicoz- (unixlab@user/nicoz) (*.net *.split)
[09:32:50] *** Quits: krychu_ (~krychu@2a01:4f8:210:50c5::2) (*.net *.split)
[09:32:50] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (*.net *.split)
[09:32:50] *** Quits: tyep (~hatseflat@hatsuseno.rootaccess.nl) (*.net *.split)
[09:32:50] *** Quits: esh (~quassel@minnesota.heebs.ch) (*.net *.split)
[09:32:50] *** Quits: sl0w (~sl0w@64.225.43.238) (*.net *.split)
[09:32:50] *** Quits: BinGOs (~bitbucket@user/bingos) (*.net *.split)
[09:32:50] *** Quits: Richlv (~rich@nakts.net) (*.net *.split)
[09:32:50] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[09:32:50] *** Quits: xq (~xq@user/xq) (*.net *.split)
[09:32:58] *** Joins: tyep (~hatseflat@hatsuseno.rootaccess.nl)
[09:32:59] *** Joins: bingos (~bitbucket@user/bingos)
[09:32:59] *** Joins: krychu (~krychu@static.152.151.251.148.clients.your-server.de)
[09:33:00] *** Joins: usr1 (select@fosshost/director/corwin)
[09:33:03] *** Joins: Richlv (~rich@nakts.net)
[09:33:14] *** Joins: esh (~quassel@minnesota.heebs.ch)
[09:33:17] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[09:33:21] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[09:33:25] *** Joins: sl0w (~sl0w@64.225.43.238)
[09:33:33] *** Joins: jayray (~jayray@user/jayray)
[09:33:39] *** Joins: Frosku (~frosku@user/frosku)
[09:33:43] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[09:33:46] *** Joins: bkhl (~bkhl@user/bkhl)
[09:37:01] *** Joins: unixlab (unixlab@linuxlab.librient.com)
[09:38:01] *** Joins: Kate[m] (~katewecab@2001:470:69fc:105::1:2b2)
[09:39:35] *** Joins: jelly (jelly@user/jelly)
[09:39:36] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[09:40:54] *** Joins: gordonfish[m] (~gordonfis@user/gordonfish)
[09:43:02] *** Joins: MikeGeorge[m] (~onesuitsa@2001:470:69fc:105::1f88)
[09:47:15] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:47:44] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[09:48:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[09:49:15] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:49:24] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[09:50:23] *** Joins: Pny (pny1312@2605:6400:c847:1985::5891)
[09:50:39] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:54:34] *** Joins: deadmarshal (~deadmarsh@95.38.231.169)
[09:54:37] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:55:00] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[09:58:23] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:59:28] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[10:04:08] *** Quits: deadmarshal (~deadmarsh@95.38.231.169) (Ping timeout: 268 seconds)
[10:04:11] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.152)
[10:05:55] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[10:05:55] *** Quits: diskin (~diskin@87.117.60.162) (Killed (calcium.libera.chat (Nickname regained by services)))
[10:05:55] *** diskin_ is now known as diskin
[10:06:08] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:06:42] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[10:15:06] *** Joins: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741)
[10:15:53] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:16:06] *** Joins: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi)
[10:18:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[10:19:11] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:22:39] *** Quits: mattil (~mattil@d113jd8d7zstrh3-jxz-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[10:23:01] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[10:23:27] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[10:33:34] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Remote host closed the connection)
[10:38:20] *** Joins: Pali (~pali@user/pali)
[10:46:31] *** Joins: randir (~randir@93.159.239.42)
[10:50:31] *** Quits: Su-Shee (~Susanne@p508948f9.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[10:52:14] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.152) (Ping timeout: 268 seconds)
[10:52:17] *** Joins: Su-Shee (~Susanne@p4ffc7df8.dip0.t-ipconnect.de)
[11:06:54] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[11:12:23] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:17:11] *** Joins: art1 (~romeyke@p200300ccdf040f00ecef407ec04eb5e3.dip0.t-ipconnect.de)
[11:20:06] *** Joins: magla (~gelignite@55d4d950.access.ecotel.net)
[11:29:11] <lopid> https://trojansource.codes/
[11:29:12] <Paperbot> Link title(s): [ Trojan Source Attacks ]
[11:35:37] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[11:39:28] <rindolf> lopid: i see. i had previously grown weary of unicode
[11:50:42] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[11:52:57] *** Joins: kensanata (~user@user/kensanata)
[11:56:54] * GumbyPAN CPAN Upload: Graphics-TIFF-18 by RATCLIFFE https://metacpan.org/release/RATCLIFFE/Graphics-TIFF-18
[12:03:47] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[12:25:14] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[12:26:58] * GumbyPAN CPAN Upload: App-optex-v0.5.2 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-optex-v0.5.2
[12:31:31] *** Quits: Su-Shee (~Susanne@p4ffc7df8.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[12:31:58] * GumbyPAN CPAN Upload: uHTML-1.09 by OKELLO https://metacpan.org/release/OKELLO/uHTML-1.09
[12:32:56] *** Joins: Su-Shee (~Susanne@p4ffc7b1d.dip0.t-ipconnect.de)
[12:39:39] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[12:51:55] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[12:55:15] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[12:56:26] *** Joins: pajamian (~pj@ghettoforge/pj)
[12:58:35] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[12:58:36] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[12:58:58] *** pajamian is now known as pj
[12:59:54] *** Quits: Pali (~pali@user/pali) (Ping timeout: 268 seconds)
[13:00:54] *** Quits: lloo^ (~lloo@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[13:01:45] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 268 seconds)
[13:04:27] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:10:22] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:16:21] *** Joins: soliste (~soliste@88.164.90.135)
[13:22:09] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:23:47] *** Quits: bs338 (~pi@host31-54-8-204.range31-54.btcentralplus.com) (Ping timeout: 264 seconds)
[13:25:11] *** Joins: bs338 (~pi@host81-147-126-44.range81-147.btcentralplus.com)
[13:32:48] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:33:28] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[13:39:34] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[13:39:36] <Altreus> morn
[13:39:59] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 268 seconds)
[13:42:05] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[13:42:40] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:43:36] *** Joins: furrymcgee (~devuan@cgn-213-196-210-222.nc.de)
[13:44:55] *** Joins: choroba (~E.Choroba@88.146.255.106)
[13:46:32] <rindolf> gawde! dzil plugins that mutate source files based on the repo's history are such a pain
[13:48:10] <Altreus> don't like the sound of that
[13:53:14] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[13:54:55] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:55:48] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:56:08] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:56:20] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:00:41] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:01:23] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:02:47] *** Joins: xq (~xq@user/xq)
[14:09:45] *** Quits: Napalm (~Napalm@user/napalm) (Remote host closed the connection)
[14:13:30] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[14:16:22] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:16:54] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:17:08] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:19:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:19:44] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:24:32] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:24:45] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:27:30] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[14:30:22] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:07] *** Joins: csrf (~csrf@user/csrf)
[14:44:54] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[14:48:15] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:56:41] *** Joins: tdwamdors^ (~tdwamdors@wsip-98-188-242-6.mc.at.cox.net)
[15:00:56] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[15:01:12] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:04:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:10:12] *** Joins: Darkcoal (~user@139.64.42.148)
[15:10:38] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:11:01] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[15:27:42] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[15:36:18] * GumbyPAN CPAN Upload: App-CPAN-Get-0.03 by SKIM https://metacpan.org/release/SKIM/App-CPAN-Get-0.03
[15:41:19] * GumbyPAN CPAN Upload: Business-Tax-VAT-Validation-1.21 by BIGPRESH https://metacpan.org/release/BIGPRESH/Business-Tax-VAT-Validation-1.21
[15:50:05] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 268 seconds)
[15:51:20] * GumbyPAN CPAN Upload: JavaScript-Packer-2.07 by LEEJO https://metacpan.org/release/LEEJO/JavaScript-Packer-2.07
[15:53:54] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[15:55:15] *** Joins: pj (~pj@ghettoforge/pj)
[15:55:40] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[16:01:36] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[16:10:32] *** Quits: Peppard (~quassel@2001:470:1f0b:751:d53c:f1da:bcfc:679f) (Ping timeout: 268 seconds)
[16:13:22] *** Joins: Peppard (~quassel@dynamic-095-117-020-143.95.117.pool.telefonica.de)
[16:22:40] *** Joins: proller (~p@2a02:6b8:0:40c:d084:b940:a3c3:ddc3)
[16:35:50] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[16:37:50] <Kobaz> is there a way to cache local cert files for LWP ?
[16:38:08] <Kobaz> looks like every single https request has to load all the root certs from disk
[16:39:33] <Kobaz> just watching the insanity in strace...
[16:40:26] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[16:40:41] <Kobaz> so the reason I found this issue was my process loops on a job every 30 seconds sending data over https and then i was getting 'too many open files', it hit the per-process ulimit
[16:41:04] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[16:41:33] <ilmari> Kobaz: are you using the same LWP::UserAgent instance each time?
[16:41:44] <ilmari> or creating a new one, and leaking it?
[16:45:00] <Kobaz> oh crap this one might be making a new one each time
[16:45:34] <Kobaz> doh
[16:45:41] <Kobaz> i'm usually good with that sort of thing
[16:45:44] <Kobaz> thanks
[16:45:52] <ilmari> if it keeps the files open after you've released the UA object, that would be a bug somewhere down in the guts
[16:47:05] <Kobaz> yeah that's what i thought
[16:50:59] <Kobaz> what's very weird is... same script, same perl version, same LWP version, different box and no file limits hit
[16:51:21] <Kobaz> strace shows the files open/closed
[16:51:29] <Kobaz> not sure what leaked, but it's re-used now
[16:51:45] <Altreus> same OS, same archiecture?
[16:51:49] <Altreus> +spelling
[16:52:44] <Kobaz> different kernel
[16:52:49] <Kobaz> everything else is the same
[16:53:32] <Kobaz> affected box, 5.9.0-0.bpo.5-rt-amd64   not affected box, 5.6.0-0.bpo.2-rt-amd64
[16:53:48] <Kobaz> i should update everything to 5.10 next cycle
[16:55:59] <Kobaz> of course it could be anything, but i doubt it's the kernel
[16:58:34] <Altreus> File IO is a bit kernel-y but yeah I shouldn't think it a problem
[16:58:39] <Kobaz> quite possibly the other ones just weren't running long enough to trip
[16:58:48] <Kobaz> i'm seeing some leaks on the other machines, slowly using more memory
[16:59:34] <Kobaz> well of course yeah it uses the kernel but i doubt there's some file open bug, those things are quashed pretty quickly in testing typically
[17:03:18] <Altreus> yeah tis a bit far-fetched but this is the sort of grain from which entire stories about bug hunts grow :D
[17:03:24] <Kobaz> hah yeah
[17:03:28] *** Quits: bs338 (~pi@host81-147-126-44.range81-147.btcentralplus.com) (Ping timeout: 268 seconds)
[17:03:35] <Kobaz> a good start is not recreating the lwp every time
[17:03:44] <Kobaz> but yeah that should go away gracefully when it's out of scope
[17:04:55] *** Joins: bs338 (~pi@host217-44-230-139.range217-44.btcentralplus.com)
[17:06:28] * GumbyPAN CPAN Upload: Pod-Coverage-Careful-v1.1.0 by TOMC https://metacpan.org/release/TOMC/Pod-Coverage-Careful-v1.1.0
[17:11:29] * GumbyPAN CPAN Upload: PDL-Graphics-PLplot-0.80 by ETJ https://metacpan.org/release/ETJ/PDL-Graphics-PLplot-0.80
[17:11:58] <genio> Good news is that I’m making progress on the msys2 builds now
[17:12:38] *** Joins: Markow (~Markow@176.122.215.103)
[17:16:30] *** Quits: cooper (~mitchell@user/cooper) (Ping timeout: 260 seconds)
[17:17:02] *** Awoobis is now known as A_Dragon
[17:17:15] *** Joins: cooper (~mitchell@user/cooper)
[17:19:31] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 268 seconds)
[17:24:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[17:27:50] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:28:36] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:28:51] *** Joins: jabberwok (~wlindley@75.105.20.104)
[17:30:27] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[17:32:27] *** Quits: Darkcoal (~user@139.64.42.148) (Ping timeout: 268 seconds)
[17:34:19] *** Joins: Darkcoal (~user@51.158.144.32)
[17:35:20] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[17:36:09] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[17:39:04] *** Joins: mattil (~mattil@d113jcvdvx-9406zydt-4.rev.dnainternet.fi)
[17:41:48] *** Joins: bmeneg (~bmeneg@2804:828:f233:5075:e23e:22bf:327a:21ed)
[17:42:58] *** Quits: Darkcoal (~user@51.158.144.32) (Read error: Connection reset by peer)
[17:47:37] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[17:48:45] *** Quits: mattil (~mattil@d113jcvdvx-9406zydt-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:49:24] *** Joins: mattil (~mattil@d113jcvdvx-9406zydt-4.rev.dnainternet.fi)
[17:49:38] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[17:53:29] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[17:54:39] *** Quits: mattil (~mattil@d113jcvdvx-9406zydt-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[17:57:48] <simcop2387> genio: nice
[17:58:24] *** Joins: thrig (~thrig@70.97.65.251)
[17:58:36] <genio> should now be repeatable too
[18:00:49] *** Joins: mattil (~mattil@d113jcvdvx-9406zydt-4.rev.dnainternet.fi)
[18:06:36] *** Quits: mattil (~mattil@d113jcvdvx-9406zydt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:10:23] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[18:11:24] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Remote host closed the connection)
[18:17:00] *** Quits: furrymcgee (~devuan@cgn-213-196-210-222.nc.de) (Quit: leaving)
[18:21:36] * GumbyPAN CPAN Upload: FindApp-v0.0.6 by TOMC https://metacpan.org/release/TOMC/FindApp-v0.0.6
[18:29:31] *** Quits: tdwamdors^ (~tdwamdors@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[18:30:51] <xq> is there a way to make cmp_bag from Test::Deep produce a more helpful output?
[18:31:05] *** Quits: soliste (~soliste@88.164.90.135) (Quit: leaving)
[18:31:07] *** Quits: gordonfish (~gordonfis@user/gordonfish) ()
[18:31:29] <xq> sweval: use Test::More; use Test::Deep; my $L = [{id => 1, x => 1}]; my $R = [{id => 1, y => 1}]; cmp_bag $L, $R, "all good"; done_testing
[18:31:32] <perlbot> xq: not ok 1 - all good #   Failed test 'all good' #   at (IRC) line 1. # Comparing $data as a Bag # Missing: 1 reference # Extra: 1 reference 1..1 1# Looks like you failed 1 test of 1. [Exited 1]
[18:31:32] <Altreus> not that I've found
[18:31:51] <xq> "# Missing: 1 reference # Extra: 1 reference" is the definition of not useful
[18:32:07] <Altreus> Yeah, but I couldn't figure out what I would prefer it to say
[18:32:32] <xq> at the very least
[18:32:40] <xq> dump both sides, with sorted hash keys
[18:33:07] <xq> that would be much more helpful
[18:33:13] <Altreus> I thought of that, but then I thought how would that help if they were in a different order?
[18:33:28] <Altreus> the point of cmp_bag is that you don't know what the order is
[18:33:51] <xq> at least you have something to work with that way
[18:35:06] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:35:21] <alh> I dump both outputs when it fails and compare by eye 
[18:35:37] <xq> how do you perform a cmp_bag like check using Test2 ?
[18:36:38] *** Joins: monkey_ (~user@190.104.116.31)
[18:37:00] <alh> https://metacpan.org/pod/Test2::Tools::Compare#BAG-BUILDER ?
[18:37:01] <Paperbot> Link title(s): [ Test2::Tools::Compare - Tools for comparing deep data structures. - metacpan.org ]
[18:37:18] <Grinnz> use Test2::V0 for more helpful output, generally
[18:38:08] <Grinnz> is $stuff, bag { ... }, 'has the bag'
[18:38:31] <xq> I just want to see if it maybe produces more helpful output than Test::Deep
[18:40:45] <xq> well it produces ...something...
[18:41:24] *** Joins: superboot (~agentgasm@user/superboot)
[18:41:46] *** Quits: johnnyt (tao@2a01:7e01::f03c:92ff:fe66:2e43) (Quit: WeeChat 3.2)
[18:43:02] <xq> sweval: use Test2::V0; my $L = [{id => 1, x => 1}]; is $L, bag { item hash {field id => 1; field y => 1}; }, "all good"; done_testing
[18:43:03] <perlbot> xq: ERROR: Can't locate Test2/V0.pm in @INC (you may need to install the Test2::V0 module) (@INC contains: $BLEAD/lib/site_perl/5.35.5/x86_64-linux $BLEAD/lib/site_perl/5.35.5 $BLEAD/lib/5.35.5/x86_64-linux $BLEAD/lib/5.35.5) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[18:43:20] <xq> (I assume this is a right syntax for this)
[18:43:40] <Grinnz> you probably want an end; in the bag and in the hash
[18:43:49] <xq> good idea
[18:44:47] <xq> still it only produces a table that mentions things like HASH(0x55ec00c352d8)
[18:45:16] <xq> so either not the right way to do it, or equally not-very-helpful as cmp_bag
[18:45:32] <aquanight> sweval: use Test::More; use Test::Deep; my $L = {id => 1, x => 1}; my $R = [{id => 1, y => 1}]; cmp_deeply($L, any($R), "all good"); done_testing;
[18:45:33] <perlbot> aquanight: not ok 1 - all good #   Failed test 'all good' #   at (IRC) line 1. # Comparing $data with Any # got      : HASH(0x55c240d08048) # expected : Any of ( ARRAY(0x55c240d08120) ) 1..1 1# Looks like you failed 1 test of 1. [Exited 1]
[18:46:01] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:7d38:424f:a78c:7e2d)
[18:46:06] <aquanight> sweval: use Test::More; use Test::Deep; my $L = {id => 1, x => 1}; my $R = [{id => 1, y => 1}]; cmp_deeply($L, any(@$R), "all good"); done_testing;
[18:46:07] <perlbot> aquanight: not ok 1 - all good #   Failed test 'all good' #   at (IRC) line 1. # Comparing $data with Any # got      : HASH(0x55e99b743848) # expected : Any of ( HASH(0x55e99b743860) ) 1..1 1# Looks like you failed 1 test of 1. [Exited 1]
[18:53:26] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:56:22] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[19:08:45] *** Quits: jplesnik (~jplesnik@83.240.62.176) (Quit: Leaving)
[19:11:44] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 268 seconds)
[19:23:12] *** Quits: monkey_ (~user@190.104.116.31) (Remote host closed the connection)
[19:23:50] *** Joins: pj (~pj@ghettoforge/pj)
[19:25:17] *** Joins: nuno (~user@83.223.248.101)
[19:31:17] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[19:31:43] * GumbyPAN CPAN Upload: Alien-libvterm-0.02 by PEVANS https://metacpan.org/release/PEVANS/Alien-libvterm-0.02
[19:33:28] *** Joins: e1f (~user@141.117.1.190)
[19:41:22] *** Joins: Pali (~pali@user/pali)
[19:47:57] *** Parts: nuno (~user@83.223.248.101) (Leaving)
[19:53:18] *** Joins: hethw (~heth@46.238.32.56)
[19:53:40] <hethw> is there any elegant way to rename a $scalar
[19:53:53] <hethw> to $newscalar
[19:55:30] <lopid> inew
[19:57:51] <hethw> I can't find any docs on that
[19:59:07] <Grinnz> define rename - the variable storage is effectively only defined by its name
[19:59:14] <Grinnz> you can assign its contents to another variable
[19:59:48] <Grinnz> my $newfoo = $foo;
[20:01:58] <genio> hethw: What is it exactly that you're trying to accomplish?
[20:04:26] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 260 seconds)
[20:04:26] <Altreus> :%s/scalar\>/newscalar/g
[20:04:34] <Altreus> and cross fingers
[20:04:34] * mst preps the feline defibrillator
[20:04:36] <Altreus> maybe use gc
[20:04:49] *** Joins: monkey_ (~user@190.104.116.31)
[20:05:00] <art1> LeoNerd: Do you have any hint how to disable use of IO::Async::Loop::Epoll in IO::Async if th IO::Async::Loop::Epoll was installed in system? The reason is, that this triggers a hang if get() was called on futures
[20:05:22] <mst> art1: please don't ping specific people for general questions
[20:05:45] <lopid> an answer from anyone else is unacceptable
[20:06:09] <art1> mst: if you cloud help me with IO::Async feel free to help me, too ;)
[20:06:21] <Grinnz> art1: easiest way is to use one of the mechanisms listed here to assign a specific loop, like Poll https://metacpan.org/pod/IO::Async::Loop#new
[20:06:21] <Paperbot> Link title(s): [ IO::Async::Loop - core loop of the IO::Async framework - metacpan.org ]
[20:06:47] <Grinnz> or to instantiate an IO::Async::Loop::Poll directly
[20:07:37] <mst> art1: I don't know what the problem is yet
[20:07:45] <mst> art1: you have a claimed symptom and a random guess
[20:08:35] <art1> Grinnz: Is IO::Async::OS->LOOP_PREFER_CLASSES to set to  'IO::Async::Loop::Poll' the right way?
[20:08:42] <mst> art1: no, don't do that
[20:08:46] <mst> art1: read the documentation!
[20:08:53] <mst> art1: there is an env var and there is a global variable
[20:09:01] <Grinnz> no.
[20:09:02] <mst> art1: don't touch the IO::Async internals :(
[20:09:05] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 268 seconds)
[20:09:29] <Grinnz> the env and global vars are specifically provided for overrides
[20:09:32] <mst> IO::Async::OS is an IO::Async provided default if you *don't* configure it
[20:09:51] <mst> also you still don't know why your code is broken when it uses epoll
[20:09:57] <mst> it's obviously nothing to do with Future
[20:11:24] <art1> mst: the problem is on one DEBIAN system with IO::Async::Loop::Epoll installed the call of future with $f->get() hangs without any error message or log entries forever. On the same system, without installed IO::Async::Loop::Epoll the $f->get() works as expected.
[20:11:48] <mst> art1: that's the symptom, but you clearly haven't looked for the -problem=-
[20:12:05] <mst> art1: $f->get is just a way to run the IO::Async $loop after all
[20:12:13] <mst> art1: so you can exclude that first
[20:12:26] <mst> art1: then you run 'strace' to look at the system calls to see where it's hanging
[20:12:49] <mst> art1: currently you effectively haven't turned on logging (strace), so, yes, you won't get any information because you never asked :D
[20:15:31] <art1> mst: the strace reports was not very chatty
[20:16:44] <mst> art1: it'll contain the poll() and epoll() system calls
[20:16:55] <mst> if those aren't the difference, you need to debug the problem further
[20:17:24] <art1> the last entries are "epoll_pwait_resumed"
[20:17:49] <xq> art1: if you can pastebin a minimal testcase I can run it on debian to see if it is reproducible
[20:18:46] <mst> art1: you'll need to share more information than that if you want us to debug it for you, sorry
[20:19:07] <mst> art1: this is like saying 'apache exited non-zero' and not showing us the config file ;)
[20:19:16] <art1> The problem is reproduceable with Archive::BagIt (https://metacpan.org/pod/Archive::BagIt)  with testcase t/base.t on standard Debian Bullseye
[20:19:18] <Paperbot> Link title(s): [ Archive::BagIt - The main module to handle bags. - metacpan.org ]
[20:19:55] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[20:20:07] <mst> oh now that's interesting
[20:21:07] <art1> The testcases are valid if no IO::Async::Loop::Epoll is installed, the testcases hang if the module is found in %INC
[20:21:51] <xq> it's good that you have posted an actual testcase but this is not exactly minimal
[20:22:11] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[20:23:14] <art1> I can't and don't want to exclude that I used IO::Async incorrectly. But the behavior was quite strange and cost me almost a day of debugging today. I would be grateful for any hints where the error actually lies and how to avoid it.
[20:24:39] <mst> I'd be happy to help you debug this but if you don't show me any code or any strace output I can't
[20:25:26] <art1> xq: perl -MArchive::BagIt -e 'Archive::BagIt->make_bag("/tmp/existingdir");'
[20:25:43] <art1>  mst: moment
[20:25:56] <mst> though if there's another piece of code doing the same thing
[20:26:07] <mst> if you did make a mistake, apparently you aren't the only one :)
[20:26:48] * GumbyPAN CPAN Upload: EAV-XS-0.6.5 by TVV https://metacpan.org/release/TVV/EAV-XS-0.6.5
[20:26:50] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[20:28:01] <LeoNerd> From the overall description above it soudns like "there's a bug somewhere", so the fix is to fix it
[20:28:04] <LeoNerd> Not avoid it
[20:30:21] <mst> art1: the last hundred or so lines of the strace would be a good start
[20:30:30] <mst> if it's entering epoll() and never leaving that's -weird-
[20:30:50] <mst> OTOH if it's calling epoll() in a loop because something didn't complete, that's a different matter
[20:30:50] <art1> https://l.perl.bot/p/o23y52
[20:30:51] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[20:31:38] <art1> LeoNerd: I want to fix it, if I could catch it ;)
[20:32:34] <LeoNerd> strace doesn't really show much here. it's in an epoll pwait. OK fine
[20:32:52] <LeoNerd> Useful would be to see the code and where it's being called. Also why are you ->get'ing in the first place?
[20:33:03] <LeoNerd> The fact you are calling ->get in the first place *already* suggests YDIW
[20:33:31] <mst> I dunno, doing ->get on an 'application is complete' type future is a perfectly reasonable pattern
[20:33:38] <mst> just not anywhere else
[20:33:54] <LeoNerd> Perhaps... hence "suggests"
[20:34:03] <art1> I have dumped the structure of future before $f->get(), the only difference I found was the diferent value of ok "loop". In the one case it was IO::Async::Loop::Epoll. In the other it was "IO::Async::Loop::Poll"
[20:34:10] <mst> art1: that's not helpful
[20:34:17] <LeoNerd> Where are you calling it?
[20:34:25] <mst> we need to know what that future is and why you're calling ->get on it and *where* in your code you're doing that
[20:34:27] <LeoNerd> I want lots of details. You've given me maybe 2% of what I might need
[20:34:37] <mst> yeah, I keep asking for more details :(
[20:35:22] <art1> This was the line: https://metacpan.org/release/ART/Archive-BagIt-0.083/source/lib/Archive/BagIt/Role/Manifest.pm#L154
[20:35:23] <Paperbot> Link title(s): [ lib/Archive/BagIt/Role/Manifest.pm - metacpan.org ]
[20:35:42] <LeoNerd> ... wha?
[20:35:45] <mst> oh, BagIt is your code, you never explained that
[20:35:58] <mst> ... yeah, that code makes no ... what :D
[20:36:00] <LeoNerd> Yeah so much "don't do that"
[20:36:52] <art1> LeoNerd: Ok, what was wrong usage, I am ready to learn and fix my mistakes
[20:37:08] <mst> art1: looping over futures calling ->get on them like that is completely fucked
[20:37:20] <LeoNerd> The one-shot temporary object, the loop on ->get... the names of some of the bits
[20:37:20] <mst> it'll accidentally work occasionally if the ordering of operations happens to be exactly right
[20:37:25] <mst> which is probably how it appeared to work
[20:38:05] <LeoNerd> Hrm... Imean, that *shouldn't* make a difference.. It's just weird to do it this way
[20:38:28] <LeoNerd> Also on a purely code-style comment, your whitespacing is all over the place. Can you pick a more consistent style?
[20:38:40] <LeoNerd> 156:   $async_loop->remove( $function);  <== e.g. 
[20:38:42] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[20:38:55] <art1> mst: This is not helpful. To understand what I am doing wrong, I need to guided how to do it better :)
[20:39:01] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:39:18] <LeoNerd> I'd suggest:doin this *at all*
[20:39:35] <LeoNerd> you have one tiny function in the middle of... well I don't know what, Idon't know the surrounding context
[20:39:39] <LeoNerd> That isn't how you do async
[20:40:19] <mst> art1: ...
[20:40:25] <mst> art1: I am trying to explain the problems first
[20:40:30] <mst> art1: where is this code called and why?
[20:40:57] *** Joins: zyweo (~Svew@user/zyweo)
[20:41:03] <mst> art1: "this part of the code will need changing, but you still didn't tell me enough to know what to change it *to*" is as helpful as I can be with the information you gave me so far
[20:41:33] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:42:23] *** Quits: monkey_ (~user@190.104.116.31) (Remote host closed the connection)
[20:45:50] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Remote host closed the connection)
[20:47:57] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[20:48:02] <art1> calc_digests() should calc the digests over files in parallel using _fill_digest_hashref(). _fill_digest_hashref expects a bagit, and a localname, and returns a hashref with *specific* digest calculated indirectly using digest_callback.
[20:48:23] <LeoNerd> Yes, I can roughly see what's going on
[20:48:27] <mst> yes, but are you inside a loop when that's called?
[20:48:37] <LeoNerd> Is IO::Async being used anywhere /else/ here?
[20:48:46] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[20:49:27] <mst> LeoNerd: this honestly feels a bit like the same pattern as Parallel::Map
[20:49:52] <LeoNerd> Yes
[20:50:01] <LeoNerd> I suspect it would be a ~5line function were that used intead
[20:50:12] <LeoNerd> It seems to be reïmplementing the same idea
[20:50:16] <Altreus> that seems to adequately describe "calc [anything] in parallel"
[20:50:20] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:50:25] <Altreus> (and return)
[20:50:28] <Grinnz> two options: if you want it to block, it needs to use IO::Async::Loop->really_new to get a unique loop; if you want it to share the loop with the global application, you need to not use ->get and instead return a Future and chain further behavior off that like a normal async program
[20:50:30] <mst> except mine's explicitly fork based to allow the contents of the block to be sync
[20:50:47] <mst> which might or might not be an improvement
[20:50:50] <mst> oh, yeah, except
[20:50:52] <mst> I see wehat you mean
[20:51:46] <mst> though now it occurs to me that Parallel::Map should probably be calling really_new to get its own loop to avoid confusing other code
[20:52:14] <art1> LeoNerd: it is only used in calc_digest() and it is used in https://metacpan.org/release/ART/Archive-BagIt-0.083/source/lib/Archive/BagIt/Role/Plugin.pm#L16, and in https://metacpan.org/release/ART/Archive-BagIt-0.083/source/lib/Archive/BagIt/Role/OpenSSL.pm#L22
[20:52:15] <Paperbot> Link title(s): [ lib/Archive/BagIt/Role/Plugin.pm - metacpan.org ] [ lib/Archive/BagIt/Role/OpenSSL.pm - metacpan.org ]
[20:52:38] <Grinnz> ok, so it's only used in blocking operations
[20:52:45] <Grinnz> so you should get a ->really_new
[20:53:01] * mst thinks "port to Parallel::Map and I'll fix that there"
[20:53:09] *** Joins: ghoust (~ghoust@178.73.192.138)
[20:53:26] <LeoNerd> Yah.. you're not /really/ writing an async program here
[20:53:34] <LeoNerd> You sortof have the wrong design shape
[20:53:49] <Grinnz> but the design shape you need, if you want to shove async into a sync program without async/await
[20:54:33] <xq> Archive::BagIt::Role::OpenSSL - A role that handles plugin loading
[20:54:42] <xq> now that's an interesting description
[20:54:49] <Altreus> bag it and tag it
[20:55:46] <art1> LeoNerd: first, the stuff in https://metacpan.org/release/ART/Archive-BagIt-0.083/source/lib/Archive/BagIt/Role/Manifest.pm#L154 should be parallel executed via IO::Async. If that works fine, it would be helpful to fix the IO in https://metacpan.org/release/ART/Archive-BagIt-0.083/source/lib/Archive/BagIt/Role/OpenSSL.pm#L22 to be a real async IO.
[20:55:46] <Paperbot> Link title(s): [ lib/Archive/BagIt/Role/Manifest.pm - metacpan.org ] [ lib/Archive/BagIt/Role/OpenSSL.pm - metacpan.org ]
[20:55:52] <mst> LeoNerd: does http://paste.scsys.co.uk/596107 look equivalent?
[20:55:53] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[20:56:16] <LeoNerd> Meh.. I'm losing energy on this one
[20:56:29] <xq> art1: this code is really big and nasty and terrifying, all of it
[20:56:52] <xq> art1: regardless of if you can get this current problem fixed you should get someone to review it for you ASAP
[20:57:14] <LeoNerd> If you want me to fix it you can pay my time to fix it, or pay my time to write a book to tell everyone how to fix it. Alternatively, I can get back to doing something constructive like adding new perl features
[20:57:18] <mst> LeoNerd: I dunno, using IO::Async to fork-parallelise some crap rather than the various awful cpan modules that bang rocks together is kinda why I wrote the module we've mentioned here
[20:57:21] * LeoNerd => to work on `multi method`
[20:57:24] <mst> and yeah, you go on
[20:57:45] <mst> art1: see, this is why I asked you to not ping people, you've wasted a bunch of LeoNerd's time for no good reason at all. Please don't do that again.
[20:58:29] *** Quits: ghoust (~ghoust@178.73.192.138) (Quit: ghoust)
[20:59:59] <art1> to be focused. The current problem is, what is wrong with the loop in calc_digests(). Why it works without epoll, but hangs with. If I understand the underlying problem I could fix that. There is no need to check the whole code. The problem must be related in the current code of this particular function.
[21:00:12] <mst> art1: did you try http://paste.scsys.co.uk/596107 yet?
[21:00:12] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[21:00:36] <LeoNerd> It's a fun question. It's probably a bug. A bug to do with something not being used in the way I originally expected because you're doing weird things
[21:00:43] <LeoNerd> We -could- spend the time to find that bug. It's a valid bug
[21:00:51] <LeoNerd> But the fact that nobody else has yet encountered it suggests it's a rare use-case bug
[21:01:00] <LeoNerd> Easier would be to just avoid that usecase by not doing weird things
[21:01:08] <LeoNerd> Stop doing the weird, and the bug won't matter
[21:01:36] <art1> mst: This does not help me to understand the error in the code or my misunderstanding in IO::Async. This is only a hint to another module.
[21:02:16] <LeoNerd> The core problem is   $f->get for @futures;   is a terrible thing
[21:02:17] <LeoNerd> don't do that
[21:02:25] <LeoNerd> Future->needs_all(@f)->get   would be neater
[21:02:34] <LeoNerd> But that's still kinda terrible. Don't ->get. At all. Ever.
[21:02:34] <art1> Does a dump of this help?
[21:02:40] <LeoNerd> *: for certain cases of ever.
[21:02:41] <mst> art1: you have two choices. (1) try what I suggested so that I know more about the situation. (2) tell me you don't actually want to learn anything.
[21:02:55] <Grinnz> yeah, that's probably the real problem - ordering ->gets of several parallel futures is a bug
[21:03:01] <Grinnz> use ->needs_all instead
[21:03:01] <mst> because right now, I can't help you understand anything if you're just going to fucking argue every time I try to help you
[21:03:26] <LeoNerd> If you *EVER* call ->get from anywhere that is not the toplevel main script, that is almost certainly a wrong design
[21:03:34] <art1> Grinnz: Seems a useful hint. I want to check this soon
[21:03:41] <LeoNerd> If the toplevel main script does something like   exit MyApp->new->run->get;   then that could be considered OK
[21:03:42] <mst> art1: PLEASE TRY WHAT I ASKED YOU TO TY
[21:03:46] <Grinnz> and also, if you call ->get from here, you *must* use ->really_new to get your loop
[21:03:51] <LeoNerd> If you call ->get anywhere else for any other reason, that's wrong
[21:04:14] <LeoNerd> Now, art1 can listen to what Isaid above, or not. I don't really care. Go fix that or not. That's about all I'm going to say on the subject until that gets fixed
[21:04:15] <mst> art1: this will help me test my understanding of what your IO::Async code is even supposed to do
[21:04:16] <art1> LeoNerd: That was helpful formy understanding. Thx
[21:04:38] <mst> LeoNerd: yep, and I'll help him fix it just as soon as he actually lets me help rather than arguing
[21:06:23] <mst> art1: hello?
[21:07:32] * mst sighs
[21:08:24] <xq> Grinnz: I don't get why would the ordering matter
[21:08:43] <xq> it seems like they are just doing someting like md5sum of several files in parallel
[21:08:44] <art1> Last note, I don't want to argue or get on people's nerves. I just want to understand things. I am not a native English speaker, and the documentation of IO::Async is hard to understand for me. Especially since asynchronous IO is not without its own problems. No one should feel offended because of me, I'm just trying to understand things. 
[21:08:52] <Grinnz> xq: if you choose to call ->get on one that hasn't completed yet, but another one has, the loop could just spin forever waiting for the other one
[21:08:58] <mst> art1: I am trying to help you understand!
[21:09:02] <mst> art1: you keep ignoring me :(
[21:09:05] <xq> Grinnz: interesting
[21:09:16] <Grinnz> xq: this is why convergent futures or promises exist
[21:09:27] <xq> yeah, I know
[21:09:39] <mst> xq: it shouldn't, and sensible code will return the results in the right order at the end without doing that
[21:10:11] <Grinnz> well, sensible code would use the convergent future
[21:10:15] <xq> but it looked to me like the worst case here wouldbe that they would just compute their md5sums (or whatever) sequentially instead of parallel
[21:10:27] <xq> but that is still not a 'hangs forever' scenario
[21:10:36] <Grinnz> depends on how the loop chooses to organize things?
[21:10:42] <mst> art1: why are you refusing to try a fixed piece of IO::Async code in order to test a solution?
[21:10:44] <LeoNerd> It -might- hang forever, depending on what's going on
[21:10:54] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[21:10:58] <xq> I guess TIL
[21:11:02] <LeoNerd> Suppose you have three futures, f[2] has just failed, and its failure means that f[0] will never complete, ... it'll always sit pending
[21:11:08] <LeoNerd> needs_all() would notice the failure and abort
[21:11:16] <LeoNerd> ->get for @futures  would never see it and sit pending forever
[21:11:18] *** Joins: gast0n (~g4570n@user/gast0n)
[21:11:25] *** Parts: art1 (~romeyke@p200300ccdf040f00ecef407ec04eb5e3.dip0.t-ipconnect.de) ()
[21:11:29] <LeoNerd> The moment you have created a future you must _ALWAYS_ babysit it
[21:11:39] <LeoNerd> .... or the person who needs the advice can just leave without listening
[21:11:41] <LeoNerd> *shrug*
[21:12:21] <LeoNerd> So about that `multi method` then. I am beginning to feel that it maaaay require a new module
[21:12:30] <LeoNerd> That simply Object::Pad + MultiSub isn't going to do it
[21:12:45] <mst> I suspect he assumed that Parallel::Map was something completely different because he didn't bother to look and realise it was, in fact, an implementation of exactly the same IO::Async pattern
[21:13:01] <LeoNerd> The combination of `multi` + `method` needs a whole bunch of new custom behaviour that really does need to know about both things, and can't be implemented by simply combining the two parts individually
[21:13:24] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:13:53] <mst> how so?
[21:14:01] <Grinnz> mst: as for really_new, since pmap does call get then i agree it should be using really_new
[21:14:13] <mst> Grinnz: yeah, I'm going to do that later
[21:14:33] <mst> in fact, I think I'll make it call really_new per-call so it has its own isolated loop and then lets it go away afterwards
[21:14:34] <LeoNerd> There's a few small bits and pieces that might work, but the main killer is   class A { multi method m($x) { say "This should be called" } }  class B isa A { multi method m($x, $y) {} }   B->new->m("one arg");
[21:14:37] <mst> rather than keep one lying around
[21:14:49] <LeoNerd> I.e. that the search for `multi method` candidates needs to walk down inheritence
[21:14:51] <LeoNerd> .. oh and roles
[21:14:53] <mst> that way if somebody decides to be insane and do parallel_map inside parallel_map or whatever it'll behave how they expect
[21:14:54] <xq> what is this multi method thing (for those of us who were writing perl all day without following the discussions or news much) ?
[21:15:04] <Grinnz> mst: indeed
[21:15:16] <huf> xq: dispatching on all the arguments, not just the special first one
[21:15:19] <mst> LeoNerd: ohh, right, figuring out how to aggregate the cases across inheritance
[21:15:31] <LeoNerd> Yeah. that's the main problem bit
[21:15:32] <xq> huf: so like C++ overloading?
[21:15:35] <Grinnz> yep
[21:15:39] <LeoNerd> Not -really- like it, no
[21:15:48] <LeoNerd> Like you might imagine how C++ works if you don't know C++
[21:15:54] <xq> compile time or run time?
[21:15:55] <LeoNerd> But massively *not* like how C++ actually works
[21:16:02] <LeoNerd> What is this "compile time" that you speak of?
[21:16:06] <xq> okay
[21:16:13] <LeoNerd> Perl is a dynamic language, so obviously it's dynamic dispatchj
[21:16:28] <xq> so runtime dispatch based on mutiple arguments
[21:16:34] <LeoNerd> Until we have type declarations on variables and expressions, we can't have static dispatch
[21:16:34] <mst> xq: enough vaguely like it at the surface level that you'll be slightly less lost from thinking "a bit like C++" but only slightly :)
[21:16:39] <LeoNerd> Also we don't want static dispatch. It's terrible
[21:16:58] <LeoNerd> It's a tiny speed boost in limited cases if you care about such things. If you really cared about such things you wouldn't be writing in Perl
[21:17:59] <xq> do you already have an example of syntax that will work once its implemented?
[21:18:08] <LeoNerd> The one I just wrote above
[21:18:10] <xenu> well, virtual methods in c++ are dispatched at runtime
[21:18:15] <mst> I mean, he typed one out into the channel already
[21:18:30] <LeoNerd> As syntax that parses right now, it just doesn't actually *work*
[21:19:57] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[21:21:06] <xq> so I see in the example that it can select an overload based on the number of arguments
[21:21:21] <xq> what other selection criteria are there other than this?
[21:21:36] <LeoNerd> Currently, nothing
[21:21:46] <LeoNerd> What else would you suggest that *can* be implemented currenetly?
[21:22:09] <xq> I don't know but I understand the picture now, so thanks for bringing me up to date
[21:22:30] <LeoNerd> https://metacpan.org/pod/Syntax::Keyword::MultiSub#TODO -- I also draw your attention to the third bulletpoint here
[21:22:31] <Paperbot> Link title(s): [ Syntax::Keyword::MultiSub - multiple dispatch on subroutines - metacpan.org ]
[21:22:35] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[21:22:37] <xenu> it isn't a serious suggestion but: context :P
[21:22:42] <xenu> as in list/scalar
[21:22:48] <LeoNerd> xenu: Go away :P
[21:22:49] <mst> yep, I was right, art1 didn't bother to check how Parallel::Map worked
[21:23:08] <xq> xenu: gross
[21:23:18] <LeoNerd> (which is the polite version of what I said out loud when I read that)
[21:23:55] <LeoNerd> Actually on a slightly-related note, I keep meaning to write a set of  :void :scalar :list  sub attributes, to force the return context within a sub
[21:24:12] <mst> oooh yes please
[21:24:13] <LeoNerd> 99 times out of 100, when you write a sub you know what context you /intend/ it to have. So rather than letting it be flexible, it should force it
[21:24:29] <LeoNerd> sub count_the_arr :scalar { return @array; }   <== /always/ acts like  return scalar @array;
[21:24:50] <mst> LeoNerd: always good to be specific about how to enter your sub
[21:25:04] <LeoNerd> Hrm.. well this is more about how you leave ;)
[21:25:20] <mst> :void :scalar :list :fakephonenumber
[21:25:31] <LeoNerd> :ghost
[21:25:37] <Grinnz> ++
[21:25:43] <mst> smells like teen spirit
[21:26:01] <LeoNerd> Didn't Simon and Garfunkel remark that there must be 50 ways to return from a sub?
[21:27:06] <LeoNerd> So far I can only count 8: return void, return scalar, return list, throw, goto, next, last, redo
[21:27:27] <alh> Implied return 
[21:28:34] <mst> LeoNerd: IIRC Return::MultiLevel optionally uses a Zefram module that can do non-local returns its own way
[21:28:40] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[21:28:59] <LeoNerd> Mmm
[21:29:23] <mst> like IIRC there's some sort of upleveling
[21:29:39] <mst> also while I think it's now only on backpan tobyink had a return::whence
[21:30:00] <mst> (whether these are -relevant- is a different question of course)
[21:33:30] <xenu> my main worry about multi sub is how will they interact with currently unimplemented features of signatures
[21:34:35] <LeoNerd> What currently-unimplemented features are those?
[21:34:39] <xenu> who knows
[21:34:43] <xenu> that's the problem!
[21:34:47] <LeoNerd> The current impl. is *massively* fragile and very coupled with the exact way op_argcount works
[21:34:56] <LeoNerd> Yeah... if only someone on the PSC would give that a nudge
[21:34:57] <LeoNerd> ... >.>
[21:46:38] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[21:47:05] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[21:49:53] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[21:52:47] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 268 seconds)
[21:56:58] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[22:00:02] <haarg> Return::MultiLevel uses Scope::Upper
[22:03:29] *** Quits: llh (~llh@user/llh) (Ping timeout: 268 seconds)
[22:04:23] <mst> oh, shit, vpit not zefram, my mistake
[22:13:35] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[22:21:04] <gordonfish> Hope everyone had a good Halloween.
[22:21:50] <gordonfish> Something I learned, if you're going to write an algorithm to programatically open the puzzle box, make sure to use the GNU Cenobite Compiler, or you'll have one hell of a code review.
[22:28:49] <gordonfish> Lead Cenobite has been especially bitter since loosing the rights to Pinterest
[22:32:42] <cjac> hi.
[22:33:29] <cjac> do you mean to tell me that the maximum size of an rsa key that I can create using Crypt::PK::RSA is 256?  This is less than the 2048 which NIST advises.  halp?
[22:33:48] <cjac> maybe it's the maximum exportable bit length.  some holdout from the cold war?
[22:34:28] <ilmari> cjac: bytes != bits
[22:34:34] <ilmari> perlbot: eval 256 * 8
[22:34:35] <cjac> oh, those are bytes?
[22:34:36] <perlbot> ilmari: 2048
[22:34:45] <ilmari>   size => 256, # integer: key size in bytes
[22:34:52] <ilmari> my $size = $pk->size;
[22:34:53] <ilmari> # returns key size in bytes or undef if no key loaded
[22:35:01] <cjac> thank you, ilmari.  My brain was trying to tell me that's what was happening, but I wasn't listening.
[22:35:10] <ilmari> litearly _every_ mention of "size" in the POD says bytes
[22:35:28] <ilmari> and it says up to 512
[22:35:49] <ilmari> # $size .. key size: 128-512 bytes (DEFAULT is 256)
[22:36:07] <cjac> yeah, I ignored everything after the b except for the s.
[22:36:20] <cjac> I apprecaite the clue-bye-four.
[22:36:54] <ilmari> :-P
[22:37:01] * GumbyPAN CPAN Upload: App-CPANtoRPM-1.11 by SBECK https://metacpan.org/release/SBECK/App-CPANtoRPM-1.11
[22:38:38] <gordonfish> ilmari: Curious that it takes the size in bytes and not bits, when most command line RSA tools (e.g., openssl.)
[22:39:20] <gordonfish> s/\Q.)/) take bits./
[22:39:43] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[22:40:05] <ilmari> yeah, it's odd. but at least it's documented
[22:41:30] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[22:41:46] <gordonfish> s/\bbye\b/by/
[22:46:31] <mst> cjac: I wonder if a patch offering a 'bits =>' constructor option and an accessor might not be worth having just to make other people's lives less confusing in future
[22:47:28] <gordonfish> I can do that in a.. bit
[22:55:24] *** Joins: kensanata (~user@user/kensanata)
[23:04:54] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:10:35] <xq> is there a recommended way to automatically stop the test run (using prove) upon encountering a test failure?
[23:11:55] <xq> I see Test::Most die_on_fail and bail_on_fail - this must be it?
[23:12:04] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[23:15:54] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:15:58] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:16:01] <Grinnz> https://metacpan.org/pod/Test2::Plugin::BailOnFail for Test2
[23:16:01] <Paperbot> Link title(s): [ Test2::Plugin::BailOnFail - Automatically bail out of testing on the first test failure. - metacp... ]
[23:16:17] <Grinnz> i believe there was a way to do it through env but don't remember
[23:18:52] <mst> PERL5OPT=-MTest2::Plugin::BailOnFail ?
[23:19:32] *** Server sets mode: +nt 
[23:23:10] *** Joins: first1 (last1@modemcable039.93-160-184.mc.videotron.ca)
[23:23:12] *** Joins: v^ (~v@user/ctrl)
[23:24:52] *** Quits: last1 (last1@modemcable039.93-160-184.mc.videotron.ca) (Ping timeout: 260 seconds)
[23:26:44] *** Quits: v` (~v@user/ctrl) (Ping timeout: 260 seconds)
[23:30:32] *** v^ is now known as v`
[23:35:36] *** Quits: TitanOfOld (titan@gentoo/developer/TitanOfOld) (Quit: ZNC - https://znc.in)
[23:36:00] *** Joins: TitanOfOld (titan@gentoo/developer/TitanOfOld)
[23:36:03] *** Joins: pucara (~i@181.92.84.206)
[23:44:56] *** Quits: bmeneg (~bmeneg@2804:828:f233:5075:e23e:22bf:327a:21ed) (Remote host closed the connection)
[23:46:22] <cjac> ilmari: thank you.  https://github.com/cjac/google-auth-library-perl/commit/f4ca7123e246cf3ca90c7b0de9e48a6699255be1
[23:46:48] <cjac> mst: I think that library is just a wrapper around libtomcrypt
[23:48:57] <mst> cjac: no reason you can't provide a bit of sugar to be clearer though
[23:51:48] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[23:54:34] <ilmari> cjac: that repo seems to be private?
[23:55:13] <ilmari> not that I actually care …
[23:56:14] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 246 seconds)
[23:57:10] * GumbyPAN CPAN Upload: Test-Expander-1.0.0 by JSF https://metacpan.org/release/JSF/Test-Expander-1.0.0
[23:58:03] *** Joins: whynot (~whynot@46.96.147.217)
[23:58:55] <gordonfish> Re: <mst> cjac: I wonder if a patch offering a 'bits =>' constructor option and an accessor might not be worth having just to make other people's lives less confusing in future
[23:58:59] <gordonfish> I've looked it over. ->new doesn't take any size parameter. ->generate_key, and ->size do. The latter takes no args, and ->generate_key uses positional, not named parameters.
[23:59:24] <ilmari> I guess you could add a generate_key_bits method
[23:59:50] <gordonfish> That's what I was about to ask, if _bits counter parts would be good enough
