[00:04:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[00:07:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:17:29] *** Joins: klovett_ (~klovett@107.127.17.177)
[00:19:14] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 256 seconds)
[00:31:33] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[00:34:56] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:edb8:26fc:8987:31e9)
[00:35:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:39] *** Quits: neceve (~quassel@2.26.93.228) (Read error: Connection reset by peer)
[00:36:53] *** Joins: aeth (~aeth@user/aeth)
[00:38:39] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 268 seconds)
[00:55:29] <bsima> oh interesting, i wasn't aware Idris 2 chose Chez for their backend
[00:55:35] <Franciman> :D
[01:00:15] <lagash> Zipheir: I believe you mean "probably safe" ;P
[01:18:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:19:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:22:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[01:22:41] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[01:22:42] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:23:54] *** Joins: aeth (~aeth@user/aeth)
[01:24:49] *** Joins: jao (~jao@static-68-235-44-25.cust.tzulo.com)
[01:33:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[01:35:20] *** Joins: aeth (~aeth@user/aeth)
[02:02:29] *** Quits: evdubs (~evdubs@user/evdubs) (Quit: Leaving)
[02:02:56] *** Joins: evdubs (~evdubs@user/evdubs)
[02:22:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:24:23] *** Joins: aeth (~aeth@user/aeth)
[02:32:39] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[02:34:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:35:52] *** Joins: aeth (~aeth@user/aeth)
[02:38:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:40:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:48:37] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[02:55:26] *** Joins: m455 (~m455@user/m455)
[03:00:36] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 250 seconds)
[03:29:13] *** Joins: ski (~ski@remote12.chalmers.se)
[03:32:33] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:edb8:26fc:8987:31e9) (Ping timeout: 268 seconds)
[03:36:35] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:42:40] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[04:00:48] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[04:03:00] *** Quits: klovett_ (~klovett@107.127.17.177) (Ping timeout: 250 seconds)
[04:03:59] *** Joins: seninha (~seninha@user/seninha)
[04:05:18] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[04:05:38] *** Joins: seninha (~seninha@user/seninha)
[04:08:17] *** Quits: jao (~jao@static-68-235-44-25.cust.tzulo.com) (Ping timeout: 240 seconds)
[04:08:50] *** Joins: Everything (~Everythin@37.115.210.35)
[04:09:11] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:10:48] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 250 seconds)
[04:20:49] *** Joins: deltab (~deltab@user/deltab)
[04:33:42] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:33:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[04:36:08] *** Joins: aeth (~aeth@user/aeth)
[04:43:53] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[05:02:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[05:04:23] *** Joins: klovett (~klovett@107.127.17.177)
[05:35:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:47:33] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:50:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:52:38] *** Joins: aeth (~aeth@user/aeth)
[06:21:08] <mdhughes> I do write large programs in Scheme, and types would just be a nuisance. I do have asserts in reasonable places, but mostly don't pass a pig to an airline, and you won't see it try to fly.
[06:22:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:23:22] <mdhughes> I use fixnum operators most places, and have *never* had a type error from them, because I only pass around integers in places where they'd be applied.
[06:24:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:25:36] <mdhughes> Actual errors are things like "I didn't draw out my UI on a coding grid, so I'm off by a few pixels here", or "this level design algorithm may never terminate if all spaces are filled". Stuff where type BDSM would never help, only thinking helps.
[06:27:24] <mdhughes> A computer program cannot solve your coding problems. Even an "AI", if such existed, would just be another fallible, chaotic mind trying to code the same way we do.
[06:29:18] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:29:50] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:34:40] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[06:34:44] *** Joins: Techcable (~Techcable@168.235.93.147)
[06:35:22] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:47:44] *** Joins: frost (~frost@user/frost)
[07:50:59] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[08:13:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:17:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[08:19:28] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[08:23:25] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[08:34:46] *** Joins: Rue (~rue@2001-b011-1000-11b6-d514-8713-9843-479b.dynamic-ip6.hinet.net)
[08:42:56] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[08:45:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:52:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:54:04] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[08:54:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:59:12] *** Joins: daviid` (~user@179.210.52.91)
[09:01:14] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 268 seconds)
[09:02:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:02:57] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[09:03:06] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[09:03:29] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[09:03:32] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:06:37] *** daviid` is now known as daviid
[09:08:56] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[09:14:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[09:16:24] *** Joins: jao (~jao@68.235.43.13)
[09:28:02] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:35:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:38:09] *** Joins: frost (~frost@user/frost)
[09:47:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[09:49:34] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[09:52:42] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[09:54:57] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[10:02:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[10:04:02] *** Joins: aeth (~aeth@user/aeth)
[10:17:49] *** Joins: thevishy (~Nishant@2405:201:f005:c007:60d1:4243:e46a:fb96)
[10:24:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[10:49:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1493:7e75:a195:6d65) (Ping timeout: 240 seconds)
[10:54:47] *** Joins: frost (~frost@user/frost)
[10:55:34] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:02:51] <ns12> Zipheir: Franciman: "I'd be more inclined to use Scheme for big programs if it had static typing, in all honesty." - So, do you use a language in the ML family for writing large programs?
[11:06:56] *** Quits: jao (~jao@68.235.43.13) (Remote host closed the connection)
[11:08:09] <ns12> mdhughes: "A computer program cannot solve your coding problems..." - Aren't there programs out there where we feed in some sample inputs and corresponding outputs, and the program will generate a function using "AI"?
[11:08:09] <ns12> e.g. Symbolic regression using genetic programming implemented in Lisp.
[11:08:52] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:b24:c81d:3f3e:42c4)
[11:09:02] <ns12> But I don't know how practical these "AI" code generation tools are.
[11:10:11] *** Quits: thevishy (~Nishant@2405:201:f005:c007:60d1:4243:e46a:fb96) (Quit: Leaving)
[11:23:43] *** Quits: Rue (~rue@2001-b011-1000-11b6-d514-8713-9843-479b.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[11:33:14] <mdhughes> There are programs which basically do madlibs or markov chaining with code. MS has one they trained on all of github, illegally using copyrighted code, but it's still horrible.
[11:34:26] <mdhughes> At best, what is it, co-pilot? does about as well as a drunk, uneducated intern copy-pasting from stackunderflow.
[11:38:46] <ns12> mdhughes: "MS has one they trained on all of github, illegally using copyrighted code ..." - That's why one should use https://github.com/spwhitton/git-remote-gcrypt as much as possible when uploading code to GitHub, GitLab, etc.
[11:39:23] <ns12> What is "madlibs"?
[11:39:41] <mdhughes> I never uploaded to github, and them selling out to MS just vindicated my "this is not a place of honor" instinct. I do have some stuff on gitlab, but it's all BSD licensed.
[11:41:31] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:41:37] <mdhughes> Kids game. Choose some words, fill in the blanks. The ___ put the ___ in the ___.
[11:41:40] <mdhughes> https://archive.org/details/madmadmadmadmadl0000pric/mode/2up
[11:42:54] <ns12> That looks like the C preprocessor or code templating.
[12:01:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:03:31] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:25:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:36:10] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[12:38:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:40:29] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[12:46:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:54:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[12:56:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:59:03] *** Joins: s-liao20 (~s-liao@101.86.96.21)
[13:01:11] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:21:52] <dpk> remember, it's only type BDSM if it's consensual. otherwise it's type abuse
[13:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:37:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:42:01] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:b24:c81d:3f3e:42c4) (Ping timeout: 245 seconds)
[14:03:53] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[14:13:43] *** Quits: s-liao20 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:21:53] <Franciman> ns12: yes, i do use languages in the ML family
[14:21:57] <Franciman> for larger programs
[14:22:25] <Franciman> unfortunately i am not so good at coding, so types help me
[14:26:37] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 240 seconds)
[14:32:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:59:39] <mdhughes> I do feel abused by most strongly typed languages.
[15:01:16] <Franciman> and i do feel stabbed in the back by most dynamically typed languages
[15:02:10] <mdhughes> Why? They're just doing what you tell them, same as any language. Except dynamic will try to do something useful with whatever you give it.
[15:03:17] <sham1> Dynamic is only useful when the types are strong
[15:03:28] <sham1> Type coercion is just the worst
[15:04:23] <Franciman> mdhughes: because i can't do a refactoring
[15:04:23] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:4cc9:4184:da45:6beb)
[15:04:33] <Franciman> and i am not good enough to write code that will never be modified
[15:04:58] <mdhughes> That's not true, either. Making strings, for instance, in a strong/static system is fucking nightmarish. In dynamic you send -description or -toString or whatever to each object, and it's nice. In very loose systems like JS, everything can be a string!
[15:05:24] <mdhughes> If you think you're bad at programming, using a system that makes you worse at programming isn't going to help.
[15:05:38] <Franciman> it's the complete opposite
[15:05:45] <mdhughes> Only learning discipline and thinking will make you better, and a computer program *can not* help you at that.
[15:06:06] <Franciman> changing an assumption in your code
[15:06:17] <Franciman> requires you to remember every place you used it
[15:06:24] <Franciman> and dynamically typed languages DO NOT help you
[15:06:31] <Franciman> so you introduce zillions of errors 
[15:06:45] <Franciman> now you may argue that well thought code doesn't require you to change assumptions
[15:06:49] <mdhughes> That's poor discipline, then.
[15:06:50] <Franciman> hence my statement: i can't properly code
[15:07:10] <Franciman> mdhughes: so you prefer going to russia walking instead of taking the train
[15:07:16] <Franciman> because it's only a matter of discipline
[15:07:22] <Franciman> and there is no need in being cast in a vagon
[15:07:24] <Franciman> for 10 hours
[15:08:31] <mdhughes> Like, if tomorrow I decide all points in my library should be records instead of 2-vectors, I still only need to change the constructors. I bet it'd take <2 hours to do, across 10-20,000 LOC.
[15:08:36] <sham1> With a strong and static typing discipline, the compiler has more opportunities to prove more properties about the program ahead of time
[15:08:46] <Franciman> this is true as well
[15:09:06] <mdhughes> LEARN to think. Learn to to use good discipline. And then you won't suck at programming.
[15:09:08] <Franciman> mdhughes: and with my types i can express in types how the library is intended to be used
[15:09:20] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:09:22] <Franciman> and properties that should be guaranteed by THE COMPILER
[15:09:33] <Franciman> not by the assertion that fails when the user is using my software
[15:09:43] <mdhughes> Types won't ever catch anything above matching values in two places. They can't tell you how a thing is used. If your program logic is wrong, the types can't help yo.
[15:09:51] <Franciman> depends on the types
[15:10:03] <Franciman> types can help me get correct logic
[15:10:10] <Franciman> it's a way of designing
[15:10:19] <sham1> One can encode logic into the types. Indeed, type theory is enhanced logic
[15:10:19] <Franciman> also they allow defining strict interfaces that are checked by a machine
[15:10:28] <Franciman> not just by me
[15:10:32] <Franciman> so discipline discipline
[15:10:34] <Franciman> sure
[15:10:44] <sham1> But it is cumbersome and usually isn't done enough
[15:10:50] <Franciman> but then don't ever use a software
[15:10:54] <Franciman> and do your computation by hand
[15:10:59] <mdhughes> Types are not capable of expressing logic.
[15:11:07] <Franciman> mdhughes: what types are you referring to?
[15:11:13] <Franciman> dependent type theories?
[15:11:14] <Franciman> or C tpyes?
[15:11:32] <Franciman> there are different type systems
[15:11:35] <Franciman> of different expressibility
[15:11:40] <mdhughes> Or maybe you don't understand what logic is. Algorithms are more than just "these are both integers" (or any additionally complex type).
[15:11:55] <Franciman> again
[15:11:57] <Franciman> mdhughes: 
[15:12:01] <Franciman> what types are you referring to?
[15:12:09] <Franciman> do you know dependently typed languages?
[15:12:16] <Franciman> ofc you don't
[15:12:29] <mdhughes> Yes, I've used full gimp-suit candle torture BDSM languages like Ocaml.
[15:12:39] <Franciman> ocaml is not dependently typed
[15:13:18] <Franciman> but even with ocaml poorer type system, there are a lot of works about how to leverage types
[15:13:22] <Franciman> to help you define correct software
[15:13:31] <Franciman> you say you don't need it,because you can think
[15:13:33] <Franciman> sure
[15:13:41] <Franciman> but i like being helped by types
[15:14:00] <Franciman> i define properties in types, or constraint things, so that i can compose software better
[15:14:11] <Franciman> than having a function that does 2000000 different things dependening of the input you give it
[15:14:12] <mdhughes> But it doesn't help you. It's what's holding you back, making you weak and stupid. Write tests, and think about your logic, and you'll never need that nonsense.
[15:14:46] <sham1> mdhughes: you do know that those things are orthogonal to typong
[15:14:47] <Franciman> you forgot and good luck when you realised you made the wrong abstractions
[15:15:03] <sham1> Typing
[15:15:05] <mdhughes> You don't need to switch in a method, if the object can respond to messages. That's why we have abstract classes, or messaging systems. I mostly make those as let-over-lambda objects.
[15:16:10] <sham1> The way the objects respond to messages and whether they respond to a given message define a type
[15:17:21] <mdhughes> sham1: That's not what the typing freaks think "types" are. They want everything specified so a compiler can check it.
[15:17:43] <mdhughes> But most messaging systems are entirely ad-hoc, you can just send anything to anything and see if it works.
[15:17:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:17:52] <Franciman> mdhughes: actually that's not what you think types are
[15:17:53] <sham1> Well who cares about what they think
[15:17:57] <sham1> They're mostly not mathematics
[15:18:05] <sham1> Nor logisticians
[15:19:11] <Franciman> allowing any object to accept any message
[15:19:20] <Franciman> is another good way of defining things
[15:19:29] <Franciman> but it makes for sloppy thinking
[15:19:49] <Franciman> because most messages would give you a response that means Â«this method doesn't make sense hereÂ»
[15:19:54] <Franciman> so you have to clutter your whole program
[15:20:01] <Franciman> with with checks
[15:20:21] <Franciman> and this makes writing software by composition harder. You can still decompose software in pieces ofc
[15:20:32] <Franciman> but it's harder to prove things work as intended, imho
[15:20:35] <Franciman> on large scale
[15:20:44] <Franciman> if you write an irc bot, i don't care about type systems
[15:21:06] <mdhughes> You don't. You just carry on as if things are going to work, because you have tests to prove they do. There's usually a -doesNotUnderstand message that intercepts failed messages, or you can just throw an exception and see who wants to catch it.
[15:21:14] <Franciman> sure
[15:21:18] <Franciman> tests cover 100% of use cases
[15:21:28] <Franciman> this is the most perfect utopy
[15:21:40] <Franciman> i hope you never write software for nuclear plants
[15:22:10] <mdhughes> Type systems are just automated tests that only catch 10% of possible edge cases, and then the type freaks quit making tests because they think it's the answer to everything.
[15:22:21] <Franciman> again
[15:22:26] <Franciman> this depends on the notion of type system
[15:22:32] <sham1> mdhughes: that's a strawman
[15:22:38] <Franciman> and i agree that too many types are too hard to deal with
[15:22:45] <Franciman> but most type freaks still write software
[15:22:47] <Franciman> and tests
[15:22:51] <sham1> I have not met a single "type freak" that doesn't test their logic
[15:23:05] <sham1> Tests and types are orthogonal
[15:23:07] <Franciman> but they don't test what happens if you pass integers instead of strings to your system
[15:23:09] <sham1> Are you actually dim
[15:23:16] <sham1> Are you actually stupid
[15:23:55] <Franciman> mdhughes: do you use object oriented programming?
[15:24:03] <Franciman> when you said objects receive messages
[15:24:08] <Franciman> i really like this idea ^^
[15:24:16] <Franciman> or is it a sort of mixed strategy
[15:24:19] <Franciman> not purely oop
[15:24:30] <sham1> Sounds like smalltalk
[15:24:43] <mdhughes> I've never seen significant unit tests in strongly typed programs. They assume the type system is good enough. Every horrible Ocaml or Swift program is like that.
[15:25:00] <Franciman> mdhughes: i think i know why
[15:25:02] <Franciman> nobody uses ocaml
[15:25:07] <Franciman> so you only read amateur software
[15:25:11] <Franciman> :)
[15:25:36] <mdhughes> I'm an Objective-C programmer at heart. Smalltalk was fun, but unusable in engineering. ObjC was fucking magical, a little dangerous if you did a lot with C, but the object layer was fun.
[15:25:52] <sham1> Never seen significant unit tests in strongly typed languages? You must not like python then
[15:26:04] <Franciman> do you use scheme for doing apple development, mdhughes ?
[15:26:05] <sham1> An understandable reaction but still very silly
[15:26:09] <Franciman> do you use it for iOS apps?
[15:26:11] <Franciman> i'd love to
[15:26:17] <Franciman> fucking hell, I want to
[15:26:29] <mdhughes> No, I've seen what was supposed to be very serious, professional Ocaml software. It's used in a number of industries.
[15:27:39] <mdhughes> sham1: Python's not strongly or strictly typed. It's all test-based safety, thanks to doctests.
[15:27:55] <sham1> Oh but it is strongly typed. A str won't turn into an int
[15:28:11] <sham1> Or vise versa without a cast
[15:28:29] <LeoNerd> "strongly typed" isn't a well-defined phrase. It usually means "has a type system the author agrees with"
[15:28:49] <mdhughes> Except when you pass something to a function, what you get back out is indeterminate. And everything works on a numeric tower that up-/down-casts.
[15:29:33] <sham1> It's not indeterminate. Or if it is, the API is bad and the author should feel bad
[15:29:54] <mdhughes> Python also doesn't care what you pass in for files, etc. as long as they duck-type the couple methods it's looking for.
[15:30:41] <mdhughes> That's what I call dynamic/weak/duck typing. One that checks all that and doesn't allow any variation is strong/strict/BDSM.
[15:30:59] <sham1> Well in that case you're incorrect
[15:31:23] <sham1> Because first of all, dynamic and weak typing aren't synonyms, and neither is duck typing
[15:31:39] <mdhughes> Franciman: Sadly I don't have a good workflow for putting Scheme on iOS. But I've got ObjC for that already. My current problem is cross-platform desktop code, and Scheme's nice for it.
[15:31:41] <sham1> And same for static typing and strong typing. They're actually orthogonal
[15:32:10] <mdhughes> They might be in your own private lexicon, but no two nerds can agree on those terms.
[15:32:26] <Franciman> mdhughes: what toolkit do you use for GUI?
[15:32:29] <sham1> It just happens to be the private lexicon of the majority of the field
[15:33:00] <mdhughes> Franciman: Just SDL2. I've done experiments with other toolkits, but I don't like anything.
[15:33:18] <mdhughes> sham1: You and the many lurkers supporting you in emailâ€¦
[15:33:21] <Franciman> oh wow, i'd find it hard to write widgets in SDL2
[15:33:31] <Franciman> very nice
[15:39:12] <ns12> Franciman: What ML language do you use? OCaml or Standard ML?
[15:40:02] <Franciman> i mostly use haskell
[15:41:52] <ns12> mdhughes: What is this "BDSM" that you refer to? This https://en.wikipedia.org/wiki/BDSM ? But I don't see how this sexual thing is related to programming languages.
[15:42:38] <mdhughes> http://www.catb.org/~esr/jargon/html/B/bondage-and-discipline-language.html
[15:42:39] <Franciman> ns12: because it was hinted that working with types is like being tortured
[15:43:31] <ns12> Okay, thanks for the link.
[15:43:35] <mdhughes> It is a rude expression, but eh. It's an accurate description of how it feels. I ain't a bottom to any machine.
[15:46:38] <Franciman> actually you are, because you depend on tests and on the output of a machine to be sure that your software is correct
[15:48:38] <mdhughes> No, I write the tests. The machine only does what I tell it.
[15:50:38] <Franciman> lol then you wouldn't need tess
[15:50:40] <Franciman> tests
[15:51:18] <Franciman> if the machine only does what you tell it to, and you tell it to check that you wrote code correctly
[15:51:23] <Franciman> you depend on its output
[15:52:00] <Franciman> and if the machine only did what you told her to, then you either need help to figure that what you told it to do is what you want
[15:52:06] <Franciman> or be blind and hope for the best
[15:53:14] <ns12> Franciman: You don't write unit tests when programming in Haskell?
[15:53:41] <Franciman> i do
[15:55:12] *** Joins: Andrew (andrew@andrewyu.org)
[15:55:26] <ns12> Is there a language where unit tests are not necessary due to the sophistication of the type system?
[15:57:59] <Franciman> ns12: there are languages with very powerful type systems in which you can prove that your program has desired properties. But there are a few problems with this
[15:58:09] <Franciman> 1. they are very new or bleeding edge, so not very easy to use
[15:58:21] <Franciman> 2. formally defining your requirements can be A LOT of work and a lot of tedious work
[15:58:35] <Franciman> examples of these langueages are Coq, Agda, Idris, Lean
[15:58:46] <Franciman> you can use them to also do mathematics and prove theorems
[15:59:05] <Franciman> so writing tests is more practical most of the time
[15:59:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:01:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:12:31] <ns12> Franciman: Are you attracted to bondage-and-discipline languages?
[16:12:46] <ns12> Why do you use Scheme then?
[16:13:06] <Franciman> because i like both
[16:13:32] <ns12> Me too. I like bondage-and-discipline languages too.
[16:13:35] <Franciman> for some tasks i prefer scheme, for others bondage-and-discipline
[16:14:42] <Franciman> yay same
[16:36:19] <ns12> What is the name of this Scheme evaluator implemented in hardware?
[16:36:19] <ns12> https://sarabander.github.io/sicp/html/5_002e4.xhtml#Figure-5_002e16
[16:36:32] <ns12> Is it for sale anywhere?
[16:41:20] <wasamasa> did you follow the footnote?
[16:42:12] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[16:43:53] <ns12> wasamasa: How did I miss that? I wonder if it's the successor of Scheme-79. Is it available for purchase?
[16:44:00] <wasamasa> lol
[16:44:14] <wasamasa> all I can find is a paper with research in its name
[16:44:17] <wasamasa> research, dude
[16:44:35] <wasamasa> not industry or commerce or business
[16:44:52] <ns12> wasamasa: In one of the SICP lectures, the students were shown the physical chip.
[16:44:55] <wasamasa> if you can find it for purchase, I'd expect it to be a collector's piece
[16:44:57] <wasamasa> or in a museum
[16:45:09] <wasamasa> it's not a commodity
[16:46:46] <ns12> That is too bad.
[16:47:11] <ns12> But it predates even R3RS.
[17:16:07] <edgar-rft> let's evaluate like in the times before R1RS
[17:17:09] * Andrew has only heard of R3 and R5
[17:17:21] <Andrew> And R6, but everyone hates it
[17:20:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:21:08] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:21:31] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:24:41] <ns12> Andrew: What about R7RS?
[17:24:57] <Andrew> ns12: I mean, it's still in the works, but I've heard of it
[17:25:19] <ns12> R7RS-small was finalized in 2013.
[17:25:30] <Andrew> -small
[17:32:37] <sham1> R7-smol
[17:36:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:38:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:44:36] <wasamasa> The R7RS-small Schemer
[17:48:43] <mdhughes> As they learned the hard way at Symbolics and LMI, general-purpose CPUs can improve faster than a focused CPU can be built.
[17:54:39] *** Joins: klovett_ (~klovett@107.127.17.177)
[17:57:12] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 256 seconds)
[18:10:50] *** Joins: zwr (~zwr@2804:d45:b966:fb00:d3a7:44f8:3616:d9d)
[18:11:51] *** Joins: seninha (~seninha@user/seninha)
[18:14:46] *** Joins: s-liao90 (~s-liao@101.86.96.21)
[18:15:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:18:29] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[18:27:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:29:51] *** Quits: s-liao90 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:38:31] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 250 seconds)
[18:39:29] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[18:44:24] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[18:44:53] <ns12> mdhughes: Are you referring to the Scheme-81 chip?
[18:48:49] <mdhughes> CADR, etc. were Lisp-specific chips in the LISP machines.
[18:51:15] <ns12> And yet some people still dream of Lisp machines.
[18:52:15] <mdhughes> Well if you do it in software on something getting mass production, it's a fine idea. Make a LM on ARM.
[18:53:07] <mdhughes> It's just silly when you've got a market of maybe 1,000 and you're hand-soldering these things, and hoping you'll beat the performance of anyone else.
[18:53:44] <ns12> Symbolics Lisp machines were hand-soldered?
[18:54:42] <mdhughes> TI made the chip, but the board was more like a '70s minicomputer's, at least from the photos I've seen. I assume they couldn't get a production line for that few.
[18:55:14] <sham1> One would indeed assume that the lisp machines were special kit and thus not mass-produced
[18:56:06] *** Joins: klovett (~klovett@107.127.17.177)
[18:57:50] *** Quits: klovett_ (~klovett@107.127.17.177) (Ping timeout: 256 seconds)
[19:08:10] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[19:09:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:17:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[19:28:45] *** Joins: s-liao50 (~s-liao@101.86.96.21)
[19:29:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:34:04] *** Quits: s-liao50 (~s-liao@101.86.96.21) (Quit: Client closed)
[20:46:42] *** Joins: klovett_ (~klovett@107.127.17.177)
[20:47:38] <amazigh> what's up schemers 
[20:49:37] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 240 seconds)
[20:50:26] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:51:07] <wasamasa> been writing loads of python recently, lol
[20:51:16] <wasamasa> you can relate, right
[20:53:18] <amazigh> yep :|
[20:54:41] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:54:57] <wasamasa> heh
[20:55:33] <amazigh> I am looking for job, there is seems like almost nobody want or need my skills in python, everybody is looking for data / saas xp
[20:55:43] <amazigh> or... nodejs or typescript.
[20:56:39] <amazigh> Scheme is useless :(
[20:57:12] *** Joins: seninha_ (~seninha@user/seninha)
[20:57:45] <bsima> amazigh: i would hire a schemer if i could pay them
[20:57:51] <bsima> :P
[20:57:58] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[20:59:52] <amazigh> :)
[21:01:06] <amazigh> So I plan to practice js and rust on codewars.com
[21:05:46] *** Quits: seninha_ (~seninha@user/seninha) (Ping timeout: 245 seconds)
[21:26:37] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[21:49:23] *** Joins: jao (~jao@66.63.167.119)
[21:52:30] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:cdc3:ec29:d616:f18b)
[21:52:30] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:cdc3:ec29:d616:f18b) (Changing host)
[21:52:30] *** Joins: skapata (~Skapata@user/skapata)
[21:59:26] *** Quits: jao (~jao@66.63.167.119) (Ping timeout: 260 seconds)
[22:00:59] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:01:34] *** Joins: jao (~jao@68.235.43.172)
[22:10:38] *** Joins: ouestbillie (~gallup@62.28.193.74)
[22:20:59] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:22:46] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:25:45] *** Joins: klovett (~klovett@107.127.17.177)
[22:28:37] *** Quits: klovett_ (~klovett@107.127.17.177) (Ping timeout: 240 seconds)
[22:37:05] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[22:39:25] <Zipheir> ns12: Haskell, usually.  I wish it had a more expressive type system, and I'm not crazy about the huge number of extensions, but it's solid.
[22:42:38] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:44:49] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:48:01] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[22:50:55] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[22:53:19] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[22:57:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[23:00:58] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:08:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[23:08:18] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[23:10:33] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:11:39] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:12:16] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:19:04] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[23:21:24] *** Joins: tfeb (~tfb@88.98.95.237)
[23:29:03] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[23:34:26] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:36:57] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[23:48:16] * ouestbillie walks in
[23:48:37] * ouestbillie reads "I wish haskell had a more expressive type system"
[23:48:43] * ouestbillie take a sip of tea, hmmmm
