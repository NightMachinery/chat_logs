[00:03:33] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[00:05:39] *** Joins: mattil (~mattil@87-92-208-10.rev.dnainternet.fi)
[00:09:37] <gordonfish> sweval: my @x = qw(%d 123); sprintf @x;
[00:09:38] <perlbot> gordonfish: 2
[00:10:09] <gordonfish> sweval: sprintf qw(%d 123);
[00:10:10] <perlbot> gordonfish: 123
[00:10:17] *** Quits: mattil (~mattil@87-92-208-10.rev.dnainternet.fi) (Ping timeout: 248 seconds)
[00:10:19] <gordonfish> Prototype shenanigans?
[00:11:17] <mst> yes
[00:11:33] <gordonfish> I could swear I had used something like this in the past though
[00:11:41] <mst> remember qw() unrolls to a comma separated list
[00:11:46] <mst> it's pure parser level sugar
[00:12:11] <mst> so really you're just testing sprintf @x versus sprintf '%d', '123';
[00:12:21] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:13:53] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 250 seconds)
[00:16:02] <tirnanog> the documentation for sprintf mentions that arrays are handled differently as compared to printf, as a result of applying scalar context. still an odd difference, I suppose.
[00:17:49] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[00:25:29] *** Quits: sdk_ (~x@shell.codevoid.de) (Quit: gopher://codevoid.de)
[00:27:09] *** Quits: maroloccio (~marolocci@37.100.40.252) (Quit: WeeChat 3.0)
[00:27:10] *** Joins: sdk_ (~x@shell.codevoid.de)
[00:28:22] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[00:34:29] <gordonfish> tirnanog: Indeed. One of things that can catch anyone off guard when not mindful of such specifics
[00:35:14] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:35:45] <gordonfish> mst: Yes, it unrolls to a csl, which '%d', '123' also is, but prototypes gotta throw a wrench in that.
[00:37:57] *** Joins: rwbrambler (~Thunderbi@65.183.138.202)
[00:38:02] <gordonfish> tirnanog: It's also interesting, as I'd expect printf to have the more picky handling, given how it can take a handle sans comma in the first position.
[00:41:15] <mst> gordonfish: my point was mostly "qw() can easily confuse if you don't keep that part in mind"
[00:41:53] <mst> which has resulted in sufficient "wtf ... wtf ... WTF ... oh for FUCK's sake Matt" moments for me that I tend to remind people of it at any given opportunity
[00:42:05] <gordonfish> Right. In this case I did expect the same list to be fed to sprintf in both instances.
[00:43:18] *** Joins: proller (~p@2a02:6b8:b081:8804::1:7)
[00:43:43] <xenu> the only purpose of $@ prototype is to cause bugs
[00:44:28] <mst> xenu: you mean ... $@ is usually an error?
[00:44:36] <mst> I think anybody who's ever used eval already knew that
[00:44:39] <xenu> lol
[00:44:51] * ether à² _à² 
[00:45:19] <gordonfish> I was also using qw() in those examples partly out of lazyness and partly because they were two single words and is sometimes nicer. Your points still stand, though for the tests above, I could have just used ('%d', 123)
[00:45:39] <revhippie> pragma-: Have you seen this?  https://curlicuecal.tumblr.com/post/175362924100/beautiful-big-almond-eye-appropriately-angled
[00:45:40] <Paperbot_> Link title(s): [ I've lost control of my life ðŸŒ¸ðŸŒ¸ - an entomologist rates ant emojis ]
[00:46:03] <revhippie> Oh, wow, that conversation was 4h ago, I'm sorry.
[00:46:13] <mst> oh, sure, I love qw() just when you're poking at -other- bits of perl weirdness using a weird (albeit also wonderful) parser construct can easily make life more complicated
[00:46:17] <pragma-> nah, that's amazing
[00:46:46] <mst> revhippie: it's IRC, I regularly reply to things from a lot longer ago than that, the fact the reply was interesting makes it 100% fine
[00:52:07] *** Quits: proller (~p@2a02:6b8:b081:8804::1:7) (Ping timeout: 240 seconds)
[00:52:46] <tirnanog> gordonfish: yeah.
[00:57:45] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 248 seconds)
[01:04:42] *** Joins: anthk_ (~anthk_@92.176.105.30)
[01:05:17] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[01:09:39] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[01:11:10] *** Quits: gryphn (~gryphon@102.129.145.218) (Ping timeout: 252 seconds)
[01:15:27] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[01:18:31] *** Quits: aman (~aman@user/aman) (Quit: aman)
[01:19:07] *** Quits: jdltouraine_ (~jdltourai@109.131.229.44) (Ping timeout: 240 seconds)
[01:22:45] *** Joins: madduck (~madduck@matilda.madduck.net)
[01:22:45] *** Quits: madduck (~madduck@matilda.madduck.net) (Changing host)
[01:22:45] *** Joins: madduck (~madduck@user/madduck)
[01:24:40] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[01:27:57] <vanfanel64> How can one set $" on windows in a perl -e or -E line of code? I seem to be quick in cmd quote hell
[01:28:16] <vanfanel64> quick -> stuck
[01:29:31] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[01:29:35] <mst> ... shit, I've forgotten what that one even does
[01:29:56] <mst> oh, right, yeah, it's that one, I always just use join()
[01:30:26] <vanfanel64> $" is for when an array is strigificated
[01:30:32] <LeoNerd> It's one of the various nearly-pointless ones, yeah
[01:30:43] <mst> however, 'use English qw($LIST_SEPARATOR);' would be a workaround if you're scared of join()
[01:31:03] <vanfanel64> perl -E "$\"=q{,}; say qq{foo | echo 123\n}" gives me 123\n}"  Can't find string terminator "}" anywhere before EOF at -e line 1.
[01:31:43] <simcop2387> vanfanel64: you can also do stupid eval tricks and construct the code
[01:31:43] <tirnanog> vanfanel64: ^ rather than \ (I think)
[01:31:50] <LeoNerd> Windows shell probably eats the " even with the \ on it
[01:31:54] <vanfanel64> I made this test since it looks like $\" ends the double quoted string and the pipe is read like prog | other prog
[01:32:02] <LeoNerd> Windows (shell) is known to be terrible at commandline splitting
[01:32:30] <vanfanel64> Yes I hate windows shell but I need this
[01:32:34] <mst> vanfanel64: use join. use $LIST_SEPARATOR. use "not doing that."
[01:32:40] <mst> vanfanel64: I have given you three options. pick one.
[01:33:12] <vanfanel64> perl -E "$^"=q{,}; say qq{foo | echo 123\n}" prints just 123\n}", like it is running the echo as a command
[01:33:19] <vanfanel64> LeoNerd
[01:34:26] <vanfanel64> Yes I could use join, but I want to understand why $" cannot be escaped properly
[01:34:29] <tirnanog> you probably have to use ^| also. cmd.exe is painful.
[01:34:43] <tirnanog> but I'm going by memory and cannot test at present.
[01:34:57] <vanfanel64> tirnanog, yes it is giving me a rash
[01:35:08] <LeoNerd> Would it be easier just to put the perl code in a little file and run  perl foo.pl  ?
[01:35:20] <LeoNerd> Then you'll know the shell isn't eating the "s
[01:35:39] <gordonfish> The | shouldn't need to be escaped if it was still in a "..." string
[01:36:09] <mason> The unbalanced quotes threw me off.
[01:36:23] <gordonfish> perl -E "print qq{foo | bar}" works fine for me on a windows server I just tested on
[01:36:26] <mst> vanfanel64: "cannot'
[01:36:36] <mst> vanfanel64: did you try using https://metacpan.org/pod/Win32::ShellQuote to quote it yet/
[01:36:37] <Paperbot_> Link title(s): [ Win32::ShellQuote - Quote argument lists for Win32 - metacpan.org ]
[01:36:44] <vanfanel64> Ok wrong word, only sith talk in absolutes
[01:37:24] <vanfanel64> I will try https://metacpan.org/pod/Win32::ShellQuote
[01:37:24] <Paperbot_> Link title(s): [ Win32::ShellQuote - Quote argument lists for Win32 - metacpan.org ]
[01:38:10] *** Joins: pj (~pj@ghettoforge/pj)
[01:38:53] <vanfanel64> Oh, https://metacpan.org/pod/Win32::ShellQuote is already installed on this machine, how nice
[01:38:54] <Paperbot_> Link title(s): [ Win32::ShellQuote - Quote argument lists for Win32 - metacpan.org ]
[01:41:16] <vanfanel64> my god.... print quote_cmd q{$"=q{,}; say qq{foo | echo 123\n}}; gives me this atrocity
[01:41:20] <vanfanel64> ^"$\^"=q{,}; say qq{foo ^| echo 123\n}^"
[01:41:28] <vanfanel64> I think I'm going to be sick
[01:41:55] <mason> "Doctor, it hurts when I do this."
[01:42:23] <tirnanog> lol
[01:43:02] <mst> vanfanel64: cmd.exe is like that :D
[01:43:39] <tirnanog> in the event that you decide that you cannot take it anymore, there's a port of busybox for windows that contains a serviceable sh(1) implementation.
[01:44:15] <vanfanel64> perl -E "^"$\^"=q{,}; say qq{foo ^| echo 123\n}^"" gives syntax error at -e line 1, near "^"
[01:44:30] <simcop2387> vanfanel64: you added a " to it
[01:44:41] <simcop2387> perl -E ^"$\^"=q{,}; say qq{foo ^| echo 123\n}^"
[01:44:54] <simcop2387> its' stupid looking.  but i believe that's the correct way directly
[01:44:56] <vanfanel64> Oh, so it is a naked string
[01:45:16] <simcop2387> it's not naked.  it's quoted by ^"
[01:45:22] <vanfanel64> Or raw unquoted
[01:45:42] <vanfanel64> perl -E ^"$\^"=q{,}; say qq{foo ^| echo 123\n}^" gives foo | echo 123 so that works
[01:46:39] <vanfanel64> cmd_escape gives $^"=q{,}; say qq{foo ^| echo 123\n} which is a little nicer
[01:47:10] <vanfanel64> But does not print anything
[01:47:34] <vanfanel64> Oh, quote_literal "Quotes a single parameter in native form." this is likely what is needed
[01:48:02] <vanfanel64> "$\"=q{,}; say qq{foo | echo 123\n}"
[01:48:11] <simcop2387> eval: use Win32::ShellQuote;l
[01:48:12] <perlbot> simcop2387: ERROR: Can't locate Win32/ShellQuote.pm in @INC (you may need to install the Win32::ShellQuote module) (@INC contains: $BLEAD/lib/site_perl/5.35.3/x86_64-linux $BLEAD/lib/site_perl/5.35.3 $BLEAD/lib/5.35.3/x86_64-linux $BLEAD/lib/5.35.3) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[01:48:17] <simcop2387> i should get that on there
[01:48:37] <vanfanel64> But that does not work, that is the same string I started with
[01:50:16] <gordonfish> Just use English qw($LIST_SEPARATOR); or join as has been mentioned, stop trying to straighen a pile of wet speghetti
[01:50:42] <LeoNerd> Hah :) I like that phrase
[01:50:50] <gordonfish> :)
[01:51:14] <vanfanel64> Yes I will use those, I just want to understand whthat is happening
[01:51:19] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 252 seconds)
[01:53:07] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 250 seconds)
[01:53:54] <mst> vanfanel64: you're looking for coherency in an ad-hoc evolved parsing system where there mostly isn't one
[01:54:18] <simcop2387> mst: i object to that statement.
[01:54:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[01:54:31] <simcop2387> it's an insult to both evolution and parsers
[01:54:46] <mst> ... fair.
[01:54:56] <xenu> i'm almost certain that the way how quoting in cmd.exe works is accidental, i don't think there's a reasonable explanation for the fact that | is treated as a shell metacharacter inside "" when the string contains \"
[01:55:01] <zgu> i believe parsers were intelligently designed
[01:55:47] <mst> simcop2387: evolution also created human knees though
[01:55:53] <mst> I can accept the 'insult to parsers' part
[01:56:29] <simcop2387> mst: that's only because we aren't crabs.  https://en.wikipedia.org/wiki/Carcinisation
[01:56:29] <Paperbot_> Link title(s): [ Carcinisation - Wikipedia ]
[01:57:05] * GumbyPAN CPAN Upload: Config-XrmDatabase-0.03 by DJERIUS https://metacpan.org/release/DJERIUS/Config-XrmDatabase-0.03
[01:57:17] <mst> simcop2387: yet! growth mindset!
[01:57:22] <xenu> keep in mind that processes in windows receive the whole argv string, including quotes
[01:57:49] <xenu> perhaps cmd.exe tries to parse "" by itself but unlike whatever parses argv inside the applications, it doesn't understand backslash escaping
[01:57:50] <mst> right, so they all have to parse it themselves, by whatever means the original developer hacked together until it was "close enough" to ship
[01:58:07] <xenu> that would explain that weirdness
[01:58:25] <xenu> hmm, it actually makes sense
[01:58:27] <mst> vanfanel64: which is why trying to understand it is basically a form of self-harm, and people aren't amazingly enthusiastic about helping
[01:58:32] <mst> anyway
[01:59:45] *** Quits: gaussblurinc (~lolgear@broadband-77-37-173-68.ip.moscow.rt.ru) (Quit: Leaving.)
[02:04:41] <tirnanog> as concerns cmd.exe, a better way to describe the behaviour of " - in its capacity as a solitary character, mind - is as a switch that toggles whether the parser is prepared to split on a whitespace boundary. in that respect, quotes do not 'enclose' things and don't even have to be balanced.
[02:04:55] <tirnanog> and there's probably more to it than whitespace but I can't remember now. it's been a while.
[02:05:00] *** Quits: EGD (~egd@user/egd) ()
[02:06:02] <gordonfish> perl -E "$"^""=q{,}; my @x=qw(A B C); say qq{foo | echo 123 | @x\n}"
[02:06:03] <gordonfish> foo | echo 123 | A,B,C
[02:06:08] <gordonfish> vanfanel64: ^
[02:06:36] *** Joins: pj (~pj@ghettoforge/pj)
[02:07:39] <gordonfish> The first "$" starts the double quoted containing just a dollar sign, ^" yields a literal double quote, the next (third) " starts a double quoted string again.
[02:07:48] <gordonfish> So cmd.exe can be wrangled
[02:08:11] <ens> i hope perl7 removes the ability to pass | to open() and cause exec.
[02:08:20] <Grinnz> interacting with computers via text strings was a mistake
[02:08:23] <vanfanel64> Holy guacamoly
[02:08:50] <simcop2387> gordonfish: you need a neurologist for being able to do that.  *something* has severely damaged your brain and made it unable to function in the rest of the world.
[02:08:56] <Grinnz> ens: if you use 3 arg open it's not possible
[02:08:57] <vanfanel64> Grinnz, would you prefer punch cards?
[02:09:05] <Grinnz> vanfanel64: yes, no escaping needed there
[02:09:35] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:09:47] <xenu> the cmd.exe situation would be *much* less confusing if unbalanced " (from the shell's POV) caused an error
[02:09:53] <gordonfish> simcop2387: Hah. It was memory from a while back that managed to bubble its way to the surface about cmd.exe quoting shellnanigans
[02:10:04] <xenu> because it isn't an error, it's very easy to miss that there are two layers of quoting
[02:10:10] <tirnanog> that's the thing. you never start or end a quoting context, as such. it's more like toggling a flag that affects the parser's behaviour from thereon.
[02:10:12] <simcop2387> gordonfish: so it's PTSD too then? such a sad story
[02:10:13] <vanfanel64> Grinnz, what if you wanted a literla hole?
[02:10:19] <ens> Grinnz: yeah but people use open() expecting to open a file for reading/writing and, because they don't properly filter user input, a security bug that could be less severe is escalated to remote code execution instead - which is just silly.
[02:10:34] <Grinnz> right, the security bug is due to them using two arg open
[02:10:57] <Grinnz> only strange edge cases have needed to use two arg open in the past decade
[02:11:01] <ens> no, it's because open() that allows for exec should not be called open()
[02:11:23] <Grinnz> it doesn't allow for exec if you call it with '>' or '<'
[02:11:41] <Grinnz> you're free to introduce a new api with a better name
[02:11:54] <Grinnz> but changing open to not support pipe open is not gonna happen
[02:12:40] <LeoNerd> Ideally we'd add my $fh = fopen "path"; to Not Do Magic, and  my $fh = popen "command", @args;  similarly
[02:12:47] <LeoNerd> and then deprecate the very open() that is always so problematic
[02:12:51] <Grinnz> that would be a nice api
[02:13:00] <xenu> both piping and duping inside open() is silly
[02:13:08] <Grinnz> dup is another problem
[02:13:10] <LeoNerd> Oh and a CORE::dup would be nice yes
[02:13:15] <ens> perl gets laughed at by the security community for allowing open() to have such functionality that this causes remote code execution issues.
[02:13:16] <LeoNerd> The many many faces of open() are annoying
[02:14:04] <Grinnz> ens: so does every language.
[02:14:14] <xenu> i mean as long as you're using three arg open, there's no vulnerability
[02:14:19] <xenu> and if you aren't then fix your code
[02:14:34] <ens> that's the wrong way to treat this problem.
[02:15:03] <Grinnz> there's no one way to treat this problem
[02:15:14] <xenu> the only *real* problem i see is that <> is using 2-arg open on its argument
[02:15:19] <Grinnz> fix your code, propose a better api, all of these things can be done
[02:15:20] <xenu> arguments*
[02:15:21] <Grinnz> changing open() can't
[02:15:27] <LeoNerd> Which is what double-diamond was made to fix
[02:16:01] <xenu> double-diamond was a bad idea for two reasons, 1) it doesn't handle - 2) it doesn't fix -n/-p
[02:16:03] <ens> the fact of the matter is. coders use 2-arg open to read files. at some point they don't properly validate user input and their code gets exploited for remote execution and the security community laughs and goes "lol perl strikes agian."
[02:16:28] <Grinnz> we're quite aware and repeating it serves only to be irritating, so please stop if you're not going to say anything useful
[02:17:34] <ens> well you haven't actually addressed the problem except added some nonsense that won't work.
[02:17:36] <xenu> ideally normal diamond operator should be fixed not to use 2-arg open. i refuse to believe that it would break any real code
[02:17:44] <ens> so i thought i'd say something that made sense. but nevermind.
[02:18:21] <Grinnz> xenu: kind of impossible to know with that one unfortunately
[02:18:35] <Grinnz> since any code it would break would be sysadmin oneliners
[02:19:49] <Grinnz> ens: open() cannot be changed. new apis don't magically appear, they have to be proposed, designed, and implemented. what would you consider "addressing" the problem?
[02:19:55] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[02:19:55] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[02:20:45] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[02:21:57] <ens> i agree with LeoNerd about the popen() prospect as was written above.
[02:22:44] <LeoNerd> Cool
[02:22:51] <LeoNerd> Now go implement it ;)
[02:22:56] <xenu> we can introduce a new api, sure, but it seems that your complain is that 2-arg open *exists*
[02:22:59] <xenu> that isn't going to change
[02:23:04] <xenu> complaint*
[02:23:13] <Grinnz> 2 arg open could be deprecated, aside from a few cases
[02:23:26] <Grinnz> but i don't think it can be removed in the next decade
[02:23:39] <xenu> i guess we can make it an optional feature
[02:23:44] <xenu> soft-removal
[02:23:55] <Grinnz> sure, a feature bundle could disable it
[02:24:08] <Grinnz> open '-|' and open '|-' still have to work though
[02:24:15] <Grinnz> (fork-open)
[02:24:35] <Grinnz> i don't think there's any other cases 3 arg open can't handle
[02:25:10] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[02:28:27] <Grinnz> btw https://metacpan.org/pod/File::Open already exists, so someone just has to prototype popen
[02:28:27] <Paperbot_> Link title(s): [ File::Open - wrap open/sysopen/opendir and give them a nice and simple interface - metacpan.org ]
[02:28:46] <Grinnz> someone might be me if i get bored in a week
[02:30:15] <xenu> how would it differ from fopen?
[02:30:39] <xenu> ah, it's forking open
[02:30:51] <LeoNerd> pipe-open. named after the libc function
[02:31:42] <xenu> i'm not sure if it's a good name. it doesn't really open anything
[02:32:05] <xenu> open2/open3 suck for the same reason
[02:32:35] <xenu> but on the other hand, people are already used to it
[02:32:39] <LeoNerd> open1
[02:32:45] <LeoNerd> because it's not open2 ;)
[02:34:17] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[02:35:02] *** Quits: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net) (Quit: Konversation terminated!)
[02:35:15] *** Joins: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net)
[02:36:11] *** Joins: anthk_ (~anthk_@92.176.105.30)
[02:37:55] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[02:38:26] <Grinnz> xenu: it opens a pipe
[02:38:42] <Grinnz> it also forks first and possibly execs, but the open part still happens
[02:38:49] <Grinnz> well, forks after
[02:39:38] <xenu> it creates a pipe
[02:39:58] <Grinnz> same thing
[02:40:09] *** Quits: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net) (Quit: Konversation terminated!)
[02:40:21] *** Joins: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net)
[02:40:42] <LeoNerd> It could be argued that pipe(), socket(), accept() .. and possibly some other ones though none come to mind, are all also forms of "open"
[02:42:32] <Grinnz> https://metacpan.org/dist/Perl-Critic-Community/source/lib/Perl/Critic/Policy/Community/BarewordFilehandles.pm#L19-26
[02:42:32] <Paperbot_> Link title(s): [ lib/Perl/Critic/Policy/Community/BarewordFilehandles.pm - metacpan.org ]
[02:43:07] <Grinnz> those are all the builtins which accept and vivify bareword handles, which happen to be the builtins that open things
[02:43:22] <LeoNerd> Given lately Linux has been adding eventfd, signalfd, processfd, and so on... I'm surprised they don't go back and rename open() to filefd()
[02:43:49] <Grinnz> (you missed opendir and socketpair :)
[02:44:10] <LeoNerd> Bah.. opendir is purely a Perlism.. that isn't a real system call. Though socketpair() is
[02:44:19] <LeoNerd> opendir is just open with the O_DIR flag
[02:45:41] <xenu> socket() should be renamed to sopen() and accept() to ssopen()
[02:45:45] <Grinnz> File::Open provides a fopendir already also, which isn't necessary for the issue we were talking about but provides the nicer return-the-handle api
[02:46:18] *** Quits: Pali (~pali@user/pali) (Ping timeout: 250 seconds)
[02:49:53] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[02:50:30] <daemon> hey all in a regex how would I say ... for a block of data match anything except '%'
[02:50:46] <LeoNerd> Surely  [^%]  or some variant thereon?
[02:50:58] <daemon> not sure never really done negated matches, why I asked :)
[02:51:23] <daemon> lets give it a whirl and see
[02:51:28] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:51:54] *** Quits: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net) (Quit: Konversation terminated!)
[02:52:05] *** Joins: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net)
[02:54:36] <xenu> if you want to exclude all strings that have % in them !~ /%/
[02:55:14] <daemon> its more a situation where I have text that is:
[02:55:23] <daemon> AAASadasdasd%awfwefw
[02:55:37] <daemon> and I want to match from AS to fw but only when the text between does not have a %
[02:56:00] <daemon> the inner fw in that case
[02:56:11] <daemon> though it would fail to match because the % is there
[02:56:32] <xenu> so yeah, what LeoNerd said: /AS[^%]*fw/
[02:57:38] <daemon> LeoNerd++ # the man
[02:57:47] <daemon> xenu++ # Share the mojo :)
[02:59:51] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 250 seconds)
[03:01:25] *** Joins: phenom (~primus@user/phenom)
[03:02:27] *** Quits: amnesiac (~marco@c-73-189-251-48.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[03:02:52] <genio> hmmm. how many ugly ways can we come up with to write "a string without a % in it"?
[03:04:31] <genio> my $str = q(some string without percent);   say "yay" unless grep {$_ eq q(%)} split(//, $str);
[03:15:48] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:16:46] <ens> my $str = q(some string without percent);   say "yay" unless $str =~ /\%/
[03:17:43] <Grinnz> index $str, '%' < 0
[03:17:55] <Grinnz> probably needs some parentheses but you get the idea
[03:18:29] <LeoNerd> (split /%/, $str) < 2
[03:18:45] <LeoNerd> Ohwit that won't wor. That's scalar-split
[03:18:47] <LeoNerd> (() = split /%/, $str) < 2
[03:21:24] <Grinnz> lol
[03:22:09] <LeoNerd> Problem is all these techniques aren't anything special, I'm trying to think of something that *only* works for % because % is special somehow
[03:23:58] <tkr> $str = q(some string without percent); $_ = $str; @$ = split /%/; print "yay" if $#$ == 0
[03:25:50] *** Joins: whynot (~whynot@88.155.90.33)
[03:25:51] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 250 seconds)
[03:26:23] *** Joins: proller (~p@2a02:6b8:b081:1211::1:3a)
[03:26:32] <tkr> Ah. It was a string. Not a list of strings. Pardon me.
[03:30:32] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:40:07] *** Quits: proller (~p@2a02:6b8:b081:1211::1:3a) (Ping timeout: 240 seconds)
[03:42:10] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 240 seconds)
[03:43:54] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[03:49:40] *** Joins: _73 (~user@pool-96-252-123-136.bstnma.fios.verizon.net)
[03:50:07] <tkr> $str = q(some string without percent); $_ = $str; @_ = split //; $" = "%"; $_ = "@_"; print "yay" if !/%%%/
[03:50:12] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[03:51:34] <LeoNerd> Hah
[03:52:12] *** Joins: amnesiac (~marco@2601:646:4104:29b0:a508:24c1:5ad1:1134)
[03:53:04] <_73> I am writing a script with Net::OpenSSH. I want to force my user to have a ssh key pair with the remote host, and want the key to be passwordless. I would like to immediately kill the program if this is not the case. How would you reccomend that I check these requirements?
[03:54:43] <_73> I can assume both the host and server use Linux by the way
[03:55:50] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[03:56:10] *** Quits: seekr (~seekr@130.44.163.10) (Ping timeout: 252 seconds)
[03:56:30] *** Quits: Croran (~quassel@c-73-118-179-18.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[03:57:10] <Grinnz> batch_mode => 1
[03:57:36] *** Joins: proller (~p@2a02:6b8:b081:a409::1:19)
[03:58:42] *** Joins: Croran (~quassel@c-73-118-179-18.hsd1.wa.comcast.net)
[03:58:58] <Grinnz> and die if $ssh->error is true since Net::OpenSSH doesn't automatically throw exceptions
[03:59:06] <_73> Grinnz: got it thanks
[04:01:17] * GumbyPAN CPAN Upload: Device-AVR-UPDI-0.10 by PEVANS https://metacpan.org/release/PEVANS/Device-AVR-UPDI-0.10
[04:04:07] *** Quits: Croran (~quassel@c-73-118-179-18.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[04:04:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:04:51] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:07:10] *** Joins: orangebot (~orangebot@206.57.244.210)
[04:13:01] <ens> $str = q(some string without percent); print "yay" if $str eq join('', grep{substr($str,($.||1..$.&&0)-1,1)ne'%'} split(//,$str));
[04:13:16] <ens> i win
[04:16:18] * GumbyPAN CPAN Upload: App-sdview-0.04 by PEVANS https://metacpan.org/release/PEVANS/App-sdview-0.04
[04:18:10] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 252 seconds)
[04:20:07] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[04:22:31] *** Joins: pucara (~i@181.92.73.218)
[04:26:06] *** Joins: seekr (~seekr@130.44.163.10)
[04:34:35] *** Quits: orangebot (~orangebot@206.57.244.210) ()
[05:01:19] *** Quits: Linux77 (~Linux7_7@237-182-233-186.raimax.com.br) (Quit: Leaving)
[05:10:01] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 248 seconds)
[05:10:01] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 248 seconds)
[05:20:17] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:20:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:24:00] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[05:24:17] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:27:14] <aquanight> what's all this % stuff
[05:32:10] <Grinnz> just making a hash of things
[05:36:02] <simcop2387> this is cool, https://github.com/moralmunky/Home-Assistant-Mail-And-Packages
[05:36:03] <Paperbot_> Link title(s): [ GitHub - moralmunky/Home-Assistant-Mail-And-Packages: Home Assistant integration providing day of... ]
[05:41:27] * GumbyPAN CPAN Upload: Mail-Milter-Authentication-3.20210825 by MBRADSHAW https://metacpan.org/release/MBRADSHAW/Mail-Milter-Authentication-3.20210825
[05:41:47] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:42:00] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:46:07] *** Quits: proller (~p@2a02:6b8:b081:a409::1:19) (Ping timeout: 240 seconds)
[05:47:14] *** Joins: Artea (~Lufia@artea.com.pt)
[05:51:57] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:52:15] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:52:23] <aquanight> Grinnz: is this like "match 'not %'" golf or something?
[05:52:33] <aquanight> or find the most obtuse way to do it?
[05:52:45] <Grinnz> yes
[05:53:01] <Grinnz> aka bunch of people more bored than i am atm :P
[05:53:53] *** Joins: Croran (~quassel@2601:601:1880:7780:7059:5e06:6c60:26a5)
[05:55:09] <ens> nobody dares challenge my flagrant abuse of the line input number perlvar tbh.
[05:55:21] *** Joins: YaoNai (~YaoNai@user/yaonai)
[05:56:26] <aquanight> hardly
[05:56:33] <aquanight> I see that && 0 there
[05:56:57] <aquanight> I've got an idea but for some reason map { } split // isn't working right
[05:57:11] <aquanight> sweval: map { sprintf "%b", ord $_ } split //, 'percent'
[05:57:13] <perlbot> aquanight: 7
[05:57:16] <aquanight> why
[05:57:19] <aquanight> oh shit
[05:57:23] <aquanight> sweval: [ map { sprintf "%b", ord $_ } split //, 'percent' ]
[05:57:25] <perlbot> aquanight: [1110000,1100101,1110010,1100011,1100101,1101110,1110100]
[05:57:26] <aquanight> dammit perlbot
[06:00:04] <simcop2387> sweval: [ map { sprintf "%08b", ord $_ } split //, 'percent' ]
[06:00:06] <perlbot> simcop2387: ["01110000","01100101","01110010","01100011","01100101","01101110","01110100"]
[06:00:58] <simcop2387> sweval: [ map sprintf("%08b",ord$_) split//,'percent' ]
[06:01:00] <perlbot> simcop2387: ERROR: syntax error at (IRC) line 1, near ") split" 
[06:01:08] <simcop2387> sweval: [ map sprintf("%08b",ord$_),split//,'percent' ]
[06:01:09] <perlbot> simcop2387: ["01110000","01100101","01110010","01100011","01100101","01101110","01110100"]
[06:01:47] *** Quits: Su-Shee (~Susanne@p4ffc70a3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:03:24] <ens> the && 0 is not some sneaky way of just cancelling out a meaningless expression tho.
[06:03:37] *** Joins: Su-Shee (~Susanne@p4ff496a6.dip0.t-ipconnect.de)
[06:04:59] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[06:04:59] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[06:05:51] <aquanight> ens: what you've done is just a fancy "every other"
[06:06:05] <aquanight> $.||1..$.&&0 -> $.||1..0 -> 1..0
[06:06:12] <mst> ens: I care not about golfage
[06:06:44] <aquanight> oh not even that
[06:06:45] <aquanight> it's just 1
[06:06:51] <aquanight> the flipflop never resets
[06:07:03] <aquanight> so
[06:07:08] <aquanight> yeah you just wrote '0' really fancy
[06:07:56] <simcop2387> 0 but convoluted?
[06:08:00] <aquanight> for some reason I thought .. flops when the right is false, but no it's just a set/reset latch
[06:09:50] *** Joins: anthk_ (~anthk_@92.176.105.30)
[06:10:42] <simcop2387> aquanight: we should be using jk flipflops instead of sr latches.  much more flexible.
[06:15:05] <ens> it's not zero though. it's a counter of the current index in the list returned by the split() that is passed to the grep()
[06:15:17] <aquanight> perlbot: sweval use Sub::Util 'subname'; use List::Util; sub pErcEnT { state $s = subname __SUB__; grep { ord $_ eq oct ("0b" . join "", map { (~(ord $_) & 32) >> 5 } (split //, $s)); } split //, $_; } $_ = q(some string without percent); print "yay" unless pErcEnT;
[06:15:18] <perlbot> aquanight: yay
[06:15:45] <aquanight> ens: && has higher precedence than ..
[06:15:50] <aquanight> $.&&0 -> 0
[06:15:55] <aquanight> (technically, "")
[06:16:24] <aquanight> my point is it never matters what $. is
[06:16:42] <aquanight> you could replace them with $> and it would still work
[06:16:53] <aquanight> work the same way*
[06:17:07] <ens> it isn't zero because substr($str, 0, 1) would always return the first char of the string - which it doesn't.
[06:18:55] <aquanight> perlbot: sweval scalar 4.."foo"
[06:18:57] <perlbot> aquanight: Argument "foo" isn't numeric in range (or flop) at (IRC) line 1. Use of uninitialized value $. in range (or flop) at (IRC) line 1. 1E0
[06:19:10] <aquanight> perlbot: sweval scalar ".."foo"
[06:19:11] <perlbot> aquanight: Bareword found where operator expected at (IRC) line 1, near "".."foo" 	(Missing operator before foo?) String found where operator expected at (IRC) line 1, at end of line 	(Missing semicolon on previous line?) ERROR: Can't find string terminator '"' anywhere before EOF at (IRC) line 1. 
[06:19:13] <aquanight> perlbot: sweval scalar "baz".."foo"
[06:19:14] <perlbot> aquanight: Argument "foo" isn't numeric in range (or flop) at (IRC) line 1. Use of uninitialized value $. in range (or flop) at (IRC) line 1. 1E0
[06:19:46] <aquanight> perlbot: sweval scalar $.||1..$.&&0
[06:19:47] <perlbot> aquanight: 1
[06:20:54] <aquanight> perlbot: sweval my @q; () = (grep { my $x = $.||1..$.&&0; puish @q, $x; $x; } (1..10)); \@q;
[06:20:56] <perlbot> aquanight: Array found where operator expected at (IRC) line 1, near "puish @q" 	(Do you need to predeclare puish?) ERROR: syntax error at (IRC) line 1, near "puish @q" 
[06:21:01] <aquanight> perlbot: sweval my @q; () = (grep { my $x = $.||1..$.&&0; push @q, $x; $x; } (1..10)); \@q;
[06:21:03] <perlbot> aquanight: [1,2,3,4,5,6,7,8,9,10]
[06:21:27] <aquanight> perlbot: sweval my @q; () = (grep { my $x = $.||1..$.&&0; push @q, $x; $x; } (10..20)); \@q;
[06:21:29] <perlbot> aquanight: [1,2,3,4,5,6,7,8,9,10,11]
[06:21:44] <aquanight> ok what
[06:21:57] * ens giggles and snorts
[06:21:59] <aquanight> look I get that $. might be doing something
[06:22:07] <aquanight> but wtf is the point of all the boolean operators then
[06:22:43] *** Quits: whynot (~whynot@88.155.90.33) (Quit: leaving)
[06:24:02] <aquanight> perlbot: sweval my @q; () = (grep { my $x = $.||1; my $y = $.&&0; my $z = $x..$y; push @q, $x, $y, $z; $z; } (10..20)); \@q;
[06:24:03] <perlbot> aquanight: [1,undef,1,1,undef,2,1,undef,3,1,undef,4,1,undef,5,1,undef,6,1,undef,7,1,undef,8,1,undef,9,1,undef,10,1,undef,11]
[06:24:30] <aquanight> ... fucking what
[06:24:38] <aquanight> seriously *fucking* *what*
[06:25:15] <aquanight> oh shit ass
[06:25:41] <aquanight> I KNEW $. HAS NOTHING TO DO WITH IT.
[06:25:50] <aquanight> the fucking flipflop is doing the counting
[06:26:37] <aquanight> perlbot: sweval my @q; () = (grep { my $x = 1..0; puish @q, $x; $x; } (10..20)); \@q;
[06:26:38] <perlbot> aquanight: Array found where operator expected at (IRC) line 1, near "puish @q" 	(Do you need to predeclare puish?) ERROR: syntax error at (IRC) line 1, near "puish @q" 
[06:26:59] <aquanight> perlbot: sweval my @q; () = (grep { my $x = 1..0; push @q, $x; $x; } (10..20)); \@q;
[06:27:01] <perlbot> aquanight: Use of uninitialized value $. in range (or flip) at (IRC) line 1. Use of uninitialized value $. in range (or flip) at (IRC) line 1. Use of uninitialized value $. in range (or flip) at (IRC) line 1. Use of uninitialized value $. in range (or flip) at (IRC) line 1. Use of uninitialized value $. in range (or flip) at (IRC) line 1. Use of uninitialized... [Output truncated. http://perl.bot/p/aewsnq ]
[06:27:10] <aquanight> perlbot: sweval $. = 1; my @q; () = (grep { my $x = 1..0; push @q, $x; $x; } (10..20)); \@q;
[06:27:12] <perlbot> aquanight: [1,2,3,4,5,6,7,8,9,10,11]
[06:27:21] <aquanight> there is that bit though
[06:27:24] <aquanight> still
[06:27:38] <aquanight> how about encoding the character value into the subname
[06:27:39] <mst> aquanight: the only good thing about flipflops is that wearing them with socks is a funny way to troll people
[06:29:52] <ens> nice one aquanight. i am defeated.
[06:33:01] *** Joins: bmeneg (~bmeneg@2001:1284:f016:e29b:1c6f:bc59:a2b2:c5b9)
[06:33:03] *** Quits: bmeneg_ (~bmeneg@2001:1284:f016:5a1b:9150:d44b:d957:c37) (Ping timeout: 250 seconds)
[06:33:43] *** Joins: keutoi (~keutoi@157.47.90.161)
[06:37:49] *** Quits: Su-Shee (~Susanne@p4ff496a6.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:39:25] *** Joins: Su-Shee (~Susanne@p4ff49488.dip0.t-ipconnect.de)
[06:41:07] *** Quits: Martchus_ (~martchus@2a01:c22:7377:1800:d250:99ff:fe49:3cce) (Ping timeout: 240 seconds)
[06:41:15] *** Joins: Martchus (~martchus@2a01:c22:7b59:ce00:d250:99ff:fe49:3cce)
[06:41:40] <ens> i've been learning python recently out of necessity and every so often i run into some problem that i'm like "wow this was solved in perl 20 years+ ago"
[06:42:06] <mst> I don't mind python in general except for the part where I want proper scoping you bastards
[06:42:43] <ens> one of the first things i reached for was something like: use strict
[06:42:44] <ens> for vars
[06:42:47] <ens> nope.
[06:43:04] <mst> YES
[06:43:06] <Grinnz> yeah, no variable scoping means no typo protection
[06:43:30] <mst> 'explicit is better than implicit' in the zen of python always feels like the cruelest lie to me
[06:43:47] <ens> having to declare all my subs before the code that calls them is one i discovered earlier in the week too.
[06:43:59] <Grinnz> but i will be fair and say that every language has some deficiencies that some other language has solved 20 years ago
[06:44:10] <Grinnz> absolutely including perl
[06:44:11] <ens> feels like i'm having to manually cope with a language interpreter detail for some reason
[06:45:08] <Grinnz> yeah perl's "symbol check deferred to runtime if you use parens" is a huge detail that most people don't even realize
[06:46:01] <Grinnz> (but also contributes to perl being impossible to statically parse)
[06:47:17] <mst> Grinnz: not quite true, if it exists at compile time it still gets bound even with parens, or namespace::clean wouldn't work
[06:47:23] <Grinnz> that said, it's a moot point if all the subs you call come from an import and thus get parsed beforehand anyway
[06:47:39] <Grinnz> mst: right, more precisely "not required at parse time"
[06:47:54] <ens> looks annoying tbh because i usually put my app main code up top in scripts, and then have helper subs at the bottom after some partition or such.
[06:47:58] <mst> that difference is important to me :D
[06:48:21] <ens> i mean the first thing you want to read when you open a script is probably the start of what the app is going to do.
[06:48:27] <Grinnz> yeah, i do that too
[06:48:43] <Grinnz> but python was designed for applications not scripts
[06:48:58] <Grinnz> at least thats how it feels to me
[06:49:06] <Juerd> There is no difference
[06:49:07] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[06:49:10] <mst> ens: I've had so many problems from perl begin lifting 'sub' that I consider it a six of one and half a dozen of the other
[06:49:10] <ens> indeed.
[06:49:14] <mst> Juerd: what
[06:49:21] <ens> scripts, applications, it's just semantics now
[06:49:37] <Grinnz> well, the distinction i am making is the only semantics relevant to my statement, so i dont care what you think they are
[06:49:46] <Juerd> Heh
[06:49:59] <Juerd> mst: I'm tempted to repeat myself in \u
[06:50:09] <Juerd> Er, \U
[06:50:26] <mst> Juerd: sure, but you'd still be wrong, just in upper case
[06:50:36] <Juerd> mst: )
[06:50:39] <Juerd> argh
[06:50:41] <Juerd> mst: :)
[06:50:47] <Grinnz> ::)
[06:50:56] <Juerd> A script is just an application that has another application as its OS :)
[06:51:11] <mst> oh that's what you meant
[06:51:13] <mst> fair enough
[06:51:16] <Grinnz> yes, my point was in design intent, not structure
[06:51:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:52:02] <aquanight> Juerd: well
[06:52:27] <mst> Juerd: and emacs is an excellent OS that could really do with a working text editor, yes
[06:52:30] * mst runs
[06:52:39] <Juerd> mst: Exactly like that
[06:52:42] <Grinnz> perl makes affordances and was entirely designed for first-class "write a script to do the thing and you're done"
[06:52:46] <Grinnz> python was not
[06:53:00] <aquanight> I see it more as "scripts are just binaries that are text-readable"
[06:53:03] <Juerd> Grinnz: Yet lots and lost of actual scripting, including extending non-python apps, is done in python.
[06:53:10] <Juerd> Grinnz: And it's actually quite usable for that
[06:53:15] <Grinnz> i'm sure it is
[06:53:22] <aquanight> if only because even actual binaries have to be "interpreted" at load-time
[06:53:38] <Juerd> Really I don't see much of a difference between what Perl is used for, and what Python is used for, if you adjust for popularity.
[06:53:46] *** Quits: anthk_ (~anthk_@92.176.105.30) (Quit: anthk_)
[06:53:47] <ens> i am similiarly minded as aquanight.
[06:54:30] <Grinnz> i mean if we really want to go on a tangent we can argue about script/ or bin/ for cpan dists
[06:54:48] <aquanight> executable -> bin/
[06:54:57] <Juerd> bin/ is just an archaic name, that should have been exe/ or something like that :)
[06:54:59] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[06:55:03] <Grinnz> (i still think MBT should transparently support both)
[06:55:04] <aquanight> executable with no dynamic dependencies -> sbin/
[06:55:14] <Juerd> And since in many places in unix (e.g. permissions) it's just "x", maybe just x/ :P
[06:55:20] <mst> Juerd: agree. hence why our response to "should I learn perl or python" has always been 'learn both and stick with the one that fits your brain better'
[06:55:30] <ens> when i was a kid i used to think 'bin' meant it was not important due to living in UK.
[06:55:38] <Grinnz> bahaha
[06:55:47] <Juerd> mst: tbh nowadays I say python.
[06:55:50] <rbraun> mst: what's wrong with python scoping?
[06:55:54] <aquanight> ens: empty the bin :)
[06:55:54] <mst> ens: *roflol* can't blame you mate
[06:56:05] <mst> rbraun: it's shit?
[06:56:23] <aquanight> lib64 annoys me
[06:56:28] <mst> rbraun: I like lexical scoping
[06:56:29] <aquanight> why couldn't it have stayed lib
[06:56:45] <Juerd> Or, if there's time for nuance, I ask whether they want to get things done or have fun, and reply Python and Raku, respectively. I'm too depressed about the state of Perl to drag more people into it.
[06:56:53] <ens> i watched the hackers movie and used to ftp to unix-like systems and try to get files from the bin directory to see if they were interesting... because in the movie - joey the hacker went after the 'garbage file'
[06:57:48] <rbraun> i thought python did have lexical scoping? or is the issue you can't do it any smaller than function level
[06:57:48] <aquanight> for the longest fucking time I never knew that /etc actually stood for something
[06:58:03] <aquanight> I always thought it was just like the english word/abbreviation etc.
[06:58:12] <Grinnz> rbraun: it has function scoping only yeah
[06:58:17] <rbraun> yeah ok
[06:58:27] <Grinnz> you can't declare where anything is scoped, so variables just magically appear, thus, no typo checking
[06:58:39] <mst> rbraun: which means not lexical which means bollocks which means *cry*
[06:59:14] <rbraun> yeah, and python has some other issues with typo checking
[06:59:19] <aquanight> C89 you can only declare your variables at the start of the function and then that's it
[06:59:34] <aquanight> hmm
[06:59:50] <aquanight> use strict 'decls'; # my/state/our declarations only valid at the start of a block
[06:59:52] <Juerd> I can talk for hours about the things that I like more about Perl as compared to Python. I can't say much about Python that I like better than Perl. But Python is much larger now, ecosystem and community wise. With Python you can actually find a programming job easily, and it's actually supported by many new things. Companies don't provide Perl API examples or libraries, and ones on CPAN are often
[06:59:54] <Juerd> outdated and/or just hard to find (if they exist at all)
[06:59:56] <aquanight> wouldn't that be fun :)
[07:00:26] <mst> Juerd: agree, commercially people should absolutely learn python
[07:00:47] <Grinnz> and node, if your goal is to be hireable
[07:01:03] <aquanight> guh
[07:01:27] <Juerd> Grinnz: Yep
[07:01:32] <aquanight> it sucks because I've never really tried to actually learn python and every time I consider it I go look at stuff like the indenting rules or the variable thing and I just get pissed off and want nothing to do with it
[07:02:14] <aquanight> ditto node because javascript pisses me off too
[07:02:16] <ens> if you cultivate a kind of stockholm syndrome when practicing it then it isn't actually so bad.
[07:02:17] <Grinnz> node is absolutely my fallback plan if i ever can't get hired on perl
[07:02:32] <mst> honestly ES6 is close to an acceptable perl
[07:02:40] <aquanight> or the whole 'node' thing about every single basic fucking thing is made a node package
[07:02:53] <Juerd> aquanight: Agreed. I hate it when you can't just cut/paste code around and fix the indenting, because all the {} redundancy is gone. Or copy/paste some synposes to get you going, because almost always the indentation will be wrong. Or exchange example code by email with someone who has a slightly weird mail client (of which there are many)
[07:03:05] <Grinnz> aquanight: yeah but at least that means they have to make their packaging infrastructure stupid simple
[07:03:27] <aquanight> Juerd: not to mention it exacerbates the tab vs. whitespace wars
[07:03:41] <aquanight> I imagine every major pyhton project has at least 4 or 5 commits that are literally jsut reindenting the file
[07:03:52] <ens> well for python i picked up visual studio code and it's actually a fairly decent IDE for pythoning in.
[07:04:12] <Juerd> The thing that bothers me with node/javascript isn't the language, it's how it's used. Control flow is all over the place with all the async stuff and closures, and I just lose track instantly.
[07:04:22] <ens> you can do breakpoints and mouse-over vars and it'll show you the object or var contents with a popup and stuff.
[07:04:33] <Grinnz> yeah, that stems from its roots as running in the browser event loop
[07:04:36] <aquanight> at least if I download someone else's perl or C and start hacking at shit I can get working code and THEN worry about matching whitespace
[07:04:49] <Grinnz> but the first class event loop is still pretty great
[07:04:49] <Juerd> And while you can organize that in a fashion that keeps it within comprehensible complexity, it seems they don't care to bother
[07:04:59] <Grinnz> to have, i mean
[07:05:17] <aquanight> though to be honest I still wonder why people use hardspace indents
[07:05:30] <aquanight> use a fucking tab so you can make it whatever width you want and other people can have it different
[07:05:34] <Juerd> Meh, I've done concurrency mostly with actual processes. I think the art of designing things that can be unix-piped is mostly lost :(
[07:06:03] <Grinnz> aquanight: same reason projects distribute binaries for windows - if you count on other people to use it how they want, they'll do it wrong
[07:06:27] <aquanight> well
[07:06:34] <aquanight> that and compiling on Windows is a pain in the ass
[07:06:45] <aquanight> it's not like "unzip some shit then ./configure; make; make install"
[07:06:55] <Grinnz> yeah windows was a bad example
[07:07:05] <aquanight> even though it bloody fucking well could be
[07:07:16] <aquanight> install an SDK (oh gee you have to install build tools in linux too fuck off)
[07:07:22] <aquanight> configure.bat
[07:07:23] <aquanight> nmake
[07:07:25] <aquanight> nmake install
[07:07:51] <Grinnz> ah yes, TIMTOM
[07:07:51] <ens> compiling? that's what nerds do. All windows is useful for is to play Diablo 2 Resurrected.
[07:08:18] <aquanight> but also it helps that a PE binary for Windows is effectively reproducible by nature
[07:08:28] <aquanight> like shit compiles the same no matter what
[07:08:31] <ens> Gaming Subsystem for Linux.
[07:08:46] <aquanight> maybe if you're a ricer you get into the CL optimization flags but nobody does that for distributable binaries
[07:08:59] <aquanight> though...
[07:09:23] <aquanight> I mean you *could* make distributable linux binaries
[07:09:25] <Grinnz> ens: that it's trivial now to use windows as the OS and a linux terminal for real work is really one of the examples of microsoft's genius lately
[07:09:33] <aquanight> but for some reason people don't.
[07:09:55] <aquanight> well
[07:10:00] <ens> yup
[07:10:04] <aquanight> unless they're a package manager, that's a different story
[07:10:36] <aquanight> Grinnz: with WSL and Windows on ARM64, MS is a functioning Android subsystem away from winning the mobile game
[07:10:39] <Grinnz> and i don't mean that in a laudatory way, i still hate MS for monopolizing the game dev industry
[07:10:43] <Grinnz> but
[07:11:00] <Grinnz> i appreciate what they have done
[07:11:17] <aquanight> I just like that I can easily run irssi
[07:11:24] <aquanight> and not have to crap my system up with that Cygwin bullshit
[07:11:35] * GumbyPAN CPAN Upload: Nasm-X86-20210825 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20210825
[07:11:35] * GumbyPAN CPAN Upload: Data-Table-Text-20210825 by PRBRENAN https://metacpan.org/release/PRBRENAN/Data-Table-Text-20210825
[07:11:38] * GumbyPAN CPAN Upload: Unisyn-Parse-20210825 by PRBRENAN https://metacpan.org/release/PRBRENAN/Unisyn-Parse-20210825
[07:11:55] <ens> the last three places i worked at... for our provided desktop... mac/linux was supported at the first one, and linux was provided by default by the most recent two.
[07:12:02] <ens> wasn't even a question.
[07:12:08] <aquanight> but seriously, if MS figures out how to run android apps... god help us all.
[07:12:22] <Grinnz> have to use windows or macos for work. sucks, but WSL makes it bearable
[07:13:01] <djerius> LeoNerd: man opendir on my linux box claims that opendir is a real system thing, not a Perl thing.  So does my 25 year old C code.
[07:13:49] <rbraun> ens: wow, what kind of jobs?
[07:14:17] <ens> rbraun: devops/sre stuff for linux server estate.
[07:14:18] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[07:14:19] <Grinnz> and as much as macos would be "closer" to linux... i'm glad i didn't go that route
[07:14:24] <rbraun> ok
[07:14:35] <rbraun> Grinnz: yeah i'd take anything over a mac at this point
[07:15:04] <aquanight> djerius: technically, opendir is a C thing. The low-level kernel thing is to just open()
[07:15:28] <Grinnz> my gripes currently are limited to windows's window manager and lack of a few key options, like displaying the date and seconds in the taskbar
[07:15:31] <aquanight> (open with the O_DIRECTORY flag)
[07:16:09] <Grinnz> (you have to expand the taskbar to 2 rows to show the date, which no fuck that)
[07:17:07] <djerius> aquanight: is that a recent implementation detail, or can that be tracked back to ancient times? 
[07:17:39] <aquanight> djerius: I don't think opendir() was ever an actual low-level system call
[07:17:45] <aquanight> the flag itself is like 2.6 or something
[07:17:51] <aquanight> 2.1
[07:18:01] <aquanight> but I imagine open() always allowed you to open a directory
[07:18:15] <djerius> aquanight: which OS are you talking about?  My C code predates linux (I cut my teeth on SunOS).
[07:18:18] <Grinnz> kinda would have had to
[07:18:22] <aquanight> djerius: Linux
[07:18:49] <aquanight> the POSIX opendir() for linux is defined via libc
[07:19:18] <djerius> what goes on under the hood stays under the hood.
[07:19:26] <aquanight> fair
[07:19:51] <aquanight> when you ssaid it was a "real system thing" I guessed that you meant syscalls
[07:21:36] * GumbyPAN CPAN Upload: Git-Hooks-3.1.1 by GNUSTAVO https://metacpan.org/release/GNUSTAVO/Git-Hooks-3.1.1
[07:21:40] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 240 seconds)
[07:21:42] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:23:36] <djerius> aquanight: yeah, i was sloppy. 
[07:24:40] <djerius> at some point I stopped caring about where things were implemented.
[07:25:22] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[07:29:01] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[07:29:23] <ens> sure it'll all be unikernel based cloud apps in the future anyway
[07:30:40] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[07:31:37] * GumbyPAN CPAN Upload: CeeJay-0.0.3-TRIAL by CEEJAY https://metacpan.org/release/CEEJAY/CeeJay-0.0.3-TRIAL
[07:41:17] *** Joins: Martchus_ (~martchus@dynamic-095-117-168-058.95.117.pool.telefonica.de)
[07:42:23] *** Quits: Martchus (~martchus@2a01:c22:7b59:ce00:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[07:53:10] *** Quits: k-man (~jason@user/k-man) (Ping timeout: 240 seconds)
[07:55:09] <gordonfish> Heh, AT&T just sent me a random Note 9 because their "3G network is shutting down in February 2022", and I think it's because at home I use a microcell (aka a femtocell more abstractly) which is like my own cell site that tunnels via my home Internet connection.
[07:56:52] <gordonfish> Those microcells only do 3G so I assume they detected that. My current phone supports LTE+/4G just fine when I'm away from home. And while their towers wont support 3G anymore, I don't see why the microcell would stop working, since it emits the 3G signal itself.
[07:57:10] <gordonfish> So in other words they sent me a free phone for no reason. I don't even like Samsung.
[07:59:09] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (Quit: Coyote finally caught me)
[08:00:05] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:00:07] *** Joins: k-man (~jason@user/k-man)
[08:01:44] *** Joins: revhippie (~jdavis@047-013-092-010.res.spectrum.com)
[08:06:33] <gordonfish> https://gfish.info/att1.jpg
[08:08:08] <gordonfish> And with at&t branding on boot
[08:09:23] <gordonfish> (Don't get me wrong, I'm not one to check gift horse dental work, but this was just so random and quite frankly, wasteful on their part. I mean they could have, I don't know, *asked* me if I need a new bloody phone before trying to decide for me...)
[08:10:06] <gordonfish> It's about the same size as my 5T
[08:14:24] <gordonfish> (Sim has a section for a microsd card, which is always nice. Internal storage is 128, same as my 5T, though the latter can use a lot more of it since it's not full of bloat ware
[08:19:12] *** Joins: monkey_ (~user@190.104.116.134)
[08:20:40] *** Joins: gast0n (~g4570n@user/gast0n)
[08:26:43] * GumbyPAN CPAN Upload: CeeJay-0.0.4-TRIAL by CEEJAY https://metacpan.org/release/CEEJAY/CeeJay-0.0.4-TRIAL
[08:29:32] *** Joins: Kharec (~Kharec@lfbn-lyo-1-1772-135.w90-65.abo.wanadoo.fr)
[08:36:27] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[08:43:28] *** Joins: tejr (~tejr@user/tejr)
[08:53:07] *** Quits: seekr (~seekr@130.44.163.10) (Ping timeout: 240 seconds)
[08:54:04] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[09:27:47] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[09:31:01] *** Joins: seekr (~seekr@130.44.163.10)
[09:44:07] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[09:50:39] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:50:56] *** Quits: seekr (~seekr@130.44.163.10) (Quit: Goodbye, cruel world.)
[09:59:56] *** Quits: gce108 (~gce@user/gce108) (Quit: Leaving)
[10:01:20] *** Joins: gce108 (~gce@user/gce108)
[10:04:10] *** Joins: furrymcgee (~devuan@31.179.186.66)
[10:06:39] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ðŸ‘‹)
[10:11:16] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[10:13:08] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Read error: Connection reset by peer)
[10:16:09] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 248 seconds)
[10:19:48] *** Joins: mattil (~mattil@d46-dyfrknk2wtxymj8-4.rev.dnainternet.fi)
[10:22:47] *** Quits: mattil (~mattil@d46-dyfrknk2wtxymj8-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:25:08] *** Joins: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com)
[10:27:31] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[10:34:51] *** Quits: amnesiac (~marco@2601:646:4104:29b0:a508:24c1:5ad1:1134) (Ping timeout: 250 seconds)
[10:35:37] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[10:35:55] *** Joins: mattil (~mattil@d46-dyfrknk2wtxymj8-4.rev.dnainternet.fi)
[10:41:27] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:44:47] *** Quits: mattil (~mattil@d46-dyfrknk2wtxymj8-4.rev.dnainternet.fi) (Ping timeout: 240 seconds)
[10:51:59] * GumbyPAN CPAN Upload: Data-Properties-1.06 by JV https://metacpan.org/release/JV/Data-Properties-1.06
[10:54:27] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[11:08:19] *** Joins: horsepatat (~horsepata@80.89.76.137)
[11:21:31] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[11:26:07] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[11:26:39] *** Quits: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[11:32:04] * GumbyPAN CPAN Upload: SPVM-0.9010 by KIMOTO https://metacpan.org/release/KIMOTO/SPVM-0.9010
[11:32:21] *** Joins: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com)
[11:32:26] *** Quits: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com) (Remote host closed the connection)
[11:32:45] *** Joins: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com)
[11:40:38] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[11:41:10] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:51:42] *** Joins: frost (~frost@59.71.240.119)
[12:02:55] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 252 seconds)
[12:06:36] *** Parts: frost (~frost@59.71.240.119) ()
[12:12:55] *** Joins: horsepat1t (~horsepata@212.3.197.3)
[12:15:40] *** Quits: horsepatat (~horsepata@80.89.76.137) (Ping timeout: 240 seconds)
[12:20:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[12:22:52] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[12:26:07] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[12:27:49] *** Quits: pucara (~i@181.92.73.218) (Quit: Lost terminal)
[12:29:17] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[12:41:31] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Remote host closed the connection)
[12:46:33] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[12:49:20] *** Joins: anthk_ (~anthk_@92.176.105.30)
[12:51:58] *** Joins: elf_fortres (~elf_fortr@adsl-72-50-4-46.prtc.net)
[12:53:57] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:00:56] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[13:07:07] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[13:07:34] *** Quits: elf_fortres (~elf_fortr@adsl-72-50-4-46.prtc.net) (Ping timeout: 246 seconds)
[13:08:26] *** Joins: zakame (~zakame@user/zakame)
[13:09:19] *** Joins: txtsd (~txtsd@user/txtsd)
[13:13:19] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 252 seconds)
[13:17:42] *** Joins: ztx (~ztx@user/ztx)
[13:28:09] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:33:19] *** Joins: shlomif (~shlomif@87.68.242.72.adsl.012.net.il)
[13:41:17] * GumbyPAN CPAN Upload: Storable-3.24_50 by NWCLARK https://metacpan.org/release/NWCLARK/Storable-3.24_50
[13:49:22] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[13:49:53] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[14:12:40] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Ping timeout: 240 seconds)
[14:32:45] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:32:48] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:33] *** Joins: csrf (~csrf@user/csrf)
[14:37:30] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[14:41:24] * GumbyPAN CPAN Upload: Bio-Epithelium-0.1.1 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/Bio-Epithelium-0.1.1
[14:49:40] *** Quits: Kharec (~Kharec@lfbn-lyo-1-1772-135.w90-65.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:54:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:54:51] *** Quits: msk (~msk@49.207.204.61) (Ping timeout: 250 seconds)
[14:55:29] *** Joins: Kharec (~Kharec@lfbn-lyo-1-1772-135.w90-65.abo.wanadoo.fr)
[14:55:45] *** Quits: Kharec (~Kharec@lfbn-lyo-1-1772-135.w90-65.abo.wanadoo.fr) (Client Quit)
[14:56:26] * GumbyPAN CPAN Upload: Bio-Epithelium-0.1.2 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/Bio-Epithelium-0.1.2
[14:59:40] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[15:02:13] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[15:04:00] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[15:07:10] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 240 seconds)
[15:07:10] *** aquanite is now known as aquanight
[15:13:47] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 240 seconds)
[15:18:14] *** Joins: pajamian (~pj@ghettoforge/pj)
[15:19:07] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 250 seconds)
[15:19:08] *** pajamian is now known as pj
[15:21:28] * GumbyPAN CPAN Upload: Bio-Epithelium-0.1.3 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/Bio-Epithelium-0.1.3
[15:36:30] * GumbyPAN CPAN Upload: Bio-Epithelium-0.1.4 by KOBOLDWIZ https://metacpan.org/release/KOBOLDWIZ/Bio-Epithelium-0.1.4
[15:42:04] *** Joins: diskin (~diskin@46.61.16.74)
[15:43:02] <LeoNerd> Idle musing: since we have a perlsyn.pod I vote we should write a document about all the terrible ideas that you shouldn't do in real code, to be stored in perlsin.pod
[15:45:16] *** Joins: msk (~msk@49.207.204.61)
[15:46:51] *** Quits: diskin (~diskin@46.61.16.74) (Ping timeout: 250 seconds)
[15:49:44] <Botje> will there be a perlcos.pod too?
[15:49:47] <ilmari> :D
[15:50:03] <LeoNerd> That's the rationale document, explaining the reasons why the sins are bad
[15:50:21] <Botje> 'cos we says o.
[15:50:40] <ilmari> > Eating too much cake is the sin of gluttony. However, eating too much pie is okay because the sin of pi is always zero.
[15:50:48] <ilmari> mmm, pie
[15:50:59] <keutoi> I doubt we can enumerate _all the terrible ideas_.
[15:51:16] <keutoi> Especially in perl.
[15:51:17] <LeoNerd> ilmari: I have trig functions in mind today, because I did this - https://github.com/prometheus/prometheus/issues/9233
[15:51:18] <Paperbot_> Link title(s): [ Trig Functions Â· Issue #9233 Â· prometheus/prometheus Â· GitHub ]
[15:51:33] <LeoNerd> They've gone and implemented them. :) Well,... almost all. They're missing atan2 currently because Reasons
[15:53:03] <ilmari> that was quick
[15:53:29] <Botje> i've always want to know what the sin of my request rate was
[15:54:14] <LeoNerd> Botje: they're essential when you're dealing with polar data. Also, sin and cos are useful when doing Holt-Winters or related seasonal aggregation/prediction techniques
[15:54:18] <LeoNerd> FFTs
[15:54:29] <LeoNerd> They come up surprisingly often in places you might not expect
[15:54:33] <Botje> LeoNerd: yeah, I read the ticket after quipping
[15:55:27] <ilmari> Botje: depends on what kind of content you're requesting :)
[15:55:36] <LeoNerd> Amusingly, at Google the only place I ever saw sin() actually being used in borgmon, was in a *giant* template macro thing used to implement Holt-Winters. Whereas prometheus already provides a holt_winters() function natively, so it's just faster. Because of that they didn't bother to add the actual trig functions at first
[15:55:42] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:55:43] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:56:32] * GumbyPAN CPAN Upload: App-week-1.02 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-week-1.02
[15:56:50] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 272 seconds)
[15:56:52] *** Joins: anthk_ (~anthk_@92.176.105.30)
[15:57:41] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[15:58:26] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[16:00:50] *** Joins: odc (sid197788@id-197788.helmsley.irccloud.com)
[16:02:27] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 250 seconds)
[16:06:57] <xenu> sadly, the problem with documenting best/worst practices is that not everyone agrees with them
[16:07:48] <Botje> we document the worst practices, wait for people to come up with new ones, and, uh, ... promote them to management?
[16:08:03] <xenu> that reminds me that perlsec still *recommends* taint mode
[16:09:37] <daemon> re:  <keutoi> I doubt we can enumerate _all the terrible ideas_. - I am sure we can with a big enough regex :)
[16:09:39] <xenu> the exact wording is
[16:09:41] <xenu> "This flag is strongly suggested for server programs and any program run on behalf of someone else, such as a CGI script. "
[16:09:58] *** Joins: 040AAA8RK (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[16:11:27] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[16:11:33] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[16:12:22] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:13:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[16:14:06] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:15:15] <xenu> 19
[16:16:07] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[16:31:55] *** Joins: proller (~p@2a02:6b8:0:40c:7bd3:378a:fcc7:8b8b)
[16:34:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:39:31] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:10:05] <gamo> push @{ ${ "$names[$data]" } }, $_ if $data > 0;   # OR BETTER 
[17:10:35] <gamo> push @{ "$names[$data]" }, $_ if $data > 0;
[17:11:03] <huf> why the ""?
[17:11:26] <gamo> because @names = "A" .. "Z";
[17:11:45] <huf> but those arent arrays, why are you pushing to them?
[17:12:14] <gamo> I want to create an not anonymous list
[17:13:14] <huf> i dont know what that might be
[17:13:18] <gamo> lists that can be one after another @A, @B, etc...
[17:13:32] <haarg> but why?
[17:13:45] <gamo> because I need it
[17:13:57] <haarg> i doubt it
[17:14:05] <gamo> do not
[17:14:06] <Botje> perlbot: varvarname
[17:14:06] <perlbot> Botje: Why it's inadvisable to `use a variable as a variable name' - http://perl.plover.com/varvarname.html
[17:14:40] <gamo> the alternative is worst. Is to have an 2D array
[17:14:42] <Botje> gamo: try explaining why you need it then.
[17:14:56] <huf> gamo: yes, that's much better and saner
[17:15:02] <huf> so go ahead, have a 2d array
[17:15:04] * shaldannon wonders when a 2D array or better yet a hash was bad
[17:15:15] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[17:16:07] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[17:16:26] <gamo> the discussion went insane when 'they' say that I could not use $data[$fd][$line]
[17:16:36] *** Joins: aman (~aman@user/aman)
[17:16:39] <huf> what
[17:17:45] <shaldannon> also, I find thinking of arrays as 1, 2, 3, ... N deep locks you into a mindset where you don't see other alternatives.  if you think of your data structures as free form that can have different types to suit your needs, you'll be much more flexible and much happier.
[17:19:16] <shaldannon> I've had instances where I had an array of hashrefs, some of which contained mixtures of scalars, arrays, and hashrefs
[17:19:21] <gamo> REwinding my argument: 1) I'll prefer to use @A @B @C than @{ $data[$fd] } 
[17:19:36] <LeoNerd> Hetrogeneous data structures are usually a terrible idea
[17:19:39] <huf> then declare those arrays
[17:19:40] <Botje> you're aware you can do $data[$fd]->@* instead?
[17:19:41] <huf> and use them
[17:19:57] <Botje> i'll get me coat
[17:20:25] <gamo> wait!  Botje explain it, the @*
[17:21:00] <Botje> @{ EXPR } is the same as EXPR->@*
[17:21:00] <haarg> my $blah = $data[$fd]; @$blah;
[17:21:05] <Botje> but the latter is less ugly.
[17:21:39] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:21:40] <gamo> haarg: that's entry in my level of understanding
[17:22:05] <gamo> haarg and it's fine
[17:22:32] <gamo> Botje: ugly syntax
[17:22:48] <haarg> have fun with your shit code i guess
[17:22:48] <huf> oh yeah cos varvarname is *sooo* nice
[17:22:59] <haarg> hopefully nobody else ever has to look at it
[17:24:00] <gamo> Haarg: why shit code??? there is one way to do it now???
[17:24:15] <haarg> there are bad ways
[17:24:18] <huf> no, but you've managed to find the shit way which nobody likes
[17:24:23] <huf> out of all the possibilities
[17:24:24] <gamo> Why bad?
[17:25:01] <huf> it wont run under strict for one
[17:25:05] <gamo> Maybe this forum is composed of snobs
[17:25:09] <haarg> also you already have your answer and don't seem willing to do anything else, so why even discuss it?
[17:25:23] <huf> because we didnt flatter his ego enough
[17:25:28] <huf> so now we get to the personal insults
[17:25:40] <gamo> Ok, I'll no discuss. Many thanks
[17:25:53] <gamo> THANKS!
[17:26:00] <gamo> Really
[17:26:41] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:26:59] *** Quits: Lynx_ (~x@fuchshai.geomar.de) (Ping timeout: 252 seconds)
[17:29:19] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[17:32:26] *** Quits: daex (~daex@user/daex) (Quit: /me 's znc kicks the bucket)
[17:32:42] *** Joins: daex (~daex@user/daex)
[17:33:12] <shaldannon> so ... backtracking for a moment, LeoNerd why are heterogenous data structures a (qualified) bad idea?
[17:33:36] <LeoNerd> They're hard to work on
[17:33:54] <LeoNerd> If you have a hash, you want every value of that hash to have the same shape, to be the same thing. Ditto arrays
[17:34:08] <LeoNerd> People using arrays as tuples, especially annoy me
[17:35:32] <huf> but they *are* tuples...
[17:38:42] <daemon> what I would really like is some way to use hashes withough rhs values, for when you are doing index type things, so $blah->{something}->{something_else} is valid with no right hand side
[17:38:44] <daemon> I wonder ..
[17:38:59] <daemon> eval: my $blah->{x}->{y} = undef; keys %{ $blah->{x} }
[17:39:04] <perlbot> daemon: 1
[17:39:13] <daemon> eval: my $blah->{x}->{y} = undef; @{ keys %{ $blah->{x} } }
[17:39:14] <perlbot> daemon: 0
[17:39:23] <daemon> hmm
[17:39:26] <huf> *blink*
[17:39:29] <huf> @{ keys ... } ?
[17:39:31] <shaldannon> don't forget "exists"
[17:39:39] <LeoNerd> You wanted [ keys ... ]
[17:39:41] <daemon> eval: my $blah->{x}->{y} = undef; [ keys %{ $blah->{x} } ]
[17:39:41] <daemon> yep
[17:39:42] <perlbot> daemon: ["y"]
[17:39:46] <huf> daemon: also yes, this works. you can put shit you dont care about as the value
[17:39:48] <huf> and then it's just the keys
[17:39:55] <daemon> I normally just use '1'
[17:39:58] <huf> such as undef or 1, yeah
[17:40:28] * shaldannon frequently uses hashes with either "1" or an increment as the rhs to deduplicate the value used in the keys
[17:40:41] <gerikson> same 
[17:41:19] <daemon> its such a minor thing but it somehow bugs me sticking that 1 there know I just do not need it
[17:41:26] <daemon> knowing*
[17:41:41] <gerikson> sympathy for the machine? ;)
[17:41:53] <shaldannon> rage against hte machine
[17:41:55] <daemon> :) indeed the poor machine
[17:42:35] *** Joins: Lynx_ (~x@fuchshai.geomar.de)
[17:51:47] *** Quits: proller (~p@2a02:6b8:0:40c:7bd3:378a:fcc7:8b8b) (Ping timeout: 240 seconds)
[17:53:49] *** Quits: Jonno_FTW (~come@api.carswap.me) (Ping timeout: 252 seconds)
[17:55:15] *** Joins: Jonno_FTW (~come@api.carswap.me)
[17:55:56] *** Joins: art1 (~romeyke@p200300ccdf0a93008a46ea9232effccc.dip0.t-ipconnect.de)
[17:58:23] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[17:59:03] <Altreus> Whenever daemon says stuff I feel like other people must feel when I say stuff
[17:59:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Client Quit)
[18:00:43] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 244 seconds)
[18:01:43] *** Joins: tejr (~tejr@user/tejr)
[18:01:43] *** Joins: adherzog (uid387168@id-387168.tooting.irccloud.com)
[18:04:29] *** Joins: proller (~p@2a02:6b8:0:40c:f78c:40f1:8ec0:a7cc)
[18:04:50] <ilmari> sweval: my %h; @h{qw(foo bar baz)} = (); \%h; # if you only need the keys
[18:04:51] <perlbot> ilmari: {bar => undef,foo => undef,baz => undef}
[18:05:27] *** Joins: gryphn (~gryphon@154.21.20.209)
[18:06:46] *** Quits: aman (~aman@user/aman) (Quit: aman)
[18:08:07] *** Quits: keutoi (~keutoi@157.47.90.161) (Ping timeout: 252 seconds)
[18:08:59] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[18:09:46] *** Joins: keutoi (~keutoi@106.208.52.180)
[18:11:35] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[18:20:42] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:21:14] *** Joins: mattil (~mattil@airio.portalify.com)
[18:21:19] *** Joins: YaoNai (~YaoNai@user/yaonai)
[18:25:51] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[18:28:33] <simcop2387> gordonfish: https://twitter.com/Dennis_E_Taylor/status/1429539543330418688?ref_src=twsrc%5Etfw
[18:28:33] <Paperbot_> Dennis E. Taylor (@Dennis_E_Taylor) 2d18h ago: For those who have been asking about future books, Iâ€™ve just signed a 4-book deal with Audible - 2 bob and 2 non-bob.
[18:31:10] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:31:44] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[18:32:38] *** Joins: tejr (~tejr@user/tejr)
[18:34:15] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-253.prtc.net)
[18:37:10] *** Joins: aman (~aman@user/aman)
[18:37:56] *** Quits: jplesnik (~jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[18:43:20] <genio> nice
[18:43:58] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[18:51:43] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[18:53:36] *** Quits: horsepat1t (~horsepata@212.3.197.3) (Read error: Connection reset by peer)
[18:54:27] *** Quits: keutoi (~keutoi@106.208.52.180) (Ping timeout: 240 seconds)
[19:01:46] *** Joins: keutoi (~keutoi@106.208.52.180)
[19:06:00] *** Quits: proller (~p@2a02:6b8:0:40c:f78c:40f1:8ec0:a7cc) (Remote host closed the connection)
[19:13:01] *** Joins: proller (~p@2a02:6b8:0:40c:4945:8fb3:7c3a:bbeb)
[19:14:40] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[19:19:12] *** Joins: gast0n (~g4570n@user/gast0n)
[19:19:17] *** Joins: toddf (~todd@gateway/tor-sasl/toddf)
[19:23:07] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-253.prtc.net) (Ping timeout: 246 seconds)
[19:27:08] *** Joins: pj (~pj@ghettoforge/pj)
[19:27:39] <gordonfish> simcop2387: bob?
[19:28:00] <simcop2387> bobiverse
[19:28:11] * gordonfish . o O ( Is there a 4 non-bobs? What's going on? )
[19:28:57] <simcop2387> thought it was you who i talked about the bobiverse books recently
[19:29:18] <gordonfish> Must have been someone else, though sounds interesting
[19:29:31] <simcop2387> author signed a deal for 2 more bobiverse books.  was probably gemio then
[19:29:49] <simcop2387> genio* they are good books, definitely recommend
[19:30:48] <genio> I've read them all thus far. agree, they're good books
[19:31:24] <gordonfish> At&t, apparently because I use a microcell at home (because I don't get a good tower signal here), which uses 3G, they sent my a random Note 9 since they are shutting their 3G network down in February. https://gfish.info/att1.jpg
[19:31:41] *** Joins: amnesiac (~marco@2601:646:4104:29b0:e5db:32b8:ea78:9c00)
[19:33:01] <gordonfish> They must have detected that I'm using 3G (H (for HSPA) on my phone where as away from home I get LTE/LET+) at home, even though the microcell emits its own signal so it would have nothing to do with 3G being shutdown on towers.
[19:33:57] <gordonfish> It's an AT&T branded phone, big logo on boot. Has basic bloatware. Feels a tad sluggish compared to my 5T with custom rom.
[19:34:26] <gordonfish> But all that aside, why the hell are they sending random phones to people who never asked for them? I can pick my own devices thank you. Seems so wasteful.
[19:35:35] <gordonfish> simcop2387: I'll definitely look into that whole bobiverse thing. That's new to me.
[19:35:47] <vague> simcop2387, as long as that includes book two of Outland
[19:36:12] <gordonfish> I'm wondering if anyone else's cell carrier has done anything similar to this?
[19:36:12] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Quit: rwbrambler)
[19:36:17] <vague> I want to know what happens to Earth!
[19:36:33] <simcop2387> vague: he hasn't said but that seems to be the expectation
[19:36:33] <gordonfish> They all went underground?
[19:37:17] <simcop2387> gordonfish: check your bill.  it's probably on a rental loan kind of thing
[19:37:40] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[19:38:19] <simcop2387> gordonfish: your current phone might not support *their* lte bands, which might have triggered it
[19:38:46] *** Joins: thrig (~thrig@65.113.153.50)
[19:38:57] <vague> simcop2387, buuu, Dennis answers: Outland sequel is actually a different contract.
[19:39:41] <simcop2387> vague: ah hadnt seen that
[19:40:03] <simcop2387> gordonfish: https://forums.crackberry.com/blackberry-10-os-f269/3g-sunset-t-gave-me-free-iphone-se-1191214/
[19:40:04] <Paperbot_> Link title(s): [ 3g Sunset - AT&T gave me FREE iPhone SE - BlackBerry Forums at CrackBerry.com ]
[19:40:51] *** Quits: 040AAA8RK (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Quit: Leaving)
[19:41:26] *** Joins: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[19:41:37] <leitz> Sorry, my brain is working less than normal. In "Modern Perl" there's a line:    while ( /Hello/ .. /Goodbye/ ) { say "> $_";};
[19:42:08] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[19:42:20] <leitz> I'm trying to figure out how to feed the while loop, though. How do I read a file and do the while? 
[19:43:15] <Mandevil> I want to subclass an Object::Pad class where the only functionality of the subclass is to provide specific default arguments to the constructor. How should I do that?
[19:43:44] <Altreus> leitz: the while loop would have to update $_ as well surely
[19:44:11] <LeoNerd> Mandevil: methods
[19:44:14] *** Joins: ztx (~ztx@user/ztx)
[19:45:10] <leitz> Altreus, I'm just (mostly) copying from the book. Let me check the errata.
[19:46:43] <thrig> usually .. looks something like  printf "a\nb\nc\nd\ne\n" | perl -nle '/b/../d/ and print'
[19:46:49] <Altreus> leitz: normally you might see: while(readline *STDIN) { if (/Hello/ .. /Goodbye/) { say "> $_" } }
[19:46:52] <ilmari> I would expect that to be an while (<$fh>) { if ( /Hello/ ..  /Goodbye/ ) { say "> $_"; } }
[19:47:01] <Altreus> heh
[19:47:06] <leitz> What dimwit thought erratta should be grouped by most active?
[19:47:09] <ilmari> -an
[19:47:11] <Mandevil> LeoNerd: Huh?
[19:47:33] <Botje> methods have lay.. wrong movie.
[19:47:36] <LeoNerd> Mandevil: in the base class, provide a little method for the default value of a param, and override it in the subclass
[19:47:58] <Altreus> can you override new and call super::new in this new OO world?
[19:48:08] <Altreus> or is it not that brave
[19:48:08] <Mandevil> Ah.
[19:48:35] <Altreus> in fact, does SUPER still work the same/
[19:48:54] <LeoNerd> Nothing I can do about SUPER::, so yes that does the same thing
[19:49:35] <haarg> there still isn't a reasonable replacement for SUPER:: in core
[19:49:54] *** Quits: aman (~aman@user/aman) (Quit: aman)
[19:49:59] <Altreus> I wasn't sure if we'd moved far enough away from the old blessed-into-package paradigm that SUPER had become meaningless
[19:50:18] <Altreus> do we need a reasonable replacement for SUPER?
[19:50:32] <Altreus> $*SUPER? :P
[19:50:39] <Altreus> er, $^ in perl5
[19:50:43] <Altreus> $^SUPER
[19:51:21] <haarg> subclassing would be pretty pointless without SUPER
[19:51:29] <thrig> SUPPER. then also BREAKFAST, LUNCH, etc
[19:51:44] <LeoNerd> These sound like time-of-day phaser blocks
[19:51:55] <haarg> so i guess if you don't think subclassing is useful, we don't need a replacement
[19:52:01] <Botje> TEATIME
[19:52:26] <ilmari> LeoNerd: when string-evaling a class â€¦ { â€¦ } with a syntax error, the actual parse error seems to be swallowed
[19:52:28] <leitz> Altreus, ilmari thanks. Your suggestions worked.
[19:52:42] <Altreus> haarg: I was more getting at why does it need replacing, not why do we need the concept in the first place
[19:52:48] <Altreus> after all, we have SUPER
[19:52:58] <Altreus> what's wrong with it, is my point
[19:53:23] <Altreus> Botje: pronounced te-ah-tim-eh
[19:53:27] <LeoNerd> It's resolved at the wrong time
[19:54:07] <perlbot> ilmari pasted a new file at https://l.perl.bot/p/8s2smm - Object::Pad syntax error vs. eval
[19:54:10] <ilmari> LeoNerd: ^^
[19:54:48] <LeoNerd> Oh... bah. Yes the parser hates everyone
[19:54:54] <LeoNerd> It sometimes decides just not to output messages
[19:55:27] <LeoNerd> Throw it in an RT bug so I don't forget about it, but overall I don't have a simple solution to that
[19:56:05] <haarg> SUPER does not follow the mro and is bound to the package it is compiled in
[19:56:56] * GumbyPAN CPAN Upload: App-Whiff-0.007 by RJBS https://metacpan.org/release/RJBS/App-Whiff-0.007
[19:57:25] <haarg> the latter is a problem for roles
[19:58:16] <LeoNerd> The concept of SUPER isn't even particularly well-defined inside roles
[19:58:18] <Ovid>  Roles should make no assumptions about what they're consumed into. The original trait researchers had considered simply banning `super` inside of roles.
[20:00:06] <Altreus> makes sense; no guarantee the consuming class has a superclass
[20:00:30] <ilmari> LeoNerd: https://rt.cpan.org/Ticket/Display.html?id=139042
[20:00:31] <Paperbot_> Link title(s): [ Bug #139042 for Object-Pad: Parse errors are lost in string eval <https://rt.cpan.org/Public/Bug/Display.html?id=139042> ]
[20:00:46] <haarg> SUPER would be a bad name for something in a role
[20:00:53] <haarg> but that's what method modifiers are for
[20:01:06] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 250 seconds)
[20:01:06] <haarg> and a method modifier in a role would imply a "requires"
[20:01:30] <haarg> so that the consuming class or a superclass would need to have the method
[20:02:13] <Ovid> Yeah, that's true. I've also considered that something like `method foo() { return $self->bar/ 3 }` should automatically require the `bar` method. Having to manually list the methods you require seems odd.
[20:02:36] <haarg> that requires type information that doesn't really exist though
[20:02:40] <Ovid> Though static analysis can't always work for Perl, so sometimes you might need to list requires.
[20:02:43] <Altreus> Perl isn't introspective enough to do that, at least now
[20:02:46] <Grinnz> the problem with that is also $self->$method_name
[20:02:57] <Ovid> Yup. Makes me cry sometimes.
[20:03:31] <Ovid> Recently had an issue with a client where a particular class took a `$request` object. I asked what the class of that object was and no one was sure.
[20:03:54] <Ovid> (Logging debug info got that for me, but damn!)
[20:04:06] <Altreus> too much to ask for POD?
[20:04:13] <Ovid> Heh
[20:04:13] <LeoNerd> "dynamic languages are dynamic" shocker. News at 10
[20:04:16] <Grinnz> Altreus: have you worked with people? :P
[20:04:26] <Altreus> Grinnz: I've written POD for them!
[20:05:01] <haarg> if you get rid of roles, SUPER isn't really that bad - it doesn't work properly with multiple inheritance but that's also rather gross
[20:05:20] <Grinnz> yeah multiple inheritance is the only case where MRO matters
[20:05:43] <Grinnz> good thing we don't use that all over core :)
[20:07:14] <Altreus> which is what next::method (I believe) is for
[20:07:35] <haarg> it's still gross that SUPER is always dfs, next::method is always c3, and 'use mro' only impacts the first method found
[20:09:02] <haarg> next::method is trash. doesn't follow the mro, is very slow, and relies on the calling method name.
[20:09:27] <haarg> it doesn't need to be slow, but there's nobody to fix it apparently
[20:09:42] <haarg> and relying on the method name is a problem if you ever generate methods
[20:09:55] <haarg> you need to name the generated methods
[20:10:02] <haarg> which is extra fun when they aren't closures
[20:10:20] <haarg> you have to force them to be closures so you can give the different instances different names
[20:10:21] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[20:11:11] <Altreus> these sound like lots of criteria narrowing the circumstances in which it's a concern ... is this a common situation?
[20:11:31] <Altreus> Unnamed generated methods in a multiple-inheritance hierarchy?
[20:13:10] *** Joins: aman (~aman@user/aman)
[20:13:36] <shaldannon> sounds like someone should be writing lisp instead of perl
[20:13:49] <haarg> all generated methods are unnamed
[20:14:05] <haarg> and it doesn't need to be multiple inheritance
[20:14:27] <Altreus> What does "unnamed" mean here?
[20:14:33] <haarg> sub {
[20:14:42] <LeoNerd> Does it act on the GvNAME of the CV's GV, or does it act on the name found in the caller stack? I.e. what happens if you do  *foo = *bar = sub {...};   ?
[20:15:06] <Altreus> sure, but at some point it becomes callable by some token
[20:15:20] <haarg> *foo = sub { # still unnamed
[20:15:40] <Altreus> ok, so it's unnamed in some technical fashion, not in a colloquial "now it's called foo" fashion
[20:15:44] <Ovid> You can also do `my $x = sub { local *__ANON__ = 'name_of_anonyous_sub'; ... }`
[20:16:26] <haarg> LeoNerd: those are the same thing
[20:16:27] <Altreus> just because you can etc
[20:16:59] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[20:17:03] <haarg> it's the GvNAME, but the CV is found by the caller stack
[20:17:31] <LeoNerd> Mmm... so it'll find the same name both times
[20:17:56] <haarg> which is why you have to name the sub using Sub::Name/Sub::Util
[20:18:17] <haarg> and make sure it is a closure or you've just renamed some other generated sub
[20:18:22] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[20:21:25] <perlbot> Mandevil pasted a new file at https://l.perl.bot/p/sur8d4 - 
[20:21:38] <Mandevil> What's wrong with the above?
[20:21:58] * GumbyPAN CPAN Upload: Mozilla-PublicSuffix-v1.0.5 by TOMHUKINS https://metacpan.org/release/TOMHUKINS/Mozilla-PublicSuffix-v1.0.5
[20:22:27] *** Quits: proller (~p@2a02:6b8:0:40c:4945:8fb3:7c3a:bbeb) (Ping timeout: 240 seconds)
[20:22:58] <revhippie> Mandevil: isn't it    class Foo { ... }   ?
[20:23:10] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[20:23:13] <revhippie> n/m, I need to read more.
[20:23:14] <Mandevil> It doesn't need to be.
[20:23:22] <Mandevil> It's like package.
[20:23:48] <Mandevil> The first class works just fine.
[20:24:01] <Mandevil> It's the extension to the class (Test) that somehow goes wrong.
[20:24:21] <LeoNerd> ooooh
[20:24:37] <LeoNerd> Try   class Test isa Cipher::Homophonic { ADJUSTPARAMS{} }
[20:24:47] <LeoNerd> I vaguely recall a "flag not being set" bug about that
[20:25:19] <Mandevil> That doesn't complain.
[20:25:50] <Mandevil> And it works too
[20:26:07] <LeoNerd> Righty. Yah that's an annoying little bug... I should fix that
[20:32:44] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-198.prtc.net)
[20:35:38] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[20:35:59] <Mandevil> What is BUILDARGS getting for arguments? Class name and that's all?
[20:36:09] <LeoNerd> Everything passed to ->new
[20:36:28] <Mandevil> Hm, what I am doing wrong... I see the classname and then nothing.
[20:36:43] <LeoNerd> As a flat list. It's mostly for reshaping things into kvlists, if you wanted to e.g.   SomeClass->new($name, $shape)   and turn it into  (name => $name, shape => $shape)  for :params to handle
[20:36:52] <LeoNerd> Well did you pass anything else to ->new ?
[20:36:59] <Mandevil> I can write this: sub BUILDARGS ($class, @args) ??
[20:37:04] <Mandevil> Yes, I did pass something into new
[20:37:25] <Altreus> does Object::Pad/the spec enforce that ->new is the constructor, or is that just a free method you get with class?
[20:37:42] <LeoNerd> Altreus: it creates the `new` method fot you
[20:37:43] <LeoNerd> *for
[20:37:53] <LeoNerd> Mandevil: yeah that should work
[20:37:56] <Grinnz> other class methods could do whatever they want, but they will end up having to call new to create the object
[20:38:21] <Altreus> It's one of those "it's a convention but bypassing it is a nightmare" things
[20:38:47] <Altreus> presumably
[20:38:48] <Grinnz> i mean the only reason it would be a problem is if you wanted ->new to not be a constructor
[20:38:53] <Altreus> yeah
[20:38:54] <Grinnz> which sounds like a bad idea
[20:38:59] <Altreus> I agree
[20:39:02] <Mandevil> Nah, I screwed something before, it works fine.
[20:39:09] <LeoNerd> ðŸ™Œ
[20:39:16] <Altreus> I feel like "enforcing" new-as-constructor is a positive change
[20:39:28] <Grinnz> same as Moo(se) et al does
[20:39:47] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 240 seconds)
[20:40:05] *** Quits: haarg (haarg@haarg.org) (Quit: Leaving)
[20:40:27] *** Quits: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb) (Remote host closed the connection)
[20:41:05] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[20:41:23] *** Joins: haarg (haarg@haarg.org)
[20:42:04] *** Joins: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb)
[20:47:52] <LeoNerd> Mandevil: I've just fixed the ADJUSTPARAMS bug now.. will be in 0.52
[20:48:09] <Mandevil> Great
[20:48:58] <LeoNerd> actually given there are three separate bugfixes now I might just do a version bump now, before I get around to the `slot` thing I was going to do
[20:49:30] <Mandevil> Renaming has to slot?
[20:49:48] <LeoNerd> Kinda. Not just a rename... a rename with different semantics
[20:52:45] <thrig> why. is. this. code. so. laggy. ... oh yeah the 0.2 second refresh delay on the input loop
[20:54:19] *** Quits: samir (~azureuser@user/samir) (Ping timeout: 268 seconds)
[20:56:10] *** Joins: samir (~azureuser@20.97.234.198)
[20:58:15] *** Quits: samir (~azureuser@20.97.234.198) (Client Quit)
[20:58:23] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[21:00:04] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[21:00:27] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[21:04:23] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:10:59] *** Joins: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b)
[21:11:05] *** Quits: shlomif (~shlomif@87.68.242.72.adsl.012.net.il) (Ping timeout: 248 seconds)
[21:11:29] *** Quits: adherzog (uid387168@id-387168.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[21:12:48] *** Joins: proller (~p@2a02:6b8:0:40c:166e:f609:ee89:e19c)
[21:24:25] *** Quits: aman (~aman@user/aman) (Quit: aman)
[21:26:10] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-198.prtc.net) (Quit: Client closed)
[21:27:02] *** Joins: domq (~domq@vpn-253-190.epfl.ch)
[21:30:54] *** Joins: Pali (~pali@user/pali)
[21:31:47] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 240 seconds)
[21:32:06] * GumbyPAN CPAN Upload: Object-Pad-0.52 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-0.52
[21:32:22] <LeoNerd> Mandevil: ^-- fix
[21:37:40] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 252 seconds)
[21:45:31] <Pali> ehuelsmann[m]: Hi!
[21:46:04] <Pali> I have forwarded comments for https://zetcode.com/perl/dbi/ tutorial and author updated it
[21:46:05] <Paperbot_> Link title(s): [ Perl DBI - database programming in Perl with DBI module ]
[21:47:08] * GumbyPAN CPAN Upload: mb-0.31 by INA https://metacpan.org/release/INA/mb-0.31
[21:47:35] <thrig> ... `sudo cpanm` ... eeek!
[21:51:46] <Mandevil> Object::Pad is up to date (0.51) ... bleh
[21:52:37] <simcop2387> enomirrors
[21:53:02] <xenu> thrig: until perl gets some kind of local::lib ootb this will keep happening
[21:53:48] <xenu> cpan(m) Foo::Bar is simply broken for non-root users
[21:55:53] * genio shakes his fist fervently at that problem
[21:56:38] <xenu> tbh i don't know how to fix it
[21:56:48] <xenu> a naive solution would be to add ~/lib or something to @INC
[21:57:16] <xenu> but that would mean you can can have only one perl
[21:57:17] <Mandevil> ~/perl5lib?
[21:57:29] <xenu> s/can//
[22:02:11] <xenu> i have an idea! ~/perl/<random-uuid>/lib
[22:04:03] <ehuelsmann[m]> Pali: hi! Thanks! Now the tutorial should be more in line with what is generally considered "good Perl practice".
[22:04:57] *** Quits: keutoi (~keutoi@106.208.52.180) (Ping timeout: 248 seconds)
[22:06:58] *** Joins: keutoi (~keutoi@157.47.99.152)
[22:09:40] *** Quits: TonyStone31 (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 240 seconds)
[22:14:00] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[22:15:20] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[22:15:35] <Grinnz> xenu: lib already supports versioned and arched subdirs so it just needs to include the versioned part when it installs
[22:15:43] <Grinnz> this is a local::lib deficiency
[22:17:42] <Grinnz> different perls for bin is of course pretty much impossible to solve, since they all need to be in PATH
[22:17:56] *** neshpion is now known as sir_neshpion
[22:18:07] <Grinnz> this is why perlbrew and plenv both have complicated env shenanigans for bin
[22:18:32] <Pali> ehuelsmann[m]: author wrote that does not write perl code too often and so do not remember if strict or warnings is implicitly enabled or not
[22:19:30] <xenu> Grinnz: version and architecture is not enough
[22:20:22] <xenu> although to be fair, people with multiple perls will usually use something to manage them
[22:20:39] <Grinnz> i think they're enough to be better than the current situation
[22:22:28] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[22:23:46] *** Quits: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net) (Quit: zzzz)
[22:29:11] *** Quits: art1 (~romeyke@p200300ccdf0a93008a46ea9232effccc.dip0.t-ipconnect.de) (Quit: Leaving.)
[22:31:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 250 seconds)
[22:33:46] *** Quits: keutoi (~keutoi@157.47.99.152) (Ping timeout: 252 seconds)
[22:36:40] *** Joins: domq_ (~domq@vpn-253-190.epfl.ch)
[22:36:40] *** Quits: domq (~domq@vpn-253-190.epfl.ch) (Ping timeout: 240 seconds)
[22:36:40] *** domq_ is now known as domq
[22:38:11] *** sir_neshpion is now known as neshpion
[22:41:07] *** Quits: domq (~domq@vpn-253-190.epfl.ch) (Ping timeout: 250 seconds)
[22:44:04] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:48:06] <gordonfish> { Re: gordonfish: check your bill. it's probably on a rental loan kind of thing } Yes I checked both my att cell account and my bank, nothing what so ever there.
[22:48:49] <gordonfish> { Re: <simcop2387> gordonfish: your current phone might not support *their* lte bands, which might have triggered it } My phone supports LTE on AT&T just fine, I've had it since 2019
[22:50:02] *** Joins: domq (~domq@vpn-253-015.epfl.ch)
[22:50:23] <gordonfish> simcop2387: https://gfish.info/att1.jpg they literally say "Free, at no cost to you" but I'll still be watching
[22:51:18] <gordonfish> I've never had any problems with my OP 5T on AT&T, when LTE is available, it shows LTE or LTE+
[22:51:19] *** Joins: diskin (~diskin@85.174.193.160)
[22:51:33] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:51:47] *** Quits: SlayerXP (~martin@2a02:8010:67f6:0:9193:aeda:64e1:a49b) (Ping timeout: 240 seconds)
[22:53:00] *** Quits: pizdets (~pizdets@183.182.110.30) (Ping timeout: 245 seconds)
[22:53:29] *** Joins: pizdets_ (~pizdets@183.182.111.176)
[22:57:40] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[22:57:40] *** diskin is now known as Guest6369
[22:57:40] *** Quits: Guest6369 (~diskin@85.174.193.160) (Killed (cadmium.libera.chat (Nickname regained by services)))
[22:57:40] *** diskin_ is now known as diskin
[22:57:47] *** Quits: pizdets_ (~pizdets@183.182.111.176) (Ping timeout: 240 seconds)
[22:58:34] *** Joins: pizdets (~pizdets@183.182.115.95)
[23:05:25] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[23:12:41] *** Quits: SlayerXP (~martin@jones.hinterlands.org) (Ping timeout: 248 seconds)
[23:13:47] *** Quits: Su-Shee (~Susanne@p4ff49488.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:14:00] *** Quits: gryphn (~gryphon@154.21.20.209) (Quit: kthxbye)
[23:14:06] <simcop2387> gordonfish: yea the op5t supports multiple of their lte bands it lookse sO u bet it's the microcell
[23:14:10] <simcop2387> i bet
[23:15:26] *** Joins: anthk_ (~anthk_@92.176.105.30)
[23:15:47] *** Joins: Su-Shee (~Susanne@p4ffc77b0.dip0.t-ipconnect.de)
[23:16:22] <gordonfish> simcop2387: Yeah I believe their system simply sees I'm using 3G when going through the it (microcell) but doesn't discern between that and real towers for those purposes.
[23:25:45] *** Joins: SlayerXP (~martin@jones.hinterlands.org)
[23:38:33] *** Joins: fling (~fling@user/fling)
[23:43:33] *** Quits: jess (~jess@libera/staff/jess) ()
[23:44:06] *** Quits: toddf (~todd@gateway/tor-sasl/toddf) (Quit: leaving)
[23:45:02] *** Quits: gloin (~gloin@user/gloin) (Read error: Connection reset by peer)
[23:45:15] *** Joins: gloin (~gloin@user/gloin)
[23:50:54] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[23:51:15] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[23:55:48] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[23:57:48] *** Joins: n0xff (~0xff@gateway/tor-sasl/n0xff)
[23:58:06] <n0xff> oupsi, soz guys
