[00:04:31] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[00:08:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:29:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:36:04] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:37:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:48:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:49:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:14:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:17:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:20:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:43:57] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 256 seconds)
[01:45:56] *** Joins: anddam (~anddam@user/anddam)
[02:17:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[02:19:12] *** Joins: aeth (~aeth@user/aeth)
[02:23:25] *** Parts: mala (~mala@user/malaclyps) (Leaving)
[02:58:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[03:00:00] *** Joins: aeth (~aeth@user/aeth)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:41] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:33:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[03:35:27] *** Joins: aeth (~aeth@user/aeth)
[04:02:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:12:05] *** Joins: Oladon (~olad@98.43.81.226)
[05:07:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[05:09:06] *** Joins: aeth (~aeth@user/aeth)
[05:17:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:29:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:56:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[05:58:02] *** Joins: aeth (~aeth@user/aeth)
[06:00:41] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 250 seconds)
[07:08:05] *** Quits: sts-q (~sts-q@212.53.219.179) (Ping timeout: 256 seconds)
[07:15:45] *** Joins: sts-q (~sts-q@91.200.108.228)
[07:30:23] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[07:32:15] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[07:51:30] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 260 seconds)
[08:36:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:37:05] *** Joins: Oladon (~olad@98.43.81.226)
[08:39:39] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[09:51:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:51:12] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[09:51:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:58:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[10:00:09] *** Joins: aeth (~aeth@user/aeth)
[10:31:34] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:01:06] *** Joins: mala (~mala@user/malaclyps)
[11:10:37] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[12:07:40] <lotuseater> How easy it is with CLOS to define for example singleton classes. :)
[12:44:18] <beach> A class with a single instance?
[12:44:23] <beach> Hard to enforce. 
[12:45:19] <beach> You can stick a method on ALLOCATE-INSTANCE that counts and checks the number of instances created. 
[12:45:37] <beach> But then, you won't catch calls to CHANGE-CLASS.
[12:57:56] <pjb> lotuseater: the normal pattern is to provide a function to get the singleton.
[12:57:56] <lotuseater> I just did a toy example with a metaclass.
[12:58:20] <lotuseater> beach: yes there is much more to things
[12:58:51] <pjb> (defclass foo () ())  (defvar *the-foo* nil) (defun get-foo-instance (&rest args &key &allow-other-keys)  (or *the-foo* (setf *the-foo* (apply (function make-instance) 'foo args))))
[12:59:14] <pjb> lotuseater: and then you just use (get-foo-instance)
[13:00:07] <pjb> lotuseater: you really do not want to enforce the singleton other than by convention, because there are a lot of situations where you really want a different instance.  Eg. while writing test cases, while simulating a future state, while saving a past state, etc.
[13:00:28] <lotuseater> it was just an example
[13:02:38] <pjb> lotuseater: in lisp, by the way, you can get mostly the same effect just by using *the-foo* directly, with better properties even.  Ie.  (defclass foo () ((name :initarg :name)))  (defvar *the-foo* (make-instance 'foo :name "My singleton"))   then you use *the-foo*, with the advantage of being able to shadow it with a dynamic binding.
[13:12:41] <lotuseater> thx for the advices as always
[13:14:19] <lotuseater> but pjb, i tried what you said some days ago, for reading in things like [1;2;3] ^^
[13:17:27] <pjb> Why would you need a singleton to read syntax?
[13:17:47] <pjb> Note that multiple threads may read the same syntax at the same time from different sourcesâ€¦
[13:19:35] <lotuseater> why do you think this corresponds now?
[13:19:35] <pjb> Or it was something entirely different.
[13:20:18] <pjb> the ambiguity is whether it was what I said some days ago, that you tried, or whether you tried some days ago, what I said. :-)
[13:21:18] <lotuseater> hehe
[13:21:47] <lotuseater> you said it's easy expanding the read for such syntax and i played with it on the weekend
[13:22:25] <lotuseater> the singleton thing was just for fun cause the teacher said yesterday such behavior patterns are "ferrari class" of OOP
[13:22:47] <lotuseater> but i know this from functional programming too (the word) for faking dependent types in Haskell
[13:37:03] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 264 seconds)
[14:33:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[14:35:48] *** Joins: aeth (~aeth@user/aeth)
[15:01:39] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 264 seconds)
[15:13:45] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:38:45] *** Joins: Nselm (~Nselm@p200300d56f0dd2fd43e7fb66dfd2cd87.dip0.t-ipconnect.de)
[15:54:48] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:00:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:06:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:09:52] *** Quits: Nselm (~Nselm@p200300d56f0dd2fd43e7fb66dfd2cd87.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:22:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:26:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:37:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[17:38:59] *** Joins: aeth (~aeth@user/aeth)
[17:40:42] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[18:19:40] *** Joins: paule32 (~paule32@user/paule32)
[18:20:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:23:23] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:03:42] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:04:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:06:55] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[19:10:08] *** Joins: Josh_2 (~user@37.25.47.130)
[19:46:52] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:58:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:10:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:00:31] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:05:52] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[21:06:53] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[22:05:14] <kagevf> lisp123: have you gotten CLHS access to work in TUI emacs?
[22:17:08] *** Joins: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de)
[22:18:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:19:46] *** Joins: aeth (~aeth@user/aeth)
[22:22:22] <Nselm> A question concerning PAIP: If you take a look at the match-if function and the example presented, this does not work, doesnt it? Because calling eval on something like (?op ?z ?x) where op is bound to + and ?z etc bound to nums can impossibly work because of cls two scopes for fns and vars. And indeed, for me, with the input he gives, it does not
[22:22:22] <Nselm> work. Thus the question: Am I overseeing something? If not, how could that have worked at any point, given that cl has always had two scopes(?)?
[22:22:42] <Nselm> Here the chapter where it occurs: https://github.com/norvig/paip-lisp/blob/main/docs/chapter6.md
[22:50:01] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:50:45] <White_Flame> symbols don't exist in scopes.  Functions, variable bindings, etc do.
[22:51:23] <White_Flame> the plain list of plain symbols & numbers of (+ 1 2) given to EVAL compiles/interprets the first symbol of the list as being in the function/macro namespaces
[23:08:37] <Nselm> Thats what I do not understand. Because x is stored in the variable namespace, isnt it? And if it isnt (which is what the hyperspec says), why does (progv '(x y z) '(+ 2 3) (eval (x y z))) not work?
[23:11:45] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[23:12:11] *** Joins: anddam (~anddam@user/anddam)
[23:15:24] *** Quits: anddam (~anddam@user/anddam) (Client Quit)
[23:15:42] *** Joins: anddam (~anddam@user/anddam)
[23:18:17] *** Quits: anddam (~anddam@user/anddam) (Client Quit)
[23:20:35] *** Joins: anddam (~anddam@user/anddam)
[23:33:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:43:21] <White_Flame> X is just a symbol object
[23:43:26] <White_Flame> it's not "stored" in a namespace
[23:43:37] <White_Flame> in terms of Lisp namespaces.  It is in some package, maybe CL-USER or whatever
[23:43:56] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[23:44:01] <White_Flame> in (x 1), X is looked up in the function/macro namespaces.  In (+ x 1), X is looked up in the variable namespace
[23:44:20] <White_Flame> but it's the exact same symbol object X in both cases
[23:44:23] <White_Flame> Nselm: ^
[23:44:36] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 260 seconds)
[23:44:43] <White_Flame> note that these "lookups" are generally done at compile-time, which EVAL does invoke
